// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  role      String
  schoolId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  school        School?        @relation(fields: [schoolId], references: [id])
  salesLeads    SalesLead[]
  activities    SalesActivity[]
  opportunities SalesOpportunity[]
  contacts      SalesContact[]
}

model School {
  id            String   @id @default(uuid())
  name          String
  type          String
  parentId      String?
  address       String
  latitude      Float
  longitude     Float
  contactNumber String
  email         String
  status        String
  capacity      Int
  principalName String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  parent   School?  @relation("SchoolBranches", fields: [parentId], references: [id])
  branches School[] @relation("SchoolBranches")
  users    User[]
  grades   Grade[]  @relation("SchoolGrades")
}

model Grade {
  id          String   @id @default(uuid())
  name        String
  level       Int
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  schools School[] @relation("SchoolGrades")
  topics  Topic[]
}

model Topic {
  id          String    @id @default(uuid())
  gradeId     String
  title       String
  description String?
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  grade      Grade       @relation(fields: [gradeId], references: [id])
  subTopics  SubTopic[]
}

model SubTopic {
  id          String    @id @default(uuid())
  topicId     String
  title       String
  description String?
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  topic     Topic      @relation(fields: [topicId], references: [id])
  lessons   Lesson[]
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  description String
  status      String   // 'scheduled' | 'in-progress' | 'completed' | 'cancelled'
  duration    Int
  subjectId   String
  teacherId   String
  classId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([subjectId])
  @@index([teacherId])
  @@index([classId])
}

model Exercise {
  id        String   @id @default(uuid())
  lessonId  String
  prompt    String
  mediaUrl  String?
  mediaType String?
  sayText   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  lesson    Lesson    @relation(fields: [lessonId], references: [id])
}

model SalesLead {
  id               String    @id @default(uuid())
  companyName      String
  contactName      String
  email           String
  phone           String?
  status          String
  source          String?
  assignedTo      String?
  estimatedValue  Float?
  probability     Int?
  expectedCloseDate DateTime?
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  assignedUser    User?           @relation(fields: [assignedTo], references: [id])
  activities      SalesActivity[]
  opportunities   SalesOpportunity[]
  contacts        SalesContact[]
}

model SalesActivity {
  id          String    @id @default(uuid())
  leadId      String
  type        String
  subject     String
  description String?
  status      String?
  dueDate     DateTime?
  completedAt DateTime?
  performedBy String
  createdAt   DateTime  @default(now())

  // Relations
  lead        SalesLead @relation(fields: [leadId], references: [id])
  performer   User      @relation(fields: [performedBy], references: [id])
}

model SalesOpportunity {
  id          String    @id @default(uuid())
  leadId      String
  name        String
  stage       String
  amount      Float?
  closeDate   DateTime?
  probability Int?
  nextStep    String?
  competition String?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  lead        SalesLead @relation(fields: [leadId], references: [id])
}

model SalesContact {
  id          String    @id @default(uuid())
  leadId      String
  name        String
  title       String?
  email       String?
  phone       String?
  isPrimary   Boolean   @default(false)
  department  String?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  lead        SalesLead @relation(fields: [leadId], references: [id])
}