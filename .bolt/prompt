# SpeakWell Admin Platform - Next.js Microservices Architecture

Create a modern Next.js application using microservices and serverless architecture with the following specifications:

## Core Architecture

1. Frontend Architecture
- Next.js 14 with App Router
- React Server Components
- Edge Runtime support
- Streaming and Suspense
- Middleware for auth and routing
- Micro-frontends approach

2. State Management & Data Fetching
- TanStack Query v5 with suspense
- Server state management
- Optimistic updates
- Infinite queries
- Automatic background refetching

3. Database & Caching
- Supabase with connection pooling
- Edge caching with Vercel
- Redis for session storage
- Database per service pattern
- Real-time subscriptions

4. Performance Optimizations
- Route prefetching
- Image optimization
- Font optimization
- Bundle optimization
- Dynamic imports

## Microservices Structure

1. Auth Service
- JWT authentication
- Role-based access
- Session management
- Token refresh
- OAuth providers

2. Content Service
- Curriculum management
- Resource handling
- Content delivery
- Media processing
- Version control

3. Sales Service
- Lead management
- Pipeline tracking
- Activity logging
- Opportunity tracking
- Contact management

4. School Service
- School profiles
- Student management
- Staff management
- Resource allocation
- Location services

5. Analytics Service
- Real-time metrics
- Report generation
- Data visualization
- Export capabilities
- Custom dashboards

## Technical Implementation

1. Core Features
- Multi-role dashboards
- Real-time updates
- File management
- Event scheduling
- Reporting system

2. UI Components
- Customizable widgets
- Data grids
- Form builders
- Chart components
- Map integration

3. Error Handling
- Global error boundary
- Service-level errors
- API error handling
- Fallback UI
- Error reporting

4. Performance Monitoring
- Real-time metrics
- Error tracking
- Performance profiling
- User analytics
- Server monitoring

## Development Guidelines

1. Code Organization
- Feature-based structure
- Clean architecture
- Domain-driven design
- SOLID principles
- Type safety

2. Testing Strategy
- Unit tests
- Integration tests
- E2E tests
- Component tests
- API tests

3. Documentation
- API documentation
- Component storybook
- Setup guides
- Architecture diagrams
- Deployment guides

4. Security Measures
- Input validation
- Output sanitization
- Rate limiting
- CORS policies
- Data encryption

## Required Dependencies

1. Core Dependencies
```json
{
  "dependencies": {
    "next": "^14.0.0",
    "react": "^18.3.0",
    "react-dom": "^18.3.0",
    "@tanstack/react-query": "^5.0.0",
    "@supabase/supabase-js": "^2.39.0",
    "lucide-react": "^0.344.0",
    "tailwindcss": "^3.4.0",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.0"
  },
  "devDependencies": {
    "typescript": "^5.5.0",
    "eslint": "^9.9.0",
    "prettier": "^3.2.0",
    "jest": "^29.7.0",
    "cypress": "^13.6.0"
  }
}
```

2. Development Tools
- TypeScript
- ESLint
- Prettier
- Jest
- Cypress

## Deployment Requirements

1. Infrastructure
- Vercel deployment
- Edge functions
- CDN integration
- Database scaling
- Cache invalidation

2. Monitoring
- Error tracking
- Performance monitoring
- User analytics
- Server metrics
- Log aggregation

3. CI/CD Pipeline
- Automated testing
- Code quality checks
- Performance benchmarks
- Security scans
- Automated deployment

4. Security
- SSL/TLS
- Data encryption
- Access controls
- Security headers
- Rate limiting

## Performance Targets

1. Core Web Vitals
- LCP < 2.5s
- FID < 100ms
- CLS < 0.1
- TTFB < 100ms

2. Bundle Size
- Initial JS < 100KB
- Initial CSS < 20KB
- Route-based code splitting
- Dynamic imports
- Tree shaking

3. API Performance
- Response time < 100ms
- Cache hit ratio > 80%
- Error rate < 0.1%
- Uptime > 99.9%

4. Database Performance
- Query time < 50ms
- Connection pooling
- Query optimization
- Index optimization

## Additional Requirements

1. Accessibility
- WCAG 2.1 compliance
- Keyboard navigation
- Screen reader support
- Color contrast
- Focus management

2. Internationalization
- Multi-language support
- RTL support
- Date/time formatting
- Number formatting
- Currency handling

3. Progressive Enhancement
- Offline support
- PWA features
- Fallback UI
- No-JS support
- Low-bandwidth optimization

4. Analytics & Tracking
- User behavior
- Performance metrics
- Error tracking
- Feature usage
- Business metrics