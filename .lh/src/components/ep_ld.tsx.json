{
    "sourceFile": "src/components/ep_ld.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1741893402842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1741893402842,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport React, { useState } from \"react\";\r\nimport { motion } from \"framer-motion\";\r\nimport { Card, CardContent, CardHeader, CardTitle, CardFooter } from \"@/components/ui/card\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { \r\n  Volume2, MessageCircle, Clock, Video, ImageIcon, \r\n  Maximize2, Play, CheckCircle, PenLine, Mic \r\n} from \"lucide-react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { TooltipProvider, Tooltip, TooltipTrigger, TooltipContent } from \"@/components/ui/tooltip\";\r\n\r\ninterface ExercisePromptViewProps {\r\n  prompt: {\r\n    id: string;\r\n    text: string;\r\n    type: 'image' | 'video' | 'gif';\r\n    media: string | null;\r\n    narration: string | null;\r\n    saytext: string | null;\r\n    content?: {\r\n      instructions?: string;\r\n      writingPrompt?: string;\r\n      speakingPrompt?: string;\r\n    };\r\n    metadata?: {\r\n      difficulty?: 'beginner' | 'intermediate' | 'advanced';\r\n      estimatedTime?: number;\r\n    };\r\n  };\r\n  index: number;\r\n}\r\n\r\nexport function ExercisePromptView({ prompt, index }: ExercisePromptViewProps) {\r\n  const [mediaHovered, setMediaHovered] = useState(false);\r\n  const [isCompleted, setIsCompleted] = useState(false);\r\n  \r\n  // Function to dispatch media display event\r\n  const displayMedia = () => {\r\n    if (!prompt.media) return;\r\n    \r\n    // Create the proper event structure for media display\r\n    const detail = {\r\n      sourceId: prompt.id,\r\n      type: prompt.type,\r\n      url: prompt.media,\r\n      title: prompt.text,\r\n      isPermanent: true\r\n    };\r\n    \r\n    // Use the media-display event that the app listens for\r\n    const customEvent = new CustomEvent(\"media-display\", { \r\n      detail,\r\n      bubbles: true,\r\n      cancelable: true \r\n    });\r\n    \r\n    document.dispatchEvent(customEvent);\r\n    console.log(\"Media display event dispatched:\", detail);\r\n  };\r\n  \r\n  // Function to play narration audio\r\n  const playNarration = (e: React.MouseEvent) => {\r\n    e.stopPropagation();\r\n    if (!prompt.narration) return;\r\n    \r\n    // Create text-to-speech event\r\n    const customEvent = new CustomEvent(\"text-to-speech\", { \r\n      detail: {\r\n        text: prompt.narration,\r\n        lang: 'en-US',\r\n        rate: 1.0,\r\n        pitch: 1.0,\r\n        volume: 1.0,\r\n        sourceId: prompt.id\r\n      },\r\n      bubbles: true,\r\n      cancelable: true\r\n    });\r\n    \r\n    document.dispatchEvent(customEvent);\r\n    console.log(\"Playing narration audio\");\r\n  };\r\n\r\n  // Function to handle completion\r\n  const handleComplete = () => {\r\n    setIsCompleted(!isCompleted);\r\n    \r\n    // Dispatch an event to notify completion\r\n    const customEvent = new CustomEvent(\"exercise-completed\", {\r\n      detail: {\r\n        exerciseId: prompt.id,\r\n        completed: !isCompleted\r\n      },\r\n      bubbles: true\r\n    });\r\n    \r\n    document.dispatchEvent(customEvent);\r\n    console.log(`Exercise ${prompt.id} marked as ${!isCompleted ? \"completed\" : \"incomplete\"}`);\r\n  };\r\n  \r\n  // Helper for checking content availability\r\n  const mediaAvailable = prompt.media && prompt.type;\r\n  const hasNarration = !!prompt.narration;\r\n  const hasSayText = !!prompt.saytext;\r\n  const estimatedTime = prompt.metadata?.estimatedTime || 5;\r\n  const difficulty = prompt.metadata?.difficulty || 'beginner';\r\n\r\n  // Get difficulty styles\r\n  const getDifficultyColor = () => {\r\n    switch(difficulty) {\r\n      case 'beginner': return 'from-green-500/10 to-green-500/5 border-green-500/20';\r\n      case 'intermediate': return 'from-blue-500/10 to-blue-500/5 border-blue-500/20';\r\n      case 'advanced': return 'from-red-500/10 to-red-500/5 border-red-500/20';\r\n      default: return 'from-primary/10 to-primary/5 border-primary/20';\r\n    }\r\n  };\r\n\r\n  // Get difficulty badge style\r\n  const getDifficultyBadgeStyle = () => {\r\n    switch(difficulty) {\r\n      case 'beginner': return 'bg-green-500/10 text-green-600 hover:bg-green-500/20';\r\n      case 'intermediate': return 'bg-blue-500/10 text-blue-600 hover:bg-blue-500/20';\r\n      case 'advanced': return 'bg-red-500/10 text-red-600 hover:bg-red-500/20';\r\n      default: return 'bg-primary/10 text-primary hover:bg-primary/20';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <motion.div\r\n      id={`exercise-${prompt.id}`}\r\n      initial={{ opacity: 0, y: 20 }}\r\n      animate={{ opacity: 1, y: 0 }}\r\n      transition={{ duration: 0.3, delay: index * 0.1 }}\r\n      className={cn(\"group\", isCompleted && \"opacity-75\")}\r\n      onMouseEnter={() => {\r\n        if (prompt && prompt.media) {\r\n          displayMedia();\r\n        }\r\n      }}\r\n    >\r\n      <Card className={cn(\r\n        \"overflow-hidden backdrop-blur-sm transition-all duration-300\",\r\n        \"border bg-gradient-to-b from-background to-background/70 hover:shadow-md hover:-translate-y-1\",\r\n        isCompleted && \"bg-muted/50 border-success/20\",\r\n        getDifficultyColor()\r\n      )}>\r\n        {/* Media preview (if available) */}\r\n        {mediaAvailable && (\r\n          <div \r\n            className=\"relative cursor-pointer overflow-hidden\" \r\n            style={{ height: '180px' }}\r\n            onClick={displayMedia}\r\n            onMouseEnter={() => setMediaHovered(true)}\r\n            onMouseLeave={() => setMediaHovered(false)}\r\n          >\r\n            {prompt.type === 'image' && (\r\n              <div className=\"h-full w-full\">\r\n                <img \r\n                  src={prompt.media || ''} \r\n                  alt={prompt.text} \r\n                  className=\"w-full h-full object-cover transition-transform duration-700\"\r\n                  style={{ transform: mediaHovered ? 'scale(1.05)' : 'scale(1)' }}\r\n                />\r\n              </div>\r\n            )}\r\n            \r\n            {prompt.type === 'video' && (\r\n              <div className=\"h-full w-full\">\r\n                <video\r\n                  src={prompt.media || ''}\r\n                  className=\"w-full h-full object-cover\"\r\n                  preload=\"metadata\"\r\n                />\r\n              </div>\r\n            )}\r\n            \r\n            {/* Media overlay with play/expand button */}\r\n            <div className={cn(\r\n              \"absolute inset-0 bg-gradient-to-t from-black/60 via-black/30 to-transparent\",\r\n              \"flex items-center justify-center\",\r\n              \"transition-opacity duration-300\",\r\n              mediaHovered ? \"opacity-100\" : \"opacity-0\"\r\n            )}>\r\n              <Button \r\n                variant=\"outline\" \r\n                size=\"icon\" \r\n                onClick={displayMedia}\r\n                className=\"bg-white/20 hover:bg-white/40 backdrop-blur-sm border-white/30 text-white rounded-full h-12 w-12 transform transition-transform duration-300\"\r\n                style={{ transform: mediaHovered ? 'scale(1.1)' : 'scale(1)' }}\r\n              >\r\n                <Maximize2 className=\"h-5 w-5\" />\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        <CardContent className=\"p-4 space-y-3\">\r\n          {/* Content row for narration and say text - combined in a single section */}\r\n          {(hasNarration || hasSayText) && (\r\n            <div className=\"flex flex-col gap-3\">\r\n              {hasNarration && (\r\n                <div className=\"flex gap-3 items-start\">\r\n                  <div className=\"flex-shrink-0 mt-1\">\r\n                    <Volume2 className=\"h-4 w-4 text-primary\" />\r\n                  </div>\r\n                  <div className=\"flex-1\">\r\n                    <p className=\"text-sm text-muted-foreground line-clamp-2\">\r\n                      {prompt.narration}\r\n                    </p>\r\n                  </div>\r\n                  <Button \r\n                    variant=\"ghost\" \r\n                    size=\"sm\" \r\n                    onClick={playNarration}\r\n                    className=\"flex-shrink-0 text-primary hover:bg-primary/5 h-7 px-2 rounded-full\"\r\n                  >\r\n                    <Play className=\"h-3 w-3 mr-1\" />\r\n                    <span className=\"text-xs\">Play</span>\r\n                  </Button>\r\n                </div>\r\n              )}\r\n              \r\n              {hasSayText && (\r\n                <div className=\"flex gap-3 items-start\">\r\n                  <div className=\"flex-shrink-0 mt-1\">\r\n                    <MessageCircle className=\"h-4 w-4 text-blue-600\" />\r\n                  </div>\r\n                  <div className=\"flex-1\">\r\n                    <p className=\"text-sm font-medium\">\r\n                      {prompt.saytext}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n          \r\n          {/* Writing/Speaking prompts in a compact form */}\r\n          {(prompt.content?.writingPrompt || prompt.content?.speakingPrompt) && (\r\n            <div className=\"flex flex-col gap-3 mt-2\">\r\n              {prompt.content?.writingPrompt && (\r\n                <div className=\"flex gap-3 items-start\">\r\n                  <div className=\"flex-shrink-0 mt-1\">\r\n                    <PenLine className=\"h-4 w-4 text-green-600\" />\r\n                  </div>\r\n                  <div className=\"flex-1\">\r\n                    <p className=\"text-sm text-muted-foreground\">\r\n                      {prompt.content.writingPrompt}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              )}\r\n              \r\n              {prompt.content?.speakingPrompt && (\r\n                <div className=\"flex gap-3 items-start\">\r\n                  <div className=\"flex-shrink-0 mt-1\">\r\n                    <Mic className=\"h-4 w-4 text-amber-600\" />\r\n                  </div>\r\n                  <div className=\"flex-1\">\r\n                    <p className=\"text-sm text-muted-foreground\">\r\n                      {prompt.content.speakingPrompt}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n\r\n        {/* Action footer */}\r\n        <CardFooter className={cn(\r\n          \"flex justify-between items-center px-4 py-3\",\r\n          \"border-t border-border/50 bg-muted/30\"\r\n        )}>\r\n          <div className=\"flex items-center gap-3\">\r\n            <TooltipProvider>\r\n              <Tooltip>\r\n                <TooltipTrigger asChild>\r\n                  <div className=\"flex items-center gap-1 text-muted-foreground\">\r\n                    <Clock className=\"h-4 w-4\" />\r\n                    <span className=\"text-xs\">{estimatedTime} min</span>\r\n                  </div>\r\n                </TooltipTrigger>\r\n                <TooltipContent side=\"bottom\">\r\n                  <p>Estimated time: {estimatedTime} minutes</p>\r\n                </TooltipContent>\r\n              </Tooltip>\r\n            </TooltipProvider>\r\n            \r\n            <Badge variant=\"outline\" className=\"capitalize bg-background/50 text-xs\">\r\n              {prompt.type}\r\n            </Badge>\r\n            \r\n            <TooltipProvider>\r\n              <Tooltip>\r\n                <TooltipTrigger asChild>\r\n                  <Badge variant=\"outline\" className={cn(\"capitalize\", getDifficultyBadgeStyle())}>\r\n                    {difficulty}\r\n                  </Badge>\r\n                </TooltipTrigger>\r\n                <TooltipContent>\r\n                  <p>{difficulty} level exercise</p>\r\n                </TooltipContent>\r\n              </Tooltip>\r\n            </TooltipProvider>\r\n          </div>\r\n          \r\n          {/* Action buttons */}\r\n          <div className=\"flex items-center gap-2\">\r\n            {hasNarration && (\r\n              <Button \r\n                variant=\"ghost\" \r\n                size=\"sm\" \r\n                onClick={playNarration} \r\n                className=\"h-8 rounded-full bg-muted/50 hover:bg-primary/10\"\r\n              >\r\n                <Volume2 className=\"h-3 w-3 mr-1\" />\r\n                <span className=\"text-xs\">Listen</span>\r\n              </Button>\r\n            )}\r\n            \r\n            {mediaAvailable && (\r\n              <Button \r\n                variant=\"outline\" \r\n                size=\"sm\" \r\n                onClick={displayMedia} \r\n                className=\"h-8 rounded-full bg-primary/10 text-primary hover:bg-primary/20 border-primary/30\"\r\n              >\r\n                <Maximize2 className=\"h-3 w-3 mr-1\" />\r\n                <span className=\"text-xs\">Fullscreen</span>\r\n              </Button>\r\n            )}\r\n            \r\n            <Button \r\n              className={cn(\r\n                \"h-8 rounded-full\", \r\n                isCompleted ? \"bg-green-500 hover:bg-green-600\" : \"\"\r\n              )} \r\n              size=\"sm\"\r\n              onClick={handleComplete}\r\n            >\r\n              <CheckCircle className=\"h-3 w-3 mr-1\" />\r\n              <span className=\"text-xs\">{isCompleted ? \"Completed\" : \"Complete\"}</span>\r\n            </Button>\r\n          </div>\r\n        </CardFooter>\r\n      </Card>\r\n    </motion.div>\r\n  );\r\n} "
        }
    ]
}