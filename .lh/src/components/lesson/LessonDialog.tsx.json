{
    "sourceFile": "src/components/lesson/LessonDialog.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 90,
            "patches": [
                {
                    "date": 1739449214915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739449779615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,64 @@\n- \n\\ No newline at end of file\n+\"use client\"\r\n+\r\n+import React from 'react';\r\n+import { Dialog, DialogContent } from \"@/components/ui/dialog\";\r\n+import { Button } from \"@/components/ui/button\";\r\n+import { LoadingSpinner } from \"@/components/LoadingSpinner\";\r\n+import { RefreshCw } from 'lucide-react';\r\n+\r\n+interface LessonDialogProps {\r\n+  isOpen: boolean;\r\n+  onClose: () => void;\r\n+  lessonContent: {\r\n+    content: any;\r\n+    isLoading: boolean;\r\n+    error: string | null;\r\n+  };\r\n+  currentLessonId: string | null;\r\n+  onRetry: () => void;\r\n+}\r\n+\r\n+export function LessonDialog({\r\n+  isOpen,\r\n+  onClose,\r\n+  lessonContent,\r\n+  currentLessonId,\r\n+  onRetry\r\n+}: LessonDialogProps) {\r\n+  return (\r\n+    <Dialog open={isOpen} onOpenChange={onClose}>\r\n+      <DialogContent \r\n+        className=\"max-w-4xl h-[90vh] p-0\"\r\n+        aria-describedby=\"lesson-content-description\"\r\n+      >\r\n+        <div className=\"h-full flex flex-col\">\r\n+          {lessonContent.isLoading ? (\r\n+            <div className=\"flex-1 flex items-center justify-center\">\r\n+              <LoadingSpinner />\r\n+            </div>\r\n+          ) : lessonContent.error ? (\r\n+            <div className=\"flex-1 flex flex-col items-center justify-center gap-4 p-6\">\r\n+              <p className=\"text-destructive\">{lessonContent.error}</p>\r\n+              <Button onClick={onRetry} variant=\"outline\">\r\n+                <RefreshCw className=\"h-4 w-4 mr-2\" />\r\n+                Retry Loading\r\n+              </Button>\r\n+            </div>\r\n+          ) : (\r\n+            <div className=\"flex-1 overflow-y-auto p-6\">\r\n+              {/* Render lesson content here */}\r\n+              <div id=\"lesson-content-description\">\r\n+                {lessonContent.content && (\r\n+                  <div className=\"prose prose-sm max-w-none dark:prose-invert\">\r\n+                    <h1>{lessonContent.content.title}</h1>\r\n+                    <div dangerouslySetInnerHTML={{ __html: lessonContent.content.content || '' }} />\r\n+                  </div>\r\n+                )}\r\n+              </div>\r\n+            </div>\r\n+          )}\r\n+        </div>\r\n+      </DialogContent>\r\n+    </Dialog>\r\n+  );\r\n+} \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739450125012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,12 @@\n \"use client\"\r\n \r\n import React from 'react';\r\n-import { Dialog, DialogContent } from \"@/components/ui/dialog\";\r\n+import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\r\n import { Button } from \"@/components/ui/button\";\r\n import { LoadingSpinner } from \"@/components/LoadingSpinner\";\r\n-import { RefreshCw } from 'lucide-react';\r\n+import { RefreshCw, X } from 'lucide-react';\r\n+import { cn } from \"@/lib/utils\";\r\n \r\n interface LessonDialogProps {\r\n   isOpen: boolean;\r\n   onClose: () => void;\r\n@@ -24,40 +25,72 @@\n   lessonContent,\r\n   currentLessonId,\r\n   onRetry\r\n }: LessonDialogProps) {\r\n+  const dialogId = React.useId();\r\n+  const descriptionId = `${dialogId}-description`;\r\n+  const titleId = `${dialogId}-title`;\r\n+\r\n   return (\r\n     <Dialog open={isOpen} onOpenChange={onClose}>\r\n       <DialogContent \r\n         className=\"max-w-4xl h-[90vh] p-0\"\r\n-        aria-describedby=\"lesson-content-description\"\r\n+        aria-labelledby={titleId}\r\n+        aria-describedby={descriptionId}\r\n       >\r\n+        <DialogHeader className=\"p-4 border-b\">\r\n+          <DialogTitle id={titleId}>\r\n+            {lessonContent.content?.title || 'Lesson Content'}\r\n+          </DialogTitle>\r\n+          <DialogDescription id={descriptionId}>\r\n+            {lessonContent.content?.description || 'Interactive lesson content and activities'}\r\n+          </DialogDescription>\r\n+          <Button \r\n+            variant=\"ghost\" \r\n+            size=\"icon\"\r\n+            onClick={onClose}\r\n+            className=\"absolute right-4 top-4\"\r\n+            aria-label=\"Close lesson\"\r\n+          >\r\n+            <X className=\"h-4 w-4\" />\r\n+          </Button>\r\n+        </DialogHeader>\r\n+\r\n         <div className=\"h-full flex flex-col\">\r\n-          {lessonContent.isLoading ? (\r\n-            <div className=\"flex-1 flex items-center justify-center\">\r\n-              <LoadingSpinner />\r\n-            </div>\r\n-          ) : lessonContent.error ? (\r\n-            <div className=\"flex-1 flex flex-col items-center justify-center gap-4 p-6\">\r\n-              <p className=\"text-destructive\">{lessonContent.error}</p>\r\n-              <Button onClick={onRetry} variant=\"outline\">\r\n-                <RefreshCw className=\"h-4 w-4 mr-2\" />\r\n-                Retry Loading\r\n-              </Button>\r\n-            </div>\r\n-          ) : (\r\n-            <div className=\"flex-1 overflow-y-auto p-6\">\r\n-              {/* Render lesson content here */}\r\n-              <div id=\"lesson-content-description\">\r\n-                {lessonContent.content && (\r\n-                  <div className=\"prose prose-sm max-w-none dark:prose-invert\">\r\n+          <div className=\"flex-1 overflow-y-auto p-6\">\r\n+            {lessonContent.isLoading ? (\r\n+              <div className=\"flex-1 flex items-center justify-center\">\r\n+                <LoadingSpinner message=\"Loading lesson content...\" />\r\n+              </div>\r\n+            ) : lessonContent.error ? (\r\n+              <div className=\"flex-1 flex flex-col items-center justify-center gap-4 p-6\">\r\n+                <div className=\"p-4 bg-destructive/10 rounded-lg text-center\">\r\n+                  <p className=\"text-destructive font-medium mb-4\">{lessonContent.error}</p>\r\n+                  <Button onClick={onRetry} variant=\"outline\" className=\"gap-2\">\r\n+                    <RefreshCw className=\"h-4 w-4\" />\r\n+                    Retry Loading\r\n+                  </Button>\r\n+                </div>\r\n+              </div>\r\n+            ) : (\r\n+              <div className=\"prose prose-sm max-w-none dark:prose-invert\">\r\n+                {lessonContent.content ? (\r\n+                  <>\r\n                     <h1>{lessonContent.content.title}</h1>\r\n-                    <div dangerouslySetInnerHTML={{ __html: lessonContent.content.content || '' }} />\r\n+                    <div \r\n+                      dangerouslySetInnerHTML={{ \r\n+                        __html: lessonContent.content.content || '' \r\n+                      }} \r\n+                    />\r\n+                  </>\r\n+                ) : (\r\n+                  <div className=\"text-center text-muted-foreground\">\r\n+                    No content available\r\n                   </div>\r\n                 )}\r\n               </div>\r\n-            </div>\r\n-          )}\r\n+            )}\r\n+          </div>\r\n         </div>\r\n       </DialogContent>\r\n     </Dialog>\r\n   );\r\n"
                },
                {
                    "date": 1739450326624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,10 +26,10 @@\n   currentLessonId,\r\n   onRetry\r\n }: LessonDialogProps) {\r\n   const dialogId = React.useId();\r\n+  const titleId = `${dialogId}-title`;\r\n   const descriptionId = `${dialogId}-description`;\r\n-  const titleId = `${dialogId}-title`;\r\n \r\n   return (\r\n     <Dialog open={isOpen} onOpenChange={onClose}>\r\n       <DialogContent \r\n@@ -37,12 +37,12 @@\n         aria-labelledby={titleId}\r\n         aria-describedby={descriptionId}\r\n       >\r\n         <DialogHeader className=\"p-4 border-b\">\r\n-          <DialogTitle id={titleId}>\r\n+          <DialogTitle id={titleId} className=\"text-xl font-semibold\">\r\n             {lessonContent.content?.title || 'Lesson Content'}\r\n           </DialogTitle>\r\n-          <DialogDescription id={descriptionId}>\r\n+          <DialogDescription id={descriptionId} className=\"text-sm text-muted-foreground\">\r\n             {lessonContent.content?.description || 'Interactive lesson content and activities'}\r\n           </DialogDescription>\r\n           <Button \r\n             variant=\"ghost\" \r\n"
                },
                {
                    "date": 1739450501460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,20 +40,11 @@\n         <DialogHeader className=\"p-4 border-b\">\r\n           <DialogTitle id={titleId} className=\"text-xl font-semibold\">\r\n             {lessonContent.content?.title || 'Lesson Content'}\r\n           </DialogTitle>\r\n-          <DialogDescription id={descriptionId} className=\"text-sm text-muted-foreground\">\r\n+          <DialogDescription id={descriptionId} className=\"text-sm text-muted-foreground mt-2\">\r\n             {lessonContent.content?.description || 'Interactive lesson content and activities'}\r\n           </DialogDescription>\r\n-          <Button \r\n-            variant=\"ghost\" \r\n-            size=\"icon\"\r\n-            onClick={onClose}\r\n-            className=\"absolute right-4 top-4\"\r\n-            aria-label=\"Close lesson\"\r\n-          >\r\n-            <X className=\"h-4 w-4\" />\r\n-          </Button>\r\n         </DialogHeader>\r\n \r\n         <div className=\"h-full flex flex-col\">\r\n           <div className=\"flex-1 overflow-y-auto p-6\">\r\n@@ -90,8 +81,18 @@\n               </div>\r\n             )}\r\n           </div>\r\n         </div>\r\n+\r\n+        <Button \r\n+          variant=\"ghost\" \r\n+          size=\"icon\"\r\n+          onClick={onClose}\r\n+          className=\"absolute right-4 top-4\"\r\n+          aria-label=\"Close lesson\"\r\n+        >\r\n+          <X className=\"h-4 w-4\" />\r\n+        </Button>\r\n       </DialogContent>\r\n     </Dialog>\r\n   );\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739450888592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import React from 'react';\r\n import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\r\n import { Button } from \"@/components/ui/button\";\r\n import { LoadingSpinner } from \"@/components/LoadingSpinner\";\r\n-import { RefreshCw, X } from 'lucide-react';\r\n+import { RefreshCw, X, BookOpen } from 'lucide-react';\r\n import { cn } from \"@/lib/utils\";\r\n \r\n interface LessonDialogProps {\r\n   isOpen: boolean;\r\n@@ -37,51 +37,65 @@\n         aria-labelledby={titleId}\r\n         aria-describedby={descriptionId}\r\n       >\r\n         <DialogHeader className=\"p-4 border-b\">\r\n-          <DialogTitle id={titleId} className=\"text-xl font-semibold\">\r\n+          <DialogTitle id={titleId} className=\"text-xl font-semibold flex items-center gap-2\">\r\n+            <BookOpen className=\"h-5 w-5 text-primary\" />\r\n             {lessonContent.content?.title || 'Lesson Content'}\r\n           </DialogTitle>\r\n           <DialogDescription id={descriptionId} className=\"text-sm text-muted-foreground mt-2\">\r\n             {lessonContent.content?.description || 'Interactive lesson content and activities'}\r\n           </DialogDescription>\r\n         </DialogHeader>\r\n \r\n-        <div className=\"h-full flex flex-col\">\r\n-          <div className=\"flex-1 overflow-y-auto p-6\">\r\n-            {lessonContent.isLoading ? (\r\n-              <div className=\"flex-1 flex items-center justify-center\">\r\n-                <LoadingSpinner message=\"Loading lesson content...\" />\r\n+        <div className=\"flex-1 overflow-y-auto p-6\">\r\n+          {lessonContent.isLoading ? (\r\n+            <div className=\"flex items-center justify-center h-[50vh]\">\r\n+              <LoadingSpinner message=\"Loading lesson content...\" />\r\n+            </div>\r\n+          ) : lessonContent.error ? (\r\n+            <div className=\"flex flex-col items-center justify-center gap-4 h-[50vh]\">\r\n+              <div className=\"p-6 bg-destructive/10 rounded-lg text-center max-w-md\">\r\n+                <p className=\"text-destructive font-medium mb-4\">{lessonContent.error}</p>\r\n+                <Button onClick={onRetry} variant=\"outline\" className=\"gap-2\">\r\n+                  <RefreshCw className=\"h-4 w-4\" />\r\n+                  Retry Loading\r\n+                </Button>\r\n               </div>\r\n-            ) : lessonContent.error ? (\r\n-              <div className=\"flex-1 flex flex-col items-center justify-center gap-4 p-6\">\r\n-                <div className=\"p-4 bg-destructive/10 rounded-lg text-center\">\r\n-                  <p className=\"text-destructive font-medium mb-4\">{lessonContent.error}</p>\r\n-                  <Button onClick={onRetry} variant=\"outline\" className=\"gap-2\">\r\n-                    <RefreshCw className=\"h-4 w-4\" />\r\n-                    Retry Loading\r\n+            </div>\r\n+          ) : (\r\n+            <div className=\"prose prose-sm max-w-none dark:prose-invert\">\r\n+              {lessonContent.content ? (\r\n+                <div className=\"space-y-6\">\r\n+                  <div className=\"flex flex-col gap-4\">\r\n+                    <h2 className=\"text-2xl font-bold\">{lessonContent.content.title}</h2>\r\n+                    {lessonContent.content.description && (\r\n+                      <p className=\"text-muted-foreground\">{lessonContent.content.description}</p>\r\n+                    )}\r\n+                  </div>\r\n+                  <div \r\n+                    className=\"mt-6\"\r\n+                    dangerouslySetInnerHTML={{ \r\n+                      __html: lessonContent.content.content || '' \r\n+                    }} \r\n+                  />\r\n+                </div>\r\n+              ) : (\r\n+                <div className=\"flex flex-col items-center justify-center h-[50vh] text-center\">\r\n+                  <p className=\"text-muted-foreground\">No content available for this lesson</p>\r\n+                  <Button \r\n+                    variant=\"outline\" \r\n+                    size=\"sm\" \r\n+                    onClick={onRetry}\r\n+                    className=\"mt-4\"\r\n+                  >\r\n+                    <RefreshCw className=\"h-4 w-4 mr-2\" />\r\n+                    Retry Loading Content\r\n                   </Button>\r\n                 </div>\r\n-              </div>\r\n-            ) : (\r\n-              <div className=\"prose prose-sm max-w-none dark:prose-invert\">\r\n-                {lessonContent.content ? (\r\n-                  <>\r\n-                    <h1>{lessonContent.content.title}</h1>\r\n-                    <div \r\n-                      dangerouslySetInnerHTML={{ \r\n-                        __html: lessonContent.content.content || '' \r\n-                      }} \r\n-                    />\r\n-                  </>\r\n-                ) : (\r\n-                  <div className=\"text-center text-muted-foreground\">\r\n-                    No content available\r\n-                  </div>\r\n-                )}\r\n-              </div>\r\n-            )}\r\n-          </div>\r\n+              )}\r\n+            </div>\r\n+          )}\r\n         </div>\r\n \r\n         <Button \r\n           variant=\"ghost\" \r\n"
                },
                {
                    "date": 1739451195538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,13 @@\n import React from 'react';\r\n import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\r\n import { Button } from \"@/components/ui/button\";\r\n import { LoadingSpinner } from \"@/components/LoadingSpinner\";\r\n-import { RefreshCw, X, BookOpen } from 'lucide-react';\r\n+import { RefreshCw, X, BookOpen, Clock, CheckCircle2 } from 'lucide-react';\r\n import { cn } from \"@/lib/utils\";\r\n+import { Badge } from \"@/components/ui/badge\";\r\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\n+import { ScrollArea } from \"@/components/ui/scroll-area\";\r\n \r\n interface LessonDialogProps {\r\n   isOpen: boolean;\r\n   onClose: () => void;\r\n@@ -32,81 +35,174 @@\n \r\n   return (\r\n     <Dialog open={isOpen} onOpenChange={onClose}>\r\n       <DialogContent \r\n-        className=\"max-w-4xl h-[90vh] p-0\"\r\n+        className=\"max-w-[100vw] w-full h-[100vh] p-0 max-h-screen\"\r\n         aria-labelledby={titleId}\r\n         aria-describedby={descriptionId}\r\n       >\r\n-        <DialogHeader className=\"p-4 border-b\">\r\n-          <DialogTitle id={titleId} className=\"text-xl font-semibold flex items-center gap-2\">\r\n-            <BookOpen className=\"h-5 w-5 text-primary\" />\r\n-            {lessonContent.content?.title || 'Lesson Content'}\r\n-          </DialogTitle>\r\n-          <DialogDescription id={descriptionId} className=\"text-sm text-muted-foreground mt-2\">\r\n-            {lessonContent.content?.description || 'Interactive lesson content and activities'}\r\n-          </DialogDescription>\r\n+        <DialogHeader className=\"p-6 border-b bg-background sticky top-0 z-50\">\r\n+          <div className=\"flex items-center justify-between\">\r\n+            <div className=\"flex-1\">\r\n+              <DialogTitle id={titleId} className=\"text-2xl font-semibold flex items-center gap-2\">\r\n+                <BookOpen className=\"h-6 w-6 text-primary\" />\r\n+                {lessonContent.content?.title || 'Lesson Content'}\r\n+              </DialogTitle>\r\n+              <DialogDescription id={descriptionId} className=\"text-base text-muted-foreground mt-2\">\r\n+                {lessonContent.content?.description || 'Interactive lesson content and activities'}\r\n+              </DialogDescription>\r\n+            </div>\r\n+            <Button \r\n+              variant=\"ghost\" \r\n+              size=\"icon\"\r\n+              onClick={onClose}\r\n+              className=\"shrink-0\"\r\n+              aria-label=\"Close lesson\"\r\n+            >\r\n+              <X className=\"h-5 w-5\" />\r\n+            </Button>\r\n+          </div>\r\n         </DialogHeader>\r\n \r\n-        <div className=\"flex-1 overflow-y-auto p-6\">\r\n-          {lessonContent.isLoading ? (\r\n-            <div className=\"flex items-center justify-center h-[50vh]\">\r\n-              <LoadingSpinner message=\"Loading lesson content...\" />\r\n-            </div>\r\n-          ) : lessonContent.error ? (\r\n-            <div className=\"flex flex-col items-center justify-center gap-4 h-[50vh]\">\r\n-              <div className=\"p-6 bg-destructive/10 rounded-lg text-center max-w-md\">\r\n-                <p className=\"text-destructive font-medium mb-4\">{lessonContent.error}</p>\r\n-                <Button onClick={onRetry} variant=\"outline\" className=\"gap-2\">\r\n-                  <RefreshCw className=\"h-4 w-4\" />\r\n-                  Retry Loading\r\n-                </Button>\r\n+        <ScrollArea className=\"h-[calc(100vh-6rem)] w-full\">\r\n+          <div className=\"container max-w-6xl mx-auto p-6\">\r\n+            {lessonContent.isLoading ? (\r\n+              <div className=\"flex items-center justify-center h-[50vh]\">\r\n+                <LoadingSpinner message=\"Loading lesson content...\" />\r\n               </div>\r\n-            </div>\r\n-          ) : (\r\n-            <div className=\"prose prose-sm max-w-none dark:prose-invert\">\r\n-              {lessonContent.content ? (\r\n-                <div className=\"space-y-6\">\r\n-                  <div className=\"flex flex-col gap-4\">\r\n-                    <h2 className=\"text-2xl font-bold\">{lessonContent.content.title}</h2>\r\n-                    {lessonContent.content.description && (\r\n-                      <p className=\"text-muted-foreground\">{lessonContent.content.description}</p>\r\n-                    )}\r\n-                  </div>\r\n-                  <div \r\n-                    className=\"mt-6\"\r\n-                    dangerouslySetInnerHTML={{ \r\n-                      __html: lessonContent.content.content || '' \r\n-                    }} \r\n-                  />\r\n-                </div>\r\n-              ) : (\r\n-                <div className=\"flex flex-col items-center justify-center h-[50vh] text-center\">\r\n-                  <p className=\"text-muted-foreground\">No content available for this lesson</p>\r\n-                  <Button \r\n-                    variant=\"outline\" \r\n-                    size=\"sm\" \r\n-                    onClick={onRetry}\r\n-                    className=\"mt-4\"\r\n-                  >\r\n-                    <RefreshCw className=\"h-4 w-4 mr-2\" />\r\n-                    Retry Loading Content\r\n+            ) : lessonContent.error ? (\r\n+              <div className=\"flex flex-col items-center justify-center gap-4 h-[50vh]\">\r\n+                <div className=\"p-6 bg-destructive/10 rounded-lg text-center max-w-md\">\r\n+                  <p className=\"text-destructive font-medium mb-4\">{lessonContent.error}</p>\r\n+                  <Button onClick={onRetry} variant=\"outline\" className=\"gap-2\">\r\n+                    <RefreshCw className=\"h-4 w-4\" />\r\n+                    Retry Loading\r\n                   </Button>\r\n                 </div>\r\n-              )}\r\n-            </div>\r\n-          )}\r\n-        </div>\r\n+              </div>\r\n+            ) : (\r\n+              <div className=\"space-y-8\">\r\n+                {/* Main Content */}\r\n+                <Card className=\"prose prose-sm max-w-none dark:prose-invert\">\r\n+                  <CardHeader>\r\n+                    <CardTitle>Lesson Content</CardTitle>\r\n+                  </CardHeader>\r\n+                  <CardContent>\r\n+                    <div \r\n+                      className=\"mt-4\"\r\n+                      dangerouslySetInnerHTML={{ \r\n+                        __html: lessonContent.content?.content || 'No content available' \r\n+                      }} \r\n+                    />\r\n+                  </CardContent>\r\n+                </Card>\r\n \r\n-        <Button \r\n-          variant=\"ghost\" \r\n-          size=\"icon\"\r\n-          onClick={onClose}\r\n-          className=\"absolute right-4 top-4\"\r\n-          aria-label=\"Close lesson\"\r\n-        >\r\n-          <X className=\"h-4 w-4\" />\r\n-        </Button>\r\n+                {/* Questions Section */}\r\n+                {lessonContent.content?.questions && lessonContent.content.questions.length > 0 && (\r\n+                  <Card className=\"border-primary/10\">\r\n+                    <CardHeader>\r\n+                      <CardTitle className=\"flex items-center gap-2\">\r\n+                        <CheckCircle2 className=\"h-5 w-5 text-primary\" />\r\n+                        Questions\r\n+                      </CardTitle>\r\n+                    </CardHeader>\r\n+                    <CardContent className=\"space-y-6\">\r\n+                      {lessonContent.content.questions.map((question: any, index: number) => (\r\n+                        <Card key={question.id} className=\"border-primary/5\">\r\n+                          <CardHeader>\r\n+                            <div className=\"flex items-center gap-3\">\r\n+                              <Badge variant=\"outline\" className=\"bg-primary/5\">\r\n+                                Question {index + 1}\r\n+                              </Badge>\r\n+                              <span className=\"text-sm text-muted-foreground\">\r\n+                                {question.points} points\r\n+                              </span>\r\n+                            </div>\r\n+                            <h3 className=\"text-lg font-semibold mt-2\">{question.title}</h3>\r\n+                          </CardHeader>\r\n+                          <CardContent>\r\n+                            <div className=\"space-y-4\">\r\n+                              <p>{question.content}</p>\r\n+                              {question.data?.options && (\r\n+                                <div className=\"space-y-2\">\r\n+                                  {question.data.options.map((option: string, optIndex: number) => (\r\n+                                    <div \r\n+                                      key={optIndex}\r\n+                                      className=\"flex items-center gap-3 p-3 rounded-lg border hover:bg-accent/50 cursor-pointer\"\r\n+                                    >\r\n+                                      <div className=\"w-6 h-6 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\r\n+                                        {String.fromCharCode(65 + optIndex)}\r\n+                                      </div>\r\n+                                      <span>{option}</span>\r\n+                                    </div>\r\n+                                  ))}\r\n+                                </div>\r\n+                              )}\r\n+                            </div>\r\n+                          </CardContent>\r\n+                        </Card>\r\n+                      ))}\r\n+                    </CardContent>\r\n+                  </Card>\r\n+                )}\r\n+\r\n+                {/* Exercise Prompts Section */}\r\n+                {lessonContent.content?.exercise_prompts && lessonContent.content.exercise_prompts.length > 0 && (\r\n+                  <Card className=\"border-primary/10\">\r\n+                    <CardHeader>\r\n+                      <CardTitle className=\"flex items-center gap-2\">\r\n+                        <Clock className=\"h-5 w-5 text-primary\" />\r\n+                        Exercises\r\n+                      </CardTitle>\r\n+                    </CardHeader>\r\n+                    <CardContent className=\"space-y-6\">\r\n+                      {lessonContent.content.exercise_prompts.map((prompt: any, index: number) => (\r\n+                        <Card key={prompt.id} className=\"border-primary/5\">\r\n+                          <CardHeader>\r\n+                            <div className=\"flex items-center gap-3\">\r\n+                              <Badge variant=\"outline\" className=\"bg-primary/5\">\r\n+                                Exercise {index + 1}\r\n+                              </Badge>\r\n+                              <Badge variant=\"outline\" className=\"bg-primary/5\">\r\n+                                {prompt.questionType}\r\n+                              </Badge>\r\n+                            </div>\r\n+                            <h3 className=\"text-lg font-semibold mt-2\">{prompt.text}</h3>\r\n+                          </CardHeader>\r\n+                          <CardContent>\r\n+                            <div className=\"space-y-4\">\r\n+                              {prompt.content?.instructions && (\r\n+                                <p className=\"text-muted-foreground\">{prompt.content.instructions}</p>\r\n+                              )}\r\n+                              {prompt.media && (\r\n+                                <div className=\"mt-4\">\r\n+                                  {prompt.type === 'image' && (\r\n+                                    <img \r\n+                                      src={prompt.media} \r\n+                                      alt={prompt.text}\r\n+                                      className=\"rounded-lg max-h-[300px] object-contain\"\r\n+                                    />\r\n+                                  )}\r\n+                                  {prompt.type === 'video' && (\r\n+                                    <video \r\n+                                      src={prompt.media}\r\n+                                      controls\r\n+                                      className=\"rounded-lg w-full\"\r\n+                                    />\r\n+                                  )}\r\n+                                </div>\r\n+                              )}\r\n+                            </div>\r\n+                          </CardContent>\r\n+                        </Card>\r\n+                      ))}\r\n+                    </CardContent>\r\n+                  </Card>\r\n+                )}\r\n+              </div>\r\n+            )}\r\n+          </div>\r\n+        </ScrollArea>\r\n       </DialogContent>\r\n     </Dialog>\r\n   );\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739452106852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,24 @@\n \"use client\"\r\n \r\n-import React from 'react';\r\n+import React, { useState } from 'react';\r\n import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\r\n import { Button } from \"@/components/ui/button\";\r\n import { LoadingSpinner } from \"@/components/LoadingSpinner\";\r\n-import { RefreshCw, X, BookOpen, Clock, CheckCircle2 } from 'lucide-react';\r\n+import { \r\n+  RefreshCw, X, BookOpen, Clock, CheckCircle2, ChevronRight, \r\n+  Lightbulb, Volume2, VolumeX, Play, Pause, ArrowLeft, ArrowRight,\r\n+  CheckCircle, HelpCircle, Award, Star\r\n+} from 'lucide-react';\r\n import { cn } from \"@/lib/utils\";\r\n import { Badge } from \"@/components/ui/badge\";\r\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\n+import { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\r\n import { ScrollArea } from \"@/components/ui/scroll-area\";\r\n+import { Progress } from \"@/components/ui/progress\";\r\n+import { motion, AnimatePresence } from \"framer-motion\";\r\n+import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\r\n+import { logger } from \"@/lib/logger\";\r\n+import { useToast } from \"@/components/ui/use-toast\";\r\n \r\n interface LessonDialogProps {\r\n   isOpen: boolean;\r\n   onClose: () => void;\r\n@@ -31,178 +40,431 @@\n }: LessonDialogProps) {\r\n   const dialogId = React.useId();\r\n   const titleId = `${dialogId}-title`;\r\n   const descriptionId = `${dialogId}-description`;\r\n+  const { toast } = useToast();\r\n \r\n+  // State for audio controls\r\n+  const [isPlaying, setIsPlaying] = useState(false);\r\n+  const [isMuted, setIsMuted] = useState(false);\r\n+  const [currentProgress, setCurrentProgress] = useState(0);\r\n+  const [activeTab, setActiveTab] = useState(\"content\");\r\n+  const [selectedQuestionIndex, setSelectedQuestionIndex] = useState<number | null>(null);\r\n+\r\n+  // Function to handle tab change with logging\r\n+  const handleTabChange = (value: string) => {\r\n+    logger.info('Tab changed in lesson dialog', {\r\n+      source: 'LessonDialog',\r\n+      context: { \r\n+        previousTab: activeTab,\r\n+        newTab: value,\r\n+        lessonId: currentLessonId\r\n+      }\r\n+    });\r\n+    setActiveTab(value);\r\n+  };\r\n+\r\n+  // Function to toggle audio playback\r\n+  const togglePlayback = () => {\r\n+    setIsPlaying(!isPlaying);\r\n+    logger.info('Audio playback toggled', {\r\n+      source: 'LessonDialog',\r\n+      context: { \r\n+        newState: !isPlaying,\r\n+        lessonId: currentLessonId\r\n+      }\r\n+    });\r\n+  };\r\n+\r\n+  // Function to toggle mute\r\n+  const toggleMute = () => {\r\n+    setIsMuted(!isMuted);\r\n+    logger.info('Audio mute toggled', {\r\n+      source: 'LessonDialog',\r\n+      context: { \r\n+        newState: !isMuted,\r\n+        lessonId: currentLessonId\r\n+      }\r\n+    });\r\n+  };\r\n+\r\n+  // Function to handle question selection\r\n+  const handleQuestionSelect = (index: number) => {\r\n+    setSelectedQuestionIndex(index);\r\n+    logger.info('Question selected', {\r\n+      source: 'LessonDialog',\r\n+      context: { \r\n+        questionIndex: index,\r\n+        lessonId: currentLessonId\r\n+      }\r\n+    });\r\n+  };\r\n+\r\n   return (\r\n     <Dialog open={isOpen} onOpenChange={onClose}>\r\n       <DialogContent \r\n-        className=\"max-w-[100vw] w-full h-[100vh] p-0 max-h-screen\"\r\n+        className=\"max-w-[100vw] w-full h-[100vh] p-0 max-h-screen bg-gradient-to-b from-background to-accent/10\"\r\n         aria-labelledby={titleId}\r\n         aria-describedby={descriptionId}\r\n       >\r\n-        <DialogHeader className=\"p-6 border-b bg-background sticky top-0 z-50\">\r\n+        {/* Header Section */}\r\n+        <DialogHeader className=\"p-6 border-b bg-background/95 backdrop-blur-sm sticky top-0 z-50\">\r\n           <div className=\"flex items-center justify-between\">\r\n             <div className=\"flex-1\">\r\n-              <DialogTitle id={titleId} className=\"text-2xl font-semibold flex items-center gap-2\">\r\n-                <BookOpen className=\"h-6 w-6 text-primary\" />\r\n-                {lessonContent.content?.title || 'Lesson Content'}\r\n-              </DialogTitle>\r\n-              <DialogDescription id={descriptionId} className=\"text-base text-muted-foreground mt-2\">\r\n-                {lessonContent.content?.description || 'Interactive lesson content and activities'}\r\n-              </DialogDescription>\r\n+              <motion.div\r\n+                initial={{ opacity: 0, y: -20 }}\r\n+                animate={{ opacity: 1, y: 0 }}\r\n+                transition={{ duration: 0.3 }}\r\n+              >\r\n+                <DialogTitle id={titleId} className=\"text-2xl font-bold flex items-center gap-2\">\r\n+                  <BookOpen className=\"h-6 w-6 text-primary\" />\r\n+                  {lessonContent.content?.title || 'Lesson Content'}\r\n+                </DialogTitle>\r\n+                <DialogDescription id={descriptionId} className=\"text-base text-muted-foreground mt-2\">\r\n+                  {lessonContent.content?.description || 'Interactive lesson content and activities'}\r\n+                </DialogDescription>\r\n+              </motion.div>\r\n             </div>\r\n-            <Button \r\n-              variant=\"ghost\" \r\n-              size=\"icon\"\r\n-              onClick={onClose}\r\n-              className=\"shrink-0\"\r\n-              aria-label=\"Close lesson\"\r\n-            >\r\n-              <X className=\"h-5 w-5\" />\r\n-            </Button>\r\n+\r\n+            {/* Controls Section */}\r\n+            <div className=\"flex items-center gap-2\">\r\n+              <motion.div\r\n+                initial={{ opacity: 0, x: 20 }}\r\n+                animate={{ opacity: 1, x: 0 }}\r\n+                transition={{ duration: 0.3, delay: 0.1 }}\r\n+                className=\"flex items-center gap-2\"\r\n+              >\r\n+                <Button\r\n+                  variant=\"ghost\"\r\n+                  size=\"icon\"\r\n+                  onClick={toggleMute}\r\n+                  className=\"rounded-full hover:bg-primary/10\"\r\n+                >\r\n+                  {isMuted ? <VolumeX className=\"h-5 w-5\" /> : <Volume2 className=\"h-5 w-5\" />}\r\n+                </Button>\r\n+                <Button\r\n+                  variant=\"ghost\"\r\n+                  size=\"icon\"\r\n+                  onClick={togglePlayback}\r\n+                  className=\"rounded-full hover:bg-primary/10\"\r\n+                >\r\n+                  {isPlaying ? <Pause className=\"h-5 w-5\" /> : <Play className=\"h-5 w-5\" />}\r\n+                </Button>\r\n+              </motion.div>\r\n+\r\n+              <div className=\"h-6 w-px bg-border mx-2\" />\r\n+\r\n+              <Button \r\n+                variant=\"ghost\" \r\n+                size=\"icon\"\r\n+                onClick={onClose}\r\n+                className=\"rounded-full hover:bg-destructive/10\"\r\n+              >\r\n+                <X className=\"h-5 w-5\" />\r\n+              </Button>\r\n+            </div>\r\n           </div>\r\n+\r\n+          {/* Progress Bar */}\r\n+          <div className=\"mt-4\">\r\n+            <Progress value={currentProgress} className=\"h-1\" />\r\n+            <div className=\"flex justify-between mt-1 text-xs text-muted-foreground\">\r\n+              <span>Progress</span>\r\n+              <span>{Math.round(currentProgress)}%</span>\r\n+            </div>\r\n+          </div>\r\n+\r\n+          {/* Navigation Tabs */}\r\n+          <Tabs\r\n+            defaultValue=\"content\"\r\n+            value={activeTab}\r\n+            onValueChange={handleTabChange}\r\n+            className=\"mt-4\"\r\n+          >\r\n+            <TabsList className=\"grid w-full grid-cols-3 lg:w-[400px]\">\r\n+              <TabsTrigger value=\"content\" className=\"flex items-center gap-2\">\r\n+                <BookOpen className=\"h-4 w-4\" />\r\n+                Content\r\n+              </TabsTrigger>\r\n+              <TabsTrigger value=\"questions\" className=\"flex items-center gap-2\">\r\n+                <HelpCircle className=\"h-4 w-4\" />\r\n+                Questions\r\n+              </TabsTrigger>\r\n+              <TabsTrigger value=\"exercises\" className=\"flex items-center gap-2\">\r\n+                <Award className=\"h-4 w-4\" />\r\n+                Exercises\r\n+              </TabsTrigger>\r\n+            </TabsList>\r\n+          </Tabs>\r\n         </DialogHeader>\r\n \r\n-        <ScrollArea className=\"h-[calc(100vh-6rem)] w-full\">\r\n+        {/* Main Content Area */}\r\n+        <ScrollArea className=\"h-[calc(100vh-12rem)] w-full\">\r\n           <div className=\"container max-w-6xl mx-auto p-6\">\r\n             {lessonContent.isLoading ? (\r\n-              <div className=\"flex items-center justify-center h-[50vh]\">\r\n-                <LoadingSpinner message=\"Loading lesson content...\" />\r\n-              </div>\r\n+              <motion.div \r\n+                initial={{ opacity: 0, scale: 0.95 }}\r\n+                animate={{ opacity: 1, scale: 1 }}\r\n+                className=\"flex items-center justify-center h-[50vh]\"\r\n+              >\r\n+                <LoadingSpinner message=\"Loading your lesson content...\" />\r\n+              </motion.div>\r\n             ) : lessonContent.error ? (\r\n-              <div className=\"flex flex-col items-center justify-center gap-4 h-[50vh]\">\r\n-                <div className=\"p-6 bg-destructive/10 rounded-lg text-center max-w-md\">\r\n+              <motion.div \r\n+                initial={{ opacity: 0, y: 20 }}\r\n+                animate={{ opacity: 1, y: 0 }}\r\n+                className=\"flex flex-col items-center justify-center gap-4 h-[50vh]\"\r\n+              >\r\n+                <div className=\"p-8 bg-destructive/10 rounded-lg text-center max-w-md\">\r\n                   <p className=\"text-destructive font-medium mb-4\">{lessonContent.error}</p>\r\n-                  <Button onClick={onRetry} variant=\"outline\" className=\"gap-2\">\r\n+                  <Button \r\n+                    onClick={onRetry} \r\n+                    variant=\"outline\" \r\n+                    className=\"gap-2 hover:bg-destructive/5\"\r\n+                  >\r\n                     <RefreshCw className=\"h-4 w-4\" />\r\n                     Retry Loading\r\n                   </Button>\r\n                 </div>\r\n-              </div>\r\n+              </motion.div>\r\n             ) : (\r\n-              <div className=\"space-y-8\">\r\n-                {/* Main Content */}\r\n-                <Card className=\"prose prose-sm max-w-none dark:prose-invert\">\r\n-                  <CardHeader>\r\n-                    <CardTitle>Lesson Content</CardTitle>\r\n-                  </CardHeader>\r\n-                  <CardContent>\r\n-                    <div \r\n-                      className=\"mt-4\"\r\n-                      dangerouslySetInnerHTML={{ \r\n-                        __html: lessonContent.content?.content || 'No content available' \r\n-                      }} \r\n-                    />\r\n-                  </CardContent>\r\n-                </Card>\r\n+              <AnimatePresence mode=\"wait\">\r\n+                <TabsContent value=\"content\" className=\"mt-0\">\r\n+                  <ContentTab content={lessonContent.content} />\r\n+                </TabsContent>\r\n+                <TabsContent value=\"questions\" className=\"mt-0\">\r\n+                  <QuestionsTab \r\n+                    questions={lessonContent.content?.questions} \r\n+                    selectedIndex={selectedQuestionIndex}\r\n+                    onQuestionSelect={handleQuestionSelect}\r\n+                  />\r\n+                </TabsContent>\r\n+                <TabsContent value=\"exercises\" className=\"mt-0\">\r\n+                  <ExercisesTab exercises={lessonContent.content?.exercise_prompts} />\r\n+                </TabsContent>\r\n+              </AnimatePresence>\r\n+            )}\r\n+          </div>\r\n+        </ScrollArea>\r\n+      </DialogContent>\r\n+    </Dialog>\r\n+  );\r\n+}\r\n \r\n-                {/* Questions Section */}\r\n-                {lessonContent.content?.questions && lessonContent.content.questions.length > 0 && (\r\n-                  <Card className=\"border-primary/10\">\r\n-                    <CardHeader>\r\n-                      <CardTitle className=\"flex items-center gap-2\">\r\n-                        <CheckCircle2 className=\"h-5 w-5 text-primary\" />\r\n-                        Questions\r\n-                      </CardTitle>\r\n-                    </CardHeader>\r\n-                    <CardContent className=\"space-y-6\">\r\n-                      {lessonContent.content.questions.map((question: any, index: number) => (\r\n-                        <Card key={question.id} className=\"border-primary/5\">\r\n-                          <CardHeader>\r\n-                            <div className=\"flex items-center gap-3\">\r\n-                              <Badge variant=\"outline\" className=\"bg-primary/5\">\r\n-                                Question {index + 1}\r\n-                              </Badge>\r\n-                              <span className=\"text-sm text-muted-foreground\">\r\n-                                {question.points} points\r\n-                              </span>\r\n+// Content Tab Component\r\n+function ContentTab({ content }: { content: any }) {\r\n+  return (\r\n+    <motion.div\r\n+      initial={{ opacity: 0, y: 20 }}\r\n+      animate={{ opacity: 1, y: 0 }}\r\n+      exit={{ opacity: 0, y: -20 }}\r\n+      className=\"space-y-8\"\r\n+    >\r\n+      <Card className=\"prose prose-sm max-w-none dark:prose-invert border-primary/10 shadow-md\">\r\n+        <CardHeader>\r\n+          <CardTitle className=\"flex items-center gap-2\">\r\n+            <BookOpen className=\"h-5 w-5 text-primary\" />\r\n+            Lesson Content\r\n+          </CardTitle>\r\n+        </CardHeader>\r\n+        <CardContent>\r\n+          <div \r\n+            className=\"mt-4\"\r\n+            dangerouslySetInnerHTML={{ \r\n+              __html: content?.content || 'No content available' \r\n+            }} \r\n+          />\r\n+        </CardContent>\r\n+      </Card>\r\n+    </motion.div>\r\n+  );\r\n+}\r\n+\r\n+// Questions Tab Component\r\n+function QuestionsTab({ \r\n+  questions, \r\n+  selectedIndex,\r\n+  onQuestionSelect \r\n+}: { \r\n+  questions: any[],\r\n+  selectedIndex: number | null,\r\n+  onQuestionSelect: (index: number) => void\r\n+}) {\r\n+  if (!questions?.length) {\r\n+    return (\r\n+      <motion.div\r\n+        initial={{ opacity: 0 }}\r\n+        animate={{ opacity: 1 }}\r\n+        exit={{ opacity: 0 }}\r\n+        className=\"flex flex-col items-center justify-center h-[50vh] text-center\"\r\n+      >\r\n+        <HelpCircle className=\"h-12 w-12 text-muted-foreground mb-4\" />\r\n+        <p className=\"text-muted-foreground\">No questions available for this lesson</p>\r\n+      </motion.div>\r\n+    );\r\n+  }\r\n+\r\n+  return (\r\n+    <motion.div\r\n+      initial={{ opacity: 0, y: 20 }}\r\n+      animate={{ opacity: 1, y: 0 }}\r\n+      exit={{ opacity: 0, y: -20 }}\r\n+      className=\"space-y-6\"\r\n+    >\r\n+      {questions.map((question, index) => (\r\n+        <motion.div\r\n+          key={question.id}\r\n+          initial={{ opacity: 0, x: -20 }}\r\n+          animate={{ opacity: 1, x: 0 }}\r\n+          transition={{ delay: index * 0.1 }}\r\n+        >\r\n+          <Card \r\n+            className={cn(\r\n+              \"border-primary/10 shadow-md transition-all duration-200\",\r\n+              \"hover:shadow-lg hover:border-primary/30\",\r\n+              selectedIndex === index && \"ring-2 ring-primary ring-offset-2\"\r\n+            )}\r\n+            onClick={() => onQuestionSelect(index)}\r\n+          >\r\n+            <CardHeader>\r\n+              <div className=\"flex items-center justify-between\">\r\n+                <div className=\"flex items-center gap-3\">\r\n+                  <Badge variant=\"outline\" className=\"bg-primary/5\">\r\n+                    Question {index + 1}\r\n+                  </Badge>\r\n+                  <Badge variant=\"outline\" className=\"bg-primary/5\">\r\n+                    {question.points} points\r\n+                  </Badge>\r\n+                </div>\r\n+                {selectedIndex === index && (\r\n+                  <Badge variant=\"outline\" className=\"bg-primary/10 text-primary\">\r\n+                    Selected\r\n+                  </Badge>\r\n+                )}\r\n+              </div>\r\n+              <CardTitle className=\"text-lg mt-2\">{question.title}</CardTitle>\r\n+            </CardHeader>\r\n+            <CardContent>\r\n+              <div className=\"space-y-4\">\r\n+                <p className=\"text-muted-foreground\">{question.content}</p>\r\n+                {question.data?.options && (\r\n+                  <div className=\"grid gap-2\">\r\n+                    {question.data.options.map((option: string, optIndex: number) => (\r\n+                      <motion.div\r\n+                        key={optIndex}\r\n+                        whileHover={{ scale: 1.01 }}\r\n+                        whileTap={{ scale: 0.99 }}\r\n+                      >\r\n+                        <Button\r\n+                          variant=\"outline\"\r\n+                          className=\"w-full justify-start text-left h-auto p-4\"\r\n+                        >\r\n+                          <div className=\"flex items-center gap-3\">\r\n+                            <div className=\"w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\r\n+                              {String.fromCharCode(65 + optIndex)}\r\n                             </div>\r\n-                            <h3 className=\"text-lg font-semibold mt-2\">{question.title}</h3>\r\n-                          </CardHeader>\r\n-                          <CardContent>\r\n-                            <div className=\"space-y-4\">\r\n-                              <p>{question.content}</p>\r\n-                              {question.data?.options && (\r\n-                                <div className=\"space-y-2\">\r\n-                                  {question.data.options.map((option: string, optIndex: number) => (\r\n-                                    <div \r\n-                                      key={optIndex}\r\n-                                      className=\"flex items-center gap-3 p-3 rounded-lg border hover:bg-accent/50 cursor-pointer\"\r\n-                                    >\r\n-                                      <div className=\"w-6 h-6 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\r\n-                                        {String.fromCharCode(65 + optIndex)}\r\n-                                      </div>\r\n-                                      <span>{option}</span>\r\n-                                    </div>\r\n-                                  ))}\r\n-                                </div>\r\n-                              )}\r\n-                            </div>\r\n-                          </CardContent>\r\n-                        </Card>\r\n-                      ))}\r\n-                    </CardContent>\r\n-                  </Card>\r\n+                            <span>{option}</span>\r\n+                          </div>\r\n+                        </Button>\r\n+                      </motion.div>\r\n+                    ))}\r\n+                  </div>\r\n                 )}\r\n+              </div>\r\n+            </CardContent>\r\n+          </Card>\r\n+        </motion.div>\r\n+      ))}\r\n+    </motion.div>\r\n+  );\r\n+}\r\n \r\n-                {/* Exercise Prompts Section */}\r\n-                {lessonContent.content?.exercise_prompts && lessonContent.content.exercise_prompts.length > 0 && (\r\n-                  <Card className=\"border-primary/10\">\r\n-                    <CardHeader>\r\n-                      <CardTitle className=\"flex items-center gap-2\">\r\n-                        <Clock className=\"h-5 w-5 text-primary\" />\r\n-                        Exercises\r\n-                      </CardTitle>\r\n-                    </CardHeader>\r\n-                    <CardContent className=\"space-y-6\">\r\n-                      {lessonContent.content.exercise_prompts.map((prompt: any, index: number) => (\r\n-                        <Card key={prompt.id} className=\"border-primary/5\">\r\n-                          <CardHeader>\r\n-                            <div className=\"flex items-center gap-3\">\r\n-                              <Badge variant=\"outline\" className=\"bg-primary/5\">\r\n-                                Exercise {index + 1}\r\n-                              </Badge>\r\n-                              <Badge variant=\"outline\" className=\"bg-primary/5\">\r\n-                                {prompt.questionType}\r\n-                              </Badge>\r\n-                            </div>\r\n-                            <h3 className=\"text-lg font-semibold mt-2\">{prompt.text}</h3>\r\n-                          </CardHeader>\r\n-                          <CardContent>\r\n-                            <div className=\"space-y-4\">\r\n-                              {prompt.content?.instructions && (\r\n-                                <p className=\"text-muted-foreground\">{prompt.content.instructions}</p>\r\n-                              )}\r\n-                              {prompt.media && (\r\n-                                <div className=\"mt-4\">\r\n-                                  {prompt.type === 'image' && (\r\n-                                    <img \r\n-                                      src={prompt.media} \r\n-                                      alt={prompt.text}\r\n-                                      className=\"rounded-lg max-h-[300px] object-contain\"\r\n-                                    />\r\n-                                  )}\r\n-                                  {prompt.type === 'video' && (\r\n-                                    <video \r\n-                                      src={prompt.media}\r\n-                                      controls\r\n-                                      className=\"rounded-lg w-full\"\r\n-                                    />\r\n-                                  )}\r\n-                                </div>\r\n-                              )}\r\n-                            </div>\r\n-                          </CardContent>\r\n-                        </Card>\r\n-                      ))}\r\n-                    </CardContent>\r\n-                  </Card>\r\n+// Exercises Tab Component\r\n+function ExercisesTab({ exercises }: { exercises: any[] }) {\r\n+  if (!exercises?.length) {\r\n+    return (\r\n+      <motion.div\r\n+        initial={{ opacity: 0 }}\r\n+        animate={{ opacity: 1 }}\r\n+        exit={{ opacity: 0 }}\r\n+        className=\"flex flex-col items-center justify-center h-[50vh] text-center\"\r\n+      >\r\n+        <Award className=\"h-12 w-12 text-muted-foreground mb-4\" />\r\n+        <p className=\"text-muted-foreground\">No exercises available for this lesson</p>\r\n+      </motion.div>\r\n+    );\r\n+  }\r\n+\r\n+  return (\r\n+    <motion.div\r\n+      initial={{ opacity: 0, y: 20 }}\r\n+      animate={{ opacity: 1, y: 0 }}\r\n+      exit={{ opacity: 0, y: -20 }}\r\n+      className=\"space-y-6\"\r\n+    >\r\n+      {exercises.map((exercise, index) => (\r\n+        <motion.div\r\n+          key={exercise.id}\r\n+          initial={{ opacity: 0, x: -20 }}\r\n+          animate={{ opacity: 1, x: 0 }}\r\n+          transition={{ delay: index * 0.1 }}\r\n+        >\r\n+          <Card className=\"border-primary/10 shadow-md hover:shadow-lg transition-all duration-200\">\r\n+            <CardHeader>\r\n+              <div className=\"flex items-center gap-3\">\r\n+                <Badge variant=\"outline\" className=\"bg-primary/5\">\r\n+                  Exercise {index + 1}\r\n+                </Badge>\r\n+                <Badge variant=\"outline\" className=\"bg-primary/5\">\r\n+                  {exercise.questionType}\r\n+                </Badge>\r\n+                {exercise.difficulty && (\r\n+                  <Badge \r\n+                    variant=\"outline\" \r\n+                    className={cn(\r\n+                      \"capitalize\",\r\n+                      exercise.difficulty === 'beginner' && \"bg-green-500/10 text-green-500\",\r\n+                      exercise.difficulty === 'intermediate' && \"bg-yellow-500/10 text-yellow-500\",\r\n+                      exercise.difficulty === 'advanced' && \"bg-red-500/10 text-red-500\"\r\n+                    )}\r\n+                  >\r\n+                    {exercise.difficulty}\r\n+                  </Badge>\r\n                 )}\r\n               </div>\r\n-            )}\r\n-          </div>\r\n-        </ScrollArea>\r\n-      </DialogContent>\r\n-    </Dialog>\r\n+              <CardTitle className=\"text-lg mt-2\">{exercise.text}</CardTitle>\r\n+              {exercise.content?.instructions && (\r\n+                <CardDescription className=\"mt-2 flex items-center gap-2\">\r\n+                  <Lightbulb className=\"h-4 w-4 text-primary\" />\r\n+                  {exercise.content.instructions}\r\n+                </CardDescription>\r\n+              )}\r\n+            </CardHeader>\r\n+            <CardContent>\r\n+              <div className=\"space-y-4\">\r\n+                {exercise.media && (\r\n+                  <div className=\"mt-4 rounded-lg overflow-hidden border\">\r\n+                    {exercise.type === 'image' && (\r\n+                      <img \r\n+                        src={exercise.media} \r\n+                        alt={exercise.text}\r\n+                        className=\"w-full h-auto object-cover\"\r\n+                      />\r\n+                    )}\r\n+                    {exercise.type === 'video' && (\r\n+                      <video \r\n+                        src={exercise.media}\r\n+                        controls\r\n+                        className=\"w-full\"\r\n+                        preload=\"metadata\"\r\n+                      />\r\n+                    )}\r\n+                  </div>\r\n+                )}\r\n+              </div>\r\n+            </CardContent>\r\n+          </Card>\r\n+        </motion.div>\r\n+      ))}\r\n+    </motion.div>\r\n   );\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739452274982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,23 +226,23 @@\n                   </Button>\r\n                 </div>\r\n               </motion.div>\r\n             ) : (\r\n-              <AnimatePresence mode=\"wait\">\r\n-                <TabsContent value=\"content\" className=\"mt-0\">\r\n+              <Tabs defaultValue=\"content\" value={activeTab} onValueChange={handleTabChange}>\r\n+                <TabsContent value=\"content\">\r\n                   <ContentTab content={lessonContent.content} />\r\n                 </TabsContent>\r\n-                <TabsContent value=\"questions\" className=\"mt-0\">\r\n+                <TabsContent value=\"questions\">\r\n                   <QuestionsTab \r\n                     questions={lessonContent.content?.questions} \r\n                     selectedIndex={selectedQuestionIndex}\r\n                     onQuestionSelect={handleQuestionSelect}\r\n                   />\r\n                 </TabsContent>\r\n-                <TabsContent value=\"exercises\" className=\"mt-0\">\r\n+                <TabsContent value=\"exercises\">\r\n                   <ExercisesTab exercises={lessonContent.content?.exercise_prompts} />\r\n                 </TabsContent>\r\n-              </AnimatePresence>\r\n+              </Tabs>\r\n             )}\r\n           </div>\r\n         </ScrollArea>\r\n       </DialogContent>\r\n"
                },
                {
                    "date": 1739452646119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -253,11 +253,12 @@\n // Content Tab Component\r\n function ContentTab({ content }: { content: any }) {\r\n   return (\r\n     <motion.div\r\n-      initial={{ opacity: 0, y: 20 }}\r\n-      animate={{ opacity: 1, y: 0 }}\r\n-      exit={{ opacity: 0, y: -20 }}\r\n+      initial={{ opacity: 0 }}\r\n+      animate={{ opacity: 1 }}\r\n+      exit={{ opacity: 0 }}\r\n+      transition={{ duration: 0.2 }}\r\n       className=\"space-y-8\"\r\n     >\r\n       <Card className=\"prose prose-sm max-w-none dark:prose-invert border-primary/10 shadow-md\">\r\n         <CardHeader>\r\n@@ -294,8 +295,9 @@\n       <motion.div\r\n         initial={{ opacity: 0 }}\r\n         animate={{ opacity: 1 }}\r\n         exit={{ opacity: 0 }}\r\n+        transition={{ duration: 0.2 }}\r\n         className=\"flex flex-col items-center justify-center h-[50vh] text-center\"\r\n       >\r\n         <HelpCircle className=\"h-12 w-12 text-muted-foreground mb-4\" />\r\n         <p className=\"text-muted-foreground\">No questions available for this lesson</p>\r\n@@ -304,18 +306,19 @@\n   }\r\n \r\n   return (\r\n     <motion.div\r\n-      initial={{ opacity: 0, y: 20 }}\r\n-      animate={{ opacity: 1, y: 0 }}\r\n-      exit={{ opacity: 0, y: -20 }}\r\n+      initial={{ opacity: 0 }}\r\n+      animate={{ opacity: 1 }}\r\n+      exit={{ opacity: 0 }}\r\n+      transition={{ duration: 0.2 }}\r\n       className=\"space-y-6\"\r\n     >\r\n       {questions.map((question, index) => (\r\n         <motion.div\r\n           key={question.id}\r\n-          initial={{ opacity: 0, x: -20 }}\r\n-          animate={{ opacity: 1, x: 0 }}\r\n+          initial={{ opacity: 0, y: 20 }}\r\n+          animate={{ opacity: 1, y: 0 }}\r\n           transition={{ delay: index * 0.1 }}\r\n         >\r\n           <Card \r\n             className={cn(\r\n@@ -385,8 +388,9 @@\n       <motion.div\r\n         initial={{ opacity: 0 }}\r\n         animate={{ opacity: 1 }}\r\n         exit={{ opacity: 0 }}\r\n+        transition={{ duration: 0.2 }}\r\n         className=\"flex flex-col items-center justify-center h-[50vh] text-center\"\r\n       >\r\n         <Award className=\"h-12 w-12 text-muted-foreground mb-4\" />\r\n         <p className=\"text-muted-foreground\">No exercises available for this lesson</p>\r\n@@ -395,18 +399,19 @@\n   }\r\n \r\n   return (\r\n     <motion.div\r\n-      initial={{ opacity: 0, y: 20 }}\r\n-      animate={{ opacity: 1, y: 0 }}\r\n-      exit={{ opacity: 0, y: -20 }}\r\n+      initial={{ opacity: 0 }}\r\n+      animate={{ opacity: 1 }}\r\n+      exit={{ opacity: 0 }}\r\n+      transition={{ duration: 0.2 }}\r\n       className=\"space-y-6\"\r\n     >\r\n       {exercises.map((exercise, index) => (\r\n         <motion.div\r\n           key={exercise.id}\r\n-          initial={{ opacity: 0, x: -20 }}\r\n-          animate={{ opacity: 1, x: 0 }}\r\n+          initial={{ opacity: 0, y: 20 }}\r\n+          animate={{ opacity: 1, y: 0 }}\r\n           transition={{ delay: index * 0.1 }}\r\n         >\r\n           <Card className=\"border-primary/10 shadow-md hover:shadow-lg transition-all duration-200\">\r\n             <CardHeader>\r\n"
                },
                {
                    "date": 1739452658266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n \"use client\"\r\n \r\n-import React, { useState } from 'react';\r\n+import React, { useState, useRef, useEffect } from 'react';\r\n import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\r\n import { Button } from \"@/components/ui/button\";\r\n import { LoadingSpinner } from \"@/components/LoadingSpinner\";\r\n import { \r\n@@ -17,8 +17,10 @@\n import { motion, AnimatePresence } from \"framer-motion\";\r\n import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\r\n import { logger } from \"@/lib/logger\";\r\n import { useToast } from \"@/components/ui/use-toast\";\r\n+import useSound from 'use-sound';\r\n+import confetti from 'canvas-confetti';\r\n \r\n interface LessonDialogProps {\r\n   isOpen: boolean;\r\n   onClose: () => void;\r\n@@ -48,8 +50,13 @@\n   const [isMuted, setIsMuted] = useState(false);\r\n   const [currentProgress, setCurrentProgress] = useState(0);\r\n   const [activeTab, setActiveTab] = useState(\"content\");\r\n   const [selectedQuestionIndex, setSelectedQuestionIndex] = useState<number | null>(null);\r\n+  const audioRef = useRef<HTMLAudioElement | null>(null);\r\n+  const [playSuccess] = useSound('/sounds/success.mp3', { volume: 0.5 });\r\n+  const [lessonProgress, setLessonProgress] = useState(0);\r\n+  const [expandedQuestions, setExpandedQuestions] = useState<Set<number>>(new Set());\r\n+  const [completedQuestions, setCompletedQuestions] = useState<Set<number>>(new Set());\r\n \r\n   // Function to handle tab change with logging\r\n   const handleTabChange = (value: string) => {\r\n     logger.info('Tab changed in lesson dialog', {\r\n@@ -98,8 +105,52 @@\n       }\r\n     });\r\n   };\r\n \r\n+  // Monitor audio progress\r\n+  useEffect(() => {\r\n+    if (audioRef.current) {\r\n+      const handleTimeUpdate = () => {\r\n+        if (audioRef.current) {\r\n+          const progress = (audioRef.current.currentTime / audioRef.current.duration) * 100;\r\n+          setLessonProgress(progress);\r\n+          setCurrentProgress(progress);\r\n+        }\r\n+      };\r\n+\r\n+      audioRef.current.addEventListener('timeupdate', handleTimeUpdate);\r\n+      return () => audioRef.current?.removeEventListener('timeupdate', handleTimeUpdate);\r\n+    }\r\n+  }, []);\r\n+\r\n+  // Handle question expansion\r\n+  const toggleQuestionExpansion = (index: number) => {\r\n+    const newExpanded = new Set(expandedQuestions);\r\n+    if (newExpanded.has(index)) {\r\n+      newExpanded.delete(index);\r\n+    } else {\r\n+      newExpanded.add(index);\r\n+    }\r\n+    setExpandedQuestions(newExpanded);\r\n+  };\r\n+\r\n+  // Handle question completion\r\n+  const handleQuestionComplete = (index: number) => {\r\n+    const newCompleted = new Set(completedQuestions);\r\n+    newCompleted.add(index);\r\n+    setCompletedQuestions(newCompleted);\r\n+\r\n+    // Trigger success animation if all questions are completed\r\n+    if (newCompleted.size === (lessonContent.content?.questions?.length || 0)) {\r\n+      playSuccess();\r\n+      confetti({\r\n+        particleCount: 100,\r\n+        spread: 70,\r\n+        origin: { y: 0.6 }\r\n+      });\r\n+    }\r\n+  };\r\n+\r\n   return (\r\n     <Dialog open={isOpen} onOpenChange={onClose}>\r\n       <DialogContent \r\n         className=\"max-w-[100vw] w-full h-[100vh] p-0 max-h-screen bg-gradient-to-b from-background to-accent/10\"\r\n@@ -196,56 +247,131 @@\n             </TabsList>\r\n           </Tabs>\r\n         </DialogHeader>\r\n \r\n-        {/* Main Content Area */}\r\n-        <ScrollArea className=\"h-[calc(100vh-12rem)] w-full\">\r\n-          <div className=\"container max-w-6xl mx-auto p-6\">\r\n-            {lessonContent.isLoading ? (\r\n-              <motion.div \r\n-                initial={{ opacity: 0, scale: 0.95 }}\r\n-                animate={{ opacity: 1, scale: 1 }}\r\n-                className=\"flex items-center justify-center h-[50vh]\"\r\n-              >\r\n-                <LoadingSpinner message=\"Loading your lesson content...\" />\r\n-              </motion.div>\r\n-            ) : lessonContent.error ? (\r\n-              <motion.div \r\n-                initial={{ opacity: 0, y: 20 }}\r\n-                animate={{ opacity: 1, y: 0 }}\r\n-                className=\"flex flex-col items-center justify-center gap-4 h-[50vh]\"\r\n-              >\r\n-                <div className=\"p-8 bg-destructive/10 rounded-lg text-center max-w-md\">\r\n-                  <p className=\"text-destructive font-medium mb-4\">{lessonContent.error}</p>\r\n-                  <Button \r\n-                    onClick={onRetry} \r\n-                    variant=\"outline\" \r\n-                    className=\"gap-2 hover:bg-destructive/5\"\r\n-                  >\r\n-                    <RefreshCw className=\"h-4 w-4\" />\r\n-                    Retry Loading\r\n-                  </Button>\r\n+        {/* Main Content Area - Updated with split layout */}\r\n+        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 h-[calc(100vh-12rem)]\">\r\n+          {/* Left Section - Main Content */}\r\n+          <div className=\"lg:col-span-2 overflow-hidden\">\r\n+            <ScrollArea className=\"h-full w-full\">\r\n+              <div className=\"p-6 space-y-6\">\r\n+                {lessonContent.isLoading ? (\r\n+                  <LoadingSpinner message=\"Loading your lesson content...\" />\r\n+                ) : lessonContent.error ? (\r\n+                  <div className=\"p-8 bg-destructive/10 rounded-lg text-center\">\r\n+                    <p className=\"text-destructive font-medium mb-4\">{lessonContent.error}</p>\r\n+                    <Button onClick={onRetry} variant=\"outline\">\r\n+                      <RefreshCw className=\"h-4 w-4 mr-2\" />\r\n+                      Retry Loading\r\n+                    </Button>\r\n+                  </div>\r\n+                ) : (\r\n+                  <Tabs defaultValue=\"content\" value={activeTab} onValueChange={handleTabChange}>\r\n+                    <TabsContent value=\"content\">\r\n+                      <ContentTab content={lessonContent.content} />\r\n+                    </TabsContent>\r\n+                    <TabsContent value=\"questions\">\r\n+                      <QuestionsTab \r\n+                        questions={lessonContent.content?.questions} \r\n+                        selectedIndex={selectedQuestionIndex}\r\n+                        onQuestionSelect={handleQuestionSelect}\r\n+                        expandedQuestions={expandedQuestions}\r\n+                        completedQuestions={completedQuestions}\r\n+                        onToggleExpansion={toggleQuestionExpansion}\r\n+                        onQuestionComplete={handleQuestionComplete}\r\n+                      />\r\n+                      {completedQuestions.size === (lessonContent.content?.questions?.length || 0) && (\r\n+                        <motion.div\r\n+                          initial={{ opacity: 0, y: 20 }}\r\n+                          animate={{ opacity: 1, y: 0 }}\r\n+                          className=\"mt-8\"\r\n+                        >\r\n+                          <Button \r\n+                            className=\"w-full\"\r\n+                            onClick={() => {\r\n+                              // Handle next lesson navigation\r\n+                              logger.info('Navigating to next lesson', {\r\n+                                source: 'LessonDialog',\r\n+                                context: { currentLessonId }\r\n+                              });\r\n+                            }}\r\n+                          >\r\n+                            Continue to Next Lesson\r\n+                            <ArrowRight className=\"ml-2 h-4 w-4\" />\r\n+                          </Button>\r\n+                        </motion.div>\r\n+                      )}\r\n+                    </TabsContent>\r\n+                    <TabsContent value=\"exercises\">\r\n+                      <ExercisesTab exercises={lessonContent.content?.exercise_prompts} />\r\n+                    </TabsContent>\r\n+                  </Tabs>\r\n+                )}\r\n+              </div>\r\n+            </ScrollArea>\r\n+          </div>\r\n+\r\n+          {/* Right Section - Media and Progress */}\r\n+          <div className=\"hidden lg:block\">\r\n+            <Card className=\"sticky top-4 h-full\">\r\n+              <CardHeader>\r\n+                <CardTitle>Lesson Progress</CardTitle>\r\n+              </CardHeader>\r\n+              <CardContent className=\"space-y-4\">\r\n+                {/* Audio Progress */}\r\n+                <div className=\"space-y-2\">\r\n+                  <div className=\"flex items-center justify-between text-sm\">\r\n+                    <span>Audio Progress</span>\r\n+                    <span>{Math.round(lessonProgress)}%</span>\r\n+                  </div>\r\n+                  <Progress value={lessonProgress} className=\"h-2\" />\r\n                 </div>\r\n-              </motion.div>\r\n-            ) : (\r\n-              <Tabs defaultValue=\"content\" value={activeTab} onValueChange={handleTabChange}>\r\n-                <TabsContent value=\"content\">\r\n-                  <ContentTab content={lessonContent.content} />\r\n-                </TabsContent>\r\n-                <TabsContent value=\"questions\">\r\n-                  <QuestionsTab \r\n-                    questions={lessonContent.content?.questions} \r\n-                    selectedIndex={selectedQuestionIndex}\r\n-                    onQuestionSelect={handleQuestionSelect}\r\n+\r\n+                {/* Questions Progress */}\r\n+                <div className=\"space-y-2\">\r\n+                  <div className=\"flex items-center justify-between text-sm\">\r\n+                    <span>Questions Completed</span>\r\n+                    <span>{completedQuestions.size}/{lessonContent.content?.questions?.length || 0}</span>\r\n+                  </div>\r\n+                  <Progress \r\n+                    value={(completedQuestions.size / (lessonContent.content?.questions?.length || 1)) * 100} \r\n+                    className=\"h-2\" \r\n                   />\r\n-                </TabsContent>\r\n-                <TabsContent value=\"exercises\">\r\n-                  <ExercisesTab exercises={lessonContent.content?.exercise_prompts} />\r\n-                </TabsContent>\r\n-              </Tabs>\r\n-            )}\r\n+                </div>\r\n+\r\n+                {/* Media Section */}\r\n+                <div className=\"mt-8 space-y-4\">\r\n+                  <h3 className=\"font-semibold\">Lesson Media</h3>\r\n+                  {lessonContent.content?.questions?.map((question: any, index: number) => (\r\n+                    question.data?.metadata?.imageUrl && (\r\n+                      <Card key={index} className=\"overflow-hidden\">\r\n+                        <img\r\n+                          src={question.data.metadata.imageUrl}\r\n+                          alt={`Media ${index + 1}`}\r\n+                          className=\"w-full h-48 object-cover\"\r\n+                          loading=\"lazy\"\r\n+                        />\r\n+                      </Card>\r\n+                    )\r\n+                  ))}\r\n+                </div>\r\n+              </CardContent>\r\n+            </Card>\r\n           </div>\r\n-        </ScrollArea>\r\n+        </div>\r\n+\r\n+        {/* Hidden audio element */}\r\n+        <audio\r\n+          ref={audioRef}\r\n+          onEnded={() => setIsPlaying(false)}\r\n+          onError={(e) => {\r\n+            logger.error('Audio playback error', {\r\n+              source: 'LessonDialog',\r\n+              context: { error: e }\r\n+            });\r\n+            setIsPlaying(false);\r\n+          }}\r\n+        />\r\n       </DialogContent>\r\n     </Dialog>\r\n   );\r\n }\r\n@@ -283,13 +409,21 @@\n // Questions Tab Component\r\n function QuestionsTab({ \r\n   questions, \r\n   selectedIndex,\r\n-  onQuestionSelect \r\n+  onQuestionSelect,\r\n+  expandedQuestions,\r\n+  completedQuestions,\r\n+  onToggleExpansion,\r\n+  onQuestionComplete\r\n }: { \r\n   questions: any[],\r\n   selectedIndex: number | null,\r\n-  onQuestionSelect: (index: number) => void\r\n+  onQuestionSelect: (index: number) => void,\r\n+  expandedQuestions: Set<number>,\r\n+  completedQuestions: Set<number>,\r\n+  onToggleExpansion: (index: number) => void,\r\n+  onQuestionComplete: (index: number) => void\r\n }) {\r\n   if (!questions?.length) {\r\n     return (\r\n       <motion.div\r\n"
                },
                {
                    "date": 1739452812248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,609 +1,475 @@\n-\"use client\"\r\n-\r\n-import React, { useState, useRef, useEffect } from 'react';\r\n-import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\r\n-import { Button } from \"@/components/ui/button\";\r\n-import { LoadingSpinner } from \"@/components/LoadingSpinner\";\r\n-import { \r\n-  RefreshCw, X, BookOpen, Clock, CheckCircle2, ChevronRight, \r\n-  Lightbulb, Volume2, VolumeX, Play, Pause, ArrowLeft, ArrowRight,\r\n-  CheckCircle, HelpCircle, Award, Star\r\n-} from 'lucide-react';\r\n-import { cn } from \"@/lib/utils\";\r\n-import { Badge } from \"@/components/ui/badge\";\r\n-import { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\r\n-import { ScrollArea } from \"@/components/ui/scroll-area\";\r\n-import { Progress } from \"@/components/ui/progress\";\r\n-import { motion, AnimatePresence } from \"framer-motion\";\r\n-import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\r\n-import { logger } from \"@/lib/logger\";\r\n-import { useToast } from \"@/components/ui/use-toast\";\r\n-import useSound from 'use-sound';\r\n-import confetti from 'canvas-confetti';\r\n-\r\n-interface LessonDialogProps {\r\n-  isOpen: boolean;\r\n-  onClose: () => void;\r\n-  lessonContent: {\r\n-    content: any;\r\n-    isLoading: boolean;\r\n-    error: string | null;\r\n-  };\r\n-  currentLessonId: string | null;\r\n-  onRetry: () => void;\r\n-}\r\n-\r\n-export function LessonDialog({\r\n-  isOpen,\r\n-  onClose,\r\n-  lessonContent,\r\n-  currentLessonId,\r\n-  onRetry\r\n-}: LessonDialogProps) {\r\n-  const dialogId = React.useId();\r\n-  const titleId = `${dialogId}-title`;\r\n-  const descriptionId = `${dialogId}-description`;\r\n-  const { toast } = useToast();\r\n-\r\n-  // State for audio controls\r\n-  const [isPlaying, setIsPlaying] = useState(false);\r\n-  const [isMuted, setIsMuted] = useState(false);\r\n-  const [currentProgress, setCurrentProgress] = useState(0);\r\n-  const [activeTab, setActiveTab] = useState(\"content\");\r\n-  const [selectedQuestionIndex, setSelectedQuestionIndex] = useState<number | null>(null);\r\n-  const audioRef = useRef<HTMLAudioElement | null>(null);\r\n-  const [playSuccess] = useSound('/sounds/success.mp3', { volume: 0.5 });\r\n-  const [lessonProgress, setLessonProgress] = useState(0);\r\n-  const [expandedQuestions, setExpandedQuestions] = useState<Set<number>>(new Set());\r\n-  const [completedQuestions, setCompletedQuestions] = useState<Set<number>>(new Set());\r\n-\r\n-  // Function to handle tab change with logging\r\n-  const handleTabChange = (value: string) => {\r\n-    logger.info('Tab changed in lesson dialog', {\r\n-      source: 'LessonDialog',\r\n-      context: { \r\n-        previousTab: activeTab,\r\n-        newTab: value,\r\n-        lessonId: currentLessonId\r\n-      }\r\n-    });\r\n-    setActiveTab(value);\r\n-  };\r\n-\r\n-  // Function to toggle audio playback\r\n-  const togglePlayback = () => {\r\n-    setIsPlaying(!isPlaying);\r\n-    logger.info('Audio playback toggled', {\r\n-      source: 'LessonDialog',\r\n-      context: { \r\n-        newState: !isPlaying,\r\n-        lessonId: currentLessonId\r\n-      }\r\n-    });\r\n-  };\r\n-\r\n-  // Function to toggle mute\r\n-  const toggleMute = () => {\r\n-    setIsMuted(!isMuted);\r\n-    logger.info('Audio mute toggled', {\r\n-      source: 'LessonDialog',\r\n-      context: { \r\n-        newState: !isMuted,\r\n-        lessonId: currentLessonId\r\n-      }\r\n-    });\r\n-  };\r\n-\r\n-  // Function to handle question selection\r\n-  const handleQuestionSelect = (index: number) => {\r\n-    setSelectedQuestionIndex(index);\r\n-    logger.info('Question selected', {\r\n-      source: 'LessonDialog',\r\n-      context: { \r\n-        questionIndex: index,\r\n-        lessonId: currentLessonId\r\n-      }\r\n-    });\r\n-  };\r\n-\r\n-  // Monitor audio progress\r\n-  useEffect(() => {\r\n-    if (audioRef.current) {\r\n-      const handleTimeUpdate = () => {\r\n-        if (audioRef.current) {\r\n-          const progress = (audioRef.current.currentTime / audioRef.current.duration) * 100;\r\n-          setLessonProgress(progress);\r\n-          setCurrentProgress(progress);\r\n-        }\r\n-      };\r\n-\r\n-      audioRef.current.addEventListener('timeupdate', handleTimeUpdate);\r\n-      return () => audioRef.current?.removeEventListener('timeupdate', handleTimeUpdate);\r\n-    }\r\n-  }, []);\r\n-\r\n-  // Handle question expansion\r\n-  const toggleQuestionExpansion = (index: number) => {\r\n-    const newExpanded = new Set(expandedQuestions);\r\n-    if (newExpanded.has(index)) {\r\n-      newExpanded.delete(index);\r\n-    } else {\r\n-      newExpanded.add(index);\r\n-    }\r\n-    setExpandedQuestions(newExpanded);\r\n-  };\r\n-\r\n-  // Handle question completion\r\n-  const handleQuestionComplete = (index: number) => {\r\n-    const newCompleted = new Set(completedQuestions);\r\n-    newCompleted.add(index);\r\n-    setCompletedQuestions(newCompleted);\r\n-\r\n-    // Trigger success animation if all questions are completed\r\n-    if (newCompleted.size === (lessonContent.content?.questions?.length || 0)) {\r\n-      playSuccess();\r\n-      confetti({\r\n-        particleCount: 100,\r\n-        spread: 70,\r\n-        origin: { y: 0.6 }\r\n-      });\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <Dialog open={isOpen} onOpenChange={onClose}>\r\n-      <DialogContent \r\n-        className=\"max-w-[100vw] w-full h-[100vh] p-0 max-h-screen bg-gradient-to-b from-background to-accent/10\"\r\n-        aria-labelledby={titleId}\r\n-        aria-describedby={descriptionId}\r\n-      >\r\n-        {/* Header Section */}\r\n-        <DialogHeader className=\"p-6 border-b bg-background/95 backdrop-blur-sm sticky top-0 z-50\">\r\n-          <div className=\"flex items-center justify-between\">\r\n-            <div className=\"flex-1\">\r\n-              <motion.div\r\n-                initial={{ opacity: 0, y: -20 }}\r\n-                animate={{ opacity: 1, y: 0 }}\r\n-                transition={{ duration: 0.3 }}\r\n-              >\r\n-                <DialogTitle id={titleId} className=\"text-2xl font-bold flex items-center gap-2\">\r\n-                  <BookOpen className=\"h-6 w-6 text-primary\" />\r\n-                  {lessonContent.content?.title || 'Lesson Content'}\r\n-                </DialogTitle>\r\n-                <DialogDescription id={descriptionId} className=\"text-base text-muted-foreground mt-2\">\r\n-                  {lessonContent.content?.description || 'Interactive lesson content and activities'}\r\n-                </DialogDescription>\r\n-              </motion.div>\r\n-            </div>\r\n-\r\n-            {/* Controls Section */}\r\n-            <div className=\"flex items-center gap-2\">\r\n-              <motion.div\r\n-                initial={{ opacity: 0, x: 20 }}\r\n-                animate={{ opacity: 1, x: 0 }}\r\n-                transition={{ duration: 0.3, delay: 0.1 }}\r\n-                className=\"flex items-center gap-2\"\r\n-              >\r\n-                <Button\r\n-                  variant=\"ghost\"\r\n-                  size=\"icon\"\r\n-                  onClick={toggleMute}\r\n-                  className=\"rounded-full hover:bg-primary/10\"\r\n-                >\r\n-                  {isMuted ? <VolumeX className=\"h-5 w-5\" /> : <Volume2 className=\"h-5 w-5\" />}\r\n-                </Button>\r\n-                <Button\r\n-                  variant=\"ghost\"\r\n-                  size=\"icon\"\r\n-                  onClick={togglePlayback}\r\n-                  className=\"rounded-full hover:bg-primary/10\"\r\n-                >\r\n-                  {isPlaying ? <Pause className=\"h-5 w-5\" /> : <Play className=\"h-5 w-5\" />}\r\n-                </Button>\r\n-              </motion.div>\r\n-\r\n-              <div className=\"h-6 w-px bg-border mx-2\" />\r\n-\r\n-              <Button \r\n-                variant=\"ghost\" \r\n-                size=\"icon\"\r\n-                onClick={onClose}\r\n-                className=\"rounded-full hover:bg-destructive/10\"\r\n-              >\r\n-                <X className=\"h-5 w-5\" />\r\n-              </Button>\r\n-            </div>\r\n-          </div>\r\n-\r\n-          {/* Progress Bar */}\r\n-          <div className=\"mt-4\">\r\n-            <Progress value={currentProgress} className=\"h-1\" />\r\n-            <div className=\"flex justify-between mt-1 text-xs text-muted-foreground\">\r\n-              <span>Progress</span>\r\n-              <span>{Math.round(currentProgress)}%</span>\r\n-            </div>\r\n-          </div>\r\n-\r\n-          {/* Navigation Tabs */}\r\n-          <Tabs\r\n-            defaultValue=\"content\"\r\n-            value={activeTab}\r\n-            onValueChange={handleTabChange}\r\n-            className=\"mt-4\"\r\n-          >\r\n-            <TabsList className=\"grid w-full grid-cols-3 lg:w-[400px]\">\r\n-              <TabsTrigger value=\"content\" className=\"flex items-center gap-2\">\r\n-                <BookOpen className=\"h-4 w-4\" />\r\n-                Content\r\n-              </TabsTrigger>\r\n-              <TabsTrigger value=\"questions\" className=\"flex items-center gap-2\">\r\n-                <HelpCircle className=\"h-4 w-4\" />\r\n-                Questions\r\n-              </TabsTrigger>\r\n-              <TabsTrigger value=\"exercises\" className=\"flex items-center gap-2\">\r\n-                <Award className=\"h-4 w-4\" />\r\n-                Exercises\r\n-              </TabsTrigger>\r\n-            </TabsList>\r\n-          </Tabs>\r\n-        </DialogHeader>\r\n-\r\n-        {/* Main Content Area - Updated with split layout */}\r\n-        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 h-[calc(100vh-12rem)]\">\r\n-          {/* Left Section - Main Content */}\r\n-          <div className=\"lg:col-span-2 overflow-hidden\">\r\n-            <ScrollArea className=\"h-full w-full\">\r\n-              <div className=\"p-6 space-y-6\">\r\n-                {lessonContent.isLoading ? (\r\n-                  <LoadingSpinner message=\"Loading your lesson content...\" />\r\n-                ) : lessonContent.error ? (\r\n-                  <div className=\"p-8 bg-destructive/10 rounded-lg text-center\">\r\n-                    <p className=\"text-destructive font-medium mb-4\">{lessonContent.error}</p>\r\n-                    <Button onClick={onRetry} variant=\"outline\">\r\n-                      <RefreshCw className=\"h-4 w-4 mr-2\" />\r\n-                      Retry Loading\r\n-                    </Button>\r\n-                  </div>\r\n-                ) : (\r\n-                  <Tabs defaultValue=\"content\" value={activeTab} onValueChange={handleTabChange}>\r\n-                    <TabsContent value=\"content\">\r\n-                      <ContentTab content={lessonContent.content} />\r\n-                    </TabsContent>\r\n-                    <TabsContent value=\"questions\">\r\n-                      <QuestionsTab \r\n-                        questions={lessonContent.content?.questions} \r\n-                        selectedIndex={selectedQuestionIndex}\r\n-                        onQuestionSelect={handleQuestionSelect}\r\n-                        expandedQuestions={expandedQuestions}\r\n-                        completedQuestions={completedQuestions}\r\n-                        onToggleExpansion={toggleQuestionExpansion}\r\n-                        onQuestionComplete={handleQuestionComplete}\r\n-                      />\r\n-                      {completedQuestions.size === (lessonContent.content?.questions?.length || 0) && (\r\n-                        <motion.div\r\n-                          initial={{ opacity: 0, y: 20 }}\r\n-                          animate={{ opacity: 1, y: 0 }}\r\n-                          className=\"mt-8\"\r\n-                        >\r\n-                          <Button \r\n-                            className=\"w-full\"\r\n-                            onClick={() => {\r\n-                              // Handle next lesson navigation\r\n-                              logger.info('Navigating to next lesson', {\r\n-                                source: 'LessonDialog',\r\n-                                context: { currentLessonId }\r\n-                              });\r\n-                            }}\r\n-                          >\r\n-                            Continue to Next Lesson\r\n-                            <ArrowRight className=\"ml-2 h-4 w-4\" />\r\n-                          </Button>\r\n-                        </motion.div>\r\n-                      )}\r\n-                    </TabsContent>\r\n-                    <TabsContent value=\"exercises\">\r\n-                      <ExercisesTab exercises={lessonContent.content?.exercise_prompts} />\r\n-                    </TabsContent>\r\n-                  </Tabs>\r\n-                )}\r\n-              </div>\r\n-            </ScrollArea>\r\n-          </div>\r\n-\r\n-          {/* Right Section - Media and Progress */}\r\n-          <div className=\"hidden lg:block\">\r\n-            <Card className=\"sticky top-4 h-full\">\r\n-              <CardHeader>\r\n-                <CardTitle>Lesson Progress</CardTitle>\r\n-              </CardHeader>\r\n-              <CardContent className=\"space-y-4\">\r\n-                {/* Audio Progress */}\r\n-                <div className=\"space-y-2\">\r\n-                  <div className=\"flex items-center justify-between text-sm\">\r\n-                    <span>Audio Progress</span>\r\n-                    <span>{Math.round(lessonProgress)}%</span>\r\n-                  </div>\r\n-                  <Progress value={lessonProgress} className=\"h-2\" />\r\n-                </div>\r\n-\r\n-                {/* Questions Progress */}\r\n-                <div className=\"space-y-2\">\r\n-                  <div className=\"flex items-center justify-between text-sm\">\r\n-                    <span>Questions Completed</span>\r\n-                    <span>{completedQuestions.size}/{lessonContent.content?.questions?.length || 0}</span>\r\n-                  </div>\r\n-                  <Progress \r\n-                    value={(completedQuestions.size / (lessonContent.content?.questions?.length || 1)) * 100} \r\n-                    className=\"h-2\" \r\n-                  />\r\n-                </div>\r\n-\r\n-                {/* Media Section */}\r\n-                <div className=\"mt-8 space-y-4\">\r\n-                  <h3 className=\"font-semibold\">Lesson Media</h3>\r\n-                  {lessonContent.content?.questions?.map((question: any, index: number) => (\r\n-                    question.data?.metadata?.imageUrl && (\r\n-                      <Card key={index} className=\"overflow-hidden\">\r\n-                        <img\r\n-                          src={question.data.metadata.imageUrl}\r\n-                          alt={`Media ${index + 1}`}\r\n-                          className=\"w-full h-48 object-cover\"\r\n-                          loading=\"lazy\"\r\n-                        />\r\n-                      </Card>\r\n-                    )\r\n-                  ))}\r\n-                </div>\r\n-              </CardContent>\r\n-            </Card>\r\n-          </div>\r\n-        </div>\r\n-\r\n-        {/* Hidden audio element */}\r\n-        <audio\r\n-          ref={audioRef}\r\n-          onEnded={() => setIsPlaying(false)}\r\n-          onError={(e) => {\r\n-            logger.error('Audio playback error', {\r\n-              source: 'LessonDialog',\r\n-              context: { error: e }\r\n-            });\r\n-            setIsPlaying(false);\r\n-          }}\r\n-        />\r\n-      </DialogContent>\r\n-    </Dialog>\r\n-  );\r\n-}\r\n-\r\n-// Content Tab Component\r\n-function ContentTab({ content }: { content: any }) {\r\n-  return (\r\n-    <motion.div\r\n-      initial={{ opacity: 0 }}\r\n-      animate={{ opacity: 1 }}\r\n-      exit={{ opacity: 0 }}\r\n-      transition={{ duration: 0.2 }}\r\n-      className=\"space-y-8\"\r\n-    >\r\n-      <Card className=\"prose prose-sm max-w-none dark:prose-invert border-primary/10 shadow-md\">\r\n-        <CardHeader>\r\n-          <CardTitle className=\"flex items-center gap-2\">\r\n-            <BookOpen className=\"h-5 w-5 text-primary\" />\r\n-            Lesson Content\r\n-          </CardTitle>\r\n-        </CardHeader>\r\n-        <CardContent>\r\n-          <div \r\n-            className=\"mt-4\"\r\n-            dangerouslySetInnerHTML={{ \r\n-              __html: content?.content || 'No content available' \r\n-            }} \r\n-          />\r\n-        </CardContent>\r\n-      </Card>\r\n-    </motion.div>\r\n-  );\r\n-}\r\n-\r\n-// Questions Tab Component\r\n-function QuestionsTab({ \r\n-  questions, \r\n-  selectedIndex,\r\n-  onQuestionSelect,\r\n-  expandedQuestions,\r\n-  completedQuestions,\r\n-  onToggleExpansion,\r\n-  onQuestionComplete\r\n-}: { \r\n-  questions: any[],\r\n-  selectedIndex: number | null,\r\n-  onQuestionSelect: (index: number) => void,\r\n-  expandedQuestions: Set<number>,\r\n-  completedQuestions: Set<number>,\r\n-  onToggleExpansion: (index: number) => void,\r\n-  onQuestionComplete: (index: number) => void\r\n-}) {\r\n-  if (!questions?.length) {\r\n-    return (\r\n-      <motion.div\r\n-        initial={{ opacity: 0 }}\r\n-        animate={{ opacity: 1 }}\r\n-        exit={{ opacity: 0 }}\r\n-        transition={{ duration: 0.2 }}\r\n-        className=\"flex flex-col items-center justify-center h-[50vh] text-center\"\r\n-      >\r\n-        <HelpCircle className=\"h-12 w-12 text-muted-foreground mb-4\" />\r\n-        <p className=\"text-muted-foreground\">No questions available for this lesson</p>\r\n-      </motion.div>\r\n-    );\r\n-  }\r\n-\r\n-  return (\r\n-    <motion.div\r\n-      initial={{ opacity: 0 }}\r\n-      animate={{ opacity: 1 }}\r\n-      exit={{ opacity: 0 }}\r\n-      transition={{ duration: 0.2 }}\r\n-      className=\"space-y-6\"\r\n-    >\r\n-      {questions.map((question, index) => (\r\n-        <motion.div\r\n-          key={question.id}\r\n-          initial={{ opacity: 0, y: 20 }}\r\n-          animate={{ opacity: 1, y: 0 }}\r\n-          transition={{ delay: index * 0.1 }}\r\n-        >\r\n-          <Card \r\n-            className={cn(\r\n-              \"border-primary/10 shadow-md transition-all duration-200\",\r\n-              \"hover:shadow-lg hover:border-primary/30\",\r\n-              selectedIndex === index && \"ring-2 ring-primary ring-offset-2\"\r\n-            )}\r\n-            onClick={() => onQuestionSelect(index)}\r\n-          >\r\n-            <CardHeader>\r\n-              <div className=\"flex items-center justify-between\">\r\n-                <div className=\"flex items-center gap-3\">\r\n-                  <Badge variant=\"outline\" className=\"bg-primary/5\">\r\n-                    Question {index + 1}\r\n-                  </Badge>\r\n-                  <Badge variant=\"outline\" className=\"bg-primary/5\">\r\n-                    {question.points} points\r\n-                  </Badge>\r\n-                </div>\r\n-                {selectedIndex === index && (\r\n-                  <Badge variant=\"outline\" className=\"bg-primary/10 text-primary\">\r\n-                    Selected\r\n-                  </Badge>\r\n-                )}\r\n-              </div>\r\n-              <CardTitle className=\"text-lg mt-2\">{question.title}</CardTitle>\r\n-            </CardHeader>\r\n-            <CardContent>\r\n-              <div className=\"space-y-4\">\r\n-                <p className=\"text-muted-foreground\">{question.content}</p>\r\n-                {question.data?.options && (\r\n-                  <div className=\"grid gap-2\">\r\n-                    {question.data.options.map((option: string, optIndex: number) => (\r\n-                      <motion.div\r\n-                        key={optIndex}\r\n-                        whileHover={{ scale: 1.01 }}\r\n-                        whileTap={{ scale: 0.99 }}\r\n-                      >\r\n-                        <Button\r\n-                          variant=\"outline\"\r\n-                          className=\"w-full justify-start text-left h-auto p-4\"\r\n-                        >\r\n-                          <div className=\"flex items-center gap-3\">\r\n-                            <div className=\"w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\r\n-                              {String.fromCharCode(65 + optIndex)}\r\n-                            </div>\r\n-                            <span>{option}</span>\r\n-                          </div>\r\n-                        </Button>\r\n-                      </motion.div>\r\n-                    ))}\r\n-                  </div>\r\n-                )}\r\n-              </div>\r\n-            </CardContent>\r\n-          </Card>\r\n-        </motion.div>\r\n-      ))}\r\n-    </motion.div>\r\n-  );\r\n-}\r\n-\r\n-// Exercises Tab Component\r\n-function ExercisesTab({ exercises }: { exercises: any[] }) {\r\n-  if (!exercises?.length) {\r\n-    return (\r\n-      <motion.div\r\n-        initial={{ opacity: 0 }}\r\n-        animate={{ opacity: 1 }}\r\n-        exit={{ opacity: 0 }}\r\n-        transition={{ duration: 0.2 }}\r\n-        className=\"flex flex-col items-center justify-center h-[50vh] text-center\"\r\n-      >\r\n-        <Award className=\"h-12 w-12 text-muted-foreground mb-4\" />\r\n-        <p className=\"text-muted-foreground\">No exercises available for this lesson</p>\r\n-      </motion.div>\r\n-    );\r\n-  }\r\n-\r\n-  return (\r\n-    <motion.div\r\n-      initial={{ opacity: 0 }}\r\n-      animate={{ opacity: 1 }}\r\n-      exit={{ opacity: 0 }}\r\n-      transition={{ duration: 0.2 }}\r\n-      className=\"space-y-6\"\r\n-    >\r\n-      {exercises.map((exercise, index) => (\r\n-        <motion.div\r\n-          key={exercise.id}\r\n-          initial={{ opacity: 0, y: 20 }}\r\n-          animate={{ opacity: 1, y: 0 }}\r\n-          transition={{ delay: index * 0.1 }}\r\n-        >\r\n-          <Card className=\"border-primary/10 shadow-md hover:shadow-lg transition-all duration-200\">\r\n-            <CardHeader>\r\n-              <div className=\"flex items-center gap-3\">\r\n-                <Badge variant=\"outline\" className=\"bg-primary/5\">\r\n-                  Exercise {index + 1}\r\n-                </Badge>\r\n-                <Badge variant=\"outline\" className=\"bg-primary/5\">\r\n-                  {exercise.questionType}\r\n-                </Badge>\r\n-                {exercise.difficulty && (\r\n-                  <Badge \r\n-                    variant=\"outline\" \r\n-                    className={cn(\r\n-                      \"capitalize\",\r\n-                      exercise.difficulty === 'beginner' && \"bg-green-500/10 text-green-500\",\r\n-                      exercise.difficulty === 'intermediate' && \"bg-yellow-500/10 text-yellow-500\",\r\n-                      exercise.difficulty === 'advanced' && \"bg-red-500/10 text-red-500\"\r\n-                    )}\r\n-                  >\r\n-                    {exercise.difficulty}\r\n-                  </Badge>\r\n-                )}\r\n-              </div>\r\n-              <CardTitle className=\"text-lg mt-2\">{exercise.text}</CardTitle>\r\n-              {exercise.content?.instructions && (\r\n-                <CardDescription className=\"mt-2 flex items-center gap-2\">\r\n-                  <Lightbulb className=\"h-4 w-4 text-primary\" />\r\n-                  {exercise.content.instructions}\r\n-                </CardDescription>\r\n-              )}\r\n-            </CardHeader>\r\n-            <CardContent>\r\n-              <div className=\"space-y-4\">\r\n-                {exercise.media && (\r\n-                  <div className=\"mt-4 rounded-lg overflow-hidden border\">\r\n-                    {exercise.type === 'image' && (\r\n-                      <img \r\n-                        src={exercise.media} \r\n-                        alt={exercise.text}\r\n-                        className=\"w-full h-auto object-cover\"\r\n-                      />\r\n-                    )}\r\n-                    {exercise.type === 'video' && (\r\n-                      <video \r\n-                        src={exercise.media}\r\n-                        controls\r\n-                        className=\"w-full\"\r\n-                        preload=\"metadata\"\r\n-                      />\r\n-                    )}\r\n-                  </div>\r\n-                )}\r\n-              </div>\r\n-            </CardContent>\r\n-          </Card>\r\n-        </motion.div>\r\n-      ))}\r\n-    </motion.div>\r\n-  );\r\n+\"use client\"\n+\n+import React, { useState } from 'react';\n+import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\n+import { Button } from \"@/components/ui/button\";\n+import { LoadingSpinner } from \"@/components/LoadingSpinner\";\n+import { \n+  RefreshCw, X, BookOpen, Clock, CheckCircle2, ChevronRight, \n+  Lightbulb, Volume2, VolumeX, Play, Pause, ArrowLeft, ArrowRight,\n+  CheckCircle, HelpCircle, Award, Star\n+} from 'lucide-react';\n+import { cn } from \"@/lib/utils\";\n+import { Badge } from \"@/components/ui/badge\";\n+import { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\n+import { ScrollArea } from \"@/components/ui/scroll-area\";\n+import { Progress } from \"@/components/ui/progress\";\n+import { motion, AnimatePresence } from \"framer-motion\";\n+import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n+import { logger } from \"@/lib/logger\";\n+import { useToast } from \"@/components/ui/use-toast\";\n+\n+interface LessonDialogProps {\n+  isOpen: boolean;\n+  onClose: () => void;\n+  lessonContent: {\n+    content: any;\n+    isLoading: boolean;\n+    error: string | null;\n+  };\n+  currentLessonId: string | null;\n+  onRetry: () => void;\n+}\n+\n+export function LessonDialog({\n+  isOpen,\n+  onClose,\n+  lessonContent,\n+  currentLessonId,\n+  onRetry\n+}: LessonDialogProps) {\n+  const dialogId = React.useId();\n+  const titleId = `${dialogId}-title`;\n+  const descriptionId = `${dialogId}-description`;\n+  const { toast } = useToast();\n+\n+  // State for audio controls\n+  const [isPlaying, setIsPlaying] = useState(false);\n+  const [isMuted, setIsMuted] = useState(false);\n+  const [currentProgress, setCurrentProgress] = useState(0);\n+  const [activeTab, setActiveTab] = useState(\"content\");\n+  const [selectedQuestionIndex, setSelectedQuestionIndex] = useState<number | null>(null);\n+\n+  // Function to handle tab change with logging\n+  const handleTabChange = (value: string) => {\n+    logger.info('Tab changed in lesson dialog', {\n+      source: 'LessonDialog',\n+      context: { \n+        previousTab: activeTab,\n+        newTab: value,\n+        lessonId: currentLessonId\n+      }\n+    });\n+    setActiveTab(value);\n+  };\n+\n+  // Function to toggle audio playback\n+  const togglePlayback = () => {\n+    setIsPlaying(!isPlaying);\n+    logger.info('Audio playback toggled', {\n+      source: 'LessonDialog',\n+      context: { \n+        newState: !isPlaying,\n+        lessonId: currentLessonId\n+      }\n+    });\n+  };\n+\n+  // Function to toggle mute\n+  const toggleMute = () => {\n+    setIsMuted(!isMuted);\n+    logger.info('Audio mute toggled', {\n+      source: 'LessonDialog',\n+      context: { \n+        newState: !isMuted,\n+        lessonId: currentLessonId\n+      }\n+    });\n+  };\n+\n+  // Function to handle question selection\n+  const handleQuestionSelect = (index: number) => {\n+    setSelectedQuestionIndex(index);\n+    logger.info('Question selected', {\n+      source: 'LessonDialog',\n+      context: { \n+        questionIndex: index,\n+        lessonId: currentLessonId\n+      }\n+    });\n+  };\n+\n+  return (\n+    <Dialog open={isOpen} onOpenChange={onClose}>\n+      <DialogContent \n+        className=\"max-w-[100vw] w-full h-[100vh] p-0 max-h-screen bg-gradient-to-b from-background to-accent/10\"\n+        aria-labelledby={titleId}\n+        aria-describedby={descriptionId}\n+      >\n+        {/* Header Section */}\n+        <DialogHeader className=\"p-6 border-b bg-background/95 backdrop-blur-sm sticky top-0 z-50\">\n+          <div className=\"flex items-center justify-between\">\n+            <div className=\"flex-1\">\n+              <motion.div\n+                initial={{ opacity: 0, y: -20 }}\n+                animate={{ opacity: 1, y: 0 }}\n+                transition={{ duration: 0.3 }}\n+              >\n+                <DialogTitle id={titleId} className=\"text-2xl font-bold flex items-center gap-2\">\n+                  <BookOpen className=\"h-6 w-6 text-primary\" />\n+                  {lessonContent.content?.title || 'Lesson Content'}\n+                </DialogTitle>\n+                <DialogDescription id={descriptionId} className=\"text-base text-muted-foreground mt-2\">\n+                  {lessonContent.content?.description || 'Interactive lesson content and activities'}\n+                </DialogDescription>\n+              </motion.div>\n+            </div>\n+\n+            {/* Controls Section */}\n+            <div className=\"flex items-center gap-2\">\n+              <motion.div\n+                initial={{ opacity: 0, x: 20 }}\n+                animate={{ opacity: 1, x: 0 }}\n+                transition={{ duration: 0.3, delay: 0.1 }}\n+                className=\"flex items-center gap-2\"\n+              >\n+                <Button\n+                  variant=\"ghost\"\n+                  size=\"icon\"\n+                  onClick={toggleMute}\n+                  className=\"rounded-full hover:bg-primary/10\"\n+                >\n+                  {isMuted ? <VolumeX className=\"h-5 w-5\" /> : <Volume2 className=\"h-5 w-5\" />}\n+                </Button>\n+                <Button\n+                  variant=\"ghost\"\n+                  size=\"icon\"\n+                  onClick={togglePlayback}\n+                  className=\"rounded-full hover:bg-primary/10\"\n+                >\n+                  {isPlaying ? <Pause className=\"h-5 w-5\" /> : <Play className=\"h-5 w-5\" />}\n+                </Button>\n+              </motion.div>\n+\n+              <div className=\"h-6 w-px bg-border mx-2\" />\n+\n+              <Button \n+                variant=\"ghost\" \n+                size=\"icon\"\n+                onClick={onClose}\n+                className=\"rounded-full hover:bg-destructive/10\"\n+              >\n+                <X className=\"h-5 w-5\" />\n+              </Button>\n+            </div>\n+          </div>\n+\n+          {/* Progress Bar */}\n+          <div className=\"mt-4\">\n+            <Progress value={currentProgress} className=\"h-1\" />\n+            <div className=\"flex justify-between mt-1 text-xs text-muted-foreground\">\n+              <span>Progress</span>\n+              <span>{Math.round(currentProgress)}%</span>\n+            </div>\n+          </div>\n+\n+          {/* Navigation Tabs */}\n+          <Tabs\n+            defaultValue=\"content\"\n+            value={activeTab}\n+            onValueChange={handleTabChange}\n+            className=\"mt-4\"\n+          >\n+            <TabsList className=\"grid w-full grid-cols-3 lg:w-[400px]\">\n+              <TabsTrigger value=\"content\" className=\"flex items-center gap-2\">\n+                <BookOpen className=\"h-4 w-4\" />\n+                Content\n+              </TabsTrigger>\n+              <TabsTrigger value=\"questions\" className=\"flex items-center gap-2\">\n+                <HelpCircle className=\"h-4 w-4\" />\n+                Questions\n+              </TabsTrigger>\n+              <TabsTrigger value=\"exercises\" className=\"flex items-center gap-2\">\n+                <Award className=\"h-4 w-4\" />\n+                Exercises\n+              </TabsTrigger>\n+            </TabsList>\n+          </Tabs>\n+        </DialogHeader>\n+\n+        {/* Main Content Area */}\n+        <ScrollArea className=\"h-[calc(100vh-12rem)] w-full\">\n+          <div className=\"container max-w-6xl mx-auto p-6\">\n+            {lessonContent.isLoading ? (\n+              <motion.div \n+                initial={{ opacity: 0, scale: 0.95 }}\n+                animate={{ opacity: 1, scale: 1 }}\n+                className=\"flex items-center justify-center h-[50vh]\"\n+              >\n+                <LoadingSpinner message=\"Loading your lesson content...\" />\n+              </motion.div>\n+            ) : lessonContent.error ? (\n+              <motion.div \n+                initial={{ opacity: 0, y: 20 }}\n+                animate={{ opacity: 1, y: 0 }}\n+                className=\"flex flex-col items-center justify-center gap-4 h-[50vh]\"\n+              >\n+                <div className=\"p-8 bg-destructive/10 rounded-lg text-center max-w-md\">\n+                  <p className=\"text-destructive font-medium mb-4\">{lessonContent.error}</p>\n+                  <Button \n+                    onClick={onRetry} \n+                    variant=\"outline\" \n+                    className=\"gap-2 hover:bg-destructive/5\"\n+                  >\n+                    <RefreshCw className=\"h-4 w-4\" />\n+                    Retry Loading\n+                  </Button>\n+                </div>\n+              </motion.div>\n+            ) : (\n+              <Tabs defaultValue=\"content\" value={activeTab} onValueChange={handleTabChange}>\n+                <TabsContent value=\"content\">\n+                  <ContentTab content={lessonContent.content} />\n+                </TabsContent>\n+                <TabsContent value=\"questions\">\n+                  <QuestionsTab \n+                    questions={lessonContent.content?.questions} \n+                    selectedIndex={selectedQuestionIndex}\n+                    onQuestionSelect={handleQuestionSelect}\n+                  />\n+                </TabsContent>\n+                <TabsContent value=\"exercises\">\n+                  <ExercisesTab exercises={lessonContent.content?.exercise_prompts} />\n+                </TabsContent>\n+              </Tabs>\n+            )}\n+          </div>\n+        </ScrollArea>\n+      </DialogContent>\n+    </Dialog>\n+  );\n+}\n+\n+// Content Tab Component\n+function ContentTab({ content }: { content: any }) {\n+  return (\n+    <motion.div\n+      initial={{ opacity: 0 }}\n+      animate={{ opacity: 1 }}\n+      exit={{ opacity: 0 }}\n+      transition={{ duration: 0.2 }}\n+      className=\"space-y-8\"\n+    >\n+      <Card className=\"prose prose-sm max-w-none dark:prose-invert border-primary/10 shadow-md\">\n+        <CardHeader>\n+          <CardTitle className=\"flex items-center gap-2\">\n+            <BookOpen className=\"h-5 w-5 text-primary\" />\n+            Lesson Content\n+          </CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <div \n+            className=\"mt-4\"\n+            dangerouslySetInnerHTML={{ \n+              __html: content?.content || 'No content available' \n+            }} \n+          />\n+        </CardContent>\n+      </Card>\n+    </motion.div>\n+  );\n+}\n+\n+// Questions Tab Component\n+function QuestionsTab({ \n+  questions, \n+  selectedIndex,\n+  onQuestionSelect \n+}: { \n+  questions: any[],\n+  selectedIndex: number | null,\n+  onQuestionSelect: (index: number) => void\n+}) {\n+  if (!questions?.length) {\n+    return (\n+      <motion.div\n+        initial={{ opacity: 0 }}\n+        animate={{ opacity: 1 }}\n+        exit={{ opacity: 0 }}\n+        transition={{ duration: 0.2 }}\n+        className=\"flex flex-col items-center justify-center h-[50vh] text-center\"\n+      >\n+        <HelpCircle className=\"h-12 w-12 text-muted-foreground mb-4\" />\n+        <p className=\"text-muted-foreground\">No questions available for this lesson</p>\n+      </motion.div>\n+    );\n+  }\n+\n+  return (\n+    <motion.div\n+      initial={{ opacity: 0 }}\n+      animate={{ opacity: 1 }}\n+      exit={{ opacity: 0 }}\n+      transition={{ duration: 0.2 }}\n+      className=\"space-y-6\"\n+    >\n+      {questions.map((question, index) => (\n+        <motion.div\n+          key={question.id}\n+          initial={{ opacity: 0, y: 20 }}\n+          animate={{ opacity: 1, y: 0 }}\n+          transition={{ delay: index * 0.1 }}\n+        >\n+          <Card \n+            className={cn(\n+              \"border-primary/10 shadow-md transition-all duration-200\",\n+              \"hover:shadow-lg hover:border-primary/30\",\n+              selectedIndex === index && \"ring-2 ring-primary ring-offset-2\"\n+            )}\n+            onClick={() => onQuestionSelect(index)}\n+          >\n+            <CardHeader>\n+              <div className=\"flex items-center justify-between\">\n+                <div className=\"flex items-center gap-3\">\n+                  <Badge variant=\"outline\" className=\"bg-primary/5\">\n+                    Question {index + 1}\n+                  </Badge>\n+                  <Badge variant=\"outline\" className=\"bg-primary/5\">\n+                    {question.points} points\n+                  </Badge>\n+                </div>\n+                {selectedIndex === index && (\n+                  <Badge variant=\"outline\" className=\"bg-primary/10 text-primary\">\n+                    Selected\n+                  </Badge>\n+                )}\n+              </div>\n+              <CardTitle className=\"text-lg mt-2\">{question.title}</CardTitle>\n+            </CardHeader>\n+            <CardContent>\n+              <div className=\"space-y-4\">\n+                <p className=\"text-muted-foreground\">{question.content}</p>\n+                {question.data?.options && (\n+                  <div className=\"grid gap-2\">\n+                    {question.data.options.map((option: string, optIndex: number) => (\n+                      <motion.div\n+                        key={optIndex}\n+                        whileHover={{ scale: 1.01 }}\n+                        whileTap={{ scale: 0.99 }}\n+                      >\n+                        <Button\n+                          variant=\"outline\"\n+                          className=\"w-full justify-start text-left h-auto p-4\"\n+                        >\n+                          <div className=\"flex items-center gap-3\">\n+                            <div className=\"w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\n+                              {String.fromCharCode(65 + optIndex)}\n+                            </div>\n+                            <span>{option}</span>\n+                          </div>\n+                        </Button>\n+                      </motion.div>\n+                    ))}\n+                  </div>\n+                )}\n+              </div>\n+            </CardContent>\n+          </Card>\n+        </motion.div>\n+      ))}\n+    </motion.div>\n+  );\n+}\n+\n+// Exercises Tab Component\n+function ExercisesTab({ exercises }: { exercises: any[] }) {\n+  if (!exercises?.length) {\n+    return (\n+      <motion.div\n+        initial={{ opacity: 0 }}\n+        animate={{ opacity: 1 }}\n+        exit={{ opacity: 0 }}\n+        transition={{ duration: 0.2 }}\n+        className=\"flex flex-col items-center justify-center h-[50vh] text-center\"\n+      >\n+        <Award className=\"h-12 w-12 text-muted-foreground mb-4\" />\n+        <p className=\"text-muted-foreground\">No exercises available for this lesson</p>\n+      </motion.div>\n+    );\n+  }\n+\n+  return (\n+    <motion.div\n+      initial={{ opacity: 0 }}\n+      animate={{ opacity: 1 }}\n+      exit={{ opacity: 0 }}\n+      transition={{ duration: 0.2 }}\n+      className=\"space-y-6\"\n+    >\n+      {exercises.map((exercise, index) => (\n+        <motion.div\n+          key={exercise.id}\n+          initial={{ opacity: 0, y: 20 }}\n+          animate={{ opacity: 1, y: 0 }}\n+          transition={{ delay: index * 0.1 }}\n+        >\n+          <Card className=\"border-primary/10 shadow-md hover:shadow-lg transition-all duration-200\">\n+            <CardHeader>\n+              <div className=\"flex items-center gap-3\">\n+                <Badge variant=\"outline\" className=\"bg-primary/5\">\n+                  Exercise {index + 1}\n+                </Badge>\n+                <Badge variant=\"outline\" className=\"bg-primary/5\">\n+                  {exercise.questionType}\n+                </Badge>\n+                {exercise.difficulty && (\n+                  <Badge \n+                    variant=\"outline\" \n+                    className={cn(\n+                      \"capitalize\",\n+                      exercise.difficulty === 'beginner' && \"bg-green-500/10 text-green-500\",\n+                      exercise.difficulty === 'intermediate' && \"bg-yellow-500/10 text-yellow-500\",\n+                      exercise.difficulty === 'advanced' && \"bg-red-500/10 text-red-500\"\n+                    )}\n+                  >\n+                    {exercise.difficulty}\n+                  </Badge>\n+                )}\n+              </div>\n+              <CardTitle className=\"text-lg mt-2\">{exercise.text}</CardTitle>\n+              {exercise.content?.instructions && (\n+                <CardDescription className=\"mt-2 flex items-center gap-2\">\n+                  <Lightbulb className=\"h-4 w-4 text-primary\" />\n+                  {exercise.content.instructions}\n+                </CardDescription>\n+              )}\n+            </CardHeader>\n+            <CardContent>\n+              <div className=\"space-y-4\">\n+                {exercise.media && (\n+                  <div className=\"mt-4 rounded-lg overflow-hidden border\">\n+                    {exercise.type === 'image' && (\n+                      <img \n+                        src={exercise.media} \n+                        alt={exercise.text}\n+                        className=\"w-full h-auto object-cover\"\n+                      />\n+                    )}\n+                    {exercise.type === 'video' && (\n+                      <video \n+                        src={exercise.media}\n+                        controls\n+                        className=\"w-full\"\n+                        preload=\"metadata\"\n+                      />\n+                    )}\n+                  </div>\n+                )}\n+              </div>\n+            </CardContent>\n+          </Card>\n+        </motion.div>\n+      ))}\n+    </motion.div>\n+  );\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739452855097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import { LoadingSpinner } from \"@/components/LoadingSpinner\";\n import { \n   RefreshCw, X, BookOpen, Clock, CheckCircle2, ChevronRight, \n   Lightbulb, Volume2, VolumeX, Play, Pause, ArrowLeft, ArrowRight,\n-  CheckCircle, HelpCircle, Award, Star\n+  CheckCircle, HelpCircle, Award, Star, ImageIcon\n } from 'lucide-react';\n import { cn } from \"@/lib/utils\";\n import { Badge } from \"@/components/ui/badge\";\n import { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\n@@ -197,55 +197,118 @@\n           </Tabs>\n         </DialogHeader>\n \n         {/* Main Content Area */}\n-        <ScrollArea className=\"h-[calc(100vh-12rem)] w-full\">\n-          <div className=\"container max-w-6xl mx-auto p-6\">\n-            {lessonContent.isLoading ? (\n-              <motion.div \n-                initial={{ opacity: 0, scale: 0.95 }}\n-                animate={{ opacity: 1, scale: 1 }}\n-                className=\"flex items-center justify-center h-[50vh]\"\n-              >\n-                <LoadingSpinner message=\"Loading your lesson content...\" />\n-              </motion.div>\n-            ) : lessonContent.error ? (\n-              <motion.div \n-                initial={{ opacity: 0, y: 20 }}\n-                animate={{ opacity: 1, y: 0 }}\n-                className=\"flex flex-col items-center justify-center gap-4 h-[50vh]\"\n-              >\n-                <div className=\"p-8 bg-destructive/10 rounded-lg text-center max-w-md\">\n-                  <p className=\"text-destructive font-medium mb-4\">{lessonContent.error}</p>\n-                  <Button \n-                    onClick={onRetry} \n-                    variant=\"outline\" \n-                    className=\"gap-2 hover:bg-destructive/5\"\n+        <div className=\"flex flex-col md:flex-row h-[calc(100vh-12rem)] w-full\">\n+          {/* Left Section - Main Content */}\n+          <div className=\"flex-1 md:w-2/3 h-full\">\n+            <ScrollArea className=\"h-full w-full\">\n+              <div className=\"container p-6\">\n+                {lessonContent.isLoading ? (\n+                  <motion.div \n+                    initial={{ opacity: 0, scale: 0.95 }}\n+                    animate={{ opacity: 1, scale: 1 }}\n+                    className=\"flex items-center justify-center h-[50vh]\"\n                   >\n-                    <RefreshCw className=\"h-4 w-4\" />\n-                    Retry Loading\n-                  </Button>\n-                </div>\n-              </motion.div>\n-            ) : (\n-              <Tabs defaultValue=\"content\" value={activeTab} onValueChange={handleTabChange}>\n-                <TabsContent value=\"content\">\n-                  <ContentTab content={lessonContent.content} />\n-                </TabsContent>\n-                <TabsContent value=\"questions\">\n-                  <QuestionsTab \n-                    questions={lessonContent.content?.questions} \n-                    selectedIndex={selectedQuestionIndex}\n-                    onQuestionSelect={handleQuestionSelect}\n-                  />\n-                </TabsContent>\n-                <TabsContent value=\"exercises\">\n-                  <ExercisesTab exercises={lessonContent.content?.exercise_prompts} />\n-                </TabsContent>\n-              </Tabs>\n-            )}\n+                    <LoadingSpinner message=\"Loading your lesson content...\" />\n+                  </motion.div>\n+                ) : lessonContent.error ? (\n+                  <motion.div \n+                    initial={{ opacity: 0, y: 20 }}\n+                    animate={{ opacity: 1, y: 0 }}\n+                    className=\"flex flex-col items-center justify-center gap-4 h-[50vh]\"\n+                  >\n+                    <div className=\"p-8 bg-destructive/10 rounded-lg text-center max-w-md\">\n+                      <p className=\"text-destructive font-medium mb-4\">{lessonContent.error}</p>\n+                      <Button \n+                        onClick={onRetry} \n+                        variant=\"outline\" \n+                        className=\"gap-2 hover:bg-destructive/5\"\n+                      >\n+                        <RefreshCw className=\"h-4 w-4\" />\n+                        Retry Loading\n+                      </Button>\n+                    </div>\n+                  </motion.div>\n+                ) : (\n+                  <Tabs defaultValue=\"content\" value={activeTab} onValueChange={handleTabChange}>\n+                    <TabsContent value=\"content\">\n+                      <ContentTab content={lessonContent.content} />\n+                    </TabsContent>\n+                    <TabsContent value=\"questions\">\n+                      <QuestionsTab \n+                        questions={lessonContent.content?.questions} \n+                        selectedIndex={selectedQuestionIndex}\n+                        onQuestionSelect={handleQuestionSelect}\n+                        onNextLesson={() => {\n+                          // Handle next lesson navigation\n+                          logger.info('Navigating to next lesson', {\n+                            source: 'LessonDialog',\n+                            context: { currentLessonId }\n+                          });\n+                        }}\n+                      />\n+                    </TabsContent>\n+                    <TabsContent value=\"exercises\">\n+                      <ExercisesTab exercises={lessonContent.content?.exercise_prompts} />\n+                    </TabsContent>\n+                  </Tabs>\n+                )}\n+              </div>\n+            </ScrollArea>\n           </div>\n-        </ScrollArea>\n+\n+          {/* Right Section - Media Preview */}\n+          <div className=\"md:w-1/3 h-1/4 md:h-full border-l bg-muted/10\">\n+            <ScrollArea className=\"h-full\">\n+              <div className=\"p-6 space-y-4\">\n+                <Card className=\"border-primary/10\">\n+                  <CardHeader>\n+                    <CardTitle className=\"text-lg flex items-center gap-2\">\n+                      <ImageIcon className=\"h-5 w-5 text-primary\" />\n+                      Media Preview\n+                    </CardTitle>\n+                  </CardHeader>\n+                  <CardContent>\n+                    {lessonContent.content?.media ? (\n+                      <div className=\"space-y-4\">\n+                        {lessonContent.content.media.map((item: any, index: number) => (\n+                          <motion.div\n+                            key={index}\n+                            initial={{ opacity: 0, scale: 0.95 }}\n+                            animate={{ opacity: 1, scale: 1 }}\n+                            transition={{ delay: index * 0.1 }}\n+                          >\n+                            {item.type === 'image' && (\n+                              <img\n+                                src={item.url}\n+                                alt={`Media ${index + 1}`}\n+                                className=\"w-full rounded-lg shadow-md hover:shadow-lg transition-shadow\"\n+                              />\n+                            )}\n+                            {item.type === 'video' && (\n+                              <video\n+                                src={item.url}\n+                                controls\n+                                className=\"w-full rounded-lg shadow-md\"\n+                                preload=\"metadata\"\n+                              />\n+                            )}\n+                          </motion.div>\n+                        ))}\n+                      </div>\n+                    ) : (\n+                      <div className=\"flex flex-col items-center justify-center py-8 text-muted-foreground\">\n+                        <ImageIcon className=\"h-12 w-12 mb-4 opacity-50\" />\n+                        <p>No media available</p>\n+                      </div>\n+                    )}\n+                  </CardContent>\n+                </Card>\n+              </div>\n+            </ScrollArea>\n+          </div>\n+        </div>\n       </DialogContent>\n     </Dialog>\n   );\n }\n@@ -283,13 +346,15 @@\n // Questions Tab Component\n function QuestionsTab({ \n   questions, \n   selectedIndex,\n-  onQuestionSelect \n+  onQuestionSelect,\n+  onNextLesson\n }: { \n   questions: any[],\n   selectedIndex: number | null,\n-  onQuestionSelect: (index: number) => void\n+  onQuestionSelect: (index: number) => void,\n+  onNextLesson: () => void\n }) {\n   if (!questions?.length) {\n     return (\n       <motion.div\n"
                },
                {
                    "date": 1739452896827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import { LoadingSpinner } from \"@/components/LoadingSpinner\";\n import { \n   RefreshCw, X, BookOpen, Clock, CheckCircle2, ChevronRight, \n   Lightbulb, Volume2, VolumeX, Play, Pause, ArrowLeft, ArrowRight,\n-  CheckCircle, HelpCircle, Award, Star, ImageIcon\n+  CheckCircle, HelpCircle, Award, Star, ImageIcon, PenTool\n } from 'lucide-react';\n import { cn } from \"@/lib/utils\";\n import { Badge } from \"@/components/ui/badge\";\n import { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\n"
                },
                {
                    "date": 1739452902886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -347,15 +347,36 @@\n function QuestionsTab({ \n   questions, \n   selectedIndex,\n   onQuestionSelect,\n-  onNextLesson\n+  onNextLesson \n }: { \n   questions: any[],\n   selectedIndex: number | null,\n   onQuestionSelect: (index: number) => void,\n   onNextLesson: () => void\n }) {\n+  const [expandedQuestions, setExpandedQuestions] = useState<Record<string, boolean>>({});\n+  const [questionProgress, setQuestionProgress] = useState<Record<string, number>>({});\n+\n+  const toggleQuestion = (questionId: string) => {\n+    setExpandedQuestions(prev => ({\n+      ...prev,\n+      [questionId]: !prev[questionId]\n+    }));\n+  };\n+\n+  const updateQuestionProgress = (questionId: string, progress: number) => {\n+    setQuestionProgress(prev => ({\n+      ...prev,\n+      [questionId]: progress\n+    }));\n+  };\n+\n+  const totalProgress = questions?.length \n+    ? Object.values(questionProgress).reduce((acc, curr) => acc + curr, 0) / questions.length\n+    : 0;\n+\n   if (!questions?.length) {\n     return (\n       <motion.div\n         initial={{ opacity: 0 }}\n@@ -377,8 +398,19 @@\n       exit={{ opacity: 0 }}\n       transition={{ duration: 0.2 }}\n       className=\"space-y-6\"\n     >\n+      {/* Overall Progress */}\n+      <Card className=\"border-primary/10\">\n+        <CardContent className=\"p-4\">\n+          <div className=\"flex items-center justify-between mb-2\">\n+            <span className=\"text-sm font-medium\">Overall Progress</span>\n+            <span className=\"text-sm text-muted-foreground\">{Math.round(totalProgress)}%</span>\n+          </div>\n+          <Progress value={totalProgress} className=\"h-2\" />\n+        </CardContent>\n+      </Card>\n+\n       {questions.map((question, index) => (\n         <motion.div\n           key={question.id}\n           initial={{ opacity: 0, y: 20 }}\n@@ -390,11 +422,13 @@\n               \"border-primary/10 shadow-md transition-all duration-200\",\n               \"hover:shadow-lg hover:border-primary/30\",\n               selectedIndex === index && \"ring-2 ring-primary ring-offset-2\"\n             )}\n-            onClick={() => onQuestionSelect(index)}\n           >\n-            <CardHeader>\n+            <CardHeader \n+              className=\"cursor-pointer\"\n+              onClick={() => toggleQuestion(question.id)}\n+            >\n               <div className=\"flex items-center justify-between\">\n                 <div className=\"flex items-center gap-3\">\n                   <Badge variant=\"outline\" className=\"bg-primary/5\">\n                     Question {index + 1}\n@@ -402,47 +436,111 @@\n                   <Badge variant=\"outline\" className=\"bg-primary/5\">\n                     {question.points} points\n                   </Badge>\n                 </div>\n-                {selectedIndex === index && (\n-                  <Badge variant=\"outline\" className=\"bg-primary/10 text-primary\">\n-                    Selected\n-                  </Badge>\n-                )}\n+                <Button variant=\"ghost\" size=\"icon\">\n+                  <ChevronRight \n+                    className={cn(\n+                      \"h-4 w-4 transition-transform\",\n+                      expandedQuestions[question.id] && \"rotate-90\"\n+                    )} \n+                  />\n+                </Button>\n               </div>\n               <CardTitle className=\"text-lg mt-2\">{question.title}</CardTitle>\n+              <div className=\"mt-2\">\n+                <Progress \n+                  value={questionProgress[question.id] || 0} \n+                  className=\"h-1\"\n+                />\n+              </div>\n             </CardHeader>\n-            <CardContent>\n-              <div className=\"space-y-4\">\n-                <p className=\"text-muted-foreground\">{question.content}</p>\n-                {question.data?.options && (\n-                  <div className=\"grid gap-2\">\n-                    {question.data.options.map((option: string, optIndex: number) => (\n-                      <motion.div\n-                        key={optIndex}\n-                        whileHover={{ scale: 1.01 }}\n-                        whileTap={{ scale: 0.99 }}\n-                      >\n-                        <Button\n-                          variant=\"outline\"\n-                          className=\"w-full justify-start text-left h-auto p-4\"\n-                        >\n-                          <div className=\"flex items-center gap-3\">\n-                            <div className=\"w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\n-                              {String.fromCharCode(65 + optIndex)}\n-                            </div>\n-                            <span>{option}</span>\n+\n+            <AnimatePresence>\n+              {expandedQuestions[question.id] && (\n+                <motion.div\n+                  initial={{ height: 0, opacity: 0 }}\n+                  animate={{ height: \"auto\", opacity: 1 }}\n+                  exit={{ height: 0, opacity: 0 }}\n+                >\n+                  <CardContent>\n+                    <div className=\"space-y-4\">\n+                      <p className=\"text-muted-foreground\">{question.content}</p>\n+                      \n+                      {/* Question Options */}\n+                      {question.data?.options && (\n+                        <div className=\"grid gap-2\">\n+                          {question.data.options.map((option: string, optIndex: number) => (\n+                            <motion.div\n+                              key={optIndex}\n+                              whileHover={{ scale: 1.01 }}\n+                              whileTap={{ scale: 0.99 }}\n+                            >\n+                              <Button\n+                                variant=\"outline\"\n+                                className=\"w-full justify-start text-left h-auto p-4\"\n+                                onClick={() => {\n+                                  updateQuestionProgress(question.id, 100);\n+                                  onQuestionSelect(index);\n+                                }}\n+                              >\n+                                <div className=\"flex items-center gap-3\">\n+                                  <div className=\"w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\n+                                    {String.fromCharCode(65 + optIndex)}\n+                                  </div>\n+                                  <span>{option}</span>\n+                                </div>\n+                              </Button>\n+                            </motion.div>\n+                          ))}\n+                        </div>\n+                      )}\n+\n+                      {/* Related Exercises */}\n+                      {question.exercises && (\n+                        <div className=\"mt-6 pt-6 border-t\">\n+                          <h4 className=\"text-sm font-semibold mb-4 flex items-center gap-2\">\n+                            <PenTool className=\"h-4 w-4\" />\n+                            Related Exercises\n+                          </h4>\n+                          <div className=\"space-y-4\">\n+                            {question.exercises.map((exercise: any, exIndex: number) => (\n+                              <Card key={exIndex} className=\"border-primary/5\">\n+                                <CardContent className=\"p-4\">\n+                                  <p className=\"text-sm\">{exercise.text}</p>\n+                                </CardContent>\n+                              </Card>\n+                            ))}\n                           </div>\n-                        </Button>\n-                      </motion.div>\n-                    ))}\n-                  </div>\n-                )}\n-              </div>\n-            </CardContent>\n+                        </div>\n+                      )}\n+                    </div>\n+                  </CardContent>\n+                </motion.div>\n+              )}\n+            </AnimatePresence>\n           </Card>\n         </motion.div>\n       ))}\n+\n+      {/* Next Lesson Button */}\n+      {totalProgress === 100 && (\n+        <motion.div\n+          initial={{ opacity: 0, y: 20 }}\n+          animate={{ opacity: 1, y: 0 }}\n+          className=\"sticky bottom-4 flex justify-center\"\n+        >\n+          <Button\n+            onClick={onNextLesson}\n+            className=\"bg-primary hover:bg-primary/90 text-white px-8 py-6 rounded-full shadow-lg\"\n+          >\n+            <span className=\"flex items-center gap-2\">\n+              Continue to Next Lesson\n+              <ArrowRight className=\"h-4 w-4\" />\n+            </span>\n+          </Button>\n+        </motion.div>\n+      )}\n     </motion.div>\n   );\n }\n \n"
                },
                {
                    "date": 1739452957881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n \"use client\"\n \n-import React, { useState } from 'react';\n+import React, { useState, useRef, useEffect } from 'react';\n import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\n import { Button } from \"@/components/ui/button\";\n import { LoadingSpinner } from \"@/components/LoadingSpinner\";\n import { \n@@ -41,16 +41,59 @@\n   const dialogId = React.useId();\n   const titleId = `${dialogId}-title`;\n   const descriptionId = `${dialogId}-description`;\n   const { toast } = useToast();\n+  const audioRef = useRef<HTMLAudioElement>(null);\n \n   // State for audio controls\n   const [isPlaying, setIsPlaying] = useState(false);\n   const [isMuted, setIsMuted] = useState(false);\n   const [currentProgress, setCurrentProgress] = useState(0);\n+  const [audioProgress, setAudioProgress] = useState(0);\n   const [activeTab, setActiveTab] = useState(\"content\");\n   const [selectedQuestionIndex, setSelectedQuestionIndex] = useState<number | null>(null);\n \n+  // Audio event handlers\n+  const handleTimeUpdate = () => {\n+    if (audioRef.current) {\n+      const progress = (audioRef.current.currentTime / audioRef.current.duration) * 100;\n+      setAudioProgress(progress);\n+      setCurrentProgress(Math.max(currentProgress, progress));\n+      \n+      logger.info('Audio progress updated', {\n+        source: 'LessonDialog',\n+        context: { \n+          progress: Math.round(progress),\n+          lessonId: currentLessonId\n+        }\n+      });\n+    }\n+  };\n+\n+  const handleAudioEnded = () => {\n+    setIsPlaying(false);\n+    setCurrentProgress(100);\n+    \n+    toast({\n+      title: \"🎉 Lesson Complete!\",\n+      description: \"You've finished listening to this lesson.\",\n+      action: (\n+        <Button\n+          variant=\"outline\"\n+          size=\"sm\"\n+          onClick={() => setActiveTab(\"questions\")}\n+        >\n+          Start Questions\n+        </Button>\n+      )\n+    });\n+\n+    logger.info('Audio playback completed', {\n+      source: 'LessonDialog',\n+      context: { lessonId: currentLessonId }\n+    });\n+  };\n+\n   // Function to handle tab change with logging\n   const handleTabChange = (value: string) => {\n     logger.info('Tab changed in lesson dialog', {\n       source: 'LessonDialog',\n@@ -64,30 +107,57 @@\n   };\n \n   // Function to toggle audio playback\n   const togglePlayback = () => {\n-    setIsPlaying(!isPlaying);\n-    logger.info('Audio playback toggled', {\n-      source: 'LessonDialog',\n-      context: { \n-        newState: !isPlaying,\n-        lessonId: currentLessonId\n+    if (audioRef.current) {\n+      if (isPlaying) {\n+        audioRef.current.pause();\n+      } else {\n+        audioRef.current.play();\n       }\n-    });\n+      setIsPlaying(!isPlaying);\n+      \n+      logger.info('Audio playback toggled', {\n+        source: 'LessonDialog',\n+        context: { \n+          newState: !isPlaying,\n+          lessonId: currentLessonId\n+        }\n+      });\n+    }\n   };\n \n   // Function to toggle mute\n   const toggleMute = () => {\n-    setIsMuted(!isMuted);\n-    logger.info('Audio mute toggled', {\n-      source: 'LessonDialog',\n-      context: { \n-        newState: !isMuted,\n-        lessonId: currentLessonId\n-      }\n-    });\n+    if (audioRef.current) {\n+      audioRef.current.muted = !isMuted;\n+      setIsMuted(!isMuted);\n+      \n+      logger.info('Audio mute toggled', {\n+        source: 'LessonDialog',\n+        context: { \n+          newState: !isMuted,\n+          lessonId: currentLessonId\n+        }\n+      });\n+    }\n   };\n \n+  // Add audio element\n+  useEffect(() => {\n+    if (audioRef.current) {\n+      audioRef.current.addEventListener('timeupdate', handleTimeUpdate);\n+      audioRef.current.addEventListener('ended', handleAudioEnded);\n+      \n+      return () => {\n+        if (audioRef.current) {\n+          audioRef.current.removeEventListener('timeupdate', handleTimeUpdate);\n+          audioRef.current.removeEventListener('ended', handleAudioEnded);\n+        }\n+      };\n+    }\n+  }, []);\n+\n   // Function to handle question selection\n   const handleQuestionSelect = (index: number) => {\n     setSelectedQuestionIndex(index);\n     logger.info('Question selected', {\n@@ -165,13 +235,22 @@\n           </div>\n \n           {/* Progress Bar */}\n           <div className=\"mt-4\">\n-            <Progress value={currentProgress} className=\"h-1\" />\n-            <div className=\"flex justify-between mt-1 text-xs text-muted-foreground\">\n-              <span>Progress</span>\n-              <span>{Math.round(currentProgress)}%</span>\n+            <div className=\"flex items-center gap-4\">\n+              <Progress value={currentProgress} className=\"h-1 flex-1\" />\n+              <span className=\"text-xs text-muted-foreground min-w-[3rem] text-right\">\n+                {Math.round(currentProgress)}%\n+              </span>\n             </div>\n+            {audioProgress > 0 && (\n+              <div className=\"flex items-center gap-4 mt-1\">\n+                <Progress value={audioProgress} className=\"h-1 flex-1 bg-primary/20\" />\n+                <span className=\"text-xs text-muted-foreground min-w-[3rem] text-right\">\n+                  {Math.round(audioProgress)}%\n+                </span>\n+              </div>\n+            )}\n           </div>\n \n           {/* Navigation Tabs */}\n           <Tabs\n@@ -307,8 +386,27 @@\n               </div>\n             </ScrollArea>\n           </div>\n         </div>\n+\n+        {/* Audio Element */}\n+        <audio\n+          ref={audioRef}\n+          src={lessonContent.content?.audioUrl}\n+          onEnded={() => setIsPlaying(false)}\n+          onError={(e) => {\n+            logger.error('Audio playback error', {\n+              source: 'LessonDialog',\n+              context: { error: e }\n+            });\n+            setIsPlaying(false);\n+            toast({\n+              title: \"Audio Error\",\n+              description: \"Failed to play audio content. Please try again.\",\n+              variant: \"destructive\"\n+            });\n+          }}\n+        />\n       </DialogContent>\n     </Dialog>\n   );\n }\n"
                },
                {
                    "date": 1739455160956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -400,10 +400,9 @@\n             });\n             setIsPlaying(false);\n             toast({\n               title: \"Audio Error\",\n-              description: \"Failed to play audio content. Please try again.\",\n-              variant: \"destructive\"\n+              description: \"Failed to play audio content. Please try again.\"\n             });\n           }}\n         />\n       </DialogContent>\n"
                },
                {
                    "date": 1739455209994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,11 @@\n import { LoadingSpinner } from \"@/components/LoadingSpinner\";\n import { \n   RefreshCw, X, BookOpen, Clock, CheckCircle2, ChevronRight, \n   Lightbulb, Volume2, VolumeX, Play, Pause, ArrowLeft, ArrowRight,\n-  CheckCircle, HelpCircle, Award, Star, ImageIcon, PenTool\n+  CheckCircle, HelpCircle, Award, Star, ImageIcon, PenTool,\n+  Mic, Video, FileText, Pencil, Book, MessageCircle, Brain,\n+  Headphones, Type, Layers, Target, Presentation, Sparkles\n } from 'lucide-react';\n import { cn } from \"@/lib/utils\";\n import { Badge } from \"@/components/ui/badge\";\n import { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\n@@ -17,9 +19,52 @@\n import { motion, AnimatePresence } from \"framer-motion\";\n import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n import { logger } from \"@/lib/logger\";\n import { useToast } from \"@/components/ui/use-toast\";\n+import { QuestionTypeIcon } from \"@/components/ui/question-type-icons\";\n+import { QUESTION_TYPES } from \"@/app/content-management/constants\";\n+import { RichTextEditor } from '@/components/editor/RichTextEditor';\n+import { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\n+import { Label } from \"@/components/ui/label\";\n+import { Input } from \"@/components/ui/input\";\n+import { Textarea } from \"@/components/ui/textarea\";\n+import { Collapsible, CollapsibleTrigger, CollapsibleContent } from \"@/components/ui/collapsible\";\n \n+// Question Types from question-form.tsx\n+interface QuestionMetadata {\n+  prompt?: string;\n+  teacherScript?: string;\n+  sampleAnswer?: string;\n+  options?: string[];\n+  correctAnswer?: string | number;\n+  imageUrl?: string;\n+  videoUrl?: string;\n+  audioContent?: string;\n+  transcript?: string;\n+  passage?: string;\n+  questions?: string[];\n+  writingPrompt?: string;\n+  speakingPrompt?: string;\n+  listeningPrompt?: string;\n+  grammarPoint?: string;\n+  example?: string;\n+  difficulty?: 'beginner' | 'intermediate' | 'advanced';\n+  points?: number;\n+  type?: string;\n+  data?: any;\n+}\n+\n+interface Question {\n+  id: string;\n+  title: string;\n+  content: string;\n+  type: string;\n+  metadata: QuestionMetadata;\n+  exercises?: any[];\n+  points?: number;\n+  data?: any;\n+}\n+\n interface LessonDialogProps {\n   isOpen: boolean;\n   onClose: () => void;\n   lessonContent: {\n"
                },
                {
                    "date": 1739455219870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -776,5 +776,282 @@\n         </motion.div>\n       ))}\n     </motion.div>\n   );\n+}\n+\n+// Add this component before the QuestionsTab component\n+\n+function QuestionCard({ \n+  question,\n+  index,\n+  isExpanded,\n+  onToggle,\n+  onAnswer,\n+  progress\n+}: { \n+  question: Question;\n+  index: number;\n+  isExpanded: boolean;\n+  onToggle: () => void;\n+  onAnswer: (progress: number) => void;\n+  progress: number;\n+}) {\n+  const getQuestionIcon = (type: string) => {\n+    switch (type) {\n+      case 'speaking': return <Mic className=\"h-5 w-5\" />;\n+      case 'writing': return <Pencil className=\"h-5 w-5\" />;\n+      case 'reading': return <Book className=\"h-5 w-5\" />;\n+      case 'listening': return <Headphones className=\"h-5 w-5\" />;\n+      case 'multipleChoice': return <Layers className=\"h-5 w-5\" />;\n+      case 'grammar': return <Type className=\"h-5 w-5\" />;\n+      case 'vocabulary': return <Brain className=\"h-5 w-5\" />;\n+      case 'conversation': return <MessageCircle className=\"h-5 w-5\" />;\n+      case 'presentation': return <Presentation className=\"h-5 w-5\" />;\n+      default: return <Target className=\"h-5 w-5\" />;\n+    }\n+  };\n+\n+  const renderQuestionContent = () => {\n+    switch (question.type) {\n+      case 'multipleChoice':\n+        return (\n+          <RadioGroup\n+            onValueChange={(value) => onAnswer(100)}\n+            className=\"space-y-2\"\n+          >\n+            {question.metadata.options?.map((option, idx) => (\n+              <motion.div\n+                key={idx}\n+                initial={{ opacity: 0, x: -20 }}\n+                animate={{ opacity: 1, x: 0 }}\n+                transition={{ delay: idx * 0.1 }}\n+              >\n+                <Label\n+                  htmlFor={`option-${idx}`}\n+                  className={cn(\n+                    \"flex items-center space-x-3 space-y-0 rounded-lg border p-4\",\n+                    \"cursor-pointer transition-all hover:bg-accent\",\n+                    \"data-[state=checked]:border-primary\"\n+                  )}\n+                >\n+                  <RadioGroupItem value={option} id={`option-${idx}`} />\n+                  <div className=\"flex flex-1 items-center justify-between\">\n+                    <div className=\"space-y-1\">\n+                      <p className=\"text-sm font-medium leading-none\">{option}</p>\n+                    </div>\n+                  </div>\n+                </Label>\n+              </motion.div>\n+            ))}\n+          </RadioGroup>\n+        );\n+\n+      case 'writing':\n+        return (\n+          <div className=\"space-y-4\">\n+            <RichTextEditor\n+              value=\"\"\n+              onChange={() => onAnswer(50)}\n+              placeholder=\"Write your answer here...\"\n+              className=\"min-h-[200px]\"\n+            />\n+            {question.metadata.sampleAnswer && (\n+              <Collapsible>\n+                <CollapsibleTrigger asChild>\n+                  <Button variant=\"outline\" size=\"sm\" className=\"gap-2\">\n+                    <Lightbulb className=\"h-4 w-4\" />\n+                    View Sample Answer\n+                  </Button>\n+                </CollapsibleTrigger>\n+                <CollapsibleContent className=\"mt-4 space-y-2\">\n+                  <Card className=\"bg-primary/5\">\n+                    <CardContent className=\"p-4\">\n+                      <p className=\"text-sm\">{question.metadata.sampleAnswer}</p>\n+                    </CardContent>\n+                  </Card>\n+                </CollapsibleContent>\n+              </Collapsible>\n+            )}\n+          </div>\n+        );\n+\n+      case 'speaking':\n+        return (\n+          <div className=\"space-y-4\">\n+            <Card className=\"bg-primary/5\">\n+              <CardContent className=\"p-4 space-y-4\">\n+                <div className=\"flex items-center gap-2\">\n+                  <Mic className=\"h-5 w-5 text-primary\" />\n+                  <p className=\"font-medium\">Speaking Prompt</p>\n+                </div>\n+                <p className=\"text-sm\">{question.metadata.speakingPrompt}</p>\n+              </CardContent>\n+            </Card>\n+            <div className=\"flex justify-center\">\n+              <Button \n+                variant=\"outline\" \n+                size=\"lg\"\n+                className=\"gap-2 rounded-full hover:bg-primary/10\"\n+                onClick={() => onAnswer(75)}\n+              >\n+                <Mic className=\"h-5 w-5\" />\n+                Start Speaking\n+              </Button>\n+            </div>\n+          </div>\n+        );\n+\n+      case 'listening':\n+        return (\n+          <div className=\"space-y-4\">\n+            {question.metadata.audioContent && (\n+              <Card className=\"bg-primary/5\">\n+                <CardContent className=\"p-4\">\n+                  <audio\n+                    controls\n+                    src={question.metadata.audioContent}\n+                    className=\"w-full\"\n+                  />\n+                </CardContent>\n+              </Card>\n+            )}\n+            <div className=\"space-y-2\">\n+              <Label>Your Response</Label>\n+              <Textarea\n+                placeholder=\"Write what you heard...\"\n+                onChange={() => onAnswer(60)}\n+                className=\"min-h-[100px]\"\n+              />\n+            </div>\n+          </div>\n+        );\n+\n+      case 'reading':\n+        return (\n+          <div className=\"space-y-4\">\n+            <Card className=\"prose prose-sm max-w-none dark:prose-invert\">\n+              <CardContent className=\"p-4\">\n+                <div \n+                  dangerouslySetInnerHTML={{ \n+                    __html: question.metadata.passage || '' \n+                  }}\n+                />\n+              </CardContent>\n+            </Card>\n+            <div className=\"space-y-4\">\n+              {question.metadata.questions?.map((q, idx) => (\n+                <Card key={idx} className=\"border-primary/10\">\n+                  <CardContent className=\"p-4 space-y-2\">\n+                    <Label>{q}</Label>\n+                    <Textarea\n+                      placeholder=\"Write your answer...\"\n+                      onChange={() => onAnswer(Math.min(100, progress + 20))}\n+                      className=\"min-h-[80px]\"\n+                    />\n+                  </CardContent>\n+                </Card>\n+              ))}\n+            </div>\n+          </div>\n+        );\n+\n+      default:\n+        return (\n+          <div className=\"text-muted-foreground text-sm\">\n+            Question type not implemented yet.\n+          </div>\n+        );\n+    }\n+  };\n+\n+  return (\n+    <Card \n+      className={cn(\n+        \"border-l-4 transition-all duration-200\",\n+        isExpanded ? \"border-l-primary\" : \"border-l-primary/40\",\n+        \"hover:border-l-primary\"\n+      )}\n+    >\n+      <CardHeader \n+        className=\"cursor-pointer select-none\"\n+        onClick={onToggle}\n+      >\n+        <div className=\"flex items-center justify-between\">\n+          <div className=\"flex items-center gap-3\">\n+            <Badge \n+              variant=\"outline\" \n+              className={cn(\n+                \"bg-primary/5 px-2 py-1\",\n+                progress === 100 && \"bg-green-500/10 text-green-500\"\n+              )}\n+            >\n+              Question {index + 1}\n+            </Badge>\n+            <Badge \n+              variant=\"outline\" \n+              className=\"bg-primary/5 flex items-center gap-1\"\n+            >\n+              {getQuestionIcon(question.type)}\n+              <span className=\"capitalize\">{QUESTION_TYPES[question.type]?.label || question.type}</span>\n+            </Badge>\n+            {question.metadata.difficulty && (\n+              <Badge \n+                variant=\"outline\" \n+                className={cn(\n+                  \"capitalize\",\n+                  question.metadata.difficulty === 'beginner' && \"bg-green-500/10 text-green-500\",\n+                  question.metadata.difficulty === 'intermediate' && \"bg-yellow-500/10 text-yellow-500\",\n+                  question.metadata.difficulty === 'advanced' && \"bg-red-500/10 text-red-500\"\n+                )}\n+              >\n+                {question.metadata.difficulty}\n+              </Badge>\n+            )}\n+          </div>\n+          <motion.div\n+            animate={{ rotate: isExpanded ? 90 : 0 }}\n+            transition={{ duration: 0.2 }}\n+          >\n+            <ChevronRight className=\"h-5 w-5 text-primary\" />\n+          </motion.div>\n+        </div>\n+\n+        <div className=\"mt-2 space-y-2\">\n+          <CardTitle className=\"text-lg\">{question.title}</CardTitle>\n+          <Progress \n+            value={progress} \n+            className=\"h-1\"\n+          />\n+          <p className=\"text-sm text-muted-foreground\">\n+            {progress === 100 ? (\n+              <span className=\"flex items-center gap-1 text-green-500\">\n+                <CheckCircle2 className=\"h-4 w-4\" />\n+                Completed\n+              </span>\n+            ) : (\n+              `${Math.round(progress)}% complete`\n+            )}\n+          </p>\n+        </div>\n+      </CardHeader>\n+\n+      <AnimatePresence>\n+        {isExpanded && (\n+          <motion.div\n+            initial={{ height: 0, opacity: 0 }}\n+            animate={{ height: \"auto\", opacity: 1 }}\n+            exit={{ height: 0, opacity: 0 }}\n+            transition={{ duration: 0.2 }}\n+          >\n+            <CardContent className=\"pt-0\">\n+              <div className=\"space-y-4\">\n+                <p className=\"text-muted-foreground\">{question.content}</p>\n+                {renderQuestionContent()}\n+              </div>\n+            </CardContent>\n+          </motion.div>\n+        )}\n+      </AnimatePresence>\n+    </Card>\n+  );\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739455250195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -491,9 +491,9 @@\n   selectedIndex,\n   onQuestionSelect,\n   onNextLesson \n }: { \n-  questions: any[],\n+  questions: Question[],\n   selectedIndex: number | null,\n   onQuestionSelect: (index: number) => void,\n   onNextLesson: () => void\n }) {\n@@ -506,9 +506,9 @@\n       [questionId]: !prev[questionId]\n     }));\n   };\n \n-  const updateQuestionProgress = (questionId: string, progress: number) => {\n+  const handleQuestionAnswer = (questionId: string, progress: number) => {\n     setQuestionProgress(prev => ({\n       ...prev,\n       [questionId]: progress\n     }));\n@@ -541,130 +541,50 @@\n       transition={{ duration: 0.2 }}\n       className=\"space-y-6\"\n     >\n       {/* Overall Progress */}\n-      <Card className=\"border-primary/10\">\n+      <Card className=\"border-primary/10 bg-gradient-to-r from-primary/5 to-primary/10\">\n         <CardContent className=\"p-4\">\n           <div className=\"flex items-center justify-between mb-2\">\n-            <span className=\"text-sm font-medium\">Overall Progress</span>\n-            <span className=\"text-sm text-muted-foreground\">{Math.round(totalProgress)}%</span>\n+            <div className=\"flex items-center gap-2\">\n+              <Target className=\"h-5 w-5 text-primary\" />\n+              <span className=\"font-medium\">Overall Progress</span>\n+            </div>\n+            <Badge \n+              variant=\"outline\" \n+              className={cn(\n+                \"bg-primary/10\",\n+                totalProgress === 100 && \"bg-green-500/10 text-green-500\"\n+              )}\n+            >\n+              {Math.round(totalProgress)}% Complete\n+            </Badge>\n           </div>\n-          <Progress value={totalProgress} className=\"h-2\" />\n+          <Progress \n+            value={totalProgress} \n+            className=\"h-2 bg-primary/20\"\n+          />\n+          <div className=\"mt-2 text-sm text-muted-foreground\">\n+            {questions.length} Questions • {Object.values(questionProgress).filter(p => p === 100).length} Completed\n+          </div>\n         </CardContent>\n       </Card>\n \n-      {questions.map((question, index) => (\n-        <motion.div\n-          key={question.id}\n-          initial={{ opacity: 0, y: 20 }}\n-          animate={{ opacity: 1, y: 0 }}\n-          transition={{ delay: index * 0.1 }}\n-        >\n-          <Card \n-            className={cn(\n-              \"border-primary/10 shadow-md transition-all duration-200\",\n-              \"hover:shadow-lg hover:border-primary/30\",\n-              selectedIndex === index && \"ring-2 ring-primary ring-offset-2\"\n-            )}\n-          >\n-            <CardHeader \n-              className=\"cursor-pointer\"\n-              onClick={() => toggleQuestion(question.id)}\n-            >\n-              <div className=\"flex items-center justify-between\">\n-                <div className=\"flex items-center gap-3\">\n-                  <Badge variant=\"outline\" className=\"bg-primary/5\">\n-                    Question {index + 1}\n-                  </Badge>\n-                  <Badge variant=\"outline\" className=\"bg-primary/5\">\n-                    {question.points} points\n-                  </Badge>\n-                </div>\n-                <Button variant=\"ghost\" size=\"icon\">\n-                  <ChevronRight \n-                    className={cn(\n-                      \"h-4 w-4 transition-transform\",\n-                      expandedQuestions[question.id] && \"rotate-90\"\n-                    )} \n-                  />\n-                </Button>\n-              </div>\n-              <CardTitle className=\"text-lg mt-2\">{question.title}</CardTitle>\n-              <div className=\"mt-2\">\n-                <Progress \n-                  value={questionProgress[question.id] || 0} \n-                  className=\"h-1\"\n-                />\n-              </div>\n-            </CardHeader>\n+      {/* Questions */}\n+      <div className=\"space-y-4\">\n+        {questions.map((question, index) => (\n+          <QuestionCard\n+            key={question.id}\n+            question={question}\n+            index={index}\n+            isExpanded={expandedQuestions[question.id] || false}\n+            onToggle={() => toggleQuestion(question.id)}\n+            onAnswer={(progress) => handleQuestionAnswer(question.id, progress)}\n+            progress={questionProgress[question.id] || 0}\n+          />\n+        ))}\n+      </div>\n \n-            <AnimatePresence>\n-              {expandedQuestions[question.id] && (\n-                <motion.div\n-                  initial={{ height: 0, opacity: 0 }}\n-                  animate={{ height: \"auto\", opacity: 1 }}\n-                  exit={{ height: 0, opacity: 0 }}\n-                >\n-                  <CardContent>\n-                    <div className=\"space-y-4\">\n-                      <p className=\"text-muted-foreground\">{question.content}</p>\n-                      \n-                      {/* Question Options */}\n-                      {question.data?.options && (\n-                        <div className=\"grid gap-2\">\n-                          {question.data.options.map((option: string, optIndex: number) => (\n-                            <motion.div\n-                              key={optIndex}\n-                              whileHover={{ scale: 1.01 }}\n-                              whileTap={{ scale: 0.99 }}\n-                            >\n-                              <Button\n-                                variant=\"outline\"\n-                                className=\"w-full justify-start text-left h-auto p-4\"\n-                                onClick={() => {\n-                                  updateQuestionProgress(question.id, 100);\n-                                  onQuestionSelect(index);\n-                                }}\n-                              >\n-                                <div className=\"flex items-center gap-3\">\n-                                  <div className=\"w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\n-                                    {String.fromCharCode(65 + optIndex)}\n-                                  </div>\n-                                  <span>{option}</span>\n-                                </div>\n-                              </Button>\n-                            </motion.div>\n-                          ))}\n-                        </div>\n-                      )}\n-\n-                      {/* Related Exercises */}\n-                      {question.exercises && (\n-                        <div className=\"mt-6 pt-6 border-t\">\n-                          <h4 className=\"text-sm font-semibold mb-4 flex items-center gap-2\">\n-                            <PenTool className=\"h-4 w-4\" />\n-                            Related Exercises\n-                          </h4>\n-                          <div className=\"space-y-4\">\n-                            {question.exercises.map((exercise: any, exIndex: number) => (\n-                              <Card key={exIndex} className=\"border-primary/5\">\n-                                <CardContent className=\"p-4\">\n-                                  <p className=\"text-sm\">{exercise.text}</p>\n-                                </CardContent>\n-                              </Card>\n-                            ))}\n-                          </div>\n-                        </div>\n-                      )}\n-                    </div>\n-                  </CardContent>\n-                </motion.div>\n-              )}\n-            </AnimatePresence>\n-          </Card>\n-        </motion.div>\n-      ))}\n-\n       {/* Next Lesson Button */}\n       {totalProgress === 100 && (\n         <motion.div\n           initial={{ opacity: 0, y: 20 }}\n@@ -672,9 +592,9 @@\n           className=\"sticky bottom-4 flex justify-center\"\n         >\n           <Button\n             onClick={onNextLesson}\n-            className=\"bg-primary hover:bg-primary/90 text-white px-8 py-6 rounded-full shadow-lg\"\n+            className=\"bg-gradient-to-r from-primary to-primary/90 hover:from-primary/90 hover:to-primary text-white px-8 py-6 rounded-full shadow-lg\"\n           >\n             <span className=\"flex items-center gap-2\">\n               Continue to Next Lesson\n               <ArrowRight className=\"h-4 w-4\" />\n"
                },
                {
                    "date": 1739455263988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,977 @@\n+\"use client\"\n+\n+import React, { useState, useRef, useEffect } from 'react';\n+import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\n+import { Button } from \"@/components/ui/button\";\n+import { LoadingSpinner } from \"@/components/LoadingSpinner\";\n+import { \n+  RefreshCw, X, BookOpen, Clock, CheckCircle2, ChevronRight, \n+  Lightbulb, Volume2, VolumeX, Play, Pause, ArrowLeft, ArrowRight,\n+  CheckCircle, HelpCircle, Award, Star, ImageIcon, PenTool,\n+  Mic, Video, FileText, Pencil, Book, MessageCircle, Brain,\n+  Headphones, Type, Layers, Target, Presentation, Sparkles\n+} from 'lucide-react';\n+import { cn } from \"@/lib/utils\";\n+import { Badge } from \"@/components/ui/badge\";\n+import { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\n+import { ScrollArea } from \"@/components/ui/scroll-area\";\n+import { Progress } from \"@/components/ui/progress\";\n+import { motion, AnimatePresence } from \"framer-motion\";\n+import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n+import { logger } from \"@/lib/logger\";\n+import { useToast } from \"@/components/ui/use-toast\";\n+import { QuestionTypeIcon } from \"@/components/ui/question-type-icons\";\n+import { QUESTION_TYPES } from \"@/app/content-management/constants\";\n+import { RichTextEditor } from '@/components/editor/RichTextEditor';\n+import { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\n+import { Label } from \"@/components/ui/label\";\n+import { Input } from \"@/components/ui/input\";\n+import { Textarea } from \"@/components/ui/textarea\";\n+import { Collapsible, CollapsibleTrigger, CollapsibleContent } from \"@/components/ui/collapsible\";\n+\n+// Question Types from question-form.tsx\n+interface QuestionMetadata {\n+  prompt?: string;\n+  teacherScript?: string;\n+  sampleAnswer?: string;\n+  options?: string[];\n+  correctAnswer?: string | number;\n+  imageUrl?: string;\n+  videoUrl?: string;\n+  audioContent?: string;\n+  transcript?: string;\n+  passage?: string;\n+  questions?: string[];\n+  writingPrompt?: string;\n+  speakingPrompt?: string;\n+  listeningPrompt?: string;\n+  grammarPoint?: string;\n+  example?: string;\n+  difficulty?: 'beginner' | 'intermediate' | 'advanced';\n+  points?: number;\n+  type?: string;\n+  data?: any;\n+}\n+\n+interface Question {\n+  id: string;\n+  title: string;\n+  content: string;\n+  type: string;\n+  metadata: QuestionMetadata;\n+  exercises?: any[];\n+  points?: number;\n+  data?: any;\n+}\n+\n+interface LessonDialogProps {\n+  isOpen: boolean;\n+  onClose: () => void;\n+  lessonContent: {\n+    content: any;\n+    isLoading: boolean;\n+    error: string | null;\n+  };\n+  currentLessonId: string | null;\n+  onRetry: () => void;\n+}\n+\n+export function LessonDialog({\n+  isOpen,\n+  onClose,\n+  lessonContent,\n+  currentLessonId,\n+  onRetry\n+}: LessonDialogProps) {\n+  const dialogId = React.useId();\n+  const titleId = `${dialogId}-title`;\n+  const descriptionId = `${dialogId}-description`;\n+  const { toast } = useToast();\n+  const audioRef = useRef<HTMLAudioElement>(null);\n+\n+  // State for audio controls\n+  const [isPlaying, setIsPlaying] = useState(false);\n+  const [isMuted, setIsMuted] = useState(false);\n+  const [currentProgress, setCurrentProgress] = useState(0);\n+  const [audioProgress, setAudioProgress] = useState(0);\n+  const [activeTab, setActiveTab] = useState(\"content\");\n+  const [selectedQuestionIndex, setSelectedQuestionIndex] = useState<number | null>(null);\n+\n+  // Audio event handlers\n+  const handleTimeUpdate = () => {\n+    if (audioRef.current) {\n+      const progress = (audioRef.current.currentTime / audioRef.current.duration) * 100;\n+      setAudioProgress(progress);\n+      setCurrentProgress(Math.max(currentProgress, progress));\n+      \n+      logger.info('Audio progress updated', {\n+        source: 'LessonDialog',\n+        context: { \n+          progress: Math.round(progress),\n+          lessonId: currentLessonId\n+        }\n+      });\n+    }\n+  };\n+\n+  const handleAudioEnded = () => {\n+    setIsPlaying(false);\n+    setCurrentProgress(100);\n+    \n+    toast({\n+      title: \"🎉 Lesson Complete!\",\n+      description: \"You've finished listening to this lesson.\",\n+      action: (\n+        <Button\n+          variant=\"outline\"\n+          size=\"sm\"\n+          onClick={() => setActiveTab(\"questions\")}\n+        >\n+          Start Questions\n+        </Button>\n+      )\n+    });\n+\n+    logger.info('Audio playback completed', {\n+      source: 'LessonDialog',\n+      context: { lessonId: currentLessonId }\n+    });\n+  };\n+\n+  // Function to handle tab change with logging\n+  const handleTabChange = (value: string) => {\n+    logger.info('Tab changed in lesson dialog', {\n+      source: 'LessonDialog',\n+      context: { \n+        previousTab: activeTab,\n+        newTab: value,\n+        lessonId: currentLessonId\n+      }\n+    });\n+    setActiveTab(value);\n+  };\n+\n+  // Function to toggle audio playback\n+  const togglePlayback = () => {\n+    if (audioRef.current) {\n+      if (isPlaying) {\n+        audioRef.current.pause();\n+      } else {\n+        audioRef.current.play();\n+      }\n+      setIsPlaying(!isPlaying);\n+      \n+      logger.info('Audio playback toggled', {\n+        source: 'LessonDialog',\n+        context: { \n+          newState: !isPlaying,\n+          lessonId: currentLessonId\n+        }\n+      });\n+    }\n+  };\n+\n+  // Function to toggle mute\n+  const toggleMute = () => {\n+    if (audioRef.current) {\n+      audioRef.current.muted = !isMuted;\n+      setIsMuted(!isMuted);\n+      \n+      logger.info('Audio mute toggled', {\n+        source: 'LessonDialog',\n+        context: { \n+          newState: !isMuted,\n+          lessonId: currentLessonId\n+        }\n+      });\n+    }\n+  };\n+\n+  // Add audio element\n+  useEffect(() => {\n+    if (audioRef.current) {\n+      audioRef.current.addEventListener('timeupdate', handleTimeUpdate);\n+      audioRef.current.addEventListener('ended', handleAudioEnded);\n+      \n+      return () => {\n+        if (audioRef.current) {\n+          audioRef.current.removeEventListener('timeupdate', handleTimeUpdate);\n+          audioRef.current.removeEventListener('ended', handleAudioEnded);\n+        }\n+      };\n+    }\n+  }, []);\n+\n+  // Function to handle question selection\n+  const handleQuestionSelect = (index: number) => {\n+    setSelectedQuestionIndex(index);\n+    logger.info('Question selected', {\n+      source: 'LessonDialog',\n+      context: { \n+        questionIndex: index,\n+        lessonId: currentLessonId\n+      }\n+    });\n+  };\n+\n+  return (\n+    <Dialog open={isOpen} onOpenChange={onClose}>\n+      <DialogContent \n+        className=\"max-w-[100vw] w-full h-[100vh] p-0 max-h-screen bg-gradient-to-b from-background to-accent/10\"\n+        aria-labelledby={titleId}\n+        aria-describedby={descriptionId}\n+      >\n+        {/* Header Section */}\n+        <DialogHeader className=\"p-6 border-b bg-background/95 backdrop-blur-sm sticky top-0 z-50\">\n+          <div className=\"flex items-center justify-between\">\n+            <div className=\"flex-1\">\n+              <motion.div\n+                initial={{ opacity: 0, y: -20 }}\n+                animate={{ opacity: 1, y: 0 }}\n+                transition={{ duration: 0.3 }}\n+              >\n+                <DialogTitle id={titleId} className=\"text-2xl font-bold flex items-center gap-2\">\n+                  <BookOpen className=\"h-6 w-6 text-primary\" />\n+                  {lessonContent.content?.title || 'Lesson Content'}\n+                </DialogTitle>\n+                <DialogDescription id={descriptionId} className=\"text-base text-muted-foreground mt-2\">\n+                  {lessonContent.content?.description || 'Interactive lesson content and activities'}\n+                </DialogDescription>\n+              </motion.div>\n+            </div>\n+\n+            {/* Controls Section */}\n+            <div className=\"flex items-center gap-2\">\n+              <motion.div\n+                initial={{ opacity: 0, x: 20 }}\n+                animate={{ opacity: 1, x: 0 }}\n+                transition={{ duration: 0.3, delay: 0.1 }}\n+                className=\"flex items-center gap-2\"\n+              >\n+                <Button\n+                  variant=\"ghost\"\n+                  size=\"icon\"\n+                  onClick={toggleMute}\n+                  className=\"rounded-full hover:bg-primary/10\"\n+                >\n+                  {isMuted ? <VolumeX className=\"h-5 w-5\" /> : <Volume2 className=\"h-5 w-5\" />}\n+                </Button>\n+                <Button\n+                  variant=\"ghost\"\n+                  size=\"icon\"\n+                  onClick={togglePlayback}\n+                  className=\"rounded-full hover:bg-primary/10\"\n+                >\n+                  {isPlaying ? <Pause className=\"h-5 w-5\" /> : <Play className=\"h-5 w-5\" />}\n+                </Button>\n+              </motion.div>\n+\n+              <div className=\"h-6 w-px bg-border mx-2\" />\n+\n+              <Button \n+                variant=\"ghost\" \n+                size=\"icon\"\n+                onClick={onClose}\n+                className=\"rounded-full hover:bg-destructive/10\"\n+              >\n+                <X className=\"h-5 w-5\" />\n+              </Button>\n+            </div>\n+          </div>\n+\n+          {/* Progress Bar */}\n+          <div className=\"mt-4\">\n+            <div className=\"flex items-center gap-4\">\n+              <Progress value={currentProgress} className=\"h-1 flex-1\" />\n+              <span className=\"text-xs text-muted-foreground min-w-[3rem] text-right\">\n+                {Math.round(currentProgress)}%\n+              </span>\n+            </div>\n+            {audioProgress > 0 && (\n+              <div className=\"flex items-center gap-4 mt-1\">\n+                <Progress value={audioProgress} className=\"h-1 flex-1 bg-primary/20\" />\n+                <span className=\"text-xs text-muted-foreground min-w-[3rem] text-right\">\n+                  {Math.round(audioProgress)}%\n+                </span>\n+              </div>\n+            )}\n+          </div>\n+\n+          {/* Navigation Tabs */}\n+          <Tabs\n+            defaultValue=\"content\"\n+            value={activeTab}\n+            onValueChange={handleTabChange}\n+            className=\"mt-4\"\n+          >\n+            <TabsList className=\"grid w-full grid-cols-3 lg:w-[400px]\">\n+              <TabsTrigger value=\"content\" className=\"flex items-center gap-2\">\n+                <BookOpen className=\"h-4 w-4\" />\n+                Content\n+              </TabsTrigger>\n+              <TabsTrigger value=\"questions\" className=\"flex items-center gap-2\">\n+                <HelpCircle className=\"h-4 w-4\" />\n+                Questions\n+              </TabsTrigger>\n+              <TabsTrigger value=\"exercises\" className=\"flex items-center gap-2\">\n+                <Award className=\"h-4 w-4\" />\n+                Exercises\n+              </TabsTrigger>\n+            </TabsList>\n+          </Tabs>\n+        </DialogHeader>\n+\n+        {/* Main Content Area */}\n+        <div className=\"flex flex-col md:flex-row h-[calc(100vh-12rem)] w-full\">\n+          {/* Left Section - Main Content */}\n+          <div className=\"flex-1 md:w-2/3 h-full\">\n+            <ScrollArea className=\"h-full w-full\">\n+              <div className=\"container p-6\">\n+                {lessonContent.isLoading ? (\n+                  <motion.div \n+                    initial={{ opacity: 0, scale: 0.95 }}\n+                    animate={{ opacity: 1, scale: 1 }}\n+                    className=\"flex items-center justify-center h-[50vh]\"\n+                  >\n+                    <LoadingSpinner message=\"Loading your lesson content...\" />\n+                  </motion.div>\n+                ) : lessonContent.error ? (\n+                  <motion.div \n+                    initial={{ opacity: 0, y: 20 }}\n+                    animate={{ opacity: 1, y: 0 }}\n+                    className=\"flex flex-col items-center justify-center gap-4 h-[50vh]\"\n+                  >\n+                    <div className=\"p-8 bg-destructive/10 rounded-lg text-center max-w-md\">\n+                      <p className=\"text-destructive font-medium mb-4\">{lessonContent.error}</p>\n+                      <Button \n+                        onClick={onRetry} \n+                        variant=\"outline\" \n+                        className=\"gap-2 hover:bg-destructive/5\"\n+                      >\n+                        <RefreshCw className=\"h-4 w-4\" />\n+                        Retry Loading\n+                      </Button>\n+                    </div>\n+                  </motion.div>\n+                ) : (\n+                  <Tabs defaultValue=\"content\" value={activeTab} onValueChange={handleTabChange}>\n+                    <TabsContent value=\"content\">\n+                      <ContentTab content={lessonContent.content} />\n+                    </TabsContent>\n+                    <TabsContent value=\"questions\">\n+                      <QuestionsTab \n+                        questions={lessonContent.content?.questions} \n+                        selectedIndex={selectedQuestionIndex}\n+                        onQuestionSelect={handleQuestionSelect}\n+                        onNextLesson={() => {\n+                          // Handle next lesson navigation\n+                          logger.info('Navigating to next lesson', {\n+                            source: 'LessonDialog',\n+                            context: { currentLessonId }\n+                          });\n+                        }}\n+                      />\n+                    </TabsContent>\n+                    <TabsContent value=\"exercises\">\n+                      <ExercisesTab exercises={lessonContent.content?.exercise_prompts} />\n+                    </TabsContent>\n+                  </Tabs>\n+                )}\n+              </div>\n+            </ScrollArea>\n+          </div>\n+\n+          {/* Right Section - Media Preview */}\n+          <div className=\"md:w-1/3 h-1/4 md:h-full border-l bg-muted/10\">\n+            <ScrollArea className=\"h-full\">\n+              <div className=\"p-6 space-y-4\">\n+                <Card className=\"border-primary/10\">\n+                  <CardHeader>\n+                    <CardTitle className=\"text-lg flex items-center gap-2\">\n+                      <ImageIcon className=\"h-5 w-5 text-primary\" />\n+                      Media Preview\n+                    </CardTitle>\n+                  </CardHeader>\n+                  <CardContent>\n+                    {lessonContent.content?.media ? (\n+                      <div className=\"space-y-4\">\n+                        {lessonContent.content.media.map((item: any, index: number) => (\n+                          <motion.div\n+                            key={index}\n+                            initial={{ opacity: 0, scale: 0.95 }}\n+                            animate={{ opacity: 1, scale: 1 }}\n+                            transition={{ delay: index * 0.1 }}\n+                          >\n+                            {item.type === 'image' && (\n+                              <img\n+                                src={item.url}\n+                                alt={`Media ${index + 1}`}\n+                                className=\"w-full rounded-lg shadow-md hover:shadow-lg transition-shadow\"\n+                              />\n+                            )}\n+                            {item.type === 'video' && (\n+                              <video\n+                                src={item.url}\n+                                controls\n+                                className=\"w-full rounded-lg shadow-md\"\n+                                preload=\"metadata\"\n+                              />\n+                            )}\n+                          </motion.div>\n+                        ))}\n+                      </div>\n+                    ) : (\n+                      <div className=\"flex flex-col items-center justify-center py-8 text-muted-foreground\">\n+                        <ImageIcon className=\"h-12 w-12 mb-4 opacity-50\" />\n+                        <p>No media available</p>\n+                      </div>\n+                    )}\n+                  </CardContent>\n+                </Card>\n+              </div>\n+            </ScrollArea>\n+          </div>\n+        </div>\n+\n+        {/* Audio Element */}\n+        <audio\n+          ref={audioRef}\n+          src={lessonContent.content?.audioUrl}\n+          onEnded={() => setIsPlaying(false)}\n+          onError={(e) => {\n+            logger.error('Audio playback error', {\n+              source: 'LessonDialog',\n+              context: { error: e }\n+            });\n+            setIsPlaying(false);\n+            toast({\n+              title: \"Audio Error\",\n+              description: \"Failed to play audio content. Please try again.\"\n+            });\n+          }}\n+        />\n+      </DialogContent>\n+    </Dialog>\n+  );\n+}\n+\n+// Content Tab Component\n+function ContentTab({ content }: { content: any }) {\n+  return (\n+    <motion.div\n+      initial={{ opacity: 0 }}\n+      animate={{ opacity: 1 }}\n+      exit={{ opacity: 0 }}\n+      transition={{ duration: 0.2 }}\n+      className=\"space-y-8\"\n+    >\n+      <Card className=\"prose prose-sm max-w-none dark:prose-invert border-primary/10 shadow-md\">\n+        <CardHeader>\n+          <CardTitle className=\"flex items-center gap-2\">\n+            <BookOpen className=\"h-5 w-5 text-primary\" />\n+            Lesson Content\n+          </CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <div \n+            className=\"mt-4\"\n+            dangerouslySetInnerHTML={{ \n+              __html: content?.content || 'No content available' \n+            }} \n+          />\n+        </CardContent>\n+      </Card>\n+    </motion.div>\n+  );\n+}\n+\n+// Questions Tab Component\n+function QuestionsTab({ \n+  questions, \n+  selectedIndex,\n+  onQuestionSelect,\n+  onNextLesson \n+}: { \n+  questions: Question[],\n+  selectedIndex: number | null,\n+  onQuestionSelect: (index: number) => void,\n+  onNextLesson: () => void\n+}) {\n+  const [expandedQuestions, setExpandedQuestions] = useState<Record<string, boolean>>({});\n+  const [questionProgress, setQuestionProgress] = useState<Record<string, number>>({});\n+\n+  const toggleQuestion = (questionId: string) => {\n+    setExpandedQuestions(prev => ({\n+      ...prev,\n+      [questionId]: !prev[questionId]\n+    }));\n+  };\n+\n+  const handleQuestionAnswer = (questionId: string, progress: number) => {\n+    setQuestionProgress(prev => ({\n+      ...prev,\n+      [questionId]: progress\n+    }));\n+  };\n+\n+  const totalProgress = questions?.length \n+    ? Object.values(questionProgress).reduce((acc, curr) => acc + curr, 0) / questions.length\n+    : 0;\n+\n+  if (!questions?.length) {\n+    return (\n+      <motion.div\n+        initial={{ opacity: 0 }}\n+        animate={{ opacity: 1 }}\n+        exit={{ opacity: 0 }}\n+        transition={{ duration: 0.2 }}\n+        className=\"flex flex-col items-center justify-center h-[50vh] text-center\"\n+      >\n+        <HelpCircle className=\"h-12 w-12 text-muted-foreground mb-4\" />\n+        <p className=\"text-muted-foreground\">No questions available for this lesson</p>\n+      </motion.div>\n+    );\n+  }\n+\n+  return (\n+    <motion.div\n+      initial={{ opacity: 0 }}\n+      animate={{ opacity: 1 }}\n+      exit={{ opacity: 0 }}\n+      transition={{ duration: 0.2 }}\n+      className=\"space-y-6\"\n+    >\n+      {/* Overall Progress */}\n+      <Card className=\"border-primary/10 bg-gradient-to-r from-primary/5 to-primary/10\">\n+        <CardContent className=\"p-4\">\n+          <div className=\"flex items-center justify-between mb-2\">\n+            <div className=\"flex items-center gap-2\">\n+              <Target className=\"h-5 w-5 text-primary\" />\n+              <span className=\"font-medium\">Overall Progress</span>\n+            </div>\n+            <Badge \n+              variant=\"outline\" \n+              className={cn(\n+                \"bg-primary/10\",\n+                totalProgress === 100 && \"bg-green-500/10 text-green-500\"\n+              )}\n+            >\n+              {Math.round(totalProgress)}% Complete\n+            </Badge>\n+          </div>\n+          <Progress \n+            value={totalProgress} \n+            className=\"h-2 bg-primary/20\"\n+          />\n+          <div className=\"mt-2 text-sm text-muted-foreground\">\n+            {questions.length} Questions • {Object.values(questionProgress).filter(p => p === 100).length} Completed\n+          </div>\n+        </CardContent>\n+      </Card>\n+\n+      {/* Questions */}\n+      <div className=\"space-y-4\">\n+        {questions.map((question, index) => (\n+          <QuestionCard\n+            key={question.id}\n+            question={question}\n+            index={index}\n+            isExpanded={expandedQuestions[question.id] || false}\n+            onToggle={() => toggleQuestion(question.id)}\n+            onAnswer={(progress) => handleQuestionAnswer(question.id, progress)}\n+            progress={questionProgress[question.id] || 0}\n+          />\n+        ))}\n+      </div>\n+\n+      {/* Next Lesson Button */}\n+      {totalProgress === 100 && (\n+        <motion.div\n+          initial={{ opacity: 0, y: 20 }}\n+          animate={{ opacity: 1, y: 0 }}\n+          className=\"sticky bottom-4 flex justify-center\"\n+        >\n+          <Button\n+            onClick={onNextLesson}\n+            className=\"bg-gradient-to-r from-primary to-primary/90 hover:from-primary/90 hover:to-primary text-white px-8 py-6 rounded-full shadow-lg\"\n+          >\n+            <span className=\"flex items-center gap-2\">\n+              Continue to Next Lesson\n+              <ArrowRight className=\"h-4 w-4\" />\n+            </span>\n+          </Button>\n+        </motion.div>\n+      )}\n+    </motion.div>\n+  );\n+}\n+\n+// Exercises Tab Component\n+function ExercisesTab({ exercises }: { exercises: any[] }) {\n+  if (!exercises?.length) {\n+    return (\n+      <motion.div\n+        initial={{ opacity: 0 }}\n+        animate={{ opacity: 1 }}\n+        exit={{ opacity: 0 }}\n+        transition={{ duration: 0.2 }}\n+        className=\"flex flex-col items-center justify-center h-[50vh] text-center\"\n+      >\n+        <Award className=\"h-12 w-12 text-muted-foreground mb-4\" />\n+        <p className=\"text-muted-foreground\">No exercises available for this lesson</p>\n+      </motion.div>\n+    );\n+  }\n+\n+  return (\n+    <motion.div\n+      initial={{ opacity: 0 }}\n+      animate={{ opacity: 1 }}\n+      exit={{ opacity: 0 }}\n+      transition={{ duration: 0.2 }}\n+      className=\"space-y-6\"\n+    >\n+      {exercises.map((exercise, index) => (\n+        <motion.div\n+          key={exercise.id}\n+          initial={{ opacity: 0, y: 20 }}\n+          animate={{ opacity: 1, y: 0 }}\n+          transition={{ delay: index * 0.1 }}\n+        >\n+          <Card className=\"border-primary/10 shadow-md hover:shadow-lg transition-all duration-200\">\n+            <CardHeader>\n+              <div className=\"flex items-center gap-3\">\n+                <Badge variant=\"outline\" className=\"bg-primary/5\">\n+                  Exercise {index + 1}\n+                </Badge>\n+                <Badge variant=\"outline\" className=\"bg-primary/5\">\n+                  {exercise.questionType}\n+                </Badge>\n+                {exercise.difficulty && (\n+                  <Badge \n+                    variant=\"outline\" \n+                    className={cn(\n+                      \"capitalize\",\n+                      exercise.difficulty === 'beginner' && \"bg-green-500/10 text-green-500\",\n+                      exercise.difficulty === 'intermediate' && \"bg-yellow-500/10 text-yellow-500\",\n+                      exercise.difficulty === 'advanced' && \"bg-red-500/10 text-red-500\"\n+                    )}\n+                  >\n+                    {exercise.difficulty}\n+                  </Badge>\n+                )}\n+              </div>\n+              <CardTitle className=\"text-lg mt-2\">{exercise.text}</CardTitle>\n+              {exercise.content?.instructions && (\n+                <CardDescription className=\"mt-2 flex items-center gap-2\">\n+                  <Lightbulb className=\"h-4 w-4 text-primary\" />\n+                  {exercise.content.instructions}\n+                </CardDescription>\n+              )}\n+            </CardHeader>\n+            <CardContent>\n+              <div className=\"space-y-4\">\n+                {exercise.media && (\n+                  <div className=\"mt-4 rounded-lg overflow-hidden border\">\n+                    {exercise.type === 'image' && (\n+                      <img \n+                        src={exercise.media} \n+                        alt={exercise.text}\n+                        className=\"w-full h-auto object-cover\"\n+                      />\n+                    )}\n+                    {exercise.type === 'video' && (\n+                      <video \n+                        src={exercise.media}\n+                        controls\n+                        className=\"w-full\"\n+                        preload=\"metadata\"\n+                      />\n+                    )}\n+                  </div>\n+                )}\n+              </div>\n+            </CardContent>\n+          </Card>\n+        </motion.div>\n+      ))}\n+    </motion.div>\n+  );\n+}\n+\n+// Add this component before the QuestionsTab component\n+\n+function QuestionCard({ \n+  question,\n+  index,\n+  isExpanded,\n+  onToggle,\n+  onAnswer,\n+  progress\n+}: { \n+  question: Question;\n+  index: number;\n+  isExpanded: boolean;\n+  onToggle: () => void;\n+  onAnswer: (progress: number) => void;\n+  progress: number;\n+}) {\n+  const getQuestionIcon = (type: string) => {\n+    switch (type) {\n+      case 'speaking': return <Mic className=\"h-5 w-5\" />;\n+      case 'writing': return <Pencil className=\"h-5 w-5\" />;\n+      case 'reading': return <Book className=\"h-5 w-5\" />;\n+      case 'listening': return <Headphones className=\"h-5 w-5\" />;\n+      case 'multipleChoice': return <Layers className=\"h-5 w-5\" />;\n+      case 'grammar': return <Type className=\"h-5 w-5\" />;\n+      case 'vocabulary': return <Brain className=\"h-5 w-5\" />;\n+      case 'conversation': return <MessageCircle className=\"h-5 w-5\" />;\n+      case 'presentation': return <Presentation className=\"h-5 w-5\" />;\n+      default: return <Target className=\"h-5 w-5\" />;\n+    }\n+  };\n+\n+  const renderQuestionContent = () => {\n+    switch (question.type) {\n+      case 'multipleChoice':\n+        return (\n+          <RadioGroup\n+            onValueChange={(value) => onAnswer(100)}\n+            className=\"space-y-2\"\n+          >\n+            {question.metadata.options?.map((option, idx) => (\n+              <motion.div\n+                key={idx}\n+                initial={{ opacity: 0, x: -20 }}\n+                animate={{ opacity: 1, x: 0 }}\n+                transition={{ delay: idx * 0.1 }}\n+              >\n+                <Label\n+                  htmlFor={`option-${idx}`}\n+                  className={cn(\n+                    \"flex items-center space-x-3 space-y-0 rounded-lg border p-4\",\n+                    \"cursor-pointer transition-all hover:bg-accent\",\n+                    \"data-[state=checked]:border-primary\"\n+                  )}\n+                >\n+                  <RadioGroupItem value={option} id={`option-${idx}`} />\n+                  <div className=\"flex flex-1 items-center justify-between\">\n+                    <div className=\"space-y-1\">\n+                      <p className=\"text-sm font-medium leading-none\">{option}</p>\n+                    </div>\n+                  </div>\n+                </Label>\n+              </motion.div>\n+            ))}\n+          </RadioGroup>\n+        );\n+\n+      case 'writing':\n+        return (\n+          <div className=\"space-y-4\">\n+            <RichTextEditor\n+              value=\"\"\n+              onChange={() => onAnswer(50)}\n+              placeholder=\"Write your answer here...\"\n+              className=\"min-h-[200px]\"\n+            />\n+            {question.metadata.sampleAnswer && (\n+              <Collapsible>\n+                <CollapsibleTrigger asChild>\n+                  <Button variant=\"outline\" size=\"sm\" className=\"gap-2\">\n+                    <Lightbulb className=\"h-4 w-4\" />\n+                    View Sample Answer\n+                  </Button>\n+                </CollapsibleTrigger>\n+                <CollapsibleContent className=\"mt-4 space-y-2\">\n+                  <Card className=\"bg-primary/5\">\n+                    <CardContent className=\"p-4\">\n+                      <p className=\"text-sm\">{question.metadata.sampleAnswer}</p>\n+                    </CardContent>\n+                  </Card>\n+                </CollapsibleContent>\n+              </Collapsible>\n+            )}\n+          </div>\n+        );\n+\n+      case 'speaking':\n+        return (\n+          <div className=\"space-y-4\">\n+            <Card className=\"bg-primary/5\">\n+              <CardContent className=\"p-4 space-y-4\">\n+                <div className=\"flex items-center gap-2\">\n+                  <Mic className=\"h-5 w-5 text-primary\" />\n+                  <p className=\"font-medium\">Speaking Prompt</p>\n+                </div>\n+                <p className=\"text-sm\">{question.metadata.speakingPrompt}</p>\n+              </CardContent>\n+            </Card>\n+            <div className=\"flex justify-center\">\n+              <Button \n+                variant=\"outline\" \n+                size=\"lg\"\n+                className=\"gap-2 rounded-full hover:bg-primary/10\"\n+                onClick={() => onAnswer(75)}\n+              >\n+                <Mic className=\"h-5 w-5\" />\n+                Start Speaking\n+              </Button>\n+            </div>\n+          </div>\n+        );\n+\n+      case 'listening':\n+        return (\n+          <div className=\"space-y-4\">\n+            {question.metadata.audioContent && (\n+              <Card className=\"bg-primary/5\">\n+                <CardContent className=\"p-4\">\n+                  <audio\n+                    controls\n+                    src={question.metadata.audioContent}\n+                    className=\"w-full\"\n+                  />\n+                </CardContent>\n+              </Card>\n+            )}\n+            <div className=\"space-y-2\">\n+              <Label>Your Response</Label>\n+              <Textarea\n+                placeholder=\"Write what you heard...\"\n+                onChange={() => onAnswer(60)}\n+                className=\"min-h-[100px]\"\n+              />\n+            </div>\n+          </div>\n+        );\n+\n+      case 'reading':\n+        return (\n+          <div className=\"space-y-4\">\n+            <Card className=\"prose prose-sm max-w-none dark:prose-invert\">\n+              <CardContent className=\"p-4\">\n+                <div \n+                  dangerouslySetInnerHTML={{ \n+                    __html: question.metadata.passage || '' \n+                  }}\n+                />\n+              </CardContent>\n+            </Card>\n+            <div className=\"space-y-4\">\n+              {question.metadata.questions?.map((q, idx) => (\n+                <Card key={idx} className=\"border-primary/10\">\n+                  <CardContent className=\"p-4 space-y-2\">\n+                    <Label>{q}</Label>\n+                    <Textarea\n+                      placeholder=\"Write your answer...\"\n+                      onChange={() => onAnswer(Math.min(100, progress + 20))}\n+                      className=\"min-h-[80px]\"\n+                    />\n+                  </CardContent>\n+                </Card>\n+              ))}\n+            </div>\n+          </div>\n+        );\n+\n+      default:\n+        return (\n+          <div className=\"text-muted-foreground text-sm\">\n+            Question type not implemented yet.\n+          </div>\n+        );\n+    }\n+  };\n+\n+  return (\n+    <Card \n+      className={cn(\n+        \"border-l-4 transition-all duration-200\",\n+        isExpanded ? \"border-l-primary\" : \"border-l-primary/40\",\n+        \"hover:border-l-primary\"\n+      )}\n+    >\n+      <CardHeader \n+        className=\"cursor-pointer select-none\"\n+        onClick={onToggle}\n+      >\n+        <div className=\"flex items-center justify-between\">\n+          <div className=\"flex items-center gap-3\">\n+            <Badge \n+              variant=\"outline\" \n+              className={cn(\n+                \"bg-primary/5 px-2 py-1\",\n+                progress === 100 && \"bg-green-500/10 text-green-500\"\n+              )}\n+            >\n+              Question {index + 1}\n+            </Badge>\n+            <Badge \n+              variant=\"outline\" \n+              className=\"bg-primary/5 flex items-center gap-1\"\n+            >\n+              {getQuestionIcon(question.type)}\n+              <span className=\"capitalize\">{QUESTION_TYPES[question.type]?.label || question.type}</span>\n+            </Badge>\n+            {question.metadata.difficulty && (\n+              <Badge \n+                variant=\"outline\" \n+                className={cn(\n+                  \"capitalize\",\n+                  question.metadata.difficulty === 'beginner' && \"bg-green-500/10 text-green-500\",\n+                  question.metadata.difficulty === 'intermediate' && \"bg-yellow-500/10 text-yellow-500\",\n+                  question.metadata.difficulty === 'advanced' && \"bg-red-500/10 text-red-500\"\n+                )}\n+              >\n+                {question.metadata.difficulty}\n+              </Badge>\n+            )}\n+          </div>\n+          <motion.div\n+            animate={{ rotate: isExpanded ? 90 : 0 }}\n+            transition={{ duration: 0.2 }}\n+          >\n+            <ChevronRight className=\"h-5 w-5 text-primary\" />\n+          </motion.div>\n+        </div>\n+\n+        <div className=\"mt-2 space-y-2\">\n+          <CardTitle className=\"text-lg\">{question.title}</CardTitle>\n+          <Progress \n+            value={progress} \n+            className=\"h-1\"\n+          />\n+          <p className=\"text-sm text-muted-foreground\">\n+            {progress === 100 ? (\n+              <span className=\"flex items-center gap-1 text-green-500\">\n+                <CheckCircle2 className=\"h-4 w-4\" />\n+                Completed\n+              </span>\n+            ) : (\n+              `${Math.round(progress)}% complete`\n+            )}\n+          </p>\n+        </div>\n+      </CardHeader>\n+\n+      <AnimatePresence>\n+        {isExpanded && (\n+          <motion.div\n+            initial={{ height: 0, opacity: 0 }}\n+            animate={{ height: \"auto\", opacity: 1 }}\n+            exit={{ height: 0, opacity: 0 }}\n+            transition={{ duration: 0.2 }}\n+          >\n+            <CardContent className=\"pt-0\">\n+              <div className=\"space-y-4\">\n+                <p className=\"text-muted-foreground\">{question.content}</p>\n+                {renderQuestionContent()}\n+              </div>\n+            </CardContent>\n+          </motion.div>\n+        )}\n+      </AnimatePresence>\n+    </Card>\n+  );\n+} \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739455270845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,8 +75,11 @@\n   currentLessonId: string | null;\n   onRetry: () => void;\n }\n \n+// Add this type definition at the top of the file\n+type QuestionType = keyof typeof QUESTION_TYPES;\n+\n export function LessonDialog({\n   isOpen,\n   onClose,\n   lessonContent,\n@@ -716,9 +719,10 @@\n   onAnswer: (progress: number) => void;\n   progress: number;\n }) {\n   const getQuestionIcon = (type: string) => {\n-    switch (type) {\n+    const safeType = type as QuestionType;\n+    switch (safeType) {\n       case 'speaking': return <Mic className=\"h-5 w-5\" />;\n       case 'writing': return <Pencil className=\"h-5 w-5\" />;\n       case 'reading': return <Book className=\"h-5 w-5\" />;\n       case 'listening': return <Headphones className=\"h-5 w-5\" />;\n@@ -911,987 +915,12 @@\n               variant=\"outline\" \n               className=\"bg-primary/5 flex items-center gap-1\"\n             >\n               {getQuestionIcon(question.type)}\n-              <span className=\"capitalize\">{QUESTION_TYPES[question.type]?.label || question.type}</span>\n-            </Badge>\n-            {question.metadata.difficulty && (\n-              <Badge \n-                variant=\"outline\" \n-                className={cn(\n-                  \"capitalize\",\n-                  question.metadata.difficulty === 'beginner' && \"bg-green-500/10 text-green-500\",\n-                  question.metadata.difficulty === 'intermediate' && \"bg-yellow-500/10 text-yellow-500\",\n-                  question.metadata.difficulty === 'advanced' && \"bg-red-500/10 text-red-500\"\n-                )}\n-              >\n-                {question.metadata.difficulty}\n-              </Badge>\n-            )}\n-          </div>\n-          <motion.div\n-            animate={{ rotate: isExpanded ? 90 : 0 }}\n-            transition={{ duration: 0.2 }}\n-          >\n-            <ChevronRight className=\"h-5 w-5 text-primary\" />\n-          </motion.div>\n-        </div>\n-\n-        <div className=\"mt-2 space-y-2\">\n-          <CardTitle className=\"text-lg\">{question.title}</CardTitle>\n-          <Progress \n-            value={progress} \n-            className=\"h-1\"\n-          />\n-          <p className=\"text-sm text-muted-foreground\">\n-            {progress === 100 ? (\n-              <span className=\"flex items-center gap-1 text-green-500\">\n-                <CheckCircle2 className=\"h-4 w-4\" />\n-                Completed\n+              <span className=\"capitalize\">\n+                {QUESTION_TYPES[question.type as QuestionType]?.label || question.type}\n               </span>\n-            ) : (\n-              `${Math.round(progress)}% complete`\n-            )}\n-          </p>\n-        </div>\n-      </CardHeader>\n-\n-      <AnimatePresence>\n-        {isExpanded && (\n-          <motion.div\n-            initial={{ height: 0, opacity: 0 }}\n-            animate={{ height: \"auto\", opacity: 1 }}\n-            exit={{ height: 0, opacity: 0 }}\n-            transition={{ duration: 0.2 }}\n-          >\n-            <CardContent className=\"pt-0\">\n-              <div className=\"space-y-4\">\n-                <p className=\"text-muted-foreground\">{question.content}</p>\n-                {renderQuestionContent()}\n-              </div>\n-            </CardContent>\n-          </motion.div>\n-        )}\n-      </AnimatePresence>\n-    </Card>\n-  );\n-} \n-\"use client\"\n-\n-import React, { useState, useRef, useEffect } from 'react';\n-import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\n-import { Button } from \"@/components/ui/button\";\n-import { LoadingSpinner } from \"@/components/LoadingSpinner\";\n-import { \n-  RefreshCw, X, BookOpen, Clock, CheckCircle2, ChevronRight, \n-  Lightbulb, Volume2, VolumeX, Play, Pause, ArrowLeft, ArrowRight,\n-  CheckCircle, HelpCircle, Award, Star, ImageIcon, PenTool,\n-  Mic, Video, FileText, Pencil, Book, MessageCircle, Brain,\n-  Headphones, Type, Layers, Target, Presentation, Sparkles\n-} from 'lucide-react';\n-import { cn } from \"@/lib/utils\";\n-import { Badge } from \"@/components/ui/badge\";\n-import { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\n-import { ScrollArea } from \"@/components/ui/scroll-area\";\n-import { Progress } from \"@/components/ui/progress\";\n-import { motion, AnimatePresence } from \"framer-motion\";\n-import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n-import { logger } from \"@/lib/logger\";\n-import { useToast } from \"@/components/ui/use-toast\";\n-import { QuestionTypeIcon } from \"@/components/ui/question-type-icons\";\n-import { QUESTION_TYPES } from \"@/app/content-management/constants\";\n-import { RichTextEditor } from '@/components/editor/RichTextEditor';\n-import { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\n-import { Label } from \"@/components/ui/label\";\n-import { Input } from \"@/components/ui/input\";\n-import { Textarea } from \"@/components/ui/textarea\";\n-import { Collapsible, CollapsibleTrigger, CollapsibleContent } from \"@/components/ui/collapsible\";\n-\n-// Question Types from question-form.tsx\n-interface QuestionMetadata {\n-  prompt?: string;\n-  teacherScript?: string;\n-  sampleAnswer?: string;\n-  options?: string[];\n-  correctAnswer?: string | number;\n-  imageUrl?: string;\n-  videoUrl?: string;\n-  audioContent?: string;\n-  transcript?: string;\n-  passage?: string;\n-  questions?: string[];\n-  writingPrompt?: string;\n-  speakingPrompt?: string;\n-  listeningPrompt?: string;\n-  grammarPoint?: string;\n-  example?: string;\n-  difficulty?: 'beginner' | 'intermediate' | 'advanced';\n-  points?: number;\n-  type?: string;\n-  data?: any;\n-}\n-\n-interface Question {\n-  id: string;\n-  title: string;\n-  content: string;\n-  type: string;\n-  metadata: QuestionMetadata;\n-  exercises?: any[];\n-  points?: number;\n-  data?: any;\n-}\n-\n-interface LessonDialogProps {\n-  isOpen: boolean;\n-  onClose: () => void;\n-  lessonContent: {\n-    content: any;\n-    isLoading: boolean;\n-    error: string | null;\n-  };\n-  currentLessonId: string | null;\n-  onRetry: () => void;\n-}\n-\n-export function LessonDialog({\n-  isOpen,\n-  onClose,\n-  lessonContent,\n-  currentLessonId,\n-  onRetry\n-}: LessonDialogProps) {\n-  const dialogId = React.useId();\n-  const titleId = `${dialogId}-title`;\n-  const descriptionId = `${dialogId}-description`;\n-  const { toast } = useToast();\n-  const audioRef = useRef<HTMLAudioElement>(null);\n-\n-  // State for audio controls\n-  const [isPlaying, setIsPlaying] = useState(false);\n-  const [isMuted, setIsMuted] = useState(false);\n-  const [currentProgress, setCurrentProgress] = useState(0);\n-  const [audioProgress, setAudioProgress] = useState(0);\n-  const [activeTab, setActiveTab] = useState(\"content\");\n-  const [selectedQuestionIndex, setSelectedQuestionIndex] = useState<number | null>(null);\n-\n-  // Audio event handlers\n-  const handleTimeUpdate = () => {\n-    if (audioRef.current) {\n-      const progress = (audioRef.current.currentTime / audioRef.current.duration) * 100;\n-      setAudioProgress(progress);\n-      setCurrentProgress(Math.max(currentProgress, progress));\n-      \n-      logger.info('Audio progress updated', {\n-        source: 'LessonDialog',\n-        context: { \n-          progress: Math.round(progress),\n-          lessonId: currentLessonId\n-        }\n-      });\n-    }\n-  };\n-\n-  const handleAudioEnded = () => {\n-    setIsPlaying(false);\n-    setCurrentProgress(100);\n-    \n-    toast({\n-      title: \"🎉 Lesson Complete!\",\n-      description: \"You've finished listening to this lesson.\",\n-      action: (\n-        <Button\n-          variant=\"outline\"\n-          size=\"sm\"\n-          onClick={() => setActiveTab(\"questions\")}\n-        >\n-          Start Questions\n-        </Button>\n-      )\n-    });\n-\n-    logger.info('Audio playback completed', {\n-      source: 'LessonDialog',\n-      context: { lessonId: currentLessonId }\n-    });\n-  };\n-\n-  // Function to handle tab change with logging\n-  const handleTabChange = (value: string) => {\n-    logger.info('Tab changed in lesson dialog', {\n-      source: 'LessonDialog',\n-      context: { \n-        previousTab: activeTab,\n-        newTab: value,\n-        lessonId: currentLessonId\n-      }\n-    });\n-    setActiveTab(value);\n-  };\n-\n-  // Function to toggle audio playback\n-  const togglePlayback = () => {\n-    if (audioRef.current) {\n-      if (isPlaying) {\n-        audioRef.current.pause();\n-      } else {\n-        audioRef.current.play();\n-      }\n-      setIsPlaying(!isPlaying);\n-      \n-      logger.info('Audio playback toggled', {\n-        source: 'LessonDialog',\n-        context: { \n-          newState: !isPlaying,\n-          lessonId: currentLessonId\n-        }\n-      });\n-    }\n-  };\n-\n-  // Function to toggle mute\n-  const toggleMute = () => {\n-    if (audioRef.current) {\n-      audioRef.current.muted = !isMuted;\n-      setIsMuted(!isMuted);\n-      \n-      logger.info('Audio mute toggled', {\n-        source: 'LessonDialog',\n-        context: { \n-          newState: !isMuted,\n-          lessonId: currentLessonId\n-        }\n-      });\n-    }\n-  };\n-\n-  // Add audio element\n-  useEffect(() => {\n-    if (audioRef.current) {\n-      audioRef.current.addEventListener('timeupdate', handleTimeUpdate);\n-      audioRef.current.addEventListener('ended', handleAudioEnded);\n-      \n-      return () => {\n-        if (audioRef.current) {\n-          audioRef.current.removeEventListener('timeupdate', handleTimeUpdate);\n-          audioRef.current.removeEventListener('ended', handleAudioEnded);\n-        }\n-      };\n-    }\n-  }, []);\n-\n-  // Function to handle question selection\n-  const handleQuestionSelect = (index: number) => {\n-    setSelectedQuestionIndex(index);\n-    logger.info('Question selected', {\n-      source: 'LessonDialog',\n-      context: { \n-        questionIndex: index,\n-        lessonId: currentLessonId\n-      }\n-    });\n-  };\n-\n-  return (\n-    <Dialog open={isOpen} onOpenChange={onClose}>\n-      <DialogContent \n-        className=\"max-w-[100vw] w-full h-[100vh] p-0 max-h-screen bg-gradient-to-b from-background to-accent/10\"\n-        aria-labelledby={titleId}\n-        aria-describedby={descriptionId}\n-      >\n-        {/* Header Section */}\n-        <DialogHeader className=\"p-6 border-b bg-background/95 backdrop-blur-sm sticky top-0 z-50\">\n-          <div className=\"flex items-center justify-between\">\n-            <div className=\"flex-1\">\n-              <motion.div\n-                initial={{ opacity: 0, y: -20 }}\n-                animate={{ opacity: 1, y: 0 }}\n-                transition={{ duration: 0.3 }}\n-              >\n-                <DialogTitle id={titleId} className=\"text-2xl font-bold flex items-center gap-2\">\n-                  <BookOpen className=\"h-6 w-6 text-primary\" />\n-                  {lessonContent.content?.title || 'Lesson Content'}\n-                </DialogTitle>\n-                <DialogDescription id={descriptionId} className=\"text-base text-muted-foreground mt-2\">\n-                  {lessonContent.content?.description || 'Interactive lesson content and activities'}\n-                </DialogDescription>\n-              </motion.div>\n-            </div>\n-\n-            {/* Controls Section */}\n-            <div className=\"flex items-center gap-2\">\n-              <motion.div\n-                initial={{ opacity: 0, x: 20 }}\n-                animate={{ opacity: 1, x: 0 }}\n-                transition={{ duration: 0.3, delay: 0.1 }}\n-                className=\"flex items-center gap-2\"\n-              >\n-                <Button\n-                  variant=\"ghost\"\n-                  size=\"icon\"\n-                  onClick={toggleMute}\n-                  className=\"rounded-full hover:bg-primary/10\"\n-                >\n-                  {isMuted ? <VolumeX className=\"h-5 w-5\" /> : <Volume2 className=\"h-5 w-5\" />}\n-                </Button>\n-                <Button\n-                  variant=\"ghost\"\n-                  size=\"icon\"\n-                  onClick={togglePlayback}\n-                  className=\"rounded-full hover:bg-primary/10\"\n-                >\n-                  {isPlaying ? <Pause className=\"h-5 w-5\" /> : <Play className=\"h-5 w-5\" />}\n-                </Button>\n-              </motion.div>\n-\n-              <div className=\"h-6 w-px bg-border mx-2\" />\n-\n-              <Button \n-                variant=\"ghost\" \n-                size=\"icon\"\n-                onClick={onClose}\n-                className=\"rounded-full hover:bg-destructive/10\"\n-              >\n-                <X className=\"h-5 w-5\" />\n-              </Button>\n-            </div>\n-          </div>\n-\n-          {/* Progress Bar */}\n-          <div className=\"mt-4\">\n-            <div className=\"flex items-center gap-4\">\n-              <Progress value={currentProgress} className=\"h-1 flex-1\" />\n-              <span className=\"text-xs text-muted-foreground min-w-[3rem] text-right\">\n-                {Math.round(currentProgress)}%\n-              </span>\n-            </div>\n-            {audioProgress > 0 && (\n-              <div className=\"flex items-center gap-4 mt-1\">\n-                <Progress value={audioProgress} className=\"h-1 flex-1 bg-primary/20\" />\n-                <span className=\"text-xs text-muted-foreground min-w-[3rem] text-right\">\n-                  {Math.round(audioProgress)}%\n-                </span>\n-              </div>\n-            )}\n-          </div>\n-\n-          {/* Navigation Tabs */}\n-          <Tabs\n-            defaultValue=\"content\"\n-            value={activeTab}\n-            onValueChange={handleTabChange}\n-            className=\"mt-4\"\n-          >\n-            <TabsList className=\"grid w-full grid-cols-3 lg:w-[400px]\">\n-              <TabsTrigger value=\"content\" className=\"flex items-center gap-2\">\n-                <BookOpen className=\"h-4 w-4\" />\n-                Content\n-              </TabsTrigger>\n-              <TabsTrigger value=\"questions\" className=\"flex items-center gap-2\">\n-                <HelpCircle className=\"h-4 w-4\" />\n-                Questions\n-              </TabsTrigger>\n-              <TabsTrigger value=\"exercises\" className=\"flex items-center gap-2\">\n-                <Award className=\"h-4 w-4\" />\n-                Exercises\n-              </TabsTrigger>\n-            </TabsList>\n-          </Tabs>\n-        </DialogHeader>\n-\n-        {/* Main Content Area */}\n-        <div className=\"flex flex-col md:flex-row h-[calc(100vh-12rem)] w-full\">\n-          {/* Left Section - Main Content */}\n-          <div className=\"flex-1 md:w-2/3 h-full\">\n-            <ScrollArea className=\"h-full w-full\">\n-              <div className=\"container p-6\">\n-                {lessonContent.isLoading ? (\n-                  <motion.div \n-                    initial={{ opacity: 0, scale: 0.95 }}\n-                    animate={{ opacity: 1, scale: 1 }}\n-                    className=\"flex items-center justify-center h-[50vh]\"\n-                  >\n-                    <LoadingSpinner message=\"Loading your lesson content...\" />\n-                  </motion.div>\n-                ) : lessonContent.error ? (\n-                  <motion.div \n-                    initial={{ opacity: 0, y: 20 }}\n-                    animate={{ opacity: 1, y: 0 }}\n-                    className=\"flex flex-col items-center justify-center gap-4 h-[50vh]\"\n-                  >\n-                    <div className=\"p-8 bg-destructive/10 rounded-lg text-center max-w-md\">\n-                      <p className=\"text-destructive font-medium mb-4\">{lessonContent.error}</p>\n-                      <Button \n-                        onClick={onRetry} \n-                        variant=\"outline\" \n-                        className=\"gap-2 hover:bg-destructive/5\"\n-                      >\n-                        <RefreshCw className=\"h-4 w-4\" />\n-                        Retry Loading\n-                      </Button>\n-                    </div>\n-                  </motion.div>\n-                ) : (\n-                  <Tabs defaultValue=\"content\" value={activeTab} onValueChange={handleTabChange}>\n-                    <TabsContent value=\"content\">\n-                      <ContentTab content={lessonContent.content} />\n-                    </TabsContent>\n-                    <TabsContent value=\"questions\">\n-                      <QuestionsTab \n-                        questions={lessonContent.content?.questions} \n-                        selectedIndex={selectedQuestionIndex}\n-                        onQuestionSelect={handleQuestionSelect}\n-                        onNextLesson={() => {\n-                          // Handle next lesson navigation\n-                          logger.info('Navigating to next lesson', {\n-                            source: 'LessonDialog',\n-                            context: { currentLessonId }\n-                          });\n-                        }}\n-                      />\n-                    </TabsContent>\n-                    <TabsContent value=\"exercises\">\n-                      <ExercisesTab exercises={lessonContent.content?.exercise_prompts} />\n-                    </TabsContent>\n-                  </Tabs>\n-                )}\n-              </div>\n-            </ScrollArea>\n-          </div>\n-\n-          {/* Right Section - Media Preview */}\n-          <div className=\"md:w-1/3 h-1/4 md:h-full border-l bg-muted/10\">\n-            <ScrollArea className=\"h-full\">\n-              <div className=\"p-6 space-y-4\">\n-                <Card className=\"border-primary/10\">\n-                  <CardHeader>\n-                    <CardTitle className=\"text-lg flex items-center gap-2\">\n-                      <ImageIcon className=\"h-5 w-5 text-primary\" />\n-                      Media Preview\n-                    </CardTitle>\n-                  </CardHeader>\n-                  <CardContent>\n-                    {lessonContent.content?.media ? (\n-                      <div className=\"space-y-4\">\n-                        {lessonContent.content.media.map((item: any, index: number) => (\n-                          <motion.div\n-                            key={index}\n-                            initial={{ opacity: 0, scale: 0.95 }}\n-                            animate={{ opacity: 1, scale: 1 }}\n-                            transition={{ delay: index * 0.1 }}\n-                          >\n-                            {item.type === 'image' && (\n-                              <img\n-                                src={item.url}\n-                                alt={`Media ${index + 1}`}\n-                                className=\"w-full rounded-lg shadow-md hover:shadow-lg transition-shadow\"\n-                              />\n-                            )}\n-                            {item.type === 'video' && (\n-                              <video\n-                                src={item.url}\n-                                controls\n-                                className=\"w-full rounded-lg shadow-md\"\n-                                preload=\"metadata\"\n-                              />\n-                            )}\n-                          </motion.div>\n-                        ))}\n-                      </div>\n-                    ) : (\n-                      <div className=\"flex flex-col items-center justify-center py-8 text-muted-foreground\">\n-                        <ImageIcon className=\"h-12 w-12 mb-4 opacity-50\" />\n-                        <p>No media available</p>\n-                      </div>\n-                    )}\n-                  </CardContent>\n-                </Card>\n-              </div>\n-            </ScrollArea>\n-          </div>\n-        </div>\n-\n-        {/* Audio Element */}\n-        <audio\n-          ref={audioRef}\n-          src={lessonContent.content?.audioUrl}\n-          onEnded={() => setIsPlaying(false)}\n-          onError={(e) => {\n-            logger.error('Audio playback error', {\n-              source: 'LessonDialog',\n-              context: { error: e }\n-            });\n-            setIsPlaying(false);\n-            toast({\n-              title: \"Audio Error\",\n-              description: \"Failed to play audio content. Please try again.\"\n-            });\n-          }}\n-        />\n-      </DialogContent>\n-    </Dialog>\n-  );\n-}\n-\n-// Content Tab Component\n-function ContentTab({ content }: { content: any }) {\n-  return (\n-    <motion.div\n-      initial={{ opacity: 0 }}\n-      animate={{ opacity: 1 }}\n-      exit={{ opacity: 0 }}\n-      transition={{ duration: 0.2 }}\n-      className=\"space-y-8\"\n-    >\n-      <Card className=\"prose prose-sm max-w-none dark:prose-invert border-primary/10 shadow-md\">\n-        <CardHeader>\n-          <CardTitle className=\"flex items-center gap-2\">\n-            <BookOpen className=\"h-5 w-5 text-primary\" />\n-            Lesson Content\n-          </CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <div \n-            className=\"mt-4\"\n-            dangerouslySetInnerHTML={{ \n-              __html: content?.content || 'No content available' \n-            }} \n-          />\n-        </CardContent>\n-      </Card>\n-    </motion.div>\n-  );\n-}\n-\n-// Questions Tab Component\n-function QuestionsTab({ \n-  questions, \n-  selectedIndex,\n-  onQuestionSelect,\n-  onNextLesson \n-}: { \n-  questions: Question[],\n-  selectedIndex: number | null,\n-  onQuestionSelect: (index: number) => void,\n-  onNextLesson: () => void\n-}) {\n-  const [expandedQuestions, setExpandedQuestions] = useState<Record<string, boolean>>({});\n-  const [questionProgress, setQuestionProgress] = useState<Record<string, number>>({});\n-\n-  const toggleQuestion = (questionId: string) => {\n-    setExpandedQuestions(prev => ({\n-      ...prev,\n-      [questionId]: !prev[questionId]\n-    }));\n-  };\n-\n-  const handleQuestionAnswer = (questionId: string, progress: number) => {\n-    setQuestionProgress(prev => ({\n-      ...prev,\n-      [questionId]: progress\n-    }));\n-  };\n-\n-  const totalProgress = questions?.length \n-    ? Object.values(questionProgress).reduce((acc, curr) => acc + curr, 0) / questions.length\n-    : 0;\n-\n-  if (!questions?.length) {\n-    return (\n-      <motion.div\n-        initial={{ opacity: 0 }}\n-        animate={{ opacity: 1 }}\n-        exit={{ opacity: 0 }}\n-        transition={{ duration: 0.2 }}\n-        className=\"flex flex-col items-center justify-center h-[50vh] text-center\"\n-      >\n-        <HelpCircle className=\"h-12 w-12 text-muted-foreground mb-4\" />\n-        <p className=\"text-muted-foreground\">No questions available for this lesson</p>\n-      </motion.div>\n-    );\n-  }\n-\n-  return (\n-    <motion.div\n-      initial={{ opacity: 0 }}\n-      animate={{ opacity: 1 }}\n-      exit={{ opacity: 0 }}\n-      transition={{ duration: 0.2 }}\n-      className=\"space-y-6\"\n-    >\n-      {/* Overall Progress */}\n-      <Card className=\"border-primary/10 bg-gradient-to-r from-primary/5 to-primary/10\">\n-        <CardContent className=\"p-4\">\n-          <div className=\"flex items-center justify-between mb-2\">\n-            <div className=\"flex items-center gap-2\">\n-              <Target className=\"h-5 w-5 text-primary\" />\n-              <span className=\"font-medium\">Overall Progress</span>\n-            </div>\n-            <Badge \n-              variant=\"outline\" \n-              className={cn(\n-                \"bg-primary/10\",\n-                totalProgress === 100 && \"bg-green-500/10 text-green-500\"\n-              )}\n-            >\n-              {Math.round(totalProgress)}% Complete\n             </Badge>\n-          </div>\n-          <Progress \n-            value={totalProgress} \n-            className=\"h-2 bg-primary/20\"\n-          />\n-          <div className=\"mt-2 text-sm text-muted-foreground\">\n-            {questions.length} Questions • {Object.values(questionProgress).filter(p => p === 100).length} Completed\n-          </div>\n-        </CardContent>\n-      </Card>\n-\n-      {/* Questions */}\n-      <div className=\"space-y-4\">\n-        {questions.map((question, index) => (\n-          <QuestionCard\n-            key={question.id}\n-            question={question}\n-            index={index}\n-            isExpanded={expandedQuestions[question.id] || false}\n-            onToggle={() => toggleQuestion(question.id)}\n-            onAnswer={(progress) => handleQuestionAnswer(question.id, progress)}\n-            progress={questionProgress[question.id] || 0}\n-          />\n-        ))}\n-      </div>\n-\n-      {/* Next Lesson Button */}\n-      {totalProgress === 100 && (\n-        <motion.div\n-          initial={{ opacity: 0, y: 20 }}\n-          animate={{ opacity: 1, y: 0 }}\n-          className=\"sticky bottom-4 flex justify-center\"\n-        >\n-          <Button\n-            onClick={onNextLesson}\n-            className=\"bg-gradient-to-r from-primary to-primary/90 hover:from-primary/90 hover:to-primary text-white px-8 py-6 rounded-full shadow-lg\"\n-          >\n-            <span className=\"flex items-center gap-2\">\n-              Continue to Next Lesson\n-              <ArrowRight className=\"h-4 w-4\" />\n-            </span>\n-          </Button>\n-        </motion.div>\n-      )}\n-    </motion.div>\n-  );\n-}\n-\n-// Exercises Tab Component\n-function ExercisesTab({ exercises }: { exercises: any[] }) {\n-  if (!exercises?.length) {\n-    return (\n-      <motion.div\n-        initial={{ opacity: 0 }}\n-        animate={{ opacity: 1 }}\n-        exit={{ opacity: 0 }}\n-        transition={{ duration: 0.2 }}\n-        className=\"flex flex-col items-center justify-center h-[50vh] text-center\"\n-      >\n-        <Award className=\"h-12 w-12 text-muted-foreground mb-4\" />\n-        <p className=\"text-muted-foreground\">No exercises available for this lesson</p>\n-      </motion.div>\n-    );\n-  }\n-\n-  return (\n-    <motion.div\n-      initial={{ opacity: 0 }}\n-      animate={{ opacity: 1 }}\n-      exit={{ opacity: 0 }}\n-      transition={{ duration: 0.2 }}\n-      className=\"space-y-6\"\n-    >\n-      {exercises.map((exercise, index) => (\n-        <motion.div\n-          key={exercise.id}\n-          initial={{ opacity: 0, y: 20 }}\n-          animate={{ opacity: 1, y: 0 }}\n-          transition={{ delay: index * 0.1 }}\n-        >\n-          <Card className=\"border-primary/10 shadow-md hover:shadow-lg transition-all duration-200\">\n-            <CardHeader>\n-              <div className=\"flex items-center gap-3\">\n-                <Badge variant=\"outline\" className=\"bg-primary/5\">\n-                  Exercise {index + 1}\n-                </Badge>\n-                <Badge variant=\"outline\" className=\"bg-primary/5\">\n-                  {exercise.questionType}\n-                </Badge>\n-                {exercise.difficulty && (\n-                  <Badge \n-                    variant=\"outline\" \n-                    className={cn(\n-                      \"capitalize\",\n-                      exercise.difficulty === 'beginner' && \"bg-green-500/10 text-green-500\",\n-                      exercise.difficulty === 'intermediate' && \"bg-yellow-500/10 text-yellow-500\",\n-                      exercise.difficulty === 'advanced' && \"bg-red-500/10 text-red-500\"\n-                    )}\n-                  >\n-                    {exercise.difficulty}\n-                  </Badge>\n-                )}\n-              </div>\n-              <CardTitle className=\"text-lg mt-2\">{exercise.text}</CardTitle>\n-              {exercise.content?.instructions && (\n-                <CardDescription className=\"mt-2 flex items-center gap-2\">\n-                  <Lightbulb className=\"h-4 w-4 text-primary\" />\n-                  {exercise.content.instructions}\n-                </CardDescription>\n-              )}\n-            </CardHeader>\n-            <CardContent>\n-              <div className=\"space-y-4\">\n-                {exercise.media && (\n-                  <div className=\"mt-4 rounded-lg overflow-hidden border\">\n-                    {exercise.type === 'image' && (\n-                      <img \n-                        src={exercise.media} \n-                        alt={exercise.text}\n-                        className=\"w-full h-auto object-cover\"\n-                      />\n-                    )}\n-                    {exercise.type === 'video' && (\n-                      <video \n-                        src={exercise.media}\n-                        controls\n-                        className=\"w-full\"\n-                        preload=\"metadata\"\n-                      />\n-                    )}\n-                  </div>\n-                )}\n-              </div>\n-            </CardContent>\n-          </Card>\n-        </motion.div>\n-      ))}\n-    </motion.div>\n-  );\n-}\n-\n-// Add this component before the QuestionsTab component\n-\n-function QuestionCard({ \n-  question,\n-  index,\n-  isExpanded,\n-  onToggle,\n-  onAnswer,\n-  progress\n-}: { \n-  question: Question;\n-  index: number;\n-  isExpanded: boolean;\n-  onToggle: () => void;\n-  onAnswer: (progress: number) => void;\n-  progress: number;\n-}) {\n-  const getQuestionIcon = (type: string) => {\n-    switch (type) {\n-      case 'speaking': return <Mic className=\"h-5 w-5\" />;\n-      case 'writing': return <Pencil className=\"h-5 w-5\" />;\n-      case 'reading': return <Book className=\"h-5 w-5\" />;\n-      case 'listening': return <Headphones className=\"h-5 w-5\" />;\n-      case 'multipleChoice': return <Layers className=\"h-5 w-5\" />;\n-      case 'grammar': return <Type className=\"h-5 w-5\" />;\n-      case 'vocabulary': return <Brain className=\"h-5 w-5\" />;\n-      case 'conversation': return <MessageCircle className=\"h-5 w-5\" />;\n-      case 'presentation': return <Presentation className=\"h-5 w-5\" />;\n-      default: return <Target className=\"h-5 w-5\" />;\n-    }\n-  };\n-\n-  const renderQuestionContent = () => {\n-    switch (question.type) {\n-      case 'multipleChoice':\n-        return (\n-          <RadioGroup\n-            onValueChange={(value) => onAnswer(100)}\n-            className=\"space-y-2\"\n-          >\n-            {question.metadata.options?.map((option, idx) => (\n-              <motion.div\n-                key={idx}\n-                initial={{ opacity: 0, x: -20 }}\n-                animate={{ opacity: 1, x: 0 }}\n-                transition={{ delay: idx * 0.1 }}\n-              >\n-                <Label\n-                  htmlFor={`option-${idx}`}\n-                  className={cn(\n-                    \"flex items-center space-x-3 space-y-0 rounded-lg border p-4\",\n-                    \"cursor-pointer transition-all hover:bg-accent\",\n-                    \"data-[state=checked]:border-primary\"\n-                  )}\n-                >\n-                  <RadioGroupItem value={option} id={`option-${idx}`} />\n-                  <div className=\"flex flex-1 items-center justify-between\">\n-                    <div className=\"space-y-1\">\n-                      <p className=\"text-sm font-medium leading-none\">{option}</p>\n-                    </div>\n-                  </div>\n-                </Label>\n-              </motion.div>\n-            ))}\n-          </RadioGroup>\n-        );\n-\n-      case 'writing':\n-        return (\n-          <div className=\"space-y-4\">\n-            <RichTextEditor\n-              value=\"\"\n-              onChange={() => onAnswer(50)}\n-              placeholder=\"Write your answer here...\"\n-              className=\"min-h-[200px]\"\n-            />\n-            {question.metadata.sampleAnswer && (\n-              <Collapsible>\n-                <CollapsibleTrigger asChild>\n-                  <Button variant=\"outline\" size=\"sm\" className=\"gap-2\">\n-                    <Lightbulb className=\"h-4 w-4\" />\n-                    View Sample Answer\n-                  </Button>\n-                </CollapsibleTrigger>\n-                <CollapsibleContent className=\"mt-4 space-y-2\">\n-                  <Card className=\"bg-primary/5\">\n-                    <CardContent className=\"p-4\">\n-                      <p className=\"text-sm\">{question.metadata.sampleAnswer}</p>\n-                    </CardContent>\n-                  </Card>\n-                </CollapsibleContent>\n-              </Collapsible>\n-            )}\n-          </div>\n-        );\n-\n-      case 'speaking':\n-        return (\n-          <div className=\"space-y-4\">\n-            <Card className=\"bg-primary/5\">\n-              <CardContent className=\"p-4 space-y-4\">\n-                <div className=\"flex items-center gap-2\">\n-                  <Mic className=\"h-5 w-5 text-primary\" />\n-                  <p className=\"font-medium\">Speaking Prompt</p>\n-                </div>\n-                <p className=\"text-sm\">{question.metadata.speakingPrompt}</p>\n-              </CardContent>\n-            </Card>\n-            <div className=\"flex justify-center\">\n-              <Button \n-                variant=\"outline\" \n-                size=\"lg\"\n-                className=\"gap-2 rounded-full hover:bg-primary/10\"\n-                onClick={() => onAnswer(75)}\n-              >\n-                <Mic className=\"h-5 w-5\" />\n-                Start Speaking\n-              </Button>\n-            </div>\n-          </div>\n-        );\n-\n-      case 'listening':\n-        return (\n-          <div className=\"space-y-4\">\n-            {question.metadata.audioContent && (\n-              <Card className=\"bg-primary/5\">\n-                <CardContent className=\"p-4\">\n-                  <audio\n-                    controls\n-                    src={question.metadata.audioContent}\n-                    className=\"w-full\"\n-                  />\n-                </CardContent>\n-              </Card>\n-            )}\n-            <div className=\"space-y-2\">\n-              <Label>Your Response</Label>\n-              <Textarea\n-                placeholder=\"Write what you heard...\"\n-                onChange={() => onAnswer(60)}\n-                className=\"min-h-[100px]\"\n-              />\n-            </div>\n-          </div>\n-        );\n-\n-      case 'reading':\n-        return (\n-          <div className=\"space-y-4\">\n-            <Card className=\"prose prose-sm max-w-none dark:prose-invert\">\n-              <CardContent className=\"p-4\">\n-                <div \n-                  dangerouslySetInnerHTML={{ \n-                    __html: question.metadata.passage || '' \n-                  }}\n-                />\n-              </CardContent>\n-            </Card>\n-            <div className=\"space-y-4\">\n-              {question.metadata.questions?.map((q, idx) => (\n-                <Card key={idx} className=\"border-primary/10\">\n-                  <CardContent className=\"p-4 space-y-2\">\n-                    <Label>{q}</Label>\n-                    <Textarea\n-                      placeholder=\"Write your answer...\"\n-                      onChange={() => onAnswer(Math.min(100, progress + 20))}\n-                      className=\"min-h-[80px]\"\n-                    />\n-                  </CardContent>\n-                </Card>\n-              ))}\n-            </div>\n-          </div>\n-        );\n-\n-      default:\n-        return (\n-          <div className=\"text-muted-foreground text-sm\">\n-            Question type not implemented yet.\n-          </div>\n-        );\n-    }\n-  };\n-\n-  return (\n-    <Card \n-      className={cn(\n-        \"border-l-4 transition-all duration-200\",\n-        isExpanded ? \"border-l-primary\" : \"border-l-primary/40\",\n-        \"hover:border-l-primary\"\n-      )}\n-    >\n-      <CardHeader \n-        className=\"cursor-pointer select-none\"\n-        onClick={onToggle}\n-      >\n-        <div className=\"flex items-center justify-between\">\n-          <div className=\"flex items-center gap-3\">\n-            <Badge \n-              variant=\"outline\" \n-              className={cn(\n-                \"bg-primary/5 px-2 py-1\",\n-                progress === 100 && \"bg-green-500/10 text-green-500\"\n-              )}\n-            >\n-              Question {index + 1}\n-            </Badge>\n-            <Badge \n-              variant=\"outline\" \n-              className=\"bg-primary/5 flex items-center gap-1\"\n-            >\n-              {getQuestionIcon(question.type)}\n-              <span className=\"capitalize\">{QUESTION_TYPES[question.type]?.label || question.type}</span>\n-            </Badge>\n             {question.metadata.difficulty && (\n               <Badge \n                 variant=\"outline\" \n                 className={cn(\n"
                },
                {
                    "date": 1739455291700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -721,18 +721,54 @@\n }) {\n   const getQuestionIcon = (type: string) => {\n     const safeType = type as QuestionType;\n     switch (safeType) {\n-      case 'speaking': return <Mic className=\"h-5 w-5\" />;\n-      case 'writing': return <Pencil className=\"h-5 w-5\" />;\n-      case 'reading': return <Book className=\"h-5 w-5\" />;\n-      case 'listening': return <Headphones className=\"h-5 w-5\" />;\n-      case 'multipleChoice': return <Layers className=\"h-5 w-5\" />;\n-      case 'grammar': return <Type className=\"h-5 w-5\" />;\n-      case 'vocabulary': return <Brain className=\"h-5 w-5\" />;\n-      case 'conversation': return <MessageCircle className=\"h-5 w-5\" />;\n-      case 'presentation': return <Presentation className=\"h-5 w-5\" />;\n-      default: return <Target className=\"h-5 w-5\" />;\n+      case 'speaking':\n+      case 'speakingAndWriting':\n+      case 'speakingAndListening':\n+      case 'speakingWithAPartner':\n+        return <Mic className=\"h-5 w-5\" />;\n+        \n+      case 'writing':\n+      case 'writingAndSpeaking':\n+        return <Pencil className=\"h-5 w-5\" />;\n+        \n+      case 'reading':\n+      case 'readingAndSpeaking':\n+        return <Book className=\"h-5 w-5\" />;\n+        \n+      case 'listening':\n+      case 'listenAndRepeat':\n+        return <Headphones className=\"h-5 w-5\" />;\n+        \n+      case 'multipleChoice':\n+      case 'fillInTheBlank':\n+      case 'matching':\n+        return <Layers className=\"h-5 w-5\" />;\n+        \n+      case 'grammarSpeaking':\n+      case 'sentenceTransformationAndCompletion':\n+        return <Type className=\"h-5 w-5\" />;\n+        \n+      case 'vocabularyAndSpeaking':\n+      case 'vocabularyAndWordlist':\n+        return <Brain className=\"h-5 w-5\" />;\n+        \n+      case 'presentation':\n+        return <Presentation className=\"h-5 w-5\" />;\n+        \n+      case 'storytelling':\n+        return <BookOpen className=\"h-5 w-5\" />;\n+        \n+      case 'lookAndSpeak':\n+      case 'watchAndSpeak':\n+        return <Video className=\"h-5 w-5\" />;\n+        \n+      case 'debate':\n+        return <MessageCircle className=\"h-5 w-5\" />;\n+        \n+      default:\n+        return <Target className=\"h-5 w-5\" />;\n     }\n   };\n \n   const renderQuestionContent = () => {\n"
                },
                {
                    "date": 1739455341199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -719,54 +719,77 @@\n   onAnswer: (progress: number) => void;\n   progress: number;\n }) {\n   const getQuestionIcon = (type: string) => {\n-    const safeType = type as QuestionType;\n-    switch (safeType) {\n+    if (!isQuestionType(type)) return <Target className=\"h-5 w-5\" />;\n+    \n+    switch (type) {\n+      // Speaking related\n       case 'speaking':\n       case 'speakingAndWriting':\n       case 'speakingAndListening':\n       case 'speakingWithAPartner':\n+      case 'speakingAndSpeaking':\n         return <Mic className=\"h-5 w-5\" />;\n         \n+      // Writing related\n       case 'writing':\n-      case 'writingAndSpeaking':\n         return <Pencil className=\"h-5 w-5\" />;\n         \n+      // Reading related\n       case 'reading':\n       case 'readingAndSpeaking':\n         return <Book className=\"h-5 w-5\" />;\n         \n+      // Listening related\n       case 'listening':\n       case 'listenAndRepeat':\n         return <Headphones className=\"h-5 w-5\" />;\n         \n+      // Multiple choice and matching\n       case 'multipleChoice':\n       case 'fillInTheBlank':\n       case 'matching':\n+      case 'trueOrFalse':\n         return <Layers className=\"h-5 w-5\" />;\n         \n+      // Grammar related\n       case 'grammarSpeaking':\n+      case 'sentenceFormation':\n+      case 'sentenceTransformation':\n+      case 'sentenceCompletion':\n       case 'sentenceTransformationAndCompletion':\n         return <Type className=\"h-5 w-5\" />;\n         \n+      // Vocabulary related\n       case 'vocabularyAndSpeaking':\n       case 'vocabularyAndWordlist':\n         return <Brain className=\"h-5 w-5\" />;\n         \n+      // Presentation\n       case 'presentation':\n         return <Presentation className=\"h-5 w-5\" />;\n         \n+      // Story related\n       case 'storytelling':\n         return <BookOpen className=\"h-5 w-5\" />;\n         \n+      // Visual related\n       case 'lookAndSpeak':\n       case 'watchAndSpeak':\n         return <Video className=\"h-5 w-5\" />;\n         \n+      // Interactive\n       case 'debate':\n+      case 'actionAndSpeaking':\n+      case 'objectAndSpeaking':\n+      case 'objectActionAndSpeaking':\n         return <MessageCircle className=\"h-5 w-5\" />;\n         \n+      // Idioms\n+      case 'idiomPractice':\n+        return <Sparkles className=\"h-5 w-5\" />;\n+        \n       default:\n         return <Target className=\"h-5 w-5\" />;\n     }\n   };\n"
                },
                {
                    "date": 1739474492612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n import { logger } from \"@/lib/logger\";\n import { useToast } from \"@/components/ui/use-toast\";\n import { QuestionTypeIcon } from \"@/components/ui/question-type-icons\";\n-import { QUESTION_TYPES } from \"@/app/content-management/constants\";\n+import { QUESTION_TYPES, isQuestionType } from \"@/app/content-management/constants\";\n import { RichTextEditor } from '@/components/editor/RichTextEditor';\n import { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\n import { Label } from \"@/components/ui/label\";\n import { Input } from \"@/components/ui/input\";\n"
                },
                {
                    "date": 1739474534303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -718,8 +718,20 @@\n   onToggle: () => void;\n   onAnswer: (progress: number) => void;\n   progress: number;\n }) {\n+  // Early return if question is invalid\n+  if (!question || typeof question !== 'object') {\n+    return (\n+      <Card className=\"border-destructive/50\">\n+        <CardHeader>\n+          <CardTitle className=\"text-destructive\">Invalid Question Data</CardTitle>\n+          <CardDescription>This question cannot be displayed due to invalid data.</CardDescription>\n+        </CardHeader>\n+      </Card>\n+    );\n+  }\n+\n   const getQuestionIcon = (type: string) => {\n     if (!isQuestionType(type)) return <Target className=\"h-5 w-5\" />;\n     \n     switch (type) {\n@@ -794,16 +806,32 @@\n     }\n   };\n \n   const renderQuestionContent = () => {\n+    // Early return if metadata is missing\n+    if (!question.metadata) {\n+      return (\n+        <div className=\"text-muted-foreground text-sm\">\n+          Question metadata is missing.\n+        </div>\n+      );\n+    }\n+\n     switch (question.type) {\n       case 'multipleChoice':\n+        if (!Array.isArray(question.metadata.options)) {\n+          return (\n+            <div className=\"text-muted-foreground text-sm\">\n+              Multiple choice options are missing.\n+            </div>\n+          );\n+        }\n         return (\n           <RadioGroup\n             onValueChange={(value) => onAnswer(100)}\n             className=\"space-y-2\"\n           >\n-            {question.metadata.options?.map((option, idx) => (\n+            {question.metadata.options.map((option, idx) => (\n               <motion.div\n                 key={idx}\n                 initial={{ opacity: 0, x: -20 }}\n                 animate={{ opacity: 1, x: 0 }}\n@@ -866,9 +894,9 @@\n                 <div className=\"flex items-center gap-2\">\n                   <Mic className=\"h-5 w-5 text-primary\" />\n                   <p className=\"font-medium\">Speaking Prompt</p>\n                 </div>\n-                <p className=\"text-sm\">{question.metadata.speakingPrompt}</p>\n+                <p className=\"text-sm\">{question.metadata.speakingPrompt || 'No speaking prompt available.'}</p>\n               </CardContent>\n             </Card>\n             <div className=\"flex justify-center\">\n               <Button \n@@ -886,9 +914,9 @@\n \n       case 'listening':\n         return (\n           <div className=\"space-y-4\">\n-            {question.metadata.audioContent && (\n+            {question.metadata.audioContent ? (\n               <Card className=\"bg-primary/5\">\n                 <CardContent className=\"p-4\">\n                   <audio\n                     controls\n@@ -896,8 +924,12 @@\n                     className=\"w-full\"\n                   />\n                 </CardContent>\n               </Card>\n+            ) : (\n+              <div className=\"text-muted-foreground text-sm\">\n+                No audio content available.\n+              </div>\n             )}\n             <div className=\"space-y-2\">\n               <Label>Your Response</Label>\n               <Textarea\n@@ -911,19 +943,25 @@\n \n       case 'reading':\n         return (\n           <div className=\"space-y-4\">\n-            <Card className=\"prose prose-sm max-w-none dark:prose-invert\">\n-              <CardContent className=\"p-4\">\n-                <div \n-                  dangerouslySetInnerHTML={{ \n-                    __html: question.metadata.passage || '' \n-                  }}\n-                />\n-              </CardContent>\n-            </Card>\n+            {question.metadata.passage ? (\n+              <Card className=\"prose prose-sm max-w-none dark:prose-invert\">\n+                <CardContent className=\"p-4\">\n+                  <div \n+                    dangerouslySetInnerHTML={{ \n+                      __html: question.metadata.passage\n+                    }}\n+                  />\n+                </CardContent>\n+              </Card>\n+            ) : (\n+              <div className=\"text-muted-foreground text-sm\">\n+                No reading passage available.\n+              </div>\n+            )}\n             <div className=\"space-y-4\">\n-              {question.metadata.questions?.map((q, idx) => (\n+              {Array.isArray(question.metadata.questions) && question.metadata.questions.map((q, idx) => (\n                 <Card key={idx} className=\"border-primary/10\">\n                   <CardContent className=\"p-4 space-y-2\">\n                     <Label>{q}</Label>\n                     <Textarea\n@@ -940,9 +978,9 @@\n \n       default:\n         return (\n           <div className=\"text-muted-foreground text-sm\">\n-            Question type not implemented yet.\n+            This question type ({question.type}) is not implemented yet.\n           </div>\n         );\n     }\n   };\n@@ -975,12 +1013,12 @@\n               className=\"bg-primary/5 flex items-center gap-1\"\n             >\n               {getQuestionIcon(question.type)}\n               <span className=\"capitalize\">\n-                {QUESTION_TYPES[question.type as QuestionType]?.label || question.type}\n+                {isQuestionType(question.type) ? QUESTION_TYPES[question.type as QuestionType]?.label : question.type}\n               </span>\n             </Badge>\n-            {question.metadata.difficulty && (\n+            {question.metadata?.difficulty && (\n               <Badge \n                 variant=\"outline\" \n                 className={cn(\n                   \"capitalize\",\n@@ -1001,9 +1039,9 @@\n           </motion.div>\n         </div>\n \n         <div className=\"mt-2 space-y-2\">\n-          <CardTitle className=\"text-lg\">{question.title}</CardTitle>\n+          <CardTitle className=\"text-lg\">{question.title || 'Untitled Question'}</CardTitle>\n           <Progress \n             value={progress} \n             className=\"h-1\"\n           />\n@@ -1029,9 +1067,9 @@\n             transition={{ duration: 0.2 }}\n           >\n             <CardContent className=\"pt-0\">\n               <div className=\"space-y-4\">\n-                <p className=\"text-muted-foreground\">{question.content}</p>\n+                <p className=\"text-muted-foreground\">{question.content || 'No content available.'}</p>\n                 {renderQuestionContent()}\n               </div>\n             </CardContent>\n           </motion.div>\n"
                },
                {
                    "date": 1739476344000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,8 +98,11 @@\n   const [currentProgress, setCurrentProgress] = useState(0);\n   const [audioProgress, setAudioProgress] = useState(0);\n   const [activeTab, setActiveTab] = useState(\"content\");\n   const [selectedQuestionIndex, setSelectedQuestionIndex] = useState<number | null>(null);\n+  const [audioQueue, setAudioQueue] = useState<string[]>([]);\n+  const [currentAudioIndex, setCurrentAudioIndex] = useState(0);\n+  const [isAudioReady, setIsAudioReady] = useState(false);\n \n   // Audio event handlers\n   const handleTimeUpdate = () => {\n     if (audioRef.current) {\n@@ -110,36 +113,44 @@\n       logger.info('Audio progress updated', {\n         source: 'LessonDialog',\n         context: { \n           progress: Math.round(progress),\n+          currentAudioIndex,\n+          totalAudios: audioQueue.length,\n           lessonId: currentLessonId\n         }\n       });\n     }\n   };\n \n   const handleAudioEnded = () => {\n-    setIsPlaying(false);\n-    setCurrentProgress(100);\n-    \n-    toast({\n-      title: \"🎉 Lesson Complete!\",\n-      description: \"You've finished listening to this lesson.\",\n-      action: (\n-        <Button\n-          variant=\"outline\"\n-          size=\"sm\"\n-          onClick={() => setActiveTab(\"questions\")}\n-        >\n-          Start Questions\n-        </Button>\n-      )\n-    });\n-\n-    logger.info('Audio playback completed', {\n-      source: 'LessonDialog',\n-      context: { lessonId: currentLessonId }\n-    });\n+    if (currentAudioIndex < audioQueue.length - 1) {\n+      // Play next audio in queue\n+      setCurrentAudioIndex(prev => prev + 1);\n+      setIsPlaying(true);\n+      if (audioRef.current) {\n+        audioRef.current.src = audioQueue[currentAudioIndex + 1];\n+        audioRef.current.play();\n+      }\n+    } else {\n+      // All audio completed\n+      setIsPlaying(false);\n+      setCurrentProgress(100);\n+      \n+      toast({\n+        title: \"�� Lesson Complete!\",\n+        description: \"You've finished listening to this lesson.\",\n+        action: (\n+          <Button\n+            variant=\"outline\"\n+            size=\"sm\"\n+            onClick={() => setActiveTab(\"questions\")}\n+          >\n+            Start Questions\n+          </Button>\n+        )\n+      });\n+    }\n   };\n \n   // Function to handle tab change with logging\n   const handleTabChange = (value: string) => {\n@@ -204,8 +215,20 @@\n       };\n     }\n   }, []);\n \n+  // Add this effect to handle audio queue\n+  useEffect(() => {\n+    if (lessonContent.content) {\n+      // Build audio queue from content\n+      const queue = [\n+        lessonContent.content.audioUrl, // Main content audio\n+        ...(lessonContent.content.questions?.map(q => q.metadata?.audioContent) || []).filter(Boolean)\n+      ];\n+      setAudioQueue(queue);\n+    }\n+  }, [lessonContent.content]);\n+\n   // Function to handle question selection\n   const handleQuestionSelect = (index: number) => {\n     setSelectedQuestionIndex(index);\n     logger.info('Question selected', {\n@@ -438,14 +461,20 @@\n \n         {/* Audio Element */}\n         <audio\n           ref={audioRef}\n-          src={lessonContent.content?.audioUrl}\n-          onEnded={() => setIsPlaying(false)}\n+          src={audioQueue[currentAudioIndex]}\n+          onEnded={handleAudioEnded}\n+          onTimeUpdate={handleTimeUpdate}\n+          onCanPlay={() => setIsAudioReady(true)}\n           onError={(e) => {\n             logger.error('Audio playback error', {\n               source: 'LessonDialog',\n-              context: { error: e }\n+              context: { \n+                error: e,\n+                currentAudioIndex,\n+                audioUrl: audioQueue[currentAudioIndex]\n+              }\n             });\n             setIsPlaying(false);\n             toast({\n               title: \"Audio Error\",\n"
                },
                {
                    "date": 1739476360779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -215,15 +215,15 @@\n       };\n     }\n   }, []);\n \n-  // Add this effect to handle audio queue\n+  // Update the audio queue effect with proper typing\n   useEffect(() => {\n     if (lessonContent.content) {\n       // Build audio queue from content\n       const queue = [\n         lessonContent.content.audioUrl, // Main content audio\n-        ...(lessonContent.content.questions?.map(q => q.metadata?.audioContent) || []).filter(Boolean)\n+        ...(lessonContent.content.questions?.map((q: Question) => q.metadata?.audioContent) || []).filter(Boolean)\n       ];\n       setAudioQueue(queue);\n     }\n   }, [lessonContent.content]);\n"
                },
                {
                    "date": 1739476403680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1013,97 +1013,144 @@\n         );\n     }\n   };\n \n+  const getQuestionColor = (type: string): string => {\n+    switch (type) {\n+      case 'speaking':\n+      case 'speakingAndWriting':\n+      case 'speakingAndListening':\n+        return 'from-blue-500/10 to-indigo-500/10 hover:from-blue-500/20 hover:to-indigo-500/20';\n+      case 'writing':\n+        return 'from-emerald-500/10 to-green-500/10 hover:from-emerald-500/20 hover:to-green-500/20';\n+      case 'reading':\n+        return 'from-amber-500/10 to-orange-500/10 hover:from-amber-500/20 hover:to-orange-500/20';\n+      case 'listening':\n+        return 'from-purple-500/10 to-pink-500/10 hover:from-purple-500/20 hover:to-pink-500/20';\n+      case 'multipleChoice':\n+        return 'from-cyan-500/10 to-blue-500/10 hover:from-cyan-500/20 hover:to-blue-500/20';\n+      case 'grammar':\n+        return 'from-teal-500/10 to-emerald-500/10 hover:from-teal-500/20 hover:to-emerald-500/20';\n+      default:\n+        return 'from-gray-500/10 to-slate-500/10 hover:from-gray-500/20 hover:to-slate-500/20';\n+    }\n+  };\n+\n   return (\n-    <Card \n-      className={cn(\n-        \"border-l-4 transition-all duration-200\",\n-        isExpanded ? \"border-l-primary\" : \"border-l-primary/40\",\n-        \"hover:border-l-primary\"\n-      )}\n+    <motion.div\n+      initial={{ opacity: 0, y: 20 }}\n+      animate={{ opacity: 1, y: 0 }}\n+      transition={{ duration: 0.3 }}\n     >\n-      <CardHeader \n-        className=\"cursor-pointer select-none\"\n-        onClick={onToggle}\n+      <Card \n+        className={cn(\n+          \"overflow-hidden transition-all duration-300\",\n+          \"border border-primary/10 shadow-lg\",\n+          \"bg-gradient-to-r\",\n+          getQuestionColor(question.type),\n+          isExpanded && \"ring-2 ring-primary/20 ring-offset-2\"\n+        )}\n       >\n-        <div className=\"flex items-center justify-between\">\n-          <div className=\"flex items-center gap-3\">\n-            <Badge \n-              variant=\"outline\" \n-              className={cn(\n-                \"bg-primary/5 px-2 py-1\",\n-                progress === 100 && \"bg-green-500/10 text-green-500\"\n-              )}\n-            >\n-              Question {index + 1}\n-            </Badge>\n-            <Badge \n-              variant=\"outline\" \n-              className=\"bg-primary/5 flex items-center gap-1\"\n-            >\n-              {getQuestionIcon(question.type)}\n-              <span className=\"capitalize\">\n-                {isQuestionType(question.type) ? QUESTION_TYPES[question.type as QuestionType]?.label : question.type}\n-              </span>\n-            </Badge>\n-            {question.metadata?.difficulty && (\n+        <CardHeader \n+          className=\"cursor-pointer select-none p-6\"\n+          onClick={onToggle}\n+        >\n+          <div className=\"flex items-center justify-between\">\n+            <div className=\"flex items-center gap-3 flex-wrap\">\n               <Badge \n                 variant=\"outline\" \n                 className={cn(\n-                  \"capitalize\",\n-                  question.metadata.difficulty === 'beginner' && \"bg-green-500/10 text-green-500\",\n-                  question.metadata.difficulty === 'intermediate' && \"bg-yellow-500/10 text-yellow-500\",\n-                  question.metadata.difficulty === 'advanced' && \"bg-red-500/10 text-red-500\"\n+                  \"px-3 py-1 text-sm font-medium rounded-full\",\n+                  \"bg-background/50 backdrop-blur-sm\",\n+                  progress === 100 && \"bg-green-500/10 text-green-500 border-green-500/20\"\n                 )}\n               >\n-                {question.metadata.difficulty}\n+                Question {index + 1}\n               </Badge>\n-            )}\n+              <Badge \n+                variant=\"outline\" \n+                className={cn(\n+                  \"flex items-center gap-2 px-3 py-1\",\n+                  \"bg-background/50 backdrop-blur-sm\"\n+                )}\n+              >\n+                {getQuestionIcon(question.type)}\n+                <span className=\"capitalize\">\n+                  {isQuestionType(question.type) ? QUESTION_TYPES[question.type as QuestionType]?.label : question.type}\n+                </span>\n+              </Badge>\n+              {question.metadata?.difficulty && (\n+                <Badge \n+                  variant=\"outline\" \n+                  className={cn(\n+                    \"capitalize px-3 py-1\",\n+                    \"bg-background/50 backdrop-blur-sm\",\n+                    question.metadata.difficulty === 'beginner' && \"text-green-500 border-green-500/20\",\n+                    question.metadata.difficulty === 'intermediate' && \"text-yellow-500 border-yellow-500/20\",\n+                    question.metadata.difficulty === 'advanced' && \"text-red-500 border-red-500/20\"\n+                  )}\n+                >\n+                  {question.metadata.difficulty}\n+                </Badge>\n+              )}\n+            </div>\n+            <motion.div\n+              animate={{ rotate: isExpanded ? 90 : 0 }}\n+              transition={{ duration: 0.2 }}\n+              className=\"bg-background/50 backdrop-blur-sm p-2 rounded-full\"\n+            >\n+              <ChevronRight className=\"h-5 w-5 text-primary\" />\n+            </motion.div>\n           </div>\n-          <motion.div\n-            animate={{ rotate: isExpanded ? 90 : 0 }}\n-            transition={{ duration: 0.2 }}\n-          >\n-            <ChevronRight className=\"h-5 w-5 text-primary\" />\n-          </motion.div>\n-        </div>\n \n-        <div className=\"mt-2 space-y-2\">\n-          <CardTitle className=\"text-lg\">{question.title || 'Untitled Question'}</CardTitle>\n-          <Progress \n-            value={progress} \n-            className=\"h-1\"\n-          />\n-          <p className=\"text-sm text-muted-foreground\">\n-            {progress === 100 ? (\n-              <span className=\"flex items-center gap-1 text-green-500\">\n-                <CheckCircle2 className=\"h-4 w-4\" />\n-                Completed\n-              </span>\n-            ) : (\n-              `${Math.round(progress)}% complete`\n-            )}\n-          </p>\n-        </div>\n-      </CardHeader>\n+          <div className=\"mt-4 space-y-3\">\n+            <CardTitle className=\"text-xl\">{question.title || 'Untitled Question'}</CardTitle>\n+            <div className=\"relative\">\n+              <Progress \n+                value={progress} \n+                className={cn(\n+                  \"h-2 rounded-full bg-background/50\",\n+                  progress === 100 && \"bg-green-500/20\"\n+                )}\n+              />\n+              <p className=\"text-sm text-muted-foreground mt-2 flex items-center gap-2\">\n+                {progress === 100 ? (\n+                  <span className=\"flex items-center gap-1 text-green-500\">\n+                    <CheckCircle2 className=\"h-4 w-4\" />\n+                    Completed\n+                  </span>\n+                ) : (\n+                  <>\n+                    <Clock className=\"h-4 w-4\" />\n+                    {`${Math.round(progress)}% complete`}\n+                  </>\n+                )}\n+              </p>\n+            </div>\n+          </div>\n+        </CardHeader>\n \n-      <AnimatePresence>\n-        {isExpanded && (\n-          <motion.div\n-            initial={{ height: 0, opacity: 0 }}\n-            animate={{ height: \"auto\", opacity: 1 }}\n-            exit={{ height: 0, opacity: 0 }}\n-            transition={{ duration: 0.2 }}\n-          >\n-            <CardContent className=\"pt-0\">\n-              <div className=\"space-y-4\">\n-                <p className=\"text-muted-foreground\">{question.content || 'No content available.'}</p>\n-                {renderQuestionContent()}\n-              </div>\n-            </CardContent>\n-          </motion.div>\n-        )}\n-      </AnimatePresence>\n-    </Card>\n+        <AnimatePresence>\n+          {isExpanded && (\n+            <motion.div\n+              initial={{ height: 0, opacity: 0 }}\n+              animate={{ height: \"auto\", opacity: 1 }}\n+              exit={{ height: 0, opacity: 0 }}\n+              transition={{ duration: 0.3 }}\n+            >\n+              <CardContent className=\"p-6 pt-0\">\n+                <div className=\"space-y-6\">\n+                  <div className=\"bg-background/50 backdrop-blur-sm rounded-lg p-4\">\n+                    <p className=\"text-muted-foreground\">{question.content || 'No content available.'}</p>\n+                  </div>\n+                  <div className=\"bg-background/80 backdrop-blur-sm rounded-lg p-4\">\n+                    {renderQuestionContent()}\n+                  </div>\n+                </div>\n+              </CardContent>\n+            </motion.div>\n+          )}\n+        </AnimatePresence>\n+      </Card>\n+    </motion.div>\n   );\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739476463285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -838,18 +838,21 @@\n   const renderQuestionContent = () => {\n     // Early return if metadata is missing\n     if (!question.metadata) {\n       return (\n-        <div className=\"text-muted-foreground text-sm\">\n-          Question metadata is missing.\n+        <div className=\"flex flex-col items-center justify-center p-8 text-muted-foreground\">\n+          <HelpCircle className=\"h-12 w-12 mb-4 opacity-50\" />\n+          <p>Question metadata is missing.</p>\n         </div>\n       );\n     }\n \n     switch (question.type) {\n       case 'multipleChoice':\n         if (!Array.isArray(question.metadata.options)) {\n           return (\n+            <div className=\"flex flex-col items-center justify-center p-8 text-muted-foreground\">\n+              <Layers className=\"h-12 w-12 mb-4 opacity-50\" />\n             <div className=\"text-muted-foreground text-sm\">\n               Multiple choice options are missing.\n             </div>\n           );\n"
                },
                {
                    "date": 1739476489785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -851,17 +851,16 @@\n         if (!Array.isArray(question.metadata.options)) {\n           return (\n             <div className=\"flex flex-col items-center justify-center p-8 text-muted-foreground\">\n               <Layers className=\"h-12 w-12 mb-4 opacity-50\" />\n-            <div className=\"text-muted-foreground text-sm\">\n-              Multiple choice options are missing.\n+              <p>Multiple choice options are missing.</p>\n             </div>\n           );\n         }\n         return (\n           <RadioGroup\n             onValueChange={(value) => onAnswer(100)}\n-            className=\"space-y-2\"\n+            className=\"space-y-3\"\n           >\n             {question.metadata.options.map((option, idx) => (\n               <motion.div\n                 key={idx}\n@@ -871,136 +870,167 @@\n               >\n                 <Label\n                   htmlFor={`option-${idx}`}\n                   className={cn(\n-                    \"flex items-center space-x-3 space-y-0 rounded-lg border p-4\",\n-                    \"cursor-pointer transition-all hover:bg-accent\",\n-                    \"data-[state=checked]:border-primary\"\n+                    \"flex items-center gap-4 p-4 rounded-lg\",\n+                    \"border border-primary/10 bg-card\",\n+                    \"cursor-pointer transition-all\",\n+                    \"hover:bg-primary/5 hover:border-primary/20\",\n+                    \"data-[state=checked]:border-primary data-[state=checked]:bg-primary/10\"\n                   )}\n                 >\n-                  <RadioGroupItem value={option} id={`option-${idx}`} />\n-                  <div className=\"flex flex-1 items-center justify-between\">\n-                    <div className=\"space-y-1\">\n-                      <p className=\"text-sm font-medium leading-none\">{option}</p>\n-                    </div>\n+                  <div className=\"flex items-center justify-center w-8 h-8 rounded-full bg-primary/10 text-primary font-medium\">\n+                    {String.fromCharCode(65 + idx)}\n                   </div>\n+                  <RadioGroupItem value={option} id={`option-${idx}`} className=\"sr-only\" />\n+                  <span className=\"flex-1 text-sm\">{option}</span>\n                 </Label>\n               </motion.div>\n             ))}\n           </RadioGroup>\n         );\n \n       case 'writing':\n         return (\n-          <div className=\"space-y-4\">\n-            <RichTextEditor\n-              value=\"\"\n-              onChange={() => onAnswer(50)}\n-              placeholder=\"Write your answer here...\"\n-              className=\"min-h-[200px]\"\n-            />\n+          <div className=\"space-y-6\">\n+            <div className=\"bg-card rounded-lg border border-primary/10 p-4\">\n+              <RichTextEditor\n+                value=\"\"\n+                onChange={() => onAnswer(50)}\n+                placeholder=\"Write your answer here...\"\n+                className=\"min-h-[200px] prose prose-sm max-w-none\"\n+              />\n+            </div>\n             {question.metadata.sampleAnswer && (\n               <Collapsible>\n                 <CollapsibleTrigger asChild>\n-                  <Button variant=\"outline\" size=\"sm\" className=\"gap-2\">\n+                  <Button variant=\"outline\" size=\"sm\" className=\"gap-2 w-full justify-center\">\n                     <Lightbulb className=\"h-4 w-4\" />\n                     View Sample Answer\n                   </Button>\n                 </CollapsibleTrigger>\n-                <CollapsibleContent className=\"mt-4 space-y-2\">\n-                  <Card className=\"bg-primary/5\">\n-                    <CardContent className=\"p-4\">\n-                      <p className=\"text-sm\">{question.metadata.sampleAnswer}</p>\n-                    </CardContent>\n-                  </Card>\n+                <CollapsibleContent className=\"mt-4\">\n+                  <motion.div\n+                    initial={{ opacity: 0, y: -10 }}\n+                    animate={{ opacity: 1, y: 0 }}\n+                  >\n+                    <Card className=\"bg-primary/5 border-primary/10\">\n+                      <CardContent className=\"p-4\">\n+                        <div className=\"flex items-center gap-2 mb-2 text-primary\">\n+                          <Star className=\"h-4 w-4\" />\n+                          <span className=\"text-sm font-medium\">Sample Answer</span>\n+                        </div>\n+                        <p className=\"text-sm\">{question.metadata.sampleAnswer}</p>\n+                      </CardContent>\n+                    </Card>\n+                  </motion.div>\n                 </CollapsibleContent>\n               </Collapsible>\n             )}\n           </div>\n         );\n \n       case 'speaking':\n         return (\n-          <div className=\"space-y-4\">\n-            <Card className=\"bg-primary/5\">\n+          <div className=\"space-y-6\">\n+            <Card className=\"bg-primary/5 border-primary/10\">\n               <CardContent className=\"p-4 space-y-4\">\n-                <div className=\"flex items-center gap-2\">\n-                  <Mic className=\"h-5 w-5 text-primary\" />\n+                <div className=\"flex items-center gap-2 text-primary\">\n+                  <Mic className=\"h-5 w-5\" />\n                   <p className=\"font-medium\">Speaking Prompt</p>\n                 </div>\n                 <p className=\"text-sm\">{question.metadata.speakingPrompt || 'No speaking prompt available.'}</p>\n               </CardContent>\n             </Card>\n-            <div className=\"flex justify-center\">\n+            <div className=\"flex flex-col items-center gap-4\">\n               <Button \n                 variant=\"outline\" \n                 size=\"lg\"\n-                className=\"gap-2 rounded-full hover:bg-primary/10\"\n+                className=\"gap-3 rounded-full hover:bg-primary/10 px-8\"\n                 onClick={() => onAnswer(75)}\n               >\n                 <Mic className=\"h-5 w-5\" />\n                 Start Speaking\n               </Button>\n+              <p className=\"text-xs text-muted-foreground\">\n+                Click to start recording your answer\n+              </p>\n             </div>\n           </div>\n         );\n \n       case 'listening':\n         return (\n-          <div className=\"space-y-4\">\n+          <div className=\"space-y-6\">\n             {question.metadata.audioContent ? (\n-              <Card className=\"bg-primary/5\">\n-                <CardContent className=\"p-4\">\n+              <Card className=\"bg-primary/5 border-primary/10\">\n+                <CardContent className=\"p-4 space-y-4\">\n+                  <div className=\"flex items-center gap-2 text-primary\">\n+                    <Headphones className=\"h-5 w-5\" />\n+                    <p className=\"font-medium\">Audio Content</p>\n+                  </div>\n                   <audio\n                     controls\n                     src={question.metadata.audioContent}\n                     className=\"w-full\"\n                   />\n                 </CardContent>\n               </Card>\n             ) : (\n-              <div className=\"text-muted-foreground text-sm\">\n-                No audio content available.\n+              <div className=\"flex flex-col items-center justify-center p-8 text-muted-foreground\">\n+                <Headphones className=\"h-12 w-12 mb-4 opacity-50\" />\n+                <p>No audio content available.</p>\n               </div>\n             )}\n-            <div className=\"space-y-2\">\n-              <Label>Your Response</Label>\n+            <div className=\"space-y-3\">\n+              <Label className=\"text-sm font-medium\">Your Response</Label>\n               <Textarea\n                 placeholder=\"Write what you heard...\"\n                 onChange={() => onAnswer(60)}\n-                className=\"min-h-[100px]\"\n+                className=\"min-h-[100px] bg-card border-primary/10\"\n               />\n             </div>\n           </div>\n         );\n \n       case 'reading':\n         return (\n-          <div className=\"space-y-4\">\n+          <div className=\"space-y-6\">\n             {question.metadata.passage ? (\n-              <Card className=\"prose prose-sm max-w-none dark:prose-invert\">\n+              <Card className=\"prose prose-sm max-w-none dark:prose-invert border-primary/10\">\n                 <CardContent className=\"p-4\">\n+                  <div className=\"flex items-center gap-2 text-primary mb-4\">\n+                    <Book className=\"h-5 w-5\" />\n+                    <p className=\"font-medium\">Reading Passage</p>\n+                  </div>\n                   <div \n+                    className=\"bg-card rounded-lg p-4\"\n                     dangerouslySetInnerHTML={{ \n                       __html: question.metadata.passage\n                     }}\n                   />\n                 </CardContent>\n               </Card>\n             ) : (\n-              <div className=\"text-muted-foreground text-sm\">\n-                No reading passage available.\n+              <div className=\"flex flex-col items-center justify-center p-8 text-muted-foreground\">\n+                <Book className=\"h-12 w-12 mb-4 opacity-50\" />\n+                <p>No reading passage available.</p>\n               </div>\n             )}\n             <div className=\"space-y-4\">\n               {Array.isArray(question.metadata.questions) && question.metadata.questions.map((q, idx) => (\n-                <Card key={idx} className=\"border-primary/10\">\n-                  <CardContent className=\"p-4 space-y-2\">\n-                    <Label>{q}</Label>\n+                <Card key={idx} className=\"border-primary/10 bg-card\">\n+                  <CardContent className=\"p-4 space-y-3\">\n+                    <Label className=\"flex items-center gap-2\">\n+                      <div className=\"flex items-center justify-center w-6 h-6 rounded-full bg-primary/10 text-primary text-sm\">\n+                        {idx + 1}\n+                      </div>\n+                      <span>{q}</span>\n+                    </Label>\n                     <Textarea\n                       placeholder=\"Write your answer...\"\n                       onChange={() => onAnswer(Math.min(100, progress + 20))}\n-                      className=\"min-h-[80px]\"\n+                      className=\"min-h-[80px] bg-background/50\"\n                     />\n                   </CardContent>\n                 </Card>\n               ))}\n@@ -1009,10 +1039,11 @@\n         );\n \n       default:\n         return (\n-          <div className=\"text-muted-foreground text-sm\">\n-            This question type ({question.type}) is not implemented yet.\n+          <div className=\"flex flex-col items-center justify-center p-8 text-muted-foreground\">\n+            <Target className=\"h-12 w-12 mb-4 opacity-50\" />\n+            <p>This question type ({question.type}) is not implemented yet.</p>\n           </div>\n         );\n     }\n   };\n"
                },
                {
                    "date": 1739476865521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,9 @@\n import { Label } from \"@/components/ui/label\";\n import { Input } from \"@/components/ui/input\";\n import { Textarea } from \"@/components/ui/textarea\";\n import { Collapsible, CollapsibleTrigger, CollapsibleContent } from \"@/components/ui/collapsible\";\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n \n // Question Types from question-form.tsx\n interface QuestionMetadata {\n   prompt?: string;\n@@ -845,10 +846,10 @@\n         </div>\n       );\n     }\n \n-    switch (question.type) {\n-      case 'multipleChoice':\n+    switch (question.type.toLowerCase()) {\n+      case 'multiplechoice':\n         if (!Array.isArray(question.metadata.options)) {\n           return (\n             <div className=\"flex flex-col items-center justify-center p-8 text-muted-foreground\">\n               <Layers className=\"h-12 w-12 mb-4 opacity-50\" />\n@@ -888,8 +889,9 @@\n             ))}\n           </RadioGroup>\n         );\n \n+      case 'fill_blanks':\n       case 'writing':\n         return (\n           <div className=\"space-y-6\">\n             <div className=\"bg-card rounded-lg border border-primary/10 p-4\">\n"
                },
                {
                    "date": 1739476874682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -890,9 +890,69 @@\n           </RadioGroup>\n         );\n \n       case 'fill_blanks':\n+      case 'fillintheblank':\n+        return (\n+          <div className=\"space-y-6\">\n+            <Card className=\"bg-primary/5 border-primary/10\">\n+              <CardContent className=\"p-4\">\n+                <div className=\"flex items-center gap-2 mb-4 text-primary\">\n+                  <Type className=\"h-5 w-5\" />\n+                  <p className=\"font-medium\">Fill in the Blanks</p>\n+                </div>\n+                <p className=\"text-sm mb-4\">{question.metadata.sentence || question.content}</p>\n+                {question.metadata.blanks?.map((blank: string, idx: number) => (\n+                  <div key={idx} className=\"space-y-2 mb-4\">\n+                    <Label className=\"text-sm\">Blank {idx + 1}</Label>\n+                    <Input\n+                      placeholder=\"Type your answer...\"\n+                      onChange={() => onAnswer(Math.min(100, progress + (100 / (question.metadata.blanks?.length || 1))))}\n+                      className=\"bg-card border-primary/10\"\n+                    />\n+                  </div>\n+                ))}\n+              </CardContent>\n+            </Card>\n+          </div>\n+        );\n+\n+      case 'matching':\n+        return (\n+          <div className=\"space-y-6\">\n+            <Card className=\"bg-primary/5 border-primary/10\">\n+              <CardContent className=\"p-4\">\n+                <div className=\"flex items-center gap-2 mb-4 text-primary\">\n+                  <Layers className=\"h-5 w-5\" />\n+                  <p className=\"font-medium\">Match the Following</p>\n+                </div>\n+                {question.metadata.items?.map((item: string, idx: number) => (\n+                  <div key={idx} className=\"flex items-center gap-4 mb-4\">\n+                    <div className=\"flex-1 p-3 bg-card rounded-lg border border-primary/10\">\n+                      {item}\n+                    </div>\n+                    <ChevronRight className=\"h-4 w-4 text-muted-foreground\" />\n+                    <Select>\n+                      <SelectTrigger className=\"flex-1\">\n+                        <SelectValue placeholder=\"Select match...\" />\n+                      </SelectTrigger>\n+                      <SelectContent>\n+                        {question.metadata.descriptions?.map((desc: string, descIdx: number) => (\n+                          <SelectItem key={descIdx} value={desc}>\n+                            {desc}\n+                          </SelectItem>\n+                        ))}\n+                      </SelectContent>\n+                    </Select>\n+                  </div>\n+                ))}\n+              </CardContent>\n+            </Card>\n+          </div>\n+        );\n+\n       case 'writing':\n+      case 'writingandspeaking':\n         return (\n           <div className=\"space-y-6\">\n             <div className=\"bg-card rounded-lg border border-primary/10 p-4\">\n               <RichTextEditor\n@@ -931,8 +991,11 @@\n           </div>\n         );\n \n       case 'speaking':\n+      case 'speakingandwriting':\n+      case 'speakingandlistening':\n+      case 'speakingwithpartner':\n         return (\n           <div className=\"space-y-6\">\n             <Card className=\"bg-primary/5 border-primary/10\">\n               <CardContent className=\"p-4 space-y-4\">\n@@ -960,8 +1023,9 @@\n           </div>\n         );\n \n       case 'listening':\n+      case 'listenandrepeat':\n         return (\n           <div className=\"space-y-6\">\n             {question.metadata.audioContent ? (\n               <Card className=\"bg-primary/5 border-primary/10\">\n"
                },
                {
                    "date": 1739476890261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1058,8 +1058,9 @@\n           </div>\n         );\n \n       case 'reading':\n+      case 'readingandspeaking':\n         return (\n           <div className=\"space-y-6\">\n             {question.metadata.passage ? (\n               <Card className=\"prose prose-sm max-w-none dark:prose-invert border-primary/10\">\n@@ -1103,8 +1104,157 @@\n             </div>\n           </div>\n         );\n \n+      case 'grammarspeaking':\n+      case 'sentenceformation':\n+        return (\n+          <div className=\"space-y-6\">\n+            <Card className=\"bg-primary/5 border-primary/10\">\n+              <CardContent className=\"p-4\">\n+                <div className=\"flex items-center gap-2 mb-4 text-primary\">\n+                  <Type className=\"h-5 w-5\" />\n+                  <p className=\"font-medium\">Grammar Exercise</p>\n+                </div>\n+                <div className=\"space-y-4\">\n+                  <div>\n+                    <Label className=\"text-sm font-medium\">Grammar Point</Label>\n+                    <p className=\"text-sm mt-1\">{question.metadata.grammarPoint}</p>\n+                  </div>\n+                  <div>\n+                    <Label className=\"text-sm font-medium\">Example</Label>\n+                    <p className=\"text-sm mt-1\">{question.metadata.example}</p>\n+                  </div>\n+                  <Textarea\n+                    placeholder=\"Write your answer using the grammar point...\"\n+                    onChange={() => onAnswer(75)}\n+                    className=\"min-h-[100px] bg-card border-primary/10\"\n+                  />\n+                </div>\n+              </CardContent>\n+            </Card>\n+          </div>\n+        );\n+\n+      case 'vocabularyandspeaking':\n+      case 'vocabularyandwordlist':\n+        return (\n+          <div className=\"space-y-6\">\n+            <Card className=\"bg-primary/5 border-primary/10\">\n+              <CardContent className=\"p-4\">\n+                <div className=\"flex items-center gap-2 mb-4 text-primary\">\n+                  <Brain className=\"h-5 w-5\" />\n+                  <p className=\"font-medium\">Vocabulary Exercise</p>\n+                </div>\n+                {question.metadata.wordlistPrompt?.map((word: any, idx: number) => (\n+                  <div key={idx} className=\"mb-6 p-4 bg-card rounded-lg border border-primary/10\">\n+                    <h4 className=\"font-medium mb-2\">{word.word}</h4>\n+                    <div className=\"grid gap-2 text-sm\">\n+                      <p><span className=\"text-muted-foreground\">Definition:</span> {word.definition}</p>\n+                      <p><span className=\"text-muted-foreground\">Example:</span> {word.example}</p>\n+                      <p><span className=\"text-muted-foreground\">Usage:</span> {word.usageNotes}</p>\n+                    </div>\n+                  </div>\n+                ))}\n+              </CardContent>\n+            </Card>\n+          </div>\n+        );\n+\n+      case 'presentation':\n+      case 'debate':\n+        return (\n+          <div className=\"space-y-6\">\n+            <Card className=\"bg-primary/5 border-primary/10\">\n+              <CardContent className=\"p-4\">\n+                <div className=\"flex items-center gap-2 mb-4 text-primary\">\n+                  <Presentation className=\"h-5 w-5\" />\n+                  <p className=\"font-medium\">{question.type === 'presentation' ? 'Presentation' : 'Debate'} Task</p>\n+                </div>\n+                <div className=\"space-y-4\">\n+                  <div>\n+                    <Label className=\"text-sm font-medium\">Topic</Label>\n+                    <p className=\"text-sm mt-1\">{question.metadata.topic}</p>\n+                  </div>\n+                  {question.type === 'debate' && (\n+                    <div>\n+                      <Label className=\"text-sm font-medium\">Position</Label>\n+                      <p className=\"text-sm mt-1\">{question.metadata.position}</p>\n+                    </div>\n+                  )}\n+                  <div>\n+                    <Label className=\"text-sm font-medium\">Key Points</Label>\n+                    <ul className=\"list-disc list-inside text-sm mt-1\">\n+                      {question.metadata.keyPoints?.map((point: string, idx: number) => (\n+                        <li key={idx}>{point}</li>\n+                      ))}\n+                    </ul>\n+                  </div>\n+                </div>\n+              </CardContent>\n+            </Card>\n+          </div>\n+        );\n+\n+      case 'storytelling':\n+      case 'idiompractice':\n+        return (\n+          <div className=\"space-y-6\">\n+            <Card className=\"bg-primary/5 border-primary/10\">\n+              <CardContent className=\"p-4\">\n+                <div className=\"flex items-center gap-2 mb-4 text-primary\">\n+                  {question.type === 'storytelling' ? (\n+                    <BookOpen className=\"h-5 w-5\" />\n+                  ) : (\n+                    <Sparkles className=\"h-5 w-5\" />\n+                  )}\n+                  <p className=\"font-medium\">{question.type === 'storytelling' ? 'Storytelling' : 'Idiom Practice'}</p>\n+                </div>\n+                <div className=\"space-y-4\">\n+                  {question.type === 'idiompractice' ? (\n+                    <>\n+                      <div>\n+                        <Label className=\"text-sm font-medium\">Idiom</Label>\n+                        <p className=\"text-sm mt-1\">{question.metadata.idiom}</p>\n+                      </div>\n+                      <div>\n+                        <Label className=\"text-sm font-medium\">Meaning</Label>\n+                        <p className=\"text-sm mt-1\">{question.metadata.meaning}</p>\n+                      </div>\n+                      <div>\n+                        <Label className=\"text-sm font-medium\">Usage Notes</Label>\n+                        <p className=\"text-sm mt-1\">{question.metadata.usageNotes}</p>\n+                      </div>\n+                    </>\n+                  ) : (\n+                    <>\n+                      <div>\n+                        <Label className=\"text-sm font-medium\">Story Prompt</Label>\n+                        <p className=\"text-sm mt-1\">{question.metadata.storyPrompt}</p>\n+                      </div>\n+                      <div>\n+                        <Label className=\"text-sm font-medium\">Keywords</Label>\n+                        <div className=\"flex flex-wrap gap-2 mt-1\">\n+                          {question.metadata.keywords?.map((keyword: string, idx: number) => (\n+                            <Badge key={idx} variant=\"outline\" className=\"bg-primary/5\">\n+                              {keyword}\n+                            </Badge>\n+                          ))}\n+                        </div>\n+                      </div>\n+                    </>\n+                  )}\n+                  <Textarea\n+                    placeholder={question.type === 'storytelling' ? \"Write your story here...\" : \"Write a sentence using this idiom...\"}\n+                    onChange={() => onAnswer(75)}\n+                    className=\"min-h-[150px] bg-card border-primary/10\"\n+                  />\n+                </div>\n+              </CardContent>\n+            </Card>\n+          </div>\n+        );\n+\n       default:\n         return (\n           <div className=\"flex flex-col items-center justify-center p-8 text-muted-foreground\">\n             <Target className=\"h-12 w-12 mb-4 opacity-50\" />\n@@ -1115,22 +1265,57 @@\n   };\n \n   const getQuestionColor = (type: string): string => {\n     switch (type) {\n+      // Speaking related\n       case 'speaking':\n       case 'speakingAndWriting':\n       case 'speakingAndListening':\n+      case 'speakingWithAPartner':\n         return 'from-blue-500/10 to-indigo-500/10 hover:from-blue-500/20 hover:to-indigo-500/20';\n+      \n+      // Writing related\n       case 'writing':\n+      case 'writingAndSpeaking':\n         return 'from-emerald-500/10 to-green-500/10 hover:from-emerald-500/20 hover:to-green-500/20';\n+      \n+      // Reading related\n       case 'reading':\n+      case 'readingAndSpeaking':\n         return 'from-amber-500/10 to-orange-500/10 hover:from-amber-500/20 hover:to-orange-500/20';\n+      \n+      // Listening related\n       case 'listening':\n+      case 'listenAndRepeat':\n         return 'from-purple-500/10 to-pink-500/10 hover:from-purple-500/20 hover:to-pink-500/20';\n+      \n+      // Multiple choice and matching\n       case 'multipleChoice':\n+      case 'matching':\n+      case 'fillInTheBlank':\n+      case 'trueOrFalse':\n         return 'from-cyan-500/10 to-blue-500/10 hover:from-cyan-500/20 hover:to-blue-500/20';\n-      case 'grammar':\n+      \n+      // Grammar related\n+      case 'grammarSpeaking':\n+      case 'sentenceFormation':\n         return 'from-teal-500/10 to-emerald-500/10 hover:from-teal-500/20 hover:to-emerald-500/20';\n+      \n+      // Vocabulary related\n+      case 'vocabularyAndSpeaking':\n+      case 'vocabularyAndWordlist':\n+        return 'from-violet-500/10 to-purple-500/10 hover:from-violet-500/20 hover:to-purple-500/20';\n+      \n+      // Presentation and debate\n+      case 'presentation':\n+      case 'debate':\n+        return 'from-rose-500/10 to-pink-500/10 hover:from-rose-500/20 hover:to-pink-500/20';\n+      \n+      // Story and idiom\n+      case 'storytelling':\n+      case 'idiomPractice':\n+        return 'from-yellow-500/10 to-amber-500/10 hover:from-yellow-500/20 hover:to-amber-500/20';\n+      \n       default:\n         return 'from-gray-500/10 to-slate-500/10 hover:from-gray-500/20 hover:to-slate-500/20';\n     }\n   };\n"
                },
                {
                    "date": 1739479026005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,8 +51,22 @@\n   difficulty?: 'beginner' | 'intermediate' | 'advanced';\n   points?: number;\n   type?: string;\n   data?: any;\n+  // Additional fields for various question types\n+  sentence?: string;\n+  blanks?: string[];\n+  items?: string[];\n+  descriptions?: string[];\n+  topic?: string;\n+  position?: string;\n+  keyPoints?: string[];\n+  idiom?: string;\n+  meaning?: string;\n+  usageNotes?: string;\n+  storyPrompt?: string;\n+  keywords?: string[];\n+  wordlistPrompt?: any[];\n }\n \n interface Question {\n   id: string;\n@@ -748,8 +762,10 @@\n   onToggle: () => void;\n   onAnswer: (progress: number) => void;\n   progress: number;\n }) {\n+  const [activeFollowup, setActiveFollowup] = useState<number | null>(null);\n+\n   // Early return if question is invalid\n   if (!question || typeof question !== 'object') {\n     return (\n       <Card className=\"border-destructive/50\">\n@@ -1319,8 +1335,98 @@\n         return 'from-gray-500/10 to-slate-500/10 hover:from-gray-500/20 hover:to-slate-500/20';\n     }\n   };\n \n+  const renderFollowupPrompts = () => {\n+    if (!question.exercises?.length) return null;\n+\n+    return (\n+      <div className=\"mt-8 space-y-4\">\n+        <div className=\"flex items-center gap-2 text-primary\">\n+          <Target className=\"h-5 w-5\" />\n+          <h3 className=\"font-medium\">Followup Questions</h3>\n+        </div>\n+        <div className=\"grid gap-4\">\n+          {question.exercises.map((prompt, idx) => (\n+            <motion.div\n+              key={idx}\n+              initial={{ opacity: 0, y: 10 }}\n+              animate={{ opacity: 1, y: 0 }}\n+              transition={{ delay: idx * 0.1 }}\n+            >\n+              <Card \n+                className={cn(\n+                  \"border-primary/10 transition-all duration-200\",\n+                  \"hover:shadow-md hover:border-primary/20\",\n+                  activeFollowup === idx && \"ring-2 ring-primary/20\"\n+                )}\n+                onClick={() => setActiveFollowup(activeFollowup === idx ? null : idx)}\n+              >\n+                <CardHeader className=\"cursor-pointer\">\n+                  <div className=\"flex items-center justify-between\">\n+                    <div className=\"flex items-center gap-3\">\n+                      <Badge variant=\"outline\" className=\"bg-primary/5\">\n+                        Followup {idx + 1}\n+                      </Badge>\n+                      {prompt.type && (\n+                        <Badge variant=\"outline\" className=\"bg-primary/5\">\n+                          {prompt.type}\n+                        </Badge>\n+                      )}\n+                    </div>\n+                    <ChevronRight \n+                      className={cn(\n+                        \"h-4 w-4 transition-transform\",\n+                        activeFollowup === idx && \"rotate-90\"\n+                      )} \n+                    />\n+                  </div>\n+                  <p className=\"text-sm mt-2\">{prompt.text}</p>\n+                </CardHeader>\n+                <AnimatePresence>\n+                  {activeFollowup === idx && (\n+                    <motion.div\n+                      initial={{ height: 0, opacity: 0 }}\n+                      animate={{ height: \"auto\", opacity: 1 }}\n+                      exit={{ height: 0, opacity: 0 }}\n+                    >\n+                      <CardContent className=\"pt-0\">\n+                        <div className=\"space-y-4\">\n+                          {prompt.media && (\n+                            <div className=\"rounded-lg overflow-hidden border border-primary/10\">\n+                              {prompt.type === 'image' ? (\n+                                <img \n+                                  src={prompt.media} \n+                                  alt={prompt.text}\n+                                  className=\"w-full h-auto\"\n+                                />\n+                              ) : (\n+                                <video \n+                                  src={prompt.media}\n+                                  controls\n+                                  className=\"w-full\"\n+                                />\n+                              )}\n+                            </div>\n+                          )}\n+                          <Textarea\n+                            placeholder=\"Write your response...\"\n+                            className=\"min-h-[100px] bg-card border-primary/10\"\n+                            onChange={() => onAnswer(Math.min(100, progress + 10))}\n+                          />\n+                        </div>\n+                      </CardContent>\n+                    </motion.div>\n+                  )}\n+                </AnimatePresence>\n+              </Card>\n+            </motion.div>\n+          ))}\n+        </div>\n+      </div>\n+    );\n+  };\n+\n   return (\n     <motion.div\n       initial={{ opacity: 0, y: 20 }}\n       animate={{ opacity: 1, y: 0 }}\n@@ -1376,8 +1482,16 @@\n                 >\n                   {question.metadata.difficulty}\n                 </Badge>\n               )}\n+              {question.exercises?.length > 0 && (\n+                <Badge \n+                  variant=\"outline\" \n+                  className=\"bg-primary/10 text-primary border-primary/20\"\n+                >\n+                  {question.exercises.length} Followups\n+                </Badge>\n+              )}\n             </div>\n             <motion.div\n               animate={{ rotate: isExpanded ? 90 : 0 }}\n               transition={{ duration: 0.2 }}\n@@ -1429,8 +1543,9 @@\n                   </div>\n                   <div className=\"bg-background/80 backdrop-blur-sm rounded-lg p-4\">\n                     {renderQuestionContent()}\n                   </div>\n+                  {renderFollowupPrompts()}\n                 </div>\n               </CardContent>\n             </motion.div>\n           )}\n"
                },
                {
                    "date": 1739479070429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1341,9 +1341,9 @@\n     }\n   };\n \n   const renderFollowupPrompts = () => {\n-    if (!question.exercises?.length) return null;\n+    if (!Array.isArray(question.exercises) || question.exercises.length === 0) return null;\n \n     return (\n       <div className=\"mt-8 space-y-4\">\n         <div className=\"flex items-center gap-2 text-primary\">\n@@ -1487,9 +1487,9 @@\n                 >\n                   {question.metadata.difficulty}\n                 </Badge>\n               )}\n-              {question.exercises?.length > 0 && (\n+              {Array.isArray(question.exercises) && question.exercises.length > 0 && (\n                 <Badge \n                   variant=\"outline\" \n                   className=\"bg-primary/10 text-primary border-primary/20\"\n                 >\n"
                },
                {
                    "date": 1739479080687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,14 @@\n   title: string;\n   content: string;\n   type: string;\n   metadata: QuestionMetadata;\n-  exercises?: any[];\n+  exercises: Array<{\n+    id: string;\n+    text: string;\n+    type?: string;\n+    media?: string;\n+  }>;\n   points?: number;\n   data?: any;\n }\n \n"
                },
                {
                    "date": 1739481058833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,10 @@\n   RefreshCw, X, BookOpen, Clock, CheckCircle2, ChevronRight, \n   Lightbulb, Volume2, VolumeX, Play, Pause, ArrowLeft, ArrowRight,\n   CheckCircle, HelpCircle, Award, Star, ImageIcon, PenTool,\n   Mic, Video, FileText, Pencil, Book, MessageCircle, Brain,\n-  Headphones, Type, Layers, Target, Presentation, Sparkles\n+  Headphones, Type, Layers, Target, Presentation, Sparkles,\n+  Maximize2, Minimize2, GripVertical\n } from 'lucide-react';\n import { cn } from \"@/lib/utils\";\n import { Badge } from \"@/components/ui/badge\";\n import { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\n@@ -28,8 +29,10 @@\n import { Input } from \"@/components/ui/input\";\n import { Textarea } from \"@/components/ui/textarea\";\n import { Collapsible, CollapsibleTrigger, CollapsibleContent } from \"@/components/ui/collapsible\";\n import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n+import Split from 'react-split';\n+import { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\n \n // Question Types from question-form.tsx\n interface QuestionMetadata {\n   prompt?: string;\n@@ -122,8 +125,15 @@\n   const [audioQueue, setAudioQueue] = useState<string[]>([]);\n   const [currentAudioIndex, setCurrentAudioIndex] = useState(0);\n   const [isAudioReady, setIsAudioReady] = useState(false);\n \n+  // Add these state variables in the LessonDialog component\n+  const [splitSizes, setSplitSizes] = useState<number[]>(() => {\n+    const saved = localStorage.getItem('lesson-dialog-split');\n+    return saved ? JSON.parse(saved) : [65, 35];\n+  });\n+  const [isMediaFullscreen, setIsMediaFullscreen] = useState(false);\n+\n   // Audio event handlers\n   const handleTimeUpdate = () => {\n     if (audioRef.current) {\n       const progress = (audioRef.current.currentTime / audioRef.current.duration) * 100;\n@@ -259,8 +269,13 @@\n       }\n     });\n   };\n \n+  // Add this effect to save split sizes\n+  useEffect(() => {\n+    localStorage.setItem('lesson-dialog-split', JSON.stringify(splitSizes));\n+  }, [splitSizes]);\n+\n   return (\n     <Dialog open={isOpen} onOpenChange={onClose}>\n       <DialogContent \n         className=\"max-w-[100vw] w-full h-[100vh] p-0 max-h-screen bg-gradient-to-b from-background to-accent/10\"\n@@ -367,11 +382,34 @@\n           </Tabs>\n         </DialogHeader>\n \n         {/* Main Content Area */}\n-        <div className=\"flex flex-col md:flex-row h-[calc(100vh-12rem)] w-full\">\n+        <Split \n+          sizes={splitSizes}\n+          minSize={[400, 300]}\n+          expandToMin={false}\n+          gutterSize={8}\n+          gutterAlign=\"center\"\n+          snapOffset={30}\n+          dragInterval={1}\n+          direction=\"horizontal\"\n+          cursor=\"col-resize\"\n+          className=\"flex h-[calc(100vh-12rem)] w-full\"\n+          gutter={() => {\n+            const gutter = document.createElement('div');\n+            gutter.className = \"flex items-center justify-center bg-border hover:bg-primary/20 transition-colors\";\n+            const icon = document.createElement('div');\n+            icon.className = \"p-1 rounded-md bg-background shadow-sm\";\n+            icon.innerHTML = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"text-muted-foreground\"><circle cx=\"12\" cy=\"12\" r=\"1\"/><circle cx=\"12\" cy=\"5\" r=\"1\"/><circle cx=\"12\" cy=\"19\" r=\"1\"/></svg>';\n+            gutter.appendChild(icon);\n+            return gutter;\n+          }}\n+          onDragEnd={(sizes) => {\n+            setSplitSizes(sizes);\n+          }}\n+        >\n           {/* Left Section - Main Content */}\n-          <div className=\"flex-1 md:w-2/3 h-full\">\n+          <div className=\"h-full overflow-hidden\">\n             <ScrollArea className=\"h-full w-full\">\n               <div className=\"container p-6\">\n                 {lessonContent.isLoading ? (\n                   <motion.div \n@@ -427,59 +465,139 @@\n             </ScrollArea>\n           </div>\n \n           {/* Right Section - Media Preview */}\n-          <div className=\"md:w-1/3 h-1/4 md:h-full border-l bg-muted/10\">\n-            <ScrollArea className=\"h-full\">\n-              <div className=\"p-6 space-y-4\">\n-                <Card className=\"border-primary/10\">\n-                  <CardHeader>\n-                    <CardTitle className=\"text-lg flex items-center gap-2\">\n-                      <ImageIcon className=\"h-5 w-5 text-primary\" />\n-                      Media Preview\n-                    </CardTitle>\n-                  </CardHeader>\n-                  <CardContent>\n-                    {lessonContent.content?.media ? (\n-                      <div className=\"space-y-4\">\n-                        {lessonContent.content.media.map((item: any, index: number) => (\n-                          <motion.div\n-                            key={index}\n-                            initial={{ opacity: 0, scale: 0.95 }}\n-                            animate={{ opacity: 1, scale: 1 }}\n-                            transition={{ delay: index * 0.1 }}\n-                          >\n-                            {item.type === 'image' && (\n-                              <img\n-                                src={item.url}\n-                                alt={`Media ${index + 1}`}\n-                                className=\"w-full rounded-lg shadow-md hover:shadow-lg transition-shadow\"\n-                              />\n-                            )}\n-                            {item.type === 'video' && (\n-                              <video\n-                                src={item.url}\n-                                controls\n-                                className=\"w-full rounded-lg shadow-md\"\n-                                preload=\"metadata\"\n-                              />\n-                            )}\n-                          </motion.div>\n-                        ))}\n-                      </div>\n+          <div className=\"h-full border-l bg-muted/10\">\n+            <div className=\"h-full flex flex-col\">\n+              <div className=\"p-4 border-b bg-background/50 backdrop-blur-sm flex items-center justify-between\">\n+                <div className=\"flex items-center gap-2\">\n+                  <ImageIcon className=\"h-5 w-5 text-primary\" />\n+                  <h3 className=\"font-medium\">Media Preview</h3>\n+                </div>\n+                <div className=\"flex items-center gap-2\">\n+                  <Button\n+                    variant=\"ghost\"\n+                    size=\"sm\"\n+                    className=\"h-8 w-8 p-0\"\n+                    onClick={() => setIsMediaFullscreen(!isMediaFullscreen)}\n+                  >\n+                    {isMediaFullscreen ? (\n+                      <Minimize2 className=\"h-4 w-4\" />\n                     ) : (\n-                      <div className=\"flex flex-col items-center justify-center py-8 text-muted-foreground\">\n-                        <ImageIcon className=\"h-12 w-12 mb-4 opacity-50\" />\n-                        <p>No media available</p>\n-                      </div>\n+                      <Maximize2 className=\"h-4 w-4\" />\n                     )}\n-                  </CardContent>\n-                </Card>\n+                  </Button>\n+                </div>\n               </div>\n-            </ScrollArea>\n+              <ScrollArea className=\"flex-1\">\n+                <div className=\"p-6 space-y-4\">\n+                  {lessonContent.content?.media ? (\n+                    <div className=\"space-y-4\">\n+                      {lessonContent.content.media.map((item: any, index: number) => (\n+                        <motion.div\n+                          key={index}\n+                          initial={{ opacity: 0, scale: 0.95 }}\n+                          animate={{ opacity: 1, scale: 1 }}\n+                          transition={{ delay: index * 0.1 }}\n+                          className={cn(\n+                            \"relative group\",\n+                            isMediaFullscreen && \"fixed inset-0 z-50 bg-background/95 backdrop-blur-sm p-8\"\n+                          )}\n+                        >\n+                          {item.type === 'image' ? (\n+                            <img\n+                              src={item.url}\n+                              alt={`Media ${index + 1}`}\n+                              className={cn(\n+                                \"w-full rounded-lg shadow-md hover:shadow-lg transition-shadow\",\n+                                isMediaFullscreen && \"object-contain h-full mx-auto\"\n+                              )}\n+                            />\n+                          ) : item.type === 'video' && (\n+                            <video\n+                              src={item.url}\n+                              controls\n+                              className={cn(\n+                                \"w-full rounded-lg shadow-md\",\n+                                isMediaFullscreen && \"h-full mx-auto object-contain\"\n+                              )}\n+                              preload=\"metadata\"\n+                            />\n+                          )}\n+                          {!isMediaFullscreen && (\n+                            <Button\n+                              variant=\"ghost\"\n+                              size=\"sm\"\n+                              className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity\"\n+                              onClick={() => setIsMediaFullscreen(true)}\n+                            >\n+                              <Maximize2 className=\"h-4 w-4\" />\n+                            </Button>\n+                          )}\n+                        </motion.div>\n+                      ))}\n+                    </div>\n+                  ) : (\n+                    <div className=\"flex flex-col items-center justify-center py-8 text-muted-foreground\">\n+                      <ImageIcon className=\"h-12 w-12 mb-4 opacity-50\" />\n+                      <p>No media available</p>\n+                    </div>\n+                  )}\n+                </div>\n+              </ScrollArea>\n+            </div>\n           </div>\n-        </div>\n+        </Split>\n \n+        {/* Fullscreen Media Sheet */}\n+        <Sheet open={isMediaFullscreen} onOpenChange={setIsMediaFullscreen}>\n+          <SheetContent side=\"right\" className=\"w-full sm:w-[90vw] p-0\">\n+            <div className=\"h-full flex flex-col\">\n+              <div className=\"p-4 border-b bg-background/50 backdrop-blur-sm flex items-center justify-between\">\n+                <div className=\"flex items-center gap-2\">\n+                  <ImageIcon className=\"h-5 w-5 text-primary\" />\n+                  <h3 className=\"font-medium\">Media Preview</h3>\n+                </div>\n+                <Button\n+                  variant=\"ghost\"\n+                  size=\"sm\"\n+                  onClick={() => setIsMediaFullscreen(false)}\n+                >\n+                  <X className=\"h-4 w-4\" />\n+                </Button>\n+              </div>\n+              <ScrollArea className=\"flex-1\">\n+                <div className=\"p-6 space-y-4\">\n+                  {lessonContent.content?.media?.map((item: any, index: number) => (\n+                    <motion.div\n+                      key={index}\n+                      initial={{ opacity: 0, scale: 0.95 }}\n+                      animate={{ opacity: 1, scale: 1 }}\n+                      transition={{ delay: index * 0.1 }}\n+                      className=\"relative\"\n+                    >\n+                      {item.type === 'image' ? (\n+                        <img\n+                          src={item.url}\n+                          alt={`Media ${index + 1}`}\n+                          className=\"w-full h-auto object-contain max-h-[80vh] rounded-lg shadow-md\"\n+                        />\n+                      ) : item.type === 'video' && (\n+                        <video\n+                          src={item.url}\n+                          controls\n+                          className=\"w-full h-auto max-h-[80vh] rounded-lg shadow-md\"\n+                          preload=\"metadata\"\n+                        />\n+                      )}\n+                    </motion.div>\n+                  ))}\n+                </div>\n+              </ScrollArea>\n+            </div>\n+          </SheetContent>\n+        </Sheet>\n+\n         {/* Audio Element */}\n         <audio\n           ref={audioRef}\n           src={audioQueue[currentAudioIndex]}\n"
                },
                {
                    "date": 1739481124920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,9 @@\n import { Collapsible, CollapsibleTrigger, CollapsibleContent } from \"@/components/ui/collapsible\";\n import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n import Split from 'react-split';\n import { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\n+import type { SplitProps } from 'react-split';\n \n // Question Types from question-form.tsx\n interface QuestionMetadata {\n   prompt?: string;\n"
                },
                {
                    "date": 1739481131370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -403,9 +403,9 @@\n             icon.innerHTML = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"text-muted-foreground\"><circle cx=\"12\" cy=\"12\" r=\"1\"/><circle cx=\"12\" cy=\"5\" r=\"1\"/><circle cx=\"12\" cy=\"19\" r=\"1\"/></svg>';\n             gutter.appendChild(icon);\n             return gutter;\n           }}\n-          onDragEnd={(sizes) => {\n+          onDragEnd={(sizes: number[]) => {\n             setSplitSizes(sizes);\n           }}\n         >\n           {/* Left Section - Main Content */}\n"
                },
                {
                    "date": 1739483380301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,13 @@\n import { Input } from \"@/components/ui/input\";\n import { Textarea } from \"@/components/ui/textarea\";\n import { Collapsible, CollapsibleTrigger, CollapsibleContent } from \"@/components/ui/collapsible\";\n import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n-import Split from 'react-split';\n+import {\n+  Panel,\n+  PanelGroup,\n+  PanelResizeHandle,\n+} from \"react-resizable-panels\";\n import { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\n import type { SplitProps } from 'react-split';\n \n // Question Types from question-form.tsx\n@@ -383,173 +387,191 @@\n           </Tabs>\n         </DialogHeader>\n \n         {/* Main Content Area */}\n-        <Split \n-          sizes={splitSizes}\n-          minSize={[400, 300]}\n-          expandToMin={false}\n-          gutterSize={8}\n-          gutterAlign=\"center\"\n-          snapOffset={30}\n-          dragInterval={1}\n-          direction=\"horizontal\"\n-          cursor=\"col-resize\"\n-          className=\"flex h-[calc(100vh-12rem)] w-full\"\n-          gutter={() => {\n-            const gutter = document.createElement('div');\n-            gutter.className = \"flex items-center justify-center bg-border hover:bg-primary/20 transition-colors\";\n-            const icon = document.createElement('div');\n-            icon.className = \"p-1 rounded-md bg-background shadow-sm\";\n-            icon.innerHTML = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"text-muted-foreground\"><circle cx=\"12\" cy=\"12\" r=\"1\"/><circle cx=\"12\" cy=\"5\" r=\"1\"/><circle cx=\"12\" cy=\"19\" r=\"1\"/></svg>';\n-            gutter.appendChild(icon);\n-            return gutter;\n+        <PanelGroup \n+          direction=\"horizontal\" \n+          className=\"h-[calc(100vh-12rem)] w-full\"\n+          onLayout={(sizes) => {\n+            localStorage.setItem('lesson-dialog-split', JSON.stringify(sizes));\n           }}\n-          onDragEnd={(sizes: number[]) => {\n-            setSplitSizes(sizes);\n-          }}\n         >\n-          {/* Left Section - Main Content */}\n-          <div className=\"h-full overflow-hidden\">\n-            <ScrollArea className=\"h-full w-full\">\n-              <div className=\"container p-6\">\n-                {lessonContent.isLoading ? (\n-                  <motion.div \n-                    initial={{ opacity: 0, scale: 0.95 }}\n-                    animate={{ opacity: 1, scale: 1 }}\n-                    className=\"flex items-center justify-center h-[50vh]\"\n-                  >\n-                    <LoadingSpinner message=\"Loading your lesson content...\" />\n-                  </motion.div>\n-                ) : lessonContent.error ? (\n-                  <motion.div \n-                    initial={{ opacity: 0, y: 20 }}\n-                    animate={{ opacity: 1, y: 0 }}\n-                    className=\"flex flex-col items-center justify-center gap-4 h-[50vh]\"\n-                  >\n-                    <div className=\"p-8 bg-destructive/10 rounded-lg text-center max-w-md\">\n-                      <p className=\"text-destructive font-medium mb-4\">{lessonContent.error}</p>\n-                      <Button \n-                        onClick={onRetry} \n-                        variant=\"outline\" \n-                        className=\"gap-2 hover:bg-destructive/5\"\n-                      >\n-                        <RefreshCw className=\"h-4 w-4\" />\n-                        Retry Loading\n-                      </Button>\n-                    </div>\n-                  </motion.div>\n-                ) : (\n-                  <Tabs defaultValue=\"content\" value={activeTab} onValueChange={handleTabChange}>\n-                    <TabsContent value=\"content\">\n-                      <ContentTab content={lessonContent.content} />\n-                    </TabsContent>\n-                    <TabsContent value=\"questions\">\n-                      <QuestionsTab \n-                        questions={lessonContent.content?.questions} \n-                        selectedIndex={selectedQuestionIndex}\n-                        onQuestionSelect={handleQuestionSelect}\n-                        onNextLesson={() => {\n-                          // Handle next lesson navigation\n-                          logger.info('Navigating to next lesson', {\n-                            source: 'LessonDialog',\n-                            context: { currentLessonId }\n-                          });\n-                        }}\n-                      />\n-                    </TabsContent>\n-                    <TabsContent value=\"exercises\">\n-                      <ExercisesTab exercises={lessonContent.content?.exercise_prompts} />\n-                    </TabsContent>\n-                  </Tabs>\n-                )}\n-              </div>\n-            </ScrollArea>\n-          </div>\n-\n-          {/* Right Section - Media Preview */}\n-          <div className=\"h-full border-l bg-muted/10\">\n-            <div className=\"h-full flex flex-col\">\n-              <div className=\"p-4 border-b bg-background/50 backdrop-blur-sm flex items-center justify-between\">\n-                <div className=\"flex items-center gap-2\">\n-                  <ImageIcon className=\"h-5 w-5 text-primary\" />\n-                  <h3 className=\"font-medium\">Media Preview</h3>\n-                </div>\n-                <div className=\"flex items-center gap-2\">\n-                  <Button\n-                    variant=\"ghost\"\n-                    size=\"sm\"\n-                    className=\"h-8 w-8 p-0\"\n-                    onClick={() => setIsMediaFullscreen(!isMediaFullscreen)}\n-                  >\n-                    {isMediaFullscreen ? (\n-                      <Minimize2 className=\"h-4 w-4\" />\n-                    ) : (\n-                      <Maximize2 className=\"h-4 w-4\" />\n-                    )}\n-                  </Button>\n-                </div>\n-              </div>\n-              <ScrollArea className=\"flex-1\">\n-                <div className=\"p-6 space-y-4\">\n-                  {lessonContent.content?.media ? (\n-                    <div className=\"space-y-4\">\n-                      {lessonContent.content.media.map((item: any, index: number) => (\n-                        <motion.div\n-                          key={index}\n-                          initial={{ opacity: 0, scale: 0.95 }}\n-                          animate={{ opacity: 1, scale: 1 }}\n-                          transition={{ delay: index * 0.1 }}\n-                          className={cn(\n-                            \"relative group\",\n-                            isMediaFullscreen && \"fixed inset-0 z-50 bg-background/95 backdrop-blur-sm p-8\"\n-                          )}\n+          {/* Left Panel - Main Content */}\n+          <Panel \n+            defaultSize={splitSizes[0]} \n+            minSize={30}\n+            className=\"h-full\"\n+          >\n+            <div className=\"h-full overflow-hidden\">\n+              <ScrollArea className=\"h-full w-full\">\n+                <div className=\"container p-6\">\n+                  {lessonContent.isLoading ? (\n+                    <motion.div \n+                      initial={{ opacity: 0, scale: 0.95 }}\n+                      animate={{ opacity: 1, scale: 1 }}\n+                      className=\"flex items-center justify-center h-[50vh]\"\n+                    >\n+                      <LoadingSpinner message=\"Loading your lesson content...\" />\n+                    </motion.div>\n+                  ) : lessonContent.error ? (\n+                    <motion.div \n+                      initial={{ opacity: 0, y: 20 }}\n+                      animate={{ opacity: 1, y: 0 }}\n+                      className=\"flex flex-col items-center justify-center gap-4 h-[50vh]\"\n+                    >\n+                      <div className=\"p-8 bg-destructive/10 rounded-lg text-center max-w-md\">\n+                        <p className=\"text-destructive font-medium mb-4\">{lessonContent.error}</p>\n+                        <Button \n+                          onClick={onRetry} \n+                          variant=\"outline\" \n+                          className=\"gap-2 hover:bg-destructive/5\"\n                         >\n-                          {item.type === 'image' ? (\n-                            <img\n-                              src={item.url}\n-                              alt={`Media ${index + 1}`}\n-                              className={cn(\n-                                \"w-full rounded-lg shadow-md hover:shadow-lg transition-shadow\",\n-                                isMediaFullscreen && \"object-contain h-full mx-auto\"\n-                              )}\n-                            />\n-                          ) : item.type === 'video' && (\n-                            <video\n-                              src={item.url}\n-                              controls\n-                              className={cn(\n-                                \"w-full rounded-lg shadow-md\",\n-                                isMediaFullscreen && \"h-full mx-auto object-contain\"\n-                              )}\n-                              preload=\"metadata\"\n-                            />\n-                          )}\n-                          {!isMediaFullscreen && (\n-                            <Button\n-                              variant=\"ghost\"\n-                              size=\"sm\"\n-                              className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity\"\n-                              onClick={() => setIsMediaFullscreen(true)}\n-                            >\n-                              <Maximize2 className=\"h-4 w-4\" />\n-                            </Button>\n-                          )}\n-                        </motion.div>\n-                      ))}\n-                    </div>\n+                          <RefreshCw className=\"h-4 w-4\" />\n+                          Retry Loading\n+                        </Button>\n+                      </div>\n+                    </motion.div>\n                   ) : (\n-                    <div className=\"flex flex-col items-center justify-center py-8 text-muted-foreground\">\n-                      <ImageIcon className=\"h-12 w-12 mb-4 opacity-50\" />\n-                      <p>No media available</p>\n-                    </div>\n+                    <Tabs defaultValue=\"content\" value={activeTab} onValueChange={handleTabChange}>\n+                      <TabsContent value=\"content\">\n+                        <ContentTab content={lessonContent.content} />\n+                      </TabsContent>\n+                      <TabsContent value=\"questions\">\n+                        <QuestionsTab \n+                          questions={lessonContent.content?.questions} \n+                          selectedIndex={selectedQuestionIndex}\n+                          onQuestionSelect={handleQuestionSelect}\n+                          onNextLesson={() => {\n+                            // Handle next lesson navigation\n+                            logger.info('Navigating to next lesson', {\n+                              source: 'LessonDialog',\n+                              context: { currentLessonId }\n+                            });\n+                          }}\n+                        />\n+                      </TabsContent>\n+                      <TabsContent value=\"exercises\">\n+                        <ExercisesTab exercises={lessonContent.content?.exercise_prompts} />\n+                      </TabsContent>\n+                    </Tabs>\n                   )}\n                 </div>\n               </ScrollArea>\n             </div>\n-          </div>\n-        </Split>\n+          </Panel>\n \n+          {/* Resize Handle */}\n+          <PanelResizeHandle className=\"w-2 bg-border hover:bg-primary/20 transition-colors relative group\">\n+            <div className=\"absolute inset-y-0 left-1/2 -translate-x-1/2 w-4 flex items-center justify-center\">\n+              <div className=\"w-1 h-8 rounded-full bg-muted-foreground/20 group-hover:bg-primary/40 transition-colors\" />\n+            </div>\n+          </PanelResizeHandle>\n+\n+          {/* Right Panel - Media Preview */}\n+          <Panel \n+            defaultSize={splitSizes[1]} \n+            minSize={20}\n+            className=\"h-full\"\n+          >\n+            <div className=\"h-full border-l bg-muted/10\">\n+              <div className=\"h-full flex flex-col\">\n+                <div className=\"p-4 border-b bg-background/50 backdrop-blur-sm flex items-center justify-between\">\n+                  <div className=\"flex items-center gap-2\">\n+                    <ImageIcon className=\"h-5 w-5 text-primary\" />\n+                    <h3 className=\"font-medium\">Media Preview</h3>\n+                  </div>\n+                  <div className=\"flex items-center gap-2\">\n+                    <Button\n+                      variant=\"ghost\"\n+                      size=\"sm\"\n+                      className=\"h-8 w-8 p-0\"\n+                      onClick={() => setIsMediaFullscreen(!isMediaFullscreen)}\n+                    >\n+                      {isMediaFullscreen ? (\n+                        <Minimize2 className=\"h-4 w-4\" />\n+                      ) : (\n+                        <Maximize2 className=\"h-4 w-4\" />\n+                      )}\n+                    </Button>\n+                  </div>\n+                </div>\n+                <ScrollArea className=\"flex-1\">\n+                  <div className=\"p-6 space-y-4\">\n+                    {lessonContent.content?.media ? (\n+                      <div className=\"space-y-4\">\n+                        {lessonContent.content.media.map((item: any, index: number) => (\n+                          <motion.div\n+                            key={index}\n+                            initial={{ opacity: 0, scale: 0.95 }}\n+                            animate={{ opacity: 1, scale: 1 }}\n+                            transition={{ delay: index * 0.1 }}\n+                            className={cn(\n+                              \"relative group rounded-xl overflow-hidden\",\n+                              \"ring-1 ring-primary/10 hover:ring-primary/30 transition-all\",\n+                              \"shadow-lg hover:shadow-xl\",\n+                              isMediaFullscreen && \"fixed inset-0 z-50 bg-background/95 backdrop-blur-sm p-8\"\n+                            )}\n+                          >\n+                            {item.type === 'image' ? (\n+                              <img\n+                                src={item.url}\n+                                alt={`Media ${index + 1}`}\n+                                className={cn(\n+                                  \"w-full rounded-lg transition-all duration-300\",\n+                                  \"hover:scale-[1.02] cursor-zoom-in\",\n+                                  isMediaFullscreen && \"object-contain h-full mx-auto cursor-zoom-out\"\n+                                )}\n+                                onClick={() => setIsMediaFullscreen(!isMediaFullscreen)}\n+                              />\n+                            ) : item.type === 'video' && (\n+                              <video\n+                                src={item.url}\n+                                controls\n+                                className={cn(\n+                                  \"w-full rounded-lg transition-all duration-300\",\n+                                  \"hover:scale-[1.02]\",\n+                                  isMediaFullscreen && \"h-full mx-auto object-contain\"\n+                                )}\n+                                preload=\"metadata\"\n+                              />\n+                            )}\n+                            <div className={cn(\n+                              \"absolute inset-0 bg-gradient-to-t from-black/50 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\",\n+                              \"flex items-end justify-between p-4\",\n+                              isMediaFullscreen && \"!opacity-100\"\n+                            )}>\n+                              <Badge variant=\"outline\" className=\"bg-background/80 backdrop-blur-sm\">\n+                                {item.type === 'image' ? 'Image' : 'Video'} {index + 1}\n+                              </Badge>\n+                              <Button\n+                                variant=\"ghost\"\n+                                size=\"sm\"\n+                                className=\"text-white hover:bg-white/20\"\n+                                onClick={() => setIsMediaFullscreen(!isMediaFullscreen)}\n+                              >\n+                                {isMediaFullscreen ? (\n+                                  <Minimize2 className=\"h-4 w-4\" />\n+                                ) : (\n+                                  <Maximize2 className=\"h-4 w-4\" />\n+                                )}\n+                              </Button>\n+                            </div>\n+                          </motion.div>\n+                        ))}\n+                      </div>\n+                    ) : (\n+                      <div className=\"flex flex-col items-center justify-center py-8 text-muted-foreground\">\n+                        <ImageIcon className=\"h-12 w-12 mb-4 opacity-50\" />\n+                        <p>No media available</p>\n+                      </div>\n+                    )}\n+                  </div>\n+                </ScrollArea>\n+              </div>\n+            </div>\n+          </Panel>\n+        </PanelGroup>\n+\n         {/* Fullscreen Media Sheet */}\n         <Sheet open={isMediaFullscreen} onOpenChange={setIsMediaFullscreen}>\n           <SheetContent side=\"right\" className=\"w-full sm:w-[90vw] p-0\">\n             <div className=\"h-full flex flex-col\">\n@@ -573,24 +595,29 @@\n                       key={index}\n                       initial={{ opacity: 0, scale: 0.95 }}\n                       animate={{ opacity: 1, scale: 1 }}\n                       transition={{ delay: index * 0.1 }}\n-                      className=\"relative\"\n+                      className=\"relative rounded-xl overflow-hidden shadow-xl\"\n                     >\n                       {item.type === 'image' ? (\n                         <img\n                           src={item.url}\n                           alt={`Media ${index + 1}`}\n-                          className=\"w-full h-auto object-contain max-h-[80vh] rounded-lg shadow-md\"\n+                          className=\"w-full h-auto object-contain max-h-[80vh] rounded-lg\"\n                         />\n                       ) : item.type === 'video' && (\n                         <video\n                           src={item.url}\n                           controls\n-                          className=\"w-full h-auto max-h-[80vh] rounded-lg shadow-md\"\n+                          className=\"w-full h-auto max-h-[80vh] rounded-lg\"\n                           preload=\"metadata\"\n                         />\n                       )}\n+                      <div className=\"absolute inset-0 bg-gradient-to-t from-black/50 to-transparent opacity-0 group-hover:opacity-100 transition-opacity flex items-end p-4\">\n+                        <Badge variant=\"outline\" className=\"bg-background/80 backdrop-blur-sm\">\n+                          {item.type === 'image' ? 'Image' : 'Video'} {index + 1}\n+                        </Badge>\n+                      </div>\n                     </motion.div>\n                   ))}\n                 </div>\n               </ScrollArea>\n"
                },
                {
                    "date": 1739483418589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1710,12 +1710,12 @@\n               transition={{ duration: 0.3 }}\n             >\n               <CardContent className=\"p-6 pt-0\">\n                 <div className=\"space-y-6\">\n-                  <div className=\"bg-background/50 backdrop-blur-sm rounded-lg p-4\">\n+                  <div className=\"bg-background/50 backdrop-blur-sm rounded-lg p-4 border border-primary/10\">\n                     <p className=\"text-muted-foreground\">{question.content || 'No content available.'}</p>\n                   </div>\n-                  <div className=\"bg-background/80 backdrop-blur-sm rounded-lg p-4\">\n+                  <div className=\"bg-background/80 backdrop-blur-sm rounded-lg p-4 border border-primary/10\">\n                     {renderQuestionContent()}\n                   </div>\n                   {renderFollowupPrompts()}\n                 </div>\n"
                },
                {
                    "date": 1739483494462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1588,13 +1588,19 @@\n           \"overflow-hidden transition-all duration-300\",\n           \"border border-primary/10 shadow-lg\",\n           \"bg-gradient-to-r\",\n           getQuestionColor(question.type),\n-          isExpanded && \"ring-2 ring-primary/20 ring-offset-2\"\n+          isExpanded && \"ring-2 ring-primary/20 ring-offset-2\",\n+          \"hover:shadow-xl hover:translate-y-[-2px]\",\n+          \"group\"\n         )}\n       >\n         <CardHeader \n-          className=\"cursor-pointer select-none p-6\"\n+          className={cn(\n+            \"cursor-pointer select-none p-6\",\n+            \"transition-colors duration-300\",\n+            isExpanded && \"bg-primary/5\"\n+          )}\n           onClick={onToggle}\n         >\n           <div className=\"flex items-center justify-between\">\n             <div className=\"flex items-center gap-3 flex-wrap\">\n@@ -1602,18 +1608,22 @@\n                 variant=\"outline\" \n                 className={cn(\n                   \"px-3 py-1 text-sm font-medium rounded-full\",\n                   \"bg-background/50 backdrop-blur-sm\",\n-                  progress === 100 && \"bg-green-500/10 text-green-500 border-green-500/20\"\n+                  \"transition-colors duration-300\",\n+                  progress === 100 && \"bg-green-500/10 text-green-500 border-green-500/20\",\n+                  \"group-hover:bg-primary/10 group-hover:border-primary/20\"\n                 )}\n               >\n                 Question {index + 1}\n               </Badge>\n               <Badge \n                 variant=\"outline\" \n                 className={cn(\n                   \"flex items-center gap-2 px-3 py-1\",\n-                  \"bg-background/50 backdrop-blur-sm\"\n+                  \"bg-background/50 backdrop-blur-sm\",\n+                  \"transition-colors duration-300\",\n+                  \"group-hover:bg-primary/10 group-hover:border-primary/20\"\n                 )}\n               >\n                 {getQuestionIcon(question.type)}\n                 <span className=\"capitalize\">\n@@ -1625,36 +1635,48 @@\n                   variant=\"outline\" \n                   className={cn(\n                     \"capitalize px-3 py-1\",\n                     \"bg-background/50 backdrop-blur-sm\",\n+                    \"transition-colors duration-300\",\n                     question.metadata.difficulty === 'beginner' && \"text-green-500 border-green-500/20\",\n                     question.metadata.difficulty === 'intermediate' && \"text-yellow-500 border-yellow-500/20\",\n-                    question.metadata.difficulty === 'advanced' && \"text-red-500 border-red-500/20\"\n+                    question.metadata.difficulty === 'advanced' && \"text-red-500 border-red-500/20\",\n+                    \"group-hover:bg-primary/10 group-hover:border-primary/20\"\n                   )}\n                 >\n                   {question.metadata.difficulty}\n                 </Badge>\n               )}\n               {Array.isArray(question.exercises) && question.exercises.length > 0 && (\n                 <Badge \n                   variant=\"outline\" \n-                  className=\"bg-primary/10 text-primary border-primary/20\"\n+                  className={cn(\n+                    \"bg-primary/10 text-primary border-primary/20\",\n+                    \"transition-colors duration-300\",\n+                    \"group-hover:bg-primary/20 group-hover:border-primary/30\"\n+                  )}\n                 >\n                   {question.exercises.length} Followups\n                 </Badge>\n               )}\n             </div>\n             <motion.div\n               animate={{ rotate: isExpanded ? 90 : 0 }}\n               transition={{ duration: 0.2 }}\n-              className=\"bg-background/50 backdrop-blur-sm p-2 rounded-full\"\n+              className={cn(\n+                \"bg-background/50 backdrop-blur-sm p-2 rounded-full\",\n+                \"transition-colors duration-300\",\n+                \"group-hover:bg-primary/10\"\n+              )}\n             >\n               <ChevronRight className=\"h-5 w-5 text-primary\" />\n             </motion.div>\n           </div>\n \n           <div className=\"mt-4 space-y-3\">\n-            <CardTitle className=\"text-xl\">{question.title || 'Untitled Question'}</CardTitle>\n+            <CardTitle className=\"text-xl group-hover:text-primary transition-colors duration-300\">\n+              {question.title || 'Untitled Question'}\n+            </CardTitle>\n             <div className=\"relative\">\n               <Progress \n                 value={progress} \n                 className={cn(\n"
                },
                {
                    "date": 1739483514555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,15 +29,9 @@\n import { Input } from \"@/components/ui/input\";\n import { Textarea } from \"@/components/ui/textarea\";\n import { Collapsible, CollapsibleTrigger, CollapsibleContent } from \"@/components/ui/collapsible\";\n import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n-import {\n-  Panel,\n-  PanelGroup,\n-  PanelResizeHandle,\n-} from \"react-resizable-panels\";\n import { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\n-import type { SplitProps } from 'react-split';\n \n // Question Types from question-form.tsx\n interface QuestionMetadata {\n   prompt?: string;\n@@ -131,13 +125,14 @@\n   const [currentAudioIndex, setCurrentAudioIndex] = useState(0);\n   const [isAudioReady, setIsAudioReady] = useState(false);\n \n   // Add these state variables in the LessonDialog component\n-  const [splitSizes, setSplitSizes] = useState<number[]>(() => {\n-    const saved = localStorage.getItem('lesson-dialog-split');\n-    return saved ? JSON.parse(saved) : [65, 35];\n+  const [startResizing, setStartResizing] = useState(false);\n+  const resizeRef = useRef<HTMLDivElement>(null);\n+  const [leftPanelWidth, setLeftPanelWidth] = useState(() => {\n+    const saved = localStorage.getItem('lesson-dialog-left-panel');\n+    return saved ? parseInt(saved) : 65;\n   });\n-  const [isMediaFullscreen, setIsMediaFullscreen] = useState(false);\n \n   // Audio event handlers\n   const handleTimeUpdate = () => {\n     if (audioRef.current) {\n@@ -276,11 +271,38 @@\n   };\n \n   // Add this effect to save split sizes\n   useEffect(() => {\n-    localStorage.setItem('lesson-dialog-split', JSON.stringify(splitSizes));\n-  }, [splitSizes]);\n+    localStorage.setItem('lesson-dialog-left-panel', leftPanelWidth.toString());\n+  }, [leftPanelWidth]);\n \n+  useEffect(() => {\n+    const handleMouseMove = (e: MouseEvent) => {\n+      if (!startResizing || !resizeRef.current) return;\n+      \n+      const containerWidth = resizeRef.current.parentElement?.clientWidth || 0;\n+      const newWidth = (e.clientX / containerWidth) * 100;\n+      const clampedWidth = Math.min(Math.max(newWidth, 30), 70); // Min 30%, Max 70%\n+      \n+      setLeftPanelWidth(clampedWidth);\n+      localStorage.setItem('lesson-dialog-left-panel', clampedWidth.toString());\n+    };\n+\n+    const handleMouseUp = () => {\n+      setStartResizing(false);\n+    };\n+\n+    if (startResizing) {\n+      document.addEventListener('mousemove', handleMouseMove);\n+      document.addEventListener('mouseup', handleMouseUp);\n+    }\n+\n+    return () => {\n+      document.removeEventListener('mousemove', handleMouseMove);\n+      document.removeEventListener('mouseup', handleMouseUp);\n+    };\n+  }, [startResizing]);\n+\n   return (\n     <Dialog open={isOpen} onOpenChange={onClose}>\n       <DialogContent \n         className=\"max-w-[100vw] w-full h-[100vh] p-0 max-h-screen bg-gradient-to-b from-background to-accent/10\"\n@@ -387,190 +409,187 @@\n           </Tabs>\n         </DialogHeader>\n \n         {/* Main Content Area */}\n-        <PanelGroup \n-          direction=\"horizontal\" \n-          className=\"h-[calc(100vh-12rem)] w-full\"\n-          onLayout={(sizes) => {\n-            localStorage.setItem('lesson-dialog-split', JSON.stringify(sizes));\n-          }}\n-        >\n+        <div className=\"flex h-[calc(100vh-12rem)] w-full\" ref={resizeRef}>\n           {/* Left Panel - Main Content */}\n-          <Panel \n-            defaultSize={splitSizes[0]} \n-            minSize={30}\n-            className=\"h-full\"\n+          <div \n+            className=\"h-full overflow-hidden transition-all duration-75\"\n+            style={{ width: `${leftPanelWidth}%` }}\n           >\n-            <div className=\"h-full overflow-hidden\">\n-              <ScrollArea className=\"h-full w-full\">\n-                <div className=\"container p-6\">\n-                  {lessonContent.isLoading ? (\n-                    <motion.div \n-                      initial={{ opacity: 0, scale: 0.95 }}\n-                      animate={{ opacity: 1, scale: 1 }}\n-                      className=\"flex items-center justify-center h-[50vh]\"\n-                    >\n-                      <LoadingSpinner message=\"Loading your lesson content...\" />\n-                    </motion.div>\n-                  ) : lessonContent.error ? (\n-                    <motion.div \n-                      initial={{ opacity: 0, y: 20 }}\n-                      animate={{ opacity: 1, y: 0 }}\n-                      className=\"flex flex-col items-center justify-center gap-4 h-[50vh]\"\n-                    >\n-                      <div className=\"p-8 bg-destructive/10 rounded-lg text-center max-w-md\">\n-                        <p className=\"text-destructive font-medium mb-4\">{lessonContent.error}</p>\n-                        <Button \n-                          onClick={onRetry} \n-                          variant=\"outline\" \n-                          className=\"gap-2 hover:bg-destructive/5\"\n-                        >\n-                          <RefreshCw className=\"h-4 w-4\" />\n-                          Retry Loading\n-                        </Button>\n-                      </div>\n-                    </motion.div>\n-                  ) : (\n-                    <Tabs defaultValue=\"content\" value={activeTab} onValueChange={handleTabChange}>\n-                      <TabsContent value=\"content\">\n-                        <ContentTab content={lessonContent.content} />\n-                      </TabsContent>\n-                      <TabsContent value=\"questions\">\n-                        <QuestionsTab \n-                          questions={lessonContent.content?.questions} \n-                          selectedIndex={selectedQuestionIndex}\n-                          onQuestionSelect={handleQuestionSelect}\n-                          onNextLesson={() => {\n-                            // Handle next lesson navigation\n-                            logger.info('Navigating to next lesson', {\n-                              source: 'LessonDialog',\n-                              context: { currentLessonId }\n-                            });\n-                          }}\n-                        />\n-                      </TabsContent>\n-                      <TabsContent value=\"exercises\">\n-                        <ExercisesTab exercises={lessonContent.content?.exercise_prompts} />\n-                      </TabsContent>\n-                    </Tabs>\n-                  )}\n-                </div>\n-              </ScrollArea>\n-            </div>\n-          </Panel>\n+            <ScrollArea className=\"h-full w-full\">\n+              <div className=\"container p-6\">\n+                {lessonContent.isLoading ? (\n+                  <motion.div \n+                    initial={{ opacity: 0, scale: 0.95 }}\n+                    animate={{ opacity: 1, scale: 1 }}\n+                    className=\"flex items-center justify-center h-[50vh]\"\n+                  >\n+                    <LoadingSpinner message=\"Loading your lesson content...\" />\n+                  </motion.div>\n+                ) : lessonContent.error ? (\n+                  <motion.div \n+                    initial={{ opacity: 0, y: 20 }}\n+                    animate={{ opacity: 1, y: 0 }}\n+                    className=\"flex flex-col items-center justify-center gap-4 h-[50vh]\"\n+                  >\n+                    <div className=\"p-8 bg-destructive/10 rounded-lg text-center max-w-md\">\n+                      <p className=\"text-destructive font-medium mb-4\">{lessonContent.error}</p>\n+                      <Button \n+                        onClick={onRetry} \n+                        variant=\"outline\" \n+                        className=\"gap-2 hover:bg-destructive/5\"\n+                      >\n+                        <RefreshCw className=\"h-4 w-4\" />\n+                        Retry Loading\n+                      </Button>\n+                    </div>\n+                  </motion.div>\n+                ) : (\n+                  <Tabs defaultValue=\"content\" value={activeTab} onValueChange={handleTabChange}>\n+                    <TabsContent value=\"content\">\n+                      <ContentTab content={lessonContent.content} />\n+                    </TabsContent>\n+                    <TabsContent value=\"questions\">\n+                      <QuestionsTab \n+                        questions={lessonContent.content?.questions} \n+                        selectedIndex={selectedQuestionIndex}\n+                        onQuestionSelect={handleQuestionSelect}\n+                        onNextLesson={() => {\n+                          // Handle next lesson navigation\n+                          logger.info('Navigating to next lesson', {\n+                            source: 'LessonDialog',\n+                            context: { currentLessonId }\n+                          });\n+                        }}\n+                      />\n+                    </TabsContent>\n+                    <TabsContent value=\"exercises\">\n+                      <ExercisesTab exercises={lessonContent.content?.exercise_prompts} />\n+                    </TabsContent>\n+                  </Tabs>\n+                )}\n+              </div>\n+            </ScrollArea>\n+          </div>\n \n           {/* Resize Handle */}\n-          <PanelResizeHandle className=\"w-2 bg-border hover:bg-primary/20 transition-colors relative group\">\n+          <div \n+            className={cn(\n+              \"w-2 bg-border hover:bg-primary/20 transition-colors relative group cursor-col-resize\",\n+              startResizing && \"bg-primary\"\n+            )}\n+            onMouseDown={() => setStartResizing(true)}\n+          >\n             <div className=\"absolute inset-y-0 left-1/2 -translate-x-1/2 w-4 flex items-center justify-center\">\n-              <div className=\"w-1 h-8 rounded-full bg-muted-foreground/20 group-hover:bg-primary/40 transition-colors\" />\n+              <div className={cn(\n+                \"w-1 h-8 rounded-full transition-colors\",\n+                startResizing ? \"bg-primary\" : \"bg-muted-foreground/20 group-hover:bg-primary/40\"\n+              )} />\n             </div>\n-          </PanelResizeHandle>\n+          </div>\n \n           {/* Right Panel - Media Preview */}\n-          <Panel \n-            defaultSize={splitSizes[1]} \n-            minSize={20}\n-            className=\"h-full\"\n+          <div \n+            className=\"h-full border-l bg-muted/10 transition-all duration-75\"\n+            style={{ width: `${100 - leftPanelWidth}%` }}\n           >\n-            <div className=\"h-full border-l bg-muted/10\">\n-              <div className=\"h-full flex flex-col\">\n-                <div className=\"p-4 border-b bg-background/50 backdrop-blur-sm flex items-center justify-between\">\n-                  <div className=\"flex items-center gap-2\">\n-                    <ImageIcon className=\"h-5 w-5 text-primary\" />\n-                    <h3 className=\"font-medium\">Media Preview</h3>\n-                  </div>\n-                  <div className=\"flex items-center gap-2\">\n-                    <Button\n-                      variant=\"ghost\"\n-                      size=\"sm\"\n-                      className=\"h-8 w-8 p-0\"\n-                      onClick={() => setIsMediaFullscreen(!isMediaFullscreen)}\n-                    >\n-                      {isMediaFullscreen ? (\n-                        <Minimize2 className=\"h-4 w-4\" />\n-                      ) : (\n-                        <Maximize2 className=\"h-4 w-4\" />\n-                      )}\n-                    </Button>\n-                  </div>\n+            <div className=\"h-full flex flex-col\">\n+              <div className=\"p-4 border-b bg-background/50 backdrop-blur-sm flex items-center justify-between\">\n+                <div className=\"flex items-center gap-2\">\n+                  <ImageIcon className=\"h-5 w-5 text-primary\" />\n+                  <h3 className=\"font-medium\">Media Preview</h3>\n                 </div>\n-                <ScrollArea className=\"flex-1\">\n-                  <div className=\"p-6 space-y-4\">\n-                    {lessonContent.content?.media ? (\n-                      <div className=\"space-y-4\">\n-                        {lessonContent.content.media.map((item: any, index: number) => (\n-                          <motion.div\n-                            key={index}\n-                            initial={{ opacity: 0, scale: 0.95 }}\n-                            animate={{ opacity: 1, scale: 1 }}\n-                            transition={{ delay: index * 0.1 }}\n-                            className={cn(\n-                              \"relative group rounded-xl overflow-hidden\",\n-                              \"ring-1 ring-primary/10 hover:ring-primary/30 transition-all\",\n-                              \"shadow-lg hover:shadow-xl\",\n-                              isMediaFullscreen && \"fixed inset-0 z-50 bg-background/95 backdrop-blur-sm p-8\"\n-                            )}\n-                          >\n-                            {item.type === 'image' ? (\n-                              <img\n-                                src={item.url}\n-                                alt={`Media ${index + 1}`}\n-                                className={cn(\n-                                  \"w-full rounded-lg transition-all duration-300\",\n-                                  \"hover:scale-[1.02] cursor-zoom-in\",\n-                                  isMediaFullscreen && \"object-contain h-full mx-auto cursor-zoom-out\"\n-                                )}\n-                                onClick={() => setIsMediaFullscreen(!isMediaFullscreen)}\n-                              />\n-                            ) : item.type === 'video' && (\n-                              <video\n-                                src={item.url}\n-                                controls\n-                                className={cn(\n-                                  \"w-full rounded-lg transition-all duration-300\",\n-                                  \"hover:scale-[1.02]\",\n-                                  isMediaFullscreen && \"h-full mx-auto object-contain\"\n-                                )}\n-                                preload=\"metadata\"\n-                              />\n-                            )}\n-                            <div className={cn(\n-                              \"absolute inset-0 bg-gradient-to-t from-black/50 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\",\n-                              \"flex items-end justify-between p-4\",\n-                              isMediaFullscreen && \"!opacity-100\"\n-                            )}>\n-                              <Badge variant=\"outline\" className=\"bg-background/80 backdrop-blur-sm\">\n-                                {item.type === 'image' ? 'Image' : 'Video'} {index + 1}\n-                              </Badge>\n-                              <Button\n-                                variant=\"ghost\"\n-                                size=\"sm\"\n-                                className=\"text-white hover:bg-white/20\"\n-                                onClick={() => setIsMediaFullscreen(!isMediaFullscreen)}\n-                              >\n-                                {isMediaFullscreen ? (\n-                                  <Minimize2 className=\"h-4 w-4\" />\n-                                ) : (\n-                                  <Maximize2 className=\"h-4 w-4\" />\n-                                )}\n-                              </Button>\n-                            </div>\n-                          </motion.div>\n-                        ))}\n-                      </div>\n+                <div className=\"flex items-center gap-2\">\n+                  <Button\n+                    variant=\"ghost\"\n+                    size=\"sm\"\n+                    className=\"h-8 w-8 p-0\"\n+                    onClick={() => setIsMediaFullscreen(!isMediaFullscreen)}\n+                  >\n+                    {isMediaFullscreen ? (\n+                      <Minimize2 className=\"h-4 w-4\" />\n                     ) : (\n-                      <div className=\"flex flex-col items-center justify-center py-8 text-muted-foreground\">\n-                        <ImageIcon className=\"h-12 w-12 mb-4 opacity-50\" />\n-                        <p>No media available</p>\n-                      </div>\n+                      <Maximize2 className=\"h-4 w-4\" />\n                     )}\n-                  </div>\n-                </ScrollArea>\n+                  </Button>\n+                </div>\n               </div>\n+              <ScrollArea className=\"flex-1\">\n+                <div className=\"p-6 space-y-4\">\n+                  {lessonContent.content?.media ? (\n+                    <div className=\"space-y-4\">\n+                      {lessonContent.content.media.map((item: any, index: number) => (\n+                        <motion.div\n+                          key={index}\n+                          initial={{ opacity: 0, scale: 0.95 }}\n+                          animate={{ opacity: 1, scale: 1 }}\n+                          transition={{ delay: index * 0.1 }}\n+                          className={cn(\n+                            \"relative group rounded-xl overflow-hidden\",\n+                            \"ring-1 ring-primary/10 hover:ring-primary/30 transition-all\",\n+                            \"shadow-lg hover:shadow-xl\",\n+                            isMediaFullscreen && \"fixed inset-0 z-50 bg-background/95 backdrop-blur-sm p-8\"\n+                          )}\n+                        >\n+                          {item.type === 'image' ? (\n+                            <img\n+                              src={item.url}\n+                              alt={`Media ${index + 1}`}\n+                              className={cn(\n+                                \"w-full rounded-lg transition-all duration-300\",\n+                                \"hover:scale-[1.02] cursor-zoom-in\",\n+                                isMediaFullscreen && \"object-contain h-full mx-auto cursor-zoom-out\"\n+                              )}\n+                              onClick={() => setIsMediaFullscreen(!isMediaFullscreen)}\n+                            />\n+                          ) : item.type === 'video' && (\n+                            <video\n+                              src={item.url}\n+                              controls\n+                              className={cn(\n+                                \"w-full rounded-lg transition-all duration-300\",\n+                                \"hover:scale-[1.02]\",\n+                                isMediaFullscreen && \"h-full mx-auto object-contain\"\n+                              )}\n+                              preload=\"metadata\"\n+                            />\n+                          )}\n+                          <div className={cn(\n+                            \"absolute inset-0 bg-gradient-to-t from-black/50 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\",\n+                            \"flex items-end justify-between p-4\",\n+                            isMediaFullscreen && \"!opacity-100\"\n+                          )}>\n+                            <Badge variant=\"outline\" className=\"bg-background/80 backdrop-blur-sm\">\n+                              {item.type === 'image' ? 'Image' : 'Video'} {index + 1}\n+                            </Badge>\n+                            <Button\n+                              variant=\"ghost\"\n+                              size=\"sm\"\n+                              className=\"text-white hover:bg-white/20\"\n+                              onClick={() => setIsMediaFullscreen(!isMediaFullscreen)}\n+                            >\n+                              {isMediaFullscreen ? (\n+                                <Minimize2 className=\"h-4 w-4\" />\n+                              ) : (\n+                                <Maximize2 className=\"h-4 w-4\" />\n+                              )}\n+                            </Button>\n+                          </div>\n+                        </motion.div>\n+                      ))}\n+                    </div>\n+                  ) : (\n+                    <div className=\"flex flex-col items-center justify-center py-8 text-muted-foreground\">\n+                      <ImageIcon className=\"h-12 w-12 mb-4 opacity-50\" />\n+                      <p>No media available</p>\n+                    </div>\n+                  )}\n+                </div>\n+              </ScrollArea>\n             </div>\n-          </Panel>\n-        </PanelGroup>\n+          </div>\n+        </div>\n \n         {/* Fullscreen Media Sheet */}\n         <Sheet open={isMediaFullscreen} onOpenChange={setIsMediaFullscreen}>\n           <SheetContent side=\"right\" className=\"w-full sm:w-[90vw] p-0\">\n"
                },
                {
                    "date": 1739483584681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,8 +125,9 @@\n   const [currentAudioIndex, setCurrentAudioIndex] = useState(0);\n   const [isAudioReady, setIsAudioReady] = useState(false);\n \n   // Add these state variables in the LessonDialog component\n+  const [isMediaFullscreen, setIsMediaFullscreen] = useState(false);\n   const [startResizing, setStartResizing] = useState(false);\n   const resizeRef = useRef<HTMLDivElement>(null);\n   const [leftPanelWidth, setLeftPanelWidth] = useState(() => {\n     const saved = localStorage.getItem('lesson-dialog-left-panel');\n"
                },
                {
                    "date": 1739483986342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,8 +133,11 @@\n     const saved = localStorage.getItem('lesson-dialog-left-panel');\n     return saved ? parseInt(saved) : 65;\n   });\n \n+  // Add this new state for resize hover effect\n+  const [isResizeHovered, setIsResizeHovered] = useState(false);\n+\n   // Audio event handlers\n   const handleTimeUpdate = () => {\n     if (audioRef.current) {\n       const progress = (audioRef.current.currentTime / audioRef.current.duration) * 100;\n@@ -275,32 +278,42 @@\n   useEffect(() => {\n     localStorage.setItem('lesson-dialog-left-panel', leftPanelWidth.toString());\n   }, [leftPanelWidth]);\n \n+  // Update the resize handler\n   useEffect(() => {\n     const handleMouseMove = (e: MouseEvent) => {\n-      if (!startResizing || !resizeRef.current) return;\n+      if (!startResizing) return;\n       \n-      const containerWidth = resizeRef.current.parentElement?.clientWidth || 0;\n-      const newWidth = (e.clientX / containerWidth) * 100;\n-      const clampedWidth = Math.min(Math.max(newWidth, 30), 70); // Min 30%, Max 70%\n+      e.preventDefault();\n+      const container = resizeRef.current?.parentElement;\n+      if (!container) return;\n+\n+      const containerRect = container.getBoundingClientRect();\n+      const newWidth = ((e.clientX - containerRect.left) / containerRect.width) * 100;\n+      const clampedWidth = Math.min(Math.max(newWidth, 30), 70);\n       \n       setLeftPanelWidth(clampedWidth);\n-      localStorage.setItem('lesson-dialog-left-panel', clampedWidth.toString());\n     };\n \n     const handleMouseUp = () => {\n       setStartResizing(false);\n+      document.body.style.cursor = 'default';\n+      document.body.style.userSelect = 'auto';\n     };\n \n     if (startResizing) {\n+      document.body.style.cursor = 'col-resize';\n+      document.body.style.userSelect = 'none';\n       document.addEventListener('mousemove', handleMouseMove);\n       document.addEventListener('mouseup', handleMouseUp);\n     }\n \n     return () => {\n       document.removeEventListener('mousemove', handleMouseMove);\n       document.removeEventListener('mouseup', handleMouseUp);\n+      document.body.style.cursor = 'default';\n+      document.body.style.userSelect = 'auto';\n     };\n   }, [startResizing]);\n \n   return (\n@@ -475,17 +488,28 @@\n \n           {/* Resize Handle */}\n           <div \n             className={cn(\n-              \"w-2 bg-border hover:bg-primary/20 transition-colors relative group cursor-col-resize\",\n-              startResizing && \"bg-primary\"\n+              \"w-6 relative cursor-col-resize select-none group z-10\",\n+              startResizing && \"active\"\n             )}\n             onMouseDown={() => setStartResizing(true)}\n+            onMouseEnter={() => setIsResizeHovered(true)}\n+            onMouseLeave={() => setIsResizeHovered(false)}\n           >\n-            <div className=\"absolute inset-y-0 left-1/2 -translate-x-1/2 w-4 flex items-center justify-center\">\n-              <div className={cn(\n-                \"w-1 h-8 rounded-full transition-colors\",\n-                startResizing ? \"bg-primary\" : \"bg-muted-foreground/20 group-hover:bg-primary/40\"\n+            <div className={cn(\n+              \"absolute inset-y-0 left-1/2 -translate-x-1/2 w-px transition-all duration-200\",\n+              (startResizing || isResizeHovered) ? \"bg-primary/50 w-0.5\" : \"bg-border\"\n+            )} />\n+            <div className={cn(\n+              \"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2\",\n+              \"w-4 h-8 rounded-full flex items-center justify-center\",\n+              \"transition-all duration-200\",\n+              (startResizing || isResizeHovered) ? \"bg-primary/20\" : \"bg-transparent\"\n+            )}>\n+              <GripVertical className={cn(\n+                \"h-4 w-4 transition-colors duration-200\",\n+                (startResizing || isResizeHovered) ? \"text-primary\" : \"text-muted-foreground/50\"\n               )} />\n             </div>\n           </div>\n \n"
                },
                {
                    "date": 1739484103075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1629,20 +1629,23 @@\n     >\n       <Card \n         className={cn(\n           \"overflow-hidden transition-all duration-300\",\n-          \"border border-primary/10 shadow-lg\",\n+          \"border border-primary/10\",\n           \"bg-gradient-to-r\",\n           getQuestionColor(question.type),\n           isExpanded && \"ring-2 ring-primary/20 ring-offset-2\",\n           \"hover:shadow-xl hover:translate-y-[-2px]\",\n-          \"group\"\n+          \"group backdrop-blur-sm\",\n+          \"animate-in slide-in-from-bottom-2\",\n+          progress === 100 && \"bg-opacity-50\"\n         )}\n       >\n         <CardHeader \n           className={cn(\n             \"cursor-pointer select-none p-6\",\n-            \"transition-colors duration-300\",\n+            \"transition-all duration-300\",\n+            \"hover:bg-primary/5 backdrop-blur-sm\",\n             isExpanded && \"bg-primary/5\"\n           )}\n           onClick={onToggle}\n         >\n@@ -1651,66 +1654,43 @@\n               <Badge \n                 variant=\"outline\" \n                 className={cn(\n                   \"px-3 py-1 text-sm font-medium rounded-full\",\n-                  \"bg-background/50 backdrop-blur-sm\",\n-                  \"transition-colors duration-300\",\n+                  \"bg-background/50 backdrop-blur-sm shadow-sm\",\n+                  \"border border-primary/20\",\n+                  \"transition-all duration-300\",\n                   progress === 100 && \"bg-green-500/10 text-green-500 border-green-500/20\",\n-                  \"group-hover:bg-primary/10 group-hover:border-primary/20\"\n+                  \"group-hover:bg-primary/10 group-hover:border-primary/20\",\n+                  \"animate-in zoom-in-50 duration-300\"\n                 )}\n               >\n                 Question {index + 1}\n               </Badge>\n               <Badge \n                 variant=\"outline\" \n                 className={cn(\n                   \"flex items-center gap-2 px-3 py-1\",\n-                  \"bg-background/50 backdrop-blur-sm\",\n-                  \"transition-colors duration-300\",\n-                  \"group-hover:bg-primary/10 group-hover:border-primary/20\"\n+                  \"bg-background/50 backdrop-blur-sm shadow-sm\",\n+                  \"border border-primary/20\",\n+                  \"transition-all duration-300\",\n+                  \"group-hover:bg-primary/10 group-hover:border-primary/20\",\n+                  \"animate-in zoom-in-50 duration-300 delay-100\"\n                 )}\n               >\n                 {getQuestionIcon(question.type)}\n                 <span className=\"capitalize\">\n                   {isQuestionType(question.type) ? QUESTION_TYPES[question.type as QuestionType]?.label : question.type}\n                 </span>\n               </Badge>\n-              {question.metadata?.difficulty && (\n-                <Badge \n-                  variant=\"outline\" \n-                  className={cn(\n-                    \"capitalize px-3 py-1\",\n-                    \"bg-background/50 backdrop-blur-sm\",\n-                    \"transition-colors duration-300\",\n-                    question.metadata.difficulty === 'beginner' && \"text-green-500 border-green-500/20\",\n-                    question.metadata.difficulty === 'intermediate' && \"text-yellow-500 border-yellow-500/20\",\n-                    question.metadata.difficulty === 'advanced' && \"text-red-500 border-red-500/20\",\n-                    \"group-hover:bg-primary/10 group-hover:border-primary/20\"\n-                  )}\n-                >\n-                  {question.metadata.difficulty}\n-                </Badge>\n-              )}\n-              {Array.isArray(question.exercises) && question.exercises.length > 0 && (\n-                <Badge \n-                  variant=\"outline\" \n-                  className={cn(\n-                    \"bg-primary/10 text-primary border-primary/20\",\n-                    \"transition-colors duration-300\",\n-                    \"group-hover:bg-primary/20 group-hover:border-primary/30\"\n-                  )}\n-                >\n-                  {question.exercises.length} Followups\n-                </Badge>\n-              )}\n             </div>\n             <motion.div\n               animate={{ rotate: isExpanded ? 90 : 0 }}\n-              transition={{ duration: 0.2 }}\n+              transition={{ duration: 0.3, type: \"spring\", stiffness: 200 }}\n               className={cn(\n                 \"bg-background/50 backdrop-blur-sm p-2 rounded-full\",\n-                \"transition-colors duration-300\",\n-                \"group-hover:bg-primary/10\"\n+                \"transition-all duration-300\",\n+                \"group-hover:bg-primary/10\",\n+                \"shadow-sm border border-primary/20\"\n               )}\n             >\n               <ChevronRight className=\"h-5 w-5 text-primary\" />\n             </motion.div>\n@@ -1720,26 +1700,38 @@\n             <CardTitle className=\"text-xl group-hover:text-primary transition-colors duration-300\">\n               {question.title || 'Untitled Question'}\n             </CardTitle>\n             <div className=\"relative\">\n+              <div className=\"absolute inset-0 bg-gradient-to-r from-primary/5 to-primary/10 rounded-full\" />\n               <Progress \n                 value={progress} \n                 className={cn(\n-                  \"h-2 rounded-full bg-background/50\",\n-                  progress === 100 && \"bg-green-500/20\"\n+                  \"h-2 rounded-full\",\n+                  \"transition-all duration-300\",\n+                  progress === 100 \n+                    ? \"bg-green-500/20\" \n+                    : \"bg-primary/10\"\n                 )}\n               />\n               <p className=\"text-sm text-muted-foreground mt-2 flex items-center gap-2\">\n                 {progress === 100 ? (\n-                  <span className=\"flex items-center gap-1 text-green-500\">\n+                  <motion.span \n+                    initial={{ scale: 0 }}\n+                    animate={{ scale: 1 }}\n+                    className=\"flex items-center gap-1 text-green-500\"\n+                  >\n                     <CheckCircle2 className=\"h-4 w-4\" />\n                     Completed\n-                  </span>\n+                  </motion.span>\n                 ) : (\n-                  <>\n+                  <motion.span\n+                    initial={{ opacity: 0 }}\n+                    animate={{ opacity: 1 }}\n+                    className=\"flex items-center gap-1\"\n+                  >\n                     <Clock className=\"h-4 w-4\" />\n                     {`${Math.round(progress)}% complete`}\n-                  </>\n+                  </motion.span>\n                 )}\n               </p>\n             </div>\n           </div>\n@@ -1750,18 +1742,28 @@\n             <motion.div\n               initial={{ height: 0, opacity: 0 }}\n               animate={{ height: \"auto\", opacity: 1 }}\n               exit={{ height: 0, opacity: 0 }}\n-              transition={{ duration: 0.3 }}\n+              transition={{ duration: 0.3, type: \"spring\", stiffness: 200 }}\n             >\n               <CardContent className=\"p-6 pt-0\">\n                 <div className=\"space-y-6\">\n-                  <div className=\"bg-background/50 backdrop-blur-sm rounded-lg p-4 border border-primary/10\">\n+                  <motion.div\n+                    initial={{ opacity: 0, y: 20 }}\n+                    animate={{ opacity: 1, y: 0 }}\n+                    transition={{ delay: 0.1 }}\n+                    className=\"bg-background/50 backdrop-blur-sm rounded-lg p-4 border border-primary/10 shadow-sm\"\n+                  >\n                     <p className=\"text-muted-foreground\">{question.content || 'No content available.'}</p>\n-                  </div>\n-                  <div className=\"bg-background/80 backdrop-blur-sm rounded-lg p-4 border border-primary/10\">\n+                  </motion.div>\n+                  <motion.div\n+                    initial={{ opacity: 0, y: 20 }}\n+                    animate={{ opacity: 1, y: 0 }}\n+                    transition={{ delay: 0.2 }}\n+                    className=\"bg-background/80 backdrop-blur-sm rounded-lg p-4 border border-primary/10 shadow-sm\"\n+                  >\n                     {renderQuestionContent()}\n-                  </div>\n+                  </motion.div>\n                   {renderFollowupPrompts()}\n                 </div>\n               </CardContent>\n             </motion.div>\n"
                },
                {
                    "date": 1739484162508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -514,14 +514,21 @@\n           </div>\n \n           {/* Right Panel - Media Preview */}\n           <div \n-            className=\"h-full border-l bg-muted/10 transition-all duration-75\"\n+            className={cn(\n+              \"h-full border-l bg-muted/5 backdrop-blur-sm transition-all duration-75\",\n+              \"relative overflow-hidden\"\n+            )}\n             style={{ width: `${100 - leftPanelWidth}%` }}\n           >\n             <div className=\"h-full flex flex-col\">\n-              <div className=\"p-4 border-b bg-background/50 backdrop-blur-sm flex items-center justify-between\">\n+              <div className=\"p-4 border-b bg-background/50 backdrop-blur-sm flex items-center justify-between sticky top-0 z-10\">\n                 <div className=\"flex items-center gap-2\">\n+                  <div className=\"p-2 rounded-full bg-primary/10\">\n+                    <ImageIcon className=\"h-5 w-5 text-primary\" />\n+                  </div>\n+                  <h3 className=\"font-medium text-primary\">Media Preview</h3>\n                   <ImageIcon className=\"h-5 w-5 text-primary\" />\n                   <h3 className=\"font-medium\">Media Preview</h3>\n                 </div>\n                 <div className=\"flex items-center gap-2\">\n"
                },
                {
                    "date": 1739484169772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -527,16 +527,18 @@\n                   <div className=\"p-2 rounded-full bg-primary/10\">\n                     <ImageIcon className=\"h-5 w-5 text-primary\" />\n                   </div>\n                   <h3 className=\"font-medium text-primary\">Media Preview</h3>\n-                  <ImageIcon className=\"h-5 w-5 text-primary\" />\n-                  <h3 className=\"font-medium\">Media Preview</h3>\n                 </div>\n                 <div className=\"flex items-center gap-2\">\n                   <Button\n                     variant=\"ghost\"\n                     size=\"sm\"\n-                    className=\"h-8 w-8 p-0\"\n+                    className={cn(\n+                      \"h-8 w-8 p-0 rounded-full\",\n+                      \"hover:bg-primary/10 hover:text-primary\",\n+                      \"transition-all duration-200\"\n+                    )}\n                     onClick={() => setIsMediaFullscreen(!isMediaFullscreen)}\n                   >\n                     {isMediaFullscreen ? (\n                       <Minimize2 className=\"h-4 w-4\" />\n@@ -546,76 +548,125 @@\n                   </Button>\n                 </div>\n               </div>\n               <ScrollArea className=\"flex-1\">\n-                <div className=\"p-6 space-y-4\">\n+                <div className=\"p-6 space-y-6\">\n                   {lessonContent.content?.media ? (\n-                    <div className=\"space-y-4\">\n+                    <div className=\"space-y-6\">\n                       {lessonContent.content.media.map((item: any, index: number) => (\n                         <motion.div\n                           key={index}\n                           initial={{ opacity: 0, scale: 0.95 }}\n                           animate={{ opacity: 1, scale: 1 }}\n-                          transition={{ delay: index * 0.1 }}\n+                          transition={{ \n+                            delay: index * 0.1,\n+                            type: \"spring\",\n+                            stiffness: 200,\n+                            damping: 20\n+                          }}\n                           className={cn(\n                             \"relative group rounded-xl overflow-hidden\",\n-                            \"ring-1 ring-primary/10 hover:ring-primary/30 transition-all\",\n-                            \"shadow-lg hover:shadow-xl\",\n-                            isMediaFullscreen && \"fixed inset-0 z-50 bg-background/95 backdrop-blur-sm p-8\"\n+                            \"ring-1 ring-primary/10 hover:ring-primary/30\",\n+                            \"transition-all duration-300\",\n+                            \"bg-gradient-to-br from-background/50 to-background/30\",\n+                            \"backdrop-blur-sm shadow-xl\",\n+                            isMediaFullscreen && \"fixed inset-0 z-50 bg-background/95 backdrop-blur-md p-8\"\n                           )}\n                         >\n                           {item.type === 'image' ? (\n-                            <img\n-                              src={item.url}\n-                              alt={`Media ${index + 1}`}\n-                              className={cn(\n-                                \"w-full rounded-lg transition-all duration-300\",\n-                                \"hover:scale-[1.02] cursor-zoom-in\",\n-                                isMediaFullscreen && \"object-contain h-full mx-auto cursor-zoom-out\"\n-                              )}\n-                              onClick={() => setIsMediaFullscreen(!isMediaFullscreen)}\n-                            />\n+                            <div className=\"relative aspect-video\">\n+                              <img\n+                                src={item.url}\n+                                alt={`Media ${index + 1}`}\n+                                className={cn(\n+                                  \"w-full h-full object-cover rounded-lg\",\n+                                  \"transition-all duration-500\",\n+                                  \"hover:scale-[1.02] cursor-zoom-in\",\n+                                  \"group-hover:brightness-110\",\n+                                  isMediaFullscreen && \"object-contain h-full mx-auto cursor-zoom-out\"\n+                                )}\n+                                onClick={() => setIsMediaFullscreen(!isMediaFullscreen)}\n+                              />\n+                              <div className={cn(\n+                                \"absolute inset-0 bg-gradient-to-t from-black/50 via-transparent to-transparent\",\n+                                \"opacity-0 group-hover:opacity-100 transition-opacity duration-300\"\n+                              )} />\n+                            </div>\n                           ) : item.type === 'video' && (\n-                            <video\n-                              src={item.url}\n-                              controls\n-                              className={cn(\n-                                \"w-full rounded-lg transition-all duration-300\",\n-                                \"hover:scale-[1.02]\",\n-                                isMediaFullscreen && \"h-full mx-auto object-contain\"\n-                              )}\n-                              preload=\"metadata\"\n-                            />\n+                            <div className=\"relative aspect-video\">\n+                              <video\n+                                src={item.url}\n+                                controls\n+                                className={cn(\n+                                  \"w-full h-full object-cover rounded-lg\",\n+                                  \"transition-all duration-500\",\n+                                  \"hover:scale-[1.02]\",\n+                                  \"group-hover:brightness-110\",\n+                                  isMediaFullscreen && \"h-full mx-auto object-contain\"\n+                                )}\n+                                preload=\"metadata\"\n+                              />\n+                              <div className={cn(\n+                                \"absolute inset-0 bg-gradient-to-t from-black/50 via-transparent to-transparent\",\n+                                \"opacity-0 group-hover:opacity-100 transition-opacity duration-300\"\n+                              )} />\n+                            </div>\n                           )}\n                           <div className={cn(\n-                            \"absolute inset-0 bg-gradient-to-t from-black/50 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\",\n-                            \"flex items-end justify-between p-4\",\n-                            isMediaFullscreen && \"!opacity-100\"\n+                            \"absolute inset-x-0 bottom-0 p-4\",\n+                            \"bg-gradient-to-t from-black/80 to-transparent\",\n+                            \"opacity-0 group-hover:opacity-100 transition-all duration-300 translate-y-1 group-hover:translate-y-0\",\n+                            isMediaFullscreen && \"!opacity-100 !translate-y-0\"\n                           )}>\n-                            <Badge variant=\"outline\" className=\"bg-background/80 backdrop-blur-sm\">\n-                              {item.type === 'image' ? 'Image' : 'Video'} {index + 1}\n-                            </Badge>\n-                            <Button\n-                              variant=\"ghost\"\n-                              size=\"sm\"\n-                              className=\"text-white hover:bg-white/20\"\n-                              onClick={() => setIsMediaFullscreen(!isMediaFullscreen)}\n-                            >\n-                              {isMediaFullscreen ? (\n-                                <Minimize2 className=\"h-4 w-4\" />\n-                              ) : (\n-                                <Maximize2 className=\"h-4 w-4\" />\n-                              )}\n-                            </Button>\n+                            <div className=\"flex items-center justify-between\">\n+                              <Badge variant=\"outline\" className={cn(\n+                                \"bg-background/80 backdrop-blur-sm\",\n+                                \"border-primary/20 text-primary\",\n+                                \"px-3 py-1 rounded-full\"\n+                              )}>\n+                                {item.type === 'image' ? (\n+                                  <span className=\"flex items-center gap-2\">\n+                                    <ImageIcon className=\"h-4 w-4\" />\n+                                    Image {index + 1}\n+                                  </span>\n+                                ) : (\n+                                  <span className=\"flex items-center gap-2\">\n+                                    <Video className=\"h-4 w-4\" />\n+                                    Video {index + 1}\n+                                  </span>\n+                                )}\n+                              </Badge>\n+                              <Button\n+                                variant=\"ghost\"\n+                                size=\"sm\"\n+                                className={cn(\n+                                  \"text-white hover:bg-white/20\",\n+                                  \"rounded-full h-8 w-8 p-0\"\n+                                )}\n+                                onClick={() => setIsMediaFullscreen(!isMediaFullscreen)}\n+                              >\n+                                {isMediaFullscreen ? (\n+                                  <Minimize2 className=\"h-4 w-4\" />\n+                                ) : (\n+                                  <Maximize2 className=\"h-4 w-4\" />\n+                                )}\n+                              </Button>\n+                            </div>\n                           </div>\n                         </motion.div>\n                       ))}\n                     </div>\n                   ) : (\n-                    <div className=\"flex flex-col items-center justify-center py-8 text-muted-foreground\">\n-                      <ImageIcon className=\"h-12 w-12 mb-4 opacity-50\" />\n-                      <p>No media available</p>\n-                    </div>\n+                    <motion.div\n+                      initial={{ opacity: 0, y: 20 }}\n+                      animate={{ opacity: 1, y: 0 }}\n+                      className=\"flex flex-col items-center justify-center py-12 text-muted-foreground\"\n+                    >\n+                      <div className=\"p-4 rounded-full bg-primary/5 mb-4\">\n+                        <ImageIcon className=\"h-12 w-12 text-primary opacity-50\" />\n+                      </div>\n+                      <p className=\"text-center text-sm\">No media available for this lesson</p>\n+                    </motion.div>\n                   )}\n                 </div>\n               </ScrollArea>\n             </div>\n"
                },
                {
                    "date": 1739514877964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -757,32 +757,84 @@\n \n // Content Tab Component\n function ContentTab({ content }: { content: any }) {\n   return (\n-    <motion.div\n-      initial={{ opacity: 0 }}\n-      animate={{ opacity: 1 }}\n-      exit={{ opacity: 0 }}\n-      transition={{ duration: 0.2 }}\n-      className=\"space-y-8\"\n-    >\n-      <Card className=\"prose prose-sm max-w-none dark:prose-invert border-primary/10 shadow-md\">\n-        <CardHeader>\n-          <CardTitle className=\"flex items-center gap-2\">\n-            <BookOpen className=\"h-5 w-5 text-primary\" />\n-            Lesson Content\n-          </CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <div \n-            className=\"mt-4\"\n-            dangerouslySetInnerHTML={{ \n-              __html: content?.content || 'No content available' \n-            }} \n-          />\n-        </CardContent>\n-      </Card>\n-    </motion.div>\n+    <div className=\"space-y-8\">\n+      {/* Questions Section */}\n+      {content?.questions && content.questions.length > 0 && (\n+        <section className=\"space-y-4\">\n+          <h2 className=\"text-2xl font-bold flex items-center gap-2\">\n+            <HelpCircle className=\"h-6 w-6 text-primary\" />\n+            Questions\n+          </h2>\n+          <div className=\"grid gap-4\">\n+            {content.questions.map((question: any, index: number) => (\n+              <Card key={question.id} className=\"relative overflow-hidden\">\n+                <CardHeader>\n+                  <CardTitle className=\"flex items-center gap-2\">\n+                    <QuestionTypeIcon type={question.type} className=\"h-5 w-5\" />\n+                    Question {index + 1}: {question.title}\n+                  </CardTitle>\n+                </CardHeader>\n+                <CardContent className=\"space-y-4\">\n+                  <div className=\"prose dark:prose-invert max-w-none\">\n+                    {question.content}\n+                  </div>\n+                  {/* Exercise Prompts for this Question */}\n+                  {question.exercises && question.exercises.length > 0 && (\n+                    <div className=\"mt-4 space-y-3\">\n+                      <h4 className=\"font-medium text-sm text-muted-foreground\">Related Exercises:</h4>\n+                      {question.exercises.map((exercise: any) => (\n+                        <div key={exercise.id} className=\"pl-4 border-l-2 border-primary/20\">\n+                          <p className=\"text-sm\">{exercise.text}</p>\n+                        </div>\n+                      ))}\n+                    </div>\n+                  )}\n+                </CardContent>\n+              </Card>\n+            ))}\n+          </div>\n+        </section>\n+      )}\n+\n+      {/* Activities Section */}\n+      {content?.activities && content.activities.length > 0 && (\n+        <section className=\"space-y-4\">\n+          <h2 className=\"text-2xl font-bold flex items-center gap-2\">\n+            <Target className=\"h-6 w-6 text-primary\" />\n+            Activities\n+          </h2>\n+          <div className=\"grid gap-4\">\n+            {content.activities.map((activity: any, index: number) => (\n+              <Card key={activity.id}>\n+                <CardHeader>\n+                  <CardTitle>Activity {index + 1}: {activity.title}</CardTitle>\n+                </CardHeader>\n+                <CardContent>\n+                  <div className=\"prose dark:prose-invert max-w-none\">\n+                    {activity.description}\n+                  </div>\n+                </CardContent>\n+              </Card>\n+            ))}\n+          </div>\n+        </section>\n+      )}\n+\n+      {/* Lesson Content Section */}\n+      <section className=\"space-y-4\">\n+        <h2 className=\"text-2xl font-bold flex items-center gap-2\">\n+          <BookOpen className=\"h-6 w-6 text-primary\" />\n+          Lesson Content\n+        </h2>\n+        <Card>\n+          <CardContent className=\"prose dark:prose-invert max-w-none pt-6\">\n+            {content?.content}\n+          </CardContent>\n+        </Card>\n+      </section>\n+    </div>\n   );\n }\n \n // Questions Tab Component\n@@ -1715,9 +1767,8 @@\n                   \"px-3 py-1 text-sm font-medium rounded-full\",\n                   \"bg-background/50 backdrop-blur-sm shadow-sm\",\n                   \"border border-primary/20\",\n                   \"transition-all duration-300\",\n-                  progress === 100 && \"bg-green-500/10 text-green-500 border-green-500/20\",\n                   \"group-hover:bg-primary/10 group-hover:border-primary/20\",\n                   \"animate-in zoom-in-50 duration-300\"\n                 )}\n               >\n"
                },
                {
                    "date": 1739514889445,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -757,84 +757,32 @@\n \n // Content Tab Component\n function ContentTab({ content }: { content: any }) {\n   return (\n-    <div className=\"space-y-8\">\n-      {/* Questions Section */}\n-      {content?.questions && content.questions.length > 0 && (\n-        <section className=\"space-y-4\">\n-          <h2 className=\"text-2xl font-bold flex items-center gap-2\">\n-            <HelpCircle className=\"h-6 w-6 text-primary\" />\n-            Questions\n-          </h2>\n-          <div className=\"grid gap-4\">\n-            {content.questions.map((question: any, index: number) => (\n-              <Card key={question.id} className=\"relative overflow-hidden\">\n-                <CardHeader>\n-                  <CardTitle className=\"flex items-center gap-2\">\n-                    <QuestionTypeIcon type={question.type} className=\"h-5 w-5\" />\n-                    Question {index + 1}: {question.title}\n-                  </CardTitle>\n-                </CardHeader>\n-                <CardContent className=\"space-y-4\">\n-                  <div className=\"prose dark:prose-invert max-w-none\">\n-                    {question.content}\n-                  </div>\n-                  {/* Exercise Prompts for this Question */}\n-                  {question.exercises && question.exercises.length > 0 && (\n-                    <div className=\"mt-4 space-y-3\">\n-                      <h4 className=\"font-medium text-sm text-muted-foreground\">Related Exercises:</h4>\n-                      {question.exercises.map((exercise: any) => (\n-                        <div key={exercise.id} className=\"pl-4 border-l-2 border-primary/20\">\n-                          <p className=\"text-sm\">{exercise.text}</p>\n-                        </div>\n-                      ))}\n-                    </div>\n-                  )}\n-                </CardContent>\n-              </Card>\n-            ))}\n-          </div>\n-        </section>\n-      )}\n-\n-      {/* Activities Section */}\n-      {content?.activities && content.activities.length > 0 && (\n-        <section className=\"space-y-4\">\n-          <h2 className=\"text-2xl font-bold flex items-center gap-2\">\n-            <Target className=\"h-6 w-6 text-primary\" />\n-            Activities\n-          </h2>\n-          <div className=\"grid gap-4\">\n-            {content.activities.map((activity: any, index: number) => (\n-              <Card key={activity.id}>\n-                <CardHeader>\n-                  <CardTitle>Activity {index + 1}: {activity.title}</CardTitle>\n-                </CardHeader>\n-                <CardContent>\n-                  <div className=\"prose dark:prose-invert max-w-none\">\n-                    {activity.description}\n-                  </div>\n-                </CardContent>\n-              </Card>\n-            ))}\n-          </div>\n-        </section>\n-      )}\n-\n-      {/* Lesson Content Section */}\n-      <section className=\"space-y-4\">\n-        <h2 className=\"text-2xl font-bold flex items-center gap-2\">\n-          <BookOpen className=\"h-6 w-6 text-primary\" />\n-          Lesson Content\n-        </h2>\n-        <Card>\n-          <CardContent className=\"prose dark:prose-invert max-w-none pt-6\">\n-            {content?.content}\n-          </CardContent>\n-        </Card>\n-      </section>\n-    </div>\n+    <motion.div\n+      initial={{ opacity: 0 }}\n+      animate={{ opacity: 1 }}\n+      exit={{ opacity: 0 }}\n+      transition={{ duration: 0.2 }}\n+      className=\"space-y-8\"\n+    >\n+      <Card className=\"prose prose-sm max-w-none dark:prose-invert border-primary/10 shadow-md\">\n+        <CardHeader>\n+          <CardTitle className=\"flex items-center gap-2\">\n+            <BookOpen className=\"h-5 w-5 text-primary\" />\n+            Lesson Content\n+          </CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <div \n+            className=\"mt-4\"\n+            dangerouslySetInnerHTML={{ \n+              __html: content?.content || 'No content available' \n+            }} \n+          />\n+        </CardContent>\n+      </Card>\n+    </motion.div>\n   );\n }\n \n // Questions Tab Component\n@@ -1767,8 +1715,9 @@\n                   \"px-3 py-1 text-sm font-medium rounded-full\",\n                   \"bg-background/50 backdrop-blur-sm shadow-sm\",\n                   \"border border-primary/20\",\n                   \"transition-all duration-300\",\n+                  progress === 100 && \"bg-green-500/10 text-green-500 border-green-500/20\",\n                   \"group-hover:bg-primary/10 group-hover:border-primary/20\",\n                   \"animate-in zoom-in-50 duration-300\"\n                 )}\n               >\n"
                },
                {
                    "date": 1739514903585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,9 +118,9 @@\n   const [isPlaying, setIsPlaying] = useState(false);\n   const [isMuted, setIsMuted] = useState(false);\n   const [currentProgress, setCurrentProgress] = useState(0);\n   const [audioProgress, setAudioProgress] = useState(0);\n-  const [activeTab, setActiveTab] = useState(\"content\");\n+  const [activeTab, setActiveTab] = useState(\"questions\");\n   const [selectedQuestionIndex, setSelectedQuestionIndex] = useState<number | null>(null);\n   const [audioQueue, setAudioQueue] = useState<string[]>([]);\n   const [currentAudioIndex, setCurrentAudioIndex] = useState(0);\n   const [isAudioReady, setIsAudioReady] = useState(false);\n@@ -400,26 +400,26 @@\n           </div>\n \n           {/* Navigation Tabs */}\n           <Tabs\n-            defaultValue=\"content\"\n+            defaultValue=\"questions\"\n             value={activeTab}\n             onValueChange={handleTabChange}\n             className=\"mt-4\"\n           >\n             <TabsList className=\"grid w-full grid-cols-3 lg:w-[400px]\">\n-              <TabsTrigger value=\"content\" className=\"flex items-center gap-2\">\n-                <BookOpen className=\"h-4 w-4\" />\n-                Content\n-              </TabsTrigger>\n               <TabsTrigger value=\"questions\" className=\"flex items-center gap-2\">\n                 <HelpCircle className=\"h-4 w-4\" />\n                 Questions\n               </TabsTrigger>\n-              <TabsTrigger value=\"exercises\" className=\"flex items-center gap-2\">\n-                <Award className=\"h-4 w-4\" />\n-                Exercises\n+              <TabsTrigger value=\"activities\" className=\"flex items-center gap-2\">\n+                <Target className=\"h-4 w-4\" />\n+                Activities\n               </TabsTrigger>\n+              <TabsTrigger value=\"content\" className=\"flex items-center gap-2\">\n+                <BookOpen className=\"h-4 w-4\" />\n+                Content\n+              </TabsTrigger>\n             </TabsList>\n           </Tabs>\n         </DialogHeader>\n \n@@ -458,29 +458,22 @@\n                       </Button>\n                     </div>\n                   </motion.div>\n                 ) : (\n-                  <Tabs defaultValue=\"content\" value={activeTab} onValueChange={handleTabChange}>\n-                    <TabsContent value=\"content\">\n-                      <ContentTab content={lessonContent.content} />\n-                    </TabsContent>\n+                  <Tabs defaultValue=\"questions\" value={activeTab} onValueChange={handleTabChange}>\n                     <TabsContent value=\"questions\">\n                       <QuestionsTab \n                         questions={lessonContent.content?.questions} \n                         selectedIndex={selectedQuestionIndex}\n                         onQuestionSelect={handleQuestionSelect}\n-                        onNextLesson={() => {\n-                          // Handle next lesson navigation\n-                          logger.info('Navigating to next lesson', {\n-                            source: 'LessonDialog',\n-                            context: { currentLessonId }\n-                          });\n-                        }}\n                       />\n                     </TabsContent>\n-                    <TabsContent value=\"exercises\">\n-                      <ExercisesTab exercises={lessonContent.content?.exercise_prompts} />\n+                    <TabsContent value=\"activities\">\n+                      <ActivitiesTab activities={lessonContent.content?.activities} />\n                     </TabsContent>\n+                    <TabsContent value=\"content\">\n+                      <ContentTab content={lessonContent.content} />\n+                    </TabsContent>\n                   </Tabs>\n                 )}\n               </div>\n             </ScrollArea>\n@@ -757,46 +750,96 @@\n \n // Content Tab Component\n function ContentTab({ content }: { content: any }) {\n   return (\n-    <motion.div\n-      initial={{ opacity: 0 }}\n-      animate={{ opacity: 1 }}\n-      exit={{ opacity: 0 }}\n-      transition={{ duration: 0.2 }}\n-      className=\"space-y-8\"\n-    >\n-      <Card className=\"prose prose-sm max-w-none dark:prose-invert border-primary/10 shadow-md\">\n-        <CardHeader>\n-          <CardTitle className=\"flex items-center gap-2\">\n-            <BookOpen className=\"h-5 w-5 text-primary\" />\n-            Lesson Content\n-          </CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <div \n-            className=\"mt-4\"\n-            dangerouslySetInnerHTML={{ \n-              __html: content?.content || 'No content available' \n-            }} \n-          />\n-        </CardContent>\n-      </Card>\n-    </motion.div>\n+    <div className=\"space-y-8\">\n+      {/* Questions Section */}\n+      {content?.questions && content.questions.length > 0 && (\n+        <section className=\"space-y-4\">\n+          <h2 className=\"text-2xl font-bold flex items-center gap-2\">\n+            <HelpCircle className=\"h-6 w-6 text-primary\" />\n+            Questions\n+          </h2>\n+          <div className=\"grid gap-4\">\n+            {content.questions.map((question: any, index: number) => (\n+              <Card key={question.id} className=\"relative overflow-hidden\">\n+                <CardHeader>\n+                  <CardTitle className=\"flex items-center gap-2\">\n+                    <QuestionTypeIcon type={question.type} className=\"h-5 w-5\" />\n+                    Question {index + 1}: {question.title}\n+                  </CardTitle>\n+                </CardHeader>\n+                <CardContent className=\"space-y-4\">\n+                  <div className=\"prose dark:prose-invert max-w-none\">\n+                    {question.content}\n+                  </div>\n+                  {/* Exercise Prompts for this Question */}\n+                  {question.exercises && question.exercises.length > 0 && (\n+                    <div className=\"mt-4 space-y-3\">\n+                      <h4 className=\"font-medium text-sm text-muted-foreground\">Related Exercises:</h4>\n+                      {question.exercises.map((exercise: any) => (\n+                        <div key={exercise.id} className=\"pl-4 border-l-2 border-primary/20\">\n+                          <p className=\"text-sm\">{exercise.text}</p>\n+                        </div>\n+                      ))}\n+                    </div>\n+                  )}\n+                </CardContent>\n+              </Card>\n+            )}\n+          </div>\n+        </section>\n+      )}\n+\n+      {/* Activities Section */}\n+      {content?.activities && content.activities.length > 0 && (\n+        <section className=\"space-y-4\">\n+          <h2 className=\"text-2xl font-bold flex items-center gap-2\">\n+            <Target className=\"h-6 w-6 text-primary\" />\n+            Activities\n+          </h2>\n+          <div className=\"grid gap-4\">\n+            {content.activities.map((activity: any, index: number) => (\n+              <Card key={activity.id}>\n+                <CardHeader>\n+                  <CardTitle>Activity {index + 1}: {activity.title}</CardTitle>\n+                </CardHeader>\n+                <CardContent>\n+                  <div className=\"prose dark:prose-invert max-w-none\">\n+                    {activity.description}\n+                  </div>\n+                </CardContent>\n+              </Card>\n+            )}\n+          </div>\n+        </section>\n+      )}\n+\n+      {/* Lesson Content Section */}\n+      <section className=\"space-y-4\">\n+        <h2 className=\"text-2xl font-bold flex items-center gap-2\">\n+          <BookOpen className=\"h-6 w-6 text-primary\" />\n+          Lesson Content\n+        </h2>\n+        <Card>\n+          <CardContent className=\"prose dark:prose-invert max-w-none pt-6\">\n+            {content?.content}\n+          </CardContent>\n+        </Card>\n+      </section>\n+    </div>\n   );\n }\n \n // Questions Tab Component\n function QuestionsTab({ \n   questions, \n   selectedIndex,\n-  onQuestionSelect,\n-  onNextLesson \n+  onQuestionSelect\n }: { \n   questions: Question[],\n   selectedIndex: number | null,\n-  onQuestionSelect: (index: number) => void,\n-  onNextLesson: () => void\n+  onQuestionSelect: (index: number) => void\n }) {\n   const [expandedQuestions, setExpandedQuestions] = useState<Record<string, boolean>>({});\n   const [questionProgress, setQuestionProgress] = useState<Record<string, number>>({});\n \n@@ -882,27 +925,8 @@\n             progress={questionProgress[question.id] || 0}\n           />\n         ))}\n       </div>\n-\n-      {/* Next Lesson Button */}\n-      {totalProgress === 100 && (\n-        <motion.div\n-          initial={{ opacity: 0, y: 20 }}\n-          animate={{ opacity: 1, y: 0 }}\n-          className=\"sticky bottom-4 flex justify-center\"\n-        >\n-          <Button\n-            onClick={onNextLesson}\n-            className=\"bg-gradient-to-r from-primary to-primary/90 hover:from-primary/90 hover:to-primary text-white px-8 py-6 rounded-full shadow-lg\"\n-          >\n-            <span className=\"flex items-center gap-2\">\n-              Continue to Next Lesson\n-              <ArrowRight className=\"h-4 w-4\" />\n-            </span>\n-          </Button>\n-        </motion.div>\n-      )}\n     </motion.div>\n   );\n }\n \n@@ -1715,9 +1739,8 @@\n                   \"px-3 py-1 text-sm font-medium rounded-full\",\n                   \"bg-background/50 backdrop-blur-sm shadow-sm\",\n                   \"border border-primary/20\",\n                   \"transition-all duration-300\",\n-                  progress === 100 && \"bg-green-500/10 text-green-500 border-green-500/20\",\n                   \"group-hover:bg-primary/10 group-hover:border-primary/20\",\n                   \"animate-in zoom-in-50 duration-300\"\n                 )}\n               >\n"
                },
                {
                    "date": 1739514966632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,9 +118,9 @@\n   const [isPlaying, setIsPlaying] = useState(false);\n   const [isMuted, setIsMuted] = useState(false);\n   const [currentProgress, setCurrentProgress] = useState(0);\n   const [audioProgress, setAudioProgress] = useState(0);\n-  const [activeTab, setActiveTab] = useState(\"questions\");\n+  const [activeTab, setActiveTab] = useState(\"content\");\n   const [selectedQuestionIndex, setSelectedQuestionIndex] = useState<number | null>(null);\n   const [audioQueue, setAudioQueue] = useState<string[]>([]);\n   const [currentAudioIndex, setCurrentAudioIndex] = useState(0);\n   const [isAudioReady, setIsAudioReady] = useState(false);\n@@ -400,26 +400,26 @@\n           </div>\n \n           {/* Navigation Tabs */}\n           <Tabs\n-            defaultValue=\"questions\"\n+            defaultValue=\"content\"\n             value={activeTab}\n             onValueChange={handleTabChange}\n             className=\"mt-4\"\n           >\n             <TabsList className=\"grid w-full grid-cols-3 lg:w-[400px]\">\n+              <TabsTrigger value=\"content\" className=\"flex items-center gap-2\">\n+                <BookOpen className=\"h-4 w-4\" />\n+                Content\n+              </TabsTrigger>\n               <TabsTrigger value=\"questions\" className=\"flex items-center gap-2\">\n                 <HelpCircle className=\"h-4 w-4\" />\n                 Questions\n               </TabsTrigger>\n-              <TabsTrigger value=\"activities\" className=\"flex items-center gap-2\">\n-                <Target className=\"h-4 w-4\" />\n-                Activities\n+              <TabsTrigger value=\"exercises\" className=\"flex items-center gap-2\">\n+                <Award className=\"h-4 w-4\" />\n+                Exercises\n               </TabsTrigger>\n-              <TabsTrigger value=\"content\" className=\"flex items-center gap-2\">\n-                <BookOpen className=\"h-4 w-4\" />\n-                Content\n-              </TabsTrigger>\n             </TabsList>\n           </Tabs>\n         </DialogHeader>\n \n@@ -458,22 +458,29 @@\n                       </Button>\n                     </div>\n                   </motion.div>\n                 ) : (\n-                  <Tabs defaultValue=\"questions\" value={activeTab} onValueChange={handleTabChange}>\n+                  <Tabs defaultValue=\"content\" value={activeTab} onValueChange={handleTabChange}>\n+                    <TabsContent value=\"content\">\n+                      <ContentTab content={lessonContent.content} />\n+                    </TabsContent>\n                     <TabsContent value=\"questions\">\n                       <QuestionsTab \n                         questions={lessonContent.content?.questions} \n                         selectedIndex={selectedQuestionIndex}\n                         onQuestionSelect={handleQuestionSelect}\n+                        onNextLesson={() => {\n+                          // Handle next lesson navigation\n+                          logger.info('Navigating to next lesson', {\n+                            source: 'LessonDialog',\n+                            context: { currentLessonId }\n+                          });\n+                        }}\n                       />\n                     </TabsContent>\n-                    <TabsContent value=\"activities\">\n-                      <ActivitiesTab activities={lessonContent.content?.activities} />\n+                    <TabsContent value=\"exercises\">\n+                      <ExercisesTab exercises={lessonContent.content?.exercise_prompts} />\n                     </TabsContent>\n-                    <TabsContent value=\"content\">\n-                      <ContentTab content={lessonContent.content} />\n-                    </TabsContent>\n                   </Tabs>\n                 )}\n               </div>\n             </ScrollArea>\n@@ -750,96 +757,46 @@\n \n // Content Tab Component\n function ContentTab({ content }: { content: any }) {\n   return (\n-    <div className=\"space-y-8\">\n-      {/* Questions Section */}\n-      {content?.questions && content.questions.length > 0 && (\n-        <section className=\"space-y-4\">\n-          <h2 className=\"text-2xl font-bold flex items-center gap-2\">\n-            <HelpCircle className=\"h-6 w-6 text-primary\" />\n-            Questions\n-          </h2>\n-          <div className=\"grid gap-4\">\n-            {content.questions.map((question: any, index: number) => (\n-              <Card key={question.id} className=\"relative overflow-hidden\">\n-                <CardHeader>\n-                  <CardTitle className=\"flex items-center gap-2\">\n-                    <QuestionTypeIcon type={question.type} className=\"h-5 w-5\" />\n-                    Question {index + 1}: {question.title}\n-                  </CardTitle>\n-                </CardHeader>\n-                <CardContent className=\"space-y-4\">\n-                  <div className=\"prose dark:prose-invert max-w-none\">\n-                    {question.content}\n-                  </div>\n-                  {/* Exercise Prompts for this Question */}\n-                  {question.exercises && question.exercises.length > 0 && (\n-                    <div className=\"mt-4 space-y-3\">\n-                      <h4 className=\"font-medium text-sm text-muted-foreground\">Related Exercises:</h4>\n-                      {question.exercises.map((exercise: any) => (\n-                        <div key={exercise.id} className=\"pl-4 border-l-2 border-primary/20\">\n-                          <p className=\"text-sm\">{exercise.text}</p>\n-                        </div>\n-                      ))}\n-                    </div>\n-                  )}\n-                </CardContent>\n-              </Card>\n-            )}\n-          </div>\n-        </section>\n-      )}\n-\n-      {/* Activities Section */}\n-      {content?.activities && content.activities.length > 0 && (\n-        <section className=\"space-y-4\">\n-          <h2 className=\"text-2xl font-bold flex items-center gap-2\">\n-            <Target className=\"h-6 w-6 text-primary\" />\n-            Activities\n-          </h2>\n-          <div className=\"grid gap-4\">\n-            {content.activities.map((activity: any, index: number) => (\n-              <Card key={activity.id}>\n-                <CardHeader>\n-                  <CardTitle>Activity {index + 1}: {activity.title}</CardTitle>\n-                </CardHeader>\n-                <CardContent>\n-                  <div className=\"prose dark:prose-invert max-w-none\">\n-                    {activity.description}\n-                  </div>\n-                </CardContent>\n-              </Card>\n-            )}\n-          </div>\n-        </section>\n-      )}\n-\n-      {/* Lesson Content Section */}\n-      <section className=\"space-y-4\">\n-        <h2 className=\"text-2xl font-bold flex items-center gap-2\">\n-          <BookOpen className=\"h-6 w-6 text-primary\" />\n-          Lesson Content\n-        </h2>\n-        <Card>\n-          <CardContent className=\"prose dark:prose-invert max-w-none pt-6\">\n-            {content?.content}\n-          </CardContent>\n-        </Card>\n-      </section>\n-    </div>\n+    <motion.div\n+      initial={{ opacity: 0 }}\n+      animate={{ opacity: 1 }}\n+      exit={{ opacity: 0 }}\n+      transition={{ duration: 0.2 }}\n+      className=\"space-y-8\"\n+    >\n+      <Card className=\"prose prose-sm max-w-none dark:prose-invert border-primary/10 shadow-md\">\n+        <CardHeader>\n+          <CardTitle className=\"flex items-center gap-2\">\n+            <BookOpen className=\"h-5 w-5 text-primary\" />\n+            Lesson Content\n+          </CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <div \n+            className=\"mt-4\"\n+            dangerouslySetInnerHTML={{ \n+              __html: content?.content || 'No content available' \n+            }} \n+          />\n+        </CardContent>\n+      </Card>\n+    </motion.div>\n   );\n }\n \n // Questions Tab Component\n function QuestionsTab({ \n   questions, \n   selectedIndex,\n-  onQuestionSelect\n+  onQuestionSelect,\n+  onNextLesson \n }: { \n   questions: Question[],\n   selectedIndex: number | null,\n-  onQuestionSelect: (index: number) => void\n+  onQuestionSelect: (index: number) => void,\n+  onNextLesson: () => void\n }) {\n   const [expandedQuestions, setExpandedQuestions] = useState<Record<string, boolean>>({});\n   const [questionProgress, setQuestionProgress] = useState<Record<string, number>>({});\n \n@@ -925,8 +882,27 @@\n             progress={questionProgress[question.id] || 0}\n           />\n         ))}\n       </div>\n+\n+      {/* Next Lesson Button */}\n+      {totalProgress === 100 && (\n+        <motion.div\n+          initial={{ opacity: 0, y: 20 }}\n+          animate={{ opacity: 1, y: 0 }}\n+          className=\"sticky bottom-4 flex justify-center\"\n+        >\n+          <Button\n+            onClick={onNextLesson}\n+            className=\"bg-gradient-to-r from-primary to-primary/90 hover:from-primary/90 hover:to-primary text-white px-8 py-6 rounded-full shadow-lg\"\n+          >\n+            <span className=\"flex items-center gap-2\">\n+              Continue to Next Lesson\n+              <ArrowRight className=\"h-4 w-4\" />\n+            </span>\n+          </Button>\n+        </motion.div>\n+      )}\n     </motion.div>\n   );\n }\n \n@@ -1739,8 +1715,9 @@\n                   \"px-3 py-1 text-sm font-medium rounded-full\",\n                   \"bg-background/50 backdrop-blur-sm shadow-sm\",\n                   \"border border-primary/20\",\n                   \"transition-all duration-300\",\n+                  progress === 100 && \"bg-green-500/10 text-green-500 border-green-500/20\",\n                   \"group-hover:bg-primary/10 group-hover:border-primary/20\",\n                   \"animate-in zoom-in-50 duration-300\"\n                 )}\n               >\n"
                },
                {
                    "date": 1739515053702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,9 +118,9 @@\n   const [isPlaying, setIsPlaying] = useState(false);\n   const [isMuted, setIsMuted] = useState(false);\n   const [currentProgress, setCurrentProgress] = useState(0);\n   const [audioProgress, setAudioProgress] = useState(0);\n-  const [activeTab, setActiveTab] = useState(\"content\");\n+  const [activeTab, setActiveTab] = useState(\"questions\");\n   const [selectedQuestionIndex, setSelectedQuestionIndex] = useState<number | null>(null);\n   const [audioQueue, setAudioQueue] = useState<string[]>([]);\n   const [currentAudioIndex, setCurrentAudioIndex] = useState(0);\n   const [isAudioReady, setIsAudioReady] = useState(false);\n@@ -400,26 +400,26 @@\n           </div>\n \n           {/* Navigation Tabs */}\n           <Tabs\n-            defaultValue=\"content\"\n+            defaultValue=\"questions\"\n             value={activeTab}\n             onValueChange={handleTabChange}\n             className=\"mt-4\"\n           >\n             <TabsList className=\"grid w-full grid-cols-3 lg:w-[400px]\">\n-              <TabsTrigger value=\"content\" className=\"flex items-center gap-2\">\n-                <BookOpen className=\"h-4 w-4\" />\n-                Content\n-              </TabsTrigger>\n               <TabsTrigger value=\"questions\" className=\"flex items-center gap-2\">\n                 <HelpCircle className=\"h-4 w-4\" />\n                 Questions\n               </TabsTrigger>\n               <TabsTrigger value=\"exercises\" className=\"flex items-center gap-2\">\n                 <Award className=\"h-4 w-4\" />\n-                Exercises\n+                Activities\n               </TabsTrigger>\n+              <TabsTrigger value=\"content\" className=\"flex items-center gap-2\">\n+                <BookOpen className=\"h-4 w-4\" />\n+                Content\n+              </TabsTrigger>\n             </TabsList>\n           </Tabs>\n         </DialogHeader>\n \n@@ -458,19 +458,15 @@\n                       </Button>\n                     </div>\n                   </motion.div>\n                 ) : (\n-                  <Tabs defaultValue=\"content\" value={activeTab} onValueChange={handleTabChange}>\n-                    <TabsContent value=\"content\">\n-                      <ContentTab content={lessonContent.content} />\n-                    </TabsContent>\n+                  <Tabs defaultValue=\"questions\" value={activeTab} onValueChange={handleTabChange}>\n                     <TabsContent value=\"questions\">\n                       <QuestionsTab \n                         questions={lessonContent.content?.questions} \n                         selectedIndex={selectedQuestionIndex}\n                         onQuestionSelect={handleQuestionSelect}\n                         onNextLesson={() => {\n-                          // Handle next lesson navigation\n                           logger.info('Navigating to next lesson', {\n                             source: 'LessonDialog',\n                             context: { currentLessonId }\n                           });\n@@ -479,8 +475,11 @@\n                     </TabsContent>\n                     <TabsContent value=\"exercises\">\n                       <ExercisesTab exercises={lessonContent.content?.exercise_prompts} />\n                     </TabsContent>\n+                    <TabsContent value=\"content\">\n+                      <ContentTab content={lessonContent.content} />\n+                    </TabsContent>\n                   </Tabs>\n                 )}\n               </div>\n             </ScrollArea>\n@@ -1588,8 +1587,9 @@\n         return 'from-gray-500/10 to-slate-500/10 hover:from-gray-500/20 hover:to-slate-500/20';\n     }\n   };\n \n+  const renderExercisePrompts = () => {\n   const renderFollowupPrompts = () => {\n     if (!Array.isArray(question.exercises) || question.exercises.length === 0) return null;\n \n     return (\n"
                },
                {
                    "date": 1739515225172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1588,95 +1588,80 @@\n     }\n   };\n \n   const renderExercisePrompts = () => {\n-  const renderFollowupPrompts = () => {\n-    if (!Array.isArray(question.exercises) || question.exercises.length === 0) return null;\n+    if (!question.exercises?.length) return null;\n \n     return (\n-      <div className=\"mt-8 space-y-4\">\n+      <motion.div\n+        initial={{ opacity: 0, y: 10 }}\n+        animate={{ opacity: 1, y: 0 }}\n+        transition={{ delay: 0.3 }}\n+        className=\"mt-6 space-y-4\"\n+      >\n         <div className=\"flex items-center gap-2 text-primary\">\n-          <Target className=\"h-5 w-5\" />\n-          <h3 className=\"font-medium\">Followup Questions</h3>\n+          <Award className=\"h-5 w-5\" />\n+          <h3 className=\"font-medium\">Related Exercises</h3>\n         </div>\n         <div className=\"grid gap-4\">\n           {question.exercises.map((prompt, idx) => (\n-            <motion.div\n+            <Card \n               key={idx}\n-              initial={{ opacity: 0, y: 10 }}\n-              animate={{ opacity: 1, y: 0 }}\n-              transition={{ delay: idx * 0.1 }}\n+              className={cn(\n+                \"border-primary/10 transition-all duration-200\",\n+                \"hover:shadow-md hover:border-primary/20\",\n+                \"bg-background/50 backdrop-blur-sm\"\n+              )}\n             >\n-              <Card \n-                className={cn(\n-                  \"border-primary/10 transition-all duration-200\",\n-                  \"hover:shadow-md hover:border-primary/20\",\n-                  activeFollowup === idx && \"ring-2 ring-primary/20\"\n+              <CardHeader>\n+                <div className=\"flex items-center gap-3\">\n+                  <Badge variant=\"outline\" className=\"bg-primary/5\">\n+                    Exercise {idx + 1}\n+                  </Badge>\n+                  {prompt.type && (\n+                    <Badge variant=\"outline\" className=\"bg-primary/5\">\n+                      {prompt.type}\n+                    </Badge>\n+                  )}\n+                </div>\n+                <CardTitle className=\"text-base mt-2\">{prompt.text}</CardTitle>\n+                {prompt.content?.instructions && (\n+                  <CardDescription className=\"mt-2 flex items-center gap-2\">\n+                    <Lightbulb className=\"h-4 w-4 text-primary\" />\n+                    {prompt.content.instructions}\n+                  </CardDescription>\n                 )}\n-                onClick={() => setActiveFollowup(activeFollowup === idx ? null : idx)}\n-              >\n-                <CardHeader className=\"cursor-pointer\">\n-                  <div className=\"flex items-center justify-between\">\n-                    <div className=\"flex items-center gap-3\">\n-                      <Badge variant=\"outline\" className=\"bg-primary/5\">\n-                        Followup {idx + 1}\n-                      </Badge>\n-                      {prompt.type && (\n-                        <Badge variant=\"outline\" className=\"bg-primary/5\">\n-                          {prompt.type}\n-                        </Badge>\n+              </CardHeader>\n+              <CardContent>\n+                <div className=\"space-y-4\">\n+                  {prompt.media && (\n+                    <div className=\"rounded-lg overflow-hidden border border-primary/10\">\n+                      {prompt.type === 'image' ? (\n+                        <img \n+                          src={prompt.media} \n+                          alt={prompt.text}\n+                          className=\"w-full h-auto object-cover\"\n+                        />\n+                      ) : (\n+                        <video \n+                          src={prompt.media}\n+                          controls\n+                          className=\"w-full\"\n+                        />\n                       )}\n                     </div>\n-                    <ChevronRight \n-                      className={cn(\n-                        \"h-4 w-4 transition-transform\",\n-                        activeFollowup === idx && \"rotate-90\"\n-                      )} \n-                    />\n-                  </div>\n-                  <p className=\"text-sm mt-2\">{prompt.text}</p>\n-                </CardHeader>\n-                <AnimatePresence>\n-                  {activeFollowup === idx && (\n-                    <motion.div\n-                      initial={{ height: 0, opacity: 0 }}\n-                      animate={{ height: \"auto\", opacity: 1 }}\n-                      exit={{ height: 0, opacity: 0 }}\n-                    >\n-                      <CardContent className=\"pt-0\">\n-                        <div className=\"space-y-4\">\n-                          {prompt.media && (\n-                            <div className=\"rounded-lg overflow-hidden border border-primary/10\">\n-                              {prompt.type === 'image' ? (\n-                                <img \n-                                  src={prompt.media} \n-                                  alt={prompt.text}\n-                                  className=\"w-full h-auto\"\n-                                />\n-                              ) : (\n-                                <video \n-                                  src={prompt.media}\n-                                  controls\n-                                  className=\"w-full\"\n-                                />\n-                              )}\n-                            </div>\n-                          )}\n-                          <Textarea\n-                            placeholder=\"Write your response...\"\n-                            className=\"min-h-[100px] bg-card border-primary/10\"\n-                            onChange={() => onAnswer(Math.min(100, progress + 10))}\n-                          />\n-                        </div>\n-                      </CardContent>\n-                    </motion.div>\n                   )}\n-                </AnimatePresence>\n-              </Card>\n-            </motion.div>\n+                  <Textarea\n+                    placeholder=\"Write your response...\"\n+                    className=\"min-h-[100px] bg-card border-primary/10\"\n+                    onChange={() => onAnswer(Math.min(100, progress + 10))}\n+                  />\n+                </div>\n+              </CardContent>\n+            </Card>\n           ))}\n         </div>\n-      </div>\n+      </motion.div>\n     );\n   };\n \n   return (\n@@ -1715,9 +1700,8 @@\n                   \"px-3 py-1 text-sm font-medium rounded-full\",\n                   \"bg-background/50 backdrop-blur-sm shadow-sm\",\n                   \"border border-primary/20\",\n                   \"transition-all duration-300\",\n-                  progress === 100 && \"bg-green-500/10 text-green-500 border-green-500/20\",\n                   \"group-hover:bg-primary/10 group-hover:border-primary/20\",\n                   \"animate-in zoom-in-50 duration-300\"\n                 )}\n               >\n@@ -1820,9 +1804,9 @@\n                     className=\"bg-background/80 backdrop-blur-sm rounded-lg p-4 border border-primary/10 shadow-sm\"\n                   >\n                     {renderQuestionContent()}\n                   </motion.div>\n-                  {renderFollowupPrompts()}\n+                  {renderExercisePrompts()}\n                 </div>\n               </CardContent>\n             </motion.div>\n           )}\n"
                },
                {
                    "date": 1739515237053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,8 +67,20 @@\n   usageNotes?: string;\n   storyPrompt?: string;\n   keywords?: string[];\n   wordlistPrompt?: any[];\n+  exercise_prompts?: Array<{\n+    id: string;\n+    text: string;\n+    type?: string;\n+    media?: string;\n+    content?: {\n+      instructions?: string;\n+      writingPrompt?: string;\n+      speakingPrompt?: string;\n+    };\n+    difficulty?: 'beginner' | 'intermediate' | 'advanced';\n+  }>;\n }\n \n interface Question {\n   id: string;\n@@ -1588,9 +1600,9 @@\n     }\n   };\n \n   const renderExercisePrompts = () => {\n-    if (!question.exercises?.length) return null;\n+    if (!question.metadata?.exercise_prompts?.length) return null;\n \n     return (\n       <motion.div\n         initial={{ opacity: 0, y: 10 }}\n@@ -1602,9 +1614,9 @@\n           <Award className=\"h-5 w-5\" />\n           <h3 className=\"font-medium\">Related Exercises</h3>\n         </div>\n         <div className=\"grid gap-4\">\n-          {question.exercises.map((prompt, idx) => (\n+          {question.metadata.exercise_prompts.map((prompt, idx) => (\n             <Card \n               key={idx}\n               className={cn(\n                 \"border-primary/10 transition-all duration-200\",\n@@ -1621,8 +1633,21 @@\n                     <Badge variant=\"outline\" className=\"bg-primary/5\">\n                       {prompt.type}\n                     </Badge>\n                   )}\n+                  {prompt.difficulty && (\n+                    <Badge \n+                      variant=\"outline\" \n+                      className={cn(\n+                        \"capitalize\",\n+                        prompt.difficulty === 'beginner' && \"bg-green-500/10 text-green-500\",\n+                        prompt.difficulty === 'intermediate' && \"bg-yellow-500/10 text-yellow-500\",\n+                        prompt.difficulty === 'advanced' && \"bg-red-500/10 text-red-500\"\n+                      )}\n+                    >\n+                      {prompt.difficulty}\n+                    </Badge>\n+                  )}\n                 </div>\n                 <CardTitle className=\"text-base mt-2\">{prompt.text}</CardTitle>\n                 {prompt.content?.instructions && (\n                   <CardDescription className=\"mt-2 flex items-center gap-2\">\n@@ -1649,8 +1674,24 @@\n                         />\n                       )}\n                     </div>\n                   )}\n+                  <div className=\"space-y-2\">\n+                    {prompt.content?.writingPrompt && (\n+                      <div className=\"mb-4\">\n+                        <Label className=\"text-sm font-medium\">Writing Prompt</Label>\n+                        <p className=\"text-sm mt-1 text-muted-foreground\">{prompt.content.writingPrompt}</p>\n+                      </div>\n+                    )}\n+                    {prompt.content?.speakingPrompt && (\n+                      <div className=\"mb-4\">\n+                        <Label className=\"text-sm font-medium\">Speaking Prompt</Label>\n+                        <p className=\"text-sm mt-1 text-muted-foreground\">{prompt.content.speakingPrompt}</p>\n+                      </div>\n+                    )}\n+                    <Textarea\n+                      placeholder=\"Write your response...\"\n+                      className=\"min-h-[100px] bg-card border-primary/10\"\n                   <Textarea\n                     placeholder=\"Write your response...\"\n                     className=\"min-h-[100px] bg-card border-primary/10\"\n                     onChange={() => onAnswer(Math.min(100, progress + 10))}\n"
                },
                {
                    "date": 1739515276466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,15 +86,22 @@\n   id: string;\n   title: string;\n   content: string;\n   type: string;\n-  metadata: QuestionMetadata;\n-  exercises: Array<{\n-    id: string;\n-    text: string;\n-    type?: string;\n-    media?: string;\n-  }>;\n+  metadata: QuestionMetadata & {\n+    exercise_prompts?: Array<{\n+      id: string;\n+      text: string;\n+      type?: string;\n+      media?: string;\n+      content?: {\n+        instructions?: string;\n+        writingPrompt?: string;\n+        speakingPrompt?: string;\n+      };\n+      difficulty?: 'beginner' | 'intermediate' | 'advanced';\n+    }>;\n+  };\n   points?: number;\n   data?: any;\n }\n \n"
                },
                {
                    "date": 1739515287482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1697,13 +1697,11 @@\n                     )}\n                     <Textarea\n                       placeholder=\"Write your response...\"\n                       className=\"min-h-[100px] bg-card border-primary/10\"\n-                  <Textarea\n-                    placeholder=\"Write your response...\"\n-                    className=\"min-h-[100px] bg-card border-primary/10\"\n-                    onChange={() => onAnswer(Math.min(100, progress + 10))}\n-                  />\n+                      onChange={() => onAnswer(Math.min(100, progress + 10))}\n+                    />\n+                  </div>\n                 </div>\n               </CardContent>\n             </Card>\n           ))}\n"
                },
                {
                    "date": 1739652042235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1088,9 +1088,8 @@\n                       <video \n                         src={exercise.media}\n                         controls\n                         className=\"w-full\"\n-                        preload=\"metadata\"\n                       />\n                     )}\n                   </div>\n                 )}\n"
                },
                {
                    "date": 1739652060900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,9 @@\n import { Textarea } from \"@/components/ui/textarea\";\n import { Collapsible, CollapsibleTrigger, CollapsibleContent } from \"@/components/ui/collapsible\";\n import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n import { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\n+import { supabase } from \"@/lib/supabase\";\n \n // Question Types from question-form.tsx\n interface QuestionMetadata {\n   prompt?: string;\n@@ -334,8 +335,93 @@\n       document.body.style.userSelect = 'auto';\n     };\n   }, [startResizing]);\n \n+  const fetchLessonContent = async (lessonId: string) => {\n+    try {\n+      const { data: { session } } = await supabase.auth.getSession();\n+      if (!session) throw new Error('No active session');\n+\n+      // Fetch lesson content with all related data including exercise prompts\n+      const { data: lessonData, error: lessonError } = await supabase\n+        .from('lessons')\n+        .select(`\n+          *,\n+          questions (\n+            id, \n+            title, \n+            content, \n+            type,\n+            data,\n+            exercise_prompts (\n+              id,\n+              text,\n+              type,\n+              media,\n+              narration,\n+              saytext,\n+              question_id,\n+              correct,\n+              content,\n+              metadata,\n+              difficulty,\n+              created_at,\n+              updated_at\n+            )\n+          ),\n+          activities (*)\n+        `)\n+        .eq('id', lessonId)\n+        .single();\n+\n+      if (lessonError) throw lessonError;\n+      if (!lessonData) throw new Error('No lesson data found');\n+\n+      // Transform the data to ensure exercise prompts are properly nested\n+      const transformedData = {\n+        ...lessonData,\n+        questions: lessonData.questions?.map(question => ({\n+          ...question,\n+          metadata: {\n+            ...question.data,\n+            exercise_prompts: question.exercise_prompts || []\n+          }\n+        }))\n+      };\n+\n+      setLessonState({\n+        content: transformedData,\n+        isLoading: false,\n+        error: null\n+      });\n+\n+      logger.info('Lesson content loaded with exercise prompts', {\n+        source: 'LessonDialog',\n+        context: { \n+          lessonId,\n+          questionCount: transformedData.questions?.length,\n+          exercisePromptCount: transformedData.questions?.reduce(\n+            (acc, q) => acc + (q.exercise_prompts?.length || 0), \n+            0\n+          ),\n+          timestamp: new Date().toISOString()\n+        }\n+      });\n+\n+    } catch (error) {\n+      logger.error('Failed to load lesson content', {\n+        source: 'LessonDialog',\n+        context: { error }\n+      });\n+      \n+      setLessonState({\n+        content: null,\n+        isLoading: false,\n+        error: error instanceof Error ? error.message : 'Failed to load lesson content'\n+      });\n+    }\n+  };\n+\n   return (\n     <Dialog open={isOpen} onOpenChange={onClose}>\n       <DialogContent \n         className=\"max-w-[100vw] w-full h-[100vh] p-0 max-h-screen bg-gradient-to-b from-background to-accent/10\"\n@@ -978,9 +1064,9 @@\n                     {exercise.difficulty}\n                   </Badge>\n                 )}\n               </div>\n-              <CardTitle className=\"text-lg mt-2\">{exercise.text}</CardTitle>\n+              <CardTitle className=\"text-base mt-2\">{exercise.text}</CardTitle>\n               {exercise.content?.instructions && (\n                 <CardDescription className=\"mt-2 flex items-center gap-2\">\n                   <Lightbulb className=\"h-4 w-4 text-primary\" />\n                   {exercise.content.instructions}\n@@ -990,16 +1076,15 @@\n             <CardContent>\n               <div className=\"space-y-4\">\n                 {exercise.media && (\n                   <div className=\"mt-4 rounded-lg overflow-hidden border\">\n-                    {exercise.type === 'image' && (\n+                    {exercise.type === 'image' ? (\n                       <img \n                         src={exercise.media} \n                         alt={exercise.text}\n                         className=\"w-full h-auto object-cover\"\n                       />\n-                    )}\n-                    {exercise.type === 'video' && (\n+                    ) : (\n                       <video \n                         src={exercise.media}\n                         controls\n                         className=\"w-full\"\n"
                },
                {
                    "date": 1739652108891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -378,9 +378,9 @@\n \n       // Transform the data to ensure exercise prompts are properly nested\n       const transformedData = {\n         ...lessonData,\n-        questions: lessonData.questions?.map(question => ({\n+        questions: lessonData.questions?.map((question: Question) => ({\n           ...question,\n           metadata: {\n             ...question.data,\n             exercise_prompts: question.exercise_prompts || []\n"
                },
                {
                    "date": 1739652132922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,24 +87,22 @@\n   id: string;\n   title: string;\n   content: string;\n   type: string;\n-  metadata: QuestionMetadata & {\n-    exercise_prompts?: Array<{\n-      id: string;\n-      text: string;\n-      type?: string;\n-      media?: string;\n-      content?: {\n-        instructions?: string;\n-        writingPrompt?: string;\n-        speakingPrompt?: string;\n-      };\n-      difficulty?: 'beginner' | 'intermediate' | 'advanced';\n-    }>;\n-  };\n-  points?: number;\n+  metadata: QuestionMetadata;\n   data?: any;\n+  exercise_prompts?: Array<{\n+    id: string;\n+    text: string;\n+    type?: string;\n+    media?: string;\n+    content?: {\n+      instructions?: string;\n+      writingPrompt?: string;\n+      speakingPrompt?: string;\n+    };\n+    difficulty?: 'beginner' | 'intermediate' | 'advanced';\n+  }>;\n }\n \n interface LessonDialogProps {\n   isOpen: boolean;\n"
                },
                {
                    "date": 1739652180071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,8 +154,19 @@\n \n   // Add this new state for resize hover effect\n   const [isResizeHovered, setIsResizeHovered] = useState(false);\n \n+  // Add this new state for lesson state\n+  const [lessonState, setLessonState] = useState<{\n+    content: any | null;\n+    isLoading: boolean;\n+    error: string | null;\n+  }>({\n+    content: null,\n+    isLoading: false,\n+    error: null\n+  });\n+\n   // Audio event handlers\n   const handleTimeUpdate = () => {\n     if (audioRef.current) {\n       const progress = (audioRef.current.currentTime / audioRef.current.duration) * 100;\n"
                },
                {
                    "date": 1739652196187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,19 +154,8 @@\n \n   // Add this new state for resize hover effect\n   const [isResizeHovered, setIsResizeHovered] = useState(false);\n \n-  // Add this new state for lesson state\n-  const [lessonState, setLessonState] = useState<{\n-    content: any | null;\n-    isLoading: boolean;\n-    error: string | null;\n-  }>({\n-    content: null,\n-    isLoading: false,\n-    error: null\n-  });\n-\n   // Audio event handlers\n   const handleTimeUpdate = () => {\n     if (audioRef.current) {\n       const progress = (audioRef.current.currentTime / audioRef.current.duration) * 100;\n"
                },
                {
                    "date": 1739652286943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -397,9 +397,9 @@\n         context: { \n           lessonId,\n           questionCount: transformedData.questions?.length,\n           exercisePromptCount: transformedData.questions?.reduce(\n-            (acc, q) => acc + (q.exercise_prompts?.length || 0), \n+            (acc: number, q) => acc + (q.exercise_prompts?.length || 0), \n             0\n           ),\n           timestamp: new Date().toISOString()\n         }\n"
                },
                {
                    "date": 1739652365258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,8 +154,19 @@\n \n   // Add this new state for resize hover effect\n   const [isResizeHovered, setIsResizeHovered] = useState(false);\n \n+  // Add this new state for lesson content\n+  const [lessonState, setLessonState] = useState<{\n+    content: any | null;\n+    isLoading: boolean;\n+    error: string | null;\n+  }>({\n+    content: null,\n+    isLoading: false,\n+    error: null\n+  });\n+\n   // Audio event handlers\n   const handleTimeUpdate = () => {\n     if (audioRef.current) {\n       const progress = (audioRef.current.currentTime / audioRef.current.duration) * 100;\n@@ -1782,10 +1793,10 @@\n                       className=\"min-h-[100px] bg-card border-primary/10\"\n                       onChange={() => onAnswer(Math.min(100, progress + 10))}\n                     />\n                   </div>\n-                </div>\n-              </CardContent>\n+                </CardContent>\n+              </Card>\n             </Card>\n           ))}\n         </div>\n       </motion.div>\n"
                },
                {
                    "date": 1739652401073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1793,10 +1793,10 @@\n                       className=\"min-h-[100px] bg-card border-primary/10\"\n                       onChange={() => onAnswer(Math.min(100, progress + 10))}\n                     />\n                   </div>\n-                </CardContent>\n-              </Card>\n+                </div>\n+              </CardContent>\n             </Card>\n           ))}\n         </div>\n       </motion.div>\n"
                },
                {
                    "date": 1739686696153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -408,9 +408,9 @@\n         context: { \n           lessonId,\n           questionCount: transformedData.questions?.length,\n           exercisePromptCount: transformedData.questions?.reduce(\n-            (acc: number, q) => acc + (q.exercise_prompts?.length || 0), \n+            (acc: number, q: Question) => acc + (q.exercise_prompts?.length || 0), \n             0\n           ),\n           timestamp: new Date().toISOString()\n         }\n"
                },
                {
                    "date": 1739686774393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -349,20 +349,21 @@\n     try {\n       const { data: { session } } = await supabase.auth.getSession();\n       if (!session) throw new Error('No active session');\n \n-      // Fetch lesson content with all related data including exercise prompts\n+      // First fetch the lesson with its questions\n       const { data: lessonData, error: lessonError } = await supabase\n         .from('lessons')\n         .select(`\n           *,\n-          questions (\n-            id, \n-            title, \n-            content, \n+          questions:questions!inner (\n+            id,\n+            title,\n+            content,\n             type,\n             data,\n-            exercise_prompts (\n+            metadata,\n+            exercise_prompts!questions_exercise_prompts_fkey (\n               id,\n               text,\n               type,\n               media,\n@@ -371,11 +372,9 @@\n               question_id,\n               correct,\n               content,\n               metadata,\n-              difficulty,\n-              created_at,\n-              updated_at\n+              difficulty\n             )\n           ),\n           activities (*)\n         `)\n@@ -384,15 +383,16 @@\n \n       if (lessonError) throw lessonError;\n       if (!lessonData) throw new Error('No lesson data found');\n \n-      // Transform the data to ensure exercise prompts are properly nested\n+      // Transform the data to ensure proper nesting\n       const transformedData = {\n         ...lessonData,\n-        questions: lessonData.questions?.map((question: Question) => ({\n+        questions: lessonData.questions?.map(question => ({\n           ...question,\n           metadata: {\n-            ...question.data,\n+            ...(question.metadata || {}),\n+            ...(question.data || {}),\n             exercise_prompts: question.exercise_prompts || []\n           }\n         }))\n       };\n@@ -1811,142 +1811,166 @@\n     >\n       <Card \n         className={cn(\n           \"overflow-hidden transition-all duration-300\",\n-          \"border border-primary/10\",\n-          \"bg-gradient-to-r\",\n-          getQuestionColor(question.type),\n-          isExpanded && \"ring-2 ring-primary/20 ring-offset-2\",\n-          \"hover:shadow-xl hover:translate-y-[-2px]\",\n-          \"group backdrop-blur-sm\",\n-          \"animate-in slide-in-from-bottom-2\",\n+          \"border-0 shadow-sm hover:shadow-md\",\n+          \"bg-gradient-to-r from-background/50 to-background/80\",\n+          \"backdrop-blur-sm\",\n+          isExpanded && \"ring-1 ring-primary/20\",\n+          \"group\",\n           progress === 100 && \"bg-opacity-50\"\n         )}\n       >\n         <CardHeader \n           className={cn(\n-            \"cursor-pointer select-none p-6\",\n+            \"cursor-pointer select-none py-4 px-5\",\n             \"transition-all duration-300\",\n-            \"hover:bg-primary/5 backdrop-blur-sm\",\n+            \"hover:bg-primary/5\",\n             isExpanded && \"bg-primary/5\"\n           )}\n           onClick={onToggle}\n         >\n           <div className=\"flex items-center justify-between\">\n-            <div className=\"flex items-center gap-3 flex-wrap\">\n+            <div className=\"flex items-center gap-2\">\n               <Badge \n                 variant=\"outline\" \n                 className={cn(\n-                  \"px-3 py-1 text-sm font-medium rounded-full\",\n-                  \"bg-background/50 backdrop-blur-sm shadow-sm\",\n-                  \"border border-primary/20\",\n-                  \"transition-all duration-300\",\n-                  \"group-hover:bg-primary/10 group-hover:border-primary/20\",\n-                  \"animate-in zoom-in-50 duration-300\"\n+                  \"h-7 px-2 text-xs font-medium\",\n+                  \"bg-background/50 backdrop-blur-sm\",\n+                  \"border-primary/20\",\n+                  \"transition-all duration-300\"\n                 )}\n               >\n                 Question {index + 1}\n               </Badge>\n               <Badge \n                 variant=\"outline\" \n-                className={cn(\n-                  \"flex items-center gap-2 px-3 py-1\",\n-                  \"bg-background/50 backdrop-blur-sm shadow-sm\",\n-                  \"border border-primary/20\",\n-                  \"transition-all duration-300\",\n-                  \"group-hover:bg-primary/10 group-hover:border-primary/20\",\n-                  \"animate-in zoom-in-50 duration-300 delay-100\"\n-                )}\n+                className=\"h-7 bg-background/50 backdrop-blur-sm\"\n               >\n                 {getQuestionIcon(question.type)}\n-                <span className=\"capitalize\">\n-                  {isQuestionType(question.type) ? QUESTION_TYPES[question.type as QuestionType]?.label : question.type}\n+                <span className=\"ml-1 text-xs\">\n+                  {isQuestionType(question.type) ? \n+                    QUESTION_TYPES[question.type as QuestionType]?.label : \n+                    question.type}\n                 </span>\n               </Badge>\n             </div>\n             <motion.div\n               animate={{ rotate: isExpanded ? 90 : 0 }}\n-              transition={{ duration: 0.3, type: \"spring\", stiffness: 200 }}\n-              className={cn(\n-                \"bg-background/50 backdrop-blur-sm p-2 rounded-full\",\n-                \"transition-all duration-300\",\n-                \"group-hover:bg-primary/10\",\n-                \"shadow-sm border border-primary/20\"\n-              )}\n+              className=\"text-primary/60\"\n             >\n-              <ChevronRight className=\"h-5 w-5 text-primary\" />\n+              <ChevronRight className=\"h-4 w-4\" />\n             </motion.div>\n           </div>\n \n-          <div className=\"mt-4 space-y-3\">\n-            <CardTitle className=\"text-xl group-hover:text-primary transition-colors duration-300\">\n+          <div className=\"mt-3 space-y-2\">\n+            <CardTitle className=\"text-lg font-medium\">\n               {question.title || 'Untitled Question'}\n             </CardTitle>\n-            <div className=\"relative\">\n-              <div className=\"absolute inset-0 bg-gradient-to-r from-primary/5 to-primary/10 rounded-full\" />\n-              <Progress \n-                value={progress} \n-                className={cn(\n-                  \"h-2 rounded-full\",\n-                  \"transition-all duration-300\",\n-                  progress === 100 \n-                    ? \"bg-green-500/20\" \n-                    : \"bg-primary/10\"\n-                )}\n-              />\n-              <p className=\"text-sm text-muted-foreground mt-2 flex items-center gap-2\">\n-                {progress === 100 ? (\n-                  <motion.span \n-                    initial={{ scale: 0 }}\n-                    animate={{ scale: 1 }}\n-                    className=\"flex items-center gap-1 text-green-500\"\n-                  >\n-                    <CheckCircle2 className=\"h-4 w-4\" />\n-                    Completed\n-                  </motion.span>\n-                ) : (\n-                  <motion.span\n-                    initial={{ opacity: 0 }}\n-                    animate={{ opacity: 1 }}\n-                    className=\"flex items-center gap-1\"\n-                  >\n-                    <Clock className=\"h-4 w-4\" />\n-                    {`${Math.round(progress)}% complete`}\n-                  </motion.span>\n-                )}\n-              </p>\n-            </div>\n+            <Progress \n+              value={progress} \n+              className=\"h-1.5 w-full\"\n+            />\n           </div>\n         </CardHeader>\n-\n+        \n+        {/* Question content when expanded */}\n         <AnimatePresence>\n           {isExpanded && (\n             <motion.div\n               initial={{ height: 0, opacity: 0 }}\n               animate={{ height: \"auto\", opacity: 1 }}\n               exit={{ height: 0, opacity: 0 }}\n-              transition={{ duration: 0.3, type: \"spring\", stiffness: 200 }}\n             >\n-              <CardContent className=\"p-6 pt-0\">\n-                <div className=\"space-y-6\">\n-                  <motion.div\n-                    initial={{ opacity: 0, y: 20 }}\n-                    animate={{ opacity: 1, y: 0 }}\n-                    transition={{ delay: 0.1 }}\n-                    className=\"bg-background/50 backdrop-blur-sm rounded-lg p-4 border border-primary/10 shadow-sm\"\n-                  >\n-                    <p className=\"text-muted-foreground\">{question.content || 'No content available.'}</p>\n-                  </motion.div>\n-                  <motion.div\n-                    initial={{ opacity: 0, y: 20 }}\n-                    animate={{ opacity: 1, y: 0 }}\n-                    transition={{ delay: 0.2 }}\n-                    className=\"bg-background/80 backdrop-blur-sm rounded-lg p-4 border border-primary/10 shadow-sm\"\n-                  >\n-                    {renderQuestionContent()}\n-                  </motion.div>\n-                  {renderExercisePrompts()}\n+              <CardContent className=\"px-5 py-4 space-y-4\">\n+                {/* Question content */}\n+                <div className=\"prose prose-sm max-w-none\">\n+                  <p className=\"text-muted-foreground\">\n+                    {question.content}\n+                  </p>\n                 </div>\n+\n+                {/* Exercise prompts */}\n+                {question.metadata?.exercise_prompts?.length > 0 && (\n+                  <div className=\"mt-6 space-y-4\">\n+                    <div className=\"flex items-center gap-2 text-primary\">\n+                      <PenTool className=\"h-4 w-4\" />\n+                      <h3 className=\"text-sm font-medium\">Practice Exercises</h3>\n+                    </div>\n+                    \n+                    <div className=\"grid gap-4\">\n+                      {question.metadata.exercise_prompts.map((prompt, idx) => (\n+                        <Card \n+                          key={idx}\n+                          className=\"border border-primary/10 bg-background/50 backdrop-blur-sm\"\n+                        >\n+                          <CardHeader className=\"py-3 px-4\">\n+                            <div className=\"flex items-center gap-2\">\n+                              <Badge variant=\"outline\" className=\"bg-primary/5\">\n+                                Exercise {idx + 1}\n+                              </Badge>\n+                              {prompt.type && (\n+                                <Badge variant=\"outline\" className=\"bg-primary/5\">\n+                                  {prompt.type}\n+                                </Badge>\n+                              )}\n+                              {prompt.difficulty && (\n+                                <Badge \n+                                  variant=\"outline\" \n+                                  className={cn(\n+                                    \"capitalize\",\n+                                    prompt.difficulty === 'beginner' && \n+                                      \"bg-green-500/10 text-green-500\",\n+                                    prompt.difficulty === 'intermediate' && \n+                                      \"bg-yellow-500/10 text-yellow-500\",\n+                                    prompt.difficulty === 'advanced' && \n+                                      \"bg-red-500/10 text-red-500\"\n+                                  )}\n+                                >\n+                                  {prompt.difficulty}\n+                                </Badge>\n+                              )}\n+                            </div>\n+                            <p className=\"mt-2 text-sm\">{prompt.text}</p>\n+                          </CardHeader>\n+                          \n+                          {prompt.content && (\n+                            <CardContent className=\"py-3 px-4\">\n+                              <div className=\"space-y-3\">\n+                                {prompt.content.instructions && (\n+                                  <div className=\"flex items-start gap-2 text-sm\">\n+                                    <Lightbulb className=\"h-4 w-4 text-primary mt-0.5\" />\n+                                    <p className=\"text-muted-foreground\">\n+                                      {prompt.content.instructions}\n+                                    </p>\n+                                  </div>\n+                                )}\n+                                \n+                                {prompt.media && (\n+                                  <div className=\"rounded-lg overflow-hidden border border-primary/10\">\n+                                    {prompt.type === 'image' ? (\n+                                      <img \n+                                        src={prompt.media} \n+                                        alt={prompt.text}\n+                                        className=\"w-full h-auto object-cover\"\n+                                      />\n+                                    ) : (\n+                                      <video \n+                                        src={prompt.media}\n+                                        controls\n+                                        className=\"w-full\"\n+                                      />\n+                                    )}\n+                                  </div>\n+                                )}\n+                              </div>\n+                            </CardContent>\n+                          )}\n+                        </Card>\n+                      ))}\n+                    </div>\n+                  </div>\n+                )}\n               </CardContent>\n             </motion.div>\n           )}\n         </AnimatePresence>\n"
                },
                {
                    "date": 1739686852734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1897,9 +1897,9 @@\n                       <h3 className=\"text-sm font-medium\">Practice Exercises</h3>\n                     </div>\n                     \n                     <div className=\"grid gap-4\">\n-                      {question.metadata.exercise_prompts.map((prompt, idx) => (\n+                      {question.metadata?.exercise_prompts?.map((prompt, idx) => (\n                         <Card \n                           key={idx}\n                           className=\"border border-primary/10 bg-background/50 backdrop-blur-sm\"\n                         >\n"
                },
                {
                    "date": 1739686860428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1889,9 +1889,9 @@\n                   </p>\n                 </div>\n \n                 {/* Exercise prompts */}\n-                {question.metadata?.exercise_prompts?.length > 0 && (\n+                {question.metadata?.exercise_prompts?.length && question.metadata?.exercise_prompts?.length > 0 && (\n                   <div className=\"mt-6 space-y-4\">\n                     <div className=\"flex items-center gap-2 text-primary\">\n                       <PenTool className=\"h-4 w-4\" />\n                       <h3 className=\"text-sm font-medium\">Practice Exercises</h3>\n"
                },
                {
                    "date": 1739686953400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -386,9 +386,9 @@\n \n       // Transform the data to ensure proper nesting\n       const transformedData = {\n         ...lessonData,\n-        questions: lessonData.questions?.map(question => ({\n+        questions: lessonData.questions?.map((question: Question) => ({\n           ...question,\n           metadata: {\n             ...(question.metadata || {}),\n             ...(question.data || {}),\n"
                },
                {
                    "date": 1739687020041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n   CheckCircle, HelpCircle, Award, Star, ImageIcon, PenTool,\n   Mic, Video, FileText, Pencil, Book, MessageCircle, Brain,\n   Headphones, Type, Layers, Target, Presentation, Sparkles,\n   Maximize2, Minimize2, GripVertical\n-} from 'lucide-react';\n+} from 'lucide-react';-card\n import { cn } from \"@/lib/utils\";\n import { Badge } from \"@/components/ui/badge\";\n import { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\n import { ScrollArea } from \"@/components/ui/scroll-area\";\n"
                },
                {
                    "date": 1739687093150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1875,8 +1875,9 @@\n                   </p>\n                 </div>\n \n                 {/* Exercise prompts */}\n+                {question.metadata?.exercise_prompts?.length > 0 && (\n                 {question.metadata?.exercise_prompts?.length && question.metadata?.exercise_prompts?.length > 0 && (\n                   <div className=\"mt-6 space-y-4\">\n                     <div className=\"flex items-center gap-2 text-primary\">\n                       <PenTool className=\"h-4 w-4\" />\n"
                },
                {
                    "date": 1739687174843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n   CheckCircle, HelpCircle, Award, Star, ImageIcon, PenTool,\n   Mic, Video, FileText, Pencil, Book, MessageCircle, Brain,\n   Headphones, Type, Layers, Target, Presentation, Sparkles,\n   Maximize2, Minimize2, GripVertical\n-} from 'lucide-react';-card\n+} from 'lucide-react';\n import { cn } from \"@/lib/utils\";\n import { Badge } from \"@/components/ui/badge\";\n import { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\n import { ScrollArea } from \"@/components/ui/scroll-area\";\n@@ -386,9 +386,9 @@\n \n       // Transform the data to ensure proper nesting\n       const transformedData = {\n         ...lessonData,\n-        questions: lessonData.questions?.map((question: Question) => ({\n+        questions: lessonData.questions?.map(question => ({\n           ...question,\n           metadata: {\n             ...(question.metadata || {}),\n             ...(question.data || {}),\n@@ -432,14 +432,23 @@\n \n   return (\n     <Dialog open={isOpen} onOpenChange={onClose}>\n       <DialogContent \n-        className=\"max-w-[100vw] w-full h-[100vh] p-0 max-h-screen bg-gradient-to-b from-background to-accent/10\"\n+        className={cn(\n+          \"max-w-[95vw] w-full h-[95vh] p-0\",\n+          \"bg-gradient-to-b from-background/95 to-background/50\",\n+          \"backdrop-blur-md border-none rounded-xl\",\n+          \"shadow-2xl\"\n+        )}\n         aria-labelledby={titleId}\n         aria-describedby={descriptionId}\n       >\n         {/* Header Section */}\n-        <DialogHeader className=\"p-6 border-b bg-background/95 backdrop-blur-sm sticky top-0 z-50\">\n+        <DialogHeader className={cn(\n+          \"p-6 border-b border-primary/10\",\n+          \"bg-background/95 backdrop-blur-sm\",\n+          \"sticky top-0 z-50\"\n+        )}>\n           <div className=\"flex items-center justify-between\">\n             <div className=\"flex-1\">\n               <motion.div\n                 initial={{ opacity: 0, y: -20 }}\n@@ -537,16 +546,13 @@\n           </Tabs>\n         </DialogHeader>\n \n         {/* Main Content Area */}\n-        <div className=\"flex h-[calc(100vh-12rem)] w-full\" ref={resizeRef}>\n+        <div className=\"grid grid-cols-[1fr,auto,minmax(300px,25%)] h-[calc(100vh-12rem)]\">\n           {/* Left Panel - Main Content */}\n-          <div \n-            className=\"h-full overflow-hidden transition-all duration-75\"\n-            style={{ width: `${leftPanelWidth}%` }}\n-          >\n-            <ScrollArea className=\"h-full w-full\">\n-              <div className=\"container p-6\">\n+          <div className=\"overflow-hidden\">\n+            <ScrollArea className=\"h-full\">\n+              <div className=\"p-6 space-y-4\">\n                 {lessonContent.isLoading ? (\n                   <motion.div \n                     initial={{ opacity: 0, scale: 0.95 }}\n                     animate={{ opacity: 1, scale: 1 }}\n@@ -601,10 +607,11 @@\n \n           {/* Resize Handle */}\n           <div \n             className={cn(\n-              \"w-6 relative cursor-col-resize select-none group z-10\",\n-              startResizing && \"active\"\n+              \"w-1 mx-2 relative cursor-col-resize\",\n+              \"bg-primary/10 hover:bg-primary/20\",\n+              \"transition-colors duration-200\"\n             )}\n             onMouseDown={() => setStartResizing(true)}\n             onMouseEnter={() => setIsResizeHovered(true)}\n             onMouseLeave={() => setIsResizeHovered(false)}\n@@ -1890,17 +1897,16 @@\n                 </div>\n \n                 {/* Exercise prompts */}\n                 {question.metadata?.exercise_prompts?.length > 0 && (\n-                {question.metadata?.exercise_prompts?.length && question.metadata?.exercise_prompts?.length > 0 && (\n                   <div className=\"mt-6 space-y-4\">\n                     <div className=\"flex items-center gap-2 text-primary\">\n                       <PenTool className=\"h-4 w-4\" />\n                       <h3 className=\"text-sm font-medium\">Practice Exercises</h3>\n                     </div>\n                     \n                     <div className=\"grid gap-4\">\n-                      {question.metadata?.exercise_prompts?.map((prompt, idx) => (\n+                      {question.metadata.exercise_prompts.map((prompt, idx) => (\n                         <Card \n                           key={idx}\n                           className=\"border border-primary/10 bg-background/50 backdrop-blur-sm\"\n                         >\n"
                },
                {
                    "date": 1739687182000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -631,8 +631,9 @@\n                 (startResizing || isResizeHovered) ? \"text-primary\" : \"text-muted-foreground/50\"\n               )} />\n             </div>\n           </div>\n+          \n \n           {/* Right Panel - Media Preview */}\n           <div \n             className={cn(\n"
                },
                {
                    "date": 1739687253442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -386,9 +386,9 @@\n \n       // Transform the data to ensure proper nesting\n       const transformedData = {\n         ...lessonData,\n-        questions: lessonData.questions?.map(question => ({\n+        questions: lessonData.questions?.map((question: Question) => ({\n           ...question,\n           metadata: {\n             ...(question.metadata || {}),\n             ...(question.data || {}),\n@@ -631,9 +631,13 @@\n                 (startResizing || isResizeHovered) ? \"text-primary\" : \"text-muted-foreground/50\"\n               )} />\n             </div>\n           </div>\n-          \n+          {/* Right Panel - Media Preview */}\n+          <div className={cn(\n+            \"bg-background/50 backdrop-blur-sm\",\n+            \"border-l border-primary/10\"\n+          )}></div>\n \n           {/* Right Panel - Media Preview */}\n           <div \n             className={cn(\n"
                },
                {
                    "date": 1739687335802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -386,9 +386,9 @@\n \n       // Transform the data to ensure proper nesting\n       const transformedData = {\n         ...lessonData,\n-        questions: lessonData.questions?.map((question: Question) => ({\n+        questions: lessonData.questions?.map(question => ({\n           ...question,\n           metadata: {\n             ...(question.metadata || {}),\n             ...(question.data || {}),\n"
                },
                {
                    "date": 1739687376940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -386,9 +386,9 @@\n \n       // Transform the data to ensure proper nesting\n       const transformedData = {\n         ...lessonData,\n-        questions: lessonData.questions?.map(question => ({\n+        questions: lessonData.questions?.map((question: Question) => ({\n           ...question,\n           metadata: {\n             ...(question.metadata || {}),\n             ...(question.data || {}),\n@@ -432,23 +432,14 @@\n \n   return (\n     <Dialog open={isOpen} onOpenChange={onClose}>\n       <DialogContent \n-        className={cn(\n-          \"max-w-[95vw] w-full h-[95vh] p-0\",\n-          \"bg-gradient-to-b from-background/95 to-background/50\",\n-          \"backdrop-blur-md border-none rounded-xl\",\n-          \"shadow-2xl\"\n-        )}\n+        className=\"max-w-[100vw] w-full h-[100vh] p-0 max-h-screen bg-gradient-to-b from-background to-accent/10\"\n         aria-labelledby={titleId}\n         aria-describedby={descriptionId}\n       >\n         {/* Header Section */}\n-        <DialogHeader className={cn(\n-          \"p-6 border-b border-primary/10\",\n-          \"bg-background/95 backdrop-blur-sm\",\n-          \"sticky top-0 z-50\"\n-        )}>\n+        <DialogHeader className=\"p-6 border-b bg-background/95 backdrop-blur-sm sticky top-0 z-50\">\n           <div className=\"flex items-center justify-between\">\n             <div className=\"flex-1\">\n               <motion.div\n                 initial={{ opacity: 0, y: -20 }}\n@@ -546,13 +537,16 @@\n           </Tabs>\n         </DialogHeader>\n \n         {/* Main Content Area */}\n-        <div className=\"grid grid-cols-[1fr,auto,minmax(300px,25%)] h-[calc(100vh-12rem)]\">\n+        <div className=\"flex h-[calc(100vh-12rem)] w-full\" ref={resizeRef}>\n           {/* Left Panel - Main Content */}\n-          <div className=\"overflow-hidden\">\n-            <ScrollArea className=\"h-full\">\n-              <div className=\"p-6 space-y-4\">\n+          <div \n+            className=\"h-full overflow-hidden transition-all duration-75\"\n+            style={{ width: `${leftPanelWidth}%` }}\n+          >\n+            <ScrollArea className=\"h-full w-full\">\n+              <div className=\"container p-6\">\n                 {lessonContent.isLoading ? (\n                   <motion.div \n                     initial={{ opacity: 0, scale: 0.95 }}\n                     animate={{ opacity: 1, scale: 1 }}\n@@ -1901,17 +1895,17 @@\n                   </p>\n                 </div>\n \n                 {/* Exercise prompts */}\n-                {question.metadata?.exercise_prompts?.length > 0 && (\n+                {question.metadata?.exercise_prompts?.length && question.metadata?.exercise_prompts?.length > 0 && (\n                   <div className=\"mt-6 space-y-4\">\n                     <div className=\"flex items-center gap-2 text-primary\">\n                       <PenTool className=\"h-4 w-4\" />\n                       <h3 className=\"text-sm font-medium\">Practice Exercises</h3>\n                     </div>\n                     \n                     <div className=\"grid gap-4\">\n-                      {question.metadata.exercise_prompts.map((prompt, idx) => (\n+                      {question.metadata?.exercise_prompts?.map((prompt, idx) => (\n                         <Card \n                           key={idx}\n                           className=\"border border-primary/10 bg-background/50 backdrop-blur-sm\"\n                         >\n"
                },
                {
                    "date": 1739687384302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1799,10 +1799,10 @@\n                       className=\"min-h-[100px] bg-card border-primary/10\"\n                       onChange={() => onAnswer(Math.min(100, progress + 10))}\n                     />\n                   </div>\n-                </div>\n-              </CardContent>\n+                </CardContent>\n+              </Card>\n             </Card>\n           ))}\n         </div>\n       </motion.div>\n@@ -1895,9 +1895,9 @@\n                   </p>\n                 </div>\n \n                 {/* Exercise prompts */}\n-                {question.metadata?.exercise_prompts?.length && question.metadata?.exercise_prompts?.length > 0 && (\n+                {(question.metadata?.exercise_prompts?.length ?? 0) > 0 && (\n                   <div className=\"mt-6 space-y-4\">\n                     <div className=\"flex items-center gap-2 text-primary\">\n                       <PenTool className=\"h-4 w-4\" />\n                       <h3 className=\"text-sm font-medium\">Practice Exercises</h3>\n"
                },
                {
                    "date": 1739687442648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -386,9 +386,9 @@\n \n       // Transform the data to ensure proper nesting\n       const transformedData = {\n         ...lessonData,\n-        questions: lessonData.questions?.map((question: Question) => ({\n+        questions: lessonData.questions?.map(question => ({\n           ...question,\n           metadata: {\n             ...(question.metadata || {}),\n             ...(question.data || {}),\n@@ -432,14 +432,23 @@\n \n   return (\n     <Dialog open={isOpen} onOpenChange={onClose}>\n       <DialogContent \n-        className=\"max-w-[100vw] w-full h-[100vh] p-0 max-h-screen bg-gradient-to-b from-background to-accent/10\"\n+        className={cn(\n+          \"max-w-[95vw] w-full h-[95vh] p-0\",\n+          \"bg-gradient-to-b from-background/95 to-background/50\",\n+          \"backdrop-blur-md border-none rounded-xl\",\n+          \"shadow-2xl\"\n+        )}\n         aria-labelledby={titleId}\n         aria-describedby={descriptionId}\n       >\n         {/* Header Section */}\n-        <DialogHeader className=\"p-6 border-b bg-background/95 backdrop-blur-sm sticky top-0 z-50\">\n+        <DialogHeader className={cn(\n+          \"p-6 border-b border-primary/10\",\n+          \"bg-background/95 backdrop-blur-sm\",\n+          \"sticky top-0 z-50\"\n+        )}>\n           <div className=\"flex items-center justify-between\">\n             <div className=\"flex-1\">\n               <motion.div\n                 initial={{ opacity: 0, y: -20 }}\n@@ -536,17 +545,14 @@\n             </TabsList>\n           </Tabs>\n         </DialogHeader>\n \n-        {/* Main Content Area */}\n-        <div className=\"flex h-[calc(100vh-12rem)] w-full\" ref={resizeRef}>\n-          {/* Left Panel - Main Content */}\n-          <div \n-            className=\"h-full overflow-hidden transition-all duration-75\"\n-            style={{ width: `${leftPanelWidth}%` }}\n-          >\n-            <ScrollArea className=\"h-full w-full\">\n-              <div className=\"container p-6\">\n+        {/* Main content area with improved grid layout */}\n+        <div className=\"grid grid-cols-[1fr,auto,minmax(300px,25%)] h-[calc(100vh-12rem)]\">\n+          {/* Left panel - Main content */}\n+          <div className=\"overflow-hidden\">\n+            <ScrollArea className=\"h-full\">\n+              <div className=\"p-6 space-y-4\">\n                 {lessonContent.isLoading ? (\n                   <motion.div \n                     initial={{ opacity: 0, scale: 0.95 }}\n                     animate={{ opacity: 1, scale: 1 }}\n@@ -598,49 +604,23 @@\n               </div>\n             </ScrollArea>\n           </div>\n \n-          {/* Resize Handle */}\n+          {/* Resize handle */}\n           <div \n             className={cn(\n               \"w-1 mx-2 relative cursor-col-resize\",\n               \"bg-primary/10 hover:bg-primary/20\",\n               \"transition-colors duration-200\"\n             )}\n             onMouseDown={() => setStartResizing(true)}\n-            onMouseEnter={() => setIsResizeHovered(true)}\n-            onMouseLeave={() => setIsResizeHovered(false)}\n-          >\n-            <div className={cn(\n-              \"absolute inset-y-0 left-1/2 -translate-x-1/2 w-px transition-all duration-200\",\n-              (startResizing || isResizeHovered) ? \"bg-primary/50 w-0.5\" : \"bg-border\"\n-            )} />\n-            <div className={cn(\n-              \"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2\",\n-              \"w-4 h-8 rounded-full flex items-center justify-center\",\n-              \"transition-all duration-200\",\n-              (startResizing || isResizeHovered) ? \"bg-primary/20\" : \"bg-transparent\"\n-            )}>\n-              <GripVertical className={cn(\n-                \"h-4 w-4 transition-colors duration-200\",\n-                (startResizing || isResizeHovered) ? \"text-primary\" : \"text-muted-foreground/50\"\n-              )} />\n-            </div>\n-          </div>\n-          {/* Right Panel - Media Preview */}\n+          />\n+\n+          {/* Right panel - Media preview */}\n           <div className={cn(\n             \"bg-background/50 backdrop-blur-sm\",\n             \"border-l border-primary/10\"\n-          )}></div>\n-\n-          {/* Right Panel - Media Preview */}\n-          <div \n-            className={cn(\n-              \"h-full border-l bg-muted/5 backdrop-blur-sm transition-all duration-75\",\n-              \"relative overflow-hidden\"\n-            )}\n-            style={{ width: `${100 - leftPanelWidth}%` }}\n-          >\n+          )}>\n             <div className=\"h-full flex flex-col\">\n               <div className=\"p-4 border-b bg-background/50 backdrop-blur-sm flex items-center justify-between sticky top-0 z-10\">\n                 <div className=\"flex items-center gap-2\">\n                   <div className=\"p-2 rounded-full bg-primary/10\">\n"
                },
                {
                    "date": 1739687457645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -612,11 +612,28 @@\n               \"bg-primary/10 hover:bg-primary/20\",\n               \"transition-colors duration-200\"\n             )}\n             onMouseDown={() => setStartResizing(true)}\n-          />\n-\n-          {/* Right panel - Media preview */}\n+            onMouseEnter={() => setIsResizeHovered(true)}\n+            onMouseLeave={() => setIsResizeHovered(false)}\n+          >\n+            <div className={cn(\n+              \"absolute inset-y-0 left-1/2 -translate-x-1/2 w-px transition-all duration-200\",\n+              (startResizing || isResizeHovered) ? \"bg-primary/50 w-0.5\" : \"bg-border\"\n+            )} />\n+            <div className={cn(\n+              \"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2\",\n+              \"w-4 h-8 rounded-full flex items-center justify-center\",\n+              \"transition-all duration-200\",\n+              (startResizing || isResizeHovered) ? \"bg-primary/20\" : \"bg-transparent\"\n+            )}>\n+              <GripVertical className={cn(\n+                \"h-4 w-4 transition-colors duration-200\",\n+                (startResizing || isResizeHovered) ? \"text-primary\" : \"text-muted-foreground/50\"\n+              )} />\n+            </div>\n+          </div>\n+          {/* Right Panel - Media Preview */}\n           <div className={cn(\n             \"bg-background/50 backdrop-blur-sm\",\n             \"border-l border-primary/10\"\n           )}>\n@@ -1875,17 +1892,17 @@\n                   </p>\n                 </div>\n \n                 {/* Exercise prompts */}\n-                {(question.metadata?.exercise_prompts?.length ?? 0) > 0 && (\n+                {question.metadata?.exercise_prompts?.length > 0 && (\n                   <div className=\"mt-6 space-y-4\">\n                     <div className=\"flex items-center gap-2 text-primary\">\n                       <PenTool className=\"h-4 w-4\" />\n                       <h3 className=\"text-sm font-medium\">Practice Exercises</h3>\n                     </div>\n                     \n                     <div className=\"grid gap-4\">\n-                      {question.metadata?.exercise_prompts?.map((prompt, idx) => (\n+                      {question.metadata.exercise_prompts.map((prompt, idx) => (\n                         <Card \n                           key={idx}\n                           className=\"border border-primary/10 bg-background/50 backdrop-blur-sm\"\n                         >\n"
                },
                {
                    "date": 1739687468381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -635,9 +635,18 @@\n           {/* Right Panel - Media Preview */}\n           <div className={cn(\n             \"bg-background/50 backdrop-blur-sm\",\n             \"border-l border-primary/10\"\n-          )}>\n+          )}></div>\n+\n+          {/* Right Panel - Media Preview */}\n+          <div \n+            className={cn(\n+              \"h-full border-l bg-muted/5 backdrop-blur-sm transition-all duration-75\",\n+              \"relative overflow-hidden\"\n+            )}\n+            style={{ width: `${100 - leftPanelWidth}%` }}\n+          >\n             <div className=\"h-full flex flex-col\">\n               <div className=\"p-4 border-b bg-background/50 backdrop-blur-sm flex items-center justify-between sticky top-0 z-10\">\n                 <div className=\"flex items-center gap-2\">\n                   <div className=\"p-2 rounded-full bg-primary/10\">\n"
                },
                {
                    "date": 1739687481680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -386,9 +386,9 @@\n \n       // Transform the data to ensure proper nesting\n       const transformedData = {\n         ...lessonData,\n-        questions: lessonData.questions?.map(question => ({\n+        questions: lessonData.questions?.map((question: Question) => ({\n           ...question,\n           metadata: {\n             ...(question.metadata || {}),\n             ...(question.data || {}),\n"
                },
                {
                    "date": 1739687501142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -550,9 +550,9 @@\n         <div className=\"grid grid-cols-[1fr,auto,minmax(300px,25%)] h-[calc(100vh-12rem)]\">\n           {/* Left panel - Main content */}\n           <div className=\"overflow-hidden\">\n             <ScrollArea className=\"h-full\">\n-              <div className=\"p-6 space-y-4\">\n+              <div className=\"p-6 space-y wf-4\">\n                 {lessonContent.isLoading ? (\n                   <motion.div \n                     initial={{ opacity: 0, scale: 0.95 }}\n                     animate={{ opacity: 1, scale: 1 }}\n"
                },
                {
                    "date": 1739687583954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -432,23 +432,14 @@\n \n   return (\n     <Dialog open={isOpen} onOpenChange={onClose}>\n       <DialogContent \n-        className={cn(\n-          \"max-w-[95vw] w-full h-[95vh] p-0\",\n-          \"bg-gradient-to-b from-background/95 to-background/50\",\n-          \"backdrop-blur-md border-none rounded-xl\",\n-          \"shadow-2xl\"\n-        )}\n+        className=\"max-w-[100vw] w-full h-[100vh] p-0 max-h-screen bg-gradient-to-b from-background to-accent/10\"\n         aria-labelledby={titleId}\n         aria-describedby={descriptionId}\n       >\n         {/* Header Section */}\n-        <DialogHeader className={cn(\n-          \"p-6 border-b border-primary/10\",\n-          \"bg-background/95 backdrop-blur-sm\",\n-          \"sticky top-0 z-50\"\n-        )}>\n+        <DialogHeader className=\"p-6 border-b bg-background/95 backdrop-blur-sm sticky top-0 z-50\">\n           <div className=\"flex items-center justify-between\">\n             <div className=\"flex-1\">\n               <motion.div\n                 initial={{ opacity: 0, y: -20 }}\n@@ -550,9 +541,9 @@\n         <div className=\"grid grid-cols-[1fr,auto,minmax(300px,25%)] h-[calc(100vh-12rem)]\">\n           {/* Left panel - Main content */}\n           <div className=\"overflow-hidden\">\n             <ScrollArea className=\"h-full\">\n-              <div className=\"p-6 space-y wf-4\">\n+              <div className=\"p-6 space-y-4 w-full\">\n                 {lessonContent.isLoading ? (\n                   <motion.div \n                     initial={{ opacity: 0, scale: 0.95 }}\n                     animate={{ opacity: 1, scale: 1 }}\n@@ -1901,17 +1892,17 @@\n                   </p>\n                 </div>\n \n                 {/* Exercise prompts */}\n-                {question.metadata?.exercise_prompts?.length > 0 && (\n+                {(question.metadata?.exercise_prompts?.length ?? 0) > 0 && (\n                   <div className=\"mt-6 space-y-4\">\n                     <div className=\"flex items-center gap-2 text-primary\">\n                       <PenTool className=\"h-4 w-4\" />\n                       <h3 className=\"text-sm font-medium\">Practice Exercises</h3>\n                     </div>\n                     \n                     <div className=\"grid gap-4\">\n-                      {question.metadata.exercise_prompts.map((prompt, idx) => (\n+                      {question.metadata?.exercise_prompts?.map((prompt, idx) => (\n                         <Card \n                           key={idx}\n                           className=\"border border-primary/10 bg-background/50 backdrop-blur-sm\"\n                         >\n"
                },
                {
                    "date": 1739687626329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1769,14 +1769,14 @@\n                           alt={prompt.text}\n                           className=\"w-full h-auto object-cover\"\n                         />\n                       ) : (\n-                        <video \n-                          src={prompt.media}\n-                          controls\n-                          className=\"w-full\"\n-                        />\n-                      )}\n+                          <video \n+                            src={prompt.media}\n+                            controls\n+                            className=\"w-full\"\n+                          />\n+                        )}\n                     </div>\n                   )}\n                   <div className=\"space-y-2\">\n                     {prompt.content?.writingPrompt && (\n@@ -1796,10 +1796,10 @@\n                       className=\"min-h-[100px] bg-card border-primary/10\"\n                       onChange={() => onAnswer(Math.min(100, progress + 10))}\n                     />\n                   </div>\n-                </CardContent>\n-              </Card>\n+                </div>\n+              </CardContent>\n             </Card>\n           ))}\n         </div>\n       </motion.div>\n"
                },
                {
                    "date": 1739687882071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,8 @@\n import { Textarea } from \"@/components/ui/textarea\";\n import { Collapsible, CollapsibleTrigger, CollapsibleContent } from \"@/components/ui/collapsible\";\n import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n import { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\n-import { supabase } from \"@/lib/supabase\";\n \n // Question Types from question-form.tsx\n interface QuestionMetadata {\n   prompt?: string;\n@@ -87,22 +86,24 @@\n   id: string;\n   title: string;\n   content: string;\n   type: string;\n-  metadata: QuestionMetadata;\n+  metadata: QuestionMetadata & {\n+    exercise_prompts?: Array<{\n+      id: string;\n+      text: string;\n+      type?: string;\n+      media?: string;\n+      content?: {\n+        instructions?: string;\n+        writingPrompt?: string;\n+        speakingPrompt?: string;\n+      };\n+      difficulty?: 'beginner' | 'intermediate' | 'advanced';\n+    }>;\n+  };\n+  points?: number;\n   data?: any;\n-  exercise_prompts?: Array<{\n-    id: string;\n-    text: string;\n-    type?: string;\n-    media?: string;\n-    content?: {\n-      instructions?: string;\n-      writingPrompt?: string;\n-      speakingPrompt?: string;\n-    };\n-    difficulty?: 'beginner' | 'intermediate' | 'advanced';\n-  }>;\n }\n \n interface LessonDialogProps {\n   isOpen: boolean;\n@@ -154,19 +155,8 @@\n \n   // Add this new state for resize hover effect\n   const [isResizeHovered, setIsResizeHovered] = useState(false);\n \n-  // Add this new state for lesson content\n-  const [lessonState, setLessonState] = useState<{\n-    content: any | null;\n-    isLoading: boolean;\n-    error: string | null;\n-  }>({\n-    content: null,\n-    isLoading: false,\n-    error: null\n-  });\n-\n   // Audio event handlers\n   const handleTimeUpdate = () => {\n     if (audioRef.current) {\n       const progress = (audioRef.current.currentTime / audioRef.current.duration) * 100;\n@@ -344,93 +334,8 @@\n       document.body.style.userSelect = 'auto';\n     };\n   }, [startResizing]);\n \n-  const fetchLessonContent = async (lessonId: string) => {\n-    try {\n-      const { data: { session } } = await supabase.auth.getSession();\n-      if (!session) throw new Error('No active session');\n-\n-      // First fetch the lesson with its questions\n-      const { data: lessonData, error: lessonError } = await supabase\n-        .from('lessons')\n-        .select(`\n-          *,\n-          questions:questions!inner (\n-            id,\n-            title,\n-            content,\n-            type,\n-            data,\n-            metadata,\n-            exercise_prompts!questions_exercise_prompts_fkey (\n-              id,\n-              text,\n-              type,\n-              media,\n-              narration,\n-              saytext,\n-              question_id,\n-              correct,\n-              content,\n-              metadata,\n-              difficulty\n-            )\n-          ),\n-          activities (*)\n-        `)\n-        .eq('id', lessonId)\n-        .single();\n-\n-      if (lessonError) throw lessonError;\n-      if (!lessonData) throw new Error('No lesson data found');\n-\n-      // Transform the data to ensure proper nesting\n-      const transformedData = {\n-        ...lessonData,\n-        questions: lessonData.questions?.map((question: Question) => ({\n-          ...question,\n-          metadata: {\n-            ...(question.metadata || {}),\n-            ...(question.data || {}),\n-            exercise_prompts: question.exercise_prompts || []\n-          }\n-        }))\n-      };\n-\n-      setLessonState({\n-        content: transformedData,\n-        isLoading: false,\n-        error: null\n-      });\n-\n-      logger.info('Lesson content loaded with exercise prompts', {\n-        source: 'LessonDialog',\n-        context: { \n-          lessonId,\n-          questionCount: transformedData.questions?.length,\n-          exercisePromptCount: transformedData.questions?.reduce(\n-            (acc: number, q: Question) => acc + (q.exercise_prompts?.length || 0), \n-            0\n-          ),\n-          timestamp: new Date().toISOString()\n-        }\n-      });\n-\n-    } catch (error) {\n-      logger.error('Failed to load lesson content', {\n-        source: 'LessonDialog',\n-        context: { error }\n-      });\n-      \n-      setLessonState({\n-        content: null,\n-        isLoading: false,\n-        error: error instanceof Error ? error.message : 'Failed to load lesson content'\n-      });\n-    }\n-  };\n-\n   return (\n     <Dialog open={isOpen} onOpenChange={onClose}>\n       <DialogContent \n         className=\"max-w-[100vw] w-full h-[100vh] p-0 max-h-screen bg-gradient-to-b from-background to-accent/10\"\n@@ -536,14 +441,17 @@\n             </TabsList>\n           </Tabs>\n         </DialogHeader>\n \n-        {/* Main content area with improved grid layout */}\n-        <div className=\"grid grid-cols-[1fr,auto,minmax(300px,25%)] h-[calc(100vh-12rem)]\">\n-          {/* Left panel - Main content */}\n-          <div className=\"overflow-hidden\">\n-            <ScrollArea className=\"h-full\">\n-              <div className=\"p-6 space-y-4 w-full\">\n+        {/* Main Content Area */}\n+        <div className=\"flex h-[calc(100vh-12rem)] w-full\" ref={resizeRef}>\n+          {/* Left Panel - Main Content */}\n+          <div \n+            className=\"h-full overflow-hidden transition-all duration-75\"\n+            style={{ width: `${leftPanelWidth}%` }}\n+          >\n+            <ScrollArea className=\"h-full w-full\">\n+              <div className=\"container p-6\">\n                 {lessonContent.isLoading ? (\n                   <motion.div \n                     initial={{ opacity: 0, scale: 0.95 }}\n                     animate={{ opacity: 1, scale: 1 }}\n@@ -595,14 +503,13 @@\n               </div>\n             </ScrollArea>\n           </div>\n \n-          {/* Resize handle */}\n+          {/* Resize Handle */}\n           <div \n             className={cn(\n-              \"w-1 mx-2 relative cursor-col-resize\",\n-              \"bg-primary/10 hover:bg-primary/20\",\n-              \"transition-colors duration-200\"\n+              \"w-6 relative cursor-col-resize select-none group z-10\",\n+              startResizing && \"active\"\n             )}\n             onMouseDown={() => setStartResizing(true)}\n             onMouseEnter={() => setIsResizeHovered(true)}\n             onMouseLeave={() => setIsResizeHovered(false)}\n@@ -622,13 +529,8 @@\n                 (startResizing || isResizeHovered) ? \"text-primary\" : \"text-muted-foreground/50\"\n               )} />\n             </div>\n           </div>\n-          {/* Right Panel - Media Preview */}\n-          <div className={cn(\n-            \"bg-background/50 backdrop-blur-sm\",\n-            \"border-l border-primary/10\"\n-          )}></div>\n \n           {/* Right Panel - Media Preview */}\n           <div \n             className={cn(\n@@ -1076,9 +978,9 @@\n                     {exercise.difficulty}\n                   </Badge>\n                 )}\n               </div>\n-              <CardTitle className=\"text-base mt-2\">{exercise.text}</CardTitle>\n+              <CardTitle className=\"text-lg mt-2\">{exercise.text}</CardTitle>\n               {exercise.content?.instructions && (\n                 <CardDescription className=\"mt-2 flex items-center gap-2\">\n                   <Lightbulb className=\"h-4 w-4 text-primary\" />\n                   {exercise.content.instructions}\n@@ -1088,19 +990,21 @@\n             <CardContent>\n               <div className=\"space-y-4\">\n                 {exercise.media && (\n                   <div className=\"mt-4 rounded-lg overflow-hidden border\">\n-                    {exercise.type === 'image' ? (\n+                    {exercise.type === 'image' && (\n                       <img \n                         src={exercise.media} \n                         alt={exercise.text}\n                         className=\"w-full h-auto object-cover\"\n                       />\n-                    ) : (\n+                    )}\n+                    {exercise.type === 'video' && (\n                       <video \n                         src={exercise.media}\n                         controls\n                         className=\"w-full\"\n+                        preload=\"metadata\"\n                       />\n                     )}\n                   </div>\n                 )}\n@@ -1769,14 +1673,14 @@\n                           alt={prompt.text}\n                           className=\"w-full h-auto object-cover\"\n                         />\n                       ) : (\n-                          <video \n-                            src={prompt.media}\n-                            controls\n-                            className=\"w-full\"\n-                          />\n-                        )}\n+                        <video \n+                          src={prompt.media}\n+                          controls\n+                          className=\"w-full\"\n+                        />\n+                      )}\n                     </div>\n                   )}\n                   <div className=\"space-y-2\">\n                     {prompt.content?.writingPrompt && (\n@@ -1814,166 +1718,142 @@\n     >\n       <Card \n         className={cn(\n           \"overflow-hidden transition-all duration-300\",\n-          \"border-0 shadow-sm hover:shadow-md\",\n-          \"bg-gradient-to-r from-background/50 to-background/80\",\n-          \"backdrop-blur-sm\",\n-          isExpanded && \"ring-1 ring-primary/20\",\n-          \"group\",\n+          \"border border-primary/10\",\n+          \"bg-gradient-to-r\",\n+          getQuestionColor(question.type),\n+          isExpanded && \"ring-2 ring-primary/20 ring-offset-2\",\n+          \"hover:shadow-xl hover:translate-y-[-2px]\",\n+          \"group backdrop-blur-sm\",\n+          \"animate-in slide-in-from-bottom-2\",\n           progress === 100 && \"bg-opacity-50\"\n         )}\n       >\n         <CardHeader \n           className={cn(\n-            \"cursor-pointer select-none py-4 px-5\",\n+            \"cursor-pointer select-none p-6\",\n             \"transition-all duration-300\",\n-            \"hover:bg-primary/5\",\n+            \"hover:bg-primary/5 backdrop-blur-sm\",\n             isExpanded && \"bg-primary/5\"\n           )}\n           onClick={onToggle}\n         >\n           <div className=\"flex items-center justify-between\">\n-            <div className=\"flex items-center gap-2\">\n+            <div className=\"flex items-center gap-3 flex-wrap\">\n               <Badge \n                 variant=\"outline\" \n                 className={cn(\n-                  \"h-7 px-2 text-xs font-medium\",\n-                  \"bg-background/50 backdrop-blur-sm\",\n-                  \"border-primary/20\",\n-                  \"transition-all duration-300\"\n+                  \"px-3 py-1 text-sm font-medium rounded-full\",\n+                  \"bg-background/50 backdrop-blur-sm shadow-sm\",\n+                  \"border border-primary/20\",\n+                  \"transition-all duration-300\",\n+                  \"group-hover:bg-primary/10 group-hover:border-primary/20\",\n+                  \"animate-in zoom-in-50 duration-300\"\n                 )}\n               >\n                 Question {index + 1}\n               </Badge>\n               <Badge \n                 variant=\"outline\" \n-                className=\"h-7 bg-background/50 backdrop-blur-sm\"\n+                className={cn(\n+                  \"flex items-center gap-2 px-3 py-1\",\n+                  \"bg-background/50 backdrop-blur-sm shadow-sm\",\n+                  \"border border-primary/20\",\n+                  \"transition-all duration-300\",\n+                  \"group-hover:bg-primary/10 group-hover:border-primary/20\",\n+                  \"animate-in zoom-in-50 duration-300 delay-100\"\n+                )}\n               >\n                 {getQuestionIcon(question.type)}\n-                <span className=\"ml-1 text-xs\">\n-                  {isQuestionType(question.type) ? \n-                    QUESTION_TYPES[question.type as QuestionType]?.label : \n-                    question.type}\n+                <span className=\"capitalize\">\n+                  {isQuestionType(question.type) ? QUESTION_TYPES[question.type as QuestionType]?.label : question.type}\n                 </span>\n               </Badge>\n             </div>\n             <motion.div\n               animate={{ rotate: isExpanded ? 90 : 0 }}\n-              className=\"text-primary/60\"\n+              transition={{ duration: 0.3, type: \"spring\", stiffness: 200 }}\n+              className={cn(\n+                \"bg-background/50 backdrop-blur-sm p-2 rounded-full\",\n+                \"transition-all duration-300\",\n+                \"group-hover:bg-primary/10\",\n+                \"shadow-sm border border-primary/20\"\n+              )}\n             >\n-              <ChevronRight className=\"h-4 w-4\" />\n+              <ChevronRight className=\"h-5 w-5 text-primary\" />\n             </motion.div>\n           </div>\n \n-          <div className=\"mt-3 space-y-2\">\n-            <CardTitle className=\"text-lg font-medium\">\n+          <div className=\"mt-4 space-y-3\">\n+            <CardTitle className=\"text-xl group-hover:text-primary transition-colors duration-300\">\n               {question.title || 'Untitled Question'}\n             </CardTitle>\n-            <Progress \n-              value={progress} \n-              className=\"h-1.5 w-full\"\n-            />\n+            <div className=\"relative\">\n+              <div className=\"absolute inset-0 bg-gradient-to-r from-primary/5 to-primary/10 rounded-full\" />\n+              <Progress \n+                value={progress} \n+                className={cn(\n+                  \"h-2 rounded-full\",\n+                  \"transition-all duration-300\",\n+                  progress === 100 \n+                    ? \"bg-green-500/20\" \n+                    : \"bg-primary/10\"\n+                )}\n+              />\n+              <p className=\"text-sm text-muted-foreground mt-2 flex items-center gap-2\">\n+                {progress === 100 ? (\n+                  <motion.span \n+                    initial={{ scale: 0 }}\n+                    animate={{ scale: 1 }}\n+                    className=\"flex items-center gap-1 text-green-500\"\n+                  >\n+                    <CheckCircle2 className=\"h-4 w-4\" />\n+                    Completed\n+                  </motion.span>\n+                ) : (\n+                  <motion.span\n+                    initial={{ opacity: 0 }}\n+                    animate={{ opacity: 1 }}\n+                    className=\"flex items-center gap-1\"\n+                  >\n+                    <Clock className=\"h-4 w-4\" />\n+                    {`${Math.round(progress)}% complete`}\n+                  </motion.span>\n+                )}\n+              </p>\n+            </div>\n           </div>\n         </CardHeader>\n-        \n-        {/* Question content when expanded */}\n+\n         <AnimatePresence>\n           {isExpanded && (\n             <motion.div\n               initial={{ height: 0, opacity: 0 }}\n               animate={{ height: \"auto\", opacity: 1 }}\n               exit={{ height: 0, opacity: 0 }}\n+              transition={{ duration: 0.3, type: \"spring\", stiffness: 200 }}\n             >\n-              <CardContent className=\"px-5 py-4 space-y-4\">\n-                {/* Question content */}\n-                <div className=\"prose prose-sm max-w-none\">\n-                  <p className=\"text-muted-foreground\">\n-                    {question.content}\n-                  </p>\n+              <CardContent className=\"p-6 pt-0\">\n+                <div className=\"space-y-6\">\n+                  <motion.div\n+                    initial={{ opacity: 0, y: 20 }}\n+                    animate={{ opacity: 1, y: 0 }}\n+                    transition={{ delay: 0.1 }}\n+                    className=\"bg-background/50 backdrop-blur-sm rounded-lg p-4 border border-primary/10 shadow-sm\"\n+                  >\n+                    <p className=\"text-muted-foreground\">{question.content || 'No content available.'}</p>\n+                  </motion.div>\n+                  <motion.div\n+                    initial={{ opacity: 0, y: 20 }}\n+                    animate={{ opacity: 1, y: 0 }}\n+                    transition={{ delay: 0.2 }}\n+                    className=\"bg-background/80 backdrop-blur-sm rounded-lg p-4 border border-primary/10 shadow-sm\"\n+                  >\n+                    {renderQuestionContent()}\n+                  </motion.div>\n+                  {renderExercisePrompts()}\n                 </div>\n-\n-                {/* Exercise prompts */}\n-                {(question.metadata?.exercise_prompts?.length ?? 0) > 0 && (\n-                  <div className=\"mt-6 space-y-4\">\n-                    <div className=\"flex items-center gap-2 text-primary\">\n-                      <PenTool className=\"h-4 w-4\" />\n-                      <h3 className=\"text-sm font-medium\">Practice Exercises</h3>\n-                    </div>\n-                    \n-                    <div className=\"grid gap-4\">\n-                      {question.metadata?.exercise_prompts?.map((prompt, idx) => (\n-                        <Card \n-                          key={idx}\n-                          className=\"border border-primary/10 bg-background/50 backdrop-blur-sm\"\n-                        >\n-                          <CardHeader className=\"py-3 px-4\">\n-                            <div className=\"flex items-center gap-2\">\n-                              <Badge variant=\"outline\" className=\"bg-primary/5\">\n-                                Exercise {idx + 1}\n-                              </Badge>\n-                              {prompt.type && (\n-                                <Badge variant=\"outline\" className=\"bg-primary/5\">\n-                                  {prompt.type}\n-                                </Badge>\n-                              )}\n-                              {prompt.difficulty && (\n-                                <Badge \n-                                  variant=\"outline\" \n-                                  className={cn(\n-                                    \"capitalize\",\n-                                    prompt.difficulty === 'beginner' && \n-                                      \"bg-green-500/10 text-green-500\",\n-                                    prompt.difficulty === 'intermediate' && \n-                                      \"bg-yellow-500/10 text-yellow-500\",\n-                                    prompt.difficulty === 'advanced' && \n-                                      \"bg-red-500/10 text-red-500\"\n-                                  )}\n-                                >\n-                                  {prompt.difficulty}\n-                                </Badge>\n-                              )}\n-                            </div>\n-                            <p className=\"mt-2 text-sm\">{prompt.text}</p>\n-                          </CardHeader>\n-                          \n-                          {prompt.content && (\n-                            <CardContent className=\"py-3 px-4\">\n-                              <div className=\"space-y-3\">\n-                                {prompt.content.instructions && (\n-                                  <div className=\"flex items-start gap-2 text-sm\">\n-                                    <Lightbulb className=\"h-4 w-4 text-primary mt-0.5\" />\n-                                    <p className=\"text-muted-foreground\">\n-                                      {prompt.content.instructions}\n-                                    </p>\n-                                  </div>\n-                                )}\n-                                \n-                                {prompt.media && (\n-                                  <div className=\"rounded-lg overflow-hidden border border-primary/10\">\n-                                    {prompt.type === 'image' ? (\n-                                      <img \n-                                        src={prompt.media} \n-                                        alt={prompt.text}\n-                                        className=\"w-full h-auto object-cover\"\n-                                      />\n-                                    ) : (\n-                                      <video \n-                                        src={prompt.media}\n-                                        controls\n-                                        className=\"w-full\"\n-                                      />\n-                                    )}\n-                                  </div>\n-                                )}\n-                              </div>\n-                            </CardContent>\n-                          )}\n-                        </Card>\n-                      ))}\n-                    </div>\n-                  </div>\n-                )}\n               </CardContent>\n             </motion.div>\n           )}\n         </AnimatePresence>\n"
                },
                {
                    "date": 1739688200969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1627,26 +1627,27 @@\n               key={idx}\n               className={cn(\n                 \"border-primary/10 transition-all duration-200\",\n                 \"hover:shadow-md hover:border-primary/20\",\n-                \"bg-background/50 backdrop-blur-sm\"\n+                \"bg-background/50 backdrop-blur-sm\",\n+                \"overflow-hidden\"\n               )}\n             >\n-              <CardHeader>\n-                <div className=\"flex items-center gap-3\">\n-                  <Badge variant=\"outline\" className=\"bg-primary/5\">\n+              <CardHeader className=\"p-3\">\n+                <div className=\"flex items-center gap-2 flex-wrap\">\n+                  <Badge variant=\"outline\" className=\"bg-primary/5 text-xs\">\n                     Exercise {idx + 1}\n                   </Badge>\n                   {prompt.type && (\n-                    <Badge variant=\"outline\" className=\"bg-primary/5\">\n+                    <Badge variant=\"outline\" className=\"bg-primary/5 text-xs\">\n                       {prompt.type}\n                     </Badge>\n                   )}\n                   {prompt.difficulty && (\n                     <Badge \n                       variant=\"outline\" \n                       className={cn(\n-                        \"capitalize\",\n+                        \"capitalize text-xs\",\n                         prompt.difficulty === 'beginner' && \"bg-green-500/10 text-green-500\",\n                         prompt.difficulty === 'intermediate' && \"bg-yellow-500/10 text-yellow-500\",\n                         prompt.difficulty === 'advanced' && \"bg-red-500/10 text-red-500\"\n                       )}\n@@ -1654,18 +1655,18 @@\n                       {prompt.difficulty}\n                     </Badge>\n                   )}\n                 </div>\n-                <CardTitle className=\"text-base mt-2\">{prompt.text}</CardTitle>\n+                <CardTitle className=\"text-sm mt-2\">{prompt.text}</CardTitle>\n                 {prompt.content?.instructions && (\n-                  <CardDescription className=\"mt-2 flex items-center gap-2\">\n-                    <Lightbulb className=\"h-4 w-4 text-primary\" />\n+                  <CardDescription className=\"mt-1.5 flex items-center gap-1.5 text-xs\">\n+                    <Lightbulb className=\"h-3.5 w-3.5 text-primary\" />\n                     {prompt.content.instructions}\n                   </CardDescription>\n                 )}\n               </CardHeader>\n-              <CardContent>\n-                <div className=\"space-y-4\">\n+              <CardContent className=\"p-3 pt-0\">\n+                <div className=\"space-y-3\">\n                   {prompt.media && (\n                     <div className=\"rounded-lg overflow-hidden border border-primary/10\">\n                       {prompt.type === 'image' ? (\n                         <img \n@@ -1683,22 +1684,22 @@\n                     </div>\n                   )}\n                   <div className=\"space-y-2\">\n                     {prompt.content?.writingPrompt && (\n-                      <div className=\"mb-4\">\n-                        <Label className=\"text-sm font-medium\">Writing Prompt</Label>\n-                        <p className=\"text-sm mt-1 text-muted-foreground\">{prompt.content.writingPrompt}</p>\n+                      <div className=\"mb-2\">\n+                        <Label className=\"text-xs font-medium\">Writing Prompt</Label>\n+                        <p className=\"text-xs mt-1 text-muted-foreground\">{prompt.content.writingPrompt}</p>\n                       </div>\n                     )}\n                     {prompt.content?.speakingPrompt && (\n-                      <div className=\"mb-4\">\n-                        <Label className=\"text-sm font-medium\">Speaking Prompt</Label>\n-                        <p className=\"text-sm mt-1 text-muted-foreground\">{prompt.content.speakingPrompt}</p>\n+                      <div className=\"mb-2\">\n+                        <Label className=\"text-xs font-medium\">Speaking Prompt</Label>\n+                        <p className=\"text-xs mt-1 text-muted-foreground\">{prompt.content.speakingPrompt}</p>\n                       </div>\n                     )}\n                     <Textarea\n                       placeholder=\"Write your response...\"\n-                      className=\"min-h-[100px] bg-card border-primary/10\"\n+                      className=\"min-h-[80px] text-sm bg-card border-primary/10\"\n                       onChange={() => onAnswer(Math.min(100, progress + 10))}\n                     />\n                   </div>\n                 </div>\n@@ -1725,26 +1726,27 @@\n           isExpanded && \"ring-2 ring-primary/20 ring-offset-2\",\n           \"hover:shadow-xl hover:translate-y-[-2px]\",\n           \"group backdrop-blur-sm\",\n           \"animate-in slide-in-from-bottom-2\",\n-          progress === 100 && \"bg-opacity-50\"\n+          progress === 100 && \"bg-opacity-50\",\n+          \"max-w-3xl mx-auto\"\n         )}\n       >\n         <CardHeader \n           className={cn(\n-            \"cursor-pointer select-none p-6\",\n+            \"cursor-pointer select-none p-4\",\n             \"transition-all duration-300\",\n             \"hover:bg-primary/5 backdrop-blur-sm\",\n             isExpanded && \"bg-primary/5\"\n           )}\n           onClick={onToggle}\n         >\n           <div className=\"flex items-center justify-between\">\n-            <div className=\"flex items-center gap-3 flex-wrap\">\n+            <div className=\"flex items-center gap-2 flex-wrap\">\n               <Badge \n                 variant=\"outline\" \n                 className={cn(\n-                  \"px-3 py-1 text-sm font-medium rounded-full\",\n+                  \"px-2 py-0.5 text-sm font-medium rounded-full\",\n                   \"bg-background/50 backdrop-blur-sm shadow-sm\",\n                   \"border border-primary/20\",\n                   \"transition-all duration-300\",\n                   \"group-hover:bg-primary/10 group-hover:border-primary/20\",\n@@ -1755,69 +1757,69 @@\n               </Badge>\n               <Badge \n                 variant=\"outline\" \n                 className={cn(\n-                  \"flex items-center gap-2 px-3 py-1\",\n+                  \"flex items-center gap-1 px-2 py-0.5\",\n                   \"bg-background/50 backdrop-blur-sm shadow-sm\",\n                   \"border border-primary/20\",\n                   \"transition-all duration-300\",\n                   \"group-hover:bg-primary/10 group-hover:border-primary/20\",\n                   \"animate-in zoom-in-50 duration-300 delay-100\"\n                 )}\n               >\n                 {getQuestionIcon(question.type)}\n-                <span className=\"capitalize\">\n+                <span className=\"capitalize text-sm\">\n                   {isQuestionType(question.type) ? QUESTION_TYPES[question.type as QuestionType]?.label : question.type}\n                 </span>\n               </Badge>\n             </div>\n             <motion.div\n               animate={{ rotate: isExpanded ? 90 : 0 }}\n               transition={{ duration: 0.3, type: \"spring\", stiffness: 200 }}\n               className={cn(\n-                \"bg-background/50 backdrop-blur-sm p-2 rounded-full\",\n+                \"bg-background/50 backdrop-blur-sm p-1.5 rounded-full\",\n                 \"transition-all duration-300\",\n                 \"group-hover:bg-primary/10\",\n                 \"shadow-sm border border-primary/20\"\n               )}\n             >\n-              <ChevronRight className=\"h-5 w-5 text-primary\" />\n+              <ChevronRight className=\"h-4 w-4 text-primary\" />\n             </motion.div>\n           </div>\n \n-          <div className=\"mt-4 space-y-3\">\n-            <CardTitle className=\"text-xl group-hover:text-primary transition-colors duration-300\">\n+          <div className=\"mt-3 space-y-2\">\n+            <CardTitle className=\"text-lg group-hover:text-primary transition-colors duration-300\">\n               {question.title || 'Untitled Question'}\n             </CardTitle>\n             <div className=\"relative\">\n               <div className=\"absolute inset-0 bg-gradient-to-r from-primary/5 to-primary/10 rounded-full\" />\n               <Progress \n                 value={progress} \n                 className={cn(\n-                  \"h-2 rounded-full\",\n+                  \"h-1.5 rounded-full\",\n                   \"transition-all duration-300\",\n                   progress === 100 \n                     ? \"bg-green-500/20\" \n                     : \"bg-primary/10\"\n                 )}\n               />\n-              <p className=\"text-sm text-muted-foreground mt-2 flex items-center gap-2\">\n+              <p className=\"text-xs text-muted-foreground mt-1.5 flex items-center gap-1.5\">\n                 {progress === 100 ? (\n                   <motion.span \n                     initial={{ scale: 0 }}\n                     animate={{ scale: 1 }}\n                     className=\"flex items-center gap-1 text-green-500\"\n                   >\n-                    <CheckCircle2 className=\"h-4 w-4\" />\n+                    <CheckCircle2 className=\"h-3.5 w-3.5\" />\n                     Completed\n                   </motion.span>\n                 ) : (\n                   <motion.span\n                     initial={{ opacity: 0 }}\n                     animate={{ opacity: 1 }}\n                     className=\"flex items-center gap-1\"\n                   >\n-                    <Clock className=\"h-4 w-4\" />\n+                    <Clock className=\"h-3.5 w-3.5\" />\n                     {`${Math.round(progress)}% complete`}\n                   </motion.span>\n                 )}\n               </p>\n@@ -1832,26 +1834,27 @@\n               animate={{ height: \"auto\", opacity: 1 }}\n               exit={{ height: 0, opacity: 0 }}\n               transition={{ duration: 0.3, type: \"spring\", stiffness: 200 }}\n             >\n-              <CardContent className=\"p-6 pt-0\">\n-                <div className=\"space-y-6\">\n+              <CardContent className=\"p-4 pt-0\">\n+                <div className=\"space-y-4\">\n                   <motion.div\n                     initial={{ opacity: 0, y: 20 }}\n                     animate={{ opacity: 1, y: 0 }}\n                     transition={{ delay: 0.1 }}\n-                    className=\"bg-background/50 backdrop-blur-sm rounded-lg p-4 border border-primary/10 shadow-sm\"\n+                    className=\"bg-background/50 backdrop-blur-sm rounded-lg p-3 border border-primary/10 shadow-sm\"\n                   >\n-                    <p className=\"text-muted-foreground\">{question.content || 'No content available.'}</p>\n+                    <p className=\"text-muted-foreground text-sm\">{question.content || 'No content available.'}</p>\n                   </motion.div>\n                   <motion.div\n                     initial={{ opacity: 0, y: 20 }}\n                     animate={{ opacity: 1, y: 0 }}\n                     transition={{ delay: 0.2 }}\n-                    className=\"bg-background/80 backdrop-blur-sm rounded-lg p-4 border border-primary/10 shadow-sm\"\n+                    className=\"bg-background/80 backdrop-blur-sm rounded-lg p-3 border border-primary/10 shadow-sm\"\n                   >\n                     {renderQuestionContent()}\n                   </motion.div>\n+\n                   {renderExercisePrompts()}\n                 </div>\n               </CardContent>\n             </motion.div>\n"
                },
                {
                    "date": 1739688254700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1614,98 +1614,123 @@\n       <motion.div\n         initial={{ opacity: 0, y: 10 }}\n         animate={{ opacity: 1, y: 0 }}\n         transition={{ delay: 0.3 }}\n-        className=\"mt-6 space-y-4\"\n+        className=\"mt-4 space-y-3\"\n       >\n-        <div className=\"flex items-center gap-2 text-primary\">\n-          <Award className=\"h-5 w-5\" />\n-          <h3 className=\"font-medium\">Related Exercises</h3>\n+        <div className=\"flex items-center justify-between\">\n+          <div className=\"flex items-center gap-2 text-primary\">\n+            <Award className=\"h-4 w-4\" />\n+            <h3 className=\"text-sm font-medium\">Practice Exercises</h3>\n+          </div>\n+          <Badge variant=\"outline\" className=\"bg-primary/5 text-xs\">\n+            {question.metadata.exercise_prompts.length} exercises\n+          </Badge>\n         </div>\n-        <div className=\"grid gap-4\">\n+        \n+        <div className=\"grid gap-3\">\n           {question.metadata.exercise_prompts.map((prompt, idx) => (\n-            <Card \n+            <motion.div\n               key={idx}\n-              className={cn(\n-                \"border-primary/10 transition-all duration-200\",\n-                \"hover:shadow-md hover:border-primary/20\",\n-                \"bg-background/50 backdrop-blur-sm\",\n-                \"overflow-hidden\"\n-              )}\n+              initial={{ opacity: 0, x: -10 }}\n+              animate={{ opacity: 1, x: 0 }}\n+              transition={{ delay: idx * 0.1 }}\n             >\n-              <CardHeader className=\"p-3\">\n-                <div className=\"flex items-center gap-2 flex-wrap\">\n-                  <Badge variant=\"outline\" className=\"bg-primary/5 text-xs\">\n-                    Exercise {idx + 1}\n-                  </Badge>\n-                  {prompt.type && (\n-                    <Badge variant=\"outline\" className=\"bg-primary/5 text-xs\">\n-                      {prompt.type}\n-                    </Badge>\n-                  )}\n-                  {prompt.difficulty && (\n-                    <Badge \n-                      variant=\"outline\" \n-                      className={cn(\n-                        \"capitalize text-xs\",\n-                        prompt.difficulty === 'beginner' && \"bg-green-500/10 text-green-500\",\n-                        prompt.difficulty === 'intermediate' && \"bg-yellow-500/10 text-yellow-500\",\n-                        prompt.difficulty === 'advanced' && \"bg-red-500/10 text-red-500\"\n+              <Card \n+                className={cn(\n+                  \"border-primary/10 transition-all duration-200\",\n+                  \"hover:shadow-md hover:border-primary/20\",\n+                  \"bg-gradient-to-r from-background/50 to-background/80\",\n+                  \"backdrop-blur-sm overflow-hidden\",\n+                  \"group\"\n+                )}\n+              >\n+                <CardHeader className=\"p-3 bg-primary/5\">\n+                  <div className=\"flex items-center justify-between\">\n+                    <div className=\"flex items-center gap-2 flex-wrap\">\n+                      <div className=\"flex items-center gap-1.5\">\n+                        <div className=\"w-5 h-5 rounded-full bg-primary/10 flex items-center justify-center\">\n+                          <span className=\"text-xs font-medium text-primary\">{idx + 1}</span>\n+                        </div>\n+                        <Badge variant=\"outline\" className=\"bg-primary/5 text-xs\">\n+                          {prompt.type || 'Exercise'}\n+                        </Badge>\n+                      </div>\n+                      {prompt.difficulty && (\n+                        <Badge \n+                          variant=\"outline\" \n+                          className={cn(\n+                            \"capitalize text-xs\",\n+                            prompt.difficulty === 'beginner' && \"bg-green-500/10 text-green-500\",\n+                            prompt.difficulty === 'intermediate' && \"bg-yellow-500/10 text-yellow-500\",\n+                            prompt.difficulty === 'advanced' && \"bg-red-500/10 text-red-500\"\n+                          )}\n+                        >\n+                          {prompt.difficulty}\n+                        </Badge>\n                       )}\n-                    >\n-                      {prompt.difficulty}\n-                    </Badge>\n-                  )}\n-                </div>\n-                <CardTitle className=\"text-sm mt-2\">{prompt.text}</CardTitle>\n-                {prompt.content?.instructions && (\n-                  <CardDescription className=\"mt-1.5 flex items-center gap-1.5 text-xs\">\n-                    <Lightbulb className=\"h-3.5 w-3.5 text-primary\" />\n-                    {prompt.content.instructions}\n-                  </CardDescription>\n-                )}\n-              </CardHeader>\n-              <CardContent className=\"p-3 pt-0\">\n-                <div className=\"space-y-3\">\n+                    </div>\n+                  </div>\n+                </CardHeader>\n+                \n+                <CardContent className=\"p-3 space-y-3\">\n                   {prompt.media && (\n-                    <div className=\"rounded-lg overflow-hidden border border-primary/10\">\n+                    <div className=\"relative group/media rounded-lg overflow-hidden border border-primary/10\">\n                       {prompt.type === 'image' ? (\n-                        <img \n-                          src={prompt.media} \n-                          alt={prompt.text}\n-                          className=\"w-full h-auto object-cover\"\n-                        />\n+                        <div className=\"relative aspect-video bg-black/5\">\n+                          <img \n+                            src={prompt.media} \n+                            alt={prompt.text}\n+                            className=\"w-full h-full object-cover transition-transform group-hover/media:scale-105\"\n+                          />\n+                          <div className=\"absolute inset-0 bg-gradient-to-t from-black/50 via-transparent to-transparent opacity-0 group-hover/media:opacity-100 transition-opacity\" />\n+                        </div>\n                       ) : (\n                         <video \n                           src={prompt.media}\n                           controls\n                           className=\"w-full\"\n+                          preload=\"metadata\"\n                         />\n                       )}\n                     </div>\n                   )}\n+                  \n                   <div className=\"space-y-2\">\n-                    {prompt.content?.writingPrompt && (\n-                      <div className=\"mb-2\">\n-                        <Label className=\"text-xs font-medium\">Writing Prompt</Label>\n-                        <p className=\"text-xs mt-1 text-muted-foreground\">{prompt.content.writingPrompt}</p>\n-                      </div>\n+                    {(prompt.content?.writingPrompt || prompt.content?.speakingPrompt) && (\n+                      <Card className=\"bg-primary/5 border-primary/10\">\n+                        <CardContent className=\"p-2 space-y-2\">\n+                          {prompt.content.writingPrompt && (\n+                            <div>\n+                              <Label className=\"text-xs font-medium flex items-center gap-1.5\">\n+                                <PenTool className=\"h-3.5 w-3.5 text-primary\" />\n+                                Writing Prompt\n+                              </Label>\n+                              <p className=\"text-xs mt-1 text-muted-foreground\">{prompt.content.writingPrompt}</p>\n+                            </div>\n+                          )}\n+                          {prompt.content.speakingPrompt && (\n+                            <div>\n+                              <Label className=\"text-xs font-medium flex items-center gap-1.5\">\n+                                <Mic className=\"h-3.5 w-3.5 text-primary\" />\n+                                Speaking Prompt\n+                              </Label>\n+                              <p className=\"text-xs mt-1 text-muted-foreground\">{prompt.content.speakingPrompt}</p>\n+                            </div>\n+                          )}\n+                        </CardContent>\n+                      </Card>\n                     )}\n-                    {prompt.content?.speakingPrompt && (\n-                      <div className=\"mb-2\">\n-                        <Label className=\"text-xs font-medium\">Speaking Prompt</Label>\n-                        <p className=\"text-xs mt-1 text-muted-foreground\">{prompt.content.speakingPrompt}</p>\n-                      </div>\n-                    )}\n+                    \n                     <Textarea\n                       placeholder=\"Write your response...\"\n-                      className=\"min-h-[80px] text-sm bg-card border-primary/10\"\n+                      className=\"min-h-[80px] text-sm bg-card border-primary/10 resize-none\"\n                       onChange={() => onAnswer(Math.min(100, progress + 10))}\n                     />\n                   </div>\n-                </div>\n-              </CardContent>\n-            </Card>\n+                </CardContent>\n+              </Card>\n+            </motion.div>\n           ))}\n         </div>\n       </motion.div>\n     );\n"
                },
                {
                    "date": 1739688520402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1614,123 +1614,97 @@\n       <motion.div\n         initial={{ opacity: 0, y: 10 }}\n         animate={{ opacity: 1, y: 0 }}\n         transition={{ delay: 0.3 }}\n-        className=\"mt-4 space-y-3\"\n+        className=\"mt-6 space-y-4\"\n       >\n-        <div className=\"flex items-center justify-between\">\n-          <div className=\"flex items-center gap-2 text-primary\">\n-            <Award className=\"h-4 w-4\" />\n-            <h3 className=\"text-sm font-medium\">Practice Exercises</h3>\n-          </div>\n-          <Badge variant=\"outline\" className=\"bg-primary/5 text-xs\">\n-            {question.metadata.exercise_prompts.length} exercises\n-          </Badge>\n+        <div className=\"flex items-center gap-2 text-primary\">\n+          <Award className=\"h-5 w-5\" />\n+          <h3 className=\"font-medium\">Related Exercises</h3>\n         </div>\n-        \n-        <div className=\"grid gap-3\">\n+        <div className=\"grid gap-4\">\n           {question.metadata.exercise_prompts.map((prompt, idx) => (\n-            <motion.div\n+            <Card \n               key={idx}\n-              initial={{ opacity: 0, x: -10 }}\n-              animate={{ opacity: 1, x: 0 }}\n-              transition={{ delay: idx * 0.1 }}\n+              className={cn(\n+                \"border-primary/10 transition-all duration-200\",\n+                \"hover:shadow-md hover:border-primary/20\",\n+                \"bg-background/50 backdrop-blur-sm\"\n+              )}\n             >\n-              <Card \n-                className={cn(\n-                  \"border-primary/10 transition-all duration-200\",\n-                  \"hover:shadow-md hover:border-primary/20\",\n-                  \"bg-gradient-to-r from-background/50 to-background/80\",\n-                  \"backdrop-blur-sm overflow-hidden\",\n-                  \"group\"\n+              <CardHeader>\n+                <div className=\"flex items-center gap-3\">\n+                  <Badge variant=\"outline\" className=\"bg-primary/5\">\n+                    Exercise {idx + 1}\n+                  </Badge>\n+                  {prompt.type && (\n+                    <Badge variant=\"outline\" className=\"bg-primary/5\">\n+                      {prompt.type}\n+                    </Badge>\n+                  )}\n+                  {prompt.difficulty && (\n+                    <Badge \n+                      variant=\"outline\" \n+                      className={cn(\n+                        \"capitalize\",\n+                        prompt.difficulty === 'beginner' && \"bg-green-500/10 text-green-500\",\n+                        prompt.difficulty === 'intermediate' && \"bg-yellow-500/10 text-yellow-500\",\n+                        prompt.difficulty === 'advanced' && \"bg-red-500/10 text-red-500\"\n+                      )}\n+                    >\n+                      {prompt.difficulty}\n+                    </Badge>\n+                  )}\n+                </div>\n+                <CardTitle className=\"text-base mt-2\">{prompt.text}</CardTitle>\n+                {prompt.content?.instructions && (\n+                  <CardDescription className=\"mt-2 flex items-center gap-2\">\n+                    <Lightbulb className=\"h-4 w-4 text-primary\" />\n+                    {prompt.content.instructions}\n+                  </CardDescription>\n                 )}\n-              >\n-                <CardHeader className=\"p-3 bg-primary/5\">\n-                  <div className=\"flex items-center justify-between\">\n-                    <div className=\"flex items-center gap-2 flex-wrap\">\n-                      <div className=\"flex items-center gap-1.5\">\n-                        <div className=\"w-5 h-5 rounded-full bg-primary/10 flex items-center justify-center\">\n-                          <span className=\"text-xs font-medium text-primary\">{idx + 1}</span>\n-                        </div>\n-                        <Badge variant=\"outline\" className=\"bg-primary/5 text-xs\">\n-                          {prompt.type || 'Exercise'}\n-                        </Badge>\n-                      </div>\n-                      {prompt.difficulty && (\n-                        <Badge \n-                          variant=\"outline\" \n-                          className={cn(\n-                            \"capitalize text-xs\",\n-                            prompt.difficulty === 'beginner' && \"bg-green-500/10 text-green-500\",\n-                            prompt.difficulty === 'intermediate' && \"bg-yellow-500/10 text-yellow-500\",\n-                            prompt.difficulty === 'advanced' && \"bg-red-500/10 text-red-500\"\n-                          )}\n-                        >\n-                          {prompt.difficulty}\n-                        </Badge>\n-                      )}\n-                    </div>\n-                  </div>\n-                </CardHeader>\n-                \n-                <CardContent className=\"p-3 space-y-3\">\n+              </CardHeader>\n+              <CardContent>\n+                <div className=\"space-y-4\">\n                   {prompt.media && (\n-                    <div className=\"relative group/media rounded-lg overflow-hidden border border-primary/10\">\n+                    <div className=\"rounded-lg overflow-hidden border border-primary/10\">\n                       {prompt.type === 'image' ? (\n-                        <div className=\"relative aspect-video bg-black/5\">\n-                          <img \n-                            src={prompt.media} \n-                            alt={prompt.text}\n-                            className=\"w-full h-full object-cover transition-transform group-hover/media:scale-105\"\n-                          />\n-                          <div className=\"absolute inset-0 bg-gradient-to-t from-black/50 via-transparent to-transparent opacity-0 group-hover/media:opacity-100 transition-opacity\" />\n-                        </div>\n+                        <img \n+                          src={prompt.media} \n+                          alt={prompt.text}\n+                          className=\"w-full h-auto object-cover\"\n+                        />\n                       ) : (\n                         <video \n                           src={prompt.media}\n                           controls\n                           className=\"w-full\"\n-                          preload=\"metadata\"\n                         />\n                       )}\n                     </div>\n                   )}\n-                  \n                   <div className=\"space-y-2\">\n-                    {(prompt.content?.writingPrompt || prompt.content?.speakingPrompt) && (\n-                      <Card className=\"bg-primary/5 border-primary/10\">\n-                        <CardContent className=\"p-2 space-y-2\">\n-                          {prompt.content.writingPrompt && (\n-                            <div>\n-                              <Label className=\"text-xs font-medium flex items-center gap-1.5\">\n-                                <PenTool className=\"h-3.5 w-3.5 text-primary\" />\n-                                Writing Prompt\n-                              </Label>\n-                              <p className=\"text-xs mt-1 text-muted-foreground\">{prompt.content.writingPrompt}</p>\n-                            </div>\n-                          )}\n-                          {prompt.content.speakingPrompt && (\n-                            <div>\n-                              <Label className=\"text-xs font-medium flex items-center gap-1.5\">\n-                                <Mic className=\"h-3.5 w-3.5 text-primary\" />\n-                                Speaking Prompt\n-                              </Label>\n-                              <p className=\"text-xs mt-1 text-muted-foreground\">{prompt.content.speakingPrompt}</p>\n-                            </div>\n-                          )}\n-                        </CardContent>\n-                      </Card>\n+                    {prompt.content?.writingPrompt && (\n+                      <div className=\"mb-4\">\n+                        <Label className=\"text-sm font-medium\">Writing Prompt</Label>\n+                        <p className=\"text-sm mt-1 text-muted-foreground\">{prompt.content.writingPrompt}</p>\n+                      </div>\n                     )}\n-                    \n+                    {prompt.content?.speakingPrompt && (\n+                      <div className=\"mb-4\">\n+                        <Label className=\"text-sm font-medium\">Speaking Prompt</Label>\n+                        <p className=\"text-sm mt-1 text-muted-foreground\">{prompt.content.speakingPrompt}</p>\n+                      </div>\n+                    )}\n                     <Textarea\n                       placeholder=\"Write your response...\"\n-                      className=\"min-h-[80px] text-sm bg-card border-primary/10 resize-none\"\n+                      className=\"min-h-[100px] bg-card border-primary/10\"\n                       onChange={() => onAnswer(Math.min(100, progress + 10))}\n                     />\n                   </div>\n-                </CardContent>\n-              </Card>\n-            </motion.div>\n+                </div>\n+              </CardContent>\n+            </Card>\n           ))}\n         </div>\n       </motion.div>\n     );\n@@ -1751,27 +1725,26 @@\n           isExpanded && \"ring-2 ring-primary/20 ring-offset-2\",\n           \"hover:shadow-xl hover:translate-y-[-2px]\",\n           \"group backdrop-blur-sm\",\n           \"animate-in slide-in-from-bottom-2\",\n-          progress === 100 && \"bg-opacity-50\",\n-          \"max-w-3xl mx-auto\"\n+          progress === 100 && \"bg-opacity-50\"\n         )}\n       >\n         <CardHeader \n           className={cn(\n-            \"cursor-pointer select-none p-4\",\n+            \"cursor-pointer select-none p-6\",\n             \"transition-all duration-300\",\n             \"hover:bg-primary/5 backdrop-blur-sm\",\n             isExpanded && \"bg-primary/5\"\n           )}\n           onClick={onToggle}\n         >\n           <div className=\"flex items-center justify-between\">\n-            <div className=\"flex items-center gap-2 flex-wrap\">\n+            <div className=\"flex items-center gap-3 flex-wrap\">\n               <Badge \n                 variant=\"outline\" \n                 className={cn(\n-                  \"px-2 py-0.5 text-sm font-medium rounded-full\",\n+                  \"px-3 py-1 text-sm font-medium rounded-full\",\n                   \"bg-background/50 backdrop-blur-sm shadow-sm\",\n                   \"border border-primary/20\",\n                   \"transition-all duration-300\",\n                   \"group-hover:bg-primary/10 group-hover:border-primary/20\",\n@@ -1782,69 +1755,69 @@\n               </Badge>\n               <Badge \n                 variant=\"outline\" \n                 className={cn(\n-                  \"flex items-center gap-1 px-2 py-0.5\",\n+                  \"flex items-center gap-2 px-3 py-1\",\n                   \"bg-background/50 backdrop-blur-sm shadow-sm\",\n                   \"border border-primary/20\",\n                   \"transition-all duration-300\",\n                   \"group-hover:bg-primary/10 group-hover:border-primary/20\",\n                   \"animate-in zoom-in-50 duration-300 delay-100\"\n                 )}\n               >\n                 {getQuestionIcon(question.type)}\n-                <span className=\"capitalize text-sm\">\n+                <span className=\"capitalize\">\n                   {isQuestionType(question.type) ? QUESTION_TYPES[question.type as QuestionType]?.label : question.type}\n                 </span>\n               </Badge>\n             </div>\n             <motion.div\n               animate={{ rotate: isExpanded ? 90 : 0 }}\n               transition={{ duration: 0.3, type: \"spring\", stiffness: 200 }}\n               className={cn(\n-                \"bg-background/50 backdrop-blur-sm p-1.5 rounded-full\",\n+                \"bg-background/50 backdrop-blur-sm p-2 rounded-full\",\n                 \"transition-all duration-300\",\n                 \"group-hover:bg-primary/10\",\n                 \"shadow-sm border border-primary/20\"\n               )}\n             >\n-              <ChevronRight className=\"h-4 w-4 text-primary\" />\n+              <ChevronRight className=\"h-5 w-5 text-primary\" />\n             </motion.div>\n           </div>\n \n-          <div className=\"mt-3 space-y-2\">\n-            <CardTitle className=\"text-lg group-hover:text-primary transition-colors duration-300\">\n+          <div className=\"mt-4 space-y-3\">\n+            <CardTitle className=\"text-xl group-hover:text-primary transition-colors duration-300\">\n               {question.title || 'Untitled Question'}\n             </CardTitle>\n             <div className=\"relative\">\n               <div className=\"absolute inset-0 bg-gradient-to-r from-primary/5 to-primary/10 rounded-full\" />\n               <Progress \n                 value={progress} \n                 className={cn(\n-                  \"h-1.5 rounded-full\",\n+                  \"h-2 rounded-full\",\n                   \"transition-all duration-300\",\n                   progress === 100 \n                     ? \"bg-green-500/20\" \n                     : \"bg-primary/10\"\n                 )}\n               />\n-              <p className=\"text-xs text-muted-foreground mt-1.5 flex items-center gap-1.5\">\n+              <p className=\"text-sm text-muted-foreground mt-2 flex items-center gap-2\">\n                 {progress === 100 ? (\n                   <motion.span \n                     initial={{ scale: 0 }}\n                     animate={{ scale: 1 }}\n                     className=\"flex items-center gap-1 text-green-500\"\n                   >\n-                    <CheckCircle2 className=\"h-3.5 w-3.5\" />\n+                    <CheckCircle2 className=\"h-4 w-4\" />\n                     Completed\n                   </motion.span>\n                 ) : (\n                   <motion.span\n                     initial={{ opacity: 0 }}\n                     animate={{ opacity: 1 }}\n                     className=\"flex items-center gap-1\"\n                   >\n-                    <Clock className=\"h-3.5 w-3.5\" />\n+                    <Clock className=\"h-4 w-4\" />\n                     {`${Math.round(progress)}% complete`}\n                   </motion.span>\n                 )}\n               </p>\n@@ -1859,27 +1832,26 @@\n               animate={{ height: \"auto\", opacity: 1 }}\n               exit={{ height: 0, opacity: 0 }}\n               transition={{ duration: 0.3, type: \"spring\", stiffness: 200 }}\n             >\n-              <CardContent className=\"p-4 pt-0\">\n-                <div className=\"space-y-4\">\n+              <CardContent className=\"p-6 pt-0\">\n+                <div className=\"space-y-6\">\n                   <motion.div\n                     initial={{ opacity: 0, y: 20 }}\n                     animate={{ opacity: 1, y: 0 }}\n                     transition={{ delay: 0.1 }}\n-                    className=\"bg-background/50 backdrop-blur-sm rounded-lg p-3 border border-primary/10 shadow-sm\"\n+                    className=\"bg-background/50 backdrop-blur-sm rounded-lg p-4 border border-primary/10 shadow-sm\"\n                   >\n-                    <p className=\"text-muted-foreground text-sm\">{question.content || 'No content available.'}</p>\n+                    <p className=\"text-muted-foreground\">{question.content || 'No content available.'}</p>\n                   </motion.div>\n                   <motion.div\n                     initial={{ opacity: 0, y: 20 }}\n                     animate={{ opacity: 1, y: 0 }}\n                     transition={{ delay: 0.2 }}\n-                    className=\"bg-background/80 backdrop-blur-sm rounded-lg p-3 border border-primary/10 shadow-sm\"\n+                    className=\"bg-background/80 backdrop-blur-sm rounded-lg p-4 border border-primary/10 shadow-sm\"\n                   >\n                     {renderQuestionContent()}\n                   </motion.div>\n-\n                   {renderExercisePrompts()}\n                 </div>\n               </CardContent>\n             </motion.div>\n"
                }
            ],
            "date": 1739449214915,
            "name": "Commit-0",
            "content": " "
        }
    ]
}