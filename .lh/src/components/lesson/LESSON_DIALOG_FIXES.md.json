{
    "sourceFile": "src/components/lesson/LESSON_DIALOG_FIXES.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1741337475514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1741337475514,
            "name": "Commit-0",
            "content": "# LessonDialog Fixes\r\n\r\nThis document outlines the issues with the current LessonDialog component and proposed solutions.\r\n\r\n## Issues Identified\r\n\r\n1. **Audio playing twice**: The audio playback mechanism is triggering multiple times.\r\n   \r\n2. **Pause button not working properly**: Even when the pause button is pressed, audio continues playing.\r\n   \r\n3. **Media display in fullscreen mode**: In fullscreen mode, media is displayed in a small column.\r\n   \r\n4. **UI layout issues**: Need to simplify the UI structure while maintaining the main content and right media panels.\r\n   \r\n5. **Audio section highlighting**: Need to highlight active audio sections with a background glow effect.\r\n   \r\n6. **Next lesson navigation**: Need to add next lesson button after the last question to navigate to the next exercise.\r\n\r\n## Proposed Solutions\r\n\r\n### 1. Fix Duplicate Audio Playback\r\n\r\nAdd a reference to track audio playback state and prevent duplicate play triggers:\r\n\r\n```tsx\r\n// Add at the top of the component with other refs\r\nconst audioPlaybackRef = useRef<{isPlaying: boolean}>({isPlaying: false});\r\n\r\n// Update speakWithFishSpeech function to check this ref before playing\r\nconst speakWithFishSpeech = useCallback(async (text: string, elementId?: string) => {\r\n  // Check if already playing to prevent duplicates\r\n  if (audioPlaybackRef.current.isPlaying) {\r\n    console.log('Audio already playing, not starting again');\r\n    return;\r\n  }\r\n  \r\n  // Set playing flag\r\n  audioPlaybackRef.current.isPlaying = true;\r\n  \r\n  // Rest of function remains the same\r\n  \r\n  // Make sure to reset the flag when done or on error\r\n  audioSource.onended = () => {\r\n    audioPlaybackRef.current.isPlaying = false;\r\n    // Existing code...\r\n  };\r\n  \r\n  // Also reset on error\r\n  catch (error) {\r\n    audioPlaybackRef.current.isPlaying = false;\r\n    // Existing error handling...\r\n  }\r\n}, [/* existing dependencies */]);\r\n```\r\n\r\n### 2. Fix Pause Button\r\n\r\nUpdate the togglePlayback function to properly handle all audio sources:\r\n\r\n```tsx\r\nconst togglePlayback = useCallback(() => {\r\n  if (isPlaying) {\r\n    // Stop playback and set flag\r\n    setIsPlaying(false);\r\n    audioPlaybackRef.current.isPlaying = false;\r\n    \r\n    // Cancel all possible audio sources\r\n    \r\n    // 1. Stop Web Audio API source\r\n    if (audioSourceRef.current) {\r\n      try {\r\n        audioSourceRef.current.stop();\r\n        audioSourceRef.current = null;\r\n      } catch (error) {\r\n        console.error('Error stopping audio source:', error);\r\n      }\r\n    }\r\n    \r\n    // 2. Pause HTML audio element\r\n    if (audioRef.current && !audioRef.current.paused) {\r\n      audioRef.current.pause();\r\n    }\r\n    \r\n    // 3. Cancel browser speech synthesis\r\n    if (window.speechSynthesis) {\r\n      window.speechSynthesis.cancel();\r\n    }\r\n    \r\n    // Clear highlighting\r\n    setCurrentlyHighlightedId(null);\r\n  } else {\r\n    // Only start if not already playing\r\n    if (!audioPlaybackRef.current.isPlaying) {\r\n      // Set state before playing to prevent duplicate plays\r\n      setIsPlaying(true);\r\n      \r\n      // Existing code to start playback...\r\n    }\r\n  }\r\n}, [/* existing dependencies */]);\r\n```\r\n\r\n### 3. Improve Fullscreen Media Display\r\n\r\nCreate a dedicated FullscreenMediaViewer component in a separate file:\r\n\r\n```tsx\r\n// src/components/lesson/FullscreenMediaViewer.tsx\r\n\"use client\";\r\n\r\nimport React from 'react';\r\nimport Image from 'next/image';\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Minimize2, X } from 'lucide-react';\r\nimport { motion } from 'framer-motion';\r\n\r\ninterface FullscreenMediaViewerProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  mediaUrl: string;\r\n  mediaType: string;\r\n  mediaTitle: string;\r\n}\r\n\r\nexport function FullscreenMediaViewer({\r\n  isOpen,\r\n  onClose,\r\n  mediaUrl,\r\n  mediaType,\r\n  mediaTitle\r\n}: FullscreenMediaViewerProps) {\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <motion.div\r\n      initial={{ opacity: 0 }}\r\n      animate={{ opacity: 1 }}\r\n      exit={{ opacity: 0 }}\r\n      className=\"fixed inset-0 z-[100] flex items-center justify-center bg-black/90\"\r\n    >\r\n      {/* Controls */}\r\n      <div className=\"absolute top-4 right-4 flex gap-2\">\r\n        <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\r\n          <Minimize2 className=\"h-5 w-5 text-white\" />\r\n        </Button>\r\n        <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\r\n          <X className=\"h-5 w-5 text-white\" />\r\n        </Button>\r\n      </div>\r\n      \r\n      {/* Media display */}\r\n      <div className=\"w-[90%] h-[90%] max-w-6xl\">\r\n        {mediaType === 'image' ? (\r\n          <Image\r\n            src={mediaUrl}\r\n            alt={mediaTitle}\r\n            layout=\"fill\"\r\n            objectFit=\"contain\"\r\n            priority\r\n          />\r\n        ) : (\r\n          <video\r\n            src={mediaUrl}\r\n            controls\r\n            className=\"w-full h-full object-contain\"\r\n            autoPlay\r\n          />\r\n        )}\r\n      </div>\r\n    </motion.div>\r\n  );\r\n}\r\n```\r\n\r\n### 4. Add Audio Section Highlighting\r\n\r\nAdd CSS for highlight effect and apply it to elements being spoken:\r\n\r\n```css\r\n.audio-glow {\r\n  box-shadow: 0 0 15px rgba(var(--primary-rgb), 0.4);\r\n  background-color: rgba(var(--primary-rgb), 0.08);\r\n  border-radius: 0.5rem;\r\n  position: relative;\r\n  z-index: 1;\r\n  animation: pulsate 2s ease-in-out infinite;\r\n}\r\n\r\n@keyframes pulsate {\r\n  0% { box-shadow: 0 0 15px rgba(var(--primary-rgb), 0.4); }\r\n  50% { box-shadow: 0 0 20px rgba(var(--primary-rgb), 0.6); }\r\n  100% { box-shadow: 0 0 15px rgba(var(--primary-rgb), 0.4); }\r\n}\r\n```\r\n\r\nApply this class to elements when they are being spoken:\r\n\r\n```tsx\r\n// In speakWithFishSpeech function\r\nif (elementId) {\r\n  setCurrentlyHighlightedId(elementId);\r\n  \r\n  // Add glow effect\r\n  const element = document.getElementById(elementId);\r\n  if (element) {\r\n    element.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n    element.classList.add('audio-glow');\r\n  }\r\n}\r\n\r\n// Remove when done\r\naudioSource.onended = () => {\r\n  // Remove glow effect\r\n  if (elementId) {\r\n    const element = document.getElementById(elementId);\r\n    if (element) {\r\n      element.classList.remove('audio-glow');\r\n    }\r\n  }\r\n  \r\n  // Existing code...\r\n};\r\n```\r\n\r\n### 5. Add Next Lesson Button\r\n\r\nUpdate the QuestionsTab component to include a next lesson button at the end:\r\n\r\n```tsx\r\nfunction QuestionsTab({ \r\n  questions, \r\n  selectedIndex,\r\n  onQuestionSelect,\r\n  onNextLesson,\r\n  currentlyHighlightedId,\r\n  onQuestionExpand,\r\n  onClose\r\n}: { \r\n  questions: Question[],\r\n  selectedIndex: number | null,\r\n  onQuestionSelect: (index: number) => void,\r\n  onNextLesson: () => void,\r\n  currentlyHighlightedId: string | null,\r\n  onQuestionExpand?: (question: Question) => void,\r\n  onClose: () => void\r\n}) {\r\n  // Existing code...\r\n  \r\n  // Check if this is the last question\r\n  const isLastQuestion = selectedIndex === questions.length - 1;\r\n  \r\n  return (\r\n    <div className=\"space-y-4\">\r\n      {/* Existing code for displaying questions */}\r\n      \r\n      {/* Navigation buttons */}\r\n      <div className=\"mt-8 flex justify-center gap-4\">\r\n        {!isLastQuestion ? (\r\n          <Button\r\n            onClick={onNextLesson}\r\n            className=\"gap-2\"\r\n            size=\"lg\"\r\n          >\r\n            Go to Exercises <ArrowRight className=\"h-4 w-4\" />\r\n          </Button>\r\n        ) : (\r\n          <div className=\"flex gap-4\">\r\n            <Button\r\n              onClick={onNextLesson}\r\n              className=\"gap-2\"\r\n              size=\"lg\"\r\n              variant=\"default\"\r\n            >\r\n              Go to Exercises <ArrowRight className=\"h-4 w-4\" />\r\n            </Button>\r\n            <Button\r\n              onClick={onClose}\r\n              className=\"gap-2\"\r\n              size=\"lg\"\r\n              variant=\"outline\"\r\n            >\r\n              Back to Topics <BookOpen className=\"h-4 w-4\" />\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## Implementation Strategy\r\n\r\nDue to the size and complexity of the LessonDialog component, it's recommended to implement these changes incrementally:\r\n\r\n1. First, fix the duplicate audio playback issue by adding the audio playback ref.\r\n2. Update the pause functionality to properly stop all audio sources.\r\n3. Create and integrate the FullscreenMediaViewer component.\r\n4. Add the audio glow highlighting effect.\r\n5. Implement the next lesson navigation.\r\n\r\nFor each change, thoroughly test the component to ensure there are no regressions in the existing functionality. "
        }
    ]
}