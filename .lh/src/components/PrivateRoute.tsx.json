{
    "sourceFile": "src/components/PrivateRoute.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1739280362987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739280376619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n         progress={loadingProgress}\r\n         timeout={15000}\r\n         showRetry={true}\r\n         onRetry={() => {\r\n-          queryClient.invalidateQueries(['auth']);\r\n+          queryClient.invalidateQueries({ queryKey: ['auth'] });\r\n           window.location.reload();\r\n         }}\r\n       />\r\n     );\r\n"
                },
                {
                    "date": 1739280798542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,8 +70,9 @@\n         localStorage.setItem('lastRoute', location.pathname + location.search);\r\n       }\r\n \r\n       navigate('/login', { state: { from: location }, replace: true });\r\n+      // Clear cache only when redirecting\r\n       queryClient.clear();\r\n     }\r\n   }, [user, loading, location, navigate, queryClient]);\r\n \r\n@@ -106,8 +107,9 @@\n   }\r\n \r\n   // Handle unauthenticated state\r\n   if (!user) {\r\n+    // Clear cache before redirecting\r\n     logger.info('Redirecting to login - no authenticated user', {\r\n       source: 'PrivateRoute'\r\n     });\r\n     queryClient.clear();\r\n"
                },
                {
                    "date": 1739281318188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,28 +47,46 @@\n     if (user && !loading && location.pathname !== '/login') {\r\n       const currentPath = location.pathname + location.search;\r\n       localStorage.setItem('lastRoute', currentPath);\r\n       logger.debug('Route stored', {\r\n-        context: { route: currentPath },\r\n+        context: { \r\n+          route: currentPath,\r\n+          isLessonPage: currentPath.includes('/lessons/'),\r\n+          userId: user.id\r\n+        },\r\n         source: 'PrivateRoute'\r\n       });\r\n+\r\n+      // Additional logging for lesson pages\r\n+      if (currentPath.includes('/lessons/')) {\r\n+        logger.info('Accessing lesson page', {\r\n+          context: {\r\n+            path: currentPath,\r\n+            userId: user.id,\r\n+            timestamp: new Date().toISOString()\r\n+          },\r\n+          source: 'PrivateRoute'\r\n+        });\r\n+      }\r\n     }\r\n   }, [location, user, loading]);\r\n \r\n   // Redirect to login if not authenticated\r\n   useEffect(() => {\r\n     if (!user && !loading) {\r\n+      const currentPath = location.pathname + location.search;\r\n       logger.debug('Redirecting to login', {\r\n         context: {\r\n-          from: location.pathname,\r\n+          from: currentPath,\r\n+          isLessonPage: currentPath.includes('/lessons/'),\r\n           reason: 'No authenticated user'\r\n         },\r\n         source: 'PrivateRoute'\r\n       });\r\n \r\n       // Store the attempted route before redirecting\r\n       if (location.pathname !== '/login') {\r\n-        localStorage.setItem('lastRoute', location.pathname + location.search);\r\n+        localStorage.setItem('lastRoute', currentPath);\r\n       }\r\n \r\n       navigate('/login', { state: { from: location }, replace: true });\r\n       // Clear cache only when redirecting\r\n"
                },
                {
                    "date": 1739281652122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,14 +26,18 @@\n     if (user && !loading && initialLoadRef.current) {\r\n       const lastRoute = localStorage.getItem('lastRoute');\r\n       const currentPath = location.pathname + location.search;\r\n       \r\n-      // Don't redirect if we're already on the lastRoute\r\n-      if (lastRoute && lastRoute !== currentPath && lastRoute !== '/login') {\r\n+      // Don't redirect if we're already on the lastRoute or if it's a lesson page\r\n+      if (lastRoute && \r\n+          lastRoute !== currentPath && \r\n+          lastRoute !== '/login' && \r\n+          !currentPath.includes('/lessons/')) {\r\n         logger.debug('Restoring last route', {\r\n           context: {\r\n             from: currentPath,\r\n-            to: lastRoute\r\n+            to: lastRoute,\r\n+            userId: user.id\r\n           },\r\n           source: 'PrivateRoute'\r\n         });\r\n         navigate(lastRoute, { replace: true });\r\n@@ -45,26 +49,31 @@\n   // Store current route\r\n   useEffect(() => {\r\n     if (user && !loading && location.pathname !== '/login') {\r\n       const currentPath = location.pathname + location.search;\r\n-      localStorage.setItem('lastRoute', currentPath);\r\n-      logger.debug('Route stored', {\r\n-        context: { \r\n-          route: currentPath,\r\n-          isLessonPage: currentPath.includes('/lessons/'),\r\n-          userId: user.id\r\n-        },\r\n-        source: 'PrivateRoute'\r\n-      });\r\n+      \r\n+      // Don't store lesson pages in lastRoute to prevent unwanted redirects\r\n+      if (!currentPath.includes('/lessons/')) {\r\n+        localStorage.setItem('lastRoute', currentPath);\r\n+        logger.debug('Route stored', {\r\n+          context: { \r\n+            route: currentPath,\r\n+            userId: user.id\r\n+          },\r\n+          source: 'PrivateRoute'\r\n+        });\r\n+      }\r\n \r\n-      // Additional logging for lesson pages\r\n+      // Store lesson state separately\r\n       if (currentPath.includes('/lessons/')) {\r\n-        logger.info('Accessing lesson page', {\r\n-          context: {\r\n-            path: currentPath,\r\n-            userId: user.id,\r\n-            timestamp: new Date().toISOString()\r\n-          },\r\n+        const lessonState = {\r\n+          path: currentPath,\r\n+          timestamp: Date.now(),\r\n+          userId: user.id\r\n+        };\r\n+        sessionStorage.setItem('currentLessonState', JSON.stringify(lessonState));\r\n+        logger.info('Lesson state stored', {\r\n+          context: lessonState,\r\n           source: 'PrivateRoute'\r\n         });\r\n       }\r\n     }\r\n@@ -73,24 +82,25 @@\n   // Redirect to login if not authenticated\r\n   useEffect(() => {\r\n     if (!user && !loading) {\r\n       const currentPath = location.pathname + location.search;\r\n+      const isLessonPage = currentPath.includes('/lessons/');\r\n+      \r\n       logger.debug('Redirecting to login', {\r\n         context: {\r\n           from: currentPath,\r\n-          isLessonPage: currentPath.includes('/lessons/'),\r\n+          isLessonPage,\r\n           reason: 'No authenticated user'\r\n         },\r\n         source: 'PrivateRoute'\r\n       });\r\n \r\n-      // Store the attempted route before redirecting\r\n-      if (location.pathname !== '/login') {\r\n+      // Store the attempted route before redirecting, but not for lesson pages\r\n+      if (location.pathname !== '/login' && !isLessonPage) {\r\n         localStorage.setItem('lastRoute', currentPath);\r\n       }\r\n \r\n       navigate('/login', { state: { from: location }, replace: true });\r\n-      // Clear cache only when redirecting\r\n       queryClient.clear();\r\n     }\r\n   }, [user, loading, location, navigate, queryClient]);\r\n \r\n"
                },
                {
                    "date": 1739298817901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,150 +1,84 @@\n-import React, { useEffect, useRef } from 'react';\r\n-import { Navigate, useLocation, useNavigate } from 'react-router-dom';\r\n-import { useAuth } from '../hooks/useAuth';\r\n-import LoadingSpinner from './LoadingSpinner';\r\n-import { useQueryClient } from '@tanstack/react-query';\r\n-import { logger } from '../lib/logger';\r\n-\r\n-const PrivateRoute: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n-  const location = useLocation();\r\n-  const navigate = useNavigate();\r\n-  const queryClient = useQueryClient(); \r\n-  const auth = useAuth();\r\n-  const { user, loading } = auth;\r\n-  const mountedRef = useRef(true);\r\n-  const [loadingProgress, setLoadingProgress] = React.useState(0);\r\n-  const initialLoadRef = useRef(true);\r\n-\r\n-  useEffect(() => {\r\n-    return () => {\r\n-      mountedRef.current = false;\r\n-    };\r\n-  }, []);\r\n-\r\n-  // Handle route persistence\r\n-  useEffect(() => {\r\n-    if (user && !loading && initialLoadRef.current) {\r\n-      const lastRoute = localStorage.getItem('lastRoute');\r\n-      const currentPath = location.pathname + location.search;\r\n-      \r\n-      // Don't redirect if we're already on the lastRoute or if it's a lesson page\r\n-      if (lastRoute && \r\n-          lastRoute !== currentPath && \r\n-          lastRoute !== '/login' && \r\n-          !currentPath.includes('/lessons/')) {\r\n-        logger.debug('Restoring last route', {\r\n-          context: {\r\n-            from: currentPath,\r\n-            to: lastRoute,\r\n-            userId: user.id\r\n-          },\r\n-          source: 'PrivateRoute'\r\n-        });\r\n-        navigate(lastRoute, { replace: true });\r\n-      }\r\n-      initialLoadRef.current = false;\r\n-    }\r\n-  }, [user, loading, location, navigate]);\r\n-\r\n-  // Store current route\r\n-  useEffect(() => {\r\n-    if (user && !loading && location.pathname !== '/login') {\r\n-      const currentPath = location.pathname + location.search;\r\n-      \r\n-      // Don't store lesson pages in lastRoute to prevent unwanted redirects\r\n-      if (!currentPath.includes('/lessons/')) {\r\n-        localStorage.setItem('lastRoute', currentPath);\r\n-        logger.debug('Route stored', {\r\n-          context: { \r\n-            route: currentPath,\r\n-            userId: user.id\r\n-          },\r\n-          source: 'PrivateRoute'\r\n-        });\r\n-      }\r\n-\r\n-      // Store lesson state separately\r\n-      if (currentPath.includes('/lessons/')) {\r\n-        const lessonState = {\r\n-          path: currentPath,\r\n-          timestamp: Date.now(),\r\n-          userId: user.id\r\n-        };\r\n-        sessionStorage.setItem('currentLessonState', JSON.stringify(lessonState));\r\n-        logger.info('Lesson state stored', {\r\n-          context: lessonState,\r\n-          source: 'PrivateRoute'\r\n-        });\r\n-      }\r\n-    }\r\n-  }, [location, user, loading]);\r\n-\r\n-  // Redirect to login if not authenticated\r\n-  useEffect(() => {\r\n-    if (!user && !loading) {\r\n-      const currentPath = location.pathname + location.search;\r\n-      const isLessonPage = currentPath.includes('/lessons/');\r\n-      \r\n-      logger.debug('Redirecting to login', {\r\n-        context: {\r\n-          from: currentPath,\r\n-          isLessonPage,\r\n-          reason: 'No authenticated user'\r\n-        },\r\n-        source: 'PrivateRoute'\r\n-      });\r\n-\r\n-      // Store the attempted route before redirecting, but not for lesson pages\r\n-      if (location.pathname !== '/login' && !isLessonPage) {\r\n-        localStorage.setItem('lastRoute', currentPath);\r\n-      }\r\n-\r\n-      navigate('/login', { state: { from: location }, replace: true });\r\n-      queryClient.clear();\r\n-    }\r\n-  }, [user, loading, location, navigate, queryClient]);\r\n-\r\n-  useEffect(() => {\r\n-    // Only log authentication failure once per session\r\n-    if (!user && !loading && !sessionStorage.getItem('auth_redirect_logged')) {\r\n-      sessionStorage.setItem('auth_redirect_logged', 'true');\r\n-      // Clear query cache on auth failure\r\n-      queryClient.clear();\r\n-      logger.warn('Authentication required', {\r\n-        context: { path: location.pathname },\r\n-        source: 'PrivateRoute'\r\n-      });\r\n-    }\r\n-  }, [user, loading, location.pathname, queryClient]);\r\n-\r\n-  // Handle loading state\r\n-  if (loading) {\r\n-    return (\r\n-      <LoadingSpinner \r\n-        message=\"Authenticating...\" \r\n-        showProgress={true}\r\n-        progress={loadingProgress}\r\n-        timeout={15000}\r\n-        showRetry={true}\r\n-        onRetry={() => {\r\n-          queryClient.invalidateQueries({ queryKey: ['auth'] });\r\n-          window.location.reload();\r\n-        }}\r\n-      />\r\n-    );\r\n-  }\r\n-\r\n-  // Handle unauthenticated state\r\n-  if (!user) {\r\n-    // Clear cache before redirecting\r\n-    logger.info('Redirecting to login - no authenticated user', {\r\n-      source: 'PrivateRoute'\r\n-    });\r\n-    queryClient.clear();\r\n-    return <Navigate to=\"/login\" state={{ from: location }} replace />;\r\n-  }\r\n-\r\n-  return <>{children}</>;\r\n-};\r\n-\r\n+import React, { useEffect, useRef } from 'react';\n+import { Navigate, useLocation, useNavigate } from 'react-router-dom';\n+import { useAuth } from '../hooks/useAuth';\n+import LoadingSpinner from './LoadingSpinner';\n+import { useQueryClient } from '@tanstack/react-query';\n+import { logger } from '../lib/logger';\n+\n+const PrivateRoute: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n+  const location = useLocation();\n+  const navigate = useNavigate();\n+  const queryClient = useQueryClient(); \n+  const auth = useAuth();\n+  const { user, loading } = auth;\n+  const mountedRef = useRef(true);\n+  const [loadingProgress, setLoadingProgress] = React.useState(0);\n+\n+  useEffect(() => {\n+    return () => {\n+      mountedRef.current = false;\n+    };\n+  }, []);\n+\n+  // Redirect to login if not authenticated\n+  useEffect(() => {\n+    if (!user && !loading) {\n+      logger.debug('Redirecting to login', {\n+        context: {\n+          from: location.pathname,\n+          reason: 'No authenticated user'\n+        },\n+        source: 'PrivateRoute'\n+      });\n+\n+      navigate('/login', { state: { from: location }, replace: true });\n+      // Clear cache only when redirecting\n+      queryClient.clear();\n+    }\n+    \n+  }, [user, loading, location, navigate, queryClient]);\n+\n+  useEffect(() => {\n+    // Only log authentication failure once per session\n+    if (!user && !loading && !sessionStorage.getItem('auth_redirect_logged')) {\n+      sessionStorage.setItem('auth_redirect_logged', 'true');\n+      // Clear query cache on auth failure\n+      queryClient.clear();\n+      logger.warn('Authentication required', {\n+        context: { path: location.pathname },\n+        source: 'PrivateRoute'\n+      });\n+    }\n+  }, [user, loading, location.pathname, queryClient]);\n+\n+  // Handle loading state\n+  if (loading) {\n+    return (\n+      <LoadingSpinner \n+        message=\"Authenticating...\" \n+        showProgress={true}\n+        progress={loadingProgress}\n+        timeout={15000}\n+        showRetry={true}\n+        onRetry={() => {\n+          queryClient.invalidateQueries({ queryKey: ['auth'] });\n+          window.location.reload();\n+        }}\n+      />\n+    );\n+  }\n+\n+  // Handle unauthenticated state\n+  if (!user) {\n+    // Clear cache before redirecting\n+    logger.info('Redirecting to login - no authenticated user', {\n+      source: 'PrivateRoute'\n+    });\n+    queryClient.clear();\n+    return <Navigate to=\"/login\" state={{ from: location }} replace />;\n+  }\n+\n+  return <>{children}</>;\n+};\n+\n export default PrivateRoute;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739298977415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,46 +12,118 @@\n   const auth = useAuth();\n   const { user, loading } = auth;\n   const mountedRef = useRef(true);\n   const [loadingProgress, setLoadingProgress] = React.useState(0);\n+  const initialLoadRef = useRef(true);\n \n   useEffect(() => {\n     return () => {\n       mountedRef.current = false;\n     };\n   }, []);\n \n-  // Redirect to login if not authenticated\n+  // Handle route persistence\n   useEffect(() => {\n-    if (!user && !loading) {\n-      logger.debug('Redirecting to login', {\n-        context: {\n-          from: location.pathname,\n-          reason: 'No authenticated user'\n-        },\n-        source: 'PrivateRoute'\n-      });\n-\n-      navigate('/login', { state: { from: location }, replace: true });\n-      // Clear cache only when redirecting\n-      queryClient.clear();\n+    if (user && !loading && initialLoadRef.current) {\n+      const lastRoute = localStorage.getItem('lastRoute');\n+      const currentPath = location.pathname + location.search;\n+      \n+      // Don't redirect if we're already on the lastRoute or if it's a lesson page\n+      if (lastRoute && \n+          lastRoute !== currentPath && \n+          lastRoute !== '/login' && \n+          !currentPath.includes('/lessons/')) {\n+        logger.debug('Restoring last route', {\n+          context: {\n+            from: currentPath,\n+            to: lastRoute,\n+            userId: user.id\n+          },\n+          source: 'PrivateRoute'\n+        });\n+        navigate(lastRoute, { replace: true });\n+      }\n+      initialLoadRef.current = false;\n     }\n-    \n-  }, [user, loading, location, navigate, queryClient]);\n+  }, [user, loading, location, navigate]);\n \n+  // Store current route with enhanced persistence\n   useEffect(() => {\n-    // Only log authentication failure once per session\n-    if (!user && !loading && !sessionStorage.getItem('auth_redirect_logged')) {\n-      sessionStorage.setItem('auth_redirect_logged', 'true');\n-      // Clear query cache on auth failure\n-      queryClient.clear();\n-      logger.warn('Authentication required', {\n-        context: { path: location.pathname },\n+    if (user && !loading && location.pathname !== '/login') {\n+      const currentPath = location.pathname + location.search;\n+      \n+      // Store route in both localStorage and sessionStorage for redundancy\n+      localStorage.setItem('lastRoute', currentPath);\n+      sessionStorage.setItem('currentRoute', currentPath);\n+      \n+      // Store additional context for lesson pages\n+      if (currentPath.includes('/lessons/')) {\n+        const lessonContext = {\n+          path: currentPath,\n+          userId: user.id,\n+          timestamp: new Date().toISOString(),\n+          role: user.role\n+        };\n+        sessionStorage.setItem('lessonContext', JSON.stringify(lessonContext));\n+      }\n+\n+      logger.debug('Route stored', {\n+        context: { \n+          route: currentPath,\n+          isLessonPage: currentPath.includes('/lessons/'),\n+          userId: user.id,\n+          role: user.role\n+        },\n         source: 'PrivateRoute'\n       });\n     }\n-  }, [user, loading, location.pathname, queryClient]);\n+  }, [location, user, loading]);\n \n+  // Enhanced session check\n+  useEffect(() => {\n+    const checkSession = async () => {\n+      if (!user && !loading) {\n+        const currentPath = location.pathname + location.search;\n+        const isLessonPage = currentPath.includes('/lessons/');\n+        \n+        // Try to recover session from storage\n+        const lessonContext = sessionStorage.getItem('lessonContext');\n+        const currentRoute = sessionStorage.getItem('currentRoute');\n+        \n+        if (isLessonPage && lessonContext) {\n+          logger.info('Attempting to recover lesson session', {\n+            context: {\n+              path: currentPath,\n+              lessonContext: JSON.parse(lessonContext)\n+            },\n+            source: 'PrivateRoute'\n+          });\n+        }\n+\n+        logger.debug('Session check', {\n+          context: {\n+            path: currentPath,\n+            isLessonPage,\n+            hasLessonContext: !!lessonContext,\n+            currentRoute\n+          },\n+          source: 'PrivateRoute'\n+        });\n+\n+        // Store the attempted route before redirecting\n+        if (location.pathname !== '/login') {\n+          localStorage.setItem('lastRoute', currentPath);\n+          sessionStorage.setItem('redirectPath', currentPath);\n+        }\n+\n+        navigate('/login', { state: { from: location }, replace: true });\n+        queryClient.clear();\n+      }\n+    };\n+\n+    checkSession();\n+  }, [user, loading, location, navigate, queryClient]);\n+\n   // Handle loading state\n   if (loading) {\n     return (\n       <LoadingSpinner \n"
                }
            ],
            "date": 1739280362987,
            "name": "Commit-0",
            "content": "import React, { useEffect, useRef } from 'react';\r\nimport { Navigate, useLocation, useNavigate } from 'react-router-dom';\r\nimport { useAuth } from '../hooks/useAuth';\r\nimport LoadingSpinner from './LoadingSpinner';\r\nimport { useQueryClient } from '@tanstack/react-query';\r\nimport { logger } from '../lib/logger';\r\n\r\nconst PrivateRoute: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const queryClient = useQueryClient(); \r\n  const auth = useAuth();\r\n  const { user, loading } = auth;\r\n  const mountedRef = useRef(true);\r\n  const [loadingProgress, setLoadingProgress] = React.useState(0);\r\n  const initialLoadRef = useRef(true);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      mountedRef.current = false;\r\n    };\r\n  }, []);\r\n\r\n  // Handle route persistence\r\n  useEffect(() => {\r\n    if (user && !loading && initialLoadRef.current) {\r\n      const lastRoute = localStorage.getItem('lastRoute');\r\n      const currentPath = location.pathname + location.search;\r\n      \r\n      // Don't redirect if we're already on the lastRoute\r\n      if (lastRoute && lastRoute !== currentPath && lastRoute !== '/login') {\r\n        logger.debug('Restoring last route', {\r\n          context: {\r\n            from: currentPath,\r\n            to: lastRoute\r\n          },\r\n          source: 'PrivateRoute'\r\n        });\r\n        navigate(lastRoute, { replace: true });\r\n      }\r\n      initialLoadRef.current = false;\r\n    }\r\n  }, [user, loading, location, navigate]);\r\n\r\n  // Store current route\r\n  useEffect(() => {\r\n    if (user && !loading && location.pathname !== '/login') {\r\n      const currentPath = location.pathname + location.search;\r\n      localStorage.setItem('lastRoute', currentPath);\r\n      logger.debug('Route stored', {\r\n        context: { route: currentPath },\r\n        source: 'PrivateRoute'\r\n      });\r\n    }\r\n  }, [location, user, loading]);\r\n\r\n  // Redirect to login if not authenticated\r\n  useEffect(() => {\r\n    if (!user && !loading) {\r\n      logger.debug('Redirecting to login', {\r\n        context: {\r\n          from: location.pathname,\r\n          reason: 'No authenticated user'\r\n        },\r\n        source: 'PrivateRoute'\r\n      });\r\n\r\n      // Store the attempted route before redirecting\r\n      if (location.pathname !== '/login') {\r\n        localStorage.setItem('lastRoute', location.pathname + location.search);\r\n      }\r\n\r\n      navigate('/login', { state: { from: location }, replace: true });\r\n      queryClient.clear();\r\n    }\r\n  }, [user, loading, location, navigate, queryClient]);\r\n\r\n  useEffect(() => {\r\n    // Only log authentication failure once per session\r\n    if (!user && !loading && !sessionStorage.getItem('auth_redirect_logged')) {\r\n      sessionStorage.setItem('auth_redirect_logged', 'true');\r\n      // Clear query cache on auth failure\r\n      queryClient.clear();\r\n      logger.warn('Authentication required', {\r\n        context: { path: location.pathname },\r\n        source: 'PrivateRoute'\r\n      });\r\n    }\r\n  }, [user, loading, location.pathname, queryClient]);\r\n\r\n  // Handle loading state\r\n  if (loading) {\r\n    return (\r\n      <LoadingSpinner \r\n        message=\"Authenticating...\" \r\n        showProgress={true}\r\n        progress={loadingProgress}\r\n        timeout={15000}\r\n        showRetry={true}\r\n        onRetry={() => {\r\n          queryClient.invalidateQueries(['auth']);\r\n          window.location.reload();\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  // Handle unauthenticated state\r\n  if (!user) {\r\n    logger.info('Redirecting to login - no authenticated user', {\r\n      source: 'PrivateRoute'\r\n    });\r\n    queryClient.clear();\r\n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\r\n  }\r\n\r\n  return <>{children}</>;\r\n};\r\n\r\nexport default PrivateRoute;"
        }
    ]
}