{
    "sourceFile": "src/components/dashboards/AccountsDashboard.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1740772584001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1740772584001,
            "name": "Commit-0",
            "content": "import React from 'react';\r\nimport { \r\n  DollarSign, TrendingUp, PieChart, \r\n  CreditCard, Activity, AlertTriangle \r\n} from 'lucide-react';\r\nimport type { RoleSettings } from '../../hooks/useRoleSettings';\r\nimport { formatCurrency, formatNumber } from '../../lib/utils/format';\r\n\r\ninterface AccountsDashboardProps {\r\n  settings: RoleSettings;\r\n}\r\n\r\nconst AccountsDashboard: React.FC<AccountsDashboardProps> = ({ settings }) => {\r\n  const testData = {\r\n    revenue: 1250000,\r\n    expenses: 850000,\r\n    profit: 400000,\r\n    cashFlow: 350000,\r\n    pendingPayments: 75000,\r\n    outstandingInvoices: 120000,\r\n    recentTransactions: [\r\n      { type: 'income', amount: 25000, description: 'School fee payment' },\r\n      { type: 'expense', amount: 15000, description: 'Equipment purchase' },\r\n      { type: 'income', amount: 30000, description: 'Course registration' }\r\n    ],\r\n    alerts: [\r\n      'Monthly financial report due',\r\n      'Tax filing deadline approaching',\r\n      'Budget review meeting scheduled'\r\n    ]\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Quick Stats */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n        <QuickStat\r\n          icon={DollarSign}\r\n          label=\"Total Revenue\"\r\n          value={formatCurrency(testData.revenue)}\r\n          trend=\"up\"\r\n        />\r\n        <QuickStat\r\n          icon={CreditCard}\r\n          label=\"Total Expenses\"\r\n          value={formatCurrency(testData.expenses)}\r\n          trend=\"down\"\r\n        />\r\n        <QuickStat\r\n          icon={TrendingUp}\r\n          label=\"Net Profit\"\r\n          value={formatCurrency(testData.profit)}\r\n          trend=\"up\"\r\n        />\r\n        <QuickStat\r\n          icon={PieChart}\r\n          label=\"Cash Flow\"\r\n          value={formatCurrency(testData.cashFlow)}\r\n          trend=\"up\"\r\n        />\r\n      </div>\r\n\r\n      {/* Financial Details */}\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n          <h3 className=\"text-lg font-medium mb-4\">Recent Transactions</h3>\r\n          <div className=\"space-y-4\">\r\n            {testData.recentTransactions.map((transaction, index) => (\r\n              <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\r\n                <div className=\"flex items-center\">\r\n                  <Activity className={`h-5 w-5 ${\r\n                    transaction.type === 'income' ? 'text-green-500' : 'text-red-500'\r\n                  } mr-3`} />\r\n                  <div>\r\n                    <p className=\"text-sm font-medium text-gray-900\">\r\n                      {transaction.description}\r\n                    </p>\r\n                    <p className=\"text-xs text-gray-500\">\r\n                      {transaction.type.charAt(0).toUpperCase() + transaction.type.slice(1)}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n                <span className={`text-sm font-medium ${\r\n                  transaction.type === 'income' ? 'text-green-600' : 'text-red-600'\r\n                }`}>\r\n                  {transaction.type === 'income' ? '+' : '-'}\r\n                  {formatCurrency(transaction.amount)}\r\n                </span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n          <h3 className=\"text-lg font-medium mb-4\">Financial Alerts</h3>\r\n          <div className=\"space-y-4\">\r\n            {testData.alerts.map((alert, index) => (\r\n              <div key={index} className=\"flex items-center space-x-3 p-3 bg-gray-50 rounded-lg\">\r\n                <AlertTriangle className=\"h-5 w-5 text-amber-500\" />\r\n                <span className=\"text-sm text-gray-700\">{alert}</span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Financial Metrics */}\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n          <h3 className=\"text-lg font-medium mb-4\">Outstanding Payments</h3>\r\n          <div className=\"space-y-4\">\r\n            <MetricBar \r\n              label=\"Pending Payments\" \r\n              value={testData.pendingPayments} \r\n              total={testData.revenue}\r\n            />\r\n            <MetricBar \r\n              label=\"Outstanding Invoices\" \r\n              value={testData.outstandingInvoices} \r\n              total={testData.revenue}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n          <h3 className=\"text-lg font-medium mb-4\">Budget Overview</h3>\r\n          <div className=\"space-y-4\">\r\n            <MetricBar \r\n              label=\"Budget Utilization\" \r\n              value={testData.expenses} \r\n              total={testData.revenue}\r\n            />\r\n            <MetricBar \r\n              label=\"Profit Margin\" \r\n              value={testData.profit} \r\n              total={testData.revenue}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst QuickStat: React.FC<{\r\n  icon: React.ElementType;\r\n  label: string;\r\n  value: string;\r\n  trend: 'up' | 'down';\r\n}> = ({ icon: Icon, label, value, trend }) => (\r\n  <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n    <div className=\"flex items-center justify-between\">\r\n      <div>\r\n        <p className=\"text-sm font-medium text-gray-600\">{label}</p>\r\n        <p className=\"text-2xl font-semibold text-gray-900\">{value}</p>\r\n      </div>\r\n      <Icon className={`h-8 w-8 ${trend === 'up' ? 'text-green-500' : 'text-red-500'}`} />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst MetricBar: React.FC<{\r\n  label: string;\r\n  value: number;\r\n  total: number;\r\n}> = ({ label, value, total }) => {\r\n  const percentage = (value / total) * 100;\r\n  \r\n  return (\r\n    <div className=\"space-y-2\">\r\n      <div className=\"flex justify-between text-sm\">\r\n        <span className=\"text-gray-600\">{label}</span>\r\n        <span className=\"font-medium\">{formatCurrency(value)}</span>\r\n      </div>\r\n      <div className=\"h-2 bg-gray-200 rounded-full overflow-hidden\">\r\n        <div \r\n          className={`h-full bg-indigo-600 rounded-full w-[${percentage}%]`}\r\n        />\r\n      </div>\r\n      <div className=\"text-xs text-gray-500 text-right\">\r\n        {percentage.toFixed(1)}% of total\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountsDashboard;"
        }
    ]
}