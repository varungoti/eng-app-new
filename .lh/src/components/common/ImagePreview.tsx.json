{
    "sourceFile": "src/components/common/ImagePreview.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1740771114638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740771150088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,9 +124,9 @@\n     return <Skeleton className={`w-[${width}px] h-[${height}px] ${className}`} />;\r\n }\r\n \r\n return (\r\n-    <img\r\n+    <Img\r\n     src={processedUrl || imageUrl}\r\n     alt={alt}\r\n     width={width}\r\n     height={height}\r\n"
                },
                {
                    "date": 1740771160301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n \r\n import React, { useState, useEffect } from 'react';\r\n import { supabase } from '@/lib/supabase';\r\n import { Skeleton } from '@/components/ui/skeleton';\r\n+import Image from 'next/image';\r\n \r\n interface ImagePreviewProps {\r\n imageUrl: string;\r\n width?: number;\r\n@@ -124,16 +125,16 @@\n     return <Skeleton className={`w-[${width}px] h-[${height}px] ${className}`} />;\r\n }\r\n \r\n return (\r\n-    <Img\r\n-    src={processedUrl || imageUrl}\r\n-    alt={alt}\r\n-    width={width}\r\n-    height={height}\r\n-    className={className}\r\n-    loading={priority ? 'eager' : 'lazy'}\r\n-    crossOrigin=\"anonymous\"\r\n+    <Image\r\n+      src={processedUrl || imageUrl}\r\n+      alt={alt}\r\n+      width={width}\r\n+      height={height}\r\n+      className={className}\r\n+      priority={priority}\r\n+      crossOrigin=\"anonymous\"\r\n     />\r\n );\r\n };\r\n \r\n"
                },
                {
                    "date": 1740771177031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n const [processedUrl, setProcessedUrl] = useState<string>('');\r\n const [isLoading, setIsLoading] = useState(true);\r\n \r\n const processImageWithCanvas = async (blob: Blob): Promise<Blob> => {\r\n-const img = new Image();\r\n+const img = new Image() as HTMLImageElement;\r\n const canvas = document.createElement('canvas');\r\n const ctx = canvas.getContext('2d');\r\n \r\n return new Promise((resolve) => {\r\n"
                },
                {
                    "date": 1740771185066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n const [processedUrl, setProcessedUrl] = useState<string>('');\r\n const [isLoading, setIsLoading] = useState(true);\r\n \r\n const processImageWithCanvas = async (blob: Blob): Promise<Blob> => {\r\n-const img = new Image() as HTMLImageElement;\r\n+const img = document.createElement('img');\r\n const canvas = document.createElement('canvas');\r\n const ctx = canvas.getContext('2d');\r\n \r\n return new Promise((resolve) => {\r\n"
                },
                {
                    "date": 1740771235397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,10 +27,22 @@\n \r\n const processImageWithCanvas = async (blob: Blob): Promise<Blob> => {\r\n const img = document.createElement('img');\r\n const canvas = document.createElement('canvas');\r\n-const ctx = canvas.getContext('2d');\r\n+const ctx = canvas.getContext('2d')as CanvasRenderingContext2D | null;\r\n \r\n+    if (!ctx) return\r\n+\r\n+    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n+\r\n+    canvas.toBlob((blob) => {\r\n+        if (blob) {\r\n+        resolve(blob);\r\n+        } else {\r\n+        resolve(new Blob()); // Resolve with an empty blob if toBlob fails\r\n+        }\r\n+    }, 'image/webp;\r\n+\r\n return new Promise((resolve) => {\r\n     img.onload = () => {\r\n     // Set canvas size maintaining aspect ratio\r\n     const aspectRatio = img.width / img.height;\r\n"
                },
                {
                    "date": 1740771356537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,22 +27,10 @@\n \r\n const processImageWithCanvas = async (blob: Blob): Promise<Blob> => {\r\n const img = document.createElement('img');\r\n const canvas = document.createElement('canvas');\r\n-const ctx = canvas.getContext('2d')as CanvasRenderingContext2D | null;\r\n+const ctx = canvas.getContext('2d');\r\n \r\n-    if (!ctx) return\r\n-\r\n-    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n-\r\n-    canvas.toBlob((blob) => {\r\n-        if (blob) {\r\n-        resolve(blob);\r\n-        } else {\r\n-        resolve(new Blob()); // Resolve with an empty blob if toBlob fails\r\n-        }\r\n-    }, 'image/webp;\r\n-\r\n return new Promise((resolve) => {\r\n     img.onload = () => {\r\n     // Set canvas size maintaining aspect ratio\r\n     const aspectRatio = img.width / img.height;\r\n@@ -138,15 +126,9 @@\n }\r\n \r\n return (\r\n     <Image\r\n-      src={processedUrl || imageUrl}\r\n-      alt={alt}\r\n-      width={width}\r\n-      height={height}\r\n-      className={className}\r\n-      priority={priority}\r\n-      crossOrigin=\"anonymous\"\r\n+      >\r\n     />\r\n );\r\n };\r\n \r\n"
                },
                {
                    "date": 1740771367409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,15 @@\n }\r\n \r\n return (\r\n     <Image\r\n-      >\r\n+        src={processedUrl || imageUrl}\r\n+        alt={alt}\r\n+        width={width}\r\n+        height={height}\r\n+        className={className}\r\n+        priority={priority}\r\n+        crossOrigin=\"anonymous\"\r\n     />\r\n );\r\n };\r\n \r\n"
                },
                {
                    "date": 1740771382104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,15 +126,15 @@\n }\r\n \r\n return (\r\n     <Image\r\n-        src={processedUrl || imageUrl}\r\n-        alt={alt}\r\n-        width={width}\r\n-        height={height}\r\n-        className={className}\r\n-        priority={priority}\r\n-        crossOrigin=\"anonymous\"\r\n+    src={processedUrl || imageUrl}\r\n+    alt={alt}\r\n+    width={width}\r\n+    height={height}\r\n+    className={className}\r\n+    priority={priority}\r\n+    crossOrigin=\"anonymous\"\r\n     />\r\n );\r\n };\r\n \r\n"
                },
                {
                    "date": 1740771389757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,15 +126,15 @@\n }\r\n \r\n return (\r\n     <Image\r\n-    src={processedUrl || imageUrl}\r\n-    alt={alt}\r\n-    width={width}\r\n-    height={height}\r\n-    className={className}\r\n-    priority={priority}\r\n-    crossOrigin=\"anonymous\"\r\n+        src={processedUrl || imageUrl}\r\n+        alt={alt}\r\n+        width={width}\r\n+        height={height}\r\n+        className={className}\r\n+        priority={priority}\r\n+        crossOrigin=\"anonymous\"\r\n     />\r\n );\r\n };\r\n \r\n"
                },
                {
                    "date": 1740771435918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,25 @@\n className?: string;\r\n priority?: boolean;\r\n alt?: string;\r\n }\r\n+```xml\r\n+const [error, setError] = useState<string | null>(null);\r\n \r\n+useEffect(() => {\r\n+if (!imageUrl) {\r\n+setProcessedUrl('');\r\n+setError(null);\r\n+return;\r\n+}\r\n+\r\n+const processImageUrl = async () => {\r\n+setIsLoading(true);\r\n+setError(null);\r\n+try {\r\n+const { data, error: storageError } = await supabase.storage\r\n+.from('images')\r\n+.getPublicUrl(imageUrl\r\n export const ImagePreview: React.FC<ImagePreviewProps> = ({\r\n imageUrl,\r\n width = 400,\r\n height = 300,\r\n"
                },
                {
                    "date": 1740771446707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,25 +12,9 @@\n className?: string;\r\n priority?: boolean;\r\n alt?: string;\r\n }\r\n-```xml\r\n-const [error, setError] = useState<string | null>(null);\r\n \r\n-useEffect(() => {\r\n-if (!imageUrl) {\r\n-setProcessedUrl('');\r\n-setError(null);\r\n-return;\r\n-}\r\n-\r\n-const processImageUrl = async () => {\r\n-setIsLoading(true);\r\n-setError(null);\r\n-try {\r\n-const { data, error: storageError } = await supabase.storage\r\n-.from('images')\r\n-.getPublicUrl(imageUrl\r\n export const ImagePreview: React.FC<ImagePreviewProps> = ({\r\n imageUrl,\r\n width = 400,\r\n height = 300,\r\n"
                },
                {
                    "date": 1740771682973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,10 @@\n priority?: boolean;\r\n alt?: string;\r\n }\r\n \r\n+\r\n+\r\n export const ImagePreview: React.FC<ImagePreviewProps> = ({\r\n imageUrl,\r\n width = 400,\r\n height = 300,\r\n"
                },
                {
                    "date": 1740771703471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,8 @@\n alt?: string;\r\n }\r\n \r\n \r\n-\r\n export const ImagePreview: React.FC<ImagePreviewProps> = ({\r\n imageUrl,\r\n width = 400,\r\n height = 300,\r\n"
                },
                {
                    "date": 1740826097184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n height?: number;\r\n className?: string;\r\n priority?: boolean;\r\n alt?: string;\r\n+loading?: \"lazy\" | \"eager\";\r\n }\r\n \r\n \r\n export const ImagePreview: React.FC<ImagePreviewProps> = ({\r\n@@ -20,9 +21,10 @@\n width = 400,\r\n height = 300,\r\n className = '',\r\n priority = false,\r\n-alt = \"Preview\"\r\n+alt = \"Preview\",\r\n+loading\r\n }) => {\r\n const [processedUrl, setProcessedUrl] = useState<string>('');\r\n const [isLoading, setIsLoading] = useState(true);\r\n \r\n@@ -133,8 +135,9 @@\n         width={width}\r\n         height={height}\r\n         className={className}\r\n         priority={priority}\r\n+        loading={loading}\r\n         crossOrigin=\"anonymous\"\r\n     />\r\n );\r\n };\r\n"
                }
            ],
            "date": 1740771114638,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { supabase } from '@/lib/supabase';\r\nimport { Skeleton } from '@/components/ui/skeleton';\r\n\r\ninterface ImagePreviewProps {\r\nimageUrl: string;\r\nwidth?: number;\r\nheight?: number;\r\nclassName?: string;\r\npriority?: boolean;\r\nalt?: string;\r\n}\r\n\r\nexport const ImagePreview: React.FC<ImagePreviewProps> = ({\r\nimageUrl,\r\nwidth = 400,\r\nheight = 300,\r\nclassName = '',\r\npriority = false,\r\nalt = \"Preview\"\r\n}) => {\r\nconst [processedUrl, setProcessedUrl] = useState<string>('');\r\nconst [isLoading, setIsLoading] = useState(true);\r\n\r\nconst processImageWithCanvas = async (blob: Blob): Promise<Blob> => {\r\nconst img = new Image();\r\nconst canvas = document.createElement('canvas');\r\nconst ctx = canvas.getContext('2d');\r\n\r\nreturn new Promise((resolve) => {\r\n    img.onload = () => {\r\n    // Set canvas size maintaining aspect ratio\r\n    const aspectRatio = img.width / img.height;\r\n    canvas.width = width;\r\n    canvas.height = width / aspectRatio;\r\n\r\n    if (!ctx) return resolve(blob);\r\n\r\n    // Draw image\r\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n\r\n    // Apply image processing\r\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n    const data = imageData.data;\r\n\r\n    // Enhance image\r\n    for (let i = 0; i < data.length; i += 4) {\r\n        // Increase contrast\r\n        data[i] = data[i] * 1.2;     // Red\r\n        data[i + 1] = data[i + 1] * 1.2; // Green\r\n        data[i + 2] = data[i + 2] * 1.2; // Blue\r\n\r\n        // Detect and remove watermark (simple threshold-based approach)\r\n        const brightness = (data[i] + data[i + 1] + data[i + 2]) / 3;\r\n        if (brightness > 240) { // Assuming watermark is light colored\r\n        data[i] = data[i - 4] || data[i];\r\n        data[i + 1] = data[i - 3] || data[i + 1];\r\n        data[i + 2] = data[i - 2] || data[i + 2];\r\n        }\r\n    }\r\n\r\n    ctx.putImageData(imageData, 0, 0);\r\n\r\n    // Convert to WebP with compression\r\n    canvas.toBlob(\r\n        (processedBlob) => {\r\n        resolve(processedBlob || blob);\r\n        },\r\n        'image/webp',\r\n        0.8 // Compression quality (0-1)\r\n    );\r\n    };\r\n\r\n    img.src = URL.createObjectURL(blob);\r\n});\r\n};\r\n\r\n\r\nuseEffect(() => {\r\n    const processImage = async () => {\r\n    if (!imageUrl) {\r\n        setIsLoading(false);\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const response = await fetch('/api/process-image', {\r\n        method: 'POST',\r\n        headers: {\r\n\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            url: imageUrl,\r\n            options: {\r\n            width,\r\n            height,\r\n            quality: 0.8\r\n            }\r\n        })\r\n        });\r\n\r\n        if (!response.ok) {\r\n        throw new Error('Failed to process image');\r\n        }\r\n\r\n        const { processedUrl } = await response.json();\r\n        setProcessedUrl(processedUrl);\r\n\r\n    } catch (error) {\r\n        console.error('Error processing image:', error);\r\n        setProcessedUrl(imageUrl); // Fallback to original URL\r\n    } finally {\r\n        setIsLoading(false);\r\n    }\r\n    };\r\n\r\n    processImage();\r\n}, [imageUrl, width, height]);\r\n\r\nif (isLoading) {\r\n    return <Skeleton className={`w-[${width}px] h-[${height}px] ${className}`} />;\r\n}\r\n\r\nreturn (\r\n    <img\r\n    src={processedUrl || imageUrl}\r\n    alt={alt}\r\n    width={width}\r\n    height={height}\r\n    className={className}\r\n    loading={priority ? 'eager' : 'lazy'}\r\n    crossOrigin=\"anonymous\"\r\n    />\r\n);\r\n};\r\n\r\n\r\n// useEffect(() => {\r\n// const processImage = async () => {\r\n//     if (!imageUrl) {\r\n//     setIsLoading(false);\r\n//     return;\r\n//     }\r\n\r\n//     try {\r\n//     let imageBlob: Blob;\r\n\r\n//     if (imageUrl.startsWith('http')) {\r\n//         // For external URLs, use a proxy or direct fetch if CORS allows\r\n//         const response = await fetch(imageUrl, {\r\n//         mode: 'cors',\r\n//         credentials: 'same-origin'\r\n//         });\r\n//         imageBlob = await response.blob();\r\n//     } else {\r\n//         // Clean up the path - remove 'images/' prefix if it exists\r\n//         const cleanPath = imageUrl\r\n//         .replace(/^\\/+/, '') // Remove leading slashes\r\n//         .replace(/^images\\//, ''); // Remove 'images/' prefix if present\r\n\r\n//         // First try to get the signed URL\r\n//         const { data: signedURL, error: signError } = await supabase\r\n//         .storage\r\n//         .from('images')\r\n//         .createSignedUrl(cleanPath, 60); // 60 seconds expiry\r\n\r\n//         if (signError || !signedURL) {\r\n//         throw new Error('Failed to get signed URL');\r\n//         }\r\n\r\n//         const response = await fetch(signedURL.signedUrl, {\r\n//         mode: 'cors',\r\n//         credentials: 'same-origin'\r\n//         });\r\n        \r\n//         if (!response.ok) {\r\n//         throw new Error(`HTTP error! status: ${response.status}`);\r\n//         }\r\n        \r\n//         imageBlob = await response.blob();\r\n//     }\r\n\r\n//     // Process the image\r\n//     const processedBlob = await processImageWithCanvas(imageBlob);\r\n\r\n//     // Create temporary URL for display\r\n//     const tempUrl = URL.createObjectURL(processedBlob);\r\n//     setProcessedUrl(tempUrl);\r\n\r\n//     // Optional: Upload to Supabase in background\r\n//     const fileName = `processed_${Date.now()}.webp`;\r\n//     supabase.storage\r\n//         .from('processed-images')\r\n//         .upload(fileName, processedBlob, {\r\n//         contentType: 'image/webp',\r\n//         cacheControl: '3600',\r\n//         upsert: true\r\n//         })\r\n//         .then(({ error }) => {\r\n//         if (error) console.error('Background upload failed:', error);\r\n//         });\r\n\r\n//     } catch (error) {\r\n//     console.error('Error processing image:', error);\r\n//     // Use signed URL as fallback\r\n//     if (!imageUrl.startsWith('http')) {\r\n//         try {\r\n//         const cleanPath = imageUrl\r\n//             .replace(/^\\/+/, '')\r\n//             .replace(/^images\\//, '');\r\n            \r\n//         const { data: signedURL } = await supabase\r\n//             .storage\r\n//             .from('images')\r\n//             .createSignedUrl(cleanPath, 60);\r\n\r\n//         if (signedURL) {\r\n//             setProcessedUrl(signedURL.signedUrl);\r\n//         } else {\r\n//             setProcessedUrl(imageUrl);\r\n//         }\r\n//         } catch (fallbackError) {\r\n//         console.error('Fallback error:', fallbackError);\r\n//         setProcessedUrl(imageUrl);\r\n//         }\r\n//     } else {\r\n//         setProcessedUrl(imageUrl);\r\n//     }\r\n//     } finally {\r\n//     setIsLoading(false);\r\n//     }\r\n// };\r\n\r\n// processImage();\r\n\r\n// return () => {\r\n//     if (processedUrl && !processedUrl.startsWith('http')) {\r\n//     URL.revokeObjectURL(processedUrl);\r\n//     }\r\n// };\r\n// }, [imageUrl, width, height]);\r\n\r\n// if (isLoading) {\r\n// return <Skeleton className={`w-[${width}px] h-[${height}px] ${className}`} />;\r\n// }\r\n\r\n// return (\r\n// <img\r\n//     src={processedUrl || imageUrl}\r\n//     alt=\"Preview\"\r\n//     width={width}\r\n//     height={height}\r\n//     className={className}\r\n//     loading={priority ? 'eager' : 'lazy'}\r\n//     crossOrigin=\"anonymous\"\r\n// />\r\n// );\r\n// };"
        }
    ]
}