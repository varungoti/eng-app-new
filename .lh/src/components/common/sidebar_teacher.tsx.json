{
    "sourceFile": "src/components/common/sidebar_teacher.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1739299114367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739299417500,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,211 +1,177 @@\n-\"use client\";\r\n-\r\n-import React, { useState, useEffect } from 'react';\r\n-import { Link, useLocation } from \"react-router-dom\";\r\n-import { useTheme } from 'next-themes';\r\n-import { Sun, Moon, Lock, LucideIcon, ChevronDown } from \"lucide-react\";\r\n-import { Button } from '../ui/button';\r\n-import { cn } from '@/lib/utils';\r\n-import { ScrollArea } from \"@/components/ui/scroll-area\";\r\n-\r\n-interface SidebarItem {\r\n-  icon: LucideIcon;\r\n-  label: string;\r\n-  href: string;\r\n-  children?: SidebarItem[];\r\n-}\r\n-\r\n-interface SidebarProps {\r\n-  className?: string;\r\n-  sidebarItems: SidebarItem[];\r\n-}\r\n-\r\n-interface SidebarItemProps extends Omit<SidebarItem, 'children'> {\r\n-  isActive: boolean;\r\n-  isCollapsed: boolean;\r\n-  children?: SidebarItem[];\r\n-}\r\n-\r\n-const SidebarItem: React.FC<SidebarItemProps> = ({ \r\n-  icon: Icon, \r\n-  label, \r\n-  href, \r\n-  isActive,\r\n-  isCollapsed,\r\n-  children \r\n-}) => {\r\n-  const location = useLocation();\r\n-  const [isExpanded, setIsExpanded] = useState(false);\r\n-  const active = location.pathname.startsWith(href);\r\n-  const hasChildren = children && children.length > 0;\r\n-\r\n-  return (\r\n-    <div>\r\n-      <Link\r\n-        to={hasChildren ? '#' : href}\r\n-        onClick={(e) => {\r\n-          if (hasChildren) {\r\n-            e.preventDefault();\r\n-            setIsExpanded(!isExpanded);\r\n-          }\r\n-        }}\r\n-        className={cn(\r\n-          \"flex items-center px-2 py-2 rounded-md transition-colors\",\r\n-          \"hover:bg-accent hover:text-accent-foreground\",\r\n-          active && \"bg-primary/10 text-primary\",\r\n-          isCollapsed ? \"justify-center\" : \"justify-between\"\r\n-        )}\r\n-      >\r\n-        <div className=\"flex items-center\">\r\n-          <Icon className={cn(\r\n-            \"flex-shrink-0\",\r\n-            isCollapsed ? \"h-5 w-5\" : \"h-5 w-5 mr-3\"\r\n-          )} />\r\n-          {!isCollapsed && <span className=\"text-sm font-medium\">{label}</span>}\r\n-        </div>\r\n-        {!isCollapsed && hasChildren && (\r\n-          <ChevronDown\r\n-            className={cn(\r\n-              \"h-4 w-4 transition-transform\",\r\n-              isExpanded && \"transform rotate-180\"\r\n-            )}\r\n-          />\r\n-        )}\r\n-      </Link>\r\n-      \r\n-      {!isCollapsed && hasChildren && isExpanded && (\r\n-        <div className=\"ml-6 mt-1 space-y-1\">\r\n-          {children.map((child, index) => {\r\n-            const ChildIcon = child.icon;\r\n-            const childActive = location.pathname.startsWith(child.href);\r\n-            \r\n-            return (\r\n-              <Link\r\n-                key={index}\r\n-                to={child.href}\r\n-                className={cn(\r\n-                  \"flex items-center px-2 py-2 rounded-md transition-colors text-sm\",\r\n-                  \"hover:bg-accent hover:text-accent-foreground\",\r\n-                  childActive && \"bg-primary/10 text-primary\"\r\n-                )}\r\n-              >\r\n-                <ChildIcon className=\"h-4 w-4 mr-3\" />\r\n-                <span className=\"font-medium\">{child.label}</span>\r\n-              </Link>\r\n-            );\r\n-          })}\r\n-        </div>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default function Sidebar({ className = \"\", sidebarItems }: SidebarProps) {\r\n-  const { theme, setTheme } = useTheme();\r\n-  const location = useLocation();\r\n-  const [isCollapsed, setIsCollapsed] = useState(false);\r\n-  const [isLocked, setIsLocked] = useState(true);\r\n-\r\n-  // Persist locked state in localStorage\r\n-  useEffect(() => {\r\n-    const savedLockState = localStorage.getItem('sidebarLocked');\r\n-    if (savedLockState !== null) {\r\n-      setIsLocked(JSON.parse(savedLockState));\r\n-    }\r\n-  }, []);\r\n-\r\n-  const toggleLock = () => {\r\n-    const newLockState = !isLocked;\r\n-    setIsLocked(newLockState);\r\n-    localStorage.setItem('sidebarLocked', JSON.stringify(newLockState));\r\n-  };\r\n-\r\n-  const toggleCollapse = () => {\r\n-    if (!isLocked) {\r\n-      setIsCollapsed(!isCollapsed);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <aside \r\n-      className={cn(\r\n-        \"flex flex-col h-full transition-all duration-300 bg-background border-r\",\r\n-        isCollapsed ? 'w-16' : 'w-72',\r\n-        className\r\n-      )}\r\n-      aria-label=\"Sidebar\"\r\n-    >\r\n-      {/* Header with Lock/Unlock */}\r\n-      <div className=\"flex items-center justify-between p-4 border-b\">\r\n-        {!isCollapsed && (\r\n-          <h1 className=\"text-2xl font-bold text-primary\">\r\n-            <span className=\"text-[#3C4DFF]\">Eng</span>Engspiration\r\n-          </h1>\r\n-        )}\r\n-        <div className=\"flex items-center gap-2\">\r\n-          <Button\r\n-            variant=\"ghost\"\r\n-            size=\"icon\"\r\n-            onClick={toggleLock}\r\n-            aria-label={isLocked ? \"Unlock sidebar\" : \"Lock sidebar\"}\r\n-            className=\"hover:bg-accent\"\r\n-          >\r\n-            <Lock className={cn(\r\n-              \"h-4 w-4 transition-colors\",\r\n-              isLocked ? \"text-primary\" : \"text-muted-foreground\"\r\n-            )} />\r\n-          </Button>\r\n-          {!isLocked && (\r\n-            <Button\r\n-              variant=\"ghost\"\r\n-              size=\"icon\"\r\n-              onClick={toggleCollapse}\r\n-              aria-label={isCollapsed ? \"Expand sidebar\" : \"Collapse sidebar\"}\r\n-              className=\"hover:bg-accent\"\r\n-            >\r\n-              {isCollapsed ? '→' : '←'}\r\n-            </Button>\r\n-          )}\r\n-        </div>\r\n-      </div>\r\n-\r\n-      {/* Navigation */}\r\n-      <nav className=\"flex-1 overflow-y-auto p-2 space-y-1\">\r\n-        <ScrollArea className=\"h-[calc(100vh-10rem)]\">\r\n-          <div className=\"space-y-1\">\r\n-            {sidebarItems.map((item, index) => (\r\n-              <SidebarItem\r\n-                key={index}\r\n-                {...item}\r\n-                isActive={location.pathname === item.href}\r\n-                isCollapsed={isCollapsed}\r\n-              />\r\n-            ))}\r\n-          </div>\r\n-        </ScrollArea>\r\n-      </nav>\r\n-\r\n-      {/* Footer */}\r\n-      <div className=\"p-4 border-t\">\r\n-        <Button\r\n-          variant=\"ghost\"\r\n-          onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}\r\n-          className=\"w-full justify-start\"\r\n-          aria-label={theme === 'dark' ? \"Switch to light mode\" : \"Switch to dark mode\"}\r\n-        >\r\n-          {theme === 'dark' ? (\r\n-            <>\r\n-              <Sun className=\"h-4 w-4 mr-2\" />\r\n-              {!isCollapsed && <span>Light Mode</span>}\r\n-            </>\r\n-          ) : (\r\n-            <>\r\n-              <Moon className=\"h-4 w-4 mr-2\" />\r\n-              {!isCollapsed && <span>Dark Mode</span>}\r\n-            </>\r\n-          )}\r\n-        </Button>\r\n-      </div>\r\n-    </aside>\r\n-  );\r\n-}\r\n+\"use client\";\n+\n+import React, { useState, useEffect } from 'react';\n+import { Link, useLocation } from \"react-router-dom\";\n+import { useTheme } from 'next-themes';\n+import { Sun, Moon, Lock, LucideIcon } from \"lucide-react\";\n+import { Button } from '../ui/button';\n+import { cn } from '@/lib/utils';\n+import { ScrollArea } from \"@/components/ui/scroll-area\";\n+\n+interface SidebarItem {\n+  icon: LucideIcon;\n+  label: string;\n+  href: string;\n+}\n+\n+interface SidebarProps {\n+  className?: string;\n+  sidebarItems: SidebarItem[];\n+}\n+\n+interface SidebarItemProps extends SidebarItem {\n+  isActive: boolean;\n+  isCollapsed: boolean;\n+}\n+\n+const SidebarItem: React.FC<SidebarItemProps> = ({ \n+  icon: Icon, \n+  label, \n+  href, \n+  isActive,\n+  isCollapsed \n+}) => {\n+  const location = useLocation();\n+  const active = location.pathname.startsWith(href);\n+\n+  return (\n+    <Link\n+      to={href}\n+      className={cn(\n+        \"flex items-center px-2 py-2 rounded-md transition-colors\",\n+        \"hover:bg-accent hover:text-accent-foreground\",\n+        active && \"bg-primary/10 text-primary\",\n+        isCollapsed ? \"justify-center\" : \"justify-start\"\n+      )}\n+    >\n+      <Icon className={cn(\n+        \"flex-shrink-0\",\n+        isCollapsed ? \"h-5 w-5\" : \"h-5 w-5 mr-3\"\n+      )} />\n+      {!isCollapsed && <span className=\"text-sm font-medium\">{label}</span>}\n+    </Link>\n+  );\n+};\n+\n+export default function Sidebar({ className = \"\", sidebarItems }: SidebarProps) {\n+  const { theme, setTheme } = useTheme();\n+  const location = useLocation();\n+  const [isCollapsed, setIsCollapsed] = useState(false);\n+  const [isLocked, setIsLocked] = useState(true);\n+\n+  // Persist locked state in localStorage\n+  useEffect(() => {\n+    const savedLockState = localStorage.getItem('sidebarLocked');\n+    if (savedLockState !== null) {\n+      setIsLocked(JSON.parse(savedLockState));\n+    }\n+  }, []);\n+\n+  const toggleLock = () => {\n+    const newLockState = !isLocked;\n+    setIsLocked(newLockState);\n+    localStorage.setItem('sidebarLocked', JSON.stringify(newLockState));\n+  };\n+\n+  const toggleCollapse = () => {\n+    if (!isLocked) {\n+      setIsCollapsed(!isCollapsed);\n+    }\n+  };\n+\n+  return (\n+    <aside \n+      className={cn(\n+        \"flex flex-col h-full transition-all duration-300 bg-background border-r\",\n+        isCollapsed ? 'w-16' : 'w-72',\n+        className\n+      )}\n+      aria-label=\"Sidebar\"\n+    >\n+      {/* Header with Lock/Unlock */}\n+      <div className=\"flex items-center justify-between p-4 border-b\">\n+        {!isCollapsed && (\n+          <h1 className=\"text-2xl font-bold text-primary\">\n+            <span className=\"text-[#3C4DFF]\">Eng</span>Engspiration\n+          </h1>\n+        )}\n+        <div className=\"flex items-center gap-2\">\n+          <Button\n+            variant=\"ghost\"\n+            size=\"icon\"\n+            onClick={toggleLock}\n+            aria-label={isLocked ? \"Unlock sidebar\" : \"Lock sidebar\"}\n+            className=\"hover:bg-accent\"\n+          >\n+            <Lock className={cn(\n+              \"h-4 w-4 transition-colors\",\n+              isLocked ? \"text-primary\" : \"text-muted-foreground\"\n+            )} />\n+          </Button>\n+          {!isLocked && (\n+            <Button\n+              variant=\"ghost\"\n+              size=\"icon\"\n+              onClick={toggleCollapse}\n+              aria-label={isCollapsed ? \"Expand sidebar\" : \"Collapse sidebar\"}\n+              className=\"hover:bg-accent\"\n+            >\n+              {isCollapsed ? '→' : '←'}\n+            </Button>\n+          )}\n+        </div>\n+      </div>\n+\n+      {/* Navigation */}\n+      <nav className=\"flex-1 overflow-y-auto p-2 space-y-1\">\n+        <ScrollArea className=\"h-[calc(100vh-10rem)]\">\n+          <div className=\"space-y-1\">\n+            {sidebarItems.map((item, index) => {\n+              const Icon = item.icon;\n+              return (\n+                <Link\n+                  key={index}\n+                  to={item.href}\n+                  className=\"w-full\"\n+                >\n+                  <Button\n+                    variant={location.pathname === item.href ? \"secondary\" : \"ghost\"}\n+                    className={cn(\n+                      \"w-full justify-start gap-2\",\n+                      location.pathname === item.href && \"bg-primary/10\"\n+                    )}\n+                  >\n+                    <Icon className=\"h-4 w-4\" />\n+                    {item.label}\n+                  </Button>\n+                </Link>\n+              );\n+            })}\n+          </div>\n+        </ScrollArea>\n+      </nav>\n+\n+      {/* Footer */}\n+      <div className=\"p-4 border-t\">\n+        <Button\n+          variant=\"ghost\"\n+          onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}\n+          className=\"w-full justify-start\"\n+          aria-label={theme === 'dark' ? \"Switch to light mode\" : \"Switch to dark mode\"}\n+        >\n+          {theme === 'dark' ? (\n+            <>\n+              <Sun className=\"h-4 w-4 mr-2\" />\n+              {!isCollapsed && <span>Light Mode</span>}\n+            </>\n+          ) : (\n+            <>\n+              <Moon className=\"h-4 w-4 mr-2\" />\n+              {!isCollapsed && <span>Dark Mode</span>}\n+            </>\n+          )}\n+        </Button>\n+      </div>\n+    </aside>\n+  );\n+}\n"
                },
                {
                    "date": 1739304057156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,17 +2,18 @@\n \n import React, { useState, useEffect } from 'react';\n import { Link, useLocation } from \"react-router-dom\";\n import { useTheme } from 'next-themes';\n-import { Sun, Moon, Lock, LucideIcon } from \"lucide-react\";\n+import { Sun, Moon, Lock, LucideIcon, ChevronDown } from \"lucide-react\";\n import { Button } from '../ui/button';\n import { cn } from '@/lib/utils';\n import { ScrollArea } from \"@/components/ui/scroll-area\";\n \n interface SidebarItem {\n   icon: LucideIcon;\n   label: string;\n   href: string;\n+  children?: SidebarItem[];\n }\n \n interface SidebarProps {\n   className?: string;\n@@ -28,29 +29,64 @@\n   icon: Icon, \n   label, \n   href, \n   isActive,\n-  isCollapsed \n+  isCollapsed,\n+  children \n }) => {\n   const location = useLocation();\n   const active = location.pathname.startsWith(href);\n+  const [isOpen, setIsOpen] = useState(false);\n \n   return (\n-    <Link\n-      to={href}\n-      className={cn(\n-        \"flex items-center px-2 py-2 rounded-md transition-colors\",\n-        \"hover:bg-accent hover:text-accent-foreground\",\n-        active && \"bg-primary/10 text-primary\",\n-        isCollapsed ? \"justify-center\" : \"justify-start\"\n+    <div>\n+      <Link\n+        to={href}\n+        className={cn(\n+          \"flex items-center px-2 py-2 rounded-md transition-colors\",\n+          \"hover:bg-accent hover:text-accent-foreground\",\n+          active && \"bg-primary/10 text-primary\",\n+          isCollapsed ? \"justify-center\" : \"justify-start\"\n+        )}\n+        onClick={(e) => {\n+          if (children && children.length > 0) {\n+            e.preventDefault();\n+            setIsOpen(!isOpen);\n+          }\n+        }}\n+      >\n+        <Icon className={cn(\n+          \"flex-shrink-0\",\n+          isCollapsed ? \"h-5 w-5\" : \"h-5 w-5 mr-3\"\n+        )} />\n+        {!isCollapsed && (\n+          <>\n+            <span className=\"text-sm font-medium flex-1\">{label}</span>\n+            {children && children.length > 0 && (\n+              <ChevronDown \n+                className={cn(\n+                  \"h-4 w-4 transition-transform\",\n+                  isOpen && \"transform rotate-180\"\n+                )} \n+              />\n+            )}\n+          </>\n+        )}\n+      </Link>\n+      \n+      {!isCollapsed && isOpen && children && children.length > 0 && (\n+        <div className=\"ml-6 mt-1 space-y-1\">\n+          {children.map((child, index) => (\n+            <SidebarItem\n+              key={`${child.href}-${index}`}\n+              {...child}\n+              isActive={location.pathname.startsWith(child.href)}\n+              isCollapsed={isCollapsed}\n+            />\n+          ))}\n+        </div>\n       )}\n-    >\n-      <Icon className={cn(\n-        \"flex-shrink-0\",\n-        isCollapsed ? \"h-5 w-5\" : \"h-5 w-5 mr-3\"\n-      )} />\n-      {!isCollapsed && <span className=\"text-sm font-medium\">{label}</span>}\n-    </Link>\n+    </div>\n   );\n };\n \n export default function Sidebar({ className = \"\", sidebarItems }: SidebarProps) {\n@@ -125,29 +161,16 @@\n       {/* Navigation */}\n       <nav className=\"flex-1 overflow-y-auto p-2 space-y-1\">\n         <ScrollArea className=\"h-[calc(100vh-10rem)]\">\n           <div className=\"space-y-1\">\n-            {sidebarItems.map((item, index) => {\n-              const Icon = item.icon;\n-              return (\n-                <Link\n-                  key={index}\n-                  to={item.href}\n-                  className=\"w-full\"\n-                >\n-                  <Button\n-                    variant={location.pathname === item.href ? \"secondary\" : \"ghost\"}\n-                    className={cn(\n-                      \"w-full justify-start gap-2\",\n-                      location.pathname === item.href && \"bg-primary/10\"\n-                    )}\n-                  >\n-                    <Icon className=\"h-4 w-4\" />\n-                    {item.label}\n-                  </Button>\n-                </Link>\n-              );\n-            })}\n+            {sidebarItems.map((item, index) => (\n+              <SidebarItem\n+                key={`${item.href}-${index}`}\n+                {...item}\n+                isActive={location.pathname.startsWith(item.href)}\n+                isCollapsed={isCollapsed}\n+              />\n+            ))}\n           </div>\n         </ScrollArea>\n       </nav>\n \n"
                },
                {
                    "date": 1739304111159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,18 +2,17 @@\n \n import React, { useState, useEffect } from 'react';\n import { Link, useLocation } from \"react-router-dom\";\n import { useTheme } from 'next-themes';\n-import { Sun, Moon, Lock, LucideIcon, ChevronDown } from \"lucide-react\";\n+import { Sun, Moon, Lock, LucideIcon } from \"lucide-react\";\n import { Button } from '../ui/button';\n import { cn } from '@/lib/utils';\n import { ScrollArea } from \"@/components/ui/scroll-area\";\n \n interface SidebarItem {\n   icon: LucideIcon;\n   label: string;\n   href: string;\n-  children?: SidebarItem[];\n }\n \n interface SidebarProps {\n   className?: string;\n@@ -29,64 +28,29 @@\n   icon: Icon, \n   label, \n   href, \n   isActive,\n-  isCollapsed,\n-  children \n+  isCollapsed \n }) => {\n   const location = useLocation();\n   const active = location.pathname.startsWith(href);\n-  const [isOpen, setIsOpen] = useState(false);\n \n   return (\n-    <div>\n-      <Link\n-        to={href}\n-        className={cn(\n-          \"flex items-center px-2 py-2 rounded-md transition-colors\",\n-          \"hover:bg-accent hover:text-accent-foreground\",\n-          active && \"bg-primary/10 text-primary\",\n-          isCollapsed ? \"justify-center\" : \"justify-start\"\n-        )}\n-        onClick={(e) => {\n-          if (children && children.length > 0) {\n-            e.preventDefault();\n-            setIsOpen(!isOpen);\n-          }\n-        }}\n-      >\n-        <Icon className={cn(\n-          \"flex-shrink-0\",\n-          isCollapsed ? \"h-5 w-5\" : \"h-5 w-5 mr-3\"\n-        )} />\n-        {!isCollapsed && (\n-          <>\n-            <span className=\"text-sm font-medium flex-1\">{label}</span>\n-            {children && children.length > 0 && (\n-              <ChevronDown \n-                className={cn(\n-                  \"h-4 w-4 transition-transform\",\n-                  isOpen && \"transform rotate-180\"\n-                )} \n-              />\n-            )}\n-          </>\n-        )}\n-      </Link>\n-      \n-      {!isCollapsed && isOpen && children && children.length > 0 && (\n-        <div className=\"ml-6 mt-1 space-y-1\">\n-          {children.map((child, index) => (\n-            <SidebarItem\n-              key={`${child.href}-${index}`}\n-              {...child}\n-              isActive={location.pathname.startsWith(child.href)}\n-              isCollapsed={isCollapsed}\n-            />\n-          ))}\n-        </div>\n+    <Link\n+      to={href}\n+      className={cn(\n+        \"flex items-center px-2 py-2 rounded-md transition-colors\",\n+        \"hover:bg-accent hover:text-accent-foreground\",\n+        active && \"bg-primary/10 text-primary\",\n+        isCollapsed ? \"justify-center\" : \"justify-start\"\n       )}\n-    </div>\n+    >\n+      <Icon className={cn(\n+        \"flex-shrink-0\",\n+        isCollapsed ? \"h-5 w-5\" : \"h-5 w-5 mr-3\"\n+      )} />\n+      {!isCollapsed && <span className=\"text-sm font-medium\">{label}</span>}\n+    </Link>\n   );\n };\n \n export default function Sidebar({ className = \"\", sidebarItems }: SidebarProps) {\n@@ -161,16 +125,29 @@\n       {/* Navigation */}\n       <nav className=\"flex-1 overflow-y-auto p-2 space-y-1\">\n         <ScrollArea className=\"h-[calc(100vh-10rem)]\">\n           <div className=\"space-y-1\">\n-            {sidebarItems.map((item, index) => (\n-              <SidebarItem\n-                key={`${item.href}-${index}`}\n-                {...item}\n-                isActive={location.pathname.startsWith(item.href)}\n-                isCollapsed={isCollapsed}\n-              />\n-            ))}\n+            {sidebarItems.map((item, index) => {\n+              const Icon = item.icon;\n+              return (\n+                <Link\n+                  key={index}\n+                  to={item.href}\n+                  className=\"w-full\"\n+                >\n+                  <Button\n+                    variant={location.pathname === item.href ? \"secondary\" : \"ghost\"}\n+                    className={cn(\n+                      \"w-full justify-start gap-2\",\n+                      location.pathname === item.href && \"bg-primary/10\"\n+                    )}\n+                  >\n+                    <Icon className=\"h-4 w-4\" />\n+                    {item.label}\n+                  </Button>\n+                </Link>\n+              );\n+            })}\n           </div>\n         </ScrollArea>\n       </nav>\n \n"
                }
            ],
            "date": 1739299114367,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport { useTheme } from 'next-themes';\r\nimport { Sun, Moon, Lock, LucideIcon, ChevronDown } from \"lucide-react\";\r\nimport { Button } from '../ui/button';\r\nimport { cn } from '@/lib/utils';\r\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\r\n\r\ninterface SidebarItem {\r\n  icon: LucideIcon;\r\n  label: string;\r\n  href: string;\r\n  children?: SidebarItem[];\r\n}\r\n\r\ninterface SidebarProps {\r\n  className?: string;\r\n  sidebarItems: SidebarItem[];\r\n}\r\n\r\ninterface SidebarItemProps extends Omit<SidebarItem, 'children'> {\r\n  isActive: boolean;\r\n  isCollapsed: boolean;\r\n  children?: SidebarItem[];\r\n}\r\n\r\nconst SidebarItem: React.FC<SidebarItemProps> = ({ \r\n  icon: Icon, \r\n  label, \r\n  href, \r\n  isActive,\r\n  isCollapsed,\r\n  children \r\n}) => {\r\n  const location = useLocation();\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n  const active = location.pathname.startsWith(href);\r\n  const hasChildren = children && children.length > 0;\r\n\r\n  return (\r\n    <div>\r\n      <Link\r\n        to={hasChildren ? '#' : href}\r\n        onClick={(e) => {\r\n          if (hasChildren) {\r\n            e.preventDefault();\r\n            setIsExpanded(!isExpanded);\r\n          }\r\n        }}\r\n        className={cn(\r\n          \"flex items-center px-2 py-2 rounded-md transition-colors\",\r\n          \"hover:bg-accent hover:text-accent-foreground\",\r\n          active && \"bg-primary/10 text-primary\",\r\n          isCollapsed ? \"justify-center\" : \"justify-between\"\r\n        )}\r\n      >\r\n        <div className=\"flex items-center\">\r\n          <Icon className={cn(\r\n            \"flex-shrink-0\",\r\n            isCollapsed ? \"h-5 w-5\" : \"h-5 w-5 mr-3\"\r\n          )} />\r\n          {!isCollapsed && <span className=\"text-sm font-medium\">{label}</span>}\r\n        </div>\r\n        {!isCollapsed && hasChildren && (\r\n          <ChevronDown\r\n            className={cn(\r\n              \"h-4 w-4 transition-transform\",\r\n              isExpanded && \"transform rotate-180\"\r\n            )}\r\n          />\r\n        )}\r\n      </Link>\r\n      \r\n      {!isCollapsed && hasChildren && isExpanded && (\r\n        <div className=\"ml-6 mt-1 space-y-1\">\r\n          {children.map((child, index) => {\r\n            const ChildIcon = child.icon;\r\n            const childActive = location.pathname.startsWith(child.href);\r\n            \r\n            return (\r\n              <Link\r\n                key={index}\r\n                to={child.href}\r\n                className={cn(\r\n                  \"flex items-center px-2 py-2 rounded-md transition-colors text-sm\",\r\n                  \"hover:bg-accent hover:text-accent-foreground\",\r\n                  childActive && \"bg-primary/10 text-primary\"\r\n                )}\r\n              >\r\n                <ChildIcon className=\"h-4 w-4 mr-3\" />\r\n                <span className=\"font-medium\">{child.label}</span>\r\n              </Link>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default function Sidebar({ className = \"\", sidebarItems }: SidebarProps) {\r\n  const { theme, setTheme } = useTheme();\r\n  const location = useLocation();\r\n  const [isCollapsed, setIsCollapsed] = useState(false);\r\n  const [isLocked, setIsLocked] = useState(true);\r\n\r\n  // Persist locked state in localStorage\r\n  useEffect(() => {\r\n    const savedLockState = localStorage.getItem('sidebarLocked');\r\n    if (savedLockState !== null) {\r\n      setIsLocked(JSON.parse(savedLockState));\r\n    }\r\n  }, []);\r\n\r\n  const toggleLock = () => {\r\n    const newLockState = !isLocked;\r\n    setIsLocked(newLockState);\r\n    localStorage.setItem('sidebarLocked', JSON.stringify(newLockState));\r\n  };\r\n\r\n  const toggleCollapse = () => {\r\n    if (!isLocked) {\r\n      setIsCollapsed(!isCollapsed);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <aside \r\n      className={cn(\r\n        \"flex flex-col h-full transition-all duration-300 bg-background border-r\",\r\n        isCollapsed ? 'w-16' : 'w-72',\r\n        className\r\n      )}\r\n      aria-label=\"Sidebar\"\r\n    >\r\n      {/* Header with Lock/Unlock */}\r\n      <div className=\"flex items-center justify-between p-4 border-b\">\r\n        {!isCollapsed && (\r\n          <h1 className=\"text-2xl font-bold text-primary\">\r\n            <span className=\"text-[#3C4DFF]\">Eng</span>Engspiration\r\n          </h1>\r\n        )}\r\n        <div className=\"flex items-center gap-2\">\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"icon\"\r\n            onClick={toggleLock}\r\n            aria-label={isLocked ? \"Unlock sidebar\" : \"Lock sidebar\"}\r\n            className=\"hover:bg-accent\"\r\n          >\r\n            <Lock className={cn(\r\n              \"h-4 w-4 transition-colors\",\r\n              isLocked ? \"text-primary\" : \"text-muted-foreground\"\r\n            )} />\r\n          </Button>\r\n          {!isLocked && (\r\n            <Button\r\n              variant=\"ghost\"\r\n              size=\"icon\"\r\n              onClick={toggleCollapse}\r\n              aria-label={isCollapsed ? \"Expand sidebar\" : \"Collapse sidebar\"}\r\n              className=\"hover:bg-accent\"\r\n            >\r\n              {isCollapsed ? '→' : '←'}\r\n            </Button>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Navigation */}\r\n      <nav className=\"flex-1 overflow-y-auto p-2 space-y-1\">\r\n        <ScrollArea className=\"h-[calc(100vh-10rem)]\">\r\n          <div className=\"space-y-1\">\r\n            {sidebarItems.map((item, index) => (\r\n              <SidebarItem\r\n                key={index}\r\n                {...item}\r\n                isActive={location.pathname === item.href}\r\n                isCollapsed={isCollapsed}\r\n              />\r\n            ))}\r\n          </div>\r\n        </ScrollArea>\r\n      </nav>\r\n\r\n      {/* Footer */}\r\n      <div className=\"p-4 border-t\">\r\n        <Button\r\n          variant=\"ghost\"\r\n          onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}\r\n          className=\"w-full justify-start\"\r\n          aria-label={theme === 'dark' ? \"Switch to light mode\" : \"Switch to dark mode\"}\r\n        >\r\n          {theme === 'dark' ? (\r\n            <>\r\n              <Sun className=\"h-4 w-4 mr-2\" />\r\n              {!isCollapsed && <span>Light Mode</span>}\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Moon className=\"h-4 w-4 mr-2\" />\r\n              {!isCollapsed && <span>Dark Mode</span>}\r\n            </>\r\n          )}\r\n        </Button>\r\n      </div>\r\n    </aside>\r\n  );\r\n}\r\n"
        }
    ]
}