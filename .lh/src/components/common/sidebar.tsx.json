{
    "sourceFile": "src/components/common/sidebar.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1739299962534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739299982624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,8 +141,9 @@\n                 href={item.href}\r\n                 isActive={currentPath === item.href}\r\n                 isCollapsed={isCollapsed}\r\n                 children={item.children}\r\n+                currentPath={currentPath}\r\n               />\r\n             ))}\r\n           </nav>\r\n         </div>\r\n@@ -180,16 +181,18 @@\n   label, \r\n   href, \r\n   isActive, \r\n   isCollapsed,\r\n-  children \r\n+  children,\r\n+  currentPath \r\n }: { \r\n   icon: LucideIcon;\r\n   label: string; \r\n   href: string; \r\n   isActive: boolean;\r\n   isCollapsed: boolean;\r\n   children?: SidebarItem[];\r\n+  currentPath: string;\r\n }) {\r\n   const { logError } = useComponentLogger('SidebarItem');\r\n   const IconComponent = icon || FileText;\r\n   const [isOpen, setIsOpen] = useState(false);\r\n@@ -205,9 +208,9 @@\n             isActive && \"bg-primary/10 text-primary\",\r\n             isCollapsed ? \"justify-center\" : \"justify-start\"\r\n           )}\r\n           onClick={(e) => {\r\n-            if (children?.length) {\r\n+            if (children && children.length > 0) {\r\n               e.preventDefault();\r\n               setIsOpen(!isOpen);\r\n             }\r\n           }}\r\n@@ -220,9 +223,9 @@\n           />\r\n           {!isCollapsed && (\r\n             <>\r\n               <span className=\"text-sm flex-1\">{label}</span>\r\n-              {children?.length > 0 && (\r\n+              {children && children.length > 0 && (\r\n                 <ChevronDown \r\n                   className={cn(\r\n                     \"h-4 w-4 transition-transform\",\r\n                     isOpen && \"transform rotate-180\"\r\n@@ -232,18 +235,17 @@\n             </>\r\n           )}\r\n         </Link>\r\n         \r\n-        {!isCollapsed && isOpen && children?.length > 0 && (\r\n+        {!isCollapsed && isOpen && children && children.length > 0 && (\r\n           <div className=\"ml-4 mt-1 space-y-1\">\r\n             {children.map((child, index) => (\r\n               <SidebarItem\r\n                 key={`${child.href}-${index}`}\r\n-                icon={child.icon}\r\n-                label={child.label}\r\n-                href={child.href}\r\n+                {...child}\r\n+                isCollapsed={isCollapsed}\r\n                 isActive={currentPath === child.href}\r\n-                isCollapsed={isCollapsed}\r\n+                currentPath={currentPath}\r\n               />\r\n             ))}\r\n           </div>\r\n         )}\r\n"
                },
                {
                    "date": 1739349221353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n \"use client\";\r\n \r\n-import { useState, useEffect } from 'react';\r\n+import { useState, useEffect, useCallback, memo } from 'react';\r\n import Link from \"next/link\";\r\n import { useTheme } from 'next-themes';\r\n import { Button } from '../ui/button';\r\n import { cn } from '@/lib/utils';\r\n@@ -22,44 +22,131 @@\n   currentPath: string;\r\n   sidebarItems: SidebarItem[];\r\n }\r\n \r\n+// Memoized SidebarItem component\r\n+const SidebarItem = memo(({ \r\n+  icon, \r\n+  label, \r\n+  href, \r\n+  isActive, \r\n+  isCollapsed,\r\n+  children,\r\n+  currentPath \r\n+}: { \r\n+  icon: LucideIcon;\r\n+  label: string; \r\n+  href: string; \r\n+  isActive: boolean;\r\n+  isCollapsed: boolean;\r\n+  children?: SidebarItem[];\r\n+  currentPath: string;\r\n+}) => {\r\n+  const { logError } = useComponentLogger('SidebarItem');\r\n+  const IconComponent = icon || FileText;\r\n+  const [isOpen, setIsOpen] = useState(false);\r\n+\r\n+  const handleClick = useCallback((e: React.MouseEvent) => {\r\n+    if (children && children.length > 0) {\r\n+      e.preventDefault();\r\n+      setIsOpen(!isOpen);\r\n+    }\r\n+  }, [children, isOpen]);\r\n+\r\n+  try {\r\n+    return (\r\n+      <div>\r\n+        <Link\r\n+          href={href}\r\n+          className={cn(\r\n+            \"flex items-center px-2 py-2 rounded-md transition-colors\",\r\n+            \"hover:bg-accent hover:text-accent-foreground\",\r\n+            isActive && \"bg-primary/10 text-primary\",\r\n+            isCollapsed ? \"justify-center\" : \"justify-start\"\r\n+          )}\r\n+          onClick={handleClick}\r\n+        >\r\n+          <IconComponent \r\n+            className={cn(\r\n+              \"flex-shrink-0\",\r\n+              isCollapsed ? \"h-5 w-5\" : \"h-5 w-5 mr-3\"\r\n+            )} \r\n+          />\r\n+          {!isCollapsed && (\r\n+            <>\r\n+              <span className=\"text-sm flex-1\">{label}</span>\r\n+              {children && children.length > 0 && (\r\n+                <ChevronDown \r\n+                  className={cn(\r\n+                    \"h-4 w-4 transition-transform\",\r\n+                    isOpen && \"transform rotate-180\"\r\n+                  )} \r\n+                />\r\n+              )}\r\n+            </>\r\n+          )}\r\n+        </Link>\r\n+        \r\n+        {!isCollapsed && isOpen && children && children.length > 0 && (\r\n+          <div className=\"ml-4 mt-1 space-y-1\">\r\n+            {children.map((child, index) => (\r\n+              <SidebarItem\r\n+                key={`${child.href}-${index}`}\r\n+                {...child}\r\n+                isCollapsed={isCollapsed}\r\n+                isActive={currentPath === child.href}\r\n+                currentPath={currentPath}\r\n+              />\r\n+            ))}\r\n+          </div>\r\n+        )}\r\n+      </div>\r\n+    );\r\n+  } catch (error) {\r\n+    logError(error);\r\n+    return null;\r\n+  }\r\n+});\r\n+\r\n+SidebarItem.displayName = 'SidebarItem';\r\n+\r\n export default function Sidebar({ className = \"\", sidebarItems, currentPath }: SidebarProps) {\r\n   const { logError } = useComponentLogger('Sidebar');\r\n   const { theme, setTheme } = useTheme();\r\n   const [isCollapsed, setIsCollapsed] = useState(false);\r\n   const [isLocked, setIsLocked] = useState(true);\r\n   const pathname = usePathname();\r\n \r\n-  try {\r\n-    // Persist locked state in localStorage\r\n-    useEffect(() => {\r\n-      try {\r\n-        const savedLockState = localStorage.getItem('sidebarLocked');\r\n-        if (savedLockState !== null) {\r\n-          setIsLocked(JSON.parse(savedLockState));\r\n-        }\r\n-      } catch (error) {\r\n-        logError(error);\r\n-      }\r\n-    }, [logError]);\r\n+  // Memoize handlers\r\n+  const toggleLock = useCallback(() => {\r\n+    try {\r\n+      const newLockState = !isLocked;\r\n+      setIsLocked(newLockState);\r\n+      localStorage.setItem('sidebarLocked', JSON.stringify(newLockState));\r\n+    } catch (error) {\r\n+      logError(error);\r\n+    }\r\n+  }, [isLocked, logError]);\r\n \r\n-    const toggleLock = () => {\r\n-      try {\r\n-        const newLockState = !isLocked;\r\n-        setIsLocked(newLockState);\r\n-        localStorage.setItem('sidebarLocked', JSON.stringify(newLockState));\r\n-      } catch (error) {\r\n-        logError(error);\r\n-      }\r\n-    };\r\n+  const toggleCollapse = useCallback(() => {\r\n+    if (!isLocked) {\r\n+      setIsCollapsed(!isCollapsed);\r\n+    }\r\n+  }, [isLocked, isCollapsed]);\r\n \r\n-    const toggleCollapse = () => {\r\n-      if (!isLocked) {\r\n-        setIsCollapsed(!isCollapsed);\r\n+  // Load locked state once on mount\r\n+  useEffect(() => {\r\n+    try {\r\n+      const savedLockState = localStorage.getItem('sidebarLocked');\r\n+      if (savedLockState !== null) {\r\n+        setIsLocked(JSON.parse(savedLockState));\r\n       }\r\n-    };\r\n+    } catch (error) {\r\n+      logError(error);\r\n+    }\r\n+  }, [logError]);\r\n \r\n+  try {\r\n     // Debug log the sidebar items\r\n     console.log('Sidebar Items:', {\r\n       count: sidebarItems.length,\r\n       items: sidebarItems.map(item => ({\r\n@@ -173,86 +260,5 @@\n   } catch (error) {\r\n     logError(error);\r\n     return <div>Error loading sidebar</div>;\r\n   }\r\n-}\r\n-\r\n-function SidebarItem({ \r\n-  icon, \r\n-  label, \r\n-  href, \r\n-  isActive, \r\n-  isCollapsed,\r\n-  children,\r\n-  currentPath \r\n-}: { \r\n-  icon: LucideIcon;\r\n-  label: string; \r\n-  href: string; \r\n-  isActive: boolean;\r\n-  isCollapsed: boolean;\r\n-  children?: SidebarItem[];\r\n-  currentPath: string;\r\n-}) {\r\n-  const { logError } = useComponentLogger('SidebarItem');\r\n-  const IconComponent = icon || FileText;\r\n-  const [isOpen, setIsOpen] = useState(false);\r\n-\r\n-  try {\r\n-    return (\r\n-      <div>\r\n-        <Link\r\n-          href={href}\r\n-          className={cn(\r\n-            \"flex items-center px-2 py-2 rounded-md transition-colors\",\r\n-            \"hover:bg-accent hover:text-accent-foreground\",\r\n-            isActive && \"bg-primary/10 text-primary\",\r\n-            isCollapsed ? \"justify-center\" : \"justify-start\"\r\n-          )}\r\n-          onClick={(e) => {\r\n-            if (children && children.length > 0) {\r\n-              e.preventDefault();\r\n-              setIsOpen(!isOpen);\r\n-            }\r\n-          }}\r\n-        >\r\n-          <IconComponent \r\n-            className={cn(\r\n-              \"flex-shrink-0\",\r\n-              isCollapsed ? \"h-5 w-5\" : \"h-5 w-5 mr-3\"\r\n-            )} \r\n-          />\r\n-          {!isCollapsed && (\r\n-            <>\r\n-              <span className=\"text-sm flex-1\">{label}</span>\r\n-              {children && children.length > 0 && (\r\n-                <ChevronDown \r\n-                  className={cn(\r\n-                    \"h-4 w-4 transition-transform\",\r\n-                    isOpen && \"transform rotate-180\"\r\n-                  )} \r\n-                />\r\n-              )}\r\n-            </>\r\n-          )}\r\n-        </Link>\r\n-        \r\n-        {!isCollapsed && isOpen && children && children.length > 0 && (\r\n-          <div className=\"ml-4 mt-1 space-y-1\">\r\n-            {children.map((child, index) => (\r\n-              <SidebarItem\r\n-                key={`${child.href}-${index}`}\r\n-                {...child}\r\n-                isCollapsed={isCollapsed}\r\n-                isActive={currentPath === child.href}\r\n-                currentPath={currentPath}\r\n-              />\r\n-            ))}\r\n-          </div>\r\n-        )}\r\n-      </div>\r\n-    );\r\n-  } catch (error) {\r\n-    logError(error);\r\n-    return null;\r\n-  }\r\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1739299962534,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport Link from \"next/link\";\r\nimport { useTheme } from 'next-themes';\r\nimport { Button } from '../ui/button';\r\nimport { cn } from '@/lib/utils';\r\nimport { usePathname } from \"next/navigation\";\r\nimport { LucideIcon, FileText, Lock, Sun, Moon, ChevronDown } from \"lucide-react\";\r\nimport { useComponentLogger } from \"@/hooks/useComponentLogger\";\r\n\r\ninterface SidebarItem {\r\n  href: string;\r\n  label: string;\r\n  icon: LucideIcon;\r\n  isActive?: boolean;\r\n  children?: SidebarItem[];\r\n}\r\n\r\ninterface SidebarProps {\r\n  className?: string;\r\n  currentPath: string;\r\n  sidebarItems: SidebarItem[];\r\n}\r\n\r\nexport default function Sidebar({ className = \"\", sidebarItems, currentPath }: SidebarProps) {\r\n  const { logError } = useComponentLogger('Sidebar');\r\n  const { theme, setTheme } = useTheme();\r\n  const [isCollapsed, setIsCollapsed] = useState(false);\r\n  const [isLocked, setIsLocked] = useState(true);\r\n  const pathname = usePathname();\r\n\r\n  try {\r\n    // Persist locked state in localStorage\r\n    useEffect(() => {\r\n      try {\r\n        const savedLockState = localStorage.getItem('sidebarLocked');\r\n        if (savedLockState !== null) {\r\n          setIsLocked(JSON.parse(savedLockState));\r\n        }\r\n      } catch (error) {\r\n        logError(error);\r\n      }\r\n    }, [logError]);\r\n\r\n    const toggleLock = () => {\r\n      try {\r\n        const newLockState = !isLocked;\r\n        setIsLocked(newLockState);\r\n        localStorage.setItem('sidebarLocked', JSON.stringify(newLockState));\r\n      } catch (error) {\r\n        logError(error);\r\n      }\r\n    };\r\n\r\n    const toggleCollapse = () => {\r\n      if (!isLocked) {\r\n        setIsCollapsed(!isCollapsed);\r\n      }\r\n    };\r\n\r\n    // Debug log the sidebar items\r\n    console.log('Sidebar Items:', {\r\n      count: sidebarItems.length,\r\n      items: sidebarItems.map(item => ({\r\n        label: item.label,\r\n        href: item.href,\r\n        icon: item.icon\r\n      }))\r\n    });\r\n\r\n    console.log('Rendering Sidebar with items:', \r\n      sidebarItems.map(item => ({\r\n        label: item.label,\r\n        href: item.href,\r\n        isActive: item.isActive\r\n      }))\r\n    );\r\n\r\n    // Debug sidebar items before render\r\n    console.log('Sidebar Render:', {\r\n      itemCount: sidebarItems.length,\r\n      items: sidebarItems.map(item => ({\r\n        label: item.label,\r\n        href: item.href,\r\n        icon: item.icon,\r\n        isActive: currentPath === item.href\r\n      }))\r\n    });\r\n\r\n    return (\r\n      <div \r\n        className={cn(\r\n          \"flex flex-col h-full transition-all duration-300 bg-background border-r\",\r\n          isCollapsed ? 'w-16' : 'w-72',\r\n          className\r\n        )}\r\n      >\r\n        {/* Header with Lock/Unlock */}\r\n        <div className=\"flex items-center justify-between p-4 border-b\">\r\n          {!isCollapsed && (\r\n            <h1 className=\"text-2xl font-bold text-primary\">\r\n              <span className=\"text-[#3C4DFF]\">Engspiration</span>\r\n            </h1>\r\n          )}\r\n          <div className=\"flex items-center gap-2\">\r\n            <Button\r\n              variant=\"ghost\"\r\n              size=\"icon\"\r\n              onClick={toggleLock}\r\n              className=\"hover:bg-accent\"\r\n            >\r\n              <Lock \r\n                className={cn(\r\n                  \"h-4 w-4 transition-colors\",\r\n                  isLocked ? \"text-primary\" : \"text-muted-foreground\"\r\n                )} \r\n              />\r\n            </Button>\r\n            {!isLocked && (\r\n              <Button\r\n                variant=\"ghost\"\r\n                size=\"icon\"\r\n                onClick={toggleCollapse}\r\n                className=\"hover:bg-accent\"\r\n              >\r\n                {isCollapsed ? '→' : '←'}\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Navigation */}\r\n        <div className=\"flex-1 overflow-y-auto\">\r\n          <nav className=\"p-2 space-y-1\">\r\n            {sidebarItems.map((item, index) => (\r\n              <SidebarItem\r\n                key={`${item.href}-${index}`}\r\n                icon={item.icon}\r\n                label={item.label}\r\n                href={item.href}\r\n                isActive={currentPath === item.href}\r\n                isCollapsed={isCollapsed}\r\n                children={item.children}\r\n              />\r\n            ))}\r\n          </nav>\r\n        </div>\r\n\r\n        {/* Footer */}\r\n        <div className=\"p-4 border-t space-y-2\">\r\n          <Button\r\n            variant=\"ghost\"\r\n            onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}\r\n            className=\"w-full justify-start\"\r\n          >\r\n            {theme === 'dark' ? (\r\n              <>\r\n                <Sun className=\"h-4 w-4 mr-2\" />\r\n                {!isCollapsed && <span>Light Mode</span>}\r\n              </>\r\n            ) : (\r\n              <>\r\n                <Moon className=\"h-4 w-4 mr-2\" />\r\n                {!isCollapsed && <span>Dark Mode</span>}\r\n              </>\r\n            )}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  } catch (error) {\r\n    logError(error);\r\n    return <div>Error loading sidebar</div>;\r\n  }\r\n}\r\n\r\nfunction SidebarItem({ \r\n  icon, \r\n  label, \r\n  href, \r\n  isActive, \r\n  isCollapsed,\r\n  children \r\n}: { \r\n  icon: LucideIcon;\r\n  label: string; \r\n  href: string; \r\n  isActive: boolean;\r\n  isCollapsed: boolean;\r\n  children?: SidebarItem[];\r\n}) {\r\n  const { logError } = useComponentLogger('SidebarItem');\r\n  const IconComponent = icon || FileText;\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  try {\r\n    return (\r\n      <div>\r\n        <Link\r\n          href={href}\r\n          className={cn(\r\n            \"flex items-center px-2 py-2 rounded-md transition-colors\",\r\n            \"hover:bg-accent hover:text-accent-foreground\",\r\n            isActive && \"bg-primary/10 text-primary\",\r\n            isCollapsed ? \"justify-center\" : \"justify-start\"\r\n          )}\r\n          onClick={(e) => {\r\n            if (children?.length) {\r\n              e.preventDefault();\r\n              setIsOpen(!isOpen);\r\n            }\r\n          }}\r\n        >\r\n          <IconComponent \r\n            className={cn(\r\n              \"flex-shrink-0\",\r\n              isCollapsed ? \"h-5 w-5\" : \"h-5 w-5 mr-3\"\r\n            )} \r\n          />\r\n          {!isCollapsed && (\r\n            <>\r\n              <span className=\"text-sm flex-1\">{label}</span>\r\n              {children?.length > 0 && (\r\n                <ChevronDown \r\n                  className={cn(\r\n                    \"h-4 w-4 transition-transform\",\r\n                    isOpen && \"transform rotate-180\"\r\n                  )} \r\n                />\r\n              )}\r\n            </>\r\n          )}\r\n        </Link>\r\n        \r\n        {!isCollapsed && isOpen && children?.length > 0 && (\r\n          <div className=\"ml-4 mt-1 space-y-1\">\r\n            {children.map((child, index) => (\r\n              <SidebarItem\r\n                key={`${child.href}-${index}`}\r\n                icon={child.icon}\r\n                label={child.label}\r\n                href={child.href}\r\n                isActive={currentPath === child.href}\r\n                isCollapsed={isCollapsed}\r\n              />\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  } catch (error) {\r\n    logError(error);\r\n    return null;\r\n  }\r\n}"
        }
    ]
}