{
    "sourceFile": "src/components/common/ClassHeader copy.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1740777752175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740778387072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,13 @@\n \r\n   useEffect(() => {\r\n     const updateDateTime = () => {\r\n       const today = new Date();\r\n-      const options = { year: 'numeric', month: '2-digit', day: '2-digit' };\r\n+      const options: Intl.DateTimeFormatOptions = { \r\n+        year: 'numeric', \r\n+        month: '2-digit', \r\n+        day: '2-digit' \r\n+      };\r\n       const time = today.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n       const date = today.toLocaleDateString('en-GB', options); // Format: DD/MM/YY\r\n       setCurrentDateTime(`Today, ${time}, ${date}`);\r\n     };\r\n"
                },
                {
                    "date": 1740778424657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n       setCurrentDateTime(`Today, ${time}, ${date}`);\r\n     };\r\n \r\n     // Update the date and time every minute\r\n-    const intervalId = setInterval(updateDateTime, 60000);\r\n+    const intervalId = setInterval(updateDateTime, 60,000);\r\n \r\n     // Set the initial date and time immediately\r\n     updateDateTime();\r\n \r\n"
                },
                {
                    "date": 1740778461923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n       setCurrentDateTime(`Today, ${time}, ${date}`);\r\n     };\r\n \r\n     // Update the date and time every minute\r\n-    const intervalId = setInterval(updateDateTime, 60,000);\r\n+    const intervalId = setInterval(updateDateTime, 60000);\r\n \r\n     // Set the initial date and time immediately\r\n     updateDateTime();\r\n \r\n@@ -60,36 +60,26 @@\n     const currentDay = getCurrentDay(); // Get today's day\r\n \r\n     // Find the class that matches the current time and day within the schedule range\r\n     const matchingClass = classes.find((classData) => {\r\n-      // Split the schedule to get the days and times\r\n-      const [scheduleDays, timeRange] = classData.schedule.split(', ');\r\n-      const [startTime, endTime] = timeRange.split(' - ');\r\n-\r\n-      // Convert the class schedule times to 24-hour time in minutes\r\n-      const startMinutes = convertTo24Hour(startTime);\r\n-      const endMinutes = convertTo24Hour(endTime);\r\n-\r\n-      // Get the days of the class schedule (e.g., \"Mon - Fri\", \"Mon - Sat\")\r\n-      const [startDay, endDay] = scheduleDays.split(' - ');\r\n-\r\n-      // Check if today is within the scheduled days\r\n-      const isTodayInSchedule = () => {\r\n-        if (startDay === 'Mon' && endDay === 'Sun') {\r\n-          return true; // All days are active (Mon - Sun)\r\n-        }\r\n-\r\n-        const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n-        const startIdx = daysOfWeek.indexOf(startDay);\r\n-        const endIdx = daysOfWeek.indexOf(endDay);\r\n-        const currentIdx = daysOfWeek.indexOf(currentDay);\r\n-\r\n-        // Check if current day is within the start and end days\r\n-        return currentIdx >= startIdx && currentIdx <= endIdx;\r\n-      };\r\n-\r\n-      // Check if the current time is within the class's schedule time range\r\n-      return isTodayInSchedule() && currentTimeInMinutes >= startMinutes && currentTimeInMinutes <= endMinutes;\r\n+      // Check if any schedule item matches current day and time\r\n+      return classData.schedule.some(scheduleItem => {\r\n+        const currentDay = new Date().getDay(); // 0 = Sunday, 1 = Monday, etc.\r\n+        \r\n+        // Check if today matches the schedule day\r\n+        if (scheduleItem.dayOfWeek !== currentDay) return false;\r\n+        \r\n+        // Convert the class schedule times to 24-hour time in minutes\r\n+        const startMinutes = convertTo24Hour(scheduleItem.startTime);\r\n+        const endMinutes = convertTo24Hour(scheduleItem.endTime);\r\n+        \r\n+        // Get current time in minutes\r\n+        const currentTime = new Date();\r\n+        const currentTimeInMinutes = currentTime.getHours() * 60 + currentTime.getMinutes();\r\n+        \r\n+        // Check if current time is within schedule time range\r\n+        return currentTimeInMinutes >= startMinutes && currentTimeInMinutes <= endMinutes;\r\n+      });\r\n     });\r\n \r\n     if (matchingClass) {\r\n       setActiveClass(matchingClass); // Set active class based on schedule and time\r\n"
                },
                {
                    "date": 1740825211327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n \r\n interface ClassHeaderProps {\r\n   classes: Class[];\r\n   selectedClass: Class;\r\n-  onClassChange: (classData: Class) => void;\r\n+  onClassChange: (classData: Class | null) => void;\r\n }\r\n \r\n // Utility function to convert 12-hour time format to 24-hour time\r\n const convertTo24Hour = (time: string): number => {\r\n"
                },
                {
                    "date": 1740825510923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n     } else {\r\n       setActiveClass(null); // If no class is active, set to null\r\n       onClassChange(null);   // Pass null if no class is active\r\n     }\r\n-  }, [currentDateTime, classes]); // Re-run when current time or class data changes\r\n+  }, [currentDateTime, classes, onClassChange]); // Re-run when current time or class data changes\r\n \r\n   return (\r\n     <div>\r\n       <div className=\"flex justify-between items-center mb-6\">\r\n"
                }
            ],
            "date": 1740777752175,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\r\nimport { Class } from '../../types';\r\n\r\ninterface ClassHeaderProps {\r\n  classes: Class[];\r\n  selectedClass: Class;\r\n  onClassChange: (classData: Class) => void;\r\n}\r\n\r\n// Utility function to convert 12-hour time format to 24-hour time\r\nconst convertTo24Hour = (time: string): number => {\r\n  const [timeStr, modifier] = time.split(' ');\r\n  const parts = timeStr.split(':').map(Number);\r\n  let hours = parts[0];\r\n  const minutes = parts[1];\r\n  \r\n  if (modifier === 'PM' && hours !== 12) hours += 12;\r\n  if (modifier === 'AM' && hours === 12) hours = 0;\r\n\r\n  return hours * 60 + minutes; // Return time in minutes\r\n};\r\n\r\n// Utility function to get the current day of the week\r\nconst getCurrentDay = (): string => {\r\n  const today = new Date();\r\n  const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n  return days[today.getDay()];\r\n};\r\n\r\nexport default function ClassHeader({ classes, selectedClass, onClassChange }: ClassHeaderProps) {\r\n  const [currentDateTime, setCurrentDateTime] = useState<string>('');\r\n  const [activeClass, setActiveClass] = useState<Class | null>(null);\r\n\r\n  useEffect(() => {\r\n    const updateDateTime = () => {\r\n      const today = new Date();\r\n      const options = { year: 'numeric', month: '2-digit', day: '2-digit' };\r\n      const time = today.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n      const date = today.toLocaleDateString('en-GB', options); // Format: DD/MM/YY\r\n      setCurrentDateTime(`Today, ${time}, ${date}`);\r\n    };\r\n\r\n    // Update the date and time every minute\r\n    const intervalId = setInterval(updateDateTime, 60000);\r\n\r\n    // Set the initial date and time immediately\r\n    updateDateTime();\r\n\r\n    return () => clearInterval(intervalId); // Cleanup interval on unmount\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Get the current time in 24-hour format (in minutes)\r\n    const currentTime = new Date();\r\n    const currentTimeInMinutes = currentTime.getHours() * 60 + currentTime.getMinutes();\r\n    const currentDay = getCurrentDay(); // Get today's day\r\n\r\n    // Find the class that matches the current time and day within the schedule range\r\n    const matchingClass = classes.find((classData) => {\r\n      // Split the schedule to get the days and times\r\n      const [scheduleDays, timeRange] = classData.schedule.split(', ');\r\n      const [startTime, endTime] = timeRange.split(' - ');\r\n\r\n      // Convert the class schedule times to 24-hour time in minutes\r\n      const startMinutes = convertTo24Hour(startTime);\r\n      const endMinutes = convertTo24Hour(endTime);\r\n\r\n      // Get the days of the class schedule (e.g., \"Mon - Fri\", \"Mon - Sat\")\r\n      const [startDay, endDay] = scheduleDays.split(' - ');\r\n\r\n      // Check if today is within the scheduled days\r\n      const isTodayInSchedule = () => {\r\n        if (startDay === 'Mon' && endDay === 'Sun') {\r\n          return true; // All days are active (Mon - Sun)\r\n        }\r\n\r\n        const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n        const startIdx = daysOfWeek.indexOf(startDay);\r\n        const endIdx = daysOfWeek.indexOf(endDay);\r\n        const currentIdx = daysOfWeek.indexOf(currentDay);\r\n\r\n        // Check if current day is within the start and end days\r\n        return currentIdx >= startIdx && currentIdx <= endIdx;\r\n      };\r\n\r\n      // Check if the current time is within the class's schedule time range\r\n      return isTodayInSchedule() && currentTimeInMinutes >= startMinutes && currentTimeInMinutes <= endMinutes;\r\n    });\r\n\r\n    if (matchingClass) {\r\n      setActiveClass(matchingClass); // Set active class based on schedule and time\r\n      onClassChange(matchingClass);  // Pass active class to parent\r\n    } else {\r\n      setActiveClass(null); // If no class is active, set to null\r\n      onClassChange(null);   // Pass null if no class is active\r\n    }\r\n  }, [currentDateTime, classes]); // Re-run when current time or class data changes\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"flex justify-between items-center mb-6\">\r\n        <div>\r\n          <h1 className=\"text-2xl font-bold text-gray-900\">My Classes</h1>\r\n          <p className=\"text-gray-600\">Manage your active classes and schedules</p>\r\n        </div>\r\n        <p className=\"text-xl text-gray-700\">{currentDateTime}</p>\r\n      </div> \r\n\r\n      <div className=\"flex space-x-4 mb-6 border-b border-gray-200 overflow-y-auto w-full\">\r\n        {classes.length > 0 ? (\r\n          classes.map((classData, index) => {\r\n            // If no class is active, default to the first tab\r\n            const isDefaultSelected = activeClass === null && index === 0;\r\n\r\n            return (\r\n              <button\r\n              key={classData.id}\r\n              onClick={() => onClassChange(classData)}\r\n              className={`pb-2 text-lg w-32 rounded-lg ${\r\n                  activeClass?.id === classData?.id || selectedClass?.id === classData?.id\r\n                    ? 'text-indigo-600 border-b-2 border-indigo-600'\r\n                    : 'text-gray-600'\r\n                } ${activeClass?.id === classData.id ? 'text-white bg-green-500' : ''} \r\n                   \r\n                `} \r\n              >\r\n                <div>{classData.name}</div>\r\n                {/* <div className=\"ml-2 text-xs px-2\">{classData.schedule}</div> */}\r\n              </button>\r\n            );\r\n          })\r\n        ) : (\r\n          <button\r\n            className=\"pb-2 text-lg rounded-lg text-indigo-600 border-b-2 border-indigo-600\"\r\n            onClick={() => onClassChange(classes[0])} // Default to the first tab\r\n          >\r\n            Default Class (No classes found)\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"
        }
    ]
}