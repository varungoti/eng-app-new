{
    "sourceFile": "src/components/common/learningpathTeacher.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 129,
            "patches": [
                {
                    "date": 1739130215476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739130334862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,14 +166,8 @@\n   const [isLocked, setIsLocked] = useState(true);\n   const [classStudents, setClassStudents] = useState<DbStudent[]>([]);\n   const [isLoading, setIsLoading] = useState(true);\n   const [fetchError, setFetchError] = useState<string | null>(null);\n-  const [grades, setGrades] = useState<DbClass[]>([]);\n-  const [topics, setTopics] = useState<DbClass[]>([]);\n-  const [subtopics, setSubtopics] = useState<DbClass[]>([]);\n-  const [selectedGrade, setSelectedGrade] = useState<DbClass | null>(null);\n-  const [selectedTopic, setSelectedTopic] = useState<DbClass | null>(null);\n-  const [selectedSubtopic, setSelectedSubtopic] = useState<DbClass | null>(null);\n \n   // Load lock state from localStorage\n   useEffect(() => {\n     try {\n"
                },
                {
                    "date": 1739133061122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,8 +150,48 @@\n });\n \n ClassCard.displayName = 'ClassCard';\n \n+// Add these interfaces to match the database schema\n+interface SchoolClass {\n+  id: string;\n+  name: string;\n+  grade_id: string;\n+  section?: string;\n+  description?: string;\n+}\n+\n+interface GradeWithHierarchy {\n+  id: string;\n+  name: string;\n+  level: number;\n+  topics: TopicWithHierarchy[];\n+  classes: SchoolClass[];\n+}\n+\n+interface TopicWithHierarchy {\n+  id: string;\n+  title: string;\n+  grade_id: string;\n+  subtopics: SubtopicWithHierarchy[];\n+}\n+\n+interface SubtopicWithHierarchy {\n+  id: string;\n+  title: string;\n+  topic_id: string;\n+  lessons: LessonWithContent[];\n+}\n+\n+interface LessonWithContent {\n+  id: string;\n+  title: string;\n+  content: string;\n+  questions: Question[];\n+  activities: Activity[];\n+  exercise_prompts: ExercisePrompt[];\n+}\n+\n export function LearningPathTeacher() {\n   const navigate = useNavigate();\n   const { logError } = useComponentLogger('LearningPathTeacher');\n   const lessonRefs = useRef<(HTMLDivElement | null)[]>([]);\n@@ -166,8 +206,14 @@\n   const [isLocked, setIsLocked] = useState(true);\n   const [classStudents, setClassStudents] = useState<DbStudent[]>([]);\n   const [isLoading, setIsLoading] = useState(true);\n   const [fetchError, setFetchError] = useState<string | null>(null);\n+  const [grades, setGrades] = useState<GradeWithHierarchy[]>([]);\n+  const [topics, setTopics] = useState<TopicWithHierarchy[]>([]);\n+  const [subtopics, setSubtopics] = useState<SubtopicWithHierarchy[]>([]);\n+  const [selectedGrade, setSelectedGrade] = useState<GradeWithHierarchy | null>(null);\n+  const [selectedTopic, setSelectedTopic] = useState<TopicWithHierarchy | null>(null);\n+  const [selectedSubtopic, setSelectedSubtopic] = useState<SubtopicWithHierarchy | null>(null);\n \n   // Load lock state from localStorage\n   useEffect(() => {\n     try {\n@@ -195,103 +241,144 @@\n       try {\n         setIsLoading(true);\n         setFetchError(null);\n \n-        const { data: classesData, error: classesError } = await supabase\n-          .from('classes')\n-          .select('*')\n-          .order('created_at', { ascending: false });\n+        const { data: { session } } = await supabase.auth.getSession();\n+        if (!session?.user) throw new Error('No authenticated user');\n \n-        if (classesError) {\n-          throw new Error('Error fetching classes: ' + classesError.message);\n-        }\n+        // 1. First get user's assigned schools\n+        const { data: userSchoolsData, error: schoolsError } = await supabase\n+          .from('user_schools')\n+          .select('school_id')\n+          .eq('user_id', session.user.id);\n \n-        if (!classesData || classesData.length === 0) {\n-          throw new Error('No classes found');\n+        if (schoolsError) throw schoolsError;\n+\n+        if (!userSchoolsData?.length) {\n+          throw new Error('No schools assigned to user');\n         }\n \n-        const extendedClasses: ExtendedClass[] = classesData.map(cls => ({\n-          ...cls,\n-          id: String(cls.id),\n-          students: 0 // Will be updated with actual count\n-        }));\n-\n-        setClasses(extendedClasses);\n-        setSelectedClass(extendedClasses[0]);\n-\n-        const { data: lessonsData, error: lessonsError } = await supabase\n-          .from('lessons')\n+        // 2. Get school grades and associated data\n+        const { data: schoolGradesData, error: gradesError } = await supabase\n+          .from('school_grades')\n           .select(`\n-            *,\n-            topic:topics(title),\n-            subtopic:subtopics(title)\n+            grade_id,\n+            grades (\n+              id,\n+              name,\n+              level\n+            )\n           `)\n-          .eq('grade_id', classesData[0].grade_id)\n-          .order('order_index', { ascending: true });\n+          .in('school_id', userSchoolsData.map(us => us.school_id));\n \n-        if (lessonsError) {\n-          throw new Error('Error fetching lessons: ' + lessonsError.message);\n-        }\n+        if (gradesError) throw gradesError;\n \n-        const customLessons: CustomLesson[] = lessonsData.map((lesson, index) => ({\n-          ...lesson,\n-          id: String(lesson.id),\n-          status: lesson.status as 'draft' | 'published' | undefined,\n-          color: getColorForIndex(index),\n-          unlocked: index === 0,\n-          completed: false,\n-          lessonNumber: `${index + 1}`,\n-          totalTopics: '5',\n-          difficulty: 'Beginner',\n-          customSubLessons: [\n-            {\n-              id: String(lesson.id),\n-              title: lesson.title,\n-              unlocked: index === 0,\n-              completed: false,\n-              duration: lesson.duration || 15,\n-              description: lesson.description || ''\n-            }\n-          ]\n-        }));\n-\n-        setLessons(customLessons);\n-        if (customLessons.length > 0) {\n-          setSelectedLesson(customLessons[0]);\n-        }\n-\n-        const { data: studentsData, error: studentsError } = await supabase\n-          .from('class_students')\n+        // 3. Get teacher's classes\n+        const { data: teacherClasses, error: classesError } = await supabase\n+          .from('class_teachers')\n           .select(`\n-            *,\n-            student:students!class_students_student_id_fkey (\n+            classes (\n               id,\n-              first_name,\n-              last_name,\n-              roll_number,\n-              email,\n-              grade_id\n+              name,\n+              grade_id,\n+              section,\n+              description\n             )\n           `)\n-          .eq('class_id', classesData[0].id);\n+          .eq('teacher_id', session.user.id);\n \n-        if (studentsError) {\n-          throw new Error('Error fetching students: ' + studentsError.message);\n-        }\n+        if (classesError) throw classesError;\n \n-        if (studentsData) {\n-          const students = studentsData.map(data => data.student);\n-          setClassStudents(students);\n-          \n-          // Update the selected class with the correct student count\n-          setSelectedClass(prev => prev ? { ...prev, students: students.length } : null);\n-          \n-          // Update all classes with their student counts\n-          setClasses(prev => prev.map(cls => \n-            cls.id === extendedClasses[0].id \n-              ? { ...cls, students: students.length }\n-              : cls\n-          ));\n+        // 4. For each grade, fetch the complete hierarchy\n+        const gradesWithHierarchy = await Promise.all(\n+          schoolGradesData.map(async ({ grades }) => {\n+            const { data: topics } = await supabase\n+              .from('topics')\n+              .select(`\n+                *,\n+                subtopics (\n+                  *,\n+                  lessons (\n+                    *,\n+                    questions (\n+                      *,\n+                      exercise_prompts (*)\n+                    ),\n+                    activities (*)\n+                  )\n+                )\n+              `)\n+              .eq('grade_id', grades.id)\n+              .order('order_index');\n+\n+            return {\n+              ...grades,\n+              topics: topics || [],\n+              classes: teacherClasses\n+                .map(tc => tc.classes)\n+                .filter(c => c.grade_id === grades.id)\n+            };\n+          })\n+        );\n+\n+        // Update states while maintaining existing functionality\n+        setGrades(gradesWithHierarchy);\n+        \n+        // Set initial selections\n+        if (gradesWithHierarchy.length > 0) {\n+          const firstGrade = gradesWithHierarchy[0];\n+          setSelectedGrade(firstGrade);\n+\n+          // Update existing class-based state\n+          const gradeClasses = firstGrade.classes.map(cls => ({\n+            ...cls,\n+            id: String(cls.id),\n+            students: 0 // Will be updated with actual count\n+          }));\n+          setClasses(gradeClasses);\n+          if (gradeClasses.length > 0) {\n+            setSelectedClass(gradeClasses[0]);\n+          }\n+\n+          // Set topics and lessons\n+          if (firstGrade.topics.length > 0) {\n+            const firstTopic = firstGrade.topics[0];\n+            setSelectedTopic(firstTopic);\n+            setTopics(firstGrade.topics);\n+\n+            if (firstTopic.subtopics.length > 0) {\n+              const firstSubtopic = firstTopic.subtopics[0];\n+              setSelectedSubtopic(firstSubtopic);\n+              setSubtopics(firstGrade.topics.flatMap(t => t.subtopics));\n+\n+              // Transform lessons to match existing format\n+              const transformedLessons = firstSubtopic.lessons.map((lesson, index) => ({\n+                ...lesson,\n+                id: String(lesson.id),\n+                color: getColorForIndex(index),\n+                unlocked: index === 0,\n+                completed: false,\n+                lessonNumber: `${index + 1}`,\n+                totalTopics: String(firstGrade.topics.length),\n+                difficulty: 'Beginner',\n+                customSubLessons: [\n+                  {\n+                    id: String(lesson.id),\n+                    title: lesson.title,\n+                    unlocked: index === 0,\n+                    completed: false,\n+                    duration: lesson.duration || 15,\n+                    description: lesson.description || ''\n+                  }\n+                ]\n+              }));\n+\n+              setLessons(transformedLessons);\n+              if (transformedLessons.length > 0) {\n+                setSelectedLesson(transformedLessons[0]);\n+              }\n+            }\n+          }\n         }\n \n       } catch (error) {\n         const errorMessage = error instanceof Error ? error.message : 'An unexpected error occurred';\n@@ -464,50 +551,65 @@\n   }\n \n   return (\n     <div className=\"max-w-6xl w-full relative\">\n-      <div className=\"flex items-center justify-between mb-4\">\n-        <div className=\"flex gap-4 overflow-x-auto pb-2\">\n-          {classes.map(classData => (\n-            <ClassCard\n-              key={classData.id}\n-              classData={classData}\n-              isSelected={selectedClass?.id === classData.id}\n-              onClassChange={handleClassChange}\n-              logError={logError}\n-            />\n+      {/* Grade Selection */}\n+      <div className=\"flex gap-4 overflow-x-auto pb-2\">\n+        {grades.map(grade => (\n+          <Card\n+            key={grade.id}\n+            className={cn(\n+              \"cursor-pointer transition-all duration-200\",\n+              selectedGrade?.id === grade.id && \"border-primary\"\n+            )}\n+            onClick={() => setSelectedGrade(grade)}\n+          >\n+            <CardHeader className=\"p-4\">\n+              <div className=\"flex items-center gap-2\">\n+                <GraduationCap className=\"h-5 w-5 text-primary\" />\n+                <span className=\"font-medium\">{grade.name}</span>\n+              </div>\n+            </CardHeader>\n+          </Card>\n+        ))}\n+      </div>\n+\n+      {/* Topics and their content */}\n+      <div className=\"mt-6 space-y-6\">\n+        {topics\n+          .filter(topic => topic.grade_id === selectedGrade?.id)\n+          .map(topic => (\n+            <Card key={topic.id} className=\"border-l-4 border-l-primary\">\n+              <CardHeader>\n+                <CardTitle>{topic.title}</CardTitle>\n+              </CardHeader>\n+              <CardContent>\n+                <div className=\"space-y-4\">\n+                  {subtopics\n+                    .filter(subtopic => subtopic.topic_id === topic.id)\n+                    .map(subtopic => (\n+                      <div key={subtopic.id} className=\"space-y-4\">\n+                        <h3 className=\"text-lg font-semibold\">{subtopic.title}</h3>\n+                        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n+                          {lessons\n+                            .filter(lesson => lesson.subtopic_id === subtopic.id)\n+                            .map(lesson => (\n+                              <LessonCard \n+                                key={lesson.id}\n+                                lesson={lesson}\n+                                isSelected={selectedLesson?.id === lesson.id}\n+                                onSelect={setSelectedLesson}\n+                              />\n+                            ))}\n+                        </div>\n+                      </div>\n+                    ))}\n+                </div>\n+              </CardContent>\n+            </Card>\n           ))}\n-        </div>\n-        <Button\n-          variant=\"outline\"\n-          size=\"sm\"\n-          onClick={() => setIsLocked(!isLocked)}\n-          className={cn(\n-            \"ml-4 transition-colors\",\n-            isLocked && \"border-primary text-primary hover:bg-primary/10\"\n-          )}\n-        >\n-          {isLocked ? (\n-            <>\n-              <Lock className=\"h-4 w-4 mr-2\" />\n-              Locked\n-            </>\n-          ) : (\n-            <>\n-              <Unlock className=\"h-4 w-4 mr-2\" />\n-              Unlocked\n-            </>\n-          )}\n-        </Button>\n       </div>\n \n-      {isLocked && (\n-        <div className=\"mb-4 p-3 bg-primary/10 border border-primary/20 rounded-lg flex items-center gap-2 text-sm text-primary\">\n-          <Shield className=\"h-4 w-4\" />\n-          This course is currently locked to prevent unintended changes. Unlock to make modifications.\n-        </div>\n-      )}\n-\n       {/* Overview Section */}\n       <div className=\"mb-6\">\n         <Card className=\"text-gray-700 bg-white dark:bg-gray-900 rounded-xl mb-4 border border-gray-200 dark:border-gray-800\">\n           <CardHeader>\n"
                },
                {
                    "date": 1739133182678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n import { useNavigate, Link } from \"react-router-dom\";\n import ClassHeader from \"./ClassHeader\";\n import {  Dialog,  DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, } from \"@/components/ui/dialog\";\n import { Button } from \"../ui/button\";\n-import { Class, ExtendedLesson, SubLesson, ClassStudent, Student } from \"@/types\";\n+import { Class, ExtendedLesson, SubLesson, ClassStudent, Student, Question } from \"@/types\";\n import { cn } from \"@/lib/utils\";\n import { supabase } from \"@/lib/supabase\";\n import type { Database } from \"@/types/supabase\";\n import { useComponentLogger } from \"@/hooks/useComponentLogger\";\n"
                },
                {
                    "date": 1739133203813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n import { useNavigate, Link } from \"react-router-dom\";\n import ClassHeader from \"./ClassHeader\";\n import {  Dialog,  DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, } from \"@/components/ui/dialog\";\n import { Button } from \"../ui/button\";\n-import { Class, ExtendedLesson, SubLesson, ClassStudent, Student, Question } from \"@/types\";\n+import { Class, ExtendedLesson, SubLesson, ClassStudent, Student, Question, Activity, ExercisePrompt, Lesson, Topic, Subtopic, Grade } from \"@/types\";\n import { cn } from \"@/lib/utils\";\n import { supabase } from \"@/lib/supabase\";\n import type { Database } from \"@/types/supabase\";\n import { useComponentLogger } from \"@/hooks/useComponentLogger\";\n"
                },
                {
                    "date": 1739133430764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,10 +2,10 @@\n \n import { useEffect, useRef, useState, memo, useCallback, useMemo } from \"react\";\n import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n import { Progress } from \"@/components/ui/progress\";\n-import {  ArrowRight, BookOpen, Calendar, CheckCircle2, Clock, Lock, Plus, RotateCcw, Unlock, Users, Shield, GraduationCap, } from \"lucide-react\";\n-import { useNavigate, Link } from \"react-router-dom\";\n+import {  ArrowRight, BookOpen, Calendar, CheckCircle2, Clock, Lock, Plus, RotateCcw, Unlock, Users, Shield, GraduationCap, Badge } from \"lucide-react\";\n+import { Link, useNavigate } from \"react-router-dom\";\n import ClassHeader from \"./ClassHeader\";\n import {  Dialog,  DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, } from \"@/components/ui/dialog\";\n import { Button } from \"../ui/button\";\n import { Class, ExtendedLesson, SubLesson, ClassStudent, Student, Question, Activity, ExercisePrompt, Lesson, Topic, Subtopic, Grade } from \"@/types\";\n@@ -80,8 +80,11 @@\n   lessonNumber: string;\n   totalTopics: string;\n   difficulty: string;\n   customSubLessons: CustomSubLesson[];\n+  questions?: Question[];\n+  activities?: Activity[];\n+  exercise_prompts?: ExercisePrompt[];\n }\n \n interface CustomSubLesson {\n   id: string;\n@@ -190,8 +193,51 @@\n   activities: Activity[];\n   exercise_prompts: ExercisePrompt[];\n }\n \n+interface LessonCardProps {\n+  lesson: CustomLesson;\n+  isSelected: boolean;\n+  onSelect: (lesson: CustomLesson) => void;\n+}\n+\n+const LessonCard = memo(({ lesson, isSelected, onSelect }: LessonCardProps) => {\n+  return (\n+    <Card \n+      className={cn(\n+        \"cursor-pointer transition-all duration-200\",\n+        \"hover:shadow-md hover:translate-y-[-2px]\",\n+        \"hover:bg-accent/50 hover:border-primary/50\",\n+        \"active:translate-y-[0px]\",\n+        isSelected && \"border-primary bg-accent/50 shadow-md\",\n+        \"group\"\n+      )}\n+      onClick={() => onSelect(lesson)}\n+    >\n+      <CardHeader className=\"p-4\">\n+        <div className=\"flex flex-col gap-2\">\n+          <div className=\"flex items-center justify-between\">\n+            <div className=\"flex items-center gap-2\">\n+              <BookOpen className=\"h-4 w-4 text-primary\" />\n+              <span className=\"font-medium\">{lesson.title}</span>\n+            </div>\n+          </div>\n+          <div className=\"flex items-center gap-2\">\n+            <Badge variant=\"outline\" className=\"bg-primary/5\">\n+              {lesson.questions?.length || 0} Questions\n+            </Badge>\n+            <Badge variant=\"outline\" className=\"bg-primary/5\">\n+              {lesson.activities?.length || 0} Activities\n+            </Badge>\n+          </div>\n+        </div>\n+      </CardHeader>\n+    </Card>\n+  );\n+});\n+\n+LessonCard.displayName = 'LessonCard';\n+\n export function LearningPathTeacher() {\n   const navigate = useNavigate();\n   const { logError } = useComponentLogger('LearningPathTeacher');\n   const lessonRefs = useRef<(HTMLDivElement | null)[]>([]);\n"
                },
                {
                    "date": 1739133754994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,10 +2,12 @@\n \n import { useEffect, useRef, useState, memo, useCallback, useMemo } from \"react\";\n import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n import { Progress } from \"@/components/ui/progress\";\n-import {  ArrowRight, BookOpen, Calendar, CheckCircle2, Clock, Lock, Plus, RotateCcw, Unlock, Users, Shield, GraduationCap, Badge } from \"lucide-react\";\n-import { Link, useNavigate } from \"react-router-dom\";\n+import { ArrowRight, BookOpen, Calendar, CheckCircle2, Clock, Lock, Plus, RotateCcw, Unlock, Users, Shield, GraduationCap } from \"lucide-react\";\n+import { Badge } from \"@/components/ui/badge\";\n+import { useNavigate as useRouterNavigate } from \"react-router-dom\";\n+import { Link } from \"react-router-dom\";\n import ClassHeader from \"./ClassHeader\";\n import {  Dialog,  DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, } from \"@/components/ui/dialog\";\n import { Button } from \"../ui/button\";\n import { Class, ExtendedLesson, SubLesson, ClassStudent, Student, Question, Activity, ExercisePrompt, Lesson, Topic, Subtopic, Grade } from \"@/types\";\n@@ -237,9 +239,9 @@\n \n LessonCard.displayName = 'LessonCard';\n \n export function LearningPathTeacher() {\n-  const navigate = useNavigate();\n+  const navigate = useRouterNavigate();\n   const { logError } = useComponentLogger('LearningPathTeacher');\n   const lessonRefs = useRef<(HTMLDivElement | null)[]>([]);\n   \n   const [lessons, setLessons] = useState<CustomLesson[]>([]);\n"
                },
                {
                    "date": 1739133898452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -309,9 +309,9 @@\n         const { data: schoolGradesData, error: gradesError } = await supabase\n           .from('school_grades')\n           .select(`\n             grade_id,\n-            grades (\n+            grades:grades (\n               id,\n               name,\n               level\n             )\n@@ -337,9 +337,9 @@\n         if (classesError) throw classesError;\n \n         // 4. For each grade, fetch the complete hierarchy\n         const gradesWithHierarchy = await Promise.all(\n-          schoolGradesData.map(async ({ grades }) => {\n+          schoolGradesData.map(async ({ grades: grade }) => {\n             const { data: topics } = await supabase\n               .from('topics')\n               .select(`\n                 *,\n@@ -354,17 +354,17 @@\n                     activities (*)\n                   )\n                 )\n               `)\n-              .eq('grade_id', grades.id)\n+              .eq('grade_id', grade.id)\n               .order('order_index');\n \n             return {\n-              ...grades,\n+              ...grade,\n               topics: topics || [],\n               classes: teacherClasses\n                 .map(tc => tc.classes)\n-                .filter(c => c.grade_id === grades.id)\n+                .filter(c => c.grade_id === grade.id)\n             };\n           })\n         );\n \n"
                },
                {
                    "date": 1739134209709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -238,8 +238,17 @@\n });\n \n LessonCard.displayName = 'LessonCard';\n \n+interface GradeData {\n+  grade_id: string;\n+  grades: {\n+    id: string;\n+    name: string;\n+    level: number;\n+  };\n+}\n+\n export function LearningPathTeacher() {\n   const navigate = useRouterNavigate();\n   const { logError } = useComponentLogger('LearningPathTeacher');\n   const lessonRefs = useRef<(HTMLDivElement | null)[]>([]);\n@@ -307,17 +316,18 @@\n \n         // 2. Get school grades and associated data\n         const { data: schoolGradesData, error: gradesError } = await supabase\n           .from('school_grades')\n-          .select(`\n+          .select<'*', GradeData>(`\n             grade_id,\n             grades:grades (\n               id,\n               name,\n               level\n             )\n           `)\n-          .in('school_id', userSchoolsData.map(us => us.school_id));\n+          .in('school_id', userSchoolsData.map(us => us.school_id))\n+          .order('grades(level)', { ascending: true });\n \n         if (gradesError) throw gradesError;\n \n         // 3. Get teacher's classes\n@@ -601,25 +611,27 @@\n   return (\n     <div className=\"max-w-6xl w-full relative\">\n       {/* Grade Selection */}\n       <div className=\"flex gap-4 overflow-x-auto pb-2\">\n-        {grades.map(grade => (\n-          <Card\n-            key={grade.id}\n-            className={cn(\n-              \"cursor-pointer transition-all duration-200\",\n-              selectedGrade?.id === grade.id && \"border-primary\"\n-            )}\n-            onClick={() => setSelectedGrade(grade)}\n-          >\n-            <CardHeader className=\"p-4\">\n-              <div className=\"flex items-center gap-2\">\n-                <GraduationCap className=\"h-5 w-5 text-primary\" />\n-                <span className=\"font-medium\">{grade.name}</span>\n-              </div>\n-            </CardHeader>\n-          </Card>\n-        ))}\n+        {grades\n+          .sort((a, b) => a.level - b.level)\n+          .map(grade => (\n+            <Card\n+              key={grade.id}\n+              className={cn(\n+                \"cursor-pointer transition-all duration-200\",\n+                selectedGrade?.id === grade.id && \"border-primary\"\n+              )}\n+              onClick={() => setSelectedGrade(grade)}\n+            >\n+              <CardHeader className=\"p-4\">\n+                <div className=\"flex items-center gap-2\">\n+                  <GraduationCap className=\"h-5 w-5 text-primary\" />\n+                  <span className=\"font-medium\">{grade.name}</span>\n+                </div>\n+              </CardHeader>\n+            </Card>\n+          ))}\n       </div>\n \n       {/* Topics and their content */}\n       <div className=\"mt-6 space-y-6\">\n"
                },
                {
                    "date": 1739134247010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -316,16 +316,16 @@\n \n         // 2. Get school grades and associated data\n         const { data: schoolGradesData, error: gradesError } = await supabase\n           .from('school_grades')\n-          .select<'*', GradeData>(`\n+          .select(`\n             grade_id,\n             grades:grades (\n               id,\n               name,\n               level\n             )\n-          `)\n+          ` as '*')\n           .in('school_id', userSchoolsData.map(us => us.school_id))\n           .order('grades(level)', { ascending: true });\n \n         if (gradesError) throw gradesError;\n"
                },
                {
                    "date": 1739134334303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -247,8 +247,18 @@\n     level: number;\n   };\n }\n \n+interface TeacherClassData {\n+  classes: {\n+    id: string;\n+    name: string;\n+    grade_id: string;\n+    section?: string;\n+    description?: string;\n+  }[];\n+}\n+\n export function LearningPathTeacher() {\n   const navigate = useRouterNavigate();\n   const { logError } = useComponentLogger('LearningPathTeacher');\n   const lessonRefs = useRef<(HTMLDivElement | null)[]>([]);\n@@ -340,9 +350,9 @@\n               grade_id,\n               section,\n               description\n             )\n-          `)\n+          ` as '*')\n           .eq('teacher_id', session.user.id);\n \n         if (classesError) throw classesError;\n \n@@ -370,11 +380,9 @@\n \n             return {\n               ...grade,\n               topics: topics || [],\n-              classes: teacherClasses\n-                .map(tc => tc.classes)\n-                .filter(c => c.grade_id === grade.id)\n+              classes: teacherClasses?.map(tc => tc.classes).flat() || []\n             };\n           })\n         );\n \n"
                },
                {
                    "date": 1739134363605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -394,9 +394,9 @@\n           const firstGrade = gradesWithHierarchy[0];\n           setSelectedGrade(firstGrade);\n \n           // Update existing class-based state\n-          const gradeClasses = firstGrade.classes.map(cls => ({\n+          const gradeClasses = firstGrade.classes.map((cls: SchoolClass) => ({\n             ...cls,\n             id: String(cls.id),\n             students: 0 // Will be updated with actual count\n           }));\n"
                },
                {
                    "date": 1739134388668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -413,9 +413,9 @@\n \n             if (firstTopic.subtopics.length > 0) {\n               const firstSubtopic = firstTopic.subtopics[0];\n               setSelectedSubtopic(firstSubtopic);\n-              setSubtopics(firstGrade.topics.flatMap(t => t.subtopics));\n+              setSubtopics(firstGrade.topics.flatMap((t: TopicWithHierarchy) => t.subtopics));\n \n               // Transform lessons to match existing format\n               const transformedLessons = firstSubtopic.lessons.map((lesson, index) => ({\n                 ...lesson,\n"
                },
                {
                    "date": 1739134407258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -416,9 +416,9 @@\n               setSelectedSubtopic(firstSubtopic);\n               setSubtopics(firstGrade.topics.flatMap((t: TopicWithHierarchy) => t.subtopics));\n \n               // Transform lessons to match existing format\n-              const transformedLessons = firstSubtopic.lessons.map((lesson, index) => ({\n+              const transformedLessons = firstSubtopic.lessons.map((lesson: LessonWithContent, index) => ({\n                 ...lesson,\n                 id: String(lesson.id),\n                 color: getColorForIndex(index),\n                 unlocked: index === 0,\n"
                },
                {
                    "date": 1739134442366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,8 +193,11 @@\n   content: string;\n   questions: Question[];\n   activities: Activity[];\n   exercise_prompts: ExercisePrompt[];\n+  duration?: number;\n+  description?: string;\n+  subtopic_id: string;\n }\n \n interface LessonCardProps {\n   lesson: CustomLesson;\n"
                },
                {
                    "date": 1739134475355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -419,9 +419,9 @@\n               setSelectedSubtopic(firstSubtopic);\n               setSubtopics(firstGrade.topics.flatMap((t: TopicWithHierarchy) => t.subtopics));\n \n               // Transform lessons to match existing format\n-              const transformedLessons = firstSubtopic.lessons.map((lesson: LessonWithContent, index) => ({\n+              const transformedLessons = firstSubtopic.lessons.map((lesson: LessonWithContent, index: number) => ({\n                 ...lesson,\n                 id: String(lesson.id),\n                 color: getColorForIndex(index),\n                 unlocked: index === 0,\n"
                },
                {
                    "date": 1739134708644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -643,43 +643,9 @@\n             </Card>\n           ))}\n       </div>\n \n-      {/* Topics and their content */}\n-      <div className=\"mt-6 space-y-6\">\n-        {topics\n-          .filter(topic => topic.grade_id === selectedGrade?.id)\n-          .map(topic => (\n-            <Card key={topic.id} className=\"border-l-4 border-l-primary\">\n-              <CardHeader>\n-                <CardTitle>{topic.title}</CardTitle>\n-              </CardHeader>\n-              <CardContent>\n-                <div className=\"space-y-4\">\n-                  {subtopics\n-                    .filter(subtopic => subtopic.topic_id === topic.id)\n-                    .map(subtopic => (\n-                      <div key={subtopic.id} className=\"space-y-4\">\n-                        <h3 className=\"text-lg font-semibold\">{subtopic.title}</h3>\n-                        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n-                          {lessons\n-                            .filter(lesson => lesson.subtopic_id === subtopic.id)\n-                            .map(lesson => (\n-                              <LessonCard \n-                                key={lesson.id}\n-                                lesson={lesson}\n-                                isSelected={selectedLesson?.id === lesson.id}\n-                                onSelect={setSelectedLesson}\n-                              />\n-                            ))}\n-                        </div>\n-                      </div>\n-                    ))}\n-                </div>\n-              </CardContent>\n-            </Card>\n-          ))}\n-      </div>\n+      \n \n       {/* Overview Section */}\n       <div className=\"mb-6\">\n         <Card className=\"text-gray-700 bg-white dark:bg-gray-900 rounded-xl mb-4 border border-gray-200 dark:border-gray-800\">\n@@ -800,8 +766,44 @@\n           </Card>\n         </div>\n       </div>\n \n+      {/* Topics and their content */}\n+      <div className=\"mt-6 space-y-6\">\n+        {topics\n+          .filter(topic => topic.grade_id === selectedGrade?.id)\n+          .map(topic => (\n+            <Card key={topic.id} className=\"border-l-4 border-l-primary\">\n+              <CardHeader>\n+                <CardTitle>{topic.title}</CardTitle>\n+              </CardHeader>\n+              <CardContent>\n+                <div className=\"space-y-4\">\n+                  {subtopics\n+                    .filter(subtopic => subtopic.topic_id === topic.id)\n+                    .map(subtopic => (\n+                      <div key={subtopic.id} className=\"space-y-4\">\n+                        <h3 className=\"text-lg font-semibold\">{subtopic.title}</h3>\n+                        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n+                          {lessons\n+                            .filter(lesson => lesson.subtopic_id === subtopic.id)\n+                            .map(lesson => (\n+                              <LessonCard \n+                                key={lesson.id}\n+                                lesson={lesson}\n+                                isSelected={selectedLesson?.id === lesson.id}\n+                                onSelect={setSelectedLesson}\n+                              />\n+                            ))}\n+                        </div>\n+                      </div>\n+                    ))}\n+                </div>\n+              </CardContent>\n+            </Card>\n+          ))}\n+      </div>\n+\n       <div className=\"sticky top-0 z-30 w-full\">\n         {selectedLesson && (\n           <Card className={`${selectedLesson.color} text-white rounded-xl`}>\n             <CardHeader className=\"p-2 md:p-4 md:pl-6\">\n"
                },
                {
                    "date": 1739135658750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -766,9 +766,9 @@\n           </Card>\n         </div>\n       </div>\n \n-      {/* Topics and their content */}\n+      {/* Topics and their content\n       <div className=\"mt-6 space-y-6\">\n         {topics\n           .filter(topic => topic.grade_id === selectedGrade?.id)\n           .map(topic => (\n@@ -800,10 +800,98 @@\n                 </div>\n               </CardContent>\n             </Card>\n           ))}\n-      </div>\n+      </div> */}\n \n+\n+<div className=\"mt-6 space-y-6\">\n+  {selectedGrade?.topics\n+    .sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n+    .map(topic => (\n+      <Card \n+        key={topic.id} \n+        className={cn(\n+          \"border-l-4 border-l-primary transition-all duration-200\",\n+          \"hover:shadow-md\"\n+        )}\n+      >\n+        <CardHeader className=\"cursor-pointer\" onClick={() => setSelectedTopic(topic)}>\n+          <div className=\"flex items-center justify-between\">\n+            <CardTitle className=\"flex items-center gap-2\">\n+              <BookOpen className=\"h-5 w-5 text-primary\" />\n+              {topic.title}\n+            </CardTitle>\n+            <Badge variant=\"outline\" className=\"bg-primary/5\">\n+              {topic.subtopics?.length || 0} Subtopics\n+            </Badge>\n+          </div>\n+        </CardHeader>\n+        <CardContent>\n+          <div className=\"space-y-6\">\n+            {topic.subtopics\n+              ?.sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n+              .map(subtopic => (\n+                <div \n+                  key={subtopic.id} \n+                  className={cn(\n+                    \"space-y-4 p-4 rounded-lg\",\n+                    \"border border-border/50\",\n+                    \"hover:border-primary/50 transition-colors\",\n+                    selectedSubtopic?.id === subtopic.id && \"border-primary/50 bg-accent/5\"\n+                  )}\n+                >\n+                  <div \n+                    className=\"flex items-center justify-between cursor-pointer\"\n+                    onClick={() => setSelectedSubtopic(subtopic)}\n+                  >\n+                    <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n+                      <div className={cn(\n+                        \"w-2 h-2 rounded-full\",\n+                        selectedSubtopic?.id === subtopic.id ? \"bg-primary\" : \"bg-muted\"\n+                      )} />\n+                      {subtopic.title}\n+                    </h3>\n+                    <Badge variant=\"outline\">\n+                      {subtopic.lessons?.length || 0} Lessons\n+                    </Badge>\n+                  </div>\n+                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n+                    {subtopic.lessons\n+                      ?.sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n+                      .map(lesson => (\n+                        <LessonCard \n+                          key={lesson.id}\n+                          lesson={{\n+                            ...lesson,\n+                            color: getColorForIndex(subtopic.lessons.indexOf(lesson)),\n+                            unlocked: true, // You can add your unlock logic here\n+                            completed: false, // Add completion logic\n+                            lessonNumber: `${subtopic.lessons.indexOf(lesson) + 1}`,\n+                            totalTopics: String(topic.subtopics?.length || 0),\n+                            difficulty: lesson.metadata?.difficulty || 'Beginner',\n+                            customSubLessons: [{\n+                              id: lesson.id,\n+                              title: lesson.title,\n+                              unlocked: true,\n+                              completed: false,\n+                              duration: lesson.duration || 15,\n+                              description: lesson.description || ''\n+                            }]\n+                          }}\n+                          isSelected={selectedLesson?.id === lesson.id}\n+                          onSelect={setSelectedLesson}\n+                        />\n+                    ))}\n+                  </div>\n+                </div>\n+              ))}\n+          </div>\n+        </CardContent>\n+      </Card>\n+    ))}\n+</div>\n+\n       <div className=\"sticky top-0 z-30 w-full\">\n         {selectedLesson && (\n           <Card className={`${selectedLesson.color} text-white rounded-xl`}>\n             <CardHeader className=\"p-2 md:p-4 md:pl-6\">\n"
                },
                {
                    "date": 1739135766382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,8 +196,9 @@\n   exercise_prompts: ExercisePrompt[];\n   duration?: number;\n   description?: string;\n   subtopic_id: string;\n+  order_index?: number;\n }\n \n interface LessonCardProps {\n   lesson: CustomLesson;\n"
                },
                {
                    "date": 1739135833066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,10 +72,11 @@\n   id: string;\n   students: number;\n }\n \n-interface CustomLesson extends Omit<DbLesson, 'id' | 'status'> {\n+interface CustomLesson extends Partial<DbLesson> {\n   id: string;\n+  title: string;\n   status?: 'draft' | 'published';\n   color: string;\n   unlocked: boolean;\n   completed: boolean;\n"
                },
                {
                    "date": 1739135977114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,8 +66,9 @@\n type DbStudent = Tables['students']['Row'];\n type DbClassStudent = Tables['class_students']['Row'] & {\n   student: DbStudent;\n };\n+type DbTopic = Database['public']['Tables']['topics']['Row'];\n \n interface ExtendedClass extends Omit<DbClass, 'id'> {\n   id: string;\n   students: number;\n@@ -173,13 +174,14 @@\n   topics: TopicWithHierarchy[];\n   classes: SchoolClass[];\n }\n \n-interface TopicWithHierarchy {\n+interface TopicWithHierarchy extends DbTopic {\n+  subtopics: SubtopicWithHierarchy[];\n   id: string;\n   title: string;\n   grade_id: string;\n-  subtopics: SubtopicWithHierarchy[];\n+  order_index?: number;\n }\n \n interface SubtopicWithHierarchy {\n   id: string;\n"
                },
                {
                    "date": 1739136246715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,8 @@\n type DbStudent = Tables['students']['Row'];\n type DbClassStudent = Tables['class_students']['Row'] & {\n   student: DbStudent;\n };\n-type DbTopic = Database['public']['Tables']['topics']['Row'];\n \n interface ExtendedClass extends Omit<DbClass, 'id'> {\n   id: string;\n   students: number;\n@@ -174,21 +173,32 @@\n   topics: TopicWithHierarchy[];\n   classes: SchoolClass[];\n }\n \n+type DbTopic = Tables['topics']['Row'] & {\n+  subtopics?: {\n+    id: string;\n+    title: string;\n+    topic_id: string;\n+    order_index?: number;\n+    lessons: LessonWithContent[];\n+  }[];\n+};\n+\n interface TopicWithHierarchy extends DbTopic {\n   subtopics: SubtopicWithHierarchy[];\n-  id: string;\n-  title: string;\n-  grade_id: string;\n-  order_index?: number;\n }\n \n-interface SubtopicWithHierarchy {\n+// Add with other type definitions at the top\n+type DbSubtopic = Tables['subtopics']['Row'];\n+\n+// Then update the interface to use it\n+interface SubtopicWithHierarchy extends DbSubtopic {\n+  lessons: LessonWithContent[];\n   id: string;\n   title: string;\n   topic_id: string;\n-  lessons: LessonWithContent[];\n+  order_index?: number; \n }\n \n interface LessonWithContent {\n   id: string;\n"
                },
                {
                    "date": 1739136364769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,28 @@\n \n   throw lastError || new Error('Failed to fetch data after retries');\n }\n \n-type Tables = Database['public']['Tables'];\n+type Tables = Database['public']['Tables'] & {\n+  topics: {\n+    Row: {\n+      id: string;\n+      title: string;\n+      grade_id: string;\n+      order_index?: number;\n+      subtopics?: SubtopicWithHierarchy[];\n+    };\n+  };\n+  subtopics: {\n+    Row: {\n+      id: string;\n+      title: string;\n+      topic_id: string;\n+      order_index?: number;\n+      lessons?: LessonWithContent[];\n+    };\n+  };\n+};\n type DbClass = Tables['classes']['Row'];\n type DbLesson = Tables['lessons']['Row'] & {\n   topic?: { title: string };\n   subtopic?: { title: string };\n"
                },
                {
                    "date": 1739136441211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,8 +229,12 @@\n   duration?: number;\n   description?: string;\n   subtopic_id: string;\n   order_index?: number;\n+  metadata?: {\n+    difficulty?: string;\n+    [key: string]: any;\n+  };\n }\n \n interface LessonCardProps {\n   lesson: CustomLesson;\n"
                },
                {
                    "date": 1739136496297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -666,9 +666,9 @@\n             <Card\n               key={grade.id}\n               className={cn(\n                 \"cursor-pointer transition-all duration-200\",\n-                selectedGrade?.id === grade.id && \"border-primary\"\n+                selectedGrade?.id === grade.id && \"border-primary border-l-4\"\n               )}\n               onClick={() => setSelectedGrade(grade)}\n             >\n               <CardHeader className=\"p-4\">\n"
                },
                {
                    "date": 1739136513077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -666,9 +666,9 @@\n             <Card\n               key={grade.id}\n               className={cn(\n                 \"cursor-pointer transition-all duration-200\",\n-                selectedGrade?.id === grade.id && \"border-primary border-l-4\"\n+                selectedGrade?.id === grade.id && \"border-primary border-l-4 cursor-default\"\n               )}\n               onClick={() => setSelectedGrade(grade)}\n             >\n               <CardHeader className=\"p-4\">\n"
                },
                {
                    "date": 1739136539801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -666,9 +666,9 @@\n             <Card\n               key={grade.id}\n               className={cn(\n                 \"cursor-pointer transition-all duration-200\",\n-                selectedGrade?.id === grade.id && \"border-primary border-l-4 cursor-default\"\n+                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary\"\n               )}\n               onClick={() => setSelectedGrade(grade)}\n             >\n               <CardHeader className=\"p-4\">\n"
                },
                {
                    "date": 1739136563072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -666,9 +666,9 @@\n             <Card\n               key={grade.id}\n               className={cn(\n                 \"cursor-pointer transition-all duration-200\",\n-                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary\"\n+                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50\"\n               )}\n               onClick={() => setSelectedGrade(grade)}\n             >\n               <CardHeader className=\"p-4\">\n"
                },
                {
                    "date": 1739136592075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -671,9 +671,9 @@\n               )}\n               onClick={() => setSelectedGrade(grade)}\n             >\n               <CardHeader className=\"p-4\">\n-                <div className=\"flex items-center gap-2\">\n+                <div className=\"flex items-center gap-1\">\n                   <GraduationCap className=\"h-5 w-5 text-primary\" />\n                   <span className=\"font-medium\">{grade.name}</span>\n                 </div>\n               </CardHeader>\n"
                },
                {
                    "date": 1739136616539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -671,9 +671,9 @@\n               )}\n               onClick={() => setSelectedGrade(grade)}\n             >\n               <CardHeader className=\"p-4\">\n-                <div className=\"flex items-center gap-1\">\n+                <div className=\"flex items-center gap-3\">\n                   <GraduationCap className=\"h-5 w-5 text-primary\" />\n                   <span className=\"font-medium\">{grade.name}</span>\n                 </div>\n               </CardHeader>\n"
                },
                {
                    "date": 1739136639627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -666,9 +666,9 @@\n             <Card\n               key={grade.id}\n               className={cn(\n                 \"cursor-pointer transition-all duration-200\",\n-                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50\"\n+                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-primary/5\"\n               )}\n               onClick={() => setSelectedGrade(grade)}\n             >\n               <CardHeader className=\"p-4\">\n"
                },
                {
                    "date": 1739136656714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -666,9 +666,9 @@\n             <Card\n               key={grade.id}\n               className={cn(\n                 \"cursor-pointer transition-all duration-200\",\n-                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-primary/5\"\n+                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-background/50\"\n               )}\n               onClick={() => setSelectedGrade(grade)}\n             >\n               <CardHeader className=\"p-4\">\n"
                },
                {
                    "date": 1739136737488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -666,9 +666,9 @@\n             <Card\n               key={grade.id}\n               className={cn(\n                 \"cursor-pointer transition-all duration-200\",\n-                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-background/50\"\n+                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/5\"\n               )}\n               onClick={() => setSelectedGrade(grade)}\n             >\n               <CardHeader className=\"p-4\">\n"
                },
                {
                    "date": 1739136751262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -666,9 +666,9 @@\n             <Card\n               key={grade.id}\n               className={cn(\n                 \"cursor-pointer transition-all duration-200\",\n-                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/5\"\n+                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/55\"\n               )}\n               onClick={() => setSelectedGrade(grade)}\n             >\n               <CardHeader className=\"p-4\">\n"
                },
                {
                    "date": 1739136788997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -666,9 +666,9 @@\n             <Card\n               key={grade.id}\n               className={cn(\n                 \"cursor-pointer transition-all duration-200\",\n-                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/55\"\n+                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/55 bg-color-secondary\"\n               )}\n               onClick={() => setSelectedGrade(grade)}\n             >\n               <CardHeader className=\"p-4\">\n"
                },
                {
                    "date": 1739137098332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n import { useEffect, useRef, useState, memo, useCallback, useMemo } from \"react\";\n import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n import { Progress } from \"@/components/ui/progress\";\n-import { ArrowRight, BookOpen, Calendar, CheckCircle2, Clock, Lock, Plus, RotateCcw, Unlock, Users, Shield, GraduationCap } from \"lucide-react\";\n+import { ArrowRight, BookOpen, Calendar, CheckCircle2, Clock, Lock, Plus, RotateCcw, Unlock, Users, Shield, GraduationCap, Home, Layers } from \"lucide-react\";\n import { Badge } from \"@/components/ui/badge\";\n import { useNavigate as useRouterNavigate } from \"react-router-dom\";\n import { Link } from \"react-router-dom\";\n import ClassHeader from \"./ClassHeader\";\n@@ -656,358 +656,340 @@\n     );\n   }\n \n   return (\n-    <div className=\"max-w-6xl w-full relative\">\n-      {/* Grade Selection */}\n-      <div className=\"flex gap-4 overflow-x-auto pb-2\">\n-        {grades\n-          .sort((a, b) => a.level - b.level)\n-          .map(grade => (\n-            <Card\n-              key={grade.id}\n-              className={cn(\n-                \"cursor-pointer transition-all duration-200\",\n-                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/55 bg-color-secondary\"\n-              )}\n-              onClick={() => setSelectedGrade(grade)}\n-            >\n-              <CardHeader className=\"p-4\">\n-                <div className=\"flex items-center gap-3\">\n-                  <GraduationCap className=\"h-5 w-5 text-primary\" />\n-                  <span className=\"font-medium\">{grade.name}</span>\n-                </div>\n-              </CardHeader>\n-            </Card>\n-          ))}\n+    <div className=\"w-full max-w-6xl mx-auto px-4 sm:px-6 space-y-6\">\n+      {/* Grade Selection - Horizontal scrollable on mobile */}\n+      <div className=\"relative\">\n+        <div className=\"flex gap-3 overflow-x-auto pb-2 scrollbar-hide -mx-4 px-4 sm:mx-0 sm:px-0\">\n+          {grades\n+            .sort((a, b) => a.level - b.level)\n+            .map(grade => (\n+              <Card\n+                key={grade.id}\n+                className={cn(\n+                  \"flex-shrink-0 cursor-pointer transition-all duration-200 min-w-[150px] sm:min-w-0\",\n+                  selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/55\"\n+                )}\n+                onClick={() => setSelectedGrade(grade)}\n+              >\n+                <CardHeader className=\"p-3 sm:p-4\">\n+                  <div className=\"flex items-center gap-2\">\n+                    <GraduationCap className=\"h-5 w-5 text-primary\" />\n+                    <span className=\"font-medium\">{grade.name}</span>\n+                  </div>\n+                </CardHeader>\n+              </Card>\n+            ))}\n+        </div>\n       </div>\n \n-      \n-\n       {/* Overview Section */}\n-      <div className=\"mb-6\">\n-        <Card className=\"text-gray-700 bg-white dark:bg-gray-900 rounded-xl mb-4 border border-gray-200 dark:border-gray-800\">\n-          <CardHeader>\n-            <CardTitle className=\"text-2xl\">{selectedClass?.name}</CardTitle>\n-            <div className=\"grid grid-cols-4 gap-4\">\n+      <div className=\"space-y-4\">\n+        <Card className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800\">\n+          <CardHeader className=\"p-4\">\n+            <CardTitle className=\"text-xl sm:text-2xl mb-4\">{selectedClass?.name}</CardTitle>\n+            <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-4\">\n               <div className=\"flex items-center space-x-2\">\n-                <Users size={16} className=\"text-blue-300\" />\n-                <span className=\"text-sm font-medium\">\n+                <Users size={16} className=\"text-blue-300 flex-shrink-0\" />\n+                <span className=\"text-sm font-medium truncate\">\n                   {classStudents.length} Students\n                 </span>\n               </div>\n               <div className=\"flex items-center space-x-2\">\n-                <BookOpen size={16} className=\"text-green-300\" />\n-                <span className=\"text-sm font-medium\">\n+                <BookOpen size={16} className=\"text-green-300 flex-shrink-0\" />\n+                <span className=\"text-sm font-medium truncate\">\n                   {lessons.length} Lessons\n                 </span>\n               </div>\n               <div className=\"flex items-center space-x-2\">\n-                <Calendar size={16} className=\"text-purple-300\" />\n-                <span className=\"text-sm font-medium\">\n+                <Calendar size={16} className=\"text-purple-300 flex-shrink-0\" />\n+                <span className=\"text-sm font-medium truncate\">\n                   0 Assignments\n                 </span>\n               </div>\n-              <div className=\"text-sm mt-2\">\n-                {Math.round((lessons.filter(l => l.completed).length / lessons.length) * 100)}% Completed\n+              <div className=\"flex items-center space-x-2\">\n+                <CheckCircle2 size={16} className=\"text-green-300 flex-shrink-0\" />\n+                <span className=\"text-sm font-medium truncate\">\n+                  {Math.round((lessons.filter(l => l.completed).length / lessons.length) * 100)}% Complete\n+                </span>\n               </div>\n             </div>\n           </CardHeader>\n         </Card>\n \n-        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n+        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n           {/* Upcoming Classes */}\n-          <Card className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800 p-6\">\n-            <div className=\"flex items-center justify-between mb-6\">\n-              <h2 className=\"text-xl font-semibold\">Upcoming Classes</h2>\n-              <Calendar className=\"h-5 w-5 text-gray-500\" />\n-            </div>\n-            <div className=\"space-y-4\">\n-              {[\n-                {\n-                  id: 1,\n-                  subject: \"English Literature\",\n-                  time: \"09:00 AM\",\n-                  students: 28,\n-                  topic: \"Shakespeare: Romeo & Juliet\",\n-                  room: \"Room 101\",\n-                },\n-                {\n-                  id: 2,\n-                  subject: \"Creative Writing\",\n-                  time: \"11:30 AM\",\n-                  students: 24,\n-                  topic: \"Character Development\",\n-                  room: \"Room 203\",\n-                },\n-              ].map((cls) => (\n-                <div\n-                  key={cls.id}\n-                  className=\"flex items-center justify-between p-4 bg-white dark:bg-gray-900 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors\"\n-                >\n-                  <div className=\"flex-1\">\n-                    <h3 className=\"font-medium\">{cls.subject}</h3>\n-                    <p className=\"text-sm text-gray-600\">{cls.topic}</p>\n-                    <div className=\"flex items-center gap-4 mt-2 text-sm text-gray-500\">\n-                      <span>{cls.time}</span>\n-                      <span>•</span>\n-                      <span>{cls.room}</span>\n-                      <span>•</span>\n-                      <span>{cls.students} students</span>\n+          <Card className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800\">\n+            <CardHeader className=\"p-4\">\n+              <div className=\"flex items-center justify-between mb-4\">\n+                <h2 className=\"text-lg sm:text-xl font-semibold\">Upcoming Classes</h2>\n+                <Calendar className=\"h-5 w-5 text-gray-500\" />\n+              </div>\n+              <div className=\"space-y-3\">\n+                {[\n+                  {\n+                    id: 1,\n+                    subject: \"English Literature\",\n+                    time: \"09:00 AM\",\n+                    students: 28,\n+                    topic: \"Shakespeare: Romeo & Juliet\",\n+                    room: \"Room 101\",\n+                  },\n+                  {\n+                    id: 2,\n+                    subject: \"Creative Writing\",\n+                    time: \"11:30 AM\",\n+                    students: 24,\n+                    topic: \"Character Development\",\n+                    room: \"Room 203\",\n+                  },\n+                ].map((cls) => (\n+                  <div\n+                    key={cls.id}\n+                    className=\"p-3 bg-accent/5 rounded-lg hover:bg-accent/10 transition-colors\"\n+                  >\n+                    <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2\">\n+                      <div>\n+                        <h3 className=\"font-medium\">{cls.subject}</h3>\n+                        <p className=\"text-sm text-muted-foreground\">{cls.topic}</p>\n+                      </div>\n+                      <div className=\"flex flex-wrap gap-2 text-sm text-muted-foreground\">\n+                        <span className=\"inline-flex items-center gap-1\">\n+                          <Clock className=\"h-4 w-4\" />\n+                          {cls.time}\n+                        </span>\n+                        <span className=\"inline-flex items-center gap-1\">\n+                          <Users className=\"h-4 w-4\" />\n+                          {cls.students}\n+                        </span>\n+                        <span className=\"inline-flex items-center gap-1\">\n+                          <Home className=\"h-4 w-4\" />\n+                          {cls.room}\n+                        </span>\n+                      </div>\n                     </div>\n                   </div>\n-                </div>\n-              ))}\n-            </div>\n+                ))}\n+              </div>\n+            </CardHeader>\n           </Card>\n \n           {/* Top Performing Students */}\n-          <Card className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800 p-6\">\n-            <div className=\"flex items-center justify-between mb-6\">\n-              <h2 className=\"text-xl font-semibold\">Top Performing Students</h2>\n-              <Users className=\"h-5 w-5 text-gray-500\" />\n-            </div>\n-            <div className=\"space-y-4\">\n-              {[\n-                {\n-                  id: 1,\n-                  name: \"Emma Thompson\",\n-                  avatar: \"https://images.unsplash.com/photo-1494790108377-be9c29b29330?w=150\",\n-                  progress: 92,\n-                },\n-                {\n-                  id: 2,\n-                  name: \"Michael Chen\",\n-                  avatar: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150\",\n-                  progress: 88,\n-                },\n-              ].map((student) => (\n-                <div key={student.id} className=\"flex items-center gap-4\">\n-                  <img\n-                    src={student.avatar}\n-                    alt={student.name}\n-                    className=\"w-10 h-10 rounded-full object-cover\"\n-                  />\n-                  <div className=\"flex-1\">\n-                    <h3 className=\"font-medium\">{student.name}</h3>\n-                    <div \n-                      className={`progress-bar`}\n-                      data-progress={`${student.progress}`}\n+          <Card className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800\">\n+            <CardHeader className=\"p-4\">\n+              <div className=\"flex items-center justify-between mb-4\">\n+                <h2 className=\"text-lg sm:text-xl font-semibold\">Top Performing Students</h2>\n+                <Users className=\"h-5 w-5 text-gray-500\" />\n+              </div>\n+              <div className=\"space-y-4\">\n+                {[\n+                  {\n+                    id: 1,\n+                    name: \"Emma Thompson\",\n+                    avatar: \"https://images.unsplash.com/photo-1494790108377-be9c29b29330?w=150\",\n+                    progress: 92,\n+                  },\n+                  {\n+                    id: 2,\n+                    name: \"Michael Chen\",\n+                    avatar: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150\",\n+                    progress: 88,\n+                  },\n+                ].map((student) => (\n+                  <div key={student.id} className=\"flex items-center gap-3\">\n+                    <img\n+                      src={student.avatar}\n+                      alt={student.name}\n+                      className=\"w-10 h-10 rounded-full object-cover flex-shrink-0\"\n                     />\n+                    <div className=\"flex-1 min-w-0\">\n+                      <h3 className=\"font-medium truncate\">{student.name}</h3>\n+                      <div className=\"w-full bg-accent/10 rounded-full h-2 mt-2\">\n+                        <div\n+                          className=\"bg-primary h-2 rounded-full transition-all duration-300\"\n+                          style={{ width: `${student.progress}%` }}\n+                        />\n+                      </div>\n+                    </div>\n+                    <span className=\"text-sm font-semibold whitespace-nowrap\">\n+                      {student.progress}%\n+                    </span>\n                   </div>\n-                  <span className=\"text-lg font-semibold\">\n-                    {student.progress}%\n-                  </span>\n-                </div>\n-              ))}\n-            </div>\n+                ))}\n+              </div>\n+            </CardHeader>\n           </Card>\n         </div>\n       </div>\n \n-      {/* Topics and their content\n-      <div className=\"mt-6 space-y-6\">\n-        {topics\n-          .filter(topic => topic.grade_id === selectedGrade?.id)\n+      {/* Topics Section */}\n+      <div className=\"space-y-6\">\n+        {selectedGrade?.topics\n+          .sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n           .map(topic => (\n-            <Card key={topic.id} className=\"border-l-4 border-l-primary\">\n-              <CardHeader>\n-                <CardTitle>{topic.title}</CardTitle>\n+            <Card \n+              key={topic.id} \n+              className={cn(\n+                \"border-l-4 border-l-primary transition-all duration-200\",\n+                \"hover:shadow-md\"\n+              )}\n+            >\n+              <CardHeader className=\"cursor-pointer p-4\" onClick={() => setSelectedTopic(topic)}>\n+                <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-2\">\n+                  <CardTitle className=\"flex items-center gap-2 text-lg sm:text-xl\">\n+                    <BookOpen className=\"h-5 w-5 text-primary flex-shrink-0\" />\n+                    <span className=\"truncate\">{topic.title}</span>\n+                  </CardTitle>\n+                  <Badge variant=\"outline\" className=\"bg-primary/5 whitespace-nowrap\">\n+                    {topic.subtopics?.length || 0} Subtopics\n+                  </Badge>\n+                </div>\n               </CardHeader>\n-              <CardContent>\n+              <CardContent className=\"p-4\">\n                 <div className=\"space-y-4\">\n-                  {subtopics\n-                    .filter(subtopic => subtopic.topic_id === topic.id)\n+                  {topic.subtopics\n+                    ?.sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n                     .map(subtopic => (\n-                      <div key={subtopic.id} className=\"space-y-4\">\n-                        <h3 className=\"text-lg font-semibold\">{subtopic.title}</h3>\n-                        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n-                          {lessons\n-                            .filter(lesson => lesson.subtopic_id === subtopic.id)\n+                      <div \n+                        key={subtopic.id} \n+                        className={cn(\n+                          \"space-y-4 p-4 rounded-lg\",\n+                          \"border border-border/50\",\n+                          \"hover:border-primary/50 transition-colors\",\n+                          selectedSubtopic?.id === subtopic.id && \"border-primary/50 bg-accent/5\"\n+                        )}\n+                      >\n+                        <div \n+                          className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-2 cursor-pointer\"\n+                          onClick={() => setSelectedSubtopic(subtopic)}\n+                        >\n+                          <h3 className=\"text-base sm:text-lg font-semibold flex items-center gap-2\">\n+                            <div className={cn(\n+                              \"w-2 h-2 rounded-full flex-shrink-0\",\n+                              selectedSubtopic?.id === subtopic.id ? \"bg-primary\" : \"bg-muted\"\n+                            )} />\n+                            <span className=\"truncate\">{subtopic.title}</span>\n+                          </h3>\n+                          <Badge variant=\"outline\" className=\"whitespace-nowrap\">\n+                            {subtopic.lessons?.length || 0} Lessons\n+                          </Badge>\n+                        </div>\n+                        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n+                          {subtopic.lessons\n+                            ?.sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n                             .map(lesson => (\n                               <LessonCard \n                                 key={lesson.id}\n-                                lesson={lesson}\n+                                lesson={{\n+                                  ...lesson,\n+                                  color: getColorForIndex(subtopic.lessons.indexOf(lesson)),\n+                                  unlocked: true,\n+                                  completed: false,\n+                                  lessonNumber: `${subtopic.lessons.indexOf(lesson) + 1}`,\n+                                  totalTopics: String(topic.subtopics?.length || 0),\n+                                  difficulty: lesson.metadata?.difficulty || 'Beginner',\n+                                  customSubLessons: [{\n+                                    id: lesson.id,\n+                                    title: lesson.title,\n+                                    unlocked: true,\n+                                    completed: false,\n+                                    duration: lesson.duration || 15,\n+                                    description: lesson.description || ''\n+                                  }]\n+                                }}\n                                 isSelected={selectedLesson?.id === lesson.id}\n                                 onSelect={setSelectedLesson}\n                               />\n-                            ))}\n+                          ))}\n                         </div>\n                       </div>\n                     ))}\n                 </div>\n               </CardContent>\n             </Card>\n           ))}\n-      </div> */}\n+      </div>\n \n-\n-<div className=\"mt-6 space-y-6\">\n-  {selectedGrade?.topics\n-    .sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n-    .map(topic => (\n-      <Card \n-        key={topic.id} \n-        className={cn(\n-          \"border-l-4 border-l-primary transition-all duration-200\",\n-          \"hover:shadow-md\"\n-        )}\n-      >\n-        <CardHeader className=\"cursor-pointer\" onClick={() => setSelectedTopic(topic)}>\n-          <div className=\"flex items-center justify-between\">\n-            <CardTitle className=\"flex items-center gap-2\">\n-              <BookOpen className=\"h-5 w-5 text-primary\" />\n-              {topic.title}\n-            </CardTitle>\n-            <Badge variant=\"outline\" className=\"bg-primary/5\">\n-              {topic.subtopics?.length || 0} Subtopics\n-            </Badge>\n-          </div>\n-        </CardHeader>\n-        <CardContent>\n-          <div className=\"space-y-6\">\n-            {topic.subtopics\n-              ?.sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n-              .map(subtopic => (\n-                <div \n-                  key={subtopic.id} \n-                  className={cn(\n-                    \"space-y-4 p-4 rounded-lg\",\n-                    \"border border-border/50\",\n-                    \"hover:border-primary/50 transition-colors\",\n-                    selectedSubtopic?.id === subtopic.id && \"border-primary/50 bg-accent/5\"\n-                  )}\n-                >\n-                  <div \n-                    className=\"flex items-center justify-between cursor-pointer\"\n-                    onClick={() => setSelectedSubtopic(subtopic)}\n-                  >\n-                    <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n-                      <div className={cn(\n-                        \"w-2 h-2 rounded-full\",\n-                        selectedSubtopic?.id === subtopic.id ? \"bg-primary\" : \"bg-muted\"\n-                      )} />\n-                      {subtopic.title}\n-                    </h3>\n-                    <Badge variant=\"outline\">\n-                      {subtopic.lessons?.length || 0} Lessons\n-                    </Badge>\n+      {/* Selected Lesson Header - Sticky */}\n+      {selectedLesson && (\n+        <div className=\"sticky top-0 z-30 -mx-4 px-4 sm:mx-0 sm:px-0 py-2 bg-background/80 backdrop-blur-lg\">\n+          <Card className={`${selectedLesson.color} text-white rounded-xl`}>\n+            <CardHeader className=\"p-3 sm:p-4\">\n+              <div className=\"flex flex-col gap-3\">\n+                <CardTitle className=\"text-lg sm:text-2xl truncate\">{selectedLesson.title}</CardTitle>\n+                <div className=\"flex flex-wrap gap-3 text-sm\">\n+                  <div className=\"flex items-center gap-2\">\n+                    <BookOpen className=\"h-4 w-4\" />\n+                    <span className=\"truncate\">{selectedClass?.name}</span>\n                   </div>\n-                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n-                    {subtopic.lessons\n-                      ?.sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n-                      .map(lesson => (\n-                        <LessonCard \n-                          key={lesson.id}\n-                          lesson={{\n-                            ...lesson,\n-                            color: getColorForIndex(subtopic.lessons.indexOf(lesson)),\n-                            unlocked: true, // You can add your unlock logic here\n-                            completed: false, // Add completion logic\n-                            lessonNumber: `${subtopic.lessons.indexOf(lesson) + 1}`,\n-                            totalTopics: String(topic.subtopics?.length || 0),\n-                            difficulty: lesson.metadata?.difficulty || 'Beginner',\n-                            customSubLessons: [{\n-                              id: lesson.id,\n-                              title: lesson.title,\n-                              unlocked: true,\n-                              completed: false,\n-                              duration: lesson.duration || 15,\n-                              description: lesson.description || ''\n-                            }]\n-                          }}\n-                          isSelected={selectedLesson?.id === lesson.id}\n-                          onSelect={setSelectedLesson}\n-                        />\n-                    ))}\n+                  <div className=\"flex items-center gap-2\">\n+                    <Hash className=\"h-4 w-4\" />\n+                    <span>Lesson {selectedLesson.lessonNumber}</span>\n                   </div>\n-                </div>\n-              ))}\n-          </div>\n-        </CardContent>\n-      </Card>\n-    ))}\n-</div>\n-\n-      <div className=\"sticky top-0 z-30 w-full\">\n-        {selectedLesson && (\n-          <Card className={`${selectedLesson.color} text-white rounded-xl`}>\n-            <CardHeader className=\"p-2 md:p-4 md:pl-6\">\n-              <CardTitle className=\"text-2xl\">{selectedLesson.title}</CardTitle>\n-              <div className=\"flex flex-row md:flex-row items-center text-white text-sm space-y-2 md:space-y-0 md:space-x-4 md:p-2\">\n-                <div className=\"flex items-center space-x-2\">\n-                  <BookOpen className=\"h-5 w-5 text-white\" />\n-                  <div className=\"text-sm font-medium\">\n-                    {selectedClass?.name}{\" \"}\n+                  <div className=\"flex items-center gap-2\">\n+                    <Clock className=\"h-4 w-4\" />\n+                    <span>{selectedLesson.duration} min</span>\n                   </div>\n-                </div>\n-\n-                <div className=\"flex items-center space-x-2\">\n-                  <span>Lesson {selectedLesson.lessonNumber}</span>\n-                </div>\n-\n-                <div className=\"flex items-center space-x-2\">\n-                  <span className=\"flex items-center space-x-1\">\n-                    <Clock className=\"h-5 w-5 text-white\" />\n-                    <span>{selectedLesson.duration} minutes</span>\n-                  </span>\n-                </div>\n-\n-                <div className=\"flex items-center space-x-2\">\n-                  <span className=\"flex items-center space-x-1\">\n-                    <BookOpen className=\"h-5 w-5 text-white\" />\n+                  <div className=\"flex items-center gap-2\">\n+                    <Layers className=\"h-4 w-4\" />\n                     <span>{selectedLesson.totalTopics} Topics</span>\n-                  </span>\n-                </div>\n-\n-                <div className=\"flex items-center space-x-2\">\n-                  <div className=\"flex items-center space-x-1\">\n-                    <CheckCircle2 className=\"h-5 w-5 text-white\" />\n-                    <span>1/5 Completed</span>\n                   </div>\n+                  <div className=\"flex items-center gap-2\">\n+                    <CheckCircle2 className=\"h-4 w-4\" />\n+                    <span>1/5 Complete</span>\n+                  </div>\n                 </div>\n               </div>\n             </CardHeader>\n           </Card>\n-        )}\n-      </div>\n+        </div>\n+      )}\n \n       {/* Dialog */}\n       <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n-        <DialogContent>\n-          <DialogHeader>\n+        <DialogContent className=\"sm:max-w-[425px] p-0\">\n+          <DialogHeader className=\"p-6 pb-0\">\n             <div className=\"flex flex-col space-y-1.5\">\n-              <DialogTitle>\n+              <DialogTitle className=\"flex items-center gap-2 text-lg\">\n                 {selectedSubLesson?.title}\n                 {selectedSubLesson?.completed && (\n-                  <CheckCircle2 className=\"inline-block ml-2 h-5 w-5 text-green-500\" />\n+                  <CheckCircle2 className=\"h-5 w-5 text-green-500 flex-shrink-0\" />\n                 )}\n               </DialogTitle>\n-              <DialogDescription>\n-                <span className=\"flex items-center gap-2 text-sm\">\n-                  Part of {currentLesson?.title}\n-                </span>\n-                <span className=\"block mt-2 text-sm text-muted-foreground\">\n+              <DialogDescription className=\"space-y-4\">\n+                <div className=\"flex flex-wrap gap-3 text-sm\">\n+                  <span className=\"flex items-center gap-2\">\n+                    <Clock className=\"h-4 w-4\" />\n+                    {selectedSubLesson?.duration} minutes\n+                  </span>\n+                  <span className=\"flex items-center gap-2\">\n+                    <BookOpen className=\"h-4 w-4\" />\n+                    Part of {currentLesson?.title}\n+                  </span>\n+                </div>\n+                <p className=\"text-sm text-muted-foreground\">\n                   {selectedSubLesson?.description}\n-                </span>\n+                </p>\n                 {selectedSubLesson?.completed && (\n-                  <div className=\"mt-4 p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n+                  <div className=\"p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                     <span className=\"text-green-700 dark:text-green-300 text-sm\">\n                       You have completed this lesson\n                     </span>\n                   </div>\n                 )}\n               </DialogDescription>\n             </div>\n           </DialogHeader>\n-          <DialogFooter>\n+          <DialogFooter className=\"p-6 pt-0\">\n             {!selectedSubLesson?.unlocked ? (\n-              <span className=\"text-sm text-muted-foreground\">\n+              <p className=\"text-sm text-muted-foreground\">\n                 Complete previous lessons to unlock this content\n-              </span>\n+              </p>\n             ) : selectedSubLesson.completed ? (\n-              <>\n+              <div className=\"flex flex-col sm:flex-row gap-2 w-full\">\n                 <Button\n+                  className=\"flex-1\"\n                   onClick={() => {\n                     if (currentLesson?.id && selectedSubLesson?.id) {\n                       handleStartLesson(currentLesson.id, selectedSubLesson.id);\n                     }\n@@ -1018,8 +1000,9 @@\n                   <ArrowRight className=\"ml-2 h-4 w-4\" />\n                 </Button>\n                 <Button\n                   variant=\"outline\"\n+                  className=\"flex-1\"\n                   onClick={() => {\n                     if (currentLesson?.id && selectedSubLesson?.id) {\n                       handleRestartLesson(currentLesson.id, selectedSubLesson.id);\n                     }\n@@ -1028,11 +1011,12 @@\n                 >\n                   Restart\n                   <RotateCcw className=\"ml-2 h-4 w-4\" />\n                 </Button>\n-              </>\n+              </div>\n             ) : (\n               <Button\n+                className=\"w-full sm:w-auto\"\n                 onClick={() => {\n                   if (currentLesson?.id && selectedSubLesson?.id) {\n                     handleStartLesson(currentLesson.id, selectedSubLesson.id);\n                   }\n@@ -1046,63 +1030,68 @@\n           </DialogFooter>\n         </DialogContent>\n       </Dialog>\n \n-      {/* Rest of the component */}\n-      <div className=\"space-y-8 -z-10 pb-[100vh]\">\n+      {/* Lessons Timeline */}\n+      <div className=\"space-y-8 pb-[100vh]\">\n         {lessons.map((lesson, index) => (\n           <div\n             id={lesson.id}\n             ref={setLessonRef(index)}\n             key={lesson.id}\n-            className=\"space-y-4 mb-8\"\n+            className=\"space-y-4\"\n           >\n-            <div className={`pt-2 pb-2 px-4 ${index === 0 ? '-mt-10' : ''}`}>\n+            <div className={cn(\"pt-2 pb-2 px-4\", index === 0 && \"-mt-10\")}>\n               <div className=\"flex w-full justify-center\">\n                 <div className=\"flex items-center relative max-w-lg w-full\">\n-                  <div className=\"flex-grow border-t border-gray-300 dark:border-gray-700\"></div>\n-                  <div className={`${lesson.color} z-10 text-white rounded-3xl text-xl px-4`}>\n+                  <div className=\"flex-grow border-t border-gray-300 dark:border-gray-700\" />\n+                  <div className={cn(\n+                    lesson.color,\n+                    \"z-10 text-white rounded-3xl px-4 py-2 text-base sm:text-xl truncate\"\n+                  )}>\n                     {lesson.title}\n                   </div>\n-                  <div className=\"flex-grow border-t border-gray-300 dark:border-gray-700\"></div>\n+                  <div className=\"flex-grow border-t border-gray-300 dark:border-gray-700\" />\n                 </div>\n               </div>\n             </div>\n \n-            <div className=\"flex flex-col gap-4\">\n+            <div className=\"flex flex-col gap-3\">\n               {lesson.customSubLessons.map((subLesson) => (\n                 <Link\n                   to={`/lesson/${lesson.id}/${subLesson.id}`}\n                   key={subLesson.id}\n                   onClick={(e) => handleSubLessonClick(e, subLesson, lesson)}\n-                  className={`${isLocked && !subLesson.unlocked ? \"pointer-events-none\" : \"\"}`}\n+                  className={cn(\n+                    isLocked && !subLesson.unlocked && \"pointer-events-none\"\n+                  )}\n                 >\n                   <Card className={cn(\n                     \"hover:border-primary transition-colors\",\n                     !subLesson.unlocked && \"opacity-50\"\n                   )}>\n                     <CardContent className=\"p-4\">\n-                      <div className=\"flex items-center justify-between\">\n-                        <div className=\"flex items-center gap-2\">\n+                      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-3\">\n+                        <div className=\"flex items-start sm:items-center gap-3\">\n                           {subLesson.unlocked ? (\n-                            <BookOpen className=\"h-5 w-5 text-primary\" />\n+                            <BookOpen className=\"h-5 w-5 text-primary flex-shrink-0\" />\n                           ) : (\n-                            <Lock className=\"h-5 w-5 text-muted-foreground\" />\n+                            <Lock className=\"h-5 w-5 text-muted-foreground flex-shrink-0\" />\n                           )}\n                           <div>\n                             <h3 className=\"font-medium\">{subLesson.title}</h3>\n-                            <p className=\"text-sm text-muted-foreground\">\n+                            <p className=\"text-sm text-muted-foreground line-clamp-2 sm:line-clamp-1\">\n                               {subLesson.description}\n                             </p>\n                           </div>\n                         </div>\n-                        <div className=\"flex items-center gap-4\">\n-                          <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n+                        <div className=\"flex items-center gap-3\">\n+                          <div className=\"flex items-center gap-1 text-sm text-muted-foreground whitespace-nowrap\">\n                             <Clock className=\"h-4 w-4\" />\n                             {subLesson.duration} min\n                           </div>\n                           {subLesson.completed && (\n-                            <CheckCircle2 className=\"h-5 w-5 text-green-500\" />\n+                            <CheckCircle2 className=\"h-5 w-5 text-green-500 flex-shrink-0\" />\n                           )}\n                         </div>\n                       </div>\n                     </CardContent>\n"
                },
                {
                    "date": 1739137116554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n import { useEffect, useRef, useState, memo, useCallback, useMemo } from \"react\";\n import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n import { Progress } from \"@/components/ui/progress\";\n-import { ArrowRight, BookOpen, Calendar, CheckCircle2, Clock, Lock, Plus, RotateCcw, Unlock, Users, Shield, GraduationCap, Home, Layers } from \"lucide-react\";\n+import { ArrowRight, BookOpen, Calendar, CheckCircle2, Clock, Lock, Plus, RotateCcw, Unlock, Users, Shield, GraduationCap, Home, Layers, Hash } from \"lucide-react\";\n import { Badge } from \"@/components/ui/badge\";\n import { useNavigate as useRouterNavigate } from \"react-router-dom\";\n import { Link } from \"react-router-dom\";\n import ClassHeader from \"./ClassHeader\";\n"
                },
                {
                    "date": 1739137431944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n import { useEffect, useRef, useState, memo, useCallback, useMemo } from \"react\";\n import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n import { Progress } from \"@/components/ui/progress\";\n-import { ArrowRight, BookOpen, Calendar, CheckCircle2, Clock, Lock, Plus, RotateCcw, Unlock, Users, Shield, GraduationCap, Home, Layers, Hash } from \"lucide-react\";\n+import { ArrowRight, BookOpen, Calendar, CheckCircle2, Clock, Lock, Plus, RotateCcw, Unlock, Users, Shield, GraduationCap } from \"lucide-react\";\n import { Badge } from \"@/components/ui/badge\";\n import { useNavigate as useRouterNavigate } from \"react-router-dom\";\n import { Link } from \"react-router-dom\";\n import ClassHeader from \"./ClassHeader\";\n@@ -656,340 +656,358 @@\n     );\n   }\n \n   return (\n-    <div className=\"w-full max-w-6xl mx-auto px-4 sm:px-6 space-y-6\">\n-      {/* Grade Selection - Horizontal scrollable on mobile */}\n-      <div className=\"relative\">\n-        <div className=\"flex gap-3 overflow-x-auto pb-2 scrollbar-hide -mx-4 px-4 sm:mx-0 sm:px-0\">\n-          {grades\n-            .sort((a, b) => a.level - b.level)\n-            .map(grade => (\n-              <Card\n-                key={grade.id}\n-                className={cn(\n-                  \"flex-shrink-0 cursor-pointer transition-all duration-200 min-w-[150px] sm:min-w-0\",\n-                  selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/55\"\n-                )}\n-                onClick={() => setSelectedGrade(grade)}\n-              >\n-                <CardHeader className=\"p-3 sm:p-4\">\n-                  <div className=\"flex items-center gap-2\">\n-                    <GraduationCap className=\"h-5 w-5 text-primary\" />\n-                    <span className=\"font-medium\">{grade.name}</span>\n-                  </div>\n-                </CardHeader>\n-              </Card>\n-            ))}\n-        </div>\n+    <div className=\"max-w-6xl w-full relative\">\n+      {/* Grade Selection */}\n+      <div className=\"flex gap-4 overflow-x-auto pb-2\">\n+        {grades\n+          .sort((a, b) => a.level - b.level)\n+          .map(grade => (\n+            <Card\n+              key={grade.id}\n+              className={cn(\n+                \"cursor-pointer transition-all duration-200\",\n+                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/55 bg-color-secondary\"\n+              )}\n+              onClick={() => setSelectedGrade(grade)}\n+            >\n+              <CardHeader className=\"p-4\">\n+                <div className=\"flex items-center gap-3\">\n+                  <GraduationCap className=\"h-5 w-5 text-primary\" />\n+                  <span className=\"font-medium\">{grade.name}</span>\n+                </div>\n+              </CardHeader>\n+            </Card>\n+          ))}\n       </div>\n \n+      \n+\n       {/* Overview Section */}\n-      <div className=\"space-y-4\">\n-        <Card className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800\">\n-          <CardHeader className=\"p-4\">\n-            <CardTitle className=\"text-xl sm:text-2xl mb-4\">{selectedClass?.name}</CardTitle>\n-            <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-4\">\n+      <div className=\"mb-6\">\n+        <Card className=\"text-gray-700 bg-white dark:bg-gray-900 rounded-xl mb-4 border border-gray-200 dark:border-gray-800\">\n+          <CardHeader>\n+            <CardTitle className=\"text-2xl\">{selectedClass?.name}</CardTitle>\n+            <div className=\"grid grid-cols-4 gap-4\">\n               <div className=\"flex items-center space-x-2\">\n-                <Users size={16} className=\"text-blue-300 flex-shrink-0\" />\n-                <span className=\"text-sm font-medium truncate\">\n+                <Users size={16} className=\"text-blue-300\" />\n+                <span className=\"text-sm font-medium\">\n                   {classStudents.length} Students\n                 </span>\n               </div>\n               <div className=\"flex items-center space-x-2\">\n-                <BookOpen size={16} className=\"text-green-300 flex-shrink-0\" />\n-                <span className=\"text-sm font-medium truncate\">\n+                <BookOpen size={16} className=\"text-green-300\" />\n+                <span className=\"text-sm font-medium\">\n                   {lessons.length} Lessons\n                 </span>\n               </div>\n               <div className=\"flex items-center space-x-2\">\n-                <Calendar size={16} className=\"text-purple-300 flex-shrink-0\" />\n-                <span className=\"text-sm font-medium truncate\">\n+                <Calendar size={16} className=\"text-purple-300\" />\n+                <span className=\"text-sm font-medium\">\n                   0 Assignments\n                 </span>\n               </div>\n-              <div className=\"flex items-center space-x-2\">\n-                <CheckCircle2 size={16} className=\"text-green-300 flex-shrink-0\" />\n-                <span className=\"text-sm font-medium truncate\">\n-                  {Math.round((lessons.filter(l => l.completed).length / lessons.length) * 100)}% Complete\n-                </span>\n+              <div className=\"text-sm mt-2\">\n+                {Math.round((lessons.filter(l => l.completed).length / lessons.length) * 100)}% Completed\n               </div>\n             </div>\n           </CardHeader>\n         </Card>\n \n-        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n+        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n           {/* Upcoming Classes */}\n-          <Card className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800\">\n-            <CardHeader className=\"p-4\">\n-              <div className=\"flex items-center justify-between mb-4\">\n-                <h2 className=\"text-lg sm:text-xl font-semibold\">Upcoming Classes</h2>\n-                <Calendar className=\"h-5 w-5 text-gray-500\" />\n-              </div>\n-              <div className=\"space-y-3\">\n-                {[\n-                  {\n-                    id: 1,\n-                    subject: \"English Literature\",\n-                    time: \"09:00 AM\",\n-                    students: 28,\n-                    topic: \"Shakespeare: Romeo & Juliet\",\n-                    room: \"Room 101\",\n-                  },\n-                  {\n-                    id: 2,\n-                    subject: \"Creative Writing\",\n-                    time: \"11:30 AM\",\n-                    students: 24,\n-                    topic: \"Character Development\",\n-                    room: \"Room 203\",\n-                  },\n-                ].map((cls) => (\n-                  <div\n-                    key={cls.id}\n-                    className=\"p-3 bg-accent/5 rounded-lg hover:bg-accent/10 transition-colors\"\n-                  >\n-                    <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2\">\n-                      <div>\n-                        <h3 className=\"font-medium\">{cls.subject}</h3>\n-                        <p className=\"text-sm text-muted-foreground\">{cls.topic}</p>\n-                      </div>\n-                      <div className=\"flex flex-wrap gap-2 text-sm text-muted-foreground\">\n-                        <span className=\"inline-flex items-center gap-1\">\n-                          <Clock className=\"h-4 w-4\" />\n-                          {cls.time}\n-                        </span>\n-                        <span className=\"inline-flex items-center gap-1\">\n-                          <Users className=\"h-4 w-4\" />\n-                          {cls.students}\n-                        </span>\n-                        <span className=\"inline-flex items-center gap-1\">\n-                          <Home className=\"h-4 w-4\" />\n-                          {cls.room}\n-                        </span>\n-                      </div>\n+          <Card className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800 p-6\">\n+            <div className=\"flex items-center justify-between mb-6\">\n+              <h2 className=\"text-xl font-semibold\">Upcoming Classes</h2>\n+              <Calendar className=\"h-5 w-5 text-gray-500\" />\n+            </div>\n+            <div className=\"space-y-4\">\n+              {[\n+                {\n+                  id: 1,\n+                  subject: \"English Literature\",\n+                  time: \"09:00 AM\",\n+                  students: 28,\n+                  topic: \"Shakespeare: Romeo & Juliet\",\n+                  room: \"Room 101\",\n+                },\n+                {\n+                  id: 2,\n+                  subject: \"Creative Writing\",\n+                  time: \"11:30 AM\",\n+                  students: 24,\n+                  topic: \"Character Development\",\n+                  room: \"Room 203\",\n+                },\n+              ].map((cls) => (\n+                <div\n+                  key={cls.id}\n+                  className=\"flex items-center justify-between p-4 bg-white dark:bg-gray-900 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors\"\n+                >\n+                  <div className=\"flex-1\">\n+                    <h3 className=\"font-medium\">{cls.subject}</h3>\n+                    <p className=\"text-sm text-gray-600\">{cls.topic}</p>\n+                    <div className=\"flex items-center gap-4 mt-2 text-sm text-gray-500\">\n+                      <span>{cls.time}</span>\n+                      <span>•</span>\n+                      <span>{cls.room}</span>\n+                      <span>•</span>\n+                      <span>{cls.students} students</span>\n                     </div>\n                   </div>\n-                ))}\n-              </div>\n-            </CardHeader>\n+                </div>\n+              ))}\n+            </div>\n           </Card>\n \n           {/* Top Performing Students */}\n-          <Card className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800\">\n-            <CardHeader className=\"p-4\">\n-              <div className=\"flex items-center justify-between mb-4\">\n-                <h2 className=\"text-lg sm:text-xl font-semibold\">Top Performing Students</h2>\n-                <Users className=\"h-5 w-5 text-gray-500\" />\n-              </div>\n-              <div className=\"space-y-4\">\n-                {[\n-                  {\n-                    id: 1,\n-                    name: \"Emma Thompson\",\n-                    avatar: \"https://images.unsplash.com/photo-1494790108377-be9c29b29330?w=150\",\n-                    progress: 92,\n-                  },\n-                  {\n-                    id: 2,\n-                    name: \"Michael Chen\",\n-                    avatar: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150\",\n-                    progress: 88,\n-                  },\n-                ].map((student) => (\n-                  <div key={student.id} className=\"flex items-center gap-3\">\n-                    <img\n-                      src={student.avatar}\n-                      alt={student.name}\n-                      className=\"w-10 h-10 rounded-full object-cover flex-shrink-0\"\n+          <Card className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800 p-6\">\n+            <div className=\"flex items-center justify-between mb-6\">\n+              <h2 className=\"text-xl font-semibold\">Top Performing Students</h2>\n+              <Users className=\"h-5 w-5 text-gray-500\" />\n+            </div>\n+            <div className=\"space-y-4\">\n+              {[\n+                {\n+                  id: 1,\n+                  name: \"Emma Thompson\",\n+                  avatar: \"https://images.unsplash.com/photo-1494790108377-be9c29b29330?w=150\",\n+                  progress: 92,\n+                },\n+                {\n+                  id: 2,\n+                  name: \"Michael Chen\",\n+                  avatar: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150\",\n+                  progress: 88,\n+                },\n+              ].map((student) => (\n+                <div key={student.id} className=\"flex items-center gap-4\">\n+                  <img\n+                    src={student.avatar}\n+                    alt={student.name}\n+                    className=\"w-10 h-10 rounded-full object-cover\"\n+                  />\n+                  <div className=\"flex-1\">\n+                    <h3 className=\"font-medium\">{student.name}</h3>\n+                    <div \n+                      className={`progress-bar`}\n+                      data-progress={`${student.progress}`}\n                     />\n-                    <div className=\"flex-1 min-w-0\">\n-                      <h3 className=\"font-medium truncate\">{student.name}</h3>\n-                      <div className=\"w-full bg-accent/10 rounded-full h-2 mt-2\">\n-                        <div\n-                          className=\"bg-primary h-2 rounded-full transition-all duration-300\"\n-                          style={{ width: `${student.progress}%` }}\n-                        />\n-                      </div>\n-                    </div>\n-                    <span className=\"text-sm font-semibold whitespace-nowrap\">\n-                      {student.progress}%\n-                    </span>\n                   </div>\n-                ))}\n-              </div>\n-            </CardHeader>\n+                  <span className=\"text-lg font-semibold\">\n+                    {student.progress}%\n+                  </span>\n+                </div>\n+              ))}\n+            </div>\n           </Card>\n         </div>\n       </div>\n \n-      {/* Topics Section */}\n-      <div className=\"space-y-6\">\n-        {selectedGrade?.topics\n-          .sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n+      {/* Topics and their content\n+      <div className=\"mt-6 space-y-6\">\n+        {topics\n+          .filter(topic => topic.grade_id === selectedGrade?.id)\n           .map(topic => (\n-            <Card \n-              key={topic.id} \n-              className={cn(\n-                \"border-l-4 border-l-primary transition-all duration-200\",\n-                \"hover:shadow-md\"\n-              )}\n-            >\n-              <CardHeader className=\"cursor-pointer p-4\" onClick={() => setSelectedTopic(topic)}>\n-                <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-2\">\n-                  <CardTitle className=\"flex items-center gap-2 text-lg sm:text-xl\">\n-                    <BookOpen className=\"h-5 w-5 text-primary flex-shrink-0\" />\n-                    <span className=\"truncate\">{topic.title}</span>\n-                  </CardTitle>\n-                  <Badge variant=\"outline\" className=\"bg-primary/5 whitespace-nowrap\">\n-                    {topic.subtopics?.length || 0} Subtopics\n-                  </Badge>\n-                </div>\n+            <Card key={topic.id} className=\"border-l-4 border-l-primary\">\n+              <CardHeader>\n+                <CardTitle>{topic.title}</CardTitle>\n               </CardHeader>\n-              <CardContent className=\"p-4\">\n+              <CardContent>\n                 <div className=\"space-y-4\">\n-                  {topic.subtopics\n-                    ?.sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n+                  {subtopics\n+                    .filter(subtopic => subtopic.topic_id === topic.id)\n                     .map(subtopic => (\n-                      <div \n-                        key={subtopic.id} \n-                        className={cn(\n-                          \"space-y-4 p-4 rounded-lg\",\n-                          \"border border-border/50\",\n-                          \"hover:border-primary/50 transition-colors\",\n-                          selectedSubtopic?.id === subtopic.id && \"border-primary/50 bg-accent/5\"\n-                        )}\n-                      >\n-                        <div \n-                          className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-2 cursor-pointer\"\n-                          onClick={() => setSelectedSubtopic(subtopic)}\n-                        >\n-                          <h3 className=\"text-base sm:text-lg font-semibold flex items-center gap-2\">\n-                            <div className={cn(\n-                              \"w-2 h-2 rounded-full flex-shrink-0\",\n-                              selectedSubtopic?.id === subtopic.id ? \"bg-primary\" : \"bg-muted\"\n-                            )} />\n-                            <span className=\"truncate\">{subtopic.title}</span>\n-                          </h3>\n-                          <Badge variant=\"outline\" className=\"whitespace-nowrap\">\n-                            {subtopic.lessons?.length || 0} Lessons\n-                          </Badge>\n-                        </div>\n-                        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n-                          {subtopic.lessons\n-                            ?.sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n+                      <div key={subtopic.id} className=\"space-y-4\">\n+                        <h3 className=\"text-lg font-semibold\">{subtopic.title}</h3>\n+                        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n+                          {lessons\n+                            .filter(lesson => lesson.subtopic_id === subtopic.id)\n                             .map(lesson => (\n                               <LessonCard \n                                 key={lesson.id}\n-                                lesson={{\n-                                  ...lesson,\n-                                  color: getColorForIndex(subtopic.lessons.indexOf(lesson)),\n-                                  unlocked: true,\n-                                  completed: false,\n-                                  lessonNumber: `${subtopic.lessons.indexOf(lesson) + 1}`,\n-                                  totalTopics: String(topic.subtopics?.length || 0),\n-                                  difficulty: lesson.metadata?.difficulty || 'Beginner',\n-                                  customSubLessons: [{\n-                                    id: lesson.id,\n-                                    title: lesson.title,\n-                                    unlocked: true,\n-                                    completed: false,\n-                                    duration: lesson.duration || 15,\n-                                    description: lesson.description || ''\n-                                  }]\n-                                }}\n+                                lesson={lesson}\n                                 isSelected={selectedLesson?.id === lesson.id}\n                                 onSelect={setSelectedLesson}\n                               />\n-                          ))}\n+                            ))}\n                         </div>\n                       </div>\n                     ))}\n                 </div>\n               </CardContent>\n             </Card>\n           ))}\n-      </div>\n+      </div> */}\n \n-      {/* Selected Lesson Header - Sticky */}\n-      {selectedLesson && (\n-        <div className=\"sticky top-0 z-30 -mx-4 px-4 sm:mx-0 sm:px-0 py-2 bg-background/80 backdrop-blur-lg\">\n-          <Card className={`${selectedLesson.color} text-white rounded-xl`}>\n-            <CardHeader className=\"p-3 sm:p-4\">\n-              <div className=\"flex flex-col gap-3\">\n-                <CardTitle className=\"text-lg sm:text-2xl truncate\">{selectedLesson.title}</CardTitle>\n-                <div className=\"flex flex-wrap gap-3 text-sm\">\n-                  <div className=\"flex items-center gap-2\">\n-                    <BookOpen className=\"h-4 w-4\" />\n-                    <span className=\"truncate\">{selectedClass?.name}</span>\n+\n+<div className=\"mt-6 space-y-6\">\n+  {selectedGrade?.topics\n+    .sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n+    .map(topic => (\n+      <Card \n+        key={topic.id} \n+        className={cn(\n+          \"border-l-4 border-l-primary transition-all duration-200\",\n+          \"hover:shadow-md\"\n+        )}\n+      >\n+        <CardHeader className=\"cursor-pointer\" onClick={() => setSelectedTopic(topic)}>\n+          <div className=\"flex items-center justify-between\">\n+            <CardTitle className=\"flex items-center gap-2\">\n+              <BookOpen className=\"h-5 w-5 text-primary\" />\n+              {topic.title}\n+            </CardTitle>\n+            <Badge variant=\"outline\" className=\"bg-primary/5\">\n+              {topic.subtopics?.length || 0} Subtopics\n+            </Badge>\n+          </div>\n+        </CardHeader>\n+        <CardContent>\n+          <div className=\"space-y-6\">\n+            {topic.subtopics\n+              ?.sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n+              .map(subtopic => (\n+                <div \n+                  key={subtopic.id} \n+                  className={cn(\n+                    \"space-y-4 p-4 rounded-lg\",\n+                    \"border border-border/50\",\n+                    \"hover:border-primary/50 transition-colors\",\n+                    selectedSubtopic?.id === subtopic.id && \"border-primary/50 bg-accent/5\"\n+                  )}\n+                >\n+                  <div \n+                    className=\"flex items-center justify-between cursor-pointer\"\n+                    onClick={() => setSelectedSubtopic(subtopic)}\n+                  >\n+                    <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n+                      <div className={cn(\n+                        \"w-2 h-2 rounded-full\",\n+                        selectedSubtopic?.id === subtopic.id ? \"bg-primary\" : \"bg-muted\"\n+                      )} />\n+                      {subtopic.title}\n+                    </h3>\n+                    <Badge variant=\"outline\">\n+                      {subtopic.lessons?.length || 0} Lessons\n+                    </Badge>\n                   </div>\n-                  <div className=\"flex items-center gap-2\">\n-                    <Hash className=\"h-4 w-4\" />\n-                    <span>Lesson {selectedLesson.lessonNumber}</span>\n+                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n+                    {subtopic.lessons\n+                      ?.sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n+                      .map(lesson => (\n+                        <LessonCard \n+                          key={lesson.id}\n+                          lesson={{\n+                            ...lesson,\n+                            color: getColorForIndex(subtopic.lessons.indexOf(lesson)),\n+                            unlocked: true, // You can add your unlock logic here\n+                            completed: false, // Add completion logic\n+                            lessonNumber: `${subtopic.lessons.indexOf(lesson) + 1}`,\n+                            totalTopics: String(topic.subtopics?.length || 0),\n+                            difficulty: lesson.metadata?.difficulty || 'Beginner',\n+                            customSubLessons: [{\n+                              id: lesson.id,\n+                              title: lesson.title,\n+                              unlocked: true,\n+                              completed: false,\n+                              duration: lesson.duration || 15,\n+                              description: lesson.description || ''\n+                            }]\n+                          }}\n+                          isSelected={selectedLesson?.id === lesson.id}\n+                          onSelect={setSelectedLesson}\n+                        />\n+                    ))}\n                   </div>\n-                  <div className=\"flex items-center gap-2\">\n-                    <Clock className=\"h-4 w-4\" />\n-                    <span>{selectedLesson.duration} min</span>\n+                </div>\n+              ))}\n+          </div>\n+        </CardContent>\n+      </Card>\n+    ))}\n+</div>\n+\n+      <div className=\"sticky top-0 z-30 w-full\">\n+        {selectedLesson && (\n+          <Card className={`${selectedLesson.color} text-white rounded-xl`}>\n+            <CardHeader className=\"p-2 md:p-4 md:pl-6\">\n+              <CardTitle className=\"text-2xl\">{selectedLesson.title}</CardTitle>\n+              <div className=\"flex flex-row md:flex-row items-center text-white text-sm space-y-2 md:space-y-0 md:space-x-4 md:p-2\">\n+                <div className=\"flex items-center space-x-2\">\n+                  <BookOpen className=\"h-5 w-5 text-white\" />\n+                  <div className=\"text-sm font-medium\">\n+                    {selectedClass?.name}{\" \"}\n                   </div>\n-                  <div className=\"flex items-center gap-2\">\n-                    <Layers className=\"h-4 w-4\" />\n+                </div>\n+\n+                <div className=\"flex items-center space-x-2\">\n+                  <span>Lesson {selectedLesson.lessonNumber}</span>\n+                </div>\n+\n+                <div className=\"flex items-center space-x-2\">\n+                  <span className=\"flex items-center space-x-1\">\n+                    <Clock className=\"h-5 w-5 text-white\" />\n+                    <span>{selectedLesson.duration} minutes</span>\n+                  </span>\n+                </div>\n+\n+                <div className=\"flex items-center space-x-2\">\n+                  <span className=\"flex items-center space-x-1\">\n+                    <BookOpen className=\"h-5 w-5 text-white\" />\n                     <span>{selectedLesson.totalTopics} Topics</span>\n+                  </span>\n+                </div>\n+\n+                <div className=\"flex items-center space-x-2\">\n+                  <div className=\"flex items-center space-x-1\">\n+                    <CheckCircle2 className=\"h-5 w-5 text-white\" />\n+                    <span>1/5 Completed</span>\n                   </div>\n-                  <div className=\"flex items-center gap-2\">\n-                    <CheckCircle2 className=\"h-4 w-4\" />\n-                    <span>1/5 Complete</span>\n-                  </div>\n                 </div>\n               </div>\n             </CardHeader>\n           </Card>\n-        </div>\n-      )}\n+        )}\n+      </div>\n \n       {/* Dialog */}\n       <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n-        <DialogContent className=\"sm:max-w-[425px] p-0\">\n-          <DialogHeader className=\"p-6 pb-0\">\n+        <DialogContent>\n+          <DialogHeader>\n             <div className=\"flex flex-col space-y-1.5\">\n-              <DialogTitle className=\"flex items-center gap-2 text-lg\">\n+              <DialogTitle>\n                 {selectedSubLesson?.title}\n                 {selectedSubLesson?.completed && (\n-                  <CheckCircle2 className=\"h-5 w-5 text-green-500 flex-shrink-0\" />\n+                  <CheckCircle2 className=\"inline-block ml-2 h-5 w-5 text-green-500\" />\n                 )}\n               </DialogTitle>\n-              <DialogDescription className=\"space-y-4\">\n-                <div className=\"flex flex-wrap gap-3 text-sm\">\n-                  <span className=\"flex items-center gap-2\">\n-                    <Clock className=\"h-4 w-4\" />\n-                    {selectedSubLesson?.duration} minutes\n-                  </span>\n-                  <span className=\"flex items-center gap-2\">\n-                    <BookOpen className=\"h-4 w-4\" />\n-                    Part of {currentLesson?.title}\n-                  </span>\n-                </div>\n-                <p className=\"text-sm text-muted-foreground\">\n+              <DialogDescription>\n+                <span className=\"flex items-center gap-2 text-sm\">\n+                  Part of {currentLesson?.title}\n+                </span>\n+                <span className=\"block mt-2 text-sm text-muted-foreground\">\n                   {selectedSubLesson?.description}\n-                </p>\n+                </span>\n                 {selectedSubLesson?.completed && (\n-                  <div className=\"p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n+                  <div className=\"mt-4 p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                     <span className=\"text-green-700 dark:text-green-300 text-sm\">\n                       You have completed this lesson\n                     </span>\n                   </div>\n                 )}\n               </DialogDescription>\n             </div>\n           </DialogHeader>\n-          <DialogFooter className=\"p-6 pt-0\">\n+          <DialogFooter>\n             {!selectedSubLesson?.unlocked ? (\n-              <p className=\"text-sm text-muted-foreground\">\n+              <span className=\"text-sm text-muted-foreground\">\n                 Complete previous lessons to unlock this content\n-              </p>\n+              </span>\n             ) : selectedSubLesson.completed ? (\n-              <div className=\"flex flex-col sm:flex-row gap-2 w-full\">\n+              <>\n                 <Button\n-                  className=\"flex-1\"\n                   onClick={() => {\n                     if (currentLesson?.id && selectedSubLesson?.id) {\n                       handleStartLesson(currentLesson.id, selectedSubLesson.id);\n                     }\n@@ -1000,9 +1018,8 @@\n                   <ArrowRight className=\"ml-2 h-4 w-4\" />\n                 </Button>\n                 <Button\n                   variant=\"outline\"\n-                  className=\"flex-1\"\n                   onClick={() => {\n                     if (currentLesson?.id && selectedSubLesson?.id) {\n                       handleRestartLesson(currentLesson.id, selectedSubLesson.id);\n                     }\n@@ -1011,12 +1028,11 @@\n                 >\n                   Restart\n                   <RotateCcw className=\"ml-2 h-4 w-4\" />\n                 </Button>\n-              </div>\n+              </>\n             ) : (\n               <Button\n-                className=\"w-full sm:w-auto\"\n                 onClick={() => {\n                   if (currentLesson?.id && selectedSubLesson?.id) {\n                     handleStartLesson(currentLesson.id, selectedSubLesson.id);\n                   }\n@@ -1030,68 +1046,63 @@\n           </DialogFooter>\n         </DialogContent>\n       </Dialog>\n \n-      {/* Lessons Timeline */}\n-      <div className=\"space-y-8 pb-[100vh]\">\n+      {/* Rest of the component */}\n+      <div className=\"space-y-8 -z-10 pb-[100vh]\">\n         {lessons.map((lesson, index) => (\n           <div\n             id={lesson.id}\n             ref={setLessonRef(index)}\n             key={lesson.id}\n-            className=\"space-y-4\"\n+            className=\"space-y-4 mb-8\"\n           >\n-            <div className={cn(\"pt-2 pb-2 px-4\", index === 0 && \"-mt-10\")}>\n+            <div className={`pt-2 pb-2 px-4 ${index === 0 ? '-mt-10' : ''}`}>\n               <div className=\"flex w-full justify-center\">\n                 <div className=\"flex items-center relative max-w-lg w-full\">\n-                  <div className=\"flex-grow border-t border-gray-300 dark:border-gray-700\" />\n-                  <div className={cn(\n-                    lesson.color,\n-                    \"z-10 text-white rounded-3xl px-4 py-2 text-base sm:text-xl truncate\"\n-                  )}>\n+                  <div className=\"flex-grow border-t border-gray-300 dark:border-gray-700\"></div>\n+                  <div className={`${lesson.color} z-10 text-white rounded-3xl text-xl px-4`}>\n                     {lesson.title}\n                   </div>\n-                  <div className=\"flex-grow border-t border-gray-300 dark:border-gray-700\" />\n+                  <div className=\"flex-grow border-t border-gray-300 dark:border-gray-700\"></div>\n                 </div>\n               </div>\n             </div>\n \n-            <div className=\"flex flex-col gap-3\">\n+            <div className=\"flex flex-col gap-4\">\n               {lesson.customSubLessons.map((subLesson) => (\n                 <Link\n                   to={`/lesson/${lesson.id}/${subLesson.id}`}\n                   key={subLesson.id}\n                   onClick={(e) => handleSubLessonClick(e, subLesson, lesson)}\n-                  className={cn(\n-                    isLocked && !subLesson.unlocked && \"pointer-events-none\"\n-                  )}\n+                  className={`${isLocked && !subLesson.unlocked ? \"pointer-events-none\" : \"\"}`}\n                 >\n                   <Card className={cn(\n                     \"hover:border-primary transition-colors\",\n                     !subLesson.unlocked && \"opacity-50\"\n                   )}>\n                     <CardContent className=\"p-4\">\n-                      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-3\">\n-                        <div className=\"flex items-start sm:items-center gap-3\">\n+                      <div className=\"flex items-center justify-between\">\n+                        <div className=\"flex items-center gap-2\">\n                           {subLesson.unlocked ? (\n-                            <BookOpen className=\"h-5 w-5 text-primary flex-shrink-0\" />\n+                            <BookOpen className=\"h-5 w-5 text-primary\" />\n                           ) : (\n-                            <Lock className=\"h-5 w-5 text-muted-foreground flex-shrink-0\" />\n+                            <Lock className=\"h-5 w-5 text-muted-foreground\" />\n                           )}\n                           <div>\n                             <h3 className=\"font-medium\">{subLesson.title}</h3>\n-                            <p className=\"text-sm text-muted-foreground line-clamp-2 sm:line-clamp-1\">\n+                            <p className=\"text-sm text-muted-foreground\">\n                               {subLesson.description}\n                             </p>\n                           </div>\n                         </div>\n-                        <div className=\"flex items-center gap-3\">\n-                          <div className=\"flex items-center gap-1 text-sm text-muted-foreground whitespace-nowrap\">\n+                        <div className=\"flex items-center gap-4\">\n+                          <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n                             <Clock className=\"h-4 w-4\" />\n                             {subLesson.duration} min\n                           </div>\n                           {subLesson.completed && (\n-                            <CheckCircle2 className=\"h-5 w-5 text-green-500 flex-shrink-0\" />\n+                            <CheckCircle2 className=\"h-5 w-5 text-green-500\" />\n                           )}\n                         </div>\n                       </div>\n                     </CardContent>\n"
                },
                {
                    "date": 1739138260615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -714,9 +714,9 @@\n           </CardHeader>\n         </Card>\n \n         <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n-          {/* Upcoming Classes */}\n+          {/* Upcoming Classes\n           <Card className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800 p-6\">\n             <div className=\"flex items-center justify-between mb-6\">\n               <h2 className=\"text-xl font-semibold\">Upcoming Classes</h2>\n               <Calendar className=\"h-5 w-5 text-gray-500\" />\n@@ -757,12 +757,12 @@\n                   </div>\n                 </div>\n               ))}\n             </div>\n-          </Card>\n+          </Card> */}\n \n           {/* Top Performing Students */}\n-          <Card className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800 p-6\">\n+          {/* <Card className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800 p-6\">\n             <div className=\"flex items-center justify-between mb-6\">\n               <h2 className=\"text-xl font-semibold\">Top Performing Students</h2>\n               <Users className=\"h-5 w-5 text-gray-500\" />\n             </div>\n@@ -799,9 +799,9 @@\n                   </span>\n                 </div>\n               ))}\n             </div>\n-          </Card>\n+          </Card> */}\n         </div>\n       </div>\n \n       {/* Topics and their content\n"
                },
                {
                    "date": 1739138429339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -670,8 +670,29 @@\n                 selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/55 bg-color-secondary\"\n               )}\n               onClick={() => setSelectedGrade(grade)}\n             >\n+               <Button\n+          variant=\"outline\"\n+          size=\"sm\"\n+          onClick={toggleLock}\n+          className={cn(\n+            \"ml-4 transition-colors\",\n+            isLocked && \"border-primary text-primary hover:bg-primary/10\"\n+          )}\n+        >\n+          {isLocked ? (\n+            <>\n+              <Lock className=\"h-4 w-4 mr-2\" />\n+              Locked\n+            </>\n+          ) : (\n+            <>\n+              <Unlock className=\"h-4 w-4 mr-2\" />\n+              Unlocked\n+            </>\n+          )}\n+        </Button>\n               <CardHeader className=\"p-4\">\n                 <div className=\"flex items-center gap-3\">\n                   <GraduationCap className=\"h-5 w-5 text-primary\" />\n                   <span className=\"font-medium\">{grade.name}</span>\n"
                },
                {
                    "date": 1739138451536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -654,9 +654,13 @@\n         </div>\n       </div>\n     );\n   }\n+  const toggleLock = () => {\n+    setIsLocked(!isLocked);\n+  };\n \n+\n   return (\n     <div className=\"max-w-6xl w-full relative\">\n       {/* Grade Selection */}\n       <div className=\"flex gap-4 overflow-x-auto pb-2\">\n"
                },
                {
                    "date": 1739138602317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -654,29 +654,18 @@\n         </div>\n       </div>\n     );\n   }\n-  const toggleLock = () => {\n+const toggleLock = () => {\n     setIsLocked(!isLocked);\n   };\n \n \n   return (\n     <div className=\"max-w-6xl w-full relative\">\n       {/* Grade Selection */}\n       <div className=\"flex gap-4 overflow-x-auto pb-2\">\n-        {grades\n-          .sort((a, b) => a.level - b.level)\n-          .map(grade => (\n-            <Card\n-              key={grade.id}\n-              className={cn(\n-                \"cursor-pointer transition-all duration-200\",\n-                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/55 bg-color-secondary\"\n-              )}\n-              onClick={() => setSelectedGrade(grade)}\n-            >\n-               <Button\n+      <Button\n           variant=\"outline\"\n           size=\"sm\"\n           onClick={toggleLock}\n           className={cn(\n@@ -695,8 +684,19 @@\n               Unlocked\n             </>\n           )}\n         </Button>\n+        {grades\n+          .sort((a, b) => a.level - b.level)\n+          .map(grade => (\n+            <Card\n+              key={grade.id}\n+              className={cn(\n+                \"cursor-pointer transition-all duration-200\",\n+                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/55 bg-color-secondary\"\n+              )}\n+              onClick={() => setSelectedGrade(grade)}\n+            >            \n               <CardHeader className=\"p-4\">\n                 <div className=\"flex items-center gap-3\">\n                   <GraduationCap className=\"h-5 w-5 text-primary\" />\n                   <span className=\"font-medium\">{grade.name}</span>\n"
                },
                {
                    "date": 1739138678487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -654,61 +654,60 @@\n         </div>\n       </div>\n     );\n   }\n-const toggleLock = () => {\n+\n+  const toggleLock = () => {\n     setIsLocked(!isLocked);\n   };\n \n-\n   return (\n     <div className=\"max-w-6xl w-full relative\">\n       {/* Grade Selection */}\n       <div className=\"flex gap-4 overflow-x-auto pb-2\">\n-      <Button\n-          variant=\"outline\"\n-          size=\"sm\"\n-          onClick={toggleLock}\n-          className={cn(\n-            \"ml-4 transition-colors\",\n-            isLocked && \"border-primary text-primary hover:bg-primary/10\"\n-          )}\n-        >\n-          {isLocked ? (\n-            <>\n-              <Lock className=\"h-4 w-4 mr-2\" />\n-              Locked\n-            </>\n-          ) : (\n-            <>\n-              <Unlock className=\"h-4 w-4 mr-2\" />\n-              Unlocked\n-            </>\n-          )}\n-        </Button>\n         {grades\n           .sort((a, b) => a.level - b.level)\n           .map(grade => (\n-            <Card\n-              key={grade.id}\n-              className={cn(\n-                \"cursor-pointer transition-all duration-200\",\n-                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/55 bg-color-secondary\"\n-              )}\n-              onClick={() => setSelectedGrade(grade)}\n-            >            \n-              <CardHeader className=\"p-4\">\n-                <div className=\"flex items-center gap-3\">\n-                  <GraduationCap className=\"h-5 w-5 text-primary\" />\n-                  <span className=\"font-medium\">{grade.name}</span>\n-                </div>\n-              </CardHeader>\n-            </Card>\n+            <div key={grade.id} className=\"flex items-center gap-2\">\n+              <Button\n+                variant=\"outline\"\n+                size=\"sm\"\n+                onClick={toggleLock}\n+                className={cn(\n+                  \"transition-colors\",\n+                  isLocked && \"border-primary text-primary hover:bg-primary/10\"\n+                )}\n+              >\n+                {isLocked ? (\n+                  <>\n+                    <Lock className=\"h-4 w-4 mr-2\" />\n+                    Locked\n+                  </>\n+                ) : (\n+                  <>\n+                    <Unlock className=\"h-4 w-4 mr-2\" />\n+                    Unlocked\n+                  </>\n+                )}\n+              </Button>\n+              <Card\n+                className={cn(\n+                  \"cursor-pointer transition-all duration-200\",\n+                  selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/55 bg-color-secondary\"\n+                )}\n+                onClick={() => setSelectedGrade(grade)}\n+              >            \n+                <CardHeader className=\"p-4\">\n+                  <div className=\"flex items-center gap-3\">\n+                    <GraduationCap className=\"h-5 w-5 text-primary\" />\n+                    <span className=\"font-medium\">{grade.name}</span>\n+                  </div>\n+                </CardHeader>\n+              </Card>\n+            </div>\n           ))}\n       </div>\n \n-      \n-\n       {/* Overview Section */}\n       <div className=\"mb-6\">\n         <Card className=\"text-gray-700 bg-white dark:bg-gray-900 rounded-xl mb-4 border border-gray-200 dark:border-gray-800\">\n           <CardHeader>\n"
                },
                {
                    "date": 1739138790942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -654,60 +654,61 @@\n         </div>\n       </div>\n     );\n   }\n-\n-  const toggleLock = () => {\n+const toggleLock = () => {\n     setIsLocked(!isLocked);\n   };\n \n+\n   return (\n     <div className=\"max-w-6xl w-full relative\">\n       {/* Grade Selection */}\n       <div className=\"flex gap-4 overflow-x-auto pb-2\">\n         {grades\n           .sort((a, b) => a.level - b.level)\n           .map(grade => (\n-            <div key={grade.id} className=\"flex items-center gap-2\">\n-              <Button\n-                variant=\"outline\"\n-                size=\"sm\"\n-                onClick={toggleLock}\n-                className={cn(\n-                  \"transition-colors\",\n-                  isLocked && \"border-primary text-primary hover:bg-primary/10\"\n-                )}\n-              >\n-                {isLocked ? (\n-                  <>\n-                    <Lock className=\"h-4 w-4 mr-2\" />\n-                    Locked\n-                  </>\n-                ) : (\n-                  <>\n-                    <Unlock className=\"h-4 w-4 mr-2\" />\n-                    Unlocked\n-                  </>\n-                )}\n-              </Button>\n-              <Card\n-                className={cn(\n-                  \"cursor-pointer transition-all duration-200\",\n-                  selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/55 bg-color-secondary\"\n-                )}\n-                onClick={() => setSelectedGrade(grade)}\n-              >            \n-                <CardHeader className=\"p-4\">\n-                  <div className=\"flex items-center gap-3\">\n-                    <GraduationCap className=\"h-5 w-5 text-primary\" />\n-                    <span className=\"font-medium\">{grade.name}</span>\n-                  </div>\n-                </CardHeader>\n-              </Card>\n-            </div>\n+            <Card\n+              key={grade.id}\n+              className={cn(\n+                \"cursor-pointer transition-all duration-200\",\n+                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/55 bg-color-secondary\"\n+              )}\n+              onClick={() => setSelectedGrade(grade)}\n+            >\n+               <Button\n+          variant=\"outline\"\n+          size=\"sm\"\n+          onClick={toggleLock}\n+          className={cn(\n+            \"ml-4 transition-colors\",\n+            isLocked && \"border-primary text-primary hover:bg-primary/10\"\n+          )}\n+        >\n+          {isLocked ? (\n+            <>\n+              <Lock className=\"h-4 w-4 mr-2\" />\n+              Locked\n+            </>\n+          ) : (\n+            <>\n+              <Unlock className=\"h-4 w-4 mr-2\" />\n+              Unlocked\n+            </>\n+          )}\n+        </Button>\n+              <CardHeader className=\"p-4\">\n+                <div className=\"flex items-center gap-3\">\n+                  <GraduationCap className=\"h-5 w-5 text-primary\" />\n+                  <span className=\"font-medium\">{grade.name}</span>\n+                </div>\n+              </CardHeader>\n+            </Card>\n           ))}\n       </div>\n \n+      \n+\n       {/* Overview Section */}\n       <div className=\"mb-6\">\n         <Card className=\"text-gray-700 bg-white dark:bg-gray-900 rounded-xl mb-4 border border-gray-200 dark:border-gray-800\">\n           <CardHeader>\n"
                },
                {
                    "date": 1739138853661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -674,29 +674,9 @@\n                 selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/55 bg-color-secondary\"\n               )}\n               onClick={() => setSelectedGrade(grade)}\n             >\n-               <Button\n-          variant=\"outline\"\n-          size=\"sm\"\n-          onClick={toggleLock}\n-          className={cn(\n-            \"ml-4 transition-colors\",\n-            isLocked && \"border-primary text-primary hover:bg-primary/10\"\n-          )}\n-        >\n-          {isLocked ? (\n-            <>\n-              <Lock className=\"h-4 w-4 mr-2\" />\n-              Locked\n-            </>\n-          ) : (\n-            <>\n-              <Unlock className=\"h-4 w-4 mr-2\" />\n-              Unlocked\n-            </>\n-          )}\n-        </Button>\n+               llllllll\n               <CardHeader className=\"p-4\">\n                 <div className=\"flex items-center gap-3\">\n                   <GraduationCap className=\"h-5 w-5 text-primary\" />\n                   <span className=\"font-medium\">{grade.name}</span>\n"
                },
                {
                    "date": 1739173716054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -674,9 +674,29 @@\n                 selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/55 bg-color-secondary\"\n               )}\n               onClick={() => setSelectedGrade(grade)}\n             >\n-               llllllll\n+               <Button\n+          variant=\"outline\"\n+          size=\"sm\"\n+          onClick={toggleLock}\n+          className={cn(\n+            \"ml-4 transition-colors\",\n+            isLocked && \"border-primary text-primary hover:bg-primary/10\"\n+          )}\n+        >\n+          {isLocked ? (\n+            <>\n+              <Lock className=\"h-4 w-4 mr-2\" />\n+              Locked\n+            </>\n+          ) : (\n+            <>\n+              <Unlock className=\"h-4 w-4 mr-2\" />\n+              Unlocked\n+            </>\n+          )}\n+        </Button>\n               <CardHeader className=\"p-4\">\n                 <div className=\"flex items-center gap-3\">\n                   <GraduationCap className=\"h-5 w-5 text-primary\" />\n                   <span className=\"font-medium\">{grade.name}</span>\n"
                },
                {
                    "date": 1739173876981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -662,9 +662,9 @@\n \n   return (\n     <div className=\"max-w-6xl w-full relative\">\n       {/* Grade Selection */}\n-      <div className=\"flex gap-4 overflow-x-auto pb-2\">\n+      <div className=\"flex items-center justify-between mb-4gap-4 overflow-x-auto pb-2\">\n         {grades\n           .sort((a, b) => a.level - b.level)\n           .map(grade => (\n             <Card\n"
                },
                {
                    "date": 1739173894824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -662,9 +662,9 @@\n \n   return (\n     <div className=\"max-w-6xl w-full relative\">\n       {/* Grade Selection */}\n-      <div className=\"flex items-center justify-between mb-4gap-4 overflow-x-auto pb-2\">\n+      <div className=\"flex items-center justify-between mb-4 overflow-x-auto pb-2\">\n         {grades\n           .sort((a, b) => a.level - b.level)\n           .map(grade => (\n             <Card\n"
                },
                {
                    "date": 1739173908988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -662,9 +662,9 @@\n \n   return (\n     <div className=\"max-w-6xl w-full relative\">\n       {/* Grade Selection */}\n-      <div className=\"flex items-center justify-between mb-4 overflow-x-auto pb-2\">\n+      <div className=\"flex items-center justify-between mb-4 pb-2\">\n         {grades\n           .sort((a, b) => a.level - b.level)\n           .map(grade => (\n             <Card\n"
                },
                {
                    "date": 1739173919342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -662,9 +662,9 @@\n \n   return (\n     <div className=\"max-w-6xl w-full relative\">\n       {/* Grade Selection */}\n-      <div className=\"flex items-center justify-between mb-4 pb-2\">\n+      <div className=\"flex items-center justify-between mb-4 overflow-x-auto pb-2\">\n         {grades\n           .sort((a, b) => a.level - b.level)\n           .map(grade => (\n             <Card\n"
                },
                {
                    "date": 1739173941334,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -662,9 +662,9 @@\n \n   return (\n     <div className=\"max-w-6xl w-full relative\">\n       {/* Grade Selection */}\n-      <div className=\"flex items-center justify-between mb-4 overflow-x-auto pb-2\">\n+      <div className=\"flex gap-4 overflow-x-auto pb-2\">\n         {grades\n           .sort((a, b) => a.level - b.level)\n           .map(grade => (\n             <Card\n"
                },
                {
                    "date": 1739174797296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -711,9 +711,9 @@\n       {/* Overview Section */}\n       <div className=\"mb-6\">\n         <Card className=\"text-gray-700 bg-white dark:bg-gray-900 rounded-xl mb-4 border border-gray-200 dark:border-gray-800\">\n           <CardHeader>\n-            <CardTitle className=\"text-2xl\">{selectedClass?.name}</CardTitle>\n+            <CardTitle className=\"text-2xl\">{selectedGrade?.name}</CardTitle>\n             <div className=\"grid grid-cols-4 gap-4\">\n               <div className=\"flex items-center space-x-2\">\n                 <Users size={16} className=\"text-blue-300\" />\n                 <span className=\"text-sm font-medium\">\n"
                },
                {
                    "date": 1739174880914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -828,9 +828,9 @@\n           </Card> */}\n         </div>\n       </div>\n \n-      {/* Topics and their content\n+      Topics and their content\n       <div className=\"mt-6 space-y-6\">\n         {topics\n           .filter(topic => topic.grade_id === selectedGrade?.id)\n           .map(topic => (\n@@ -862,9 +862,9 @@\n                 </div>\n               </CardContent>\n             </Card>\n           ))}\n-      </div> */}\n+      </div>\n \n \n <div className=\"mt-6 space-y-6\">\n   {selectedGrade?.topics\n"
                },
                {
                    "date": 1739175033250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -953,22 +953,22 @@\n     ))}\n </div>\n \n       <div className=\"sticky top-0 z-30 w-full\">\n-        {selectedLesson && (\n-          <Card className={`${selectedLesson.color} text-white rounded-xl`}>\n+        {selectedTopic && (\n+          <Card className={`${selectedTopic.color} text-white rounded-xl`}>\n             <CardHeader className=\"p-2 md:p-4 md:pl-6\">\n-              <CardTitle className=\"text-2xl\">{selectedLesson.title}</CardTitle>\n+              <CardTitle className=\"text-2xl\">{selectedTopic.title}</CardTitle>\n               <div className=\"flex flex-row md:flex-row items-center text-white text-sm space-y-2 md:space-y-0 md:space-x-4 md:p-2\">\n                 <div className=\"flex items-center space-x-2\">\n                   <BookOpen className=\"h-5 w-5 text-white\" />\n                   <div className=\"text-sm font-medium\">\n-                    {selectedClass?.name}{\" \"}\n+                    {selectedGrade?.name}{\" \"}\n                   </div>\n                 </div>\n \n                 <div className=\"flex items-center space-x-2\">\n-                  <span>Lesson {selectedLesson.lessonNumber}</span>\n+                  <span>Lesson {selectedTopic?.subtopics?.length}</span>\n                 </div>\n \n                 <div className=\"flex items-center space-x-2\">\n                   <span className=\"flex items-center space-x-1\">\n"
                },
                {
                    "date": 1739175092516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -972,9 +972,9 @@\n \n                 <div className=\"flex items-center space-x-2\">\n                   <span className=\"flex items-center space-x-1\">\n                     <Clock className=\"h-5 w-5 text-white\" />\n-                    <span>{selectedLesson.duration} minutes</span>\n+                    <span>{selectedSubtopic.duration} minutes</span>\n                   </span>\n                 </div>\n \n                 <div className=\"flex items-center space-x-2\">\n"
                },
                {
                    "date": 1739175113932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -215,9 +215,10 @@\n   lessons: LessonWithContent[];\n   id: string;\n   title: string;\n   topic_id: string;\n-  order_index?: number; \n+  order_index?: number;\n+  duration?: number;\n }\n \n interface LessonWithContent {\n   id: string;\n"
                },
                {
                    "date": 1739175148739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -973,9 +973,9 @@\n \n                 <div className=\"flex items-center space-x-2\">\n                   <span className=\"flex items-center space-x-1\">\n                     <Clock className=\"h-5 w-5 text-white\" />\n-                    <span>{selectedSubtopic.duration} minutes</span>\n+                    <span>{selectedSubtopic?.duration || 0} minutes</span>\n                   </span>\n                 </div>\n \n                 <div className=\"flex items-center space-x-2\">\n"
                },
                {
                    "date": 1739175179020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -980,9 +980,9 @@\n \n                 <div className=\"flex items-center space-x-2\">\n                   <span className=\"flex items-center space-x-1\">\n                     <BookOpen className=\"h-5 w-5 text-white\" />\n-                    <span>{selectedLesson.totalTopics} Topics</span>\n+                    <span>{selectedSubtopic?.lessons?.length || 0} Lessons</span>\n                   </span>\n                 </div>\n \n                 <div className=\"flex items-center space-x-2\">\n"
                },
                {
                    "date": 1739175790771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -298,8 +298,36 @@\n     description?: string;\n   }[];\n }\n \n+// Add this color array at the top with your other constants\n+const TOPIC_COLORS = [\n+  'bg-blue-500',\n+  'bg-green-500',\n+  'bg-purple-500',\n+  'bg-orange-500',\n+  'bg-pink-500',\n+  'bg-teal-500',\n+  'bg-indigo-500',\n+  'bg-rose-500',\n+  'bg-yellow-500',\n+  'bg-red-500',\n+  'bg-gray-500',\n+  'bg-cyan-500',\n+  'bg-lime-500',\n+  'bg-fuchsia-500',\n+  'bg-emerald-500',\n+  'bg-violet-500',\n+  'bg-amber-500',\n+  'bg-sky-500',\n+  'bg-zinc-500',\n+  'bg-slate-500'\n+];\n+// Add this helper function\n+const getRandomColor = (index: number): string => {\n+  return TOPIC_COLORS[index % TOPIC_COLORS.length];\n+};\n+\n export function LearningPathTeacher() {\n   const navigate = useRouterNavigate();\n   const { logError } = useComponentLogger('LearningPathTeacher');\n   const lessonRefs = useRef<(HTMLDivElement | null)[]>([]);\n@@ -460,9 +488,9 @@\n               // Transform lessons to match existing format\n               const transformedLessons = firstSubtopic.lessons.map((lesson: LessonWithContent, index: number) => ({\n                 ...lesson,\n                 id: String(lesson.id),\n-                color: getColorForIndex(index),\n+                color: getRandomColor(index),\n                 unlocked: index === 0,\n                 completed: false,\n                 lessonNumber: `${index + 1}`,\n                 totalTopics: String(firstGrade.topics.length),\n@@ -521,9 +549,9 @@\n       const customLessons: CustomLesson[] = lessonsData.map((lesson, index) => ({\n         ...lesson,\n         id: String(lesson.id),\n         status: lesson.status as 'draft' | 'published' | undefined,\n-        color: getColorForIndex(index),\n+        color: getRandomColor(index),\n         unlocked: index === 0,\n         completed: false,\n         lessonNumber: `${index + 1}`,\n         totalTopics: '5',\n@@ -655,12 +683,22 @@\n         </div>\n       </div>\n     );\n   }\n-const toggleLock = () => {\n+\n+  const toggleLock = () => {\n     setIsLocked(!isLocked);\n   };\n \n+  // In your component, modify where topics are processed\n+  const processedTopics = selectedGrade?.topics.map((topic, index) => ({\n+    ...topic,\n+    color: getRandomColor(index),\n+    subtopics: topic.subtopics.map((subtopic, subIndex) => ({\n+      ...subtopic,\n+      color: getRandomColor(subIndex + TOPIC_COLORS.length)\n+    }))\n+  }));\n \n   return (\n     <div className=\"max-w-6xl w-full relative\">\n       {/* Grade Selection */}\n@@ -831,19 +869,19 @@\n       </div>\n \n       Topics and their content\n       <div className=\"mt-6 space-y-6\">\n-        {topics\n-          .filter(topic => topic.grade_id === selectedGrade?.id)\n+        {(processedTopics || [])\n+          .sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n           .map(topic => (\n             <Card key={topic.id} className=\"border-l-4 border-l-primary\">\n               <CardHeader>\n                 <CardTitle>{topic.title}</CardTitle>\n               </CardHeader>\n               <CardContent>\n                 <div className=\"space-y-4\">\n-                  {subtopics\n-                    .filter(subtopic => subtopic.topic_id === topic.id)\n+                  {topic.subtopics\n+                    .sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n                     .map(subtopic => (\n                       <div key={subtopic.id} className=\"space-y-4\">\n                         <h3 className=\"text-lg font-semibold\">{subtopic.title}</h3>\n                         <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n@@ -925,9 +963,9 @@\n                         <LessonCard \n                           key={lesson.id}\n                           lesson={{\n                             ...lesson,\n-                            color: getColorForIndex(subtopic.lessons.indexOf(lesson)),\n+                            color: getRandomColor(subtopic.lessons.indexOf(lesson)),\n                             unlocked: true, // You can add your unlock logic here\n                             completed: false, // Add completion logic\n                             lessonNumber: `${subtopic.lessons.indexOf(lesson) + 1}`,\n                             totalTopics: String(topic.subtopics?.length || 0),\n"
                },
                {
                    "date": 1739175818107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -204,8 +204,9 @@\n };\n \n interface TopicWithHierarchy extends DbTopic {\n   subtopics: SubtopicWithHierarchy[];\n+  color?: string;\n }\n \n // Add with other type definitions at the top\n type DbSubtopic = Tables['subtopics']['Row'];\n"
                },
                {
                    "date": 1739176052765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -699,8 +699,26 @@\n       color: getRandomColor(subIndex + TOPIC_COLORS.length)\n     }))\n   }));\n \n+  // In your useEffect or where you fetch/set topics\n+  const processTopicsWithColors = (topics: TopicWithHierarchy[]) => {\n+    return topics.map((topic, index) => ({\n+      ...topic,\n+      color: getRandomColor(index),\n+      subtopics: topic.subtopics.map((subtopic, subIndex) => ({\n+        ...subtopic,\n+        color: getRandomColor(subIndex + topics.length)\n+      }))\n+    }));\n+  };\n+\n+  // When setting topics state\n+  setTopics(processTopicsWithColors(selectedGrade?.topics || []));\n+\n+  // When setting selectedTopic, make sure it comes from the processed topics\n+  setSelectedTopic(processTopicsWithColors(selectedGrade?.topics || [])[0] || null);\n+\n   return (\n     <div className=\"max-w-6xl w-full relative\">\n       {/* Grade Selection */}\n       <div className=\"flex gap-4 overflow-x-auto pb-2\">\n"
                },
                {
                    "date": 1739176138351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -349,8 +349,9 @@\n   const [subtopics, setSubtopics] = useState<SubtopicWithHierarchy[]>([]);\n   const [selectedGrade, setSelectedGrade] = useState<GradeWithHierarchy | null>(null);\n   const [selectedTopic, setSelectedTopic] = useState<TopicWithHierarchy | null>(null);\n   const [selectedSubtopic, setSelectedSubtopic] = useState<SubtopicWithHierarchy | null>(null);\n+  const [processedTopics, setProcessedTopics] = useState<TopicWithHierarchy[]>([]);\n \n   // Load lock state from localStorage\n   useEffect(() => {\n     try {\n@@ -527,8 +528,26 @@\n \n     fetchInitialData();\n   }, [logError]);\n \n+  useEffect(() => {\n+    if (selectedGrade?.topics) {\n+      const processed = selectedGrade.topics.map((topic, index) => ({\n+        ...topic,\n+        color: getRandomColor(index),\n+        subtopics: topic.subtopics.map((subtopic, subIndex) => ({\n+          ...subtopic,\n+          color: getRandomColor(subIndex + selectedGrade.topics.length)\n+        }))\n+      }));\n+      \n+      setProcessedTopics(processed);\n+      if (processed.length > 0 && !selectedTopic) {\n+        setSelectedTopic(processed[0]);\n+      }\n+    }\n+  }, [selectedGrade?.topics]);\n+\n   const handleClassChange = async (classData: ExtendedClass) => {\n     if (isLocked) return;\n     setSelectedClass(classData);\n     \n"
                },
                {
                    "date": 1739176148433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -708,36 +708,8 @@\n   const toggleLock = () => {\n     setIsLocked(!isLocked);\n   };\n \n-  // In your component, modify where topics are processed\n-  const processedTopics = selectedGrade?.topics.map((topic, index) => ({\n-    ...topic,\n-    color: getRandomColor(index),\n-    subtopics: topic.subtopics.map((subtopic, subIndex) => ({\n-      ...subtopic,\n-      color: getRandomColor(subIndex + TOPIC_COLORS.length)\n-    }))\n-  }));\n-\n-  // In your useEffect or where you fetch/set topics\n-  const processTopicsWithColors = (topics: TopicWithHierarchy[]) => {\n-    return topics.map((topic, index) => ({\n-      ...topic,\n-      color: getRandomColor(index),\n-      subtopics: topic.subtopics.map((subtopic, subIndex) => ({\n-        ...subtopic,\n-        color: getRandomColor(subIndex + topics.length)\n-      }))\n-    }));\n-  };\n-\n-  // When setting topics state\n-  setTopics(processTopicsWithColors(selectedGrade?.topics || []));\n-\n-  // When setting selectedTopic, make sure it comes from the processed topics\n-  setSelectedTopic(processTopicsWithColors(selectedGrade?.topics || [])[0] || null);\n-\n   return (\n     <div className=\"max-w-6xl w-full relative\">\n       {/* Grade Selection */}\n       <div className=\"flex gap-4 overflow-x-auto pb-2\">\n"
                },
                {
                    "date": 1739176297680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -878,9 +878,9 @@\n         </div>\n       </div>\n \n       Topics and their content\n-      <div className=\"mt-6 space-y-6\">\n+      {/* <div className=\"mt-6 space-y-6\">\n         {(processedTopics || [])\n           .sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n           .map(topic => (\n             <Card key={topic.id} className=\"border-l-4 border-l-primary\">\n@@ -911,9 +911,9 @@\n                 </div>\n               </CardContent>\n             </Card>\n           ))}\n-      </div>\n+      </div> */}\n \n \n <div className=\"mt-6 space-y-6\">\n   {selectedGrade?.topics\n"
                },
                {
                    "date": 1739176322062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -914,9 +914,9 @@\n           ))}\n       </div> */}\n \n \n-<div className=\"mt-6 space-y-6\">\n+{/* <div className=\"mt-6 space-y-6\">\n   {selectedGrade?.topics\n     .sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n     .map(topic => (\n       <Card \n@@ -999,9 +999,9 @@\n           </div>\n         </CardContent>\n       </Card>\n     ))}\n-</div>\n+</div> */}\n \n       <div className=\"sticky top-0 z-30 w-full\">\n         {selectedTopic && (\n           <Card className={`${selectedTopic.color} text-white rounded-xl`}>\n"
                },
                {
                    "date": 1739176382305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1002,9 +1002,9 @@\n     ))}\n </div> */}\n \n       <div className=\"sticky top-0 z-30 w-full\">\n-        {selectedTopic && (\n+        {selectedGrade && (\n           <Card className={`${selectedTopic.color} text-white rounded-xl`}>\n             <CardHeader className=\"p-2 md:p-4 md:pl-6\">\n               <CardTitle className=\"text-2xl\">{selectedTopic.title}</CardTitle>\n               <div className=\"flex flex-row md:flex-row items-center text-white text-sm space-y-2 md:space-y-0 md:space-x-4 md:p-2\">\n"
                },
                {
                    "date": 1739177348373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,10 @@\n \"use client\";\n \n import { useEffect, useRef, useState, memo, useCallback, useMemo } from \"react\";\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n+import { Card, CardContent, CardHeader, CardTitle, CardFooter } from \"@/components/ui/card\";\n import { Progress } from \"@/components/ui/progress\";\n-import { ArrowRight, BookOpen, Calendar, CheckCircle2, Clock, Lock, Plus, RotateCcw, Unlock, Users, Shield, GraduationCap } from \"lucide-react\";\n+import { ArrowRight, BookOpen, Calendar, CheckCircle2, Clock, Lock, Plus, RotateCcw, Unlock, Users, Shield, GraduationCap, LayoutList } from \"lucide-react\";\n import { Badge } from \"@/components/ui/badge\";\n import { useNavigate as useRouterNavigate } from \"react-router-dom\";\n import { Link } from \"react-router-dom\";\n import ClassHeader from \"./ClassHeader\";\n@@ -709,484 +709,143 @@\n     setIsLocked(!isLocked);\n   };\n \n   return (\n-    <div className=\"max-w-6xl w-full relative\">\n-      {/* Grade Selection */}\n-      <div className=\"flex gap-4 overflow-x-auto pb-2\">\n-        {grades\n-          .sort((a, b) => a.level - b.level)\n-          .map(grade => (\n-            <Card\n-              key={grade.id}\n-              className={cn(\n-                \"cursor-pointer transition-all duration-200\",\n-                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/55 bg-color-secondary\"\n-              )}\n-              onClick={() => setSelectedGrade(grade)}\n-            >\n-               <Button\n-          variant=\"outline\"\n-          size=\"sm\"\n-          onClick={toggleLock}\n-          className={cn(\n-            \"ml-4 transition-colors\",\n-            isLocked && \"border-primary text-primary hover:bg-primary/10\"\n-          )}\n-        >\n-          {isLocked ? (\n-            <>\n-              <Lock className=\"h-4 w-4 mr-2\" />\n-              Locked\n-            </>\n-          ) : (\n-            <>\n-              <Unlock className=\"h-4 w-4 mr-2\" />\n-              Unlocked\n-            </>\n-          )}\n-        </Button>\n-              <CardHeader className=\"p-4\">\n-                <div className=\"flex items-center gap-3\">\n-                  <GraduationCap className=\"h-5 w-5 text-primary\" />\n-                  <span className=\"font-medium\">{grade.name}</span>\n-                </div>\n-              </CardHeader>\n-            </Card>\n-          ))}\n-      </div>\n-\n-      \n-\n-      {/* Overview Section */}\n-      <div className=\"mb-6\">\n-        <Card className=\"text-gray-700 bg-white dark:bg-gray-900 rounded-xl mb-4 border border-gray-200 dark:border-gray-800\">\n-          <CardHeader>\n-            <CardTitle className=\"text-2xl\">{selectedGrade?.name}</CardTitle>\n-            <div className=\"grid grid-cols-4 gap-4\">\n-              <div className=\"flex items-center space-x-2\">\n-                <Users size={16} className=\"text-blue-300\" />\n-                <span className=\"text-sm font-medium\">\n-                  {classStudents.length} Students\n-                </span>\n+    <div className=\"max-w-6xl w-full mx-auto p-4\">\n+      {selectedGrade && (\n+        <Card className={`bg-blue-500 text-white mb-8`}>\n+          <CardHeader className=\"p-4\">\n+            <CardTitle className=\"text-2xl\">{selectedGrade.name}</CardTitle>\n+            <div className=\"flex items-center gap-4 text-sm\">\n+              <div className=\"flex items-center gap-2\">\n+                <BookOpen className=\"h-4 w-4\" />\n+                <span>Grade {selectedGrade.level}</span>\n               </div>\n-              <div className=\"flex items-center space-x-2\">\n-                <BookOpen size={16} className=\"text-green-300\" />\n-                <span className=\"text-sm font-medium\">\n-                  {lessons.length} Lessons\n-                </span>\n+              <div className=\"flex items-center gap-2\">\n+                <Clock className=\"h-4 w-4\" />\n+                <span>60 minutes</span>\n               </div>\n-              <div className=\"flex items-center space-x-2\">\n-                <Calendar size={16} className=\"text-purple-300\" />\n-                <span className=\"text-sm font-medium\">\n-                  0 Assignments\n-                </span>\n+              <div className=\"flex items-center gap-2\">\n+                <LayoutList className=\"h-4 w-4\" />\n+                <span>{processedTopics.length} Topics</span>\n               </div>\n-              <div className=\"text-sm mt-2\">\n-                {Math.round((lessons.filter(l => l.completed).length / lessons.length) * 100)}% Completed\n+              <div className=\"flex items-center gap-2\">\n+                <CheckCircle2 className=\"h-4 w-4\" />\n+                <span>1/5 Completed</span>\n               </div>\n             </div>\n           </CardHeader>\n         </Card>\n+      )}\n \n-        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n-          {/* Upcoming Classes\n-          <Card className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800 p-6\">\n-            <div className=\"flex items-center justify-between mb-6\">\n-              <h2 className=\"text-xl font-semibold\">Upcoming Classes</h2>\n-              <Calendar className=\"h-5 w-5 text-gray-500\" />\n-            </div>\n-            <div className=\"space-y-4\">\n-              {[\n-                {\n-                  id: 1,\n-                  subject: \"English Literature\",\n-                  time: \"09:00 AM\",\n-                  students: 28,\n-                  topic: \"Shakespeare: Romeo & Juliet\",\n-                  room: \"Room 101\",\n-                },\n-                {\n-                  id: 2,\n-                  subject: \"Creative Writing\",\n-                  time: \"11:30 AM\",\n-                  students: 24,\n-                  topic: \"Character Development\",\n-                  room: \"Room 203\",\n-                },\n-              ].map((cls) => (\n-                <div\n-                  key={cls.id}\n-                  className=\"flex items-center justify-between p-4 bg-white dark:bg-gray-900 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors\"\n-                >\n-                  <div className=\"flex-1\">\n-                    <h3 className=\"font-medium\">{cls.subject}</h3>\n-                    <p className=\"text-sm text-gray-600\">{cls.topic}</p>\n-                    <div className=\"flex items-center gap-4 mt-2 text-sm text-gray-500\">\n-                      <span>{cls.time}</span>\n-                      <span>•</span>\n-                      <span>{cls.room}</span>\n-                      <span>•</span>\n-                      <span>{cls.students} students</span>\n-                    </div>\n-                  </div>\n-                </div>\n-              ))}\n-            </div>\n-          </Card> */}\n-\n-          {/* Top Performing Students */}\n-          {/* <Card className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800 p-6\">\n-            <div className=\"flex items-center justify-between mb-6\">\n-              <h2 className=\"text-xl font-semibold\">Top Performing Students</h2>\n-              <Users className=\"h-5 w-5 text-gray-500\" />\n-            </div>\n-            <div className=\"space-y-4\">\n-              {[\n-                {\n-                  id: 1,\n-                  name: \"Emma Thompson\",\n-                  avatar: \"https://images.unsplash.com/photo-1494790108377-be9c29b29330?w=150\",\n-                  progress: 92,\n-                },\n-                {\n-                  id: 2,\n-                  name: \"Michael Chen\",\n-                  avatar: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150\",\n-                  progress: 88,\n-                },\n-              ].map((student) => (\n-                <div key={student.id} className=\"flex items-center gap-4\">\n-                  <img\n-                    src={student.avatar}\n-                    alt={student.name}\n-                    className=\"w-10 h-10 rounded-full object-cover\"\n-                  />\n-                  <div className=\"flex-1\">\n-                    <h3 className=\"font-medium\">{student.name}</h3>\n-                    <div \n-                      className={`progress-bar`}\n-                      data-progress={`${student.progress}`}\n-                    />\n-                  </div>\n-                  <span className=\"text-lg font-semibold\">\n-                    {student.progress}%\n-                  </span>\n-                </div>\n-              ))}\n-            </div>\n-          </Card> */}\n-        </div>\n-      </div>\n-\n-      Topics and their content\n-      {/* <div className=\"mt-6 space-y-6\">\n-        {(processedTopics || [])\n-          .sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n-          .map(topic => (\n-            <Card key={topic.id} className=\"border-l-4 border-l-primary\">\n-              <CardHeader>\n-                <CardTitle>{topic.title}</CardTitle>\n-              </CardHeader>\n-              <CardContent>\n-                <div className=\"space-y-4\">\n-                  {topic.subtopics\n-                    .sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n-                    .map(subtopic => (\n-                      <div key={subtopic.id} className=\"space-y-4\">\n-                        <h3 className=\"text-lg font-semibold\">{subtopic.title}</h3>\n-                        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n-                          {lessons\n-                            .filter(lesson => lesson.subtopic_id === subtopic.id)\n-                            .map(lesson => (\n-                              <LessonCard \n-                                key={lesson.id}\n-                                lesson={lesson}\n-                                isSelected={selectedLesson?.id === lesson.id}\n-                                onSelect={setSelectedLesson}\n-                              />\n-                            ))}\n-                        </div>\n-                      </div>\n-                    ))}\n-                </div>\n-              </CardContent>\n-            </Card>\n-          ))}\n-      </div> */}\n-\n-\n-{/* <div className=\"mt-6 space-y-6\">\n-  {selectedGrade?.topics\n-    .sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n-    .map(topic => (\n-      <Card \n-        key={topic.id} \n-        className={cn(\n-          \"border-l-4 border-l-primary transition-all duration-200\",\n-          \"hover:shadow-md\"\n-        )}\n-      >\n-        <CardHeader className=\"cursor-pointer\" onClick={() => setSelectedTopic(topic)}>\n-          <div className=\"flex items-center justify-between\">\n-            <CardTitle className=\"flex items-center gap-2\">\n-              <BookOpen className=\"h-5 w-5 text-primary\" />\n-              {topic.title}\n-            </CardTitle>\n-            <Badge variant=\"outline\" className=\"bg-primary/5\">\n-              {topic.subtopics?.length || 0} Subtopics\n-            </Badge>\n-          </div>\n-        </CardHeader>\n-        <CardContent>\n-          <div className=\"space-y-6\">\n-            {topic.subtopics\n-              ?.sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n-              .map(subtopic => (\n-                <div \n-                  key={subtopic.id} \n+      <div className=\"space-y-8\">\n+        {(processedTopics || []).map((topic, topicIndex) => (\n+          <div key={topic.id} className=\"space-y-4\">\n+            {/* Topic Divider */}\n+            <div className=\"relative\">\n+              <div className=\"absolute inset-0 flex items-center\">\n+                <div className=\"w-full border-t border-gray-200\" />\n+              </div>\n+              <div className=\"relative flex justify-center\">\n+                <Badge \n                   className={cn(\n-                    \"space-y-4 p-4 rounded-lg\",\n-                    \"border border-border/50\",\n-                    \"hover:border-primary/50 transition-colors\",\n-                    selectedSubtopic?.id === subtopic.id && \"border-primary/50 bg-accent/5\"\n+                    \"px-4 py-2\",\n+                    topic.color || 'bg-primary'\n                   )}\n                 >\n-                  <div \n-                    className=\"flex items-center justify-between cursor-pointer\"\n-                    onClick={() => setSelectedSubtopic(subtopic)}\n-                  >\n-                    <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n-                      <div className={cn(\n-                        \"w-2 h-2 rounded-full\",\n-                        selectedSubtopic?.id === subtopic.id ? \"bg-primary\" : \"bg-muted\"\n-                      )} />\n-                      {subtopic.title}\n-                    </h3>\n-                    <Badge variant=\"outline\">\n-                      {subtopic.lessons?.length || 0} Lessons\n-                    </Badge>\n-                  </div>\n-                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n-                    {subtopic.lessons\n-                      ?.sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n-                      .map(lesson => (\n-                        <LessonCard \n-                          key={lesson.id}\n-                          lesson={{\n-                            ...lesson,\n-                            color: getRandomColor(subtopic.lessons.indexOf(lesson)),\n-                            unlocked: true, // You can add your unlock logic here\n-                            completed: false, // Add completion logic\n-                            lessonNumber: `${subtopic.lessons.indexOf(lesson) + 1}`,\n-                            totalTopics: String(topic.subtopics?.length || 0),\n-                            difficulty: lesson.metadata?.difficulty || 'Beginner',\n-                            customSubLessons: [{\n-                              id: lesson.id,\n-                              title: lesson.title,\n-                              unlocked: true,\n-                              completed: false,\n-                              duration: lesson.duration || 15,\n-                              description: lesson.description || ''\n-                            }]\n-                          }}\n-                          isSelected={selectedLesson?.id === lesson.id}\n-                          onSelect={setSelectedLesson}\n-                        />\n-                    ))}\n-                  </div>\n-                </div>\n-              ))}\n-          </div>\n-        </CardContent>\n-      </Card>\n-    ))}\n-</div> */}\n-\n-      <div className=\"sticky top-0 z-30 w-full\">\n-        {selectedGrade && (\n-          <Card className={`${selectedTopic.color} text-white rounded-xl`}>\n-            <CardHeader className=\"p-2 md:p-4 md:pl-6\">\n-              <CardTitle className=\"text-2xl\">{selectedTopic.title}</CardTitle>\n-              <div className=\"flex flex-row md:flex-row items-center text-white text-sm space-y-2 md:space-y-0 md:space-x-4 md:p-2\">\n-                <div className=\"flex items-center space-x-2\">\n-                  <BookOpen className=\"h-5 w-5 text-white\" />\n-                  <div className=\"text-sm font-medium\">\n-                    {selectedGrade?.name}{\" \"}\n-                  </div>\n-                </div>\n-\n-                <div className=\"flex items-center space-x-2\">\n-                  <span>Lesson {selectedTopic?.subtopics?.length}</span>\n-                </div>\n-\n-                <div className=\"flex items-center space-x-2\">\n-                  <span className=\"flex items-center space-x-1\">\n-                    <Clock className=\"h-5 w-5 text-white\" />\n-                    <span>{selectedSubtopic?.duration || 0} minutes</span>\n-                  </span>\n-                </div>\n-\n-                <div className=\"flex items-center space-x-2\">\n-                  <span className=\"flex items-center space-x-1\">\n-                    <BookOpen className=\"h-5 w-5 text-white\" />\n-                    <span>{selectedSubtopic?.lessons?.length || 0} Lessons</span>\n-                  </span>\n-                </div>\n-\n-                <div className=\"flex items-center space-x-2\">\n-                  <div className=\"flex items-center space-x-1\">\n-                    <CheckCircle2 className=\"h-5 w-5 text-white\" />\n-                    <span>1/5 Completed</span>\n-                  </div>\n-                </div>\n+                  {topic.title}\n+                </Badge>\n               </div>\n-            </CardHeader>\n-          </Card>\n-        )}\n-      </div>\n-\n-      {/* Dialog */}\n-      <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n-        <DialogContent>\n-          <DialogHeader>\n-            <div className=\"flex flex-col space-y-1.5\">\n-              <DialogTitle>\n-                {selectedSubLesson?.title}\n-                {selectedSubLesson?.completed && (\n-                  <CheckCircle2 className=\"inline-block ml-2 h-5 w-5 text-green-500\" />\n-                )}\n-              </DialogTitle>\n-              <DialogDescription>\n-                <span className=\"flex items-center gap-2 text-sm\">\n-                  Part of {currentLesson?.title}\n-                </span>\n-                <span className=\"block mt-2 text-sm text-muted-foreground\">\n-                  {selectedSubLesson?.description}\n-                </span>\n-                {selectedSubLesson?.completed && (\n-                  <div className=\"mt-4 p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n-                    <span className=\"text-green-700 dark:text-green-300 text-sm\">\n-                      You have completed this lesson\n-                    </span>\n-                  </div>\n-                )}\n-              </DialogDescription>\n             </div>\n-          </DialogHeader>\n-          <DialogFooter>\n-            {!selectedSubLesson?.unlocked ? (\n-              <span className=\"text-sm text-muted-foreground\">\n-                Complete previous lessons to unlock this content\n-              </span>\n-            ) : selectedSubLesson.completed ? (\n-              <>\n-                <Button\n-                  onClick={() => {\n-                    if (currentLesson?.id && selectedSubLesson?.id) {\n-                      handleStartLesson(currentLesson.id, selectedSubLesson.id);\n-                    }\n-                  }}\n-                  disabled={isLocked}\n-                >\n-                  Continue\n-                  <ArrowRight className=\"ml-2 h-4 w-4\" />\n-                </Button>\n-                <Button\n-                  variant=\"outline\"\n-                  onClick={() => {\n-                    if (currentLesson?.id && selectedSubLesson?.id) {\n-                      handleRestartLesson(currentLesson.id, selectedSubLesson.id);\n-                    }\n-                  }}\n-                  disabled={isLocked}\n-                >\n-                  Restart\n-                  <RotateCcw className=\"ml-2 h-4 w-4\" />\n-                </Button>\n-              </>\n-            ) : (\n-              <Button\n-                onClick={() => {\n-                  if (currentLesson?.id && selectedSubLesson?.id) {\n-                    handleStartLesson(currentLesson.id, selectedSubLesson.id);\n-                  }\n-                }}\n-                disabled={isLocked}\n-              >\n-                Start Lesson\n-                <ArrowRight className=\"ml-2 h-4 w-4\" />\n-              </Button>\n-            )}\n-          </DialogFooter>\n-        </DialogContent>\n-      </Dialog>\n \n-      {/* Rest of the component */}\n-      <div className=\"space-y-8 -z-10 pb-[100vh]\">\n-        {lessons.map((lesson, index) => (\n-          <div\n-            id={lesson.id}\n-            ref={setLessonRef(index)}\n-            key={lesson.id}\n-            className=\"space-y-4 mb-8\"\n-          >\n-            <div className={`pt-2 pb-2 px-4 ${index === 0 ? '-mt-10' : ''}`}>\n-              <div className=\"flex w-full justify-center\">\n-                <div className=\"flex items-center relative max-w-lg w-full\">\n-                  <div className=\"flex-grow border-t border-gray-300 dark:border-gray-700\"></div>\n-                  <div className={`${lesson.color} z-10 text-white rounded-3xl text-xl px-4`}>\n-                    {lesson.title}\n-                  </div>\n-                  <div className=\"flex-grow border-t border-gray-300 dark:border-gray-700\"></div>\n-                </div>\n-              </div>\n-            </div>\n-\n-            <div className=\"flex flex-col gap-4\">\n-              {lesson.customSubLessons.map((subLesson) => (\n-                <Link\n-                  to={`/lesson/${lesson.id}/${subLesson.id}`}\n-                  key={subLesson.id}\n-                  onClick={(e) => handleSubLessonClick(e, subLesson, lesson)}\n-                  className={`${isLocked && !subLesson.unlocked ? \"pointer-events-none\" : \"\"}`}\n-                >\n-                  <Card className={cn(\n-                    \"hover:border-primary transition-colors\",\n-                    !subLesson.unlocked && \"opacity-50\"\n-                  )}>\n-                    <CardContent className=\"p-4\">\n+            {/* Subtopics Grid */}\n+            <div className=\"grid grid-cols-1 gap-4\">\n+              {topic.subtopics.map((subtopic) => {\n+                const isLocked = topicIndex > 1 && !topic.completed;\n+                \n+                return (\n+                  <Card \n+                    key={subtopic.id}\n+                    className={cn(\n+                      \"transition-all duration-200\",\n+                      isLocked && \"opacity-50\"\n+                    )}\n+                  >\n+                    <CardHeader className=\"p-4\">\n                       <div className=\"flex items-center justify-between\">\n                         <div className=\"flex items-center gap-2\">\n-                          {subLesson.unlocked ? (\n+                          {isLocked ? (\n+                            <Lock className=\"h-5 w-5 text-muted-foreground\" />\n+                          ) : (\n                             <BookOpen className=\"h-5 w-5 text-primary\" />\n-                          ) : (\n-                            <Lock className=\"h-5 w-5 text-muted-foreground\" />\n                           )}\n                           <div>\n-                            <h3 className=\"font-medium\">{subLesson.title}</h3>\n+                            <h3 className=\"font-medium\">{subtopic.title}</h3>\n                             <p className=\"text-sm text-muted-foreground\">\n-                              {subLesson.description}\n+                              Ready to start\n                             </p>\n                           </div>\n                         </div>\n                         <div className=\"flex items-center gap-4\">\n                           <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n                             <Clock className=\"h-4 w-4\" />\n-                            {subLesson.duration} min\n+                            <span>{subtopic.duration || 15} minutes</span>\n                           </div>\n-                          {subLesson.completed && (\n-                            <CheckCircle2 className=\"h-5 w-5 text-green-500\" />\n-                          )}\n+                          <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n+                            <BookOpen className=\"h-4 w-4\" />\n+                            <span>{subtopic.lessons.length} Lessons</span>\n+                          </div>\n                         </div>\n                       </div>\n-                    </CardContent>\n+                    </CardHeader>\n+                    <CardFooter className=\"p-4 pt-0\">\n+                      <Button\n+                        variant=\"outline\"\n+                        className=\"w-full\"\n+                        disabled={isLocked}\n+                        onClick={() => {\n+                          setSelectedSubtopic(subtopic);\n+                          setDialogOpen(true);\n+                        }}\n+                      >\n+                        {isLocked ? 'Locked' : 'Start Learning'}\n+                      </Button>\n+                    </CardFooter>\n                   </Card>\n-                </Link>\n-              ))}\n+                );\n+              })}\n             </div>\n           </div>\n         ))}\n       </div>\n+\n+      {/* Lesson Start Dialog */}\n+      <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n+        <DialogContent>\n+          <DialogHeader>\n+            <DialogTitle>{selectedSubtopic?.title}</DialogTitle>\n+            <DialogDescription>\n+              This lesson contains {selectedSubtopic?.lessons.length} activities\n+            </DialogDescription>\n+          </DialogHeader>\n+          <div className=\"py-4\">\n+            <p className=\"text-sm text-muted-foreground\">\n+              Estimated time: {selectedSubtopic?.duration || 15} minutes\n+            </p>\n+          </div>\n+          <DialogFooter>\n+            <Button\n+              onClick={() => {\n+                if (selectedSubtopic?.id) {\n+                  navigate(`/lesson/${selectedSubtopic.id}`);\n+                }\n+              }}\n+            >\n+              Start Lesson\n+              <ArrowRight className=\"ml-2 h-4 w-4\" />\n+            </Button>\n+          </DialogFooter>\n+        </DialogContent>\n+      </Dialog>\n     </div>\n   );\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739177435151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -709,54 +709,131 @@\n     setIsLocked(!isLocked);\n   };\n \n   return (\n-    <div className=\"max-w-6xl w-full mx-auto p-4\">\n-      {selectedGrade && (\n-        <Card className={`bg-blue-500 text-white mb-8`}>\n-          <CardHeader className=\"p-4\">\n-            <CardTitle className=\"text-2xl\">{selectedGrade.name}</CardTitle>\n-            <div className=\"flex items-center gap-4 text-sm\">\n-              <div className=\"flex items-center gap-2\">\n-                <BookOpen className=\"h-4 w-4\" />\n-                <span>Grade {selectedGrade.level}</span>\n+    <div className=\"max-w-6xl w-full relative\">\n+      {/* Grade Selection */}\n+      <div className=\"flex gap-4 overflow-x-auto pb-2\">\n+        {grades\n+          .sort((a, b) => a.level - b.level)\n+          .map(grade => (\n+            <Card\n+              key={grade.id}\n+              className={cn(\n+                \"cursor-pointer transition-all duration-200\",\n+                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/55 bg-color-secondary\"\n+              )}\n+              onClick={() => setSelectedGrade(grade)}\n+            >\n+               <Button\n+          variant=\"outline\"\n+          size=\"sm\"\n+          onClick={toggleLock}\n+          className={cn(\n+            \"ml-4 transition-colors\",\n+            isLocked && \"border-primary text-primary hover:bg-primary/10\"\n+          )}\n+        >\n+          {isLocked ? (\n+            <>\n+              <Lock className=\"h-4 w-4 mr-2\" />\n+              Locked\n+            </>\n+          ) : (\n+            <>\n+              <Unlock className=\"h-4 w-4 mr-2\" />\n+              Unlocked\n+            </>\n+          )}\n+        </Button>\n+              <CardHeader className=\"p-4\">\n+                <div className=\"flex items-center gap-3\">\n+                  <GraduationCap className=\"h-5 w-5 text-primary\" />\n+                  <span className=\"font-medium\">{grade.name}</span>\n+                </div>\n+              </CardHeader>\n+            </Card>\n+          ))}\n+      </div>\n+\n+      \n+\n+      {/* Overview Section */}\n+      <div className=\"mb-6\">\n+        <Card className=\"text-gray-700 bg-white dark:bg-gray-900 rounded-xl mb-4 border border-gray-200 dark:border-gray-800\">\n+          <CardHeader>\n+            <CardTitle className=\"text-2xl\">{selectedGrade?.name}</CardTitle>\n+            <div className=\"grid grid-cols-4 gap-4\">\n+              <div className=\"flex items-center space-x-2\">\n+                <Users size={16} className=\"text-blue-300\" />\n+                <span className=\"text-sm font-medium\">\n+                  {classStudents.length} Students\n+                </span>\n               </div>\n-              <div className=\"flex items-center gap-2\">\n-                <Clock className=\"h-4 w-4\" />\n-                <span>60 minutes</span>\n+              <div className=\"flex items-center space-x-2\">\n+                <BookOpen size={16} className=\"text-green-300\" />\n+                <span className=\"text-sm font-medium\">\n+                  {lessons.length} Lessons\n+                </span>\n               </div>\n-              <div className=\"flex items-center gap-2\">\n-                <LayoutList className=\"h-4 w-4\" />\n-                <span>{processedTopics.length} Topics</span>\n+              <div className=\"flex items-center space-x-2\">\n+                <Calendar size={16} className=\"text-purple-300\" />\n+                <span className=\"text-sm font-medium\">\n+                  0 Assignments\n+                </span>\n               </div>\n-              <div className=\"flex items-center gap-2\">\n-                <CheckCircle2 className=\"h-4 w-4\" />\n-                <span>1/5 Completed</span>\n+              <div className=\"text-sm mt-2\">\n+                {Math.round((lessons.filter(l => l.completed).length / lessons.length) * 100)}% Completed\n               </div>\n             </div>\n           </CardHeader>\n         </Card>\n-      )}\n \n-      <div className=\"space-y-8\">\n-        {(processedTopics || []).map((topic, topicIndex) => (\n-          <div key={topic.id} className=\"space-y-4\">\n-            {/* Topic Divider */}\n-            <div className=\"relative\">\n-              <div className=\"absolute inset-0 flex items-center\">\n-                <div className=\"w-full border-t border-gray-200\" />\n-              </div>\n-              <div className=\"relative flex justify-center\">\n-                <Badge \n-                  className={cn(\n-                    \"px-4 py-2\",\n-                    topic.color || 'bg-primary'\n-                  )}\n+        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n+          {/* Upcoming Classes\n+          <Card className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800 p-6\">\n+            <div className=\"flex items-center justify-between mb-6\">\n+              <h2 className=\"text-xl font-semibold\">Upcoming Classes</h2>\n+              <Calendar className=\"h-5 w-5 text-gray-500\" />\n+            </div>\n+            <div className=\"space-y-4\">\n+              {[\n+                {\n+                  id: 1,\n+                  subject: \"English Literature\",\n+                  time: \"09:00 AM\",\n+                  students: 28,\n+                  topic: \"Shakespeare: Romeo & Juliet\",\n+                  room: \"Room 101\",\n+                },\n+                {\n+                  id: 2,\n+                  subject: \"Creative Writing\",\n+                  time: \"11:30 AM\",\n+                  students: 24,\n+                  topic: \"Character Development\",\n+                  room: \"Room 203\",\n+                },\n+              ].map((cls) => (\n+                <div\n+                  key={cls.id}\n+                  className=\"flex items-center justify-between p-4 bg-white dark:bg-gray-900 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors\"\n                 >\n-                  {topic.title}\n-                </Badge>\n-              </div>\n+                  <div className=\"flex-1\">\n+                    <h3 className=\"font-medium\">{cls.subject}</h3>\n+                    <p className=\"text-sm text-gray-600\">{cls.topic}</p>\n+                    <div className=\"flex items-center gap-4 mt-2 text-sm text-gray-500\">\n+                      <span>{cls.time}</span>\n+                      <span>•</span>\n+                      <span>{cls.room}</span>\n+                      <span>•</span>\n+                      <span>{cls.students} students</span>\n+                    </div>\n+                  </div>\n+                </div>\n+              ))}\n             </div>\n+          </Card> */}\n \n             {/* Subtopics Grid */}\n             <div className=\"grid grid-cols-1 gap-4\">\n               {topic.subtopics.map((subtopic) => {\n@@ -817,35 +894,149 @@\n           </div>\n         ))}\n       </div>\n \n-      {/* Lesson Start Dialog */}\n+      {/* Dialog */}\n       <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n         <DialogContent>\n           <DialogHeader>\n-            <DialogTitle>{selectedSubtopic?.title}</DialogTitle>\n-            <DialogDescription>\n-              This lesson contains {selectedSubtopic?.lessons.length} activities\n-            </DialogDescription>\n+            <div className=\"flex flex-col space-y-1.5\">\n+              <DialogTitle>\n+                {selectedSubLesson?.title}\n+                {selectedSubLesson?.completed && (\n+                  <CheckCircle2 className=\"inline-block ml-2 h-5 w-5 text-green-500\" />\n+                )}\n+              </DialogTitle>\n+              <DialogDescription>\n+                <span className=\"flex items-center gap-2 text-sm\">\n+                  Part of {currentLesson?.title}\n+                </span>\n+                <span className=\"block mt-2 text-sm text-muted-foreground\">\n+                  {selectedSubLesson?.description}\n+                </span>\n+                {selectedSubLesson?.completed && (\n+                  <div className=\"mt-4 p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n+                    <span className=\"text-green-700 dark:text-green-300 text-sm\">\n+                      You have completed this lesson\n+                    </span>\n+                  </div>\n+                )}\n+              </DialogDescription>\n+            </div>\n           </DialogHeader>\n-          <div className=\"py-4\">\n-            <p className=\"text-sm text-muted-foreground\">\n-              Estimated time: {selectedSubtopic?.duration || 15} minutes\n-            </p>\n-          </div>\n           <DialogFooter>\n-            <Button\n-              onClick={() => {\n-                if (selectedSubtopic?.id) {\n-                  navigate(`/lesson/${selectedSubtopic.id}`);\n-                }\n-              }}\n-            >\n-              Start Lesson\n-              <ArrowRight className=\"ml-2 h-4 w-4\" />\n-            </Button>\n+            {!selectedSubLesson?.unlocked ? (\n+              <span className=\"text-sm text-muted-foreground\">\n+                Complete previous lessons to unlock this content\n+              </span>\n+            ) : selectedSubLesson.completed ? (\n+              <>\n+                <Button\n+                  onClick={() => {\n+                    if (currentLesson?.id && selectedSubLesson?.id) {\n+                      handleStartLesson(currentLesson.id, selectedSubLesson.id);\n+                    }\n+                  }}\n+                  disabled={isLocked}\n+                >\n+                  Continue\n+                  <ArrowRight className=\"ml-2 h-4 w-4\" />\n+                </Button>\n+                <Button\n+                  variant=\"outline\"\n+                  onClick={() => {\n+                    if (currentLesson?.id && selectedSubLesson?.id) {\n+                      handleRestartLesson(currentLesson.id, selectedSubLesson.id);\n+                    }\n+                  }}\n+                  disabled={isLocked}\n+                >\n+                  Restart\n+                  <RotateCcw className=\"ml-2 h-4 w-4\" />\n+                </Button>\n+              </>\n+            ) : (\n+              <Button\n+                onClick={() => {\n+                  if (currentLesson?.id && selectedSubLesson?.id) {\n+                    handleStartLesson(currentLesson.id, selectedSubLesson.id);\n+                  }\n+                }}\n+                disabled={isLocked}\n+              >\n+                Start Lesson\n+                <ArrowRight className=\"ml-2 h-4 w-4\" />\n+              </Button>\n+            )}\n           </DialogFooter>\n         </DialogContent>\n       </Dialog>\n+\n+      {/* Rest of the component */}\n+      <div className=\"space-y-8 -z-10 pb-[100vh]\">\n+        {lessons.map((lesson, index) => (\n+          <div\n+            id={lesson.id}\n+            ref={setLessonRef(index)}\n+            key={lesson.id}\n+            className=\"space-y-4 mb-8\"\n+          >\n+            <div className={`pt-2 pb-2 px-4 ${index === 0 ? '-mt-10' : ''}`}>\n+              <div className=\"flex w-full justify-center\">\n+                <div className=\"flex items-center relative max-w-lg w-full\">\n+                  <div className=\"flex-grow border-t border-gray-300 dark:border-gray-700\"></div>\n+                  <div className={`${lesson.color} z-10 text-white rounded-3xl text-xl px-4`}>\n+                    {lesson.title}\n+                  </div>\n+                  <div className=\"flex-grow border-t border-gray-300 dark:border-gray-700\"></div>\n+                </div>\n+              </div>\n+            </div>\n+\n+            <div className=\"flex flex-col gap-4\">\n+              {lesson.customSubLessons.map((subLesson) => (\n+                <Link\n+                  to={`/lesson/${lesson.id}/${subLesson.id}`}\n+                  key={subLesson.id}\n+                  onClick={(e) => handleSubLessonClick(e, subLesson, lesson)}\n+                  className={`${isLocked && !subLesson.unlocked ? \"pointer-events-none\" : \"\"}`}\n+                >\n+                  <Card className={cn(\n+                    \"hover:border-primary transition-colors\",\n+                    !subLesson.unlocked && \"opacity-50\"\n+                  )}>\n+                    <CardContent className=\"p-4\">\n+                      <div className=\"flex items-center justify-between\">\n+                        <div className=\"flex items-center gap-2\">\n+                          {subLesson.unlocked ? (\n+                            <BookOpen className=\"h-5 w-5 text-primary\" />\n+                          ) : (\n+                            <Lock className=\"h-5 w-5 text-muted-foreground\" />\n+                          )}\n+                          <div>\n+                            <h3 className=\"font-medium\">{subLesson.title}</h3>\n+                            <p className=\"text-sm text-muted-foreground\">\n+                              {subLesson.description}\n+                            </p>\n+                          </div>\n+                        </div>\n+                        <div className=\"flex items-center gap-4\">\n+                          <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n+                            <Clock className=\"h-4 w-4\" />\n+                            {subLesson.duration} min\n+                          </div>\n+                          {subLesson.completed && (\n+                            <CheckCircle2 className=\"h-5 w-5 text-green-500\" />\n+                          )}\n+                        </div>\n+                      </div>\n+                    </CardContent>\n+                  </Card>\n+                </Link>\n+              ))}\n+            </div>\n+          </div>\n+        ))}\n+      </div>\n     </div>\n   );\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739177494423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,10 @@\n \"use client\";\n \n import { useEffect, useRef, useState, memo, useCallback, useMemo } from \"react\";\n-import { Card, CardContent, CardHeader, CardTitle, CardFooter } from \"@/components/ui/card\";\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n import { Progress } from \"@/components/ui/progress\";\n-import { ArrowRight, BookOpen, Calendar, CheckCircle2, Clock, Lock, Plus, RotateCcw, Unlock, Users, Shield, GraduationCap, LayoutList } from \"lucide-react\";\n+import { ArrowRight, BookOpen, Calendar, CheckCircle2, Clock, Lock, Plus, RotateCcw, Unlock, Users, Shield, GraduationCap } from \"lucide-react\";\n import { Badge } from \"@/components/ui/badge\";\n import { useNavigate as useRouterNavigate } from \"react-router-dom\";\n import { Link } from \"react-router-dom\";\n import ClassHeader from \"./ClassHeader\";\n@@ -833,67 +833,217 @@\n               ))}\n             </div>\n           </Card> */}\n \n-            {/* Subtopics Grid */}\n-            <div className=\"grid grid-cols-1 gap-4\">\n-              {topic.subtopics.map((subtopic) => {\n-                const isLocked = topicIndex > 1 && !topic.completed;\n-                \n-                return (\n-                  <Card \n-                    key={subtopic.id}\n-                    className={cn(\n-                      \"transition-all duration-200\",\n-                      isLocked && \"opacity-50\"\n-                    )}\n-                  >\n-                    <CardHeader className=\"p-4\">\n-                      <div className=\"flex items-center justify-between\">\n-                        <div className=\"flex items-center gap-2\">\n-                          {isLocked ? (\n-                            <Lock className=\"h-5 w-5 text-muted-foreground\" />\n-                          ) : (\n-                            <BookOpen className=\"h-5 w-5 text-primary\" />\n-                          )}\n-                          <div>\n-                            <h3 className=\"font-medium\">{subtopic.title}</h3>\n-                            <p className=\"text-sm text-muted-foreground\">\n-                              Ready to start\n-                            </p>\n-                          </div>\n+          {/* Top Performing Students */}\n+          {/* <Card className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800 p-6\">\n+            <div className=\"flex items-center justify-between mb-6\">\n+              <h2 className=\"text-xl font-semibold\">Top Performing Students</h2>\n+              <Users className=\"h-5 w-5 text-gray-500\" />\n+            </div>\n+            <div className=\"space-y-4\">\n+              {[\n+                {\n+                  id: 1,\n+                  name: \"Emma Thompson\",\n+                  avatar: \"https://images.unsplash.com/photo-1494790108377-be9c29b29330?w=150\",\n+                  progress: 92,\n+                },\n+                {\n+                  id: 2,\n+                  name: \"Michael Chen\",\n+                  avatar: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150\",\n+                  progress: 88,\n+                },\n+              ].map((student) => (\n+                <div key={student.id} className=\"flex items-center gap-4\">\n+                  <img\n+                    src={student.avatar}\n+                    alt={student.name}\n+                    className=\"w-10 h-10 rounded-full object-cover\"\n+                  />\n+                  <div className=\"flex-1\">\n+                    <h3 className=\"font-medium\">{student.name}</h3>\n+                    <div \n+                      className={`progress-bar`}\n+                      data-progress={`${student.progress}`}\n+                    />\n+                  </div>\n+                  <span className=\"text-lg font-semibold\">\n+                    {student.progress}%\n+                  </span>\n+                </div>\n+              ))}\n+            </div>\n+          </Card> */}\n+        </div>\n+      </div>\n+\n+      Topics and their content\n+      {/* <div className=\"mt-6 space-y-6\">\n+        {(processedTopics || [])\n+          .sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n+          .map(topic => (\n+            <Card key={topic.id} className=\"border-l-4 border-l-primary\">\n+              <CardHeader>\n+                <CardTitle>{topic.title}</CardTitle>\n+              </CardHeader>\n+              <CardContent>\n+                <div className=\"space-y-4\">\n+                  {topic.subtopics\n+                    .sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n+                    .map(subtopic => (\n+                      <div key={subtopic.id} className=\"space-y-4\">\n+                        <h3 className=\"text-lg font-semibold\">{subtopic.title}</h3>\n+                        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n+                          {lessons\n+                            .filter(lesson => lesson.subtopic_id === subtopic.id)\n+                            .map(lesson => (\n+                              <LessonCard \n+                                key={lesson.id}\n+                                lesson={lesson}\n+                                isSelected={selectedLesson?.id === lesson.id}\n+                                onSelect={setSelectedLesson}\n+                              />\n+                            ))}\n                         </div>\n-                        <div className=\"flex items-center gap-4\">\n-                          <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n-                            <Clock className=\"h-4 w-4\" />\n-                            <span>{subtopic.duration || 15} minutes</span>\n-                          </div>\n-                          <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n-                            <BookOpen className=\"h-4 w-4\" />\n-                            <span>{subtopic.lessons.length} Lessons</span>\n-                          </div>\n-                        </div>\n                       </div>\n-                    </CardHeader>\n-                    <CardFooter className=\"p-4 pt-0\">\n-                      <Button\n-                        variant=\"outline\"\n-                        className=\"w-full\"\n-                        disabled={isLocked}\n-                        onClick={() => {\n-                          setSelectedSubtopic(subtopic);\n-                          setDialogOpen(true);\n-                        }}\n-                      >\n-                        {isLocked ? 'Locked' : 'Start Learning'}\n-                      </Button>\n-                    </CardFooter>\n-                  </Card>\n-                );\n-              })}\n-            </div>\n+                    ))}\n+                </div>\n+              </CardContent>\n+            </Card>\n+          ))}\n+      </div> */}\n+\n+\n+{/* <div className=\"mt-6 space-y-6\">\n+  {selectedGrade?.topics\n+    .sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n+    .map(topic => (\n+      <Card \n+        key={topic.id} \n+        className={cn(\n+          \"border-l-4 border-l-primary transition-all duration-200\",\n+          \"hover:shadow-md\"\n+        )}\n+      >\n+        <CardHeader className=\"cursor-pointer\" onClick={() => setSelectedTopic(topic)}>\n+          <div className=\"flex items-center justify-between\">\n+            <CardTitle className=\"flex items-center gap-2\">\n+              <BookOpen className=\"h-5 w-5 text-primary\" />\n+              {topic.title}\n+            </CardTitle>\n+            <Badge variant=\"outline\" className=\"bg-primary/5\">\n+              {topic.subtopics?.length || 0} Subtopics\n+            </Badge>\n           </div>\n-        ))}\n+        </CardHeader>\n+        <CardContent>\n+          <div className=\"space-y-6\">\n+            {topic.subtopics\n+              ?.sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n+              .map(subtopic => (\n+                <div \n+                  key={subtopic.id} \n+                  className={cn(\n+                    \"space-y-4 p-4 rounded-lg\",\n+                    \"border border-border/50\",\n+                    \"hover:border-primary/50 transition-colors\",\n+                    selectedSubtopic?.id === subtopic.id && \"border-primary/50 bg-accent/5\"\n+                  )}\n+                >\n+                  <div \n+                    className=\"flex items-center justify-between cursor-pointer\"\n+                    onClick={() => setSelectedSubtopic(subtopic)}\n+                  >\n+                    <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n+                      <div className={cn(\n+                        \"w-2 h-2 rounded-full\",\n+                        selectedSubtopic?.id === subtopic.id ? \"bg-primary\" : \"bg-muted\"\n+                      )} />\n+                      {subtopic.title}\n+                    </h3>\n+                    <Badge variant=\"outline\">\n+                      {subtopic.lessons?.length || 0} Lessons\n+                    </Badge>\n+                  </div>\n+                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n+                    {subtopic.lessons\n+                      ?.sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n+                      .map(lesson => (\n+                        <LessonCard \n+                          key={lesson.id}\n+                          lesson={{\n+                            ...lesson,\n+                            color: getRandomColor(subtopic.lessons.indexOf(lesson)),\n+                            unlocked: true, // You can add your unlock logic here\n+                            completed: false, // Add completion logic\n+                            lessonNumber: `${subtopic.lessons.indexOf(lesson) + 1}`,\n+                            totalTopics: String(topic.subtopics?.length || 0),\n+                            difficulty: lesson.metadata?.difficulty || 'Beginner',\n+                            customSubLessons: [{\n+                              id: lesson.id,\n+                              title: lesson.title,\n+                              unlocked: true,\n+                              completed: false,\n+                              duration: lesson.duration || 15,\n+                              description: lesson.description || ''\n+                            }]\n+                          }}\n+                          isSelected={selectedLesson?.id === lesson.id}\n+                          onSelect={setSelectedLesson}\n+                        />\n+                    ))}\n+                  </div>\n+                </div>\n+              ))}\n+          </div>\n+        </CardContent>\n+      </Card>\n+    ))}\n+</div> */}\n+\n+      <div className=\"sticky top-0 z-30 w-full\">\n+        {selectedTopic && (\n+          <Card className={`${selectedTopic.color} text-white rounded-xl`}>\n+            <CardHeader className=\"p-2 md:p-4 md:pl-6\">\n+              <CardTitle className=\"text-2xl\">{selectedTopic.title}</CardTitle>\n+              <div className=\"flex flex-row md:flex-row items-center text-white text-sm space-y-2 md:space-y-0 md:space-x-4 md:p-2\">\n+                <div className=\"flex items-center space-x-2\">\n+                  <BookOpen className=\"h-5 w-5 text-white\" />\n+                  <div className=\"text-sm font-medium\">\n+                    {selectedGrade?.name}{\" \"}\n+                  </div>\n+                </div>\n+\n+                <div className=\"flex items-center space-x-2\">\n+                  <span>Lesson {selectedTopic?.subtopics?.length}</span>\n+                </div>\n+\n+                <div className=\"flex items-center space-x-2\">\n+                  <span className=\"flex items-center space-x-1\">\n+                    <Clock className=\"h-5 w-5 text-white\" />\n+                    <span>{selectedSubtopic?.duration || 0} minutes</span>\n+                  </span>\n+                </div>\n+\n+                <div className=\"flex items-center space-x-2\">\n+                  <span className=\"flex items-center space-x-1\">\n+                    <BookOpen className=\"h-5 w-5 text-white\" />\n+                    <span>{selectedSubtopic?.lessons?.length || 0} Lessons</span>\n+                  </span>\n+                </div>\n+\n+                <div className=\"flex items-center space-x-2\">\n+                  <div className=\"flex items-center space-x-1\">\n+                    <CheckCircle2 className=\"h-5 w-5 text-white\" />\n+                    <span>1/5 Completed</span>\n+                  </div>\n+                </div>\n+              </div>\n+            </CardHeader>\n+          </Card>\n+        )}\n       </div>\n \n       {/* Dialog */}\n       <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n"
                },
                {
                    "date": 1739177704481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -327,8 +327,15 @@\n const getRandomColor = (index: number): string => {\n   return TOPIC_COLORS[index % TOPIC_COLORS.length];\n };\n \n+// Add this type for topic completion status\n+interface TopicStatus {\n+  id: string;\n+  isUnlocked: boolean;\n+  hasContent: boolean;\n+}\n+\n export function LearningPathTeacher() {\n   const navigate = useRouterNavigate();\n   const { logError } = useComponentLogger('LearningPathTeacher');\n   const lessonRefs = useRef<(HTMLDivElement | null)[]>([]);\n@@ -350,8 +357,9 @@\n   const [selectedGrade, setSelectedGrade] = useState<GradeWithHierarchy | null>(null);\n   const [selectedTopic, setSelectedTopic] = useState<TopicWithHierarchy | null>(null);\n   const [selectedSubtopic, setSelectedSubtopic] = useState<SubtopicWithHierarchy | null>(null);\n   const [processedTopics, setProcessedTopics] = useState<TopicWithHierarchy[]>([]);\n+  const [topicStatuses, setTopicStatuses] = useState<TopicStatus[]>([]);\n \n   // Load lock state from localStorage\n   useEffect(() => {\n     try {\n@@ -528,8 +536,9 @@\n \n     fetchInitialData();\n   }, [logError]);\n \n+  // Process topics and their unlock status\n   useEffect(() => {\n     if (selectedGrade?.topics) {\n       const processed = selectedGrade.topics.map((topic, index) => ({\n         ...topic,\n@@ -539,12 +548,22 @@\n           color: getRandomColor(subIndex + selectedGrade.topics.length)\n         }))\n       }));\n       \n+      // Set initial unlock status (first two topics unlocked)\n+      const statuses = processed.map((topic, index) => ({\n+        id: topic.id,\n+        isUnlocked: index < 2,\n+        hasContent: topic.subtopics.some(sub => \n+          sub.lessons && sub.lessons.length > 0 && \n+          sub.lessons.some(lesson => \n+            lesson.content || lesson.questions?.length || lesson.activities?.length\n+          )\n+        )\n+      }));\n+\n       setProcessedTopics(processed);\n-      if (processed.length > 0 && !selectedTopic) {\n-        setSelectedTopic(processed[0]);\n-      }\n+      setTopicStatuses(statuses);\n     }\n   }, [selectedGrade?.topics]);\n \n   const handleClassChange = async (classData: ExtendedClass) => {\n@@ -877,131 +896,66 @@\n           </Card> */}\n         </div>\n       </div>\n \n-      Topics and their content\n-      {/* <div className=\"mt-6 space-y-6\">\n-        {(processedTopics || [])\n-          .sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n-          .map(topic => (\n-            <Card key={topic.id} className=\"border-l-4 border-l-primary\">\n-              <CardHeader>\n-                <CardTitle>{topic.title}</CardTitle>\n-              </CardHeader>\n-              <CardContent>\n-                <div className=\"space-y-4\">\n-                  {topic.subtopics\n-                    .sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n-                    .map(subtopic => (\n-                      <div key={subtopic.id} className=\"space-y-4\">\n-                        <h3 className=\"text-lg font-semibold\">{subtopic.title}</h3>\n-                        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n-                          {lessons\n-                            .filter(lesson => lesson.subtopic_id === subtopic.id)\n-                            .map(lesson => (\n-                              <LessonCard \n-                                key={lesson.id}\n-                                lesson={lesson}\n-                                isSelected={selectedLesson?.id === lesson.id}\n-                                onSelect={setSelectedLesson}\n-                              />\n-                            ))}\n-                        </div>\n-                      </div>\n-                    ))}\n-                </div>\n-              </CardContent>\n-            </Card>\n-          ))}\n-      </div> */}\n+      {/* Topics and Subtopics List */}\n+      <div className=\"mt-8 space-y-6\">\n+        {(processedTopics || []).map((topic, topicIndex) => {\n+          const status = topicStatuses.find(s => s.id === topic.id);\n+          const isLocked = !status?.isUnlocked && status?.hasContent;\n \n+          return (\n+            <div key={topic.id} className=\"space-y-4\">\n+              {/* Topic Header */}\n+              <div className=\"flex items-center gap-2\">\n+                {isLocked ? (\n+                  <Lock className=\"h-5 w-5 text-muted-foreground\" />\n+                ) : (\n+                  <BookOpen className=\"h-5 w-5 text-primary\" />\n+                )}\n+                <h2 className=\"text-xl font-semibold\">{topic.title}</h2>\n+              </div>\n \n-{/* <div className=\"mt-6 space-y-6\">\n-  {selectedGrade?.topics\n-    .sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n-    .map(topic => (\n-      <Card \n-        key={topic.id} \n-        className={cn(\n-          \"border-l-4 border-l-primary transition-all duration-200\",\n-          \"hover:shadow-md\"\n-        )}\n-      >\n-        <CardHeader className=\"cursor-pointer\" onClick={() => setSelectedTopic(topic)}>\n-          <div className=\"flex items-center justify-between\">\n-            <CardTitle className=\"flex items-center gap-2\">\n-              <BookOpen className=\"h-5 w-5 text-primary\" />\n-              {topic.title}\n-            </CardTitle>\n-            <Badge variant=\"outline\" className=\"bg-primary/5\">\n-              {topic.subtopics?.length || 0} Subtopics\n-            </Badge>\n-          </div>\n-        </CardHeader>\n-        <CardContent>\n-          <div className=\"space-y-6\">\n-            {topic.subtopics\n-              ?.sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n-              .map(subtopic => (\n-                <div \n-                  key={subtopic.id} \n-                  className={cn(\n-                    \"space-y-4 p-4 rounded-lg\",\n-                    \"border border-border/50\",\n-                    \"hover:border-primary/50 transition-colors\",\n-                    selectedSubtopic?.id === subtopic.id && \"border-primary/50 bg-accent/5\"\n-                  )}\n-                >\n-                  <div \n-                    className=\"flex items-center justify-between cursor-pointer\"\n-                    onClick={() => setSelectedSubtopic(subtopic)}\n+              {/* Subtopics Grid */}\n+              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n+                {topic.subtopics.map((subtopic) => (\n+                  <Card\n+                    key={subtopic.id}\n+                    className={cn(\n+                      \"transition-all duration-200\",\n+                      isLocked ? \"opacity-50\" : \"hover:border-primary\",\n+                      \"cursor-pointer\"\n+                    )}\n+                    onClick={() => {\n+                      if (!isLocked) {\n+                        setSelectedSubtopic(subtopic);\n+                        setDialogOpen(true);\n+                      }\n+                    }}\n                   >\n-                    <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n-                      <div className={cn(\n-                        \"w-2 h-2 rounded-full\",\n-                        selectedSubtopic?.id === subtopic.id ? \"bg-primary\" : \"bg-muted\"\n-                      )} />\n-                      {subtopic.title}\n-                    </h3>\n-                    <Badge variant=\"outline\">\n-                      {subtopic.lessons?.length || 0} Lessons\n-                    </Badge>\n-                  </div>\n-                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n-                    {subtopic.lessons\n-                      ?.sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n-                      .map(lesson => (\n-                        <LessonCard \n-                          key={lesson.id}\n-                          lesson={{\n-                            ...lesson,\n-                            color: getRandomColor(subtopic.lessons.indexOf(lesson)),\n-                            unlocked: true, // You can add your unlock logic here\n-                            completed: false, // Add completion logic\n-                            lessonNumber: `${subtopic.lessons.indexOf(lesson) + 1}`,\n-                            totalTopics: String(topic.subtopics?.length || 0),\n-                            difficulty: lesson.metadata?.difficulty || 'Beginner',\n-                            customSubLessons: [{\n-                              id: lesson.id,\n-                              title: lesson.title,\n-                              unlocked: true,\n-                              completed: false,\n-                              duration: lesson.duration || 15,\n-                              description: lesson.description || ''\n-                            }]\n-                          }}\n-                          isSelected={selectedLesson?.id === lesson.id}\n-                          onSelect={setSelectedLesson}\n-                        />\n-                    ))}\n-                  </div>\n-                </div>\n-              ))}\n-          </div>\n-        </CardContent>\n-      </Card>\n-    ))}\n-</div> */}\n+                    <CardHeader>\n+                      <CardTitle className=\"flex items-center justify-between\">\n+                        <span>{subtopic.title}</span>\n+                        {isLocked && <Lock className=\"h-4 w-4\" />}\n+                      </CardTitle>\n+                      <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n+                        <div className=\"flex items-center gap-2\">\n+                          <Clock className=\"h-4 w-4\" />\n+                          <span>{subtopic.duration || 15} minutes</span>\n+                        </div>\n+                        <div className=\"flex items-center gap-2\">\n+                          <BookOpen className=\"h-4 w-4\" />\n+                          <span>{subtopic.lessons?.length || 0} Lessons</span>\n+                        </div>\n+                      </div>\n+                    </CardHeader>\n+                  </Card>\n+                ))}\n+              </div>\n+            </div>\n+          );\n+        })}\n+      </div>\n \n       <div className=\"sticky top-0 z-30 w-full\">\n         {selectedTopic && (\n           <Card className={`${selectedTopic.color} text-white rounded-xl`}>\n"
                },
                {
                    "date": 1739177758182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1002,76 +1002,31 @@\n       {/* Dialog */}\n       <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n         <DialogContent>\n           <DialogHeader>\n-            <div className=\"flex flex-col space-y-1.5\">\n-              <DialogTitle>\n-                {selectedSubLesson?.title}\n-                {selectedSubLesson?.completed && (\n-                  <CheckCircle2 className=\"inline-block ml-2 h-5 w-5 text-green-500\" />\n-                )}\n-              </DialogTitle>\n-              <DialogDescription>\n-                <span className=\"flex items-center gap-2 text-sm\">\n-                  Part of {currentLesson?.title}\n-                </span>\n-                <span className=\"block mt-2 text-sm text-muted-foreground\">\n-                  {selectedSubLesson?.description}\n-                </span>\n-                {selectedSubLesson?.completed && (\n-                  <div className=\"mt-4 p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n-                    <span className=\"text-green-700 dark:text-green-300 text-sm\">\n-                      You have completed this lesson\n-                    </span>\n-                  </div>\n-                )}\n-              </DialogDescription>\n-            </div>\n+            <DialogTitle>{selectedSubtopic?.title}</DialogTitle>\n+            <DialogDescription>\n+              Start learning this subtopic\n+              <div className=\"mt-2 flex items-center gap-2 text-sm\">\n+                <Clock className=\"h-4 w-4\" />\n+                <span>{selectedSubtopic?.duration || 15} minutes</span>\n+                <BookOpen className=\"h-4 w-4 ml-2\" />\n+                <span>{selectedSubtopic?.lessons?.length || 0} Lessons</span>\n+              </div>\n+            </DialogDescription>\n           </DialogHeader>\n           <DialogFooter>\n-            {!selectedSubLesson?.unlocked ? (\n-              <span className=\"text-sm text-muted-foreground\">\n-                Complete previous lessons to unlock this content\n-              </span>\n-            ) : selectedSubLesson.completed ? (\n-              <>\n-                <Button\n-                  onClick={() => {\n-                    if (currentLesson?.id && selectedSubLesson?.id) {\n-                      handleStartLesson(currentLesson.id, selectedSubLesson.id);\n-                    }\n-                  }}\n-                  disabled={isLocked}\n-                >\n-                  Continue\n-                  <ArrowRight className=\"ml-2 h-4 w-4\" />\n-                </Button>\n-                <Button\n-                  variant=\"outline\"\n-                  onClick={() => {\n-                    if (currentLesson?.id && selectedSubLesson?.id) {\n-                      handleRestartLesson(currentLesson.id, selectedSubLesson.id);\n-                    }\n-                  }}\n-                  disabled={isLocked}\n-                >\n-                  Restart\n-                  <RotateCcw className=\"ml-2 h-4 w-4\" />\n-                </Button>\n-              </>\n-            ) : (\n-              <Button\n-                onClick={() => {\n-                  if (currentLesson?.id && selectedSubLesson?.id) {\n-                    handleStartLesson(currentLesson.id, selectedSubLesson.id);\n-                  }\n-                }}\n-                disabled={isLocked}\n-              >\n-                Start Lesson\n-                <ArrowRight className=\"ml-2 h-4 w-4\" />\n-              </Button>\n-            )}\n+            <Button\n+              onClick={() => {\n+                setDialogOpen(false);\n+                if (selectedSubtopic) {\n+                  navigate(`/lessons/${selectedSubtopic.id}`);\n+                }\n+              }}\n+            >\n+              Start Lesson\n+              <ArrowRight className=\"ml-2 h-4 w-4\" />\n+            </Button>\n           </DialogFooter>\n         </DialogContent>\n       </Dialog>\n \n"
                },
                {
                    "date": 1739177803599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -327,15 +327,8 @@\n const getRandomColor = (index: number): string => {\n   return TOPIC_COLORS[index % TOPIC_COLORS.length];\n };\n \n-// Add this type for topic completion status\n-interface TopicStatus {\n-  id: string;\n-  isUnlocked: boolean;\n-  hasContent: boolean;\n-}\n-\n export function LearningPathTeacher() {\n   const navigate = useRouterNavigate();\n   const { logError } = useComponentLogger('LearningPathTeacher');\n   const lessonRefs = useRef<(HTMLDivElement | null)[]>([]);\n@@ -357,9 +350,8 @@\n   const [selectedGrade, setSelectedGrade] = useState<GradeWithHierarchy | null>(null);\n   const [selectedTopic, setSelectedTopic] = useState<TopicWithHierarchy | null>(null);\n   const [selectedSubtopic, setSelectedSubtopic] = useState<SubtopicWithHierarchy | null>(null);\n   const [processedTopics, setProcessedTopics] = useState<TopicWithHierarchy[]>([]);\n-  const [topicStatuses, setTopicStatuses] = useState<TopicStatus[]>([]);\n \n   // Load lock state from localStorage\n   useEffect(() => {\n     try {\n@@ -536,9 +528,8 @@\n \n     fetchInitialData();\n   }, [logError]);\n \n-  // Process topics and their unlock status\n   useEffect(() => {\n     if (selectedGrade?.topics) {\n       const processed = selectedGrade.topics.map((topic, index) => ({\n         ...topic,\n@@ -548,22 +539,12 @@\n           color: getRandomColor(subIndex + selectedGrade.topics.length)\n         }))\n       }));\n       \n-      // Set initial unlock status (first two topics unlocked)\n-      const statuses = processed.map((topic, index) => ({\n-        id: topic.id,\n-        isUnlocked: index < 2,\n-        hasContent: topic.subtopics.some(sub => \n-          sub.lessons && sub.lessons.length > 0 && \n-          sub.lessons.some(lesson => \n-            lesson.content || lesson.questions?.length || lesson.activities?.length\n-          )\n-        )\n-      }));\n-\n       setProcessedTopics(processed);\n-      setTopicStatuses(statuses);\n+      if (processed.length > 0 && !selectedTopic) {\n+        setSelectedTopic(processed[0]);\n+      }\n     }\n   }, [selectedGrade?.topics]);\n \n   const handleClassChange = async (classData: ExtendedClass) => {\n@@ -896,66 +877,131 @@\n           </Card> */}\n         </div>\n       </div>\n \n-      {/* Topics and Subtopics List */}\n-      <div className=\"mt-8 space-y-6\">\n-        {(processedTopics || []).map((topic, topicIndex) => {\n-          const status = topicStatuses.find(s => s.id === topic.id);\n-          const isLocked = !status?.isUnlocked && status?.hasContent;\n+      Topics and their content\n+      {/* <div className=\"mt-6 space-y-6\">\n+        {(processedTopics || [])\n+          .sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n+          .map(topic => (\n+            <Card key={topic.id} className=\"border-l-4 border-l-primary\">\n+              <CardHeader>\n+                <CardTitle>{topic.title}</CardTitle>\n+              </CardHeader>\n+              <CardContent>\n+                <div className=\"space-y-4\">\n+                  {topic.subtopics\n+                    .sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n+                    .map(subtopic => (\n+                      <div key={subtopic.id} className=\"space-y-4\">\n+                        <h3 className=\"text-lg font-semibold\">{subtopic.title}</h3>\n+                        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n+                          {lessons\n+                            .filter(lesson => lesson.subtopic_id === subtopic.id)\n+                            .map(lesson => (\n+                              <LessonCard \n+                                key={lesson.id}\n+                                lesson={lesson}\n+                                isSelected={selectedLesson?.id === lesson.id}\n+                                onSelect={setSelectedLesson}\n+                              />\n+                            ))}\n+                        </div>\n+                      </div>\n+                    ))}\n+                </div>\n+              </CardContent>\n+            </Card>\n+          ))}\n+      </div> */}\n \n-          return (\n-            <div key={topic.id} className=\"space-y-4\">\n-              {/* Topic Header */}\n-              <div className=\"flex items-center gap-2\">\n-                {isLocked ? (\n-                  <Lock className=\"h-5 w-5 text-muted-foreground\" />\n-                ) : (\n-                  <BookOpen className=\"h-5 w-5 text-primary\" />\n-                )}\n-                <h2 className=\"text-xl font-semibold\">{topic.title}</h2>\n-              </div>\n \n-              {/* Subtopics Grid */}\n-              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n-                {topic.subtopics.map((subtopic) => (\n-                  <Card\n-                    key={subtopic.id}\n-                    className={cn(\n-                      \"transition-all duration-200\",\n-                      isLocked ? \"opacity-50\" : \"hover:border-primary\",\n-                      \"cursor-pointer\"\n-                    )}\n-                    onClick={() => {\n-                      if (!isLocked) {\n-                        setSelectedSubtopic(subtopic);\n-                        setDialogOpen(true);\n-                      }\n-                    }}\n+{/* <div className=\"mt-6 space-y-6\">\n+  {selectedGrade?.topics\n+    .sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n+    .map(topic => (\n+      <Card \n+        key={topic.id} \n+        className={cn(\n+          \"border-l-4 border-l-primary transition-all duration-200\",\n+          \"hover:shadow-md\"\n+        )}\n+      >\n+        <CardHeader className=\"cursor-pointer\" onClick={() => setSelectedTopic(topic)}>\n+          <div className=\"flex items-center justify-between\">\n+            <CardTitle className=\"flex items-center gap-2\">\n+              <BookOpen className=\"h-5 w-5 text-primary\" />\n+              {topic.title}\n+            </CardTitle>\n+            <Badge variant=\"outline\" className=\"bg-primary/5\">\n+              {topic.subtopics?.length || 0} Subtopics\n+            </Badge>\n+          </div>\n+        </CardHeader>\n+        <CardContent>\n+          <div className=\"space-y-6\">\n+            {topic.subtopics\n+              ?.sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n+              .map(subtopic => (\n+                <div \n+                  key={subtopic.id} \n+                  className={cn(\n+                    \"space-y-4 p-4 rounded-lg\",\n+                    \"border border-border/50\",\n+                    \"hover:border-primary/50 transition-colors\",\n+                    selectedSubtopic?.id === subtopic.id && \"border-primary/50 bg-accent/5\"\n+                  )}\n+                >\n+                  <div \n+                    className=\"flex items-center justify-between cursor-pointer\"\n+                    onClick={() => setSelectedSubtopic(subtopic)}\n                   >\n-                    <CardHeader>\n-                      <CardTitle className=\"flex items-center justify-between\">\n-                        <span>{subtopic.title}</span>\n-                        {isLocked && <Lock className=\"h-4 w-4\" />}\n-                      </CardTitle>\n-                      <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n-                        <div className=\"flex items-center gap-2\">\n-                          <Clock className=\"h-4 w-4\" />\n-                          <span>{subtopic.duration || 15} minutes</span>\n-                        </div>\n-                        <div className=\"flex items-center gap-2\">\n-                          <BookOpen className=\"h-4 w-4\" />\n-                          <span>{subtopic.lessons?.length || 0} Lessons</span>\n-                        </div>\n-                      </div>\n-                    </CardHeader>\n-                  </Card>\n-                ))}\n-              </div>\n-            </div>\n-          );\n-        })}\n-      </div>\n+                    <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n+                      <div className={cn(\n+                        \"w-2 h-2 rounded-full\",\n+                        selectedSubtopic?.id === subtopic.id ? \"bg-primary\" : \"bg-muted\"\n+                      )} />\n+                      {subtopic.title}\n+                    </h3>\n+                    <Badge variant=\"outline\">\n+                      {subtopic.lessons?.length || 0} Lessons\n+                    </Badge>\n+                  </div>\n+                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n+                    {subtopic.lessons\n+                      ?.sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n+                      .map(lesson => (\n+                        <LessonCard \n+                          key={lesson.id}\n+                          lesson={{\n+                            ...lesson,\n+                            color: getRandomColor(subtopic.lessons.indexOf(lesson)),\n+                            unlocked: true, // You can add your unlock logic here\n+                            completed: false, // Add completion logic\n+                            lessonNumber: `${subtopic.lessons.indexOf(lesson) + 1}`,\n+                            totalTopics: String(topic.subtopics?.length || 0),\n+                            difficulty: lesson.metadata?.difficulty || 'Beginner',\n+                            customSubLessons: [{\n+                              id: lesson.id,\n+                              title: lesson.title,\n+                              unlocked: true,\n+                              completed: false,\n+                              duration: lesson.duration || 15,\n+                              description: lesson.description || ''\n+                            }]\n+                          }}\n+                          isSelected={selectedLesson?.id === lesson.id}\n+                          onSelect={setSelectedLesson}\n+                        />\n+                    ))}\n+                  </div>\n+                </div>\n+              ))}\n+          </div>\n+        </CardContent>\n+      </Card>\n+    ))}\n+</div> */}\n \n       <div className=\"sticky top-0 z-30 w-full\">\n         {selectedTopic && (\n           <Card className={`${selectedTopic.color} text-white rounded-xl`}>\n@@ -1002,31 +1048,76 @@\n       {/* Dialog */}\n       <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n         <DialogContent>\n           <DialogHeader>\n-            <DialogTitle>{selectedSubtopic?.title}</DialogTitle>\n-            <DialogDescription>\n-              Start learning this subtopic\n-              <div className=\"mt-2 flex items-center gap-2 text-sm\">\n-                <Clock className=\"h-4 w-4\" />\n-                <span>{selectedSubtopic?.duration || 15} minutes</span>\n-                <BookOpen className=\"h-4 w-4 ml-2\" />\n-                <span>{selectedSubtopic?.lessons?.length || 0} Lessons</span>\n-              </div>\n-            </DialogDescription>\n+            <div className=\"flex flex-col space-y-1.5\">\n+              <DialogTitle>\n+                {selectedSubLesson?.title}\n+                {selectedSubLesson?.completed && (\n+                  <CheckCircle2 className=\"inline-block ml-2 h-5 w-5 text-green-500\" />\n+                )}\n+              </DialogTitle>\n+              <DialogDescription>\n+                <span className=\"flex items-center gap-2 text-sm\">\n+                  Part of {currentLesson?.title}\n+                </span>\n+                <span className=\"block mt-2 text-sm text-muted-foreground\">\n+                  {selectedSubLesson?.description}\n+                </span>\n+                {selectedSubLesson?.completed && (\n+                  <div className=\"mt-4 p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n+                    <span className=\"text-green-700 dark:text-green-300 text-sm\">\n+                      You have completed this lesson\n+                    </span>\n+                  </div>\n+                )}\n+              </DialogDescription>\n+            </div>\n           </DialogHeader>\n           <DialogFooter>\n-            <Button\n-              onClick={() => {\n-                setDialogOpen(false);\n-                if (selectedSubtopic) {\n-                  navigate(`/lessons/${selectedSubtopic.id}`);\n-                }\n-              }}\n-            >\n-              Start Lesson\n-              <ArrowRight className=\"ml-2 h-4 w-4\" />\n-            </Button>\n+            {!selectedSubLesson?.unlocked ? (\n+              <span className=\"text-sm text-muted-foreground\">\n+                Complete previous lessons to unlock this content\n+              </span>\n+            ) : selectedSubLesson.completed ? (\n+              <>\n+                <Button\n+                  onClick={() => {\n+                    if (currentLesson?.id && selectedSubLesson?.id) {\n+                      handleStartLesson(currentLesson.id, selectedSubLesson.id);\n+                    }\n+                  }}\n+                  disabled={isLocked}\n+                >\n+                  Continue\n+                  <ArrowRight className=\"ml-2 h-4 w-4\" />\n+                </Button>\n+                <Button\n+                  variant=\"outline\"\n+                  onClick={() => {\n+                    if (currentLesson?.id && selectedSubLesson?.id) {\n+                      handleRestartLesson(currentLesson.id, selectedSubLesson.id);\n+                    }\n+                  }}\n+                  disabled={isLocked}\n+                >\n+                  Restart\n+                  <RotateCcw className=\"ml-2 h-4 w-4\" />\n+                </Button>\n+              </>\n+            ) : (\n+              <Button\n+                onClick={() => {\n+                  if (currentLesson?.id && selectedSubLesson?.id) {\n+                    handleStartLesson(currentLesson.id, selectedSubLesson.id);\n+                  }\n+                }}\n+                disabled={isLocked}\n+              >\n+                Start Lesson\n+                <ArrowRight className=\"ml-2 h-4 w-4\" />\n+              </Button>\n+            )}\n           </DialogFooter>\n         </DialogContent>\n       </Dialog>\n \n"
                },
                {
                    "date": 1739179972265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -327,8 +327,48 @@\n const getRandomColor = (index: number): string => {\n   return TOPIC_COLORS[index % TOPIC_COLORS.length];\n };\n \n+const TopicCard = ({ topic, isUnlocked, onSubtopicClick }) => {\n+  return (\n+    <Card className={`${topic.color || 'bg-primary'} text-white rounded-xl mb-6`}>\n+      <CardHeader className=\"p-4\">\n+        <CardTitle className=\"text-2xl flex items-center gap-2\">\n+          {!isUnlocked && <Lock className=\"h-5 w-5\" />}\n+          {topic.title}\n+        </CardTitle>\n+        \n+        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mt-4\">\n+          {topic.subtopics.map((subtopic) => (\n+            <Card \n+              key={subtopic.id}\n+              className={cn(\n+                \"bg-white/10 hover:bg-white/20 transition-colors cursor-pointer\",\n+                !isUnlocked && \"opacity-50 pointer-events-none\"\n+              )}\n+              onClick={() => onSubtopicClick(subtopic, topic)}\n+            >\n+              <CardContent className=\"p-4\">\n+                <h3 className=\"font-medium text-lg mb-2\">{subtopic.title}</h3>\n+                <div className=\"flex items-center gap-4 text-sm\">\n+                  <div className=\"flex items-center gap-1\">\n+                    <Clock className=\"h-4 w-4\" />\n+                    <span>{subtopic.duration || 15} minutes</span>\n+                  </div>\n+                  <div className=\"flex items-center gap-1\">\n+                    <BookOpen className=\"h-4 w-4\" />\n+                    <span>{subtopic.lessons?.length || 0} Lessons</span>\n+                  </div>\n+                </div>\n+              </CardContent>\n+            </Card>\n+          ))}\n+        </div>\n+      </CardHeader>\n+    </Card>\n+  );\n+};\n+\n export function LearningPathTeacher() {\n   const navigate = useRouterNavigate();\n   const { logError } = useComponentLogger('LearningPathTeacher');\n   const lessonRefs = useRef<(HTMLDivElement | null)[]>([]);\n@@ -674,8 +714,14 @@\n       });\n     };\n   }, [lessons]);\n \n+  const handleSubtopicClick = (subtopic: SubtopicWithHierarchy, topic: TopicWithHierarchy) => {\n+    setSelectedSubtopic(subtopic);\n+    setSelectedTopic(topic);\n+    setDialogOpen(true);\n+  };\n+\n   if (isLoading) {\n     return (\n       <div className=\"flex items-center justify-center h-full\">\n         <div className=\"text-center space-y-4\">\n@@ -877,247 +923,61 @@\n           </Card> */}\n         </div>\n       </div>\n \n-      Topics and their content\n-      {/* <div className=\"mt-6 space-y-6\">\n-        {(processedTopics || [])\n-          .sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n-          .map(topic => (\n-            <Card key={topic.id} className=\"border-l-4 border-l-primary\">\n-              <CardHeader>\n-                <CardTitle>{topic.title}</CardTitle>\n-              </CardHeader>\n-              <CardContent>\n-                <div className=\"space-y-4\">\n-                  {topic.subtopics\n-                    .sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n-                    .map(subtopic => (\n-                      <div key={subtopic.id} className=\"space-y-4\">\n-                        <h3 className=\"text-lg font-semibold\">{subtopic.title}</h3>\n-                        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n-                          {lessons\n-                            .filter(lesson => lesson.subtopic_id === subtopic.id)\n-                            .map(lesson => (\n-                              <LessonCard \n-                                key={lesson.id}\n-                                lesson={lesson}\n-                                isSelected={selectedLesson?.id === lesson.id}\n-                                onSelect={setSelectedLesson}\n-                              />\n-                            ))}\n-                        </div>\n-                      </div>\n-                    ))}\n-                </div>\n-              </CardContent>\n-            </Card>\n-          ))}\n-      </div> */}\n+      <div className=\"mt-6 space-y-6\">\n+        {(processedTopics || []).map((topic, index) => {\n+          // A topic is unlocked if:\n+          // 1. It's one of the first two topics\n+          // 2. It has no lessons (no content to lock)\n+          // 3. Previous topic is completed\n+          const hasContent = topic.subtopics.some(sub => sub.lessons?.length > 0);\n+          const isUnlocked = \n+            index < 2 || \n+            !hasContent || \n+            (index > 0 && processedTopics[index - 1]?.completed);\n \n-\n-{/* <div className=\"mt-6 space-y-6\">\n-  {selectedGrade?.topics\n-    .sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n-    .map(topic => (\n-      <Card \n-        key={topic.id} \n-        className={cn(\n-          \"border-l-4 border-l-primary transition-all duration-200\",\n-          \"hover:shadow-md\"\n-        )}\n-      >\n-        <CardHeader className=\"cursor-pointer\" onClick={() => setSelectedTopic(topic)}>\n-          <div className=\"flex items-center justify-between\">\n-            <CardTitle className=\"flex items-center gap-2\">\n-              <BookOpen className=\"h-5 w-5 text-primary\" />\n-              {topic.title}\n-            </CardTitle>\n-            <Badge variant=\"outline\" className=\"bg-primary/5\">\n-              {topic.subtopics?.length || 0} Subtopics\n-            </Badge>\n-          </div>\n-        </CardHeader>\n-        <CardContent>\n-          <div className=\"space-y-6\">\n-            {topic.subtopics\n-              ?.sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n-              .map(subtopic => (\n-                <div \n-                  key={subtopic.id} \n-                  className={cn(\n-                    \"space-y-4 p-4 rounded-lg\",\n-                    \"border border-border/50\",\n-                    \"hover:border-primary/50 transition-colors\",\n-                    selectedSubtopic?.id === subtopic.id && \"border-primary/50 bg-accent/5\"\n-                  )}\n-                >\n-                  <div \n-                    className=\"flex items-center justify-between cursor-pointer\"\n-                    onClick={() => setSelectedSubtopic(subtopic)}\n-                  >\n-                    <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n-                      <div className={cn(\n-                        \"w-2 h-2 rounded-full\",\n-                        selectedSubtopic?.id === subtopic.id ? \"bg-primary\" : \"bg-muted\"\n-                      )} />\n-                      {subtopic.title}\n-                    </h3>\n-                    <Badge variant=\"outline\">\n-                      {subtopic.lessons?.length || 0} Lessons\n-                    </Badge>\n-                  </div>\n-                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n-                    {subtopic.lessons\n-                      ?.sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n-                      .map(lesson => (\n-                        <LessonCard \n-                          key={lesson.id}\n-                          lesson={{\n-                            ...lesson,\n-                            color: getRandomColor(subtopic.lessons.indexOf(lesson)),\n-                            unlocked: true, // You can add your unlock logic here\n-                            completed: false, // Add completion logic\n-                            lessonNumber: `${subtopic.lessons.indexOf(lesson) + 1}`,\n-                            totalTopics: String(topic.subtopics?.length || 0),\n-                            difficulty: lesson.metadata?.difficulty || 'Beginner',\n-                            customSubLessons: [{\n-                              id: lesson.id,\n-                              title: lesson.title,\n-                              unlocked: true,\n-                              completed: false,\n-                              duration: lesson.duration || 15,\n-                              description: lesson.description || ''\n-                            }]\n-                          }}\n-                          isSelected={selectedLesson?.id === lesson.id}\n-                          onSelect={setSelectedLesson}\n-                        />\n-                    ))}\n-                  </div>\n-                </div>\n-              ))}\n-          </div>\n-        </CardContent>\n-      </Card>\n-    ))}\n-</div> */}\n-\n-      <div className=\"sticky top-0 z-30 w-full\">\n-        {selectedTopic && (\n-          <Card className={`${selectedTopic.color} text-white rounded-xl`}>\n-            <CardHeader className=\"p-2 md:p-4 md:pl-6\">\n-              <CardTitle className=\"text-2xl\">{selectedTopic.title}</CardTitle>\n-              <div className=\"flex flex-row md:flex-row items-center text-white text-sm space-y-2 md:space-y-0 md:space-x-4 md:p-2\">\n-                <div className=\"flex items-center space-x-2\">\n-                  <BookOpen className=\"h-5 w-5 text-white\" />\n-                  <div className=\"text-sm font-medium\">\n-                    {selectedGrade?.name}{\" \"}\n-                  </div>\n-                </div>\n-\n-                <div className=\"flex items-center space-x-2\">\n-                  <span>Lesson {selectedTopic?.subtopics?.length}</span>\n-                </div>\n-\n-                <div className=\"flex items-center space-x-2\">\n-                  <span className=\"flex items-center space-x-1\">\n-                    <Clock className=\"h-5 w-5 text-white\" />\n-                    <span>{selectedSubtopic?.duration || 0} minutes</span>\n-                  </span>\n-                </div>\n-\n-                <div className=\"flex items-center space-x-2\">\n-                  <span className=\"flex items-center space-x-1\">\n-                    <BookOpen className=\"h-5 w-5 text-white\" />\n-                    <span>{selectedSubtopic?.lessons?.length || 0} Lessons</span>\n-                  </span>\n-                </div>\n-\n-                <div className=\"flex items-center space-x-2\">\n-                  <div className=\"flex items-center space-x-1\">\n-                    <CheckCircle2 className=\"h-5 w-5 text-white\" />\n-                    <span>1/5 Completed</span>\n-                  </div>\n-                </div>\n-              </div>\n-            </CardHeader>\n-          </Card>\n-        )}\n+          return (\n+            <TopicCard\n+              key={topic.id}\n+              topic={topic}\n+              isUnlocked={isUnlocked}\n+              onSubtopicClick={handleSubtopicClick}\n+            />\n+          );\n+        })}\n       </div>\n \n-      {/* Dialog */}\n       <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n         <DialogContent>\n           <DialogHeader>\n-            <div className=\"flex flex-col space-y-1.5\">\n-              <DialogTitle>\n-                {selectedSubLesson?.title}\n-                {selectedSubLesson?.completed && (\n-                  <CheckCircle2 className=\"inline-block ml-2 h-5 w-5 text-green-500\" />\n-                )}\n-              </DialogTitle>\n-              <DialogDescription>\n-                <span className=\"flex items-center gap-2 text-sm\">\n-                  Part of {currentLesson?.title}\n-                </span>\n-                <span className=\"block mt-2 text-sm text-muted-foreground\">\n-                  {selectedSubLesson?.description}\n-                </span>\n-                {selectedSubLesson?.completed && (\n-                  <div className=\"mt-4 p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n-                    <span className=\"text-green-700 dark:text-green-300 text-sm\">\n-                      You have completed this lesson\n-                    </span>\n-                  </div>\n-                )}\n-              </DialogDescription>\n-            </div>\n+            <DialogTitle>{selectedSubtopic?.title}</DialogTitle>\n+            <DialogDescription>\n+              Part of {selectedTopic?.title}\n+              <div className=\"mt-2\">\n+                <div className=\"flex items-center gap-2 text-sm\">\n+                  <Clock className=\"h-4 w-4\" />\n+                  <span>{selectedSubtopic?.duration || 15} minutes</span>\n+                </div>\n+                <div className=\"flex items-center gap-2 text-sm mt-1\">\n+                  <BookOpen className=\"h-4 w-4\" />\n+                  <span>{selectedSubtopic?.lessons?.length || 0} Lessons</span>\n+                </div>\n+              </div>\n+            </DialogDescription>\n           </DialogHeader>\n           <DialogFooter>\n-            {!selectedSubLesson?.unlocked ? (\n-              <span className=\"text-sm text-muted-foreground\">\n-                Complete previous lessons to unlock this content\n-              </span>\n-            ) : selectedSubLesson.completed ? (\n-              <>\n-                <Button\n-                  onClick={() => {\n-                    if (currentLesson?.id && selectedSubLesson?.id) {\n-                      handleStartLesson(currentLesson.id, selectedSubLesson.id);\n-                    }\n-                  }}\n-                  disabled={isLocked}\n-                >\n-                  Continue\n-                  <ArrowRight className=\"ml-2 h-4 w-4\" />\n-                </Button>\n-                <Button\n-                  variant=\"outline\"\n-                  onClick={() => {\n-                    if (currentLesson?.id && selectedSubLesson?.id) {\n-                      handleRestartLesson(currentLesson.id, selectedSubLesson.id);\n-                    }\n-                  }}\n-                  disabled={isLocked}\n-                >\n-                  Restart\n-                  <RotateCcw className=\"ml-2 h-4 w-4\" />\n-                </Button>\n-              </>\n-            ) : (\n-              <Button\n-                onClick={() => {\n-                  if (currentLesson?.id && selectedSubLesson?.id) {\n-                    handleStartLesson(currentLesson.id, selectedSubLesson.id);\n-                  }\n-                }}\n-                disabled={isLocked}\n-              >\n-                Start Lesson\n-                <ArrowRight className=\"ml-2 h-4 w-4\" />\n-              </Button>\n-            )}\n+            <Button\n+              onClick={() => {\n+                setDialogOpen(false);\n+                if (selectedSubtopic?.id) {\n+                  navigate(`/lessons/${selectedSubtopic.id}`);\n+                }\n+              }}\n+            >\n+              Start Lesson\n+              <ArrowRight className=\"ml-2 h-4 w-4\" />\n+            </Button>\n           </DialogFooter>\n         </DialogContent>\n       </Dialog>\n \n"
                },
                {
                    "date": 1739180489753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -367,8 +367,15 @@\n     </Card>\n   );\n };\n \n+// Add this interface for topic progress\n+interface TopicProgress {\n+  id: string;\n+  isCompleted: boolean;\n+  isUnlocked: boolean;\n+}\n+\n export function LearningPathTeacher() {\n   const navigate = useRouterNavigate();\n   const { logError } = useComponentLogger('LearningPathTeacher');\n   const lessonRefs = useRef<(HTMLDivElement | null)[]>([]);\n@@ -390,8 +397,9 @@\n   const [selectedGrade, setSelectedGrade] = useState<GradeWithHierarchy | null>(null);\n   const [selectedTopic, setSelectedTopic] = useState<TopicWithHierarchy | null>(null);\n   const [selectedSubtopic, setSelectedSubtopic] = useState<SubtopicWithHierarchy | null>(null);\n   const [processedTopics, setProcessedTopics] = useState<TopicWithHierarchy[]>([]);\n+  const [topicProgress, setTopicProgress] = useState<TopicProgress[]>([]);\n \n   // Load lock state from localStorage\n   useEffect(() => {\n     try {\n@@ -720,8 +728,32 @@\n     setSelectedTopic(topic);\n     setDialogOpen(true);\n   };\n \n+  // Add this helper function to check if a topic should be unlocked\n+  const isTopicUnlocked = (topicIndex: number, topic: TopicWithHierarchy) => {\n+    // First two topics are always unlocked\n+    if (topicIndex <= 1) return true;\n+    \n+    // If topic has no lessons or content, it's unlocked\n+    if (!topic.subtopics?.some(sub => sub.lessons?.length > 0)) return true;\n+    \n+    // Check if at least one of the first two topics is completed\n+    return topicProgress.slice(0, 2).some(p => p.isCompleted);\n+  };\n+\n+  // Add this effect to initialize topic progress\n+  useEffect(() => {\n+    if (selectedGrade?.topics) {\n+      const initialProgress = selectedGrade.topics.map((topic, index) => ({\n+        id: topic.id,\n+        isCompleted: false,\n+        isUnlocked: index <= 1 // First two topics start unlocked\n+      }));\n+      setTopicProgress(initialProgress);\n+    }\n+  }, [selectedGrade?.topics]);\n+\n   if (isLoading) {\n     return (\n       <div className=\"flex items-center justify-center h-full\">\n         <div className=\"text-center space-y-4\">\n@@ -755,9 +787,9 @@\n     setIsLocked(!isLocked);\n   };\n \n   return (\n-    <div className=\"max-w-6xl w-full relative\">\n+    <div className=\"w-full max-w-6xl mx-auto px-4 sm:px-6 space-y-6\">\n       {/* Grade Selection */}\n       <div className=\"flex gap-4 overflow-x-auto pb-2\">\n         {grades\n           .sort((a, b) => a.level - b.level)\n@@ -923,130 +955,158 @@\n           </Card> */}\n         </div>\n       </div>\n \n-      <div className=\"mt-6 space-y-6\">\n-        {(processedTopics || []).map((topic, index) => {\n-          // A topic is unlocked if:\n-          // 1. It's one of the first two topics\n-          // 2. It has no lessons (no content to lock)\n-          // 3. Previous topic is completed\n-          const hasContent = topic.subtopics.some(sub => sub.lessons?.length > 0);\n-          const isUnlocked = \n-            index < 2 || \n-            !hasContent || \n-            (index > 0 && processedTopics[index - 1]?.completed);\n-\n+      {/* Topics Section */}\n+      <div className=\"space-y-6\">\n+        {processedTopics.map((topic, topicIndex) => {\n+          const isUnlocked = isTopicUnlocked(topicIndex, topic);\n+          \n           return (\n-            <TopicCard\n+            <Card \n               key={topic.id}\n-              topic={topic}\n-              isUnlocked={isUnlocked}\n-              onSubtopicClick={handleSubtopicClick}\n-            />\n+              className={cn(\n+                \"transition-all duration-300\",\n+                \"hover:shadow-lg\",\n+                !isUnlocked && \"opacity-60\"\n+              )}\n+            >\n+              <CardHeader className={cn(\n+                \"p-6\",\n+                topic.color || \"bg-primary\",\n+                \"text-white rounded-t-xl\"\n+              )}>\n+                <div className=\"flex items-center justify-between\">\n+                  <div className=\"flex items-center gap-3\">\n+                    {!isUnlocked ? (\n+                      <Lock className=\"h-6 w-6\" />\n+                    ) : (\n+                      <BookOpen className=\"h-6 w-6\" />\n+                    )}\n+                    <CardTitle className=\"text-2xl font-bold\">\n+                      {topic.title}\n+                    </CardTitle>\n+                  </div>\n+                  <Badge \n+                    variant=\"outline\" \n+                    className=\"bg-white/10 text-white border-white/20\"\n+                  >\n+                    {topic.subtopics?.length || 0} Subtopics\n+                  </Badge>\n+                </div>\n+              </CardHeader>\n+\n+              <CardContent className=\"p-6\">\n+                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n+                  {topic.subtopics?.map((subtopic) => (\n+                    <Card\n+                      key={subtopic.id}\n+                      className={cn(\n+                        \"cursor-pointer transition-all duration-200\",\n+                        \"hover:shadow-md hover:border-primary/50\",\n+                        !isUnlocked && \"pointer-events-none\"\n+                      )}\n+                      onClick={() => handleSubtopicClick(subtopic, topic)}\n+                    >\n+                      <CardContent className=\"p-4\">\n+                        <div className=\"flex flex-col gap-3\">\n+                          <div className=\"flex items-start justify-between\">\n+                            <div>\n+                              <h3 className=\"font-semibold text-lg\">\n+                                {subtopic.title}\n+                              </h3>\n+                              <p className=\"text-sm text-muted-foreground\">\n+                                Ready to start\n+                              </p>\n+                            </div>\n+                            {!isUnlocked && (\n+                              <Lock className=\"h-5 w-5 text-muted-foreground\" />\n+                            )}\n+                          </div>\n+                          \n+                          <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n+                            <div className=\"flex items-center gap-1\">\n+                              <Clock className=\"h-4 w-4\" />\n+                              <span>{subtopic.duration || 15} minutes</span>\n+                            </div>\n+                            <div className=\"flex items-center gap-1\">\n+                              <BookOpen className=\"h-4 w-4\" />\n+                              <span>{subtopic.lessons?.length || 0} Lessons</span>\n+                            </div>\n+                          </div>\n+                        </div>\n+                      </CardContent>\n+                    </Card>\n+                  ))}\n+                </div>\n+              </CardContent>\n+            </Card>\n           );\n         })}\n       </div>\n \n+      {/* Lesson Dialog */}\n       <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n-        <DialogContent>\n+        <DialogContent className=\"sm:max-w-[600px]\">\n           <DialogHeader>\n-            <DialogTitle>{selectedSubtopic?.title}</DialogTitle>\n+            <DialogTitle className=\"text-2xl\">\n+              {selectedSubtopic?.title}\n+            </DialogTitle>\n             <DialogDescription>\n-              Part of {selectedTopic?.title}\n-              <div className=\"mt-2\">\n-                <div className=\"flex items-center gap-2 text-sm\">\n+              <div className=\"text-base\">Part of {selectedTopic?.title}</div>\n+              <div className=\"flex items-center gap-4 mt-2 text-sm\">\n+                <div className=\"flex items-center gap-1\">\n                   <Clock className=\"h-4 w-4\" />\n                   <span>{selectedSubtopic?.duration || 15} minutes</span>\n                 </div>\n-                <div className=\"flex items-center gap-2 text-sm mt-1\">\n+                <div className=\"flex items-center gap-1\">\n                   <BookOpen className=\"h-4 w-4\" />\n                   <span>{selectedSubtopic?.lessons?.length || 0} Lessons</span>\n                 </div>\n               </div>\n             </DialogDescription>\n           </DialogHeader>\n+\n+          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 py-4\">\n+            {selectedSubtopic?.lessons?.map((lesson, index) => (\n+              <Card key={lesson.id} className=\"bg-accent/5\">\n+                <CardContent className=\"p-4\">\n+                  <div className=\"flex flex-col gap-2\">\n+                    <h4 className=\"font-medium\">Lesson {index + 1}</h4>\n+                    <p className=\"text-sm text-muted-foreground line-clamp-2\">\n+                      {lesson.title}\n+                    </p>\n+                    <div className=\"flex items-center gap-3 text-sm text-muted-foreground\">\n+                      <div className=\"flex items-center gap-1\">\n+                        <Clock className=\"h-3 w-3\" />\n+                        <span>{lesson.duration || 15}m</span>\n+                      </div>\n+                      <div className=\"flex items-center gap-1\">\n+                        <BookOpen className=\"h-3 w-3\" />\n+                        <span>{lesson.questions?.length || 0} Questions</span>\n+                      </div>\n+                    </div>\n+                  </div>\n+                </CardContent>\n+              </Card>\n+            ))}\n+          </div>\n+\n           <DialogFooter>\n             <Button\n               onClick={() => {\n                 setDialogOpen(false);\n                 if (selectedSubtopic?.id) {\n                   navigate(`/lessons/${selectedSubtopic.id}`);\n                 }\n               }}\n+              className=\"w-full sm:w-auto\"\n             >\n               Start Lesson\n               <ArrowRight className=\"ml-2 h-4 w-4\" />\n             </Button>\n           </DialogFooter>\n         </DialogContent>\n       </Dialog>\n-\n-      {/* Rest of the component */}\n-      <div className=\"space-y-8 -z-10 pb-[100vh]\">\n-        {lessons.map((lesson, index) => (\n-          <div\n-            id={lesson.id}\n-            ref={setLessonRef(index)}\n-            key={lesson.id}\n-            className=\"space-y-4 mb-8\"\n-          >\n-            <div className={`pt-2 pb-2 px-4 ${index === 0 ? '-mt-10' : ''}`}>\n-              <div className=\"flex w-full justify-center\">\n-                <div className=\"flex items-center relative max-w-lg w-full\">\n-                  <div className=\"flex-grow border-t border-gray-300 dark:border-gray-700\"></div>\n-                  <div className={`${lesson.color} z-10 text-white rounded-3xl text-xl px-4`}>\n-                    {lesson.title}\n-                  </div>\n-                  <div className=\"flex-grow border-t border-gray-300 dark:border-gray-700\"></div>\n-                </div>\n-              </div>\n-            </div>\n-\n-            <div className=\"flex flex-col gap-4\">\n-              {lesson.customSubLessons.map((subLesson) => (\n-                <Link\n-                  to={`/lesson/${lesson.id}/${subLesson.id}`}\n-                  key={subLesson.id}\n-                  onClick={(e) => handleSubLessonClick(e, subLesson, lesson)}\n-                  className={`${isLocked && !subLesson.unlocked ? \"pointer-events-none\" : \"\"}`}\n-                >\n-                  <Card className={cn(\n-                    \"hover:border-primary transition-colors\",\n-                    !subLesson.unlocked && \"opacity-50\"\n-                  )}>\n-                    <CardContent className=\"p-4\">\n-                      <div className=\"flex items-center justify-between\">\n-                        <div className=\"flex items-center gap-2\">\n-                          {subLesson.unlocked ? (\n-                            <BookOpen className=\"h-5 w-5 text-primary\" />\n-                          ) : (\n-                            <Lock className=\"h-5 w-5 text-muted-foreground\" />\n-                          )}\n-                          <div>\n-                            <h3 className=\"font-medium\">{subLesson.title}</h3>\n-                            <p className=\"text-sm text-muted-foreground\">\n-                              {subLesson.description}\n-                            </p>\n-                          </div>\n-                        </div>\n-                        <div className=\"flex items-center gap-4\">\n-                          <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n-                            <Clock className=\"h-4 w-4\" />\n-                            {subLesson.duration} min\n-                          </div>\n-                          {subLesson.completed && (\n-                            <CheckCircle2 className=\"h-5 w-5 text-green-500\" />\n-                          )}\n-                        </div>\n-                      </div>\n-                    </CardContent>\n-                  </Card>\n-                </Link>\n-              ))}\n-            </div>\n-          </div>\n-        ))}\n-      </div>\n     </div>\n   );\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739180502047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,38 +175,20 @@\n });\n \n ClassCard.displayName = 'ClassCard';\n \n-// Add these interfaces to match the database schema\n-interface SchoolClass {\n-  id: string;\n-  name: string;\n-  grade_id: string;\n-  section?: string;\n-  description?: string;\n+// Add these interfaces at the top with other interfaces\n+interface TopicCardProps {\n+  topic: TopicWithHierarchy;\n+  isUnlocked: boolean;\n+  onSubtopicClick: (subtopic: SubtopicWithHierarchy, topic: TopicWithHierarchy) => void;\n }\n \n-interface GradeWithHierarchy {\n-  id: string;\n-  name: string;\n-  level: number;\n-  topics: TopicWithHierarchy[];\n-  classes: SchoolClass[];\n-}\n-\n-type DbTopic = Tables['topics']['Row'] & {\n-  subtopics?: {\n-    id: string;\n-    title: string;\n-    topic_id: string;\n-    order_index?: number;\n-    lessons: LessonWithContent[];\n-  }[];\n-};\n-\n+// Update the TopicWithHierarchy interface\n interface TopicWithHierarchy extends DbTopic {\n   subtopics: SubtopicWithHierarchy[];\n   color?: string;\n+  completed?: boolean; // Add this property\n }\n \n // Add with other type definitions at the top\n type DbSubtopic = Tables['subtopics']['Row'];\n@@ -327,9 +309,9 @@\n const getRandomColor = (index: number): string => {\n   return TOPIC_COLORS[index % TOPIC_COLORS.length];\n };\n \n-const TopicCard = ({ topic, isUnlocked, onSubtopicClick }) => {\n+const TopicCard = ({ topic, isUnlocked, onSubtopicClick }: TopicCardProps) => {\n   return (\n     <Card className={`${topic.color || 'bg-primary'} text-white rounded-xl mb-6`}>\n       <CardHeader className=\"p-4\">\n         <CardTitle className=\"text-2xl flex items-center gap-2\">\n"
                },
                {
                    "date": 1739180517419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,20 +175,46 @@\n });\n \n ClassCard.displayName = 'ClassCard';\n \n-// Add these interfaces at the top with other interfaces\n+// Add these interfaces to match the database schema\n+interface SchoolClass {\n+  id: string;\n+  name: string;\n+  grade_id: string;\n+  section?: string;\n+  description?: string;\n+}\n+\n+interface GradeWithHierarchy {\n+  id: string;\n+  name: string;\n+  level: number;\n+  topics: TopicWithHierarchy[];\n+  classes: SchoolClass[];\n+}\n+\n+type DbTopic = Tables['topics']['Row'] & {\n+  title: string;\n+  subtopics?: {\n+    id: string;\n+    title: string;\n+    topic_id: string;\n+    order_index?: number;\n+    lessons: LessonWithContent[];\n+  }[];\n+};\n+\n interface TopicCardProps {\n   topic: TopicWithHierarchy;\n   isUnlocked: boolean;\n   onSubtopicClick: (subtopic: SubtopicWithHierarchy, topic: TopicWithHierarchy) => void;\n }\n \n-// Update the TopicWithHierarchy interface\n interface TopicWithHierarchy extends DbTopic {\n   subtopics: SubtopicWithHierarchy[];\n   color?: string;\n-  completed?: boolean; // Add this property\n+  completed?: boolean;\n }\n \n // Add with other type definitions at the top\n type DbSubtopic = Tables['subtopics']['Row'];\n@@ -560,12 +586,12 @@\n   }, [logError]);\n \n   useEffect(() => {\n     if (selectedGrade?.topics) {\n-      const processed = selectedGrade.topics.map((topic, index) => ({\n+      const processed = selectedGrade.topics.map((topic: TopicWithHierarchy, index: number) => ({\n         ...topic,\n         color: getRandomColor(index),\n-        subtopics: topic.subtopics.map((subtopic, subIndex) => ({\n+        subtopics: topic.subtopics.map((subtopic: SubtopicWithHierarchy, subIndex: number) => ({\n           ...subtopic,\n           color: getRandomColor(subIndex + selectedGrade.topics.length)\n         }))\n       }));\n"
                },
                {
                    "date": 1739180540532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -586,9 +586,9 @@\n   }, [logError]);\n \n   useEffect(() => {\n     if (selectedGrade?.topics) {\n-      const processed = selectedGrade.topics.map((topic: TopicWithHierarchy, index: number) => ({\n+      const processed: TopicWithHierarchy[] = selectedGrade.topics.map((topic: TopicWithHierarchy, index: number) => ({\n         ...topic,\n         color: getRandomColor(index),\n         subtopics: topic.subtopics.map((subtopic: SubtopicWithHierarchy, subIndex: number) => ({\n           ...subtopic,\n@@ -600,9 +600,9 @@\n       if (processed.length > 0 && !selectedTopic) {\n         setSelectedTopic(processed[0]);\n       }\n     }\n-  }, [selectedGrade?.topics]);\n+  }, [selectedGrade?.topics, selectedTopic]);\n \n   const handleClassChange = async (classData: ExtendedClass) => {\n     if (isLocked) return;\n     setSelectedClass(classData);\n"
                },
                {
                    "date": 1739180590785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -797,26 +797,36 @@\n \n   return (\n     <div className=\"w-full max-w-6xl mx-auto px-4 sm:px-6 space-y-6\">\n       {/* Grade Selection */}\n-      <div className=\"flex gap-4 overflow-x-auto pb-2\">\n-        {grades\n-          .sort((a, b) => a.level - b.level)\n-          .map(grade => (\n-            <Card\n-              key={grade.id}\n-              className={cn(\n-                \"cursor-pointer transition-all duration-200\",\n-                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/55 bg-color-secondary\"\n-              )}\n-              onClick={() => setSelectedGrade(grade)}\n-            >\n-               <Button\n+      <div className=\"flex items-center justify-between\">\n+        <div className=\"flex gap-3 overflow-x-auto pb-2 scrollbar-hide -mx-4 px-4 sm:mx-0 sm:px-0\">\n+          {grades\n+            .sort((a, b) => a.level - b.level)\n+            .map(grade => (\n+              <Card\n+                key={grade.id}\n+                className={cn(\n+                  \"flex-shrink-0 cursor-pointer transition-all duration-200 min-w-[150px] sm:min-w-0\",\n+                  selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/55\"\n+                )}\n+                onClick={() => setSelectedGrade(grade)}\n+              >\n+                <CardHeader className=\"p-3 sm:p-4\">\n+                  <div className=\"flex items-center gap-2\">\n+                    <GraduationCap className=\"h-5 w-5 text-primary\" />\n+                    <span className=\"font-medium\">{grade.name}</span>\n+                  </div>\n+                </CardHeader>\n+              </Card>\n+            ))}\n+        </div>\n+        <Button\n           variant=\"outline\"\n           size=\"sm\"\n           onClick={toggleLock}\n           className={cn(\n-            \"ml-4 transition-colors\",\n+            \"transition-colors whitespace-nowrap ml-4\",\n             isLocked && \"border-primary text-primary hover:bg-primary/10\"\n           )}\n         >\n           {isLocked ? (\n@@ -830,140 +840,42 @@\n               Unlocked\n             </>\n           )}\n         </Button>\n-              <CardHeader className=\"p-4\">\n-                <div className=\"flex items-center gap-3\">\n-                  <GraduationCap className=\"h-5 w-5 text-primary\" />\n-                  <span className=\"font-medium\">{grade.name}</span>\n-                </div>\n-              </CardHeader>\n-            </Card>\n-          ))}\n       </div>\n \n-      \n-\n       {/* Overview Section */}\n-      <div className=\"mb-6\">\n-        <Card className=\"text-gray-700 bg-white dark:bg-gray-900 rounded-xl mb-4 border border-gray-200 dark:border-gray-800\">\n-          <CardHeader>\n-            <CardTitle className=\"text-2xl\">{selectedGrade?.name}</CardTitle>\n-            <div className=\"grid grid-cols-4 gap-4\">\n-              <div className=\"flex items-center space-x-2\">\n-                <Users size={16} className=\"text-blue-300\" />\n-                <span className=\"text-sm font-medium\">\n-                  {classStudents.length} Students\n-                </span>\n-              </div>\n-              <div className=\"flex items-center space-x-2\">\n-                <BookOpen size={16} className=\"text-green-300\" />\n-                <span className=\"text-sm font-medium\">\n-                  {lessons.length} Lessons\n-                </span>\n-              </div>\n-              <div className=\"flex items-center space-x-2\">\n-                <Calendar size={16} className=\"text-purple-300\" />\n-                <span className=\"text-sm font-medium\">\n-                  0 Assignments\n-                </span>\n-              </div>\n-              <div className=\"text-sm mt-2\">\n-                {Math.round((lessons.filter(l => l.completed).length / lessons.length) * 100)}% Completed\n-              </div>\n+      <Card className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800\">\n+        <CardHeader className=\"p-4\">\n+          <CardTitle className=\"text-xl sm:text-2xl mb-4\">{selectedClass?.name}</CardTitle>\n+          <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-4\">\n+            <div className=\"flex items-center space-x-2\">\n+              <Users size={16} className=\"text-blue-300 flex-shrink-0\" />\n+              <span className=\"text-sm font-medium truncate\">\n+                {classStudents.length} Students\n+              </span>\n             </div>\n-          </CardHeader>\n-        </Card>\n-\n-        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n-          {/* Upcoming Classes\n-          <Card className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800 p-6\">\n-            <div className=\"flex items-center justify-between mb-6\">\n-              <h2 className=\"text-xl font-semibold\">Upcoming Classes</h2>\n-              <Calendar className=\"h-5 w-5 text-gray-500\" />\n+            <div className=\"flex items-center space-x-2\">\n+              <BookOpen size={16} className=\"text-green-300 flex-shrink-0\" />\n+              <span className=\"text-sm font-medium truncate\">\n+                {lessons.length} Lessons\n+              </span>\n             </div>\n-            <div className=\"space-y-4\">\n-              {[\n-                {\n-                  id: 1,\n-                  subject: \"English Literature\",\n-                  time: \"09:00 AM\",\n-                  students: 28,\n-                  topic: \"Shakespeare: Romeo & Juliet\",\n-                  room: \"Room 101\",\n-                },\n-                {\n-                  id: 2,\n-                  subject: \"Creative Writing\",\n-                  time: \"11:30 AM\",\n-                  students: 24,\n-                  topic: \"Character Development\",\n-                  room: \"Room 203\",\n-                },\n-              ].map((cls) => (\n-                <div\n-                  key={cls.id}\n-                  className=\"flex items-center justify-between p-4 bg-white dark:bg-gray-900 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors\"\n-                >\n-                  <div className=\"flex-1\">\n-                    <h3 className=\"font-medium\">{cls.subject}</h3>\n-                    <p className=\"text-sm text-gray-600\">{cls.topic}</p>\n-                    <div className=\"flex items-center gap-4 mt-2 text-sm text-gray-500\">\n-                      <span>{cls.time}</span>\n-                      <span>•</span>\n-                      <span>{cls.room}</span>\n-                      <span>•</span>\n-                      <span>{cls.students} students</span>\n-                    </div>\n-                  </div>\n-                </div>\n-              ))}\n+            <div className=\"flex items-center space-x-2\">\n+              <Calendar size={16} className=\"text-purple-300 flex-shrink-0\" />\n+              <span className=\"text-sm font-medium truncate\">\n+                {selectedGrade?.topics.length || 0} Topics\n+              </span>\n             </div>\n-          </Card> */}\n-\n-          {/* Top Performing Students */}\n-          {/* <Card className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800 p-6\">\n-            <div className=\"flex items-center justify-between mb-6\">\n-              <h2 className=\"text-xl font-semibold\">Top Performing Students</h2>\n-              <Users className=\"h-5 w-5 text-gray-500\" />\n+            <div className=\"flex items-center space-x-2\">\n+              <CheckCircle2 size={16} className=\"text-green-300 flex-shrink-0\" />\n+              <span className=\"text-sm font-medium truncate\">\n+                {Math.round((topicProgress.filter(p => p.isCompleted).length / (topicProgress.length || 1)) * 100)}% Complete\n+              </span>\n             </div>\n-            <div className=\"space-y-4\">\n-              {[\n-                {\n-                  id: 1,\n-                  name: \"Emma Thompson\",\n-                  avatar: \"https://images.unsplash.com/photo-1494790108377-be9c29b29330?w=150\",\n-                  progress: 92,\n-                },\n-                {\n-                  id: 2,\n-                  name: \"Michael Chen\",\n-                  avatar: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150\",\n-                  progress: 88,\n-                },\n-              ].map((student) => (\n-                <div key={student.id} className=\"flex items-center gap-4\">\n-                  <img\n-                    src={student.avatar}\n-                    alt={student.name}\n-                    className=\"w-10 h-10 rounded-full object-cover\"\n-                  />\n-                  <div className=\"flex-1\">\n-                    <h3 className=\"font-medium\">{student.name}</h3>\n-                    <div \n-                      className={`progress-bar`}\n-                      data-progress={`${student.progress}`}\n-                    />\n-                  </div>\n-                  <span className=\"text-lg font-semibold\">\n-                    {student.progress}%\n-                  </span>\n-                </div>\n-              ))}\n-            </div>\n-          </Card> */}\n-        </div>\n-      </div>\n+          </div>\n+        </CardHeader>\n+      </Card>\n \n       {/* Topics Section */}\n       <div className=\"space-y-6\">\n         {processedTopics.map((topic, topicIndex) => {\n"
                },
                {
                    "date": 1739181322937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,10 @@\n import type { Database } from \"@/types/supabase\";\n import { useComponentLogger } from \"@/hooks/useComponentLogger\";\n import type { PostgrestResponse, PostgrestError, SupabaseClient } from '@supabase/supabase-js';\n import { transformLearningPathData } from \"@/lib/transforms/learningPath\";\n+import { motion, AnimatePresence } from \"framer-motion\";\n+import { format } from \"date-fns\";\n \n const MAX_RETRIES = 3;\n const RETRY_DELAY = 1000; // 1 second\n \n@@ -406,8 +408,9 @@\n   const [selectedTopic, setSelectedTopic] = useState<TopicWithHierarchy | null>(null);\n   const [selectedSubtopic, setSelectedSubtopic] = useState<SubtopicWithHierarchy | null>(null);\n   const [processedTopics, setProcessedTopics] = useState<TopicWithHierarchy[]>([]);\n   const [topicProgress, setTopicProgress] = useState<TopicProgress[]>([]);\n+  const [selectedLessonInDialog, setSelectedLessonInDialog] = useState<LessonWithContent | null>(null);\n \n   // Load lock state from localStorage\n   useEffect(() => {\n     try {\n@@ -796,8 +799,24 @@\n   };\n \n   return (\n     <div className=\"w-full max-w-6xl mx-auto px-4 sm:px-6 space-y-6\">\n+      {/* Add current date and time */}\n+      <div className=\"flex justify-between items-center\">\n+        <div>\n+          <h1 className=\"text-2xl font-bold text-gray-900\">Learning Path</h1>\n+          <p className=\"text-gray-600\">\n+            {selectedGrade?.name} • {format(new Date(), \"EEEE, h:mm a, dd/MM/yyyy\")}\n+          </p>\n+        </div>\n+        {/* Schedule indicator - temporarily commented */}\n+        {/* {activeClass && (\n+          <Badge variant=\"outline\" className=\"bg-green-500/10 text-green-500 border-green-500/20\">\n+            Active Class: {activeClass.name}\n+          </Badge>\n+        )} */}\n+      </div>\n+\n       {/* Grade Selection */}\n       <div className=\"flex items-center justify-between\">\n         <div className=\"flex gap-3 overflow-x-auto pb-2 scrollbar-hide -mx-4 px-4 sm:mx-0 sm:px-0\">\n           {grades\n@@ -876,156 +895,214 @@\n         </CardHeader>\n       </Card>\n \n       {/* Topics Section */}\n-      <div className=\"space-y-6\">\n+      <motion.div \n+        className=\"space-y-6\"\n+        initial={{ opacity: 0, y: 20 }}\n+        animate={{ opacity: 1, y: 0 }}\n+        transition={{ duration: 0.5 }}\n+      >\n         {processedTopics.map((topic, topicIndex) => {\n           const isUnlocked = isTopicUnlocked(topicIndex, topic);\n           \n           return (\n-            <Card \n+            <motion.div\n               key={topic.id}\n-              className={cn(\n-                \"transition-all duration-300\",\n-                \"hover:shadow-lg\",\n-                !isUnlocked && \"opacity-60\"\n-              )}\n+              initial={{ opacity: 0, x: -20 }}\n+              animate={{ opacity: 1, x: 0 }}\n+              transition={{ delay: topicIndex * 0.1 }}\n             >\n-              <CardHeader className={cn(\n-                \"p-6\",\n-                topic.color || \"bg-primary\",\n-                \"text-white rounded-t-xl\"\n-              )}>\n-                <div className=\"flex items-center justify-between\">\n-                  <div className=\"flex items-center gap-3\">\n-                    {!isUnlocked ? (\n-                      <Lock className=\"h-6 w-6\" />\n-                    ) : (\n-                      <BookOpen className=\"h-6 w-6\" />\n-                    )}\n-                    <CardTitle className=\"text-2xl font-bold\">\n-                      {topic.title}\n-                    </CardTitle>\n+              <Card \n+                className={cn(\n+                  \"transition-all duration-300\",\n+                  \"hover:shadow-lg\",\n+                  !isUnlocked && \"opacity-60\"\n+                )}\n+              >\n+                <CardHeader className={cn(\n+                  \"p-6\",\n+                  topic.color || \"bg-primary\",\n+                  \"text-white rounded-t-xl\"\n+                )}>\n+                  <div className=\"flex items-center justify-between\">\n+                    <div className=\"flex items-center gap-3\">\n+                      {!isUnlocked ? (\n+                        <Lock className=\"h-6 w-6\" />\n+                      ) : (\n+                        <BookOpen className=\"h-6 w-6\" />\n+                      )}\n+                      <CardTitle className=\"text-2xl font-bold\">\n+                        {topic.title}\n+                      </CardTitle>\n+                    </div>\n+                    <Badge \n+                      variant=\"outline\" \n+                      className=\"bg-white/10 text-white border-white/20\"\n+                    >\n+                      {topic.subtopics?.length || 0} Subtopics\n+                    </Badge>\n                   </div>\n-                  <Badge \n-                    variant=\"outline\" \n-                    className=\"bg-white/10 text-white border-white/20\"\n-                  >\n-                    {topic.subtopics?.length || 0} Subtopics\n-                  </Badge>\n+                </CardHeader>\n+\n+                <CardContent className=\"p-6\">\n+                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n+                    {topic.subtopics?.map((subtopic) => (\n+                      <Card\n+                        key={subtopic.id}\n+                        className={cn(\n+                          \"cursor-pointer transition-all duration-200\",\n+                          \"hover:shadow-md hover:border-primary/50\",\n+                          !isUnlocked && \"pointer-events-none\"\n+                        )}\n+                        onClick={() => handleSubtopicClick(subtopic, topic)}\n+                      >\n+                        <CardContent className=\"p-4\">\n+                          <div className=\"flex flex-col gap-3\">\n+                            <div className=\"flex items-start justify-between\">\n+                              <div>\n+                                <h3 className=\"font-semibold text-lg\">\n+                                  {subtopic.title}\n+                                </h3>\n+                                <p className=\"text-sm text-muted-foreground\">\n+                                  Ready to start\n+                                </p>\n+                              </div>\n+                              {!isUnlocked && (\n+                                <Lock className=\"h-5 w-5 text-muted-foreground\" />\n+                              )}\n+                            </div>\n+                            \n+                            <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n+                              <div className=\"flex items-center gap-1\">\n+                                <Clock className=\"h-4 w-4\" />\n+                                <span>{subtopic.duration || 15} minutes</span>\n+                              </div>\n+                              <div className=\"flex items-center gap-1\">\n+                                <BookOpen className=\"h-4 w-4\" />\n+                                <span>{subtopic.lessons?.length || 0} Lessons</span>\n+                              </div>\n+                            </div>\n+                          </div>\n+                        </CardContent>\n+                      </Card>\n+                    ))}\n+                  </div>\n+                </CardContent>\n+              </Card>\n+            </motion.div>\n+          );\n+        })}\n+      </motion.div>\n+\n+      {/* Enhanced Lesson Dialog */}\n+      <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n+        <DialogContent className=\"sm:max-w-[700px] p-0 overflow-hidden\">\n+          <motion.div\n+            initial={{ opacity: 0, y: 20 }}\n+            animate={{ opacity: 1, y: 0 }}\n+            transition={{ duration: 0.3 }}\n+          >\n+            <DialogHeader className=\"p-6 pb-0\">\n+              <DialogTitle className=\"text-2xl flex items-center gap-3\">\n+                <BookOpen className=\"h-6 w-6 text-primary\" />\n+                {selectedSubtopic?.title}\n+              </DialogTitle>\n+              <DialogDescription>\n+                <div className=\"text-base font-medium\">{selectedTopic?.title}</div>\n+                <div className=\"flex items-center gap-4 mt-2 text-sm\">\n+                  <div className=\"flex items-center gap-1\">\n+                    <Clock className=\"h-4 w-4\" />\n+                    <span>{selectedSubtopic?.duration || 15} minutes</span>\n+                  </div>\n+                  <div className=\"flex items-center gap-1\">\n+                    <BookOpen className=\"h-4 w-4\" />\n+                    <span>{selectedSubtopic?.lessons?.length || 0} Lessons</span>\n+                  </div>\n                 </div>\n-              </CardHeader>\n+              </DialogDescription>\n+            </DialogHeader>\n \n-              <CardContent className=\"p-6\">\n-                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n-                  {topic.subtopics?.map((subtopic) => (\n-                    <Card\n-                      key={subtopic.id}\n+            <div className=\"p-6 space-y-4\">\n+              <div className=\"grid grid-cols-1 gap-4\">\n+                {selectedSubtopic?.lessons?.map((lesson, index) => (\n+                  <motion.div\n+                    key={lesson.id}\n+                    initial={{ opacity: 0, x: -20 }}\n+                    animate={{ opacity: 1, x: 0 }}\n+                    transition={{ delay: index * 0.1 }}\n+                  >\n+                    <Card \n                       className={cn(\n                         \"cursor-pointer transition-all duration-200\",\n                         \"hover:shadow-md hover:border-primary/50\",\n-                        !isUnlocked && \"pointer-events-none\"\n+                        selectedLessonInDialog?.id === lesson.id && \"border-primary bg-accent/10\"\n                       )}\n-                      onClick={() => handleSubtopicClick(subtopic, topic)}\n+                      onClick={() => setSelectedLessonInDialog(lesson)}\n                     >\n                       <CardContent className=\"p-4\">\n-                        <div className=\"flex flex-col gap-3\">\n-                          <div className=\"flex items-start justify-between\">\n-                            <div>\n-                              <h3 className=\"font-semibold text-lg\">\n-                                {subtopic.title}\n-                              </h3>\n-                              <p className=\"text-sm text-muted-foreground\">\n-                                Ready to start\n-                              </p>\n+                        <div className=\"flex items-start justify-between\">\n+                          <div className=\"flex-1\">\n+                            <div className=\"flex items-center gap-2\">\n+                              <Badge variant=\"outline\" className=\"bg-primary/5\">\n+                                Lesson {index + 1}\n+                              </Badge>\n+                              {selectedLessonInDialog?.id === lesson.id && (\n+                                <Badge variant=\"outline\" className=\"bg-green-500/10 text-green-500\">\n+                                  Selected\n+                                </Badge>\n+                              )}\n                             </div>\n-                            {!isUnlocked && (\n-                              <Lock className=\"h-5 w-5 text-muted-foreground\" />\n-                            )}\n-                          </div>\n-                          \n-                          <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n-                            <div className=\"flex items-center gap-1\">\n-                              <Clock className=\"h-4 w-4\" />\n-                              <span>{subtopic.duration || 15} minutes</span>\n+                            <h3 className=\"font-medium text-lg mt-2\">{lesson.title}</h3>\n+                            <p className=\"text-sm text-muted-foreground mt-1 line-clamp-2\">\n+                              {lesson.description || \"Start this lesson to begin learning\"}\n+                            </p>\n+                            <div className=\"flex items-center gap-4 mt-3 text-sm text-muted-foreground\">\n+                              <div className=\"flex items-center gap-1\">\n+                                <Clock className=\"h-4 w-4\" />\n+                                <span>{lesson.duration || 15}m</span>\n+                              </div>\n+                              <div className=\"flex items-center gap-1\">\n+                                <BookOpen className=\"h-4 w-4\" />\n+                                <span>{lesson.questions?.length || 0} Questions</span>\n+                              </div>\n                             </div>\n-                            <div className=\"flex items-center gap-1\">\n-                              <BookOpen className=\"h-4 w-4\" />\n-                              <span>{subtopic.lessons?.length || 0} Lessons</span>\n-                            </div>\n                           </div>\n                         </div>\n                       </CardContent>\n                     </Card>\n-                  ))}\n-                </div>\n-              </CardContent>\n-            </Card>\n-          );\n-        })}\n-      </div>\n-\n-      {/* Lesson Dialog */}\n-      <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n-        <DialogContent className=\"sm:max-w-[600px]\">\n-          <DialogHeader>\n-            <DialogTitle className=\"text-2xl\">\n-              {selectedSubtopic?.title}\n-            </DialogTitle>\n-            <DialogDescription>\n-              <div className=\"text-base\">Part of {selectedTopic?.title}</div>\n-              <div className=\"flex items-center gap-4 mt-2 text-sm\">\n-                <div className=\"flex items-center gap-1\">\n-                  <Clock className=\"h-4 w-4\" />\n-                  <span>{selectedSubtopic?.duration || 15} minutes</span>\n-                </div>\n-                <div className=\"flex items-center gap-1\">\n-                  <BookOpen className=\"h-4 w-4\" />\n-                  <span>{selectedSubtopic?.lessons?.length || 0} Lessons</span>\n-                </div>\n+                  </motion.div>\n+                ))}\n               </div>\n-            </DialogDescription>\n-          </DialogHeader>\n+            </div>\n \n-          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 py-4\">\n-            {selectedSubtopic?.lessons?.map((lesson, index) => (\n-              <Card key={lesson.id} className=\"bg-accent/5\">\n-                <CardContent className=\"p-4\">\n-                  <div className=\"flex flex-col gap-2\">\n-                    <h4 className=\"font-medium\">Lesson {index + 1}</h4>\n-                    <p className=\"text-sm text-muted-foreground line-clamp-2\">\n-                      {lesson.title}\n-                    </p>\n-                    <div className=\"flex items-center gap-3 text-sm text-muted-foreground\">\n-                      <div className=\"flex items-center gap-1\">\n-                        <Clock className=\"h-3 w-3\" />\n-                        <span>{lesson.duration || 15}m</span>\n-                      </div>\n-                      <div className=\"flex items-center gap-1\">\n-                        <BookOpen className=\"h-3 w-3\" />\n-                        <span>{lesson.questions?.length || 0} Questions</span>\n-                      </div>\n-                    </div>\n-                  </div>\n-                </CardContent>\n-              </Card>\n-            ))}\n-          </div>\n-\n-          <DialogFooter>\n-            <Button\n-              onClick={() => {\n-                setDialogOpen(false);\n-                if (selectedSubtopic?.id) {\n-                  navigate(`/lessons/${selectedSubtopic.id}`);\n-                }\n-              }}\n-              className=\"w-full sm:w-auto\"\n-            >\n-              Start Lesson\n-              <ArrowRight className=\"ml-2 h-4 w-4\" />\n-            </Button>\n-          </DialogFooter>\n+            <DialogFooter className=\"p-6 bg-accent/5 border-t\">\n+              <Button\n+                onClick={() => {\n+                  setDialogOpen(false);\n+                  if (selectedLessonInDialog?.id) {\n+                    navigate(`/lesson/${selectedLessonInDialog.id}`);\n+                  } else if (selectedSubtopic?.lessons?.[0]?.id) {\n+                    navigate(`/lesson/${selectedSubtopic.lessons[0].id}`);\n+                  }\n+                }}\n+                className={cn(\n+                  \"w-full sm:w-auto transition-all duration-300\",\n+                  selectedLessonInDialog ? \"bg-primary hover:bg-primary/90\" : \"\"\n+                )}\n+                disabled={!selectedLessonInDialog && !selectedSubtopic?.lessons?.[0]}\n+              >\n+                <motion.div\n+                  className=\"flex items-center justify-center\"\n+                  whileHover={{ scale: 1.05 }}\n+                  whileTap={{ scale: 0.95 }}\n+                >\n+                  Start {selectedLessonInDialog ? \"Selected \" : \"\"}Lesson\n+                  <ArrowRight className=\"ml-2 h-4 w-4\" />\n+                </motion.div>\n+              </Button>\n+            </DialogFooter>\n+          </motion.div>\n         </DialogContent>\n       </Dialog>\n     </div>\n   );\n"
                },
                {
                    "date": 1739181342846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -678,12 +678,12 @@\n     setCurrentLesson(lesson);\n     setDialogOpen(true);\n   };\n \n-  const handleStartLesson = (lessonId: string, subLessonId: string) => {\n+  const handleStartLesson = (lessonId: string) => {\n     if (isLocked) return;\n     setDialogOpen(false);\n-    navigate(`/lesson/${lessonId}/${subLessonId}`);\n+    navigate(`/teacher/lessons/${lessonId}`, { replace: true });\n   };\n \n   const handleRestartLesson = (lessonId: string, subLessonId: string) => {\n     if (isLocked) return;\n@@ -1077,13 +1077,12 @@\n \n             <DialogFooter className=\"p-6 bg-accent/5 border-t\">\n               <Button\n                 onClick={() => {\n-                  setDialogOpen(false);\n                   if (selectedLessonInDialog?.id) {\n-                    navigate(`/lesson/${selectedLessonInDialog.id}`);\n+                    handleStartLesson(selectedLessonInDialog.id);\n                   } else if (selectedSubtopic?.lessons?.[0]?.id) {\n-                    navigate(`/lesson/${selectedSubtopic.lessons[0].id}`);\n+                    handleStartLesson(selectedSubtopic.lessons[0].id);\n                   }\n                 }}\n                 className={cn(\n                   \"w-full sm:w-auto transition-all duration-300\",\n"
                },
                {
                    "date": 1739181484104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,9 @@\n import type { PostgrestResponse, PostgrestError, SupabaseClient } from '@supabase/supabase-js';\n import { transformLearningPathData } from \"@/lib/transforms/learningPath\";\n import { motion, AnimatePresence } from \"framer-motion\";\n import { format } from \"date-fns\";\n+import { useInView } from 'react-intersection-observer';\n \n const MAX_RETRIES = 3;\n const RETRY_DELAY = 1000; // 1 second\n \n@@ -384,8 +385,13 @@\n   isCompleted: boolean;\n   isUnlocked: boolean;\n }\n \n+interface ActiveClassInfo {\n+  class: SchoolClass | null;\n+  schedule: string | null;\n+}\n+\n export function LearningPathTeacher() {\n   const navigate = useRouterNavigate();\n   const { logError } = useComponentLogger('LearningPathTeacher');\n   const lessonRefs = useRef<(HTMLDivElement | null)[]>([]);\n@@ -409,9 +415,15 @@\n   const [selectedSubtopic, setSelectedSubtopic] = useState<SubtopicWithHierarchy | null>(null);\n   const [processedTopics, setProcessedTopics] = useState<TopicWithHierarchy[]>([]);\n   const [topicProgress, setTopicProgress] = useState<TopicProgress[]>([]);\n   const [selectedLessonInDialog, setSelectedLessonInDialog] = useState<LessonWithContent | null>(null);\n+  const [activeClassInfo, setActiveClassInfo] = useState<ActiveClassInfo>({ class: null, schedule: null });\n \n+  const { ref: scrollRef, inView } = useInView({\n+    threshold: 0.1,\n+    triggerOnce: true\n+  });\n+\n   // Load lock state from localStorage\n   useEffect(() => {\n     try {\n       const savedLockState = localStorage.getItem('myCoursesTabLocked');\n@@ -799,22 +811,22 @@\n   };\n \n   return (\n     <div className=\"w-full max-w-6xl mx-auto px-4 sm:px-6 space-y-6\">\n-      {/* Add current date and time */}\n+      {/* Header with Date and Time */}\n       <div className=\"flex justify-between items-center\">\n         <div>\n           <h1 className=\"text-2xl font-bold text-gray-900\">Learning Path</h1>\n           <p className=\"text-gray-600\">\n             {selectedGrade?.name} • {format(new Date(), \"EEEE, h:mm a, dd/MM/yyyy\")}\n           </p>\n         </div>\n-        {/* Schedule indicator - temporarily commented */}\n-        {/* {activeClass && (\n+        {activeClassInfo.class && (\n           <Badge variant=\"outline\" className=\"bg-green-500/10 text-green-500 border-green-500/20\">\n-            Active Class: {activeClass.name}\n+            Active Class: {activeClassInfo.class.name}\n+            {activeClassInfo.schedule && <span className=\"ml-2 text-xs\">({activeClassInfo.schedule})</span>}\n           </Badge>\n-        )} */}\n+        )}\n       </div>\n \n       {/* Grade Selection */}\n       <div className=\"flex items-center justify-between\">\n@@ -894,106 +906,107 @@\n           </div>\n         </CardHeader>\n       </Card>\n \n-      {/* Topics Section */}\n-      <motion.div \n+      {/* Topics Section with Scroll Effects */}\n+      <div \n+        ref={scrollRef}\n         className=\"space-y-6\"\n-        initial={{ opacity: 0, y: 20 }}\n-        animate={{ opacity: 1, y: 0 }}\n-        transition={{ duration: 0.5 }}\n       >\n-        {processedTopics.map((topic, topicIndex) => {\n-          const isUnlocked = isTopicUnlocked(topicIndex, topic);\n-          \n-          return (\n-            <motion.div\n-              key={topic.id}\n-              initial={{ opacity: 0, x: -20 }}\n-              animate={{ opacity: 1, x: 0 }}\n-              transition={{ delay: topicIndex * 0.1 }}\n-            >\n-              <Card \n-                className={cn(\n-                  \"transition-all duration-300\",\n-                  \"hover:shadow-lg\",\n-                  !isUnlocked && \"opacity-60\"\n-                )}\n+        <AnimatePresence>\n+          {processedTopics.map((topic, topicIndex) => {\n+            const isUnlocked = isTopicUnlocked(topicIndex, topic);\n+            \n+            return (\n+              <motion.div\n+                key={topic.id}\n+                initial={{ opacity: 0, y: 50 }}\n+                animate={inView ? { opacity: 1, y: 0 } : { opacity: 0, y: 50 }}\n+                transition={{ duration: 0.5, delay: topicIndex * 0.1 }}\n+                className=\"w-full\"\n               >\n-                <CardHeader className={cn(\n-                  \"p-6\",\n-                  topic.color || \"bg-primary\",\n-                  \"text-white rounded-t-xl\"\n-                )}>\n-                  <div className=\"flex items-center justify-between\">\n-                    <div className=\"flex items-center gap-3\">\n-                      {!isUnlocked ? (\n-                        <Lock className=\"h-6 w-6\" />\n-                      ) : (\n-                        <BookOpen className=\"h-6 w-6\" />\n-                      )}\n-                      <CardTitle className=\"text-2xl font-bold\">\n-                        {topic.title}\n-                      </CardTitle>\n+                <Card \n+                  className={cn(\n+                    \"transition-all duration-300\",\n+                    \"hover:shadow-lg\",\n+                    !isUnlocked && \"opacity-60\"\n+                  )}\n+                >\n+                  <CardHeader className={cn(\n+                    \"p-6\",\n+                    topic.color || \"bg-primary\",\n+                    \"text-white rounded-t-xl\"\n+                  )}>\n+                    <div className=\"flex items-center justify-between\">\n+                      <div className=\"flex items-center gap-3\">\n+                        {!isUnlocked ? (\n+                          <Lock className=\"h-6 w-6\" />\n+                        ) : (\n+                          <BookOpen className=\"h-6 w-6\" />\n+                        )}\n+                        <CardTitle className=\"text-2xl font-bold\">\n+                          {topic.title}\n+                        </CardTitle>\n+                      </div>\n+                      <Badge \n+                        variant=\"outline\" \n+                        className=\"bg-white/10 text-white border-white/20\"\n+                      >\n+                        {topic.subtopics?.length || 0} Subtopics\n+                      </Badge>\n                     </div>\n-                    <Badge \n-                      variant=\"outline\" \n-                      className=\"bg-white/10 text-white border-white/20\"\n-                    >\n-                      {topic.subtopics?.length || 0} Subtopics\n-                    </Badge>\n-                  </div>\n-                </CardHeader>\n+                  </CardHeader>\n \n-                <CardContent className=\"p-6\">\n-                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n-                    {topic.subtopics?.map((subtopic) => (\n-                      <Card\n-                        key={subtopic.id}\n-                        className={cn(\n-                          \"cursor-pointer transition-all duration-200\",\n-                          \"hover:shadow-md hover:border-primary/50\",\n-                          !isUnlocked && \"pointer-events-none\"\n-                        )}\n-                        onClick={() => handleSubtopicClick(subtopic, topic)}\n-                      >\n-                        <CardContent className=\"p-4\">\n-                          <div className=\"flex flex-col gap-3\">\n-                            <div className=\"flex items-start justify-between\">\n-                              <div>\n-                                <h3 className=\"font-semibold text-lg\">\n-                                  {subtopic.title}\n-                                </h3>\n-                                <p className=\"text-sm text-muted-foreground\">\n-                                  Ready to start\n-                                </p>\n+                  <CardContent className=\"p-6\">\n+                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n+                      {topic.subtopics?.map((subtopic) => (\n+                        <Card\n+                          key={subtopic.id}\n+                          className={cn(\n+                            \"cursor-pointer transition-all duration-200\",\n+                            \"hover:shadow-md hover:border-primary/50\",\n+                            !isUnlocked && \"pointer-events-none\"\n+                          )}\n+                          onClick={() => handleSubtopicClick(subtopic, topic)}\n+                        >\n+                          <CardContent className=\"p-4\">\n+                            <div className=\"flex flex-col gap-3\">\n+                              <div className=\"flex items-start justify-between\">\n+                                <div>\n+                                  <h3 className=\"font-semibold text-lg\">\n+                                    {subtopic.title}\n+                                  </h3>\n+                                  <p className=\"text-sm text-muted-foreground\">\n+                                    Ready to start\n+                                  </p>\n+                                </div>\n+                                {!isUnlocked && (\n+                                  <Lock className=\"h-5 w-5 text-muted-foreground\" />\n+                                )}\n                               </div>\n-                              {!isUnlocked && (\n-                                <Lock className=\"h-5 w-5 text-muted-foreground\" />\n-                              )}\n-                            </div>\n-                            \n-                            <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n-                              <div className=\"flex items-center gap-1\">\n-                                <Clock className=\"h-4 w-4\" />\n-                                <span>{subtopic.duration || 15} minutes</span>\n+                              \n+                              <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n+                                <div className=\"flex items-center gap-1\">\n+                                  <Clock className=\"h-4 w-4\" />\n+                                  <span>{subtopic.duration || 15} minutes</span>\n+                                </div>\n+                                <div className=\"flex items-center gap-1\">\n+                                  <BookOpen className=\"h-4 w-4\" />\n+                                  <span>{subtopic.lessons?.length || 0} Lessons</span>\n+                                </div>\n                               </div>\n-                              <div className=\"flex items-center gap-1\">\n-                                <BookOpen className=\"h-4 w-4\" />\n-                                <span>{subtopic.lessons?.length || 0} Lessons</span>\n-                              </div>\n                             </div>\n-                          </div>\n-                        </CardContent>\n-                      </Card>\n-                    ))}\n-                  </div>\n-                </CardContent>\n-              </Card>\n-            </motion.div>\n-          );\n-        })}\n-      </motion.div>\n+                          </CardContent>\n+                        </Card>\n+                      ))}\n+                    </div>\n+                  </CardContent>\n+                </Card>\n+              </motion.div>\n+            );\n+          })}\n+        </AnimatePresence>\n+      </div>\n \n       {/* Enhanced Lesson Dialog */}\n       <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n         <DialogContent className=\"sm:max-w-[700px] p-0 overflow-hidden\">\n"
                },
                {
                    "date": 1739181502977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -693,8 +693,10 @@\n \n   const handleStartLesson = (lessonId: string) => {\n     if (isLocked) return;\n     setDialogOpen(false);\n+    \n+    // Use window.location.href to ensure full navigation\n     navigate(`/teacher/lessons/${lessonId}`, { replace: true });\n   };\n \n   const handleRestartLesson = (lessonId: string, subLessonId: string) => {\n"
                },
                {
                    "date": 1739181808565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1010,21 +1010,22 @@\n       </div>\n \n       {/* Enhanced Lesson Dialog */}\n       <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n-        <DialogContent className=\"sm:max-w-[700px] p-0 overflow-hidden\">\n+        <DialogContent className=\"sm:max-w-[700px] max-h-[85vh] p-0\">\n           <motion.div\n             initial={{ opacity: 0, y: 20 }}\n             animate={{ opacity: 1, y: 0 }}\n             transition={{ duration: 0.3 }}\n+            className=\"flex flex-col h-full\"\n           >\n-            <DialogHeader className=\"p-6 pb-0\">\n+            <DialogHeader className=\"p-6 pb-4 flex-shrink-0 border-b\">\n               <DialogTitle className=\"text-2xl flex items-center gap-3\">\n                 <BookOpen className=\"h-6 w-6 text-primary\" />\n                 {selectedSubtopic?.title}\n               </DialogTitle>\n               <DialogDescription>\n-                <div className=\"text-base font-medium\">{selectedTopic?.title}</div>\n+                <div className=\"text-base font-medium text-foreground/90\">{selectedTopic?.title}</div>\n                 <div className=\"flex items-center gap-4 mt-2 text-sm\">\n                   <div className=\"flex items-center gap-1\">\n                     <Clock className=\"h-4 w-4\" />\n                     <span>{selectedSubtopic?.duration || 15} minutes</span>\n@@ -1036,10 +1037,10 @@\n                 </div>\n               </DialogDescription>\n             </DialogHeader>\n \n-            <div className=\"p-6 space-y-4\">\n-              <div className=\"grid grid-cols-1 gap-4\">\n+            <div className=\"flex-1 overflow-y-auto\">\n+              <div className=\"p-6 space-y-4\">\n                 {selectedSubtopic?.lessons?.map((lesson, index) => (\n                   <motion.div\n                     key={lesson.id}\n                     initial={{ opacity: 0, x: -20 }}\n@@ -1047,51 +1048,60 @@\n                     transition={{ delay: index * 0.1 }}\n                   >\n                     <Card \n                       className={cn(\n-                        \"cursor-pointer transition-all duration-200\",\n+                        \"cursor-pointer transition-all duration-200 w-full\",\n                         \"hover:shadow-md hover:border-primary/50\",\n-                        selectedLessonInDialog?.id === lesson.id && \"border-primary bg-accent/10\"\n+                        selectedLessonInDialog?.id === lesson.id && \"border-primary shadow-lg bg-accent/10\"\n                       )}\n                       onClick={() => setSelectedLessonInDialog(lesson)}\n                     >\n-                      <CardContent className=\"p-4\">\n-                        <div className=\"flex items-start justify-between\">\n-                          <div className=\"flex-1\">\n-                            <div className=\"flex items-center gap-2\">\n-                              <Badge variant=\"outline\" className=\"bg-primary/5\">\n-                                Lesson {index + 1}\n-                              </Badge>\n-                              {selectedLessonInDialog?.id === lesson.id && (\n-                                <Badge variant=\"outline\" className=\"bg-green-500/10 text-green-500\">\n-                                  Selected\n+                      <CardContent className=\"p-6\">\n+                        <div className=\"flex flex-col gap-4\">\n+                          <div className=\"flex items-start justify-between\">\n+                            <div className=\"flex-1\">\n+                              <div className=\"flex items-center gap-2 mb-3\">\n+                                <Badge variant=\"outline\" className=\"bg-primary/5 px-3 py-1\">\n+                                  Lesson {index + 1}\n                                 </Badge>\n-                              )}\n-                            </div>\n-                            <h3 className=\"font-medium text-lg mt-2\">{lesson.title}</h3>\n-                            <p className=\"text-sm text-muted-foreground mt-1 line-clamp-2\">\n-                              {lesson.description || \"Start this lesson to begin learning\"}\n-                            </p>\n-                            <div className=\"flex items-center gap-4 mt-3 text-sm text-muted-foreground\">\n-                              <div className=\"flex items-center gap-1\">\n-                                <Clock className=\"h-4 w-4\" />\n-                                <span>{lesson.duration || 15}m</span>\n+                                {selectedLessonInDialog?.id === lesson.id && (\n+                                  <Badge variant=\"outline\" className=\"bg-green-500/10 text-green-500 px-3 py-1\">\n+                                    Selected\n+                                  </Badge>\n+                                )}\n                               </div>\n-                              <div className=\"flex items-center gap-1\">\n-                                <BookOpen className=\"h-4 w-4\" />\n-                                <span>{lesson.questions?.length || 0} Questions</span>\n-                              </div>\n+                              <h3 className=\"text-xl font-semibold mb-2\">{lesson.title}</h3>\n+                              <p className=\"text-sm text-muted-foreground line-clamp-2\">\n+                                {lesson.description || \"Start this lesson to begin learning\"}\n+                              </p>\n                             </div>\n                           </div>\n+                          \n+                          <div className=\"flex items-center gap-6 text-sm text-muted-foreground border-t pt-4\">\n+                            <div className=\"flex items-center gap-2\">\n+                              <Clock className=\"h-4 w-4 text-primary/70\" />\n+                              <span>{lesson.duration || 15} minutes</span>\n+                            </div>\n+                            <div className=\"flex items-center gap-2\">\n+                              <BookOpen className=\"h-4 w-4 text-primary/70\" />\n+                              <span>{lesson.questions?.length || 0} Questions</span>\n+                            </div>\n+                            {lesson.activities?.length > 0 && (\n+                              <div className=\"flex items-center gap-2\">\n+                                <CheckCircle2 className=\"h-4 w-4 text-primary/70\" />\n+                                <span>{lesson.activities.length} Activities</span>\n+                              </div>\n+                            )}\n+                          </div>\n                         </div>\n                       </CardContent>\n                     </Card>\n                   </motion.div>\n                 ))}\n               </div>\n             </div>\n \n-            <DialogFooter className=\"p-6 bg-accent/5 border-t\">\n+            <DialogFooter className=\"p-6 border-t bg-accent/5 flex-shrink-0\">\n               <Button\n                 onClick={() => {\n                   if (selectedLessonInDialog?.id) {\n                     handleStartLesson(selectedLessonInDialog.id);\n@@ -1105,14 +1115,23 @@\n                 )}\n                 disabled={!selectedLessonInDialog && !selectedSubtopic?.lessons?.[0]}\n               >\n                 <motion.div\n-                  className=\"flex items-center justify-center\"\n+                  className=\"flex items-center justify-center gap-2\"\n                   whileHover={{ scale: 1.05 }}\n                   whileTap={{ scale: 0.95 }}\n                 >\n-                  Start {selectedLessonInDialog ? \"Selected \" : \"\"}Lesson\n-                  <ArrowRight className=\"ml-2 h-4 w-4\" />\n+                  {selectedLessonInDialog ? (\n+                    <>\n+                      Start Selected Lesson\n+                      <ArrowRight className=\"h-4 w-4\" />\n+                    </>\n+                  ) : (\n+                    <>\n+                      Select a Lesson\n+                      <BookOpen className=\"h-4 w-4\" />\n+                    </>\n+                  )}\n                 </motion.div>\n               </Button>\n             </DialogFooter>\n           </motion.div>\n"
                },
                {
                    "date": 1739185002103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -694,10 +694,10 @@\n   const handleStartLesson = (lessonId: string) => {\n     if (isLocked) return;\n     setDialogOpen(false);\n     \n-    // Use window.location.href to ensure full navigation\n-    navigate(`/teacher/lessons/${lessonId}`, { replace: true });\n+    // Open in a new window\n+    window.open(`/teacher/lessons/${lessonId}`, '_blank', 'noopener,noreferrer');\n   };\n \n   const handleRestartLesson = (lessonId: string, subLessonId: string) => {\n     if (isLocked) return;\n"
                },
                {
                    "date": 1739186312309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -878,9 +878,9 @@\n \n       {/* Overview Section */}\n       <Card className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800\">\n         <CardHeader className=\"p-4\">\n-          <CardTitle className=\"text-xl sm:text-2xl mb-4\">{selectedClass?.name}</CardTitle>\n+          <CardTitle className=\"text-xl sm:text-2xl mb-4\">{selectedGrade?.classes[0]?.name}</CardTitle>\n           <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-4\">\n             <div className=\"flex items-center space-x-2\">\n               <Users size={16} className=\"text-blue-300 flex-shrink-0\" />\n               <span className=\"text-sm font-medium truncate\">\n"
                },
                {
                    "date": 1739186773721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -694,10 +694,11 @@\n   const handleStartLesson = (lessonId: string) => {\n     if (isLocked) return;\n     setDialogOpen(false);\n     \n-    // Open in a new window\n-    window.open(`/teacher/lessons/${lessonId}`, '_blank', 'noopener,noreferrer');\n+    // Navigate to the lesson page in a new window\n+    const lessonUrl = `/teacher/lessons/${lessonId}`;\n+    window.open(lessonUrl, '_blank', 'noopener,noreferrer');\n   };\n \n   const handleRestartLesson = (lessonId: string, subLessonId: string) => {\n     if (isLocked) return;\n"
                },
                {
                    "date": 1739186792724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -690,15 +690,40 @@\n     setCurrentLesson(lesson);\n     setDialogOpen(true);\n   };\n \n-  const handleStartLesson = (lessonId: string) => {\n-    if (isLocked) return;\n-    setDialogOpen(false);\n-    \n-    // Navigate to the lesson page in a new window\n-    const lessonUrl = `/teacher/lessons/${lessonId}`;\n-    window.open(lessonUrl, '_blank', 'noopener,noreferrer');\n+  const handleStartLesson = async (lessonId: string) => {\n+    try {\n+      if (isLocked) return;\n+      \n+      // Verify the lesson exists before navigating\n+      const { data: lessonData, error } = await supabase\n+        .from('lessons')\n+        .select('id')\n+        .eq('id', lessonId)\n+        .single();\n+\n+      if (error || !lessonData) {\n+        console.error('Error verifying lesson:', error);\n+        return;\n+      }\n+\n+      // Close the dialog\n+      setDialogOpen(false);\n+      \n+      // Construct the full URL using window.location.origin\n+      const baseUrl = window.location.origin;\n+      const lessonUrl = `${baseUrl}/teacher/lessons/${lessonId}`;\n+      \n+      // Open in a new window with specific features\n+      window.open(\n+        lessonUrl,\n+        '_blank',\n+        'noopener,noreferrer,width=1200,height=800,menubar=no'\n+      );\n+    } catch (error) {\n+      console.error('Error starting lesson:', error);\n+    }\n   };\n \n   const handleRestartLesson = (lessonId: string, subLessonId: string) => {\n     if (isLocked) return;\n@@ -1111,9 +1136,10 @@\n                   }\n                 }}\n                 className={cn(\n                   \"w-full sm:w-auto transition-all duration-300\",\n-                  selectedLessonInDialog ? \"bg-primary hover:bg-primary/90\" : \"\"\n+                  selectedLessonInDialog ? \"bg-primary hover:bg-primary/90\" : \"\",\n+                  \"relative\"\n                 )}\n                 disabled={!selectedLessonInDialog && !selectedSubtopic?.lessons?.[0]}\n               >\n                 <motion.div\n"
                },
                {
                    "date": 1739186885289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -709,18 +709,10 @@\n \n       // Close the dialog\n       setDialogOpen(false);\n       \n-      // Construct the full URL using window.location.origin\n-      const baseUrl = window.location.origin;\n-      const lessonUrl = `${baseUrl}/teacher/lessons/${lessonId}`;\n-      \n-      // Open in a new window with specific features\n-      window.open(\n-        lessonUrl,\n-        '_blank',\n-        'noopener,noreferrer,width=1200,height=800,menubar=no'\n-      );\n+      // Navigate to the lesson page\n+      navigate(`/teacher/lessons/${lessonId}`);\n     } catch (error) {\n       console.error('Error starting lesson:', error);\n     }\n   };\n"
                },
                {
                    "date": 1739186897339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -709,10 +709,10 @@\n \n       // Close the dialog\n       setDialogOpen(false);\n       \n-      // Navigate to the lesson page\n-      navigate(`/teacher/lessons/${lessonId}`);\n+      // Use window.location.href for a full page navigation\n+      window.location.href = `/teacher/lessons/${lessonId}`;\n     } catch (error) {\n       console.error('Error starting lesson:', error);\n     }\n   };\n"
                },
                {
                    "date": 1739187381937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -709,10 +709,18 @@\n \n       // Close the dialog\n       setDialogOpen(false);\n       \n-      // Use window.location.href for a full page navigation\n-      window.location.href = `/teacher/lessons/${lessonId}`;\n+      // Construct the full URL using window.location.origin\n+      const baseUrl = window.location.origin;\n+      const lessonUrl = `${baseUrl}/teacher/lessons/${lessonId}`;\n+      \n+      // Open in a new window with specific features\n+      window.open(\n+        lessonUrl,\n+        '_blank',\n+        'noopener,noreferrer,width=1200,height=800,menubar=no'\n+      );\n     } catch (error) {\n       console.error('Error starting lesson:', error);\n     }\n   };\n"
                },
                {
                    "date": 1739188650583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -709,18 +709,24 @@\n \n       // Close the dialog\n       setDialogOpen(false);\n       \n-      // Construct the full URL using window.location.origin\n-      const baseUrl = window.location.origin;\n-      const lessonUrl = `${baseUrl}/teacher/lessons/${lessonId}`;\n+      // Direct navigation to the lesson page\n+      const lessonUrl = `/teacher/lessons/${lessonId}`;\n       \n-      // Open in a new window with specific features\n-      window.open(\n-        lessonUrl,\n-        '_blank',\n-        'noopener,noreferrer,width=1200,height=800,menubar=no'\n-      );\n+      // Try different navigation methods\n+      try {\n+        // First try using navigate\n+        navigate(lessonUrl);\n+      } catch (navError) {\n+        try {\n+          // If navigate fails, try window.location.href\n+          window.location.href = lessonUrl;\n+        } catch (locationError) {\n+          // If both fail, try window.open as a last resort\n+          window.open(lessonUrl, '_self');\n+        }\n+      }\n     } catch (error) {\n       console.error('Error starting lesson:', error);\n     }\n   };\n"
                },
                {
                    "date": 1739188676305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,12 +4,12 @@\n import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n import { Progress } from \"@/components/ui/progress\";\n import { ArrowRight, BookOpen, Calendar, CheckCircle2, Clock, Lock, Plus, RotateCcw, Unlock, Users, Shield, GraduationCap } from \"lucide-react\";\n import { Badge } from \"@/components/ui/badge\";\n-import { useNavigate as useRouterNavigate } from \"react-router-dom\";\n-import { Link } from \"react-router-dom\";\n+import { useRouter } from \"next/navigation\";\n+import { Link } from \"next/link\";\n import ClassHeader from \"./ClassHeader\";\n-import {  Dialog,  DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, } from \"@/components/ui/dialog\";\n+import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from \"@/components/ui/dialog\";\n import { Button } from \"../ui/button\";\n import { Class, ExtendedLesson, SubLesson, ClassStudent, Student, Question, Activity, ExercisePrompt, Lesson, Topic, Subtopic, Grade } from \"@/types\";\n import { cn } from \"@/lib/utils\";\n import { supabase } from \"@/lib/supabase\";\n@@ -391,9 +391,9 @@\n   schedule: string | null;\n }\n \n export function LearningPathTeacher() {\n-  const navigate = useRouterNavigate();\n+  const router = useRouter();\n   const { logError } = useComponentLogger('LearningPathTeacher');\n   const lessonRefs = useRef<(HTMLDivElement | null)[]>([]);\n   \n   const [lessons, setLessons] = useState<CustomLesson[]>([]);\n@@ -709,33 +709,19 @@\n \n       // Close the dialog\n       setDialogOpen(false);\n       \n-      // Direct navigation to the lesson page\n-      const lessonUrl = `/teacher/lessons/${lessonId}`;\n-      \n-      // Try different navigation methods\n-      try {\n-        // First try using navigate\n-        navigate(lessonUrl);\n-      } catch (navError) {\n-        try {\n-          // If navigate fails, try window.location.href\n-          window.location.href = lessonUrl;\n-        } catch (locationError) {\n-          // If both fail, try window.open as a last resort\n-          window.open(lessonUrl, '_self');\n-        }\n-      }\n+      // Use Next.js router for navigation\n+      router.push(`/teacher/lessons/${lessonId}`);\n     } catch (error) {\n       console.error('Error starting lesson:', error);\n     }\n   };\n \n   const handleRestartLesson = (lessonId: string, subLessonId: string) => {\n     if (isLocked) return;\n     setDialogOpen(false);\n-    navigate(`/lesson/${lessonId}/${subLessonId}?restart=true`);\n+    router.push(`/lesson/${lessonId}/${subLessonId}?restart=true`);\n   };\n \n   const handleRetry = () => {\n     window.location.reload();\n"
                },
                {
                    "date": 1739188695852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,9 @@\n import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n import { Progress } from \"@/components/ui/progress\";\n import { ArrowRight, BookOpen, Calendar, CheckCircle2, Clock, Lock, Plus, RotateCcw, Unlock, Users, Shield, GraduationCap } from \"lucide-react\";\n import { Badge } from \"@/components/ui/badge\";\n-import { useRouter } from \"next/navigation\";\n-import { Link } from \"next/link\";\n+import Link from \"next/link\";\n import ClassHeader from \"./ClassHeader\";\n import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from \"@/components/ui/dialog\";\n import { Button } from \"../ui/button\";\n import { Class, ExtendedLesson, SubLesson, ClassStudent, Student, Question, Activity, ExercisePrompt, Lesson, Topic, Subtopic, Grade } from \"@/types\";\n@@ -709,19 +708,20 @@\n \n       // Close the dialog\n       setDialogOpen(false);\n       \n-      // Use Next.js router for navigation\n-      router.push(`/teacher/lessons/${lessonId}`);\n+      // Navigate using window.location\n+      const lessonUrl = `/teacher/lessons/${lessonId}`;\n+      window.location.href = lessonUrl;\n     } catch (error) {\n       console.error('Error starting lesson:', error);\n     }\n   };\n \n   const handleRestartLesson = (lessonId: string, subLessonId: string) => {\n     if (isLocked) return;\n     setDialogOpen(false);\n-    router.push(`/lesson/${lessonId}/${subLessonId}?restart=true`);\n+    window.location.href = `/lesson/${lessonId}/${subLessonId}?restart=true`;\n   };\n \n   const handleRetry = () => {\n     window.location.reload();\n"
                },
                {
                    "date": 1739188714201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -708,20 +708,22 @@\n \n       // Close the dialog\n       setDialogOpen(false);\n       \n-      // Navigate using window.location\n+      // Navigate to the lesson page\n       const lessonUrl = `/teacher/lessons/${lessonId}`;\n-      window.location.href = lessonUrl;\n+      \n+      // Try to navigate using window.location.assign for better browser compatibility\n+      window.location.assign(lessonUrl);\n     } catch (error) {\n       console.error('Error starting lesson:', error);\n     }\n   };\n \n   const handleRestartLesson = (lessonId: string, subLessonId: string) => {\n     if (isLocked) return;\n     setDialogOpen(false);\n-    window.location.href = `/lesson/${lessonId}/${subLessonId}?restart=true`;\n+    window.location.assign(`/lesson/${lessonId}/${subLessonId}?restart=true`);\n   };\n \n   const handleRetry = () => {\n     window.location.reload();\n"
                },
                {
                    "date": 1739188734126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -708,13 +708,16 @@\n \n       // Close the dialog\n       setDialogOpen(false);\n       \n-      // Navigate to the lesson page\n-      const lessonUrl = `/teacher/lessons/${lessonId}`;\n-      \n-      // Try to navigate using window.location.assign for better browser compatibility\n-      window.location.assign(lessonUrl);\n+      // Create an anchor element and trigger navigation\n+      const link = document.createElement('a');\n+      link.href = `/teacher/lessons/${lessonId}`;\n+      link.target = '_blank';\n+      link.rel = 'noopener noreferrer';\n+      document.body.appendChild(link);\n+      link.click();\n+      document.body.removeChild(link);\n     } catch (error) {\n       console.error('Error starting lesson:', error);\n     }\n   };\n"
                },
                {
                    "date": 1739188808024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,9 @@\n import { transformLearningPathData } from \"@/lib/transforms/learningPath\";\n import { motion, AnimatePresence } from \"framer-motion\";\n import { format } from \"date-fns\";\n import { useInView } from 'react-intersection-observer';\n+import { useNavigate } from 'react-router-dom';\n \n const MAX_RETRIES = 3;\n const RETRY_DELAY = 1000; // 1 second\n \n@@ -390,9 +391,9 @@\n   schedule: string | null;\n }\n \n export function LearningPathTeacher() {\n-  const router = useRouter();\n+  const navigate = useNavigate();\n   const { logError } = useComponentLogger('LearningPathTeacher');\n   const lessonRefs = useRef<(HTMLDivElement | null)[]>([]);\n   \n   const [lessons, setLessons] = useState<CustomLesson[]>([]);\n@@ -708,16 +709,10 @@\n \n       // Close the dialog\n       setDialogOpen(false);\n       \n-      // Create an anchor element and trigger navigation\n-      const link = document.createElement('a');\n-      link.href = `/teacher/lessons/${lessonId}`;\n-      link.target = '_blank';\n-      link.rel = 'noopener noreferrer';\n-      document.body.appendChild(link);\n-      link.click();\n-      document.body.removeChild(link);\n+      // Navigate using react-router\n+      navigate(`/teacher/lessons/${lessonId}`);\n     } catch (error) {\n       console.error('Error starting lesson:', error);\n     }\n   };\n"
                },
                {
                    "date": 1739189118657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -692,38 +692,56 @@\n   };\n \n   const handleStartLesson = async (lessonId: string) => {\n     try {\n-      if (isLocked) return;\n+      console.log('Starting lesson with ID:', lessonId);\n+      if (isLocked) {\n+        console.log('Lesson is locked, cannot start');\n+        return;\n+      }\n       \n       // Verify the lesson exists before navigating\n+      console.log('Verifying lesson existence...');\n       const { data: lessonData, error } = await supabase\n         .from('lessons')\n-        .select('id')\n+        .select(`\n+          *,\n+          questions (\n+            *,\n+            exercise_prompts (*)\n+          ),\n+          activities (*)\n+        `)\n         .eq('id', lessonId)\n         .single();\n \n-      if (error || !lessonData) {\n-        console.error('Error verifying lesson:', error);\n+      if (error) {\n+        console.error('Error fetching lesson data:', error);\n         return;\n       }\n \n+      if (!lessonData) {\n+        console.error('No lesson data found for ID:', lessonId);\n+        return;\n+      }\n+\n+      console.log('Lesson data found:', lessonData);\n+      console.log('Questions count:', lessonData.questions?.length);\n+      console.log('Activities count:', lessonData.activities?.length);\n+\n       // Close the dialog\n       setDialogOpen(false);\n       \n       // Navigate using react-router\n+      console.log('Navigating to lesson page...');\n       navigate(`/teacher/lessons/${lessonId}`);\n+      \n+      console.log('Navigation completed');\n     } catch (error) {\n-      console.error('Error starting lesson:', error);\n+      console.error('Error in handleStartLesson:', error);\n     }\n   };\n \n-  const handleRestartLesson = (lessonId: string, subLessonId: string) => {\n-    if (isLocked) return;\n-    setDialogOpen(false);\n-    window.location.assign(`/lesson/${lessonId}/${subLessonId}?restart=true`);\n-  };\n-\n   const handleRetry = () => {\n     window.location.reload();\n   };\n \n"
                },
                {
                    "date": 1739189215286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -692,9 +692,9 @@\n   };\n \n   const handleStartLesson = async (lessonId: string) => {\n     try {\n-      console.log('Starting lesson with ID:', lessonId);\n+      console.log('handleStartLesson called with ID:', lessonId);\n       if (isLocked) {\n         console.log('Lesson is locked, cannot start');\n         return;\n       }\n@@ -730,11 +730,17 @@\n \n       // Close the dialog\n       setDialogOpen(false);\n       \n-      // Navigate using react-router\n+      // Navigate using react-router with state\n       console.log('Navigating to lesson page...');\n-      navigate(`/teacher/lessons/${lessonId}`);\n+      navigate(`/teacher/lessons/${lessonId}`, {\n+        state: {\n+          lessonData,\n+          topicTitle: selectedTopic?.title,\n+          subtopicTitle: selectedSubtopic?.title\n+        }\n+      });\n       \n       console.log('Navigation completed');\n     } catch (error) {\n       console.error('Error in handleStartLesson:', error);\n@@ -1137,13 +1143,21 @@\n             </div>\n \n             <DialogFooter className=\"p-6 border-t bg-accent/5 flex-shrink-0\">\n               <Button\n-                onClick={() => {\n-                  if (selectedLessonInDialog?.id) {\n-                    handleStartLesson(selectedLessonInDialog.id);\n-                  } else if (selectedSubtopic?.lessons?.[0]?.id) {\n-                    handleStartLesson(selectedSubtopic.lessons[0].id);\n+                onClick={async (e) => {\n+                  e.preventDefault();\n+                  console.log('Start Selected Lesson button clicked');\n+                  console.log('Selected Lesson:', selectedLessonInDialog);\n+                  console.log('Selected Subtopic:', selectedSubtopic);\n+                  \n+                  const lessonIdToStart = selectedLessonInDialog?.id || selectedSubtopic?.lessons?.[0]?.id;\n+                  \n+                  if (lessonIdToStart) {\n+                    console.log('Starting lesson with ID:', lessonIdToStart);\n+                    await handleStartLesson(lessonIdToStart);\n+                  } else {\n+                    console.error('No lesson selected to start');\n                   }\n                 }}\n                 className={cn(\n                   \"w-full sm:w-auto transition-all duration-300\",\n"
                },
                {
                    "date": 1739189350731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -692,62 +692,46 @@\n   };\n \n   const handleStartLesson = async (lessonId: string) => {\n     try {\n-      console.log('handleStartLesson called with ID:', lessonId);\n-      if (isLocked) {\n-        console.log('Lesson is locked, cannot start');\n-        return;\n-      }\n+      if (isLocked) return;\n       \n       // Verify the lesson exists before navigating\n-      console.log('Verifying lesson existence...');\n       const { data: lessonData, error } = await supabase\n         .from('lessons')\n-        .select(`\n-          *,\n-          questions (\n-            *,\n-            exercise_prompts (*)\n-          ),\n-          activities (*)\n-        `)\n+        .select('id')\n         .eq('id', lessonId)\n         .single();\n \n-      if (error) {\n-        console.error('Error fetching lesson data:', error);\n+      if (error || !lessonData) {\n+        console.error('Error verifying lesson:', error);\n         return;\n       }\n \n-      if (!lessonData) {\n-        console.error('No lesson data found for ID:', lessonId);\n-        return;\n-      }\n-\n-      console.log('Lesson data found:', lessonData);\n-      console.log('Questions count:', lessonData.questions?.length);\n-      console.log('Activities count:', lessonData.activities?.length);\n-\n       // Close the dialog\n       setDialogOpen(false);\n       \n-      // Navigate using react-router with state\n-      console.log('Navigating to lesson page...');\n-      navigate(`/teacher/lessons/${lessonId}`, {\n-        state: {\n-          lessonData,\n-          topicTitle: selectedTopic?.title,\n-          subtopicTitle: selectedSubtopic?.title\n-        }\n-      });\n+      // Construct the full URL using window.location.origin\n+      const baseUrl = window.location.origin;\n+      const lessonUrl = `${baseUrl}/teacher/lessons/${lessonId}`;\n       \n-      console.log('Navigation completed');\n+      // Open in a new window with specific features\n+      window.open(\n+        lessonUrl,\n+        '_blank',\n+        'noopener,noreferrer,width=1200,height=800,menubar=no'\n+      );\n     } catch (error) {\n-      console.error('Error in handleStartLesson:', error);\n+      console.error('Error starting lesson:', error);\n     }\n   };\n \n+  const handleRestartLesson = (lessonId: string, subLessonId: string) => {\n+    if (isLocked) return;\n+    setDialogOpen(false);\n+    navigate(`/lesson/${lessonId}/${subLessonId}?restart=true`);\n+  };\n+\n   const handleRetry = () => {\n     window.location.reload();\n   };\n \n@@ -1143,29 +1127,75 @@\n             </div>\n \n             <DialogFooter className=\"p-6 border-t bg-accent/5 flex-shrink-0\">\n               <Button\n-                onClick={async (e) => {\n-                  e.preventDefault();\n+                onClick={async () => {\n                   console.log('Start Selected Lesson button clicked');\n                   console.log('Selected Lesson:', selectedLessonInDialog);\n+                  console.log('Selected Topic:', selectedTopic);\n                   console.log('Selected Subtopic:', selectedSubtopic);\n                   \n-                  const lessonIdToStart = selectedLessonInDialog?.id || selectedSubtopic?.lessons?.[0]?.id;\n+                  const lessonIdToStart = selectedLessonInDialog?.id;\n                   \n-                  if (lessonIdToStart) {\n-                    console.log('Starting lesson with ID:', lessonIdToStart);\n-                    await handleStartLesson(lessonIdToStart);\n-                  } else {\n+                  if (!lessonIdToStart) {\n                     console.error('No lesson selected to start');\n+                    return;\n                   }\n+\n+                  try {\n+                    // Verify the lesson exists and get its data\n+                    const { data: lessonData, error } = await supabase\n+                      .from('lessons')\n+                      .select(`\n+                        *,\n+                        questions (\n+                          *,\n+                          exercise_prompts (*)\n+                        ),\n+                        activities (*)\n+                      `)\n+                      .eq('id', lessonIdToStart)\n+                      .single();\n+\n+                    if (error) {\n+                      console.error('Error fetching lesson:', error);\n+                      return;\n+                    }\n+\n+                    if (!lessonData) {\n+                      console.error('Lesson not found');\n+                      return;\n+                    }\n+\n+                    console.log('Fetched lesson data:', lessonData);\n+                    \n+                    // Close dialog\n+                    setDialogOpen(false);\n+\n+                    // Navigate with state\n+                    navigate(`/teacher/lessons/${lessonIdToStart}`, {\n+                      state: {\n+                        lessonData,\n+                        topicTitle: selectedTopic?.title,\n+                        subtopicTitle: selectedSubtopic?.title,\n+                        hierarchyInfo: {\n+                          topicId: selectedTopic?.id,\n+                          subtopicId: selectedSubtopic?.id,\n+                          questions: lessonData.questions,\n+                          activities: lessonData.activities\n+                        }\n+                      }\n+                    });\n+                  } catch (error) {\n+                    console.error('Error starting lesson:', error);\n+                  }\n                 }}\n                 className={cn(\n                   \"w-full sm:w-auto transition-all duration-300\",\n                   selectedLessonInDialog ? \"bg-primary hover:bg-primary/90\" : \"\",\n                   \"relative\"\n                 )}\n-                disabled={!selectedLessonInDialog && !selectedSubtopic?.lessons?.[0]}\n+                disabled={!selectedLessonInDialog}\n               >\n                 <motion.div\n                   className=\"flex items-center justify-center gap-2\"\n                   whileHover={{ scale: 1.05 }}\n"
                },
                {
                    "date": 1739189545717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1141,18 +1141,18 @@\n                     return;\n                   }\n \n                   try {\n-                    // Verify the lesson exists and get its data\n+                    // Verify the lesson exists and get its data with all related content\n                     const { data: lessonData, error } = await supabase\n                       .from('lessons')\n                       .select(`\n                         *,\n-                        questions (\n+                        questions!inner (\n                           *,\n-                          exercise_prompts (*)\n+                          exercise_prompts!inner (*)\n                         ),\n-                        activities (*)\n+                        activities!inner (*)\n                       `)\n                       .eq('id', lessonIdToStart)\n                       .single();\n \n@@ -1165,27 +1165,43 @@\n                       console.error('Lesson not found');\n                       return;\n                     }\n \n-                    console.log('Fetched lesson data:', lessonData);\n+                    console.log('Fetched complete lesson data:', lessonData);\n+                    console.log('Questions:', lessonData.questions);\n+                    console.log('Activities:', lessonData.activities);\n                     \n                     // Close dialog\n                     setDialogOpen(false);\n \n-                    // Navigate with state\n-                    navigate(`/teacher/lessons/${lessonIdToStart}`, {\n-                      state: {\n-                        lessonData,\n-                        topicTitle: selectedTopic?.title,\n-                        subtopicTitle: selectedSubtopic?.title,\n-                        hierarchyInfo: {\n-                          topicId: selectedTopic?.id,\n-                          subtopicId: selectedSubtopic?.id,\n-                          questions: lessonData.questions,\n-                          activities: lessonData.activities\n-                        }\n+                    // Create a state object with all necessary data\n+                    const stateData = {\n+                      lessonData,\n+                      topicTitle: selectedTopic?.title,\n+                      subtopicTitle: selectedSubtopic?.title,\n+                      hierarchyInfo: {\n+                        topicId: selectedTopic?.id,\n+                        subtopicId: selectedSubtopic?.id,\n+                        questions: lessonData.questions,\n+                        activities: lessonData.activities\n                       }\n-                    });\n+                    };\n+\n+                    // Encode the state data\n+                    const encodedState = encodeURIComponent(JSON.stringify(stateData));\n+                    \n+                    // Construct URL with state data\n+                    const baseUrl = window.location.origin;\n+                    const lessonUrl = `${baseUrl}/teacher/lessons/${lessonIdToStart}?state=${encodedState}`;\n+                    \n+                    // Open in new tab\n+                    window.open(\n+                      lessonUrl,\n+                      '_blank',\n+                      'noopener,noreferrer'\n+                    );\n+\n+                    console.log('Navigation completed - opened in new tab');\n                   } catch (error) {\n                     console.error('Error starting lesson:', error);\n                   }\n                 }}\n"
                },
                {
                    "date": 1739189660175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1128,82 +1128,50 @@\n \n             <DialogFooter className=\"p-6 border-t bg-accent/5 flex-shrink-0\">\n               <Button\n                 onClick={async () => {\n-                  console.log('Start Selected Lesson button clicked');\n-                  console.log('Selected Lesson:', selectedLessonInDialog);\n-                  console.log('Selected Topic:', selectedTopic);\n-                  console.log('Selected Subtopic:', selectedSubtopic);\n-                  \n-                  const lessonIdToStart = selectedLessonInDialog?.id;\n-                  \n-                  if (!lessonIdToStart) {\n-                    console.error('No lesson selected to start');\n+                  if (!selectedLessonInDialog?.id) {\n+                    console.log('No lesson selected');\n                     return;\n                   }\n \n                   try {\n-                    // Verify the lesson exists and get its data with all related content\n+                    console.log('Starting lesson:', selectedLessonInDialog.id);\n+                    \n+                    // Fetch complete lesson data with related content\n                     const { data: lessonData, error } = await supabase\n                       .from('lessons')\n                       .select(`\n                         *,\n-                        questions!inner (\n+                        questions (\n                           *,\n-                          exercise_prompts!inner (*)\n+                          exercise_prompts (*)\n                         ),\n-                        activities!inner (*)\n+                        activities (*)\n                       `)\n-                      .eq('id', lessonIdToStart)\n+                      .eq('id', selectedLessonInDialog.id)\n                       .single();\n \n                     if (error) {\n                       console.error('Error fetching lesson:', error);\n                       return;\n                     }\n \n-                    if (!lessonData) {\n-                      console.error('Lesson not found');\n-                      return;\n-                    }\n+                    console.log('Fetched lesson data:', lessonData);\n \n-                    console.log('Fetched complete lesson data:', lessonData);\n-                    console.log('Questions:', lessonData.questions);\n-                    console.log('Activities:', lessonData.activities);\n-                    \n-                    // Close dialog\n+                    // Close the dialog\n                     setDialogOpen(false);\n \n-                    // Create a state object with all necessary data\n-                    const stateData = {\n-                      lessonData,\n-                      topicTitle: selectedTopic?.title,\n-                      subtopicTitle: selectedSubtopic?.title,\n-                      hierarchyInfo: {\n-                        topicId: selectedTopic?.id,\n-                        subtopicId: selectedSubtopic?.id,\n-                        questions: lessonData.questions,\n-                        activities: lessonData.activities\n-                      }\n-                    };\n+                    // Construct the lesson URL\n+                    const baseUrl = window.location.origin;\n+                    const lessonUrl = `${baseUrl}/teacher/lessons/${selectedLessonInDialog.id}`;\n \n-                    // Encode the state data\n-                    const encodedState = encodeURIComponent(JSON.stringify(stateData));\n+                    // Navigate to the lesson page\n+                    window.location.href = lessonUrl;\n                     \n-                    // Construct URL with state data\n-                    const baseUrl = window.location.origin;\n-                    const lessonUrl = `${baseUrl}/teacher/lessons/${lessonIdToStart}?state=${encodedState}`;\n-                    \n-                    // Open in new tab\n-                    window.open(\n-                      lessonUrl,\n-                      '_blank',\n-                      'noopener,noreferrer'\n-                    );\n-\n-                    console.log('Navigation completed - opened in new tab');\n+                    console.log('Navigating to:', lessonUrl);\n                   } catch (error) {\n-                    console.error('Error starting lesson:', error);\n+                    console.error('Error in handleStartLesson:', error);\n                   }\n                 }}\n                 className={cn(\n                   \"w-full sm:w-auto transition-all duration-300\",\n"
                },
                {
                    "date": 1739189677554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -709,18 +709,25 @@\n \n       // Close the dialog\n       setDialogOpen(false);\n       \n-      // Construct the full URL using window.location.origin\n+      // Construct the lesson URL with state data\n       const baseUrl = window.location.origin;\n-      const lessonUrl = `${baseUrl}/teacher/lessons/${lessonId}`;\n+      const stateData = {\n+        lessonData,\n+        topicTitle: selectedTopic?.title,\n+        subtopicTitle: selectedSubtopic?.title\n+      };\n+      const encodedState = encodeURIComponent(JSON.stringify(stateData));\n+      const lessonUrl = `${baseUrl}/teacher/lessons/${lessonId}?state=${encodedState}`;\n+\n+      // Open in a new tab with specific window features\n+      const newWindow = window.open(lessonUrl, '_blank');\n+      if (newWindow) {\n+        newWindow.focus();\n+      }\n       \n-      // Open in a new window with specific features\n-      window.open(\n-        lessonUrl,\n-        '_blank',\n-        'noopener,noreferrer,width=1200,height=800,menubar=no'\n-      );\n+      console.log('Opened lesson in new tab:', lessonUrl);\n     } catch (error) {\n       console.error('Error starting lesson:', error);\n     }\n   };\n@@ -1160,16 +1167,25 @@\n \n                     // Close the dialog\n                     setDialogOpen(false);\n \n-                    // Construct the lesson URL\n+                    // Construct the lesson URL with state data\n                     const baseUrl = window.location.origin;\n-                    const lessonUrl = `${baseUrl}/teacher/lessons/${selectedLessonInDialog.id}`;\n+                    const stateData = {\n+                      lessonData,\n+                      topicTitle: selectedTopic?.title,\n+                      subtopicTitle: selectedSubtopic?.title\n+                    };\n+                    const encodedState = encodeURIComponent(JSON.stringify(stateData));\n+                    const lessonUrl = `${baseUrl}/teacher/lessons/${selectedLessonInDialog.id}?state=${encodedState}`;\n \n-                    // Navigate to the lesson page\n-                    window.location.href = lessonUrl;\n+                    // Open in a new tab with specific window features\n+                    const newWindow = window.open(lessonUrl, '_blank');\n+                    if (newWindow) {\n+                      newWindow.focus();\n+                    }\n                     \n-                    console.log('Navigating to:', lessonUrl);\n+                    console.log('Opened lesson in new tab:', lessonUrl);\n                   } catch (error) {\n                     console.error('Error in handleStartLesson:', error);\n                   }\n                 }}\n"
                },
                {
                    "date": 1739189758217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1134,9 +1134,11 @@\n             </div>\n \n             <DialogFooter className=\"p-6 border-t bg-accent/5 flex-shrink-0\">\n               <Button\n-                onClick={async () => {\n+                onClick={async (e) => {\n+                  e.preventDefault(); // Prevent default button behavior\n+                  \n                   if (!selectedLessonInDialog?.id) {\n                     console.log('No lesson selected');\n                     return;\n                   }\n@@ -1164,28 +1166,46 @@\n                     }\n \n                     console.log('Fetched lesson data:', lessonData);\n \n-                    // Close the dialog\n-                    setDialogOpen(false);\n-\n-                    // Construct the lesson URL with state data\n-                    const baseUrl = window.location.origin;\n+                    // Create state object with all necessary data\n                     const stateData = {\n-                      lessonData,\n-                      topicTitle: selectedTopic?.title,\n-                      subtopicTitle: selectedSubtopic?.title\n+                      lesson: lessonData,\n+                      topic: selectedTopic,\n+                      subtopic: selectedSubtopic,\n+                      hierarchyInfo: {\n+                        topicId: selectedTopic?.id,\n+                        subtopicId: selectedSubtopic?.id\n+                      }\n                     };\n+\n+                    // Encode the state data\n                     const encodedState = encodeURIComponent(JSON.stringify(stateData));\n+                    \n+                    // Construct the full URL\n+                    const baseUrl = window.location.origin;\n                     const lessonUrl = `${baseUrl}/teacher/lessons/${selectedLessonInDialog.id}?state=${encodedState}`;\n \n-                    // Open in a new tab with specific window features\n-                    const newWindow = window.open(lessonUrl, '_blank');\n-                    if (newWindow) {\n-                      newWindow.focus();\n-                    }\n-                    \n-                    console.log('Opened lesson in new tab:', lessonUrl);\n+                    // Close the dialog first\n+                    setDialogOpen(false);\n+\n+                    // Use a small delay to ensure dialog is closed before opening new tab\n+                    setTimeout(() => {\n+                      // Open in new tab with specific features\n+                      const newWindow = window.open(\n+                        lessonUrl,\n+                        '_blank',\n+                        'noopener,noreferrer'\n+                      );\n+                      \n+                      if (newWindow) {\n+                        newWindow.focus();\n+                      } else {\n+                        console.warn('Popup was blocked. Please allow popups for this site.');\n+                      }\n+                    }, 100);\n+\n+                    console.log('Opening lesson in new tab:', lessonUrl);\n                   } catch (error) {\n                     console.error('Error in handleStartLesson:', error);\n                   }\n                 }}\n"
                },
                {
                    "date": 1739189926873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -709,18 +709,32 @@\n \n       // Close the dialog\n       setDialogOpen(false);\n       \n-      // Construct the lesson URL with state data\n-      const baseUrl = window.location.origin;\n-      const stateData = {\n-        lessonData,\n-        topicTitle: selectedTopic?.title,\n-        subtopicTitle: selectedSubtopic?.title\n+      // Create minimal state object for URL\n+      const urlState = {\n+        lessonId: lessonId,\n+        topicId: selectedTopic?.id,\n+        subtopicId: selectedSubtopic?.id\n       };\n-      const encodedState = encodeURIComponent(JSON.stringify(stateData));\n-      const lessonUrl = `${baseUrl}/teacher/lessons/${lessonId}?state=${encodedState}`;\n \n+      // Store full state data in localStorage\n+      const fullState = {\n+        lesson: lessonData,\n+        topic: selectedTopic,\n+        subtopic: selectedSubtopic,\n+        hierarchyInfo: {\n+          topicId: selectedTopic?.id,\n+          subtopicId: selectedSubtopic?.id\n+        }\n+      };\n+      \n+      localStorage.setItem(`lesson_state_${lessonId}`, JSON.stringify(fullState));\n+      \n+      // Construct the URL with minimal parameters\n+      const baseUrl = window.location.origin;\n+      const lessonUrl = `${baseUrl}/teacher/lessons/${lessonId}?state=${encodeURIComponent(JSON.stringify(urlState))}`;\n+\n       // Open in a new tab with specific window features\n       const newWindow = window.open(lessonUrl, '_blank');\n       if (newWindow) {\n         newWindow.focus();\n@@ -1145,53 +1159,37 @@\n \n                   try {\n                     console.log('Starting lesson:', selectedLessonInDialog.id);\n                     \n-                    // Fetch complete lesson data with related content\n-                    const { data: lessonData, error } = await supabase\n-                      .from('lessons')\n-                      .select(`\n-                        *,\n-                        questions (\n-                          *,\n-                          exercise_prompts (*)\n-                        ),\n-                        activities (*)\n-                      `)\n-                      .eq('id', selectedLessonInDialog.id)\n-                      .single();\n+                    // Create minimal state object for URL\n+                    const urlState = {\n+                      lessonId: selectedLessonInDialog.id,\n+                      topicId: selectedTopic?.id,\n+                      subtopicId: selectedSubtopic?.id\n+                    };\n \n-                    if (error) {\n-                      console.error('Error fetching lesson:', error);\n-                      return;\n-                    }\n-\n-                    console.log('Fetched lesson data:', lessonData);\n-\n-                    // Create state object with all necessary data\n-                    const stateData = {\n-                      lesson: lessonData,\n+                    // Store full state data in localStorage\n+                    const fullState = {\n+                      lesson: selectedLessonInDialog,\n                       topic: selectedTopic,\n                       subtopic: selectedSubtopic,\n                       hierarchyInfo: {\n                         topicId: selectedTopic?.id,\n                         subtopicId: selectedSubtopic?.id\n                       }\n                     };\n-\n-                    // Encode the state data\n-                    const encodedState = encodeURIComponent(JSON.stringify(stateData));\n                     \n-                    // Construct the full URL\n+                    localStorage.setItem(`lesson_state_${selectedLessonInDialog.id}`, JSON.stringify(fullState));\n+                    \n+                    // Construct the URL with minimal parameters\n                     const baseUrl = window.location.origin;\n-                    const lessonUrl = `${baseUrl}/teacher/lessons/${selectedLessonInDialog.id}?state=${encodedState}`;\n+                    const lessonUrl = `${baseUrl}/teacher/lessons/${selectedLessonInDialog.id}?state=${encodeURIComponent(JSON.stringify(urlState))}`;\n \n                     // Close the dialog first\n                     setDialogOpen(false);\n \n                     // Use a small delay to ensure dialog is closed before opening new tab\n                     setTimeout(() => {\n-                      // Open in new tab with specific features\n                       const newWindow = window.open(\n                         lessonUrl,\n                         '_blank',\n                         'noopener,noreferrer'\n"
                },
                {
                    "date": 1739190311703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -694,23 +694,8 @@\n   const handleStartLesson = async (lessonId: string) => {\n     try {\n       if (isLocked) return;\n       \n-      // Verify the lesson exists before navigating\n-      const { data: lessonData, error } = await supabase\n-        .from('lessons')\n-        .select('id')\n-        .eq('id', lessonId)\n-        .single();\n-\n-      if (error || !lessonData) {\n-        console.error('Error verifying lesson:', error);\n-        return;\n-      }\n-\n-      // Close the dialog\n-      setDialogOpen(false);\n-      \n       // Create minimal state object for URL\n       const urlState = {\n         lessonId: lessonId,\n         topicId: selectedTopic?.id,\n@@ -718,9 +703,9 @@\n       };\n \n       // Store full state data in localStorage\n       const fullState = {\n-        lesson: lessonData,\n+        lesson: selectedLessonInDialog,\n         topic: selectedTopic,\n         subtopic: selectedSubtopic,\n         hierarchyInfo: {\n           topicId: selectedTopic?.id,\n@@ -729,19 +714,19 @@\n       };\n       \n       localStorage.setItem(`lesson_state_${lessonId}`, JSON.stringify(fullState));\n       \n-      // Construct the URL with minimal parameters\n-      const baseUrl = window.location.origin;\n-      const lessonUrl = `${baseUrl}/teacher/lessons/${lessonId}?state=${encodeURIComponent(JSON.stringify(urlState))}`;\n+      // Construct the URL with minimal parameters using Next.js routing\n+      const lessonUrl = `/teacher/lessons/${lessonId}?state=${encodeURIComponent(JSON.stringify(urlState))}`;\n \n-      // Open in a new tab with specific window features\n-      const newWindow = window.open(lessonUrl, '_blank');\n-      if (newWindow) {\n-        newWindow.focus();\n-      }\n-      \n-      console.log('Opened lesson in new tab:', lessonUrl);\n+      // Close the dialog first\n+      setDialogOpen(false);\n+\n+      // Use a small delay to ensure dialog is closed before opening new tab\n+      setTimeout(() => {\n+        window.open(lessonUrl, '_blank', 'noopener,noreferrer');\n+      }, 100);\n+\n     } catch (error) {\n       console.error('Error starting lesson:', error);\n     }\n   };\n@@ -1179,28 +1164,17 @@\n                     };\n                     \n                     localStorage.setItem(`lesson_state_${selectedLessonInDialog.id}`, JSON.stringify(fullState));\n                     \n-                    // Construct the URL with minimal parameters\n-                    const baseUrl = window.location.origin;\n-                    const lessonUrl = `${baseUrl}/teacher/lessons/${selectedLessonInDialog.id}?state=${encodeURIComponent(JSON.stringify(urlState))}`;\n+                    // Construct the URL with minimal parameters using Next.js routing\n+                    const lessonUrl = `/teacher/lessons/${selectedLessonInDialog.id}?state=${encodeURIComponent(JSON.stringify(urlState))}`;\n \n                     // Close the dialog first\n                     setDialogOpen(false);\n \n                     // Use a small delay to ensure dialog is closed before opening new tab\n                     setTimeout(() => {\n-                      const newWindow = window.open(\n-                        lessonUrl,\n-                        '_blank',\n-                        'noopener,noreferrer'\n-                      );\n-                      \n-                      if (newWindow) {\n-                        newWindow.focus();\n-                      } else {\n-                        console.warn('Popup was blocked. Please allow popups for this site.');\n-                      }\n+                      window.open(lessonUrl, '_blank', 'noopener,noreferrer');\n                     }, 100);\n \n                     console.log('Opening lesson in new tab:', lessonUrl);\n                   } catch (error) {\n"
                },
                {
                    "date": 1739190921313,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -715,16 +715,20 @@\n       \n       localStorage.setItem(`lesson_state_${lessonId}`, JSON.stringify(fullState));\n       \n       // Construct the URL with minimal parameters using Next.js routing\n-      const lessonUrl = `/teacher/lessons/${lessonId}?state=${encodeURIComponent(JSON.stringify(urlState))}`;\n+      const baseUrl = window.location.origin;\n+      const lessonUrl = `${baseUrl}/teacher/lessons/${lessonId}?state=${encodeURIComponent(JSON.stringify(urlState))}`;\n \n       // Close the dialog first\n       setDialogOpen(false);\n \n       // Use a small delay to ensure dialog is closed before opening new tab\n       setTimeout(() => {\n-        window.open(lessonUrl, '_blank', 'noopener,noreferrer');\n+        const newWindow = window.open('about:blank', '_blank');\n+        if (newWindow) {\n+          newWindow.location.href = lessonUrl;\n+        }\n       }, 100);\n \n     } catch (error) {\n       console.error('Error starting lesson:', error);\n@@ -1134,9 +1138,9 @@\n \n             <DialogFooter className=\"p-6 border-t bg-accent/5 flex-shrink-0\">\n               <Button\n                 onClick={async (e) => {\n-                  e.preventDefault(); // Prevent default button behavior\n+                  e.preventDefault();\n                   \n                   if (!selectedLessonInDialog?.id) {\n                     console.log('No lesson selected');\n                     return;\n@@ -1165,19 +1169,22 @@\n                     \n                     localStorage.setItem(`lesson_state_${selectedLessonInDialog.id}`, JSON.stringify(fullState));\n                     \n                     // Construct the URL with minimal parameters using Next.js routing\n-                    const lessonUrl = `/teacher/lessons/${selectedLessonInDialog.id}?state=${encodeURIComponent(JSON.stringify(urlState))}`;\n+                    const baseUrl = window.location.origin;\n+                    const lessonUrl = `${baseUrl}/teacher/lessons/${selectedLessonInDialog.id}?state=${encodeURIComponent(JSON.stringify(urlState))}`;\n \n                     // Close the dialog first\n                     setDialogOpen(false);\n \n                     // Use a small delay to ensure dialog is closed before opening new tab\n                     setTimeout(() => {\n-                      window.open(lessonUrl, '_blank', 'noopener,noreferrer');\n+                      const newWindow = window.open('about:blank', '_blank');\n+                      if (newWindow) {\n+                        newWindow.location.href = lessonUrl;\n+                      }\n                     }, 100);\n \n-                    console.log('Opening lesson in new tab:', lessonUrl);\n                   } catch (error) {\n                     console.error('Error in handleStartLesson:', error);\n                   }\n                 }}\n"
                },
                {
                    "date": 1739191051416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n import { transformLearningPathData } from \"@/lib/transforms/learningPath\";\n import { motion, AnimatePresence } from \"framer-motion\";\n import { format } from \"date-fns\";\n import { useInView } from 'react-intersection-observer';\n-import { useNavigate } from 'react-router-dom';\n+import { useRouter } from \"next/navigation\";\n \n const MAX_RETRIES = 3;\n const RETRY_DELAY = 1000; // 1 second\n \n@@ -391,9 +391,9 @@\n   schedule: string | null;\n }\n \n export function LearningPathTeacher() {\n-  const navigate = useNavigate();\n+  const router = useRouter();\n   const { logError } = useComponentLogger('LearningPathTeacher');\n   const lessonRefs = useRef<(HTMLDivElement | null)[]>([]);\n   \n   const [lessons, setLessons] = useState<CustomLesson[]>([]);\n@@ -715,31 +715,76 @@\n       \n       localStorage.setItem(`lesson_state_${lessonId}`, JSON.stringify(fullState));\n       \n       // Construct the URL with minimal parameters using Next.js routing\n-      const baseUrl = window.location.origin;\n-      const lessonUrl = `${baseUrl}/teacher/lessons/${lessonId}?state=${encodeURIComponent(JSON.stringify(urlState))}`;\n+      const lessonUrl = `/teacher/lessons/${lessonId}`;\n+      const searchParams = new URLSearchParams();\n+      searchParams.set('state', JSON.stringify(urlState));\n \n       // Close the dialog first\n       setDialogOpen(false);\n \n       // Use a small delay to ensure dialog is closed before opening new tab\n       setTimeout(() => {\n-        const newWindow = window.open('about:blank', '_blank');\n-        if (newWindow) {\n-          newWindow.location.href = lessonUrl;\n-        }\n+        window.open(`${lessonUrl}?${searchParams.toString()}`, '_blank', 'noopener');\n       }, 100);\n \n     } catch (error) {\n       console.error('Error starting lesson:', error);\n     }\n   };\n \n+  const handleStartLessonFromDialog = async (e: React.MouseEvent) => {\n+    e.preventDefault();\n+    \n+    if (!selectedLessonInDialog?.id) {\n+      console.log('No lesson selected');\n+      return;\n+    }\n+\n+    try {\n+      // Create minimal state object for URL\n+      const urlState = {\n+        lessonId: selectedLessonInDialog.id,\n+        topicId: selectedTopic?.id,\n+        subtopicId: selectedSubtopic?.id\n+      };\n+\n+      // Store full state data in localStorage\n+      const fullState = {\n+        lesson: selectedLessonInDialog,\n+        topic: selectedTopic,\n+        subtopic: selectedSubtopic,\n+        hierarchyInfo: {\n+          topicId: selectedTopic?.id,\n+          subtopicId: selectedSubtopic?.id\n+        }\n+      };\n+      \n+      localStorage.setItem(`lesson_state_${selectedLessonInDialog.id}`, JSON.stringify(fullState));\n+      \n+      // Construct the URL with minimal parameters using Next.js routing\n+      const lessonUrl = `/teacher/lessons/${selectedLessonInDialog.id}`;\n+      const searchParams = new URLSearchParams();\n+      searchParams.set('state', JSON.stringify(urlState));\n+\n+      // Close the dialog first\n+      setDialogOpen(false);\n+\n+      // Use a small delay to ensure dialog is closed before opening new tab\n+      setTimeout(() => {\n+        window.open(`${lessonUrl}?${searchParams.toString()}`, '_blank', 'noopener');\n+      }, 100);\n+\n+    } catch (error) {\n+      console.error('Error in handleStartLesson:', error);\n+    }\n+  };\n+\n   const handleRestartLesson = (lessonId: string, subLessonId: string) => {\n     if (isLocked) return;\n     setDialogOpen(false);\n-    navigate(`/lesson/${lessonId}/${subLessonId}?restart=true`);\n+    router.push(`/lesson/${lessonId}/${subLessonId}?restart=true`);\n   };\n \n   const handleRetry = () => {\n     window.location.reload();\n@@ -1137,58 +1182,9 @@\n             </div>\n \n             <DialogFooter className=\"p-6 border-t bg-accent/5 flex-shrink-0\">\n               <Button\n-                onClick={async (e) => {\n-                  e.preventDefault();\n-                  \n-                  if (!selectedLessonInDialog?.id) {\n-                    console.log('No lesson selected');\n-                    return;\n-                  }\n-\n-                  try {\n-                    console.log('Starting lesson:', selectedLessonInDialog.id);\n-                    \n-                    // Create minimal state object for URL\n-                    const urlState = {\n-                      lessonId: selectedLessonInDialog.id,\n-                      topicId: selectedTopic?.id,\n-                      subtopicId: selectedSubtopic?.id\n-                    };\n-\n-                    // Store full state data in localStorage\n-                    const fullState = {\n-                      lesson: selectedLessonInDialog,\n-                      topic: selectedTopic,\n-                      subtopic: selectedSubtopic,\n-                      hierarchyInfo: {\n-                        topicId: selectedTopic?.id,\n-                        subtopicId: selectedSubtopic?.id\n-                      }\n-                    };\n-                    \n-                    localStorage.setItem(`lesson_state_${selectedLessonInDialog.id}`, JSON.stringify(fullState));\n-                    \n-                    // Construct the URL with minimal parameters using Next.js routing\n-                    const baseUrl = window.location.origin;\n-                    const lessonUrl = `${baseUrl}/teacher/lessons/${selectedLessonInDialog.id}?state=${encodeURIComponent(JSON.stringify(urlState))}`;\n-\n-                    // Close the dialog first\n-                    setDialogOpen(false);\n-\n-                    // Use a small delay to ensure dialog is closed before opening new tab\n-                    setTimeout(() => {\n-                      const newWindow = window.open('about:blank', '_blank');\n-                      if (newWindow) {\n-                        newWindow.location.href = lessonUrl;\n-                      }\n-                    }, 100);\n-\n-                  } catch (error) {\n-                    console.error('Error in handleStartLesson:', error);\n-                  }\n-                }}\n+                onClick={handleStartLessonFromDialog}\n                 className={cn(\n                   \"w-full sm:w-auto transition-all duration-300\",\n                   selectedLessonInDialog ? \"bg-primary hover:bg-primary/90\" : \"\",\n                   \"relative\"\n"
                },
                {
                    "date": 1739191161031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n import { Progress } from \"@/components/ui/progress\";\n import { ArrowRight, BookOpen, Calendar, CheckCircle2, Clock, Lock, Plus, RotateCcw, Unlock, Users, Shield, GraduationCap } from \"lucide-react\";\n import { Badge } from \"@/components/ui/badge\";\n-import Link from \"next/link\";\n+import { Link, useNavigate } from \"react-router-dom\";\n import ClassHeader from \"./ClassHeader\";\n import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from \"@/components/ui/dialog\";\n import { Button } from \"../ui/button\";\n import { Class, ExtendedLesson, SubLesson, ClassStudent, Student, Question, Activity, ExercisePrompt, Lesson, Topic, Subtopic, Grade } from \"@/types\";\n@@ -18,9 +18,8 @@\n import { transformLearningPathData } from \"@/lib/transforms/learningPath\";\n import { motion, AnimatePresence } from \"framer-motion\";\n import { format } from \"date-fns\";\n import { useInView } from 'react-intersection-observer';\n-import { useRouter } from \"next/navigation\";\n \n const MAX_RETRIES = 3;\n const RETRY_DELAY = 1000; // 1 second\n \n@@ -391,9 +390,9 @@\n   schedule: string | null;\n }\n \n export function LearningPathTeacher() {\n-  const router = useRouter();\n+  const navigate = useNavigate();\n   const { logError } = useComponentLogger('LearningPathTeacher');\n   const lessonRefs = useRef<(HTMLDivElement | null)[]>([]);\n   \n   const [lessons, setLessons] = useState<CustomLesson[]>([]);\n@@ -714,19 +713,19 @@\n       };\n       \n       localStorage.setItem(`lesson_state_${lessonId}`, JSON.stringify(fullState));\n       \n-      // Construct the URL with minimal parameters using Next.js routing\n-      const lessonUrl = `/teacher/lessons/${lessonId}`;\n+      // Construct the URL with minimal parameters\n       const searchParams = new URLSearchParams();\n       searchParams.set('state', JSON.stringify(urlState));\n+      const lessonUrl = `/teacher/lessons/${lessonId}?${searchParams.toString()}`;\n \n       // Close the dialog first\n       setDialogOpen(false);\n \n       // Use a small delay to ensure dialog is closed before opening new tab\n       setTimeout(() => {\n-        window.open(`${lessonUrl}?${searchParams.toString()}`, '_blank', 'noopener');\n+        window.open(lessonUrl, '_blank', 'noopener');\n       }, 100);\n \n     } catch (error) {\n       console.error('Error starting lesson:', error);\n@@ -761,19 +760,19 @@\n       };\n       \n       localStorage.setItem(`lesson_state_${selectedLessonInDialog.id}`, JSON.stringify(fullState));\n       \n-      // Construct the URL with minimal parameters using Next.js routing\n-      const lessonUrl = `/teacher/lessons/${selectedLessonInDialog.id}`;\n+      // Construct the URL with minimal parameters\n       const searchParams = new URLSearchParams();\n       searchParams.set('state', JSON.stringify(urlState));\n+      const lessonUrl = `/teacher/lessons/${selectedLessonInDialog.id}?${searchParams.toString()}`;\n \n       // Close the dialog first\n       setDialogOpen(false);\n \n       // Use a small delay to ensure dialog is closed before opening new tab\n       setTimeout(() => {\n-        window.open(`${lessonUrl}?${searchParams.toString()}`, '_blank', 'noopener');\n+        window.open(lessonUrl, '_blank', 'noopener');\n       }, 100);\n \n     } catch (error) {\n       console.error('Error in handleStartLesson:', error);\n@@ -782,9 +781,9 @@\n \n   const handleRestartLesson = (lessonId: string, subLessonId: string) => {\n     if (isLocked) return;\n     setDialogOpen(false);\n-    router.push(`/lesson/${lessonId}/${subLessonId}?restart=true`);\n+    navigate(`/lesson/${lessonId}/${subLessonId}?restart=true`);\n   };\n \n   const handleRetry = () => {\n     window.location.reload();\n"
                },
                {
                    "date": 1739191282241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -716,16 +716,22 @@\n       \n       // Construct the URL with minimal parameters\n       const searchParams = new URLSearchParams();\n       searchParams.set('state', JSON.stringify(urlState));\n-      const lessonUrl = `/teacher/lessons/${lessonId}?${searchParams.toString()}`;\n+      \n+      // Get the base URL from Vite's env or window.location\n+      const baseUrl = import.meta.env.BASE_URL || '';\n+      const lessonUrl = `${window.location.origin}${baseUrl}/#/teacher/lessons/${lessonId}?${searchParams.toString()}`;\n \n       // Close the dialog first\n       setDialogOpen(false);\n \n       // Use a small delay to ensure dialog is closed before opening new tab\n       setTimeout(() => {\n-        window.open(lessonUrl, '_blank', 'noopener');\n+        const newWindow = window.open('about:blank', '_blank');\n+        if (newWindow) {\n+          newWindow.location.href = lessonUrl;\n+        }\n       }, 100);\n \n     } catch (error) {\n       console.error('Error starting lesson:', error);\n@@ -763,16 +769,22 @@\n       \n       // Construct the URL with minimal parameters\n       const searchParams = new URLSearchParams();\n       searchParams.set('state', JSON.stringify(urlState));\n-      const lessonUrl = `/teacher/lessons/${selectedLessonInDialog.id}?${searchParams.toString()}`;\n+      \n+      // Get the base URL from Vite's env or window.location\n+      const baseUrl = import.meta.env.BASE_URL || '';\n+      const lessonUrl = `${window.location.origin}${baseUrl}/#/teacher/lessons/${selectedLessonInDialog.id}?${searchParams.toString()}`;\n \n       // Close the dialog first\n       setDialogOpen(false);\n \n       // Use a small delay to ensure dialog is closed before opening new tab\n       setTimeout(() => {\n-        window.open(lessonUrl, '_blank', 'noopener');\n+        const newWindow = window.open('about:blank', '_blank');\n+        if (newWindow) {\n+          newWindow.location.href = lessonUrl;\n+        }\n       }, 100);\n \n     } catch (error) {\n       console.error('Error in handleStartLesson:', error);\n"
                },
                {
                    "date": 1739191553578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,9 @@\n import { transformLearningPathData } from \"@/lib/transforms/learningPath\";\n import { motion, AnimatePresence } from \"framer-motion\";\n import { format } from \"date-fns\";\n import { useInView } from 'react-intersection-observer';\n+import { useRouter } from \"next/navigation\";\n \n const MAX_RETRIES = 3;\n const RETRY_DELAY = 1000; // 1 second\n \n"
                },
                {
                    "date": 1739194446076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -771,22 +771,13 @@\n       // Construct the URL with minimal parameters\n       const searchParams = new URLSearchParams();\n       searchParams.set('state', JSON.stringify(urlState));\n       \n-      // Get the base URL from Vite's env or window.location\n-      const baseUrl = import.meta.env.BASE_URL || '';\n-      const lessonUrl = `${window.location.origin}${baseUrl}/#/teacher/lessons/${selectedLessonInDialog.id}?${searchParams.toString()}`;\n-\n       // Close the dialog first\n       setDialogOpen(false);\n \n-      // Use a small delay to ensure dialog is closed before opening new tab\n-      setTimeout(() => {\n-        const newWindow = window.open('about:blank', '_blank');\n-        if (newWindow) {\n-          newWindow.location.href = lessonUrl;\n-        }\n-      }, 100);\n+      // Navigate to the lesson page in the same tab\n+      navigate(`/teacher/lessons/${selectedLessonInDialog.id}?${searchParams.toString()}`);\n \n     } catch (error) {\n       console.error('Error in handleStartLesson:', error);\n     }\n"
                },
                {
                    "date": 1739194549530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -771,13 +771,32 @@\n       // Construct the URL with minimal parameters\n       const searchParams = new URLSearchParams();\n       searchParams.set('state', JSON.stringify(urlState));\n       \n+      // Get the base URL from Vite's env or window.location\n+      const baseUrl = import.meta.env.BASE_URL || '';\n+      const lessonUrl = `${window.location.origin}${baseUrl}/#/teacher/lessons/${selectedLessonInDialog.id}?${searchParams.toString()}`;\n+\n       // Close the dialog first\n       setDialogOpen(false);\n \n-      // Navigate to the lesson page in the same tab\n-      navigate(`/teacher/lessons/${selectedLessonInDialog.id}?${searchParams.toString()}`);\n+      // Open in a new popup window with fullscreen\n+      const windowFeatures = 'popup,fullscreen=yes,width=' + window.screen.width + ',height=' + window.screen.height;\n+      const newWindow = window.open(lessonUrl, '_blank', windowFeatures);\n+      \n+      if (newWindow) {\n+        newWindow.focus();\n+        // Add a small delay to ensure the window is loaded before attempting fullscreen\n+        setTimeout(() => {\n+          try {\n+            if (newWindow.document.documentElement.requestFullscreen) {\n+              newWindow.document.documentElement.requestFullscreen();\n+            }\n+          } catch (error) {\n+            console.error('Fullscreen error:', error);\n+          }\n+        }, 1000);\n+      }\n \n     } catch (error) {\n       console.error('Error in handleStartLesson:', error);\n     }\n"
                },
                {
                    "date": 1739196122029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -747,55 +747,28 @@\n       return;\n     }\n \n     try {\n-      // Create minimal state object for URL\n-      const urlState = {\n+      // Only pass the essential IDs as URL parameters\n+      const params = new URLSearchParams({\n         lessonId: selectedLessonInDialog.id,\n-        topicId: selectedTopic?.id,\n-        subtopicId: selectedSubtopic?.id\n-      };\n-\n-      // Store full state data in localStorage\n-      const fullState = {\n-        lesson: selectedLessonInDialog,\n-        topic: selectedTopic,\n-        subtopic: selectedSubtopic,\n-        hierarchyInfo: {\n-          topicId: selectedTopic?.id,\n-          subtopicId: selectedSubtopic?.id\n-        }\n-      };\n+        topicId: selectedTopic?.id || '',\n+        subtopicId: selectedSubtopic?.id || ''\n+      });\n       \n-      localStorage.setItem(`lesson_state_${selectedLessonInDialog.id}`, JSON.stringify(fullState));\n-      \n-      // Construct the URL with minimal parameters\n-      const searchParams = new URLSearchParams();\n-      searchParams.set('state', JSON.stringify(urlState));\n-      \n-      // Get the base URL from Vite's env or window.location\n-      const baseUrl = import.meta.env.BASE_URL || '';\n-      const lessonUrl = `${window.location.origin}${baseUrl}/#/teacher/lessons/${selectedLessonInDialog.id}?${searchParams.toString()}`;\n-\n       // Close the dialog first\n       setDialogOpen(false);\n \n+      // Construct a simpler URL\n+      const baseUrl = import.meta.env.BASE_URL || '';\n+      const lessonUrl = `${window.location.origin}${baseUrl}/#/teacher/lessons/${selectedLessonInDialog.id}?${params.toString()}`;\n+\n       // Open in a new popup window with fullscreen\n       const windowFeatures = 'popup,fullscreen=yes,width=' + window.screen.width + ',height=' + window.screen.height;\n       const newWindow = window.open(lessonUrl, '_blank', windowFeatures);\n       \n       if (newWindow) {\n         newWindow.focus();\n-        // Add a small delay to ensure the window is loaded before attempting fullscreen\n-        setTimeout(() => {\n-          try {\n-            if (newWindow.document.documentElement.requestFullscreen) {\n-              newWindow.document.documentElement.requestFullscreen();\n-            }\n-          } catch (error) {\n-            console.error('Fullscreen error:', error);\n-          }\n-        }, 1000);\n       }\n \n     } catch (error) {\n       console.error('Error in handleStartLesson:', error);\n"
                },
                {
                    "date": 1739196947349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -392,9 +392,9 @@\n }\n \n export function LearningPathTeacher() {\n   const navigate = useNavigate();\n-  const { logError } = useComponentLogger('LearningPathTeacher');\n+  const { logError, forceLog } = useComponentLogger('LearningPathTeacher');\n   const lessonRefs = useRef<(HTMLDivElement | null)[]>([]);\n   \n   const [lessons, setLessons] = useState<CustomLesson[]>([]);\n   const [selectedClass, setSelectedClass] = useState<ExtendedClass | null>(null);\n@@ -747,28 +747,46 @@\n       return;\n     }\n \n     try {\n-      // Only pass the essential IDs as URL parameters\n+      forceLog('Starting lesson with:', {\n+        lessonId: selectedLessonInDialog.id,\n+        topicId: selectedTopic?.id,\n+        subtopicId: selectedSubtopic?.id\n+      });\n+\n+      // Construct URL parameters\n       const params = new URLSearchParams({\n-        lessonId: selectedLessonInDialog.id,\n         topicId: selectedTopic?.id || '',\n         subtopicId: selectedSubtopic?.id || ''\n       });\n       \n       // Close the dialog first\n       setDialogOpen(false);\n \n-      // Construct a simpler URL\n-      const baseUrl = import.meta.env.BASE_URL || '';\n-      const lessonUrl = `${window.location.origin}${baseUrl}/#/teacher/lessons/${selectedLessonInDialog.id}?${params.toString()}`;\n+      // Construct the URL ensuring all parts are properly included\n+      const baseUrl = window.location.origin;\n+      const lessonPath = `/teacher/lessons/${selectedLessonInDialog.id}`;\n+      const fullUrl = `${baseUrl}${lessonPath}?${params.toString()}`;\n \n-      // Open in a new popup window with fullscreen\n-      const windowFeatures = 'popup,fullscreen=yes,width=' + window.screen.width + ',height=' + window.screen.height;\n-      const newWindow = window.open(lessonUrl, '_blank', windowFeatures);\n+      forceLog('Opening lesson with URL:', fullUrl);\n+\n+      // Open in a new window with fullscreen\n+      const windowFeatures = `\n+        popup,\n+        fullscreen=yes,\n+        width=${window.screen.width},\n+        height=${window.screen.height},\n+        left=0,\n+        top=0\n+      `.replace(/\\s+/g, '');\n+\n+      const newWindow = window.open(fullUrl, '_blank', windowFeatures);\n       \n       if (newWindow) {\n         newWindow.focus();\n+      } else {\n+        console.error('Failed to open lesson window');\n       }\n \n     } catch (error) {\n       console.error('Error in handleStartLesson:', error);\n"
                },
                {
                    "date": 1739196963443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -747,9 +747,9 @@\n       return;\n     }\n \n     try {\n-      forceLog('Starting lesson with:', {\n+      console.log('Starting lesson with:', {\n         lessonId: selectedLessonInDialog.id,\n         topicId: selectedTopic?.id,\n         subtopicId: selectedSubtopic?.id\n       });\n@@ -767,9 +767,9 @@\n       const baseUrl = window.location.origin;\n       const lessonPath = `/teacher/lessons/${selectedLessonInDialog.id}`;\n       const fullUrl = `${baseUrl}${lessonPath}?${params.toString()}`;\n \n-      forceLog('Opening lesson with URL:', fullUrl);\n+      console.log('Opening lesson with URL:', fullUrl);\n \n       // Open in a new window with fullscreen\n       const windowFeatures = `\n         popup,\n"
                },
                {
                    "date": 1739208068755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -753,20 +753,30 @@\n         topicId: selectedTopic?.id,\n         subtopicId: selectedSubtopic?.id\n       });\n \n-      // Construct URL parameters\n-      const params = new URLSearchParams({\n-        topicId: selectedTopic?.id || '',\n-        subtopicId: selectedSubtopic?.id || ''\n-      });\n+      // Store minimal state in localStorage\n+      const stateKey = `lesson_state_${selectedLessonInDialog.id}`;\n+      const lessonState = {\n+        lessonId: selectedLessonInDialog.id,\n+        topicId: selectedTopic?.id,\n+        subtopicId: selectedSubtopic?.id,\n+        lesson: selectedLessonInDialog\n+      };\n       \n+      localStorage.setItem(stateKey, JSON.stringify(lessonState));\n+      \n       // Close the dialog first\n       setDialogOpen(false);\n \n       // Construct the URL ensuring all parts are properly included\n       const baseUrl = window.location.origin;\n-      const lessonPath = `/teacher/lessons/${selectedLessonInDialog.id}`;\n+      const lessonPath = `/#/teacher/lessons/${selectedLessonInDialog.id}`;\n+      const params = new URLSearchParams({\n+        topicId: selectedTopic?.id || '',\n+        subtopicId: selectedSubtopic?.id || ''\n+      });\n+      \n       const fullUrl = `${baseUrl}${lessonPath}?${params.toString()}`;\n \n       console.log('Opening lesson with URL:', fullUrl);\n \n"
                },
                {
                    "date": 1739208138140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -392,9 +392,9 @@\n }\n \n export function LearningPathTeacher() {\n   const navigate = useNavigate();\n-  const { logError, forceLog } = useComponentLogger('LearningPathTeacher');\n+  const { logError } = useComponentLogger('LearningPathTeacher');\n   const lessonRefs = useRef<(HTMLDivElement | null)[]>([]);\n   \n   const [lessons, setLessons] = useState<CustomLesson[]>([]);\n   const [selectedClass, setSelectedClass] = useState<ExtendedClass | null>(null);\n@@ -769,9 +769,9 @@\n       setDialogOpen(false);\n \n       // Construct the URL ensuring all parts are properly included\n       const baseUrl = window.location.origin;\n-      const lessonPath = `/#/teacher/lessons/${selectedLessonInDialog.id}`;\n+      const lessonPath = `/app/teacher/lessons/${selectedLessonInDialog.id}`;\n       const params = new URLSearchParams({\n         topicId: selectedTopic?.id || '',\n         subtopicId: selectedSubtopic?.id || ''\n       });\n@@ -780,16 +780,21 @@\n \n       console.log('Opening lesson with URL:', fullUrl);\n \n       // Open in a new window with fullscreen\n-      const windowFeatures = `\n-        popup,\n-        fullscreen=yes,\n-        width=${window.screen.width},\n-        height=${window.screen.height},\n-        left=0,\n-        top=0\n-      `.replace(/\\s+/g, '');\n+      const windowFeatures = [\n+        'popup=yes',\n+        'fullscreen=yes',\n+        `width=${window.screen.width}`,\n+        `height=${window.screen.height}`,\n+        'left=0',\n+        'top=0',\n+        'location=no',\n+        'status=no',\n+        'menubar=no',\n+        'scrollbars=yes',\n+        'toolbar=no'\n+      ].join(',');\n \n       const newWindow = window.open(fullUrl, '_blank', windowFeatures);\n       \n       if (newWindow) {\n"
                },
                {
                    "date": 1739208609856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -753,59 +753,75 @@\n         topicId: selectedTopic?.id,\n         subtopicId: selectedSubtopic?.id\n       });\n \n-      // Store minimal state in localStorage\n+      // Store state in localStorage\n       const stateKey = `lesson_state_${selectedLessonInDialog.id}`;\n       const lessonState = {\n         lessonId: selectedLessonInDialog.id,\n         topicId: selectedTopic?.id,\n         subtopicId: selectedSubtopic?.id,\n-        lesson: selectedLessonInDialog\n+        lesson: selectedLessonInDialog,\n+        topic: selectedTopic,\n+        subtopic: selectedSubtopic\n       };\n       \n       localStorage.setItem(stateKey, JSON.stringify(lessonState));\n       \n       // Close the dialog first\n       setDialogOpen(false);\n \n-      // Construct the URL ensuring all parts are properly included\n+      // Construct the URL with all necessary parts\n       const baseUrl = window.location.origin;\n-      const lessonPath = `/app/teacher/lessons/${selectedLessonInDialog.id}`;\n+      const appPath = '/app/teacher/lessons';\n+      const lessonPath = `${appPath}/${selectedLessonInDialog.id}`;\n       const params = new URLSearchParams({\n         topicId: selectedTopic?.id || '',\n         subtopicId: selectedSubtopic?.id || ''\n       });\n       \n       const fullUrl = `${baseUrl}${lessonPath}?${params.toString()}`;\n+      console.log('Opening lesson URL:', fullUrl);\n \n-      console.log('Opening lesson with URL:', fullUrl);\n-\n-      // Open in a new window with fullscreen\n+      // Configure window features for fullscreen popup\n       const windowFeatures = [\n         'popup=yes',\n         'fullscreen=yes',\n         `width=${window.screen.width}`,\n         `height=${window.screen.height}`,\n         'left=0',\n         'top=0',\n-        'location=no',\n-        'status=no',\n+        'location=yes', // Enable location bar for debugging\n+        'status=yes',   // Enable status bar for debugging\n         'menubar=no',\n         'scrollbars=yes',\n         'toolbar=no'\n       ].join(',');\n \n+      // Open in a new window\n       const newWindow = window.open(fullUrl, '_blank', windowFeatures);\n       \n       if (newWindow) {\n         newWindow.focus();\n+        \n+        // Add a small delay before requesting fullscreen\n+        setTimeout(() => {\n+          try {\n+            if (newWindow.document.documentElement.requestFullscreen) {\n+              newWindow.document.documentElement.requestFullscreen();\n+            }\n+          } catch (error) {\n+            console.error('Failed to request fullscreen:', error);\n+          }\n+        }, 1000);\n       } else {\n-        console.error('Failed to open lesson window');\n+        console.error('Failed to open lesson window - popup might be blocked');\n+        alert('Please allow popups to open the lesson');\n       }\n \n     } catch (error) {\n       console.error('Error in handleStartLesson:', error);\n+      alert('Failed to start lesson. Please try again.');\n     }\n   };\n \n   const handleRestartLesson = (lessonId: string, subLessonId: string) => {\n"
                },
                {
                    "date": 1739209077994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -781,18 +781,17 @@\n       \n       const fullUrl = `${baseUrl}${lessonPath}?${params.toString()}`;\n       console.log('Opening lesson URL:', fullUrl);\n \n-      // Configure window features for fullscreen popup\n+      // Configure window features for popup\n       const windowFeatures = [\n         'popup=yes',\n-        'fullscreen=yes',\n         `width=${window.screen.width}`,\n         `height=${window.screen.height}`,\n         'left=0',\n         'top=0',\n-        'location=yes', // Enable location bar for debugging\n-        'status=yes',   // Enable status bar for debugging\n+        'location=yes',\n+        'status=yes',\n         'menubar=no',\n         'scrollbars=yes',\n         'toolbar=no'\n       ].join(',');\n@@ -801,19 +800,8 @@\n       const newWindow = window.open(fullUrl, '_blank', windowFeatures);\n       \n       if (newWindow) {\n         newWindow.focus();\n-        \n-        // Add a small delay before requesting fullscreen\n-        setTimeout(() => {\n-          try {\n-            if (newWindow.document.documentElement.requestFullscreen) {\n-              newWindow.document.documentElement.requestFullscreen();\n-            }\n-          } catch (error) {\n-            console.error('Failed to request fullscreen:', error);\n-          }\n-        }, 1000);\n       } else {\n         console.error('Failed to open lesson window - popup might be blocked');\n         alert('Please allow popups to open the lesson');\n       }\n@@ -1143,13 +1131,13 @@\n             transition={{ duration: 0.3 }}\n             className=\"flex flex-col h-full\"\n           >\n             <DialogHeader className=\"p-6 pb-4 flex-shrink-0 border-b\">\n-              <DialogTitle className=\"text-2xl flex items-center gap-3\">\n-                <BookOpen className=\"h-6 w-6 text-primary\" />\n-                {selectedSubtopic?.title}\n-              </DialogTitle>\n-              <DialogDescription>\n+              <div className=\"flex flex-col gap-2\">\n+                <DialogTitle className=\"text-2xl flex items-center gap-3\">\n+                  <BookOpen className=\"h-6 w-6 text-primary\" />\n+                  {selectedSubtopic?.title}\n+                </DialogTitle>\n                 <div className=\"text-base font-medium text-foreground/90\">{selectedTopic?.title}</div>\n                 <div className=\"flex items-center gap-4 mt-2 text-sm\">\n                   <div className=\"flex items-center gap-1\">\n                     <Clock className=\"h-4 w-4\" />\n@@ -1159,9 +1147,9 @@\n                     <BookOpen className=\"h-4 w-4\" />\n                     <span>{selectedSubtopic?.lessons?.length || 0} Lessons</span>\n                   </div>\n                 </div>\n-              </DialogDescription>\n+              </div>\n             </DialogHeader>\n \n             <div className=\"flex-1 overflow-y-auto\">\n               <div className=\"p-6 space-y-4\">\n"
                },
                {
                    "date": 1739210209892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1136,10 +1136,12 @@\n                 <DialogTitle className=\"text-2xl flex items-center gap-3\">\n                   <BookOpen className=\"h-6 w-6 text-primary\" />\n                   {selectedSubtopic?.title}\n                 </DialogTitle>\n-                <div className=\"text-base font-medium text-foreground/90\">{selectedTopic?.title}</div>\n-                <div className=\"flex items-center gap-4 mt-2 text-sm\">\n+                <DialogDescription className=\"text-base font-medium text-foreground/90\">\n+                  {selectedTopic?.title}\n+                </DialogDescription>\n+                <div className=\"flex items-center gap-4 mt-2 text-sm text-muted-foreground\">\n                   <div className=\"flex items-center gap-1\">\n                     <Clock className=\"h-4 w-4\" />\n                     <span>{selectedSubtopic?.duration || 15} minutes</span>\n                   </div>\n"
                },
                {
                    "date": 1739211755011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -771,10 +771,9 @@\n       setDialogOpen(false);\n \n       // Construct the URL with all necessary parts\n       const baseUrl = window.location.origin;\n-      const appPath = '/app/teacher/lessons';\n-      const lessonPath = `${appPath}/${selectedLessonInDialog.id}`;\n+      const lessonPath = `/teacher/lessons/${selectedLessonInDialog.id}`;\n       const params = new URLSearchParams({\n         topicId: selectedTopic?.id || '',\n         subtopicId: selectedSubtopic?.id || ''\n       });\n"
                },
                {
                    "date": 1739212021520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -742,45 +742,48 @@\n   const handleStartLessonFromDialog = async (e: React.MouseEvent) => {\n     e.preventDefault();\n     \n     if (!selectedLessonInDialog?.id) {\n-      console.log('No lesson selected');\n+      console.log('[StartLesson] No lesson selected');\n       return;\n     }\n \n     try {\n-      console.log('Starting lesson with:', {\n+      console.log('[StartLesson] Starting lesson with:', {\n         lessonId: selectedLessonInDialog.id,\n         topicId: selectedTopic?.id,\n-        subtopicId: selectedSubtopic?.id\n+        subtopicId: selectedSubtopic?.id,\n+        timestamp: new Date().toISOString()\n       });\n \n       // Store state in localStorage\n       const stateKey = `lesson_state_${selectedLessonInDialog.id}`;\n       const lessonState = {\n-        lessonId: selectedLessonInDialog.id,\n-        topicId: selectedTopic?.id,\n-        subtopicId: selectedSubtopic?.id,\n         lesson: selectedLessonInDialog,\n         topic: selectedTopic,\n-        subtopic: selectedSubtopic\n+        subtopic: selectedSubtopic,\n+        timestamp: new Date().toISOString(),\n+        source: 'learningpathTeacher'\n       };\n       \n+      console.log('[StartLesson] Saving state to localStorage:', { stateKey, state: lessonState });\n       localStorage.setItem(stateKey, JSON.stringify(lessonState));\n       \n       // Close the dialog first\n+      console.log('[StartLesson] Closing dialog');\n       setDialogOpen(false);\n \n       // Construct the URL with all necessary parts\n       const baseUrl = window.location.origin;\n       const lessonPath = `/teacher/lessons/${selectedLessonInDialog.id}`;\n       const params = new URLSearchParams({\n         topicId: selectedTopic?.id || '',\n-        subtopicId: selectedSubtopic?.id || ''\n+        subtopicId: selectedSubtopic?.id || '',\n+        ts: new Date().getTime().toString() // Add timestamp to prevent caching\n       });\n       \n       const fullUrl = `${baseUrl}${lessonPath}?${params.toString()}`;\n-      console.log('Opening lesson URL:', fullUrl);\n+      console.log('[StartLesson] Opening lesson URL:', fullUrl);\n \n       // Configure window features for popup\n       const windowFeatures = [\n         'popup=yes',\n@@ -794,20 +797,34 @@\n         'scrollbars=yes',\n         'toolbar=no'\n       ].join(',');\n \n+      console.log('[StartLesson] Window features:', windowFeatures);\n+\n       // Open in a new window\n       const newWindow = window.open(fullUrl, '_blank', windowFeatures);\n       \n       if (newWindow) {\n+        console.log('[StartLesson] New window opened successfully');\n         newWindow.focus();\n+        \n+        // Add event listener for window close\n+        const checkWindow = setInterval(() => {\n+          if (newWindow.closed) {\n+            console.log('[StartLesson] Lesson window was closed');\n+            clearInterval(checkWindow);\n+            // Clean up localStorage\n+            localStorage.removeItem(stateKey);\n+          }\n+        }, 1000);\n+\n       } else {\n-        console.error('Failed to open lesson window - popup might be blocked');\n+        console.error('[StartLesson] Failed to open lesson window - popup might be blocked');\n         alert('Please allow popups to open the lesson');\n       }\n \n     } catch (error) {\n-      console.error('Error in handleStartLesson:', error);\n+      console.error('[StartLesson] Error in handleStartLesson:', error);\n       alert('Failed to start lesson. Please try again.');\n     }\n   };\n \n"
                },
                {
                    "date": 1739212235957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -767,19 +767,29 @@\n       \n       console.log('[StartLesson] Saving state to localStorage:', { stateKey, state: lessonState });\n       localStorage.setItem(stateKey, JSON.stringify(lessonState));\n       \n+      // Store auth state\n+      const { data: { session } } = await supabase.auth.getSession();\n+      if (session) {\n+        localStorage.setItem('lesson_auth_state', JSON.stringify({\n+          timestamp: new Date().toISOString(),\n+          session: session\n+        }));\n+      }\n+      \n       // Close the dialog first\n       console.log('[StartLesson] Closing dialog');\n       setDialogOpen(false);\n \n       // Construct the URL with all necessary parts\n       const baseUrl = window.location.origin;\n-      const lessonPath = `/teacher/lessons/${selectedLessonInDialog.id}`;\n+      const lessonPath = `/app/teacher/lessons/${selectedLessonInDialog.id}`;\n       const params = new URLSearchParams({\n         topicId: selectedTopic?.id || '',\n         subtopicId: selectedSubtopic?.id || '',\n-        ts: new Date().getTime().toString() // Add timestamp to prevent caching\n+        ts: new Date().getTime().toString(),\n+        auth: 'true'\n       });\n       \n       const fullUrl = `${baseUrl}${lessonPath}?${params.toString()}`;\n       console.log('[StartLesson] Opening lesson URL:', fullUrl);\n@@ -813,8 +823,9 @@\n             console.log('[StartLesson] Lesson window was closed');\n             clearInterval(checkWindow);\n             // Clean up localStorage\n             localStorage.removeItem(stateKey);\n+            localStorage.removeItem('lesson_auth_state');\n           }\n         }, 1000);\n \n       } else {\n"
                },
                {
                    "date": 1739215152767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -770,12 +770,13 @@\n       \n       // Store auth state\n       const { data: { session } } = await supabase.auth.getSession();\n       if (session) {\n-        localStorage.setItem('lesson_auth_state', JSON.stringify({\n+        const authState = {\n           timestamp: new Date().toISOString(),\n           session: session\n-        }));\n+        };\n+        localStorage.setItem('lesson_auth_state', JSON.stringify(authState));\n       }\n       \n       // Close the dialog first\n       console.log('[StartLesson] Closing dialog');\n@@ -787,9 +788,10 @@\n       const params = new URLSearchParams({\n         topicId: selectedTopic?.id || '',\n         subtopicId: selectedSubtopic?.id || '',\n         ts: new Date().getTime().toString(),\n-        auth: 'true'\n+        auth: 'true',\n+        norefresh: 'true' // Add this to prevent automatic refreshes\n       });\n       \n       const fullUrl = `${baseUrl}${lessonPath}?${params.toString()}`;\n       console.log('[StartLesson] Opening lesson URL:', fullUrl);\n"
                },
                {
                    "date": 1739215585007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -754,30 +754,49 @@\n         subtopicId: selectedSubtopic?.id,\n         timestamp: new Date().toISOString()\n       });\n \n-      // Store state in localStorage\n+      // Get current auth session first\n+      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\n+      if (sessionError) {\n+        throw new Error(`Auth session error: ${sessionError.message}`);\n+      }\n+      if (!session) {\n+        throw new Error('No active session found');\n+      }\n+\n+      // Store enhanced state in localStorage\n       const stateKey = `lesson_state_${selectedLessonInDialog.id}`;\n       const lessonState = {\n         lesson: selectedLessonInDialog,\n         topic: selectedTopic,\n         subtopic: selectedSubtopic,\n         timestamp: new Date().toISOString(),\n-        source: 'learningpathTeacher'\n+        source: 'learningpathTeacher',\n+        auth: {\n+          session: session,\n+          accessToken: session.access_token,\n+          refreshToken: session.refresh_token,\n+          expiresAt: session.expires_at\n+        }\n       };\n       \n-      console.log('[StartLesson] Saving state to localStorage:', { stateKey, state: lessonState });\n+      console.log('[StartLesson] Saving state to localStorage:', { \n+        stateKey, \n+        hasSession: !!session,\n+        sessionExpiry: new Date(session.expires_at * 1000).toISOString()\n+      });\n       localStorage.setItem(stateKey, JSON.stringify(lessonState));\n       \n-      // Store auth state\n-      const { data: { session } } = await supabase.auth.getSession();\n-      if (session) {\n-        const authState = {\n-          timestamp: new Date().toISOString(),\n-          session: session\n-        };\n-        localStorage.setItem('lesson_auth_state', JSON.stringify(authState));\n-      }\n+      // Store auth state separately\n+      const authState = {\n+        timestamp: new Date().toISOString(),\n+        session: session,\n+        accessToken: session.access_token,\n+        refreshToken: session.refresh_token,\n+        expiresAt: session.expires_at\n+      };\n+      localStorage.setItem('lesson_auth_state', JSON.stringify(authState));\n       \n       // Close the dialog first\n       console.log('[StartLesson] Closing dialog');\n       setDialogOpen(false);\n@@ -789,9 +808,10 @@\n         topicId: selectedTopic?.id || '',\n         subtopicId: selectedSubtopic?.id || '',\n         ts: new Date().getTime().toString(),\n         auth: 'true',\n-        norefresh: 'true' // Add this to prevent automatic refreshes\n+        norefresh: 'true',\n+        sessionId: session.access_token.slice(-8) // Add a session identifier\n       });\n       \n       const fullUrl = `${baseUrl}${lessonPath}?${params.toString()}`;\n       console.log('[StartLesson] Opening lesson URL:', fullUrl);\n@@ -816,11 +836,21 @@\n       const newWindow = window.open(fullUrl, '_blank', windowFeatures);\n       \n       if (newWindow) {\n         console.log('[StartLesson] New window opened successfully');\n-        newWindow.focus();\n         \n-        // Add event listener for window close\n+        // Add message listener for the new window\n+        window.addEventListener('message', (event) => {\n+          if (event.data.type === 'LESSON_WINDOW_READY') {\n+            console.log('[StartLesson] Lesson window ready, sending auth state');\n+            newWindow.postMessage({ \n+              type: 'AUTH_STATE',\n+              payload: authState\n+            }, '*');\n+          }\n+        });\n+\n+        // Monitor window state\n         const checkWindow = setInterval(() => {\n           if (newWindow.closed) {\n             console.log('[StartLesson] Lesson window was closed');\n             clearInterval(checkWindow);\n"
                },
                {
                    "date": 1739216141368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -747,81 +747,80 @@\n       return;\n     }\n \n     try {\n-      console.log('[StartLesson] Starting lesson with:', {\n-        lessonId: selectedLessonInDialog.id,\n-        topicId: selectedTopic?.id,\n-        subtopicId: selectedSubtopic?.id,\n-        timestamp: new Date().toISOString()\n-      });\n-\n       // Get current auth session first\n       const { data: { session }, error: sessionError } = await supabase.auth.getSession();\n-      if (sessionError) {\n-        throw new Error(`Auth session error: ${sessionError.message}`);\n+      if (sessionError || !session) {\n+        throw new Error(sessionError?.message || 'No active session found');\n       }\n-      if (!session) {\n-        throw new Error('No active session found');\n-      }\n \n-      // Store enhanced state in localStorage\n-      const stateKey = `lesson_state_${selectedLessonInDialog.id}`;\n+      // Generate unique keys for this lesson instance\n+      const instanceId = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n+      const stateKey = `lesson_state_${selectedLessonInDialog.id}_${instanceId}`;\n+      const authStateKey = `lesson_auth_${instanceId}`;\n+\n+      // Create a comprehensive auth state\n+      const authState = {\n+        instanceId,\n+        timestamp: new Date().toISOString(),\n+        session: {\n+          access_token: session.access_token,\n+          refresh_token: session.refresh_token,\n+          expires_at: session.expires_at,\n+          provider_token: session.provider_token,\n+          provider_refresh_token: session.provider_refresh_token\n+        },\n+        user: {\n+          id: session.user.id,\n+          email: session.user.email,\n+          role: session.user.role,\n+          app_metadata: session.user.app_metadata,\n+          user_metadata: session.user.user_metadata\n+        }\n+      };\n+\n+      // Store auth state\n+      localStorage.setItem(authStateKey, JSON.stringify(authState));\n+\n+      // Store lesson state\n       const lessonState = {\n+        instanceId,\n         lesson: selectedLessonInDialog,\n         topic: selectedTopic,\n         subtopic: selectedSubtopic,\n         timestamp: new Date().toISOString(),\n-        source: 'learningpathTeacher',\n-        auth: {\n-          session: session,\n-          accessToken: session.access_token,\n-          refreshToken: session.refresh_token,\n-          expiresAt: session.expires_at\n-        }\n+        authStateKey // Reference to auth state\n       };\n       \n-      console.log('[StartLesson] Saving state to localStorage:', { \n-        stateKey, \n-        hasSession: !!session,\n-        sessionExpiry: new Date(session.expires_at * 1000).toISOString()\n-      });\n       localStorage.setItem(stateKey, JSON.stringify(lessonState));\n       \n-      // Store auth state separately\n-      const authState = {\n-        timestamp: new Date().toISOString(),\n-        session: session,\n-        accessToken: session.access_token,\n-        refreshToken: session.refresh_token,\n-        expiresAt: session.expires_at\n-      };\n-      localStorage.setItem('lesson_auth_state', JSON.stringify(authState));\n-      \n-      // Close the dialog first\n-      console.log('[StartLesson] Closing dialog');\n+      // Close dialog before opening new window\n       setDialogOpen(false);\n+      await new Promise(resolve => setTimeout(resolve, 100)); // Small delay\n \n-      // Construct the URL with all necessary parts\n+      // Construct URL with instance identifiers\n       const baseUrl = window.location.origin;\n       const lessonPath = `/app/teacher/lessons/${selectedLessonInDialog.id}`;\n       const params = new URLSearchParams({\n+        instanceId,\n+        stateKey,\n+        authStateKey,\n         topicId: selectedTopic?.id || '',\n         subtopicId: selectedSubtopic?.id || '',\n-        ts: new Date().getTime().toString(),\n-        auth: 'true',\n-        norefresh: 'true',\n-        sessionId: session.access_token.slice(-8) // Add a session identifier\n+        ts: Date.now().toString()\n       });\n       \n       const fullUrl = `${baseUrl}${lessonPath}?${params.toString()}`;\n       console.log('[StartLesson] Opening lesson URL:', fullUrl);\n \n-      // Configure window features for popup\n+      // Open new window with specific size\n+      const screenWidth = window.screen.width;\n+      const screenHeight = window.screen.height;\n       const windowFeatures = [\n         'popup=yes',\n-        `width=${window.screen.width}`,\n-        `height=${window.screen.height}`,\n+        `width=${screenWidth}`,\n+        `height=${screenHeight}`,\n         'left=0',\n         'top=0',\n         'location=yes',\n         'status=yes',\n@@ -829,46 +828,30 @@\n         'scrollbars=yes',\n         'toolbar=no'\n       ].join(',');\n \n-      console.log('[StartLesson] Window features:', windowFeatures);\n-\n-      // Open in a new window\n-      const newWindow = window.open(fullUrl, '_blank', windowFeatures);\n+      const newWindow = window.open(fullUrl, `lesson_${instanceId}`, windowFeatures);\n       \n       if (newWindow) {\n         console.log('[StartLesson] New window opened successfully');\n         \n-        // Add message listener for the new window\n-        window.addEventListener('message', (event) => {\n-          if (event.data.type === 'LESSON_WINDOW_READY') {\n-            console.log('[StartLesson] Lesson window ready, sending auth state');\n-            newWindow.postMessage({ \n-              type: 'AUTH_STATE',\n-              payload: authState\n-            }, '*');\n-          }\n-        });\n-\n-        // Monitor window state\n+        // Monitor window and clean up when closed\n         const checkWindow = setInterval(() => {\n           if (newWindow.closed) {\n-            console.log('[StartLesson] Lesson window was closed');\n+            console.log('[StartLesson] Lesson window closed, cleaning up');\n             clearInterval(checkWindow);\n-            // Clean up localStorage\n             localStorage.removeItem(stateKey);\n-            localStorage.removeItem('lesson_auth_state');\n+            localStorage.removeItem(authStateKey);\n           }\n         }, 1000);\n \n       } else {\n-        console.error('[StartLesson] Failed to open lesson window - popup might be blocked');\n-        alert('Please allow popups to open the lesson');\n+        throw new Error('Popup blocked - please allow popups to open the lesson');\n       }\n \n     } catch (error) {\n-      console.error('[StartLesson] Error in handleStartLesson:', error);\n-      alert('Failed to start lesson. Please try again.');\n+      console.error('[StartLesson] Error:', error);\n+      alert(error instanceof Error ? error.message : 'Failed to start lesson');\n     }\n   };\n \n   const handleRestartLesson = (lessonId: string, subLessonId: string) => {\n"
                },
                {
                    "date": 1739216459393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -758,29 +758,27 @@\n       const instanceId = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n       const stateKey = `lesson_state_${selectedLessonInDialog.id}_${instanceId}`;\n       const authStateKey = `lesson_auth_${instanceId}`;\n \n-      // Create a comprehensive auth state\n+      // Create a comprehensive auth state with session clone\n       const authState = {\n         instanceId,\n         timestamp: new Date().toISOString(),\n         session: {\n           access_token: session.access_token,\n           refresh_token: session.refresh_token,\n-          expires_at: session.expires_at,\n+          expires_at: session.expires_at || (Math.floor(Date.now() / 1000) + 3600),\n           provider_token: session.provider_token,\n-          provider_refresh_token: session.provider_refresh_token\n-        },\n-        user: {\n-          id: session.user.id,\n-          email: session.user.email,\n-          role: session.user.role,\n-          app_metadata: session.user.app_metadata,\n-          user_metadata: session.user.user_metadata\n+          provider_refresh_token: session.provider_refresh_token,\n+          user: {\n+            ...session.user,\n+            app_metadata: { ...session.user.app_metadata },\n+            user_metadata: { ...session.user.user_metadata }\n+          }\n         }\n       };\n \n-      // Store auth state\n+      // Store auth state before anything else\n       localStorage.setItem(authStateKey, JSON.stringify(authState));\n \n       // Store lesson state\n       const lessonState = {\n@@ -795,9 +793,9 @@\n       localStorage.setItem(stateKey, JSON.stringify(lessonState));\n       \n       // Close dialog before opening new window\n       setDialogOpen(false);\n-      await new Promise(resolve => setTimeout(resolve, 100)); // Small delay\n+      await new Promise(resolve => setTimeout(resolve, 100));\n \n       // Construct URL with instance identifiers\n       const baseUrl = window.location.origin;\n       const lessonPath = `/app/teacher/lessons/${selectedLessonInDialog.id}`;\n@@ -806,9 +804,10 @@\n         stateKey,\n         authStateKey,\n         topicId: selectedTopic?.id || '',\n         subtopicId: selectedSubtopic?.id || '',\n-        ts: Date.now().toString()\n+        ts: Date.now().toString(),\n+        preserveAuth: 'true' // Add this flag\n       });\n       \n       const fullUrl = `${baseUrl}${lessonPath}?${params.toString()}`;\n       console.log('[StartLesson] Opening lesson URL:', fullUrl);\n@@ -833,8 +832,19 @@\n       \n       if (newWindow) {\n         console.log('[StartLesson] New window opened successfully');\n         \n+        // Set up message listener for the new window\n+        window.addEventListener('message', async function authMessageHandler(event) {\n+          if (event.data.type === 'LESSON_WINDOW_READY') {\n+            console.log('[StartLesson] Lesson window ready, sending auth state');\n+            newWindow.postMessage({ \n+              type: 'AUTH_STATE',\n+              payload: authState\n+            }, '*');\n+          }\n+        });\n+        \n         // Monitor window and clean up when closed\n         const checkWindow = setInterval(() => {\n           if (newWindow.closed) {\n             console.log('[StartLesson] Lesson window closed, cleaning up');\n"
                },
                {
                    "date": 1739305650941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -977,9 +977,9 @@\n     setIsLocked(!isLocked);\n   };\n \n   return (\n-    <div className=\"w-full max-w-6xl mx-auto px-4 sm:px-6 space-y-6\">\n+    <div className=\"w-full max-w-5xl mx-auto px-4 sm:px-6 space-y-6\">\n       {/* Header with Date and Time */}\n       <div className=\"flex justify-between items-center\">\n         <div>\n           <h1 className=\"text-2xl font-bold text-gray-900\">Learning Path</h1>\n"
                },
                {
                    "date": 1739306257938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1048,8 +1048,31 @@\n                     </CardHeader>\n \n                     <CardContent className=\"p-6\">\n                       <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n+                        {topic.subtopics?.map((subtopic) => (\n+                          <Card\n+                            key={subtopic.id}\n+                            className={cn(\n+                              \"cursor-pointer transition-all duration-200\",\n+                              \"hover:shadow-md hover:border-primary/50\",\n+                              !isUnlocked && \"pointer-events-none\"\n+                            )}\n+                            onClick={() => handleSubtopicClick(subtopic, topic)}\n+                          >\n+                            <CardContent className=\"p-4\">\n+                              <div className=\"flex flex-col gap-3\">\n+                                <div className=\"flex items-start justify-between\">\n+                                  <div>\n+                                    <h3 className=\"font-semibold text-lg\">\n+                                      {subtopic.title}\n+                                    </h3>\n+                                    <p className=\"text-sm text-muted-foreground\">\n+                                      Ready to start\n+                                    </p>\n+                                  </div>\n+                                  {!isUnlocked && (\n+                                    <Lock className=\"h-5 w-5 text-muted-foreground\" />\n                   <CardContent className=\"p-6\">\n                     <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                       {topic.subtopics?.map((subtopic) => (\n                         <Card\n"
                },
                {
                    "date": 1739346459077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -503,18 +503,71 @@\n       logError(error);\n     }\n   }, [isLocked, logError]);\n \n-  // Fetch initial data\n+  // Use React Query for data fetching\n   useEffect(() => {\n-    const fetchInitialData = async () => {\n+    const initializeData = async () => {\n       try {\n         setIsLoading(true);\n         setFetchError(null);\n+        \n+        const data = await fetchInitialData();\n+        // Process data and update state...\n+        \n+      } catch (error) {\n+        const errorMessage = error instanceof Error ? error.message : 'An unexpected error occurred';\n+        setFetchError(errorMessage);\n+        logger.error('Failed to initialize learning path', { error });\n+      } finally {\n+        setIsLoading(false);\n+      }\n+    };\n \n-        const { data: { session } } = await supabase.auth.getSession();\n-        if (!session?.user) throw new Error('No authenticated user');\n+    initializeData();\n+  }, [fetchInitialData]);\n \n+  useEffect(() => {\n+    if (selectedGrade?.topics) {\n+      const processed: TopicWithHierarchy[] = selectedGrade.topics.map((topic: TopicWithHierarchy, index: number) => ({\n+        ...topic,\n+        color: useTopicColor(index),\n+        subtopics: topic.subtopics.map((subtopic: SubtopicWithHierarchy, subIndex: number) => ({\n+          ...subtopic,\n+          color: useTopicColor(subIndex + selectedGrade.topics.length)\n+        }))\n+      }));\n+      \n+      setProcessedTopics(processed);\n+      if (processed.length > 0 && !selectedTopic) {\n+        setSelectedTopic(processed[0]);\n+      }\n+    }\n+  }, [selectedGrade?.topics, selectedTopic]);\n+\n+  const handleClassChange = async (classData: ExtendedClass) => {\n+    if (isLocked) return;\n+    setSelectedClass(classData);\n+    \n+    try {\n+      const { data: lessonsData, error: lessonsError } = await supabase\n+        .from('lessons')\n+        .select(`\n+          *,\n+          topic:topics(title),\n+          subtopic:subtopics(title)\n+        `)\n+        .eq('grade_id', classData.grade_id)\n+        .order('order_index', { ascending: true });\n+\n+      if (lessonsError) {\n+        throw new Error('Error fetching lessons: ' + lessonsError.message);\n+      }\n+\n+      const customLessons: CustomLesson[] = lessonsData.map((lesson, index) => ({\n+        ...lesson,\n+        id: String(lesson.id),\n+        status: lesson.status as 'draft' | 'published' | undefined,\n         // 1. First get user's assigned schools\n         const { data: userSchoolsData, error: schoolsError } = await supabase\n           .from('user_schools')\n           .select('school_id')\n"
                }
            ],
            "date": 1739130215476,
            "name": "Commit-0",
            "content": "\"use client\";\n\nimport { useEffect, useRef, useState, memo, useCallback, useMemo } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {  ArrowRight, BookOpen, Calendar, CheckCircle2, Clock, Lock, Plus, RotateCcw, Unlock, Users, Shield, GraduationCap, } from \"lucide-react\";\nimport { useNavigate, Link } from \"react-router-dom\";\nimport ClassHeader from \"./ClassHeader\";\nimport {  Dialog,  DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, } from \"@/components/ui/dialog\";\nimport { Button } from \"../ui/button\";\nimport { Class, ExtendedLesson, SubLesson, ClassStudent, Student } from \"@/types\";\nimport { cn } from \"@/lib/utils\";\nimport { supabase } from \"@/lib/supabase\";\nimport type { Database } from \"@/types/supabase\";\nimport { useComponentLogger } from \"@/hooks/useComponentLogger\";\nimport type { PostgrestResponse, PostgrestError, SupabaseClient } from '@supabase/supabase-js';\nimport { transformLearningPathData } from \"@/lib/transforms/learningPath\";\n\nconst MAX_RETRIES = 3;\nconst RETRY_DELAY = 1000; // 1 second\n\n// Helper functions defined outside the component\nconst delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\nasync function fetchWithRetry<T>(\n  fetchFn: () => Promise<{ data: T[] | null; error: PostgrestError | null }>,\n  retries = MAX_RETRIES\n): Promise<T[]> {\n  let lastError: Error | null = null;\n\n  for (let attempt = 0; attempt < retries; attempt++) {\n    try {\n      const { data, error } = await fetchFn();\n      \n      if (error) {\n        throw new Error(error.message || 'Database operation failed');\n      }\n      \n      if (!data) {\n        throw new Error('No data returned from the database');\n      }\n\n      return data;\n    } catch (error) {\n      lastError = error instanceof Error ? error : new Error(String(error));\n      \n      if (attempt === retries - 1) {\n        throw lastError;\n      }\n      \n      await delay(RETRY_DELAY * Math.pow(2, attempt));\n    }\n  }\n\n  throw lastError || new Error('Failed to fetch data after retries');\n}\n\ntype Tables = Database['public']['Tables'];\ntype DbClass = Tables['classes']['Row'];\ntype DbLesson = Tables['lessons']['Row'] & {\n  topic?: { title: string };\n  subtopic?: { title: string };\n};\ntype DbStudent = Tables['students']['Row'];\ntype DbClassStudent = Tables['class_students']['Row'] & {\n  student: DbStudent;\n};\n\ninterface ExtendedClass extends Omit<DbClass, 'id'> {\n  id: string;\n  students: number;\n}\n\ninterface CustomLesson extends Omit<DbLesson, 'id' | 'status'> {\n  id: string;\n  status?: 'draft' | 'published';\n  color: string;\n  unlocked: boolean;\n  completed: boolean;\n  lessonNumber: string;\n  totalTopics: string;\n  difficulty: string;\n  customSubLessons: CustomSubLesson[];\n}\n\ninterface CustomSubLesson {\n  id: string;\n  title: string;\n  unlocked: boolean;\n  completed: boolean;\n  duration: number;\n  description: string;\n}\n\ninterface ClassHeaderProps {\n  classes: ExtendedClass[];\n  selectedClass: ExtendedClass | null;\n  onClassChange: (classData: ExtendedClass) => void;\n}\n\ninterface ClassCardProps {\n  classData: ExtendedClass;\n  isSelected: boolean;\n  onClassChange: (classData: ExtendedClass) => Promise<void>;\n  logError: (error: unknown) => void;\n}\n\nconst ClassCard = memo(({ \n  classData, \n  isSelected, \n  onClassChange, \n  logError \n}: ClassCardProps): JSX.Element => {\n  const handleClick = useCallback(async () => {\n    try {\n      await onClassChange(classData);\n    } catch (error) {\n      logError(error);\n    }\n  }, [classData, onClassChange, logError]);\n\n  const cardClassName = useMemo(() => \n    cn(\n      \"flex-shrink-0 cursor-pointer p-4\",\n      isSelected ? \"border-primary\" : \"border-transparent\"\n    ),\n    [isSelected]\n  );\n\n  return (\n    <Card\n      key={classData.id}\n      className={cardClassName}\n      onClick={handleClick}\n    >\n      <div className=\"flex items-center gap-2\">\n        <GraduationCap \n          className=\"h-5 w-5 text-primary\" \n        />\n        <span className=\"font-medium\">{classData.name}</span>\n      </div>\n      <div className=\"mt-2 text-sm text-gray-500\">\n        <div className=\"flex items-center gap-2\">\n          <Users className=\"h-4 w-4\" />\n          <span>{classData.students} Students</span>\n        </div>\n      </div>\n    </Card>\n  );\n});\n\nClassCard.displayName = 'ClassCard';\n\nexport function LearningPathTeacher() {\n  const navigate = useNavigate();\n  const { logError } = useComponentLogger('LearningPathTeacher');\n  const lessonRefs = useRef<(HTMLDivElement | null)[]>([]);\n  \n  const [lessons, setLessons] = useState<CustomLesson[]>([]);\n  const [selectedClass, setSelectedClass] = useState<ExtendedClass | null>(null);\n  const [classes, setClasses] = useState<ExtendedClass[]>([]);\n  const [selectedLesson, setSelectedLesson] = useState<CustomLesson | null>(null);\n  const [selectedSubLesson, setSelectedSubLesson] = useState<CustomSubLesson | null>(null);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [currentLesson, setCurrentLesson] = useState<CustomLesson | null>(null);\n  const [isLocked, setIsLocked] = useState(true);\n  const [classStudents, setClassStudents] = useState<DbStudent[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [fetchError, setFetchError] = useState<string | null>(null);\n  const [grades, setGrades] = useState<DbClass[]>([]);\n  const [topics, setTopics] = useState<DbClass[]>([]);\n  const [subtopics, setSubtopics] = useState<DbClass[]>([]);\n  const [selectedGrade, setSelectedGrade] = useState<DbClass | null>(null);\n  const [selectedTopic, setSelectedTopic] = useState<DbClass | null>(null);\n  const [selectedSubtopic, setSelectedSubtopic] = useState<DbClass | null>(null);\n\n  // Load lock state from localStorage\n  useEffect(() => {\n    try {\n      const savedLockState = localStorage.getItem('myCoursesTabLocked');\n      if (savedLockState !== null) {\n        setIsLocked(JSON.parse(savedLockState));\n      }\n    } catch (error) {\n      logError(error);\n    }\n  }, [logError]);\n\n  // Save lock state to localStorage\n  useEffect(() => {\n    try {\n      localStorage.setItem('myCoursesTabLocked', JSON.stringify(isLocked));\n    } catch (error) {\n      logError(error);\n    }\n  }, [isLocked, logError]);\n\n  // Fetch initial data\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        setIsLoading(true);\n        setFetchError(null);\n\n        const { data: classesData, error: classesError } = await supabase\n          .from('classes')\n          .select('*')\n          .order('created_at', { ascending: false });\n\n        if (classesError) {\n          throw new Error('Error fetching classes: ' + classesError.message);\n        }\n\n        if (!classesData || classesData.length === 0) {\n          throw new Error('No classes found');\n        }\n\n        const extendedClasses: ExtendedClass[] = classesData.map(cls => ({\n          ...cls,\n          id: String(cls.id),\n          students: 0 // Will be updated with actual count\n        }));\n\n        setClasses(extendedClasses);\n        setSelectedClass(extendedClasses[0]);\n\n        const { data: lessonsData, error: lessonsError } = await supabase\n          .from('lessons')\n          .select(`\n            *,\n            topic:topics(title),\n            subtopic:subtopics(title)\n          `)\n          .eq('grade_id', classesData[0].grade_id)\n          .order('order_index', { ascending: true });\n\n        if (lessonsError) {\n          throw new Error('Error fetching lessons: ' + lessonsError.message);\n        }\n\n        const customLessons: CustomLesson[] = lessonsData.map((lesson, index) => ({\n          ...lesson,\n          id: String(lesson.id),\n          status: lesson.status as 'draft' | 'published' | undefined,\n          color: getColorForIndex(index),\n          unlocked: index === 0,\n          completed: false,\n          lessonNumber: `${index + 1}`,\n          totalTopics: '5',\n          difficulty: 'Beginner',\n          customSubLessons: [\n            {\n              id: String(lesson.id),\n              title: lesson.title,\n              unlocked: index === 0,\n              completed: false,\n              duration: lesson.duration || 15,\n              description: lesson.description || ''\n            }\n          ]\n        }));\n\n        setLessons(customLessons);\n        if (customLessons.length > 0) {\n          setSelectedLesson(customLessons[0]);\n        }\n\n        const { data: studentsData, error: studentsError } = await supabase\n          .from('class_students')\n          .select(`\n            *,\n            student:students!class_students_student_id_fkey (\n              id,\n              first_name,\n              last_name,\n              roll_number,\n              email,\n              grade_id\n            )\n          `)\n          .eq('class_id', classesData[0].id);\n\n        if (studentsError) {\n          throw new Error('Error fetching students: ' + studentsError.message);\n        }\n\n        if (studentsData) {\n          const students = studentsData.map(data => data.student);\n          setClassStudents(students);\n          \n          // Update the selected class with the correct student count\n          setSelectedClass(prev => prev ? { ...prev, students: students.length } : null);\n          \n          // Update all classes with their student counts\n          setClasses(prev => prev.map(cls => \n            cls.id === extendedClasses[0].id \n              ? { ...cls, students: students.length }\n              : cls\n          ));\n        }\n\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'An unexpected error occurred';\n        setFetchError(errorMessage);\n        logError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchInitialData();\n  }, [logError]);\n\n  const handleClassChange = async (classData: ExtendedClass) => {\n    if (isLocked) return;\n    setSelectedClass(classData);\n    \n    try {\n      const { data: lessonsData, error: lessonsError } = await supabase\n        .from('lessons')\n        .select(`\n          *,\n          topic:topics(title),\n          subtopic:subtopics(title)\n        `)\n        .eq('grade_id', classData.grade_id)\n        .order('order_index', { ascending: true });\n\n      if (lessonsError) {\n        throw new Error('Error fetching lessons: ' + lessonsError.message);\n      }\n\n      const customLessons: CustomLesson[] = lessonsData.map((lesson, index) => ({\n        ...lesson,\n        id: String(lesson.id),\n        status: lesson.status as 'draft' | 'published' | undefined,\n        color: getColorForIndex(index),\n        unlocked: index === 0,\n        completed: false,\n        lessonNumber: `${index + 1}`,\n        totalTopics: '5',\n        difficulty: 'Beginner',\n        customSubLessons: [\n          {\n            id: String(lesson.id),\n            title: lesson.title,\n            unlocked: index === 0,\n            completed: false,\n            duration: lesson.duration || 15,\n            description: lesson.description || ''\n          }\n        ]\n      }));\n\n      setLessons(customLessons);\n    } catch (error) {\n      logError(error);\n    }\n  };\n\n  const getColorForIndex = (index: number): string => {\n    const colors = [\n      'bg-blue-500',\n      'bg-green-500',\n      'bg-purple-500',\n      'bg-orange-500',\n      'bg-pink-500'\n    ];\n    return colors[index % colors.length];\n  };\n\n  const handleSubLessonClick = (\n    e: React.MouseEvent,\n    subLesson: CustomSubLesson,\n    lesson: CustomLesson\n  ) => {\n    if (isLocked && !subLesson.unlocked) {\n      e.preventDefault();\n      return;\n    }\n    e.preventDefault();\n    setSelectedSubLesson(subLesson);\n    setCurrentLesson(lesson);\n    setDialogOpen(true);\n  };\n\n  const handleStartLesson = (lessonId: string, subLessonId: string) => {\n    if (isLocked) return;\n    setDialogOpen(false);\n    navigate(`/lesson/${lessonId}/${subLessonId}`);\n  };\n\n  const handleRestartLesson = (lessonId: string, subLessonId: string) => {\n    if (isLocked) return;\n    setDialogOpen(false);\n    navigate(`/lesson/${lessonId}/${subLessonId}?restart=true`);\n  };\n\n  const handleRetry = () => {\n    window.location.reload();\n  };\n\n  const setLessonRef = (index: number) => (el: HTMLDivElement | null) => {\n    lessonRefs.current[index] = el;\n  };\n\n  // Intersection Observer effect\n  useEffect(() => {\n    if (!lessons.length) return;\n\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            const lessonInView = lessons.find(\n              (lesson) => lesson.id === entry.target.id\n            );\n            if (lessonInView) {\n              setSelectedLesson(lessonInView);\n            }\n          }\n        });\n      },\n      {\n        root: null,\n        rootMargin: \"-05% 0px -85% 0px\",\n        threshold: [0, 0.25, 0.5, 0.75, 1],\n      }\n    );\n\n    lessonRefs.current.forEach((ref) => {\n      if (ref) observer.observe(ref);\n    });\n\n    return () => {\n      lessonRefs.current.forEach((ref) => {\n        if (ref) observer.unobserve(ref);\n      });\n    };\n  }, [lessons]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"text-center space-y-4\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"text-muted-foreground\">Loading learning path...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (fetchError) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"text-center space-y-4 p-6 bg-destructive/10 rounded-lg\">\n          <Shield className=\"h-8 w-8 text-destructive mx-auto\" />\n          <p className=\"text-destructive font-medium\">{fetchError}</p>\n          <Button \n            variant=\"outline\" \n            onClick={handleRetry}\n            className=\"mt-4\"\n          >\n            <RotateCcw className=\"h-4 w-4 mr-2\" />\n            Retry\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-6xl w-full relative\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex gap-4 overflow-x-auto pb-2\">\n          {classes.map(classData => (\n            <ClassCard\n              key={classData.id}\n              classData={classData}\n              isSelected={selectedClass?.id === classData.id}\n              onClassChange={handleClassChange}\n              logError={logError}\n            />\n          ))}\n        </div>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => setIsLocked(!isLocked)}\n          className={cn(\n            \"ml-4 transition-colors\",\n            isLocked && \"border-primary text-primary hover:bg-primary/10\"\n          )}\n        >\n          {isLocked ? (\n            <>\n              <Lock className=\"h-4 w-4 mr-2\" />\n              Locked\n            </>\n          ) : (\n            <>\n              <Unlock className=\"h-4 w-4 mr-2\" />\n              Unlocked\n            </>\n          )}\n        </Button>\n      </div>\n\n      {isLocked && (\n        <div className=\"mb-4 p-3 bg-primary/10 border border-primary/20 rounded-lg flex items-center gap-2 text-sm text-primary\">\n          <Shield className=\"h-4 w-4\" />\n          This course is currently locked to prevent unintended changes. Unlock to make modifications.\n        </div>\n      )}\n\n      {/* Overview Section */}\n      <div className=\"mb-6\">\n        <Card className=\"text-gray-700 bg-white dark:bg-gray-900 rounded-xl mb-4 border border-gray-200 dark:border-gray-800\">\n          <CardHeader>\n            <CardTitle className=\"text-2xl\">{selectedClass?.name}</CardTitle>\n            <div className=\"grid grid-cols-4 gap-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Users size={16} className=\"text-blue-300\" />\n                <span className=\"text-sm font-medium\">\n                  {classStudents.length} Students\n                </span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <BookOpen size={16} className=\"text-green-300\" />\n                <span className=\"text-sm font-medium\">\n                  {lessons.length} Lessons\n                </span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Calendar size={16} className=\"text-purple-300\" />\n                <span className=\"text-sm font-medium\">\n                  0 Assignments\n                </span>\n              </div>\n              <div className=\"text-sm mt-2\">\n                {Math.round((lessons.filter(l => l.completed).length / lessons.length) * 100)}% Completed\n              </div>\n            </div>\n          </CardHeader>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {/* Upcoming Classes */}\n          <Card className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800 p-6\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h2 className=\"text-xl font-semibold\">Upcoming Classes</h2>\n              <Calendar className=\"h-5 w-5 text-gray-500\" />\n            </div>\n            <div className=\"space-y-4\">\n              {[\n                {\n                  id: 1,\n                  subject: \"English Literature\",\n                  time: \"09:00 AM\",\n                  students: 28,\n                  topic: \"Shakespeare: Romeo & Juliet\",\n                  room: \"Room 101\",\n                },\n                {\n                  id: 2,\n                  subject: \"Creative Writing\",\n                  time: \"11:30 AM\",\n                  students: 24,\n                  topic: \"Character Development\",\n                  room: \"Room 203\",\n                },\n              ].map((cls) => (\n                <div\n                  key={cls.id}\n                  className=\"flex items-center justify-between p-4 bg-white dark:bg-gray-900 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors\"\n                >\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-medium\">{cls.subject}</h3>\n                    <p className=\"text-sm text-gray-600\">{cls.topic}</p>\n                    <div className=\"flex items-center gap-4 mt-2 text-sm text-gray-500\">\n                      <span>{cls.time}</span>\n                      <span>•</span>\n                      <span>{cls.room}</span>\n                      <span>•</span>\n                      <span>{cls.students} students</span>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </Card>\n\n          {/* Top Performing Students */}\n          <Card className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800 p-6\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h2 className=\"text-xl font-semibold\">Top Performing Students</h2>\n              <Users className=\"h-5 w-5 text-gray-500\" />\n            </div>\n            <div className=\"space-y-4\">\n              {[\n                {\n                  id: 1,\n                  name: \"Emma Thompson\",\n                  avatar: \"https://images.unsplash.com/photo-1494790108377-be9c29b29330?w=150\",\n                  progress: 92,\n                },\n                {\n                  id: 2,\n                  name: \"Michael Chen\",\n                  avatar: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150\",\n                  progress: 88,\n                },\n              ].map((student) => (\n                <div key={student.id} className=\"flex items-center gap-4\">\n                  <img\n                    src={student.avatar}\n                    alt={student.name}\n                    className=\"w-10 h-10 rounded-full object-cover\"\n                  />\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-medium\">{student.name}</h3>\n                    <div \n                      className={`progress-bar`}\n                      data-progress={`${student.progress}`}\n                    />\n                  </div>\n                  <span className=\"text-lg font-semibold\">\n                    {student.progress}%\n                  </span>\n                </div>\n              ))}\n            </div>\n          </Card>\n        </div>\n      </div>\n\n      <div className=\"sticky top-0 z-30 w-full\">\n        {selectedLesson && (\n          <Card className={`${selectedLesson.color} text-white rounded-xl`}>\n            <CardHeader className=\"p-2 md:p-4 md:pl-6\">\n              <CardTitle className=\"text-2xl\">{selectedLesson.title}</CardTitle>\n              <div className=\"flex flex-row md:flex-row items-center text-white text-sm space-y-2 md:space-y-0 md:space-x-4 md:p-2\">\n                <div className=\"flex items-center space-x-2\">\n                  <BookOpen className=\"h-5 w-5 text-white\" />\n                  <div className=\"text-sm font-medium\">\n                    {selectedClass?.name}{\" \"}\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <span>Lesson {selectedLesson.lessonNumber}</span>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"flex items-center space-x-1\">\n                    <Clock className=\"h-5 w-5 text-white\" />\n                    <span>{selectedLesson.duration} minutes</span>\n                  </span>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"flex items-center space-x-1\">\n                    <BookOpen className=\"h-5 w-5 text-white\" />\n                    <span>{selectedLesson.totalTopics} Topics</span>\n                  </span>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"flex items-center space-x-1\">\n                    <CheckCircle2 className=\"h-5 w-5 text-white\" />\n                    <span>1/5 Completed</span>\n                  </div>\n                </div>\n              </div>\n            </CardHeader>\n          </Card>\n        )}\n      </div>\n\n      {/* Dialog */}\n      <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <div className=\"flex flex-col space-y-1.5\">\n              <DialogTitle>\n                {selectedSubLesson?.title}\n                {selectedSubLesson?.completed && (\n                  <CheckCircle2 className=\"inline-block ml-2 h-5 w-5 text-green-500\" />\n                )}\n              </DialogTitle>\n              <DialogDescription>\n                <span className=\"flex items-center gap-2 text-sm\">\n                  Part of {currentLesson?.title}\n                </span>\n                <span className=\"block mt-2 text-sm text-muted-foreground\">\n                  {selectedSubLesson?.description}\n                </span>\n                {selectedSubLesson?.completed && (\n                  <div className=\"mt-4 p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                    <span className=\"text-green-700 dark:text-green-300 text-sm\">\n                      You have completed this lesson\n                    </span>\n                  </div>\n                )}\n              </DialogDescription>\n            </div>\n          </DialogHeader>\n          <DialogFooter>\n            {!selectedSubLesson?.unlocked ? (\n              <span className=\"text-sm text-muted-foreground\">\n                Complete previous lessons to unlock this content\n              </span>\n            ) : selectedSubLesson.completed ? (\n              <>\n                <Button\n                  onClick={() => {\n                    if (currentLesson?.id && selectedSubLesson?.id) {\n                      handleStartLesson(currentLesson.id, selectedSubLesson.id);\n                    }\n                  }}\n                  disabled={isLocked}\n                >\n                  Continue\n                  <ArrowRight className=\"ml-2 h-4 w-4\" />\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    if (currentLesson?.id && selectedSubLesson?.id) {\n                      handleRestartLesson(currentLesson.id, selectedSubLesson.id);\n                    }\n                  }}\n                  disabled={isLocked}\n                >\n                  Restart\n                  <RotateCcw className=\"ml-2 h-4 w-4\" />\n                </Button>\n              </>\n            ) : (\n              <Button\n                onClick={() => {\n                  if (currentLesson?.id && selectedSubLesson?.id) {\n                    handleStartLesson(currentLesson.id, selectedSubLesson.id);\n                  }\n                }}\n                disabled={isLocked}\n              >\n                Start Lesson\n                <ArrowRight className=\"ml-2 h-4 w-4\" />\n              </Button>\n            )}\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Rest of the component */}\n      <div className=\"space-y-8 -z-10 pb-[100vh]\">\n        {lessons.map((lesson, index) => (\n          <div\n            id={lesson.id}\n            ref={setLessonRef(index)}\n            key={lesson.id}\n            className=\"space-y-4 mb-8\"\n          >\n            <div className={`pt-2 pb-2 px-4 ${index === 0 ? '-mt-10' : ''}`}>\n              <div className=\"flex w-full justify-center\">\n                <div className=\"flex items-center relative max-w-lg w-full\">\n                  <div className=\"flex-grow border-t border-gray-300 dark:border-gray-700\"></div>\n                  <div className={`${lesson.color} z-10 text-white rounded-3xl text-xl px-4`}>\n                    {lesson.title}\n                  </div>\n                  <div className=\"flex-grow border-t border-gray-300 dark:border-gray-700\"></div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex flex-col gap-4\">\n              {lesson.customSubLessons.map((subLesson) => (\n                <Link\n                  to={`/lesson/${lesson.id}/${subLesson.id}`}\n                  key={subLesson.id}\n                  onClick={(e) => handleSubLessonClick(e, subLesson, lesson)}\n                  className={`${isLocked && !subLesson.unlocked ? \"pointer-events-none\" : \"\"}`}\n                >\n                  <Card className={cn(\n                    \"hover:border-primary transition-colors\",\n                    !subLesson.unlocked && \"opacity-50\"\n                  )}>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          {subLesson.unlocked ? (\n                            <BookOpen className=\"h-5 w-5 text-primary\" />\n                          ) : (\n                            <Lock className=\"h-5 w-5 text-muted-foreground\" />\n                          )}\n                          <div>\n                            <h3 className=\"font-medium\">{subLesson.title}</h3>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {subLesson.description}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-4\">\n                          <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n                            <Clock className=\"h-4 w-4\" />\n                            {subLesson.duration} min\n                          </div>\n                          {subLesson.completed && (\n                            <CheckCircle2 className=\"h-5 w-5 text-green-500\" />\n                          )}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </Link>\n              ))}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}"
        }
    ]
}