{
    "sourceFile": "src/components/common/learningpathTeacher.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 44,
            "patches": [
                {
                    "date": 1739130215476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739130334862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,14 +166,8 @@\n   const [isLocked, setIsLocked] = useState(true);\n   const [classStudents, setClassStudents] = useState<DbStudent[]>([]);\n   const [isLoading, setIsLoading] = useState(true);\n   const [fetchError, setFetchError] = useState<string | null>(null);\n-  const [grades, setGrades] = useState<DbClass[]>([]);\n-  const [topics, setTopics] = useState<DbClass[]>([]);\n-  const [subtopics, setSubtopics] = useState<DbClass[]>([]);\n-  const [selectedGrade, setSelectedGrade] = useState<DbClass | null>(null);\n-  const [selectedTopic, setSelectedTopic] = useState<DbClass | null>(null);\n-  const [selectedSubtopic, setSelectedSubtopic] = useState<DbClass | null>(null);\n \n   // Load lock state from localStorage\n   useEffect(() => {\n     try {\n"
                },
                {
                    "date": 1739133061122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,8 +150,48 @@\n });\n \n ClassCard.displayName = 'ClassCard';\n \n+// Add these interfaces to match the database schema\n+interface SchoolClass {\n+  id: string;\n+  name: string;\n+  grade_id: string;\n+  section?: string;\n+  description?: string;\n+}\n+\n+interface GradeWithHierarchy {\n+  id: string;\n+  name: string;\n+  level: number;\n+  topics: TopicWithHierarchy[];\n+  classes: SchoolClass[];\n+}\n+\n+interface TopicWithHierarchy {\n+  id: string;\n+  title: string;\n+  grade_id: string;\n+  subtopics: SubtopicWithHierarchy[];\n+}\n+\n+interface SubtopicWithHierarchy {\n+  id: string;\n+  title: string;\n+  topic_id: string;\n+  lessons: LessonWithContent[];\n+}\n+\n+interface LessonWithContent {\n+  id: string;\n+  title: string;\n+  content: string;\n+  questions: Question[];\n+  activities: Activity[];\n+  exercise_prompts: ExercisePrompt[];\n+}\n+\n export function LearningPathTeacher() {\n   const navigate = useNavigate();\n   const { logError } = useComponentLogger('LearningPathTeacher');\n   const lessonRefs = useRef<(HTMLDivElement | null)[]>([]);\n@@ -166,8 +206,14 @@\n   const [isLocked, setIsLocked] = useState(true);\n   const [classStudents, setClassStudents] = useState<DbStudent[]>([]);\n   const [isLoading, setIsLoading] = useState(true);\n   const [fetchError, setFetchError] = useState<string | null>(null);\n+  const [grades, setGrades] = useState<GradeWithHierarchy[]>([]);\n+  const [topics, setTopics] = useState<TopicWithHierarchy[]>([]);\n+  const [subtopics, setSubtopics] = useState<SubtopicWithHierarchy[]>([]);\n+  const [selectedGrade, setSelectedGrade] = useState<GradeWithHierarchy | null>(null);\n+  const [selectedTopic, setSelectedTopic] = useState<TopicWithHierarchy | null>(null);\n+  const [selectedSubtopic, setSelectedSubtopic] = useState<SubtopicWithHierarchy | null>(null);\n \n   // Load lock state from localStorage\n   useEffect(() => {\n     try {\n@@ -195,103 +241,144 @@\n       try {\n         setIsLoading(true);\n         setFetchError(null);\n \n-        const { data: classesData, error: classesError } = await supabase\n-          .from('classes')\n-          .select('*')\n-          .order('created_at', { ascending: false });\n+        const { data: { session } } = await supabase.auth.getSession();\n+        if (!session?.user) throw new Error('No authenticated user');\n \n-        if (classesError) {\n-          throw new Error('Error fetching classes: ' + classesError.message);\n-        }\n+        // 1. First get user's assigned schools\n+        const { data: userSchoolsData, error: schoolsError } = await supabase\n+          .from('user_schools')\n+          .select('school_id')\n+          .eq('user_id', session.user.id);\n \n-        if (!classesData || classesData.length === 0) {\n-          throw new Error('No classes found');\n+        if (schoolsError) throw schoolsError;\n+\n+        if (!userSchoolsData?.length) {\n+          throw new Error('No schools assigned to user');\n         }\n \n-        const extendedClasses: ExtendedClass[] = classesData.map(cls => ({\n-          ...cls,\n-          id: String(cls.id),\n-          students: 0 // Will be updated with actual count\n-        }));\n-\n-        setClasses(extendedClasses);\n-        setSelectedClass(extendedClasses[0]);\n-\n-        const { data: lessonsData, error: lessonsError } = await supabase\n-          .from('lessons')\n+        // 2. Get school grades and associated data\n+        const { data: schoolGradesData, error: gradesError } = await supabase\n+          .from('school_grades')\n           .select(`\n-            *,\n-            topic:topics(title),\n-            subtopic:subtopics(title)\n+            grade_id,\n+            grades (\n+              id,\n+              name,\n+              level\n+            )\n           `)\n-          .eq('grade_id', classesData[0].grade_id)\n-          .order('order_index', { ascending: true });\n+          .in('school_id', userSchoolsData.map(us => us.school_id));\n \n-        if (lessonsError) {\n-          throw new Error('Error fetching lessons: ' + lessonsError.message);\n-        }\n+        if (gradesError) throw gradesError;\n \n-        const customLessons: CustomLesson[] = lessonsData.map((lesson, index) => ({\n-          ...lesson,\n-          id: String(lesson.id),\n-          status: lesson.status as 'draft' | 'published' | undefined,\n-          color: getColorForIndex(index),\n-          unlocked: index === 0,\n-          completed: false,\n-          lessonNumber: `${index + 1}`,\n-          totalTopics: '5',\n-          difficulty: 'Beginner',\n-          customSubLessons: [\n-            {\n-              id: String(lesson.id),\n-              title: lesson.title,\n-              unlocked: index === 0,\n-              completed: false,\n-              duration: lesson.duration || 15,\n-              description: lesson.description || ''\n-            }\n-          ]\n-        }));\n-\n-        setLessons(customLessons);\n-        if (customLessons.length > 0) {\n-          setSelectedLesson(customLessons[0]);\n-        }\n-\n-        const { data: studentsData, error: studentsError } = await supabase\n-          .from('class_students')\n+        // 3. Get teacher's classes\n+        const { data: teacherClasses, error: classesError } = await supabase\n+          .from('class_teachers')\n           .select(`\n-            *,\n-            student:students!class_students_student_id_fkey (\n+            classes (\n               id,\n-              first_name,\n-              last_name,\n-              roll_number,\n-              email,\n-              grade_id\n+              name,\n+              grade_id,\n+              section,\n+              description\n             )\n           `)\n-          .eq('class_id', classesData[0].id);\n+          .eq('teacher_id', session.user.id);\n \n-        if (studentsError) {\n-          throw new Error('Error fetching students: ' + studentsError.message);\n-        }\n+        if (classesError) throw classesError;\n \n-        if (studentsData) {\n-          const students = studentsData.map(data => data.student);\n-          setClassStudents(students);\n-          \n-          // Update the selected class with the correct student count\n-          setSelectedClass(prev => prev ? { ...prev, students: students.length } : null);\n-          \n-          // Update all classes with their student counts\n-          setClasses(prev => prev.map(cls => \n-            cls.id === extendedClasses[0].id \n-              ? { ...cls, students: students.length }\n-              : cls\n-          ));\n+        // 4. For each grade, fetch the complete hierarchy\n+        const gradesWithHierarchy = await Promise.all(\n+          schoolGradesData.map(async ({ grades }) => {\n+            const { data: topics } = await supabase\n+              .from('topics')\n+              .select(`\n+                *,\n+                subtopics (\n+                  *,\n+                  lessons (\n+                    *,\n+                    questions (\n+                      *,\n+                      exercise_prompts (*)\n+                    ),\n+                    activities (*)\n+                  )\n+                )\n+              `)\n+              .eq('grade_id', grades.id)\n+              .order('order_index');\n+\n+            return {\n+              ...grades,\n+              topics: topics || [],\n+              classes: teacherClasses\n+                .map(tc => tc.classes)\n+                .filter(c => c.grade_id === grades.id)\n+            };\n+          })\n+        );\n+\n+        // Update states while maintaining existing functionality\n+        setGrades(gradesWithHierarchy);\n+        \n+        // Set initial selections\n+        if (gradesWithHierarchy.length > 0) {\n+          const firstGrade = gradesWithHierarchy[0];\n+          setSelectedGrade(firstGrade);\n+\n+          // Update existing class-based state\n+          const gradeClasses = firstGrade.classes.map(cls => ({\n+            ...cls,\n+            id: String(cls.id),\n+            students: 0 // Will be updated with actual count\n+          }));\n+          setClasses(gradeClasses);\n+          if (gradeClasses.length > 0) {\n+            setSelectedClass(gradeClasses[0]);\n+          }\n+\n+          // Set topics and lessons\n+          if (firstGrade.topics.length > 0) {\n+            const firstTopic = firstGrade.topics[0];\n+            setSelectedTopic(firstTopic);\n+            setTopics(firstGrade.topics);\n+\n+            if (firstTopic.subtopics.length > 0) {\n+              const firstSubtopic = firstTopic.subtopics[0];\n+              setSelectedSubtopic(firstSubtopic);\n+              setSubtopics(firstGrade.topics.flatMap(t => t.subtopics));\n+\n+              // Transform lessons to match existing format\n+              const transformedLessons = firstSubtopic.lessons.map((lesson, index) => ({\n+                ...lesson,\n+                id: String(lesson.id),\n+                color: getColorForIndex(index),\n+                unlocked: index === 0,\n+                completed: false,\n+                lessonNumber: `${index + 1}`,\n+                totalTopics: String(firstGrade.topics.length),\n+                difficulty: 'Beginner',\n+                customSubLessons: [\n+                  {\n+                    id: String(lesson.id),\n+                    title: lesson.title,\n+                    unlocked: index === 0,\n+                    completed: false,\n+                    duration: lesson.duration || 15,\n+                    description: lesson.description || ''\n+                  }\n+                ]\n+              }));\n+\n+              setLessons(transformedLessons);\n+              if (transformedLessons.length > 0) {\n+                setSelectedLesson(transformedLessons[0]);\n+              }\n+            }\n+          }\n         }\n \n       } catch (error) {\n         const errorMessage = error instanceof Error ? error.message : 'An unexpected error occurred';\n@@ -464,50 +551,65 @@\n   }\n \n   return (\n     <div className=\"max-w-6xl w-full relative\">\n-      <div className=\"flex items-center justify-between mb-4\">\n-        <div className=\"flex gap-4 overflow-x-auto pb-2\">\n-          {classes.map(classData => (\n-            <ClassCard\n-              key={classData.id}\n-              classData={classData}\n-              isSelected={selectedClass?.id === classData.id}\n-              onClassChange={handleClassChange}\n-              logError={logError}\n-            />\n+      {/* Grade Selection */}\n+      <div className=\"flex gap-4 overflow-x-auto pb-2\">\n+        {grades.map(grade => (\n+          <Card\n+            key={grade.id}\n+            className={cn(\n+              \"cursor-pointer transition-all duration-200\",\n+              selectedGrade?.id === grade.id && \"border-primary\"\n+            )}\n+            onClick={() => setSelectedGrade(grade)}\n+          >\n+            <CardHeader className=\"p-4\">\n+              <div className=\"flex items-center gap-2\">\n+                <GraduationCap className=\"h-5 w-5 text-primary\" />\n+                <span className=\"font-medium\">{grade.name}</span>\n+              </div>\n+            </CardHeader>\n+          </Card>\n+        ))}\n+      </div>\n+\n+      {/* Topics and their content */}\n+      <div className=\"mt-6 space-y-6\">\n+        {topics\n+          .filter(topic => topic.grade_id === selectedGrade?.id)\n+          .map(topic => (\n+            <Card key={topic.id} className=\"border-l-4 border-l-primary\">\n+              <CardHeader>\n+                <CardTitle>{topic.title}</CardTitle>\n+              </CardHeader>\n+              <CardContent>\n+                <div className=\"space-y-4\">\n+                  {subtopics\n+                    .filter(subtopic => subtopic.topic_id === topic.id)\n+                    .map(subtopic => (\n+                      <div key={subtopic.id} className=\"space-y-4\">\n+                        <h3 className=\"text-lg font-semibold\">{subtopic.title}</h3>\n+                        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n+                          {lessons\n+                            .filter(lesson => lesson.subtopic_id === subtopic.id)\n+                            .map(lesson => (\n+                              <LessonCard \n+                                key={lesson.id}\n+                                lesson={lesson}\n+                                isSelected={selectedLesson?.id === lesson.id}\n+                                onSelect={setSelectedLesson}\n+                              />\n+                            ))}\n+                        </div>\n+                      </div>\n+                    ))}\n+                </div>\n+              </CardContent>\n+            </Card>\n           ))}\n-        </div>\n-        <Button\n-          variant=\"outline\"\n-          size=\"sm\"\n-          onClick={() => setIsLocked(!isLocked)}\n-          className={cn(\n-            \"ml-4 transition-colors\",\n-            isLocked && \"border-primary text-primary hover:bg-primary/10\"\n-          )}\n-        >\n-          {isLocked ? (\n-            <>\n-              <Lock className=\"h-4 w-4 mr-2\" />\n-              Locked\n-            </>\n-          ) : (\n-            <>\n-              <Unlock className=\"h-4 w-4 mr-2\" />\n-              Unlocked\n-            </>\n-          )}\n-        </Button>\n       </div>\n \n-      {isLocked && (\n-        <div className=\"mb-4 p-3 bg-primary/10 border border-primary/20 rounded-lg flex items-center gap-2 text-sm text-primary\">\n-          <Shield className=\"h-4 w-4\" />\n-          This course is currently locked to prevent unintended changes. Unlock to make modifications.\n-        </div>\n-      )}\n-\n       {/* Overview Section */}\n       <div className=\"mb-6\">\n         <Card className=\"text-gray-700 bg-white dark:bg-gray-900 rounded-xl mb-4 border border-gray-200 dark:border-gray-800\">\n           <CardHeader>\n"
                },
                {
                    "date": 1739133182678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n import { useNavigate, Link } from \"react-router-dom\";\n import ClassHeader from \"./ClassHeader\";\n import {  Dialog,  DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, } from \"@/components/ui/dialog\";\n import { Button } from \"../ui/button\";\n-import { Class, ExtendedLesson, SubLesson, ClassStudent, Student } from \"@/types\";\n+import { Class, ExtendedLesson, SubLesson, ClassStudent, Student, Question } from \"@/types\";\n import { cn } from \"@/lib/utils\";\n import { supabase } from \"@/lib/supabase\";\n import type { Database } from \"@/types/supabase\";\n import { useComponentLogger } from \"@/hooks/useComponentLogger\";\n"
                },
                {
                    "date": 1739133203813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n import { useNavigate, Link } from \"react-router-dom\";\n import ClassHeader from \"./ClassHeader\";\n import {  Dialog,  DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, } from \"@/components/ui/dialog\";\n import { Button } from \"../ui/button\";\n-import { Class, ExtendedLesson, SubLesson, ClassStudent, Student, Question } from \"@/types\";\n+import { Class, ExtendedLesson, SubLesson, ClassStudent, Student, Question, Activity, ExercisePrompt, Lesson, Topic, Subtopic, Grade } from \"@/types\";\n import { cn } from \"@/lib/utils\";\n import { supabase } from \"@/lib/supabase\";\n import type { Database } from \"@/types/supabase\";\n import { useComponentLogger } from \"@/hooks/useComponentLogger\";\n"
                },
                {
                    "date": 1739133430764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,10 +2,10 @@\n \n import { useEffect, useRef, useState, memo, useCallback, useMemo } from \"react\";\n import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n import { Progress } from \"@/components/ui/progress\";\n-import {  ArrowRight, BookOpen, Calendar, CheckCircle2, Clock, Lock, Plus, RotateCcw, Unlock, Users, Shield, GraduationCap, } from \"lucide-react\";\n-import { useNavigate, Link } from \"react-router-dom\";\n+import {  ArrowRight, BookOpen, Calendar, CheckCircle2, Clock, Lock, Plus, RotateCcw, Unlock, Users, Shield, GraduationCap, Badge } from \"lucide-react\";\n+import { Link, useNavigate } from \"react-router-dom\";\n import ClassHeader from \"./ClassHeader\";\n import {  Dialog,  DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, } from \"@/components/ui/dialog\";\n import { Button } from \"../ui/button\";\n import { Class, ExtendedLesson, SubLesson, ClassStudent, Student, Question, Activity, ExercisePrompt, Lesson, Topic, Subtopic, Grade } from \"@/types\";\n@@ -80,8 +80,11 @@\n   lessonNumber: string;\n   totalTopics: string;\n   difficulty: string;\n   customSubLessons: CustomSubLesson[];\n+  questions?: Question[];\n+  activities?: Activity[];\n+  exercise_prompts?: ExercisePrompt[];\n }\n \n interface CustomSubLesson {\n   id: string;\n@@ -190,8 +193,51 @@\n   activities: Activity[];\n   exercise_prompts: ExercisePrompt[];\n }\n \n+interface LessonCardProps {\n+  lesson: CustomLesson;\n+  isSelected: boolean;\n+  onSelect: (lesson: CustomLesson) => void;\n+}\n+\n+const LessonCard = memo(({ lesson, isSelected, onSelect }: LessonCardProps) => {\n+  return (\n+    <Card \n+      className={cn(\n+        \"cursor-pointer transition-all duration-200\",\n+        \"hover:shadow-md hover:translate-y-[-2px]\",\n+        \"hover:bg-accent/50 hover:border-primary/50\",\n+        \"active:translate-y-[0px]\",\n+        isSelected && \"border-primary bg-accent/50 shadow-md\",\n+        \"group\"\n+      )}\n+      onClick={() => onSelect(lesson)}\n+    >\n+      <CardHeader className=\"p-4\">\n+        <div className=\"flex flex-col gap-2\">\n+          <div className=\"flex items-center justify-between\">\n+            <div className=\"flex items-center gap-2\">\n+              <BookOpen className=\"h-4 w-4 text-primary\" />\n+              <span className=\"font-medium\">{lesson.title}</span>\n+            </div>\n+          </div>\n+          <div className=\"flex items-center gap-2\">\n+            <Badge variant=\"outline\" className=\"bg-primary/5\">\n+              {lesson.questions?.length || 0} Questions\n+            </Badge>\n+            <Badge variant=\"outline\" className=\"bg-primary/5\">\n+              {lesson.activities?.length || 0} Activities\n+            </Badge>\n+          </div>\n+        </div>\n+      </CardHeader>\n+    </Card>\n+  );\n+});\n+\n+LessonCard.displayName = 'LessonCard';\n+\n export function LearningPathTeacher() {\n   const navigate = useNavigate();\n   const { logError } = useComponentLogger('LearningPathTeacher');\n   const lessonRefs = useRef<(HTMLDivElement | null)[]>([]);\n"
                },
                {
                    "date": 1739133754994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,10 +2,12 @@\n \n import { useEffect, useRef, useState, memo, useCallback, useMemo } from \"react\";\n import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n import { Progress } from \"@/components/ui/progress\";\n-import {  ArrowRight, BookOpen, Calendar, CheckCircle2, Clock, Lock, Plus, RotateCcw, Unlock, Users, Shield, GraduationCap, Badge } from \"lucide-react\";\n-import { Link, useNavigate } from \"react-router-dom\";\n+import { ArrowRight, BookOpen, Calendar, CheckCircle2, Clock, Lock, Plus, RotateCcw, Unlock, Users, Shield, GraduationCap } from \"lucide-react\";\n+import { Badge } from \"@/components/ui/badge\";\n+import { useNavigate as useRouterNavigate } from \"react-router-dom\";\n+import { Link } from \"react-router-dom\";\n import ClassHeader from \"./ClassHeader\";\n import {  Dialog,  DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, } from \"@/components/ui/dialog\";\n import { Button } from \"../ui/button\";\n import { Class, ExtendedLesson, SubLesson, ClassStudent, Student, Question, Activity, ExercisePrompt, Lesson, Topic, Subtopic, Grade } from \"@/types\";\n@@ -237,9 +239,9 @@\n \n LessonCard.displayName = 'LessonCard';\n \n export function LearningPathTeacher() {\n-  const navigate = useNavigate();\n+  const navigate = useRouterNavigate();\n   const { logError } = useComponentLogger('LearningPathTeacher');\n   const lessonRefs = useRef<(HTMLDivElement | null)[]>([]);\n   \n   const [lessons, setLessons] = useState<CustomLesson[]>([]);\n"
                },
                {
                    "date": 1739133898452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -309,9 +309,9 @@\n         const { data: schoolGradesData, error: gradesError } = await supabase\n           .from('school_grades')\n           .select(`\n             grade_id,\n-            grades (\n+            grades:grades (\n               id,\n               name,\n               level\n             )\n@@ -337,9 +337,9 @@\n         if (classesError) throw classesError;\n \n         // 4. For each grade, fetch the complete hierarchy\n         const gradesWithHierarchy = await Promise.all(\n-          schoolGradesData.map(async ({ grades }) => {\n+          schoolGradesData.map(async ({ grades: grade }) => {\n             const { data: topics } = await supabase\n               .from('topics')\n               .select(`\n                 *,\n@@ -354,17 +354,17 @@\n                     activities (*)\n                   )\n                 )\n               `)\n-              .eq('grade_id', grades.id)\n+              .eq('grade_id', grade.id)\n               .order('order_index');\n \n             return {\n-              ...grades,\n+              ...grade,\n               topics: topics || [],\n               classes: teacherClasses\n                 .map(tc => tc.classes)\n-                .filter(c => c.grade_id === grades.id)\n+                .filter(c => c.grade_id === grade.id)\n             };\n           })\n         );\n \n"
                },
                {
                    "date": 1739134209709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -238,8 +238,17 @@\n });\n \n LessonCard.displayName = 'LessonCard';\n \n+interface GradeData {\n+  grade_id: string;\n+  grades: {\n+    id: string;\n+    name: string;\n+    level: number;\n+  };\n+}\n+\n export function LearningPathTeacher() {\n   const navigate = useRouterNavigate();\n   const { logError } = useComponentLogger('LearningPathTeacher');\n   const lessonRefs = useRef<(HTMLDivElement | null)[]>([]);\n@@ -307,17 +316,18 @@\n \n         // 2. Get school grades and associated data\n         const { data: schoolGradesData, error: gradesError } = await supabase\n           .from('school_grades')\n-          .select(`\n+          .select<'*', GradeData>(`\n             grade_id,\n             grades:grades (\n               id,\n               name,\n               level\n             )\n           `)\n-          .in('school_id', userSchoolsData.map(us => us.school_id));\n+          .in('school_id', userSchoolsData.map(us => us.school_id))\n+          .order('grades(level)', { ascending: true });\n \n         if (gradesError) throw gradesError;\n \n         // 3. Get teacher's classes\n@@ -601,25 +611,27 @@\n   return (\n     <div className=\"max-w-6xl w-full relative\">\n       {/* Grade Selection */}\n       <div className=\"flex gap-4 overflow-x-auto pb-2\">\n-        {grades.map(grade => (\n-          <Card\n-            key={grade.id}\n-            className={cn(\n-              \"cursor-pointer transition-all duration-200\",\n-              selectedGrade?.id === grade.id && \"border-primary\"\n-            )}\n-            onClick={() => setSelectedGrade(grade)}\n-          >\n-            <CardHeader className=\"p-4\">\n-              <div className=\"flex items-center gap-2\">\n-                <GraduationCap className=\"h-5 w-5 text-primary\" />\n-                <span className=\"font-medium\">{grade.name}</span>\n-              </div>\n-            </CardHeader>\n-          </Card>\n-        ))}\n+        {grades\n+          .sort((a, b) => a.level - b.level)\n+          .map(grade => (\n+            <Card\n+              key={grade.id}\n+              className={cn(\n+                \"cursor-pointer transition-all duration-200\",\n+                selectedGrade?.id === grade.id && \"border-primary\"\n+              )}\n+              onClick={() => setSelectedGrade(grade)}\n+            >\n+              <CardHeader className=\"p-4\">\n+                <div className=\"flex items-center gap-2\">\n+                  <GraduationCap className=\"h-5 w-5 text-primary\" />\n+                  <span className=\"font-medium\">{grade.name}</span>\n+                </div>\n+              </CardHeader>\n+            </Card>\n+          ))}\n       </div>\n \n       {/* Topics and their content */}\n       <div className=\"mt-6 space-y-6\">\n"
                },
                {
                    "date": 1739134247010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -316,16 +316,16 @@\n \n         // 2. Get school grades and associated data\n         const { data: schoolGradesData, error: gradesError } = await supabase\n           .from('school_grades')\n-          .select<'*', GradeData>(`\n+          .select(`\n             grade_id,\n             grades:grades (\n               id,\n               name,\n               level\n             )\n-          `)\n+          ` as '*')\n           .in('school_id', userSchoolsData.map(us => us.school_id))\n           .order('grades(level)', { ascending: true });\n \n         if (gradesError) throw gradesError;\n"
                },
                {
                    "date": 1739134334303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -247,8 +247,18 @@\n     level: number;\n   };\n }\n \n+interface TeacherClassData {\n+  classes: {\n+    id: string;\n+    name: string;\n+    grade_id: string;\n+    section?: string;\n+    description?: string;\n+  }[];\n+}\n+\n export function LearningPathTeacher() {\n   const navigate = useRouterNavigate();\n   const { logError } = useComponentLogger('LearningPathTeacher');\n   const lessonRefs = useRef<(HTMLDivElement | null)[]>([]);\n@@ -340,9 +350,9 @@\n               grade_id,\n               section,\n               description\n             )\n-          `)\n+          ` as '*')\n           .eq('teacher_id', session.user.id);\n \n         if (classesError) throw classesError;\n \n@@ -370,11 +380,9 @@\n \n             return {\n               ...grade,\n               topics: topics || [],\n-              classes: teacherClasses\n-                .map(tc => tc.classes)\n-                .filter(c => c.grade_id === grade.id)\n+              classes: teacherClasses?.map(tc => tc.classes).flat() || []\n             };\n           })\n         );\n \n"
                },
                {
                    "date": 1739134363605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -394,9 +394,9 @@\n           const firstGrade = gradesWithHierarchy[0];\n           setSelectedGrade(firstGrade);\n \n           // Update existing class-based state\n-          const gradeClasses = firstGrade.classes.map(cls => ({\n+          const gradeClasses = firstGrade.classes.map((cls: SchoolClass) => ({\n             ...cls,\n             id: String(cls.id),\n             students: 0 // Will be updated with actual count\n           }));\n"
                },
                {
                    "date": 1739134388668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -413,9 +413,9 @@\n \n             if (firstTopic.subtopics.length > 0) {\n               const firstSubtopic = firstTopic.subtopics[0];\n               setSelectedSubtopic(firstSubtopic);\n-              setSubtopics(firstGrade.topics.flatMap(t => t.subtopics));\n+              setSubtopics(firstGrade.topics.flatMap((t: TopicWithHierarchy) => t.subtopics));\n \n               // Transform lessons to match existing format\n               const transformedLessons = firstSubtopic.lessons.map((lesson, index) => ({\n                 ...lesson,\n"
                },
                {
                    "date": 1739134407258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -416,9 +416,9 @@\n               setSelectedSubtopic(firstSubtopic);\n               setSubtopics(firstGrade.topics.flatMap((t: TopicWithHierarchy) => t.subtopics));\n \n               // Transform lessons to match existing format\n-              const transformedLessons = firstSubtopic.lessons.map((lesson, index) => ({\n+              const transformedLessons = firstSubtopic.lessons.map((lesson: LessonWithContent, index) => ({\n                 ...lesson,\n                 id: String(lesson.id),\n                 color: getColorForIndex(index),\n                 unlocked: index === 0,\n"
                },
                {
                    "date": 1739134442366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,8 +193,11 @@\n   content: string;\n   questions: Question[];\n   activities: Activity[];\n   exercise_prompts: ExercisePrompt[];\n+  duration?: number;\n+  description?: string;\n+  subtopic_id: string;\n }\n \n interface LessonCardProps {\n   lesson: CustomLesson;\n"
                },
                {
                    "date": 1739134475355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -419,9 +419,9 @@\n               setSelectedSubtopic(firstSubtopic);\n               setSubtopics(firstGrade.topics.flatMap((t: TopicWithHierarchy) => t.subtopics));\n \n               // Transform lessons to match existing format\n-              const transformedLessons = firstSubtopic.lessons.map((lesson: LessonWithContent, index) => ({\n+              const transformedLessons = firstSubtopic.lessons.map((lesson: LessonWithContent, index: number) => ({\n                 ...lesson,\n                 id: String(lesson.id),\n                 color: getColorForIndex(index),\n                 unlocked: index === 0,\n"
                },
                {
                    "date": 1739134708644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -643,43 +643,9 @@\n             </Card>\n           ))}\n       </div>\n \n-      {/* Topics and their content */}\n-      <div className=\"mt-6 space-y-6\">\n-        {topics\n-          .filter(topic => topic.grade_id === selectedGrade?.id)\n-          .map(topic => (\n-            <Card key={topic.id} className=\"border-l-4 border-l-primary\">\n-              <CardHeader>\n-                <CardTitle>{topic.title}</CardTitle>\n-              </CardHeader>\n-              <CardContent>\n-                <div className=\"space-y-4\">\n-                  {subtopics\n-                    .filter(subtopic => subtopic.topic_id === topic.id)\n-                    .map(subtopic => (\n-                      <div key={subtopic.id} className=\"space-y-4\">\n-                        <h3 className=\"text-lg font-semibold\">{subtopic.title}</h3>\n-                        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n-                          {lessons\n-                            .filter(lesson => lesson.subtopic_id === subtopic.id)\n-                            .map(lesson => (\n-                              <LessonCard \n-                                key={lesson.id}\n-                                lesson={lesson}\n-                                isSelected={selectedLesson?.id === lesson.id}\n-                                onSelect={setSelectedLesson}\n-                              />\n-                            ))}\n-                        </div>\n-                      </div>\n-                    ))}\n-                </div>\n-              </CardContent>\n-            </Card>\n-          ))}\n-      </div>\n+      \n \n       {/* Overview Section */}\n       <div className=\"mb-6\">\n         <Card className=\"text-gray-700 bg-white dark:bg-gray-900 rounded-xl mb-4 border border-gray-200 dark:border-gray-800\">\n@@ -800,8 +766,44 @@\n           </Card>\n         </div>\n       </div>\n \n+      {/* Topics and their content */}\n+      <div className=\"mt-6 space-y-6\">\n+        {topics\n+          .filter(topic => topic.grade_id === selectedGrade?.id)\n+          .map(topic => (\n+            <Card key={topic.id} className=\"border-l-4 border-l-primary\">\n+              <CardHeader>\n+                <CardTitle>{topic.title}</CardTitle>\n+              </CardHeader>\n+              <CardContent>\n+                <div className=\"space-y-4\">\n+                  {subtopics\n+                    .filter(subtopic => subtopic.topic_id === topic.id)\n+                    .map(subtopic => (\n+                      <div key={subtopic.id} className=\"space-y-4\">\n+                        <h3 className=\"text-lg font-semibold\">{subtopic.title}</h3>\n+                        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n+                          {lessons\n+                            .filter(lesson => lesson.subtopic_id === subtopic.id)\n+                            .map(lesson => (\n+                              <LessonCard \n+                                key={lesson.id}\n+                                lesson={lesson}\n+                                isSelected={selectedLesson?.id === lesson.id}\n+                                onSelect={setSelectedLesson}\n+                              />\n+                            ))}\n+                        </div>\n+                      </div>\n+                    ))}\n+                </div>\n+              </CardContent>\n+            </Card>\n+          ))}\n+      </div>\n+\n       <div className=\"sticky top-0 z-30 w-full\">\n         {selectedLesson && (\n           <Card className={`${selectedLesson.color} text-white rounded-xl`}>\n             <CardHeader className=\"p-2 md:p-4 md:pl-6\">\n"
                },
                {
                    "date": 1739135658750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -766,9 +766,9 @@\n           </Card>\n         </div>\n       </div>\n \n-      {/* Topics and their content */}\n+      {/* Topics and their content\n       <div className=\"mt-6 space-y-6\">\n         {topics\n           .filter(topic => topic.grade_id === selectedGrade?.id)\n           .map(topic => (\n@@ -800,10 +800,98 @@\n                 </div>\n               </CardContent>\n             </Card>\n           ))}\n-      </div>\n+      </div> */}\n \n+\n+<div className=\"mt-6 space-y-6\">\n+  {selectedGrade?.topics\n+    .sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n+    .map(topic => (\n+      <Card \n+        key={topic.id} \n+        className={cn(\n+          \"border-l-4 border-l-primary transition-all duration-200\",\n+          \"hover:shadow-md\"\n+        )}\n+      >\n+        <CardHeader className=\"cursor-pointer\" onClick={() => setSelectedTopic(topic)}>\n+          <div className=\"flex items-center justify-between\">\n+            <CardTitle className=\"flex items-center gap-2\">\n+              <BookOpen className=\"h-5 w-5 text-primary\" />\n+              {topic.title}\n+            </CardTitle>\n+            <Badge variant=\"outline\" className=\"bg-primary/5\">\n+              {topic.subtopics?.length || 0} Subtopics\n+            </Badge>\n+          </div>\n+        </CardHeader>\n+        <CardContent>\n+          <div className=\"space-y-6\">\n+            {topic.subtopics\n+              ?.sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n+              .map(subtopic => (\n+                <div \n+                  key={subtopic.id} \n+                  className={cn(\n+                    \"space-y-4 p-4 rounded-lg\",\n+                    \"border border-border/50\",\n+                    \"hover:border-primary/50 transition-colors\",\n+                    selectedSubtopic?.id === subtopic.id && \"border-primary/50 bg-accent/5\"\n+                  )}\n+                >\n+                  <div \n+                    className=\"flex items-center justify-between cursor-pointer\"\n+                    onClick={() => setSelectedSubtopic(subtopic)}\n+                  >\n+                    <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n+                      <div className={cn(\n+                        \"w-2 h-2 rounded-full\",\n+                        selectedSubtopic?.id === subtopic.id ? \"bg-primary\" : \"bg-muted\"\n+                      )} />\n+                      {subtopic.title}\n+                    </h3>\n+                    <Badge variant=\"outline\">\n+                      {subtopic.lessons?.length || 0} Lessons\n+                    </Badge>\n+                  </div>\n+                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n+                    {subtopic.lessons\n+                      ?.sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n+                      .map(lesson => (\n+                        <LessonCard \n+                          key={lesson.id}\n+                          lesson={{\n+                            ...lesson,\n+                            color: getColorForIndex(subtopic.lessons.indexOf(lesson)),\n+                            unlocked: true, // You can add your unlock logic here\n+                            completed: false, // Add completion logic\n+                            lessonNumber: `${subtopic.lessons.indexOf(lesson) + 1}`,\n+                            totalTopics: String(topic.subtopics?.length || 0),\n+                            difficulty: lesson.metadata?.difficulty || 'Beginner',\n+                            customSubLessons: [{\n+                              id: lesson.id,\n+                              title: lesson.title,\n+                              unlocked: true,\n+                              completed: false,\n+                              duration: lesson.duration || 15,\n+                              description: lesson.description || ''\n+                            }]\n+                          }}\n+                          isSelected={selectedLesson?.id === lesson.id}\n+                          onSelect={setSelectedLesson}\n+                        />\n+                    ))}\n+                  </div>\n+                </div>\n+              ))}\n+          </div>\n+        </CardContent>\n+      </Card>\n+    ))}\n+</div>\n+\n       <div className=\"sticky top-0 z-30 w-full\">\n         {selectedLesson && (\n           <Card className={`${selectedLesson.color} text-white rounded-xl`}>\n             <CardHeader className=\"p-2 md:p-4 md:pl-6\">\n"
                },
                {
                    "date": 1739135766382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,8 +196,9 @@\n   exercise_prompts: ExercisePrompt[];\n   duration?: number;\n   description?: string;\n   subtopic_id: string;\n+  order_index?: number;\n }\n \n interface LessonCardProps {\n   lesson: CustomLesson;\n"
                },
                {
                    "date": 1739135833066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,10 +72,11 @@\n   id: string;\n   students: number;\n }\n \n-interface CustomLesson extends Omit<DbLesson, 'id' | 'status'> {\n+interface CustomLesson extends Partial<DbLesson> {\n   id: string;\n+  title: string;\n   status?: 'draft' | 'published';\n   color: string;\n   unlocked: boolean;\n   completed: boolean;\n"
                },
                {
                    "date": 1739135977114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,8 +66,9 @@\n type DbStudent = Tables['students']['Row'];\n type DbClassStudent = Tables['class_students']['Row'] & {\n   student: DbStudent;\n };\n+type DbTopic = Database['public']['Tables']['topics']['Row'];\n \n interface ExtendedClass extends Omit<DbClass, 'id'> {\n   id: string;\n   students: number;\n@@ -173,13 +174,14 @@\n   topics: TopicWithHierarchy[];\n   classes: SchoolClass[];\n }\n \n-interface TopicWithHierarchy {\n+interface TopicWithHierarchy extends DbTopic {\n+  subtopics: SubtopicWithHierarchy[];\n   id: string;\n   title: string;\n   grade_id: string;\n-  subtopics: SubtopicWithHierarchy[];\n+  order_index?: number;\n }\n \n interface SubtopicWithHierarchy {\n   id: string;\n"
                },
                {
                    "date": 1739136246715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,8 @@\n type DbStudent = Tables['students']['Row'];\n type DbClassStudent = Tables['class_students']['Row'] & {\n   student: DbStudent;\n };\n-type DbTopic = Database['public']['Tables']['topics']['Row'];\n \n interface ExtendedClass extends Omit<DbClass, 'id'> {\n   id: string;\n   students: number;\n@@ -174,21 +173,32 @@\n   topics: TopicWithHierarchy[];\n   classes: SchoolClass[];\n }\n \n+type DbTopic = Tables['topics']['Row'] & {\n+  subtopics?: {\n+    id: string;\n+    title: string;\n+    topic_id: string;\n+    order_index?: number;\n+    lessons: LessonWithContent[];\n+  }[];\n+};\n+\n interface TopicWithHierarchy extends DbTopic {\n   subtopics: SubtopicWithHierarchy[];\n-  id: string;\n-  title: string;\n-  grade_id: string;\n-  order_index?: number;\n }\n \n-interface SubtopicWithHierarchy {\n+// Add with other type definitions at the top\n+type DbSubtopic = Tables['subtopics']['Row'];\n+\n+// Then update the interface to use it\n+interface SubtopicWithHierarchy extends DbSubtopic {\n+  lessons: LessonWithContent[];\n   id: string;\n   title: string;\n   topic_id: string;\n-  lessons: LessonWithContent[];\n+  order_index?: number; \n }\n \n interface LessonWithContent {\n   id: string;\n"
                },
                {
                    "date": 1739136364769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,28 @@\n \n   throw lastError || new Error('Failed to fetch data after retries');\n }\n \n-type Tables = Database['public']['Tables'];\n+type Tables = Database['public']['Tables'] & {\n+  topics: {\n+    Row: {\n+      id: string;\n+      title: string;\n+      grade_id: string;\n+      order_index?: number;\n+      subtopics?: SubtopicWithHierarchy[];\n+    };\n+  };\n+  subtopics: {\n+    Row: {\n+      id: string;\n+      title: string;\n+      topic_id: string;\n+      order_index?: number;\n+      lessons?: LessonWithContent[];\n+    };\n+  };\n+};\n type DbClass = Tables['classes']['Row'];\n type DbLesson = Tables['lessons']['Row'] & {\n   topic?: { title: string };\n   subtopic?: { title: string };\n"
                },
                {
                    "date": 1739136441211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,8 +229,12 @@\n   duration?: number;\n   description?: string;\n   subtopic_id: string;\n   order_index?: number;\n+  metadata?: {\n+    difficulty?: string;\n+    [key: string]: any;\n+  };\n }\n \n interface LessonCardProps {\n   lesson: CustomLesson;\n"
                },
                {
                    "date": 1739136496297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -666,9 +666,9 @@\n             <Card\n               key={grade.id}\n               className={cn(\n                 \"cursor-pointer transition-all duration-200\",\n-                selectedGrade?.id === grade.id && \"border-primary\"\n+                selectedGrade?.id === grade.id && \"border-primary border-l-4\"\n               )}\n               onClick={() => setSelectedGrade(grade)}\n             >\n               <CardHeader className=\"p-4\">\n"
                },
                {
                    "date": 1739136513077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -666,9 +666,9 @@\n             <Card\n               key={grade.id}\n               className={cn(\n                 \"cursor-pointer transition-all duration-200\",\n-                selectedGrade?.id === grade.id && \"border-primary border-l-4\"\n+                selectedGrade?.id === grade.id && \"border-primary border-l-4 cursor-default\"\n               )}\n               onClick={() => setSelectedGrade(grade)}\n             >\n               <CardHeader className=\"p-4\">\n"
                },
                {
                    "date": 1739136539801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -666,9 +666,9 @@\n             <Card\n               key={grade.id}\n               className={cn(\n                 \"cursor-pointer transition-all duration-200\",\n-                selectedGrade?.id === grade.id && \"border-primary border-l-4 cursor-default\"\n+                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary\"\n               )}\n               onClick={() => setSelectedGrade(grade)}\n             >\n               <CardHeader className=\"p-4\">\n"
                },
                {
                    "date": 1739136563072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -666,9 +666,9 @@\n             <Card\n               key={grade.id}\n               className={cn(\n                 \"cursor-pointer transition-all duration-200\",\n-                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary\"\n+                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50\"\n               )}\n               onClick={() => setSelectedGrade(grade)}\n             >\n               <CardHeader className=\"p-4\">\n"
                },
                {
                    "date": 1739136592075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -671,9 +671,9 @@\n               )}\n               onClick={() => setSelectedGrade(grade)}\n             >\n               <CardHeader className=\"p-4\">\n-                <div className=\"flex items-center gap-2\">\n+                <div className=\"flex items-center gap-1\">\n                   <GraduationCap className=\"h-5 w-5 text-primary\" />\n                   <span className=\"font-medium\">{grade.name}</span>\n                 </div>\n               </CardHeader>\n"
                },
                {
                    "date": 1739136616539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -671,9 +671,9 @@\n               )}\n               onClick={() => setSelectedGrade(grade)}\n             >\n               <CardHeader className=\"p-4\">\n-                <div className=\"flex items-center gap-1\">\n+                <div className=\"flex items-center gap-3\">\n                   <GraduationCap className=\"h-5 w-5 text-primary\" />\n                   <span className=\"font-medium\">{grade.name}</span>\n                 </div>\n               </CardHeader>\n"
                },
                {
                    "date": 1739136639627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -666,9 +666,9 @@\n             <Card\n               key={grade.id}\n               className={cn(\n                 \"cursor-pointer transition-all duration-200\",\n-                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50\"\n+                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-primary/5\"\n               )}\n               onClick={() => setSelectedGrade(grade)}\n             >\n               <CardHeader className=\"p-4\">\n"
                },
                {
                    "date": 1739136656714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -666,9 +666,9 @@\n             <Card\n               key={grade.id}\n               className={cn(\n                 \"cursor-pointer transition-all duration-200\",\n-                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-primary/5\"\n+                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-background/50\"\n               )}\n               onClick={() => setSelectedGrade(grade)}\n             >\n               <CardHeader className=\"p-4\">\n"
                },
                {
                    "date": 1739136737488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -666,9 +666,9 @@\n             <Card\n               key={grade.id}\n               className={cn(\n                 \"cursor-pointer transition-all duration-200\",\n-                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-background/50\"\n+                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/5\"\n               )}\n               onClick={() => setSelectedGrade(grade)}\n             >\n               <CardHeader className=\"p-4\">\n"
                },
                {
                    "date": 1739136751262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -666,9 +666,9 @@\n             <Card\n               key={grade.id}\n               className={cn(\n                 \"cursor-pointer transition-all duration-200\",\n-                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/5\"\n+                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/55\"\n               )}\n               onClick={() => setSelectedGrade(grade)}\n             >\n               <CardHeader className=\"p-4\">\n"
                },
                {
                    "date": 1739136788997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -666,9 +666,9 @@\n             <Card\n               key={grade.id}\n               className={cn(\n                 \"cursor-pointer transition-all duration-200\",\n-                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/55\"\n+                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/55 bg-color-secondary\"\n               )}\n               onClick={() => setSelectedGrade(grade)}\n             >\n               <CardHeader className=\"p-4\">\n"
                },
                {
                    "date": 1739137098332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n import { useEffect, useRef, useState, memo, useCallback, useMemo } from \"react\";\n import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n import { Progress } from \"@/components/ui/progress\";\n-import { ArrowRight, BookOpen, Calendar, CheckCircle2, Clock, Lock, Plus, RotateCcw, Unlock, Users, Shield, GraduationCap } from \"lucide-react\";\n+import { ArrowRight, BookOpen, Calendar, CheckCircle2, Clock, Lock, Plus, RotateCcw, Unlock, Users, Shield, GraduationCap, Home, Layers } from \"lucide-react\";\n import { Badge } from \"@/components/ui/badge\";\n import { useNavigate as useRouterNavigate } from \"react-router-dom\";\n import { Link } from \"react-router-dom\";\n import ClassHeader from \"./ClassHeader\";\n@@ -656,358 +656,340 @@\n     );\n   }\n \n   return (\n-    <div className=\"max-w-6xl w-full relative\">\n-      {/* Grade Selection */}\n-      <div className=\"flex gap-4 overflow-x-auto pb-2\">\n-        {grades\n-          .sort((a, b) => a.level - b.level)\n-          .map(grade => (\n-            <Card\n-              key={grade.id}\n-              className={cn(\n-                \"cursor-pointer transition-all duration-200\",\n-                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/55 bg-color-secondary\"\n-              )}\n-              onClick={() => setSelectedGrade(grade)}\n-            >\n-              <CardHeader className=\"p-4\">\n-                <div className=\"flex items-center gap-3\">\n-                  <GraduationCap className=\"h-5 w-5 text-primary\" />\n-                  <span className=\"font-medium\">{grade.name}</span>\n-                </div>\n-              </CardHeader>\n-            </Card>\n-          ))}\n+    <div className=\"w-full max-w-6xl mx-auto px-4 sm:px-6 space-y-6\">\n+      {/* Grade Selection - Horizontal scrollable on mobile */}\n+      <div className=\"relative\">\n+        <div className=\"flex gap-3 overflow-x-auto pb-2 scrollbar-hide -mx-4 px-4 sm:mx-0 sm:px-0\">\n+          {grades\n+            .sort((a, b) => a.level - b.level)\n+            .map(grade => (\n+              <Card\n+                key={grade.id}\n+                className={cn(\n+                  \"flex-shrink-0 cursor-pointer transition-all duration-200 min-w-[150px] sm:min-w-0\",\n+                  selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/55\"\n+                )}\n+                onClick={() => setSelectedGrade(grade)}\n+              >\n+                <CardHeader className=\"p-3 sm:p-4\">\n+                  <div className=\"flex items-center gap-2\">\n+                    <GraduationCap className=\"h-5 w-5 text-primary\" />\n+                    <span className=\"font-medium\">{grade.name}</span>\n+                  </div>\n+                </CardHeader>\n+              </Card>\n+            ))}\n+        </div>\n       </div>\n \n-      \n-\n       {/* Overview Section */}\n-      <div className=\"mb-6\">\n-        <Card className=\"text-gray-700 bg-white dark:bg-gray-900 rounded-xl mb-4 border border-gray-200 dark:border-gray-800\">\n-          <CardHeader>\n-            <CardTitle className=\"text-2xl\">{selectedClass?.name}</CardTitle>\n-            <div className=\"grid grid-cols-4 gap-4\">\n+      <div className=\"space-y-4\">\n+        <Card className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800\">\n+          <CardHeader className=\"p-4\">\n+            <CardTitle className=\"text-xl sm:text-2xl mb-4\">{selectedClass?.name}</CardTitle>\n+            <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-4\">\n               <div className=\"flex items-center space-x-2\">\n-                <Users size={16} className=\"text-blue-300\" />\n-                <span className=\"text-sm font-medium\">\n+                <Users size={16} className=\"text-blue-300 flex-shrink-0\" />\n+                <span className=\"text-sm font-medium truncate\">\n                   {classStudents.length} Students\n                 </span>\n               </div>\n               <div className=\"flex items-center space-x-2\">\n-                <BookOpen size={16} className=\"text-green-300\" />\n-                <span className=\"text-sm font-medium\">\n+                <BookOpen size={16} className=\"text-green-300 flex-shrink-0\" />\n+                <span className=\"text-sm font-medium truncate\">\n                   {lessons.length} Lessons\n                 </span>\n               </div>\n               <div className=\"flex items-center space-x-2\">\n-                <Calendar size={16} className=\"text-purple-300\" />\n-                <span className=\"text-sm font-medium\">\n+                <Calendar size={16} className=\"text-purple-300 flex-shrink-0\" />\n+                <span className=\"text-sm font-medium truncate\">\n                   0 Assignments\n                 </span>\n               </div>\n-              <div className=\"text-sm mt-2\">\n-                {Math.round((lessons.filter(l => l.completed).length / lessons.length) * 100)}% Completed\n+              <div className=\"flex items-center space-x-2\">\n+                <CheckCircle2 size={16} className=\"text-green-300 flex-shrink-0\" />\n+                <span className=\"text-sm font-medium truncate\">\n+                  {Math.round((lessons.filter(l => l.completed).length / lessons.length) * 100)}% Complete\n+                </span>\n               </div>\n             </div>\n           </CardHeader>\n         </Card>\n \n-        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n+        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n           {/* Upcoming Classes */}\n-          <Card className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800 p-6\">\n-            <div className=\"flex items-center justify-between mb-6\">\n-              <h2 className=\"text-xl font-semibold\">Upcoming Classes</h2>\n-              <Calendar className=\"h-5 w-5 text-gray-500\" />\n-            </div>\n-            <div className=\"space-y-4\">\n-              {[\n-                {\n-                  id: 1,\n-                  subject: \"English Literature\",\n-                  time: \"09:00 AM\",\n-                  students: 28,\n-                  topic: \"Shakespeare: Romeo & Juliet\",\n-                  room: \"Room 101\",\n-                },\n-                {\n-                  id: 2,\n-                  subject: \"Creative Writing\",\n-                  time: \"11:30 AM\",\n-                  students: 24,\n-                  topic: \"Character Development\",\n-                  room: \"Room 203\",\n-                },\n-              ].map((cls) => (\n-                <div\n-                  key={cls.id}\n-                  className=\"flex items-center justify-between p-4 bg-white dark:bg-gray-900 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors\"\n-                >\n-                  <div className=\"flex-1\">\n-                    <h3 className=\"font-medium\">{cls.subject}</h3>\n-                    <p className=\"text-sm text-gray-600\">{cls.topic}</p>\n-                    <div className=\"flex items-center gap-4 mt-2 text-sm text-gray-500\">\n-                      <span>{cls.time}</span>\n-                      <span>•</span>\n-                      <span>{cls.room}</span>\n-                      <span>•</span>\n-                      <span>{cls.students} students</span>\n+          <Card className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800\">\n+            <CardHeader className=\"p-4\">\n+              <div className=\"flex items-center justify-between mb-4\">\n+                <h2 className=\"text-lg sm:text-xl font-semibold\">Upcoming Classes</h2>\n+                <Calendar className=\"h-5 w-5 text-gray-500\" />\n+              </div>\n+              <div className=\"space-y-3\">\n+                {[\n+                  {\n+                    id: 1,\n+                    subject: \"English Literature\",\n+                    time: \"09:00 AM\",\n+                    students: 28,\n+                    topic: \"Shakespeare: Romeo & Juliet\",\n+                    room: \"Room 101\",\n+                  },\n+                  {\n+                    id: 2,\n+                    subject: \"Creative Writing\",\n+                    time: \"11:30 AM\",\n+                    students: 24,\n+                    topic: \"Character Development\",\n+                    room: \"Room 203\",\n+                  },\n+                ].map((cls) => (\n+                  <div\n+                    key={cls.id}\n+                    className=\"p-3 bg-accent/5 rounded-lg hover:bg-accent/10 transition-colors\"\n+                  >\n+                    <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2\">\n+                      <div>\n+                        <h3 className=\"font-medium\">{cls.subject}</h3>\n+                        <p className=\"text-sm text-muted-foreground\">{cls.topic}</p>\n+                      </div>\n+                      <div className=\"flex flex-wrap gap-2 text-sm text-muted-foreground\">\n+                        <span className=\"inline-flex items-center gap-1\">\n+                          <Clock className=\"h-4 w-4\" />\n+                          {cls.time}\n+                        </span>\n+                        <span className=\"inline-flex items-center gap-1\">\n+                          <Users className=\"h-4 w-4\" />\n+                          {cls.students}\n+                        </span>\n+                        <span className=\"inline-flex items-center gap-1\">\n+                          <Home className=\"h-4 w-4\" />\n+                          {cls.room}\n+                        </span>\n+                      </div>\n                     </div>\n                   </div>\n-                </div>\n-              ))}\n-            </div>\n+                ))}\n+              </div>\n+            </CardHeader>\n           </Card>\n \n           {/* Top Performing Students */}\n-          <Card className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800 p-6\">\n-            <div className=\"flex items-center justify-between mb-6\">\n-              <h2 className=\"text-xl font-semibold\">Top Performing Students</h2>\n-              <Users className=\"h-5 w-5 text-gray-500\" />\n-            </div>\n-            <div className=\"space-y-4\">\n-              {[\n-                {\n-                  id: 1,\n-                  name: \"Emma Thompson\",\n-                  avatar: \"https://images.unsplash.com/photo-1494790108377-be9c29b29330?w=150\",\n-                  progress: 92,\n-                },\n-                {\n-                  id: 2,\n-                  name: \"Michael Chen\",\n-                  avatar: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150\",\n-                  progress: 88,\n-                },\n-              ].map((student) => (\n-                <div key={student.id} className=\"flex items-center gap-4\">\n-                  <img\n-                    src={student.avatar}\n-                    alt={student.name}\n-                    className=\"w-10 h-10 rounded-full object-cover\"\n-                  />\n-                  <div className=\"flex-1\">\n-                    <h3 className=\"font-medium\">{student.name}</h3>\n-                    <div \n-                      className={`progress-bar`}\n-                      data-progress={`${student.progress}`}\n+          <Card className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800\">\n+            <CardHeader className=\"p-4\">\n+              <div className=\"flex items-center justify-between mb-4\">\n+                <h2 className=\"text-lg sm:text-xl font-semibold\">Top Performing Students</h2>\n+                <Users className=\"h-5 w-5 text-gray-500\" />\n+              </div>\n+              <div className=\"space-y-4\">\n+                {[\n+                  {\n+                    id: 1,\n+                    name: \"Emma Thompson\",\n+                    avatar: \"https://images.unsplash.com/photo-1494790108377-be9c29b29330?w=150\",\n+                    progress: 92,\n+                  },\n+                  {\n+                    id: 2,\n+                    name: \"Michael Chen\",\n+                    avatar: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150\",\n+                    progress: 88,\n+                  },\n+                ].map((student) => (\n+                  <div key={student.id} className=\"flex items-center gap-3\">\n+                    <img\n+                      src={student.avatar}\n+                      alt={student.name}\n+                      className=\"w-10 h-10 rounded-full object-cover flex-shrink-0\"\n                     />\n+                    <div className=\"flex-1 min-w-0\">\n+                      <h3 className=\"font-medium truncate\">{student.name}</h3>\n+                      <div className=\"w-full bg-accent/10 rounded-full h-2 mt-2\">\n+                        <div\n+                          className=\"bg-primary h-2 rounded-full transition-all duration-300\"\n+                          style={{ width: `${student.progress}%` }}\n+                        />\n+                      </div>\n+                    </div>\n+                    <span className=\"text-sm font-semibold whitespace-nowrap\">\n+                      {student.progress}%\n+                    </span>\n                   </div>\n-                  <span className=\"text-lg font-semibold\">\n-                    {student.progress}%\n-                  </span>\n-                </div>\n-              ))}\n-            </div>\n+                ))}\n+              </div>\n+            </CardHeader>\n           </Card>\n         </div>\n       </div>\n \n-      {/* Topics and their content\n-      <div className=\"mt-6 space-y-6\">\n-        {topics\n-          .filter(topic => topic.grade_id === selectedGrade?.id)\n+      {/* Topics Section */}\n+      <div className=\"space-y-6\">\n+        {selectedGrade?.topics\n+          .sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n           .map(topic => (\n-            <Card key={topic.id} className=\"border-l-4 border-l-primary\">\n-              <CardHeader>\n-                <CardTitle>{topic.title}</CardTitle>\n+            <Card \n+              key={topic.id} \n+              className={cn(\n+                \"border-l-4 border-l-primary transition-all duration-200\",\n+                \"hover:shadow-md\"\n+              )}\n+            >\n+              <CardHeader className=\"cursor-pointer p-4\" onClick={() => setSelectedTopic(topic)}>\n+                <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-2\">\n+                  <CardTitle className=\"flex items-center gap-2 text-lg sm:text-xl\">\n+                    <BookOpen className=\"h-5 w-5 text-primary flex-shrink-0\" />\n+                    <span className=\"truncate\">{topic.title}</span>\n+                  </CardTitle>\n+                  <Badge variant=\"outline\" className=\"bg-primary/5 whitespace-nowrap\">\n+                    {topic.subtopics?.length || 0} Subtopics\n+                  </Badge>\n+                </div>\n               </CardHeader>\n-              <CardContent>\n+              <CardContent className=\"p-4\">\n                 <div className=\"space-y-4\">\n-                  {subtopics\n-                    .filter(subtopic => subtopic.topic_id === topic.id)\n+                  {topic.subtopics\n+                    ?.sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n                     .map(subtopic => (\n-                      <div key={subtopic.id} className=\"space-y-4\">\n-                        <h3 className=\"text-lg font-semibold\">{subtopic.title}</h3>\n-                        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n-                          {lessons\n-                            .filter(lesson => lesson.subtopic_id === subtopic.id)\n+                      <div \n+                        key={subtopic.id} \n+                        className={cn(\n+                          \"space-y-4 p-4 rounded-lg\",\n+                          \"border border-border/50\",\n+                          \"hover:border-primary/50 transition-colors\",\n+                          selectedSubtopic?.id === subtopic.id && \"border-primary/50 bg-accent/5\"\n+                        )}\n+                      >\n+                        <div \n+                          className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-2 cursor-pointer\"\n+                          onClick={() => setSelectedSubtopic(subtopic)}\n+                        >\n+                          <h3 className=\"text-base sm:text-lg font-semibold flex items-center gap-2\">\n+                            <div className={cn(\n+                              \"w-2 h-2 rounded-full flex-shrink-0\",\n+                              selectedSubtopic?.id === subtopic.id ? \"bg-primary\" : \"bg-muted\"\n+                            )} />\n+                            <span className=\"truncate\">{subtopic.title}</span>\n+                          </h3>\n+                          <Badge variant=\"outline\" className=\"whitespace-nowrap\">\n+                            {subtopic.lessons?.length || 0} Lessons\n+                          </Badge>\n+                        </div>\n+                        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n+                          {subtopic.lessons\n+                            ?.sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n                             .map(lesson => (\n                               <LessonCard \n                                 key={lesson.id}\n-                                lesson={lesson}\n+                                lesson={{\n+                                  ...lesson,\n+                                  color: getColorForIndex(subtopic.lessons.indexOf(lesson)),\n+                                  unlocked: true,\n+                                  completed: false,\n+                                  lessonNumber: `${subtopic.lessons.indexOf(lesson) + 1}`,\n+                                  totalTopics: String(topic.subtopics?.length || 0),\n+                                  difficulty: lesson.metadata?.difficulty || 'Beginner',\n+                                  customSubLessons: [{\n+                                    id: lesson.id,\n+                                    title: lesson.title,\n+                                    unlocked: true,\n+                                    completed: false,\n+                                    duration: lesson.duration || 15,\n+                                    description: lesson.description || ''\n+                                  }]\n+                                }}\n                                 isSelected={selectedLesson?.id === lesson.id}\n                                 onSelect={setSelectedLesson}\n                               />\n-                            ))}\n+                          ))}\n                         </div>\n                       </div>\n                     ))}\n                 </div>\n               </CardContent>\n             </Card>\n           ))}\n-      </div> */}\n+      </div>\n \n-\n-<div className=\"mt-6 space-y-6\">\n-  {selectedGrade?.topics\n-    .sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n-    .map(topic => (\n-      <Card \n-        key={topic.id} \n-        className={cn(\n-          \"border-l-4 border-l-primary transition-all duration-200\",\n-          \"hover:shadow-md\"\n-        )}\n-      >\n-        <CardHeader className=\"cursor-pointer\" onClick={() => setSelectedTopic(topic)}>\n-          <div className=\"flex items-center justify-between\">\n-            <CardTitle className=\"flex items-center gap-2\">\n-              <BookOpen className=\"h-5 w-5 text-primary\" />\n-              {topic.title}\n-            </CardTitle>\n-            <Badge variant=\"outline\" className=\"bg-primary/5\">\n-              {topic.subtopics?.length || 0} Subtopics\n-            </Badge>\n-          </div>\n-        </CardHeader>\n-        <CardContent>\n-          <div className=\"space-y-6\">\n-            {topic.subtopics\n-              ?.sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n-              .map(subtopic => (\n-                <div \n-                  key={subtopic.id} \n-                  className={cn(\n-                    \"space-y-4 p-4 rounded-lg\",\n-                    \"border border-border/50\",\n-                    \"hover:border-primary/50 transition-colors\",\n-                    selectedSubtopic?.id === subtopic.id && \"border-primary/50 bg-accent/5\"\n-                  )}\n-                >\n-                  <div \n-                    className=\"flex items-center justify-between cursor-pointer\"\n-                    onClick={() => setSelectedSubtopic(subtopic)}\n-                  >\n-                    <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n-                      <div className={cn(\n-                        \"w-2 h-2 rounded-full\",\n-                        selectedSubtopic?.id === subtopic.id ? \"bg-primary\" : \"bg-muted\"\n-                      )} />\n-                      {subtopic.title}\n-                    </h3>\n-                    <Badge variant=\"outline\">\n-                      {subtopic.lessons?.length || 0} Lessons\n-                    </Badge>\n+      {/* Selected Lesson Header - Sticky */}\n+      {selectedLesson && (\n+        <div className=\"sticky top-0 z-30 -mx-4 px-4 sm:mx-0 sm:px-0 py-2 bg-background/80 backdrop-blur-lg\">\n+          <Card className={`${selectedLesson.color} text-white rounded-xl`}>\n+            <CardHeader className=\"p-3 sm:p-4\">\n+              <div className=\"flex flex-col gap-3\">\n+                <CardTitle className=\"text-lg sm:text-2xl truncate\">{selectedLesson.title}</CardTitle>\n+                <div className=\"flex flex-wrap gap-3 text-sm\">\n+                  <div className=\"flex items-center gap-2\">\n+                    <BookOpen className=\"h-4 w-4\" />\n+                    <span className=\"truncate\">{selectedClass?.name}</span>\n                   </div>\n-                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n-                    {subtopic.lessons\n-                      ?.sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n-                      .map(lesson => (\n-                        <LessonCard \n-                          key={lesson.id}\n-                          lesson={{\n-                            ...lesson,\n-                            color: getColorForIndex(subtopic.lessons.indexOf(lesson)),\n-                            unlocked: true, // You can add your unlock logic here\n-                            completed: false, // Add completion logic\n-                            lessonNumber: `${subtopic.lessons.indexOf(lesson) + 1}`,\n-                            totalTopics: String(topic.subtopics?.length || 0),\n-                            difficulty: lesson.metadata?.difficulty || 'Beginner',\n-                            customSubLessons: [{\n-                              id: lesson.id,\n-                              title: lesson.title,\n-                              unlocked: true,\n-                              completed: false,\n-                              duration: lesson.duration || 15,\n-                              description: lesson.description || ''\n-                            }]\n-                          }}\n-                          isSelected={selectedLesson?.id === lesson.id}\n-                          onSelect={setSelectedLesson}\n-                        />\n-                    ))}\n+                  <div className=\"flex items-center gap-2\">\n+                    <Hash className=\"h-4 w-4\" />\n+                    <span>Lesson {selectedLesson.lessonNumber}</span>\n                   </div>\n-                </div>\n-              ))}\n-          </div>\n-        </CardContent>\n-      </Card>\n-    ))}\n-</div>\n-\n-      <div className=\"sticky top-0 z-30 w-full\">\n-        {selectedLesson && (\n-          <Card className={`${selectedLesson.color} text-white rounded-xl`}>\n-            <CardHeader className=\"p-2 md:p-4 md:pl-6\">\n-              <CardTitle className=\"text-2xl\">{selectedLesson.title}</CardTitle>\n-              <div className=\"flex flex-row md:flex-row items-center text-white text-sm space-y-2 md:space-y-0 md:space-x-4 md:p-2\">\n-                <div className=\"flex items-center space-x-2\">\n-                  <BookOpen className=\"h-5 w-5 text-white\" />\n-                  <div className=\"text-sm font-medium\">\n-                    {selectedClass?.name}{\" \"}\n+                  <div className=\"flex items-center gap-2\">\n+                    <Clock className=\"h-4 w-4\" />\n+                    <span>{selectedLesson.duration} min</span>\n                   </div>\n-                </div>\n-\n-                <div className=\"flex items-center space-x-2\">\n-                  <span>Lesson {selectedLesson.lessonNumber}</span>\n-                </div>\n-\n-                <div className=\"flex items-center space-x-2\">\n-                  <span className=\"flex items-center space-x-1\">\n-                    <Clock className=\"h-5 w-5 text-white\" />\n-                    <span>{selectedLesson.duration} minutes</span>\n-                  </span>\n-                </div>\n-\n-                <div className=\"flex items-center space-x-2\">\n-                  <span className=\"flex items-center space-x-1\">\n-                    <BookOpen className=\"h-5 w-5 text-white\" />\n+                  <div className=\"flex items-center gap-2\">\n+                    <Layers className=\"h-4 w-4\" />\n                     <span>{selectedLesson.totalTopics} Topics</span>\n-                  </span>\n-                </div>\n-\n-                <div className=\"flex items-center space-x-2\">\n-                  <div className=\"flex items-center space-x-1\">\n-                    <CheckCircle2 className=\"h-5 w-5 text-white\" />\n-                    <span>1/5 Completed</span>\n                   </div>\n+                  <div className=\"flex items-center gap-2\">\n+                    <CheckCircle2 className=\"h-4 w-4\" />\n+                    <span>1/5 Complete</span>\n+                  </div>\n                 </div>\n               </div>\n             </CardHeader>\n           </Card>\n-        )}\n-      </div>\n+        </div>\n+      )}\n \n       {/* Dialog */}\n       <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n-        <DialogContent>\n-          <DialogHeader>\n+        <DialogContent className=\"sm:max-w-[425px] p-0\">\n+          <DialogHeader className=\"p-6 pb-0\">\n             <div className=\"flex flex-col space-y-1.5\">\n-              <DialogTitle>\n+              <DialogTitle className=\"flex items-center gap-2 text-lg\">\n                 {selectedSubLesson?.title}\n                 {selectedSubLesson?.completed && (\n-                  <CheckCircle2 className=\"inline-block ml-2 h-5 w-5 text-green-500\" />\n+                  <CheckCircle2 className=\"h-5 w-5 text-green-500 flex-shrink-0\" />\n                 )}\n               </DialogTitle>\n-              <DialogDescription>\n-                <span className=\"flex items-center gap-2 text-sm\">\n-                  Part of {currentLesson?.title}\n-                </span>\n-                <span className=\"block mt-2 text-sm text-muted-foreground\">\n+              <DialogDescription className=\"space-y-4\">\n+                <div className=\"flex flex-wrap gap-3 text-sm\">\n+                  <span className=\"flex items-center gap-2\">\n+                    <Clock className=\"h-4 w-4\" />\n+                    {selectedSubLesson?.duration} minutes\n+                  </span>\n+                  <span className=\"flex items-center gap-2\">\n+                    <BookOpen className=\"h-4 w-4\" />\n+                    Part of {currentLesson?.title}\n+                  </span>\n+                </div>\n+                <p className=\"text-sm text-muted-foreground\">\n                   {selectedSubLesson?.description}\n-                </span>\n+                </p>\n                 {selectedSubLesson?.completed && (\n-                  <div className=\"mt-4 p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n+                  <div className=\"p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                     <span className=\"text-green-700 dark:text-green-300 text-sm\">\n                       You have completed this lesson\n                     </span>\n                   </div>\n                 )}\n               </DialogDescription>\n             </div>\n           </DialogHeader>\n-          <DialogFooter>\n+          <DialogFooter className=\"p-6 pt-0\">\n             {!selectedSubLesson?.unlocked ? (\n-              <span className=\"text-sm text-muted-foreground\">\n+              <p className=\"text-sm text-muted-foreground\">\n                 Complete previous lessons to unlock this content\n-              </span>\n+              </p>\n             ) : selectedSubLesson.completed ? (\n-              <>\n+              <div className=\"flex flex-col sm:flex-row gap-2 w-full\">\n                 <Button\n+                  className=\"flex-1\"\n                   onClick={() => {\n                     if (currentLesson?.id && selectedSubLesson?.id) {\n                       handleStartLesson(currentLesson.id, selectedSubLesson.id);\n                     }\n@@ -1018,8 +1000,9 @@\n                   <ArrowRight className=\"ml-2 h-4 w-4\" />\n                 </Button>\n                 <Button\n                   variant=\"outline\"\n+                  className=\"flex-1\"\n                   onClick={() => {\n                     if (currentLesson?.id && selectedSubLesson?.id) {\n                       handleRestartLesson(currentLesson.id, selectedSubLesson.id);\n                     }\n@@ -1028,11 +1011,12 @@\n                 >\n                   Restart\n                   <RotateCcw className=\"ml-2 h-4 w-4\" />\n                 </Button>\n-              </>\n+              </div>\n             ) : (\n               <Button\n+                className=\"w-full sm:w-auto\"\n                 onClick={() => {\n                   if (currentLesson?.id && selectedSubLesson?.id) {\n                     handleStartLesson(currentLesson.id, selectedSubLesson.id);\n                   }\n@@ -1046,63 +1030,68 @@\n           </DialogFooter>\n         </DialogContent>\n       </Dialog>\n \n-      {/* Rest of the component */}\n-      <div className=\"space-y-8 -z-10 pb-[100vh]\">\n+      {/* Lessons Timeline */}\n+      <div className=\"space-y-8 pb-[100vh]\">\n         {lessons.map((lesson, index) => (\n           <div\n             id={lesson.id}\n             ref={setLessonRef(index)}\n             key={lesson.id}\n-            className=\"space-y-4 mb-8\"\n+            className=\"space-y-4\"\n           >\n-            <div className={`pt-2 pb-2 px-4 ${index === 0 ? '-mt-10' : ''}`}>\n+            <div className={cn(\"pt-2 pb-2 px-4\", index === 0 && \"-mt-10\")}>\n               <div className=\"flex w-full justify-center\">\n                 <div className=\"flex items-center relative max-w-lg w-full\">\n-                  <div className=\"flex-grow border-t border-gray-300 dark:border-gray-700\"></div>\n-                  <div className={`${lesson.color} z-10 text-white rounded-3xl text-xl px-4`}>\n+                  <div className=\"flex-grow border-t border-gray-300 dark:border-gray-700\" />\n+                  <div className={cn(\n+                    lesson.color,\n+                    \"z-10 text-white rounded-3xl px-4 py-2 text-base sm:text-xl truncate\"\n+                  )}>\n                     {lesson.title}\n                   </div>\n-                  <div className=\"flex-grow border-t border-gray-300 dark:border-gray-700\"></div>\n+                  <div className=\"flex-grow border-t border-gray-300 dark:border-gray-700\" />\n                 </div>\n               </div>\n             </div>\n \n-            <div className=\"flex flex-col gap-4\">\n+            <div className=\"flex flex-col gap-3\">\n               {lesson.customSubLessons.map((subLesson) => (\n                 <Link\n                   to={`/lesson/${lesson.id}/${subLesson.id}`}\n                   key={subLesson.id}\n                   onClick={(e) => handleSubLessonClick(e, subLesson, lesson)}\n-                  className={`${isLocked && !subLesson.unlocked ? \"pointer-events-none\" : \"\"}`}\n+                  className={cn(\n+                    isLocked && !subLesson.unlocked && \"pointer-events-none\"\n+                  )}\n                 >\n                   <Card className={cn(\n                     \"hover:border-primary transition-colors\",\n                     !subLesson.unlocked && \"opacity-50\"\n                   )}>\n                     <CardContent className=\"p-4\">\n-                      <div className=\"flex items-center justify-between\">\n-                        <div className=\"flex items-center gap-2\">\n+                      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-3\">\n+                        <div className=\"flex items-start sm:items-center gap-3\">\n                           {subLesson.unlocked ? (\n-                            <BookOpen className=\"h-5 w-5 text-primary\" />\n+                            <BookOpen className=\"h-5 w-5 text-primary flex-shrink-0\" />\n                           ) : (\n-                            <Lock className=\"h-5 w-5 text-muted-foreground\" />\n+                            <Lock className=\"h-5 w-5 text-muted-foreground flex-shrink-0\" />\n                           )}\n                           <div>\n                             <h3 className=\"font-medium\">{subLesson.title}</h3>\n-                            <p className=\"text-sm text-muted-foreground\">\n+                            <p className=\"text-sm text-muted-foreground line-clamp-2 sm:line-clamp-1\">\n                               {subLesson.description}\n                             </p>\n                           </div>\n                         </div>\n-                        <div className=\"flex items-center gap-4\">\n-                          <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n+                        <div className=\"flex items-center gap-3\">\n+                          <div className=\"flex items-center gap-1 text-sm text-muted-foreground whitespace-nowrap\">\n                             <Clock className=\"h-4 w-4\" />\n                             {subLesson.duration} min\n                           </div>\n                           {subLesson.completed && (\n-                            <CheckCircle2 className=\"h-5 w-5 text-green-500\" />\n+                            <CheckCircle2 className=\"h-5 w-5 text-green-500 flex-shrink-0\" />\n                           )}\n                         </div>\n                       </div>\n                     </CardContent>\n"
                },
                {
                    "date": 1739137116554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n import { useEffect, useRef, useState, memo, useCallback, useMemo } from \"react\";\n import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n import { Progress } from \"@/components/ui/progress\";\n-import { ArrowRight, BookOpen, Calendar, CheckCircle2, Clock, Lock, Plus, RotateCcw, Unlock, Users, Shield, GraduationCap, Home, Layers } from \"lucide-react\";\n+import { ArrowRight, BookOpen, Calendar, CheckCircle2, Clock, Lock, Plus, RotateCcw, Unlock, Users, Shield, GraduationCap, Home, Layers, Hash } from \"lucide-react\";\n import { Badge } from \"@/components/ui/badge\";\n import { useNavigate as useRouterNavigate } from \"react-router-dom\";\n import { Link } from \"react-router-dom\";\n import ClassHeader from \"./ClassHeader\";\n"
                },
                {
                    "date": 1739137431944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n import { useEffect, useRef, useState, memo, useCallback, useMemo } from \"react\";\n import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n import { Progress } from \"@/components/ui/progress\";\n-import { ArrowRight, BookOpen, Calendar, CheckCircle2, Clock, Lock, Plus, RotateCcw, Unlock, Users, Shield, GraduationCap, Home, Layers, Hash } from \"lucide-react\";\n+import { ArrowRight, BookOpen, Calendar, CheckCircle2, Clock, Lock, Plus, RotateCcw, Unlock, Users, Shield, GraduationCap } from \"lucide-react\";\n import { Badge } from \"@/components/ui/badge\";\n import { useNavigate as useRouterNavigate } from \"react-router-dom\";\n import { Link } from \"react-router-dom\";\n import ClassHeader from \"./ClassHeader\";\n@@ -656,340 +656,358 @@\n     );\n   }\n \n   return (\n-    <div className=\"w-full max-w-6xl mx-auto px-4 sm:px-6 space-y-6\">\n-      {/* Grade Selection - Horizontal scrollable on mobile */}\n-      <div className=\"relative\">\n-        <div className=\"flex gap-3 overflow-x-auto pb-2 scrollbar-hide -mx-4 px-4 sm:mx-0 sm:px-0\">\n-          {grades\n-            .sort((a, b) => a.level - b.level)\n-            .map(grade => (\n-              <Card\n-                key={grade.id}\n-                className={cn(\n-                  \"flex-shrink-0 cursor-pointer transition-all duration-200 min-w-[150px] sm:min-w-0\",\n-                  selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/55\"\n-                )}\n-                onClick={() => setSelectedGrade(grade)}\n-              >\n-                <CardHeader className=\"p-3 sm:p-4\">\n-                  <div className=\"flex items-center gap-2\">\n-                    <GraduationCap className=\"h-5 w-5 text-primary\" />\n-                    <span className=\"font-medium\">{grade.name}</span>\n-                  </div>\n-                </CardHeader>\n-              </Card>\n-            ))}\n-        </div>\n+    <div className=\"max-w-6xl w-full relative\">\n+      {/* Grade Selection */}\n+      <div className=\"flex gap-4 overflow-x-auto pb-2\">\n+        {grades\n+          .sort((a, b) => a.level - b.level)\n+          .map(grade => (\n+            <Card\n+              key={grade.id}\n+              className={cn(\n+                \"cursor-pointer transition-all duration-200\",\n+                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/55 bg-color-secondary\"\n+              )}\n+              onClick={() => setSelectedGrade(grade)}\n+            >\n+              <CardHeader className=\"p-4\">\n+                <div className=\"flex items-center gap-3\">\n+                  <GraduationCap className=\"h-5 w-5 text-primary\" />\n+                  <span className=\"font-medium\">{grade.name}</span>\n+                </div>\n+              </CardHeader>\n+            </Card>\n+          ))}\n       </div>\n \n+      \n+\n       {/* Overview Section */}\n-      <div className=\"space-y-4\">\n-        <Card className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800\">\n-          <CardHeader className=\"p-4\">\n-            <CardTitle className=\"text-xl sm:text-2xl mb-4\">{selectedClass?.name}</CardTitle>\n-            <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-4\">\n+      <div className=\"mb-6\">\n+        <Card className=\"text-gray-700 bg-white dark:bg-gray-900 rounded-xl mb-4 border border-gray-200 dark:border-gray-800\">\n+          <CardHeader>\n+            <CardTitle className=\"text-2xl\">{selectedClass?.name}</CardTitle>\n+            <div className=\"grid grid-cols-4 gap-4\">\n               <div className=\"flex items-center space-x-2\">\n-                <Users size={16} className=\"text-blue-300 flex-shrink-0\" />\n-                <span className=\"text-sm font-medium truncate\">\n+                <Users size={16} className=\"text-blue-300\" />\n+                <span className=\"text-sm font-medium\">\n                   {classStudents.length} Students\n                 </span>\n               </div>\n               <div className=\"flex items-center space-x-2\">\n-                <BookOpen size={16} className=\"text-green-300 flex-shrink-0\" />\n-                <span className=\"text-sm font-medium truncate\">\n+                <BookOpen size={16} className=\"text-green-300\" />\n+                <span className=\"text-sm font-medium\">\n                   {lessons.length} Lessons\n                 </span>\n               </div>\n               <div className=\"flex items-center space-x-2\">\n-                <Calendar size={16} className=\"text-purple-300 flex-shrink-0\" />\n-                <span className=\"text-sm font-medium truncate\">\n+                <Calendar size={16} className=\"text-purple-300\" />\n+                <span className=\"text-sm font-medium\">\n                   0 Assignments\n                 </span>\n               </div>\n-              <div className=\"flex items-center space-x-2\">\n-                <CheckCircle2 size={16} className=\"text-green-300 flex-shrink-0\" />\n-                <span className=\"text-sm font-medium truncate\">\n-                  {Math.round((lessons.filter(l => l.completed).length / lessons.length) * 100)}% Complete\n-                </span>\n+              <div className=\"text-sm mt-2\">\n+                {Math.round((lessons.filter(l => l.completed).length / lessons.length) * 100)}% Completed\n               </div>\n             </div>\n           </CardHeader>\n         </Card>\n \n-        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n+        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n           {/* Upcoming Classes */}\n-          <Card className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800\">\n-            <CardHeader className=\"p-4\">\n-              <div className=\"flex items-center justify-between mb-4\">\n-                <h2 className=\"text-lg sm:text-xl font-semibold\">Upcoming Classes</h2>\n-                <Calendar className=\"h-5 w-5 text-gray-500\" />\n-              </div>\n-              <div className=\"space-y-3\">\n-                {[\n-                  {\n-                    id: 1,\n-                    subject: \"English Literature\",\n-                    time: \"09:00 AM\",\n-                    students: 28,\n-                    topic: \"Shakespeare: Romeo & Juliet\",\n-                    room: \"Room 101\",\n-                  },\n-                  {\n-                    id: 2,\n-                    subject: \"Creative Writing\",\n-                    time: \"11:30 AM\",\n-                    students: 24,\n-                    topic: \"Character Development\",\n-                    room: \"Room 203\",\n-                  },\n-                ].map((cls) => (\n-                  <div\n-                    key={cls.id}\n-                    className=\"p-3 bg-accent/5 rounded-lg hover:bg-accent/10 transition-colors\"\n-                  >\n-                    <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2\">\n-                      <div>\n-                        <h3 className=\"font-medium\">{cls.subject}</h3>\n-                        <p className=\"text-sm text-muted-foreground\">{cls.topic}</p>\n-                      </div>\n-                      <div className=\"flex flex-wrap gap-2 text-sm text-muted-foreground\">\n-                        <span className=\"inline-flex items-center gap-1\">\n-                          <Clock className=\"h-4 w-4\" />\n-                          {cls.time}\n-                        </span>\n-                        <span className=\"inline-flex items-center gap-1\">\n-                          <Users className=\"h-4 w-4\" />\n-                          {cls.students}\n-                        </span>\n-                        <span className=\"inline-flex items-center gap-1\">\n-                          <Home className=\"h-4 w-4\" />\n-                          {cls.room}\n-                        </span>\n-                      </div>\n+          <Card className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800 p-6\">\n+            <div className=\"flex items-center justify-between mb-6\">\n+              <h2 className=\"text-xl font-semibold\">Upcoming Classes</h2>\n+              <Calendar className=\"h-5 w-5 text-gray-500\" />\n+            </div>\n+            <div className=\"space-y-4\">\n+              {[\n+                {\n+                  id: 1,\n+                  subject: \"English Literature\",\n+                  time: \"09:00 AM\",\n+                  students: 28,\n+                  topic: \"Shakespeare: Romeo & Juliet\",\n+                  room: \"Room 101\",\n+                },\n+                {\n+                  id: 2,\n+                  subject: \"Creative Writing\",\n+                  time: \"11:30 AM\",\n+                  students: 24,\n+                  topic: \"Character Development\",\n+                  room: \"Room 203\",\n+                },\n+              ].map((cls) => (\n+                <div\n+                  key={cls.id}\n+                  className=\"flex items-center justify-between p-4 bg-white dark:bg-gray-900 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors\"\n+                >\n+                  <div className=\"flex-1\">\n+                    <h3 className=\"font-medium\">{cls.subject}</h3>\n+                    <p className=\"text-sm text-gray-600\">{cls.topic}</p>\n+                    <div className=\"flex items-center gap-4 mt-2 text-sm text-gray-500\">\n+                      <span>{cls.time}</span>\n+                      <span>•</span>\n+                      <span>{cls.room}</span>\n+                      <span>•</span>\n+                      <span>{cls.students} students</span>\n                     </div>\n                   </div>\n-                ))}\n-              </div>\n-            </CardHeader>\n+                </div>\n+              ))}\n+            </div>\n           </Card>\n \n           {/* Top Performing Students */}\n-          <Card className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800\">\n-            <CardHeader className=\"p-4\">\n-              <div className=\"flex items-center justify-between mb-4\">\n-                <h2 className=\"text-lg sm:text-xl font-semibold\">Top Performing Students</h2>\n-                <Users className=\"h-5 w-5 text-gray-500\" />\n-              </div>\n-              <div className=\"space-y-4\">\n-                {[\n-                  {\n-                    id: 1,\n-                    name: \"Emma Thompson\",\n-                    avatar: \"https://images.unsplash.com/photo-1494790108377-be9c29b29330?w=150\",\n-                    progress: 92,\n-                  },\n-                  {\n-                    id: 2,\n-                    name: \"Michael Chen\",\n-                    avatar: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150\",\n-                    progress: 88,\n-                  },\n-                ].map((student) => (\n-                  <div key={student.id} className=\"flex items-center gap-3\">\n-                    <img\n-                      src={student.avatar}\n-                      alt={student.name}\n-                      className=\"w-10 h-10 rounded-full object-cover flex-shrink-0\"\n+          <Card className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800 p-6\">\n+            <div className=\"flex items-center justify-between mb-6\">\n+              <h2 className=\"text-xl font-semibold\">Top Performing Students</h2>\n+              <Users className=\"h-5 w-5 text-gray-500\" />\n+            </div>\n+            <div className=\"space-y-4\">\n+              {[\n+                {\n+                  id: 1,\n+                  name: \"Emma Thompson\",\n+                  avatar: \"https://images.unsplash.com/photo-1494790108377-be9c29b29330?w=150\",\n+                  progress: 92,\n+                },\n+                {\n+                  id: 2,\n+                  name: \"Michael Chen\",\n+                  avatar: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150\",\n+                  progress: 88,\n+                },\n+              ].map((student) => (\n+                <div key={student.id} className=\"flex items-center gap-4\">\n+                  <img\n+                    src={student.avatar}\n+                    alt={student.name}\n+                    className=\"w-10 h-10 rounded-full object-cover\"\n+                  />\n+                  <div className=\"flex-1\">\n+                    <h3 className=\"font-medium\">{student.name}</h3>\n+                    <div \n+                      className={`progress-bar`}\n+                      data-progress={`${student.progress}`}\n                     />\n-                    <div className=\"flex-1 min-w-0\">\n-                      <h3 className=\"font-medium truncate\">{student.name}</h3>\n-                      <div className=\"w-full bg-accent/10 rounded-full h-2 mt-2\">\n-                        <div\n-                          className=\"bg-primary h-2 rounded-full transition-all duration-300\"\n-                          style={{ width: `${student.progress}%` }}\n-                        />\n-                      </div>\n-                    </div>\n-                    <span className=\"text-sm font-semibold whitespace-nowrap\">\n-                      {student.progress}%\n-                    </span>\n                   </div>\n-                ))}\n-              </div>\n-            </CardHeader>\n+                  <span className=\"text-lg font-semibold\">\n+                    {student.progress}%\n+                  </span>\n+                </div>\n+              ))}\n+            </div>\n           </Card>\n         </div>\n       </div>\n \n-      {/* Topics Section */}\n-      <div className=\"space-y-6\">\n-        {selectedGrade?.topics\n-          .sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n+      {/* Topics and their content\n+      <div className=\"mt-6 space-y-6\">\n+        {topics\n+          .filter(topic => topic.grade_id === selectedGrade?.id)\n           .map(topic => (\n-            <Card \n-              key={topic.id} \n-              className={cn(\n-                \"border-l-4 border-l-primary transition-all duration-200\",\n-                \"hover:shadow-md\"\n-              )}\n-            >\n-              <CardHeader className=\"cursor-pointer p-4\" onClick={() => setSelectedTopic(topic)}>\n-                <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-2\">\n-                  <CardTitle className=\"flex items-center gap-2 text-lg sm:text-xl\">\n-                    <BookOpen className=\"h-5 w-5 text-primary flex-shrink-0\" />\n-                    <span className=\"truncate\">{topic.title}</span>\n-                  </CardTitle>\n-                  <Badge variant=\"outline\" className=\"bg-primary/5 whitespace-nowrap\">\n-                    {topic.subtopics?.length || 0} Subtopics\n-                  </Badge>\n-                </div>\n+            <Card key={topic.id} className=\"border-l-4 border-l-primary\">\n+              <CardHeader>\n+                <CardTitle>{topic.title}</CardTitle>\n               </CardHeader>\n-              <CardContent className=\"p-4\">\n+              <CardContent>\n                 <div className=\"space-y-4\">\n-                  {topic.subtopics\n-                    ?.sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n+                  {subtopics\n+                    .filter(subtopic => subtopic.topic_id === topic.id)\n                     .map(subtopic => (\n-                      <div \n-                        key={subtopic.id} \n-                        className={cn(\n-                          \"space-y-4 p-4 rounded-lg\",\n-                          \"border border-border/50\",\n-                          \"hover:border-primary/50 transition-colors\",\n-                          selectedSubtopic?.id === subtopic.id && \"border-primary/50 bg-accent/5\"\n-                        )}\n-                      >\n-                        <div \n-                          className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-2 cursor-pointer\"\n-                          onClick={() => setSelectedSubtopic(subtopic)}\n-                        >\n-                          <h3 className=\"text-base sm:text-lg font-semibold flex items-center gap-2\">\n-                            <div className={cn(\n-                              \"w-2 h-2 rounded-full flex-shrink-0\",\n-                              selectedSubtopic?.id === subtopic.id ? \"bg-primary\" : \"bg-muted\"\n-                            )} />\n-                            <span className=\"truncate\">{subtopic.title}</span>\n-                          </h3>\n-                          <Badge variant=\"outline\" className=\"whitespace-nowrap\">\n-                            {subtopic.lessons?.length || 0} Lessons\n-                          </Badge>\n-                        </div>\n-                        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n-                          {subtopic.lessons\n-                            ?.sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n+                      <div key={subtopic.id} className=\"space-y-4\">\n+                        <h3 className=\"text-lg font-semibold\">{subtopic.title}</h3>\n+                        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n+                          {lessons\n+                            .filter(lesson => lesson.subtopic_id === subtopic.id)\n                             .map(lesson => (\n                               <LessonCard \n                                 key={lesson.id}\n-                                lesson={{\n-                                  ...lesson,\n-                                  color: getColorForIndex(subtopic.lessons.indexOf(lesson)),\n-                                  unlocked: true,\n-                                  completed: false,\n-                                  lessonNumber: `${subtopic.lessons.indexOf(lesson) + 1}`,\n-                                  totalTopics: String(topic.subtopics?.length || 0),\n-                                  difficulty: lesson.metadata?.difficulty || 'Beginner',\n-                                  customSubLessons: [{\n-                                    id: lesson.id,\n-                                    title: lesson.title,\n-                                    unlocked: true,\n-                                    completed: false,\n-                                    duration: lesson.duration || 15,\n-                                    description: lesson.description || ''\n-                                  }]\n-                                }}\n+                                lesson={lesson}\n                                 isSelected={selectedLesson?.id === lesson.id}\n                                 onSelect={setSelectedLesson}\n                               />\n-                          ))}\n+                            ))}\n                         </div>\n                       </div>\n                     ))}\n                 </div>\n               </CardContent>\n             </Card>\n           ))}\n-      </div>\n+      </div> */}\n \n-      {/* Selected Lesson Header - Sticky */}\n-      {selectedLesson && (\n-        <div className=\"sticky top-0 z-30 -mx-4 px-4 sm:mx-0 sm:px-0 py-2 bg-background/80 backdrop-blur-lg\">\n-          <Card className={`${selectedLesson.color} text-white rounded-xl`}>\n-            <CardHeader className=\"p-3 sm:p-4\">\n-              <div className=\"flex flex-col gap-3\">\n-                <CardTitle className=\"text-lg sm:text-2xl truncate\">{selectedLesson.title}</CardTitle>\n-                <div className=\"flex flex-wrap gap-3 text-sm\">\n-                  <div className=\"flex items-center gap-2\">\n-                    <BookOpen className=\"h-4 w-4\" />\n-                    <span className=\"truncate\">{selectedClass?.name}</span>\n+\n+<div className=\"mt-6 space-y-6\">\n+  {selectedGrade?.topics\n+    .sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n+    .map(topic => (\n+      <Card \n+        key={topic.id} \n+        className={cn(\n+          \"border-l-4 border-l-primary transition-all duration-200\",\n+          \"hover:shadow-md\"\n+        )}\n+      >\n+        <CardHeader className=\"cursor-pointer\" onClick={() => setSelectedTopic(topic)}>\n+          <div className=\"flex items-center justify-between\">\n+            <CardTitle className=\"flex items-center gap-2\">\n+              <BookOpen className=\"h-5 w-5 text-primary\" />\n+              {topic.title}\n+            </CardTitle>\n+            <Badge variant=\"outline\" className=\"bg-primary/5\">\n+              {topic.subtopics?.length || 0} Subtopics\n+            </Badge>\n+          </div>\n+        </CardHeader>\n+        <CardContent>\n+          <div className=\"space-y-6\">\n+            {topic.subtopics\n+              ?.sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n+              .map(subtopic => (\n+                <div \n+                  key={subtopic.id} \n+                  className={cn(\n+                    \"space-y-4 p-4 rounded-lg\",\n+                    \"border border-border/50\",\n+                    \"hover:border-primary/50 transition-colors\",\n+                    selectedSubtopic?.id === subtopic.id && \"border-primary/50 bg-accent/5\"\n+                  )}\n+                >\n+                  <div \n+                    className=\"flex items-center justify-between cursor-pointer\"\n+                    onClick={() => setSelectedSubtopic(subtopic)}\n+                  >\n+                    <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n+                      <div className={cn(\n+                        \"w-2 h-2 rounded-full\",\n+                        selectedSubtopic?.id === subtopic.id ? \"bg-primary\" : \"bg-muted\"\n+                      )} />\n+                      {subtopic.title}\n+                    </h3>\n+                    <Badge variant=\"outline\">\n+                      {subtopic.lessons?.length || 0} Lessons\n+                    </Badge>\n                   </div>\n-                  <div className=\"flex items-center gap-2\">\n-                    <Hash className=\"h-4 w-4\" />\n-                    <span>Lesson {selectedLesson.lessonNumber}</span>\n+                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n+                    {subtopic.lessons\n+                      ?.sort((a, b) => (a.order_index || 0) - (b.order_index || 0))\n+                      .map(lesson => (\n+                        <LessonCard \n+                          key={lesson.id}\n+                          lesson={{\n+                            ...lesson,\n+                            color: getColorForIndex(subtopic.lessons.indexOf(lesson)),\n+                            unlocked: true, // You can add your unlock logic here\n+                            completed: false, // Add completion logic\n+                            lessonNumber: `${subtopic.lessons.indexOf(lesson) + 1}`,\n+                            totalTopics: String(topic.subtopics?.length || 0),\n+                            difficulty: lesson.metadata?.difficulty || 'Beginner',\n+                            customSubLessons: [{\n+                              id: lesson.id,\n+                              title: lesson.title,\n+                              unlocked: true,\n+                              completed: false,\n+                              duration: lesson.duration || 15,\n+                              description: lesson.description || ''\n+                            }]\n+                          }}\n+                          isSelected={selectedLesson?.id === lesson.id}\n+                          onSelect={setSelectedLesson}\n+                        />\n+                    ))}\n                   </div>\n-                  <div className=\"flex items-center gap-2\">\n-                    <Clock className=\"h-4 w-4\" />\n-                    <span>{selectedLesson.duration} min</span>\n+                </div>\n+              ))}\n+          </div>\n+        </CardContent>\n+      </Card>\n+    ))}\n+</div>\n+\n+      <div className=\"sticky top-0 z-30 w-full\">\n+        {selectedLesson && (\n+          <Card className={`${selectedLesson.color} text-white rounded-xl`}>\n+            <CardHeader className=\"p-2 md:p-4 md:pl-6\">\n+              <CardTitle className=\"text-2xl\">{selectedLesson.title}</CardTitle>\n+              <div className=\"flex flex-row md:flex-row items-center text-white text-sm space-y-2 md:space-y-0 md:space-x-4 md:p-2\">\n+                <div className=\"flex items-center space-x-2\">\n+                  <BookOpen className=\"h-5 w-5 text-white\" />\n+                  <div className=\"text-sm font-medium\">\n+                    {selectedClass?.name}{\" \"}\n                   </div>\n-                  <div className=\"flex items-center gap-2\">\n-                    <Layers className=\"h-4 w-4\" />\n+                </div>\n+\n+                <div className=\"flex items-center space-x-2\">\n+                  <span>Lesson {selectedLesson.lessonNumber}</span>\n+                </div>\n+\n+                <div className=\"flex items-center space-x-2\">\n+                  <span className=\"flex items-center space-x-1\">\n+                    <Clock className=\"h-5 w-5 text-white\" />\n+                    <span>{selectedLesson.duration} minutes</span>\n+                  </span>\n+                </div>\n+\n+                <div className=\"flex items-center space-x-2\">\n+                  <span className=\"flex items-center space-x-1\">\n+                    <BookOpen className=\"h-5 w-5 text-white\" />\n                     <span>{selectedLesson.totalTopics} Topics</span>\n+                  </span>\n+                </div>\n+\n+                <div className=\"flex items-center space-x-2\">\n+                  <div className=\"flex items-center space-x-1\">\n+                    <CheckCircle2 className=\"h-5 w-5 text-white\" />\n+                    <span>1/5 Completed</span>\n                   </div>\n-                  <div className=\"flex items-center gap-2\">\n-                    <CheckCircle2 className=\"h-4 w-4\" />\n-                    <span>1/5 Complete</span>\n-                  </div>\n                 </div>\n               </div>\n             </CardHeader>\n           </Card>\n-        </div>\n-      )}\n+        )}\n+      </div>\n \n       {/* Dialog */}\n       <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n-        <DialogContent className=\"sm:max-w-[425px] p-0\">\n-          <DialogHeader className=\"p-6 pb-0\">\n+        <DialogContent>\n+          <DialogHeader>\n             <div className=\"flex flex-col space-y-1.5\">\n-              <DialogTitle className=\"flex items-center gap-2 text-lg\">\n+              <DialogTitle>\n                 {selectedSubLesson?.title}\n                 {selectedSubLesson?.completed && (\n-                  <CheckCircle2 className=\"h-5 w-5 text-green-500 flex-shrink-0\" />\n+                  <CheckCircle2 className=\"inline-block ml-2 h-5 w-5 text-green-500\" />\n                 )}\n               </DialogTitle>\n-              <DialogDescription className=\"space-y-4\">\n-                <div className=\"flex flex-wrap gap-3 text-sm\">\n-                  <span className=\"flex items-center gap-2\">\n-                    <Clock className=\"h-4 w-4\" />\n-                    {selectedSubLesson?.duration} minutes\n-                  </span>\n-                  <span className=\"flex items-center gap-2\">\n-                    <BookOpen className=\"h-4 w-4\" />\n-                    Part of {currentLesson?.title}\n-                  </span>\n-                </div>\n-                <p className=\"text-sm text-muted-foreground\">\n+              <DialogDescription>\n+                <span className=\"flex items-center gap-2 text-sm\">\n+                  Part of {currentLesson?.title}\n+                </span>\n+                <span className=\"block mt-2 text-sm text-muted-foreground\">\n                   {selectedSubLesson?.description}\n-                </p>\n+                </span>\n                 {selectedSubLesson?.completed && (\n-                  <div className=\"p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n+                  <div className=\"mt-4 p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                     <span className=\"text-green-700 dark:text-green-300 text-sm\">\n                       You have completed this lesson\n                     </span>\n                   </div>\n                 )}\n               </DialogDescription>\n             </div>\n           </DialogHeader>\n-          <DialogFooter className=\"p-6 pt-0\">\n+          <DialogFooter>\n             {!selectedSubLesson?.unlocked ? (\n-              <p className=\"text-sm text-muted-foreground\">\n+              <span className=\"text-sm text-muted-foreground\">\n                 Complete previous lessons to unlock this content\n-              </p>\n+              </span>\n             ) : selectedSubLesson.completed ? (\n-              <div className=\"flex flex-col sm:flex-row gap-2 w-full\">\n+              <>\n                 <Button\n-                  className=\"flex-1\"\n                   onClick={() => {\n                     if (currentLesson?.id && selectedSubLesson?.id) {\n                       handleStartLesson(currentLesson.id, selectedSubLesson.id);\n                     }\n@@ -1000,9 +1018,8 @@\n                   <ArrowRight className=\"ml-2 h-4 w-4\" />\n                 </Button>\n                 <Button\n                   variant=\"outline\"\n-                  className=\"flex-1\"\n                   onClick={() => {\n                     if (currentLesson?.id && selectedSubLesson?.id) {\n                       handleRestartLesson(currentLesson.id, selectedSubLesson.id);\n                     }\n@@ -1011,12 +1028,11 @@\n                 >\n                   Restart\n                   <RotateCcw className=\"ml-2 h-4 w-4\" />\n                 </Button>\n-              </div>\n+              </>\n             ) : (\n               <Button\n-                className=\"w-full sm:w-auto\"\n                 onClick={() => {\n                   if (currentLesson?.id && selectedSubLesson?.id) {\n                     handleStartLesson(currentLesson.id, selectedSubLesson.id);\n                   }\n@@ -1030,68 +1046,63 @@\n           </DialogFooter>\n         </DialogContent>\n       </Dialog>\n \n-      {/* Lessons Timeline */}\n-      <div className=\"space-y-8 pb-[100vh]\">\n+      {/* Rest of the component */}\n+      <div className=\"space-y-8 -z-10 pb-[100vh]\">\n         {lessons.map((lesson, index) => (\n           <div\n             id={lesson.id}\n             ref={setLessonRef(index)}\n             key={lesson.id}\n-            className=\"space-y-4\"\n+            className=\"space-y-4 mb-8\"\n           >\n-            <div className={cn(\"pt-2 pb-2 px-4\", index === 0 && \"-mt-10\")}>\n+            <div className={`pt-2 pb-2 px-4 ${index === 0 ? '-mt-10' : ''}`}>\n               <div className=\"flex w-full justify-center\">\n                 <div className=\"flex items-center relative max-w-lg w-full\">\n-                  <div className=\"flex-grow border-t border-gray-300 dark:border-gray-700\" />\n-                  <div className={cn(\n-                    lesson.color,\n-                    \"z-10 text-white rounded-3xl px-4 py-2 text-base sm:text-xl truncate\"\n-                  )}>\n+                  <div className=\"flex-grow border-t border-gray-300 dark:border-gray-700\"></div>\n+                  <div className={`${lesson.color} z-10 text-white rounded-3xl text-xl px-4`}>\n                     {lesson.title}\n                   </div>\n-                  <div className=\"flex-grow border-t border-gray-300 dark:border-gray-700\" />\n+                  <div className=\"flex-grow border-t border-gray-300 dark:border-gray-700\"></div>\n                 </div>\n               </div>\n             </div>\n \n-            <div className=\"flex flex-col gap-3\">\n+            <div className=\"flex flex-col gap-4\">\n               {lesson.customSubLessons.map((subLesson) => (\n                 <Link\n                   to={`/lesson/${lesson.id}/${subLesson.id}`}\n                   key={subLesson.id}\n                   onClick={(e) => handleSubLessonClick(e, subLesson, lesson)}\n-                  className={cn(\n-                    isLocked && !subLesson.unlocked && \"pointer-events-none\"\n-                  )}\n+                  className={`${isLocked && !subLesson.unlocked ? \"pointer-events-none\" : \"\"}`}\n                 >\n                   <Card className={cn(\n                     \"hover:border-primary transition-colors\",\n                     !subLesson.unlocked && \"opacity-50\"\n                   )}>\n                     <CardContent className=\"p-4\">\n-                      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-3\">\n-                        <div className=\"flex items-start sm:items-center gap-3\">\n+                      <div className=\"flex items-center justify-between\">\n+                        <div className=\"flex items-center gap-2\">\n                           {subLesson.unlocked ? (\n-                            <BookOpen className=\"h-5 w-5 text-primary flex-shrink-0\" />\n+                            <BookOpen className=\"h-5 w-5 text-primary\" />\n                           ) : (\n-                            <Lock className=\"h-5 w-5 text-muted-foreground flex-shrink-0\" />\n+                            <Lock className=\"h-5 w-5 text-muted-foreground\" />\n                           )}\n                           <div>\n                             <h3 className=\"font-medium\">{subLesson.title}</h3>\n-                            <p className=\"text-sm text-muted-foreground line-clamp-2 sm:line-clamp-1\">\n+                            <p className=\"text-sm text-muted-foreground\">\n                               {subLesson.description}\n                             </p>\n                           </div>\n                         </div>\n-                        <div className=\"flex items-center gap-3\">\n-                          <div className=\"flex items-center gap-1 text-sm text-muted-foreground whitespace-nowrap\">\n+                        <div className=\"flex items-center gap-4\">\n+                          <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n                             <Clock className=\"h-4 w-4\" />\n                             {subLesson.duration} min\n                           </div>\n                           {subLesson.completed && (\n-                            <CheckCircle2 className=\"h-5 w-5 text-green-500 flex-shrink-0\" />\n+                            <CheckCircle2 className=\"h-5 w-5 text-green-500\" />\n                           )}\n                         </div>\n                       </div>\n                     </CardContent>\n"
                },
                {
                    "date": 1739138260615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -714,9 +714,9 @@\n           </CardHeader>\n         </Card>\n \n         <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n-          {/* Upcoming Classes */}\n+          {/* Upcoming Classes\n           <Card className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800 p-6\">\n             <div className=\"flex items-center justify-between mb-6\">\n               <h2 className=\"text-xl font-semibold\">Upcoming Classes</h2>\n               <Calendar className=\"h-5 w-5 text-gray-500\" />\n@@ -757,12 +757,12 @@\n                   </div>\n                 </div>\n               ))}\n             </div>\n-          </Card>\n+          </Card> */}\n \n           {/* Top Performing Students */}\n-          <Card className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800 p-6\">\n+          {/* <Card className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800 p-6\">\n             <div className=\"flex items-center justify-between mb-6\">\n               <h2 className=\"text-xl font-semibold\">Top Performing Students</h2>\n               <Users className=\"h-5 w-5 text-gray-500\" />\n             </div>\n@@ -799,9 +799,9 @@\n                   </span>\n                 </div>\n               ))}\n             </div>\n-          </Card>\n+          </Card> */}\n         </div>\n       </div>\n \n       {/* Topics and their content\n"
                },
                {
                    "date": 1739138429339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -670,8 +670,29 @@\n                 selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/55 bg-color-secondary\"\n               )}\n               onClick={() => setSelectedGrade(grade)}\n             >\n+               <Button\n+          variant=\"outline\"\n+          size=\"sm\"\n+          onClick={toggleLock}\n+          className={cn(\n+            \"ml-4 transition-colors\",\n+            isLocked && \"border-primary text-primary hover:bg-primary/10\"\n+          )}\n+        >\n+          {isLocked ? (\n+            <>\n+              <Lock className=\"h-4 w-4 mr-2\" />\n+              Locked\n+            </>\n+          ) : (\n+            <>\n+              <Unlock className=\"h-4 w-4 mr-2\" />\n+              Unlocked\n+            </>\n+          )}\n+        </Button>\n               <CardHeader className=\"p-4\">\n                 <div className=\"flex items-center gap-3\">\n                   <GraduationCap className=\"h-5 w-5 text-primary\" />\n                   <span className=\"font-medium\">{grade.name}</span>\n"
                },
                {
                    "date": 1739138451536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -654,9 +654,13 @@\n         </div>\n       </div>\n     );\n   }\n+  const toggleLock = () => {\n+    setIsLocked(!isLocked);\n+  };\n \n+\n   return (\n     <div className=\"max-w-6xl w-full relative\">\n       {/* Grade Selection */}\n       <div className=\"flex gap-4 overflow-x-auto pb-2\">\n"
                },
                {
                    "date": 1739138602317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -654,29 +654,18 @@\n         </div>\n       </div>\n     );\n   }\n-  const toggleLock = () => {\n+const toggleLock = () => {\n     setIsLocked(!isLocked);\n   };\n \n \n   return (\n     <div className=\"max-w-6xl w-full relative\">\n       {/* Grade Selection */}\n       <div className=\"flex gap-4 overflow-x-auto pb-2\">\n-        {grades\n-          .sort((a, b) => a.level - b.level)\n-          .map(grade => (\n-            <Card\n-              key={grade.id}\n-              className={cn(\n-                \"cursor-pointer transition-all duration-200\",\n-                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/55 bg-color-secondary\"\n-              )}\n-              onClick={() => setSelectedGrade(grade)}\n-            >\n-               <Button\n+      <Button\n           variant=\"outline\"\n           size=\"sm\"\n           onClick={toggleLock}\n           className={cn(\n@@ -695,8 +684,19 @@\n               Unlocked\n             </>\n           )}\n         </Button>\n+        {grades\n+          .sort((a, b) => a.level - b.level)\n+          .map(grade => (\n+            <Card\n+              key={grade.id}\n+              className={cn(\n+                \"cursor-pointer transition-all duration-200\",\n+                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/55 bg-color-secondary\"\n+              )}\n+              onClick={() => setSelectedGrade(grade)}\n+            >            \n               <CardHeader className=\"p-4\">\n                 <div className=\"flex items-center gap-3\">\n                   <GraduationCap className=\"h-5 w-5 text-primary\" />\n                   <span className=\"font-medium\">{grade.name}</span>\n"
                },
                {
                    "date": 1739138678487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -654,61 +654,60 @@\n         </div>\n       </div>\n     );\n   }\n-const toggleLock = () => {\n+\n+  const toggleLock = () => {\n     setIsLocked(!isLocked);\n   };\n \n-\n   return (\n     <div className=\"max-w-6xl w-full relative\">\n       {/* Grade Selection */}\n       <div className=\"flex gap-4 overflow-x-auto pb-2\">\n-      <Button\n-          variant=\"outline\"\n-          size=\"sm\"\n-          onClick={toggleLock}\n-          className={cn(\n-            \"ml-4 transition-colors\",\n-            isLocked && \"border-primary text-primary hover:bg-primary/10\"\n-          )}\n-        >\n-          {isLocked ? (\n-            <>\n-              <Lock className=\"h-4 w-4 mr-2\" />\n-              Locked\n-            </>\n-          ) : (\n-            <>\n-              <Unlock className=\"h-4 w-4 mr-2\" />\n-              Unlocked\n-            </>\n-          )}\n-        </Button>\n         {grades\n           .sort((a, b) => a.level - b.level)\n           .map(grade => (\n-            <Card\n-              key={grade.id}\n-              className={cn(\n-                \"cursor-pointer transition-all duration-200\",\n-                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/55 bg-color-secondary\"\n-              )}\n-              onClick={() => setSelectedGrade(grade)}\n-            >            \n-              <CardHeader className=\"p-4\">\n-                <div className=\"flex items-center gap-3\">\n-                  <GraduationCap className=\"h-5 w-5 text-primary\" />\n-                  <span className=\"font-medium\">{grade.name}</span>\n-                </div>\n-              </CardHeader>\n-            </Card>\n+            <div key={grade.id} className=\"flex items-center gap-2\">\n+              <Button\n+                variant=\"outline\"\n+                size=\"sm\"\n+                onClick={toggleLock}\n+                className={cn(\n+                  \"transition-colors\",\n+                  isLocked && \"border-primary text-primary hover:bg-primary/10\"\n+                )}\n+              >\n+                {isLocked ? (\n+                  <>\n+                    <Lock className=\"h-4 w-4 mr-2\" />\n+                    Locked\n+                  </>\n+                ) : (\n+                  <>\n+                    <Unlock className=\"h-4 w-4 mr-2\" />\n+                    Unlocked\n+                  </>\n+                )}\n+              </Button>\n+              <Card\n+                className={cn(\n+                  \"cursor-pointer transition-all duration-200\",\n+                  selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/55 bg-color-secondary\"\n+                )}\n+                onClick={() => setSelectedGrade(grade)}\n+              >            \n+                <CardHeader className=\"p-4\">\n+                  <div className=\"flex items-center gap-3\">\n+                    <GraduationCap className=\"h-5 w-5 text-primary\" />\n+                    <span className=\"font-medium\">{grade.name}</span>\n+                  </div>\n+                </CardHeader>\n+              </Card>\n+            </div>\n           ))}\n       </div>\n \n-      \n-\n       {/* Overview Section */}\n       <div className=\"mb-6\">\n         <Card className=\"text-gray-700 bg-white dark:bg-gray-900 rounded-xl mb-4 border border-gray-200 dark:border-gray-800\">\n           <CardHeader>\n"
                },
                {
                    "date": 1739138790942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -654,60 +654,61 @@\n         </div>\n       </div>\n     );\n   }\n-\n-  const toggleLock = () => {\n+const toggleLock = () => {\n     setIsLocked(!isLocked);\n   };\n \n+\n   return (\n     <div className=\"max-w-6xl w-full relative\">\n       {/* Grade Selection */}\n       <div className=\"flex gap-4 overflow-x-auto pb-2\">\n         {grades\n           .sort((a, b) => a.level - b.level)\n           .map(grade => (\n-            <div key={grade.id} className=\"flex items-center gap-2\">\n-              <Button\n-                variant=\"outline\"\n-                size=\"sm\"\n-                onClick={toggleLock}\n-                className={cn(\n-                  \"transition-colors\",\n-                  isLocked && \"border-primary text-primary hover:bg-primary/10\"\n-                )}\n-              >\n-                {isLocked ? (\n-                  <>\n-                    <Lock className=\"h-4 w-4 mr-2\" />\n-                    Locked\n-                  </>\n-                ) : (\n-                  <>\n-                    <Unlock className=\"h-4 w-4 mr-2\" />\n-                    Unlocked\n-                  </>\n-                )}\n-              </Button>\n-              <Card\n-                className={cn(\n-                  \"cursor-pointer transition-all duration-200\",\n-                  selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/55 bg-color-secondary\"\n-                )}\n-                onClick={() => setSelectedGrade(grade)}\n-              >            \n-                <CardHeader className=\"p-4\">\n-                  <div className=\"flex items-center gap-3\">\n-                    <GraduationCap className=\"h-5 w-5 text-primary\" />\n-                    <span className=\"font-medium\">{grade.name}</span>\n-                  </div>\n-                </CardHeader>\n-              </Card>\n-            </div>\n+            <Card\n+              key={grade.id}\n+              className={cn(\n+                \"cursor-pointer transition-all duration-200\",\n+                selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/55 bg-color-secondary\"\n+              )}\n+              onClick={() => setSelectedGrade(grade)}\n+            >\n+               <Button\n+          variant=\"outline\"\n+          size=\"sm\"\n+          onClick={toggleLock}\n+          className={cn(\n+            \"ml-4 transition-colors\",\n+            isLocked && \"border-primary text-primary hover:bg-primary/10\"\n+          )}\n+        >\n+          {isLocked ? (\n+            <>\n+              <Lock className=\"h-4 w-4 mr-2\" />\n+              Locked\n+            </>\n+          ) : (\n+            <>\n+              <Unlock className=\"h-4 w-4 mr-2\" />\n+              Unlocked\n+            </>\n+          )}\n+        </Button>\n+              <CardHeader className=\"p-4\">\n+                <div className=\"flex items-center gap-3\">\n+                  <GraduationCap className=\"h-5 w-5 text-primary\" />\n+                  <span className=\"font-medium\">{grade.name}</span>\n+                </div>\n+              </CardHeader>\n+            </Card>\n           ))}\n       </div>\n \n+      \n+\n       {/* Overview Section */}\n       <div className=\"mb-6\">\n         <Card className=\"text-gray-700 bg-white dark:bg-gray-900 rounded-xl mb-4 border border-gray-200 dark:border-gray-800\">\n           <CardHeader>\n"
                },
                {
                    "date": 1739138853661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -674,29 +674,9 @@\n                 selectedGrade?.id === grade.id && \"border-primary border-l-4 border-l-primary hover:border-primary/50 bg-accent/55 bg-color-secondary\"\n               )}\n               onClick={() => setSelectedGrade(grade)}\n             >\n-               <Button\n-          variant=\"outline\"\n-          size=\"sm\"\n-          onClick={toggleLock}\n-          className={cn(\n-            \"ml-4 transition-colors\",\n-            isLocked && \"border-primary text-primary hover:bg-primary/10\"\n-          )}\n-        >\n-          {isLocked ? (\n-            <>\n-              <Lock className=\"h-4 w-4 mr-2\" />\n-              Locked\n-            </>\n-          ) : (\n-            <>\n-              <Unlock className=\"h-4 w-4 mr-2\" />\n-              Unlocked\n-            </>\n-          )}\n-        </Button>\n+               llllllll\n               <CardHeader className=\"p-4\">\n                 <div className=\"flex items-center gap-3\">\n                   <GraduationCap className=\"h-5 w-5 text-primary\" />\n                   <span className=\"font-medium\">{grade.name}</span>\n"
                }
            ],
            "date": 1739130215476,
            "name": "Commit-0",
            "content": "\"use client\";\n\nimport { useEffect, useRef, useState, memo, useCallback, useMemo } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {  ArrowRight, BookOpen, Calendar, CheckCircle2, Clock, Lock, Plus, RotateCcw, Unlock, Users, Shield, GraduationCap, } from \"lucide-react\";\nimport { useNavigate, Link } from \"react-router-dom\";\nimport ClassHeader from \"./ClassHeader\";\nimport {  Dialog,  DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, } from \"@/components/ui/dialog\";\nimport { Button } from \"../ui/button\";\nimport { Class, ExtendedLesson, SubLesson, ClassStudent, Student } from \"@/types\";\nimport { cn } from \"@/lib/utils\";\nimport { supabase } from \"@/lib/supabase\";\nimport type { Database } from \"@/types/supabase\";\nimport { useComponentLogger } from \"@/hooks/useComponentLogger\";\nimport type { PostgrestResponse, PostgrestError, SupabaseClient } from '@supabase/supabase-js';\nimport { transformLearningPathData } from \"@/lib/transforms/learningPath\";\n\nconst MAX_RETRIES = 3;\nconst RETRY_DELAY = 1000; // 1 second\n\n// Helper functions defined outside the component\nconst delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\nasync function fetchWithRetry<T>(\n  fetchFn: () => Promise<{ data: T[] | null; error: PostgrestError | null }>,\n  retries = MAX_RETRIES\n): Promise<T[]> {\n  let lastError: Error | null = null;\n\n  for (let attempt = 0; attempt < retries; attempt++) {\n    try {\n      const { data, error } = await fetchFn();\n      \n      if (error) {\n        throw new Error(error.message || 'Database operation failed');\n      }\n      \n      if (!data) {\n        throw new Error('No data returned from the database');\n      }\n\n      return data;\n    } catch (error) {\n      lastError = error instanceof Error ? error : new Error(String(error));\n      \n      if (attempt === retries - 1) {\n        throw lastError;\n      }\n      \n      await delay(RETRY_DELAY * Math.pow(2, attempt));\n    }\n  }\n\n  throw lastError || new Error('Failed to fetch data after retries');\n}\n\ntype Tables = Database['public']['Tables'];\ntype DbClass = Tables['classes']['Row'];\ntype DbLesson = Tables['lessons']['Row'] & {\n  topic?: { title: string };\n  subtopic?: { title: string };\n};\ntype DbStudent = Tables['students']['Row'];\ntype DbClassStudent = Tables['class_students']['Row'] & {\n  student: DbStudent;\n};\n\ninterface ExtendedClass extends Omit<DbClass, 'id'> {\n  id: string;\n  students: number;\n}\n\ninterface CustomLesson extends Omit<DbLesson, 'id' | 'status'> {\n  id: string;\n  status?: 'draft' | 'published';\n  color: string;\n  unlocked: boolean;\n  completed: boolean;\n  lessonNumber: string;\n  totalTopics: string;\n  difficulty: string;\n  customSubLessons: CustomSubLesson[];\n}\n\ninterface CustomSubLesson {\n  id: string;\n  title: string;\n  unlocked: boolean;\n  completed: boolean;\n  duration: number;\n  description: string;\n}\n\ninterface ClassHeaderProps {\n  classes: ExtendedClass[];\n  selectedClass: ExtendedClass | null;\n  onClassChange: (classData: ExtendedClass) => void;\n}\n\ninterface ClassCardProps {\n  classData: ExtendedClass;\n  isSelected: boolean;\n  onClassChange: (classData: ExtendedClass) => Promise<void>;\n  logError: (error: unknown) => void;\n}\n\nconst ClassCard = memo(({ \n  classData, \n  isSelected, \n  onClassChange, \n  logError \n}: ClassCardProps): JSX.Element => {\n  const handleClick = useCallback(async () => {\n    try {\n      await onClassChange(classData);\n    } catch (error) {\n      logError(error);\n    }\n  }, [classData, onClassChange, logError]);\n\n  const cardClassName = useMemo(() => \n    cn(\n      \"flex-shrink-0 cursor-pointer p-4\",\n      isSelected ? \"border-primary\" : \"border-transparent\"\n    ),\n    [isSelected]\n  );\n\n  return (\n    <Card\n      key={classData.id}\n      className={cardClassName}\n      onClick={handleClick}\n    >\n      <div className=\"flex items-center gap-2\">\n        <GraduationCap \n          className=\"h-5 w-5 text-primary\" \n        />\n        <span className=\"font-medium\">{classData.name}</span>\n      </div>\n      <div className=\"mt-2 text-sm text-gray-500\">\n        <div className=\"flex items-center gap-2\">\n          <Users className=\"h-4 w-4\" />\n          <span>{classData.students} Students</span>\n        </div>\n      </div>\n    </Card>\n  );\n});\n\nClassCard.displayName = 'ClassCard';\n\nexport function LearningPathTeacher() {\n  const navigate = useNavigate();\n  const { logError } = useComponentLogger('LearningPathTeacher');\n  const lessonRefs = useRef<(HTMLDivElement | null)[]>([]);\n  \n  const [lessons, setLessons] = useState<CustomLesson[]>([]);\n  const [selectedClass, setSelectedClass] = useState<ExtendedClass | null>(null);\n  const [classes, setClasses] = useState<ExtendedClass[]>([]);\n  const [selectedLesson, setSelectedLesson] = useState<CustomLesson | null>(null);\n  const [selectedSubLesson, setSelectedSubLesson] = useState<CustomSubLesson | null>(null);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [currentLesson, setCurrentLesson] = useState<CustomLesson | null>(null);\n  const [isLocked, setIsLocked] = useState(true);\n  const [classStudents, setClassStudents] = useState<DbStudent[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [fetchError, setFetchError] = useState<string | null>(null);\n  const [grades, setGrades] = useState<DbClass[]>([]);\n  const [topics, setTopics] = useState<DbClass[]>([]);\n  const [subtopics, setSubtopics] = useState<DbClass[]>([]);\n  const [selectedGrade, setSelectedGrade] = useState<DbClass | null>(null);\n  const [selectedTopic, setSelectedTopic] = useState<DbClass | null>(null);\n  const [selectedSubtopic, setSelectedSubtopic] = useState<DbClass | null>(null);\n\n  // Load lock state from localStorage\n  useEffect(() => {\n    try {\n      const savedLockState = localStorage.getItem('myCoursesTabLocked');\n      if (savedLockState !== null) {\n        setIsLocked(JSON.parse(savedLockState));\n      }\n    } catch (error) {\n      logError(error);\n    }\n  }, [logError]);\n\n  // Save lock state to localStorage\n  useEffect(() => {\n    try {\n      localStorage.setItem('myCoursesTabLocked', JSON.stringify(isLocked));\n    } catch (error) {\n      logError(error);\n    }\n  }, [isLocked, logError]);\n\n  // Fetch initial data\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        setIsLoading(true);\n        setFetchError(null);\n\n        const { data: classesData, error: classesError } = await supabase\n          .from('classes')\n          .select('*')\n          .order('created_at', { ascending: false });\n\n        if (classesError) {\n          throw new Error('Error fetching classes: ' + classesError.message);\n        }\n\n        if (!classesData || classesData.length === 0) {\n          throw new Error('No classes found');\n        }\n\n        const extendedClasses: ExtendedClass[] = classesData.map(cls => ({\n          ...cls,\n          id: String(cls.id),\n          students: 0 // Will be updated with actual count\n        }));\n\n        setClasses(extendedClasses);\n        setSelectedClass(extendedClasses[0]);\n\n        const { data: lessonsData, error: lessonsError } = await supabase\n          .from('lessons')\n          .select(`\n            *,\n            topic:topics(title),\n            subtopic:subtopics(title)\n          `)\n          .eq('grade_id', classesData[0].grade_id)\n          .order('order_index', { ascending: true });\n\n        if (lessonsError) {\n          throw new Error('Error fetching lessons: ' + lessonsError.message);\n        }\n\n        const customLessons: CustomLesson[] = lessonsData.map((lesson, index) => ({\n          ...lesson,\n          id: String(lesson.id),\n          status: lesson.status as 'draft' | 'published' | undefined,\n          color: getColorForIndex(index),\n          unlocked: index === 0,\n          completed: false,\n          lessonNumber: `${index + 1}`,\n          totalTopics: '5',\n          difficulty: 'Beginner',\n          customSubLessons: [\n            {\n              id: String(lesson.id),\n              title: lesson.title,\n              unlocked: index === 0,\n              completed: false,\n              duration: lesson.duration || 15,\n              description: lesson.description || ''\n            }\n          ]\n        }));\n\n        setLessons(customLessons);\n        if (customLessons.length > 0) {\n          setSelectedLesson(customLessons[0]);\n        }\n\n        const { data: studentsData, error: studentsError } = await supabase\n          .from('class_students')\n          .select(`\n            *,\n            student:students!class_students_student_id_fkey (\n              id,\n              first_name,\n              last_name,\n              roll_number,\n              email,\n              grade_id\n            )\n          `)\n          .eq('class_id', classesData[0].id);\n\n        if (studentsError) {\n          throw new Error('Error fetching students: ' + studentsError.message);\n        }\n\n        if (studentsData) {\n          const students = studentsData.map(data => data.student);\n          setClassStudents(students);\n          \n          // Update the selected class with the correct student count\n          setSelectedClass(prev => prev ? { ...prev, students: students.length } : null);\n          \n          // Update all classes with their student counts\n          setClasses(prev => prev.map(cls => \n            cls.id === extendedClasses[0].id \n              ? { ...cls, students: students.length }\n              : cls\n          ));\n        }\n\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'An unexpected error occurred';\n        setFetchError(errorMessage);\n        logError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchInitialData();\n  }, [logError]);\n\n  const handleClassChange = async (classData: ExtendedClass) => {\n    if (isLocked) return;\n    setSelectedClass(classData);\n    \n    try {\n      const { data: lessonsData, error: lessonsError } = await supabase\n        .from('lessons')\n        .select(`\n          *,\n          topic:topics(title),\n          subtopic:subtopics(title)\n        `)\n        .eq('grade_id', classData.grade_id)\n        .order('order_index', { ascending: true });\n\n      if (lessonsError) {\n        throw new Error('Error fetching lessons: ' + lessonsError.message);\n      }\n\n      const customLessons: CustomLesson[] = lessonsData.map((lesson, index) => ({\n        ...lesson,\n        id: String(lesson.id),\n        status: lesson.status as 'draft' | 'published' | undefined,\n        color: getColorForIndex(index),\n        unlocked: index === 0,\n        completed: false,\n        lessonNumber: `${index + 1}`,\n        totalTopics: '5',\n        difficulty: 'Beginner',\n        customSubLessons: [\n          {\n            id: String(lesson.id),\n            title: lesson.title,\n            unlocked: index === 0,\n            completed: false,\n            duration: lesson.duration || 15,\n            description: lesson.description || ''\n          }\n        ]\n      }));\n\n      setLessons(customLessons);\n    } catch (error) {\n      logError(error);\n    }\n  };\n\n  const getColorForIndex = (index: number): string => {\n    const colors = [\n      'bg-blue-500',\n      'bg-green-500',\n      'bg-purple-500',\n      'bg-orange-500',\n      'bg-pink-500'\n    ];\n    return colors[index % colors.length];\n  };\n\n  const handleSubLessonClick = (\n    e: React.MouseEvent,\n    subLesson: CustomSubLesson,\n    lesson: CustomLesson\n  ) => {\n    if (isLocked && !subLesson.unlocked) {\n      e.preventDefault();\n      return;\n    }\n    e.preventDefault();\n    setSelectedSubLesson(subLesson);\n    setCurrentLesson(lesson);\n    setDialogOpen(true);\n  };\n\n  const handleStartLesson = (lessonId: string, subLessonId: string) => {\n    if (isLocked) return;\n    setDialogOpen(false);\n    navigate(`/lesson/${lessonId}/${subLessonId}`);\n  };\n\n  const handleRestartLesson = (lessonId: string, subLessonId: string) => {\n    if (isLocked) return;\n    setDialogOpen(false);\n    navigate(`/lesson/${lessonId}/${subLessonId}?restart=true`);\n  };\n\n  const handleRetry = () => {\n    window.location.reload();\n  };\n\n  const setLessonRef = (index: number) => (el: HTMLDivElement | null) => {\n    lessonRefs.current[index] = el;\n  };\n\n  // Intersection Observer effect\n  useEffect(() => {\n    if (!lessons.length) return;\n\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            const lessonInView = lessons.find(\n              (lesson) => lesson.id === entry.target.id\n            );\n            if (lessonInView) {\n              setSelectedLesson(lessonInView);\n            }\n          }\n        });\n      },\n      {\n        root: null,\n        rootMargin: \"-05% 0px -85% 0px\",\n        threshold: [0, 0.25, 0.5, 0.75, 1],\n      }\n    );\n\n    lessonRefs.current.forEach((ref) => {\n      if (ref) observer.observe(ref);\n    });\n\n    return () => {\n      lessonRefs.current.forEach((ref) => {\n        if (ref) observer.unobserve(ref);\n      });\n    };\n  }, [lessons]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"text-center space-y-4\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"text-muted-foreground\">Loading learning path...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (fetchError) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"text-center space-y-4 p-6 bg-destructive/10 rounded-lg\">\n          <Shield className=\"h-8 w-8 text-destructive mx-auto\" />\n          <p className=\"text-destructive font-medium\">{fetchError}</p>\n          <Button \n            variant=\"outline\" \n            onClick={handleRetry}\n            className=\"mt-4\"\n          >\n            <RotateCcw className=\"h-4 w-4 mr-2\" />\n            Retry\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-6xl w-full relative\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex gap-4 overflow-x-auto pb-2\">\n          {classes.map(classData => (\n            <ClassCard\n              key={classData.id}\n              classData={classData}\n              isSelected={selectedClass?.id === classData.id}\n              onClassChange={handleClassChange}\n              logError={logError}\n            />\n          ))}\n        </div>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => setIsLocked(!isLocked)}\n          className={cn(\n            \"ml-4 transition-colors\",\n            isLocked && \"border-primary text-primary hover:bg-primary/10\"\n          )}\n        >\n          {isLocked ? (\n            <>\n              <Lock className=\"h-4 w-4 mr-2\" />\n              Locked\n            </>\n          ) : (\n            <>\n              <Unlock className=\"h-4 w-4 mr-2\" />\n              Unlocked\n            </>\n          )}\n        </Button>\n      </div>\n\n      {isLocked && (\n        <div className=\"mb-4 p-3 bg-primary/10 border border-primary/20 rounded-lg flex items-center gap-2 text-sm text-primary\">\n          <Shield className=\"h-4 w-4\" />\n          This course is currently locked to prevent unintended changes. Unlock to make modifications.\n        </div>\n      )}\n\n      {/* Overview Section */}\n      <div className=\"mb-6\">\n        <Card className=\"text-gray-700 bg-white dark:bg-gray-900 rounded-xl mb-4 border border-gray-200 dark:border-gray-800\">\n          <CardHeader>\n            <CardTitle className=\"text-2xl\">{selectedClass?.name}</CardTitle>\n            <div className=\"grid grid-cols-4 gap-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Users size={16} className=\"text-blue-300\" />\n                <span className=\"text-sm font-medium\">\n                  {classStudents.length} Students\n                </span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <BookOpen size={16} className=\"text-green-300\" />\n                <span className=\"text-sm font-medium\">\n                  {lessons.length} Lessons\n                </span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Calendar size={16} className=\"text-purple-300\" />\n                <span className=\"text-sm font-medium\">\n                  0 Assignments\n                </span>\n              </div>\n              <div className=\"text-sm mt-2\">\n                {Math.round((lessons.filter(l => l.completed).length / lessons.length) * 100)}% Completed\n              </div>\n            </div>\n          </CardHeader>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {/* Upcoming Classes */}\n          <Card className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800 p-6\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h2 className=\"text-xl font-semibold\">Upcoming Classes</h2>\n              <Calendar className=\"h-5 w-5 text-gray-500\" />\n            </div>\n            <div className=\"space-y-4\">\n              {[\n                {\n                  id: 1,\n                  subject: \"English Literature\",\n                  time: \"09:00 AM\",\n                  students: 28,\n                  topic: \"Shakespeare: Romeo & Juliet\",\n                  room: \"Room 101\",\n                },\n                {\n                  id: 2,\n                  subject: \"Creative Writing\",\n                  time: \"11:30 AM\",\n                  students: 24,\n                  topic: \"Character Development\",\n                  room: \"Room 203\",\n                },\n              ].map((cls) => (\n                <div\n                  key={cls.id}\n                  className=\"flex items-center justify-between p-4 bg-white dark:bg-gray-900 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors\"\n                >\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-medium\">{cls.subject}</h3>\n                    <p className=\"text-sm text-gray-600\">{cls.topic}</p>\n                    <div className=\"flex items-center gap-4 mt-2 text-sm text-gray-500\">\n                      <span>{cls.time}</span>\n                      <span>•</span>\n                      <span>{cls.room}</span>\n                      <span>•</span>\n                      <span>{cls.students} students</span>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </Card>\n\n          {/* Top Performing Students */}\n          <Card className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800 p-6\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h2 className=\"text-xl font-semibold\">Top Performing Students</h2>\n              <Users className=\"h-5 w-5 text-gray-500\" />\n            </div>\n            <div className=\"space-y-4\">\n              {[\n                {\n                  id: 1,\n                  name: \"Emma Thompson\",\n                  avatar: \"https://images.unsplash.com/photo-1494790108377-be9c29b29330?w=150\",\n                  progress: 92,\n                },\n                {\n                  id: 2,\n                  name: \"Michael Chen\",\n                  avatar: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150\",\n                  progress: 88,\n                },\n              ].map((student) => (\n                <div key={student.id} className=\"flex items-center gap-4\">\n                  <img\n                    src={student.avatar}\n                    alt={student.name}\n                    className=\"w-10 h-10 rounded-full object-cover\"\n                  />\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-medium\">{student.name}</h3>\n                    <div \n                      className={`progress-bar`}\n                      data-progress={`${student.progress}`}\n                    />\n                  </div>\n                  <span className=\"text-lg font-semibold\">\n                    {student.progress}%\n                  </span>\n                </div>\n              ))}\n            </div>\n          </Card>\n        </div>\n      </div>\n\n      <div className=\"sticky top-0 z-30 w-full\">\n        {selectedLesson && (\n          <Card className={`${selectedLesson.color} text-white rounded-xl`}>\n            <CardHeader className=\"p-2 md:p-4 md:pl-6\">\n              <CardTitle className=\"text-2xl\">{selectedLesson.title}</CardTitle>\n              <div className=\"flex flex-row md:flex-row items-center text-white text-sm space-y-2 md:space-y-0 md:space-x-4 md:p-2\">\n                <div className=\"flex items-center space-x-2\">\n                  <BookOpen className=\"h-5 w-5 text-white\" />\n                  <div className=\"text-sm font-medium\">\n                    {selectedClass?.name}{\" \"}\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <span>Lesson {selectedLesson.lessonNumber}</span>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"flex items-center space-x-1\">\n                    <Clock className=\"h-5 w-5 text-white\" />\n                    <span>{selectedLesson.duration} minutes</span>\n                  </span>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"flex items-center space-x-1\">\n                    <BookOpen className=\"h-5 w-5 text-white\" />\n                    <span>{selectedLesson.totalTopics} Topics</span>\n                  </span>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"flex items-center space-x-1\">\n                    <CheckCircle2 className=\"h-5 w-5 text-white\" />\n                    <span>1/5 Completed</span>\n                  </div>\n                </div>\n              </div>\n            </CardHeader>\n          </Card>\n        )}\n      </div>\n\n      {/* Dialog */}\n      <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <div className=\"flex flex-col space-y-1.5\">\n              <DialogTitle>\n                {selectedSubLesson?.title}\n                {selectedSubLesson?.completed && (\n                  <CheckCircle2 className=\"inline-block ml-2 h-5 w-5 text-green-500\" />\n                )}\n              </DialogTitle>\n              <DialogDescription>\n                <span className=\"flex items-center gap-2 text-sm\">\n                  Part of {currentLesson?.title}\n                </span>\n                <span className=\"block mt-2 text-sm text-muted-foreground\">\n                  {selectedSubLesson?.description}\n                </span>\n                {selectedSubLesson?.completed && (\n                  <div className=\"mt-4 p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                    <span className=\"text-green-700 dark:text-green-300 text-sm\">\n                      You have completed this lesson\n                    </span>\n                  </div>\n                )}\n              </DialogDescription>\n            </div>\n          </DialogHeader>\n          <DialogFooter>\n            {!selectedSubLesson?.unlocked ? (\n              <span className=\"text-sm text-muted-foreground\">\n                Complete previous lessons to unlock this content\n              </span>\n            ) : selectedSubLesson.completed ? (\n              <>\n                <Button\n                  onClick={() => {\n                    if (currentLesson?.id && selectedSubLesson?.id) {\n                      handleStartLesson(currentLesson.id, selectedSubLesson.id);\n                    }\n                  }}\n                  disabled={isLocked}\n                >\n                  Continue\n                  <ArrowRight className=\"ml-2 h-4 w-4\" />\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    if (currentLesson?.id && selectedSubLesson?.id) {\n                      handleRestartLesson(currentLesson.id, selectedSubLesson.id);\n                    }\n                  }}\n                  disabled={isLocked}\n                >\n                  Restart\n                  <RotateCcw className=\"ml-2 h-4 w-4\" />\n                </Button>\n              </>\n            ) : (\n              <Button\n                onClick={() => {\n                  if (currentLesson?.id && selectedSubLesson?.id) {\n                    handleStartLesson(currentLesson.id, selectedSubLesson.id);\n                  }\n                }}\n                disabled={isLocked}\n              >\n                Start Lesson\n                <ArrowRight className=\"ml-2 h-4 w-4\" />\n              </Button>\n            )}\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Rest of the component */}\n      <div className=\"space-y-8 -z-10 pb-[100vh]\">\n        {lessons.map((lesson, index) => (\n          <div\n            id={lesson.id}\n            ref={setLessonRef(index)}\n            key={lesson.id}\n            className=\"space-y-4 mb-8\"\n          >\n            <div className={`pt-2 pb-2 px-4 ${index === 0 ? '-mt-10' : ''}`}>\n              <div className=\"flex w-full justify-center\">\n                <div className=\"flex items-center relative max-w-lg w-full\">\n                  <div className=\"flex-grow border-t border-gray-300 dark:border-gray-700\"></div>\n                  <div className={`${lesson.color} z-10 text-white rounded-3xl text-xl px-4`}>\n                    {lesson.title}\n                  </div>\n                  <div className=\"flex-grow border-t border-gray-300 dark:border-gray-700\"></div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex flex-col gap-4\">\n              {lesson.customSubLessons.map((subLesson) => (\n                <Link\n                  to={`/lesson/${lesson.id}/${subLesson.id}`}\n                  key={subLesson.id}\n                  onClick={(e) => handleSubLessonClick(e, subLesson, lesson)}\n                  className={`${isLocked && !subLesson.unlocked ? \"pointer-events-none\" : \"\"}`}\n                >\n                  <Card className={cn(\n                    \"hover:border-primary transition-colors\",\n                    !subLesson.unlocked && \"opacity-50\"\n                  )}>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          {subLesson.unlocked ? (\n                            <BookOpen className=\"h-5 w-5 text-primary\" />\n                          ) : (\n                            <Lock className=\"h-5 w-5 text-muted-foreground\" />\n                          )}\n                          <div>\n                            <h3 className=\"font-medium\">{subLesson.title}</h3>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {subLesson.description}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-4\">\n                          <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n                            <Clock className=\"h-4 w-4\" />\n                            {subLesson.duration} min\n                          </div>\n                          {subLesson.completed && (\n                            <CheckCircle2 className=\"h-5 w-5 text-green-500\" />\n                          )}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </Link>\n              ))}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}"
        }
    ]
}