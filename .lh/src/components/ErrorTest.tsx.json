{
    "sourceFile": "src/components/ErrorTest.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1739011226735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739011243512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,8 @@\n // Component that throws an error\r\n const BuggyComponent: React.FC = () => {\r\n   logger.warn('BuggyComponent will throw a test error', 'ErrorTest');\r\n   throw new Error('This is a simulated component error');\r\n-  return null;\r\n };\r\n \r\n const ErrorTest: React.FC = () => {\r\n   const [showBuggy, setShowBuggy] = useState(false);\r\n"
                },
                {
                    "date": 1739349820175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,20 +6,36 @@\n import { DEBUG_CONFIG } from '../lib/config';\r\n \r\n // Component that throws an error\r\n const BuggyComponent: React.FC = () => {\r\n-  logger.warn('BuggyComponent will throw a test error', 'ErrorTest');\r\n+  logger.warn('BuggyComponent will throw a test error', {\r\n+    source: 'ErrorTest',\r\n+    context: {\r\n+      component: 'BuggyComponent',\r\n+      isSimulated: true,\r\n+      severity: 'info'\r\n+    }\r\n+  });\r\n   throw new Error('This is a simulated component error');\r\n };\r\n \r\n const ErrorTest: React.FC = () => {\r\n   const [showBuggy, setShowBuggy] = useState(false);\r\n   const errorWatcher = ErrorWatcher.getInstance();\r\n \r\n   const simulateNetworkError = () => {\r\n+    logger.warn('Simulating network error', {\r\n+      source: 'ErrorTest',\r\n+      context: {\r\n+        type: 'network',\r\n+        endpoint: '/api/data',\r\n+        statusCode: 500\r\n+      }\r\n+    });\r\n+\r\n     errorWatcher.trackError({\r\n       message: 'Failed to fetch data from API',\r\n-      severity: 'warning', // Changed to warning since this is a test\r\n+      severity: 'warning',\r\n       source: 'NetworkRequest',\r\n       context: {\r\n         endpoint: '/api/data',\r\n         statusCode: 500\r\n@@ -27,8 +43,16 @@\n     });\r\n   };\r\n \r\n   const simulateFatalError = () => {\r\n+    logger.error('Simulating fatal error', {\r\n+      source: 'ErrorTest',\r\n+      context: {\r\n+        type: 'fatal',\r\n+        reason: 'Critical system failure'\r\n+      }\r\n+    });\r\n+\r\n     errorWatcher.trackError({\r\n       message: 'Application encountered a fatal error',\r\n       severity: 'fatal',\r\n       source: 'AppCore',\r\n@@ -38,11 +62,20 @@\n     });\r\n   };\r\n \r\n   const simulateWarning = () => {\r\n+    logger.warn('Simulating performance warning', {\r\n+      source: 'ErrorTest',\r\n+      context: {\r\n+        type: 'performance',\r\n+        metric: 'response_time',\r\n+        value: '2500ms'\r\n+      }\r\n+    });\r\n+\r\n     errorWatcher.trackError({\r\n       message: 'Performance degradation detected',\r\n-      severity: 'info', // Changed to info since this is a test\r\n+      severity: 'info',\r\n       source: 'PerformanceMonitor',\r\n       context: {\r\n         metric: 'response_time',\r\n         value: '2500ms'\r\n@@ -50,8 +83,16 @@\n     });\r\n   };\r\n \r\n   const simulateAuthError = () => {\r\n+    logger.error('Simulating auth error', {\r\n+      source: 'ErrorTest',\r\n+      context: {\r\n+        type: 'auth',\r\n+        reason: 'Token expired'\r\n+      }\r\n+    });\r\n+\r\n     errorWatcher.trackError({\r\n       message: 'Authentication token expired',\r\n       severity: 'error',\r\n       source: 'AuthService',\r\n@@ -107,9 +148,15 @@\n                 Simulate Auth Error\r\n               </button>\r\n \r\n               <button\r\n-                onClick={() => setShowBuggy(true)}\r\n+                onClick={() => {\r\n+                  logger.info('Triggering component error', {\r\n+                    source: 'ErrorTest',\r\n+                    context: { action: 'showBuggy', value: true }\r\n+                  });\r\n+                  setShowBuggy(true);\r\n+                }}\r\n                 className=\"px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors\"\r\n               >\r\n                 Trigger Component Error\r\n               </button>\r\n"
                },
                {
                    "date": 1739349874585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n     });\r\n \r\n     errorWatcher.trackError({\r\n       message: 'Performance degradation detected',\r\n-      severity: 'info',\r\n+      severity: 'info', // Changed to info since this is a test\r\n       source: 'PerformanceMonitor',\r\n       context: {\r\n         metric: 'response_time',\r\n         value: '2500ms'\r\n"
                },
                {
                    "date": 1739349992500,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React, { useState } from 'react';\r\n+import React, { useState, useCallback } from 'react';\r\n import { ErrorWatcher } from '../lib/errorWatcher';\r\n import { ErrorMonitor } from '../lib/errorWatcher/components/ErrorMonitor';\r\n import { ErrorBoundary } from '../lib/errorWatcher/components/ErrorBoundary';\r\n import { logger } from '../lib/logger';\r\n@@ -11,9 +11,10 @@\n     source: 'ErrorTest',\r\n     context: {\r\n       component: 'BuggyComponent',\r\n       isSimulated: true,\r\n-      severity: 'info'\r\n+      severity: 'info',\r\n+      timestamp: new Date().toISOString()\r\n     }\r\n   });\r\n   throw new Error('This is a simulated component error');\r\n };\r\n@@ -21,15 +22,16 @@\n const ErrorTest: React.FC = () => {\r\n   const [showBuggy, setShowBuggy] = useState(false);\r\n   const errorWatcher = ErrorWatcher.getInstance();\r\n \r\n-  const simulateNetworkError = () => {\r\n+  const simulateNetworkError = useCallback(() => {\r\n     logger.warn('Simulating network error', {\r\n       source: 'ErrorTest',\r\n       context: {\r\n         type: 'network',\r\n         endpoint: '/api/data',\r\n-        statusCode: 500\r\n+        statusCode: 500,\r\n+        timestamp: new Date().toISOString()\r\n       }\r\n     });\r\n \r\n     errorWatcher.trackError({\r\n@@ -37,39 +39,43 @@\n       severity: 'warning',\r\n       source: 'NetworkRequest',\r\n       context: {\r\n         endpoint: '/api/data',\r\n-        statusCode: 500\r\n+        statusCode: 500,\r\n+        timestamp: new Date().toISOString()\r\n       }\r\n     });\r\n-  };\r\n+  }, []);\r\n \r\n-  const simulateFatalError = () => {\r\n+  const simulateFatalError = useCallback(() => {\r\n     logger.error('Simulating fatal error', {\r\n       source: 'ErrorTest',\r\n       context: {\r\n         type: 'fatal',\r\n-        reason: 'Critical system failure'\r\n+        reason: 'Critical system failure',\r\n+        timestamp: new Date().toISOString()\r\n       }\r\n     });\r\n \r\n     errorWatcher.trackError({\r\n       message: 'Application encountered a fatal error',\r\n       severity: 'fatal',\r\n       source: 'AppCore',\r\n       context: {\r\n-        reason: 'Critical system failure'\r\n+        reason: 'Critical system failure',\r\n+        timestamp: new Date().toISOString()\r\n       }\r\n     });\r\n-  };\r\n+  }, []);\r\n \r\n-  const simulateWarning = () => {\r\n+  const simulateWarning = useCallback(() => {\r\n     logger.warn('Simulating performance warning', {\r\n       source: 'ErrorTest',\r\n       context: {\r\n         type: 'performance',\r\n         metric: 'response_time',\r\n-        value: '2500ms'\r\n+        value: '2500ms',\r\n+        timestamp: new Date().toISOString()\r\n       }\r\n     });\r\n \r\n     errorWatcher.trackError({\r\n@@ -77,32 +83,47 @@\n       severity: 'info', // Changed to info since this is a test\r\n       source: 'PerformanceMonitor',\r\n       context: {\r\n         metric: 'response_time',\r\n-        value: '2500ms'\r\n+        value: '2500ms',\r\n+        timestamp: new Date().toISOString()\r\n       }\r\n     });\r\n-  };\r\n+  }, []);\r\n \r\n-  const simulateAuthError = () => {\r\n+  const simulateAuthError = useCallback(() => {\r\n     logger.error('Simulating auth error', {\r\n       source: 'ErrorTest',\r\n       context: {\r\n         type: 'auth',\r\n-        reason: 'Token expired'\r\n+        reason: 'Token expired',\r\n+        timestamp: new Date().toISOString()\r\n       }\r\n     });\r\n \r\n     errorWatcher.trackError({\r\n       message: 'Authentication token expired',\r\n       severity: 'error',\r\n       source: 'AuthService',\r\n       context: {\r\n-        reason: 'Token expired'\r\n+        reason: 'Token expired',\r\n+        timestamp: new Date().toISOString()\r\n       }\r\n     });\r\n-  };\r\n+  }, []);\r\n \r\n+  const handleComponentError = useCallback(() => {\r\n+    logger.info('Triggering component error', {\r\n+      source: 'ErrorTest',\r\n+      context: { \r\n+        action: 'showBuggy', \r\n+        value: true,\r\n+        timestamp: new Date().toISOString()\r\n+      }\r\n+    });\r\n+    setShowBuggy(true);\r\n+  }, []);\r\n+\r\n   return (\r\n     <ErrorBoundary source=\"ErrorTest\">\r\n       <div className=\"p-8 max-w-4xl mx-auto\">\r\n         <div className=\"flex justify-between items-center mb-6\">\r\n@@ -148,15 +169,9 @@\n                 Simulate Auth Error\r\n               </button>\r\n \r\n               <button\r\n-                onClick={() => {\r\n-                  logger.info('Triggering component error', {\r\n-                    source: 'ErrorTest',\r\n-                    context: { action: 'showBuggy', value: true }\r\n-                  });\r\n-                  setShowBuggy(true);\r\n-                }}\r\n+                onClick={handleComponentError}\r\n                 className=\"px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors\"\r\n               >\r\n                 Trigger Component Error\r\n               </button>\r\n"
                }
            ],
            "date": 1739011226735,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\r\nimport { ErrorWatcher } from '../lib/errorWatcher';\r\nimport { ErrorMonitor } from '../lib/errorWatcher/components/ErrorMonitor';\r\nimport { ErrorBoundary } from '../lib/errorWatcher/components/ErrorBoundary';\r\nimport { logger } from '../lib/logger';\r\nimport { DEBUG_CONFIG } from '../lib/config';\r\n\r\n// Component that throws an error\r\nconst BuggyComponent: React.FC = () => {\r\n  logger.warn('BuggyComponent will throw a test error', 'ErrorTest');\r\n  throw new Error('This is a simulated component error');\r\n  return null;\r\n};\r\n\r\nconst ErrorTest: React.FC = () => {\r\n  const [showBuggy, setShowBuggy] = useState(false);\r\n  const errorWatcher = ErrorWatcher.getInstance();\r\n\r\n  const simulateNetworkError = () => {\r\n    errorWatcher.trackError({\r\n      message: 'Failed to fetch data from API',\r\n      severity: 'warning', // Changed to warning since this is a test\r\n      source: 'NetworkRequest',\r\n      context: {\r\n        endpoint: '/api/data',\r\n        statusCode: 500\r\n      }\r\n    });\r\n  };\r\n\r\n  const simulateFatalError = () => {\r\n    errorWatcher.trackError({\r\n      message: 'Application encountered a fatal error',\r\n      severity: 'fatal',\r\n      source: 'AppCore',\r\n      context: {\r\n        reason: 'Critical system failure'\r\n      }\r\n    });\r\n  };\r\n\r\n  const simulateWarning = () => {\r\n    errorWatcher.trackError({\r\n      message: 'Performance degradation detected',\r\n      severity: 'info', // Changed to info since this is a test\r\n      source: 'PerformanceMonitor',\r\n      context: {\r\n        metric: 'response_time',\r\n        value: '2500ms'\r\n      }\r\n    });\r\n  };\r\n\r\n  const simulateAuthError = () => {\r\n    errorWatcher.trackError({\r\n      message: 'Authentication token expired',\r\n      severity: 'error',\r\n      source: 'AuthService',\r\n      context: {\r\n        reason: 'Token expired'\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <ErrorBoundary source=\"ErrorTest\">\r\n      <div className=\"p-8 max-w-4xl mx-auto\">\r\n        <div className=\"flex justify-between items-center mb-6\">\r\n          <h1 className=\"text-2xl font-bold text-gray-900\">Error Watcher Test</h1>\r\n          {DEBUG_CONFIG.enabled && (\r\n            <div className=\"text-sm text-gray-500\">\r\n              Debug Mode: {DEBUG_CONFIG.level}\r\n            </div>\r\n          )}\r\n        </div>\r\n        \r\n        <div className=\"space-y-6\">\r\n          {/* Test Controls */}\r\n          <div className=\"bg-white p-6 rounded-lg shadow-md space-y-4\">\r\n            <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">Test Error Scenarios</h2>\r\n            \r\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\r\n              <button\r\n                onClick={simulateNetworkError}\r\n                className=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors\"\r\n              >\r\n                Simulate Network Error\r\n              </button>\r\n\r\n              <button\r\n                onClick={simulateFatalError}\r\n                className=\"px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700 transition-colors\"\r\n              >\r\n                Simulate Fatal Error\r\n              </button>\r\n\r\n              <button\r\n                onClick={simulateWarning}\r\n                className=\"px-4 py-2 bg-yellow-600 text-white rounded hover:bg-yellow-700 transition-colors\"\r\n              >\r\n                Simulate Warning\r\n              </button>\r\n\r\n              <button\r\n                onClick={simulateAuthError}\r\n                className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors\"\r\n              >\r\n                Simulate Auth Error\r\n              </button>\r\n\r\n              <button\r\n                onClick={() => setShowBuggy(true)}\r\n                className=\"px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors\"\r\n              >\r\n                Trigger Component Error\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Component Error Test */}\r\n          <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n            <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">Component Error Boundary Test</h2>\r\n            <ErrorBoundary source=\"BuggyComponent\">\r\n              {showBuggy && <BuggyComponent />}\r\n            </ErrorBoundary>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Error Monitor */}\r\n        <ErrorMonitor />\r\n      </div>\r\n    </ErrorBoundary>\r\n  );\r\n};\r\n\r\nexport default ErrorTest;"
        }
    ]
}