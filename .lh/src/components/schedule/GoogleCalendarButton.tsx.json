{
    "sourceFile": "src/components/schedule/GoogleCalendarButton.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1740752702042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740753411768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,214 +1,33 @@\n-import React, { useState } from 'react';\r\n-import { Button } from '@/components/ui/button';\r\n+import React from 'react';\r\n+import { Button } from '../ui/button';\r\n import { Calendar, Loader2 } from 'lucide-react';\r\n-import { toast } from '@/components/ui/use-toast';\r\n+import { useGoogleCalendar } from '../../hooks/useGoogleCalendar';\r\n \r\n-// Define the authentication and calendar event interfaces\r\n-interface GoogleAuthResponse {\r\n-  access_token: string;\r\n-  expires_in: number;\r\n-  refresh_token?: string;\r\n-  token_type: string;\r\n-}\r\n+export function GoogleCalendarButton() {\r\n+  const { isConnected, loading, connect, disconnect } = useGoogleCalendar();\r\n \r\n-interface CalendarEvent {\r\n-  id: string;\r\n-  title: string;\r\n-  start: Date;\r\n-  end: Date;\r\n-  description?: string;\r\n-  location?: string;\r\n-}\r\n+  if (loading) {\r\n+    return (\r\n+      <Button variant=\"outline\" disabled>\r\n+        <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\r\n+        Connecting...\r\n+      </Button>\r\n+    );\r\n+  }\r\n \r\n-interface GoogleCalendarButtonProps {\r\n-  events?: CalendarEvent[];\r\n-  onSyncComplete?: (events: CalendarEvent[]) => void;\r\n-  variant?: 'default' | 'outline' | 'secondary';\r\n-  size?: 'default' | 'sm' | 'lg';\r\n-}\r\n+  if (isConnected) {\r\n+    return (\r\n+      <Button variant=\"outline\" onClick={disconnect}>\r\n+        <Calendar className=\"h-4 w-4 mr-2\" />\r\n+        Disconnect Google Calendar\r\n+      </Button>\r\n+    );\r\n+  }\r\n \r\n-const GoogleCalendarButton: React.FC<GoogleCalendarButtonProps> = ({\r\n-  events = [],\r\n-  onSyncComplete,\r\n-  variant = 'outline',\r\n-  size = 'sm'\r\n-}) => {\r\n-  const [isLoading, setIsLoading] = useState(false);\r\n-  const [isConnected, setIsConnected] = useState(false);\r\n-\r\n-  // Google API Client ID - should be moved to environment variables\r\n-  const CLIENT_ID = import.meta.env.VITE_GOOGLE_CLIENT_ID || '';\r\n-  const SCOPES = 'https://www.googleapis.com/auth/calendar';\r\n-  const REDIRECT_URI = window.location.origin + '/auth/google/callback';\r\n-\r\n-  const handleConnect = async () => {\r\n-    if (!CLIENT_ID) {\r\n-      toast({\r\n-        title: \"Configuration Error\",\r\n-        description: \"Google Calendar API credentials are not configured.\",\r\n-        variant: \"destructive\"\r\n-      });\r\n-      return;\r\n-    }\r\n-\r\n-    setIsLoading(true);\r\n-\r\n-    try {\r\n-      // Redirect to Google OAuth consent screen\r\n-      const authUrl = `https://accounts.google.com/o/oauth2/v2/auth?client_id=${CLIENT_ID}&redirect_uri=${encodeURIComponent(REDIRECT_URI)}&response_type=code&scope=${encodeURIComponent(SCOPES)}&access_type=offline&prompt=consent`;\r\n-      \r\n-      // Open in popup window\r\n-      const width = 600;\r\n-      const height = 700;\r\n-      const left = window.innerWidth / 2 - width / 2;\r\n-      const top = window.innerHeight / 2 - height / 2;\r\n-      \r\n-      window.open(\r\n-        authUrl,\r\n-        'googleauth',\r\n-        `width=${width},height=${height},left=${left},top=${top}`\r\n-      );\r\n-\r\n-      // Listen for message from popup\r\n-      window.addEventListener('message', handleAuthCallback, { once: true });\r\n-    } catch (error) {\r\n-      console.error('Google Calendar authentication error:', error);\r\n-      toast({\r\n-        title: \"Connection Failed\",\r\n-        description: \"Could not connect to Google Calendar. Please try again.\",\r\n-        variant: \"destructive\"\r\n-      });\r\n-      setIsLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleAuthCallback = async (event: MessageEvent) => {\r\n-    // Ensure message is from our app\r\n-    if (event.origin !== window.location.origin) return;\r\n-    \r\n-    if (event.data.type === 'google-auth-success') {\r\n-      const { code } = event.data;\r\n-      \r\n-      try {\r\n-        // Exchange code for tokens\r\n-        const tokenResponse = await fetch('/api/auth/google/token', {\r\n-          method: 'POST',\r\n-          headers: { 'Content-Type': 'application/json' },\r\n-          body: JSON.stringify({ code })\r\n-        });\r\n-        \r\n-        if (!tokenResponse.ok) throw new Error('Failed to exchange auth code');\r\n-        \r\n-        const tokenData: GoogleAuthResponse = await tokenResponse.json();\r\n-        setIsConnected(true);\r\n-        \r\n-        // Sync calendar events\r\n-        if (events.length > 0) {\r\n-          await syncEvents(tokenData.access_token, events);\r\n-        } else {\r\n-          // Fetch events from Google Calendar\r\n-          const calendarEvents = await fetchCalendarEvents(tokenData.access_token);\r\n-          onSyncComplete?.(calendarEvents);\r\n-        }\r\n-        \r\n-        toast({\r\n-          title: \"Connected Successfully\",\r\n-          description: \"Your Google Calendar is now connected.\",\r\n-        });\r\n-      } catch (error) {\r\n-        console.error('Token exchange error:', error);\r\n-        toast({\r\n-          title: \"Sync Error\",\r\n-          description: \"Failed to sync with Google Calendar.\",\r\n-          variant: \"destructive\"\r\n-        });\r\n-      } finally {\r\n-        setIsLoading(false);\r\n-      }\r\n-    } else if (event.data.type === 'google-auth-error') {\r\n-      toast({\r\n-        title: \"Authentication Failed\",\r\n-        description: event.data.error || \"Could not authenticate with Google.\",\r\n-        variant: \"destructive\"\r\n-      });\r\n-      setIsLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const syncEvents = async (accessToken: string, events: CalendarEvent[]) => {\r\n-    try {\r\n-      const response = await fetch('/api/calendar/sync', {\r\n-        method: 'POST',\r\n-        headers: {\r\n-          'Content-Type': 'application/json',\r\n-          'Authorization': `Bearer ${accessToken}`\r\n-        },\r\n-        body: JSON.stringify({ events })\r\n-      });\r\n-      \r\n-      if (!response.ok) throw new Error('Failed to sync events');\r\n-      \r\n-      toast({\r\n-        title: \"Calendar Synced\",\r\n-        description: `${events.length} events have been synced to your Google Calendar.`,\r\n-      });\r\n-    } catch (error) {\r\n-      console.error('Event sync error:', error);\r\n-      toast({\r\n-        title: \"Sync Error\",\r\n-        description: \"Failed to sync events to Google Calendar.\",\r\n-        variant: \"destructive\"\r\n-      });\r\n-    }\r\n-  };\r\n-\r\n-  const fetchCalendarEvents = async (accessToken: string): Promise<CalendarEvent[]> => {\r\n-    try {\r\n-      const response = await fetch('/api/calendar/events', {\r\n-        method: 'GET',\r\n-        headers: {\r\n-          'Authorization': `Bearer ${accessToken}`\r\n-        }\r\n-      });\r\n-      \r\n-      if (!response.ok) throw new Error('Failed to fetch events');\r\n-      \r\n-      return await response.json();\r\n-    } catch (error) {\r\n-      console.error('Event fetch error:', error);\r\n-      toast({\r\n-        title: \"Fetch Error\",\r\n-        description: \"Failed to fetch events from Google Calendar.\",\r\n-        variant: \"destructive\"\r\n-      });\r\n-      return [];\r\n-    }\r\n-  };\r\n-\r\n-  const handleDisconnect = () => {\r\n-    setIsConnected(false);\r\n-    toast({\r\n-      title: \"Disconnected\",\r\n-      description: \"Your Google Calendar has been disconnected.\",\r\n-    });\r\n\\ No newline at end of file\n-  };\r\n-\r\n   return (\r\n-    <Button \r\n-      variant={variant}\r\n-      size={size}\r\n-      onClick={isConnected ? handleDisconnect : handleConnect}\r\n-      disabled={isLoading}\r\n-      className=\"gap-2\"\r\n-    >\r\n-      {isLoading ? (\r\n-        <Loader2 className=\"h-4 w-4 animate-spin\" />\r\n-      ) : (\r\n-        <Calendar className=\"h-4 w-4\" />\r\n-      )}\r\n-      {isConnected ? \"Disconnect Calendar\" : \"Connect Google Calendar\"}\r\n+    <Button variant=\"outline\" onClick={connect}>\r\n+      <Calendar className=\"h-4 w-4 mr-2\" />\r\n+      Connect Google Calendar\r\n     </Button>\r\n   );\r\n-};\r\n-\r\n-export default GoogleCalendarButton;\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740753686868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,33 +1,59 @@\n-import React from 'react';\r\n-import { Button } from '../ui/button';\r\n-import { Calendar, Loader2 } from 'lucide-react';\r\n-import { useGoogleCalendar } from '../../hooks/useGoogleCalendar';\r\n+import { Button } from \"@/components/ui/button\";\r\n+import { cn } from \"@/lib/utils\";\r\n+import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\r\n \r\n-export function GoogleCalendarButton() {\r\n-  const { isConnected, loading, connect, disconnect } = useGoogleCalendar();\r\n+// Interface for GoogleCalendarButton props\r\n+interface GoogleCalendarButtonProps {\r\n+  onConnect: () => Promise<void>;\r\n+  onSync: () => Promise<void>;\r\n+  isConnected: boolean;\r\n+  isLoading: boolean;\r\n+}\r\n \r\n-  if (loading) {\r\n-    return (\r\n-      <Button variant=\"outline\" disabled>\r\n-        <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\r\n-        Connecting...\r\n-      </Button>\r\n-    );\r\n-  }\r\n-\r\n-  if (isConnected) {\r\n-    return (\r\n-      <Button variant=\"outline\" onClick={disconnect}>\r\n-        <Calendar className=\"h-4 w-4 mr-2\" />\r\n-        Disconnect Google Calendar\r\n-      </Button>\r\n\\ No newline at end of file\n-    );\r\n-  }\r\n-\r\n+export const GoogleCalendarButton = ({\r\n+  onConnect,\r\n+  onSync,\r\n+  isConnected,\r\n+  isLoading\r\n+}: GoogleCalendarButtonProps) => {\r\n   return (\r\n-    <Button variant=\"outline\" onClick={connect}>\r\n-      <Calendar className=\"h-4 w-4 mr-2\" />\r\n-      Connect Google Calendar\r\n-    </Button>\r\n+    <TooltipProvider>\r\n+      <Tooltip>\r\n+        <TooltipTrigger asChild>\r\n+          <Button\r\n+            variant=\"outline\"\r\n+            size=\"sm\"\r\n+            className={cn(\r\n+              \"gap-2 transition-all duration-300\",\r\n+              isConnected ? \"bg-blue-50 hover:bg-blue-100 border-blue-200\" : \"\"\r\n+            )}\r\n+            onClick={isConnected ? onSync : onConnect}\r\n+            disabled={isLoading}\r\n+          >\r\n+            <svg \r\n+              className={cn(\r\n+                \"h-4 w-4 text-[#4285F4] transition-transform\",\r\n+                isLoading ? \"animate-spin\" : \"group-hover:scale-110\"\r\n+              )} \r\n+              viewBox=\"0 0 24 24\"\r\n+              fill=\"none\"\r\n+              xmlns=\"http://www.w3.org/2000/svg\"\r\n+            >\r\n+              <path d=\"M6 6h12v12H6V6z\" fill=\"#fff\" />\r\n+              <path d=\"M18 6H6v12h12V6zm1 0v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1z\" fill=\"#4285F4\" />\r\n+              <path d=\"M14 11h4v4h-1v-3h-3v-1zM10 13H6V9h1v3h3v1z\" fill=\"#4285F4\" />\r\n+            </svg>\r\n+            <span className=\"hidden sm:inline\">\r\n+              {isConnected ? \"Sync Google Calendar\" : \"Connect Google Calendar\"}\r\n+            </span>\r\n+          </Button>\r\n+        </TooltipTrigger>\r\n+        <TooltipContent side=\"bottom\">\r\n+          {isConnected \r\n+            ? \"Sync your events with Google Calendar\" \r\n+            : \"Connect your Google Calendar account\"}\r\n+        </TooltipContent>\r\n+      </Tooltip>\r\n+    </TooltipProvider>\r\n   );\r\n-}\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740755104835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import { Button } from \"@/components/ui/button\";\r\n import { cn } from \"@/lib/utils\";\r\n import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\r\n+import { motion } from \"framer-motion\";\r\n \r\n // Interface for GoogleCalendarButton props\r\n interface GoogleCalendarButtonProps {\r\n   onConnect: () => Promise<void>;\r\n@@ -9,8 +10,22 @@\n   isConnected: boolean;\r\n   isLoading: boolean;\r\n }\r\n \r\n+// Google icon component\r\n+const GoogleIcon = () => (\r\n+  <svg \r\n+    className=\"h-4 w-4\" \r\n+    viewBox=\"0 0 24 24\"\r\n+    fill=\"none\"\r\n+    xmlns=\"http://www.w3.org/2000/svg\"\r\n+  >\r\n+    <path d=\"M6 6h12v12H6V6z\" fill=\"#fff\" />\r\n+    <path d=\"M18 6H6v12h12V6zm1 0v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1z\" fill=\"#4285F4\" />\r\n+    <path d=\"M14 11h4v4h-1v-3h-3v-1zM10 13H6V9h1v3h3v1z\" fill=\"#4285F4\" />\r\n+  </svg>\r\n+);\r\n+\r\n export const GoogleCalendarButton = ({\r\n   onConnect,\r\n   onSync,\r\n   isConnected,\r\n@@ -19,35 +34,30 @@\n   return (\r\n     <TooltipProvider>\r\n       <Tooltip>\r\n         <TooltipTrigger asChild>\r\n-          <Button\r\n-            variant=\"outline\"\r\n-            size=\"sm\"\r\n-            className={cn(\r\n-              \"gap-2 transition-all duration-300\",\r\n-              isConnected ? \"bg-blue-50 hover:bg-blue-100 border-blue-200\" : \"\"\r\n-            )}\r\n-            onClick={isConnected ? onSync : onConnect}\r\n-            disabled={isLoading}\r\n-          >\r\n-            <svg \r\n+          <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\r\n+            <Button\r\n+              variant=\"outline\"\r\n+              size=\"sm\"\r\n               className={cn(\r\n-                \"h-4 w-4 text-[#4285F4] transition-transform\",\r\n-                isLoading ? \"animate-spin\" : \"group-hover:scale-110\"\r\n-              )} \r\n-              viewBox=\"0 0 24 24\"\r\n-              fill=\"none\"\r\n-              xmlns=\"http://www.w3.org/2000/svg\"\r\n+                \"gap-2 transition-all duration-300\",\r\n+                isConnected ? \"bg-blue-50 hover:bg-blue-100 border-blue-200\" : \"\"\r\n+              )}\r\n+              onClick={isConnected ? onSync : onConnect}\r\n+              disabled={isLoading}\r\n             >\r\n-              <path d=\"M6 6h12v12H6V6z\" fill=\"#fff\" />\r\n-              <path d=\"M18 6H6v12h12V6zm1 0v12a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1z\" fill=\"#4285F4\" />\r\n-              <path d=\"M14 11h4v4h-1v-3h-3v-1zM10 13H6V9h1v3h3v1z\" fill=\"#4285F4\" />\r\n-            </svg>\r\n-            <span className=\"hidden sm:inline\">\r\n-              {isConnected ? \"Sync Google Calendar\" : \"Connect Google Calendar\"}\r\n-            </span>\r\n-          </Button>\r\n+              <motion.div\r\n+                animate={isLoading ? { rotate: 360 } : { rotate: 0 }}\r\n+                transition={isLoading ? { duration: 1.5, repeat: Infinity, ease: \"linear\" } : {}}\r\n+              >\r\n+                <GoogleIcon />\r\n+              </motion.div>\r\n+              <span className=\"hidden sm:inline\">\r\n+                {isConnected ? \"Sync Google Calendar\" : \"Connect Google Calendar\"}\r\n+              </span>\r\n+            </Button>\r\n+          </motion.div>\r\n         </TooltipTrigger>\r\n         <TooltipContent side=\"bottom\">\r\n           {isConnected \r\n             ? \"Sync your events with Google Calendar\" \r\n"
                }
            ],
            "date": 1740752702042,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Calendar, Loader2 } from 'lucide-react';\r\nimport { toast } from '@/components/ui/use-toast';\r\n\r\n// Define the authentication and calendar event interfaces\r\ninterface GoogleAuthResponse {\r\n  access_token: string;\r\n  expires_in: number;\r\n  refresh_token?: string;\r\n  token_type: string;\r\n}\r\n\r\ninterface CalendarEvent {\r\n  id: string;\r\n  title: string;\r\n  start: Date;\r\n  end: Date;\r\n  description?: string;\r\n  location?: string;\r\n}\r\n\r\ninterface GoogleCalendarButtonProps {\r\n  events?: CalendarEvent[];\r\n  onSyncComplete?: (events: CalendarEvent[]) => void;\r\n  variant?: 'default' | 'outline' | 'secondary';\r\n  size?: 'default' | 'sm' | 'lg';\r\n}\r\n\r\nconst GoogleCalendarButton: React.FC<GoogleCalendarButtonProps> = ({\r\n  events = [],\r\n  onSyncComplete,\r\n  variant = 'outline',\r\n  size = 'sm'\r\n}) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n\r\n  // Google API Client ID - should be moved to environment variables\r\n  const CLIENT_ID = import.meta.env.VITE_GOOGLE_CLIENT_ID || '';\r\n  const SCOPES = 'https://www.googleapis.com/auth/calendar';\r\n  const REDIRECT_URI = window.location.origin + '/auth/google/callback';\r\n\r\n  const handleConnect = async () => {\r\n    if (!CLIENT_ID) {\r\n      toast({\r\n        title: \"Configuration Error\",\r\n        description: \"Google Calendar API credentials are not configured.\",\r\n        variant: \"destructive\"\r\n      });\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      // Redirect to Google OAuth consent screen\r\n      const authUrl = `https://accounts.google.com/o/oauth2/v2/auth?client_id=${CLIENT_ID}&redirect_uri=${encodeURIComponent(REDIRECT_URI)}&response_type=code&scope=${encodeURIComponent(SCOPES)}&access_type=offline&prompt=consent`;\r\n      \r\n      // Open in popup window\r\n      const width = 600;\r\n      const height = 700;\r\n      const left = window.innerWidth / 2 - width / 2;\r\n      const top = window.innerHeight / 2 - height / 2;\r\n      \r\n      window.open(\r\n        authUrl,\r\n        'googleauth',\r\n        `width=${width},height=${height},left=${left},top=${top}`\r\n      );\r\n\r\n      // Listen for message from popup\r\n      window.addEventListener('message', handleAuthCallback, { once: true });\r\n    } catch (error) {\r\n      console.error('Google Calendar authentication error:', error);\r\n      toast({\r\n        title: \"Connection Failed\",\r\n        description: \"Could not connect to Google Calendar. Please try again.\",\r\n        variant: \"destructive\"\r\n      });\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleAuthCallback = async (event: MessageEvent) => {\r\n    // Ensure message is from our app\r\n    if (event.origin !== window.location.origin) return;\r\n    \r\n    if (event.data.type === 'google-auth-success') {\r\n      const { code } = event.data;\r\n      \r\n      try {\r\n        // Exchange code for tokens\r\n        const tokenResponse = await fetch('/api/auth/google/token', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ code })\r\n        });\r\n        \r\n        if (!tokenResponse.ok) throw new Error('Failed to exchange auth code');\r\n        \r\n        const tokenData: GoogleAuthResponse = await tokenResponse.json();\r\n        setIsConnected(true);\r\n        \r\n        // Sync calendar events\r\n        if (events.length > 0) {\r\n          await syncEvents(tokenData.access_token, events);\r\n        } else {\r\n          // Fetch events from Google Calendar\r\n          const calendarEvents = await fetchCalendarEvents(tokenData.access_token);\r\n          onSyncComplete?.(calendarEvents);\r\n        }\r\n        \r\n        toast({\r\n          title: \"Connected Successfully\",\r\n          description: \"Your Google Calendar is now connected.\",\r\n        });\r\n      } catch (error) {\r\n        console.error('Token exchange error:', error);\r\n        toast({\r\n          title: \"Sync Error\",\r\n          description: \"Failed to sync with Google Calendar.\",\r\n          variant: \"destructive\"\r\n        });\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    } else if (event.data.type === 'google-auth-error') {\r\n      toast({\r\n        title: \"Authentication Failed\",\r\n        description: event.data.error || \"Could not authenticate with Google.\",\r\n        variant: \"destructive\"\r\n      });\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const syncEvents = async (accessToken: string, events: CalendarEvent[]) => {\r\n    try {\r\n      const response = await fetch('/api/calendar/sync', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${accessToken}`\r\n        },\r\n        body: JSON.stringify({ events })\r\n      });\r\n      \r\n      if (!response.ok) throw new Error('Failed to sync events');\r\n      \r\n      toast({\r\n        title: \"Calendar Synced\",\r\n        description: `${events.length} events have been synced to your Google Calendar.`,\r\n      });\r\n    } catch (error) {\r\n      console.error('Event sync error:', error);\r\n      toast({\r\n        title: \"Sync Error\",\r\n        description: \"Failed to sync events to Google Calendar.\",\r\n        variant: \"destructive\"\r\n      });\r\n    }\r\n  };\r\n\r\n  const fetchCalendarEvents = async (accessToken: string): Promise<CalendarEvent[]> => {\r\n    try {\r\n      const response = await fetch('/api/calendar/events', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': `Bearer ${accessToken}`\r\n        }\r\n      });\r\n      \r\n      if (!response.ok) throw new Error('Failed to fetch events');\r\n      \r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Event fetch error:', error);\r\n      toast({\r\n        title: \"Fetch Error\",\r\n        description: \"Failed to fetch events from Google Calendar.\",\r\n        variant: \"destructive\"\r\n      });\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const handleDisconnect = () => {\r\n    setIsConnected(false);\r\n    toast({\r\n      title: \"Disconnected\",\r\n      description: \"Your Google Calendar has been disconnected.\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Button \r\n      variant={variant}\r\n      size={size}\r\n      onClick={isConnected ? handleDisconnect : handleConnect}\r\n      disabled={isLoading}\r\n      className=\"gap-2\"\r\n    >\r\n      {isLoading ? (\r\n        <Loader2 className=\"h-4 w-4 animate-spin\" />\r\n      ) : (\r\n        <Calendar className=\"h-4 w-4\" />\r\n      )}\r\n      {isConnected ? \"Disconnect Calendar\" : \"Connect Google Calendar\"}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default GoogleCalendarButton;"
        }
    ]
}