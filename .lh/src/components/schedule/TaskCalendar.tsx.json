{
    "sourceFile": "src/components/schedule/TaskCalendar.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 47,
            "patches": [
                {
                    "date": 1739514311516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739514319549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n +  const [isAddEventOpen, setIsAddEventOpen] = useState(false);\r\n    const [currentLesson, setCurrentLesson] = useState<ExtendedLesson | null>(null);\r\n    const [isLocked, setIsLocked] = useState(true);\r\n \r\n-@@ .. @@\r\n+\r\n    return (\r\n      <div className=\"max-w-6xl w-full relative\">\r\n        <div className=\"flex items-center justify-between mb-4\">\r\n +        <div className=\"flex items-center gap-4\">\r\n"
                },
                {
                    "date": 1739514342470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-\r\n  import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\n  import { Progress } from \"@/components/ui/progress\";\r\n  import { Button } from \"@/components/ui/button\";\r\n +import { ScheduleDialog } from './ScheduleDialog';\r\n@@ -16,9 +15,9 @@\n    Users,\r\n    Shield,\r\n  } from \"lucide-react\";\r\n \r\n-@@ .. @@\r\n+\r\n    const [selectedLesson, setSelectedLesson] = useState<ExtendedLesson>(lessonsData[0]);\r\n    const [selectedSubLesson, setSelectedSubLesson] = useState<SubLesson | null>(null);\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n +  const [isAddEventOpen, setIsAddEventOpen] = useState(false);\r\n"
                },
                {
                    "date": 1739514385769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,68 +1,101 @@\n- import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\n- import { Progress } from \"@/components/ui/progress\";\r\n- import { Button } from \"@/components/ui/button\";\r\n-+import { ScheduleDialog } from './ScheduleDialog';\r\n- import {\r\n-   ArrowRight,\r\n-   BookOpen,\r\n-   Calendar,\r\n-   CheckCircle2,\r\n-   Clock,\r\n-   Lock,\r\n-   Plus,\r\n-   RotateCcw,\r\n-   Unlock,\r\n-   Users,\r\n-   Shield,\r\n- } from \"lucide-react\";\r\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\n+import { Progress } from \"@/components/ui/progress\";\r\n+import { Button } from \"@/components/ui/button\";\r\n+import { ScheduleDialog } from './ScheduleDialog';\r\n+import {\r\n+  ArrowRight,\r\n+  BookOpen,\r\n+  Calendar,\r\n+  CheckCircle2,\r\n+  Clock,\r\n+  Lock,\r\n+  Plus,\r\n+  RotateCcw,\r\n+  Unlock,\r\n+  Users,\r\n+  Shield,\r\n+} from \"lucide-react\";\r\n+import { useState } from 'react';\r\n+import { showToast } from \"@/lib/utils\";\r\n \r\n+interface ExtendedLesson {\r\n+  // Add your lesson type properties here\r\n+  id: string;\r\n+  title: string;\r\n+  // ... other properties\r\n+}\r\n \r\n-   const [selectedLesson, setSelectedLesson] = useState<ExtendedLesson>(lessonsData[0]);\r\n-   const [selectedSubLesson, setSelectedSubLesson] = useState<SubLesson | null>(null);\r\n-   const [dialogOpen, setDialogOpen] = useState(false);\r\n-+  const [isAddEventOpen, setIsAddEventOpen] = useState(false);\r\n-   const [currentLesson, setCurrentLesson] = useState<ExtendedLesson | null>(null);\r\n-   const [isLocked, setIsLocked] = useState(true);\r\n+interface SubLesson {\r\n+  // Add your sublesson type properties here\r\n+  id: string;\r\n+  title: string;\r\n+  // ... other properties\r\n+}\r\n \r\n+export function TaskCalendar() {\r\n+  const [selectedLesson, setSelectedLesson] = useState<ExtendedLesson | null>(null);\r\n+  const [selectedSubLesson, setSelectedSubLesson] = useState<SubLesson | null>(null);\r\n+  const [dialogOpen, setDialogOpen] = useState(false);\r\n+  const [isAddEventOpen, setIsAddEventOpen] = useState(false);\r\n+  const [currentLesson, setCurrentLesson] = useState<ExtendedLesson | null>(null);\r\n+  const [isLocked, setIsLocked] = useState(true);\r\n \r\n-   return (\r\n-     <div className=\"max-w-6xl w-full relative\">\r\n-       <div className=\"flex items-center justify-between mb-4\">\r\n\\ No newline at end of file\n-+        <div className=\"flex items-center gap-4\">\r\n-           <ClassHeader\r\n-             classes={classesData}\r\n-             selectedClass={selectedClass}\r\n-             onClassChange={handleClassChange}\r\n-           />\r\n-+          <Button\r\n-+            variant=\"outline\"\r\n-+            size=\"sm\"\r\n-+            onClick={() => setIsAddEventOpen(true)}\r\n-+            className=\"ml-4\"\r\n-+          >\r\n-+            <Plus className=\"h-4 w-4 mr-2\" />\r\n-+            Add Event\r\n-+          </Button>\r\n-+        </div>\r\n-         <Button\r\n-           variant=\"outline\"\r\n-           size=\"sm\"\r\n-@@ .. @@\r\n-           </div>\r\n-         </div>\r\n-       </div>\r\n-+      \r\n-+      {/* Add Event Dialog */}\r\n-+      <ScheduleDialog\r\n-+        open={isAddEventOpen}\r\n-+        onOpenChange={setIsAddEventOpen}\r\n-+        onSubmit={async (eventData) => {\r\n-+          try {\r\n-+            // Handle event creation here\r\n-+            console.log('Creating event:', eventData);\r\n-+            showToast('Event created successfully', { type: 'success' });\r\n-+          } catch (error) {\r\n-+            showToast('Failed to create event', { type: 'error' });\r\n-+          }\r\n-+        }}\r\n-+      />\n+  const handleClassChange = (newClass: any) => {\r\n+    // Implement class change logic\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"max-w-6xl w-full relative\">\r\n+      <div className=\"flex items-center justify-between mb-4\">\r\n+        <div className=\"flex items-center gap-4\">\r\n+          <ClassHeader\r\n+            classes={classesData}\r\n+            selectedClass={selectedClass}\r\n+            onClassChange={handleClassChange}\r\n+          />\r\n+          <Button\r\n+            variant=\"outline\"\r\n+            size=\"sm\"\r\n+            onClick={() => setIsAddEventOpen(true)}\r\n+            className=\"ml-4\"\r\n+          >\r\n+            <Plus className=\"h-4 w-4 mr-2\" />\r\n+            Add Event\r\n+          </Button>\r\n+        </div>\r\n+        <Button\r\n+          variant=\"outline\"\r\n+          size=\"sm\"\r\n+          onClick={() => setIsLocked(!isLocked)}\r\n+        >\r\n+          {isLocked ? (\r\n+            <>\r\n+              <Lock className=\"h-4 w-4 mr-2\" />\r\n+              Locked\r\n+            </>\r\n+          ) : (\r\n+            <>\r\n+              <Unlock className=\"h-4 w-4 mr-2\" />\r\n+              Unlocked\r\n+            </>\r\n+          )}\r\n+        </Button>\r\n+      </div>\r\n+\r\n+      {/* Add Event Dialog */}\r\n+      <ScheduleDialog\r\n+        open={isAddEventOpen}\r\n+        onOpenChange={setIsAddEventOpen}\r\n+        onSubmit={async (eventData) => {\r\n+          try {\r\n+            // Handle event creation here\r\n+            console.log('Creating event:', eventData);\r\n+            showToast('Event created successfully', { type: 'success' });\r\n+          } catch (error) {\r\n+            showToast('Failed to create event', { type: 'error' });\r\n+          }\r\n+        }}\r\n+      />\r\n+    </div>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739514425403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n   Shield,\r\n } from \"lucide-react\";\r\n import { useState } from 'react';\r\n import { showToast } from \"@/lib/utils\";\r\n+import \r\n \r\n interface ExtendedLesson {\r\n   // Add your lesson type properties here\r\n   id: string;\r\n"
                },
                {
                    "date": 1739514431547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,10 +16,11 @@\n   Shield,\r\n } from \"lucide-react\";\r\n import { useState } from 'react';\r\n import { showToast } from \"@/lib/utils\";\r\n-import \r\n+import { ClassHeader } from \"./ClassHeader\";\r\n \r\n+\r\n interface ExtendedLesson {\r\n   // Add your lesson type properties here\r\n   id: string;\r\n   title: string;\r\n"
                },
                {
                    "date": 1739514438508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,9 @@\n } from \"lucide-react\";\r\n import { useState } from 'react';\r\n import { showToast } from \"@/lib/utils\";\r\n import { ClassHeader } from \"./ClassHeader\";\r\n+import { classesData } from \"@/data/classes\";\r\n \r\n \r\n interface ExtendedLesson {\r\n   // Add your lesson type properties here\r\n"
                },
                {
                    "date": 1739514452965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,11 +17,11 @@\n } from \"lucide-react\";\r\n import { useState } from 'react';\r\n import { showToast } from \"@/lib/utils\";\r\n import { ClassHeader } from \"./ClassHeader\";\r\n-import { classesData } from \"@/data/classes\";\r\n \r\n \r\n+\r\n interface ExtendedLesson {\r\n   // Add your lesson type properties here\r\n   id: string;\r\n   title: string;\r\n"
                },
                {
                    "date": 1739514458555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,11 +17,11 @@\n } from \"lucide-react\";\r\n import { useState } from 'react';\r\n import { showToast } from \"@/lib/utils\";\r\n import { ClassHeader } from \"./ClassHeader\";\r\n+import { ExtendedLesson, SubLesson } from \"@/types/lesson\";\r\n \r\n \r\n-\r\n interface ExtendedLesson {\r\n   // Add your lesson type properties here\r\n   id: string;\r\n   title: string;\r\n"
                },
                {
                    "date": 1739514466181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n } from \"lucide-react\";\r\n import { useState } from 'react';\r\n import { showToast } from \"@/lib/utils\";\r\n import { ClassHeader } from \"./ClassHeader\";\r\n-import { ExtendedLesson, SubLesson } from \"@/types/lesson\";\r\n+import { ExtendedLesson, SubLesson } from \"@/types/index.\";\r\n \r\n \r\n interface ExtendedLesson {\r\n   // Add your lesson type properties here\r\n"
                },
                {
                    "date": 1739514472108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n } from \"lucide-react\";\r\n import { useState } from 'react';\r\n import { showToast } from \"@/lib/utils\";\r\n import { ClassHeader } from \"./ClassHeader\";\r\n-import { ExtendedLesson, SubLesson } from \"@/types/index.\";\r\n+import { ExtendedLesson, SubLesson } from \"@/types/index.ts\";\r\n \r\n \r\n interface ExtendedLesson {\r\n   // Add your lesson type properties here\r\n"
                },
                {
                    "date": 1739514506814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,11 +17,33 @@\n } from \"lucide-react\";\r\n import { useState } from 'react';\r\n import { showToast } from \"@/lib/utils\";\r\n import { ClassHeader } from \"./ClassHeader\";\r\n-import { ExtendedLesson, SubLesson } from \"@/types/index.ts\";\r\n+import { ExtendedLesson, SubLesson } from \"@/types/index.import * as React from 'react';\r\n+import { connect } from 'react-redux'\r\n \r\n+export interface IAppProps {\r\n+}\r\n \r\n+class App extends React.Component<IAppProps> {\r\n+  public render() {\r\n+    return (\r\n+      <div>\r\n+        \r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+const mapState2Props = state => {\r\n+  return {\r\n+  };\r\n+}\r\n+\r\n+export default connect(mapState2Props)(App);\r\n+\r\n+\r\n+\r\n interface ExtendedLesson {\r\n   // Add your lesson type properties here\r\n   id: string;\r\n   title: string;\r\n"
                },
                {
                    "date": 1739514528381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,11 +15,11 @@\n   Users,\r\n   Shield,\r\n } from \"lucide-react\";\r\n import { useState } from 'react';\r\n-import { showToast } from \"@/lib/utils\";\r\n+import { toast } from \"@/components/ui/use-toast\";\r\n import { ClassHeader } from \"./ClassHeader\";\r\n-import { ExtendedLesson, SubLesson } from \"@/types/index.import * as React from 'react';\r\n+import { ExtendedLesson, SubLesson } from \"@/types/index\";\r\n import { connect } from 'react-redux'\r\n \r\n export interface IAppProps {\r\n }\r\n@@ -114,11 +114,18 @@\n         onSubmit={async (eventData) => {\r\n           try {\r\n             // Handle event creation here\r\n             console.log('Creating event:', eventData);\r\n-            showToast('Event created successfully', { type: 'success' });\r\n+            toast({\r\n+              title: \"Event created successfully\",\r\n+              description: \"Your event has been created successfully.\",\r\n+            });\r\n           } catch (error) {\r\n-            showToast('Failed to create event', { type: 'error' });\r\n+            toast({\r\n+              title: \"Failed to create event\",\r\n+              description: \"There was an error creating your event. Please try again later.\",\r\n+              variant: \"destructive\",\r\n+            });\r\n           }\r\n         }}\r\n       />\r\n     </div>\r\n"
                },
                {
                    "date": 1739514544895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,21 +42,9 @@\n export default connect(mapState2Props)(App);\r\n \r\n \r\n \r\n-interface ExtendedLesson {\r\n-  // Add your lesson type properties here\r\n-  id: string;\r\n-  title: string;\r\n-  // ... other properties\r\n-}\r\n \r\n-interface SubLesson {\r\n-  // Add your sublesson type properties here\r\n-  id: string;\r\n-  title: string;\r\n-  // ... other properties\r\n-}\r\n \r\n export function TaskCalendar() {\r\n   const [selectedLesson, setSelectedLesson] = useState<ExtendedLesson | null>(null);\r\n   const [selectedSubLesson, setSelectedSubLesson] = useState<SubLesson | null>(null);\r\n"
                },
                {
                    "date": 1739514550243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,21 @@\n export default connect(mapState2Props)(App);\r\n \r\n \r\n \r\n+interface ExtendedLesson {\r\n+  // Add your lesson type properties here\r\n+  id: string;\r\n+  title: string;\r\n+  // ... other properties\r\n+}\r\n \r\n+interface SubLesson {\r\n+  // Add your sublesson type properties here\r\n+  id: string;\r\n+  title: string;\r\n+  // ... other properties\r\n+}\r\n \r\n export function TaskCalendar() {\r\n   const [selectedLesson, setSelectedLesson] = useState<ExtendedLesson | null>(null);\r\n   const [selectedSubLesson, setSelectedSubLesson] = useState<SubLesson | null>(null);\r\n"
                },
                {
                    "date": 1739514558587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,21 +42,21 @@\n export default connect(mapState2Props)(App);\r\n \r\n \r\n \r\n-interface ExtendedLesson {\r\n-  // Add your lesson type properties here\r\n-  id: string;\r\n-  title: string;\r\n-  // ... other properties\r\n-}\r\n+// interface ExtendedLesson {\r\n+//   // Add your lesson type properties here\r\n+//   id: string;\r\n+//   title: string;\r\n+//   // ... other properties\r\n+// }\r\n \r\n-interface SubLesson {\r\n-  // Add your sublesson type properties here\r\n-  id: string;\r\n-  title: string;\r\n-  // ... other properties\r\n-}\r\n+// interface SubLesson {\r\n+//   // Add your sublesson type properties here\r\n+//   id: string;\r\n+//   title: string;\r\n+//   // ... other properties\r\n+// }\r\n \r\n export function TaskCalendar() {\r\n   const [selectedLesson, setSelectedLesson] = useState<ExtendedLesson | null>(null);\r\n   const [selectedSubLesson, setSelectedSubLesson] = useState<SubLesson | null>(null);\r\n"
                },
                {
                    "date": 1740086314626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,9 @@\n           } catch (error) {\r\n             toast({\r\n               title: \"Failed to create event\",\r\n               description: \"There was an error creating your event. Please try again later.\",\r\n-              variant: \"destructive\",\r\n+              \r\n             });\r\n           }\r\n         }}\r\n       />\r\n"
                },
                {
                    "date": 1740086325306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,9 @@\n import { toast } from \"@/components/ui/use-toast\";\r\n import { ClassHeader } from \"./ClassHeader\";\r\n import { ExtendedLesson, SubLesson } from \"@/types/index\";\r\n import { connect } from 'react-redux'\r\n+import { classesData } from \"@/data/mockData\";\r\n \r\n export interface IAppProps {\r\n }\r\n \r\n"
                },
                {
                    "date": 1740086352340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,9 @@\n import { ClassHeader } from \"./ClassHeader\";\r\n import { ExtendedLesson, SubLesson } from \"@/types/index\";\r\n import { connect } from 'react-redux'\r\n import { classesData } from \"@/data/mockData\";\r\n+import \r\n \r\n export interface IAppProps {\r\n }\r\n \r\n"
                },
                {
                    "date": 1740086361303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n import { ClassHeader } from \"./ClassHeader\";\r\n import { ExtendedLesson, SubLesson } from \"@/types/index\";\r\n import { connect } from 'react-redux'\r\n import { classesData } from \"@/data/mockData\";\r\n-import \r\n+import { \r\n \r\n export interface IAppProps {\r\n }\r\n \r\n"
                },
                {
                    "date": 1740086371869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n import { ClassHeader } from \"./ClassHeader\";\r\n import { ExtendedLesson, SubLesson } from \"@/types/index\";\r\n import { connect } from 'react-redux'\r\n import { classesData } from \"@/data/mockData\";\r\n-import { \r\n+import { React } from \"react\";\r\n \r\n export interface IAppProps {\r\n }\r\n \r\n@@ -35,9 +35,9 @@\n     );\r\n   }\r\n }\r\n \r\n-const mapState2Props = state => {\r\n+const mapState2Props = (state: any) => {\r\n   return {\r\n   };\r\n }\r\n \r\n"
                },
                {
                    "date": 1740751657750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import { Progress } from \"@/components/ui/progress\";\r\n import { Button } from \"@/components/ui/button\";\r\n import { ScheduleDialog } from './ScheduleDialog';\r\n import {\r\n-  ArrowRight,\r\n+  _ArrowRight,\r\n   BookOpen,\r\n   Calendar,\r\n   CheckCircle2,\r\n   Clock,\r\n"
                },
                {
                    "date": 1740751686440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import { Progress } from \"@/components/ui/progress\";\r\n import { Button } from \"@/components/ui/button\";\r\n import { ScheduleDialog } from './ScheduleDialog';\r\n import {\r\n-  _ArrowRight,\r\n+  ArrowRight,\r\n   BookOpen,\r\n   Calendar,\r\n   CheckCircle2,\r\n   Clock,\r\n@@ -16,9 +16,9 @@\n   Shield,\r\n } from \"lucide-react\";\r\n import { useState } from 'react';\r\n import { toast } from \"@/components/ui/use-toast\";\r\n-import { ClassHeader } from \"./ClassHeader\";\r\n+import { ClassHeader } from \".//ClassHeader\";\r\n import { ExtendedLesson, SubLesson } from \"@/types/index\";\r\n import { connect } from 'react-redux'\r\n import { classesData } from \"@/data/mockData\";\r\n import { React } from \"react\";\r\n"
                },
                {
                    "date": 1740751710790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n   Shield,\r\n } from \"lucide-react\";\r\n import { useState } from 'react';\r\n import { toast } from \"@/components/ui/use-toast\";\r\n-import { ClassHeader } from \".//ClassHeader\";\r\n+import { ClassHeader } from \"../..//ClassHeader\";\r\n import { ExtendedLesson, SubLesson } from \"@/types/index\";\r\n import { connect } from 'react-redux'\r\n import { classesData } from \"@/data/mockData\";\r\n import { React } from \"react\";\r\n"
                },
                {
                    "date": 1740751717417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n   Shield,\r\n } from \"lucide-react\";\r\n import { useState } from 'react';\r\n import { toast } from \"@/components/ui/use-toast\";\r\n-import { ClassHeader } from \"../..//ClassHeader\";\r\n+import { ClassHeader } from \"../../components/ClassHeader\";\r\n import { ExtendedLesson, SubLesson } from \"@/types/index\";\r\n import { connect } from 'react-redux'\r\n import { classesData } from \"@/data/mockData\";\r\n import { React } from \"react\";\r\n"
                },
                {
                    "date": 1740751725577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n   Shield,\r\n } from \"lucide-react\";\r\n import { useState } from 'react';\r\n import { toast } from \"@/components/ui/use-toast\";\r\n-import { ClassHeader } from \"../../components/ClassHeader\";\r\n+import { ClassHeader } from \"../../components//ClassHeader\";\r\n import { ExtendedLesson, SubLesson } from \"@/types/index\";\r\n import { connect } from 'react-redux'\r\n import { classesData } from \"@/data/mockData\";\r\n import { React } from \"react\";\r\n"
                },
                {
                    "date": 1740751736616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n   Shield,\r\n } from \"lucide-react\";\r\n import { useState } from 'react';\r\n import { toast } from \"@/components/ui/use-toast\";\r\n-import { ClassHeader } from \"../../components//ClassHeader\";\r\n+import { ClassHeader } from \"../../components/common/ClassHeader\";\r\n import { ExtendedLesson, SubLesson } from \"@/types/index\";\r\n import { connect } from 'react-redux'\r\n import { classesData } from \"@/data/mockData\";\r\n import { React } from \"react\";\r\n"
                },
                {
                    "date": 1740751758216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n   Shield,\r\n } from \"lucide-react\";\r\n import { useState } from 'react';\r\n import { toast } from \"@/components/ui/use-toast\";\r\n-import { ClassHeader } from \"../../components/common/ClassHeader\";\r\n+import { ClassHeader } from \"@components/common/ClassHeader\";\r\n import { ExtendedLesson, SubLesson } from \"@/types/index\";\r\n import { connect } from 'react-redux'\r\n import { classesData } from \"@/data/mockData\";\r\n import { React } from \"react\";\r\n"
                },
                {
                    "date": 1740751857912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n   Shield,\r\n } from \"lucide-react\";\r\n import { useState } from 'react';\r\n import { toast } from \"@/components/ui/use-toast\";\r\n-import { ClassHeader } from \"@components/common/ClassHeader\";\r\n+import ClassHeader from \"@/components/common/ClassHeader\";\r\n import { ExtendedLesson, SubLesson } from \"@/types/index\";\r\n import { connect } from 'react-redux'\r\n import { classesData } from \"@/data/mockData\";\r\n import { React } from \"react\";\r\n"
                },
                {
                    "date": 1740751915044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,9 @@\n import { connect } from 'react-redux'\r\n import { classesData } from \"@/data/mockData\";\r\n import { React } from \"react\";\r\n \r\n+// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\n export interface IAppProps {\r\n }\r\n \r\n class App extends React.Component<IAppProps> {\r\n"
                },
                {
                    "date": 1740751932460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,9 @@\n import { React } from \"react\";\r\n \r\n // eslint-disable-next-line @typescript-eslint/no-empty-interface\r\n export interface IAppProps {\r\n+  \r\n }\r\n \r\n class App extends React.Component<IAppProps> {\r\n   public render() {\r\n"
                },
                {
                    "date": 1740751940327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,12 +22,10 @@\n import { connect } from 'react-redux'\r\n import { classesData } from \"@/data/mockData\";\r\n import { React } from \"react\";\r\n \r\n-// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\n-export interface IAppProps {\r\n-  \r\n-}\r\n+// More specific type instead of empty interface\r\n+type IAppProps = Record<string, never>;\r\n \r\n class App extends React.Component<IAppProps> {\r\n   public render() {\r\n     return (\r\n@@ -133,5 +131,6 @@\n         }}\r\n       />\r\n     </div>\r\n   );\r\n+}\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740751961893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,6 +131,5 @@\n         }}\r\n       />\r\n     </div>\r\n   );\r\n-}\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740752053287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,135 @@\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\n+import { Progress } from \"@/components/ui/progress\";\r\n+import { Button } from \"@/components/ui/button\";\r\n+import { ScheduleDialog } from './ScheduleDialog';\r\n+import {\r\n+  ArrowRight,\r\n+  BookOpen,\r\n+  Calendar,\r\n+  CheckCircle2,\r\n+  Clock,\r\n+  Lock,\r\n+  Plus,\r\n+  RotateCcw,\r\n+  Unlock,\r\n+  Users,\r\n+  Shield,\r\n+} from \"lucide-react\";\r\n+import { useState } from 'react';\r\n+import { toast } from \"@/components/ui/use-toast\";\r\n+import ClassHeader from \"@/components/common/ClassHeader\";\r\n+import { ExtendedLesson, SubLesson } from \"@/types/index\";\r\n+import { connect } from 'react-redux'\r\n+import { classesData } from \"@/data/mockData\";\r\n+import { React } from \"@react\";\r\n+\r\n+// More specific type instead of empty interface\r\n+type IAppProps = Record<string, never>;\r\n+\r\n+class App extends React.Component<IAppProps> {\r\n+  public render() {\r\n+    return (\r\n+      <div>\r\n+        \r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+const mapState2Props = (state: any) => {\r\n+  return {\r\n+  };\r\n+}\r\n+\r\n+export default connect(mapState2Props)(App);\r\n+\r\n+\r\n+\r\n+// interface ExtendedLesson {\r\n+//   // Add your lesson type properties here\r\n+//   id: string;\r\n+//   title: string;\r\n+//   // ... other properties\r\n+// }\r\n+\r\n+// interface SubLesson {\r\n+//   // Add your sublesson type properties here\r\n+//   id: string;\r\n+//   title: string;\r\n+//   // ... other properties\r\n+// }\r\n+\r\n+export function TaskCalendar() {\r\n+  const [selectedLesson, setSelectedLesson] = useState<ExtendedLesson | null>(null);\r\n+  const [selectedSubLesson, setSelectedSubLesson] = useState<SubLesson | null>(null);\r\n+  const [dialogOpen, setDialogOpen] = useState(false);\r\n+  const [isAddEventOpen, setIsAddEventOpen] = useState(false);\r\n+  const [currentLesson, setCurrentLesson] = useState<ExtendedLesson | null>(null);\r\n+  const [isLocked, setIsLocked] = useState(true);\r\n+\r\n+  const handleClassChange = (newClass: any) => {\r\n+    // Implement class change logic\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"max-w-6xl w-full relative\">\r\n+      <div className=\"flex items-center justify-between mb-4\">\r\n+        <div className=\"flex items-center gap-4\">\r\n+          <ClassHeader\r\n+            classes={classesData}\r\n+            selectedClass={selectedClass}\r\n+            onClassChange={handleClassChange}\r\n+          />\r\n+          <Button\r\n+            variant=\"outline\"\r\n+            size=\"sm\"\r\n+            onClick={() => setIsAddEventOpen(true)}\r\n+            className=\"ml-4\"\r\n+          >\r\n+            <Plus className=\"h-4 w-4 mr-2\" />\r\n+            Add Event\r\n+          </Button>\r\n+        </div>\r\n+        <Button\r\n+          variant=\"outline\"\r\n+          size=\"sm\"\r\n+          onClick={() => setIsLocked(!isLocked)}\r\n+        >\r\n+          {isLocked ? (\r\n+            <>\r\n+              <Lock className=\"h-4 w-4 mr-2\" />\r\n+              Locked\r\n+            </>\r\n+          ) : (\r\n+            <>\r\n+              <Unlock className=\"h-4 w-4 mr-2\" />\r\n+              Unlocked\r\n+            </>\r\n+          )}\r\n+        </Button>\r\n+      </div>\r\n+\r\n+      {/* Add Event Dialog */}\r\n+      <ScheduleDialog\r\n+        open={isAddEventOpen}\r\n+        onOpenChange={setIsAddEventOpen}\r\n+        onSubmit={async (eventData) => {\r\n+          try {\r\n+            // Handle event creation here\r\n+            console.log('Creating event:', eventData);\r\n+            toast({\r\n+              title: \"Event created successfully\",\r\n+              description: \"Your event has been created successfully.\",\r\n+            });\r\n+          } catch (error) {\r\n+            toast({\r\n+              title: \"Failed to create event\",\r\n+              description: \"There was an error creating your event. Please try again later.\",\r\n+              \r\n+            });\r\n+          }\r\n+        }}\r\n+      />\r\n+    </div>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740752063210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,143 +20,8 @@\n import ClassHeader from \"@/components/common/ClassHeader\";\r\n import { ExtendedLesson, SubLesson } from \"@/types/index\";\r\n import { connect } from 'react-redux'\r\n import { classesData } from \"@/data/mockData\";\r\n-import { React } from \"@react\";\r\n-\r\n-// More specific type instead of empty interface\r\n-type IAppProps = Record<string, never>;\r\n-\r\n-class App extends React.Component<IAppProps> {\r\n-  public render() {\r\n-    return (\r\n-      <div>\r\n-        \r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-const mapState2Props = (state: any) => {\r\n-  return {\r\n-  };\r\n-}\r\n-\r\n-export default connect(mapState2Props)(App);\r\n-\r\n-\r\n-\r\n-// interface ExtendedLesson {\r\n-//   // Add your lesson type properties here\r\n-//   id: string;\r\n-//   title: string;\r\n-//   // ... other properties\r\n-// }\r\n-\r\n-// interface SubLesson {\r\n-//   // Add your sublesson type properties here\r\n-//   id: string;\r\n-//   title: string;\r\n-//   // ... other properties\r\n-// }\r\n-\r\n-export function TaskCalendar() {\r\n-  const [selectedLesson, setSelectedLesson] = useState<ExtendedLesson | null>(null);\r\n-  const [selectedSubLesson, setSelectedSubLesson] = useState<SubLesson | null>(null);\r\n-  const [dialogOpen, setDialogOpen] = useState(false);\r\n-  const [isAddEventOpen, setIsAddEventOpen] = useState(false);\r\n-  const [currentLesson, setCurrentLesson] = useState<ExtendedLesson | null>(null);\r\n-  const [isLocked, setIsLocked] = useState(true);\r\n-\r\n-  const handleClassChange = (newClass: any) => {\r\n-    // Implement class change logic\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"max-w-6xl w-full relative\">\r\n-      <div className=\"flex items-center justify-between mb-4\">\r\n-        <div className=\"flex items-center gap-4\">\r\n-          <ClassHeader\r\n-            classes={classesData}\r\n-            selectedClass={selectedClass}\r\n-            onClassChange={handleClassChange}\r\n-          />\r\n-          <Button\r\n-            variant=\"outline\"\r\n-            size=\"sm\"\r\n-            onClick={() => setIsAddEventOpen(true)}\r\n-            className=\"ml-4\"\r\n-          >\r\n-            <Plus className=\"h-4 w-4 mr-2\" />\r\n-            Add Event\r\n-          </Button>\r\n-        </div>\r\n-        <Button\r\n-          variant=\"outline\"\r\n-          size=\"sm\"\r\n-          onClick={() => setIsLocked(!isLocked)}\r\n-        >\r\n-          {isLocked ? (\r\n-            <>\r\n-              <Lock className=\"h-4 w-4 mr-2\" />\r\n-              Locked\r\n-            </>\r\n-          ) : (\r\n-            <>\r\n-              <Unlock className=\"h-4 w-4 mr-2\" />\r\n-              Unlocked\r\n-            </>\r\n-          )}\r\n-        </Button>\r\n-      </div>\r\n-\r\n-      {/* Add Event Dialog */}\r\n-      <ScheduleDialog\r\n-        open={isAddEventOpen}\r\n-        onOpenChange={setIsAddEventOpen}\r\n-        onSubmit={async (eventData) => {\r\n-          try {\r\n-            // Handle event creation here\r\n-            console.log('Creating event:', eventData);\r\n-            toast({\r\n-              title: \"Event created successfully\",\r\n-              description: \"Your event has been created successfully.\",\r\n-            });\r\n-          } catch (error) {\r\n-            toast({\r\n-              title: \"Failed to create event\",\r\n-              description: \"There was an error creating your event. Please try again later.\",\r\n-              \r\n-            });\r\n-          }\r\n-        }}\r\n-      />\r\n-    </div>\r\n-  );\r\n-}\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\n-import { Progress } from \"@/components/ui/progress\";\r\n-import { Button } from \"@/components/ui/button\";\r\n-import { ScheduleDialog } from './ScheduleDialog';\r\n-import {\r\n-  ArrowRight,\r\n-  BookOpen,\r\n-  Calendar,\r\n-  CheckCircle2,\r\n-  Clock,\r\n-  Lock,\r\n-  Plus,\r\n-  RotateCcw,\r\n-  Unlock,\r\n-  Users,\r\n-  Shield,\r\n-} from \"lucide-react\";\r\n-import { useState } from 'react';\r\n-import { toast } from \"@/components/ui/use-toast\";\r\n-import ClassHeader from \"@/components/common/ClassHeader\";\r\n-import { ExtendedLesson, SubLesson } from \"@/types/index\";\r\n-import { connect } from 'react-redux'\r\n-import { classesData } from \"@/data/mockData\";\r\n import { React } from \"react\";\r\n \r\n // More specific type instead of empty interface\r\n type IAppProps = Record<string, never>;\r\n"
                },
                {
                    "date": 1740752098081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n import ClassHeader from \"@/components/common/ClassHeader\";\r\n import { ExtendedLesson, SubLesson } from \"@/types/index\";\r\n import { connect } from 'react-redux'\r\n import { classesData } from \"@/data/mockData\";\r\n-import { React } from \"react\";\r\n+import React from \"react\";\r\n \r\n // More specific type instead of empty interface\r\n type IAppProps = Record<string, never>;\r\n \r\n"
                },
                {
                    "date": 1740752151867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n       <div className=\"flex items-center justify-between mb-4\">\r\n         <div className=\"flex items-center gap-4\">\r\n           <ClassHeader\r\n             classes={classesData}\r\n-            selectedClass={selectedClass}\r\n+            selectedClass={selectedLesson}\r\n             onClassChange={handleClassChange}\r\n           />\r\n           <Button\r\n             variant=\"outline\"\r\n"
                },
                {
                    "date": 1740752254630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,11 +65,12 @@\n   const [dialogOpen, setDialogOpen] = useState(false);\r\n   const [isAddEventOpen, setIsAddEventOpen] = useState(false);\r\n   const [currentLesson, setCurrentLesson] = useState<ExtendedLesson | null>(null);\r\n   const [isLocked, setIsLocked] = useState(true);\r\n+  const [selectedClass, setSelectedClass] = useState(classesData[0] || null);\r\n \r\n   const handleClassChange = (newClass: any) => {\r\n-    // Implement class change logic\r\n+    setSelectedClass(newClass);\r\n   };\r\n \r\n   return (\r\n     <div className=\"max-w-6xl w-full relative\">\r\n"
                },
                {
                    "date": 1740752301704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,9 +77,9 @@\n       <div className=\"flex items-center justify-between mb-4\">\r\n         <div className=\"flex items-center gap-4\">\r\n           <ClassHeader\r\n             classes={classesData}\r\n-            selectedClass={selectedLesson}\r\n+            selectedClass={selectedClass}\r\n             onClassChange={handleClassChange}\r\n           />\r\n           <Button\r\n             variant=\"outline\"\r\n"
                },
                {
                    "date": 1740752759805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,124 +13,412 @@\n   RotateCcw,\r\n   Unlock,\r\n   Users,\r\n   Shield,\r\n+  Save,\r\n } from \"lucide-react\";\r\n-import { useState } from 'react';\r\n+import { useState, useEffect, useCallback } from 'react';\r\n import { toast } from \"@/components/ui/use-toast\";\r\n import ClassHeader from \"@/components/common/ClassHeader\";\r\n import { ExtendedLesson, SubLesson } from \"@/types/index\";\r\n-import { connect } from 'react-redux'\r\n import { classesData } from \"@/data/mockData\";\r\n import React from \"react\";\r\n+import GoogleCalendarButton from \"./GoogleCalendarButton\";\r\n+import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\r\n+import { supabase } from \"@/lib/supabase\";\r\n \r\n // More specific type instead of empty interface\r\n type IAppProps = Record<string, never>;\r\n \r\n-class App extends React.Component<IAppProps> {\r\n-  public render() {\r\n-    return (\r\n-      <div>\r\n-        \r\n-      </div>\r\n-    );\r\n-  }\r\n+// Schedule event interface\r\n+interface ScheduleEvent {\r\n+  id: string;\r\n+  title: string;\r\n+  start: Date;\r\n+  end: Date;\r\n+  description?: string;\r\n+  location?: string;\r\n+  isAllDay?: boolean;\r\n+  status?: 'scheduled' | 'completed' | 'cancelled';\r\n+  color?: string;\r\n }\r\n \r\n-const mapState2Props = (state: any) => {\r\n-  return {\r\n-  };\r\n-}\r\n+// Calendar view types\r\n+type CalendarView = 'day' | 'week' | 'month';\r\n \r\n-export default connect(mapState2Props)(App);\r\n-\r\n-\r\n-\r\n-// interface ExtendedLesson {\r\n-//   // Add your lesson type properties here\r\n-//   id: string;\r\n-//   title: string;\r\n-//   // ... other properties\r\n-// }\r\n-\r\n-// interface SubLesson {\r\n-//   // Add your sublesson type properties here\r\n-//   id: string;\r\n-//   title: string;\r\n-//   // ... other properties\r\n-// }\r\n-\r\n export function TaskCalendar() {\r\n   const [selectedLesson, setSelectedLesson] = useState<ExtendedLesson | null>(null);\r\n   const [selectedSubLesson, setSelectedSubLesson] = useState<SubLesson | null>(null);\r\n   const [dialogOpen, setDialogOpen] = useState(false);\r\n   const [isAddEventOpen, setIsAddEventOpen] = useState(false);\r\n   const [currentLesson, setCurrentLesson] = useState<ExtendedLesson | null>(null);\r\n   const [isLocked, setIsLocked] = useState(true);\r\n   const [selectedClass, setSelectedClass] = useState(classesData[0] || null);\r\n+  const [events, setEvents] = useState<ScheduleEvent[]>([]);\r\n+  const [isLoading, setIsLoading] = useState(false);\r\n+  const [isSaving, setIsSaving] = useState(false);\r\n+  const [calendarView, setCalendarView] = useState<CalendarView>('week');\r\n+  const [selectedDate, setSelectedDate] = useState<Date>(new Date());\r\n+  const [calendarRef, setCalendarRef] = useState<HTMLDivElement | null>(null);\r\n+  \r\n+  // Fetch events when class changes\r\n+  useEffect(() => {\r\n+    if (selectedClass) {\r\n+      fetchEvents();\r\n+    }\r\n+  }, [selectedClass]);\r\n \r\n+  // Function to fetch events from backend\r\n+  const fetchEvents = useCallback(async () => {\r\n+    setIsLoading(true);\r\n+    try {\r\n+      // Mock data for now, replace with actual API call\r\n+      const { data, error } = await supabase\r\n+        .from('events')\r\n+        .select('*')\r\n+        .eq('class_id', selectedClass?.id || '')\r\n+        .order('start_time', { ascending: true });\r\n+      \r\n+      if (error) throw error;\r\n+      \r\n+      // Transform data to the expected format\r\n+      const transformedEvents = data?.map(event => ({\r\n+        id: event.id,\r\n+        title: event.title,\r\n+        start: new Date(event.start_time),\r\n+        end: new Date(event.end_time),\r\n+        description: event.description,\r\n+        location: event.location,\r\n+        isAllDay: event.is_all_day,\r\n+        status: event.status,\r\n+        color: event.color\r\n+      })) || [];\r\n+      \r\n+      setEvents(transformedEvents);\r\n+    } catch (error) {\r\n+      console.error('Error fetching events:', error);\r\n+      toast({\r\n+        title: \"Failed to load schedule\",\r\n+        description: \"There was an error loading your schedule. Please try again.\",\r\n+        variant: \"destructive\"\r\n+      });\r\n+    } finally {\r\n+      setIsLoading(false);\r\n+    }\r\n+  }, [selectedClass]);\r\n+\r\n   const handleClassChange = (newClass: any) => {\r\n     setSelectedClass(newClass);\r\n   };\r\n \r\n+  // Save events to backend\r\n+  const saveEvents = async () => {\r\n+    setIsSaving(true);\r\n+    try {\r\n+      // Implementation would depend on your backend\r\n+      // This is a placeholder\r\n+      await Promise.all(\r\n+        events.map(async (event) => {\r\n+          const { error } = await supabase\r\n+            .from('events')\r\n+            .upsert({\r\n+              id: event.id,\r\n+              title: event.title,\r\n+              start_time: event.start.toISOString(),\r\n+              end_time: event.end.toISOString(),\r\n+              description: event.description,\r\n+              location: event.location,\r\n+              is_all_day: event.isAllDay,\r\n+              status: event.status,\r\n+              color: event.color,\r\n+              class_id: selectedClass?.id\r\n+            });\r\n+          \r\n+          if (error) throw error;\r\n+        })\r\n+      );\r\n+      \r\n+      toast({\r\n+        title: \"Schedule saved\",\r\n+        description: \"Your schedule has been saved successfully.\",\r\n+      });\r\n+    } catch (error) {\r\n+      console.error('Error saving events:', error);\r\n+      toast({\r\n+        title: \"Failed to save schedule\",\r\n+        description: \"There was an error saving your schedule. Please try again.\",\r\n+        variant: \"destructive\"\r\n+      });\r\n+    } finally {\r\n+      setIsSaving(false);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle adding a new event\r\n+  const handleAddEvent = async (eventData: any) => {\r\n+    try {\r\n+      // Create a new event object\r\n+      const newEvent: ScheduleEvent = {\r\n+        id: crypto.randomUUID(),\r\n+        title: eventData.title,\r\n+        start: new Date(eventData.startDate),\r\n+        end: new Date(eventData.endDate),\r\n+        description: eventData.description,\r\n+        location: eventData.location,\r\n+        isAllDay: eventData.isAllDay,\r\n+        status: 'scheduled',\r\n+        color: eventData.color || '#3b82f6'\r\n+      };\r\n+      \r\n+      // Add to local state\r\n+      setEvents(prev => [...prev, newEvent]);\r\n+      \r\n+      // Save to backend\r\n+      const { error } = await supabase\r\n+        .from('events')\r\n+        .insert({\r\n+          id: newEvent.id,\r\n+          title: newEvent.title,\r\n+          start_time: newEvent.start.toISOString(),\r\n+          end_time: newEvent.end.toISOString(),\r\n+          description: newEvent.description,\r\n+          location: newEvent.location,\r\n+          is_all_day: newEvent.isAllDay,\r\n+          status: newEvent.status,\r\n+          color: newEvent.color,\r\n+          class_id: selectedClass?.id\r\n+        });\r\n+      \r\n+      if (error) throw error;\r\n+      \r\n+      toast({\r\n+        title: \"Event created\",\r\n+        description: \"Your event has been created successfully.\",\r\n+      });\r\n+    } catch (error) {\r\n+      console.error('Error creating event:', error);\r\n+      toast({\r\n+        title: \"Failed to create event\",\r\n+        description: \"There was an error creating your event. Please try again.\",\r\n+        variant: \"destructive\"\r\n+      });\r\n+    }\r\n+  };\r\n+\r\n+  // Change calendar view\r\n+  const handleViewChange = (view: CalendarView) => {\r\n+    setCalendarView(view);\r\n+  };\r\n+\r\n+  // Handle Google Calendar sync\r\n+  const handleCalendarSync = (googleEvents: any[]) => {\r\n+    // Merge events from Google Calendar\r\n+    toast({\r\n+      title: \"Calendar synced\",\r\n+      description: `${googleEvents.length} events synced from Google Calendar.`,\r\n+    });\r\n+  };\r\n+\r\n   return (\r\n     <div className=\"max-w-6xl w-full relative\">\r\n-      <div className=\"flex items-center justify-between mb-4\">\r\n-        <div className=\"flex items-center gap-4\">\r\n-          <ClassHeader\r\n-            classes={classesData}\r\n-            selectedClass={selectedClass}\r\n-            onClassChange={handleClassChange}\r\n-          />\r\n-          <Button\r\n-            variant=\"outline\"\r\n-            size=\"sm\"\r\n-            onClick={() => setIsAddEventOpen(true)}\r\n-            className=\"ml-4\"\r\n-          >\r\n-            <Plus className=\"h-4 w-4 mr-2\" />\r\n-            Add Event\r\n-          </Button>\r\n+      <div className=\"flex flex-col space-y-4\">\r\n+        <div className=\"flex items-center justify-between\">\r\n+          <div className=\"flex items-center gap-4\">\r\n+            <ClassHeader\r\n+              classes={classesData}\r\n+              selectedClass={selectedClass}\r\n+              onClassChange={handleClassChange}\r\n+            />\r\n+            <Button\r\n+              variant=\"outline\"\r\n+              size=\"sm\"\r\n+              onClick={() => setIsAddEventOpen(true)}\r\n+              className=\"ml-4\"\r\n+            >\r\n+              <Plus className=\"h-4 w-4 mr-2\" />\r\n+              Add Event\r\n+            </Button>\r\n+          </div>\r\n+          \r\n+          <div className=\"flex items-center gap-2\">\r\n+            <GoogleCalendarButton \r\n+              events={events}\r\n+              onSyncComplete={handleCalendarSync}\r\n+            />\r\n+            \r\n+            <Button\r\n+              variant=\"outline\"\r\n+              size=\"sm\"\r\n+              onClick={saveEvents}\r\n+              disabled={isSaving}\r\n+              className=\"ml-2\"\r\n+            >\r\n+              {isSaving ? (\r\n+                <><Clock className=\"h-4 w-4 mr-2 animate-spin\" /> Saving...</>\r\n+              ) : (\r\n+                <><Save className=\"h-4 w-4 mr-2\" /> Save Schedule</>\r\n+              )}\r\n+            </Button>\r\n+            \r\n+            <Button\r\n+              variant=\"outline\"\r\n+              size=\"sm\"\r\n+              onClick={() => setIsLocked(!isLocked)}\r\n+            >\r\n+              {isLocked ? (\r\n+                <>\r\n+                  <Lock className=\"h-4 w-4 mr-2\" />\r\n+                  Locked\r\n+                </>\r\n+              ) : (\r\n+                <>\r\n+                  <Unlock className=\"h-4 w-4 mr-2\" />\r\n+                  Unlocked\r\n+                </>\r\n+              )}\r\n+            </Button>\r\n+          </div>\r\n         </div>\r\n-        <Button\r\n-          variant=\"outline\"\r\n-          size=\"sm\"\r\n-          onClick={() => setIsLocked(!isLocked)}\r\n-        >\r\n-          {isLocked ? (\r\n-            <>\r\n-              <Lock className=\"h-4 w-4 mr-2\" />\r\n-              Locked\r\n-            </>\r\n-          ) : (\r\n-            <>\r\n-              <Unlock className=\"h-4 w-4 mr-2\" />\r\n-              Unlocked\r\n-            </>\r\n-          )}\r\n-        </Button>\r\n+        \r\n+        {/* Calendar View Selector */}\r\n+        <div className=\"flex justify-between items-center\">\r\n+          <Tabs value={calendarView} onValueChange={(v) => handleViewChange(v as CalendarView)}>\r\n+            <TabsList>\r\n+              <TabsTrigger value=\"day\">Day</TabsTrigger>\r\n+              <TabsTrigger value=\"week\">Week</TabsTrigger>\r\n+              <TabsTrigger value=\"month\">Month</TabsTrigger>\r\n+            </TabsList>\r\n+          </Tabs>\r\n+          \r\n+          <div className=\"flex items-center gap-2\">\r\n+            <Button\r\n+              variant=\"ghost\"\r\n+              size=\"sm\"\r\n+              onClick={() => {\r\n+                const newDate = new Date(selectedDate);\r\n+                if (calendarView === 'day') {\r\n+                  newDate.setDate(newDate.getDate() - 1);\r\n+                } else if (calendarView === 'week') {\r\n+                  newDate.setDate(newDate.getDate() - 7);\r\n+                } else {\r\n+                  newDate.setMonth(newDate.getMonth() - 1);\r\n+                }\r\n+                setSelectedDate(newDate);\r\n+              }}\r\n+            >\r\n+              Previous\r\n+            </Button>\r\n+            <Button\r\n+              variant=\"ghost\"\r\n+              size=\"sm\"\r\n+              onClick={() => setSelectedDate(new Date())}\r\n+            >\r\n+              Today\r\n+            </Button>\r\n+            <Button\r\n+              variant=\"ghost\"\r\n+              size=\"sm\"\r\n+              onClick={() => {\r\n+                const newDate = new Date(selectedDate);\r\n+                if (calendarView === 'day') {\r\n+                  newDate.setDate(newDate.getDate() + 1);\r\n+                } else if (calendarView === 'week') {\r\n+                  newDate.setDate(newDate.getDate() + 7);\r\n+                } else {\r\n+                  newDate.setMonth(newDate.getMonth() + 1);\r\n+                }\r\n+                setSelectedDate(newDate);\r\n+              }}\r\n+            >\r\n+              Next\r\n+            </Button>\r\n+          </div>\r\n+        </div>\r\n+        \r\n+        {/* Calendar View */}\r\n+        <Card>\r\n+          <CardHeader className=\"pb-2\">\r\n+            <CardTitle>\r\n+              {selectedDate.toLocaleDateString('en-US', { \r\n+                month: 'long', \r\n+                year: 'numeric',\r\n+                ...(calendarView === 'day' && { day: 'numeric' }),\r\n+                ...(calendarView === 'week' && { day: 'numeric' })\r\n+              })}\r\n+              {calendarView === 'week' && (\r\n+                <span> - {\r\n+                  new Date(\r\n+                    selectedDate.getFullYear(),\r\n+                    selectedDate.getMonth(),\r\n+                    selectedDate.getDate() + 6\r\n+                  ).toLocaleDateString('en-US', { day: 'numeric' })\r\n+                }</span>\r\n+              )}\r\n+            </CardTitle>\r\n+          </CardHeader>\r\n+          <CardContent>\r\n+            <div \r\n+              className={`calendar-container ${calendarView}-view`} \r\n+              ref={setCalendarRef}\r\n+            >\r\n+              {isLoading ? (\r\n+                <div className=\"flex justify-center items-center h-[400px]\">\r\n+                  <div className=\"flex flex-col items-center\">\r\n+                    <Clock className=\"h-8 w-8 mb-2 animate-spin text-primary\" />\r\n+                    <p>Loading schedule...</p>\r\n+                  </div>\r\n+                </div>\r\n+              ) : events.length === 0 ? (\r\n+                <div className=\"flex justify-center items-center h-[400px] border border-dashed rounded-lg border-gray-300\">\r\n+                  <div className=\"flex flex-col items-center text-gray-500\">\r\n+                    <Calendar className=\"h-12 w-12 mb-2\" />\r\n+                    <p className=\"text-lg font-medium\">No events scheduled</p>\r\n+                    <p className=\"text-sm mt-1\">Click \"Add Event\" to create your first event</p>\r\n+                    <Button\r\n+                      variant=\"outline\"\r\n+                      size=\"sm\"\r\n+                      onClick={() => setIsAddEventOpen(true)}\r\n+                      className=\"mt-4\"\r\n+                    >\r\n+                      <Plus className=\"h-4 w-4 mr-2\" />\r\n+                      Add Event\r\n+                    </Button>\r\n+                  </div>\r\n+                </div>\r\n+              ) : (\r\n+                <div className={`calendar-grid ${calendarView}-view`}>\r\n+                  {/* Calendar grid would be rendered here */}\r\n+                  {/* This is a simplified placeholder for the actual calendar visualization */}\r\n+                  <div className=\"min-h-[400px] border rounded-lg p-4\">\r\n+                    {events.map((event) => (\r\n+                      <div \r\n+                        key={event.id}\r\n+                        className=\"p-2 mb-2 rounded-md border-l-4\"\r\n+                        style={{ borderLeftColor: event.color || '#3b82f6' }}\r\n+                      >\r\n+                        <div className=\"font-medium\">{event.title}</div>\r\n+                        <div className=\"text-sm text-gray-500\">\r\n+                          {event.start.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })} - \r\n+                          {event.end.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\r\n+                        </div>\r\n+                        {event.location && (\r\n+                          <div className=\"text-xs text-gray-400 mt-1\">{event.location}</div>\r\n+                        )}\r\n+                      </div>\r\n+                    ))}\r\n+                  </div>\r\n+                </div>\r\n+              )}\r\n+            </div>\r\n+          </CardContent>\r\n+        </Card>\r\n       </div>\r\n \r\n       {/* Add Event Dialog */}\r\n       <ScheduleDialog\r\n         open={isAddEventOpen}\r\n         onOpenChange={setIsAddEventOpen}\r\n-        onSubmit={async (eventData) => {\r\n-          try {\r\n-            // Handle event creation here\r\n-            console.log('Creating event:', eventData);\r\n-            toast({\r\n-              title: \"Event created successfully\",\r\n-              description: \"Your event has been created successfully.\",\r\n-            });\r\n-          } catch (error) {\r\n-            toast({\r\n-              title: \"Failed to create event\",\r\n-              description: \"There was an error creating your event. Please try again later.\",\r\n-              \r\n-            });\r\n-          }\r\n-        }}\r\n+        onSubmit={handleAddEvent}\r\n       />\r\n     </div>\r\n   );\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740753411792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,412 +13,124 @@\n   RotateCcw,\r\n   Unlock,\r\n   Users,\r\n   Shield,\r\n-  Save,\r\n } from \"lucide-react\";\r\n-import { useState, useEffect, useCallback } from 'react';\r\n+import { useState } from 'react';\r\n import { toast } from \"@/components/ui/use-toast\";\r\n import ClassHeader from \"@/components/common/ClassHeader\";\r\n import { ExtendedLesson, SubLesson } from \"@/types/index\";\r\n+import { connect } from 'react-redux'\r\n import { classesData } from \"@/data/mockData\";\r\n import React from \"react\";\r\n-import GoogleCalendarButton from \"./GoogleCalendarButton\";\r\n-import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\r\n-import { supabase } from \"@/lib/supabase\";\r\n \r\n // More specific type instead of empty interface\r\n type IAppProps = Record<string, never>;\r\n \r\n-// Schedule event interface\r\n-interface ScheduleEvent {\r\n-  id: string;\r\n-  title: string;\r\n-  start: Date;\r\n-  end: Date;\r\n-  description?: string;\r\n-  location?: string;\r\n-  isAllDay?: boolean;\r\n-  status?: 'scheduled' | 'completed' | 'cancelled';\r\n-  color?: string;\r\n+class App extends React.Component<IAppProps> {\r\n+  public render() {\r\n+    return (\r\n+      <div>\r\n+        \r\n+      </div>\r\n+    );\r\n+  }\r\n }\r\n \r\n-// Calendar view types\r\n-type CalendarView = 'day' | 'week' | 'month';\r\n+const mapState2Props = (state: any) => {\r\n+  return {\r\n+  };\r\n+}\r\n \r\n+export default connect(mapState2Props)(App);\r\n+\r\n+\r\n+\r\n+// interface ExtendedLesson {\r\n+//   // Add your lesson type properties here\r\n+//   id: string;\r\n+//   title: string;\r\n+//   // ... other properties\r\n+// }\r\n+\r\n+// interface SubLesson {\r\n+//   // Add your sublesson type properties here\r\n+//   id: string;\r\n+//   title: string;\r\n+//   // ... other properties\r\n+// }\r\n+\r\n export function TaskCalendar() {\r\n   const [selectedLesson, setSelectedLesson] = useState<ExtendedLesson | null>(null);\r\n   const [selectedSubLesson, setSelectedSubLesson] = useState<SubLesson | null>(null);\r\n   const [dialogOpen, setDialogOpen] = useState(false);\r\n   const [isAddEventOpen, setIsAddEventOpen] = useState(false);\r\n   const [currentLesson, setCurrentLesson] = useState<ExtendedLesson | null>(null);\r\n   const [isLocked, setIsLocked] = useState(true);\r\n   const [selectedClass, setSelectedClass] = useState(classesData[0] || null);\r\n-  const [events, setEvents] = useState<ScheduleEvent[]>([]);\r\n-  const [isLoading, setIsLoading] = useState(false);\r\n-  const [isSaving, setIsSaving] = useState(false);\r\n-  const [calendarView, setCalendarView] = useState<CalendarView>('week');\r\n-  const [selectedDate, setSelectedDate] = useState<Date>(new Date());\r\n-  const [calendarRef, setCalendarRef] = useState<HTMLDivElement | null>(null);\r\n-  \r\n-  // Fetch events when class changes\r\n-  useEffect(() => {\r\n-    if (selectedClass) {\r\n-      fetchEvents();\r\n-    }\r\n-  }, [selectedClass]);\r\n \r\n-  // Function to fetch events from backend\r\n-  const fetchEvents = useCallback(async () => {\r\n-    setIsLoading(true);\r\n-    try {\r\n-      // Mock data for now, replace with actual API call\r\n-      const { data, error } = await supabase\r\n-        .from('events')\r\n-        .select('*')\r\n-        .eq('class_id', selectedClass?.id || '')\r\n-        .order('start_time', { ascending: true });\r\n-      \r\n-      if (error) throw error;\r\n-      \r\n-      // Transform data to the expected format\r\n-      const transformedEvents = data?.map(event => ({\r\n-        id: event.id,\r\n-        title: event.title,\r\n-        start: new Date(event.start_time),\r\n-        end: new Date(event.end_time),\r\n-        description: event.description,\r\n-        location: event.location,\r\n-        isAllDay: event.is_all_day,\r\n-        status: event.status,\r\n-        color: event.color\r\n-      })) || [];\r\n-      \r\n-      setEvents(transformedEvents);\r\n-    } catch (error) {\r\n-      console.error('Error fetching events:', error);\r\n-      toast({\r\n-        title: \"Failed to load schedule\",\r\n-        description: \"There was an error loading your schedule. Please try again.\",\r\n-        variant: \"destructive\"\r\n-      });\r\n-    } finally {\r\n-      setIsLoading(false);\r\n-    }\r\n-  }, [selectedClass]);\r\n-\r\n   const handleClassChange = (newClass: any) => {\r\n     setSelectedClass(newClass);\r\n   };\r\n \r\n-  // Save events to backend\r\n-  const saveEvents = async () => {\r\n-    setIsSaving(true);\r\n-    try {\r\n-      // Implementation would depend on your backend\r\n-      // This is a placeholder\r\n-      await Promise.all(\r\n-        events.map(async (event) => {\r\n-          const { error } = await supabase\r\n-            .from('events')\r\n-            .upsert({\r\n-              id: event.id,\r\n-              title: event.title,\r\n-              start_time: event.start.toISOString(),\r\n-              end_time: event.end.toISOString(),\r\n-              description: event.description,\r\n-              location: event.location,\r\n-              is_all_day: event.isAllDay,\r\n-              status: event.status,\r\n-              color: event.color,\r\n-              class_id: selectedClass?.id\r\n-            });\r\n-          \r\n-          if (error) throw error;\r\n-        })\r\n-      );\r\n-      \r\n-      toast({\r\n-        title: \"Schedule saved\",\r\n-        description: \"Your schedule has been saved successfully.\",\r\n-      });\r\n-    } catch (error) {\r\n-      console.error('Error saving events:', error);\r\n-      toast({\r\n-        title: \"Failed to save schedule\",\r\n-        description: \"There was an error saving your schedule. Please try again.\",\r\n-        variant: \"destructive\"\r\n-      });\r\n-    } finally {\r\n-      setIsSaving(false);\r\n-    }\r\n-  };\r\n-\r\n-  // Handle adding a new event\r\n-  const handleAddEvent = async (eventData: any) => {\r\n-    try {\r\n-      // Create a new event object\r\n-      const newEvent: ScheduleEvent = {\r\n-        id: crypto.randomUUID(),\r\n-        title: eventData.title,\r\n-        start: new Date(eventData.startDate),\r\n-        end: new Date(eventData.endDate),\r\n-        description: eventData.description,\r\n-        location: eventData.location,\r\n-        isAllDay: eventData.isAllDay,\r\n-        status: 'scheduled',\r\n-        color: eventData.color || '#3b82f6'\r\n-      };\r\n-      \r\n-      // Add to local state\r\n-      setEvents(prev => [...prev, newEvent]);\r\n-      \r\n-      // Save to backend\r\n-      const { error } = await supabase\r\n-        .from('events')\r\n-        .insert({\r\n-          id: newEvent.id,\r\n-          title: newEvent.title,\r\n-          start_time: newEvent.start.toISOString(),\r\n-          end_time: newEvent.end.toISOString(),\r\n-          description: newEvent.description,\r\n-          location: newEvent.location,\r\n-          is_all_day: newEvent.isAllDay,\r\n-          status: newEvent.status,\r\n-          color: newEvent.color,\r\n-          class_id: selectedClass?.id\r\n-        });\r\n-      \r\n-      if (error) throw error;\r\n-      \r\n-      toast({\r\n-        title: \"Event created\",\r\n-        description: \"Your event has been created successfully.\",\r\n-      });\r\n-    } catch (error) {\r\n-      console.error('Error creating event:', error);\r\n-      toast({\r\n-        title: \"Failed to create event\",\r\n-        description: \"There was an error creating your event. Please try again.\",\r\n-        variant: \"destructive\"\r\n-      });\r\n-    }\r\n-  };\r\n-\r\n-  // Change calendar view\r\n-  const handleViewChange = (view: CalendarView) => {\r\n-    setCalendarView(view);\r\n-  };\r\n-\r\n-  // Handle Google Calendar sync\r\n-  const handleCalendarSync = (googleEvents: any[]) => {\r\n-    // Merge events from Google Calendar\r\n-    toast({\r\n-      title: \"Calendar synced\",\r\n-      description: `${googleEvents.length} events synced from Google Calendar.`,\r\n-    });\r\n-  };\r\n-\r\n   return (\r\n     <div className=\"max-w-6xl w-full relative\">\r\n-      <div className=\"flex flex-col space-y-4\">\r\n-        <div className=\"flex items-center justify-between\">\r\n-          <div className=\"flex items-center gap-4\">\r\n-            <ClassHeader\r\n-              classes={classesData}\r\n-              selectedClass={selectedClass}\r\n-              onClassChange={handleClassChange}\r\n-            />\r\n-            <Button\r\n-              variant=\"outline\"\r\n-              size=\"sm\"\r\n-              onClick={() => setIsAddEventOpen(true)}\r\n-              className=\"ml-4\"\r\n-            >\r\n-              <Plus className=\"h-4 w-4 mr-2\" />\r\n-              Add Event\r\n-            </Button>\r\n-          </div>\r\n-          \r\n-          <div className=\"flex items-center gap-2\">\r\n-            <GoogleCalendarButton \r\n-              events={events}\r\n-              onSyncComplete={handleCalendarSync}\r\n-            />\r\n-            \r\n-            <Button\r\n-              variant=\"outline\"\r\n-              size=\"sm\"\r\n-              onClick={saveEvents}\r\n-              disabled={isSaving}\r\n-              className=\"ml-2\"\r\n-            >\r\n-              {isSaving ? (\r\n-                <><Clock className=\"h-4 w-4 mr-2 animate-spin\" /> Saving...</>\r\n-              ) : (\r\n-                <><Save className=\"h-4 w-4 mr-2\" /> Save Schedule</>\r\n-              )}\r\n-            </Button>\r\n-            \r\n-            <Button\r\n-              variant=\"outline\"\r\n-              size=\"sm\"\r\n-              onClick={() => setIsLocked(!isLocked)}\r\n-            >\r\n-              {isLocked ? (\r\n-                <>\r\n-                  <Lock className=\"h-4 w-4 mr-2\" />\r\n-                  Locked\r\n-                </>\r\n-              ) : (\r\n-                <>\r\n-                  <Unlock className=\"h-4 w-4 mr-2\" />\r\n-                  Unlocked\r\n-                </>\r\n-              )}\r\n-            </Button>\r\n-          </div>\r\n+      <div className=\"flex items-center justify-between mb-4\">\r\n+        <div className=\"flex items-center gap-4\">\r\n+          <ClassHeader\r\n+            classes={classesData}\r\n+            selectedClass={selectedClass}\r\n+            onClassChange={handleClassChange}\r\n+          />\r\n+          <Button\r\n+            variant=\"outline\"\r\n+            size=\"sm\"\r\n+            onClick={() => setIsAddEventOpen(true)}\r\n+            className=\"ml-4\"\r\n+          >\r\n+            <Plus className=\"h-4 w-4 mr-2\" />\r\n+            Add Event\r\n+          </Button>\r\n         </div>\r\n-        \r\n-        {/* Calendar View Selector */}\r\n-        <div className=\"flex justify-between items-center\">\r\n-          <Tabs value={calendarView} onValueChange={(v) => handleViewChange(v as CalendarView)}>\r\n-            <TabsList>\r\n-              <TabsTrigger value=\"day\">Day</TabsTrigger>\r\n-              <TabsTrigger value=\"week\">Week</TabsTrigger>\r\n-              <TabsTrigger value=\"month\">Month</TabsTrigger>\r\n-            </TabsList>\r\n-          </Tabs>\r\n-          \r\n-          <div className=\"flex items-center gap-2\">\r\n-            <Button\r\n-              variant=\"ghost\"\r\n-              size=\"sm\"\r\n-              onClick={() => {\r\n-                const newDate = new Date(selectedDate);\r\n-                if (calendarView === 'day') {\r\n-                  newDate.setDate(newDate.getDate() - 1);\r\n-                } else if (calendarView === 'week') {\r\n-                  newDate.setDate(newDate.getDate() - 7);\r\n-                } else {\r\n-                  newDate.setMonth(newDate.getMonth() - 1);\r\n-                }\r\n-                setSelectedDate(newDate);\r\n-              }}\r\n-            >\r\n-              Previous\r\n-            </Button>\r\n-            <Button\r\n-              variant=\"ghost\"\r\n-              size=\"sm\"\r\n-              onClick={() => setSelectedDate(new Date())}\r\n-            >\r\n-              Today\r\n-            </Button>\r\n-            <Button\r\n-              variant=\"ghost\"\r\n-              size=\"sm\"\r\n-              onClick={() => {\r\n-                const newDate = new Date(selectedDate);\r\n-                if (calendarView === 'day') {\r\n-                  newDate.setDate(newDate.getDate() + 1);\r\n-                } else if (calendarView === 'week') {\r\n-                  newDate.setDate(newDate.getDate() + 7);\r\n-                } else {\r\n-                  newDate.setMonth(newDate.getMonth() + 1);\r\n-                }\r\n-                setSelectedDate(newDate);\r\n-              }}\r\n-            >\r\n-              Next\r\n-            </Button>\r\n-          </div>\r\n-        </div>\r\n-        \r\n-        {/* Calendar View */}\r\n-        <Card>\r\n-          <CardHeader className=\"pb-2\">\r\n-            <CardTitle>\r\n-              {selectedDate.toLocaleDateString('en-US', { \r\n-                month: 'long', \r\n-                year: 'numeric',\r\n-                ...(calendarView === 'day' && { day: 'numeric' }),\r\n-                ...(calendarView === 'week' && { day: 'numeric' })\r\n-              })}\r\n-              {calendarView === 'week' && (\r\n-                <span> - {\r\n-                  new Date(\r\n-                    selectedDate.getFullYear(),\r\n-                    selectedDate.getMonth(),\r\n-                    selectedDate.getDate() + 6\r\n-                  ).toLocaleDateString('en-US', { day: 'numeric' })\r\n-                }</span>\r\n-              )}\r\n-            </CardTitle>\r\n-          </CardHeader>\r\n-          <CardContent>\r\n-            <div \r\n-              className={`calendar-container ${calendarView}-view`} \r\n-              ref={setCalendarRef}\r\n-            >\r\n-              {isLoading ? (\r\n-                <div className=\"flex justify-center items-center h-[400px]\">\r\n-                  <div className=\"flex flex-col items-center\">\r\n-                    <Clock className=\"h-8 w-8 mb-2 animate-spin text-primary\" />\r\n-                    <p>Loading schedule...</p>\r\n-                  </div>\r\n-                </div>\r\n-              ) : events.length === 0 ? (\r\n-                <div className=\"flex justify-center items-center h-[400px] border border-dashed rounded-lg border-gray-300\">\r\n-                  <div className=\"flex flex-col items-center text-gray-500\">\r\n-                    <Calendar className=\"h-12 w-12 mb-2\" />\r\n-                    <p className=\"text-lg font-medium\">No events scheduled</p>\r\n-                    <p className=\"text-sm mt-1\">Click \"Add Event\" to create your first event</p>\r\n-                    <Button\r\n-                      variant=\"outline\"\r\n-                      size=\"sm\"\r\n-                      onClick={() => setIsAddEventOpen(true)}\r\n-                      className=\"mt-4\"\r\n-                    >\r\n-                      <Plus className=\"h-4 w-4 mr-2\" />\r\n-                      Add Event\r\n-                    </Button>\r\n-                  </div>\r\n-                </div>\r\n-              ) : (\r\n-                <div className={`calendar-grid ${calendarView}-view`}>\r\n-                  {/* Calendar grid would be rendered here */}\r\n-                  {/* This is a simplified placeholder for the actual calendar visualization */}\r\n-                  <div className=\"min-h-[400px] border rounded-lg p-4\">\r\n-                    {events.map((event) => (\r\n-                      <div \r\n-                        key={event.id}\r\n-                        className=\"p-2 mb-2 rounded-md border-l-4\"\r\n-                        style={{ borderLeftColor: event.color || '#3b82f6' }}\r\n-                      >\r\n-                        <div className=\"font-medium\">{event.title}</div>\r\n-                        <div className=\"text-sm text-gray-500\">\r\n-                          {event.start.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })} - \r\n-                          {event.end.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\r\n-                        </div>\r\n-                        {event.location && (\r\n-                          <div className=\"text-xs text-gray-400 mt-1\">{event.location}</div>\r\n-                        )}\r\n-                      </div>\r\n-                    ))}\r\n-                  </div>\r\n-                </div>\r\n-              )}\r\n-            </div>\r\n-          </CardContent>\r\n-        </Card>\r\n+        <Button\r\n+          variant=\"outline\"\r\n+          size=\"sm\"\r\n+          onClick={() => setIsLocked(!isLocked)}\r\n+        >\r\n+          {isLocked ? (\r\n+            <>\r\n+              <Lock className=\"h-4 w-4 mr-2\" />\r\n+              Locked\r\n+            </>\r\n+          ) : (\r\n+            <>\r\n+              <Unlock className=\"h-4 w-4 mr-2\" />\r\n+              Unlocked\r\n+            </>\r\n+          )}\r\n+        </Button>\r\n       </div>\r\n \r\n       {/* Add Event Dialog */}\r\n       <ScheduleDialog\r\n         open={isAddEventOpen}\r\n         onOpenChange={setIsAddEventOpen}\r\n-        onSubmit={handleAddEvent}\r\n+        onSubmit={async (eventData) => {\r\n+          try {\r\n+            // Handle event creation here\r\n+            console.log('Creating event:', eventData);\r\n+            toast({\r\n+              title: \"Event created successfully\",\r\n+              description: \"Your event has been created successfully.\",\r\n+            });\r\n+          } catch (error) {\r\n+            toast({\r\n+              title: \"Failed to create event\",\r\n+              description: \"There was an error creating your event. Please try again later.\",\r\n+              \r\n+            });\r\n+          }\r\n+        }}\r\n       />\r\n     </div>\r\n   );\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740753666889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,16 +13,31 @@\n   RotateCcw,\r\n   Unlock,\r\n   Users,\r\n   Shield,\r\n+  ExternalLink,\r\n+  RefreshCw,\r\n+  Filter,\r\n+  FileText,\r\n+  X,\r\n+  AlertCircle,\r\n+  Microsoft,\r\n } from \"lucide-react\";\r\n-import { useState } from 'react';\r\n+import { useState, useEffect, useCallback } from 'react';\r\n import { toast } from \"@/components/ui/use-toast\";\r\n import ClassHeader from \"@/components/common/ClassHeader\";\r\n import { ExtendedLesson, SubLesson } from \"@/types/index\";\r\n-import { connect } from 'react-redux'\r\n import { classesData } from \"@/data/mockData\";\r\n import React from \"react\";\r\n+import { motion, AnimatePresence } from 'framer-motion';\r\n+import { GoogleCalendarButton } from './GoogleCalendarButton';\r\n+import { \r\n+  Tooltip,\r\n+  TooltipContent,\r\n+  TooltipProvider,\r\n+  TooltipTrigger,\r\n+} from \"@/components/ui/tooltip\";\r\n+import { cn } from \"@/lib/utils\";\r\n \r\n // More specific type instead of empty interface\r\n type IAppProps = Record<string, never>;\r\n \r\n@@ -35,102 +50,603 @@\n     );\r\n   }\r\n }\r\n \r\n-const mapState2Props = (state: any) => {\r\n-  return {\r\n-  };\r\n+// Interface for CalendarEvent\r\n+interface CalendarEvent {\r\n+  id: string;\r\n+  title: string;\r\n+  start: Date;\r\n+  end: Date;\r\n+  description?: string;\r\n+  location?: string;\r\n+  color?: string;\r\n+  isAllDay?: boolean;\r\n+  recurrence?: string;\r\n+  attendees?: string[];\r\n+  source?: 'local' | 'google' | 'microsoft';\r\n }\r\n \r\n-export default connect(mapState2Props)(App);\r\n+// Interface for MicrosoftCalendarIntegration props\r\n+interface MicrosoftCalendarButtonProps {\r\n+  onConnect: () => Promise<void>;\r\n+  onSync: () => Promise<void>;\r\n+  isConnected: boolean;\r\n+  isLoading: boolean;\r\n+}\r\n \r\n+// Microsoft Calendar Button Component\r\n+const MicrosoftCalendarButton = ({\r\n+  onConnect,\r\n+  onSync,\r\n+  isConnected,\r\n+  isLoading\r\n+}: MicrosoftCalendarButtonProps) => {\r\n+  return (\r\n+    <TooltipProvider>\r\n+      <Tooltip>\r\n+        <TooltipTrigger asChild>\r\n+          <Button\r\n+            variant=\"outline\"\r\n+            size=\"sm\"\r\n+            className={cn(\r\n+              \"gap-2 transition-all duration-300\",\r\n+              isConnected ? \"bg-blue-50 hover:bg-blue-100 border-blue-200\" : \"\"\r\n+            )}\r\n+            onClick={isConnected ? onSync : onConnect}\r\n+            disabled={isLoading}\r\n+          >\r\n+            <Microsoft className={cn(\r\n+              \"h-4 w-4 transition-transform\",\r\n+              isLoading ? \"animate-spin\" : \"group-hover:scale-110\"\r\n+            )} />\r\n+            <span className=\"hidden sm:inline\">\r\n+              {isConnected ? \"Sync Microsoft Calendar\" : \"Connect Microsoft Calendar\"}\r\n+            </span>\r\n+          </Button>\r\n+        </TooltipTrigger>\r\n+        <TooltipContent side=\"bottom\">\r\n+          {isConnected \r\n+            ? \"Sync your events with Microsoft Calendar\" \r\n+            : \"Connect your Microsoft Calendar account\"}\r\n+        </TooltipContent>\r\n+      </Tooltip>\r\n+    </TooltipProvider>\r\n+  );\r\n+};\r\n \r\n-\r\n-// interface ExtendedLesson {\r\n-//   // Add your lesson type properties here\r\n-//   id: string;\r\n-//   title: string;\r\n-//   // ... other properties\r\n-// }\r\n-\r\n-// interface SubLesson {\r\n-//   // Add your sublesson type properties here\r\n-//   id: string;\r\n-//   title: string;\r\n-//   // ... other properties\r\n-// }\r\n-\r\n export function TaskCalendar() {\r\n   const [selectedLesson, setSelectedLesson] = useState<ExtendedLesson | null>(null);\r\n   const [selectedSubLesson, setSelectedSubLesson] = useState<SubLesson | null>(null);\r\n   const [dialogOpen, setDialogOpen] = useState(false);\r\n   const [isAddEventOpen, setIsAddEventOpen] = useState(false);\r\n   const [currentLesson, setCurrentLesson] = useState<ExtendedLesson | null>(null);\r\n   const [isLocked, setIsLocked] = useState(true);\r\n   const [selectedClass, setSelectedClass] = useState(classesData[0] || null);\r\n+  const [events, setEvents] = useState<CalendarEvent[]>([]);\r\n+  const [selectedDate, setSelectedDate] = useState<Date>(new Date());\r\n+  const [viewMode, setViewMode] = useState<'day' | 'week' | 'month'>('week');\r\n+  const [isGoogleConnected, setIsGoogleConnected] = useState(false);\r\n+  const [isMicrosoftConnected, setIsMicrosoftConnected] = useState(false);\r\n+  const [isSyncing, setIsSyncing] = useState(false);\r\n+  const [filterBy, setFilterBy] = useState<string[]>([]);\r\n+  const [isFilterOpen, setIsFilterOpen] = useState(false);\r\n \r\n-  const handleClassChange = (newClass: any) => {\r\n+  // Handle class change with animation\r\n+  const handleClassChange = useCallback((newClass: any) => {\r\n     setSelectedClass(newClass);\r\n-  };\r\n+    toast({\r\n+      title: \"Class selected\",\r\n+      description: `Switched to ${newClass.name}`,\r\n+      duration: 2000,\r\n+    });\r\n+  }, []);\r\n \r\n+  // Connect to Microsoft Calendar\r\n+  const handleMicrosoftConnect = useCallback(async () => {\r\n+    try {\r\n+      setIsSyncing(true);\r\n+      // Simulate API call\r\n+      await new Promise(resolve => setTimeout(resolve, 1500));\r\n+      setIsMicrosoftConnected(true);\r\n+      toast({\r\n+        title: \"Connected to Microsoft Calendar\",\r\n+        description: \"Your Microsoft Calendar has been connected successfully\",\r\n+      });\r\n+    } catch (error) {\r\n+      toast({\r\n+        title: \"Connection failed\",\r\n+        description: \"Could not connect to Microsoft Calendar. Please try again.\",\r\n+        variant: \"destructive\",\r\n+      });\r\n+    } finally {\r\n+      setIsSyncing(false);\r\n+    }\r\n+  }, []);\r\n+\r\n+  // Sync with Microsoft Calendar\r\n+  const handleMicrosoftSync = useCallback(async () => {\r\n+    try {\r\n+      setIsSyncing(true);\r\n+      // Simulate API call\r\n+      await new Promise(resolve => setTimeout(resolve, 2000));\r\n+      \r\n+      // Add sample events from Microsoft\r\n+      const newEvents: CalendarEvent[] = [\r\n+        {\r\n+          id: `ms-${Date.now()}-1`,\r\n+          title: \"Team Meeting\",\r\n+          start: new Date(new Date().setHours(11, 0, 0, 0)),\r\n+          end: new Date(new Date().setHours(12, 0, 0, 0)),\r\n+          description: \"Weekly team sync-up\",\r\n+          source: \"microsoft\",\r\n+          color: \"#0078d4\"\r\n+        },\r\n+        {\r\n+          id: `ms-${Date.now()}-2`,\r\n+          title: \"Project Review\",\r\n+          start: new Date(new Date().setHours(14, 30, 0, 0)),\r\n+          end: new Date(new Date().setHours(15, 30, 0, 0)),\r\n+          description: \"Review project progress\",\r\n+          source: \"microsoft\",\r\n+          color: \"#0078d4\"\r\n+        }\r\n+      ];\r\n+      \r\n+      setEvents(prev => [...prev, ...newEvents]);\r\n+      \r\n+      toast({\r\n+        title: \"Microsoft Calendar synced\",\r\n+        description: \"Your events have been synced with Microsoft Calendar\",\r\n+      });\r\n+    } catch (error) {\r\n+      toast({\r\n+        title: \"Sync failed\",\r\n+        description: \"Could not sync with Microsoft Calendar. Please try again.\",\r\n+        variant: \"destructive\",\r\n+      });\r\n+    } finally {\r\n+      setIsSyncing(false);\r\n+    }\r\n+  }, []);\r\n+\r\n+  // Connect to Google Calendar\r\n+  const handleGoogleConnect = useCallback(async () => {\r\n+    try {\r\n+      setIsSyncing(true);\r\n+      // Simulate API call\r\n+      await new Promise(resolve => setTimeout(resolve, 1500));\r\n+      setIsGoogleConnected(true);\r\n+      \r\n+      // Add sample events from Google\r\n+      const newEvents: CalendarEvent[] = [\r\n+        {\r\n+          id: `google-${Date.now()}-1`,\r\n+          title: \"Doctor's Appointment\",\r\n+          start: new Date(new Date().setHours(9, 0, 0, 0)),\r\n+          end: new Date(new Date().setHours(10, 0, 0, 0)),\r\n+          description: \"Annual checkup\",\r\n+          source: \"google\",\r\n+          color: \"#4285F4\"\r\n+        },\r\n+        {\r\n+          id: `google-${Date.now()}-2`,\r\n+          title: \"Lunch with Client\",\r\n+          start: new Date(new Date().setHours(12, 30, 0, 0)),\r\n+          end: new Date(new Date().setHours(13, 30, 0, 0)),\r\n+          description: \"Discuss project requirements\",\r\n+          source: \"google\",\r\n+          color: \"#4285F4\"\r\n+        }\r\n+      ];\r\n+      \r\n+      setEvents(prev => [...prev, ...newEvents]);\r\n+      \r\n+      toast({\r\n+        title: \"Connected to Google Calendar\",\r\n+        description: \"Your Google Calendar has been connected successfully\",\r\n+      });\r\n+    } catch (error) {\r\n+      toast({\r\n+        title: \"Connection failed\",\r\n+        description: \"Could not connect to Google Calendar. Please try again.\",\r\n+        variant: \"destructive\",\r\n+      });\r\n+    } finally {\r\n+      setIsSyncing(false);\r\n+    }\r\n+  }, []);\r\n+\r\n+  // Add a new event to the calendar\r\n+  const handleAddEvent = useCallback(async (eventData: any) => {\r\n+    try {\r\n+      // Create a new event\r\n+      const newEvent: CalendarEvent = {\r\n+        id: `local-${Date.now()}`,\r\n+        title: eventData.title,\r\n+        start: new Date(eventData.startDate),\r\n+        end: new Date(eventData.endDate),\r\n+        description: eventData.description,\r\n+        location: eventData.location,\r\n+        color: \"#34d399\", // Green for local events\r\n+        source: \"local\",\r\n+      };\r\n+      \r\n+      // Add to local state\r\n+      setEvents(prev => [...prev, newEvent]);\r\n+      \r\n+      // Show success message\r\n+      toast({\r\n+        title: \"Event created successfully\",\r\n+        description: \"Your event has been added to the calendar.\",\r\n+      });\r\n+      \r\n+      return true;\r\n+    } catch (error) {\r\n+      toast({\r\n+        title: \"Failed to create event\",\r\n+        description: \"There was an error creating your event. Please try again.\",\r\n+        variant: \"destructive\",\r\n+      });\r\n+      return false;\r\n+    }\r\n+  }, []);\r\n+\r\n   return (\r\n-    <div className=\"max-w-6xl w-full relative\">\r\n-      <div className=\"flex items-center justify-between mb-4\">\r\n-        <div className=\"flex items-center gap-4\">\r\n+    <motion.div \r\n+      className=\"max-w-6xl w-full relative\"\r\n+      initial={{ opacity: 0 }}\r\n+      animate={{ opacity: 1 }}\r\n+      transition={{ duration: 0.3 }}\r\n+    >\r\n+      <motion.div \r\n+        className=\"flex flex-col md:flex-row md:items-center justify-between mb-6 gap-4\"\r\n+        variants={{\r\n+          hidden: { opacity: 0, y: -20 },\r\n+          show: { opacity: 1, y: 0 }\r\n+        }}\r\n+        initial=\"hidden\"\r\n+        animate=\"show\"\r\n+        transition={{ duration: 0.3 }}\r\n+      >\r\n+        <div className=\"flex items-center gap-4 flex-wrap\">\r\n           <ClassHeader\r\n             classes={classesData}\r\n             selectedClass={selectedClass}\r\n             onClassChange={handleClassChange}\r\n           />\r\n-          <Button\r\n-            variant=\"outline\"\r\n-            size=\"sm\"\r\n-            onClick={() => setIsAddEventOpen(true)}\r\n-            className=\"ml-4\"\r\n+          <TooltipProvider>\r\n+            <Tooltip>\r\n+              <TooltipTrigger asChild>\r\n+                <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\r\n+                  <Button\r\n+                    variant=\"default\"\r\n+                    size=\"sm\"\r\n+                    onClick={() => setIsAddEventOpen(true)}\r\n+                    className=\"transition-all duration-300 bg-gradient-to-r from-indigo-500 to-purple-500 hover:from-indigo-600 hover:to-purple-600\"\r\n+                  >\r\n+                    <Plus className=\"h-4 w-4 mr-2\" />\r\n+                    Add Event\r\n+                  </Button>\r\n+                </motion.div>\r\n+              </TooltipTrigger>\r\n+              <TooltipContent>\r\n+                Add a new event to your calendar\r\n+              </TooltipContent>\r\n+            </Tooltip>\r\n+          </TooltipProvider>\r\n+        </div>\r\n+        \r\n+        <div className=\"flex flex-wrap items-center gap-2\">\r\n+          {/* View selector */}\r\n+          <div className=\"bg-secondary rounded-lg p-0.5 flex items-center\">\r\n+            {(['day', 'week', 'month'] as const).map((mode) => (\r\n+              <Button\r\n+                key={mode}\r\n+                variant={viewMode === mode ? \"default\" : \"ghost\"}\r\n+                size=\"sm\"\r\n+                onClick={() => setViewMode(mode)}\r\n+                className={cn(\r\n+                  \"capitalize text-xs py-1 px-3 h-7\",\r\n+                  viewMode === mode ? \"bg-white shadow-sm\" : \"hover:bg-secondary-foreground/10\"\r\n+                )}\r\n+              >\r\n+                {mode}\r\n+              </Button>\r\n+            ))}\r\n+          </div>\r\n+          \r\n+          {/* Filter button */}\r\n+          <TooltipProvider>\r\n+            <Tooltip>\r\n+              <TooltipTrigger asChild>\r\n+                <Button\r\n+                  variant=\"outline\"\r\n+                  size=\"sm\"\r\n+                  onClick={() => setIsFilterOpen(!isFilterOpen)}\r\n+                  className={cn(\r\n+                    \"gap-2 transition-all duration-300\",\r\n+                    isFilterOpen ? \"bg-secondary\" : \"\"\r\n+                  )}\r\n+                >\r\n+                  <Filter className=\"h-4 w-4\" />\r\n+                  <span className=\"hidden sm:inline\">Filter</span>\r\n+                </Button>\r\n+              </TooltipTrigger>\r\n+              <TooltipContent>Filter events by source</TooltipContent>\r\n+            </Tooltip>\r\n+          </TooltipProvider>\r\n+          \r\n+          {/* Google Calendar integration */}\r\n+          <GoogleCalendarButton \r\n+            onConnect={handleGoogleConnect}\r\n+            onSync={handleGoogleConnect}\r\n+            isConnected={isGoogleConnected}\r\n+            isLoading={isSyncing}\r\n+          />\r\n+          \r\n+          {/* Microsoft Calendar integration */}\r\n+          <MicrosoftCalendarButton\r\n+            onConnect={handleMicrosoftConnect}\r\n+            onSync={handleMicrosoftSync}\r\n+            isConnected={isMicrosoftConnected}\r\n+            isLoading={isSyncing}\r\n+          />\r\n+          \r\n+          {/* Lock/Unlock button */}\r\n+          <TooltipProvider>\r\n+            <Tooltip>\r\n+              <TooltipTrigger asChild>\r\n+                <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\r\n+                  <Button\r\n+                    variant=\"outline\"\r\n+                    size=\"sm\"\r\n+                    onClick={() => setIsLocked(!isLocked)}\r\n+                    className=\"transition-colors duration-300\"\r\n+                  >\r\n+                    {isLocked ? (\r\n+                      <>\r\n+                        <Lock className=\"h-4 w-4 mr-2 transition-transform duration-300\" />\r\n+                        <span className=\"hidden sm:inline\">Locked</span>\r\n+                      </>\r\n+                    ) : (\r\n+                      <>\r\n+                        <Unlock className=\"h-4 w-4 mr-2 transition-transform duration-300\" />\r\n+                        <span className=\"hidden sm:inline\">Unlocked</span>\r\n+                      </>\r\n+                    )}\r\n+                  </Button>\r\n+                </motion.div>\r\n+              </TooltipTrigger>\r\n+              <TooltipContent>\r\n+                {isLocked ? \"Unlock to edit events\" : \"Lock to prevent changes\"}\r\n+              </TooltipContent>\r\n+            </Tooltip>\r\n+          </TooltipProvider>\r\n+        </div>\r\n+      </motion.div>\r\n+      \r\n+      {/* Filter dropdown */}\r\n+      <AnimatePresence>\r\n+        {isFilterOpen && (\r\n+          <motion.div\r\n+            initial={{ opacity: 0, height: 0 }}\r\n+            animate={{ opacity: 1, height: \"auto\" }}\r\n+            exit={{ opacity: 0, height: 0 }}\r\n+            transition={{ duration: 0.2 }}\r\n+            className=\"mb-4 overflow-hidden\"\r\n           >\r\n-            <Plus className=\"h-4 w-4 mr-2\" />\r\n-            Add Event\r\n-          </Button>\r\n-        </div>\r\n-        <Button\r\n-          variant=\"outline\"\r\n-          size=\"sm\"\r\n-          onClick={() => setIsLocked(!isLocked)}\r\n-        >\r\n-          {isLocked ? (\r\n-            <>\r\n-              <Lock className=\"h-4 w-4 mr-2\" />\r\n-              Locked\r\n-            </>\r\n-          ) : (\r\n-            <>\r\n-              <Unlock className=\"h-4 w-4 mr-2\" />\r\n-              Unlocked\r\n-            </>\r\n+            <Card className=\"border border-secondary p-4\">\r\n+              <div className=\"flex items-center justify-between mb-2\">\r\n+                <h3 className=\"text-sm font-medium\">Filter Events</h3>\r\n+                <Button variant=\"ghost\" size=\"sm\" onClick={() => setIsFilterOpen(false)}>\r\n+                  <X className=\"h-4 w-4\" />\r\n+                </Button>\r\n+              </div>\r\n+              <div className=\"flex flex-wrap gap-2\">\r\n+                <Button\r\n+                  variant={filterBy.includes('local') ? \"default\" : \"outline\"}\r\n+                  size=\"sm\"\r\n+                  onClick={() => {\r\n+                    if (filterBy.includes('local')) {\r\n+                      setFilterBy(filterBy.filter(f => f !== 'local'));\r\n+                    } else {\r\n+                      setFilterBy([...filterBy, 'local']);\r\n+                    }\r\n+                  }}\r\n+                  className=\"gap-2\"\r\n+                >\r\n+                  <Calendar className=\"h-3.5 w-3.5\" />\r\n+                  <span>Local</span>\r\n+                </Button>\r\n+                <Button\r\n+                  variant={filterBy.includes('google') ? \"default\" : \"outline\"}\r\n+                  size=\"sm\"\r\n+                  onClick={() => {\r\n+                    if (filterBy.includes('google')) {\r\n+                      setFilterBy(filterBy.filter(f => f !== 'google'));\r\n+                    } else {\r\n+                      setFilterBy([...filterBy, 'google']);\r\n+                    }\r\n+                  }}\r\n+                  className=\"gap-2\"\r\n+                >\r\n+                  <svg className=\"h-3.5 w-3.5\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n+                    <path d=\"M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" />\r\n+                    <path d=\"M6 12h12M12 6v12\" stroke=\"currentColor\" strokeWidth=\"2\" />\r\n+                  </svg>\r\n+                  <span>Google</span>\r\n+                </Button>\r\n+                <Button\r\n+                  variant={filterBy.includes('microsoft') ? \"default\" : \"outline\"}\r\n+                  size=\"sm\"\r\n+                  onClick={() => {\r\n+                    if (filterBy.includes('microsoft')) {\r\n+                      setFilterBy(filterBy.filter(f => f !== 'microsoft'));\r\n+                    } else {\r\n+                      setFilterBy([...filterBy, 'microsoft']);\r\n+                    }\r\n+                  }}\r\n+                  className=\"gap-2\"\r\n+                >\r\n+                  <Microsoft className=\"h-3.5 w-3.5\" />\r\n+                  <span>Microsoft</span>\r\n+                </Button>\r\n+              </div>\r\n+            </Card>\r\n+          </motion.div>\r\n+        )}\r\n+      </AnimatePresence>\r\n+      \r\n+      {/* Calendar placeholder - Would be replaced with actual calendar implementation */}\r\n+      <Card className=\"border overflow-hidden shadow-sm\">\r\n+        <CardHeader className=\"bg-secondary/20 pb-2\">\r\n+          <div className=\"flex items-center justify-between\">\r\n+            <div className=\"flex items-center gap-4\">\r\n+              <Button variant=\"outline\" size=\"sm\" className=\"h-8 w-8 p-0\">\r\n+                <ArrowRight className=\"h-4 w-4 -rotate-180\" />\r\n+              </Button>\r\n+              <CardTitle className=\"text-xl font-medium\">\r\n+                {new Intl.DateTimeFormat('en-US', { \r\n+                  month: 'long', \r\n+                  year: 'numeric',\r\n+                  day: viewMode === 'day' ? 'numeric' : undefined\r\n+                }).format(selectedDate)}\r\n+              </CardTitle>\r\n+              <Button variant=\"outline\" size=\"sm\" className=\"h-8 w-8 p-0\">\r\n+                <ArrowRight className=\"h-4 w-4\" />\r\n+              </Button>\r\n+              <Button variant=\"ghost\" size=\"sm\" onClick={() => setSelectedDate(new Date())}>\r\n+                Today\r\n+              </Button>\r\n+            </div>\r\n+            <div className=\"flex items-center\">\r\n+              <Button variant=\"ghost\" size=\"sm\" className=\"gap-1\">\r\n+                <RefreshCw className=\"h-3.5 w-3.5\" />\r\n+                <span className=\"hidden sm:inline\">Refresh</span>\r\n+              </Button>\r\n+            </div>\r\n+          </div>\r\n+        </CardHeader>\r\n+        <CardContent className=\"p-0\">\r\n+          {/* Week view layout - Just a placeholder for demo */}\r\n+          {viewMode === 'week' && (\r\n+            <div className=\"grid grid-cols-7 border-b border-border\">\r\n+              {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day, i) => (\r\n+                <div key={day} className={cn(\r\n+                  \"p-2 text-center border-r border-border last:border-r-0\",\r\n+                  i === new Date().getDay() && \"bg-primary/5\"\r\n+                )}>\r\n+                  <div className=\"text-xs text-muted-foreground mb-1\">{day}</div>\r\n+                  <motion.div \r\n+                    className={cn(\r\n+                      \"mx-auto h-8 w-8 rounded-full flex items-center justify-center text-sm\",\r\n+                      i === new Date().getDay() && \"bg-primary text-primary-foreground\"\r\n+                    )}\r\n+                    whileHover={{ scale: 1.1 }}\r\n+                    whileTap={{ scale: 0.9 }}\r\n+                  >\r\n+                    {new Date(new Date().setDate(new Date().getDate() - new Date().getDay() + i)).getDate()}\r\n+                  </motion.div>\r\n+                </div>\r\n+              ))}\r\n+            </div>\r\n           )}\r\n-        </Button>\r\n-      </div>\r\n+          \r\n+          {/* Events display - Just a placeholder for demo */}\r\n+          <div className=\"p-4 min-h-[600px]\">\r\n+            <AnimatePresence>\r\n+              {events.length === 0 ? (\r\n+                <motion.div \r\n+                  className=\"flex flex-col items-center justify-center h-[400px] text-center\"\r\n+                  initial={{ opacity: 0 }}\r\n+                  animate={{ opacity: 1 }}\r\n+                  exit={{ opacity: 0 }}\r\n+                >\r\n+                  <Calendar className=\"h-16 w-16 text-muted-foreground mb-4 opacity-20\" />\r\n+                  <h3 className=\"text-lg font-medium mb-2\">No events scheduled</h3>\r\n+                  <p className=\"text-muted-foreground max-w-md\">\r\n+                    Add events to your calendar or connect with Google or Microsoft Calendar to import your existing events.\r\n+                  </p>\r\n+                  <Button \r\n+                    variant=\"default\" \r\n+                    onClick={() => setIsAddEventOpen(true)}\r\n+                    className=\"mt-6\"\r\n+                  >\r\n+                    <Plus className=\"h-4 w-4 mr-2\" />\r\n+                    Add Your First Event\r\n+                  </Button>\r\n+                </motion.div>\r\n+              ) : (\r\n+                <motion.div\r\n+                  className=\"space-y-2\"\r\n+                  initial={{ opacity: 0 }}\r\n+                  animate={{ opacity: 1 }}\r\n+                  exit={{ opacity: 0 }}\r\n+                >\r\n+                  {[...events]\r\n+                    .filter(event => filterBy.length === 0 || filterBy.includes(event.source || 'local'))\r\n+                    .sort((a, b) => a.start.getTime() - b.start.getTime())\r\n+                    .map(event => (\r\n+                      <motion.div\r\n+                        key={event.id}\r\n+                        initial={{ opacity: 0, y: 10 }}\r\n+                        animate={{ opacity: 1, y: 0 }}\r\n+                        exit={{ opacity: 0, y: -10 }}\r\n+                        transition={{ duration: 0.2 }}\r\n+                        className=\"rounded-lg border border-border p-3 hover:shadow-md transition-shadow cursor-pointer\"\r\n+                        style={{ \r\n+                          borderLeftColor: event.color || '#6366f1',\r\n+                          borderLeftWidth: '4px'\r\n+                        }}\r\n+                        whileHover={{ x: 4 }}\r\n+                      >\r\n+                        <div className=\"flex justify-between items-start\">\r\n+                          <div>\r\n+                            <h4 className=\"font-medium\">{event.title}</h4>\r\n+                            <div className=\"flex items-center mt-1 text-sm text-muted-foreground\">\r\n+                              <Clock className=\"h-3.5 w-3.5 mr-1\" />\r\n+                              {event.start.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})} - \r\n+                              {event.end.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}\r\n+                            </div>\r\n+                          </div>\r\n+                          {event.source && (\r\n+                            <div className={cn(\r\n+                              \"text-xs px-2 py-1 rounded-full\",\r\n+                              event.source === 'google' ? \"bg-blue-50 text-blue-600\" :\r\n+                              event.source === 'microsoft' ? \"bg-blue-50 text-blue-600\" :\r\n+                              \"bg-green-50 text-green-600\"\r\n+                            )}>\r\n+                              {event.source === 'google' && \"Google\"}\r\n+                              {event.source === 'microsoft' && \"Microsoft\"}\r\n+                              {event.source === 'local' && \"Local\"}\r\n+                            </div>\r\n+                          )}\r\n+                        </div>\r\n+                        {event.description && (\r\n+                          <p className=\"mt-2 text-sm text-muted-foreground line-clamp-2\">\r\n+                            {event.description}\r\n+                          </p>\r\n+                        )}\r\n+                      </motion.div>\r\n+                    ))}\r\n+                </motion.div>\r\n+              )}\r\n+            </AnimatePresence>\r\n+          </div>\r\n+        </CardContent>\r\n+      </Card>\r\n \r\n       {/* Add Event Dialog */}\r\n       <ScheduleDialog\r\n         open={isAddEventOpen}\r\n         onOpenChange={setIsAddEventOpen}\r\n         onSubmit={async (eventData) => {\r\n-          try {\r\n-            // Handle event creation here\r\n-            console.log('Creating event:', eventData);\r\n-            toast({\r\n-              title: \"Event created successfully\",\r\n-              description: \"Your event has been created successfully.\",\r\n-            });\r\n-          } catch (error) {\r\n-            toast({\r\n-              title: \"Failed to create event\",\r\n-              description: \"There was an error creating your event. Please try again later.\",\r\n-              \r\n-            });\r\n+          const success = await handleAddEvent(eventData);\r\n+          if (success) {\r\n+            setIsAddEventOpen(false);\r\n           }\r\n         }}\r\n       />\r\n-    </div>\r\n+    </motion.div>\r\n   );\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740754110417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,8 @@\n   Filter,\r\n   FileText,\r\n   X,\r\n   AlertCircle,\r\n-  Microsoft,\r\n } from \"lucide-react\";\r\n import { useState, useEffect, useCallback } from 'react';\r\n import { toast } from \"@/components/ui/use-toast\";\r\n import ClassHeader from \"@/components/common/ClassHeader\";\r\n@@ -37,8 +36,24 @@\n   TooltipTrigger,\r\n } from \"@/components/ui/tooltip\";\r\n import { cn } from \"@/lib/utils\";\r\n \r\n+// Microsoft icon component since it's not in lucide-react\r\n+const MicrosoftIcon = (props: React.SVGProps<SVGSVGElement>) => (\r\n+  <svg\r\n+    xmlns=\"http://www.w3.org/2000/svg\"\r\n+    viewBox=\"0 0 23 23\"\r\n+    width=\"24\"\r\n+    height=\"24\"\r\n+    {...props}\r\n+  >\r\n+    <path fill=\"#f25022\" d=\"M1 1h10v10H1z\" />\r\n+    <path fill=\"#00a4ef\" d=\"M1 12h10v10H1z\" />\r\n+    <path fill=\"#7fba00\" d=\"M12 1h10v10H12z\" />\r\n+    <path fill=\"#ffb900\" d=\"M12 12h10v10H12z\" />\r\n+  </svg>\r\n+);\r\n+\r\n // More specific type instead of empty interface\r\n type IAppProps = Record<string, never>;\r\n \r\n class App extends React.Component<IAppProps> {\r\n@@ -94,9 +109,9 @@\n             )}\r\n             onClick={isConnected ? onSync : onConnect}\r\n             disabled={isLoading}\r\n           >\r\n-            <Microsoft className={cn(\r\n+            <MicrosoftIcon className={cn(\r\n               \"h-4 w-4 transition-transform\",\r\n               isLoading ? \"animate-spin\" : \"group-hover:scale-110\"\r\n             )} />\r\n             <span className=\"hidden sm:inline\">\r\n@@ -155,9 +170,8 @@\n     } catch (error) {\r\n       toast({\r\n         title: \"Connection failed\",\r\n         description: \"Could not connect to Microsoft Calendar. Please try again.\",\r\n-        variant: \"destructive\",\r\n       });\r\n     } finally {\r\n       setIsSyncing(false);\r\n     }\r\n@@ -201,9 +215,8 @@\n     } catch (error) {\r\n       toast({\r\n         title: \"Sync failed\",\r\n         description: \"Could not sync with Microsoft Calendar. Please try again.\",\r\n-        variant: \"destructive\",\r\n       });\r\n     } finally {\r\n       setIsSyncing(false);\r\n     }\r\n@@ -248,9 +261,8 @@\n     } catch (error) {\r\n       toast({\r\n         title: \"Connection failed\",\r\n         description: \"Could not connect to Google Calendar. Please try again.\",\r\n-        variant: \"destructive\",\r\n       });\r\n     } finally {\r\n       setIsSyncing(false);\r\n     }\r\n@@ -284,9 +296,8 @@\n     } catch (error) {\r\n       toast({\r\n         title: \"Failed to create event\",\r\n         description: \"There was an error creating your event. Please try again.\",\r\n-        variant: \"destructive\",\r\n       });\r\n       return false;\r\n     }\r\n   }, []);\r\n@@ -487,9 +498,9 @@\n                     }\r\n                   }}\r\n                   className=\"gap-2\"\r\n                 >\r\n-                  <Microsoft className=\"h-3.5 w-3.5\" />\r\n+                  <MicrosoftIcon className=\"h-3.5 w-3.5\" />\r\n                   <span>Microsoft</span>\r\n                 </Button>\r\n               </div>\r\n             </Card>\r\n"
                },
                {
                    "date": 1740754177621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,14 +164,14 @@\n       await new Promise(resolve => setTimeout(resolve, 1500));\r\n       setIsMicrosoftConnected(true);\r\n       toast({\r\n         title: \"Connected to Microsoft Calendar\",\r\n-        description: \"Your Microsoft Calendar has been connected successfully\",\r\n+        description: \"Your Microsoft Calendar has been connected successfully\"\r\n       });\r\n     } catch (error) {\r\n       toast({\r\n         title: \"Connection failed\",\r\n-        description: \"Could not connect to Microsoft Calendar. Please try again.\",\r\n+        description: \"Could not connect to Microsoft Calendar. Please try again.\"\r\n       });\r\n     } finally {\r\n       setIsSyncing(false);\r\n     }\r\n@@ -209,14 +209,14 @@\n       setEvents(prev => [...prev, ...newEvents]);\r\n       \r\n       toast({\r\n         title: \"Microsoft Calendar synced\",\r\n-        description: \"Your events have been synced with Microsoft Calendar\",\r\n+        description: \"Your events have been synced with Microsoft Calendar\"\r\n       });\r\n     } catch (error) {\r\n       toast({\r\n         title: \"Sync failed\",\r\n-        description: \"Could not sync with Microsoft Calendar. Please try again.\",\r\n+        description: \"Could not sync with Microsoft Calendar. Please try again.\"\r\n       });\r\n     } finally {\r\n       setIsSyncing(false);\r\n     }\r\n@@ -255,14 +255,14 @@\n       setEvents(prev => [...prev, ...newEvents]);\r\n       \r\n       toast({\r\n         title: \"Connected to Google Calendar\",\r\n-        description: \"Your Google Calendar has been connected successfully\",\r\n+        description: \"Your Google Calendar has been connected successfully\"\r\n       });\r\n     } catch (error) {\r\n       toast({\r\n         title: \"Connection failed\",\r\n-        description: \"Could not connect to Google Calendar. Please try again.\",\r\n+        description: \"Could not connect to Google Calendar. Please try again.\"\r\n       });\r\n     } finally {\r\n       setIsSyncing(false);\r\n     }\r\n@@ -288,16 +288,16 @@\n       \r\n       // Show success message\r\n       toast({\r\n         title: \"Event created successfully\",\r\n-        description: \"Your event has been added to the calendar.\",\r\n+        description: \"Your event has been added to the calendar.\"\r\n       });\r\n       \r\n       return true;\r\n     } catch (error) {\r\n       toast({\r\n         title: \"Failed to create event\",\r\n-        description: \"There was an error creating your event. Please try again.\",\r\n+        description: \"There was an error creating your event. Please try again.\"\r\n       });\r\n       return false;\r\n     }\r\n   }, []);\r\n"
                },
                {
                    "date": 1740776377207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,18 +55,8 @@\n \r\n // More specific type instead of empty interface\r\n type IAppProps = Record<string, never>;\r\n \r\n-class App extends React.Component<IAppProps> {\r\n-  public render() {\r\n-    return (\r\n-      <div>\r\n-        \r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n // Interface for CalendarEvent\r\n interface CalendarEvent {\r\n   id: string;\r\n   title: string;\r\n"
                },
                {
                    "date": 1740776402217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,8 +55,18 @@\n \r\n // More specific type instead of empty interface\r\n type IAppProps = Record<string, never>;\r\n \r\n+class App extends React.Component<IAppProps> {\r\n+  public render() {\r\n+    return (\r\n+      <div>\r\n+        \r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n // Interface for CalendarEvent\r\n interface CalendarEvent {\r\n   id: string;\r\n   title: string;\r\n"
                },
                {
                    "date": 1740776412407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,8 +60,9 @@\n   public render() {\r\n     return (\r\n       <div>\r\n         \r\n+        \r\n       </div>\r\n     );\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1740776447889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,8 +59,9 @@\n class App extends React.Component<IAppProps> {\r\n   public render() {\r\n     return (\r\n       <div>\r\n+        <h1>Task Calendar</h1>\r\n         \r\n         \r\n       </div>\r\n     );\r\n"
                }
            ],
            "date": 1739514311516,
            "name": "Commit-0",
            "content": "\r\n import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\n import { Progress } from \"@/components/ui/progress\";\r\n import { Button } from \"@/components/ui/button\";\r\n+import { ScheduleDialog } from './ScheduleDialog';\r\n import {\r\n   ArrowRight,\r\n   BookOpen,\r\n   Calendar,\r\n   CheckCircle2,\r\n   Clock,\r\n   Lock,\r\n   Plus,\r\n   RotateCcw,\r\n   Unlock,\r\n   Users,\r\n   Shield,\r\n } from \"lucide-react\";\r\n\r\n@@ .. @@\r\n   const [selectedLesson, setSelectedLesson] = useState<ExtendedLesson>(lessonsData[0]);\r\n   const [selectedSubLesson, setSelectedSubLesson] = useState<SubLesson | null>(null);\r\n   const [dialogOpen, setDialogOpen] = useState(false);\r\n+  const [isAddEventOpen, setIsAddEventOpen] = useState(false);\r\n   const [currentLesson, setCurrentLesson] = useState<ExtendedLesson | null>(null);\r\n   const [isLocked, setIsLocked] = useState(true);\r\n\r\n@@ .. @@\r\n   return (\r\n     <div className=\"max-w-6xl w-full relative\">\r\n       <div className=\"flex items-center justify-between mb-4\">\r\n+        <div className=\"flex items-center gap-4\">\r\n           <ClassHeader\r\n             classes={classesData}\r\n             selectedClass={selectedClass}\r\n             onClassChange={handleClassChange}\r\n           />\r\n+          <Button\r\n+            variant=\"outline\"\r\n+            size=\"sm\"\r\n+            onClick={() => setIsAddEventOpen(true)}\r\n+            className=\"ml-4\"\r\n+          >\r\n+            <Plus className=\"h-4 w-4 mr-2\" />\r\n+            Add Event\r\n+          </Button>\r\n+        </div>\r\n         <Button\r\n           variant=\"outline\"\r\n           size=\"sm\"\r\n@@ .. @@\r\n           </div>\r\n         </div>\r\n       </div>\r\n+      \r\n+      {/* Add Event Dialog */}\r\n+      <ScheduleDialog\r\n+        open={isAddEventOpen}\r\n+        onOpenChange={setIsAddEventOpen}\r\n+        onSubmit={async (eventData) => {\r\n+          try {\r\n+            // Handle event creation here\r\n+            console.log('Creating event:', eventData);\r\n+            showToast('Event created successfully', { type: 'success' });\r\n+          } catch (error) {\r\n+            showToast('Failed to create event', { type: 'error' });\r\n+          }\r\n+        }}\r\n+      />"
        }
    ]
}