{
    "sourceFile": "src/components/UserRoleIndicator.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1739010884990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739010907324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,12 +21,9 @@\n       \r\n       logger.info(`Role change initiated from ${user.role} to ${newRole}`, 'UserRoleIndicator');\r\n     } catch (err) {\r\n       const message = err instanceof Error ? err.message : 'Failed to change role';\r\n-      logger.error(message, {\r\n-        context: { error: err },\r\n-        source: 'UserRoleIndicator'\r\n-      });\r\n+      logger.error(`Failed to change role: ${message}`, 'UserRoleIndicator');\r\n       addError(message);\r\n     }\r\n   };\r\n \r\n"
                }
            ],
            "date": 1739010884990,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\r\nimport { Shield, ChevronDown } from 'lucide-react';\r\nimport { useAuth } from '../hooks/useAuth';\r\nimport { ROLE_PERMISSIONS, UserRole } from '../types/roles';\r\nimport { useError } from '../hooks/useError';\r\nimport { useRoleStore } from '../lib/auth/store';\r\nimport { logger } from '../lib/logger';\r\n\r\nconst UserRoleIndicator: React.FC = () => {\r\n  const { user, changeRole, isTransitioning } = useAuth();\r\n  const { addError } = useError();\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const currentRole = useRoleStore((state) => state.currentRole);\r\n\r\n  const handleRoleChange = async (newRole: UserRole) => {\r\n    if (!user || isTransitioning) return;\r\n    \r\n    try {\r\n      setIsOpen(false); // Close dropdown immediately\r\n      await changeRole(newRole);\r\n      \r\n      logger.info(`Role change initiated from ${user.role} to ${newRole}`, 'UserRoleIndicator');\r\n    } catch (err) {\r\n      const message = err instanceof Error ? err.message : 'Failed to change role';\r\n      logger.error(message, {\r\n        context: { error: err },\r\n        source: 'UserRoleIndicator'\r\n      });\r\n      addError(message);\r\n    }\r\n  };\r\n\r\n  if (!user) return null;\r\n\r\n  const roleName = ROLE_PERMISSIONS[currentRole || user.role]?.name || user.role;\r\n\r\n  return (\r\n    <div className=\"fixed bottom-4 left-4 z-50\">\r\n      <div className=\"relative\">\r\n        <div\r\n          onClick={() => !isTransitioning && setIsOpen(!isOpen)}\r\n          className={`flex items-center space-x-2 bg-white/80 backdrop-blur-sm px-3 py-2 rounded-lg shadow-sm border border-gray-200 hover:bg-white/90 transition-colors ${isTransitioning ? 'cursor-not-allowed opacity-50' : 'cursor-pointer'}`}\r\n        >\r\n          <Shield className=\"h-4 w-4 text-indigo-600\" />\r\n          <div className=\"text-sm\">\r\n            <span className=\"text-gray-500\">Logged in as </span>\r\n            <span className=\"font-medium text-gray-900\">{roleName}</span>\r\n          </div>\r\n          <ChevronDown className={`h-4 w-4 text-gray-400 transition-transform ${isOpen ? 'rotate-180' : ''}`} />\r\n          {isTransitioning && (\r\n            <div className=\"absolute inset-0 flex items-center justify-center bg-white/50\">\r\n              <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-indigo-600 border-t-transparent\"></div>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {isOpen && !isTransitioning && (\r\n          <>\r\n            <div \r\n              className=\"fixed inset-0\" \r\n              onClick={() => setIsOpen(false)}\r\n            />\r\n            <div className=\"absolute bottom-full left-0 mb-2 w-64 bg-white rounded-lg shadow-lg border border-gray-200 py-1 overflow-hidden z-50\">\r\n              <div className=\"max-h-64 overflow-y-auto\">\r\n                {Object.entries(ROLE_PERMISSIONS).map(([role, details]) => (\r\n                  <button\r\n                    key={role}\r\n                    onClick={() => handleRoleChange(role as UserRole)}\r\n                    disabled={role === currentRole}\r\n                    className={`w-full text-left px-4 py-2 text-sm hover:bg-gray-50 flex items-center space-x-2\r\n                      ${role === currentRole ? 'bg-indigo-50 text-indigo-600' : 'text-gray-700'}\r\n                      ${role === currentRole ? 'opacity-50 cursor-not-allowed' : ''}`}\r\n                  >\r\n                    <Shield className={`h-4 w-4 ${role === currentRole ? 'text-indigo-600' : 'text-gray-400'}`} />\r\n                    <span>{details.name}</span>\r\n                  </button>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserRoleIndicator;"
        }
    ]
}