{
    "sourceFile": "src/components/ui/use-toast.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1739447270385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739447782729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,191 +1,7 @@\n-import * as React from \"react\";\r\n-\r\n-import type {\r\n-  ToastActionElement,\r\n-  ToastProps,\r\n-} from \"@/components/ui/toast\";\r\n-\r\n-const TOAST_LIMIT = 1;\r\n-const TOAST_REMOVE_DELAY = 1000000;\r\n-\r\n-type ToasterToast = ToastProps & {\r\n-  id: string;\r\n-  title?: React.ReactNode;\r\n-  description?: React.ReactNode;\r\n-  action?: ToastActionElement;\r\n-};\r\n-\r\n-const actionTypes = {\r\n-  ADD_TOAST: \"ADD_TOAST\",\r\n-  UPDATE_TOAST: \"UPDATE_TOAST\",\r\n-  DISMISS_TOAST: \"DISMISS_TOAST\",\r\n-  REMOVE_TOAST: \"REMOVE_TOAST\",\r\n-} as const;\r\n-\r\n-let count = 0;\r\n-\r\n-function genId() {\r\n-  count = (count + 1) % Number.MAX_VALUE;\r\n-  return count.toString();\r\n-}\r\n-\r\n-type ActionType = typeof actionTypes;\r\n-\r\n-type Action =\r\n-  | {\r\n-      type: ActionType[\"ADD_TOAST\"];\r\n-      toast: ToasterToast;\r\n-    }\r\n-  | {\r\n-      type: ActionType[\"UPDATE_TOAST\"];\r\n-      toast: Partial<ToasterToast>;\r\n-    }\r\n-  | {\r\n-      type: ActionType[\"DISMISS_TOAST\"];\r\n-      toastId?: ToasterToast[\"id\"];\r\n-    }\r\n-  | {\r\n-      type: ActionType[\"REMOVE_TOAST\"];\r\n-      toastId?: ToasterToast[\"id\"];\r\n-    };\r\n-\r\n-interface State {\r\n-  toasts: ToasterToast[];\r\n-}\r\n-\r\n-const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();\r\n-\r\n-const addToRemoveQueue = (toastId: string) => {\r\n-  if (toastTimeouts.has(toastId)) {\r\n-    return;\r\n-  }\r\n-\r\n-  const timeout = setTimeout(() => {\r\n-    toastTimeouts.delete(toastId);\r\n-    dispatch({\r\n-      type: \"REMOVE_TOAST\",\r\n-      toastId: toastId,\r\n-    });\r\n-  }, TOAST_REMOVE_DELAY);\r\n-\r\n-  toastTimeouts.set(toastId, timeout);\r\n-};\r\n-\r\n-export const reducer = (state: State, action: Action): State => {\r\n-  switch (action.type) {\r\n-    case \"ADD_TOAST\":\r\n-      return {\r\n-        ...state,\r\n-        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\r\n-      };\r\n-\r\n-    case \"UPDATE_TOAST\":\r\n-      return {\r\n-        ...state,\r\n-        toasts: state.toasts.map((t) =>\r\n-          t.id === action.toast.id ? { ...t, ...action.toast } : t\r\n-        ),\r\n-      };\r\n-\r\n-    case \"DISMISS_TOAST\": {\r\n-      const { toastId } = action;\r\n-\r\n-      // ! Side effects ! - This could be extracted into a dismissToast() action,\r\n-      // but I'll keep it here for simplicity\r\n-      if (toastId) {\r\n-        addToRemoveQueue(toastId);\r\n-      } else {\r\n-        state.toasts.forEach((toast) => {\r\n-          addToRemoveQueue(toast.id);\r\n-        });\r\n-      }\r\n-\r\n-      return {\r\n-        ...state,\r\n-        toasts: state.toasts.map((t) =>\r\n-          t.id === toastId || toastId === undefined\r\n-            ? {\r\n-                ...t,\r\n-                open: false,\r\n-              }\r\n-            : t\r\n-        ),\r\n-      };\r\n-    }\r\n-    case \"REMOVE_TOAST\":\r\n-      if (action.toastId === undefined) {\r\n-        return {\r\n-          ...state,\r\n-          toasts: [],\r\n-        };\r\n-      }\r\n-      return {\r\n-        ...state,\r\n-        toasts: state.toasts.filter((t) => t.id !== action.toastId),\r\n-      };\r\n-  }\r\n-};\r\n-\r\n-const listeners: Array<(state: State) => void> = [];\r\n-\r\n-let memoryState: State = { toasts: [] };\r\n-\r\n-function dispatch(action: Action) {\r\n-  memoryState = reducer(memoryState, action);\r\n-  listeners.forEach((listener) => {\r\n-    listener(memoryState);\r\n-  });\r\n-}\r\n-\r\n-type Toast = Omit<ToasterToast, \"id\">;\r\n-\r\n-function toast({ ...props }: Toast) {\r\n-  const id = genId();\r\n-\r\n-  const update = (props: ToasterToast) =>\r\n-    dispatch({\r\n-      type: \"UPDATE_TOAST\",\r\n-      toast: { ...props, id },\r\n-    });\r\n-  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id });\r\n-\r\n-  dispatch({\r\n-    type: \"ADD_TOAST\",\r\n-    toast: {\r\n-      ...props,\r\n-      id,\r\n-      open: true,\r\n-      onOpenChange: (open) => {\r\n-        if (!open) dismiss();\r\n-      },\r\n-    },\r\n-  });\r\n-\r\n-  return {\r\n-    id: id,\r\n-    dismiss,\r\n-    update,\r\n-  };\r\n-}\r\n-\r\n-function useToast() {\r\n-  const [state, setState] = React.useState<State>(memoryState);\r\n-\r\n-  React.useEffect(() => {\r\n-    listeners.push(setState);\r\n-    return () => {\r\n-      const index = listeners.indexOf(setState);\r\n-      if (index > -1) {\r\n-        listeners.splice(index, 1);\r\n-      }\r\n-    };\r\n-  }, [state]);\r\n-\r\n-  return {\r\n-    ...state,\r\n-    toast,\r\n-    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\r\n-  };\r\n-}\r\n-\r\n-export { useToast, toast }; \n\\ No newline at end of file\n+import { toast } from \"./toast\"\n+\n+export const useToast = () => {\n+  return {\n+    toast\n+  }\n+} \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739448973807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,191 @@\n-import { toast } from \"./toast\"\n+import * as React from \"react\"\n \n-export const useToast = () => {\n+import type {\n+  ToastActionElement,\n+  ToastProps,\n\\ No newline at end of file\n+} from \"@/components/ui/toast\"\n+\n+const TOAST_LIMIT = 1\n+const TOAST_REMOVE_DELAY = 1000000\n+\n+type ToasterToast = ToastProps & {\n+  id: string\n+  title?: React.ReactNode\n+  description?: React.ReactNode\n+  action?: ToastActionElement\n+}\n+\n+const actionTypes = {\n+  ADD_TOAST: \"ADD_TOAST\",\n+  UPDATE_TOAST: \"UPDATE_TOAST\",\n+  DISMISS_TOAST: \"DISMISS_TOAST\",\n+  REMOVE_TOAST: \"REMOVE_TOAST\",\n+} as const\n+\n+let count = 0\n+\n+function genId() {\n+  count = (count + 1) % Number.MAX_VALUE\n+  return count.toString()\n+}\n+\n+type ActionType = typeof actionTypes\n+\n+type Action =\n+  | {\n+      type: ActionType[\"ADD_TOAST\"]\n+      toast: ToasterToast\n+    }\n+  | {\n+      type: ActionType[\"UPDATE_TOAST\"]\n+      toast: Partial<ToasterToast>\n+    }\n+  | {\n+      type: ActionType[\"DISMISS_TOAST\"]\n+      toastId?: ToasterToast[\"id\"]\n+    }\n+  | {\n+      type: ActionType[\"REMOVE_TOAST\"]\n+      toastId?: ToasterToast[\"id\"]\n+    }\n+\n+interface State {\n+  toasts: ToasterToast[]\n+}\n+\n+const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n+\n+const addToRemoveQueue = (toastId: string) => {\n+  if (toastTimeouts.has(toastId)) {\n+    return\n+  }\n+\n+  const timeout = setTimeout(() => {\n+    toastTimeouts.delete(toastId)\n+    dispatch({\n+      type: \"REMOVE_TOAST\",\n+      toastId: toastId,\n+    })\n+  }, TOAST_REMOVE_DELAY)\n+\n+  toastTimeouts.set(toastId, timeout)\n+}\n+\n+export const reducer = (state: State, action: Action): State => {\n+  switch (action.type) {\n+    case \"ADD_TOAST\":\n+      return {\n+        ...state,\n+        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n+      }\n+\n+    case \"UPDATE_TOAST\":\n+      return {\n+        ...state,\n+        toasts: state.toasts.map((t) =>\n+          t.id === action.toast.id ? { ...t, ...action.toast } : t\n+        ),\n+      }\n+\n+    case \"DISMISS_TOAST\": {\n+      const { toastId } = action\n+\n+      // ! Side effects ! - This could be extracted into a dismissToast() action,\n+      // but I'll keep it here for simplicity\n+      if (toastId) {\n+        addToRemoveQueue(toastId)\n+      } else {\n+        state.toasts.forEach((toast) => {\n+          addToRemoveQueue(toast.id)\n+        })\n+      }\n+\n+      return {\n+        ...state,\n+        toasts: state.toasts.map((t) =>\n+          t.id === toastId || toastId === undefined\n+            ? {\n+                ...t,\n+                open: false,\n+              }\n+            : t\n+        ),\n+      }\n+    }\n+    case \"REMOVE_TOAST\":\n+      if (action.toastId === undefined) {\n+        return {\n+          ...state,\n+          toasts: [],\n+        }\n+      }\n+      return {\n+        ...state,\n+        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n+      }\n+  }\n+}\n+\n+const listeners: Array<(state: State) => void> = []\n+\n+let memoryState: State = { toasts: [] }\n+\n+function dispatch(action: Action) {\n+  memoryState = reducer(memoryState, action)\n+  listeners.forEach((listener) => {\n+    listener(memoryState)\n+  })\n+}\n+\n+type Toast = Omit<ToasterToast, \"id\">\n+\n+function toast({ ...props }: Toast) {\n+  const id = genId()\n+\n+  const update = (props: ToasterToast) =>\n+    dispatch({\n+      type: \"UPDATE_TOAST\",\n+      toast: { ...props, id },\n+    })\n+  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n+\n+  dispatch({\n+    type: \"ADD_TOAST\",\n+    toast: {\n+      ...props,\n+      id,\n+      open: true,\n+      onOpenChange: (open) => {\n+        if (!open) dismiss()\n+      },\n+    },\n+  })\n+\n   return {\n-    toast\n+    id: id,\n+    dismiss,\n+    update,\n   }\n-} \n+}\n+\n+function useToast() {\n+  const [state, setState] = React.useState<State>(memoryState)\n+\n+  React.useEffect(() => {\n+    listeners.push(setState)\n+    return () => {\n+      const index = listeners.indexOf(setState)\n+      if (index > -1) {\n+        listeners.splice(index, 1)\n+      }\n+    }\n+  }, [state])\n+\n+  return {\n+    ...state,\n+    toast,\n+    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n+  }\n+}\n+\n+export { useToast, toast } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739449169543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n import type {\n   ToastActionElement,\n   ToastProps,\n-} from \"@/components/ui/toast\"\n+} from \"@/components/ui/Toast\"\n \n const TOAST_LIMIT = 1\n const TOAST_REMOVE_DELAY = 1000000\n \n"
                }
            ],
            "date": 1739447270385,
            "name": "Commit-0",
            "content": "import * as React from \"react\";\r\n\r\nimport type {\r\n  ToastActionElement,\r\n  ToastProps,\r\n} from \"@/components/ui/toast\";\r\n\r\nconst TOAST_LIMIT = 1;\r\nconst TOAST_REMOVE_DELAY = 1000000;\r\n\r\ntype ToasterToast = ToastProps & {\r\n  id: string;\r\n  title?: React.ReactNode;\r\n  description?: React.ReactNode;\r\n  action?: ToastActionElement;\r\n};\r\n\r\nconst actionTypes = {\r\n  ADD_TOAST: \"ADD_TOAST\",\r\n  UPDATE_TOAST: \"UPDATE_TOAST\",\r\n  DISMISS_TOAST: \"DISMISS_TOAST\",\r\n  REMOVE_TOAST: \"REMOVE_TOAST\",\r\n} as const;\r\n\r\nlet count = 0;\r\n\r\nfunction genId() {\r\n  count = (count + 1) % Number.MAX_VALUE;\r\n  return count.toString();\r\n}\r\n\r\ntype ActionType = typeof actionTypes;\r\n\r\ntype Action =\r\n  | {\r\n      type: ActionType[\"ADD_TOAST\"];\r\n      toast: ToasterToast;\r\n    }\r\n  | {\r\n      type: ActionType[\"UPDATE_TOAST\"];\r\n      toast: Partial<ToasterToast>;\r\n    }\r\n  | {\r\n      type: ActionType[\"DISMISS_TOAST\"];\r\n      toastId?: ToasterToast[\"id\"];\r\n    }\r\n  | {\r\n      type: ActionType[\"REMOVE_TOAST\"];\r\n      toastId?: ToasterToast[\"id\"];\r\n    };\r\n\r\ninterface State {\r\n  toasts: ToasterToast[];\r\n}\r\n\r\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();\r\n\r\nconst addToRemoveQueue = (toastId: string) => {\r\n  if (toastTimeouts.has(toastId)) {\r\n    return;\r\n  }\r\n\r\n  const timeout = setTimeout(() => {\r\n    toastTimeouts.delete(toastId);\r\n    dispatch({\r\n      type: \"REMOVE_TOAST\",\r\n      toastId: toastId,\r\n    });\r\n  }, TOAST_REMOVE_DELAY);\r\n\r\n  toastTimeouts.set(toastId, timeout);\r\n};\r\n\r\nexport const reducer = (state: State, action: Action): State => {\r\n  switch (action.type) {\r\n    case \"ADD_TOAST\":\r\n      return {\r\n        ...state,\r\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\r\n      };\r\n\r\n    case \"UPDATE_TOAST\":\r\n      return {\r\n        ...state,\r\n        toasts: state.toasts.map((t) =>\r\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\r\n        ),\r\n      };\r\n\r\n    case \"DISMISS_TOAST\": {\r\n      const { toastId } = action;\r\n\r\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\r\n      // but I'll keep it here for simplicity\r\n      if (toastId) {\r\n        addToRemoveQueue(toastId);\r\n      } else {\r\n        state.toasts.forEach((toast) => {\r\n          addToRemoveQueue(toast.id);\r\n        });\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        toasts: state.toasts.map((t) =>\r\n          t.id === toastId || toastId === undefined\r\n            ? {\r\n                ...t,\r\n                open: false,\r\n              }\r\n            : t\r\n        ),\r\n      };\r\n    }\r\n    case \"REMOVE_TOAST\":\r\n      if (action.toastId === undefined) {\r\n        return {\r\n          ...state,\r\n          toasts: [],\r\n        };\r\n      }\r\n      return {\r\n        ...state,\r\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\r\n      };\r\n  }\r\n};\r\n\r\nconst listeners: Array<(state: State) => void> = [];\r\n\r\nlet memoryState: State = { toasts: [] };\r\n\r\nfunction dispatch(action: Action) {\r\n  memoryState = reducer(memoryState, action);\r\n  listeners.forEach((listener) => {\r\n    listener(memoryState);\r\n  });\r\n}\r\n\r\ntype Toast = Omit<ToasterToast, \"id\">;\r\n\r\nfunction toast({ ...props }: Toast) {\r\n  const id = genId();\r\n\r\n  const update = (props: ToasterToast) =>\r\n    dispatch({\r\n      type: \"UPDATE_TOAST\",\r\n      toast: { ...props, id },\r\n    });\r\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id });\r\n\r\n  dispatch({\r\n    type: \"ADD_TOAST\",\r\n    toast: {\r\n      ...props,\r\n      id,\r\n      open: true,\r\n      onOpenChange: (open) => {\r\n        if (!open) dismiss();\r\n      },\r\n    },\r\n  });\r\n\r\n  return {\r\n    id: id,\r\n    dismiss,\r\n    update,\r\n  };\r\n}\r\n\r\nfunction useToast() {\r\n  const [state, setState] = React.useState<State>(memoryState);\r\n\r\n  React.useEffect(() => {\r\n    listeners.push(setState);\r\n    return () => {\r\n      const index = listeners.indexOf(setState);\r\n      if (index > -1) {\r\n        listeners.splice(index, 1);\r\n      }\r\n    };\r\n  }, [state]);\r\n\r\n  return {\r\n    ...state,\r\n    toast,\r\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\r\n  };\r\n}\r\n\r\nexport { useToast, toast }; "
        }
    ]
}