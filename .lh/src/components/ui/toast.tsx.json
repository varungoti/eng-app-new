{
    "sourceFile": "src/components/ui/toast.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1739012009321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739012030496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n \r\n import * as React from \"react\"\r\n import { toast as foxToast } from 'react-fox-toast'\r\n import { cn } from \"@/lib/utils\"\r\n+import type { ToastProps, ToastActionElement } from 'react-fox-toast'\r\n \r\n // Keep existing types for backward compatibility\r\n export type {\r\n   ToastProps,\r\n"
                },
                {
                    "date": 1739012051548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,5 +61,15 @@\n   ToastTitle,\r\n   ToastDescription,\r\n   ToastClose,\r\n   ToastAction,\r\n-} from 'react-fox-toast'\n\\ No newline at end of file\n+} from 'react-fox-toast'\r\n+\r\n+export interface ToastProps {\r\n+  title?: string;\r\n+  description?: string;\r\n+  action?: ToastActionElement;\r\n+  variant?: 'default' | 'destructive';\r\n+  duration?: number;\r\n+}\r\n+\r\n+export type ToastActionElement = React.ReactElement<any, any>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739012231569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \r\n import * as React from \"react\"\r\n import { toast as foxToast } from 'react-fox-toast'\r\n import { cn } from \"@/lib/utils\"\r\n-import type { ToastProps, ToastActionElement } from 'react-fox-toast'\r\n+import { ToastContainer } from 'react-fox-toast'\r\n \r\n // Keep existing types for backward compatibility\r\n export type {\r\n   ToastProps,\r\n@@ -48,9 +48,9 @@\n // Export a hook that maintains the same interface\r\n export function useToast() {\r\n   return {\r\n     toast,\r\n-    dismiss: foxToast.dismiss\r\n+    dismiss: (toastId: string) => foxToast.remove(toastId)\r\n   }\r\n }\r\n \r\n // Re-export components that might still be used in the codebase\r\n"
                },
                {
                    "date": 1739012254383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,18 +53,13 @@\n   }\r\n }\r\n \r\n // Re-export components that might still be used in the codebase\r\n-export {\r\n-  ToastProvider,\r\n-  ToastViewport,\r\n-  Toast,\r\n-  ToastTitle,\r\n-  ToastDescription,\r\n-  ToastClose,\r\n-  ToastAction,\r\n-} from 'react-fox-toast'\r\n+export { ToastContainer } from 'react-fox-toast'\r\n \r\n+// Note: react-fox-toast doesn't require separate components like Provider, Viewport, etc.\r\n+// The ToastContainer handles everything\r\n+\r\n export interface ToastProps {\r\n   title?: string;\r\n   description?: string;\r\n   action?: ToastActionElement;\r\n"
                },
                {
                    "date": 1739012283720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,13 +5,10 @@\n import { cn } from \"@/lib/utils\"\r\n import { ToastContainer } from 'react-fox-toast'\r\n \r\n // Keep existing types for backward compatibility\r\n-export type {\r\n-  ToastProps,\r\n-  ToastActionElement,\r\n-}\r\n \r\n+\r\n // Maintain existing interface but use react-fox-toast internally\r\n export const toast = {\r\n   success: (message: string, options?: any) => {\r\n     return foxToast.success(message, {\r\n@@ -66,5 +63,6 @@\n   variant?: 'default' | 'destructive';\r\n   duration?: number;\r\n }\r\n \r\n-export type ToastActionElement = React.ReactElement<any, any>\n\\ No newline at end of file\n+export type ToastActionElement = React.ReactElement<any, any>\r\n+\r\n"
                },
                {
                    "date": 1739012357502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,68 +1,314 @@\n \"use client\"\r\n \r\n import * as React from \"react\"\r\n-import { toast as foxToast } from 'react-fox-toast'\r\n+import * as ToastPrimitives from \"@radix-ui/react-toast\"\r\n+import { cva, type VariantProps } from \"class-variance-authority\"\r\n+import { X } from \"lucide-react\"\r\n import { cn } from \"@/lib/utils\"\r\n-import { ToastContainer } from 'react-fox-toast'\r\n \r\n-// Keep existing types for backward compatibility\r\n+const ToastProvider = ToastPrimitives.Provider\r\n \r\n+const ToastViewport = React.forwardRef<\r\n+  React.ElementRef<typeof ToastPrimitives.Viewport>,\r\n+  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\r\n+>(({ className, ...props }, ref) => (\r\n+  <ToastPrimitives.Viewport\r\n+    ref={ref}\r\n+    className={cn(\r\n+      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\r\n+      className\r\n+    )}\r\n+    {...props}\r\n+  />\r\n+))\r\n+ToastViewport.displayName = ToastPrimitives.Viewport.displayName\r\n \r\n-// Maintain existing interface but use react-fox-toast internally\r\n-export const toast = {\r\n-  success: (message: string, options?: any) => {\r\n-    return foxToast.success(message, {\r\n-      position: 'bottom-right',\r\n-      ...options\r\n+const toastVariants = cva(\r\n+  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\r\n+  {\r\n+    variants: {\r\n+      variant: {\r\n+        default: \"border bg-background text-foreground\",\r\n+        destructive:\r\n+          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\r\n+      },\r\n+    },\r\n+    defaultVariants: {\r\n+      variant: \"default\",\r\n+    },\r\n+  }\r\n+)\r\n+\r\n+const Toast = React.forwardRef<\r\n+  React.ElementRef<typeof ToastPrimitives.Root>,\r\n+  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\r\n+    VariantProps<typeof toastVariants>\r\n+>(({ className, variant, ...props }, ref) => {\r\n+  return (\r\n+    <ToastPrimitives.Root\r\n+      ref={ref}\r\n+      className={cn(toastVariants({ variant }), className)}\r\n+      {...props}\r\n+    />\r\n+  )\r\n+})\r\n+Toast.displayName = ToastPrimitives.Root.displayName\r\n+\r\n+const ToastAction = React.forwardRef<\r\n+  React.ElementRef<typeof ToastPrimitives.Action>,\r\n+  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\r\n+>(({ className, ...props }, ref) => (\r\n+  <ToastPrimitives.Action\r\n+    ref={ref}\r\n+    className={cn(\r\n+      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\r\n+      className\r\n+    )}\r\n+    {...props}\r\n+  />\r\n+))\r\n+ToastAction.displayName = ToastPrimitives.Action.displayName\r\n+\r\n+const ToastClose = React.forwardRef<\r\n+  React.ElementRef<typeof ToastPrimitives.Close>,\r\n+  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\r\n+>(({ className, ...props }, ref) => (\r\n+  <ToastPrimitives.Close\r\n+    ref={ref}\r\n+    className={cn(\r\n+      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\r\n+      className\r\n+    )}\r\n+    toast-close=\"\"\r\n+    {...props}\r\n+  >\r\n+    <X className=\"h-4 w-4\" />\r\n+  </ToastPrimitives.Close>\r\n+))\r\n+ToastClose.displayName = ToastPrimitives.Close.displayName\r\n+\r\n+const ToastTitle = React.forwardRef<\r\n+  React.ElementRef<typeof ToastPrimitives.Title>,\r\n+  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\r\n+>(({ className, ...props }, ref) => (\r\n+  <ToastPrimitives.Title\r\n+    ref={ref}\r\n+    className={cn(\"text-sm font-semibold\", className)}\r\n+    {...props}\r\n+  />\r\n+))\r\n+ToastTitle.displayName = ToastPrimitives.Title.displayName\r\n+\r\n+const ToastDescription = React.forwardRef<\r\n+  React.ElementRef<typeof ToastPrimitives.Description>,\r\n+  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\r\n+>(({ className, ...props }, ref) => (\r\n+  <ToastPrimitives.Description\r\n+    ref={ref}\r\n+    className={cn(\"text-sm opacity-90\", className)}\r\n+    {...props}\r\n+  />\r\n+))\r\n+ToastDescription.displayName = ToastPrimitives.Description.displayName\r\n+\r\n+type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\r\n+type ToastActionElement = React.ReactElement<typeof ToastAction>\r\n+\r\n+const TOAST_LIMIT = 1\r\n+const TOAST_REMOVE_DELAY = 5000\r\n+\r\n+type ToasterToast = ToastProps & {\r\n+  id: string\r\n+  title?: string\r\n+  description?: string\r\n+  action?: ToastActionElement\r\n+}\r\n+\r\n+const actionTypes = {\r\n+  ADD_TOAST: \"ADD_TOAST\",\r\n+  UPDATE_TOAST: \"UPDATE_TOAST\",\r\n+  DISMISS_TOAST: \"DISMISS_TOAST\",\r\n+  REMOVE_TOAST: \"REMOVE_TOAST\",\r\n+} as const\r\n+\r\n+let count = 0\r\n+\r\n+function genId() {\r\n+  count = (count + 1) % Number.MAX_VALUE\r\n+  return count.toString()\r\n+}\r\n+\r\n+type ActionType = typeof actionTypes\r\n+\r\n+type Action =\r\n+  | {\r\n+      type: ActionType[\"ADD_TOAST\"]\r\n+      toast: ToasterToast\r\n+    }\r\n+  | {\r\n+      type: ActionType[\"UPDATE_TOAST\"]\r\n+      toast: Partial<ToasterToast>\r\n+    }\r\n+  | {\r\n+      type: ActionType[\"DISMISS_TOAST\"]\r\n+      toastId?: ToasterToast[\"id\"]\r\n+    }\r\n+  | {\r\n+      type: ActionType[\"REMOVE_TOAST\"]\r\n+      toastId?: ToasterToast[\"id\"]\r\n+    }\r\n+\r\n+interface State {\r\n+  toasts: ToasterToast[]\r\n+}\r\n+\r\n+const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\r\n+\r\n+const addToRemoveQueue = (toastId: string) => {\r\n+  if (toastTimeouts.has(toastId)) {\r\n+    return\r\n+  }\r\n+\r\n+  const timeout = setTimeout(() => {\r\n+    toastTimeouts.delete(toastId)\r\n+    dispatch({\r\n+      type: \"REMOVE_TOAST\",\r\n+      toastId: toastId,\r\n     })\r\n-  },\r\n-  error: (message: string, options?: any) => {\r\n-    return foxToast.error(message, {\r\n-      position: 'bottom-right',\r\n-      ...options\r\n-    })\r\n-  },\r\n-  info: (message: string, options?: any) => {\r\n-    return foxToast.info(message, {\r\n-      position: 'bottom-right',\r\n-      ...options\r\n-    })\r\n-  },\r\n-  warning: (message: string, options?: any) => {\r\n-    return foxToast.warning(message, {\r\n-      position: 'bottom-right',\r\n-      ...options\r\n-    })\r\n-  },\r\n-  custom: (jsx: React.ReactNode, options?: any) => {\r\n-    return foxToast(jsx, {\r\n-      position: 'bottom-right',\r\n-      ...options\r\n-    })\r\n+  }, TOAST_REMOVE_DELAY)\r\n+\r\n+  toastTimeouts.set(toastId, timeout)\r\n+}\r\n+\r\n+export const reducer = (state: State, action: Action): State => {\r\n+  switch (action.type) {\r\n+    case \"ADD_TOAST\":\r\n+      return {\r\n+        ...state,\r\n+        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\r\n+      }\r\n+\r\n+    case \"UPDATE_TOAST\":\r\n+      return {\r\n+        ...state,\r\n+        toasts: state.toasts.map((t) =>\r\n+          t.id === action.toast.id ? { ...t, ...action.toast } : t\r\n+        ),\r\n+      }\r\n+\r\n+    case \"DISMISS_TOAST\": {\r\n+      const { toastId } = action\r\n+\r\n+      if (toastId) {\r\n+        addToRemoveQueue(toastId)\r\n+      } else {\r\n+        state.toasts.forEach((toast) => {\r\n+          addToRemoveQueue(toast.id)\r\n+        })\r\n+      }\r\n+\r\n+      return {\r\n+        ...state,\r\n+        toasts: state.toasts.map((t) =>\r\n+          t.id === toastId || toastId === undefined\r\n+            ? {\r\n+                ...t,\r\n+                open: false,\r\n+              }\r\n+            : t\r\n+        ),\r\n+      }\r\n+    }\r\n+\r\n+    case \"REMOVE_TOAST\":\r\n+      if (action.toastId === undefined) {\r\n+        return {\r\n+          ...state,\r\n+          toasts: [],\r\n+        }\r\n+      }\r\n+      return {\r\n+        ...state,\r\n+        toasts: state.toasts.filter((t) => t.id !== action.toastId),\r\n+      }\r\n   }\r\n }\r\n \r\n-// Export a hook that maintains the same interface\r\n-export function useToast() {\r\n+const listeners: Array<(state: State) => void> = []\r\n+\r\n+let memoryState: State = { toasts: [] }\r\n+\r\n+function dispatch(action: Action) {\r\n+  memoryState = reducer(memoryState, action)\r\n+  listeners.forEach((listener) => {\r\n+    listener(memoryState)\r\n+  })\r\n+}\r\n+\r\n+export function toast({\r\n+  title,\r\n+  description,\r\n+  variant,\r\n+  action,\r\n+}: {\r\n+  title?: string\r\n+  description?: string\r\n+  variant?: \"default\" | \"destructive\"\r\n+  action?: ToastActionElement\r\n+}) {\r\n+  const id = genId()\r\n+\r\n+  dispatch({\r\n+    type: \"ADD_TOAST\",\r\n+    toast: {\r\n+      id,\r\n+      title,\r\n+      description,\r\n+      variant,\r\n+      action,\r\n+      open: true,\r\n+    },\r\n+  })\r\n+\r\n   return {\r\n-    toast,\r\n-    dismiss: (toastId: string) => foxToast.remove(toastId)\r\n+    id,\r\n+    dismiss: () => dispatch({ type: \"DISMISS_TOAST\", toastId: id }),\r\n+    update: (props: ToasterToast) =>\r\n+      dispatch({\r\n+        type: \"UPDATE_TOAST\",\r\n+        toast: { ...props, id },\r\n+      }),\r\n   }\r\n }\r\n \r\n-// Re-export components that might still be used in the codebase\r\n-export { ToastContainer } from 'react-fox-toast'\r\n+export function useToast() {\r\n+  const [state, setState] = React.useState<State>(memoryState)\r\n \r\n-// Note: react-fox-toast doesn't require separate components like Provider, Viewport, etc.\r\n-// The ToastContainer handles everything\r\n+  React.useEffect(() => {\r\n+    listeners.push(setState)\r\n+    return () => {\r\n+      const index = listeners.indexOf(setState)\r\n+      if (index > -1) {\r\n+        listeners.splice(index, 1)\r\n+      }\r\n+    }\r\n+  }, [state])\r\n \r\n-export interface ToastProps {\r\n-  title?: string;\r\n-  description?: string;\r\n-  action?: ToastActionElement;\r\n-  variant?: 'default' | 'destructive';\r\n-  duration?: number;\r\n+  return {\r\n+    ...state,\r\n+    toast,\r\n+    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\r\n+  }\r\n }\r\n \r\n-export type ToastActionElement = React.ReactElement<any, any>\r\n-\r\n+export {\r\n+  type ToastProps,\r\n+  type ToastActionElement,\r\n+  ToastProvider,\r\n+  ToastViewport,\r\n+  Toast,\r\n+  ToastTitle,\r\n+  ToastDescription,\r\n+  ToastClose,\r\n+  ToastAction,\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739390789007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,23 +38,20 @@\n     },\r\n   }\r\n )\r\n \r\n-const Toast = React.forwardRef<\r\n-  React.ElementRef<typeof ToastPrimitives.Root>,\r\n-  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\r\n-    VariantProps<typeof toastVariants>\r\n->(({ className, variant, ...props }, ref) => {\r\n-  return (\r\n-    <ToastPrimitives.Root\r\n-      ref={ref}\r\n-      className={cn(toastVariants({ variant }), className)}\r\n-      {...props}\r\n-    />\r\n-  )\r\n-})\r\n-Toast.displayName = ToastPrimitives.Root.displayName\r\n+interface ToastProps {\r\n+  title: string | React.ReactNode;\r\n+  description?: string;\r\n+  variant?: 'default' | 'destructive' | 'warning';\r\n+  onOpenChange?: (open: boolean) => void;\r\n+  className?: string;\r\n+}\r\n \r\n+const Toast: React.FC<ToastProps> = ({ ... }) => {\r\n+  // ... implementation\r\n+}\r\n+\r\n const ToastAction = React.forwardRef<\r\n   React.ElementRef<typeof ToastPrimitives.Action>,\r\n   React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\r\n >(({ className, ...props }, ref) => (\r\n@@ -110,9 +107,8 @@\n   />\r\n ))\r\n ToastDescription.displayName = ToastPrimitives.Description.displayName\r\n \r\n-type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\r\n type ToastActionElement = React.ReactElement<typeof ToastAction>\r\n \r\n const TOAST_LIMIT = 1\r\n const TOAST_REMOVE_DELAY = 5000\r\n"
                },
                {
                    "date": 1739390799062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,20 +38,23 @@\n     },\r\n   }\r\n )\r\n \r\n-interface ToastProps {\r\n-  title: string | React.ReactNode;\r\n-  description?: string;\r\n-  variant?: 'default' | 'destructive' | 'warning';\r\n-  onOpenChange?: (open: boolean) => void;\r\n-  className?: string;\r\n-}\r\n+const Toast = React.forwardRef<\r\n+  React.ElementRef<typeof ToastPrimitives.Root>,\r\n+  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\r\n+    VariantProps<typeof toastVariants>\r\n+>(({ className, variant, ...props }, ref) => {\r\n+  return (\r\n+    <ToastPrimitives.Root\r\n+      ref={ref}\r\n+      className={cn(toastVariants({ variant }), className)}\r\n+      {...props}\r\n+    />\r\n+  )\r\n+})\r\n+Toast.displayName = ToastPrimitives.Root.displayName\r\n \r\n-const Toast: React.FC<ToastProps> = ({ ... }) => {\r\n-  // ... implementation\r\n-}\r\n-\r\n const ToastAction = React.forwardRef<\r\n   React.ElementRef<typeof ToastPrimitives.Action>,\r\n   React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\r\n >(({ className, ...props }, ref) => (\r\n"
                },
                {
                    "date": 1739390812603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n import * as ToastPrimitives from \"@radix-ui/react-toast\"\r\n import { cva, type VariantProps } from \"class-variance-authority\"\r\n import { X } from \"lucide-react\"\r\n import { cn } from \"@/lib/utils\"\r\n+import { ToastProps } from \"@radix-ui/react-toast\"\r\n \r\n const ToastProvider = ToastPrimitives.Provider\r\n \r\n const ToastViewport = React.forwardRef<\r\n"
                },
                {
                    "date": 1739390961740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,316 @@\n+\"use client\"\r\n+\r\n+import * as React from \"react\"\r\n+import * as ToastPrimitives from \"@radix-ui/react-toast\"\r\n+import { cva, type VariantProps } from \"class-variance-authority\"\r\n+import { X } from \"lucide-react\"\r\n+import { cn } from \"@/lib/utils\"\r\n+import { ToastProps } from \"@radix-ui/react-toast\"\r\n+\r\n+const ToastProvider = ToastPrimitives.Provider\r\n+\r\n+const ToastViewport = React.forwardRef<\r\n+  React.ElementRef<typeof ToastPrimitives.Viewport>,\r\n+  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\r\n+>(({ className, ...props }, ref) => (\r\n+  <ToastPrimitives.Viewport\r\n+    ref={ref}\r\n+    className={cn(\r\n+      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\r\n+      className\r\n+    )}\r\n+    {...props}\r\n+  />\r\n+))\r\n+ToastViewport.displayName = ToastPrimitives.Viewport.displayName\r\n+\r\n+const toastVariants = cva(\r\n+  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\r\n+  {\r\n+    variants: {\r\n+      variant: {\r\n+        default: \"border bg-background text-foreground\",\r\n+        destructive:\r\n+          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\r\n+      },\r\n+    },\r\n+    defaultVariants: {\r\n+      variant: \"default\",\r\n+    },\r\n+  }\r\n+)\r\n+\r\n+const Toast = React.forwardRef<\r\n+  React.ElementRef<typeof ToastPrimitives.Root>,\r\n+  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\r\n+    VariantProps<typeof toastVariants>\r\n+>(({ className, variant, ...props }, ref) => {\r\n+  return (\r\n+    <ToastPrimitives.Root\r\n+      ref={ref}\r\n+      className={cn(toastVariants({ variant }), className)}\r\n+      {...props}\r\n+    />\r\n+  )\r\n+})\r\n+Toast.displayName = ToastPrimitives.Root.displayName\r\n+\r\n+const ToastAction = React.forwardRef<\r\n+  React.ElementRef<typeof ToastPrimitives.Action>,\r\n+  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\r\n+>(({ className, ...props }, ref) => (\r\n+  <ToastPrimitives.Action\r\n+    ref={ref}\r\n+    className={cn(\r\n+      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\r\n+      className\r\n+    )}\r\n+    {...props}\r\n+  />\r\n+))\r\n+ToastAction.displayName = ToastPrimitives.Action.displayName\r\n+\r\n+const ToastClose = React.forwardRef<\r\n+  React.ElementRef<typeof ToastPrimitives.Close>,\r\n+  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\r\n+>(({ className, ...props }, ref) => (\r\n+  <ToastPrimitives.Close\r\n+    ref={ref}\r\n+    className={cn(\r\n+      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\r\n+      className\r\n+    )}\r\n+    toast-close=\"\"\r\n+    {...props}\r\n+  >\r\n+    <X className=\"h-4 w-4\" />\r\n+  </ToastPrimitives.Close>\r\n+))\r\n+ToastClose.displayName = ToastPrimitives.Close.displayName\r\n+\r\n+const ToastTitle = React.forwardRef<\r\n+  React.ElementRef<typeof ToastPrimitives.Title>,\r\n+  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\r\n+>(({ className, ...props }, ref) => (\r\n+  <ToastPrimitives.Title\r\n+    ref={ref}\r\n+    className={cn(\"text-sm font-semibold\", className)}\r\n+    {...props}\r\n+  />\r\n+))\r\n+ToastTitle.displayName = ToastPrimitives.Title.displayName\r\n+\r\n+const ToastDescription = React.forwardRef<\r\n+  React.ElementRef<typeof ToastPrimitives.Description>,\r\n+  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\r\n+>(({ className, ...props }, ref) => (\r\n+  <ToastPrimitives.Description\r\n+    ref={ref}\r\n+    className={cn(\"text-sm opacity-90\", className)}\r\n+    {...props}\r\n+  />\r\n+))\r\n+ToastDescription.displayName = ToastPrimitives.Description.displayName\r\n+\r\n+type ToastActionElement = React.ReactElement<typeof ToastAction>\r\n+\r\n+const TOAST_LIMIT = 1\r\n+const TOAST_REMOVE_DELAY = 5000\r\n+\r\n+type ToasterToast = ToastProps & {\r\n+  id: string\r\n+  title?: string | React.ReactNode\r\n+  description?: string\r\n+  variant?: 'default' | 'destructive' | 'warning'\r\n+  action?: ToastActionElement\r\n+  open?: boolean\r\n+}\r\n+\r\n+const actionTypes = {\r\n+  ADD_TOAST: \"ADD_TOAST\",\r\n+  UPDATE_TOAST: \"UPDATE_TOAST\",\r\n+  DISMISS_TOAST: \"DISMISS_TOAST\",\r\n+  REMOVE_TOAST: \"REMOVE_TOAST\",\r\n+} as const\r\n+\r\n+let count = 0\r\n+\r\n+function genId() {\r\n+  count = (count + 1) % Number.MAX_VALUE\r\n+  return count.toString()\r\n+}\r\n+\r\n+type ActionType = typeof actionTypes\r\n+\r\n+type Action =\r\n+  | {\r\n+      type: ActionType[\"ADD_TOAST\"]\r\n+      toast: ToasterToast\r\n+    }\r\n+  | {\r\n+      type: ActionType[\"UPDATE_TOAST\"]\r\n+      toast: Partial<ToasterToast>\r\n+    }\r\n+  | {\r\n+      type: ActionType[\"DISMISS_TOAST\"]\r\n+      toastId?: ToasterToast[\"id\"]\r\n+    }\r\n+  | {\r\n+      type: ActionType[\"REMOVE_TOAST\"]\r\n+      toastId?: ToasterToast[\"id\"]\r\n+    }\r\n+\r\n+interface State {\r\n+  toasts: ToasterToast[]\r\n+}\r\n+\r\n+const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\r\n+\r\n+const addToRemoveQueue = (toastId: string) => {\r\n+  if (toastTimeouts.has(toastId)) {\r\n+    return\r\n+  }\r\n+\r\n+  const timeout = setTimeout(() => {\r\n+    toastTimeouts.delete(toastId)\r\n+    dispatch({\r\n+      type: \"REMOVE_TOAST\",\r\n+      toastId: toastId,\r\n+    })\r\n+  }, TOAST_REMOVE_DELAY)\r\n+\r\n+  toastTimeouts.set(toastId, timeout)\r\n+}\r\n+\r\n+export const reducer = (state: State, action: Action): State => {\r\n+  switch (action.type) {\r\n+    case \"ADD_TOAST\":\r\n+      return {\r\n+        ...state,\r\n+        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\r\n+      }\r\n+\r\n+    case \"UPDATE_TOAST\":\r\n+      return {\r\n+        ...state,\r\n+        toasts: state.toasts.map((t) =>\r\n+          t.id === action.toast.id ? { ...t, ...action.toast } : t\r\n+        ),\r\n+      }\r\n+\r\n+    case \"DISMISS_TOAST\": {\r\n+      const { toastId } = action\r\n+\r\n+      if (toastId) {\r\n+        addToRemoveQueue(toastId)\r\n+      } else {\r\n+        state.toasts.forEach((toast) => {\r\n+          addToRemoveQueue(toast.id)\r\n+        })\r\n+      }\r\n+\r\n+      return {\r\n+        ...state,\r\n+        toasts: state.toasts.map((t) =>\r\n+          t.id === toastId || toastId === undefined\r\n+            ? {\r\n+                ...t,\r\n+                open: false,\r\n+              }\r\n+            : t\r\n+        ),\r\n+      }\r\n+    }\r\n+\r\n+    case \"REMOVE_TOAST\":\r\n+      if (action.toastId === undefined) {\r\n+        return {\r\n+          ...state,\r\n+          toasts: [],\r\n+        }\r\n+      }\r\n+      return {\r\n+        ...state,\r\n+        toasts: state.toasts.filter((t) => t.id !== action.toastId),\r\n+      }\r\n+  }\r\n+}\r\n+\r\n+const listeners: Array<(state: State) => void> = []\r\n+\r\n+let memoryState: State = { toasts: [] }\r\n+\r\n+function dispatch(action: Action) {\r\n+  memoryState = reducer(memoryState, action)\r\n+  listeners.forEach((listener) => {\r\n+    listener(memoryState)\r\n+  })\r\n+}\r\n+\r\n+export function toast({\r\n+  title,\r\n+  description,\r\n+  variant,\r\n+  action,\r\n+}: {\r\n+  title?: string\r\n+  description?: string\r\n+  variant?: \"default\" | \"destructive\" | \"warning\"\r\n+  action?: ToastActionElement\r\n+}) {\r\n+  const id = genId()\r\n+\r\n+  dispatch({\r\n+    type: \"ADD_TOAST\",\r\n+    toast: {\r\n+      id,\r\n+      title,\r\n+      description,\r\n+      variant,\r\n+      action,\r\n+      open: true,\r\n+    },\r\n+  })\r\n+\r\n+  return {\r\n+    id,\r\n+    dismiss: () => dispatch({ type: \"DISMISS_TOAST\", toastId: id }),\r\n+    update: (props: ToasterToast) =>\r\n+      dispatch({\r\n+        type: \"UPDATE_TOAST\",\r\n+        toast: { ...props, id },\r\n+      }),\r\n+  }\r\n+}\r\n+\r\n+export function useToast() {\r\n+  const [state, setState] = React.useState<State>(memoryState)\r\n+\r\n+  React.useEffect(() => {\r\n+    listeners.push(setState)\r\n+    return () => {\r\n+      const index = listeners.indexOf(setState)\r\n+      if (index > -1) {\r\n+        listeners.splice(index, 1)\r\n+      }\r\n+    }\r\n+  }, [state])\r\n+\r\n+  return {\r\n+    ...state,\r\n+    toast,\r\n+    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\r\n+  }\r\n+}\r\n+\r\n+export {\r\n+  type ToastProps,\r\n+  type ToastActionElement,\r\n+  ToastProvider,\r\n+  ToastViewport,\r\n+  Toast,\r\n+  ToastTitle,\r\n+  ToastDescription,\r\n+  ToastClose,\r\n+  ToastAction,\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739390968379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -312,319 +312,5 @@\n   ToastTitle,\r\n   ToastDescription,\r\n   ToastClose,\r\n   ToastAction,\r\n-}\n-\"use client\"\r\n-\r\n-import * as React from \"react\"\r\n-import * as ToastPrimitives from \"@radix-ui/react-toast\"\r\n-import { cva, type VariantProps } from \"class-variance-authority\"\r\n-import { X } from \"lucide-react\"\r\n-import { cn } from \"@/lib/utils\"\r\n-import { ToastProps } from \"@radix-ui/react-toast\"\r\n-\r\n-const ToastProvider = ToastPrimitives.Provider\r\n-\r\n-const ToastViewport = React.forwardRef<\r\n-  React.ElementRef<typeof ToastPrimitives.Viewport>,\r\n-  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\r\n->(({ className, ...props }, ref) => (\r\n-  <ToastPrimitives.Viewport\r\n-    ref={ref}\r\n-    className={cn(\r\n-      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\r\n-      className\r\n-    )}\r\n-    {...props}\r\n-  />\r\n-))\r\n-ToastViewport.displayName = ToastPrimitives.Viewport.displayName\r\n-\r\n-const toastVariants = cva(\r\n-  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\r\n-  {\r\n-    variants: {\r\n-      variant: {\r\n-        default: \"border bg-background text-foreground\",\r\n-        destructive:\r\n-          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\r\n-      },\r\n-    },\r\n-    defaultVariants: {\r\n-      variant: \"default\",\r\n-    },\r\n-  }\r\n-)\r\n-\r\n-const Toast = React.forwardRef<\r\n-  React.ElementRef<typeof ToastPrimitives.Root>,\r\n-  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\r\n-    VariantProps<typeof toastVariants>\r\n->(({ className, variant, ...props }, ref) => {\r\n-  return (\r\n-    <ToastPrimitives.Root\r\n-      ref={ref}\r\n-      className={cn(toastVariants({ variant }), className)}\r\n-      {...props}\r\n-    />\r\n-  )\r\n-})\r\n-Toast.displayName = ToastPrimitives.Root.displayName\r\n-\r\n-const ToastAction = React.forwardRef<\r\n-  React.ElementRef<typeof ToastPrimitives.Action>,\r\n-  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\r\n->(({ className, ...props }, ref) => (\r\n-  <ToastPrimitives.Action\r\n-    ref={ref}\r\n-    className={cn(\r\n-      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\r\n-      className\r\n-    )}\r\n-    {...props}\r\n-  />\r\n-))\r\n-ToastAction.displayName = ToastPrimitives.Action.displayName\r\n-\r\n-const ToastClose = React.forwardRef<\r\n-  React.ElementRef<typeof ToastPrimitives.Close>,\r\n-  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\r\n->(({ className, ...props }, ref) => (\r\n-  <ToastPrimitives.Close\r\n-    ref={ref}\r\n-    className={cn(\r\n-      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\r\n-      className\r\n-    )}\r\n-    toast-close=\"\"\r\n-    {...props}\r\n-  >\r\n-    <X className=\"h-4 w-4\" />\r\n-  </ToastPrimitives.Close>\r\n-))\r\n-ToastClose.displayName = ToastPrimitives.Close.displayName\r\n-\r\n-const ToastTitle = React.forwardRef<\r\n-  React.ElementRef<typeof ToastPrimitives.Title>,\r\n-  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\r\n->(({ className, ...props }, ref) => (\r\n-  <ToastPrimitives.Title\r\n-    ref={ref}\r\n-    className={cn(\"text-sm font-semibold\", className)}\r\n-    {...props}\r\n-  />\r\n-))\r\n-ToastTitle.displayName = ToastPrimitives.Title.displayName\r\n-\r\n-const ToastDescription = React.forwardRef<\r\n-  React.ElementRef<typeof ToastPrimitives.Description>,\r\n-  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\r\n->(({ className, ...props }, ref) => (\r\n-  <ToastPrimitives.Description\r\n-    ref={ref}\r\n-    className={cn(\"text-sm opacity-90\", className)}\r\n-    {...props}\r\n-  />\r\n-))\r\n-ToastDescription.displayName = ToastPrimitives.Description.displayName\r\n-\r\n-type ToastActionElement = React.ReactElement<typeof ToastAction>\r\n-\r\n-const TOAST_LIMIT = 1\r\n-const TOAST_REMOVE_DELAY = 5000\r\n-\r\n-type ToasterToast = ToastProps & {\r\n-  id: string\r\n-  title?: string\r\n-  description?: string\r\n-  action?: ToastActionElement\r\n-}\r\n-\r\n-const actionTypes = {\r\n-  ADD_TOAST: \"ADD_TOAST\",\r\n-  UPDATE_TOAST: \"UPDATE_TOAST\",\r\n-  DISMISS_TOAST: \"DISMISS_TOAST\",\r\n-  REMOVE_TOAST: \"REMOVE_TOAST\",\r\n-} as const\r\n-\r\n-let count = 0\r\n-\r\n-function genId() {\r\n-  count = (count + 1) % Number.MAX_VALUE\r\n-  return count.toString()\r\n-}\r\n-\r\n-type ActionType = typeof actionTypes\r\n-\r\n-type Action =\r\n-  | {\r\n-      type: ActionType[\"ADD_TOAST\"]\r\n-      toast: ToasterToast\r\n-    }\r\n-  | {\r\n-      type: ActionType[\"UPDATE_TOAST\"]\r\n-      toast: Partial<ToasterToast>\r\n-    }\r\n-  | {\r\n-      type: ActionType[\"DISMISS_TOAST\"]\r\n-      toastId?: ToasterToast[\"id\"]\r\n-    }\r\n-  | {\r\n-      type: ActionType[\"REMOVE_TOAST\"]\r\n-      toastId?: ToasterToast[\"id\"]\r\n-    }\r\n-\r\n-interface State {\r\n-  toasts: ToasterToast[]\r\n-}\r\n-\r\n-const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\r\n-\r\n-const addToRemoveQueue = (toastId: string) => {\r\n-  if (toastTimeouts.has(toastId)) {\r\n-    return\r\n-  }\r\n-\r\n-  const timeout = setTimeout(() => {\r\n-    toastTimeouts.delete(toastId)\r\n-    dispatch({\r\n-      type: \"REMOVE_TOAST\",\r\n-      toastId: toastId,\r\n-    })\r\n-  }, TOAST_REMOVE_DELAY)\r\n-\r\n-  toastTimeouts.set(toastId, timeout)\r\n-}\r\n-\r\n-export const reducer = (state: State, action: Action): State => {\r\n-  switch (action.type) {\r\n-    case \"ADD_TOAST\":\r\n-      return {\r\n-        ...state,\r\n-        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\r\n-      }\r\n-\r\n-    case \"UPDATE_TOAST\":\r\n-      return {\r\n-        ...state,\r\n-        toasts: state.toasts.map((t) =>\r\n-          t.id === action.toast.id ? { ...t, ...action.toast } : t\r\n-        ),\r\n-      }\r\n-\r\n-    case \"DISMISS_TOAST\": {\r\n-      const { toastId } = action\r\n-\r\n-      if (toastId) {\r\n-        addToRemoveQueue(toastId)\r\n-      } else {\r\n-        state.toasts.forEach((toast) => {\r\n-          addToRemoveQueue(toast.id)\r\n-        })\r\n-      }\r\n-\r\n-      return {\r\n-        ...state,\r\n-        toasts: state.toasts.map((t) =>\r\n-          t.id === toastId || toastId === undefined\r\n-            ? {\r\n-                ...t,\r\n-                open: false,\r\n-              }\r\n-            : t\r\n-        ),\r\n-      }\r\n-    }\r\n-\r\n-    case \"REMOVE_TOAST\":\r\n-      if (action.toastId === undefined) {\r\n-        return {\r\n-          ...state,\r\n-          toasts: [],\r\n-        }\r\n-      }\r\n-      return {\r\n-        ...state,\r\n-        toasts: state.toasts.filter((t) => t.id !== action.toastId),\r\n-      }\r\n-  }\r\n-}\r\n-\r\n-const listeners: Array<(state: State) => void> = []\r\n-\r\n-let memoryState: State = { toasts: [] }\r\n-\r\n-function dispatch(action: Action) {\r\n-  memoryState = reducer(memoryState, action)\r\n-  listeners.forEach((listener) => {\r\n-    listener(memoryState)\r\n-  })\r\n-}\r\n-\r\n-export function toast({\r\n-  title,\r\n-  description,\r\n-  variant,\r\n-  action,\r\n-}: {\r\n-  title?: string\r\n-  description?: string\r\n-  variant?: \"default\" | \"destructive\"\r\n-  action?: ToastActionElement\r\n-}) {\r\n-  const id = genId()\r\n-\r\n-  dispatch({\r\n-    type: \"ADD_TOAST\",\r\n-    toast: {\r\n-      id,\r\n-      title,\r\n-      description,\r\n-      variant,\r\n-      action,\r\n-      open: true,\r\n-    },\r\n-  })\r\n-\r\n-  return {\r\n-    id,\r\n-    dismiss: () => dispatch({ type: \"DISMISS_TOAST\", toastId: id }),\r\n-    update: (props: ToasterToast) =>\r\n-      dispatch({\r\n-        type: \"UPDATE_TOAST\",\r\n-        toast: { ...props, id },\r\n-      }),\r\n-  }\r\n-}\r\n-\r\n-export function useToast() {\r\n-  const [state, setState] = React.useState<State>(memoryState)\r\n-\r\n-  React.useEffect(() => {\r\n-    listeners.push(setState)\r\n-    return () => {\r\n-      const index = listeners.indexOf(setState)\r\n-      if (index > -1) {\r\n-        listeners.splice(index, 1)\r\n-      }\r\n-    }\r\n-  }, [state])\r\n-\r\n-  return {\r\n-    ...state,\r\n-    toast,\r\n-    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\r\n-  }\r\n-}\r\n-\r\n-export {\r\n-  type ToastProps,\r\n-  type ToastActionElement,\r\n-  ToastProvider,\r\n-  ToastViewport,\r\n-  Toast,\r\n-  ToastTitle,\r\n-  ToastDescription,\r\n-  ToastClose,\r\n-  ToastAction,\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739447304661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,10 @@\n       variant: {\r\n         default: \"border bg-background text-foreground\",\r\n         destructive:\r\n           \"destructive group border-destructive bg-destructive text-destructive-foreground\",\r\n+        warning:\r\n+          \"warning group border-warning bg-warning text-warning-foreground\",\r\n       },\r\n     },\r\n     defaultVariants: {\r\n       variant: \"default\",\r\n@@ -111,8 +113,10 @@\n   />\r\n ))\r\n ToastDescription.displayName = ToastPrimitives.Description.displayName\r\n \r\n+type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\r\n+\r\n type ToastActionElement = React.ReactElement<typeof ToastAction>\r\n \r\n const TOAST_LIMIT = 1\r\n const TOAST_REMOVE_DELAY = 5000\r\n"
                },
                {
                    "date": 1739447336098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,16 +113,16 @@\n   />\r\n ))\r\n ToastDescription.displayName = ToastPrimitives.Description.displayName\r\n \r\n-type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\r\n+type ToastRootProps = React.ComponentPropsWithoutRef<typeof Toast>\r\n \r\n type ToastActionElement = React.ReactElement<typeof ToastAction>\r\n \r\n const TOAST_LIMIT = 1\r\n const TOAST_REMOVE_DELAY = 5000\r\n \r\n-type ToasterToast = ToastProps & {\r\n+type ToasterToast = ToastRootProps & {\r\n   id: string\r\n   title?: string | React.ReactNode\r\n   description?: string\r\n   variant?: 'default' | 'destructive' | 'warning'\r\n@@ -307,9 +307,9 @@\n   }\r\n }\r\n \r\n export {\r\n-  type ToastProps,\r\n+  type ToastRootProps as ToastProps,\r\n   type ToastActionElement,\r\n   ToastProvider,\r\n   ToastViewport,\r\n   Toast,\r\n"
                },
                {
                    "date": 1739447783953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,320 +1,316 @@\n-\"use client\"\r\n-\r\n-import * as React from \"react\"\r\n-import * as ToastPrimitives from \"@radix-ui/react-toast\"\r\n-import { cva, type VariantProps } from \"class-variance-authority\"\r\n-import { X } from \"lucide-react\"\r\n-import { cn } from \"@/lib/utils\"\r\n-import { ToastProps } from \"@radix-ui/react-toast\"\r\n-\r\n-const ToastProvider = ToastPrimitives.Provider\r\n-\r\n-const ToastViewport = React.forwardRef<\r\n-  React.ElementRef<typeof ToastPrimitives.Viewport>,\r\n-  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\r\n->(({ className, ...props }, ref) => (\r\n-  <ToastPrimitives.Viewport\r\n-    ref={ref}\r\n-    className={cn(\r\n-      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\r\n-      className\r\n-    )}\r\n-    {...props}\r\n-  />\r\n-))\r\n-ToastViewport.displayName = ToastPrimitives.Viewport.displayName\r\n-\r\n-const toastVariants = cva(\r\n-  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\r\n-  {\r\n-    variants: {\r\n-      variant: {\r\n-        default: \"border bg-background text-foreground\",\r\n-        destructive:\r\n-          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\r\n-        warning:\r\n-          \"warning group border-warning bg-warning text-warning-foreground\",\r\n-      },\r\n-    },\r\n-    defaultVariants: {\r\n-      variant: \"default\",\r\n-    },\r\n-  }\r\n-)\r\n-\r\n-const Toast = React.forwardRef<\r\n-  React.ElementRef<typeof ToastPrimitives.Root>,\r\n-  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\r\n-    VariantProps<typeof toastVariants>\r\n->(({ className, variant, ...props }, ref) => {\r\n-  return (\r\n-    <ToastPrimitives.Root\r\n-      ref={ref}\r\n-      className={cn(toastVariants({ variant }), className)}\r\n-      {...props}\r\n-    />\r\n-  )\r\n-})\r\n-Toast.displayName = ToastPrimitives.Root.displayName\r\n-\r\n-const ToastAction = React.forwardRef<\r\n-  React.ElementRef<typeof ToastPrimitives.Action>,\r\n-  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\r\n->(({ className, ...props }, ref) => (\r\n-  <ToastPrimitives.Action\r\n-    ref={ref}\r\n-    className={cn(\r\n-      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\r\n-      className\r\n-    )}\r\n-    {...props}\r\n-  />\r\n-))\r\n-ToastAction.displayName = ToastPrimitives.Action.displayName\r\n-\r\n-const ToastClose = React.forwardRef<\r\n-  React.ElementRef<typeof ToastPrimitives.Close>,\r\n-  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\r\n->(({ className, ...props }, ref) => (\r\n-  <ToastPrimitives.Close\r\n-    ref={ref}\r\n-    className={cn(\r\n-      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\r\n-      className\r\n-    )}\r\n-    toast-close=\"\"\r\n-    {...props}\r\n-  >\r\n-    <X className=\"h-4 w-4\" />\r\n-  </ToastPrimitives.Close>\r\n-))\r\n-ToastClose.displayName = ToastPrimitives.Close.displayName\r\n-\r\n-const ToastTitle = React.forwardRef<\r\n-  React.ElementRef<typeof ToastPrimitives.Title>,\r\n-  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\r\n->(({ className, ...props }, ref) => (\r\n-  <ToastPrimitives.Title\r\n-    ref={ref}\r\n-    className={cn(\"text-sm font-semibold\", className)}\r\n-    {...props}\r\n-  />\r\n-))\r\n-ToastTitle.displayName = ToastPrimitives.Title.displayName\r\n-\r\n-const ToastDescription = React.forwardRef<\r\n-  React.ElementRef<typeof ToastPrimitives.Description>,\r\n-  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\r\n->(({ className, ...props }, ref) => (\r\n-  <ToastPrimitives.Description\r\n-    ref={ref}\r\n-    className={cn(\"text-sm opacity-90\", className)}\r\n-    {...props}\r\n-  />\r\n-))\r\n-ToastDescription.displayName = ToastPrimitives.Description.displayName\r\n-\r\n-type ToastRootProps = React.ComponentPropsWithoutRef<typeof Toast>\r\n-\r\n-type ToastActionElement = React.ReactElement<typeof ToastAction>\r\n-\r\n-const TOAST_LIMIT = 1\r\n-const TOAST_REMOVE_DELAY = 5000\r\n-\r\n-type ToasterToast = ToastRootProps & {\r\n-  id: string\r\n-  title?: string | React.ReactNode\r\n-  description?: string\r\n-  variant?: 'default' | 'destructive' | 'warning'\r\n-  action?: ToastActionElement\r\n-  open?: boolean\r\n-}\r\n-\r\n-const actionTypes = {\r\n-  ADD_TOAST: \"ADD_TOAST\",\r\n-  UPDATE_TOAST: \"UPDATE_TOAST\",\r\n-  DISMISS_TOAST: \"DISMISS_TOAST\",\r\n-  REMOVE_TOAST: \"REMOVE_TOAST\",\r\n-} as const\r\n-\r\n-let count = 0\r\n-\r\n-function genId() {\r\n-  count = (count + 1) % Number.MAX_VALUE\r\n-  return count.toString()\r\n-}\r\n-\r\n-type ActionType = typeof actionTypes\r\n-\r\n-type Action =\r\n-  | {\r\n-      type: ActionType[\"ADD_TOAST\"]\r\n-      toast: ToasterToast\r\n-    }\r\n-  | {\r\n-      type: ActionType[\"UPDATE_TOAST\"]\r\n-      toast: Partial<ToasterToast>\r\n-    }\r\n-  | {\r\n-      type: ActionType[\"DISMISS_TOAST\"]\r\n-      toastId?: ToasterToast[\"id\"]\r\n-    }\r\n-  | {\r\n-      type: ActionType[\"REMOVE_TOAST\"]\r\n-      toastId?: ToasterToast[\"id\"]\r\n-    }\r\n-\r\n-interface State {\r\n-  toasts: ToasterToast[]\r\n-}\r\n-\r\n-const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\r\n-\r\n-const addToRemoveQueue = (toastId: string) => {\r\n-  if (toastTimeouts.has(toastId)) {\r\n-    return\r\n-  }\r\n-\r\n-  const timeout = setTimeout(() => {\r\n-    toastTimeouts.delete(toastId)\r\n-    dispatch({\r\n-      type: \"REMOVE_TOAST\",\r\n-      toastId: toastId,\r\n-    })\r\n-  }, TOAST_REMOVE_DELAY)\r\n-\r\n-  toastTimeouts.set(toastId, timeout)\r\n-}\r\n-\r\n-export const reducer = (state: State, action: Action): State => {\r\n-  switch (action.type) {\r\n-    case \"ADD_TOAST\":\r\n-      return {\r\n-        ...state,\r\n-        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\r\n-      }\r\n-\r\n-    case \"UPDATE_TOAST\":\r\n-      return {\r\n-        ...state,\r\n-        toasts: state.toasts.map((t) =>\r\n-          t.id === action.toast.id ? { ...t, ...action.toast } : t\r\n-        ),\r\n-      }\r\n-\r\n-    case \"DISMISS_TOAST\": {\r\n-      const { toastId } = action\r\n-\r\n-      if (toastId) {\r\n-        addToRemoveQueue(toastId)\r\n-      } else {\r\n-        state.toasts.forEach((toast) => {\r\n-          addToRemoveQueue(toast.id)\r\n-        })\r\n-      }\r\n-\r\n-      return {\r\n-        ...state,\r\n-        toasts: state.toasts.map((t) =>\r\n-          t.id === toastId || toastId === undefined\r\n-            ? {\r\n-                ...t,\r\n-                open: false,\r\n-              }\r\n-            : t\r\n-        ),\r\n-      }\r\n-    }\r\n-\r\n-    case \"REMOVE_TOAST\":\r\n-      if (action.toastId === undefined) {\r\n-        return {\r\n-          ...state,\r\n-          toasts: [],\r\n-        }\r\n-      }\r\n-      return {\r\n-        ...state,\r\n-        toasts: state.toasts.filter((t) => t.id !== action.toastId),\r\n-      }\r\n-  }\r\n-}\r\n-\r\n-const listeners: Array<(state: State) => void> = []\r\n-\r\n-let memoryState: State = { toasts: [] }\r\n-\r\n-function dispatch(action: Action) {\r\n-  memoryState = reducer(memoryState, action)\r\n-  listeners.forEach((listener) => {\r\n-    listener(memoryState)\r\n-  })\r\n-}\r\n-\r\n-export function toast({\r\n-  title,\r\n-  description,\r\n-  variant,\r\n-  action,\r\n-}: {\r\n-  title?: string\r\n-  description?: string\r\n-  variant?: \"default\" | \"destructive\" | \"warning\"\r\n-  action?: ToastActionElement\r\n-}) {\r\n-  const id = genId()\r\n-\r\n-  dispatch({\r\n-    type: \"ADD_TOAST\",\r\n-    toast: {\r\n-      id,\r\n-      title,\r\n-      description,\r\n-      variant,\r\n-      action,\r\n-      open: true,\r\n-    },\r\n-  })\r\n-\r\n-  return {\r\n-    id,\r\n-    dismiss: () => dispatch({ type: \"DISMISS_TOAST\", toastId: id }),\r\n-    update: (props: ToasterToast) =>\r\n-      dispatch({\r\n-        type: \"UPDATE_TOAST\",\r\n-        toast: { ...props, id },\r\n-      }),\r\n-  }\r\n-}\r\n-\r\n-export function useToast() {\r\n-  const [state, setState] = React.useState<State>(memoryState)\r\n-\r\n-  React.useEffect(() => {\r\n-    listeners.push(setState)\r\n-    return () => {\r\n-      const index = listeners.indexOf(setState)\r\n-      if (index > -1) {\r\n-        listeners.splice(index, 1)\r\n-      }\r\n-    }\r\n-  }, [state])\r\n-\r\n-  return {\r\n-    ...state,\r\n-    toast,\r\n-    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\r\n-  }\r\n-}\r\n-\r\n-export {\r\n-  type ToastRootProps as ToastProps,\r\n-  type ToastActionElement,\r\n-  ToastProvider,\r\n-  ToastViewport,\r\n-  Toast,\r\n-  ToastTitle,\r\n-  ToastDescription,\r\n-  ToastClose,\r\n-  ToastAction,\r\n+\"use client\"\n+\n+import * as React from \"react\"\n+import * as ToastPrimitives from \"@radix-ui/react-toast\"\n+import { cva, type VariantProps } from \"class-variance-authority\"\n+import { X } from \"lucide-react\"\n+import { cn } from \"@/lib/utils\"\n+import { ToastProps } from \"@radix-ui/react-toast\"\n+\n+const ToastProvider = ToastPrimitives.Provider\n+\n+const ToastViewport = React.forwardRef<\n+  React.ElementRef<typeof ToastPrimitives.Viewport>,\n+  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n+>(({ className, ...props }, ref) => (\n+  <ToastPrimitives.Viewport\n+    ref={ref}\n+    className={cn(\n+      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n+      className\n+    )}\n+    {...props}\n+  />\n+))\n+ToastViewport.displayName = ToastPrimitives.Viewport.displayName\n+\n+const toastVariants = cva(\n+  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n+  {\n+    variants: {\n+      variant: {\n+        default: \"border bg-background text-foreground\",\n+        destructive:\n+          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n+      },\n+    },\n+    defaultVariants: {\n+      variant: \"default\",\n+    },\n+  }\n+)\n+\n+const Toast = React.forwardRef<\n+  React.ElementRef<typeof ToastPrimitives.Root>,\n+  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n+    VariantProps<typeof toastVariants>\n+>(({ className, variant, ...props }, ref) => {\n+  return (\n+    <ToastPrimitives.Root\n+      ref={ref}\n+      className={cn(toastVariants({ variant }), className)}\n+      {...props}\n+    />\n+  )\n+})\n+Toast.displayName = ToastPrimitives.Root.displayName\n+\n+const ToastAction = React.forwardRef<\n+  React.ElementRef<typeof ToastPrimitives.Action>,\n+  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n+>(({ className, ...props }, ref) => (\n+  <ToastPrimitives.Action\n+    ref={ref}\n+    className={cn(\n+      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n+      className\n+    )}\n+    {...props}\n+  />\n+))\n+ToastAction.displayName = ToastPrimitives.Action.displayName\n+\n+const ToastClose = React.forwardRef<\n+  React.ElementRef<typeof ToastPrimitives.Close>,\n+  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n+>(({ className, ...props }, ref) => (\n+  <ToastPrimitives.Close\n+    ref={ref}\n+    className={cn(\n+      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n+      className\n+    )}\n+    toast-close=\"\"\n+    {...props}\n+  >\n+    <X className=\"h-4 w-4\" />\n+  </ToastPrimitives.Close>\n+))\n+ToastClose.displayName = ToastPrimitives.Close.displayName\n+\n+const ToastTitle = React.forwardRef<\n+  React.ElementRef<typeof ToastPrimitives.Title>,\n+  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n+>(({ className, ...props }, ref) => (\n+  <ToastPrimitives.Title\n+    ref={ref}\n+    className={cn(\"text-sm font-semibold\", className)}\n+    {...props}\n+  />\n+))\n+ToastTitle.displayName = ToastPrimitives.Title.displayName\n+\n+const ToastDescription = React.forwardRef<\n+  React.ElementRef<typeof ToastPrimitives.Description>,\n+  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n+>(({ className, ...props }, ref) => (\n+  <ToastPrimitives.Description\n+    ref={ref}\n+    className={cn(\"text-sm opacity-90\", className)}\n+    {...props}\n+  />\n+))\n+ToastDescription.displayName = ToastPrimitives.Description.displayName\n+\n+type ToastActionElement = React.ReactElement<typeof ToastAction>\n+\n+const TOAST_LIMIT = 1\n+const TOAST_REMOVE_DELAY = 5000\n+\n+type ToasterToast = ToastProps & {\n+  id: string\n+  title?: string | React.ReactNode\n+  description?: string\n+  variant?: 'default' | 'destructive' | 'warning'\n+  action?: ToastActionElement\n+  open?: boolean\n+}\n+\n+const actionTypes = {\n+  ADD_TOAST: \"ADD_TOAST\",\n+  UPDATE_TOAST: \"UPDATE_TOAST\",\n+  DISMISS_TOAST: \"DISMISS_TOAST\",\n+  REMOVE_TOAST: \"REMOVE_TOAST\",\n+} as const\n+\n+let count = 0\n+\n+function genId() {\n+  count = (count + 1) % Number.MAX_VALUE\n+  return count.toString()\n+}\n+\n+type ActionType = typeof actionTypes\n+\n+type Action =\n+  | {\n+      type: ActionType[\"ADD_TOAST\"]\n+      toast: ToasterToast\n+    }\n+  | {\n+      type: ActionType[\"UPDATE_TOAST\"]\n+      toast: Partial<ToasterToast>\n+    }\n+  | {\n+      type: ActionType[\"DISMISS_TOAST\"]\n+      toastId?: ToasterToast[\"id\"]\n+    }\n+  | {\n+      type: ActionType[\"REMOVE_TOAST\"]\n+      toastId?: ToasterToast[\"id\"]\n+    }\n+\n+interface State {\n+  toasts: ToasterToast[]\n+}\n+\n+const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n+\n+const addToRemoveQueue = (toastId: string) => {\n+  if (toastTimeouts.has(toastId)) {\n+    return\n+  }\n+\n+  const timeout = setTimeout(() => {\n+    toastTimeouts.delete(toastId)\n+    dispatch({\n+      type: \"REMOVE_TOAST\",\n+      toastId: toastId,\n+    })\n+  }, TOAST_REMOVE_DELAY)\n+\n+  toastTimeouts.set(toastId, timeout)\n+}\n+\n+export const reducer = (state: State, action: Action): State => {\n+  switch (action.type) {\n+    case \"ADD_TOAST\":\n+      return {\n+        ...state,\n+        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n+      }\n+\n+    case \"UPDATE_TOAST\":\n+      return {\n+        ...state,\n+        toasts: state.toasts.map((t) =>\n+          t.id === action.toast.id ? { ...t, ...action.toast } : t\n+        ),\n+      }\n+\n+    case \"DISMISS_TOAST\": {\n+      const { toastId } = action\n+\n+      if (toastId) {\n+        addToRemoveQueue(toastId)\n+      } else {\n+        state.toasts.forEach((toast) => {\n+          addToRemoveQueue(toast.id)\n+        })\n+      }\n+\n+      return {\n+        ...state,\n+        toasts: state.toasts.map((t) =>\n+          t.id === toastId || toastId === undefined\n+            ? {\n+                ...t,\n+                open: false,\n+              }\n+            : t\n+        ),\n+      }\n+    }\n+\n+    case \"REMOVE_TOAST\":\n+      if (action.toastId === undefined) {\n+        return {\n+          ...state,\n+          toasts: [],\n+        }\n+      }\n+      return {\n+        ...state,\n+        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n+      }\n+  }\n+}\n+\n+const listeners: Array<(state: State) => void> = []\n+\n+let memoryState: State = { toasts: [] }\n+\n+function dispatch(action: Action) {\n+  memoryState = reducer(memoryState, action)\n+  listeners.forEach((listener) => {\n+    listener(memoryState)\n+  })\n+}\n+\n+export function toast({\n+  title,\n+  description,\n+  variant,\n+  action,\n+}: {\n+  title?: string\n+  description?: string\n+  variant?: \"default\" | \"destructive\" | \"warning\"\n+  action?: ToastActionElement\n+}) {\n+  const id = genId()\n+\n+  dispatch({\n+    type: \"ADD_TOAST\",\n+    toast: {\n+      id,\n+      title,\n+      description,\n+      variant,\n+      action,\n+      open: true,\n+    },\n+  })\n+\n+  return {\n+    id,\n+    dismiss: () => dispatch({ type: \"DISMISS_TOAST\", toastId: id }),\n+    update: (props: ToasterToast) =>\n+      dispatch({\n+        type: \"UPDATE_TOAST\",\n+        toast: { ...props, id },\n+      }),\n+  }\n+}\n+\n+export function useToast() {\n+  const [state, setState] = React.useState<State>(memoryState)\n+\n+  React.useEffect(() => {\n+    listeners.push(setState)\n+    return () => {\n+      const index = listeners.indexOf(setState)\n+      if (index > -1) {\n+        listeners.splice(index, 1)\n+      }\n+    }\n+  }, [state])\n+\n+  return {\n+    ...state,\n+    toast,\n+    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n+  }\n+}\n+\n+export {\n+  type ToastProps,\n+  type ToastActionElement,\n+  ToastProvider,\n+  ToastViewport,\n+  Toast,\n+  ToastTitle,\n+  ToastDescription,\n+  ToastClose,\n+  ToastAction,\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1739012009321,
            "name": "Commit-0",
            "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { toast as foxToast } from 'react-fox-toast'\r\nimport { cn } from \"@/lib/utils\"\r\n\r\n// Keep existing types for backward compatibility\r\nexport type {\r\n  ToastProps,\r\n  ToastActionElement,\r\n}\r\n\r\n// Maintain existing interface but use react-fox-toast internally\r\nexport const toast = {\r\n  success: (message: string, options?: any) => {\r\n    return foxToast.success(message, {\r\n      position: 'bottom-right',\r\n      ...options\r\n    })\r\n  },\r\n  error: (message: string, options?: any) => {\r\n    return foxToast.error(message, {\r\n      position: 'bottom-right',\r\n      ...options\r\n    })\r\n  },\r\n  info: (message: string, options?: any) => {\r\n    return foxToast.info(message, {\r\n      position: 'bottom-right',\r\n      ...options\r\n    })\r\n  },\r\n  warning: (message: string, options?: any) => {\r\n    return foxToast.warning(message, {\r\n      position: 'bottom-right',\r\n      ...options\r\n    })\r\n  },\r\n  custom: (jsx: React.ReactNode, options?: any) => {\r\n    return foxToast(jsx, {\r\n      position: 'bottom-right',\r\n      ...options\r\n    })\r\n  }\r\n}\r\n\r\n// Export a hook that maintains the same interface\r\nexport function useToast() {\r\n  return {\r\n    toast,\r\n    dismiss: foxToast.dismiss\r\n  }\r\n}\r\n\r\n// Re-export components that might still be used in the codebase\r\nexport {\r\n  ToastProvider,\r\n  ToastViewport,\r\n  Toast,\r\n  ToastTitle,\r\n  ToastDescription,\r\n  ToastClose,\r\n  ToastAction,\r\n} from 'react-fox-toast'"
        }
    ]
}