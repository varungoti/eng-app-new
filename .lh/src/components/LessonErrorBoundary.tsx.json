{
    "sourceFile": "src/components/LessonErrorBoundary.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1739215255839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739311330915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,10 @@\n import React from 'react';\r\n import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\n import { Button } from \"@/components/ui/button\";\r\n import { AlertTriangle } from 'lucide-react';\r\n+import { ErrorBoundary } from 'react-error-boundary';\r\n+import { createLogger } from '@/lib/logger';\r\n \r\n interface Props {\r\n   children: React.ReactNode;\r\n }\r\n@@ -11,58 +13,46 @@\n   hasError: boolean;\r\n   error: Error | null;\r\n }\r\n \r\n-class LessonErrorBoundary extends React.Component<Props, State> {\r\n-  constructor(props: Props) {\r\n-    super(props);\r\n-    this.state = { hasError: false, error: null };\r\n-  }\r\n+const logger = createLogger('LessonErrorBoundary');\r\n \r\n-  static getDerivedStateFromError(error: Error): State {\r\n-    return { hasError: true, error };\r\n-  }\r\n-\r\n-  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\r\n-    console.error('Lesson Error:', error, errorInfo);\r\n-  }\r\n-\r\n-  render() {\r\n-    if (this.state.hasError) {\r\n-      return (\r\n-        <div className=\"flex items-center justify-center min-h-screen p-4\">\r\n-          <Card className=\"max-w-lg w-full\">\r\n+export default function LessonErrorBoundary({ children }: { children: React.ReactNode }) {\r\n+  return (\r\n+    <ErrorBoundary\r\n+      FallbackComponent={({ error, resetErrorBoundary }) => (\r\n+        <div className=\"min-h-screen flex items-center justify-center\">\r\n+          <Card className=\"w-full max-w-md p-6\">\r\n             <CardHeader>\r\n-              <CardTitle className=\"flex items-center gap-2 text-destructive\">\r\n-                <AlertTriangle className=\"h-5 w-5\" />\r\n-                Error Loading Lesson\r\n-              </CardTitle>\r\n+              <CardTitle className=\"text-xl text-red-600\">Lesson Error</CardTitle>\r\n             </CardHeader>\r\n             <CardContent>\r\n-              <p className=\"text-sm text-muted-foreground mb-4\">\r\n-                {this.state.error?.message || 'An unexpected error occurred'}\r\n+              <p className=\"text-sm text-gray-600 mb-4\">\r\n+                {error.message || 'An error occurred while loading the lesson'}\r\n               </p>\r\n-              <div className=\"flex gap-4\">\r\n+              <div className=\"space-y-4\">\r\n                 <Button \r\n-                  variant=\"outline\" \r\n-                  onClick={() => window.location.reload()}\r\n+                  onClick={resetErrorBoundary}\r\n+                  className=\"w-full\"\r\n                 >\r\n                   Try Again\r\n                 </Button>\r\n                 <Button \r\n-                  variant=\"destructive\" \r\n-                  onClick={() => window.close()}\r\n+                  variant=\"outline\"\r\n+                  onClick={() => window.location.href = '/teacher/lessons'}\r\n+                  className=\"w-full\"\r\n                 >\r\n-                  Close Lesson\r\n+                  Return to Lessons\r\n                 </Button>\r\n               </div>\r\n             </CardContent>\r\n           </Card>\r\n         </div>\r\n-      );\r\n-    }\r\n-\r\n-    return this.props.children;\r\n-  }\r\n+      )}\r\n+      onError={(error) => {\r\n+        logger.error('Error boundary caught error', error);\r\n+      }}\r\n+    >\r\n+      {children}\r\n+    </ErrorBoundary>\r\n+  );\r\n }\r\n-\r\n-export default LessonErrorBoundary;\r\n"
                },
                {
                    "date": 1739311979097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\n import { Button } from \"@/components/ui/button\";\r\n import { AlertTriangle } from 'lucide-react';\r\n import { ErrorBoundary } from 'react-error-boundary';\r\n-import { createLogger } from '@/lib/logger';\r\n+import { createLogger } from '../lib/logger';\r\n \r\n interface Props {\r\n   children: React.ReactNode;\r\n }\r\n"
                },
                {
                    "date": 1739311990282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n           </Card>\r\n         </div>\r\n       )}\r\n       onError={(error) => {\r\n-        logger.error('Error boundary caught error', error);\r\n+        logger.error('Error boundary caught error', { error });\r\n       }}\r\n     >\r\n       {children}\r\n     </ErrorBoundary>\r\n"
                },
                {
                    "date": 1739312559065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,56 +2,72 @@\n import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\n import { Button } from \"@/components/ui/button\";\r\n import { AlertTriangle } from 'lucide-react';\r\n import { ErrorBoundary } from 'react-error-boundary';\r\n-import { createLogger } from '../lib/logger';\r\n+import { logger } from '@/lib/logger';\r\n \r\n-interface Props {\r\n-  children: React.ReactNode;\r\n-}\r\n+const logError = (error: Error, info: { componentStack: string }) => {\r\n+  logger.error('Lesson Error Boundary caught error', {\r\n+    error: {\r\n+      message: error.message,\r\n+      stack: error.stack,\r\n+      name: error.name\r\n+    },\r\n+    componentStack: info.componentStack,\r\n+    timestamp: new Date().toISOString()\r\n+  });\r\n+};\r\n \r\n-interface State {\r\n-  hasError: boolean;\r\n-  error: Error | null;\r\n-}\r\n-\r\n-const logger = createLogger('LessonErrorBoundary');\r\n-\r\n export default function LessonErrorBoundary({ children }: { children: React.ReactNode }) {\r\n   return (\r\n     <ErrorBoundary\r\n-      FallbackComponent={({ error, resetErrorBoundary }) => (\r\n-        <div className=\"min-h-screen flex items-center justify-center\">\r\n-          <Card className=\"w-full max-w-md p-6\">\r\n-            <CardHeader>\r\n-              <CardTitle className=\"text-xl text-red-600\">Lesson Error</CardTitle>\r\n-            </CardHeader>\r\n-            <CardContent>\r\n-              <p className=\"text-sm text-gray-600 mb-4\">\r\n-                {error.message || 'An error occurred while loading the lesson'}\r\n-              </p>\r\n-              <div className=\"space-y-4\">\r\n-                <Button \r\n-                  onClick={resetErrorBoundary}\r\n-                  className=\"w-full\"\r\n-                >\r\n-                  Try Again\r\n-                </Button>\r\n-                <Button \r\n-                  variant=\"outline\"\r\n-                  onClick={() => window.location.href = '/teacher/lessons'}\r\n-                  className=\"w-full\"\r\n-                >\r\n-                  Return to Lessons\r\n-                </Button>\r\n-              </div>\r\n-            </CardContent>\r\n-          </Card>\r\n-        </div>\r\n-      )}\r\n-      onError={(error) => {\r\n-        logger.error('Error boundary caught error', { error });\r\n+      FallbackComponent={({ error, resetErrorBoundary }) => {\r\n+        logger.info('Rendering error fallback component', {\r\n+          errorMessage: error.message,\r\n+          timestamp: new Date().toISOString()\r\n+        });\r\n+        \r\n+        return (\r\n+          <div className=\"min-h-screen flex items-center justify-center\">\r\n+            <Card className=\"w-full max-w-md p-6\">\r\n+              <CardHeader className=\"flex items-center gap-2\">\r\n+                <AlertTriangle className=\"h-6 w-6 text-red-600\" />\r\n+                <CardTitle className=\"text-xl text-red-600\">Lesson Error</CardTitle>\r\n+              </CardHeader>\r\n+              <CardContent>\r\n+                <p className=\"text-sm text-gray-600 mb-4\">\r\n+                  {error.message || 'An error occurred while loading the lesson'}\r\n+                </p>\r\n+                <div className=\"space-y-4\">\r\n+                  <Button \r\n+                    onClick={() => {\r\n+                      logger.info('User clicked retry button');\r\n+                      resetErrorBoundary();\r\n+                    }}\r\n+                    className=\"w-full\"\r\n+                  >\r\n+                    Try Again\r\n+                  </Button>\r\n+                  <Button \r\n+                    variant=\"outline\"\r\n+                    onClick={() => {\r\n+                      logger.info('User clicked return to lessons button');\r\n+                      window.location.href = '/teacher/lessons';\r\n+                    }}\r\n+                    className=\"w-full\"\r\n+                  >\r\n+                    Return to Lessons\r\n+                  </Button>\r\n+                </div>\r\n+              </CardContent>\r\n+            </Card>\r\n+          </div>\r\n+        );\r\n       }}\r\n+      onError={logError}\r\n+      onReset={() => {\r\n+        logger.info('Error boundary reset');\r\n+      }}\r\n     >\r\n       {children}\r\n     </ErrorBoundary>\r\n   );\r\n"
                },
                {
                    "date": 1739345742022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,30 +1,33 @@\n-import React from 'react';\r\n+import React, { type ErrorInfo } from 'react';\r\n import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\n import { Button } from \"@/components/ui/button\";\r\n import { AlertTriangle } from 'lucide-react';\r\n import { ErrorBoundary } from 'react-error-boundary';\r\n import { logger } from '@/lib/logger';\r\n \r\n-const logError = (error: Error, info: { componentStack: string }) => {\r\n+const logError = (error: Error, info: ErrorInfo) => {\r\n   logger.error('Lesson Error Boundary caught error', {\r\n     error: {\r\n       message: error.message,\r\n       stack: error.stack,\r\n       name: error.name\r\n     },\r\n-    componentStack: info.componentStack,\r\n-    timestamp: new Date().toISOString()\r\n+    info: {\r\n+      componentStack: info.componentStack || 'No component stack available'\r\n+    }\r\n   });\r\n };\r\n \r\n export default function LessonErrorBoundary({ children }: { children: React.ReactNode }) {\r\n   return (\r\n     <ErrorBoundary\r\n       FallbackComponent={({ error, resetErrorBoundary }) => {\r\n         logger.info('Rendering error fallback component', {\r\n-          errorMessage: error.message,\r\n-          timestamp: new Date().toISOString()\r\n+          error: {\r\n+            message: error.message,\r\n+            name: error.name\r\n+          }\r\n         });\r\n         \r\n         return (\r\n           <div className=\"min-h-screen flex items-center justify-center\">\r\n"
                },
                {
                    "date": 1739345871215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,11 +9,9 @@\n   logger.error('Lesson Error Boundary caught error', {\r\n     error: {\r\n       message: error.message,\r\n       stack: error.stack,\r\n-      name: error.name\r\n-    },\r\n-    info: {\r\n+      name: error.name,\r\n       componentStack: info.componentStack || 'No component stack available'\r\n     }\r\n   });\r\n };\r\n"
                },
                {
                    "date": 1739346598474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,75 +1,58 @@\n-import React, { type ErrorInfo } from 'react';\r\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\n-import { Button } from \"@/components/ui/button\";\r\n-import { AlertTriangle } from 'lucide-react';\r\n-import { ErrorBoundary } from 'react-error-boundary';\r\n-import { logger } from '@/lib/logger';\r\n-\r\n-const logError = (error: Error, info: ErrorInfo) => {\r\n-  logger.error('Lesson Error Boundary caught error', {\r\n-    error: {\r\n-      message: error.message,\r\n-      stack: error.stack,\r\n-      name: error.name,\r\n-      componentStack: info.componentStack || 'No component stack available'\r\n-    }\r\n-  });\r\n-};\r\n-\r\n-export default function LessonErrorBoundary({ children }: { children: React.ReactNode }) {\r\n-  return (\r\n-    <ErrorBoundary\r\n-      FallbackComponent={({ error, resetErrorBoundary }) => {\r\n-        logger.info('Rendering error fallback component', {\r\n-          error: {\r\n-            message: error.message,\r\n-            name: error.name\r\n-          }\r\n-        });\r\n-        \r\n-        return (\r\n-          <div className=\"min-h-screen flex items-center justify-center\">\r\n-            <Card className=\"w-full max-w-md p-6\">\r\n-              <CardHeader className=\"flex items-center gap-2\">\r\n-                <AlertTriangle className=\"h-6 w-6 text-red-600\" />\r\n-                <CardTitle className=\"text-xl text-red-600\">Lesson Error</CardTitle>\r\n-              </CardHeader>\r\n-              <CardContent>\r\n-                <p className=\"text-sm text-gray-600 mb-4\">\r\n-                  {error.message || 'An error occurred while loading the lesson'}\r\n-                </p>\r\n-                <div className=\"space-y-4\">\r\n-                  <Button \r\n-                    onClick={() => {\r\n-                      logger.info('User clicked retry button');\r\n-                      resetErrorBoundary();\r\n-                    }}\r\n-                    className=\"w-full\"\r\n-                  >\r\n-                    Try Again\r\n-                  </Button>\r\n-                  <Button \r\n-                    variant=\"outline\"\r\n-                    onClick={() => {\r\n-                      logger.info('User clicked return to lessons button');\r\n-                      window.location.href = '/teacher/lessons';\r\n-                    }}\r\n-                    className=\"w-full\"\r\n-                  >\r\n-                    Return to Lessons\r\n-                  </Button>\r\n-                </div>\r\n-              </CardContent>\r\n-            </Card>\r\n-          </div>\r\n-        );\r\n-      }}\r\n-      onError={logError}\r\n-      onReset={() => {\r\n-        logger.info('Error boundary reset');\r\n-      }}\r\n-    >\r\n-      {children}\r\n-    </ErrorBoundary>\r\n-  );\r\n-}\r\n+import React from 'react';\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n+import { Button } from \"@/components/ui/button\";\n+import { AlertTriangle } from 'lucide-react';\n+import { ErrorBoundary } from 'react-error-boundary';\n+import { createLogger } from '../lib/logger';\n+\n+interface Props {\n+  children: React.ReactNode;\n+}\n+\n+interface State {\n+  hasError: boolean;\n+  error: Error | null;\n+}\n+\n+const logger = createLogger('LessonErrorBoundary');\n+\n+export default function LessonErrorBoundary({ children }: { children: React.ReactNode }) {\n+  return (\n+    <ErrorBoundary\n+      FallbackComponent={({ error, resetErrorBoundary }) => (\n+        <div className=\"min-h-screen flex items-center justify-center\">\n+          <Card className=\"w-full max-w-md p-6\">\n+            <CardHeader>\n+              <CardTitle className=\"text-xl text-red-600\">Lesson Error</CardTitle>\n+            </CardHeader>\n+            <CardContent>\n+              <p className=\"text-sm text-gray-600 mb-4\">\n+                {error.message || 'An error occurred while loading the lesson'}\n+              </p>\n+              <div className=\"space-y-4\">\n+                <Button \n+                  onClick={resetErrorBoundary}\n+                  className=\"w-full\"\n+                >\n+                  Try Again\n+                </Button>\n+                <Button \n+                  variant=\"outline\"\n+                  onClick={() => window.location.href = '/teacher/lessons'}\n+                  className=\"w-full\"\n+                >\n+                  Return to Lessons\n+                </Button>\n+              </div>\n+            </CardContent>\n+          </Card>\n+        </div>\n+      )}\n+      onError={(error) => {\n+        logger.error('Error boundary caught error', { error });\n+      }}\n+    >\n+      {children}\n+    </ErrorBoundary>\n+  );\n+}\n"
                },
                {
                    "date": 1739348417434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,58 +1,190 @@\n+\"use client\";\n+\n import React from 'react';\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n-import { Button } from \"@/components/ui/button\";\n-import { AlertTriangle } from 'lucide-react';\n-import { ErrorBoundary } from 'react-error-boundary';\n-import { createLogger } from '../lib/logger';\n+import { Button } from '@/components/ui/button';\n+import { Card } from '@/components/ui/card';\n+import { AlertTriangle, RefreshCw } from 'lucide-react';\n+import { logger } from '@/lib/logger';\n \n interface Props {\n   children: React.ReactNode;\n }\n \n interface State {\n   hasError: boolean;\n   error: Error | null;\n+  errorInfo: React.ErrorInfo | null;\n+  retryCount: number;\n }\n \n-const logger = createLogger('LessonErrorBoundary');\n+export default class LessonErrorBoundary extends React.Component<Props, State> {\n+  constructor(props: Props) {\n+    super(props);\n+    this.state = {\n+      hasError: false,\n+      error: null,\n+      errorInfo: null,\n+      retryCount: 0\n+    };\n+  }\n \n-export default function LessonErrorBoundary({ children }: { children: React.ReactNode }) {\n-  return (\n-    <ErrorBoundary\n-      FallbackComponent={({ error, resetErrorBoundary }) => (\n-        <div className=\"min-h-screen flex items-center justify-center\">\n-          <Card className=\"w-full max-w-md p-6\">\n-            <CardHeader>\n-              <CardTitle className=\"text-xl text-red-600\">Lesson Error</CardTitle>\n-            </CardHeader>\n-            <CardContent>\n-              <p className=\"text-sm text-gray-600 mb-4\">\n-                {error.message || 'An error occurred while loading the lesson'}\n+  static getDerivedStateFromError(error: Error): Partial<State> {\n+    return { hasError: true, error };\n+  }\n+\n+  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n+    logger.error('Lesson component error caught', {\n+      source: 'LessonErrorBoundary',\n+      context: {\n+        error: {\n+          name: error.name,\n+          message: error.message,\n+          stack: error.stack\n+        },\n+        componentStack: errorInfo.componentStack,\n+        retryCount: this.state.retryCount\n+      }\n+    });\n+\n+    this.setState({\n+      error,\n+      errorInfo,\n+      retryCount: this.state.retryCount + 1\n+    });\n+\n+    // Store error state in sessionStorage for recovery\n+    try {\n+      sessionStorage.setItem('lesson_error_state', JSON.stringify({\n+        timestamp: new Date().toISOString(),\n+        error: {\n+          name: error.name,\n+          message: error.message\n+        },\n+        retryCount: this.state.retryCount\n+      }));\n+    } catch (err) {\n+      logger.warn('Failed to store error state', {\n+        source: 'LessonErrorBoundary',\n+        context: { error: err }\n+      });\n+    }\n+  }\n+\n+  handleRetry = () => {\n+    logger.info('Attempting to recover from error', {\n+      source: 'LessonErrorBoundary',\n+      context: { retryCount: this.state.retryCount }\n+    });\n+\n+    // Clear error state\n+    this.setState({\n+      hasError: false,\n+      error: null,\n+      errorInfo: null\n+    });\n+\n+    // Clear error state from storage\n+    try {\n+      sessionStorage.removeItem('lesson_error_state');\n+    } catch (err) {\n+      logger.warn('Failed to clear error state', {\n+        source: 'LessonErrorBoundary',\n+        context: { error: err }\n+      });\n+    }\n+\n+    // Attempt to reload the lesson content\n+    try {\n+      const iframe = document.querySelector('iframe');\n+      if (iframe) {\n+        iframe.src = iframe.src;\n+      }\n+    } catch (err) {\n+      logger.error('Failed to reload lesson content', {\n+        source: 'LessonErrorBoundary',\n+        context: { error: err }\n+      });\n+    }\n+  };\n+\n+  handleClose = () => {\n+    logger.info('Closing lesson after error', {\n+      source: 'LessonErrorBoundary'\n+    });\n+\n+    // Clean up error state\n+    try {\n+      sessionStorage.removeItem('lesson_error_state');\n+      sessionStorage.removeItem('lesson_dialog_state');\n+    } catch (err) {\n+      logger.warn('Failed to clean up error state', {\n+        source: 'LessonErrorBoundary',\n+        context: { error: err }\n+      });\n+    }\n+\n+    // Close the window or navigate back\n+    if (window.opener) {\n+      window.close();\n+    } else {\n+      window.history.back();\n+    }\n+  };\n+\n+  render() {\n+    if (this.state.hasError) {\n+      return (\n+        <div className=\"min-h-screen flex items-center justify-center p-4\">\n+          <Card className=\"max-w-lg w-full p-6\">\n+            <div className=\"flex flex-col items-center gap-4 text-center\">\n+              <AlertTriangle className=\"h-12 w-12 text-yellow-500\" />\n+              <h2 className=\"text-xl font-semibold\">Something went wrong</h2>\n+              <p className=\"text-sm text-gray-500\">\n+                {this.state.error?.message || 'An error occurred while loading the lesson.'}\n               </p>\n-              <div className=\"space-y-4\">\n-                <Button \n-                  onClick={resetErrorBoundary}\n-                  className=\"w-full\"\n-                >\n-                  Try Again\n-                </Button>\n-                <Button \n+              \n+              <div className=\"flex gap-4 mt-4\">\n+                {this.state.retryCount < 3 && (\n+                  <Button\n+                    onClick={this.handleRetry}\n+                    className=\"flex items-center gap-2\"\n+                  >\n+                    <RefreshCw className=\"h-4 w-4\" />\n+                    Try Again\n+                  </Button>\n+                )}\n+                <Button\n                   variant=\"outline\"\n-                  onClick={() => window.location.href = '/teacher/lessons'}\n-                  className=\"w-full\"\n+                  onClick={this.handleClose}\n                 >\n-                  Return to Lessons\n+                  Close Lesson\n                 </Button>\n               </div>\n-            </CardContent>\n+\n+              {this.state.retryCount >= 3 && (\n+                <p className=\"text-sm text-red-500 mt-4\">\n+                  Multiple retry attempts failed. Please try closing and reopening the lesson.\n+                </p>\n+              )}\n+\n+              {process.env.NODE_ENV === 'development' && (\n+                <details className=\"mt-4 text-left w-full\">\n+                  <summary className=\"cursor-pointer text-sm text-gray-500\">\n+                    Error Details\n+                  </summary>\n+                  <pre className=\"mt-2 p-4 bg-gray-100 rounded text-xs overflow-auto\">\n+                    {this.state.error?.stack}\n+                    {'\\n\\n'}\n+                    {this.state.errorInfo?.componentStack}\n+                  </pre>\n+                </details>\n+              )}\n+            </div>\n           </Card>\n         </div>\n-      )}\n-      onError={(error) => {\n-        logger.error('Error boundary caught error', { error });\n-      }}\n-    >\n-      {children}\n-    </ErrorBoundary>\n-  );\n+      );\n+    }\n+\n+    return this.props.children;\n+  }\n }\n"
                },
                {
                    "date": 1739348554413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,190 +1,58 @@\n-\"use client\";\n-\n import React from 'react';\n-import { Button } from '@/components/ui/button';\n-import { Card } from '@/components/ui/card';\n-import { AlertTriangle, RefreshCw } from 'lucide-react';\n-import { logger } from '@/lib/logger';\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n+import { Button } from \"@/components/ui/button\";\n+import { AlertTriangle } from 'lucide-react';\n+import { ErrorBoundary } from 'react-error-boundary';\n+import { createLogger } from '../lib/logger';\n \n interface Props {\n   children: React.ReactNode;\n }\n \n interface State {\n   hasError: boolean;\n   error: Error | null;\n-  errorInfo: React.ErrorInfo | null;\n-  retryCount: number;\n }\n \n-export default class LessonErrorBoundary extends React.Component<Props, State> {\n-  constructor(props: Props) {\n-    super(props);\n-    this.state = {\n-      hasError: false,\n-      error: null,\n-      errorInfo: null,\n-      retryCount: 0\n-    };\n-  }\n+const logger = createLogger('LessonErrorBoundary');\n \n-  static getDerivedStateFromError(error: Error): Partial<State> {\n-    return { hasError: true, error };\n-  }\n-\n-  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n-    logger.error('Lesson component error caught', {\n-      source: 'LessonErrorBoundary',\n-      context: {\n-        error: {\n-          name: error.name,\n-          message: error.message,\n-          stack: error.stack\n-        },\n-        componentStack: errorInfo.componentStack,\n-        retryCount: this.state.retryCount\n-      }\n-    });\n-\n-    this.setState({\n-      error,\n-      errorInfo,\n-      retryCount: this.state.retryCount + 1\n-    });\n-\n-    // Store error state in sessionStorage for recovery\n-    try {\n-      sessionStorage.setItem('lesson_error_state', JSON.stringify({\n-        timestamp: new Date().toISOString(),\n-        error: {\n-          name: error.name,\n-          message: error.message\n-        },\n-        retryCount: this.state.retryCount\n-      }));\n-    } catch (err) {\n-      logger.warn('Failed to store error state', {\n-        source: 'LessonErrorBoundary',\n-        context: { error: err }\n-      });\n-    }\n-  }\n-\n-  handleRetry = () => {\n-    logger.info('Attempting to recover from error', {\n-      source: 'LessonErrorBoundary',\n-      context: { retryCount: this.state.retryCount }\n-    });\n-\n-    // Clear error state\n-    this.setState({\n-      hasError: false,\n-      error: null,\n-      errorInfo: null\n-    });\n-\n-    // Clear error state from storage\n-    try {\n-      sessionStorage.removeItem('lesson_error_state');\n-    } catch (err) {\n-      logger.warn('Failed to clear error state', {\n-        source: 'LessonErrorBoundary',\n-        context: { error: err }\n-      });\n-    }\n-\n-    // Attempt to reload the lesson content\n-    try {\n-      const iframe = document.querySelector('iframe');\n-      if (iframe) {\n-        iframe.src = iframe.src;\n-      }\n-    } catch (err) {\n-      logger.error('Failed to reload lesson content', {\n-        source: 'LessonErrorBoundary',\n-        context: { error: err }\n-      });\n-    }\n-  };\n-\n-  handleClose = () => {\n-    logger.info('Closing lesson after error', {\n-      source: 'LessonErrorBoundary'\n-    });\n-\n-    // Clean up error state\n-    try {\n-      sessionStorage.removeItem('lesson_error_state');\n-      sessionStorage.removeItem('lesson_dialog_state');\n-    } catch (err) {\n-      logger.warn('Failed to clean up error state', {\n-        source: 'LessonErrorBoundary',\n-        context: { error: err }\n-      });\n-    }\n-\n-    // Close the window or navigate back\n-    if (window.opener) {\n-      window.close();\n-    } else {\n-      window.history.back();\n-    }\n-  };\n-\n-  render() {\n-    if (this.state.hasError) {\n-      return (\n-        <div className=\"min-h-screen flex items-center justify-center p-4\">\n-          <Card className=\"max-w-lg w-full p-6\">\n-            <div className=\"flex flex-col items-center gap-4 text-center\">\n-              <AlertTriangle className=\"h-12 w-12 text-yellow-500\" />\n-              <h2 className=\"text-xl font-semibold\">Something went wrong</h2>\n-              <p className=\"text-sm text-gray-500\">\n-                {this.state.error?.message || 'An error occurred while loading the lesson.'}\n+export default function LessonErrorBoundary({ children }: { children: React.ReactNode }) {\n+  return (\n+    <ErrorBoundary\n+      FallbackComponent={({ error, resetErrorBoundary }) => (\n+        <div className=\"min-h-screen flex items-center justify-center\">\n+          <Card className=\"w-full max-w-md p-6\">\n+            <CardHeader>\n+              <CardTitle className=\"text-xl text-red-600\">Lesson Error</CardTitle>\n+            </CardHeader>\n+            <CardContent>\n+              <p className=\"text-sm text-gray-600 mb-4\">\n+                {error.message || 'An error occurred while loading the lesson'}\n               </p>\n-              \n-              <div className=\"flex gap-4 mt-4\">\n-                {this.state.retryCount < 3 && (\n-                  <Button\n-                    onClick={this.handleRetry}\n-                    className=\"flex items-center gap-2\"\n-                  >\n-                    <RefreshCw className=\"h-4 w-4\" />\n-                    Try Again\n-                  </Button>\n-                )}\n-                <Button\n+              <div className=\"space-y-4\">\n+                <Button \n+                  onClick={resetErrorBoundary}\n+                  className=\"w-full\"\n+                >\n+                  Try Again\n+                </Button>\n+                <Button \n                   variant=\"outline\"\n-                  onClick={this.handleClose}\n+                  onClick={() => window.location.href = '/teacher/lessons'}\n+                  className=\"w-full\"\n                 >\n-                  Close Lesson\n+                  Return to Lessons\n                 </Button>\n               </div>\n-\n-              {this.state.retryCount >= 3 && (\n-                <p className=\"text-sm text-red-500 mt-4\">\n-                  Multiple retry attempts failed. Please try closing and reopening the lesson.\n-                </p>\n-              )}\n-\n-              {process.env.NODE_ENV === 'development' && (\n-                <details className=\"mt-4 text-left w-full\">\n-                  <summary className=\"cursor-pointer text-sm text-gray-500\">\n-                    Error Details\n-                  </summary>\n-                  <pre className=\"mt-2 p-4 bg-gray-100 rounded text-xs overflow-auto\">\n-                    {this.state.error?.stack}\n-                    {'\\n\\n'}\n-                    {this.state.errorInfo?.componentStack}\n-                  </pre>\n-                </details>\n-              )}\n-            </div>\n+            </CardContent>\n           </Card>\n         </div>\n-      );\n-    }\n-\n-    return this.props.children;\n-  }\n+      )}\n+      onError={(error) => {\n+        logger.error('Error boundary caught error', { error });\n+      }}\n+    >\n+      {children}\n+    </ErrorBoundary>\n+  );\n }\n"
                },
                {
                    "date": 1739348728377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,58 +1,174 @@\n+\"use client\";\n+\n import React from 'react';\n import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n import { Button } from \"@/components/ui/button\";\n-import { AlertTriangle } from 'lucide-react';\n-import { ErrorBoundary } from 'react-error-boundary';\n-import { createLogger } from '../lib/logger';\n+import { AlertTriangle, RefreshCw } from \"lucide-react\";\n+import { logger } from '@/lib/logger';\n \n+interface ErrorBoundaryState {\n+  hasError: boolean;\n+  error: Error | null;\n+  errorInfo: React.ErrorInfo | null;\n+  retryCount: number;\n+}\n+\n interface Props {\n   children: React.ReactNode;\n+  fallback?: React.ReactNode;\n+  onError?: (error: Error, errorInfo: React.ErrorInfo) => void;\n }\n \n-interface State {\n-  hasError: boolean;\n-  error: Error | null;\n-}\n+export default class LessonErrorBoundary extends React.Component<Props, ErrorBoundaryState> {\n+  constructor(props: Props) {\n+    super(props);\n+    this.state = {\n+      hasError: false,\n+      error: null,\n+      errorInfo: null,\n+      retryCount: 0\n+    };\n+  }\n \n-const logger = createLogger('LessonErrorBoundary');\n+  static getDerivedStateFromError(error: Error): Partial<ErrorBoundaryState> {\n+    return { hasError: true, error };\n+  }\n \n-export default function LessonErrorBoundary({ children }: { children: React.ReactNode }) {\n-  return (\n-    <ErrorBoundary\n-      FallbackComponent={({ error, resetErrorBoundary }) => (\n-        <div className=\"min-h-screen flex items-center justify-center\">\n-          <Card className=\"w-full max-w-md p-6\">\n+  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n+    // Log the error\n+    logger.error('Lesson component error caught', {\n+      source: 'LessonErrorBoundary',\n+      context: {\n+        error: error.message,\n+        stack: error.stack,\n+        componentStack: errorInfo.componentStack,\n+        retryCount: this.state.retryCount\n+      }\n+    });\n+\n+    this.setState(prevState => ({\n+      error,\n+      errorInfo,\n+      retryCount: prevState.retryCount + 1\n+    }));\n+\n+    // Call the onError prop if provided\n+    if (this.props.onError) {\n+      this.props.onError(error, errorInfo);\n+    }\n+\n+    // Store error state in sessionStorage for recovery\n+    try {\n+      sessionStorage.setItem('lesson_error_state', JSON.stringify({\n+        error: error.message,\n+        timestamp: new Date().toISOString(),\n+        retryCount: this.state.retryCount\n+      }));\n+    } catch (err) {\n+      logger.warn('Failed to store error state', {\n+        source: 'LessonErrorBoundary',\n+        context: { error: err }\n+      });\n+    }\n+  }\n+\n+  handleRetry = () => {\n+    logger.info('Attempting to recover from error', {\n+      source: 'LessonErrorBoundary',\n+      context: { retryCount: this.state.retryCount }\n+    });\n+\n+    // Clear error state\n+    this.setState({\n+      hasError: false,\n+      error: null,\n+      errorInfo: null\n+    });\n+\n+    // Clear stored error state\n+    sessionStorage.removeItem('lesson_error_state');\n+\n+    // Attempt to reload the lesson content without refreshing the page\n+    const iframe = document.querySelector('iframe');\n+    if (iframe) {\n+      const src = iframe.src;\n+      iframe.src = 'about:blank';\n+      setTimeout(() => {\n+        iframe.src = src;\n+      }, 100);\n+    }\n+  };\n+\n+  handleClose = () => {\n+    logger.info('Closing lesson after error', {\n+      source: 'LessonErrorBoundary'\n+    });\n+\n+    // Clear error states\n+    sessionStorage.removeItem('lesson_error_state');\n+    localStorage.removeItem('lesson_state');\n+\n+    // Close the window if in a popup\n+    if (window.opener) {\n+      window.close();\n+    } else {\n+      // Navigate back if not in a popup\n+      window.history.back();\n+    }\n+  };\n+\n+  render() {\n+    if (this.state.hasError) {\n+      if (this.props.fallback) {\n+        return this.props.fallback;\n+      }\n+\n+      return (\n+        <div className=\"flex items-center justify-center min-h-screen bg-background\">\n+          <Card className=\"w-[400px]\">\n             <CardHeader>\n-              <CardTitle className=\"text-xl text-red-600\">Lesson Error</CardTitle>\n+              <CardTitle className=\"flex items-center gap-2 text-destructive\">\n+                <AlertTriangle className=\"h-5 w-5\" />\n+                Error Loading Lesson\n+              </CardTitle>\n             </CardHeader>\n             <CardContent>\n-              <p className=\"text-sm text-gray-600 mb-4\">\n-                {error.message || 'An error occurred while loading the lesson'}\n-              </p>\n               <div className=\"space-y-4\">\n+                <p className=\"text-sm text-muted-foreground\">\n+                  {this.state.error?.message || 'An unexpected error occurred while loading the lesson.'}\n+                </p>\n+                \n+                {this.state.retryCount < 3 && (\n+                  <Button \n+                    onClick={this.handleRetry}\n+                    className=\"w-full\"\n+                    variant=\"outline\"\n+                  >\n+                    <RefreshCw className=\"h-4 w-4 mr-2\" />\n+                    Retry Loading\n+                  </Button>\n+                )}\n+\n                 <Button \n-                  onClick={resetErrorBoundary}\n+                  onClick={this.handleClose}\n                   className=\"w-full\"\n+                  variant={this.state.retryCount >= 3 ? 'default' : 'secondary'}\n                 >\n-                  Try Again\n+                  Close Lesson\n                 </Button>\n-                <Button \n-                  variant=\"outline\"\n-                  onClick={() => window.location.href = '/teacher/lessons'}\n-                  className=\"w-full\"\n-                >\n-                  Return to Lessons\n-                </Button>\n+\n+                {this.state.retryCount >= 3 && (\n+                  <p className=\"text-xs text-muted-foreground text-center\">\n+                    Multiple retry attempts failed. Please try again later.\n+                  </p>\n+                )}\n               </div>\n             </CardContent>\n           </Card>\n         </div>\n-      )}\n-      onError={(error) => {\n-        logger.error('Error boundary caught error', { error });\n-      }}\n-    >\n-      {children}\n-    </ErrorBoundary>\n-  );\n+      );\n+    }\n+\n+    return this.props.children;\n+  }\n }\n"
                },
                {
                    "date": 1739348859493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,26 +1,25 @@\n \"use client\";\n \n import React from 'react';\n+import { AlertTriangle, RefreshCw } from \"lucide-react\";\n+import { Button } from \"@/components/ui/button\";\n import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n-import { Button } from \"@/components/ui/button\";\n-import { AlertTriangle, RefreshCw } from \"lucide-react\";\n import { logger } from '@/lib/logger';\n \n-interface ErrorBoundaryState {\n+interface Props {\n+  children: React.ReactNode;\n+  onError?: (error: Error, errorInfo: React.ErrorInfo) => void;\n+}\n+\n+interface State {\n   hasError: boolean;\n   error: Error | null;\n   errorInfo: React.ErrorInfo | null;\n   retryCount: number;\n }\n \n-interface Props {\n-  children: React.ReactNode;\n-  fallback?: React.ReactNode;\n-  onError?: (error: Error, errorInfo: React.ErrorInfo) => void;\n-}\n-\n-export default class LessonErrorBoundary extends React.Component<Props, ErrorBoundaryState> {\n+export default class LessonErrorBoundary extends React.Component<Props, State> {\n   constructor(props: Props) {\n     super(props);\n     this.state = {\n       hasError: false,\n@@ -29,14 +28,13 @@\n       retryCount: 0\n     };\n   }\n \n-  static getDerivedStateFromError(error: Error): Partial<ErrorBoundaryState> {\n+  static getDerivedStateFromError(error: Error): Partial<State> {\n     return { hasError: true, error };\n   }\n \n   componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n-    // Log the error\n     logger.error('Lesson component error caught', {\n       source: 'LessonErrorBoundary',\n       context: {\n         error: error.message,\n@@ -51,9 +49,8 @@\n       errorInfo,\n       retryCount: prevState.retryCount + 1\n     }));\n \n-    // Call the onError prop if provided\n     if (this.props.onError) {\n       this.props.onError(error, errorInfo);\n     }\n \n@@ -107,23 +104,14 @@\n     // Clear error states\n     sessionStorage.removeItem('lesson_error_state');\n     localStorage.removeItem('lesson_state');\n \n-    // Close the window if in a popup\n-    if (window.opener) {\n-      window.close();\n-    } else {\n-      // Navigate back if not in a popup\n-      window.history.back();\n-    }\n+    // Navigate back\n+    window.history.back();\n   };\n \n   render() {\n     if (this.state.hasError) {\n-      if (this.props.fallback) {\n-        return this.props.fallback;\n-      }\n-\n       return (\n         <div className=\"flex items-center justify-center min-h-screen bg-background\">\n           <Card className=\"w-[400px]\">\n             <CardHeader>\n"
                },
                {
                    "date": 1739348881192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,15 @@\n   errorInfo: React.ErrorInfo | null;\n   retryCount: number;\n }\n \n+interface ErrorContext {\n+  error: string;\n+  stack?: string;\n+  componentStack: string;\n+  retryCount: number;\n+}\n+\n export default class LessonErrorBoundary extends React.Component<Props, State> {\n   constructor(props: Props) {\n     super(props);\n     this.state = {\n@@ -33,16 +40,18 @@\n     return { hasError: true, error };\n   }\n \n   componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n+    const errorContext: ErrorContext = {\n+      error: error.message,\n+      stack: error.stack,\n+      componentStack: errorInfo.componentStack,\n+      retryCount: this.state.retryCount\n+    };\n+\n     logger.error('Lesson component error caught', {\n       source: 'LessonErrorBoundary',\n-      context: {\n-        error: error.message,\n-        stack: error.stack,\n-        componentStack: errorInfo.componentStack,\n-        retryCount: this.state.retryCount\n-      }\n+      context: errorContext\n     });\n \n     this.setState(prevState => ({\n       error,\n@@ -63,9 +72,9 @@\n       }));\n     } catch (err) {\n       logger.warn('Failed to store error state', {\n         source: 'LessonErrorBoundary',\n-        context: { error: err }\n+        context: { error: err instanceof Error ? err.message : 'Unknown error' }\n       });\n     }\n   }\n \n"
                },
                {
                    "date": 1739348941156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,13 +19,18 @@\n }\n \n interface ErrorContext {\n   error: string;\n-  stack?: string;\n+  stack: string;\n   componentStack: string;\n   retryCount: number;\n }\n \n+interface RetryContext {\n+  retryAttempt: number;\n+  timestamp: string;\n+}\n+\n export default class LessonErrorBoundary extends React.Component<Props, State> {\n   constructor(props: Props) {\n     super(props);\n     this.state = {\n@@ -42,9 +47,9 @@\n \n   componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n     const errorContext: ErrorContext = {\n       error: error.message,\n-      stack: error.stack,\n+      stack: error.stack || 'No stack trace available',\n       componentStack: errorInfo.componentStack,\n       retryCount: this.state.retryCount\n     };\n \n@@ -78,11 +83,16 @@\n     }\n   }\n \n   handleRetry = () => {\n+    const retryContext: RetryContext = {\n+      retryAttempt: this.state.retryCount + 1,\n+      timestamp: new Date().toISOString()\n+    };\n+\n     logger.info('Attempting to recover from error', {\n       source: 'LessonErrorBoundary',\n-      context: { retryCount: this.state.retryCount }\n+      context: retryContext\n     });\n \n     // Clear error state\n     this.setState({\n"
                },
                {
                    "date": 1739349489744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,16 +17,18 @@\n   errorInfo: React.ErrorInfo | null;\n   retryCount: number;\n }\n \n-interface ErrorContext {\n+interface ErrorLogContext {\n+  [key: string]: unknown;\n   error: string;\n   stack: string;\n   componentStack: string;\n   retryCount: number;\n }\n \n-interface RetryContext {\n+interface RetryLogContext {\n+  [key: string]: unknown;\n   retryAttempt: number;\n   timestamp: string;\n }\n \n@@ -45,13 +47,15 @@\n     return { hasError: true, error };\n   }\n \n   componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n-    const errorContext: ErrorContext = {\n+    const errorContext: ErrorLogContext = {\n       error: error.message,\n       stack: error.stack || 'No stack trace available',\n       componentStack: errorInfo.componentStack,\n-      retryCount: this.state.retryCount\n+      retryCount: this.state.retryCount,\n+      severity: 'error',\n+      timestamp: new Date().toISOString()\n     };\n \n     logger.error('Lesson component error caught', {\n       source: 'LessonErrorBoundary',\n@@ -83,9 +87,9 @@\n     }\n   }\n \n   handleRetry = () => {\n-    const retryContext: RetryContext = {\n+    const retryContext: RetryLogContext = {\n       retryAttempt: this.state.retryCount + 1,\n       timestamp: new Date().toISOString()\n     };\n \n@@ -116,9 +120,10 @@\n   };\n \n   handleClose = () => {\n     logger.info('Closing lesson after error', {\n-      source: 'LessonErrorBoundary'\n+      source: 'LessonErrorBoundary',\n+      context: { timestamp: new Date().toISOString() }\n     });\n \n     // Clear error states\n     sessionStorage.removeItem('lesson_error_state');\n"
                },
                {
                    "date": 1739349939368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,10 @@\n   error: string;\n   stack: string;\n   componentStack: string;\n   retryCount: number;\n+  severity: 'error' | 'warning' | 'info';\n+  timestamp: string;\n }\n \n interface RetryLogContext {\n   [key: string]: unknown;\n@@ -47,12 +49,14 @@\n     return { hasError: true, error };\n   }\n \n   componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n+    const errorStack = error.stack || 'No stack trace available';\n+    \n     const errorContext: ErrorLogContext = {\n       error: error.message,\n-      stack: error.stack || 'No stack trace available',\n-      componentStack: errorInfo.componentStack,\n+      stack: errorStack,\n+      componentStack: errorInfo.componentStack || 'No component stack available',\n       retryCount: this.state.retryCount,\n       severity: 'error',\n       timestamp: new Date().toISOString()\n     };\n"
                }
            ],
            "date": 1739215255839,
            "name": "Commit-0",
            "content": "import React from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { AlertTriangle } from 'lucide-react';\r\n\r\ninterface Props {\r\n  children: React.ReactNode;\r\n}\r\n\r\ninterface State {\r\n  hasError: boolean;\r\n  error: Error | null;\r\n}\r\n\r\nclass LessonErrorBoundary extends React.Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = { hasError: false, error: null };\r\n  }\r\n\r\n  static getDerivedStateFromError(error: Error): State {\r\n    return { hasError: true, error };\r\n  }\r\n\r\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\r\n    console.error('Lesson Error:', error, errorInfo);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return (\r\n        <div className=\"flex items-center justify-center min-h-screen p-4\">\r\n          <Card className=\"max-w-lg w-full\">\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2 text-destructive\">\r\n                <AlertTriangle className=\"h-5 w-5\" />\r\n                Error Loading Lesson\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <p className=\"text-sm text-muted-foreground mb-4\">\r\n                {this.state.error?.message || 'An unexpected error occurred'}\r\n              </p>\r\n              <div className=\"flex gap-4\">\r\n                <Button \r\n                  variant=\"outline\" \r\n                  onClick={() => window.location.reload()}\r\n                >\r\n                  Try Again\r\n                </Button>\r\n                <Button \r\n                  variant=\"destructive\" \r\n                  onClick={() => window.close()}\r\n                >\r\n                  Close Lesson\r\n                </Button>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default LessonErrorBoundary;\r\n"
        }
    ]
}