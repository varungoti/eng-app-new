{
    "sourceFile": "src/components/forms/grade-form.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1740765856671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740765861943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n \"use client\";\r\n \r\n-import { useForm } from \"@//hooks/use-form\";\r\n+import { useForm } from \"@/hooks/useForm\";\r\n import { gradeSchema } from \"@/lib/validations/lesson\";\r\n import { Button } from \"@/components/ui/button\";\r\n import { Input } from \"@/components/ui/input\";\r\n import { Textarea } from \"@/components/ui/textarea\";\r\n"
                },
                {
                    "date": 1740765880634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n \"use client\";\r\n \r\n-import { useForm } from \"@/hooks/useForm\";\r\n+import { useForm } from \"react-hook-form\";\r\n import { gradeSchema } from \"@/lib/validations/lesson\";\r\n import { Button } from \"@/components/ui/button\";\r\n import { Input } from \"@/components/ui/input\";\r\n import { Textarea } from \"@/components/ui/textarea\";\r\n"
                },
                {
                    "date": 1740765886146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n \"use client\";\r\n \r\n import { useForm } from \"react-hook-form\";\r\n-import { gradeSchema } from \"@/lib/validations/lesson\";\r\n+import { gradeSchema } from \"@/lib/validations/grade\";\r\n import { Button } from \"@/components/ui/button\";\r\n import { Input } from \"@/components/ui/input\";\r\n import { Textarea } from \"@/components/ui/textarea\";\r\n import { toast } from \"sonner\";\r\n"
                },
                {
                    "date": 1740765891652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n \"use client\";\r\n \r\n import { useForm } from \"react-hook-form\";\r\n-import { gradeSchema } from \"@/lib/validations/grade\";\r\n+import { gradeSchema } from \"./lib/validations/grade\";\r\n import { Button } from \"@/components/ui/button\";\r\n import { Input } from \"@/components/ui/input\";\r\n import { Textarea } from \"@/components/ui/textarea\";\r\n import { toast } from \"sonner\";\r\n"
                },
                {
                    "date": 1740765898690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n \"use client\";\r\n \r\n import { useForm } from \"react-hook-form\";\r\n-import { gradeSchema } from \"./lib/validations/grade\";\r\n+import { gradeSchema } from \"..//lib/validations/grade\";\r\n import { Button } from \"@/components/ui/button\";\r\n import { Input } from \"@/components/ui/input\";\r\n import { Textarea } from \"@/components/ui/textarea\";\r\n import { toast } from \"sonner\";\r\n"
                },
                {
                    "date": 1740765905681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n \"use client\";\r\n \r\n import { useForm } from \"react-hook-form\";\r\n-import { gradeSchema } from \"..//lib/validations/grade\";\r\n+import { gradeSchema } from \"./lib/validations/grade\";\r\n import { Button } from \"@/components/ui/button\";\r\n import { Input } from \"@/components/ui/input\";\r\n import { Textarea } from \"@/components/ui/textarea\";\r\n import { toast } from \"sonner\";\r\n"
                },
                {
                    "date": 1740765917868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n \"use client\";\r\n \r\n import { useForm } from \"react-hook-form\";\r\n-import { gradeSchema } from \"./lib/validations/grade\";\r\n+import { gradeSchema } from \"../..//lib/validations/grade\";\r\n import { Button } from \"@/components/ui/button\";\r\n import { Input } from \"@/components/ui/input\";\r\n import { Textarea } from \"@/components/ui/textarea\";\r\n import { toast } from \"sonner\";\r\n"
                },
                {
                    "date": 1740765924323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n \"use client\";\r\n \r\n import { useForm } from \"react-hook-form\";\r\n-import { gradeSchema } from \"../..//lib/validations/grade\";\r\n+import { gradeSchema } from \".././lib/validations/grade\";\r\n import { Button } from \"@/components/ui/button\";\r\n import { Input } from \"@/components/ui/input\";\r\n import { Textarea } from \"@/components/ui/textarea\";\r\n import { toast } from \"sonner\";\r\n"
                },
                {
                    "date": 1740765930102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n \"use client\";\r\n \r\n import { useForm } from \"react-hook-form\";\r\n-import { gradeSchema } from \".././lib/validations/grade\";\r\n+import { gradeSchema } from \"../..//lib/validations/grade\";\r\n import { Button } from \"@/components/ui/button\";\r\n import { Input } from \"@/components/ui/input\";\r\n import { Textarea } from \"@/components/ui/textarea\";\r\n import { toast } from \"sonner\";\r\n"
                },
                {
                    "date": 1740765936943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n \"use client\";\r\n \r\n import { useForm } from \"react-hook-form\";\r\n-import { gradeSchema } from \"../..//lib/validations/grade\";\r\n+import { gradeSchema } from \"/lib/validations/grade\";\r\n import { Button } from \"@/components/ui/button\";\r\n import { Input } from \"@/components/ui/input\";\r\n import { Textarea } from \"@/components/ui/textarea\";\r\n import { toast } from \"sonner\";\r\n"
                },
                {
                    "date": 1740766061854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n \"use client\";\r\n \r\n import { useForm } from \"react-hook-form\";\r\n-import { gradeSchema } from \"/lib/validations/grade\";\r\n+import { zodResolver } from \"@hookform/resolvers/zod\";\r\n+import { gradeSchema, GradeFormValues } from \"@/lib/validations/grade\";\r\n import { Button } from \"@/components/ui/button\";\r\n import { Input } from \"@/components/ui/input\";\r\n import { Textarea } from \"@/components/ui/textarea\";\r\n import { toast } from \"sonner\";\r\n@@ -11,9 +12,9 @@\n   initialValues?: {\r\n     name: string;\r\n     description?: string;\r\n   };\r\n-  onSubmit: (values: { name: string; description?: string }) => Promise<void>;\r\n+  onSubmit: (values: GradeFormValues) => Promise<void>;\r\n   submitLabel?: string;\r\n }\r\n \r\n export function GradeForm({\r\n@@ -21,30 +22,29 @@\n   onSubmit,\r\n   submitLabel = \"Save Grade\",\r\n }: GradeFormProps) {\r\n   const {\r\n-    values,\r\n-    errors,\r\n-    isSubmitting,\r\n-    setFieldValue,\r\n-    validateField,\r\n-    handleSubmit,\r\n-  } = useForm({\r\n-    schema: gradeSchema,\r\n-    initialValues,\r\n-    onSubmit: async (values) => {\r\n-      try {\r\n-        await onSubmit(values);\r\n-        toast.success(\"Grade saved successfully\");\r\n-      } catch (error) {\r\n-        toast.error(\"Failed to save grade\");\r\n-        throw error;\r\n-      }\r\n-    },\r\n+    register,\r\n+    handleSubmit: hookFormSubmit,\r\n+    formState: { errors, isSubmitting },\r\n+    reset,\r\n+  } = useForm<GradeFormValues>({\r\n+    resolver: zodResolver(gradeSchema),\r\n+    defaultValues: initialValues,\r\n   });\r\n \r\n+  const handleFormSubmit = hookFormSubmit(async (values) => {\r\n+    try {\r\n+      await onSubmit(values);\r\n+      toast.success(\"Grade saved successfully\");\r\n+    } catch (error) {\r\n+      toast.error(\"Failed to save grade\");\r\n+      throw error;\r\n+    }\r\n+  });\r\n+\r\n   return (\r\n-    <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n+    <form onSubmit={handleFormSubmit} className=\"space-y-4\">\r\n       <div className=\"space-y-2\">\r\n         <label\r\n           htmlFor=\"name\"\r\n           className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\r\n@@ -52,18 +52,16 @@\n           Grade Name\r\n         </label>\r\n         <Input\r\n           id=\"name\"\r\n-          value={values.name}\r\n-          onChange={(e) => setFieldValue(\"name\", e.target.value)}\r\n-          onBlur={() => validateField(\"name\", values.name)}\r\n+          {...register(\"name\")}\r\n           aria-invalid={!!errors.name}\r\n           aria-describedby={errors.name ? \"name-error\" : undefined}\r\n           placeholder=\"Enter grade name\"\r\n           disabled={isSubmitting}\r\n         />\r\n         {errors.name && (\r\n-          <p id=\"name-error\" className=\"text-sm text-red-500\">{errors.name}</p>\r\n+          <p id=\"name-error\" className=\"text-sm text-red-500\">{errors.name.message}</p>\r\n         )}\r\n       </div>\r\n \r\n       <div className=\"space-y-2\">\r\n@@ -74,18 +72,16 @@\n           Description (Optional)\r\n         </label>\r\n         <Textarea\r\n           id=\"description\"\r\n-          value={values.description}\r\n-          onChange={(e) => setFieldValue(\"description\", e.target.value)}\r\n-          onBlur={() => validateField(\"description\", values.description)}\r\n+          {...register(\"description\")}\r\n           aria-invalid={!!errors.description}\r\n           aria-describedby={errors.description ? \"description-error\" : undefined}\r\n           placeholder=\"Enter grade description\"\r\n           disabled={isSubmitting}\r\n         />\r\n         {errors.description && (\r\n-          <p id=\"description-error\" className=\"text-sm text-red-500\">{errors.description}</p>\r\n+          <p id=\"description-error\" className=\"text-sm text-red-500\">{errors.description.message}</p>\r\n         )}\r\n       </div>\r\n \r\n       <Button\r\n"
                },
                {
                    "date": 1740770509344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n \"use client\";\r\n \r\n import { useForm } from \"react-hook-form\";\r\n-import { zodResolver } from \"@hookform/resolvers/zod\";\r\n-import { gradeSchema, GradeFormValues } from \"@/lib/validations/grade\";\r\n+import { gradeSchema } from \"@/lib/validations/grade\";\r\n import { Button } from \"@/components/ui/button\";\r\n import { Input } from \"@/components/ui/input\";\r\n import { Textarea } from \"@/components/ui/textarea\";\r\n import { toast } from \"sonner\";\r\n@@ -12,9 +11,9 @@\n   initialValues?: {\r\n     name: string;\r\n     description?: string;\r\n   };\r\n-  onSubmit: (values: GradeFormValues) => Promise<void>;\r\n+  onSubmit: (values: { name: string; description?: string }) => Promise<void>;\r\n   submitLabel?: string;\r\n }\r\n \r\n export function GradeForm({\r\n@@ -22,29 +21,30 @@\n   onSubmit,\r\n   submitLabel = \"Save Grade\",\r\n }: GradeFormProps) {\r\n   const {\r\n-    register,\r\n-    handleSubmit: hookFormSubmit,\r\n-    formState: { errors, isSubmitting },\r\n-    reset,\r\n-  } = useForm<GradeFormValues>({\r\n-    resolver: zodResolver(gradeSchema),\r\n-    defaultValues: initialValues,\r\n+    values,\r\n+    errors,\r\n+    isSubmitting,\r\n+    setFieldValue,\r\n+    validateField,\r\n+    handleSubmit,\r\n+  } = useForm({\r\n+    schema: gradeSchema,\r\n+    initialValues,\r\n+    onSubmit: async (values) => {\r\n+      try {\r\n+        await onSubmit(values);\r\n+        toast.success(\"Grade saved successfully\");\r\n+      } catch (error) {\r\n+        toast.error(\"Failed to save grade\");\r\n+        throw error;\r\n+      }\r\n+    },\r\n   });\r\n \r\n-  const handleFormSubmit = hookFormSubmit(async (values) => {\r\n-    try {\r\n-      await onSubmit(values);\r\n-      toast.success(\"Grade saved successfully\");\r\n-    } catch (error) {\r\n-      toast.error(\"Failed to save grade\");\r\n-      throw error;\r\n-    }\r\n-  });\r\n-\r\n   return (\r\n-    <form onSubmit={handleFormSubmit} className=\"space-y-4\">\r\n+    <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n       <div className=\"space-y-2\">\r\n         <label\r\n           htmlFor=\"name\"\r\n           className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\r\n@@ -52,16 +52,18 @@\n           Grade Name\r\n         </label>\r\n         <Input\r\n           id=\"name\"\r\n-          {...register(\"name\")}\r\n+          value={values.name}\r\n+          onChange={(e) => setFieldValue(\"name\", e.target.value)}\r\n+          onBlur={() => validateField(\"name\", values.name)}\r\n           aria-invalid={!!errors.name}\r\n           aria-describedby={errors.name ? \"name-error\" : undefined}\r\n           placeholder=\"Enter grade name\"\r\n           disabled={isSubmitting}\r\n         />\r\n         {errors.name && (\r\n-          <p id=\"name-error\" className=\"text-sm text-red-500\">{errors.name.message}</p>\r\n+          <p id=\"name-error\" className=\"text-sm text-red-500\">{errors.name}</p>\r\n         )}\r\n       </div>\r\n \r\n       <div className=\"space-y-2\">\r\n@@ -72,16 +74,18 @@\n           Description (Optional)\r\n         </label>\r\n         <Textarea\r\n           id=\"description\"\r\n-          {...register(\"description\")}\r\n+          value={values.description}\r\n+          onChange={(e) => setFieldValue(\"description\", e.target.value)}\r\n+          onBlur={() => validateField(\"description\", values.description)}\r\n           aria-invalid={!!errors.description}\r\n           aria-describedby={errors.description ? \"description-error\" : undefined}\r\n           placeholder=\"Enter grade description\"\r\n           disabled={isSubmitting}\r\n         />\r\n         {errors.description && (\r\n-          <p id=\"description-error\" className=\"text-sm text-red-500\">{errors.description.message}</p>\r\n+          <p id=\"description-error\" className=\"text-sm text-red-500\">{errors.description}</p>\r\n         )}\r\n       </div>\r\n \r\n       <Button\r\n"
                },
                {
                    "date": 1740770652065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n \"use client\";\r\n \r\n-import { useForm } from \"react-hook-form\";\r\n-import { gradeSchema } from \"@/lib/validations/grade\";\r\n+import { useForm } from \"@mantine/form\";\r\n+import { gradeSchema, GradeFormValues } from \"@/lib/validations/grade\";\r\n import { Button } from \"@/components/ui/button\";\r\n import { Input } from \"@/components/ui/input\";\r\n import { Textarea } from \"@/components/ui/textarea\";\r\n import { toast } from \"sonner\";\r\n@@ -11,40 +11,36 @@\n   initialValues?: {\r\n     name: string;\r\n     description?: string;\r\n   };\r\n-  onSubmit: (values: { name: string; description?: string }) => Promise<void>;\r\n+  onSubmit: (values: GradeFormValues) => Promise<void>;\r\n   submitLabel?: string;\r\n }\r\n \r\n export function GradeForm({\r\n   initialValues = { name: \"\", description: \"\" },\r\n   onSubmit,\r\n   submitLabel = \"Save Grade\",\r\n }: GradeFormProps) {\r\n-  const {\r\n-    values,\r\n-    errors,\r\n-    isSubmitting,\r\n-    setFieldValue,\r\n-    validateField,\r\n-    handleSubmit,\r\n-  } = useForm({\r\n-    schema: gradeSchema,\r\n+  const form = useForm({\r\n     initialValues,\r\n-    onSubmit: async (values) => {\r\n-      try {\r\n-        await onSubmit(values);\r\n-        toast.success(\"Grade saved successfully\");\r\n-      } catch (error) {\r\n-        toast.error(\"Failed to save grade\");\r\n-        throw error;\r\n-      }\r\n+    validate: {\r\n+      name: (value) => (value.length < 2 ? 'Grade name must be at least 2 characters' : null),\r\n     },\r\n   });\r\n \r\n+  const handleSubmit = async (values: typeof initialValues) => {\r\n+    try {\r\n+      await onSubmit(values);\r\n+      toast.success(\"Grade saved successfully\");\r\n+    } catch (error) {\r\n+      toast.error(\"Failed to save grade\");\r\n+      throw error;\r\n+    }\r\n+  };\r\n+\r\n   return (\r\n-    <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n+    <form onSubmit={form.onSubmit(handleSubmit)} className=\"space-y-4\">\r\n       <div className=\"space-y-2\">\r\n         <label\r\n           htmlFor=\"name\"\r\n           className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\r\n@@ -52,18 +48,13 @@\n           Grade Name\r\n         </label>\r\n         <Input\r\n           id=\"name\"\r\n-          value={values.name}\r\n-          onChange={(e) => setFieldValue(\"name\", e.target.value)}\r\n-          onBlur={() => validateField(\"name\", values.name)}\r\n-          aria-invalid={!!errors.name}\r\n-          aria-describedby={errors.name ? \"name-error\" : undefined}\r\n+          {...form.getInputProps('name')}\r\n           placeholder=\"Enter grade name\"\r\n-          disabled={isSubmitting}\r\n         />\r\n-        {errors.name && (\r\n-          <p id=\"name-error\" className=\"text-sm text-red-500\">{errors.name}</p>\r\n+        {form.errors.name && (\r\n+          <p id=\"name-error\" className=\"text-sm text-red-500\">{form.errors.name}</p>\r\n         )}\r\n       </div>\r\n \r\n       <div className=\"space-y-2\">\r\n@@ -74,27 +65,22 @@\n           Description (Optional)\r\n         </label>\r\n         <Textarea\r\n           id=\"description\"\r\n-          value={values.description}\r\n-          onChange={(e) => setFieldValue(\"description\", e.target.value)}\r\n-          onBlur={() => validateField(\"description\", values.description)}\r\n-          aria-invalid={!!errors.description}\r\n-          aria-describedby={errors.description ? \"description-error\" : undefined}\r\n+          {...form.getInputProps('description')}\r\n           placeholder=\"Enter grade description\"\r\n-          disabled={isSubmitting}\r\n         />\r\n-        {errors.description && (\r\n-          <p id=\"description-error\" className=\"text-sm text-red-500\">{errors.description}</p>\r\n+        {form.errors.description && (\r\n+          <p id=\"description-error\" className=\"text-sm text-red-500\">{form.errors.description}</p>\r\n         )}\r\n       </div>\r\n \r\n       <Button\r\n         type=\"submit\"\r\n-        disabled={isSubmitting}\r\n+        disabled={form.isSubmitting}\r\n         className=\"w-full\"\r\n       >\r\n-        {isSubmitting ? \"Saving...\" : submitLabel}\r\n+        {form.isSubmitting ? \"Saving...\" : submitLabel}\r\n       </Button>\r\n     </form>\r\n   );\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1740770665969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,12 +75,12 @@\n       </div>\r\n \r\n       <Button\r\n         type=\"submit\"\r\n-        disabled={form.isSubmitting}\r\n+        disabled={form.submitting}\r\n         className=\"w-full\"\r\n       >\r\n-        {form.isSubmitting ? \"Saving...\" : submitLabel}\r\n+        {form.submitting ? \"Saving...\" : submitLabel}\r\n       </Button>\r\n     </form>\r\n   );\r\n } \n\\ No newline at end of file\n"
                }
            ],
            "date": 1740765856671,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport { useForm } from \"@//hooks/use-form\";\r\nimport { gradeSchema } from \"@/lib/validations/lesson\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { toast } from \"sonner\";\r\n\r\ninterface GradeFormProps {\r\n  initialValues?: {\r\n    name: string;\r\n    description?: string;\r\n  };\r\n  onSubmit: (values: { name: string; description?: string }) => Promise<void>;\r\n  submitLabel?: string;\r\n}\r\n\r\nexport function GradeForm({\r\n  initialValues = { name: \"\", description: \"\" },\r\n  onSubmit,\r\n  submitLabel = \"Save Grade\",\r\n}: GradeFormProps) {\r\n  const {\r\n    values,\r\n    errors,\r\n    isSubmitting,\r\n    setFieldValue,\r\n    validateField,\r\n    handleSubmit,\r\n  } = useForm({\r\n    schema: gradeSchema,\r\n    initialValues,\r\n    onSubmit: async (values) => {\r\n      try {\r\n        await onSubmit(values);\r\n        toast.success(\"Grade saved successfully\");\r\n      } catch (error) {\r\n        toast.error(\"Failed to save grade\");\r\n        throw error;\r\n      }\r\n    },\r\n  });\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n      <div className=\"space-y-2\">\r\n        <label\r\n          htmlFor=\"name\"\r\n          className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\r\n        >\r\n          Grade Name\r\n        </label>\r\n        <Input\r\n          id=\"name\"\r\n          value={values.name}\r\n          onChange={(e) => setFieldValue(\"name\", e.target.value)}\r\n          onBlur={() => validateField(\"name\", values.name)}\r\n          aria-invalid={!!errors.name}\r\n          aria-describedby={errors.name ? \"name-error\" : undefined}\r\n          placeholder=\"Enter grade name\"\r\n          disabled={isSubmitting}\r\n        />\r\n        {errors.name && (\r\n          <p id=\"name-error\" className=\"text-sm text-red-500\">{errors.name}</p>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"space-y-2\">\r\n        <label\r\n          htmlFor=\"description\"\r\n          className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\r\n        >\r\n          Description (Optional)\r\n        </label>\r\n        <Textarea\r\n          id=\"description\"\r\n          value={values.description}\r\n          onChange={(e) => setFieldValue(\"description\", e.target.value)}\r\n          onBlur={() => validateField(\"description\", values.description)}\r\n          aria-invalid={!!errors.description}\r\n          aria-describedby={errors.description ? \"description-error\" : undefined}\r\n          placeholder=\"Enter grade description\"\r\n          disabled={isSubmitting}\r\n        />\r\n        {errors.description && (\r\n          <p id=\"description-error\" className=\"text-sm text-red-500\">{errors.description}</p>\r\n        )}\r\n      </div>\r\n\r\n      <Button\r\n        type=\"submit\"\r\n        disabled={isSubmitting}\r\n        className=\"w-full\"\r\n      >\r\n        {isSubmitting ? \"Saving...\" : submitLabel}\r\n      </Button>\r\n    </form>\r\n  );\r\n} "
        }
    ]
}