{
    "sourceFile": "src/components/RoleDashboard.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1738897690828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1738897690828,
            "name": "Commit-0",
            "content": "import React, { useEffect } from 'react';\nimport { useAuth } from '../hooks/useAuth';\nimport { usePermissions } from '../hooks/usePermissions';\nimport { canAccessDashboard } from '../lib/permissions';\nimport { useRoleSettings } from '../hooks/useRoleSettings';\n//import { APP_ICONS } from '../lib/constants/icons';\nimport { QueryClient } from '@tanstack/react-query';\nimport type { RoleSettings } from '../hooks/useRoleSettings';\nimport LoadingSpinner from './LoadingSpinner';\nimport {\n  SuperAdminDashboard, AdminDashboard, TechnicalHeadDashboard,\n  DeveloperDashboard, SalesHeadDashboard, SalesExecutiveDashboard,\n  ContentHeadDashboard, ContentEditorDashboard, AccountsDashboard, AccountsExecutiveDashboard,\n  SchoolLeaderDashboard, SchoolPrincipalDashboard, TeacherHeadDashboard,\n  TeacherDashboard\n} from './dashboards';\nimport { AlertTriangle, RefreshCw } from 'lucide-react';\n\ninterface RoleDashboardProps {\n  selectedRole: string;\n  onError?: (error: Error) => void;\n}\n\nconst RoleDashboard: React.FC<RoleDashboardProps> = ({ selectedRole, onError }) => {\n  const { settings, loading, error } = useRoleSettings(selectedRole);\n  const queryClient = new QueryClient();\n  const { user } = useAuth();\n  const { can } = usePermissions();\n\n  // Handle session timeout\n  useEffect(() => {\n    if (error?.toLowerCase().includes('unauthorized')) {\n      queryClient.clear();\n      window.location.href = '/login';\n    }\n  }, [error, queryClient]);\n\n  // Check access permissions first\n  if (!user || !canAccessDashboard(user.role, selectedRole)) {\n    return (\n      <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg\">\n        <h3 className=\"text-lg font-medium text-red-800\">Access Denied</h3>\n        <p className=\"mt-2 text-sm text-red-600\">\n          You do not have permission to view this dashboard.\n        </p>\n      </div>\n    );\n  }\n\n  if (loading) {\n    return (\n      <LoadingSpinner \n        message={`Loading ${selectedRole} dashboard...`}\n        timeout={15000}\n        showRetry={true}\n        showProgress={true}\n        onRetry={() => {\n          queryClient.invalidateQueries({ queryKey: ['role_settings'] });\n          window.location.reload();\n        }}\n      />\n    );\n  }\n\n  if (error) {\n    if (onError) {\n      onError(new Error(error));\n    }\n    return (\n      <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg\">\n        <div className=\"flex items-center\">\n          <AlertTriangle className=\"h-5 w-5 text-red-400 mr-2\" />\n          <h3 className=\"text-lg font-medium text-red-800\">Error</h3>\n        </div>\n        <p className=\"mt-2 text-sm text-red-600\">{error}</p>\n        <button\n          onClick={() => {\n            queryClient.invalidateQueries({ queryKey: ['role_settings'] });\n            window.location.reload();\n          }}\n          className=\"mt-4 inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-red-700 bg-red-100 hover:bg-red-200\"\n        >\n          <RefreshCw className=\"h-4 w-4 mr-2\" />\n          Try Again\n        </button>\n      </div>\n    );\n  }\n\n  if (!settings) {\n    return (\n      <div className=\"p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n        <h3 className=\"text-lg font-medium text-yellow-800\">No Dashboard Settings</h3>\n        <p className=\"mt-2 text-sm text-yellow-600\">\n          {`No dashboard settings found for role: ${selectedRole || user?.role || 'unknown'}`}\n        </p>\n        <div className=\"mt-4\">\n          <p className=\"text-sm text-yellow-700\">Available test credentials:</p>\n          <ul className=\"mt-2 space-y-1 text-sm text-yellow-600\">\n            <li>Email: admin@example.com</li>\n            <li>Password: admin123</li>\n            <li>Select any role from the dropdown to test different dashboards</li>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n\n  switch (selectedRole) {\n    case 'super_admin': return <SuperAdminDashboard settings={settings} />;\n    case 'admin': return <AdminDashboard settings={settings} />;\n    case 'technical_head': return <TechnicalHeadDashboard settings={settings} />;\n    case 'developer': return <DeveloperDashboard settings={settings} />;\n    case 'sales_head': return <SalesHeadDashboard settings={settings} />;\n    case 'sales_executive': return <SalesExecutiveDashboard settings={settings} />;\n    case 'content_head': return <ContentHeadDashboard settings={settings} />;\n    case 'content_editor': return <ContentEditorDashboard settings={settings} />;\n    case 'accounts_head': return <AccountsDashboard settings={settings} />;\n    case 'accounts_executive': return <AccountsExecutiveDashboard settings={settings} />;\n    case 'school_leader': return <SchoolLeaderDashboard settings={settings} />;\n    case 'school_principal': return <SchoolPrincipalDashboard settings={settings} />;\n    case 'teacher_head': return <TeacherHeadDashboard settings={settings} />;\n    case 'teacher': return <TeacherDashboard settings={settings} />;\n    default:\n      return (\n        <div className=\"p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n          <h3 className=\"text-lg font-medium text-yellow-800\">Unknown Role</h3>\n          <p className=\"mt-2 text-sm text-yellow-600\">\n            No dashboard available for role: {selectedRole}\n          </p>\n        </div>\n      );\n  }\n};\n\nexport default RoleDashboard;"
        }
    ]
}