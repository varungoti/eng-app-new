{
    "sourceFile": "src/components/SessionDebugger.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 19,
            "patches": [
                {
                    "date": 1739020269914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739020289329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,12 +12,9 @@\n   } = useSessionMonitoring();\r\n \r\n   useEffect(() => {\r\n     if (hasErrors) {\r\n-      logger.error('Session errors detected', {\r\n-        context: { sessionErrors },\r\n-        source: 'SessionDebugger'\r\n-      });\r\n+      logger.error(`Session errors detected: ${sessionErrors.join(', ')}`, 'SessionDebugger');\r\n     }\r\n   }, [hasErrors, sessionErrors]);\r\n \r\n   if (import.meta.env.DEV) {\r\n"
                },
                {
                    "date": 1739024107675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,44 +1,83 @@\n import { useSessionMonitoring } from '../hooks/useSessionMonitoring';\r\n import { useEffect } from 'react';\r\n import { logger } from '../lib/logger';\r\n+import { sessionMonitor } from '../lib/auth/SessionMonitor';\r\n \r\n export function SessionDebugger() {\r\n   const { \r\n     isAuthenticated, \r\n     currentRole, \r\n-    lastActivity, \r\n+    lastActivity,\r\n+    lastRefresh,\r\n+    refreshAttempts,\r\n+    lastOperation,\r\n     sessionErrors,\r\n     hasErrors \r\n   } = useSessionMonitoring();\r\n \r\n+  // Add debug action buttons\r\n+  const handleForceRefresh = async () => {\r\n+    try {\r\n+      const result = await sessionMonitor.refreshSession();\r\n+      logger.info(`Manual session refresh successful - Role: ${result?.user?.role || 'none'}`, 'SessionDebugger');\r\n+    } catch (err) {\r\n+      const errorMessage = err instanceof Error ? err.message : 'Unknown error';\r\n+      logger.error(`Manual session refresh failed: ${errorMessage}`, 'SessionDebugger');\r\n+    }\r\n+  };\r\n+\r\n   useEffect(() => {\r\n     if (hasErrors) {\r\n       logger.error(`Session errors detected: ${sessionErrors.join(', ')}`, 'SessionDebugger');\r\n     }\r\n   }, [hasErrors, sessionErrors]);\r\n \r\n-  if (import.meta.env.DEV) {\r\n-    return (\r\n-      <div className=\"fixed bottom-4 right-4 p-4 bg-gray-800 text-white rounded-lg shadow-lg max-w-sm opacity-75 hover:opacity-100 transition-opacity\">\r\n-        <h3 className=\"font-bold mb-2\">Session Debug</h3>\r\n-        <div className=\"space-y-1 text-sm\">\r\n-          <p>Status: {isAuthenticated ? 'üü¢ Active' : 'üî¥ Inactive'}</p>\r\n-          <p>Role: {currentRole || 'None'}</p>\r\n-          <p>Last Activity: {lastActivity.toLocaleTimeString()}</p>\r\n-          {hasErrors && (\r\n-            <div className=\"mt-2\">\r\n-              <p className=\"font-bold text-red-400\">Errors:</p>\r\n-              <ul className=\"list-disc pl-4\">\r\n-                {sessionErrors.map((error, i) => (\r\n-                  <li key={i} className=\"text-red-400\">{error}</li>\r\n-                ))}\r\n-              </ul>\r\n-            </div>\r\n-          )}\r\n+  if (!import.meta.env.DEV) return null;\r\n+\r\n+  return (\r\n+    <div className=\"fixed bottom-4 right-4 p-4 bg-gray-800 text-white rounded-lg shadow-lg max-w-sm opacity-75 hover:opacity-100 transition-opacity z-50\">\r\n+      <h3 className=\"font-bold mb-2\">Session Debug</h3>\r\n+      <div className=\"space-y-1 text-sm\">\r\n+        <p>Status: {isAuthenticated ? 'üü¢ Active' : 'üî¥ Inactive'}</p>\r\n+        <p>Role: {currentRole || 'None'}</p>\r\n+        <p>Last Activity: {lastActivity.toLocaleTimeString()}</p>\r\n+        {lastRefresh && (\r\n+          <p>Last Refresh: {lastRefresh.toLocaleTimeString()}</p>\r\n+        )}\r\n+        <p>Refresh Attempts: {refreshAttempts}</p>\r\n+        \r\n+        {lastOperation && (\r\n+          <div className=\"mt-2 p-2 bg-gray-700 rounded\">\r\n+            <p className=\"font-bold\">Last Operation:</p>\r\n+            <p>Type: {lastOperation.type}</p>\r\n+            <p>Time: {lastOperation.timestamp.toLocaleTimeString()}</p>\r\n+            <p>Status: {lastOperation.success ? '‚úÖ Success' : '‚ùå Failed'}</p>\r\n+            {lastOperation.error && (\r\n+              <p className=\"text-red-400 break-words\">Error: {lastOperation.error}</p>\r\n+            )}\r\n+          </div>\r\n+        )}\r\n+\r\n+        {hasErrors && (\r\n+          <div className=\"mt-2\">\r\n+            <p className=\"font-bold text-red-400\">Errors:</p>\r\n+            <ul className=\"list-disc pl-4\">\r\n+              {sessionErrors.map((error, i) => (\r\n+                <li key={i} className=\"text-red-400 break-words\">{error}</li>\r\n+              ))}\r\n+            </ul>\r\n+          </div>\r\n+        )}\r\n+\r\n+        <div className=\"mt-4 space-x-2\">\r\n+          <button\r\n+            onClick={handleForceRefresh}\r\n+            className=\"px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors\"\r\n+          >\r\n+            Force Refresh\r\n+          </button>\r\n         </div>\r\n       </div>\r\n-    );\r\n-  }\r\n-\r\n-  return null;\r\n+    </div>\r\n+  );\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739194131609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { useSessionMonitoring } from '../hooks/useSessionMonitoring';\r\n-import { useEffect } from 'react';\r\n+import { useEffect, useState } from 'react';\r\n import { logger } from '../lib/logger';\r\n import { sessionMonitor } from '../lib/auth/SessionMonitor';\r\n \r\n export function SessionDebugger() {\r\n@@ -32,52 +32,64 @@\n     }\r\n   }, [hasErrors, sessionErrors]);\r\n \r\n   if (!import.meta.env.DEV) return null;\r\n+  const [isDebugVisible, setIsDebugVisible] = useState(false);\r\n \r\n-  return (\r\n-    <div className=\"fixed bottom-4 right-4 p-4 bg-gray-800 text-white rounded-lg shadow-lg max-w-sm opacity-75 hover:opacity-100 transition-opacity z-50\">\r\n-      <h3 className=\"font-bold mb-2\">Session Debug</h3>\r\n-      <div className=\"space-y-1 text-sm\">\r\n-        <p>Status: {isAuthenticated ? 'üü¢ Active' : 'üî¥ Inactive'}</p>\r\n-        <p>Role: {currentRole || 'None'}</p>\r\n-        <p>Last Activity: {lastActivity.toLocaleTimeString()}</p>\r\n-        {lastRefresh && (\r\n-          <p>Last Refresh: {lastRefresh.toLocaleTimeString()}</p>\r\n-        )}\r\n-        <p>Refresh Attempts: {refreshAttempts}</p>\r\n-        \r\n-        {lastOperation && (\r\n-          <div className=\"mt-2 p-2 bg-gray-700 rounded\">\r\n-            <p className=\"font-bold\">Last Operation:</p>\r\n-            <p>Type: {lastOperation.type}</p>\r\n-            <p>Time: {lastOperation.timestamp.toLocaleTimeString()}</p>\r\n-            <p>Status: {lastOperation.success ? '‚úÖ Success' : '‚ùå Failed'}</p>\r\n-            {lastOperation.error && (\r\n-              <p className=\"text-red-400 break-words\">Error: {lastOperation.error}</p>\r\n-            )}\r\n-          </div>\r\n-        )}\r\n+  useEffect(() => {\r\n+    const handleKeyDown = (e: KeyboardEvent) => {\r\n+      if (e.ctrlKey && e.shiftKey && e.altKey && e.key.toLowerCase() === 'd') {\r\n+          setIsDebugVisible(prev => !prev);\r\n+        }\r\n+      };\r\n \r\n-        {hasErrors && (\r\n-          <div className=\"mt-2\">\r\n-            <p className=\"font-bold text-red-400\">Errors:</p>\r\n-            <ul className=\"list-disc pl-4\">\r\n-              {sessionErrors.map((error, i) => (\r\n-                <li key={i} className=\"text-red-400 break-words\">{error}</li>\r\n-              ))}\r\n-            </ul>\r\n+      window.addEventListener('keydown', handleKeyDown);\r\n+      return () => window.removeEventListener('keydown', handleKeyDown);\r\n+    }, []);\r\n+\r\n+    return isDebugVisible ? (\r\n+      <div className=\"fixed bottom-4 right-4 p-4 bg-gray-800 text-white rounded-lg shadow-lg max-w-sm opacity-75 hover:opacity-100 transition-opacity z-50\">\r\n+        <h3 className=\"font-bold mb-2\">Session Debug</h3>\r\n+        <div className=\"space-y-1 text-sm\">\r\n+          <p>Status: {isAuthenticated ? 'üü¢ Active' : 'üî¥ Inactive'}</p>\r\n+          <p>Role: {currentRole || 'None'}</p>\r\n+          <p>Last Activity: {lastActivity.toLocaleTimeString()}</p>\r\n+          {lastRefresh && (\r\n+            <p>Last Refresh: {lastRefresh.toLocaleTimeString()}</p>\r\n+          )}\r\n+          <p>Refresh Attempts: {refreshAttempts}</p>\r\n+          \r\n+          {lastOperation && (\r\n+            <div className=\"mt-2 p-2 bg-gray-700 rounded\">\r\n+              <p className=\"font-bold\">Last Operation:</p>\r\n+              <p>Type: {lastOperation.type}</p>\r\n+              <p>Time: {lastOperation.timestamp.toLocaleTimeString()}</p>\r\n+              <p>Status: {lastOperation.success ? '‚úÖ Success' : '‚ùå Failed'}</p>\r\n+              {lastOperation.error && (\r\n+                <p className=\"text-red-400 break-words\">Error: {lastOperation.error}</p>\r\n+              )}\r\n+            </div>\r\n+          )}\r\n+\r\n+          {hasErrors && (\r\n+            <div className=\"mt-2\">\r\n+              <p className=\"font-bold text-red-400\">Errors:</p>\r\n+              <ul className=\"list-disc pl-4\">\r\n+                {sessionErrors.map((error, i) => (\r\n+                  <li key={i} className=\"text-red-400 break-words\">{error}</li>\r\n+                ))}\r\n+              </ul>\r\n+            </div>\r\n+          )}\r\n+\r\n+          <div className=\"mt-4 space-x-2\">\r\n+            <button\r\n+              onClick={handleForceRefresh}\r\n+              className=\"px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors\"\r\n+            >\r\n+              Force Refresh\r\n+            </button>\r\n           </div>\r\n-        )}\r\n-\r\n-        <div className=\"mt-4 space-x-2\">\r\n-          <button\r\n-            onClick={handleForceRefresh}\r\n-            className=\"px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors\"\r\n-          >\r\n-            Force Refresh\r\n-          </button>\r\n         </div>\r\n       </div>\r\n-    </div>\r\n-  );\r\n+    ) : null;\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739194210925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n     }\r\n   }, [hasErrors, sessionErrors]);\r\n \r\n   if (!import.meta.env.DEV) return null;\r\n-  const [isDebugVisible, setIsDebugVisible] = useState(false);\r\n+  const [isDebugVisible, setIsDebugVisible] = useState(true);\r\n \r\n   useEffect(() => {\r\n     const handleKeyDown = (e: KeyboardEvent) => {\r\n       if (e.ctrlKey && e.shiftKey && e.altKey && e.key.toLowerCase() === 'd') {\r\n"
                },
                {
                    "date": 1739194225191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n     }\r\n   }, [hasErrors, sessionErrors]);\r\n \r\n   if (!import.meta.env.DEV) return null;\r\n-  const [isDebugVisible, setIsDebugVisible] = useState(true);\r\n+  const [isDebugVisible, setIsDebugVisible] = useState(false);\r\n \r\n   useEffect(() => {\r\n     const handleKeyDown = (e: KeyboardEvent) => {\r\n       if (e.ctrlKey && e.shiftKey && e.altKey && e.key.toLowerCase() === 'd') {\r\n"
                },
                {
                    "date": 1739349964068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,18 +18,36 @@\n   // Add debug action buttons\r\n   const handleForceRefresh = async () => {\r\n     try {\r\n       const result = await sessionMonitor.refreshSession();\r\n-      logger.info(`Manual session refresh successful - Role: ${result?.user?.role || 'none'}`, 'SessionDebugger');\r\n+      logger.info('Manual session refresh successful', {\r\n+        source: 'SessionDebugger',\r\n+        context: {\r\n+          role: result?.user?.role || 'none',\r\n+          timestamp: new Date().toISOString()\r\n+        }\r\n+      });\r\n     } catch (err) {\r\n       const errorMessage = err instanceof Error ? err.message : 'Unknown error';\r\n-      logger.error(`Manual session refresh failed: ${errorMessage}`, 'SessionDebugger');\r\n+      logger.error('Manual session refresh failed', {\r\n+        source: 'SessionDebugger',\r\n+        context: {\r\n+          error: errorMessage,\r\n+          timestamp: new Date().toISOString()\r\n+        }\r\n+      });\r\n     }\r\n   };\r\n \r\n   useEffect(() => {\r\n     if (hasErrors) {\r\n-      logger.error(`Session errors detected: ${sessionErrors.join(', ')}`, 'SessionDebugger');\r\n+      logger.error('Session errors detected', {\r\n+        source: 'SessionDebugger',\r\n+        context: {\r\n+          errors: sessionErrors,\r\n+          timestamp: new Date().toISOString()\r\n+        }\r\n+      });\r\n     }\r\n   }, [hasErrors, sessionErrors]);\r\n \r\n   if (!import.meta.env.DEV) return null;\r\n@@ -37,59 +55,59 @@\n \r\n   useEffect(() => {\r\n     const handleKeyDown = (e: KeyboardEvent) => {\r\n       if (e.ctrlKey && e.shiftKey && e.altKey && e.key.toLowerCase() === 'd') {\r\n-          setIsDebugVisible(prev => !prev);\r\n-        }\r\n-      };\r\n+        setIsDebugVisible(prev => !prev);\r\n+      }\r\n+    };\r\n \r\n-      window.addEventListener('keydown', handleKeyDown);\r\n-      return () => window.removeEventListener('keydown', handleKeyDown);\r\n-    }, []);\r\n+    window.addEventListener('keydown', handleKeyDown);\r\n+    return () => window.removeEventListener('keydown', handleKeyDown);\r\n+  }, []);\r\n \r\n-    return isDebugVisible ? (\r\n-      <div className=\"fixed bottom-4 right-4 p-4 bg-gray-800 text-white rounded-lg shadow-lg max-w-sm opacity-75 hover:opacity-100 transition-opacity z-50\">\r\n-        <h3 className=\"font-bold mb-2\">Session Debug</h3>\r\n-        <div className=\"space-y-1 text-sm\">\r\n-          <p>Status: {isAuthenticated ? 'üü¢ Active' : 'üî¥ Inactive'}</p>\r\n-          <p>Role: {currentRole || 'None'}</p>\r\n-          <p>Last Activity: {lastActivity.toLocaleTimeString()}</p>\r\n-          {lastRefresh && (\r\n-            <p>Last Refresh: {lastRefresh.toLocaleTimeString()}</p>\r\n-          )}\r\n-          <p>Refresh Attempts: {refreshAttempts}</p>\r\n-          \r\n-          {lastOperation && (\r\n-            <div className=\"mt-2 p-2 bg-gray-700 rounded\">\r\n-              <p className=\"font-bold\">Last Operation:</p>\r\n-              <p>Type: {lastOperation.type}</p>\r\n-              <p>Time: {lastOperation.timestamp.toLocaleTimeString()}</p>\r\n-              <p>Status: {lastOperation.success ? '‚úÖ Success' : '‚ùå Failed'}</p>\r\n-              {lastOperation.error && (\r\n-                <p className=\"text-red-400 break-words\">Error: {lastOperation.error}</p>\r\n-              )}\r\n-            </div>\r\n-          )}\r\n+  return isDebugVisible ? (\r\n+    <div className=\"fixed bottom-4 right-4 p-4 bg-gray-800 text-white rounded-lg shadow-lg max-w-sm opacity-75 hover:opacity-100 transition-opacity z-50\">\r\n+      <h3 className=\"font-bold mb-2\">Session Debug</h3>\r\n+      <div className=\"space-y-1 text-sm\">\r\n+        <p>Status: {isAuthenticated ? 'üü¢ Active' : 'üî¥ Inactive'}</p>\r\n+        <p>Role: {currentRole || 'None'}</p>\r\n+        <p>Last Activity: {lastActivity.toLocaleTimeString()}</p>\r\n+        {lastRefresh && (\r\n+          <p>Last Refresh: {lastRefresh.toLocaleTimeString()}</p>\r\n+        )}\r\n+        <p>Refresh Attempts: {refreshAttempts}</p>\r\n+        \r\n+        {lastOperation && (\r\n+          <div className=\"mt-2 p-2 bg-gray-700 rounded\">\r\n+            <p className=\"font-bold\">Last Operation:</p>\r\n+            <p>Type: {lastOperation.type}</p>\r\n+            <p>Time: {lastOperation.timestamp.toLocaleTimeString()}</p>\r\n+            <p>Status: {lastOperation.success ? '‚úÖ Success' : '‚ùå Failed'}</p>\r\n+            {lastOperation.error && (\r\n+              <p className=\"text-red-400 break-words\">Error: {lastOperation.error}</p>\r\n+            )}\r\n+          </div>\r\n+        )}\r\n \r\n-          {hasErrors && (\r\n-            <div className=\"mt-2\">\r\n-              <p className=\"font-bold text-red-400\">Errors:</p>\r\n-              <ul className=\"list-disc pl-4\">\r\n-                {sessionErrors.map((error, i) => (\r\n-                  <li key={i} className=\"text-red-400 break-words\">{error}</li>\r\n-                ))}\r\n-              </ul>\r\n-            </div>\r\n-          )}\r\n+        {hasErrors && (\r\n+          <div className=\"mt-2\">\r\n+            <p className=\"font-bold text-red-400\">Errors:</p>\r\n+            <ul className=\"list-disc pl-4\">\r\n+              {sessionErrors.map((error, i) => (\r\n+                <li key={i} className=\"text-red-400 break-words\">{error}</li>\r\n+              ))}\r\n+            </ul>\r\n+          </div>\r\n+        )}\r\n \r\n-          <div className=\"mt-4 space-x-2\">\r\n-            <button\r\n-              onClick={handleForceRefresh}\r\n-              className=\"px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors\"\r\n-            >\r\n-              Force Refresh\r\n-            </button>\r\n-          </div>\r\n+        <div className=\"mt-4 space-x-2\">\r\n+          <button\r\n+            onClick={handleForceRefresh}\r\n+            className=\"px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors\"\r\n+          >\r\n+            Force Refresh\r\n+          </button>\r\n         </div>\r\n       </div>\r\n-    ) : null;\r\n+    </div>\r\n+  ) : null;\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739350251867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { useSessionMonitoring } from '../hooks/useSessionMonitoring';\r\n-import { useEffect, useState } from 'react';\r\n+import { useEffect, useState, useCallback, useMemo } from 'react';\r\n import { logger } from '../lib/logger';\r\n import { sessionMonitor } from '../lib/auth/SessionMonitor';\r\n \r\n export function SessionDebugger() {\r\n@@ -14,10 +14,13 @@\n     sessionErrors,\r\n     hasErrors \r\n   } = useSessionMonitoring();\r\n \r\n-  // Add debug action buttons\r\n-  const handleForceRefresh = async () => {\r\n+  // Memoize debug visibility state\r\n+  const [isDebugVisible, setIsDebugVisible] = useState(false);\r\n+\r\n+  // Memoize force refresh handler\r\n+  const handleForceRefresh = useCallback(async () => {\r\n     try {\r\n       const result = await sessionMonitor.refreshSession();\r\n       logger.info('Manual session refresh successful', {\r\n         source: 'SessionDebugger',\r\n@@ -35,10 +38,11 @@\n           timestamp: new Date().toISOString()\r\n         }\r\n       });\r\n     }\r\n-  };\r\n+  }, []);\r\n \r\n+  // Memoize error logging\r\n   useEffect(() => {\r\n     if (hasErrors) {\r\n       logger.error('Session errors detected', {\r\n         source: 'SessionDebugger',\r\n@@ -49,11 +53,12 @@\n       });\r\n     }\r\n   }, [hasErrors, sessionErrors]);\r\n \r\n+  // Only show in development\r\n   if (!import.meta.env.DEV) return null;\r\n-  const [isDebugVisible, setIsDebugVisible] = useState(false);\r\n \r\n+  // Memoize keyboard handler\r\n   useEffect(() => {\r\n     const handleKeyDown = (e: KeyboardEvent) => {\r\n       if (e.ctrlKey && e.shiftKey && e.altKey && e.key.toLowerCase() === 'd') {\r\n         setIsDebugVisible(prev => !prev);\r\n@@ -63,19 +68,28 @@\n     window.addEventListener('keydown', handleKeyDown);\r\n     return () => window.removeEventListener('keydown', handleKeyDown);\r\n   }, []);\r\n \r\n+  // Memoize session info\r\n+  const sessionInfo = useMemo(() => ({\r\n+    status: isAuthenticated ? 'üü¢ Active' : 'üî¥ Inactive',\r\n+    role: currentRole || 'None',\r\n+    lastActivityTime: lastActivity?.toLocaleTimeString(),\r\n+    lastRefreshTime: lastRefresh?.toLocaleTimeString(),\r\n+    attempts: refreshAttempts\r\n+  }), [isAuthenticated, currentRole, lastActivity, lastRefresh, refreshAttempts]);\r\n+\r\n   return isDebugVisible ? (\r\n     <div className=\"fixed bottom-4 right-4 p-4 bg-gray-800 text-white rounded-lg shadow-lg max-w-sm opacity-75 hover:opacity-100 transition-opacity z-50\">\r\n       <h3 className=\"font-bold mb-2\">Session Debug</h3>\r\n       <div className=\"space-y-1 text-sm\">\r\n-        <p>Status: {isAuthenticated ? 'üü¢ Active' : 'üî¥ Inactive'}</p>\r\n-        <p>Role: {currentRole || 'None'}</p>\r\n-        <p>Last Activity: {lastActivity.toLocaleTimeString()}</p>\r\n-        {lastRefresh && (\r\n-          <p>Last Refresh: {lastRefresh.toLocaleTimeString()}</p>\r\n+        <p>Status: {sessionInfo.status}</p>\r\n+        <p>Role: {sessionInfo.role}</p>\r\n+        <p>Last Activity: {sessionInfo.lastActivityTime}</p>\r\n+        {sessionInfo.lastRefreshTime && (\r\n+          <p>Last Refresh: {sessionInfo.lastRefreshTime}</p>\r\n         )}\r\n-        <p>Refresh Attempts: {refreshAttempts}</p>\r\n+        <p>Refresh Attempts: {sessionInfo.attempts}</p>\r\n         \r\n         {lastOperation && (\r\n           <div className=\"mt-2 p-2 bg-gray-700 rounded\">\r\n             <p className=\"font-bold\">Last Operation:</p>\r\n"
                },
                {
                    "date": 1739350930465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,14 @@\n import { useSessionMonitoring } from '../hooks/useSessionMonitoring';\r\n-import { useEffect, useState, useCallback, useMemo } from 'react';\r\n+import { useEffect, useState, useCallback, useMemo, useRef } from 'react';\r\n import { logger } from '../lib/logger';\r\n import { sessionMonitor } from '../lib/auth/SessionMonitor';\r\n+import { cn } from '../lib/utils';\r\n \r\n+// Constants for session management\r\n+const REFRESH_COOLDOWN = 5000; // 5 seconds between manual refreshes\r\n+const SESSION_CHECK_INTERVAL = 30000; // 30 seconds between auto checks\r\n+\r\n export function SessionDebugger() {\r\n   const { \r\n     isAuthenticated, \r\n     currentRole, \r\n@@ -14,20 +19,38 @@\n     sessionErrors,\r\n     hasErrors \r\n   } = useSessionMonitoring();\r\n \r\n+  // Refs for managing refresh state\r\n+  const lastManualRefresh = useRef<number>(0);\r\n+  const sessionCheckTimer = useRef<NodeJS.Timeout>();\r\n+\r\n   // Memoize debug visibility state\r\n   const [isDebugVisible, setIsDebugVisible] = useState(false);\r\n \r\n-  // Memoize force refresh handler\r\n+  // Memoize force refresh handler with cooldown\r\n   const handleForceRefresh = useCallback(async () => {\r\n+    const now = Date.now();\r\n+    if (now - lastManualRefresh.current < REFRESH_COOLDOWN) {\r\n+      logger.warn('Refresh attempted too soon', {\r\n+        source: 'SessionDebugger',\r\n+        context: {\r\n+          timeSinceLastRefresh: now - lastManualRefresh.current,\r\n+          cooldown: REFRESH_COOLDOWN\r\n+        }\r\n+      });\r\n+      return;\r\n+    }\r\n+\r\n     try {\r\n+      lastManualRefresh.current = now;\r\n       const result = await sessionMonitor.refreshSession();\r\n       logger.info('Manual session refresh successful', {\r\n         source: 'SessionDebugger',\r\n         context: {\r\n           role: result?.user?.role || 'none',\r\n-          timestamp: new Date().toISOString()\r\n+          timestamp: new Date().toISOString(),\r\n+          nextRefreshAvailable: new Date(now + REFRESH_COOLDOWN).toISOString()\r\n         }\r\n       });\r\n     } catch (err) {\r\n       const errorMessage = err instanceof Error ? err.message : 'Unknown error';\r\n@@ -40,20 +63,54 @@\n       });\r\n     }\r\n   }, []);\r\n \r\n-  // Memoize error logging\r\n+  // Memoize error logging with debounce\r\n   useEffect(() => {\r\n     if (hasErrors) {\r\n-      logger.error('Session errors detected', {\r\n-        source: 'SessionDebugger',\r\n-        context: {\r\n-          errors: sessionErrors,\r\n-          timestamp: new Date().toISOString()\r\n+      const errorLogTimeout = setTimeout(() => {\r\n+        logger.error('Session errors detected', {\r\n+          source: 'SessionDebugger',\r\n+          context: {\r\n+            errors: sessionErrors,\r\n+            timestamp: new Date().toISOString(),\r\n+            sessionState: {\r\n+              isAuthenticated,\r\n+              lastRefresh: lastRefresh?.toISOString(),\r\n+              attempts: refreshAttempts\r\n+            }\r\n+          }\r\n+        });\r\n+      }, 100); // Debounce error logging\r\n+\r\n+      return () => clearTimeout(errorLogTimeout);\r\n+    }\r\n+  }, [hasErrors, sessionErrors, isAuthenticated, lastRefresh, refreshAttempts]);\r\n+\r\n+  // Setup periodic session checks\r\n+  useEffect(() => {\r\n+    if (isAuthenticated) {\r\n+      sessionCheckTimer.current = setInterval(() => {\r\n+        const timeSinceLastRefresh = Date.now() - (lastRefresh?.getTime() || 0);\r\n+        if (timeSinceLastRefresh > SESSION_CHECK_INTERVAL) {\r\n+          logger.info('Periodic session check', {\r\n+            source: 'SessionDebugger',\r\n+            context: {\r\n+              timeSinceLastRefresh: `${Math.round(timeSinceLastRefresh / 1000)}s`,\r\n+              timestamp: new Date().toISOString()\r\n+            }\r\n+          });\r\n+          handleForceRefresh();\r\n         }\r\n-      });\r\n+      }, SESSION_CHECK_INTERVAL);\r\n+\r\n+      return () => {\r\n+        if (sessionCheckTimer.current) {\r\n+          clearInterval(sessionCheckTimer.current);\r\n+        }\r\n+      };\r\n     }\r\n-  }, [hasErrors, sessionErrors]);\r\n+  }, [isAuthenticated, lastRefresh, handleForceRefresh]);\r\n \r\n   // Only show in development\r\n   if (!import.meta.env.DEV) return null;\r\n \r\n@@ -74,9 +131,12 @@\n     status: isAuthenticated ? 'üü¢ Active' : 'üî¥ Inactive',\r\n     role: currentRole || 'None',\r\n     lastActivityTime: lastActivity?.toLocaleTimeString(),\r\n     lastRefreshTime: lastRefresh?.toLocaleTimeString(),\r\n-    attempts: refreshAttempts\r\n+    attempts: refreshAttempts,\r\n+    nextRefreshIn: lastRefresh ? \r\n+      Math.max(0, REFRESH_COOLDOWN - (Date.now() - lastRefresh.getTime())) / 1000 : \r\n+      0\r\n   }), [isAuthenticated, currentRole, lastActivity, lastRefresh, refreshAttempts]);\r\n \r\n   return isDebugVisible ? (\r\n     <div className=\"fixed bottom-4 right-4 p-4 bg-gray-800 text-white rounded-lg shadow-lg max-w-sm opacity-75 hover:opacity-100 transition-opacity z-50\">\r\n@@ -85,9 +145,12 @@\n         <p>Status: {sessionInfo.status}</p>\r\n         <p>Role: {sessionInfo.role}</p>\r\n         <p>Last Activity: {sessionInfo.lastActivityTime}</p>\r\n         {sessionInfo.lastRefreshTime && (\r\n-          <p>Last Refresh: {sessionInfo.lastRefreshTime}</p>\r\n+          <>\r\n+            <p>Last Refresh: {sessionInfo.lastRefreshTime}</p>\r\n+            <p className=\"text-xs text-gray-400\">Next refresh in: {Math.round(sessionInfo.nextRefreshIn)}s</p>\r\n+          </>\r\n         )}\r\n         <p>Refresh Attempts: {sessionInfo.attempts}</p>\r\n         \r\n         {lastOperation && (\r\n@@ -115,9 +178,15 @@\n \r\n         <div className=\"mt-4 space-x-2\">\r\n           <button\r\n             onClick={handleForceRefresh}\r\n-            className=\"px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors\"\r\n+            disabled={Date.now() - lastManualRefresh.current < REFRESH_COOLDOWN}\r\n+            className={cn(\r\n+              \"px-3 py-1 bg-blue-500 text-white rounded transition-colors\",\r\n+              Date.now() - lastManualRefresh.current < REFRESH_COOLDOWN \r\n+                ? \"opacity-50 cursor-not-allowed\" \r\n+                : \"hover:bg-blue-600\"\r\n+            )}\r\n           >\r\n             Force Refresh\r\n           </button>\r\n         </div>\r\n"
                },
                {
                    "date": 1739351066698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,18 +113,22 @@\n \r\n   // Only show in development\r\n   if (!import.meta.env.DEV) return null;\r\n \r\n-  // Memoize keyboard handler\r\n+  // Alternative keyboard handler\r\n   useEffect(() => {\r\n     const handleKeyDown = (e: KeyboardEvent) => {\r\n-      if (e.ctrlKey && e.shiftKey && e.altKey && e.key.toLowerCase() === 'd') {\r\n+      // Check for both uppercase and lowercase 'd'\r\n+      const isDebugKey = e.key === 'd' || e.key === 'D';\r\n+      \r\n+      if (e.ctrlKey && e.shiftKey && e.altKey && isDebugKey) {\r\n+        e.preventDefault(); // Prevent any default browser shortcuts\r\n         setIsDebugVisible(prev => !prev);\r\n       }\r\n     };\r\n \r\n-    window.addEventListener('keydown', handleKeyDown);\r\n-    return () => window.removeEventListener('keydown', handleKeyDown);\r\n+    document.addEventListener('keydown', handleKeyDown);\r\n+    return () => document.removeEventListener('keydown', handleKeyDown);\r\n   }, []);\r\n \r\n   // Memoize session info\r\n   const sessionInfo = useMemo(() => ({\r\n"
                },
                {
                    "date": 1739351149477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,24 +113,61 @@\n \r\n   // Only show in development\r\n   if (!import.meta.env.DEV) return null;\r\n \r\n-  // Alternative keyboard handler\r\n+  // Keyboard shortcut handler with multiple detection methods\r\n   useEffect(() => {\r\n+    let keys = {\r\n+      ctrl: false,\r\n+      shift: false,\r\n+      alt: false\r\n+    };\r\n+\r\n     const handleKeyDown = (e: KeyboardEvent) => {\r\n-      // Check for both uppercase and lowercase 'd'\r\n-      const isDebugKey = e.key === 'd' || e.key === 'D';\r\n-      \r\n-      if (e.ctrlKey && e.shiftKey && e.altKey && isDebugKey) {\r\n-        e.preventDefault(); // Prevent any default browser shortcuts\r\n-        setIsDebugVisible(prev => !prev);\r\n+      // Update key states\r\n+      if (e.key === 'Control') keys.ctrl = true;\r\n+      if (e.key === 'Shift') keys.shift = true;\r\n+      if (e.key === 'Alt') keys.alt = true;\r\n+\r\n+      // Check for the debug key\r\n+      if ((e.key === 'd' || e.key === 'D')) {\r\n+        if (e.ctrlKey && e.shiftKey && e.altKey) {\r\n+          e.preventDefault();\r\n+          console.log('Debug shortcut activated'); // Debug log\r\n+          setIsDebugVisible(prev => !prev);\r\n+        }\r\n       }\r\n     };\r\n \r\n-    document.addEventListener('keydown', handleKeyDown);\r\n-    return () => document.removeEventListener('keydown', handleKeyDown);\r\n+    const handleKeyUp = (e: KeyboardEvent) => {\r\n+      // Reset key states\r\n+      if (e.key === 'Control') keys.ctrl = false;\r\n+      if (e.key === 'Shift') keys.shift = false;\r\n+      if (e.key === 'Alt') keys.alt = false;\r\n+    };\r\n+\r\n+    // Handle blur event to reset keys\r\n+    const handleBlur = () => {\r\n+      keys = { ctrl: false, shift: false, alt: false };\r\n+    };\r\n+\r\n+    // Add all event listeners\r\n+    window.addEventListener('keydown', handleKeyDown);\r\n+    window.addEventListener('keyup', handleKeyUp);\r\n+    window.addEventListener('blur', handleBlur);\r\n+\r\n+    return () => {\r\n+      window.removeEventListener('keydown', handleKeyDown);\r\n+      window.removeEventListener('keyup', handleKeyUp);\r\n+      window.removeEventListener('blur', handleBlur);\r\n+    };\r\n   }, []);\r\n \r\n+  // Debug visibility state monitor\r\n+  useEffect(() => {\r\n+    console.log('Debug panel visibility:', isDebugVisible);\r\n+  }, [isDebugVisible]);\r\n+\r\n   // Memoize session info\r\n   const sessionInfo = useMemo(() => ({\r\n     status: isAuthenticated ? 'üü¢ Active' : 'üî¥ Inactive',\r\n     role: currentRole || 'None',\r\n"
                },
                {
                    "date": 1740825629233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,9 @@\n import { useSessionMonitoring } from '../hooks/useSessionMonitoring';\r\n-import { useEffect, useState, useCallback, useMemo, useRef } from 'react';\r\n+import { useEffect, useState } from 'react';\r\n import { logger } from '../lib/logger';\r\n import { sessionMonitor } from '../lib/auth/SessionMonitor';\r\n-import { cn } from '../lib/utils';\r\n \r\n-// Constants for session management\r\n-const REFRESH_COOLDOWN = 5000; // 5 seconds between manual refreshes\r\n-const SESSION_CHECK_INTERVAL = 30000; // 30 seconds between auto checks\r\n-\r\n export function SessionDebugger() {\r\n   const { \r\n     isAuthenticated, \r\n     currentRole, \r\n@@ -19,219 +14,82 @@\n     sessionErrors,\r\n     hasErrors \r\n   } = useSessionMonitoring();\r\n \r\n-  // Refs for managing refresh state\r\n-  const lastManualRefresh = useRef<number>(0);\r\n-  const sessionCheckTimer = useRef<NodeJS.Timeout>();\r\n-\r\n-  // Memoize debug visibility state\r\n-  const [isDebugVisible, setIsDebugVisible] = useState(false);\r\n-\r\n-  // Memoize force refresh handler with cooldown\r\n-  const handleForceRefresh = useCallback(async () => {\r\n-    const now = Date.now();\r\n-    if (now - lastManualRefresh.current < REFRESH_COOLDOWN) {\r\n-      logger.warn('Refresh attempted too soon', {\r\n-        source: 'SessionDebugger',\r\n-        context: {\r\n-          timeSinceLastRefresh: now - lastManualRefresh.current,\r\n-          cooldown: REFRESH_COOLDOWN\r\n-        }\r\n-      });\r\n-      return;\r\n-    }\r\n-\r\n+  // Add debug action buttons\r\n+  const handleForceRefresh = async () => {\r\n     try {\r\n-      lastManualRefresh.current = now;\r\n       const result = await sessionMonitor.refreshSession();\r\n-      logger.info('Manual session refresh successful', {\r\n-        source: 'SessionDebugger',\r\n-        context: {\r\n-          role: result?.user?.role || 'none',\r\n-          timestamp: new Date().toISOString(),\r\n-          nextRefreshAvailable: new Date(now + REFRESH_COOLDOWN).toISOString()\r\n-        }\r\n-      });\r\n+      logger.info(`Manual session refresh successful - Role: ${result?.user?.role || 'none'}`);\r\n     } catch (err) {\r\n       const errorMessage = err instanceof Error ? err.message : 'Unknown error';\r\n-      logger.error('Manual session refresh failed', {\r\n-        source: 'SessionDebugger',\r\n-        context: {\r\n-          error: errorMessage,\r\n-          timestamp: new Date().toISOString()\r\n-        }\r\n-      });\r\n+      logger.error(`Manual session refresh failed: ${errorMessage}`);\r\n     }\r\n-  }, []);\r\n+  };\r\n \r\n-  // Memoize error logging with debounce\r\n   useEffect(() => {\r\n     if (hasErrors) {\r\n-      const errorLogTimeout = setTimeout(() => {\r\n-        logger.error('Session errors detected', {\r\n-          source: 'SessionDebugger',\r\n-          context: {\r\n-            errors: sessionErrors,\r\n-            timestamp: new Date().toISOString(),\r\n-            sessionState: {\r\n-              isAuthenticated,\r\n-              lastRefresh: lastRefresh?.toISOString(),\r\n-              attempts: refreshAttempts\r\n-            }\r\n-          }\r\n-        });\r\n-      }, 100); // Debounce error logging\r\n-\r\n-      return () => clearTimeout(errorLogTimeout);\r\n+      logger.error(`Session errors detected: ${sessionErrors.join(', ')}`, 'SessionDebugger');\r\n     }\r\n-  }, [hasErrors, sessionErrors, isAuthenticated, lastRefresh, refreshAttempts]);\r\n+  }, [hasErrors, sessionErrors]);\r\n \r\n-  // Setup periodic session checks\r\n-  useEffect(() => {\r\n-    if (isAuthenticated) {\r\n-      sessionCheckTimer.current = setInterval(() => {\r\n-        const timeSinceLastRefresh = Date.now() - (lastRefresh?.getTime() || 0);\r\n-        if (timeSinceLastRefresh > SESSION_CHECK_INTERVAL) {\r\n-          logger.info('Periodic session check', {\r\n-            source: 'SessionDebugger',\r\n-            context: {\r\n-              timeSinceLastRefresh: `${Math.round(timeSinceLastRefresh / 1000)}s`,\r\n-              timestamp: new Date().toISOString()\r\n-            }\r\n-          });\r\n-          handleForceRefresh();\r\n-        }\r\n-      }, SESSION_CHECK_INTERVAL);\r\n-\r\n-      return () => {\r\n-        if (sessionCheckTimer.current) {\r\n-          clearInterval(sessionCheckTimer.current);\r\n-        }\r\n-      };\r\n-    }\r\n-  }, [isAuthenticated, lastRefresh, handleForceRefresh]);\r\n-\r\n-  // Only show in development\r\n   if (!import.meta.env.DEV) return null;\r\n+  const [isDebugVisible, setIsDebugVisible] = useState(false);\r\n \r\n-  // Keyboard shortcut handler with multiple detection methods\r\n   useEffect(() => {\r\n-    let keys = {\r\n-      ctrl: false,\r\n-      shift: false,\r\n-      alt: false\r\n-    };\r\n-\r\n     const handleKeyDown = (e: KeyboardEvent) => {\r\n-      // Update key states\r\n-      if (e.key === 'Control') keys.ctrl = true;\r\n-      if (e.key === 'Shift') keys.shift = true;\r\n-      if (e.key === 'Alt') keys.alt = true;\r\n-\r\n-      // Check for the debug key\r\n-      if ((e.key === 'd' || e.key === 'D')) {\r\n-        if (e.ctrlKey && e.shiftKey && e.altKey) {\r\n-          e.preventDefault();\r\n-          console.log('Debug shortcut activated'); // Debug log\r\n+      if (e.ctrlKey && e.shiftKey && e.altKey && e.key.toLowerCase() === 'd') {\r\n           setIsDebugVisible(prev => !prev);\r\n         }\r\n-      }\r\n-    };\r\n+      };\r\n \r\n-    const handleKeyUp = (e: KeyboardEvent) => {\r\n-      // Reset key states\r\n-      if (e.key === 'Control') keys.ctrl = false;\r\n-      if (e.key === 'Shift') keys.shift = false;\r\n-      if (e.key === 'Alt') keys.alt = false;\r\n-    };\r\n+      window.addEventListener('keydown', handleKeyDown);\r\n+      return () => window.removeEventListener('keydown', handleKeyDown);\r\n+    }, []);\r\n \r\n-    // Handle blur event to reset keys\r\n-    const handleBlur = () => {\r\n-      keys = { ctrl: false, shift: false, alt: false };\r\n-    };\r\n+    return isDebugVisible ? (\r\n+      <div className=\"fixed bottom-4 right-4 p-4 bg-gray-800 text-white rounded-lg shadow-lg max-w-sm opacity-75 hover:opacity-100 transition-opacity z-50\">\r\n+        <h3 className=\"font-bold mb-2\">Session Debug</h3>\r\n+        <div className=\"space-y-1 text-sm\">\r\n+          <p>Status: {isAuthenticated ? 'üü¢ Active' : 'üî¥ Inactive'}</p>\r\n+          <p>Role: {currentRole || 'None'}</p>\r\n+          <p>Last Activity: {lastActivity.toLocaleTimeString()}</p>\r\n+          {lastRefresh && (\r\n+            <p>Last Refresh: {lastRefresh.toLocaleTimeString()}</p>\r\n+          )}\r\n+          <p>Refresh Attempts: {refreshAttempts}</p>\r\n+          \r\n+          {lastOperation && (\r\n+            <div className=\"mt-2 p-2 bg-gray-700 rounded\">\r\n+              <p className=\"font-bold\">Last Operation:</p>\r\n+              <p>Type: {lastOperation.type}</p>\r\n+              <p>Time: {lastOperation.timestamp.toLocaleTimeString()}</p>\r\n+              <p>Status: {lastOperation.success ? '‚úÖ Success' : '‚ùå Failed'}</p>\r\n+              {lastOperation.error && (\r\n+                <p className=\"text-red-400 break-words\">Error: {lastOperation.error}</p>\r\n+              )}\r\n+            </div>\r\n+          )}\r\n \r\n-    // Add all event listeners\r\n-    window.addEventListener('keydown', handleKeyDown);\r\n-    window.addEventListener('keyup', handleKeyUp);\r\n-    window.addEventListener('blur', handleBlur);\r\n+          {hasErrors && (\r\n+            <div className=\"mt-2\">\r\n+              <p className=\"font-bold text-red-400\">Errors:</p>\r\n+              <ul className=\"list-disc pl-4\">\r\n+                {sessionErrors.map((error, i) => (\r\n+                  <li key={i} className=\"text-red-400 break-words\">{error}</li>\r\n+                ))}\r\n+              </ul>\r\n+            </div>\r\n+          )}\r\n \r\n-    return () => {\r\n-      window.removeEventListener('keydown', handleKeyDown);\r\n-      window.removeEventListener('keyup', handleKeyUp);\r\n-      window.removeEventListener('blur', handleBlur);\r\n-    };\r\n-  }, []);\r\n-\r\n-  // Debug visibility state monitor\r\n-  useEffect(() => {\r\n-    console.log('Debug panel visibility:', isDebugVisible);\r\n-  }, [isDebugVisible]);\r\n-\r\n-  // Memoize session info\r\n-  const sessionInfo = useMemo(() => ({\r\n-    status: isAuthenticated ? 'üü¢ Active' : 'üî¥ Inactive',\r\n-    role: currentRole || 'None',\r\n-    lastActivityTime: lastActivity?.toLocaleTimeString(),\r\n-    lastRefreshTime: lastRefresh?.toLocaleTimeString(),\r\n-    attempts: refreshAttempts,\r\n-    nextRefreshIn: lastRefresh ? \r\n-      Math.max(0, REFRESH_COOLDOWN - (Date.now() - lastRefresh.getTime())) / 1000 : \r\n-      0\r\n-  }), [isAuthenticated, currentRole, lastActivity, lastRefresh, refreshAttempts]);\r\n-\r\n-  return isDebugVisible ? (\r\n-    <div className=\"fixed bottom-4 right-4 p-4 bg-gray-800 text-white rounded-lg shadow-lg max-w-sm opacity-75 hover:opacity-100 transition-opacity z-50\">\r\n-      <h3 className=\"font-bold mb-2\">Session Debug</h3>\r\n-      <div className=\"space-y-1 text-sm\">\r\n-        <p>Status: {sessionInfo.status}</p>\r\n-        <p>Role: {sessionInfo.role}</p>\r\n-        <p>Last Activity: {sessionInfo.lastActivityTime}</p>\r\n-        {sessionInfo.lastRefreshTime && (\r\n-          <>\r\n-            <p>Last Refresh: {sessionInfo.lastRefreshTime}</p>\r\n-            <p className=\"text-xs text-gray-400\">Next refresh in: {Math.round(sessionInfo.nextRefreshIn)}s</p>\r\n-          </>\r\n-        )}\r\n-        <p>Refresh Attempts: {sessionInfo.attempts}</p>\r\n-        \r\n-        {lastOperation && (\r\n-          <div className=\"mt-2 p-2 bg-gray-700 rounded\">\r\n-            <p className=\"font-bold\">Last Operation:</p>\r\n-            <p>Type: {lastOperation.type}</p>\r\n-            <p>Time: {lastOperation.timestamp.toLocaleTimeString()}</p>\r\n-            <p>Status: {lastOperation.success ? '‚úÖ Success' : '‚ùå Failed'}</p>\r\n-            {lastOperation.error && (\r\n-              <p className=\"text-red-400 break-words\">Error: {lastOperation.error}</p>\r\n-            )}\r\n+          <div className=\"mt-4 space-x-2\">\r\n+            <button\r\n+              onClick={handleForceRefresh}\r\n+              className=\"px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors\"\r\n+            >\r\n+              Force Refresh\r\n+            </button>\r\n           </div>\r\n-        )}\r\n-\r\n-        {hasErrors && (\r\n-          <div className=\"mt-2\">\r\n-            <p className=\"font-bold text-red-400\">Errors:</p>\r\n-            <ul className=\"list-disc pl-4\">\r\n-              {sessionErrors.map((error, i) => (\r\n-                <li key={i} className=\"text-red-400 break-words\">{error}</li>\r\n-              ))}\r\n-            </ul>\r\n-          </div>\r\n-        )}\r\n-\r\n-        <div className=\"mt-4 space-x-2\">\r\n-          <button\r\n-            onClick={handleForceRefresh}\r\n-            disabled={Date.now() - lastManualRefresh.current < REFRESH_COOLDOWN}\r\n-            className={cn(\r\n-              \"px-3 py-1 bg-blue-500 text-white rounded transition-colors\",\r\n-              Date.now() - lastManualRefresh.current < REFRESH_COOLDOWN \r\n-                ? \"opacity-50 cursor-not-allowed\" \r\n-                : \"hover:bg-blue-600\"\r\n-            )}\r\n-          >\r\n-            Force Refresh\r\n-          </button>\r\n         </div>\r\n       </div>\r\n-    </div>\r\n-  ) : null;\r\n+    ) : null;\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1740825634754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n   };\r\n \r\n   useEffect(() => {\r\n     if (hasErrors) {\r\n-      logger.error(`Session errors detected: ${sessionErrors.join(', ')}`, 'SessionDebugger');\r\n+      logger.error(`Session errors detected: ${sessionErrors.join(', ')}`);\r\n     }\r\n   }, [hasErrors, sessionErrors]);\r\n \r\n   if (!import.meta.env.DEV) return null;\r\n"
                },
                {
                    "date": 1740825644380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n   };\r\n \r\n   useEffect(() => {\r\n     if (hasErrors) {\r\n-      logger.error(`Session errors detected: ${sessionErrors.join(', ')}`);\r\n+      logger.error(`Session errors detected: ${sessionErrors.join(', ')}`, 'SessionDebugger');\r\n     }\r\n   }, [hasErrors, sessionErrors]);\r\n \r\n   if (!import.meta.env.DEV) return null;\r\n"
                },
                {
                    "date": 1740825666218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n   };\r\n \r\n   useEffect(() => {\r\n     if (hasErrors) {\r\n-      logger.error(`Session errors detected: ${sessionErrors.join(', ')}`, 'SessionDebugger');\r\n+      logger.error(`Session errors detected: ${sessionErrors.join(', ')}`);\r\n     }\r\n   }, [hasErrors, sessionErrors]);\r\n \r\n   if (!import.meta.env.DEV) return null;\r\n"
                },
                {
                    "date": 1740825700530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,10 @@\n     lastOperation,\r\n     sessionErrors,\r\n     hasErrors \r\n   } = useSessionMonitoring();\r\n+  \r\n+  const [isDebugVisible, setIsDebugVisible] = useState(false);\r\n \r\n   // Add debug action buttons\r\n   const handleForceRefresh = async () => {\r\n     try {\r\n@@ -30,12 +32,9 @@\n     if (hasErrors) {\r\n       logger.error(`Session errors detected: ${sessionErrors.join(', ')}`);\r\n     }\r\n   }, [hasErrors, sessionErrors]);\r\n-\r\n-  if (!import.meta.env.DEV) return null;\r\n-  const [isDebugVisible, setIsDebugVisible] = useState(false);\r\n-\r\n+  \r\n   useEffect(() => {\r\n     const handleKeyDown = (e: KeyboardEvent) => {\r\n       if (e.ctrlKey && e.shiftKey && e.altKey && e.key.toLowerCase() === 'd') {\r\n           setIsDebugVisible(prev => !prev);\r\n@@ -45,51 +44,54 @@\n       window.addEventListener('keydown', handleKeyDown);\r\n       return () => window.removeEventListener('keydown', handleKeyDown);\r\n     }, []);\r\n \r\n-    return isDebugVisible ? (\r\n-      <div className=\"fixed bottom-4 right-4 p-4 bg-gray-800 text-white rounded-lg shadow-lg max-w-sm opacity-75 hover:opacity-100 transition-opacity z-50\">\r\n-        <h3 className=\"font-bold mb-2\">Session Debug</h3>\r\n-        <div className=\"space-y-1 text-sm\">\r\n-          <p>Status: {isAuthenticated ? 'üü¢ Active' : 'üî¥ Inactive'}</p>\r\n-          <p>Role: {currentRole || 'None'}</p>\r\n-          <p>Last Activity: {lastActivity.toLocaleTimeString()}</p>\r\n-          {lastRefresh && (\r\n-            <p>Last Refresh: {lastRefresh.toLocaleTimeString()}</p>\r\n-          )}\r\n-          <p>Refresh Attempts: {refreshAttempts}</p>\r\n-          \r\n-          {lastOperation && (\r\n-            <div className=\"mt-2 p-2 bg-gray-700 rounded\">\r\n-              <p className=\"font-bold\">Last Operation:</p>\r\n-              <p>Type: {lastOperation.type}</p>\r\n-              <p>Time: {lastOperation.timestamp.toLocaleTimeString()}</p>\r\n-              <p>Status: {lastOperation.success ? '‚úÖ Success' : '‚ùå Failed'}</p>\r\n-              {lastOperation.error && (\r\n-                <p className=\"text-red-400 break-words\">Error: {lastOperation.error}</p>\r\n-              )}\r\n-            </div>\r\n-          )}\r\n+  if (!import.meta.env.DEV) return null;\r\n+  if (!isDebugVisible) return null;\r\n \r\n-          {hasErrors && (\r\n-            <div className=\"mt-2\">\r\n-              <p className=\"font-bold text-red-400\">Errors:</p>\r\n-              <ul className=\"list-disc pl-4\">\r\n-                {sessionErrors.map((error, i) => (\r\n-                  <li key={i} className=\"text-red-400 break-words\">{error}</li>\r\n-                ))}\r\n-              </ul>\r\n-            </div>\r\n-          )}\r\n+  return (\r\n+    <div className=\"fixed bottom-4 right-4 p-4 bg-gray-800 text-white rounded-lg shadow-lg max-w-sm opacity-75 hover:opacity-100 transition-opacity z-50\">\r\n+      <h3 className=\"font-bold mb-2\">Session Debug</h3>\r\n+      <div className=\"space-y-1 text-sm\">\r\n+        <p>Status: {isAuthenticated ? 'üü¢ Active' : 'üî¥ Inactive'}</p>\r\n+        <p>Role: {currentRole || 'None'}</p>\r\n+        <p>Last Activity: {lastActivity.toLocaleTimeString()}</p>\r\n+        {lastRefresh && (\r\n+          <p>Last Refresh: {lastRefresh.toLocaleTimeString()}</p>\r\n+        )}\r\n+        <p>Refresh Attempts: {refreshAttempts}</p>\r\n+        \r\n+        {lastOperation && (\r\n+          <div className=\"mt-2 p-2 bg-gray-700 rounded\">\r\n+            <p className=\"font-bold\">Last Operation:</p>\r\n+            <p>Type: {lastOperation.type}</p>\r\n+            <p>Time: {lastOperation.timestamp.toLocaleTimeString()}</p>\r\n+            <p>Status: {lastOperation.success ? '‚úÖ Success' : '‚ùå Failed'}</p>\r\n+            {lastOperation.error && (\r\n+              <p className=\"text-red-400 break-words\">Error: {lastOperation.error}</p>\r\n+            )}\r\n+          </div>\r\n+        )}\r\n \r\n-          <div className=\"mt-4 space-x-2\">\r\n-            <button\r\n-              onClick={handleForceRefresh}\r\n-              className=\"px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors\"\r\n-            >\r\n-              Force Refresh\r\n-            </button>\r\n+        {hasErrors && (\r\n+          <div className=\"mt-2\">\r\n+            <p className=\"font-bold text-red-400\">Errors:</p>\r\n+            <ul className=\"list-disc pl-4\">\r\n+              {sessionErrors.map((error, i) => (\r\n+                <li key={i} className=\"text-red-400 break-words\">{error}</li>\r\n+              ))}\r\n+            </ul>\r\n           </div>\r\n+        )}\r\n+\r\n+        <div className=\"mt-4 space-x-2\">\r\n+          <button\r\n+            onClick={handleForceRefresh}\r\n+            className=\"px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors\"\r\n+          >\r\n+            Force Refresh\r\n+          </button>\r\n         </div>\r\n       </div>\r\n-    ) : null;\r\n+    </div>\r\n+  );\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1740825743590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,8 +84,9 @@\n         )}\r\n \r\n         <div className=\"mt-4 space-x-2\">\r\n           <button\r\n+          \r\n             onClick={handleForceRefresh}\r\n             className=\"px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors\"\r\n           >\r\n             Force Refresh\r\n"
                },
                {
                    "date": 1740825749420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n         )}\r\n \r\n         <div className=\"mt-4 space-x-2\">\r\n           <button\r\n-          \r\n+            type=\"button\"\r\n             onClick={handleForceRefresh}\r\n             className=\"px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors\"\r\n           >\r\n             Force Refresh\r\n"
                },
                {
                    "date": 1740825757374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,8 +85,9 @@\n \r\n         <div className=\"mt-4 space-x-2\">\r\n           <button\r\n             type=\"button\"\r\n+            t\r\n             onClick={handleForceRefresh}\r\n             className=\"px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors\"\r\n           >\r\n             Force Refresh\r\n"
                },
                {
                    "date": 1740825763352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n \r\n         <div className=\"mt-4 space-x-2\">\r\n           <button\r\n             type=\"button\"\r\n-            t\r\n+            title=\"Force Refresh\"\r\n             onClick={handleForceRefresh}\r\n             className=\"px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors\"\r\n           >\r\n             Force Refresh\r\n"
                }
            ],
            "date": 1739020269914,
            "name": "Commit-0",
            "content": "import { useSessionMonitoring } from '../hooks/useSessionMonitoring';\r\nimport { useEffect } from 'react';\r\nimport { logger } from '../lib/logger';\r\n\r\nexport function SessionDebugger() {\r\n  const { \r\n    isAuthenticated, \r\n    currentRole, \r\n    lastActivity, \r\n    sessionErrors,\r\n    hasErrors \r\n  } = useSessionMonitoring();\r\n\r\n  useEffect(() => {\r\n    if (hasErrors) {\r\n      logger.error('Session errors detected', {\r\n        context: { sessionErrors },\r\n        source: 'SessionDebugger'\r\n      });\r\n    }\r\n  }, [hasErrors, sessionErrors]);\r\n\r\n  if (import.meta.env.DEV) {\r\n    return (\r\n      <div className=\"fixed bottom-4 right-4 p-4 bg-gray-800 text-white rounded-lg shadow-lg max-w-sm opacity-75 hover:opacity-100 transition-opacity\">\r\n        <h3 className=\"font-bold mb-2\">Session Debug</h3>\r\n        <div className=\"space-y-1 text-sm\">\r\n          <p>Status: {isAuthenticated ? 'üü¢ Active' : 'üî¥ Inactive'}</p>\r\n          <p>Role: {currentRole || 'None'}</p>\r\n          <p>Last Activity: {lastActivity.toLocaleTimeString()}</p>\r\n          {hasErrors && (\r\n            <div className=\"mt-2\">\r\n              <p className=\"font-bold text-red-400\">Errors:</p>\r\n              <ul className=\"list-disc pl-4\">\r\n                {sessionErrors.map((error, i) => (\r\n                  <li key={i} className=\"text-red-400\">{error}</li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n} "
        }
    ]
}