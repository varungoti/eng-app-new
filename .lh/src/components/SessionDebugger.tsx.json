{
    "sourceFile": "src/components/SessionDebugger.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1739020269914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739020289329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,12 +12,9 @@\n   } = useSessionMonitoring();\r\n \r\n   useEffect(() => {\r\n     if (hasErrors) {\r\n-      logger.error('Session errors detected', {\r\n-        context: { sessionErrors },\r\n-        source: 'SessionDebugger'\r\n-      });\r\n+      logger.error(`Session errors detected: ${sessionErrors.join(', ')}`, 'SessionDebugger');\r\n     }\r\n   }, [hasErrors, sessionErrors]);\r\n \r\n   if (import.meta.env.DEV) {\r\n"
                },
                {
                    "date": 1739024107675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,44 +1,83 @@\n import { useSessionMonitoring } from '../hooks/useSessionMonitoring';\r\n import { useEffect } from 'react';\r\n import { logger } from '../lib/logger';\r\n+import { sessionMonitor } from '../lib/auth/SessionMonitor';\r\n \r\n export function SessionDebugger() {\r\n   const { \r\n     isAuthenticated, \r\n     currentRole, \r\n-    lastActivity, \r\n+    lastActivity,\r\n+    lastRefresh,\r\n+    refreshAttempts,\r\n+    lastOperation,\r\n     sessionErrors,\r\n     hasErrors \r\n   } = useSessionMonitoring();\r\n \r\n+  // Add debug action buttons\r\n+  const handleForceRefresh = async () => {\r\n+    try {\r\n+      const result = await sessionMonitor.refreshSession();\r\n+      logger.info(`Manual session refresh successful - Role: ${result?.user?.role || 'none'}`, 'SessionDebugger');\r\n+    } catch (err) {\r\n+      const errorMessage = err instanceof Error ? err.message : 'Unknown error';\r\n+      logger.error(`Manual session refresh failed: ${errorMessage}`, 'SessionDebugger');\r\n+    }\r\n+  };\r\n+\r\n   useEffect(() => {\r\n     if (hasErrors) {\r\n       logger.error(`Session errors detected: ${sessionErrors.join(', ')}`, 'SessionDebugger');\r\n     }\r\n   }, [hasErrors, sessionErrors]);\r\n \r\n-  if (import.meta.env.DEV) {\r\n-    return (\r\n-      <div className=\"fixed bottom-4 right-4 p-4 bg-gray-800 text-white rounded-lg shadow-lg max-w-sm opacity-75 hover:opacity-100 transition-opacity\">\r\n-        <h3 className=\"font-bold mb-2\">Session Debug</h3>\r\n-        <div className=\"space-y-1 text-sm\">\r\n-          <p>Status: {isAuthenticated ? 'üü¢ Active' : 'üî¥ Inactive'}</p>\r\n-          <p>Role: {currentRole || 'None'}</p>\r\n-          <p>Last Activity: {lastActivity.toLocaleTimeString()}</p>\r\n-          {hasErrors && (\r\n-            <div className=\"mt-2\">\r\n-              <p className=\"font-bold text-red-400\">Errors:</p>\r\n-              <ul className=\"list-disc pl-4\">\r\n-                {sessionErrors.map((error, i) => (\r\n-                  <li key={i} className=\"text-red-400\">{error}</li>\r\n-                ))}\r\n-              </ul>\r\n-            </div>\r\n-          )}\r\n+  if (!import.meta.env.DEV) return null;\r\n+\r\n+  return (\r\n+    <div className=\"fixed bottom-4 right-4 p-4 bg-gray-800 text-white rounded-lg shadow-lg max-w-sm opacity-75 hover:opacity-100 transition-opacity z-50\">\r\n+      <h3 className=\"font-bold mb-2\">Session Debug</h3>\r\n+      <div className=\"space-y-1 text-sm\">\r\n+        <p>Status: {isAuthenticated ? 'üü¢ Active' : 'üî¥ Inactive'}</p>\r\n+        <p>Role: {currentRole || 'None'}</p>\r\n+        <p>Last Activity: {lastActivity.toLocaleTimeString()}</p>\r\n+        {lastRefresh && (\r\n+          <p>Last Refresh: {lastRefresh.toLocaleTimeString()}</p>\r\n+        )}\r\n+        <p>Refresh Attempts: {refreshAttempts}</p>\r\n+        \r\n+        {lastOperation && (\r\n+          <div className=\"mt-2 p-2 bg-gray-700 rounded\">\r\n+            <p className=\"font-bold\">Last Operation:</p>\r\n+            <p>Type: {lastOperation.type}</p>\r\n+            <p>Time: {lastOperation.timestamp.toLocaleTimeString()}</p>\r\n+            <p>Status: {lastOperation.success ? '‚úÖ Success' : '‚ùå Failed'}</p>\r\n+            {lastOperation.error && (\r\n+              <p className=\"text-red-400 break-words\">Error: {lastOperation.error}</p>\r\n+            )}\r\n+          </div>\r\n+        )}\r\n+\r\n+        {hasErrors && (\r\n+          <div className=\"mt-2\">\r\n+            <p className=\"font-bold text-red-400\">Errors:</p>\r\n+            <ul className=\"list-disc pl-4\">\r\n+              {sessionErrors.map((error, i) => (\r\n+                <li key={i} className=\"text-red-400 break-words\">{error}</li>\r\n+              ))}\r\n+            </ul>\r\n+          </div>\r\n+        )}\r\n+\r\n+        <div className=\"mt-4 space-x-2\">\r\n+          <button\r\n+            onClick={handleForceRefresh}\r\n+            className=\"px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors\"\r\n+          >\r\n+            Force Refresh\r\n+          </button>\r\n         </div>\r\n       </div>\r\n-    );\r\n-  }\r\n-\r\n-  return null;\r\n+    </div>\r\n+  );\r\n } \n\\ No newline at end of file\n"
                }
            ],
            "date": 1739020269914,
            "name": "Commit-0",
            "content": "import { useSessionMonitoring } from '../hooks/useSessionMonitoring';\r\nimport { useEffect } from 'react';\r\nimport { logger } from '../lib/logger';\r\n\r\nexport function SessionDebugger() {\r\n  const { \r\n    isAuthenticated, \r\n    currentRole, \r\n    lastActivity, \r\n    sessionErrors,\r\n    hasErrors \r\n  } = useSessionMonitoring();\r\n\r\n  useEffect(() => {\r\n    if (hasErrors) {\r\n      logger.error('Session errors detected', {\r\n        context: { sessionErrors },\r\n        source: 'SessionDebugger'\r\n      });\r\n    }\r\n  }, [hasErrors, sessionErrors]);\r\n\r\n  if (import.meta.env.DEV) {\r\n    return (\r\n      <div className=\"fixed bottom-4 right-4 p-4 bg-gray-800 text-white rounded-lg shadow-lg max-w-sm opacity-75 hover:opacity-100 transition-opacity\">\r\n        <h3 className=\"font-bold mb-2\">Session Debug</h3>\r\n        <div className=\"space-y-1 text-sm\">\r\n          <p>Status: {isAuthenticated ? 'üü¢ Active' : 'üî¥ Inactive'}</p>\r\n          <p>Role: {currentRole || 'None'}</p>\r\n          <p>Last Activity: {lastActivity.toLocaleTimeString()}</p>\r\n          {hasErrors && (\r\n            <div className=\"mt-2\">\r\n              <p className=\"font-bold text-red-400\">Errors:</p>\r\n              <ul className=\"list-disc pl-4\">\r\n                {sessionErrors.map((error, i) => (\r\n                  <li key={i} className=\"text-red-400\">{error}</li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n} "
        }
    ]
}