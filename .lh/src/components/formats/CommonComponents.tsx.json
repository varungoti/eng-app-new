{
    "sourceFile": "src/components/formats/CommonComponents.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1740771853818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740771875334,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n   className?: string;\r\n   small?: boolean;\r\n }\r\n \r\n-export const ListenButton = ({ text, onListen, isPlaying, className, small }: ListenButtonProps) => (\r\n+export const ListenButton = ({ text, onListen, isPlaying, className, _small }: ListenButtonProps) => (\r\n   <button \r\n     className={`rounded-2xl flex space-x-2 border dark:border-primary/30 border-primary/40 \r\n       items-center text-left hover:shadow-md transition-all ${className}`}\r\n     onClick={() => onListen(text)}\r\n"
                },
                {
                    "date": 1740771887182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n   className?: string;\r\n   small?: boolean;\r\n }\r\n \r\n-export const ListenButton = ({ text, onListen, isPlaying, className, _small }: ListenButtonProps) => (\r\n+export const ListenButton = ({ text, onListen, isPlaying, className, small }: ListenButtonProps) => (\r\n   <button \r\n     className={`rounded-2xl flex space-x-2 border dark:border-primary/30 border-primary/40 \r\n       items-center text-left hover:shadow-md transition-all ${className}`}\r\n     onClick={() => onListen(text)}\r\n"
                },
                {
                    "date": 1740771901444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n }\r\n \r\n export const ListenButton = ({ text, onListen, isPlaying, className, small }: ListenButtonProps) => (\r\n   <button \r\n+    title=\"Listen\"\r\n     className={`rounded-2xl flex space-x-2 border dark:border-primary/30 border-primary/40 \r\n       items-center text-left hover:shadow-md transition-all ${className}`}\r\n     onClick={() => onListen(text)}\r\n     disabled={isPlaying}\r\n"
                },
                {
                    "date": 1740771909434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,8 +33,9 @@\n }\r\n \r\n export const SpeakButton = ({ onSpeak, isListening, isProcessing, customText }: SpeakButtonProps) => (\r\n   <button \r\n+    title=\"Speak\"\r\n     className=\"rounded-2xl flex space-x-2 border dark:border-primary/30 border-primary/40 \r\n       items-center text-left hover:shadow-md transition-all\"\r\n     onClick={onSpeak}\r\n     disabled={isListening || isProcessing}\r\n"
                },
                {
                    "date": 1740771914893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,8 +70,9 @@\n export const WordPopover = ({ word, definition, phonetic, onListen }: WordPopoverProps) => (\r\n     <Popover.Root>\r\n       <Popover.Trigger asChild>\r\n         <button \r\n+          title=\"Listen\"\r\n           className=\"inline-block hover:bg-primary/5 rounded px-1 \r\n             transition-colors duration-200 cursor-pointer\"\r\n         >\r\n           {word}\r\n"
                }
            ],
            "date": 1740771853818,
            "name": "Commit-0",
            "content": "import * as Popover from '@radix-ui/react-popover';\r\nimport { X as X,SpeakerHifi as Volume2, Microphone as Mic } from '@phosphor-icons/react';\r\n\r\ninterface ListenButtonProps {\r\n  text: string;\r\n  onListen: (text: string) => Promise<void>;\r\n  isPlaying: boolean;\r\n  className?: string;\r\n  small?: boolean;\r\n}\r\n\r\nexport const ListenButton = ({ text, onListen, isPlaying, className, small }: ListenButtonProps) => (\r\n  <button \r\n    className={`rounded-2xl flex space-x-2 border dark:border-primary/30 border-primary/40 \r\n      items-center text-left hover:shadow-md transition-all ${className}`}\r\n    onClick={() => onListen(text)}\r\n    disabled={isPlaying}\r\n  >\r\n    <div className=\"text-primary bg-primary/5 p-4 rounded-xl\">\r\n      <Volume2 className=\"h-6 w-6\" />\r\n    </div>\r\n    {text && <p className=\"px-4\">{text}</p>}\r\n  </button>\r\n);\r\n\r\ninterface SpeakButtonProps {\r\n  onSpeak: () => void;\r\n  isListening: boolean;\r\n  isProcessing: boolean;\r\n  userAnswer?: string;\r\n  customText?: string;\r\n}\r\n\r\nexport const SpeakButton = ({ onSpeak, isListening, isProcessing, customText }: SpeakButtonProps) => (\r\n  <button \r\n    className=\"rounded-2xl flex space-x-2 border dark:border-primary/30 border-primary/40 \r\n      items-center text-left hover:shadow-md transition-all\"\r\n    onClick={onSpeak}\r\n    disabled={isListening || isProcessing}\r\n  >\r\n    <div className=\"text-primary bg-primary/5 p-4 rounded-xl\">\r\n      <Mic className=\"h-6 w-6\" />\r\n    </div>\r\n    <div className=\"px-4\">\r\n      <p>{isListening ? \"Listening...\" : isProcessing ? \"Processing...\" : \"Tap to speak\"}</p>\r\n      {customText && <p className=\"text-sm text-gray-600\">You said: {customText}</p>}\r\n    </div>\r\n  </button>\r\n);\r\n\r\nexport const QuestionContainer: React.FC<{\r\n  title: string;\r\n  children: React.ReactNode;\r\n}> = ({ title, children }) => (\r\n  <div className=\"space-y-4\">\r\n    <h2 className=\"text-2xl font-bold\">{title}</h2>\r\n    {children}\r\n  </div>\r\n);\r\n\r\ninterface WordPopoverProps {\r\n  word: string;\r\n  definition: string;\r\n  phonetic: string;\r\n  onListen: (word: string) => Promise<void>;\r\n}\r\n\r\nexport const WordPopover = ({ word, definition, phonetic, onListen }: WordPopoverProps) => (\r\n    <Popover.Root>\r\n      <Popover.Trigger asChild>\r\n        <button \r\n          className=\"inline-block hover:bg-primary/5 rounded px-1 \r\n            transition-colors duration-200 cursor-pointer\"\r\n        >\r\n          {word}\r\n        </button>\r\n      </Popover.Trigger>\r\n      <Popover.Portal>\r\n        <Popover.Content\r\n          className=\"rounded-xl bg-white dark:bg-gray-800 p-4 shadow-lg \r\n            border dark:border-primary/30 border-primary/40\r\n            animate-in fade-in-0 zoom-in-95\"\r\n        >\r\n          <div className=\"space-y-2 w-64\">\r\n            <div className=\"flex justify-between items-start\">\r\n              <h3 className=\"text-lg font-semibold\">{word}</h3>\r\n              <Popover.Close className=\"rounded-full p-1 hover:bg-gray-100 dark:hover:bg-gray-700\">\r\n                <X className=\"h-4 w-4\" />\r\n              </Popover.Close>\r\n            </div>\r\n            <div className=\"flex items-center gap-2 text-sm text-gray-600 dark:text-gray-300\">\r\n              <span>{phonetic}</span>\r\n              <button \r\n                title=\"Listen\"\r\n                onClick={() => onListen(word)}\r\n                className=\"p-1 rounded-lg hover:bg-primary/10 text-primary\"\r\n              >\r\n                <Volume2 className=\"h-4 w-4\" />\r\n              </button>\r\n            </div>\r\n            <p className=\"text-sm\">{definition}</p>\r\n          </div>\r\n          <Popover.Arrow className=\"fill-white dark:fill-gray-800\" />\r\n        </Popover.Content>\r\n      </Popover.Portal>\r\n    </Popover.Root>\r\n  );\r\n  \r\ninterface InteractiveSentenceProps {\r\n  text: string;\r\n  dictionary: Record<string, { definition: string; phonetic: string }>;\r\n  onListen: (word: string) => Promise<void>;\r\n}\r\n\r\nexport const InteractiveSentence = ({ text, dictionary, onListen }: InteractiveSentenceProps) => {\r\n  const words = text.split(/(\\s+)/);\r\n  \r\n  return (\r\n    <p className=\"leading-relaxed\">\r\n      {words.map((word, index) => {\r\n        const cleanWord = word.toLowerCase().replace(/[.,!?]$/, '');\r\n        const wordInfo = dictionary[cleanWord];\r\n        \r\n        return wordInfo ? (\r\n          <WordPopover\r\n            key={index}\r\n            word={word}\r\n            definition={wordInfo.definition}\r\n            phonetic={wordInfo.phonetic}\r\n            onListen={onListen}\r\n          />\r\n        ) : (\r\n          <span key={index}>{word}</span>\r\n        );\r\n      })}\r\n    </p>\r\n  );\r\n};\r\n  "
        }
    ]
}