{
    "sourceFile": "src/components/formats/Formats.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1740771776345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740771782302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+import { ImagePreview } from \"../common/ImagePreview\";\r\n import {\r\n   InteractiveSentence,\r\n   ListenButton,\r\n   QuestionContainer,\r\n@@ -585,10 +586,10 @@\n   <QuestionContainer title=\"Look and Speak\">\r\n     <div className=\"space-y-4\">\r\n       {question.imageUrl && (\r\n         <div className=\"rounded-xl overflow-hidden border dark:border-primary/30 border-primary/40\">\r\n-          <im\r\n-            src={question.imageUrl}\r\n+          <ImagePreview\r\n+            imageUrl={question.imageUrl}\r\n             alt=\"Speaking prompt\"\r\n             className=\"w-full h-auto object-cover\"\r\n           />\r\n           {question.imageCaption && (\r\n"
                },
                {
                    "date": 1740771812078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -726,20 +726,21 @@\n         <div className=\"p-4 rounded-2xl border dark:border-primary/30 border-primary/40\">\r\n           <h3 className=\"font-semibold mb-2\">Key Points:</h3>\r\n           <ul className=\"space-y-2\">\r\n             {question.keyPoints.map((point, index) => (\r\n-              <motion.li\r\n-                key={index}\r\n-                initial={{ opacity: 0, x: -20 }}\r\n-                animate={{ opacity: 1, x: 0 }}\r\n-                transition={{ delay: index * 0.1 }}\r\n-                className=\"flex items-start gap-2\"\r\n-              >\r\n-                <span className=\"w-6 h-6 flex items-center justify-center rounded-full bg-primary/10 text-sm\">\r\n-                  {index + 1}\r\n-                </span>\r\n-                <span>{point}</span>\r\n-              </motion.li>\r\n+              <li key={index}>\r\n+                <motion.div\r\n+                  initial={{ opacity: 0, x: -20 }}\r\n+                  animate={{ opacity: 1, x: 0 }}\r\n+                  transition={{ delay: index * 0.1 }}\r\n+                  className=\"flex items-start gap-2\"\r\n+                >\r\n+                  <span className=\"w-6 h-6 flex items-center justify-center rounded-full bg-primary/10 text-sm\">\r\n+                    {index + 1}\r\n+                  </span>\r\n+                  <span>{point}</span>\r\n+                </motion.div>\r\n+              </li>\r\n             ))}\r\n           </ul>\r\n         </div>\r\n       )}\r\n"
                },
                {
                    "date": 1740771829491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -827,10 +827,10 @@\n               animate={{ opacity: 1, scale: 1 }}\r\n               transition={{ delay: index * 0.2 }}\r\n               className=\"rounded-xl overflow-hidden border dark:border-primary/30 border-primary/40\"\r\n             >\r\n-              <img\r\n-                src={aid.url}\r\n+              <ImagePreview\r\n+                imageUrl={aid.url}\r\n                 alt={aid.description}\r\n                 className=\"w-full h-48 object-cover\"\r\n               />\r\n               <p className=\"p-3 text-sm bg-primary/5\">{aid.description}</p>\r\n"
                }
            ],
            "date": 1740771776345,
            "name": "Commit-0",
            "content": "import {\r\n  InteractiveSentence,\r\n  ListenButton,\r\n  QuestionContainer,\r\n  SpeakButton,\r\n} from \"./CommonComponents\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\n\r\ninterface SpeakingFormatProps {\r\n  question: {\r\n    prompt: string;\r\n    sampleAnswer?: string;\r\n  };\r\n  onListen: (text: string) => Promise<void>;\r\n  onSpeak: () => void;\r\n  isListening: boolean;\r\n  isProcessing: boolean;\r\n  playingStatus: Record<string, boolean>;\r\n  dictionary: Record<string, { definition: string; phonetic: string }>;\r\n}\r\n\r\ninterface StorytellingFormatProps {\r\n  question: {\r\n    storyPrompt: string;\r\n    keywords?: string[];\r\n    hints?: string[];\r\n  };\r\n  onListen: (text: string) => Promise<void>;\r\n  onSpeak: () => void;\r\n  isListening: boolean;\r\n  isProcessing: boolean;\r\n  dictionary: Record<string, { definition: string; phonetic: string }>;\r\n}\r\n\r\ninterface ListeningFormatProps {\r\n  question: {\r\n    audioContent: string;\r\n    transcript?: string;\r\n    questions?: string[];\r\n  };\r\n  onListen: (text: string) => Promise<void>;\r\n  onSpeak: (index?: number) => void;\r\n  isListening: boolean;\r\n  isProcessing: boolean;\r\n  playingStatus: Record<string, boolean>;\r\n  dictionary: Record<string, { definition: string; phonetic: string }>;\r\n}\r\n\r\ninterface ListenAndRepeatFormatProps {\r\n  question: {\r\n    phrases: string[];\r\n    translations?: string[];\r\n  };\r\n  onListen: (text: string) => Promise<void>;\r\n  onSpeak: (index?: number) => void;\r\n  isListening: boolean;\r\n  isProcessing: boolean;\r\n  playingStatus: Record<string, boolean>;\r\n  dictionary: Record<string, { definition: string; phonetic: string }>;\r\n}\r\n\r\ninterface MultipleChoiceFormatProps {\r\n  question: {\r\n    prompt: string;\r\n    options: string[];\r\n  };\r\n  onListen: (text: string) => Promise<void>;\r\n  onSpeak: () => void;\r\n  isListening: boolean;\r\n  isProcessing: boolean;\r\n  playingStatus: Record<string, boolean>;\r\n  dictionary: Record<string, { definition: string; phonetic: string }>;\r\n  selectedOption?: number;\r\n  onOptionSelect: (index: number) => void;\r\n}\r\n\r\ninterface DebateFormatProps {\r\n  question: {\r\n    topic: string;\r\n    position: string;\r\n    keyPoints?: string[];\r\n  };\r\n  onListen: (text: string) => Promise<void>;\r\n  onSpeak: () => void;\r\n  isListening: boolean;\r\n  isProcessing: boolean;\r\n  dictionary: Record<string, { definition: string; phonetic: string }>;\r\n}\r\n\r\ninterface PresentationFormatProps {\r\n  question: {\r\n    topic: string;\r\n    duration?: string;\r\n    structure?: Array<{ title: string; points?: string[] }>;\r\n    visualAids?: Array<{ url: string; description: string }>;\r\n  };\r\n  onListen: (text: string) => Promise<void>;\r\n  onSpeak: () => void;\r\n  isListening: boolean;\r\n  isProcessing: boolean;\r\n  playingStatus: Record<string, boolean>;\r\n  dictionary: Record<string, { definition: string; phonetic: string }>;\r\n}\r\n\r\ninterface GrammarSpeakingFormatProps {\r\n  question: {\r\n    grammarPoint: string;\r\n    example: string;\r\n    prompt: string;\r\n  };\r\n  onListen: (text: string) => Promise<void>;\r\n  onSpeak: () => void;\r\n  isListening: boolean;\r\n  isProcessing: boolean;\r\n  playingStatus: Record<string, boolean>;\r\n  dictionary: Record<string, { definition: string; phonetic: string }>;\r\n}\r\n\r\ninterface IdiomPracticeFormatProps {\r\n  question: {\r\n    idiom: string;\r\n    meaning: string;\r\n    example: string;\r\n    usageNotes?: string;\r\n    prompt: string;\r\n  };\r\n  onListen: (text: string) => Promise<void>;\r\n  onSpeak: () => void;\r\n  isListening: boolean;\r\n  isProcessing: boolean;\r\n  playingStatus: Record<string, boolean>;\r\n  dictionary: Record<string, { definition: string; phonetic: string }>;\r\n}\r\n\r\ninterface LookAndSpeakFormatProps {\r\n  question: {\r\n    imageUrl?: string;\r\n    imageCaption?: string;\r\n    prompt: string;\r\n    helpfulVocabulary?: string[];\r\n  };\r\n  onListen: (text: string) => Promise<void>;\r\n  onSpeak: () => void;\r\n  isListening: boolean;\r\n  isProcessing: boolean;\r\n  playingStatus: Record<string, boolean>;\r\n  dictionary: Record<string, { definition: string; phonetic: string }>;\r\n}\r\n\r\ninterface WatchAndSpeakFormatProps {\r\n  question: {\r\n    videoUrl?: string;\r\n    prompt: string;\r\n    discussionPoints?: string[];\r\n  };\r\n  onListen: (text: string) => Promise<void>;\r\n  onSpeak: () => void;\r\n  isListening: boolean;\r\n  isProcessing: boolean;\r\n  playingStatus: Record<string, boolean>;\r\n  dictionary: Record<string, { definition: string; phonetic: string }>;\r\n}\r\n\r\n// Speaking Format\r\nconst SpeakingFormat = ({\r\n  question,\r\n  onListen,\r\n  onSpeak,\r\n  ...props\r\n}: SpeakingFormatProps) => (\r\n  <QuestionContainer title=\"Speaking Practice\">\r\n    <div className=\"p-4 rounded-2xl border dark:border-primary/30 border-primary/40\">\r\n      <InteractiveSentence\r\n        text={question.prompt}\r\n        dictionary={props.dictionary}\r\n        onListen={onListen}\r\n      />\r\n      <div className=\"mt-4 flex gap-4\">\r\n        <ListenButton\r\n          text={question.prompt}\r\n          onListen={onListen}\r\n          isPlaying={props.playingStatus[question.prompt]}\r\n        />\r\n        <SpeakButton\r\n          onSpeak={onSpeak}\r\n          isListening={props.isListening}\r\n          isProcessing={props.isProcessing}\r\n        />\r\n      </div>\r\n      {question.sampleAnswer && (\r\n        <motion.div\r\n          initial={{ opacity: 0, height: 0 }}\r\n          animate={{ opacity: 1, height: \"auto\" }}\r\n          className=\"mt-4 p-4 bg-primary/5 rounded-xl\"\r\n        >\r\n          <p className=\"font-semibold mb-2\">Sample Answer:</p>\r\n          <InteractiveSentence\r\n            text={question.sampleAnswer}\r\n            dictionary={props.dictionary}\r\n            onListen={onListen}\r\n          />\r\n        </motion.div>\r\n      )}\r\n    </div>\r\n  </QuestionContainer>\r\n);\r\n\r\n// Storytelling Format\r\nconst StorytellingFormat = ({\r\n  question,\r\n  onListen,\r\n  onSpeak,\r\n  isListening,\r\n  isProcessing,\r\n  dictionary,\r\n}: StorytellingFormatProps) => (\r\n  <QuestionContainer title=\"Storytelling Practice\">\r\n    <div className=\"space-y-4\">\r\n      <div className=\"p-4 rounded-2xl border dark:border-primary/30 border-primary/40\">\r\n        <h3 className=\"font-semibold mb-2\">Story Prompt:</h3>\r\n        <InteractiveSentence\r\n          text={question.storyPrompt}\r\n          dictionary={dictionary}\r\n          onListen={onListen}\r\n        />\r\n      </div>\r\n\r\n      {question.keywords && (\r\n        <div className=\"flex flex-wrap gap-2\">\r\n          {question.keywords.map((keyword, index) => (\r\n            <motion.span\r\n              key={index}\r\n              initial={{ opacity: 0, scale: 0.9 }}\r\n              animate={{ opacity: 1, scale: 1 }}\r\n              transition={{ delay: index * 0.1 }}\r\n              className=\"px-3 py-1 bg-primary/10 rounded-full text-sm\"\r\n            >\r\n              {keyword}\r\n            </motion.span>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      {question.hints && (\r\n        <div className=\"p-4 bg-primary/5 rounded-xl\">\r\n          <h3 className=\"font-semibold mb-2\">Helpful Tips:</h3>\r\n          <ul className=\"list-disc list-inside space-y-1\">\r\n            {question.hints.map((hint, index) => (\r\n              <li key={index}>{hint}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n\r\n      <SpeakButton\r\n        onSpeak={onSpeak}\r\n        isListening={isListening}\r\n        isProcessing={isProcessing}\r\n        customText=\"Tell Your Story\"\r\n      />\r\n    </div>\r\n  </QuestionContainer>\r\n);\r\n\r\n// Listening Format\r\nconst ListeningFormat = ({\r\n  question,\r\n  onListen,\r\n  onSpeak,\r\n  isListening,\r\n  isProcessing,\r\n  playingStatus,\r\n  dictionary,\r\n}: ListeningFormatProps) => (\r\n  <QuestionContainer title=\"Listening Practice\">\r\n    <div className=\"space-y-4\">\r\n      <div className=\"p-4 rounded-2xl border dark:border-primary/30 border-primary/40\">\r\n        <ListenButton\r\n          text=\"Listen to Audio\"\r\n          onListen={() => onListen(question.audioContent)}\r\n          isPlaying={playingStatus[question.audioContent]}\r\n        />\r\n\r\n        {question.transcript && (\r\n          <motion.div\r\n            initial={{ opacity: 0, height: 0 }}\r\n            animate={{ opacity: 1, height: \"auto\" }}\r\n            className=\"mt-4 p-4 bg-primary/5 rounded-xl\"\r\n          >\r\n            <p className=\"font-semibold mb-2\">Transcript:</p>\r\n            <InteractiveSentence\r\n              text={question.transcript}\r\n              dictionary={dictionary}\r\n              onListen={onListen}\r\n            />\r\n          </motion.div>\r\n        )}\r\n      </div>\r\n\r\n      {question.questions?.map((q, index) => (\r\n        <motion.div\r\n          key={index}\r\n          initial={{ opacity: 0, y: 20 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          transition={{ delay: index * 0.2 }}\r\n          className=\"p-4 rounded-2xl border dark:border-primary/30 border-primary/40\"\r\n        >\r\n          <p className=\"font-semibold mb-2\">Question {index + 1}:</p>\r\n          <InteractiveSentence\r\n            text={q}\r\n            dictionary={dictionary}\r\n            onListen={onListen}\r\n          />\r\n          <div className=\"mt-4\">\r\n            <SpeakButton\r\n              onSpeak={() => onSpeak(index)}\r\n              isListening={isListening}\r\n              isProcessing={isProcessing}\r\n              customText=\"Answer\"\r\n            />\r\n          </div>\r\n        </motion.div>\r\n      ))}\r\n    </div>\r\n  </QuestionContainer>\r\n);\r\n\r\n// Listen and Repeat Format\r\nconst ListenAndRepeatFormat = ({\r\n  question,\r\n  onListen,\r\n  onSpeak,\r\n  isListening,\r\n  isProcessing,\r\n  playingStatus,\r\n  dictionary,\r\n}: ListenAndRepeatFormatProps) => (\r\n  <QuestionContainer title=\"Listen and Repeat\">\r\n    <div className=\"space-y-4\">\r\n      {question.phrases.map((phrase, index) => (\r\n        <motion.div\r\n          key={index}\r\n          initial={{ opacity: 0, y: 20 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          transition={{ delay: index * 0.2 }}\r\n          className=\"p-4 rounded-2xl border dark:border-primary/30 border-primary/40\"\r\n        >\r\n          <InteractiveSentence\r\n            text={phrase}\r\n            dictionary={dictionary}\r\n            onListen={onListen}\r\n          />\r\n          <div className=\"mt-4 flex gap-4\">\r\n            <ListenButton\r\n              text={phrase}\r\n              onListen={onListen}\r\n              isPlaying={playingStatus[phrase]}\r\n            />\r\n            <SpeakButton\r\n              onSpeak={() => onSpeak(index)}\r\n              isListening={isListening}\r\n              isProcessing={isProcessing}\r\n              customText=\"Repeat\"\r\n            />\r\n          </div>\r\n\r\n          {question.translations && question.translations[index] && (\r\n            <p className=\"mt-2 text-sm text-gray-600 dark:text-gray-300\">\r\n              Translation: {question.translations[index]}\r\n            </p>\r\n          )}\r\n        </motion.div>\r\n      ))}\r\n    </div>\r\n  </QuestionContainer>\r\n);\r\n\r\n// Multiple Choice Format\r\nconst MultipleChoiceFormat = ({\r\n  question,\r\n  onListen,\r\n  onSpeak,\r\n  isListening,\r\n  isProcessing,\r\n  playingStatus,\r\n  dictionary,\r\n  selectedOption,\r\n  onOptionSelect,\r\n}: MultipleChoiceFormatProps) => (\r\n  <QuestionContainer title=\"Multiple Choice\">\r\n    <div className=\"space-y-4\">\r\n      <div className=\"p-4 rounded-2xl border dark:border-primary/30 border-primary/40\">\r\n        <InteractiveSentence\r\n          text={question.prompt}\r\n          dictionary={dictionary}\r\n          onListen={onListen}\r\n        />\r\n        <div className=\"mt-4\">\r\n          <ListenButton\r\n            text={question.prompt}\r\n            onListen={onListen}\r\n            isPlaying={playingStatus[question.prompt]}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"grid gap-3\">\r\n        {question.options.map((option, index) => (\r\n          <motion.button\r\n            key={index}\r\n            initial={{ opacity: 0, x: -20 }}\r\n            animate={{ opacity: 1, x: 0 }}\r\n            transition={{ delay: index * 0.1 }}\r\n            className={`p-4 rounded-2xl border dark:border-primary/30 border-primary/40 \r\n              text-left transition-all duration-200\r\n              ${\r\n                selectedOption === index\r\n                  ? \"bg-primary/10 border-primary\"\r\n                  : \"hover:bg-primary/5\"\r\n              }`}\r\n            onClick={() => onOptionSelect(index)}\r\n          >\r\n            <div className=\"flex items-center justify-between\">\r\n              <InteractiveSentence\r\n                text={option}\r\n                dictionary={dictionary}\r\n                onListen={onListen}\r\n              />\r\n              <ListenButton\r\n                text={option}\r\n                onListen={() => onListen(option)}\r\n                isPlaying={playingStatus[option]}\r\n                small\r\n              />\r\n            </div>\r\n          </motion.button>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"mt-6\">\r\n        <SpeakButton\r\n          onSpeak={onSpeak}\r\n          isListening={isListening}\r\n          isProcessing={isProcessing}\r\n          customText=\"Explain Your Choice\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </QuestionContainer>\r\n);\r\n\r\n// Grammar Speaking Format\r\nconst GrammarSpeakingFormat = ({\r\n  question,\r\n  onListen,\r\n  onSpeak,\r\n  isListening,\r\n  isProcessing,\r\n  playingStatus,\r\n  dictionary,\r\n}: GrammarSpeakingFormatProps) => (\r\n  <QuestionContainer title=\"Grammar Speaking Practice\">\r\n    <div className=\"space-y-4\">\r\n      <div className=\"p-4 bg-primary/5 rounded-xl\">\r\n        <h3 className=\"font-semibold mb-2\">Grammar Point:</h3>\r\n        <p className=\"text-lg\">{question.grammarPoint}</p>\r\n        <div className=\"mt-4\">\r\n          <h3 className=\"font-semibold mb-2\">Example:</h3>\r\n          <InteractiveSentence\r\n            text={question.example}\r\n            dictionary={dictionary}\r\n            onListen={onListen}\r\n          />\r\n          <ListenButton\r\n            text={question.example}\r\n            onListen={onListen}\r\n            isPlaying={playingStatus[question.example]}\r\n            small\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"p-4 rounded-2xl border dark:border-primary/30 border-primary/40\">\r\n        <h3 className=\"font-semibold mb-2\">Practice:</h3>\r\n        <InteractiveSentence\r\n          text={question.prompt}\r\n          dictionary={dictionary}\r\n          onListen={onListen}\r\n        />\r\n        <div className=\"mt-4 flex gap-4\">\r\n          <ListenButton\r\n            text={question.prompt}\r\n            onListen={onListen}\r\n            isPlaying={playingStatus[question.prompt]}\r\n          />\r\n          <SpeakButton\r\n            onSpeak={onSpeak}\r\n            isListening={isListening}\r\n            isProcessing={isProcessing}\r\n            customText=\"Practice Grammar\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </QuestionContainer>\r\n);\r\n\r\n// Idiom Practice Format\r\nconst IdiomPracticeFormat = ({\r\n  question,\r\n  onListen,\r\n  onSpeak,\r\n  isListening,\r\n  isProcessing,\r\n  playingStatus,\r\n  dictionary,\r\n}: IdiomPracticeFormatProps) => (\r\n  <QuestionContainer title=\"Idiom Practice\">\r\n    <div className=\"space-y-4\">\r\n      <div className=\"p-4 rounded-2xl border dark:border-primary/30 border-primary/40\">\r\n        <div className=\"flex items-center gap-2\">\r\n          <h3 className=\"text-xl font-bold\">\"{question.idiom}\"</h3>\r\n          <ListenButton\r\n            text={question.idiom}\r\n            onListen={onListen}\r\n            isPlaying={playingStatus[question.idiom]}\r\n            small\r\n          />\r\n        </div>\r\n\r\n        <div className=\"mt-4\">\r\n          <p className=\"font-semibold\">Meaning:</p>\r\n          <p className=\"text-gray-600 dark:text-gray-300\">{question.meaning}</p>\r\n        </div>\r\n\r\n        <div className=\"mt-4\">\r\n          <p className=\"font-semibold\">Example Usage:</p>\r\n          <InteractiveSentence\r\n            text={question.example}\r\n            dictionary={dictionary}\r\n            onListen={onListen}\r\n          />\r\n          <ListenButton\r\n            text={question.example}\r\n            onListen={onListen}\r\n            isPlaying={playingStatus[question.example]}\r\n            small\r\n          />\r\n        </div>\r\n\r\n        {question.usageNotes && (\r\n          <div className=\"mt-4 p-3 bg-primary/5 rounded-lg\">\r\n            <p className=\"font-semibold\">Usage Notes:</p>\r\n            <p className=\"text-sm\">{question.usageNotes}</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"p-4 rounded-2xl border dark:border-primary/30 border-primary/40\">\r\n        <p className=\"font-semibold mb-2\">Your Task:</p>\r\n        <p>{question.prompt}</p>\r\n        <div className=\"mt-4\">\r\n          <SpeakButton\r\n            onSpeak={onSpeak}\r\n            isListening={isListening}\r\n            isProcessing={isProcessing}\r\n            customText=\"Use the Idiom\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </QuestionContainer>\r\n);\r\n\r\n// Look and Speak Format\r\nconst LookAndSpeakFormat = ({\r\n  question,\r\n  onListen,\r\n  onSpeak,\r\n  isListening,\r\n  isProcessing,\r\n  playingStatus,\r\n  dictionary,\r\n}: LookAndSpeakFormatProps) => (\r\n  <QuestionContainer title=\"Look and Speak\">\r\n    <div className=\"space-y-4\">\r\n      {question.imageUrl && (\r\n        <div className=\"rounded-xl overflow-hidden border dark:border-primary/30 border-primary/40\">\r\n          <im\r\n            src={question.imageUrl}\r\n            alt=\"Speaking prompt\"\r\n            className=\"w-full h-auto object-cover\"\r\n          />\r\n          {question.imageCaption && (\r\n            <p className=\"p-3 text-sm text-gray-600 dark:text-gray-300 bg-primary/5\">\r\n              {question.imageCaption}\r\n            </p>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"p-4 rounded-2xl border dark:border-primary/30 border-primary/40\">\r\n        <InteractiveSentence\r\n          text={question.prompt}\r\n          dictionary={dictionary}\r\n          onListen={onListen}\r\n        />\r\n        <div className=\"mt-4 flex gap-4\">\r\n          <ListenButton\r\n            text={question.prompt}\r\n            onListen={onListen}\r\n            isPlaying={playingStatus[question.prompt]}\r\n          />\r\n          <SpeakButton\r\n            onSpeak={onSpeak}\r\n            isListening={isListening}\r\n            isProcessing={isProcessing}\r\n            customText=\"Describe the Image\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {question.helpfulVocabulary && (\r\n        <div className=\"p-4 bg-primary/5 rounded-xl\">\r\n          <p className=\"font-semibold mb-2\">Helpful Vocabulary:</p>\r\n          <div className=\"flex flex-wrap gap-2\">\r\n            {question.helpfulVocabulary.map((word, index) => (\r\n              <motion.span\r\n                key={index}\r\n                initial={{ opacity: 0, scale: 0.9 }}\r\n                animate={{ opacity: 1, scale: 1 }}\r\n                transition={{ delay: index * 0.1 }}\r\n                className=\"px-3 py-1 bg-white dark:bg-gray-800 rounded-full text-sm \r\n                  border dark:border-primary/30 border-primary/40\"\r\n              >\r\n                {word}\r\n              </motion.span>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  </QuestionContainer>\r\n);\r\n\r\n// Watch and Speak Format\r\nconst WatchAndSpeakFormat = ({\r\n  question,\r\n  onListen,\r\n  onSpeak,\r\n  isListening,\r\n  isProcessing,\r\n  playingStatus,\r\n  dictionary,\r\n}: WatchAndSpeakFormatProps) => (\r\n  <QuestionContainer title=\"Watch and Speak\">\r\n    <div className=\"space-y-4\">\r\n      {question.videoUrl && (\r\n        <div className=\"rounded-xl overflow-hidden border dark:border-primary/30 border-primary/40\">\r\n          <video src={question.videoUrl} controls className=\"w-full h-auto\" />\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"p-4 rounded-2xl border dark:border-primary/30 border-primary/40\">\r\n        <InteractiveSentence\r\n          text={question.prompt}\r\n          dictionary={dictionary}\r\n          onListen={onListen}\r\n        />\r\n        <div className=\"mt-4 flex gap-4\">\r\n          <ListenButton\r\n            text={question.prompt}\r\n            onListen={onListen}\r\n            isPlaying={playingStatus[question.prompt]}\r\n          />\r\n          <SpeakButton\r\n            onSpeak={onSpeak}\r\n            isListening={isListening}\r\n            isProcessing={isProcessing}\r\n            customText=\"Discuss the Video\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {question.discussionPoints && (\r\n        <div className=\"p-4 bg-primary/5 rounded-xl\">\r\n          <p className=\"font-semibold mb-2\">Discussion Points:</p>\r\n          <ul className=\"list-disc list-inside space-y-2\">\r\n            {question.discussionPoints.map((point: string, index: number) => (\r\n              <li key={index}>{point}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  </QuestionContainer>\r\n);\r\n\r\n// Debate Format\r\nconst DebateFormat = ({\r\n  question,\r\n  onListen,\r\n  onSpeak,\r\n  isListening,\r\n  isProcessing,\r\n  dictionary,\r\n}: DebateFormatProps) => (\r\n  <QuestionContainer title=\"Debate Practice\">\r\n    <div className=\"space-y-4\">\r\n      <div className=\"p-4 bg-primary/5 rounded-xl\">\r\n        <h3 className=\"text-xl font-bold mb-4\">Topic:</h3>\r\n        <InteractiveSentence\r\n          text={question.topic}\r\n          dictionary={dictionary}\r\n          onListen={onListen}\r\n        />\r\n\r\n        <div className=\"mt-4\">\r\n          <p className=\"font-semibold\">Your Position:</p>\r\n          <p className=\"text-lg\">{question.position}</p>\r\n        </div>\r\n      </div>\r\n\r\n      {question.keyPoints && (\r\n        <div className=\"p-4 rounded-2xl border dark:border-primary/30 border-primary/40\">\r\n          <h3 className=\"font-semibold mb-2\">Key Points:</h3>\r\n          <ul className=\"space-y-2\">\r\n            {question.keyPoints.map((point, index) => (\r\n              <motion.li\r\n                key={index}\r\n                initial={{ opacity: 0, x: -20 }}\r\n                animate={{ opacity: 1, x: 0 }}\r\n                transition={{ delay: index * 0.1 }}\r\n                className=\"flex items-start gap-2\"\r\n              >\r\n                <span className=\"w-6 h-6 flex items-center justify-center rounded-full bg-primary/10 text-sm\">\r\n                  {index + 1}\r\n                </span>\r\n                <span>{point}</span>\r\n              </motion.li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"p-4 rounded-2xl border dark:border-primary/30 border-primary/40\">\r\n        <h3 className=\"font-semibold mb-2\">Prepare Your Argument:</h3>\r\n        <ul className=\"list-disc list-inside space-y-2 mb-4\">\r\n          <li>Consider your main points</li>\r\n          <li>Think about potential counterarguments</li>\r\n          <li>Use persuasive language</li>\r\n          <li>Support with examples</li>\r\n        </ul>\r\n        <SpeakButton\r\n          onSpeak={onSpeak}\r\n          isListening={isListening}\r\n          isProcessing={isProcessing}\r\n          customText=\"Present Argument\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </QuestionContainer>\r\n);\r\n\r\n// Presentation Format\r\nconst PresentationFormat = ({\r\n  question,\r\n  onListen,\r\n  onSpeak,\r\n  isListening,\r\n  isProcessing,\r\n  playingStatus,\r\n  dictionary,\r\n}: PresentationFormatProps) => (\r\n  <QuestionContainer title=\"Presentation Practice\">\r\n    <div className=\"space-y-4\">\r\n      <div className=\"p-4 bg-primary/5 rounded-xl\">\r\n        <h3 className=\"text-xl font-bold mb-2\">Topic:</h3>\r\n        <p className=\"text-lg\">{question.topic}</p>\r\n\r\n        {question.duration && (\r\n          <p className=\"mt-4 text-sm text-gray-600 dark:text-gray-300\">\r\n            Target Duration: {question.duration} minutes\r\n          </p>\r\n        )}\r\n      </div>\r\n\r\n      {question.structure && (\r\n        <div className=\"p-4 rounded-2xl border dark:border-primary/30 border-primary/40\">\r\n          <h3 className=\"font-semibold mb-4\">Presentation Structure:</h3>\r\n          <div className=\"space-y-4\">\r\n            {question.structure.map((section, index) => (\r\n              <motion.div\r\n                key={index}\r\n                initial={{ opacity: 0, y: 20 }}\r\n                animate={{ opacity: 1, y: 0 }}\r\n                transition={{ delay: index * 0.1 }}\r\n                className=\"flex items-start gap-3\"\r\n              >\r\n                <div className=\"w-8 h-8 flex items-center justify-center rounded-full bg-primary/10\">\r\n                  {index + 1}\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                  <p className=\"font-medium\">{section.title}</p>\r\n                  {section.points && (\r\n                    <ul className=\"mt-2 list-disc list-inside text-sm text-gray-600 dark:text-gray-300\">\r\n                      {section.points.map((point, i) => (\r\n                        <li key={i}>{point}</li>\r\n                      ))}\r\n                    </ul>\r\n                  )}\r\n                </div>\r\n              </motion.div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {question.visualAids && (\r\n        <div className=\"grid grid-cols-2 gap-4\">\r\n          {question.visualAids.map((aid, index) => (\r\n            <motion.div\r\n              key={index}\r\n              initial={{ opacity: 0, scale: 0.9 }}\r\n              animate={{ opacity: 1, scale: 1 }}\r\n              transition={{ delay: index * 0.2 }}\r\n              className=\"rounded-xl overflow-hidden border dark:border-primary/30 border-primary/40\"\r\n            >\r\n              <img\r\n                src={aid.url}\r\n                alt={aid.description}\r\n                className=\"w-full h-48 object-cover\"\r\n              />\r\n              <p className=\"p-3 text-sm bg-primary/5\">{aid.description}</p>\r\n            </motion.div>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"p-4 rounded-2xl border dark:border-primary/30 border-primary/40\">\r\n        <h3 className=\"font-semibold mb-4\">Presentation Tips:</h3>\r\n        <ul className=\"list-disc list-inside space-y-2 mb-4\">\r\n          <li>Start with a strong opening</li>\r\n          <li>Use clear transitions between sections</li>\r\n          <li>Maintain eye contact with your audience</li>\r\n          <li>End with a memorable conclusion</li>\r\n        </ul>\r\n        <SpeakButton\r\n          onSpeak={onSpeak}\r\n          isListening={isListening}\r\n          isProcessing={isProcessing}\r\n          customText=\"Start Presentation\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </QuestionContainer>\r\n);\r\n\r\nexport const QuestionFormats = {\r\n  SpeakingFormat,\r\n  DebateFormat,\r\n  GrammarSpeakingFormat,\r\n  StorytellingFormat,\r\n  ListeningFormat,\r\n  ListenAndRepeatFormat,\r\n  MultipleChoiceFormat,\r\n  PresentationFormat,\r\n  LookAndSpeakFormat,\r\n  WatchAndSpeakFormat,\r\n  IdiomPracticeFormat,\r\n};\r\n"
        }
    ]
}