{
    "sourceFile": "src/components/admin/VoiceManagement.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1739014925869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739014974310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,400 @@\n- \n\\ No newline at end of file\n+\"use client\";\n+\n+import React, { useState, useCallback, useEffect, useRef } from 'react';\n+import { Card } from \"@/components/ui/card\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/ui/input\";\n+import { useToast } from \"@/components/ui/use-toast\";\n+import { Plus, Mic, Play, Pause, Save, Trash2, Star } from \"lucide-react\";\n+import supabase from '@/lib/supabase/client';\n+import speechService from '@/lib/fish-speech';\n+\n+interface Voice {\n+  id: string;\n+  name: string;\n+  description: string;\n+  language: string;\n+  gender: 'male' | 'female';\n+  sampleUrl: string;\n+  isDefault: boolean;\n+  schoolId: string;\n+}\n+\n+interface VoiceManagementProps {\n+  schoolId: string;\n+  userRole: 'super_admin' | 'SCHOOL_LEADER' | 'SCHOOL_PRINCIPAL';\n+  isAdmin?: boolean;\n+}\n+\n+export function VoiceManagement({ schoolId, userRole, isAdmin = false }: VoiceManagementProps) {\n+  const { toast } = useToast();\n+  const [voices, setVoices] = useState<Voice[]>([]);\n+  const [isRecording, setIsRecording] = useState(false);\n+  const [isPlaying, setIsPlaying] = useState<string | null>(null);\n+  const [uploadProgress, setUploadProgress] = useState(0);\n+  const [newVoice, setNewVoice] = useState({\n+    name: '',\n+    description: '',\n+    language: 'English',\n+    gender: 'female' as 'male' | 'female',\n+  });\n+  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n+  const audioChunksRef = useRef<Blob[]>([]);\n+\n+  // Load voices from database\n+  const loadVoices = useCallback(async () => {\n+    try {\n+      let query = supabase\n+        .from('voices')\n+        .select('*');\n+\n+      // If not super_admin, filter by school\n+      if (!isAdmin) {\n+        query = query.eq('school_id', schoolId);\n+      }\n+\n+      const { data, error } = await query;\n+\n+      if (error) throw error;\n+      setVoices(data || []);\n+\n+      // Load default voice if exists\n+      const defaultVoice = data?.find(voice => voice.isDefault);\n+      if (defaultVoice) {\n+        const { data: sampleData, error: sampleError } = await supabase.storage\n+          .from('voice-samples')\n+          .download(defaultVoice.sampleUrl);\n+\n+        if (sampleError) throw sampleError;\n+        const sampleBuffer = await sampleData.arrayBuffer();\n+        await speechService.setVoice(sampleBuffer);\n+      }\n+    } catch (error) {\n+      console.error('Error loading voices:', error);\n+      toast({\n+        title: \"Error\",\n+        description: \"Failed to load voices. Please try again.\",\n+        variant: \"destructive\",\n+      });\n+    }\n+  }, [schoolId, isAdmin, toast]);\n+\n+  useEffect(() => {\n+    loadVoices();\n+  }, [loadVoices]);\n+\n+  // Handle voice recording\n+  const handleRecord = async () => {\n+    try {\n+      if (isRecording) {\n+        // Stop recording\n+        mediaRecorderRef.current?.stop();\n+        setIsRecording(false);\n+      } else {\n+        // Start recording\n+        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n+        const mediaRecorder = new MediaRecorder(stream);\n+        \n+        mediaRecorder.ondataavailable = (event) => {\n+          if (event.data.size > 0) {\n+            audioChunksRef.current.push(event.data);\n+          }\n+        };\n+\n+        mediaRecorder.onstop = async () => {\n+          try {\n+            const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/wav' });\n+            audioChunksRef.current = []; // Clear chunks for next recording\n+\n+            // Upload to storage\n+            const filename = `voices/${schoolId}/${Date.now()}-${newVoice.name.toLowerCase().replace(/\\s+/g, '-')}.wav`;\n+            const { data: uploadData, error: uploadError } = await supabase.storage\n+              .from('voice-samples')\n+              .upload(filename, audioBlob);\n+\n+            if (uploadError) throw uploadError;\n+\n+            // Create voice record\n+            const voiceData = {\n+              name: newVoice.name,\n+              description: newVoice.description,\n+              language: newVoice.language,\n+              gender: newVoice.gender,\n+              sample_url: uploadData.path,\n+              school_id: schoolId,\n+              is_default: voices.length === 0, // First voice becomes default\n+            };\n+\n+            const { error: dbError } = await supabase\n+              .from('voices')\n+              .insert([voiceData]);\n+\n+            if (dbError) throw dbError;\n+\n+            toast({\n+              title: \"Success\",\n+              description: \"Voice recorded and saved successfully.\",\n+            });\n+\n+            // Reset form\n+            setNewVoice({\n+              name: '',\n+              description: '',\n+              language: 'English',\n+              gender: 'female' as 'male' | 'female',\n+            });\n+\n+            // Reload voices\n+            loadVoices();\n+          } catch (error) {\n+            console.error('Error saving recorded voice:', error);\n+            toast({\n+              title: \"Error\",\n+              description: \"Failed to save recorded voice. Please try again.\",\n+              variant: \"destructive\",\n+            });\n+          }\n+        };\n+\n+        mediaRecorderRef.current = mediaRecorder;\n+        mediaRecorder.start();\n+        setIsRecording(true);\n+      }\n+    } catch (error) {\n+      console.error('Error recording voice:', error);\n+      toast({\n+        title: \"Error\",\n+        description: \"Failed to record voice. Please check your microphone.\",\n+        variant: \"destructive\",\n+      });\n+    }\n+  };\n+\n+  // Handle voice playback\n+  const handlePlayback = async (voice: Voice) => {\n+    try {\n+      if (isPlaying === voice.id) {\n+        // Stop playback logic\n+        setIsPlaying(null);\n+        return;\n+      }\n+\n+      const { data: sampleData, error: sampleError } = await supabase.storage\n+        .from('voice-samples')\n+        .download(voice.sampleUrl);\n+\n+      if (sampleError) throw sampleError;\n+      const sampleBuffer = await sampleData.arrayBuffer();\n+      await speechService.playAudio(sampleBuffer);\n+      setIsPlaying(voice.id);\n+    } catch (error) {\n+      console.error('Error playing voice:', error);\n+      toast({\n+        title: \"Error\",\n+        description: \"Failed to play voice sample. Please try again.\",\n+        variant: \"destructive\",\n+      });\n+    }\n+  };\n+\n+  // Set default voice\n+  const setDefaultVoice = async (voiceId: string) => {\n+    try {\n+      const { error } = await supabase\n+        .from('voices')\n+        .update({ is_default: true })\n+        .eq('id', voiceId)\n+        .eq('school_id', schoolId);\n+\n+      if (error) throw error;\n+\n+      toast({\n+        title: \"Success\",\n+        description: \"Default voice updated successfully.\",\n+      });\n+\n+      loadVoices();\n+    } catch (error) {\n+      console.error('Error setting default voice:', error);\n+      toast({\n+        title: \"Error\",\n+        description: \"Failed to set default voice. Please try again.\",\n+        variant: \"destructive\",\n+      });\n+    }\n+  };\n+\n+  // Delete voice\n+  const deleteVoice = async (voiceId: string) => {\n+    try {\n+      const { error } = await supabase\n+        .from('voices')\n+        .delete()\n+        .eq('id', voiceId)\n+        .eq('school_id', schoolId);\n+\n+      if (error) throw error;\n+\n+      toast({\n+        title: \"Success\",\n+        description: \"Voice deleted successfully.\",\n+      });\n+\n+      loadVoices();\n+    } catch (error) {\n+      console.error('Error deleting voice:', error);\n+      toast({\n+        title: \"Error\",\n+        description: \"Failed to delete voice. Please try again.\",\n+        variant: \"destructive\",\n+      });\n+    }\n+  };\n+\n+  return (\n+    <div className=\"space-y-4\">\n+      <div className=\"flex justify-between items-center\">\n+        <h2 className=\"text-lg font-medium\">\n+          {isAdmin ? 'Global Voice Management' : 'School Voice Management'}\n+        </h2>\n+        <div className=\"flex gap-2\">\n+          <Button\n+            onClick={handleRecord}\n+            variant={isRecording ? \"destructive\" : \"default\"}\n+            className=\"flex items-center gap-2\"\n+            disabled={!newVoice.name} // Disable if no name is provided\n+          >\n+            <Mic className=\"h-4 w-4\" />\n+            {isRecording ? \"Stop Recording\" : \"Record New Voice\"}\n+          </Button>\n+        </div>\n+      </div>\n+\n+      {/* New Voice Form */}\n+      <Card className=\"p-4\">\n+        <div className=\"space-y-4\">\n+          <div>\n+            <label htmlFor=\"voice-name\" className=\"block text-sm font-medium text-gray-700\">\n+              Voice Name\n+            </label>\n+            <Input\n+              id=\"voice-name\"\n+              placeholder=\"Enter voice name\"\n+              value={newVoice.name}\n+              onChange={(e) => setNewVoice({ ...newVoice, name: e.target.value })}\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <label htmlFor=\"voice-description\" className=\"block text-sm font-medium text-gray-700\">\n+              Description\n+            </label>\n+            <Input\n+              id=\"voice-description\"\n+              placeholder=\"Enter voice description\"\n+              value={newVoice.description}\n+              onChange={(e) => setNewVoice({ ...newVoice, description: e.target.value })}\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div className=\"flex gap-4\">\n+            <div className=\"flex-1\">\n+              <label htmlFor=\"voice-language\" className=\"block text-sm font-medium text-gray-700\">\n+                Language\n+              </label>\n+              <select\n+                id=\"voice-language\"\n+                value={newVoice.language}\n+                onChange={(e) => setNewVoice({ ...newVoice, language: e.target.value })}\n+                className=\"mt-1 block w-full rounded-md border-gray-300\"\n+                aria-label=\"Select voice language\"\n+              >\n+                <option value=\"English\">English</option>\n+                <option value=\"Spanish\">Spanish</option>\n+                <option value=\"French\">French</option>\n+              </select>\n+            </div>\n+            <div className=\"flex-1\">\n+              <label htmlFor=\"voice-gender\" className=\"block text-sm font-medium text-gray-700\">\n+                Gender\n+              </label>\n+              <select\n+                id=\"voice-gender\"\n+                value={newVoice.gender}\n+                onChange={(e) => setNewVoice({ ...newVoice, gender: e.target.value as 'male' | 'female' })}\n+                className=\"mt-1 block w-full rounded-md border-gray-300\"\n+                aria-label=\"Select voice gender\"\n+              >\n+                <option value=\"female\">Female</option>\n+                <option value=\"male\">Male</option>\n+              </select>\n+            </div>\n+          </div>\n+          {isRecording && (\n+            <div className=\"flex items-center gap-2 text-sm text-red-500\">\n+              <span className=\"animate-pulse\">●</span> Recording in progress...\n+            </div>\n+          )}\n+        </div>\n+      </Card>\n+\n+      {/* Voice List */}\n+      <div className=\"grid gap-4\">\n+        {voices.map((voice) => (\n+          <Card key={voice.id} className=\"p-4\">\n+            <div className=\"flex items-center justify-between\">\n+              <div>\n+                <h3 className=\"font-medium\">{voice.name}</h3>\n+                <p className=\"text-sm text-muted-foreground\">{voice.description}</p>\n+                <div className=\"flex gap-2 mt-2\">\n+                  <span className=\"px-2 py-1 bg-primary/10 rounded-md text-xs\">\n+                    {voice.language}\n+                  </span>\n+                  <span className=\"px-2 py-1 bg-primary/10 rounded-md text-xs\">\n+                    {voice.gender}\n+                  </span>\n+                  {voice.isDefault && (\n+                    <span className=\"px-2 py-1 bg-green-500/10 text-green-500 rounded-md text-xs\">\n+                      Default\n+                    </span>\n+                  )}\n+                </div>\n+              </div>\n+              <div className=\"flex gap-2\">\n+                <Button\n+                  variant=\"outline\"\n+                  size=\"icon\"\n+                  onClick={() => handlePlayback(voice)}\n+                >\n+                  {isPlaying === voice.id ? (\n+                    <Pause className=\"h-4 w-4\" />\n+                  ) : (\n+                    <Play className=\"h-4 w-4\" />\n+                  )}\n+                </Button>\n+                {!voice.isDefault && (\n+                  <Button\n+                    variant=\"outline\"\n+                    size=\"icon\"\n+                    onClick={() => setDefaultVoice(voice.id)}\n+                  >\n+                    <Star className=\"h-4 w-4\" />\n+                  </Button>\n+                )}\n+                {(isAdmin || userRole === 'SCHOOL_LEADER') && (\n+                  <Button\n+                    variant=\"destructive\"\n+                    size=\"icon\"\n+                    onClick={() => deleteVoice(voice.id)}\n+                  >\n+                    <Trash2 className=\"h-4 w-4\" />\n+                  </Button>\n+                )}\n+              </div>\n+            </div>\n+          </Card>\n+        ))}\n+      </div>\n+    </div>\n+  );\n+} \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739015044607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,14 @@\n \"use client\";\n \n import React, { useState, useCallback, useEffect, useRef } from 'react';\n-import { Card } from \"@/components/ui/card\";\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n import { Button } from \"@/components/ui/button\";\n import { Input } from \"@/components/ui/input\";\n+import { Progress } from \"@/components/ui/progress\";\n import { useToast } from \"@/components/ui/use-toast\";\n-import { Plus, Mic, Play, Pause, Save, Trash2, Star } from \"lucide-react\";\n+import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n+import { Mic, Upload, Play, Pause, Save, Plus, Trash2 } from \"lucide-react\";\n import supabase from '@/lib/supabase/client';\n import speechService from '@/lib/fish-speech';\n \n interface Voice {\n@@ -16,58 +18,58 @@\n   language: string;\n   gender: 'male' | 'female';\n   sampleUrl: string;\n   isDefault: boolean;\n+  createdAt: string;\n   schoolId: string;\n }\n \n interface VoiceManagementProps {\n   schoolId: string;\n-  userRole: 'super_admin' | 'SCHOOL_LEADER' | 'SCHOOL_PRINCIPAL';\n-  isAdmin?: boolean;\n+  userRole: 'SCHOOL_LEADER' | 'SCHOOL_PRINCIPAL';\n }\n \n-export function VoiceManagement({ schoolId, userRole, isAdmin = false }: VoiceManagementProps) {\n+export function VoiceManagement({ schoolId, userRole }: VoiceManagementProps) {\n   const { toast } = useToast();\n   const [voices, setVoices] = useState<Voice[]>([]);\n   const [isRecording, setIsRecording] = useState(false);\n-  const [isPlaying, setIsPlaying] = useState<string | null>(null);\n+  const [isPlaying, setIsPlaying] = useState(false);\n   const [uploadProgress, setUploadProgress] = useState(0);\n   const [newVoice, setNewVoice] = useState({\n     name: '',\n     description: '',\n     language: 'English',\n-    gender: 'female' as 'male' | 'female',\n+    gender: 'female' as const,\n   });\n+\n   const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n-  const audioChunksRef = useRef<Blob[]>([]);\n+  const audioSourceRef = useRef<AudioBufferSourceNode | null>(null);\n \n   // Load voices from database\n   const loadVoices = useCallback(async () => {\n     try {\n-      let query = supabase\n+      const { data, error } = await supabase\n         .from('voices')\n-        .select('*');\n+        .select('*')\n+        .eq('school_id', schoolId);\n \n-      // If not super_admin, filter by school\n-      if (!isAdmin) {\n-        query = query.eq('school_id', schoolId);\n-      }\n-\n-      const { data, error } = await query;\n-\n       if (error) throw error;\n       setVoices(data || []);\n \n       // Load default voice if exists\n       const defaultVoice = data?.find(voice => voice.isDefault);\n       if (defaultVoice) {\n+        // Get the voice sample from storage\n         const { data: sampleData, error: sampleError } = await supabase.storage\n           .from('voice-samples')\n           .download(defaultVoice.sampleUrl);\n \n         if (sampleError) throw sampleError;\n+        \n+        // Convert Blob to ArrayBuffer\n         const sampleBuffer = await sampleData.arrayBuffer();\n+        \n+        // Set the voice in the speech service\n         await speechService.setVoice(sampleBuffer);\n       }\n     } catch (error) {\n       console.error('Error loading voices:', error);\n@@ -76,9 +78,9 @@\n         description: \"Failed to load voices. Please try again.\",\n         variant: \"destructive\",\n       });\n     }\n-  }, [schoolId, isAdmin, toast]);\n+  }, [schoolId, toast]);\n \n   useEffect(() => {\n     loadVoices();\n   }, [loadVoices]);\n@@ -86,126 +88,146 @@\n   // Handle voice recording\n   const handleRecord = async () => {\n     try {\n       if (isRecording) {\n-        // Stop recording\n         mediaRecorderRef.current?.stop();\n         setIsRecording(false);\n       } else {\n-        // Start recording\n-        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n-        const mediaRecorder = new MediaRecorder(stream);\n-        \n-        mediaRecorder.ondataavailable = (event) => {\n-          if (event.data.size > 0) {\n-            audioChunksRef.current.push(event.data);\n+        mediaRecorderRef.current = await speechService.startRecording(\n+          // Handle transcribed text\n+          async (text) => {\n+            console.log('Transcribed text:', text);\n+            // You can use this text for voice training or verification\n           }\n-        };\n-\n-        mediaRecorder.onstop = async () => {\n-          try {\n-            const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/wav' });\n-            audioChunksRef.current = []; // Clear chunks for next recording\n-\n-            // Upload to storage\n-            const filename = `voices/${schoolId}/${Date.now()}-${newVoice.name.toLowerCase().replace(/\\s+/g, '-')}.wav`;\n-            const { data: uploadData, error: uploadError } = await supabase.storage\n-              .from('voice-samples')\n-              .upload(filename, audioBlob);\n-\n-            if (uploadError) throw uploadError;\n-\n-            // Create voice record\n-            const voiceData = {\n-              name: newVoice.name,\n-              description: newVoice.description,\n-              language: newVoice.language,\n-              gender: newVoice.gender,\n-              sample_url: uploadData.path,\n-              school_id: schoolId,\n-              is_default: voices.length === 0, // First voice becomes default\n-            };\n-\n-            const { error: dbError } = await supabase\n-              .from('voices')\n-              .insert([voiceData]);\n-\n-            if (dbError) throw dbError;\n-\n-            toast({\n-              title: \"Success\",\n-              description: \"Voice recorded and saved successfully.\",\n-            });\n-\n-            // Reset form\n-            setNewVoice({\n-              name: '',\n-              description: '',\n-              language: 'English',\n-              gender: 'female' as 'male' | 'female',\n-            });\n-\n-            // Reload voices\n-            loadVoices();\n-          } catch (error) {\n-            console.error('Error saving recorded voice:', error);\n-            toast({\n-              title: \"Error\",\n-              description: \"Failed to save recorded voice. Please try again.\",\n-              variant: \"destructive\",\n-            });\n-          }\n-        };\n-\n-        mediaRecorderRef.current = mediaRecorder;\n-        mediaRecorder.start();\n+        );\n         setIsRecording(true);\n       }\n     } catch (error) {\n-      console.error('Error recording voice:', error);\n+      console.error('Error handling recording:', error);\n       toast({\n         title: \"Error\",\n-        description: \"Failed to record voice. Please check your microphone.\",\n+        description: \"Failed to handle recording. Please check your microphone.\",\n         variant: \"destructive\",\n       });\n     }\n   };\n \n   // Handle voice playback\n   const handlePlayback = async (voice: Voice) => {\n     try {\n-      if (isPlaying === voice.id) {\n-        // Stop playback logic\n-        setIsPlaying(null);\n+      if (isPlaying) {\n+        audioSourceRef.current?.stop();\n+        setIsPlaying(false);\n         return;\n       }\n \n+      // Get the voice sample from storage\n       const { data: sampleData, error: sampleError } = await supabase.storage\n         .from('voice-samples')\n         .download(voice.sampleUrl);\n \n       if (sampleError) throw sampleError;\n+\n+      // Convert Blob to ArrayBuffer\n       const sampleBuffer = await sampleData.arrayBuffer();\n-      await speechService.playAudio(sampleBuffer);\n-      setIsPlaying(voice.id);\n+\n+      // Set the voice for playback\n+      await speechService.setVoice(sampleBuffer);\n+\n+      // Generate sample audio\n+      const audioBuffer = await speechService.textToSpeech(\n+        \"This is a sample text to demonstrate the voice.\",\n+        {\n+          language: voice.language,\n+          speed: 1.0,\n+          pitch: 1.0\n+        }\n+      );\n+\n+      // Play the audio\n+      audioSourceRef.current = await speechService.playAudio(audioBuffer);\n+      setIsPlaying(true);\n+\n+      // Handle playback completion\n+      audioSourceRef.current.onended = () => {\n+        setIsPlaying(false);\n+        audioSourceRef.current = null;\n+      };\n     } catch (error) {\n-      console.error('Error playing voice:', error);\n+      console.error('Error playing voice sample:', error);\n       toast({\n         title: \"Error\",\n         description: \"Failed to play voice sample. Please try again.\",\n         variant: \"destructive\",\n       });\n+      setIsPlaying(false);\n     }\n   };\n \n+  // Handle voice upload\n+  const handleUpload = async (file: File) => {\n+    try {\n+      // First, process the voice sample\n+      const voiceBuffer = await file.arrayBuffer();\n+      const voiceConfig = await speechService.cloneVoice(voiceBuffer);\n+\n+      // Upload to storage\n+      const filename = `voices/${schoolId}/${Date.now()}-${file.name}`;\n+      const { data: uploadData, error: uploadError } = await supabase.storage\n+        .from('voice-samples')\n+        .upload(filename, file);\n+\n+      if (uploadError) throw uploadError;\n+\n+      // Create voice record\n+      const voiceData = {\n+        name: newVoice.name,\n+        description: newVoice.description,\n+        language: newVoice.language,\n+        gender: newVoice.gender,\n+        sample_url: uploadData.path,\n+        school_id: schoolId,\n+        is_default: voices.length === 0, // First voice becomes default\n+      };\n+\n+      const { error: dbError } = await supabase\n+        .from('voices')\n+        .insert([voiceData]);\n+\n+      if (dbError) throw dbError;\n+\n+      toast({\n+        title: \"Success\",\n+        description: \"Voice uploaded successfully.\",\n+      });\n+\n+      loadVoices();\n+    } catch (error) {\n+      console.error('Error uploading voice:', error);\n+      toast({\n+        title: \"Error\",\n+        description: \"Failed to upload voice. Please try again.\",\n+        variant: \"destructive\",\n+      });\n+    } finally {\n+      setUploadProgress(0);\n+    }\n+  };\n+\n   // Set default voice\n   const setDefaultVoice = async (voiceId: string) => {\n     try {\n+      // Update all voices to non-default\n+      await supabase\n+        .from('voices')\n+        .update({ is_default: false })\n+        .eq('school_id', schoolId);\n+\n+      // Set selected voice as default\n       const { error } = await supabase\n         .from('voices')\n         .update({ is_default: true })\n-        .eq('id', voiceId)\n-        .eq('school_id', schoolId);\n+        .eq('id', voiceId);\n \n       if (error) throw error;\n \n       toast({\n@@ -229,10 +251,9 @@\n     try {\n       const { error } = await supabase\n         .from('voices')\n         .delete()\n-        .eq('id', voiceId)\n-        .eq('school_id', schoolId);\n+        .eq('id', voiceId);\n \n       if (error) throw error;\n \n       toast({\n@@ -251,150 +272,100 @@\n     }\n   };\n \n   return (\n-    <div className=\"space-y-4\">\n-      <div className=\"flex justify-between items-center\">\n-        <h2 className=\"text-lg font-medium\">\n-          {isAdmin ? 'Global Voice Management' : 'School Voice Management'}\n-        </h2>\n-        <div className=\"flex gap-2\">\n-          <Button\n-            onClick={handleRecord}\n-            variant={isRecording ? \"destructive\" : \"default\"}\n-            className=\"flex items-center gap-2\"\n-            disabled={!newVoice.name} // Disable if no name is provided\n-          >\n-            <Mic className=\"h-4 w-4\" />\n-            {isRecording ? \"Stop Recording\" : \"Record New Voice\"}\n-          </Button>\n-        </div>\n-      </div>\n+    <Card>\n+      <CardHeader>\n+        <CardTitle>Voice Management</CardTitle>\n+      </CardHeader>\n+      <CardContent>\n+        <Tabs defaultValue=\"voices\">\n+          <TabsList>\n+            <TabsTrigger value=\"voices\">Available Voices</TabsTrigger>\n+            <TabsTrigger value=\"add\">Add New Voice</TabsTrigger>\n+          </TabsList>\n \n-      {/* New Voice Form */}\n-      <Card className=\"p-4\">\n-        <div className=\"space-y-4\">\n-          <div>\n-            <label htmlFor=\"voice-name\" className=\"block text-sm font-medium text-gray-700\">\n-              Voice Name\n-            </label>\n-            <Input\n-              id=\"voice-name\"\n-              placeholder=\"Enter voice name\"\n-              value={newVoice.name}\n-              onChange={(e) => setNewVoice({ ...newVoice, name: e.target.value })}\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div>\n-            <label htmlFor=\"voice-description\" className=\"block text-sm font-medium text-gray-700\">\n-              Description\n-            </label>\n-            <Input\n-              id=\"voice-description\"\n-              placeholder=\"Enter voice description\"\n-              value={newVoice.description}\n-              onChange={(e) => setNewVoice({ ...newVoice, description: e.target.value })}\n-              className=\"mt-1\"\n-            />\n-          </div>\n-          <div className=\"flex gap-4\">\n-            <div className=\"flex-1\">\n-              <label htmlFor=\"voice-language\" className=\"block text-sm font-medium text-gray-700\">\n-                Language\n-              </label>\n-              <select\n-                id=\"voice-language\"\n-                value={newVoice.language}\n-                onChange={(e) => setNewVoice({ ...newVoice, language: e.target.value })}\n-                className=\"mt-1 block w-full rounded-md border-gray-300\"\n-                aria-label=\"Select voice language\"\n-              >\n-                <option value=\"English\">English</option>\n-                <option value=\"Spanish\">Spanish</option>\n-                <option value=\"French\">French</option>\n-              </select>\n-            </div>\n-            <div className=\"flex-1\">\n-              <label htmlFor=\"voice-gender\" className=\"block text-sm font-medium text-gray-700\">\n-                Gender\n-              </label>\n-              <select\n-                id=\"voice-gender\"\n-                value={newVoice.gender}\n-                onChange={(e) => setNewVoice({ ...newVoice, gender: e.target.value as 'male' | 'female' })}\n-                className=\"mt-1 block w-full rounded-md border-gray-300\"\n-                aria-label=\"Select voice gender\"\n-              >\n-                <option value=\"female\">Female</option>\n-                <option value=\"male\">Male</option>\n-              </select>\n-            </div>\n-          </div>\n-          {isRecording && (\n-            <div className=\"flex items-center gap-2 text-sm text-red-500\">\n-              <span className=\"animate-pulse\">●</span> Recording in progress...\n-            </div>\n-          )}\n-        </div>\n-      </Card>\n+          <TabsContent value=\"voices\" className=\"space-y-4\">\n+            {voices.map((voice) => (\n+              <Card key={voice.id} className=\"p-4\">\n+                <div className=\"flex items-center justify-between\">\n+                  <div>\n+                    <h3 className=\"font-medium\">{voice.name}</h3>\n+                    <p className=\"text-sm text-muted-foreground\">{voice.description}</p>\n+                    <div className=\"flex gap-2 mt-2 text-sm\">\n+                      <span className=\"px-2 py-1 bg-primary/10 rounded-md\">{voice.language}</span>\n+                      <span className=\"px-2 py-1 bg-primary/10 rounded-md\">{voice.gender}</span>\n+                      {voice.isDefault && (\n+                        <span className=\"px-2 py-1 bg-green-500/10 text-green-500 rounded-md\">Default</span>\n+                      )}\n+                    </div>\n+                  </div>\n+                  <div className=\"flex gap-2\">\n+                    <Button\n+                      variant=\"outline\"\n+                      size=\"icon\"\n+                      onClick={() => handlePlayback(voice)}\n+                    >\n+                      {isPlaying ? <Pause className=\"h-4 w-4\" /> : <Play className=\"h-4 w-4\" />}\n+                    </Button>\n+                    {!voice.isDefault && (userRole === 'SCHOOL_LEADER' || userRole === 'SCHOOL_PRINCIPAL') && (\n+                      <Button\n+                        variant=\"outline\"\n+                        onClick={() => setDefaultVoice(voice.id)}\n+                      >\n+                        Set as Default\n+                      </Button>\n+                    )}\n+                    {userRole === 'SCHOOL_LEADER' && (\n+                      <Button\n+                        variant=\"destructive\"\n+                        size=\"icon\"\n+                        onClick={() => deleteVoice(voice.id)}\n+                      >\n+                        <Trash2 className=\"h-4 w-4\" />\n+                      </Button>\n+                    )}\n+                  </div>\n+                </div>\n+              </Card>\n+            ))}\n+          </TabsContent>\n \n-      {/* Voice List */}\n-      <div className=\"grid gap-4\">\n-        {voices.map((voice) => (\n-          <Card key={voice.id} className=\"p-4\">\n-            <div className=\"flex items-center justify-between\">\n+          <TabsContent value=\"add\" className=\"space-y-4\">\n+            <div className=\"grid gap-4\">\n               <div>\n-                <h3 className=\"font-medium\">{voice.name}</h3>\n-                <p className=\"text-sm text-muted-foreground\">{voice.description}</p>\n-                <div className=\"flex gap-2 mt-2\">\n-                  <span className=\"px-2 py-1 bg-primary/10 rounded-md text-xs\">\n-                    {voice.language}\n-                  </span>\n-                  <span className=\"px-2 py-1 bg-primary/10 rounded-md text-xs\">\n-                    {voice.gender}\n-                  </span>\n-                  {voice.isDefault && (\n-                    <span className=\"px-2 py-1 bg-green-500/10 text-green-500 rounded-md text-xs\">\n-                      Default\n-                    </span>\n-                  )}\n-                </div>\n+                <Input\n+                  placeholder=\"Voice Name\"\n+                  value={newVoice.name}\n+                  onChange={(e) => setNewVoice({ ...newVoice, name: e.target.value })}\n+                />\n               </div>\n-              <div className=\"flex gap-2\">\n+              <div>\n+                <Input\n+                  placeholder=\"Description\"\n+                  value={newVoice.description}\n+                  onChange={(e) => setNewVoice({ ...newVoice, description: e.target.value })}\n+                />\n+              </div>\n+              <div className=\"flex gap-4\">\n                 <Button\n-                  variant=\"outline\"\n-                  size=\"icon\"\n-                  onClick={() => handlePlayback(voice)}\n+                  variant={isRecording ? \"destructive\" : \"outline\"}\n+                  onClick={handleRecord}\n                 >\n-                  {isPlaying === voice.id ? (\n-                    <Pause className=\"h-4 w-4\" />\n-                  ) : (\n-                    <Play className=\"h-4 w-4\" />\n-                  )}\n+                  <Mic className=\"h-4 w-4 mr-2\" />\n+                  {isRecording ? \"Stop Recording\" : \"Start Recording\"}\n                 </Button>\n-                {!voice.isDefault && (\n-                  <Button\n-                    variant=\"outline\"\n-                    size=\"icon\"\n-                    onClick={() => setDefaultVoice(voice.id)}\n-                  >\n-                    <Star className=\"h-4 w-4\" />\n-                  </Button>\n-                )}\n-                {(isAdmin || userRole === 'SCHOOL_LEADER') && (\n-                  <Button\n-                    variant=\"destructive\"\n-                    size=\"icon\"\n-                    onClick={() => deleteVoice(voice.id)}\n-                  >\n-                    <Trash2 className=\"h-4 w-4\" />\n-                  </Button>\n-                )}\n+                <Button variant=\"outline\">\n+                  <Upload className=\"h-4 w-4 mr-2\" />\n+                  Upload Voice Sample\n+                </Button>\n               </div>\n+              {uploadProgress > 0 && (\n+                <Progress value={uploadProgress} className=\"w-full\" />\n+              )}\n             </div>\n-          </Card>\n-        ))}\n-      </div>\n-    </div>\n+          </TabsContent>\n+        </Tabs>\n+      </CardContent>\n+    </Card>\n   );\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739015239756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,12 @@\n \"use client\";\n \n import React, { useState, useCallback, useEffect, useRef } from 'react';\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n+import { Card } from \"@/components/ui/card\";\n import { Button } from \"@/components/ui/button\";\n import { Input } from \"@/components/ui/input\";\n-import { Progress } from \"@/components/ui/progress\";\n import { useToast } from \"@/components/ui/use-toast\";\n-import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n-import { Mic, Upload, Play, Pause, Save, Plus, Trash2 } from \"lucide-react\";\n+import { Plus, Mic, Play, Pause, Save, Trash2, Star } from \"lucide-react\";\n import supabase from '@/lib/supabase/client';\n import speechService from '@/lib/fish-speech';\n \n interface Voice {\n@@ -18,58 +16,58 @@\n   language: string;\n   gender: 'male' | 'female';\n   sampleUrl: string;\n   isDefault: boolean;\n-  createdAt: string;\n   schoolId: string;\n }\n \n interface VoiceManagementProps {\n   schoolId: string;\n-  userRole: 'SCHOOL_LEADER' | 'SCHOOL_PRINCIPAL';\n+  userRole: 'super_admin' | 'SCHOOL_LEADER' | 'SCHOOL_PRINCIPAL';\n+  isAdmin?: boolean;\n }\n \n-export function VoiceManagement({ schoolId, userRole }: VoiceManagementProps) {\n+export function VoiceManagement({ schoolId, userRole, isAdmin = false }: VoiceManagementProps) {\n   const { toast } = useToast();\n   const [voices, setVoices] = useState<Voice[]>([]);\n   const [isRecording, setIsRecording] = useState(false);\n-  const [isPlaying, setIsPlaying] = useState(false);\n+  const [isPlaying, setIsPlaying] = useState<string | null>(null);\n   const [uploadProgress, setUploadProgress] = useState(0);\n   const [newVoice, setNewVoice] = useState({\n     name: '',\n     description: '',\n     language: 'English',\n-    gender: 'female' as const,\n+    gender: 'female' as 'male' | 'female',\n   });\n-\n   const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n-  const audioSourceRef = useRef<AudioBufferSourceNode | null>(null);\n+  const audioChunksRef = useRef<Blob[]>([]);\n \n   // Load voices from database\n   const loadVoices = useCallback(async () => {\n     try {\n-      const { data, error } = await supabase\n+      let query = supabase\n         .from('voices')\n-        .select('*')\n-        .eq('school_id', schoolId);\n+        .select('*');\n \n+      // If not super_admin, filter by school\n+      if (!isAdmin) {\n+        query = query.eq('school_id', schoolId);\n+      }\n+\n+      const { data, error } = await query;\n+\n       if (error) throw error;\n       setVoices(data || []);\n \n       // Load default voice if exists\n       const defaultVoice = data?.find(voice => voice.isDefault);\n       if (defaultVoice) {\n-        // Get the voice sample from storage\n         const { data: sampleData, error: sampleError } = await supabase.storage\n           .from('voice-samples')\n           .download(defaultVoice.sampleUrl);\n \n         if (sampleError) throw sampleError;\n-        \n-        // Convert Blob to ArrayBuffer\n         const sampleBuffer = await sampleData.arrayBuffer();\n-        \n-        // Set the voice in the speech service\n         await speechService.setVoice(sampleBuffer);\n       }\n     } catch (error) {\n       console.error('Error loading voices:', error);\n@@ -78,9 +76,9 @@\n         description: \"Failed to load voices. Please try again.\",\n         variant: \"destructive\",\n       });\n     }\n-  }, [schoolId, toast]);\n+  }, [schoolId, isAdmin, toast]);\n \n   useEffect(() => {\n     loadVoices();\n   }, [loadVoices]);\n@@ -88,146 +86,126 @@\n   // Handle voice recording\n   const handleRecord = async () => {\n     try {\n       if (isRecording) {\n+        // Stop recording\n         mediaRecorderRef.current?.stop();\n         setIsRecording(false);\n       } else {\n-        mediaRecorderRef.current = await speechService.startRecording(\n-          // Handle transcribed text\n-          async (text) => {\n-            console.log('Transcribed text:', text);\n-            // You can use this text for voice training or verification\n+        // Start recording\n+        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n+        const mediaRecorder = new MediaRecorder(stream);\n+        \n+        mediaRecorder.ondataavailable = (event) => {\n+          if (event.data.size > 0) {\n+            audioChunksRef.current.push(event.data);\n           }\n-        );\n+        };\n+\n+        mediaRecorder.onstop = async () => {\n+          try {\n+            const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/wav' });\n+            audioChunksRef.current = []; // Clear chunks for next recording\n+\n+            // Upload to storage\n+            const filename = `voices/${schoolId}/${Date.now()}-${newVoice.name.toLowerCase().replace(/\\s+/g, '-')}.wav`;\n+            const { data: uploadData, error: uploadError } = await supabase.storage\n+              .from('voice-samples')\n+              .upload(filename, audioBlob);\n+\n+            if (uploadError) throw uploadError;\n+\n+            // Create voice record\n+            const voiceData = {\n+              name: newVoice.name,\n+              description: newVoice.description,\n+              language: newVoice.language,\n+              gender: newVoice.gender,\n+              sample_url: uploadData.path,\n+              school_id: schoolId,\n+              is_default: voices.length === 0, // First voice becomes default\n+            };\n+\n+            const { error: dbError } = await supabase\n+              .from('voices')\n+              .insert([voiceData]);\n+\n+            if (dbError) throw dbError;\n+\n+            toast({\n+              title: \"Success\",\n+              description: \"Voice recorded and saved successfully.\",\n+            });\n+\n+            // Reset form\n+            setNewVoice({\n+              name: '',\n+              description: '',\n+              language: 'English',\n+              gender: 'female' as 'male' | 'female',\n+            });\n+\n+            // Reload voices\n+            loadVoices();\n+          } catch (error) {\n+            console.error('Error saving recorded voice:', error);\n+            toast({\n+              title: \"Error\",\n+              description: \"Failed to save recorded voice. Please try again.\",\n+              variant: \"destructive\",\n+            });\n+          }\n+        };\n+\n+        mediaRecorderRef.current = mediaRecorder;\n+        mediaRecorder.start();\n         setIsRecording(true);\n       }\n     } catch (error) {\n-      console.error('Error handling recording:', error);\n+      console.error('Error recording voice:', error);\n       toast({\n         title: \"Error\",\n-        description: \"Failed to handle recording. Please check your microphone.\",\n+        description: \"Failed to record voice. Please check your microphone.\",\n         variant: \"destructive\",\n       });\n     }\n   };\n \n   // Handle voice playback\n   const handlePlayback = async (voice: Voice) => {\n     try {\n-      if (isPlaying) {\n-        audioSourceRef.current?.stop();\n-        setIsPlaying(false);\n+      if (isPlaying === voice.id) {\n+        // Stop playback logic\n+        setIsPlaying(null);\n         return;\n       }\n \n-      // Get the voice sample from storage\n       const { data: sampleData, error: sampleError } = await supabase.storage\n         .from('voice-samples')\n         .download(voice.sampleUrl);\n \n       if (sampleError) throw sampleError;\n-\n-      // Convert Blob to ArrayBuffer\n       const sampleBuffer = await sampleData.arrayBuffer();\n-\n-      // Set the voice for playback\n-      await speechService.setVoice(sampleBuffer);\n-\n-      // Generate sample audio\n-      const audioBuffer = await speechService.textToSpeech(\n-        \"This is a sample text to demonstrate the voice.\",\n-        {\n-          language: voice.language,\n-          speed: 1.0,\n-          pitch: 1.0\n-        }\n-      );\n-\n-      // Play the audio\n-      audioSourceRef.current = await speechService.playAudio(audioBuffer);\n-      setIsPlaying(true);\n-\n-      // Handle playback completion\n-      audioSourceRef.current.onended = () => {\n-        setIsPlaying(false);\n-        audioSourceRef.current = null;\n-      };\n+      await speechService.playAudio(sampleBuffer);\n+      setIsPlaying(voice.id);\n     } catch (error) {\n-      console.error('Error playing voice sample:', error);\n+      console.error('Error playing voice:', error);\n       toast({\n         title: \"Error\",\n         description: \"Failed to play voice sample. Please try again.\",\n         variant: \"destructive\",\n       });\n-      setIsPlaying(false);\n     }\n   };\n \n-  // Handle voice upload\n-  const handleUpload = async (file: File) => {\n-    try {\n-      // First, process the voice sample\n-      const voiceBuffer = await file.arrayBuffer();\n-      const voiceConfig = await speechService.cloneVoice(voiceBuffer);\n-\n-      // Upload to storage\n-      const filename = `voices/${schoolId}/${Date.now()}-${file.name}`;\n-      const { data: uploadData, error: uploadError } = await supabase.storage\n-        .from('voice-samples')\n-        .upload(filename, file);\n-\n-      if (uploadError) throw uploadError;\n-\n-      // Create voice record\n-      const voiceData = {\n-        name: newVoice.name,\n-        description: newVoice.description,\n-        language: newVoice.language,\n-        gender: newVoice.gender,\n-        sample_url: uploadData.path,\n-        school_id: schoolId,\n-        is_default: voices.length === 0, // First voice becomes default\n-      };\n-\n-      const { error: dbError } = await supabase\n-        .from('voices')\n-        .insert([voiceData]);\n-\n-      if (dbError) throw dbError;\n-\n-      toast({\n-        title: \"Success\",\n-        description: \"Voice uploaded successfully.\",\n-      });\n-\n-      loadVoices();\n-    } catch (error) {\n-      console.error('Error uploading voice:', error);\n-      toast({\n-        title: \"Error\",\n-        description: \"Failed to upload voice. Please try again.\",\n-        variant: \"destructive\",\n-      });\n-    } finally {\n-      setUploadProgress(0);\n-    }\n-  };\n-\n   // Set default voice\n   const setDefaultVoice = async (voiceId: string) => {\n     try {\n-      // Update all voices to non-default\n-      await supabase\n-        .from('voices')\n-        .update({ is_default: false })\n-        .eq('school_id', schoolId);\n-\n-      // Set selected voice as default\n       const { error } = await supabase\n         .from('voices')\n         .update({ is_default: true })\n-        .eq('id', voiceId);\n+        .eq('id', voiceId)\n+        .eq('school_id', schoolId);\n \n       if (error) throw error;\n \n       toast({\n@@ -251,9 +229,10 @@\n     try {\n       const { error } = await supabase\n         .from('voices')\n         .delete()\n-        .eq('id', voiceId);\n+        .eq('id', voiceId)\n+        .eq('school_id', schoolId);\n \n       if (error) throw error;\n \n       toast({\n@@ -272,100 +251,150 @@\n     }\n   };\n \n   return (\n-    <Card>\n-      <CardHeader>\n-        <CardTitle>Voice Management</CardTitle>\n-      </CardHeader>\n-      <CardContent>\n-        <Tabs defaultValue=\"voices\">\n-          <TabsList>\n-            <TabsTrigger value=\"voices\">Available Voices</TabsTrigger>\n-            <TabsTrigger value=\"add\">Add New Voice</TabsTrigger>\n-          </TabsList>\n+    <div className=\"space-y-4\">\n+      <div className=\"flex justify-between items-center\">\n+        <h2 className=\"text-lg font-medium\">\n+          {isAdmin ? 'Global Voice Management' : 'School Voice Management'}\n+        </h2>\n+        <div className=\"flex gap-2\">\n+          <Button\n+            onClick={handleRecord}\n+            variant={isRecording ? \"destructive\" : \"default\"}\n+            className=\"flex items-center gap-2\"\n+            disabled={!newVoice.name} // Disable if no name is provided\n+          >\n+            <Mic className=\"h-4 w-4\" />\n+            {isRecording ? \"Stop Recording\" : \"Record New Voice\"}\n+          </Button>\n+        </div>\n+      </div>\n \n-          <TabsContent value=\"voices\" className=\"space-y-4\">\n-            {voices.map((voice) => (\n-              <Card key={voice.id} className=\"p-4\">\n-                <div className=\"flex items-center justify-between\">\n-                  <div>\n-                    <h3 className=\"font-medium\">{voice.name}</h3>\n-                    <p className=\"text-sm text-muted-foreground\">{voice.description}</p>\n-                    <div className=\"flex gap-2 mt-2 text-sm\">\n-                      <span className=\"px-2 py-1 bg-primary/10 rounded-md\">{voice.language}</span>\n-                      <span className=\"px-2 py-1 bg-primary/10 rounded-md\">{voice.gender}</span>\n-                      {voice.isDefault && (\n-                        <span className=\"px-2 py-1 bg-green-500/10 text-green-500 rounded-md\">Default</span>\n-                      )}\n-                    </div>\n-                  </div>\n-                  <div className=\"flex gap-2\">\n-                    <Button\n-                      variant=\"outline\"\n-                      size=\"icon\"\n-                      onClick={() => handlePlayback(voice)}\n-                    >\n-                      {isPlaying ? <Pause className=\"h-4 w-4\" /> : <Play className=\"h-4 w-4\" />}\n-                    </Button>\n-                    {!voice.isDefault && (userRole === 'SCHOOL_LEADER' || userRole === 'SCHOOL_PRINCIPAL') && (\n-                      <Button\n-                        variant=\"outline\"\n-                        onClick={() => setDefaultVoice(voice.id)}\n-                      >\n-                        Set as Default\n-                      </Button>\n-                    )}\n-                    {userRole === 'SCHOOL_LEADER' && (\n-                      <Button\n-                        variant=\"destructive\"\n-                        size=\"icon\"\n-                        onClick={() => deleteVoice(voice.id)}\n-                      >\n-                        <Trash2 className=\"h-4 w-4\" />\n-                      </Button>\n-                    )}\n-                  </div>\n-                </div>\n-              </Card>\n-            ))}\n-          </TabsContent>\n+      {/* New Voice Form */}\n+      <Card className=\"p-4\">\n+        <div className=\"space-y-4\">\n+          <div>\n+            <label htmlFor=\"voice-name\" className=\"block text-sm font-medium text-gray-700\">\n+              Voice Name\n+            </label>\n+            <Input\n+              id=\"voice-name\"\n+              placeholder=\"Enter voice name\"\n+              value={newVoice.name}\n+              onChange={(e) => setNewVoice({ ...newVoice, name: e.target.value })}\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div>\n+            <label htmlFor=\"voice-description\" className=\"block text-sm font-medium text-gray-700\">\n+              Description\n+            </label>\n+            <Input\n+              id=\"voice-description\"\n+              placeholder=\"Enter voice description\"\n+              value={newVoice.description}\n+              onChange={(e) => setNewVoice({ ...newVoice, description: e.target.value })}\n+              className=\"mt-1\"\n+            />\n+          </div>\n+          <div className=\"flex gap-4\">\n+            <div className=\"flex-1\">\n+              <label htmlFor=\"voice-language\" className=\"block text-sm font-medium text-gray-700\">\n+                Language\n+              </label>\n+              <select\n+                id=\"voice-language\"\n+                value={newVoice.language}\n+                onChange={(e) => setNewVoice({ ...newVoice, language: e.target.value })}\n+                className=\"mt-1 block w-full rounded-md border-gray-300\"\n+                aria-label=\"Select voice language\"\n+              >\n+                <option value=\"English\">English</option>\n+                <option value=\"Spanish\">Spanish</option>\n+                <option value=\"French\">French</option>\n+              </select>\n+            </div>\n+            <div className=\"flex-1\">\n+              <label htmlFor=\"voice-gender\" className=\"block text-sm font-medium text-gray-700\">\n+                Gender\n+              </label>\n+              <select\n+                id=\"voice-gender\"\n+                value={newVoice.gender}\n+                onChange={(e) => setNewVoice({ ...newVoice, gender: e.target.value as 'male' | 'female' })}\n+                className=\"mt-1 block w-full rounded-md border-gray-300\"\n+                aria-label=\"Select voice gender\"\n+              >\n+                <option value=\"female\">Female</option>\n+                <option value=\"male\">Male</option>\n+              </select>\n+            </div>\n+          </div>\n+          {isRecording && (\n+            <div className=\"flex items-center gap-2 text-sm text-red-500\">\n+              <span className=\"animate-pulse\">●</span> Recording in progress...\n+            </div>\n+          )}\n+        </div>\n+      </Card>\n \n-          <TabsContent value=\"add\" className=\"space-y-4\">\n-            <div className=\"grid gap-4\">\n+      {/* Voice List */}\n+      <div className=\"grid gap-4\">\n+        {voices.map((voice) => (\n+          <Card key={voice.id} className=\"p-4\">\n+            <div className=\"flex items-center justify-between\">\n               <div>\n-                <Input\n-                  placeholder=\"Voice Name\"\n-                  value={newVoice.name}\n-                  onChange={(e) => setNewVoice({ ...newVoice, name: e.target.value })}\n-                />\n+                <h3 className=\"font-medium\">{voice.name}</h3>\n+                <p className=\"text-sm text-muted-foreground\">{voice.description}</p>\n+                <div className=\"flex gap-2 mt-2\">\n+                  <span className=\"px-2 py-1 bg-primary/10 rounded-md text-xs\">\n+                    {voice.language}\n+                  </span>\n+                  <span className=\"px-2 py-1 bg-primary/10 rounded-md text-xs\">\n+                    {voice.gender}\n+                  </span>\n+                  {voice.isDefault && (\n+                    <span className=\"px-2 py-1 bg-green-500/10 text-green-500 rounded-md text-xs\">\n+                      Default\n+                    </span>\n+                  )}\n+                </div>\n               </div>\n-              <div>\n-                <Input\n-                  placeholder=\"Description\"\n-                  value={newVoice.description}\n-                  onChange={(e) => setNewVoice({ ...newVoice, description: e.target.value })}\n-                />\n-              </div>\n-              <div className=\"flex gap-4\">\n+              <div className=\"flex gap-2\">\n                 <Button\n-                  variant={isRecording ? \"destructive\" : \"outline\"}\n-                  onClick={handleRecord}\n+                  variant=\"outline\"\n+                  size=\"icon\"\n+                  onClick={() => handlePlayback(voice)}\n                 >\n-                  <Mic className=\"h-4 w-4 mr-2\" />\n-                  {isRecording ? \"Stop Recording\" : \"Start Recording\"}\n+                  {isPlaying === voice.id ? (\n+                    <Pause className=\"h-4 w-4\" />\n+                  ) : (\n+                    <Play className=\"h-4 w-4\" />\n+                  )}\n                 </Button>\n-                <Button variant=\"outline\">\n-                  <Upload className=\"h-4 w-4 mr-2\" />\n-                  Upload Voice Sample\n-                </Button>\n+                {!voice.isDefault && (\n+                  <Button\n+                    variant=\"outline\"\n+                    size=\"icon\"\n+                    onClick={() => setDefaultVoice(voice.id)}\n+                  >\n+                    <Star className=\"h-4 w-4\" />\n+                  </Button>\n+                )}\n+                {(isAdmin || userRole === 'SCHOOL_LEADER') && (\n+                  <Button\n+                    variant=\"destructive\"\n+                    size=\"icon\"\n+                    onClick={() => deleteVoice(voice.id)}\n+                  >\n+                    <Trash2 className=\"h-4 w-4\" />\n+                  </Button>\n+                )}\n               </div>\n-              {uploadProgress > 0 && (\n-                <Progress value={uploadProgress} className=\"w-full\" />\n-              )}\n             </div>\n-          </TabsContent>\n-        </Tabs>\n-      </CardContent>\n-    </Card>\n+          </Card>\n+        ))}\n+      </div>\n+    </div>\n   );\n } \n\\ No newline at end of file\n"
                }
            ],
            "date": 1739014925869,
            "name": "Commit-0",
            "content": " "
        }
    ]
}