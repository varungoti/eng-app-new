{
    "sourceFile": "src/components/admin/VoiceTesting.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1739014982561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739015099391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,111 +1,1 @@\n-\"use client\";\n-\n-import React from 'react';\n-import { Volume2, Pause } from 'lucide-react';\n-import { useVoiceTesting } from '@/hooks/useVoiceTesting';\n-import { useToast } from '@/components/ui/use-toast';\n-\n-interface VoiceTestingProps {\n-  schoolId: string;\n-}\n-\n-export function VoiceTesting({ schoolId }: VoiceTestingProps) {\n-  const { toast } = useToast();\n-  const {\n-    text,\n-    speed,\n-    pitch,\n-    isPlaying,\n-    selectedVoiceId,\n-    setText,\n-    setSpeed,\n-    setPitch,\n-    setSelectedVoice,\n-    testVoice\n-  } = useVoiceTesting();\n-\n-  const handleTest = async () => {\n-    try {\n-      await testVoice();\n-    } catch (error) {\n-      toast({\n-        title: \"Error\",\n-        description: error instanceof Error ? error.message : \"Failed to test voice\",\n-        variant: \"destructive\",\n-      });\n-    }\n-  };\n-\n-  return (\n-    <div className=\"space-y-4\">\n-      <div>\n-        <label htmlFor=\"test-text\" className=\"block text-sm font-medium text-gray-700\">\n-          Test Text\n-        </label>\n-        <textarea\n-          id=\"test-text\"\n-          rows={3}\n-          value={text}\n-          onChange={(e) => setText(e.target.value)}\n-          className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n-          placeholder=\"Enter text to test the voice...\"\n-          aria-label=\"Text to test the voice\"\n-        />\n-      </div>\n-\n-      <div>\n-        <label htmlFor=\"voice-speed\" className=\"block text-sm font-medium text-gray-700\">\n-          Speed ({speed.toFixed(1)}x)\n-        </label>\n-        <input\n-          id=\"voice-speed\"\n-          type=\"range\"\n-          min=\"0.5\"\n-          max=\"2\"\n-          step=\"0.1\"\n-          value={speed}\n-          onChange={(e) => setSpeed(parseFloat(e.target.value))}\n-          className=\"mt-1 block w-full\"\n-          aria-label=\"Voice speed adjustment\"\n-        />\n-      </div>\n-\n-      <div>\n-        <label htmlFor=\"voice-pitch\" className=\"block text-sm font-medium text-gray-700\">\n-          Pitch ({pitch.toFixed(1)}x)\n-        </label>\n-        <input\n-          id=\"voice-pitch\"\n-          type=\"range\"\n-          min=\"0.5\"\n-          max=\"2\"\n-          step=\"0.1\"\n-          value={pitch}\n-          onChange={(e) => setPitch(parseFloat(e.target.value))}\n-          className=\"mt-1 block w-full\"\n-          aria-label=\"Voice pitch adjustment\"\n-        />\n-      </div>\n-\n-      <button\n-        type=\"button\"\n-        onClick={handleTest}\n-        disabled={!text || isPlaying}\n-        className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 disabled:bg-gray-400 disabled:cursor-not-allowed\"\n-        aria-label=\"Test voice with current settings\"\n-      >\n-        {isPlaying ? (\n-          <>\n-            <Pause className=\"h-4 w-4 mr-2\" />\n-            Playing...\n-          </>\n-        ) : (\n-          <>\n-            <Volume2 className=\"h-4 w-4 mr-2\" />\n-            Test Voice\n-          </>\n-        )}\n-      </button>\n-    </div>\n-  );\n-} \n\\ No newline at end of file\n+ \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739015246070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,111 @@\n- \n\\ No newline at end of file\n+\"use client\";\n+\n+import React from 'react';\n+import { Volume2, Pause } from 'lucide-react';\n+import { useVoiceTesting } from '@/hooks/useVoiceTesting';\n+import { useToast } from '@/components/ui/use-toast';\n+\n+interface VoiceTestingProps {\n+  schoolId: string;\n+}\n+\n+export function VoiceTesting({ schoolId }: VoiceTestingProps) {\n+  const { toast } = useToast();\n+  const {\n+    text,\n+    speed,\n+    pitch,\n+    isPlaying,\n+    selectedVoiceId,\n+    setText,\n+    setSpeed,\n+    setPitch,\n+    setSelectedVoice,\n+    testVoice\n+  } = useVoiceTesting();\n+\n+  const handleTest = async () => {\n+    try {\n+      await testVoice();\n+    } catch (error) {\n+      toast({\n+        title: \"Error\",\n+        description: error instanceof Error ? error.message : \"Failed to test voice\",\n+        variant: \"destructive\",\n+      });\n+    }\n+  };\n+\n+  return (\n+    <div className=\"space-y-4\">\n+      <div>\n+        <label htmlFor=\"test-text\" className=\"block text-sm font-medium text-gray-700\">\n+          Test Text\n+        </label>\n+        <textarea\n+          id=\"test-text\"\n+          rows={3}\n+          value={text}\n+          onChange={(e) => setText(e.target.value)}\n+          className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n+          placeholder=\"Enter text to test the voice...\"\n+          aria-label=\"Text to test the voice\"\n+        />\n+      </div>\n+\n+      <div>\n+        <label htmlFor=\"voice-speed\" className=\"block text-sm font-medium text-gray-700\">\n+          Speed ({speed.toFixed(1)}x)\n+        </label>\n+        <input\n+          id=\"voice-speed\"\n+          type=\"range\"\n+          min=\"0.5\"\n+          max=\"2\"\n+          step=\"0.1\"\n+          value={speed}\n+          onChange={(e) => setSpeed(parseFloat(e.target.value))}\n+          className=\"mt-1 block w-full\"\n+          aria-label=\"Voice speed adjustment\"\n+        />\n+      </div>\n+\n+      <div>\n+        <label htmlFor=\"voice-pitch\" className=\"block text-sm font-medium text-gray-700\">\n+          Pitch ({pitch.toFixed(1)}x)\n+        </label>\n+        <input\n+          id=\"voice-pitch\"\n+          type=\"range\"\n+          min=\"0.5\"\n+          max=\"2\"\n+          step=\"0.1\"\n+          value={pitch}\n+          onChange={(e) => setPitch(parseFloat(e.target.value))}\n+          className=\"mt-1 block w-full\"\n+          aria-label=\"Voice pitch adjustment\"\n+        />\n+      </div>\n+\n+      <button\n+        type=\"button\"\n+        onClick={handleTest}\n+        disabled={!text || isPlaying}\n+        className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 disabled:bg-gray-400 disabled:cursor-not-allowed\"\n+        aria-label=\"Test voice with current settings\"\n+      >\n+        {isPlaying ? (\n+          <>\n+            <Pause className=\"h-4 w-4 mr-2\" />\n+            Playing...\n+          </>\n+        ) : (\n+          <>\n+            <Volume2 className=\"h-4 w-4 mr-2\" />\n+            Test Voice\n+          </>\n+        )}\n+      </button>\n+    </div>\n+  );\n+} \n\\ No newline at end of file\n"
                },
                {
                    "date": 1740948276926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,111 +1,111 @@\n-\"use client\";\n-\n-import React from 'react';\n-import { Volume2, Pause } from 'lucide-react';\n-import { useVoiceTesting } from '@/hooks/useVoiceTesting';\n-import { useToast } from '@/components/ui/use-toast';\n-\n-interface VoiceTestingProps {\n-  schoolId: string;\n-}\n-\n-export function VoiceTesting({ schoolId }: VoiceTestingProps) {\n-  const { toast } = useToast();\n-  const {\n-    text,\n-    speed,\n-    pitch,\n-    isPlaying,\n-    selectedVoiceId,\n-    setText,\n-    setSpeed,\n-    setPitch,\n-    setSelectedVoice,\n-    testVoice\n-  } = useVoiceTesting();\n-\n-  const handleTest = async () => {\n-    try {\n-      await testVoice();\n-    } catch (error) {\n-      toast({\n-        title: \"Error\",\n-        description: error instanceof Error ? error.message : \"Failed to test voice\",\n-        variant: \"destructive\",\n-      });\n-    }\n-  };\n-\n-  return (\n-    <div className=\"space-y-4\">\n-      <div>\n-        <label htmlFor=\"test-text\" className=\"block text-sm font-medium text-gray-700\">\n-          Test Text\n-        </label>\n-        <textarea\n-          id=\"test-text\"\n-          rows={3}\n-          value={text}\n-          onChange={(e) => setText(e.target.value)}\n-          className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n-          placeholder=\"Enter text to test the voice...\"\n-          aria-label=\"Text to test the voice\"\n-        />\n-      </div>\n-\n-      <div>\n-        <label htmlFor=\"voice-speed\" className=\"block text-sm font-medium text-gray-700\">\n-          Speed ({speed.toFixed(1)}x)\n-        </label>\n-        <input\n-          id=\"voice-speed\"\n-          type=\"range\"\n-          min=\"0.5\"\n-          max=\"2\"\n-          step=\"0.1\"\n-          value={speed}\n-          onChange={(e) => setSpeed(parseFloat(e.target.value))}\n-          className=\"mt-1 block w-full\"\n-          aria-label=\"Voice speed adjustment\"\n-        />\n-      </div>\n-\n-      <div>\n-        <label htmlFor=\"voice-pitch\" className=\"block text-sm font-medium text-gray-700\">\n-          Pitch ({pitch.toFixed(1)}x)\n-        </label>\n-        <input\n-          id=\"voice-pitch\"\n-          type=\"range\"\n-          min=\"0.5\"\n-          max=\"2\"\n-          step=\"0.1\"\n-          value={pitch}\n-          onChange={(e) => setPitch(parseFloat(e.target.value))}\n-          className=\"mt-1 block w-full\"\n-          aria-label=\"Voice pitch adjustment\"\n-        />\n-      </div>\n-\n-      <button\n-        type=\"button\"\n-        onClick={handleTest}\n-        disabled={!text || isPlaying}\n-        className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 disabled:bg-gray-400 disabled:cursor-not-allowed\"\n-        aria-label=\"Test voice with current settings\"\n-      >\n-        {isPlaying ? (\n-          <>\n-            <Pause className=\"h-4 w-4 mr-2\" />\n-            Playing...\n-          </>\n-        ) : (\n-          <>\n-            <Volume2 className=\"h-4 w-4 mr-2\" />\n-            Test Voice\n-          </>\n-        )}\n-      </button>\n-    </div>\n-  );\n+\"use client\";\r\n+\r\n+//import React from 'react';\r\n+import { Volume2, Pause } from 'lucide-react';\r\n+import { useVoiceTesting } from '@/hooks/useVoiceTesting';\r\n+import { useToast } from '@/components/ui/use-toast';\r\n+\r\n+interface VoiceTestingProps {\r\n+  schoolId: string;\r\n+}\r\n+\r\n+export function VoiceTesting({ schoolId }: VoiceTestingProps) {\r\n+  const { toast } = useToast();\r\n+  const {\r\n+    text,\r\n+    speed,\r\n+    pitch,\r\n+    isPlaying,\r\n+    selectedVoiceId,\r\n+    setText,\r\n+    setSpeed,\r\n+    setPitch,\r\n+    setSelectedVoice,\r\n+    testVoice\r\n+  } = useVoiceTesting();\r\n+\r\n+  const handleTest = async () => {\r\n+    try {\r\n+      await testVoice();\r\n+    } catch (error) {\r\n+      toast({\r\n+        title: \"Error\",\r\n+        description: error instanceof Error ? error.message : \"Failed to test voice\",\r\n+        variant: \"destructive\",\r\n+      });\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"space-y-4\">\r\n+      <div>\r\n+        <label htmlFor=\"test-text\" className=\"block text-sm font-medium text-gray-700\">\r\n+          Test Text\r\n+        </label>\r\n+        <textarea\r\n+          id=\"test-text\"\r\n+          rows={3}\r\n+          value={text}\r\n+          onChange={(e) => setText(e.target.value)}\r\n+          className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\r\n+          placeholder=\"Enter text to test the voice...\"\r\n+          aria-label=\"Text to test the voice\"\r\n+        />\r\n+      </div>\r\n+\r\n+      <div>\r\n+        <label htmlFor=\"voice-speed\" className=\"block text-sm font-medium text-gray-700\">\r\n+          Speed ({speed.toFixed(1)}x)\r\n+        </label>\r\n+        <input\r\n+          id=\"voice-speed\"\r\n+          type=\"range\"\r\n+          min=\"0.5\"\r\n+          max=\"2\"\r\n+          step=\"0.1\"\r\n+          value={speed}\r\n+          onChange={(e) => setSpeed(parseFloat(e.target.value))}\r\n+          className=\"mt-1 block w-full\"\r\n+          aria-label=\"Voice speed adjustment\"\r\n+        />\r\n+      </div>\r\n+\r\n+      <div>\r\n+        <label htmlFor=\"voice-pitch\" className=\"block text-sm font-medium text-gray-700\">\r\n+          Pitch ({pitch.toFixed(1)}x)\r\n+        </label>\r\n+        <input\r\n+          id=\"voice-pitch\"\r\n+          type=\"range\"\r\n+          min=\"0.5\"\r\n+          max=\"2\"\r\n+          step=\"0.1\"\r\n+          value={pitch}\r\n+          onChange={(e) => setPitch(parseFloat(e.target.value))}\r\n+          className=\"mt-1 block w-full\"\r\n+          aria-label=\"Voice pitch adjustment\"\r\n+        />\r\n+      </div>\r\n+\r\n+      <button\r\n+        type=\"button\"\r\n+        onClick={handleTest}\r\n+        disabled={!text || isPlaying}\r\n+        className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 disabled:bg-gray-400 disabled:cursor-not-allowed\"\r\n+        aria-label=\"Test voice with current settings\"\r\n+      >\r\n+        {isPlaying ? (\r\n+          <>\r\n+            <Pause className=\"h-4 w-4 mr-2\" />\r\n+            Playing...\r\n+          </>\r\n+        ) : (\r\n+          <>\r\n+            <Volume2 className=\"h-4 w-4 mr-2\" />\r\n+            Test Voice\r\n+          </>\r\n+        )}\r\n+      </button>\r\n+    </div>\r\n+  );\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1740948297278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,15 +30,15 @@\n     } catch (error) {\r\n       toast({\r\n         title: \"Error\",\r\n         description: error instanceof Error ? error.message : \"Failed to test voice\",\r\n-        variant: \"destructive\",\r\n+        \r\n       });\r\n     }\r\n   };\r\n \r\n   return (\r\n-    <div className=\"space-y-4\">\r\n+    <div className=\"space-y-4\" data-selected-voice-id={selectedVoiceId}>\r\n       <div>\r\n         <label htmlFor=\"test-text\" className=\"block text-sm font-medium text-gray-700\">\r\n           Test Text\r\n         </label>\r\n"
                },
                {
                    "date": 1740948326450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,16 +43,30 @@\n           Test Text\r\n         </label>\r\n         <textarea\r\n           id=\"test-text\"\r\n-          rows={3}\r\n+          className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"\r\n           value={text}\r\n           onChange={(e) => setText(e.target.value)}\r\n-          className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\r\n-          placeholder=\"Enter text to test the voice...\"\r\n-          aria-label=\"Text to test the voice\"\r\n+          rows={3}\r\n         />\r\n       </div>\r\n+      \r\n+      <div>\r\n+        <label htmlFor=\"voice-select\" className=\"block text-sm font-medium text-gray-700\">\r\n+          Voice\r\n+        </label>\r\n+        <select\r\n+          id=\"voice-select\"\r\n+          className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"\r\n+          value={selectedVoiceId}\r\n+          onChange={(e) => setSelectedVoice(e.target.value)}\r\n+        >\r\n+          <option value=\"default\">Default Voice</option>\r\n+          <option value=\"voice1\">Voice 1</option>\r\n+          <option value=\"voice2\">Voice 2</option>\r\n+        </select>\r\n+      </div>\r\n \r\n       <div>\r\n         <label htmlFor=\"voice-speed\" className=\"block text-sm font-medium text-gray-700\">\r\n           Speed ({speed.toFixed(1)}x)\r\n"
                },
                {
                    "date": 1740948353121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n         </label>\r\n         <select\r\n           id=\"voice-select\"\r\n           className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"\r\n-          value={selectedVoiceId}\r\n+          value={selectedVoiceId || ''}\r\n           onChange={(e) => setSelectedVoice(e.target.value)}\r\n         >\r\n           <option value=\"default\">Default Voice</option>\r\n           <option value=\"voice1\">Voice 1</option>\r\n"
                },
                {
                    "date": 1740948381067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     setSpeed,\r\n     setPitch,\r\n     setSelectedVoice,\r\n     testVoice\r\n-  } = useVoiceTesting();\r\n+  } = useVoiceTesting(schoolId);\r\n \r\n   const handleTest = async () => {\r\n     try {\r\n       await testVoice();\r\n"
                },
                {
                    "date": 1740984609746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,125 +1,126 @@\n-\"use client\";\r\n-\r\n-//import React from 'react';\r\n-import { Volume2, Pause } from 'lucide-react';\r\n-import { useVoiceTesting } from '@/hooks/useVoiceTesting';\r\n-import { useToast } from '@/components/ui/use-toast';\r\n-\r\n-interface VoiceTestingProps {\r\n-  schoolId: string;\r\n-}\r\n-\r\n-export function VoiceTesting({ schoolId }: VoiceTestingProps) {\r\n-  const { toast } = useToast();\r\n-  const {\r\n-    text,\r\n-    speed,\r\n-    pitch,\r\n-    isPlaying,\r\n-    selectedVoiceId,\r\n-    setText,\r\n-    setSpeed,\r\n-    setPitch,\r\n-    setSelectedVoice,\r\n-    testVoice\r\n-  } = useVoiceTesting(schoolId);\r\n-\r\n-  const handleTest = async () => {\r\n-    try {\r\n-      await testVoice();\r\n-    } catch (error) {\r\n-      toast({\r\n-        title: \"Error\",\r\n-        description: error instanceof Error ? error.message : \"Failed to test voice\",\r\n-        \r\n-      });\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"space-y-4\" data-selected-voice-id={selectedVoiceId}>\r\n-      <div>\r\n-        <label htmlFor=\"test-text\" className=\"block text-sm font-medium text-gray-700\">\r\n-          Test Text\r\n-        </label>\r\n-        <textarea\r\n-          id=\"test-text\"\r\n-          className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"\r\n-          value={text}\r\n-          onChange={(e) => setText(e.target.value)}\r\n-          rows={3}\r\n-        />\r\n-      </div>\r\n-      \r\n-      <div>\r\n-        <label htmlFor=\"voice-select\" className=\"block text-sm font-medium text-gray-700\">\r\n-          Voice\r\n-        </label>\r\n-        <select\r\n-          id=\"voice-select\"\r\n-          className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"\r\n-          value={selectedVoiceId || ''}\r\n-          onChange={(e) => setSelectedVoice(e.target.value)}\r\n-        >\r\n-          <option value=\"default\">Default Voice</option>\r\n-          <option value=\"voice1\">Voice 1</option>\r\n-          <option value=\"voice2\">Voice 2</option>\r\n-        </select>\r\n-      </div>\r\n-\r\n-      <div>\r\n-        <label htmlFor=\"voice-speed\" className=\"block text-sm font-medium text-gray-700\">\r\n-          Speed ({speed.toFixed(1)}x)\r\n-        </label>\r\n-        <input\r\n-          id=\"voice-speed\"\r\n-          type=\"range\"\r\n-          min=\"0.5\"\r\n-          max=\"2\"\r\n-          step=\"0.1\"\r\n-          value={speed}\r\n-          onChange={(e) => setSpeed(parseFloat(e.target.value))}\r\n-          className=\"mt-1 block w-full\"\r\n-          aria-label=\"Voice speed adjustment\"\r\n-        />\r\n-      </div>\r\n-\r\n-      <div>\r\n-        <label htmlFor=\"voice-pitch\" className=\"block text-sm font-medium text-gray-700\">\r\n-          Pitch ({pitch.toFixed(1)}x)\r\n-        </label>\r\n-        <input\r\n-          id=\"voice-pitch\"\r\n-          type=\"range\"\r\n-          min=\"0.5\"\r\n-          max=\"2\"\r\n-          step=\"0.1\"\r\n-          value={pitch}\r\n-          onChange={(e) => setPitch(parseFloat(e.target.value))}\r\n-          className=\"mt-1 block w-full\"\r\n-          aria-label=\"Voice pitch adjustment\"\r\n-        />\r\n-      </div>\r\n-\r\n-      <button\r\n-        type=\"button\"\r\n-        onClick={handleTest}\r\n-        disabled={!text || isPlaying}\r\n-        className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 disabled:bg-gray-400 disabled:cursor-not-allowed\"\r\n-        aria-label=\"Test voice with current settings\"\r\n-      >\r\n-        {isPlaying ? (\r\n-          <>\r\n-            <Pause className=\"h-4 w-4 mr-2\" />\r\n-            Playing...\r\n-          </>\r\n-        ) : (\r\n-          <>\r\n-            <Volume2 className=\"h-4 w-4 mr-2\" />\r\n-            Test Voice\r\n-          </>\r\n-        )}\r\n-      </button>\r\n-    </div>\r\n-  );\r\n+\"use client\";\n+\n+//import React from 'react';\n+import { Volume2, Pause } from 'lucide-react';\n+import { useVoiceTesting } from '@/hooks/useVoiceTesting';\n+import { useToast } from '@/components/ui/use-toast';\n+\n+interface VoiceTestingProps {\n+  schoolId: string;\n+}\n+\n+export function VoiceTesting({ schoolId }: VoiceTestingProps) {\n+  const { toast } = useToast();\n+  const {\n+    text,\n+    speed,\n+    pitch,\n+    isPlaying,\n+    selectedVoiceId,\n+    setText,\n+    setSpeed,\n+    setPitch,\n+    setSelectedVoice,\n+    testVoice\n+  } = useVoiceTesting();\n+\n+  const handleTest = async () => {\n+    try {\n+      console.log(`Testing voice for school: ${schoolId}`);\n+      await testVoice();\n+    } catch (error) {\n+      toast({\n+        title: \"Error\",\n+        description: error instanceof Error ? error.message : \"Failed to test voice\",\n+        \n+      });\n+    }\n+  };\n+\n+  return (\n+    <div className=\"space-y-4\" data-selected-voice-id={selectedVoiceId} data-school-id={schoolId}>\n+      <div>\n+        <label htmlFor=\"test-text\" className=\"block text-sm font-medium text-gray-700\">\n+          Test Text\n+        </label>\n+        <textarea\n+          id=\"test-text\"\n+          className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"\n+          value={text}\n+          onChange={(e) => setText(e.target.value)}\n+          rows={3}\n+        />\n+      </div>\n+      \n+      <div>\n+        <label htmlFor=\"voice-select\" className=\"block text-sm font-medium text-gray-700\">\n+          Voice\n+        </label>\n+        <select\n+          id=\"voice-select\"\n+          className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"\n+          value={selectedVoiceId || ''}\n+          onChange={(e) => setSelectedVoice(e.target.value)}\n+        >\n+          <option value=\"default\">Default Voice</option>\n+          <option value=\"voice1\">Voice 1</option>\n+          <option value=\"voice2\">Voice 2</option>\n+        </select>\n+      </div>\n+\n+      <div>\n+        <label htmlFor=\"voice-speed\" className=\"block text-sm font-medium text-gray-700\">\n+          Speed ({speed.toFixed(1)}x)\n+        </label>\n+        <input\n+          id=\"voice-speed\"\n+          type=\"range\"\n+          min=\"0.5\"\n+          max=\"2\"\n+          step=\"0.1\"\n+          value={speed}\n+          onChange={(e) => setSpeed(parseFloat(e.target.value))}\n+          className=\"mt-1 block w-full\"\n+          aria-label=\"Voice speed adjustment\"\n+        />\n+      </div>\n+\n+      <div>\n+        <label htmlFor=\"voice-pitch\" className=\"block text-sm font-medium text-gray-700\">\n+          Pitch ({pitch.toFixed(1)}x)\n+        </label>\n+        <input\n+          id=\"voice-pitch\"\n+          type=\"range\"\n+          min=\"0.5\"\n+          max=\"2\"\n+          step=\"0.1\"\n+          value={pitch}\n+          onChange={(e) => setPitch(parseFloat(e.target.value))}\n+          className=\"mt-1 block w-full\"\n+          aria-label=\"Voice pitch adjustment\"\n+        />\n+      </div>\n+\n+      <button\n+        type=\"button\"\n+        onClick={handleTest}\n+        disabled={!text || isPlaying}\n+        className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 disabled:bg-gray-400 disabled:cursor-not-allowed\"\n+        aria-label=\"Test voice with current settings\"\n+      >\n+        {isPlaying ? (\n+          <>\n+            <Pause className=\"h-4 w-4 mr-2\" />\n+            Playing...\n+          </>\n+        ) : (\n+          <>\n+            <Volume2 className=\"h-4 w-4 mr-2\" />\n+            Test Voice\n+          </>\n+        )}\n+      </button>\n+    </div>\n+  );\n } \n\\ No newline at end of file\n"
                }
            ],
            "date": 1739014982561,
            "name": "Commit-0",
            "content": "\"use client\";\n\nimport React from 'react';\nimport { Volume2, Pause } from 'lucide-react';\nimport { useVoiceTesting } from '@/hooks/useVoiceTesting';\nimport { useToast } from '@/components/ui/use-toast';\n\ninterface VoiceTestingProps {\n  schoolId: string;\n}\n\nexport function VoiceTesting({ schoolId }: VoiceTestingProps) {\n  const { toast } = useToast();\n  const {\n    text,\n    speed,\n    pitch,\n    isPlaying,\n    selectedVoiceId,\n    setText,\n    setSpeed,\n    setPitch,\n    setSelectedVoice,\n    testVoice\n  } = useVoiceTesting();\n\n  const handleTest = async () => {\n    try {\n      await testVoice();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to test voice\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div>\n        <label htmlFor=\"test-text\" className=\"block text-sm font-medium text-gray-700\">\n          Test Text\n        </label>\n        <textarea\n          id=\"test-text\"\n          rows={3}\n          value={text}\n          onChange={(e) => setText(e.target.value)}\n          className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n          placeholder=\"Enter text to test the voice...\"\n          aria-label=\"Text to test the voice\"\n        />\n      </div>\n\n      <div>\n        <label htmlFor=\"voice-speed\" className=\"block text-sm font-medium text-gray-700\">\n          Speed ({speed.toFixed(1)}x)\n        </label>\n        <input\n          id=\"voice-speed\"\n          type=\"range\"\n          min=\"0.5\"\n          max=\"2\"\n          step=\"0.1\"\n          value={speed}\n          onChange={(e) => setSpeed(parseFloat(e.target.value))}\n          className=\"mt-1 block w-full\"\n          aria-label=\"Voice speed adjustment\"\n        />\n      </div>\n\n      <div>\n        <label htmlFor=\"voice-pitch\" className=\"block text-sm font-medium text-gray-700\">\n          Pitch ({pitch.toFixed(1)}x)\n        </label>\n        <input\n          id=\"voice-pitch\"\n          type=\"range\"\n          min=\"0.5\"\n          max=\"2\"\n          step=\"0.1\"\n          value={pitch}\n          onChange={(e) => setPitch(parseFloat(e.target.value))}\n          className=\"mt-1 block w-full\"\n          aria-label=\"Voice pitch adjustment\"\n        />\n      </div>\n\n      <button\n        type=\"button\"\n        onClick={handleTest}\n        disabled={!text || isPlaying}\n        className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 disabled:bg-gray-400 disabled:cursor-not-allowed\"\n        aria-label=\"Test voice with current settings\"\n      >\n        {isPlaying ? (\n          <>\n            <Pause className=\"h-4 w-4 mr-2\" />\n            Playing...\n          </>\n        ) : (\n          <>\n            <Volume2 className=\"h-4 w-4 mr-2\" />\n            Test Voice\n          </>\n        )}\n      </button>\n    </div>\n  );\n} "
        }
    ]
}