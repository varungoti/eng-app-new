{
    "sourceFile": "src/components/inputs/DepartmentInput.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1740765803776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740765834739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,10 +5,15 @@\n   department: string;\r\n   onSubmit: (data: any) => void;\r\n }\r\n \r\n+// Define a Record type for formData\r\n+interface FormData {\r\n+  [key: string]: string;\r\n+}\r\n+\r\n const DepartmentInput: React.FC<DepartmentInputProps> = ({ department, onSubmit }) => {\r\n-  const [formData, setFormData] = React.useState({});\r\n+  const [formData, setFormData] = React.useState<FormData>({});\r\n \r\n   const getInputFields = () => {\r\n     switch (department) {\r\n       case 'sales':\r\n"
                }
            ],
            "date": 1740765803776,
            "name": "Commit-0",
            "content": "import React from 'react';\r\nimport { Send } from 'lucide-react';\r\n\r\ninterface DepartmentInputProps {\r\n  department: string;\r\n  onSubmit: (data: any) => void;\r\n}\r\n\r\nconst DepartmentInput: React.FC<DepartmentInputProps> = ({ department, onSubmit }) => {\r\n  const [formData, setFormData] = React.useState({});\r\n\r\n  const getInputFields = () => {\r\n    switch (department) {\r\n      case 'sales':\r\n        return [\r\n          { name: 'revenue', label: 'Revenue', type: 'number' },\r\n          { name: 'leads', label: 'New Leads', type: 'number' },\r\n          { name: 'conversionRate', label: 'Conversion Rate', type: 'number' },\r\n          { name: 'forecast', label: 'Sales Forecast', type: 'number' }\r\n        ];\r\n      case 'marketing':\r\n        return [\r\n          { name: 'campaigns', label: 'Active Campaigns', type: 'number' },\r\n          { name: 'leads', label: 'Marketing Leads', type: 'number' },\r\n          { name: 'roi', label: 'Marketing ROI', type: 'number' },\r\n          { name: 'budget', label: 'Budget Utilization', type: 'number' }\r\n        ];\r\n      case 'content':\r\n        return [\r\n          { name: 'newContent', label: 'New Content Created', type: 'number' },\r\n          { name: 'engagement', label: 'User Engagement', type: 'number' },\r\n          { name: 'quality', label: 'Content Quality Score', type: 'number' }\r\n        ];\r\n      case 'technical':\r\n        return [\r\n          { name: 'uptime', label: 'System Uptime', type: 'number' },\r\n          { name: 'incidents', label: 'Active Incidents', type: 'number' },\r\n          { name: 'performance', label: 'System Performance', type: 'number' }\r\n        ];\r\n      case 'accounts':\r\n        return [\r\n          { name: 'revenue', label: 'Total Revenue', type: 'number' },\r\n          { name: 'expenses', label: 'Total Expenses', type: 'number' },\r\n          { name: 'profit', label: 'Net Profit', type: 'number' },\r\n          { name: 'cashFlow', label: 'Cash Flow', type: 'number' }\r\n        ];\r\n      default:\r\n        return [];\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    onSubmit({\r\n      department,\r\n      timestamp: new Date().toISOString(),\r\n      data: formData\r\n    });\r\n    setFormData({});\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n      <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n        <h3 className=\"text-lg font-medium text-gray-900 mb-4\">\r\n          {department.charAt(0).toUpperCase() + department.slice(1)} Department Input\r\n        </h3>\r\n        <div className=\"space-y-4\">\r\n          {getInputFields().map((field) => (\r\n            <div key={field.name}>\r\n              <label htmlFor={`${department}-${field.name}`} className=\"block text-sm font-medium text-gray-700\">\r\n                {field.label}\r\n              </label>\r\n              <input\r\n                id={`${department}-${field.name}`}\r\n                type={field.type}\r\n                name={field.name}\r\n                value={formData[field.name] || ''}\r\n                onChange={(e) => setFormData(prev => ({\r\n                  ...prev,\r\n                  [field.name]: e.target.value\r\n                }))}\r\n                className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\r\n                required\r\n              />\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"mt-4\">\r\n          <button\r\n            type=\"submit\"\r\n            className=\"inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\r\n          >\r\n            <Send className=\"h-4 w-4 mr-2\" />\r\n            Submit Report\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default DepartmentInput;"
        }
    ]
}