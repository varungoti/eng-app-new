{
    "sourceFile": "src/components/teacher/LanguageLearningFeedback.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1740776150898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740776170658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -365,10 +365,9 @@\n \r\n     } catch (error) {\r\n       toast({\r\n         title: \"Analysis Failed\",\r\n-        description: \"Failed to analyze audio. Please try again.\",\r\n-        variant: \"destructive\"\r\n+        description: \"Failed to analyze audio. Please try again.\"\r\n       });\r\n     }\r\n   };\r\n \r\n"
                },
                {
                    "date": 1740776274726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -365,10 +365,11 @@\n \r\n     } catch (error) {\r\n       toast({\r\n         title: \"Analysis Failed\",\r\n-        description: \"Failed to analyze audio. Please try again.\"\r\n-      });\r\n+        description: \"Failed to analyze audio. Please try again.\",\r\n+        variant: \"destructive\"\r\n+      } as any);\r\n     }\r\n   };\r\n \r\n   return (\r\n"
                },
                {
                    "date": 1740776290885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -427,8 +427,9 @@\n                 <CardTitle>Audio Visualization</CardTitle>\r\n                 <div className=\"flex gap-2\">\r\n                   {visualizationStyles.map(style => (\r\n                     <Button\r\n+                    \r\n                       key={style.name}\r\n                       variant={visualizationStyle === style.name ? \"default\" : \"outline\"}\r\n                       size=\"sm\"\r\n                       onClick={() => setVisualizationStyle(style.name)}\r\n"
                }
            ],
            "date": 1740776150898,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Progress } from \"@/components/ui/progress\";\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\r\nimport { useToast } from \"@/components/ui/use-toast\";\r\nimport {\r\n  Mic,\r\n  Music,\r\n  Play,\r\n  Pause,\r\n  RefreshCw,\r\n  Star,\r\n  Trophy,\r\n  Crown,\r\n  Medal,\r\n  Sparkles,\r\n  Wand2,\r\n  BookOpen,\r\n  GraduationCap,\r\n  Languages,\r\n  Ear,\r\n  Speech,\r\n  Keyboard,\r\n  Users\r\n} from \"lucide-react\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ninterface LanguageLearningFeedbackProps {\r\n  targetAudio?: string;\r\n  targetText?: string;\r\n  practiceMode?: 'pronunciation' | 'speaking' | 'listening' | 'conversation';\r\n  difficulty?: 'beginner' | 'intermediate' | 'advanced';\r\n  onFeedbackComplete?: (feedback: LanguageFeedback) => void;\r\n  gameMode?: boolean;\r\n}\r\n\r\ninterface Achievement {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  icon: React.ReactNode;\r\n  unlocked: boolean;\r\n}\r\n\r\ninterface AudioFeedback {\r\n  accuracy: number;\r\n  pitch: number;\r\n  rhythm: number;\r\n  intonation: number;\r\n  fluency: number;\r\n  suggestions: string[];\r\n  achievements: Achievement[];\r\n}\r\n\r\ninterface LanguageFeedback extends AudioFeedback {\r\n  languageMetrics: {\r\n    pronunciation: {\r\n      phonemeAccuracy: number;\r\n      stressPatterns: number;\r\n      vowelQuality: number;\r\n      consonantClarity: number;\r\n    };\r\n    grammar: {\r\n      sentenceStructure: number;\r\n      verbTenses: number;\r\n      articleUsage: number;\r\n      prepositions: number;\r\n    };\r\n    vocabulary: {\r\n      wordChoice: number;\r\n      idiomaticExpressions: number;\r\n      contextualUsage: number;\r\n      range: number;\r\n    };\r\n    fluency: {\r\n      speakingRate: number;\r\n      pausePatterns: number;\r\n      fillers: number;\r\n      selfCorrections: number;\r\n    };\r\n  };\r\n  detailedSuggestions: {\r\n    category: string;\r\n    suggestions: string[];\r\n    examples: string[];\r\n    priority: 'high' | 'medium' | 'low';\r\n  }[];\r\n}\r\n\r\ninterface VisualizationStyle {\r\n  name: string;\r\n  render: (ctx: CanvasRenderingContext2D, data: Float32Array, frequencyData: Uint8Array, canvas: HTMLCanvasElement) => void;\r\n}\r\n\r\nconst visualizationStyles: VisualizationStyle[] = [\r\n  {\r\n    name: 'waveform',\r\n    render: (ctx, data, _, canvas) => {\r\n      ctx.fillStyle = 'rgb(23, 23, 23)';\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n      ctx.lineWidth = 2;\r\n      ctx.strokeStyle = 'rgb(124, 58, 237)';\r\n      ctx.beginPath();\r\n\r\n      const sliceWidth = canvas.width / data.length;\r\n      let x = 0;\r\n\r\n      for (let i = 0; i < data.length; i++) {\r\n        const v = data[i] * 100;\r\n        const y = (canvas.height / 2) + (v * canvas.height / 2);\r\n\r\n        if (i === 0) ctx.moveTo(x, y);\r\n        else ctx.lineTo(x, y);\r\n\r\n        x += sliceWidth;\r\n      }\r\n\r\n      ctx.lineTo(canvas.width, canvas.height / 2);\r\n      ctx.stroke();\r\n    }\r\n  },\r\n  {\r\n    name: 'frequency',\r\n    render: (ctx, _, frequencyData, canvas) => {\r\n      ctx.fillStyle = 'rgb(23, 23, 23)';\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n      const barWidth = (canvas.width / frequencyData.length) * 2.5;\r\n      let barX = 0;\r\n\r\n      for (let i = 0; i < frequencyData.length; i++) {\r\n        const barHeight = (frequencyData[i] / 255) * canvas.height;\r\n        const hue = (i / frequencyData.length) * 360;\r\n        ctx.fillStyle = `hsla(${hue}, 100%, 50%, 0.8)`;\r\n        ctx.fillRect(barX, canvas.height - barHeight, barWidth, barHeight);\r\n        barX += barWidth + 1;\r\n      }\r\n    }\r\n  },\r\n  {\r\n    name: 'circular',\r\n    render: (ctx, data, frequencyData, canvas) => {\r\n      ctx.fillStyle = 'rgb(23, 23, 23)';\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n      const centerX = canvas.width / 2;\r\n      const centerY = canvas.height / 2;\r\n      const radius = Math.min(centerX, centerY) - 20;\r\n\r\n      ctx.beginPath();\r\n      ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);\r\n      ctx.strokeStyle = 'rgba(124, 58, 237, 0.2)';\r\n      ctx.stroke();\r\n\r\n      const segments = 128;\r\n      const angleStep = (2 * Math.PI) / segments;\r\n\r\n      for (let i = 0; i < segments; i++) {\r\n        const amplitude = frequencyData[i] / 255;\r\n        const r = radius + (amplitude * 50);\r\n        const angle = i * angleStep;\r\n        const x = centerX + r * Math.cos(angle);\r\n        const y = centerY + r * Math.sin(angle);\r\n\r\n        if (i === 0) ctx.moveTo(x, y);\r\n        else ctx.lineTo(x, y);\r\n\r\n        ctx.strokeStyle = `hsla(${(i / segments) * 360}, 100%, 50%, 0.8)`;\r\n        ctx.stroke();\r\n      }\r\n    }\r\n  }\r\n];\r\n\r\nconst practiceExercises = {\r\n  pronunciation: [\r\n    {\r\n      type: 'minimal-pairs',\r\n      title: 'Minimal Pairs',\r\n      description: 'Practice similar sounding words',\r\n      pairs: [['ship', 'sheep'], ['bit', 'beat'], ['full', 'fool']]\r\n    },\r\n    {\r\n      type: 'tongue-twisters',\r\n      title: 'Tongue Twisters',\r\n      description: 'Improve pronunciation clarity',\r\n      examples: [\r\n        'She sells seashells by the seashore',\r\n        'Peter Piper picked a peck of pickled peppers'\r\n      ]\r\n    }\r\n  ],\r\n  speaking: [\r\n    {\r\n      type: 'role-play',\r\n      title: 'Role Play',\r\n      description: 'Practice real-life conversations',\r\n      scenarios: ['At a restaurant', 'Job interview', 'Making plans']\r\n    },\r\n    {\r\n      type: 'story-retelling',\r\n      title: 'Story Retelling',\r\n      description: 'Practice narrative skills',\r\n      stories: ['A recent vacation', 'A memorable experience', 'A funny incident']\r\n    }\r\n  ],\r\n  listening: [\r\n    {\r\n      type: 'dictation',\r\n      title: 'Dictation',\r\n      description: 'Write what you hear',\r\n      levels: ['word', 'phrase', 'sentence', 'paragraph']\r\n    },\r\n    {\r\n      type: 'comprehension',\r\n      title: 'Listening Comprehension',\r\n      description: 'Answer questions about what you hear',\r\n      categories: ['main idea', 'details', 'inference', 'tone']\r\n    }\r\n  ]\r\n};\r\n\r\nexport function LanguageLearningFeedback({\r\n  targetAudio,\r\n  targetText,\r\n  practiceMode = 'pronunciation',\r\n  difficulty = 'intermediate',\r\n  onFeedbackComplete,\r\n  gameMode = false\r\n}: LanguageLearningFeedbackProps) {\r\n  const { toast } = useToast();\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [audioData, setAudioData] = useState<Float32Array | null>(null);\r\n  const [feedback, setFeedback] = useState<LanguageFeedback | null>(null);\r\n  const [visualizationStyle, setVisualizationStyle] = useState<string>('waveform');\r\n  const [currentExercise, setCurrentExercise] = useState<any>(null);\r\n  const [practiceProgress, setPracticeProgress] = useState(0);\r\n\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const audioContextRef = useRef<AudioContext | null>(null);\r\n  const analyserRef = useRef<AnalyserNode | null>(null);\r\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\r\n  const animationFrameRef = useRef<number>();\r\n\r\n  const startVisualization = () => {\r\n    if (!canvasRef.current || !analyserRef.current) return;\r\n\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    const bufferLength = analyserRef.current.frequencyBinCount;\r\n    const dataArray = new Float32Array(bufferLength);\r\n    const frequencyData = new Uint8Array(bufferLength);\r\n\r\n    const draw = () => {\r\n      if (!isRecording) return;\r\n      animationFrameRef.current = requestAnimationFrame(draw);\r\n\r\n      analyserRef.current!.getFloatTimeDomainData(dataArray);\r\n      analyserRef.current!.getByteFrequencyData(frequencyData);\r\n      setAudioData(dataArray);\r\n\r\n      const style = visualizationStyles.find(s => s.name === visualizationStyle);\r\n      if (style) {\r\n        style.render(ctx, dataArray, frequencyData, canvas);\r\n      }\r\n    };\r\n\r\n    draw();\r\n  };\r\n\r\n  const processAudio = async (blob: Blob) => {\r\n    try {\r\n      // Simulate AI analysis with detailed language metrics\r\n      const simulatedFeedback: LanguageFeedback = {\r\n        accuracy: Math.random() * 100,\r\n        pitch: Math.random() * 100,\r\n        rhythm: Math.random() * 100,\r\n        intonation: Math.random() * 100,\r\n        fluency: Math.random() * 100,\r\n        suggestions: [\r\n          \"Try emphasizing the stressed syllables more\",\r\n          \"Maintain a steady rhythm throughout\",\r\n          \"Pay attention to rising intonation at the end of questions\"\r\n        ],\r\n        achievements: [\r\n          {\r\n            id: \"perfect_pitch\",\r\n            title: \"Perfect Pitch\",\r\n            description: \"Matched the target pitch perfectly\",\r\n            icon: <Music className=\"h-6 w-6\" />,\r\n            unlocked: Math.random() > 0.5\r\n          },\r\n          {\r\n            id: \"rhythm_master\",\r\n            title: \"Rhythm Master\",\r\n            description: \"Maintained perfect rhythm\",\r\n            icon: <Music className=\"h-6 w-6\" />,\r\n            unlocked: Math.random() > 0.5\r\n          },\r\n          {\r\n            id: \"fluency_star\",\r\n            title: \"Fluency Star\",\r\n            description: \"Spoke with natural fluency\",\r\n            icon: <Star className=\"h-6 w-6\" />,\r\n            unlocked: Math.random() > 0.5\r\n          }\r\n        ],\r\n        languageMetrics: {\r\n          pronunciation: {\r\n            phonemeAccuracy: Math.random() * 100,\r\n            stressPatterns: Math.random() * 100,\r\n            vowelQuality: Math.random() * 100,\r\n            consonantClarity: Math.random() * 100\r\n          },\r\n          grammar: {\r\n            sentenceStructure: Math.random() * 100,\r\n            verbTenses: Math.random() * 100,\r\n            articleUsage: Math.random() * 100,\r\n            prepositions: Math.random() * 100\r\n          },\r\n          vocabulary: {\r\n            wordChoice: Math.random() * 100,\r\n            idiomaticExpressions: Math.random() * 100,\r\n            contextualUsage: Math.random() * 100,\r\n            range: Math.random() * 100\r\n          },\r\n          fluency: {\r\n            speakingRate: Math.random() * 100,\r\n            pausePatterns: Math.random() * 100,\r\n            fillers: Math.random() * 100,\r\n            selfCorrections: Math.random() * 100\r\n          }\r\n        },\r\n        detailedSuggestions: [\r\n          {\r\n            category: 'Pronunciation',\r\n            suggestions: [\r\n              'Focus on the /θ/ sound in \"think\" and \"thank\"',\r\n              'Practice the schwa sound in unstressed syllables'\r\n            ],\r\n            examples: ['think vs. sink', 'about → /əˈbaʊt/'],\r\n            priority: 'high'\r\n          },\r\n          {\r\n            category: 'Grammar',\r\n            suggestions: [\r\n              'Pay attention to article usage before nouns',\r\n              'Review past perfect tense formation'\r\n            ],\r\n            examples: ['the book vs. a book', 'had gone vs. went'],\r\n            priority: 'medium'\r\n          }\r\n        ]\r\n      };\r\n\r\n      setFeedback(simulatedFeedback);\r\n      onFeedbackComplete?.(simulatedFeedback);\r\n\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Analysis Failed\",\r\n        description: \"Failed to analyze audio. Please try again.\",\r\n        variant: \"destructive\"\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Tabs defaultValue=\"practice\" className=\"w-full\">\r\n        <TabsList>\r\n          <TabsTrigger value=\"practice\">Practice</TabsTrigger>\r\n          <TabsTrigger value=\"visualization\">Visualization</TabsTrigger>\r\n          <TabsTrigger value=\"feedback\">Feedback</TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value=\"practice\">\r\n          {/* Practice Mode UI */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>\r\n                {practiceMode.charAt(0).toUpperCase() + practiceMode.slice(1)} Practice\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                {practiceMode !== 'conversation' && practiceExercises[practiceMode]?.map((exercise, index) => (\r\n                  <Card\r\n                    key={index}\r\n                    className={cn(\r\n                      \"cursor-pointer hover:shadow-lg transition-all\",\r\n                      currentExercise?.type === exercise.type && \"border-primary\"\r\n                    )}\r\n                    onClick={() => setCurrentExercise(exercise)}\r\n                  >\r\n                    <CardContent className=\"p-4\">\r\n                      <div className=\"flex items-center gap-3\">\r\n                        {exercise.type === 'minimal-pairs' && <Ear className=\"h-5 w-5 text-primary\" />}\r\n                        {exercise.type === 'tongue-twisters' && <Speech className=\"h-5 w-5 text-primary\" />}\r\n                        {exercise.type === 'role-play' && <Users className=\"h-5 w-5 text-primary\" />}\r\n                        {exercise.type === 'dictation' && <Keyboard className=\"h-5 w-5 text-primary\" />}\r\n                        <div>\r\n                          <h3 className=\"font-medium\">{exercise.title}</h3>\r\n                          <p className=\"text-sm text-muted-foreground\">{exercise.description}</p>\r\n                        </div>\r\n                      </div>\r\n                    </CardContent>\r\n                  </Card>\r\n                ))}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"visualization\">\r\n          {/* Enhanced Visualization UI */}\r\n          <Card>\r\n            <CardHeader>\r\n              <div className=\"flex items-center justify-between\">\r\n                <CardTitle>Audio Visualization</CardTitle>\r\n                <div className=\"flex gap-2\">\r\n                  {visualizationStyles.map(style => (\r\n                    <Button\r\n                      key={style.name}\r\n                      variant={visualizationStyle === style.name ? \"default\" : \"outline\"}\r\n                      size=\"sm\"\r\n                      onClick={() => setVisualizationStyle(style.name)}\r\n                    >\r\n                      {style.name.charAt(0).toUpperCase() + style.name.slice(1)}\r\n                    </Button>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {/* Canvas and recording controls */}\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"feedback\">\r\n          {/* Detailed Language Feedback UI */}\r\n          {feedback && (\r\n            <div className=\"space-y-6\">\r\n              {/* Language Metrics */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle>Language Analysis</CardTitle>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n                    {Object.entries(feedback.languageMetrics).map(([category, metrics]) => (\r\n                      <div key={category} className=\"space-y-4\">\r\n                        <h3 className=\"font-medium capitalize\">{category}</h3>\r\n                        <div className=\"space-y-2\">\r\n                          {Object.entries(metrics).map(([metric, value]) => (\r\n                            <div key={metric} className=\"space-y-1\">\r\n                              <div className=\"flex justify-between text-sm\">\r\n                                <span className=\"capitalize\">{metric.replace(/([A-Z])/g, ' $1').trim()}</span>\r\n                                <span>{Math.round(value)}%</span>\r\n                              </div>\r\n                              <Progress value={value} className=\"h-2\" />\r\n                            </div>\r\n                          ))}\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              {/* Detailed Suggestions */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle>Improvement Suggestions</CardTitle>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"space-y-6\">\r\n                    {feedback.detailedSuggestions.map((suggestion, index) => (\r\n                      <div\r\n                        key={index}\r\n                        className={cn(\r\n                          \"p-4 rounded-lg border\",\r\n                          suggestion.priority === 'high' && \"border-red-200 bg-red-50\",\r\n                          suggestion.priority === 'medium' && \"border-yellow-200 bg-yellow-50\",\r\n                          suggestion.priority === 'low' && \"border-green-200 bg-green-50\"\r\n                        )}\r\n                      >\r\n                        <h4 className=\"font-medium flex items-center gap-2\">\r\n                          <Wand2 className=\"h-4 w-4\" />\r\n                          {suggestion.category}\r\n                        </h4>\r\n                        <ul className=\"mt-2 space-y-2\">\r\n                          {suggestion.suggestions.map((item, i) => (\r\n                            <li key={i} className=\"text-sm flex items-start gap-2\">\r\n                              <Sparkles className=\"h-4 w-4 mt-0.5\" />\r\n                              {item}\r\n                            </li>\r\n                          ))}\r\n                        </ul>\r\n                        <div className=\"mt-4 p-2 bg-white/50 rounded-md\">\r\n                          <p className=\"text-sm font-medium\">Examples:</p>\r\n                          <ul className=\"mt-1 space-y-1\">\r\n                            {suggestion.examples.map((example, i) => (\r\n                              <li key={i} className=\"text-sm\">{example}</li>\r\n                            ))}\r\n                          </ul>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n            </div>\r\n          )}\r\n        </TabsContent>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n} "
        }
    ]
}