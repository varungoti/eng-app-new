{
    "sourceFile": "src/components/ai/RealTimePronunciationTrainer.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1740853289106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740853332588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,9 +196,9 @@\n         correct: Math.random() > 0.3,\r\n         confidence: Math.random() * 100,\r\n         waveform: Array.from({ length: 50 }, () => Math.random())\r\n       })),\r\n-      stress: stressPattern.map(stress => ({\r\n+      stress: stressPattern.map((_ , index) => ({\r\n         correct: Math.random() > 0.2,\r\n         confidence: Math.random() * 100\r\n       })),\r\n       intonation: Math.random() * 100,\r\n"
                },
                {
                    "date": 1740853349524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,9 +196,9 @@\n         correct: Math.random() > 0.3,\r\n         confidence: Math.random() * 100,\r\n         waveform: Array.from({ length: 50 }, () => Math.random())\r\n       })),\r\n-      stress: stressPattern.map((_ , index) => ({\r\n+      stress: stressPattern.map(stress => ({\r\n         correct: Math.random() > 0.2,\r\n         confidence: Math.random() * 100\r\n       })),\r\n       intonation: Math.random() * 100,\r\n"
                },
                {
                    "date": 1740853359586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,9 +196,10 @@\n         correct: Math.random() > 0.3,\r\n         confidence: Math.random() * 100,\r\n         waveform: Array.from({ length: 50 }, () => Math.random())\r\n       })),\r\n-      stress: stressPattern.map(stress => ({\r\n+      stress: stressPattern.map(stress => ({<COMPLETION}\r\n+        stress,\r\n         correct: Math.random() > 0.2,\r\n         confidence: Math.random() * 100\r\n       })),\r\n       intonation: Math.random() * 100,\r\n"
                },
                {
                    "date": 1740853365102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,10 +196,9 @@\n         correct: Math.random() > 0.3,\r\n         confidence: Math.random() * 100,\r\n         waveform: Array.from({ length: 50 }, () => Math.random())\r\n       })),\r\n-      stress: stressPattern.map(stress => ({<COMPLETION}\r\n-        stress,\r\n+      stress: stressPattern.map(stress => ({\r\n         correct: Math.random() > 0.2,\r\n         confidence: Math.random() * 100\r\n       })),\r\n       intonation: Math.random() * 100,\r\n"
                },
                {
                    "date": 1740949016798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,18 +6,16 @@\n import { Button } from \"@/components/ui/button\";\r\n import { Progress } from \"@/components/ui/progress\";\r\n import {\r\n   Mic,\r\n-  Volume2,\r\n+  \r\n   Play,\r\n   Pause,\r\n   AudioWaveform as Waveform,\r\n   ArrowRight,\r\n-  ArrowDown,\r\n-  Circle,\r\n-  CheckCircle,\r\n+ \r\n   XCircle,\r\n-  RefreshCw,\r\n+ \r\n \r\n   Sparkles\r\n } from \"lucide-react\";\r\n import { cn } from \"@/lib/utils\";\r\n"
                },
                {
                    "date": 1740949038208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import React, { useState, useEffect, useRef } from 'react';\r\n import { motion, AnimatePresence } from \"framer-motion\";\r\n import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\n import { Button } from \"@/components/ui/button\";\r\n-import { Progress } from \"@/components/ui/progress\";\r\n+//import { Progress } from \"@/components/ui/progress\";\r\n import {\r\n   Mic,\r\n   \r\n   Play,\r\n"
                },
                {
                    "date": 1740983287595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n \"use client\";\r\n \r\n-import React, { useState, useEffect, useRef } from 'react';\r\n+import { useState, useEffect, useRef } from 'react';\r\n import { motion, AnimatePresence } from \"framer-motion\";\r\n import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\n import { Button } from \"@/components/ui/button\";\r\n //import { Progress } from \"@/components/ui/progress\";\r\n@@ -15,9 +15,10 @@\n  \r\n   XCircle,\r\n  \r\n \r\n-  Sparkles\r\n+  Sparkles,\r\n+  Keyboard\r\n } from \"lucide-react\";\r\n import { cn } from \"@/lib/utils\";\r\n \r\n interface PronunciationTrainerProps {\r\n@@ -368,8 +369,12 @@\n \r\n       {/* Visualization */}\r\n       <Card>\r\n         <CardContent className=\"p-6\">\r\n+          <div className=\"flex items-center gap-2 mb-4\">\r\n+            <Waveform className=\"h-4 w-4 text-muted-foreground\" />\r\n+            <span className=\"text-sm text-muted-foreground\">Audio Waveform</span>\r\n+          </div>\r\n           <canvas\r\n             ref={canvasRef}\r\n             className=\"w-full h-40 bg-background rounded-lg\"\r\n             width={800}\r\n@@ -377,8 +382,14 @@\n           />\r\n         </CardContent>\r\n       </Card>\r\n \r\n+      {/* Input Method Toggle */}\r\n+      <div className=\"flex items-center justify-end gap-2 text-sm text-muted-foreground\">\r\n+        <Keyboard className=\"h-4 w-4\" />\r\n+        <span>Press spacebar to start/stop recording</span>\r\n+      </div>\r\n+\r\n       {/* Feedback */}\r\n       <AnimatePresence mode=\"wait\">\r\n         {feedback.length > 0 && (\r\n           <motion.div\r\n"
                },
                {
                    "date": 1740983308580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,14 +84,33 @@\n   const [feedback, setFeedback] = useState<string[]>([]);\r\n   const [visualizations, setVisualizations] = useState<PhonemeVisualization[]>([]);\r\n   const [attempts, setAttempts] = useState(0);\r\n   const [streak, setStreak] = useState(0);\r\n+  const [audio] = useState<HTMLAudioElement | null>(() => audioUrl ? new Audio(audioUrl) : null);\r\n \r\n   const audioContextRef = useRef<AudioContext | null>(null);\r\n   const analyserRef = useRef<AnalyserNode | null>(null);\r\n   const mediaRecorderRef = useRef<MediaRecorder | null>(null);\r\n   const canvasRef = useRef<HTMLCanvasElement>(null);\r\n \r\n+  // Handle audio playback\r\n+  useEffect(() => {\r\n+    if (audio) {\r\n+      if (isPlaying) {\r\n+        audio.play();\r\n+      } else {\r\n+        audio.pause();\r\n+        audio.currentTime = 0;\r\n+      }\r\n+    }\r\n+    return () => {\r\n+      if (audio) {\r\n+        audio.pause();\r\n+        audio.currentTime = 0;\r\n+      }\r\n+    };\r\n+  }, [isPlaying, audio]);\r\n+\r\n   // Initialize audio context\r\n   useEffect(() => {\r\n     if (typeof window !== 'undefined') {\r\n       audioContextRef.current = new (window.AudioContext || (window as any).webkitAudioContext)();\r\n"
                },
                {
                    "date": 1740983317935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,11 +11,10 @@\n   Play,\r\n   Pause,\r\n   AudioWaveform as Waveform,\r\n   ArrowRight,\r\n+   XCircle,\r\n  \r\n-  XCircle,\r\n- \r\n \r\n   Sparkles,\r\n   Keyboard\r\n } from \"lucide-react\";\r\n"
                },
                {
                    "date": 1740983326123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,8 @@\n   Pause,\r\n   AudioWaveform as Waveform,\r\n   ArrowRight,\r\n    XCircle,\r\n- \r\n \r\n   Sparkles,\r\n   Keyboard\r\n } from \"lucide-react\";\r\n"
                },
                {
                    "date": 1740983333551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n   Play,\r\n   Pause,\r\n   AudioWaveform as Waveform,\r\n   ArrowRight,\r\n-   XCircle,\r\n+  XCircle,\r\n \r\n   Sparkles,\r\n   Keyboard\r\n } from \"lucide-react\";\r\n"
                },
                {
                    "date": 1740983395757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n   Play,\r\n   Pause,\r\n   AudioWaveform as Waveform,\r\n   ArrowRight,\r\n-  XCircle,\r\n+   XCircle,\r\n \r\n   Sparkles,\r\n   Keyboard\r\n } from \"lucide-react\";\r\n@@ -386,12 +386,8 @@\n \r\n       {/* Visualization */}\r\n       <Card>\r\n         <CardContent className=\"p-6\">\r\n-          <div className=\"flex items-center gap-2 mb-4\">\r\n-            <Waveform className=\"h-4 w-4 text-muted-foreground\" />\r\n-            <span className=\"text-sm text-muted-foreground\">Audio Waveform</span>\r\n-          </div>\r\n           <canvas\r\n             ref={canvasRef}\r\n             className=\"w-full h-40 bg-background rounded-lg\"\r\n             width={800}\r\n@@ -399,14 +395,8 @@\n           />\r\n         </CardContent>\r\n       </Card>\r\n \r\n-      {/* Input Method Toggle */}\r\n-      <div className=\"flex items-center justify-end gap-2 text-sm text-muted-foreground\">\r\n-        <Keyboard className=\"h-4 w-4\" />\r\n-        <span>Press spacebar to start/stop recording</span>\r\n-      </div>\r\n-\r\n       {/* Feedback */}\r\n       <AnimatePresence mode=\"wait\">\r\n         {feedback.length > 0 && (\r\n           <motion.div\r\n"
                },
                {
                    "date": 1740983416132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,8 +116,25 @@\n       analyserRef.current.fftSize = 2048;\r\n     }\r\n   }, []);\r\n \r\n+  // Add keyboard event handling\r\n+  useEffect(() => {\r\n+    const handleKeyPress = (e: KeyboardEvent) => {\r\n+      if (e.code === 'Space' && !e.repeat) {\r\n+        e.preventDefault();\r\n+        if (isRecording) {\r\n+          stopRecording();\r\n+        } else {\r\n+          startRecording();\r\n+        }\r\n+      }\r\n+    };\r\n+\r\n+    window.addEventListener('keydown', handleKeyPress);\r\n+    return () => window.removeEventListener('keydown', handleKeyPress);\r\n+  }, [isRecording, ]);\r\n+\r\n   const startRecording = async () => {\r\n     try {\r\n       const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n       \r\n@@ -298,12 +315,17 @@\n               <CardTitle className=\"text-2xl\">{word}</CardTitle>\r\n               <p className=\"text-sm text-muted-foreground mt-1\">/{phonetics}/</p>\r\n             </div>\r\n             {streak > 0 && (\r\n-              <div className=\"flex items-center gap-2\">\r\n-                <Sparkles className=\"h-5 w-5 text-yellow-500\" />\r\n+              <motion.div \r\n+                className=\"flex items-center gap-2\"\r\n+                initial={{ scale: 0 }}\r\n+                animate={{ scale: 1 }}\r\n+                transition={{ type: \"spring\" }}\r\n+              >\r\n+                <Sparkles className=\"h-5 w-5 text-yellow-500 animate-pulse\" />\r\n                 <span className=\"font-bold text-yellow-500\">{streak}x Streak!</span>\r\n-              </div>\r\n+              </motion.div>\r\n             )}\r\n           </div>\r\n         </CardHeader>\r\n         <CardContent>\r\n@@ -383,8 +405,19 @@\n           </div>\r\n         </CardContent>\r\n       </Card>\r\n \r\n+      {/* Input Method Toggle */}\r\n+      <motion.div \r\n+        className=\"flex items-center justify-end gap-2 text-sm text-muted-foreground\"\r\n+        initial={{ opacity: 0 }}\r\n+        animate={{ opacity: 1 }}\r\n+        transition={{ delay: 0.5 }}\r\n+      >\r\n+        <Keyboard className=\"h-4 w-4 animate-bounce\" />\r\n+        <span>Press spacebar to start/stop recording</span>\r\n+      </motion.div>\r\n+\r\n       {/* Visualization */}\r\n       <Card>\r\n         <CardContent className=\"p-6\">\r\n           <canvas\r\n"
                },
                {
                    "date": 1740983422931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,9 @@\n     };\r\n \r\n     window.addEventListener('keydown', handleKeyPress);\r\n     return () => window.removeEventListener('keydown', handleKeyPress);\r\n-  }, [isRecording, ]);\r\n+  }, [isRecording]);\r\n \r\n   const startRecording = async () => {\r\n     try {\r\n       const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n"
                },
                {
                    "date": 1740983824109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n \"use client\";\r\n \r\n-import { useState, useEffect, useRef } from 'react';\r\n+import { useState, useEffect, useRef, useCallback } from 'react';\r\n import { motion, AnimatePresence } from \"framer-motion\";\r\n import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\n import { Button } from \"@/components/ui/button\";\r\n //import { Progress } from \"@/components/ui/progress\";\r\n@@ -116,26 +116,9 @@\n       analyserRef.current.fftSize = 2048;\r\n     }\r\n   }, []);\r\n \r\n-  // Add keyboard event handling\r\n-  useEffect(() => {\r\n-    const handleKeyPress = (e: KeyboardEvent) => {\r\n-      if (e.code === 'Space' && !e.repeat) {\r\n-        e.preventDefault();\r\n-        if (isRecording) {\r\n-          stopRecording();\r\n-        } else {\r\n-          startRecording();\r\n-        }\r\n-      }\r\n-    };\r\n-\r\n-    window.addEventListener('keydown', handleKeyPress);\r\n-    return () => window.removeEventListener('keydown', handleKeyPress);\r\n-  }, [isRecording]);\r\n-\r\n-  const startRecording = async () => {\r\n+  const startRecording = useCallback(async () => {\r\n     try {\r\n       const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n       \r\n       if (!audioContextRef.current || !analyserRef.current) return;\r\n@@ -158,17 +141,34 @@\n \r\n     } catch (error) {\r\n       console.error('Error accessing microphone:', error);\r\n     }\r\n-  };\r\n+  }, []);\r\n \r\n-  const stopRecording = () => {\r\n+  const stopRecording = useCallback(() => {\r\n     if (mediaRecorderRef.current && isRecording) {\r\n       mediaRecorderRef.current.stop();\r\n       setIsRecording(false);\r\n     }\r\n-  };\r\n+  }, [isRecording]);\r\n \r\n+  // Add keyboard event handling\r\n+  useEffect(() => {\r\n+    const handleKeyPress = (e: KeyboardEvent) => {\r\n+      if (e.code === 'Space' && !e.repeat) {\r\n+        e.preventDefault();\r\n+        if (isRecording) {\r\n+          stopRecording();\r\n+        } else {\r\n+          startRecording();\r\n+        }\r\n+      }\r\n+    };\r\n+\r\n+    window.addEventListener('keydown', handleKeyPress);\r\n+    return () => window.removeEventListener('keydown', handleKeyPress);\r\n+  }, [isRecording, startRecording, stopRecording]);\r\n+\r\n   const startVisualization = () => {\r\n     if (!canvasRef.current || !analyserRef.current) return;\r\n \r\n     const canvas = canvasRef.current;\r\n"
                }
            ],
            "date": 1740853289106,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Progress } from \"@/components/ui/progress\";\r\nimport {\r\n  Mic,\r\n  Volume2,\r\n  Play,\r\n  Pause,\r\n  AudioWaveform as Waveform,\r\n  ArrowRight,\r\n  ArrowDown,\r\n  Circle,\r\n  CheckCircle,\r\n  XCircle,\r\n  RefreshCw,\r\n\r\n  Sparkles\r\n} from \"lucide-react\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ninterface PronunciationTrainerProps {\r\n  word: string;\r\n  phonetics: string;\r\n  difficulty: 'beginner' | 'intermediate' | 'advanced';\r\n  syllables: string[];\r\n  stressPattern: number[];\r\n  audioUrl?: string;\r\n  onProgress: (progress: PronunciationProgress) => void;\r\n}\r\n\r\ninterface PronunciationProgress {\r\n  accuracy: number;\r\n  phonemeScores: { [key: string]: number };\r\n  stressAccuracy: number;\r\n  intonationAccuracy: number;\r\n  fluencyScore: number;\r\n  areas: {\r\n    strengths: string[];\r\n    improvements: string[];\r\n  };\r\n}\r\n\r\ninterface PhonemeVisualization {\r\n  phoneme: string;\r\n  correct: boolean;\r\n  confidence: number;\r\n  waveform: number[];\r\n}\r\n\r\nconst PHONEME_COLORS = {\r\n  vowels: {\r\n    correct: 'bg-green-500',\r\n    partial: 'bg-yellow-500',\r\n    incorrect: 'bg-red-500'\r\n  },\r\n  consonants: {\r\n    correct: 'bg-blue-500',\r\n    partial: 'bg-purple-500',\r\n    incorrect: 'bg-red-500'\r\n  }\r\n};\r\n\r\nconst STRESS_PATTERNS = {\r\n  primary: '●',\r\n  secondary: '○',\r\n  unstressed: '·'\r\n};\r\n\r\nexport function RealTimePronunciationTrainer({\r\n  word,\r\n  phonetics,\r\n  difficulty,\r\n  syllables,\r\n  stressPattern,\r\n  audioUrl,\r\n  onProgress\r\n}: PronunciationTrainerProps) {\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [currentPhoneme, setCurrentPhoneme] = useState<PhonemeVisualization | null>(null);\r\n  const [feedback, setFeedback] = useState<string[]>([]);\r\n  const [visualizations, setVisualizations] = useState<PhonemeVisualization[]>([]);\r\n  const [attempts, setAttempts] = useState(0);\r\n  const [streak, setStreak] = useState(0);\r\n\r\n  const audioContextRef = useRef<AudioContext | null>(null);\r\n  const analyserRef = useRef<AnalyserNode | null>(null);\r\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n\r\n  // Initialize audio context\r\n  useEffect(() => {\r\n    if (typeof window !== 'undefined') {\r\n      audioContextRef.current = new (window.AudioContext || (window as any).webkitAudioContext)();\r\n      analyserRef.current = audioContextRef.current.createAnalyser();\r\n      analyserRef.current.fftSize = 2048;\r\n    }\r\n  }, []);\r\n\r\n  const startRecording = async () => {\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n      \r\n      if (!audioContextRef.current || !analyserRef.current) return;\r\n\r\n      const source = audioContextRef.current.createMediaStreamSource(stream);\r\n      source.connect(analyserRef.current);\r\n\r\n      mediaRecorderRef.current = new MediaRecorder(stream);\r\n      const chunks: BlobPart[] = [];\r\n\r\n      mediaRecorderRef.current.ondataavailable = (e) => chunks.push(e.data);\r\n      mediaRecorderRef.current.onstop = async () => {\r\n        const blob = new Blob(chunks, { type: 'audio/webm' });\r\n        await analyzePronunciation(blob);\r\n      };\r\n\r\n      mediaRecorderRef.current.start();\r\n      setIsRecording(true);\r\n      startVisualization();\r\n\r\n    } catch (error) {\r\n      console.error('Error accessing microphone:', error);\r\n    }\r\n  };\r\n\r\n  const stopRecording = () => {\r\n    if (mediaRecorderRef.current && isRecording) {\r\n      mediaRecorderRef.current.stop();\r\n      setIsRecording(false);\r\n    }\r\n  };\r\n\r\n  const startVisualization = () => {\r\n    if (!canvasRef.current || !analyserRef.current) return;\r\n\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    const bufferLength = analyserRef.current.frequencyBinCount;\r\n    const dataArray = new Float32Array(bufferLength);\r\n\r\n    const draw = () => {\r\n      if (!isRecording) return;\r\n      requestAnimationFrame(draw);\r\n\r\n      analyserRef.current!.getFloatTimeDomainData(dataArray);\r\n\r\n      // Clear canvas\r\n      ctx.fillStyle = 'rgb(23, 23, 23)';\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n      // Draw waveform\r\n      ctx.lineWidth = 2;\r\n      ctx.strokeStyle = 'rgb(124, 58, 237)';\r\n      ctx.beginPath();\r\n\r\n      const sliceWidth = canvas.width / bufferLength;\r\n      let x = 0;\r\n\r\n      for (let i = 0; i < bufferLength; i++) {\r\n        const v = dataArray[i] * 100;\r\n        const y = (canvas.height / 2) + (v * canvas.height / 2);\r\n\r\n        if (i === 0) ctx.moveTo(x, y);\r\n        else ctx.lineTo(x, y);\r\n\r\n        x += sliceWidth;\r\n      }\r\n\r\n      ctx.lineTo(canvas.width, canvas.height / 2);\r\n      ctx.stroke();\r\n\r\n      // Add real-time phoneme analysis visualization\r\n      if (currentPhoneme) {\r\n        const { phoneme, correct, confidence } = currentPhoneme;\r\n        ctx.fillStyle = correct ? 'rgba(34, 197, 94, 0.2)' : 'rgba(239, 68, 68, 0.2)';\r\n        ctx.fillRect(0, 0, canvas.width * (confidence / 100), 4);\r\n      }\r\n    };\r\n\r\n    draw();\r\n  };\r\n\r\n  const analyzePronunciation = async (blob: Blob) => {\r\n    // Here you would typically send the audio to your AI service\r\n    // For now, we'll simulate the analysis\r\n    const analysis = {\r\n      phonemes: syllables.map(syllable => ({\r\n        phoneme: syllable,\r\n        correct: Math.random() > 0.3,\r\n        confidence: Math.random() * 100,\r\n        waveform: Array.from({ length: 50 }, () => Math.random())\r\n      })),\r\n      stress: stressPattern.map(stress => ({\r\n        correct: Math.random() > 0.2,\r\n        confidence: Math.random() * 100\r\n      })),\r\n      intonation: Math.random() * 100,\r\n      fluency: Math.random() * 100\r\n    };\r\n\r\n    setVisualizations(analysis.phonemes);\r\n    updateFeedback(analysis);\r\n    setAttempts(prev => prev + 1);\r\n\r\n    const overallAccuracy = analysis.phonemes.reduce(\r\n      (acc, p) => acc + (p.correct ? 1 : 0),\r\n      0\r\n    ) / analysis.phonemes.length * 100;\r\n\r\n    if (overallAccuracy > 80) {\r\n      setStreak(prev => prev + 1);\r\n    } else {\r\n      setStreak(0);\r\n    }\r\n\r\n    onProgress({\r\n      accuracy: overallAccuracy,\r\n      phonemeScores: analysis.phonemes.reduce((acc, p) => ({\r\n        ...acc,\r\n        [p.phoneme]: p.confidence\r\n      }), {}),\r\n      stressAccuracy: analysis.stress.reduce(\r\n        (acc, s) => acc + (s.correct ? 1 : 0),\r\n        0\r\n      ) / analysis.stress.length * 100,\r\n      intonationAccuracy: analysis.intonation,\r\n      fluencyScore: analysis.fluency,\r\n      areas: {\r\n        strengths: analysis.phonemes\r\n          .filter(p => p.confidence > 80)\r\n          .map(p => p.phoneme),\r\n        improvements: analysis.phonemes\r\n          .filter(p => p.confidence < 60)\r\n          .map(p => p.phoneme)\r\n      }\r\n    });\r\n  };\r\n\r\n  const updateFeedback = (analysis: any) => {\r\n    const newFeedback = [];\r\n\r\n    // Phoneme-level feedback\r\n    const incorrectPhonemes = analysis.phonemes\r\n      .filter((p: any) => !p.correct)\r\n      .map((p: any) => p.phoneme);\r\n    \r\n    if (incorrectPhonemes.length > 0) {\r\n      newFeedback.push(`Focus on these sounds: ${incorrectPhonemes.join(', ')}`);\r\n    }\r\n\r\n    // Stress pattern feedback\r\n    const incorrectStress = analysis.stress\r\n      .filter((s: any) => !s.correct)\r\n      .length;\r\n    \r\n    if (incorrectStress > 0) {\r\n      newFeedback.push('Pay attention to word stress pattern');\r\n    }\r\n\r\n    // Intonation feedback\r\n    if (analysis.intonation < 70) {\r\n      newFeedback.push('Try to follow the natural rise and fall of the word');\r\n    }\r\n\r\n    setFeedback(newFeedback);\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Word Display */}\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <CardTitle className=\"text-2xl\">{word}</CardTitle>\r\n              <p className=\"text-sm text-muted-foreground mt-1\">/{phonetics}/</p>\r\n            </div>\r\n            {streak > 0 && (\r\n              <div className=\"flex items-center gap-2\">\r\n                <Sparkles className=\"h-5 w-5 text-yellow-500\" />\r\n                <span className=\"font-bold text-yellow-500\">{streak}x Streak!</span>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"flex items-center justify-center gap-4 mb-6\">\r\n            {syllables.map((syllable, index) => (\r\n              <motion.div\r\n                key={index}\r\n                className=\"text-center\"\r\n                initial={{ opacity: 0, y: 20 }}\r\n                animate={{ opacity: 1, y: 0 }}\r\n                transition={{ delay: index * 0.1 }}\r\n              >\r\n                <div className=\"mb-2\">\r\n                  {stressPattern[index] === 2 && STRESS_PATTERNS.primary}\r\n                  {stressPattern[index] === 1 && STRESS_PATTERNS.secondary}\r\n                  {stressPattern[index] === 0 && STRESS_PATTERNS.unstressed}\r\n                </div>\r\n                <div className=\"text-xl font-medium\">{syllable}</div>\r\n                {visualizations[index] && (\r\n                  <motion.div\r\n                    initial={{ scaleX: 0 }}\r\n                    animate={{ scaleX: 1 }}\r\n                    className={cn(\r\n                      \"h-1 mt-2 rounded-full\",\r\n                      visualizations[index].correct\r\n                        ? \"bg-green-500\"\r\n                        : visualizations[index].confidence > 60\r\n                        ? \"bg-yellow-500\"\r\n                        : \"bg-red-500\"\r\n                    )}\r\n                    style={{\r\n                      width: `${visualizations[index].confidence}%`\r\n                    }}\r\n                  />\r\n                )}\r\n              </motion.div>\r\n            ))}\r\n          </div>\r\n\r\n          {/* Audio Controls */}\r\n          <div className=\"flex justify-center gap-4\">\r\n            <Button\r\n              variant=\"outline\"\r\n              size=\"lg\"\r\n              onClick={() => setIsPlaying(!isPlaying)}\r\n              disabled={isRecording}\r\n            >\r\n              {isPlaying ? (\r\n                <>\r\n                  <Pause className=\"mr-2 h-4 w-4\" />\r\n                  Stop\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <Play className=\"mr-2 h-4 w-4\" />\r\n                  Listen\r\n                </>\r\n              )}\r\n            </Button>\r\n            <Button\r\n              size=\"lg\"\r\n              onClick={isRecording ? stopRecording : startRecording}\r\n              variant={isRecording ? \"destructive\" : \"default\"}\r\n            >\r\n              {isRecording ? (\r\n                <>\r\n                  <XCircle className=\"mr-2 h-4 w-4\" />\r\n                  Stop\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <Mic className=\"mr-2 h-4 w-4\" />\r\n                  Record\r\n                </>\r\n              )}\r\n            </Button>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Visualization */}\r\n      <Card>\r\n        <CardContent className=\"p-6\">\r\n          <canvas\r\n            ref={canvasRef}\r\n            className=\"w-full h-40 bg-background rounded-lg\"\r\n            width={800}\r\n            height={200}\r\n          />\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Feedback */}\r\n      <AnimatePresence mode=\"wait\">\r\n        {feedback.length > 0 && (\r\n          <motion.div\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            exit={{ opacity: 0, y: -20 }}\r\n          >\r\n            <Card>\r\n              <CardContent className=\"p-6\">\r\n                <ul className=\"space-y-2\">\r\n                  {feedback.map((item, index) => (\r\n                    <li key={index}>\r\n                      <motion.div\r\n                        initial={{ opacity: 0, x: -20 }}\r\n                        animate={{ opacity: 1, x: 0 }}\r\n                        transition={{ delay: index * 0.1 }}\r\n                        className=\"flex items-start gap-2\"\r\n                      >\r\n                        <ArrowRight className=\"h-5 w-5 text-primary mt-0.5\" />\r\n                        <span>{item}</span>\r\n                      </motion.div>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              </CardContent>\r\n            </Card>\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n    </div>\r\n  );\r\n}"
        }
    ]
}