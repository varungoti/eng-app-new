{
    "sourceFile": "src/components/ai/EnhancedAIFeedback.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1740948648660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740948839330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,8 +184,20 @@\n   studentAge,\r\n   feedback,\r\n   onRecommendationSelect\r\n }: EnhancedAIFeedbackProps) {\r\n+  // Map feedback categories to their corresponding icons\r\n+  const categoryIcons = {\r\n+    pronunciation: <Mic className=\"h-5 w-5\" />,\r\n+    grammar: <BookOpen className=\"h-5 w-5\" />,\r\n+    vocabulary: <Languages className=\"h-5 w-5\" />,\r\n+    fluency: <Gauge className=\"h-5 w-5\" />,\r\n+    comprehension: <Brain className=\"h-5 w-5\" />,\r\n+    achievements: <Trophy className=\"h-5 w-5\" />,\r\n+    improvement: <Sparkles className=\"h-5 w-5\" />,\r\n+    excellence: <Star className=\"h-5 w-5\" />\r\n+  };\r\n+\r\n   const getAgeAppropriateExplanation = (text: string) => {\r\n     if (studentAge <= 6) {\r\n       // Simplify language for young children\r\n       return text\r\n"
                },
                {
                    "date": 1740948857996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n   Wand2,\r\n   Gauge,\r\n   Mic,\r\n   BookOpen,\r\n-  Keyboard,\r\n+\r\n   Languages\r\n } from \"lucide-react\";\r\n import { cn } from \"@/lib/utils\";\r\n \r\n"
                },
                {
                    "date": 1740948863496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,8 @@\n   Wand2,\r\n   Gauge,\r\n   Mic,\r\n   BookOpen,\r\n-\r\n   Languages\r\n } from \"lucide-react\";\r\n import { cn } from \"@/lib/utils\";\r\n \r\n"
                },
                {
                    "date": 1740948898781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -208,20 +208,15 @@\n     }\r\n     return text;\r\n   };\r\n \r\n-  const renderMetricCard = (title: string, score: number, icon: React.ReactNode, details: any) => (\r\n+  const renderMetricCard = (title: string, score: number, category: keyof typeof categoryIcons, details: any) => (\r\n     <Card className=\"overflow-hidden\">\r\n       <CardHeader className=\"pb-2\">\r\n-        <div className=\"flex items-center justify-between\">\r\n-          <div className=\"flex items-center gap-2\">\r\n-            {icon}\r\n-            <CardTitle className=\"text-lg\">{title}</CardTitle>\r\n-          </div>\r\n-          <div className=\"flex items-center gap-2\">\r\n-            <span className=\"text-2xl font-bold\">{Math.round(score)}%</span>\r\n-          </div>\r\n-        </div>\r\n+        <CardTitle className=\"text-md flex items-center gap-2\">\r\n+          {categoryIcons[category]}\r\n+          {title}\r\n+        </CardTitle>\r\n       </CardHeader>\r\n       <CardContent>\r\n         <div className=\"space-y-4\">\r\n           <Progress value={score} className=\"h-2\" />\r\n@@ -289,27 +284,27 @@\n       <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n         {renderMetricCard(\r\n           'Pronunciation',\r\n           feedback.pronunciation.overall,\r\n-          <Mic className=\"h-5 w-5 text-blue-500\" />,\r\n+          'pronunciation',\r\n           feedback.pronunciation.details\r\n         )}\r\n         {renderMetricCard(\r\n           'Grammar',\r\n           feedback.grammar.overall,\r\n-          <BookOpen className=\"h-5 w-5 text-green-500\" />,\r\n+          'grammar',\r\n           feedback.grammar.details\r\n         )}\r\n         {renderMetricCard(\r\n           'Vocabulary',\r\n           feedback.vocabulary.overall,\r\n-          <Languages className=\"h-5 w-5 text-purple-500\" />,\r\n+          'vocabulary',\r\n           feedback.vocabulary.details\r\n         )}\r\n         {renderMetricCard(\r\n           'Fluency',\r\n           feedback.fluency.overall,\r\n-          <Gauge className=\"h-5 w-5 text-orange-500\" />,\r\n+          'fluency',\r\n           feedback.fluency.details\r\n         )}\r\n       </div>\r\n \r\n"
                },
                {
                    "date": 1740948986504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -211,12 +211,17 @@\n \r\n   const renderMetricCard = (title: string, score: number, category: keyof typeof categoryIcons, details: any) => (\r\n     <Card className=\"overflow-hidden\">\r\n       <CardHeader className=\"pb-2\">\r\n-        <CardTitle className=\"text-md flex items-center gap-2\">\r\n-          {categoryIcons[category]}\r\n-          {title}\r\n-        </CardTitle>\r\n+        <div className=\"flex items-center justify-between\">\r\n+          <CardTitle className=\"text-md flex items-center gap-2\">\r\n+            {categoryIcons[category]}\r\n+            {title}\r\n+          </CardTitle>\r\n+          <div>\r\n+            <span className=\"text-2xl font-bold\">{Math.round(score)}%</span>\r\n+          </div>\r\n+        </div>\r\n       </CardHeader>\r\n       <CardContent>\r\n         <div className=\"space-y-4\">\r\n           <Progress value={score} className=\"h-2\" />\r\n"
                }
            ],
            "date": 1740948648660,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport React from 'react';\r\nimport { motion } from \"framer-motion\";\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Progress } from \"@/components/ui/progress\";\r\n//import { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Brain,\r\n  Sparkles,\r\n  Star,\r\n  Trophy,\r\n  Crown,\r\n  Lightbulb,\r\n  Wand2,\r\n  Gauge,\r\n  Mic,\r\n  BookOpen,\r\n  Keyboard,\r\n  Languages\r\n} from \"lucide-react\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ninterface EnhancedAIFeedbackProps {\r\n  studentAge: number;\r\n  feedback: DetailedFeedback;\r\n  onRecommendationSelect?: (recommendation: string) => void;\r\n}\r\n\r\nexport interface DetailedFeedback {\r\n  pronunciation: PronunciationAnalysis;\r\n  grammar: GrammarAnalysis;\r\n  vocabulary: VocabularyAnalysis;\r\n  fluency: FluencyAnalysis;\r\n  comprehension: ComprehensionAnalysis;\r\n  recommendations: Recommendation[];\r\n  achievements: Achievement[];\r\n}\r\n\r\ninterface PronunciationAnalysis {\r\n  overall: number;\r\n  details: {\r\n    phonemeAccuracy: {\r\n      score: number;\r\n      issues: string[];\r\n      examples: { correct: string; student: string }[];\r\n    };\r\n    intonation: {\r\n      score: number;\r\n      patterns: string[];\r\n      improvements: string[];\r\n    };\r\n    stress: {\r\n      score: number;\r\n      correctPatterns: string[];\r\n      incorrectPatterns: string[];\r\n    };\r\n    rhythm: {\r\n      score: number;\r\n      feedback: string[];\r\n    };\r\n  };\r\n}\r\n\r\ninterface GrammarAnalysis {\r\n  overall: number;\r\n  details: {\r\n    sentenceStructure: {\r\n      score: number;\r\n      errors: string[];\r\n      corrections: string[];\r\n    };\r\n    verbTenses: {\r\n      score: number;\r\n      correctUsage: string[];\r\n      incorrectUsage: string[];\r\n    };\r\n    articles: {\r\n      score: number;\r\n      mistakes: string[];\r\n      rules: string[];\r\n    };\r\n    prepositions: {\r\n      score: number;\r\n      errors: string[];\r\n      examples: string[];\r\n    };\r\n  };\r\n}\r\n\r\ninterface VocabularyAnalysis {\r\n  overall: number;\r\n  details: {\r\n    range: {\r\n      score: number;\r\n      level: string;\r\n      suggestions: string[];\r\n    };\r\n    appropriateness: {\r\n      score: number;\r\n      feedback: string[];\r\n    };\r\n    collocations: {\r\n      score: number;\r\n      correct: string[];\r\n      incorrect: string[];\r\n    };\r\n    idiomaticExpressions: {\r\n      score: number;\r\n      mastered: string[];\r\n      toLearn: string[];\r\n    };\r\n  };\r\n}\r\n\r\ninterface FluencyAnalysis {\r\n  overall: number;\r\n  details: {\r\n    speakingRate: {\r\n      score: number;\r\n      wordsPerMinute: number;\r\n      target: number;\r\n    };\r\n    pauses: {\r\n      score: number;\r\n      appropriate: number;\r\n      inappropriate: number;\r\n      suggestions: string[];\r\n    };\r\n    fillers: {\r\n      score: number;\r\n      common: string[];\r\n      alternatives: string[];\r\n    };\r\n    coherence: {\r\n      score: number;\r\n      feedback: string[];\r\n    };\r\n  };\r\n}\r\n\r\ninterface ComprehensionAnalysis {\r\n  overall: number;\r\n  details: {\r\n    listeningAccuracy: {\r\n      score: number;\r\n      missedPoints: string[];\r\n    };\r\n    responseRelevance: {\r\n      score: number;\r\n      feedback: string[];\r\n    };\r\n    contextualUnderstanding: {\r\n      score: number;\r\n      observations: string[];\r\n    };\r\n    criticalThinking: {\r\n      score: number;\r\n      strengths: string[];\r\n      areasToImprove: string[];\r\n    };\r\n  };\r\n}\r\n\r\ninterface Recommendation {\r\n  id: string;\r\n  type: 'practice' | 'resource' | 'exercise';\r\n  title: string;\r\n  description: string;\r\n  priority: 'high' | 'medium' | 'low';\r\n  timeEstimate: string;\r\n  expectedOutcome: string;\r\n}\r\n\r\ninterface Achievement {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  icon: React.ReactNode;\r\n  unlockedAt: string;\r\n}\r\n\r\nexport function EnhancedAIFeedback({\r\n  studentAge,\r\n  feedback,\r\n  onRecommendationSelect\r\n}: EnhancedAIFeedbackProps) {\r\n  const getAgeAppropriateExplanation = (text: string) => {\r\n    if (studentAge <= 6) {\r\n      // Simplify language for young children\r\n      return text\r\n        .replace(/pronunciation/g, 'way of saying words')\r\n        .replace(/grammar/g, 'word order')\r\n        .replace(/vocabulary/g, 'words you know')\r\n        .replace(/fluency/g, 'smooth talking')\r\n        .replace(/comprehension/g, 'understanding');\r\n    }\r\n    return text;\r\n  };\r\n\r\n  const renderMetricCard = (title: string, score: number, icon: React.ReactNode, details: any) => (\r\n    <Card className=\"overflow-hidden\">\r\n      <CardHeader className=\"pb-2\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <div className=\"flex items-center gap-2\">\r\n            {icon}\r\n            <CardTitle className=\"text-lg\">{title}</CardTitle>\r\n          </div>\r\n          <div className=\"flex items-center gap-2\">\r\n            <span className=\"text-2xl font-bold\">{Math.round(score)}%</span>\r\n          </div>\r\n        </div>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"space-y-4\">\r\n          <Progress value={score} className=\"h-2\" />\r\n          <div className=\"grid gap-2\">\r\n            {Object.entries(details).map(([key, value]: [string, any]) => (\r\n              <div key={key} className=\"text-sm\">\r\n                <div className=\"flex justify-between mb-1\">\r\n                  <span className=\"text-muted-foreground capitalize\">\r\n                    {key.replace(/([A-Z])/g, ' $1').trim()}\r\n                  </span>\r\n                  <span className=\"font-medium\">{value.score}%</span>\r\n                </div>\r\n                {value.feedback && (\r\n                  <ul className=\"mt-1 space-y-1\">\r\n                    {value.feedback.map((item: string, index: number) => (\r\n                      <li key={index} className=\"text-xs text-muted-foreground\">\r\n                        • {getAgeAppropriateExplanation(item)}\r\n                      </li>\r\n                    ))}\r\n                  </ul>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <div className=\"space-y-8\">\r\n      {/* Overall Progress */}\r\n      <Card className=\"bg-gradient-to-br from-purple-50 to-blue-50 dark:from-purple-900/20 dark:to-blue-900/20\">\r\n        <CardContent className=\"p-6\">\r\n          <div className=\"flex items-center justify-between mb-4\">\r\n            <div className=\"flex items-center gap-3\">\r\n              <div className=\"p-3 bg-primary/10 rounded-xl\">\r\n                <Brain className=\"h-6 w-6 text-primary\" />\r\n              </div>\r\n              <div>\r\n                <h2 className=\"text-xl font-bold\">Learning Analysis</h2>\r\n                <p className=\"text-sm text-muted-foreground\">\r\n                  Detailed feedback and recommendations\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <Trophy className=\"h-8 w-8 text-yellow-500\" />\r\n          </div>\r\n          <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\r\n            {Object.entries(feedback).slice(0, 5).map(([key, value]: [string, any]) => (\r\n              <div key={key} className=\"text-center\">\r\n                <div className=\"text-2xl font-bold mb-1\">\r\n                  {Math.round(value.overall)}%\r\n                </div>\r\n                <div className=\"text-sm text-muted-foreground capitalize\">\r\n                  {key}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Detailed Metrics */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n        {renderMetricCard(\r\n          'Pronunciation',\r\n          feedback.pronunciation.overall,\r\n          <Mic className=\"h-5 w-5 text-blue-500\" />,\r\n          feedback.pronunciation.details\r\n        )}\r\n        {renderMetricCard(\r\n          'Grammar',\r\n          feedback.grammar.overall,\r\n          <BookOpen className=\"h-5 w-5 text-green-500\" />,\r\n          feedback.grammar.details\r\n        )}\r\n        {renderMetricCard(\r\n          'Vocabulary',\r\n          feedback.vocabulary.overall,\r\n          <Languages className=\"h-5 w-5 text-purple-500\" />,\r\n          feedback.vocabulary.details\r\n        )}\r\n        {renderMetricCard(\r\n          'Fluency',\r\n          feedback.fluency.overall,\r\n          <Gauge className=\"h-5 w-5 text-orange-500\" />,\r\n          feedback.fluency.details\r\n        )}\r\n      </div>\r\n\r\n      {/* Recommendations */}\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex items-center gap-2\">\r\n            <Lightbulb className=\"h-5 w-5 text-yellow-500\" />\r\n            <CardTitle>Personalized Recommendations</CardTitle>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"grid gap-4\">\r\n            {feedback.recommendations.map((recommendation) => (\r\n              <motion.div\r\n                key={recommendation.id}\r\n                initial={{ opacity: 0, y: 20 }}\r\n                animate={{ opacity: 1, y: 0 }}\r\n                whileHover={{ scale: 1.02 }}\r\n              >\r\n                <Card\r\n                  className={cn(\r\n                    \"cursor-pointer hover:shadow-lg transition-all\",\r\n                    recommendation.priority === 'high' && \"border-red-200 bg-red-50/50\",\r\n                    recommendation.priority === 'medium' && \"border-yellow-200 bg-yellow-50/50\",\r\n                    recommendation.priority === 'low' && \"border-green-200 bg-green-50/50\"\r\n                  )}\r\n                  onClick={() => onRecommendationSelect?.(recommendation.id)}\r\n                >\r\n                  <CardContent className=\"p-4\">\r\n                    <div className=\"flex items-center gap-3\">\r\n                      <Wand2 className=\"h-5 w-5 text-primary\" />\r\n                      <div className=\"flex-1\">\r\n                        <h3 className=\"font-medium\">{recommendation.title}</h3>\r\n                        <p className=\"text-sm text-muted-foreground\">\r\n                          {getAgeAppropriateExplanation(recommendation.description)}\r\n                        </p>\r\n                        <div className=\"flex items-center gap-4 mt-2 text-sm\">\r\n                          <span className=\"text-muted-foreground\">\r\n                            ⏱️ {recommendation.timeEstimate}\r\n                          </span>\r\n                          <span className=\"text-muted-foreground\">\r\n                            🎯 {recommendation.expectedOutcome}\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n              </motion.div>\r\n            ))}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Achievements */}\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex items-center gap-2\">\r\n            <Crown className=\"h-5 w-5 text-yellow-500\" />\r\n            <CardTitle>Recent Achievements</CardTitle>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n            {feedback.achievements.map((achievement) => (\r\n              <motion.div\r\n                key={achievement.id}\r\n                initial={{ opacity: 0, scale: 0.8 }}\r\n                animate={{ opacity: 1, scale: 1 }}\r\n                whileHover={{ scale: 1.05 }}\r\n              >\r\n                <Card className=\"text-center p-4\">\r\n                  <div className=\"flex flex-col items-center gap-2\">\r\n                    {achievement.icon}\r\n                    <h4 className=\"font-medium\">{achievement.title}</h4>\r\n                    <p className=\"text-xs text-muted-foreground\">\r\n                      {achievement.description}\r\n                    </p>\r\n                    <div className=\"text-xs text-muted-foreground mt-2\">\r\n                      🏆 Unlocked {new Date(achievement.unlockedAt).toLocaleDateString()}\r\n                    </div>\r\n                  </div>\r\n                </Card>\r\n              </motion.div>\r\n            ))}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n} "
        }
    ]
}