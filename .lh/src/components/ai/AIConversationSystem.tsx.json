{
    "sourceFile": "src/components/ai/AIConversationSystem.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1740948381271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740948386994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,14 @@\n \"use client\";\r\n \r\n-import  { useState, useEffect, useCallback } from 'react';\r\n+import { useState, useEffect, useCallback } from 'react';\r\n import { motion, AnimatePresence } from \"framer-motion\";\r\n import { Card, CardContent } from \"@/components/ui/card\";\r\n import { Button } from \"@/components/ui/button\";\r\n import { Input } from \"@/components/ui/input\";\r\n import { Avatar } from \"@/components/ui/avatar\";\r\n import { Progress } from \"@/components/ui/progress\";\r\n import {\r\n-  Bot,\r\n   Mic,\r\n   Send,\r\n   Volume2,\r\n   VolumeX,\r\n"
                },
                {
                    "date": 1740948393894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,16 +7,16 @@\n import { Input } from \"@/components/ui/input\";\r\n import { Avatar } from \"@/components/ui/avatar\";\r\n import { Progress } from \"@/components/ui/progress\";\r\n import {\r\n-  Mic,\r\n+      Mic,\r\n   Send,\r\n   Volume2,\r\n   VolumeX,\r\n-  RefreshCw,\r\n-  ThumbsUp,\r\n-  ThumbsDown,\r\n-  HelpCircle,\r\n+    RefreshCw,\r\n+    ThumbsUp,\r\n+    ThumbsDown,\r\n+    HelpCircle,\r\n   Star\r\n } from \"lucide-react\";\r\n import { \r\n   type AIConversationProps, \r\n"
                },
                {
                    "date": 1740948399499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,12 +11,8 @@\n       Mic,\r\n   Send,\r\n   Volume2,\r\n   VolumeX,\r\n-    RefreshCw,\r\n-    ThumbsUp,\r\n-    ThumbsDown,\r\n-    HelpCircle,\r\n   Star\r\n } from \"lucide-react\";\r\n import { \r\n   type AIConversationProps, \r\n"
                },
                {
                    "date": 1740948417279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n import { Input } from \"@/components/ui/input\";\r\n import { Avatar } from \"@/components/ui/avatar\";\r\n import { Progress } from \"@/components/ui/progress\";\r\n import {\r\n-      Mic,\r\n+  Mic,\r\n   Send,\r\n   Volume2,\r\n   VolumeX,\r\n   Star\r\n"
                },
                {
                    "date": 1740948451867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,8 +55,9 @@\n   useEffect(() => {\r\n     const initializeConversation = async () => {\r\n       onLoading(true);\r\n       try {\r\n+        const initialTopic = getTopicForLevel(skillLevel, studentAge);\r\n         const initialMessage: Message = {\r\n           id: '1',\r\n           role: 'system',\r\n           content: mode === 'assessment' \r\n@@ -71,9 +72,9 @@\n       }\r\n     };\r\n \r\n     initializeConversation();\r\n-  }, [mode, onLoading]);\r\n+  }, [mode, onLoading, studentAge, skillLevel]);\r\n \r\n   // Helper function to get age-appropriate topics\r\n   const getTopicForLevel = (level: number, age: number): string => {\r\n     const topics = {\r\n"
                },
                {
                    "date": 1740948471144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n   useEffect(() => {\r\n     const initializeConversation = async () => {\r\n       onLoading(true);\r\n       try {\r\n-        const initialTopic = getTopicForLevel(skillLevel, studentAge);\r\n+        const initialTopic = getTopicForLevel(Number(skillLevel), Number(studentAge));\r\n         const initialMessage: Message = {\r\n           id: '1',\r\n           role: 'system',\r\n           content: mode === 'assessment' \r\n"
                },
                {
                    "date": 1740948503322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,11 +59,9 @@\n         const initialTopic = getTopicForLevel(Number(skillLevel), Number(studentAge));\r\n         const initialMessage: Message = {\r\n           id: '1',\r\n           role: 'system',\r\n-          content: mode === 'assessment' \r\n-            ? \"Hi! I'm your English assessment assistant. Let's check your language skills!\"\r\n-            : \"Hello! I'm your English learning buddy. Ready to play some fun language games?\",\r\n+          content: `You are now in ${mode} mode. Let's discuss the topic: ${initialTopic}.`,\r\n         };\r\n         setMessages([initialMessage]);\r\n       } catch (error) {\r\n         console.error('Error initializing conversation:', error);\r\n"
                },
                {
                    "date": 1740948508871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n       }\r\n     };\r\n \r\n     initializeConversation();\r\n-  }, [mode, onLoading, studentAge, skillLevel]);\r\n+  }, [mode, onLoading, studentAge, skillLevel, getTopicForLevel]);\r\n \r\n   // Helper function to get age-appropriate topics\r\n   const getTopicForLevel = (level: number, age: number): string => {\r\n     const topics = {\r\n"
                },
                {
                    "date": 1740948520860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n       }\r\n     };\r\n \r\n     initializeConversation();\r\n-  }, [mode, onLoading, studentAge, skillLevel, getTopicForLevel]);\r\n+  }, [mode, onLoading, studentAge, skillLevel, ]);\r\n \r\n   // Helper function to get age-appropriate topics\r\n   const getTopicForLevel = (level: number, age: number): string => {\r\n     const topics = {\r\n"
                },
                {
                    "date": 1740948529653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n       }\r\n     };\r\n \r\n     initializeConversation();\r\n-  }, [mode, onLoading, studentAge, skillLevel, ]);\r\n+  }, [mode, onLoading, studentAge, skillLevel]);\r\n \r\n   // Helper function to get age-appropriate topics\r\n   const getTopicForLevel = (level: number, age: number): string => {\r\n     const topics = {\r\n"
                },
                {
                    "date": 1740948598284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,8 +52,30 @@\n   });\r\n \r\n   // Initialize conversation based on mode\r\n   useEffect(() => {\r\n+    // Helper function to get age-appropriate topics\r\n+    const getTopicForLevel = (level: number, age: number): string => {\r\n+      const topics = {\r\n+        beginner: {\r\n+          young: ['Colors', 'Animals', 'Family', 'Numbers', 'Food'],\r\n+          older: ['Hobbies', 'School', 'Friends', 'Weather', 'Sports']\r\n+        },\r\n+        intermediate: {\r\n+          young: ['Daily Routine', 'Favorite Books', 'Pets', 'Holidays', 'Seasons'],\r\n+          older: ['Movies', 'Music', 'Technology', 'Travel', 'Environment']\r\n+        },\r\n+        advanced: {\r\n+          young: ['Story Creation', 'Science Facts', 'World Culture', 'Space', 'Nature'],\r\n+          older: ['Current Events', 'Social Media', 'Future Goals', 'Global Issues', 'Technology Trends']\r\n+        }\r\n+      };\r\n+\r\n+      const ageGroup = age <= 8 ? 'young' : 'older';\r\n+      const levelTopics = topics[skillLevel][ageGroup];\r\n+      return levelTopics[level % levelTopics.length];\r\n+    };\r\n+\r\n     const initializeConversation = async () => {\r\n       onLoading(true);\r\n       try {\r\n         const initialTopic = getTopicForLevel(Number(skillLevel), Number(studentAge));\r\n@@ -72,30 +94,8 @@\n \r\n     initializeConversation();\r\n   }, [mode, onLoading, studentAge, skillLevel]);\r\n \r\n-  // Helper function to get age-appropriate topics\r\n-  const getTopicForLevel = (level: number, age: number): string => {\r\n-    const topics = {\r\n-      beginner: {\r\n-        young: ['Colors', 'Animals', 'Family', 'Numbers', 'Food'],\r\n-        older: ['Hobbies', 'School', 'Friends', 'Weather', 'Sports']\r\n-      },\r\n-      intermediate: {\r\n-        young: ['Daily Routine', 'Favorite Books', 'Pets', 'Holidays', 'Seasons'],\r\n-        older: ['Movies', 'Music', 'Technology', 'Travel', 'Environment']\r\n-      },\r\n-      advanced: {\r\n-        young: ['Story Creation', 'Science Facts', 'World Culture', 'Space', 'Nature'],\r\n-        older: ['Current Events', 'Social Media', 'Future Goals', 'Global Issues', 'Technology Trends']\r\n-      }\r\n-    };\r\n-\r\n-    const ageGroup = age <= 8 ? 'young' : 'older';\r\n-    const levelTopics = topics[skillLevel][ageGroup];\r\n-    return levelTopics[level % levelTopics.length];\r\n-  };\r\n-\r\n   // Handle user input submission\r\n   const handleSubmit = async () => {\r\n     if (!input.trim()) return;\r\n \r\n"
                },
                {
                    "date": 1740948690386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,11 +136,19 @@\n   // Mock AI processing - Replace with actual AI integration\r\n   const processWithAI = async (message: string): Promise<AIResponse> => {\r\n     // Simulate API call\r\n     await new Promise(resolve => setTimeout(resolve, 1000));\r\n+    \r\n+    // Log the incoming message for debugging\r\n+    console.log(`Processing message: ${message}`);\r\n \r\n+    // Create a response that references the user's message\r\n+    const response = message.length > 0\r\n+      ? `I understand what you said about \"${message.substring(0, 30)}${message.length > 30 ? '...' : ''}\". Let's practice that together!`\r\n+      : \"I understand! Let's practice that together...\";\r\n+\r\n     return {\r\n-      message: \"I understand! Let's practice that together...\",\r\n+      message: response,\r\n       feedback: {\r\n         pronunciation: 85,\r\n         grammar: 90,\r\n         vocabulary: 88,\r\n"
                }
            ],
            "date": 1740948381271,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport  { useState, useEffect, useCallback } from 'react';\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport { Card, CardContent } from \"@/components/ui/card\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Avatar } from \"@/components/ui/avatar\";\r\nimport { Progress } from \"@/components/ui/progress\";\r\nimport {\r\n  Bot,\r\n  Mic,\r\n  Send,\r\n  Volume2,\r\n  VolumeX,\r\n  RefreshCw,\r\n  ThumbsUp,\r\n  ThumbsDown,\r\n  HelpCircle,\r\n  Star\r\n} from \"lucide-react\";\r\nimport { \r\n  type AIConversationProps, \r\n  type AIResponse, \r\n  type GameProgress \r\n} from '@/types/ai';\r\n\r\ninterface Message {\r\n  id: string;\r\n  role: 'system' | 'user' | 'assistant';\r\n  content: string;\r\n  feedback?: AIResponse['feedback'];\r\n}\r\n\r\nexport function AIConversationSystem({\r\n  mode,\r\n  studentAge,\r\n  skillLevel,\r\n  onLoading\r\n}: AIConversationProps) {\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [input, setInput] = useState('');\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [isSpeaking, setIsSpeaking] = useState(false);\r\n  const [gameProgress, setGameProgress] = useState<GameProgress>({\r\n    level: 1,\r\n    score: 0,\r\n    streak: 0,\r\n    achievements: [],\r\n    skillLevels: {\r\n      pronunciation: 0,\r\n      grammar: 0,\r\n      vocabulary: 0,\r\n      fluency: 0,\r\n      comprehension: 0\r\n    }\r\n  });\r\n\r\n  // Initialize conversation based on mode\r\n  useEffect(() => {\r\n    const initializeConversation = async () => {\r\n      onLoading(true);\r\n      try {\r\n        const initialMessage: Message = {\r\n          id: '1',\r\n          role: 'system',\r\n          content: mode === 'assessment' \r\n            ? \"Hi! I'm your English assessment assistant. Let's check your language skills!\"\r\n            : \"Hello! I'm your English learning buddy. Ready to play some fun language games?\",\r\n        };\r\n        setMessages([initialMessage]);\r\n      } catch (error) {\r\n        console.error('Error initializing conversation:', error);\r\n      } finally {\r\n        onLoading(false);\r\n      }\r\n    };\r\n\r\n    initializeConversation();\r\n  }, [mode, onLoading]);\r\n\r\n  // Helper function to get age-appropriate topics\r\n  const getTopicForLevel = (level: number, age: number): string => {\r\n    const topics = {\r\n      beginner: {\r\n        young: ['Colors', 'Animals', 'Family', 'Numbers', 'Food'],\r\n        older: ['Hobbies', 'School', 'Friends', 'Weather', 'Sports']\r\n      },\r\n      intermediate: {\r\n        young: ['Daily Routine', 'Favorite Books', 'Pets', 'Holidays', 'Seasons'],\r\n        older: ['Movies', 'Music', 'Technology', 'Travel', 'Environment']\r\n      },\r\n      advanced: {\r\n        young: ['Story Creation', 'Science Facts', 'World Culture', 'Space', 'Nature'],\r\n        older: ['Current Events', 'Social Media', 'Future Goals', 'Global Issues', 'Technology Trends']\r\n      }\r\n    };\r\n\r\n    const ageGroup = age <= 8 ? 'young' : 'older';\r\n    const levelTopics = topics[skillLevel][ageGroup];\r\n    return levelTopics[level % levelTopics.length];\r\n  };\r\n\r\n  // Handle user input submission\r\n  const handleSubmit = async () => {\r\n    if (!input.trim()) return;\r\n\r\n    onLoading(true);\r\n    try {\r\n      // Add user message\r\n      const userMessage: Message = {\r\n        id: Date.now().toString(),\r\n        role: 'user',\r\n        content: input\r\n      };\r\n      setMessages(prev => [...prev, userMessage]);\r\n      setInput('');\r\n\r\n      // Process with AI and get response\r\n      const aiResponse = await processWithAI(userMessage.content);\r\n      \r\n      // Add AI response\r\n      const assistantMessage: Message = {\r\n        id: (Date.now() + 1).toString(),\r\n        role: 'assistant',\r\n        content: aiResponse.message,\r\n        feedback: aiResponse.feedback\r\n      };\r\n      setMessages(prev => [...prev, assistantMessage]);\r\n\r\n      // Update game progress if in game mode\r\n      if (mode === 'game' && aiResponse.score) {\r\n        updateGameProgress(aiResponse.score, aiResponse.feedback);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error processing message:', error);\r\n    } finally {\r\n      onLoading(false);\r\n    }\r\n  };\r\n\r\n  // Mock AI processing - Replace with actual AI integration\r\n  const processWithAI = async (message: string): Promise<AIResponse> => {\r\n    // Simulate API call\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n    return {\r\n      message: \"I understand! Let's practice that together...\",\r\n      feedback: {\r\n        pronunciation: 85,\r\n        grammar: 90,\r\n        vocabulary: 88,\r\n        fluency: 87\r\n      },\r\n      score: 90\r\n    };\r\n  };\r\n\r\n  // Update game progress based on performance\r\n  const updateGameProgress = (score: number, feedback?: AIResponse['feedback']) => {\r\n    setGameProgress(prev => {\r\n      const newStreak = score >= 80 ? prev.streak + 1 : 0;\r\n      const newLevel = Math.floor(prev.score / 1000) + 1;\r\n\r\n      // Update skill levels if feedback is provided\r\n      const newSkillLevels = { ...prev.skillLevels };\r\n      if (feedback) {\r\n        Object.entries(feedback).forEach(([skill, value]) => {\r\n          const key = skill as keyof typeof prev.skillLevels;\r\n          newSkillLevels[key] = Math.round((newSkillLevels[key] + value) / 2);\r\n        });\r\n      }\r\n\r\n      return {\r\n        level: newLevel,\r\n        score: prev.score + score,\r\n        streak: newStreak,\r\n        achievements: prev.achievements,\r\n        skillLevels: newSkillLevels\r\n      };\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      {mode === 'game' && (\r\n        <div className=\"flex items-center justify-between mb-4\">\r\n          <div className=\"flex items-center gap-4\">\r\n            <div className=\"text-sm\">\r\n              Level {gameProgress.level} • Score: {gameProgress.score}\r\n            </div>\r\n            {gameProgress.streak > 0 && (\r\n              <div className=\"flex items-center gap-1 text-orange-500\">\r\n                <Star className=\"h-4 w-4\" />\r\n                <span className=\"text-sm\">Streak: {gameProgress.streak}</span>\r\n              </div>\r\n            )}\r\n          </div>\r\n          <Progress \r\n            value={gameProgress.score % 1000 / 10} \r\n            className=\"w-1/3\" \r\n          />\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"h-[500px] overflow-y-auto space-y-4 p-4 rounded-lg border\">\r\n        <AnimatePresence mode=\"popLayout\">\r\n          {messages.map((message) => (\r\n            <motion.div\r\n              key={message.id}\r\n              initial={{ opacity: 0, y: 20 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              exit={{ opacity: 0, y: -20 }}\r\n              className={`flex gap-3 ${\r\n                message.role === 'user' ? 'flex-row-reverse' : ''\r\n              }`}\r\n            >\r\n              <Avatar\r\n                name={message.role === 'user' ? 'You' : 'AI Assistant'}\r\n                className={message.role === 'user' ? 'bg-primary' : 'bg-secondary'}\r\n              />\r\n              <div className={`flex flex-col gap-2 max-w-[80%] ${\r\n                message.role === 'user' ? 'items-end' : ''\r\n              }`}>\r\n                <Card className={`${\r\n                  message.role === 'user' ? 'bg-primary text-primary-foreground' : ''\r\n                }`}>\r\n                  <CardContent className=\"p-3\">\r\n                    <p>{message.content}</p>\r\n                  </CardContent>\r\n                </Card>\r\n                {message.feedback && (\r\n                  <div className=\"flex gap-2 text-sm text-muted-foreground\">\r\n                    {Object.entries(message.feedback).map(([key, value]) => (\r\n                      <div key={key} className=\"flex items-center gap-1\">\r\n                        <span className=\"capitalize\">{key}:</span>\r\n                        <span className={`font-medium ${\r\n                          value >= 90 ? 'text-green-500' :\r\n                          value >= 70 ? 'text-yellow-500' :\r\n                          'text-red-500'\r\n                        }`}>{value}%</span>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </motion.div>\r\n          ))}\r\n        </AnimatePresence>\r\n      </div>\r\n\r\n      <div className=\"flex gap-2\">\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"icon\"\r\n          onClick={() => setIsRecording(!isRecording)}\r\n          className={isRecording ? 'text-red-500' : ''}\r\n        >\r\n          <Mic className=\"h-4 w-4\" />\r\n        </Button>\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"icon\"\r\n          onClick={() => setIsSpeaking(!isSpeaking)}\r\n        >\r\n          {isSpeaking ? (\r\n            <VolumeX className=\"h-4 w-4\" />\r\n          ) : (\r\n            <Volume2 className=\"h-4 w-4\" />\r\n          )}\r\n        </Button>\r\n        <Input\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"Type your message...\"\r\n          onKeyPress={(e) => e.key === 'Enter' && handleSubmit()}\r\n        />\r\n        <Button onClick={handleSubmit}>\r\n          <Send className=\"h-4 w-4\" />\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n} "
        }
    ]
}