{
    "sourceFile": "src/utils/errorResolver.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1739379477775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739379592469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,65 @@\n+export class ErrorResolver {\r\n+  private static errorPatterns = new Map([\r\n+    ['TypeError: Cannot read property', {\r\n+      diagnosis: 'Null or undefined object access',\r\n+      solution: (error: string) => {\r\n+        const match = error.match(/property '(.+)' of/);\r\n+        if (match) {\r\n+          return `Add null check for ${match[1]}`;\r\n+        }\r\n+        return 'Add null checks';\r\n+      }\r\n+    }],\r\n+    ['ReferenceError: (\\\\w+) is not defined', {\r\n+      diagnosis: 'Undefined variable',\r\n+      solution: (error: string) => {\r\n+        const match = error.match(/ReferenceError: (\\w+) is not defined/);\r\n+        if (match) {\r\n+          return `Define variable ${match[1]} before use`;\r\n+        }\r\n+        return 'Define missing variable';\r\n+      }\r\n+    }]\r\n+  ]);\r\n+\r\n+  static async handleError(log: any) {\r\n+    const diagnosis = this.diagnoseError(log.message);\r\n+    if (diagnosis) {\r\n+      await this.applyFix(diagnosis, log);\r\n+    }\r\n+  }\r\n+\r\n+  private static diagnoseError(error: string): any {\r\n+    for (const [pattern, handler] of this.errorPatterns) {\r\n+      if (new RegExp(pattern).test(error)) {\r\n+        return {\r\n+          pattern,\r\n+          ...handler,\r\n+          error\r\n+        };\r\n+      }\r\n+    }\r\n+    return null;\r\n+  }\r\n+\r\n+  private static async applyFix(diagnosis: any, log: any) {\r\n+    const fix = diagnosis.solution(diagnosis.error);\r\n+    console.log(`üîß Attempting to fix: ${diagnosis.diagnosis}`);\r\n+    console.log(`üìù Suggested fix: ${fix}`);\r\n+\r\n+    // Send fix suggestion to server\r\n+    try {\r\n+      await fetch('/api/auto-fix', {\r\n+        method: 'POST',\r\n+        headers: { 'Content-Type': 'application/json' },\r\n+        body: JSON.stringify({\r\n+          error: log,\r\n+          diagnosis,\r\n+          suggestedFix: fix\r\n+        })\r\n+      });\r\n+    } catch (err) {\r\n+      console.error('Failed to send fix suggestion:', err);\r\n+    }\r\n+  }\r\n+} \n\\ No newline at end of file\n"
                }
            ],
            "date": 1739379477775,
            "name": "Commit-0",
            "content": "class ErrorResolver {\r\n  private static errorPatterns = new Map([\r\n    ['TypeError: Cannot read property', {\r\n      diagnosis: 'Null or undefined object access',\r\n      solution: (error: string) => {\r\n        const match = error.match(/property '(.+)' of/);\r\n        if (match) {\r\n          return `Add null check for ${match[1]}`;\r\n        }\r\n        return 'Add null checks';\r\n      }\r\n    }],\r\n    ['ReferenceError: (\\\\w+) is not defined', {\r\n      diagnosis: 'Undefined variable',\r\n      solution: (error: string) => {\r\n        const match = error.match(/ReferenceError: (\\w+) is not defined/);\r\n        if (match) {\r\n          return `Define variable ${match[1]} before use`;\r\n        }\r\n        return 'Define missing variable';\r\n      }\r\n    }]\r\n  ]);\r\n\r\n  static async handleError(log: any) {\r\n    const diagnosis = this.diagnoseError(log.message);\r\n    if (diagnosis) {\r\n      await this.applyFix(diagnosis, log);\r\n    }\r\n  }\r\n\r\n  private static diagnoseError(error: string): any {\r\n    for (const [pattern, handler] of this.errorPatterns) {\r\n      if (new RegExp(pattern).test(error)) {\r\n        return {\r\n          pattern,\r\n          ...handler,\r\n          error\r\n        };\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private static async applyFix(diagnosis: any, log: any) {\r\n    const fix = diagnosis.solution(diagnosis.error);\r\n    console.log(`üîß Attempting to fix: ${diagnosis.diagnosis}`);\r\n    console.log(`üìù Suggested fix: ${fix}`);\r\n\r\n    // Send fix suggestion to server\r\n    try {\r\n      await fetch('/api/auto-fix', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          error: log,\r\n          diagnosis,\r\n          suggestedFix: fix\r\n        })\r\n      });\r\n    } catch (err) {\r\n      console.error('Failed to send fix suggestion:', err);\r\n    }\r\n  }\r\n} "
        }
    ]
}