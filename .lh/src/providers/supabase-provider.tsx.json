{
    "sourceFile": "src/providers/supabase-provider.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1740926011148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740926023478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n \r\n   useEffect(() => {\r\n     const {\r\n       data: { subscription },\r\n-    } = supabase.auth.onAuthStateChange((event, session) => {\r\n+    } = supabase.auth.onAuthStateChange((event: string, session: any) => {\r\n       if (session) {\r\n         setUser(session.user)\r\n       } else {\r\n         setUser(null)\r\n"
                },
                {
                    "date": 1740926052853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,10 @@\n \"use client\";\r\n \r\n \r\n import { createContext, useContext, useEffect, useState } from 'react'\r\n-import createClient from '@/lib/supabase/client'\r\n-import type { SupabaseClient as Client, User as SupabaseUser } from '@supabase/supabase-js'\r\n+import supabase from '@/lib/supabase/client'\r\n+import type { SupabaseClient as Client, User as SupabaseUser, AuthChangeEvent, Session } from '@supabase/supabase-js'\r\n import { useRouter } from 'next/navigation'\r\n \r\n type SupabaseContext = {\r\n   supabase: Client\r\n@@ -17,16 +17,15 @@\n   children \r\n }: { \r\n   children: React.ReactNode \r\n }) {\r\n-  const [supabase] = useState(() => createClient())\r\n   const [user, setUser] = useState<SupabaseUser | null>(null)\r\n   const router = useRouter()\r\n \r\n   useEffect(() => {\r\n     const {\r\n       data: { subscription },\r\n-    } = supabase.auth.onAuthStateChange((event: string, session: any) => {\r\n+    } = supabase.auth.onAuthStateChange((event: AuthChangeEvent, session: Session | null) => {\r\n       if (session) {\r\n         setUser(session.user)\r\n       } else {\r\n         setUser(null)\r\n"
                },
                {
                    "date": 1740926078910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n \r\n   useEffect(() => {\r\n     const {\r\n       data: { subscription },\r\n-    } = supabase.auth.onAuthStateChange((event: AuthChangeEvent, session: Session | null) => {\r\n+    } = supabase.auth.onAuthStateChange((_event: AuthChangeEvent, session: Session | null) => {\r\n       if (session) {\r\n         setUser(session.user)\r\n       } else {\r\n         setUser(null)\r\n"
                },
                {
                    "date": 1740926114050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n \r\n     return () => {\r\n       subscription.unsubscribe()\r\n     }\r\n-  }, [supabase, router])\r\n+  }, [router])\r\n \r\n   return (\r\n     <Context.Provider value={{ supabase, user }}>\r\n       {children}\r\n"
                }
            ],
            "date": 1740926011148,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\n\r\nimport { createContext, useContext, useEffect, useState } from 'react'\r\nimport createClient from '@/lib/supabase/client'\r\nimport type { SupabaseClient as Client, User as SupabaseUser } from '@supabase/supabase-js'\r\nimport { useRouter } from 'next/navigation'\r\n\r\ntype SupabaseContext = {\r\n  supabase: Client\r\n  user: SupabaseUser | null\r\n}\r\n\r\nconst Context = createContext<SupabaseContext | undefined>(undefined)\r\n\r\nexport default function SupabaseProvider({ \r\n  children \r\n}: { \r\n  children: React.ReactNode \r\n}) {\r\n  const [supabase] = useState(() => createClient())\r\n  const [user, setUser] = useState<SupabaseUser | null>(null)\r\n  const router = useRouter()\r\n\r\n  useEffect(() => {\r\n    const {\r\n      data: { subscription },\r\n    } = supabase.auth.onAuthStateChange((event, session) => {\r\n      if (session) {\r\n        setUser(session.user)\r\n      } else {\r\n        setUser(null)\r\n        router.push('/auth/signin')\r\n      }\r\n    })\r\n\r\n    return () => {\r\n      subscription.unsubscribe()\r\n    }\r\n  }, [supabase, router])\r\n\r\n  return (\r\n    <Context.Provider value={{ supabase, user }}>\r\n      {children}\r\n    </Context.Provider>\r\n  )\r\n}\r\n\r\nexport const useSupabase = () => {\r\n  const context = useContext(Context)\r\n  if (context === undefined) {\r\n    throw new Error('useSupabase must be used inside SupabaseProvider')\r\n  }\r\n  return context\r\n} "
        }
    ]
}