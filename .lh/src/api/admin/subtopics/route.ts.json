{
    "sourceFile": "src/api/admin/subtopics/route.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1741206019035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741209466850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,86 +1,86 @@\n-import { NextResponse } from 'next/server';\r\n-import { successResponse, errorResponse } from '@/lib/api-response';\r\n-import { models } from '@/lib/models/database';\r\n-import { z } from 'zod';\r\n-\r\n-// Validation schema for subtopic creation\r\n-const createSubtopicSchema = z.object({\r\n-  title: z.string()\r\n-    .min(2, 'Title must be at least 2 characters')\r\n-    .max(100, 'Title cannot be more than 100 characters')\r\n-    .trim(),\r\n-  description: z.string()\r\n-    .max(500, 'Description cannot be more than 500 characters')\r\n-    .optional(),\r\n-  topic_id: z.string().uuid('Topic ID must be a valid UUID'),\r\n-  order_index: z.number().min(0).optional().default(0)\r\n-});\r\n-\r\n-export async function GET(request: Request) {\r\n-  try {\r\n-    console.log('GET /api/admin/subtopics - Starting');\r\n-    const { searchParams } = new URL(request.url);\r\n-    const topicId = searchParams.get('topicId');\r\n-    const includeContent = searchParams.get('includeContent') === 'true';\r\n-\r\n-    if (!topicId) {\r\n-      return errorResponse('Topic ID is required', 'VALIDATION_ERROR', 400);\r\n-    }\r\n-\r\n-    // Use Supabase models to get subtopics\r\n-    const subtopics = await models.SubtopicRepository.findByTopicId(topicId, includeContent);\r\n-    console.log('GET /api/admin/subtopics - Success');\r\n-    return successResponse(subtopics);\r\n-  } catch (error) {\r\n-    console.error('Error fetching subtopics:', error);\r\n-    return errorResponse(\r\n-      'Failed to fetch subtopics',\r\n-      'DATABASE_ERROR',\r\n-      500,\r\n-      error instanceof Error ? error.message : 'Unknown error'\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export async function POST(request: Request) {\r\n-  try {\r\n-    console.log('POST /api/admin/subtopics - Starting');\r\n-    const body = await request.json();\r\n-    \r\n-    // Validate request body\r\n-    const validatedData = createSubtopicSchema.parse(body);\r\n-    \r\n-    // Create subtopic using Supabase models\r\n-    const subtopic = await models.SubtopicRepository.create(validatedData);\r\n-\r\n-    console.log('POST /api/admin/subtopics - Success');\r\n-    return successResponse(subtopic);\r\n-  } catch (error: any) {\r\n-    console.error('Error creating subtopic:', error);\r\n-\r\n-    // Handle validation errors\r\n-    if (error instanceof z.ZodError) {\r\n-      return errorResponse(\r\n-        error.errors[0].message,\r\n-        'VALIDATION_ERROR',\r\n-        400\r\n-      );\r\n-    }\r\n-\r\n-    // Handle database errors - PostgreSQL unique violation\r\n-    if (error.code === '23505') {\r\n-      return errorResponse(\r\n-        'A subtopic with this title already exists in this topic',\r\n-        'DUPLICATE_ERROR',\r\n-        409\r\n-      );\r\n-    }\r\n-\r\n-    return errorResponse(\r\n-      'Failed to create subtopic',\r\n-      'DATABASE_ERROR',\r\n-      500,\r\n-      error.message\r\n-    );\r\n-  }\r\n+import { NextResponse } from 'next/server';\n+import { successResponse, errorResponse } from '@/lib/api-response';\n+import { models } from '@/lib/models/database';\n+import { z } from 'zod';\n+\n+// Validation schema for subtopic creation\n+const createSubtopicSchema = z.object({\n+  title: z.string()\n+    .min(2, 'Title must be at least 2 characters')\n+    .max(100, 'Title cannot be more than 100 characters')\n+    .trim(),\n+  description: z.string()\n+    .max(500, 'Description cannot be more than 500 characters')\n+    .optional(),\n+  topic_id: z.string().uuid('Topic ID must be a valid UUID'),\n+  order_index: z.number().min(0).optional().default(0)\n+});\n+\n+export async function GET(request: Request) {\n+  try {\n+    console.log('GET /api/admin/subtopics - Starting');\n+    const { searchParams } = new URL(request.url);\n+    const topicId = searchParams.get('topicId');\n+    const includeContent = searchParams.get('includeContent') === 'true';\n+\n+    if (!topicId) {\n+      return errorResponse('Topic ID is required', 'VALIDATION_ERROR', 400);\n+    }\n+\n+    // Use Supabase models to get subtopics\n+    const subtopics = await models.SubtopicRepository.findByTopicId(topicId, includeContent);\n+    console.log('GET /api/admin/subtopics - Success');\n+    return successResponse(subtopics);\n+  } catch (error) {\n+    console.error('Error fetching subtopics:', error);\n+    return errorResponse(\n+      'Failed to fetch subtopics',\n+      'DATABASE_ERROR',\n+      500,\n+      error instanceof Error ? error.message : 'Unknown error'\n+    );\n+  }\n+}\n+\n+export async function POST(request: Request) {\n+  try {\n+    console.log('POST /api/admin/subtopics - Starting');\n+    const body = await request.json();\n+    \n+    // Validate request body\n+    const validatedData = createSubtopicSchema.parse(body);\n+    \n+    // Create subtopic using Supabase models\n+    const subtopic = await models.SubtopicRepository.create(validatedData);\n+\n+    console.log('POST /api/admin/subtopics - Success');\n+    return successResponse(subtopic);\n+  } catch (error: any) {\n+    console.error('Error creating subtopic:', error);\n+\n+    // Handle validation errors\n+    if (error instanceof z.ZodError) {\n+      return errorResponse(\n+        error.errors[0].message,\n+        'VALIDATION_ERROR',\n+        400\n+      );\n+    }\n+\n+    // Handle database errors - PostgreSQL unique violation\n+    if (error.code === '23505') {\n+      return errorResponse(\n+        'A subtopic with this title already exists in this topic',\n+        'DUPLICATE_ERROR',\n+        409\n+      );\n+    }\n+\n+    return errorResponse(\n+      'Failed to create subtopic',\n+      'DATABASE_ERROR',\n+      500,\n+      error.message\n+    );\n+  }\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1741212522237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,86 @@\n+import { NextResponse } from 'next/server';\n+import { successResponse, errorResponse } from '@/lib/api-response';\n+import { models } from '@/lib/models/database';\n+import { z } from 'zod';\n+\n+// Validation schema for subtopic creation\n+const createSubtopicSchema = z.object({\n+  title: z.string()\n+    .min(2, 'Title must be at least 2 characters')\n+    .max(100, 'Title cannot be more than 100 characters')\n+    .trim(),\n+  description: z.string()\n+    .max(500, 'Description cannot be more than 500 characters')\n+    .optional(),\n+  topic_id: z.string().uuid('Topic ID must be a valid UUID'),\n+  order_index: z.number().min(0).optional().default(0)\n+});\n+\n+export async function GET(request: Request) {\n+  try {\n+    console.log('GET /api/admin/subtopics - Starting');\n+    const { searchParams } = new URL(request.url);\n+    const topicId = searchParams.get('topicId');\n+    const includeContent = searchParams.get('includeContent') === 'true';\n+\n+    if (!topicId) {\n+      return errorResponse('Topic ID is required', 'VALIDATION_ERROR', 400);\n+    }\n+\n+    // Use Supabase models to get subtopics\n+    const subtopics = await models.SubtopicRepository.findByTopicId(topicId, includeContent);\n+    console.log('GET /api/admin/subtopics - Success');\n+    return successResponse(subtopics);\n+  } catch (error) {\n+    console.error('Error fetching subtopics:', error);\n+    return errorResponse(\n+      'Failed to fetch subtopics',\n+      'DATABASE_ERROR',\n+      500,\n+      error instanceof Error ? error.message : 'Unknown error'\n+    );\n+  }\n+}\n+\n+export async function POST(request: Request) {\n+  try {\n+    console.log('POST /api/admin/subtopics - Starting');\n+    const body = await request.json();\n+    \n+    // Validate request body\n+    const validatedData = createSubtopicSchema.parse(body);\n+    \n+    // Create subtopic using Supabase models\n+    const subtopic = await models.SubtopicRepository.create(validatedData);\n+\n+    console.log('POST /api/admin/subtopics - Success');\n+    return successResponse(subtopic);\n+  } catch (error: any) {\n+    console.error('Error creating subtopic:', error);\n+\n+    // Handle validation errors\n+    if (error instanceof z.ZodError) {\n+      return errorResponse(\n+        error.errors[0].message,\n+        'VALIDATION_ERROR',\n+        400\n+      );\n+    }\n+\n+    // Handle database errors - PostgreSQL unique violation\n+    if (error.code === '23505') {\n+      return errorResponse(\n+        'A subtopic with this title already exists in this topic',\n+        'DUPLICATE_ERROR',\n+        409\n+      );\n+    }\n+\n+    return errorResponse(\n+      'Failed to create subtopic',\n+      'DATABASE_ERROR',\n+      500,\n+      error.message\n+    );\n+  }\n+} \n\\ No newline at end of file\n"
                },
                {
                    "date": 1741214040736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,91 +82,5 @@\n       500,\n       error.message\n     );\n   }\n-} \n-import { NextResponse } from 'next/server';\n-import { successResponse, errorResponse } from '@/lib/api-response';\n-import { models } from '@/lib/models/database';\n-import { z } from 'zod';\n-\n-// Validation schema for subtopic creation\n-const createSubtopicSchema = z.object({\n-  title: z.string()\n-    .min(2, 'Title must be at least 2 characters')\n-    .max(100, 'Title cannot be more than 100 characters')\n-    .trim(),\n-  description: z.string()\n-    .max(500, 'Description cannot be more than 500 characters')\n-    .optional(),\n-  topic_id: z.string().uuid('Topic ID must be a valid UUID'),\n-  order_index: z.number().min(0).optional().default(0)\n-});\n-\n-export async function GET(request: Request) {\n-  try {\n-    console.log('GET /api/admin/subtopics - Starting');\n-    const { searchParams } = new URL(request.url);\n-    const topicId = searchParams.get('topicId');\n-    const includeContent = searchParams.get('includeContent') === 'true';\n-\n-    if (!topicId) {\n-      return errorResponse('Topic ID is required', 'VALIDATION_ERROR', 400);\n-    }\n-\n-    // Use Supabase models to get subtopics\n-    const subtopics = await models.SubtopicRepository.findByTopicId(topicId, includeContent);\n-    console.log('GET /api/admin/subtopics - Success');\n-    return successResponse(subtopics);\n-  } catch (error) {\n-    console.error('Error fetching subtopics:', error);\n-    return errorResponse(\n-      'Failed to fetch subtopics',\n-      'DATABASE_ERROR',\n-      500,\n-      error instanceof Error ? error.message : 'Unknown error'\n-    );\n-  }\n-}\n-\n-export async function POST(request: Request) {\n-  try {\n-    console.log('POST /api/admin/subtopics - Starting');\n-    const body = await request.json();\n-    \n-    // Validate request body\n-    const validatedData = createSubtopicSchema.parse(body);\n-    \n-    // Create subtopic using Supabase models\n-    const subtopic = await models.SubtopicRepository.create(validatedData);\n-\n-    console.log('POST /api/admin/subtopics - Success');\n-    return successResponse(subtopic);\n-  } catch (error: any) {\n-    console.error('Error creating subtopic:', error);\n-\n-    // Handle validation errors\n-    if (error instanceof z.ZodError) {\n-      return errorResponse(\n-        error.errors[0].message,\n-        'VALIDATION_ERROR',\n-        400\n-      );\n-    }\n-\n-    // Handle database errors - PostgreSQL unique violation\n-    if (error.code === '23505') {\n-      return errorResponse(\n-        'A subtopic with this title already exists in this topic',\n-        'DUPLICATE_ERROR',\n-        409\n-      );\n-    }\n-\n-    return errorResponse(\n-      'Failed to create subtopic',\n-      'DATABASE_ERROR',\n-      500,\n-      error.message\n-    );\n-  }\n } \n\\ No newline at end of file\n"
                }
            ],
            "date": 1741206019035,
            "name": "Commit-0",
            "content": "import { NextResponse } from 'next/server';\r\nimport { successResponse, errorResponse } from '@/lib/api-response';\r\nimport { models } from '@/lib/models/database';\r\nimport { z } from 'zod';\r\n\r\n// Validation schema for subtopic creation\r\nconst createSubtopicSchema = z.object({\r\n  title: z.string()\r\n    .min(2, 'Title must be at least 2 characters')\r\n    .max(100, 'Title cannot be more than 100 characters')\r\n    .trim(),\r\n  description: z.string()\r\n    .max(500, 'Description cannot be more than 500 characters')\r\n    .optional(),\r\n  topic_id: z.string().uuid('Topic ID must be a valid UUID'),\r\n  order_index: z.number().min(0).optional().default(0)\r\n});\r\n\r\nexport async function GET(request: Request) {\r\n  try {\r\n    console.log('GET /api/admin/subtopics - Starting');\r\n    const { searchParams } = new URL(request.url);\r\n    const topicId = searchParams.get('topicId');\r\n    const includeContent = searchParams.get('includeContent') === 'true';\r\n\r\n    if (!topicId) {\r\n      return errorResponse('Topic ID is required', 'VALIDATION_ERROR', 400);\r\n    }\r\n\r\n    // Use Supabase models to get subtopics\r\n    const subtopics = await models.SubtopicRepository.findByTopicId(topicId, includeContent);\r\n    console.log('GET /api/admin/subtopics - Success');\r\n    return successResponse(subtopics);\r\n  } catch (error) {\r\n    console.error('Error fetching subtopics:', error);\r\n    return errorResponse(\r\n      'Failed to fetch subtopics',\r\n      'DATABASE_ERROR',\r\n      500,\r\n      error instanceof Error ? error.message : 'Unknown error'\r\n    );\r\n  }\r\n}\r\n\r\nexport async function POST(request: Request) {\r\n  try {\r\n    console.log('POST /api/admin/subtopics - Starting');\r\n    const body = await request.json();\r\n    \r\n    // Validate request body\r\n    const validatedData = createSubtopicSchema.parse(body);\r\n    \r\n    // Create subtopic using Supabase models\r\n    const subtopic = await models.SubtopicRepository.create(validatedData);\r\n\r\n    console.log('POST /api/admin/subtopics - Success');\r\n    return successResponse(subtopic);\r\n  } catch (error: any) {\r\n    console.error('Error creating subtopic:', error);\r\n\r\n    // Handle validation errors\r\n    if (error instanceof z.ZodError) {\r\n      return errorResponse(\r\n        error.errors[0].message,\r\n        'VALIDATION_ERROR',\r\n        400\r\n      );\r\n    }\r\n\r\n    // Handle database errors - PostgreSQL unique violation\r\n    if (error.code === '23505') {\r\n      return errorResponse(\r\n        'A subtopic with this title already exists in this topic',\r\n        'DUPLICATE_ERROR',\r\n        409\r\n      );\r\n    }\r\n\r\n    return errorResponse(\r\n      'Failed to create subtopic',\r\n      'DATABASE_ERROR',\r\n      500,\r\n      error.message\r\n    );\r\n  }\r\n} "
        }
    ]
}