{
    "sourceFile": "src/api/admin/prompts/route.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1741205868517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741209466830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,49 +1,49 @@\n-import { NextResponse } from 'next/server';\r\n-import { models } from '@/lib/models/database';\r\n-import { z } from 'zod';\r\n-\r\n-// Schema for validating prompt data\r\n-const promptSchema = z.object({\r\n-  text: z.string().min(1, 'Text is required'),\r\n-  narration: z.string().optional(),\r\n-  saytext: z.string().optional(),\r\n-  media: z.string().optional(),\r\n-  type: z.enum(['image', 'gif', 'video']).default('image')\r\n-});\r\n-\r\n-export async function POST(req: Request) {\r\n-  try {\r\n-    // Connect to database\r\n-    await connectToDatabase();\r\n-\r\n-    // Parse and validate request body\r\n-    const body = await req.json();\r\n-    const validatedData = promptSchema.parse(body);\r\n-\r\n-    // Create new prompt\r\n-    const prompt = await models.ExercisePrompt.create(validatedData);\r\n-\r\n-    return NextResponse.json({\r\n-      success: true,\r\n-      data: prompt\r\n-    });\r\n-  } catch (error) {\r\n-    console.error('Error saving prompt:', error);\r\n-    if (error instanceof z.ZodError) {\r\n-      return NextResponse.json({\r\n-        success: false,\r\n-        error: {\r\n-          message: 'Invalid prompt data',\r\n-          details: error.errors\r\n-        }\r\n-      }, { status: 400 });\r\n-    }\r\n-\r\n-    return NextResponse.json({\r\n-      success: false,\r\n-      error: {\r\n-        message: error instanceof Error ? error.message : 'Failed to save prompt'\r\n-      }\r\n-    }, { status: 500 });\r\n-  }\r\n+import { NextResponse } from 'next/server';\n+import { models } from '@/lib/models/database';\n+import { z } from 'zod';\n+\n+// Schema for validating prompt data\n+const promptSchema = z.object({\n+  text: z.string().min(1, 'Text is required'),\n+  narration: z.string().optional(),\n+  saytext: z.string().optional(),\n+  media: z.string().optional(),\n+  type: z.enum(['image', 'gif', 'video']).default('image'),\n+  order_index: z.number().default(0)\n+});\n+\n+export async function POST(req: Request) {\n+  try {\n+    // No need to connect to database - Supabase handles connection\n+\n+    // Parse and validate request body\n+    const body = await req.json();\n+    const validatedData = promptSchema.parse(body);\n+\n+    // Create new prompt using Supabase repository\n+    const prompt = await models.ExercisePrompt.create(validatedData);\n+\n+    return NextResponse.json({\n+      success: true,\n+      data: prompt\n+    });\n+  } catch (error) {\n+    console.error('Error saving prompt:', error);\n+    if (error instanceof z.ZodError) {\n+      return NextResponse.json({\n+        success: false,\n+        error: {\n+          message: 'Invalid prompt data',\n+          details: error.errors\n+        }\n+      }, { status: 400 });\n+    }\n+\n+    return NextResponse.json({\n+      success: false,\n+      error: {\n+        message: error instanceof Error ? error.message : 'Failed to save prompt'\n+      }\n+    }, { status: 500 });\n+  }\n } \n\\ No newline at end of file\n"
                }
            ],
            "date": 1741205868517,
            "name": "Commit-0",
            "content": "import { NextResponse } from 'next/server';\r\nimport { models } from '@/lib/models/database';\r\nimport { z } from 'zod';\r\n\r\n// Schema for validating prompt data\r\nconst promptSchema = z.object({\r\n  text: z.string().min(1, 'Text is required'),\r\n  narration: z.string().optional(),\r\n  saytext: z.string().optional(),\r\n  media: z.string().optional(),\r\n  type: z.enum(['image', 'gif', 'video']).default('image')\r\n});\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    // Connect to database\r\n    await connectToDatabase();\r\n\r\n    // Parse and validate request body\r\n    const body = await req.json();\r\n    const validatedData = promptSchema.parse(body);\r\n\r\n    // Create new prompt\r\n    const prompt = await models.ExercisePrompt.create(validatedData);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: prompt\r\n    });\r\n  } catch (error) {\r\n    console.error('Error saving prompt:', error);\r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: {\r\n          message: 'Invalid prompt data',\r\n          details: error.errors\r\n        }\r\n      }, { status: 400 });\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: {\r\n        message: error instanceof Error ? error.message : 'Failed to save prompt'\r\n      }\r\n    }, { status: 500 });\r\n  }\r\n} "
        }
    ]
}