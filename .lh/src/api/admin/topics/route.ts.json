{
    "sourceFile": "src/api/admin/topics/route.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1741206101154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741209466857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,106 +1,106 @@\n-import { NextResponse } from 'next/server';\r\n-import { successResponse, errorResponse } from '@/lib/api-response';\r\n-import { models } from '@/lib/models/database';\r\n-import { z } from 'zod';\r\n-\r\n-// Validation schema for topic creation\r\n-const createTopicSchema = z.object({\r\n-  title: z.string()\r\n-    .min(2, 'Title must be at least 2 characters')\r\n-    .max(100, 'Title cannot be more than 100 characters')\r\n-    .trim(),\r\n-  description: z.string()\r\n-    .max(500, 'Description cannot be more than 500 characters')\r\n-    .optional(),\r\n-  grade_id: z.string().uuid('Grade ID must be a valid UUID'),\r\n-  order_index: z.number().min(0).optional().default(0)\r\n-});\r\n-\r\n-export async function GET(request: Request) {\r\n-  try {\r\n-    console.log('GET /api/admin/topics - Starting');\r\n-    const { searchParams } = new URL(request.url);\r\n-    const gradeId = searchParams.get('gradeId');\r\n-    const includeContent = searchParams.get('includeContent') === 'true';\r\n-    const includeBasic = searchParams.get('includeBasic') === 'true';\r\n-    const includeDetails = searchParams.get('includeDetails') === 'true';\r\n-    const includeStats = searchParams.get('includeStats') === 'true';\r\n-\r\n-    if (!gradeId) {\r\n-      console.log('GET /api/admin/topics - Error: Grade ID is required');\r\n-      return errorResponse('Grade ID is required', 'VALIDATION_ERROR', 400);\r\n-    }\r\n-\r\n-    console.log('GET /api/admin/topics - Fetching topics for grade:', gradeId);\r\n-    \r\n-    // Use Supabase models to get topics\r\n-    const topics = await models.TopicRepository.findByGradeId(gradeId, { \r\n-      includeContent,\r\n-      includeBasic,\r\n-      includeDetails,\r\n-      includeStats\r\n-    });\r\n-\r\n-    console.log('GET /api/admin/topics - Success:', {\r\n-      topicsCount: topics.topics.length\r\n-    });\r\n-    return successResponse(topics);\r\n-  } catch (error) {\r\n-    console.error('Error in GET /api/admin/topics:', error);\r\n-    if (error instanceof Error && error.message === 'Invalid grade ID format') {\r\n-      return errorResponse(\r\n-        'Invalid grade ID format',\r\n-        'VALIDATION_ERROR',\r\n-        400\r\n-      );\r\n-    }\r\n-    return errorResponse(\r\n-      'Failed to fetch topics',\r\n-      'DATABASE_ERROR',\r\n-      500,\r\n-      error instanceof Error ? error.message : 'Unknown error'\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export async function POST(request: Request) {\r\n-  try {\r\n-    console.log('POST /api/admin/topics - Starting');\r\n-    const body = await request.json();\r\n-    \r\n-    // Validate request body\r\n-    const validatedData = createTopicSchema.parse(body);\r\n-    \r\n-    // Create topic using Supabase models\r\n-    const topic = await models.TopicRepository.create(validatedData);\r\n-\r\n-    return successResponse(topic);\r\n-  } catch (error: any) {\r\n-    console.error('Error creating topic:', error);\r\n-\r\n-    // Handle validation errors\r\n-    if (error instanceof z.ZodError) {\r\n-      return errorResponse(\r\n-        error.errors[0].message,\r\n-        'VALIDATION_ERROR',\r\n-        400\r\n-      );\r\n-    }\r\n-\r\n-    // Handle database errors - PostgreSQL unique violation\r\n-    if (error.code === '23505') {\r\n-      return errorResponse(\r\n-        'A topic with this title already exists in this grade',\r\n-        'DUPLICATE_ERROR',\r\n-        409\r\n-      );\r\n-    }\r\n-\r\n-    return errorResponse(\r\n-      'Failed to create topic',\r\n-      'DATABASE_ERROR',\r\n-      500,\r\n-      error.message\r\n-    );\r\n-  }\r\n+import { NextResponse } from 'next/server';\n+import { successResponse, errorResponse } from '@/lib/api-response';\n+import { models } from '@/lib/models/database';\n+import { z } from 'zod';\n+\n+// Validation schema for topic creation\n+const createTopicSchema = z.object({\n+  title: z.string()\n+    .min(2, 'Title must be at least 2 characters')\n+    .max(100, 'Title cannot be more than 100 characters')\n+    .trim(),\n+  description: z.string()\n+    .max(500, 'Description cannot be more than 500 characters')\n+    .optional(),\n+  grade_id: z.string().uuid('Grade ID must be a valid UUID'),\n+  order_index: z.number().min(0).optional().default(0)\n+});\n+\n+export async function GET(request: Request) {\n+  try {\n+    console.log('GET /api/admin/topics - Starting');\n+    const { searchParams } = new URL(request.url);\n+    const gradeId = searchParams.get('gradeId');\n+    const includeContent = searchParams.get('includeContent') === 'true';\n+    const includeBasic = searchParams.get('includeBasic') === 'true';\n+    const includeDetails = searchParams.get('includeDetails') === 'true';\n+    const includeStats = searchParams.get('includeStats') === 'true';\n+\n+    if (!gradeId) {\n+      console.log('GET /api/admin/topics - Error: Grade ID is required');\n+      return errorResponse('Grade ID is required', 'VALIDATION_ERROR', 400);\n+    }\n+\n+    console.log('GET /api/admin/topics - Fetching topics for grade:', gradeId);\n+    \n+    // Use Supabase models to get topics\n+    const topics = await models.TopicRepository.findByGradeId(gradeId, { \n+      includeContent,\n+      includeBasic,\n+      includeDetails,\n+      includeStats\n+    });\n+\n+    console.log('GET /api/admin/topics - Success:', {\n+      topicsCount: topics.topics.length\n+    });\n+    return successResponse(topics);\n+  } catch (error) {\n+    console.error('Error in GET /api/admin/topics:', error);\n+    if (error instanceof Error && error.message === 'Invalid grade ID format') {\n+      return errorResponse(\n+        'Invalid grade ID format',\n+        'VALIDATION_ERROR',\n+        400\n+      );\n+    }\n+    return errorResponse(\n+      'Failed to fetch topics',\n+      'DATABASE_ERROR',\n+      500,\n+      error instanceof Error ? error.message : 'Unknown error'\n+    );\n+  }\n+}\n+\n+export async function POST(request: Request) {\n+  try {\n+    console.log('POST /api/admin/topics - Starting');\n+    const body = await request.json();\n+    \n+    // Validate request body\n+    const validatedData = createTopicSchema.parse(body);\n+    \n+    // Create topic using Supabase models\n+    const topic = await models.TopicRepository.create(validatedData);\n+\n+    return successResponse(topic);\n+  } catch (error: any) {\n+    console.error('Error creating topic:', error);\n+\n+    // Handle validation errors\n+    if (error instanceof z.ZodError) {\n+      return errorResponse(\n+        error.errors[0].message,\n+        'VALIDATION_ERROR',\n+        400\n+      );\n+    }\n+\n+    // Handle database errors - PostgreSQL unique violation\n+    if (error.code === '23505') {\n+      return errorResponse(\n+        'A topic with this title already exists in this grade',\n+        'DUPLICATE_ERROR',\n+        409\n+      );\n+    }\n+\n+    return errorResponse(\n+      'Failed to create topic',\n+      'DATABASE_ERROR',\n+      500,\n+      error.message\n+    );\n+  }\n } \n\\ No newline at end of file\n"
                }
            ],
            "date": 1741206101154,
            "name": "Commit-0",
            "content": "import { NextResponse } from 'next/server';\r\nimport { successResponse, errorResponse } from '@/lib/api-response';\r\nimport { models } from '@/lib/models/database';\r\nimport { z } from 'zod';\r\n\r\n// Validation schema for topic creation\r\nconst createTopicSchema = z.object({\r\n  title: z.string()\r\n    .min(2, 'Title must be at least 2 characters')\r\n    .max(100, 'Title cannot be more than 100 characters')\r\n    .trim(),\r\n  description: z.string()\r\n    .max(500, 'Description cannot be more than 500 characters')\r\n    .optional(),\r\n  grade_id: z.string().uuid('Grade ID must be a valid UUID'),\r\n  order_index: z.number().min(0).optional().default(0)\r\n});\r\n\r\nexport async function GET(request: Request) {\r\n  try {\r\n    console.log('GET /api/admin/topics - Starting');\r\n    const { searchParams } = new URL(request.url);\r\n    const gradeId = searchParams.get('gradeId');\r\n    const includeContent = searchParams.get('includeContent') === 'true';\r\n    const includeBasic = searchParams.get('includeBasic') === 'true';\r\n    const includeDetails = searchParams.get('includeDetails') === 'true';\r\n    const includeStats = searchParams.get('includeStats') === 'true';\r\n\r\n    if (!gradeId) {\r\n      console.log('GET /api/admin/topics - Error: Grade ID is required');\r\n      return errorResponse('Grade ID is required', 'VALIDATION_ERROR', 400);\r\n    }\r\n\r\n    console.log('GET /api/admin/topics - Fetching topics for grade:', gradeId);\r\n    \r\n    // Use Supabase models to get topics\r\n    const topics = await models.TopicRepository.findByGradeId(gradeId, { \r\n      includeContent,\r\n      includeBasic,\r\n      includeDetails,\r\n      includeStats\r\n    });\r\n\r\n    console.log('GET /api/admin/topics - Success:', {\r\n      topicsCount: topics.topics.length\r\n    });\r\n    return successResponse(topics);\r\n  } catch (error) {\r\n    console.error('Error in GET /api/admin/topics:', error);\r\n    if (error instanceof Error && error.message === 'Invalid grade ID format') {\r\n      return errorResponse(\r\n        'Invalid grade ID format',\r\n        'VALIDATION_ERROR',\r\n        400\r\n      );\r\n    }\r\n    return errorResponse(\r\n      'Failed to fetch topics',\r\n      'DATABASE_ERROR',\r\n      500,\r\n      error instanceof Error ? error.message : 'Unknown error'\r\n    );\r\n  }\r\n}\r\n\r\nexport async function POST(request: Request) {\r\n  try {\r\n    console.log('POST /api/admin/topics - Starting');\r\n    const body = await request.json();\r\n    \r\n    // Validate request body\r\n    const validatedData = createTopicSchema.parse(body);\r\n    \r\n    // Create topic using Supabase models\r\n    const topic = await models.TopicRepository.create(validatedData);\r\n\r\n    return successResponse(topic);\r\n  } catch (error: any) {\r\n    console.error('Error creating topic:', error);\r\n\r\n    // Handle validation errors\r\n    if (error instanceof z.ZodError) {\r\n      return errorResponse(\r\n        error.errors[0].message,\r\n        'VALIDATION_ERROR',\r\n        400\r\n      );\r\n    }\r\n\r\n    // Handle database errors - PostgreSQL unique violation\r\n    if (error.code === '23505') {\r\n      return errorResponse(\r\n        'A topic with this title already exists in this grade',\r\n        'DUPLICATE_ERROR',\r\n        409\r\n      );\r\n    }\r\n\r\n    return errorResponse(\r\n      'Failed to create topic',\r\n      'DATABASE_ERROR',\r\n      500,\r\n      error.message\r\n    );\r\n  }\r\n} "
        }
    ]
}