{
    "sourceFile": "src/api/admin/grades/route.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1741205983878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741209466842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,117 +1,117 @@\n-import { NextResponse } from 'next/server';\r\n-import { successResponse, errorResponse } from '@/lib/api-response';\r\n-import { z } from 'zod';\r\n-import { models } from '@/lib/models/database';\r\n-\r\n-// Validation schema for grade creation\r\n-const createGradeSchema = z.object({\r\n-  name: z.string()\r\n-    .min(2, 'Name must be at least 2 characters')\r\n-    .max(50, 'Name cannot be more than 50 characters')\r\n-    .trim(),\r\n-  description: z.string()\r\n-    .max(500, 'Description cannot be more than 500 characters')\r\n-    .optional(),\r\n-  level: z.number().min(0).optional().default(0)\r\n-});\r\n-\r\n-export async function GET(request: Request) {\r\n-  try {\r\n-    console.log('GET /api/admin/grades - Starting');\r\n-    const { searchParams } = new URL(request.url);\r\n-    const page = parseInt(searchParams.get('page') || '1');\r\n-    const pageSize = parseInt(searchParams.get('pageSize') || '10');\r\n-    const includeContent = searchParams.get('includeContent') === 'true';\r\n-\r\n-    if (isNaN(page) || page < 1) {\r\n-      return errorResponse('Invalid page number', 'VALIDATION_ERROR', 400);\r\n-    }\r\n-\r\n-    if (isNaN(pageSize) || pageSize < 1) {\r\n-      return errorResponse('Invalid page size', 'VALIDATION_ERROR', 400);\r\n-    }\r\n-\r\n-    // Use the new Supabase models\r\n-    const result = await models.GradeRepository.findAll({ \r\n-      page, \r\n-      pageSize, \r\n-      includeContent \r\n-    });\r\n-    \r\n-    console.log('GET /api/admin/grades - Success:', {\r\n-      gradesCount: result.grades.length,\r\n-      pagination: result.pagination\r\n-    });\r\n-    \r\n-    return successResponse({\r\n-      grades: result.grades,\r\n-      pagination: result.pagination\r\n-    });\r\n-  } catch (error: any) {\r\n-    console.error('Error fetching grades:', error);\r\n-    return errorResponse(\r\n-      error.message || 'Failed to fetch grades',\r\n-      'DATABASE_ERROR',\r\n-      500,\r\n-      error.stack\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export async function POST(request: Request) {\r\n-  try {\r\n-    console.log('POST /api/admin/grades - Starting');\r\n-    const body = await request.json();\r\n-    \r\n-    // Validate request body\r\n-    const validatedData = createGradeSchema.parse(body);\r\n-    \r\n-    // Check if grade with same name exists using the Supabase model\r\n-    const existingGrade = await models.GradeRepository.findByName(validatedData.name);\r\n-    if (existingGrade) {\r\n-      return errorResponse(\r\n-        'A grade with this name already exists',\r\n-        'DUPLICATE_ERROR',\r\n-        409\r\n-      );\r\n-    }\r\n-\r\n-    // Create grade using the Supabase model\r\n-    const grade = await models.GradeRepository.create(validatedData);\r\n-    \r\n-    console.log('POST /api/admin/grades - Success:', {\r\n-      gradeId: grade.id,\r\n-      name: grade.name\r\n-    });\r\n-    \r\n-    return successResponse(grade);\r\n-  } catch (error: any) {\r\n-    console.error('Error creating grade:', error);\r\n-\r\n-    // Handle validation errors\r\n-    if (error instanceof z.ZodError) {\r\n-      return errorResponse(\r\n-        error.errors[0].message,\r\n-        'VALIDATION_ERROR',\r\n-        400\r\n-      );\r\n-    }\r\n-\r\n-    // Handle database errors\r\n-    if (error.code === '23505') {  // PostgreSQL unique violation error\r\n-      return errorResponse(\r\n-        'A grade with this name already exists',\r\n-        'DUPLICATE_ERROR',\r\n-        409\r\n-      );\r\n-    }\r\n-\r\n-    // Handle other errors\r\n-    return errorResponse(\r\n-      error.message || 'Failed to create grade',\r\n-      'DATABASE_ERROR',\r\n-      500,\r\n-      error.stack\r\n-    );\r\n-  }\r\n+import { NextResponse } from 'next/server';\n+import { successResponse, errorResponse } from '@/lib/api-response';\n+import { z } from 'zod';\n+import { models } from '@/lib/models/database';\n+\n+// Validation schema for grade creation\n+const createGradeSchema = z.object({\n+  name: z.string()\n+    .min(2, 'Name must be at least 2 characters')\n+    .max(50, 'Name cannot be more than 50 characters')\n+    .trim(),\n+  description: z.string()\n+    .max(500, 'Description cannot be more than 500 characters')\n+    .optional(),\n+  level: z.number().min(0).optional().default(0)\n+});\n+\n+export async function GET(request: Request) {\n+  try {\n+    console.log('GET /api/admin/grades - Starting');\n+    const { searchParams } = new URL(request.url);\n+    const page = parseInt(searchParams.get('page') || '1');\n+    const pageSize = parseInt(searchParams.get('pageSize') || '10');\n+    const includeContent = searchParams.get('includeContent') === 'true';\n+\n+    if (isNaN(page) || page < 1) {\n+      return errorResponse('Invalid page number', 'VALIDATION_ERROR', 400);\n+    }\n+\n+    if (isNaN(pageSize) || pageSize < 1) {\n+      return errorResponse('Invalid page size', 'VALIDATION_ERROR', 400);\n+    }\n+\n+    // Use the new Supabase models\n+    const result = await models.GradeRepository.findAll({ \n+      page, \n+      pageSize, \n+      includeContent \n+    });\n+    \n+    console.log('GET /api/admin/grades - Success:', {\n+      gradesCount: result.grades.length,\n+      pagination: result.pagination\n+    });\n+    \n+    return successResponse({\n+      grades: result.grades,\n+      pagination: result.pagination\n+    });\n+  } catch (error: any) {\n+    console.error('Error fetching grades:', error);\n+    return errorResponse(\n+      error.message || 'Failed to fetch grades',\n+      'DATABASE_ERROR',\n+      500,\n+      error.stack\n+    );\n+  }\n+}\n+\n+export async function POST(request: Request) {\n+  try {\n+    console.log('POST /api/admin/grades - Starting');\n+    const body = await request.json();\n+    \n+    // Validate request body\n+    const validatedData = createGradeSchema.parse(body);\n+    \n+    // Check if grade with same name exists using the Supabase model\n+    const existingGrade = await models.GradeRepository.findByName(validatedData.name);\n+    if (existingGrade) {\n+      return errorResponse(\n+        'A grade with this name already exists',\n+        'DUPLICATE_ERROR',\n+        409\n+      );\n+    }\n+\n+    // Create grade using the Supabase model\n+    const grade = await models.GradeRepository.create(validatedData);\n+    \n+    console.log('POST /api/admin/grades - Success:', {\n+      gradeId: grade.id,\n+      name: grade.name\n+    });\n+    \n+    return successResponse(grade);\n+  } catch (error: any) {\n+    console.error('Error creating grade:', error);\n+\n+    // Handle validation errors\n+    if (error instanceof z.ZodError) {\n+      return errorResponse(\n+        error.errors[0].message,\n+        'VALIDATION_ERROR',\n+        400\n+      );\n+    }\n+\n+    // Handle database errors\n+    if (error.code === '23505') {  // PostgreSQL unique violation error\n+      return errorResponse(\n+        'A grade with this name already exists',\n+        'DUPLICATE_ERROR',\n+        409\n+      );\n+    }\n+\n+    // Handle other errors\n+    return errorResponse(\n+      error.message || 'Failed to create grade',\n+      'DATABASE_ERROR',\n+      500,\n+      error.stack\n+    );\n+  }\n } \n\\ No newline at end of file\n"
                }
            ],
            "date": 1741205983878,
            "name": "Commit-0",
            "content": "import { NextResponse } from 'next/server';\r\nimport { successResponse, errorResponse } from '@/lib/api-response';\r\nimport { z } from 'zod';\r\nimport { models } from '@/lib/models/database';\r\n\r\n// Validation schema for grade creation\r\nconst createGradeSchema = z.object({\r\n  name: z.string()\r\n    .min(2, 'Name must be at least 2 characters')\r\n    .max(50, 'Name cannot be more than 50 characters')\r\n    .trim(),\r\n  description: z.string()\r\n    .max(500, 'Description cannot be more than 500 characters')\r\n    .optional(),\r\n  level: z.number().min(0).optional().default(0)\r\n});\r\n\r\nexport async function GET(request: Request) {\r\n  try {\r\n    console.log('GET /api/admin/grades - Starting');\r\n    const { searchParams } = new URL(request.url);\r\n    const page = parseInt(searchParams.get('page') || '1');\r\n    const pageSize = parseInt(searchParams.get('pageSize') || '10');\r\n    const includeContent = searchParams.get('includeContent') === 'true';\r\n\r\n    if (isNaN(page) || page < 1) {\r\n      return errorResponse('Invalid page number', 'VALIDATION_ERROR', 400);\r\n    }\r\n\r\n    if (isNaN(pageSize) || pageSize < 1) {\r\n      return errorResponse('Invalid page size', 'VALIDATION_ERROR', 400);\r\n    }\r\n\r\n    // Use the new Supabase models\r\n    const result = await models.GradeRepository.findAll({ \r\n      page, \r\n      pageSize, \r\n      includeContent \r\n    });\r\n    \r\n    console.log('GET /api/admin/grades - Success:', {\r\n      gradesCount: result.grades.length,\r\n      pagination: result.pagination\r\n    });\r\n    \r\n    return successResponse({\r\n      grades: result.grades,\r\n      pagination: result.pagination\r\n    });\r\n  } catch (error: any) {\r\n    console.error('Error fetching grades:', error);\r\n    return errorResponse(\r\n      error.message || 'Failed to fetch grades',\r\n      'DATABASE_ERROR',\r\n      500,\r\n      error.stack\r\n    );\r\n  }\r\n}\r\n\r\nexport async function POST(request: Request) {\r\n  try {\r\n    console.log('POST /api/admin/grades - Starting');\r\n    const body = await request.json();\r\n    \r\n    // Validate request body\r\n    const validatedData = createGradeSchema.parse(body);\r\n    \r\n    // Check if grade with same name exists using the Supabase model\r\n    const existingGrade = await models.GradeRepository.findByName(validatedData.name);\r\n    if (existingGrade) {\r\n      return errorResponse(\r\n        'A grade with this name already exists',\r\n        'DUPLICATE_ERROR',\r\n        409\r\n      );\r\n    }\r\n\r\n    // Create grade using the Supabase model\r\n    const grade = await models.GradeRepository.create(validatedData);\r\n    \r\n    console.log('POST /api/admin/grades - Success:', {\r\n      gradeId: grade.id,\r\n      name: grade.name\r\n    });\r\n    \r\n    return successResponse(grade);\r\n  } catch (error: any) {\r\n    console.error('Error creating grade:', error);\r\n\r\n    // Handle validation errors\r\n    if (error instanceof z.ZodError) {\r\n      return errorResponse(\r\n        error.errors[0].message,\r\n        'VALIDATION_ERROR',\r\n        400\r\n      );\r\n    }\r\n\r\n    // Handle database errors\r\n    if (error.code === '23505') {  // PostgreSQL unique violation error\r\n      return errorResponse(\r\n        'A grade with this name already exists',\r\n        'DUPLICATE_ERROR',\r\n        409\r\n      );\r\n    }\r\n\r\n    // Handle other errors\r\n    return errorResponse(\r\n      error.message || 'Failed to create grade',\r\n      'DATABASE_ERROR',\r\n      500,\r\n      error.stack\r\n    );\r\n  }\r\n} "
        }
    ]
}