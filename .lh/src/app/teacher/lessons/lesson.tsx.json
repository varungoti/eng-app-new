{
    "sourceFile": "src/app/teacher/lessons/lesson.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1739373614613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739393501157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,20 @@\n \"use client\";\n \n-import React, { useState, useEffect, useCallback } from 'react';\n-import { useLocation, useNavigate } from 'react-router-dom';\n+import React, { useState, useEffect, useCallback, useRef } from 'react';\n+import { useLocation, useNavigate, useParams, useSearchParams } from 'react-router-dom';\n import { motion, AnimatePresence } from 'framer-motion';\n import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n import { Button } from \"@/components/ui/button\";\n import { Progress } from \"@/components/ui/progress\";\n import { Badge } from \"@/components/ui/badge\";\n import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n+import { ScrollArea } from \"@/components/ui/scroll-area\";\n import { \n   ArrowLeft, BookOpen, CheckCircle2, Clock, Flag, \n   HelpCircle, Layout, List, Play, Settings, Star, \n-  X, Mic, PenTool, FileText \n+  X, Mic, PenTool, FileText, \n+  Pause, SkipBack, SkipForward, Volume2, VolumeX, ChevronLeft, ChevronRight, Image as ImageIcon, Video, AlertCircle\n } from \"lucide-react\";\n import { cn } from \"@/lib/utils\";\n import { supabase } from \"@/lib/supabase\";\n import { Question, Activity, ExercisePrompt } from \"@/types\";\n@@ -870,19 +872,28 @@\n   }, []);\n   return <>{children}</>;\n };\n \n+// Fish Speech Configuration\n+const FISH_SPEECH_CONFIG = {\n+  apiKey: process.env.NEXT_PUBLIC_FISH_SPEECH_API_KEY,\n+  voice: 'en-US-JennyNeural', // Default voice\n+  rate: 1.0,\n+  pitch: 1.0\n+};\n+\n export default function LessonPage() {\n   const { user, loading: authLoading } = useAuth();\n   const location = useLocation();\n   const navigate = useNavigate();\n-  const searchParams = new URLSearchParams(window.location.search);\n+  const [searchParams] = useSearchParams();\n+  const params = useParams();\n   \n   // Get lesson data from query parameters\n-  const lessonId = searchParams.get('lessonId');\n-  const topicId = searchParams.get('topicId');\n-  const subtopicId = searchParams.get('subtopicId');\n-  const context = searchParams.get('context');\n+  const lessonId = params.lessonId;\n+  const topicId = params.topicId;\n+  const subtopicId = params.subtopicId;\n+  const context = params.context;\n   \n   // Parse context if available\n   const lessonContext = React.useMemo(() => {\n     try {\n@@ -939,8 +950,12 @@\n     initializationTime: 0,\n     dataLoadTime: 0,\n     renderCount: 0\n   });\n+  const [isPlaying, setIsPlaying] = useState(false);\n+  const [currentContentIndex, setCurrentContentIndex] = useState(0);\n+  const [isMuted, setIsMuted] = useState(false);\n+  const audioRef = useRef<HTMLAudioElement | null>(null);\n \n   // Function to handle entering fullscreen\n   const enterFullscreen = async () => {\n     try {\n@@ -1298,8 +1313,66 @@\n       state: location.state\n     });\n   }, [location]);\n \n+  // Text-to-speech functions\n+  const speak = async (text: string) => {\n+    try {\n+      // Implementation for Fish Speech API call here\n+      // This is a placeholder - you'll need to implement the actual API call\n+      const response = await fetch('https://api.fishspeech.com/v1/speak', {\n+        method: 'POST',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${FISH_SPEECH_CONFIG.apiKey}`\n+        },\n+        body: JSON.stringify({\n+          text,\n+          voice: FISH_SPEECH_CONFIG.voice,\n+          rate: FISH_SPEECH_CONFIG.rate,\n+          pitch: FISH_SPEECH_CONFIG.pitch\n+        })\n+      });\n+\n+      if (!response.ok) throw new Error('Failed to generate speech');\n+      \n+      const audioBlob = await response.blob();\n+      const audioUrl = URL.createObjectURL(audioBlob);\n+      \n+      if (audioRef.current) {\n+        audioRef.current.src = audioUrl;\n+        audioRef.current.play();\n+      }\n+    } catch (err) {\n+      logger.error('Text-to-speech error', {\n+        error: err,\n+        source: 'LessonPage'\n+      });\n+    }\n+  };\n+\n+  const handlePlayPause = () => {\n+    if (audioRef.current) {\n+      if (isPlaying) {\n+        audioRef.current.pause();\n+      } else {\n+        audioRef.current.play();\n+      }\n+      setIsPlaying(!isPlaying);\n+    }\n+  };\n+\n+  const handleNext = () => {\n+    if (lessonState?.lesson.content) {\n+      const contentParts = lessonState.lesson.content.split('\\n\\n');\n+      setCurrentContentIndex(prev => Math.min(prev + 1, contentParts.length - 1));\n+    }\n+  };\n+\n+  const handlePrevious = () => {\n+    setCurrentContentIndex(prev => Math.max(prev - 1, 0));\n+  };\n+\n   if (isLoading) {\n     forceLog('Rendering loading state');\n     return (\n       <div className=\"flex items-center justify-center min-h-screen\">\n@@ -1381,9 +1454,9 @@\n         </LogElement>\n \n         <LogElement name=\"Main Content Area\">\n           <main className=\"pt-24 pb-8 px-4 md:px-8 max-w-7xl mx-auto\">\n-            <div className=\"grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-8\">\n+            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n               <LogElement name=\"Sidebar\">\n                 <div className=\"lg:block\">\n                   <Card className=\"sticky top-24\">\n                     <CardHeader>\n@@ -1449,141 +1522,176 @@\n               </LogElement>\n               \n               <LogElement name=\"Content Tabs and Navigation\">\n                 <div className=\"space-y-8\">\n-                  <Tabs defaultValue=\"question\" className=\"w-full\">\n+                  <Tabs defaultValue=\"content\" className=\"w-full\">\n                     <TabsList className=\"mb-4\">\n-                      <TabsTrigger value=\"question\">Question</TabsTrigger>\n-                      <TabsTrigger value=\"teacherScript\">Teacher Script</TabsTrigger>\n-                      <TabsTrigger value=\"activities\">Activities</TabsTrigger>\n+                      <TabsTrigger value=\"content\">Content</TabsTrigger>\n+                      <TabsTrigger value=\"questions\">Questions</TabsTrigger>\n+                      <TabsTrigger value=\"exercises\">Exercises</TabsTrigger>\n                     </TabsList>\n \n-                    <AnimatePresence mode=\"wait\">\n-                      <motion.div\n-                        key={currentStep}\n-                        initial={{ opacity: 0, y: 20 }}\n-                        animate={{ opacity: 1, y: 0 }}\n-                        exit={{ opacity: 0, y: -20 }}\n-                        transition={{ duration: 0.3 }}\n-                      >\n-                        <TabsContent value=\"question\">\n-                          <Card>\n-                            <CardHeader>\n-                              <div className=\"flex items-center justify-between\">\n-                                <Badge variant=\"outline\" className=\"bg-primary/5\">\n-                                  Question {currentStep + 1} of {totalSteps}\n-                                </Badge>\n-                                <div className=\"flex items-center gap-2\">\n-                                  <LogElement name=\"Icon: Star\">\n-                                    <Star className=\"h-4 w-4 text-yellow-500\" />\n-                                  </LogElement>\n-                                  <span className=\"text-sm\">{currentQuestion.points} Points</span>\n-                                </div>\n-                              </div>\n-                              <LogElement name=\"Question Title Heading\">\n-                                <CardTitle className=\"text-2xl mt-4\">\n-                                  {currentQuestion.title || \"Question\"}\n-                                </CardTitle>\n-                              </LogElement>\n-                            </CardHeader>\n-                            <CardContent className=\"space-y-6\">\n-                              <div className=\"prose prose-sm dark:prose-invert max-w-none\">\n-                                <div className=\"bg-accent/50 p-4 rounded-lg\">\n-                                  <h3 className=\"text-lg font-semibold mb-2\">Prompt</h3>\n-                                  <p>{currentQuestion.data.prompt || currentQuestion.content}</p>\n-                                </div>\n+                    <TabsContent value=\"content\" className=\"mt-4\">\n+                      <Card>\n+                        <CardHeader>\n+                          <CardTitle className=\"text-2xl mt-4\">\n+                            Lesson Content\n+                          </CardTitle>\n+                        </CardHeader>\n+                        <CardContent className=\"space-y-6\">\n+                          <ScrollArea className=\"h-[60vh]\">\n+                            <div className=\"space-y-6\">\n+                              {lessonState.lesson.content?.split('\\n\\n').map((part, index) => (\n+                                <motion.div\n+                                  key={index}\n+                                  initial={{ opacity: 0, y: 20 }}\n+                                  animate={{ opacity: 1, y: 0 }}\n+                                  transition={{ delay: index * 0.1 }}\n+                                  className={cn(\n+                                    \"p-4 rounded-lg transition-colors\",\n+                                    currentContentIndex === index ? \"bg-primary/5\" : \"hover:bg-primary/5\"\n+                                  )}\n+                                >\n+                                  <p className=\"text-lg leading-relaxed\">{part}</p>\n+                                </motion.div>\n+                              ))}\n+                            </div>\n+                          </ScrollArea>\n+                        </CardContent>\n+                      </Card>\n+                    </TabsContent>\n \n-                                {currentQuestion.type === 'multiplechoice' && currentQuestion.metadata?.options && (\n-                                  <div className=\"mt-6 space-y-4\">\n-                                    {currentQuestion.metadata.options.map((option, idx) => (\n-                                      <Button\n-                                        key={idx}\n-                                        variant=\"outline\"\n-                                        className=\"w-full justify-start text-left\"\n-                                      >\n-                                        {option}\n-                                      </Button>\n-                                    ))}\n-                                  </div>\n-                                )}\n+                    <TabsContent value=\"questions\" className=\"mt-4\">\n+                      <Card>\n+                        <CardContent className=\"p-6\">\n+                          <ScrollArea className=\"h-[60vh]\">\n+                            <div className=\"space-y-6\">\n+                              {lessonState.lesson.questions.map((question, index) => (\n+                                <motion.div\n+                                  key={question.id}\n+                                  initial={{ opacity: 0, x: -20 }}\n+                                  animate={{ opacity: 1, x: 0 }}\n+                                  transition={{ delay: index * 0.1 }}\n+                                >\n+                                  <Card>\n+                                    <CardContent className=\"p-4\">\n+                                      <div className=\"flex items-start gap-4\">\n+                                        <div className=\"flex-shrink-0 w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center\">\n+                                          <span className=\"text-primary font-semibold\">\n+                                            {index + 1}\n+                                          </span>\n+                                        </div>\n+                                        <div className=\"flex-1\">\n+                                          <h3 className=\"font-semibold mb-2\">\n+                                            {question.title}\n+                                          </h3>\n+                                          <p className=\"text-muted-foreground\">\n+                                            {question.content}\n+                                          </p>\n+                                          {question.data.options && (\n+                                            <div className=\"mt-4 space-y-2\">\n+                                              {question.data.options.map((option, optionIndex) => (\n+                                                <Button\n+                                                  key={optionIndex}\n+                                                  variant=\"outline\"\n+                                                  className=\"w-full justify-start text-left\"\n+                                                >\n+                                                  {option}\n+                                                </Button>\n+                                              ))}\n+                                            </div>\n+                                          )}\n+                                        </div>\n+                                      </div>\n+                                    </CardContent>\n+                                  </Card>\n+                                </motion.div>\n+                              ))}\n+                            </div>\n+                          </ScrollArea>\n+                        </CardContent>\n+                      </Card>\n+                    </TabsContent>\n \n-                                {currentQuestion.type === 'speaking' && (\n-                                  <div className=\"mt-6\">\n-                                    <Button className=\"w-full justify-center gap-2\">\n-                                      <Mic className=\"h-4 w-4\" />\n-                                      Start Recording\n-                                    </Button>\n-                                  </div>\n-                                )}\n-                              </div>\n-                            </CardContent>\n-                          </Card>\n-                        </TabsContent>\n-\n-                        <TabsContent value=\"teacherScript\">\n-                          <Card>\n-                            <CardContent className=\"p-6\">\n-                              <div className=\"prose prose-sm dark:prose-invert max-w-none\">\n-                                <h3 className=\"text-lg font-semibold mb-4\">Teacher Script</h3>\n-                                <div className=\"bg-accent/50 p-4 rounded-lg\">\n-                                  {currentQuestion.data.teacherScript || \"No teacher script available.\"}\n-                                </div>\n-                              </div>\n-                            </CardContent>\n-                          </Card>\n-                        </TabsContent>\n-\n-                        <TabsContent value=\"activities\">\n-                          <Card>\n-                            <CardContent className=\"p-6\">\n-                              <div className=\"prose prose-sm dark:prose-invert max-w-none\">\n-                                <h3 className=\"text-lg font-semibold mb-4\">Activities</h3>\n-                                {lessonState.lesson.activities?.length > 0 ? (\n-                                  <div className=\"space-y-4\">\n-                                    {lessonState.lesson.activities.map((activity, idx) => (\n-                                      <div key={idx} className=\"bg-accent/50 p-4 rounded-lg\">\n-                                        <h4 className=\"font-medium\">{activity.title}</h4>\n-                                        <p>{activity.description}</p>\n+                    <TabsContent value=\"exercises\" className=\"mt-4\">\n+                      <Card>\n+                        <CardContent className=\"p-6\">\n+                          <ScrollArea className=\"h-[60vh]\">\n+                            <div className=\"space-y-6\">\n+                              {lessonState.lesson.exercise_prompts.map((prompt, index) => (\n+                                <motion.div\n+                                  key={prompt.id}\n+                                  initial={{ opacity: 0, x: 20 }}\n+                                  animate={{ opacity: 1, x: 0 }}\n+                                  transition={{ delay: index * 0.1 }}\n+                                >\n+                                  <Card>\n+                                    <CardContent className=\"p-4\">\n+                                      <div className=\"flex items-start gap-4\">\n+                                        <div className=\"flex-shrink-0 w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center\">\n+                                          <span className=\"text-primary font-semibold\">\n+                                            {index + 1}\n+                                          </span>\n+                                        </div>\n+                                        <div className=\"flex-1\">\n+                                          <div className=\"flex items-center gap-2 mb-2\">\n+                                            <Badge variant=\"outline\">\n+                                              {prompt.difficulty}\n+                                            </Badge>\n+                                            <Badge variant=\"outline\">\n+                                              {prompt.questionType}\n+                                            </Badge>\n+                                          </div>\n+                                          <p className=\"text-lg mb-4\">{prompt.text}</p>\n+                                          {prompt.content.hints.length > 0 && (\n+                                            <div className=\"mt-4\">\n+                                              <Button\n+                                                variant=\"outline\"\n+                                                className=\"text-sm\"\n+                                              >\n+                                                <HelpCircle className=\"h-4 w-4 mr-2\" />\n+                                                Show Hints\n+                                              </Button>\n+                                            </div>\n+                                          )}\n+                                        </div>\n                                       </div>\n-                                    ))}\n-                                  </div>\n-                                ) : (\n-                                  <p>No activities available for this lesson.</p>\n-                                )}\n-                              </div>\n-                            </CardContent>\n-                          </Card>\n-                        </TabsContent>\n-                      </motion.div>\n-                    </AnimatePresence>\n+                                    </CardContent>\n+                                  </Card>\n+                                </motion.div>\n+                              ))}\n+                            </div>\n+                          </ScrollArea>\n+                        </CardContent>\n+                      </Card>\n+                    </TabsContent>\n                   </Tabs>\n \n                   <div className=\"flex items-center justify-between pt-4\">\n                     <Button\n                       variant=\"outline\"\n-                      onClick={() => setCurrentStep(prev => Math.max(0, prev - 1))}\n-                      disabled={currentStep === 0}\n+                      onClick={() => setCurrentContentIndex(prev => Math.max(0, prev - 1))}\n+                      disabled={currentContentIndex === 0}\n                     >\n                       <LogElement name=\"Button: Previous\">\n-                        <ArrowLeft className=\"h-4 w-4 mr-2\" />\n+                        <SkipBack className=\"h-4 w-4 mr-2\" />\n                         Previous\n                       </LogElement>\n                     </Button>\n                     <Button\n                       onClick={() => {\n-                        if (currentStep < totalSteps - 1) {\n-                          setCurrentStep(prev => prev + 1);\n-                          setProgress(prev => prev + (100 / totalSteps));\n+                        if (currentContentIndex < lessonState.lesson.content?.split('\\n\\n').length - 1) {\n+                          setCurrentContentIndex(prev => prev + 1);\n                         } else {\n                           handleEndLesson();\n                         }\n                       }}\n                     >\n-                      <LogElement name={currentStep < totalSteps - 1 ? \"Button: Next\" : \"Button: Complete Lesson\"}>\n-                        {currentStep < totalSteps - 1 ? (\n+                      <LogElement name={currentContentIndex < lessonState.lesson.content?.split('\\n\\n').length - 1 ? \"Button: Next\" : \"Button: Complete Lesson\"}>\n+                        {currentContentIndex < lessonState.lesson.content?.split('\\n\\n').length - 1 ? (\n                           <>\n                             Next\n-                            <ArrowLeft className=\"h-4 w-4 ml-2 rotate-180\" />\n+                            <SkipForward className=\"h-4 w-4 ml-2\" />\n                           </>\n                         ) : (\n                           <>\n                             Complete Lesson\n"
                },
                {
                    "date": 1739393557293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1712 +0,0 @@\n-\"use client\";\n-\n-import React, { useState, useEffect, useCallback, useRef } from 'react';\n-import { useLocation, useNavigate, useParams, useSearchParams } from 'react-router-dom';\n-import { motion, AnimatePresence } from 'framer-motion';\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n-import { Button } from \"@/components/ui/button\";\n-import { Progress } from \"@/components/ui/progress\";\n-import { Badge } from \"@/components/ui/badge\";\n-import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n-import { ScrollArea } from \"@/components/ui/scroll-area\";\n-import { \n-  ArrowLeft, BookOpen, CheckCircle2, Clock, Flag, \n-  HelpCircle, Layout, List, Play, Settings, Star, \n-  X, Mic, PenTool, FileText, \n-  Pause, SkipBack, SkipForward, Volume2, VolumeX, ChevronLeft, ChevronRight, Image as ImageIcon, Video, AlertCircle\n-} from \"lucide-react\";\n-import { cn } from \"@/lib/utils\";\n-import { supabase } from \"@/lib/supabase\";\n-import { Question, Activity, ExercisePrompt } from \"@/types\";\n-import { useAuth } from '@/hooks/useAuth';\n-import LessonErrorBoundary from '@/components/LessonErrorBoundary';\n-import LoadingSpinner from '@/components/LoadingSpinner';\n-import { logger } from '@/lib/logger';\n-\n-// Enhanced component logger with detailed context\n-const componentLogger = {\n-  info: (message: string, data?: any) => {\n-    logger.info(message, { \n-      source: 'LessonPage', \n-      context: {\n-        ...data,\n-        timestamp: new Date().toISOString(),\n-        url: window.location.href,\n-        pathname: window.location.pathname\n-      }\n-    });\n-  },\n-  error: (message: string, error?: any) => {\n-    logger.error(message, { \n-      source: 'LessonPage', \n-      context: {\n-        error,\n-        timestamp: new Date().toISOString(),\n-        url: window.location.href,\n-        pathname: window.location.pathname,\n-        stack: error?.stack\n-      }\n-    });\n-  },\n-  warn: (message: string, data?: any) => {\n-    logger.warn(message, { \n-      source: 'LessonPage', \n-      context: {\n-        ...data,\n-        timestamp: new Date().toISOString(),\n-        url: window.location.href,\n-        pathname: window.location.pathname\n-      }\n-    });\n-  },\n-  debug: (message: string, data?: any) => {\n-    if (DEBUG) {\n-      logger.debug(message, { \n-        source: 'LessonPage', \n-        context: {\n-          ...data,\n-          timestamp: new Date().toISOString(),\n-          url: window.location.href,\n-          pathname: window.location.pathname\n-        }\n-      });\n-    }\n-  }\n-};\n-\n-// Remove duplicate DEBUG configuration\n-const DEBUG = process.env.NODE_ENV === 'development';\n-\n-// Performance monitoring\n-const PAGE_START_TIME = performance.now();\n-let isComponentMounted = false;\n-\n-// Add performance markers\n-performance.mark('lessonPage-start');\n-\n-// Enhanced error handler\n-window.onerror = function(msg, url, lineNo, columnNo, error) {\n-  componentLogger.error('Global error caught', { \n-    msg, \n-    url, \n-    lineNo, \n-    columnNo, \n-    error,\n-    isComponentMounted,\n-    timeSinceStart: performance.now() - PAGE_START_TIME\n-  });\n-  return false;\n-};\n-\n-// Add unhandled rejection handler\n-window.onunhandledrejection = function(event) {\n-  componentLogger.error('Unhandled promise rejection', {\n-    reason: event.reason,\n-    isComponentMounted,\n-    timeSinceStart: performance.now() - PAGE_START_TIME\n-  });\n-};\n-\n-// Global error handler\n-window.onload = function() {\n-  componentLogger.info('Lesson page loaded', {\n-    url: window.location.href,\n-    localStorage: Object.keys(localStorage)\n-  });\n-};\n-\n-// Enhanced logging utility\n-const forceLog = (message: string, data?: any, type: 'info' | 'warn' | 'error' = 'info') => {\n-  if (!DEBUG) return;\n-  \n-  const timestamp = new Date().toISOString();\n-  const logEntry = {\n-    timestamp,\n-    message,\n-    data,\n-    type,\n-    url: window.location.href,\n-    pathname: window.location.pathname,\n-    search: window.location.search,\n-    timeSinceStart: performance.now() - PAGE_START_TIME,\n-    isComponentMounted\n-  };\n-  \n-  // Console logging with visual distinction\n-  const styles = {\n-    info: 'color: #4CAF50; font-weight: bold;',\n-    warn: 'color: #FFC107; font-weight: bold;',\n-    error: 'color: #F44336; font-weight: bold;'\n-  };\n-  \n-  console.log(`%c[${timestamp}] ${message}`, styles[type]);\n-  if (data) {\n-    console.log('Data:', data);\n-    if (typeof data === 'object') {\n-      console.table(data);\n-    }\n-  }\n-};\n-\n-// Update LessonState interface to match database schema\n-interface LessonState {\n-  lesson: {\n-    id: string;\n-    title: string;\n-    content: string | null;\n-    description: string | null;\n-    topic_id: string | null;\n-    subtopic_id: string;\n-    order_index: number | null;\n-    duration: number | null;\n-    status: 'draft' | 'published';\n-    created_at: string;\n-    updated_at: string;\n-    contentheading: string | null;\n-    user_id: string | null;\n-    voice_id: string | null;\n-    questions: Array<{\n-      id: string;\n-      title: string;\n-      content: string;\n-      type: string;\n-      points: number;\n-      lesson_id: string;\n-      order_index: number | null;\n-      created_at: string;\n-      updated_at: string;\n-      status: 'draft' | 'published';\n-      data: {\n-        prompt?: string;\n-        teacherScript?: string;\n-        options?: string[];\n-        metadata?: {\n-          sampleAnswer?: string;\n-          correct?: string[];\n-          options?: string[];\n-          audioContent?: string;\n-          transcript?: string;\n-          keywords?: string[];\n-          hints?: string[];\n-          imageUrl?: string;\n-          videoUrl?: string;\n-        };\n-      };\n-    }>;\n-    activities: Array<{\n-      id: string;\n-      title: string;\n-      description: string | null;\n-      type: string;\n-      content: string | null;\n-      lesson_id: string;\n-      duration: number | null;\n-      created_at: string;\n-      updated_at: string;\n-      name: string;\n-      instructions: string | null;\n-      data: {\n-        prompt: string;\n-        teacherScript: string;\n-        media: string[];\n-      };\n-      media: Array<{\n-        url: string;\n-        type: 'image' | 'gif' | 'video';\n-      }>;\n-    }>;\n-    exercise_prompts: Array<{\n-      id: string;\n-      text: string;\n-      media: string | null;\n-      type: 'image' | 'gif' | 'video';\n-      narration: string | null;\n-      saytext: string | null;\n-      question_id: string | null;\n-      correct: boolean | null;\n-      created_at: string;\n-      updated_at: string;\n-      contentId: string;\n-      questionType: 'multiple-choice' | 'fill-blank' | 'matching' | 'drag-drop' | 'speaking' | 'listening' | 'writing' | 'translation';\n-      difficulty: 'beginner' | 'intermediate' | 'advanced';\n-      content: {\n-        question?: string;\n-        options?: string[];\n-        correctAnswer?: string;\n-        pairs?: Record<string, string>;\n-        correctOrder?: string[];\n-        imageUrl?: string;\n-        audioUrl?: string;\n-        instructions: string;\n-        hints: string[];\n-      };\n-      metadata: {\n-        targetSkills: string[];\n-        prerequisites: string[];\n-        learningObjectives: string[];\n-        estimatedTime: number;\n-      };\n-      adaptiveSettings: {\n-        progressionRules: {\n-          minScore: number;\n-          requiredAttempts: number;\n-        };\n-        difficultyAdjustment: {\n-          increase: number;\n-          decrease: number;\n-        };\n-      };\n-    }>;\n-  };\n-  topic: {\n-    id: string;\n-    title: string;\n-    description: string | null;\n-    grade_id: string;\n-    order_index: number | null;\n-    created_at: string;\n-    updated_at: string;\n-  };\n-  subtopic: {\n-    id: string;\n-    title: string;\n-    description: string | null;\n-    topic_id: string;\n-    order_index: number | null;\n-    created_at: string;\n-    updated_at: string;\n-  };\n-}\n-\n-// Update DbActivity interface\n-interface DbActivity {\n-  id: string;\n-  title: string;\n-  description: string | null;\n-  type: string;\n-  content: string | null;\n-  lesson_id: string;\n-  duration: number | null;\n-  created_at: string;\n-  updated_at: string;\n-  name: string;\n-  instructions: string | null;\n-  data: {\n-    prompt: string;\n-    teacherScript: string;\n-    media: string[];\n-  };\n-  media: Array<{\n-    url: string;\n-    type: 'image' | 'gif' | 'video';\n-  }>;\n-}\n-\n-// Update DatabaseLessonResponse interface\n-interface DatabaseLessonResponse {\n-  data: {\n-    id: string;\n-    title: string;\n-    content: string | null;\n-    description: string | null;\n-    topic_id: string | null;\n-    subtopic_id: string;\n-    order_index: number | null;\n-    duration: number | null;\n-    status: 'draft' | 'published';\n-    created_at: string;\n-    updated_at: string;\n-    contentheading: string | null;\n-    user_id: string | null;\n-    voice_id: string | null;\n-    questions: Array<{\n-      id: string;\n-      title: string;\n-      content: string;\n-      type: string;\n-      points: number;\n-      lesson_id: string;\n-      order_index: number | null;\n-      created_at: string;\n-      updated_at: string;\n-      status: 'draft' | 'published';\n-      data: Record<string, any>;\n-    }>;\n-    activities: DbActivity[];\n-    exercise_prompts: DbExercisePrompt[];\n-  } | null;\n-  error: Error | null;\n-}\n-\n-// Add URL validation helper\n-const validateUrl = (params: any, searchParams: URLSearchParams) => {\n-  const validation = {\n-    topicId: searchParams.get('topicId'),\n-    subtopicId: searchParams.get('subtopicId'),\n-    lessonId: params?.lessonId,\n-    isValid: false,\n-    missingParams: [] as string[]\n-  };\n-\n-  if (!validation.lessonId) validation.missingParams.push('lessonId');\n-  if (!validation.topicId) validation.missingParams.push('topicId');\n-  if (!validation.subtopicId) validation.missingParams.push('subtopicId');\n-\n-  validation.isValid = validation.missingParams.length === 0;\n-  return validation;\n-};\n-\n-// Add this type guard function\n-const isValidString = (value: any): value is string => {\n-  return typeof value === 'string' && value.length > 0;\n-};\n-\n-// Update the RouteParams interface\n-interface RouteParams {\n-  [key: string]: string | undefined;\n-  lessonId?: string;\n-}\n-\n-const MAX_AUTH_RETRIES = 3;\n-const AUTH_RETRY_DELAY = 1000;\n-\n-const DEBUG_MODE = true;\n-const AUTH_CHECK_INTERVAL = 1000; // 1 second\n-\n-// Add this function at the top level\n-const debugLog = (message: string, data?: any) => {\n-  if (!DEBUG_MODE) return;\n-  const timestamp = new Date().toISOString();\n-  console.log(`[${timestamp}] [LessonPage] ${message}`, data ? data : '');\n-};\n-\n-// Add these utility functions at the top of the file\n-const getInstanceData = (searchParams: URLSearchParams) => {\n-  return {\n-    instanceId: searchParams.get('instanceId'),\n-    stateKey: searchParams.get('stateKey'),\n-    authStateKey: searchParams.get('authStateKey')\n-  };\n-};\n-\n-// Add this type at the top with other interfaces\n-interface AuthState {\n-  session: {\n-    access_token: string;\n-    refresh_token: string;\n-    user: {\n-      id: string;\n-    };\n-  };\n-  instanceId: string;\n-  timestamp: string;\n-}\n-\n-const restoreAuthState = async (authStateKey: string | null): Promise<boolean> => {\n-  if (!authStateKey) {\n-    forceLog('[Auth] No auth state key provided', null, 'error');\n-    return false;\n-  }\n-\n-  try {\n-    const storedAuth = localStorage.getItem(authStateKey);\n-    if (!storedAuth) {\n-      forceLog('[Auth] No stored auth state found', { authStateKey }, 'error');\n-      return false;\n-    }\n-\n-    const authState = JSON.parse(storedAuth);\n-    forceLog('[Auth] Restoring auth state', { \n-      instanceId: authState.instanceId,\n-      timestamp: authState.timestamp\n-    });\n-\n-    // First try to get current session\n-    const { data: { session: currentSession } } = await supabase.auth.getSession();\n-    \n-    if (currentSession?.access_token === authState.session.access_token) {\n-      forceLog('[Auth] Session already active and matching');\n-      return true;\n-    }\n-\n-    // Set the session\n-    const { data, error } = await supabase.auth.setSession({\n-      access_token: authState.session.access_token,\n-      refresh_token: authState.session.refresh_token\n-    });\n-\n-    if (error) {\n-      forceLog('[Auth] Failed to restore session', error, 'error');\n-      return false;\n-    }\n-\n-    forceLog('[Auth] Session restored successfully', {\n-      userId: data.session?.user.id,\n-      expiresAt: data.session?.expires_at\n-    });\n-\n-    // Add message listener for parent window communication\n-    window.addEventListener('message', (event) => {\n-      if (event.data.type === 'AUTH_STATE') {\n-        forceLog('[Auth] Received auth state from parent');\n-        const newAuthState = event.data.payload;\n-        localStorage.setItem(authStateKey, JSON.stringify(newAuthState));\n-      }\n-    });\n-\n-    // Notify parent window we're ready\n-    window.opener?.postMessage({ type: 'LESSON_WINDOW_READY' }, '*');\n-\n-    return true;\n-  } catch (error) {\n-    forceLog('[Auth] Error initializing auth', error, 'error');\n-    return false;\n-  }\n-};\n-\n-// Add this function at the top of the lesson page component\n-const initializeAuth = async (authStateKey: string): Promise<boolean> => {\n-  let retryCount = 0;\n-  const maxRetries = 3;\n-\n-  while (retryCount < maxRetries) {\n-    try {\n-      const storedAuth = localStorage.getItem(authStateKey);\n-      if (!storedAuth) {\n-        forceLog('[Auth] No stored auth state found', { authStateKey, attempt: retryCount + 1 }, 'error');\n-        throw new Error('No stored auth state found');\n-      }\n-\n-      const authState = JSON.parse(storedAuth) as AuthState;\n-      forceLog('[Auth] Restoring auth state', { \n-        instanceId: authState.instanceId,\n-        timestamp: authState.timestamp,\n-        attempt: retryCount + 1\n-      });\n-\n-      // First try to get current session\n-      const { data: { session } } = await supabase.auth.getSession();\n-      \n-      if (session?.access_token === authState.session.access_token) {\n-        forceLog('[Auth] Session already active and matching', {\n-          userId: session.user.id,\n-          attempt: retryCount + 1\n-        });\n-        return true;\n-      }\n-\n-      // Set the session\n-      const { data, error } = await supabase.auth.setSession({\n-        access_token: authState.session.access_token,\n-        refresh_token: authState.session.refresh_token\n-      });\n-\n-      if (error || !data.session) {\n-        throw error || new Error('Failed to restore session');\n-      }\n-\n-      forceLog('[Auth] Session restored successfully', {\n-        userId: data.session.user.id,\n-        expiresAt: data.session.expires_at,\n-        attempt: retryCount + 1\n-      });\n-\n-      // Add message listener for parent window communication\n-      window.addEventListener('message', (event) => {\n-        if (event.data.type === 'AUTH_STATE') {\n-          forceLog('[Auth] Received auth state from parent');\n-          const newAuthState = event.data.payload as AuthState;\n-          localStorage.setItem(authStateKey, JSON.stringify({\n-            ...newAuthState,\n-            lastUpdated: new Date().toISOString()\n-          }));\n-        }\n-      });\n-\n-      // Notify parent window we're ready\n-      window.opener?.postMessage({ \n-        type: 'LESSON_WINDOW_READY',\n-        payload: {\n-          userId: data.session.user.id,\n-          timestamp: new Date().toISOString()\n-        }\n-      }, '*');\n-\n-      return true;\n-    } catch (error) {\n-      forceLog('[Auth] Error initializing auth', { \n-        error, \n-        attempt: retryCount + 1,\n-        remainingRetries: maxRetries - retryCount - 1\n-      }, 'error');\n-      \n-      retryCount++;\n-      if (retryCount < maxRetries) {\n-        await new Promise(resolve => setTimeout(resolve, 1000 * retryCount)); // Exponential backoff\n-        continue;\n-      }\n-      return false;\n-    }\n-  }\n-  return false;\n-};\n-\n-// Let's add a more robust logging utility at the top of the file\n-const createLogger = (component: string) => ({\n-  info: (message: string, data?: any) => {\n-    forceLog(`[${component}] ${message}`, data, 'info');\n-  },\n-  error: (message: string, error?: any) => {\n-    forceLog(`[${component}] ${message}`, error, 'error');\n-  },\n-  warn: (message: string, data?: any) => {\n-    forceLog(`[${component}] ${message}`, data, 'warn');\n-  }\n-});\n-\n-const logger1 = createLogger('LessonPage');\n-\n-// Update the mapping functions\n-const mapDbActivityToActivity = (dbActivity: DbActivity): Activity => {\n-  const activity: Activity = {\n-    id: dbActivity.id,\n-    lesson_id: dbActivity.lesson_id,\n-    title: dbActivity.title,\n-    type: dbActivity.type,\n-    name: dbActivity.name,\n-    data: {\n-      prompt: '',\n-      teacherScript: '',\n-      media: []\n-    }\n-  };\n-\n-  // Add optional fields\n-  if (dbActivity.created_at) activity.created_at = dbActivity.created_at;\n-  if (dbActivity.duration) activity.duration = dbActivity.duration;\n-  if (dbActivity.description) activity.description = dbActivity.description;\n-  if (dbActivity.content) activity.content = dbActivity.content;\n-  if (dbActivity.updated_at) activity.updated_at = dbActivity.updated_at;\n-  if (dbActivity.instructions) activity.instructions = dbActivity.instructions;\n-  if (dbActivity.data) {\n-    activity.data = {\n-      prompt: dbActivity.data.prompt || '',\n-      teacherScript: dbActivity.data.teacherScript || '',\n-      media: dbActivity.data.media || []\n-    };\n-  }\n-\n-  if (dbActivity.media) {\n-    activity.media = dbActivity.media;\n-  }\n-\n-  return activity;\n-};\n-\n-const mapDbPromptToExercisePrompt = (dbPrompt: DbExercisePrompt): ExercisePrompt => {\n-  const prompt: ExercisePrompt = {\n-    id: dbPrompt.id,\n-    text: dbPrompt.text,\n-    type: dbPrompt.type,\n-    created_at: dbPrompt.created_at,\n-    updated_at: dbPrompt.updated_at,\n-    contentId: dbPrompt.contentId,\n-    questionType: dbPrompt.questionType,\n-    difficulty: dbPrompt.difficulty,\n-    content: {\n-      instructions: dbPrompt.content?.instructions || '',\n-      hints: dbPrompt.content?.hints || []\n-    },\n-    metadata: {\n-      targetSkills: dbPrompt.metadata?.targetSkills || [],\n-      prerequisites: dbPrompt.metadata?.prerequisites || [],\n-      learningObjectives: dbPrompt.metadata?.learningObjectives || [],\n-      estimatedTime: dbPrompt.metadata?.estimatedTime || 0\n-    },\n-    adaptiveSettings: {\n-      progressionRules: {\n-        minScore: dbPrompt.adaptiveSettings?.progressionRules?.minScore || 0,\n-        requiredAttempts: dbPrompt.adaptiveSettings?.progressionRules?.requiredAttempts || 0\n-      },\n-      difficultyAdjustment: {\n-        increase: dbPrompt.adaptiveSettings?.difficultyAdjustment?.increase || 0,\n-        decrease: dbPrompt.adaptiveSettings?.difficultyAdjustment?.decrease || 0\n-      }\n-    },\n-    createdAt: new Date(dbPrompt.created_at),\n-    updatedAt: new Date(dbPrompt.updated_at)\n-  };\n-\n-  // Add optional fields\n-  if (dbPrompt.media) prompt.media = dbPrompt.media;\n-  if (dbPrompt.narration) prompt.narration = dbPrompt.narration;\n-  if (dbPrompt.saytext) prompt.saytext = dbPrompt.saytext;\n-  if (dbPrompt.question_id) prompt.question_id = dbPrompt.question_id;\n-  if (dbPrompt.correct) prompt.correct = dbPrompt.correct;\n-\n-  // Add optional content fields\n-  if (dbPrompt.content?.question) prompt.content.question = dbPrompt.content.question;\n-  if (dbPrompt.content?.options) prompt.content.options = dbPrompt.content.options;\n-  if (dbPrompt.content?.correctAnswer) prompt.content.correctAnswer = dbPrompt.content.correctAnswer;\n-  if (dbPrompt.content?.pairs) prompt.content.pairs = dbPrompt.content.pairs;\n-  if (dbPrompt.content?.correctOrder) prompt.content.correctOrder = dbPrompt.content.correctOrder;\n-  if (dbPrompt.content?.imageUrl) prompt.content.imageUrl = dbPrompt.content.imageUrl;\n-  if (dbPrompt.content?.audioUrl) prompt.content.audioUrl = dbPrompt.content.audioUrl;\n-\n-  return prompt;\n-};\n-\n-// Update the fetchLessonData function\n-const fetchLessonData = async (\n-  lessonId: string,\n-  topicId: string,\n-  subtopicId: string\n-): Promise<LessonState> => {\n-  const startTime = performance.now();\n-  const logger = createLogger('fetchLessonData');\n-  \n-  try {\n-    const [lessonResult, topicResult, subtopicResult] = await Promise.all([\n-      supabase\n-        .from('lessons')\n-        .select(`\n-          id,\n-          title,\n-          name,\n-          content,\n-          description,\n-          topic_id,\n-          subtopic_id,\n-          questions:questions (\n-            id,\n-            title,\n-            content,\n-            type,\n-            data,\n-            metadata,\n-            points\n-          ),\n-          activities:activities (\n-            id,\n-            title,\n-            description,\n-            type,\n-            data,\n-            lesson_id,\n-            name,\n-            created_at,\n-            updated_at,\n-            content,\n-            duration,\n-            instructions,\n-            media\n-          ),\n-          exercise_prompts:exercise_prompts (\n-            id,\n-            text,\n-            media,\n-            type,\n-            narration,\n-            saytext,\n-            question_id,\n-            correct,\n-            created_at,\n-            updated_at,\n-            contentId,\n-            questionType,\n-            difficulty,\n-            content,\n-            metadata,\n-            adaptiveSettings\n-          )\n-        `)\n-        .eq('id', lessonId)\n-        .single(),\n-      \n-      supabase\n-        .from('topics')\n-        .select('id, title')\n-        .eq('id', topicId)\n-        .single(),\n-      \n-      supabase\n-        .from('subtopics')\n-        .select('id, title')\n-        .eq('id', subtopicId)\n-        .single()\n-    ]) as [DatabaseLessonResponse, any, any];\n-\n-    // Validate responses\n-    if (lessonResult.error) throw new Error(`Lesson fetch failed: ${lessonResult.error.message}`);\n-    if (topicResult.error) throw new Error(`Topic fetch failed: ${topicResult.error.message}`);\n-    if (subtopicResult.error) throw new Error(`Subtopic fetch failed: ${subtopicResult.error.message}`);\n-\n-    // Validate required data\n-    if (!lessonResult.data) {\n-      throw new Error('Missing required data from database');\n-    }\n-\n-    // Map activities with required fields\n-    const activities = (lessonResult.data?.activities || []).map((dbActivity) => {\n-      const activity: Activity = {\n-        id: dbActivity.id,\n-        lesson_id: dbActivity.lesson_id,\n-        title: dbActivity.title,\n-        type: dbActivity.type,\n-        name: dbActivity.name,\n-        data: {\n-          prompt: '',\n-          teacherScript: '',\n-          media: []\n-        }\n-      };\n-\n-      // Add optional fields\n-      if (dbActivity.created_at) activity.created_at = dbActivity.created_at;\n-      if (dbActivity.duration) activity.duration = dbActivity.duration;\n-      if (dbActivity.description) activity.description = dbActivity.description;\n-      if (dbActivity.content) activity.content = dbActivity.content;\n-      if (dbActivity.updated_at) activity.updated_at = dbActivity.updated_at;\n-      if (dbActivity.instructions) activity.instructions = dbActivity.instructions;\n-      if (dbActivity.data) {\n-        activity.data = {\n-          prompt: dbActivity.data.prompt || '',\n-          teacherScript: dbActivity.data.teacherScript || '',\n-          media: dbActivity.data.media || []\n-        };\n-      }\n-\n-      if (dbActivity.media) {\n-        activity.media = dbActivity.media;\n-      }\n-\n-      return activity;\n-    });\n-\n-    // Map exercise prompts with required fields\n-    const exercisePrompts = (lessonResult.data?.exercise_prompts || []).map((dbPrompt) => {\n-      const prompt: ExercisePrompt = {\n-        id: dbPrompt.id,\n-        text: dbPrompt.text,\n-        type: dbPrompt.type,\n-        created_at: dbPrompt.created_at,\n-        updated_at: dbPrompt.updated_at,\n-        contentId: dbPrompt.contentId,\n-        questionType: dbPrompt.questionType,\n-        difficulty: dbPrompt.difficulty,\n-        content: {\n-          instructions: dbPrompt.content?.instructions || '',\n-          hints: dbPrompt.content?.hints || []\n-        },\n-        metadata: {\n-          targetSkills: dbPrompt.metadata?.targetSkills || [],\n-          prerequisites: dbPrompt.metadata?.prerequisites || [],\n-          learningObjectives: dbPrompt.metadata?.learningObjectives || [],\n-          estimatedTime: dbPrompt.metadata?.estimatedTime || 0\n-        },\n-        adaptiveSettings: {\n-          progressionRules: {\n-            minScore: dbPrompt.adaptiveSettings?.progressionRules?.minScore || 0,\n-            requiredAttempts: dbPrompt.adaptiveSettings?.progressionRules?.requiredAttempts || 0\n-          },\n-          difficultyAdjustment: {\n-            increase: dbPrompt.adaptiveSettings?.difficultyAdjustment?.increase || 0,\n-            decrease: dbPrompt.adaptiveSettings?.difficultyAdjustment?.decrease || 0\n-          }\n-        },\n-        createdAt: new Date(dbPrompt.created_at),\n-        updatedAt: new Date(dbPrompt.updated_at)\n-      };\n-\n-      // Add optional fields\n-      if (dbPrompt.media) prompt.media = dbPrompt.media;\n-      if (dbPrompt.narration) prompt.narration = dbPrompt.narration;\n-      if (dbPrompt.saytext) prompt.saytext = dbPrompt.saytext;\n-      if (dbPrompt.question_id) prompt.question_id = dbPrompt.question_id;\n-      if (dbPrompt.correct) prompt.correct = dbPrompt.correct;\n-\n-      // Add optional content fields\n-      if (dbPrompt.content?.question) prompt.content.question = dbPrompt.content.question;\n-      if (dbPrompt.content?.options) prompt.content.options = dbPrompt.content.options;\n-      if (dbPrompt.content?.correctAnswer) prompt.content.correctAnswer = dbPrompt.content.correctAnswer;\n-      if (dbPrompt.content?.pairs) prompt.content.pairs = dbPrompt.content.pairs;\n-      if (dbPrompt.content?.correctOrder) prompt.content.correctOrder = dbPrompt.content.correctOrder;\n-      if (dbPrompt.content?.imageUrl) prompt.content.imageUrl = dbPrompt.content.imageUrl;\n-      if (dbPrompt.content?.audioUrl) prompt.content.audioUrl = dbPrompt.content.audioUrl;\n-\n-      return prompt;\n-    });\n-\n-    const lessonState: LessonState = {\n-      lesson: {\n-        ...lessonResult.data,\n-        questions: lessonResult.data.questions || [],\n-        activities,\n-        exercise_prompts: exercisePrompts\n-      },\n-      topic: topicResult.data,\n-      subtopic: subtopicResult.data\n-    };\n-\n-    // Cache the result\n-    const cacheData = {\n-      data: lessonState,\n-      timestamp: Date.now()\n-    };\n-    localStorage.setItem(`lesson_state_${lessonId}`, JSON.stringify(cacheData));\n-\n-    return lessonState;\n-  } catch (error) {\n-    logger.error('Failed to fetch lesson data', {\n-      error,\n-      duration: `${(performance.now() - startTime).toFixed(2)}ms`\n-    });\n-    throw error;\n-  }\n-};\n-\n-// Add this LogElement component after the forceLog definition\n-const LogElement: React.FC<{ name: string; children: React.ReactNode }> = ({ name, children }) => {\n-  useEffect(() => {\n-    componentLogger.debug(`Rendered element: ${name}`);\n-  }, []);\n-  return <>{children}</>;\n-};\n-\n-// Fish Speech Configuration\n-const FISH_SPEECH_CONFIG = {\n-  apiKey: process.env.NEXT_PUBLIC_FISH_SPEECH_API_KEY,\n-  voice: 'en-US-JennyNeural', // Default voice\n-  rate: 1.0,\n-  pitch: 1.0\n-};\n-\n-export default function LessonPage() {\n-  const { user, loading: authLoading } = useAuth();\n-  const location = useLocation();\n-  const navigate = useNavigate();\n-  const [searchParams] = useSearchParams();\n-  const params = useParams();\n-  \n-  // Get lesson data from query parameters\n-  const lessonId = params.lessonId;\n-  const topicId = params.topicId;\n-  const subtopicId = params.subtopicId;\n-  const context = params.context;\n-  \n-  // Parse context if available\n-  const lessonContext = React.useMemo(() => {\n-    try {\n-      return context ? JSON.parse(context) : null;\n-    } catch (error) {\n-      logger.error('Failed to parse lesson context', {\n-        source: 'LessonPage',\n-        context: { error, rawContext: context }\n-      });\n-      return null;\n-    }\n-  }, [context]);\n-  \n-  // Enhanced URL validation and logging\n-  const urlValidation = {\n-    lessonId,\n-    topicId,\n-    subtopicId,\n-    context: lessonContext,\n-    isValid: Boolean(lessonId && topicId && subtopicId),\n-    missingParams: [\n-      !lessonId && 'lessonId',\n-      !topicId && 'topicId',\n-      !subtopicId && 'subtopicId'\n-    ].filter(Boolean) as string[]\n-  };\n-  \n-  logger.info('Lesson page mounted', {\n-    source: 'LessonPage',\n-    context: {\n-      validation: urlValidation,\n-      auth: {\n-        isLoading: authLoading,\n-        hasUser: !!user,\n-        userId: user?.id\n-      },\n-      route: {\n-        pathname: location.pathname,\n-        search: location.search\n-      }\n-    }\n-  });\n-\n-  const [lessonState, setLessonState] = useState<LessonState | null>(null);\n-  const [currentStep, setCurrentStep] = useState(0);\n-  const [progress, setProgress] = useState(0);\n-  const [isLoading, setIsLoading] = useState(true);\n-  const [activeTab, setActiveTab] = useState(\"overview\");\n-  const [hasAttemptedLoad, setHasAttemptedLoad] = useState(false);\n-  const [isFullscreen, setIsFullscreen] = useState(false);\n-  const [error, setError] = useState<string | null>(null);\n-  const [navigationAttempted, setNavigationAttempted] = useState(false);\n-  const [performanceMetrics, setPerformanceMetrics] = useState({\n-    initializationTime: 0,\n-    dataLoadTime: 0,\n-    renderCount: 0\n-  });\n-  const [isPlaying, setIsPlaying] = useState(false);\n-  const [currentContentIndex, setCurrentContentIndex] = useState(0);\n-  const [isMuted, setIsMuted] = useState(false);\n-  const audioRef = useRef<HTMLAudioElement | null>(null);\n-\n-  // Function to handle entering fullscreen\n-  const enterFullscreen = async () => {\n-    try {\n-      const element = document.documentElement;\n-      if (element.requestFullscreen) {\n-        // Only attempt fullscreen if we're in a user gesture context\n-        // and the document is not already in fullscreen mode\n-        if (!document.fullscreenElement) {\n-          // Add a try-catch specifically for the requestFullscreen call\n-          try {\n-            await element.requestFullscreen();\n-            forceLog('Entered fullscreen mode successfully');\n-            setIsFullscreen(true);\n-          } catch (err) {\n-            forceLog('Fullscreen request failed (non-critical):', err, 'warn');\n-            // Non-critical error, we can continue without fullscreen\n-          }\n-        }\n-      } else {\n-        forceLog('Fullscreen API not supported', null, 'warn');\n-      }\n-    } catch (error) {\n-      // Log but don't throw - fullscreen is not critical for functionality\n-      forceLog('Error in enterFullscreen:', error, 'warn');\n-    }\n-  };\n-\n-  // Function to handle exiting fullscreen\n-  const exitFullscreen = async () => {\n-    try {\n-      if (document.fullscreenElement && document.exitFullscreen) {\n-        await document.exitFullscreen();\n-      }\n-    } catch (error) {\n-      console.error('Exit fullscreen error:', error);\n-    }\n-  };\n-\n-  // Function to handle navigation back to lessons page\n-  const navigateToLessons = async () => {\n-    try {\n-      if (navigationAttempted) {\n-        forceLog('Navigation already attempted, preventing duplicate');\n-        return;\n-      }\n-      \n-      setNavigationAttempted(true);\n-      forceLog('Attempting navigation to lessons page');\n-      \n-      await exitFullscreen();\n-      \n-      // Small delay to ensure logs are visible\n-      await new Promise(resolve => setTimeout(resolve, 1000));\n-      \n-      // Close the window instead of navigating\n-      window.close();\n-      \n-      // Notify parent window about lesson completion if it exists\n-      if (window.opener) {\n-        window.opener.postMessage({\n-          type: 'LESSON_COMPLETED',\n-          data: {\n-            lessonId,\n-            progress,\n-            timestamp: new Date().toISOString()\n-          }\n-        }, '*');\n-      }\n-      \n-      // Fallback if window.close() doesn't work\n-      if (!window.closed) {\n-        window.location.href = '/app/teacher/lessons';\n-      }\n-    } catch (error) {\n-      forceLog('Navigation error:', error);\n-      setError('Failed to navigate back to lessons page');\n-    }\n-  };\n-\n-  // Update the initialization effect to handle auth state\n-  useEffect(() => {\n-    let isMounted = true;\n-    \n-    const initializeLessonPage = async () => {\n-      componentLogger.info('Initializing lesson page', {\n-        startTime: PAGE_START_TIME,\n-        isComponentMounted\n-      });\n-      \n-      try {\n-        if (authLoading) {\n-          componentLogger.info('Waiting for auth to complete');\n-          return;\n-        }\n-\n-        if (!user) {\n-          componentLogger.error('No authenticated user found');\n-          setError('Authentication required');\n-          return;\n-        }\n-\n-        if (!lessonId || !topicId || !subtopicId) {\n-          componentLogger.error('Missing required parameters', urlValidation);\n-          setError('Invalid lesson parameters');\n-          return;\n-        }\n-\n-        componentLogger.info('Starting page initialization', {\n-          lessonId,\n-          topicId,\n-          subtopicId,\n-          userId: user.id\n-        });\n-\n-        setIsLoading(true);\n-        const lessonData = await fetchLessonData(lessonId, topicId, subtopicId);\n-\n-        if (!isMounted) return;\n-\n-        setLessonState(lessonData);\n-        componentLogger.info('Lesson page initialized successfully', {\n-          duration: performance.now() - PAGE_START_TIME,\n-          isComponentMounted\n-        });\n-\n-        // Notify parent window that lesson is ready\n-        if (window.opener) {\n-          window.opener.postMessage({\n-            type: 'LESSON_INITIALIZED',\n-            data: {\n-              lessonId,\n-              timestamp: new Date().toISOString()\n-            }\n-          }, '*');\n-        }\n-\n-      } catch (error) {\n-        componentLogger.error('Failed to initialize lesson page', {\n-          error,\n-          timeSinceStart: performance.now() - PAGE_START_TIME,\n-          isComponentMounted\n-        });\n-        if (isMounted) {\n-          setError(error instanceof Error ? error.message : 'Failed to initialize lesson');\n-        }\n-      } finally {\n-        if (isMounted) {\n-          setIsLoading(false);\n-          setHasAttemptedLoad(true);\n-        }\n-      }\n-    };\n-\n-    if (!hasAttemptedLoad && !authLoading) {\n-      initializeLessonPage();\n-    }\n-\n-    return () => {\n-      isMounted = false;\n-    };\n-  }, [lessonId, topicId, subtopicId, user, authLoading, hasAttemptedLoad, urlValidation]);\n-\n-  // Show loading state while auth is initializing\n-  if (authLoading) {\n-    return (\n-      <div className=\"flex items-center justify-center min-h-screen\">\n-        <LoadingSpinner message=\"Initializing lesson...\" />\n-      </div>\n-    );\n-  }\n-\n-  // Show error if no authenticated user\n-  if (!authLoading && !user) {\n-    return (\n-      <div className=\"flex items-center justify-center min-h-screen\">\n-        <Card className=\"p-6\">\n-          <CardTitle className=\"text-xl mb-4\">Authentication Required</CardTitle>\n-          <p className=\"text-muted-foreground mb-4\">Please log in to access this lesson.</p>\n-          <Button onClick={() => navigate('/login', { state: { from: location } })}>\n-            Go to Login\n-          </Button>\n-        </Card>\n-      </div>\n-    );\n-  }\n-\n-  // Only navigate away if there's an error and we're not loading\n-  useEffect(() => {\n-    let navigationTimer: NodeJS.Timeout;\n-    \n-    if (error && !isLoading && hasAttemptedLoad && !navigationAttempted) {\n-      forceLog('Error detected, preparing to navigate:', error);\n-      navigationTimer = setTimeout(() => {\n-        forceLog('Executing delayed navigation due to error');\n-        navigateToLessons();\n-      }, 2000); // Give more time for logs to be visible\n-    }\n-    \n-    return () => {\n-      if (navigationTimer) {\n-        clearTimeout(navigationTimer);\n-      }\n-    };\n-  }, [error, isLoading, hasAttemptedLoad, navigationAttempted]);\n-\n-  const handleEndLesson = async () => {\n-    forceLog('End lesson requested');\n-    const confirmed = window.confirm('Are you sure you want to end this lesson?');\n-    if (confirmed) {\n-      forceLog('End lesson confirmed');\n-      // Clean up localStorage before navigating\n-      if (lessonId) {\n-        const storageKey = `lesson_state_${lessonId}`;\n-        forceLog('Removing stored state:', storageKey);\n-        localStorage.removeItem(storageKey);\n-      }\n-      await navigateToLessons();\n-    } else {\n-      forceLog('End lesson cancelled');\n-    }\n-  };\n-\n-  const getQuestionIcon = (type: string) => {\n-    switch (type) {\n-      case 'speaking':\n-        return <Mic className=\"h-4 w-4\" />;\n-      case 'multiplechoice':\n-        return <PenTool className=\"h-4 w-4\" />;\n-      case 'fill_blanks':\n-        return <FileText className=\"h-4 w-4\" />;\n-      default:\n-        return <HelpCircle className=\"h-4 w-4\" />;\n-    }\n-  };\n-\n-  useEffect(() => {\n-    return () => {\n-      // Cleanup function\n-      forceLog('Cleaning up lesson state', {\n-        source: 'LearningPathTeacher',\n-        context: {\n-          timestamp: new Date().toISOString()\n-        }\n-      });\n-      \n-      // Preserve state in sessionStorage before cleanup\n-      if (lessonId) {\n-        const state = {\n-          lessonId,\n-          timestamp: new Date().toISOString()\n-        };\n-        sessionStorage.setItem('lesson_state', JSON.stringify(state));\n-      }\n-    };\n-  }, [lessonId]);\n-\n-  useEffect(() => {\n-    // Try to recover state on mount\n-    const savedState = sessionStorage.getItem('lesson_state');\n-    if (savedState) {\n-      try {\n-        const state = JSON.parse(savedState);\n-        forceLog('Recovering lesson state', {\n-          source: 'LearningPathTeacher',\n-          context: {\n-            savedState: state,\n-            timestamp: new Date().toISOString()\n-          }\n-        });\n-      } catch (error) {\n-        forceLog('Failed to recover lesson state', {\n-          source: 'LearningPathTeacher',\n-          context: { error }\n-        });\n-      }\n-    }\n-  }, []);\n-\n-  const getLessonUrl = useCallback((id: string) => {\n-    const baseUrl = window.location.origin;\n-    const url = new URL(`${baseUrl}/app/teacher/lessons/lesson`);\n-    \n-    // Add necessary query parameters\n-    url.searchParams.set('lessonId', id);\n-    url.searchParams.set('timestamp', Date.now().toString());\n-    \n-    forceLog('Constructed lesson URL', {\n-      source: 'LearningPathTeacher',\n-      context: {\n-        lessonId: id,\n-        url: url.toString(),\n-        baseUrl,\n-        timestamp: new Date().toISOString()\n-      }\n-    });\n-    \n-    return url.toString();\n-  }, []);\n-\n-  useEffect(() => {\n-    setPerformanceMetrics(prev => ({\n-      ...prev,\n-      renderCount: prev.renderCount + 1\n-    }));\n-\n-    componentLogger.info('Component rendered', {\n-      stats: {\n-        renderCount: performanceMetrics.renderCount,\n-        currentStep,\n-        hasLessonState: !!lessonState\n-      }\n-    });\n-  }, [lessonState, currentStep]);\n-\n-  // Log initial render\n-  useEffect(() => {\n-    componentLogger.info('LessonPage component mounted', {\n-      auth: { loading: authLoading, hasUser: !!user },\n-      location: { \n-        pathname: location.pathname,\n-        search: location.search,\n-        state: location.state\n-      },\n-      performance: {\n-        mountTime: performance.now() - PAGE_START_TIME\n-      }\n-    });\n-    \n-    isComponentMounted = true;\n-    performance.mark('lessonPage-mounted');\n-    \n-    return () => {\n-      componentLogger.info('LessonPage component unmounting', {\n-        totalMountedTime: performance.now() - PAGE_START_TIME\n-      });\n-      performance.mark('lessonPage-unmount');\n-      performance.measure('lessonPage-lifecycle', 'lessonPage-start', 'lessonPage-unmount');\n-    };\n-  }, []);\n-\n-  // Log auth state changes\n-  useEffect(() => {\n-    componentLogger.debug('Auth state changed', {\n-      loading: authLoading,\n-      hasUser: !!user,\n-      userId: user?.id\n-    });\n-  }, [user, authLoading]);\n-\n-  // Log URL parameter changes\n-  useEffect(() => {\n-    componentLogger.debug('URL parameters changed', {\n-      search: location.search,\n-      pathname: location.pathname,\n-      state: location.state\n-    });\n-  }, [location]);\n-\n-  // Text-to-speech functions\n-  const speak = async (text: string) => {\n-    try {\n-      // Implementation for Fish Speech API call here\n-      // This is a placeholder - you'll need to implement the actual API call\n-      const response = await fetch('https://api.fishspeech.com/v1/speak', {\n-        method: 'POST',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          'Authorization': `Bearer ${FISH_SPEECH_CONFIG.apiKey}`\n-        },\n-        body: JSON.stringify({\n-          text,\n-          voice: FISH_SPEECH_CONFIG.voice,\n-          rate: FISH_SPEECH_CONFIG.rate,\n-          pitch: FISH_SPEECH_CONFIG.pitch\n-        })\n-      });\n-\n-      if (!response.ok) throw new Error('Failed to generate speech');\n-      \n-      const audioBlob = await response.blob();\n-      const audioUrl = URL.createObjectURL(audioBlob);\n-      \n-      if (audioRef.current) {\n-        audioRef.current.src = audioUrl;\n-        audioRef.current.play();\n-      }\n-    } catch (err) {\n-      logger.error('Text-to-speech error', {\n-        error: err,\n-        source: 'LessonPage'\n-      });\n-    }\n-  };\n-\n-  const handlePlayPause = () => {\n-    if (audioRef.current) {\n-      if (isPlaying) {\n-        audioRef.current.pause();\n-      } else {\n-        audioRef.current.play();\n-      }\n-      setIsPlaying(!isPlaying);\n-    }\n-  };\n-\n-  const handleNext = () => {\n-    if (lessonState?.lesson.content) {\n-      const contentParts = lessonState.lesson.content.split('\\n\\n');\n-      setCurrentContentIndex(prev => Math.min(prev + 1, contentParts.length - 1));\n-    }\n-  };\n-\n-  const handlePrevious = () => {\n-    setCurrentContentIndex(prev => Math.max(prev - 1, 0));\n-  };\n-\n-  if (isLoading) {\n-    forceLog('Rendering loading state');\n-    return (\n-      <div className=\"flex items-center justify-center min-h-screen\">\n-        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n-      </div>\n-    );\n-  }\n-\n-  if (!lessonState) {\n-    forceLog('Rendering error state - no lesson state found');\n-    return (\n-      <div className=\"flex items-center justify-center min-h-screen\">\n-        <Card className=\"p-6\">\n-          <CardTitle className=\"text-xl mb-4\">Lesson not found</CardTitle>\n-          <Button onClick={() => navigateToLessons()}>Go Back</Button>\n-        </Card>\n-      </div>\n-    );\n-  }\n-\n-  forceLog('Rendering lesson page with state:', {\n-    currentStep,\n-    totalSteps: lessonState.lesson.questions.length,\n-    progress\n-  });\n-\n-  const totalSteps = lessonState.lesson.questions.length;\n-  const currentQuestion = lessonState.lesson.questions[currentStep];\n-\n-  return (\n-    <LessonErrorBoundary source=\"LessonPage\">\n-      <div \n-        className=\"min-h-screen bg-background\"\n-        data-testid=\"lesson-page-root\"\n-        onLoad={() => {\n-          componentLogger.debug('Main container loaded');\n-          performance.mark('main-container-loaded');\n-        }}\n-      >\n-        <LogElement name=\"Top Navigation Bar\">\n-          <nav className=\"fixed top-0 left-0 right-0 z-50 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b\">\n-            <div className=\"flex items-center justify-between p-4\">\n-              <div className=\"flex items-center gap-4\">\n-                <Button variant=\"ghost\" size=\"icon\" onClick={handleEndLesson} className=\"hover:bg-accent\">\n-                  <LogElement name=\"Icon: Close (X)\">\n-                    <X className=\"h-5 w-5\" />\n-                  </LogElement>\n-                </Button>\n-                <div>\n-                  <LogElement name=\"Lesson Title Heading\">\n-                    <h1 className=\"text-lg font-semibold\">{lessonState.lesson.title}</h1>\n-                  </LogElement>\n-                  <LogElement name=\"Topic and Subtopic Info\">\n-                    <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n-                      <span>{lessonState.topic.title}</span>\n-                      <span>•</span>\n-                      <span>{lessonState.subtopic.title}</span>\n-                    </div>\n-                  </LogElement>\n-                </div>\n-              </div>\n-              <div className=\"flex items-center gap-4\">\n-                <LogElement name=\"Progress Bar\">\n-                  <Progress value={(currentStep / totalSteps) * 100} className=\"w-40\" />\n-                </LogElement>\n-                <Button variant=\"outline\" onClick={enterFullscreen} className=\"mr-2\">\n-                  <LogElement name=\"Button: Fullscreen\">\n-                    Fullscreen\n-                  </LogElement>\n-                </Button>\n-                <Button variant=\"outline\" onClick={handleEndLesson}>\n-                  <LogElement name=\"Button: End Lesson\">\n-                    End Lesson\n-                  </LogElement>\n-                </Button>\n-              </div>\n-            </div>\n-          </nav>\n-        </LogElement>\n-\n-        <LogElement name=\"Main Content Area\">\n-          <main className=\"pt-24 pb-8 px-4 md:px-8 max-w-7xl mx-auto\">\n-            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n-              <LogElement name=\"Sidebar\">\n-                <div className=\"lg:block\">\n-                  <Card className=\"sticky top-24\">\n-                    <CardHeader>\n-                      <CardTitle className=\"text-lg flex items-center gap-2\">\n-                        <LogElement name=\"Icon: List\">\n-                          <List className=\"h-5 w-5\" />\n-                        </LogElement>\n-                        <LogElement name=\"Sidebar Heading: Lesson Overview\">\n-                          Lesson Overview\n-                        </LogElement>\n-                      </CardTitle>\n-                    </CardHeader>\n-                    <CardContent>\n-                      <div className=\"space-y-4\">\n-                        <div className=\"flex items-center gap-2 text-sm\">\n-                          <Clock className=\"h-4 w-4 text-primary\" />\n-                          <span>{lessonState.lesson.questions.length * 2} minutes</span>\n-                        </div>\n-                        <div className=\"flex items-center gap-2 text-sm\">\n-                          <HelpCircle className=\"h-4 w-4 text-primary\" />\n-                          <span>{lessonState.lesson.questions.length} Questions</span>\n-                        </div>\n-                        <div className=\"flex items-center gap-2 text-sm\">\n-                          <Layout className=\"h-4 w-4 text-primary\" />\n-                          <span>{lessonState.lesson.activities?.length || 0} Activities</span>\n-                        </div>\n-                        \n-                        <div className=\"border-t pt-4 mt-4\">\n-                          <h3 className=\"font-medium mb-3\">Questions</h3>\n-                          <div className=\"space-y-3\">\n-                            {lessonState.lesson.questions.map((question, index) => (\n-                              <motion.div\n-                                key={index}\n-                                initial={{ opacity: 0, x: -20 }}\n-                                animate={{ opacity: 1, x: 0 }}\n-                                transition={{ delay: index * 0.1 }}\n-                                className={cn(\n-                                  \"flex items-center gap-2 p-2 rounded-md transition-all duration-200\",\n-                                  currentStep === index ? \"bg-accent shadow-sm\" : \"hover:bg-accent/50\",\n-                                  index < currentStep && \"text-primary\"\n-                                )}\n-                                onClick={() => setCurrentStep(index)}\n-                                style={{ cursor: 'pointer' }}\n-                              >\n-                                {index < currentStep ? (\n-                                  <CheckCircle2 className=\"h-4 w-4\" />\n-                                ) : (\n-                                  <div className={cn(\n-                                    \"h-4 w-4 rounded-full border\",\n-                                    currentStep === index && \"border-primary\"\n-                                  )} />\n-                                )}\n-                                <span className=\"text-sm\">Question {index + 1}</span>\n-                                {getQuestionIcon(question.type)}\n-                              </motion.div>\n-                            ))}\n-                          </div>\n-                        </div>\n-                      </div>\n-                    </CardContent>\n-                  </Card>\n-                </div>\n-              </LogElement>\n-              \n-              <LogElement name=\"Content Tabs and Navigation\">\n-                <div className=\"space-y-8\">\n-                  <Tabs defaultValue=\"content\" className=\"w-full\">\n-                    <TabsList className=\"mb-4\">\n-                      <TabsTrigger value=\"content\">Content</TabsTrigger>\n-                      <TabsTrigger value=\"questions\">Questions</TabsTrigger>\n-                      <TabsTrigger value=\"exercises\">Exercises</TabsTrigger>\n-                    </TabsList>\n-\n-                    <TabsContent value=\"content\" className=\"mt-4\">\n-                      <Card>\n-                        <CardHeader>\n-                          <CardTitle className=\"text-2xl mt-4\">\n-                            Lesson Content\n-                          </CardTitle>\n-                        </CardHeader>\n-                        <CardContent className=\"space-y-6\">\n-                          <ScrollArea className=\"h-[60vh]\">\n-                            <div className=\"space-y-6\">\n-                              {lessonState.lesson.content?.split('\\n\\n').map((part, index) => (\n-                                <motion.div\n-                                  key={index}\n-                                  initial={{ opacity: 0, y: 20 }}\n-                                  animate={{ opacity: 1, y: 0 }}\n-                                  transition={{ delay: index * 0.1 }}\n-                                  className={cn(\n-                                    \"p-4 rounded-lg transition-colors\",\n-                                    currentContentIndex === index ? \"bg-primary/5\" : \"hover:bg-primary/5\"\n-                                  )}\n-                                >\n-                                  <p className=\"text-lg leading-relaxed\">{part}</p>\n-                                </motion.div>\n-                              ))}\n-                            </div>\n-                          </ScrollArea>\n-                        </CardContent>\n-                      </Card>\n-                    </TabsContent>\n-\n-                    <TabsContent value=\"questions\" className=\"mt-4\">\n-                      <Card>\n-                        <CardContent className=\"p-6\">\n-                          <ScrollArea className=\"h-[60vh]\">\n-                            <div className=\"space-y-6\">\n-                              {lessonState.lesson.questions.map((question, index) => (\n-                                <motion.div\n-                                  key={question.id}\n-                                  initial={{ opacity: 0, x: -20 }}\n-                                  animate={{ opacity: 1, x: 0 }}\n-                                  transition={{ delay: index * 0.1 }}\n-                                >\n-                                  <Card>\n-                                    <CardContent className=\"p-4\">\n-                                      <div className=\"flex items-start gap-4\">\n-                                        <div className=\"flex-shrink-0 w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center\">\n-                                          <span className=\"text-primary font-semibold\">\n-                                            {index + 1}\n-                                          </span>\n-                                        </div>\n-                                        <div className=\"flex-1\">\n-                                          <h3 className=\"font-semibold mb-2\">\n-                                            {question.title}\n-                                          </h3>\n-                                          <p className=\"text-muted-foreground\">\n-                                            {question.content}\n-                                          </p>\n-                                          {question.data.options && (\n-                                            <div className=\"mt-4 space-y-2\">\n-                                              {question.data.options.map((option, optionIndex) => (\n-                                                <Button\n-                                                  key={optionIndex}\n-                                                  variant=\"outline\"\n-                                                  className=\"w-full justify-start text-left\"\n-                                                >\n-                                                  {option}\n-                                                </Button>\n-                                              ))}\n-                                            </div>\n-                                          )}\n-                                        </div>\n-                                      </div>\n-                                    </CardContent>\n-                                  </Card>\n-                                </motion.div>\n-                              ))}\n-                            </div>\n-                          </ScrollArea>\n-                        </CardContent>\n-                      </Card>\n-                    </TabsContent>\n-\n-                    <TabsContent value=\"exercises\" className=\"mt-4\">\n-                      <Card>\n-                        <CardContent className=\"p-6\">\n-                          <ScrollArea className=\"h-[60vh]\">\n-                            <div className=\"space-y-6\">\n-                              {lessonState.lesson.exercise_prompts.map((prompt, index) => (\n-                                <motion.div\n-                                  key={prompt.id}\n-                                  initial={{ opacity: 0, x: 20 }}\n-                                  animate={{ opacity: 1, x: 0 }}\n-                                  transition={{ delay: index * 0.1 }}\n-                                >\n-                                  <Card>\n-                                    <CardContent className=\"p-4\">\n-                                      <div className=\"flex items-start gap-4\">\n-                                        <div className=\"flex-shrink-0 w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center\">\n-                                          <span className=\"text-primary font-semibold\">\n-                                            {index + 1}\n-                                          </span>\n-                                        </div>\n-                                        <div className=\"flex-1\">\n-                                          <div className=\"flex items-center gap-2 mb-2\">\n-                                            <Badge variant=\"outline\">\n-                                              {prompt.difficulty}\n-                                            </Badge>\n-                                            <Badge variant=\"outline\">\n-                                              {prompt.questionType}\n-                                            </Badge>\n-                                          </div>\n-                                          <p className=\"text-lg mb-4\">{prompt.text}</p>\n-                                          {prompt.content.hints.length > 0 && (\n-                                            <div className=\"mt-4\">\n-                                              <Button\n-                                                variant=\"outline\"\n-                                                className=\"text-sm\"\n-                                              >\n-                                                <HelpCircle className=\"h-4 w-4 mr-2\" />\n-                                                Show Hints\n-                                              </Button>\n-                                            </div>\n-                                          )}\n-                                        </div>\n-                                      </div>\n-                                    </CardContent>\n-                                  </Card>\n-                                </motion.div>\n-                              ))}\n-                            </div>\n-                          </ScrollArea>\n-                        </CardContent>\n-                      </Card>\n-                    </TabsContent>\n-                  </Tabs>\n-\n-                  <div className=\"flex items-center justify-between pt-4\">\n-                    <Button\n-                      variant=\"outline\"\n-                      onClick={() => setCurrentContentIndex(prev => Math.max(0, prev - 1))}\n-                      disabled={currentContentIndex === 0}\n-                    >\n-                      <LogElement name=\"Button: Previous\">\n-                        <SkipBack className=\"h-4 w-4 mr-2\" />\n-                        Previous\n-                      </LogElement>\n-                    </Button>\n-                    <Button\n-                      onClick={() => {\n-                        if (currentContentIndex < lessonState.lesson.content?.split('\\n\\n').length - 1) {\n-                          setCurrentContentIndex(prev => prev + 1);\n-                        } else {\n-                          handleEndLesson();\n-                        }\n-                      }}\n-                    >\n-                      <LogElement name={currentContentIndex < lessonState.lesson.content?.split('\\n\\n').length - 1 ? \"Button: Next\" : \"Button: Complete Lesson\"}>\n-                        {currentContentIndex < lessonState.lesson.content?.split('\\n\\n').length - 1 ? (\n-                          <>\n-                            Next\n-                            <SkipForward className=\"h-4 w-4 ml-2\" />\n-                          </>\n-                        ) : (\n-                          <>\n-                            Complete Lesson\n-                            <Flag className=\"h-4 w-4 ml-2\" />\n-                          </>\n-                        )}\n-                      </LogElement>\n-                    </Button>\n-                  </div>\n-                </div>\n-              </LogElement>\n-            </div>\n-          </main>\n-        </LogElement>\n-      </div>\n-    </LessonErrorBoundary>\n-  );\n-} \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739393570901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1604 @@\n+\"use client\";\n+\n+import React, { useState, useEffect, useCallback } from 'react';\n+import { useLocation, useNavigate } from 'react-router-dom';\n+import { motion, AnimatePresence } from 'framer-motion';\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n+import { Button } from \"@/components/ui/button\";\n+import { Progress } from \"@/components/ui/progress\";\n+import { Badge } from \"@/components/ui/badge\";\n+import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n+import { \n+  ArrowLeft, BookOpen, CheckCircle2, Clock, Flag, \n+  HelpCircle, Layout, List, Play, Settings, Star, \n+  X, Mic, PenTool, FileText \n+} from \"lucide-react\";\n+import { cn } from \"@/lib/utils\";\n+import { supabase } from \"@/lib/supabase\";\n+import { Question, Activity, ExercisePrompt } from \"@/types\";\n+import { useAuth } from '@/hooks/useAuth';\n+import LessonErrorBoundary from '@/components/LessonErrorBoundary';\n+import LoadingSpinner from '@/components/LoadingSpinner';\n+import { logger } from '@/lib/logger';\n+\n+// Enhanced component logger with detailed context\n+const componentLogger = {\n+  info: (message: string, data?: any) => {\n+    logger.info(message, { \n+      source: 'LessonPage', \n+      context: {\n+        ...data,\n+        timestamp: new Date().toISOString(),\n+        url: window.location.href,\n+        pathname: window.location.pathname\n+      }\n+    });\n+  },\n+  error: (message: string, error?: any) => {\n+    logger.error(message, { \n+      source: 'LessonPage', \n+      context: {\n+        error,\n+        timestamp: new Date().toISOString(),\n+        url: window.location.href,\n+        pathname: window.location.pathname,\n+        stack: error?.stack\n+      }\n+    });\n+  },\n+  warn: (message: string, data?: any) => {\n+    logger.warn(message, { \n+      source: 'LessonPage', \n+      context: {\n+        ...data,\n+        timestamp: new Date().toISOString(),\n+        url: window.location.href,\n+        pathname: window.location.pathname\n+      }\n+    });\n+  },\n+  debug: (message: string, data?: any) => {\n+    if (DEBUG) {\n+      logger.debug(message, { \n+        source: 'LessonPage', \n+        context: {\n+          ...data,\n+          timestamp: new Date().toISOString(),\n+          url: window.location.href,\n+          pathname: window.location.pathname\n+        }\n+      });\n+    }\n+  }\n+};\n+\n+// Remove duplicate DEBUG configuration\n+const DEBUG = process.env.NODE_ENV === 'development';\n+\n+// Performance monitoring\n+const PAGE_START_TIME = performance.now();\n+let isComponentMounted = false;\n+\n+// Add performance markers\n+performance.mark('lessonPage-start');\n+\n+// Enhanced error handler\n+window.onerror = function(msg, url, lineNo, columnNo, error) {\n+  componentLogger.error('Global error caught', { \n+    msg, \n+    url, \n+    lineNo, \n+    columnNo, \n+    error,\n+    isComponentMounted,\n+    timeSinceStart: performance.now() - PAGE_START_TIME\n+  });\n+  return false;\n+};\n+\n+// Add unhandled rejection handler\n+window.onunhandledrejection = function(event) {\n+  componentLogger.error('Unhandled promise rejection', {\n+    reason: event.reason,\n+    isComponentMounted,\n+    timeSinceStart: performance.now() - PAGE_START_TIME\n+  });\n+};\n+\n+// Global error handler\n+window.onload = function() {\n+  componentLogger.info('Lesson page loaded', {\n+    url: window.location.href,\n+    localStorage: Object.keys(localStorage)\n+  });\n+};\n+\n+// Enhanced logging utility\n+const forceLog = (message: string, data?: any, type: 'info' | 'warn' | 'error' = 'info') => {\n+  if (!DEBUG) return;\n+  \n+  const timestamp = new Date().toISOString();\n+  const logEntry = {\n+    timestamp,\n+    message,\n+    data,\n+    type,\n+    url: window.location.href,\n+    pathname: window.location.pathname,\n+    search: window.location.search,\n+    timeSinceStart: performance.now() - PAGE_START_TIME,\n+    isComponentMounted\n+  };\n+  \n+  // Console logging with visual distinction\n+  const styles = {\n+    info: 'color: #4CAF50; font-weight: bold;',\n+    warn: 'color: #FFC107; font-weight: bold;',\n+    error: 'color: #F44336; font-weight: bold;'\n+  };\n+  \n+  console.log(`%c[${timestamp}] ${message}`, styles[type]);\n+  if (data) {\n+    console.log('Data:', data);\n+    if (typeof data === 'object') {\n+      console.table(data);\n+    }\n+  }\n+};\n+\n+// Update LessonState interface to match database schema\n+interface LessonState {\n+  lesson: {\n+    id: string;\n+    title: string;\n+    content: string | null;\n+    description: string | null;\n+    topic_id: string | null;\n+    subtopic_id: string;\n+    order_index: number | null;\n+    duration: number | null;\n+    status: 'draft' | 'published';\n+    created_at: string;\n+    updated_at: string;\n+    contentheading: string | null;\n+    user_id: string | null;\n+    voice_id: string | null;\n+    questions: Array<{\n+      id: string;\n+      title: string;\n+      content: string;\n+      type: string;\n+      points: number;\n+      lesson_id: string;\n+      order_index: number | null;\n+      created_at: string;\n+      updated_at: string;\n+      status: 'draft' | 'published';\n+      data: {\n+        prompt?: string;\n+        teacherScript?: string;\n+        options?: string[];\n+        metadata?: {\n+          sampleAnswer?: string;\n+          correct?: string[];\n+          options?: string[];\n+          audioContent?: string;\n+          transcript?: string;\n+          keywords?: string[];\n+          hints?: string[];\n+          imageUrl?: string;\n+          videoUrl?: string;\n+        };\n+      };\n+    }>;\n+    activities: Array<{\n+      id: string;\n+      title: string;\n+      description: string | null;\n+      type: string;\n+      content: string | null;\n+      lesson_id: string;\n+      duration: number | null;\n+      created_at: string;\n+      updated_at: string;\n+      name: string;\n+      instructions: string | null;\n+      data: {\n+        prompt: string;\n+        teacherScript: string;\n+        media: string[];\n+      };\n+      media: Array<{\n+        url: string;\n+        type: 'image' | 'gif' | 'video';\n+      }>;\n+    }>;\n+    exercise_prompts: Array<{\n+      id: string;\n+      text: string;\n+      media: string | null;\n+      type: 'image' | 'gif' | 'video';\n+      narration: string | null;\n+      saytext: string | null;\n+      question_id: string | null;\n+      correct: boolean | null;\n+      created_at: string;\n+      updated_at: string;\n+      contentId: string;\n+      questionType: 'multiple-choice' | 'fill-blank' | 'matching' | 'drag-drop' | 'speaking' | 'listening' | 'writing' | 'translation';\n+      difficulty: 'beginner' | 'intermediate' | 'advanced';\n+      content: {\n+        question?: string;\n+        options?: string[];\n+        correctAnswer?: string;\n+        pairs?: Record<string, string>;\n+        correctOrder?: string[];\n+        imageUrl?: string;\n+        audioUrl?: string;\n+        instructions: string;\n+        hints: string[];\n+      };\n+      metadata: {\n+        targetSkills: string[];\n+        prerequisites: string[];\n+        learningObjectives: string[];\n+        estimatedTime: number;\n+      };\n+      adaptiveSettings: {\n+        progressionRules: {\n+          minScore: number;\n+          requiredAttempts: number;\n+        };\n+        difficultyAdjustment: {\n+          increase: number;\n+          decrease: number;\n+        };\n+      };\n+    }>;\n+  };\n+  topic: {\n+    id: string;\n+    title: string;\n+    description: string | null;\n+    grade_id: string;\n+    order_index: number | null;\n+    created_at: string;\n+    updated_at: string;\n+  };\n+  subtopic: {\n+    id: string;\n+    title: string;\n+    description: string | null;\n+    topic_id: string;\n+    order_index: number | null;\n+    created_at: string;\n+    updated_at: string;\n+  };\n+}\n+\n+// Update DbActivity interface\n+interface DbActivity {\n+  id: string;\n+  title: string;\n+  description: string | null;\n+  type: string;\n+  content: string | null;\n+  lesson_id: string;\n+  duration: number | null;\n+  created_at: string;\n+  updated_at: string;\n+  name: string;\n+  instructions: string | null;\n+  data: {\n+    prompt: string;\n+    teacherScript: string;\n+    media: string[];\n+  };\n+  media: Array<{\n+    url: string;\n+    type: 'image' | 'gif' | 'video';\n+  }>;\n+}\n+\n+// Update DatabaseLessonResponse interface\n+interface DatabaseLessonResponse {\n+  data: {\n+    id: string;\n+    title: string;\n+    content: string | null;\n+    description: string | null;\n+    topic_id: string | null;\n+    subtopic_id: string;\n+    order_index: number | null;\n+    duration: number | null;\n+    status: 'draft' | 'published';\n+    created_at: string;\n+    updated_at: string;\n+    contentheading: string | null;\n+    user_id: string | null;\n+    voice_id: string | null;\n+    questions: Array<{\n+      id: string;\n+      title: string;\n+      content: string;\n+      type: string;\n+      points: number;\n+      lesson_id: string;\n+      order_index: number | null;\n+      created_at: string;\n+      updated_at: string;\n+      status: 'draft' | 'published';\n+      data: Record<string, any>;\n+    }>;\n+    activities: DbActivity[];\n+    exercise_prompts: DbExercisePrompt[];\n+  } | null;\n+  error: Error | null;\n+}\n+\n+// Add URL validation helper\n+const validateUrl = (params: any, searchParams: URLSearchParams) => {\n+  const validation = {\n+    topicId: searchParams.get('topicId'),\n+    subtopicId: searchParams.get('subtopicId'),\n+    lessonId: params?.lessonId,\n+    isValid: false,\n+    missingParams: [] as string[]\n+  };\n+\n+  if (!validation.lessonId) validation.missingParams.push('lessonId');\n+  if (!validation.topicId) validation.missingParams.push('topicId');\n+  if (!validation.subtopicId) validation.missingParams.push('subtopicId');\n+\n+  validation.isValid = validation.missingParams.length === 0;\n+  return validation;\n+};\n+\n+// Add this type guard function\n+const isValidString = (value: any): value is string => {\n+  return typeof value === 'string' && value.length > 0;\n+};\n+\n+// Update the RouteParams interface\n+interface RouteParams {\n+  [key: string]: string | undefined;\n+  lessonId?: string;\n+}\n+\n+const MAX_AUTH_RETRIES = 3;\n+const AUTH_RETRY_DELAY = 1000;\n+\n+const DEBUG_MODE = true;\n+const AUTH_CHECK_INTERVAL = 1000; // 1 second\n+\n+// Add this function at the top level\n+const debugLog = (message: string, data?: any) => {\n+  if (!DEBUG_MODE) return;\n+  const timestamp = new Date().toISOString();\n+  console.log(`[${timestamp}] [LessonPage] ${message}`, data ? data : '');\n+};\n+\n+// Add these utility functions at the top of the file\n+const getInstanceData = (searchParams: URLSearchParams) => {\n+  return {\n+    instanceId: searchParams.get('instanceId'),\n+    stateKey: searchParams.get('stateKey'),\n+    authStateKey: searchParams.get('authStateKey')\n+  };\n+};\n+\n+// Add this type at the top with other interfaces\n+interface AuthState {\n+  session: {\n+    access_token: string;\n+    refresh_token: string;\n+    user: {\n+      id: string;\n+    };\n+  };\n+  instanceId: string;\n+  timestamp: string;\n+}\n+\n+const restoreAuthState = async (authStateKey: string | null): Promise<boolean> => {\n+  if (!authStateKey) {\n+    forceLog('[Auth] No auth state key provided', null, 'error');\n+    return false;\n+  }\n+\n+  try {\n+    const storedAuth = localStorage.getItem(authStateKey);\n+    if (!storedAuth) {\n+      forceLog('[Auth] No stored auth state found', { authStateKey }, 'error');\n+      return false;\n+    }\n+\n+    const authState = JSON.parse(storedAuth);\n+    forceLog('[Auth] Restoring auth state', { \n+      instanceId: authState.instanceId,\n+      timestamp: authState.timestamp\n+    });\n+\n+    // First try to get current session\n+    const { data: { session: currentSession } } = await supabase.auth.getSession();\n+    \n+    if (currentSession?.access_token === authState.session.access_token) {\n+      forceLog('[Auth] Session already active and matching');\n+      return true;\n+    }\n+\n+    // Set the session\n+    const { data, error } = await supabase.auth.setSession({\n+      access_token: authState.session.access_token,\n+      refresh_token: authState.session.refresh_token\n+    });\n+\n+    if (error) {\n+      forceLog('[Auth] Failed to restore session', error, 'error');\n+      return false;\n+    }\n+\n+    forceLog('[Auth] Session restored successfully', {\n+      userId: data.session?.user.id,\n+      expiresAt: data.session?.expires_at\n+    });\n+\n+    // Add message listener for parent window communication\n+    window.addEventListener('message', (event) => {\n+      if (event.data.type === 'AUTH_STATE') {\n+        forceLog('[Auth] Received auth state from parent');\n+        const newAuthState = event.data.payload;\n+        localStorage.setItem(authStateKey, JSON.stringify(newAuthState));\n+      }\n+    });\n+\n+    // Notify parent window we're ready\n+    window.opener?.postMessage({ type: 'LESSON_WINDOW_READY' }, '*');\n+\n+    return true;\n+  } catch (error) {\n+    forceLog('[Auth] Error initializing auth', error, 'error');\n+    return false;\n+  }\n+};\n+\n+// Add this function at the top of the lesson page component\n+const initializeAuth = async (authStateKey: string): Promise<boolean> => {\n+  let retryCount = 0;\n+  const maxRetries = 3;\n+\n+  while (retryCount < maxRetries) {\n+    try {\n+      const storedAuth = localStorage.getItem(authStateKey);\n+      if (!storedAuth) {\n+        forceLog('[Auth] No stored auth state found', { authStateKey, attempt: retryCount + 1 }, 'error');\n+        throw new Error('No stored auth state found');\n+      }\n+\n+      const authState = JSON.parse(storedAuth) as AuthState;\n+      forceLog('[Auth] Restoring auth state', { \n+        instanceId: authState.instanceId,\n+        timestamp: authState.timestamp,\n+        attempt: retryCount + 1\n+      });\n+\n+      // First try to get current session\n+      const { data: { session } } = await supabase.auth.getSession();\n+      \n+      if (session?.access_token === authState.session.access_token) {\n+        forceLog('[Auth] Session already active and matching', {\n+          userId: session.user.id,\n+          attempt: retryCount + 1\n+        });\n+        return true;\n+      }\n+\n+      // Set the session\n+      const { data, error } = await supabase.auth.setSession({\n+        access_token: authState.session.access_token,\n+        refresh_token: authState.session.refresh_token\n+      });\n+\n+      if (error || !data.session) {\n+        throw error || new Error('Failed to restore session');\n+      }\n+\n+      forceLog('[Auth] Session restored successfully', {\n+        userId: data.session.user.id,\n+        expiresAt: data.session.expires_at,\n+        attempt: retryCount + 1\n+      });\n+\n+      // Add message listener for parent window communication\n+      window.addEventListener('message', (event) => {\n+        if (event.data.type === 'AUTH_STATE') {\n+          forceLog('[Auth] Received auth state from parent');\n+          const newAuthState = event.data.payload as AuthState;\n+          localStorage.setItem(authStateKey, JSON.stringify({\n+            ...newAuthState,\n+            lastUpdated: new Date().toISOString()\n+          }));\n+        }\n+      });\n+\n+      // Notify parent window we're ready\n+      window.opener?.postMessage({ \n+        type: 'LESSON_WINDOW_READY',\n+        payload: {\n+          userId: data.session.user.id,\n+          timestamp: new Date().toISOString()\n+        }\n+      }, '*');\n+\n+      return true;\n+    } catch (error) {\n+      forceLog('[Auth] Error initializing auth', { \n+        error, \n+        attempt: retryCount + 1,\n+        remainingRetries: maxRetries - retryCount - 1\n+      }, 'error');\n+      \n+      retryCount++;\n+      if (retryCount < maxRetries) {\n+        await new Promise(resolve => setTimeout(resolve, 1000 * retryCount)); // Exponential backoff\n+        continue;\n+      }\n+      return false;\n+    }\n+  }\n+  return false;\n+};\n+\n+// Let's add a more robust logging utility at the top of the file\n+const createLogger = (component: string) => ({\n+  info: (message: string, data?: any) => {\n+    forceLog(`[${component}] ${message}`, data, 'info');\n+  },\n+  error: (message: string, error?: any) => {\n+    forceLog(`[${component}] ${message}`, error, 'error');\n+  },\n+  warn: (message: string, data?: any) => {\n+    forceLog(`[${component}] ${message}`, data, 'warn');\n+  }\n+});\n+\n+const logger1 = createLogger('LessonPage');\n+\n+// Update the mapping functions\n+const mapDbActivityToActivity = (dbActivity: DbActivity): Activity => {\n+  const activity: Activity = {\n+    id: dbActivity.id,\n+    lesson_id: dbActivity.lesson_id,\n+    title: dbActivity.title,\n+    type: dbActivity.type,\n+    name: dbActivity.name,\n+    data: {\n+      prompt: '',\n+      teacherScript: '',\n+      media: []\n+    }\n+  };\n+\n+  // Add optional fields\n+  if (dbActivity.created_at) activity.created_at = dbActivity.created_at;\n+  if (dbActivity.duration) activity.duration = dbActivity.duration;\n+  if (dbActivity.description) activity.description = dbActivity.description;\n+  if (dbActivity.content) activity.content = dbActivity.content;\n+  if (dbActivity.updated_at) activity.updated_at = dbActivity.updated_at;\n+  if (dbActivity.instructions) activity.instructions = dbActivity.instructions;\n+  if (dbActivity.data) {\n+    activity.data = {\n+      prompt: dbActivity.data.prompt || '',\n+      teacherScript: dbActivity.data.teacherScript || '',\n+      media: dbActivity.data.media || []\n+    };\n+  }\n+\n+  if (dbActivity.media) {\n+    activity.media = dbActivity.media;\n+  }\n+\n+  return activity;\n+};\n+\n+const mapDbPromptToExercisePrompt = (dbPrompt: DbExercisePrompt): ExercisePrompt => {\n+  const prompt: ExercisePrompt = {\n+    id: dbPrompt.id,\n+    text: dbPrompt.text,\n+    type: dbPrompt.type,\n+    created_at: dbPrompt.created_at,\n+    updated_at: dbPrompt.updated_at,\n+    contentId: dbPrompt.contentId,\n+    questionType: dbPrompt.questionType,\n+    difficulty: dbPrompt.difficulty,\n+    content: {\n+      instructions: dbPrompt.content?.instructions || '',\n+      hints: dbPrompt.content?.hints || []\n+    },\n+    metadata: {\n+      targetSkills: dbPrompt.metadata?.targetSkills || [],\n+      prerequisites: dbPrompt.metadata?.prerequisites || [],\n+      learningObjectives: dbPrompt.metadata?.learningObjectives || [],\n+      estimatedTime: dbPrompt.metadata?.estimatedTime || 0\n+    },\n+    adaptiveSettings: {\n+      progressionRules: {\n+        minScore: dbPrompt.adaptiveSettings?.progressionRules?.minScore || 0,\n+        requiredAttempts: dbPrompt.adaptiveSettings?.progressionRules?.requiredAttempts || 0\n+      },\n+      difficultyAdjustment: {\n+        increase: dbPrompt.adaptiveSettings?.difficultyAdjustment?.increase || 0,\n+        decrease: dbPrompt.adaptiveSettings?.difficultyAdjustment?.decrease || 0\n+      }\n+    },\n+    createdAt: new Date(dbPrompt.created_at),\n+    updatedAt: new Date(dbPrompt.updated_at)\n+  };\n+\n+  // Add optional fields\n+  if (dbPrompt.media) prompt.media = dbPrompt.media;\n+  if (dbPrompt.narration) prompt.narration = dbPrompt.narration;\n+  if (dbPrompt.saytext) prompt.saytext = dbPrompt.saytext;\n+  if (dbPrompt.question_id) prompt.question_id = dbPrompt.question_id;\n+  if (dbPrompt.correct) prompt.correct = dbPrompt.correct;\n+\n+  // Add optional content fields\n+  if (dbPrompt.content?.question) prompt.content.question = dbPrompt.content.question;\n+  if (dbPrompt.content?.options) prompt.content.options = dbPrompt.content.options;\n+  if (dbPrompt.content?.correctAnswer) prompt.content.correctAnswer = dbPrompt.content.correctAnswer;\n+  if (dbPrompt.content?.pairs) prompt.content.pairs = dbPrompt.content.pairs;\n+  if (dbPrompt.content?.correctOrder) prompt.content.correctOrder = dbPrompt.content.correctOrder;\n+  if (dbPrompt.content?.imageUrl) prompt.content.imageUrl = dbPrompt.content.imageUrl;\n+  if (dbPrompt.content?.audioUrl) prompt.content.audioUrl = dbPrompt.content.audioUrl;\n+\n+  return prompt;\n+};\n+\n+// Update the fetchLessonData function\n+const fetchLessonData = async (\n+  lessonId: string,\n+  topicId: string,\n+  subtopicId: string\n+): Promise<LessonState> => {\n+  const startTime = performance.now();\n+  const logger = createLogger('fetchLessonData');\n+  \n+  try {\n+    const [lessonResult, topicResult, subtopicResult] = await Promise.all([\n+      supabase\n+        .from('lessons')\n+        .select(`\n+          id,\n+          title,\n+          name,\n+          content,\n+          description,\n+          topic_id,\n+          subtopic_id,\n+          questions:questions (\n+            id,\n+            title,\n+            content,\n+            type,\n+            data,\n+            metadata,\n+            points\n+          ),\n+          activities:activities (\n+            id,\n+            title,\n+            description,\n+            type,\n+            data,\n+            lesson_id,\n+            name,\n+            created_at,\n+            updated_at,\n+            content,\n+            duration,\n+            instructions,\n+            media\n+          ),\n+          exercise_prompts:exercise_prompts (\n+            id,\n+            text,\n+            media,\n+            type,\n+            narration,\n+            saytext,\n+            question_id,\n+            correct,\n+            created_at,\n+            updated_at,\n+            contentId,\n+            questionType,\n+            difficulty,\n+            content,\n+            metadata,\n+            adaptiveSettings\n+          )\n+        `)\n+        .eq('id', lessonId)\n+        .single(),\n+      \n+      supabase\n+        .from('topics')\n+        .select('id, title')\n+        .eq('id', topicId)\n+        .single(),\n+      \n+      supabase\n+        .from('subtopics')\n+        .select('id, title')\n+        .eq('id', subtopicId)\n+        .single()\n+    ]) as [DatabaseLessonResponse, any, any];\n+\n+    // Validate responses\n+    if (lessonResult.error) throw new Error(`Lesson fetch failed: ${lessonResult.error.message}`);\n+    if (topicResult.error) throw new Error(`Topic fetch failed: ${topicResult.error.message}`);\n+    if (subtopicResult.error) throw new Error(`Subtopic fetch failed: ${subtopicResult.error.message}`);\n+\n+    // Validate required data\n+    if (!lessonResult.data) {\n+      throw new Error('Missing required data from database');\n+    }\n+\n+    // Map activities with required fields\n+    const activities = (lessonResult.data?.activities || []).map((dbActivity) => {\n+      const activity: Activity = {\n+        id: dbActivity.id,\n+        lesson_id: dbActivity.lesson_id,\n+        title: dbActivity.title,\n+        type: dbActivity.type,\n+        name: dbActivity.name,\n+        data: {\n+          prompt: '',\n+          teacherScript: '',\n+          media: []\n+        }\n+      };\n+\n+      // Add optional fields\n+      if (dbActivity.created_at) activity.created_at = dbActivity.created_at;\n+      if (dbActivity.duration) activity.duration = dbActivity.duration;\n+      if (dbActivity.description) activity.description = dbActivity.description;\n+      if (dbActivity.content) activity.content = dbActivity.content;\n+      if (dbActivity.updated_at) activity.updated_at = dbActivity.updated_at;\n+      if (dbActivity.instructions) activity.instructions = dbActivity.instructions;\n+      if (dbActivity.data) {\n+        activity.data = {\n+          prompt: dbActivity.data.prompt || '',\n+          teacherScript: dbActivity.data.teacherScript || '',\n+          media: dbActivity.data.media || []\n+        };\n+      }\n+\n+      if (dbActivity.media) {\n+        activity.media = dbActivity.media;\n+      }\n+\n+      return activity;\n+    });\n+\n+    // Map exercise prompts with required fields\n+    const exercisePrompts = (lessonResult.data?.exercise_prompts || []).map((dbPrompt) => {\n+      const prompt: ExercisePrompt = {\n+        id: dbPrompt.id,\n+        text: dbPrompt.text,\n+        type: dbPrompt.type,\n+        created_at: dbPrompt.created_at,\n+        updated_at: dbPrompt.updated_at,\n+        contentId: dbPrompt.contentId,\n+        questionType: dbPrompt.questionType,\n+        difficulty: dbPrompt.difficulty,\n+        content: {\n+          instructions: dbPrompt.content?.instructions || '',\n+          hints: dbPrompt.content?.hints || []\n+        },\n+        metadata: {\n+          targetSkills: dbPrompt.metadata?.targetSkills || [],\n+          prerequisites: dbPrompt.metadata?.prerequisites || [],\n+          learningObjectives: dbPrompt.metadata?.learningObjectives || [],\n+          estimatedTime: dbPrompt.metadata?.estimatedTime || 0\n+        },\n+        adaptiveSettings: {\n+          progressionRules: {\n+            minScore: dbPrompt.adaptiveSettings?.progressionRules?.minScore || 0,\n+            requiredAttempts: dbPrompt.adaptiveSettings?.progressionRules?.requiredAttempts || 0\n+          },\n+          difficultyAdjustment: {\n+            increase: dbPrompt.adaptiveSettings?.difficultyAdjustment?.increase || 0,\n+            decrease: dbPrompt.adaptiveSettings?.difficultyAdjustment?.decrease || 0\n+          }\n+        },\n+        createdAt: new Date(dbPrompt.created_at),\n+        updatedAt: new Date(dbPrompt.updated_at)\n+      };\n+\n+      // Add optional fields\n+      if (dbPrompt.media) prompt.media = dbPrompt.media;\n+      if (dbPrompt.narration) prompt.narration = dbPrompt.narration;\n+      if (dbPrompt.saytext) prompt.saytext = dbPrompt.saytext;\n+      if (dbPrompt.question_id) prompt.question_id = dbPrompt.question_id;\n+      if (dbPrompt.correct) prompt.correct = dbPrompt.correct;\n+\n+      // Add optional content fields\n+      if (dbPrompt.content?.question) prompt.content.question = dbPrompt.content.question;\n+      if (dbPrompt.content?.options) prompt.content.options = dbPrompt.content.options;\n+      if (dbPrompt.content?.correctAnswer) prompt.content.correctAnswer = dbPrompt.content.correctAnswer;\n+      if (dbPrompt.content?.pairs) prompt.content.pairs = dbPrompt.content.pairs;\n+      if (dbPrompt.content?.correctOrder) prompt.content.correctOrder = dbPrompt.content.correctOrder;\n+      if (dbPrompt.content?.imageUrl) prompt.content.imageUrl = dbPrompt.content.imageUrl;\n+      if (dbPrompt.content?.audioUrl) prompt.content.audioUrl = dbPrompt.content.audioUrl;\n+\n+      return prompt;\n+    });\n+\n+    const lessonState: LessonState = {\n+      lesson: {\n+        ...lessonResult.data,\n+        questions: lessonResult.data.questions || [],\n+        activities,\n+        exercise_prompts: exercisePrompts\n+      },\n+      topic: topicResult.data,\n+      subtopic: subtopicResult.data\n+    };\n+\n+    // Cache the result\n+    const cacheData = {\n+      data: lessonState,\n+      timestamp: Date.now()\n+    };\n+    localStorage.setItem(`lesson_state_${lessonId}`, JSON.stringify(cacheData));\n+\n+    return lessonState;\n+  } catch (error) {\n+    logger.error('Failed to fetch lesson data', {\n+      error,\n+      duration: `${(performance.now() - startTime).toFixed(2)}ms`\n+    });\n+    throw error;\n+  }\n+};\n+\n+// Add this LogElement component after the forceLog definition\n+const LogElement: React.FC<{ name: string; children: React.ReactNode }> = ({ name, children }) => {\n+  useEffect(() => {\n+    componentLogger.debug(`Rendered element: ${name}`);\n+  }, []);\n+  return <>{children}</>;\n+};\n+\n+export default function LessonPage() {\n+  const { user, loading: authLoading } = useAuth();\n+  const location = useLocation();\n+  const navigate = useNavigate();\n+  const searchParams = new URLSearchParams(window.location.search);\n+  \n+  // Get lesson data from query parameters\n+  const lessonId = searchParams.get('lessonId');\n+  const topicId = searchParams.get('topicId');\n+  const subtopicId = searchParams.get('subtopicId');\n+  const context = searchParams.get('context');\n+  \n+  // Parse context if available\n+  const lessonContext = React.useMemo(() => {\n+    try {\n+      return context ? JSON.parse(context) : null;\n+    } catch (error) {\n+      logger.error('Failed to parse lesson context', {\n+        source: 'LessonPage',\n+        context: { error, rawContext: context }\n+      });\n+      return null;\n+    }\n+  }, [context]);\n+  \n+  // Enhanced URL validation and logging\n+  const urlValidation = {\n+    lessonId,\n+    topicId,\n+    subtopicId,\n+    context: lessonContext,\n+    isValid: Boolean(lessonId && topicId && subtopicId),\n+    missingParams: [\n+      !lessonId && 'lessonId',\n+      !topicId && 'topicId',\n+      !subtopicId && 'subtopicId'\n+    ].filter(Boolean) as string[]\n+  };\n+  \n+  logger.info('Lesson page mounted', {\n+    source: 'LessonPage',\n+    context: {\n+      validation: urlValidation,\n+      auth: {\n+        isLoading: authLoading,\n+        hasUser: !!user,\n+        userId: user?.id\n+      },\n+      route: {\n+        pathname: location.pathname,\n+        search: location.search\n+      }\n+    }\n+  });\n+\n+  const [lessonState, setLessonState] = useState<LessonState | null>(null);\n+  const [currentStep, setCurrentStep] = useState(0);\n+  const [progress, setProgress] = useState(0);\n+  const [isLoading, setIsLoading] = useState(true);\n+  const [activeTab, setActiveTab] = useState(\"overview\");\n+  const [hasAttemptedLoad, setHasAttemptedLoad] = useState(false);\n+  const [isFullscreen, setIsFullscreen] = useState(false);\n+  const [error, setError] = useState<string | null>(null);\n+  const [navigationAttempted, setNavigationAttempted] = useState(false);\n+  const [performanceMetrics, setPerformanceMetrics] = useState({\n+    initializationTime: 0,\n+    dataLoadTime: 0,\n+    renderCount: 0\n+  });\n+\n+  // Function to handle entering fullscreen\n+  const enterFullscreen = async () => {\n+    try {\n+      const element = document.documentElement;\n+      if (element.requestFullscreen) {\n+        // Only attempt fullscreen if we're in a user gesture context\n+        // and the document is not already in fullscreen mode\n+        if (!document.fullscreenElement) {\n+          // Add a try-catch specifically for the requestFullscreen call\n+          try {\n+            await element.requestFullscreen();\n+            forceLog('Entered fullscreen mode successfully');\n+            setIsFullscreen(true);\n+          } catch (err) {\n+            forceLog('Fullscreen request failed (non-critical):', err, 'warn');\n+            // Non-critical error, we can continue without fullscreen\n+          }\n+        }\n+      } else {\n+        forceLog('Fullscreen API not supported', null, 'warn');\n+      }\n+    } catch (error) {\n+      // Log but don't throw - fullscreen is not critical for functionality\n+      forceLog('Error in enterFullscreen:', error, 'warn');\n+    }\n+  };\n+\n+  // Function to handle exiting fullscreen\n+  const exitFullscreen = async () => {\n+    try {\n+      if (document.fullscreenElement && document.exitFullscreen) {\n+        await document.exitFullscreen();\n+      }\n+    } catch (error) {\n+      console.error('Exit fullscreen error:', error);\n+    }\n+  };\n+\n+  // Function to handle navigation back to lessons page\n+  const navigateToLessons = async () => {\n+    try {\n+      if (navigationAttempted) {\n+        forceLog('Navigation already attempted, preventing duplicate');\n+        return;\n+      }\n+      \n+      setNavigationAttempted(true);\n+      forceLog('Attempting navigation to lessons page');\n+      \n+      await exitFullscreen();\n+      \n+      // Small delay to ensure logs are visible\n+      await new Promise(resolve => setTimeout(resolve, 1000));\n+      \n+      // Close the window instead of navigating\n+      window.close();\n+      \n+      // Notify parent window about lesson completion if it exists\n+      if (window.opener) {\n+        window.opener.postMessage({\n+          type: 'LESSON_COMPLETED',\n+          data: {\n+            lessonId,\n+            progress,\n+            timestamp: new Date().toISOString()\n+          }\n+        }, '*');\n+      }\n+      \n+      // Fallback if window.close() doesn't work\n+      if (!window.closed) {\n+        window.location.href = '/app/teacher/lessons';\n+      }\n+    } catch (error) {\n+      forceLog('Navigation error:', error);\n+      setError('Failed to navigate back to lessons page');\n+    }\n+  };\n+\n+  // Update the initialization effect to handle auth state\n+  useEffect(() => {\n+    let isMounted = true;\n+    \n+    const initializeLessonPage = async () => {\n+      componentLogger.info('Initializing lesson page', {\n+        startTime: PAGE_START_TIME,\n+        isComponentMounted\n+      });\n+      \n+      try {\n+        if (authLoading) {\n+          componentLogger.info('Waiting for auth to complete');\n+          return;\n+        }\n+\n+        if (!user) {\n+          componentLogger.error('No authenticated user found');\n+          setError('Authentication required');\n+          return;\n+        }\n+\n+        if (!lessonId || !topicId || !subtopicId) {\n+          componentLogger.error('Missing required parameters', urlValidation);\n+          setError('Invalid lesson parameters');\n+          return;\n+        }\n+\n+        componentLogger.info('Starting page initialization', {\n+          lessonId,\n+          topicId,\n+          subtopicId,\n+          userId: user.id\n+        });\n+\n+        setIsLoading(true);\n+        const lessonData = await fetchLessonData(lessonId, topicId, subtopicId);\n+\n+        if (!isMounted) return;\n+\n+        setLessonState(lessonData);\n+        componentLogger.info('Lesson page initialized successfully', {\n+          duration: performance.now() - PAGE_START_TIME,\n+          isComponentMounted\n+        });\n+\n+        // Notify parent window that lesson is ready\n+        if (window.opener) {\n+          window.opener.postMessage({\n+            type: 'LESSON_INITIALIZED',\n+            data: {\n+              lessonId,\n+              timestamp: new Date().toISOString()\n+            }\n+          }, '*');\n+        }\n+\n+      } catch (error) {\n+        componentLogger.error('Failed to initialize lesson page', {\n+          error,\n+          timeSinceStart: performance.now() - PAGE_START_TIME,\n+          isComponentMounted\n+        });\n+        if (isMounted) {\n+          setError(error instanceof Error ? error.message : 'Failed to initialize lesson');\n+        }\n+      } finally {\n+        if (isMounted) {\n+          setIsLoading(false);\n+          setHasAttemptedLoad(true);\n+        }\n+      }\n+    };\n+\n+    if (!hasAttemptedLoad && !authLoading) {\n+      initializeLessonPage();\n+    }\n+\n+    return () => {\n+      isMounted = false;\n+    };\n+  }, [lessonId, topicId, subtopicId, user, authLoading, hasAttemptedLoad, urlValidation]);\n+\n+  // Show loading state while auth is initializing\n+  if (authLoading) {\n+    return (\n+      <div className=\"flex items-center justify-center min-h-screen\">\n+        <LoadingSpinner message=\"Initializing lesson...\" />\n+      </div>\n+    );\n+  }\n+\n+  // Show error if no authenticated user\n+  if (!authLoading && !user) {\n+    return (\n+      <div className=\"flex items-center justify-center min-h-screen\">\n+        <Card className=\"p-6\">\n+          <CardTitle className=\"text-xl mb-4\">Authentication Required</CardTitle>\n+          <p className=\"text-muted-foreground mb-4\">Please log in to access this lesson.</p>\n+          <Button onClick={() => navigate('/login', { state: { from: location } })}>\n+            Go to Login\n+          </Button>\n+        </Card>\n+      </div>\n+    );\n+  }\n+\n+  // Only navigate away if there's an error and we're not loading\n+  useEffect(() => {\n+    let navigationTimer: NodeJS.Timeout;\n+    \n+    if (error && !isLoading && hasAttemptedLoad && !navigationAttempted) {\n+      forceLog('Error detected, preparing to navigate:', error);\n+      navigationTimer = setTimeout(() => {\n+        forceLog('Executing delayed navigation due to error');\n+        navigateToLessons();\n+      }, 2000); // Give more time for logs to be visible\n+    }\n+    \n+    return () => {\n+      if (navigationTimer) {\n+        clearTimeout(navigationTimer);\n+      }\n+    };\n+  }, [error, isLoading, hasAttemptedLoad, navigationAttempted]);\n+\n+  const handleEndLesson = async () => {\n+    forceLog('End lesson requested');\n+    const confirmed = window.confirm('Are you sure you want to end this lesson?');\n+    if (confirmed) {\n+      forceLog('End lesson confirmed');\n+      // Clean up localStorage before navigating\n+      if (lessonId) {\n+        const storageKey = `lesson_state_${lessonId}`;\n+        forceLog('Removing stored state:', storageKey);\n+        localStorage.removeItem(storageKey);\n+      }\n+      await navigateToLessons();\n+    } else {\n+      forceLog('End lesson cancelled');\n+    }\n+  };\n+\n+  const getQuestionIcon = (type: string) => {\n+    switch (type) {\n+      case 'speaking':\n+        return <Mic className=\"h-4 w-4\" />;\n+      case 'multiplechoice':\n+        return <PenTool className=\"h-4 w-4\" />;\n+      case 'fill_blanks':\n+        return <FileText className=\"h-4 w-4\" />;\n+      default:\n+        return <HelpCircle className=\"h-4 w-4\" />;\n+    }\n+  };\n+\n+  useEffect(() => {\n+    return () => {\n+      // Cleanup function\n+      forceLog('Cleaning up lesson state', {\n+        source: 'LearningPathTeacher',\n+        context: {\n+          timestamp: new Date().toISOString()\n+        }\n+      });\n+      \n+      // Preserve state in sessionStorage before cleanup\n+      if (lessonId) {\n+        const state = {\n+          lessonId,\n+          timestamp: new Date().toISOString()\n+        };\n+        sessionStorage.setItem('lesson_state', JSON.stringify(state));\n+      }\n+    };\n+  }, [lessonId]);\n+\n+  useEffect(() => {\n+    // Try to recover state on mount\n+    const savedState = sessionStorage.getItem('lesson_state');\n+    if (savedState) {\n+      try {\n+        const state = JSON.parse(savedState);\n+        forceLog('Recovering lesson state', {\n+          source: 'LearningPathTeacher',\n+          context: {\n+            savedState: state,\n+            timestamp: new Date().toISOString()\n+          }\n+        });\n+      } catch (error) {\n+        forceLog('Failed to recover lesson state', {\n+          source: 'LearningPathTeacher',\n+          context: { error }\n+        });\n+      }\n+    }\n+  }, []);\n+\n+  const getLessonUrl = useCallback((id: string) => {\n+    const baseUrl = window.location.origin;\n+    const url = new URL(`${baseUrl}/app/teacher/lessons/lesson`);\n+    \n+    // Add necessary query parameters\n+    url.searchParams.set('lessonId', id);\n+    url.searchParams.set('timestamp', Date.now().toString());\n+    \n+    forceLog('Constructed lesson URL', {\n+      source: 'LearningPathTeacher',\n+      context: {\n+        lessonId: id,\n+        url: url.toString(),\n+        baseUrl,\n+        timestamp: new Date().toISOString()\n+      }\n+    });\n+    \n+    return url.toString();\n+  }, []);\n+\n+  useEffect(() => {\n+    setPerformanceMetrics(prev => ({\n+      ...prev,\n+      renderCount: prev.renderCount + 1\n+    }));\n+\n+    componentLogger.info('Component rendered', {\n+      stats: {\n+        renderCount: performanceMetrics.renderCount,\n+        currentStep,\n+        hasLessonState: !!lessonState\n+      }\n+    });\n+  }, [lessonState, currentStep]);\n+\n+  // Log initial render\n+  useEffect(() => {\n+    componentLogger.info('LessonPage component mounted', {\n+      auth: { loading: authLoading, hasUser: !!user },\n+      location: { \n+        pathname: location.pathname,\n+        search: location.search,\n+        state: location.state\n+      },\n+      performance: {\n+        mountTime: performance.now() - PAGE_START_TIME\n+      }\n+    });\n+    \n+    isComponentMounted = true;\n+    performance.mark('lessonPage-mounted');\n+    \n+    return () => {\n+      componentLogger.info('LessonPage component unmounting', {\n+        totalMountedTime: performance.now() - PAGE_START_TIME\n+      });\n+      performance.mark('lessonPage-unmount');\n+      performance.measure('lessonPage-lifecycle', 'lessonPage-start', 'lessonPage-unmount');\n+    };\n+  }, []);\n+\n+  // Log auth state changes\n+  useEffect(() => {\n+    componentLogger.debug('Auth state changed', {\n+      loading: authLoading,\n+      hasUser: !!user,\n+      userId: user?.id\n+    });\n+  }, [user, authLoading]);\n+\n+  // Log URL parameter changes\n+  useEffect(() => {\n+    componentLogger.debug('URL parameters changed', {\n+      search: location.search,\n+      pathname: location.pathname,\n+      state: location.state\n+    });\n+  }, [location]);\n+\n+  if (isLoading) {\n+    forceLog('Rendering loading state');\n+    return (\n+      <div className=\"flex items-center justify-center min-h-screen\">\n+        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n+      </div>\n+    );\n+  }\n+\n+  if (!lessonState) {\n+    forceLog('Rendering error state - no lesson state found');\n+    return (\n+      <div className=\"flex items-center justify-center min-h-screen\">\n+        <Card className=\"p-6\">\n+          <CardTitle className=\"text-xl mb-4\">Lesson not found</CardTitle>\n+          <Button onClick={() => navigateToLessons()}>Go Back</Button>\n+        </Card>\n+      </div>\n+    );\n+  }\n+\n+  forceLog('Rendering lesson page with state:', {\n+    currentStep,\n+    totalSteps: lessonState.lesson.questions.length,\n+    progress\n+  });\n+\n+  const totalSteps = lessonState.lesson.questions.length;\n+  const currentQuestion = lessonState.lesson.questions[currentStep];\n+\n+  return (\n+    <LessonErrorBoundary source=\"LessonPage\">\n+      <div \n+        className=\"min-h-screen bg-background\"\n+        data-testid=\"lesson-page-root\"\n+        onLoad={() => {\n+          componentLogger.debug('Main container loaded');\n+          performance.mark('main-container-loaded');\n+        }}\n+      >\n+        <LogElement name=\"Top Navigation Bar\">\n+          <nav className=\"fixed top-0 left-0 right-0 z-50 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b\">\n+            <div className=\"flex items-center justify-between p-4\">\n+              <div className=\"flex items-center gap-4\">\n+                <Button variant=\"ghost\" size=\"icon\" onClick={handleEndLesson} className=\"hover:bg-accent\">\n+                  <LogElement name=\"Icon: Close (X)\">\n+                    <X className=\"h-5 w-5\" />\n+                  </LogElement>\n+                </Button>\n+                <div>\n+                  <LogElement name=\"Lesson Title Heading\">\n+                    <h1 className=\"text-lg font-semibold\">{lessonState.lesson.title}</h1>\n+                  </LogElement>\n+                  <LogElement name=\"Topic and Subtopic Info\">\n+                    <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n+                      <span>{lessonState.topic.title}</span>\n+                      <span>•</span>\n+                      <span>{lessonState.subtopic.title}</span>\n+                    </div>\n+                  </LogElement>\n+                </div>\n+              </div>\n+              <div className=\"flex items-center gap-4\">\n+                <LogElement name=\"Progress Bar\">\n+                  <Progress value={(currentStep / totalSteps) * 100} className=\"w-40\" />\n+                </LogElement>\n+                <Button variant=\"outline\" onClick={enterFullscreen} className=\"mr-2\">\n+                  <LogElement name=\"Button: Fullscreen\">\n+                    Fullscreen\n+                  </LogElement>\n+                </Button>\n+                <Button variant=\"outline\" onClick={handleEndLesson}>\n+                  <LogElement name=\"Button: End Lesson\">\n+                    End Lesson\n+                  </LogElement>\n+                </Button>\n+              </div>\n+            </div>\n+          </nav>\n+        </LogElement>\n+\n+        <LogElement name=\"Main Content Area\">\n+          <main className=\"pt-24 pb-8 px-4 md:px-8 max-w-7xl mx-auto\">\n+            <div className=\"grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-8\">\n+              <LogElement name=\"Sidebar\">\n+                <div className=\"lg:block\">\n+                  <Card className=\"sticky top-24\">\n+                    <CardHeader>\n+                      <CardTitle className=\"text-lg flex items-center gap-2\">\n+                        <LogElement name=\"Icon: List\">\n+                          <List className=\"h-5 w-5\" />\n+                        </LogElement>\n+                        <LogElement name=\"Sidebar Heading: Lesson Overview\">\n+                          Lesson Overview\n+                        </LogElement>\n+                      </CardTitle>\n+                    </CardHeader>\n+                    <CardContent>\n+                      <div className=\"space-y-4\">\n+                        <div className=\"flex items-center gap-2 text-sm\">\n+                          <Clock className=\"h-4 w-4 text-primary\" />\n+                          <span>{lessonState.lesson.questions.length * 2} minutes</span>\n+                        </div>\n+                        <div className=\"flex items-center gap-2 text-sm\">\n+                          <HelpCircle className=\"h-4 w-4 text-primary\" />\n+                          <span>{lessonState.lesson.questions.length} Questions</span>\n+                        </div>\n+                        <div className=\"flex items-center gap-2 text-sm\">\n+                          <Layout className=\"h-4 w-4 text-primary\" />\n+                          <span>{lessonState.lesson.activities?.length || 0} Activities</span>\n+                        </div>\n+                        \n+                        <div className=\"border-t pt-4 mt-4\">\n+                          <h3 className=\"font-medium mb-3\">Questions</h3>\n+                          <div className=\"space-y-3\">\n+                            {lessonState.lesson.questions.map((question, index) => (\n+                              <motion.div\n+                                key={index}\n+                                initial={{ opacity: 0, x: -20 }}\n+                                animate={{ opacity: 1, x: 0 }}\n+                                transition={{ delay: index * 0.1 }}\n+                                className={cn(\n+                                  \"flex items-center gap-2 p-2 rounded-md transition-all duration-200\",\n+                                  currentStep === index ? \"bg-accent shadow-sm\" : \"hover:bg-accent/50\",\n+                                  index < currentStep && \"text-primary\"\n+                                )}\n+                                onClick={() => setCurrentStep(index)}\n+                                style={{ cursor: 'pointer' }}\n+                              >\n+                                {index < currentStep ? (\n+                                  <CheckCircle2 className=\"h-4 w-4\" />\n+                                ) : (\n+                                  <div className={cn(\n+                                    \"h-4 w-4 rounded-full border\",\n+                                    currentStep === index && \"border-primary\"\n+                                  )} />\n+                                )}\n+                                <span className=\"text-sm\">Question {index + 1}</span>\n+                                {getQuestionIcon(question.type)}\n+                              </motion.div>\n+                            ))}\n+                          </div>\n+                        </div>\n+                      </div>\n+                    </CardContent>\n+                  </Card>\n+                </div>\n+              </LogElement>\n+              \n+              <LogElement name=\"Content Tabs and Navigation\">\n+                <div className=\"space-y-8\">\n+                  <Tabs defaultValue=\"question\" className=\"w-full\">\n+                    <TabsList className=\"mb-4\">\n+                      <TabsTrigger value=\"question\">Question</TabsTrigger>\n+                      <TabsTrigger value=\"teacherScript\">Teacher Script</TabsTrigger>\n+                      <TabsTrigger value=\"activities\">Activities</TabsTrigger>\n+                    </TabsList>\n+\n+                    <AnimatePresence mode=\"wait\">\n+                      <motion.div\n+                        key={currentStep}\n+                        initial={{ opacity: 0, y: 20 }}\n+                        animate={{ opacity: 1, y: 0 }}\n+                        exit={{ opacity: 0, y: -20 }}\n+                        transition={{ duration: 0.3 }}\n+                      >\n+                        <TabsContent value=\"question\">\n+                          <Card>\n+                            <CardHeader>\n+                              <div className=\"flex items-center justify-between\">\n+                                <Badge variant=\"outline\" className=\"bg-primary/5\">\n+                                  Question {currentStep + 1} of {totalSteps}\n+                                </Badge>\n+                                <div className=\"flex items-center gap-2\">\n+                                  <LogElement name=\"Icon: Star\">\n+                                    <Star className=\"h-4 w-4 text-yellow-500\" />\n+                                  </LogElement>\n+                                  <span className=\"text-sm\">{currentQuestion.points} Points</span>\n+                                </div>\n+                              </div>\n+                              <LogElement name=\"Question Title Heading\">\n+                                <CardTitle className=\"text-2xl mt-4\">\n+                                  {currentQuestion.title || \"Question\"}\n+                                </CardTitle>\n+                              </LogElement>\n+                            </CardHeader>\n+                            <CardContent className=\"space-y-6\">\n+                              <div className=\"prose prose-sm dark:prose-invert max-w-none\">\n+                                <div className=\"bg-accent/50 p-4 rounded-lg\">\n+                                  <h3 className=\"text-lg font-semibold mb-2\">Prompt</h3>\n+                                  <p>{currentQuestion.data.prompt || currentQuestion.content}</p>\n+                                </div>\n+\n+                                {currentQuestion.type === 'multiplechoice' && currentQuestion.metadata?.options && (\n+                                  <div className=\"mt-6 space-y-4\">\n+                                    {currentQuestion.metadata.options.map((option, idx) => (\n+                                      <Button\n+                                        key={idx}\n+                                        variant=\"outline\"\n+                                        className=\"w-full justify-start text-left\"\n+                                      >\n+                                        {option}\n+                                      </Button>\n+                                    ))}\n+                                  </div>\n+                                )}\n+\n+                                {currentQuestion.type === 'speaking' && (\n+                                  <div className=\"mt-6\">\n+                                    <Button className=\"w-full justify-center gap-2\">\n+                                      <Mic className=\"h-4 w-4\" />\n+                                      Start Recording\n+                                    </Button>\n+                                  </div>\n+                                )}\n+                              </div>\n+                            </CardContent>\n+                          </Card>\n+                        </TabsContent>\n+\n+                        <TabsContent value=\"teacherScript\">\n+                          <Card>\n+                            <CardContent className=\"p-6\">\n+                              <div className=\"prose prose-sm dark:prose-invert max-w-none\">\n+                                <h3 className=\"text-lg font-semibold mb-4\">Teacher Script</h3>\n+                                <div className=\"bg-accent/50 p-4 rounded-lg\">\n+                                  {currentQuestion.data.teacherScript || \"No teacher script available.\"}\n+                                </div>\n+                              </div>\n+                            </CardContent>\n+                          </Card>\n+                        </TabsContent>\n+\n+                        <TabsContent value=\"activities\">\n+                          <Card>\n+                            <CardContent className=\"p-6\">\n+                              <div className=\"prose prose-sm dark:prose-invert max-w-none\">\n+                                <h3 className=\"text-lg font-semibold mb-4\">Activities</h3>\n+                                {lessonState.lesson.activities?.length > 0 ? (\n+                                  <div className=\"space-y-4\">\n+                                    {lessonState.lesson.activities.map((activity, idx) => (\n+                                      <div key={idx} className=\"bg-accent/50 p-4 rounded-lg\">\n+                                        <h4 className=\"font-medium\">{activity.title}</h4>\n+                                        <p>{activity.description}</p>\n+                                      </div>\n+                                    ))}\n+                                  </div>\n+                                ) : (\n+                                  <p>No activities available for this lesson.</p>\n+                                )}\n+                              </div>\n+                            </CardContent>\n+                          </Card>\n+                        </TabsContent>\n+                      </motion.div>\n+                    </AnimatePresence>\n+                  </Tabs>\n+\n+                  <div className=\"flex items-center justify-between pt-4\">\n+                    <Button\n+                      variant=\"outline\"\n+                      onClick={() => setCurrentStep(prev => Math.max(0, prev - 1))}\n+                      disabled={currentStep === 0}\n+                    >\n+                      <LogElement name=\"Button: Previous\">\n+                        <ArrowLeft className=\"h-4 w-4 mr-2\" />\n+                        Previous\n+                      </LogElement>\n+                    </Button>\n+                    <Button\n+                      onClick={() => {\n+                        if (currentStep < totalSteps - 1) {\n+                          setCurrentStep(prev => prev + 1);\n+                          setProgress(prev => prev + (100 / totalSteps));\n+                        } else {\n+                          handleEndLesson();\n+                        }\n+                      }}\n+                    >\n+                      <LogElement name={currentStep < totalSteps - 1 ? \"Button: Next\" : \"Button: Complete Lesson\"}>\n+                        {currentStep < totalSteps - 1 ? (\n+                          <>\n+                            Next\n+                            <ArrowLeft className=\"h-4 w-4 ml-2 rotate-180\" />\n+                          </>\n+                        ) : (\n+                          <>\n+                            Complete Lesson\n+                            <Flag className=\"h-4 w-4 ml-2\" />\n+                          </>\n+                        )}\n+                      </LogElement>\n+                    </Button>\n+                  </div>\n+                </div>\n+              </LogElement>\n+            </div>\n+          </main>\n+        </LogElement>\n+      </div>\n+    </LessonErrorBoundary>\n+  );\n+} \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739393577302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1604 +0,0 @@\n-\"use client\";\n-\n-import React, { useState, useEffect, useCallback } from 'react';\n-import { useLocation, useNavigate } from 'react-router-dom';\n-import { motion, AnimatePresence } from 'framer-motion';\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n-import { Button } from \"@/components/ui/button\";\n-import { Progress } from \"@/components/ui/progress\";\n-import { Badge } from \"@/components/ui/badge\";\n-import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n-import { \n-  ArrowLeft, BookOpen, CheckCircle2, Clock, Flag, \n-  HelpCircle, Layout, List, Play, Settings, Star, \n-  X, Mic, PenTool, FileText \n-} from \"lucide-react\";\n-import { cn } from \"@/lib/utils\";\n-import { supabase } from \"@/lib/supabase\";\n-import { Question, Activity, ExercisePrompt } from \"@/types\";\n-import { useAuth } from '@/hooks/useAuth';\n-import LessonErrorBoundary from '@/components/LessonErrorBoundary';\n-import LoadingSpinner from '@/components/LoadingSpinner';\n-import { logger } from '@/lib/logger';\n-\n-// Enhanced component logger with detailed context\n-const componentLogger = {\n-  info: (message: string, data?: any) => {\n-    logger.info(message, { \n-      source: 'LessonPage', \n-      context: {\n-        ...data,\n-        timestamp: new Date().toISOString(),\n-        url: window.location.href,\n-        pathname: window.location.pathname\n-      }\n-    });\n-  },\n-  error: (message: string, error?: any) => {\n-    logger.error(message, { \n-      source: 'LessonPage', \n-      context: {\n-        error,\n-        timestamp: new Date().toISOString(),\n-        url: window.location.href,\n-        pathname: window.location.pathname,\n-        stack: error?.stack\n-      }\n-    });\n-  },\n-  warn: (message: string, data?: any) => {\n-    logger.warn(message, { \n-      source: 'LessonPage', \n-      context: {\n-        ...data,\n-        timestamp: new Date().toISOString(),\n-        url: window.location.href,\n-        pathname: window.location.pathname\n-      }\n-    });\n-  },\n-  debug: (message: string, data?: any) => {\n-    if (DEBUG) {\n-      logger.debug(message, { \n-        source: 'LessonPage', \n-        context: {\n-          ...data,\n-          timestamp: new Date().toISOString(),\n-          url: window.location.href,\n-          pathname: window.location.pathname\n-        }\n-      });\n-    }\n-  }\n-};\n-\n-// Remove duplicate DEBUG configuration\n-const DEBUG = process.env.NODE_ENV === 'development';\n-\n-// Performance monitoring\n-const PAGE_START_TIME = performance.now();\n-let isComponentMounted = false;\n-\n-// Add performance markers\n-performance.mark('lessonPage-start');\n-\n-// Enhanced error handler\n-window.onerror = function(msg, url, lineNo, columnNo, error) {\n-  componentLogger.error('Global error caught', { \n-    msg, \n-    url, \n-    lineNo, \n-    columnNo, \n-    error,\n-    isComponentMounted,\n-    timeSinceStart: performance.now() - PAGE_START_TIME\n-  });\n-  return false;\n-};\n-\n-// Add unhandled rejection handler\n-window.onunhandledrejection = function(event) {\n-  componentLogger.error('Unhandled promise rejection', {\n-    reason: event.reason,\n-    isComponentMounted,\n-    timeSinceStart: performance.now() - PAGE_START_TIME\n-  });\n-};\n-\n-// Global error handler\n-window.onload = function() {\n-  componentLogger.info('Lesson page loaded', {\n-    url: window.location.href,\n-    localStorage: Object.keys(localStorage)\n-  });\n-};\n-\n-// Enhanced logging utility\n-const forceLog = (message: string, data?: any, type: 'info' | 'warn' | 'error' = 'info') => {\n-  if (!DEBUG) return;\n-  \n-  const timestamp = new Date().toISOString();\n-  const logEntry = {\n-    timestamp,\n-    message,\n-    data,\n-    type,\n-    url: window.location.href,\n-    pathname: window.location.pathname,\n-    search: window.location.search,\n-    timeSinceStart: performance.now() - PAGE_START_TIME,\n-    isComponentMounted\n-  };\n-  \n-  // Console logging with visual distinction\n-  const styles = {\n-    info: 'color: #4CAF50; font-weight: bold;',\n-    warn: 'color: #FFC107; font-weight: bold;',\n-    error: 'color: #F44336; font-weight: bold;'\n-  };\n-  \n-  console.log(`%c[${timestamp}] ${message}`, styles[type]);\n-  if (data) {\n-    console.log('Data:', data);\n-    if (typeof data === 'object') {\n-      console.table(data);\n-    }\n-  }\n-};\n-\n-// Update LessonState interface to match database schema\n-interface LessonState {\n-  lesson: {\n-    id: string;\n-    title: string;\n-    content: string | null;\n-    description: string | null;\n-    topic_id: string | null;\n-    subtopic_id: string;\n-    order_index: number | null;\n-    duration: number | null;\n-    status: 'draft' | 'published';\n-    created_at: string;\n-    updated_at: string;\n-    contentheading: string | null;\n-    user_id: string | null;\n-    voice_id: string | null;\n-    questions: Array<{\n-      id: string;\n-      title: string;\n-      content: string;\n-      type: string;\n-      points: number;\n-      lesson_id: string;\n-      order_index: number | null;\n-      created_at: string;\n-      updated_at: string;\n-      status: 'draft' | 'published';\n-      data: {\n-        prompt?: string;\n-        teacherScript?: string;\n-        options?: string[];\n-        metadata?: {\n-          sampleAnswer?: string;\n-          correct?: string[];\n-          options?: string[];\n-          audioContent?: string;\n-          transcript?: string;\n-          keywords?: string[];\n-          hints?: string[];\n-          imageUrl?: string;\n-          videoUrl?: string;\n-        };\n-      };\n-    }>;\n-    activities: Array<{\n-      id: string;\n-      title: string;\n-      description: string | null;\n-      type: string;\n-      content: string | null;\n-      lesson_id: string;\n-      duration: number | null;\n-      created_at: string;\n-      updated_at: string;\n-      name: string;\n-      instructions: string | null;\n-      data: {\n-        prompt: string;\n-        teacherScript: string;\n-        media: string[];\n-      };\n-      media: Array<{\n-        url: string;\n-        type: 'image' | 'gif' | 'video';\n-      }>;\n-    }>;\n-    exercise_prompts: Array<{\n-      id: string;\n-      text: string;\n-      media: string | null;\n-      type: 'image' | 'gif' | 'video';\n-      narration: string | null;\n-      saytext: string | null;\n-      question_id: string | null;\n-      correct: boolean | null;\n-      created_at: string;\n-      updated_at: string;\n-      contentId: string;\n-      questionType: 'multiple-choice' | 'fill-blank' | 'matching' | 'drag-drop' | 'speaking' | 'listening' | 'writing' | 'translation';\n-      difficulty: 'beginner' | 'intermediate' | 'advanced';\n-      content: {\n-        question?: string;\n-        options?: string[];\n-        correctAnswer?: string;\n-        pairs?: Record<string, string>;\n-        correctOrder?: string[];\n-        imageUrl?: string;\n-        audioUrl?: string;\n-        instructions: string;\n-        hints: string[];\n-      };\n-      metadata: {\n-        targetSkills: string[];\n-        prerequisites: string[];\n-        learningObjectives: string[];\n-        estimatedTime: number;\n-      };\n-      adaptiveSettings: {\n-        progressionRules: {\n-          minScore: number;\n-          requiredAttempts: number;\n-        };\n-        difficultyAdjustment: {\n-          increase: number;\n-          decrease: number;\n-        };\n-      };\n-    }>;\n-  };\n-  topic: {\n-    id: string;\n-    title: string;\n-    description: string | null;\n-    grade_id: string;\n-    order_index: number | null;\n-    created_at: string;\n-    updated_at: string;\n-  };\n-  subtopic: {\n-    id: string;\n-    title: string;\n-    description: string | null;\n-    topic_id: string;\n-    order_index: number | null;\n-    created_at: string;\n-    updated_at: string;\n-  };\n-}\n-\n-// Update DbActivity interface\n-interface DbActivity {\n-  id: string;\n-  title: string;\n-  description: string | null;\n-  type: string;\n-  content: string | null;\n-  lesson_id: string;\n-  duration: number | null;\n-  created_at: string;\n-  updated_at: string;\n-  name: string;\n-  instructions: string | null;\n-  data: {\n-    prompt: string;\n-    teacherScript: string;\n-    media: string[];\n-  };\n-  media: Array<{\n-    url: string;\n-    type: 'image' | 'gif' | 'video';\n-  }>;\n-}\n-\n-// Update DatabaseLessonResponse interface\n-interface DatabaseLessonResponse {\n-  data: {\n-    id: string;\n-    title: string;\n-    content: string | null;\n-    description: string | null;\n-    topic_id: string | null;\n-    subtopic_id: string;\n-    order_index: number | null;\n-    duration: number | null;\n-    status: 'draft' | 'published';\n-    created_at: string;\n-    updated_at: string;\n-    contentheading: string | null;\n-    user_id: string | null;\n-    voice_id: string | null;\n-    questions: Array<{\n-      id: string;\n-      title: string;\n-      content: string;\n-      type: string;\n-      points: number;\n-      lesson_id: string;\n-      order_index: number | null;\n-      created_at: string;\n-      updated_at: string;\n-      status: 'draft' | 'published';\n-      data: Record<string, any>;\n-    }>;\n-    activities: DbActivity[];\n-    exercise_prompts: DbExercisePrompt[];\n-  } | null;\n-  error: Error | null;\n-}\n-\n-// Add URL validation helper\n-const validateUrl = (params: any, searchParams: URLSearchParams) => {\n-  const validation = {\n-    topicId: searchParams.get('topicId'),\n-    subtopicId: searchParams.get('subtopicId'),\n-    lessonId: params?.lessonId,\n-    isValid: false,\n-    missingParams: [] as string[]\n-  };\n-\n-  if (!validation.lessonId) validation.missingParams.push('lessonId');\n-  if (!validation.topicId) validation.missingParams.push('topicId');\n-  if (!validation.subtopicId) validation.missingParams.push('subtopicId');\n-\n-  validation.isValid = validation.missingParams.length === 0;\n-  return validation;\n-};\n-\n-// Add this type guard function\n-const isValidString = (value: any): value is string => {\n-  return typeof value === 'string' && value.length > 0;\n-};\n-\n-// Update the RouteParams interface\n-interface RouteParams {\n-  [key: string]: string | undefined;\n-  lessonId?: string;\n-}\n-\n-const MAX_AUTH_RETRIES = 3;\n-const AUTH_RETRY_DELAY = 1000;\n-\n-const DEBUG_MODE = true;\n-const AUTH_CHECK_INTERVAL = 1000; // 1 second\n-\n-// Add this function at the top level\n-const debugLog = (message: string, data?: any) => {\n-  if (!DEBUG_MODE) return;\n-  const timestamp = new Date().toISOString();\n-  console.log(`[${timestamp}] [LessonPage] ${message}`, data ? data : '');\n-};\n-\n-// Add these utility functions at the top of the file\n-const getInstanceData = (searchParams: URLSearchParams) => {\n-  return {\n-    instanceId: searchParams.get('instanceId'),\n-    stateKey: searchParams.get('stateKey'),\n-    authStateKey: searchParams.get('authStateKey')\n-  };\n-};\n-\n-// Add this type at the top with other interfaces\n-interface AuthState {\n-  session: {\n-    access_token: string;\n-    refresh_token: string;\n-    user: {\n-      id: string;\n-    };\n-  };\n-  instanceId: string;\n-  timestamp: string;\n-}\n-\n-const restoreAuthState = async (authStateKey: string | null): Promise<boolean> => {\n-  if (!authStateKey) {\n-    forceLog('[Auth] No auth state key provided', null, 'error');\n-    return false;\n-  }\n-\n-  try {\n-    const storedAuth = localStorage.getItem(authStateKey);\n-    if (!storedAuth) {\n-      forceLog('[Auth] No stored auth state found', { authStateKey }, 'error');\n-      return false;\n-    }\n-\n-    const authState = JSON.parse(storedAuth);\n-    forceLog('[Auth] Restoring auth state', { \n-      instanceId: authState.instanceId,\n-      timestamp: authState.timestamp\n-    });\n-\n-    // First try to get current session\n-    const { data: { session: currentSession } } = await supabase.auth.getSession();\n-    \n-    if (currentSession?.access_token === authState.session.access_token) {\n-      forceLog('[Auth] Session already active and matching');\n-      return true;\n-    }\n-\n-    // Set the session\n-    const { data, error } = await supabase.auth.setSession({\n-      access_token: authState.session.access_token,\n-      refresh_token: authState.session.refresh_token\n-    });\n-\n-    if (error) {\n-      forceLog('[Auth] Failed to restore session', error, 'error');\n-      return false;\n-    }\n-\n-    forceLog('[Auth] Session restored successfully', {\n-      userId: data.session?.user.id,\n-      expiresAt: data.session?.expires_at\n-    });\n-\n-    // Add message listener for parent window communication\n-    window.addEventListener('message', (event) => {\n-      if (event.data.type === 'AUTH_STATE') {\n-        forceLog('[Auth] Received auth state from parent');\n-        const newAuthState = event.data.payload;\n-        localStorage.setItem(authStateKey, JSON.stringify(newAuthState));\n-      }\n-    });\n-\n-    // Notify parent window we're ready\n-    window.opener?.postMessage({ type: 'LESSON_WINDOW_READY' }, '*');\n-\n-    return true;\n-  } catch (error) {\n-    forceLog('[Auth] Error initializing auth', error, 'error');\n-    return false;\n-  }\n-};\n-\n-// Add this function at the top of the lesson page component\n-const initializeAuth = async (authStateKey: string): Promise<boolean> => {\n-  let retryCount = 0;\n-  const maxRetries = 3;\n-\n-  while (retryCount < maxRetries) {\n-    try {\n-      const storedAuth = localStorage.getItem(authStateKey);\n-      if (!storedAuth) {\n-        forceLog('[Auth] No stored auth state found', { authStateKey, attempt: retryCount + 1 }, 'error');\n-        throw new Error('No stored auth state found');\n-      }\n-\n-      const authState = JSON.parse(storedAuth) as AuthState;\n-      forceLog('[Auth] Restoring auth state', { \n-        instanceId: authState.instanceId,\n-        timestamp: authState.timestamp,\n-        attempt: retryCount + 1\n-      });\n-\n-      // First try to get current session\n-      const { data: { session } } = await supabase.auth.getSession();\n-      \n-      if (session?.access_token === authState.session.access_token) {\n-        forceLog('[Auth] Session already active and matching', {\n-          userId: session.user.id,\n-          attempt: retryCount + 1\n-        });\n-        return true;\n-      }\n-\n-      // Set the session\n-      const { data, error } = await supabase.auth.setSession({\n-        access_token: authState.session.access_token,\n-        refresh_token: authState.session.refresh_token\n-      });\n-\n-      if (error || !data.session) {\n-        throw error || new Error('Failed to restore session');\n-      }\n-\n-      forceLog('[Auth] Session restored successfully', {\n-        userId: data.session.user.id,\n-        expiresAt: data.session.expires_at,\n-        attempt: retryCount + 1\n-      });\n-\n-      // Add message listener for parent window communication\n-      window.addEventListener('message', (event) => {\n-        if (event.data.type === 'AUTH_STATE') {\n-          forceLog('[Auth] Received auth state from parent');\n-          const newAuthState = event.data.payload as AuthState;\n-          localStorage.setItem(authStateKey, JSON.stringify({\n-            ...newAuthState,\n-            lastUpdated: new Date().toISOString()\n-          }));\n-        }\n-      });\n-\n-      // Notify parent window we're ready\n-      window.opener?.postMessage({ \n-        type: 'LESSON_WINDOW_READY',\n-        payload: {\n-          userId: data.session.user.id,\n-          timestamp: new Date().toISOString()\n-        }\n-      }, '*');\n-\n-      return true;\n-    } catch (error) {\n-      forceLog('[Auth] Error initializing auth', { \n-        error, \n-        attempt: retryCount + 1,\n-        remainingRetries: maxRetries - retryCount - 1\n-      }, 'error');\n-      \n-      retryCount++;\n-      if (retryCount < maxRetries) {\n-        await new Promise(resolve => setTimeout(resolve, 1000 * retryCount)); // Exponential backoff\n-        continue;\n-      }\n-      return false;\n-    }\n-  }\n-  return false;\n-};\n-\n-// Let's add a more robust logging utility at the top of the file\n-const createLogger = (component: string) => ({\n-  info: (message: string, data?: any) => {\n-    forceLog(`[${component}] ${message}`, data, 'info');\n-  },\n-  error: (message: string, error?: any) => {\n-    forceLog(`[${component}] ${message}`, error, 'error');\n-  },\n-  warn: (message: string, data?: any) => {\n-    forceLog(`[${component}] ${message}`, data, 'warn');\n-  }\n-});\n-\n-const logger1 = createLogger('LessonPage');\n-\n-// Update the mapping functions\n-const mapDbActivityToActivity = (dbActivity: DbActivity): Activity => {\n-  const activity: Activity = {\n-    id: dbActivity.id,\n-    lesson_id: dbActivity.lesson_id,\n-    title: dbActivity.title,\n-    type: dbActivity.type,\n-    name: dbActivity.name,\n-    data: {\n-      prompt: '',\n-      teacherScript: '',\n-      media: []\n-    }\n-  };\n-\n-  // Add optional fields\n-  if (dbActivity.created_at) activity.created_at = dbActivity.created_at;\n-  if (dbActivity.duration) activity.duration = dbActivity.duration;\n-  if (dbActivity.description) activity.description = dbActivity.description;\n-  if (dbActivity.content) activity.content = dbActivity.content;\n-  if (dbActivity.updated_at) activity.updated_at = dbActivity.updated_at;\n-  if (dbActivity.instructions) activity.instructions = dbActivity.instructions;\n-  if (dbActivity.data) {\n-    activity.data = {\n-      prompt: dbActivity.data.prompt || '',\n-      teacherScript: dbActivity.data.teacherScript || '',\n-      media: dbActivity.data.media || []\n-    };\n-  }\n-\n-  if (dbActivity.media) {\n-    activity.media = dbActivity.media;\n-  }\n-\n-  return activity;\n-};\n-\n-const mapDbPromptToExercisePrompt = (dbPrompt: DbExercisePrompt): ExercisePrompt => {\n-  const prompt: ExercisePrompt = {\n-    id: dbPrompt.id,\n-    text: dbPrompt.text,\n-    type: dbPrompt.type,\n-    created_at: dbPrompt.created_at,\n-    updated_at: dbPrompt.updated_at,\n-    contentId: dbPrompt.contentId,\n-    questionType: dbPrompt.questionType,\n-    difficulty: dbPrompt.difficulty,\n-    content: {\n-      instructions: dbPrompt.content?.instructions || '',\n-      hints: dbPrompt.content?.hints || []\n-    },\n-    metadata: {\n-      targetSkills: dbPrompt.metadata?.targetSkills || [],\n-      prerequisites: dbPrompt.metadata?.prerequisites || [],\n-      learningObjectives: dbPrompt.metadata?.learningObjectives || [],\n-      estimatedTime: dbPrompt.metadata?.estimatedTime || 0\n-    },\n-    adaptiveSettings: {\n-      progressionRules: {\n-        minScore: dbPrompt.adaptiveSettings?.progressionRules?.minScore || 0,\n-        requiredAttempts: dbPrompt.adaptiveSettings?.progressionRules?.requiredAttempts || 0\n-      },\n-      difficultyAdjustment: {\n-        increase: dbPrompt.adaptiveSettings?.difficultyAdjustment?.increase || 0,\n-        decrease: dbPrompt.adaptiveSettings?.difficultyAdjustment?.decrease || 0\n-      }\n-    },\n-    createdAt: new Date(dbPrompt.created_at),\n-    updatedAt: new Date(dbPrompt.updated_at)\n-  };\n-\n-  // Add optional fields\n-  if (dbPrompt.media) prompt.media = dbPrompt.media;\n-  if (dbPrompt.narration) prompt.narration = dbPrompt.narration;\n-  if (dbPrompt.saytext) prompt.saytext = dbPrompt.saytext;\n-  if (dbPrompt.question_id) prompt.question_id = dbPrompt.question_id;\n-  if (dbPrompt.correct) prompt.correct = dbPrompt.correct;\n-\n-  // Add optional content fields\n-  if (dbPrompt.content?.question) prompt.content.question = dbPrompt.content.question;\n-  if (dbPrompt.content?.options) prompt.content.options = dbPrompt.content.options;\n-  if (dbPrompt.content?.correctAnswer) prompt.content.correctAnswer = dbPrompt.content.correctAnswer;\n-  if (dbPrompt.content?.pairs) prompt.content.pairs = dbPrompt.content.pairs;\n-  if (dbPrompt.content?.correctOrder) prompt.content.correctOrder = dbPrompt.content.correctOrder;\n-  if (dbPrompt.content?.imageUrl) prompt.content.imageUrl = dbPrompt.content.imageUrl;\n-  if (dbPrompt.content?.audioUrl) prompt.content.audioUrl = dbPrompt.content.audioUrl;\n-\n-  return prompt;\n-};\n-\n-// Update the fetchLessonData function\n-const fetchLessonData = async (\n-  lessonId: string,\n-  topicId: string,\n-  subtopicId: string\n-): Promise<LessonState> => {\n-  const startTime = performance.now();\n-  const logger = createLogger('fetchLessonData');\n-  \n-  try {\n-    const [lessonResult, topicResult, subtopicResult] = await Promise.all([\n-      supabase\n-        .from('lessons')\n-        .select(`\n-          id,\n-          title,\n-          name,\n-          content,\n-          description,\n-          topic_id,\n-          subtopic_id,\n-          questions:questions (\n-            id,\n-            title,\n-            content,\n-            type,\n-            data,\n-            metadata,\n-            points\n-          ),\n-          activities:activities (\n-            id,\n-            title,\n-            description,\n-            type,\n-            data,\n-            lesson_id,\n-            name,\n-            created_at,\n-            updated_at,\n-            content,\n-            duration,\n-            instructions,\n-            media\n-          ),\n-          exercise_prompts:exercise_prompts (\n-            id,\n-            text,\n-            media,\n-            type,\n-            narration,\n-            saytext,\n-            question_id,\n-            correct,\n-            created_at,\n-            updated_at,\n-            contentId,\n-            questionType,\n-            difficulty,\n-            content,\n-            metadata,\n-            adaptiveSettings\n-          )\n-        `)\n-        .eq('id', lessonId)\n-        .single(),\n-      \n-      supabase\n-        .from('topics')\n-        .select('id, title')\n-        .eq('id', topicId)\n-        .single(),\n-      \n-      supabase\n-        .from('subtopics')\n-        .select('id, title')\n-        .eq('id', subtopicId)\n-        .single()\n-    ]) as [DatabaseLessonResponse, any, any];\n-\n-    // Validate responses\n-    if (lessonResult.error) throw new Error(`Lesson fetch failed: ${lessonResult.error.message}`);\n-    if (topicResult.error) throw new Error(`Topic fetch failed: ${topicResult.error.message}`);\n-    if (subtopicResult.error) throw new Error(`Subtopic fetch failed: ${subtopicResult.error.message}`);\n-\n-    // Validate required data\n-    if (!lessonResult.data) {\n-      throw new Error('Missing required data from database');\n-    }\n-\n-    // Map activities with required fields\n-    const activities = (lessonResult.data?.activities || []).map((dbActivity) => {\n-      const activity: Activity = {\n-        id: dbActivity.id,\n-        lesson_id: dbActivity.lesson_id,\n-        title: dbActivity.title,\n-        type: dbActivity.type,\n-        name: dbActivity.name,\n-        data: {\n-          prompt: '',\n-          teacherScript: '',\n-          media: []\n-        }\n-      };\n-\n-      // Add optional fields\n-      if (dbActivity.created_at) activity.created_at = dbActivity.created_at;\n-      if (dbActivity.duration) activity.duration = dbActivity.duration;\n-      if (dbActivity.description) activity.description = dbActivity.description;\n-      if (dbActivity.content) activity.content = dbActivity.content;\n-      if (dbActivity.updated_at) activity.updated_at = dbActivity.updated_at;\n-      if (dbActivity.instructions) activity.instructions = dbActivity.instructions;\n-      if (dbActivity.data) {\n-        activity.data = {\n-          prompt: dbActivity.data.prompt || '',\n-          teacherScript: dbActivity.data.teacherScript || '',\n-          media: dbActivity.data.media || []\n-        };\n-      }\n-\n-      if (dbActivity.media) {\n-        activity.media = dbActivity.media;\n-      }\n-\n-      return activity;\n-    });\n-\n-    // Map exercise prompts with required fields\n-    const exercisePrompts = (lessonResult.data?.exercise_prompts || []).map((dbPrompt) => {\n-      const prompt: ExercisePrompt = {\n-        id: dbPrompt.id,\n-        text: dbPrompt.text,\n-        type: dbPrompt.type,\n-        created_at: dbPrompt.created_at,\n-        updated_at: dbPrompt.updated_at,\n-        contentId: dbPrompt.contentId,\n-        questionType: dbPrompt.questionType,\n-        difficulty: dbPrompt.difficulty,\n-        content: {\n-          instructions: dbPrompt.content?.instructions || '',\n-          hints: dbPrompt.content?.hints || []\n-        },\n-        metadata: {\n-          targetSkills: dbPrompt.metadata?.targetSkills || [],\n-          prerequisites: dbPrompt.metadata?.prerequisites || [],\n-          learningObjectives: dbPrompt.metadata?.learningObjectives || [],\n-          estimatedTime: dbPrompt.metadata?.estimatedTime || 0\n-        },\n-        adaptiveSettings: {\n-          progressionRules: {\n-            minScore: dbPrompt.adaptiveSettings?.progressionRules?.minScore || 0,\n-            requiredAttempts: dbPrompt.adaptiveSettings?.progressionRules?.requiredAttempts || 0\n-          },\n-          difficultyAdjustment: {\n-            increase: dbPrompt.adaptiveSettings?.difficultyAdjustment?.increase || 0,\n-            decrease: dbPrompt.adaptiveSettings?.difficultyAdjustment?.decrease || 0\n-          }\n-        },\n-        createdAt: new Date(dbPrompt.created_at),\n-        updatedAt: new Date(dbPrompt.updated_at)\n-      };\n-\n-      // Add optional fields\n-      if (dbPrompt.media) prompt.media = dbPrompt.media;\n-      if (dbPrompt.narration) prompt.narration = dbPrompt.narration;\n-      if (dbPrompt.saytext) prompt.saytext = dbPrompt.saytext;\n-      if (dbPrompt.question_id) prompt.question_id = dbPrompt.question_id;\n-      if (dbPrompt.correct) prompt.correct = dbPrompt.correct;\n-\n-      // Add optional content fields\n-      if (dbPrompt.content?.question) prompt.content.question = dbPrompt.content.question;\n-      if (dbPrompt.content?.options) prompt.content.options = dbPrompt.content.options;\n-      if (dbPrompt.content?.correctAnswer) prompt.content.correctAnswer = dbPrompt.content.correctAnswer;\n-      if (dbPrompt.content?.pairs) prompt.content.pairs = dbPrompt.content.pairs;\n-      if (dbPrompt.content?.correctOrder) prompt.content.correctOrder = dbPrompt.content.correctOrder;\n-      if (dbPrompt.content?.imageUrl) prompt.content.imageUrl = dbPrompt.content.imageUrl;\n-      if (dbPrompt.content?.audioUrl) prompt.content.audioUrl = dbPrompt.content.audioUrl;\n-\n-      return prompt;\n-    });\n-\n-    const lessonState: LessonState = {\n-      lesson: {\n-        ...lessonResult.data,\n-        questions: lessonResult.data.questions || [],\n-        activities,\n-        exercise_prompts: exercisePrompts\n-      },\n-      topic: topicResult.data,\n-      subtopic: subtopicResult.data\n-    };\n-\n-    // Cache the result\n-    const cacheData = {\n-      data: lessonState,\n-      timestamp: Date.now()\n-    };\n-    localStorage.setItem(`lesson_state_${lessonId}`, JSON.stringify(cacheData));\n-\n-    return lessonState;\n-  } catch (error) {\n-    logger.error('Failed to fetch lesson data', {\n-      error,\n-      duration: `${(performance.now() - startTime).toFixed(2)}ms`\n-    });\n-    throw error;\n-  }\n-};\n-\n-// Add this LogElement component after the forceLog definition\n-const LogElement: React.FC<{ name: string; children: React.ReactNode }> = ({ name, children }) => {\n-  useEffect(() => {\n-    componentLogger.debug(`Rendered element: ${name}`);\n-  }, []);\n-  return <>{children}</>;\n-};\n-\n-export default function LessonPage() {\n-  const { user, loading: authLoading } = useAuth();\n-  const location = useLocation();\n-  const navigate = useNavigate();\n-  const searchParams = new URLSearchParams(window.location.search);\n-  \n-  // Get lesson data from query parameters\n-  const lessonId = searchParams.get('lessonId');\n-  const topicId = searchParams.get('topicId');\n-  const subtopicId = searchParams.get('subtopicId');\n-  const context = searchParams.get('context');\n-  \n-  // Parse context if available\n-  const lessonContext = React.useMemo(() => {\n-    try {\n-      return context ? JSON.parse(context) : null;\n-    } catch (error) {\n-      logger.error('Failed to parse lesson context', {\n-        source: 'LessonPage',\n-        context: { error, rawContext: context }\n-      });\n-      return null;\n-    }\n-  }, [context]);\n-  \n-  // Enhanced URL validation and logging\n-  const urlValidation = {\n-    lessonId,\n-    topicId,\n-    subtopicId,\n-    context: lessonContext,\n-    isValid: Boolean(lessonId && topicId && subtopicId),\n-    missingParams: [\n-      !lessonId && 'lessonId',\n-      !topicId && 'topicId',\n-      !subtopicId && 'subtopicId'\n-    ].filter(Boolean) as string[]\n-  };\n-  \n-  logger.info('Lesson page mounted', {\n-    source: 'LessonPage',\n-    context: {\n-      validation: urlValidation,\n-      auth: {\n-        isLoading: authLoading,\n-        hasUser: !!user,\n-        userId: user?.id\n-      },\n-      route: {\n-        pathname: location.pathname,\n-        search: location.search\n-      }\n-    }\n-  });\n-\n-  const [lessonState, setLessonState] = useState<LessonState | null>(null);\n-  const [currentStep, setCurrentStep] = useState(0);\n-  const [progress, setProgress] = useState(0);\n-  const [isLoading, setIsLoading] = useState(true);\n-  const [activeTab, setActiveTab] = useState(\"overview\");\n-  const [hasAttemptedLoad, setHasAttemptedLoad] = useState(false);\n-  const [isFullscreen, setIsFullscreen] = useState(false);\n-  const [error, setError] = useState<string | null>(null);\n-  const [navigationAttempted, setNavigationAttempted] = useState(false);\n-  const [performanceMetrics, setPerformanceMetrics] = useState({\n-    initializationTime: 0,\n-    dataLoadTime: 0,\n-    renderCount: 0\n-  });\n-\n-  // Function to handle entering fullscreen\n-  const enterFullscreen = async () => {\n-    try {\n-      const element = document.documentElement;\n-      if (element.requestFullscreen) {\n-        // Only attempt fullscreen if we're in a user gesture context\n-        // and the document is not already in fullscreen mode\n-        if (!document.fullscreenElement) {\n-          // Add a try-catch specifically for the requestFullscreen call\n-          try {\n-            await element.requestFullscreen();\n-            forceLog('Entered fullscreen mode successfully');\n-            setIsFullscreen(true);\n-          } catch (err) {\n-            forceLog('Fullscreen request failed (non-critical):', err, 'warn');\n-            // Non-critical error, we can continue without fullscreen\n-          }\n-        }\n-      } else {\n-        forceLog('Fullscreen API not supported', null, 'warn');\n-      }\n-    } catch (error) {\n-      // Log but don't throw - fullscreen is not critical for functionality\n-      forceLog('Error in enterFullscreen:', error, 'warn');\n-    }\n-  };\n-\n-  // Function to handle exiting fullscreen\n-  const exitFullscreen = async () => {\n-    try {\n-      if (document.fullscreenElement && document.exitFullscreen) {\n-        await document.exitFullscreen();\n-      }\n-    } catch (error) {\n-      console.error('Exit fullscreen error:', error);\n-    }\n-  };\n-\n-  // Function to handle navigation back to lessons page\n-  const navigateToLessons = async () => {\n-    try {\n-      if (navigationAttempted) {\n-        forceLog('Navigation already attempted, preventing duplicate');\n-        return;\n-      }\n-      \n-      setNavigationAttempted(true);\n-      forceLog('Attempting navigation to lessons page');\n-      \n-      await exitFullscreen();\n-      \n-      // Small delay to ensure logs are visible\n-      await new Promise(resolve => setTimeout(resolve, 1000));\n-      \n-      // Close the window instead of navigating\n-      window.close();\n-      \n-      // Notify parent window about lesson completion if it exists\n-      if (window.opener) {\n-        window.opener.postMessage({\n-          type: 'LESSON_COMPLETED',\n-          data: {\n-            lessonId,\n-            progress,\n-            timestamp: new Date().toISOString()\n-          }\n-        }, '*');\n-      }\n-      \n-      // Fallback if window.close() doesn't work\n-      if (!window.closed) {\n-        window.location.href = '/app/teacher/lessons';\n-      }\n-    } catch (error) {\n-      forceLog('Navigation error:', error);\n-      setError('Failed to navigate back to lessons page');\n-    }\n-  };\n-\n-  // Update the initialization effect to handle auth state\n-  useEffect(() => {\n-    let isMounted = true;\n-    \n-    const initializeLessonPage = async () => {\n-      componentLogger.info('Initializing lesson page', {\n-        startTime: PAGE_START_TIME,\n-        isComponentMounted\n-      });\n-      \n-      try {\n-        if (authLoading) {\n-          componentLogger.info('Waiting for auth to complete');\n-          return;\n-        }\n-\n-        if (!user) {\n-          componentLogger.error('No authenticated user found');\n-          setError('Authentication required');\n-          return;\n-        }\n-\n-        if (!lessonId || !topicId || !subtopicId) {\n-          componentLogger.error('Missing required parameters', urlValidation);\n-          setError('Invalid lesson parameters');\n-          return;\n-        }\n-\n-        componentLogger.info('Starting page initialization', {\n-          lessonId,\n-          topicId,\n-          subtopicId,\n-          userId: user.id\n-        });\n-\n-        setIsLoading(true);\n-        const lessonData = await fetchLessonData(lessonId, topicId, subtopicId);\n-\n-        if (!isMounted) return;\n-\n-        setLessonState(lessonData);\n-        componentLogger.info('Lesson page initialized successfully', {\n-          duration: performance.now() - PAGE_START_TIME,\n-          isComponentMounted\n-        });\n-\n-        // Notify parent window that lesson is ready\n-        if (window.opener) {\n-          window.opener.postMessage({\n-            type: 'LESSON_INITIALIZED',\n-            data: {\n-              lessonId,\n-              timestamp: new Date().toISOString()\n-            }\n-          }, '*');\n-        }\n-\n-      } catch (error) {\n-        componentLogger.error('Failed to initialize lesson page', {\n-          error,\n-          timeSinceStart: performance.now() - PAGE_START_TIME,\n-          isComponentMounted\n-        });\n-        if (isMounted) {\n-          setError(error instanceof Error ? error.message : 'Failed to initialize lesson');\n-        }\n-      } finally {\n-        if (isMounted) {\n-          setIsLoading(false);\n-          setHasAttemptedLoad(true);\n-        }\n-      }\n-    };\n-\n-    if (!hasAttemptedLoad && !authLoading) {\n-      initializeLessonPage();\n-    }\n-\n-    return () => {\n-      isMounted = false;\n-    };\n-  }, [lessonId, topicId, subtopicId, user, authLoading, hasAttemptedLoad, urlValidation]);\n-\n-  // Show loading state while auth is initializing\n-  if (authLoading) {\n-    return (\n-      <div className=\"flex items-center justify-center min-h-screen\">\n-        <LoadingSpinner message=\"Initializing lesson...\" />\n-      </div>\n-    );\n-  }\n-\n-  // Show error if no authenticated user\n-  if (!authLoading && !user) {\n-    return (\n-      <div className=\"flex items-center justify-center min-h-screen\">\n-        <Card className=\"p-6\">\n-          <CardTitle className=\"text-xl mb-4\">Authentication Required</CardTitle>\n-          <p className=\"text-muted-foreground mb-4\">Please log in to access this lesson.</p>\n-          <Button onClick={() => navigate('/login', { state: { from: location } })}>\n-            Go to Login\n-          </Button>\n-        </Card>\n-      </div>\n-    );\n-  }\n-\n-  // Only navigate away if there's an error and we're not loading\n-  useEffect(() => {\n-    let navigationTimer: NodeJS.Timeout;\n-    \n-    if (error && !isLoading && hasAttemptedLoad && !navigationAttempted) {\n-      forceLog('Error detected, preparing to navigate:', error);\n-      navigationTimer = setTimeout(() => {\n-        forceLog('Executing delayed navigation due to error');\n-        navigateToLessons();\n-      }, 2000); // Give more time for logs to be visible\n-    }\n-    \n-    return () => {\n-      if (navigationTimer) {\n-        clearTimeout(navigationTimer);\n-      }\n-    };\n-  }, [error, isLoading, hasAttemptedLoad, navigationAttempted]);\n-\n-  const handleEndLesson = async () => {\n-    forceLog('End lesson requested');\n-    const confirmed = window.confirm('Are you sure you want to end this lesson?');\n-    if (confirmed) {\n-      forceLog('End lesson confirmed');\n-      // Clean up localStorage before navigating\n-      if (lessonId) {\n-        const storageKey = `lesson_state_${lessonId}`;\n-        forceLog('Removing stored state:', storageKey);\n-        localStorage.removeItem(storageKey);\n-      }\n-      await navigateToLessons();\n-    } else {\n-      forceLog('End lesson cancelled');\n-    }\n-  };\n-\n-  const getQuestionIcon = (type: string) => {\n-    switch (type) {\n-      case 'speaking':\n-        return <Mic className=\"h-4 w-4\" />;\n-      case 'multiplechoice':\n-        return <PenTool className=\"h-4 w-4\" />;\n-      case 'fill_blanks':\n-        return <FileText className=\"h-4 w-4\" />;\n-      default:\n-        return <HelpCircle className=\"h-4 w-4\" />;\n-    }\n-  };\n-\n-  useEffect(() => {\n-    return () => {\n-      // Cleanup function\n-      forceLog('Cleaning up lesson state', {\n-        source: 'LearningPathTeacher',\n-        context: {\n-          timestamp: new Date().toISOString()\n-        }\n-      });\n-      \n-      // Preserve state in sessionStorage before cleanup\n-      if (lessonId) {\n-        const state = {\n-          lessonId,\n-          timestamp: new Date().toISOString()\n-        };\n-        sessionStorage.setItem('lesson_state', JSON.stringify(state));\n-      }\n-    };\n-  }, [lessonId]);\n-\n-  useEffect(() => {\n-    // Try to recover state on mount\n-    const savedState = sessionStorage.getItem('lesson_state');\n-    if (savedState) {\n-      try {\n-        const state = JSON.parse(savedState);\n-        forceLog('Recovering lesson state', {\n-          source: 'LearningPathTeacher',\n-          context: {\n-            savedState: state,\n-            timestamp: new Date().toISOString()\n-          }\n-        });\n-      } catch (error) {\n-        forceLog('Failed to recover lesson state', {\n-          source: 'LearningPathTeacher',\n-          context: { error }\n-        });\n-      }\n-    }\n-  }, []);\n-\n-  const getLessonUrl = useCallback((id: string) => {\n-    const baseUrl = window.location.origin;\n-    const url = new URL(`${baseUrl}/app/teacher/lessons/lesson`);\n-    \n-    // Add necessary query parameters\n-    url.searchParams.set('lessonId', id);\n-    url.searchParams.set('timestamp', Date.now().toString());\n-    \n-    forceLog('Constructed lesson URL', {\n-      source: 'LearningPathTeacher',\n-      context: {\n-        lessonId: id,\n-        url: url.toString(),\n-        baseUrl,\n-        timestamp: new Date().toISOString()\n-      }\n-    });\n-    \n-    return url.toString();\n-  }, []);\n-\n-  useEffect(() => {\n-    setPerformanceMetrics(prev => ({\n-      ...prev,\n-      renderCount: prev.renderCount + 1\n-    }));\n-\n-    componentLogger.info('Component rendered', {\n-      stats: {\n-        renderCount: performanceMetrics.renderCount,\n-        currentStep,\n-        hasLessonState: !!lessonState\n-      }\n-    });\n-  }, [lessonState, currentStep]);\n-\n-  // Log initial render\n-  useEffect(() => {\n-    componentLogger.info('LessonPage component mounted', {\n-      auth: { loading: authLoading, hasUser: !!user },\n-      location: { \n-        pathname: location.pathname,\n-        search: location.search,\n-        state: location.state\n-      },\n-      performance: {\n-        mountTime: performance.now() - PAGE_START_TIME\n-      }\n-    });\n-    \n-    isComponentMounted = true;\n-    performance.mark('lessonPage-mounted');\n-    \n-    return () => {\n-      componentLogger.info('LessonPage component unmounting', {\n-        totalMountedTime: performance.now() - PAGE_START_TIME\n-      });\n-      performance.mark('lessonPage-unmount');\n-      performance.measure('lessonPage-lifecycle', 'lessonPage-start', 'lessonPage-unmount');\n-    };\n-  }, []);\n-\n-  // Log auth state changes\n-  useEffect(() => {\n-    componentLogger.debug('Auth state changed', {\n-      loading: authLoading,\n-      hasUser: !!user,\n-      userId: user?.id\n-    });\n-  }, [user, authLoading]);\n-\n-  // Log URL parameter changes\n-  useEffect(() => {\n-    componentLogger.debug('URL parameters changed', {\n-      search: location.search,\n-      pathname: location.pathname,\n-      state: location.state\n-    });\n-  }, [location]);\n-\n-  if (isLoading) {\n-    forceLog('Rendering loading state');\n-    return (\n-      <div className=\"flex items-center justify-center min-h-screen\">\n-        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n-      </div>\n-    );\n-  }\n-\n-  if (!lessonState) {\n-    forceLog('Rendering error state - no lesson state found');\n-    return (\n-      <div className=\"flex items-center justify-center min-h-screen\">\n-        <Card className=\"p-6\">\n-          <CardTitle className=\"text-xl mb-4\">Lesson not found</CardTitle>\n-          <Button onClick={() => navigateToLessons()}>Go Back</Button>\n-        </Card>\n-      </div>\n-    );\n-  }\n-\n-  forceLog('Rendering lesson page with state:', {\n-    currentStep,\n-    totalSteps: lessonState.lesson.questions.length,\n-    progress\n-  });\n-\n-  const totalSteps = lessonState.lesson.questions.length;\n-  const currentQuestion = lessonState.lesson.questions[currentStep];\n-\n-  return (\n-    <LessonErrorBoundary source=\"LessonPage\">\n-      <div \n-        className=\"min-h-screen bg-background\"\n-        data-testid=\"lesson-page-root\"\n-        onLoad={() => {\n-          componentLogger.debug('Main container loaded');\n-          performance.mark('main-container-loaded');\n-        }}\n-      >\n-        <LogElement name=\"Top Navigation Bar\">\n-          <nav className=\"fixed top-0 left-0 right-0 z-50 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b\">\n-            <div className=\"flex items-center justify-between p-4\">\n-              <div className=\"flex items-center gap-4\">\n-                <Button variant=\"ghost\" size=\"icon\" onClick={handleEndLesson} className=\"hover:bg-accent\">\n-                  <LogElement name=\"Icon: Close (X)\">\n-                    <X className=\"h-5 w-5\" />\n-                  </LogElement>\n-                </Button>\n-                <div>\n-                  <LogElement name=\"Lesson Title Heading\">\n-                    <h1 className=\"text-lg font-semibold\">{lessonState.lesson.title}</h1>\n-                  </LogElement>\n-                  <LogElement name=\"Topic and Subtopic Info\">\n-                    <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n-                      <span>{lessonState.topic.title}</span>\n-                      <span>•</span>\n-                      <span>{lessonState.subtopic.title}</span>\n-                    </div>\n-                  </LogElement>\n-                </div>\n-              </div>\n-              <div className=\"flex items-center gap-4\">\n-                <LogElement name=\"Progress Bar\">\n-                  <Progress value={(currentStep / totalSteps) * 100} className=\"w-40\" />\n-                </LogElement>\n-                <Button variant=\"outline\" onClick={enterFullscreen} className=\"mr-2\">\n-                  <LogElement name=\"Button: Fullscreen\">\n-                    Fullscreen\n-                  </LogElement>\n-                </Button>\n-                <Button variant=\"outline\" onClick={handleEndLesson}>\n-                  <LogElement name=\"Button: End Lesson\">\n-                    End Lesson\n-                  </LogElement>\n-                </Button>\n-              </div>\n-            </div>\n-          </nav>\n-        </LogElement>\n-\n-        <LogElement name=\"Main Content Area\">\n-          <main className=\"pt-24 pb-8 px-4 md:px-8 max-w-7xl mx-auto\">\n-            <div className=\"grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-8\">\n-              <LogElement name=\"Sidebar\">\n-                <div className=\"lg:block\">\n-                  <Card className=\"sticky top-24\">\n-                    <CardHeader>\n-                      <CardTitle className=\"text-lg flex items-center gap-2\">\n-                        <LogElement name=\"Icon: List\">\n-                          <List className=\"h-5 w-5\" />\n-                        </LogElement>\n-                        <LogElement name=\"Sidebar Heading: Lesson Overview\">\n-                          Lesson Overview\n-                        </LogElement>\n-                      </CardTitle>\n-                    </CardHeader>\n-                    <CardContent>\n-                      <div className=\"space-y-4\">\n-                        <div className=\"flex items-center gap-2 text-sm\">\n-                          <Clock className=\"h-4 w-4 text-primary\" />\n-                          <span>{lessonState.lesson.questions.length * 2} minutes</span>\n-                        </div>\n-                        <div className=\"flex items-center gap-2 text-sm\">\n-                          <HelpCircle className=\"h-4 w-4 text-primary\" />\n-                          <span>{lessonState.lesson.questions.length} Questions</span>\n-                        </div>\n-                        <div className=\"flex items-center gap-2 text-sm\">\n-                          <Layout className=\"h-4 w-4 text-primary\" />\n-                          <span>{lessonState.lesson.activities?.length || 0} Activities</span>\n-                        </div>\n-                        \n-                        <div className=\"border-t pt-4 mt-4\">\n-                          <h3 className=\"font-medium mb-3\">Questions</h3>\n-                          <div className=\"space-y-3\">\n-                            {lessonState.lesson.questions.map((question, index) => (\n-                              <motion.div\n-                                key={index}\n-                                initial={{ opacity: 0, x: -20 }}\n-                                animate={{ opacity: 1, x: 0 }}\n-                                transition={{ delay: index * 0.1 }}\n-                                className={cn(\n-                                  \"flex items-center gap-2 p-2 rounded-md transition-all duration-200\",\n-                                  currentStep === index ? \"bg-accent shadow-sm\" : \"hover:bg-accent/50\",\n-                                  index < currentStep && \"text-primary\"\n-                                )}\n-                                onClick={() => setCurrentStep(index)}\n-                                style={{ cursor: 'pointer' }}\n-                              >\n-                                {index < currentStep ? (\n-                                  <CheckCircle2 className=\"h-4 w-4\" />\n-                                ) : (\n-                                  <div className={cn(\n-                                    \"h-4 w-4 rounded-full border\",\n-                                    currentStep === index && \"border-primary\"\n-                                  )} />\n-                                )}\n-                                <span className=\"text-sm\">Question {index + 1}</span>\n-                                {getQuestionIcon(question.type)}\n-                              </motion.div>\n-                            ))}\n-                          </div>\n-                        </div>\n-                      </div>\n-                    </CardContent>\n-                  </Card>\n-                </div>\n-              </LogElement>\n-              \n-              <LogElement name=\"Content Tabs and Navigation\">\n-                <div className=\"space-y-8\">\n-                  <Tabs defaultValue=\"question\" className=\"w-full\">\n-                    <TabsList className=\"mb-4\">\n-                      <TabsTrigger value=\"question\">Question</TabsTrigger>\n-                      <TabsTrigger value=\"teacherScript\">Teacher Script</TabsTrigger>\n-                      <TabsTrigger value=\"activities\">Activities</TabsTrigger>\n-                    </TabsList>\n-\n-                    <AnimatePresence mode=\"wait\">\n-                      <motion.div\n-                        key={currentStep}\n-                        initial={{ opacity: 0, y: 20 }}\n-                        animate={{ opacity: 1, y: 0 }}\n-                        exit={{ opacity: 0, y: -20 }}\n-                        transition={{ duration: 0.3 }}\n-                      >\n-                        <TabsContent value=\"question\">\n-                          <Card>\n-                            <CardHeader>\n-                              <div className=\"flex items-center justify-between\">\n-                                <Badge variant=\"outline\" className=\"bg-primary/5\">\n-                                  Question {currentStep + 1} of {totalSteps}\n-                                </Badge>\n-                                <div className=\"flex items-center gap-2\">\n-                                  <LogElement name=\"Icon: Star\">\n-                                    <Star className=\"h-4 w-4 text-yellow-500\" />\n-                                  </LogElement>\n-                                  <span className=\"text-sm\">{currentQuestion.points} Points</span>\n-                                </div>\n-                              </div>\n-                              <LogElement name=\"Question Title Heading\">\n-                                <CardTitle className=\"text-2xl mt-4\">\n-                                  {currentQuestion.title || \"Question\"}\n-                                </CardTitle>\n-                              </LogElement>\n-                            </CardHeader>\n-                            <CardContent className=\"space-y-6\">\n-                              <div className=\"prose prose-sm dark:prose-invert max-w-none\">\n-                                <div className=\"bg-accent/50 p-4 rounded-lg\">\n-                                  <h3 className=\"text-lg font-semibold mb-2\">Prompt</h3>\n-                                  <p>{currentQuestion.data.prompt || currentQuestion.content}</p>\n-                                </div>\n-\n-                                {currentQuestion.type === 'multiplechoice' && currentQuestion.metadata?.options && (\n-                                  <div className=\"mt-6 space-y-4\">\n-                                    {currentQuestion.metadata.options.map((option, idx) => (\n-                                      <Button\n-                                        key={idx}\n-                                        variant=\"outline\"\n-                                        className=\"w-full justify-start text-left\"\n-                                      >\n-                                        {option}\n-                                      </Button>\n-                                    ))}\n-                                  </div>\n-                                )}\n-\n-                                {currentQuestion.type === 'speaking' && (\n-                                  <div className=\"mt-6\">\n-                                    <Button className=\"w-full justify-center gap-2\">\n-                                      <Mic className=\"h-4 w-4\" />\n-                                      Start Recording\n-                                    </Button>\n-                                  </div>\n-                                )}\n-                              </div>\n-                            </CardContent>\n-                          </Card>\n-                        </TabsContent>\n-\n-                        <TabsContent value=\"teacherScript\">\n-                          <Card>\n-                            <CardContent className=\"p-6\">\n-                              <div className=\"prose prose-sm dark:prose-invert max-w-none\">\n-                                <h3 className=\"text-lg font-semibold mb-4\">Teacher Script</h3>\n-                                <div className=\"bg-accent/50 p-4 rounded-lg\">\n-                                  {currentQuestion.data.teacherScript || \"No teacher script available.\"}\n-                                </div>\n-                              </div>\n-                            </CardContent>\n-                          </Card>\n-                        </TabsContent>\n-\n-                        <TabsContent value=\"activities\">\n-                          <Card>\n-                            <CardContent className=\"p-6\">\n-                              <div className=\"prose prose-sm dark:prose-invert max-w-none\">\n-                                <h3 className=\"text-lg font-semibold mb-4\">Activities</h3>\n-                                {lessonState.lesson.activities?.length > 0 ? (\n-                                  <div className=\"space-y-4\">\n-                                    {lessonState.lesson.activities.map((activity, idx) => (\n-                                      <div key={idx} className=\"bg-accent/50 p-4 rounded-lg\">\n-                                        <h4 className=\"font-medium\">{activity.title}</h4>\n-                                        <p>{activity.description}</p>\n-                                      </div>\n-                                    ))}\n-                                  </div>\n-                                ) : (\n-                                  <p>No activities available for this lesson.</p>\n-                                )}\n-                              </div>\n-                            </CardContent>\n-                          </Card>\n-                        </TabsContent>\n-                      </motion.div>\n-                    </AnimatePresence>\n-                  </Tabs>\n-\n-                  <div className=\"flex items-center justify-between pt-4\">\n-                    <Button\n-                      variant=\"outline\"\n-                      onClick={() => setCurrentStep(prev => Math.max(0, prev - 1))}\n-                      disabled={currentStep === 0}\n-                    >\n-                      <LogElement name=\"Button: Previous\">\n-                        <ArrowLeft className=\"h-4 w-4 mr-2\" />\n-                        Previous\n-                      </LogElement>\n-                    </Button>\n-                    <Button\n-                      onClick={() => {\n-                        if (currentStep < totalSteps - 1) {\n-                          setCurrentStep(prev => prev + 1);\n-                          setProgress(prev => prev + (100 / totalSteps));\n-                        } else {\n-                          handleEndLesson();\n-                        }\n-                      }}\n-                    >\n-                      <LogElement name={currentStep < totalSteps - 1 ? \"Button: Next\" : \"Button: Complete Lesson\"}>\n-                        {currentStep < totalSteps - 1 ? (\n-                          <>\n-                            Next\n-                            <ArrowLeft className=\"h-4 w-4 ml-2 rotate-180\" />\n-                          </>\n-                        ) : (\n-                          <>\n-                            Complete Lesson\n-                            <Flag className=\"h-4 w-4 ml-2\" />\n-                          </>\n-                        )}\n-                      </LogElement>\n-                    </Button>\n-                  </div>\n-                </div>\n-              </LogElement>\n-            </div>\n-          </main>\n-        </LogElement>\n-      </div>\n-    </LessonErrorBoundary>\n-  );\n-} \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739393641401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,468 @@\n+\"use client\";\n+\n+import React, { useState, useEffect, useRef } from 'react';\n+import { useLocation, useNavigate } from 'react-router-dom';\n+import { motion, AnimatePresence } from 'framer-motion';\n+import { useTheme } from 'next-themes';\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n+import { Button } from \"@/components/ui/button\";\n+import { Progress } from \"@/components/ui/progress\";\n+import { Badge } from \"@/components/ui/badge\";\n+import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n+import { ScrollArea } from \"@/components/ui/scroll-area\";\n+import { \n+  BookOpen, \n+  Play, \n+  Pause, \n+  ChevronRight, \n+  Image as ImageIcon,\n+  Video,\n+  Volume2,\n+  VolumeX,\n+  RefreshCw,\n+  ArrowLeft,\n+  ArrowRight\n+} from 'lucide-react';\n+import { useAuth } from '@/hooks/useAuth';\n+import { supabase } from '@/lib/supabase';\n+import { logger } from '@/lib/logger';\n+import { LoadingSpinner } from '@/components/LoadingSpinner';\n+import { cn } from '@/lib/utils';\n+\n+// Types\n+interface LessonState {\n+  lesson: {\n+    id: string;\n+    title: string;\n+    content: string | null;\n+    description: string | null;\n+    topic_id: string | null;\n+    subtopic_id: string;\n+    contentheading: string | null;\n+    questions: Array<{\n+      id: string;\n+      title: string;\n+      content: string;\n+      type: string;\n+      data: {\n+        prompt?: string;\n+        teacherScript?: string;\n+        options?: string[];\n+        metadata?: {\n+          imageUrl?: string;\n+          videoUrl?: string;\n+        };\n+      };\n+    }>;\n+    exercise_prompts: Array<{\n+      id: string;\n+      text: string;\n+      media: string | null;\n+      type: 'image' | 'gif' | 'video';\n+      narration: string | null;\n+      saytext: string | null;\n+    }>;\n+  };\n+  topic?: {\n+    title: string;\n+  };\n+  subtopic?: {\n+    title: string;\n+  };\n+}\n+\n+const LessonPage: React.FC = () => {\n+  const { user } = useAuth();\n+  const location = useLocation();\n+  const navigate = useNavigate();\n+  const { theme } = useTheme();\n+  const [lessonState, setLessonState] = useState<LessonState | null>(null);\n+  const [isLoading, setIsLoading] = useState(true);\n+  const [error, setError] = useState<string | null>(null);\n+  const [isPlaying, setIsPlaying] = useState(false);\n+  const [currentSection, setCurrentSection] = useState(0);\n+  const [progress, setProgress] = useState(0);\n+  const audioRef = useRef<HTMLAudioElement | null>(null);\n+  const [isMuted, setIsMuted] = useState(false);\n+\n+  // Fish Speech API configuration\n+  const FISH_SPEECH_API_KEY = process.env.NEXT_PUBLIC_FISH_SPEECH_API_KEY;\n+  const FISH_SPEECH_ENDPOINT = 'https://api.fishspeech.com/v1/text-to-speech';\n+\n+  useEffect(() => {\n+    const fetchLessonData = async () => {\n+      try {\n+        setIsLoading(true);\n+        const searchParams = new URLSearchParams(location.search);\n+        const stateParam = searchParams.get('state');\n+        const { lessonId } = stateParam ? JSON.parse(stateParam) : {};\n+\n+        if (!lessonId) {\n+          throw new Error('No lesson ID provided');\n+        }\n+\n+        const { data: lessonData, error: lessonError } = await supabase\n+          .from('lessons')\n+          .select(`\n+            *,\n+            topic:topics(title),\n+            subtopic:subtopics(title),\n+            questions(\n+              id, title, content, type,\n+              data\n+            ),\n+            exercise_prompts(*)\n+          `)\n+          .eq('id', lessonId)\n+          .single();\n+\n+        if (lessonError) throw lessonError;\n+\n+        setLessonState({\n+          lesson: lessonData,\n+          topic: lessonData.topic,\n+          subtopic: lessonData.subtopic\n+        });\n+\n+        logger.info('Lesson data fetched successfully', {\n+          source: 'LessonPage',\n+          context: { lessonId }\n+        });\n+      } catch (error) {\n+        logger.error('Error fetching lesson data', {\n+          source: 'LessonPage',\n+          context: { error }\n+        });\n+        setError(error instanceof Error ? error.message : 'Failed to load lesson');\n+      } finally {\n+        setIsLoading(false);\n+      }\n+    };\n+\n+    fetchLessonData();\n+  }, [location.search]);\n+\n+  const handleTextToSpeech = async (text: string) => {\n+    try {\n+      const response = await fetch(FISH_SPEECH_ENDPOINT, {\n+        method: 'POST',\n+        headers: {\n+          'Content-Type': 'application/json',\n+          'Authorization': `Bearer ${FISH_SPEECH_API_KEY}`\n+        },\n+        body: JSON.stringify({\n+          text,\n+          voice_id: lessonState?.lesson.voice_id || 'default',\n+          speed: 1.0\n+        })\n+      });\n+\n+      if (!response.ok) throw new Error('Failed to generate speech');\n+\n+      const audioBlob = await response.blob();\n+      const audioUrl = URL.createObjectURL(audioBlob);\n+      \n+      if (audioRef.current) {\n+        audioRef.current.src = audioUrl;\n+        audioRef.current.play();\n+      }\n+    } catch (error) {\n+      logger.error('Text-to-speech error', {\n+        source: 'LessonPage',\n+        context: { error }\n+      });\n+    }\n+  };\n+\n+  const togglePlayPause = () => {\n+    if (audioRef.current) {\n+      if (isPlaying) {\n+        audioRef.current.pause();\n+      } else {\n+        const currentContent = lessonState?.lesson.content || '';\n+        handleTextToSpeech(currentContent);\n+      }\n+      setIsPlaying(!isPlaying);\n+    }\n+  };\n+\n+  const toggleMute = () => {\n+    if (audioRef.current) {\n+      audioRef.current.muted = !isMuted;\n+      setIsMuted(!isMuted);\n+    }\n+  };\n+\n+  if (isLoading) {\n+    return (\n+      <div className=\"flex items-center justify-center min-h-screen\">\n+        <LoadingSpinner message=\"Loading your lesson...\" />\n+      </div>\n+    );\n+  }\n+\n+  if (error) {\n+    return (\n+      <div className=\"flex items-center justify-center min-h-screen p-4\">\n+        <Card className=\"w-full max-w-md\">\n+          <CardHeader>\n+            <CardTitle className=\"text-red-600\">Error Loading Lesson</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <p className=\"text-sm text-muted-foreground\">{error}</p>\n+            <Button \n+              onClick={() => navigate(-1)}\n+              className=\"mt-4\"\n+              variant=\"outline\"\n+            >\n+              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n+              Go Back\n+            </Button>\n+          </CardContent>\n+        </Card>\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-gradient-to-b from-blue-50 to-purple-50 dark:from-gray-900 dark:to-gray-800\">\n+      <div className=\"container mx-auto px-4 py-8\">\n+        {/* Header Section */}\n+        <motion.div\n+          initial={{ opacity: 0, y: -20 }}\n+          animate={{ opacity: 1, y: 0 }}\n+          className=\"mb-8\"\n+        >\n+          <div className=\"flex flex-col items-start gap-2\">\n+            <div className=\"flex items-center gap-2\">\n+              <Badge variant=\"outline\" className=\"bg-blue-500 text-white\">\n+                {lessonState?.topic?.title}\n+              </Badge>\n+              <ChevronRight className=\"w-4 h-4 text-gray-400\" />\n+              <Badge variant=\"outline\" className=\"bg-purple-500 text-white\">\n+                {lessonState?.subtopic?.title}\n+              </Badge>\n+            </div>\n+            <h1 className=\"text-4xl font-bold text-gray-800 dark:text-white\">\n+              {lessonState?.lesson.contentheading || lessonState?.lesson.title}\n+            </h1>\n+          </div>\n+        </motion.div>\n+\n+        {/* Main Content */}\n+        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n+          {/* Left Section - Lesson Content */}\n+          <div className=\"lg:col-span-2 space-y-6\">\n+            <Card className=\"overflow-hidden border-2 border-primary/10\">\n+              <CardHeader className=\"bg-primary/5 border-b\">\n+                <div className=\"flex items-center justify-between\">\n+                  <CardTitle className=\"flex items-center gap-2\">\n+                    <BookOpen className=\"w-5 h-5 text-primary\" />\n+                    Lesson Content\n+                  </CardTitle>\n+                  <div className=\"flex items-center gap-2\">\n+                    <Button\n+                      variant=\"ghost\"\n+                      size=\"icon\"\n+                      onClick={toggleMute}\n+                      className=\"hover:bg-primary/10\"\n+                    >\n+                      {isMuted ? (\n+                        <VolumeX className=\"w-4 h-4\" />\n+                      ) : (\n+                        <Volume2 className=\"w-4 h-4\" />\n+                      )}\n+                    </Button>\n+                    <Button\n+                      variant=\"ghost\"\n+                      size=\"icon\"\n+                      onClick={togglePlayPause}\n+                      className=\"hover:bg-primary/10\"\n+                    >\n+                      {isPlaying ? (\n+                        <Pause className=\"w-4 h-4\" />\n+                      ) : (\n+                        <Play className=\"w-4 h-4\" />\n+                      )}\n+                    </Button>\n+                  </div>\n+                </div>\n+              </CardHeader>\n+              <CardContent className=\"p-6\">\n+                <ScrollArea className=\"h-[60vh]\">\n+                  <div className=\"prose dark:prose-invert max-w-none\">\n+                    {lessonState?.lesson.content}\n+                  </div>\n+                </ScrollArea>\n+              </CardContent>\n+            </Card>\n+\n+            {/* Questions and Exercise Prompts */}\n+            <Tabs defaultValue=\"questions\" className=\"w-full\">\n+              <TabsList className=\"grid w-full grid-cols-2\">\n+                <TabsTrigger value=\"questions\">Questions</TabsTrigger>\n+                <TabsTrigger value=\"exercises\">Exercises</TabsTrigger>\n+              </TabsList>\n+              <TabsContent value=\"questions\">\n+                <Card>\n+                  <CardContent className=\"p-6 space-y-4\">\n+                    {lessonState?.lesson.questions.map((question, index) => (\n+                      <motion.div\n+                        key={question.id}\n+                        initial={{ opacity: 0, x: -20 }}\n+                        animate={{ opacity: 1, x: 0 }}\n+                        transition={{ delay: index * 0.1 }}\n+                      >\n+                        <Card className=\"border border-primary/10\">\n+                          <CardHeader>\n+                            <CardTitle className=\"text-lg\">\n+                              Question {index + 1}: {question.title}\n+                            </CardTitle>\n+                          </CardHeader>\n+                          <CardContent>\n+                            <p className=\"text-gray-600 dark:text-gray-300\">\n+                              {question.content}\n+                            </p>\n+                            {question.data?.options && (\n+                              <div className=\"mt-4 space-y-2\">\n+                                {question.data.options.map((option, optIndex) => (\n+                                  <div\n+                                    key={optIndex}\n+                                    className=\"flex items-center gap-2 p-2 rounded-lg hover:bg-primary/5\"\n+                                  >\n+                                    <div className=\"w-6 h-6 rounded-full bg-primary/10 flex items-center justify-center\">\n+                                      {String.fromCharCode(65 + optIndex)}\n+                                    </div>\n+                                    <span>{option}</span>\n+                                  </div>\n+                                ))}\n+                              </div>\n+                            )}\n+                          </CardContent>\n+                        </Card>\n+                      </motion.div>\n+                    ))}\n+                  </CardContent>\n+                </Card>\n+              </TabsContent>\n+              <TabsContent value=\"exercises\">\n+                <Card>\n+                  <CardContent className=\"p-6 space-y-4\">\n+                    {lessonState?.lesson.exercise_prompts.map((prompt, index) => (\n+                      <motion.div\n+                        key={prompt.id}\n+                        initial={{ opacity: 0, x: -20 }}\n+                        animate={{ opacity: 1, x: 0 }}\n+                        transition={{ delay: index * 0.1 }}\n+                      >\n+                        <Card className=\"border border-primary/10\">\n+                          <CardHeader>\n+                            <CardTitle className=\"text-lg\">\n+                              Exercise {index + 1}\n+                            </CardTitle>\n+                          </CardHeader>\n+                          <CardContent>\n+                            <p className=\"text-gray-600 dark:text-gray-300\">\n+                              {prompt.text}\n+                            </p>\n+                            {prompt.media && (\n+                              <div className=\"mt-4\">\n+                                {prompt.type === 'image' && (\n+                                  <img\n+                                    src={prompt.media}\n+                                    alt={`Exercise ${index + 1}`}\n+                                    className=\"rounded-lg max-h-48 object-cover\"\n+                                  />\n+                                )}\n+                                {prompt.type === 'video' && (\n+                                  <video\n+                                    src={prompt.media}\n+                                    controls\n+                                    className=\"rounded-lg w-full\"\n+                                  />\n+                                )}\n+                              </div>\n+                            )}\n+                          </CardContent>\n+                        </Card>\n+                      </motion.div>\n+                    ))}\n+                  </CardContent>\n+                </Card>\n+              </TabsContent>\n+            </Tabs>\n+          </div>\n+\n+          {/* Right Section - Media */}\n+          <div className=\"lg:col-span-1\">\n+            <Card className=\"sticky top-4\">\n+              <CardHeader className=\"bg-primary/5 border-b\">\n+                <CardTitle className=\"flex items-center gap-2\">\n+                  <ImageIcon className=\"w-5 h-5 text-primary\" />\n+                  Media\n+                </CardTitle>\n+              </CardHeader>\n+              <CardContent className=\"p-6\">\n+                <ScrollArea className=\"h-[70vh]\">\n+                  <div className=\"space-y-4\">\n+                    {lessonState?.lesson.questions.map((question, index) => (\n+                      question.data?.metadata?.imageUrl && (\n+                        <motion.div\n+                          key={`image-${index}`}\n+                          initial={{ opacity: 0, scale: 0.9 }}\n+                          animate={{ opacity: 1, scale: 1 }}\n+                          transition={{ delay: index * 0.1 }}\n+                        >\n+                          <Card className=\"overflow-hidden\">\n+                            <img\n+                              src={question.data.metadata.imageUrl}\n+                              alt={`Media ${index + 1}`}\n+                              className=\"w-full h-48 object-cover\"\n+                            />\n+                          </Card>\n+                        </motion.div>\n+                      )\n+                    ))}\n+                    {lessonState?.lesson.questions.map((question, index) => (\n+                      question.data?.metadata?.videoUrl && (\n+                        <motion.div\n+                          key={`video-${index}`}\n+                          initial={{ opacity: 0, scale: 0.9 }}\n+                          animate={{ opacity: 1, scale: 1 }}\n+                          transition={{ delay: index * 0.1 }}\n+                        >\n+                          <Card className=\"overflow-hidden\">\n+                            <video\n+                              src={question.data.metadata.videoUrl}\n+                              controls\n+                              className=\"w-full\"\n+                            />\n+                          </Card>\n+                        </motion.div>\n+                      )\n+                    ))}\n+                  </div>\n+                </ScrollArea>\n+              </CardContent>\n+            </Card>\n+          </div>\n+        </div>\n+\n+        {/* Audio Element */}\n+        <audio\n+          ref={audioRef}\n+          onEnded={() => setIsPlaying(false)}\n+          onError={(e) => {\n+            logger.error('Audio playback error', {\n+              source: 'LessonPage',\n+              context: { error: e }\n+            });\n+            setIsPlaying(false);\n+          }}\n+        />\n+      </div>\n+    </div>\n+  );\n+};\n+\n+export default LessonPage;\n"
                },
                {
                    "date": 1739393803770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,8 +38,9 @@\n     description: string | null;\n     topic_id: string | null;\n     subtopic_id: string;\n     contentheading: string | null;\n+    voice_id: string | null;\n     questions: Array<{\n       id: string;\n       title: string;\n       content: string;\n@@ -94,14 +95,30 @@\n       try {\n         setIsLoading(true);\n         const searchParams = new URLSearchParams(location.search);\n         const stateParam = searchParams.get('state');\n-        const { lessonId } = stateParam ? JSON.parse(stateParam) : {};\n+        const state = stateParam ? JSON.parse(decodeURIComponent(stateParam)) : null;\n \n-        if (!lessonId) {\n+        if (!state?.lessonId) {\n           throw new Error('No lesson ID provided');\n         }\n \n+        // If we have context data from the dialog, use it\n+        if (state.context?.lesson) {\n+          setLessonState({\n+            lesson: state.context.lesson,\n+            topic: { title: state.context.topic },\n+            subtopic: { title: state.context.subtopic }\n+          });\n+          logger.info('Lesson data loaded from dialog context', {\n+            source: 'LessonPage',\n+            context: { lessonId: state.lessonId }\n+          });\n+          setIsLoading(false);\n+          return;\n+        }\n+\n+        // Otherwise fetch from Supabase\n         const { data: lessonData, error: lessonError } = await supabase\n           .from('lessons')\n           .select(`\n             *,\n@@ -112,9 +129,9 @@\n               data\n             ),\n             exercise_prompts(*)\n           `)\n-          .eq('id', lessonId)\n+          .eq('id', state.lessonId)\n           .single();\n \n         if (lessonError) throw lessonError;\n \n@@ -125,9 +142,9 @@\n         });\n \n         logger.info('Lesson data fetched successfully', {\n           source: 'LessonPage',\n-          context: { lessonId }\n+          context: { lessonId: state.lessonId }\n         });\n       } catch (error) {\n         logger.error('Error fetching lesson data', {\n           source: 'LessonPage',\n@@ -141,8 +158,29 @@\n \n     fetchLessonData();\n   }, [location.search]);\n \n+  // Add message listener for iframe communication\n+  useEffect(() => {\n+    const handleMessage = (event: MessageEvent) => {\n+      if (event.data?.type === 'LESSON_CONTEXT') {\n+        const { payload } = event.data;\n+        setLessonState({\n+          lesson: payload.lesson,\n+          topic: { title: payload.topic },\n+          subtopic: { title: payload.subtopic }\n+        });\n+        logger.info('Lesson data received from parent', {\n+          source: 'LessonPage',\n+          context: { lessonId: payload.lessonId }\n+        });\n+      }\n+    };\n+\n+    window.addEventListener('message', handleMessage);\n+    return () => window.removeEventListener('message', handleMessage);\n+  }, []);\n+\n   const handleTextToSpeech = async (text: string) => {\n     try {\n       const response = await fetch(FISH_SPEECH_ENDPOINT, {\n         method: 'POST',\n"
                },
                {
                    "date": 1739437469824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,64 +94,85 @@\n     const fetchLessonData = async () => {\n       try {\n         setIsLoading(true);\n         const searchParams = new URLSearchParams(location.search);\n-        const stateParam = searchParams.get('state');\n-        const state = stateParam ? JSON.parse(decodeURIComponent(stateParam)) : null;\n+        const lessonId = searchParams.get('lessonId');\n+        const context = searchParams.get('context');\n \n-        if (!state?.lessonId) {\n-          throw new Error('No lesson ID provided');\n+        // First try to get data from URL parameters\n+        if (lessonId && context) {\n+          try {\n+            const decodedContext = JSON.parse(decodeURIComponent(context));\n+            setLessonState({\n+              lesson: decodedContext.lesson,\n+              topic: { title: decodedContext.topic },\n+              subtopic: { title: decodedContext.subtopic }\n+            });\n+            \n+            // Notify parent that lesson is loaded\n+            window.parent.postMessage({ type: 'LESSON_LOADED', lessonId }, '*');\n+            \n+            logger.info('Lesson data loaded from URL context', {\n+              source: 'LessonPage',\n+              context: { lessonId }\n+            });\n+            setIsLoading(false);\n+            return;\n+          } catch (parseError) {\n+            logger.warn('Failed to parse context from URL', {\n+              source: 'LessonPage',\n+              context: { error: parseError }\n+            });\n+          }\n         }\n \n-        // If we have context data from the dialog, use it\n-        if (state.context?.lesson) {\n+        // If URL data is not available, try to fetch from Supabase\n+        if (lessonId) {\n+          const { data: lessonData, error: lessonError } = await supabase\n+            .from('lessons')\n+            .select(`\n+              *,\n+              topic:topics(title),\n+              subtopic:subtopics(title),\n+              questions(\n+                id, title, content, type,\n+                data\n+              ),\n+              exercise_prompts(*)\n+            `)\n+            .eq('id', lessonId)\n+            .single();\n+\n+          if (lessonError) throw lessonError;\n+\n           setLessonState({\n-            lesson: state.context.lesson,\n-            topic: { title: state.context.topic },\n-            subtopic: { title: state.context.subtopic }\n+            lesson: lessonData,\n+            topic: lessonData.topic,\n+            subtopic: lessonData.subtopic\n           });\n-          logger.info('Lesson data loaded from dialog context', {\n+\n+          // Notify parent that lesson is loaded\n+          window.parent.postMessage({ type: 'LESSON_LOADED', lessonId }, '*');\n+\n+          logger.info('Lesson data fetched successfully', {\n             source: 'LessonPage',\n-            context: { lessonId: state.lessonId }\n+            context: { lessonId }\n           });\n-          setIsLoading(false);\n-          return;\n+        } else {\n+          throw new Error('No lesson ID provided');\n         }\n-\n-        // Otherwise fetch from Supabase\n-        const { data: lessonData, error: lessonError } = await supabase\n-          .from('lessons')\n-          .select(`\n-            *,\n-            topic:topics(title),\n-            subtopic:subtopics(title),\n-            questions(\n-              id, title, content, type,\n-              data\n-            ),\n-            exercise_prompts(*)\n-          `)\n-          .eq('id', state.lessonId)\n-          .single();\n-\n-        if (lessonError) throw lessonError;\n-\n-        setLessonState({\n-          lesson: lessonData,\n-          topic: lessonData.topic,\n-          subtopic: lessonData.subtopic\n-        });\n-\n-        logger.info('Lesson data fetched successfully', {\n-          source: 'LessonPage',\n-          context: { lessonId: state.lessonId }\n-        });\n       } catch (error) {\n         logger.error('Error fetching lesson data', {\n           source: 'LessonPage',\n           context: { error }\n         });\n         setError(error instanceof Error ? error.message : 'Failed to load lesson');\n+        \n+        // Notify parent of error\n+        window.parent.postMessage({ \n+          type: 'LESSON_ERROR', \n+          error: error instanceof Error ? error.message : 'Failed to load lesson'\n+        }, '*');\n       } finally {\n         setIsLoading(false);\n       }\n     };\n@@ -161,26 +182,61 @@\n \n   // Add message listener for iframe communication\n   useEffect(() => {\n     const handleMessage = (event: MessageEvent) => {\n+      // Validate message origin if needed\n       if (event.data?.type === 'LESSON_CONTEXT') {\n-        const { payload } = event.data;\n-        setLessonState({\n-          lesson: payload.lesson,\n-          topic: { title: payload.topic },\n-          subtopic: { title: payload.subtopic }\n-        });\n-        logger.info('Lesson data received from parent', {\n-          source: 'LessonPage',\n-          context: { lessonId: payload.lessonId }\n-        });\n+        try {\n+          const { payload } = event.data;\n+          setLessonState({\n+            lesson: payload.lesson,\n+            topic: { title: payload.topic },\n+            subtopic: { title: payload.subtopic }\n+          });\n+          \n+          // Notify parent that context was received and processed\n+          window.parent.postMessage({ \n+            type: 'LESSON_CONTEXT_RECEIVED',\n+            lessonId: payload.lesson.id \n+          }, '*');\n+          \n+          logger.info('Lesson context received from parent', {\n+            source: 'LessonPage',\n+            context: { lessonId: payload.lesson.id }\n+          });\n+        } catch (error) {\n+          logger.error('Error processing lesson context', {\n+            source: 'LessonPage',\n+            context: { error }\n+          });\n+          \n+          // Notify parent of error\n+          window.parent.postMessage({ \n+            type: 'LESSON_ERROR',\n+            error: 'Failed to process lesson context'\n+          }, '*');\n+        }\n       }\n     };\n \n     window.addEventListener('message', handleMessage);\n     return () => window.removeEventListener('message', handleMessage);\n   }, []);\n \n+  // Handle navigation attempts\n+  useEffect(() => {\n+    const handleBeforeUnload = (event: BeforeUnloadEvent) => {\n+      // Notify parent before unloading\n+      window.parent.postMessage({ \n+        type: 'LESSON_UNLOADING',\n+        lessonId: lessonState?.lesson.id \n+      }, '*');\n+    };\n+\n+    window.addEventListener('beforeunload', handleBeforeUnload);\n+    return () => window.removeEventListener('beforeunload', handleBeforeUnload);\n+  }, [lessonState?.lesson.id]);\n+\n   const handleTextToSpeech = async (text: string) => {\n     try {\n       const response = await fetch(FISH_SPEECH_ENDPOINT, {\n         method: 'POST',\n"
                },
                {
                    "date": 1739437946246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -329,17 +329,17 @@\n         >\n           <div className=\"flex flex-col items-start gap-2\">\n             <div className=\"flex items-center gap-2\">\n               <Badge variant=\"outline\" className=\"bg-blue-500 text-white\">\n-                {lessonState?.topic?.title}\n+                {lessonState?.topic?.title || 'Topic'}\n               </Badge>\n               <ChevronRight className=\"w-4 h-4 text-gray-400\" />\n               <Badge variant=\"outline\" className=\"bg-purple-500 text-white\">\n-                {lessonState?.subtopic?.title}\n+                {lessonState?.subtopic?.title || 'Subtopic'}\n               </Badge>\n             </div>\n             <h1 className=\"text-4xl font-bold text-gray-800 dark:text-white\">\n-              {lessonState?.lesson.contentheading || lessonState?.lesson.title}\n+              {lessonState?.lesson.contentheading || lessonState?.lesson.title || 'Lesson Content'}\n             </h1>\n           </div>\n         </motion.div>\n \n@@ -384,9 +384,9 @@\n               </CardHeader>\n               <CardContent className=\"p-6\">\n                 <ScrollArea className=\"h-[60vh]\">\n                   <div className=\"prose dark:prose-invert max-w-none\">\n-                    {lessonState?.lesson.content}\n+                    {lessonState?.lesson.content || 'No content available'}\n                   </div>\n                 </ScrollArea>\n               </CardContent>\n             </Card>\n@@ -399,89 +399,101 @@\n               </TabsList>\n               <TabsContent value=\"questions\">\n                 <Card>\n                   <CardContent className=\"p-6 space-y-4\">\n-                    {lessonState?.lesson.questions.map((question, index) => (\n-                      <motion.div\n-                        key={question.id}\n-                        initial={{ opacity: 0, x: -20 }}\n-                        animate={{ opacity: 1, x: 0 }}\n-                        transition={{ delay: index * 0.1 }}\n-                      >\n-                        <Card className=\"border border-primary/10\">\n-                          <CardHeader>\n-                            <CardTitle className=\"text-lg\">\n-                              Question {index + 1}: {question.title}\n-                            </CardTitle>\n-                          </CardHeader>\n-                          <CardContent>\n-                            <p className=\"text-gray-600 dark:text-gray-300\">\n-                              {question.content}\n-                            </p>\n-                            {question.data?.options && (\n-                              <div className=\"mt-4 space-y-2\">\n-                                {question.data.options.map((option, optIndex) => (\n-                                  <div\n-                                    key={optIndex}\n-                                    className=\"flex items-center gap-2 p-2 rounded-lg hover:bg-primary/5\"\n-                                  >\n-                                    <div className=\"w-6 h-6 rounded-full bg-primary/10 flex items-center justify-center\">\n-                                      {String.fromCharCode(65 + optIndex)}\n+                    {lessonState?.lesson.questions?.length ? (\n+                      lessonState.lesson.questions.map((question, index) => (\n+                        <motion.div\n+                          key={question.id}\n+                          initial={{ opacity: 0, x: -20 }}\n+                          animate={{ opacity: 1, x: 0 }}\n+                          transition={{ delay: index * 0.1 }}\n+                        >\n+                          <Card className=\"border border-primary/10\">\n+                            <CardHeader>\n+                              <CardTitle className=\"text-lg\">\n+                                Question {index + 1}: {question.title}\n+                              </CardTitle>\n+                            </CardHeader>\n+                            <CardContent>\n+                              <p className=\"text-gray-600 dark:text-gray-300\">\n+                                {question.content}\n+                              </p>\n+                              {question.data?.options && (\n+                                <div className=\"mt-4 space-y-2\">\n+                                  {question.data.options.map((option, optIndex) => (\n+                                    <div\n+                                      key={optIndex}\n+                                      className=\"flex items-center gap-2 p-2 rounded-lg hover:bg-primary/5\"\n+                                    >\n+                                      <div className=\"w-6 h-6 rounded-full bg-primary/10 flex items-center justify-center\">\n+                                        {String.fromCharCode(65 + optIndex)}\n+                                      </div>\n+                                      <span>{option}</span>\n                                     </div>\n-                                    <span>{option}</span>\n-                                  </div>\n-                                ))}\n-                              </div>\n-                            )}\n-                          </CardContent>\n-                        </Card>\n-                      </motion.div>\n-                    ))}\n+                                  ))}\n+                                </div>\n+                              )}\n+                            </CardContent>\n+                          </Card>\n+                        </motion.div>\n+                      ))\n+                    ) : (\n+                      <div className=\"text-center py-8 text-muted-foreground\">\n+                        No questions available for this lesson\n+                      </div>\n+                    )}\n                   </CardContent>\n                 </Card>\n               </TabsContent>\n               <TabsContent value=\"exercises\">\n                 <Card>\n                   <CardContent className=\"p-6 space-y-4\">\n-                    {lessonState?.lesson.exercise_prompts.map((prompt, index) => (\n-                      <motion.div\n-                        key={prompt.id}\n-                        initial={{ opacity: 0, x: -20 }}\n-                        animate={{ opacity: 1, x: 0 }}\n-                        transition={{ delay: index * 0.1 }}\n-                      >\n-                        <Card className=\"border border-primary/10\">\n-                          <CardHeader>\n-                            <CardTitle className=\"text-lg\">\n-                              Exercise {index + 1}\n-                            </CardTitle>\n-                          </CardHeader>\n-                          <CardContent>\n-                            <p className=\"text-gray-600 dark:text-gray-300\">\n-                              {prompt.text}\n-                            </p>\n-                            {prompt.media && (\n-                              <div className=\"mt-4\">\n-                                {prompt.type === 'image' && (\n-                                  <img\n-                                    src={prompt.media}\n-                                    alt={`Exercise ${index + 1}`}\n-                                    className=\"rounded-lg max-h-48 object-cover\"\n-                                  />\n-                                )}\n-                                {prompt.type === 'video' && (\n-                                  <video\n-                                    src={prompt.media}\n-                                    controls\n-                                    className=\"rounded-lg w-full\"\n-                                  />\n-                                )}\n-                              </div>\n-                            )}\n-                          </CardContent>\n-                        </Card>\n-                      </motion.div>\n-                    ))}\n+                    {lessonState?.lesson.exercise_prompts?.length ? (\n+                      lessonState.lesson.exercise_prompts.map((prompt, index) => (\n+                        <motion.div\n+                          key={prompt.id}\n+                          initial={{ opacity: 0, x: -20 }}\n+                          animate={{ opacity: 1, x: 0 }}\n+                          transition={{ delay: index * 0.1 }}\n+                        >\n+                          <Card className=\"border border-primary/10\">\n+                            <CardHeader>\n+                              <CardTitle className=\"text-lg\">\n+                                Exercise {index + 1}\n+                              </CardTitle>\n+                            </CardHeader>\n+                            <CardContent>\n+                              <p className=\"text-gray-600 dark:text-gray-300\">\n+                                {prompt.text}\n+                              </p>\n+                              {prompt.media && (\n+                                <div className=\"mt-4\">\n+                                  {prompt.type === 'image' && (\n+                                    <img\n+                                      src={prompt.media}\n+                                      alt={`Exercise ${index + 1}`}\n+                                      className=\"rounded-lg max-h-48 object-cover\"\n+                                    />\n+                                  )}\n+                                  {prompt.type === 'video' && (\n+                                    <video\n+                                      src={prompt.media}\n+                                      controls\n+                                      className=\"rounded-lg w-full\"\n+                                    />\n+                                  )}\n+                                </div>\n+                              )}\n+                            </CardContent>\n+                          </Card>\n+                        </motion.div>\n+                      ))\n+                    ) : (\n+                      <div className=\"text-center py-8 text-muted-foreground\">\n+                        No exercises available for this lesson\n+                      </div>\n+                    )}\n                   </CardContent>\n                 </Card>\n               </TabsContent>\n             </Tabs>\n@@ -498,44 +510,50 @@\n               </CardHeader>\n               <CardContent className=\"p-6\">\n                 <ScrollArea className=\"h-[70vh]\">\n                   <div className=\"space-y-4\">\n-                    {lessonState?.lesson.questions.map((question, index) => (\n-                      question.data?.metadata?.imageUrl && (\n-                        <motion.div\n-                          key={`image-${index}`}\n-                          initial={{ opacity: 0, scale: 0.9 }}\n-                          animate={{ opacity: 1, scale: 1 }}\n-                          transition={{ delay: index * 0.1 }}\n-                        >\n-                          <Card className=\"overflow-hidden\">\n-                            <img\n-                              src={question.data.metadata.imageUrl}\n-                              alt={`Media ${index + 1}`}\n-                              className=\"w-full h-48 object-cover\"\n-                            />\n-                          </Card>\n-                        </motion.div>\n-                      )\n-                    ))}\n-                    {lessonState?.lesson.questions.map((question, index) => (\n-                      question.data?.metadata?.videoUrl && (\n-                        <motion.div\n-                          key={`video-${index}`}\n-                          initial={{ opacity: 0, scale: 0.9 }}\n-                          animate={{ opacity: 1, scale: 1 }}\n-                          transition={{ delay: index * 0.1 }}\n-                        >\n-                          <Card className=\"overflow-hidden\">\n-                            <video\n-                              src={question.data.metadata.videoUrl}\n-                              controls\n-                              className=\"w-full\"\n-                            />\n-                          </Card>\n-                        </motion.div>\n-                      )\n-                    ))}\n+                    {lessonState?.lesson.questions?.some(q => q.data?.metadata?.imageUrl || q.data?.metadata?.videoUrl) ? (\n+                      <>\n+                        {lessonState.lesson.questions.map((question, index) => (\n+                          <React.Fragment key={`media-${index}`}>\n+                            {question.data?.metadata?.imageUrl && (\n+                              <motion.div\n+                                initial={{ opacity: 0, scale: 0.9 }}\n+                                animate={{ opacity: 1, scale: 1 }}\n+                                transition={{ delay: index * 0.1 }}\n+                              >\n+                                <Card className=\"overflow-hidden\">\n+                                  <img\n+                                    src={question.data.metadata.imageUrl}\n+                                    alt={`Media ${index + 1}`}\n+                                    className=\"w-full h-48 object-cover\"\n+                                  />\n+                                </Card>\n+                              </motion.div>\n+                            )}\n+                            {question.data?.metadata?.videoUrl && (\n+                              <motion.div\n+                                initial={{ opacity: 0, scale: 0.9 }}\n+                                animate={{ opacity: 1, scale: 1 }}\n+                                transition={{ delay: index * 0.1 }}\n+                              >\n+                                <Card className=\"overflow-hidden\">\n+                                  <video\n+                                    src={question.data.metadata.videoUrl}\n+                                    controls\n+                                    className=\"w-full\"\n+                                  />\n+                                </Card>\n+                              </motion.div>\n+                            )}\n+                          </React.Fragment>\n+                        ))}\n+                      </>\n+                    ) : (\n+                      <div className=\"text-center py-8 text-muted-foreground\">\n+                        No media content available\n+                      </div>\n+                    )}\n                   </div>\n                 </ScrollArea>\n               </CardContent>\n             </Card>\n"
                },
                {
                    "date": 1739437997818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,8 +84,9 @@\n   const [currentSection, setCurrentSection] = useState(0);\n   const [progress, setProgress] = useState(0);\n   const audioRef = useRef<HTMLAudioElement | null>(null);\n   const [isMuted, setIsMuted] = useState(false);\n+  const [authSession, setAuthSession] = useState<any>(null);\n \n   // Fish Speech API configuration\n   const FISH_SPEECH_API_KEY = process.env.NEXT_PUBLIC_FISH_SPEECH_API_KEY;\n   const FISH_SPEECH_ENDPOINT = 'https://api.fishspeech.com/v1/text-to-speech';\n@@ -108,13 +109,20 @@\n               subtopic: { title: decodedContext.subtopic }\n             });\n             \n             // Notify parent that lesson is loaded\n-            window.parent.postMessage({ type: 'LESSON_LOADED', lessonId }, '*');\n+            window.parent.postMessage({ \n+              type: 'LESSON_LOADED', \n+              lessonId,\n+              timestamp: decodedContext.timestamp \n+            }, '*');\n             \n             logger.info('Lesson data loaded from URL context', {\n               source: 'LessonPage',\n-              context: { lessonId }\n+              context: { \n+                lessonId,\n+                timestamp: decodedContext.timestamp\n+              }\n             });\n             setIsLoading(false);\n             return;\n           } catch (parseError) {\n@@ -124,10 +132,16 @@\n             });\n           }\n         }\n \n-        // If URL data is not available, try to fetch from Supabase\n+        // If URL data is not available or invalid, try to fetch from Supabase\n         if (lessonId) {\n+          // Ensure we have a valid session before making the request\n+          const { data: { session } } = await supabase.auth.getSession();\n+          if (!session) {\n+            throw new Error('No authenticated session available');\n+          }\n+\n           const { data: lessonData, error: lessonError } = await supabase\n             .from('lessons')\n             .select(`\n               *,\n@@ -150,13 +164,20 @@\n             subtopic: lessonData.subtopic\n           });\n \n           // Notify parent that lesson is loaded\n-          window.parent.postMessage({ type: 'LESSON_LOADED', lessonId }, '*');\n+          window.parent.postMessage({ \n+            type: 'LESSON_LOADED', \n+            lessonId,\n+            timestamp: new Date().toISOString()\n+          }, '*');\n \n           logger.info('Lesson data fetched successfully', {\n             source: 'LessonPage',\n-            context: { lessonId }\n+            context: { \n+              lessonId,\n+              hasAuth: !!session\n+            }\n           });\n         } else {\n           throw new Error('No lesson ID provided');\n         }\n"
                },
                {
                    "date": 1739438004249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,12 +203,22 @@\n \n   // Add message listener for iframe communication\n   useEffect(() => {\n     const handleMessage = (event: MessageEvent) => {\n-      // Validate message origin if needed\n-      if (event.data?.type === 'LESSON_CONTEXT') {\n+      // Only handle messages from our iframe\n+      if (!event.data || typeof event.data !== 'object') return;\n+\n+      if (event.data.type === 'LESSON_CONTEXT') {\n         try {\n           const { payload } = event.data;\n+          \n+          // Set auth session if provided\n+          if (payload.auth?.session) {\n+            setAuthSession(payload.auth.session);\n+            // Update Supabase auth state\n+            supabase.auth.setSession(payload.auth.session);\n+          }\n+          \n           setLessonState({\n             lesson: payload.lesson,\n             topic: { title: payload.topic },\n             subtopic: { title: payload.subtopic }\n@@ -221,9 +231,12 @@\n           }, '*');\n           \n           logger.info('Lesson context received from parent', {\n             source: 'LessonPage',\n-            context: { lessonId: payload.lesson.id }\n+            context: { \n+              lessonId: payload.lesson.id,\n+              hasAuth: !!payload.auth?.session\n+            }\n           });\n         } catch (error) {\n           logger.error('Error processing lesson context', {\n             source: 'LessonPage',\n@@ -242,21 +255,25 @@\n     window.addEventListener('message', handleMessage);\n     return () => window.removeEventListener('message', handleMessage);\n   }, []);\n \n-  // Handle navigation attempts\n+  // Add this effect to handle navigation attempts\n   useEffect(() => {\n-    const handleBeforeUnload = (event: BeforeUnloadEvent) => {\n-      // Notify parent before unloading\n-      window.parent.postMessage({ \n-        type: 'LESSON_UNLOADING',\n-        lessonId: lessonState?.lesson.id \n+    const handleBeforeUnload = (e: BeforeUnloadEvent) => {\n+      // Prevent unintended navigation\n+      e.preventDefault();\n+      e.returnValue = '';\n+      \n+      // Notify parent\n+      window.parent.postMessage({\n+        type: 'NAVIGATION_ATTEMPT',\n+        timestamp: new Date().toISOString()\n       }, '*');\n     };\n \n     window.addEventListener('beforeunload', handleBeforeUnload);\n     return () => window.removeEventListener('beforeunload', handleBeforeUnload);\n-  }, [lessonState?.lesson.id]);\n+  }, []);\n \n   const handleTextToSpeech = async (text: string) => {\n     try {\n       const response = await fetch(FISH_SPEECH_ENDPOINT, {\n"
                },
                {
                    "date": 1739441863781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -202,9 +202,9 @@\n   }, [location.search]);\n \n   // Add message listener for iframe communication\n   useEffect(() => {\n-    const handleMessage = (event: MessageEvent) => {\n+    const handleMessage = async (event: MessageEvent) => {\n       // Only handle messages from our iframe\n       if (!event.data || typeof event.data !== 'object') return;\n \n       if (event.data.type === 'LESSON_CONTEXT') {\n@@ -212,13 +212,19 @@\n           const { payload } = event.data;\n           \n           // Set auth session if provided\n           if (payload.auth?.session) {\n+            // First update Supabase auth state\n+            await supabase.auth.setSession(payload.auth.session);\n+            // Then update local auth state\n             setAuthSession(payload.auth.session);\n-            // Update Supabase auth state\n-            supabase.auth.setSession(payload.auth.session);\n           }\n           \n+          // Store session in localStorage for persistence\n+          if (payload.auth?.session) {\n+            localStorage.setItem('supabase.auth.token', JSON.stringify(payload.auth.session));\n+          }\n+          \n           setLessonState({\n             lesson: payload.lesson,\n             topic: { title: payload.topic },\n             subtopic: { title: payload.subtopic }\n@@ -226,12 +232,13 @@\n           \n           // Notify parent that context was received and processed\n           window.parent.postMessage({ \n             type: 'LESSON_CONTEXT_RECEIVED',\n-            lessonId: payload.lesson.id \n+            lessonId: payload.lesson.id,\n+            status: 'success'\n           }, '*');\n           \n-          logger.info('Lesson context received from parent', {\n+          logger.info('Lesson context received and session restored', {\n             source: 'LessonPage',\n             context: { \n               lessonId: payload.lesson.id,\n               hasAuth: !!payload.auth?.session\n@@ -245,16 +252,42 @@\n           \n           // Notify parent of error\n           window.parent.postMessage({ \n             type: 'LESSON_ERROR',\n-            error: 'Failed to process lesson context'\n+            error: 'Failed to process lesson context',\n+            status: 'error'\n           }, '*');\n         }\n       }\n     };\n \n     window.addEventListener('message', handleMessage);\n-    return () => window.removeEventListener('message', handleMessage);\n+    \n+    // Setup session refresh interval\n+    const refreshInterval = setInterval(async () => {\n+      try {\n+        const { data: { session }, error } = await supabase.auth.getSession();\n+        if (error) throw error;\n+        \n+        if (session) {\n+          await supabase.auth.refreshSession();\n+          logger.info('Session refreshed successfully', {\n+            source: 'LessonPage',\n+            context: { timestamp: new Date().toISOString() }\n+          });\n+        }\n+      } catch (error) {\n+        logger.error('Session refresh failed', {\n+          source: 'LessonPage',\n+          context: { error }\n+        });\n+      }\n+    }, 4 * 60 * 1000); // Refresh every 4 minutes\n+\n+    return () => {\n+      window.removeEventListener('message', handleMessage);\n+      clearInterval(refreshInterval);\n+    };\n   }, []);\n \n   // Add this effect to handle navigation attempts\n   useEffect(() => {\n"
                },
                {
                    "date": 1739444808213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,10 @@\n   Volume2,\n   VolumeX,\n   RefreshCw,\n   ArrowLeft,\n-  ArrowRight\n+  ArrowRight,\n+  Clock\n } from 'lucide-react';\n import { useAuth } from '@/hooks/useAuth';\n import { supabase } from '@/lib/supabase';\n import { logger } from '@/lib/logger';\n@@ -90,8 +91,17 @@\n   // Fish Speech API configuration\n   const FISH_SPEECH_API_KEY = process.env.NEXT_PUBLIC_FISH_SPEECH_API_KEY;\n   const FISH_SPEECH_ENDPOINT = 'https://api.fishspeech.com/v1/text-to-speech';\n \n+  // Add new state for interactive features\n+  const [activeQuestionIndex, setActiveQuestionIndex] = useState<number | null>(null);\n+  const [selectedAnswers, setSelectedAnswers] = useState<Record<string, string>>({});\n+  const [showFeedback, setShowFeedback] = useState<Record<string, boolean>>({});\n+  const [contentProgress, setContentProgress] = useState(0);\n+\n+  // Add scroll progress tracking\n+  const contentRef = useRef<HTMLDivElement>(null);\n+  \n   useEffect(() => {\n     const fetchLessonData = async () => {\n       try {\n         setIsLoading(true);\n@@ -306,8 +316,32 @@\n     window.addEventListener('beforeunload', handleBeforeUnload);\n     return () => window.removeEventListener('beforeunload', handleBeforeUnload);\n   }, []);\n \n+  useEffect(() => {\n+    const handleScroll = () => {\n+      if (contentRef.current) {\n+        const { scrollTop, scrollHeight, clientHeight } = contentRef.current;\n+        const progress = (scrollTop / (scrollHeight - clientHeight)) * 100;\n+        setContentProgress(Math.min(progress, 100));\n+        \n+        logger.info('Content scroll progress', {\n+          source: 'LessonPage',\n+          context: { \n+            progress: Math.round(progress),\n+            timestamp: new Date().toISOString()\n+          }\n+        });\n+      }\n+    };\n+\n+    const contentElement = contentRef.current;\n+    if (contentElement) {\n+      contentElement.addEventListener('scroll', handleScroll);\n+      return () => contentElement.removeEventListener('scroll', handleScroll);\n+    }\n+  }, []);\n+\n   const handleTextToSpeech = async (text: string) => {\n     try {\n       const response = await fetch(FISH_SPEECH_ENDPOINT, {\n         method: 'POST',\n@@ -357,8 +391,21 @@\n       setIsMuted(!isMuted);\n     }\n   };\n \n+  const handleAnswerSelect = (questionId: string, answer: string) => {\n+    setSelectedAnswers(prev => ({ ...prev, [questionId]: answer }));\n+    setShowFeedback(prev => ({ ...prev, [questionId]: true }));\n+    \n+    logger.info('Answer selected', {\n+      source: 'LessonPage',\n+      context: { \n+        questionId,\n+        timestamp: new Date().toISOString()\n+      }\n+    });\n+  };\n+\n   if (isLoading) {\n     return (\n       <div className=\"flex items-center justify-center min-h-screen\">\n         <LoadingSpinner message=\"Loading your lesson...\" />\n@@ -391,31 +438,58 @@\n \n   return (\n     <div className=\"min-h-screen bg-gradient-to-b from-blue-50 to-purple-50 dark:from-gray-900 dark:to-gray-800\">\n       <div className=\"container mx-auto px-4 py-8\">\n-        {/* Header Section */}\n+        {/* Progress Bar */}\n         <motion.div\n+          className=\"fixed top-0 left-0 right-0 h-1 bg-primary/20\"\n+          initial={{ scaleX: 0 }}\n+          animate={{ scaleX: contentProgress / 100 }}\n+          transition={{ duration: 0.2 }}\n+        />\n+\n+        {/* Header Section with enhanced animations */}\n+        <motion.div\n           initial={{ opacity: 0, y: -20 }}\n           animate={{ opacity: 1, y: 0 }}\n+          transition={{ duration: 0.5 }}\n           className=\"mb-8\"\n         >\n-          <div className=\"flex flex-col items-start gap-2\">\n+          <div className=\"flex flex-col items-start gap-4\">\n             <div className=\"flex items-center gap-2\">\n-              <Badge variant=\"outline\" className=\"bg-blue-500 text-white\">\n-                {lessonState?.topic?.title || 'Topic'}\n-              </Badge>\n+              <motion.div whileHover={{ scale: 1.05 }}>\n+                <Badge variant=\"outline\" className=\"bg-blue-500 text-white hover:bg-blue-600 transition-colors\">\n+                  {lessonState?.topic?.title || 'Topic'}\n+                </Badge>\n+              </motion.div>\n               <ChevronRight className=\"w-4 h-4 text-gray-400\" />\n-              <Badge variant=\"outline\" className=\"bg-purple-500 text-white\">\n-                {lessonState?.subtopic?.title || 'Subtopic'}\n-              </Badge>\n+              <motion.div whileHover={{ scale: 1.05 }}>\n+                <Badge variant=\"outline\" className=\"bg-purple-500 text-white hover:bg-purple-600 transition-colors\">\n+                  {lessonState?.subtopic?.title || 'Subtopic'}\n+                </Badge>\n+              </motion.div>\n             </div>\n             <h1 className=\"text-4xl font-bold text-gray-800 dark:text-white\">\n               {lessonState?.lesson.contentheading || lessonState?.lesson.title || 'Lesson Content'}\n             </h1>\n+            <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n+              <div className=\"flex items-center gap-2\">\n+                <Clock className=\"h-4 w-4\" />\n+                <span>15 minutes</span>\n+              </div>\n+              <div className=\"flex items-center gap-2\">\n+                <BookOpen className=\"h-4 w-4\" />\n+                <span>{lessonState?.lesson.questions?.length || 0} Questions</span>\n+              </div>\n+              <div className=\"flex items-center gap-2\">\n+                <Progress value={contentProgress} className=\"w-24 h-2\" />\n+                <span>{Math.round(contentProgress)}% Complete</span>\n+              </div>\n+            </div>\n           </div>\n         </motion.div>\n \n-        {/* Main Content */}\n+        {/* Main Content Grid */}\n         <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n           {/* Left Section - Lesson Content */}\n           <div className=\"lg:col-span-2 space-y-6\">\n             <Card className=\"overflow-hidden border-2 border-primary/10\">\n@@ -425,150 +499,138 @@\n                     <BookOpen className=\"w-5 h-5 text-primary\" />\n                     Lesson Content\n                   </CardTitle>\n                   <div className=\"flex items-center gap-2\">\n-                    <Button\n-                      variant=\"ghost\"\n-                      size=\"icon\"\n-                      onClick={toggleMute}\n-                      className=\"hover:bg-primary/10\"\n-                    >\n-                      {isMuted ? (\n-                        <VolumeX className=\"w-4 h-4\" />\n-                      ) : (\n-                        <Volume2 className=\"w-4 h-4\" />\n-                      )}\n-                    </Button>\n-                    <Button\n-                      variant=\"ghost\"\n-                      size=\"icon\"\n-                      onClick={togglePlayPause}\n-                      className=\"hover:bg-primary/10\"\n-                    >\n-                      {isPlaying ? (\n-                        <Pause className=\"w-4 h-4\" />\n-                      ) : (\n-                        <Play className=\"w-4 h-4\" />\n-                      )}\n-                    </Button>\n+                    <motion.div whileHover={{ scale: 1.1 }} whileTap={{ scale: 0.95 }}>\n+                      <Button\n+                        variant=\"ghost\"\n+                        size=\"icon\"\n+                        onClick={toggleMute}\n+                        className=\"hover:bg-primary/10\"\n+                      >\n+                        {isMuted ? (\n+                          <VolumeX className=\"w-4 h-4\" />\n+                        ) : (\n+                          <Volume2 className=\"w-4 h-4\" />\n+                        )}\n+                      </Button>\n+                    </motion.div>\n+                    <motion.div whileHover={{ scale: 1.1 }} whileTap={{ scale: 0.95 }}>\n+                      <Button\n+                        variant=\"ghost\"\n+                        size=\"icon\"\n+                        onClick={togglePlayPause}\n+                        className=\"hover:bg-primary/10\"\n+                      >\n+                        {isPlaying ? (\n+                          <Pause className=\"w-4 h-4\" />\n+                        ) : (\n+                          <Play className=\"w-4 h-4\" />\n+                        )}\n+                      </Button>\n+                    </motion.div>\n                   </div>\n                 </div>\n               </CardHeader>\n-              <CardContent className=\"p-6\">\n-                <ScrollArea className=\"h-[60vh]\">\n-                  <div className=\"prose dark:prose-invert max-w-none\">\n-                    {lessonState?.lesson.content || 'No content available'}\n+              <CardContent className=\"p-0\">\n+                <ScrollArea \n+                  ref={contentRef}\n+                  className=\"h-[60vh]\"\n+                  onScrollCapture={() => {\n+                    logger.info('Content scrolled', {\n+                      source: 'LessonPage',\n+                      context: { timestamp: new Date().toISOString() }\n+                    });\n+                  }}\n+                >\n+                  <div className=\"p-6 prose dark:prose-invert max-w-none\">\n+                    <motion.div\n+                      initial={{ opacity: 0 }}\n+                      animate={{ opacity: 1 }}\n+                      transition={{ duration: 0.5 }}\n+                    >\n+                      {lessonState?.lesson.content || 'No content available'}\n+                    </motion.div>\n                   </div>\n                 </ScrollArea>\n               </CardContent>\n             </Card>\n \n-            {/* Questions and Exercise Prompts */}\n-            <Tabs defaultValue=\"questions\" className=\"w-full\">\n-              <TabsList className=\"grid w-full grid-cols-2\">\n-                <TabsTrigger value=\"questions\">Questions</TabsTrigger>\n-                <TabsTrigger value=\"exercises\">Exercises</TabsTrigger>\n-              </TabsList>\n-              <TabsContent value=\"questions\">\n-                <Card>\n-                  <CardContent className=\"p-6 space-y-4\">\n-                    {lessonState?.lesson.questions?.length ? (\n-                      lessonState.lesson.questions.map((question, index) => (\n+            {/* Questions Section with Animations */}\n+            <AnimatePresence mode=\"wait\">\n+              {lessonState?.lesson.questions?.map((question, index) => (\n+                <motion.div\n+                  key={question.id}\n+                  initial={{ opacity: 0, y: 20 }}\n+                  animate={{ opacity: 1, y: 0 }}\n+                  exit={{ opacity: 0, y: -20 }}\n+                  transition={{ delay: index * 0.1 }}\n+                >\n+                  <Card className=\"border border-primary/10 overflow-hidden\">\n+                    <CardHeader \n+                      className={cn(\n+                        \"cursor-pointer transition-colors\",\n+                        activeQuestionIndex === index ? \"bg-primary/10\" : \"hover:bg-primary/5\"\n+                      )}\n+                      onClick={() => setActiveQuestionIndex(activeQuestionIndex === index ? null : index)}\n+                    >\n+                      <CardTitle className=\"text-lg flex items-center justify-between\">\n+                        <span>Question {index + 1}: {question.title}</span>\n                         <motion.div\n-                          key={question.id}\n-                          initial={{ opacity: 0, x: -20 }}\n-                          animate={{ opacity: 1, x: 0 }}\n-                          transition={{ delay: index * 0.1 }}\n+                          animate={{ rotate: activeQuestionIndex === index ? 180 : 0 }}\n+                          transition={{ duration: 0.2 }}\n                         >\n-                          <Card className=\"border border-primary/10\">\n-                            <CardHeader>\n-                              <CardTitle className=\"text-lg\">\n-                                Question {index + 1}: {question.title}\n-                              </CardTitle>\n-                            </CardHeader>\n-                            <CardContent>\n-                              <p className=\"text-gray-600 dark:text-gray-300\">\n-                                {question.content}\n-                              </p>\n-                              {question.data?.options && (\n-                                <div className=\"mt-4 space-y-2\">\n-                                  {question.data.options.map((option, optIndex) => (\n-                                    <div\n-                                      key={optIndex}\n-                                      className=\"flex items-center gap-2 p-2 rounded-lg hover:bg-primary/5\"\n-                                    >\n-                                      <div className=\"w-6 h-6 rounded-full bg-primary/10 flex items-center justify-center\">\n-                                        {String.fromCharCode(65 + optIndex)}\n-                                      </div>\n-                                      <span>{option}</span>\n-                                    </div>\n-                                  ))}\n-                                </div>\n-                              )}\n-                            </CardContent>\n-                          </Card>\n+                          <ChevronRight className=\"w-5 h-5\" />\n                         </motion.div>\n-                      ))\n-                    ) : (\n-                      <div className=\"text-center py-8 text-muted-foreground\">\n-                        No questions available for this lesson\n-                      </div>\n-                    )}\n-                  </CardContent>\n-                </Card>\n-              </TabsContent>\n-              <TabsContent value=\"exercises\">\n-                <Card>\n-                  <CardContent className=\"p-6 space-y-4\">\n-                    {lessonState?.lesson.exercise_prompts?.length ? (\n-                      lessonState.lesson.exercise_prompts.map((prompt, index) => (\n+                      </CardTitle>\n+                    </CardHeader>\n+                    <AnimatePresence>\n+                      {activeQuestionIndex === index && (\n                         <motion.div\n-                          key={prompt.id}\n-                          initial={{ opacity: 0, x: -20 }}\n-                          animate={{ opacity: 1, x: 0 }}\n-                          transition={{ delay: index * 0.1 }}\n+                          initial={{ height: 0, opacity: 0 }}\n+                          animate={{ height: \"auto\", opacity: 1 }}\n+                          exit={{ height: 0, opacity: 0 }}\n+                          transition={{ duration: 0.3 }}\n                         >\n-                          <Card className=\"border border-primary/10\">\n-                            <CardHeader>\n-                              <CardTitle className=\"text-lg\">\n-                                Exercise {index + 1}\n-                              </CardTitle>\n-                            </CardHeader>\n-                            <CardContent>\n-                              <p className=\"text-gray-600 dark:text-gray-300\">\n-                                {prompt.text}\n-                              </p>\n-                              {prompt.media && (\n-                                <div className=\"mt-4\">\n-                                  {prompt.type === 'image' && (\n-                                    <img\n-                                      src={prompt.media}\n-                                      alt={`Exercise ${index + 1}`}\n-                                      className=\"rounded-lg max-h-48 object-cover\"\n-                                    />\n-                                  )}\n-                                  {prompt.type === 'video' && (\n-                                    <video\n-                                      src={prompt.media}\n-                                      controls\n-                                      className=\"rounded-lg w-full\"\n-                                    />\n-                                  )}\n-                                </div>\n-                              )}\n-                            </CardContent>\n-                          </Card>\n+                          <CardContent className=\"p-6\">\n+                            <p className=\"text-gray-600 dark:text-gray-300 mb-4\">\n+                              {question.content}\n+                            </p>\n+                            {question.data?.options && (\n+                              <div className=\"space-y-2\">\n+                                {question.data.options.map((option: string, optIndex: number) => (\n+                                  <motion.div\n+                                    key={optIndex}\n+                                    whileHover={{ scale: 1.01 }}\n+                                    whileTap={{ scale: 0.99 }}\n+                                  >\n+                                    <Button\n+                                      variant=\"outline\"\n+                                      className={cn(\n+                                        \"w-full justify-start text-left p-4 h-auto\",\n+                                        selectedAnswers[question.id] === option && \"border-primary bg-primary/5\"\n+                                      )}\n+                                      onClick={() => handleAnswerSelect(question.id, option)}\n+                                    >\n+                                      <div className=\"flex items-center gap-4\">\n+                                        <div className=\"w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\n+                                          {String.fromCharCode(65 + optIndex)}\n+                                        </div>\n+                                        <span>{option}</span>\n+                                      </div>\n+                                    </Button>\n+                                  </motion.div>\n+                                ))}\n+                              </div>\n+                            )}\n+                          </CardContent>\n                         </motion.div>\n-                      ))\n-                    ) : (\n-                      <div className=\"text-center py-8 text-muted-foreground\">\n-                        No exercises available for this lesson\n-                      </div>\n-                    )}\n-                  </CardContent>\n-                </Card>\n-              </TabsContent>\n-            </Tabs>\n+                      )}\n+                    </AnimatePresence>\n+                  </Card>\n+                </motion.div>\n+              ))}\n+            </AnimatePresence>\n           </div>\n \n           {/* Right Section - Media */}\n           <div className=\"lg:col-span-1\">\n@@ -578,53 +640,51 @@\n                   <ImageIcon className=\"w-5 h-5 text-primary\" />\n                   Media\n                 </CardTitle>\n               </CardHeader>\n-              <CardContent className=\"p-6\">\n+              <CardContent className=\"p-0\">\n                 <ScrollArea className=\"h-[70vh]\">\n-                  <div className=\"space-y-4\">\n-                    {lessonState?.lesson.questions?.some(q => q.data?.metadata?.imageUrl || q.data?.metadata?.videoUrl) ? (\n-                      <>\n-                        {lessonState.lesson.questions.map((question, index) => (\n-                          <React.Fragment key={`media-${index}`}>\n-                            {question.data?.metadata?.imageUrl && (\n-                              <motion.div\n-                                initial={{ opacity: 0, scale: 0.9 }}\n-                                animate={{ opacity: 1, scale: 1 }}\n-                                transition={{ delay: index * 0.1 }}\n-                              >\n-                                <Card className=\"overflow-hidden\">\n-                                  <img\n-                                    src={question.data.metadata.imageUrl}\n-                                    alt={`Media ${index + 1}`}\n-                                    className=\"w-full h-48 object-cover\"\n-                                  />\n-                                </Card>\n-                              </motion.div>\n-                            )}\n-                            {question.data?.metadata?.videoUrl && (\n-                              <motion.div\n-                                initial={{ opacity: 0, scale: 0.9 }}\n-                                animate={{ opacity: 1, scale: 1 }}\n-                                transition={{ delay: index * 0.1 }}\n-                              >\n-                                <Card className=\"overflow-hidden\">\n-                                  <video\n-                                    src={question.data.metadata.videoUrl}\n-                                    controls\n-                                    className=\"w-full\"\n-                                  />\n-                                </Card>\n-                              </motion.div>\n-                            )}\n-                          </React.Fragment>\n-                        ))}\n-                      </>\n-                    ) : (\n-                      <div className=\"text-center py-8 text-muted-foreground\">\n-                        No media content available\n-                      </div>\n-                    )}\n+                  <div className=\"p-6 space-y-4\">\n+                    <AnimatePresence>\n+                      {lessonState?.lesson.questions?.map((question, index) => (\n+                        <React.Fragment key={`media-${index}`}>\n+                          {question.data?.metadata?.imageUrl && (\n+                            <motion.div\n+                              initial={{ opacity: 0, scale: 0.9 }}\n+                              animate={{ opacity: 1, scale: 1 }}\n+                              transition={{ delay: index * 0.1 }}\n+                              whileHover={{ scale: 1.02 }}\n+                              className=\"cursor-pointer\"\n+                            >\n+                              <Card className=\"overflow-hidden\">\n+                                <img\n+                                  src={question.data.metadata.imageUrl}\n+                                  alt={`Media ${index + 1}`}\n+                                  className=\"w-full h-48 object-cover transition-transform hover:scale-105\"\n+                                  loading=\"lazy\"\n+                                />\n+                              </Card>\n+                            </motion.div>\n+                          )}\n+                          {question.data?.metadata?.videoUrl && (\n+                            <motion.div\n+                              initial={{ opacity: 0, scale: 0.9 }}\n+                              animate={{ opacity: 1, scale: 1 }}\n+                              transition={{ delay: index * 0.1 }}\n+                            >\n+                              <Card className=\"overflow-hidden\">\n+                                <video\n+                                  src={question.data.metadata.videoUrl}\n+                                  controls\n+                                  className=\"w-full\"\n+                                  preload=\"metadata\"\n+                                />\n+                              </Card>\n+                            </motion.div>\n+                          )}\n+                        </React.Fragment>\n+                      ))}\n+                    </AnimatePresence>\n                   </div>\n                 </ScrollArea>\n               </CardContent>\n             </Card>\n"
                },
                {
                    "date": 1739444859634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -669,8 +669,58 @@\n                           >\n                             <Card \n                               className={cn(\n                                 \"border border-primary/10 overflow-hidden transition-colors\",\n+                                activeExerciseIndex === index ? \"bg-primary/5\" : \"hover:bg-primary/5\"\n+                              )}\n+                            >\n+                              <CardHeader \n+                                className=\"cursor-pointer\"\n+                                onClick={() => setActiveExerciseIndex(\n+                                  activeExerciseIndex === index ? null : index\n+                                )}\n+                              >\n+                                <div className=\"flex items-center justify-between\">\n+                                  <div className=\"flex items-center gap-4\">\n+                                    <div className=\"w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center\">\n+                                      <span className=\"font-semibold\">{index + 1}</span>\n+                                    </div>\n+                                    <div>\n+                                      <CardTitle className=\"text-lg\">\n+                                        {prompt.text || 'Exercise ' + (index + 1)}\n+                                      </CardTitle>\n+                                      <CardDescription>\n+                                        {prompt.type === 'image' ? 'Image' : prompt.type === 'video' ? 'Video' : 'Text'}\n+                                      </CardDescription>\n+                                    </div>\n+                                  </div>\n+                                  <motion.div\n+                                    animate={{ rotate: activeExerciseIndex === index ? 180 : 0 }}\n+                                    transition={{ duration: 0.2 }}\n+                                  >\n+                                    <ChevronDown className=\"w-5 h-5\" />\n+                                  </motion.div>\n+                                </div>\n+                              </CardHeader>\n+\n+                              <AnimatePresence>\n+                                {activeExerciseIndex === index && (\n+                                  <motion.div\n+                                    initial={{ height: 0, opacity: 0 }}\n+                                    animate={{ height: \"auto\", opacity: 1 }}\n+                                    exit={{ height: 0, opacity: 0 }}\n+                                    transition={{ duration: 0.3 }}\n+                                  >\n+                                    <CardContent className=\"p-6\">\n+                                      {/* Exercise Content */}\n+                                      <div className=\"space-y-6\">\n+                                        {/* Instructions */}\n+                                        <div className=\"bg-primary/5 p-4 rounded-lg\">\n+                                          <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n+                                            <Info className=\"w-4 h-4\" />\n+                                            Instructions\n+                                          </h4>\n+                                          <p className=\"text-sm text-muted-foreground\">\n           {/* Right Section - Media */}\n           <div className=\"lg:col-span-1\">\n             <Card className=\"sticky top-4\">\n               <CardHeader className=\"bg-primary/5 border-b\">\n"
                },
                {
                    "date": 1739869548154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n import confetti from 'canvas-confetti';\n import { Tooltip, TooltipContent, TooltipTrigger } from \"@/components/ui/tooltip\";\n import { Skeleton } from \"@/components/ui/skeleton\";\n import { useSound } from 'use-sound';\n-import \n+import {}\n \n // Types\n interface LessonState {\n   lesson: {\n"
                }
            ],
            "date": 1739373614613,
            "name": "Commit-0",
            "content": "\"use client\";\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  ArrowLeft, BookOpen, CheckCircle2, Clock, Flag, \n  HelpCircle, Layout, List, Play, Settings, Star, \n  X, Mic, PenTool, FileText \n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { supabase } from \"@/lib/supabase\";\nimport { Question, Activity, ExercisePrompt } from \"@/types\";\nimport { useAuth } from '@/hooks/useAuth';\nimport LessonErrorBoundary from '@/components/LessonErrorBoundary';\nimport LoadingSpinner from '@/components/LoadingSpinner';\nimport { logger } from '@/lib/logger';\n\n// Enhanced component logger with detailed context\nconst componentLogger = {\n  info: (message: string, data?: any) => {\n    logger.info(message, { \n      source: 'LessonPage', \n      context: {\n        ...data,\n        timestamp: new Date().toISOString(),\n        url: window.location.href,\n        pathname: window.location.pathname\n      }\n    });\n  },\n  error: (message: string, error?: any) => {\n    logger.error(message, { \n      source: 'LessonPage', \n      context: {\n        error,\n        timestamp: new Date().toISOString(),\n        url: window.location.href,\n        pathname: window.location.pathname,\n        stack: error?.stack\n      }\n    });\n  },\n  warn: (message: string, data?: any) => {\n    logger.warn(message, { \n      source: 'LessonPage', \n      context: {\n        ...data,\n        timestamp: new Date().toISOString(),\n        url: window.location.href,\n        pathname: window.location.pathname\n      }\n    });\n  },\n  debug: (message: string, data?: any) => {\n    if (DEBUG) {\n      logger.debug(message, { \n        source: 'LessonPage', \n        context: {\n          ...data,\n          timestamp: new Date().toISOString(),\n          url: window.location.href,\n          pathname: window.location.pathname\n        }\n      });\n    }\n  }\n};\n\n// Remove duplicate DEBUG configuration\nconst DEBUG = process.env.NODE_ENV === 'development';\n\n// Performance monitoring\nconst PAGE_START_TIME = performance.now();\nlet isComponentMounted = false;\n\n// Add performance markers\nperformance.mark('lessonPage-start');\n\n// Enhanced error handler\nwindow.onerror = function(msg, url, lineNo, columnNo, error) {\n  componentLogger.error('Global error caught', { \n    msg, \n    url, \n    lineNo, \n    columnNo, \n    error,\n    isComponentMounted,\n    timeSinceStart: performance.now() - PAGE_START_TIME\n  });\n  return false;\n};\n\n// Add unhandled rejection handler\nwindow.onunhandledrejection = function(event) {\n  componentLogger.error('Unhandled promise rejection', {\n    reason: event.reason,\n    isComponentMounted,\n    timeSinceStart: performance.now() - PAGE_START_TIME\n  });\n};\n\n// Global error handler\nwindow.onload = function() {\n  componentLogger.info('Lesson page loaded', {\n    url: window.location.href,\n    localStorage: Object.keys(localStorage)\n  });\n};\n\n// Enhanced logging utility\nconst forceLog = (message: string, data?: any, type: 'info' | 'warn' | 'error' = 'info') => {\n  if (!DEBUG) return;\n  \n  const timestamp = new Date().toISOString();\n  const logEntry = {\n    timestamp,\n    message,\n    data,\n    type,\n    url: window.location.href,\n    pathname: window.location.pathname,\n    search: window.location.search,\n    timeSinceStart: performance.now() - PAGE_START_TIME,\n    isComponentMounted\n  };\n  \n  // Console logging with visual distinction\n  const styles = {\n    info: 'color: #4CAF50; font-weight: bold;',\n    warn: 'color: #FFC107; font-weight: bold;',\n    error: 'color: #F44336; font-weight: bold;'\n  };\n  \n  console.log(`%c[${timestamp}] ${message}`, styles[type]);\n  if (data) {\n    console.log('Data:', data);\n    if (typeof data === 'object') {\n      console.table(data);\n    }\n  }\n};\n\n// Update LessonState interface to match database schema\ninterface LessonState {\n  lesson: {\n    id: string;\n    title: string;\n    content: string | null;\n    description: string | null;\n    topic_id: string | null;\n    subtopic_id: string;\n    order_index: number | null;\n    duration: number | null;\n    status: 'draft' | 'published';\n    created_at: string;\n    updated_at: string;\n    contentheading: string | null;\n    user_id: string | null;\n    voice_id: string | null;\n    questions: Array<{\n      id: string;\n      title: string;\n      content: string;\n      type: string;\n      points: number;\n      lesson_id: string;\n      order_index: number | null;\n      created_at: string;\n      updated_at: string;\n      status: 'draft' | 'published';\n      data: {\n        prompt?: string;\n        teacherScript?: string;\n        options?: string[];\n        metadata?: {\n          sampleAnswer?: string;\n          correct?: string[];\n          options?: string[];\n          audioContent?: string;\n          transcript?: string;\n          keywords?: string[];\n          hints?: string[];\n          imageUrl?: string;\n          videoUrl?: string;\n        };\n      };\n    }>;\n    activities: Array<{\n      id: string;\n      title: string;\n      description: string | null;\n      type: string;\n      content: string | null;\n      lesson_id: string;\n      duration: number | null;\n      created_at: string;\n      updated_at: string;\n      name: string;\n      instructions: string | null;\n      data: {\n        prompt: string;\n        teacherScript: string;\n        media: string[];\n      };\n      media: Array<{\n        url: string;\n        type: 'image' | 'gif' | 'video';\n      }>;\n    }>;\n    exercise_prompts: Array<{\n      id: string;\n      text: string;\n      media: string | null;\n      type: 'image' | 'gif' | 'video';\n      narration: string | null;\n      saytext: string | null;\n      question_id: string | null;\n      correct: boolean | null;\n      created_at: string;\n      updated_at: string;\n      contentId: string;\n      questionType: 'multiple-choice' | 'fill-blank' | 'matching' | 'drag-drop' | 'speaking' | 'listening' | 'writing' | 'translation';\n      difficulty: 'beginner' | 'intermediate' | 'advanced';\n      content: {\n        question?: string;\n        options?: string[];\n        correctAnswer?: string;\n        pairs?: Record<string, string>;\n        correctOrder?: string[];\n        imageUrl?: string;\n        audioUrl?: string;\n        instructions: string;\n        hints: string[];\n      };\n      metadata: {\n        targetSkills: string[];\n        prerequisites: string[];\n        learningObjectives: string[];\n        estimatedTime: number;\n      };\n      adaptiveSettings: {\n        progressionRules: {\n          minScore: number;\n          requiredAttempts: number;\n        };\n        difficultyAdjustment: {\n          increase: number;\n          decrease: number;\n        };\n      };\n    }>;\n  };\n  topic: {\n    id: string;\n    title: string;\n    description: string | null;\n    grade_id: string;\n    order_index: number | null;\n    created_at: string;\n    updated_at: string;\n  };\n  subtopic: {\n    id: string;\n    title: string;\n    description: string | null;\n    topic_id: string;\n    order_index: number | null;\n    created_at: string;\n    updated_at: string;\n  };\n}\n\n// Update DbActivity interface\ninterface DbActivity {\n  id: string;\n  title: string;\n  description: string | null;\n  type: string;\n  content: string | null;\n  lesson_id: string;\n  duration: number | null;\n  created_at: string;\n  updated_at: string;\n  name: string;\n  instructions: string | null;\n  data: {\n    prompt: string;\n    teacherScript: string;\n    media: string[];\n  };\n  media: Array<{\n    url: string;\n    type: 'image' | 'gif' | 'video';\n  }>;\n}\n\n// Update DatabaseLessonResponse interface\ninterface DatabaseLessonResponse {\n  data: {\n    id: string;\n    title: string;\n    content: string | null;\n    description: string | null;\n    topic_id: string | null;\n    subtopic_id: string;\n    order_index: number | null;\n    duration: number | null;\n    status: 'draft' | 'published';\n    created_at: string;\n    updated_at: string;\n    contentheading: string | null;\n    user_id: string | null;\n    voice_id: string | null;\n    questions: Array<{\n      id: string;\n      title: string;\n      content: string;\n      type: string;\n      points: number;\n      lesson_id: string;\n      order_index: number | null;\n      created_at: string;\n      updated_at: string;\n      status: 'draft' | 'published';\n      data: Record<string, any>;\n    }>;\n    activities: DbActivity[];\n    exercise_prompts: DbExercisePrompt[];\n  } | null;\n  error: Error | null;\n}\n\n// Add URL validation helper\nconst validateUrl = (params: any, searchParams: URLSearchParams) => {\n  const validation = {\n    topicId: searchParams.get('topicId'),\n    subtopicId: searchParams.get('subtopicId'),\n    lessonId: params?.lessonId,\n    isValid: false,\n    missingParams: [] as string[]\n  };\n\n  if (!validation.lessonId) validation.missingParams.push('lessonId');\n  if (!validation.topicId) validation.missingParams.push('topicId');\n  if (!validation.subtopicId) validation.missingParams.push('subtopicId');\n\n  validation.isValid = validation.missingParams.length === 0;\n  return validation;\n};\n\n// Add this type guard function\nconst isValidString = (value: any): value is string => {\n  return typeof value === 'string' && value.length > 0;\n};\n\n// Update the RouteParams interface\ninterface RouteParams {\n  [key: string]: string | undefined;\n  lessonId?: string;\n}\n\nconst MAX_AUTH_RETRIES = 3;\nconst AUTH_RETRY_DELAY = 1000;\n\nconst DEBUG_MODE = true;\nconst AUTH_CHECK_INTERVAL = 1000; // 1 second\n\n// Add this function at the top level\nconst debugLog = (message: string, data?: any) => {\n  if (!DEBUG_MODE) return;\n  const timestamp = new Date().toISOString();\n  console.log(`[${timestamp}] [LessonPage] ${message}`, data ? data : '');\n};\n\n// Add these utility functions at the top of the file\nconst getInstanceData = (searchParams: URLSearchParams) => {\n  return {\n    instanceId: searchParams.get('instanceId'),\n    stateKey: searchParams.get('stateKey'),\n    authStateKey: searchParams.get('authStateKey')\n  };\n};\n\n// Add this type at the top with other interfaces\ninterface AuthState {\n  session: {\n    access_token: string;\n    refresh_token: string;\n    user: {\n      id: string;\n    };\n  };\n  instanceId: string;\n  timestamp: string;\n}\n\nconst restoreAuthState = async (authStateKey: string | null): Promise<boolean> => {\n  if (!authStateKey) {\n    forceLog('[Auth] No auth state key provided', null, 'error');\n    return false;\n  }\n\n  try {\n    const storedAuth = localStorage.getItem(authStateKey);\n    if (!storedAuth) {\n      forceLog('[Auth] No stored auth state found', { authStateKey }, 'error');\n      return false;\n    }\n\n    const authState = JSON.parse(storedAuth);\n    forceLog('[Auth] Restoring auth state', { \n      instanceId: authState.instanceId,\n      timestamp: authState.timestamp\n    });\n\n    // First try to get current session\n    const { data: { session: currentSession } } = await supabase.auth.getSession();\n    \n    if (currentSession?.access_token === authState.session.access_token) {\n      forceLog('[Auth] Session already active and matching');\n      return true;\n    }\n\n    // Set the session\n    const { data, error } = await supabase.auth.setSession({\n      access_token: authState.session.access_token,\n      refresh_token: authState.session.refresh_token\n    });\n\n    if (error) {\n      forceLog('[Auth] Failed to restore session', error, 'error');\n      return false;\n    }\n\n    forceLog('[Auth] Session restored successfully', {\n      userId: data.session?.user.id,\n      expiresAt: data.session?.expires_at\n    });\n\n    // Add message listener for parent window communication\n    window.addEventListener('message', (event) => {\n      if (event.data.type === 'AUTH_STATE') {\n        forceLog('[Auth] Received auth state from parent');\n        const newAuthState = event.data.payload;\n        localStorage.setItem(authStateKey, JSON.stringify(newAuthState));\n      }\n    });\n\n    // Notify parent window we're ready\n    window.opener?.postMessage({ type: 'LESSON_WINDOW_READY' }, '*');\n\n    return true;\n  } catch (error) {\n    forceLog('[Auth] Error initializing auth', error, 'error');\n    return false;\n  }\n};\n\n// Add this function at the top of the lesson page component\nconst initializeAuth = async (authStateKey: string): Promise<boolean> => {\n  let retryCount = 0;\n  const maxRetries = 3;\n\n  while (retryCount < maxRetries) {\n    try {\n      const storedAuth = localStorage.getItem(authStateKey);\n      if (!storedAuth) {\n        forceLog('[Auth] No stored auth state found', { authStateKey, attempt: retryCount + 1 }, 'error');\n        throw new Error('No stored auth state found');\n      }\n\n      const authState = JSON.parse(storedAuth) as AuthState;\n      forceLog('[Auth] Restoring auth state', { \n        instanceId: authState.instanceId,\n        timestamp: authState.timestamp,\n        attempt: retryCount + 1\n      });\n\n      // First try to get current session\n      const { data: { session } } = await supabase.auth.getSession();\n      \n      if (session?.access_token === authState.session.access_token) {\n        forceLog('[Auth] Session already active and matching', {\n          userId: session.user.id,\n          attempt: retryCount + 1\n        });\n        return true;\n      }\n\n      // Set the session\n      const { data, error } = await supabase.auth.setSession({\n        access_token: authState.session.access_token,\n        refresh_token: authState.session.refresh_token\n      });\n\n      if (error || !data.session) {\n        throw error || new Error('Failed to restore session');\n      }\n\n      forceLog('[Auth] Session restored successfully', {\n        userId: data.session.user.id,\n        expiresAt: data.session.expires_at,\n        attempt: retryCount + 1\n      });\n\n      // Add message listener for parent window communication\n      window.addEventListener('message', (event) => {\n        if (event.data.type === 'AUTH_STATE') {\n          forceLog('[Auth] Received auth state from parent');\n          const newAuthState = event.data.payload as AuthState;\n          localStorage.setItem(authStateKey, JSON.stringify({\n            ...newAuthState,\n            lastUpdated: new Date().toISOString()\n          }));\n        }\n      });\n\n      // Notify parent window we're ready\n      window.opener?.postMessage({ \n        type: 'LESSON_WINDOW_READY',\n        payload: {\n          userId: data.session.user.id,\n          timestamp: new Date().toISOString()\n        }\n      }, '*');\n\n      return true;\n    } catch (error) {\n      forceLog('[Auth] Error initializing auth', { \n        error, \n        attempt: retryCount + 1,\n        remainingRetries: maxRetries - retryCount - 1\n      }, 'error');\n      \n      retryCount++;\n      if (retryCount < maxRetries) {\n        await new Promise(resolve => setTimeout(resolve, 1000 * retryCount)); // Exponential backoff\n        continue;\n      }\n      return false;\n    }\n  }\n  return false;\n};\n\n// Let's add a more robust logging utility at the top of the file\nconst createLogger = (component: string) => ({\n  info: (message: string, data?: any) => {\n    forceLog(`[${component}] ${message}`, data, 'info');\n  },\n  error: (message: string, error?: any) => {\n    forceLog(`[${component}] ${message}`, error, 'error');\n  },\n  warn: (message: string, data?: any) => {\n    forceLog(`[${component}] ${message}`, data, 'warn');\n  }\n});\n\nconst logger1 = createLogger('LessonPage');\n\n// Update the mapping functions\nconst mapDbActivityToActivity = (dbActivity: DbActivity): Activity => {\n  const activity: Activity = {\n    id: dbActivity.id,\n    lesson_id: dbActivity.lesson_id,\n    title: dbActivity.title,\n    type: dbActivity.type,\n    name: dbActivity.name,\n    data: {\n      prompt: '',\n      teacherScript: '',\n      media: []\n    }\n  };\n\n  // Add optional fields\n  if (dbActivity.created_at) activity.created_at = dbActivity.created_at;\n  if (dbActivity.duration) activity.duration = dbActivity.duration;\n  if (dbActivity.description) activity.description = dbActivity.description;\n  if (dbActivity.content) activity.content = dbActivity.content;\n  if (dbActivity.updated_at) activity.updated_at = dbActivity.updated_at;\n  if (dbActivity.instructions) activity.instructions = dbActivity.instructions;\n  if (dbActivity.data) {\n    activity.data = {\n      prompt: dbActivity.data.prompt || '',\n      teacherScript: dbActivity.data.teacherScript || '',\n      media: dbActivity.data.media || []\n    };\n  }\n\n  if (dbActivity.media) {\n    activity.media = dbActivity.media;\n  }\n\n  return activity;\n};\n\nconst mapDbPromptToExercisePrompt = (dbPrompt: DbExercisePrompt): ExercisePrompt => {\n  const prompt: ExercisePrompt = {\n    id: dbPrompt.id,\n    text: dbPrompt.text,\n    type: dbPrompt.type,\n    created_at: dbPrompt.created_at,\n    updated_at: dbPrompt.updated_at,\n    contentId: dbPrompt.contentId,\n    questionType: dbPrompt.questionType,\n    difficulty: dbPrompt.difficulty,\n    content: {\n      instructions: dbPrompt.content?.instructions || '',\n      hints: dbPrompt.content?.hints || []\n    },\n    metadata: {\n      targetSkills: dbPrompt.metadata?.targetSkills || [],\n      prerequisites: dbPrompt.metadata?.prerequisites || [],\n      learningObjectives: dbPrompt.metadata?.learningObjectives || [],\n      estimatedTime: dbPrompt.metadata?.estimatedTime || 0\n    },\n    adaptiveSettings: {\n      progressionRules: {\n        minScore: dbPrompt.adaptiveSettings?.progressionRules?.minScore || 0,\n        requiredAttempts: dbPrompt.adaptiveSettings?.progressionRules?.requiredAttempts || 0\n      },\n      difficultyAdjustment: {\n        increase: dbPrompt.adaptiveSettings?.difficultyAdjustment?.increase || 0,\n        decrease: dbPrompt.adaptiveSettings?.difficultyAdjustment?.decrease || 0\n      }\n    },\n    createdAt: new Date(dbPrompt.created_at),\n    updatedAt: new Date(dbPrompt.updated_at)\n  };\n\n  // Add optional fields\n  if (dbPrompt.media) prompt.media = dbPrompt.media;\n  if (dbPrompt.narration) prompt.narration = dbPrompt.narration;\n  if (dbPrompt.saytext) prompt.saytext = dbPrompt.saytext;\n  if (dbPrompt.question_id) prompt.question_id = dbPrompt.question_id;\n  if (dbPrompt.correct) prompt.correct = dbPrompt.correct;\n\n  // Add optional content fields\n  if (dbPrompt.content?.question) prompt.content.question = dbPrompt.content.question;\n  if (dbPrompt.content?.options) prompt.content.options = dbPrompt.content.options;\n  if (dbPrompt.content?.correctAnswer) prompt.content.correctAnswer = dbPrompt.content.correctAnswer;\n  if (dbPrompt.content?.pairs) prompt.content.pairs = dbPrompt.content.pairs;\n  if (dbPrompt.content?.correctOrder) prompt.content.correctOrder = dbPrompt.content.correctOrder;\n  if (dbPrompt.content?.imageUrl) prompt.content.imageUrl = dbPrompt.content.imageUrl;\n  if (dbPrompt.content?.audioUrl) prompt.content.audioUrl = dbPrompt.content.audioUrl;\n\n  return prompt;\n};\n\n// Update the fetchLessonData function\nconst fetchLessonData = async (\n  lessonId: string,\n  topicId: string,\n  subtopicId: string\n): Promise<LessonState> => {\n  const startTime = performance.now();\n  const logger = createLogger('fetchLessonData');\n  \n  try {\n    const [lessonResult, topicResult, subtopicResult] = await Promise.all([\n      supabase\n        .from('lessons')\n        .select(`\n          id,\n          title,\n          name,\n          content,\n          description,\n          topic_id,\n          subtopic_id,\n          questions:questions (\n            id,\n            title,\n            content,\n            type,\n            data,\n            metadata,\n            points\n          ),\n          activities:activities (\n            id,\n            title,\n            description,\n            type,\n            data,\n            lesson_id,\n            name,\n            created_at,\n            updated_at,\n            content,\n            duration,\n            instructions,\n            media\n          ),\n          exercise_prompts:exercise_prompts (\n            id,\n            text,\n            media,\n            type,\n            narration,\n            saytext,\n            question_id,\n            correct,\n            created_at,\n            updated_at,\n            contentId,\n            questionType,\n            difficulty,\n            content,\n            metadata,\n            adaptiveSettings\n          )\n        `)\n        .eq('id', lessonId)\n        .single(),\n      \n      supabase\n        .from('topics')\n        .select('id, title')\n        .eq('id', topicId)\n        .single(),\n      \n      supabase\n        .from('subtopics')\n        .select('id, title')\n        .eq('id', subtopicId)\n        .single()\n    ]) as [DatabaseLessonResponse, any, any];\n\n    // Validate responses\n    if (lessonResult.error) throw new Error(`Lesson fetch failed: ${lessonResult.error.message}`);\n    if (topicResult.error) throw new Error(`Topic fetch failed: ${topicResult.error.message}`);\n    if (subtopicResult.error) throw new Error(`Subtopic fetch failed: ${subtopicResult.error.message}`);\n\n    // Validate required data\n    if (!lessonResult.data) {\n      throw new Error('Missing required data from database');\n    }\n\n    // Map activities with required fields\n    const activities = (lessonResult.data?.activities || []).map((dbActivity) => {\n      const activity: Activity = {\n        id: dbActivity.id,\n        lesson_id: dbActivity.lesson_id,\n        title: dbActivity.title,\n        type: dbActivity.type,\n        name: dbActivity.name,\n        data: {\n          prompt: '',\n          teacherScript: '',\n          media: []\n        }\n      };\n\n      // Add optional fields\n      if (dbActivity.created_at) activity.created_at = dbActivity.created_at;\n      if (dbActivity.duration) activity.duration = dbActivity.duration;\n      if (dbActivity.description) activity.description = dbActivity.description;\n      if (dbActivity.content) activity.content = dbActivity.content;\n      if (dbActivity.updated_at) activity.updated_at = dbActivity.updated_at;\n      if (dbActivity.instructions) activity.instructions = dbActivity.instructions;\n      if (dbActivity.data) {\n        activity.data = {\n          prompt: dbActivity.data.prompt || '',\n          teacherScript: dbActivity.data.teacherScript || '',\n          media: dbActivity.data.media || []\n        };\n      }\n\n      if (dbActivity.media) {\n        activity.media = dbActivity.media;\n      }\n\n      return activity;\n    });\n\n    // Map exercise prompts with required fields\n    const exercisePrompts = (lessonResult.data?.exercise_prompts || []).map((dbPrompt) => {\n      const prompt: ExercisePrompt = {\n        id: dbPrompt.id,\n        text: dbPrompt.text,\n        type: dbPrompt.type,\n        created_at: dbPrompt.created_at,\n        updated_at: dbPrompt.updated_at,\n        contentId: dbPrompt.contentId,\n        questionType: dbPrompt.questionType,\n        difficulty: dbPrompt.difficulty,\n        content: {\n          instructions: dbPrompt.content?.instructions || '',\n          hints: dbPrompt.content?.hints || []\n        },\n        metadata: {\n          targetSkills: dbPrompt.metadata?.targetSkills || [],\n          prerequisites: dbPrompt.metadata?.prerequisites || [],\n          learningObjectives: dbPrompt.metadata?.learningObjectives || [],\n          estimatedTime: dbPrompt.metadata?.estimatedTime || 0\n        },\n        adaptiveSettings: {\n          progressionRules: {\n            minScore: dbPrompt.adaptiveSettings?.progressionRules?.minScore || 0,\n            requiredAttempts: dbPrompt.adaptiveSettings?.progressionRules?.requiredAttempts || 0\n          },\n          difficultyAdjustment: {\n            increase: dbPrompt.adaptiveSettings?.difficultyAdjustment?.increase || 0,\n            decrease: dbPrompt.adaptiveSettings?.difficultyAdjustment?.decrease || 0\n          }\n        },\n        createdAt: new Date(dbPrompt.created_at),\n        updatedAt: new Date(dbPrompt.updated_at)\n      };\n\n      // Add optional fields\n      if (dbPrompt.media) prompt.media = dbPrompt.media;\n      if (dbPrompt.narration) prompt.narration = dbPrompt.narration;\n      if (dbPrompt.saytext) prompt.saytext = dbPrompt.saytext;\n      if (dbPrompt.question_id) prompt.question_id = dbPrompt.question_id;\n      if (dbPrompt.correct) prompt.correct = dbPrompt.correct;\n\n      // Add optional content fields\n      if (dbPrompt.content?.question) prompt.content.question = dbPrompt.content.question;\n      if (dbPrompt.content?.options) prompt.content.options = dbPrompt.content.options;\n      if (dbPrompt.content?.correctAnswer) prompt.content.correctAnswer = dbPrompt.content.correctAnswer;\n      if (dbPrompt.content?.pairs) prompt.content.pairs = dbPrompt.content.pairs;\n      if (dbPrompt.content?.correctOrder) prompt.content.correctOrder = dbPrompt.content.correctOrder;\n      if (dbPrompt.content?.imageUrl) prompt.content.imageUrl = dbPrompt.content.imageUrl;\n      if (dbPrompt.content?.audioUrl) prompt.content.audioUrl = dbPrompt.content.audioUrl;\n\n      return prompt;\n    });\n\n    const lessonState: LessonState = {\n      lesson: {\n        ...lessonResult.data,\n        questions: lessonResult.data.questions || [],\n        activities,\n        exercise_prompts: exercisePrompts\n      },\n      topic: topicResult.data,\n      subtopic: subtopicResult.data\n    };\n\n    // Cache the result\n    const cacheData = {\n      data: lessonState,\n      timestamp: Date.now()\n    };\n    localStorage.setItem(`lesson_state_${lessonId}`, JSON.stringify(cacheData));\n\n    return lessonState;\n  } catch (error) {\n    logger.error('Failed to fetch lesson data', {\n      error,\n      duration: `${(performance.now() - startTime).toFixed(2)}ms`\n    });\n    throw error;\n  }\n};\n\n// Add this LogElement component after the forceLog definition\nconst LogElement: React.FC<{ name: string; children: React.ReactNode }> = ({ name, children }) => {\n  useEffect(() => {\n    componentLogger.debug(`Rendered element: ${name}`);\n  }, []);\n  return <>{children}</>;\n};\n\nexport default function LessonPage() {\n  const { user, loading: authLoading } = useAuth();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const searchParams = new URLSearchParams(window.location.search);\n  \n  // Get lesson data from query parameters\n  const lessonId = searchParams.get('lessonId');\n  const topicId = searchParams.get('topicId');\n  const subtopicId = searchParams.get('subtopicId');\n  const context = searchParams.get('context');\n  \n  // Parse context if available\n  const lessonContext = React.useMemo(() => {\n    try {\n      return context ? JSON.parse(context) : null;\n    } catch (error) {\n      logger.error('Failed to parse lesson context', {\n        source: 'LessonPage',\n        context: { error, rawContext: context }\n      });\n      return null;\n    }\n  }, [context]);\n  \n  // Enhanced URL validation and logging\n  const urlValidation = {\n    lessonId,\n    topicId,\n    subtopicId,\n    context: lessonContext,\n    isValid: Boolean(lessonId && topicId && subtopicId),\n    missingParams: [\n      !lessonId && 'lessonId',\n      !topicId && 'topicId',\n      !subtopicId && 'subtopicId'\n    ].filter(Boolean) as string[]\n  };\n  \n  logger.info('Lesson page mounted', {\n    source: 'LessonPage',\n    context: {\n      validation: urlValidation,\n      auth: {\n        isLoading: authLoading,\n        hasUser: !!user,\n        userId: user?.id\n      },\n      route: {\n        pathname: location.pathname,\n        search: location.search\n      }\n    }\n  });\n\n  const [lessonState, setLessonState] = useState<LessonState | null>(null);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [progress, setProgress] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [hasAttemptedLoad, setHasAttemptedLoad] = useState(false);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [navigationAttempted, setNavigationAttempted] = useState(false);\n  const [performanceMetrics, setPerformanceMetrics] = useState({\n    initializationTime: 0,\n    dataLoadTime: 0,\n    renderCount: 0\n  });\n\n  // Function to handle entering fullscreen\n  const enterFullscreen = async () => {\n    try {\n      const element = document.documentElement;\n      if (element.requestFullscreen) {\n        // Only attempt fullscreen if we're in a user gesture context\n        // and the document is not already in fullscreen mode\n        if (!document.fullscreenElement) {\n          // Add a try-catch specifically for the requestFullscreen call\n          try {\n            await element.requestFullscreen();\n            forceLog('Entered fullscreen mode successfully');\n            setIsFullscreen(true);\n          } catch (err) {\n            forceLog('Fullscreen request failed (non-critical):', err, 'warn');\n            // Non-critical error, we can continue without fullscreen\n          }\n        }\n      } else {\n        forceLog('Fullscreen API not supported', null, 'warn');\n      }\n    } catch (error) {\n      // Log but don't throw - fullscreen is not critical for functionality\n      forceLog('Error in enterFullscreen:', error, 'warn');\n    }\n  };\n\n  // Function to handle exiting fullscreen\n  const exitFullscreen = async () => {\n    try {\n      if (document.fullscreenElement && document.exitFullscreen) {\n        await document.exitFullscreen();\n      }\n    } catch (error) {\n      console.error('Exit fullscreen error:', error);\n    }\n  };\n\n  // Function to handle navigation back to lessons page\n  const navigateToLessons = async () => {\n    try {\n      if (navigationAttempted) {\n        forceLog('Navigation already attempted, preventing duplicate');\n        return;\n      }\n      \n      setNavigationAttempted(true);\n      forceLog('Attempting navigation to lessons page');\n      \n      await exitFullscreen();\n      \n      // Small delay to ensure logs are visible\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Close the window instead of navigating\n      window.close();\n      \n      // Notify parent window about lesson completion if it exists\n      if (window.opener) {\n        window.opener.postMessage({\n          type: 'LESSON_COMPLETED',\n          data: {\n            lessonId,\n            progress,\n            timestamp: new Date().toISOString()\n          }\n        }, '*');\n      }\n      \n      // Fallback if window.close() doesn't work\n      if (!window.closed) {\n        window.location.href = '/app/teacher/lessons';\n      }\n    } catch (error) {\n      forceLog('Navigation error:', error);\n      setError('Failed to navigate back to lessons page');\n    }\n  };\n\n  // Update the initialization effect to handle auth state\n  useEffect(() => {\n    let isMounted = true;\n    \n    const initializeLessonPage = async () => {\n      componentLogger.info('Initializing lesson page', {\n        startTime: PAGE_START_TIME,\n        isComponentMounted\n      });\n      \n      try {\n        if (authLoading) {\n          componentLogger.info('Waiting for auth to complete');\n          return;\n        }\n\n        if (!user) {\n          componentLogger.error('No authenticated user found');\n          setError('Authentication required');\n          return;\n        }\n\n        if (!lessonId || !topicId || !subtopicId) {\n          componentLogger.error('Missing required parameters', urlValidation);\n          setError('Invalid lesson parameters');\n          return;\n        }\n\n        componentLogger.info('Starting page initialization', {\n          lessonId,\n          topicId,\n          subtopicId,\n          userId: user.id\n        });\n\n        setIsLoading(true);\n        const lessonData = await fetchLessonData(lessonId, topicId, subtopicId);\n\n        if (!isMounted) return;\n\n        setLessonState(lessonData);\n        componentLogger.info('Lesson page initialized successfully', {\n          duration: performance.now() - PAGE_START_TIME,\n          isComponentMounted\n        });\n\n        // Notify parent window that lesson is ready\n        if (window.opener) {\n          window.opener.postMessage({\n            type: 'LESSON_INITIALIZED',\n            data: {\n              lessonId,\n              timestamp: new Date().toISOString()\n            }\n          }, '*');\n        }\n\n      } catch (error) {\n        componentLogger.error('Failed to initialize lesson page', {\n          error,\n          timeSinceStart: performance.now() - PAGE_START_TIME,\n          isComponentMounted\n        });\n        if (isMounted) {\n          setError(error instanceof Error ? error.message : 'Failed to initialize lesson');\n        }\n      } finally {\n        if (isMounted) {\n          setIsLoading(false);\n          setHasAttemptedLoad(true);\n        }\n      }\n    };\n\n    if (!hasAttemptedLoad && !authLoading) {\n      initializeLessonPage();\n    }\n\n    return () => {\n      isMounted = false;\n    };\n  }, [lessonId, topicId, subtopicId, user, authLoading, hasAttemptedLoad, urlValidation]);\n\n  // Show loading state while auth is initializing\n  if (authLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <LoadingSpinner message=\"Initializing lesson...\" />\n      </div>\n    );\n  }\n\n  // Show error if no authenticated user\n  if (!authLoading && !user) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Card className=\"p-6\">\n          <CardTitle className=\"text-xl mb-4\">Authentication Required</CardTitle>\n          <p className=\"text-muted-foreground mb-4\">Please log in to access this lesson.</p>\n          <Button onClick={() => navigate('/login', { state: { from: location } })}>\n            Go to Login\n          </Button>\n        </Card>\n      </div>\n    );\n  }\n\n  // Only navigate away if there's an error and we're not loading\n  useEffect(() => {\n    let navigationTimer: NodeJS.Timeout;\n    \n    if (error && !isLoading && hasAttemptedLoad && !navigationAttempted) {\n      forceLog('Error detected, preparing to navigate:', error);\n      navigationTimer = setTimeout(() => {\n        forceLog('Executing delayed navigation due to error');\n        navigateToLessons();\n      }, 2000); // Give more time for logs to be visible\n    }\n    \n    return () => {\n      if (navigationTimer) {\n        clearTimeout(navigationTimer);\n      }\n    };\n  }, [error, isLoading, hasAttemptedLoad, navigationAttempted]);\n\n  const handleEndLesson = async () => {\n    forceLog('End lesson requested');\n    const confirmed = window.confirm('Are you sure you want to end this lesson?');\n    if (confirmed) {\n      forceLog('End lesson confirmed');\n      // Clean up localStorage before navigating\n      if (lessonId) {\n        const storageKey = `lesson_state_${lessonId}`;\n        forceLog('Removing stored state:', storageKey);\n        localStorage.removeItem(storageKey);\n      }\n      await navigateToLessons();\n    } else {\n      forceLog('End lesson cancelled');\n    }\n  };\n\n  const getQuestionIcon = (type: string) => {\n    switch (type) {\n      case 'speaking':\n        return <Mic className=\"h-4 w-4\" />;\n      case 'multiplechoice':\n        return <PenTool className=\"h-4 w-4\" />;\n      case 'fill_blanks':\n        return <FileText className=\"h-4 w-4\" />;\n      default:\n        return <HelpCircle className=\"h-4 w-4\" />;\n    }\n  };\n\n  useEffect(() => {\n    return () => {\n      // Cleanup function\n      forceLog('Cleaning up lesson state', {\n        source: 'LearningPathTeacher',\n        context: {\n          timestamp: new Date().toISOString()\n        }\n      });\n      \n      // Preserve state in sessionStorage before cleanup\n      if (lessonId) {\n        const state = {\n          lessonId,\n          timestamp: new Date().toISOString()\n        };\n        sessionStorage.setItem('lesson_state', JSON.stringify(state));\n      }\n    };\n  }, [lessonId]);\n\n  useEffect(() => {\n    // Try to recover state on mount\n    const savedState = sessionStorage.getItem('lesson_state');\n    if (savedState) {\n      try {\n        const state = JSON.parse(savedState);\n        forceLog('Recovering lesson state', {\n          source: 'LearningPathTeacher',\n          context: {\n            savedState: state,\n            timestamp: new Date().toISOString()\n          }\n        });\n      } catch (error) {\n        forceLog('Failed to recover lesson state', {\n          source: 'LearningPathTeacher',\n          context: { error }\n        });\n      }\n    }\n  }, []);\n\n  const getLessonUrl = useCallback((id: string) => {\n    const baseUrl = window.location.origin;\n    const url = new URL(`${baseUrl}/app/teacher/lessons/lesson`);\n    \n    // Add necessary query parameters\n    url.searchParams.set('lessonId', id);\n    url.searchParams.set('timestamp', Date.now().toString());\n    \n    forceLog('Constructed lesson URL', {\n      source: 'LearningPathTeacher',\n      context: {\n        lessonId: id,\n        url: url.toString(),\n        baseUrl,\n        timestamp: new Date().toISOString()\n      }\n    });\n    \n    return url.toString();\n  }, []);\n\n  useEffect(() => {\n    setPerformanceMetrics(prev => ({\n      ...prev,\n      renderCount: prev.renderCount + 1\n    }));\n\n    componentLogger.info('Component rendered', {\n      stats: {\n        renderCount: performanceMetrics.renderCount,\n        currentStep,\n        hasLessonState: !!lessonState\n      }\n    });\n  }, [lessonState, currentStep]);\n\n  // Log initial render\n  useEffect(() => {\n    componentLogger.info('LessonPage component mounted', {\n      auth: { loading: authLoading, hasUser: !!user },\n      location: { \n        pathname: location.pathname,\n        search: location.search,\n        state: location.state\n      },\n      performance: {\n        mountTime: performance.now() - PAGE_START_TIME\n      }\n    });\n    \n    isComponentMounted = true;\n    performance.mark('lessonPage-mounted');\n    \n    return () => {\n      componentLogger.info('LessonPage component unmounting', {\n        totalMountedTime: performance.now() - PAGE_START_TIME\n      });\n      performance.mark('lessonPage-unmount');\n      performance.measure('lessonPage-lifecycle', 'lessonPage-start', 'lessonPage-unmount');\n    };\n  }, []);\n\n  // Log auth state changes\n  useEffect(() => {\n    componentLogger.debug('Auth state changed', {\n      loading: authLoading,\n      hasUser: !!user,\n      userId: user?.id\n    });\n  }, [user, authLoading]);\n\n  // Log URL parameter changes\n  useEffect(() => {\n    componentLogger.debug('URL parameters changed', {\n      search: location.search,\n      pathname: location.pathname,\n      state: location.state\n    });\n  }, [location]);\n\n  if (isLoading) {\n    forceLog('Rendering loading state');\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!lessonState) {\n    forceLog('Rendering error state - no lesson state found');\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Card className=\"p-6\">\n          <CardTitle className=\"text-xl mb-4\">Lesson not found</CardTitle>\n          <Button onClick={() => navigateToLessons()}>Go Back</Button>\n        </Card>\n      </div>\n    );\n  }\n\n  forceLog('Rendering lesson page with state:', {\n    currentStep,\n    totalSteps: lessonState.lesson.questions.length,\n    progress\n  });\n\n  const totalSteps = lessonState.lesson.questions.length;\n  const currentQuestion = lessonState.lesson.questions[currentStep];\n\n  return (\n    <LessonErrorBoundary source=\"LessonPage\">\n      <div \n        className=\"min-h-screen bg-background\"\n        data-testid=\"lesson-page-root\"\n        onLoad={() => {\n          componentLogger.debug('Main container loaded');\n          performance.mark('main-container-loaded');\n        }}\n      >\n        <LogElement name=\"Top Navigation Bar\">\n          <nav className=\"fixed top-0 left-0 right-0 z-50 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b\">\n            <div className=\"flex items-center justify-between p-4\">\n              <div className=\"flex items-center gap-4\">\n                <Button variant=\"ghost\" size=\"icon\" onClick={handleEndLesson} className=\"hover:bg-accent\">\n                  <LogElement name=\"Icon: Close (X)\">\n                    <X className=\"h-5 w-5\" />\n                  </LogElement>\n                </Button>\n                <div>\n                  <LogElement name=\"Lesson Title Heading\">\n                    <h1 className=\"text-lg font-semibold\">{lessonState.lesson.title}</h1>\n                  </LogElement>\n                  <LogElement name=\"Topic and Subtopic Info\">\n                    <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                      <span>{lessonState.topic.title}</span>\n                      <span>•</span>\n                      <span>{lessonState.subtopic.title}</span>\n                    </div>\n                  </LogElement>\n                </div>\n              </div>\n              <div className=\"flex items-center gap-4\">\n                <LogElement name=\"Progress Bar\">\n                  <Progress value={(currentStep / totalSteps) * 100} className=\"w-40\" />\n                </LogElement>\n                <Button variant=\"outline\" onClick={enterFullscreen} className=\"mr-2\">\n                  <LogElement name=\"Button: Fullscreen\">\n                    Fullscreen\n                  </LogElement>\n                </Button>\n                <Button variant=\"outline\" onClick={handleEndLesson}>\n                  <LogElement name=\"Button: End Lesson\">\n                    End Lesson\n                  </LogElement>\n                </Button>\n              </div>\n            </div>\n          </nav>\n        </LogElement>\n\n        <LogElement name=\"Main Content Area\">\n          <main className=\"pt-24 pb-8 px-4 md:px-8 max-w-7xl mx-auto\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-8\">\n              <LogElement name=\"Sidebar\">\n                <div className=\"lg:block\">\n                  <Card className=\"sticky top-24\">\n                    <CardHeader>\n                      <CardTitle className=\"text-lg flex items-center gap-2\">\n                        <LogElement name=\"Icon: List\">\n                          <List className=\"h-5 w-5\" />\n                        </LogElement>\n                        <LogElement name=\"Sidebar Heading: Lesson Overview\">\n                          Lesson Overview\n                        </LogElement>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        <div className=\"flex items-center gap-2 text-sm\">\n                          <Clock className=\"h-4 w-4 text-primary\" />\n                          <span>{lessonState.lesson.questions.length * 2} minutes</span>\n                        </div>\n                        <div className=\"flex items-center gap-2 text-sm\">\n                          <HelpCircle className=\"h-4 w-4 text-primary\" />\n                          <span>{lessonState.lesson.questions.length} Questions</span>\n                        </div>\n                        <div className=\"flex items-center gap-2 text-sm\">\n                          <Layout className=\"h-4 w-4 text-primary\" />\n                          <span>{lessonState.lesson.activities?.length || 0} Activities</span>\n                        </div>\n                        \n                        <div className=\"border-t pt-4 mt-4\">\n                          <h3 className=\"font-medium mb-3\">Questions</h3>\n                          <div className=\"space-y-3\">\n                            {lessonState.lesson.questions.map((question, index) => (\n                              <motion.div\n                                key={index}\n                                initial={{ opacity: 0, x: -20 }}\n                                animate={{ opacity: 1, x: 0 }}\n                                transition={{ delay: index * 0.1 }}\n                                className={cn(\n                                  \"flex items-center gap-2 p-2 rounded-md transition-all duration-200\",\n                                  currentStep === index ? \"bg-accent shadow-sm\" : \"hover:bg-accent/50\",\n                                  index < currentStep && \"text-primary\"\n                                )}\n                                onClick={() => setCurrentStep(index)}\n                                style={{ cursor: 'pointer' }}\n                              >\n                                {index < currentStep ? (\n                                  <CheckCircle2 className=\"h-4 w-4\" />\n                                ) : (\n                                  <div className={cn(\n                                    \"h-4 w-4 rounded-full border\",\n                                    currentStep === index && \"border-primary\"\n                                  )} />\n                                )}\n                                <span className=\"text-sm\">Question {index + 1}</span>\n                                {getQuestionIcon(question.type)}\n                              </motion.div>\n                            ))}\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </LogElement>\n              \n              <LogElement name=\"Content Tabs and Navigation\">\n                <div className=\"space-y-8\">\n                  <Tabs defaultValue=\"question\" className=\"w-full\">\n                    <TabsList className=\"mb-4\">\n                      <TabsTrigger value=\"question\">Question</TabsTrigger>\n                      <TabsTrigger value=\"teacherScript\">Teacher Script</TabsTrigger>\n                      <TabsTrigger value=\"activities\">Activities</TabsTrigger>\n                    </TabsList>\n\n                    <AnimatePresence mode=\"wait\">\n                      <motion.div\n                        key={currentStep}\n                        initial={{ opacity: 0, y: 20 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        exit={{ opacity: 0, y: -20 }}\n                        transition={{ duration: 0.3 }}\n                      >\n                        <TabsContent value=\"question\">\n                          <Card>\n                            <CardHeader>\n                              <div className=\"flex items-center justify-between\">\n                                <Badge variant=\"outline\" className=\"bg-primary/5\">\n                                  Question {currentStep + 1} of {totalSteps}\n                                </Badge>\n                                <div className=\"flex items-center gap-2\">\n                                  <LogElement name=\"Icon: Star\">\n                                    <Star className=\"h-4 w-4 text-yellow-500\" />\n                                  </LogElement>\n                                  <span className=\"text-sm\">{currentQuestion.points} Points</span>\n                                </div>\n                              </div>\n                              <LogElement name=\"Question Title Heading\">\n                                <CardTitle className=\"text-2xl mt-4\">\n                                  {currentQuestion.title || \"Question\"}\n                                </CardTitle>\n                              </LogElement>\n                            </CardHeader>\n                            <CardContent className=\"space-y-6\">\n                              <div className=\"prose prose-sm dark:prose-invert max-w-none\">\n                                <div className=\"bg-accent/50 p-4 rounded-lg\">\n                                  <h3 className=\"text-lg font-semibold mb-2\">Prompt</h3>\n                                  <p>{currentQuestion.data.prompt || currentQuestion.content}</p>\n                                </div>\n\n                                {currentQuestion.type === 'multiplechoice' && currentQuestion.metadata?.options && (\n                                  <div className=\"mt-6 space-y-4\">\n                                    {currentQuestion.metadata.options.map((option, idx) => (\n                                      <Button\n                                        key={idx}\n                                        variant=\"outline\"\n                                        className=\"w-full justify-start text-left\"\n                                      >\n                                        {option}\n                                      </Button>\n                                    ))}\n                                  </div>\n                                )}\n\n                                {currentQuestion.type === 'speaking' && (\n                                  <div className=\"mt-6\">\n                                    <Button className=\"w-full justify-center gap-2\">\n                                      <Mic className=\"h-4 w-4\" />\n                                      Start Recording\n                                    </Button>\n                                  </div>\n                                )}\n                              </div>\n                            </CardContent>\n                          </Card>\n                        </TabsContent>\n\n                        <TabsContent value=\"teacherScript\">\n                          <Card>\n                            <CardContent className=\"p-6\">\n                              <div className=\"prose prose-sm dark:prose-invert max-w-none\">\n                                <h3 className=\"text-lg font-semibold mb-4\">Teacher Script</h3>\n                                <div className=\"bg-accent/50 p-4 rounded-lg\">\n                                  {currentQuestion.data.teacherScript || \"No teacher script available.\"}\n                                </div>\n                              </div>\n                            </CardContent>\n                          </Card>\n                        </TabsContent>\n\n                        <TabsContent value=\"activities\">\n                          <Card>\n                            <CardContent className=\"p-6\">\n                              <div className=\"prose prose-sm dark:prose-invert max-w-none\">\n                                <h3 className=\"text-lg font-semibold mb-4\">Activities</h3>\n                                {lessonState.lesson.activities?.length > 0 ? (\n                                  <div className=\"space-y-4\">\n                                    {lessonState.lesson.activities.map((activity, idx) => (\n                                      <div key={idx} className=\"bg-accent/50 p-4 rounded-lg\">\n                                        <h4 className=\"font-medium\">{activity.title}</h4>\n                                        <p>{activity.description}</p>\n                                      </div>\n                                    ))}\n                                  </div>\n                                ) : (\n                                  <p>No activities available for this lesson.</p>\n                                )}\n                              </div>\n                            </CardContent>\n                          </Card>\n                        </TabsContent>\n                      </motion.div>\n                    </AnimatePresence>\n                  </Tabs>\n\n                  <div className=\"flex items-center justify-between pt-4\">\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => setCurrentStep(prev => Math.max(0, prev - 1))}\n                      disabled={currentStep === 0}\n                    >\n                      <LogElement name=\"Button: Previous\">\n                        <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                        Previous\n                      </LogElement>\n                    </Button>\n                    <Button\n                      onClick={() => {\n                        if (currentStep < totalSteps - 1) {\n                          setCurrentStep(prev => prev + 1);\n                          setProgress(prev => prev + (100 / totalSteps));\n                        } else {\n                          handleEndLesson();\n                        }\n                      }}\n                    >\n                      <LogElement name={currentStep < totalSteps - 1 ? \"Button: Next\" : \"Button: Complete Lesson\"}>\n                        {currentStep < totalSteps - 1 ? (\n                          <>\n                            Next\n                            <ArrowLeft className=\"h-4 w-4 ml-2 rotate-180\" />\n                          </>\n                        ) : (\n                          <>\n                            Complete Lesson\n                            <Flag className=\"h-4 w-4 ml-2\" />\n                          </>\n                        )}\n                      </LogElement>\n                    </Button>\n                  </div>\n                </div>\n              </LogElement>\n            </div>\n          </main>\n        </LogElement>\n      </div>\n    </LessonErrorBoundary>\n  );\n} "
        }
    ]
}