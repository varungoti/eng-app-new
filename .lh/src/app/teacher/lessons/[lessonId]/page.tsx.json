{
    "sourceFile": "src/app/teacher/lessons/[lessonId]/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 71,
            "patches": [
                {
                    "date": 1739185040582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739186429538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,16 @@\n   const [lesson, setLesson] = useState<LessonWithContent | null>(null);\r\n   const [currentStep, setCurrentStep] = useState(0);\r\n   const [progress, setProgress] = useState(0);\r\n   const [isLoading, setIsLoading] = useState(true);\r\n+  const [points, setPoints] = useState(0);\r\n+  const [showConfetti, setShowConfetti] = useState(false);\r\n+  const [isAnswered, setIsAnswered] = useState(false);\r\n+  const [selectedAnswer, setSelectedAnswer] = useState<string | null>(null);\r\n+  const [feedback, setFeedback] = useState<{\r\n+    type: 'success' | 'error' | null;\r\n+    message: string;\r\n+  }>({ type: null, message: '' });\r\n \r\n   useEffect(() => {\r\n     const fetchLesson = async () => {\r\n       try {\r\n@@ -70,12 +78,12 @@\n     );\r\n   }\r\n \r\n   return (\r\n-    <div className=\"min-h-screen bg-gradient-to-b from-background to-accent/20\">\r\n+    <div className=\"min-h-screen bg-gradient-to-br from-background via-accent/20 to-background\">\r\n       {/* Top Navigation Bar */}\r\n       <nav className=\"fixed top-0 left-0 right-0 z-50 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b\">\r\n-        <div className=\"flex items-center justify-between p-4\">\r\n+        <div className=\"flex items-center justify-between p-4 max-w-7xl mx-auto\">\r\n           <div className=\"flex items-center gap-4\">\r\n             <Button\r\n               variant=\"ghost\"\r\n               size=\"icon\"\r\n@@ -88,9 +96,13 @@\n               <h1 className=\"text-lg font-semibold\">{lesson.title}</h1>\r\n               <p className=\"text-sm text-muted-foreground\">Lesson {currentStep + 1} of {lesson.questions?.length || 0}</p>\r\n             </div>\r\n           </div>\r\n-          <div className=\"flex items-center gap-2\">\r\n+          <div className=\"flex items-center gap-4\">\r\n+            <div className=\"flex items-center gap-2 bg-accent/50 px-4 py-2 rounded-full\">\r\n+              <Star className=\"h-5 w-5 text-yellow-500\" />\r\n+              <span className=\"font-bold\">{points} Points</span>\r\n+            </div>\r\n             <Progress value={progress} className=\"w-40\" />\r\n             <Button variant=\"outline\" onClick={handleEndLesson}>\r\n               End Lesson\r\n             </Button>\r\n@@ -102,9 +114,9 @@\n       <main className=\"pt-24 pb-8 px-4 md:px-8 max-w-7xl mx-auto\">\r\n         <div className=\"grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-8\">\r\n           {/* Sidebar */}\r\n           <div className=\"lg:block\">\r\n-            <Card className=\"sticky top-24\">\r\n+            <Card className=\"sticky top-24 bg-card/50 backdrop-blur\">\r\n               <CardHeader>\r\n                 <CardTitle className=\"text-lg flex items-center gap-2\">\r\n                   <List className=\"h-5 w-5\" />\r\n                   Lesson Overview\r\n@@ -128,26 +140,29 @@\n                   <div className=\"border-t pt-4 mt-4\">\r\n                     <h3 className=\"font-medium mb-3\">Progress</h3>\r\n                     <div className=\"space-y-3\">\r\n                       {lesson.questions?.map((_, index) => (\r\n-                        <div\r\n+                        <motion.div\r\n                           key={index}\r\n+                          initial={{ opacity: 0, x: -20 }}\r\n+                          animate={{ opacity: 1, x: 0 }}\r\n+                          transition={{ delay: index * 0.1 }}\r\n                           className={cn(\r\n-                            \"flex items-center gap-2 p-2 rounded-md transition-colors\",\r\n-                            currentStep === index ? \"bg-accent\" : \"hover:bg-accent/50\",\r\n+                            \"flex items-center gap-2 p-2 rounded-md transition-all duration-200\",\r\n+                            currentStep === index ? \"bg-accent shadow-sm\" : \"hover:bg-accent/50\",\r\n                             index < currentStep && \"text-primary\"\r\n                           )}\r\n                         >\r\n                           {index < currentStep ? (\r\n                             <CheckCircle2 className=\"h-4 w-4\" />\r\n                           ) : (\r\n                             <div className={cn(\r\n-                              \"h-4 w-4 rounded-full border\",\r\n-                              currentStep === index && \"border-primary\"\r\n+                              \"h-4 w-4 rounded-full border transition-colors duration-200\",\r\n+                              currentStep === index && \"border-primary bg-primary/10\"\r\n                             )} />\r\n                           )}\r\n                           <span className=\"text-sm\">Question {index + 1}</span>\r\n-                        </div>\r\n+                        </motion.div>\r\n                       ))}\r\n                     </div>\r\n                   </div>\r\n                 </div>\r\n@@ -164,20 +179,20 @@\n                 animate={{ opacity: 1, y: 0 }}\r\n                 exit={{ opacity: 0, y: -20 }}\r\n                 transition={{ duration: 0.3 }}\r\n               >\r\n-                <Card>\r\n-                  <CardHeader>\r\n+                <Card className=\"overflow-hidden border-2 transition-colors duration-200\">\r\n+                  <CardHeader className=\"space-y-4\">\r\n                     <div className=\"flex items-center justify-between\">\r\n-                      <Badge variant=\"outline\" className=\"bg-primary/5\">\r\n+                      <Badge variant=\"outline\" className=\"bg-primary/5 px-3 py-1\">\r\n                         Question {currentStep + 1}\r\n                       </Badge>\r\n                       <div className=\"flex items-center gap-2\">\r\n                         <Star className=\"h-4 w-4 text-yellow-500\" />\r\n-                        <span className=\"text-sm\">Points: 10</span>\r\n+                        <span className=\"text-sm font-medium\">+10 Points</span>\r\n                       </div>\r\n                     </div>\r\n-                    <CardTitle className=\"text-2xl mt-4\">\r\n+                    <CardTitle className=\"text-2xl\">\r\n                       {lesson.questions?.[currentStep]?.title || \"Question Title\"}\r\n                     </CardTitle>\r\n                   </CardHeader>\r\n                   <CardContent className=\"space-y-6\">\r\n@@ -185,15 +200,88 @@\n                     <div className=\"prose prose-sm dark:prose-invert max-w-none\">\r\n                       {lesson.questions?.[currentStep]?.content || \"Question content goes here...\"}\r\n                     </div>\r\n \r\n+                    {/* Answer Options */}\r\n+                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 pt-6\">\r\n+                      {lesson.questions?.[currentStep]?.options?.map((option, index) => (\r\n+                        <motion.div\r\n+                          key={index}\r\n+                          initial={{ opacity: 0, y: 20 }}\r\n+                          animate={{ opacity: 1, y: 0 }}\r\n+                          transition={{ delay: index * 0.1 }}\r\n+                        >\r\n+                          <Button\r\n+                            variant=\"outline\"\r\n+                            className={cn(\r\n+                              \"w-full h-auto py-6 px-4 text-left justify-start\",\r\n+                              \"transition-all duration-200\",\r\n+                              selectedAnswer === option && \"border-primary\",\r\n+                              isAnswered && option === lesson.questions?.[currentStep]?.correctAnswer && \"border-green-500 bg-green-500/10\",\r\n+                              isAnswered && selectedAnswer === option && option !== lesson.questions?.[currentStep]?.correctAnswer && \"border-red-500 bg-red-500/10\"\r\n+                            )}\r\n+                            onClick={() => {\r\n+                              if (isAnswered) return;\r\n+                              setSelectedAnswer(option);\r\n+                              setIsAnswered(true);\r\n+                              \r\n+                              const isCorrect = option === lesson.questions?.[currentStep]?.correctAnswer;\r\n+                              setFeedback({\r\n+                                type: isCorrect ? 'success' : 'error',\r\n+                                message: isCorrect ? 'Excellent! That\\'s correct!' : 'Not quite right. Try again!'\r\n+                              });\r\n+                              \r\n+                              if (isCorrect) {\r\n+                                setPoints(prev => prev + 10);\r\n+                                setShowConfetti(true);\r\n+                                setTimeout(() => setShowConfetti(false), 3000);\r\n+                              }\r\n+                            }}\r\n+                          >\r\n+                            <div className=\"flex items-start gap-4\">\r\n+                              <div className={cn(\r\n+                                \"w-6 h-6 rounded-full border-2 flex items-center justify-center flex-shrink-0\",\r\n+                                selectedAnswer === option ? \"border-primary\" : \"border-muted-foreground/30\"\r\n+                              )}>\r\n+                                {selectedAnswer === option && (\r\n+                                  <motion.div\r\n+                                    initial={{ scale: 0 }}\r\n+                                    animate={{ scale: 1 }}\r\n+                                    className=\"w-3 h-3 rounded-full bg-primary\"\r\n+                                  />\r\n+                                )}\r\n+                              </div>\r\n+                              <span className=\"text-base\">{option}</span>\r\n+                            </div>\r\n+                          </Button>\r\n+                        </motion.div>\r\n+                      ))}\r\n+                    </div>\r\n+\r\n+                    {/* Feedback Message */}\r\n+                    <AnimatePresence>\r\n+                      {feedback.type && (\r\n+                        <motion.div\r\n+                          initial={{ opacity: 0, y: 20 }}\r\n+                          animate={{ opacity: 1, y: 0 }}\r\n+                          exit={{ opacity: 0, y: -20 }}\r\n+                          className={cn(\r\n+                            \"p-4 rounded-lg\",\r\n+                            feedback.type === 'success' ? \"bg-green-500/10 text-green-500\" : \"bg-red-500/10 text-red-500\"\r\n+                          )}\r\n+                        >\r\n+                          {feedback.message}\r\n+                        </motion.div>\r\n+                      )}\r\n+                    </AnimatePresence>\r\n+\r\n                     {/* Interactive Elements */}\r\n                     <div className=\"space-y-4 pt-6\">\r\n                       <Button \r\n-                        className=\"w-full justify-start text-left\"\r\n+                        className=\"w-full justify-start text-left group\"\r\n                         variant=\"outline\"\r\n                       >\r\n-                        <Play className=\"h-4 w-4 mr-2\" />\r\n+                        <Play className=\"h-4 w-4 mr-2 transition-transform group-hover:scale-110\" />\r\n                         Start Activity\r\n                       </Button>\r\n                     </div>\r\n                   </CardContent>\r\n@@ -204,10 +292,16 @@\n             {/* Navigation Buttons */}\r\n             <div className=\"flex items-center justify-between pt-4\">\r\n               <Button\r\n                 variant=\"outline\"\r\n-                onClick={() => setCurrentStep(prev => Math.max(0, prev - 1))}\r\n+                onClick={() => {\r\n+                  setCurrentStep(prev => Math.max(0, prev - 1));\r\n+                  setSelectedAnswer(null);\r\n+                  setIsAnswered(false);\r\n+                  setFeedback({ type: null, message: '' });\r\n+                }}\r\n                 disabled={currentStep === 0}\r\n+                className=\"transition-transform hover:scale-105\"\r\n               >\r\n                 <ArrowLeft className=\"h-4 w-4 mr-2\" />\r\n                 Previous\r\n               </Button>\r\n@@ -215,12 +309,17 @@\n                 onClick={() => {\r\n                   if (currentStep < (lesson.questions?.length || 0) - 1) {\r\n                     setCurrentStep(prev => prev + 1);\r\n                     setProgress(prev => prev + (100 / (lesson.questions?.length || 1)));\r\n+                    setSelectedAnswer(null);\r\n+                    setIsAnswered(false);\r\n+                    setFeedback({ type: null, message: '' });\r\n                   } else {\r\n                     handleEndLesson();\r\n                   }\r\n                 }}\r\n+                className=\"transition-transform hover:scale-105\"\r\n+                disabled={!isAnswered}\r\n               >\r\n                 {currentStep < (lesson.questions?.length || 0) - 1 ? (\r\n                   <>\r\n                     Next\r\n@@ -236,7 +335,14 @@\n             </div>\r\n           </div>\r\n         </div>\r\n       </main>\r\n+\r\n+      {/* Confetti Effect */}\r\n+      {showConfetti && (\r\n+        <div className=\"fixed inset-0 pointer-events-none z-50\">\r\n+          {/* Add your confetti animation component here */}\r\n+        </div>\r\n+      )}\r\n     </div>\r\n   );\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739186445730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,10 +10,25 @@\n import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\r\n import { ArrowLeft, BookOpen, CheckCircle2, Clock, Flag, HelpCircle, Layout, List, Play, Settings, Star, X } from \"lucide-react\";\r\n import { cn } from \"@/lib/utils\";\r\n import { supabase } from \"@/lib/supabase\";\r\n-import { LessonWithContent } from \"@/types\";\r\n+import { LessonWithContent, Question, Activity, ExercisePrompt } from \"@/types\";\r\n \r\n+interface LessonWithContent {\r\n+  id: string;\r\n+  title: string;\r\n+  content?: string;\r\n+  duration?: number;\r\n+  description?: string;\r\n+  questions?: Question[];\r\n+  activities?: Activity[];\r\n+  exercise_prompts?: ExercisePrompt[];\r\n+  metadata?: {\r\n+    difficulty?: string;\r\n+    [key: string]: any;\r\n+  };\r\n+}\r\n+\r\n export default function LessonPage() {\r\n   const { lessonId } = useParams();\r\n   const navigate = useNavigate();\r\n   const [lesson, setLesson] = useState<LessonWithContent | null>(null);\r\n@@ -139,9 +154,9 @@\n                   \r\n                   <div className=\"border-t pt-4 mt-4\">\r\n                     <h3 className=\"font-medium mb-3\">Progress</h3>\r\n                     <div className=\"space-y-3\">\r\n-                      {lesson.questions?.map((_, index) => (\r\n+                      {lesson.questions?.map((question: Question, index: number) => (\r\n                         <motion.div\r\n                           key={index}\r\n                           initial={{ opacity: 0, x: -20 }}\r\n                           animate={{ opacity: 1, x: 0 }}\r\n"
                },
                {
                    "date": 1739186463170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,17 +10,23 @@\n import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\r\n import { ArrowLeft, BookOpen, CheckCircle2, Clock, Flag, HelpCircle, Layout, List, Play, Settings, Star, X } from \"lucide-react\";\r\n import { cn } from \"@/lib/utils\";\r\n import { supabase } from \"@/lib/supabase\";\r\n-import { LessonWithContent, Question, Activity, ExercisePrompt } from \"@/types\";\r\n+import { Question, Activity, ExercisePrompt } from \"@/types\";\r\n \r\n interface LessonWithContent {\r\n   id: string;\r\n   title: string;\r\n   content?: string;\r\n   duration?: number;\r\n   description?: string;\r\n-  questions?: Question[];\r\n+  questions?: Array<{\r\n+    id: string;\r\n+    title: string;\r\n+    content: string;\r\n+    options?: string[];\r\n+    correctAnswer?: string;\r\n+  }>;\r\n   activities?: Activity[];\r\n   exercise_prompts?: ExercisePrompt[];\r\n   metadata?: {\r\n     difficulty?: string;\r\n@@ -154,9 +160,9 @@\n                   \r\n                   <div className=\"border-t pt-4 mt-4\">\r\n                     <h3 className=\"font-medium mb-3\">Progress</h3>\r\n                     <div className=\"space-y-3\">\r\n-                      {lesson.questions?.map((question: Question, index: number) => (\r\n+                      {lesson.questions?.map((question, index: number) => (\r\n                         <motion.div\r\n                           key={index}\r\n                           initial={{ opacity: 0, x: -20 }}\r\n                           animate={{ opacity: 1, x: 0 }}\r\n@@ -217,9 +223,9 @@\n                     </div>\r\n \r\n                     {/* Answer Options */}\r\n                     <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 pt-6\">\r\n-                      {lesson.questions?.[currentStep]?.options?.map((option, index) => (\r\n+                      {lesson.questions?.[currentStep]?.options?.map((option: string, index: number) => (\r\n                         <motion.div\r\n                           key={index}\r\n                           initial={{ opacity: 0, y: 20 }}\r\n                           animate={{ opacity: 1, y: 0 }}\r\n"
                },
                {
                    "date": 1739186480069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,23 +10,25 @@\n import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\r\n import { ArrowLeft, BookOpen, CheckCircle2, Clock, Flag, HelpCircle, Layout, List, Play, Settings, Star, X } from \"lucide-react\";\r\n import { cn } from \"@/lib/utils\";\r\n import { supabase } from \"@/lib/supabase\";\r\n-import { Question, Activity, ExercisePrompt } from \"@/types\";\r\n+import { Activity, ExercisePrompt } from \"@/types\";\r\n \r\n+interface LessonQuestion {\r\n+  id: string;\r\n+  title: string;\r\n+  content: string;\r\n+  options?: string[];\r\n+  correctAnswer?: string;\r\n+}\r\n+\r\n interface LessonWithContent {\r\n   id: string;\r\n   title: string;\r\n   content?: string;\r\n   duration?: number;\r\n   description?: string;\r\n-  questions?: Array<{\r\n-    id: string;\r\n-    title: string;\r\n-    content: string;\r\n-    options?: string[];\r\n-    correctAnswer?: string;\r\n-  }>;\r\n+  questions?: LessonQuestion[];\r\n   activities?: Activity[];\r\n   exercise_prompts?: ExercisePrompt[];\r\n   metadata?: {\r\n     difficulty?: string;\r\n@@ -40,16 +42,8 @@\n   const [lesson, setLesson] = useState<LessonWithContent | null>(null);\r\n   const [currentStep, setCurrentStep] = useState(0);\r\n   const [progress, setProgress] = useState(0);\r\n   const [isLoading, setIsLoading] = useState(true);\r\n-  const [points, setPoints] = useState(0);\r\n-  const [showConfetti, setShowConfetti] = useState(false);\r\n-  const [isAnswered, setIsAnswered] = useState(false);\r\n-  const [selectedAnswer, setSelectedAnswer] = useState<string | null>(null);\r\n-  const [feedback, setFeedback] = useState<{\r\n-    type: 'success' | 'error' | null;\r\n-    message: string;\r\n-  }>({ type: null, message: '' });\r\n \r\n   useEffect(() => {\r\n     const fetchLesson = async () => {\r\n       try {\r\n@@ -99,12 +93,12 @@\n     );\r\n   }\r\n \r\n   return (\r\n-    <div className=\"min-h-screen bg-gradient-to-br from-background via-accent/20 to-background\">\r\n+    <div className=\"min-h-screen bg-gradient-to-b from-background to-accent/20\">\r\n       {/* Top Navigation Bar */}\r\n       <nav className=\"fixed top-0 left-0 right-0 z-50 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b\">\r\n-        <div className=\"flex items-center justify-between p-4 max-w-7xl mx-auto\">\r\n+        <div className=\"flex items-center justify-between p-4\">\r\n           <div className=\"flex items-center gap-4\">\r\n             <Button\r\n               variant=\"ghost\"\r\n               size=\"icon\"\r\n@@ -117,13 +111,9 @@\n               <h1 className=\"text-lg font-semibold\">{lesson.title}</h1>\r\n               <p className=\"text-sm text-muted-foreground\">Lesson {currentStep + 1} of {lesson.questions?.length || 0}</p>\r\n             </div>\r\n           </div>\r\n-          <div className=\"flex items-center gap-4\">\r\n-            <div className=\"flex items-center gap-2 bg-accent/50 px-4 py-2 rounded-full\">\r\n-              <Star className=\"h-5 w-5 text-yellow-500\" />\r\n-              <span className=\"font-bold\">{points} Points</span>\r\n-            </div>\r\n+          <div className=\"flex items-center gap-2\">\r\n             <Progress value={progress} className=\"w-40\" />\r\n             <Button variant=\"outline\" onClick={handleEndLesson}>\r\n               End Lesson\r\n             </Button>\r\n@@ -135,9 +125,9 @@\n       <main className=\"pt-24 pb-8 px-4 md:px-8 max-w-7xl mx-auto\">\r\n         <div className=\"grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-8\">\r\n           {/* Sidebar */}\r\n           <div className=\"lg:block\">\r\n-            <Card className=\"sticky top-24 bg-card/50 backdrop-blur\">\r\n+            <Card className=\"sticky top-24\">\r\n               <CardHeader>\r\n                 <CardTitle className=\"text-lg flex items-center gap-2\">\r\n                   <List className=\"h-5 w-5\" />\r\n                   Lesson Overview\r\n@@ -160,9 +150,9 @@\n                   \r\n                   <div className=\"border-t pt-4 mt-4\">\r\n                     <h3 className=\"font-medium mb-3\">Progress</h3>\r\n                     <div className=\"space-y-3\">\r\n-                      {lesson.questions?.map((question, index: number) => (\r\n+                      {lesson.questions?.map((question: LessonQuestion, index: number) => (\r\n                         <motion.div\r\n                           key={index}\r\n                           initial={{ opacity: 0, x: -20 }}\r\n                           animate={{ opacity: 1, x: 0 }}\r\n@@ -176,10 +166,10 @@\n                           {index < currentStep ? (\r\n                             <CheckCircle2 className=\"h-4 w-4\" />\r\n                           ) : (\r\n                             <div className={cn(\r\n-                              \"h-4 w-4 rounded-full border transition-colors duration-200\",\r\n-                              currentStep === index && \"border-primary bg-primary/10\"\r\n+                              \"h-4 w-4 rounded-full border\",\r\n+                              currentStep === index && \"border-primary\"\r\n                             )} />\r\n                           )}\r\n                           <span className=\"text-sm\">Question {index + 1}</span>\r\n                         </motion.div>\r\n@@ -200,20 +190,20 @@\n                 animate={{ opacity: 1, y: 0 }}\r\n                 exit={{ opacity: 0, y: -20 }}\r\n                 transition={{ duration: 0.3 }}\r\n               >\r\n-                <Card className=\"overflow-hidden border-2 transition-colors duration-200\">\r\n-                  <CardHeader className=\"space-y-4\">\r\n+                <Card>\r\n+                  <CardHeader>\r\n                     <div className=\"flex items-center justify-between\">\r\n-                      <Badge variant=\"outline\" className=\"bg-primary/5 px-3 py-1\">\r\n+                      <Badge variant=\"outline\" className=\"bg-primary/5\">\r\n                         Question {currentStep + 1}\r\n                       </Badge>\r\n                       <div className=\"flex items-center gap-2\">\r\n                         <Star className=\"h-4 w-4 text-yellow-500\" />\r\n-                        <span className=\"text-sm font-medium\">+10 Points</span>\r\n+                        <span className=\"text-sm\">Points: 10</span>\r\n                       </div>\r\n                     </div>\r\n-                    <CardTitle className=\"text-2xl\">\r\n+                    <CardTitle className=\"text-2xl mt-4\">\r\n                       {lesson.questions?.[currentStep]?.title || \"Question Title\"}\r\n                     </CardTitle>\r\n                   </CardHeader>\r\n                   <CardContent className=\"space-y-6\">\r\n@@ -221,88 +211,15 @@\n                     <div className=\"prose prose-sm dark:prose-invert max-w-none\">\r\n                       {lesson.questions?.[currentStep]?.content || \"Question content goes here...\"}\r\n                     </div>\r\n \r\n-                    {/* Answer Options */}\r\n-                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 pt-6\">\r\n-                      {lesson.questions?.[currentStep]?.options?.map((option: string, index: number) => (\r\n-                        <motion.div\r\n-                          key={index}\r\n-                          initial={{ opacity: 0, y: 20 }}\r\n-                          animate={{ opacity: 1, y: 0 }}\r\n-                          transition={{ delay: index * 0.1 }}\r\n-                        >\r\n-                          <Button\r\n-                            variant=\"outline\"\r\n-                            className={cn(\r\n-                              \"w-full h-auto py-6 px-4 text-left justify-start\",\r\n-                              \"transition-all duration-200\",\r\n-                              selectedAnswer === option && \"border-primary\",\r\n-                              isAnswered && option === lesson.questions?.[currentStep]?.correctAnswer && \"border-green-500 bg-green-500/10\",\r\n-                              isAnswered && selectedAnswer === option && option !== lesson.questions?.[currentStep]?.correctAnswer && \"border-red-500 bg-red-500/10\"\r\n-                            )}\r\n-                            onClick={() => {\r\n-                              if (isAnswered) return;\r\n-                              setSelectedAnswer(option);\r\n-                              setIsAnswered(true);\r\n-                              \r\n-                              const isCorrect = option === lesson.questions?.[currentStep]?.correctAnswer;\r\n-                              setFeedback({\r\n-                                type: isCorrect ? 'success' : 'error',\r\n-                                message: isCorrect ? 'Excellent! That\\'s correct!' : 'Not quite right. Try again!'\r\n-                              });\r\n-                              \r\n-                              if (isCorrect) {\r\n-                                setPoints(prev => prev + 10);\r\n-                                setShowConfetti(true);\r\n-                                setTimeout(() => setShowConfetti(false), 3000);\r\n-                              }\r\n-                            }}\r\n-                          >\r\n-                            <div className=\"flex items-start gap-4\">\r\n-                              <div className={cn(\r\n-                                \"w-6 h-6 rounded-full border-2 flex items-center justify-center flex-shrink-0\",\r\n-                                selectedAnswer === option ? \"border-primary\" : \"border-muted-foreground/30\"\r\n-                              )}>\r\n-                                {selectedAnswer === option && (\r\n-                                  <motion.div\r\n-                                    initial={{ scale: 0 }}\r\n-                                    animate={{ scale: 1 }}\r\n-                                    className=\"w-3 h-3 rounded-full bg-primary\"\r\n-                                  />\r\n-                                )}\r\n-                              </div>\r\n-                              <span className=\"text-base\">{option}</span>\r\n-                            </div>\r\n-                          </Button>\r\n-                        </motion.div>\r\n-                      ))}\r\n-                    </div>\r\n-\r\n-                    {/* Feedback Message */}\r\n-                    <AnimatePresence>\r\n-                      {feedback.type && (\r\n-                        <motion.div\r\n-                          initial={{ opacity: 0, y: 20 }}\r\n-                          animate={{ opacity: 1, y: 0 }}\r\n-                          exit={{ opacity: 0, y: -20 }}\r\n-                          className={cn(\r\n-                            \"p-4 rounded-lg\",\r\n-                            feedback.type === 'success' ? \"bg-green-500/10 text-green-500\" : \"bg-red-500/10 text-red-500\"\r\n-                          )}\r\n-                        >\r\n-                          {feedback.message}\r\n-                        </motion.div>\r\n-                      )}\r\n-                    </AnimatePresence>\r\n-\r\n                     {/* Interactive Elements */}\r\n                     <div className=\"space-y-4 pt-6\">\r\n                       <Button \r\n-                        className=\"w-full justify-start text-left group\"\r\n+                        className=\"w-full justify-start text-left\"\r\n                         variant=\"outline\"\r\n                       >\r\n-                        <Play className=\"h-4 w-4 mr-2 transition-transform group-hover:scale-110\" />\r\n+                        <Play className=\"h-4 w-4 mr-2\" />\r\n                         Start Activity\r\n                       </Button>\r\n                     </div>\r\n                   </CardContent>\r\n@@ -313,16 +230,10 @@\n             {/* Navigation Buttons */}\r\n             <div className=\"flex items-center justify-between pt-4\">\r\n               <Button\r\n                 variant=\"outline\"\r\n-                onClick={() => {\r\n-                  setCurrentStep(prev => Math.max(0, prev - 1));\r\n-                  setSelectedAnswer(null);\r\n-                  setIsAnswered(false);\r\n-                  setFeedback({ type: null, message: '' });\r\n-                }}\r\n+                onClick={() => setCurrentStep(prev => Math.max(0, prev - 1))}\r\n                 disabled={currentStep === 0}\r\n-                className=\"transition-transform hover:scale-105\"\r\n               >\r\n                 <ArrowLeft className=\"h-4 w-4 mr-2\" />\r\n                 Previous\r\n               </Button>\r\n@@ -330,17 +241,12 @@\n                 onClick={() => {\r\n                   if (currentStep < (lesson.questions?.length || 0) - 1) {\r\n                     setCurrentStep(prev => prev + 1);\r\n                     setProgress(prev => prev + (100 / (lesson.questions?.length || 1)));\r\n-                    setSelectedAnswer(null);\r\n-                    setIsAnswered(false);\r\n-                    setFeedback({ type: null, message: '' });\r\n                   } else {\r\n                     handleEndLesson();\r\n                   }\r\n                 }}\r\n-                className=\"transition-transform hover:scale-105\"\r\n-                disabled={!isAnswered}\r\n               >\r\n                 {currentStep < (lesson.questions?.length || 0) - 1 ? (\r\n                   <>\r\n                     Next\r\n@@ -356,14 +262,7 @@\n             </div>\r\n           </div>\r\n         </div>\r\n       </main>\r\n-\r\n-      {/* Confetti Effect */}\r\n-      {showConfetti && (\r\n-        <div className=\"fixed inset-0 pointer-events-none z-50\">\r\n-          {/* Add your confetti animation component here */}\r\n-        </div>\r\n-      )}\r\n     </div>\r\n   );\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739186674463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,25 +10,23 @@\n import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\r\n import { ArrowLeft, BookOpen, CheckCircle2, Clock, Flag, HelpCircle, Layout, List, Play, Settings, Star, X } from \"lucide-react\";\r\n import { cn } from \"@/lib/utils\";\r\n import { supabase } from \"@/lib/supabase\";\r\n-import { Activity, ExercisePrompt } from \"@/types\";\r\n+import { Question, Activity, ExercisePrompt } from \"@/types\";\r\n \r\n-interface LessonQuestion {\r\n-  id: string;\r\n-  title: string;\r\n-  content: string;\r\n-  options?: string[];\r\n-  correctAnswer?: string;\r\n-}\r\n-\r\n interface LessonWithContent {\r\n   id: string;\r\n   title: string;\r\n   content?: string;\r\n   duration?: number;\r\n   description?: string;\r\n-  questions?: LessonQuestion[];\r\n+  questions?: Array<{\r\n+    id: string;\r\n+    title: string;\r\n+    content: string;\r\n+    options?: string[];\r\n+    correctAnswer?: string;\r\n+  }>;\r\n   activities?: Activity[];\r\n   exercise_prompts?: ExercisePrompt[];\r\n   metadata?: {\r\n     difficulty?: string;\r\n@@ -150,9 +148,9 @@\n                   \r\n                   <div className=\"border-t pt-4 mt-4\">\r\n                     <h3 className=\"font-medium mb-3\">Progress</h3>\r\n                     <div className=\"space-y-3\">\r\n-                      {lesson.questions?.map((question: LessonQuestion, index: number) => (\r\n+                      {lesson.questions?.map((question, index: number) => (\r\n                         <motion.div\r\n                           key={index}\r\n                           initial={{ opacity: 0, x: -20 }}\r\n                           animate={{ opacity: 1, x: 0 }}\r\n"
                },
                {
                    "date": 1739190143484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,97 +1,129 @@\n \"use client\";\r\n \r\n import { useEffect, useState } from \"react\";\r\n-import { useParams, useNavigate } from \"react-router-dom\";\r\n+import { useParams, useSearchParams } from \"next/navigation\";\r\n import { motion, AnimatePresence } from \"framer-motion\";\r\n import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\n import { Button } from \"@/components/ui/button\";\r\n import { Progress } from \"@/components/ui/progress\";\r\n import { Badge } from \"@/components/ui/badge\";\r\n import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\r\n-import { ArrowLeft, BookOpen, CheckCircle2, Clock, Flag, HelpCircle, Layout, List, Play, Settings, Star, X } from \"lucide-react\";\r\n+import { ArrowLeft, BookOpen, CheckCircle2, Clock, Flag, HelpCircle, Layout, List, Play, Settings, Star, X, Mic, PenTool, FileText } from \"lucide-react\";\r\n import { cn } from \"@/lib/utils\";\r\n import { supabase } from \"@/lib/supabase\";\r\n import { Question, Activity, ExercisePrompt } from \"@/types\";\r\n+import { useRouter } from \"next/navigation\";\r\n \r\n-interface LessonWithContent {\r\n-  id: string;\r\n-  title: string;\r\n-  content?: string;\r\n-  duration?: number;\r\n-  description?: string;\r\n-  questions?: Array<{\r\n+interface LessonState {\r\n+  lesson: {\r\n     id: string;\r\n     title: string;\r\n-    content: string;\r\n-    options?: string[];\r\n-    correctAnswer?: string;\r\n-  }>;\r\n-  activities?: Activity[];\r\n-  exercise_prompts?: ExercisePrompt[];\r\n-  metadata?: {\r\n-    difficulty?: string;\r\n-    [key: string]: any;\r\n+    content?: string;\r\n+    description?: string;\r\n+    questions: Array<{\r\n+      id: string;\r\n+      title: string;\r\n+      content: string;\r\n+      type: string;\r\n+      data: {\r\n+        prompt?: string;\r\n+        teacherScript?: string;\r\n+        options?: string[];\r\n+      };\r\n+      metadata?: {\r\n+        sampleAnswer?: string;\r\n+        correct?: string[];\r\n+        options?: string[];\r\n+      };\r\n+      points: number;\r\n+    }>;\r\n+    activities: Activity[];\r\n+    exercise_prompts: ExercisePrompt[];\r\n   };\r\n+  topic: {\r\n+    id: string;\r\n+    title: string;\r\n+  };\r\n+  subtopic: {\r\n+    id: string;\r\n+    title: string;\r\n+  };\r\n }\r\n \r\n export default function LessonPage() {\r\n-  const { lessonId } = useParams();\r\n-  const navigate = useNavigate();\r\n-  const [lesson, setLesson] = useState<LessonWithContent | null>(null);\r\n+  const params = useParams();\r\n+  const searchParams = useSearchParams();\r\n+  const router = useRouter();\r\n+  const [lessonState, setLessonState] = useState<LessonState | null>(null);\r\n   const [currentStep, setCurrentStep] = useState(0);\r\n   const [progress, setProgress] = useState(0);\r\n   const [isLoading, setIsLoading] = useState(true);\r\n+  const [activeTab, setActiveTab] = useState(\"overview\");\r\n \r\n   useEffect(() => {\r\n-    const fetchLesson = async () => {\r\n+    const loadLessonState = () => {\r\n       try {\r\n-        const { data, error } = await supabase\r\n-          .from('lessons')\r\n-          .select(`\r\n-            *,\r\n-            questions (*),\r\n-            activities (*),\r\n-            exercise_prompts (*)\r\n-          `)\r\n-          .eq('id', lessonId)\r\n-          .single();\r\n+        const stateParam = searchParams.get('state');\r\n+        if (!stateParam) return;\r\n \r\n-        if (error) throw error;\r\n-        setLesson(data);\r\n+        const urlState = JSON.parse(decodeURIComponent(stateParam));\r\n+        const storedState = localStorage.getItem(`lesson_state_${urlState.lessonId}`);\r\n+        \r\n+        if (storedState) {\r\n+          const parsedState = JSON.parse(storedState);\r\n+          setLessonState(parsedState);\r\n+          localStorage.removeItem(`lesson_state_${urlState.lessonId}`); // Clean up\r\n+        }\r\n       } catch (error) {\r\n-        console.error('Error fetching lesson:', error);\r\n+        console.error('Error loading lesson state:', error);\r\n       } finally {\r\n         setIsLoading(false);\r\n       }\r\n     };\r\n \r\n-    fetchLesson();\r\n-  }, [lessonId]);\r\n+    loadLessonState();\r\n+  }, [params.lessonId, searchParams]);\r\n \r\n   const handleEndLesson = () => {\r\n-    navigate('/teacher/lessons');\r\n+    router.push('/teacher/lessons');\r\n   };\r\n \r\n+  const getQuestionIcon = (type: string) => {\r\n+    switch (type) {\r\n+      case 'speaking':\r\n+        return <Mic className=\"h-4 w-4\" />;\r\n+      case 'multiplechoice':\r\n+        return <PenTool className=\"h-4 w-4\" />;\r\n+      case 'fill_blanks':\r\n+        return <FileText className=\"h-4 w-4\" />;\r\n+      default:\r\n+        return <HelpCircle className=\"h-4 w-4\" />;\r\n+    }\r\n+  };\r\n+\r\n   if (isLoading) {\r\n     return (\r\n       <div className=\"flex items-center justify-center min-h-screen\">\r\n         <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\r\n       </div>\r\n     );\r\n   }\r\n \r\n-  if (!lesson) {\r\n+  if (!lessonState) {\r\n     return (\r\n       <div className=\"flex items-center justify-center min-h-screen\">\r\n         <Card className=\"p-6\">\r\n           <CardTitle className=\"text-xl mb-4\">Lesson not found</CardTitle>\r\n-          <Button onClick={() => navigate('/teacher/lessons')}>Go Back</Button>\r\n+          <Button onClick={() => router.push('/teacher/lessons')}>Go Back</Button>\r\n         </Card>\r\n       </div>\r\n     );\r\n   }\r\n \r\n+  const totalSteps = lessonState.lesson.questions.length;\r\n+  const currentQuestion = lessonState.lesson.questions[currentStep];\r\n+\r\n   return (\r\n     <div className=\"min-h-screen bg-gradient-to-b from-background to-accent/20\">\r\n       {/* Top Navigation Bar */}\r\n       <nav className=\"fixed top-0 left-0 right-0 z-50 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b\">\r\n@@ -105,14 +137,21 @@\n             >\r\n               <X className=\"h-5 w-5\" />\r\n             </Button>\r\n             <div>\r\n-              <h1 className=\"text-lg font-semibold\">{lesson.title}</h1>\r\n-              <p className=\"text-sm text-muted-foreground\">Lesson {currentStep + 1} of {lesson.questions?.length || 0}</p>\r\n+              <h1 className=\"text-lg font-semibold\">{lessonState.lesson.title}</h1>\r\n+              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\r\n+                <span>{lessonState.topic.title}</span>\r\n+                <span>•</span>\r\n+                <span>{lessonState.subtopic.title}</span>\r\n+              </div>\r\n             </div>\r\n           </div>\r\n-          <div className=\"flex items-center gap-2\">\r\n-            <Progress value={progress} className=\"w-40\" />\r\n+          <div className=\"flex items-center gap-4\">\r\n+            <Progress \r\n+              value={(currentStep / totalSteps) * 100} \r\n+              className=\"w-40\"\r\n+            />\r\n             <Button variant=\"outline\" onClick={handleEndLesson}>\r\n               End Lesson\r\n             </Button>\r\n           </div>\r\n@@ -134,23 +173,23 @@\n               <CardContent>\r\n                 <div className=\"space-y-4\">\r\n                   <div className=\"flex items-center gap-2 text-sm\">\r\n                     <Clock className=\"h-4 w-4 text-primary\" />\r\n-                    <span>{lesson.duration || 30} minutes</span>\r\n+                    <span>{lessonState.lesson.questions.length * 2} minutes</span>\r\n                   </div>\r\n                   <div className=\"flex items-center gap-2 text-sm\">\r\n                     <HelpCircle className=\"h-4 w-4 text-primary\" />\r\n-                    <span>{lesson.questions?.length || 0} Questions</span>\r\n+                    <span>{lessonState.lesson.questions.length} Questions</span>\r\n                   </div>\r\n                   <div className=\"flex items-center gap-2 text-sm\">\r\n                     <Layout className=\"h-4 w-4 text-primary\" />\r\n-                    <span>{lesson.activities?.length || 0} Activities</span>\r\n+                    <span>{lessonState.lesson.activities?.length || 0} Activities</span>\r\n                   </div>\r\n                   \r\n                   <div className=\"border-t pt-4 mt-4\">\r\n-                    <h3 className=\"font-medium mb-3\">Progress</h3>\r\n+                    <h3 className=\"font-medium mb-3\">Questions</h3>\r\n                     <div className=\"space-y-3\">\r\n-                      {lesson.questions?.map((question, index: number) => (\r\n+                      {lessonState.lesson.questions.map((question, index) => (\r\n                         <motion.div\r\n                           key={index}\r\n                           initial={{ opacity: 0, x: -20 }}\r\n                           animate={{ opacity: 1, x: 0 }}\r\n@@ -159,8 +198,10 @@\n                             \"flex items-center gap-2 p-2 rounded-md transition-all duration-200\",\r\n                             currentStep === index ? \"bg-accent shadow-sm\" : \"hover:bg-accent/50\",\r\n                             index < currentStep && \"text-primary\"\r\n                           )}\r\n+                          onClick={() => setCurrentStep(index)}\r\n+                          style={{ cursor: 'pointer' }}\r\n                         >\r\n                           {index < currentStep ? (\r\n                             <CheckCircle2 className=\"h-4 w-4\" />\r\n                           ) : (\r\n@@ -169,8 +210,9 @@\n                               currentStep === index && \"border-primary\"\r\n                             )} />\r\n                           )}\r\n                           <span className=\"text-sm\">Question {index + 1}</span>\r\n+                          {getQuestionIcon(question.type)}\r\n                         </motion.div>\r\n                       ))}\r\n                     </div>\r\n                   </div>\r\n@@ -180,52 +222,111 @@\n           </div>\r\n \r\n           {/* Main Content Area */}\r\n           <div className=\"space-y-8\">\r\n-            <AnimatePresence mode=\"wait\">\r\n-              <motion.div\r\n-                key={currentStep}\r\n-                initial={{ opacity: 0, y: 20 }}\r\n-                animate={{ opacity: 1, y: 0 }}\r\n-                exit={{ opacity: 0, y: -20 }}\r\n-                transition={{ duration: 0.3 }}\r\n-              >\r\n-                <Card>\r\n-                  <CardHeader>\r\n-                    <div className=\"flex items-center justify-between\">\r\n-                      <Badge variant=\"outline\" className=\"bg-primary/5\">\r\n-                        Question {currentStep + 1}\r\n-                      </Badge>\r\n-                      <div className=\"flex items-center gap-2\">\r\n-                        <Star className=\"h-4 w-4 text-yellow-500\" />\r\n-                        <span className=\"text-sm\">Points: 10</span>\r\n-                      </div>\r\n-                    </div>\r\n-                    <CardTitle className=\"text-2xl mt-4\">\r\n-                      {lesson.questions?.[currentStep]?.title || \"Question Title\"}\r\n-                    </CardTitle>\r\n-                  </CardHeader>\r\n-                  <CardContent className=\"space-y-6\">\r\n-                    {/* Question Content */}\r\n-                    <div className=\"prose prose-sm dark:prose-invert max-w-none\">\r\n-                      {lesson.questions?.[currentStep]?.content || \"Question content goes here...\"}\r\n-                    </div>\r\n+            <Tabs defaultValue=\"question\" className=\"w-full\">\r\n+              <TabsList className=\"mb-4\">\r\n+                <TabsTrigger value=\"question\">Question</TabsTrigger>\r\n+                <TabsTrigger value=\"teacherScript\">Teacher Script</TabsTrigger>\r\n+                <TabsTrigger value=\"activities\">Activities</TabsTrigger>\r\n+              </TabsList>\r\n \r\n-                    {/* Interactive Elements */}\r\n-                    <div className=\"space-y-4 pt-6\">\r\n-                      <Button \r\n-                        className=\"w-full justify-start text-left\"\r\n-                        variant=\"outline\"\r\n-                      >\r\n-                        <Play className=\"h-4 w-4 mr-2\" />\r\n-                        Start Activity\r\n-                      </Button>\r\n-                    </div>\r\n-                  </CardContent>\r\n-                </Card>\r\n-              </motion.div>\r\n-            </AnimatePresence>\r\n+              <AnimatePresence mode=\"wait\">\r\n+                <motion.div\r\n+                  key={currentStep}\r\n+                  initial={{ opacity: 0, y: 20 }}\r\n+                  animate={{ opacity: 1, y: 0 }}\r\n+                  exit={{ opacity: 0, y: -20 }}\r\n+                  transition={{ duration: 0.3 }}\r\n+                >\r\n+                  <TabsContent value=\"question\">\r\n+                    <Card>\r\n+                      <CardHeader>\r\n+                        <div className=\"flex items-center justify-between\">\r\n+                          <Badge variant=\"outline\" className=\"bg-primary/5\">\r\n+                            Question {currentStep + 1} of {totalSteps}\r\n+                          </Badge>\r\n+                          <div className=\"flex items-center gap-2\">\r\n+                            <Star className=\"h-4 w-4 text-yellow-500\" />\r\n+                            <span className=\"text-sm\">{currentQuestion.points} Points</span>\r\n+                          </div>\r\n+                        </div>\r\n+                        <CardTitle className=\"text-2xl mt-4\">\r\n+                          {currentQuestion.title || \"Question\"}\r\n+                        </CardTitle>\r\n+                      </CardHeader>\r\n+                      <CardContent className=\"space-y-6\">\r\n+                        <div className=\"prose prose-sm dark:prose-invert max-w-none\">\r\n+                          <div className=\"bg-accent/50 p-4 rounded-lg\">\r\n+                            <h3 className=\"text-lg font-semibold mb-2\">Prompt</h3>\r\n+                            <p>{currentQuestion.data.prompt || currentQuestion.content}</p>\r\n+                          </div>\r\n \r\n+                          {currentQuestion.type === 'multiplechoice' && currentQuestion.metadata?.options && (\r\n+                            <div className=\"mt-6 space-y-4\">\r\n+                              {currentQuestion.metadata.options.map((option, idx) => (\r\n+                                <Button\r\n+                                  key={idx}\r\n+                                  variant=\"outline\"\r\n+                                  className=\"w-full justify-start text-left\"\r\n+                                >\r\n+                                  {option}\r\n+                                </Button>\r\n+                              ))}\r\n+                            </div>\r\n+                          )}\r\n+\r\n+                          {currentQuestion.type === 'speaking' && (\r\n+                            <div className=\"mt-6\">\r\n+                              <Button className=\"w-full justify-center gap-2\">\r\n+                                <Mic className=\"h-4 w-4\" />\r\n+                                Start Recording\r\n+                              </Button>\r\n+                            </div>\r\n+                          )}\r\n+                        </div>\r\n+                      </CardContent>\r\n+                    </Card>\r\n+                  </TabsContent>\r\n+\r\n+                  <TabsContent value=\"teacherScript\">\r\n+                    <Card>\r\n+                      <CardContent className=\"p-6\">\r\n+                        <div className=\"prose prose-sm dark:prose-invert max-w-none\">\r\n+                          <h3 className=\"text-lg font-semibold mb-4\">Teacher Script</h3>\r\n+                          <div className=\"bg-accent/50 p-4 rounded-lg\">\r\n+                            {currentQuestion.data.teacherScript || \"No teacher script available.\"}\r\n+                          </div>\r\n+                        </div>\r\n+                      </CardContent>\r\n+                    </Card>\r\n+                  </TabsContent>\r\n+\r\n+                  <TabsContent value=\"activities\">\r\n+                    <Card>\r\n+                      <CardContent className=\"p-6\">\r\n+                        <div className=\"prose prose-sm dark:prose-invert max-w-none\">\r\n+                          <h3 className=\"text-lg font-semibold mb-4\">Activities</h3>\r\n+                          {lessonState.lesson.activities?.length > 0 ? (\r\n+                            <div className=\"space-y-4\">\r\n+                              {lessonState.lesson.activities.map((activity, idx) => (\r\n+                                <div key={idx} className=\"bg-accent/50 p-4 rounded-lg\">\r\n+                                  <h4 className=\"font-medium\">{activity.title}</h4>\r\n+                                  <p>{activity.description}</p>\r\n+                                </div>\r\n+                              ))}\r\n+                            </div>\r\n+                          ) : (\r\n+                            <p>No activities available for this lesson.</p>\r\n+                          )}\r\n+                        </div>\r\n+                      </CardContent>\r\n+                    </Card>\r\n+                  </TabsContent>\r\n+                </motion.div>\r\n+              </AnimatePresence>\r\n+            </Tabs>\r\n+\r\n             {/* Navigation Buttons */}\r\n             <div className=\"flex items-center justify-between pt-4\">\r\n               <Button\r\n                 variant=\"outline\"\r\n@@ -236,17 +337,17 @@\n                 Previous\r\n               </Button>\r\n               <Button\r\n                 onClick={() => {\r\n-                  if (currentStep < (lesson.questions?.length || 0) - 1) {\r\n+                  if (currentStep < totalSteps - 1) {\r\n                     setCurrentStep(prev => prev + 1);\r\n-                    setProgress(prev => prev + (100 / (lesson.questions?.length || 1)));\r\n+                    setProgress(prev => prev + (100 / totalSteps));\r\n                   } else {\r\n                     handleEndLesson();\r\n                   }\r\n                 }}\r\n               >\r\n-                {currentStep < (lesson.questions?.length || 0) - 1 ? (\r\n+                {currentStep < totalSteps - 1 ? (\r\n                   <>\r\n                     Next\r\n                     <ArrowLeft className=\"h-4 w-4 ml-2 rotate-180\" />\r\n                   </>\r\n"
                },
                {
                    "date": 1739190266106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,30 +60,80 @@\n   const [isLoading, setIsLoading] = useState(true);\r\n   const [activeTab, setActiveTab] = useState(\"overview\");\r\n \r\n   useEffect(() => {\r\n-    const loadLessonState = () => {\r\n+    const loadLessonState = async () => {\r\n       try {\r\n+        // First try to get the lesson ID from the URL params\r\n+        const lessonId = params?.lessonId;\r\n+        if (!lessonId) {\r\n+          console.error('No lesson ID found in URL');\r\n+          return;\r\n+        }\r\n+\r\n+        // Try to get state from URL parameters\r\n         const stateParam = searchParams.get('state');\r\n-        if (!stateParam) return;\r\n+        if (stateParam) {\r\n+          const urlState = JSON.parse(decodeURIComponent(stateParam));\r\n+          const storedState = localStorage.getItem(`lesson_state_${urlState.lessonId}`);\r\n+          \r\n+          if (storedState) {\r\n+            const parsedState = JSON.parse(storedState);\r\n+            setLessonState(parsedState);\r\n+            localStorage.removeItem(`lesson_state_${urlState.lessonId}`); // Clean up\r\n+            setIsLoading(false);\r\n+            return;\r\n+          }\r\n+        }\r\n \r\n-        const urlState = JSON.parse(decodeURIComponent(stateParam));\r\n-        const storedState = localStorage.getItem(`lesson_state_${urlState.lessonId}`);\r\n-        \r\n-        if (storedState) {\r\n-          const parsedState = JSON.parse(storedState);\r\n-          setLessonState(parsedState);\r\n-          localStorage.removeItem(`lesson_state_${urlState.lessonId}`); // Clean up\r\n-        }\r\n+        // If no state in localStorage, fetch from Supabase\r\n+        const { data: lessonData, error: lessonError } = await supabase\r\n+          .from('lessons')\r\n+          .select(`\r\n+            *,\r\n+            questions (\r\n+              *,\r\n+              metadata,\r\n+              data\r\n+            ),\r\n+            activities (*),\r\n+            exercise_prompts (*)\r\n+          `)\r\n+          .eq('id', lessonId)\r\n+          .single();\r\n+\r\n+        if (lessonError) throw lessonError;\r\n+\r\n+        // Get topic and subtopic information\r\n+        const { data: topicData } = await supabase\r\n+          .from('topics')\r\n+          .select('id, title')\r\n+          .eq('id', lessonData.topic_id)\r\n+          .single();\r\n+\r\n+        const { data: subtopicData } = await supabase\r\n+          .from('subtopics')\r\n+          .select('id, title')\r\n+          .eq('id', lessonData.subtopic_id)\r\n+          .single();\r\n+\r\n+        const fullState = {\r\n+          lesson: lessonData,\r\n+          topic: topicData,\r\n+          subtopic: subtopicData\r\n+        };\r\n+\r\n+        setLessonState(fullState);\r\n+\r\n       } catch (error) {\r\n-        console.error('Error loading lesson state:', error);\r\n+        console.error('Error loading lesson:', error);\r\n       } finally {\r\n         setIsLoading(false);\r\n       }\r\n     };\r\n \r\n     loadLessonState();\r\n-  }, [params.lessonId, searchParams]);\r\n+  }, [params?.lessonId, searchParams]);\r\n \r\n   const handleEndLesson = () => {\r\n     router.push('/teacher/lessons');\r\n   };\r\n"
                },
                {
                    "date": 1739190289786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,10 @@\n     id: string;\r\n     title: string;\r\n     content?: string;\r\n     description?: string;\r\n+    topic_id?: string;\r\n+    subtopic_id?: string;\r\n     questions: Array<{\r\n       id: string;\r\n       title: string;\r\n       content: string;\r\n@@ -62,9 +64,8 @@\n \r\n   useEffect(() => {\r\n     const loadLessonState = async () => {\r\n       try {\r\n-        // First try to get the lesson ID from the URL params\r\n         const lessonId = params?.lessonId;\r\n         if (!lessonId) {\r\n           console.error('No lesson ID found in URL');\r\n           return;\r\n@@ -78,9 +79,9 @@\n           \r\n           if (storedState) {\r\n             const parsedState = JSON.parse(storedState);\r\n             setLessonState(parsedState);\r\n-            localStorage.removeItem(`lesson_state_${urlState.lessonId}`); // Clean up\r\n+            localStorage.removeItem(`lesson_state_${urlState.lessonId}`);\r\n             setIsLoading(false);\r\n             return;\r\n           }\r\n         }\r\n@@ -103,24 +104,39 @@\n \r\n         if (lessonError) throw lessonError;\r\n \r\n         // Get topic and subtopic information\r\n-        const { data: topicData } = await supabase\r\n+        const { data: topicData, error: topicError } = await supabase\r\n           .from('topics')\r\n           .select('id, title')\r\n           .eq('id', lessonData.topic_id)\r\n           .single();\r\n \r\n-        const { data: subtopicData } = await supabase\r\n+        if (topicError || !topicData) throw new Error('Topic not found');\r\n+\r\n+        const { data: subtopicData, error: subtopicError } = await supabase\r\n           .from('subtopics')\r\n           .select('id, title')\r\n           .eq('id', lessonData.subtopic_id)\r\n           .single();\r\n \r\n-        const fullState = {\r\n-          lesson: lessonData,\r\n-          topic: topicData,\r\n-          subtopic: subtopicData\r\n+        if (subtopicError || !subtopicData) throw new Error('Subtopic not found');\r\n+\r\n+        const fullState: LessonState = {\r\n+          lesson: {\r\n+            ...lessonData,\r\n+            questions: lessonData.questions || [],\r\n+            activities: lessonData.activities || [],\r\n+            exercise_prompts: lessonData.exercise_prompts || []\r\n+          },\r\n+          topic: {\r\n+            id: topicData.id,\r\n+            title: topicData.title\r\n+          },\r\n+          subtopic: {\r\n+            id: subtopicData.id,\r\n+            title: subtopicData.title\r\n+          }\r\n         };\r\n \r\n         setLessonState(fullState);\r\n \r\n"
                },
                {
                    "date": 1739190941867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,8 +60,9 @@\n   const [currentStep, setCurrentStep] = useState(0);\r\n   const [progress, setProgress] = useState(0);\r\n   const [isLoading, setIsLoading] = useState(true);\r\n   const [activeTab, setActiveTab] = useState(\"overview\");\r\n+  const [hasAttemptedLoad, setHasAttemptedLoad] = useState(false);\r\n \r\n   useEffect(() => {\r\n     const loadLessonState = async () => {\r\n       try {\r\n@@ -81,8 +82,9 @@\n             const parsedState = JSON.parse(storedState);\r\n             setLessonState(parsedState);\r\n             localStorage.removeItem(`lesson_state_${urlState.lessonId}`);\r\n             setIsLoading(false);\r\n+            setHasAttemptedLoad(true);\r\n             return;\r\n           }\r\n         }\r\n \r\n@@ -138,21 +140,28 @@\n           }\r\n         };\r\n \r\n         setLessonState(fullState);\r\n+        setHasAttemptedLoad(true);\r\n \r\n       } catch (error) {\r\n         console.error('Error loading lesson:', error);\r\n+        setHasAttemptedLoad(true);\r\n       } finally {\r\n         setIsLoading(false);\r\n       }\r\n     };\r\n \r\n-    loadLessonState();\r\n-  }, [params?.lessonId, searchParams]);\r\n+    if (!hasAttemptedLoad) {\r\n+      loadLessonState();\r\n+    }\r\n+  }, [params?.lessonId, searchParams, hasAttemptedLoad]);\r\n \r\n   const handleEndLesson = () => {\r\n-    router.push('/teacher/lessons');\r\n+    const confirmed = window.confirm('Are you sure you want to end this lesson?');\r\n+    if (confirmed) {\r\n+      router.push('/teacher/lessons');\r\n+    }\r\n   };\r\n \r\n   const getQuestionIcon = (type: string) => {\r\n     switch (type) {\r\n"
                },
                {
                    "date": 1739191071326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n \"use client\";\r\n \r\n import { useEffect, useState } from \"react\";\r\n-import { useParams, useSearchParams } from \"next/navigation\";\r\n+import { useParams, useSearchParams, useRouter } from \"next/navigation\";\r\n import { motion, AnimatePresence } from \"framer-motion\";\r\n import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\n import { Button } from \"@/components/ui/button\";\r\n import { Progress } from \"@/components/ui/progress\";\r\n@@ -11,9 +11,8 @@\n import { ArrowLeft, BookOpen, CheckCircle2, Clock, Flag, HelpCircle, Layout, List, Play, Settings, Star, X, Mic, PenTool, FileText } from \"lucide-react\";\r\n import { cn } from \"@/lib/utils\";\r\n import { supabase } from \"@/lib/supabase\";\r\n import { Question, Activity, ExercisePrompt } from \"@/types\";\r\n-import { useRouter } from \"next/navigation\";\r\n \r\n interface LessonState {\r\n   lesson: {\r\n     id: string;\r\n@@ -68,28 +67,33 @@\n       try {\r\n         const lessonId = params?.lessonId;\r\n         if (!lessonId) {\r\n           console.error('No lesson ID found in URL');\r\n+          router.push('/teacher/lessons');\r\n           return;\r\n         }\r\n \r\n         // Try to get state from URL parameters\r\n         const stateParam = searchParams.get('state');\r\n         if (stateParam) {\r\n-          const urlState = JSON.parse(decodeURIComponent(stateParam));\r\n-          const storedState = localStorage.getItem(`lesson_state_${urlState.lessonId}`);\r\n-          \r\n-          if (storedState) {\r\n-            const parsedState = JSON.parse(storedState);\r\n-            setLessonState(parsedState);\r\n-            localStorage.removeItem(`lesson_state_${urlState.lessonId}`);\r\n-            setIsLoading(false);\r\n-            setHasAttemptedLoad(true);\r\n-            return;\r\n+          try {\r\n+            const urlState = JSON.parse(decodeURIComponent(stateParam));\r\n+            const storedState = localStorage.getItem(`lesson_state_${urlState.lessonId}`);\r\n+            \r\n+            if (storedState) {\r\n+              const parsedState = JSON.parse(storedState);\r\n+              setLessonState(parsedState);\r\n+              localStorage.removeItem(`lesson_state_${urlState.lessonId}`);\r\n+              setIsLoading(false);\r\n+              setHasAttemptedLoad(true);\r\n+              return;\r\n+            }\r\n+          } catch (error) {\r\n+            console.error('Error parsing state:', error);\r\n           }\r\n         }\r\n \r\n-        // If no state in localStorage, fetch from Supabase\r\n+        // If no state in localStorage or parsing failed, fetch from Supabase\r\n         const { data: lessonData, error: lessonError } = await supabase\r\n           .from('lessons')\r\n           .select(`\r\n             *,\r\n@@ -103,9 +107,13 @@\n           `)\r\n           .eq('id', lessonId)\r\n           .single();\r\n \r\n-        if (lessonError) throw lessonError;\r\n+        if (lessonError) {\r\n+          console.error('Error fetching lesson:', lessonError);\r\n+          router.push('/teacher/lessons');\r\n+          return;\r\n+        }\r\n \r\n         // Get topic and subtopic information\r\n         const { data: topicData, error: topicError } = await supabase\r\n           .from('topics')\r\n@@ -144,18 +152,18 @@\n         setHasAttemptedLoad(true);\r\n \r\n       } catch (error) {\r\n         console.error('Error loading lesson:', error);\r\n-        setHasAttemptedLoad(true);\r\n+        router.push('/teacher/lessons');\r\n       } finally {\r\n         setIsLoading(false);\r\n       }\r\n     };\r\n \r\n     if (!hasAttemptedLoad) {\r\n       loadLessonState();\r\n     }\r\n-  }, [params?.lessonId, searchParams, hasAttemptedLoad]);\r\n+  }, [params?.lessonId, searchParams, hasAttemptedLoad, router]);\r\n \r\n   const handleEndLesson = () => {\r\n     const confirmed = window.confirm('Are you sure you want to end this lesson?');\r\n     if (confirmed) {\r\n"
                },
                {
                    "date": 1739191186684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n \"use client\";\r\n \r\n import { useEffect, useState } from \"react\";\r\n-import { useParams, useSearchParams, useRouter } from \"next/navigation\";\r\n+import { useParams, useSearchParams, useNavigate, useLocation } from \"react-router-dom\";\r\n import { motion, AnimatePresence } from \"framer-motion\";\r\n import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\n import { Button } from \"@/components/ui/button\";\r\n import { Progress } from \"@/components/ui/progress\";\r\n@@ -52,10 +52,11 @@\n }\r\n \r\n export default function LessonPage() {\r\n   const params = useParams();\r\n-  const searchParams = useSearchParams();\r\n-  const router = useRouter();\r\n+  const location = useLocation();\r\n+  const navigate = useNavigate();\r\n+  const searchParams = new URLSearchParams(location.search);\r\n   const [lessonState, setLessonState] = useState<LessonState | null>(null);\r\n   const [currentStep, setCurrentStep] = useState(0);\r\n   const [progress, setProgress] = useState(0);\r\n   const [isLoading, setIsLoading] = useState(true);\r\n@@ -67,9 +68,9 @@\n       try {\r\n         const lessonId = params?.lessonId;\r\n         if (!lessonId) {\r\n           console.error('No lesson ID found in URL');\r\n-          router.push('/teacher/lessons');\r\n+          navigate('/teacher/lessons');\r\n           return;\r\n         }\r\n \r\n         // Try to get state from URL parameters\r\n@@ -109,9 +110,9 @@\n           .single();\r\n \r\n         if (lessonError) {\r\n           console.error('Error fetching lesson:', lessonError);\r\n-          router.push('/teacher/lessons');\r\n+          navigate('/teacher/lessons');\r\n           return;\r\n         }\r\n \r\n         // Get topic and subtopic information\r\n@@ -152,23 +153,23 @@\n         setHasAttemptedLoad(true);\r\n \r\n       } catch (error) {\r\n         console.error('Error loading lesson:', error);\r\n-        router.push('/teacher/lessons');\r\n+        navigate('/teacher/lessons');\r\n       } finally {\r\n         setIsLoading(false);\r\n       }\r\n     };\r\n \r\n     if (!hasAttemptedLoad) {\r\n       loadLessonState();\r\n     }\r\n-  }, [params?.lessonId, searchParams, hasAttemptedLoad, router]);\r\n+  }, [params?.lessonId, searchParams, hasAttemptedLoad, navigate]);\r\n \r\n   const handleEndLesson = () => {\r\n     const confirmed = window.confirm('Are you sure you want to end this lesson?');\r\n     if (confirmed) {\r\n-      router.push('/teacher/lessons');\r\n+      navigate('/teacher/lessons');\r\n     }\r\n   };\r\n \r\n   const getQuestionIcon = (type: string) => {\r\n@@ -196,9 +197,9 @@\n     return (\r\n       <div className=\"flex items-center justify-center min-h-screen\">\r\n         <Card className=\"p-6\">\r\n           <CardTitle className=\"text-xl mb-4\">Lesson not found</CardTitle>\r\n-          <Button onClick={() => router.push('/teacher/lessons')}>Go Back</Button>\r\n+          <Button onClick={() => navigate('/teacher/lessons')}>Go Back</Button>\r\n         </Card>\r\n       </div>\r\n     );\r\n   }\r\n"
                },
                {
                    "date": 1739191306894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n       try {\r\n         const lessonId = params?.lessonId;\r\n         if (!lessonId) {\r\n           console.error('No lesson ID found in URL');\r\n-          navigate('/teacher/lessons');\r\n+          navigate('/teacher/lessons', { replace: true });\r\n           return;\r\n         }\r\n \r\n         // Try to get state from URL parameters\r\n@@ -110,9 +110,9 @@\n           .single();\r\n \r\n         if (lessonError) {\r\n           console.error('Error fetching lesson:', lessonError);\r\n-          navigate('/teacher/lessons');\r\n+          navigate('/teacher/lessons', { replace: true });\r\n           return;\r\n         }\r\n \r\n         // Get topic and subtopic information\r\n@@ -121,17 +121,25 @@\n           .select('id, title')\r\n           .eq('id', lessonData.topic_id)\r\n           .single();\r\n \r\n-        if (topicError || !topicData) throw new Error('Topic not found');\r\n+        if (topicError || !topicData) {\r\n+          console.error('Topic not found');\r\n+          navigate('/teacher/lessons', { replace: true });\r\n+          return;\r\n+        }\r\n \r\n         const { data: subtopicData, error: subtopicError } = await supabase\r\n           .from('subtopics')\r\n           .select('id, title')\r\n           .eq('id', lessonData.subtopic_id)\r\n           .single();\r\n \r\n-        if (subtopicError || !subtopicData) throw new Error('Subtopic not found');\r\n+        if (subtopicError || !subtopicData) {\r\n+          console.error('Subtopic not found');\r\n+          navigate('/teacher/lessons', { replace: true });\r\n+          return;\r\n+        }\r\n \r\n         const fullState: LessonState = {\r\n           lesson: {\r\n             ...lessonData,\r\n@@ -153,23 +161,23 @@\n         setHasAttemptedLoad(true);\r\n \r\n       } catch (error) {\r\n         console.error('Error loading lesson:', error);\r\n-        navigate('/teacher/lessons');\r\n+        navigate('/teacher/lessons', { replace: true });\r\n       } finally {\r\n         setIsLoading(false);\r\n       }\r\n     };\r\n \r\n     if (!hasAttemptedLoad) {\r\n       loadLessonState();\r\n     }\r\n-  }, [params?.lessonId, searchParams, hasAttemptedLoad, navigate]);\r\n+  }, [params?.lessonId, searchParams, hasAttemptedLoad, navigate, location.search]);\r\n \r\n   const handleEndLesson = () => {\r\n     const confirmed = window.confirm('Are you sure you want to end this lesson?');\r\n     if (confirmed) {\r\n-      navigate('/teacher/lessons');\r\n+      navigate('/teacher/lessons', { replace: true });\r\n     }\r\n   };\r\n \r\n   const getQuestionIcon = (type: string) => {\r\n"
                },
                {
                    "date": 1739191501339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,8 @@\n export default function LessonPage() {\r\n   const params = useParams();\r\n   const location = useLocation();\r\n   const navigate = useNavigate();\r\n-  const searchParams = new URLSearchParams(location.search);\r\n   const [lessonState, setLessonState] = useState<LessonState | null>(null);\r\n   const [currentStep, setCurrentStep] = useState(0);\r\n   const [progress, setProgress] = useState(0);\r\n   const [isLoading, setIsLoading] = useState(true);\r\n@@ -68,23 +67,24 @@\n       try {\r\n         const lessonId = params?.lessonId;\r\n         if (!lessonId) {\r\n           console.error('No lesson ID found in URL');\r\n-          navigate('/teacher/lessons', { replace: true });\r\n+          navigate('/#/teacher/lessons', { replace: true });\r\n           return;\r\n         }\r\n \r\n         // Try to get state from URL parameters\r\n+        const searchParams = new URLSearchParams(location.search);\r\n         const stateParam = searchParams.get('state');\r\n+        \r\n         if (stateParam) {\r\n           try {\r\n             const urlState = JSON.parse(decodeURIComponent(stateParam));\r\n             const storedState = localStorage.getItem(`lesson_state_${urlState.lessonId}`);\r\n             \r\n             if (storedState) {\r\n               const parsedState = JSON.parse(storedState);\r\n               setLessonState(parsedState);\r\n-              localStorage.removeItem(`lesson_state_${urlState.lessonId}`);\r\n               setIsLoading(false);\r\n               setHasAttemptedLoad(true);\r\n               return;\r\n             }\r\n@@ -110,9 +110,9 @@\n           .single();\r\n \r\n         if (lessonError) {\r\n           console.error('Error fetching lesson:', lessonError);\r\n-          navigate('/teacher/lessons', { replace: true });\r\n+          navigate('/#/teacher/lessons', { replace: true });\r\n           return;\r\n         }\r\n \r\n         // Get topic and subtopic information\r\n@@ -123,9 +123,9 @@\n           .single();\r\n \r\n         if (topicError || !topicData) {\r\n           console.error('Topic not found');\r\n-          navigate('/teacher/lessons', { replace: true });\r\n+          navigate('/#/teacher/lessons', { replace: true });\r\n           return;\r\n         }\r\n \r\n         const { data: subtopicData, error: subtopicError } = await supabase\r\n@@ -135,9 +135,9 @@\n           .single();\r\n \r\n         if (subtopicError || !subtopicData) {\r\n           console.error('Subtopic not found');\r\n-          navigate('/teacher/lessons', { replace: true });\r\n+          navigate('/#/teacher/lessons', { replace: true });\r\n           return;\r\n         }\r\n \r\n         const fullState: LessonState = {\r\n@@ -161,23 +161,23 @@\n         setHasAttemptedLoad(true);\r\n \r\n       } catch (error) {\r\n         console.error('Error loading lesson:', error);\r\n-        navigate('/teacher/lessons', { replace: true });\r\n+        navigate('/#/teacher/lessons', { replace: true });\r\n       } finally {\r\n         setIsLoading(false);\r\n       }\r\n     };\r\n \r\n     if (!hasAttemptedLoad) {\r\n       loadLessonState();\r\n     }\r\n-  }, [params?.lessonId, searchParams, hasAttemptedLoad, navigate, location.search]);\r\n+  }, [params?.lessonId, location.search, hasAttemptedLoad, navigate]);\r\n \r\n   const handleEndLesson = () => {\r\n     const confirmed = window.confirm('Are you sure you want to end this lesson?');\r\n     if (confirmed) {\r\n-      navigate('/teacher/lessons', { replace: true });\r\n+      navigate('/#/teacher/lessons', { replace: true });\r\n     }\r\n   };\r\n \r\n   const getQuestionIcon = (type: string) => {\r\n"
                },
                {
                    "date": 1739191555682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -205,9 +205,9 @@\n     return (\r\n       <div className=\"flex items-center justify-center min-h-screen\">\r\n         <Card className=\"p-6\">\r\n           <CardTitle className=\"text-xl mb-4\">Lesson not found</CardTitle>\r\n-          <Button onClick={() => navigate('/teacher/lessons')}>Go Back</Button>\r\n+          <Button onClick={() => navigate('/#/teacher/lessons', { replace: true })}>Go Back</Button>\r\n         </Card>\r\n       </div>\r\n     );\r\n   }\r\n"
                },
                {
                    "date": 1739191703144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,15 +61,22 @@\n   const [isLoading, setIsLoading] = useState(true);\r\n   const [activeTab, setActiveTab] = useState(\"overview\");\r\n   const [hasAttemptedLoad, setHasAttemptedLoad] = useState(false);\r\n \r\n+  // Function to handle navigation back to lessons page\r\n+  const navigateToLessons = () => {\r\n+    const baseUrl = window.location.origin;\r\n+    const path = '/#/teacher/lessons';\r\n+    window.location.href = `${baseUrl}${path}`;\r\n+  };\r\n+\r\n   useEffect(() => {\r\n     const loadLessonState = async () => {\r\n       try {\r\n         const lessonId = params?.lessonId;\r\n         if (!lessonId) {\r\n           console.error('No lesson ID found in URL');\r\n-          navigate('/#/teacher/lessons', { replace: true });\r\n+          navigateToLessons();\r\n           return;\r\n         }\r\n \r\n         // Try to get state from URL parameters\r\n@@ -78,15 +85,17 @@\n         \r\n         if (stateParam) {\r\n           try {\r\n             const urlState = JSON.parse(decodeURIComponent(stateParam));\r\n-            const storedState = localStorage.getItem(`lesson_state_${urlState.lessonId}`);\r\n+            const storedStateKey = `lesson_state_${urlState.lessonId}`;\r\n+            const storedState = localStorage.getItem(storedStateKey);\r\n             \r\n             if (storedState) {\r\n               const parsedState = JSON.parse(storedState);\r\n               setLessonState(parsedState);\r\n               setIsLoading(false);\r\n               setHasAttemptedLoad(true);\r\n+              // Don't remove the state immediately to handle page refreshes\r\n               return;\r\n             }\r\n           } catch (error) {\r\n             console.error('Error parsing state:', error);\r\n@@ -110,9 +119,9 @@\n           .single();\r\n \r\n         if (lessonError) {\r\n           console.error('Error fetching lesson:', lessonError);\r\n-          navigate('/#/teacher/lessons', { replace: true });\r\n+          navigateToLessons();\r\n           return;\r\n         }\r\n \r\n         // Get topic and subtopic information\r\n@@ -123,9 +132,9 @@\n           .single();\r\n \r\n         if (topicError || !topicData) {\r\n           console.error('Topic not found');\r\n-          navigate('/#/teacher/lessons', { replace: true });\r\n+          navigateToLessons();\r\n           return;\r\n         }\r\n \r\n         const { data: subtopicData, error: subtopicError } = await supabase\r\n@@ -135,9 +144,9 @@\n           .single();\r\n \r\n         if (subtopicError || !subtopicData) {\r\n           console.error('Subtopic not found');\r\n-          navigate('/#/teacher/lessons', { replace: true });\r\n+          navigateToLessons();\r\n           return;\r\n         }\r\n \r\n         const fullState: LessonState = {\r\n@@ -156,28 +165,34 @@\n             title: subtopicData.title\r\n           }\r\n         };\r\n \r\n+        // Store the state in localStorage with the lesson ID\r\n+        localStorage.setItem(`lesson_state_${lessonId}`, JSON.stringify(fullState));\r\n         setLessonState(fullState);\r\n         setHasAttemptedLoad(true);\r\n \r\n       } catch (error) {\r\n         console.error('Error loading lesson:', error);\r\n-        navigate('/#/teacher/lessons', { replace: true });\r\n+        navigateToLessons();\r\n       } finally {\r\n         setIsLoading(false);\r\n       }\r\n     };\r\n \r\n     if (!hasAttemptedLoad) {\r\n       loadLessonState();\r\n     }\r\n-  }, [params?.lessonId, location.search, hasAttemptedLoad, navigate]);\r\n+  }, [params?.lessonId, location.search, hasAttemptedLoad]);\r\n \r\n   const handleEndLesson = () => {\r\n     const confirmed = window.confirm('Are you sure you want to end this lesson?');\r\n     if (confirmed) {\r\n-      navigate('/#/teacher/lessons', { replace: true });\r\n+      // Clean up localStorage before navigating\r\n+      if (params?.lessonId) {\r\n+        localStorage.removeItem(`lesson_state_${params.lessonId}`);\r\n+      }\r\n+      navigateToLessons();\r\n     }\r\n   };\r\n \r\n   const getQuestionIcon = (type: string) => {\r\n"
                },
                {
                    "date": 1739191856248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,11 +51,16 @@\n   };\r\n }\r\n \r\n export default function LessonPage() {\r\n+  console.log('LessonPage component initialized');\r\n   const params = useParams();\r\n   const location = useLocation();\r\n   const navigate = useNavigate();\r\n+  \r\n+  console.log('Route params:', params);\r\n+  console.log('Current location:', location);\r\n+\r\n   const [lessonState, setLessonState] = useState<LessonState | null>(null);\r\n   const [currentStep, setCurrentStep] = useState(0);\r\n   const [progress, setProgress] = useState(0);\r\n   const [isLoading, setIsLoading] = useState(true);\r\n@@ -63,46 +68,70 @@\n   const [hasAttemptedLoad, setHasAttemptedLoad] = useState(false);\r\n \r\n   // Function to handle navigation back to lessons page\r\n   const navigateToLessons = () => {\r\n+    console.log('Navigating back to lessons page');\r\n     const baseUrl = window.location.origin;\r\n     const path = '/#/teacher/lessons';\r\n-    window.location.href = `${baseUrl}${path}`;\r\n+    const fullUrl = `${baseUrl}${path}`;\r\n+    console.log('Redirecting to:', fullUrl);\r\n+    window.location.href = fullUrl;\r\n   };\r\n \r\n   useEffect(() => {\r\n+    console.log('Loading effect triggered', {\r\n+      lessonId: params?.lessonId,\r\n+      hasAttemptedLoad,\r\n+      locationSearch: location.search\r\n+    });\r\n+\r\n     const loadLessonState = async () => {\r\n+      console.log('Starting loadLessonState');\r\n       try {\r\n         const lessonId = params?.lessonId;\r\n         if (!lessonId) {\r\n           console.error('No lesson ID found in URL');\r\n           navigateToLessons();\r\n           return;\r\n         }\r\n+        console.log('Loading lesson with ID:', lessonId);\r\n \r\n         // Try to get state from URL parameters\r\n         const searchParams = new URLSearchParams(location.search);\r\n         const stateParam = searchParams.get('state');\r\n+        console.log('URL state parameter:', stateParam);\r\n         \r\n         if (stateParam) {\r\n           try {\r\n+            console.log('Attempting to parse state from URL');\r\n             const urlState = JSON.parse(decodeURIComponent(stateParam));\r\n+            console.log('Parsed URL state:', urlState);\r\n+            \r\n             const storedStateKey = `lesson_state_${urlState.lessonId}`;\r\n+            console.log('Looking for stored state with key:', storedStateKey);\r\n             const storedState = localStorage.getItem(storedStateKey);\r\n             \r\n             if (storedState) {\r\n+              console.log('Found stored state in localStorage');\r\n               const parsedState = JSON.parse(storedState);\r\n+              console.log('Successfully parsed stored state:', {\r\n+                lessonId: parsedState.lesson?.id,\r\n+                title: parsedState.lesson?.title\r\n+              });\r\n               setLessonState(parsedState);\r\n               setIsLoading(false);\r\n               setHasAttemptedLoad(true);\r\n-              // Don't remove the state immediately to handle page refreshes\r\n               return;\r\n+            } else {\r\n+              console.log('No stored state found in localStorage');\r\n             }\r\n           } catch (error) {\r\n             console.error('Error parsing state:', error);\r\n+            console.log('Falling back to Supabase fetch');\r\n           }\r\n         }\r\n \r\n+        console.log('Fetching lesson data from Supabase');\r\n         // If no state in localStorage or parsing failed, fetch from Supabase\r\n         const { data: lessonData, error: lessonError } = await supabase\r\n           .from('lessons')\r\n           .select(`\r\n@@ -122,33 +151,42 @@\n           console.error('Error fetching lesson:', lessonError);\r\n           navigateToLessons();\r\n           return;\r\n         }\r\n+        console.log('Successfully fetched lesson data:', {\r\n+          lessonId: lessonData.id,\r\n+          title: lessonData.title,\r\n+          questionsCount: lessonData.questions?.length\r\n+        });\r\n \r\n+        console.log('Fetching topic data');\r\n         // Get topic and subtopic information\r\n         const { data: topicData, error: topicError } = await supabase\r\n           .from('topics')\r\n           .select('id, title')\r\n           .eq('id', lessonData.topic_id)\r\n           .single();\r\n \r\n         if (topicError || !topicData) {\r\n-          console.error('Topic not found');\r\n+          console.error('Topic not found:', topicError);\r\n           navigateToLessons();\r\n           return;\r\n         }\r\n+        console.log('Successfully fetched topic data:', topicData);\r\n \r\n+        console.log('Fetching subtopic data');\r\n         const { data: subtopicData, error: subtopicError } = await supabase\r\n           .from('subtopics')\r\n           .select('id, title')\r\n           .eq('id', lessonData.subtopic_id)\r\n           .single();\r\n \r\n         if (subtopicError || !subtopicData) {\r\n-          console.error('Subtopic not found');\r\n+          console.error('Subtopic not found:', subtopicError);\r\n           navigateToLessons();\r\n           return;\r\n         }\r\n+        console.log('Successfully fetched subtopic data:', subtopicData);\r\n \r\n         const fullState: LessonState = {\r\n           lesson: {\r\n             ...lessonData,\r\n@@ -165,34 +203,56 @@\n             title: subtopicData.title\r\n           }\r\n         };\r\n \r\n+        console.log('Constructed full state:', {\r\n+          lessonId: fullState.lesson.id,\r\n+          title: fullState.lesson.title,\r\n+          questionsCount: fullState.lesson.questions.length,\r\n+          topicTitle: fullState.topic.title,\r\n+          subtopicTitle: fullState.subtopic.title\r\n+        });\r\n+\r\n         // Store the state in localStorage with the lesson ID\r\n-        localStorage.setItem(`lesson_state_${lessonId}`, JSON.stringify(fullState));\r\n+        const storageKey = `lesson_state_${lessonId}`;\r\n+        console.log('Storing state in localStorage with key:', storageKey);\r\n+        localStorage.setItem(storageKey, JSON.stringify(fullState));\r\n+        \r\n         setLessonState(fullState);\r\n         setHasAttemptedLoad(true);\r\n+        console.log('State successfully set and stored');\r\n \r\n       } catch (error) {\r\n-        console.error('Error loading lesson:', error);\r\n+        console.error('Error in loadLessonState:', error);\r\n         navigateToLessons();\r\n       } finally {\r\n+        console.log('Finished loading attempt, setting isLoading to false');\r\n         setIsLoading(false);\r\n       }\r\n     };\r\n \r\n     if (!hasAttemptedLoad) {\r\n+      console.log('Starting initial load');\r\n       loadLessonState();\r\n+    } else {\r\n+      console.log('Skip loading - already attempted');\r\n     }\r\n   }, [params?.lessonId, location.search, hasAttemptedLoad]);\r\n \r\n   const handleEndLesson = () => {\r\n+    console.log('End lesson requested');\r\n     const confirmed = window.confirm('Are you sure you want to end this lesson?');\r\n     if (confirmed) {\r\n+      console.log('End lesson confirmed');\r\n       // Clean up localStorage before navigating\r\n       if (params?.lessonId) {\r\n-        localStorage.removeItem(`lesson_state_${params.lessonId}`);\r\n+        const storageKey = `lesson_state_${params.lessonId}`;\r\n+        console.log('Removing stored state:', storageKey);\r\n+        localStorage.removeItem(storageKey);\r\n       }\r\n       navigateToLessons();\r\n+    } else {\r\n+      console.log('End lesson cancelled');\r\n     }\r\n   };\r\n \r\n   const getQuestionIcon = (type: string) => {\r\n@@ -208,26 +268,34 @@\n     }\r\n   };\r\n \r\n   if (isLoading) {\r\n+    console.log('Rendering loading state');\r\n     return (\r\n       <div className=\"flex items-center justify-center min-h-screen\">\r\n         <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\r\n       </div>\r\n     );\r\n   }\r\n \r\n   if (!lessonState) {\r\n+    console.log('Rendering error state - no lesson state found');\r\n     return (\r\n       <div className=\"flex items-center justify-center min-h-screen\">\r\n         <Card className=\"p-6\">\r\n           <CardTitle className=\"text-xl mb-4\">Lesson not found</CardTitle>\r\n-          <Button onClick={() => navigate('/#/teacher/lessons', { replace: true })}>Go Back</Button>\r\n+          <Button onClick={() => navigateToLessons()}>Go Back</Button>\r\n         </Card>\r\n       </div>\r\n     );\r\n   }\r\n \r\n+  console.log('Rendering lesson page with state:', {\r\n+    currentStep,\r\n+    totalSteps: lessonState.lesson.questions.length,\r\n+    progress\r\n+  });\r\n+\r\n   const totalSteps = lessonState.lesson.questions.length;\r\n   const currentQuestion = lessonState.lesson.questions[currentStep];\r\n \r\n   return (\r\n"
                },
                {
                    "date": 1739193315242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,17 @@\n import { cn } from \"@/lib/utils\";\r\n import { supabase } from \"@/lib/supabase\";\r\n import { Question, Activity, ExercisePrompt } from \"@/types\";\r\n \r\n+// Immediately log that the file is being loaded\r\n+console.log('Loading lesson page file');\r\n+\r\n+// Debug function to log state changes\r\n+const debugLog = (message: string, data?: any) => {\r\n+  const timestamp = new Date().toISOString();\r\n+  console.log(`[${timestamp}] ${message}`, data ? data : '');\r\n+};\r\n+\r\n interface LessonState {\r\n   lesson: {\r\n     id: string;\r\n     title: string;\r\n@@ -51,88 +60,99 @@\n   };\r\n }\r\n \r\n export default function LessonPage() {\r\n-  console.log('LessonPage component initialized');\r\n+  debugLog('LessonPage component initialized');\r\n+\r\n+  // Get URL parameters immediately\r\n+  const currentUrl = window.location.href;\r\n+  debugLog('Current URL:', currentUrl);\r\n+\r\n   const params = useParams();\r\n   const location = useLocation();\r\n   const navigate = useNavigate();\r\n-  \r\n-  console.log('Route params:', params);\r\n-  console.log('Current location:', location);\r\n \r\n+  debugLog('Initial route params:', params);\r\n+  debugLog('Initial location:', location);\r\n+\r\n   const [lessonState, setLessonState] = useState<LessonState | null>(null);\r\n   const [currentStep, setCurrentStep] = useState(0);\r\n   const [progress, setProgress] = useState(0);\r\n   const [isLoading, setIsLoading] = useState(true);\r\n   const [activeTab, setActiveTab] = useState(\"overview\");\r\n   const [hasAttemptedLoad, setHasAttemptedLoad] = useState(false);\r\n+  const [navigationAttempted, setNavigationAttempted] = useState(false);\r\n \r\n   // Function to handle navigation back to lessons page\r\n   const navigateToLessons = () => {\r\n-    console.log('Navigating back to lessons page');\r\n-    const baseUrl = window.location.origin;\r\n-    const path = '/#/teacher/lessons';\r\n-    const fullUrl = `${baseUrl}${path}`;\r\n-    console.log('Redirecting to:', fullUrl);\r\n-    window.location.href = fullUrl;\r\n+    debugLog('Attempting to navigate back to lessons page');\r\n+    if (navigationAttempted) {\r\n+      debugLog('Navigation already attempted, preventing duplicate');\r\n+      return;\r\n+    }\r\n+    setNavigationAttempted(true);\r\n+\r\n+    try {\r\n+      const baseUrl = window.location.origin;\r\n+      const path = '/#/teacher/lessons';\r\n+      const fullUrl = `${baseUrl}${path}`;\r\n+      debugLog('Navigation URL:', fullUrl);\r\n+\r\n+      // Add a small delay to ensure logs are visible\r\n+      setTimeout(() => {\r\n+        window.location.href = fullUrl;\r\n+      }, 100);\r\n+    } catch (error) {\r\n+      debugLog('Navigation error:', error);\r\n+    }\r\n   };\r\n \r\n   useEffect(() => {\r\n-    console.log('Loading effect triggered', {\r\n+    debugLog('Loading effect triggered', {\r\n       lessonId: params?.lessonId,\r\n       hasAttemptedLoad,\r\n-      locationSearch: location.search\r\n+      locationSearch: location.search,\r\n+      pathname: location.pathname\r\n     });\r\n \r\n     const loadLessonState = async () => {\r\n-      console.log('Starting loadLessonState');\r\n+      debugLog('Starting loadLessonState');\r\n       try {\r\n         const lessonId = params?.lessonId;\r\n         if (!lessonId) {\r\n-          console.error('No lesson ID found in URL');\r\n+          debugLog('No lesson ID found in URL');\r\n           navigateToLessons();\r\n           return;\r\n         }\r\n-        console.log('Loading lesson with ID:', lessonId);\r\n \r\n         // Try to get state from URL parameters\r\n         const searchParams = new URLSearchParams(location.search);\r\n         const stateParam = searchParams.get('state');\r\n-        console.log('URL state parameter:', stateParam);\r\n+        debugLog('URL state parameter:', stateParam);\r\n         \r\n         if (stateParam) {\r\n           try {\r\n-            console.log('Attempting to parse state from URL');\r\n             const urlState = JSON.parse(decodeURIComponent(stateParam));\r\n-            console.log('Parsed URL state:', urlState);\r\n+            debugLog('Parsed URL state:', urlState);\r\n             \r\n             const storedStateKey = `lesson_state_${urlState.lessonId}`;\r\n-            console.log('Looking for stored state with key:', storedStateKey);\r\n             const storedState = localStorage.getItem(storedStateKey);\r\n+            debugLog('Stored state found:', !!storedState);\r\n             \r\n             if (storedState) {\r\n-              console.log('Found stored state in localStorage');\r\n               const parsedState = JSON.parse(storedState);\r\n-              console.log('Successfully parsed stored state:', {\r\n-                lessonId: parsedState.lesson?.id,\r\n-                title: parsedState.lesson?.title\r\n-              });\r\n+              debugLog('Successfully loaded stored state');\r\n               setLessonState(parsedState);\r\n               setIsLoading(false);\r\n               setHasAttemptedLoad(true);\r\n               return;\r\n-            } else {\r\n-              console.log('No stored state found in localStorage');\r\n             }\r\n           } catch (error) {\r\n-            console.error('Error parsing state:', error);\r\n-            console.log('Falling back to Supabase fetch');\r\n+            debugLog('Error parsing state:', error);\r\n           }\r\n         }\r\n \r\n-        console.log('Fetching lesson data from Supabase');\r\n-        // If no state in localStorage or parsing failed, fetch from Supabase\r\n+        debugLog('Fetching from Supabase for lesson:', lessonId);\r\n         const { data: lessonData, error: lessonError } = await supabase\r\n           .from('lessons')\r\n           .select(`\r\n             *,\r\n@@ -147,46 +167,40 @@\n           .eq('id', lessonId)\r\n           .single();\r\n \r\n         if (lessonError) {\r\n-          console.error('Error fetching lesson:', lessonError);\r\n+          debugLog('Supabase lesson fetch error:', lessonError);\r\n           navigateToLessons();\r\n           return;\r\n         }\r\n-        console.log('Successfully fetched lesson data:', {\r\n-          lessonId: lessonData.id,\r\n-          title: lessonData.title,\r\n-          questionsCount: lessonData.questions?.length\r\n-        });\r\n \r\n-        console.log('Fetching topic data');\r\n+        debugLog('Lesson data fetched successfully');\r\n+\r\n         // Get topic and subtopic information\r\n         const { data: topicData, error: topicError } = await supabase\r\n           .from('topics')\r\n           .select('id, title')\r\n           .eq('id', lessonData.topic_id)\r\n           .single();\r\n \r\n         if (topicError || !topicData) {\r\n-          console.error('Topic not found:', topicError);\r\n+          debugLog('Topic not found:', topicError);\r\n           navigateToLessons();\r\n           return;\r\n         }\r\n-        console.log('Successfully fetched topic data:', topicData);\r\n \r\n-        console.log('Fetching subtopic data');\r\n+        // Get subtopic information\r\n         const { data: subtopicData, error: subtopicError } = await supabase\r\n           .from('subtopics')\r\n           .select('id, title')\r\n           .eq('id', lessonData.subtopic_id)\r\n           .single();\r\n \r\n         if (subtopicError || !subtopicData) {\r\n-          console.error('Subtopic not found:', subtopicError);\r\n+          debugLog('Subtopic not found:', subtopicError);\r\n           navigateToLessons();\r\n           return;\r\n         }\r\n-        console.log('Successfully fetched subtopic data:', subtopicData);\r\n \r\n         const fullState: LessonState = {\r\n           lesson: {\r\n             ...lessonData,\r\n@@ -203,56 +217,51 @@\n             title: subtopicData.title\r\n           }\r\n         };\r\n \r\n-        console.log('Constructed full state:', {\r\n-          lessonId: fullState.lesson.id,\r\n-          title: fullState.lesson.title,\r\n-          questionsCount: fullState.lesson.questions.length,\r\n-          topicTitle: fullState.topic.title,\r\n-          subtopicTitle: fullState.subtopic.title\r\n-        });\r\n-\r\n         // Store the state in localStorage with the lesson ID\r\n         const storageKey = `lesson_state_${lessonId}`;\r\n-        console.log('Storing state in localStorage with key:', storageKey);\r\n+        debugLog('Storing state in localStorage with key:', storageKey);\r\n         localStorage.setItem(storageKey, JSON.stringify(fullState));\r\n         \r\n         setLessonState(fullState);\r\n         setHasAttemptedLoad(true);\r\n-        console.log('State successfully set and stored');\r\n+        debugLog('State successfully set and stored');\r\n \r\n       } catch (error) {\r\n-        console.error('Error in loadLessonState:', error);\r\n+        debugLog('Critical error in loadLessonState:', error);\r\n         navigateToLessons();\r\n       } finally {\r\n-        console.log('Finished loading attempt, setting isLoading to false');\r\n+        debugLog('Load attempt finished');\r\n         setIsLoading(false);\r\n       }\r\n     };\r\n \r\n     if (!hasAttemptedLoad) {\r\n-      console.log('Starting initial load');\r\n+      debugLog('Initiating first load attempt');\r\n       loadLessonState();\r\n-    } else {\r\n-      console.log('Skip loading - already attempted');\r\n     }\r\n+\r\n+    // Cleanup function\r\n+    return () => {\r\n+      debugLog('Component cleanup triggered');\r\n+    };\r\n   }, [params?.lessonId, location.search, hasAttemptedLoad]);\r\n \r\n   const handleEndLesson = () => {\r\n-    console.log('End lesson requested');\r\n+    debugLog('End lesson requested');\r\n     const confirmed = window.confirm('Are you sure you want to end this lesson?');\r\n     if (confirmed) {\r\n-      console.log('End lesson confirmed');\r\n+      debugLog('End lesson confirmed');\r\n       // Clean up localStorage before navigating\r\n       if (params?.lessonId) {\r\n         const storageKey = `lesson_state_${params.lessonId}`;\r\n-        console.log('Removing stored state:', storageKey);\r\n+        debugLog('Removing stored state:', storageKey);\r\n         localStorage.removeItem(storageKey);\r\n       }\r\n       navigateToLessons();\r\n     } else {\r\n-      console.log('End lesson cancelled');\r\n+      debugLog('End lesson cancelled');\r\n     }\r\n   };\r\n \r\n   const getQuestionIcon = (type: string) => {\r\n@@ -268,18 +277,18 @@\n     }\r\n   };\r\n \r\n   if (isLoading) {\r\n-    console.log('Rendering loading state');\r\n+    debugLog('Rendering loading state');\r\n     return (\r\n       <div className=\"flex items-center justify-center min-h-screen\">\r\n         <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\r\n       </div>\r\n     );\r\n   }\r\n \r\n   if (!lessonState) {\r\n-    console.log('Rendering error state - no lesson state found');\r\n+    debugLog('Rendering error state - no lesson state found');\r\n     return (\r\n       <div className=\"flex items-center justify-center min-h-screen\">\r\n         <Card className=\"p-6\">\r\n           <CardTitle className=\"text-xl mb-4\">Lesson not found</CardTitle>\r\n@@ -288,9 +297,9 @@\n       </div>\r\n     );\r\n   }\r\n \r\n-  console.log('Rendering lesson page with state:', {\r\n+  debugLog('Rendering lesson page with state:', {\r\n     currentStep,\r\n     totalSteps: lessonState.lesson.questions.length,\r\n     progress\r\n   });\r\n"
                },
                {
                    "date": 1739193438859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,15 +12,37 @@\n import { cn } from \"@/lib/utils\";\r\n import { supabase } from \"@/lib/supabase\";\r\n import { Question, Activity, ExercisePrompt } from \"@/types\";\r\n \r\n-// Immediately log that the file is being loaded\r\n-console.log('Loading lesson page file');\r\n+// Global error handler\r\n+window.onerror = function(msg, url, lineNo, columnNo, error) {\r\n+  console.log('Global error: ', { msg, url, lineNo, columnNo, error });\r\n+  return false;\r\n+};\r\n \r\n-// Debug function to log state changes\r\n-const debugLog = (message: string, data?: any) => {\r\n+// Window load handler\r\n+window.onload = function() {\r\n+  console.log('Window loaded - Lesson page');\r\n+  console.log('Current URL:', window.location.href);\r\n+  console.log('Local Storage:', Object.keys(localStorage));\r\n+};\r\n+\r\n+// Debug function with forced console.log\r\n+const forceLog = (message: string, data?: any) => {\r\n   const timestamp = new Date().toISOString();\r\n-  console.log(`[${timestamp}] ${message}`, data ? data : '');\r\n+  const logMessage = `[${timestamp}] ${message}`;\r\n+  \r\n+  // Force immediate console output\r\n+  console.log(logMessage);\r\n+  if (data) {\r\n+    console.log('Data:', data);\r\n+  }\r\n+  \r\n+  // Also try alternative logging methods\r\n+  window.console.log(logMessage);\r\n+  if (window.console.debug) {\r\n+    window.console.debug(logMessage);\r\n+  }\r\n };\r\n \r\n interface LessonState {\r\n   lesson: {\r\n@@ -60,21 +82,19 @@\n   };\r\n }\r\n \r\n export default function LessonPage() {\r\n-  debugLog('LessonPage component initialized');\r\n-\r\n-  // Get URL parameters immediately\r\n-  const currentUrl = window.location.href;\r\n-  debugLog('Current URL:', currentUrl);\r\n-\r\n+  forceLog('LessonPage component mounted');\r\n+  \r\n+  // Force immediate console output for URL\r\n+  forceLog('Current URL at component mount:', window.location.href);\r\n+  \r\n   const params = useParams();\r\n   const location = useLocation();\r\n   const navigate = useNavigate();\r\n+  \r\n+  forceLog('Route information:', { params, pathname: location.pathname, search: location.search });\r\n \r\n-  debugLog('Initial route params:', params);\r\n-  debugLog('Initial location:', location);\r\n-\r\n   const [lessonState, setLessonState] = useState<LessonState | null>(null);\r\n   const [currentStep, setCurrentStep] = useState(0);\r\n   const [progress, setProgress] = useState(0);\r\n   const [isLoading, setIsLoading] = useState(true);\r\n@@ -83,76 +103,79 @@\n   const [navigationAttempted, setNavigationAttempted] = useState(false);\r\n \r\n   // Function to handle navigation back to lessons page\r\n   const navigateToLessons = () => {\r\n-    debugLog('Attempting to navigate back to lessons page');\r\n+    forceLog('Navigation to lessons page triggered');\r\n     if (navigationAttempted) {\r\n-      debugLog('Navigation already attempted, preventing duplicate');\r\n+      forceLog('Preventing duplicate navigation');\r\n       return;\r\n     }\r\n     setNavigationAttempted(true);\r\n \r\n     try {\r\n       const baseUrl = window.location.origin;\r\n       const path = '/#/teacher/lessons';\r\n       const fullUrl = `${baseUrl}${path}`;\r\n-      debugLog('Navigation URL:', fullUrl);\r\n+      forceLog('Navigating to:', fullUrl);\r\n \r\n       // Add a small delay to ensure logs are visible\r\n       setTimeout(() => {\r\n+        // Log state before navigation\r\n+        forceLog('State before navigation:', {\r\n+          localStorage: Object.keys(localStorage),\r\n+          currentUrl: window.location.href\r\n+        });\r\n         window.location.href = fullUrl;\r\n-      }, 100);\r\n+      }, 500);\r\n     } catch (error) {\r\n-      debugLog('Navigation error:', error);\r\n+      forceLog('Navigation error:', error);\r\n     }\r\n   };\r\n \r\n   useEffect(() => {\r\n-    debugLog('Loading effect triggered', {\r\n+    forceLog('Effect triggered', {\r\n       lessonId: params?.lessonId,\r\n       hasAttemptedLoad,\r\n-      locationSearch: location.search,\r\n-      pathname: location.pathname\r\n+      search: location.search\r\n     });\r\n \r\n     const loadLessonState = async () => {\r\n-      debugLog('Starting loadLessonState');\r\n+      forceLog('Starting to load lesson state');\r\n       try {\r\n         const lessonId = params?.lessonId;\r\n         if (!lessonId) {\r\n-          debugLog('No lesson ID found in URL');\r\n+          forceLog('No lesson ID in params');\r\n           navigateToLessons();\r\n           return;\r\n         }\r\n \r\n-        // Try to get state from URL parameters\r\n         const searchParams = new URLSearchParams(location.search);\r\n         const stateParam = searchParams.get('state');\r\n-        debugLog('URL state parameter:', stateParam);\r\n-        \r\n+        forceLog('State parameter:', stateParam);\r\n+\r\n         if (stateParam) {\r\n           try {\r\n             const urlState = JSON.parse(decodeURIComponent(stateParam));\r\n-            debugLog('Parsed URL state:', urlState);\r\n-            \r\n+            forceLog('Parsed URL state:', urlState);\r\n+\r\n             const storedStateKey = `lesson_state_${urlState.lessonId}`;\r\n             const storedState = localStorage.getItem(storedStateKey);\r\n-            debugLog('Stored state found:', !!storedState);\r\n-            \r\n+            forceLog('Found stored state:', !!storedState);\r\n+\r\n             if (storedState) {\r\n               const parsedState = JSON.parse(storedState);\r\n-              debugLog('Successfully loaded stored state');\r\n+              forceLog('Successfully parsed stored state');\r\n               setLessonState(parsedState);\r\n               setIsLoading(false);\r\n               setHasAttemptedLoad(true);\r\n               return;\r\n             }\r\n           } catch (error) {\r\n-            debugLog('Error parsing state:', error);\r\n+            forceLog('Error parsing state:', error);\r\n           }\r\n         }\r\n \r\n-        debugLog('Fetching from Supabase for lesson:', lessonId);\r\n+        forceLog('Fetching from Supabase for lesson:', lessonId);\r\n         const { data: lessonData, error: lessonError } = await supabase\r\n           .from('lessons')\r\n           .select(`\r\n             *,\r\n@@ -167,14 +190,14 @@\n           .eq('id', lessonId)\r\n           .single();\r\n \r\n         if (lessonError) {\r\n-          debugLog('Supabase lesson fetch error:', lessonError);\r\n+          forceLog('Supabase lesson fetch error:', lessonError);\r\n           navigateToLessons();\r\n           return;\r\n         }\r\n \r\n-        debugLog('Lesson data fetched successfully');\r\n+        forceLog('Lesson data fetched successfully');\r\n \r\n         // Get topic and subtopic information\r\n         const { data: topicData, error: topicError } = await supabase\r\n           .from('topics')\r\n@@ -182,9 +205,9 @@\n           .eq('id', lessonData.topic_id)\r\n           .single();\r\n \r\n         if (topicError || !topicData) {\r\n-          debugLog('Topic not found:', topicError);\r\n+          forceLog('Topic not found:', topicError);\r\n           navigateToLessons();\r\n           return;\r\n         }\r\n \r\n@@ -195,9 +218,9 @@\n           .eq('id', lessonData.subtopic_id)\r\n           .single();\r\n \r\n         if (subtopicError || !subtopicData) {\r\n-          debugLog('Subtopic not found:', subtopicError);\r\n+          forceLog('Subtopic not found:', subtopicError);\r\n           navigateToLessons();\r\n           return;\r\n         }\r\n \r\n@@ -219,49 +242,47 @@\n         };\r\n \r\n         // Store the state in localStorage with the lesson ID\r\n         const storageKey = `lesson_state_${lessonId}`;\r\n-        debugLog('Storing state in localStorage with key:', storageKey);\r\n+        forceLog('Storing state in localStorage with key:', storageKey);\r\n         localStorage.setItem(storageKey, JSON.stringify(fullState));\r\n         \r\n         setLessonState(fullState);\r\n         setHasAttemptedLoad(true);\r\n-        debugLog('State successfully set and stored');\r\n+        forceLog('State successfully set and stored');\r\n \r\n       } catch (error) {\r\n-        debugLog('Critical error in loadLessonState:', error);\r\n+        forceLog('Critical error:', error);\r\n         navigateToLessons();\r\n       } finally {\r\n-        debugLog('Load attempt finished');\r\n+        forceLog('Load attempt finished');\r\n         setIsLoading(false);\r\n       }\r\n     };\r\n \r\n     if (!hasAttemptedLoad) {\r\n-      debugLog('Initiating first load attempt');\r\n       loadLessonState();\r\n     }\r\n \r\n-    // Cleanup function\r\n     return () => {\r\n-      debugLog('Component cleanup triggered');\r\n+      forceLog('Component cleanup');\r\n     };\r\n   }, [params?.lessonId, location.search, hasAttemptedLoad]);\r\n \r\n   const handleEndLesson = () => {\r\n-    debugLog('End lesson requested');\r\n+    forceLog('End lesson requested');\r\n     const confirmed = window.confirm('Are you sure you want to end this lesson?');\r\n     if (confirmed) {\r\n-      debugLog('End lesson confirmed');\r\n+      forceLog('End lesson confirmed');\r\n       // Clean up localStorage before navigating\r\n       if (params?.lessonId) {\r\n         const storageKey = `lesson_state_${params.lessonId}`;\r\n-        debugLog('Removing stored state:', storageKey);\r\n+        forceLog('Removing stored state:', storageKey);\r\n         localStorage.removeItem(storageKey);\r\n       }\r\n       navigateToLessons();\r\n     } else {\r\n-      debugLog('End lesson cancelled');\r\n+      forceLog('End lesson cancelled');\r\n     }\r\n   };\r\n \r\n   const getQuestionIcon = (type: string) => {\r\n@@ -277,18 +298,18 @@\n     }\r\n   };\r\n \r\n   if (isLoading) {\r\n-    debugLog('Rendering loading state');\r\n+    forceLog('Rendering loading state');\r\n     return (\r\n       <div className=\"flex items-center justify-center min-h-screen\">\r\n         <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\r\n       </div>\r\n     );\r\n   }\r\n \r\n   if (!lessonState) {\r\n-    debugLog('Rendering error state - no lesson state found');\r\n+    forceLog('Rendering error state - no lesson state found');\r\n     return (\r\n       <div className=\"flex items-center justify-center min-h-screen\">\r\n         <Card className=\"p-6\">\r\n           <CardTitle className=\"text-xl mb-4\">Lesson not found</CardTitle>\r\n@@ -297,9 +318,9 @@\n       </div>\r\n     );\r\n   }\r\n \r\n-  debugLog('Rendering lesson page with state:', {\r\n+  forceLog('Rendering lesson page with state:', {\r\n     currentStep,\r\n     totalSteps: lessonState.lesson.questions.length,\r\n     progress\r\n   });\r\n"
                },
                {
                    "date": 1739193786044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,36 +99,40 @@\n   const [progress, setProgress] = useState(0);\r\n   const [isLoading, setIsLoading] = useState(true);\r\n   const [activeTab, setActiveTab] = useState(\"overview\");\r\n   const [hasAttemptedLoad, setHasAttemptedLoad] = useState(false);\r\n-  const [navigationAttempted, setNavigationAttempted] = useState(false);\r\n+  const [isFullscreen, setIsFullscreen] = useState(false);\r\n \r\n-  // Function to handle navigation back to lessons page\r\n-  const navigateToLessons = () => {\r\n-    forceLog('Navigation to lessons page triggered');\r\n-    if (navigationAttempted) {\r\n-      forceLog('Preventing duplicate navigation');\r\n-      return;\r\n+  // Function to handle entering fullscreen\r\n+  const enterFullscreen = async () => {\r\n+    try {\r\n+      const element = document.documentElement;\r\n+      if (element.requestFullscreen) {\r\n+        await element.requestFullscreen();\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Fullscreen error:', error);\r\n     }\r\n-    setNavigationAttempted(true);\r\n+  };\r\n \r\n+  // Function to handle exiting fullscreen\r\n+  const exitFullscreen = async () => {\r\n     try {\r\n-      const baseUrl = window.location.origin;\r\n-      const path = '/#/teacher/lessons';\r\n-      const fullUrl = `${baseUrl}${path}`;\r\n-      forceLog('Navigating to:', fullUrl);\r\n+      if (document.fullscreenElement && document.exitFullscreen) {\r\n+        await document.exitFullscreen();\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Exit fullscreen error:', error);\r\n+    }\r\n+  };\r\n \r\n-      // Add a small delay to ensure logs are visible\r\n-      setTimeout(() => {\r\n-        // Log state before navigation\r\n-        forceLog('State before navigation:', {\r\n-          localStorage: Object.keys(localStorage),\r\n-          currentUrl: window.location.href\r\n-        });\r\n-        window.location.href = fullUrl;\r\n-      }, 500);\r\n+  // Function to handle navigation back to lessons page\r\n+  const navigateToLessons = async () => {\r\n+    try {\r\n+      await exitFullscreen();\r\n+      navigate('/#/teacher/lessons');\r\n     } catch (error) {\r\n-      forceLog('Navigation error:', error);\r\n+      console.error('Navigation error:', error);\r\n     }\r\n   };\r\n \r\n   useEffect(() => {\r\n@@ -166,8 +170,9 @@\n               forceLog('Successfully parsed stored state');\r\n               setLessonState(parsedState);\r\n               setIsLoading(false);\r\n               setHasAttemptedLoad(true);\r\n+              await enterFullscreen();\r\n               return;\r\n             }\r\n           } catch (error) {\r\n             forceLog('Error parsing state:', error);\r\n@@ -247,8 +252,9 @@\n         localStorage.setItem(storageKey, JSON.stringify(fullState));\r\n         \r\n         setLessonState(fullState);\r\n         setHasAttemptedLoad(true);\r\n+        await enterFullscreen();\r\n         forceLog('State successfully set and stored');\r\n \r\n       } catch (error) {\r\n         forceLog('Critical error:', error);\r\n@@ -262,14 +268,22 @@\n     if (!hasAttemptedLoad) {\r\n       loadLessonState();\r\n     }\r\n \r\n+    // Add fullscreen change event listener\r\n+    const handleFullscreenChange = () => {\r\n+      setIsFullscreen(!!document.fullscreenElement);\r\n+    };\r\n+\r\n+    document.addEventListener('fullscreenchange', handleFullscreenChange);\r\n+\r\n     return () => {\r\n       forceLog('Component cleanup');\r\n+      document.removeEventListener('fullscreenchange', handleFullscreenChange);\r\n     };\r\n   }, [params?.lessonId, location.search, hasAttemptedLoad]);\r\n \r\n-  const handleEndLesson = () => {\r\n+  const handleEndLesson = async () => {\r\n     forceLog('End lesson requested');\r\n     const confirmed = window.confirm('Are you sure you want to end this lesson?');\r\n     if (confirmed) {\r\n       forceLog('End lesson confirmed');\r\n@@ -278,9 +292,9 @@\n         const storageKey = `lesson_state_${params.lessonId}`;\r\n         forceLog('Removing stored state:', storageKey);\r\n         localStorage.removeItem(storageKey);\r\n       }\r\n-      navigateToLessons();\r\n+      await navigateToLessons();\r\n     } else {\r\n       forceLog('End lesson cancelled');\r\n     }\r\n   };\r\n"
                },
                {
                    "date": 1739196147188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,16 +84,21 @@\n \r\n export default function LessonPage() {\r\n   forceLog('LessonPage component mounted');\r\n   \r\n-  // Force immediate console output for URL\r\n-  forceLog('Current URL at component mount:', window.location.href);\r\n-  \r\n   const params = useParams();\r\n   const location = useLocation();\r\n   const navigate = useNavigate();\r\n+  const searchParams = new URLSearchParams(location.search);\r\n   \r\n-  forceLog('Route information:', { params, pathname: location.pathname, search: location.search });\r\n+  forceLog('Route information:', { \r\n+    params, \r\n+    pathname: location.pathname, \r\n+    search: location.search,\r\n+    lessonId: searchParams.get('lessonId'),\r\n+    topicId: searchParams.get('topicId'),\r\n+    subtopicId: searchParams.get('subtopicId')\r\n+  });\r\n \r\n   const [lessonState, setLessonState] = useState<LessonState | null>(null);\r\n   const [currentStep, setCurrentStep] = useState(0);\r\n   const [progress, setProgress] = useState(0);\r\n@@ -134,140 +139,119 @@\n       console.error('Navigation error:', error);\r\n     }\r\n   };\r\n \r\n-  useEffect(() => {\r\n-    forceLog('Effect triggered', {\r\n-      lessonId: params?.lessonId,\r\n-      hasAttemptedLoad,\r\n-      search: location.search\r\n-    });\r\n+  // Function to fetch lesson data\r\n+  const fetchLessonData = async (lessonId: string, topicId: string, subtopicId: string) => {\r\n+    try {\r\n+      forceLog('Fetching lesson data:', { lessonId, topicId, subtopicId });\r\n \r\n-    const loadLessonState = async () => {\r\n-      forceLog('Starting to load lesson state');\r\n-      try {\r\n-        const lessonId = params?.lessonId;\r\n-        if (!lessonId) {\r\n-          forceLog('No lesson ID in params');\r\n-          navigateToLessons();\r\n-          return;\r\n-        }\r\n+      // Fetch lesson data\r\n+      const { data: lessonData, error: lessonError } = await supabase\r\n+        .from('lessons')\r\n+        .select(`\r\n+          *,\r\n+          questions (\r\n+            *,\r\n+            metadata,\r\n+            data\r\n+          ),\r\n+          activities (*),\r\n+          exercise_prompts (*)\r\n+        `)\r\n+        .eq('id', lessonId)\r\n+        .single();\r\n \r\n-        const searchParams = new URLSearchParams(location.search);\r\n-        const stateParam = searchParams.get('state');\r\n-        forceLog('State parameter:', stateParam);\r\n+      if (lessonError) {\r\n+        forceLog('Error fetching lesson:', lessonError);\r\n+        throw lessonError;\r\n+      }\r\n \r\n-        if (stateParam) {\r\n-          try {\r\n-            const urlState = JSON.parse(decodeURIComponent(stateParam));\r\n-            forceLog('Parsed URL state:', urlState);\r\n+      // Fetch topic data\r\n+      const { data: topicData, error: topicError } = await supabase\r\n+        .from('topics')\r\n+        .select('id, title')\r\n+        .eq('id', topicId)\r\n+        .single();\r\n \r\n-            const storedStateKey = `lesson_state_${urlState.lessonId}`;\r\n-            const storedState = localStorage.getItem(storedStateKey);\r\n-            forceLog('Found stored state:', !!storedState);\r\n+      if (topicError) {\r\n+        forceLog('Error fetching topic:', topicError);\r\n+        throw topicError;\r\n+      }\r\n \r\n-            if (storedState) {\r\n-              const parsedState = JSON.parse(storedState);\r\n-              forceLog('Successfully parsed stored state');\r\n-              setLessonState(parsedState);\r\n-              setIsLoading(false);\r\n-              setHasAttemptedLoad(true);\r\n-              await enterFullscreen();\r\n-              return;\r\n-            }\r\n-          } catch (error) {\r\n-            forceLog('Error parsing state:', error);\r\n-          }\r\n-        }\r\n+      // Fetch subtopic data\r\n+      const { data: subtopicData, error: subtopicError } = await supabase\r\n+        .from('subtopics')\r\n+        .select('id, title')\r\n+        .eq('id', subtopicId)\r\n+        .single();\r\n \r\n-        forceLog('Fetching from Supabase for lesson:', lessonId);\r\n-        const { data: lessonData, error: lessonError } = await supabase\r\n-          .from('lessons')\r\n-          .select(`\r\n-            *,\r\n-            questions (\r\n-              *,\r\n-              metadata,\r\n-              data\r\n-            ),\r\n-            activities (*),\r\n-            exercise_prompts (*)\r\n-          `)\r\n-          .eq('id', lessonId)\r\n-          .single();\r\n+      if (subtopicError) {\r\n+        forceLog('Error fetching subtopic:', subtopicError);\r\n+        throw subtopicError;\r\n+      }\r\n \r\n-        if (lessonError) {\r\n-          forceLog('Supabase lesson fetch error:', lessonError);\r\n-          navigateToLessons();\r\n-          return;\r\n+      const fullState: LessonState = {\r\n+        lesson: {\r\n+          ...lessonData,\r\n+          questions: lessonData.questions || [],\r\n+          activities: lessonData.activities || [],\r\n+          exercise_prompts: lessonData.exercise_prompts || []\r\n+        },\r\n+        topic: {\r\n+          id: topicData.id,\r\n+          title: topicData.title\r\n+        },\r\n+        subtopic: {\r\n+          id: subtopicData.id,\r\n+          title: subtopicData.title\r\n         }\r\n+      };\r\n \r\n-        forceLog('Lesson data fetched successfully');\r\n+      forceLog('Successfully fetched all data:', fullState);\r\n+      return fullState;\r\n \r\n-        // Get topic and subtopic information\r\n-        const { data: topicData, error: topicError } = await supabase\r\n-          .from('topics')\r\n-          .select('id, title')\r\n-          .eq('id', lessonData.topic_id)\r\n-          .single();\r\n+    } catch (error) {\r\n+      forceLog('Error in fetchLessonData:', error);\r\n+      throw error;\r\n+    }\r\n+  };\r\n \r\n-        if (topicError || !topicData) {\r\n-          forceLog('Topic not found:', topicError);\r\n-          navigateToLessons();\r\n-          return;\r\n+  // Effect to handle initialization and data fetching\r\n+  useEffect(() => {\r\n+    const initializeLessonPage = async () => {\r\n+      try {\r\n+        forceLog('Initializing lesson page');\r\n+        const lessonId = params?.lessonId;\r\n+        const topicId = searchParams.get('topicId');\r\n+        const subtopicId = searchParams.get('subtopicId');\r\n+\r\n+        if (!lessonId || !topicId || !subtopicId) {\r\n+          forceLog('Missing required parameters');\r\n+          throw new Error('Missing required parameters');\r\n         }\r\n \r\n-        // Get subtopic information\r\n-        const { data: subtopicData, error: subtopicError } = await supabase\r\n-          .from('subtopics')\r\n-          .select('id, title')\r\n-          .eq('id', lessonData.subtopic_id)\r\n-          .single();\r\n-\r\n-        if (subtopicError || !subtopicData) {\r\n-          forceLog('Subtopic not found:', subtopicError);\r\n-          navigateToLessons();\r\n-          return;\r\n+        // Request fullscreen mode\r\n+        try {\r\n+          await enterFullscreen();\r\n+        } catch (error) {\r\n+          forceLog('Fullscreen request failed:', error);\r\n         }\r\n \r\n-        const fullState: LessonState = {\r\n-          lesson: {\r\n-            ...lessonData,\r\n-            questions: lessonData.questions || [],\r\n-            activities: lessonData.activities || [],\r\n-            exercise_prompts: lessonData.exercise_prompts || []\r\n-          },\r\n-          topic: {\r\n-            id: topicData.id,\r\n-            title: topicData.title\r\n-          },\r\n-          subtopic: {\r\n-            id: subtopicData.id,\r\n-            title: subtopicData.title\r\n-          }\r\n-        };\r\n-\r\n-        // Store the state in localStorage with the lesson ID\r\n-        const storageKey = `lesson_state_${lessonId}`;\r\n-        forceLog('Storing state in localStorage with key:', storageKey);\r\n-        localStorage.setItem(storageKey, JSON.stringify(fullState));\r\n-        \r\n-        setLessonState(fullState);\r\n+        // Fetch the lesson data\r\n+        const lessonData = await fetchLessonData(lessonId, topicId, subtopicId);\r\n+        setLessonState(lessonData);\r\n         setHasAttemptedLoad(true);\r\n-        await enterFullscreen();\r\n-        forceLog('State successfully set and stored');\r\n+        setIsLoading(false);\r\n \r\n       } catch (error) {\r\n-        forceLog('Critical error:', error);\r\n-        navigateToLessons();\r\n-      } finally {\r\n-        forceLog('Load attempt finished');\r\n-        setIsLoading(false);\r\n+        forceLog('Error in initialization:', error);\r\n+        await navigateToLessons();\r\n       }\r\n     };\r\n \r\n     if (!hasAttemptedLoad) {\r\n-      loadLessonState();\r\n+      initializeLessonPage();\r\n     }\r\n \r\n     // Add fullscreen change event listener\r\n     const handleFullscreenChange = () => {\r\n@@ -276,9 +260,8 @@\n \r\n     document.addEventListener('fullscreenchange', handleFullscreenChange);\r\n \r\n     return () => {\r\n-      forceLog('Component cleanup');\r\n       document.removeEventListener('fullscreenchange', handleFullscreenChange);\r\n     };\r\n   }, [params?.lessonId, location.search, hasAttemptedLoad]);\r\n \r\n"
                },
                {
                    "date": 1739196765811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,11 @@\n import { cn } from \"@/lib/utils\";\r\n import { supabase } from \"@/lib/supabase\";\r\n import { Question, Activity, ExercisePrompt } from \"@/types\";\r\n \r\n+// Add this at the top level of the file\r\n+const DEBUG = true;\r\n+\r\n // Global error handler\r\n window.onerror = function(msg, url, lineNo, columnNo, error) {\r\n   console.log('Global error: ', { msg, url, lineNo, columnNo, error });\r\n   return false;\r\n@@ -25,23 +28,35 @@\n   console.log('Current URL:', window.location.href);\r\n   console.log('Local Storage:', Object.keys(localStorage));\r\n };\r\n \r\n-// Debug function with forced console.log\r\n+// Enhanced debug logging function\r\n const forceLog = (message: string, data?: any) => {\r\n+  if (!DEBUG) return;\r\n+  \r\n   const timestamp = new Date().toISOString();\r\n   const logMessage = `[${timestamp}] ${message}`;\r\n   \r\n-  // Force immediate console output\r\n+  // Use multiple logging methods to ensure visibility\r\n   console.log(logMessage);\r\n+  console.info(logMessage); // Info level might be preserved\r\n+  console.warn(logMessage); // Warnings are usually preserved\r\n+  \r\n   if (data) {\r\n-    console.log('Data:', data);\r\n+    console.log('Associated data:', data);\r\n+    // Also log as table if it's an object\r\n+    if (typeof data === 'object') {\r\n+      console.table(data);\r\n+    }\r\n   }\r\n   \r\n-  // Also try alternative logging methods\r\n-  window.console.log(logMessage);\r\n-  if (window.console.debug) {\r\n-    window.console.debug(logMessage);\r\n+  // Log to localStorage as backup\r\n+  try {\r\n+    const logs = JSON.parse(localStorage.getItem('lessonPageLogs') || '[]');\r\n+    logs.push({ timestamp, message, data });\r\n+    localStorage.setItem('lessonPageLogs', JSON.stringify(logs.slice(-50))); // Keep last 50 logs\r\n+  } catch (e) {\r\n+    console.warn('Failed to save log to localStorage:', e);\r\n   }\r\n };\r\n \r\n interface LessonState {\r\n@@ -93,9 +108,9 @@\n   forceLog('Route information:', { \r\n     params, \r\n     pathname: location.pathname, \r\n     search: location.search,\r\n-    lessonId: searchParams.get('lessonId'),\r\n+    lessonId: params?.lessonId,\r\n     topicId: searchParams.get('topicId'),\r\n     subtopicId: searchParams.get('subtopicId')\r\n   });\r\n \r\n@@ -105,8 +120,10 @@\n   const [isLoading, setIsLoading] = useState(true);\r\n   const [activeTab, setActiveTab] = useState(\"overview\");\r\n   const [hasAttemptedLoad, setHasAttemptedLoad] = useState(false);\r\n   const [isFullscreen, setIsFullscreen] = useState(false);\r\n+  const [error, setError] = useState<string | null>(null);\r\n+  const [navigationAttempted, setNavigationAttempted] = useState(false);\r\n \r\n   // Function to handle entering fullscreen\r\n   const enterFullscreen = async () => {\r\n     try {\r\n@@ -132,12 +149,25 @@\n \r\n   // Function to handle navigation back to lessons page\r\n   const navigateToLessons = async () => {\r\n     try {\r\n+      if (navigationAttempted) {\r\n+        forceLog('Navigation already attempted, preventing duplicate');\r\n+        return;\r\n+      }\r\n+      \r\n+      setNavigationAttempted(true);\r\n+      forceLog('Attempting navigation to lessons page');\r\n+      \r\n       await exitFullscreen();\r\n+      \r\n+      // Small delay to ensure logs are visible\r\n+      await new Promise(resolve => setTimeout(resolve, 500));\r\n+      \r\n       navigate('/#/teacher/lessons');\r\n     } catch (error) {\r\n-      console.error('Navigation error:', error);\r\n+      forceLog('Navigation error:', error);\r\n+      setError('Failed to navigate back to lessons page');\r\n     }\r\n   };\r\n \r\n   // Function to fetch lesson data\r\n@@ -217,36 +247,53 @@\n   };\r\n \r\n   // Effect to handle initialization and data fetching\r\n   useEffect(() => {\r\n+    let isMounted = true;\r\n+    \r\n     const initializeLessonPage = async () => {\r\n       try {\r\n         forceLog('Initializing lesson page');\r\n         const lessonId = params?.lessonId;\r\n         const topicId = searchParams.get('topicId');\r\n         const subtopicId = searchParams.get('subtopicId');\r\n \r\n+        forceLog('Checking parameters:', { lessonId, topicId, subtopicId });\r\n+\r\n         if (!lessonId || !topicId || !subtopicId) {\r\n-          forceLog('Missing required parameters');\r\n-          throw new Error('Missing required parameters');\r\n+          throw new Error(`Missing required parameters: ${!lessonId ? 'lessonId' : !topicId ? 'topicId' : 'subtopicId'}`);\r\n         }\r\n \r\n         // Request fullscreen mode\r\n         try {\r\n           await enterFullscreen();\r\n+          forceLog('Entered fullscreen mode successfully');\r\n         } catch (error) {\r\n-          forceLog('Fullscreen request failed:', error);\r\n+          forceLog('Fullscreen request failed (non-critical):', error);\r\n         }\r\n \r\n         // Fetch the lesson data\r\n+        forceLog('Starting data fetch');\r\n         const lessonData = await fetchLessonData(lessonId, topicId, subtopicId);\r\n+        \r\n+        if (!isMounted) {\r\n+          forceLog('Component unmounted during fetch, aborting state updates');\r\n+          return;\r\n+        }\r\n+\r\n+        forceLog('Setting lesson state:', lessonData);\r\n         setLessonState(lessonData);\r\n         setHasAttemptedLoad(true);\r\n         setIsLoading(false);\r\n \r\n       } catch (error) {\r\n         forceLog('Error in initialization:', error);\r\n-        await navigateToLessons();\r\n+        if (isMounted) {\r\n+          setError(error instanceof Error ? error.message : 'Failed to load lesson');\r\n+          setIsLoading(false);\r\n+          // Don't navigate immediately on error\r\n+          setHasAttemptedLoad(true);\r\n+        }\r\n       }\r\n     };\r\n \r\n     if (!hasAttemptedLoad) {\r\n@@ -260,12 +307,26 @@\n \r\n     document.addEventListener('fullscreenchange', handleFullscreenChange);\r\n \r\n     return () => {\r\n+      isMounted = false;\r\n+      forceLog('Component cleanup - unmounting');\r\n       document.removeEventListener('fullscreenchange', handleFullscreenChange);\r\n     };\r\n   }, [params?.lessonId, location.search, hasAttemptedLoad]);\r\n \r\n+  // Only navigate away if there's an error and we're not loading\r\n+  useEffect(() => {\r\n+    if (error && !isLoading && hasAttemptedLoad && !navigationAttempted) {\r\n+      forceLog('Error detected, preparing to navigate:', error);\r\n+      const timer = setTimeout(() => {\r\n+        navigateToLessons();\r\n+      }, 1000); // Give time for logs to be visible\r\n+      \r\n+      return () => clearTimeout(timer);\r\n+    }\r\n+  }, [error, isLoading, hasAttemptedLoad, navigationAttempted]);\r\n+\r\n   const handleEndLesson = async () => {\r\n     forceLog('End lesson requested');\r\n     const confirmed = window.confirm('Are you sure you want to end this lesson?');\r\n     if (confirmed) {\r\n"
                },
                {
                    "date": 1739196925835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,17 +102,19 @@\n   \r\n   const params = useParams();\r\n   const location = useLocation();\r\n   const navigate = useNavigate();\r\n-  const searchParams = new URLSearchParams(location.search);\r\n+  const searchParams = new URLSearchParams(window.location.search);\r\n   \r\n   forceLog('Route information:', { \r\n     params, \r\n     pathname: location.pathname, \r\n     search: location.search,\r\n+    fullUrl: window.location.href,\r\n     lessonId: params?.lessonId,\r\n     topicId: searchParams.get('topicId'),\r\n-    subtopicId: searchParams.get('subtopicId')\r\n+    subtopicId: searchParams.get('subtopicId'),\r\n+    rawSearch: window.location.search\r\n   });\r\n \r\n   const [lessonState, setLessonState] = useState<LessonState | null>(null);\r\n   const [currentStep, setCurrentStep] = useState(0);\r\n@@ -160,11 +162,12 @@\n       \r\n       await exitFullscreen();\r\n       \r\n       // Small delay to ensure logs are visible\r\n-      await new Promise(resolve => setTimeout(resolve, 500));\r\n+      await new Promise(resolve => setTimeout(resolve, 1000));\r\n       \r\n-      navigate('/#/teacher/lessons');\r\n+      // Use window.location for hard navigation\r\n+      window.location.href = '/teacher/lessons';\r\n     } catch (error) {\r\n       forceLog('Navigation error:', error);\r\n       setError('Failed to navigate back to lessons page');\r\n     }\r\n@@ -248,17 +251,23 @@\n \r\n   // Effect to handle initialization and data fetching\r\n   useEffect(() => {\r\n     let isMounted = true;\r\n+    let initAttempted = false;\r\n     \r\n     const initializeLessonPage = async () => {\r\n+      if (initAttempted) return;\r\n+      initAttempted = true;\r\n+\r\n       try {\r\n         forceLog('Initializing lesson page');\r\n         const lessonId = params?.lessonId;\r\n+        // Use window.location.search to ensure we get the full search string\r\n+        const searchParams = new URLSearchParams(window.location.search);\r\n         const topicId = searchParams.get('topicId');\r\n         const subtopicId = searchParams.get('subtopicId');\r\n \r\n-        forceLog('Checking parameters:', { lessonId, topicId, subtopicId });\r\n+        forceLog('Checking parameters:', { lessonId, topicId, subtopicId, fullUrl: window.location.href });\r\n \r\n         if (!lessonId || !topicId || !subtopicId) {\r\n           throw new Error(`Missing required parameters: ${!lessonId ? 'lessonId' : !topicId ? 'topicId' : 'subtopicId'}`);\r\n         }\r\n@@ -270,8 +279,11 @@\n         } catch (error) {\r\n           forceLog('Fullscreen request failed (non-critical):', error);\r\n         }\r\n \r\n+        // Add a delay before fetching data\r\n+        await new Promise(resolve => setTimeout(resolve, 500));\r\n+\r\n         // Fetch the lesson data\r\n         forceLog('Starting data fetch');\r\n         const lessonData = await fetchLessonData(lessonId, topicId, subtopicId);\r\n         \r\n@@ -289,42 +301,44 @@\n         forceLog('Error in initialization:', error);\r\n         if (isMounted) {\r\n           setError(error instanceof Error ? error.message : 'Failed to load lesson');\r\n           setIsLoading(false);\r\n-          // Don't navigate immediately on error\r\n           setHasAttemptedLoad(true);\r\n         }\r\n       }\r\n     };\r\n \r\n-    if (!hasAttemptedLoad) {\r\n-      initializeLessonPage();\r\n-    }\r\n+    // Add a small delay before initialization\r\n+    const timer = setTimeout(() => {\r\n+      if (!hasAttemptedLoad) {\r\n+        initializeLessonPage();\r\n+      }\r\n+    }, 500);\r\n \r\n-    // Add fullscreen change event listener\r\n-    const handleFullscreenChange = () => {\r\n-      setIsFullscreen(!!document.fullscreenElement);\r\n-    };\r\n-\r\n-    document.addEventListener('fullscreenchange', handleFullscreenChange);\r\n-\r\n     return () => {\r\n       isMounted = false;\r\n+      clearTimeout(timer);\r\n       forceLog('Component cleanup - unmounting');\r\n-      document.removeEventListener('fullscreenchange', handleFullscreenChange);\r\n     };\r\n-  }, [params?.lessonId, location.search, hasAttemptedLoad]);\r\n+  }, [params?.lessonId]);\r\n \r\n   // Only navigate away if there's an error and we're not loading\r\n   useEffect(() => {\r\n+    let navigationTimer: NodeJS.Timeout;\r\n+    \r\n     if (error && !isLoading && hasAttemptedLoad && !navigationAttempted) {\r\n       forceLog('Error detected, preparing to navigate:', error);\r\n-      const timer = setTimeout(() => {\r\n+      navigationTimer = setTimeout(() => {\r\n+        forceLog('Executing delayed navigation due to error');\r\n         navigateToLessons();\r\n-      }, 1000); // Give time for logs to be visible\r\n-      \r\n-      return () => clearTimeout(timer);\r\n+      }, 2000); // Give more time for logs to be visible\r\n     }\r\n+    \r\n+    return () => {\r\n+      if (navigationTimer) {\r\n+        clearTimeout(navigationTimer);\r\n+      }\r\n+    };\r\n   }, [error, isLoading, hasAttemptedLoad, navigationAttempted]);\r\n \r\n   const handleEndLesson = async () => {\r\n     forceLog('End lesson requested');\r\n"
                },
                {
                    "date": 1739208175550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,10 +164,15 @@\n       \r\n       // Small delay to ensure logs are visible\r\n       await new Promise(resolve => setTimeout(resolve, 1000));\r\n       \r\n-      // Use window.location for hard navigation\r\n-      window.location.href = '/teacher/lessons';\r\n+      // Close the window instead of navigating\r\n+      window.close();\r\n+      \r\n+      // Fallback if window.close() doesn't work\r\n+      if (!window.closed) {\r\n+        window.location.href = '/app/teacher/lessons';\r\n+      }\r\n     } catch (error) {\r\n       forceLog('Navigation error:', error);\r\n       setError('Failed to navigate back to lessons page');\r\n     }\r\n@@ -260,10 +265,8 @@\n \r\n       try {\r\n         forceLog('Initializing lesson page');\r\n         const lessonId = params?.lessonId;\r\n-        // Use window.location.search to ensure we get the full search string\r\n-        const searchParams = new URLSearchParams(window.location.search);\r\n         const topicId = searchParams.get('topicId');\r\n         const subtopicId = searchParams.get('subtopicId');\r\n \r\n         forceLog('Checking parameters:', { lessonId, topicId, subtopicId, fullUrl: window.location.href });\r\n@@ -271,8 +274,27 @@\n         if (!lessonId || !topicId || !subtopicId) {\r\n           throw new Error(`Missing required parameters: ${!lessonId ? 'lessonId' : !topicId ? 'topicId' : 'subtopicId'}`);\r\n         }\r\n \r\n+        // Try to get state from localStorage first\r\n+        const stateKey = `lesson_state_${lessonId}`;\r\n+        const savedState = localStorage.getItem(stateKey);\r\n+        \r\n+        if (savedState) {\r\n+          try {\r\n+            const parsedState = JSON.parse(savedState);\r\n+            forceLog('Found saved state:', parsedState);\r\n+            if (parsedState.lesson) {\r\n+              setLessonState(parsedState);\r\n+              setHasAttemptedLoad(true);\r\n+              setIsLoading(false);\r\n+              return;\r\n+            }\r\n+          } catch (e) {\r\n+            forceLog('Error parsing saved state:', e);\r\n+          }\r\n+        }\r\n+\r\n         // Request fullscreen mode\r\n         try {\r\n           await enterFullscreen();\r\n           forceLog('Entered fullscreen mode successfully');\r\n@@ -306,18 +328,15 @@\n         }\r\n       }\r\n     };\r\n \r\n-    // Add a small delay before initialization\r\n-    const timer = setTimeout(() => {\r\n-      if (!hasAttemptedLoad) {\r\n-        initializeLessonPage();\r\n-      }\r\n-    }, 500);\r\n+    // Start initialization immediately\r\n+    if (!hasAttemptedLoad) {\r\n+      initializeLessonPage();\r\n+    }\r\n \r\n     return () => {\r\n       isMounted = false;\r\n-      clearTimeout(timer);\r\n       forceLog('Component cleanup - unmounting');\r\n     };\r\n   }, [params?.lessonId]);\r\n \r\n"
                },
                {
                    "date": 1739208583072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,10 +12,12 @@\n import { cn } from \"@/lib/utils\";\r\n import { supabase } from \"@/lib/supabase\";\r\n import { Question, Activity, ExercisePrompt } from \"@/types\";\r\n \r\n-// Add this at the top level of the file\r\n+// Enhanced debug configuration\r\n const DEBUG = true;\r\n+const LOG_TO_STORAGE = true;\r\n+const STORAGE_KEY = 'lessonPageDebugLogs';\r\n \r\n // Global error handler\r\n window.onerror = function(msg, url, lineNo, columnNo, error) {\r\n   console.log('Global error: ', { msg, url, lineNo, columnNo, error });\r\n@@ -28,35 +30,47 @@\n   console.log('Current URL:', window.location.href);\r\n   console.log('Local Storage:', Object.keys(localStorage));\r\n };\r\n \r\n-// Enhanced debug logging function\r\n-const forceLog = (message: string, data?: any) => {\r\n+// Enhanced logging utility\r\n+const forceLog = (message: string, data?: any, type: 'info' | 'warn' | 'error' = 'info') => {\r\n   if (!DEBUG) return;\r\n   \r\n   const timestamp = new Date().toISOString();\r\n-  const logMessage = `[${timestamp}] ${message}`;\r\n+  const logEntry = {\r\n+    timestamp,\r\n+    message,\r\n+    data,\r\n+    type,\r\n+    url: window.location.href,\r\n+    pathname: window.location.pathname,\r\n+    search: window.location.search\r\n+  };\r\n   \r\n-  // Use multiple logging methods to ensure visibility\r\n-  console.log(logMessage);\r\n-  console.info(logMessage); // Info level might be preserved\r\n-  console.warn(logMessage); // Warnings are usually preserved\r\n+  // Console logging with visual distinction\r\n+  const styles = {\r\n+    info: 'color: #4CAF50; font-weight: bold;',\r\n+    warn: 'color: #FFC107; font-weight: bold;',\r\n+    error: 'color: #F44336; font-weight: bold;'\r\n+  };\r\n   \r\n+  console.log(`%c[${timestamp}] ${message}`, styles[type]);\r\n   if (data) {\r\n-    console.log('Associated data:', data);\r\n-    // Also log as table if it's an object\r\n+    console.log('Data:', data);\r\n     if (typeof data === 'object') {\r\n       console.table(data);\r\n     }\r\n   }\r\n   \r\n-  // Log to localStorage as backup\r\n-  try {\r\n-    const logs = JSON.parse(localStorage.getItem('lessonPageLogs') || '[]');\r\n-    logs.push({ timestamp, message, data });\r\n-    localStorage.setItem('lessonPageLogs', JSON.stringify(logs.slice(-50))); // Keep last 50 logs\r\n-  } catch (e) {\r\n-    console.warn('Failed to save log to localStorage:', e);\r\n+  // Backup to localStorage\r\n+  if (LOG_TO_STORAGE) {\r\n+    try {\r\n+      const logs = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');\r\n+      logs.push(logEntry);\r\n+      localStorage.setItem(STORAGE_KEY, JSON.stringify(logs.slice(-100))); // Keep last 100 logs\r\n+    } catch (e) {\r\n+      console.warn('Failed to save log to localStorage:', e);\r\n+    }\r\n   }\r\n };\r\n \r\n interface LessonState {\r\n@@ -96,25 +110,50 @@\n     title: string;\r\n   };\r\n }\r\n \r\n+// Add URL validation helper\r\n+const validateUrl = (params: any, searchParams: URLSearchParams) => {\r\n+  const validation = {\r\n+    lessonId: params?.lessonId,\r\n+    topicId: searchParams.get('topicId'),\r\n+    subtopicId: searchParams.get('subtopicId'),\r\n+    isValid: false,\r\n+    missingParams: [] as string[]\r\n+  };\r\n+\r\n+  if (!validation.lessonId) validation.missingParams.push('lessonId');\r\n+  if (!validation.topicId) validation.missingParams.push('topicId');\r\n+  if (!validation.subtopicId) validation.missingParams.push('subtopicId');\r\n+\r\n+  validation.isValid = validation.missingParams.length === 0;\r\n+  return validation;\r\n+};\r\n+\r\n export default function LessonPage() {\r\n-  forceLog('LessonPage component mounted');\r\n+  forceLog('LessonPage component mounted', { timestamp: new Date().toISOString() });\r\n   \r\n   const params = useParams();\r\n   const location = useLocation();\r\n   const navigate = useNavigate();\r\n   const searchParams = new URLSearchParams(window.location.search);\r\n   \r\n+  // Enhanced URL validation and logging\r\n+  const urlValidation = validateUrl(params, searchParams);\r\n+  forceLog('URL Validation Result:', urlValidation, urlValidation.isValid ? 'info' : 'error');\r\n+  \r\n   forceLog('Route information:', { \r\n     params, \r\n     pathname: location.pathname, \r\n     search: location.search,\r\n     fullUrl: window.location.href,\r\n     lessonId: params?.lessonId,\r\n     topicId: searchParams.get('topicId'),\r\n     subtopicId: searchParams.get('subtopicId'),\r\n-    rawSearch: window.location.search\r\n+    rawSearch: window.location.search,\r\n+    hash: window.location.hash,\r\n+    origin: window.location.origin,\r\n+    localStorage: Object.keys(localStorage)\r\n   });\r\n \r\n   const [lessonState, setLessonState] = useState<LessonState | null>(null);\r\n   const [currentStep, setCurrentStep] = useState(0);\r\n@@ -259,71 +298,77 @@\n     let isMounted = true;\r\n     let initAttempted = false;\r\n     \r\n     const initializeLessonPage = async () => {\r\n-      if (initAttempted) return;\r\n+      if (initAttempted) {\r\n+        forceLog('Initialization already attempted, skipping', null, 'warn');\r\n+        return;\r\n+      }\r\n+      \r\n       initAttempted = true;\r\n+      forceLog('Starting lesson page initialization');\r\n \r\n       try {\r\n-        forceLog('Initializing lesson page');\r\n         const lessonId = params?.lessonId;\r\n         const topicId = searchParams.get('topicId');\r\n         const subtopicId = searchParams.get('subtopicId');\r\n \r\n-        forceLog('Checking parameters:', { lessonId, topicId, subtopicId, fullUrl: window.location.href });\r\n+        forceLog('Checking URL parameters', { lessonId, topicId, subtopicId });\r\n \r\n-        if (!lessonId || !topicId || !subtopicId) {\r\n-          throw new Error(`Missing required parameters: ${!lessonId ? 'lessonId' : !topicId ? 'topicId' : 'subtopicId'}`);\r\n+        // Validate required parameters\r\n+        if (!urlValidation.isValid) {\r\n+          throw new Error(`Missing required parameters: ${urlValidation.missingParams.join(', ')}`);\r\n         }\r\n \r\n-        // Try to get state from localStorage first\r\n+        // Check localStorage for existing state\r\n         const stateKey = `lesson_state_${lessonId}`;\r\n+        forceLog('Checking localStorage for state', { stateKey });\r\n+        \r\n         const savedState = localStorage.getItem(stateKey);\r\n-        \r\n         if (savedState) {\r\n           try {\r\n             const parsedState = JSON.parse(savedState);\r\n-            forceLog('Found saved state:', parsedState);\r\n+            forceLog('Found saved state', parsedState);\r\n+            \r\n             if (parsedState.lesson) {\r\n               setLessonState(parsedState);\r\n               setHasAttemptedLoad(true);\r\n               setIsLoading(false);\r\n+              forceLog('Successfully restored saved state');\r\n               return;\r\n             }\r\n           } catch (e) {\r\n-            forceLog('Error parsing saved state:', e);\r\n+            forceLog('Error parsing saved state', e, 'error');\r\n           }\r\n         }\r\n \r\n         // Request fullscreen mode\r\n         try {\r\n           await enterFullscreen();\r\n           forceLog('Entered fullscreen mode successfully');\r\n         } catch (error) {\r\n-          forceLog('Fullscreen request failed (non-critical):', error);\r\n+          forceLog('Fullscreen request failed (non-critical)', error, 'warn');\r\n         }\r\n \r\n-        // Add a delay before fetching data\r\n-        await new Promise(resolve => setTimeout(resolve, 500));\r\n-\r\n         // Fetch the lesson data\r\n         forceLog('Starting data fetch');\r\n         const lessonData = await fetchLessonData(lessonId, topicId, subtopicId);\r\n         \r\n         if (!isMounted) {\r\n-          forceLog('Component unmounted during fetch, aborting state updates');\r\n+          forceLog('Component unmounted during fetch, aborting state updates', null, 'warn');\r\n           return;\r\n         }\r\n \r\n-        forceLog('Setting lesson state:', lessonData);\r\n+        forceLog('Setting lesson state', lessonData);\r\n         setLessonState(lessonData);\r\n         setHasAttemptedLoad(true);\r\n         setIsLoading(false);\r\n \r\n       } catch (error) {\r\n-        forceLog('Error in initialization:', error);\r\n+        forceLog('Error in initialization', error, 'error');\r\n         if (isMounted) {\r\n-          setError(error instanceof Error ? error.message : 'Failed to load lesson');\r\n+          const errorMessage = error instanceof Error ? error.message : 'Failed to load lesson';\r\n+          setError(errorMessage);\r\n           setIsLoading(false);\r\n           setHasAttemptedLoad(true);\r\n         }\r\n       }\r\n@@ -337,9 +382,9 @@\n     return () => {\r\n       isMounted = false;\r\n       forceLog('Component cleanup - unmounting');\r\n     };\r\n-  }, [params?.lessonId]);\r\n+  }, [params?.lessonId, urlValidation.isValid]);\r\n \r\n   // Only navigate away if there's an error and we're not loading\r\n   useEffect(() => {\r\n     let navigationTimer: NodeJS.Timeout;\r\n"
                },
                {
                    "date": 1739208647658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,8 +75,9 @@\n \r\n interface LessonState {\r\n   lesson: {\r\n     id: string;\r\n+    name: string;\r\n     title: string;\r\n     content?: string;\r\n     description?: string;\r\n     topic_id?: string;\r\n"
                },
                {
                    "date": 1739208798544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,8 +129,13 @@\n   validation.isValid = validation.missingParams.length === 0;\r\n   return validation;\r\n };\r\n \r\n+// Add this type guard function\r\n+const isValidString = (value: any): value is string => {\r\n+  return typeof value === 'string' && value.length > 0;\r\n+};\r\n+\r\n export default function LessonPage() {\r\n   forceLog('LessonPage component mounted', { timestamp: new Date().toISOString() });\r\n   \r\n   const params = useParams();\r\n@@ -217,14 +222,30 @@\n       setError('Failed to navigate back to lessons page');\r\n     }\r\n   };\r\n \r\n-  // Function to fetch lesson data\r\n+  // Update the fetchLessonData function\r\n   const fetchLessonData = async (lessonId: string, topicId: string, subtopicId: string) => {\r\n     try {\r\n       forceLog('Fetching lesson data:', { lessonId, topicId, subtopicId });\r\n \r\n-      // Fetch lesson data\r\n+      // First check if we have state in localStorage\r\n+      const stateKey = `lesson_state_${lessonId}`;\r\n+      const savedState = localStorage.getItem(stateKey);\r\n+      \r\n+      if (savedState) {\r\n+        try {\r\n+          const parsedState = JSON.parse(savedState);\r\n+          forceLog('Found saved state in localStorage', parsedState);\r\n+          if (parsedState.lesson && parsedState.topic && parsedState.subtopic) {\r\n+            return parsedState;\r\n+          }\r\n+        } catch (e) {\r\n+          forceLog('Error parsing saved state', e, 'error');\r\n+        }\r\n+      }\r\n+\r\n+      // If no valid state in localStorage, fetch from API\r\n       const { data: lessonData, error: lessonError } = await supabase\r\n         .from('lessons')\r\n         .select(`\r\n           *,\r\n@@ -239,9 +260,9 @@\n         .eq('id', lessonId)\r\n         .single();\r\n \r\n       if (lessonError) {\r\n-        forceLog('Error fetching lesson:', lessonError);\r\n+        forceLog('Error fetching lesson:', lessonError, 'error');\r\n         throw lessonError;\r\n       }\r\n \r\n       // Fetch topic data\r\n@@ -251,9 +272,9 @@\n         .eq('id', topicId)\r\n         .single();\r\n \r\n       if (topicError) {\r\n-        forceLog('Error fetching topic:', topicError);\r\n+        forceLog('Error fetching topic:', topicError, 'error');\r\n         throw topicError;\r\n       }\r\n \r\n       // Fetch subtopic data\r\n@@ -263,9 +284,9 @@\n         .eq('id', subtopicId)\r\n         .single();\r\n \r\n       if (subtopicError) {\r\n-        forceLog('Error fetching subtopic:', subtopicError);\r\n+        forceLog('Error fetching subtopic:', subtopicError, 'error');\r\n         throw subtopicError;\r\n       }\r\n \r\n       const fullState: LessonState = {\r\n@@ -274,28 +295,24 @@\n           questions: lessonData.questions || [],\r\n           activities: lessonData.activities || [],\r\n           exercise_prompts: lessonData.exercise_prompts || []\r\n         },\r\n-        topic: {\r\n-          id: topicData.id,\r\n-          title: topicData.title\r\n-        },\r\n-        subtopic: {\r\n-          id: subtopicData.id,\r\n-          title: subtopicData.title\r\n-        }\r\n+        topic: topicData,\r\n+        subtopic: subtopicData\r\n       };\r\n \r\n-      forceLog('Successfully fetched all data:', fullState);\r\n+      // Save the state to localStorage\r\n+      localStorage.setItem(stateKey, JSON.stringify(fullState));\r\n+      forceLog('Successfully fetched and saved all data:', fullState);\r\n+      \r\n       return fullState;\r\n-\r\n     } catch (error) {\r\n-      forceLog('Error in fetchLessonData:', error);\r\n+      forceLog('Error in fetchLessonData:', error, 'error');\r\n       throw error;\r\n     }\r\n   };\r\n \r\n-  // Effect to handle initialization and data fetching\r\n+  // Update the initialization effect\r\n   useEffect(() => {\r\n     let isMounted = true;\r\n     let initAttempted = false;\r\n     \r\n@@ -314,35 +331,16 @@\n         const subtopicId = searchParams.get('subtopicId');\r\n \r\n         forceLog('Checking URL parameters', { lessonId, topicId, subtopicId });\r\n \r\n-        // Validate required parameters\r\n-        if (!urlValidation.isValid) {\r\n-          throw new Error(`Missing required parameters: ${urlValidation.missingParams.join(', ')}`);\r\n+        if (!isValidString(lessonId) || !isValidString(topicId) || !isValidString(subtopicId)) {\r\n+          throw new Error(`Missing required parameters: ${[\r\n+            !isValidString(lessonId) && 'lessonId',\r\n+            !isValidString(topicId) && 'topicId',\r\n+            !isValidString(subtopicId) && 'subtopicId'\r\n+          ].filter(Boolean).join(', ')}`);\r\n         }\r\n \r\n-        // Check localStorage for existing state\r\n-        const stateKey = `lesson_state_${lessonId}`;\r\n-        forceLog('Checking localStorage for state', { stateKey });\r\n-        \r\n-        const savedState = localStorage.getItem(stateKey);\r\n-        if (savedState) {\r\n-          try {\r\n-            const parsedState = JSON.parse(savedState);\r\n-            forceLog('Found saved state', parsedState);\r\n-            \r\n-            if (parsedState.lesson) {\r\n-              setLessonState(parsedState);\r\n-              setHasAttemptedLoad(true);\r\n-              setIsLoading(false);\r\n-              forceLog('Successfully restored saved state');\r\n-              return;\r\n-            }\r\n-          } catch (e) {\r\n-            forceLog('Error parsing saved state', e, 'error');\r\n-          }\r\n-        }\r\n-\r\n         // Request fullscreen mode\r\n         try {\r\n           await enterFullscreen();\r\n           forceLog('Entered fullscreen mode successfully');\r\n@@ -374,18 +372,17 @@\n         }\r\n       }\r\n     };\r\n \r\n-    // Start initialization immediately\r\n     if (!hasAttemptedLoad) {\r\n       initializeLessonPage();\r\n     }\r\n \r\n     return () => {\r\n       isMounted = false;\r\n       forceLog('Component cleanup - unmounting');\r\n     };\r\n-  }, [params?.lessonId, urlValidation.isValid]);\r\n+  }, [params?.lessonId, searchParams]);\r\n \r\n   // Only navigate away if there's an error and we're not loading\r\n   useEffect(() => {\r\n     let navigationTimer: NodeJS.Timeout;\r\n"
                },
                {
                    "date": 1739208816080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,12 +134,17 @@\n const isValidString = (value: any): value is string => {\r\n   return typeof value === 'string' && value.length > 0;\r\n };\r\n \r\n+// Add these types at the top with other interfaces\r\n+interface RouteParams {\r\n+  lessonId?: string;\r\n+}\r\n+\r\n export default function LessonPage() {\r\n   forceLog('LessonPage component mounted', { timestamp: new Date().toISOString() });\r\n   \r\n-  const params = useParams();\r\n+  const params = useParams<RouteParams>();\r\n   const location = useLocation();\r\n   const navigate = useNavigate();\r\n   const searchParams = new URLSearchParams(window.location.search);\r\n   \r\n@@ -223,9 +228,13 @@\n     }\r\n   };\r\n \r\n   // Update the fetchLessonData function\r\n-  const fetchLessonData = async (lessonId: string, topicId: string, subtopicId: string) => {\r\n+  const fetchLessonData = async (\r\n+    lessonId: string,\r\n+    topicId: string,\r\n+    subtopicId: string\r\n+  ): Promise<LessonState> => {\r\n     try {\r\n       forceLog('Fetching lesson data:', { lessonId, topicId, subtopicId });\r\n \r\n       // First check if we have state in localStorage\r\n"
                },
                {
                    "date": 1739208828885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,10 +134,11 @@\n const isValidString = (value: any): value is string => {\r\n   return typeof value === 'string' && value.length > 0;\r\n };\r\n \r\n-// Add these types at the top with other interfaces\r\n+// Update the RouteParams interface\r\n interface RouteParams {\r\n+  [key: string]: string | undefined;\r\n   lessonId?: string;\r\n }\r\n \r\n export default function LessonPage() {\r\n"
                },
                {
                    "date": 1739208959411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,12 +181,22 @@\n   const enterFullscreen = async () => {\r\n     try {\r\n       const element = document.documentElement;\r\n       if (element.requestFullscreen) {\r\n-        await element.requestFullscreen();\r\n+        // Only attempt fullscreen if we're in a user gesture context\r\n+        // and the document is not already in fullscreen mode\r\n+        if (!document.fullscreenElement) {\r\n+          await element.requestFullscreen().catch((err) => {\r\n+            forceLog('Fullscreen request failed:', err, 'warn');\r\n+            // Non-critical error, we can continue without fullscreen\r\n+          });\r\n+        }\r\n+      } else {\r\n+        forceLog('Fullscreen API not supported', null, 'warn');\r\n       }\r\n     } catch (error) {\r\n-      console.error('Fullscreen error:', error);\r\n+      // Log but don't throw - fullscreen is not critical for functionality\r\n+      forceLog('Error requesting fullscreen:', error, 'warn');\r\n     }\r\n   };\r\n \r\n   // Function to handle exiting fullscreen\r\n@@ -349,30 +359,32 @@\n             !isValidString(subtopicId) && 'subtopicId'\r\n           ].filter(Boolean).join(', ')}`);\r\n         }\r\n \r\n-        // Request fullscreen mode\r\n-        try {\r\n-          await enterFullscreen();\r\n-          forceLog('Entered fullscreen mode successfully');\r\n-        } catch (error) {\r\n-          forceLog('Fullscreen request failed (non-critical)', error, 'warn');\r\n-        }\r\n-\r\n-        // Fetch the lesson data\r\n+        // Fetch the lesson data first\r\n         forceLog('Starting data fetch');\r\n         const lessonData = await fetchLessonData(lessonId, topicId, subtopicId);\r\n         \r\n         if (!isMounted) {\r\n           forceLog('Component unmounted during fetch, aborting state updates', null, 'warn');\r\n           return;\r\n         }\r\n \r\n+        // Set the lesson state before attempting fullscreen\r\n         forceLog('Setting lesson state', lessonData);\r\n         setLessonState(lessonData);\r\n         setHasAttemptedLoad(true);\r\n         setIsLoading(false);\r\n \r\n+        // Attempt fullscreen after a short delay to ensure we're in a user gesture context\r\n+        setTimeout(() => {\r\n+          if (isMounted) {\r\n+            enterFullscreen().catch((error) => {\r\n+              forceLog('Non-critical fullscreen error:', error, 'warn');\r\n+            });\r\n+          }\r\n+        }, 1000);\r\n+\r\n       } catch (error) {\r\n         forceLog('Error in initialization', error, 'error');\r\n         if (isMounted) {\r\n           const errorMessage = error instanceof Error ? error.message : 'Failed to load lesson';\r\n"
                },
                {
                    "date": 1739209104004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,19 +184,24 @@\n       if (element.requestFullscreen) {\r\n         // Only attempt fullscreen if we're in a user gesture context\r\n         // and the document is not already in fullscreen mode\r\n         if (!document.fullscreenElement) {\r\n-          await element.requestFullscreen().catch((err) => {\r\n-            forceLog('Fullscreen request failed:', err, 'warn');\r\n+          // Add a try-catch specifically for the requestFullscreen call\r\n+          try {\r\n+            await element.requestFullscreen();\r\n+            forceLog('Entered fullscreen mode successfully');\r\n+            setIsFullscreen(true);\r\n+          } catch (err) {\r\n+            forceLog('Fullscreen request failed (non-critical):', err, 'warn');\r\n             // Non-critical error, we can continue without fullscreen\r\n-          });\r\n+          }\r\n         }\r\n       } else {\r\n         forceLog('Fullscreen API not supported', null, 'warn');\r\n       }\r\n     } catch (error) {\r\n       // Log but don't throw - fullscreen is not critical for functionality\r\n-      forceLog('Error requesting fullscreen:', error, 'warn');\r\n+      forceLog('Error in enterFullscreen:', error, 'warn');\r\n     }\r\n   };\r\n \r\n   // Function to handle exiting fullscreen\r\n@@ -368,23 +373,14 @@\n           forceLog('Component unmounted during fetch, aborting state updates', null, 'warn');\r\n           return;\r\n         }\r\n \r\n-        // Set the lesson state before attempting fullscreen\r\n+        // Set the lesson state\r\n         forceLog('Setting lesson state', lessonData);\r\n         setLessonState(lessonData);\r\n         setHasAttemptedLoad(true);\r\n         setIsLoading(false);\r\n \r\n-        // Attempt fullscreen after a short delay to ensure we're in a user gesture context\r\n-        setTimeout(() => {\r\n-          if (isMounted) {\r\n-            enterFullscreen().catch((error) => {\r\n-              forceLog('Non-critical fullscreen error:', error, 'warn');\r\n-            });\r\n-          }\r\n-        }, 1000);\r\n-\r\n       } catch (error) {\r\n         forceLog('Error in initialization', error, 'error');\r\n         if (isMounted) {\r\n           const errorMessage = error instanceof Error ? error.message : 'Failed to load lesson';\r\n@@ -511,8 +507,15 @@\n             <Progress \r\n               value={(currentStep / totalSteps) * 100} \r\n               className=\"w-40\"\r\n             />\r\n+            <Button \r\n+              variant=\"outline\" \r\n+              onClick={enterFullscreen}\r\n+              className=\"mr-2\"\r\n+            >\r\n+              Fullscreen\r\n+            </Button>\r\n             <Button variant=\"outline\" onClick={handleEndLesson}>\r\n               End Lesson\r\n             </Button>\r\n           </div>\r\n"
                },
                {
                    "date": 1739211775591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,11 +114,11 @@\n \r\n // Add URL validation helper\r\n const validateUrl = (params: any, searchParams: URLSearchParams) => {\r\n   const validation = {\r\n-    lessonId: params?.lessonId,\r\n     topicId: searchParams.get('topicId'),\r\n     subtopicId: searchParams.get('subtopicId'),\r\n+    lessonId: params?.lessonId,\r\n     isValid: false,\r\n     missingParams: [] as string[]\r\n   };\r\n \r\n@@ -354,40 +354,64 @@\n         const lessonId = params?.lessonId;\r\n         const topicId = searchParams.get('topicId');\r\n         const subtopicId = searchParams.get('subtopicId');\r\n \r\n-        forceLog('Checking URL parameters', { lessonId, topicId, subtopicId });\r\n+        forceLog('URL Parameters:', { lessonId, topicId, subtopicId });\r\n \r\n+        // First try to get state from localStorage\r\n+        const stateKey = `lesson_state_${lessonId}`;\r\n+        const savedState = localStorage.getItem(stateKey);\r\n+        \r\n+        if (savedState) {\r\n+          try {\r\n+            const parsedState = JSON.parse(savedState);\r\n+            forceLog('Found saved state:', parsedState);\r\n+            \r\n+            if (parsedState.lesson && parsedState.topic && parsedState.subtopic) {\r\n+              setLessonState(parsedState);\r\n+              setHasAttemptedLoad(true);\r\n+              setIsLoading(false);\r\n+              return;\r\n+            }\r\n+          } catch (e) {\r\n+            forceLog('Error parsing saved state:', e, 'warn');\r\n+          }\r\n+        }\r\n+\r\n+        // If no valid state in localStorage, validate URL parameters\r\n         if (!isValidString(lessonId) || !isValidString(topicId) || !isValidString(subtopicId)) {\r\n           throw new Error(`Missing required parameters: ${[\r\n             !isValidString(lessonId) && 'lessonId',\r\n             !isValidString(topicId) && 'topicId',\r\n             !isValidString(subtopicId) && 'subtopicId'\r\n           ].filter(Boolean).join(', ')}`);\r\n         }\r\n \r\n-        // Fetch the lesson data first\r\n-        forceLog('Starting data fetch');\r\n+        // Fetch the lesson data\r\n+        forceLog('Fetching lesson data...');\r\n         const lessonData = await fetchLessonData(lessonId, topicId, subtopicId);\r\n         \r\n         if (!isMounted) {\r\n           forceLog('Component unmounted during fetch, aborting state updates', null, 'warn');\r\n           return;\r\n         }\r\n \r\n         // Set the lesson state\r\n-        forceLog('Setting lesson state', lessonData);\r\n+        forceLog('Setting lesson state:', lessonData);\r\n         setLessonState(lessonData);\r\n         setHasAttemptedLoad(true);\r\n         setIsLoading(false);\r\n \r\n       } catch (error) {\r\n-        forceLog('Error in initialization', error, 'error');\r\n+        forceLog('Error in initialization:', error, 'error');\r\n         if (isMounted) {\r\n           const errorMessage = error instanceof Error ? error.message : 'Failed to load lesson';\r\n           setError(errorMessage);\r\n           setIsLoading(false);\r\n           setHasAttemptedLoad(true);\r\n+          \r\n+          // Don't navigate immediately on error, let the error effect handle it\r\n+          forceLog('Error state set, navigation will be handled by error effect');\r\n         }\r\n       }\r\n     };\r\n \r\n"
                },
                {
                    "date": 1739212051888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -342,76 +342,102 @@\n     let initAttempted = false;\r\n     \r\n     const initializeLessonPage = async () => {\r\n       if (initAttempted) {\r\n-        forceLog('Initialization already attempted, skipping', null, 'warn');\r\n+        forceLog('[Init] Initialization already attempted, skipping', null, 'warn');\r\n         return;\r\n       }\r\n       \r\n       initAttempted = true;\r\n-      forceLog('Starting lesson page initialization');\r\n+      forceLog('[Init] Starting lesson page initialization', {\r\n+        url: window.location.href,\r\n+        timestamp: new Date().toISOString(),\r\n+        localStorage: Object.keys(localStorage)\r\n+      });\r\n \r\n       try {\r\n         const lessonId = params?.lessonId;\r\n         const topicId = searchParams.get('topicId');\r\n         const subtopicId = searchParams.get('subtopicId');\r\n+        const timestamp = searchParams.get('ts');\r\n \r\n-        forceLog('URL Parameters:', { lessonId, topicId, subtopicId });\r\n+        forceLog('[Init] URL Parameters:', { \r\n+          lessonId, \r\n+          topicId, \r\n+          subtopicId,\r\n+          timestamp,\r\n+          fullUrl: window.location.href,\r\n+          referrer: document.referrer\r\n+        });\r\n \r\n         // First try to get state from localStorage\r\n         const stateKey = `lesson_state_${lessonId}`;\r\n         const savedState = localStorage.getItem(stateKey);\r\n         \r\n         if (savedState) {\r\n           try {\r\n             const parsedState = JSON.parse(savedState);\r\n-            forceLog('Found saved state:', parsedState);\r\n+            forceLog('[Init] Found saved state:', {\r\n+              state: parsedState,\r\n+              stateTimestamp: parsedState.timestamp,\r\n+              currentTimestamp: new Date().toISOString()\r\n+            });\r\n             \r\n             if (parsedState.lesson && parsedState.topic && parsedState.subtopic) {\r\n+              if (!isMounted) {\r\n+                forceLog('[Init] Component unmounted before state could be set', null, 'warn');\r\n+                return;\r\n+              }\r\n               setLessonState(parsedState);\r\n               setHasAttemptedLoad(true);\r\n               setIsLoading(false);\r\n+              forceLog('[Init] Successfully loaded state from localStorage');\r\n               return;\r\n             }\r\n           } catch (e) {\r\n-            forceLog('Error parsing saved state:', e, 'warn');\r\n+            forceLog('[Init] Error parsing saved state:', e, 'warn');\r\n           }\r\n+        } else {\r\n+          forceLog('[Init] No saved state found in localStorage', { stateKey }, 'warn');\r\n         }\r\n \r\n         // If no valid state in localStorage, validate URL parameters\r\n         if (!isValidString(lessonId) || !isValidString(topicId) || !isValidString(subtopicId)) {\r\n-          throw new Error(`Missing required parameters: ${[\r\n+          const missingParams = [\r\n             !isValidString(lessonId) && 'lessonId',\r\n             !isValidString(topicId) && 'topicId',\r\n             !isValidString(subtopicId) && 'subtopicId'\r\n-          ].filter(Boolean).join(', ')}`);\r\n+          ].filter(Boolean);\r\n+          \r\n+          forceLog('[Init] Missing required parameters:', { missingParams }, 'error');\r\n+          throw new Error(`Missing required parameters: ${missingParams.join(', ')}`);\r\n         }\r\n \r\n         // Fetch the lesson data\r\n-        forceLog('Fetching lesson data...');\r\n+        forceLog('[Init] Fetching lesson data from API...');\r\n         const lessonData = await fetchLessonData(lessonId, topicId, subtopicId);\r\n         \r\n         if (!isMounted) {\r\n-          forceLog('Component unmounted during fetch, aborting state updates', null, 'warn');\r\n+          forceLog('[Init] Component unmounted during fetch, aborting state updates', null, 'warn');\r\n           return;\r\n         }\r\n \r\n         // Set the lesson state\r\n-        forceLog('Setting lesson state:', lessonData);\r\n+        forceLog('[Init] Setting lesson state:', lessonData);\r\n         setLessonState(lessonData);\r\n         setHasAttemptedLoad(true);\r\n         setIsLoading(false);\r\n+        forceLog('[Init] Initialization complete');\r\n \r\n       } catch (error) {\r\n-        forceLog('Error in initialization:', error, 'error');\r\n+        forceLog('[Init] Error in initialization:', error, 'error');\r\n         if (isMounted) {\r\n           const errorMessage = error instanceof Error ? error.message : 'Failed to load lesson';\r\n           setError(errorMessage);\r\n           setIsLoading(false);\r\n           setHasAttemptedLoad(true);\r\n           \r\n-          // Don't navigate immediately on error, let the error effect handle it\r\n-          forceLog('Error state set, navigation will be handled by error effect');\r\n+          forceLog('[Init] Error state set, will redirect in 2 seconds');\r\n         }\r\n       }\r\n     };\r\n \r\n@@ -420,9 +446,13 @@\n     }\r\n \r\n     return () => {\r\n       isMounted = false;\r\n-      forceLog('Component cleanup - unmounting');\r\n+      forceLog('[Cleanup] Component unmounting', {\r\n+        hasAttemptedLoad,\r\n+        error,\r\n+        isLoading\r\n+      });\r\n     };\r\n   }, [params?.lessonId, searchParams]);\r\n \r\n   // Only navigate away if there's an error and we're not loading\r\n"
                },
                {
                    "date": 1739212266751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n import { ArrowLeft, BookOpen, CheckCircle2, Clock, Flag, HelpCircle, Layout, List, Play, Settings, Star, X, Mic, PenTool, FileText } from \"lucide-react\";\r\n import { cn } from \"@/lib/utils\";\r\n import { supabase } from \"@/lib/supabase\";\r\n import { Question, Activity, ExercisePrompt } from \"@/types\";\r\n+import { useAuth } from '@/hooks/useAuth';\r\n \r\n // Enhanced debug configuration\r\n const DEBUG = true;\r\n const LOG_TO_STORAGE = true;\r\n@@ -354,8 +355,24 @@\n         localStorage: Object.keys(localStorage)\r\n       });\r\n \r\n       try {\r\n+        // Check for stored auth state first\r\n+        const storedAuth = localStorage.getItem('lesson_auth_state');\r\n+        if (storedAuth) {\r\n+          const authData = JSON.parse(storedAuth);\r\n+          forceLog('[Init] Found stored auth state:', {\r\n+            timestamp: authData.timestamp,\r\n+            hasSession: !!authData.session\r\n+          });\r\n+          \r\n+          // Restore the session if needed\r\n+          if (authData.session) {\r\n+            await supabase.auth.setSession(authData.session);\r\n+            forceLog('[Init] Restored authentication session');\r\n+          }\r\n+        }\r\n+\r\n         const lessonId = params?.lessonId;\r\n         const topicId = searchParams.get('topicId');\r\n         const subtopicId = searchParams.get('subtopicId');\r\n         const timestamp = searchParams.get('ts');\r\n@@ -399,8 +416,14 @@\n         } else {\r\n           forceLog('[Init] No saved state found in localStorage', { stateKey }, 'warn');\r\n         }\r\n \r\n+        // Verify authentication before proceeding\r\n+        const { data: { session } } = await supabase.auth.getSession();\r\n+        if (!session) {\r\n+          throw new Error('No authenticated session found');\r\n+        }\r\n+\r\n         // If no valid state in localStorage, validate URL parameters\r\n         if (!isValidString(lessonId) || !isValidString(topicId) || !isValidString(subtopicId)) {\r\n           const missingParams = [\r\n             !isValidString(lessonId) && 'lessonId',\r\n"
                },
                {
                    "date": 1739215092808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,8 +141,11 @@\n   [key: string]: string | undefined;\r\n   lessonId?: string;\r\n }\r\n \r\n+const MAX_AUTH_RETRIES = 3;\r\n+const AUTH_RETRY_DELAY = 1000;\r\n+\r\n export default function LessonPage() {\r\n   forceLog('LessonPage component mounted', { timestamp: new Date().toISOString() });\r\n   \r\n   const params = useParams<RouteParams>();\r\n@@ -340,39 +343,54 @@\n   // Update the initialization effect\r\n   useEffect(() => {\r\n     let isMounted = true;\r\n     let initAttempted = false;\r\n+    let authRetries = 0;\r\n     \r\n     const initializeLessonPage = async () => {\r\n       if (initAttempted) {\r\n         forceLog('[Init] Initialization already attempted, skipping', null, 'warn');\r\n         return;\r\n       }\r\n       \r\n       initAttempted = true;\r\n-      forceLog('[Init] Starting lesson page initialization', {\r\n-        url: window.location.href,\r\n-        timestamp: new Date().toISOString(),\r\n-        localStorage: Object.keys(localStorage)\r\n-      });\r\n+      forceLog('[Init] Starting lesson page initialization');\r\n \r\n       try {\r\n-        // Check for stored auth state first\r\n+        // First try to restore auth state\r\n         const storedAuth = localStorage.getItem('lesson_auth_state');\r\n         if (storedAuth) {\r\n           const authData = JSON.parse(storedAuth);\r\n-          forceLog('[Init] Found stored auth state:', {\r\n-            timestamp: authData.timestamp,\r\n-            hasSession: !!authData.session\r\n-          });\r\n-          \r\n-          // Restore the session if needed\r\n           if (authData.session) {\r\n-            await supabase.auth.setSession(authData.session);\r\n-            forceLog('[Init] Restored authentication session');\r\n+            try {\r\n+              await supabase.auth.setSession(authData.session);\r\n+              forceLog('[Init] Restored authentication session');\r\n+            } catch (authError) {\r\n+              forceLog('[Init] Failed to restore auth session:', authError, 'error');\r\n+              throw new Error('Authentication failed');\r\n+            }\r\n           }\r\n         }\r\n \r\n+        // Verify authentication with retries\r\n+        while (authRetries < MAX_AUTH_RETRIES) {\r\n+          const { data: { session }, error: sessionError } = await supabase.auth.getSession();\r\n+          \r\n+          if (session) {\r\n+            forceLog('[Init] Authentication verified');\r\n+            break;\r\n+          }\r\n+          \r\n+          forceLog(`[Init] Auth retry ${authRetries + 1}/${MAX_AUTH_RETRIES}`);\r\n+          authRetries++;\r\n+          \r\n+          if (authRetries === MAX_AUTH_RETRIES) {\r\n+            throw new Error('Failed to authenticate after multiple attempts');\r\n+          }\r\n+          \r\n+          await new Promise(resolve => setTimeout(resolve, AUTH_RETRY_DELAY));\r\n+        }\r\n+\r\n         const lessonId = params?.lessonId;\r\n         const topicId = searchParams.get('topicId');\r\n         const subtopicId = searchParams.get('subtopicId');\r\n         const timestamp = searchParams.get('ts');\r\n"
                },
                {
                    "date": 1739215321123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n import { cn } from \"@/lib/utils\";\r\n import { supabase } from \"@/lib/supabase\";\r\n import { Question, Activity, ExercisePrompt } from \"@/types\";\r\n import { useAuth } from '@/hooks/useAuth';\r\n+import LessonErrorBoundary from '@/components/LessonErrorBoundary';\r\n \r\n // Enhanced debug configuration\r\n const DEBUG = true;\r\n const LOG_TO_STORAGE = true;\r\n@@ -575,252 +576,254 @@\n   const totalSteps = lessonState.lesson.questions.length;\r\n   const currentQuestion = lessonState.lesson.questions[currentStep];\r\n \r\n   return (\r\n-    <div className=\"min-h-screen bg-gradient-to-b from-background to-accent/20\">\r\n-      {/* Top Navigation Bar */}\r\n-      <nav className=\"fixed top-0 left-0 right-0 z-50 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b\">\r\n-        <div className=\"flex items-center justify-between p-4\">\r\n-          <div className=\"flex items-center gap-4\">\r\n-            <Button\r\n-              variant=\"ghost\"\r\n-              size=\"icon\"\r\n-              onClick={handleEndLesson}\r\n-              className=\"hover:bg-accent\"\r\n-            >\r\n-              <X className=\"h-5 w-5\" />\r\n-            </Button>\r\n-            <div>\r\n-              <h1 className=\"text-lg font-semibold\">{lessonState.lesson.title}</h1>\r\n-              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\r\n-                <span>{lessonState.topic.title}</span>\r\n-                <span>•</span>\r\n-                <span>{lessonState.subtopic.title}</span>\r\n+    <LessonErrorBoundary>\r\n+      <div className=\"min-h-screen bg-gradient-to-b from-background to-accent/20\">\r\n+        {/* Top Navigation Bar */}\r\n+        <nav className=\"fixed top-0 left-0 right-0 z-50 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b\">\r\n+          <div className=\"flex items-center justify-between p-4\">\r\n+            <div className=\"flex items-center gap-4\">\r\n+              <Button\r\n+                variant=\"ghost\"\r\n+                size=\"icon\"\r\n+                onClick={handleEndLesson}\r\n+                className=\"hover:bg-accent\"\r\n+              >\r\n+                <X className=\"h-5 w-5\" />\r\n+              </Button>\r\n+              <div>\r\n+                <h1 className=\"text-lg font-semibold\">{lessonState.lesson.title}</h1>\r\n+                <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\r\n+                  <span>{lessonState.topic.title}</span>\r\n+                  <span>•</span>\r\n+                  <span>{lessonState.subtopic.title}</span>\r\n+                </div>\r\n               </div>\r\n             </div>\r\n+            <div className=\"flex items-center gap-4\">\r\n+              <Progress \r\n+                value={(currentStep / totalSteps) * 100} \r\n+                className=\"w-40\"\r\n+              />\r\n+              <Button \r\n+                variant=\"outline\" \r\n+                onClick={enterFullscreen}\r\n+                className=\"mr-2\"\r\n+              >\r\n+                Fullscreen\r\n+              </Button>\r\n+              <Button variant=\"outline\" onClick={handleEndLesson}>\r\n+                End Lesson\r\n+              </Button>\r\n+            </div>\r\n           </div>\r\n-          <div className=\"flex items-center gap-4\">\r\n-            <Progress \r\n-              value={(currentStep / totalSteps) * 100} \r\n-              className=\"w-40\"\r\n-            />\r\n-            <Button \r\n-              variant=\"outline\" \r\n-              onClick={enterFullscreen}\r\n-              className=\"mr-2\"\r\n-            >\r\n-              Fullscreen\r\n-            </Button>\r\n-            <Button variant=\"outline\" onClick={handleEndLesson}>\r\n-              End Lesson\r\n-            </Button>\r\n-          </div>\r\n-        </div>\r\n-      </nav>\r\n+        </nav>\r\n \r\n-      {/* Main Content */}\r\n-      <main className=\"pt-24 pb-8 px-4 md:px-8 max-w-7xl mx-auto\">\r\n-        <div className=\"grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-8\">\r\n-          {/* Sidebar */}\r\n-          <div className=\"lg:block\">\r\n-            <Card className=\"sticky top-24\">\r\n-              <CardHeader>\r\n-                <CardTitle className=\"text-lg flex items-center gap-2\">\r\n-                  <List className=\"h-5 w-5\" />\r\n-                  Lesson Overview\r\n-                </CardTitle>\r\n-              </CardHeader>\r\n-              <CardContent>\r\n-                <div className=\"space-y-4\">\r\n-                  <div className=\"flex items-center gap-2 text-sm\">\r\n-                    <Clock className=\"h-4 w-4 text-primary\" />\r\n-                    <span>{lessonState.lesson.questions.length * 2} minutes</span>\r\n-                  </div>\r\n-                  <div className=\"flex items-center gap-2 text-sm\">\r\n-                    <HelpCircle className=\"h-4 w-4 text-primary\" />\r\n-                    <span>{lessonState.lesson.questions.length} Questions</span>\r\n-                  </div>\r\n-                  <div className=\"flex items-center gap-2 text-sm\">\r\n-                    <Layout className=\"h-4 w-4 text-primary\" />\r\n-                    <span>{lessonState.lesson.activities?.length || 0} Activities</span>\r\n-                  </div>\r\n-                  \r\n-                  <div className=\"border-t pt-4 mt-4\">\r\n-                    <h3 className=\"font-medium mb-3\">Questions</h3>\r\n-                    <div className=\"space-y-3\">\r\n-                      {lessonState.lesson.questions.map((question, index) => (\r\n-                        <motion.div\r\n-                          key={index}\r\n-                          initial={{ opacity: 0, x: -20 }}\r\n-                          animate={{ opacity: 1, x: 0 }}\r\n-                          transition={{ delay: index * 0.1 }}\r\n-                          className={cn(\r\n-                            \"flex items-center gap-2 p-2 rounded-md transition-all duration-200\",\r\n-                            currentStep === index ? \"bg-accent shadow-sm\" : \"hover:bg-accent/50\",\r\n-                            index < currentStep && \"text-primary\"\r\n-                          )}\r\n-                          onClick={() => setCurrentStep(index)}\r\n-                          style={{ cursor: 'pointer' }}\r\n-                        >\r\n-                          {index < currentStep ? (\r\n-                            <CheckCircle2 className=\"h-4 w-4\" />\r\n-                          ) : (\r\n-                            <div className={cn(\r\n-                              \"h-4 w-4 rounded-full border\",\r\n-                              currentStep === index && \"border-primary\"\r\n-                            )} />\r\n-                          )}\r\n-                          <span className=\"text-sm\">Question {index + 1}</span>\r\n-                          {getQuestionIcon(question.type)}\r\n-                        </motion.div>\r\n-                      ))}\r\n+        {/* Main Content */}\r\n+        <main className=\"pt-24 pb-8 px-4 md:px-8 max-w-7xl mx-auto\">\r\n+          <div className=\"grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-8\">\r\n+            {/* Sidebar */}\r\n+            <div className=\"lg:block\">\r\n+              <Card className=\"sticky top-24\">\r\n+                <CardHeader>\r\n+                  <CardTitle className=\"text-lg flex items-center gap-2\">\r\n+                    <List className=\"h-5 w-5\" />\r\n+                    Lesson Overview\r\n+                  </CardTitle>\r\n+                </CardHeader>\r\n+                <CardContent>\r\n+                  <div className=\"space-y-4\">\r\n+                    <div className=\"flex items-center gap-2 text-sm\">\r\n+                      <Clock className=\"h-4 w-4 text-primary\" />\r\n+                      <span>{lessonState.lesson.questions.length * 2} minutes</span>\r\n                     </div>\r\n+                    <div className=\"flex items-center gap-2 text-sm\">\r\n+                      <HelpCircle className=\"h-4 w-4 text-primary\" />\r\n+                      <span>{lessonState.lesson.questions.length} Questions</span>\r\n+                    </div>\r\n+                    <div className=\"flex items-center gap-2 text-sm\">\r\n+                      <Layout className=\"h-4 w-4 text-primary\" />\r\n+                      <span>{lessonState.lesson.activities?.length || 0} Activities</span>\r\n+                    </div>\r\n+                    \r\n+                    <div className=\"border-t pt-4 mt-4\">\r\n+                      <h3 className=\"font-medium mb-3\">Questions</h3>\r\n+                      <div className=\"space-y-3\">\r\n+                        {lessonState.lesson.questions.map((question, index) => (\r\n+                          <motion.div\r\n+                            key={index}\r\n+                            initial={{ opacity: 0, x: -20 }}\r\n+                            animate={{ opacity: 1, x: 0 }}\r\n+                            transition={{ delay: index * 0.1 }}\r\n+                            className={cn(\r\n+                              \"flex items-center gap-2 p-2 rounded-md transition-all duration-200\",\r\n+                              currentStep === index ? \"bg-accent shadow-sm\" : \"hover:bg-accent/50\",\r\n+                              index < currentStep && \"text-primary\"\r\n+                            )}\r\n+                            onClick={() => setCurrentStep(index)}\r\n+                            style={{ cursor: 'pointer' }}\r\n+                          >\r\n+                            {index < currentStep ? (\r\n+                              <CheckCircle2 className=\"h-4 w-4\" />\r\n+                            ) : (\r\n+                              <div className={cn(\r\n+                                \"h-4 w-4 rounded-full border\",\r\n+                                currentStep === index && \"border-primary\"\r\n+                              )} />\r\n+                            )}\r\n+                            <span className=\"text-sm\">Question {index + 1}</span>\r\n+                            {getQuestionIcon(question.type)}\r\n+                          </motion.div>\r\n+                        ))}\r\n+                      </div>\r\n+                    </div>\r\n                   </div>\r\n-                </div>\r\n-              </CardContent>\r\n-            </Card>\r\n-          </div>\r\n+                </CardContent>\r\n+              </Card>\r\n+            </div>\r\n \r\n-          {/* Main Content Area */}\r\n-          <div className=\"space-y-8\">\r\n-            <Tabs defaultValue=\"question\" className=\"w-full\">\r\n-              <TabsList className=\"mb-4\">\r\n-                <TabsTrigger value=\"question\">Question</TabsTrigger>\r\n-                <TabsTrigger value=\"teacherScript\">Teacher Script</TabsTrigger>\r\n-                <TabsTrigger value=\"activities\">Activities</TabsTrigger>\r\n-              </TabsList>\r\n+            {/* Main Content Area */}\r\n+            <div className=\"space-y-8\">\r\n+              <Tabs defaultValue=\"question\" className=\"w-full\">\r\n+                <TabsList className=\"mb-4\">\r\n+                  <TabsTrigger value=\"question\">Question</TabsTrigger>\r\n+                  <TabsTrigger value=\"teacherScript\">Teacher Script</TabsTrigger>\r\n+                  <TabsTrigger value=\"activities\">Activities</TabsTrigger>\r\n+                </TabsList>\r\n \r\n-              <AnimatePresence mode=\"wait\">\r\n-                <motion.div\r\n-                  key={currentStep}\r\n-                  initial={{ opacity: 0, y: 20 }}\r\n-                  animate={{ opacity: 1, y: 0 }}\r\n-                  exit={{ opacity: 0, y: -20 }}\r\n-                  transition={{ duration: 0.3 }}\r\n-                >\r\n-                  <TabsContent value=\"question\">\r\n-                    <Card>\r\n-                      <CardHeader>\r\n-                        <div className=\"flex items-center justify-between\">\r\n-                          <Badge variant=\"outline\" className=\"bg-primary/5\">\r\n-                            Question {currentStep + 1} of {totalSteps}\r\n-                          </Badge>\r\n-                          <div className=\"flex items-center gap-2\">\r\n-                            <Star className=\"h-4 w-4 text-yellow-500\" />\r\n-                            <span className=\"text-sm\">{currentQuestion.points} Points</span>\r\n+                <AnimatePresence mode=\"wait\">\r\n+                  <motion.div\r\n+                    key={currentStep}\r\n+                    initial={{ opacity: 0, y: 20 }}\r\n+                    animate={{ opacity: 1, y: 0 }}\r\n+                    exit={{ opacity: 0, y: -20 }}\r\n+                    transition={{ duration: 0.3 }}\r\n+                  >\r\n+                    <TabsContent value=\"question\">\r\n+                      <Card>\r\n+                        <CardHeader>\r\n+                          <div className=\"flex items-center justify-between\">\r\n+                            <Badge variant=\"outline\" className=\"bg-primary/5\">\r\n+                              Question {currentStep + 1} of {totalSteps}\r\n+                            </Badge>\r\n+                            <div className=\"flex items-center gap-2\">\r\n+                              <Star className=\"h-4 w-4 text-yellow-500\" />\r\n+                              <span className=\"text-sm\">{currentQuestion.points} Points</span>\r\n+                            </div>\r\n                           </div>\r\n-                        </div>\r\n-                        <CardTitle className=\"text-2xl mt-4\">\r\n-                          {currentQuestion.title || \"Question\"}\r\n-                        </CardTitle>\r\n-                      </CardHeader>\r\n-                      <CardContent className=\"space-y-6\">\r\n-                        <div className=\"prose prose-sm dark:prose-invert max-w-none\">\r\n-                          <div className=\"bg-accent/50 p-4 rounded-lg\">\r\n-                            <h3 className=\"text-lg font-semibold mb-2\">Prompt</h3>\r\n-                            <p>{currentQuestion.data.prompt || currentQuestion.content}</p>\r\n-                          </div>\r\n+                          <CardTitle className=\"text-2xl mt-4\">\r\n+                            {currentQuestion.title || \"Question\"}\r\n+                          </CardTitle>\r\n+                        </CardHeader>\r\n+                        <CardContent className=\"space-y-6\">\r\n+                          <div className=\"prose prose-sm dark:prose-invert max-w-none\">\r\n+                            <div className=\"bg-accent/50 p-4 rounded-lg\">\r\n+                              <h3 className=\"text-lg font-semibold mb-2\">Prompt</h3>\r\n+                              <p>{currentQuestion.data.prompt || currentQuestion.content}</p>\r\n+                            </div>\r\n \r\n-                          {currentQuestion.type === 'multiplechoice' && currentQuestion.metadata?.options && (\r\n-                            <div className=\"mt-6 space-y-4\">\r\n-                              {currentQuestion.metadata.options.map((option, idx) => (\r\n-                                <Button\r\n-                                  key={idx}\r\n-                                  variant=\"outline\"\r\n-                                  className=\"w-full justify-start text-left\"\r\n-                                >\r\n-                                  {option}\r\n+                            {currentQuestion.type === 'multiplechoice' && currentQuestion.metadata?.options && (\r\n+                              <div className=\"mt-6 space-y-4\">\r\n+                                {currentQuestion.metadata.options.map((option, idx) => (\r\n+                                  <Button\r\n+                                    key={idx}\r\n+                                    variant=\"outline\"\r\n+                                    className=\"w-full justify-start text-left\"\r\n+                                  >\r\n+                                    {option}\r\n+                                  </Button>\r\n+                                ))}\r\n+                              </div>\r\n+                            )}\r\n+\r\n+                            {currentQuestion.type === 'speaking' && (\r\n+                              <div className=\"mt-6\">\r\n+                                <Button className=\"w-full justify-center gap-2\">\r\n+                                  <Mic className=\"h-4 w-4\" />\r\n+                                  Start Recording\r\n                                 </Button>\r\n-                              ))}\r\n-                            </div>\r\n-                          )}\r\n+                              </div>\r\n+                            )}\r\n+                          </div>\r\n+                        </CardContent>\r\n+                      </Card>\r\n+                    </TabsContent>\r\n \r\n-                          {currentQuestion.type === 'speaking' && (\r\n-                            <div className=\"mt-6\">\r\n-                              <Button className=\"w-full justify-center gap-2\">\r\n-                                <Mic className=\"h-4 w-4\" />\r\n-                                Start Recording\r\n-                              </Button>\r\n+                    <TabsContent value=\"teacherScript\">\r\n+                      <Card>\r\n+                        <CardContent className=\"p-6\">\r\n+                          <div className=\"prose prose-sm dark:prose-invert max-w-none\">\r\n+                            <h3 className=\"text-lg font-semibold mb-4\">Teacher Script</h3>\r\n+                            <div className=\"bg-accent/50 p-4 rounded-lg\">\r\n+                              {currentQuestion.data.teacherScript || \"No teacher script available.\"}\r\n                             </div>\r\n-                          )}\r\n-                        </div>\r\n-                      </CardContent>\r\n-                    </Card>\r\n-                  </TabsContent>\r\n+                          </div>\r\n+                        </CardContent>\r\n+                      </Card>\r\n+                    </TabsContent>\r\n \r\n-                  <TabsContent value=\"teacherScript\">\r\n-                    <Card>\r\n-                      <CardContent className=\"p-6\">\r\n-                        <div className=\"prose prose-sm dark:prose-invert max-w-none\">\r\n-                          <h3 className=\"text-lg font-semibold mb-4\">Teacher Script</h3>\r\n-                          <div className=\"bg-accent/50 p-4 rounded-lg\">\r\n-                            {currentQuestion.data.teacherScript || \"No teacher script available.\"}\r\n+                    <TabsContent value=\"activities\">\r\n+                      <Card>\r\n+                        <CardContent className=\"p-6\">\r\n+                          <div className=\"prose prose-sm dark:prose-invert max-w-none\">\r\n+                            <h3 className=\"text-lg font-semibold mb-4\">Activities</h3>\r\n+                            {lessonState.lesson.activities?.length > 0 ? (\r\n+                              <div className=\"space-y-4\">\r\n+                                {lessonState.lesson.activities.map((activity, idx) => (\r\n+                                  <div key={idx} className=\"bg-accent/50 p-4 rounded-lg\">\r\n+                                    <h4 className=\"font-medium\">{activity.title}</h4>\r\n+                                    <p>{activity.description}</p>\r\n+                                  </div>\r\n+                                ))}\r\n+                              </div>\r\n+                            ) : (\r\n+                              <p>No activities available for this lesson.</p>\r\n+                            )}\r\n                           </div>\r\n-                        </div>\r\n-                      </CardContent>\r\n-                    </Card>\r\n-                  </TabsContent>\r\n+                        </CardContent>\r\n+                      </Card>\r\n+                    </TabsContent>\r\n+                  </motion.div>\r\n+                </AnimatePresence>\r\n+              </Tabs>\r\n \r\n-                  <TabsContent value=\"activities\">\r\n-                    <Card>\r\n-                      <CardContent className=\"p-6\">\r\n-                        <div className=\"prose prose-sm dark:prose-invert max-w-none\">\r\n-                          <h3 className=\"text-lg font-semibold mb-4\">Activities</h3>\r\n-                          {lessonState.lesson.activities?.length > 0 ? (\r\n-                            <div className=\"space-y-4\">\r\n-                              {lessonState.lesson.activities.map((activity, idx) => (\r\n-                                <div key={idx} className=\"bg-accent/50 p-4 rounded-lg\">\r\n-                                  <h4 className=\"font-medium\">{activity.title}</h4>\r\n-                                  <p>{activity.description}</p>\r\n-                                </div>\r\n-                              ))}\r\n-                            </div>\r\n-                          ) : (\r\n-                            <p>No activities available for this lesson.</p>\r\n-                          )}\r\n-                        </div>\r\n-                      </CardContent>\r\n-                    </Card>\r\n-                  </TabsContent>\r\n-                </motion.div>\r\n-              </AnimatePresence>\r\n-            </Tabs>\r\n-\r\n-            {/* Navigation Buttons */}\r\n-            <div className=\"flex items-center justify-between pt-4\">\r\n-              <Button\r\n-                variant=\"outline\"\r\n-                onClick={() => setCurrentStep(prev => Math.max(0, prev - 1))}\r\n-                disabled={currentStep === 0}\r\n-              >\r\n-                <ArrowLeft className=\"h-4 w-4 mr-2\" />\r\n-                Previous\r\n-              </Button>\r\n-              <Button\r\n-                onClick={() => {\r\n-                  if (currentStep < totalSteps - 1) {\r\n-                    setCurrentStep(prev => prev + 1);\r\n-                    setProgress(prev => prev + (100 / totalSteps));\r\n-                  } else {\r\n-                    handleEndLesson();\r\n-                  }\r\n-                }}\r\n-              >\r\n-                {currentStep < totalSteps - 1 ? (\r\n-                  <>\r\n-                    Next\r\n-                    <ArrowLeft className=\"h-4 w-4 ml-2 rotate-180\" />\r\n-                  </>\r\n-                ) : (\r\n-                  <>\r\n-                    Complete Lesson\r\n-                    <Flag className=\"h-4 w-4 ml-2\" />\r\n-                  </>\r\n-                )}\r\n-              </Button>\r\n+              {/* Navigation Buttons */}\r\n+              <div className=\"flex items-center justify-between pt-4\">\r\n+                <Button\r\n+                  variant=\"outline\"\r\n+                  onClick={() => setCurrentStep(prev => Math.max(0, prev - 1))}\r\n+                  disabled={currentStep === 0}\r\n+                >\r\n+                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\r\n+                  Previous\r\n+                </Button>\r\n+                <Button\r\n+                  onClick={() => {\r\n+                    if (currentStep < totalSteps - 1) {\r\n+                      setCurrentStep(prev => prev + 1);\r\n+                      setProgress(prev => prev + (100 / totalSteps));\r\n+                    } else {\r\n+                      handleEndLesson();\r\n+                    }\r\n+                  }}\r\n+                >\r\n+                  {currentStep < totalSteps - 1 ? (\r\n+                    <>\r\n+                      Next\r\n+                      <ArrowLeft className=\"h-4 w-4 ml-2 rotate-180\" />\r\n+                    </>\r\n+                  ) : (\r\n+                    <>\r\n+                      Complete Lesson\r\n+                      <Flag className=\"h-4 w-4 ml-2\" />\r\n+                    </>\r\n+                  )}\r\n+                </Button>\r\n+              </div>\r\n             </div>\r\n           </div>\r\n-        </div>\r\n-      </main>\r\n-    </div>\r\n+        </main>\r\n+      </div>\r\n+    </LessonErrorBoundary>\r\n   );\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739215659177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,8 +145,18 @@\n \r\n const MAX_AUTH_RETRIES = 3;\r\n const AUTH_RETRY_DELAY = 1000;\r\n \r\n+const DEBUG_MODE = true;\r\n+const AUTH_CHECK_INTERVAL = 1000; // 1 second\r\n+\r\n+// Add this function at the top level\r\n+const debugLog = (message: string, data?: any) => {\r\n+  if (!DEBUG_MODE) return;\r\n+  const timestamp = new Date().toISOString();\r\n+  console.log(`[${timestamp}] [LessonPage] ${message}`, data ? data : '');\r\n+};\r\n+\r\n export default function LessonPage() {\r\n   forceLog('LessonPage component mounted', { timestamp: new Date().toISOString() });\r\n   \r\n   const params = useParams<RouteParams>();\r\n@@ -345,52 +355,62 @@\n   useEffect(() => {\r\n     let isMounted = true;\r\n     let initAttempted = false;\r\n     let authRetries = 0;\r\n+    let authCheckInterval: NodeJS.Timeout;\r\n     \r\n     const initializeLessonPage = async () => {\r\n       if (initAttempted) {\r\n-        forceLog('[Init] Initialization already attempted, skipping', null, 'warn');\r\n+        debugLog('Initialization already attempted, skipping');\r\n         return;\r\n       }\r\n       \r\n       initAttempted = true;\r\n-      forceLog('[Init] Starting lesson page initialization');\r\n+      debugLog('Starting lesson page initialization', {\r\n+        url: window.location.href,\r\n+        params: {\r\n+          lessonId: params?.lessonId,\r\n+          topicId: searchParams.get('topicId'),\r\n+          subtopicId: searchParams.get('subtopicId'),\r\n+          sessionId: searchParams.get('sessionId')\r\n+        }\r\n+      });\r\n \r\n       try {\r\n         // First try to restore auth state\r\n         const storedAuth = localStorage.getItem('lesson_auth_state');\r\n         if (storedAuth) {\r\n           const authData = JSON.parse(storedAuth);\r\n+          debugLog('Found stored auth state', {\r\n+            timestamp: authData.timestamp,\r\n+            hasSession: !!authData.session,\r\n+            expiresAt: authData.expiresAt\r\n+          });\r\n+\r\n           if (authData.session) {\r\n             try {\r\n-              await supabase.auth.setSession(authData.session);\r\n-              forceLog('[Init] Restored authentication session');\r\n+              const { data, error } = await supabase.auth.setSession({\r\n+                access_token: authData.accessToken,\r\n+                refresh_token: authData.refreshToken\r\n+              });\r\n+              \r\n+              if (error) throw error;\r\n+              debugLog('Successfully restored auth session');\r\n             } catch (authError) {\r\n-              forceLog('[Init] Failed to restore auth session:', authError, 'error');\r\n+              debugLog('Failed to restore auth session', authError);\r\n               throw new Error('Authentication failed');\r\n             }\r\n           }\r\n         }\r\n \r\n-        // Verify authentication with retries\r\n-        while (authRetries < MAX_AUTH_RETRIES) {\r\n-          const { data: { session }, error: sessionError } = await supabase.auth.getSession();\r\n-          \r\n-          if (session) {\r\n-            forceLog('[Init] Authentication verified');\r\n-            break;\r\n-          }\r\n-          \r\n-          forceLog(`[Init] Auth retry ${authRetries + 1}/${MAX_AUTH_RETRIES}`);\r\n-          authRetries++;\r\n-          \r\n-          if (authRetries === MAX_AUTH_RETRIES) {\r\n-            throw new Error('Failed to authenticate after multiple attempts');\r\n-          }\r\n-          \r\n-          await new Promise(resolve => setTimeout(resolve, AUTH_RETRY_DELAY));\r\n-        }\r\n+        // Start auth check interval\r\n+        authCheckInterval = setInterval(async () => {\r\n+          const { data: { session } } = await supabase.auth.getSession();\r\n+          debugLog('Auth check', {\r\n+            hasSession: !!session,\r\n+            expiresAt: session?.expires_at\r\n+          });\r\n+        }, AUTH_CHECK_INTERVAL);\r\n \r\n         const lessonId = params?.lessonId;\r\n         const topicId = searchParams.get('topicId');\r\n         const subtopicId = searchParams.get('subtopicId');\r\n@@ -470,16 +490,16 @@\n         setIsLoading(false);\r\n         forceLog('[Init] Initialization complete');\r\n \r\n       } catch (error) {\r\n-        forceLog('[Init] Error in initialization:', error, 'error');\r\n+        debugLog('Error in initialization', error);\r\n         if (isMounted) {\r\n           const errorMessage = error instanceof Error ? error.message : 'Failed to load lesson';\r\n           setError(errorMessage);\r\n           setIsLoading(false);\r\n           setHasAttemptedLoad(true);\r\n           \r\n-          forceLog('[Init] Error state set, will redirect in 2 seconds');\r\n+          debugLog('Error state set, will redirect in 2 seconds');\r\n         }\r\n       }\r\n     };\r\n \r\n@@ -488,9 +508,12 @@\n     }\r\n \r\n     return () => {\r\n       isMounted = false;\r\n-      forceLog('[Cleanup] Component unmounting', {\r\n+      if (authCheckInterval) {\r\n+        clearInterval(authCheckInterval);\r\n+      }\r\n+      debugLog('Component unmounting', {\r\n         hasAttemptedLoad,\r\n         error,\r\n         isLoading\r\n       });\r\n"
                },
                {
                    "date": 1739216182345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,8 +155,59 @@\n   const timestamp = new Date().toISOString();\r\n   console.log(`[${timestamp}] [LessonPage] ${message}`, data ? data : '');\r\n };\r\n \r\n+// Add these utility functions at the top of the file\r\n+const getInstanceData = (searchParams: URLSearchParams) => {\r\n+  return {\r\n+    instanceId: searchParams.get('instanceId'),\r\n+    stateKey: searchParams.get('stateKey'),\r\n+    authStateKey: searchParams.get('authStateKey')\r\n+  };\r\n+};\r\n+\r\n+const restoreAuthState = async (authStateKey: string | null): Promise<boolean> => {\r\n+  if (!authStateKey) {\r\n+    forceLog('[Auth] No auth state key provided', null, 'error');\r\n+    return false;\r\n+  }\r\n+\r\n+  try {\r\n+    const storedAuth = localStorage.getItem(authStateKey);\r\n+    if (!storedAuth) {\r\n+      forceLog('[Auth] No stored auth state found', { authStateKey }, 'error');\r\n+      return false;\r\n+    }\r\n+\r\n+    const authState = JSON.parse(storedAuth);\r\n+    forceLog('[Auth] Restoring auth state', { \r\n+      instanceId: authState.instanceId,\r\n+      timestamp: authState.timestamp\r\n+    });\r\n+\r\n+    // Set the session\r\n+    const { data, error } = await supabase.auth.setSession({\r\n+      access_token: authState.session.access_token,\r\n+      refresh_token: authState.session.refresh_token\r\n+    });\r\n+\r\n+    if (error) {\r\n+      forceLog('[Auth] Failed to restore session', error, 'error');\r\n+      return false;\r\n+    }\r\n+\r\n+    forceLog('[Auth] Session restored successfully', {\r\n+      userId: data.session?.user.id,\r\n+      expiresAt: data.session?.expires_at\r\n+    });\r\n+\r\n+    return true;\r\n+  } catch (error) {\r\n+    forceLog('[Auth] Error restoring auth state', error, 'error');\r\n+    return false;\r\n+  }\r\n+};\r\n+\r\n export default function LessonPage() {\r\n   forceLog('LessonPage component mounted', { timestamp: new Date().toISOString() });\r\n   \r\n   const params = useParams<RouteParams>();\r\n@@ -354,152 +405,54 @@\n   // Update the initialization effect\r\n   useEffect(() => {\r\n     let isMounted = true;\r\n     let initAttempted = false;\r\n-    let authRetries = 0;\r\n-    let authCheckInterval: NodeJS.Timeout;\r\n     \r\n     const initializeLessonPage = async () => {\r\n-      if (initAttempted) {\r\n-        debugLog('Initialization already attempted, skipping');\r\n-        return;\r\n-      }\r\n-      \r\n+      if (initAttempted) return;\r\n       initAttempted = true;\r\n-      debugLog('Starting lesson page initialization', {\r\n-        url: window.location.href,\r\n-        params: {\r\n-          lessonId: params?.lessonId,\r\n-          topicId: searchParams.get('topicId'),\r\n-          subtopicId: searchParams.get('subtopicId'),\r\n-          sessionId: searchParams.get('sessionId')\r\n-        }\r\n-      });\r\n \r\n       try {\r\n-        // First try to restore auth state\r\n-        const storedAuth = localStorage.getItem('lesson_auth_state');\r\n-        if (storedAuth) {\r\n-          const authData = JSON.parse(storedAuth);\r\n-          debugLog('Found stored auth state', {\r\n-            timestamp: authData.timestamp,\r\n-            hasSession: !!authData.session,\r\n-            expiresAt: authData.expiresAt\r\n-          });\r\n-\r\n-          if (authData.session) {\r\n-            try {\r\n-              const { data, error } = await supabase.auth.setSession({\r\n-                access_token: authData.accessToken,\r\n-                refresh_token: authData.refreshToken\r\n-              });\r\n-              \r\n-              if (error) throw error;\r\n-              debugLog('Successfully restored auth session');\r\n-            } catch (authError) {\r\n-              debugLog('Failed to restore auth session', authError);\r\n-              throw new Error('Authentication failed');\r\n-            }\r\n-          }\r\n+        forceLog('[Init] Starting initialization');\r\n+        \r\n+        // Get instance data from URL\r\n+        const { instanceId, stateKey, authStateKey } = getInstanceData(searchParams);\r\n+        \r\n+        if (!instanceId || !stateKey || !authStateKey) {\r\n+          throw new Error('Missing required instance parameters');\r\n         }\r\n \r\n-        // Start auth check interval\r\n-        authCheckInterval = setInterval(async () => {\r\n-          const { data: { session } } = await supabase.auth.getSession();\r\n-          debugLog('Auth check', {\r\n-            hasSession: !!session,\r\n-            expiresAt: session?.expires_at\r\n-          });\r\n-        }, AUTH_CHECK_INTERVAL);\r\n-\r\n-        const lessonId = params?.lessonId;\r\n-        const topicId = searchParams.get('topicId');\r\n-        const subtopicId = searchParams.get('subtopicId');\r\n-        const timestamp = searchParams.get('ts');\r\n-\r\n-        forceLog('[Init] URL Parameters:', { \r\n-          lessonId, \r\n-          topicId, \r\n-          subtopicId,\r\n-          timestamp,\r\n-          fullUrl: window.location.href,\r\n-          referrer: document.referrer\r\n-        });\r\n-\r\n-        // First try to get state from localStorage\r\n-        const stateKey = `lesson_state_${lessonId}`;\r\n-        const savedState = localStorage.getItem(stateKey);\r\n-        \r\n-        if (savedState) {\r\n-          try {\r\n-            const parsedState = JSON.parse(savedState);\r\n-            forceLog('[Init] Found saved state:', {\r\n-              state: parsedState,\r\n-              stateTimestamp: parsedState.timestamp,\r\n-              currentTimestamp: new Date().toISOString()\r\n-            });\r\n-            \r\n-            if (parsedState.lesson && parsedState.topic && parsedState.subtopic) {\r\n-              if (!isMounted) {\r\n-                forceLog('[Init] Component unmounted before state could be set', null, 'warn');\r\n-                return;\r\n-              }\r\n-              setLessonState(parsedState);\r\n-              setHasAttemptedLoad(true);\r\n-              setIsLoading(false);\r\n-              forceLog('[Init] Successfully loaded state from localStorage');\r\n-              return;\r\n-            }\r\n-          } catch (e) {\r\n-            forceLog('[Init] Error parsing saved state:', e, 'warn');\r\n-          }\r\n-        } else {\r\n-          forceLog('[Init] No saved state found in localStorage', { stateKey }, 'warn');\r\n+        // First restore auth state\r\n+        const authRestored = await restoreAuthState(authStateKey);\r\n+        if (!authRestored) {\r\n+          throw new Error('Failed to restore authentication state');\r\n         }\r\n \r\n-        // Verify authentication before proceeding\r\n-        const { data: { session } } = await supabase.auth.getSession();\r\n-        if (!session) {\r\n-          throw new Error('No authenticated session found');\r\n+        // Then get lesson state\r\n+        const storedState = localStorage.getItem(stateKey);\r\n+        if (!storedState) {\r\n+          throw new Error('No lesson state found');\r\n         }\r\n \r\n-        // If no valid state in localStorage, validate URL parameters\r\n-        if (!isValidString(lessonId) || !isValidString(topicId) || !isValidString(subtopicId)) {\r\n-          const missingParams = [\r\n-            !isValidString(lessonId) && 'lessonId',\r\n-            !isValidString(topicId) && 'topicId',\r\n-            !isValidString(subtopicId) && 'subtopicId'\r\n-          ].filter(Boolean);\r\n-          \r\n-          forceLog('[Init] Missing required parameters:', { missingParams }, 'error');\r\n-          throw new Error(`Missing required parameters: ${missingParams.join(', ')}`);\r\n+        const state = JSON.parse(storedState);\r\n+        if (state.instanceId !== instanceId) {\r\n+          throw new Error('Instance ID mismatch');\r\n         }\r\n \r\n-        // Fetch the lesson data\r\n-        forceLog('[Init] Fetching lesson data from API...');\r\n-        const lessonData = await fetchLessonData(lessonId, topicId, subtopicId);\r\n+        if (!isMounted) return;\r\n         \r\n-        if (!isMounted) {\r\n-          forceLog('[Init] Component unmounted during fetch, aborting state updates', null, 'warn');\r\n-          return;\r\n-        }\r\n-\r\n-        // Set the lesson state\r\n-        forceLog('[Init] Setting lesson state:', lessonData);\r\n-        setLessonState(lessonData);\r\n+        setLessonState(state);\r\n+        setIsLoading(false);\r\n         setHasAttemptedLoad(true);\r\n-        setIsLoading(false);\r\n-        forceLog('[Init] Initialization complete');\r\n+        \r\n+        forceLog('[Init] Initialization complete', { instanceId });\r\n \r\n       } catch (error) {\r\n-        debugLog('Error in initialization', error);\r\n+        forceLog('[Init] Initialization failed', error, 'error');\r\n         if (isMounted) {\r\n-          const errorMessage = error instanceof Error ? error.message : 'Failed to load lesson';\r\n-          setError(errorMessage);\r\n+          setError(error instanceof Error ? error.message : 'Failed to initialize lesson');\r\n           setIsLoading(false);\r\n           setHasAttemptedLoad(true);\r\n-          \r\n-          debugLog('Error state set, will redirect in 2 seconds');\r\n         }\r\n       }\r\n     };\r\n \r\n@@ -508,18 +461,10 @@\n     }\r\n \r\n     return () => {\r\n       isMounted = false;\r\n-      if (authCheckInterval) {\r\n-        clearInterval(authCheckInterval);\r\n-      }\r\n-      debugLog('Component unmounting', {\r\n-        hasAttemptedLoad,\r\n-        error,\r\n-        isLoading\r\n-      });\r\n     };\r\n-  }, [params?.lessonId, searchParams]);\r\n+  }, [searchParams]);\r\n \r\n   // Only navigate away if there's an error and we're not loading\r\n   useEffect(() => {\r\n     let navigationTimer: NodeJS.Timeout;\r\n"
                },
                {
                    "date": 1739216473119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,8 +183,16 @@\n       instanceId: authState.instanceId,\r\n       timestamp: authState.timestamp\r\n     });\r\n \r\n+    // First try to get current session\r\n+    const { data: { session: currentSession } } = await supabase.auth.getSession();\r\n+    \r\n+    if (currentSession?.access_token === authState.session.access_token) {\r\n+      forceLog('[Auth] Session already active and matching');\r\n+      return true;\r\n+    }\r\n+\r\n     // Set the session\r\n     const { data, error } = await supabase.auth.setSession({\r\n       access_token: authState.session.access_token,\r\n       refresh_token: authState.session.refresh_token\r\n@@ -199,15 +207,85 @@\n       userId: data.session?.user.id,\r\n       expiresAt: data.session?.expires_at\r\n     });\r\n \r\n+    // Add message listener for parent window communication\r\n+    window.addEventListener('message', (event) => {\r\n+      if (event.data.type === 'AUTH_STATE') {\r\n+        forceLog('[Auth] Received auth state from parent');\r\n+        const newAuthState = event.data.payload;\r\n+        localStorage.setItem(authStateKey, JSON.stringify(newAuthState));\r\n+      }\r\n+    });\r\n+\r\n+    // Notify parent window we're ready\r\n+    window.opener?.postMessage({ type: 'LESSON_WINDOW_READY' }, '*');\r\n+\r\n     return true;\r\n   } catch (error) {\r\n-    forceLog('[Auth] Error restoring auth state', error, 'error');\r\n+    forceLog('[Auth] Error initializing auth', error, 'error');\r\n     return false;\r\n   }\r\n };\r\n \r\n+// Add this function at the top of the lesson page component\r\n+const initializeAuth = async (authStateKey: string): Promise<boolean> => {\r\n+  try {\r\n+    const storedAuth = localStorage.getItem(authStateKey);\r\n+    if (!storedAuth) {\r\n+      forceLog('[Auth] No stored auth state found', { authStateKey }, 'error');\r\n+      return false;\r\n+    }\r\n+\r\n+    const authState = JSON.parse(storedAuth);\r\n+    forceLog('[Auth] Restoring auth state', { \r\n+      instanceId: authState.instanceId,\r\n+      timestamp: authState.timestamp\r\n+    });\r\n+\r\n+    // First try to get current session\r\n+    const { data: { session: currentSession } } = await supabase.auth.getSession();\r\n+    \r\n+    if (currentSession?.access_token === authState.session.access_token) {\r\n+      forceLog('[Auth] Session already active and matching');\r\n+      return true;\r\n+    }\r\n+\r\n+    // Set the session\r\n+    const { data, error } = await supabase.auth.setSession({\r\n+      access_token: authState.session.access_token,\r\n+      refresh_token: authState.session.refresh_token\r\n+    });\r\n+\r\n+    if (error) {\r\n+      forceLog('[Auth] Failed to restore session', error, 'error');\r\n+      return false;\r\n+    }\r\n+\r\n+    forceLog('[Auth] Session restored successfully', {\r\n+      userId: data.session?.user.id,\r\n+      expiresAt: data.session?.expires_at\r\n+    });\r\n+\r\n+    // Add message listener for parent window communication\r\n+    window.addEventListener('message', (event) => {\r\n+      if (event.data.type === 'AUTH_STATE') {\r\n+        forceLog('[Auth] Received auth state from parent');\r\n+        const newAuthState = event.data.payload;\r\n+        localStorage.setItem(authStateKey, JSON.stringify(newAuthState));\r\n+      }\r\n+    });\r\n+\r\n+    // Notify parent window we're ready\r\n+    window.opener?.postMessage({ type: 'LESSON_WINDOW_READY' }, '*');\r\n+\r\n+    return true;\r\n+  } catch (error) {\r\n+    forceLog('[Auth] Error initializing auth', error, 'error');\r\n+    return false;\r\n+  }\r\n+};\r\n+\r\n export default function LessonPage() {\r\n   forceLog('LessonPage component mounted', { timestamp: new Date().toISOString() });\r\n   \r\n   const params = useParams<RouteParams>();\r\n@@ -420,12 +498,12 @@\n         if (!instanceId || !stateKey || !authStateKey) {\r\n           throw new Error('Missing required instance parameters');\r\n         }\r\n \r\n-        // First restore auth state\r\n-        const authRestored = await restoreAuthState(authStateKey);\r\n-        if (!authRestored) {\r\n-          throw new Error('Failed to restore authentication state');\r\n+        // Initialize auth first\r\n+        const authInitialized = await initializeAuth(authStateKey);\r\n+        if (!authInitialized) {\r\n+          throw new Error('Failed to initialize authentication');\r\n         }\r\n \r\n         // Then get lesson state\r\n         const storedState = localStorage.getItem(stateKey);\r\n"
                },
                {
                    "date": 1739309560565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -591,8 +591,100 @@\n         return <HelpCircle className=\"h-4 w-4\" />;\r\n     }\r\n   };\r\n \r\n+  const handleStartLessonFromDialog = async (e: React.MouseEvent) => {\r\n+    e.preventDefault();\r\n+    \r\n+    if (!selectedLessonInDialog?.id) {\r\n+        logger.error('No lesson selected for dialog', {\r\n+            source: 'LearningPathTeacher',\r\n+            context: {\r\n+                selectedLessonInDialog: null,\r\n+                selectedTopic: selectedTopic?.title,\r\n+                selectedSubtopic: selectedSubtopic?.title\r\n+            }\r\n+        });\r\n+        return;\r\n+    }\r\n+\r\n+    try {\r\n+        // Get current auth session first\r\n+        const { data: { session }, error: sessionError } = await supabase.auth.getSession();\r\n+        \r\n+        logger.info('Starting lesson in dialog - Session check', {\r\n+            source: 'LearningPathTeacher',\r\n+            context: { \r\n+                hasSession: !!session,\r\n+                sessionError: sessionError?.message,\r\n+                userId: session?.user?.id,\r\n+                lessonId: selectedLessonInDialog.id\r\n+            }\r\n+        });\r\n+\r\n+        if (sessionError || !session) {\r\n+            throw new Error(sessionError?.message || 'No active session found');\r\n+        }\r\n+\r\n+        // Store lesson state with enhanced context\r\n+        const lessonState = {\r\n+            lesson: selectedLessonInDialog,\r\n+            topic: selectedTopic,\r\n+            subtopic: selectedSubtopic,\r\n+            timestamp: new Date().toISOString(),\r\n+            userId: session.user.id,\r\n+            role: session.user.user_metadata?.role,\r\n+            windowId: 'lesson_dialog',\r\n+            isDialog: true\r\n+        };\r\n+        \r\n+        // Store in both sessionStorage and localStorage for redundancy\r\n+        sessionStorage.setItem(`lesson_state_${selectedLessonInDialog.id}`, JSON.stringify(lessonState));\r\n+        localStorage.setItem(`lesson_state_backup_${selectedLessonInDialog.id}`, JSON.stringify(lessonState));\r\n+        \r\n+        logger.info('Lesson state stored', {\r\n+            source: 'LearningPathTeacher',\r\n+            context: { \r\n+                lessonId: selectedLessonInDialog.id,\r\n+                topicId: selectedTopic?.id,\r\n+                subtopicId: selectedSubtopic?.id,\r\n+                stateStored: true\r\n+            }\r\n+        });\r\n+\r\n+        // Close the selection dialog and open the lesson dialog\r\n+        setDialogOpen(false);\r\n+        setCurrentLessonId(selectedLessonInDialog.id);\r\n+        setIsLessonDialogOpen(true);\r\n+\r\n+        logger.info('Opening lesson in dialog', {\r\n+            source: 'LearningPathTeacher',\r\n+            context: { \r\n+                lessonId: selectedLessonInDialog.id,\r\n+                topicId: selectedTopic?.id,\r\n+                subtopicId: selectedSubtopic?.id,\r\n+                dialogState: {\r\n+                    selectionDialogOpen: false,\r\n+                    lessonDialogOpen: true,\r\n+                    currentLessonId: selectedLessonInDialog.id\r\n+                }\r\n+            }\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        logger.error('Failed to start lesson in dialog', {\r\n+            source: 'LearningPathTeacher',\r\n+            context: { \r\n+                error,\r\n+                lessonId: selectedLessonInDialog.id,\r\n+                topicId: selectedTopic?.id,\r\n+                subtopicId: selectedSubtopic?.id\r\n+            }\r\n+        });\r\n+        alert(error instanceof Error ? error.message : 'Failed to start lesson');\r\n+    }\r\n+};\r\n+\r\n   if (isLoading) {\r\n     forceLog('Rendering loading state');\r\n     return (\r\n       <div className=\"flex items-center justify-center min-h-screen\">\r\n"
                },
                {
                    "date": 1739309590307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -591,100 +591,8 @@\n         return <HelpCircle className=\"h-4 w-4\" />;\r\n     }\r\n   };\r\n \r\n-  const handleStartLessonFromDialog = async (e: React.MouseEvent) => {\r\n-    e.preventDefault();\r\n-    \r\n-    if (!selectedLessonInDialog?.id) {\r\n-        logger.error('No lesson selected for dialog', {\r\n-            source: 'LearningPathTeacher',\r\n-            context: {\r\n-                selectedLessonInDialog: null,\r\n-                selectedTopic: selectedTopic?.title,\r\n-                selectedSubtopic: selectedSubtopic?.title\r\n-            }\r\n-        });\r\n-        return;\r\n-    }\r\n-\r\n-    try {\r\n-        // Get current auth session first\r\n-        const { data: { session }, error: sessionError } = await supabase.auth.getSession();\r\n-        \r\n-        logger.info('Starting lesson in dialog - Session check', {\r\n-            source: 'LearningPathTeacher',\r\n-            context: { \r\n-                hasSession: !!session,\r\n-                sessionError: sessionError?.message,\r\n-                userId: session?.user?.id,\r\n-                lessonId: selectedLessonInDialog.id\r\n-            }\r\n-        });\r\n-\r\n-        if (sessionError || !session) {\r\n-            throw new Error(sessionError?.message || 'No active session found');\r\n-        }\r\n-\r\n-        // Store lesson state with enhanced context\r\n-        const lessonState = {\r\n-            lesson: selectedLessonInDialog,\r\n-            topic: selectedTopic,\r\n-            subtopic: selectedSubtopic,\r\n-            timestamp: new Date().toISOString(),\r\n-            userId: session.user.id,\r\n-            role: session.user.user_metadata?.role,\r\n-            windowId: 'lesson_dialog',\r\n-            isDialog: true\r\n-        };\r\n-        \r\n-        // Store in both sessionStorage and localStorage for redundancy\r\n-        sessionStorage.setItem(`lesson_state_${selectedLessonInDialog.id}`, JSON.stringify(lessonState));\r\n-        localStorage.setItem(`lesson_state_backup_${selectedLessonInDialog.id}`, JSON.stringify(lessonState));\r\n-        \r\n-        logger.info('Lesson state stored', {\r\n-            source: 'LearningPathTeacher',\r\n-            context: { \r\n-                lessonId: selectedLessonInDialog.id,\r\n-                topicId: selectedTopic?.id,\r\n-                subtopicId: selectedSubtopic?.id,\r\n-                stateStored: true\r\n-            }\r\n-        });\r\n-\r\n-        // Close the selection dialog and open the lesson dialog\r\n-        setDialogOpen(false);\r\n-        setCurrentLessonId(selectedLessonInDialog.id);\r\n-        setIsLessonDialogOpen(true);\r\n-\r\n-        logger.info('Opening lesson in dialog', {\r\n-            source: 'LearningPathTeacher',\r\n-            context: { \r\n-                lessonId: selectedLessonInDialog.id,\r\n-                topicId: selectedTopic?.id,\r\n-                subtopicId: selectedSubtopic?.id,\r\n-                dialogState: {\r\n-                    selectionDialogOpen: false,\r\n-                    lessonDialogOpen: true,\r\n-                    currentLessonId: selectedLessonInDialog.id\r\n-                }\r\n-            }\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        logger.error('Failed to start lesson in dialog', {\r\n-            source: 'LearningPathTeacher',\r\n-            context: { \r\n-                error,\r\n-                lessonId: selectedLessonInDialog.id,\r\n-                topicId: selectedTopic?.id,\r\n-                subtopicId: selectedSubtopic?.id\r\n-            }\r\n-        });\r\n-        alert(error instanceof Error ? error.message : 'Failed to start lesson');\r\n-    }\r\n-};\r\n-\r\n   if (isLoading) {\r\n     forceLog('Rendering loading state');\r\n     return (\r\n       <div className=\"flex items-center justify-center min-h-screen\">\r\n"
                },
                {
                    "date": 1739310005346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -319,8 +319,10 @@\n   const [hasAttemptedLoad, setHasAttemptedLoad] = useState(false);\r\n   const [isFullscreen, setIsFullscreen] = useState(false);\r\n   const [error, setError] = useState<string | null>(null);\r\n   const [navigationAttempted, setNavigationAttempted] = useState(false);\r\n+  const [isLessonDialogOpen, setIsLessonDialogOpen] = useState(false);\r\n+  const [currentLessonId, setCurrentLessonId] = useState<string | null>(null);\r\n \r\n   // Function to handle entering fullscreen\r\n   const enterFullscreen = async () => {\r\n     try {\r\n@@ -591,8 +593,32 @@\n         return <HelpCircle className=\"h-4 w-4\" />;\r\n     }\r\n   };\r\n \r\n+  useEffect(() => {\r\n+    return () => {\r\n+        // Cleanup function\r\n+        forceLog('Cleaning up lesson dialog state', {\r\n+            source: 'LearningPathTeacher',\r\n+            context: {\r\n+                wasDialogOpen: isLessonDialogOpen,\r\n+                currentLessonId,\r\n+                timestamp: new Date().toISOString()\r\n+            }\r\n+        });\r\n+        \r\n+        // Preserve state in sessionStorage before cleanup\r\n+        if (currentLessonId) {\r\n+            const state = {\r\n+                lessonId: currentLessonId,\r\n+                dialogOpen: isLessonDialogOpen,\r\n+                timestamp: new Date().toISOString()\r\n+            };\r\n+            sessionStorage.setItem('lesson_dialog_state', JSON.stringify(state));\r\n+        }\r\n+    };\r\n+  }, [isLessonDialogOpen, currentLessonId]);\r\n+\r\n   if (isLoading) {\r\n     forceLog('Rendering loading state');\r\n     return (\r\n       <div className=\"flex items-center justify-center min-h-screen\">\r\n"
                },
                {
                    "date": 1739310043315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -617,8 +617,35 @@\n         }\r\n     };\r\n   }, [isLessonDialogOpen, currentLessonId]);\r\n \r\n+  useEffect(() => {\r\n+    // Try to recover dialog state on mount\r\n+    const savedState = sessionStorage.getItem('lesson_dialog_state');\r\n+    if (savedState) {\r\n+        try {\r\n+            const state = JSON.parse(savedState);\r\n+            forceLog('Recovering lesson dialog state', {\r\n+                source: 'LearningPathTeacher',\r\n+                context: {\r\n+                    savedState: state,\r\n+                    timestamp: new Date().toISOString()\r\n+                }\r\n+            });\r\n+            \r\n+            if (state.dialogOpen && state.lessonId) {\r\n+                setCurrentLessonId(state.lessonId);\r\n+                setIsLessonDialogOpen(true);\r\n+            }\r\n+        } catch (error) {\r\n+            forceLog('Failed to recover lesson dialog state', {\r\n+                source: 'LearningPathTeacher',\r\n+                context: { error }\r\n+            });\r\n+        }\r\n+    }\r\n+  }, []);\r\n+\r\n   if (isLoading) {\r\n     forceLog('Rendering loading state');\r\n     return (\r\n       <div className=\"flex items-center justify-center min-h-screen\">\r\n"
                },
                {
                    "date": 1739310070425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n \"use client\";\r\n \r\n-import { useEffect, useState } from \"react\";\r\n+import { useEffect, useState, useCallback } from \"react\";\r\n import { useParams, useSearchParams, useNavigate, useLocation } from \"react-router-dom\";\r\n import { motion, AnimatePresence } from \"framer-motion\";\r\n import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\n import { Button } from \"@/components/ui/button\";\r\n@@ -644,8 +644,29 @@\n         }\r\n     }\r\n   }, []);\r\n \r\n+  const getLessonUrl = useCallback((lessonId: string) => {\r\n+    const baseUrl = window.location.origin;\r\n+    const url = new URL(`${baseUrl}/app/teacher/lessons/${lessonId}`);\r\n+    \r\n+    // Add any necessary query parameters\r\n+    url.searchParams.set('dialog', 'true');\r\n+    url.searchParams.set('timestamp', Date.now().toString());\r\n+    \r\n+    forceLog('Constructed lesson URL', {\r\n+        source: 'LearningPathTeacher',\r\n+        context: {\r\n+            lessonId,\r\n+            url: url.toString(),\r\n+            baseUrl,\r\n+            timestamp: new Date().toISOString()\r\n+        }\r\n+    });\r\n+    \r\n+    return url.toString();\r\n+  }, []);\r\n+\r\n   if (isLoading) {\r\n     forceLog('Rendering loading state');\r\n     return (\r\n       <div className=\"flex items-center justify-center min-h-screen\">\r\n"
                },
                {
                    "date": 1739311162618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -284,8 +284,23 @@\n     return false;\r\n   }\r\n };\r\n \r\n+// Let's add a more robust logging utility at the top of the file\r\n+const createLogger = (component: string) => ({\r\n+  info: (message: string, data?: any) => {\r\n+    forceLog(`[${component}] ${message}`, data, 'info');\r\n+  },\r\n+  error: (message: string, error?: any) => {\r\n+    forceLog(`[${component}] ${message}`, error, 'error');\r\n+  },\r\n+  warn: (message: string, data?: any) => {\r\n+    forceLog(`[${component}] ${message}`, data, 'warn');\r\n+  }\r\n+});\r\n+\r\n+const logger = createLogger('LessonPage');\r\n+\r\n export default function LessonPage() {\r\n   forceLog('LessonPage component mounted', { timestamp: new Date().toISOString() });\r\n   \r\n   const params = useParams<RouteParams>();\r\n"
                },
                {
                    "date": 1739311181549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -410,90 +410,87 @@\n     lessonId: string,\r\n     topicId: string,\r\n     subtopicId: string\r\n   ): Promise<LessonState> => {\r\n+    logger.info('Initiating lesson data fetch', { lessonId, topicId, subtopicId });\r\n+    \r\n     try {\r\n-      forceLog('Fetching lesson data:', { lessonId, topicId, subtopicId });\r\n-\r\n-      // First check if we have state in localStorage\r\n+      // Check localStorage first\r\n       const stateKey = `lesson_state_${lessonId}`;\r\n       const savedState = localStorage.getItem(stateKey);\r\n       \r\n       if (savedState) {\r\n         try {\r\n           const parsedState = JSON.parse(savedState);\r\n-          forceLog('Found saved state in localStorage', parsedState);\r\n-          if (parsedState.lesson && parsedState.topic && parsedState.subtopic) {\r\n-            return parsedState;\r\n-          }\r\n+          logger.info('Found cached lesson state', { stateKey });\r\n+          return parsedState;\r\n         } catch (e) {\r\n-          forceLog('Error parsing saved state', e, 'error');\r\n+          logger.warn('Failed to parse cached lesson state', e);\r\n         }\r\n       }\r\n \r\n-      // If no valid state in localStorage, fetch from API\r\n-      const { data: lessonData, error: lessonError } = await supabase\r\n-        .from('lessons')\r\n-        .select(`\r\n-          *,\r\n-          questions (\r\n+      // Fetch lesson data with detailed logging\r\n+      const startTime = performance.now();\r\n+      \r\n+      const [lessonResult, topicResult, subtopicResult] = await Promise.all([\r\n+        supabase\r\n+          .from('lessons')\r\n+          .select(`\r\n             *,\r\n-            metadata,\r\n-            data\r\n-          ),\r\n-          activities (*),\r\n-          exercise_prompts (*)\r\n-        `)\r\n-        .eq('id', lessonId)\r\n-        .single();\r\n+            questions (\r\n+              *,\r\n+              metadata,\r\n+              data\r\n+            ),\r\n+            activities (*),\r\n+            exercise_prompts (*)\r\n+          `)\r\n+          .eq('id', lessonId)\r\n+          .single(),\r\n+          \r\n+        supabase\r\n+          .from('topics')\r\n+          .select('id, title')\r\n+          .eq('id', topicId)\r\n+          .single(),\r\n+          \r\n+        supabase\r\n+          .from('subtopics')\r\n+          .select('id, title')\r\n+          .eq('id', subtopicId)\r\n+          .single()\r\n+      ]);\r\n \r\n-      if (lessonError) {\r\n-        forceLog('Error fetching lesson:', lessonError, 'error');\r\n-        throw lessonError;\r\n-      }\r\n+      const endTime = performance.now();\r\n+      logger.info('Database queries completed', {\r\n+        duration: `${(endTime - startTime).toFixed(2)}ms`,\r\n+        lessonDataSize: JSON.stringify(lessonResult.data).length,\r\n+        success: !lessonResult.error && !topicResult.error && !subtopicResult.error\r\n+      });\r\n \r\n-      // Fetch topic data\r\n-      const { data: topicData, error: topicError } = await supabase\r\n-        .from('topics')\r\n-        .select('id, title')\r\n-        .eq('id', topicId)\r\n-        .single();\r\n+      // Validate responses\r\n+      if (lessonResult.error) throw new Error(`Lesson fetch failed: ${lessonResult.error.message}`);\r\n+      if (topicResult.error) throw new Error(`Topic fetch failed: ${topicResult.error.message}`);\r\n+      if (subtopicResult.error) throw new Error(`Subtopic fetch failed: ${subtopicResult.error.message}`);\r\n \r\n-      if (topicError) {\r\n-        forceLog('Error fetching topic:', topicError, 'error');\r\n-        throw topicError;\r\n-      }\r\n-\r\n-      // Fetch subtopic data\r\n-      const { data: subtopicData, error: subtopicError } = await supabase\r\n-        .from('subtopics')\r\n-        .select('id, title')\r\n-        .eq('id', subtopicId)\r\n-        .single();\r\n-\r\n-      if (subtopicError) {\r\n-        forceLog('Error fetching subtopic:', subtopicError, 'error');\r\n-        throw subtopicError;\r\n-      }\r\n-\r\n       const fullState: LessonState = {\r\n         lesson: {\r\n-          ...lessonData,\r\n-          questions: lessonData.questions || [],\r\n-          activities: lessonData.activities || [],\r\n-          exercise_prompts: lessonData.exercise_prompts || []\r\n+          ...lessonResult.data,\r\n+          questions: lessonResult.data.questions || [],\r\n+          activities: lessonResult.data.activities || [],\r\n+          exercise_prompts: lessonResult.data.exercise_prompts || []\r\n         },\r\n-        topic: topicData,\r\n-        subtopic: subtopicData\r\n+        topic: topicResult.data,\r\n+        subtopic: subtopicResult.data\r\n       };\r\n \r\n-      // Save the state to localStorage\r\n+      // Cache the result\r\n       localStorage.setItem(stateKey, JSON.stringify(fullState));\r\n-      forceLog('Successfully fetched and saved all data:', fullState);\r\n-      \r\n+      logger.info('Lesson data cached successfully', { stateKey });\r\n+\r\n       return fullState;\r\n     } catch (error) {\r\n-      forceLog('Error in fetchLessonData:', error, 'error');\r\n+      logger.error('Failed to fetch lesson data', error);\r\n       throw error;\r\n     }\r\n   };\r\n \r\n"
                },
                {
                    "date": 1739311225337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -496,53 +496,59 @@\n \r\n   // Update the initialization effect\r\n   useEffect(() => {\r\n     let isMounted = true;\r\n-    let initAttempted = false;\r\n+    const pageLogger = createLogger('LessonPage:Init');\r\n     \r\n     const initializeLessonPage = async () => {\r\n-      if (initAttempted) return;\r\n-      initAttempted = true;\r\n+      if (!params?.lessonId) {\r\n+        pageLogger.error('Missing lessonId parameter');\r\n+        setError('Invalid lesson ID');\r\n+        return;\r\n+      }\r\n \r\n       try {\r\n-        forceLog('[Init] Starting initialization');\r\n-        \r\n-        // Get instance data from URL\r\n-        const { instanceId, stateKey, authStateKey } = getInstanceData(searchParams);\r\n-        \r\n-        if (!instanceId || !stateKey || !authStateKey) {\r\n-          throw new Error('Missing required instance parameters');\r\n+        pageLogger.info('Starting page initialization', {\r\n+          params,\r\n+          searchParams: Object.fromEntries(searchParams.entries())\r\n+        });\r\n+\r\n+        setIsLoading(true);\r\n+\r\n+        // Validate URL parameters\r\n+        const urlValidation = validateUrl(params, searchParams);\r\n+        if (!urlValidation.isValid) {\r\n+          throw new Error(`Missing required parameters: ${urlValidation.missingParams.join(', ')}`);\r\n         }\r\n \r\n-        // Initialize auth first\r\n-        const authInitialized = await initializeAuth(authStateKey);\r\n+        // Initialize auth\r\n+        const authInitialized = await initializeAuth(searchParams.get('authStateKey') || '');\r\n         if (!authInitialized) {\r\n-          throw new Error('Failed to initialize authentication');\r\n+          throw new Error('Authentication initialization failed');\r\n         }\r\n \r\n-        // Then get lesson state\r\n-        const storedState = localStorage.getItem(stateKey);\r\n-        if (!storedState) {\r\n-          throw new Error('No lesson state found');\r\n-        }\r\n+        // Fetch lesson data\r\n+        const lessonData = await fetchLessonData(\r\n+          params.lessonId,\r\n+          searchParams.get('topicId') || '',\r\n+          searchParams.get('subtopicId') || ''\r\n+        );\r\n \r\n-        const state = JSON.parse(storedState);\r\n-        if (state.instanceId !== instanceId) {\r\n-          throw new Error('Instance ID mismatch');\r\n-        }\r\n-\r\n         if (!isMounted) return;\r\n-        \r\n-        setLessonState(state);\r\n-        setIsLoading(false);\r\n-        setHasAttemptedLoad(true);\r\n-        \r\n-        forceLog('[Init] Initialization complete', { instanceId });\r\n \r\n+        setLessonState(lessonData);\r\n+        pageLogger.info('Page initialization complete', {\r\n+          lessonId: lessonData.lesson.id,\r\n+          questionCount: lessonData.lesson.questions.length\r\n+        });\r\n+\r\n       } catch (error) {\r\n-        forceLog('[Init] Initialization failed', error, 'error');\r\n+        pageLogger.error('Page initialization failed', error);\r\n         if (isMounted) {\r\n           setError(error instanceof Error ? error.message : 'Failed to initialize lesson');\r\n+        }\r\n+      } finally {\r\n+        if (isMounted) {\r\n           setIsLoading(false);\r\n           setHasAttemptedLoad(true);\r\n         }\r\n       }\r\n@@ -553,10 +559,11 @@\n     }\r\n \r\n     return () => {\r\n       isMounted = false;\r\n+      pageLogger.info('Cleanup: Component unmounting');\r\n     };\r\n-  }, [searchParams]);\r\n+  }, [params?.lessonId, searchParams, hasAttemptedLoad]);\r\n \r\n   // Only navigate away if there's an error and we're not loading\r\n   useEffect(() => {\r\n     let navigationTimer: NodeJS.Timeout;\r\n"
                },
                {
                    "date": 1739312539190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,968 +1,986 @@\n-\"use client\";\r\n-\r\n-import { useEffect, useState, useCallback } from \"react\";\r\n-import { useParams, useSearchParams, useNavigate, useLocation } from \"react-router-dom\";\r\n-import { motion, AnimatePresence } from \"framer-motion\";\r\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\n-import { Button } from \"@/components/ui/button\";\r\n-import { Progress } from \"@/components/ui/progress\";\r\n-import { Badge } from \"@/components/ui/badge\";\r\n-import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\r\n-import { ArrowLeft, BookOpen, CheckCircle2, Clock, Flag, HelpCircle, Layout, List, Play, Settings, Star, X, Mic, PenTool, FileText } from \"lucide-react\";\r\n-import { cn } from \"@/lib/utils\";\r\n-import { supabase } from \"@/lib/supabase\";\r\n-import { Question, Activity, ExercisePrompt } from \"@/types\";\r\n-import { useAuth } from '@/hooks/useAuth';\r\n-import LessonErrorBoundary from '@/components/LessonErrorBoundary';\r\n-\r\n-// Enhanced debug configuration\r\n-const DEBUG = true;\r\n-const LOG_TO_STORAGE = true;\r\n-const STORAGE_KEY = 'lessonPageDebugLogs';\r\n-\r\n-// Global error handler\r\n-window.onerror = function(msg, url, lineNo, columnNo, error) {\r\n-  console.log('Global error: ', { msg, url, lineNo, columnNo, error });\r\n-  return false;\r\n-};\r\n-\r\n-// Window load handler\r\n-window.onload = function() {\r\n-  console.log('Window loaded - Lesson page');\r\n-  console.log('Current URL:', window.location.href);\r\n-  console.log('Local Storage:', Object.keys(localStorage));\r\n-};\r\n-\r\n-// Enhanced logging utility\r\n-const forceLog = (message: string, data?: any, type: 'info' | 'warn' | 'error' = 'info') => {\r\n-  if (!DEBUG) return;\r\n-  \r\n-  const timestamp = new Date().toISOString();\r\n-  const logEntry = {\r\n-    timestamp,\r\n-    message,\r\n-    data,\r\n-    type,\r\n-    url: window.location.href,\r\n-    pathname: window.location.pathname,\r\n-    search: window.location.search\r\n-  };\r\n-  \r\n-  // Console logging with visual distinction\r\n-  const styles = {\r\n-    info: 'color: #4CAF50; font-weight: bold;',\r\n-    warn: 'color: #FFC107; font-weight: bold;',\r\n-    error: 'color: #F44336; font-weight: bold;'\r\n-  };\r\n-  \r\n-  console.log(`%c[${timestamp}] ${message}`, styles[type]);\r\n-  if (data) {\r\n-    console.log('Data:', data);\r\n-    if (typeof data === 'object') {\r\n-      console.table(data);\r\n-    }\r\n-  }\r\n-  \r\n-  // Backup to localStorage\r\n-  if (LOG_TO_STORAGE) {\r\n-    try {\r\n-      const logs = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');\r\n-      logs.push(logEntry);\r\n-      localStorage.setItem(STORAGE_KEY, JSON.stringify(logs.slice(-100))); // Keep last 100 logs\r\n-    } catch (e) {\r\n-      console.warn('Failed to save log to localStorage:', e);\r\n-    }\r\n-  }\r\n-};\r\n-\r\n-interface LessonState {\r\n-  lesson: {\r\n-    id: string;\r\n-    name: string;\r\n-    title: string;\r\n-    content?: string;\r\n-    description?: string;\r\n-    topic_id?: string;\r\n-    subtopic_id?: string;\r\n-    questions: Array<{\r\n-      id: string;\r\n-      title: string;\r\n-      content: string;\r\n-      type: string;\r\n-      data: {\r\n-        prompt?: string;\r\n-        teacherScript?: string;\r\n-        options?: string[];\r\n-      };\r\n-      metadata?: {\r\n-        sampleAnswer?: string;\r\n-        correct?: string[];\r\n-        options?: string[];\r\n-      };\r\n-      points: number;\r\n-    }>;\r\n-    activities: Activity[];\r\n-    exercise_prompts: ExercisePrompt[];\r\n-  };\r\n-  topic: {\r\n-    id: string;\r\n-    title: string;\r\n-  };\r\n-  subtopic: {\r\n-    id: string;\r\n-    title: string;\r\n-  };\r\n-}\r\n-\r\n-// Add URL validation helper\r\n-const validateUrl = (params: any, searchParams: URLSearchParams) => {\r\n-  const validation = {\r\n-    topicId: searchParams.get('topicId'),\r\n-    subtopicId: searchParams.get('subtopicId'),\r\n-    lessonId: params?.lessonId,\r\n-    isValid: false,\r\n-    missingParams: [] as string[]\r\n-  };\r\n-\r\n-  if (!validation.lessonId) validation.missingParams.push('lessonId');\r\n-  if (!validation.topicId) validation.missingParams.push('topicId');\r\n-  if (!validation.subtopicId) validation.missingParams.push('subtopicId');\r\n-\r\n-  validation.isValid = validation.missingParams.length === 0;\r\n-  return validation;\r\n-};\r\n-\r\n-// Add this type guard function\r\n-const isValidString = (value: any): value is string => {\r\n-  return typeof value === 'string' && value.length > 0;\r\n-};\r\n-\r\n-// Update the RouteParams interface\r\n-interface RouteParams {\r\n-  [key: string]: string | undefined;\r\n-  lessonId?: string;\r\n-}\r\n-\r\n-const MAX_AUTH_RETRIES = 3;\r\n-const AUTH_RETRY_DELAY = 1000;\r\n-\r\n-const DEBUG_MODE = true;\r\n-const AUTH_CHECK_INTERVAL = 1000; // 1 second\r\n-\r\n-// Add this function at the top level\r\n-const debugLog = (message: string, data?: any) => {\r\n-  if (!DEBUG_MODE) return;\r\n-  const timestamp = new Date().toISOString();\r\n-  console.log(`[${timestamp}] [LessonPage] ${message}`, data ? data : '');\r\n-};\r\n-\r\n-// Add these utility functions at the top of the file\r\n-const getInstanceData = (searchParams: URLSearchParams) => {\r\n-  return {\r\n-    instanceId: searchParams.get('instanceId'),\r\n-    stateKey: searchParams.get('stateKey'),\r\n-    authStateKey: searchParams.get('authStateKey')\r\n-  };\r\n-};\r\n-\r\n-const restoreAuthState = async (authStateKey: string | null): Promise<boolean> => {\r\n-  if (!authStateKey) {\r\n-    forceLog('[Auth] No auth state key provided', null, 'error');\r\n-    return false;\r\n-  }\r\n-\r\n-  try {\r\n-    const storedAuth = localStorage.getItem(authStateKey);\r\n-    if (!storedAuth) {\r\n-      forceLog('[Auth] No stored auth state found', { authStateKey }, 'error');\r\n-      return false;\r\n-    }\r\n-\r\n-    const authState = JSON.parse(storedAuth);\r\n-    forceLog('[Auth] Restoring auth state', { \r\n-      instanceId: authState.instanceId,\r\n-      timestamp: authState.timestamp\r\n-    });\r\n-\r\n-    // First try to get current session\r\n-    const { data: { session: currentSession } } = await supabase.auth.getSession();\r\n-    \r\n-    if (currentSession?.access_token === authState.session.access_token) {\r\n-      forceLog('[Auth] Session already active and matching');\r\n-      return true;\r\n-    }\r\n-\r\n-    // Set the session\r\n-    const { data, error } = await supabase.auth.setSession({\r\n-      access_token: authState.session.access_token,\r\n-      refresh_token: authState.session.refresh_token\r\n-    });\r\n-\r\n-    if (error) {\r\n-      forceLog('[Auth] Failed to restore session', error, 'error');\r\n-      return false;\r\n-    }\r\n-\r\n-    forceLog('[Auth] Session restored successfully', {\r\n-      userId: data.session?.user.id,\r\n-      expiresAt: data.session?.expires_at\r\n-    });\r\n-\r\n-    // Add message listener for parent window communication\r\n-    window.addEventListener('message', (event) => {\r\n-      if (event.data.type === 'AUTH_STATE') {\r\n-        forceLog('[Auth] Received auth state from parent');\r\n-        const newAuthState = event.data.payload;\r\n-        localStorage.setItem(authStateKey, JSON.stringify(newAuthState));\r\n-      }\r\n-    });\r\n-\r\n-    // Notify parent window we're ready\r\n-    window.opener?.postMessage({ type: 'LESSON_WINDOW_READY' }, '*');\r\n-\r\n-    return true;\r\n-  } catch (error) {\r\n-    forceLog('[Auth] Error initializing auth', error, 'error');\r\n-    return false;\r\n-  }\r\n-};\r\n-\r\n-// Add this function at the top of the lesson page component\r\n-const initializeAuth = async (authStateKey: string): Promise<boolean> => {\r\n-  try {\r\n-    const storedAuth = localStorage.getItem(authStateKey);\r\n-    if (!storedAuth) {\r\n-      forceLog('[Auth] No stored auth state found', { authStateKey }, 'error');\r\n-      return false;\r\n-    }\r\n-\r\n-    const authState = JSON.parse(storedAuth);\r\n-    forceLog('[Auth] Restoring auth state', { \r\n-      instanceId: authState.instanceId,\r\n-      timestamp: authState.timestamp\r\n-    });\r\n-\r\n-    // First try to get current session\r\n-    const { data: { session: currentSession } } = await supabase.auth.getSession();\r\n-    \r\n-    if (currentSession?.access_token === authState.session.access_token) {\r\n-      forceLog('[Auth] Session already active and matching');\r\n-      return true;\r\n-    }\r\n-\r\n-    // Set the session\r\n-    const { data, error } = await supabase.auth.setSession({\r\n-      access_token: authState.session.access_token,\r\n-      refresh_token: authState.session.refresh_token\r\n-    });\r\n-\r\n-    if (error) {\r\n-      forceLog('[Auth] Failed to restore session', error, 'error');\r\n-      return false;\r\n-    }\r\n-\r\n-    forceLog('[Auth] Session restored successfully', {\r\n-      userId: data.session?.user.id,\r\n-      expiresAt: data.session?.expires_at\r\n-    });\r\n-\r\n-    // Add message listener for parent window communication\r\n-    window.addEventListener('message', (event) => {\r\n-      if (event.data.type === 'AUTH_STATE') {\r\n-        forceLog('[Auth] Received auth state from parent');\r\n-        const newAuthState = event.data.payload;\r\n-        localStorage.setItem(authStateKey, JSON.stringify(newAuthState));\r\n-      }\r\n-    });\r\n-\r\n-    // Notify parent window we're ready\r\n-    window.opener?.postMessage({ type: 'LESSON_WINDOW_READY' }, '*');\r\n-\r\n-    return true;\r\n-  } catch (error) {\r\n-    forceLog('[Auth] Error initializing auth', error, 'error');\r\n-    return false;\r\n-  }\r\n-};\r\n-\r\n-// Let's add a more robust logging utility at the top of the file\r\n-const createLogger = (component: string) => ({\r\n-  info: (message: string, data?: any) => {\r\n-    forceLog(`[${component}] ${message}`, data, 'info');\r\n-  },\r\n-  error: (message: string, error?: any) => {\r\n-    forceLog(`[${component}] ${message}`, error, 'error');\r\n-  },\r\n-  warn: (message: string, data?: any) => {\r\n-    forceLog(`[${component}] ${message}`, data, 'warn');\r\n-  }\r\n-});\r\n-\r\n-const logger = createLogger('LessonPage');\r\n-\r\n-export default function LessonPage() {\r\n-  forceLog('LessonPage component mounted', { timestamp: new Date().toISOString() });\r\n-  \r\n-  const params = useParams<RouteParams>();\r\n-  const location = useLocation();\r\n-  const navigate = useNavigate();\r\n-  const searchParams = new URLSearchParams(window.location.search);\r\n-  \r\n-  // Enhanced URL validation and logging\r\n-  const urlValidation = validateUrl(params, searchParams);\r\n-  forceLog('URL Validation Result:', urlValidation, urlValidation.isValid ? 'info' : 'error');\r\n-  \r\n-  forceLog('Route information:', { \r\n-    params, \r\n-    pathname: location.pathname, \r\n-    search: location.search,\r\n-    fullUrl: window.location.href,\r\n-    lessonId: params?.lessonId,\r\n-    topicId: searchParams.get('topicId'),\r\n-    subtopicId: searchParams.get('subtopicId'),\r\n-    rawSearch: window.location.search,\r\n-    hash: window.location.hash,\r\n-    origin: window.location.origin,\r\n-    localStorage: Object.keys(localStorage)\r\n-  });\r\n-\r\n-  const [lessonState, setLessonState] = useState<LessonState | null>(null);\r\n-  const [currentStep, setCurrentStep] = useState(0);\r\n-  const [progress, setProgress] = useState(0);\r\n-  const [isLoading, setIsLoading] = useState(true);\r\n-  const [activeTab, setActiveTab] = useState(\"overview\");\r\n-  const [hasAttemptedLoad, setHasAttemptedLoad] = useState(false);\r\n-  const [isFullscreen, setIsFullscreen] = useState(false);\r\n-  const [error, setError] = useState<string | null>(null);\r\n-  const [navigationAttempted, setNavigationAttempted] = useState(false);\r\n-  const [isLessonDialogOpen, setIsLessonDialogOpen] = useState(false);\r\n-  const [currentLessonId, setCurrentLessonId] = useState<string | null>(null);\r\n-\r\n-  // Function to handle entering fullscreen\r\n-  const enterFullscreen = async () => {\r\n-    try {\r\n-      const element = document.documentElement;\r\n-      if (element.requestFullscreen) {\r\n-        // Only attempt fullscreen if we're in a user gesture context\r\n-        // and the document is not already in fullscreen mode\r\n-        if (!document.fullscreenElement) {\r\n-          // Add a try-catch specifically for the requestFullscreen call\r\n-          try {\r\n-            await element.requestFullscreen();\r\n-            forceLog('Entered fullscreen mode successfully');\r\n-            setIsFullscreen(true);\r\n-          } catch (err) {\r\n-            forceLog('Fullscreen request failed (non-critical):', err, 'warn');\r\n-            // Non-critical error, we can continue without fullscreen\r\n-          }\r\n-        }\r\n-      } else {\r\n-        forceLog('Fullscreen API not supported', null, 'warn');\r\n-      }\r\n-    } catch (error) {\r\n-      // Log but don't throw - fullscreen is not critical for functionality\r\n-      forceLog('Error in enterFullscreen:', error, 'warn');\r\n-    }\r\n-  };\r\n-\r\n-  // Function to handle exiting fullscreen\r\n-  const exitFullscreen = async () => {\r\n-    try {\r\n-      if (document.fullscreenElement && document.exitFullscreen) {\r\n-        await document.exitFullscreen();\r\n-      }\r\n-    } catch (error) {\r\n-      console.error('Exit fullscreen error:', error);\r\n-    }\r\n-  };\r\n-\r\n-  // Function to handle navigation back to lessons page\r\n-  const navigateToLessons = async () => {\r\n-    try {\r\n-      if (navigationAttempted) {\r\n-        forceLog('Navigation already attempted, preventing duplicate');\r\n-        return;\r\n-      }\r\n-      \r\n-      setNavigationAttempted(true);\r\n-      forceLog('Attempting navigation to lessons page');\r\n-      \r\n-      await exitFullscreen();\r\n-      \r\n-      // Small delay to ensure logs are visible\r\n-      await new Promise(resolve => setTimeout(resolve, 1000));\r\n-      \r\n-      // Close the window instead of navigating\r\n-      window.close();\r\n-      \r\n-      // Fallback if window.close() doesn't work\r\n-      if (!window.closed) {\r\n-        window.location.href = '/app/teacher/lessons';\r\n-      }\r\n-    } catch (error) {\r\n-      forceLog('Navigation error:', error);\r\n-      setError('Failed to navigate back to lessons page');\r\n-    }\r\n-  };\r\n-\r\n-  // Update the fetchLessonData function\r\n-  const fetchLessonData = async (\r\n-    lessonId: string,\r\n-    topicId: string,\r\n-    subtopicId: string\r\n-  ): Promise<LessonState> => {\r\n-    logger.info('Initiating lesson data fetch', { lessonId, topicId, subtopicId });\r\n-    \r\n-    try {\r\n-      // Check localStorage first\r\n-      const stateKey = `lesson_state_${lessonId}`;\r\n-      const savedState = localStorage.getItem(stateKey);\r\n-      \r\n-      if (savedState) {\r\n-        try {\r\n-          const parsedState = JSON.parse(savedState);\r\n-          logger.info('Found cached lesson state', { stateKey });\r\n-          return parsedState;\r\n-        } catch (e) {\r\n-          logger.warn('Failed to parse cached lesson state', e);\r\n-        }\r\n-      }\r\n-\r\n-      // Fetch lesson data with detailed logging\r\n-      const startTime = performance.now();\r\n-      \r\n-      const [lessonResult, topicResult, subtopicResult] = await Promise.all([\r\n-        supabase\r\n-          .from('lessons')\r\n-          .select(`\r\n-            *,\r\n-            questions (\r\n-              *,\r\n-              metadata,\r\n-              data\r\n-            ),\r\n-            activities (*),\r\n-            exercise_prompts (*)\r\n-          `)\r\n-          .eq('id', lessonId)\r\n-          .single(),\r\n-          \r\n-        supabase\r\n-          .from('topics')\r\n-          .select('id, title')\r\n-          .eq('id', topicId)\r\n-          .single(),\r\n-          \r\n-        supabase\r\n-          .from('subtopics')\r\n-          .select('id, title')\r\n-          .eq('id', subtopicId)\r\n-          .single()\r\n-      ]);\r\n-\r\n-      const endTime = performance.now();\r\n-      logger.info('Database queries completed', {\r\n-        duration: `${(endTime - startTime).toFixed(2)}ms`,\r\n-        lessonDataSize: JSON.stringify(lessonResult.data).length,\r\n-        success: !lessonResult.error && !topicResult.error && !subtopicResult.error\r\n-      });\r\n-\r\n-      // Validate responses\r\n-      if (lessonResult.error) throw new Error(`Lesson fetch failed: ${lessonResult.error.message}`);\r\n-      if (topicResult.error) throw new Error(`Topic fetch failed: ${topicResult.error.message}`);\r\n-      if (subtopicResult.error) throw new Error(`Subtopic fetch failed: ${subtopicResult.error.message}`);\r\n-\r\n-      const fullState: LessonState = {\r\n-        lesson: {\r\n-          ...lessonResult.data,\r\n-          questions: lessonResult.data.questions || [],\r\n-          activities: lessonResult.data.activities || [],\r\n-          exercise_prompts: lessonResult.data.exercise_prompts || []\r\n-        },\r\n-        topic: topicResult.data,\r\n-        subtopic: subtopicResult.data\r\n-      };\r\n-\r\n-      // Cache the result\r\n-      localStorage.setItem(stateKey, JSON.stringify(fullState));\r\n-      logger.info('Lesson data cached successfully', { stateKey });\r\n-\r\n-      return fullState;\r\n-    } catch (error) {\r\n-      logger.error('Failed to fetch lesson data', error);\r\n-      throw error;\r\n-    }\r\n-  };\r\n-\r\n-  // Update the initialization effect\r\n-  useEffect(() => {\r\n-    let isMounted = true;\r\n-    const pageLogger = createLogger('LessonPage:Init');\r\n-    \r\n-    const initializeLessonPage = async () => {\r\n-      if (!params?.lessonId) {\r\n-        pageLogger.error('Missing lessonId parameter');\r\n-        setError('Invalid lesson ID');\r\n-        return;\r\n-      }\r\n-\r\n-      try {\r\n-        pageLogger.info('Starting page initialization', {\r\n-          params,\r\n-          searchParams: Object.fromEntries(searchParams.entries())\r\n-        });\r\n-\r\n-        setIsLoading(true);\r\n-\r\n-        // Validate URL parameters\r\n-        const urlValidation = validateUrl(params, searchParams);\r\n-        if (!urlValidation.isValid) {\r\n-          throw new Error(`Missing required parameters: ${urlValidation.missingParams.join(', ')}`);\r\n-        }\r\n-\r\n-        // Initialize auth\r\n-        const authInitialized = await initializeAuth(searchParams.get('authStateKey') || '');\r\n-        if (!authInitialized) {\r\n-          throw new Error('Authentication initialization failed');\r\n-        }\r\n-\r\n-        // Fetch lesson data\r\n-        const lessonData = await fetchLessonData(\r\n-          params.lessonId,\r\n-          searchParams.get('topicId') || '',\r\n-          searchParams.get('subtopicId') || ''\r\n-        );\r\n-\r\n-        if (!isMounted) return;\r\n-\r\n-        setLessonState(lessonData);\r\n-        pageLogger.info('Page initialization complete', {\r\n-          lessonId: lessonData.lesson.id,\r\n-          questionCount: lessonData.lesson.questions.length\r\n-        });\r\n-\r\n-      } catch (error) {\r\n-        pageLogger.error('Page initialization failed', error);\r\n-        if (isMounted) {\r\n-          setError(error instanceof Error ? error.message : 'Failed to initialize lesson');\r\n-        }\r\n-      } finally {\r\n-        if (isMounted) {\r\n-          setIsLoading(false);\r\n-          setHasAttemptedLoad(true);\r\n-        }\r\n-      }\r\n-    };\r\n-\r\n-    if (!hasAttemptedLoad) {\r\n-      initializeLessonPage();\r\n-    }\r\n-\r\n-    return () => {\r\n-      isMounted = false;\r\n-      pageLogger.info('Cleanup: Component unmounting');\r\n-    };\r\n-  }, [params?.lessonId, searchParams, hasAttemptedLoad]);\r\n-\r\n-  // Only navigate away if there's an error and we're not loading\r\n-  useEffect(() => {\r\n-    let navigationTimer: NodeJS.Timeout;\r\n-    \r\n-    if (error && !isLoading && hasAttemptedLoad && !navigationAttempted) {\r\n-      forceLog('Error detected, preparing to navigate:', error);\r\n-      navigationTimer = setTimeout(() => {\r\n-        forceLog('Executing delayed navigation due to error');\r\n-        navigateToLessons();\r\n-      }, 2000); // Give more time for logs to be visible\r\n-    }\r\n-    \r\n-    return () => {\r\n-      if (navigationTimer) {\r\n-        clearTimeout(navigationTimer);\r\n-      }\r\n-    };\r\n-  }, [error, isLoading, hasAttemptedLoad, navigationAttempted]);\r\n-\r\n-  const handleEndLesson = async () => {\r\n-    forceLog('End lesson requested');\r\n-    const confirmed = window.confirm('Are you sure you want to end this lesson?');\r\n-    if (confirmed) {\r\n-      forceLog('End lesson confirmed');\r\n-      // Clean up localStorage before navigating\r\n-      if (params?.lessonId) {\r\n-        const storageKey = `lesson_state_${params.lessonId}`;\r\n-        forceLog('Removing stored state:', storageKey);\r\n-        localStorage.removeItem(storageKey);\r\n-      }\r\n-      await navigateToLessons();\r\n-    } else {\r\n-      forceLog('End lesson cancelled');\r\n-    }\r\n-  };\r\n-\r\n-  const getQuestionIcon = (type: string) => {\r\n-    switch (type) {\r\n-      case 'speaking':\r\n-        return <Mic className=\"h-4 w-4\" />;\r\n-      case 'multiplechoice':\r\n-        return <PenTool className=\"h-4 w-4\" />;\r\n-      case 'fill_blanks':\r\n-        return <FileText className=\"h-4 w-4\" />;\r\n-      default:\r\n-        return <HelpCircle className=\"h-4 w-4\" />;\r\n-    }\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    return () => {\r\n-        // Cleanup function\r\n-        forceLog('Cleaning up lesson dialog state', {\r\n-            source: 'LearningPathTeacher',\r\n-            context: {\r\n-                wasDialogOpen: isLessonDialogOpen,\r\n-                currentLessonId,\r\n-                timestamp: new Date().toISOString()\r\n-            }\r\n-        });\r\n-        \r\n-        // Preserve state in sessionStorage before cleanup\r\n-        if (currentLessonId) {\r\n-            const state = {\r\n-                lessonId: currentLessonId,\r\n-                dialogOpen: isLessonDialogOpen,\r\n-                timestamp: new Date().toISOString()\r\n-            };\r\n-            sessionStorage.setItem('lesson_dialog_state', JSON.stringify(state));\r\n-        }\r\n-    };\r\n-  }, [isLessonDialogOpen, currentLessonId]);\r\n-\r\n-  useEffect(() => {\r\n-    // Try to recover dialog state on mount\r\n-    const savedState = sessionStorage.getItem('lesson_dialog_state');\r\n-    if (savedState) {\r\n-        try {\r\n-            const state = JSON.parse(savedState);\r\n-            forceLog('Recovering lesson dialog state', {\r\n-                source: 'LearningPathTeacher',\r\n-                context: {\r\n-                    savedState: state,\r\n-                    timestamp: new Date().toISOString()\r\n-                }\r\n-            });\r\n-            \r\n-            if (state.dialogOpen && state.lessonId) {\r\n-                setCurrentLessonId(state.lessonId);\r\n-                setIsLessonDialogOpen(true);\r\n-            }\r\n-        } catch (error) {\r\n-            forceLog('Failed to recover lesson dialog state', {\r\n-                source: 'LearningPathTeacher',\r\n-                context: { error }\r\n-            });\r\n-        }\r\n-    }\r\n-  }, []);\r\n-\r\n-  const getLessonUrl = useCallback((lessonId: string) => {\r\n-    const baseUrl = window.location.origin;\r\n-    const url = new URL(`${baseUrl}/app/teacher/lessons/${lessonId}`);\r\n-    \r\n-    // Add any necessary query parameters\r\n-    url.searchParams.set('dialog', 'true');\r\n-    url.searchParams.set('timestamp', Date.now().toString());\r\n-    \r\n-    forceLog('Constructed lesson URL', {\r\n-        source: 'LearningPathTeacher',\r\n-        context: {\r\n-            lessonId,\r\n-            url: url.toString(),\r\n-            baseUrl,\r\n-            timestamp: new Date().toISOString()\r\n-        }\r\n-    });\r\n-    \r\n-    return url.toString();\r\n-  }, []);\r\n-\r\n-  if (isLoading) {\r\n-    forceLog('Rendering loading state');\r\n-    return (\r\n-      <div className=\"flex items-center justify-center min-h-screen\">\r\n-        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\r\n-      </div>\r\n-    );\r\n-  }\r\n-\r\n-  if (!lessonState) {\r\n-    forceLog('Rendering error state - no lesson state found');\r\n-    return (\r\n-      <div className=\"flex items-center justify-center min-h-screen\">\r\n-        <Card className=\"p-6\">\r\n-          <CardTitle className=\"text-xl mb-4\">Lesson not found</CardTitle>\r\n-          <Button onClick={() => navigateToLessons()}>Go Back</Button>\r\n-        </Card>\r\n-      </div>\r\n-    );\r\n-  }\r\n-\r\n-  forceLog('Rendering lesson page with state:', {\r\n-    currentStep,\r\n-    totalSteps: lessonState.lesson.questions.length,\r\n-    progress\r\n-  });\r\n-\r\n-  const totalSteps = lessonState.lesson.questions.length;\r\n-  const currentQuestion = lessonState.lesson.questions[currentStep];\r\n-\r\n-  return (\r\n-    <LessonErrorBoundary>\r\n-      <div className=\"min-h-screen bg-gradient-to-b from-background to-accent/20\">\r\n-        {/* Top Navigation Bar */}\r\n-        <nav className=\"fixed top-0 left-0 right-0 z-50 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b\">\r\n-          <div className=\"flex items-center justify-between p-4\">\r\n-            <div className=\"flex items-center gap-4\">\r\n-              <Button\r\n-                variant=\"ghost\"\r\n-                size=\"icon\"\r\n-                onClick={handleEndLesson}\r\n-                className=\"hover:bg-accent\"\r\n-              >\r\n-                <X className=\"h-5 w-5\" />\r\n-              </Button>\r\n-              <div>\r\n-                <h1 className=\"text-lg font-semibold\">{lessonState.lesson.title}</h1>\r\n-                <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\r\n-                  <span>{lessonState.topic.title}</span>\r\n-                  <span>•</span>\r\n-                  <span>{lessonState.subtopic.title}</span>\r\n-                </div>\r\n-              </div>\r\n-            </div>\r\n-            <div className=\"flex items-center gap-4\">\r\n-              <Progress \r\n-                value={(currentStep / totalSteps) * 100} \r\n-                className=\"w-40\"\r\n-              />\r\n-              <Button \r\n-                variant=\"outline\" \r\n-                onClick={enterFullscreen}\r\n-                className=\"mr-2\"\r\n-              >\r\n-                Fullscreen\r\n-              </Button>\r\n-              <Button variant=\"outline\" onClick={handleEndLesson}>\r\n-                End Lesson\r\n-              </Button>\r\n-            </div>\r\n-          </div>\r\n-        </nav>\r\n-\r\n-        {/* Main Content */}\r\n-        <main className=\"pt-24 pb-8 px-4 md:px-8 max-w-7xl mx-auto\">\r\n-          <div className=\"grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-8\">\r\n-            {/* Sidebar */}\r\n-            <div className=\"lg:block\">\r\n-              <Card className=\"sticky top-24\">\r\n-                <CardHeader>\r\n-                  <CardTitle className=\"text-lg flex items-center gap-2\">\r\n-                    <List className=\"h-5 w-5\" />\r\n-                    Lesson Overview\r\n-                  </CardTitle>\r\n-                </CardHeader>\r\n-                <CardContent>\r\n-                  <div className=\"space-y-4\">\r\n-                    <div className=\"flex items-center gap-2 text-sm\">\r\n-                      <Clock className=\"h-4 w-4 text-primary\" />\r\n-                      <span>{lessonState.lesson.questions.length * 2} minutes</span>\r\n-                    </div>\r\n-                    <div className=\"flex items-center gap-2 text-sm\">\r\n-                      <HelpCircle className=\"h-4 w-4 text-primary\" />\r\n-                      <span>{lessonState.lesson.questions.length} Questions</span>\r\n-                    </div>\r\n-                    <div className=\"flex items-center gap-2 text-sm\">\r\n-                      <Layout className=\"h-4 w-4 text-primary\" />\r\n-                      <span>{lessonState.lesson.activities?.length || 0} Activities</span>\r\n-                    </div>\r\n-                    \r\n-                    <div className=\"border-t pt-4 mt-4\">\r\n-                      <h3 className=\"font-medium mb-3\">Questions</h3>\r\n-                      <div className=\"space-y-3\">\r\n-                        {lessonState.lesson.questions.map((question, index) => (\r\n-                          <motion.div\r\n-                            key={index}\r\n-                            initial={{ opacity: 0, x: -20 }}\r\n-                            animate={{ opacity: 1, x: 0 }}\r\n-                            transition={{ delay: index * 0.1 }}\r\n-                            className={cn(\r\n-                              \"flex items-center gap-2 p-2 rounded-md transition-all duration-200\",\r\n-                              currentStep === index ? \"bg-accent shadow-sm\" : \"hover:bg-accent/50\",\r\n-                              index < currentStep && \"text-primary\"\r\n-                            )}\r\n-                            onClick={() => setCurrentStep(index)}\r\n-                            style={{ cursor: 'pointer' }}\r\n-                          >\r\n-                            {index < currentStep ? (\r\n-                              <CheckCircle2 className=\"h-4 w-4\" />\r\n-                            ) : (\r\n-                              <div className={cn(\r\n-                                \"h-4 w-4 rounded-full border\",\r\n-                                currentStep === index && \"border-primary\"\r\n-                              )} />\r\n-                            )}\r\n-                            <span className=\"text-sm\">Question {index + 1}</span>\r\n-                            {getQuestionIcon(question.type)}\r\n-                          </motion.div>\r\n-                        ))}\r\n-                      </div>\r\n-                    </div>\r\n-                  </div>\r\n-                </CardContent>\r\n-              </Card>\r\n-            </div>\r\n-\r\n-            {/* Main Content Area */}\r\n-            <div className=\"space-y-8\">\r\n-              <Tabs defaultValue=\"question\" className=\"w-full\">\r\n-                <TabsList className=\"mb-4\">\r\n-                  <TabsTrigger value=\"question\">Question</TabsTrigger>\r\n-                  <TabsTrigger value=\"teacherScript\">Teacher Script</TabsTrigger>\r\n-                  <TabsTrigger value=\"activities\">Activities</TabsTrigger>\r\n-                </TabsList>\r\n-\r\n-                <AnimatePresence mode=\"wait\">\r\n-                  <motion.div\r\n-                    key={currentStep}\r\n-                    initial={{ opacity: 0, y: 20 }}\r\n-                    animate={{ opacity: 1, y: 0 }}\r\n-                    exit={{ opacity: 0, y: -20 }}\r\n-                    transition={{ duration: 0.3 }}\r\n-                  >\r\n-                    <TabsContent value=\"question\">\r\n-                      <Card>\r\n-                        <CardHeader>\r\n-                          <div className=\"flex items-center justify-between\">\r\n-                            <Badge variant=\"outline\" className=\"bg-primary/5\">\r\n-                              Question {currentStep + 1} of {totalSteps}\r\n-                            </Badge>\r\n-                            <div className=\"flex items-center gap-2\">\r\n-                              <Star className=\"h-4 w-4 text-yellow-500\" />\r\n-                              <span className=\"text-sm\">{currentQuestion.points} Points</span>\r\n-                            </div>\r\n-                          </div>\r\n-                          <CardTitle className=\"text-2xl mt-4\">\r\n-                            {currentQuestion.title || \"Question\"}\r\n-                          </CardTitle>\r\n-                        </CardHeader>\r\n-                        <CardContent className=\"space-y-6\">\r\n-                          <div className=\"prose prose-sm dark:prose-invert max-w-none\">\r\n-                            <div className=\"bg-accent/50 p-4 rounded-lg\">\r\n-                              <h3 className=\"text-lg font-semibold mb-2\">Prompt</h3>\r\n-                              <p>{currentQuestion.data.prompt || currentQuestion.content}</p>\r\n-                            </div>\r\n-\r\n-                            {currentQuestion.type === 'multiplechoice' && currentQuestion.metadata?.options && (\r\n-                              <div className=\"mt-6 space-y-4\">\r\n-                                {currentQuestion.metadata.options.map((option, idx) => (\r\n-                                  <Button\r\n-                                    key={idx}\r\n-                                    variant=\"outline\"\r\n-                                    className=\"w-full justify-start text-left\"\r\n-                                  >\r\n-                                    {option}\r\n-                                  </Button>\r\n-                                ))}\r\n-                              </div>\r\n-                            )}\r\n-\r\n-                            {currentQuestion.type === 'speaking' && (\r\n-                              <div className=\"mt-6\">\r\n-                                <Button className=\"w-full justify-center gap-2\">\r\n-                                  <Mic className=\"h-4 w-4\" />\r\n-                                  Start Recording\r\n-                                </Button>\r\n-                              </div>\r\n-                            )}\r\n-                          </div>\r\n-                        </CardContent>\r\n-                      </Card>\r\n-                    </TabsContent>\r\n-\r\n-                    <TabsContent value=\"teacherScript\">\r\n-                      <Card>\r\n-                        <CardContent className=\"p-6\">\r\n-                          <div className=\"prose prose-sm dark:prose-invert max-w-none\">\r\n-                            <h3 className=\"text-lg font-semibold mb-4\">Teacher Script</h3>\r\n-                            <div className=\"bg-accent/50 p-4 rounded-lg\">\r\n-                              {currentQuestion.data.teacherScript || \"No teacher script available.\"}\r\n-                            </div>\r\n-                          </div>\r\n-                        </CardContent>\r\n-                      </Card>\r\n-                    </TabsContent>\r\n-\r\n-                    <TabsContent value=\"activities\">\r\n-                      <Card>\r\n-                        <CardContent className=\"p-6\">\r\n-                          <div className=\"prose prose-sm dark:prose-invert max-w-none\">\r\n-                            <h3 className=\"text-lg font-semibold mb-4\">Activities</h3>\r\n-                            {lessonState.lesson.activities?.length > 0 ? (\r\n-                              <div className=\"space-y-4\">\r\n-                                {lessonState.lesson.activities.map((activity, idx) => (\r\n-                                  <div key={idx} className=\"bg-accent/50 p-4 rounded-lg\">\r\n-                                    <h4 className=\"font-medium\">{activity.title}</h4>\r\n-                                    <p>{activity.description}</p>\r\n-                                  </div>\r\n-                                ))}\r\n-                              </div>\r\n-                            ) : (\r\n-                              <p>No activities available for this lesson.</p>\r\n-                            )}\r\n-                          </div>\r\n-                        </CardContent>\r\n-                      </Card>\r\n-                    </TabsContent>\r\n-                  </motion.div>\r\n-                </AnimatePresence>\r\n-              </Tabs>\r\n-\r\n-              {/* Navigation Buttons */}\r\n-              <div className=\"flex items-center justify-between pt-4\">\r\n-                <Button\r\n-                  variant=\"outline\"\r\n-                  onClick={() => setCurrentStep(prev => Math.max(0, prev - 1))}\r\n-                  disabled={currentStep === 0}\r\n-                >\r\n-                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\r\n-                  Previous\r\n-                </Button>\r\n-                <Button\r\n-                  onClick={() => {\r\n-                    if (currentStep < totalSteps - 1) {\r\n-                      setCurrentStep(prev => prev + 1);\r\n-                      setProgress(prev => prev + (100 / totalSteps));\r\n-                    } else {\r\n-                      handleEndLesson();\r\n-                    }\r\n-                  }}\r\n-                >\r\n-                  {currentStep < totalSteps - 1 ? (\r\n-                    <>\r\n-                      Next\r\n-                      <ArrowLeft className=\"h-4 w-4 ml-2 rotate-180\" />\r\n-                    </>\r\n-                  ) : (\r\n-                    <>\r\n-                      Complete Lesson\r\n-                      <Flag className=\"h-4 w-4 ml-2\" />\r\n-                    </>\r\n-                  )}\r\n-                </Button>\r\n-              </div>\r\n-            </div>\r\n-          </div>\r\n-        </main>\r\n-      </div>\r\n-    </LessonErrorBoundary>\r\n-  );\r\n+\"use client\";\n+\n+import { useEffect, useState, useCallback } from \"react\";\n+import { useParams, useSearchParams, useNavigate, useLocation } from \"react-router-dom\";\n+import { motion, AnimatePresence } from \"framer-motion\";\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n+import { Button } from \"@/components/ui/button\";\n+import { Progress } from \"@/components/ui/progress\";\n+import { Badge } from \"@/components/ui/badge\";\n+import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n+import { ArrowLeft, BookOpen, CheckCircle2, Clock, Flag, HelpCircle, Layout, List, Play, Settings, Star, X, Mic, PenTool, FileText } from \"lucide-react\";\n+import { cn } from \"@/lib/utils\";\n+import { supabase } from \"@/lib/supabase\";\n+import { Question, Activity, ExercisePrompt } from \"@/types\";\n+import { useAuth } from '@/hooks/useAuth';\n+import LessonErrorBoundary from '@/components/LessonErrorBoundary';\n+\n+// Enhanced debug configuration\n+const DEBUG = true;\n+const LOG_TO_STORAGE = true;\n+const STORAGE_KEY = 'lessonPageDebugLogs';\n+\n+// Global error handler\n+window.onerror = function(msg, url, lineNo, columnNo, error) {\n+  console.log('Global error: ', { msg, url, lineNo, columnNo, error });\n+  return false;\n+};\n+\n+// Window load handler\n+window.onload = function() {\n+  console.log('Window loaded - Lesson page');\n+  console.log('Current URL:', window.location.href);\n+  console.log('Local Storage:', Object.keys(localStorage));\n+};\n+\n+// Enhanced logging utility\n+const forceLog = (message: string, data?: any, type: 'info' | 'warn' | 'error' = 'info') => {\n+  if (!DEBUG) return;\n+  \n+  const timestamp = new Date().toISOString();\n+  const logEntry = {\n+    timestamp,\n+    message,\n+    data,\n+    type,\n+    url: window.location.href,\n+    pathname: window.location.pathname,\n+    search: window.location.search\n+  };\n+  \n+  // Console logging with visual distinction\n+  const styles = {\n+    info: 'color: #4CAF50; font-weight: bold;',\n+    warn: 'color: #FFC107; font-weight: bold;',\n+    error: 'color: #F44336; font-weight: bold;'\n+  };\n+  \n+  console.log(`%c[${timestamp}] ${message}`, styles[type]);\n+  if (data) {\n+    console.log('Data:', data);\n+    if (typeof data === 'object') {\n+      console.table(data);\n+    }\n+  }\n+  \n+  // Backup to localStorage\n+  if (LOG_TO_STORAGE) {\n+    try {\n+      const logs = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');\n+      logs.push(logEntry);\n+      localStorage.setItem(STORAGE_KEY, JSON.stringify(logs.slice(-100))); // Keep last 100 logs\n+    } catch (e) {\n+      console.warn('Failed to save log to localStorage:', e);\n+    }\n+  }\n+};\n+\n+interface LessonState {\n+  lesson: {\n+    id: string;\n+    name: string;\n+    title: string;\n+    content?: string;\n+    description?: string;\n+    topic_id?: string;\n+    subtopic_id?: string;\n+    questions: Array<{\n+      id: string;\n+      title: string;\n+      content: string;\n+      type: string;\n+      data: {\n+        prompt?: string;\n+        teacherScript?: string;\n+        options?: string[];\n+      };\n+      metadata?: {\n+        sampleAnswer?: string;\n+        correct?: string[];\n+        options?: string[];\n+      };\n+      points: number;\n+    }>;\n+    activities: Activity[];\n+    exercise_prompts: ExercisePrompt[];\n+  };\n+  topic: {\n+    id: string;\n+    title: string;\n+  };\n+  subtopic: {\n+    id: string;\n+    title: string;\n+  };\n+}\n+\n+// Add URL validation helper\n+const validateUrl = (params: any, searchParams: URLSearchParams) => {\n+  const validation = {\n+    topicId: searchParams.get('topicId'),\n+    subtopicId: searchParams.get('subtopicId'),\n+    lessonId: params?.lessonId,\n+    isValid: false,\n+    missingParams: [] as string[]\n+  };\n+\n+  if (!validation.lessonId) validation.missingParams.push('lessonId');\n+  if (!validation.topicId) validation.missingParams.push('topicId');\n+  if (!validation.subtopicId) validation.missingParams.push('subtopicId');\n+\n+  validation.isValid = validation.missingParams.length === 0;\n+  return validation;\n+};\n+\n+// Add this type guard function\n+const isValidString = (value: any): value is string => {\n+  return typeof value === 'string' && value.length > 0;\n+};\n+\n+// Update the RouteParams interface\n+interface RouteParams {\n+  [key: string]: string | undefined;\n+  lessonId?: string;\n+}\n+\n+const MAX_AUTH_RETRIES = 3;\n+const AUTH_RETRY_DELAY = 1000;\n+\n+const DEBUG_MODE = true;\n+const AUTH_CHECK_INTERVAL = 1000; // 1 second\n+\n+// Add this function at the top level\n+const debugLog = (message: string, data?: any) => {\n+  if (!DEBUG_MODE) return;\n+  const timestamp = new Date().toISOString();\n+  console.log(`[${timestamp}] [LessonPage] ${message}`, data ? data : '');\n+};\n+\n+// Add these utility functions at the top of the file\n+const getInstanceData = (searchParams: URLSearchParams) => {\n+  return {\n+    instanceId: searchParams.get('instanceId'),\n+    stateKey: searchParams.get('stateKey'),\n+    authStateKey: searchParams.get('authStateKey')\n+  };\n+};\n+\n+const restoreAuthState = async (authStateKey: string | null): Promise<boolean> => {\n+  if (!authStateKey) {\n+    forceLog('[Auth] No auth state key provided', null, 'error');\n+    return false;\n+  }\n+\n+  try {\n+    const storedAuth = localStorage.getItem(authStateKey);\n+    if (!storedAuth) {\n+      forceLog('[Auth] No stored auth state found', { authStateKey }, 'error');\n+      return false;\n+    }\n+\n+    const authState = JSON.parse(storedAuth);\n+    forceLog('[Auth] Restoring auth state', { \n+      instanceId: authState.instanceId,\n+      timestamp: authState.timestamp\n+    });\n+\n+    // First try to get current session\n+    const { data: { session: currentSession } } = await supabase.auth.getSession();\n+    \n+    if (currentSession?.access_token === authState.session.access_token) {\n+      forceLog('[Auth] Session already active and matching');\n+      return true;\n+    }\n+\n+    // Set the session\n+    const { data, error } = await supabase.auth.setSession({\n+      access_token: authState.session.access_token,\n+      refresh_token: authState.session.refresh_token\n+    });\n+\n+    if (error) {\n+      forceLog('[Auth] Failed to restore session', error, 'error');\n+      return false;\n+    }\n+\n+    forceLog('[Auth] Session restored successfully', {\n+      userId: data.session?.user.id,\n+      expiresAt: data.session?.expires_at\n+    });\n+\n+    // Add message listener for parent window communication\n+    window.addEventListener('message', (event) => {\n+      if (event.data.type === 'AUTH_STATE') {\n+        forceLog('[Auth] Received auth state from parent');\n+        const newAuthState = event.data.payload;\n+        localStorage.setItem(authStateKey, JSON.stringify(newAuthState));\n+      }\n+    });\n+\n+    // Notify parent window we're ready\n+    window.opener?.postMessage({ type: 'LESSON_WINDOW_READY' }, '*');\n+\n+    return true;\n+  } catch (error) {\n+    forceLog('[Auth] Error initializing auth', error, 'error');\n+    return false;\n+  }\n+};\n+\n+// Add this function at the top of the lesson page component\n+const initializeAuth = async (authStateKey: string): Promise<boolean> => {\n+  try {\n+    const storedAuth = localStorage.getItem(authStateKey);\n+    if (!storedAuth) {\n+      forceLog('[Auth] No stored auth state found', { authStateKey }, 'error');\n+      return false;\n+    }\n+\n+    const authState = JSON.parse(storedAuth);\n+    forceLog('[Auth] Restoring auth state', { \n+      instanceId: authState.instanceId,\n+      timestamp: authState.timestamp\n+    });\n+\n+    // First try to get current session\n+    const { data: { session: currentSession } } = await supabase.auth.getSession();\n+    \n+    if (currentSession?.access_token === authState.session.access_token) {\n+      forceLog('[Auth] Session already active and matching');\n+      return true;\n+    }\n+\n+    // Set the session\n+    const { data, error } = await supabase.auth.setSession({\n+      access_token: authState.session.access_token,\n+      refresh_token: authState.session.refresh_token\n+    });\n+\n+    if (error) {\n+      forceLog('[Auth] Failed to restore session', error, 'error');\n+      return false;\n+    }\n+\n+    forceLog('[Auth] Session restored successfully', {\n+      userId: data.session?.user.id,\n+      expiresAt: data.session?.expires_at\n+    });\n+\n+    // Add message listener for parent window communication\n+    window.addEventListener('message', (event) => {\n+      if (event.data.type === 'AUTH_STATE') {\n+        forceLog('[Auth] Received auth state from parent');\n+        const newAuthState = event.data.payload;\n+        localStorage.setItem(authStateKey, JSON.stringify(newAuthState));\n+      }\n+    });\n+\n+    // Notify parent window we're ready\n+    window.opener?.postMessage({ type: 'LESSON_WINDOW_READY' }, '*');\n+\n+    return true;\n+  } catch (error) {\n+    forceLog('[Auth] Error initializing auth', error, 'error');\n+    return false;\n+  }\n+};\n+\n+// Let's add a more robust logging utility at the top of the file\n+const createLogger = (component: string) => ({\n+  info: (message: string, data?: any) => {\n+    forceLog(`[${component}] ${message}`, data, 'info');\n+  },\n+  error: (message: string, error?: any) => {\n+    forceLog(`[${component}] ${message}`, error, 'error');\n+  },\n+  warn: (message: string, data?: any) => {\n+    forceLog(`[${component}] ${message}`, data, 'warn');\n+  }\n+});\n+\n+const logger = createLogger('LessonPage');\n+\n+export default function LessonPage() {\n+  forceLog('LessonPage component mounted', { timestamp: new Date().toISOString() });\n+  \n+  const params = useParams<RouteParams>();\n+  const location = useLocation();\n+  const navigate = useNavigate();\n+  const searchParams = new URLSearchParams(window.location.search);\n+  \n+  // Enhanced URL validation and logging\n+  const urlValidation = validateUrl(params, searchParams);\n+  forceLog('URL Validation Result:', urlValidation, urlValidation.isValid ? 'info' : 'error');\n+  \n+  forceLog('Route information:', { \n+    params, \n+    pathname: location.pathname, \n+    search: location.search,\n+    fullUrl: window.location.href,\n+    lessonId: params?.lessonId,\n+    topicId: searchParams.get('topicId'),\n+    subtopicId: searchParams.get('subtopicId'),\n+    rawSearch: window.location.search,\n+    hash: window.location.hash,\n+    origin: window.location.origin,\n+    localStorage: Object.keys(localStorage)\n+  });\n+\n+  const [lessonState, setLessonState] = useState<LessonState | null>(null);\n+  const [currentStep, setCurrentStep] = useState(0);\n+  const [progress, setProgress] = useState(0);\n+  const [isLoading, setIsLoading] = useState(true);\n+  const [activeTab, setActiveTab] = useState(\"overview\");\n+  const [hasAttemptedLoad, setHasAttemptedLoad] = useState(false);\n+  const [isFullscreen, setIsFullscreen] = useState(false);\n+  const [error, setError] = useState<string | null>(null);\n+  const [navigationAttempted, setNavigationAttempted] = useState(false);\n+  const [isLessonDialogOpen, setIsLessonDialogOpen] = useState(false);\n+  const [currentLessonId, setCurrentLessonId] = useState<string | null>(null);\n+  const [performanceMetrics, setPerformanceMetrics] = useState({\n+    initializationTime: 0,\n+    dataLoadTime: 0,\n+    renderCount: 0\n+  });\n+\n+  // Function to handle entering fullscreen\n+  const enterFullscreen = async () => {\n+    try {\n+      const element = document.documentElement;\n+      if (element.requestFullscreen) {\n+        // Only attempt fullscreen if we're in a user gesture context\n+        // and the document is not already in fullscreen mode\n+        if (!document.fullscreenElement) {\n+          // Add a try-catch specifically for the requestFullscreen call\n+          try {\n+            await element.requestFullscreen();\n+            forceLog('Entered fullscreen mode successfully');\n+            setIsFullscreen(true);\n+          } catch (err) {\n+            forceLog('Fullscreen request failed (non-critical):', err, 'warn');\n+            // Non-critical error, we can continue without fullscreen\n+          }\n+        }\n+      } else {\n+        forceLog('Fullscreen API not supported', null, 'warn');\n+      }\n+    } catch (error) {\n+      // Log but don't throw - fullscreen is not critical for functionality\n+      forceLog('Error in enterFullscreen:', error, 'warn');\n+    }\n+  };\n+\n+  // Function to handle exiting fullscreen\n+  const exitFullscreen = async () => {\n+    try {\n+      if (document.fullscreenElement && document.exitFullscreen) {\n+        await document.exitFullscreen();\n+      }\n+    } catch (error) {\n+      console.error('Exit fullscreen error:', error);\n+    }\n+  };\n+\n+  // Function to handle navigation back to lessons page\n+  const navigateToLessons = async () => {\n+    try {\n+      if (navigationAttempted) {\n+        forceLog('Navigation already attempted, preventing duplicate');\n+        return;\n+      }\n+      \n+      setNavigationAttempted(true);\n+      forceLog('Attempting navigation to lessons page');\n+      \n+      await exitFullscreen();\n+      \n+      // Small delay to ensure logs are visible\n+      await new Promise(resolve => setTimeout(resolve, 1000));\n+      \n+      // Close the window instead of navigating\n+      window.close();\n+      \n+      // Fallback if window.close() doesn't work\n+      if (!window.closed) {\n+        window.location.href = '/app/teacher/lessons';\n+      }\n+    } catch (error) {\n+      forceLog('Navigation error:', error);\n+      setError('Failed to navigate back to lessons page');\n+    }\n+  };\n+\n+  // Update the fetchLessonData function\n+  const fetchLessonData = async (\n+    lessonId: string,\n+    topicId: string,\n+    subtopicId: string\n+  ): Promise<LessonState> => {\n+    logger.info('Initiating lesson data fetch', { lessonId, topicId, subtopicId });\n+    \n+    try {\n+      // Check localStorage first\n+      const stateKey = `lesson_state_${lessonId}`;\n+      const savedState = localStorage.getItem(stateKey);\n+      \n+      if (savedState) {\n+        try {\n+          const parsedState = JSON.parse(savedState);\n+          logger.info('Found cached lesson state', { stateKey });\n+          return parsedState;\n+        } catch (e) {\n+          logger.warn('Failed to parse cached lesson state', e);\n+        }\n+      }\n+\n+      // Fetch lesson data with detailed logging\n+      const startTime = performance.now();\n+      \n+      const [lessonResult, topicResult, subtopicResult] = await Promise.all([\n+        supabase\n+          .from('lessons')\n+          .select(`\n+            *,\n+            questions (\n+              *,\n+              metadata,\n+              data\n+            ),\n+            activities (*),\n+            exercise_prompts (*)\n+          `)\n+          .eq('id', lessonId)\n+          .single(),\n+          \n+        supabase\n+          .from('topics')\n+          .select('id, title')\n+          .eq('id', topicId)\n+          .single(),\n+          \n+        supabase\n+          .from('subtopics')\n+          .select('id, title')\n+          .eq('id', subtopicId)\n+          .single()\n+      ]);\n+\n+      const endTime = performance.now();\n+      logger.info('Database queries completed', {\n+        duration: `${(endTime - startTime).toFixed(2)}ms`,\n+        lessonDataSize: JSON.stringify(lessonResult.data).length,\n+        success: !lessonResult.error && !topicResult.error && !subtopicResult.error\n+      });\n+\n+      // Validate responses\n+      if (lessonResult.error) throw new Error(`Lesson fetch failed: ${lessonResult.error.message}`);\n+      if (topicResult.error) throw new Error(`Topic fetch failed: ${topicResult.error.message}`);\n+      if (subtopicResult.error) throw new Error(`Subtopic fetch failed: ${subtopicResult.error.message}`);\n+\n+      const fullState: LessonState = {\n+        lesson: {\n+          ...lessonResult.data,\n+          questions: lessonResult.data.questions || [],\n+          activities: lessonResult.data.activities || [],\n+          exercise_prompts: lessonResult.data.exercise_prompts || []\n+        },\n+        topic: topicResult.data,\n+        subtopic: subtopicResult.data\n+      };\n+\n+      // Cache the result\n+      localStorage.setItem(stateKey, JSON.stringify(fullState));\n+      logger.info('Lesson data cached successfully', { stateKey });\n+\n+      return fullState;\n+    } catch (error) {\n+      logger.error('Failed to fetch lesson data', error);\n+      throw error;\n+    }\n+  };\n+\n+  // Update the initialization effect\n+  useEffect(() => {\n+    let isMounted = true;\n+    const pageLogger = createLogger('LessonPage:Init');\n+    \n+    const initializeLessonPage = async () => {\n+      if (!params?.lessonId) {\n+        pageLogger.error('Missing lessonId parameter');\n+        setError('Invalid lesson ID');\n+        return;\n+      }\n+\n+      try {\n+        pageLogger.info('Starting page initialization', {\n+          params,\n+          searchParams: Object.fromEntries(searchParams.entries())\n+        });\n+\n+        setIsLoading(true);\n+\n+        // Validate URL parameters\n+        const urlValidation = validateUrl(params, searchParams);\n+        if (!urlValidation.isValid) {\n+          throw new Error(`Missing required parameters: ${urlValidation.missingParams.join(', ')}`);\n+        }\n+\n+        // Initialize auth\n+        const authInitialized = await initializeAuth(searchParams.get('authStateKey') || '');\n+        if (!authInitialized) {\n+          throw new Error('Authentication initialization failed');\n+        }\n+\n+        // Fetch lesson data\n+        const lessonData = await fetchLessonData(\n+          params.lessonId,\n+          searchParams.get('topicId') || '',\n+          searchParams.get('subtopicId') || ''\n+        );\n+\n+        if (!isMounted) return;\n+\n+        setLessonState(lessonData);\n+        pageLogger.info('Page initialization complete', {\n+          lessonId: lessonData.lesson.id,\n+          questionCount: lessonData.lesson.questions.length\n+        });\n+\n+      } catch (error) {\n+        pageLogger.error('Page initialization failed', error);\n+        if (isMounted) {\n+          setError(error instanceof Error ? error.message : 'Failed to initialize lesson');\n+        }\n+      } finally {\n+        if (isMounted) {\n+          setIsLoading(false);\n+          setHasAttemptedLoad(true);\n+        }\n+      }\n+    };\n+\n+    if (!hasAttemptedLoad) {\n+      initializeLessonPage();\n+    }\n+\n+    return () => {\n+      isMounted = false;\n+      pageLogger.info('Cleanup: Component unmounting');\n+    };\n+  }, [params?.lessonId, searchParams, hasAttemptedLoad]);\n+\n+  // Only navigate away if there's an error and we're not loading\n+  useEffect(() => {\n+    let navigationTimer: NodeJS.Timeout;\n+    \n+    if (error && !isLoading && hasAttemptedLoad && !navigationAttempted) {\n+      forceLog('Error detected, preparing to navigate:', error);\n+      navigationTimer = setTimeout(() => {\n+        forceLog('Executing delayed navigation due to error');\n+        navigateToLessons();\n+      }, 2000); // Give more time for logs to be visible\n+    }\n+    \n+    return () => {\n+      if (navigationTimer) {\n+        clearTimeout(navigationTimer);\n+      }\n+    };\n+  }, [error, isLoading, hasAttemptedLoad, navigationAttempted]);\n+\n+  const handleEndLesson = async () => {\n+    forceLog('End lesson requested');\n+    const confirmed = window.confirm('Are you sure you want to end this lesson?');\n+    if (confirmed) {\n+      forceLog('End lesson confirmed');\n+      // Clean up localStorage before navigating\n+      if (params?.lessonId) {\n+        const storageKey = `lesson_state_${params.lessonId}`;\n+        forceLog('Removing stored state:', storageKey);\n+        localStorage.removeItem(storageKey);\n+      }\n+      await navigateToLessons();\n+    } else {\n+      forceLog('End lesson cancelled');\n+    }\n+  };\n+\n+  const getQuestionIcon = (type: string) => {\n+    switch (type) {\n+      case 'speaking':\n+        return <Mic className=\"h-4 w-4\" />;\n+      case 'multiplechoice':\n+        return <PenTool className=\"h-4 w-4\" />;\n+      case 'fill_blanks':\n+        return <FileText className=\"h-4 w-4\" />;\n+      default:\n+        return <HelpCircle className=\"h-4 w-4\" />;\n+    }\n+  };\n+\n+  useEffect(() => {\n+    return () => {\n+        // Cleanup function\n+        forceLog('Cleaning up lesson dialog state', {\n+            source: 'LearningPathTeacher',\n+            context: {\n+                wasDialogOpen: isLessonDialogOpen,\n+                currentLessonId,\n+                timestamp: new Date().toISOString()\n+            }\n+        });\n+        \n+        // Preserve state in sessionStorage before cleanup\n+        if (currentLessonId) {\n+            const state = {\n+                lessonId: currentLessonId,\n+                dialogOpen: isLessonDialogOpen,\n+                timestamp: new Date().toISOString()\n+            };\n+            sessionStorage.setItem('lesson_dialog_state', JSON.stringify(state));\n+        }\n+    };\n+  }, [isLessonDialogOpen, currentLessonId]);\n+\n+  useEffect(() => {\n+    // Try to recover dialog state on mount\n+    const savedState = sessionStorage.getItem('lesson_dialog_state');\n+    if (savedState) {\n+        try {\n+            const state = JSON.parse(savedState);\n+            forceLog('Recovering lesson dialog state', {\n+                source: 'LearningPathTeacher',\n+                context: {\n+                    savedState: state,\n+                    timestamp: new Date().toISOString()\n+                }\n+            });\n+            \n+            if (state.dialogOpen && state.lessonId) {\n+                setCurrentLessonId(state.lessonId);\n+                setIsLessonDialogOpen(true);\n+            }\n+        } catch (error) {\n+            forceLog('Failed to recover lesson dialog state', {\n+                source: 'LearningPathTeacher',\n+                context: { error }\n+            });\n+        }\n+    }\n+  }, []);\n+\n+  const getLessonUrl = useCallback((lessonId: string) => {\n+    const baseUrl = window.location.origin;\n+    const url = new URL(`${baseUrl}/app/teacher/lessons/${lessonId}`);\n+    \n+    // Add any necessary query parameters\n+    url.searchParams.set('dialog', 'true');\n+    url.searchParams.set('timestamp', Date.now().toString());\n+    \n+    forceLog('Constructed lesson URL', {\n+        source: 'LearningPathTeacher',\n+        context: {\n+            lessonId,\n+            url: url.toString(),\n+            baseUrl,\n+            timestamp: new Date().toISOString()\n+        }\n+    });\n+    \n+    return url.toString();\n+  }, []);\n+\n+  useEffect(() => {\n+    setPerformanceMetrics(prev => ({\n+      ...prev,\n+      renderCount: prev.renderCount + 1\n+    }));\n+\n+    logger.info('Component rendered', {\n+      metrics: performanceMetrics,\n+      currentStep,\n+      hasLessonState: !!lessonState\n+    });\n+  }, [lessonState, currentStep]);\n+\n+  if (isLoading) {\n+    forceLog('Rendering loading state');\n+    return (\n+      <div className=\"flex items-center justify-center min-h-screen\">\n+        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n+      </div>\n+    );\n+  }\n+\n+  if (!lessonState) {\n+    forceLog('Rendering error state - no lesson state found');\n+    return (\n+      <div className=\"flex items-center justify-center min-h-screen\">\n+        <Card className=\"p-6\">\n+          <CardTitle className=\"text-xl mb-4\">Lesson not found</CardTitle>\n+          <Button onClick={() => navigateToLessons()}>Go Back</Button>\n+        </Card>\n+      </div>\n+    );\n+  }\n+\n+  forceLog('Rendering lesson page with state:', {\n+    currentStep,\n+    totalSteps: lessonState.lesson.questions.length,\n+    progress\n+  });\n+\n+  const totalSteps = lessonState.lesson.questions.length;\n+  const currentQuestion = lessonState.lesson.questions[currentStep];\n+\n+  return (\n+    <LessonErrorBoundary>\n+      <div className=\"min-h-screen bg-gradient-to-b from-background to-accent/20\">\n+        {/* Top Navigation Bar */}\n+        <nav className=\"fixed top-0 left-0 right-0 z-50 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b\">\n+          <div className=\"flex items-center justify-between p-4\">\n+            <div className=\"flex items-center gap-4\">\n+              <Button\n+                variant=\"ghost\"\n+                size=\"icon\"\n+                onClick={handleEndLesson}\n+                className=\"hover:bg-accent\"\n+              >\n+                <X className=\"h-5 w-5\" />\n+              </Button>\n+              <div>\n+                <h1 className=\"text-lg font-semibold\">{lessonState.lesson.title}</h1>\n+                <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n+                  <span>{lessonState.topic.title}</span>\n+                  <span>•</span>\n+                  <span>{lessonState.subtopic.title}</span>\n+                </div>\n+              </div>\n+            </div>\n+            <div className=\"flex items-center gap-4\">\n+              <Progress \n+                value={(currentStep / totalSteps) * 100} \n+                className=\"w-40\"\n+              />\n+              <Button \n+                variant=\"outline\" \n+                onClick={enterFullscreen}\n+                className=\"mr-2\"\n+              >\n+                Fullscreen\n+              </Button>\n+              <Button variant=\"outline\" onClick={handleEndLesson}>\n+                End Lesson\n+              </Button>\n+            </div>\n+          </div>\n+        </nav>\n+\n+        {/* Main Content */}\n+        <main className=\"pt-24 pb-8 px-4 md:px-8 max-w-7xl mx-auto\">\n+          <div className=\"grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-8\">\n+            {/* Sidebar */}\n+            <div className=\"lg:block\">\n+              <Card className=\"sticky top-24\">\n+                <CardHeader>\n+                  <CardTitle className=\"text-lg flex items-center gap-2\">\n+                    <List className=\"h-5 w-5\" />\n+                    Lesson Overview\n+                  </CardTitle>\n+                </CardHeader>\n+                <CardContent>\n+                  <div className=\"space-y-4\">\n+                    <div className=\"flex items-center gap-2 text-sm\">\n+                      <Clock className=\"h-4 w-4 text-primary\" />\n+                      <span>{lessonState.lesson.questions.length * 2} minutes</span>\n+                    </div>\n+                    <div className=\"flex items-center gap-2 text-sm\">\n+                      <HelpCircle className=\"h-4 w-4 text-primary\" />\n+                      <span>{lessonState.lesson.questions.length} Questions</span>\n+                    </div>\n+                    <div className=\"flex items-center gap-2 text-sm\">\n+                      <Layout className=\"h-4 w-4 text-primary\" />\n+                      <span>{lessonState.lesson.activities?.length || 0} Activities</span>\n+                    </div>\n+                    \n+                    <div className=\"border-t pt-4 mt-4\">\n+                      <h3 className=\"font-medium mb-3\">Questions</h3>\n+                      <div className=\"space-y-3\">\n+                        {lessonState.lesson.questions.map((question, index) => (\n+                          <motion.div\n+                            key={index}\n+                            initial={{ opacity: 0, x: -20 }}\n+                            animate={{ opacity: 1, x: 0 }}\n+                            transition={{ delay: index * 0.1 }}\n+                            className={cn(\n+                              \"flex items-center gap-2 p-2 rounded-md transition-all duration-200\",\n+                              currentStep === index ? \"bg-accent shadow-sm\" : \"hover:bg-accent/50\",\n+                              index < currentStep && \"text-primary\"\n+                            )}\n+                            onClick={() => setCurrentStep(index)}\n+                            style={{ cursor: 'pointer' }}\n+                          >\n+                            {index < currentStep ? (\n+                              <CheckCircle2 className=\"h-4 w-4\" />\n+                            ) : (\n+                              <div className={cn(\n+                                \"h-4 w-4 rounded-full border\",\n+                                currentStep === index && \"border-primary\"\n+                              )} />\n+                            )}\n+                            <span className=\"text-sm\">Question {index + 1}</span>\n+                            {getQuestionIcon(question.type)}\n+                          </motion.div>\n+                        ))}\n+                      </div>\n+                    </div>\n+                  </div>\n+                </CardContent>\n+              </Card>\n+            </div>\n+\n+            {/* Main Content Area */}\n+            <div className=\"space-y-8\">\n+              <Tabs defaultValue=\"question\" className=\"w-full\">\n+                <TabsList className=\"mb-4\">\n+                  <TabsTrigger value=\"question\">Question</TabsTrigger>\n+                  <TabsTrigger value=\"teacherScript\">Teacher Script</TabsTrigger>\n+                  <TabsTrigger value=\"activities\">Activities</TabsTrigger>\n+                </TabsList>\n+\n+                <AnimatePresence mode=\"wait\">\n+                  <motion.div\n+                    key={currentStep}\n+                    initial={{ opacity: 0, y: 20 }}\n+                    animate={{ opacity: 1, y: 0 }}\n+                    exit={{ opacity: 0, y: -20 }}\n+                    transition={{ duration: 0.3 }}\n+                  >\n+                    <TabsContent value=\"question\">\n+                      <Card>\n+                        <CardHeader>\n+                          <div className=\"flex items-center justify-between\">\n+                            <Badge variant=\"outline\" className=\"bg-primary/5\">\n+                              Question {currentStep + 1} of {totalSteps}\n+                            </Badge>\n+                            <div className=\"flex items-center gap-2\">\n+                              <Star className=\"h-4 w-4 text-yellow-500\" />\n+                              <span className=\"text-sm\">{currentQuestion.points} Points</span>\n+                            </div>\n+                          </div>\n+                          <CardTitle className=\"text-2xl mt-4\">\n+                            {currentQuestion.title || \"Question\"}\n+                          </CardTitle>\n+                        </CardHeader>\n+                        <CardContent className=\"space-y-6\">\n+                          <div className=\"prose prose-sm dark:prose-invert max-w-none\">\n+                            <div className=\"bg-accent/50 p-4 rounded-lg\">\n+                              <h3 className=\"text-lg font-semibold mb-2\">Prompt</h3>\n+                              <p>{currentQuestion.data.prompt || currentQuestion.content}</p>\n+                            </div>\n+\n+                            {currentQuestion.type === 'multiplechoice' && currentQuestion.metadata?.options && (\n+                              <div className=\"mt-6 space-y-4\">\n+                                {currentQuestion.metadata.options.map((option, idx) => (\n+                                  <Button\n+                                    key={idx}\n+                                    variant=\"outline\"\n+                                    className=\"w-full justify-start text-left\"\n+                                  >\n+                                    {option}\n+                                  </Button>\n+                                ))}\n+                              </div>\n+                            )}\n+\n+                            {currentQuestion.type === 'speaking' && (\n+                              <div className=\"mt-6\">\n+                                <Button className=\"w-full justify-center gap-2\">\n+                                  <Mic className=\"h-4 w-4\" />\n+                                  Start Recording\n+                                </Button>\n+                              </div>\n+                            )}\n+                          </div>\n+                        </CardContent>\n+                      </Card>\n+                    </TabsContent>\n+\n+                    <TabsContent value=\"teacherScript\">\n+                      <Card>\n+                        <CardContent className=\"p-6\">\n+                          <div className=\"prose prose-sm dark:prose-invert max-w-none\">\n+                            <h3 className=\"text-lg font-semibold mb-4\">Teacher Script</h3>\n+                            <div className=\"bg-accent/50 p-4 rounded-lg\">\n+                              {currentQuestion.data.teacherScript || \"No teacher script available.\"}\n+                            </div>\n+                          </div>\n+                        </CardContent>\n+                      </Card>\n+                    </TabsContent>\n+\n+                    <TabsContent value=\"activities\">\n+                      <Card>\n+                        <CardContent className=\"p-6\">\n+                          <div className=\"prose prose-sm dark:prose-invert max-w-none\">\n+                            <h3 className=\"text-lg font-semibold mb-4\">Activities</h3>\n+                            {lessonState.lesson.activities?.length > 0 ? (\n+                              <div className=\"space-y-4\">\n+                                {lessonState.lesson.activities.map((activity, idx) => (\n+                                  <div key={idx} className=\"bg-accent/50 p-4 rounded-lg\">\n+                                    <h4 className=\"font-medium\">{activity.title}</h4>\n+                                    <p>{activity.description}</p>\n+                                  </div>\n+                                ))}\n+                              </div>\n+                            ) : (\n+                              <p>No activities available for this lesson.</p>\n+                            )}\n+                          </div>\n+                        </CardContent>\n+                      </Card>\n+                    </TabsContent>\n+                  </motion.div>\n+                </AnimatePresence>\n+              </Tabs>\n+\n+              {/* Navigation Buttons */}\n+              <div className=\"flex items-center justify-between pt-4\">\n+                <Button\n+                  variant=\"outline\"\n+                  onClick={() => setCurrentStep(prev => Math.max(0, prev - 1))}\n+                  disabled={currentStep === 0}\n+                >\n+                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\n+                  Previous\n+                </Button>\n+                <Button\n+                  onClick={() => {\n+                    if (currentStep < totalSteps - 1) {\n+                      setCurrentStep(prev => prev + 1);\n+                      setProgress(prev => prev + (100 / totalSteps));\n+                    } else {\n+                      handleEndLesson();\n+                    }\n+                  }}\n+                >\n+                  {currentStep < totalSteps - 1 ? (\n+                    <>\n+                      Next\n+                      <ArrowLeft className=\"h-4 w-4 ml-2 rotate-180\" />\n+                    </>\n+                  ) : (\n+                    <>\n+                      Complete Lesson\n+                      <Flag className=\"h-4 w-4 ml-2\" />\n+                    </>\n+                  )}\n+                </Button>\n+              </div>\n+            </div>\n+          </div>\n+        </main>\n+      </div>\n+    </LessonErrorBoundary>\n+  );\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739312609356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,12 +14,13 @@\n import { Question, Activity, ExercisePrompt } from \"@/types\";\n import { useAuth } from '@/hooks/useAuth';\n import LessonErrorBoundary from '@/components/LessonErrorBoundary';\n \n-// Enhanced debug configuration\n+// Enhanced logging configuration\n const DEBUG = true;\n const LOG_TO_STORAGE = true;\n const STORAGE_KEY = 'lessonPageDebugLogs';\n+const PERFORMANCE_METRICS_KEY = 'lessonPagePerformanceMetrics';\n \n // Global error handler\n window.onerror = function(msg, url, lineNo, columnNo, error) {\n   console.log('Global error: ', { msg, url, lineNo, columnNo, error });\n@@ -32,47 +33,91 @@\n   console.log('Current URL:', window.location.href);\n   console.log('Local Storage:', Object.keys(localStorage));\n };\n \n-// Enhanced logging utility\n-const forceLog = (message: string, data?: any, type: 'info' | 'warn' | 'error' = 'info') => {\n-  if (!DEBUG) return;\n-  \n-  const timestamp = new Date().toISOString();\n-  const logEntry = {\n-    timestamp,\n-    message,\n-    data,\n-    type,\n-    url: window.location.href,\n-    pathname: window.location.pathname,\n-    search: window.location.search\n-  };\n-  \n-  // Console logging with visual distinction\n-  const styles = {\n-    info: 'color: #4CAF50; font-weight: bold;',\n-    warn: 'color: #FFC107; font-weight: bold;',\n-    error: 'color: #F44336; font-weight: bold;'\n-  };\n-  \n-  console.log(`%c[${timestamp}] ${message}`, styles[type]);\n-  if (data) {\n-    console.log('Data:', data);\n-    if (typeof data === 'object') {\n-      console.table(data);\n+// Create a performance monitoring utility\n+const performance = {\n+  mark: (name: string) => {\n+    if (typeof window !== 'undefined' && window.performance) {\n+      window.performance.mark(name);\n+      logger.info('Performance mark', { name });\n     }\n+  },\n+  measure: (name: string, startMark: string, endMark: string) => {\n+    if (typeof window !== 'undefined' && window.performance) {\n+      try {\n+        const measure = window.performance.measure(name, startMark, endMark);\n+        logger.info('Performance measure', { \n+          name,\n+          duration: measure.duration,\n+          startTime: measure.startTime\n+        });\n+        return measure.duration;\n+      } catch (error) {\n+        logger.error('Performance measurement failed', { error });\n+      }\n+    }\n+    return 0;\n   }\n-  \n-  // Backup to localStorage\n-  if (LOG_TO_STORAGE) {\n-    try {\n-      const logs = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');\n-      logs.push(logEntry);\n-      localStorage.setItem(STORAGE_KEY, JSON.stringify(logs.slice(-100))); // Keep last 100 logs\n-    } catch (e) {\n-      console.warn('Failed to save log to localStorage:', e);\n+};\n+\n+// Enhanced logging utility\n+const logger = {\n+  info: (message: string, data?: any) => {\n+    if (!DEBUG) return;\n+    \n+    const logEntry = {\n+      timestamp: new Date().toISOString(),\n+      type: 'info',\n+      message,\n+      data,\n+      context: {\n+        url: window.location.href,\n+        pathname: window.location.pathname\n+      }\n+    };\n+    \n+    console.log(`%c[${logEntry.timestamp}] ${message}`, 'color: #4CAF50; font-weight: bold;');\n+    if (data) console.log('Data:', data);\n+    \n+    if (LOG_TO_STORAGE) {\n+      try {\n+        const logs = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');\n+        logs.push(logEntry);\n+        localStorage.setItem(STORAGE_KEY, JSON.stringify(logs.slice(-100)));\n+      } catch (e) {\n+        console.warn('Failed to save log to localStorage:', e);\n+      }\n     }\n+  },\n+  error: (message: string, error?: any) => {\n+    const logEntry = {\n+      timestamp: new Date().toISOString(),\n+      type: 'error',\n+      message,\n+      error: error instanceof Error ? {\n+        message: error.message,\n+        stack: error.stack,\n+        name: error.name\n+      } : error,\n+      context: {\n+        url: window.location.href,\n+        pathname: window.location.pathname\n+      }\n+    };\n+    \n+    console.error(`%c[${logEntry.timestamp}] ${message}`, 'color: #F44336; font-weight: bold;');\n+    if (error) console.error('Error:', error);\n+    \n+    if (LOG_TO_STORAGE) {\n+      try {\n+        const logs = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');\n+        logs.push(logEntry);\n+        localStorage.setItem(STORAGE_KEY, JSON.stringify(logs.slice(-100)));\n+      } catch (e) {\n+        console.warn('Failed to save error log to localStorage:', e);\n+      }\n+    }\n   }\n };\n \n interface LessonState {\n@@ -415,28 +460,30 @@\n     lessonId: string,\n     topicId: string,\n     subtopicId: string\n   ): Promise<LessonState> => {\n+    performance.mark('fetchLessonData-start');\n     logger.info('Initiating lesson data fetch', { lessonId, topicId, subtopicId });\n     \n     try {\n       // Check localStorage first\n       const stateKey = `lesson_state_${lessonId}`;\n+      performance.mark('checkCache-start');\n       const savedState = localStorage.getItem(stateKey);\n+      performance.mark('checkCache-end');\n+      performance.measure('cache-check', 'checkCache-start', 'checkCache-end');\n       \n       if (savedState) {\n         try {\n           const parsedState = JSON.parse(savedState);\n           logger.info('Found cached lesson state', { stateKey });\n           return parsedState;\n         } catch (e) {\n-          logger.warn('Failed to parse cached lesson state', e);\n+          logger.error('Failed to parse cached lesson state', e);\n         }\n       }\n \n-      // Fetch lesson data with detailed logging\n-      const startTime = performance.now();\n-      \n+      performance.mark('dbQueries-start');\n       const [lessonResult, topicResult, subtopicResult] = await Promise.all([\n         supabase\n           .from('lessons')\n           .select(`\n@@ -463,12 +510,18 @@\n           .select('id, title')\n           .eq('id', subtopicId)\n           .single()\n       ]);\n+      performance.mark('dbQueries-end');\n+      \n+      const queryDuration = performance.measure(\n+        'database-queries',\n+        'dbQueries-start',\n+        'dbQueries-end'\n+      );\n \n-      const endTime = performance.now();\n       logger.info('Database queries completed', {\n-        duration: `${(endTime - startTime).toFixed(2)}ms`,\n+        duration: queryDuration,\n         lessonDataSize: JSON.stringify(lessonResult.data).length,\n         success: !lessonResult.error && !topicResult.error && !subtopicResult.error\n       });\n \n@@ -491,8 +544,11 @@\n       // Cache the result\n       localStorage.setItem(stateKey, JSON.stringify(fullState));\n       logger.info('Lesson data cached successfully', { stateKey });\n \n+      performance.mark('fetchLessonData-end');\n+      performance.measure('total-fetch-time', 'fetchLessonData-start', 'fetchLessonData-end');\n+\n       return fullState;\n     } catch (error) {\n       logger.error('Failed to fetch lesson data', error);\n       throw error;\n"
                },
                {
                    "date": 1739312650903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,91 +34,74 @@\n   console.log('Local Storage:', Object.keys(localStorage));\n };\n \n // Create a performance monitoring utility\n-const performance = {\n+const performanceMonitor = {\n   mark: (name: string) => {\n     if (typeof window !== 'undefined' && window.performance) {\n       window.performance.mark(name);\n-      logger.info('Performance mark', { name });\n+      console.log(`[Performance] Mark: ${name}`);\n     }\n   },\n   measure: (name: string, startMark: string, endMark: string) => {\n     if (typeof window !== 'undefined' && window.performance) {\n       try {\n         const measure = window.performance.measure(name, startMark, endMark);\n-        logger.info('Performance measure', { \n-          name,\n+        console.log(`[Performance] Measure: ${name}`, {\n           duration: measure.duration,\n           startTime: measure.startTime\n         });\n         return measure.duration;\n       } catch (error) {\n-        logger.error('Performance measurement failed', { error });\n+        console.error('[Performance] Measurement failed:', error);\n       }\n     }\n     return 0;\n   }\n };\n \n // Enhanced logging utility\n-const logger = {\n-  info: (message: string, data?: any) => {\n-    if (!DEBUG) return;\n-    \n-    const logEntry = {\n-      timestamp: new Date().toISOString(),\n-      type: 'info',\n-      message,\n-      data,\n-      context: {\n-        url: window.location.href,\n-        pathname: window.location.pathname\n-      }\n-    };\n-    \n-    console.log(`%c[${logEntry.timestamp}] ${message}`, 'color: #4CAF50; font-weight: bold;');\n-    if (data) console.log('Data:', data);\n-    \n-    if (LOG_TO_STORAGE) {\n-      try {\n-        const logs = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');\n-        logs.push(logEntry);\n-        localStorage.setItem(STORAGE_KEY, JSON.stringify(logs.slice(-100)));\n-      } catch (e) {\n-        console.warn('Failed to save log to localStorage:', e);\n-      }\n+const forceLog = (message: string, data?: any, type: 'info' | 'warn' | 'error' = 'info') => {\n+  if (!DEBUG) return;\n+  \n+  const timestamp = new Date().toISOString();\n+  const logEntry = {\n+    timestamp,\n+    type,\n+    message,\n+    data,\n+    context: {\n+      url: window.location.href,\n+      pathname: window.location.pathname,\n+      search: window.location.search\n     }\n-  },\n-  error: (message: string, error?: any) => {\n-    const logEntry = {\n-      timestamp: new Date().toISOString(),\n-      type: 'error',\n-      message,\n-      error: error instanceof Error ? {\n-        message: error.message,\n-        stack: error.stack,\n-        name: error.name\n-      } : error,\n-      context: {\n-        url: window.location.href,\n-        pathname: window.location.pathname\n-      }\n-    };\n-    \n-    console.error(`%c[${logEntry.timestamp}] ${message}`, 'color: #F44336; font-weight: bold;');\n-    if (error) console.error('Error:', error);\n-    \n-    if (LOG_TO_STORAGE) {\n-      try {\n-        const logs = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');\n-        logs.push(logEntry);\n-        localStorage.setItem(STORAGE_KEY, JSON.stringify(logs.slice(-100)));\n-      } catch (e) {\n-        console.warn('Failed to save error log to localStorage:', e);\n-      }\n+  };\n+  \n+  // Console logging with visual distinction\n+  const styles = {\n+    info: 'color: #4CAF50; font-weight: bold;',\n+    warn: 'color: #FFC107; font-weight: bold;',\n+    error: 'color: #F44336; font-weight: bold;'\n+  };\n+  \n+  console.log(`%c[${timestamp}] ${message}`, styles[type]);\n+  if (data) {\n+    console.log('Data:', data);\n+    if (typeof data === 'object') {\n+      console.table(data);\n     }\n   }\n+  \n+  // Backup to localStorage\n+  if (LOG_TO_STORAGE) {\n+    try {\n+      const logs = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');\n+      logs.push(logEntry);\n+      localStorage.setItem(STORAGE_KEY, JSON.stringify(logs.slice(-100))); // Keep last 100 logs\n+    } catch (e) {\n+      console.warn('Failed to save log to localStorage:', e);\n+    }\n+  }\n };\n \n interface LessonState {\n   lesson: {\n@@ -460,30 +443,30 @@\n     lessonId: string,\n     topicId: string,\n     subtopicId: string\n   ): Promise<LessonState> => {\n-    performance.mark('fetchLessonData-start');\n-    logger.info('Initiating lesson data fetch', { lessonId, topicId, subtopicId });\n+    performanceMonitor.mark('fetchLessonData-start');\n+    forceLog('Initiating lesson data fetch', { lessonId, topicId, subtopicId });\n     \n     try {\n       // Check localStorage first\n       const stateKey = `lesson_state_${lessonId}`;\n-      performance.mark('checkCache-start');\n+      performanceMonitor.mark('checkCache-start');\n       const savedState = localStorage.getItem(stateKey);\n-      performance.mark('checkCache-end');\n-      performance.measure('cache-check', 'checkCache-start', 'checkCache-end');\n+      performanceMonitor.mark('checkCache-end');\n+      performanceMonitor.measure('cache-check', 'checkCache-start', 'checkCache-end');\n       \n       if (savedState) {\n         try {\n           const parsedState = JSON.parse(savedState);\n-          logger.info('Found cached lesson state', { stateKey });\n+          forceLog('Found cached lesson state', { stateKey });\n           return parsedState;\n         } catch (e) {\n-          logger.error('Failed to parse cached lesson state', e);\n+          forceLog('Failed to parse cached lesson state', e, 'error');\n         }\n       }\n \n-      performance.mark('dbQueries-start');\n+      performanceMonitor.mark('dbQueries-start');\n       const [lessonResult, topicResult, subtopicResult] = await Promise.all([\n         supabase\n           .from('lessons')\n           .select(`\n@@ -510,17 +493,17 @@\n           .select('id, title')\n           .eq('id', subtopicId)\n           .single()\n       ]);\n-      performance.mark('dbQueries-end');\n+      performanceMonitor.mark('dbQueries-end');\n       \n-      const queryDuration = performance.measure(\n+      const queryDuration = performanceMonitor.measure(\n         'database-queries',\n         'dbQueries-start',\n         'dbQueries-end'\n       );\n \n-      logger.info('Database queries completed', {\n+      forceLog('Database queries completed', {\n         duration: queryDuration,\n         lessonDataSize: JSON.stringify(lessonResult.data).length,\n         success: !lessonResult.error && !topicResult.error && !subtopicResult.error\n       });\n@@ -542,16 +525,16 @@\n       };\n \n       // Cache the result\n       localStorage.setItem(stateKey, JSON.stringify(fullState));\n-      logger.info('Lesson data cached successfully', { stateKey });\n+      forceLog('Lesson data cached successfully', { stateKey });\n \n-      performance.mark('fetchLessonData-end');\n-      performance.measure('total-fetch-time', 'fetchLessonData-start', 'fetchLessonData-end');\n+      performanceMonitor.mark('fetchLessonData-end');\n+      performanceMonitor.measure('total-fetch-time', 'fetchLessonData-start', 'fetchLessonData-end');\n \n       return fullState;\n     } catch (error) {\n-      logger.error('Failed to fetch lesson data', error);\n+      forceLog('Failed to fetch lesson data', error, 'error');\n       throw error;\n     }\n   };\n \n"
                },
                {
                    "date": 1739346598561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,13 +14,12 @@\n import { Question, Activity, ExercisePrompt } from \"@/types\";\n import { useAuth } from '@/hooks/useAuth';\n import LessonErrorBoundary from '@/components/LessonErrorBoundary';\n \n-// Enhanced logging configuration\n+// Enhanced debug configuration\n const DEBUG = true;\n const LOG_TO_STORAGE = true;\n const STORAGE_KEY = 'lessonPageDebugLogs';\n-const PERFORMANCE_METRICS_KEY = 'lessonPagePerformanceMetrics';\n \n // Global error handler\n window.onerror = function(msg, url, lineNo, columnNo, error) {\n   console.log('Global error: ', { msg, url, lineNo, columnNo, error });\n@@ -33,48 +32,21 @@\n   console.log('Current URL:', window.location.href);\n   console.log('Local Storage:', Object.keys(localStorage));\n };\n \n-// Create a performance monitoring utility\n-const performanceMonitor = {\n-  mark: (name: string) => {\n-    if (typeof window !== 'undefined' && window.performance) {\n-      window.performance.mark(name);\n-      console.log(`[Performance] Mark: ${name}`);\n-    }\n-  },\n-  measure: (name: string, startMark: string, endMark: string) => {\n-    if (typeof window !== 'undefined' && window.performance) {\n-      try {\n-        const measure = window.performance.measure(name, startMark, endMark);\n-        console.log(`[Performance] Measure: ${name}`, {\n-          duration: measure.duration,\n-          startTime: measure.startTime\n-        });\n-        return measure.duration;\n-      } catch (error) {\n-        console.error('[Performance] Measurement failed:', error);\n-      }\n-    }\n-    return 0;\n-  }\n-};\n-\n // Enhanced logging utility\n const forceLog = (message: string, data?: any, type: 'info' | 'warn' | 'error' = 'info') => {\n   if (!DEBUG) return;\n   \n   const timestamp = new Date().toISOString();\n   const logEntry = {\n     timestamp,\n-    type,\n     message,\n     data,\n-    context: {\n-      url: window.location.href,\n-      pathname: window.location.pathname,\n-      search: window.location.search\n-    }\n+    type,\n+    url: window.location.href,\n+    pathname: window.location.pathname,\n+    search: window.location.search\n   };\n   \n   // Console logging with visual distinction\n   const styles = {\n@@ -443,30 +415,28 @@\n     lessonId: string,\n     topicId: string,\n     subtopicId: string\n   ): Promise<LessonState> => {\n-    performanceMonitor.mark('fetchLessonData-start');\n-    forceLog('Initiating lesson data fetch', { lessonId, topicId, subtopicId });\n+    logger.info('Initiating lesson data fetch', { lessonId, topicId, subtopicId });\n     \n     try {\n       // Check localStorage first\n       const stateKey = `lesson_state_${lessonId}`;\n-      performanceMonitor.mark('checkCache-start');\n       const savedState = localStorage.getItem(stateKey);\n-      performanceMonitor.mark('checkCache-end');\n-      performanceMonitor.measure('cache-check', 'checkCache-start', 'checkCache-end');\n       \n       if (savedState) {\n         try {\n           const parsedState = JSON.parse(savedState);\n-          forceLog('Found cached lesson state', { stateKey });\n+          logger.info('Found cached lesson state', { stateKey });\n           return parsedState;\n         } catch (e) {\n-          forceLog('Failed to parse cached lesson state', e, 'error');\n+          logger.warn('Failed to parse cached lesson state', e);\n         }\n       }\n \n-      performanceMonitor.mark('dbQueries-start');\n+      // Fetch lesson data with detailed logging\n+      const startTime = performance.now();\n+      \n       const [lessonResult, topicResult, subtopicResult] = await Promise.all([\n         supabase\n           .from('lessons')\n           .select(`\n@@ -493,18 +463,12 @@\n           .select('id, title')\n           .eq('id', subtopicId)\n           .single()\n       ]);\n-      performanceMonitor.mark('dbQueries-end');\n-      \n-      const queryDuration = performanceMonitor.measure(\n-        'database-queries',\n-        'dbQueries-start',\n-        'dbQueries-end'\n-      );\n \n-      forceLog('Database queries completed', {\n-        duration: queryDuration,\n+      const endTime = performance.now();\n+      logger.info('Database queries completed', {\n+        duration: `${(endTime - startTime).toFixed(2)}ms`,\n         lessonDataSize: JSON.stringify(lessonResult.data).length,\n         success: !lessonResult.error && !topicResult.error && !subtopicResult.error\n       });\n \n@@ -525,16 +489,13 @@\n       };\n \n       // Cache the result\n       localStorage.setItem(stateKey, JSON.stringify(fullState));\n-      forceLog('Lesson data cached successfully', { stateKey });\n+      logger.info('Lesson data cached successfully', { stateKey });\n \n-      performanceMonitor.mark('fetchLessonData-end');\n-      performanceMonitor.measure('total-fetch-time', 'fetchLessonData-start', 'fetchLessonData-end');\n-\n       return fullState;\n     } catch (error) {\n-      forceLog('Failed to fetch lesson data', error, 'error');\n+      logger.error('Failed to fetch lesson data', error);\n       throw error;\n     }\n   };\n \n"
                },
                {
                    "date": 1739346634344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,10 @@\n import { supabase } from \"@/lib/supabase\";\n import { Question, Activity, ExercisePrompt } from \"@/types\";\n import { useAuth } from '@/hooks/useAuth';\n import LessonErrorBoundary from '@/components/LessonErrorBoundary';\n+import { useQuery } from '@tanstack/react-query';\n+import { useComponentLogger } from '@/hooks/useComponentLogger';\n \n // Enhanced debug configuration\n const DEBUG = true;\n const LOG_TO_STORAGE = true;\n@@ -299,42 +301,142 @@\n });\n \n const logger = createLogger('LessonPage');\n \n+// Add this type for better type safety\n+interface LessonQueryResult {\n+  data: LessonState | null;\n+  error: Error | null;\n+  isLoading: boolean;\n+}\n+\n+// Add this utility function for data fetching\n+const fetchLessonContent = async (\n+  lessonId: string,\n+  topicId: string,\n+  subtopicId: string,\n+  logger: ReturnType<typeof createLogger>\n+): Promise<LessonState> => {\n+  logger.info('Fetching lesson content', { lessonId, topicId, subtopicId });\n+  const startTime = performance.now();\n+\n+  try {\n+    const [lessonResult, topicResult, subtopicResult] = await Promise.all([\n+      supabase\n+        .from('lessons')\n+        .select(`\n+          *,\n+          questions (\n+            *,\n+            metadata,\n+            data\n+          ),\n+          activities (*),\n+          exercise_prompts (*)\n+        `)\n+        .eq('id', lessonId)\n+        .single(),\n+      \n+      supabase\n+        .from('topics')\n+        .select('id, title')\n+        .eq('id', topicId)\n+        .single(),\n+      \n+      supabase\n+        .from('subtopics')\n+        .select('id, title')\n+        .eq('id', subtopicId)\n+        .single()\n+    ]);\n+\n+    const endTime = performance.now();\n+    const duration = endTime - startTime;\n+\n+    logger.info('Database queries completed', {\n+      duration: `${duration.toFixed(2)}ms`,\n+      lessonDataSize: JSON.stringify(lessonResult.data).length,\n+      success: !lessonResult.error && !topicResult.error && !subtopicResult.error\n+    });\n+\n+    // Validate responses\n+    if (lessonResult.error) throw new Error(`Lesson fetch failed: ${lessonResult.error.message}`);\n+    if (topicResult.error) throw new Error(`Topic fetch failed: ${topicResult.error.message}`);\n+    if (subtopicResult.error) throw new Error(`Subtopic fetch failed: ${subtopicResult.error.message}`);\n+\n+    // Log successful data fetch\n+    logger.info('Lesson data fetched successfully', {\n+      lessonId,\n+      questionCount: lessonResult.data.questions?.length || 0,\n+      activityCount: lessonResult.data.activities?.length || 0\n+    });\n+\n+    return {\n+      lesson: {\n+        ...lessonResult.data,\n+        questions: lessonResult.data.questions || [],\n+        activities: lessonResult.data.activities || [],\n+        exercise_prompts: lessonResult.data.exercise_prompts || []\n+      },\n+      topic: topicResult.data,\n+      subtopic: subtopicResult.data\n+    };\n+  } catch (error) {\n+    logger.error('Failed to fetch lesson data', { error });\n+    throw error;\n+  }\n+};\n+\n export default function LessonPage() {\n-  forceLog('LessonPage component mounted', { timestamp: new Date().toISOString() });\n-  \n+  const logger = useComponentLogger('LessonPage');\n   const params = useParams<RouteParams>();\n   const location = useLocation();\n   const navigate = useNavigate();\n   const searchParams = new URLSearchParams(window.location.search);\n   \n-  // Enhanced URL validation and logging\n-  const urlValidation = validateUrl(params, searchParams);\n-  forceLog('URL Validation Result:', urlValidation, urlValidation.isValid ? 'info' : 'error');\n-  \n-  forceLog('Route information:', { \n-    params, \n-    pathname: location.pathname, \n-    search: location.search,\n-    fullUrl: window.location.href,\n-    lessonId: params?.lessonId,\n-    topicId: searchParams.get('topicId'),\n-    subtopicId: searchParams.get('subtopicId'),\n-    rawSearch: window.location.search,\n-    hash: window.location.hash,\n-    origin: window.location.origin,\n-    localStorage: Object.keys(localStorage)\n+  // Add React Query for data fetching\n+  const { data: lessonState, error, isLoading } = useQuery<LessonState, Error>({\n+    queryKey: ['lesson', params.lessonId, searchParams.get('topicId'), searchParams.get('subtopicId')],\n+    queryFn: () => fetchLessonContent(\n+      params.lessonId!,\n+      searchParams.get('topicId')!,\n+      searchParams.get('subtopicId')!,\n+      logger\n+    ),\n+    enabled: !!params.lessonId && !!searchParams.get('topicId') && !!searchParams.get('subtopicId'),\n+    staleTime: 5 * 60 * 1000, // Consider data fresh for 5 minutes\n+    cacheTime: 30 * 60 * 1000, // Keep in cache for 30 minutes\n+    retry: 2,\n+    onError: (error) => {\n+      logger.error('Error fetching lesson data', { error });\n+    },\n+    onSuccess: (data) => {\n+      logger.info('Lesson data loaded successfully', {\n+        lessonId: data.lesson.id,\n+        title: data.lesson.title\n+      });\n+    }\n   });\n \n-  const [lessonState, setLessonState] = useState<LessonState | null>(null);\n+  // Add performance monitoring\n+  useEffect(() => {\n+    const pageLoadTime = performance.now();\n+    logger.info('Page mounted', { loadTime: pageLoadTime });\n+\n+    return () => {\n+      const pageUnloadTime = performance.now();\n+      logger.info('Page unmounted', { \n+        totalTime: pageUnloadTime - pageLoadTime,\n+        lessonId: params.lessonId\n+      });\n+    };\n+  }, []);\n+\n   const [currentStep, setCurrentStep] = useState(0);\n   const [progress, setProgress] = useState(0);\n-  const [isLoading, setIsLoading] = useState(true);\n   const [activeTab, setActiveTab] = useState(\"overview\");\n   const [hasAttemptedLoad, setHasAttemptedLoad] = useState(false);\n   const [isFullscreen, setIsFullscreen] = useState(false);\n-  const [error, setError] = useState<string | null>(null);\n   const [navigationAttempted, setNavigationAttempted] = useState(false);\n   const [isLessonDialogOpen, setIsLessonDialogOpen] = useState(false);\n   const [currentLessonId, setCurrentLessonId] = useState<string | null>(null);\n   const [performanceMetrics, setPerformanceMetrics] = useState({\n@@ -409,186 +511,8 @@\n       setError('Failed to navigate back to lessons page');\n     }\n   };\n \n-  // Update the fetchLessonData function\n-  const fetchLessonData = async (\n-    lessonId: string,\n-    topicId: string,\n-    subtopicId: string\n-  ): Promise<LessonState> => {\n-    logger.info('Initiating lesson data fetch', { lessonId, topicId, subtopicId });\n-    \n-    try {\n-      // Check localStorage first\n-      const stateKey = `lesson_state_${lessonId}`;\n-      const savedState = localStorage.getItem(stateKey);\n-      \n-      if (savedState) {\n-        try {\n-          const parsedState = JSON.parse(savedState);\n-          logger.info('Found cached lesson state', { stateKey });\n-          return parsedState;\n-        } catch (e) {\n-          logger.warn('Failed to parse cached lesson state', e);\n-        }\n-      }\n-\n-      // Fetch lesson data with detailed logging\n-      const startTime = performance.now();\n-      \n-      const [lessonResult, topicResult, subtopicResult] = await Promise.all([\n-        supabase\n-          .from('lessons')\n-          .select(`\n-            *,\n-            questions (\n-              *,\n-              metadata,\n-              data\n-            ),\n-            activities (*),\n-            exercise_prompts (*)\n-          `)\n-          .eq('id', lessonId)\n-          .single(),\n-          \n-        supabase\n-          .from('topics')\n-          .select('id, title')\n-          .eq('id', topicId)\n-          .single(),\n-          \n-        supabase\n-          .from('subtopics')\n-          .select('id, title')\n-          .eq('id', subtopicId)\n-          .single()\n-      ]);\n-\n-      const endTime = performance.now();\n-      logger.info('Database queries completed', {\n-        duration: `${(endTime - startTime).toFixed(2)}ms`,\n-        lessonDataSize: JSON.stringify(lessonResult.data).length,\n-        success: !lessonResult.error && !topicResult.error && !subtopicResult.error\n-      });\n-\n-      // Validate responses\n-      if (lessonResult.error) throw new Error(`Lesson fetch failed: ${lessonResult.error.message}`);\n-      if (topicResult.error) throw new Error(`Topic fetch failed: ${topicResult.error.message}`);\n-      if (subtopicResult.error) throw new Error(`Subtopic fetch failed: ${subtopicResult.error.message}`);\n-\n-      const fullState: LessonState = {\n-        lesson: {\n-          ...lessonResult.data,\n-          questions: lessonResult.data.questions || [],\n-          activities: lessonResult.data.activities || [],\n-          exercise_prompts: lessonResult.data.exercise_prompts || []\n-        },\n-        topic: topicResult.data,\n-        subtopic: subtopicResult.data\n-      };\n-\n-      // Cache the result\n-      localStorage.setItem(stateKey, JSON.stringify(fullState));\n-      logger.info('Lesson data cached successfully', { stateKey });\n-\n-      return fullState;\n-    } catch (error) {\n-      logger.error('Failed to fetch lesson data', error);\n-      throw error;\n-    }\n-  };\n-\n-  // Update the initialization effect\n-  useEffect(() => {\n-    let isMounted = true;\n-    const pageLogger = createLogger('LessonPage:Init');\n-    \n-    const initializeLessonPage = async () => {\n-      if (!params?.lessonId) {\n-        pageLogger.error('Missing lessonId parameter');\n-        setError('Invalid lesson ID');\n-        return;\n-      }\n-\n-      try {\n-        pageLogger.info('Starting page initialization', {\n-          params,\n-          searchParams: Object.fromEntries(searchParams.entries())\n-        });\n-\n-        setIsLoading(true);\n-\n-        // Validate URL parameters\n-        const urlValidation = validateUrl(params, searchParams);\n-        if (!urlValidation.isValid) {\n-          throw new Error(`Missing required parameters: ${urlValidation.missingParams.join(', ')}`);\n-        }\n-\n-        // Initialize auth\n-        const authInitialized = await initializeAuth(searchParams.get('authStateKey') || '');\n-        if (!authInitialized) {\n-          throw new Error('Authentication initialization failed');\n-        }\n-\n-        // Fetch lesson data\n-        const lessonData = await fetchLessonData(\n-          params.lessonId,\n-          searchParams.get('topicId') || '',\n-          searchParams.get('subtopicId') || ''\n-        );\n-\n-        if (!isMounted) return;\n-\n-        setLessonState(lessonData);\n-        pageLogger.info('Page initialization complete', {\n-          lessonId: lessonData.lesson.id,\n-          questionCount: lessonData.lesson.questions.length\n-        });\n-\n-      } catch (error) {\n-        pageLogger.error('Page initialization failed', error);\n-        if (isMounted) {\n-          setError(error instanceof Error ? error.message : 'Failed to initialize lesson');\n-        }\n-      } finally {\n-        if (isMounted) {\n-          setIsLoading(false);\n-          setHasAttemptedLoad(true);\n-        }\n-      }\n-    };\n-\n-    if (!hasAttemptedLoad) {\n-      initializeLessonPage();\n-    }\n-\n-    return () => {\n-      isMounted = false;\n-      pageLogger.info('Cleanup: Component unmounting');\n-    };\n-  }, [params?.lessonId, searchParams, hasAttemptedLoad]);\n-\n-  // Only navigate away if there's an error and we're not loading\n-  useEffect(() => {\n-    let navigationTimer: NodeJS.Timeout;\n-    \n-    if (error && !isLoading && hasAttemptedLoad && !navigationAttempted) {\n-      forceLog('Error detected, preparing to navigate:', error);\n-      navigationTimer = setTimeout(() => {\n-        forceLog('Executing delayed navigation due to error');\n-        navigateToLessons();\n-      }, 2000); // Give more time for logs to be visible\n-    }\n-    \n-    return () => {\n-      if (navigationTimer) {\n-        clearTimeout(navigationTimer);\n-      }\n-    };\n-  }, [error, isLoading, hasAttemptedLoad, navigationAttempted]);\n-\n   const handleEndLesson = async () => {\n     forceLog('End lesson requested');\n     const confirmed = window.confirm('Are you sure you want to end this lesson?');\n     if (confirmed) {\n"
                },
                {
                    "date": 1739346695345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -385,279 +385,179 @@\n     throw error;\n   }\n };\n \n-export default function LessonPage() {\n-  const logger = useComponentLogger('LessonPage');\n-  const params = useParams<RouteParams>();\n-  const location = useLocation();\n-  const navigate = useNavigate();\n-  const searchParams = new URLSearchParams(window.location.search);\n-  \n-  // Add React Query for data fetching\n-  const { data: lessonState, error, isLoading } = useQuery<LessonState, Error>({\n-    queryKey: ['lesson', params.lessonId, searchParams.get('topicId'), searchParams.get('subtopicId')],\n-    queryFn: () => fetchLessonContent(\n-      params.lessonId!,\n-      searchParams.get('topicId')!,\n-      searchParams.get('subtopicId')!,\n-      logger\n-    ),\n-    enabled: !!params.lessonId && !!searchParams.get('topicId') && !!searchParams.get('subtopicId'),\n-    staleTime: 5 * 60 * 1000, // Consider data fresh for 5 minutes\n-    cacheTime: 30 * 60 * 1000, // Keep in cache for 30 minutes\n-    retry: 2,\n-    onError: (error) => {\n-      logger.error('Error fetching lesson data', { error });\n-    },\n-    onSuccess: (data) => {\n-      logger.info('Lesson data loaded successfully', {\n-        lessonId: data.lesson.id,\n-        title: data.lesson.title\n-      });\n+// Add these component-specific hooks\n+const useQuestionNavigation = (totalQuestions: number) => {\n+  const [currentStep, setCurrentStep] = useState(0);\n+  const [progress, setProgress] = useState(0);\n+\n+  const goToNextQuestion = useCallback(() => {\n+    if (currentStep < totalQuestions - 1) {\n+      setCurrentStep(prev => prev + 1);\n+      setProgress(prev => prev + (100 / totalQuestions));\n     }\n-  });\n+  }, [currentStep, totalQuestions]);\n \n-  // Add performance monitoring\n-  useEffect(() => {\n-    const pageLoadTime = performance.now();\n-    logger.info('Page mounted', { loadTime: pageLoadTime });\n+  const goToPreviousQuestion = useCallback(() => {\n+    if (currentStep > 0) {\n+      setCurrentStep(prev => prev - 1);\n+      setProgress(prev => prev - (100 / totalQuestions));\n+    }\n+  }, [currentStep, totalQuestions]);\n \n-    return () => {\n-      const pageUnloadTime = performance.now();\n-      logger.info('Page unmounted', { \n-        totalTime: pageUnloadTime - pageLoadTime,\n-        lessonId: params.lessonId\n-      });\n-    };\n-  }, []);\n+  return {\n+    currentStep,\n+    progress,\n+    goToNextQuestion,\n+    goToPreviousQuestion,\n+    isFirstQuestion: currentStep === 0,\n+    isLastQuestion: currentStep === totalQuestions - 1\n+  };\n+};\n \n-  const [currentStep, setCurrentStep] = useState(0);\n-  const [progress, setProgress] = useState(0);\n-  const [activeTab, setActiveTab] = useState(\"overview\");\n-  const [hasAttemptedLoad, setHasAttemptedLoad] = useState(false);\n+// Add this for fullscreen management\n+const useFullscreenManager = (logger: ReturnType<typeof useComponentLogger>) => {\n   const [isFullscreen, setIsFullscreen] = useState(false);\n-  const [navigationAttempted, setNavigationAttempted] = useState(false);\n-  const [isLessonDialogOpen, setIsLessonDialogOpen] = useState(false);\n-  const [currentLessonId, setCurrentLessonId] = useState<string | null>(null);\n-  const [performanceMetrics, setPerformanceMetrics] = useState({\n-    initializationTime: 0,\n-    dataLoadTime: 0,\n-    renderCount: 0\n-  });\n \n-  // Function to handle entering fullscreen\n-  const enterFullscreen = async () => {\n+  const enterFullscreen = useCallback(async () => {\n     try {\n       const element = document.documentElement;\n-      if (element.requestFullscreen) {\n-        // Only attempt fullscreen if we're in a user gesture context\n-        // and the document is not already in fullscreen mode\n-        if (!document.fullscreenElement) {\n-          // Add a try-catch specifically for the requestFullscreen call\n-          try {\n-            await element.requestFullscreen();\n-            forceLog('Entered fullscreen mode successfully');\n-            setIsFullscreen(true);\n-          } catch (err) {\n-            forceLog('Fullscreen request failed (non-critical):', err, 'warn');\n-            // Non-critical error, we can continue without fullscreen\n-          }\n-        }\n-      } else {\n-        forceLog('Fullscreen API not supported', null, 'warn');\n+      if (element.requestFullscreen && !document.fullscreenElement) {\n+        await element.requestFullscreen();\n+        setIsFullscreen(true);\n+        logger.info('Entered fullscreen mode');\n       }\n     } catch (error) {\n-      // Log but don't throw - fullscreen is not critical for functionality\n-      forceLog('Error in enterFullscreen:', error, 'warn');\n+      logger.error('Failed to enter fullscreen mode', { error });\n     }\n-  };\n+  }, [logger]);\n \n-  // Function to handle exiting fullscreen\n-  const exitFullscreen = async () => {\n+  const exitFullscreen = useCallback(async () => {\n     try {\n       if (document.fullscreenElement && document.exitFullscreen) {\n         await document.exitFullscreen();\n+        setIsFullscreen(false);\n+        logger.info('Exited fullscreen mode');\n       }\n     } catch (error) {\n-      console.error('Exit fullscreen error:', error);\n+      logger.error('Failed to exit fullscreen mode', { error });\n     }\n-  };\n+  }, [logger]);\n \n-  // Function to handle navigation back to lessons page\n-  const navigateToLessons = async () => {\n-    try {\n-      if (navigationAttempted) {\n-        forceLog('Navigation already attempted, preventing duplicate');\n-        return;\n-      }\n-      \n-      setNavigationAttempted(true);\n-      forceLog('Attempting navigation to lessons page');\n-      \n-      await exitFullscreen();\n-      \n-      // Small delay to ensure logs are visible\n-      await new Promise(resolve => setTimeout(resolve, 1000));\n-      \n-      // Close the window instead of navigating\n-      window.close();\n-      \n-      // Fallback if window.close() doesn't work\n-      if (!window.closed) {\n-        window.location.href = '/app/teacher/lessons';\n-      }\n-    } catch (error) {\n-      forceLog('Navigation error:', error);\n-      setError('Failed to navigate back to lessons page');\n-    }\n-  };\n+  useEffect(() => {\n+    const handleFullscreenChange = () => {\n+      setIsFullscreen(!!document.fullscreenElement);\n+    };\n \n-  const handleEndLesson = async () => {\n-    forceLog('End lesson requested');\n+    document.addEventListener('fullscreenchange', handleFullscreenChange);\n+    return () => document.removeEventListener('fullscreenchange', handleFullscreenChange);\n+  }, []);\n+\n+  return { isFullscreen, enterFullscreen, exitFullscreen };\n+};\n+\n+export default function LessonPage() {\n+  const logger = useComponentLogger('LessonPage');\n+  const params = useParams<RouteParams>();\n+  const location = useLocation();\n+  const navigate = useNavigate();\n+  const searchParams = new URLSearchParams(window.location.search);\n+  \n+  // Use React Query for data fetching\n+  const { \n+    data: lessonState, \n+    error: fetchError, \n+    isLoading: isLoadingData \n+  } = useQuery<LessonState, Error>({\n+    queryKey: ['lesson', params.lessonId, searchParams.get('topicId'), searchParams.get('subtopicId')],\n+    queryFn: () => fetchLessonContent(\n+      params.lessonId!,\n+      searchParams.get('topicId')!,\n+      searchParams.get('subtopicId')!,\n+      logger\n+    ),\n+    enabled: !!params.lessonId && !!searchParams.get('topicId') && !!searchParams.get('subtopicId'),\n+    staleTime: 5 * 60 * 1000,\n+    cacheTime: 30 * 60 * 1000,\n+    retry: 2\n+  });\n+\n+  // Use custom hooks for feature management\n+  const { \n+    currentStep,\n+    progress,\n+    goToNextQuestion,\n+    goToPreviousQuestion,\n+    isFirstQuestion,\n+    isLastQuestion\n+  } = useQuestionNavigation(lessonState?.lesson.questions.length || 0);\n+\n+  const { isFullscreen, enterFullscreen, exitFullscreen } = useFullscreenManager(logger);\n+  const [activeTab, setActiveTab] = useState<'question' | 'teacherScript' | 'activities'>('question');\n+\n+  // Handle end lesson\n+  const handleEndLesson = useCallback(async () => {\n+    logger.info('End lesson requested');\n+    \n     const confirmed = window.confirm('Are you sure you want to end this lesson?');\n     if (confirmed) {\n-      forceLog('End lesson confirmed');\n-      // Clean up localStorage before navigating\n-      if (params?.lessonId) {\n-        const storageKey = `lesson_state_${params.lessonId}`;\n-        forceLog('Removing stored state:', storageKey);\n-        localStorage.removeItem(storageKey);\n-      }\n-      await navigateToLessons();\n-    } else {\n-      forceLog('End lesson cancelled');\n-    }\n-  };\n-\n-  const getQuestionIcon = (type: string) => {\n-    switch (type) {\n-      case 'speaking':\n-        return <Mic className=\"h-4 w-4\" />;\n-      case 'multiplechoice':\n-        return <PenTool className=\"h-4 w-4\" />;\n-      case 'fill_blanks':\n-        return <FileText className=\"h-4 w-4\" />;\n-      default:\n-        return <HelpCircle className=\"h-4 w-4\" />;\n-    }\n-  };\n-\n-  useEffect(() => {\n-    return () => {\n-        // Cleanup function\n-        forceLog('Cleaning up lesson dialog state', {\n-            source: 'LearningPathTeacher',\n-            context: {\n-                wasDialogOpen: isLessonDialogOpen,\n-                currentLessonId,\n-                timestamp: new Date().toISOString()\n-            }\n-        });\n+      logger.info('End lesson confirmed');\n+      \n+      try {\n+        await exitFullscreen();\n         \n-        // Preserve state in sessionStorage before cleanup\n-        if (currentLessonId) {\n-            const state = {\n-                lessonId: currentLessonId,\n-                dialogOpen: isLessonDialogOpen,\n-                timestamp: new Date().toISOString()\n-            };\n-            sessionStorage.setItem('lesson_dialog_state', JSON.stringify(state));\n+        // Clean up localStorage\n+        if (params?.lessonId) {\n+          const storageKey = `lesson_state_${params.lessonId}`;\n+          localStorage.removeItem(storageKey);\n+          logger.info('Cleared lesson state from storage', { storageKey });\n         }\n-    };\n-  }, [isLessonDialogOpen, currentLessonId]);\n-\n-  useEffect(() => {\n-    // Try to recover dialog state on mount\n-    const savedState = sessionStorage.getItem('lesson_dialog_state');\n-    if (savedState) {\n-        try {\n-            const state = JSON.parse(savedState);\n-            forceLog('Recovering lesson dialog state', {\n-                source: 'LearningPathTeacher',\n-                context: {\n-                    savedState: state,\n-                    timestamp: new Date().toISOString()\n-                }\n-            });\n-            \n-            if (state.dialogOpen && state.lessonId) {\n-                setCurrentLessonId(state.lessonId);\n-                setIsLessonDialogOpen(true);\n-            }\n-        } catch (error) {\n-            forceLog('Failed to recover lesson dialog state', {\n-                source: 'LearningPathTeacher',\n-                context: { error }\n-            });\n+        \n+        // Close window or navigate\n+        if (window.opener) {\n+          window.close();\n+        } else {\n+          navigate('/teacher/lessons');\n         }\n+      } catch (error) {\n+        logger.error('Error ending lesson', { error });\n+      }\n+    } else {\n+      logger.info('End lesson cancelled');\n     }\n-  }, []);\n+  }, [params?.lessonId, exitFullscreen, navigate, logger]);\n \n-  const getLessonUrl = useCallback((lessonId: string) => {\n-    const baseUrl = window.location.origin;\n-    const url = new URL(`${baseUrl}/app/teacher/lessons/${lessonId}`);\n-    \n-    // Add any necessary query parameters\n-    url.searchParams.set('dialog', 'true');\n-    url.searchParams.set('timestamp', Date.now().toString());\n-    \n-    forceLog('Constructed lesson URL', {\n-        source: 'LearningPathTeacher',\n-        context: {\n-            lessonId,\n-            url: url.toString(),\n-            baseUrl,\n-            timestamp: new Date().toISOString()\n-        }\n-    });\n-    \n-    return url.toString();\n-  }, []);\n-\n-  useEffect(() => {\n-    setPerformanceMetrics(prev => ({\n-      ...prev,\n-      renderCount: prev.renderCount + 1\n-    }));\n-\n-    logger.info('Component rendered', {\n-      metrics: performanceMetrics,\n-      currentStep,\n-      hasLessonState: !!lessonState\n-    });\n-  }, [lessonState, currentStep]);\n-\n-  if (isLoading) {\n-    forceLog('Rendering loading state');\n+  // Handle errors and loading states\n+  if (isLoadingData) {\n     return (\n       <div className=\"flex items-center justify-center min-h-screen\">\n-        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n+        <div className=\"text-center space-y-4\">\n+          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n+          <p className=\"text-sm text-muted-foreground\">Loading lesson content...</p>\n+        </div>\n       </div>\n     );\n   }\n \n-  if (!lessonState) {\n-    forceLog('Rendering error state - no lesson state found');\n+  if (fetchError || !lessonState) {\n     return (\n       <div className=\"flex items-center justify-center min-h-screen\">\n         <Card className=\"p-6\">\n-          <CardTitle className=\"text-xl mb-4\">Lesson not found</CardTitle>\n-          <Button onClick={() => navigateToLessons()}>Go Back</Button>\n+          <CardTitle className=\"text-xl mb-4\">\n+            {fetchError ? 'Error loading lesson' : 'Lesson not found'}\n+          </CardTitle>\n+          <Button onClick={handleEndLesson}>Return to Lessons</Button>\n         </Card>\n       </div>\n     );\n   }\n \n-  forceLog('Rendering lesson page with state:', {\n-    currentStep,\n-    totalSteps: lessonState.lesson.questions.length,\n-    progress\n-  });\n-\n-  const totalSteps = lessonState.lesson.questions.length;\n+  // Get current question\n   const currentQuestion = lessonState.lesson.questions[currentStep];\n \n+  // Rest of the render logic...\n+\n   return (\n     <LessonErrorBoundary>\n       <div className=\"min-h-screen bg-gradient-to-b from-background to-accent/20\">\n         {/* Top Navigation Bar */}\n@@ -682,9 +582,9 @@\n               </div>\n             </div>\n             <div className=\"flex items-center gap-4\">\n               <Progress \n-                value={(currentStep / totalSteps) * 100} \n+                value={(currentStep / lessonState.lesson.questions.length) * 100} \n                 className=\"w-40\"\n               />\n               <Button \n                 variant=\"outline\" \n@@ -752,9 +652,8 @@\n                                 currentStep === index && \"border-primary\"\n                               )} />\n                             )}\n                             <span className=\"text-sm\">Question {index + 1}</span>\n-                            {getQuestionIcon(question.type)}\n                           </motion.div>\n                         ))}\n                       </div>\n                     </div>\n@@ -784,9 +683,9 @@\n                       <Card>\n                         <CardHeader>\n                           <div className=\"flex items-center justify-between\">\n                             <Badge variant=\"outline\" className=\"bg-primary/5\">\n-                              Question {currentStep + 1} of {totalSteps}\n+                              Question {currentStep + 1} of {lessonState.lesson.questions.length}\n                             </Badge>\n                             <div className=\"flex items-center gap-2\">\n                               <Star className=\"h-4 w-4 text-yellow-500\" />\n                               <span className=\"text-sm\">{currentQuestion.points} Points</span>\n@@ -871,33 +770,30 @@\n               {/* Navigation Buttons */}\n               <div className=\"flex items-center justify-between pt-4\">\n                 <Button\n                   variant=\"outline\"\n-                  onClick={() => setCurrentStep(prev => Math.max(0, prev - 1))}\n-                  disabled={currentStep === 0}\n+                  onClick={goToPreviousQuestion}\n+                  disabled={isFirstQuestion}\n                 >\n                   <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                   Previous\n                 </Button>\n                 <Button\n                   onClick={() => {\n-                    if (currentStep < totalSteps - 1) {\n-                      setCurrentStep(prev => prev + 1);\n-                      setProgress(prev => prev + (100 / totalSteps));\n+                    if (currentStep < lessonState.lesson.questions.length - 1) {\n+                      goToNextQuestion();\n                     } else {\n                       handleEndLesson();\n                     }\n                   }}\n                 >\n-                  {currentStep < totalSteps - 1 ? (\n+                  {currentStep < lessonState.lesson.questions.length - 1 ? (\n                     <>\n                       Next\n-                      <ArrowLeft className=\"h-4 w-4 ml-2 rotate-180\" />\n                     </>\n                   ) : (\n                     <>\n                       Complete Lesson\n-                      <Flag className=\"h-4 w-4 ml-2\" />\n                     </>\n                   )}\n                 </Button>\n               </div>\n"
                },
                {
                    "date": 1739346704646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,14 +2,14 @@\n \n import { useEffect, useState, useCallback } from \"react\";\n import { useParams, useSearchParams, useNavigate, useLocation } from \"react-router-dom\";\n import { motion, AnimatePresence } from \"framer-motion\";\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n+import { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\n import { Button } from \"@/components/ui/button\";\n import { Progress } from \"@/components/ui/progress\";\n import { Badge } from \"@/components/ui/badge\";\n import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n-import { ArrowLeft, BookOpen, CheckCircle2, Clock, Flag, HelpCircle, Layout, List, Play, Settings, Star, X, Mic, PenTool, FileText } from \"lucide-react\";\n+import { ArrowLeft, BookOpen, CheckCircle2, Clock, Flag, HelpCircle, Layout, List, Play, Settings, Star, X, Mic, PenTool, FileText, Minimize2, Maximize2, ChevronLeft, ChevronRight, GraduationCap } from \"lucide-react\";\n import { cn } from \"@/lib/utils\";\n import { supabase } from \"@/lib/supabase\";\n import { Question, Activity, ExercisePrompt } from \"@/types\";\n import { useAuth } from '@/hooks/useAuth';\n@@ -455,8 +455,91 @@\n \n   return { isFullscreen, enterFullscreen, exitFullscreen };\n };\n \n+// Add these UI components\n+const QuestionCard = ({ question, isActive }: { question: Question; isActive: boolean }) => {\n+  return (\n+    <motion.div\n+      initial={{ opacity: 0, y: 20 }}\n+      animate={{ opacity: 1, y: 0 }}\n+      exit={{ opacity: 0, y: -20 }}\n+      className={cn(\n+        \"p-6 rounded-lg border\",\n+        isActive ? \"border-primary bg-primary/5\" : \"border-border\"\n+      )}\n+    >\n+      <div className=\"space-y-4\">\n+        <div className=\"flex items-center justify-between\">\n+          <h3 className=\"text-lg font-semibold\">{question.title}</h3>\n+          <Badge variant={question.type === 'speaking' ? 'default' : 'secondary'}>\n+            {question.type}\n+          </Badge>\n+        </div>\n+        <div className=\"prose prose-sm max-w-none\">\n+          {question.content}\n+        </div>\n+        {question.type === 'speaking' && (\n+          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n+            <Mic className=\"h-4 w-4\" />\n+            <span>Speaking exercise</span>\n+          </div>\n+        )}\n+      </div>\n+    </motion.div>\n+  );\n+};\n+\n+const TeacherScript = ({ script }: { script: string }) => {\n+  return (\n+    <motion.div\n+      initial={{ opacity: 0 }}\n+      animate={{ opacity: 1 }}\n+      className=\"space-y-4\"\n+    >\n+      <div className=\"flex items-center gap-2\">\n+        <GraduationCap className=\"h-5 w-5 text-primary\" />\n+        <h3 className=\"text-lg font-semibold\">Teacher's Script</h3>\n+      </div>\n+      <Card className=\"p-4\">\n+        <div className=\"prose prose-sm max-w-none\">\n+          {script}\n+        </div>\n+      </Card>\n+    </motion.div>\n+  );\n+};\n+\n+const Activities = ({ activities }: { activities: Activity[] }) => {\n+  return (\n+    <motion.div\n+      initial={{ opacity: 0 }}\n+      animate={{ opacity: 1 }}\n+      className=\"space-y-6\"\n+    >\n+      <div className=\"flex items-center gap-2\">\n+        <PlayCircle className=\"h-5 w-5 text-primary\" />\n+        <h3 className=\"text-lg font-semibold\">Activities</h3>\n+      </div>\n+      <div className=\"grid gap-4\">\n+        {activities.map((activity, index) => (\n+          <Card key={index} className=\"p-4\">\n+            <div className=\"flex items-start gap-4\">\n+              <div className=\"h-8 w-8 rounded-full bg-primary/10 flex items-center justify-center\">\n+                {index + 1}\n+              </div>\n+              <div className=\"space-y-2\">\n+                <h4 className=\"font-medium\">{activity.title}</h4>\n+                <p className=\"text-sm text-muted-foreground\">{activity.description}</p>\n+              </div>\n+            </div>\n+          </Card>\n+        ))}\n+      </div>\n+    </motion.div>\n+  );\n+};\n+\n export default function LessonPage() {\n   const logger = useComponentLogger('LessonPage');\n   const params = useParams<RouteParams>();\n   const location = useLocation();\n@@ -558,247 +641,112 @@\n   // Rest of the render logic...\n \n   return (\n     <LessonErrorBoundary>\n-      <div className=\"min-h-screen bg-gradient-to-b from-background to-accent/20\">\n-        {/* Top Navigation Bar */}\n-        <nav className=\"fixed top-0 left-0 right-0 z-50 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b\">\n-          <div className=\"flex items-center justify-between p-4\">\n-            <div className=\"flex items-center gap-4\">\n-              <Button\n-                variant=\"ghost\"\n-                size=\"icon\"\n-                onClick={handleEndLesson}\n-                className=\"hover:bg-accent\"\n-              >\n-                <X className=\"h-5 w-5\" />\n+      <div className=\"min-h-screen bg-background\">\n+        <header className=\"sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n+          <div className=\"container flex h-14 items-center\">\n+            <div className=\"mr-4 hidden md:flex\">\n+              <Button variant=\"ghost\" size=\"icon\" onClick={handleEndLesson}>\n+                <X className=\"h-4 w-4\" />\n               </Button>\n-              <div>\n-                <h1 className=\"text-lg font-semibold\">{lessonState.lesson.title}</h1>\n-                <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n-                  <span>{lessonState.topic.title}</span>\n-                  <span>•</span>\n-                  <span>{lessonState.subtopic.title}</span>\n-                </div>\n+            </div>\n+            <div className=\"flex flex-1 items-center justify-between space-x-2 md:justify-end\">\n+              <div className=\"w-full flex-1 md:w-auto md:flex-none\">\n+                <Progress \n+                  value={progress} \n+                  className=\"h-2\"\n+                />\n               </div>\n+              <nav className=\"flex items-center space-x-1\">\n+                <Button\n+                  variant=\"ghost\"\n+                  size=\"icon\"\n+                  onClick={isFullscreen ? exitFullscreen : enterFullscreen}\n+                >\n+                  {isFullscreen ? (\n+                    <Minimize2 className=\"h-4 w-4\" />\n+                  ) : (\n+                    <Maximize2 className=\"h-4 w-4\" />\n+                  )}\n+                </Button>\n+              </nav>\n             </div>\n-            <div className=\"flex items-center gap-4\">\n-              <Progress \n-                value={(currentStep / lessonState.lesson.questions.length) * 100} \n-                className=\"w-40\"\n-              />\n-              <Button \n-                variant=\"outline\" \n-                onClick={enterFullscreen}\n-                className=\"mr-2\"\n-              >\n-                Fullscreen\n-              </Button>\n-              <Button variant=\"outline\" onClick={handleEndLesson}>\n-                End Lesson\n-              </Button>\n-            </div>\n           </div>\n-        </nav>\n+        </header>\n \n-        {/* Main Content */}\n-        <main className=\"pt-24 pb-8 px-4 md:px-8 max-w-7xl mx-auto\">\n-          <div className=\"grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-8\">\n-            {/* Sidebar */}\n-            <div className=\"lg:block\">\n-              <Card className=\"sticky top-24\">\n-                <CardHeader>\n-                  <CardTitle className=\"text-lg flex items-center gap-2\">\n-                    <List className=\"h-5 w-5\" />\n-                    Lesson Overview\n-                  </CardTitle>\n-                </CardHeader>\n-                <CardContent>\n-                  <div className=\"space-y-4\">\n-                    <div className=\"flex items-center gap-2 text-sm\">\n-                      <Clock className=\"h-4 w-4 text-primary\" />\n-                      <span>{lessonState.lesson.questions.length * 2} minutes</span>\n-                    </div>\n-                    <div className=\"flex items-center gap-2 text-sm\">\n-                      <HelpCircle className=\"h-4 w-4 text-primary\" />\n-                      <span>{lessonState.lesson.questions.length} Questions</span>\n-                    </div>\n-                    <div className=\"flex items-center gap-2 text-sm\">\n-                      <Layout className=\"h-4 w-4 text-primary\" />\n-                      <span>{lessonState.lesson.activities?.length || 0} Activities</span>\n-                    </div>\n-                    \n-                    <div className=\"border-t pt-4 mt-4\">\n-                      <h3 className=\"font-medium mb-3\">Questions</h3>\n-                      <div className=\"space-y-3\">\n-                        {lessonState.lesson.questions.map((question, index) => (\n-                          <motion.div\n-                            key={index}\n-                            initial={{ opacity: 0, x: -20 }}\n-                            animate={{ opacity: 1, x: 0 }}\n-                            transition={{ delay: index * 0.1 }}\n-                            className={cn(\n-                              \"flex items-center gap-2 p-2 rounded-md transition-all duration-200\",\n-                              currentStep === index ? \"bg-accent shadow-sm\" : \"hover:bg-accent/50\",\n-                              index < currentStep && \"text-primary\"\n-                            )}\n-                            onClick={() => setCurrentStep(index)}\n-                            style={{ cursor: 'pointer' }}\n-                          >\n-                            {index < currentStep ? (\n-                              <CheckCircle2 className=\"h-4 w-4\" />\n-                            ) : (\n-                              <div className={cn(\n-                                \"h-4 w-4 rounded-full border\",\n-                                currentStep === index && \"border-primary\"\n-                              )} />\n-                            )}\n-                            <span className=\"text-sm\">Question {index + 1}</span>\n-                          </motion.div>\n-                        ))}\n-                      </div>\n-                    </div>\n-                  </div>\n-                </CardContent>\n-              </Card>\n-            </div>\n-\n-            {/* Main Content Area */}\n-            <div className=\"space-y-8\">\n-              <Tabs defaultValue=\"question\" className=\"w-full\">\n-                <TabsList className=\"mb-4\">\n+        <main className=\"container py-6\">\n+          <div className=\"grid gap-6 md:grid-cols-[1fr_300px]\">\n+            <div className=\"space-y-6\">\n+              <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as typeof activeTab)}>\n+                <TabsList>\n                   <TabsTrigger value=\"question\">Question</TabsTrigger>\n-                  <TabsTrigger value=\"teacherScript\">Teacher Script</TabsTrigger>\n+                  <TabsTrigger value=\"teacherScript\">Teacher's Script</TabsTrigger>\n                   <TabsTrigger value=\"activities\">Activities</TabsTrigger>\n                 </TabsList>\n-\n-                <AnimatePresence mode=\"wait\">\n-                  <motion.div\n-                    key={currentStep}\n-                    initial={{ opacity: 0, y: 20 }}\n-                    animate={{ opacity: 1, y: 0 }}\n-                    exit={{ opacity: 0, y: -20 }}\n-                    transition={{ duration: 0.3 }}\n-                  >\n-                    <TabsContent value=\"question\">\n-                      <Card>\n-                        <CardHeader>\n-                          <div className=\"flex items-center justify-between\">\n-                            <Badge variant=\"outline\" className=\"bg-primary/5\">\n-                              Question {currentStep + 1} of {lessonState.lesson.questions.length}\n-                            </Badge>\n-                            <div className=\"flex items-center gap-2\">\n-                              <Star className=\"h-4 w-4 text-yellow-500\" />\n-                              <span className=\"text-sm\">{currentQuestion.points} Points</span>\n-                            </div>\n-                          </div>\n-                          <CardTitle className=\"text-2xl mt-4\">\n-                            {currentQuestion.title || \"Question\"}\n-                          </CardTitle>\n-                        </CardHeader>\n-                        <CardContent className=\"space-y-6\">\n-                          <div className=\"prose prose-sm dark:prose-invert max-w-none\">\n-                            <div className=\"bg-accent/50 p-4 rounded-lg\">\n-                              <h3 className=\"text-lg font-semibold mb-2\">Prompt</h3>\n-                              <p>{currentQuestion.data.prompt || currentQuestion.content}</p>\n-                            </div>\n-\n-                            {currentQuestion.type === 'multiplechoice' && currentQuestion.metadata?.options && (\n-                              <div className=\"mt-6 space-y-4\">\n-                                {currentQuestion.metadata.options.map((option, idx) => (\n-                                  <Button\n-                                    key={idx}\n-                                    variant=\"outline\"\n-                                    className=\"w-full justify-start text-left\"\n-                                  >\n-                                    {option}\n-                                  </Button>\n-                                ))}\n-                              </div>\n-                            )}\n-\n-                            {currentQuestion.type === 'speaking' && (\n-                              <div className=\"mt-6\">\n-                                <Button className=\"w-full justify-center gap-2\">\n-                                  <Mic className=\"h-4 w-4\" />\n-                                  Start Recording\n-                                </Button>\n-                              </div>\n-                            )}\n-                          </div>\n-                        </CardContent>\n-                      </Card>\n-                    </TabsContent>\n-\n-                    <TabsContent value=\"teacherScript\">\n-                      <Card>\n-                        <CardContent className=\"p-6\">\n-                          <div className=\"prose prose-sm dark:prose-invert max-w-none\">\n-                            <h3 className=\"text-lg font-semibold mb-4\">Teacher Script</h3>\n-                            <div className=\"bg-accent/50 p-4 rounded-lg\">\n-                              {currentQuestion.data.teacherScript || \"No teacher script available.\"}\n-                            </div>\n-                          </div>\n-                        </CardContent>\n-                      </Card>\n-                    </TabsContent>\n-\n-                    <TabsContent value=\"activities\">\n-                      <Card>\n-                        <CardContent className=\"p-6\">\n-                          <div className=\"prose prose-sm dark:prose-invert max-w-none\">\n-                            <h3 className=\"text-lg font-semibold mb-4\">Activities</h3>\n-                            {lessonState.lesson.activities?.length > 0 ? (\n-                              <div className=\"space-y-4\">\n-                                {lessonState.lesson.activities.map((activity, idx) => (\n-                                  <div key={idx} className=\"bg-accent/50 p-4 rounded-lg\">\n-                                    <h4 className=\"font-medium\">{activity.title}</h4>\n-                                    <p>{activity.description}</p>\n-                                  </div>\n-                                ))}\n-                              </div>\n-                            ) : (\n-                              <p>No activities available for this lesson.</p>\n-                            )}\n-                          </div>\n-                        </CardContent>\n-                      </Card>\n-                    </TabsContent>\n-                  </motion.div>\n-                </AnimatePresence>\n+                <TabsContent value=\"question\" className=\"mt-6\">\n+                  <QuestionCard question={currentQuestion} isActive={true} />\n+                </TabsContent>\n+                <TabsContent value=\"teacherScript\" className=\"mt-6\">\n+                  <TeacherScript script={currentQuestion.data.teacherScript} />\n+                </TabsContent>\n+                <TabsContent value=\"activities\" className=\"mt-6\">\n+                  <Activities activities={currentQuestion.activities} />\n+                </TabsContent>\n               </Tabs>\n \n-              {/* Navigation Buttons */}\n-              <div className=\"flex items-center justify-between pt-4\">\n+              <div className=\"flex items-center justify-between\">\n                 <Button\n                   variant=\"outline\"\n                   onClick={goToPreviousQuestion}\n                   disabled={isFirstQuestion}\n                 >\n-                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\n+                  <ChevronLeft className=\"h-4 w-4 mr-2\" />\n                   Previous\n                 </Button>\n                 <Button\n-                  onClick={() => {\n-                    if (currentStep < lessonState.lesson.questions.length - 1) {\n-                      goToNextQuestion();\n-                    } else {\n-                      handleEndLesson();\n-                    }\n-                  }}\n+                  onClick={isLastQuestion ? handleEndLesson : goToNextQuestion}\n                 >\n-                  {currentStep < lessonState.lesson.questions.length - 1 ? (\n-                    <>\n-                      Next\n-                    </>\n-                  ) : (\n-                    <>\n-                      Complete Lesson\n-                    </>\n-                  )}\n+                  {isLastQuestion ? \"Complete Lesson\" : \"Next\"}\n+                  <ChevronRight className=\"h-4 w-4 ml-2\" />\n                 </Button>\n               </div>\n             </div>\n+\n+            <div className=\"hidden md:block\">\n+              <Card>\n+                <CardHeader>\n+                  <CardTitle>Questions</CardTitle>\n+                  <CardDescription>\n+                    {currentStep + 1} of {lessonState.lesson.questions.length} questions\n+                  </CardDescription>\n+                </CardHeader>\n+                <CardContent>\n+                  <div className=\"space-y-2\">\n+                    {lessonState.lesson.questions.map((question, index) => (\n+                      <motion.button\n+                        key={index}\n+                        onClick={() => {\n+                          const newProgress = (index / lessonState.lesson.questions.length) * 100;\n+                          setProgress(newProgress);\n+                          setCurrentStep(index);\n+                        }}\n+                        className={cn(\n+                          \"w-full p-2 text-left rounded-md transition-colors\",\n+                          currentStep === index\n+                            ? \"bg-primary text-primary-foreground\"\n+                            : \"hover:bg-muted\"\n+                        )}\n+                        whileHover={{ scale: 1.02 }}\n+                        whileTap={{ scale: 0.98 }}\n+                      >\n+                        Question {index + 1}\n+                      </motion.button>\n+                    ))}\n+                  </div>\n+                </CardContent>\n+              </Card>\n+            </div>\n           </div>\n         </main>\n       </div>\n     </LessonErrorBoundary>\n"
                },
                {
                    "date": 1739347147871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n import { Button } from \"@/components/ui/button\";\n import { Progress } from \"@/components/ui/progress\";\n import { Badge } from \"@/components/ui/badge\";\n import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n-import { ArrowLeft, BookOpen, CheckCircle2, Clock, Flag, HelpCircle, Layout, List, Play, Settings, Star, X, Mic, PenTool, FileText, Minimize2, Maximize2, ChevronLeft, ChevronRight, GraduationCap } from \"lucide-react\";\n+import { ArrowLeft, BookOpen, CheckCircle2, Clock, Flag, HelpCircle, Layout, List, Play, Settings, Star, X, Mic, PenTool, FileText, Minimize2, Maximize2, ChevronLeft, ChevronRight, GraduationCap, PlayCircle } from \"lucide-react\";\n import { cn } from \"@/lib/utils\";\n import { supabase } from \"@/lib/supabase\";\n import { Question, Activity, ExercisePrompt } from \"@/types\";\n import { useAuth } from '@/hooks/useAuth';\n"
                },
                {
                    "date": 1739347248805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,21 +2,19 @@\n \n import { useEffect, useState, useCallback } from \"react\";\n import { useParams, useSearchParams, useNavigate, useLocation } from \"react-router-dom\";\n import { motion, AnimatePresence } from \"framer-motion\";\n-import { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n import { Button } from \"@/components/ui/button\";\n import { Progress } from \"@/components/ui/progress\";\n import { Badge } from \"@/components/ui/badge\";\n import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n-import { ArrowLeft, BookOpen, CheckCircle2, Clock, Flag, HelpCircle, Layout, List, Play, Settings, Star, X, Mic, PenTool, FileText, Minimize2, Maximize2, ChevronLeft, ChevronRight, GraduationCap, PlayCircle } from \"lucide-react\";\n+import { ArrowLeft, BookOpen, CheckCircle2, Clock, Flag, HelpCircle, Layout, List, Play, Settings, Star, X, Mic, PenTool, FileText } from \"lucide-react\";\n import { cn } from \"@/lib/utils\";\n import { supabase } from \"@/lib/supabase\";\n import { Question, Activity, ExercisePrompt } from \"@/types\";\n import { useAuth } from '@/hooks/useAuth';\n import LessonErrorBoundary from '@/components/LessonErrorBoundary';\n-import { useQuery } from '@tanstack/react-query';\n-import { useComponentLogger } from '@/hooks/useComponentLogger';\n \n // Enhanced debug configuration\n const DEBUG = true;\n const LOG_TO_STORAGE = true;\n@@ -301,452 +299,686 @@\n });\n \n const logger = createLogger('LessonPage');\n \n-// Add this type for better type safety\n-interface LessonQueryResult {\n-  data: LessonState | null;\n-  error: Error | null;\n-  isLoading: boolean;\n-}\n+export default function LessonPage() {\n+  forceLog('LessonPage component mounted', { timestamp: new Date().toISOString() });\n+  \n+  const params = useParams<RouteParams>();\n+  const location = useLocation();\n+  const navigate = useNavigate();\n+  const searchParams = new URLSearchParams(window.location.search);\n+  \n+  // Enhanced URL validation and logging\n+  const urlValidation = validateUrl(params, searchParams);\n+  forceLog('URL Validation Result:', urlValidation, urlValidation.isValid ? 'info' : 'error');\n+  \n+  forceLog('Route information:', { \n+    params, \n+    pathname: location.pathname, \n+    search: location.search,\n+    fullUrl: window.location.href,\n+    lessonId: params?.lessonId,\n+    topicId: searchParams.get('topicId'),\n+    subtopicId: searchParams.get('subtopicId'),\n+    rawSearch: window.location.search,\n+    hash: window.location.hash,\n+    origin: window.location.origin,\n+    localStorage: Object.keys(localStorage)\n+  });\n \n-// Add this utility function for data fetching\n-const fetchLessonContent = async (\n-  lessonId: string,\n-  topicId: string,\n-  subtopicId: string,\n-  logger: ReturnType<typeof createLogger>\n-): Promise<LessonState> => {\n-  logger.info('Fetching lesson content', { lessonId, topicId, subtopicId });\n-  const startTime = performance.now();\n-\n-  try {\n-    const [lessonResult, topicResult, subtopicResult] = await Promise.all([\n-      supabase\n-        .from('lessons')\n-        .select(`\n-          *,\n-          questions (\n-            *,\n-            metadata,\n-            data\n-          ),\n-          activities (*),\n-          exercise_prompts (*)\n-        `)\n-        .eq('id', lessonId)\n-        .single(),\n-      \n-      supabase\n-        .from('topics')\n-        .select('id, title')\n-        .eq('id', topicId)\n-        .single(),\n-      \n-      supabase\n-        .from('subtopics')\n-        .select('id, title')\n-        .eq('id', subtopicId)\n-        .single()\n-    ]);\n-\n-    const endTime = performance.now();\n-    const duration = endTime - startTime;\n-\n-    logger.info('Database queries completed', {\n-      duration: `${duration.toFixed(2)}ms`,\n-      lessonDataSize: JSON.stringify(lessonResult.data).length,\n-      success: !lessonResult.error && !topicResult.error && !subtopicResult.error\n-    });\n-\n-    // Validate responses\n-    if (lessonResult.error) throw new Error(`Lesson fetch failed: ${lessonResult.error.message}`);\n-    if (topicResult.error) throw new Error(`Topic fetch failed: ${topicResult.error.message}`);\n-    if (subtopicResult.error) throw new Error(`Subtopic fetch failed: ${subtopicResult.error.message}`);\n-\n-    // Log successful data fetch\n-    logger.info('Lesson data fetched successfully', {\n-      lessonId,\n-      questionCount: lessonResult.data.questions?.length || 0,\n-      activityCount: lessonResult.data.activities?.length || 0\n-    });\n-\n-    return {\n-      lesson: {\n-        ...lessonResult.data,\n-        questions: lessonResult.data.questions || [],\n-        activities: lessonResult.data.activities || [],\n-        exercise_prompts: lessonResult.data.exercise_prompts || []\n-      },\n-      topic: topicResult.data,\n-      subtopic: subtopicResult.data\n-    };\n-  } catch (error) {\n-    logger.error('Failed to fetch lesson data', { error });\n-    throw error;\n-  }\n-};\n-\n-// Add these component-specific hooks\n-const useQuestionNavigation = (totalQuestions: number) => {\n+  const [lessonState, setLessonState] = useState<LessonState | null>(null);\n   const [currentStep, setCurrentStep] = useState(0);\n   const [progress, setProgress] = useState(0);\n+  const [isLoading, setIsLoading] = useState(true);\n+  const [activeTab, setActiveTab] = useState(\"overview\");\n+  const [hasAttemptedLoad, setHasAttemptedLoad] = useState(false);\n+  const [isFullscreen, setIsFullscreen] = useState(false);\n+  const [error, setError] = useState<string | null>(null);\n+  const [navigationAttempted, setNavigationAttempted] = useState(false);\n+  const [isLessonDialogOpen, setIsLessonDialogOpen] = useState(false);\n+  const [currentLessonId, setCurrentLessonId] = useState<string | null>(null);\n+  const [performanceMetrics, setPerformanceMetrics] = useState({\n+    initializationTime: 0,\n+    dataLoadTime: 0,\n+    renderCount: 0\n+  });\n \n-  const goToNextQuestion = useCallback(() => {\n-    if (currentStep < totalQuestions - 1) {\n-      setCurrentStep(prev => prev + 1);\n-      setProgress(prev => prev + (100 / totalQuestions));\n+  // Function to handle entering fullscreen\n+  const enterFullscreen = async () => {\n+    try {\n+      const element = document.documentElement;\n+      if (element.requestFullscreen) {\n+        // Only attempt fullscreen if we're in a user gesture context\n+        // and the document is not already in fullscreen mode\n+        if (!document.fullscreenElement) {\n+          // Add a try-catch specifically for the requestFullscreen call\n+          try {\n+            await element.requestFullscreen();\n+            forceLog('Entered fullscreen mode successfully');\n+            setIsFullscreen(true);\n+          } catch (err) {\n+            forceLog('Fullscreen request failed (non-critical):', err, 'warn');\n+            // Non-critical error, we can continue without fullscreen\n+          }\n+        }\n+      } else {\n+        forceLog('Fullscreen API not supported', null, 'warn');\n+      }\n+    } catch (error) {\n+      // Log but don't throw - fullscreen is not critical for functionality\n+      forceLog('Error in enterFullscreen:', error, 'warn');\n     }\n-  }, [currentStep, totalQuestions]);\n+  };\n \n-  const goToPreviousQuestion = useCallback(() => {\n-    if (currentStep > 0) {\n-      setCurrentStep(prev => prev - 1);\n-      setProgress(prev => prev - (100 / totalQuestions));\n+  // Function to handle exiting fullscreen\n+  const exitFullscreen = async () => {\n+    try {\n+      if (document.fullscreenElement && document.exitFullscreen) {\n+        await document.exitFullscreen();\n+      }\n+    } catch (error) {\n+      console.error('Exit fullscreen error:', error);\n     }\n-  }, [currentStep, totalQuestions]);\n-\n-  return {\n-    currentStep,\n-    progress,\n-    goToNextQuestion,\n-    goToPreviousQuestion,\n-    isFirstQuestion: currentStep === 0,\n-    isLastQuestion: currentStep === totalQuestions - 1\n   };\n-};\n \n-// Add this for fullscreen management\n-const useFullscreenManager = (logger: ReturnType<typeof useComponentLogger>) => {\n-  const [isFullscreen, setIsFullscreen] = useState(false);\n-\n-  const enterFullscreen = useCallback(async () => {\n+  // Function to handle navigation back to lessons page\n+  const navigateToLessons = async () => {\n     try {\n-      const element = document.documentElement;\n-      if (element.requestFullscreen && !document.fullscreenElement) {\n-        await element.requestFullscreen();\n-        setIsFullscreen(true);\n-        logger.info('Entered fullscreen mode');\n+      if (navigationAttempted) {\n+        forceLog('Navigation already attempted, preventing duplicate');\n+        return;\n       }\n+      \n+      setNavigationAttempted(true);\n+      forceLog('Attempting navigation to lessons page');\n+      \n+      await exitFullscreen();\n+      \n+      // Small delay to ensure logs are visible\n+      await new Promise(resolve => setTimeout(resolve, 1000));\n+      \n+      // Close the window instead of navigating\n+      window.close();\n+      \n+      // Fallback if window.close() doesn't work\n+      if (!window.closed) {\n+        window.location.href = '/app/teacher/lessons';\n+      }\n     } catch (error) {\n-      logger.error('Failed to enter fullscreen mode', { error });\n+      forceLog('Navigation error:', error);\n+      setError('Failed to navigate back to lessons page');\n     }\n-  }, [logger]);\n+  };\n \n-  const exitFullscreen = useCallback(async () => {\n+  // Update the fetchLessonData function\n+  const fetchLessonData = async (\n+    lessonId: string,\n+    topicId: string,\n+    subtopicId: string\n+  ): Promise<LessonState> => {\n+    logger.info('Initiating lesson data fetch', { lessonId, topicId, subtopicId });\n+    \n     try {\n-      if (document.fullscreenElement && document.exitFullscreen) {\n-        await document.exitFullscreen();\n-        setIsFullscreen(false);\n-        logger.info('Exited fullscreen mode');\n+      // Check localStorage first\n+      const stateKey = `lesson_state_${lessonId}`;\n+      const savedState = localStorage.getItem(stateKey);\n+      \n+      if (savedState) {\n+        try {\n+          const parsedState = JSON.parse(savedState);\n+          logger.info('Found cached lesson state', { stateKey });\n+          return parsedState;\n+        } catch (e) {\n+          logger.warn('Failed to parse cached lesson state', e);\n+        }\n       }\n+\n+      // Fetch lesson data with detailed logging\n+      const startTime = performance.now();\n+      \n+      const [lessonResult, topicResult, subtopicResult] = await Promise.all([\n+        supabase\n+          .from('lessons')\n+          .select(`\n+            *,\n+            questions (\n+              *,\n+              metadata,\n+              data\n+            ),\n+            activities (*),\n+            exercise_prompts (*)\n+          `)\n+          .eq('id', lessonId)\n+          .single(),\n+          \n+        supabase\n+          .from('topics')\n+          .select('id, title')\n+          .eq('id', topicId)\n+          .single(),\n+          \n+        supabase\n+          .from('subtopics')\n+          .select('id, title')\n+          .eq('id', subtopicId)\n+          .single()\n+      ]);\n+\n+      const endTime = performance.now();\n+      logger.info('Database queries completed', {\n+        duration: `${(endTime - startTime).toFixed(2)}ms`,\n+        lessonDataSize: JSON.stringify(lessonResult.data).length,\n+        success: !lessonResult.error && !topicResult.error && !subtopicResult.error\n+      });\n+\n+      // Validate responses\n+      if (lessonResult.error) throw new Error(`Lesson fetch failed: ${lessonResult.error.message}`);\n+      if (topicResult.error) throw new Error(`Topic fetch failed: ${topicResult.error.message}`);\n+      if (subtopicResult.error) throw new Error(`Subtopic fetch failed: ${subtopicResult.error.message}`);\n+\n+      const fullState: LessonState = {\n+        lesson: {\n+          ...lessonResult.data,\n+          questions: lessonResult.data.questions || [],\n+          activities: lessonResult.data.activities || [],\n+          exercise_prompts: lessonResult.data.exercise_prompts || []\n+        },\n+        topic: topicResult.data,\n+        subtopic: subtopicResult.data\n+      };\n+\n+      // Cache the result\n+      localStorage.setItem(stateKey, JSON.stringify(fullState));\n+      logger.info('Lesson data cached successfully', { stateKey });\n+\n+      return fullState;\n     } catch (error) {\n-      logger.error('Failed to exit fullscreen mode', { error });\n+      logger.error('Failed to fetch lesson data', error);\n+      throw error;\n     }\n-  }, [logger]);\n+  };\n \n+  // Update the initialization effect\n   useEffect(() => {\n-    const handleFullscreenChange = () => {\n-      setIsFullscreen(!!document.fullscreenElement);\n-    };\n+    let isMounted = true;\n+    const pageLogger = createLogger('LessonPage:Init');\n+    \n+    const initializeLessonPage = async () => {\n+      if (!params?.lessonId) {\n+        pageLogger.error('Missing lessonId parameter');\n+        setError('Invalid lesson ID');\n+        return;\n+      }\n \n-    document.addEventListener('fullscreenchange', handleFullscreenChange);\n-    return () => document.removeEventListener('fullscreenchange', handleFullscreenChange);\n-  }, []);\n+      try {\n+        pageLogger.info('Starting page initialization', {\n+          params,\n+          searchParams: Object.fromEntries(searchParams.entries())\n+        });\n \n-  return { isFullscreen, enterFullscreen, exitFullscreen };\n-};\n+        setIsLoading(true);\n \n-// Add these UI components\n-const QuestionCard = ({ question, isActive }: { question: Question; isActive: boolean }) => {\n-  return (\n-    <motion.div\n-      initial={{ opacity: 0, y: 20 }}\n-      animate={{ opacity: 1, y: 0 }}\n-      exit={{ opacity: 0, y: -20 }}\n-      className={cn(\n-        \"p-6 rounded-lg border\",\n-        isActive ? \"border-primary bg-primary/5\" : \"border-border\"\n-      )}\n-    >\n-      <div className=\"space-y-4\">\n-        <div className=\"flex items-center justify-between\">\n-          <h3 className=\"text-lg font-semibold\">{question.title}</h3>\n-          <Badge variant={question.type === 'speaking' ? 'default' : 'secondary'}>\n-            {question.type}\n-          </Badge>\n-        </div>\n-        <div className=\"prose prose-sm max-w-none\">\n-          {question.content}\n-        </div>\n-        {question.type === 'speaking' && (\n-          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n-            <Mic className=\"h-4 w-4\" />\n-            <span>Speaking exercise</span>\n-          </div>\n-        )}\n-      </div>\n-    </motion.div>\n-  );\n-};\n+        // Validate URL parameters\n+        const urlValidation = validateUrl(params, searchParams);\n+        if (!urlValidation.isValid) {\n+          throw new Error(`Missing required parameters: ${urlValidation.missingParams.join(', ')}`);\n+        }\n \n-const TeacherScript = ({ script }: { script: string }) => {\n-  return (\n-    <motion.div\n-      initial={{ opacity: 0 }}\n-      animate={{ opacity: 1 }}\n-      className=\"space-y-4\"\n-    >\n-      <div className=\"flex items-center gap-2\">\n-        <GraduationCap className=\"h-5 w-5 text-primary\" />\n-        <h3 className=\"text-lg font-semibold\">Teacher's Script</h3>\n-      </div>\n-      <Card className=\"p-4\">\n-        <div className=\"prose prose-sm max-w-none\">\n-          {script}\n-        </div>\n-      </Card>\n-    </motion.div>\n-  );\n-};\n+        // Initialize auth\n+        const authInitialized = await initializeAuth(searchParams.get('authStateKey') || '');\n+        if (!authInitialized) {\n+          throw new Error('Authentication initialization failed');\n+        }\n \n-const Activities = ({ activities }: { activities: Activity[] }) => {\n-  return (\n-    <motion.div\n-      initial={{ opacity: 0 }}\n-      animate={{ opacity: 1 }}\n-      className=\"space-y-6\"\n-    >\n-      <div className=\"flex items-center gap-2\">\n-        <PlayCircle className=\"h-5 w-5 text-primary\" />\n-        <h3 className=\"text-lg font-semibold\">Activities</h3>\n-      </div>\n-      <div className=\"grid gap-4\">\n-        {activities.map((activity, index) => (\n-          <Card key={index} className=\"p-4\">\n-            <div className=\"flex items-start gap-4\">\n-              <div className=\"h-8 w-8 rounded-full bg-primary/10 flex items-center justify-center\">\n-                {index + 1}\n-              </div>\n-              <div className=\"space-y-2\">\n-                <h4 className=\"font-medium\">{activity.title}</h4>\n-                <p className=\"text-sm text-muted-foreground\">{activity.description}</p>\n-              </div>\n-            </div>\n-          </Card>\n-        ))}\n-      </div>\n-    </motion.div>\n-  );\n-};\n+        // Fetch lesson data\n+        const lessonData = await fetchLessonData(\n+          params.lessonId,\n+          searchParams.get('topicId') || '',\n+          searchParams.get('subtopicId') || ''\n+        );\n \n-export default function LessonPage() {\n-  const logger = useComponentLogger('LessonPage');\n-  const params = useParams<RouteParams>();\n-  const location = useLocation();\n-  const navigate = useNavigate();\n-  const searchParams = new URLSearchParams(window.location.search);\n-  \n-  // Use React Query for data fetching\n-  const { \n-    data: lessonState, \n-    error: fetchError, \n-    isLoading: isLoadingData \n-  } = useQuery<LessonState, Error>({\n-    queryKey: ['lesson', params.lessonId, searchParams.get('topicId'), searchParams.get('subtopicId')],\n-    queryFn: () => fetchLessonContent(\n-      params.lessonId!,\n-      searchParams.get('topicId')!,\n-      searchParams.get('subtopicId')!,\n-      logger\n-    ),\n-    enabled: !!params.lessonId && !!searchParams.get('topicId') && !!searchParams.get('subtopicId'),\n-    staleTime: 5 * 60 * 1000,\n-    cacheTime: 30 * 60 * 1000,\n-    retry: 2\n-  });\n+        if (!isMounted) return;\n \n-  // Use custom hooks for feature management\n-  const { \n-    currentStep,\n-    progress,\n-    goToNextQuestion,\n-    goToPreviousQuestion,\n-    isFirstQuestion,\n-    isLastQuestion\n-  } = useQuestionNavigation(lessonState?.lesson.questions.length || 0);\n+        setLessonState(lessonData);\n+        pageLogger.info('Page initialization complete', {\n+          lessonId: lessonData.lesson.id,\n+          questionCount: lessonData.lesson.questions.length\n+        });\n \n-  const { isFullscreen, enterFullscreen, exitFullscreen } = useFullscreenManager(logger);\n-  const [activeTab, setActiveTab] = useState<'question' | 'teacherScript' | 'activities'>('question');\n+      } catch (error) {\n+        pageLogger.error('Page initialization failed', error);\n+        if (isMounted) {\n+          setError(error instanceof Error ? error.message : 'Failed to initialize lesson');\n+        }\n+      } finally {\n+        if (isMounted) {\n+          setIsLoading(false);\n+          setHasAttemptedLoad(true);\n+        }\n+      }\n+    };\n \n-  // Handle end lesson\n-  const handleEndLesson = useCallback(async () => {\n-    logger.info('End lesson requested');\n+    if (!hasAttemptedLoad) {\n+      initializeLessonPage();\n+    }\n+\n+    return () => {\n+      isMounted = false;\n+      pageLogger.info('Cleanup: Component unmounting');\n+    };\n+  }, [params?.lessonId, searchParams, hasAttemptedLoad]);\n+\n+  // Only navigate away if there's an error and we're not loading\n+  useEffect(() => {\n+    let navigationTimer: NodeJS.Timeout;\n     \n+    if (error && !isLoading && hasAttemptedLoad && !navigationAttempted) {\n+      forceLog('Error detected, preparing to navigate:', error);\n+      navigationTimer = setTimeout(() => {\n+        forceLog('Executing delayed navigation due to error');\n+        navigateToLessons();\n+      }, 2000); // Give more time for logs to be visible\n+    }\n+    \n+    return () => {\n+      if (navigationTimer) {\n+        clearTimeout(navigationTimer);\n+      }\n+    };\n+  }, [error, isLoading, hasAttemptedLoad, navigationAttempted]);\n+\n+  const handleEndLesson = async () => {\n+    forceLog('End lesson requested');\n     const confirmed = window.confirm('Are you sure you want to end this lesson?');\n     if (confirmed) {\n-      logger.info('End lesson confirmed');\n-      \n-      try {\n-        await exitFullscreen();\n+      forceLog('End lesson confirmed');\n+      // Clean up localStorage before navigating\n+      if (params?.lessonId) {\n+        const storageKey = `lesson_state_${params.lessonId}`;\n+        forceLog('Removing stored state:', storageKey);\n+        localStorage.removeItem(storageKey);\n+      }\n+      await navigateToLessons();\n+    } else {\n+      forceLog('End lesson cancelled');\n+    }\n+  };\n+\n+  const getQuestionIcon = (type: string) => {\n+    switch (type) {\n+      case 'speaking':\n+        return <Mic className=\"h-4 w-4\" />;\n+      case 'multiplechoice':\n+        return <PenTool className=\"h-4 w-4\" />;\n+      case 'fill_blanks':\n+        return <FileText className=\"h-4 w-4\" />;\n+      default:\n+        return <HelpCircle className=\"h-4 w-4\" />;\n+    }\n+  };\n+\n+  useEffect(() => {\n+    return () => {\n+        // Cleanup function\n+        forceLog('Cleaning up lesson dialog state', {\n+            source: 'LearningPathTeacher',\n+            context: {\n+                wasDialogOpen: isLessonDialogOpen,\n+                currentLessonId,\n+                timestamp: new Date().toISOString()\n+            }\n+        });\n         \n-        // Clean up localStorage\n-        if (params?.lessonId) {\n-          const storageKey = `lesson_state_${params.lessonId}`;\n-          localStorage.removeItem(storageKey);\n-          logger.info('Cleared lesson state from storage', { storageKey });\n+        // Preserve state in sessionStorage before cleanup\n+        if (currentLessonId) {\n+            const state = {\n+                lessonId: currentLessonId,\n+                dialogOpen: isLessonDialogOpen,\n+                timestamp: new Date().toISOString()\n+            };\n+            sessionStorage.setItem('lesson_dialog_state', JSON.stringify(state));\n         }\n-        \n-        // Close window or navigate\n-        if (window.opener) {\n-          window.close();\n-        } else {\n-          navigate('/teacher/lessons');\n+    };\n+  }, [isLessonDialogOpen, currentLessonId]);\n+\n+  useEffect(() => {\n+    // Try to recover dialog state on mount\n+    const savedState = sessionStorage.getItem('lesson_dialog_state');\n+    if (savedState) {\n+        try {\n+            const state = JSON.parse(savedState);\n+            forceLog('Recovering lesson dialog state', {\n+                source: 'LearningPathTeacher',\n+                context: {\n+                    savedState: state,\n+                    timestamp: new Date().toISOString()\n+                }\n+            });\n+            \n+            if (state.dialogOpen && state.lessonId) {\n+                setCurrentLessonId(state.lessonId);\n+                setIsLessonDialogOpen(true);\n+            }\n+        } catch (error) {\n+            forceLog('Failed to recover lesson dialog state', {\n+                source: 'LearningPathTeacher',\n+                context: { error }\n+            });\n         }\n-      } catch (error) {\n-        logger.error('Error ending lesson', { error });\n-      }\n-    } else {\n-      logger.info('End lesson cancelled');\n     }\n-  }, [params?.lessonId, exitFullscreen, navigate, logger]);\n+  }, []);\n \n-  // Handle errors and loading states\n-  if (isLoadingData) {\n+  const getLessonUrl = useCallback((lessonId: string) => {\n+    const baseUrl = window.location.origin;\n+    const url = new URL(`${baseUrl}/app/teacher/lessons/${lessonId}`);\n+    \n+    // Add any necessary query parameters\n+    url.searchParams.set('dialog', 'true');\n+    url.searchParams.set('timestamp', Date.now().toString());\n+    \n+    forceLog('Constructed lesson URL', {\n+        source: 'LearningPathTeacher',\n+        context: {\n+            lessonId,\n+            url: url.toString(),\n+            baseUrl,\n+            timestamp: new Date().toISOString()\n+        }\n+    });\n+    \n+    return url.toString();\n+  }, []);\n+\n+  useEffect(() => {\n+    setPerformanceMetrics(prev => ({\n+      ...prev,\n+      renderCount: prev.renderCount + 1\n+    }));\n+\n+    logger.info('Component rendered', {\n+      metrics: performanceMetrics,\n+      currentStep,\n+      hasLessonState: !!lessonState\n+    });\n+  }, [lessonState, currentStep]);\n+\n+  if (isLoading) {\n+    forceLog('Rendering loading state');\n     return (\n       <div className=\"flex items-center justify-center min-h-screen\">\n-        <div className=\"text-center space-y-4\">\n-          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n-          <p className=\"text-sm text-muted-foreground\">Loading lesson content...</p>\n-        </div>\n+        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n       </div>\n     );\n   }\n \n-  if (fetchError || !lessonState) {\n+  if (!lessonState) {\n+    forceLog('Rendering error state - no lesson state found');\n     return (\n       <div className=\"flex items-center justify-center min-h-screen\">\n         <Card className=\"p-6\">\n-          <CardTitle className=\"text-xl mb-4\">\n-            {fetchError ? 'Error loading lesson' : 'Lesson not found'}\n-          </CardTitle>\n-          <Button onClick={handleEndLesson}>Return to Lessons</Button>\n+          <CardTitle className=\"text-xl mb-4\">Lesson not found</CardTitle>\n+          <Button onClick={() => navigateToLessons()}>Go Back</Button>\n         </Card>\n       </div>\n     );\n   }\n \n-  // Get current question\n+  forceLog('Rendering lesson page with state:', {\n+    currentStep,\n+    totalSteps: lessonState.lesson.questions.length,\n+    progress\n+  });\n+\n+  const totalSteps = lessonState.lesson.questions.length;\n   const currentQuestion = lessonState.lesson.questions[currentStep];\n \n-  // Rest of the render logic...\n-\n   return (\n     <LessonErrorBoundary>\n-      <div className=\"min-h-screen bg-background\">\n-        <header className=\"sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n-          <div className=\"container flex h-14 items-center\">\n-            <div className=\"mr-4 hidden md:flex\">\n-              <Button variant=\"ghost\" size=\"icon\" onClick={handleEndLesson}>\n-                <X className=\"h-4 w-4\" />\n+      <div className=\"min-h-screen bg-gradient-to-b from-background to-accent/20\">\n+        {/* Top Navigation Bar */}\n+        <nav className=\"fixed top-0 left-0 right-0 z-50 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b\">\n+          <div className=\"flex items-center justify-between p-4\">\n+            <div className=\"flex items-center gap-4\">\n+              <Button\n+                variant=\"ghost\"\n+                size=\"icon\"\n+                onClick={handleEndLesson}\n+                className=\"hover:bg-accent\"\n+              >\n+                <X className=\"h-5 w-5\" />\n               </Button>\n-            </div>\n-            <div className=\"flex flex-1 items-center justify-between space-x-2 md:justify-end\">\n-              <div className=\"w-full flex-1 md:w-auto md:flex-none\">\n-                <Progress \n-                  value={progress} \n-                  className=\"h-2\"\n-                />\n+              <div>\n+                <h1 className=\"text-lg font-semibold\">{lessonState.lesson.title}</h1>\n+                <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n+                  <span>{lessonState.topic.title}</span>\n+                  <span>•</span>\n+                  <span>{lessonState.subtopic.title}</span>\n+                </div>\n               </div>\n-              <nav className=\"flex items-center space-x-1\">\n-                <Button\n-                  variant=\"ghost\"\n-                  size=\"icon\"\n-                  onClick={isFullscreen ? exitFullscreen : enterFullscreen}\n-                >\n-                  {isFullscreen ? (\n-                    <Minimize2 className=\"h-4 w-4\" />\n-                  ) : (\n-                    <Maximize2 className=\"h-4 w-4\" />\n-                  )}\n-                </Button>\n-              </nav>\n             </div>\n+            <div className=\"flex items-center gap-4\">\n+              <Progress \n+                value={(currentStep / totalSteps) * 100} \n+                className=\"w-40\"\n+              />\n+              <Button \n+                variant=\"outline\" \n+                onClick={enterFullscreen}\n+                className=\"mr-2\"\n+              >\n+                Fullscreen\n+              </Button>\n+              <Button variant=\"outline\" onClick={handleEndLesson}>\n+                End Lesson\n+              </Button>\n+            </div>\n           </div>\n-        </header>\n+        </nav>\n \n-        <main className=\"container py-6\">\n-          <div className=\"grid gap-6 md:grid-cols-[1fr_300px]\">\n-            <div className=\"space-y-6\">\n-              <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as typeof activeTab)}>\n-                <TabsList>\n+        {/* Main Content */}\n+        <main className=\"pt-24 pb-8 px-4 md:px-8 max-w-7xl mx-auto\">\n+          <div className=\"grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-8\">\n+            {/* Sidebar */}\n+            <div className=\"lg:block\">\n+              <Card className=\"sticky top-24\">\n+                <CardHeader>\n+                  <CardTitle className=\"text-lg flex items-center gap-2\">\n+                    <List className=\"h-5 w-5\" />\n+                    Lesson Overview\n+                  </CardTitle>\n+                </CardHeader>\n+                <CardContent>\n+                  <div className=\"space-y-4\">\n+                    <div className=\"flex items-center gap-2 text-sm\">\n+                      <Clock className=\"h-4 w-4 text-primary\" />\n+                      <span>{lessonState.lesson.questions.length * 2} minutes</span>\n+                    </div>\n+                    <div className=\"flex items-center gap-2 text-sm\">\n+                      <HelpCircle className=\"h-4 w-4 text-primary\" />\n+                      <span>{lessonState.lesson.questions.length} Questions</span>\n+                    </div>\n+                    <div className=\"flex items-center gap-2 text-sm\">\n+                      <Layout className=\"h-4 w-4 text-primary\" />\n+                      <span>{lessonState.lesson.activities?.length || 0} Activities</span>\n+                    </div>\n+                    \n+                    <div className=\"border-t pt-4 mt-4\">\n+                      <h3 className=\"font-medium mb-3\">Questions</h3>\n+                      <div className=\"space-y-3\">\n+                        {lessonState.lesson.questions.map((question, index) => (\n+                          <motion.div\n+                            key={index}\n+                            initial={{ opacity: 0, x: -20 }}\n+                            animate={{ opacity: 1, x: 0 }}\n+                            transition={{ delay: index * 0.1 }}\n+                            className={cn(\n+                              \"flex items-center gap-2 p-2 rounded-md transition-all duration-200\",\n+                              currentStep === index ? \"bg-accent shadow-sm\" : \"hover:bg-accent/50\",\n+                              index < currentStep && \"text-primary\"\n+                            )}\n+                            onClick={() => setCurrentStep(index)}\n+                            style={{ cursor: 'pointer' }}\n+                          >\n+                            {index < currentStep ? (\n+                              <CheckCircle2 className=\"h-4 w-4\" />\n+                            ) : (\n+                              <div className={cn(\n+                                \"h-4 w-4 rounded-full border\",\n+                                currentStep === index && \"border-primary\"\n+                              )} />\n+                            )}\n+                            <span className=\"text-sm\">Question {index + 1}</span>\n+                            {getQuestionIcon(question.type)}\n+                          </motion.div>\n+                        ))}\n+                      </div>\n+                    </div>\n+                  </div>\n+                </CardContent>\n+              </Card>\n+            </div>\n+\n+            {/* Main Content Area */}\n+            <div className=\"space-y-8\">\n+              <Tabs defaultValue=\"question\" className=\"w-full\">\n+                <TabsList className=\"mb-4\">\n                   <TabsTrigger value=\"question\">Question</TabsTrigger>\n-                  <TabsTrigger value=\"teacherScript\">Teacher's Script</TabsTrigger>\n+                  <TabsTrigger value=\"teacherScript\">Teacher Script</TabsTrigger>\n                   <TabsTrigger value=\"activities\">Activities</TabsTrigger>\n                 </TabsList>\n-                <TabsContent value=\"question\" className=\"mt-6\">\n-                  <QuestionCard question={currentQuestion} isActive={true} />\n-                </TabsContent>\n-                <TabsContent value=\"teacherScript\" className=\"mt-6\">\n-                  <TeacherScript script={currentQuestion.data.teacherScript} />\n-                </TabsContent>\n-                <TabsContent value=\"activities\" className=\"mt-6\">\n-                  <Activities activities={currentQuestion.activities} />\n-                </TabsContent>\n+\n+                <AnimatePresence mode=\"wait\">\n+                  <motion.div\n+                    key={currentStep}\n+                    initial={{ opacity: 0, y: 20 }}\n+                    animate={{ opacity: 1, y: 0 }}\n+                    exit={{ opacity: 0, y: -20 }}\n+                    transition={{ duration: 0.3 }}\n+                  >\n+                    <TabsContent value=\"question\">\n+                      <Card>\n+                        <CardHeader>\n+                          <div className=\"flex items-center justify-between\">\n+                            <Badge variant=\"outline\" className=\"bg-primary/5\">\n+                              Question {currentStep + 1} of {totalSteps}\n+                            </Badge>\n+                            <div className=\"flex items-center gap-2\">\n+                              <Star className=\"h-4 w-4 text-yellow-500\" />\n+                              <span className=\"text-sm\">{currentQuestion.points} Points</span>\n+                            </div>\n+                          </div>\n+                          <CardTitle className=\"text-2xl mt-4\">\n+                            {currentQuestion.title || \"Question\"}\n+                          </CardTitle>\n+                        </CardHeader>\n+                        <CardContent className=\"space-y-6\">\n+                          <div className=\"prose prose-sm dark:prose-invert max-w-none\">\n+                            <div className=\"bg-accent/50 p-4 rounded-lg\">\n+                              <h3 className=\"text-lg font-semibold mb-2\">Prompt</h3>\n+                              <p>{currentQuestion.data.prompt || currentQuestion.content}</p>\n+                            </div>\n+\n+                            {currentQuestion.type === 'multiplechoice' && currentQuestion.metadata?.options && (\n+                              <div className=\"mt-6 space-y-4\">\n+                                {currentQuestion.metadata.options.map((option, idx) => (\n+                                  <Button\n+                                    key={idx}\n+                                    variant=\"outline\"\n+                                    className=\"w-full justify-start text-left\"\n+                                  >\n+                                    {option}\n+                                  </Button>\n+                                ))}\n+                              </div>\n+                            )}\n+\n+                            {currentQuestion.type === 'speaking' && (\n+                              <div className=\"mt-6\">\n+                                <Button className=\"w-full justify-center gap-2\">\n+                                  <Mic className=\"h-4 w-4\" />\n+                                  Start Recording\n+                                </Button>\n+                              </div>\n+                            )}\n+                          </div>\n+                        </CardContent>\n+                      </Card>\n+                    </TabsContent>\n+\n+                    <TabsContent value=\"teacherScript\">\n+                      <Card>\n+                        <CardContent className=\"p-6\">\n+                          <div className=\"prose prose-sm dark:prose-invert max-w-none\">\n+                            <h3 className=\"text-lg font-semibold mb-4\">Teacher Script</h3>\n+                            <div className=\"bg-accent/50 p-4 rounded-lg\">\n+                              {currentQuestion.data.teacherScript || \"No teacher script available.\"}\n+                            </div>\n+                          </div>\n+                        </CardContent>\n+                      </Card>\n+                    </TabsContent>\n+\n+                    <TabsContent value=\"activities\">\n+                      <Card>\n+                        <CardContent className=\"p-6\">\n+                          <div className=\"prose prose-sm dark:prose-invert max-w-none\">\n+                            <h3 className=\"text-lg font-semibold mb-4\">Activities</h3>\n+                            {lessonState.lesson.activities?.length > 0 ? (\n+                              <div className=\"space-y-4\">\n+                                {lessonState.lesson.activities.map((activity, idx) => (\n+                                  <div key={idx} className=\"bg-accent/50 p-4 rounded-lg\">\n+                                    <h4 className=\"font-medium\">{activity.title}</h4>\n+                                    <p>{activity.description}</p>\n+                                  </div>\n+                                ))}\n+                              </div>\n+                            ) : (\n+                              <p>No activities available for this lesson.</p>\n+                            )}\n+                          </div>\n+                        </CardContent>\n+                      </Card>\n+                    </TabsContent>\n+                  </motion.div>\n+                </AnimatePresence>\n               </Tabs>\n \n-              <div className=\"flex items-center justify-between\">\n+              {/* Navigation Buttons */}\n+              <div className=\"flex items-center justify-between pt-4\">\n                 <Button\n                   variant=\"outline\"\n-                  onClick={goToPreviousQuestion}\n-                  disabled={isFirstQuestion}\n+                  onClick={() => setCurrentStep(prev => Math.max(0, prev - 1))}\n+                  disabled={currentStep === 0}\n                 >\n-                  <ChevronLeft className=\"h-4 w-4 mr-2\" />\n+                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                   Previous\n                 </Button>\n                 <Button\n-                  onClick={isLastQuestion ? handleEndLesson : goToNextQuestion}\n+                  onClick={() => {\n+                    if (currentStep < totalSteps - 1) {\n+                      setCurrentStep(prev => prev + 1);\n+                      setProgress(prev => prev + (100 / totalSteps));\n+                    } else {\n+                      handleEndLesson();\n+                    }\n+                  }}\n                 >\n-                  {isLastQuestion ? \"Complete Lesson\" : \"Next\"}\n-                  <ChevronRight className=\"h-4 w-4 ml-2\" />\n+                  {currentStep < totalSteps - 1 ? (\n+                    <>\n+                      Next\n+                      <ArrowLeft className=\"h-4 w-4 ml-2 rotate-180\" />\n+                    </>\n+                  ) : (\n+                    <>\n+                      Complete Lesson\n+                      <Flag className=\"h-4 w-4 ml-2\" />\n+                    </>\n+                  )}\n                 </Button>\n               </div>\n             </div>\n-\n-            <div className=\"hidden md:block\">\n-              <Card>\n-                <CardHeader>\n-                  <CardTitle>Questions</CardTitle>\n-                  <CardDescription>\n-                    {currentStep + 1} of {lessonState.lesson.questions.length} questions\n-                  </CardDescription>\n-                </CardHeader>\n-                <CardContent>\n-                  <div className=\"space-y-2\">\n-                    {lessonState.lesson.questions.map((question, index) => (\n-                      <motion.button\n-                        key={index}\n-                        onClick={() => {\n-                          const newProgress = (index / lessonState.lesson.questions.length) * 100;\n-                          setProgress(newProgress);\n-                          setCurrentStep(index);\n-                        }}\n-                        className={cn(\n-                          \"w-full p-2 text-left rounded-md transition-colors\",\n-                          currentStep === index\n-                            ? \"bg-primary text-primary-foreground\"\n-                            : \"hover:bg-muted\"\n-                        )}\n-                        whileHover={{ scale: 1.02 }}\n-                        whileTap={{ scale: 0.98 }}\n-                      >\n-                        Question {index + 1}\n-                      </motion.button>\n-                    ))}\n-                  </div>\n-                </CardContent>\n-              </Card>\n-            </div>\n           </div>\n         </main>\n       </div>\n     </LessonErrorBoundary>\n"
                },
                {
                    "date": 1739347296964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -228,62 +228,91 @@\n };\n \n // Add this function at the top of the lesson page component\n const initializeAuth = async (authStateKey: string): Promise<boolean> => {\n-  try {\n-    const storedAuth = localStorage.getItem(authStateKey);\n-    if (!storedAuth) {\n-      forceLog('[Auth] No stored auth state found', { authStateKey }, 'error');\n-      return false;\n-    }\n+  let retryCount = 0;\n+  const maxRetries = 3;\n \n-    const authState = JSON.parse(storedAuth);\n-    forceLog('[Auth] Restoring auth state', { \n-      instanceId: authState.instanceId,\n-      timestamp: authState.timestamp\n-    });\n+  while (retryCount < maxRetries) {\n+    try {\n+      const storedAuth = localStorage.getItem(authStateKey);\n+      if (!storedAuth) {\n+        forceLog('[Auth] No stored auth state found', { authStateKey, attempt: retryCount + 1 }, 'error');\n+        throw new Error('No stored auth state found');\n+      }\n \n-    // First try to get current session\n-    const { data: { session: currentSession } } = await supabase.auth.getSession();\n-    \n-    if (currentSession?.access_token === authState.session.access_token) {\n-      forceLog('[Auth] Session already active and matching');\n-      return true;\n-    }\n+      const authState = JSON.parse(storedAuth);\n+      forceLog('[Auth] Restoring auth state', { \n+        instanceId: authState.instanceId,\n+        timestamp: authState.timestamp,\n+        attempt: retryCount + 1\n+      });\n \n-    // Set the session\n-    const { data, error } = await supabase.auth.setSession({\n-      access_token: authState.session.access_token,\n-      refresh_token: authState.session.refresh_token\n-    });\n+      // First try to get current session\n+      const { data: { session: currentSession } } = await supabase.auth.getSession();\n+      \n+      if (currentSession?.access_token === authState.session.access_token) {\n+        forceLog('[Auth] Session already active and matching', {\n+          userId: currentSession.user.id,\n+          attempt: retryCount + 1\n+        });\n+        return true;\n+      }\n \n-    if (error) {\n-      forceLog('[Auth] Failed to restore session', error, 'error');\n-      return false;\n-    }\n+      // Set the session\n+      const { data, error } = await supabase.auth.setSession({\n+        access_token: authState.session.access_token,\n+        refresh_token: authState.session.refresh_token\n+      });\n \n-    forceLog('[Auth] Session restored successfully', {\n-      userId: data.session?.user.id,\n-      expiresAt: data.session?.expires_at\n-    });\n-\n-    // Add message listener for parent window communication\n-    window.addEventListener('message', (event) => {\n-      if (event.data.type === 'AUTH_STATE') {\n-        forceLog('[Auth] Received auth state from parent');\n-        const newAuthState = event.data.payload;\n-        localStorage.setItem(authStateKey, JSON.stringify(newAuthState));\n+      if (error) {\n+        throw error;\n       }\n-    });\n \n-    // Notify parent window we're ready\n-    window.opener?.postMessage({ type: 'LESSON_WINDOW_READY' }, '*');\n+      forceLog('[Auth] Session restored successfully', {\n+        userId: data.session?.user.id,\n+        expiresAt: data.session?.expires_at,\n+        attempt: retryCount + 1\n+      });\n \n-    return true;\n-  } catch (error) {\n-    forceLog('[Auth] Error initializing auth', error, 'error');\n-    return false;\n+      // Add message listener for parent window communication\n+      window.addEventListener('message', (event) => {\n+        if (event.data.type === 'AUTH_STATE') {\n+          forceLog('[Auth] Received auth state from parent');\n+          const newAuthState = event.data.payload;\n+          localStorage.setItem(authStateKey, JSON.stringify({\n+            ...newAuthState,\n+            lastUpdated: new Date().toISOString()\n+          }));\n+        }\n+      });\n+\n+      // Notify parent window we're ready\n+      window.opener?.postMessage({ \n+        type: 'LESSON_WINDOW_READY',\n+        payload: {\n+          sessionId: data.session?.id,\n+          timestamp: new Date().toISOString()\n+        }\n+      }, '*');\n+\n+      return true;\n+    } catch (error) {\n+      forceLog('[Auth] Error initializing auth', { \n+        error, \n+        attempt: retryCount + 1,\n+        remainingRetries: maxRetries - retryCount - 1\n+      }, 'error');\n+      \n+      retryCount++;\n+      if (retryCount < maxRetries) {\n+        await new Promise(resolve => setTimeout(resolve, 1000 * retryCount)); // Exponential backoff\n+        continue;\n+      }\n+      return false;\n+    }\n   }\n+  return false;\n };\n \n // Let's add a more robust logging utility at the top of the file\n const createLogger = (component: string) => ({\n"
                },
                {
                    "date": 1739347326522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -444,70 +444,109 @@\n     lessonId: string,\n     topicId: string,\n     subtopicId: string\n   ): Promise<LessonState> => {\n-    logger.info('Initiating lesson data fetch', { lessonId, topicId, subtopicId });\n+    const startTime = performance.now();\n+    const logger = createLogger('fetchLessonData');\n     \n+    logger.info('Starting lesson data fetch', { \n+      lessonId, \n+      topicId, \n+      subtopicId,\n+      cacheKey: `lesson_state_${lessonId}`\n+    });\n+\n     try {\n-      // Check localStorage first\n-      const stateKey = `lesson_state_${lessonId}`;\n-      const savedState = localStorage.getItem(stateKey);\n-      \n-      if (savedState) {\n+      // Check cache first\n+      const cachedData = localStorage.getItem(`lesson_state_${lessonId}`);\n+      if (cachedData) {\n         try {\n-          const parsedState = JSON.parse(savedState);\n-          logger.info('Found cached lesson state', { stateKey });\n-          return parsedState;\n+          const parsed = JSON.parse(cachedData);\n+          const cacheAge = Date.now() - (parsed.timestamp || 0);\n+          \n+          // Use cache if it's less than 5 minutes old\n+          if (cacheAge < 5 * 60 * 1000) {\n+            logger.info('Using cached lesson data', { \n+              cacheAge: `${(cacheAge / 1000).toFixed(2)}s`,\n+              dataSize: cachedData.length\n+            });\n+            return parsed.data;\n+          }\n         } catch (e) {\n-          logger.warn('Failed to parse cached lesson state', e);\n+          logger.warn('Failed to parse cached data', e);\n         }\n       }\n \n-      // Fetch lesson data with detailed logging\n-      const startTime = performance.now();\n+      // Fetch fresh data with performance tracking\n+      const fetchStart = performance.now();\n       \n       const [lessonResult, topicResult, subtopicResult] = await Promise.all([\n         supabase\n           .from('lessons')\n           .select(`\n-            *,\n+            id,\n+            title,\n+            name,\n+            content,\n+            description,\n+            topic_id,\n+            subtopic_id,\n             questions (\n-              *,\n+              id,\n+              title,\n+              content,\n+              type,\n+              data,\n               metadata,\n+              points\n+            ),\n+            activities (\n+              id,\n+              title,\n+              description,\n+              type,\n               data\n             ),\n-            activities (*),\n-            exercise_prompts (*)\n+            exercise_prompts (\n+              id,\n+              content,\n+              type,\n+              metadata\n+            )\n           `)\n           .eq('id', lessonId)\n           .single(),\n-          \n+        \n         supabase\n           .from('topics')\n           .select('id, title')\n           .eq('id', topicId)\n           .single(),\n-          \n+        \n         supabase\n           .from('subtopics')\n           .select('id, title')\n           .eq('id', subtopicId)\n           .single()\n       ]);\n \n-      const endTime = performance.now();\n+      const fetchEnd = performance.now();\n       logger.info('Database queries completed', {\n-        duration: `${(endTime - startTime).toFixed(2)}ms`,\n-        lessonDataSize: JSON.stringify(lessonResult.data).length,\n-        success: !lessonResult.error && !topicResult.error && !subtopicResult.error\n+        duration: `${(fetchEnd - fetchStart).toFixed(2)}ms`,\n+        lessonDataSize: JSON.stringify(lessonResult.data).length\n       });\n \n       // Validate responses\n       if (lessonResult.error) throw new Error(`Lesson fetch failed: ${lessonResult.error.message}`);\n       if (topicResult.error) throw new Error(`Topic fetch failed: ${topicResult.error.message}`);\n       if (subtopicResult.error) throw new Error(`Subtopic fetch failed: ${subtopicResult.error.message}`);\n \n-      const fullState: LessonState = {\n+      // Validate required data\n+      if (!lessonResult.data || !topicResult.data || !subtopicResult.data) {\n+        throw new Error('Missing required data from database');\n+      }\n+\n+      const lessonState: LessonState = {\n         lesson: {\n           ...lessonResult.data,\n           questions: lessonResult.data.questions || [],\n           activities: lessonResult.data.activities || [],\n@@ -516,15 +555,30 @@\n         topic: topicResult.data,\n         subtopic: subtopicResult.data\n       };\n \n-      // Cache the result\n-      localStorage.setItem(stateKey, JSON.stringify(fullState));\n-      logger.info('Lesson data cached successfully', { stateKey });\n+      // Cache the result with timestamp\n+      const cacheData = {\n+        data: lessonState,\n+        timestamp: Date.now()\n+      };\n+      localStorage.setItem(`lesson_state_${lessonId}`, JSON.stringify(cacheData));\n \n-      return fullState;\n+      const endTime = performance.now();\n+      logger.info('Lesson data fetch completed', {\n+        totalDuration: `${(endTime - startTime).toFixed(2)}ms`,\n+        questionCount: lessonState.lesson.questions.length,\n+        activityCount: lessonState.lesson.activities.length\n+      });\n+\n+      return lessonState;\n+\n     } catch (error) {\n-      logger.error('Failed to fetch lesson data', error);\n+      const endTime = performance.now();\n+      logger.error('Failed to fetch lesson data', {\n+        error,\n+        duration: `${(endTime - startTime).toFixed(2)}ms`\n+      });\n       throw error;\n     }\n   };\n \n"
                },
                {
                    "date": 1739347378559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,8 +164,21 @@\n     authStateKey: searchParams.get('authStateKey')\n   };\n };\n \n+// Add this type at the top with other interfaces\n+interface AuthState {\n+  session: {\n+    access_token: string;\n+    refresh_token: string;\n+    user: {\n+      id: string;\n+    };\n+  };\n+  instanceId: string;\n+  timestamp: string;\n+}\n+\n const restoreAuthState = async (authStateKey: string | null): Promise<boolean> => {\n   if (!authStateKey) {\n     forceLog('[Auth] No auth state key provided', null, 'error');\n     return false;\n@@ -239,21 +252,21 @@\n         forceLog('[Auth] No stored auth state found', { authStateKey, attempt: retryCount + 1 }, 'error');\n         throw new Error('No stored auth state found');\n       }\n \n-      const authState = JSON.parse(storedAuth);\n+      const authState = JSON.parse(storedAuth) as AuthState;\n       forceLog('[Auth] Restoring auth state', { \n         instanceId: authState.instanceId,\n         timestamp: authState.timestamp,\n         attempt: retryCount + 1\n       });\n \n       // First try to get current session\n-      const { data: { session: currentSession } } = await supabase.auth.getSession();\n+      const { data: { session } } = await supabase.auth.getSession();\n       \n-      if (currentSession?.access_token === authState.session.access_token) {\n+      if (session?.access_token === authState.session.access_token) {\n         forceLog('[Auth] Session already active and matching', {\n-          userId: currentSession.user.id,\n+          userId: session.user.id,\n           attempt: retryCount + 1\n         });\n         return true;\n       }\n@@ -263,23 +276,23 @@\n         access_token: authState.session.access_token,\n         refresh_token: authState.session.refresh_token\n       });\n \n-      if (error) {\n-        throw error;\n+      if (error || !data.session) {\n+        throw error || new Error('Failed to restore session');\n       }\n \n       forceLog('[Auth] Session restored successfully', {\n-        userId: data.session?.user.id,\n-        expiresAt: data.session?.expires_at,\n+        userId: data.session.user.id,\n+        expiresAt: data.session.expires_at,\n         attempt: retryCount + 1\n       });\n \n       // Add message listener for parent window communication\n       window.addEventListener('message', (event) => {\n         if (event.data.type === 'AUTH_STATE') {\n           forceLog('[Auth] Received auth state from parent');\n-          const newAuthState = event.data.payload;\n+          const newAuthState = event.data.payload as AuthState;\n           localStorage.setItem(authStateKey, JSON.stringify({\n             ...newAuthState,\n             lastUpdated: new Date().toISOString()\n           }));\n@@ -289,9 +302,9 @@\n       // Notify parent window we're ready\n       window.opener?.postMessage({ \n         type: 'LESSON_WINDOW_READY',\n         payload: {\n-          sessionId: data.session?.id,\n+          userId: data.session.user.id,\n           timestamp: new Date().toISOString()\n         }\n       }, '*');\n \n"
                },
                {
                    "date": 1739347397959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -341,8 +341,198 @@\n });\n \n const logger = createLogger('LessonPage');\n \n+// Update the interfaces at the top of the file\n+interface Activity {\n+  id: string;\n+  title: string;\n+  description: string;\n+  type: string;\n+  data: Record<string, any>;\n+  lesson_id: string;\n+  name: string;\n+  created_at?: string;\n+  updated_at?: string;\n+  metadata?: Record<string, any>;\n+}\n+\n+interface ExercisePrompt {\n+  id: string;\n+  content: string;\n+  type: string;\n+  metadata: Record<string, any>;\n+  text: string;\n+  created_at: string;\n+  updated_at: string;\n+  contentId: string;\n+  lesson_id: string;\n+  order?: number;\n+  status?: 'active' | 'inactive';\n+  difficulty?: 'easy' | 'medium' | 'hard';\n+}\n+\n+// Update the fetchLessonData function to handle types correctly\n+const fetchLessonData = async (\n+  lessonId: string,\n+  topicId: string,\n+  subtopicId: string\n+): Promise<LessonState> => {\n+  const startTime = performance.now();\n+  const logger = createLogger('fetchLessonData');\n+  \n+  logger.info('Starting lesson data fetch', { \n+    lessonId, \n+    topicId, \n+    subtopicId,\n+    cacheKey: `lesson_state_${lessonId}`\n+  });\n+\n+  try {\n+    // Check cache first\n+    const cachedData = localStorage.getItem(`lesson_state_${lessonId}`);\n+    if (cachedData) {\n+      try {\n+        const parsed = JSON.parse(cachedData);\n+        const cacheAge = Date.now() - (parsed.timestamp || 0);\n+        \n+        // Use cache if it's less than 5 minutes old\n+        if (cacheAge < 5 * 60 * 1000) {\n+          logger.info('Using cached lesson data', { \n+            cacheAge: `${(cacheAge / 1000).toFixed(2)}s`,\n+            dataSize: cachedData.length\n+          });\n+          return parsed.data;\n+        }\n+      } catch (e) {\n+        logger.warn('Failed to parse cached data', e);\n+      }\n+    }\n+\n+    // Fetch fresh data with performance tracking\n+    const fetchStart = performance.now();\n+    \n+    const [lessonResult, topicResult, subtopicResult] = await Promise.all([\n+      supabase\n+        .from('lessons')\n+        .select(`\n+          id,\n+          title,\n+          name,\n+          content,\n+          description,\n+          topic_id,\n+          subtopic_id,\n+          questions:questions (\n+            id,\n+            title,\n+            content,\n+            type,\n+            data,\n+            metadata,\n+            points\n+          ),\n+          activities:activities (\n+            id,\n+            title,\n+            description,\n+            type,\n+            data,\n+            lesson_id,\n+            name,\n+            created_at,\n+            updated_at,\n+            metadata\n+          ),\n+          exercise_prompts:exercise_prompts (\n+            id,\n+            content,\n+            type,\n+            metadata,\n+            text,\n+            created_at,\n+            updated_at,\n+            contentId,\n+            lesson_id,\n+            order,\n+            status,\n+            difficulty\n+          )\n+        `)\n+        .eq('id', lessonId)\n+        .single(),\n+      \n+      supabase\n+        .from('topics')\n+        .select('id, title')\n+        .eq('id', topicId)\n+        .single(),\n+      \n+      supabase\n+        .from('subtopics')\n+        .select('id, title')\n+        .eq('id', subtopicId)\n+        .single()\n+    ]);\n+\n+    const fetchEnd = performance.now();\n+    logger.info('Database queries completed', {\n+      duration: `${(fetchEnd - fetchStart).toFixed(2)}ms`,\n+      lessonDataSize: JSON.stringify(lessonResult.data).length\n+    });\n+\n+    // Validate responses\n+    if (lessonResult.error) throw new Error(`Lesson fetch failed: ${lessonResult.error.message}`);\n+    if (topicResult.error) throw new Error(`Topic fetch failed: ${topicResult.error.message}`);\n+    if (subtopicResult.error) throw new Error(`Subtopic fetch failed: ${subtopicResult.error.message}`);\n+\n+    // Validate required data\n+    if (!lessonResult.data || !topicResult.data || !subtopicResult.data) {\n+      throw new Error('Missing required data from database');\n+    }\n+\n+    // Type assertion for the database results\n+    const activities = (lessonResult.data.activities || []) as Activity[];\n+    const exercisePrompts = (lessonResult.data.exercise_prompts || []) as ExercisePrompt[];\n+\n+    const lessonState: LessonState = {\n+      lesson: {\n+        ...lessonResult.data,\n+        questions: lessonResult.data.questions || [],\n+        activities,\n+        exercise_prompts: exercisePrompts\n+      },\n+      topic: topicResult.data,\n+      subtopic: subtopicResult.data\n+    };\n+\n+    // Cache the result with timestamp\n+    const cacheData = {\n+      data: lessonState,\n+      timestamp: Date.now()\n+    };\n+    localStorage.setItem(`lesson_state_${lessonId}`, JSON.stringify(cacheData));\n+\n+    const endTime = performance.now();\n+    logger.info('Lesson data fetch completed', {\n+      totalDuration: `${(endTime - startTime).toFixed(2)}ms`,\n+      questionCount: lessonState.lesson.questions.length,\n+      activityCount: activities.length,\n+      promptCount: exercisePrompts.length\n+    });\n+\n+    return lessonState;\n+\n+  } catch (error) {\n+    const endTime = performance.now();\n+    logger.error('Failed to fetch lesson data', {\n+      error,\n+      duration: `${(endTime - startTime).toFixed(2)}ms`\n+    });\n+    throw error;\n+  }\n+};\n+\n export default function LessonPage() {\n   forceLog('LessonPage component mounted', { timestamp: new Date().toISOString() });\n   \n   const params = useParams<RouteParams>();\n@@ -451,151 +641,8 @@\n       setError('Failed to navigate back to lessons page');\n     }\n   };\n \n-  // Update the fetchLessonData function\n-  const fetchLessonData = async (\n-    lessonId: string,\n-    topicId: string,\n-    subtopicId: string\n-  ): Promise<LessonState> => {\n-    const startTime = performance.now();\n-    const logger = createLogger('fetchLessonData');\n-    \n-    logger.info('Starting lesson data fetch', { \n-      lessonId, \n-      topicId, \n-      subtopicId,\n-      cacheKey: `lesson_state_${lessonId}`\n-    });\n-\n-    try {\n-      // Check cache first\n-      const cachedData = localStorage.getItem(`lesson_state_${lessonId}`);\n-      if (cachedData) {\n-        try {\n-          const parsed = JSON.parse(cachedData);\n-          const cacheAge = Date.now() - (parsed.timestamp || 0);\n-          \n-          // Use cache if it's less than 5 minutes old\n-          if (cacheAge < 5 * 60 * 1000) {\n-            logger.info('Using cached lesson data', { \n-              cacheAge: `${(cacheAge / 1000).toFixed(2)}s`,\n-              dataSize: cachedData.length\n-            });\n-            return parsed.data;\n-          }\n-        } catch (e) {\n-          logger.warn('Failed to parse cached data', e);\n-        }\n-      }\n-\n-      // Fetch fresh data with performance tracking\n-      const fetchStart = performance.now();\n-      \n-      const [lessonResult, topicResult, subtopicResult] = await Promise.all([\n-        supabase\n-          .from('lessons')\n-          .select(`\n-            id,\n-            title,\n-            name,\n-            content,\n-            description,\n-            topic_id,\n-            subtopic_id,\n-            questions (\n-              id,\n-              title,\n-              content,\n-              type,\n-              data,\n-              metadata,\n-              points\n-            ),\n-            activities (\n-              id,\n-              title,\n-              description,\n-              type,\n-              data\n-            ),\n-            exercise_prompts (\n-              id,\n-              content,\n-              type,\n-              metadata\n-            )\n-          `)\n-          .eq('id', lessonId)\n-          .single(),\n-        \n-        supabase\n-          .from('topics')\n-          .select('id, title')\n-          .eq('id', topicId)\n-          .single(),\n-        \n-        supabase\n-          .from('subtopics')\n-          .select('id, title')\n-          .eq('id', subtopicId)\n-          .single()\n-      ]);\n-\n-      const fetchEnd = performance.now();\n-      logger.info('Database queries completed', {\n-        duration: `${(fetchEnd - fetchStart).toFixed(2)}ms`,\n-        lessonDataSize: JSON.stringify(lessonResult.data).length\n-      });\n-\n-      // Validate responses\n-      if (lessonResult.error) throw new Error(`Lesson fetch failed: ${lessonResult.error.message}`);\n-      if (topicResult.error) throw new Error(`Topic fetch failed: ${topicResult.error.message}`);\n-      if (subtopicResult.error) throw new Error(`Subtopic fetch failed: ${subtopicResult.error.message}`);\n-\n-      // Validate required data\n-      if (!lessonResult.data || !topicResult.data || !subtopicResult.data) {\n-        throw new Error('Missing required data from database');\n-      }\n-\n-      const lessonState: LessonState = {\n-        lesson: {\n-          ...lessonResult.data,\n-          questions: lessonResult.data.questions || [],\n-          activities: lessonResult.data.activities || [],\n-          exercise_prompts: lessonResult.data.exercise_prompts || []\n-        },\n-        topic: topicResult.data,\n-        subtopic: subtopicResult.data\n-      };\n-\n-      // Cache the result with timestamp\n-      const cacheData = {\n-        data: lessonState,\n-        timestamp: Date.now()\n-      };\n-      localStorage.setItem(`lesson_state_${lessonId}`, JSON.stringify(cacheData));\n-\n-      const endTime = performance.now();\n-      logger.info('Lesson data fetch completed', {\n-        totalDuration: `${(endTime - startTime).toFixed(2)}ms`,\n-        questionCount: lessonState.lesson.questions.length,\n-        activityCount: lessonState.lesson.activities.length\n-      });\n-\n-      return lessonState;\n-\n-    } catch (error) {\n-      const endTime = performance.now();\n-      logger.error('Failed to fetch lesson data', {\n-        error,\n-        duration: `${(endTime - startTime).toFixed(2)}ms`\n-      });\n-      throw error;\n-    }\n-  };\n-\n   // Update the initialization effect\n   useEffect(() => {\n     let isMounted = true;\n     const pageLogger = createLogger('LessonPage:Init');\n"
                },
                {
                    "date": 1739347406840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -370,8 +370,61 @@\n   status?: 'active' | 'inactive';\n   difficulty?: 'easy' | 'medium' | 'hard';\n }\n \n+// Add database response interfaces at the top\n+interface DatabaseActivity {\n+  id: string;\n+  title: string;\n+  description: string;\n+  type: string;\n+  data: Record<string, any>;\n+  lesson_id: string;\n+  name: string;\n+  created_at: string;\n+  updated_at: string;\n+  metadata: Record<string, any>;\n+}\n+\n+interface DatabaseExercisePrompt {\n+  id: string;\n+  content: string;\n+  type: string;\n+  metadata: Record<string, any>;\n+  text: string;\n+  created_at: string;\n+  updated_at: string;\n+  contentId: string;\n+  lesson_id: string;\n+  order: number;\n+  status: 'active' | 'inactive';\n+  difficulty: 'easy' | 'medium' | 'hard';\n+}\n+\n+interface DatabaseLessonResponse {\n+  data: {\n+    id: string;\n+    title: string;\n+    name: string;\n+    content: string;\n+    description: string;\n+    topic_id: string;\n+    subtopic_id: string;\n+    questions: Array<{\n+      id: string;\n+      title: string;\n+      content: string;\n+      type: string;\n+      data: Record<string, any>;\n+      metadata: Record<string, any>;\n+      points: number;\n+    }>;\n+    activities: DatabaseActivity[];\n+    exercise_prompts: DatabaseExercisePrompt[];\n+  } | null;\n+  error: Error | null;\n+}\n+\n // Update the fetchLessonData function to handle types correctly\n const fetchLessonData = async (\n   lessonId: string,\n   topicId: string,\n@@ -410,70 +463,56 @@\n \n     // Fetch fresh data with performance tracking\n     const fetchStart = performance.now();\n     \n-    const [lessonResult, topicResult, subtopicResult] = await Promise.all([\n-      supabase\n-        .from('lessons')\n-        .select(`\n+    const lessonResult = (await supabase\n+      .from('lessons')\n+      .select(`\n+        id,\n+        title,\n+        name,\n+        content,\n+        description,\n+        topic_id,\n+        subtopic_id,\n+        questions:questions (\n           id,\n           title,\n+          content,\n+          type,\n+          data,\n+          metadata,\n+          points\n+        ),\n+        activities:activities (\n+          id,\n+          title,\n+          description,\n+          type,\n+          data,\n+          lesson_id,\n           name,\n+          created_at,\n+          updated_at,\n+          metadata\n+        ),\n+        exercise_prompts:exercise_prompts (\n+          id,\n           content,\n-          description,\n-          topic_id,\n-          subtopic_id,\n-          questions:questions (\n-            id,\n-            title,\n-            content,\n-            type,\n-            data,\n-            metadata,\n-            points\n-          ),\n-          activities:activities (\n-            id,\n-            title,\n-            description,\n-            type,\n-            data,\n-            lesson_id,\n-            name,\n-            created_at,\n-            updated_at,\n-            metadata\n-          ),\n-          exercise_prompts:exercise_prompts (\n-            id,\n-            content,\n-            type,\n-            metadata,\n-            text,\n-            created_at,\n-            updated_at,\n-            contentId,\n-            lesson_id,\n-            order,\n-            status,\n-            difficulty\n-          )\n-        `)\n-        .eq('id', lessonId)\n-        .single(),\n-      \n-      supabase\n-        .from('topics')\n-        .select('id, title')\n-        .eq('id', topicId)\n-        .single(),\n-      \n-      supabase\n-        .from('subtopics')\n-        .select('id, title')\n-        .eq('id', subtopicId)\n-        .single()\n-    ]);\n+          type,\n+          metadata,\n+          text,\n+          created_at,\n+          updated_at,\n+          contentId,\n+          lesson_id,\n+          order,\n+          status,\n+          difficulty\n+        )\n+      `)\n+      .eq('id', lessonId)\n+      .single()) as DatabaseLessonResponse;\n \n     const fetchEnd = performance.now();\n     logger.info('Database queries completed', {\n       duration: `${(fetchEnd - fetchStart).toFixed(2)}ms`,\n@@ -481,29 +520,44 @@\n     });\n \n     // Validate responses\n     if (lessonResult.error) throw new Error(`Lesson fetch failed: ${lessonResult.error.message}`);\n-    if (topicResult.error) throw new Error(`Topic fetch failed: ${topicResult.error.message}`);\n-    if (subtopicResult.error) throw new Error(`Subtopic fetch failed: ${subtopicResult.error.message}`);\n \n     // Validate required data\n-    if (!lessonResult.data || !topicResult.data || !subtopicResult.data) {\n+    if (!lessonResult.data) {\n       throw new Error('Missing required data from database');\n     }\n \n-    // Type assertion for the database results\n-    const activities = (lessonResult.data.activities || []) as Activity[];\n-    const exercisePrompts = (lessonResult.data.exercise_prompts || []) as ExercisePrompt[];\n+    // Update the type assertions\n+    const activities = ((lessonResult.data.activities || []) as DatabaseActivity[]).map(activity => ({\n+      ...activity,\n+      data: activity.data || {},\n+      metadata: activity.metadata || {}\n+    }));\n \n+    const exercisePrompts = ((lessonResult.data.exercise_prompts || []) as DatabaseExercisePrompt[]).map(prompt => ({\n+      ...prompt,\n+      metadata: prompt.metadata || {},\n+      order: prompt.order || 0,\n+      status: prompt.status || 'active',\n+      difficulty: prompt.difficulty || 'medium'\n+    }));\n+\n     const lessonState: LessonState = {\n       lesson: {\n         ...lessonResult.data,\n         questions: lessonResult.data.questions || [],\n         activities,\n         exercise_prompts: exercisePrompts\n       },\n-      topic: topicResult.data,\n-      subtopic: subtopicResult.data\n+      topic: {\n+        id: lessonResult.data.topic_id || '',\n+        title: lessonResult.data.title || ''\n+      },\n+      subtopic: {\n+        id: lessonResult.data.subtopic_id || '',\n+        title: lessonResult.data.title || ''\n+      }\n     };\n \n     // Cache the result with timestamp\n     const cacheData = {\n"
                },
                {
                    "date": 1739347444522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -371,34 +371,15 @@\n   difficulty?: 'easy' | 'medium' | 'hard';\n }\n \n // Add database response interfaces at the top\n-interface DatabaseActivity {\n-  id: string;\n-  title: string;\n-  description: string;\n-  type: string;\n+interface DatabaseActivity extends Activity {\n   data: Record<string, any>;\n-  lesson_id: string;\n-  name: string;\n-  created_at: string;\n-  updated_at: string;\n   metadata: Record<string, any>;\n }\n \n-interface DatabaseExercisePrompt {\n-  id: string;\n-  content: string;\n-  type: string;\n+interface DatabaseExercisePrompt extends ExercisePrompt {\n   metadata: Record<string, any>;\n-  text: string;\n-  created_at: string;\n-  updated_at: string;\n-  contentId: string;\n-  lesson_id: string;\n-  order: number;\n-  status: 'active' | 'inactive';\n-  difficulty: 'easy' | 'medium' | 'hard';\n }\n \n interface DatabaseLessonResponse {\n   data: {\n@@ -463,56 +444,70 @@\n \n     // Fetch fresh data with performance tracking\n     const fetchStart = performance.now();\n     \n-    const lessonResult = (await supabase\n-      .from('lessons')\n-      .select(`\n-        id,\n-        title,\n-        name,\n-        content,\n-        description,\n-        topic_id,\n-        subtopic_id,\n-        questions:questions (\n+    const [lessonResult, topicResult, subtopicResult] = await Promise.all([\n+      supabase\n+        .from('lessons')\n+        .select(`\n           id,\n           title,\n+          name,\n           content,\n-          type,\n-          data,\n-          metadata,\n-          points\n-        ),\n-        activities:activities (\n-          id,\n-          title,\n           description,\n-          type,\n-          data,\n-          lesson_id,\n-          name,\n-          created_at,\n-          updated_at,\n-          metadata\n-        ),\n-        exercise_prompts:exercise_prompts (\n-          id,\n-          content,\n-          type,\n-          metadata,\n-          text,\n-          created_at,\n-          updated_at,\n-          contentId,\n-          lesson_id,\n-          order,\n-          status,\n-          difficulty\n-        )\n-      `)\n-      .eq('id', lessonId)\n-      .single()) as DatabaseLessonResponse;\n+          topic_id,\n+          subtopic_id,\n+          questions:questions (\n+            id,\n+            title,\n+            content,\n+            type,\n+            data,\n+            metadata,\n+            points\n+          ),\n+          activities:activities (\n+            id,\n+            title,\n+            description,\n+            type,\n+            data,\n+            lesson_id,\n+            name,\n+            created_at,\n+            updated_at,\n+            metadata\n+          ),\n+          exercise_prompts:exercise_prompts (\n+            id,\n+            content,\n+            type,\n+            metadata,\n+            text,\n+            created_at,\n+            updated_at,\n+            contentId,\n+            lesson_id,\n+            order,\n+            status,\n+            difficulty\n+          )\n+        `)\n+        .eq('id', lessonId)\n+        .single(),\n+      \n+      supabase\n+        .from('topics')\n+        .select('id, title')\n+        .eq('id', topicId)\n+        .single(),\n+      \n+      supabase\n+        .from('subtopics')\n+        .select('id, title')\n+        .eq('id', subtopicId)\n+        .single()\n+    ]) as [DatabaseLessonResponse, any, any];\n \n     const fetchEnd = performance.now();\n     logger.info('Database queries completed', {\n       duration: `${(fetchEnd - fetchStart).toFixed(2)}ms`,\n@@ -548,16 +543,10 @@\n         questions: lessonResult.data.questions || [],\n         activities,\n         exercise_prompts: exercisePrompts\n       },\n-      topic: {\n-        id: lessonResult.data.topic_id || '',\n-        title: lessonResult.data.title || ''\n-      },\n-      subtopic: {\n-        id: lessonResult.data.subtopic_id || '',\n-        title: lessonResult.data.title || ''\n-      }\n+      topic: topicResult.data,\n+      subtopic: subtopicResult.data\n     };\n \n     // Cache the result with timestamp\n     const cacheData = {\n"
                },
                {
                    "date": 1739347450077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -342,22 +342,22 @@\n \n const logger = createLogger('LessonPage');\n \n // Update the interfaces at the top of the file\n-interface Activity {\n+interface DbActivity {\n   id: string;\n   title: string;\n   description: string;\n   type: string;\n   data: Record<string, any>;\n   lesson_id: string;\n   name: string;\n-  created_at?: string;\n-  updated_at?: string;\n-  metadata?: Record<string, any>;\n+  created_at: string;\n+  updated_at: string;\n+  metadata: Record<string, any>;\n }\n \n-interface ExercisePrompt {\n+interface DbExercisePrompt {\n   id: string;\n   content: string;\n   type: string;\n   metadata: Record<string, any>;\n@@ -365,23 +365,13 @@\n   created_at: string;\n   updated_at: string;\n   contentId: string;\n   lesson_id: string;\n-  order?: number;\n-  status?: 'active' | 'inactive';\n-  difficulty?: 'easy' | 'medium' | 'hard';\n+  order: number;\n+  status: 'active' | 'inactive';\n+  difficulty: 'easy' | 'medium' | 'hard';\n }\n \n-// Add database response interfaces at the top\n-interface DatabaseActivity extends Activity {\n-  data: Record<string, any>;\n-  metadata: Record<string, any>;\n-}\n-\n-interface DatabaseExercisePrompt extends ExercisePrompt {\n-  metadata: Record<string, any>;\n-}\n-\n interface DatabaseLessonResponse {\n   data: {\n     id: string;\n     title: string;\n@@ -398,10 +388,10 @@\n       data: Record<string, any>;\n       metadata: Record<string, any>;\n       points: number;\n     }>;\n-    activities: DatabaseActivity[];\n-    exercise_prompts: DatabaseExercisePrompt[];\n+    activities: DbActivity[];\n+    exercise_prompts: DbExercisePrompt[];\n   } | null;\n   error: Error | null;\n }\n \n@@ -522,21 +512,35 @@\n       throw new Error('Missing required data from database');\n     }\n \n     // Update the type assertions\n-    const activities = ((lessonResult.data.activities || []) as DatabaseActivity[]).map(activity => ({\n-      ...activity,\n+    const activities = ((lessonResult.data.activities || []) as DbActivity[]).map(activity => ({\n+      id: activity.id,\n+      title: activity.title,\n+      description: activity.description,\n+      type: activity.type,\n       data: activity.data || {},\n+      lesson_id: activity.lesson_id,\n+      name: activity.name,\n+      created_at: activity.created_at,\n+      updated_at: activity.updated_at,\n       metadata: activity.metadata || {}\n-    }));\n+    })) as Activity[];\n \n-    const exercisePrompts = ((lessonResult.data.exercise_prompts || []) as DatabaseExercisePrompt[]).map(prompt => ({\n-      ...prompt,\n+    const exercisePrompts = ((lessonResult.data.exercise_prompts || []) as DbExercisePrompt[]).map(prompt => ({\n+      id: prompt.id,\n+      content: prompt.content,\n+      type: prompt.type,\n       metadata: prompt.metadata || {},\n+      text: prompt.text,\n+      created_at: prompt.created_at,\n+      updated_at: prompt.updated_at,\n+      contentId: prompt.contentId,\n+      lesson_id: prompt.lesson_id,\n       order: prompt.order || 0,\n       status: prompt.status || 'active',\n       difficulty: prompt.difficulty || 'medium'\n-    }));\n+    })) as ExercisePrompt[];\n \n     const lessonState: LessonState = {\n       lesson: {\n         ...lessonResult.data,\n"
                },
                {
                    "date": 1739347490451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -388,10 +388,73 @@\n       data: Record<string, any>;\n       metadata: Record<string, any>;\n       points: number;\n     }>;\n-    activities: DbActivity[];\n-    exercise_prompts: DbExercisePrompt[];\n+    activities: Array<{\n+      id: string;\n+      created_at: string;\n+      lesson_id: string;\n+      title: string;\n+      duration: number;\n+      description: string;\n+      type: string;\n+      content: string;\n+      updated_at: string;\n+      name: string;\n+      instructions: string;\n+      data: {\n+        prompt: string;\n+        teacherScript: string;\n+        media: string[];\n+      };\n+      media: Array<{\n+        url: string;\n+        type: 'image' | 'gif' | 'video';\n+      }>;\n+      score: number;\n+    }>;\n+    exercise_prompts: Array<{\n+      id: string;\n+      text: string;\n+      media: string;\n+      type: 'image' | 'gif' | 'video';\n+      narration: string;\n+      saytext: string;\n+      question_id: string;\n+      correct: boolean;\n+      created_at: string;\n+      updated_at: string;\n+      contentId: string;\n+      questionType: 'multiple-choice' | 'fill-blank' | 'matching' | 'drag-drop' | 'speaking' | 'listening' | 'writing' | 'translation';\n+      difficulty: 'beginner' | 'intermediate' | 'advanced';\n+      content: {\n+        question: string;\n+        options: string[];\n+        correctAnswer: string;\n+        pairs: Record<string, string>;\n+        correctOrder: string[];\n+        imageUrl: string;\n+        audioUrl: string;\n+        instructions: string;\n+        hints: string[];\n+      };\n+      metadata: {\n+        targetSkills: string[];\n+        prerequisites: string[];\n+        learningObjectives: string[];\n+        estimatedTime: number;\n+      };\n+      adaptiveSettings: {\n+        progressionRules: {\n+          minScore: number;\n+          requiredAttempts: number;\n+        };\n+        difficultyAdjustment: {\n+          increase: number;\n+          decrease: number;\n+        };\n+      };\n+    }>;\n   } | null;\n   error: Error | null;\n }\n \n@@ -512,35 +575,58 @@\n       throw new Error('Missing required data from database');\n     }\n \n     // Update the type assertions\n-    const activities = ((lessonResult.data.activities || []) as DbActivity[]).map(activity => ({\n+    const activities = ((lessonResult.data.activities || []) as Activity[]).map(activity => ({\n       id: activity.id,\n       title: activity.title,\n-      description: activity.description,\n+      description: activity.description || '',\n       type: activity.type,\n       data: activity.data || {},\n       lesson_id: activity.lesson_id,\n       name: activity.name,\n       created_at: activity.created_at,\n       updated_at: activity.updated_at,\n-      metadata: activity.metadata || {}\n-    })) as Activity[];\n+      content: activity.content || '',\n+      duration: activity.duration || 0,\n+      instructions: activity.instructions || '',\n+      media: activity.media || [],\n+      score: activity.score || 0\n+    }));\n \n-    const exercisePrompts = ((lessonResult.data.exercise_prompts || []) as DbExercisePrompt[]).map(prompt => ({\n+    const exercisePrompts = ((lessonResult.data.exercise_prompts || []) as ExercisePrompt[]).map(prompt => ({\n       id: prompt.id,\n-      content: prompt.content,\n+      text: prompt.text,\n+      media: prompt.media || '',\n       type: prompt.type,\n-      metadata: prompt.metadata || {},\n-      text: prompt.text,\n+      narration: prompt.narration || '',\n+      saytext: prompt.saytext || '',\n+      question_id: prompt.question_id || '',\n+      correct: prompt.correct || false,\n       created_at: prompt.created_at,\n       updated_at: prompt.updated_at,\n       contentId: prompt.contentId,\n-      lesson_id: prompt.lesson_id,\n-      order: prompt.order || 0,\n-      status: prompt.status || 'active',\n-      difficulty: prompt.difficulty || 'medium'\n-    })) as ExercisePrompt[];\n+      questionType: prompt.questionType,\n+      difficulty: prompt.difficulty,\n+      content: {\n+        question: prompt.content.question || '',\n+        options: prompt.content.options || [],\n+        correctAnswer: prompt.content.correctAnswer || '',\n+        pairs: prompt.content.pairs || {},\n+        correctOrder: prompt.content.correctOrder || [],\n+        imageUrl: prompt.content.imageUrl || '',\n+        audioUrl: prompt.content.audioUrl || '',\n+        instructions: prompt.content.instructions,\n+        hints: prompt.content.hints\n+      },\n+      metadata: {\n+        targetSkills: prompt.metadata.targetSkills,\n+        prerequisites: prompt.metadata.prerequisites,\n+        learningObjectives: prompt.metadata.learningObjectives,\n+        estimatedTime: prompt.metadata.estimatedTime\n+      },\n+      adaptiveSettings: prompt.adaptiveSettings\n+    }));\n \n     const lessonState: LessonState = {\n       lesson: {\n         ...lessonResult.data,\n"
                },
                {
                    "date": 1739347553199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -457,8 +457,78 @@\n   } | null;\n   error: Error | null;\n }\n \n+// Update the type assertions in fetchLessonData\n+const mapDbActivityToActivity = (dbActivity: any): Activity => ({\n+  id: dbActivity.id,\n+  title: dbActivity.title,\n+  description: dbActivity.description || '',\n+  type: dbActivity.type,\n+  data: {\n+    prompt: dbActivity.data?.prompt || '',\n+    teacherScript: dbActivity.data?.teacherScript || '',\n+    media: dbActivity.data?.media || []\n+  },\n+  lesson_id: dbActivity.lesson_id,\n+  name: dbActivity.name,\n+  created_at: dbActivity.created_at,\n+  content: dbActivity.content || '',\n+  duration: dbActivity.duration || 0,\n+  instructions: dbActivity.instructions || '',\n+  media: dbActivity.media || [],\n+  score: dbActivity.score || 0\n+});\n+\n+const mapDbPromptToExercisePrompt = (dbPrompt: any): ExercisePrompt => ({\n+  id: dbPrompt.id,\n+  text: dbPrompt.text,\n+  media: dbPrompt.media || '',\n+  type: dbPrompt.type,\n+  narration: dbPrompt.narration || '',\n+  saytext: dbPrompt.saytext || '',\n+  question_id: dbPrompt.question_id || '',\n+  correct: dbPrompt.correct || false,\n+  created_at: dbPrompt.created_at,\n+  updated_at: dbPrompt.updated_at,\n+  contentId: dbPrompt.contentId,\n+  questionType: dbPrompt.questionType || 'multiple-choice',\n+  difficulty: dbPrompt.difficulty || 'intermediate',\n+  content: {\n+    question: dbPrompt.content?.question || '',\n+    options: dbPrompt.content?.options || [],\n+    correctAnswer: dbPrompt.content?.correctAnswer || '',\n+    pairs: dbPrompt.content?.pairs || {},\n+    correctOrder: dbPrompt.content?.correctOrder || [],\n+    imageUrl: dbPrompt.content?.imageUrl || '',\n+    audioUrl: dbPrompt.content?.audioUrl || '',\n+    instructions: dbPrompt.content?.instructions || '',\n+    hints: dbPrompt.content?.hints || []\n+  },\n+  metadata: {\n+    targetSkills: dbPrompt.metadata?.targetSkills || [],\n+    prerequisites: dbPrompt.metadata?.prerequisites || [],\n+    learningObjectives: dbPrompt.metadata?.learningObjectives || [],\n+    estimatedTime: dbPrompt.metadata?.estimatedTime || 0\n+  },\n+  adaptiveSettings: {\n+    progressionRules: {\n+      minScore: dbPrompt.adaptiveSettings?.progressionRules?.minScore || 0,\n+      requiredAttempts: dbPrompt.adaptiveSettings?.progressionRules?.requiredAttempts || 0\n+    },\n+    difficultyAdjustment: {\n+      increase: dbPrompt.adaptiveSettings?.difficultyAdjustment?.increase || 0,\n+      decrease: dbPrompt.adaptiveSettings?.difficultyAdjustment?.decrease || 0\n+    }\n+  },\n+  createdAt: new Date(dbPrompt.created_at),\n+  updatedAt: new Date(dbPrompt.updated_at)\n+});\n+\n+// Update the data mapping in fetchLessonData\n+const activities = (lessonResult.data?.activities || []).map(mapDbActivityToActivity);\n+const exercisePrompts = (lessonResult.data?.exercise_prompts || []).map(mapDbPromptToExercisePrompt);\n+\n // Update the fetchLessonData function to handle types correctly\n const fetchLessonData = async (\n   lessonId: string,\n   topicId: string,\n"
                },
                {
                    "date": 1739347584369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -470,60 +470,66 @@\n     media: dbActivity.data?.media || []\n   },\n   lesson_id: dbActivity.lesson_id,\n   name: dbActivity.name,\n-  created_at: dbActivity.created_at,\n+  created_at: dbActivity.created_at || new Date().toISOString(),\n+  updated_at: dbActivity.updated_at || new Date().toISOString(),\n   content: dbActivity.content || '',\n   duration: dbActivity.duration || 0,\n   instructions: dbActivity.instructions || '',\n   media: dbActivity.media || [],\n   score: dbActivity.score || 0\n });\n \n-const mapDbPromptToExercisePrompt = (dbPrompt: any): ExercisePrompt => ({\n-  id: dbPrompt.id,\n-  text: dbPrompt.text,\n-  media: dbPrompt.media || '',\n-  type: dbPrompt.type,\n-  narration: dbPrompt.narration || '',\n-  saytext: dbPrompt.saytext || '',\n-  question_id: dbPrompt.question_id || '',\n-  correct: dbPrompt.correct || false,\n-  created_at: dbPrompt.created_at,\n-  updated_at: dbPrompt.updated_at,\n-  contentId: dbPrompt.contentId,\n-  questionType: dbPrompt.questionType || 'multiple-choice',\n-  difficulty: dbPrompt.difficulty || 'intermediate',\n-  content: {\n-    question: dbPrompt.content?.question || '',\n-    options: dbPrompt.content?.options || [],\n-    correctAnswer: dbPrompt.content?.correctAnswer || '',\n-    pairs: dbPrompt.content?.pairs || {},\n-    correctOrder: dbPrompt.content?.correctOrder || [],\n-    imageUrl: dbPrompt.content?.imageUrl || '',\n-    audioUrl: dbPrompt.content?.audioUrl || '',\n-    instructions: dbPrompt.content?.instructions || '',\n-    hints: dbPrompt.content?.hints || []\n-  },\n-  metadata: {\n-    targetSkills: dbPrompt.metadata?.targetSkills || [],\n-    prerequisites: dbPrompt.metadata?.prerequisites || [],\n-    learningObjectives: dbPrompt.metadata?.learningObjectives || [],\n-    estimatedTime: dbPrompt.metadata?.estimatedTime || 0\n-  },\n-  adaptiveSettings: {\n-    progressionRules: {\n-      minScore: dbPrompt.adaptiveSettings?.progressionRules?.minScore || 0,\n-      requiredAttempts: dbPrompt.adaptiveSettings?.progressionRules?.requiredAttempts || 0\n+const mapDbPromptToExercisePrompt = (dbPrompt: any): ExercisePrompt => {\n+  const createdAt = new Date(dbPrompt.created_at || new Date());\n+  const updatedAt = new Date(dbPrompt.updated_at || new Date());\n+\n+  return {\n+    id: dbPrompt.id,\n+    text: dbPrompt.text,\n+    media: dbPrompt.media || '',\n+    type: dbPrompt.type,\n+    narration: dbPrompt.narration || '',\n+    saytext: dbPrompt.saytext || '',\n+    question_id: dbPrompt.question_id || '',\n+    correct: dbPrompt.correct || false,\n+    created_at: createdAt.toISOString(),\n+    updated_at: updatedAt.toISOString(),\n+    contentId: dbPrompt.contentId,\n+    questionType: dbPrompt.questionType || 'multiple-choice',\n+    difficulty: dbPrompt.difficulty || 'intermediate',\n+    content: {\n+      question: dbPrompt.content?.question || '',\n+      options: dbPrompt.content?.options || [],\n+      correctAnswer: dbPrompt.content?.correctAnswer || '',\n+      pairs: dbPrompt.content?.pairs || {},\n+      correctOrder: dbPrompt.content?.correctOrder || [],\n+      imageUrl: dbPrompt.content?.imageUrl || '',\n+      audioUrl: dbPrompt.content?.audioUrl || '',\n+      instructions: dbPrompt.content?.instructions || '',\n+      hints: dbPrompt.content?.hints || []\n     },\n-    difficultyAdjustment: {\n-      increase: dbPrompt.adaptiveSettings?.difficultyAdjustment?.increase || 0,\n-      decrease: dbPrompt.adaptiveSettings?.difficultyAdjustment?.decrease || 0\n-    }\n-  },\n-  createdAt: new Date(dbPrompt.created_at),\n-  updatedAt: new Date(dbPrompt.updated_at)\n-});\n+    metadata: {\n+      targetSkills: dbPrompt.metadata?.targetSkills || [],\n+      prerequisites: dbPrompt.metadata?.prerequisites || [],\n+      learningObjectives: dbPrompt.metadata?.learningObjectives || [],\n+      estimatedTime: dbPrompt.metadata?.estimatedTime || 0\n+    },\n+    adaptiveSettings: {\n+      progressionRules: {\n+        minScore: dbPrompt.adaptiveSettings?.progressionRules?.minScore || 0,\n+        requiredAttempts: dbPrompt.adaptiveSettings?.progressionRules?.requiredAttempts || 0\n+      },\n+      difficultyAdjustment: {\n+        increase: dbPrompt.adaptiveSettings?.difficultyAdjustment?.increase || 0,\n+        decrease: dbPrompt.adaptiveSettings?.difficultyAdjustment?.decrease || 0\n+      }\n+    },\n+    createdAt,\n+    updatedAt\n+  };\n+};\n \n // Update the data mapping in fetchLessonData\n const activities = (lessonResult.data?.activities || []).map(mapDbActivityToActivity);\n const exercisePrompts = (lessonResult.data?.exercise_prompts || []).map(mapDbPromptToExercisePrompt);\n"
                },
                {
                    "date": 1739347591917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -457,100 +457,17 @@\n   } | null;\n   error: Error | null;\n }\n \n-// Update the type assertions in fetchLessonData\n-const mapDbActivityToActivity = (dbActivity: any): Activity => ({\n-  id: dbActivity.id,\n-  title: dbActivity.title,\n-  description: dbActivity.description || '',\n-  type: dbActivity.type,\n-  data: {\n-    prompt: dbActivity.data?.prompt || '',\n-    teacherScript: dbActivity.data?.teacherScript || '',\n-    media: dbActivity.data?.media || []\n-  },\n-  lesson_id: dbActivity.lesson_id,\n-  name: dbActivity.name,\n-  created_at: dbActivity.created_at || new Date().toISOString(),\n-  updated_at: dbActivity.updated_at || new Date().toISOString(),\n-  content: dbActivity.content || '',\n-  duration: dbActivity.duration || 0,\n-  instructions: dbActivity.instructions || '',\n-  media: dbActivity.media || [],\n-  score: dbActivity.score || 0\n-});\n-\n-const mapDbPromptToExercisePrompt = (dbPrompt: any): ExercisePrompt => {\n-  const createdAt = new Date(dbPrompt.created_at || new Date());\n-  const updatedAt = new Date(dbPrompt.updated_at || new Date());\n-\n-  return {\n-    id: dbPrompt.id,\n-    text: dbPrompt.text,\n-    media: dbPrompt.media || '',\n-    type: dbPrompt.type,\n-    narration: dbPrompt.narration || '',\n-    saytext: dbPrompt.saytext || '',\n-    question_id: dbPrompt.question_id || '',\n-    correct: dbPrompt.correct || false,\n-    created_at: createdAt.toISOString(),\n-    updated_at: updatedAt.toISOString(),\n-    contentId: dbPrompt.contentId,\n-    questionType: dbPrompt.questionType || 'multiple-choice',\n-    difficulty: dbPrompt.difficulty || 'intermediate',\n-    content: {\n-      question: dbPrompt.content?.question || '',\n-      options: dbPrompt.content?.options || [],\n-      correctAnswer: dbPrompt.content?.correctAnswer || '',\n-      pairs: dbPrompt.content?.pairs || {},\n-      correctOrder: dbPrompt.content?.correctOrder || [],\n-      imageUrl: dbPrompt.content?.imageUrl || '',\n-      audioUrl: dbPrompt.content?.audioUrl || '',\n-      instructions: dbPrompt.content?.instructions || '',\n-      hints: dbPrompt.content?.hints || []\n-    },\n-    metadata: {\n-      targetSkills: dbPrompt.metadata?.targetSkills || [],\n-      prerequisites: dbPrompt.metadata?.prerequisites || [],\n-      learningObjectives: dbPrompt.metadata?.learningObjectives || [],\n-      estimatedTime: dbPrompt.metadata?.estimatedTime || 0\n-    },\n-    adaptiveSettings: {\n-      progressionRules: {\n-        minScore: dbPrompt.adaptiveSettings?.progressionRules?.minScore || 0,\n-        requiredAttempts: dbPrompt.adaptiveSettings?.progressionRules?.requiredAttempts || 0\n-      },\n-      difficultyAdjustment: {\n-        increase: dbPrompt.adaptiveSettings?.difficultyAdjustment?.increase || 0,\n-        decrease: dbPrompt.adaptiveSettings?.difficultyAdjustment?.decrease || 0\n-      }\n-    },\n-    createdAt,\n-    updatedAt\n-  };\n-};\n-\n-// Update the data mapping in fetchLessonData\n-const activities = (lessonResult.data?.activities || []).map(mapDbActivityToActivity);\n-const exercisePrompts = (lessonResult.data?.exercise_prompts || []).map(mapDbPromptToExercisePrompt);\n-\n-// Update the fetchLessonData function to handle types correctly\n+// Update the fetchLessonData function with proper type handling\n const fetchLessonData = async (\n   lessonId: string,\n   topicId: string,\n   subtopicId: string\n ): Promise<LessonState> => {\n   const startTime = performance.now();\n   const logger = createLogger('fetchLessonData');\n   \n-  logger.info('Starting lesson data fetch', { \n-    lessonId, \n-    topicId, \n-    subtopicId,\n-    cacheKey: `lesson_state_${lessonId}`\n-  });\n-\n   try {\n     // Check cache first\n     const cachedData = localStorage.getItem(`lesson_state_${lessonId}`);\n     if (cachedData) {\n@@ -603,23 +520,30 @@\n             lesson_id,\n             name,\n             created_at,\n             updated_at,\n-            metadata\n+            content,\n+            duration,\n+            instructions,\n+            media\n           ),\n           exercise_prompts:exercise_prompts (\n             id,\n-            content,\n+            text,\n+            media,\n             type,\n-            metadata,\n-            text,\n+            narration,\n+            saytext,\n+            question_id,\n+            correct,\n             created_at,\n             updated_at,\n             contentId,\n-            lesson_id,\n-            order,\n-            status,\n-            difficulty\n+            questionType,\n+            difficulty,\n+            content,\n+            metadata,\n+            adaptiveSettings\n           )\n         `)\n         .eq('id', lessonId)\n         .single(),\n@@ -644,66 +568,89 @@\n     });\n \n     // Validate responses\n     if (lessonResult.error) throw new Error(`Lesson fetch failed: ${lessonResult.error.message}`);\n+    if (topicResult.error) throw new Error(`Topic fetch failed: ${topicResult.error.message}`);\n+    if (subtopicResult.error) throw new Error(`Subtopic fetch failed: ${subtopicResult.error.message}`);\n \n     // Validate required data\n     if (!lessonResult.data) {\n       throw new Error('Missing required data from database');\n     }\n \n-    // Update the type assertions\n-    const activities = ((lessonResult.data.activities || []) as Activity[]).map(activity => ({\n-      id: activity.id,\n-      title: activity.title,\n-      description: activity.description || '',\n-      type: activity.type,\n-      data: activity.data || {},\n-      lesson_id: activity.lesson_id,\n-      name: activity.name,\n-      created_at: activity.created_at,\n-      updated_at: activity.updated_at,\n-      content: activity.content || '',\n-      duration: activity.duration || 0,\n-      instructions: activity.instructions || '',\n-      media: activity.media || [],\n-      score: activity.score || 0\n-    }));\n-\n-    const exercisePrompts = ((lessonResult.data.exercise_prompts || []) as ExercisePrompt[]).map(prompt => ({\n-      id: prompt.id,\n-      text: prompt.text,\n-      media: prompt.media || '',\n-      type: prompt.type,\n-      narration: prompt.narration || '',\n-      saytext: prompt.saytext || '',\n-      question_id: prompt.question_id || '',\n-      correct: prompt.correct || false,\n-      created_at: prompt.created_at,\n-      updated_at: prompt.updated_at,\n-      contentId: prompt.contentId,\n-      questionType: prompt.questionType,\n-      difficulty: prompt.difficulty,\n-      content: {\n-        question: prompt.content.question || '',\n-        options: prompt.content.options || [],\n-        correctAnswer: prompt.content.correctAnswer || '',\n-        pairs: prompt.content.pairs || {},\n-        correctOrder: prompt.content.correctOrder || [],\n-        imageUrl: prompt.content.imageUrl || '',\n-        audioUrl: prompt.content.audioUrl || '',\n-        instructions: prompt.content.instructions,\n-        hints: prompt.content.hints\n+    // Map database activities to Activity type\n+    const activities = (lessonResult.data.activities || []).map((dbActivity: any): Activity => ({\n+      id: dbActivity.id,\n+      title: dbActivity.title,\n+      description: dbActivity.description || '',\n+      type: dbActivity.type,\n+      data: {\n+        prompt: dbActivity.data?.prompt || '',\n+        teacherScript: dbActivity.data?.teacherScript || '',\n+        media: dbActivity.data?.media || []\n       },\n-      metadata: {\n-        targetSkills: prompt.metadata.targetSkills,\n-        prerequisites: prompt.metadata.prerequisites,\n-        learningObjectives: prompt.metadata.learningObjectives,\n-        estimatedTime: prompt.metadata.estimatedTime\n-      },\n-      adaptiveSettings: prompt.adaptiveSettings\n+      lesson_id: dbActivity.lesson_id,\n+      name: dbActivity.name,\n+      created_at: dbActivity.created_at || new Date().toISOString(),\n+      updated_at: dbActivity.updated_at || new Date().toISOString(),\n+      content: dbActivity.content || '',\n+      duration: dbActivity.duration || 0,\n+      instructions: dbActivity.instructions || '',\n+      media: dbActivity.media || [],\n+      score: dbActivity.score || 0\n     }));\n \n+    // Map database exercise prompts to ExercisePrompt type\n+    const exercisePrompts = (lessonResult.data.exercise_prompts || []).map((dbPrompt: any): ExercisePrompt => {\n+      const createdAt = new Date(dbPrompt.created_at || new Date());\n+      const updatedAt = new Date(dbPrompt.updated_at || new Date());\n+\n+      return {\n+        id: dbPrompt.id,\n+        text: dbPrompt.text,\n+        media: dbPrompt.media || '',\n+        type: dbPrompt.type,\n+        narration: dbPrompt.narration || '',\n+        saytext: dbPrompt.saytext || '',\n+        question_id: dbPrompt.question_id || '',\n+        correct: dbPrompt.correct || false,\n+        created_at: createdAt.toISOString(),\n+        updated_at: updatedAt.toISOString(),\n+        contentId: dbPrompt.contentId,\n+        questionType: dbPrompt.questionType || 'multiple-choice',\n+        difficulty: dbPrompt.difficulty || 'intermediate',\n+        content: {\n+          question: dbPrompt.content?.question || '',\n+          options: dbPrompt.content?.options || [],\n+          correctAnswer: dbPrompt.content?.correctAnswer || '',\n+          pairs: dbPrompt.content?.pairs || {},\n+          correctOrder: dbPrompt.content?.correctOrder || [],\n+          imageUrl: dbPrompt.content?.imageUrl || '',\n+          audioUrl: dbPrompt.content?.audioUrl || '',\n+          instructions: dbPrompt.content?.instructions || '',\n+          hints: dbPrompt.content?.hints || []\n+        },\n+        metadata: {\n+          targetSkills: dbPrompt.metadata?.targetSkills || [],\n+          prerequisites: dbPrompt.metadata?.prerequisites || [],\n+          learningObjectives: dbPrompt.metadata?.learningObjectives || [],\n+          estimatedTime: dbPrompt.metadata?.estimatedTime || 0\n+        },\n+        adaptiveSettings: {\n+          progressionRules: {\n+            minScore: dbPrompt.adaptiveSettings?.progressionRules?.minScore || 0,\n+            requiredAttempts: dbPrompt.adaptiveSettings?.progressionRules?.requiredAttempts || 0\n+          },\n+          difficultyAdjustment: {\n+            increase: dbPrompt.adaptiveSettings?.difficultyAdjustment?.increase || 0,\n+            decrease: dbPrompt.adaptiveSettings?.difficultyAdjustment?.decrease || 0\n+          }\n+        },\n+        createdAt,\n+        updatedAt\n+      };\n+    });\n+\n     const lessonState: LessonState = {\n       lesson: {\n         ...lessonResult.data,\n         questions: lessonResult.data.questions || [],\n@@ -713,9 +660,9 @@\n       topic: topicResult.data,\n       subtopic: subtopicResult.data\n     };\n \n-    // Cache the result with timestamp\n+    // Cache the result\n     const cacheData = {\n       data: lessonState,\n       timestamp: Date.now()\n     };\n@@ -729,9 +676,8 @@\n       promptCount: exercisePrompts.length\n     });\n \n     return lessonState;\n-\n   } catch (error) {\n     const endTime = performance.now();\n     logger.error('Failed to fetch lesson data', {\n       error,\n"
                },
                {
                    "date": 1739347700109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -457,9 +457,9 @@\n   } | null;\n   error: Error | null;\n }\n \n-// Update the fetchLessonData function with proper type handling\n+// Update the fetchLessonData function\n const fetchLessonData = async (\n   lessonId: string,\n   topicId: string,\n   subtopicId: string\n@@ -467,31 +467,8 @@\n   const startTime = performance.now();\n   const logger = createLogger('fetchLessonData');\n   \n   try {\n-    // Check cache first\n-    const cachedData = localStorage.getItem(`lesson_state_${lessonId}`);\n-    if (cachedData) {\n-      try {\n-        const parsed = JSON.parse(cachedData);\n-        const cacheAge = Date.now() - (parsed.timestamp || 0);\n-        \n-        // Use cache if it's less than 5 minutes old\n-        if (cacheAge < 5 * 60 * 1000) {\n-          logger.info('Using cached lesson data', { \n-            cacheAge: `${(cacheAge / 1000).toFixed(2)}s`,\n-            dataSize: cachedData.length\n-          });\n-          return parsed.data;\n-        }\n-      } catch (e) {\n-        logger.warn('Failed to parse cached data', e);\n-      }\n-    }\n-\n-    // Fetch fresh data with performance tracking\n-    const fetchStart = performance.now();\n-    \n     const [lessonResult, topicResult, subtopicResult] = await Promise.all([\n       supabase\n         .from('lessons')\n         .select(`\n@@ -560,14 +537,8 @@\n         .eq('id', subtopicId)\n         .single()\n     ]) as [DatabaseLessonResponse, any, any];\n \n-    const fetchEnd = performance.now();\n-    logger.info('Database queries completed', {\n-      duration: `${(fetchEnd - fetchStart).toFixed(2)}ms`,\n-      lessonDataSize: JSON.stringify(lessonResult.data).length\n-    });\n-\n     // Validate responses\n     if (lessonResult.error) throw new Error(`Lesson fetch failed: ${lessonResult.error.message}`);\n     if (topicResult.error) throw new Error(`Topic fetch failed: ${topicResult.error.message}`);\n     if (subtopicResult.error) throw new Error(`Subtopic fetch failed: ${subtopicResult.error.message}`);\n@@ -576,57 +547,58 @@\n     if (!lessonResult.data) {\n       throw new Error('Missing required data from database');\n     }\n \n-    // Map database activities to Activity type\n-    const activities = (lessonResult.data.activities || []).map((dbActivity: any): Activity => ({\n-      id: dbActivity.id,\n-      title: dbActivity.title,\n-      description: dbActivity.description || '',\n-      type: dbActivity.type,\n-      data: {\n-        prompt: dbActivity.data?.prompt || '',\n-        teacherScript: dbActivity.data?.teacherScript || '',\n-        media: dbActivity.data?.media || []\n-      },\n-      lesson_id: dbActivity.lesson_id,\n-      name: dbActivity.name,\n-      created_at: dbActivity.created_at || new Date().toISOString(),\n-      updated_at: dbActivity.updated_at || new Date().toISOString(),\n-      content: dbActivity.content || '',\n-      duration: dbActivity.duration || 0,\n-      instructions: dbActivity.instructions || '',\n-      media: dbActivity.media || [],\n-      score: dbActivity.score || 0\n-    }));\n+    // Map activities with required fields\n+    const activities = (lessonResult.data.activities || []).map((dbActivity: any) => {\n+      const activity: Activity = {\n+        id: dbActivity.id,\n+        lesson_id: dbActivity.lesson_id,\n+        title: dbActivity.title,\n+        type: dbActivity.type,\n+        name: dbActivity.name\n+      };\n \n-    // Map database exercise prompts to ExercisePrompt type\n-    const exercisePrompts = (lessonResult.data.exercise_prompts || []).map((dbPrompt: any): ExercisePrompt => {\n-      const createdAt = new Date(dbPrompt.created_at || new Date());\n-      const updatedAt = new Date(dbPrompt.updated_at || new Date());\n+      // Add optional fields\n+      if (dbActivity.created_at) activity.created_at = dbActivity.created_at;\n+      if (dbActivity.duration) activity.duration = dbActivity.duration;\n+      if (dbActivity.description) activity.description = dbActivity.description;\n+      if (dbActivity.content) activity.content = dbActivity.content;\n+      if (dbActivity.updated_at) activity.updated_at = dbActivity.updated_at;\n+      if (dbActivity.instructions) activity.instructions = dbActivity.instructions;\n+      if (dbActivity.score) activity.score = dbActivity.score;\n \n-      return {\n+      // Handle nested objects\n+      if (dbActivity.data) {\n+        activity.data = {\n+          prompt: dbActivity.data.prompt || '',\n+          teacherScript: dbActivity.data.teacherScript || '',\n+          media: dbActivity.data.media || []\n+        };\n+      }\n+\n+      if (dbActivity.media) {\n+        activity.media = dbActivity.media.map((m: any) => ({\n+          url: m.url,\n+          type: m.type\n+        }));\n+      }\n+\n+      return activity;\n+    });\n+\n+    // Map exercise prompts with required fields\n+    const exercisePrompts = (lessonResult.data.exercise_prompts || []).map((dbPrompt: any) => {\n+      const prompt: ExercisePrompt = {\n         id: dbPrompt.id,\n         text: dbPrompt.text,\n-        media: dbPrompt.media || '',\n-        type: dbPrompt.type,\n-        narration: dbPrompt.narration || '',\n-        saytext: dbPrompt.saytext || '',\n-        question_id: dbPrompt.question_id || '',\n-        correct: dbPrompt.correct || false,\n-        created_at: createdAt.toISOString(),\n-        updated_at: updatedAt.toISOString(),\n+        type: dbPrompt.type as 'image' | 'gif' | 'video',\n+        created_at: dbPrompt.created_at,\n+        updated_at: dbPrompt.updated_at,\n         contentId: dbPrompt.contentId,\n-        questionType: dbPrompt.questionType || 'multiple-choice',\n-        difficulty: dbPrompt.difficulty || 'intermediate',\n+        questionType: dbPrompt.questionType,\n+        difficulty: dbPrompt.difficulty,\n         content: {\n-          question: dbPrompt.content?.question || '',\n-          options: dbPrompt.content?.options || [],\n-          correctAnswer: dbPrompt.content?.correctAnswer || '',\n-          pairs: dbPrompt.content?.pairs || {},\n-          correctOrder: dbPrompt.content?.correctOrder || [],\n-          imageUrl: dbPrompt.content?.imageUrl || '',\n-          audioUrl: dbPrompt.content?.audioUrl || '',\n           instructions: dbPrompt.content?.instructions || '',\n           hints: dbPrompt.content?.hints || []\n         },\n         metadata: {\n@@ -644,11 +616,29 @@\n             increase: dbPrompt.adaptiveSettings?.difficultyAdjustment?.increase || 0,\n             decrease: dbPrompt.adaptiveSettings?.difficultyAdjustment?.decrease || 0\n           }\n         },\n-        createdAt,\n-        updatedAt\n+        createdAt: new Date(dbPrompt.created_at),\n+        updatedAt: new Date(dbPrompt.updated_at)\n       };\n+\n+      // Add optional fields\n+      if (dbPrompt.media) prompt.media = dbPrompt.media;\n+      if (dbPrompt.narration) prompt.narration = dbPrompt.narration;\n+      if (dbPrompt.saytext) prompt.saytext = dbPrompt.saytext;\n+      if (dbPrompt.question_id) prompt.question_id = dbPrompt.question_id;\n+      if (dbPrompt.correct) prompt.correct = dbPrompt.correct;\n+\n+      // Add optional content fields\n+      if (dbPrompt.content?.question) prompt.content.question = dbPrompt.content.question;\n+      if (dbPrompt.content?.options) prompt.content.options = dbPrompt.content.options;\n+      if (dbPrompt.content?.correctAnswer) prompt.content.correctAnswer = dbPrompt.content.correctAnswer;\n+      if (dbPrompt.content?.pairs) prompt.content.pairs = dbPrompt.content.pairs;\n+      if (dbPrompt.content?.correctOrder) prompt.content.correctOrder = dbPrompt.content.correctOrder;\n+      if (dbPrompt.content?.imageUrl) prompt.content.imageUrl = dbPrompt.content.imageUrl;\n+      if (dbPrompt.content?.audioUrl) prompt.content.audioUrl = dbPrompt.content.audioUrl;\n+\n+      return prompt;\n     });\n \n     const lessonState: LessonState = {\n       lesson: {\n@@ -667,22 +657,13 @@\n       timestamp: Date.now()\n     };\n     localStorage.setItem(`lesson_state_${lessonId}`, JSON.stringify(cacheData));\n \n-    const endTime = performance.now();\n-    logger.info('Lesson data fetch completed', {\n-      totalDuration: `${(endTime - startTime).toFixed(2)}ms`,\n-      questionCount: lessonState.lesson.questions.length,\n-      activityCount: activities.length,\n-      promptCount: exercisePrompts.length\n-    });\n-\n     return lessonState;\n   } catch (error) {\n-    const endTime = performance.now();\n     logger.error('Failed to fetch lesson data', {\n       error,\n-      duration: `${(endTime - startTime).toFixed(2)}ms`\n+      duration: `${(performance.now() - startTime).toFixed(2)}ms`\n     });\n     throw error;\n   }\n };\n"
                },
                {
                    "date": 1739347723561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -341,35 +341,74 @@\n });\n \n const logger = createLogger('LessonPage');\n \n-// Update the interfaces at the top of the file\n+// Add proper type definitions for database responses\n interface DbActivity {\n   id: string;\n   title: string;\n-  description: string;\n+  description?: string;\n   type: string;\n-  data: Record<string, any>;\n+  data?: {\n+    prompt: string;\n+    teacherScript: string;\n+    media: string[];\n+  };\n   lesson_id: string;\n   name: string;\n-  created_at: string;\n-  updated_at: string;\n-  metadata: Record<string, any>;\n+  created_at?: string;\n+  updated_at?: string;\n+  content?: string;\n+  duration?: number;\n+  instructions?: string;\n+  media?: Array<{\n+    url: string;\n+    type: 'image' | 'gif' | 'video';\n+  }>;\n+  score?: number;\n }\n \n interface DbExercisePrompt {\n   id: string;\n-  content: string;\n-  type: string;\n-  metadata: Record<string, any>;\n   text: string;\n+  media?: string;\n+  type: 'image' | 'gif' | 'video';\n+  narration?: string;\n+  saytext?: string;\n+  question_id?: string;\n+  correct?: boolean;\n   created_at: string;\n   updated_at: string;\n   contentId: string;\n-  lesson_id: string;\n-  order: number;\n-  status: 'active' | 'inactive';\n-  difficulty: 'easy' | 'medium' | 'hard';\n+  questionType: 'multiple-choice' | 'fill-blank' | 'matching' | 'drag-drop' | 'speaking' | 'listening' | 'writing' | 'translation';\n+  difficulty: 'beginner' | 'intermediate' | 'advanced';\n+  content: {\n+    question?: string;\n+    options?: string[];\n+    correctAnswer?: string;\n+    pairs?: Record<string, string>;\n+    correctOrder?: string[];\n+    imageUrl?: string;\n+    audioUrl?: string;\n+    instructions: string;\n+    hints: string[];\n+  };\n+  metadata: {\n+    targetSkills: string[];\n+    prerequisites: string[];\n+    learningObjectives: string[];\n+    estimatedTime: number;\n+  };\n+  adaptiveSettings: {\n+    progressionRules: {\n+      minScore: number;\n+      requiredAttempts: number;\n+    };\n+    difficultyAdjustment: {\n+      increase: number;\n+      decrease: number;\n+    };\n+  };\n }\n \n interface DatabaseLessonResponse {\n   data: {\n@@ -388,77 +427,88 @@\n       data: Record<string, any>;\n       metadata: Record<string, any>;\n       points: number;\n     }>;\n-    activities: Array<{\n-      id: string;\n-      created_at: string;\n-      lesson_id: string;\n-      title: string;\n-      duration: number;\n-      description: string;\n-      type: string;\n-      content: string;\n-      updated_at: string;\n-      name: string;\n-      instructions: string;\n-      data: {\n-        prompt: string;\n-        teacherScript: string;\n-        media: string[];\n-      };\n-      media: Array<{\n-        url: string;\n-        type: 'image' | 'gif' | 'video';\n-      }>;\n-      score: number;\n-    }>;\n-    exercise_prompts: Array<{\n-      id: string;\n-      text: string;\n-      media: string;\n-      type: 'image' | 'gif' | 'video';\n-      narration: string;\n-      saytext: string;\n-      question_id: string;\n-      correct: boolean;\n-      created_at: string;\n-      updated_at: string;\n-      contentId: string;\n-      questionType: 'multiple-choice' | 'fill-blank' | 'matching' | 'drag-drop' | 'speaking' | 'listening' | 'writing' | 'translation';\n-      difficulty: 'beginner' | 'intermediate' | 'advanced';\n-      content: {\n-        question: string;\n-        options: string[];\n-        correctAnswer: string;\n-        pairs: Record<string, string>;\n-        correctOrder: string[];\n-        imageUrl: string;\n-        audioUrl: string;\n-        instructions: string;\n-        hints: string[];\n-      };\n-      metadata: {\n-        targetSkills: string[];\n-        prerequisites: string[];\n-        learningObjectives: string[];\n-        estimatedTime: number;\n-      };\n-      adaptiveSettings: {\n-        progressionRules: {\n-          minScore: number;\n-          requiredAttempts: number;\n-        };\n-        difficultyAdjustment: {\n-          increase: number;\n-          decrease: number;\n-        };\n-      };\n-    }>;\n+    activities: DbActivity[];\n+    exercise_prompts: DbExercisePrompt[];\n   } | null;\n   error: Error | null;\n }\n \n+// Update the mapping functions\n+const mapDbActivityToActivity = (dbActivity: DbActivity): Activity => {\n+  const activity: Activity = {\n+    id: dbActivity.id,\n+    lesson_id: dbActivity.lesson_id,\n+    title: dbActivity.title,\n+    type: dbActivity.type,\n+    name: dbActivity.name\n+  };\n+\n+  // Add optional fields\n+  if (dbActivity.created_at) activity.created_at = dbActivity.created_at;\n+  if (dbActivity.duration) activity.duration = dbActivity.duration;\n+  if (dbActivity.description) activity.description = dbActivity.description;\n+  if (dbActivity.content) activity.content = dbActivity.content;\n+  if (dbActivity.updated_at) activity.updated_at = dbActivity.updated_at;\n+  if (dbActivity.instructions) activity.instructions = dbActivity.instructions;\n+  if (dbActivity.score) activity.score = dbActivity.score;\n+\n+  // Handle nested objects\n+  if (dbActivity.data) {\n+    activity.data = {\n+      prompt: dbActivity.data.prompt,\n+      teacherScript: dbActivity.data.teacherScript,\n+      media: dbActivity.data.media\n+    };\n+  }\n+\n+  if (dbActivity.media) {\n+    activity.media = dbActivity.media;\n+  }\n+\n+  return activity;\n+};\n+\n+const mapDbPromptToExercisePrompt = (dbPrompt: DbExercisePrompt): ExercisePrompt => {\n+  const prompt: ExercisePrompt = {\n+    id: dbPrompt.id,\n+    text: dbPrompt.text,\n+    type: dbPrompt.type,\n+    created_at: dbPrompt.created_at,\n+    updated_at: dbPrompt.updated_at,\n+    contentId: dbPrompt.contentId,\n+    questionType: dbPrompt.questionType,\n+    difficulty: dbPrompt.difficulty,\n+    content: {\n+      instructions: dbPrompt.content.instructions,\n+      hints: dbPrompt.content.hints\n+    },\n+    metadata: dbPrompt.metadata,\n+    adaptiveSettings: dbPrompt.adaptiveSettings,\n+    createdAt: new Date(dbPrompt.created_at),\n+    updatedAt: new Date(dbPrompt.updated_at)\n+  };\n+\n+  // Add optional fields\n+  if (dbPrompt.media) prompt.media = dbPrompt.media;\n+  if (dbPrompt.narration) prompt.narration = dbPrompt.narration;\n+  if (dbPrompt.saytext) prompt.saytext = dbPrompt.saytext;\n+  if (dbPrompt.question_id) prompt.question_id = dbPrompt.question_id;\n+  if (dbPrompt.correct) prompt.correct = dbPrompt.correct;\n+\n+  // Add optional content fields\n+  if (dbPrompt.content.question) prompt.content.question = dbPrompt.content.question;\n+  if (dbPrompt.content.options) prompt.content.options = dbPrompt.content.options;\n+  if (dbPrompt.content.correctAnswer) prompt.content.correctAnswer = dbPrompt.content.correctAnswer;\n+  if (dbPrompt.content.pairs) prompt.content.pairs = dbPrompt.content.pairs;\n+  if (dbPrompt.content.correctOrder) prompt.content.correctOrder = dbPrompt.content.correctOrder;\n+  if (dbPrompt.content.imageUrl) prompt.content.imageUrl = dbPrompt.content.imageUrl;\n+  if (dbPrompt.content.audioUrl) prompt.content.audioUrl = dbPrompt.content.audioUrl;\n+\n+  return prompt;\n+};\n+\n // Update the fetchLessonData function\n const fetchLessonData = async (\n   lessonId: string,\n   topicId: string,\n@@ -548,99 +598,13 @@\n       throw new Error('Missing required data from database');\n     }\n \n     // Map activities with required fields\n-    const activities = (lessonResult.data.activities || []).map((dbActivity: any) => {\n-      const activity: Activity = {\n-        id: dbActivity.id,\n-        lesson_id: dbActivity.lesson_id,\n-        title: dbActivity.title,\n-        type: dbActivity.type,\n-        name: dbActivity.name\n-      };\n+    const activities = (lessonResult.data.activities || []).map(mapDbActivityToActivity);\n \n-      // Add optional fields\n-      if (dbActivity.created_at) activity.created_at = dbActivity.created_at;\n-      if (dbActivity.duration) activity.duration = dbActivity.duration;\n-      if (dbActivity.description) activity.description = dbActivity.description;\n-      if (dbActivity.content) activity.content = dbActivity.content;\n-      if (dbActivity.updated_at) activity.updated_at = dbActivity.updated_at;\n-      if (dbActivity.instructions) activity.instructions = dbActivity.instructions;\n-      if (dbActivity.score) activity.score = dbActivity.score;\n-\n-      // Handle nested objects\n-      if (dbActivity.data) {\n-        activity.data = {\n-          prompt: dbActivity.data.prompt || '',\n-          teacherScript: dbActivity.data.teacherScript || '',\n-          media: dbActivity.data.media || []\n-        };\n-      }\n-\n-      if (dbActivity.media) {\n-        activity.media = dbActivity.media.map((m: any) => ({\n-          url: m.url,\n-          type: m.type\n-        }));\n-      }\n-\n-      return activity;\n-    });\n-\n     // Map exercise prompts with required fields\n-    const exercisePrompts = (lessonResult.data.exercise_prompts || []).map((dbPrompt: any) => {\n-      const prompt: ExercisePrompt = {\n-        id: dbPrompt.id,\n-        text: dbPrompt.text,\n-        type: dbPrompt.type as 'image' | 'gif' | 'video',\n-        created_at: dbPrompt.created_at,\n-        updated_at: dbPrompt.updated_at,\n-        contentId: dbPrompt.contentId,\n-        questionType: dbPrompt.questionType,\n-        difficulty: dbPrompt.difficulty,\n-        content: {\n-          instructions: dbPrompt.content?.instructions || '',\n-          hints: dbPrompt.content?.hints || []\n-        },\n-        metadata: {\n-          targetSkills: dbPrompt.metadata?.targetSkills || [],\n-          prerequisites: dbPrompt.metadata?.prerequisites || [],\n-          learningObjectives: dbPrompt.metadata?.learningObjectives || [],\n-          estimatedTime: dbPrompt.metadata?.estimatedTime || 0\n-        },\n-        adaptiveSettings: {\n-          progressionRules: {\n-            minScore: dbPrompt.adaptiveSettings?.progressionRules?.minScore || 0,\n-            requiredAttempts: dbPrompt.adaptiveSettings?.progressionRules?.requiredAttempts || 0\n-          },\n-          difficultyAdjustment: {\n-            increase: dbPrompt.adaptiveSettings?.difficultyAdjustment?.increase || 0,\n-            decrease: dbPrompt.adaptiveSettings?.difficultyAdjustment?.decrease || 0\n-          }\n-        },\n-        createdAt: new Date(dbPrompt.created_at),\n-        updatedAt: new Date(dbPrompt.updated_at)\n-      };\n+    const exercisePrompts = (lessonResult.data.exercise_prompts || []).map(mapDbPromptToExercisePrompt);\n \n-      // Add optional fields\n-      if (dbPrompt.media) prompt.media = dbPrompt.media;\n-      if (dbPrompt.narration) prompt.narration = dbPrompt.narration;\n-      if (dbPrompt.saytext) prompt.saytext = dbPrompt.saytext;\n-      if (dbPrompt.question_id) prompt.question_id = dbPrompt.question_id;\n-      if (dbPrompt.correct) prompt.correct = dbPrompt.correct;\n-\n-      // Add optional content fields\n-      if (dbPrompt.content?.question) prompt.content.question = dbPrompt.content.question;\n-      if (dbPrompt.content?.options) prompt.content.options = dbPrompt.content.options;\n-      if (dbPrompt.content?.correctAnswer) prompt.content.correctAnswer = dbPrompt.content.correctAnswer;\n-      if (dbPrompt.content?.pairs) prompt.content.pairs = dbPrompt.content.pairs;\n-      if (dbPrompt.content?.correctOrder) prompt.content.correctOrder = dbPrompt.content.correctOrder;\n-      if (dbPrompt.content?.imageUrl) prompt.content.imageUrl = dbPrompt.content.imageUrl;\n-      if (dbPrompt.content?.audioUrl) prompt.content.audioUrl = dbPrompt.content.audioUrl;\n-\n-      return prompt;\n-    });\n-\n     const lessonState: LessonState = {\n       lesson: {\n         ...lessonResult.data,\n         questions: lessonResult.data.questions || [],\n"
                },
                {
                    "date": 1739347733924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -440,9 +440,14 @@\n     id: dbActivity.id,\n     lesson_id: dbActivity.lesson_id,\n     title: dbActivity.title,\n     type: dbActivity.type,\n-    name: dbActivity.name\n+    name: dbActivity.name,\n+    data: {\n+      prompt: '',\n+      teacherScript: '',\n+      media: []\n+    }\n   };\n \n   // Add optional fields\n   if (dbActivity.created_at) activity.created_at = dbActivity.created_at;\n@@ -455,11 +460,11 @@\n \n   // Handle nested objects\n   if (dbActivity.data) {\n     activity.data = {\n-      prompt: dbActivity.data.prompt,\n-      teacherScript: dbActivity.data.teacherScript,\n-      media: dbActivity.data.media\n+      prompt: dbActivity.data.prompt || '',\n+      teacherScript: dbActivity.data.teacherScript || '',\n+      media: dbActivity.data.media || []\n     };\n   }\n \n   if (dbActivity.media) {\n@@ -479,13 +484,27 @@\n     contentId: dbPrompt.contentId,\n     questionType: dbPrompt.questionType,\n     difficulty: dbPrompt.difficulty,\n     content: {\n-      instructions: dbPrompt.content.instructions,\n-      hints: dbPrompt.content.hints\n+      instructions: dbPrompt.content?.instructions || '',\n+      hints: dbPrompt.content?.hints || []\n     },\n-    metadata: dbPrompt.metadata,\n-    adaptiveSettings: dbPrompt.adaptiveSettings,\n+    metadata: {\n+      targetSkills: dbPrompt.metadata?.targetSkills || [],\n+      prerequisites: dbPrompt.metadata?.prerequisites || [],\n+      learningObjectives: dbPrompt.metadata?.learningObjectives || [],\n+      estimatedTime: dbPrompt.metadata?.estimatedTime || 0\n+    },\n+    adaptiveSettings: {\n+      progressionRules: {\n+        minScore: dbPrompt.adaptiveSettings?.progressionRules?.minScore || 0,\n+        requiredAttempts: dbPrompt.adaptiveSettings?.progressionRules?.requiredAttempts || 0\n+      },\n+      difficultyAdjustment: {\n+        increase: dbPrompt.adaptiveSettings?.difficultyAdjustment?.increase || 0,\n+        decrease: dbPrompt.adaptiveSettings?.difficultyAdjustment?.decrease || 0\n+      }\n+    },\n     createdAt: new Date(dbPrompt.created_at),\n     updatedAt: new Date(dbPrompt.updated_at)\n   };\n \n@@ -496,15 +515,15 @@\n   if (dbPrompt.question_id) prompt.question_id = dbPrompt.question_id;\n   if (dbPrompt.correct) prompt.correct = dbPrompt.correct;\n \n   // Add optional content fields\n-  if (dbPrompt.content.question) prompt.content.question = dbPrompt.content.question;\n-  if (dbPrompt.content.options) prompt.content.options = dbPrompt.content.options;\n-  if (dbPrompt.content.correctAnswer) prompt.content.correctAnswer = dbPrompt.content.correctAnswer;\n-  if (dbPrompt.content.pairs) prompt.content.pairs = dbPrompt.content.pairs;\n-  if (dbPrompt.content.correctOrder) prompt.content.correctOrder = dbPrompt.content.correctOrder;\n-  if (dbPrompt.content.imageUrl) prompt.content.imageUrl = dbPrompt.content.imageUrl;\n-  if (dbPrompt.content.audioUrl) prompt.content.audioUrl = dbPrompt.content.audioUrl;\n+  if (dbPrompt.content?.question) prompt.content.question = dbPrompt.content.question;\n+  if (dbPrompt.content?.options) prompt.content.options = dbPrompt.content.options;\n+  if (dbPrompt.content?.correctAnswer) prompt.content.correctAnswer = dbPrompt.content.correctAnswer;\n+  if (dbPrompt.content?.pairs) prompt.content.pairs = dbPrompt.content.pairs;\n+  if (dbPrompt.content?.correctOrder) prompt.content.correctOrder = dbPrompt.content.correctOrder;\n+  if (dbPrompt.content?.imageUrl) prompt.content.imageUrl = dbPrompt.content.imageUrl;\n+  if (dbPrompt.content?.audioUrl) prompt.content.audioUrl = dbPrompt.content.audioUrl;\n \n   return prompt;\n };\n \n@@ -598,13 +617,101 @@\n       throw new Error('Missing required data from database');\n     }\n \n     // Map activities with required fields\n-    const activities = (lessonResult.data.activities || []).map(mapDbActivityToActivity);\n+    const activities = (lessonResult.data?.activities || []).map((dbActivity) => {\n+      const activity: Activity = {\n+        id: dbActivity.id,\n+        lesson_id: dbActivity.lesson_id,\n+        title: dbActivity.title,\n+        type: dbActivity.type,\n+        name: dbActivity.name,\n+        data: {\n+          prompt: '',\n+          teacherScript: '',\n+          media: []\n+        }\n+      };\n \n+      // Add optional fields\n+      if (dbActivity.created_at) activity.created_at = dbActivity.created_at;\n+      if (dbActivity.duration) activity.duration = dbActivity.duration;\n+      if (dbActivity.description) activity.description = dbActivity.description;\n+      if (dbActivity.content) activity.content = dbActivity.content;\n+      if (dbActivity.updated_at) activity.updated_at = dbActivity.updated_at;\n+      if (dbActivity.instructions) activity.instructions = dbActivity.instructions;\n+      if (dbActivity.score) activity.score = dbActivity.score;\n+\n+      // Handle nested objects\n+      if (dbActivity.data) {\n+        activity.data = {\n+          prompt: dbActivity.data.prompt || '',\n+          teacherScript: dbActivity.data.teacherScript || '',\n+          media: dbActivity.data.media || []\n+        };\n+      }\n+\n+      if (dbActivity.media) {\n+        activity.media = dbActivity.media;\n+      }\n+\n+      return activity;\n+    });\n+\n     // Map exercise prompts with required fields\n-    const exercisePrompts = (lessonResult.data.exercise_prompts || []).map(mapDbPromptToExercisePrompt);\n+    const exercisePrompts = (lessonResult.data?.exercise_prompts || []).map((dbPrompt) => {\n+      const prompt: ExercisePrompt = {\n+        id: dbPrompt.id,\n+        text: dbPrompt.text,\n+        type: dbPrompt.type,\n+        created_at: dbPrompt.created_at,\n+        updated_at: dbPrompt.updated_at,\n+        contentId: dbPrompt.contentId,\n+        questionType: dbPrompt.questionType,\n+        difficulty: dbPrompt.difficulty,\n+        content: {\n+          instructions: dbPrompt.content?.instructions || '',\n+          hints: dbPrompt.content?.hints || []\n+        },\n+        metadata: {\n+          targetSkills: dbPrompt.metadata?.targetSkills || [],\n+          prerequisites: dbPrompt.metadata?.prerequisites || [],\n+          learningObjectives: dbPrompt.metadata?.learningObjectives || [],\n+          estimatedTime: dbPrompt.metadata?.estimatedTime || 0\n+        },\n+        adaptiveSettings: {\n+          progressionRules: {\n+            minScore: dbPrompt.adaptiveSettings?.progressionRules?.minScore || 0,\n+            requiredAttempts: dbPrompt.adaptiveSettings?.progressionRules?.requiredAttempts || 0\n+          },\n+          difficultyAdjustment: {\n+            increase: dbPrompt.adaptiveSettings?.difficultyAdjustment?.increase || 0,\n+            decrease: dbPrompt.adaptiveSettings?.difficultyAdjustment?.decrease || 0\n+          }\n+        },\n+        createdAt: new Date(dbPrompt.created_at),\n+        updatedAt: new Date(dbPrompt.updated_at)\n+      };\n \n+      // Add optional fields\n+      if (dbPrompt.media) prompt.media = dbPrompt.media;\n+      if (dbPrompt.narration) prompt.narration = dbPrompt.narration;\n+      if (dbPrompt.saytext) prompt.saytext = dbPrompt.saytext;\n+      if (dbPrompt.question_id) prompt.question_id = dbPrompt.question_id;\n+      if (dbPrompt.correct) prompt.correct = dbPrompt.correct;\n+\n+      // Add optional content fields\n+      if (dbPrompt.content?.question) prompt.content.question = dbPrompt.content.question;\n+      if (dbPrompt.content?.options) prompt.content.options = dbPrompt.content.options;\n+      if (dbPrompt.content?.correctAnswer) prompt.content.correctAnswer = dbPrompt.content.correctAnswer;\n+      if (dbPrompt.content?.pairs) prompt.content.pairs = dbPrompt.content.pairs;\n+      if (dbPrompt.content?.correctOrder) prompt.content.correctOrder = dbPrompt.content.correctOrder;\n+      if (dbPrompt.content?.imageUrl) prompt.content.imageUrl = dbPrompt.content.imageUrl;\n+      if (dbPrompt.content?.audioUrl) prompt.content.audioUrl = dbPrompt.content.audioUrl;\n+\n+      return prompt;\n+    });\n+\n     const lessonState: LessonState = {\n       lesson: {\n         ...lessonResult.data,\n         questions: lessonResult.data.questions || [],\n"
                },
                {
                    "date": 1739348745777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n \"use client\";\n \n-import { useEffect, useState, useCallback } from \"react\";\n+import { useEffect, useState, useCallback, Suspense } from \"react\";\n import { useParams, useSearchParams, useNavigate, useLocation } from \"react-router-dom\";\n import { motion, AnimatePresence } from \"framer-motion\";\n import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n import { Button } from \"@/components/ui/button\";\n@@ -13,8 +13,12 @@\n import { supabase } from \"@/lib/supabase\";\n import { Question, Activity, ExercisePrompt } from \"@/types\";\n import { useAuth } from '@/hooks/useAuth';\n import LessonErrorBoundary from '@/components/LessonErrorBoundary';\n+import { LoadingSpinner } from '@/components/LoadingSpinner';\n+import { getLessonById } from '@/lib/api/lessons';\n+import { notFound } from 'next/navigation';\n+import { logger } from '@/lib/logger';\n \n // Enhanced debug configuration\n const DEBUG = true;\n const LOG_TO_STORAGE = true;\n@@ -738,599 +742,76 @@\n     throw error;\n   }\n };\n \n-export default function LessonPage() {\n-  forceLog('LessonPage component mounted', { timestamp: new Date().toISOString() });\n-  \n-  const params = useParams<RouteParams>();\n-  const location = useLocation();\n-  const navigate = useNavigate();\n-  const searchParams = new URLSearchParams(window.location.search);\n-  \n-  // Enhanced URL validation and logging\n-  const urlValidation = validateUrl(params, searchParams);\n-  forceLog('URL Validation Result:', urlValidation, urlValidation.isValid ? 'info' : 'error');\n-  \n-  forceLog('Route information:', { \n-    params, \n-    pathname: location.pathname, \n-    search: location.search,\n-    fullUrl: window.location.href,\n-    lessonId: params?.lessonId,\n-    topicId: searchParams.get('topicId'),\n-    subtopicId: searchParams.get('subtopicId'),\n-    rawSearch: window.location.search,\n-    hash: window.location.hash,\n-    origin: window.location.origin,\n-    localStorage: Object.keys(localStorage)\n-  });\n+interface PageProps {\n+  params: {\n+    lessonId: string;\n+  };\n+}\n \n-  const [lessonState, setLessonState] = useState<LessonState | null>(null);\n-  const [currentStep, setCurrentStep] = useState(0);\n-  const [progress, setProgress] = useState(0);\n-  const [isLoading, setIsLoading] = useState(true);\n-  const [activeTab, setActiveTab] = useState(\"overview\");\n-  const [hasAttemptedLoad, setHasAttemptedLoad] = useState(false);\n-  const [isFullscreen, setIsFullscreen] = useState(false);\n-  const [error, setError] = useState<string | null>(null);\n-  const [navigationAttempted, setNavigationAttempted] = useState(false);\n-  const [isLessonDialogOpen, setIsLessonDialogOpen] = useState(false);\n-  const [currentLessonId, setCurrentLessonId] = useState<string | null>(null);\n-  const [performanceMetrics, setPerformanceMetrics] = useState({\n-    initializationTime: 0,\n-    dataLoadTime: 0,\n-    renderCount: 0\n+export default async function LessonPage({ params }: PageProps) {\n+  logger.info('Loading lesson page', {\n+    source: 'LessonPage',\n+    context: { lessonId: params.lessonId }\n   });\n \n-  // Function to handle entering fullscreen\n-  const enterFullscreen = async () => {\n-    try {\n-      const element = document.documentElement;\n-      if (element.requestFullscreen) {\n-        // Only attempt fullscreen if we're in a user gesture context\n-        // and the document is not already in fullscreen mode\n-        if (!document.fullscreenElement) {\n-          // Add a try-catch specifically for the requestFullscreen call\n-          try {\n-            await element.requestFullscreen();\n-            forceLog('Entered fullscreen mode successfully');\n-            setIsFullscreen(true);\n-          } catch (err) {\n-            forceLog('Fullscreen request failed (non-critical):', err, 'warn');\n-            // Non-critical error, we can continue without fullscreen\n-          }\n-        }\n-      } else {\n-        forceLog('Fullscreen API not supported', null, 'warn');\n-      }\n-    } catch (error) {\n-      // Log but don't throw - fullscreen is not critical for functionality\n-      forceLog('Error in enterFullscreen:', error, 'warn');\n-    }\n-  };\n+  try {\n+    const lesson = await getLessonById(params.lessonId);\n \n-  // Function to handle exiting fullscreen\n-  const exitFullscreen = async () => {\n-    try {\n-      if (document.fullscreenElement && document.exitFullscreen) {\n-        await document.exitFullscreen();\n-      }\n-    } catch (error) {\n-      console.error('Exit fullscreen error:', error);\n+    if (!lesson) {\n+      logger.warn('Lesson not found', {\n+        source: 'LessonPage',\n+        context: { lessonId: params.lessonId }\n+      });\n+      notFound();\n     }\n-  };\n \n-  // Function to handle navigation back to lessons page\n-  const navigateToLessons = async () => {\n-    try {\n-      if (navigationAttempted) {\n-        forceLog('Navigation already attempted, preventing duplicate');\n-        return;\n+    logger.info('Lesson loaded successfully', {\n+      source: 'LessonPage',\n+      context: { \n+        lessonId: params.lessonId,\n+        lessonTitle: lesson.title\n       }\n-      \n-      setNavigationAttempted(true);\n-      forceLog('Attempting navigation to lessons page');\n-      \n-      await exitFullscreen();\n-      \n-      // Small delay to ensure logs are visible\n-      await new Promise(resolve => setTimeout(resolve, 1000));\n-      \n-      // Close the window instead of navigating\n-      window.close();\n-      \n-      // Fallback if window.close() doesn't work\n-      if (!window.closed) {\n-        window.location.href = '/app/teacher/lessons';\n-      }\n-    } catch (error) {\n-      forceLog('Navigation error:', error);\n-      setError('Failed to navigate back to lessons page');\n-    }\n-  };\n+    });\n \n-  // Update the initialization effect\n-  useEffect(() => {\n-    let isMounted = true;\n-    const pageLogger = createLogger('LessonPage:Init');\n-    \n-    const initializeLessonPage = async () => {\n-      if (!params?.lessonId) {\n-        pageLogger.error('Missing lessonId parameter');\n-        setError('Invalid lesson ID');\n-        return;\n-      }\n-\n-      try {\n-        pageLogger.info('Starting page initialization', {\n-          params,\n-          searchParams: Object.fromEntries(searchParams.entries())\n-        });\n-\n-        setIsLoading(true);\n-\n-        // Validate URL parameters\n-        const urlValidation = validateUrl(params, searchParams);\n-        if (!urlValidation.isValid) {\n-          throw new Error(`Missing required parameters: ${urlValidation.missingParams.join(', ')}`);\n-        }\n-\n-        // Initialize auth\n-        const authInitialized = await initializeAuth(searchParams.get('authStateKey') || '');\n-        if (!authInitialized) {\n-          throw new Error('Authentication initialization failed');\n-        }\n-\n-        // Fetch lesson data\n-        const lessonData = await fetchLessonData(\n-          params.lessonId,\n-          searchParams.get('topicId') || '',\n-          searchParams.get('subtopicId') || ''\n-        );\n-\n-        if (!isMounted) return;\n-\n-        setLessonState(lessonData);\n-        pageLogger.info('Page initialization complete', {\n-          lessonId: lessonData.lesson.id,\n-          questionCount: lessonData.lesson.questions.length\n-        });\n-\n-      } catch (error) {\n-        pageLogger.error('Page initialization failed', error);\n-        if (isMounted) {\n-          setError(error instanceof Error ? error.message : 'Failed to initialize lesson');\n-        }\n-      } finally {\n-        if (isMounted) {\n-          setIsLoading(false);\n-          setHasAttemptedLoad(true);\n-        }\n-      }\n-    };\n-\n-    if (!hasAttemptedLoad) {\n-      initializeLessonPage();\n-    }\n-\n-    return () => {\n-      isMounted = false;\n-      pageLogger.info('Cleanup: Component unmounting');\n-    };\n-  }, [params?.lessonId, searchParams, hasAttemptedLoad]);\n-\n-  // Only navigate away if there's an error and we're not loading\n-  useEffect(() => {\n-    let navigationTimer: NodeJS.Timeout;\n-    \n-    if (error && !isLoading && hasAttemptedLoad && !navigationAttempted) {\n-      forceLog('Error detected, preparing to navigate:', error);\n-      navigationTimer = setTimeout(() => {\n-        forceLog('Executing delayed navigation due to error');\n-        navigateToLessons();\n-      }, 2000); // Give more time for logs to be visible\n-    }\n-    \n-    return () => {\n-      if (navigationTimer) {\n-        clearTimeout(navigationTimer);\n-      }\n-    };\n-  }, [error, isLoading, hasAttemptedLoad, navigationAttempted]);\n-\n-  const handleEndLesson = async () => {\n-    forceLog('End lesson requested');\n-    const confirmed = window.confirm('Are you sure you want to end this lesson?');\n-    if (confirmed) {\n-      forceLog('End lesson confirmed');\n-      // Clean up localStorage before navigating\n-      if (params?.lessonId) {\n-        const storageKey = `lesson_state_${params.lessonId}`;\n-        forceLog('Removing stored state:', storageKey);\n-        localStorage.removeItem(storageKey);\n-      }\n-      await navigateToLessons();\n-    } else {\n-      forceLog('End lesson cancelled');\n-    }\n-  };\n-\n-  const getQuestionIcon = (type: string) => {\n-    switch (type) {\n-      case 'speaking':\n-        return <Mic className=\"h-4 w-4\" />;\n-      case 'multiplechoice':\n-        return <PenTool className=\"h-4 w-4\" />;\n-      case 'fill_blanks':\n-        return <FileText className=\"h-4 w-4\" />;\n-      default:\n-        return <HelpCircle className=\"h-4 w-4\" />;\n-    }\n-  };\n-\n-  useEffect(() => {\n-    return () => {\n-        // Cleanup function\n-        forceLog('Cleaning up lesson dialog state', {\n-            source: 'LearningPathTeacher',\n+    return (\n+      <LessonErrorBoundary\n+        onError={(error, errorInfo) => {\n+          logger.error('Lesson component error', {\n+            source: 'LessonPage',\n             context: {\n-                wasDialogOpen: isLessonDialogOpen,\n-                currentLessonId,\n-                timestamp: new Date().toISOString()\n+              lessonId: params.lessonId,\n+              error: error.message,\n+              componentStack: errorInfo.componentStack\n             }\n-        });\n-        \n-        // Preserve state in sessionStorage before cleanup\n-        if (currentLessonId) {\n-            const state = {\n-                lessonId: currentLessonId,\n-                dialogOpen: isLessonDialogOpen,\n-                timestamp: new Date().toISOString()\n-            };\n-            sessionStorage.setItem('lesson_dialog_state', JSON.stringify(state));\n-        }\n-    };\n-  }, [isLessonDialogOpen, currentLessonId]);\n-\n-  useEffect(() => {\n-    // Try to recover dialog state on mount\n-    const savedState = sessionStorage.getItem('lesson_dialog_state');\n-    if (savedState) {\n-        try {\n-            const state = JSON.parse(savedState);\n-            forceLog('Recovering lesson dialog state', {\n-                source: 'LearningPathTeacher',\n-                context: {\n-                    savedState: state,\n-                    timestamp: new Date().toISOString()\n-                }\n-            });\n-            \n-            if (state.dialogOpen && state.lessonId) {\n-                setCurrentLessonId(state.lessonId);\n-                setIsLessonDialogOpen(true);\n-            }\n-        } catch (error) {\n-            forceLog('Failed to recover lesson dialog state', {\n-                source: 'LearningPathTeacher',\n-                context: { error }\n-            });\n-        }\n-    }\n-  }, []);\n-\n-  const getLessonUrl = useCallback((lessonId: string) => {\n-    const baseUrl = window.location.origin;\n-    const url = new URL(`${baseUrl}/app/teacher/lessons/${lessonId}`);\n-    \n-    // Add any necessary query parameters\n-    url.searchParams.set('dialog', 'true');\n-    url.searchParams.set('timestamp', Date.now().toString());\n-    \n-    forceLog('Constructed lesson URL', {\n-        source: 'LearningPathTeacher',\n-        context: {\n-            lessonId,\n-            url: url.toString(),\n-            baseUrl,\n-            timestamp: new Date().toISOString()\n-        }\n+          });\n+        }}\n+      >\n+        <Suspense \n+          fallback={\n+            <div className=\"flex items-center justify-center min-h-screen\">\n+              <LoadingSpinner text=\"Loading lesson content...\" />\n+            </div>\n+          }\n+        >\n+          <main className=\"min-h-screen bg-background\">\n+            {/* Lesson content will be rendered here */}\n+            <div className=\"container mx-auto px-4 py-8\">\n+              <h1 className=\"text-2xl font-bold mb-4\">{lesson.title}</h1>\n+              {/* Add your lesson content components here */}\n+            </div>\n+          </main>\n+        </Suspense>\n+      </LessonErrorBoundary>\n+    );\n+  } catch (error) {\n+    logger.error('Failed to load lesson', {\n+      source: 'LessonPage',\n+      context: {\n+        lessonId: params.lessonId,\n+        error: error instanceof Error ? error.message : 'Unknown error'\n+      }\n     });\n-    \n-    return url.toString();\n-  }, []);\n-\n-  useEffect(() => {\n-    setPerformanceMetrics(prev => ({\n-      ...prev,\n-      renderCount: prev.renderCount + 1\n-    }));\n-\n-    logger.info('Component rendered', {\n-      metrics: performanceMetrics,\n-      currentStep,\n-      hasLessonState: !!lessonState\n-    });\n-  }, [lessonState, currentStep]);\n-\n-  if (isLoading) {\n-    forceLog('Rendering loading state');\n-    return (\n-      <div className=\"flex items-center justify-center min-h-screen\">\n-        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n-      </div>\n-    );\n+    throw error; // Let the closest error boundary handle it\n   }\n-\n-  if (!lessonState) {\n-    forceLog('Rendering error state - no lesson state found');\n-    return (\n-      <div className=\"flex items-center justify-center min-h-screen\">\n-        <Card className=\"p-6\">\n-          <CardTitle className=\"text-xl mb-4\">Lesson not found</CardTitle>\n-          <Button onClick={() => navigateToLessons()}>Go Back</Button>\n-        </Card>\n-      </div>\n-    );\n-  }\n-\n-  forceLog('Rendering lesson page with state:', {\n-    currentStep,\n-    totalSteps: lessonState.lesson.questions.length,\n-    progress\n-  });\n-\n-  const totalSteps = lessonState.lesson.questions.length;\n-  const currentQuestion = lessonState.lesson.questions[currentStep];\n-\n-  return (\n-    <LessonErrorBoundary>\n-      <div className=\"min-h-screen bg-gradient-to-b from-background to-accent/20\">\n-        {/* Top Navigation Bar */}\n-        <nav className=\"fixed top-0 left-0 right-0 z-50 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b\">\n-          <div className=\"flex items-center justify-between p-4\">\n-            <div className=\"flex items-center gap-4\">\n-              <Button\n-                variant=\"ghost\"\n-                size=\"icon\"\n-                onClick={handleEndLesson}\n-                className=\"hover:bg-accent\"\n-              >\n-                <X className=\"h-5 w-5\" />\n-              </Button>\n-              <div>\n-                <h1 className=\"text-lg font-semibold\">{lessonState.lesson.title}</h1>\n-                <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n-                  <span>{lessonState.topic.title}</span>\n-                  <span>•</span>\n-                  <span>{lessonState.subtopic.title}</span>\n-                </div>\n-              </div>\n-            </div>\n-            <div className=\"flex items-center gap-4\">\n-              <Progress \n-                value={(currentStep / totalSteps) * 100} \n-                className=\"w-40\"\n-              />\n-              <Button \n-                variant=\"outline\" \n-                onClick={enterFullscreen}\n-                className=\"mr-2\"\n-              >\n-                Fullscreen\n-              </Button>\n-              <Button variant=\"outline\" onClick={handleEndLesson}>\n-                End Lesson\n-              </Button>\n-            </div>\n-          </div>\n-        </nav>\n-\n-        {/* Main Content */}\n-        <main className=\"pt-24 pb-8 px-4 md:px-8 max-w-7xl mx-auto\">\n-          <div className=\"grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-8\">\n-            {/* Sidebar */}\n-            <div className=\"lg:block\">\n-              <Card className=\"sticky top-24\">\n-                <CardHeader>\n-                  <CardTitle className=\"text-lg flex items-center gap-2\">\n-                    <List className=\"h-5 w-5\" />\n-                    Lesson Overview\n-                  </CardTitle>\n-                </CardHeader>\n-                <CardContent>\n-                  <div className=\"space-y-4\">\n-                    <div className=\"flex items-center gap-2 text-sm\">\n-                      <Clock className=\"h-4 w-4 text-primary\" />\n-                      <span>{lessonState.lesson.questions.length * 2} minutes</span>\n-                    </div>\n-                    <div className=\"flex items-center gap-2 text-sm\">\n-                      <HelpCircle className=\"h-4 w-4 text-primary\" />\n-                      <span>{lessonState.lesson.questions.length} Questions</span>\n-                    </div>\n-                    <div className=\"flex items-center gap-2 text-sm\">\n-                      <Layout className=\"h-4 w-4 text-primary\" />\n-                      <span>{lessonState.lesson.activities?.length || 0} Activities</span>\n-                    </div>\n-                    \n-                    <div className=\"border-t pt-4 mt-4\">\n-                      <h3 className=\"font-medium mb-3\">Questions</h3>\n-                      <div className=\"space-y-3\">\n-                        {lessonState.lesson.questions.map((question, index) => (\n-                          <motion.div\n-                            key={index}\n-                            initial={{ opacity: 0, x: -20 }}\n-                            animate={{ opacity: 1, x: 0 }}\n-                            transition={{ delay: index * 0.1 }}\n-                            className={cn(\n-                              \"flex items-center gap-2 p-2 rounded-md transition-all duration-200\",\n-                              currentStep === index ? \"bg-accent shadow-sm\" : \"hover:bg-accent/50\",\n-                              index < currentStep && \"text-primary\"\n-                            )}\n-                            onClick={() => setCurrentStep(index)}\n-                            style={{ cursor: 'pointer' }}\n-                          >\n-                            {index < currentStep ? (\n-                              <CheckCircle2 className=\"h-4 w-4\" />\n-                            ) : (\n-                              <div className={cn(\n-                                \"h-4 w-4 rounded-full border\",\n-                                currentStep === index && \"border-primary\"\n-                              )} />\n-                            )}\n-                            <span className=\"text-sm\">Question {index + 1}</span>\n-                            {getQuestionIcon(question.type)}\n-                          </motion.div>\n-                        ))}\n-                      </div>\n-                    </div>\n-                  </div>\n-                </CardContent>\n-              </Card>\n-            </div>\n-\n-            {/* Main Content Area */}\n-            <div className=\"space-y-8\">\n-              <Tabs defaultValue=\"question\" className=\"w-full\">\n-                <TabsList className=\"mb-4\">\n-                  <TabsTrigger value=\"question\">Question</TabsTrigger>\n-                  <TabsTrigger value=\"teacherScript\">Teacher Script</TabsTrigger>\n-                  <TabsTrigger value=\"activities\">Activities</TabsTrigger>\n-                </TabsList>\n-\n-                <AnimatePresence mode=\"wait\">\n-                  <motion.div\n-                    key={currentStep}\n-                    initial={{ opacity: 0, y: 20 }}\n-                    animate={{ opacity: 1, y: 0 }}\n-                    exit={{ opacity: 0, y: -20 }}\n-                    transition={{ duration: 0.3 }}\n-                  >\n-                    <TabsContent value=\"question\">\n-                      <Card>\n-                        <CardHeader>\n-                          <div className=\"flex items-center justify-between\">\n-                            <Badge variant=\"outline\" className=\"bg-primary/5\">\n-                              Question {currentStep + 1} of {totalSteps}\n-                            </Badge>\n-                            <div className=\"flex items-center gap-2\">\n-                              <Star className=\"h-4 w-4 text-yellow-500\" />\n-                              <span className=\"text-sm\">{currentQuestion.points} Points</span>\n-                            </div>\n-                          </div>\n-                          <CardTitle className=\"text-2xl mt-4\">\n-                            {currentQuestion.title || \"Question\"}\n-                          </CardTitle>\n-                        </CardHeader>\n-                        <CardContent className=\"space-y-6\">\n-                          <div className=\"prose prose-sm dark:prose-invert max-w-none\">\n-                            <div className=\"bg-accent/50 p-4 rounded-lg\">\n-                              <h3 className=\"text-lg font-semibold mb-2\">Prompt</h3>\n-                              <p>{currentQuestion.data.prompt || currentQuestion.content}</p>\n-                            </div>\n-\n-                            {currentQuestion.type === 'multiplechoice' && currentQuestion.metadata?.options && (\n-                              <div className=\"mt-6 space-y-4\">\n-                                {currentQuestion.metadata.options.map((option, idx) => (\n-                                  <Button\n-                                    key={idx}\n-                                    variant=\"outline\"\n-                                    className=\"w-full justify-start text-left\"\n-                                  >\n-                                    {option}\n-                                  </Button>\n-                                ))}\n-                              </div>\n-                            )}\n-\n-                            {currentQuestion.type === 'speaking' && (\n-                              <div className=\"mt-6\">\n-                                <Button className=\"w-full justify-center gap-2\">\n-                                  <Mic className=\"h-4 w-4\" />\n-                                  Start Recording\n-                                </Button>\n-                              </div>\n-                            )}\n-                          </div>\n-                        </CardContent>\n-                      </Card>\n-                    </TabsContent>\n-\n-                    <TabsContent value=\"teacherScript\">\n-                      <Card>\n-                        <CardContent className=\"p-6\">\n-                          <div className=\"prose prose-sm dark:prose-invert max-w-none\">\n-                            <h3 className=\"text-lg font-semibold mb-4\">Teacher Script</h3>\n-                            <div className=\"bg-accent/50 p-4 rounded-lg\">\n-                              {currentQuestion.data.teacherScript || \"No teacher script available.\"}\n-                            </div>\n-                          </div>\n-                        </CardContent>\n-                      </Card>\n-                    </TabsContent>\n-\n-                    <TabsContent value=\"activities\">\n-                      <Card>\n-                        <CardContent className=\"p-6\">\n-                          <div className=\"prose prose-sm dark:prose-invert max-w-none\">\n-                            <h3 className=\"text-lg font-semibold mb-4\">Activities</h3>\n-                            {lessonState.lesson.activities?.length > 0 ? (\n-                              <div className=\"space-y-4\">\n-                                {lessonState.lesson.activities.map((activity, idx) => (\n-                                  <div key={idx} className=\"bg-accent/50 p-4 rounded-lg\">\n-                                    <h4 className=\"font-medium\">{activity.title}</h4>\n-                                    <p>{activity.description}</p>\n-                                  </div>\n-                                ))}\n-                              </div>\n-                            ) : (\n-                              <p>No activities available for this lesson.</p>\n-                            )}\n-                          </div>\n-                        </CardContent>\n-                      </Card>\n-                    </TabsContent>\n-                  </motion.div>\n-                </AnimatePresence>\n-              </Tabs>\n-\n-              {/* Navigation Buttons */}\n-              <div className=\"flex items-center justify-between pt-4\">\n-                <Button\n-                  variant=\"outline\"\n-                  onClick={() => setCurrentStep(prev => Math.max(0, prev - 1))}\n-                  disabled={currentStep === 0}\n-                >\n-                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\n-                  Previous\n-                </Button>\n-                <Button\n-                  onClick={() => {\n-                    if (currentStep < totalSteps - 1) {\n-                      setCurrentStep(prev => prev + 1);\n-                      setProgress(prev => prev + (100 / totalSteps));\n-                    } else {\n-                      handleEndLesson();\n-                    }\n-                  }}\n-                >\n-                  {currentStep < totalSteps - 1 ? (\n-                    <>\n-                      Next\n-                      <ArrowLeft className=\"h-4 w-4 ml-2 rotate-180\" />\n-                    </>\n-                  ) : (\n-                    <>\n-                      Complete Lesson\n-                      <Flag className=\"h-4 w-4 ml-2\" />\n-                    </>\n-                  )}\n-                </Button>\n-              </div>\n-            </div>\n-          </div>\n-        </main>\n-      </div>\n-    </LessonErrorBoundary>\n-  );\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739349939432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -789,9 +789,9 @@\n       >\n         <Suspense \n           fallback={\n             <div className=\"flex items-center justify-center min-h-screen\">\n-              <LoadingSpinner text=\"Loading lesson content...\" />\n+              <LoadingSpinner message=\"Loading lesson content...\" />\n             </div>\n           }\n         >\n           <main className=\"min-h-screen bg-background\">\n"
                }
            ],
            "date": 1739185040582,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Progress } from \"@/components/ui/progress\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\r\nimport { ArrowLeft, BookOpen, CheckCircle2, Clock, Flag, HelpCircle, Layout, List, Play, Settings, Star, X } from \"lucide-react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { supabase } from \"@/lib/supabase\";\r\nimport { LessonWithContent } from \"@/types\";\r\n\r\nexport default function LessonPage() {\r\n  const { lessonId } = useParams();\r\n  const navigate = useNavigate();\r\n  const [lesson, setLesson] = useState<LessonWithContent | null>(null);\r\n  const [currentStep, setCurrentStep] = useState(0);\r\n  const [progress, setProgress] = useState(0);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchLesson = async () => {\r\n      try {\r\n        const { data, error } = await supabase\r\n          .from('lessons')\r\n          .select(`\r\n            *,\r\n            questions (*),\r\n            activities (*),\r\n            exercise_prompts (*)\r\n          `)\r\n          .eq('id', lessonId)\r\n          .single();\r\n\r\n        if (error) throw error;\r\n        setLesson(data);\r\n      } catch (error) {\r\n        console.error('Error fetching lesson:', error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchLesson();\r\n  }, [lessonId]);\r\n\r\n  const handleEndLesson = () => {\r\n    navigate('/teacher/lessons');\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!lesson) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <Card className=\"p-6\">\r\n          <CardTitle className=\"text-xl mb-4\">Lesson not found</CardTitle>\r\n          <Button onClick={() => navigate('/teacher/lessons')}>Go Back</Button>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-b from-background to-accent/20\">\r\n      {/* Top Navigation Bar */}\r\n      <nav className=\"fixed top-0 left-0 right-0 z-50 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b\">\r\n        <div className=\"flex items-center justify-between p-4\">\r\n          <div className=\"flex items-center gap-4\">\r\n            <Button\r\n              variant=\"ghost\"\r\n              size=\"icon\"\r\n              onClick={handleEndLesson}\r\n              className=\"hover:bg-accent\"\r\n            >\r\n              <X className=\"h-5 w-5\" />\r\n            </Button>\r\n            <div>\r\n              <h1 className=\"text-lg font-semibold\">{lesson.title}</h1>\r\n              <p className=\"text-sm text-muted-foreground\">Lesson {currentStep + 1} of {lesson.questions?.length || 0}</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"flex items-center gap-2\">\r\n            <Progress value={progress} className=\"w-40\" />\r\n            <Button variant=\"outline\" onClick={handleEndLesson}>\r\n              End Lesson\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n\r\n      {/* Main Content */}\r\n      <main className=\"pt-24 pb-8 px-4 md:px-8 max-w-7xl mx-auto\">\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-[300px_1fr] gap-8\">\r\n          {/* Sidebar */}\r\n          <div className=\"lg:block\">\r\n            <Card className=\"sticky top-24\">\r\n              <CardHeader>\r\n                <CardTitle className=\"text-lg flex items-center gap-2\">\r\n                  <List className=\"h-5 w-5\" />\r\n                  Lesson Overview\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-4\">\r\n                  <div className=\"flex items-center gap-2 text-sm\">\r\n                    <Clock className=\"h-4 w-4 text-primary\" />\r\n                    <span>{lesson.duration || 30} minutes</span>\r\n                  </div>\r\n                  <div className=\"flex items-center gap-2 text-sm\">\r\n                    <HelpCircle className=\"h-4 w-4 text-primary\" />\r\n                    <span>{lesson.questions?.length || 0} Questions</span>\r\n                  </div>\r\n                  <div className=\"flex items-center gap-2 text-sm\">\r\n                    <Layout className=\"h-4 w-4 text-primary\" />\r\n                    <span>{lesson.activities?.length || 0} Activities</span>\r\n                  </div>\r\n                  \r\n                  <div className=\"border-t pt-4 mt-4\">\r\n                    <h3 className=\"font-medium mb-3\">Progress</h3>\r\n                    <div className=\"space-y-3\">\r\n                      {lesson.questions?.map((_, index) => (\r\n                        <div\r\n                          key={index}\r\n                          className={cn(\r\n                            \"flex items-center gap-2 p-2 rounded-md transition-colors\",\r\n                            currentStep === index ? \"bg-accent\" : \"hover:bg-accent/50\",\r\n                            index < currentStep && \"text-primary\"\r\n                          )}\r\n                        >\r\n                          {index < currentStep ? (\r\n                            <CheckCircle2 className=\"h-4 w-4\" />\r\n                          ) : (\r\n                            <div className={cn(\r\n                              \"h-4 w-4 rounded-full border\",\r\n                              currentStep === index && \"border-primary\"\r\n                            )} />\r\n                          )}\r\n                          <span className=\"text-sm\">Question {index + 1}</span>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n\r\n          {/* Main Content Area */}\r\n          <div className=\"space-y-8\">\r\n            <AnimatePresence mode=\"wait\">\r\n              <motion.div\r\n                key={currentStep}\r\n                initial={{ opacity: 0, y: 20 }}\r\n                animate={{ opacity: 1, y: 0 }}\r\n                exit={{ opacity: 0, y: -20 }}\r\n                transition={{ duration: 0.3 }}\r\n              >\r\n                <Card>\r\n                  <CardHeader>\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <Badge variant=\"outline\" className=\"bg-primary/5\">\r\n                        Question {currentStep + 1}\r\n                      </Badge>\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <Star className=\"h-4 w-4 text-yellow-500\" />\r\n                        <span className=\"text-sm\">Points: 10</span>\r\n                      </div>\r\n                    </div>\r\n                    <CardTitle className=\"text-2xl mt-4\">\r\n                      {lesson.questions?.[currentStep]?.title || \"Question Title\"}\r\n                    </CardTitle>\r\n                  </CardHeader>\r\n                  <CardContent className=\"space-y-6\">\r\n                    {/* Question Content */}\r\n                    <div className=\"prose prose-sm dark:prose-invert max-w-none\">\r\n                      {lesson.questions?.[currentStep]?.content || \"Question content goes here...\"}\r\n                    </div>\r\n\r\n                    {/* Interactive Elements */}\r\n                    <div className=\"space-y-4 pt-6\">\r\n                      <Button \r\n                        className=\"w-full justify-start text-left\"\r\n                        variant=\"outline\"\r\n                      >\r\n                        <Play className=\"h-4 w-4 mr-2\" />\r\n                        Start Activity\r\n                      </Button>\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n              </motion.div>\r\n            </AnimatePresence>\r\n\r\n            {/* Navigation Buttons */}\r\n            <div className=\"flex items-center justify-between pt-4\">\r\n              <Button\r\n                variant=\"outline\"\r\n                onClick={() => setCurrentStep(prev => Math.max(0, prev - 1))}\r\n                disabled={currentStep === 0}\r\n              >\r\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\r\n                Previous\r\n              </Button>\r\n              <Button\r\n                onClick={() => {\r\n                  if (currentStep < (lesson.questions?.length || 0) - 1) {\r\n                    setCurrentStep(prev => prev + 1);\r\n                    setProgress(prev => prev + (100 / (lesson.questions?.length || 1)));\r\n                  } else {\r\n                    handleEndLesson();\r\n                  }\r\n                }}\r\n              >\r\n                {currentStep < (lesson.questions?.length || 0) - 1 ? (\r\n                  <>\r\n                    Next\r\n                    <ArrowLeft className=\"h-4 w-4 ml-2 rotate-180\" />\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    Complete Lesson\r\n                    <Flag className=\"h-4 w-4 ml-2\" />\r\n                  </>\r\n                )}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n} "
        }
    ]
}