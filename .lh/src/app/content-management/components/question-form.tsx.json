{
    "sourceFile": "src/app/content-management/components/question-form.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1739453789001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739453813704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -456,8 +456,171 @@\n             </div>\r\n           </div>\r\n         );\r\n \r\n+      case 'grammarSpeaking':\r\n+        return (\r\n+          <div className=\"space-y-4\">\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Grammar Point</Label>\r\n+              <Input\r\n+                value={metadata.grammarPoint || ''}\r\n+                onChange={(e) => handleMetadataChange('grammarPoint', e.target.value)}\r\n+              />\r\n+            </div>\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Example</Label>\r\n+              <Textarea\r\n+                value={metadata.example || ''}\r\n+                onChange={(e) => handleMetadataChange('example', e.target.value)}\r\n+              />\r\n+            </div>\r\n+          </div>\r\n+        );\r\n+\r\n+      case 'idiomPractice':\r\n+        return (\r\n+          <div className=\"space-y-4\">\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Idiom</Label>\r\n+              <Input\r\n+                value={metadata.idiom || ''}\r\n+                onChange={(e) => handleMetadataChange('idiom', e.target.value)}\r\n+              />\r\n+            </div>\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Meaning</Label>\r\n+              <Textarea\r\n+                value={metadata.meaning || ''}\r\n+                onChange={(e) => handleMetadataChange('meaning', e.target.value)}\r\n+              />\r\n+            </div>\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Usage Notes</Label>\r\n+              <Textarea\r\n+                value={metadata.usageNotes || ''}\r\n+                onChange={(e) => handleMetadataChange('usageNotes', e.target.value)}\r\n+              />\r\n+            </div>\r\n+          </div>\r\n+        );\r\n+\r\n+      case 'lookAndSpeak':\r\n+        return (\r\n+          <div className=\"space-y-4\">\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Image URL</Label>\r\n+              <Input\r\n+                value={metadata.imageUrl || ''}\r\n+                onChange={(e) => handleMetadataChange('imageUrl', e.target.value)}\r\n+              />\r\n+            </div>\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Image Caption</Label>\r\n+              <Input\r\n+                value={metadata.imageCaption || ''}\r\n+                onChange={(e) => handleMetadataChange('imageCaption', e.target.value)}\r\n+              />\r\n+            </div>\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Helpful Vocabulary</Label>\r\n+              {metadata.helpfulVocabulary?.map((word: string, idx: number) => (\r\n+                <Input\r\n+                  key={`vocab-${idx}`}\r\n+                  value={word}\r\n+                  onChange={(e) => {\r\n+                    const newVocab = [...(metadata.helpfulVocabulary || [])];\r\n+                    newVocab[idx] = e.target.value;\r\n+                    handleMetadataChange('helpfulVocabulary', newVocab);\r\n+                  }}\r\n+                />\r\n+              ))}\r\n+              <Button\r\n+                variant=\"outline\"\r\n+                size=\"sm\"\r\n+                onClick={() => handleMetadataChange('helpfulVocabulary', [...(metadata.helpfulVocabulary || []), ''])}\r\n+              >\r\n+                Add Vocabulary\r\n+              </Button>\r\n+            </div>\r\n+          </div>\r\n+        );\r\n+\r\n+      case 'watchAndSpeak':\r\n+        return (\r\n+          <div className=\"space-y-4\">\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Video URL</Label>\r\n+              <Input\r\n+                value={metadata.videoUrl || ''}\r\n+                onChange={(e) => handleMetadataChange('videoUrl', e.target.value)}\r\n+              />\r\n+            </div>\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Discussion Points</Label>\r\n+              {metadata.discussionPoints?.map((point: string, idx: number) => (\r\n+                <Input\r\n+                  key={`point-${idx}`}\r\n+                  value={point}\r\n+                  onChange={(e) => {\r\n+                    const newPoints = [...(metadata.discussionPoints || [])];\r\n+                    newPoints[idx] = e.target.value;\r\n+                    handleMetadataChange('discussionPoints', newPoints);\r\n+                  }}\r\n+                />\r\n+              ))}\r\n+              <Button\r\n+                variant=\"outline\"\r\n+                size=\"sm\"\r\n+                onClick={() => handleMetadataChange('discussionPoints', [...(metadata.discussionPoints || []), ''])}\r\n+              >\r\n+                Add Discussion Point\r\n+              </Button>\r\n+            </div>\r\n+          </div>\r\n+        );\r\n+\r\n+      case 'debate':\r\n+        return (\r\n+          <div className=\"space-y-4\">\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Topic</Label>\r\n+              <Input\r\n+                value={metadata.topic || ''}\r\n+                onChange={(e) => handleMetadataChange('topic', e.target.value)}\r\n+              />\r\n+            </div>\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Position</Label>\r\n+              <Input\r\n+                value={metadata.position || ''}\r\n+                onChange={(e) => handleMetadataChange('position', e.target.value)}\r\n+              />\r\n+            </div>\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Key Points</Label>\r\n+              {metadata.keyPoints?.map((point: string, idx: number) => (\r\n+                <Input\r\n+                  key={`point-${idx}`}\r\n+                  value={point}\r\n+                  onChange={(e) => {\r\n+                    const newPoints = [...(metadata.keyPoints || [])];\r\n+                    newPoints[idx] = e.target.value;\r\n+                    handleMetadataChange('keyPoints', newPoints);\r\n+                  }}\r\n+                />\r\n+              ))}\r\n+              <Button\r\n+                variant=\"outline\"\r\n+                size=\"sm\"\r\n+                onClick={() => handleMetadataChange('keyPoints', [...(metadata.keyPoints || []), ''])}\r\n+              >\r\n+                Add Key Point\r\n+              </Button>\r\n+            </div>\r\n+          </div>\r\n+        );\r\n+\r\n       // case 'grammar_speaking':\r\n       //   return (\r\n       //     <>\r\n       //       <div className=\"space-y-4\">\r\n"
                },
                {
                    "date": 1739453901155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -619,8 +619,279 @@\n             </div>\r\n           </div>\r\n         );\r\n \r\n+      case 'presentation':\r\n+        return (\r\n+          <div className=\"space-y-4\">\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Topic</Label>\r\n+              <Input\r\n+                value={metadata.topic || ''}\r\n+                onChange={(e) => handleMetadataChange('topic', e.target.value)}\r\n+              />\r\n+            </div>\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Duration</Label>\r\n+              <Input\r\n+                value={metadata.duration || ''}\r\n+                onChange={(e) => handleMetadataChange('duration', e.target.value)}\r\n+              />\r\n+            </div>\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Structure</Label>\r\n+              {metadata.structure?.map((section: { title: string; points: string[] }, idx: number) => (\r\n+                <div key={`section-${idx}`} className=\"space-y-2 p-4 border rounded\">\r\n+                  <Input\r\n+                    value={section.title}\r\n+                    onChange={(e) => {\r\n+                      const newStructure = [...(metadata.structure || [])];\r\n+                      newStructure[idx] = { ...section, title: e.target.value };\r\n+                      handleMetadataChange('structure', newStructure);\r\n+                    }}\r\n+                    placeholder=\"Section Title\"\r\n+                  />\r\n+                  {section.points.map((point: string, pointIdx: number) => (\r\n+                    <Input\r\n+                      key={`point-${pointIdx}`}\r\n+                      value={point}\r\n+                      onChange={(e) => {\r\n+                        const newStructure = [...(metadata.structure || [])];\r\n+                        newStructure[idx].points[pointIdx] = e.target.value;\r\n+                        handleMetadataChange('structure', newStructure);\r\n+                      }}\r\n+                      placeholder=\"Point\"\r\n+                    />\r\n+                  ))}\r\n+                  <Button\r\n+                    variant=\"outline\"\r\n+                    size=\"sm\"\r\n+                    onClick={() => {\r\n+                      const newStructure = [...(metadata.structure || [])];\r\n+                      newStructure[idx].points.push('');\r\n+                      handleMetadataChange('structure', newStructure);\r\n+                    }}\r\n+                  >\r\n+                    Add Point\r\n+                  </Button>\r\n+                </div>\r\n+              ))}\r\n+              <Button\r\n+                variant=\"outline\"\r\n+                size=\"sm\"\r\n+                onClick={() => handleMetadataChange('structure', [...(metadata.structure || []), { title: '', points: [] }])}\r\n+              >\r\n+                Add Section\r\n+              </Button>\r\n+            </div>\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Visual Aids</Label>\r\n+              {metadata.visualAids?.map((aid: { url: string; description: string }, idx: number) => (\r\n+                <div key={`aid-${idx}`} className=\"space-y-2 p-4 border rounded\">\r\n+                  <Input\r\n+                    value={aid.url}\r\n+                    onChange={(e) => {\r\n+                      const newAids = [...(metadata.visualAids || [])];\r\n+                      newAids[idx] = { ...aid, url: e.target.value };\r\n+                      handleMetadataChange('visualAids', newAids);\r\n+                    }}\r\n+                    placeholder=\"URL\"\r\n+                  />\r\n+                  <Input\r\n+                    value={aid.description}\r\n+                    onChange={(e) => {\r\n+                      const newAids = [...(metadata.visualAids || [])];\r\n+                      newAids[idx] = { ...aid, description: e.target.value };\r\n+                      handleMetadataChange('visualAids', newAids);\r\n+                    }}\r\n+                    placeholder=\"Description\"\r\n+                  />\r\n+                </div>\r\n+              ))}\r\n+              <Button\r\n+                variant=\"outline\"\r\n+                size=\"sm\"\r\n+                onClick={() => handleMetadataChange('visualAids', [...(metadata.visualAids || []), { url: '', description: '' }])}\r\n+              >\r\n+                Add Visual Aid\r\n+              </Button>\r\n+            </div>\r\n+          </div>\r\n+        );\r\n+\r\n+      case 'vocabularyAndSpeaking':\r\n+        return (\r\n+          <div className=\"space-y-4\">\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Speaking Prompt</Label>\r\n+              <Textarea\r\n+                value={metadata.speakingPrompt || ''}\r\n+                onChange={(e) => handleMetadataChange('speakingPrompt', e.target.value)}\r\n+              />\r\n+            </div>\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Vocabulary Prompt</Label>\r\n+              <Textarea\r\n+                value={metadata.vocabularyPrompt || ''}\r\n+                onChange={(e) => handleMetadataChange('vocabularyPrompt', e.target.value)}\r\n+              />\r\n+            </div>\r\n+          </div>\r\n+        );\r\n+\r\n+      case 'vocabularyAndWordlist':\r\n+        return (\r\n+          <div className=\"space-y-4\">\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Wordlist</Label>\r\n+              {metadata.wordlistPrompt?.map((word: {\r\n+                word: string;\r\n+                definition: string;\r\n+                correctPronunciation: string;\r\n+                phoneticGuide: string;\r\n+                pronunciationAudio: string;\r\n+                example: string;\r\n+                usageNotes: string;\r\n+                synonyms: string[];\r\n+                antonyms: string[];\r\n+              }, idx: number) => (\r\n+                <div key={`word-${idx}`} className=\"space-y-2 p-4 border rounded\">\r\n+                  <Input\r\n+                    value={word.word}\r\n+                    onChange={(e) => {\r\n+                      const newWordlist = [...(metadata.wordlistPrompt || [])];\r\n+                      newWordlist[idx] = { ...word, word: e.target.value };\r\n+                      handleMetadataChange('wordlistPrompt', newWordlist);\r\n+                    }}\r\n+                    placeholder=\"Word\"\r\n+                  />\r\n+                  <Input\r\n+                    value={word.definition}\r\n+                    onChange={(e) => {\r\n+                      const newWordlist = [...(metadata.wordlistPrompt || [])];\r\n+                      newWordlist[idx] = { ...word, definition: e.target.value };\r\n+                      handleMetadataChange('wordlistPrompt', newWordlist);\r\n+                    }}\r\n+                    placeholder=\"Definition\"\r\n+                  />\r\n+                  <Input\r\n+                    value={word.correctPronunciation}\r\n+                    onChange={(e) => {\r\n+                      const newWordlist = [...(metadata.wordlistPrompt || [])];\r\n+                      newWordlist[idx] = { ...word, correctPronunciation: e.target.value };\r\n+                      handleMetadataChange('wordlistPrompt', newWordlist);\r\n+                    }}\r\n+                    placeholder=\"Correct Pronunciation\"\r\n+                  />\r\n+                  <Input\r\n+                    value={word.phoneticGuide}\r\n+                    onChange={(e) => {\r\n+                      const newWordlist = [...(metadata.wordlistPrompt || [])];\r\n+                      newWordlist[idx] = { ...word, phoneticGuide: e.target.value };\r\n+                      handleMetadataChange('wordlistPrompt', newWordlist);\r\n+                    }}\r\n+                    placeholder=\"Phonetic Guide\"\r\n+                  />\r\n+                  <Input\r\n+                    value={word.pronunciationAudio}\r\n+                    onChange={(e) => {\r\n+                      const newWordlist = [...(metadata.wordlistPrompt || [])];\r\n+                      newWordlist[idx] = { ...word, pronunciationAudio: e.target.value };\r\n+                      handleMetadataChange('wordlistPrompt', newWordlist);\r\n+                    }}\r\n+                    placeholder=\"Pronunciation Audio URL\"\r\n+                  />\r\n+                  <Textarea\r\n+                    value={word.example}\r\n+                    onChange={(e) => {\r\n+                      const newWordlist = [...(metadata.wordlistPrompt || [])];\r\n+                      newWordlist[idx] = { ...word, example: e.target.value };\r\n+                      handleMetadataChange('wordlistPrompt', newWordlist);\r\n+                    }}\r\n+                    placeholder=\"Example\"\r\n+                  />\r\n+                  <Textarea\r\n+                    value={word.usageNotes}\r\n+                    onChange={(e) => {\r\n+                      const newWordlist = [...(metadata.wordlistPrompt || [])];\r\n+                      newWordlist[idx] = { ...word, usageNotes: e.target.value };\r\n+                      handleMetadataChange('wordlistPrompt', newWordlist);\r\n+                    }}\r\n+                    placeholder=\"Usage Notes\"\r\n+                  />\r\n+                  <div className=\"space-y-2\">\r\n+                    <Label>Synonyms</Label>\r\n+                    {word.synonyms.map((synonym: string, synIdx: number) => (\r\n+                      <Input\r\n+                        key={`synonym-${synIdx}`}\r\n+                        value={synonym}\r\n+                        onChange={(e) => {\r\n+                          const newWordlist = [...(metadata.wordlistPrompt || [])];\r\n+                          newWordlist[idx].synonyms[synIdx] = e.target.value;\r\n+                          handleMetadataChange('wordlistPrompt', newWordlist);\r\n+                        }}\r\n+                      />\r\n+                    ))}\r\n+                    <Button\r\n+                      variant=\"outline\"\r\n+                      size=\"sm\"\r\n+                      onClick={() => {\r\n+                        const newWordlist = [...(metadata.wordlistPrompt || [])];\r\n+                        newWordlist[idx].synonyms.push('');\r\n+                        handleMetadataChange('wordlistPrompt', newWordlist);\r\n+                      }}\r\n+                    >\r\n+                      Add Synonym\r\n+                    </Button>\r\n+                  </div>\r\n+                  <div className=\"space-y-2\">\r\n+                    <Label>Antonyms</Label>\r\n+                    {word.antonyms.map((antonym: string, antIdx: number) => (\r\n+                      <Input\r\n+                        key={`antonym-${antIdx}`}\r\n+                        value={antonym}\r\n+                        onChange={(e) => {\r\n+                          const newWordlist = [...(metadata.wordlistPrompt || [])];\r\n+                          newWordlist[idx].antonyms[antIdx] = e.target.value;\r\n+                          handleMetadataChange('wordlistPrompt', newWordlist);\r\n+                        }}\r\n+                      />\r\n+                    ))}\r\n+                    <Button\r\n+                      variant=\"outline\"\r\n+                      size=\"sm\"\r\n+                      onClick={() => {\r\n+                        const newWordlist = [...(metadata.wordlistPrompt || [])];\r\n+                        newWordlist[idx].antonyms.push('');\r\n+                        handleMetadataChange('wordlistPrompt', newWordlist);\r\n+                      }}\r\n+                    >\r\n+                      Add Antonym\r\n+                    </Button>\r\n+                  </div>\r\n+                </div>\r\n+              ))}\r\n+              <Button\r\n+                variant=\"outline\"\r\n+                size=\"sm\"\r\n+                onClick={() => handleMetadataChange('wordlistPrompt', [...(metadata.wordlistPrompt || []), {\r\n+                  word: '',\r\n+                  definition: '',\r\n+                  correctPronunciation: '',\r\n+                  phoneticGuide: '',\r\n+                  pronunciationAudio: '',\r\n+                  example: '',\r\n+                  usageNotes: '',\r\n+                  synonyms: [],\r\n+                  antonyms: []\r\n+                }])}\r\n+              >\r\n+                Add Word\r\n+              </Button>\r\n+            </div>\r\n+          </div>\r\n+        );\r\n+\r\n       // case 'grammar_speaking':\r\n       //   return (\r\n       //     <>\r\n       //       <div className=\"space-y-4\">\r\n"
                },
                {
                    "date": 1739453970913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -890,8 +890,253 @@\n             </div>\r\n           </div>\r\n         );\r\n \r\n+      case 'sentenceFormation':\r\n+        return (\r\n+          <div className=\"space-y-4\">\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Original Sentence</Label>\r\n+              <Input\r\n+                value={metadata.originalSentence || ''}\r\n+                onChange={(e) => handleMetadataChange('originalSentence', e.target.value)}\r\n+              />\r\n+            </div>\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Hints</Label>\r\n+              {metadata.hint?.map((hint: string, idx: number) => (\r\n+                <Input\r\n+                  key={`hint-${idx}`}\r\n+                  value={hint}\r\n+                  onChange={(e) => {\r\n+                    const newHints = [...(metadata.hint || [])];\r\n+                    newHints[idx] = e.target.value;\r\n+                    handleMetadataChange('hint', newHints);\r\n+                  }}\r\n+                />\r\n+              ))}\r\n+              <Button\r\n+                variant=\"outline\"\r\n+                size=\"sm\"\r\n+                onClick={() => handleMetadataChange('hint', [...(metadata.hint || []), ''])}\r\n+              >\r\n+                Add Hint\r\n+              </Button>\r\n+            </div>\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Correct Answer</Label>\r\n+              <Input\r\n+                value={metadata.correctAnswer || ''}\r\n+                onChange={(e) => handleMetadataChange('correctAnswer', e.target.value)}\r\n+              />\r\n+            </div>\r\n+          </div>\r\n+        );\r\n+\r\n+      case 'sentenceTransformation':\r\n+        return (\r\n+          <div className=\"space-y-4\">\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Original Sentence</Label>\r\n+              <Input\r\n+                value={metadata.originalSentence || ''}\r\n+                onChange={(e) => handleMetadataChange('originalSentence', e.target.value)}\r\n+              />\r\n+            </div>\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Tense to Transform</Label>\r\n+              <Input\r\n+                value={metadata.tenseToTransform || ''}\r\n+                onChange={(e) => handleMetadataChange('tenseToTransform', e.target.value)}\r\n+              />\r\n+            </div>\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Hints</Label>\r\n+              {metadata.hint?.map((hint: string, idx: number) => (\r\n+                <Input\r\n+                  key={`hint-${idx}`}\r\n+                  value={hint}\r\n+                  onChange={(e) => {\r\n+                    const newHints = [...(metadata.hint || [])];\r\n+                    newHints[idx] = e.target.value;\r\n+                    handleMetadataChange('hint', newHints);\r\n+                  }}\r\n+                />\r\n+              ))}\r\n+              <Button\r\n+                variant=\"outline\"\r\n+                size=\"sm\"\r\n+                onClick={() => handleMetadataChange('hint', [...(metadata.hint || []), ''])}\r\n+              >\r\n+                Add Hint\r\n+              </Button>\r\n+            </div>\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Correct Answer</Label>\r\n+              <Input\r\n+                value={metadata.correctAnswer || ''}\r\n+                onChange={(e) => handleMetadataChange('correctAnswer', e.target.value)}\r\n+              />\r\n+            </div>\r\n+          </div>\r\n+        );\r\n+\r\n+      case 'sentenceCompletion':\r\n+        return (\r\n+          <div className=\"space-y-4\">\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Incomplete Sentence</Label>\r\n+              <Input\r\n+                value={metadata.sentence || ''}\r\n+                onChange={(e) => handleMetadataChange('sentence', e.target.value)}\r\n+              />\r\n+            </div>\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Hints</Label>\r\n+              {metadata.hint?.map((hint: string, idx: number) => (\r\n+                <Input\r\n+                  key={`hint-${idx}`}\r\n+                  value={hint}\r\n+                  onChange={(e) => {\r\n+                    const newHints = [...(metadata.hint || [])];\r\n+                    newHints[idx] = e.target.value;\r\n+                    handleMetadataChange('hint', newHints);\r\n+                  }}\r\n+                />\r\n+              ))}\r\n+              <Button\r\n+                variant=\"outline\"\r\n+                size=\"sm\"\r\n+                onClick={() => handleMetadataChange('hint', [...(metadata.hint || []), ''])}\r\n+              >\r\n+                Add Hint\r\n+              </Button>\r\n+            </div>\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Correct Answer</Label>\r\n+              <Input\r\n+                value={metadata.correctAnswer || ''}\r\n+                onChange={(e) => handleMetadataChange('correctAnswer', e.target.value)}\r\n+              />\r\n+            </div>\r\n+          </div>\r\n+        );\r\n+\r\n+      case 'sentenceTransformationAndCompletion':\r\n+        return (\r\n+          <div className=\"space-y-4\">\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Original Sentence</Label>\r\n+              <Input\r\n+                value={metadata.originalSentence || ''}\r\n+                onChange={(e) => handleMetadataChange('originalSentence', e.target.value)}\r\n+              />\r\n+            </div>\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Tense to Transform</Label>\r\n+              <Input\r\n+                value={metadata.tenseToTransform || ''}\r\n+                onChange={(e) => handleMetadataChange('tenseToTransform', e.target.value)}\r\n+              />\r\n+            </div>\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Hints</Label>\r\n+              {metadata.hint?.map((hint: string, idx: number) => (\r\n+                <Input\r\n+                  key={`hint-${idx}`}\r\n+                  value={hint}\r\n+                  onChange={(e) => {\r\n+                    const newHints = [...(metadata.hint || [])];\r\n+                    newHints[idx] = e.target.value;\r\n+                    handleMetadataChange('hint', newHints);\r\n+                  }}\r\n+                />\r\n+              ))}\r\n+              <Button\r\n+                variant=\"outline\"\r\n+                size=\"sm\"\r\n+                onClick={() => handleMetadataChange('hint', [...(metadata.hint || []), ''])}\r\n+              >\r\n+                Add Hint\r\n+              </Button>\r\n+            </div>\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Correct Answer</Label>\r\n+              <Input\r\n+                value={metadata.correctAnswer || ''}\r\n+                onChange={(e) => handleMetadataChange('correctAnswer', e.target.value)}\r\n+              />\r\n+            </div>\r\n+          </div>\r\n+        );\r\n+\r\n+      case 'objectAndSpeaking':\r\n+        return (\r\n+          <div className=\"space-y-4\">\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Speaking Prompt</Label>\r\n+              <Textarea\r\n+                value={metadata.speakingPrompt || ''}\r\n+                onChange={(e) => handleMetadataChange('speakingPrompt', e.target.value)}\r\n+              />\r\n+            </div>\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Object Prompt</Label>\r\n+              <Textarea\r\n+                value={metadata.objectPrompt || ''}\r\n+                onChange={(e) => handleMetadataChange('objectPrompt', e.target.value)}\r\n+              />\r\n+            </div>\r\n+          </div>\r\n+        );\r\n+\r\n+      case 'objectActionAndSpeaking':\r\n+        return (\r\n+          <div className=\"space-y-4\">\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Speaking Prompt</Label>\r\n+              <Textarea\r\n+                value={metadata.speakingPrompt || ''}\r\n+                onChange={(e) => handleMetadataChange('speakingPrompt', e.target.value)}\r\n+              />\r\n+            </div>\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Object Prompt</Label>\r\n+              <Textarea\r\n+                value={metadata.objectPrompt || ''}\r\n+                onChange={(e) => handleMetadataChange('objectPrompt', e.target.value)}\r\n+              />\r\n+            </div>\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Action Prompt</Label>\r\n+              <Textarea\r\n+                value={metadata.actionPrompt || ''}\r\n+                onChange={(e) => handleMetadataChange('actionPrompt', e.target.value)}\r\n+              />\r\n+            </div>\r\n+          </div>\r\n+        );\r\n+\r\n+      case 'speakingAndSpeaking':\r\n+        return (\r\n+          <div className=\"space-y-4\">\r\n+            <div className=\"space-y-2\">\r\n+              <Label>First Speaking Prompt</Label>\r\n+              <Textarea\r\n+                value={metadata.speakingPrompt || ''}\r\n+                onChange={(e) => handleMetadataChange('speakingPrompt', e.target.value)}\r\n+              />\r\n+            </div>\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Second Speaking Prompt</Label>\r\n+              <Textarea\r\n+                value={metadata.speakingPrompt2 || ''}\r\n+                onChange={(e) => handleMetadataChange('speakingPrompt2', e.target.value)}\r\n+              />\r\n+            </div>\r\n+          </div>\r\n+        );\r\n+\r\n       // case 'grammar_speaking':\r\n       //   return (\r\n       //     <>\r\n       //       <div className=\"space-y-4\">\r\n"
                },
                {
                    "date": 1739454035259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -890,253 +890,8 @@\n             </div>\r\n           </div>\r\n         );\r\n \r\n-      case 'sentenceFormation':\r\n-        return (\r\n-          <div className=\"space-y-4\">\r\n-            <div className=\"space-y-2\">\r\n-              <Label>Original Sentence</Label>\r\n-              <Input\r\n-                value={metadata.originalSentence || ''}\r\n-                onChange={(e) => handleMetadataChange('originalSentence', e.target.value)}\r\n-              />\r\n-            </div>\r\n-            <div className=\"space-y-2\">\r\n-              <Label>Hints</Label>\r\n-              {metadata.hint?.map((hint: string, idx: number) => (\r\n-                <Input\r\n-                  key={`hint-${idx}`}\r\n-                  value={hint}\r\n-                  onChange={(e) => {\r\n-                    const newHints = [...(metadata.hint || [])];\r\n-                    newHints[idx] = e.target.value;\r\n-                    handleMetadataChange('hint', newHints);\r\n-                  }}\r\n-                />\r\n-              ))}\r\n-              <Button\r\n-                variant=\"outline\"\r\n-                size=\"sm\"\r\n-                onClick={() => handleMetadataChange('hint', [...(metadata.hint || []), ''])}\r\n-              >\r\n-                Add Hint\r\n-              </Button>\r\n-            </div>\r\n-            <div className=\"space-y-2\">\r\n-              <Label>Correct Answer</Label>\r\n-              <Input\r\n-                value={metadata.correctAnswer || ''}\r\n-                onChange={(e) => handleMetadataChange('correctAnswer', e.target.value)}\r\n-              />\r\n-            </div>\r\n-          </div>\r\n-        );\r\n-\r\n-      case 'sentenceTransformation':\r\n-        return (\r\n-          <div className=\"space-y-4\">\r\n-            <div className=\"space-y-2\">\r\n-              <Label>Original Sentence</Label>\r\n-              <Input\r\n-                value={metadata.originalSentence || ''}\r\n-                onChange={(e) => handleMetadataChange('originalSentence', e.target.value)}\r\n-              />\r\n-            </div>\r\n-            <div className=\"space-y-2\">\r\n-              <Label>Tense to Transform</Label>\r\n-              <Input\r\n-                value={metadata.tenseToTransform || ''}\r\n-                onChange={(e) => handleMetadataChange('tenseToTransform', e.target.value)}\r\n-              />\r\n-            </div>\r\n-            <div className=\"space-y-2\">\r\n-              <Label>Hints</Label>\r\n-              {metadata.hint?.map((hint: string, idx: number) => (\r\n-                <Input\r\n-                  key={`hint-${idx}`}\r\n-                  value={hint}\r\n-                  onChange={(e) => {\r\n-                    const newHints = [...(metadata.hint || [])];\r\n-                    newHints[idx] = e.target.value;\r\n-                    handleMetadataChange('hint', newHints);\r\n-                  }}\r\n-                />\r\n-              ))}\r\n-              <Button\r\n-                variant=\"outline\"\r\n-                size=\"sm\"\r\n-                onClick={() => handleMetadataChange('hint', [...(metadata.hint || []), ''])}\r\n-              >\r\n-                Add Hint\r\n-              </Button>\r\n-            </div>\r\n-            <div className=\"space-y-2\">\r\n-              <Label>Correct Answer</Label>\r\n-              <Input\r\n-                value={metadata.correctAnswer || ''}\r\n-                onChange={(e) => handleMetadataChange('correctAnswer', e.target.value)}\r\n-              />\r\n-            </div>\r\n-          </div>\r\n-        );\r\n-\r\n-      case 'sentenceCompletion':\r\n-        return (\r\n-          <div className=\"space-y-4\">\r\n-            <div className=\"space-y-2\">\r\n-              <Label>Incomplete Sentence</Label>\r\n-              <Input\r\n-                value={metadata.sentence || ''}\r\n-                onChange={(e) => handleMetadataChange('sentence', e.target.value)}\r\n-              />\r\n-            </div>\r\n-            <div className=\"space-y-2\">\r\n-              <Label>Hints</Label>\r\n-              {metadata.hint?.map((hint: string, idx: number) => (\r\n-                <Input\r\n-                  key={`hint-${idx}`}\r\n-                  value={hint}\r\n-                  onChange={(e) => {\r\n-                    const newHints = [...(metadata.hint || [])];\r\n-                    newHints[idx] = e.target.value;\r\n-                    handleMetadataChange('hint', newHints);\r\n-                  }}\r\n-                />\r\n-              ))}\r\n-              <Button\r\n-                variant=\"outline\"\r\n-                size=\"sm\"\r\n-                onClick={() => handleMetadataChange('hint', [...(metadata.hint || []), ''])}\r\n-              >\r\n-                Add Hint\r\n-              </Button>\r\n-            </div>\r\n-            <div className=\"space-y-2\">\r\n-              <Label>Correct Answer</Label>\r\n-              <Input\r\n-                value={metadata.correctAnswer || ''}\r\n-                onChange={(e) => handleMetadataChange('correctAnswer', e.target.value)}\r\n-              />\r\n-            </div>\r\n-          </div>\r\n-        );\r\n-\r\n-      case 'sentenceTransformationAndCompletion':\r\n-        return (\r\n-          <div className=\"space-y-4\">\r\n-            <div className=\"space-y-2\">\r\n-              <Label>Original Sentence</Label>\r\n-              <Input\r\n-                value={metadata.originalSentence || ''}\r\n-                onChange={(e) => handleMetadataChange('originalSentence', e.target.value)}\r\n-              />\r\n-            </div>\r\n-            <div className=\"space-y-2\">\r\n-              <Label>Tense to Transform</Label>\r\n-              <Input\r\n-                value={metadata.tenseToTransform || ''}\r\n-                onChange={(e) => handleMetadataChange('tenseToTransform', e.target.value)}\r\n-              />\r\n-            </div>\r\n-            <div className=\"space-y-2\">\r\n-              <Label>Hints</Label>\r\n-              {metadata.hint?.map((hint: string, idx: number) => (\r\n-                <Input\r\n-                  key={`hint-${idx}`}\r\n-                  value={hint}\r\n-                  onChange={(e) => {\r\n-                    const newHints = [...(metadata.hint || [])];\r\n-                    newHints[idx] = e.target.value;\r\n-                    handleMetadataChange('hint', newHints);\r\n-                  }}\r\n-                />\r\n-              ))}\r\n-              <Button\r\n-                variant=\"outline\"\r\n-                size=\"sm\"\r\n-                onClick={() => handleMetadataChange('hint', [...(metadata.hint || []), ''])}\r\n-              >\r\n-                Add Hint\r\n-              </Button>\r\n-            </div>\r\n-            <div className=\"space-y-2\">\r\n-              <Label>Correct Answer</Label>\r\n-              <Input\r\n-                value={metadata.correctAnswer || ''}\r\n-                onChange={(e) => handleMetadataChange('correctAnswer', e.target.value)}\r\n-              />\r\n-            </div>\r\n-          </div>\r\n-        );\r\n-\r\n-      case 'objectAndSpeaking':\r\n-        return (\r\n-          <div className=\"space-y-4\">\r\n-            <div className=\"space-y-2\">\r\n-              <Label>Speaking Prompt</Label>\r\n-              <Textarea\r\n-                value={metadata.speakingPrompt || ''}\r\n-                onChange={(e) => handleMetadataChange('speakingPrompt', e.target.value)}\r\n-              />\r\n-            </div>\r\n-            <div className=\"space-y-2\">\r\n-              <Label>Object Prompt</Label>\r\n-              <Textarea\r\n-                value={metadata.objectPrompt || ''}\r\n-                onChange={(e) => handleMetadataChange('objectPrompt', e.target.value)}\r\n-              />\r\n-            </div>\r\n-          </div>\r\n-        );\r\n-\r\n-      case 'objectActionAndSpeaking':\r\n-        return (\r\n-          <div className=\"space-y-4\">\r\n-            <div className=\"space-y-2\">\r\n-              <Label>Speaking Prompt</Label>\r\n-              <Textarea\r\n-                value={metadata.speakingPrompt || ''}\r\n-                onChange={(e) => handleMetadataChange('speakingPrompt', e.target.value)}\r\n-              />\r\n-            </div>\r\n-            <div className=\"space-y-2\">\r\n-              <Label>Object Prompt</Label>\r\n-              <Textarea\r\n-                value={metadata.objectPrompt || ''}\r\n-                onChange={(e) => handleMetadataChange('objectPrompt', e.target.value)}\r\n-              />\r\n-            </div>\r\n-            <div className=\"space-y-2\">\r\n-              <Label>Action Prompt</Label>\r\n-              <Textarea\r\n-                value={metadata.actionPrompt || ''}\r\n-                onChange={(e) => handleMetadataChange('actionPrompt', e.target.value)}\r\n-              />\r\n-            </div>\r\n-          </div>\r\n-        );\r\n-\r\n-      case 'speakingAndSpeaking':\r\n-        return (\r\n-          <div className=\"space-y-4\">\r\n-            <div className=\"space-y-2\">\r\n-              <Label>First Speaking Prompt</Label>\r\n-              <Textarea\r\n-                value={metadata.speakingPrompt || ''}\r\n-                onChange={(e) => handleMetadataChange('speakingPrompt', e.target.value)}\r\n-              />\r\n-            </div>\r\n-            <div className=\"space-y-2\">\r\n-              <Label>Second Speaking Prompt</Label>\r\n-              <Textarea\r\n-                value={metadata.speakingPrompt2 || ''}\r\n-                onChange={(e) => handleMetadataChange('speakingPrompt2', e.target.value)}\r\n-              />\r\n-            </div>\r\n-          </div>\r\n-        );\r\n-\r\n       // case 'grammar_speaking':\r\n       //   return (\r\n       //     <>\r\n       //       <div className=\"space-y-4\">\r\n"
                },
                {
                    "date": 1739454041460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -316,16 +316,9 @@\n       case 'readingAndSpeaking':\r\n         return (\r\n           <div className=\"space-y-4\">\r\n             <div className=\"space-y-2\">\r\n-              <Label>Speaking Prompt</Label>\r\n-              <Textarea\r\n-                value={metadata.speakingPrompt || ''}\r\n-                onChange={(e) => handleMetadataChange('speakingPrompt', e.target.value)}\r\n-              />\r\n-            </div>\r\n-            <div className=\"space-y-2\">\r\n-              <Label>Reading Prompt</Label>\r\n+              <Label>Reading Passage</Label>\r\n               <RichTextEditor\r\n                 value={typeof metadata.passage === 'string' \r\n                   ? metadata.passage \r\n                   : JSON.stringify(metadata.passage) || ''}\r\n@@ -333,8 +326,15 @@\n                 placeholder=\"Enter reading passage...\"\r\n                 className=\"min-h-[200px]\"\r\n               />\r\n             </div>\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Speaking Prompt</Label>\r\n+              <Textarea\r\n+                value={metadata.speakingPrompt || ''}\r\n+                onChange={(e) => handleMetadataChange('speakingPrompt', e.target.value)}\r\n+              />\r\n+            </div>\r\n           </div>\r\n         );\r\n \r\n       case 'speakingWithAPartner':\r\n@@ -890,58 +890,19 @@\n             </div>\r\n           </div>\r\n         );\r\n \r\n-      // case 'grammar_speaking':\r\n-      //   return (\r\n-      //     <>\r\n-      //       <div className=\"space-y-4\">\r\n-      //         <div className=\"space-y-2\">\r\n-      //           <Label>Options</Label>\r\n-      //           {question.metadata?.options?.map((option: string, idx: number) => (\r\n-      //             <Input\r\n-      //               key={`option-${idx}`}\r\n-      //               value={option}\r\n-      //               onChange={(e) => {\r\n-      //                 const newOptions = [...(question.metadata?.options || [])];\r\n-      //                 newOptions[idx] = e.target.value;\r\n-      //                 handleMetadataChange('options', newOptions);\r\n-      //               }}\r\n-      //             />\r\n-      //           ))}\r\n-      //           <Button\r\n-      //             variant=\"outline\"\r\n-      //             size=\"sm\"\r\n-      //             onClick={() => handleMetadataChange('options', [...(question.metadata?.options || []), ''])}\r\n-      //           >\r\n-      //             Add Option\r\n-      //           </Button>\r\n-      //         </div>\r\n-      //         <div className=\"space-y-2\">\r\n-      //           <Label>Correct Answer</Label>\r\n-      //           <Select\r\n-      //             value={question.metadata?.correctAnswer?.toString() || ''}\r\n-      //             onValueChange={(value) => handleMetadataChange('correctAnswer', parseInt(value))}\r\n-      //           >\r\n-      //             <SelectTrigger>\r\n-      //               <SelectValue placeholder=\"Select correct answer\" />\r\n-      //             </SelectTrigger>\r\n-      //             <SelectContent>\r\n-      //               {question.metadata?.options?.map((_, idx) => (\r\n-      //                 <SelectItem key={idx} value={idx.toString()}>\r\n-      //                   Option {idx + 1}\r\n-      //                 </SelectItem>\r\n-      //               ))}\r\n-      //             </SelectContent>\r\n-      //           </Select>\r\n-      //         </div>\r\n-      //       </div>\r\n-      //     </>\r\n-      //   );\r\n-\r\n-      \r\n-\r\n-      \r\n+      default:\r\n+        return (\r\n+          <div className=\"space-y-4\">\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Unsupported question type</Label>\r\n+              <p className=\"text-sm text-gray-500\">\r\n+                This question type ({type}) is not yet supported.\r\n+              </p>\r\n+            </div>\r\n+          </div>\r\n+        );\r\n     }\r\n   };\r\n \r\n   return (\r\n"
                },
                {
                    "date": 1739454085379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,20 @@\n import { QUESTION_TYPES } from \"@/app/content-management/constants\";\r\n import { Select, SelectValue, SelectTrigger, SelectItem, SelectContent } from '@/components/ui/select';\r\n import { RichTextEditor, RichTextEditorProps } from '@/components/editor/RichTextEditor';\r\n \r\n+interface QuestionMetadata {\r\n+  // Common fields\r\n+  prompt?: string;\r\n+  teacherScript?: string;\r\n+  // Idiom Practice fields\r\n+  idiom?: string;\r\n+  meaning?: string;\r\n+  usageNotes?: string;\r\n+  example?: string;\r\n+  // ... other metadata fields from other question types\r\n+}\r\n+\r\n export function QuestionForm({\r\n   question,\r\n   index,\r\n   onUpdate,\r\n@@ -70,9 +82,9 @@\n       }\r\n     }\r\n   };\r\n \r\n-  const handleMetadataChange = (field: string, value: any) => {\r\n+  const handleMetadataChange = (field: keyof QuestionMetadata, value: any) => {\r\n     onUpdate(index, {\r\n       ...question,\r\n       metadata: {\r\n         ...question.metadata,\r\n"
                },
                {
                    "date": 1739454197422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,45 @@\n   idiom?: string;\r\n   meaning?: string;\r\n   usageNotes?: string;\r\n   example?: string;\r\n-  // ... other metadata fields from other question types\r\n+  // Story Telling fields\r\n+  storyPrompt?: string;\r\n+  keywords?: string[];\r\n+  hints?: string[];\r\n+  // Listening fields\r\n+  audioContent?: string;\r\n+  transcript?: string;\r\n+  // Multiple Choice fields\r\n+  questions?: string[];\r\n+  options?: string[];\r\n+  correctAnswer?: number;\r\n+  // Listen and Repeat fields\r\n+  phrases?: string[];\r\n+  translations?: string[];\r\n+  // Grammar Speaking fields\r\n+  grammarPoint?: string;\r\n+  // Look and Speak fields\r\n+  imageUrl?: string;\r\n+  imageCaption?: string;\r\n+  helpfulVocabulary?: string[];\r\n+  // Watch and Speak fields\r\n+  videoUrl?: string;\r\n+  discussionPoints?: string[];\r\n+  // Debate fields\r\n+  topic?: string;\r\n+  position?: string;\r\n+  keyPoints?: string[];\r\n+  // Presentation fields\r\n+  duration?: string;\r\n+  structure?: Array<{\r\n+    title: string;\r\n+    points: string[];\r\n+  }>;\r\n+  visualAids?: Array<{\r\n+    url: string;\r\n+    description: string;\r\n+  }>;\r\n }\r\n \r\n export function QuestionForm({\r\n   question,\r\n"
                },
                {
                    "date": 1739454230575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,9 @@\n interface QuestionMetadata {\r\n   // Common fields\r\n   prompt?: string;\r\n   teacherScript?: string;\r\n+  sampleAnswer?: string;\r\n   // Idiom Practice fields\r\n   idiom?: string;\r\n   meaning?: string;\r\n   usageNotes?: string;\r\n"
                },
                {
                    "date": 1739454237661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,10 @@\n   // Common fields\r\n   prompt?: string;\r\n   teacherScript?: string;\r\n   sampleAnswer?: string;\r\n+  sentence?: string;\r\n+  \r\n   // Idiom Practice fields\r\n   idiom?: string;\r\n   meaning?: string;\r\n   usageNotes?: string;\r\n"
                },
                {
                    "date": 1739454299654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,14 @@\n   prompt?: string;\r\n   teacherScript?: string;\r\n   sampleAnswer?: string;\r\n   sentence?: string;\r\n+  blanks?: string[];\r\n+  statement?: string;\r\n+  passage?: string;\r\n+  writingPrompt?: string;\r\n+  speakingPrompt?: string;\r\n+  partnerPrompt?: string;\r\n   \r\n   // Idiom Practice fields\r\n   idiom?: string;\r\n   meaning?: string;\r\n@@ -67,8 +73,11 @@\n   visualAids?: Array<{\r\n     url: string;\r\n     description: string;\r\n   }>;\r\n+  // Matching fields\r\n+  items?: string[];\r\n+  descriptions?: string[];\r\n }\r\n \r\n export function QuestionForm({\r\n   question,\r\n"
                },
                {
                    "date": 1739454324528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,11 +73,8 @@\n   visualAids?: Array<{\r\n     url: string;\r\n     description: string;\r\n   }>;\r\n-  // Matching fields\r\n-  items?: string[];\r\n-  descriptions?: string[];\r\n }\r\n \r\n export function QuestionForm({\r\n   question,\r\n"
                },
                {
                    "date": 1739454343410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,8 @@\n   passage?: string;\r\n   writingPrompt?: string;\r\n   speakingPrompt?: string;\r\n   partnerPrompt?: string;\r\n-  listeningPrompt?: string;\r\n   \r\n   // Idiom Practice fields\r\n   idiom?: string;\r\n   meaning?: string;\r\n"
                },
                {
                    "date": 1739699390272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1267,9 +1267,9 @@\n             <div className=\"flex items-center gap-2\">\r\n               <QuestionTypeIcon type={question.type} className=\"text-primary\" />\r\n               <span className=\"text-sm text-muted-foreground truncate\">\r\n                 {QUESTION_TYPES[question.type]?.label}\r\n-                {question.sub_type && question.sub_type !== question.type && (\r\n+                {hasSubType(question) && question.sub_type !== question.type && (\r\n                   <span className=\"ml-2 text-xs text-muted-foreground/60\">\r\n                     ({question.sub_type.replace(/_/g, ' ')})\r\n                   </span>\r\n                 )}\r\n"
                }
            ],
            "date": 1739453789001,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport { useState, useRef, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Button } from '@/components/ui/button';\r\nimport { logger } from '@/lib/logger';\r\nimport { Plus, Trash as Trash2, ChevronDown, ChevronRight, X, Check, Loader } from 'lucide-react';\r\nimport { QuestionFormProps } from '../types';\r\nimport { ExercisePromptCard } from './exercise-prompt-card';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { cn } from '@/lib/utils';\r\nimport { Icon } from '@/components/ui/icons';\r\nimport { ImageIcon } from 'lucide-react';\r\nimport { Question, QuestionType } from \"@/app/content-management/types\";\r\nimport { QUESTION_TYPES } from \"@/app/content-management/constants\";\r\nimport { Select, SelectValue, SelectTrigger, SelectItem, SelectContent } from '@/components/ui/select';\r\nimport { RichTextEditor, RichTextEditorProps } from '@/components/editor/RichTextEditor';\r\n\r\nexport function QuestionForm({\r\n  question,\r\n  index,\r\n  onUpdate,\r\n  onRemove,\r\n  onAddExercisePrompt,\r\n  onRemoveExercisePrompt,\r\n  onExercisePromptChange\r\n}: QuestionFormProps) {\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n  const [isSaving, setIsSaving] = useState(false);\r\n  const [lastSaved, setLastSaved] = useState<'success' | 'error' | null>(null);\r\n  const mounted = useRef(true);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      mounted.current = false;\r\n    };\r\n  }, []);\r\n\r\n  const handleFieldChange = async (field: string, value: string) => {\r\n    setIsSaving(true);\r\n    setLastSaved(null);\r\n    try {\r\n      await onUpdate(index, {\r\n        ...question,\r\n        data: { ...question.data, [field]: value } as any\r\n      });\r\n      if (mounted.current) {\r\n        setLastSaved('success');\r\n      }\r\n    } catch (error) {\r\n      if (mounted.current) {\r\n        setLastSaved('error');\r\n        logger.error({\r\n          message: 'Failed to update question field',\r\n          context: { error, field, index },\r\n          source: 'QuestionForm'\r\n        });\r\n      }\r\n    } finally {\r\n      if (mounted.current) {\r\n        setIsSaving(false);\r\n        setTimeout(() => {\r\n          if (mounted.current) {\r\n            setLastSaved(null);\r\n          }\r\n        }, 2000);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleMetadataChange = (field: string, value: any) => {\r\n    onUpdate(index, {\r\n      ...question,\r\n      metadata: {\r\n        ...question.metadata,\r\n        [field]: value\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleQuestionTypeChange = (type: string, defaultData: any) => {\r\n    const updatedQuestion: Question = {\r\n      ...question,\r\n      data: {\r\n        ...defaultData,\r\n        prompt: question.data?.prompt || '',\r\n        teacherScript: question.data?.teacherScript || '',\r\n        sampleAnswer: question.data?.sampleAnswer || ''\r\n      }\r\n    };\r\n    onUpdate(index, updatedQuestion);\r\n  };\r\n\r\n  const renderQuestionFields = (type: QuestionType) => {\r\n    const metadata = question.metadata || {};\r\n    \r\n    switch (type) {\r\n      case 'speaking':\r\n        return (\r\n          <div className=\"space-y-4\">\r\n            <div className=\"space-y-2\">\r\n              <Label>Sample Answer</Label>\r\n              <Input\r\n                value={metadata.sampleAnswer || ''}\r\n                onChange={(e) => handleMetadataChange('sampleAnswer', e.target.value)}\r\n              />\r\n            </div>\r\n          </div>\r\n        );\r\n      case 'multipleChoice':\r\n        return (\r\n          <div className=\"space-y-2\">\r\n            <Label>Options</Label>\r\n            {metadata.options?.map((option: string, index: number) => (\r\n              <Input\r\n                key={index}\r\n                value={option}\r\n                onChange={(e) => {\r\n                  const newOptions = [...(metadata.options || [])];\r\n                  newOptions[index] = e.target.value;\r\n                  handleMetadataChange('options', newOptions);\r\n                }}\r\n              />\r\n            ))}\r\n            <button onClick={() => handleMetadataChange('options', [...(metadata.options || []), ''])}>\r\n              Add Option\r\n            </button>\r\n          </div>\r\n        );\r\n      case 'matching':\r\n        return (\r\n          <div className=\"space-y-4\">\r\n            <div className=\"space-y-2\">\r\n              <Label>Items to Match</Label>\r\n              {metadata.items?.map((item: string, idx: number) => (\r\n                <Input\r\n                  key={`item-${idx}`}\r\n                  value={item}\r\n                  onChange={(e) => {\r\n                    const newItems = [...(metadata.items || [])];\r\n                    newItems[idx] = e.target.value;\r\n                    handleMetadataChange('items', newItems);\r\n                  }}\r\n                />\r\n              ))}\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={() => handleMetadataChange('items', [...(metadata.items || []), ''])}\r\n              >\r\n                Add Item\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 'fillInTheBlank':\r\n        return (\r\n          <div className=\"space-y-4\">\r\n            <div className=\"space-y-2\">\r\n              <Label>Sentence with Blanks</Label>\r\n              <Textarea\r\n                value={metadata.sentence || ''}\r\n                onChange={(e) => handleMetadataChange('sentence', e.target.value)}\r\n                placeholder=\"Enter sentence with ___ for blanks\"\r\n              />\r\n            </div>\r\n            <div className=\"space-y-2\">\r\n              <Label>Correct Answers</Label>\r\n              {metadata.blanks?.map((blank: string, idx: number) => (\r\n                <Input\r\n                  key={`blank-${idx}`}\r\n                  value={blank}\r\n                  onChange={(e) => {\r\n                    const newBlanks = [...(metadata.blanks || [])];\r\n                    newBlanks[idx] = e.target.value;\r\n                    handleMetadataChange('blanks', newBlanks);\r\n                  }}\r\n                />\r\n              ))}\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={() => handleMetadataChange('blanks', [...(metadata.blanks || []), ''])}\r\n              >\r\n                Add Answer\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 'trueOrFalse':\r\n        return (\r\n          <div className=\"space-y-4\">\r\n            <div className=\"space-y-2\">\r\n              <Label>Statement</Label>\r\n              <Textarea\r\n                value={metadata.statement || ''}\r\n                onChange={(e) => handleMetadataChange('statement', e.target.value)}\r\n              />\r\n            </div>\r\n            <div className=\"space-y-2\">\r\n              <Label>Correct Answer</Label>\r\n              <div className=\"flex gap-4\">\r\n                <Button\r\n                  variant={metadata.correctAnswer?.toString() === 'true' ? 'default' : 'outline'}\r\n                  onClick={() => handleMetadataChange('correctAnswer', 'true')}\r\n                >\r\n                  True\r\n                </Button>\r\n                <Button\r\n                  variant={metadata.correctAnswer?.toString() === 'false' ? 'default' : 'outline'}\r\n                  onClick={() => handleMetadataChange('correctAnswer', 'false')}\r\n                >\r\n                  False\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 'reading':\r\n        return (\r\n          <div className=\"space-y-4\">\r\n            <div className=\"space-y-2\">\r\n              <Label>Reading Passage</Label>\r\n              <RichTextEditor\r\n                value={typeof metadata.passage === 'string' \r\n                  ? metadata.passage \r\n                  : JSON.stringify(metadata.passage) || ''}\r\n                onChange={(value) => handleMetadataChange('passage', value)}\r\n                placeholder=\"Enter reading passage...\"\r\n                className=\"min-h-[200px]\"\r\n              />\r\n            </div>\r\n            <div className=\"space-y-2\">\r\n              <Label>Comprehension Questions</Label>\r\n              {metadata.questions?.map((q: string, idx: number) => (\r\n                <Input\r\n                  key={`question-${idx}`}\r\n                  value={q}\r\n                  onChange={(e) => {\r\n                    const newQuestions = [...(metadata.questions || [])];\r\n                    newQuestions[idx] = e.target.value;\r\n                    handleMetadataChange('questions', newQuestions);\r\n                  }}\r\n                />\r\n              ))}\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={() => handleMetadataChange('questions', [...(metadata.questions || []), ''])}\r\n              >\r\n                Add Question\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 'writing':\r\n        return (\r\n          <div className=\"space-y-4\">\r\n            <div className=\"space-y-2\">\r\n              <Label>Writing Prompt</Label>\r\n              <RichTextEditor\r\n                value={metadata.writingPrompt || ''}\r\n                onChange={(value) => handleMetadataChange('writingPrompt', value)}\r\n              />\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 'speakingAndWriting':\r\n        return (\r\n          <div className=\"space-y-4\">\r\n            <div className=\"space-y-2\">\r\n              <Label>Speaking Prompt</Label>\r\n              <Textarea\r\n                value={metadata.speakingPrompt || ''}\r\n                onChange={(e) => handleMetadataChange('speakingPrompt', e.target.value)}\r\n              />\r\n            </div>\r\n            <div className=\"space-y-2\">\r\n              <Label>Writing Prompt</Label>\r\n              <RichTextEditor\r\n                value={metadata.writingPrompt || ''}\r\n                onChange={(value) => handleMetadataChange('writingPrompt', value)}\r\n              />\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 'speakingAndListening':\r\n        return (\r\n          <div className=\"space-y-4\">\r\n            <div className=\"space-y-2\">\r\n              <Label>Speaking Prompt</Label>\r\n              <Textarea\r\n                value={metadata.speakingPrompt || ''}\r\n                onChange={(e) => handleMetadataChange('speakingPrompt', e.target.value)}\r\n              />\r\n            </div>\r\n            <div className=\"space-y-2\">\r\n              <Label>Listening Prompt</Label>\r\n              <Textarea\r\n                value={metadata.listeningPrompt || ''}\r\n                onChange={(e) => handleMetadataChange('listeningPrompt', e.target.value)}\r\n              />\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 'readingAndSpeaking':\r\n        return (\r\n          <div className=\"space-y-4\">\r\n            <div className=\"space-y-2\">\r\n              <Label>Speaking Prompt</Label>\r\n              <Textarea\r\n                value={metadata.speakingPrompt || ''}\r\n                onChange={(e) => handleMetadataChange('speakingPrompt', e.target.value)}\r\n              />\r\n            </div>\r\n            <div className=\"space-y-2\">\r\n              <Label>Reading Prompt</Label>\r\n              <RichTextEditor\r\n                value={typeof metadata.passage === 'string' \r\n                  ? metadata.passage \r\n                  : JSON.stringify(metadata.passage) || ''}\r\n                onChange={(value) => handleMetadataChange('passage', value)}\r\n                placeholder=\"Enter reading passage...\"\r\n                className=\"min-h-[200px]\"\r\n              />\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 'speakingWithAPartner':\r\n        return (\r\n          <div className=\"space-y-4\">\r\n            <div className=\"space-y-2\">\r\n              <Label>Speaking Prompt</Label>\r\n              <Textarea\r\n                value={metadata.speakingPrompt || ''}\r\n                onChange={(e) => handleMetadataChange('speakingPrompt', e.target.value)}\r\n              />\r\n            </div>\r\n            <div className=\"space-y-2\">\r\n              <Label>Partner Prompt</Label>\r\n              <Textarea\r\n                value={metadata.partnerPrompt || ''}\r\n                onChange={(e) => handleMetadataChange('partnerPrompt', e.target.value)}\r\n              />\r\n            </div>\r\n          </div>\r\n        );\r\n      case 'actionAndSpeaking':\r\n        return (\r\n          <div className=\"space-y-4\">\r\n            <div className=\"space-y-2\">\r\n              <Label>Speaking Prompt</Label>\r\n              <Textarea\r\n                value={metadata.speakingPrompt || ''}\r\n                onChange={(e) => handleMetadataChange('speakingPrompt', e.target.value)}\r\n              />\r\n            </div>\r\n            <div className=\"space-y-2\">\r\n              <Label>Action Prompt</Label>\r\n              <Textarea\r\n                value={metadata.actionPrompt || ''}\r\n                onChange={(e) => handleMetadataChange('actionPrompt', e.target.value)}\r\n              />\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 'storytelling':\r\n        return (\r\n          <div className=\"space-y-4\">\r\n            <div className=\"space-y-2\">\r\n              <Label>Story Prompt</Label>\r\n              <Textarea\r\n                value={metadata.storyPrompt || ''}\r\n                onChange={(e) => handleMetadataChange('storyPrompt', e.target.value)}\r\n              />\r\n            </div>\r\n            <div className=\"space-y-2\">\r\n              <Label>Keywords</Label>\r\n              {metadata.keywords?.map((keyword: string, idx: number) => (\r\n                <Input\r\n                  key={`keyword-${idx}`}\r\n                  value={keyword}\r\n                  onChange={(e) => {\r\n                    const newKeywords = [...(metadata.keywords || [])];\r\n                    newKeywords[idx] = e.target.value;\r\n                    handleMetadataChange('keywords', newKeywords);\r\n                  }}\r\n                />\r\n              ))}\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={() => handleMetadataChange('keywords', [...(metadata.keywords || []), ''])}\r\n              >\r\n                Add Keyword\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 'listening':\r\n        return (\r\n          <div className=\"space-y-4\">\r\n            <div className=\"space-y-2\">\r\n              <Label>Audio Content URL</Label>\r\n              <Input\r\n                value={metadata.audioContent || ''}\r\n                onChange={(e) => handleMetadataChange('audioContent', e.target.value)}\r\n              />\r\n            </div>\r\n            <div className=\"space-y-2\">\r\n              <Label>Transcript</Label>\r\n              <Textarea\r\n                value={metadata.transcript || ''}\r\n                onChange={(e) => handleMetadataChange('transcript', e.target.value)}\r\n              />\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 'listenAndRepeat':\r\n        return (\r\n          <div className=\"space-y-4\">\r\n            <div className=\"space-y-2\">\r\n              <Label>Phrases</Label>\r\n              {metadata.phrases?.map((phrase: string, idx: number) => (\r\n                <Input\r\n                  key={`phrase-${idx}`}\r\n                  value={phrase}\r\n                  onChange={(e) => {\r\n                    const newPhrases = [...(metadata.phrases || [])];\r\n                    newPhrases[idx] = e.target.value;\r\n                    handleMetadataChange('phrases', newPhrases);\r\n                  }}\r\n                />\r\n              ))}\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={() => handleMetadataChange('phrases', [...(metadata.phrases || []), ''])}\r\n              >\r\n                Add Phrase\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      // case 'grammar_speaking':\r\n      //   return (\r\n      //     <>\r\n      //       <div className=\"space-y-4\">\r\n      //         <div className=\"space-y-2\">\r\n      //           <Label>Options</Label>\r\n      //           {question.metadata?.options?.map((option: string, idx: number) => (\r\n      //             <Input\r\n      //               key={`option-${idx}`}\r\n      //               value={option}\r\n      //               onChange={(e) => {\r\n      //                 const newOptions = [...(question.metadata?.options || [])];\r\n      //                 newOptions[idx] = e.target.value;\r\n      //                 handleMetadataChange('options', newOptions);\r\n      //               }}\r\n      //             />\r\n      //           ))}\r\n      //           <Button\r\n      //             variant=\"outline\"\r\n      //             size=\"sm\"\r\n      //             onClick={() => handleMetadataChange('options', [...(question.metadata?.options || []), ''])}\r\n      //           >\r\n      //             Add Option\r\n      //           </Button>\r\n      //         </div>\r\n      //         <div className=\"space-y-2\">\r\n      //           <Label>Correct Answer</Label>\r\n      //           <Select\r\n      //             value={question.metadata?.correctAnswer?.toString() || ''}\r\n      //             onValueChange={(value) => handleMetadataChange('correctAnswer', parseInt(value))}\r\n      //           >\r\n      //             <SelectTrigger>\r\n      //               <SelectValue placeholder=\"Select correct answer\" />\r\n      //             </SelectTrigger>\r\n      //             <SelectContent>\r\n      //               {question.metadata?.options?.map((_, idx) => (\r\n      //                 <SelectItem key={idx} value={idx.toString()}>\r\n      //                   Option {idx + 1}\r\n      //                 </SelectItem>\r\n      //               ))}\r\n      //             </SelectContent>\r\n      //           </Select>\r\n      //         </div>\r\n      //       </div>\r\n      //     </>\r\n      //   );\r\n\r\n      \r\n\r\n      \r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card className={cn(\r\n      \"border-l-4 transition-colors duration-200\",\r\n      isExpanded ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\r\n    )}>\r\n      <CardHeader className=\"py-3\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <div className=\"flex items-center gap-3 flex-1 min-w-0\">\r\n            <span className=\"flex-shrink-0 px-2 py-1 bg-primary/10 rounded-md text-sm font-semibold text-primary\">\r\n              Q {index + 1}\r\n            </span>\r\n            <span className=\"text-sm text-muted-foreground truncate\">\r\n              {question.data?.prompt || 'No question text'}\r\n            </span>\r\n          </div>\r\n          <div className=\"flex items-center gap-2 flex-shrink-0 ml-2\">\r\n            <Button\r\n              variant=\"ghost\"\r\n              size=\"sm\"\r\n              onClick={() => setIsExpanded(!isExpanded)}\r\n              className=\"hover:bg-accent\"\r\n            >\r\n              {isExpanded ? \r\n                <ChevronDown className=\"h-4 w-4 text-primary\" /> : \r\n                <ChevronRight className=\"h-4 w-4 text-primary\" />\r\n              }\r\n            </Button>\r\n            <Button\r\n              variant=\"ghost\"\r\n              size=\"sm\"\r\n              onClick={() => onRemove(index)}\r\n              className=\"hover:bg-destructive/10 hover:text-destructive\"\r\n            >\r\n              <Trash2 className=\"h-4 w-4\" />\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </CardHeader>\r\n      <AnimatePresence>\r\n        {isExpanded && (\r\n          <motion.div\r\n            initial={{ height: 0, opacity: 0 }}\r\n            animate={{ height: \"auto\", opacity: 1 }}\r\n            exit={{ height: 0, opacity: 0 }}\r\n            transition={{ duration: 0.2 }}\r\n          >\r\n            <CardContent>\r\n              <div className=\"space-y-4\">\r\n                <div className=\"space-y-2\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <Label>Question Text</Label>\r\n                    <div className=\"flex items-center gap-2\">\r\n                      {isSaving && <Icon \r\n                        type=\"phosphor\"\r\n                        name=\"SPINNER\"\r\n                        className=\"h-4 w-4 animate-spin text-primary\"\r\n                      />}\r\n                      {lastSaved === 'success' && <Icon \r\n                        type=\"phosphor\"\r\n                        name=\"CHECK\"\r\n                        className=\"h-4 w-4 text-green-500\"\r\n                      />}\r\n                      {lastSaved === 'error' && <Icon \r\n                        type=\"phosphor\"\r\n                        name=\"X\"\r\n                        className=\"h-4 w-4 text-destructive\"\r\n                      />}\r\n                    </div>\r\n                  </div>\r\n                  <Textarea\r\n                    value={question.data?.prompt || ''}\r\n                    onChange={(e) => handleFieldChange('prompt', e.target.value)}\r\n                    placeholder=\"Enter the question text\"\r\n                    className=\"min-h-[80px] resize-none\"\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"space-y-2\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <Label>Teacher Script (Optional)</Label>\r\n                    <div className=\"flex items-center gap-2\">\r\n                      {isSaving && <Icon \r\n                        type=\"phosphor\"\r\n                        name=\"SPINNER\"\r\n                        className=\"h-4 w-4 animate-spin text-primary\"\r\n                      />}\r\n                      {lastSaved === 'success' && <Icon \r\n                        type=\"phosphor\"\r\n                        name=\"CHECK\"\r\n                        className=\"h-4 w-4 text-green-500\"\r\n                      />}\r\n                      {lastSaved === 'error' && <Icon \r\n                        type=\"phosphor\"\r\n                        name=\"X\"\r\n                        className=\"h-4 w-4 text-destructive\"\r\n                      />}\r\n                    </div>\r\n                  </div>\r\n                  <Textarea\r\n                    value={question.data?.teacherScript || ''}\r\n                    onChange={(e) => handleFieldChange('teacherScript', e.target.value)}\r\n                    placeholder=\"Enter the teacher script\"\r\n                    className=\"min-h-[80px] resize-none\"\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"flex items-center gap-2\">\r\n                  <Button\r\n                    variant=\"outline\"\r\n                    size=\"sm\"\r\n                    onClick={() => handleFieldChange('sampleAnswer', question.data?.sampleAnswer ? '' : 'Sample answer here...')}\r\n                    className=\"gap-2\"\r\n                  >\r\n                    {question.data?.sampleAnswer ? <X className=\"h-4 w-4\" /> : <Plus className=\"h-4 w-4\" />}\r\n                    {question.data?.sampleAnswer ? 'Remove Sample Answer' : 'Add Sample Answer'}\r\n                  </Button>\r\n                </div>\r\n\r\n                {question.data?.sampleAnswer && (\r\n                  <div className=\"space-y-2\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <Label>Sample Answer</Label>\r\n                      <div className=\"flex items-center gap-2\">\r\n                        {isSaving && <Icon \r\n                          type=\"phosphor\"\r\n                          name=\"SPINNER\"\r\n                          className=\"h-4 w-4 animate-spin text-primary\"\r\n                        />}\r\n                        {lastSaved === 'success' && <Icon \r\n                          type=\"phosphor\"\r\n                          name=\"CHECK\"\r\n                          className=\"h-4 w-4 text-green-500\"\r\n                        />}\r\n                        {lastSaved === 'error' && <Icon \r\n                          type=\"phosphor\"\r\n                          name=\"X\"\r\n                          className=\"h-4 w-4 text-destructive\"\r\n                        />}\r\n                      </div>\r\n                    </div>\r\n                    <Textarea\r\n                      value={question.data?.sampleAnswer || ''}\r\n                      onChange={(e) => handleFieldChange('sampleAnswer', e.target.value)}\r\n                      placeholder=\"Enter a sample answer\"\r\n                      className=\"min-h-[100px]\"\r\n                    />\r\n                  </div>\r\n                )}\r\n\r\n                {/* Exercise Prompts */}\r\n                <div className=\"space-y-4\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <Label>Exercise Prompts</Label>\r\n                  </div>\r\n                  \r\n                  {question.exercisePrompts.map((prompt, promptIndex) => (\r\n                    <ExercisePromptCard\r\n                      key={promptIndex}\r\n                      prompt={prompt}\r\n                      promptIndex={promptIndex}\r\n                      onUpdate={(updatedPrompt) => onExercisePromptChange(index, promptIndex, updatedPrompt)}\r\n                      onRemove={() => onRemoveExercisePrompt(index, promptIndex)}\r\n                    />\r\n                  ))}\r\n                </div>\r\n\r\n                {renderQuestionFields(question.type)}\r\n              </div>\r\n            </CardContent>\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n\r\n      {/* Floating Add Prompt Button */}\r\n      {isExpanded && (\r\n        <motion.div\r\n          initial={{ opacity: 0, y: 20 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          exit={{ opacity: 0, y: 20 }}\r\n          className=\"fixed bottom-24 right-8 z-50\"\r\n        >\r\n          <Button\r\n            onClick={() => onAddExercisePrompt(index)}\r\n            className=\"rounded-full shadow-lg gap-2\"\r\n            size=\"lg\"\r\n          >\r\n            <Plus className=\"h-4 w-4\" />\r\n            Add Prompt\r\n          </Button>\r\n        </motion.div>\r\n      )}\r\n    </Card>\r\n  );\r\n} "
        }
    ]
}