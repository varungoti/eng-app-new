{
    "sourceFile": "src/app/content-management/components/lessons-list.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1740947169161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1740947169161,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport { useState } from \"react\";\r\nimport { createClientComponentClient } from \"@supabase/auth-helpers-nextjs\";\r\nimport {  Trash2, Eye } from \"lucide-react\";\r\nimport { toast } from \"sonner\";\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardFooter,\r\n} from \"@/components/ui/card\";\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n  AlertDialogTrigger,\r\n} from \"@/components/ui/alert-dialog\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Lesson } from \"../types\";\r\nimport { EditLessonDialog } from \"./dialogs/edit-lesson-dialog\";\r\n\r\ninterface LessonsListProps {\r\n  lessons: Lesson[];\r\n  onUpdate: () => void;\r\n}\r\n\r\nconst supabase = createClientComponentClient({\r\n    supabaseUrl: import.meta.env.VITE_SUPABASE_URL, \r\n    supabaseKey: import.meta.env.VITE_SUPABASE_ANON_KEY,\r\n  });\r\n\r\nconst statusColors = {\r\n  draft: \"bg-yellow-500\",\r\n  published: \"bg-green-500\",\r\n  archived: \"bg-gray-500\",\r\n};\r\n\r\nexport function LessonsList({ lessons, onUpdate }: LessonsListProps) {\r\n  const [isDeleting, setIsDeleting] = useState(false);\r\n\r\n  const handleDelete = async (lessonId: string) => {\r\n    try {\r\n      setIsDeleting(true);\r\n      const { error } = await supabase\r\n        .from(\"lessons\")\r\n        .delete()\r\n        .eq(\"id\", lessonId);\r\n\r\n      if (error) throw error;\r\n\r\n      toast.success(\"Lesson deleted successfully\");\r\n      onUpdate();\r\n    } catch (error) {\r\n      toast.error(\"Failed to delete lesson\");\r\n      console.error(error);\r\n    } finally {\r\n      setIsDeleting(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n      {lessons.map((lesson) => (\r\n        <Card key={lesson.id}>\r\n          <CardHeader className=\"flex flex-row items-start justify-between\">\r\n            <div>\r\n              <CardTitle>{lesson.title}</CardTitle>\r\n              <CardDescription>{lesson.description}</CardDescription>\r\n            </div>\r\n            <Badge className={statusColors[lesson.status as keyof typeof statusColors]}>\r\n              {lesson.status}\r\n            </Badge>\r\n          </CardHeader>\r\n          \r\n          <CardContent>\r\n            {lesson.content && (\r\n              <p className=\"text-sm text-muted-foreground line-clamp-3\">\r\n                {lesson.content}\r\n              </p>\r\n            )}\r\n          </CardContent>\r\n\r\n          <CardFooter className=\"flex justify-end gap-2\">\r\n            <Button variant=\"outline\" size=\"icon\">\r\n              <Eye className=\"h-4 w-4\" />\r\n            </Button>\r\n            <EditLessonDialog lesson={lesson} onSuccess={onUpdate} />\r\n            <AlertDialog>\r\n              <AlertDialogTrigger asChild>\r\n                <Button variant=\"destructive\" size=\"icon\">\r\n                  <Trash2 className=\"h-4 w-4\" />\r\n                </Button>\r\n              </AlertDialogTrigger>\r\n              <AlertDialogContent>\r\n                <AlertDialogHeader>\r\n                  <AlertDialogTitle>Delete Lesson</AlertDialogTitle>\r\n                  <AlertDialogDescription>\r\n                    Are you sure you want to delete this lesson? This action cannot be undone.\r\n                  </AlertDialogDescription>\r\n                </AlertDialogHeader>\r\n                <AlertDialogFooter>\r\n                  <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n                  <AlertDialogAction\r\n                    onClick={() => lesson.id && handleDelete(lesson.id)}\r\n                    disabled={isDeleting}\r\n                  >\r\n                    {isDeleting ? \"Deleting...\" : \"Delete\"}\r\n                  </AlertDialogAction>\r\n                </AlertDialogFooter>\r\n              </AlertDialogContent>\r\n            </AlertDialog>\r\n          </CardFooter>\r\n        </Card>\r\n      ))}\r\n    </div>\r\n  );\r\n} \r\nexport default LessonsList;"
        }
    ]
}