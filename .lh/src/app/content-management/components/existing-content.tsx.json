{
    "sourceFile": "src/app/content-management/components/existing-content.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1739788998571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739789134447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,9 @@\n     } catch (error) {\r\n       toast({\r\n         title: 'Error',\r\n         description: error instanceof Error ? error.message : 'Failed to delete item',\r\n-        status: 'error'\r\n+        variant: 'destructive'\r\n       });\r\n     } finally {\r\n       setDeleteDialogOpen(false);\r\n       setItemToDelete(null);\r\n"
                },
                {
                    "date": 1739789289017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,9 +203,9 @@\n                     <div className=\"grid gap-4\">\r\n                       {questions?.map((question) => (\r\n                         <Card key={question.id} className=\"p-4\">\r\n                           <div className=\"flex items-center justify-between\">\r\n-                            <p>{question.text}</p>\r\n+                            <p>{question.title}</p>\r\n                             <div className=\"flex gap-2\">\r\n                               <Button variant=\"outline\" size=\"sm\">\r\n                                 <Icon type=\"phosphor\" name=\"PENCIL_SIMPLE\" className=\"mr-2 h-3 w-3\" />\r\n                                 Edit\r\n"
                },
                {
                    "date": 1739789346133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,10 +77,9 @@\n       });\r\n     } catch (error) {\r\n       toast({\r\n         title: 'Error',\r\n-        description: error instanceof Error ? error.message : 'Failed to delete item',\r\n-        variant: 'destructive'\r\n+        description: error instanceof Error ? error.message : 'Failed to delete item'\r\n       });\r\n     } finally {\r\n       setDeleteDialogOpen(false);\r\n       setItemToDelete(null);\r\n"
                }
            ],
            "date": 1739788998571,
            "name": "Commit-0",
            "content": "\"use client\"\r\n\r\nimport { useContentStore } from '@/lib/content/store'\r\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Icon } from \"@/components/ui/icons\"\r\nimport { Card } from \"@/components/ui/card\"\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\r\nimport { useQuery } from '@tanstack/react-query'\r\nimport { contentService } from '@/lib/content/ContentService'\r\nimport { LoadingIndicator } from '@/components/LoadingIndicator'\r\nimport { useToast } from '@/hooks/use-toast'\r\nimport { useState } from 'react'\r\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\"\r\nimport type { Subtopic, Lesson, Question, Activity } from '../types'\r\n\r\nexport function ExistingContent() {\r\n  const { toast } = useToast()\r\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false)\r\n  const [itemToDelete, setItemToDelete] = useState<{ id: string; type: 'subtopic' | 'lesson' | 'question' | 'activity' } | null>(null)\r\n  \r\n  const { \r\n    selectedTopic, \r\n    selectedSubtopic, \r\n    setSelectedSubtopic,\r\n    selectedLesson,\r\n    setSelectedLesson \r\n  } = useContentStore()\r\n\r\n  const { data: subtopics, isLoading: subtopicsLoading } = useQuery<Subtopic[]>({\r\n    queryKey: ['subtopics', selectedTopic],\r\n    queryFn: () => selectedTopic ? contentService.fetchSubtopics(selectedTopic) : Promise.resolve([]),\r\n    enabled: !!selectedTopic\r\n  })\r\n\r\n  const { data: lessons, isLoading: lessonsLoading } = useQuery<Lesson[]>({\r\n    queryKey: ['lessons', selectedSubtopic],\r\n    queryFn: () => selectedSubtopic ? contentService.fetchLessons(selectedSubtopic) : Promise.resolve([]),\r\n    enabled: !!selectedSubtopic\r\n  })\r\n\r\n  const { data: questions = [], isLoading: questionsLoading } = useQuery<Question[]>({\r\n    queryKey: ['questions', selectedLesson],\r\n    queryFn: () => selectedLesson ? contentService.fetchQuestions(selectedLesson) : Promise.resolve([]),\r\n    enabled: !!selectedLesson\r\n  })\r\n\r\n  const { data: activities = [], isLoading: activitiesLoading } = useQuery<Activity[]>({\r\n    queryKey: ['activities', selectedLesson],\r\n    queryFn: () => selectedLesson ? contentService.fetchActivities(selectedLesson) : Promise.resolve([]),\r\n    enabled: !!selectedLesson\r\n  })\r\n\r\n  const handleDelete = async () => {\r\n    if (!itemToDelete) return;\r\n\r\n    try {\r\n      switch (itemToDelete.type) {\r\n        case 'subtopic':\r\n          await contentService.deleteSubtopic(itemToDelete.id);\r\n          setSelectedSubtopic('');\r\n          break;\r\n        case 'lesson':\r\n          await contentService.deleteLesson(itemToDelete.id);\r\n          setSelectedLesson('');\r\n          break;\r\n        case 'question':\r\n          await contentService.deleteQuestion(itemToDelete.id);\r\n          break;\r\n        case 'activity':\r\n          await contentService.deleteActivity(itemToDelete.id);\r\n          break;\r\n      }\r\n      toast({ \r\n        title: 'Success', \r\n        description: `${itemToDelete.type} deleted successfully` \r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: 'Error',\r\n        description: error instanceof Error ? error.message : 'Failed to delete item',\r\n        status: 'error'\r\n      });\r\n    } finally {\r\n      setDeleteDialogOpen(false);\r\n      setItemToDelete(null);\r\n    }\r\n  };\r\n\r\n  const confirmDelete = (id: string, type: 'subtopic' | 'lesson' | 'question' | 'activity') => {\r\n    setItemToDelete({ id, type });\r\n    setDeleteDialogOpen(true);\r\n  };\r\n\r\n  if (!selectedTopic) {\r\n    return (\r\n      <div className=\"flex h-full items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <Icon type=\"phosphor\" name=\"FOLDER_PLUS\" className=\"h-12 w-12 mx-auto text-muted-foreground\" />\r\n          <h3 className=\"mt-4 text-lg font-medium\">No Topic Selected</h3>\r\n          <p className=\"mt-2 text-sm text-muted-foreground\">Select a topic from the sidebar to view its content</p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (subtopicsLoading) {\r\n    return <LoadingIndicator />\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ScrollArea className=\"h-[calc(100vh-12rem)]\">\r\n        <div className=\"p-6\">\r\n          <Tabs defaultValue=\"subtopics\" className=\"w-full\">\r\n            <TabsList className=\"w-full grid grid-cols-3\">\r\n              <TabsTrigger value=\"subtopics\">Subtopics</TabsTrigger>\r\n              {selectedSubtopic && <TabsTrigger value=\"lessons\">Lessons</TabsTrigger>}\r\n              {selectedLesson && <TabsTrigger value=\"content\">Content</TabsTrigger>}\r\n            </TabsList>\r\n\r\n            <TabsContent value=\"subtopics\" className=\"mt-6\">\r\n              <div className=\"grid gap-4\">\r\n                {subtopics?.map((subtopic) => (\r\n                  <Card key={subtopic.id} className=\"p-4\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div className=\"flex-1\">\r\n                        <h3 className=\"font-medium\">{subtopic.name}</h3>\r\n                        <p className=\"text-sm text-muted-foreground mt-1\">\r\n                          {subtopic.lessons?.length || 0} lessons\r\n                        </p>\r\n                      </div>\r\n                      <div className=\"flex gap-2\">\r\n                        <Button \r\n                          variant=\"outline\" \r\n                          size=\"sm\"\r\n                          onClick={() => setSelectedSubtopic(subtopic.id || '')}\r\n                        >\r\n                          <Icon type=\"phosphor\" name=\"FOLDER_PLUS\" className=\"mr-2 h-4 w-4\" />\r\n                          View\r\n                        </Button>\r\n                        <Button \r\n                          variant=\"outline\" \r\n                          size=\"sm\"\r\n                          onClick={() => confirmDelete(subtopic.id || '', 'subtopic')}\r\n                        >\r\n                          <Icon type=\"phosphor\" name=\"TRASH_SIMPLE\" className=\"mr-2 h-4 w-4\" />\r\n                          Delete\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                  </Card>\r\n                ))}\r\n              </div>\r\n            </TabsContent>\r\n\r\n            <TabsContent value=\"lessons\">\r\n              {lessonsLoading ? (\r\n                <LoadingIndicator />\r\n              ) : (\r\n                <div className=\"grid gap-4 mt-4\">\r\n                  {lessons?.map((lesson) => (\r\n                    <Card key={lesson.id} className=\"p-4\">\r\n                      <div className=\"flex items-center justify-between\">\r\n                        <div>\r\n                          <h3 className=\"font-medium\">{lesson.title}</h3>\r\n                          <p className=\"text-sm text-muted-foreground mt-1\">\r\n                            {lesson.questions?.length || 0} questions, {lesson.activities?.length || 0} activities\r\n                          </p>\r\n                        </div>\r\n                        <div className=\"flex gap-2\">\r\n                          <Button \r\n                            variant=\"outline\" \r\n                            size=\"sm\"\r\n                            onClick={() => setSelectedLesson(lesson.id || '')}\r\n                          >\r\n                            <Icon type=\"phosphor\" name=\"PENCIL_SIMPLE\" className=\"mr-2 h-3 w-3\" />\r\n                            Edit\r\n                          </Button>\r\n                          <Button \r\n                            variant=\"outline\" \r\n                            size=\"sm\"\r\n                            onClick={() => confirmDelete(lesson.id || '', 'lesson')}\r\n                          >\r\n                            <Icon type=\"phosphor\" name=\"TRASH_SIMPLE\" className=\"mr-2 h-3 w-3\" />\r\n                            Delete\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </Card>\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </TabsContent>\r\n\r\n            <TabsContent value=\"content\">\r\n              {(questionsLoading || activitiesLoading) ? (\r\n                <LoadingIndicator />\r\n              ) : (\r\n                <div className=\"space-y-6 mt-4\">\r\n                  <div>\r\n                    <h3 className=\"text-lg font-medium mb-4\">Questions</h3>\r\n                    <div className=\"grid gap-4\">\r\n                      {questions?.map((question) => (\r\n                        <Card key={question.id} className=\"p-4\">\r\n                          <div className=\"flex items-center justify-between\">\r\n                            <p>{question.text}</p>\r\n                            <div className=\"flex gap-2\">\r\n                              <Button variant=\"outline\" size=\"sm\">\r\n                                <Icon type=\"phosphor\" name=\"PENCIL_SIMPLE\" className=\"mr-2 h-3 w-3\" />\r\n                                Edit\r\n                              </Button>\r\n                              <Button variant=\"outline\" size=\"sm\">\r\n                                <Icon type=\"phosphor\" name=\"TRASH_SIMPLE\" className=\"mr-2 h-3 w-3\" />\r\n                                Delete\r\n                              </Button>\r\n                            </div>\r\n                          </div>\r\n                        </Card>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div>\r\n                    <h3 className=\"text-lg font-medium mb-4\">Activities</h3>\r\n                    <div className=\"grid gap-4\">\r\n                      {activities?.map((activity) => (\r\n                        <Card key={activity.id} className=\"p-4\">\r\n                          <div className=\"flex items-center justify-between\">\r\n                            <div>\r\n                              <h4 className=\"font-medium\">{activity.title}</h4>\r\n                              <p className=\"text-sm text-muted-foreground mt-1\">{activity.type}</p>\r\n                            </div>\r\n                            <div className=\"flex gap-2\">\r\n                              <Button variant=\"outline\" size=\"sm\">\r\n                                <Icon type=\"phosphor\" name=\"PENCIL_SIMPLE\" className=\"mr-2 h-3 w-3\" />\r\n                                Edit\r\n                              </Button>\r\n                              <Button variant=\"outline\" size=\"sm\">\r\n                                <Icon type=\"phosphor\" name=\"TRASH_SIMPLE\" className=\"mr-2 h-3 w-3\" />\r\n                                Delete\r\n                              </Button>\r\n                            </div>\r\n                          </div>\r\n                        </Card>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </TabsContent>\r\n          </Tabs>\r\n        </div>\r\n      </ScrollArea>\r\n\r\n      <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\r\n        <AlertDialogContent>\r\n          <AlertDialogHeader>\r\n            <AlertDialogTitle>Are you sure?</AlertDialogTitle>\r\n            <AlertDialogDescription>\r\n              This action cannot be undone. This will permanently delete the {itemToDelete?.type}.\r\n            </AlertDialogDescription>\r\n          </AlertDialogHeader>\r\n          <AlertDialogFooter>\r\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n            <AlertDialogAction onClick={handleDelete}>Delete</AlertDialogAction>\r\n          </AlertDialogFooter>\r\n        </AlertDialogContent>\r\n      </AlertDialog>\r\n    </>\r\n  )\r\n} "
        }
    ]
}