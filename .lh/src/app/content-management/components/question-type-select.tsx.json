{
    "sourceFile": "src/app/content-management/components/question-type-select.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1740947338553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740947360142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,14 +76,9 @@\n                   <div \r\n                     className=\"absolute left-full top-0 ml-2 z-[9999]\"\r\n                   >\r\n                     <div\r\n-                      style={{\r\n-                        opacity: 1,\r\n-                        transform: 'translateX(0)',\r\n-                        transition: 'all 0.15s ease-out'\r\n-                      }}\r\n-                      className=\"bg-popover border rounded-md shadow-md\"\r\n+                      className=\"bg-popover border rounded-md shadow-md opacity-100 translate-x-0 transition-all duration-150 ease-out\"\r\n                     >\r\n                       {renderPreview(type)}\r\n                     </div>\r\n                   </div>\r\n"
                }
            ],
            "date": 1740947338553,
            "name": "Commit-0",
            "content": "import  { useState, useEffect } from 'react';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { isQuestionType, QUESTION_TYPES } from '@/app/content-management/constants';\r\nimport { logger } from '@/lib/logger';\r\nimport { useCallback } from 'react';\r\n\r\ninterface QuestionTypeSelectProps {\r\n  value: string;\r\n  onChange: (value: string) => void;\r\n}\r\n\r\nexport function QuestionTypeSelect({ value, onChange }: QuestionTypeSelectProps) {\r\n  const [hoveredType, setHoveredType] = useState<string | null>(null);\r\n  const [mounted, setMounted] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setMounted(true);\r\n  }, []);\r\n\r\n  const handleValueChange = useCallback((newValue: string) => {\r\n    try {\r\n      if (!isQuestionType(newValue)) {\r\n        throw new Error(`Invalid question type: ${newValue}`);\r\n      }\r\n      onChange(newValue);\r\n      logger.debug('Question type selected', {\r\n        context: { type: newValue },\r\n        source: 'QuestionTypeSelect'\r\n      });\r\n    } catch (err) {\r\n      logger.error('Failed to change question type', {\r\n        context: { error: err, value: newValue },\r\n        source: 'QuestionTypeSelect'\r\n      });\r\n    }\r\n  }, [onChange]);\r\n\r\n  const renderPreview = (type: string) => {\r\n    if (!isQuestionType(type)) return null;\r\n    const questionType = QUESTION_TYPES[type];\r\n    if (!questionType) return null;\r\n\r\n    return (\r\n      <div className=\"w-[300px] p-4 space-y-2\">\r\n        <h3 className=\"font-semibold text-sm\">{questionType.label}</h3>\r\n        <p className=\"text-sm text-muted-foreground\">{questionType.description}</p>\r\n        <div className=\"mt-4 p-3 bg-muted rounded-lg text-xs space-y-2\">\r\n          <div className=\"font-medium\">Default Structure:</div>\r\n          <div className=\"overflow-auto max-h-[200px] whitespace-pre-wrap break-all\">\r\n            <code>{JSON.stringify(questionType.defaultData, null, 2)}</code>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"relative\">\r\n      <Select value={value} onValueChange={handleValueChange}>\r\n        <SelectTrigger className=\"w-[200px]\">\r\n          <SelectValue placeholder=\"Select question type\" />\r\n        </SelectTrigger>\r\n        <SelectContent align=\"start\" side=\"right\" className=\"w-[200px]\">\r\n          <div className=\"relative\">\r\n            {Object.entries(QUESTION_TYPES).map(([type, { label }]) => (\r\n              <div key={type} className=\"relative group\">\r\n                <SelectItem\r\n                  value={type}\r\n                  onMouseEnter={() => setHoveredType(type)}\r\n                  onMouseLeave={() => setHoveredType(null)}\r\n                  className=\"cursor-pointer\"\r\n                >\r\n                  {label}\r\n                </SelectItem>\r\n                {mounted && hoveredType === type && (\r\n                  <div \r\n                    className=\"absolute left-full top-0 ml-2 z-[9999]\"\r\n                  >\r\n                    <div\r\n                      style={{\r\n                        opacity: 1,\r\n                        transform: 'translateX(0)',\r\n                        transition: 'all 0.15s ease-out'\r\n                      }}\r\n                      className=\"bg-popover border rounded-md shadow-md\"\r\n                    >\r\n                      {renderPreview(type)}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </SelectContent>\r\n      </Select>\r\n    </div>\r\n  );\r\n}"
        }
    ]
}