{
    "sourceFile": "src/app/content-management/components/CreateTopicForm.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1739138875951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1739138875951,
            "name": "Commit-0",
            "content": "\"use client\"\r\n\r\nimport React, { useState } from 'react'\r\nimport { PopoverForm, PopoverFormButton } from '@/components/ui/popover-form'\r\nimport { Separator } from '@/components/ui/separator'\r\nimport { Input } from '@/components/ui/input'\r\nimport { Textarea } from '@/components/ui/textarea'\r\nimport { useContentStore } from '@/lib/content/store'\r\nimport { contentService } from '@/lib/content/ContentService'\r\nimport { useToast } from '@/hooks/use-toast'\r\n\r\ntype FormState = 'idle' | 'loading' | 'success'\r\n\r\nexport function CreateTopicForm() {\r\n  const [formState, setFormState] = useState<FormState>('idle')\r\n  const [open, setOpen] = useState(false)\r\n  const [title, setTitle] = useState('')\r\n  const [description, setDescription] = useState('')\r\n  const { selectedGrade } = useContentStore()\r\n  const { toast } = useToast()\r\n\r\n  async function handleSubmit(e: React.FormEvent) {\r\n    e.preventDefault()\r\n    if (!title || !selectedGrade) return\r\n\r\n    try {\r\n      setFormState('loading')\r\n      await contentService.createTopic({\r\n        title,\r\n        description,\r\n        gradeId: selectedGrade\r\n      })\r\n      setFormState('success')\r\n      toast({\r\n        title: 'Success',\r\n        description: 'Topic created successfully'\r\n      })\r\n    } catch (error) {\r\n      toast({\r\n        title: 'Error',\r\n        description: error instanceof Error ? error.message : 'Failed to create topic',\r\n      })\r\n      setFormState('idle')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <PopoverForm\r\n      title=\"Add Topic\"\r\n      open={open}\r\n      setOpen={setOpen}\r\n      width=\"364px\"\r\n      height=\"300px\"\r\n      showCloseButton={formState !== 'success'}\r\n      showSuccess={formState === 'success'}\r\n      openChild={\r\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n          <div className=\"px-4 pt-4\">\r\n            <label className=\"block text-sm font-medium text-muted-foreground mb-1\">\r\n              Title\r\n            </label>\r\n            <Input\r\n              value={title}\r\n              onChange={(e) => setTitle(e.target.value)}\r\n              placeholder=\"Enter topic title\"\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"px-4\">\r\n            <label className=\"block text-sm font-medium text-muted-foreground mb-1\">\r\n              Description\r\n            </label>\r\n            <Textarea\r\n              value={description}\r\n              onChange={(e) => setDescription(e.target.value)}\r\n              placeholder=\"Enter topic description\"\r\n              rows={3}\r\n            />\r\n          </div>\r\n          <div className=\"relative flex h-12 items-center px-[10px]\">\r\n            <Separator />\r\n            <PopoverFormButton\r\n              loading={formState === 'loading'}\r\n              text=\"Create Topic\"\r\n            />\r\n          </div>\r\n        </form>\r\n      }\r\n      successChild={\r\n        <div className=\"text-center\">\r\n          <h3 className=\"text-lg font-semibold mb-2\">Topic Created!</h3>\r\n          <p className=\"text-sm text-muted-foreground\">\r\n            Your new topic has been created successfully.\r\n          </p>\r\n        </div>\r\n      }\r\n    />\r\n  )\r\n} "
        }
    ]
}