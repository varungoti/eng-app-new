{
    "sourceFile": "src/app/content-management/components/exercise-prompt-card.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1739691558549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739691607906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n   // Ensure default values for all fields\r\n   const safePrompt = {\r\n     ...prompt,\r\n     text: prompt.text || '',\r\n-    type: (prompt.type as ExercisePromptType) || 'text',\r\n+    type: prompt.type || 'text',\r\n     narration: prompt.narration || '',\r\n     saytext: prompt.saytext || '',\r\n     media: prompt.media || ''\r\n   };\r\n"
                },
                {
                    "date": 1739691630126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n import { logger } from '@/lib/logger';\r\n import { ImageIcon, PlayCircle, FileText } from 'lucide-react';\r\n import { Icon } from '@/components/ui/icons';\r\n \r\n-type ExercisePromptType = 'text' | 'image' | 'video' | 'audio';\r\n+type ExercisePromptType = 'text' | 'image' | 'video' | 'audio' | 'practice' | 'exercise';\r\n \r\n export const ExercisePromptCard: React.FC<ExercisePromptCardProps> = ({\r\n   prompt,\r\n   promptIndex,\r\n@@ -33,9 +33,9 @@\n     };\r\n   }, []);\r\n \r\n   const handleFieldChange = async (field: string, value: string) => {\r\n-    if (field === 'type' && !['text', 'image', 'video', 'audio'].includes(value)) {\r\n+    if (field === 'type' && !['text', 'image', 'video', 'audio', 'practice', 'exercise'].includes(value)) {\r\n       console.error('Invalid type value:', value);\r\n       return;\r\n     }\r\n     \r\n@@ -121,9 +121,9 @@\n   // Ensure default values for all fields\r\n   const safePrompt = {\r\n     ...prompt,\r\n     text: prompt.text || '',\r\n-    type: prompt.type || 'text',\r\n+    type: (prompt.type as ExercisePromptType) || 'practice',\r\n     narration: prompt.narration || '',\r\n     saytext: prompt.saytext || '',\r\n     media: prompt.media || ''\r\n   };\r\n"
                },
                {
                    "date": 1739692020285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,20 @@\n import { Icon } from '@/components/ui/icons';\r\n \r\n type ExercisePromptType = 'text' | 'image' | 'video' | 'audio' | 'practice' | 'exercise';\r\n \r\n+// Add interface for the prompt structure\r\n+interface ExercisePrompt {\r\n+  id?: string;\r\n+  text: string;\r\n+  type: ExercisePromptType;\r\n+  media?: string | null;\r\n+  narration?: string | null;\r\n+  saytext?: string | null;\r\n+  question_id?: string | null;\r\n+  order_index: number;\r\n+}\r\n+\r\n export const ExercisePromptCard: React.FC<ExercisePromptCardProps> = ({\r\n   prompt,\r\n   promptIndex,\r\n   onRemove,\r\n@@ -117,16 +129,19 @@\n     \r\n     return null;\r\n   };\r\n \r\n-  // Ensure default values for all fields\r\n-  const safePrompt = {\r\n+  // Update the safePrompt initialization with more thorough defaults\r\n+  const safePrompt: ExercisePrompt = {\r\n     ...prompt,\r\n-    text: prompt.text || '',\r\n-    type: (prompt.type as ExercisePromptType) || 'practice',\r\n-    narration: prompt.narration || '',\r\n-    saytext: prompt.saytext || '',\r\n-    media: prompt.media || ''\r\n+    id: prompt?.id || undefined,\r\n+    text: prompt?.text || '',\r\n+    type: (prompt?.type as ExercisePromptType) || 'practice',\r\n+    media: prompt?.media || '',\r\n+    narration: prompt?.narration || '',\r\n+    saytext: prompt?.saytext || '',\r\n+    question_id: prompt?.question_id || null,\r\n+    order_index: promptIndex\r\n   };\r\n \r\n   return (\r\n     <Card className={cn(\r\n"
                },
                {
                    "date": 1739692076153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -218,9 +218,9 @@\n                       {lastSaved === 'error' && <Icon type=\"phosphor\" name=\"X\" className=\"h-4 w-4 text-destructive\" />}\r\n                     </div>\r\n                   </div>\r\n                   <Input\r\n-                    value={safePrompt.media}\r\n+                    value={safePrompt.media || ''}\r\n                     onChange={(e) => handleFieldChange('media', e.target.value)}\r\n                     placeholder=\"Enter media URL\"\r\n                   />\r\n                   {safePrompt.media && renderMediaPreview(safePrompt.media)}\r\n"
                },
                {
                    "date": 1739692081532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -235,9 +235,9 @@\n                       {lastSaved === 'error' && <Icon type=\"phosphor\" name=\"X\" className=\"h-4 w-4 text-destructive\" />}\r\n                     </div>\r\n                   </div>\r\n                   <Input\r\n-                    value={safePrompt.narration}\r\n+                    value={safePrompt.narration || ''}\r\n                     onChange={(e) => handleFieldChange('narration', e.target.value)}\r\n                     placeholder=\"Enter narration text\"\r\n                   />\r\n                 </div>\r\n@@ -251,9 +251,9 @@\n                       {lastSaved === 'error' && <Icon type=\"phosphor\" name=\"X\" className=\"h-4 w-4 text-destructive\" />}\r\n                     </div>\r\n                   </div>\r\n                   <Input\r\n-                    value={safePrompt.saytext}\r\n+                    value={safePrompt.saytext || ''}\r\n                     onChange={(e) => handleFieldChange('saytext', e.target.value)}\r\n                     placeholder=\"Enter text to say\"\r\n                   />\r\n                 </div>\r\n"
                }
            ],
            "date": 1739691558549,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport { useState, useRef, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Button } from '@/components/ui/button';\r\nimport { ChevronDown, ChevronRight, HomeIcon } from 'lucide-react';\r\nimport { ExercisePromptCardProps } from '../types';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { cn } from '@/lib/utils';\r\nimport { logger } from '@/lib/logger';\r\nimport { ImageIcon, PlayCircle, FileText } from 'lucide-react';\r\nimport { Icon } from '@/components/ui/icons';\r\n\r\ntype ExercisePromptType = 'text' | 'image' | 'video' | 'audio';\r\n\r\nexport const ExercisePromptCard: React.FC<ExercisePromptCardProps> = ({\r\n  prompt,\r\n  promptIndex,\r\n  onRemove,\r\n  onUpdate\r\n}) => {\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n  const [isSaving, setIsSaving] = useState(false);\r\n  const [lastSaved, setLastSaved] = useState<'success' | 'error' | null>(null);\r\n  const mounted = useRef(true);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      mounted.current = false;\r\n    };\r\n  }, []);\r\n\r\n  const handleFieldChange = async (field: string, value: string) => {\r\n    if (field === 'type' && !['text', 'image', 'video', 'audio'].includes(value)) {\r\n      console.error('Invalid type value:', value);\r\n      return;\r\n    }\r\n    \r\n    setIsSaving(true);\r\n    setLastSaved(null);\r\n    try {\r\n      await onUpdate({\r\n        ...prompt,\r\n        [field]: value\r\n      });\r\n      if (mounted.current) {\r\n        setLastSaved('success');\r\n      }\r\n    } catch (error) {\r\n      if (mounted.current) {\r\n        setLastSaved('error');\r\n        logger.error('Failed to update exercise prompt', {\r\n          context: { error, field },\r\n          source: 'ExercisePromptCard'\r\n        });\r\n      }\r\n    } finally {\r\n      if (mounted.current) {\r\n        setIsSaving(false);\r\n        setTimeout(() => {\r\n          if (mounted.current) {\r\n            setLastSaved(null);\r\n          }\r\n        }, 2000);\r\n      }\r\n    }\r\n  };\r\n\r\n  const getMediaTypeIcon = (url: string) => {\r\n    if (!url) return null;\r\n    const extension = url.split('.').pop()?.toLowerCase();\r\n    if (['jpg', 'jpeg', 'png', 'gif', 'webp'].includes(extension || '')) {\r\n      return <ImageIcon className=\"h-4 w-4\" />;\r\n    }\r\n    if (['mp4', 'webm', 'ogg'].includes(extension || '')) {\r\n      return <PlayCircle className=\"h-4 w-4\" />;\r\n    }\r\n    return <FileText className=\"h-4 w-4\" />;\r\n  };\r\n\r\n  const renderMediaPreview = (url: string) => {\r\n    if (!url) return null;\r\n    const extension = url.split('.').pop()?.toLowerCase();\r\n    \r\n    if (['jpg', 'jpeg', 'png', 'gif', 'webp'].includes(extension || '')) {\r\n      return (\r\n        <div className=\"relative h-[200px] rounded-lg overflow-hidden bg-muted\">\r\n          <img \r\n            src={url} \r\n            alt=\"Media preview\" \r\n            className=\"object-contain w-full h-full\"\r\n            onError={(e) => {\r\n              e.currentTarget.src = 'https://via.placeholder.com/400x225?text=Invalid+Image+URL';\r\n            }}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n    \r\n    if (['mp4', 'webm', 'ogg'].includes(extension || '')) {\r\n      return (\r\n        <div className=\"relative h-[200px] rounded-lg overflow-hidden bg-muted\">\r\n          <video \r\n            src={url} \r\n            controls \r\n            className=\"w-full h-full object-contain\"\r\n            onError={(e) => {\r\n              e.currentTarget.parentElement!.innerHTML = 'Invalid video URL';\r\n            }}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n    \r\n    return null;\r\n  };\r\n\r\n  // Ensure default values for all fields\r\n  const safePrompt = {\r\n    ...prompt,\r\n    text: prompt.text || '',\r\n    type: (prompt.type as ExercisePromptType) || 'text',\r\n    narration: prompt.narration || '',\r\n    saytext: prompt.saytext || '',\r\n    media: prompt.media || ''\r\n  };\r\n\r\n  return (\r\n    <Card className={cn(\r\n      \"border-l-4 transition-colors duration-200\",\r\n      isExpanded ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\r\n    )}>\r\n      <CardHeader className=\"py-3\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <div className=\"flex items-center gap-2\">\r\n            <span className=\"w-6 h-6 flex items-center justify-center rounded-full bg-primary/10 text-sm font-medium\">\r\n              {promptIndex + 1}\r\n            </span>\r\n            <span className=\"text-sm text-muted-foreground line-clamp-1\">\r\n              {safePrompt.text || 'No prompt text'}\r\n            </span>\r\n          </div>\r\n          <div className=\"flex items-center gap-2\">\r\n            <Button\r\n              variant=\"ghost\"\r\n              size=\"sm\"\r\n              onClick={() => setIsExpanded(!isExpanded)}\r\n              className=\"hover:bg-accent\"\r\n            >\r\n              {isExpanded ? \r\n                <ChevronDown className=\"h-4 w-4 text-primary\" /> : \r\n                <ChevronRight className=\"h-4 w-4 text-primary\" />\r\n              }\r\n            </Button>\r\n            <Button\r\n              variant=\"ghost\"\r\n              size=\"sm\"\r\n              onClick={onRemove}\r\n              className=\"hover:bg-destructive/10 hover:text-destructive\"\r\n            >\r\n              <Icon type=\"phosphor\" name=\"TRASH_SIMPLE\" className=\"h-4 w-4\" />\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </CardHeader>\r\n      <AnimatePresence>\r\n        {isExpanded && (\r\n          <motion.div\r\n            initial={{ height: 0, opacity: 0 }}\r\n            animate={{ height: \"auto\", opacity: 1 }}\r\n            exit={{ height: 0, opacity: 0 }}\r\n            transition={{ duration: 0.2 }}\r\n          >\r\n            <CardContent>\r\n              <div className=\"space-y-4\">\r\n                <div className=\"space-y-2\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <Label>Prompt Text</Label>\r\n                    <div className=\"flex items-center gap-2\">\r\n                      {isSaving && <Icon type=\"phosphor\" name=\"SPINNER\" className=\"h-4 w-4 animate-spin text-primary\" />}\r\n                      {lastSaved === 'success' && <Icon type=\"phosphor\" name=\"CHECK\" className=\"h-4 w-4 text-green-500\" />}\r\n                      {lastSaved === 'error' && <Icon type=\"phosphor\" name=\"X\" className=\"h-4 w-4 text-destructive\" />}\r\n                    </div>\r\n                  </div>\r\n                  <Textarea\r\n                    value={safePrompt.text}\r\n                    onChange={(e) => handleFieldChange('text', e.target.value)}\r\n                    placeholder=\"Enter prompt text\"\r\n                    className=\"min-h-[80px] resize-none\"\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"space-y-2\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <Label>Media URL</Label>\r\n                    <div className=\"flex items-center gap-2\">\r\n                      {safePrompt.media && getMediaTypeIcon(safePrompt.media)}\r\n                      {isSaving && <Icon type=\"phosphor\" name=\"SPINNER\" className=\"h-4 w-4 animate-spin text-primary\" />}\r\n                      {lastSaved === 'success' && <Icon type=\"phosphor\" name=\"CHECK\" className=\"h-4 w-4 text-green-500\" />}\r\n                      {lastSaved === 'error' && <Icon type=\"phosphor\" name=\"X\" className=\"h-4 w-4 text-destructive\" />}\r\n                    </div>\r\n                  </div>\r\n                  <Input\r\n                    value={safePrompt.media}\r\n                    onChange={(e) => handleFieldChange('media', e.target.value)}\r\n                    placeholder=\"Enter media URL\"\r\n                  />\r\n                  {safePrompt.media && renderMediaPreview(safePrompt.media)}\r\n                </div>\r\n\r\n                <div className=\"space-y-2\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <Label>Narration</Label>\r\n                    <div className=\"flex items-center gap-2\">\r\n                      {isSaving && <Icon type=\"phosphor\" name=\"SPINNER\" className=\"h-4 w-4 animate-spin text-primary\" />}\r\n                      {lastSaved === 'success' && <Icon type=\"phosphor\" name=\"CHECK\" className=\"h-4 w-4 text-green-500\" />}\r\n                      {lastSaved === 'error' && <Icon type=\"phosphor\" name=\"X\" className=\"h-4 w-4 text-destructive\" />}\r\n                    </div>\r\n                  </div>\r\n                  <Input\r\n                    value={safePrompt.narration}\r\n                    onChange={(e) => handleFieldChange('narration', e.target.value)}\r\n                    placeholder=\"Enter narration text\"\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"space-y-2\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <Label>Say Text</Label>\r\n                    <div className=\"flex items-center gap-2\">\r\n                      {isSaving && <Icon type=\"phosphor\" name=\"SPINNER\" className=\"h-4 w-4 animate-spin text-primary\" />}\r\n                      {lastSaved === 'success' && <Icon type=\"phosphor\" name=\"CHECK\" className=\"h-4 w-4 text-green-500\" />}\r\n                      {lastSaved === 'error' && <Icon type=\"phosphor\" name=\"X\" className=\"h-4 w-4 text-destructive\" />}\r\n                    </div>\r\n                  </div>\r\n                  <Input\r\n                    value={safePrompt.saytext}\r\n                    onChange={(e) => handleFieldChange('saytext', e.target.value)}\r\n                    placeholder=\"Enter text to say\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n    </Card>\r\n  );\r\n}; "
        }
    ]
}