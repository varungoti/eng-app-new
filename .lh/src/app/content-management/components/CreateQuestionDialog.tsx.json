{
    "sourceFile": "src/app/content-management/components/CreateQuestionDialog.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1739138875950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1739138875950,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport { useState } from 'react';\r\nimport { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { contentService } from '@/lib/content/ContentService';\r\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport { Icon } from '@/components/ui/icons';\r\nimport { QuestionFormats } from '@/components/formats/Formats';\r\n\r\n// Create a type for available formats\r\ntype QuestionFormat = keyof typeof QuestionFormats;\r\n\r\n// Format options for the select dropdown\r\nconst FORMAT_OPTIONS: { value: QuestionFormat; label: string }[] = [\r\n  { value: \"SpeakingFormat\", label: \"Speaking Practice\" },\r\n  { value: \"DebateFormat\", label: \"Debate\" },\r\n  { value: \"GrammarSpeakingFormat\", label: \"Grammar Speaking\" },\r\n  { value: \"StorytellingFormat\", label: \"Storytelling\" },\r\n  { value: \"ListeningFormat\", label: \"Listening\" },\r\n  { value: \"ListenAndRepeatFormat\", label: \"Listen and Repeat\" },\r\n  { value: \"MultipleChoiceFormat\", label: \"Multiple Choice\" },\r\n  { value: \"PresentationFormat\", label: \"Presentation\" },\r\n  { value: \"LookAndSpeakFormat\", label: \"Look and Speak\" },\r\n  { value: \"WatchAndSpeakFormat\", label: \"Watch and Speak\" },\r\n  { value: \"IdiomPracticeFormat\", label: \"Idiom Practice\" },\r\n];\r\n\r\ninterface CreateQuestionDialogProps {\r\n  open: boolean;\r\n  onOpenChange: (open: boolean) => void;\r\n  lessonId: string;\r\n}\r\n\r\nexport function CreateQuestionDialog({ open, onOpenChange, lessonId }: CreateQuestionDialogProps) {\r\n  const [content, setContent] = useState('');\r\n  const [type, setType] = useState<'multiple_choice' | 'true_false' | 'open_ended'>('multiple_choice');\r\n  const [selectedFormat, setSelectedFormat] = useState<QuestionFormat>(\"SpeakingFormat\");\r\n  const { toast } = useToast();\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    try {\r\n      await contentService.createQuestion({\r\n        lessonId,\r\n        content,\r\n        type,\r\n      });\r\n      toast({ title: \"Success\", description: \"Question created successfully\" });\r\n      onOpenChange(false);\r\n    } catch (error) {\r\n      toast({ \r\n        title: \"Error\", \r\n        description: \"Failed to create question\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Dialog open={open} onOpenChange={onOpenChange}>\r\n      <DialogContent>\r\n        <DialogHeader>\r\n          <DialogTitle>Create New Question</DialogTitle>\r\n        </DialogHeader>\r\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n          <div className=\"space-y-2\">\r\n            <label className=\"text-sm font-medium\">Question Type</label>\r\n            <Select value={type} onValueChange={(value: any) => setType(value)}>\r\n              <SelectTrigger>\r\n                <SelectValue placeholder=\"Select type\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                <SelectItem value=\"multiple_choice\">Multiple Choice</SelectItem>\r\n                <SelectItem value=\"true_false\">True/False</SelectItem>\r\n                <SelectItem value=\"open_ended\">Open Ended</SelectItem>\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n          <div className=\"space-y-2\">\r\n            <label className=\"text-sm font-medium\">Question Content</label>\r\n            <Input\r\n              value={content}\r\n              onChange={(e) => setContent(e.target.value)}\r\n              placeholder=\"Enter question content\"\r\n            />\r\n          </div>\r\n          <div className=\"space-y-2\">\r\n            <label className=\"text-sm font-medium\">Question Format</label>\r\n            <Select\r\n              value={selectedFormat}\r\n              onValueChange={(value: QuestionFormat) => setSelectedFormat(value)}\r\n            >\r\n              <SelectTrigger>\r\n                <SelectValue placeholder=\"Select format\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                {FORMAT_OPTIONS.map((format) => (\r\n                  <SelectItem key={format.value} value={format.value}>\r\n                    {format.label}\r\n                  </SelectItem>\r\n                ))}\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n          <DialogFooter>\r\n            <Button type=\"submit\">Create Question</Button>\r\n          </DialogFooter>\r\n        </form>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n} "
        }
    ]
}