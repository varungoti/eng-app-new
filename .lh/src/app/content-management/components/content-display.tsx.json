{
    "sourceFile": "src/app/content-management/components/content-display.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 31,
            "patches": [
                {
                    "date": 1739016961889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739689667658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,9 +196,21 @@\n                   {lesson.description && (\r\n                     <p className=\"text-sm text-muted-foreground mt-1\">{lesson.description}</p>\r\n                   )}\r\n                 </motion.div>\r\n-              ))}\r\n+              ))},\r\n+              {questions?.map((question) => (\r\n+  <Card key={question.id} className=\"p-4\">\r\n+    <div className=\"space-y-2\">\r\n+      <h4 className=\"font-medium\">{question.content}</h4>\r\n+      {question.sampleAnswer && ( // Only render if sampleAnswer exists\r\n+        <p className=\"text-sm text-gray-500\">\r\n+          Sample Answer: {question.sampleAnswer}\r\n+        </p>\r\n+      )}\r\n+    </div>\r\n+  </Card>\r\n+))}\r\n             </AnimatePresence>\r\n           </ScrollArea>\r\n         </div>\r\n       </Card>\r\n"
                },
                {
                    "date": 1739689769952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,20 +197,9 @@\n                     <p className=\"text-sm text-muted-foreground mt-1\">{lesson.description}</p>\r\n                   )}\r\n                 </motion.div>\r\n               ))},\r\n-              {questions?.map((question) => (\r\n-  <Card key={question.id} className=\"p-4\">\r\n-    <div className=\"space-y-2\">\r\n-      <h4 className=\"font-medium\">{question.content}</h4>\r\n-      {question.sampleAnswer && ( // Only render if sampleAnswer exists\r\n-        <p className=\"text-sm text-gray-500\">\r\n-          Sample Answer: {question.sampleAnswer}\r\n-        </p>\r\n-      )}\r\n-    </div>\r\n-  </Card>\r\n-))}\r\n+              \r\n             </AnimatePresence>\r\n           </ScrollArea>\r\n         </div>\r\n       </Card>\r\n"
                },
                {
                    "date": 1739961948136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n \"use client\";\r\n \r\n-import React from 'react';\r\n+import React, { useState } from 'react';\r\n import { Card } from '@/components/ui/card';\r\n import { Button } from '@/components/ui/button';\r\n import { Icon } from '@/components/ui/icons';\r\n import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\n@@ -15,8 +15,9 @@\n import type { Topic, Subtopic, Lesson } from '@/types/content';\r\n import { CreateQuestionDialog } from './CreateQuestionDialog';\r\n import { CreateActivityDialog } from '@/app/content-management/components/CreateActivityDialog';\r\n import { useQueryClient } from '@tanstack/react-query';\r\n+import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\r\n \r\n interface ContentItem {\r\n   id: string;\r\n   title: string;\r\n@@ -42,8 +43,13 @@\n   const [isEditing, setIsEditing] = React.useState(false);\r\n   const [lessonContent, setLessonContent] = React.useState('');\r\n   const [isQuestionDialogOpen, setIsQuestionDialogOpen] = React.useState(false);\r\n   const [isActivityDialogOpen, setIsActivityDialogOpen] = React.useState(false);\r\n+  const [itemToDelete, setItemToDelete] = useState<{\r\n+    id: string;\r\n+    type: 'topic' | 'subtopic' | 'lesson';\r\n+    title: string;\r\n+  } | null>(null);\r\n   \r\n   // Get current lesson\r\n   const currentLesson = React.useMemo(() => \r\n     lessons.find((l: Lesson) => l.id === selectedLesson),\r\n@@ -88,8 +94,43 @@\n     setLessonContent(currentLesson?.content || '');\r\n     setIsEditing(false);\r\n   };\r\n \r\n+  const handleDelete = async () => {\r\n+    if (!itemToDelete) return;\r\n+\r\n+    try {\r\n+      switch (itemToDelete.type) {\r\n+        case 'topic':\r\n+          await contentService.deleteTopic(itemToDelete.id);\r\n+          break;\r\n+        case 'subtopic':\r\n+          await contentService.deleteSubtopic(itemToDelete.id);\r\n+          break;\r\n+        case 'lesson':\r\n+          await contentService.deleteLesson(itemToDelete.id);\r\n+          break;\r\n+      }\r\n+      \r\n+      queryClient.invalidateQueries(['topics']);\r\n+      queryClient.invalidateQueries(['subtopics']);\r\n+      queryClient.invalidateQueries(['lessons']);\r\n+      \r\n+      toast({\r\n+        title: \"Success\",\r\n+        description: `${itemToDelete.title} has been deleted.`,\r\n+      });\r\n+    } catch (error) {\r\n+      toast({\r\n+        title: \"Error\",\r\n+        description: \"Failed to delete item.\",\r\n+        variant: \"destructive\",\r\n+      });\r\n+    } finally {\r\n+      setItemToDelete(null);\r\n+    }\r\n+  };\r\n+\r\n   // Render different content based on selection\r\n   if (selectedLesson) {\r\n     return (\r\n       <Card className=\"p-6\">\r\n"
                },
                {
                    "date": 1739962055268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,11 +110,11 @@\n           await contentService.deleteLesson(itemToDelete.id);\r\n           break;\r\n       }\r\n       \r\n-      queryClient.invalidateQueries(['topics']);\r\n-      queryClient.invalidateQueries(['subtopics']);\r\n-      queryClient.invalidateQueries(['lessons']);\r\n+      queryClient.invalidateQueries({ queryKey: ['topics'] });\r\n+      queryClient.invalidateQueries({ queryKey: ['subtopics'] });\r\n+      queryClient.invalidateQueries({ queryKey: ['lessons'] });\r\n       \r\n       toast({\r\n         title: \"Success\",\r\n         description: `${itemToDelete.title} has been deleted.`,\r\n"
                },
                {
                    "date": 1739962126440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,8 @@\n     } catch (error) {\r\n       toast({\r\n         title: \"Error\",\r\n         description: \"Failed to delete item.\",\r\n-        variant: \"destructive\",\r\n       });\r\n     } finally {\r\n       setItemToDelete(null);\r\n     }\r\n"
                },
                {
                    "date": 1739962993154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,8 +124,9 @@\n         title: \"Error\",\r\n         description: \"Failed to delete item.\",\r\n       });\r\n     } finally {\r\n+      v\r\n       setItemToDelete(null);\r\n     }\r\n   };\r\n \r\n"
                },
                {
                    "date": 1739963034565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,8 +43,9 @@\n   const [isEditing, setIsEditing] = React.useState(false);\r\n   const [lessonContent, setLessonContent] = React.useState('');\r\n   const [isQuestionDialogOpen, setIsQuestionDialogOpen] = React.useState(false);\r\n   const [isActivityDialogOpen, setIsActivityDialogOpen] = React.useState(false);\r\n+  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\r\n   const [itemToDelete, setItemToDelete] = useState<{\r\n     id: string;\r\n     type: 'topic' | 'subtopic' | 'lesson';\r\n     title: string;\r\n@@ -124,9 +125,9 @@\n         title: \"Error\",\r\n         description: \"Failed to delete item.\",\r\n       });\r\n     } finally {\r\n-      v\r\n+      setDeleteDialogOpen(false);\r\n       setItemToDelete(null);\r\n     }\r\n   };\r\n \r\n"
                },
                {
                    "date": 1739963052363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n   const [isEditing, setIsEditing] = React.useState(false);\r\n   const [lessonContent, setLessonContent] = React.useState('');\r\n   const [isQuestionDialogOpen, setIsQuestionDialogOpen] = React.useState(false);\r\n   const [isActivityDialogOpen, setIsActivityDialogOpen] = React.useState(false);\r\n-  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\r\n+  const [deleteDialogOpen, setDeleteDialogOpen] = ReactuseState(false);\r\n   const [itemToDelete, setItemToDelete] = useState<{\r\n     id: string;\r\n     type: 'topic' | 'subtopic' | 'lesson';\r\n     title: string;\r\n"
                },
                {
                    "date": 1739963231216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n   const [isEditing, setIsEditing] = React.useState(false);\r\n   const [lessonContent, setLessonContent] = React.useState('');\r\n   const [isQuestionDialogOpen, setIsQuestionDialogOpen] = React.useState(false);\r\n   const [isActivityDialogOpen, setIsActivityDialogOpen] = React.useState(false);\r\n-  const [deleteDialogOpen, setDeleteDialogOpen] = ReactuseState(false);\r\n+  const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\r\n   const [itemToDelete, setItemToDelete] = useState<{\r\n     id: string;\r\n     type: 'topic' | 'subtopic' | 'lesson';\r\n     title: string;\r\n@@ -130,8 +130,23 @@\n       setItemToDelete(null);\r\n     }\r\n   };\r\n \r\n+  <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\r\n+  <AlertDialogContent>\r\n+    <AlertDialogHeader>\r\n+      <AlertDialogTitle>Are you sure?</AlertDialogTitle>\r\n+      <AlertDialogDescription>\r\n+        This will permanently delete {itemToDelete?.title}. This action cannot be undone.\r\n+      </AlertDialogDescription>\r\n+    </AlertDialogHeader>\r\n+    <AlertDialogFooter>\r\n+      <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n+      <AlertDialogAction onClick={handleDelete}>Delete</AlertDialogAction>\r\n+    </AlertDialogFooter>\r\n+  </AlertDialogContent>\r\n+</AlertDialog>\r\n+\r\n   // Render different content based on selection\r\n   if (selectedLesson) {\r\n     return (\r\n       <Card className=\"p-6\">\r\n"
                },
                {
                    "date": 1739963275922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n import { CreateQuestionDialog } from './CreateQuestionDialog';\r\n import { CreateActivityDialog } from '@/app/content-management/components/CreateActivityDialog';\r\n import { useQueryClient } from '@tanstack/react-query';\r\n import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\r\n+import { Trash } from \"lucide-react\";\r\n \r\n interface ContentItem {\r\n   id: string;\r\n   title: string;\r\n"
                },
                {
                    "date": 1739963460182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -253,8 +253,9 @@\n                   <h3 className=\"font-medium\">{lesson.title}</h3>\r\n                   {lesson.description && (\r\n                     <p className=\"text-sm text-muted-foreground mt-1\">{lesson.description}</p>\r\n                   )}\r\n+                  \r\n                 </motion.div>\r\n               ))},\r\n               \r\n             </AnimatePresence>\r\n"
                },
                {
                    "date": 1739963494709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -253,9 +253,29 @@\n                   <h3 className=\"font-medium\">{lesson.title}</h3>\r\n                   {lesson.description && (\r\n                     <p className=\"text-sm text-muted-foreground mt-1\">{lesson.description}</p>\r\n                   )}\r\n-                  \r\n+                  <div onClick={() => handleLessonClick(lesson.id)}>\r\n+      <h3 className=\"font-medium\">{lesson.title}</h3>\r\n+      {lesson.description && (\r\n+        <p className=\"text-sm text-muted-foreground mt-1\">{lesson.description}</p>\r\n+      )}\r\n+    </div>\r\n+    <Button\r\n+      variant=\"ghost\"\r\n+      size=\"icon\"\r\n+      onClick={(e) => {\r\n+        e.stopPropagation();\r\n+        setItemToDelete({\r\n+          id: lesson.id,\r\n+          type: 'lesson',\r\n+          title: lesson.title\r\n+        });\r\n+        setDeleteDialogOpen(true);\r\n+      }}\r\n+    >\r\n+      <Trash className=\"h-4 w-4\" />\r\n+        </Button>\r\n                 </motion.div>\r\n               ))},\r\n               \r\n             </AnimatePresence>\r\n"
                },
                {
                    "date": 1739963509545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -254,28 +254,28 @@\n                   {lesson.description && (\r\n                     <p className=\"text-sm text-muted-foreground mt-1\">{lesson.description}</p>\r\n                   )}\r\n                   <div onClick={() => handleLessonClick(lesson.id)}>\r\n-      <h3 className=\"font-medium\">{lesson.title}</h3>\r\n-      {lesson.description && (\r\n-        <p className=\"text-sm text-muted-foreground mt-1\">{lesson.description}</p>\r\n-      )}\r\n-    </div>\r\n-    <Button\r\n-      variant=\"ghost\"\r\n-      size=\"icon\"\r\n-      onClick={(e) => {\r\n-        e.stopPropagation();\r\n-        setItemToDelete({\r\n-          id: lesson.id,\r\n-          type: 'lesson',\r\n-          title: lesson.title\r\n-        });\r\n-        setDeleteDialogOpen(true);\r\n-      }}\r\n-    >\r\n-      <Trash className=\"h-4 w-4\" />\r\n-        </Button>\r\n+                    <h3 className=\"font-medium\">{lesson.title}</h3>\r\n+                    {lesson.description && (\r\n+                      <p className=\"text-sm text-muted-foreground mt-1\">{lesson.description}</p>\r\n+                    )}\r\n+                  </div>\r\n+                  <Button\r\n+                    variant=\"ghost\"\r\n+                    size=\"icon\"\r\n+                    onClick={(e) => {\r\n+                      e.stopPropagation();\r\n+                      setItemToDelete({\r\n+                        id: lesson.id,\r\n+                        type: 'lesson',\r\n+                        title: lesson.title\r\n+                      });\r\n+                      setDeleteDialogOpen(true);\r\n+                    }}\r\n+                  >\r\n+                    <Trash className=\"h-4 w-4\" />\r\n+                  </Button>\r\n                 </motion.div>\r\n               ))},\r\n               \r\n             </AnimatePresence>\r\n"
                },
                {
                    "date": 1739963531171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,8 @@\n import { CreateQuestionDialog } from './CreateQuestionDialog';\r\n import { CreateActivityDialog } from '@/app/content-management/components/CreateActivityDialog';\r\n import { useQueryClient } from '@tanstack/react-query';\r\n import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\r\n-import { Trash } from \"lucide-react\";\r\n \r\n interface ContentItem {\r\n   id: string;\r\n   title: string;\r\n"
                },
                {
                    "date": 1739963538653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,8 +130,12 @@\n       setItemToDelete(null);\r\n     }\r\n   };\r\n \r\n+  const handleLessonClick = (lessonId: string) => {\r\n+    useContentStore.setState({ selectedLesson: lessonId });\r\n+  };\r\n+\r\n   <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\r\n   <AlertDialogContent>\r\n     <AlertDialogHeader>\r\n       <AlertDialogTitle>Are you sure?</AlertDialogTitle>\r\n"
                },
                {
                    "date": 1739963560817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -265,9 +265,9 @@\n                   </div>\r\n                   <Button\r\n                     variant=\"ghost\"\r\n                     size=\"icon\"\r\n-                    onClick={(e) => {\r\n+                    onClick={(e: React.MouseEvent) => {\r\n                       e.stopPropagation();\r\n                       setItemToDelete({\r\n                         id: lesson.id,\r\n                         type: 'lesson',\r\n"
                },
                {
                    "date": 1739963740497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n import { CreateQuestionDialog } from './CreateQuestionDialog';\r\n import { CreateActivityDialog } from '@/app/content-management/components/CreateActivityDialog';\r\n import { useQueryClient } from '@tanstack/react-query';\r\n import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\r\n+import { Trash } from 'lucide-react';\r\n \r\n interface ContentItem {\r\n   id: string;\r\n   title: string;\r\n"
                },
                {
                    "date": 1739963923775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,23 +135,8 @@\n   const handleLessonClick = (lessonId: string) => {\r\n     useContentStore.setState({ selectedLesson: lessonId });\r\n   };\r\n \r\n-  <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\r\n-  <AlertDialogContent>\r\n-    <AlertDialogHeader>\r\n-      <AlertDialogTitle>Are you sure?</AlertDialogTitle>\r\n-      <AlertDialogDescription>\r\n-        This will permanently delete {itemToDelete?.title}. This action cannot be undone.\r\n-      </AlertDialogDescription>\r\n-    </AlertDialogHeader>\r\n-    <AlertDialogFooter>\r\n-      <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n-      <AlertDialogAction onClick={handleDelete}>Delete</AlertDialogAction>\r\n-    </AlertDialogFooter>\r\n-  </AlertDialogContent>\r\n-</AlertDialog>\r\n-\r\n   // Render different content based on selection\r\n   if (selectedLesson) {\r\n     return (\r\n       <Card className=\"p-6\">\r\n"
                },
                {
                    "date": 1739964068166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,19 @@\n import type { Topic, Subtopic, Lesson } from '@/types/content';\r\n import { CreateQuestionDialog } from './CreateQuestionDialog';\r\n import { CreateActivityDialog } from '@/app/content-management/components/CreateActivityDialog';\r\n import { useQueryClient } from '@tanstack/react-query';\r\n-import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\r\n+import {\r\n+  AlertDialog,\r\n+  AlertDialogAction,\r\n+  AlertDialogCancel,\r\n+  AlertDialogContent,\r\n+  AlertDialogDescription,\r\n+  AlertDialogFooter,\r\n+  AlertDialogHeader,\r\n+  AlertDialogTitle,\r\n+  AlertDialogTrigger,\r\n+} from \"@/components/ui/alert-dialog\";\r\n import { Trash } from 'lucide-react';\r\n \r\n interface ContentItem {\r\n   id: string;\r\n@@ -338,5 +348,20 @@\n         </ScrollArea>\r\n       </div>\r\n     </Card>\r\n   );\r\n-} \n\\ No newline at end of file\n+}\r\n+\r\n+<AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\r\n+  <AlertDialogContent>\r\n+    <AlertDialogHeader>\r\n+      <AlertDialogTitle>Are you sure?</AlertDialogTitle>\r\n+      <AlertDialogDescription>\r\n+        This will permanently delete {itemToDelete?.title}. This action cannot be undone.\r\n+      </AlertDialogDescription>\r\n+    </AlertDialogHeader>\r\n+    <AlertDialogFooter>\r\n+      <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n+      <AlertDialogAction onClick={handleDelete}>Delete</AlertDialogAction>\r\n+    </AlertDialogFooter>\r\n+  </AlertDialogContent>\r\n+</AlertDialog> \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739964091535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n   const [lessonContent, setLessonContent] = React.useState('');\r\n   const [isQuestionDialogOpen, setIsQuestionDialogOpen] = React.useState(false);\r\n   const [isActivityDialogOpen, setIsActivityDialogOpen] = React.useState(false);\r\n   const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\r\n-  const [itemToDelete, setItemToDelete] = useState<{\r\n+  const [itemToDelete, setItemToDelete] = React.useState<{\r\n     id: string;\r\n     type: 'topic' | 'subtopic' | 'lesson';\r\n     title: string;\r\n   } | null>(null);\r\n"
                },
                {
                    "date": 1739964227395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,84 +148,101 @@\n \r\n   // Render different content based on selection\r\n   if (selectedLesson) {\r\n     return (\r\n-      <Card className=\"p-6\">\r\n-        <div className=\"space-y-6\">\r\n-          {/* Lesson Title Section */}\r\n-          <div className=\"space-y-2\">\r\n-            <h2 className=\"text-2xl font-bold\">{currentLesson?.title || 'Untitled Lesson'}</h2>\r\n-            <Button \r\n-              variant=\"ghost\" \r\n-              size=\"sm\"\r\n-              onClick={() => setIsEditing(true)}\r\n-            >\r\n-              <Icon type=\"phosphor\" name=\"PENCIL_SIMPLE\" className=\"mr-2 h-4 w-4\" />\r\n-              Edit Lesson Content\r\n-            </Button>\r\n-          </div>\r\n+      <>\r\n+        <Card className=\"p-6\">\r\n+          <div className=\"space-y-6\">\r\n+            {/* Lesson Title Section */}\r\n+            <div className=\"space-y-2\">\r\n+              <h2 className=\"text-2xl font-bold\">{currentLesson?.title || 'Untitled Lesson'}</h2>\r\n+              <Button \r\n+                variant=\"ghost\" \r\n+                size=\"sm\"\r\n+                onClick={() => setIsEditing(true)}\r\n+              >\r\n+                <Icon type=\"phosphor\" name=\"PENCIL_SIMPLE\" className=\"mr-2 h-4 w-4\" />\r\n+                Edit Lesson Content\r\n+              </Button>\r\n+            </div>\r\n \r\n-          {/* Lesson Content Section */}\r\n-          {isEditing ? (\r\n-            <RichTextEditor\r\n-              value={lessonContent}\r\n-              onChange={setLessonContent}\r\n-              onSave={handleSaveContent}\r\n-              onCancel={handleCancelEdit}\r\n-            />\r\n-          ) : currentLesson?.content ? (\r\n-            <div \r\n-              className=\"prose max-w-none\" \r\n-              dangerouslySetInnerHTML={{ __html: currentLesson.content }} \r\n-            />\r\n-          ) : (\r\n-            <Button onClick={() => setIsEditing(true)}>\r\n-              <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n-              Add Lesson Content\r\n-            </Button>\r\n-          )}\r\n+            {/* Lesson Content Section */}\r\n+            {isEditing ? (\r\n+              <RichTextEditor\r\n+                value={lessonContent}\r\n+                onChange={setLessonContent}\r\n+                onSave={handleSaveContent}\r\n+                onCancel={handleCancelEdit}\r\n+              />\r\n+            ) : currentLesson?.content ? (\r\n+              <div \r\n+                className=\"prose max-w-none\" \r\n+                dangerouslySetInnerHTML={{ __html: currentLesson.content }} \r\n+              />\r\n+            ) : (\r\n+              <Button onClick={() => setIsEditing(true)}>\r\n+                <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n+                Add Lesson Content\r\n+              </Button>\r\n+            )}\r\n \r\n-          {/* Questions and Activities Tabs */}\r\n-          <Tabs defaultValue=\"questions\" className=\"w-full\">\r\n-            <TabsList>\r\n-              <TabsTrigger value=\"questions\">Questions</TabsTrigger>\r\n-              <TabsTrigger value=\"activities\">Activities</TabsTrigger>\r\n-            </TabsList>\r\n+            {/* Questions and Activities Tabs */}\r\n+            <Tabs defaultValue=\"questions\" className=\"w-full\">\r\n+              <TabsList>\r\n+                <TabsTrigger value=\"questions\">Questions</TabsTrigger>\r\n+                <TabsTrigger value=\"activities\">Activities</TabsTrigger>\r\n+              </TabsList>\r\n \r\n-            <TabsContent value=\"questions\" className=\"space-y-4\">\r\n-              <div className=\"flex justify-between items-center\">\r\n-                <h3 className=\"text-lg font-medium\">Questions</h3>\r\n-                <Button onClick={() => setIsQuestionDialogOpen(true)}>\r\n-                  <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n-                  Add Question\r\n-                </Button>\r\n-              </div>\r\n-              {/* Questions list */}\r\n-              <CreateQuestionDialog \r\n-                open={isQuestionDialogOpen}\r\n-                onOpenChange={setIsQuestionDialogOpen}\r\n-                lessonId={selectedLesson || ''}\r\n-              />\r\n-            </TabsContent>\r\n+              <TabsContent value=\"questions\" className=\"space-y-4\">\r\n+                <div className=\"flex justify-between items-center\">\r\n+                  <h3 className=\"text-lg font-medium\">Questions</h3>\r\n+                  <Button onClick={() => setIsQuestionDialogOpen(true)}>\r\n+                    <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n+                    Add Question\r\n+                  </Button>\r\n+                </div>\r\n+                {/* Questions list */}\r\n+                <CreateQuestionDialog \r\n+                  open={isQuestionDialogOpen}\r\n+                  onOpenChange={setIsQuestionDialogOpen}\r\n+                  lessonId={selectedLesson || ''}\r\n+                />\r\n+              </TabsContent>\r\n \r\n-            <TabsContent value=\"activities\" className=\"space-y-4\">\r\n-              <div className=\"flex justify-between items-center\">\r\n-                <h3 className=\"text-lg font-medium\">Activities</h3>\r\n-                <Button onClick={() => setIsActivityDialogOpen(true)}>\r\n-                  <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n-                  Add Activity\r\n-                </Button>\r\n-              </div>\r\n-              {/* Activities list */}\r\n-              <CreateActivityDialog \r\n-                open={isActivityDialogOpen}\r\n-                onOpenChange={setIsActivityDialogOpen}\r\n-                lessonId={selectedLesson || ''}\r\n-              />\r\n-            </TabsContent>\r\n-          </Tabs>\r\n-        </div>\r\n-      </Card>\r\n+              <TabsContent value=\"activities\" className=\"space-y-4\">\r\n+                <div className=\"flex justify-between items-center\">\r\n+                  <h3 className=\"text-lg font-medium\">Activities</h3>\r\n+                  <Button onClick={() => setIsActivityDialogOpen(true)}>\r\n+                    <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n+                    Add Activity\r\n+                  </Button>\r\n+                </div>\r\n+                {/* Activities list */}\r\n+                <CreateActivityDialog \r\n+                  open={isActivityDialogOpen}\r\n+                  onOpenChange={setIsActivityDialogOpen}\r\n+                  lessonId={selectedLesson || ''}\r\n+                />\r\n+              </TabsContent>\r\n+            </Tabs>\r\n+          </div>\r\n+        </Card>\r\n+\r\n+        <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\r\n+          <AlertDialogContent>\r\n+            <AlertDialogHeader>\r\n+              <AlertDialogTitle>Are you sure?</AlertDialogTitle>\r\n+              <AlertDialogDescription>\r\n+                This will permanently delete {itemToDelete?.title}. This action cannot be undone.\r\n+              </AlertDialogDescription>\r\n+            </AlertDialogHeader>\r\n+            <AlertDialogFooter>\r\n+              <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n+              <AlertDialogAction onClick={handleDelete}>Delete</AlertDialogAction>\r\n+            </AlertDialogFooter>\r\n+          </AlertDialogContent>\r\n+        </AlertDialog>\r\n+      </>\r\n     );\r\n   }\r\n \r\n   if (selectedSubtopic) {\r\n@@ -348,20 +365,5 @@\n         </ScrollArea>\r\n       </div>\r\n     </Card>\r\n   );\r\n-}\r\n-\r\n-<AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\r\n-  <AlertDialogContent>\r\n-    <AlertDialogHeader>\r\n-      <AlertDialogTitle>Are you sure?</AlertDialogTitle>\r\n-      <AlertDialogDescription>\r\n-        This will permanently delete {itemToDelete?.title}. This action cannot be undone.\r\n-      </AlertDialogDescription>\r\n-    </AlertDialogHeader>\r\n-    <AlertDialogFooter>\r\n-      <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n-      <AlertDialogAction onClick={handleDelete}>Delete</AlertDialogAction>\r\n-    </AlertDialogFooter>\r\n-  </AlertDialogContent>\r\n-</AlertDialog> \n\\ No newline at end of file\n+} \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739964535415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,9 @@\n     setLessonContent(currentLesson?.content || '');\r\n     setIsEditing(false);\r\n   };\r\n \r\n-  const handleDelete = async () => {\r\n+  export const handleDelete = async () => {\r\n     if (!itemToDelete) return;\r\n \r\n     try {\r\n       switch (itemToDelete.type) {\r\n"
                },
                {
                    "date": 1739964547017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,369 @@\n+\"use client\";\r\n+\r\n+import React, { useState } from 'react';\r\n+import { Card } from '@/components/ui/card';\r\n+import { Button } from '@/components/ui/button';\r\n+import { Icon } from '@/components/ui/icons';\r\n+import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\n+import { ScrollArea } from '@/components/ui/scroll-area';\r\n+import { motion, AnimatePresence } from 'framer-motion';\r\n+import { useContentStore } from '@/lib/content/store';\r\n+import { useContentHierarchy } from './content-hierarchy';\r\n+import { RichTextEditor } from '@/components/ui/rich-text-editor';\r\n+import { contentService } from '@/lib/content/ContentService';\r\n+import { useToast } from '@/hooks/use-toast';\r\n+import type { Topic, Subtopic, Lesson } from '@/types/content';\r\n+import { CreateQuestionDialog } from './CreateQuestionDialog';\r\n+import { CreateActivityDialog } from '@/app/content-management/components/CreateActivityDialog';\r\n+import { useQueryClient } from '@tanstack/react-query';\r\n+import {\r\n+  AlertDialog,\r\n+  AlertDialogAction,\r\n+  AlertDialogCancel,\r\n+  AlertDialogContent,\r\n+  AlertDialogDescription,\r\n+  AlertDialogFooter,\r\n+  AlertDialogHeader,\r\n+  AlertDialogTitle,\r\n+  AlertDialogTrigger,\r\n+} from \"@/components/ui/alert-dialog\";\r\n+import { Trash } from 'lucide-react';\r\n+\r\n+interface ContentItem {\r\n+  id: string;\r\n+  title: string;\r\n+  description?: string;\r\n+}\r\n+\r\n+export function ContentDisplay() {\r\n+  const { \r\n+    selectedTopic,\r\n+    selectedSubtopic,\r\n+    selectedLesson,\r\n+  } = useContentStore();\r\n+  \r\n+  const { topics = [], subtopics = [], lessons = [], isLoading } = useContentHierarchy() as { \r\n+    topics: Topic[]; \r\n+    subtopics: Subtopic[]; \r\n+    lessons: Lesson[]; \r\n+    isLoading: boolean \r\n+  };\r\n+  const { toast } = useToast();\r\n+  const queryClient = useQueryClient();\r\n+\r\n+  const [isEditing, setIsEditing] = React.useState(false);\r\n+  const [lessonContent, setLessonContent] = React.useState('');\r\n+  const [isQuestionDialogOpen, setIsQuestionDialogOpen] = React.useState(false);\r\n+  const [isActivityDialogOpen, setIsActivityDialogOpen] = React.useState(false);\r\n+  const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\r\n+  const [itemToDelete, setItemToDelete] = React.useState<{\r\n+    id: string;\r\n+    type: 'topic' | 'subtopic' | 'lesson';\r\n+    title: string;\r\n+  } | null>(null);\r\n+  \r\n+  // Get current lesson\r\n+  const currentLesson = React.useMemo(() => \r\n+    lessons.find((l: Lesson) => l.id === selectedLesson),\r\n+    [lessons, selectedLesson]\r\n+  );\r\n+\r\n+  // Initialize lesson content when lesson changes\r\n+  React.useEffect(() => {\r\n+    if (currentLesson?.content) {\r\n+      setLessonContent(currentLesson.content);\r\n+    }\r\n+  }, [currentLesson]);\r\n+\r\n+  // Handle saving lesson content\r\n+  const handleSaveContent = async () => {\r\n+    if (!selectedLesson) return;\r\n+\r\n+    try {\r\n+      await contentService.updateLesson({\r\n+        id: selectedLesson,\r\n+        content: lessonContent,\r\n+      });\r\n+\r\n+      toast({\r\n+        title: \"Success\",\r\n+        description: \"Lesson content saved successfully\",\r\n+      });\r\n+\r\n+      setIsEditing(false);\r\n+      // Refetch lessons\r\n+      await contentService.fetchLessons(selectedSubtopic || '');\r\n+    } catch (error) {\r\n+      toast({\r\n+        title: \"Error\",\r\n+        description: error instanceof Error ? error.message : \"Failed to save lesson content\",\r\n+      });\r\n+    }\r\n+  };\r\n+\r\n+  // Handle canceling edit\r\n+  const handleCancelEdit = () => {\r\n+    setLessonContent(currentLesson?.content || '');\r\n+    setIsEditing(false);\r\n+  };\r\n+\r\n+  const handleDelete = async () => {\r\n+    if (!itemToDelete) return;\r\n+\r\n+    try {\r\n+      switch (itemToDelete.type) {\r\n+        case 'topic':\r\n+          await contentService.deleteTopic(itemToDelete.id);\r\n+          break;\r\n+        case 'subtopic':\r\n+          await contentService.deleteSubtopic(itemToDelete.id);\r\n+          break;\r\n+        case 'lesson':\r\n+          await contentService.deleteLesson(itemToDelete.id);\r\n+          break;\r\n+      }\r\n+      \r\n+      queryClient.invalidateQueries({ queryKey: ['topics'] });\r\n+      queryClient.invalidateQueries({ queryKey: ['subtopics'] });\r\n+      queryClient.invalidateQueries({ queryKey: ['lessons'] });\r\n+      \r\n+      toast({\r\n+        title: \"Success\",\r\n+        description: `${itemToDelete.title} has been deleted.`,\r\n+      });\r\n+    } catch (error) {\r\n+      toast({\r\n+        title: \"Error\",\r\n+        description: \"Failed to delete item.\",\r\n+      });\r\n+    } finally {\r\n+      setDeleteDialogOpen(false);\r\n+      setItemToDelete(null);\r\n+    }\r\n+  };\r\n+\r\n+  const handleLessonClick = (lessonId: string) => {\r\n+    useContentStore.setState({ selectedLesson: lessonId });\r\n+  };\r\n+\r\n+  // Render different content based on selection\r\n+  if (selectedLesson) {\r\n+    return (\r\n+      <>\r\n+        <Card className=\"p-6\">\r\n+          <div className=\"space-y-6\">\r\n+            {/* Lesson Title Section */}\r\n+            <div className=\"space-y-2\">\r\n+              <h2 className=\"text-2xl font-bold\">{currentLesson?.title || 'Untitled Lesson'}</h2>\r\n+              <Button \r\n+                variant=\"ghost\" \r\n+                size=\"sm\"\r\n+                onClick={() => setIsEditing(true)}\r\n+              >\r\n+                <Icon type=\"phosphor\" name=\"PENCIL_SIMPLE\" className=\"mr-2 h-4 w-4\" />\r\n+                Edit Lesson Content\r\n+              </Button>\r\n+            </div>\r\n+\r\n+            {/* Lesson Content Section */}\r\n+            {isEditing ? (\r\n+              <RichTextEditor\r\n+                value={lessonContent}\r\n+                onChange={setLessonContent}\r\n+                onSave={handleSaveContent}\r\n+                onCancel={handleCancelEdit}\r\n+              />\r\n+            ) : currentLesson?.content ? (\r\n+              <div \r\n+                className=\"prose max-w-none\" \r\n+                dangerouslySetInnerHTML={{ __html: currentLesson.content }} \r\n+              />\r\n+            ) : (\r\n+              <Button onClick={() => setIsEditing(true)}>\r\n+                <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n+                Add Lesson Content\r\n+              </Button>\r\n+            )}\r\n+\r\n+            {/* Questions and Activities Tabs */}\r\n+            <Tabs defaultValue=\"questions\" className=\"w-full\">\r\n+              <TabsList>\r\n+                <TabsTrigger value=\"questions\">Questions</TabsTrigger>\r\n+                <TabsTrigger value=\"activities\">Activities</TabsTrigger>\r\n+              </TabsList>\r\n+\r\n+              <TabsContent value=\"questions\" className=\"space-y-4\">\r\n+                <div className=\"flex justify-between items-center\">\r\n+                  <h3 className=\"text-lg font-medium\">Questions</h3>\r\n+                  <Button onClick={() => setIsQuestionDialogOpen(true)}>\r\n+                    <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n+                    Add Question\r\n+                  </Button>\r\n+                </div>\r\n+                {/* Questions list */}\r\n+                <CreateQuestionDialog \r\n+                  open={isQuestionDialogOpen}\r\n+                  onOpenChange={setIsQuestionDialogOpen}\r\n+                  lessonId={selectedLesson || ''}\r\n+                />\r\n+              </TabsContent>\r\n+\r\n+              <TabsContent value=\"activities\" className=\"space-y-4\">\r\n+                <div className=\"flex justify-between items-center\">\r\n+                  <h3 className=\"text-lg font-medium\">Activities</h3>\r\n+                  <Button onClick={() => setIsActivityDialogOpen(true)}>\r\n+                    <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n+                    Add Activity\r\n+                  </Button>\r\n+                </div>\r\n+                {/* Activities list */}\r\n+                <CreateActivityDialog \r\n+                  open={isActivityDialogOpen}\r\n+                  onOpenChange={setIsActivityDialogOpen}\r\n+                  lessonId={selectedLesson || ''}\r\n+                />\r\n+              </TabsContent>\r\n+            </Tabs>\r\n+          </div>\r\n+        </Card>\r\n+\r\n+        <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\r\n+          <AlertDialogContent>\r\n+            <AlertDialogHeader>\r\n+              <AlertDialogTitle>Are you sure?</AlertDialogTitle>\r\n+              <AlertDialogDescription>\r\n+                This will permanently delete {itemToDelete?.title}. This action cannot be undone.\r\n+              </AlertDialogDescription>\r\n+            </AlertDialogHeader>\r\n+            <AlertDialogFooter>\r\n+              <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n+              <AlertDialogAction onClick={handleDelete}>Delete</AlertDialogAction>\r\n+            </AlertDialogFooter>\r\n+          </AlertDialogContent>\r\n+        </AlertDialog>\r\n+      </>\r\n+    );\r\n+  }\r\n+\r\n+  if (selectedSubtopic) {\r\n+    return (\r\n+      <Card className=\"p-6\">\r\n+        <div className=\"space-y-4\">\r\n+          <div className=\"flex justify-between items-center\">\r\n+            <h2 className=\"text-2xl font-bold\">Lessons</h2>\r\n+            <Button>\r\n+              <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n+              Add Lesson\r\n+            </Button>\r\n+          </div>\r\n+          <ScrollArea className=\"h-[calc(100vh-16rem)]\">\r\n+            <AnimatePresence mode=\"wait\">\r\n+              {lessons?.map((lesson: Lesson) => (\r\n+                <motion.div\r\n+                  key={lesson.id}\r\n+                  initial={{ opacity: 0 }}\r\n+                  animate={{ opacity: 1 }}\r\n+                  exit={{ opacity: 0 }}\r\n+                  className=\"p-4 border rounded-lg mb-4 hover:bg-accent/50 transition-colors\"\r\n+                >\r\n+                  <h3 className=\"font-medium\">{lesson.title}</h3>\r\n+                  {lesson.description && (\r\n+                    <p className=\"text-sm text-muted-foreground mt-1\">{lesson.description}</p>\r\n+                  )}\r\n+                  <div onClick={() => handleLessonClick(lesson.id)}>\r\n+                    <h3 className=\"font-medium\">{lesson.title}</h3>\r\n+                    {lesson.description && (\r\n+                      <p className=\"text-sm text-muted-foreground mt-1\">{lesson.description}</p>\r\n+                    )}\r\n+                  </div>\r\n+                  <Button\r\n+                    variant=\"ghost\"\r\n+                    size=\"icon\"\r\n+                    onClick={(e: React.MouseEvent) => {\r\n+                      e.stopPropagation();\r\n+                      setItemToDelete({\r\n+                        id: lesson.id,\r\n+                        type: 'lesson',\r\n+                        title: lesson.title\r\n+                      });\r\n+                      setDeleteDialogOpen(true);\r\n+                    }}\r\n+                  >\r\n+                    <Trash className=\"h-4 w-4\" />\r\n+                  </Button>\r\n+                </motion.div>\r\n+              ))},\r\n+              \r\n+            </AnimatePresence>\r\n+          </ScrollArea>\r\n+        </div>\r\n+      </Card>\r\n+    );\r\n+  }\r\n+\r\n+  if (selectedTopic) {\r\n+    return (\r\n+      <Card className=\"p-6\">\r\n+        <div className=\"space-y-4\">\r\n+          <div className=\"flex justify-between items-center\">\r\n+            <h2 className=\"text-2xl font-bold\">Subtopics</h2>\r\n+            <Button>\r\n+              <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n+              Add Subtopic\r\n+            </Button>\r\n+          </div>\r\n+          <ScrollArea className=\"h-[calc(100vh-16rem)]\">\r\n+            <AnimatePresence mode=\"wait\">\r\n+              {subtopics?.map((subtopic: Subtopic) => (\r\n+                <motion.div\r\n+                  key={subtopic.id}\r\n+                  initial={{ opacity: 0 }}\r\n+                  animate={{ opacity: 1 }}\r\n+                  exit={{ opacity: 0 }}\r\n+                  className=\"p-4 border rounded-lg mb-4 hover:bg-accent/50 transition-colors\"\r\n+                >\r\n+                  <h3 className=\"font-medium\">{subtopic.title}</h3>\r\n+                  {subtopic.description && (\r\n+                    <p className=\"text-sm text-muted-foreground mt-1\">{subtopic.description}</p>\r\n+                  )}\r\n+                </motion.div>\r\n+              ))}\r\n+            </AnimatePresence>\r\n+          </ScrollArea>\r\n+        </div>\r\n+      </Card>\r\n+    );\r\n+  }\r\n+\r\n+  return (\r\n+    <Card className=\"p-6\">\r\n+      <div className=\"space-y-4\">\r\n+        <div className=\"flex justify-between items-center\">\r\n+          <h2 className=\"text-2xl font-bold\">Topics</h2>\r\n+          <Button>\r\n+            <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n+            Add Topic\r\n+          </Button>\r\n+        </div>\r\n+        <ScrollArea className=\"h-[calc(100vh-16rem)]\">\r\n+          <AnimatePresence mode=\"wait\">\r\n+            {topics?.map((topic: Topic) => (\r\n+              <motion.div\r\n+                key={topic.id}\r\n+                initial={{ opacity: 0 }}\r\n+                animate={{ opacity: 1 }}\r\n+                exit={{ opacity: 0 }}\r\n+                className=\"p-4 border rounded-lg mb-4 hover:bg-accent/50 transition-colors\"\r\n+              >\r\n+                <h3 className=\"font-medium\">{topic.title}</h3>\r\n+                {topic.description && (\r\n+                  <p className=\"text-sm text-muted-foreground mt-1\">{topic.description}</p>\r\n+                )}\r\n+              </motion.div>\r\n+            ))}\r\n+          </AnimatePresence>\r\n+        </ScrollArea>\r\n+      </div>\r\n+    </Card>\r\n+  );\r\n+} \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739964712423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,15 @@\n   AlertDialogTitle,\r\n   AlertDialogTrigger,\r\n } from \"@/components/ui/alert-dialog\";\r\n import { Trash } from 'lucide-react';\r\n+import {\r\n+  Select,\r\n+  SelectContent,\r\n+  SelectItem,\r\n+  SelectTrigger,\r\n+} from \"@/components/ui/select\";\r\n+import { Layers, BookOpen } from 'lucide-react';\r\n \r\n interface ContentItem {\r\n   id: string;\r\n   title: string;\r\n@@ -365,374 +372,5 @@\n         </ScrollArea>\r\n       </div>\r\n     </Card>\r\n   );\r\n-} \n-\"use client\";\r\n-\r\n-import React, { useState } from 'react';\r\n-import { Card } from '@/components/ui/card';\r\n-import { Button } from '@/components/ui/button';\r\n-import { Icon } from '@/components/ui/icons';\r\n-import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\n-import { ScrollArea } from '@/components/ui/scroll-area';\r\n-import { motion, AnimatePresence } from 'framer-motion';\r\n-import { useContentStore } from '@/lib/content/store';\r\n-import { useContentHierarchy } from './content-hierarchy';\r\n-import { RichTextEditor } from '@/components/ui/rich-text-editor';\r\n-import { contentService } from '@/lib/content/ContentService';\r\n-import { useToast } from '@/hooks/use-toast';\r\n-import type { Topic, Subtopic, Lesson } from '@/types/content';\r\n-import { CreateQuestionDialog } from './CreateQuestionDialog';\r\n-import { CreateActivityDialog } from '@/app/content-management/components/CreateActivityDialog';\r\n-import { useQueryClient } from '@tanstack/react-query';\r\n-import {\r\n-  AlertDialog,\r\n-  AlertDialogAction,\r\n-  AlertDialogCancel,\r\n-  AlertDialogContent,\r\n-  AlertDialogDescription,\r\n-  AlertDialogFooter,\r\n-  AlertDialogHeader,\r\n-  AlertDialogTitle,\r\n-  AlertDialogTrigger,\r\n-} from \"@/components/ui/alert-dialog\";\r\n-import { Trash } from 'lucide-react';\r\n-\r\n-interface ContentItem {\r\n-  id: string;\r\n-  title: string;\r\n-  description?: string;\r\n-}\r\n-\r\n-export function ContentDisplay() {\r\n-  const { \r\n-    selectedTopic,\r\n-    selectedSubtopic,\r\n-    selectedLesson,\r\n-  } = useContentStore();\r\n-  \r\n-  const { topics = [], subtopics = [], lessons = [], isLoading } = useContentHierarchy() as { \r\n-    topics: Topic[]; \r\n-    subtopics: Subtopic[]; \r\n-    lessons: Lesson[]; \r\n-    isLoading: boolean \r\n-  };\r\n-  const { toast } = useToast();\r\n-  const queryClient = useQueryClient();\r\n-\r\n-  const [isEditing, setIsEditing] = React.useState(false);\r\n-  const [lessonContent, setLessonContent] = React.useState('');\r\n-  const [isQuestionDialogOpen, setIsQuestionDialogOpen] = React.useState(false);\r\n-  const [isActivityDialogOpen, setIsActivityDialogOpen] = React.useState(false);\r\n-  const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\r\n-  const [itemToDelete, setItemToDelete] = React.useState<{\r\n-    id: string;\r\n-    type: 'topic' | 'subtopic' | 'lesson';\r\n-    title: string;\r\n-  } | null>(null);\r\n-  \r\n-  // Get current lesson\r\n-  const currentLesson = React.useMemo(() => \r\n-    lessons.find((l: Lesson) => l.id === selectedLesson),\r\n-    [lessons, selectedLesson]\r\n-  );\r\n-\r\n-  // Initialize lesson content when lesson changes\r\n-  React.useEffect(() => {\r\n-    if (currentLesson?.content) {\r\n-      setLessonContent(currentLesson.content);\r\n-    }\r\n-  }, [currentLesson]);\r\n-\r\n-  // Handle saving lesson content\r\n-  const handleSaveContent = async () => {\r\n-    if (!selectedLesson) return;\r\n-\r\n-    try {\r\n-      await contentService.updateLesson({\r\n-        id: selectedLesson,\r\n-        content: lessonContent,\r\n-      });\r\n-\r\n-      toast({\r\n-        title: \"Success\",\r\n-        description: \"Lesson content saved successfully\",\r\n-      });\r\n-\r\n-      setIsEditing(false);\r\n-      // Refetch lessons\r\n-      await contentService.fetchLessons(selectedSubtopic || '');\r\n-    } catch (error) {\r\n-      toast({\r\n-        title: \"Error\",\r\n-        description: error instanceof Error ? error.message : \"Failed to save lesson content\",\r\n-      });\r\n-    }\r\n-  };\r\n-\r\n-  // Handle canceling edit\r\n-  const handleCancelEdit = () => {\r\n-    setLessonContent(currentLesson?.content || '');\r\n-    setIsEditing(false);\r\n-  };\r\n-\r\n-  export const handleDelete = async () => {\r\n-    if (!itemToDelete) return;\r\n-\r\n-    try {\r\n-      switch (itemToDelete.type) {\r\n-        case 'topic':\r\n-          await contentService.deleteTopic(itemToDelete.id);\r\n-          break;\r\n-        case 'subtopic':\r\n-          await contentService.deleteSubtopic(itemToDelete.id);\r\n-          break;\r\n-        case 'lesson':\r\n-          await contentService.deleteLesson(itemToDelete.id);\r\n-          break;\r\n-      }\r\n-      \r\n-      queryClient.invalidateQueries({ queryKey: ['topics'] });\r\n-      queryClient.invalidateQueries({ queryKey: ['subtopics'] });\r\n-      queryClient.invalidateQueries({ queryKey: ['lessons'] });\r\n-      \r\n-      toast({\r\n-        title: \"Success\",\r\n-        description: `${itemToDelete.title} has been deleted.`,\r\n-      });\r\n-    } catch (error) {\r\n-      toast({\r\n-        title: \"Error\",\r\n-        description: \"Failed to delete item.\",\r\n-      });\r\n-    } finally {\r\n-      setDeleteDialogOpen(false);\r\n-      setItemToDelete(null);\r\n-    }\r\n-  };\r\n-\r\n-  const handleLessonClick = (lessonId: string) => {\r\n-    useContentStore.setState({ selectedLesson: lessonId });\r\n-  };\r\n-\r\n-  // Render different content based on selection\r\n-  if (selectedLesson) {\r\n-    return (\r\n-      <>\r\n-        <Card className=\"p-6\">\r\n-          <div className=\"space-y-6\">\r\n-            {/* Lesson Title Section */}\r\n-            <div className=\"space-y-2\">\r\n-              <h2 className=\"text-2xl font-bold\">{currentLesson?.title || 'Untitled Lesson'}</h2>\r\n-              <Button \r\n-                variant=\"ghost\" \r\n-                size=\"sm\"\r\n-                onClick={() => setIsEditing(true)}\r\n-              >\r\n-                <Icon type=\"phosphor\" name=\"PENCIL_SIMPLE\" className=\"mr-2 h-4 w-4\" />\r\n-                Edit Lesson Content\r\n-              </Button>\r\n-            </div>\r\n-\r\n-            {/* Lesson Content Section */}\r\n-            {isEditing ? (\r\n-              <RichTextEditor\r\n-                value={lessonContent}\r\n-                onChange={setLessonContent}\r\n-                onSave={handleSaveContent}\r\n-                onCancel={handleCancelEdit}\r\n-              />\r\n-            ) : currentLesson?.content ? (\r\n-              <div \r\n-                className=\"prose max-w-none\" \r\n-                dangerouslySetInnerHTML={{ __html: currentLesson.content }} \r\n-              />\r\n-            ) : (\r\n-              <Button onClick={() => setIsEditing(true)}>\r\n-                <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n-                Add Lesson Content\r\n-              </Button>\r\n-            )}\r\n-\r\n-            {/* Questions and Activities Tabs */}\r\n-            <Tabs defaultValue=\"questions\" className=\"w-full\">\r\n-              <TabsList>\r\n-                <TabsTrigger value=\"questions\">Questions</TabsTrigger>\r\n-                <TabsTrigger value=\"activities\">Activities</TabsTrigger>\r\n-              </TabsList>\r\n-\r\n-              <TabsContent value=\"questions\" className=\"space-y-4\">\r\n-                <div className=\"flex justify-between items-center\">\r\n-                  <h3 className=\"text-lg font-medium\">Questions</h3>\r\n-                  <Button onClick={() => setIsQuestionDialogOpen(true)}>\r\n-                    <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n-                    Add Question\r\n-                  </Button>\r\n-                </div>\r\n-                {/* Questions list */}\r\n-                <CreateQuestionDialog \r\n-                  open={isQuestionDialogOpen}\r\n-                  onOpenChange={setIsQuestionDialogOpen}\r\n-                  lessonId={selectedLesson || ''}\r\n-                />\r\n-              </TabsContent>\r\n-\r\n-              <TabsContent value=\"activities\" className=\"space-y-4\">\r\n-                <div className=\"flex justify-between items-center\">\r\n-                  <h3 className=\"text-lg font-medium\">Activities</h3>\r\n-                  <Button onClick={() => setIsActivityDialogOpen(true)}>\r\n-                    <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n-                    Add Activity\r\n-                  </Button>\r\n-                </div>\r\n-                {/* Activities list */}\r\n-                <CreateActivityDialog \r\n-                  open={isActivityDialogOpen}\r\n-                  onOpenChange={setIsActivityDialogOpen}\r\n-                  lessonId={selectedLesson || ''}\r\n-                />\r\n-              </TabsContent>\r\n-            </Tabs>\r\n-          </div>\r\n-        </Card>\r\n-\r\n-        <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\r\n-          <AlertDialogContent>\r\n-            <AlertDialogHeader>\r\n-              <AlertDialogTitle>Are you sure?</AlertDialogTitle>\r\n-              <AlertDialogDescription>\r\n-                This will permanently delete {itemToDelete?.title}. This action cannot be undone.\r\n-              </AlertDialogDescription>\r\n-            </AlertDialogHeader>\r\n-            <AlertDialogFooter>\r\n-              <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n-              <AlertDialogAction onClick={handleDelete}>Delete</AlertDialogAction>\r\n-            </AlertDialogFooter>\r\n-          </AlertDialogContent>\r\n-        </AlertDialog>\r\n-      </>\r\n-    );\r\n-  }\r\n-\r\n-  if (selectedSubtopic) {\r\n-    return (\r\n-      <Card className=\"p-6\">\r\n-        <div className=\"space-y-4\">\r\n-          <div className=\"flex justify-between items-center\">\r\n-            <h2 className=\"text-2xl font-bold\">Lessons</h2>\r\n-            <Button>\r\n-              <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n-              Add Lesson\r\n-            </Button>\r\n-          </div>\r\n-          <ScrollArea className=\"h-[calc(100vh-16rem)]\">\r\n-            <AnimatePresence mode=\"wait\">\r\n-              {lessons?.map((lesson: Lesson) => (\r\n-                <motion.div\r\n-                  key={lesson.id}\r\n-                  initial={{ opacity: 0 }}\r\n-                  animate={{ opacity: 1 }}\r\n-                  exit={{ opacity: 0 }}\r\n-                  className=\"p-4 border rounded-lg mb-4 hover:bg-accent/50 transition-colors\"\r\n-                >\r\n-                  <h3 className=\"font-medium\">{lesson.title}</h3>\r\n-                  {lesson.description && (\r\n-                    <p className=\"text-sm text-muted-foreground mt-1\">{lesson.description}</p>\r\n-                  )}\r\n-                  <div onClick={() => handleLessonClick(lesson.id)}>\r\n-                    <h3 className=\"font-medium\">{lesson.title}</h3>\r\n-                    {lesson.description && (\r\n-                      <p className=\"text-sm text-muted-foreground mt-1\">{lesson.description}</p>\r\n-                    )}\r\n-                  </div>\r\n-                  <Button\r\n-                    variant=\"ghost\"\r\n-                    size=\"icon\"\r\n-                    onClick={(e: React.MouseEvent) => {\r\n-                      e.stopPropagation();\r\n-                      setItemToDelete({\r\n-                        id: lesson.id,\r\n-                        type: 'lesson',\r\n-                        title: lesson.title\r\n-                      });\r\n-                      setDeleteDialogOpen(true);\r\n-                    }}\r\n-                  >\r\n-                    <Trash className=\"h-4 w-4\" />\r\n-                  </Button>\r\n-                </motion.div>\r\n-              ))},\r\n-              \r\n-            </AnimatePresence>\r\n-          </ScrollArea>\r\n-        </div>\r\n-      </Card>\r\n-    );\r\n-  }\r\n-\r\n-  if (selectedTopic) {\r\n-    return (\r\n-      <Card className=\"p-6\">\r\n-        <div className=\"space-y-4\">\r\n-          <div className=\"flex justify-between items-center\">\r\n-            <h2 className=\"text-2xl font-bold\">Subtopics</h2>\r\n-            <Button>\r\n-              <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n-              Add Subtopic\r\n-            </Button>\r\n-          </div>\r\n-          <ScrollArea className=\"h-[calc(100vh-16rem)]\">\r\n-            <AnimatePresence mode=\"wait\">\r\n-              {subtopics?.map((subtopic: Subtopic) => (\r\n-                <motion.div\r\n-                  key={subtopic.id}\r\n-                  initial={{ opacity: 0 }}\r\n-                  animate={{ opacity: 1 }}\r\n-                  exit={{ opacity: 0 }}\r\n-                  className=\"p-4 border rounded-lg mb-4 hover:bg-accent/50 transition-colors\"\r\n-                >\r\n-                  <h3 className=\"font-medium\">{subtopic.title}</h3>\r\n-                  {subtopic.description && (\r\n-                    <p className=\"text-sm text-muted-foreground mt-1\">{subtopic.description}</p>\r\n-                  )}\r\n-                </motion.div>\r\n-              ))}\r\n-            </AnimatePresence>\r\n-          </ScrollArea>\r\n-        </div>\r\n-      </Card>\r\n-    );\r\n-  }\r\n-\r\n-  return (\r\n-    <Card className=\"p-6\">\r\n-      <div className=\"space-y-4\">\r\n-        <div className=\"flex justify-between items-center\">\r\n-          <h2 className=\"text-2xl font-bold\">Topics</h2>\r\n-          <Button>\r\n-            <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n-            Add Topic\r\n-          </Button>\r\n-        </div>\r\n-        <ScrollArea className=\"h-[calc(100vh-16rem)]\">\r\n-          <AnimatePresence mode=\"wait\">\r\n-            {topics?.map((topic: Topic) => (\r\n-              <motion.div\r\n-                key={topic.id}\r\n-                initial={{ opacity: 0 }}\r\n-                animate={{ opacity: 1 }}\r\n-                exit={{ opacity: 0 }}\r\n-                className=\"p-4 border rounded-lg mb-4 hover:bg-accent/50 transition-colors\"\r\n-              >\r\n-                <h3 className=\"font-medium\">{topic.title}</h3>\r\n-                {topic.description && (\r\n-                  <p className=\"text-sm text-muted-foreground mt-1\">{topic.description}</p>\r\n-                )}\r\n-              </motion.div>\r\n-            ))}\r\n-          </AnimatePresence>\r\n-        </ScrollArea>\r\n-      </div>\r\n-    </Card>\r\n-  );\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739964725799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,376 +1,369 @@\n-\"use client\";\r\n-\r\n-import React, { useState } from 'react';\r\n-import { Card } from '@/components/ui/card';\r\n-import { Button } from '@/components/ui/button';\r\n-import { Icon } from '@/components/ui/icons';\r\n-import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\n-import { ScrollArea } from '@/components/ui/scroll-area';\r\n-import { motion, AnimatePresence } from 'framer-motion';\r\n-import { useContentStore } from '@/lib/content/store';\r\n-import { useContentHierarchy } from './content-hierarchy';\r\n-import { RichTextEditor } from '@/components/ui/rich-text-editor';\r\n-import { contentService } from '@/lib/content/ContentService';\r\n-import { useToast } from '@/hooks/use-toast';\r\n-import type { Topic, Subtopic, Lesson } from '@/types/content';\r\n-import { CreateQuestionDialog } from './CreateQuestionDialog';\r\n-import { CreateActivityDialog } from '@/app/content-management/components/CreateActivityDialog';\r\n-import { useQueryClient } from '@tanstack/react-query';\r\n-import {\r\n-  AlertDialog,\r\n-  AlertDialogAction,\r\n-  AlertDialogCancel,\r\n-  AlertDialogContent,\r\n-  AlertDialogDescription,\r\n-  AlertDialogFooter,\r\n-  AlertDialogHeader,\r\n-  AlertDialogTitle,\r\n-  AlertDialogTrigger,\r\n-} from \"@/components/ui/alert-dialog\";\r\n-import { Trash } from 'lucide-react';\r\n-import {\r\n-  Select,\r\n-  SelectContent,\r\n-  SelectItem,\r\n-  SelectTrigger,\r\n-} from \"@/components/ui/select\";\r\n-import { Layers, BookOpen } from 'lucide-react';\r\n-\r\n-interface ContentItem {\r\n-  id: string;\r\n-  title: string;\r\n-  description?: string;\r\n-}\r\n-\r\n-export function ContentDisplay() {\r\n-  const { \r\n-    selectedTopic,\r\n-    selectedSubtopic,\r\n-    selectedLesson,\r\n-  } = useContentStore();\r\n-  \r\n-  const { topics = [], subtopics = [], lessons = [], isLoading } = useContentHierarchy() as { \r\n-    topics: Topic[]; \r\n-    subtopics: Subtopic[]; \r\n-    lessons: Lesson[]; \r\n-    isLoading: boolean \r\n-  };\r\n-  const { toast } = useToast();\r\n-  const queryClient = useQueryClient();\r\n-\r\n-  const [isEditing, setIsEditing] = React.useState(false);\r\n-  const [lessonContent, setLessonContent] = React.useState('');\r\n-  const [isQuestionDialogOpen, setIsQuestionDialogOpen] = React.useState(false);\r\n-  const [isActivityDialogOpen, setIsActivityDialogOpen] = React.useState(false);\r\n-  const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\r\n-  const [itemToDelete, setItemToDelete] = React.useState<{\r\n-    id: string;\r\n-    type: 'topic' | 'subtopic' | 'lesson';\r\n-    title: string;\r\n-  } | null>(null);\r\n-  \r\n-  // Get current lesson\r\n-  const currentLesson = React.useMemo(() => \r\n-    lessons.find((l: Lesson) => l.id === selectedLesson),\r\n-    [lessons, selectedLesson]\r\n-  );\r\n-\r\n-  // Initialize lesson content when lesson changes\r\n-  React.useEffect(() => {\r\n-    if (currentLesson?.content) {\r\n-      setLessonContent(currentLesson.content);\r\n-    }\r\n-  }, [currentLesson]);\r\n-\r\n-  // Handle saving lesson content\r\n-  const handleSaveContent = async () => {\r\n-    if (!selectedLesson) return;\r\n-\r\n-    try {\r\n-      await contentService.updateLesson({\r\n-        id: selectedLesson,\r\n-        content: lessonContent,\r\n-      });\r\n-\r\n-      toast({\r\n-        title: \"Success\",\r\n-        description: \"Lesson content saved successfully\",\r\n-      });\r\n-\r\n-      setIsEditing(false);\r\n-      // Refetch lessons\r\n-      await contentService.fetchLessons(selectedSubtopic || '');\r\n-    } catch (error) {\r\n-      toast({\r\n-        title: \"Error\",\r\n-        description: error instanceof Error ? error.message : \"Failed to save lesson content\",\r\n-      });\r\n-    }\r\n-  };\r\n-\r\n-  // Handle canceling edit\r\n-  const handleCancelEdit = () => {\r\n-    setLessonContent(currentLesson?.content || '');\r\n-    setIsEditing(false);\r\n-  };\r\n-\r\n-  const handleDelete = async () => {\r\n-    if (!itemToDelete) return;\r\n-\r\n-    try {\r\n-      switch (itemToDelete.type) {\r\n-        case 'topic':\r\n-          await contentService.deleteTopic(itemToDelete.id);\r\n-          break;\r\n-        case 'subtopic':\r\n-          await contentService.deleteSubtopic(itemToDelete.id);\r\n-          break;\r\n-        case 'lesson':\r\n-          await contentService.deleteLesson(itemToDelete.id);\r\n-          break;\r\n-      }\r\n-      \r\n-      queryClient.invalidateQueries({ queryKey: ['topics'] });\r\n-      queryClient.invalidateQueries({ queryKey: ['subtopics'] });\r\n-      queryClient.invalidateQueries({ queryKey: ['lessons'] });\r\n-      \r\n-      toast({\r\n-        title: \"Success\",\r\n-        description: `${itemToDelete.title} has been deleted.`,\r\n-      });\r\n-    } catch (error) {\r\n-      toast({\r\n-        title: \"Error\",\r\n-        description: \"Failed to delete item.\",\r\n-      });\r\n-    } finally {\r\n-      setDeleteDialogOpen(false);\r\n-      setItemToDelete(null);\r\n-    }\r\n-  };\r\n-\r\n-  const handleLessonClick = (lessonId: string) => {\r\n-    useContentStore.setState({ selectedLesson: lessonId });\r\n-  };\r\n-\r\n-  // Render different content based on selection\r\n-  if (selectedLesson) {\r\n-    return (\r\n-      <>\r\n-        <Card className=\"p-6\">\r\n-          <div className=\"space-y-6\">\r\n-            {/* Lesson Title Section */}\r\n-            <div className=\"space-y-2\">\r\n-              <h2 className=\"text-2xl font-bold\">{currentLesson?.title || 'Untitled Lesson'}</h2>\r\n-              <Button \r\n-                variant=\"ghost\" \r\n-                size=\"sm\"\r\n-                onClick={() => setIsEditing(true)}\r\n-              >\r\n-                <Icon type=\"phosphor\" name=\"PENCIL_SIMPLE\" className=\"mr-2 h-4 w-4\" />\r\n-                Edit Lesson Content\r\n-              </Button>\r\n-            </div>\r\n-\r\n-            {/* Lesson Content Section */}\r\n-            {isEditing ? (\r\n-              <RichTextEditor\r\n-                value={lessonContent}\r\n-                onChange={setLessonContent}\r\n-                onSave={handleSaveContent}\r\n-                onCancel={handleCancelEdit}\r\n-              />\r\n-            ) : currentLesson?.content ? (\r\n-              <div \r\n-                className=\"prose max-w-none\" \r\n-                dangerouslySetInnerHTML={{ __html: currentLesson.content }} \r\n-              />\r\n-            ) : (\r\n-              <Button onClick={() => setIsEditing(true)}>\r\n-                <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n-                Add Lesson Content\r\n-              </Button>\r\n-            )}\r\n-\r\n-            {/* Questions and Activities Tabs */}\r\n-            <Tabs defaultValue=\"questions\" className=\"w-full\">\r\n-              <TabsList>\r\n-                <TabsTrigger value=\"questions\">Questions</TabsTrigger>\r\n-                <TabsTrigger value=\"activities\">Activities</TabsTrigger>\r\n-              </TabsList>\r\n-\r\n-              <TabsContent value=\"questions\" className=\"space-y-4\">\r\n-                <div className=\"flex justify-between items-center\">\r\n-                  <h3 className=\"text-lg font-medium\">Questions</h3>\r\n-                  <Button onClick={() => setIsQuestionDialogOpen(true)}>\r\n-                    <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n-                    Add Question\r\n-                  </Button>\r\n-                </div>\r\n-                {/* Questions list */}\r\n-                <CreateQuestionDialog \r\n-                  open={isQuestionDialogOpen}\r\n-                  onOpenChange={setIsQuestionDialogOpen}\r\n-                  lessonId={selectedLesson || ''}\r\n-                />\r\n-              </TabsContent>\r\n-\r\n-              <TabsContent value=\"activities\" className=\"space-y-4\">\r\n-                <div className=\"flex justify-between items-center\">\r\n-                  <h3 className=\"text-lg font-medium\">Activities</h3>\r\n-                  <Button onClick={() => setIsActivityDialogOpen(true)}>\r\n-                    <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n-                    Add Activity\r\n-                  </Button>\r\n-                </div>\r\n-                {/* Activities list */}\r\n-                <CreateActivityDialog \r\n-                  open={isActivityDialogOpen}\r\n-                  onOpenChange={setIsActivityDialogOpen}\r\n-                  lessonId={selectedLesson || ''}\r\n-                />\r\n-              </TabsContent>\r\n-            </Tabs>\r\n-          </div>\r\n-        </Card>\r\n-\r\n-        <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\r\n-          <AlertDialogContent>\r\n-            <AlertDialogHeader>\r\n-              <AlertDialogTitle>Are you sure?</AlertDialogTitle>\r\n-              <AlertDialogDescription>\r\n-                This will permanently delete {itemToDelete?.title}. This action cannot be undone.\r\n-              </AlertDialogDescription>\r\n-            </AlertDialogHeader>\r\n-            <AlertDialogFooter>\r\n-              <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n-              <AlertDialogAction onClick={handleDelete}>Delete</AlertDialogAction>\r\n-            </AlertDialogFooter>\r\n-          </AlertDialogContent>\r\n-        </AlertDialog>\r\n-      </>\r\n-    );\r\n-  }\r\n-\r\n-  if (selectedSubtopic) {\r\n-    return (\r\n-      <Card className=\"p-6\">\r\n-        <div className=\"space-y-4\">\r\n-          <div className=\"flex justify-between items-center\">\r\n-            <h2 className=\"text-2xl font-bold\">Lessons</h2>\r\n-            <Button>\r\n-              <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n-              Add Lesson\r\n-            </Button>\r\n-          </div>\r\n-          <ScrollArea className=\"h-[calc(100vh-16rem)]\">\r\n-            <AnimatePresence mode=\"wait\">\r\n-              {lessons?.map((lesson: Lesson) => (\r\n-                <motion.div\r\n-                  key={lesson.id}\r\n-                  initial={{ opacity: 0 }}\r\n-                  animate={{ opacity: 1 }}\r\n-                  exit={{ opacity: 0 }}\r\n-                  className=\"p-4 border rounded-lg mb-4 hover:bg-accent/50 transition-colors\"\r\n-                >\r\n-                  <h3 className=\"font-medium\">{lesson.title}</h3>\r\n-                  {lesson.description && (\r\n-                    <p className=\"text-sm text-muted-foreground mt-1\">{lesson.description}</p>\r\n-                  )}\r\n-                  <div onClick={() => handleLessonClick(lesson.id)}>\r\n-                    <h3 className=\"font-medium\">{lesson.title}</h3>\r\n-                    {lesson.description && (\r\n-                      <p className=\"text-sm text-muted-foreground mt-1\">{lesson.description}</p>\r\n-                    )}\r\n-                  </div>\r\n-                  <Button\r\n-                    variant=\"ghost\"\r\n-                    size=\"icon\"\r\n-                    onClick={(e: React.MouseEvent) => {\r\n-                      e.stopPropagation();\r\n-                      setItemToDelete({\r\n-                        id: lesson.id,\r\n-                        type: 'lesson',\r\n-                        title: lesson.title\r\n-                      });\r\n-                      setDeleteDialogOpen(true);\r\n-                    }}\r\n-                  >\r\n-                    <Trash className=\"h-4 w-4\" />\r\n-                  </Button>\r\n-                </motion.div>\r\n-              ))},\r\n-              \r\n-            </AnimatePresence>\r\n-          </ScrollArea>\r\n-        </div>\r\n-      </Card>\r\n-    );\r\n-  }\r\n-\r\n-  if (selectedTopic) {\r\n-    return (\r\n-      <Card className=\"p-6\">\r\n-        <div className=\"space-y-4\">\r\n-          <div className=\"flex justify-between items-center\">\r\n-            <h2 className=\"text-2xl font-bold\">Subtopics</h2>\r\n-            <Button>\r\n-              <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n-              Add Subtopic\r\n-            </Button>\r\n-          </div>\r\n-          <ScrollArea className=\"h-[calc(100vh-16rem)]\">\r\n-            <AnimatePresence mode=\"wait\">\r\n-              {subtopics?.map((subtopic: Subtopic) => (\r\n-                <motion.div\r\n-                  key={subtopic.id}\r\n-                  initial={{ opacity: 0 }}\r\n-                  animate={{ opacity: 1 }}\r\n-                  exit={{ opacity: 0 }}\r\n-                  className=\"p-4 border rounded-lg mb-4 hover:bg-accent/50 transition-colors\"\r\n-                >\r\n-                  <h3 className=\"font-medium\">{subtopic.title}</h3>\r\n-                  {subtopic.description && (\r\n-                    <p className=\"text-sm text-muted-foreground mt-1\">{subtopic.description}</p>\r\n-                  )}\r\n-                </motion.div>\r\n-              ))}\r\n-            </AnimatePresence>\r\n-          </ScrollArea>\r\n-        </div>\r\n-      </Card>\r\n-    );\r\n-  }\r\n-\r\n-  return (\r\n-    <Card className=\"p-6\">\r\n-      <div className=\"space-y-4\">\r\n-        <div className=\"flex justify-between items-center\">\r\n-          <h2 className=\"text-2xl font-bold\">Topics</h2>\r\n-          <Button>\r\n-            <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n-            Add Topic\r\n-          </Button>\r\n-        </div>\r\n-        <ScrollArea className=\"h-[calc(100vh-16rem)]\">\r\n-          <AnimatePresence mode=\"wait\">\r\n-            {topics?.map((topic: Topic) => (\r\n-              <motion.div\r\n-                key={topic.id}\r\n-                initial={{ opacity: 0 }}\r\n-                animate={{ opacity: 1 }}\r\n-                exit={{ opacity: 0 }}\r\n-                className=\"p-4 border rounded-lg mb-4 hover:bg-accent/50 transition-colors\"\r\n-              >\r\n-                <h3 className=\"font-medium\">{topic.title}</h3>\r\n-                {topic.description && (\r\n-                  <p className=\"text-sm text-muted-foreground mt-1\">{topic.description}</p>\r\n-                )}\r\n-              </motion.div>\r\n-            ))}\r\n-          </AnimatePresence>\r\n-        </ScrollArea>\r\n-      </div>\r\n-    </Card>\r\n-  );\r\n+\"use client\";\n+\n+import React, { useState } from 'react';\n+import { Card } from '@/components/ui/card';\n+import { Button } from '@/components/ui/button';\n+import { Icon } from '@/components/ui/icons';\n+import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\n+import { ScrollArea } from '@/components/ui/scroll-area';\n+import { motion, AnimatePresence } from 'framer-motion';\n+import { useContentStore } from '@/lib/content/store';\n+import { useContentHierarchy } from './content-hierarchy';\n+import { RichTextEditor } from '@/components/ui/rich-text-editor';\n+import { contentService } from '@/lib/content/ContentService';\n+import { useToast } from '@/hooks/use-toast';\n+import type { Topic, Subtopic, Lesson } from '@/types/content';\n+import { CreateQuestionDialog } from './CreateQuestionDialog';\n+import { CreateActivityDialog } from '@/app/content-management/components/CreateActivityDialog';\n+import { useQueryClient } from '@tanstack/react-query';\n+import {\n+  AlertDialog,\n+  AlertDialogAction,\n+  AlertDialogCancel,\n+  AlertDialogContent,\n+  AlertDialogDescription,\n+  AlertDialogFooter,\n+  AlertDialogHeader,\n+  AlertDialogTitle,\n+  AlertDialogTrigger,\n+} from \"@/components/ui/alert-dialog\";\n+import { Trash } from 'lucide-react';\n+\n+interface ContentItem {\n+  id: string;\n+  title: string;\n+  description?: string;\n+}\n+\n+export function ContentDisplay() {\n+  const { \n+    selectedTopic,\n+    selectedSubtopic,\n+    selectedLesson,\n+  } = useContentStore();\n+  \n+  const { topics = [], subtopics = [], lessons = [], isLoading } = useContentHierarchy() as { \n+    topics: Topic[]; \n+    subtopics: Subtopic[]; \n+    lessons: Lesson[]; \n+    isLoading: boolean \n+  };\n+  const { toast } = useToast();\n+  const queryClient = useQueryClient();\n+\n+  const [isEditing, setIsEditing] = React.useState(false);\n+  const [lessonContent, setLessonContent] = React.useState('');\n+  const [isQuestionDialogOpen, setIsQuestionDialogOpen] = React.useState(false);\n+  const [isActivityDialogOpen, setIsActivityDialogOpen] = React.useState(false);\n+  const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\n+  const [itemToDelete, setItemToDelete] = React.useState<{\n+    id: string;\n+    type: 'topic' | 'subtopic' | 'lesson';\n+    title: string;\n+  } | null>(null);\n+  \n+  // Get current lesson\n+  const currentLesson = React.useMemo(() => \n+    lessons.find((l: Lesson) => l.id === selectedLesson),\n+    [lessons, selectedLesson]\n+  );\n+\n+  // Initialize lesson content when lesson changes\n+  React.useEffect(() => {\n+    if (currentLesson?.content) {\n+      setLessonContent(currentLesson.content);\n+    }\n+  }, [currentLesson]);\n+\n+  // Handle saving lesson content\n+  const handleSaveContent = async () => {\n+    if (!selectedLesson) return;\n+\n+    try {\n+      await contentService.updateLesson({\n+        id: selectedLesson,\n+        content: lessonContent,\n+      });\n+\n+      toast({\n+        title: \"Success\",\n+        description: \"Lesson content saved successfully\",\n+      });\n+\n+      setIsEditing(false);\n+      // Refetch lessons\n+      await contentService.fetchLessons(selectedSubtopic || '');\n+    } catch (error) {\n+      toast({\n+        title: \"Error\",\n+        description: error instanceof Error ? error.message : \"Failed to save lesson content\",\n+      });\n+    }\n+  };\n+\n+  // Handle canceling edit\n+  const handleCancelEdit = () => {\n+    setLessonContent(currentLesson?.content || '');\n+    setIsEditing(false);\n+  };\n+\n+  const handleDelete = async () => {\n+    if (!itemToDelete) return;\n+\n+    try {\n+      switch (itemToDelete.type) {\n+        case 'topic':\n+          await contentService.deleteTopic(itemToDelete.id);\n+          break;\n+        case 'subtopic':\n+          await contentService.deleteSubtopic(itemToDelete.id);\n+          break;\n+        case 'lesson':\n+          await contentService.deleteLesson(itemToDelete.id);\n+          break;\n+      }\n+      \n+      queryClient.invalidateQueries({ queryKey: ['topics'] });\n+      queryClient.invalidateQueries({ queryKey: ['subtopics'] });\n+      queryClient.invalidateQueries({ queryKey: ['lessons'] });\n+      \n+      toast({\n+        title: \"Success\",\n+        description: `${itemToDelete.title} has been deleted.`,\n+      });\n+    } catch (error) {\n+      toast({\n+        title: \"Error\",\n+        description: \"Failed to delete item.\",\n+      });\n+    } finally {\n+      setDeleteDialogOpen(false);\n+      setItemToDelete(null);\n+    }\n+  };\n+\n+  const handleLessonClick = (lessonId: string) => {\n+    useContentStore.setState({ selectedLesson: lessonId });\n+  };\n+\n+  // Render different content based on selection\n+  if (selectedLesson) {\n+    return (\n+      <>\n+        <Card className=\"p-6\">\n+          <div className=\"space-y-6\">\n+            {/* Lesson Title Section */}\n+            <div className=\"space-y-2\">\n+              <h2 className=\"text-2xl font-bold\">{currentLesson?.title || 'Untitled Lesson'}</h2>\n+              <Button \n+                variant=\"ghost\" \n+                size=\"sm\"\n+                onClick={() => setIsEditing(true)}\n+              >\n+                <Icon type=\"phosphor\" name=\"PENCIL_SIMPLE\" className=\"mr-2 h-4 w-4\" />\n+                Edit Lesson Content\n+              </Button>\n+            </div>\n+\n+            {/* Lesson Content Section */}\n+            {isEditing ? (\n+              <RichTextEditor\n+                value={lessonContent}\n+                onChange={setLessonContent}\n+                onSave={handleSaveContent}\n+                onCancel={handleCancelEdit}\n+              />\n+            ) : currentLesson?.content ? (\n+              <div \n+                className=\"prose max-w-none\" \n+                dangerouslySetInnerHTML={{ __html: currentLesson.content }} \n+              />\n+            ) : (\n+              <Button onClick={() => setIsEditing(true)}>\n+                <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\n+                Add Lesson Content\n+              </Button>\n+            )}\n+\n+            {/* Questions and Activities Tabs */}\n+            <Tabs defaultValue=\"questions\" className=\"w-full\">\n+              <TabsList>\n+                <TabsTrigger value=\"questions\">Questions</TabsTrigger>\n+                <TabsTrigger value=\"activities\">Activities</TabsTrigger>\n+              </TabsList>\n+\n+              <TabsContent value=\"questions\" className=\"space-y-4\">\n+                <div className=\"flex justify-between items-center\">\n+                  <h3 className=\"text-lg font-medium\">Questions</h3>\n+                  <Button onClick={() => setIsQuestionDialogOpen(true)}>\n+                    <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\n+                    Add Question\n+                  </Button>\n+                </div>\n+                {/* Questions list */}\n+                <CreateQuestionDialog \n+                  open={isQuestionDialogOpen}\n+                  onOpenChange={setIsQuestionDialogOpen}\n+                  lessonId={selectedLesson || ''}\n+                />\n+              </TabsContent>\n+\n+              <TabsContent value=\"activities\" className=\"space-y-4\">\n+                <div className=\"flex justify-between items-center\">\n+                  <h3 className=\"text-lg font-medium\">Activities</h3>\n+                  <Button onClick={() => setIsActivityDialogOpen(true)}>\n+                    <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\n+                    Add Activity\n+                  </Button>\n+                </div>\n+                {/* Activities list */}\n+                <CreateActivityDialog \n+                  open={isActivityDialogOpen}\n+                  onOpenChange={setIsActivityDialogOpen}\n+                  lessonId={selectedLesson || ''}\n+                />\n+              </TabsContent>\n+            </Tabs>\n+          </div>\n+        </Card>\n+\n+        <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n+          <AlertDialogContent>\n+            <AlertDialogHeader>\n+              <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n+              <AlertDialogDescription>\n+                This will permanently delete {itemToDelete?.title}. This action cannot be undone.\n+              </AlertDialogDescription>\n+            </AlertDialogHeader>\n+            <AlertDialogFooter>\n+              <AlertDialogCancel>Cancel</AlertDialogCancel>\n+              <AlertDialogAction onClick={handleDelete}>Delete</AlertDialogAction>\n+            </AlertDialogFooter>\n+          </AlertDialogContent>\n+        </AlertDialog>\n+      </>\n+    );\n+  }\n+\n+  if (selectedSubtopic) {\n+    return (\n+      <Card className=\"p-6\">\n+        <div className=\"space-y-4\">\n+          <div className=\"flex justify-between items-center\">\n+            <h2 className=\"text-2xl font-bold\">Lessons</h2>\n+            <Button>\n+              <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\n+              Add Lesson\n+            </Button>\n+          </div>\n+          <ScrollArea className=\"h-[calc(100vh-16rem)]\">\n+            <AnimatePresence mode=\"wait\">\n+              {lessons?.map((lesson: Lesson) => (\n+                <motion.div\n+                  key={lesson.id}\n+                  initial={{ opacity: 0 }}\n+                  animate={{ opacity: 1 }}\n+                  exit={{ opacity: 0 }}\n+                  className=\"p-4 border rounded-lg mb-4 hover:bg-accent/50 transition-colors\"\n+                >\n+                  <h3 className=\"font-medium\">{lesson.title}</h3>\n+                  {lesson.description && (\n+                    <p className=\"text-sm text-muted-foreground mt-1\">{lesson.description}</p>\n+                  )}\n+                  <div onClick={() => handleLessonClick(lesson.id)}>\n+                    <h3 className=\"font-medium\">{lesson.title}</h3>\n+                    {lesson.description && (\n+                      <p className=\"text-sm text-muted-foreground mt-1\">{lesson.description}</p>\n+                    )}\n+                  </div>\n+                  <Button\n+                    variant=\"ghost\"\n+                    size=\"icon\"\n+                    onClick={(e: React.MouseEvent) => {\n+                      e.stopPropagation();\n+                      setItemToDelete({\n+                        id: lesson.id,\n+                        type: 'lesson',\n+                        title: lesson.title\n+                      });\n+                      setDeleteDialogOpen(true);\n+                    }}\n+                  >\n+                    <Trash className=\"h-4 w-4\" />\n+                  </Button>\n+                </motion.div>\n+              ))},\n+              \n+            </AnimatePresence>\n+          </ScrollArea>\n+        </div>\n+      </Card>\n+    );\n+  }\n+\n+  if (selectedTopic) {\n+    return (\n+      <Card className=\"p-6\">\n+        <div className=\"space-y-4\">\n+          <div className=\"flex justify-between items-center\">\n+            <h2 className=\"text-2xl font-bold\">Subtopics</h2>\n+            <Button>\n+              <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\n+              Add Subtopic\n+            </Button>\n+          </div>\n+          <ScrollArea className=\"h-[calc(100vh-16rem)]\">\n+            <AnimatePresence mode=\"wait\">\n+              {subtopics?.map((subtopic: Subtopic) => (\n+                <motion.div\n+                  key={subtopic.id}\n+                  initial={{ opacity: 0 }}\n+                  animate={{ opacity: 1 }}\n+                  exit={{ opacity: 0 }}\n+                  className=\"p-4 border rounded-lg mb-4 hover:bg-accent/50 transition-colors\"\n+                >\n+                  <h3 className=\"font-medium\">{subtopic.title}</h3>\n+                  {subtopic.description && (\n+                    <p className=\"text-sm text-muted-foreground mt-1\">{subtopic.description}</p>\n+                  )}\n+                </motion.div>\n+              ))}\n+            </AnimatePresence>\n+          </ScrollArea>\n+        </div>\n+      </Card>\n+    );\n+  }\n+\n+  return (\n+    <Card className=\"p-6\">\n+      <div className=\"space-y-4\">\n+        <div className=\"flex justify-between items-center\">\n+          <h2 className=\"text-2xl font-bold\">Topics</h2>\n+          <Button>\n+            <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\n+            Add Topic\n+          </Button>\n+        </div>\n+        <ScrollArea className=\"h-[calc(100vh-16rem)]\">\n+          <AnimatePresence mode=\"wait\">\n+            {topics?.map((topic: Topic) => (\n+              <motion.div\n+                key={topic.id}\n+                initial={{ opacity: 0 }}\n+                animate={{ opacity: 1 }}\n+                exit={{ opacity: 0 }}\n+                className=\"p-4 border rounded-lg mb-4 hover:bg-accent/50 transition-colors\"\n+              >\n+                <h3 className=\"font-medium\">{topic.title}</h3>\n+                {topic.description && (\n+                  <p className=\"text-sm text-muted-foreground mt-1\">{topic.description}</p>\n+                )}\n+              </motion.div>\n+            ))}\n+          </AnimatePresence>\n+        </ScrollArea>\n+      </div>\n+    </Card>\n+  );\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739966853320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,19 +15,9 @@\n import type { Topic, Subtopic, Lesson } from '@/types/content';\n import { CreateQuestionDialog } from './CreateQuestionDialog';\n import { CreateActivityDialog } from '@/app/content-management/components/CreateActivityDialog';\n import { useQueryClient } from '@tanstack/react-query';\n-import {\n-  AlertDialog,\n-  AlertDialogAction,\n-  AlertDialogCancel,\n-  AlertDialogContent,\n-  AlertDialogDescription,\n-  AlertDialogFooter,\n-  AlertDialogHeader,\n-  AlertDialogTitle,\n-  AlertDialogTrigger,\n-} from \"@/components/ui/alert-dialog\";\n+import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\n import { Trash } from 'lucide-react';\n \n interface ContentItem {\n   id: string;\n@@ -55,9 +45,9 @@\n   const [lessonContent, setLessonContent] = React.useState('');\n   const [isQuestionDialogOpen, setIsQuestionDialogOpen] = React.useState(false);\n   const [isActivityDialogOpen, setIsActivityDialogOpen] = React.useState(false);\n   const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\n-  const [itemToDelete, setItemToDelete] = React.useState<{\n+  const [itemToDelete, setItemToDelete] = useState<{\n     id: string;\n     type: 'topic' | 'subtopic' | 'lesson';\n     title: string;\n   } | null>(null);\n@@ -148,101 +138,84 @@\n \n   // Render different content based on selection\n   if (selectedLesson) {\n     return (\n-      <>\n-        <Card className=\"p-6\">\n-          <div className=\"space-y-6\">\n-            {/* Lesson Title Section */}\n-            <div className=\"space-y-2\">\n-              <h2 className=\"text-2xl font-bold\">{currentLesson?.title || 'Untitled Lesson'}</h2>\n-              <Button \n-                variant=\"ghost\" \n-                size=\"sm\"\n-                onClick={() => setIsEditing(true)}\n-              >\n-                <Icon type=\"phosphor\" name=\"PENCIL_SIMPLE\" className=\"mr-2 h-4 w-4\" />\n-                Edit Lesson Content\n-              </Button>\n-            </div>\n+      <Card className=\"p-6\">\n+        <div className=\"space-y-6\">\n+          {/* Lesson Title Section */}\n+          <div className=\"space-y-2\">\n+            <h2 className=\"text-2xl font-bold\">{currentLesson?.title || 'Untitled Lesson'}</h2>\n+            <Button \n+              variant=\"ghost\" \n+              size=\"sm\"\n+              onClick={() => setIsEditing(true)}\n+            >\n+              <Icon type=\"phosphor\" name=\"PENCIL_SIMPLE\" className=\"mr-2 h-4 w-4\" />\n+              Edit Lesson Content\n+            </Button>\n+          </div>\n \n-            {/* Lesson Content Section */}\n-            {isEditing ? (\n-              <RichTextEditor\n-                value={lessonContent}\n-                onChange={setLessonContent}\n-                onSave={handleSaveContent}\n-                onCancel={handleCancelEdit}\n-              />\n-            ) : currentLesson?.content ? (\n-              <div \n-                className=\"prose max-w-none\" \n-                dangerouslySetInnerHTML={{ __html: currentLesson.content }} \n-              />\n-            ) : (\n-              <Button onClick={() => setIsEditing(true)}>\n-                <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\n-                Add Lesson Content\n-              </Button>\n-            )}\n+          {/* Lesson Content Section */}\n+          {isEditing ? (\n+            <RichTextEditor\n+              value={lessonContent}\n+              onChange={setLessonContent}\n+              onSave={handleSaveContent}\n+              onCancel={handleCancelEdit}\n+            />\n+          ) : currentLesson?.content ? (\n+            <div \n+              className=\"prose max-w-none\" \n+              dangerouslySetInnerHTML={{ __html: currentLesson.content }} \n+            />\n+          ) : (\n+            <Button onClick={() => setIsEditing(true)}>\n+              <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\n+              Add Lesson Content\n+            </Button>\n+          )}\n \n-            {/* Questions and Activities Tabs */}\n-            <Tabs defaultValue=\"questions\" className=\"w-full\">\n-              <TabsList>\n-                <TabsTrigger value=\"questions\">Questions</TabsTrigger>\n-                <TabsTrigger value=\"activities\">Activities</TabsTrigger>\n-              </TabsList>\n+          {/* Questions and Activities Tabs */}\n+          <Tabs defaultValue=\"questions\" className=\"w-full\">\n+            <TabsList>\n+              <TabsTrigger value=\"questions\">Questions</TabsTrigger>\n+              <TabsTrigger value=\"activities\">Activities</TabsTrigger>\n+            </TabsList>\n \n-              <TabsContent value=\"questions\" className=\"space-y-4\">\n-                <div className=\"flex justify-between items-center\">\n-                  <h3 className=\"text-lg font-medium\">Questions</h3>\n-                  <Button onClick={() => setIsQuestionDialogOpen(true)}>\n-                    <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\n-                    Add Question\n-                  </Button>\n-                </div>\n-                {/* Questions list */}\n-                <CreateQuestionDialog \n-                  open={isQuestionDialogOpen}\n-                  onOpenChange={setIsQuestionDialogOpen}\n-                  lessonId={selectedLesson || ''}\n-                />\n-              </TabsContent>\n+            <TabsContent value=\"questions\" className=\"space-y-4\">\n+              <div className=\"flex justify-between items-center\">\n+                <h3 className=\"text-lg font-medium\">Questions</h3>\n+                <Button onClick={() => setIsQuestionDialogOpen(true)}>\n+                  <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\n+                  Add Question\n+                </Button>\n+              </div>\n+              {/* Questions list */}\n+              <CreateQuestionDialog \n+                open={isQuestionDialogOpen}\n+                onOpenChange={setIsQuestionDialogOpen}\n+                lessonId={selectedLesson || ''}\n+              />\n+            </TabsContent>\n \n-              <TabsContent value=\"activities\" className=\"space-y-4\">\n-                <div className=\"flex justify-between items-center\">\n-                  <h3 className=\"text-lg font-medium\">Activities</h3>\n-                  <Button onClick={() => setIsActivityDialogOpen(true)}>\n-                    <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\n-                    Add Activity\n-                  </Button>\n-                </div>\n-                {/* Activities list */}\n-                <CreateActivityDialog \n-                  open={isActivityDialogOpen}\n-                  onOpenChange={setIsActivityDialogOpen}\n-                  lessonId={selectedLesson || ''}\n-                />\n-              </TabsContent>\n-            </Tabs>\n-          </div>\n-        </Card>\n-\n-        <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n-          <AlertDialogContent>\n-            <AlertDialogHeader>\n-              <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n-              <AlertDialogDescription>\n-                This will permanently delete {itemToDelete?.title}. This action cannot be undone.\n-              </AlertDialogDescription>\n-            </AlertDialogHeader>\n-            <AlertDialogFooter>\n-              <AlertDialogCancel>Cancel</AlertDialogCancel>\n-              <AlertDialogAction onClick={handleDelete}>Delete</AlertDialogAction>\n-            </AlertDialogFooter>\n-          </AlertDialogContent>\n-        </AlertDialog>\n-      </>\n+            <TabsContent value=\"activities\" className=\"space-y-4\">\n+              <div className=\"flex justify-between items-center\">\n+                <h3 className=\"text-lg font-medium\">Activities</h3>\n+                <Button onClick={() => setIsActivityDialogOpen(true)}>\n+                  <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\n+                  Add Activity\n+                </Button>\n+              </div>\n+              {/* Activities list */}\n+              <CreateActivityDialog \n+                open={isActivityDialogOpen}\n+                onOpenChange={setIsActivityDialogOpen}\n+                lessonId={selectedLesson || ''}\n+              />\n+            </TabsContent>\n+          </Tabs>\n+        </div>\n+      </Card>\n     );\n   }\n \n   if (selectedSubtopic) {\n"
                },
                {
                    "date": 1740946345053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,342 +1,342 @@\n-\"use client\";\n-\n-import React, { useState } from 'react';\n-import { Card } from '@/components/ui/card';\n-import { Button } from '@/components/ui/button';\n-import { Icon } from '@/components/ui/icons';\n-import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\n-import { ScrollArea } from '@/components/ui/scroll-area';\n-import { motion, AnimatePresence } from 'framer-motion';\n-import { useContentStore } from '@/lib/content/store';\n-import { useContentHierarchy } from './content-hierarchy';\n-import { RichTextEditor } from '@/components/ui/rich-text-editor';\n-import { contentService } from '@/lib/content/ContentService';\n-import { useToast } from '@/hooks/use-toast';\n-import type { Topic, Subtopic, Lesson } from '@/types/content';\n-import { CreateQuestionDialog } from './CreateQuestionDialog';\n-import { CreateActivityDialog } from '@/app/content-management/components/CreateActivityDialog';\n-import { useQueryClient } from '@tanstack/react-query';\n-import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\n-import { Trash } from 'lucide-react';\n-\n-interface ContentItem {\n-  id: string;\n-  title: string;\n-  description?: string;\n-}\n-\n-export function ContentDisplay() {\n-  const { \n-    selectedTopic,\n-    selectedSubtopic,\n-    selectedLesson,\n-  } = useContentStore();\n-  \n-  const { topics = [], subtopics = [], lessons = [], isLoading } = useContentHierarchy() as { \n-    topics: Topic[]; \n-    subtopics: Subtopic[]; \n-    lessons: Lesson[]; \n-    isLoading: boolean \n-  };\n-  const { toast } = useToast();\n-  const queryClient = useQueryClient();\n-\n-  const [isEditing, setIsEditing] = React.useState(false);\n-  const [lessonContent, setLessonContent] = React.useState('');\n-  const [isQuestionDialogOpen, setIsQuestionDialogOpen] = React.useState(false);\n-  const [isActivityDialogOpen, setIsActivityDialogOpen] = React.useState(false);\n-  const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\n-  const [itemToDelete, setItemToDelete] = useState<{\n-    id: string;\n-    type: 'topic' | 'subtopic' | 'lesson';\n-    title: string;\n-  } | null>(null);\n-  \n-  // Get current lesson\n-  const currentLesson = React.useMemo(() => \n-    lessons.find((l: Lesson) => l.id === selectedLesson),\n-    [lessons, selectedLesson]\n-  );\n-\n-  // Initialize lesson content when lesson changes\n-  React.useEffect(() => {\n-    if (currentLesson?.content) {\n-      setLessonContent(currentLesson.content);\n-    }\n-  }, [currentLesson]);\n-\n-  // Handle saving lesson content\n-  const handleSaveContent = async () => {\n-    if (!selectedLesson) return;\n-\n-    try {\n-      await contentService.updateLesson({\n-        id: selectedLesson,\n-        content: lessonContent,\n-      });\n-\n-      toast({\n-        title: \"Success\",\n-        description: \"Lesson content saved successfully\",\n-      });\n-\n-      setIsEditing(false);\n-      // Refetch lessons\n-      await contentService.fetchLessons(selectedSubtopic || '');\n-    } catch (error) {\n-      toast({\n-        title: \"Error\",\n-        description: error instanceof Error ? error.message : \"Failed to save lesson content\",\n-      });\n-    }\n-  };\n-\n-  // Handle canceling edit\n-  const handleCancelEdit = () => {\n-    setLessonContent(currentLesson?.content || '');\n-    setIsEditing(false);\n-  };\n-\n-  const handleDelete = async () => {\n-    if (!itemToDelete) return;\n-\n-    try {\n-      switch (itemToDelete.type) {\n-        case 'topic':\n-          await contentService.deleteTopic(itemToDelete.id);\n-          break;\n-        case 'subtopic':\n-          await contentService.deleteSubtopic(itemToDelete.id);\n-          break;\n-        case 'lesson':\n-          await contentService.deleteLesson(itemToDelete.id);\n-          break;\n-      }\n-      \n-      queryClient.invalidateQueries({ queryKey: ['topics'] });\n-      queryClient.invalidateQueries({ queryKey: ['subtopics'] });\n-      queryClient.invalidateQueries({ queryKey: ['lessons'] });\n-      \n-      toast({\n-        title: \"Success\",\n-        description: `${itemToDelete.title} has been deleted.`,\n-      });\n-    } catch (error) {\n-      toast({\n-        title: \"Error\",\n-        description: \"Failed to delete item.\",\n-      });\n-    } finally {\n-      setDeleteDialogOpen(false);\n-      setItemToDelete(null);\n-    }\n-  };\n-\n-  const handleLessonClick = (lessonId: string) => {\n-    useContentStore.setState({ selectedLesson: lessonId });\n-  };\n-\n-  // Render different content based on selection\n-  if (selectedLesson) {\n-    return (\n-      <Card className=\"p-6\">\n-        <div className=\"space-y-6\">\n-          {/* Lesson Title Section */}\n-          <div className=\"space-y-2\">\n-            <h2 className=\"text-2xl font-bold\">{currentLesson?.title || 'Untitled Lesson'}</h2>\n-            <Button \n-              variant=\"ghost\" \n-              size=\"sm\"\n-              onClick={() => setIsEditing(true)}\n-            >\n-              <Icon type=\"phosphor\" name=\"PENCIL_SIMPLE\" className=\"mr-2 h-4 w-4\" />\n-              Edit Lesson Content\n-            </Button>\n-          </div>\n-\n-          {/* Lesson Content Section */}\n-          {isEditing ? (\n-            <RichTextEditor\n-              value={lessonContent}\n-              onChange={setLessonContent}\n-              onSave={handleSaveContent}\n-              onCancel={handleCancelEdit}\n-            />\n-          ) : currentLesson?.content ? (\n-            <div \n-              className=\"prose max-w-none\" \n-              dangerouslySetInnerHTML={{ __html: currentLesson.content }} \n-            />\n-          ) : (\n-            <Button onClick={() => setIsEditing(true)}>\n-              <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\n-              Add Lesson Content\n-            </Button>\n-          )}\n-\n-          {/* Questions and Activities Tabs */}\n-          <Tabs defaultValue=\"questions\" className=\"w-full\">\n-            <TabsList>\n-              <TabsTrigger value=\"questions\">Questions</TabsTrigger>\n-              <TabsTrigger value=\"activities\">Activities</TabsTrigger>\n-            </TabsList>\n-\n-            <TabsContent value=\"questions\" className=\"space-y-4\">\n-              <div className=\"flex justify-between items-center\">\n-                <h3 className=\"text-lg font-medium\">Questions</h3>\n-                <Button onClick={() => setIsQuestionDialogOpen(true)}>\n-                  <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\n-                  Add Question\n-                </Button>\n-              </div>\n-              {/* Questions list */}\n-              <CreateQuestionDialog \n-                open={isQuestionDialogOpen}\n-                onOpenChange={setIsQuestionDialogOpen}\n-                lessonId={selectedLesson || ''}\n-              />\n-            </TabsContent>\n-\n-            <TabsContent value=\"activities\" className=\"space-y-4\">\n-              <div className=\"flex justify-between items-center\">\n-                <h3 className=\"text-lg font-medium\">Activities</h3>\n-                <Button onClick={() => setIsActivityDialogOpen(true)}>\n-                  <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\n-                  Add Activity\n-                </Button>\n-              </div>\n-              {/* Activities list */}\n-              <CreateActivityDialog \n-                open={isActivityDialogOpen}\n-                onOpenChange={setIsActivityDialogOpen}\n-                lessonId={selectedLesson || ''}\n-              />\n-            </TabsContent>\n-          </Tabs>\n-        </div>\n-      </Card>\n-    );\n-  }\n-\n-  if (selectedSubtopic) {\n-    return (\n-      <Card className=\"p-6\">\n-        <div className=\"space-y-4\">\n-          <div className=\"flex justify-between items-center\">\n-            <h2 className=\"text-2xl font-bold\">Lessons</h2>\n-            <Button>\n-              <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\n-              Add Lesson\n-            </Button>\n-          </div>\n-          <ScrollArea className=\"h-[calc(100vh-16rem)]\">\n-            <AnimatePresence mode=\"wait\">\n-              {lessons?.map((lesson: Lesson) => (\n-                <motion.div\n-                  key={lesson.id}\n-                  initial={{ opacity: 0 }}\n-                  animate={{ opacity: 1 }}\n-                  exit={{ opacity: 0 }}\n-                  className=\"p-4 border rounded-lg mb-4 hover:bg-accent/50 transition-colors\"\n-                >\n-                  <h3 className=\"font-medium\">{lesson.title}</h3>\n-                  {lesson.description && (\n-                    <p className=\"text-sm text-muted-foreground mt-1\">{lesson.description}</p>\n-                  )}\n-                  <div onClick={() => handleLessonClick(lesson.id)}>\n-                    <h3 className=\"font-medium\">{lesson.title}</h3>\n-                    {lesson.description && (\n-                      <p className=\"text-sm text-muted-foreground mt-1\">{lesson.description}</p>\n-                    )}\n-                  </div>\n-                  <Button\n-                    variant=\"ghost\"\n-                    size=\"icon\"\n-                    onClick={(e: React.MouseEvent) => {\n-                      e.stopPropagation();\n-                      setItemToDelete({\n-                        id: lesson.id,\n-                        type: 'lesson',\n-                        title: lesson.title\n-                      });\n-                      setDeleteDialogOpen(true);\n-                    }}\n-                  >\n-                    <Trash className=\"h-4 w-4\" />\n-                  </Button>\n-                </motion.div>\n-              ))},\n-              \n-            </AnimatePresence>\n-          </ScrollArea>\n-        </div>\n-      </Card>\n-    );\n-  }\n-\n-  if (selectedTopic) {\n-    return (\n-      <Card className=\"p-6\">\n-        <div className=\"space-y-4\">\n-          <div className=\"flex justify-between items-center\">\n-            <h2 className=\"text-2xl font-bold\">Subtopics</h2>\n-            <Button>\n-              <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\n-              Add Subtopic\n-            </Button>\n-          </div>\n-          <ScrollArea className=\"h-[calc(100vh-16rem)]\">\n-            <AnimatePresence mode=\"wait\">\n-              {subtopics?.map((subtopic: Subtopic) => (\n-                <motion.div\n-                  key={subtopic.id}\n-                  initial={{ opacity: 0 }}\n-                  animate={{ opacity: 1 }}\n-                  exit={{ opacity: 0 }}\n-                  className=\"p-4 border rounded-lg mb-4 hover:bg-accent/50 transition-colors\"\n-                >\n-                  <h3 className=\"font-medium\">{subtopic.title}</h3>\n-                  {subtopic.description && (\n-                    <p className=\"text-sm text-muted-foreground mt-1\">{subtopic.description}</p>\n-                  )}\n-                </motion.div>\n-              ))}\n-            </AnimatePresence>\n-          </ScrollArea>\n-        </div>\n-      </Card>\n-    );\n-  }\n-\n-  return (\n-    <Card className=\"p-6\">\n-      <div className=\"space-y-4\">\n-        <div className=\"flex justify-between items-center\">\n-          <h2 className=\"text-2xl font-bold\">Topics</h2>\n-          <Button>\n-            <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\n-            Add Topic\n-          </Button>\n-        </div>\n-        <ScrollArea className=\"h-[calc(100vh-16rem)]\">\n-          <AnimatePresence mode=\"wait\">\n-            {topics?.map((topic: Topic) => (\n-              <motion.div\n-                key={topic.id}\n-                initial={{ opacity: 0 }}\n-                animate={{ opacity: 1 }}\n-                exit={{ opacity: 0 }}\n-                className=\"p-4 border rounded-lg mb-4 hover:bg-accent/50 transition-colors\"\n-              >\n-                <h3 className=\"font-medium\">{topic.title}</h3>\n-                {topic.description && (\n-                  <p className=\"text-sm text-muted-foreground mt-1\">{topic.description}</p>\n-                )}\n-              </motion.div>\n-            ))}\n-          </AnimatePresence>\n-        </ScrollArea>\n-      </div>\n-    </Card>\n-  );\n+\"use client\";\r\n+\r\n+import React, { useState } from 'react';\r\n+import { Card } from '@/components/ui/card';\r\n+import { Button } from '@/components/ui/button';\r\n+import { Icon } from '@/components/ui/icons';\r\n+import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\n+import { ScrollArea } from '@/components/ui/scroll-area';\r\n+import { motion, AnimatePresence } from 'framer-motion';\r\n+import { useContentStore } from '@/lib/content/store';\r\n+import { useContentHierarchy } from './content-hierarchy';\r\n+import { RichTextEditor } from '@/components/ui/rich-text-editor';\r\n+import { contentService } from '@/lib/content/ContentService';\r\n+import { useToast } from '@/hooks/use-toast';\r\n+import type { Topic, Subtopic, Lesson } from '@/types/content';\r\n+import { CreateQuestionDialog } from './CreateQuestionDialog';\r\n+import { CreateActivityDialog } from '@/app/content-management/components/CreateActivityDialog';\r\n+import { useQueryClient } from '@tanstack/react-query';\r\n+//import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\r\n+import { Trash } from 'lucide-react';\r\n+\r\n+interface ContentItem {\r\n+  id: string;\r\n+  title: string;\r\n+  description?: string;\r\n+}\r\n+\r\n+export function ContentDisplay() {\r\n+  const { \r\n+    selectedTopic,\r\n+    selectedSubtopic,\r\n+    selectedLesson,\r\n+  } = useContentStore();\r\n+  \r\n+  const { topics = [], subtopics = [], lessons = [], isLoading } = useContentHierarchy() as { \r\n+    topics: Topic[]; \r\n+    subtopics: Subtopic[]; \r\n+    lessons: Lesson[]; \r\n+    isLoading: boolean \r\n+  };\r\n+  const { toast } = useToast();\r\n+  const queryClient = useQueryClient();\r\n+\r\n+  const [isEditing, setIsEditing] = React.useState(false);\r\n+  const [lessonContent, setLessonContent] = React.useState('');\r\n+  const [isQuestionDialogOpen, setIsQuestionDialogOpen] = React.useState(false);\r\n+  const [isActivityDialogOpen, setIsActivityDialogOpen] = React.useState(false);\r\n+  const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\r\n+  const [itemToDelete, setItemToDelete] = useState<{\r\n+    id: string;\r\n+    type: 'topic' | 'subtopic' | 'lesson';\r\n+    title: string;\r\n+  } | null>(null);\r\n+  \r\n+  // Get current lesson\r\n+  const currentLesson = React.useMemo(() => \r\n+    lessons.find((l: Lesson) => l.id === selectedLesson),\r\n+    [lessons, selectedLesson]\r\n+  );\r\n+\r\n+  // Initialize lesson content when lesson changes\r\n+  React.useEffect(() => {\r\n+    if (currentLesson?.content) {\r\n+      setLessonContent(currentLesson.content);\r\n+    }\r\n+  }, [currentLesson]);\r\n+\r\n+  // Handle saving lesson content\r\n+  const handleSaveContent = async () => {\r\n+    if (!selectedLesson) return;\r\n+\r\n+    try {\r\n+      await contentService.updateLesson({\r\n+        id: selectedLesson,\r\n+        content: lessonContent,\r\n+      });\r\n+\r\n+      toast({\r\n+        title: \"Success\",\r\n+        description: \"Lesson content saved successfully\",\r\n+      });\r\n+\r\n+      setIsEditing(false);\r\n+      // Refetch lessons\r\n+      await contentService.fetchLessons(selectedSubtopic || '');\r\n+    } catch (error) {\r\n+      toast({\r\n+        title: \"Error\",\r\n+        description: error instanceof Error ? error.message : \"Failed to save lesson content\",\r\n+      });\r\n+    }\r\n+  };\r\n+\r\n+  // Handle canceling edit\r\n+  const handleCancelEdit = () => {\r\n+    setLessonContent(currentLesson?.content || '');\r\n+    setIsEditing(false);\r\n+  };\r\n+\r\n+  const handleDelete = async () => {\r\n+    if (!itemToDelete) return;\r\n+\r\n+    try {\r\n+      switch (itemToDelete.type) {\r\n+        case 'topic':\r\n+          await contentService.deleteTopic(itemToDelete.id);\r\n+          break;\r\n+        case 'subtopic':\r\n+          await contentService.deleteSubtopic(itemToDelete.id);\r\n+          break;\r\n+        case 'lesson':\r\n+          await contentService.deleteLesson(itemToDelete.id);\r\n+          break;\r\n+      }\r\n+      \r\n+      queryClient.invalidateQueries({ queryKey: ['topics'] });\r\n+      queryClient.invalidateQueries({ queryKey: ['subtopics'] });\r\n+      queryClient.invalidateQueries({ queryKey: ['lessons'] });\r\n+      \r\n+      toast({\r\n+        title: \"Success\",\r\n+        description: `${itemToDelete.title} has been deleted.`,\r\n+      });\r\n+    } catch (error) {\r\n+      toast({\r\n+        title: \"Error\",\r\n+        description: \"Failed to delete item.\",\r\n+      });\r\n+    } finally {\r\n+      setDeleteDialogOpen(false);\r\n+      setItemToDelete(null);\r\n+    }\r\n+  };\r\n+\r\n+  const handleLessonClick = (lessonId: string) => {\r\n+    useContentStore.setState({ selectedLesson: lessonId });\r\n+  };\r\n+\r\n+  // Render different content based on selection\r\n+  if (selectedLesson) {\r\n+    return (\r\n+      <Card className=\"p-6\">\r\n+        <div className=\"space-y-6\">\r\n+          {/* Lesson Title Section */}\r\n+          <div className=\"space-y-2\">\r\n+            <h2 className=\"text-2xl font-bold\">{currentLesson?.title || 'Untitled Lesson'}</h2>\r\n+            <Button \r\n+              variant=\"ghost\" \r\n+              size=\"sm\"\r\n+              onClick={() => setIsEditing(true)}\r\n+            >\r\n+              <Icon type=\"phosphor\" name=\"PENCIL_SIMPLE\" className=\"mr-2 h-4 w-4\" />\r\n+              Edit Lesson Content\r\n+            </Button>\r\n+          </div>\r\n+\r\n+          {/* Lesson Content Section */}\r\n+          {isEditing ? (\r\n+            <RichTextEditor\r\n+              value={lessonContent}\r\n+              onChange={setLessonContent}\r\n+              onSave={handleSaveContent}\r\n+              onCancel={handleCancelEdit}\r\n+            />\r\n+          ) : currentLesson?.content ? (\r\n+            <div \r\n+              className=\"prose max-w-none\" \r\n+              dangerouslySetInnerHTML={{ __html: currentLesson.content }} \r\n+            />\r\n+          ) : (\r\n+            <Button onClick={() => setIsEditing(true)}>\r\n+              <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n+              Add Lesson Content\r\n+            </Button>\r\n+          )}\r\n+\r\n+          {/* Questions and Activities Tabs */}\r\n+          <Tabs defaultValue=\"questions\" className=\"w-full\">\r\n+            <TabsList>\r\n+              <TabsTrigger value=\"questions\">Questions</TabsTrigger>\r\n+              <TabsTrigger value=\"activities\">Activities</TabsTrigger>\r\n+            </TabsList>\r\n+\r\n+            <TabsContent value=\"questions\" className=\"space-y-4\">\r\n+              <div className=\"flex justify-between items-center\">\r\n+                <h3 className=\"text-lg font-medium\">Questions</h3>\r\n+                <Button onClick={() => setIsQuestionDialogOpen(true)}>\r\n+                  <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n+                  Add Question\r\n+                </Button>\r\n+              </div>\r\n+              {/* Questions list */}\r\n+              <CreateQuestionDialog \r\n+                open={isQuestionDialogOpen}\r\n+                onOpenChange={setIsQuestionDialogOpen}\r\n+                lessonId={selectedLesson || ''}\r\n+              />\r\n+            </TabsContent>\r\n+\r\n+            <TabsContent value=\"activities\" className=\"space-y-4\">\r\n+              <div className=\"flex justify-between items-center\">\r\n+                <h3 className=\"text-lg font-medium\">Activities</h3>\r\n+                <Button onClick={() => setIsActivityDialogOpen(true)}>\r\n+                  <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n+                  Add Activity\r\n+                </Button>\r\n+              </div>\r\n+              {/* Activities list */}\r\n+              <CreateActivityDialog \r\n+                open={isActivityDialogOpen}\r\n+                onOpenChange={setIsActivityDialogOpen}\r\n+                lessonId={selectedLesson || ''}\r\n+              />\r\n+            </TabsContent>\r\n+          </Tabs>\r\n+        </div>\r\n+      </Card>\r\n+    );\r\n+  }\r\n+\r\n+  if (selectedSubtopic) {\r\n+    return (\r\n+      <Card className=\"p-6\">\r\n+        <div className=\"space-y-4\">\r\n+          <div className=\"flex justify-between items-center\">\r\n+            <h2 className=\"text-2xl font-bold\">Lessons</h2>\r\n+            <Button>\r\n+              <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n+              Add Lesson\r\n+            </Button>\r\n+          </div>\r\n+          <ScrollArea className=\"h-[calc(100vh-16rem)]\">\r\n+            <AnimatePresence mode=\"wait\">\r\n+              {lessons?.map((lesson: Lesson) => (\r\n+                <motion.div\r\n+                  key={lesson.id}\r\n+                  initial={{ opacity: 0 }}\r\n+                  animate={{ opacity: 1 }}\r\n+                  exit={{ opacity: 0 }}\r\n+                  className=\"p-4 border rounded-lg mb-4 hover:bg-accent/50 transition-colors\"\r\n+                >\r\n+                  <h3 className=\"font-medium\">{lesson.title}</h3>\r\n+                  {lesson.description && (\r\n+                    <p className=\"text-sm text-muted-foreground mt-1\">{lesson.description}</p>\r\n+                  )}\r\n+                  <div onClick={() => handleLessonClick(lesson.id)}>\r\n+                    <h3 className=\"font-medium\">{lesson.title}</h3>\r\n+                    {lesson.description && (\r\n+                      <p className=\"text-sm text-muted-foreground mt-1\">{lesson.description}</p>\r\n+                    )}\r\n+                  </div>\r\n+                  <Button\r\n+                    variant=\"ghost\"\r\n+                    size=\"icon\"\r\n+                    onClick={(e: React.MouseEvent) => {\r\n+                      e.stopPropagation();\r\n+                      setItemToDelete({\r\n+                        id: lesson.id,\r\n+                        type: 'lesson',\r\n+                        title: lesson.title\r\n+                      });\r\n+                      setDeleteDialogOpen(true);\r\n+                    }}\r\n+                  >\r\n+                    <Trash className=\"h-4 w-4\" />\r\n+                  </Button>\r\n+                </motion.div>\r\n+              ))},\r\n+              \r\n+            </AnimatePresence>\r\n+          </ScrollArea>\r\n+        </div>\r\n+      </Card>\r\n+    );\r\n+  }\r\n+\r\n+  if (selectedTopic) {\r\n+    return (\r\n+      <Card className=\"p-6\">\r\n+        <div className=\"space-y-4\">\r\n+          <div className=\"flex justify-between items-center\">\r\n+            <h2 className=\"text-2xl font-bold\">Subtopics</h2>\r\n+            <Button>\r\n+              <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n+              Add Subtopic\r\n+            </Button>\r\n+          </div>\r\n+          <ScrollArea className=\"h-[calc(100vh-16rem)]\">\r\n+            <AnimatePresence mode=\"wait\">\r\n+              {subtopics?.map((subtopic: Subtopic) => (\r\n+                <motion.div\r\n+                  key={subtopic.id}\r\n+                  initial={{ opacity: 0 }}\r\n+                  animate={{ opacity: 1 }}\r\n+                  exit={{ opacity: 0 }}\r\n+                  className=\"p-4 border rounded-lg mb-4 hover:bg-accent/50 transition-colors\"\r\n+                >\r\n+                  <h3 className=\"font-medium\">{subtopic.title}</h3>\r\n+                  {subtopic.description && (\r\n+                    <p className=\"text-sm text-muted-foreground mt-1\">{subtopic.description}</p>\r\n+                  )}\r\n+                </motion.div>\r\n+              ))}\r\n+            </AnimatePresence>\r\n+          </ScrollArea>\r\n+        </div>\r\n+      </Card>\r\n+    );\r\n+  }\r\n+\r\n+  return (\r\n+    <Card className=\"p-6\">\r\n+      <div className=\"space-y-4\">\r\n+        <div className=\"flex justify-between items-center\">\r\n+          <h2 className=\"text-2xl font-bold\">Topics</h2>\r\n+          <Button>\r\n+            <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n+            Add Topic\r\n+          </Button>\r\n+        </div>\r\n+        <ScrollArea className=\"h-[calc(100vh-16rem)]\">\r\n+          <AnimatePresence mode=\"wait\">\r\n+            {topics?.map((topic: Topic) => (\r\n+              <motion.div\r\n+                key={topic.id}\r\n+                initial={{ opacity: 0 }}\r\n+                animate={{ opacity: 1 }}\r\n+                exit={{ opacity: 0 }}\r\n+                className=\"p-4 border rounded-lg mb-4 hover:bg-accent/50 transition-colors\"\r\n+              >\r\n+                <h3 className=\"font-medium\">{topic.title}</h3>\r\n+                {topic.description && (\r\n+                  <p className=\"text-sm text-muted-foreground mt-1\">{topic.description}</p>\r\n+                )}\r\n+              </motion.div>\r\n+            ))}\r\n+          </AnimatePresence>\r\n+        </ScrollArea>\r\n+      </div>\r\n+    </Card>\r\n+  );\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1740946357123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n import { useQueryClient } from '@tanstack/react-query';\r\n //import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\r\n import { Trash } from 'lucide-react';\r\n \r\n-interface ContentItem {\r\n+export interface ContentItem {\r\n   id: string;\r\n   title: string;\r\n   description?: string;\r\n }\r\n"
                },
                {
                    "date": 1740946388608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n   const [isEditing, setIsEditing] = React.useState(false);\r\n   const [lessonContent, setLessonContent] = React.useState('');\r\n   const [isQuestionDialogOpen, setIsQuestionDialogOpen] = React.useState(false);\r\n   const [isActivityDialogOpen, setIsActivityDialogOpen] = React.useState(false);\r\n-  const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\r\n+  const [_deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\r\n   const [itemToDelete, setItemToDelete] = useState<{\r\n     id: string;\r\n     type: 'topic' | 'subtopic' | 'lesson';\r\n     title: string;\r\n"
                },
                {
                    "date": 1740946443120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,9 +96,9 @@\n     setLessonContent(currentLesson?.content || '');\r\n     setIsEditing(false);\r\n   };\r\n \r\n-  const handleDelete = async () => {\r\n+  const _handleDelete = async () => {\r\n     if (!itemToDelete) return;\r\n \r\n     try {\r\n       switch (itemToDelete.type) {\r\n"
                },
                {
                    "date": 1740946459348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n     selectedSubtopic,\r\n     selectedLesson,\r\n   } = useContentStore();\r\n   \r\n-  const { topics = [], subtopics = [], lessons = [], isLoading } = useContentHierarchy() as { \r\n+  const { topics = [], subtopics = [], lessons = [], _isLoading } = useContentHierarchy() as { \r\n     topics: Topic[]; \r\n     subtopics: Subtopic[]; \r\n     lessons: Lesson[]; \r\n     isLoading: boolean \r\n"
                }
            ],
            "date": 1739016961889,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport React from 'react';\r\nimport { Card } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Icon } from '@/components/ui/icons';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { ScrollArea } from '@/components/ui/scroll-area';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { useContentStore } from '@/lib/content/store';\r\nimport { useContentHierarchy } from './content-hierarchy';\r\nimport { RichTextEditor } from '@/components/ui/rich-text-editor';\r\nimport { contentService } from '@/lib/content/ContentService';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport type { Topic, Subtopic, Lesson } from '@/types/content';\r\nimport { CreateQuestionDialog } from './CreateQuestionDialog';\r\nimport { CreateActivityDialog } from '@/app/content-management/components/CreateActivityDialog';\r\nimport { useQueryClient } from '@tanstack/react-query';\r\n\r\ninterface ContentItem {\r\n  id: string;\r\n  title: string;\r\n  description?: string;\r\n}\r\n\r\nexport function ContentDisplay() {\r\n  const { \r\n    selectedTopic,\r\n    selectedSubtopic,\r\n    selectedLesson,\r\n  } = useContentStore();\r\n  \r\n  const { topics = [], subtopics = [], lessons = [], isLoading } = useContentHierarchy() as { \r\n    topics: Topic[]; \r\n    subtopics: Subtopic[]; \r\n    lessons: Lesson[]; \r\n    isLoading: boolean \r\n  };\r\n  const { toast } = useToast();\r\n  const queryClient = useQueryClient();\r\n\r\n  const [isEditing, setIsEditing] = React.useState(false);\r\n  const [lessonContent, setLessonContent] = React.useState('');\r\n  const [isQuestionDialogOpen, setIsQuestionDialogOpen] = React.useState(false);\r\n  const [isActivityDialogOpen, setIsActivityDialogOpen] = React.useState(false);\r\n  \r\n  // Get current lesson\r\n  const currentLesson = React.useMemo(() => \r\n    lessons.find((l: Lesson) => l.id === selectedLesson),\r\n    [lessons, selectedLesson]\r\n  );\r\n\r\n  // Initialize lesson content when lesson changes\r\n  React.useEffect(() => {\r\n    if (currentLesson?.content) {\r\n      setLessonContent(currentLesson.content);\r\n    }\r\n  }, [currentLesson]);\r\n\r\n  // Handle saving lesson content\r\n  const handleSaveContent = async () => {\r\n    if (!selectedLesson) return;\r\n\r\n    try {\r\n      await contentService.updateLesson({\r\n        id: selectedLesson,\r\n        content: lessonContent,\r\n      });\r\n\r\n      toast({\r\n        title: \"Success\",\r\n        description: \"Lesson content saved successfully\",\r\n      });\r\n\r\n      setIsEditing(false);\r\n      // Refetch lessons\r\n      await contentService.fetchLessons(selectedSubtopic || '');\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error\",\r\n        description: error instanceof Error ? error.message : \"Failed to save lesson content\",\r\n      });\r\n    }\r\n  };\r\n\r\n  // Handle canceling edit\r\n  const handleCancelEdit = () => {\r\n    setLessonContent(currentLesson?.content || '');\r\n    setIsEditing(false);\r\n  };\r\n\r\n  // Render different content based on selection\r\n  if (selectedLesson) {\r\n    return (\r\n      <Card className=\"p-6\">\r\n        <div className=\"space-y-6\">\r\n          {/* Lesson Title Section */}\r\n          <div className=\"space-y-2\">\r\n            <h2 className=\"text-2xl font-bold\">{currentLesson?.title || 'Untitled Lesson'}</h2>\r\n            <Button \r\n              variant=\"ghost\" \r\n              size=\"sm\"\r\n              onClick={() => setIsEditing(true)}\r\n            >\r\n              <Icon type=\"phosphor\" name=\"PENCIL_SIMPLE\" className=\"mr-2 h-4 w-4\" />\r\n              Edit Lesson Content\r\n            </Button>\r\n          </div>\r\n\r\n          {/* Lesson Content Section */}\r\n          {isEditing ? (\r\n            <RichTextEditor\r\n              value={lessonContent}\r\n              onChange={setLessonContent}\r\n              onSave={handleSaveContent}\r\n              onCancel={handleCancelEdit}\r\n            />\r\n          ) : currentLesson?.content ? (\r\n            <div \r\n              className=\"prose max-w-none\" \r\n              dangerouslySetInnerHTML={{ __html: currentLesson.content }} \r\n            />\r\n          ) : (\r\n            <Button onClick={() => setIsEditing(true)}>\r\n              <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n              Add Lesson Content\r\n            </Button>\r\n          )}\r\n\r\n          {/* Questions and Activities Tabs */}\r\n          <Tabs defaultValue=\"questions\" className=\"w-full\">\r\n            <TabsList>\r\n              <TabsTrigger value=\"questions\">Questions</TabsTrigger>\r\n              <TabsTrigger value=\"activities\">Activities</TabsTrigger>\r\n            </TabsList>\r\n\r\n            <TabsContent value=\"questions\" className=\"space-y-4\">\r\n              <div className=\"flex justify-between items-center\">\r\n                <h3 className=\"text-lg font-medium\">Questions</h3>\r\n                <Button onClick={() => setIsQuestionDialogOpen(true)}>\r\n                  <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n                  Add Question\r\n                </Button>\r\n              </div>\r\n              {/* Questions list */}\r\n              <CreateQuestionDialog \r\n                open={isQuestionDialogOpen}\r\n                onOpenChange={setIsQuestionDialogOpen}\r\n                lessonId={selectedLesson || ''}\r\n              />\r\n            </TabsContent>\r\n\r\n            <TabsContent value=\"activities\" className=\"space-y-4\">\r\n              <div className=\"flex justify-between items-center\">\r\n                <h3 className=\"text-lg font-medium\">Activities</h3>\r\n                <Button onClick={() => setIsActivityDialogOpen(true)}>\r\n                  <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n                  Add Activity\r\n                </Button>\r\n              </div>\r\n              {/* Activities list */}\r\n              <CreateActivityDialog \r\n                open={isActivityDialogOpen}\r\n                onOpenChange={setIsActivityDialogOpen}\r\n                lessonId={selectedLesson || ''}\r\n              />\r\n            </TabsContent>\r\n          </Tabs>\r\n        </div>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  if (selectedSubtopic) {\r\n    return (\r\n      <Card className=\"p-6\">\r\n        <div className=\"space-y-4\">\r\n          <div className=\"flex justify-between items-center\">\r\n            <h2 className=\"text-2xl font-bold\">Lessons</h2>\r\n            <Button>\r\n              <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n              Add Lesson\r\n            </Button>\r\n          </div>\r\n          <ScrollArea className=\"h-[calc(100vh-16rem)]\">\r\n            <AnimatePresence mode=\"wait\">\r\n              {lessons?.map((lesson: Lesson) => (\r\n                <motion.div\r\n                  key={lesson.id}\r\n                  initial={{ opacity: 0 }}\r\n                  animate={{ opacity: 1 }}\r\n                  exit={{ opacity: 0 }}\r\n                  className=\"p-4 border rounded-lg mb-4 hover:bg-accent/50 transition-colors\"\r\n                >\r\n                  <h3 className=\"font-medium\">{lesson.title}</h3>\r\n                  {lesson.description && (\r\n                    <p className=\"text-sm text-muted-foreground mt-1\">{lesson.description}</p>\r\n                  )}\r\n                </motion.div>\r\n              ))}\r\n            </AnimatePresence>\r\n          </ScrollArea>\r\n        </div>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  if (selectedTopic) {\r\n    return (\r\n      <Card className=\"p-6\">\r\n        <div className=\"space-y-4\">\r\n          <div className=\"flex justify-between items-center\">\r\n            <h2 className=\"text-2xl font-bold\">Subtopics</h2>\r\n            <Button>\r\n              <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n              Add Subtopic\r\n            </Button>\r\n          </div>\r\n          <ScrollArea className=\"h-[calc(100vh-16rem)]\">\r\n            <AnimatePresence mode=\"wait\">\r\n              {subtopics?.map((subtopic: Subtopic) => (\r\n                <motion.div\r\n                  key={subtopic.id}\r\n                  initial={{ opacity: 0 }}\r\n                  animate={{ opacity: 1 }}\r\n                  exit={{ opacity: 0 }}\r\n                  className=\"p-4 border rounded-lg mb-4 hover:bg-accent/50 transition-colors\"\r\n                >\r\n                  <h3 className=\"font-medium\">{subtopic.title}</h3>\r\n                  {subtopic.description && (\r\n                    <p className=\"text-sm text-muted-foreground mt-1\">{subtopic.description}</p>\r\n                  )}\r\n                </motion.div>\r\n              ))}\r\n            </AnimatePresence>\r\n          </ScrollArea>\r\n        </div>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card className=\"p-6\">\r\n      <div className=\"space-y-4\">\r\n        <div className=\"flex justify-between items-center\">\r\n          <h2 className=\"text-2xl font-bold\">Topics</h2>\r\n          <Button>\r\n            <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n            Add Topic\r\n          </Button>\r\n        </div>\r\n        <ScrollArea className=\"h-[calc(100vh-16rem)]\">\r\n          <AnimatePresence mode=\"wait\">\r\n            {topics?.map((topic: Topic) => (\r\n              <motion.div\r\n                key={topic.id}\r\n                initial={{ opacity: 0 }}\r\n                animate={{ opacity: 1 }}\r\n                exit={{ opacity: 0 }}\r\n                className=\"p-4 border rounded-lg mb-4 hover:bg-accent/50 transition-colors\"\r\n              >\r\n                <h3 className=\"font-medium\">{topic.title}</h3>\r\n                {topic.description && (\r\n                  <p className=\"text-sm text-muted-foreground mt-1\">{topic.description}</p>\r\n                )}\r\n              </motion.div>\r\n            ))}\r\n          </AnimatePresence>\r\n        </ScrollArea>\r\n      </div>\r\n    </Card>\r\n  );\r\n} "
        }
    ]
}