{
    "sourceFile": "src/app/content-management/components/content-display.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1739016961889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1739016961889,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport React from 'react';\r\nimport { Card } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Icon } from '@/components/ui/icons';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { ScrollArea } from '@/components/ui/scroll-area';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { useContentStore } from '@/lib/content/store';\r\nimport { useContentHierarchy } from './content-hierarchy';\r\nimport { RichTextEditor } from '@/components/ui/rich-text-editor';\r\nimport { contentService } from '@/lib/content/ContentService';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport type { Topic, Subtopic, Lesson } from '@/types/content';\r\nimport { CreateQuestionDialog } from './CreateQuestionDialog';\r\nimport { CreateActivityDialog } from '@/app/content-management/components/CreateActivityDialog';\r\nimport { useQueryClient } from '@tanstack/react-query';\r\n\r\ninterface ContentItem {\r\n  id: string;\r\n  title: string;\r\n  description?: string;\r\n}\r\n\r\nexport function ContentDisplay() {\r\n  const { \r\n    selectedTopic,\r\n    selectedSubtopic,\r\n    selectedLesson,\r\n  } = useContentStore();\r\n  \r\n  const { topics = [], subtopics = [], lessons = [], isLoading } = useContentHierarchy() as { \r\n    topics: Topic[]; \r\n    subtopics: Subtopic[]; \r\n    lessons: Lesson[]; \r\n    isLoading: boolean \r\n  };\r\n  const { toast } = useToast();\r\n  const queryClient = useQueryClient();\r\n\r\n  const [isEditing, setIsEditing] = React.useState(false);\r\n  const [lessonContent, setLessonContent] = React.useState('');\r\n  const [isQuestionDialogOpen, setIsQuestionDialogOpen] = React.useState(false);\r\n  const [isActivityDialogOpen, setIsActivityDialogOpen] = React.useState(false);\r\n  \r\n  // Get current lesson\r\n  const currentLesson = React.useMemo(() => \r\n    lessons.find((l: Lesson) => l.id === selectedLesson),\r\n    [lessons, selectedLesson]\r\n  );\r\n\r\n  // Initialize lesson content when lesson changes\r\n  React.useEffect(() => {\r\n    if (currentLesson?.content) {\r\n      setLessonContent(currentLesson.content);\r\n    }\r\n  }, [currentLesson]);\r\n\r\n  // Handle saving lesson content\r\n  const handleSaveContent = async () => {\r\n    if (!selectedLesson) return;\r\n\r\n    try {\r\n      await contentService.updateLesson({\r\n        id: selectedLesson,\r\n        content: lessonContent,\r\n      });\r\n\r\n      toast({\r\n        title: \"Success\",\r\n        description: \"Lesson content saved successfully\",\r\n      });\r\n\r\n      setIsEditing(false);\r\n      // Refetch lessons\r\n      await contentService.fetchLessons(selectedSubtopic || '');\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error\",\r\n        description: error instanceof Error ? error.message : \"Failed to save lesson content\",\r\n      });\r\n    }\r\n  };\r\n\r\n  // Handle canceling edit\r\n  const handleCancelEdit = () => {\r\n    setLessonContent(currentLesson?.content || '');\r\n    setIsEditing(false);\r\n  };\r\n\r\n  // Render different content based on selection\r\n  if (selectedLesson) {\r\n    return (\r\n      <Card className=\"p-6\">\r\n        <div className=\"space-y-6\">\r\n          {/* Lesson Title Section */}\r\n          <div className=\"space-y-2\">\r\n            <h2 className=\"text-2xl font-bold\">{currentLesson?.title || 'Untitled Lesson'}</h2>\r\n            <Button \r\n              variant=\"ghost\" \r\n              size=\"sm\"\r\n              onClick={() => setIsEditing(true)}\r\n            >\r\n              <Icon type=\"phosphor\" name=\"PENCIL_SIMPLE\" className=\"mr-2 h-4 w-4\" />\r\n              Edit Lesson Content\r\n            </Button>\r\n          </div>\r\n\r\n          {/* Lesson Content Section */}\r\n          {isEditing ? (\r\n            <RichTextEditor\r\n              value={lessonContent}\r\n              onChange={setLessonContent}\r\n              onSave={handleSaveContent}\r\n              onCancel={handleCancelEdit}\r\n            />\r\n          ) : currentLesson?.content ? (\r\n            <div \r\n              className=\"prose max-w-none\" \r\n              dangerouslySetInnerHTML={{ __html: currentLesson.content }} \r\n            />\r\n          ) : (\r\n            <Button onClick={() => setIsEditing(true)}>\r\n              <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n              Add Lesson Content\r\n            </Button>\r\n          )}\r\n\r\n          {/* Questions and Activities Tabs */}\r\n          <Tabs defaultValue=\"questions\" className=\"w-full\">\r\n            <TabsList>\r\n              <TabsTrigger value=\"questions\">Questions</TabsTrigger>\r\n              <TabsTrigger value=\"activities\">Activities</TabsTrigger>\r\n            </TabsList>\r\n\r\n            <TabsContent value=\"questions\" className=\"space-y-4\">\r\n              <div className=\"flex justify-between items-center\">\r\n                <h3 className=\"text-lg font-medium\">Questions</h3>\r\n                <Button onClick={() => setIsQuestionDialogOpen(true)}>\r\n                  <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n                  Add Question\r\n                </Button>\r\n              </div>\r\n              {/* Questions list */}\r\n              <CreateQuestionDialog \r\n                open={isQuestionDialogOpen}\r\n                onOpenChange={setIsQuestionDialogOpen}\r\n                lessonId={selectedLesson || ''}\r\n              />\r\n            </TabsContent>\r\n\r\n            <TabsContent value=\"activities\" className=\"space-y-4\">\r\n              <div className=\"flex justify-between items-center\">\r\n                <h3 className=\"text-lg font-medium\">Activities</h3>\r\n                <Button onClick={() => setIsActivityDialogOpen(true)}>\r\n                  <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n                  Add Activity\r\n                </Button>\r\n              </div>\r\n              {/* Activities list */}\r\n              <CreateActivityDialog \r\n                open={isActivityDialogOpen}\r\n                onOpenChange={setIsActivityDialogOpen}\r\n                lessonId={selectedLesson || ''}\r\n              />\r\n            </TabsContent>\r\n          </Tabs>\r\n        </div>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  if (selectedSubtopic) {\r\n    return (\r\n      <Card className=\"p-6\">\r\n        <div className=\"space-y-4\">\r\n          <div className=\"flex justify-between items-center\">\r\n            <h2 className=\"text-2xl font-bold\">Lessons</h2>\r\n            <Button>\r\n              <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n              Add Lesson\r\n            </Button>\r\n          </div>\r\n          <ScrollArea className=\"h-[calc(100vh-16rem)]\">\r\n            <AnimatePresence mode=\"wait\">\r\n              {lessons?.map((lesson: Lesson) => (\r\n                <motion.div\r\n                  key={lesson.id}\r\n                  initial={{ opacity: 0 }}\r\n                  animate={{ opacity: 1 }}\r\n                  exit={{ opacity: 0 }}\r\n                  className=\"p-4 border rounded-lg mb-4 hover:bg-accent/50 transition-colors\"\r\n                >\r\n                  <h3 className=\"font-medium\">{lesson.title}</h3>\r\n                  {lesson.description && (\r\n                    <p className=\"text-sm text-muted-foreground mt-1\">{lesson.description}</p>\r\n                  )}\r\n                </motion.div>\r\n              ))}\r\n            </AnimatePresence>\r\n          </ScrollArea>\r\n        </div>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  if (selectedTopic) {\r\n    return (\r\n      <Card className=\"p-6\">\r\n        <div className=\"space-y-4\">\r\n          <div className=\"flex justify-between items-center\">\r\n            <h2 className=\"text-2xl font-bold\">Subtopics</h2>\r\n            <Button>\r\n              <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n              Add Subtopic\r\n            </Button>\r\n          </div>\r\n          <ScrollArea className=\"h-[calc(100vh-16rem)]\">\r\n            <AnimatePresence mode=\"wait\">\r\n              {subtopics?.map((subtopic: Subtopic) => (\r\n                <motion.div\r\n                  key={subtopic.id}\r\n                  initial={{ opacity: 0 }}\r\n                  animate={{ opacity: 1 }}\r\n                  exit={{ opacity: 0 }}\r\n                  className=\"p-4 border rounded-lg mb-4 hover:bg-accent/50 transition-colors\"\r\n                >\r\n                  <h3 className=\"font-medium\">{subtopic.title}</h3>\r\n                  {subtopic.description && (\r\n                    <p className=\"text-sm text-muted-foreground mt-1\">{subtopic.description}</p>\r\n                  )}\r\n                </motion.div>\r\n              ))}\r\n            </AnimatePresence>\r\n          </ScrollArea>\r\n        </div>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card className=\"p-6\">\r\n      <div className=\"space-y-4\">\r\n        <div className=\"flex justify-between items-center\">\r\n          <h2 className=\"text-2xl font-bold\">Topics</h2>\r\n          <Button>\r\n            <Icon type=\"phosphor\" name=\"PLUS\" className=\"mr-2 h-4 w-4\" />\r\n            Add Topic\r\n          </Button>\r\n        </div>\r\n        <ScrollArea className=\"h-[calc(100vh-16rem)]\">\r\n          <AnimatePresence mode=\"wait\">\r\n            {topics?.map((topic: Topic) => (\r\n              <motion.div\r\n                key={topic.id}\r\n                initial={{ opacity: 0 }}\r\n                animate={{ opacity: 1 }}\r\n                exit={{ opacity: 0 }}\r\n                className=\"p-4 border rounded-lg mb-4 hover:bg-accent/50 transition-colors\"\r\n              >\r\n                <h3 className=\"font-medium\">{topic.title}</h3>\r\n                {topic.description && (\r\n                  <p className=\"text-sm text-muted-foreground mt-1\">{topic.description}</p>\r\n                )}\r\n              </motion.div>\r\n            ))}\r\n          </AnimatePresence>\r\n        </ScrollArea>\r\n      </div>\r\n    </Card>\r\n  );\r\n} "
        }
    ]
}