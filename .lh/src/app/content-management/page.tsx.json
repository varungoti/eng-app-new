{
    "sourceFile": "src/app/content-management/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 255,
            "patches": [
                {
                    "date": 1739045874777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739045974616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1198,37 +1198,37 @@\n       toast.error('Failed to create grade');\r\n     }\r\n   };\r\n \r\n-  const handleCreateTopic = async (topicData: CreateTopicInput) => {\r\n+  const handleCreateTopic = async () => {\r\n+    if (!selectedGradeId) {\r\n+      toast.error('Please select a grade first');\r\n+        return;\r\n+      }\r\n+\r\n     try {\r\n-      const { data, error } = await supabase\r\n-        .from('topics')\r\n-        .insert([\r\n-          {\r\n-            title: topicData.title,\r\n-            description: topicData.description,\r\n-            category_id: topicData.categoryId,\r\n-            created_by: user?.id // Assuming you have user context\r\n-          }\r\n-        ])\r\n-        .select()\r\n-        .single();\r\n+      const response = await fetch(`${API_ENDPOINT}/topics`, {\r\n+        method: 'POST',\r\n+        headers: { 'Content-Type': 'application/json' },\r\n+        body: JSON.stringify({\r\n+          name: newItemData.name,\r\n+          gradeId: selectedGradeId\r\n+        })\r\n+      });\r\n \r\n-      if (error) {\r\n-        throw error;\r\n-      }\r\n-\r\n-      // Optionally refresh topics list or add to local state\r\n-      setTopics(prev => [...prev, data]);\r\n+      if (!response.ok) throw new Error('Failed to create topic');\r\n+      const data = await response.json();\r\n       \r\n+      if (!data.success) throw new Error(data.message || 'Failed to create topic');\r\n+      \r\n+      // Update topics list\r\n+      setTopics([...topics, data.data.topic]);\r\n+      setModalState({ ...modalState, showAddTopic: false });\r\n+      setNewItemData({ name: '', description: '' });\r\n       toast.success('Topic created successfully');\r\n-      return data;\r\n-\r\n-    } catch (err) {\r\n-      logger.error(`Failed to create topic: ${err instanceof Error ? err.message : String(err)}`, 'TopicsPage');\r\n+    } catch (error) {\r\n+      console.error('Error creating topic:', error);\r\n       toast.error('Failed to create topic');\r\n-      throw new Error('Failed to create topic');\r\n     }\r\n   };\r\n \r\n   const handleCreateSubtopic = async (data: { title: string; description?: string }) => {\r\n"
                },
                {
                    "date": 1739046501153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1198,38 +1198,37 @@\n       toast.error('Failed to create grade');\r\n     }\r\n   };\r\n \r\n-  const handleCreateTopic = async () => {\r\n+  const handleCreateTopic = async (data: { title: string; description?: string }) => {\r\n     if (!selectedGradeId) {\r\n       toast.error('Please select a grade first');\r\n         return;\r\n       }\r\n \r\n-    try {\r\n-      const response = await fetch(`${API_ENDPOINT}/topics`, {\r\n-        method: 'POST',\r\n-        headers: { 'Content-Type': 'application/json' },\r\n-        body: JSON.stringify({\r\n-          name: newItemData.name,\r\n-          gradeId: selectedGradeId\r\n-        })\r\n+    const newTopic = await contentService.createTopic({\r\n+        ...data,\r\n+        gradeId: selectedGradeId\r\n       });\r\n \r\n-      if (!response.ok) throw new Error('Failed to create topic');\r\n-      const data = await response.json();\r\n-      \r\n-      if (!data.success) throw new Error(data.message || 'Failed to create topic');\r\n-      \r\n-      // Update topics list\r\n-      setTopics([...topics, data.data.topic]);\r\n-      setModalState({ ...modalState, showAddTopic: false });\r\n+\r\n+      setTopics(prev => [...prev, {\r\n+        _id: newTopic.id,\r\n+        id: newTopic.id,\r\n+        name: newTopic.title,\r\n+        title: newTopic.title,\r\n+        description: newTopic.description,\r\n+        grade_id: newTopic.grade_id,\r\n+        orderIndex: prev.length\r\n+      }]);\r\n+      toast.success('Topic created successfully');\r\n+      setModalState({ ...modalState, showAddTopic: false });  \r\n       setNewItemData({ name: '', description: '' });\r\n-      toast.success('Topic created successfully');\r\n-    } catch (error) {\r\n+    } catch (err) {\r\n+      const error = err instanceof Error ? err.message : String(err);\r\n       console.error('Error creating topic:', error);\r\n       toast.error('Failed to create topic');\r\n-    }\r\n+    \r\n   };\r\n \r\n   const handleCreateSubtopic = async (data: { title: string; description?: string }) => {\r\n     try {\r\n"
                },
                {
                    "date": 1739046556437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1226,9 +1226,9 @@\n     } catch (err) {\r\n       const error = err instanceof Error ? err.message : String(err);\r\n       console.error('Error creating topic:', error);\r\n       toast.error('Failed to create topic');\r\n-    \r\n+    }\r\n   };\r\n \r\n   const handleCreateSubtopic = async (data: { title: string; description?: string }) => {\r\n     try {\r\n"
                },
                {
                    "date": 1739046775508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1199,13 +1199,15 @@\n     }\r\n   };\r\n \r\n   const handleCreateTopic = async (data: { title: string; description?: string }) => {\r\n-    if (!selectedGradeId) {\r\n-      toast.error('Please select a grade first');\r\n+    try {\r\n+      if (!selectedGradeId) {\r\n+        toast.error('Please select a grade first');\r\n         return;\r\n       }\r\n \r\n+\r\n     const newTopic = await contentService.createTopic({\r\n         ...data,\r\n         gradeId: selectedGradeId\r\n       });\r\n@@ -1223,14 +1225,18 @@\n       toast.success('Topic created successfully');\r\n       setModalState({ ...modalState, showAddTopic: false });  \r\n       setNewItemData({ name: '', description: '' });\r\n     } catch (err) {\r\n-      const error = err instanceof Error ? err.message : String(err);\r\n+      const error = err as Error;\r\n       console.error('Error creating topic:', error);\r\n       toast.error('Failed to create topic');\r\n     }\r\n+\r\n   };\r\n+    \r\n+  \r\n \r\n+\r\n   const handleCreateSubtopic = async (data: { title: string; description?: string }) => {\r\n     try {\r\n       if (!selectedTopicId) {\r\n         toast.error('Please select a topic first');\r\n"
                },
                {
                    "date": 1739047260207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1199,39 +1199,29 @@\n     }\r\n   };\r\n \r\n   const handleCreateTopic = async (data: { title: string; description?: string }) => {\r\n+    if (!selectedGradeId) {\r\n+      toast.error('Please select a grade first');\r\n+      return;\r\n+    }\r\n+\r\n     try {\r\n-      if (!selectedGradeId) {\r\n-        toast.error('Please select a grade first');\r\n-        return;\r\n-      }\r\n-\r\n-\r\n-    const newTopic = await contentService.createTopic({\r\n-        ...data,\r\n+      const newTopic = await contentService.createTopic({\r\n+        title: data.title,\r\n+        description: data.description,\r\n         gradeId: selectedGradeId\r\n       });\r\n \r\n-\r\n-      setTopics(prev => [...prev, {\r\n-        _id: newTopic.id,\r\n-        id: newTopic.id,\r\n-        name: newTopic.title,\r\n-        title: newTopic.title,\r\n-        description: newTopic.description,\r\n-        grade_id: newTopic.grade_id,\r\n-        orderIndex: prev.length\r\n-      }]);\r\n+      setTopics(prev => [...prev, newTopic]);\r\n       toast.success('Topic created successfully');\r\n-      setModalState({ ...modalState, showAddTopic: false });  \r\n+      setModalState({ ...modalState, showAddTopic: false });\r\n       setNewItemData({ name: '', description: '' });\r\n     } catch (err) {\r\n-      const error = err as Error;\r\n+      const error = err instanceof Error ? err.message : String(err);\r\n       console.error('Error creating topic:', error);\r\n       toast.error('Failed to create topic');\r\n     }\r\n-\r\n   };\r\n     \r\n   \r\n \r\n"
                },
                {
                    "date": 1739047390800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1198,18 +1198,18 @@\n       toast.error('Failed to create grade');\r\n     }\r\n   };\r\n \r\n-  const handleCreateTopic = async (data: { title: string; description?: string }) => {\r\n+  const handleCreateTopic = async () => {\r\n     if (!selectedGradeId) {\r\n       toast.error('Please select a grade first');\r\n       return;\r\n     }\r\n \r\n     try {\r\n       const newTopic = await contentService.createTopic({\r\n-        title: data.title,\r\n-        description: data.description,\r\n+        title: newItemData.name, // Map from newItemData.name to title\r\n+        description: newItemData.description,\r\n         gradeId: selectedGradeId\r\n       });\r\n \r\n       setTopics(prev => [...prev, newTopic]);\r\n"
                },
                {
                    "date": 1739047871266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -568,9 +568,9 @@\n       const lessonData = {\r\n         id: currentLessonId,\r\n         title: lessonTitle,\r\n         subtopic_id: selectedSubtopicId,\r\n-        //user_id: session.user.id,\r\n+        user_id: session.user.id,\r\n         updated_at: new Date().toISOString(),\r\n         ...((!existingLesson ? { subtopic_id: selectedSubtopicId } : {}))\r\n       };\r\n       \r\n"
                },
                {
                    "date": 1739047991109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n   AlertDialogFooter,\r\n   AlertDialogHeader,\r\n   AlertDialogTitle,\r\n } from \"@/components/ui/alert-dialog\";\r\n-import { debounce } from 'lodash';\r\n+import { debounce, isNull } from 'lodash';\r\n import { PostgrestError } from '@supabase/supabase-js';\r\n import { Question as ContentQuestion } from './types';  // Import the specific type\r\n \r\n \r\n@@ -559,9 +559,9 @@\n         return;\r\n       }\r\n \r\n       // If lesson exists but we don't own it\r\n-      if (existingLesson && existingLesson.user_id !== session.user.id) {\r\n+      if (existingLesson && existingLesson.user_id !== session.user.id && !isNull) {\r\n         toast.error('You do not have permission to edit this lesson');\r\n         return;\r\n       }\r\n \r\n"
                },
                {
                    "date": 1739048604242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -539,47 +539,39 @@\n         toast.error('Please select a subtopic and lesson first');\r\n         return;\r\n       }\r\n \r\n-      const { data: { session } } = await supabase.auth.getSession();\r\n+      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\r\n+      if (sessionError) throw sessionError;\r\n+      \r\n       if (!session?.user) {\r\n         toast.error('Please sign in to save lessons');\r\n         return;\r\n       }\r\n \r\n-      // First check if we own this lesson\r\n-      const { data: existingLesson, error: checkError } = await supabase\r\n-        .from('lessons')\r\n-        .select('user_id')\r\n-        .eq('id', currentLessonId)\r\n-        .single();\r\n+      // Get user's role from session\r\n+      const userRole = session.user.user_metadata?.role;\r\n+      console.log('Current user role:', userRole); // Debug log\r\n \r\n-      if (checkError) {\r\n-        console.error('Error checking lesson ownership:', checkError);\r\n-        toast.error('Failed to verify lesson ownership');\r\n-        return;\r\n-      }\r\n-\r\n-      // If lesson exists but we don't own it\r\n-      if (existingLesson && existingLesson.user_id !== session.user.id && !isNull) {\r\n-        toast.error('You do not have permission to edit this lesson');\r\n-        return;\r\n-      }\r\n-\r\n       const lessonData = {\r\n         id: currentLessonId,\r\n         title: lessonTitle,\r\n+        topic_id: selectedTopicId,\r\n         subtopic_id: selectedSubtopicId,\r\n         user_id: session.user.id,\r\n         updated_at: new Date().toISOString(),\r\n-        ...((!existingLesson ? { subtopic_id: selectedSubtopicId } : {}))\r\n+        ...((!existingLesson ? { subtopic_id: selectedSubtopicId } : {})),\r\n+        role: userRole // Include role in the payload\r\n       };\r\n       \r\n       console.log('📦 Data being sent to Supabase:', lessonData);\r\n \r\n-      const { error: lessonError } = await supabase\r\n+      const { data, error: lessonError } = await supabase\r\n         .from('lessons')\r\n-        .upsert(lessonData, { onConflict: 'id' });\r\n+        .upsert(lessonData, { \r\n+          onConflict: 'id',\r\n+          returning: 'minimal' // Only return minimal data\r\n+        });\r\n \r\n       if (lessonError) throw lessonError;\r\n \r\n       // 2. Save lesson content\r\n@@ -672,11 +664,12 @@\n         if (activitiesError) throw activitiesError;\r\n       }\r\n \r\n       toast.success('Lesson saved successfully');\r\n-    } catch (error) {\r\n+    } catch (err) {\r\n+      const error = err as PostgrestError;\r\n       console.error('Save error:', error);\r\n-      toast.error('Failed to save lesson');\r\n+      toast.error(`Failed to save lesson: ${error.message}`);\r\n     }\r\n   };\r\n \r\n   const handleSaveQuestion = async (question: Question, index: number) => {\r\n"
                },
                {
                    "date": 1739048670879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -558,9 +558,9 @@\n         topic_id: selectedTopicId,\r\n         subtopic_id: selectedSubtopicId,\r\n         user_id: session.user.id,\r\n         updated_at: new Date().toISOString(),\r\n-        ...((!existingLesson ? { subtopic_id: selectedSubtopicId } : {})),\r\n+        subtopic_id: selectedSubtopicId,\r\n         role: userRole // Include role in the payload\r\n       };\r\n       \r\n       console.log('📦 Data being sent to Supabase:', lessonData);\r\n"
                },
                {
                    "date": 1739048740378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -558,19 +558,18 @@\n         topic_id: selectedTopicId,\r\n         subtopic_id: selectedSubtopicId,\r\n         user_id: session.user.id,\r\n         updated_at: new Date().toISOString(),\r\n-        subtopic_id: selectedSubtopicId,\r\n         role: userRole // Include role in the payload\r\n       };\r\n       \r\n+\r\n       console.log('📦 Data being sent to Supabase:', lessonData);\r\n \r\n       const { data, error: lessonError } = await supabase\r\n         .from('lessons')\r\n         .upsert(lessonData, { \r\n-          onConflict: 'id',\r\n-          returning: 'minimal' // Only return minimal data\r\n+          onConflict: 'id'\r\n         });\r\n \r\n       if (lessonError) throw lessonError;\r\n \r\n"
                },
                {
                    "date": 1739050934922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -554,13 +554,27 @@\n \r\n       const lessonData = {\r\n         id: currentLessonId,\r\n         title: lessonTitle,\r\n+        content: lessonContent,\r\n+        metadata: JSON.stringify({\r\n+          lastEdited: new Date().toISOString(),\r\n+          version: 1,\r\n+          status: 'draft' \r\n+        }),\r\n+        content_type: 'html',\r\n+        lesson_type: 'lesson',\r\n         topic_id: selectedTopicId,\r\n+        grade_id: selectedGradeId,\r\n         subtopic_id: selectedSubtopicId,\r\n         user_id: session.user.id,\r\n         updated_at: new Date().toISOString(),\r\n-        role: userRole // Include role in the payload\r\n+        role: userRole, // Include role in the payload\r\n+        description: '',\r\n+        prerequisites: [],\r\n+        media_type: 'image' ,\r\n+        media_url: '',\r\n+        contentheading: '',\r\n       };\r\n       \r\n \r\n       console.log('📦 Data being sent to Supabase:', lessonData);\r\n"
                },
                {
                    "date": 1739108608201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -562,10 +562,10 @@\n           status: 'draft' \r\n         }),\r\n         content_type: 'html',\r\n         lesson_type: 'lesson',\r\n-        topic_id: selectedTopicId,\r\n         grade_id: selectedGradeId,\r\n+        topic_id: selectedTopicId, \r\n         subtopic_id: selectedSubtopicId,\r\n         user_id: session.user.id,\r\n         updated_at: new Date().toISOString(),\r\n         role: userRole, // Include role in the payload\r\n"
                },
                {
                    "date": 1739109791097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -549,10 +549,11 @@\n       }\r\n \r\n       // Get user's role from session\r\n       const userRole = session.user.user_metadata?.role;\r\n-      console.log('Current user role:', userRole); // Debug log\r\n+      console.log('Current user role:', userRole);\r\n \r\n+      // Complete lesson data with all fields\r\n       const lessonData = {\r\n         id: currentLessonId,\r\n         title: lessonTitle,\r\n         content: lessonContent,\r\n@@ -563,28 +564,29 @@\n         }),\r\n         content_type: 'html',\r\n         lesson_type: 'lesson',\r\n         grade_id: selectedGradeId,\r\n-        topic_id: selectedTopicId, \r\n+        topic_id: selectedTopicId,\r\n         subtopic_id: selectedSubtopicId,\r\n         user_id: session.user.id,\r\n         updated_at: new Date().toISOString(),\r\n         role: userRole, // Include role in the payload\r\n         description: '',\r\n         prerequisites: [],\r\n-        media_type: 'image' ,\r\n+        media_type: 'image',\r\n         media_url: '',\r\n-        contentheading: '',\r\n+        contentheading: contentHeading || ''\r\n       };\r\n-      \r\n \r\n       console.log('📦 Data being sent to Supabase:', lessonData);\r\n \r\n+      // Save lesson with all fields\r\n       const { data, error: lessonError } = await supabase\r\n         .from('lessons')\r\n         .upsert(lessonData, { \r\n           onConflict: 'id'\r\n-        });\r\n+        })\r\n+        .select();\r\n \r\n       if (lessonError) throw lessonError;\r\n \r\n       // 2. Save lesson content\r\n@@ -603,8 +605,10 @@\n           version: 1,\r\n           status: 'draft'\r\n         }),\r\n         content_type: 'html',\r\n+        user_id: session.user.id,\r\n+        updated_at: new Date().toISOString(),\r\n         created_at: new Date().toISOString()\r\n       };\r\n \r\n       const { error: contentError } = await supabase\r\n"
                },
                {
                    "date": 1739110024659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -551,18 +551,21 @@\n       // Get user's role from session\r\n       const userRole = session.user.user_metadata?.role;\r\n       console.log('Current user role:', userRole);\r\n \r\n+      // Create metadata object\r\n+      const lessonMetadata = {\r\n+        lastEdited: new Date().toISOString(),\r\n+        version: 1,\r\n+        status: 'draft' \r\n+      };\r\n+\r\n       // Complete lesson data with all fields\r\n       const lessonData = {\r\n         id: currentLessonId,\r\n         title: lessonTitle,\r\n         content: lessonContent,\r\n-        metadata: JSON.stringify({\r\n-          lastEdited: new Date().toISOString(),\r\n-          version: 1,\r\n-          status: 'draft' \r\n-        }),\r\n+        metadata: lessonMetadata, // Supabase will automatically handle JSON conversion\r\n         content_type: 'html',\r\n         lesson_type: 'lesson',\r\n         grade_id: selectedGradeId,\r\n         topic_id: selectedTopicId,\r\n@@ -595,17 +598,19 @@\n         .select('id')\r\n         .eq('lesson_id', currentLessonId)\r\n         .single();\r\n \r\n+      const contentMetadata = {\r\n+        lastEdited: new Date().toISOString(),\r\n+        version: 1,\r\n+        status: 'draft'\r\n+      };\r\n+\r\n       const contentUpdate = {\r\n         id: existingContent?.id || crypto.randomUUID(),\r\n         lesson_id: currentLessonId,\r\n         content: [lessonContent],\r\n-        metadata: JSON.stringify({\r\n-          lastEdited: new Date().toISOString(),\r\n-          version: 1,\r\n-          status: 'draft'\r\n-        }),\r\n+        metadata: contentMetadata, // Supabase will automatically handle JSON conversion\r\n         content_type: 'html',\r\n         user_id: session.user.id,\r\n         updated_at: new Date().toISOString(),\r\n         created_at: new Date().toISOString()\r\n"
                },
                {
                    "date": 1739110141865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2464,9 +2464,15 @@\n                                       key={index}\r\n                                       question={{ \r\n                                         ...question, \r\n                                         lesson_id: currentLessonId || '',\r\n-                                        type: (question.type || 'speaking') as Question['type']  // Default to 'speaking' if undefined\r\n+                                        data: {\r\n+                                          prompt: question.data?.prompt || '',\r\n+                                          teacherScript: question.data?.teacherScript || '',\r\n+                                          followup_prompt: question.data?.followup_prompt || [],\r\n+                                          sampleAnswer: question.data?.sampleAnswer,\r\n+                                          answer: question.data?.answer\r\n+                                        }\r\n                                       }}\r\n                                       index={index}\r\n                                       onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\r\n                                         await handleUpdateQuestion(index, {\r\n"
                },
                {
                    "date": 1739110175249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2464,8 +2464,9 @@\n                                       key={index}\r\n                                       question={{ \r\n                                         ...question, \r\n                                         lesson_id: currentLessonId || '',\r\n+                                        type: (question.type || 'speaking') as Question['type'],\r\n                                         data: {\r\n                                           prompt: question.data?.prompt || '',\r\n                                           teacherScript: question.data?.teacherScript || '',\r\n                                           followup_prompt: question.data?.followup_prompt || [],\r\n"
                },
                {
                    "date": 1739110207157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2464,9 +2464,9 @@\n                                       key={index}\r\n                                       question={{ \r\n                                         ...question, \r\n                                         lesson_id: currentLessonId || '',\r\n-                                        type: (question.type || 'speaking') as Question['type'],\r\n+                                        type: isValidQuestionType(question.type) ? question.type : 'speaking',\r\n                                         data: {\r\n                                           prompt: question.data?.prompt || '',\r\n                                           teacherScript: question.data?.teacherScript || '',\r\n                                           followup_prompt: question.data?.followup_prompt || [],\r\n"
                },
                {
                    "date": 1739110245298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -219,12 +219,16 @@\n   exercisePrompts: ExercisePrompt[];\r\n   isDraft?: boolean;\r\n }\r\n \r\n+// Add at the top of the file with other type definitions\r\n+type QuestionType = keyof typeof QUESTION_TYPES;\r\n \r\n+// Add this type guard function\r\n+const isValidQuestionType = (type: string): type is QuestionType => {\r\n+  return type in QUESTION_TYPES;\r\n+};\r\n \r\n-\r\n-\r\n // Update handleAddQuestion\r\n \r\n \r\n // Update validateQuestion\r\n"
                },
                {
                    "date": 1739110474670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -323,9 +323,9 @@\n \r\n   // Add new state for tracking save status\r\n   interface SaveStatus {\r\n     id: string;\r\n-    status: 'draft' | 'saved' | 'saving' | 'error';\r\n+    status: 'draft' | 'saved' | 'saving' | 'error' | 'draft';\r\n     lastSaved?: string;\r\n   }\r\n \r\n   const [questionSaveStatuses, setQuestionSaveStatuses] = useState<Array<{\r\n"
                },
                {
                    "date": 1739111131049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -554,8 +554,14 @@\n \r\n       // Get user's role from session\r\n       const userRole = session.user.user_metadata?.role;\r\n       console.log('Current user role:', userRole);\r\n+      console.log('📝 Saving content heading:', {\r\n+        contentHeading,\r\n+        currentLessonId,\r\n+        selectedSubtopicId,\r\n+        timestamp: new Date().toISOString()\r\n+      });\r\n \r\n       // Create metadata object\r\n       const lessonMetadata = {\r\n         lastEdited: new Date().toISOString(),\r\n@@ -689,13 +695,23 @@\n \r\n         if (activitiesError) throw activitiesError;\r\n       }\r\n \r\n+      // After successful save\r\n+      console.log('✅ Content heading saved successfully:', {\r\n+        contentHeading,\r\n+        lessonId: currentLessonId,\r\n+        timestamp: new Date().toISOString()\r\n+      });\r\n+\r\n       toast.success('Lesson saved successfully');\r\n     } catch (err) {\r\n-      const error = err as PostgrestError;\r\n-      console.error('Save error:', error);\r\n-      toast.error(`Failed to save lesson: ${error.message}`);\r\n+      console.error('❌ Error saving content heading:', {\r\n+        error: err,\r\n+        contentHeading,\r\n+        lessonId: currentLessonId\r\n+      });\r\n+      toast.error(`Failed to save lesson: ${err.message}`);\r\n     }\r\n   };\r\n \r\n   const handleSaveQuestion = async (question: Question, index: number) => {\r\n"
                },
                {
                    "date": 1739111234121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -704,14 +704,16 @@\n       });\r\n \r\n       toast.success('Lesson saved successfully');\r\n     } catch (err) {\r\n+      const error = err as PostgrestError;\r\n       console.error('❌ Error saving content heading:', {\r\n-        error: err,\r\n+        error: error.message,\r\n         contentHeading,\r\n         lessonId: currentLessonId\r\n       });\r\n-      toast.error(`Failed to save lesson: ${err.message}`);\r\n+      toast.error(`Failed to save lesson: ${error.message}`);\r\n+\r\n     }\r\n   };\r\n \r\n   const handleSaveQuestion = async (question: Question, index: number) => {\r\n"
                },
                {
                    "date": 1739111339266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -708,12 +708,15 @@\n       const error = err as PostgrestError;\r\n       console.error('❌ Error saving content heading:', {\r\n         error: error.message,\r\n         contentHeading,\r\n-        lessonId: currentLessonId\r\n+        lessonContent,\r\n+        lessonId: currentLessonId,\r\n+        timestamp: new Date().toISOString()\r\n       });\r\n       toast.error(`Failed to save lesson: ${error.message}`);\r\n \r\n+\r\n     }\r\n   };\r\n \r\n   const handleSaveQuestion = async (question: Question, index: number) => {\r\n"
                },
                {
                    "date": 1739111465566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1768,8 +1768,18 @@\n       toast.error('Failed to refresh content');\r\n     }\r\n   };\r\n \r\n+  // Update the sidebar hover mechanism\r\n+  const handleSidebarHover = useCallback(\r\n+    debounce((isHovering: boolean) => {\r\n+      if (!isSidebarLocked && !isNavigating) {\r\n+        setIsSidebarCollapsed(!isHovering);\r\n+      }\r\n+    }, 150), // Add small delay for smoother transition\r\n+    [isSidebarLocked, isNavigating]\r\n+  );\r\n+\r\n   // Render\r\n   return (\r\n       <div className=\"container mx-auto py-8\">\r\n         {/* Header */}\r\n@@ -1810,13 +1820,22 @@\n         </div>\r\n         \r\n         {/* Main content wrapper - Fix the layout here */}\r\n         <div className=\"flex gap-6 h-[calc(100vh-200px)]\">\r\n-          {/* Left Sidebar with collapse/expand functionality */}\r\n+          {/* Improved sidebar */}\r\n           <div \r\n             className={cn(\r\n               \"transition-all duration-300 ease-in-out relative\",\r\n               isSidebarCollapsed ? \"w-20\" : \"w-80\",\r\n+              \"flex-shrink-0 group\"\r\n+            )}\r\n+            onMouseEnter={() => handleSidebarHover(true)}\r\n+            onMouseLeave={() => handleSidebarHover(false)}\r\n+          >\r\n+            <Card className={cn(\r\n+              \"h-full relative\",\r\n+              \"transition-shadow duration-300\",\r\n+              \"hover:shadow-lg\"\r\n               \"flex-shrink-0\"\r\n             )}\r\n             onMouseEnter={() => !isSidebarLocked && setIsSidebarCollapsed(false)}\r\n             onMouseLeave={() => !isSidebarLocked && setIsSidebarCollapsed(true)}\r\n"
                },
                {
                    "date": 1739111493152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1768,18 +1768,8 @@\n       toast.error('Failed to refresh content');\r\n     }\r\n   };\r\n \r\n-  // Update the sidebar hover mechanism\r\n-  const handleSidebarHover = useCallback(\r\n-    debounce((isHovering: boolean) => {\r\n-      if (!isSidebarLocked && !isNavigating) {\r\n-        setIsSidebarCollapsed(!isHovering);\r\n-      }\r\n-    }, 150), // Add small delay for smoother transition\r\n-    [isSidebarLocked, isNavigating]\r\n-  );\r\n-\r\n   // Render\r\n   return (\r\n       <div className=\"container mx-auto py-8\">\r\n         {/* Header */}\r\n@@ -1820,22 +1810,13 @@\n         </div>\r\n         \r\n         {/* Main content wrapper - Fix the layout here */}\r\n         <div className=\"flex gap-6 h-[calc(100vh-200px)]\">\r\n-          {/* Improved sidebar */}\r\n+          {/* Left Sidebar with collapse/expand functionality */}\r\n           <div \r\n             className={cn(\r\n               \"transition-all duration-300 ease-in-out relative\",\r\n               isSidebarCollapsed ? \"w-20\" : \"w-80\",\r\n-              \"flex-shrink-0 group\"\r\n-            )}\r\n-            onMouseEnter={() => handleSidebarHover(true)}\r\n-            onMouseLeave={() => handleSidebarHover(false)}\r\n-          >\r\n-            <Card className={cn(\r\n-              \"h-full relative\",\r\n-              \"transition-shadow duration-300\",\r\n-              \"hover:shadow-lg\"\r\n               \"flex-shrink-0\"\r\n             )}\r\n             onMouseEnter={() => !isSidebarLocked && setIsSidebarCollapsed(false)}\r\n             onMouseLeave={() => !isSidebarLocked && setIsSidebarCollapsed(true)}\r\n@@ -2328,12 +2309,12 @@\n                                               }}\r\n                                             >\r\n                                               <CardHeader className=\"py-3\">\r\n                                                 <div className=\"flex flex-col gap-2\">\r\n-                                                  <div className=\"flex items-center gap-2\">\r\n+                                                    <div className=\"flex items-center gap-2\">\r\n                                                     <BookOpen className=\"h-4 w-4 text-primary\" />\r\n-                                                    <span className=\"font-medium\">{lesson.title}</span>\r\n-                                                  </div>\r\n+                                                      <span className=\"font-medium\">{lesson.title}</span>\r\n+                                                    </div>\r\n                                                   <div className=\"flex items-center gap-2\">\r\n                                                     <Badge variant=\"outline\" className=\"bg-primary/5\">\r\n                                                       {lesson.questions?.length || 0} Questions\r\n                                                     </Badge>\r\n@@ -2370,11 +2351,11 @@\n                     <Card>\r\n                       <CardHeader>\r\n                         <div className=\"flex items-center justify-between mb-4\">\r\n                           <h2 className=\"text-2xl font-bold\">Lesson Content</h2>\r\n-                          <Button \r\n-                            variant=\"outline\" \r\n-                            size=\"sm\"\r\n+                                                    <Button\r\n+                                                      variant=\"outline\"\r\n+                                                      size=\"sm\"\r\n                             onClick={() => setIsContentEditorOpen(true)}\r\n                           >\r\n                             <Pencil className=\"h-4 w-4 mr-2\" />\r\n                             Edit Content\r\n@@ -2546,9 +2527,9 @@\n                                     ) : (\r\n                                       <Save className=\"h-4 w-4 mr-2\" />\r\n                                     )}\r\n                                     Save Question\r\n-                                  </Button>\r\n+                                                    </Button>\r\n                                     {/* Exercise Prompts with Save Buttons */}\r\n                                     {question.exercisePrompts?.map((prompt, promptIndex) => (\r\n                                       <div key={`${question.id}-prompt-${promptIndex}`} className=\"mt-4\"> {/* Updated key */}\r\n                                         <div className=\"flex items-center justify-between mb-2\">\r\n@@ -2584,9 +2565,9 @@\n                                                 : 'default'\r\n                                             }>\r\n                                               {promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}\r\n                                             </Badge>\r\n-                                          </div>\r\n+                                                  </div>\r\n                                         </div>\r\n                                         <ExercisePromptCard\r\n                                           key={prompt.id} // Add a unique key here\r\n                                           prompt={prompt}\r\n"
                },
                {
                    "date": 1739111655180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1768,9 +1768,19 @@\n       toast.error('Failed to refresh content');\r\n     }\r\n   };\r\n \r\n-  // Render\r\n+  // Update the sidebar hover mechanism\r\n+  const handleSidebarHover = useCallback(\r\n+    debounce((isHovering: boolean) => {\r\n+      if (!isSidebarLocked && !isNavigating) {\r\n+        setIsSidebarCollapsed(!isHovering);\r\n+      }\r\n+    }, 150), // Add small delay for smoother transition\r\n+    [isSidebarLocked, isNavigating]\r\n+  );\r\n+\r\n+  // Update the sidebar and card styles\r\n   return (\r\n       <div className=\"container mx-auto py-8\">\r\n         {/* Header */}\r\n         <div className=\"flex items-center justify-between mb-2\">\r\n@@ -1810,19 +1820,23 @@\n         </div>\r\n         \r\n         {/* Main content wrapper - Fix the layout here */}\r\n         <div className=\"flex gap-6 h-[calc(100vh-200px)]\">\r\n-          {/* Left Sidebar with collapse/expand functionality */}\r\n+          {/* Improved sidebar */}\r\n           <div \r\n             className={cn(\r\n               \"transition-all duration-300 ease-in-out relative\",\r\n               isSidebarCollapsed ? \"w-20\" : \"w-80\",\r\n-              \"flex-shrink-0\"\r\n+              \"flex-shrink-0 group\"\r\n             )}\r\n-            onMouseEnter={() => !isSidebarLocked && setIsSidebarCollapsed(false)}\r\n-            onMouseLeave={() => !isSidebarLocked && setIsSidebarCollapsed(true)}\r\n+            onMouseEnter={() => handleSidebarHover(true)}\r\n+            onMouseLeave={() => handleSidebarHover(false)}\r\n           >\r\n-            <Card className=\"h-full relative\">\r\n+            <Card className={cn(\r\n+              \"h-full relative\",\r\n+              \"transition-shadow duration-300\",\r\n+              \"hover:shadow-lg\"\r\n+            )}>\r\n               {/* Lock button - only show after lesson selection */}\r\n               {currentLessonId && (\r\n                 <Button\r\n                   variant=\"ghost\"\r\n@@ -2299,27 +2313,59 @@\n                                           .filter(lesson => lesson.subtopic_id === subtopic.id)\r\n                                           .map((lesson) => (\r\n                                             <Card \r\n                                               key={lesson.id} \r\n-                                              className=\"cursor-pointer hover:bg-accent transition-colors duration-200\"\r\n-                                              onClick={() => {\r\n-                                                setCurrentLessonId(lesson.id || '');\r\n-                                                setSelectedTopicId(topic.id || '');\r\n-                                                setSelectedSubtopicId(subtopic.id || '');\r\n-                                                setIsViewMode(false);\r\n-                                              }}\r\n+                                              className={cn(\r\n+                                                \"cursor-pointer transition-all duration-200\",\r\n+                                                \"hover:shadow-md hover:translate-y-[-2px]\",\r\n+                                                \"hover:bg-accent/50 hover:border-primary/50\",\r\n+                                                \"active:translate-y-[0px]\",\r\n+                                                currentLessonId === lesson.id && \"border-primary bg-accent/50 shadow-md\",\r\n+                                                \"group\" // Enable group hover effects\r\n+                                              )}\r\n+                                              onClick={() => handleLessonSelect(lesson.id || '')}\r\n                                             >\r\n-                                              <CardHeader className=\"py-3\">\r\n+                                              <CardHeader className=\"p-4\">\r\n                                                 <div className=\"flex flex-col gap-2\">\r\n+                                                  <div className=\"flex items-center justify-between\">\r\n                                                     <div className=\"flex items-center gap-2\">\r\n-                                                    <BookOpen className=\"h-4 w-4 text-primary\" />\r\n+                                                      <BookOpen className={cn(\r\n+                                                        \"h-4 w-4 text-primary\",\r\n+                                                        \"transition-transform duration-200\",\r\n+                                                        \"group-hover:scale-110\"\r\n+                                                      )} />\r\n                                                       <span className=\"font-medium\">{lesson.title}</span>\r\n                                                     </div>\r\n+                                                    <Button\r\n+                                                      variant=\"outline\"\r\n+                                                      size=\"sm\"\r\n+                                                      className={cn(\r\n+                                                        \"opacity-0 group-hover:opacity-100\",\r\n+                                                        \"transition-all duration-200\",\r\n+                                                        \"hover:bg-primary hover:text-primary-foreground\"\r\n+                                                      )}\r\n+                                                      disabled={!lesson.content || currentLessonId !== lesson.id}\r\n+                                                      onClick={(e) => {\r\n+                                                        e.stopPropagation();\r\n+                                                        window.location.href = `/teacher/lessons/${lesson.id}`;\r\n+                                                      }}\r\n+                                                    >\r\n+                                                      Start Lesson\r\n+                                                    </Button>\r\n+                                                  </div>\r\n                                                   <div className=\"flex items-center gap-2\">\r\n-                                                    <Badge variant=\"outline\" className=\"bg-primary/5\">\r\n+                                                    <Badge variant=\"outline\" className={cn(\r\n+                                                      \"bg-primary/5\",\r\n+                                                      \"transition-colors duration-200\",\r\n+                                                      \"group-hover:bg-primary/10\"\r\n+                                                    )}>\r\n                                                       {lesson.questions?.length || 0} Questions\r\n                                                     </Badge>\r\n-                                                    <Badge variant=\"outline\" className=\"bg-primary/5\">\r\n+                                                    <Badge variant=\"outline\" className={cn(\r\n+                                                      \"bg-primary/5\",\r\n+                                                      \"transition-colors duration-200\",\r\n+                                                      \"group-hover:bg-primary/10\"\r\n+                                                    )}>\r\n                                                       {lesson.activities?.length || 0} Activities\r\n                                                     </Badge>\r\n                                                   </div>\r\n                                                 </div>\r\n"
                },
                {
                    "date": 1739111767450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1772,14 +1772,53 @@\n   // Update the sidebar hover mechanism\r\n   const handleSidebarHover = useCallback(\r\n     debounce((isHovering: boolean) => {\r\n       if (!isSidebarLocked && !isNavigating) {\r\n-        setIsSidebarCollapsed(!isHovering);\r\n+        // Don't collapse if user is actively selecting\r\n+        if (isHovering || document.activeElement?.closest('.sidebar-content')) {\r\n+          setIsSidebarCollapsed(false);\r\n+        } else {\r\n+          // Add a small delay before collapsing\r\n+          setTimeout(() => {\r\n+            setIsSidebarCollapsed(true);\r\n+          }, 300);\r\n+        }\r\n       }\r\n-    }, 150), // Add small delay for smoother transition\r\n+    }, 100), // Reduced debounce time for more responsive hover\r\n     [isSidebarLocked, isNavigating]\r\n   );\r\n \r\n+  // Update the sidebar JSX\r\n+  <div \r\n+    className={cn(\r\n+      \"transition-all duration-300 ease-in-out relative\",\r\n+      isSidebarCollapsed ? \"w-20\" : \"w-80\",\r\n+      \"flex-shrink-0 group\"\r\n+    )}\r\n+    onMouseEnter={() => {\r\n+      handleSidebarHover(true);\r\n+      // Immediately expand on mouse enter\r\n+      if (!isSidebarLocked) {\r\n+        setIsSidebarCollapsed(false);\r\n+      }\r\n+    }}\r\n+    onMouseLeave={() => {\r\n+      // Only collapse if not interacting with content\r\n+      if (!document.activeElement?.closest('.sidebar-content')) {\r\n+        handleSidebarHover(false);\r\n+      }\r\n+    }}\r\n+    onFocus={() => setIsSidebarCollapsed(false)}\r\n+  >\r\n+    <Card className={cn(\r\n+      \"h-full relative sidebar-content\", // Added sidebar-content class\r\n+      \"transition-shadow duration-300\",\r\n+      \"hover:shadow-lg\"\r\n+    )}>\r\n+      {/* Rest of sidebar content */}\r\n+    </Card>\r\n+  </div>\r\n+\r\n   // Update the sidebar and card styles\r\n   return (\r\n       <div className=\"container mx-auto py-8\">\r\n         {/* Header */}\r\n@@ -1827,13 +1866,25 @@\n               \"transition-all duration-300 ease-in-out relative\",\r\n               isSidebarCollapsed ? \"w-20\" : \"w-80\",\r\n               \"flex-shrink-0 group\"\r\n             )}\r\n-            onMouseEnter={() => handleSidebarHover(true)}\r\n-            onMouseLeave={() => handleSidebarHover(false)}\r\n+            onMouseEnter={() => {\r\n+              handleSidebarHover(true);\r\n+              // Immediately expand on mouse enter\r\n+              if (!isSidebarLocked) {\r\n+                setIsSidebarCollapsed(false);\r\n+              }\r\n+            }}\r\n+            onMouseLeave={() => {\r\n+              // Only collapse if not interacting with content\r\n+              if (!document.activeElement?.closest('.sidebar-content')) {\r\n+                handleSidebarHover(false);\r\n+              }\r\n+            }}\r\n+            onFocus={() => setIsSidebarCollapsed(false)}\r\n           >\r\n             <Card className={cn(\r\n-              \"h-full relative\",\r\n+              \"h-full relative sidebar-content\", // Added sidebar-content class\r\n               \"transition-shadow duration-300\",\r\n               \"hover:shadow-lg\"\r\n             )}>\r\n               {/* Lock button - only show after lesson selection */}\r\n"
                },
                {
                    "date": 1739111876873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -333,8 +333,11 @@\n     status: 'idle' | 'saving' | 'saved' | 'error' | 'draft';\r\n   }>>([]);\r\n   const [promptSaveStatuses, setPromptSaveStatuses] = useState<SaveStatus[]>([]);\r\n \r\n+  // Add this state to track dropdown state\r\n+  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n+\r\n   // Event handlers\r\n   const handleQuestionTypeChange = useCallback((type: string) => {\r\n     if (isQuestionType(type)) {\r\n       setSelectedQuestionType(type);\r\n@@ -1771,21 +1774,21 @@\n \r\n   // Update the sidebar hover mechanism\r\n   const handleSidebarHover = useCallback(\r\n     debounce((isHovering: boolean) => {\r\n-      if (!isSidebarLocked && !isNavigating) {\r\n-        // Don't collapse if user is actively selecting\r\n+      if (!isSidebarLocked && !isNavigating && !isDropdownOpen) {\r\n         if (isHovering || document.activeElement?.closest('.sidebar-content')) {\r\n           setIsSidebarCollapsed(false);\r\n         } else {\r\n-          // Add a small delay before collapsing\r\n           setTimeout(() => {\r\n-            setIsSidebarCollapsed(true);\r\n+            if (!isDropdownOpen) { // Only collapse if dropdown is closed\r\n+              setIsSidebarCollapsed(true);\r\n+            }\r\n           }, 300);\r\n         }\r\n       }\r\n-    }, 100), // Reduced debounce time for more responsive hover\r\n-    [isSidebarLocked, isNavigating]\r\n+    }, 100),\r\n+    [isSidebarLocked, isNavigating, isDropdownOpen]\r\n   );\r\n \r\n   // Update the sidebar JSX\r\n   <div \r\n@@ -2175,10 +2178,30 @@\n                         </div>\r\n                           <Select \r\n                             value={currentLessonId || ''} \r\n                             onValueChange={handleLessonSelect}\r\n+                            onOpenChange={(open) => {\r\n+                              setIsDropdownOpen(open);\r\n+                              if (open) {\r\n+                                setIsSidebarCollapsed(false);\r\n+                                setIsSidebarLocked(true);\r\n+                              } else {\r\n+                                // Small delay before unlocking to prevent immediate collapse\r\n+                                setTimeout(() => {\r\n+                                  setIsSidebarLocked(false);\r\n+                                }, 100);\r\n+                              }\r\n+                            }}\r\n                           >\r\n-                            <SelectTrigger id=\"lesson-select\" className=\"w-full\">\r\n+                            <SelectTrigger \r\n+                              id=\"lesson-select\" \r\n+                              className=\"w-full\"\r\n+                              onClick={(e) => {\r\n+                                e.stopPropagation();\r\n+                                setIsSidebarCollapsed(false);\r\n+                                setIsSidebarLocked(true);\r\n+                              }}\r\n+                            >\r\n                               <SelectValue placeholder=\"Select Lesson\" />\r\n                             </SelectTrigger>\r\n                             <SelectContent>\r\n                               {lessons\r\n"
                },
                {
                    "date": 1739133146597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2609,16 +2609,9 @@\n                                       key={index}\r\n                                       question={{ \r\n                                         ...question, \r\n                                         lesson_id: currentLessonId || '',\r\n-                                        type: isValidQuestionType(question.type) ? question.type : 'speaking',\r\n-                                        data: {\r\n-                                          prompt: question.data?.prompt || '',\r\n-                                          teacherScript: question.data?.teacherScript || '',\r\n-                                          followup_prompt: question.data?.followup_prompt || [],\r\n-                                          sampleAnswer: question.data?.sampleAnswer,\r\n-                                          answer: question.data?.answer\r\n-                                        }\r\n+                                        type: (question.type || 'speaking') as keyof typeof QUESTION_TYPES\r\n                                       }}\r\n                                       index={index}\r\n                                       onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\r\n                                         await handleUpdateQuestion(index, {\r\n"
                },
                {
                    "date": 1739688759627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2609,9 +2609,16 @@\n                                       key={index}\r\n                                       question={{ \r\n                                         ...question, \r\n                                         lesson_id: currentLessonId || '',\r\n-                                        type: (question.type || 'speaking') as keyof typeof QUESTION_TYPES\r\n+                                        type: isValidQuestionType(question.type) ? question.type : 'speaking',\r\n+                                        data: {\r\n+                                          prompt: question.data?.prompt || '',\r\n+                                          teacherScript: question.data?.teacherScript || '',\r\n+                                          followup_prompt: question.data?.followup_prompt || [],\r\n+                                          sampleAnswer: question.data?.sampleAnswer?,\r\n+                                          answer: question.data?.answer\r\n+                                        }\r\n                                       }}\r\n                                       index={index}\r\n                                       onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\r\n                                         await handleUpdateQuestion(index, {\r\n"
                },
                {
                    "date": 1739688771726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2614,9 +2614,9 @@\n                                         data: {\r\n                                           prompt: question.data?.prompt || '',\r\n                                           teacherScript: question.data?.teacherScript || '',\r\n                                           followup_prompt: question.data?.followup_prompt || [],\r\n-                                          sampleAnswer: question.data?.sampleAnswer?,\r\n+                                          sampleAnswer: question.data?.sampleAnswer,\r\n                                           answer: question.data?.answer\r\n                                         }\r\n                                       }}\r\n                                       index={index}\r\n"
                },
                {
                    "date": 1739688817045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2417,9 +2417,9 @@\n                                                         \"transition-all duration-200\",\r\n                                                         \"hover:bg-primary hover:text-primary-foreground\"\r\n                                                       )}\r\n                                                       disabled={!lesson.content || currentLessonId !== lesson.id}\r\n-                                                      onClick={(e) => {\r\n+                                                      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\r\n                                                         e.stopPropagation();\r\n                                                         window.location.href = `/teacher/lessons/${lesson.id}`;\r\n                                                       }}\r\n                                                     >\r\n"
                },
                {
                    "date": 1739689839380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1444 @@\n+\"use client\";\r\n+\r\n+import { useState, useCallback, useEffect, useRef } from 'react';\r\n+import { toast } from 'sonner';\r\n+import { Toaster } from 'sonner';\r\n+import Link from 'next/link';\r\n+import {  Activity as ActivityIcon,  ArrowLeft,  BookOpen,  ChevronDown,  ChevronRight,  Check,  Edit,  Eye,  EyeOff,  HelpCircle,  Layers,  List,  MessageSquare,  Plus,  Save,  Trash as Trash2, X, Pencil, Lock, Unlock, RefreshCw } from 'lucide-react';\r\n+import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\n+import { Badge } from '@/components/ui/badge';\r\n+import { Button } from '@/components/ui/button';\r\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\n+import { Input } from '@/components/ui/input';\r\n+import { Label } from '@/components/ui/label';\r\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\n+import { Textarea } from '@/components/ui/textarea';\r\n+import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\r\n+import { cn } from '@/lib/utils';\r\n+import { API_BASE_URL, QUESTION_TYPES, isQuestionType } from './constants';\r\n+import { ExercisePrompt, Lesson } from './types';\r\n+import { QuestionFormProps, ExercisePromptCardProps, Activity, Grade, Topic, Subtopic as SubTopic } from './types';\r\n+import { QuestionForm } from './components/question-form';\r\n+import { ExercisePromptCard } from './components/exercise-prompt-card';\r\n+import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\r\n+import { supabase } from '@/lib/supabase';\r\n+import { useContentStore } from '@/lib/content/store';\r\n+import { contentService } from '@/lib/content/ContentService';\r\n+import { MediaPreview } from '@/components/ui/media-preview';\r\n+import { QuestionTypeSelect } from './components/question-type-select';\r\n+import { RichTextEditor } from '@/components/ui/rich-text-editor';\r\n+import {\r\n+  AlertDialog,\r\n+  AlertDialogAction,\r\n+  AlertDialogContent,\r\n+  AlertDialogDescription,\r\n+  AlertDialogFooter,\r\n+  AlertDialogHeader,\r\n+  AlertDialogTitle,\r\n+} from \"@/components/ui/alert-dialog\";\r\n+import { debounce, isNull } from 'lodash';\r\n+import { PostgrestError } from '@supabase/supabase-js';\r\n+import { Question as ContentQuestion } from './types';  // Import the specific type\r\n+\r\n+\r\n+// Update the API endpoint to match your backend route\r\n+const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\r\n+\r\n+interface QuestionTypeSelectProps {\r\n+  value: string;\r\n+  onValueChange: (value: string) => void;\r\n+}\r\n+\r\n+// Add metadata type\r\n+interface LessonMetadata {\r\n+  lastEdited?: string;\r\n+  version?: number;\r\n+  tags?: string[];\r\n+  status?: 'draft' | 'published';\r\n+  authorId?: string;\r\n+  duration?: number;\r\n+  transcript?: string;\r\n+}\r\n+\r\n+type ContentType = 'html' | 'markdown' | 'rich-text' | 'text' | 'json';\r\n+\r\n+interface LessonContent {\r\n+  id: string;\r\n+  lesson_id: string;\r\n+  content: any[];\r\n+  metadata: {\r\n+    lastEdited?: string;\r\n+    version?: number;\r\n+    status?: 'draft' | 'published';\r\n+    authorId?: string;\r\n+  };\r\n+  content_type: string;\r\n+  order_index: number;\r\n+  updated_at: string;\r\n+  user_id: string;\r\n+}\r\n+\r\n+interface InlineEditProps {\r\n+  value: string;\r\n+  onSave: (value: string) => void;\r\n+  isEditing: boolean;\r\n+  setIsEditing: (value: boolean) => void;\r\n+  placeholder?: string;\r\n+  className?: string;\r\n+}\r\n+\r\n+// Add validation interface\r\n+interface QuestionValidation {\r\n+  isValid: boolean;\r\n+  message: string;\r\n+}\r\n+\r\n+// Add this type validation helper\r\n+const getQuestionTypeFields = (type: string) => {\r\n+  switch (type) {\r\n+    case 'multipleChoice':\r\n+      return {\r\n+        required: ['prompt', 'options', 'correctAnswer'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          options: [],\r\n+          correctAnswer: '',\r\n+          teacherScript: '',\r\n+          explanation: ''\r\n+        }\r\n+      };\r\n+    case 'fillInBlank':\r\n+      return {\r\n+        required: ['prompt', 'blanks'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          blanks: [],\r\n+          teacherScript: '',\r\n+          explanation: ''\r\n+        }\r\n+      };\r\n+    case 'trueFalse':\r\n+      return {\r\n+        required: ['prompt', 'correctAnswer'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          correctAnswer: null,\r\n+          teacherScript: '',\r\n+          explanation: ''\r\n+        }\r\n+      };\r\n+    case 'matching':\r\n+      return {\r\n+        required: ['prompt', 'pairs'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          pairs: [],\r\n+          teacherScript: '',\r\n+          explanation: ''\r\n+        }\r\n+      };\r\n+    case 'ordering':\r\n+      return {\r\n+        required: ['prompt', 'items'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          items: [],\r\n+          correctOrder: [],\r\n+          teacherScript: '',\r\n+          explanation: ''\r\n+        }\r\n+      };\r\n+    case 'shortAnswer':\r\n+      return {\r\n+        required: ['prompt', 'sampleAnswer'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          sampleAnswer: '',\r\n+          teacherScript: '',\r\n+          explanation: '',\r\n+          keywords: []\r\n+        }\r\n+      };\r\n+    case 'speaking':\r\n+      return {\r\n+        required: ['prompt', 'sampleAnswer'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          sampleAnswer: '',\r\n+          teacherScript: '',\r\n+          audioPrompt: '',\r\n+          pronunciation: ''\r\n+        }\r\n+      };\r\n+    case 'listening':\r\n+      return {\r\n+        required: ['prompt', 'audioContent'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          audioContent: '',\r\n+          transcript: '',\r\n+          teacherScript: '',\r\n+          comprehensionQuestions: []\r\n+        }\r\n+      };\r\n+    case 'listenAndRepeat':\r\n+      return {\r\n+        required: ['prompt', 'audioContent'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          audioContent: '',\r\n+          targetPhrase: '',\r\n+          teacherScript: '',\r\n+          pronunciation: ''\r\n+        }\r\n+      };\r\n+    default:\r\n+      return {\r\n+        required: ['prompt'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          teacherScript: ''\r\n+        }\r\n+      };\r\n+  }\r\n+}\r\n+\r\n+interface SaveStatus {\r\n+  id: string;\r\n+  status: 'draft' | 'saved' | 'saving' | 'error';\r\n+  lastSaved?: string;\r\n+}\r\n+\r\n+interface Question {\r\n+  id: string;\r\n+  type: string;\r\n+  lesson_id: string;\r\n+  title: string;\r\n+  metadata: Record<string, any>;\r\n+  data: Record<string, any>; // This allows dynamic field access\r\n+  exercisePrompts: ExercisePrompt[];\r\n+  isDraft?: boolean;\r\n+}\r\n+\r\n+// Add at the top of the file with other type definitions\r\n+type QuestionType = keyof typeof QUESTION_TYPES;\r\n+\r\n+// Add this type guard function\r\n+const isValidQuestionType = (type: string): type is QuestionType => {\r\n+  return type in QUESTION_TYPES;\r\n+};\r\n+\r\n+// Update handleAddQuestion\r\n+\r\n+\r\n+// Update validateQuestion\r\n+const validateQuestion = (question: Question): QuestionValidation => {\r\n+  const { required } = getQuestionTypeFields(question.type);\r\n+  const missingFields = required.filter(field => {\r\n+    const value = question.data?.[field];\r\n+    return !value || \r\n+      (Array.isArray(value) && value.length === 0) || \r\n+      (typeof value === 'string' && !value.trim());\r\n+  });\r\n+\r\n+  if (missingFields.length > 0) {\r\n+    return {\r\n+      isValid: false,\r\n+      message: `Missing required fields: ${missingFields.join(', ')}`\r\n+    };\r\n+  }\r\n+\r\n+  return { isValid: true, message: '' };\r\n+};\r\n+\r\n+export default function LessonManagementPage() {\r\n+  // State declarations\r\n+  \r\n+  const [selectedGradeId, setSelectedGradeId] = useState<string | null>(null);\r\n+  const [selectedTopicId, setSelectedTopicId] = useState<string | null>(null);\r\n+  const [selectedSubtopicId, setSelectedSubtopicId] = useState<string | null>(null);\r\n+  const [lessonTitle, setLessonTitle] = useState<string>('');\r\n+  const [currentLessonId, setCurrentLessonId] = useState<string | null>(null);\r\n+  const [questions, setQuestions] = useState<Question[]>([]);\r\n+  const [saveProgress, setSaveProgress] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');\r\n+  const [activities, setActivities] = useState<Activity[]>([]);\r\n+  const [localBuffer, setLocalBuffer] = useState<{ timestamp: number; data: any } | null>(null);\r\n+  const [lastSavedToServer, setLastSavedToServer] = useState<number>(Date.now());\r\n+  const [selectedQuestionType, setSelectedQuestionType] = useState<string>('');\r\n+  const [editingQuestionIndex, setEditingQuestionIndex] = useState<number | null>(null);\r\n+  const [showHelpTips, setShowHelpTips] = useState(true);\r\n+  const [isNavigating, setIsNavigating] = useState(false);\r\n+  const [lessons, setLessons] = useState<Lesson[]>([]);\r\n+  const [grades, setGrades] = useState<Grade[]>([]);\r\n+  const [topics, setTopics] = useState<Topic[]>([]);\r\n+  const [subtopics, setSubtopics] = useState<SubTopic[]>([]);\r\n+  const [contentHeading, setContentHeading] = useState<string>('');\r\n+    // Add with your other state declarations\r\n+  const [isContentExpanded, setIsContentExpanded] = useState<boolean>(false);\r\n+  const [modalState, setModalState] = useState({\r\n+    showAddGrade: false,\r\n+    showAddTopic: false,\r\n+    showAddSubtopic: false,\r\n+    showAddLesson: false\r\n+  });\r\n+  const [isViewMode, setIsViewMode] = useState<boolean>(true);\r\n+  const [expandedGrade, setExpandedGrade] = useState<string | null>(null);\r\n+  const [expandedTopic, setExpandedTopic] = useState<string | null>(null);\r\n+  const [expandedSubtopic, setExpandedSubtopic] = useState<string | null>(null);\r\n+  const [expandedQuestion, setExpandedQuestion] = useState<number | null>(null);\r\n+  const [expandedActivity, setExpandedActivity] = useState<number | null>(null);\r\n+  const [newItemData, setNewItemData] = useState({\r\n+    name: '',\r\n+    description: ''\r\n+  });\r\n+  const [lessonContent, setLessonContent] = useState<string>('');\r\n+  const [isContentEditorOpen, setIsContentEditorOpen] = useState(false);\r\n+  const [isEditingTitle, setIsEditingTitle] = useState<boolean>(false);\r\n+  const [isEditingHeading, setIsEditingHeading] = useState<boolean>(false);\r\n+  const [isEditingDescription, setIsEditingDescription] = useState<boolean>(false);\r\n+  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\r\n+  const [isSidebarLocked, setIsSidebarLocked] = useState(true);\r\n+  const [alertDialogState, setAlertDialogState] = useState<{\r\n+    isOpen: boolean;\r\n+    title: string;\r\n+    message: string;\r\n+    onConfirm: (value?: unknown) => void;\r\n+  }>({\r\n+    isOpen: false,\r\n+    title: '',\r\n+    message: '',\r\n+    onConfirm: () => {}\r\n+  });\r\n+\r\n+  const { \r\n+    selectedGrade,\r\n+    setSelectedGrade,\r\n+    selectedTopic,\r\n+    setSelectedTopic,\r\n+    selectedSubtopic,\r\n+    setSelectedSubtopic,\r\n+    selectedLesson,\r\n+    setSelectedLesson\r\n+  } = useContentStore();\r\n+\r\n+  // Add new state for tracking save status\r\n+  interface SaveStatus {\r\n+    id: string;\r\n+    status: 'draft' | 'saved' | 'saving' | 'error' | 'draft';\r\n+    lastSaved?: string;\r\n+  }\r\n+\r\n+  const [questionSaveStatuses, setQuestionSaveStatuses] = useState<Array<{\r\n+    id: string;\r\n+    status: 'idle' | 'saving' | 'saved' | 'error' | 'draft';\r\n+  }>>([]);\r\n+  const [promptSaveStatuses, setPromptSaveStatuses] = useState<SaveStatus[]>([]);\r\n+\r\n+  // Add this state to track dropdown state\r\n+  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n+\r\n+  // Event handlers\r\n+  const handleQuestionTypeChange = useCallback((type: string) => {\r\n+    if (isQuestionType(type)) {\r\n+      setSelectedQuestionType(type);\r\n+    }\r\n+  }, []);\r\n+\r\n+  const handleAddQuestion = useCallback(() => {\r\n+    if (!selectedQuestionType || !isQuestionType(selectedQuestionType)) return;\r\n+\r\n+    const defaultData = QUESTION_TYPES[selectedQuestionType].defaultData;\r\n+    const newQuestion: Question = {\r\n+      id: crypto.randomUUID(),\r\n+      type: selectedQuestionType,\r\n+      data: {},\r\n+      title: 'New Question',\r\n+      lesson_id: currentLessonId || '',\r\n+      metadata: {},\r\n+      // data: {\r\n+      //   ...defaultData,\r\n+      //   prompt: '',\r\n+      //   teacherScript: ''\r\n+      // },\r\n+      exercisePrompts: [],\r\n+      isDraft: true\r\n+    };\r\n+\r\n+    setQuestions(prev => [...prev, newQuestion]);\r\n+    setQuestionSaveStatuses(prev => [\r\n+      ...prev,\r\n+      { id: newQuestion.id, status: 'draft' }\r\n+    ]);\r\n+    setSelectedQuestionType('');\r\n+  }, [selectedQuestionType, currentLessonId]);\r\n+\r\n+  const handleRemoveQuestion = async (index: number) => {\r\n+    try {\r\n+      const questionToDelete = questions[index];\r\n+      \r\n+      // Delete related exercise prompts first\r\n+      const { error: promptError } = await supabase\r\n+        .from('exercise_prompts')\r\n+        .delete()\r\n+        .eq('question_id', questionToDelete.id);\r\n+\r\n+      if (promptError) throw promptError;\r\n+\r\n+      // Then delete the question\r\n+      const { error: questionError } = await supabase\r\n+        .from('questions')\r\n+        .delete()\r\n+        .eq('id', questionToDelete.id);\r\n+\r\n+      if (questionError) throw questionError;\r\n+\r\n+      // Update local state\r\n+      const newQuestions = questions.filter((_, i) => i !== index);\r\n+      setQuestions(newQuestions);\r\n+      \r\n+      toast.success('Question and related prompts deleted successfully');\r\n+    } catch (error) {\r\n+      console.error('Error deleting question:', error);\r\n+      toast.error('Failed to delete question and prompts');\r\n+    }\r\n+  };\r\n+\r\n+  const handleUpdateQuestion = useCallback(async (index: number, updatedQuestion: Question) => {\r\n+    const newQuestions = [...questions];\r\n+    newQuestions[index] = updatedQuestion;\r\n+    setQuestions(newQuestions);\r\n+    setQuestionSaveStatuses(prev => prev.map((status, i) => \r\n+      i === index ? { ...status, status: 'draft' } : status\r\n+    ));\r\n+  }, [questions]);\r\n+\r\n+  const handleAddExercisePrompt = useCallback((questionIndex: number) => {\r\n+    setQuestions(prev => prev.map((question, i) => {\r\n+      if (i === questionIndex) {\r\n+        return {\r\n+          ...question,\r\n+          exercisePrompts: [\r\n+            ...question.exercisePrompts,\r\n+            {\r\n+              id: crypto.randomUUID(),\r\n+              text: '',\r\n+              media: '',\r\n+              type: 'image',\r\n+              narration: 'Your turn',\r\n+              saytext: 'Say: ',\r\n+              created_at: new Date().toISOString(),\r\n+              updated_at: new Date().toISOString()\r\n+            }\r\n+          ]\r\n+        };\r\n+      }\r\n+      return question;\r\n+    }));\r\n+  }, []);\r\n+\r\n+  const handleRemoveExercisePrompt = useCallback((questionIndex: number, promptIndex: number) => {\r\n+    setQuestions(prev => prev.map((question, i) => {\r\n+      if (i === questionIndex) {\r\n+        return {\r\n+          ...question,\r\n+          exercisePrompts: question.exercisePrompts.filter((_, j) => j !== promptIndex)\r\n+        };\r\n+      }\r\n+      return question;\r\n+    }));\r\n+  }, []);\r\n+\r\n+  const handleExercisePromptChange = useCallback(async (\r\n+    questionIndex: number,\r\n+    promptIndex: number,\r\n+    updatedPrompt: ExercisePrompt\r\n+  ) => {\r\n+    try {\r\n+      const promptUpdate = {\r\n+        id: updatedPrompt.id,\r\n+        question_id: updatedPrompt.question_id,\r\n+        text: updatedPrompt.text,\r\n+        type: updatedPrompt.type,\r\n+        narration: updatedPrompt.narration,\r\n+        saytext: updatedPrompt.saytext,\r\n+        media: updatedPrompt.media,\r\n+        // Remove order_index as it's not in schema\r\n+        created_at: new Date().toISOString()\r\n+      };\r\n+\r\n+      const { error: promptError } = await supabase\r\n+        .from('exercise_prompts')\r\n+        .upsert(promptUpdate)\r\n+        .select();\r\n+\r\n+      if (promptError) throw promptError;\r\n+\r\n+      // Update local state\r\n+      setQuestions(prev => prev.map((question, i) => {\r\n+        if (i === questionIndex) {\r\n+          const newPrompts = [...question.exercisePrompts];\r\n+          newPrompts[promptIndex] = updatedPrompt;\r\n+          return { ...question, exercisePrompts: newPrompts };\r\n+        }\r\n+        return question;\r\n+      }));\r\n+\r\n+    } catch (error) {\r\n+      console.error('Error saving prompt:', error);\r\n+      toast.error('Failed to save prompt');\r\n+    }\r\n+  }, []);\r\n+\r\n+  const handleAddActivity = useCallback(() => {\r\n+    const newActivity: Activity = {\r\n+      id: crypto.randomUUID(),\r\n+      lesson_id: currentLessonId || '',\r\n+      created_at: new Date().toISOString(),\r\n+      type: 'practice',\r\n+      title: '',\r\n+      name: '',\r\n+      instructions: '',\r\n+      media: [],\r\n+      data: {\r\n+        prompt: '',\r\n+        teacherScript: '',\r\n+        media: []\r\n+      }\r\n+    };\r\n+    setActivities(prev => [...prev, newActivity]);\r\n+  }, [currentLessonId]);\r\n+\r\n+  const handleUpdateActivity = useCallback((index: number, updatedActivity: Activity) => {\r\n+    setActivities(prev => prev.map((activity, i) => i === index ? updatedActivity : activity));\r\n+  }, []);\r\n+\r\n+  const handleRemoveActivity = useCallback((index: number) => {\r\n+    setActivities(prev => prev.filter((_, i) => i !== index));\r\n+  }, []);\r\n+\r\n+  const handleExercisePromptUpdate = useCallback((questionIndex: number, promptIndex: number, updatedPrompt: ExercisePrompt) => {\r\n+    const updatedQuestions = [...questions];\r\n+    updatedQuestions[questionIndex].exercisePrompts[promptIndex] = updatedPrompt;\r\n+    handleUpdateQuestion(questionIndex, updatedQuestions[questionIndex]);\r\n+  }, [questions, handleUpdateQuestion]);\r\n+\r\n+  const handleQuestionDataChange = useCallback((questionIndex: number, field: string, value: string) => {\r\n+    setQuestions(prev => prev.map((q, i) => \r\n+      i === questionIndex \r\n+        ? { \r\n+            ...q, \r\n+            data: { \r\n+              prompt: q.data?.prompt || '',\r\n+              teacherScript: q.data?.teacherScript || '',\r\n+              ...q.data,\r\n+              [field]: value \r\n+            } \r\n+          }\r\n+        : q\r\n+    ));\r\n+  }, []);\r\n+\r\n+  const [isSaving, setIsSaving] = useState(false);\r\n+\r\n+  const handleSaveLesson = async () => {\r\n+    try {\r\n+      if (!currentLessonId || !selectedSubtopicId) {\r\n+        toast.error('Please select a subtopic and lesson first');\r\n+        return;\r\n+      }\r\n+\r\n+      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\r\n+      if (sessionError) throw sessionError;\r\n+      \r\n+      if (!session?.user) {\r\n+        toast.error('Please sign in to save lessons');\r\n+        return;\r\n+      }\r\n+\r\n+      // Get user's role from session\r\n+      const userRole = session.user.user_metadata?.role;\r\n+      console.log('Current user role:', userRole);\r\n+      console.log('📝 Saving content heading:', {\r\n+        contentHeading,\r\n+        currentLessonId,\r\n+        selectedSubtopicId,\r\n+        timestamp: new Date().toISOString()\r\n+      });\r\n+\r\n+      // Create metadata object\r\n+      const lessonMetadata = {\r\n+        lastEdited: new Date().toISOString(),\r\n+        version: 1,\r\n+        status: 'draft' \r\n+      };\r\n+\r\n+      // Complete lesson data with all fields\r\n+      const lessonData = {\r\n+        id: currentLessonId,\r\n+        title: lessonTitle,\r\n+        content: lessonContent,\r\n+        metadata: lessonMetadata, // Supabase will automatically handle JSON conversion\r\n+        content_type: 'html',\r\n+        lesson_type: 'lesson',\r\n+        grade_id: selectedGradeId,\r\n+        topic_id: selectedTopicId,\r\n+        subtopic_id: selectedSubtopicId,\r\n+        user_id: session.user.id,\r\n+        updated_at: new Date().toISOString(),\r\n+        role: userRole, // Include role in the payload\r\n+        description: '',\r\n+        prerequisites: [],\r\n+        media_type: 'image',\r\n+        media_url: '',\r\n+        contentheading: contentHeading || ''\r\n+      };\r\n+\r\n+      console.log('📦 Data being sent to Supabase:', lessonData);\r\n+\r\n+      // Save lesson with all fields\r\n+      const { data, error: lessonError } = await supabase\r\n+        .from('lessons')\r\n+        .upsert(lessonData, { \r\n+          onConflict: 'id'\r\n+        })\r\n+        .select();\r\n+\r\n+      if (lessonError) throw lessonError;\r\n+\r\n+      // 2. Save lesson content\r\n+      const { data: existingContent } = await supabase\r\n+        .from('lesson_content')\r\n+        .select('id')\r\n+        .eq('lesson_id', currentLessonId)\r\n+        .single();\r\n+\r\n+      const contentMetadata = {\r\n+        lastEdited: new Date().toISOString(),\r\n+        version: 1,\r\n+        status: 'draft'\r\n+      };\r\n+\r\n+      const contentUpdate = {\r\n+        id: existingContent?.id || crypto.randomUUID(),\r\n+        lesson_id: currentLessonId,\r\n+        content: [lessonContent],\r\n+        metadata: contentMetadata, // Supabase will automatically handle JSON conversion\r\n+        content_type: 'html',\r\n+        user_id: session.user.id,\r\n+        updated_at: new Date().toISOString(),\r\n+        created_at: new Date().toISOString()\r\n+      };\r\n+\r\n+      const { error: contentError } = await supabase\r\n+        .from('lesson_content')\r\n+        .upsert(contentUpdate, { onConflict: 'id' });\r\n+\r\n+      if (contentError) throw contentError;\r\n+\r\n+      // 3. Save questions\r\n+      for (const question of questions) {\r\n+        const questionData = {\r\n+          id: question.id,\r\n+          lesson_id: currentLessonId,\r\n+          type: question.type,\r\n+          title: question.title,\r\n+          metadata: question.metadata,\r\n+          data: question.data,\r\n+          updated_at: new Date().toISOString(),\r\n+          user_id: session.user.id\r\n+        };\r\n+\r\n+        const { error: questionError } = await supabase\r\n+          .from('questions')\r\n+          .upsert(questionData, { onConflict: 'id' });\r\n+\r\n+        if (questionError) throw questionError;\r\n+\r\n+        //4. Save exercise prompts for this question\r\n+        if (question.exercisePrompts) {\r\n+          for (const prompt of question.exercisePrompts) {\r\n+            const promptData = {\r\n+              id: prompt.id,\r\n+              question_id: question.id,\r\n+              text: prompt.text,\r\n+              media: prompt.media,\r\n+              type: prompt.type,\r\n+              narration: prompt.narration,\r\n+              saytext: prompt.saytext,\r\n+              user_id: session.user.id,\r\n+              updated_at: new Date().toISOString()\r\n+            };\r\n+\r\n+            const { error: promptError } = await supabase\r\n+              .from('exercise_prompts')\r\n+              .upsert(promptData, { onConflict: 'id' });\r\n+\r\n+            if (promptError) throw promptError;\r\n+          }\r\n+        }\r\n+      }\r\n+\r\n+      // 5. Save activities\r\n+      if (activities.length > 0) {\r\n+        const activitiesData = activities.map(activity => ({\r\n+          id: activity.id,\r\n+          lesson_id: currentLessonId,\r\n+          type: activity.type,\r\n+          title: activity.title,\r\n+          name: activity.name,\r\n+          instructions: activity.instructions,\r\n+          media: activity.media,\r\n+          data: activity.data,\r\n+          created_at: new Date().toISOString()\r\n+        }));\r\n+\r\n+        const { error: activitiesError } = await supabase\r\n+          .from('activities')\r\n+          .upsert(activitiesData, { onConflict: 'id' });\r\n+\r\n+        if (activitiesError) throw activitiesError;\r\n+      }\r\n+\r\n+      // After successful save\r\n+      console.log('✅ Content heading saved successfully:', {\r\n+        contentHeading,\r\n+        lessonId: currentLessonId,\r\n+        timestamp: new Date().toISOString()\r\n+      });\r\n+\r\n+      toast.success('Lesson saved successfully');\r\n+    } catch (err) {\r\n+      const error = err as PostgrestError;\r\n+      console.error('❌ Error saving content heading:', {\r\n+        error: error.message,\r\n+        contentHeading,\r\n+        lessonContent,\r\n+        lessonId: currentLessonId,\r\n+        timestamp: new Date().toISOString()\r\n+      });\r\n+      toast.error(`Failed to save lesson: ${error.message}`);\r\n+\r\n+\r\n+    }\r\n+  };\r\n+\r\n+  const handleSaveQuestion = async (question: Question, index: number) => {\r\n+    const loadingToast = toast.loading(`Saving question ${index + 1}...`);\r\n+    \r\n+    try {\r\n+      const { data: { session } } = await supabase.auth.getSession();\r\n+      if (!session?.user) {\r\n+        toast.error('Please sign in to save question', { id: loadingToast });\r\n+        return;\r\n+      }\r\n+\r\n+      // Save question\r\n+      const questionData = {\r\n+        id: question.id,\r\n+        lesson_id: currentLessonId,\r\n+        type: question.type,\r\n+        title: question.title,\r\n+        metadata: question.metadata,\r\n+        data: question.data,\r\n+        user_id: session.user.id,\r\n+        updated_at: new Date().toISOString()\r\n+      };\r\n+\r\n+      const { error: questionError } = await supabase\r\n+        .from('questions')\r\n+        .upsert(questionData, { onConflict: 'id' });\r\n+\r\n+      if (questionError) throw questionError;\r\n+\r\n+      // Save exercise prompts if they exist\r\n+      if (question.exercisePrompts?.length) {\r\n+        for (const prompt of question.exercisePrompts) {\r\n+          const promptData = {\r\n+            id: prompt.id,\r\n+            question_id: question.id,\r\n+            text: prompt.text,\r\n+            type: prompt.type,\r\n+            narration: prompt.narration,\r\n+            saytext: prompt.saytext,\r\n+            media: prompt.media,\r\n+            user_id: session.user.id,\r\n+            updated_at: new Date().toISOString()\r\n+          };\r\n+\r\n+          const { error: promptError } = await supabase\r\n+            .from('exercise_prompts')\r\n+            .upsert(promptData, { onConflict: 'id' });\r\n+\r\n+          if (promptError) throw promptError;\r\n+        }\r\n+      }\r\n+\r\n+      toast.success(`Question ${index + 1} saved successfully`, { id: loadingToast });\r\n+    } catch (error) {\r\n+      console.error('Error saving question:', error);\r\n+      toast.error(`Failed to save question ${index + 1}`, { id: loadingToast });\r\n+    }\r\n+  };\r\n+\r\n+  const handleSaveActivity = async (activity: Activity) => {\r\n+    try {\r\n+      await contentService.saveActivity(activity);\r\n+      toast.success('Activity saved');\r\n+    } catch (error) {\r\n+      console.error('Failed to save activity:', error);\r\n+      toast.error('Failed to save activity');\r\n+    }\r\n+  };\r\n+\r\n+  // Effects\r\n+  useEffect(() => {\r\n+    const fetchGrades = async () => {\r\n+      try {\r\n+        const { data, error } = await supabase\r\n+          .from('grades')\r\n+          .select('*')\r\n+          .order('name');\r\n+\r\n+        if (error) {\r\n+          console.error('Supabase error:', error);\r\n+          throw error;\r\n+        }\r\n+\r\n+        if (!data) {\r\n+          throw new Error('No data returned from Supabase');\r\n+        }\r\n+\r\n+        // Map the grades to match your interface\r\n+        const validGrades = data.map((grade: any) => ({\r\n+          _id: grade.id,\r\n+          id: grade.id,\r\n+          name: grade.name,\r\n+          level: grade.level || 0,  // Add default value if not provided\r\n+          orderIndex: grade.order_index || 0,  // Add default value if not provided\r\n+          topics: []\r\n+        }));\r\n+        \r\n+        setGrades(validGrades);\r\n+      } catch (error) {\r\n+        console.error('Error fetching grades:', error);\r\n+        toast.error('Failed to fetch grades');\r\n+      }\r\n+    };\r\n+\r\n+    fetchGrades();\r\n+  }, []);\r\n+\r\n+  // Topic Selection\r\n+  useEffect(() => {\r\n+    const fetchTopics = async () => {\r\n+      if (!selectedGradeId) return;\r\n+      \r\n+      try {\r\n+        const { data, error } = await supabase\r\n+          .from('topics')\r\n+          .select('*')\r\n+          .eq('grade_id', selectedGradeId)\r\n+          .order('title');\r\n+\r\n+        if (error) {\r\n+          throw error;\r\n+        }\r\n+\r\n+        // Map the topics to match your interface\r\n+        const validTopics = (data || []).map((topic: any) => ({\r\n+          _id: topic.id,\r\n+          id: topic.id,\r\n+          name: topic.title,\r\n+          title: topic.title,\r\n+          grade_id: topic.grade_id,\r\n+          subtopics: []\r\n+        }));\r\n+        \r\n+        setTopics(validTopics);\r\n+      } catch (error) {\r\n+        console.error('Error fetching topics:', error);\r\n+        toast.error('Failed to fetch topics');\r\n+      }\r\n+    };\r\n+\r\n+    fetchTopics();\r\n+  }, [selectedGradeId]);\r\n+\r\n+  // Subtopic Selection\r\n+  useEffect(() => {\r\n+    const fetchSubtopics = async () => {\r\n+      if (!selectedTopicId) return;\r\n+      \r\n+      try {\r\n+        // Use content service to fetch subtopics\r\n+        const subtopicsData = await contentService.fetchSubtopics(selectedTopicId);\r\n+        console.log('Fetched subtopics:', subtopicsData);\r\n+\r\n+        const validSubtopics = subtopicsData.map((subtopic: any) => ({\r\n+          id: subtopic.id,\r\n+          title: subtopic.title,\r\n+          description: subtopic.description,\r\n+          topic_id: subtopic.topic_id,\r\n+          lessons: [],\r\n+          order_index: subtopicsData.length\r\n+        }));\r\n+        \r\n+        setSubtopics(validSubtopics);\r\n+        \r\n+        // Update global state\r\n+        if (selectedSubtopic) {\r\n+          setSelectedSubtopic(selectedSubtopic);\r\n+        }\r\n+      } catch (err) {\r\n+        const error = err as Error;\r\n+        console.error('Error fetching subtopics:', error);\r\n+        toast.error('Failed to fetch subtopics');\r\n+      }\r\n+    };\r\n+\r\n+    fetchSubtopics();\r\n+  }, [selectedTopicId, selectedSubtopic, setSelectedSubtopic]);\r\n+\r\n+  // Add effect to monitor subtopics state\r\n+  useEffect(() => {\r\n+    console.log('Current subtopics state:', subtopics);\r\n+  }, [subtopics]);\r\n+\r\n+  // Add fetchLessons function\r\n+  const fetchLessons = useCallback(async () => {\r\n+    if (!selectedSubtopicId) return;\r\n+    try {\r\n+      const { data, error } = await supabase\r\n+        .from('lessons')\r\n+        .select('*')\r\n+        .eq('subtopic_id', selectedSubtopicId)\r\n+        .order('title');\r\n+\r\n+      if (error) {\r\n+        throw error;\r\n+      }\r\n+      \r\n+      // Map the lessons to ensure they have _id\r\n+      const validLessons = (data || []).map((lesson: any) => ({\r\n+        ...lesson,\r\n+        _id: lesson._id || lesson.id, // Use _id if available, otherwise use id\r\n+        title: lesson.title || 'Untitled Lesson'\r\n+      })).filter((lesson: any) => lesson._id); // Only include lessons with valid IDs\r\n+      \r\n+      setLessons(validLessons);\r\n+    } catch (error) {\r\n+      console.error('Error fetching lessons:', error);\r\n+      toast.error('Failed to fetch lessons');\r\n+    }\r\n+  }, [selectedSubtopicId]);\r\n+  // Add loadLessonContent function\r\n+  const isLoading = useRef(false);\r\n+  const loadLessonContent = useCallback(async (lessonId: string) => {\r\n+    if (isLoading.current) return;\r\n+    isLoading.current = true;\r\n+\r\n+    try {\r\n+      const response = await fetch(`/api/lessons/${lessonId}/questions`);\r\n+      if (!response.ok) throw new Error('Failed to load questions');\r\n+      \r\n+      const data = await response.json();\r\n+      // Ensure each question has default values for optional fields\r\n+      const processedQuestions = data.map((question: any) => ({\r\n+        ...question,\r\n+        sampleAnswer: question.sampleAnswer || '', // Provide default empty string\r\n+        type: question.type || 'multiple_choice', // Provide default type\r\n+      }));\r\n+\r\n+      setQuestions(processedQuestions);\r\n+    } catch (error) {\r\n+      console.error('Error loading lesson content:', error);\r\n+      toast({\r\n+        title: \"Error\",\r\n+        description: \"Failed to load lesson content\",\r\n+        variant: \"destructive\",\r\n+                                        lesson_id: currentLessonId || '',\r\n+                                        type: isValidQuestionType(question.type) ? question.type : 'speaking',\r\n+                                        data: {\r\n+                                          prompt: question.data?.prompt || '',\r\n+                                          teacherScript: question.data?.teacherScript || '',\r\n+                                          followup_prompt: question.data?.followup_prompt || [],\r\n+                                          sampleAnswer: question.data?.sampleAnswer,\r\n+                                          answer: question.data?.answer\r\n+                                        }\r\n+                                      }}\r\n+                                      index={index}\r\n+                                      onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\r\n+                                        await handleUpdateQuestion(index, {\r\n+                                          ...updatedQuestion,\r\n+                                          data: {\r\n+                                            prompt: updatedQuestion.data?.prompt || '',\r\n+                                            teacherScript: updatedQuestion.data?.teacherScript || '',\r\n+                                            followup_prompt: updatedQuestion.data?.followup_prompt || [],\r\n+                                            sampleAnswer: updatedQuestion.data?.sampleAnswer,\r\n+                                            answer: updatedQuestion.data?.answer\r\n+                                          }\r\n+                                        });\r\n+                                      }}\r\n+                                      onRemove={handleRemoveQuestion}\r\n+                                      onAddExercisePrompt={handleAddExercisePrompt}\r\n+                                      onRemoveExercisePrompt={handleRemoveExercisePrompt}\r\n+                                      onExercisePromptChange={handleExercisePromptChange}\r\n+                                    /><Button \r\n+                                    size=\"sm\"\r\n+                                    variant=\"outline\"\r\n+                                    onClick={() => handleSaveQuestion(question, index)}\r\n+                                    className=\"ml-2\"\r\n+                                  >\r\n+                                    {questionSaveStatuses.find(s => s.id === question.id)?.status === 'saving' ? (\r\n+                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n+                                    ) : (\r\n+                                      <Save className=\"h-4 w-4 mr-2\" />\r\n+                                    )}\r\n+                                    Save Question\r\n+                                                    </Button>\r\n+                                    {/* Exercise Prompts with Save Buttons */}\r\n+                                    {question.exercisePrompts?.map((prompt, promptIndex) => (\r\n+                                      <div key={`${question.id}-prompt-${promptIndex}`} className=\"mt-4\"> {/* Updated key */}\r\n+                                        <div className=\"flex items-center justify-between mb-2\">\r\n+                                          <h4 className=\"text-sm font-medium\">Exercise Prompt {promptIndex + 1}</h4>\r\n+                                          <div className=\"flex items-center gap-2\">\r\n+                                            <TooltipProvider>\r\n+                                              <Tooltip>\r\n+                                                <TooltipTrigger asChild>\r\n+                                                  <Button\r\n+                                                    size=\"sm\"\r\n+                                                    variant=\"outline\"\r\n+                                                    onClick={() => handleSavePrompt(question.id, prompt, promptIndex)}\r\n+                                                    disabled={promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving'}\r\n+                                                  >\r\n+                                                    {promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving' ? (\r\n+                                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n+                                                    ) : (\r\n+                                                      <Save className=\"h-4 w-4 mr-2\" />\r\n+                                                    )}\r\n+                                                    Save Prompt\r\n+                                                  </Button>\r\n+                                                </TooltipTrigger>\r\n+                                                <TooltipContent>\r\n+                                                  {`Status: ${promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}`}\r\n+                                                </TooltipContent>\r\n+                                              </Tooltip>\r\n+                                            </TooltipProvider>\r\n+                                            <Badge variant={\r\n+                                              promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saved'\r\n+                                                ? 'secondary'\r\n+                                                : promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'error'\r\n+                                                ? 'destructive'\r\n+                                                : 'default'\r\n+                                            }>\r\n+                                              {promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}\r\n+                                            </Badge>\r\n+                                                  </div>\r\n+                                        </div>\r\n+                                        <ExercisePromptCard\r\n+                                          key={prompt.id} // Add a unique key here\r\n+                                          prompt={prompt}\r\n+                                          promptIndex={promptIndex}\r\n+                                          onRemove={() => handleRemoveExercisePrompt(index, promptIndex)}\r\n+                                          onUpdate={(updatedPrompt: ExercisePrompt) => {\r\n+                                            // Prevent duplicate updates\r\n+                                            if (updatedPrompt.id === prompt.id) {\r\n+                                              handleExercisePromptChange(index, promptIndex, updatedPrompt);\r\n+                                            }\r\n+                                          }}\r\n+                                        />\r\n+                                      </div>\r\n+                                    ))}\r\n+                                  </CardContent>\r\n+                                )}\r\n+                              </Card>\r\n+                            ))}\r\n+\r\n+                            {/* Add Question Button */}\r\n+                            <div className=\"flex items-center justify-between\">\r\n+                              <QuestionTypeSelect \r\n+                                value={selectedQuestionType} \r\n+                                onChange={handleQuestionTypeChange}\r\n+                              />\r\n+                                        <Button\r\n+                                          onClick={handleAddQuestion}\r\n+                                          disabled={!selectedQuestionType}\r\n+                                        >\r\n+                                <Plus className=\"h-4 w-4 mr-2\" />\r\n+                                          Add Question\r\n+                                        </Button>\r\n+                                      </div>\r\n+                      </TabsContent>\r\n+\r\n+                      {/* Activities Tab */}\r\n+                      <TabsContent value=\"activities\" className=\"space-y-4\">\r\n+                      <CardHeader>\r\n+                          <CardDescription>Add and manage activities for this lesson</CardDescription>\r\n+                      </CardHeader>\r\n+                        {activities.map((activity, index) => (\r\n+                          <Card key={index}>\r\n+                            <CardHeader className=\"pb-3\">\r\n+                              <div className=\"flex items-center justify-between\">\r\n+                                  <div className=\"flex items-center gap-2\">\r\n+                                  <Badge variant=\"outline\">Activity {index + 1}</Badge>\r\n+                                  </div>\r\n+                                <div className=\"flex items-center gap-2\">\r\n+                                  <Button\r\n+                                    variant=\"ghost\"\r\n+                                    size=\"sm\"\r\n+                                    onClick={() => handleActivityExpand(index)}\r\n+                                  >\r\n+                                    {expandedActivity === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n+                                  </Button>\r\n+                                  <Button\r\n+                                    variant=\"ghost\"\r\n+                                    size=\"sm\"\r\n+                                    onClick={() => handleRemoveActivity(index)}\r\n+                                  >\r\n+                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n+                                  </Button>\r\n+                                </div>\r\n+                              </div>\r\n+                            </CardHeader>\r\n+                            {expandedActivity === index && (\r\n+                              <CardContent>\r\n+                                <div className=\"space-y-4\">\r\n+                                  <div className=\"space-y-2\">\r\n+                                    <Label>Instructions</Label>\r\n+                                    <Textarea\r\n+                                      value={activity.instructions}\r\n+                                      onChange={(e) => handleUpdateActivity(index, {\r\n+                                        ...activity,\r\n+                                        instructions: e.target.value\r\n+                                      })}\r\n+                                      placeholder=\"Enter activity instructions\"\r\n+                                    />\r\n+                                  </div>\r\n+                                    \r\n+                                    {/* Media Section */}\r\n+                                    <div className=\"space-y-2\">\r\n+                                      <Label>Media</Label>\r\n+                                      {activity.media?.map((media, mediaIndex) => (\r\n+                                        <div key={mediaIndex} className=\"flex items-center gap-2\">\r\n+                                          <Input\r\n+                                            value={media.url}\r\n+                                            onChange={(e) => {\r\n+                                              const updatedMedia = [...(activity.media || [])];\r\n+                                              updatedMedia[mediaIndex] = {\r\n+                                                type: media.type,\r\n+                                                url: e.target.value\r\n+                                              };\r\n+                                              handleUpdateActivity(index, {\r\n+                                                ...activity,\r\n+                                                media: updatedMedia\r\n+                                              });\r\n+                                            }}\r\n+                                            placeholder=\"Media URL\"\r\n+                                          />\r\n+                                          <Select\r\n+                                            value={media.type}\r\n+                                            onValueChange={(value) => {\r\n+                                              const updatedMedia = [...(activity.media || [])];\r\n+                                              updatedMedia[mediaIndex] = {\r\n+                                                type: value as 'image' | 'gif' | 'video',\r\n+                                                url: media.url\r\n+                                              };\r\n+                                              handleUpdateActivity(index, {\r\n+                                                ...activity,\r\n+                                                media: updatedMedia\r\n+                                              });\r\n+                                            }}\r\n+                                          >\r\n+                                            <SelectTrigger className=\"w-[120px]\">\r\n+                                              <SelectValue placeholder=\"Type\" />\r\n+                                            </SelectTrigger>\r\n+                                            <SelectContent>\r\n+                                              <SelectItem value=\"image\">Image</SelectItem>\r\n+                                              <SelectItem value=\"gif\">GIF</SelectItem>\r\n+                                              <SelectItem value=\"video\">Video</SelectItem>\r\n+                                            </SelectContent>\r\n+                                          </Select>\r\n+                                <Button\r\n+                                            variant=\"ghost\"\r\n+                                            size=\"sm\"\r\n+                                  onClick={() => {\r\n+                                              const updatedMedia = (activity.media || []).filter((_, i) => i !== mediaIndex);\r\n+                                              handleUpdateActivity(index, {\r\n+                                                ...activity,\r\n+                                                media: updatedMedia\r\n+                                          });\r\n+                                          }}\r\n+                                  >\r\n+                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n+                                  </Button>\r\n+                                </div>\r\n+                                        ))}\r\n+                                  <Button\r\n+                                    variant=\"outline\"\r\n+                                    size=\"sm\"\r\n+                                            onClick={() => {\r\n+                                              handleUpdateActivity(index, {\r\n+                                                ...activity,\r\n+                                                media: [\r\n+                                                  ...(activity.media || [])  ,\r\n+                                                  { url: '', type: 'image' }\r\n+                                                ]\r\n+                                              });\r\n+                                            }}\r\n+                                  >\r\n+                                    <Plus className=\"h-4 w-4 mr-2\" />\r\n+                                            Add Media\r\n+                                  </Button>\r\n+                                </div>\r\n+                                      </div>\r\n+                                    </CardContent>\r\n+                                  )}\r\n+                                </Card>\r\n+                              ))}\r\n+\r\n+                              {/* Add Activity Button */}\r\n+                              <Button\r\n+                                onClick={handleAddActivity}\r\n+                                className=\"w-full\"\r\n+                              >\r\n+                                <Plus className=\"h-4 w-4 mr-2\" />\r\n+                                Add Activity\r\n+                              </Button>\r\n+                          </TabsContent>\r\n+                        </Tabs>\r\n+                        </div>\r\n+                )}\r\n+\r\n+                    {/* Floating Save Button */}\r\n+                    <div className=\"fixed bottom-8 right-8 flex items-center gap-4\">\r\n+                      {saveProgress !== 'idle' && (\r\n+                        <div className={cn(\r\n+                          \"flex items-center gap-2 rounded-lg px-4 py-2 shadow-lg\",\r\n+                          {\r\n+                            \"bg-background border\": saveProgress === 'saving',\r\n+                            \"bg-green-500 text-white\": saveProgress === 'saved',\r\n+                            \"bg-destructive text-destructive-foreground\": saveProgress === 'error'\r\n+                          }\r\n+                        )}>\r\n+                          {saveProgress === 'saving' && (\r\n+                            <>\r\n+                              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n+                              <span className=\"text-sm\">Saving changes...</span>\r\n+                            </>\r\n+                          )}\r\n+                          {saveProgress === 'saved' && (\r\n+                            <>\r\n+                              <Check className=\"h-4 w-4\" />\r\n+                              <span className=\"text-sm\">Changes saved</span>\r\n+                            </>\r\n+                          )}\r\n+                          {saveProgress === 'error' && (\r\n+                            <>\r\n+                              <X className=\"h-4 w-4\" />\r\n+                              <span className=\"text-sm\">Error saving changes</span>\r\n+                            </>\r\n+                          )}\r\n+                        </div>\r\n+                      )}\r\n+                      <Button\r\n+                        onClick={handleSaveLesson}\r\n+                        disabled={saveProgress === 'saving'}\r\n+                        className=\"shadow-lg\"\r\n+                      >\r\n+                        {saveProgress === 'saving' ? (\r\n+                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\r\n+                        ) : (\r\n+                          <Save className=\"h-4 w-4 mr-2\" />\r\n+                        )}\r\n+                        {saveProgress === 'saving' ? 'Saving...' : 'Save Lesson'}\r\n+                      </Button>\r\n+                    </div>\r\n+                  </>\r\n+            )}\r\n+    </div>\r\n+    \r\n+\r\n+      {/* Floating Save Button */}\r\n+      {selectedSubtopicId && currentLessonId && (\r\n+          <div className=\"fixed bottom-4 right-4 flex flex-col gap-2\">\r\n+            <TooltipProvider>\r\n+              <Tooltip>\r\n+                <TooltipTrigger asChild>\r\n+                  <Button\r\n+                    size=\"icon\"\r\n+                    className=\"rounded-full h-12 w-12 shadow-lg\"\r\n+                    onClick={handleSaveLesson}\r\n+                    disabled={!selectedSubtopicId || !lessonTitle || questions.length === 0}\r\n+                  >\r\n+                    <Save className=\"h-6 w-6\" />\r\n+                  </Button>\r\n+                </TooltipTrigger>\r\n+                <TooltipContent>\r\n+                  <p>Save Lesson (Ctrl+S)</p>\r\n+                </TooltipContent>\r\n+              </Tooltip>\r\n+            </TooltipProvider>\r\n+          </div>\r\n+        )}\r\n+        <SaveFeedback />\r\n+\r\n+        {/* Add Grade Modal */}\r\n+        {modalState.showAddGrade && (\r\n+          <Dialog \r\n+            open={modalState.showAddGrade} \r\n+            onOpenChange={(open) => handleModalStateChange('showAddGrade', open)}\r\n+          >\r\n+            <DialogContent \r\n+              className=\"sm:max-w-[425px]\"\r\n+              onEscapeKeyDown={cleanupModalState}\r\n+              onPointerDownOutside={cleanupModalState}\r\n+            >\r\n+              <DialogHeader>\r\n+                <DialogTitle>Add New Grade</DialogTitle>\r\n+                <DialogDescription>Enter the details for the new grade.</DialogDescription>\r\n+              </DialogHeader>\r\n+              <div className=\"space-y-4 py-4\">\r\n+                <div className=\"space-y-2\">\r\n+                  <Label htmlFor=\"grade-name\">Grade Name</Label>\r\n+                  <Input\r\n+                    id=\"grade-name\"\r\n+                    value={newItemData.name}\r\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n+                    placeholder=\"Enter grade name\"\r\n+                  />\r\n+      </div>\r\n+              </div>\r\n+              <DialogFooter>\r\n+                <Button variant=\"outline\" onClick={() => {\r\n+                  setModalState({ ...modalState, showAddGrade: false });\r\n+                  setNewItemData({ name: '', description: '' });\r\n+                }}>\r\n+                  Cancel\r\n+                </Button>\r\n+                <Button onClick={handleCreateGrade} disabled={!newItemData.name}>Create Grade</Button>\r\n+              </DialogFooter>\r\n+            </DialogContent>\r\n+          </Dialog>\r\n+        )}\r\n+\r\n+        {/* Add Topic Modal */}\r\n+        {modalState.showAddTopic && (\r\n+          <Dialog \r\n+            open={modalState.showAddTopic} \r\n+            onOpenChange={(open) => handleModalStateChange('showAddTopic', open)}\r\n+          >\r\n+            <DialogContent \r\n+              className=\"sm:max-w-[425px]\"\r\n+              onEscapeKeyDown={cleanupModalState}\r\n+              onPointerDownOutside={cleanupModalState}\r\n+            >\r\n+              <DialogHeader>\r\n+                <DialogTitle>Add New Topic</DialogTitle>\r\n+                <DialogDescription>Enter the details for the new topic.</DialogDescription>\r\n+              </DialogHeader>\r\n+              <div className=\"space-y-4 py-4\">\r\n+                <div className=\"space-y-2\">\r\n+                  <Label htmlFor=\"topic-name\">Topic Name</Label>\r\n+                  <Input\r\n+                    id=\"topic-name\"\r\n+                    value={newItemData.name}\r\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n+                    placeholder=\"Enter topic name\"\r\n+                  />\r\n+                </div>\r\n+              </div>\r\n+              <DialogFooter>\r\n+                <Button variant=\"outline\" onClick={() => {\r\n+                  setModalState({ ...modalState, showAddTopic: false });\r\n+                  setNewItemData({ name: '', description: '' });\r\n+                }}>\r\n+                  Cancel\r\n+                </Button>\r\n+                <Button onClick={handleCreateTopic} disabled={!newItemData.name}>Create Topic</Button>\r\n+              </DialogFooter>\r\n+            </DialogContent>\r\n+          </Dialog>\r\n+        )}\r\n+\r\n+        {/* Add Subtopic Modal */}\r\n+        {modalState.showAddSubtopic && (\r\n+          <Dialog \r\n+            open={modalState.showAddSubtopic} \r\n+            onOpenChange={(open) => handleModalStateChange('showAddSubtopic', open)}\r\n+          >\r\n+            <DialogContent \r\n+              className=\"sm:max-w-[425px]\"\r\n+              onEscapeKeyDown={cleanupModalState}\r\n+              onPointerDownOutside={cleanupModalState}\r\n+            >\r\n+              <DialogHeader>\r\n+                <DialogTitle>Add New Subtopic</DialogTitle>\r\n+                <DialogDescription>Enter the details for the new subtopic.</DialogDescription>\r\n+              </DialogHeader>\r\n+              <div className=\"space-y-4 py-4\">\r\n+                <div className=\"space-y-2\">\r\n+                  <Label htmlFor=\"subtopic-name\">Subtopic Name</Label>\r\n+                  <Input\r\n+                    id=\"subtopic-name\"\r\n+                    value={newItemData.name}\r\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n+                    placeholder=\"Enter subtopic name\"\r\n+                  />\r\n+                </div>\r\n+              </div>\r\n+              <DialogFooter>\r\n+                <Button variant=\"outline\" onClick={() => {\r\n+                  setModalState({ ...modalState, showAddSubtopic: false });\r\n+                  setNewItemData({ name: '', description: '' });\r\n+                }}>\r\n+                  Cancel\r\n+                </Button>\r\n+                <Button onClick={() => handleCreateSubtopic({ title: newItemData.name })} disabled={!newItemData.name}>Create Subtopic</Button>\r\n+              </DialogFooter>\r\n+            </DialogContent>\r\n+          </Dialog>\r\n+        )}\r\n+\r\n+        {/* Add Lesson Modal */}\r\n+        {modalState.showAddLesson && (\r\n+          <Dialog \r\n+            open={modalState.showAddLesson} \r\n+            onOpenChange={(open) => handleModalStateChange('showAddLesson', open)}\r\n+          >\r\n+            <DialogContent \r\n+              className=\"sm:max-w-[425px]\"\r\n+              onEscapeKeyDown={cleanupModalState}\r\n+              onPointerDownOutside={cleanupModalState}\r\n+            >\r\n+              <DialogHeader>\r\n+                <DialogTitle>Add New Lesson</DialogTitle>\r\n+                <DialogDescription>Enter the details for the new lesson.</DialogDescription>\r\n+              </DialogHeader>\r\n+              <div className=\"space-y-4 py-4\">\r\n+                <div className=\"space-y-2\">\r\n+                  <Label htmlFor=\"lesson-name\">Lesson Title</Label>\r\n+                  <Input\r\n+                    id=\"lesson-name\"\r\n+                    value={newItemData.name}\r\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n+                    placeholder=\"Enter lesson title\"\r\n+                  />\r\n+                </div>\r\n+              </div>\r\n+              <DialogFooter>\r\n+                <Button variant=\"outline\" onClick={() => {\r\n+                  setModalState({ ...modalState, showAddLesson: false });\r\n+                  setNewItemData({ name: '', description: '' });\r\n+                }}>\r\n+                  Cancel\r\n+                </Button>\r\n+                <Button onClick={handleCreateLesson} disabled={!newItemData.name}>Create Lesson</Button>\r\n+              </DialogFooter>\r\n+            </DialogContent>\r\n+          </Dialog>\r\n+        )}\r\n+      </div>\r\n+      <Toaster />\r\n+      </div>\r\n+  );\r\n+} \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739689944037,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -933,1452 +933,8 @@\n   }, [selectedSubtopicId]);\r\n   // Add loadLessonContent function\r\n   const isLoading = useRef(false);\r\n   const loadLessonContent = useCallback(async (lessonId: string) => {\r\n-    if (isLoading.current) return;\r\n-    isLoading.current = true;\r\n-\r\n-    try {\r\n-      const response = await fetch(`/api/lessons/${lessonId}/questions`);\r\n-      if (!response.ok) throw new Error('Failed to load questions');\r\n-      \r\n-      const data = await response.json();\r\n-      // Ensure each question has default values for optional fields\r\n-      const processedQuestions = data.map((question: any) => ({\r\n-        ...question,\r\n-        sampleAnswer: question.sampleAnswer || '', // Provide default empty string\r\n-        type: question.type || 'multiple_choice', // Provide default type\r\n-      }));\r\n-\r\n-      setQuestions(processedQuestions);\r\n-    } catch (error) {\r\n-      console.error('Error loading lesson content:', error);\r\n-      toast({\r\n-        title: \"Error\",\r\n-        description: \"Failed to load lesson content\",\r\n-        variant: \"destructive\",\r\n-                                        lesson_id: currentLessonId || '',\r\n-                                        type: isValidQuestionType(question.type) ? question.type : 'speaking',\r\n-                                        data: {\r\n-                                          prompt: question.data?.prompt || '',\r\n-                                          teacherScript: question.data?.teacherScript || '',\r\n-                                          followup_prompt: question.data?.followup_prompt || [],\r\n-                                          sampleAnswer: question.data?.sampleAnswer,\r\n-                                          answer: question.data?.answer\r\n-                                        }\r\n-                                      }}\r\n-                                      index={index}\r\n-                                      onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\r\n-                                        await handleUpdateQuestion(index, {\r\n-                                          ...updatedQuestion,\r\n-                                          data: {\r\n-                                            prompt: updatedQuestion.data?.prompt || '',\r\n-                                            teacherScript: updatedQuestion.data?.teacherScript || '',\r\n-                                            followup_prompt: updatedQuestion.data?.followup_prompt || [],\r\n-                                            sampleAnswer: updatedQuestion.data?.sampleAnswer,\r\n-                                            answer: updatedQuestion.data?.answer\r\n-                                          }\r\n-                                        });\r\n-                                      }}\r\n-                                      onRemove={handleRemoveQuestion}\r\n-                                      onAddExercisePrompt={handleAddExercisePrompt}\r\n-                                      onRemoveExercisePrompt={handleRemoveExercisePrompt}\r\n-                                      onExercisePromptChange={handleExercisePromptChange}\r\n-                                    /><Button \r\n-                                    size=\"sm\"\r\n-                                    variant=\"outline\"\r\n-                                    onClick={() => handleSaveQuestion(question, index)}\r\n-                                    className=\"ml-2\"\r\n-                                  >\r\n-                                    {questionSaveStatuses.find(s => s.id === question.id)?.status === 'saving' ? (\r\n-                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n-                                    ) : (\r\n-                                      <Save className=\"h-4 w-4 mr-2\" />\r\n-                                    )}\r\n-                                    Save Question\r\n-                                                    </Button>\r\n-                                    {/* Exercise Prompts with Save Buttons */}\r\n-                                    {question.exercisePrompts?.map((prompt, promptIndex) => (\r\n-                                      <div key={`${question.id}-prompt-${promptIndex}`} className=\"mt-4\"> {/* Updated key */}\r\n-                                        <div className=\"flex items-center justify-between mb-2\">\r\n-                                          <h4 className=\"text-sm font-medium\">Exercise Prompt {promptIndex + 1}</h4>\r\n-                                          <div className=\"flex items-center gap-2\">\r\n-                                            <TooltipProvider>\r\n-                                              <Tooltip>\r\n-                                                <TooltipTrigger asChild>\r\n-                                                  <Button\r\n-                                                    size=\"sm\"\r\n-                                                    variant=\"outline\"\r\n-                                                    onClick={() => handleSavePrompt(question.id, prompt, promptIndex)}\r\n-                                                    disabled={promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving'}\r\n-                                                  >\r\n-                                                    {promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving' ? (\r\n-                                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n-                                                    ) : (\r\n-                                                      <Save className=\"h-4 w-4 mr-2\" />\r\n-                                                    )}\r\n-                                                    Save Prompt\r\n-                                                  </Button>\r\n-                                                </TooltipTrigger>\r\n-                                                <TooltipContent>\r\n-                                                  {`Status: ${promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}`}\r\n-                                                </TooltipContent>\r\n-                                              </Tooltip>\r\n-                                            </TooltipProvider>\r\n-                                            <Badge variant={\r\n-                                              promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saved'\r\n-                                                ? 'secondary'\r\n-                                                : promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'error'\r\n-                                                ? 'destructive'\r\n-                                                : 'default'\r\n-                                            }>\r\n-                                              {promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}\r\n-                                            </Badge>\r\n-                                                  </div>\r\n-                                        </div>\r\n-                                        <ExercisePromptCard\r\n-                                          key={prompt.id} // Add a unique key here\r\n-                                          prompt={prompt}\r\n-                                          promptIndex={promptIndex}\r\n-                                          onRemove={() => handleRemoveExercisePrompt(index, promptIndex)}\r\n-                                          onUpdate={(updatedPrompt: ExercisePrompt) => {\r\n-                                            // Prevent duplicate updates\r\n-                                            if (updatedPrompt.id === prompt.id) {\r\n-                                              handleExercisePromptChange(index, promptIndex, updatedPrompt);\r\n-                                            }\r\n-                                          }}\r\n-                                        />\r\n-                                      </div>\r\n-                                    ))}\r\n-                                  </CardContent>\r\n-                                )}\r\n-                              </Card>\r\n-                            ))}\r\n-\r\n-                            {/* Add Question Button */}\r\n-                            <div className=\"flex items-center justify-between\">\r\n-                              <QuestionTypeSelect \r\n-                                value={selectedQuestionType} \r\n-                                onChange={handleQuestionTypeChange}\r\n-                              />\r\n-                                        <Button\r\n-                                          onClick={handleAddQuestion}\r\n-                                          disabled={!selectedQuestionType}\r\n-                                        >\r\n-                                <Plus className=\"h-4 w-4 mr-2\" />\r\n-                                          Add Question\r\n-                                        </Button>\r\n-                                      </div>\r\n-                      </TabsContent>\r\n-\r\n-                      {/* Activities Tab */}\r\n-                      <TabsContent value=\"activities\" className=\"space-y-4\">\r\n-                      <CardHeader>\r\n-                          <CardDescription>Add and manage activities for this lesson</CardDescription>\r\n-                      </CardHeader>\r\n-                        {activities.map((activity, index) => (\r\n-                          <Card key={index}>\r\n-                            <CardHeader className=\"pb-3\">\r\n-                              <div className=\"flex items-center justify-between\">\r\n-                                  <div className=\"flex items-center gap-2\">\r\n-                                  <Badge variant=\"outline\">Activity {index + 1}</Badge>\r\n-                                  </div>\r\n-                                <div className=\"flex items-center gap-2\">\r\n-                                  <Button\r\n-                                    variant=\"ghost\"\r\n-                                    size=\"sm\"\r\n-                                    onClick={() => handleActivityExpand(index)}\r\n-                                  >\r\n-                                    {expandedActivity === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n-                                  </Button>\r\n-                                  <Button\r\n-                                    variant=\"ghost\"\r\n-                                    size=\"sm\"\r\n-                                    onClick={() => handleRemoveActivity(index)}\r\n-                                  >\r\n-                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n-                                  </Button>\r\n-                                </div>\r\n-                              </div>\r\n-                            </CardHeader>\r\n-                            {expandedActivity === index && (\r\n-                              <CardContent>\r\n-                                <div className=\"space-y-4\">\r\n-                                  <div className=\"space-y-2\">\r\n-                                    <Label>Instructions</Label>\r\n-                                    <Textarea\r\n-                                      value={activity.instructions}\r\n-                                      onChange={(e) => handleUpdateActivity(index, {\r\n-                                        ...activity,\r\n-                                        instructions: e.target.value\r\n-                                      })}\r\n-                                      placeholder=\"Enter activity instructions\"\r\n-                                    />\r\n-                                  </div>\r\n-                                    \r\n-                                    {/* Media Section */}\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <Label>Media</Label>\r\n-                                      {activity.media?.map((media, mediaIndex) => (\r\n-                                        <div key={mediaIndex} className=\"flex items-center gap-2\">\r\n-                                          <Input\r\n-                                            value={media.url}\r\n-                                            onChange={(e) => {\r\n-                                              const updatedMedia = [...(activity.media || [])];\r\n-                                              updatedMedia[mediaIndex] = {\r\n-                                                type: media.type,\r\n-                                                url: e.target.value\r\n-                                              };\r\n-                                              handleUpdateActivity(index, {\r\n-                                                ...activity,\r\n-                                                media: updatedMedia\r\n-                                              });\r\n-                                            }}\r\n-                                            placeholder=\"Media URL\"\r\n-                                          />\r\n-                                          <Select\r\n-                                            value={media.type}\r\n-                                            onValueChange={(value) => {\r\n-                                              const updatedMedia = [...(activity.media || [])];\r\n-                                              updatedMedia[mediaIndex] = {\r\n-                                                type: value as 'image' | 'gif' | 'video',\r\n-                                                url: media.url\r\n-                                              };\r\n-                                              handleUpdateActivity(index, {\r\n-                                                ...activity,\r\n-                                                media: updatedMedia\r\n-                                              });\r\n-                                            }}\r\n-                                          >\r\n-                                            <SelectTrigger className=\"w-[120px]\">\r\n-                                              <SelectValue placeholder=\"Type\" />\r\n-                                            </SelectTrigger>\r\n-                                            <SelectContent>\r\n-                                              <SelectItem value=\"image\">Image</SelectItem>\r\n-                                              <SelectItem value=\"gif\">GIF</SelectItem>\r\n-                                              <SelectItem value=\"video\">Video</SelectItem>\r\n-                                            </SelectContent>\r\n-                                          </Select>\r\n-                                <Button\r\n-                                            variant=\"ghost\"\r\n-                                            size=\"sm\"\r\n-                                  onClick={() => {\r\n-                                              const updatedMedia = (activity.media || []).filter((_, i) => i !== mediaIndex);\r\n-                                              handleUpdateActivity(index, {\r\n-                                                ...activity,\r\n-                                                media: updatedMedia\r\n-                                          });\r\n-                                          }}\r\n-                                  >\r\n-                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n-                                  </Button>\r\n-                                </div>\r\n-                                        ))}\r\n-                                  <Button\r\n-                                    variant=\"outline\"\r\n-                                    size=\"sm\"\r\n-                                            onClick={() => {\r\n-                                              handleUpdateActivity(index, {\r\n-                                                ...activity,\r\n-                                                media: [\r\n-                                                  ...(activity.media || [])  ,\r\n-                                                  { url: '', type: 'image' }\r\n-                                                ]\r\n-                                              });\r\n-                                            }}\r\n-                                  >\r\n-                                    <Plus className=\"h-4 w-4 mr-2\" />\r\n-                                            Add Media\r\n-                                  </Button>\r\n-                                </div>\r\n-                                      </div>\r\n-                                    </CardContent>\r\n-                                  )}\r\n-                                </Card>\r\n-                              ))}\r\n-\r\n-                              {/* Add Activity Button */}\r\n-                              <Button\r\n-                                onClick={handleAddActivity}\r\n-                                className=\"w-full\"\r\n-                              >\r\n-                                <Plus className=\"h-4 w-4 mr-2\" />\r\n-                                Add Activity\r\n-                              </Button>\r\n-                          </TabsContent>\r\n-                        </Tabs>\r\n-                        </div>\r\n-                )}\r\n-\r\n-                    {/* Floating Save Button */}\r\n-                    <div className=\"fixed bottom-8 right-8 flex items-center gap-4\">\r\n-                      {saveProgress !== 'idle' && (\r\n-                        <div className={cn(\r\n-                          \"flex items-center gap-2 rounded-lg px-4 py-2 shadow-lg\",\r\n-                          {\r\n-                            \"bg-background border\": saveProgress === 'saving',\r\n-                            \"bg-green-500 text-white\": saveProgress === 'saved',\r\n-                            \"bg-destructive text-destructive-foreground\": saveProgress === 'error'\r\n-                          }\r\n-                        )}>\r\n-                          {saveProgress === 'saving' && (\r\n-                            <>\r\n-                              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n-                              <span className=\"text-sm\">Saving changes...</span>\r\n-                            </>\r\n-                          )}\r\n-                          {saveProgress === 'saved' && (\r\n-                            <>\r\n-                              <Check className=\"h-4 w-4\" />\r\n-                              <span className=\"text-sm\">Changes saved</span>\r\n-                            </>\r\n-                          )}\r\n-                          {saveProgress === 'error' && (\r\n-                            <>\r\n-                              <X className=\"h-4 w-4\" />\r\n-                              <span className=\"text-sm\">Error saving changes</span>\r\n-                            </>\r\n-                          )}\r\n-                        </div>\r\n-                      )}\r\n-                      <Button\r\n-                        onClick={handleSaveLesson}\r\n-                        disabled={saveProgress === 'saving'}\r\n-                        className=\"shadow-lg\"\r\n-                      >\r\n-                        {saveProgress === 'saving' ? (\r\n-                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\r\n-                        ) : (\r\n-                          <Save className=\"h-4 w-4 mr-2\" />\r\n-                        )}\r\n-                        {saveProgress === 'saving' ? 'Saving...' : 'Save Lesson'}\r\n-                      </Button>\r\n-                    </div>\r\n-                  </>\r\n-            )}\r\n-    </div>\r\n-    \r\n-\r\n-      {/* Floating Save Button */}\r\n-      {selectedSubtopicId && currentLessonId && (\r\n-          <div className=\"fixed bottom-4 right-4 flex flex-col gap-2\">\r\n-            <TooltipProvider>\r\n-              <Tooltip>\r\n-                <TooltipTrigger asChild>\r\n-                  <Button\r\n-                    size=\"icon\"\r\n-                    className=\"rounded-full h-12 w-12 shadow-lg\"\r\n-                    onClick={handleSaveLesson}\r\n-                    disabled={!selectedSubtopicId || !lessonTitle || questions.length === 0}\r\n-                  >\r\n-                    <Save className=\"h-6 w-6\" />\r\n-                  </Button>\r\n-                </TooltipTrigger>\r\n-                <TooltipContent>\r\n-                  <p>Save Lesson (Ctrl+S)</p>\r\n-                </TooltipContent>\r\n-              </Tooltip>\r\n-            </TooltipProvider>\r\n-          </div>\r\n-        )}\r\n-        <SaveFeedback />\r\n-\r\n-        {/* Add Grade Modal */}\r\n-        {modalState.showAddGrade && (\r\n-          <Dialog \r\n-            open={modalState.showAddGrade} \r\n-            onOpenChange={(open) => handleModalStateChange('showAddGrade', open)}\r\n-          >\r\n-            <DialogContent \r\n-              className=\"sm:max-w-[425px]\"\r\n-              onEscapeKeyDown={cleanupModalState}\r\n-              onPointerDownOutside={cleanupModalState}\r\n-            >\r\n-              <DialogHeader>\r\n-                <DialogTitle>Add New Grade</DialogTitle>\r\n-                <DialogDescription>Enter the details for the new grade.</DialogDescription>\r\n-              </DialogHeader>\r\n-              <div className=\"space-y-4 py-4\">\r\n-                <div className=\"space-y-2\">\r\n-                  <Label htmlFor=\"grade-name\">Grade Name</Label>\r\n-                  <Input\r\n-                    id=\"grade-name\"\r\n-                    value={newItemData.name}\r\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n-                    placeholder=\"Enter grade name\"\r\n-                  />\r\n-      </div>\r\n-              </div>\r\n-              <DialogFooter>\r\n-                <Button variant=\"outline\" onClick={() => {\r\n-                  setModalState({ ...modalState, showAddGrade: false });\r\n-                  setNewItemData({ name: '', description: '' });\r\n-                }}>\r\n-                  Cancel\r\n-                </Button>\r\n-                <Button onClick={handleCreateGrade} disabled={!newItemData.name}>Create Grade</Button>\r\n-              </DialogFooter>\r\n-            </DialogContent>\r\n-          </Dialog>\r\n-        )}\r\n-\r\n-        {/* Add Topic Modal */}\r\n-        {modalState.showAddTopic && (\r\n-          <Dialog \r\n-            open={modalState.showAddTopic} \r\n-            onOpenChange={(open) => handleModalStateChange('showAddTopic', open)}\r\n-          >\r\n-            <DialogContent \r\n-              className=\"sm:max-w-[425px]\"\r\n-              onEscapeKeyDown={cleanupModalState}\r\n-              onPointerDownOutside={cleanupModalState}\r\n-            >\r\n-              <DialogHeader>\r\n-                <DialogTitle>Add New Topic</DialogTitle>\r\n-                <DialogDescription>Enter the details for the new topic.</DialogDescription>\r\n-              </DialogHeader>\r\n-              <div className=\"space-y-4 py-4\">\r\n-                <div className=\"space-y-2\">\r\n-                  <Label htmlFor=\"topic-name\">Topic Name</Label>\r\n-                  <Input\r\n-                    id=\"topic-name\"\r\n-                    value={newItemData.name}\r\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n-                    placeholder=\"Enter topic name\"\r\n-                  />\r\n-                </div>\r\n-              </div>\r\n-              <DialogFooter>\r\n-                <Button variant=\"outline\" onClick={() => {\r\n-                  setModalState({ ...modalState, showAddTopic: false });\r\n-                  setNewItemData({ name: '', description: '' });\r\n-                }}>\r\n-                  Cancel\r\n-                </Button>\r\n-                <Button onClick={handleCreateTopic} disabled={!newItemData.name}>Create Topic</Button>\r\n-              </DialogFooter>\r\n-            </DialogContent>\r\n-          </Dialog>\r\n-        )}\r\n-\r\n-        {/* Add Subtopic Modal */}\r\n-        {modalState.showAddSubtopic && (\r\n-          <Dialog \r\n-            open={modalState.showAddSubtopic} \r\n-            onOpenChange={(open) => handleModalStateChange('showAddSubtopic', open)}\r\n-          >\r\n-            <DialogContent \r\n-              className=\"sm:max-w-[425px]\"\r\n-              onEscapeKeyDown={cleanupModalState}\r\n-              onPointerDownOutside={cleanupModalState}\r\n-            >\r\n-              <DialogHeader>\r\n-                <DialogTitle>Add New Subtopic</DialogTitle>\r\n-                <DialogDescription>Enter the details for the new subtopic.</DialogDescription>\r\n-              </DialogHeader>\r\n-              <div className=\"space-y-4 py-4\">\r\n-                <div className=\"space-y-2\">\r\n-                  <Label htmlFor=\"subtopic-name\">Subtopic Name</Label>\r\n-                  <Input\r\n-                    id=\"subtopic-name\"\r\n-                    value={newItemData.name}\r\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n-                    placeholder=\"Enter subtopic name\"\r\n-                  />\r\n-                </div>\r\n-              </div>\r\n-              <DialogFooter>\r\n-                <Button variant=\"outline\" onClick={() => {\r\n-                  setModalState({ ...modalState, showAddSubtopic: false });\r\n-                  setNewItemData({ name: '', description: '' });\r\n-                }}>\r\n-                  Cancel\r\n-                </Button>\r\n-                <Button onClick={() => handleCreateSubtopic({ title: newItemData.name })} disabled={!newItemData.name}>Create Subtopic</Button>\r\n-              </DialogFooter>\r\n-            </DialogContent>\r\n-          </Dialog>\r\n-        )}\r\n-\r\n-        {/* Add Lesson Modal */}\r\n-        {modalState.showAddLesson && (\r\n-          <Dialog \r\n-            open={modalState.showAddLesson} \r\n-            onOpenChange={(open) => handleModalStateChange('showAddLesson', open)}\r\n-          >\r\n-            <DialogContent \r\n-              className=\"sm:max-w-[425px]\"\r\n-              onEscapeKeyDown={cleanupModalState}\r\n-              onPointerDownOutside={cleanupModalState}\r\n-            >\r\n-              <DialogHeader>\r\n-                <DialogTitle>Add New Lesson</DialogTitle>\r\n-                <DialogDescription>Enter the details for the new lesson.</DialogDescription>\r\n-              </DialogHeader>\r\n-              <div className=\"space-y-4 py-4\">\r\n-                <div className=\"space-y-2\">\r\n-                  <Label htmlFor=\"lesson-name\">Lesson Title</Label>\r\n-                  <Input\r\n-                    id=\"lesson-name\"\r\n-                    value={newItemData.name}\r\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n-                    placeholder=\"Enter lesson title\"\r\n-                  />\r\n-                </div>\r\n-              </div>\r\n-              <DialogFooter>\r\n-                <Button variant=\"outline\" onClick={() => {\r\n-                  setModalState({ ...modalState, showAddLesson: false });\r\n-                  setNewItemData({ name: '', description: '' });\r\n-                }}>\r\n-                  Cancel\r\n-                </Button>\r\n-                <Button onClick={handleCreateLesson} disabled={!newItemData.name}>Create Lesson</Button>\r\n-              </DialogFooter>\r\n-            </DialogContent>\r\n-          </Dialog>\r\n-        )}\r\n-      </div>\r\n-      <Toaster />\r\n-      </div>\r\n-  );\r\n-} \n-\"use client\";\r\n-\r\n-import { useState, useCallback, useEffect, useRef } from 'react';\r\n-import { toast } from 'sonner';\r\n-import { Toaster } from 'sonner';\r\n-import Link from 'next/link';\r\n-import {  Activity as ActivityIcon,  ArrowLeft,  BookOpen,  ChevronDown,  ChevronRight,  Check,  Edit,  Eye,  EyeOff,  HelpCircle,  Layers,  List,  MessageSquare,  Plus,  Save,  Trash as Trash2, X, Pencil, Lock, Unlock, RefreshCw } from 'lucide-react';\r\n-import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\n-import { Badge } from '@/components/ui/badge';\r\n-import { Button } from '@/components/ui/button';\r\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\n-import { Input } from '@/components/ui/input';\r\n-import { Label } from '@/components/ui/label';\r\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\n-import { Textarea } from '@/components/ui/textarea';\r\n-import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\r\n-import { cn } from '@/lib/utils';\r\n-import { API_BASE_URL, QUESTION_TYPES, isQuestionType } from './constants';\r\n-import { ExercisePrompt, Lesson } from './types';\r\n-import { QuestionFormProps, ExercisePromptCardProps, Activity, Grade, Topic, Subtopic as SubTopic } from './types';\r\n-import { QuestionForm } from './components/question-form';\r\n-import { ExercisePromptCard } from './components/exercise-prompt-card';\r\n-import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\r\n-import { supabase } from '@/lib/supabase';\r\n-import { useContentStore } from '@/lib/content/store';\r\n-import { contentService } from '@/lib/content/ContentService';\r\n-import { MediaPreview } from '@/components/ui/media-preview';\r\n-import { QuestionTypeSelect } from './components/question-type-select';\r\n-import { RichTextEditor } from '@/components/ui/rich-text-editor';\r\n-import {\r\n-  AlertDialog,\r\n-  AlertDialogAction,\r\n-  AlertDialogContent,\r\n-  AlertDialogDescription,\r\n-  AlertDialogFooter,\r\n-  AlertDialogHeader,\r\n-  AlertDialogTitle,\r\n-} from \"@/components/ui/alert-dialog\";\r\n-import { debounce, isNull } from 'lodash';\r\n-import { PostgrestError } from '@supabase/supabase-js';\r\n-import { Question as ContentQuestion } from './types';  // Import the specific type\r\n-\r\n-\r\n-// Update the API endpoint to match your backend route\r\n-const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\r\n-\r\n-interface QuestionTypeSelectProps {\r\n-  value: string;\r\n-  onValueChange: (value: string) => void;\r\n-}\r\n-\r\n-// Add metadata type\r\n-interface LessonMetadata {\r\n-  lastEdited?: string;\r\n-  version?: number;\r\n-  tags?: string[];\r\n-  status?: 'draft' | 'published';\r\n-  authorId?: string;\r\n-  duration?: number;\r\n-  transcript?: string;\r\n-}\r\n-\r\n-type ContentType = 'html' | 'markdown' | 'rich-text' | 'text' | 'json';\r\n-\r\n-interface LessonContent {\r\n-  id: string;\r\n-  lesson_id: string;\r\n-  content: any[];\r\n-  metadata: {\r\n-    lastEdited?: string;\r\n-    version?: number;\r\n-    status?: 'draft' | 'published';\r\n-    authorId?: string;\r\n-  };\r\n-  content_type: string;\r\n-  order_index: number;\r\n-  updated_at: string;\r\n-  user_id: string;\r\n-}\r\n-\r\n-interface InlineEditProps {\r\n-  value: string;\r\n-  onSave: (value: string) => void;\r\n-  isEditing: boolean;\r\n-  setIsEditing: (value: boolean) => void;\r\n-  placeholder?: string;\r\n-  className?: string;\r\n-}\r\n-\r\n-// Add validation interface\r\n-interface QuestionValidation {\r\n-  isValid: boolean;\r\n-  message: string;\r\n-}\r\n-\r\n-// Add this type validation helper\r\n-const getQuestionTypeFields = (type: string) => {\r\n-  switch (type) {\r\n-    case 'multipleChoice':\r\n-      return {\r\n-        required: ['prompt', 'options', 'correctAnswer'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          options: [],\r\n-          correctAnswer: '',\r\n-          teacherScript: '',\r\n-          explanation: ''\r\n-        }\r\n-      };\r\n-    case 'fillInBlank':\r\n-      return {\r\n-        required: ['prompt', 'blanks'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          blanks: [],\r\n-          teacherScript: '',\r\n-          explanation: ''\r\n-        }\r\n-      };\r\n-    case 'trueFalse':\r\n-      return {\r\n-        required: ['prompt', 'correctAnswer'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          correctAnswer: null,\r\n-          teacherScript: '',\r\n-          explanation: ''\r\n-        }\r\n-      };\r\n-    case 'matching':\r\n-      return {\r\n-        required: ['prompt', 'pairs'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          pairs: [],\r\n-          teacherScript: '',\r\n-          explanation: ''\r\n-        }\r\n-      };\r\n-    case 'ordering':\r\n-      return {\r\n-        required: ['prompt', 'items'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          items: [],\r\n-          correctOrder: [],\r\n-          teacherScript: '',\r\n-          explanation: ''\r\n-        }\r\n-      };\r\n-    case 'shortAnswer':\r\n-      return {\r\n-        required: ['prompt', 'sampleAnswer'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          sampleAnswer: '',\r\n-          teacherScript: '',\r\n-          explanation: '',\r\n-          keywords: []\r\n-        }\r\n-      };\r\n-    case 'speaking':\r\n-      return {\r\n-        required: ['prompt', 'sampleAnswer'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          sampleAnswer: '',\r\n-          teacherScript: '',\r\n-          audioPrompt: '',\r\n-          pronunciation: ''\r\n-        }\r\n-      };\r\n-    case 'listening':\r\n-      return {\r\n-        required: ['prompt', 'audioContent'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          audioContent: '',\r\n-          transcript: '',\r\n-          teacherScript: '',\r\n-          comprehensionQuestions: []\r\n-        }\r\n-      };\r\n-    case 'listenAndRepeat':\r\n-      return {\r\n-        required: ['prompt', 'audioContent'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          audioContent: '',\r\n-          targetPhrase: '',\r\n-          teacherScript: '',\r\n-          pronunciation: ''\r\n-        }\r\n-      };\r\n-    default:\r\n-      return {\r\n-        required: ['prompt'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          teacherScript: ''\r\n-        }\r\n-      };\r\n-  }\r\n-}\r\n-\r\n-interface SaveStatus {\r\n-  id: string;\r\n-  status: 'draft' | 'saved' | 'saving' | 'error';\r\n-  lastSaved?: string;\r\n-}\r\n-\r\n-interface Question {\r\n-  id: string;\r\n-  type: string;\r\n-  lesson_id: string;\r\n-  title: string;\r\n-  metadata: Record<string, any>;\r\n-  data: Record<string, any>; // This allows dynamic field access\r\n-  exercisePrompts: ExercisePrompt[];\r\n-  isDraft?: boolean;\r\n-}\r\n-\r\n-// Add at the top of the file with other type definitions\r\n-type QuestionType = keyof typeof QUESTION_TYPES;\r\n-\r\n-// Add this type guard function\r\n-const isValidQuestionType = (type: string): type is QuestionType => {\r\n-  return type in QUESTION_TYPES;\r\n-};\r\n-\r\n-// Update handleAddQuestion\r\n-\r\n-\r\n-// Update validateQuestion\r\n-const validateQuestion = (question: Question): QuestionValidation => {\r\n-  const { required } = getQuestionTypeFields(question.type);\r\n-  const missingFields = required.filter(field => {\r\n-    const value = question.data?.[field];\r\n-    return !value || \r\n-      (Array.isArray(value) && value.length === 0) || \r\n-      (typeof value === 'string' && !value.trim());\r\n-  });\r\n-\r\n-  if (missingFields.length > 0) {\r\n-    return {\r\n-      isValid: false,\r\n-      message: `Missing required fields: ${missingFields.join(', ')}`\r\n-    };\r\n-  }\r\n-\r\n-  return { isValid: true, message: '' };\r\n-};\r\n-\r\n-export default function LessonManagementPage() {\r\n-  // State declarations\r\n-  \r\n-  const [selectedGradeId, setSelectedGradeId] = useState<string | null>(null);\r\n-  const [selectedTopicId, setSelectedTopicId] = useState<string | null>(null);\r\n-  const [selectedSubtopicId, setSelectedSubtopicId] = useState<string | null>(null);\r\n-  const [lessonTitle, setLessonTitle] = useState<string>('');\r\n-  const [currentLessonId, setCurrentLessonId] = useState<string | null>(null);\r\n-  const [questions, setQuestions] = useState<Question[]>([]);\r\n-  const [saveProgress, setSaveProgress] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');\r\n-  const [activities, setActivities] = useState<Activity[]>([]);\r\n-  const [localBuffer, setLocalBuffer] = useState<{ timestamp: number; data: any } | null>(null);\r\n-  const [lastSavedToServer, setLastSavedToServer] = useState<number>(Date.now());\r\n-  const [selectedQuestionType, setSelectedQuestionType] = useState<string>('');\r\n-  const [editingQuestionIndex, setEditingQuestionIndex] = useState<number | null>(null);\r\n-  const [showHelpTips, setShowHelpTips] = useState(true);\r\n-  const [isNavigating, setIsNavigating] = useState(false);\r\n-  const [lessons, setLessons] = useState<Lesson[]>([]);\r\n-  const [grades, setGrades] = useState<Grade[]>([]);\r\n-  const [topics, setTopics] = useState<Topic[]>([]);\r\n-  const [subtopics, setSubtopics] = useState<SubTopic[]>([]);\r\n-  const [contentHeading, setContentHeading] = useState<string>('');\r\n-    // Add with your other state declarations\r\n-  const [isContentExpanded, setIsContentExpanded] = useState<boolean>(false);\r\n-  const [modalState, setModalState] = useState({\r\n-    showAddGrade: false,\r\n-    showAddTopic: false,\r\n-    showAddSubtopic: false,\r\n-    showAddLesson: false\r\n-  });\r\n-  const [isViewMode, setIsViewMode] = useState<boolean>(true);\r\n-  const [expandedGrade, setExpandedGrade] = useState<string | null>(null);\r\n-  const [expandedTopic, setExpandedTopic] = useState<string | null>(null);\r\n-  const [expandedSubtopic, setExpandedSubtopic] = useState<string | null>(null);\r\n-  const [expandedQuestion, setExpandedQuestion] = useState<number | null>(null);\r\n-  const [expandedActivity, setExpandedActivity] = useState<number | null>(null);\r\n-  const [newItemData, setNewItemData] = useState({\r\n-    name: '',\r\n-    description: ''\r\n-  });\r\n-  const [lessonContent, setLessonContent] = useState<string>('');\r\n-  const [isContentEditorOpen, setIsContentEditorOpen] = useState(false);\r\n-  const [isEditingTitle, setIsEditingTitle] = useState<boolean>(false);\r\n-  const [isEditingHeading, setIsEditingHeading] = useState<boolean>(false);\r\n-  const [isEditingDescription, setIsEditingDescription] = useState<boolean>(false);\r\n-  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\r\n-  const [isSidebarLocked, setIsSidebarLocked] = useState(true);\r\n-  const [alertDialogState, setAlertDialogState] = useState<{\r\n-    isOpen: boolean;\r\n-    title: string;\r\n-    message: string;\r\n-    onConfirm: (value?: unknown) => void;\r\n-  }>({\r\n-    isOpen: false,\r\n-    title: '',\r\n-    message: '',\r\n-    onConfirm: () => {}\r\n-  });\r\n-\r\n-  const { \r\n-    selectedGrade,\r\n-    setSelectedGrade,\r\n-    selectedTopic,\r\n-    setSelectedTopic,\r\n-    selectedSubtopic,\r\n-    setSelectedSubtopic,\r\n-    selectedLesson,\r\n-    setSelectedLesson\r\n-  } = useContentStore();\r\n-\r\n-  // Add new state for tracking save status\r\n-  interface SaveStatus {\r\n-    id: string;\r\n-    status: 'draft' | 'saved' | 'saving' | 'error' | 'draft';\r\n-    lastSaved?: string;\r\n-  }\r\n-\r\n-  const [questionSaveStatuses, setQuestionSaveStatuses] = useState<Array<{\r\n-    id: string;\r\n-    status: 'idle' | 'saving' | 'saved' | 'error' | 'draft';\r\n-  }>>([]);\r\n-  const [promptSaveStatuses, setPromptSaveStatuses] = useState<SaveStatus[]>([]);\r\n-\r\n-  // Add this state to track dropdown state\r\n-  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n-\r\n-  // Event handlers\r\n-  const handleQuestionTypeChange = useCallback((type: string) => {\r\n-    if (isQuestionType(type)) {\r\n-      setSelectedQuestionType(type);\r\n-    }\r\n-  }, []);\r\n-\r\n-  const handleAddQuestion = useCallback(() => {\r\n-    if (!selectedQuestionType || !isQuestionType(selectedQuestionType)) return;\r\n-\r\n-    const defaultData = QUESTION_TYPES[selectedQuestionType].defaultData;\r\n-    const newQuestion: Question = {\r\n-      id: crypto.randomUUID(),\r\n-      type: selectedQuestionType,\r\n-      data: {},\r\n-      title: 'New Question',\r\n-      lesson_id: currentLessonId || '',\r\n-      metadata: {},\r\n-      // data: {\r\n-      //   ...defaultData,\r\n-      //   prompt: '',\r\n-      //   teacherScript: ''\r\n-      // },\r\n-      exercisePrompts: [],\r\n-      isDraft: true\r\n-    };\r\n-\r\n-    setQuestions(prev => [...prev, newQuestion]);\r\n-    setQuestionSaveStatuses(prev => [\r\n-      ...prev,\r\n-      { id: newQuestion.id, status: 'draft' }\r\n-    ]);\r\n-    setSelectedQuestionType('');\r\n-  }, [selectedQuestionType, currentLessonId]);\r\n-\r\n-  const handleRemoveQuestion = async (index: number) => {\r\n-    try {\r\n-      const questionToDelete = questions[index];\r\n-      \r\n-      // Delete related exercise prompts first\r\n-      const { error: promptError } = await supabase\r\n-        .from('exercise_prompts')\r\n-        .delete()\r\n-        .eq('question_id', questionToDelete.id);\r\n-\r\n-      if (promptError) throw promptError;\r\n-\r\n-      // Then delete the question\r\n-      const { error: questionError } = await supabase\r\n-        .from('questions')\r\n-        .delete()\r\n-        .eq('id', questionToDelete.id);\r\n-\r\n-      if (questionError) throw questionError;\r\n-\r\n-      // Update local state\r\n-      const newQuestions = questions.filter((_, i) => i !== index);\r\n-      setQuestions(newQuestions);\r\n-      \r\n-      toast.success('Question and related prompts deleted successfully');\r\n-    } catch (error) {\r\n-      console.error('Error deleting question:', error);\r\n-      toast.error('Failed to delete question and prompts');\r\n-    }\r\n-  };\r\n-\r\n-  const handleUpdateQuestion = useCallback(async (index: number, updatedQuestion: Question) => {\r\n-    const newQuestions = [...questions];\r\n-    newQuestions[index] = updatedQuestion;\r\n-    setQuestions(newQuestions);\r\n-    setQuestionSaveStatuses(prev => prev.map((status, i) => \r\n-      i === index ? { ...status, status: 'draft' } : status\r\n-    ));\r\n-  }, [questions]);\r\n-\r\n-  const handleAddExercisePrompt = useCallback((questionIndex: number) => {\r\n-    setQuestions(prev => prev.map((question, i) => {\r\n-      if (i === questionIndex) {\r\n-        return {\r\n-          ...question,\r\n-          exercisePrompts: [\r\n-            ...question.exercisePrompts,\r\n-            {\r\n-              id: crypto.randomUUID(),\r\n-              text: '',\r\n-              media: '',\r\n-              type: 'image',\r\n-              narration: 'Your turn',\r\n-              saytext: 'Say: ',\r\n-              created_at: new Date().toISOString(),\r\n-              updated_at: new Date().toISOString()\r\n-            }\r\n-          ]\r\n-        };\r\n-      }\r\n-      return question;\r\n-    }));\r\n-  }, []);\r\n-\r\n-  const handleRemoveExercisePrompt = useCallback((questionIndex: number, promptIndex: number) => {\r\n-    setQuestions(prev => prev.map((question, i) => {\r\n-      if (i === questionIndex) {\r\n-        return {\r\n-          ...question,\r\n-          exercisePrompts: question.exercisePrompts.filter((_, j) => j !== promptIndex)\r\n-        };\r\n-      }\r\n-      return question;\r\n-    }));\r\n-  }, []);\r\n-\r\n-  const handleExercisePromptChange = useCallback(async (\r\n-    questionIndex: number,\r\n-    promptIndex: number,\r\n-    updatedPrompt: ExercisePrompt\r\n-  ) => {\r\n-    try {\r\n-      const promptUpdate = {\r\n-        id: updatedPrompt.id,\r\n-        question_id: updatedPrompt.question_id,\r\n-        text: updatedPrompt.text,\r\n-        type: updatedPrompt.type,\r\n-        narration: updatedPrompt.narration,\r\n-        saytext: updatedPrompt.saytext,\r\n-        media: updatedPrompt.media,\r\n-        // Remove order_index as it's not in schema\r\n-        created_at: new Date().toISOString()\r\n-      };\r\n-\r\n-      const { error: promptError } = await supabase\r\n-        .from('exercise_prompts')\r\n-        .upsert(promptUpdate)\r\n-        .select();\r\n-\r\n-      if (promptError) throw promptError;\r\n-\r\n-      // Update local state\r\n-      setQuestions(prev => prev.map((question, i) => {\r\n-        if (i === questionIndex) {\r\n-          const newPrompts = [...question.exercisePrompts];\r\n-          newPrompts[promptIndex] = updatedPrompt;\r\n-          return { ...question, exercisePrompts: newPrompts };\r\n-        }\r\n-        return question;\r\n-      }));\r\n-\r\n-    } catch (error) {\r\n-      console.error('Error saving prompt:', error);\r\n-      toast.error('Failed to save prompt');\r\n-    }\r\n-  }, []);\r\n-\r\n-  const handleAddActivity = useCallback(() => {\r\n-    const newActivity: Activity = {\r\n-      id: crypto.randomUUID(),\r\n-      lesson_id: currentLessonId || '',\r\n-      created_at: new Date().toISOString(),\r\n-      type: 'practice',\r\n-      title: '',\r\n-      name: '',\r\n-      instructions: '',\r\n-      media: [],\r\n-      data: {\r\n-        prompt: '',\r\n-        teacherScript: '',\r\n-        media: []\r\n-      }\r\n-    };\r\n-    setActivities(prev => [...prev, newActivity]);\r\n-  }, [currentLessonId]);\r\n-\r\n-  const handleUpdateActivity = useCallback((index: number, updatedActivity: Activity) => {\r\n-    setActivities(prev => prev.map((activity, i) => i === index ? updatedActivity : activity));\r\n-  }, []);\r\n-\r\n-  const handleRemoveActivity = useCallback((index: number) => {\r\n-    setActivities(prev => prev.filter((_, i) => i !== index));\r\n-  }, []);\r\n-\r\n-  const handleExercisePromptUpdate = useCallback((questionIndex: number, promptIndex: number, updatedPrompt: ExercisePrompt) => {\r\n-    const updatedQuestions = [...questions];\r\n-    updatedQuestions[questionIndex].exercisePrompts[promptIndex] = updatedPrompt;\r\n-    handleUpdateQuestion(questionIndex, updatedQuestions[questionIndex]);\r\n-  }, [questions, handleUpdateQuestion]);\r\n-\r\n-  const handleQuestionDataChange = useCallback((questionIndex: number, field: string, value: string) => {\r\n-    setQuestions(prev => prev.map((q, i) => \r\n-      i === questionIndex \r\n-        ? { \r\n-            ...q, \r\n-            data: { \r\n-              prompt: q.data?.prompt || '',\r\n-              teacherScript: q.data?.teacherScript || '',\r\n-              ...q.data,\r\n-              [field]: value \r\n-            } \r\n-          }\r\n-        : q\r\n-    ));\r\n-  }, []);\r\n-\r\n-  const [isSaving, setIsSaving] = useState(false);\r\n-\r\n-  const handleSaveLesson = async () => {\r\n-    try {\r\n-      if (!currentLessonId || !selectedSubtopicId) {\r\n-        toast.error('Please select a subtopic and lesson first');\r\n-        return;\r\n-      }\r\n-\r\n-      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\r\n-      if (sessionError) throw sessionError;\r\n-      \r\n-      if (!session?.user) {\r\n-        toast.error('Please sign in to save lessons');\r\n-        return;\r\n-      }\r\n-\r\n-      // Get user's role from session\r\n-      const userRole = session.user.user_metadata?.role;\r\n-      console.log('Current user role:', userRole);\r\n-      console.log('📝 Saving content heading:', {\r\n-        contentHeading,\r\n-        currentLessonId,\r\n-        selectedSubtopicId,\r\n-        timestamp: new Date().toISOString()\r\n-      });\r\n-\r\n-      // Create metadata object\r\n-      const lessonMetadata = {\r\n-        lastEdited: new Date().toISOString(),\r\n-        version: 1,\r\n-        status: 'draft' \r\n-      };\r\n-\r\n-      // Complete lesson data with all fields\r\n-      const lessonData = {\r\n-        id: currentLessonId,\r\n-        title: lessonTitle,\r\n-        content: lessonContent,\r\n-        metadata: lessonMetadata, // Supabase will automatically handle JSON conversion\r\n-        content_type: 'html',\r\n-        lesson_type: 'lesson',\r\n-        grade_id: selectedGradeId,\r\n-        topic_id: selectedTopicId,\r\n-        subtopic_id: selectedSubtopicId,\r\n-        user_id: session.user.id,\r\n-        updated_at: new Date().toISOString(),\r\n-        role: userRole, // Include role in the payload\r\n-        description: '',\r\n-        prerequisites: [],\r\n-        media_type: 'image',\r\n-        media_url: '',\r\n-        contentheading: contentHeading || ''\r\n-      };\r\n-\r\n-      console.log('📦 Data being sent to Supabase:', lessonData);\r\n-\r\n-      // Save lesson with all fields\r\n-      const { data, error: lessonError } = await supabase\r\n-        .from('lessons')\r\n-        .upsert(lessonData, { \r\n-          onConflict: 'id'\r\n-        })\r\n-        .select();\r\n-\r\n-      if (lessonError) throw lessonError;\r\n-\r\n-      // 2. Save lesson content\r\n-      const { data: existingContent } = await supabase\r\n-        .from('lesson_content')\r\n-        .select('id')\r\n-        .eq('lesson_id', currentLessonId)\r\n-        .single();\r\n-\r\n-      const contentMetadata = {\r\n-        lastEdited: new Date().toISOString(),\r\n-        version: 1,\r\n-        status: 'draft'\r\n-      };\r\n-\r\n-      const contentUpdate = {\r\n-        id: existingContent?.id || crypto.randomUUID(),\r\n-        lesson_id: currentLessonId,\r\n-        content: [lessonContent],\r\n-        metadata: contentMetadata, // Supabase will automatically handle JSON conversion\r\n-        content_type: 'html',\r\n-        user_id: session.user.id,\r\n-        updated_at: new Date().toISOString(),\r\n-        created_at: new Date().toISOString()\r\n-      };\r\n-\r\n-      const { error: contentError } = await supabase\r\n-        .from('lesson_content')\r\n-        .upsert(contentUpdate, { onConflict: 'id' });\r\n-\r\n-      if (contentError) throw contentError;\r\n-\r\n-      // 3. Save questions\r\n-      for (const question of questions) {\r\n-        const questionData = {\r\n-          id: question.id,\r\n-          lesson_id: currentLessonId,\r\n-          type: question.type,\r\n-          title: question.title,\r\n-          metadata: question.metadata,\r\n-          data: question.data,\r\n-          updated_at: new Date().toISOString(),\r\n-          user_id: session.user.id\r\n-        };\r\n-\r\n-        const { error: questionError } = await supabase\r\n-          .from('questions')\r\n-          .upsert(questionData, { onConflict: 'id' });\r\n-\r\n-        if (questionError) throw questionError;\r\n-\r\n-        //4. Save exercise prompts for this question\r\n-        if (question.exercisePrompts) {\r\n-          for (const prompt of question.exercisePrompts) {\r\n-            const promptData = {\r\n-              id: prompt.id,\r\n-              question_id: question.id,\r\n-              text: prompt.text,\r\n-              media: prompt.media,\r\n-              type: prompt.type,\r\n-              narration: prompt.narration,\r\n-              saytext: prompt.saytext,\r\n-              user_id: session.user.id,\r\n-              updated_at: new Date().toISOString()\r\n-            };\r\n-\r\n-            const { error: promptError } = await supabase\r\n-              .from('exercise_prompts')\r\n-              .upsert(promptData, { onConflict: 'id' });\r\n-\r\n-            if (promptError) throw promptError;\r\n-          }\r\n-        }\r\n-      }\r\n-\r\n-      // 5. Save activities\r\n-      if (activities.length > 0) {\r\n-        const activitiesData = activities.map(activity => ({\r\n-          id: activity.id,\r\n-          lesson_id: currentLessonId,\r\n-          type: activity.type,\r\n-          title: activity.title,\r\n-          name: activity.name,\r\n-          instructions: activity.instructions,\r\n-          media: activity.media,\r\n-          data: activity.data,\r\n-          created_at: new Date().toISOString()\r\n-        }));\r\n-\r\n-        const { error: activitiesError } = await supabase\r\n-          .from('activities')\r\n-          .upsert(activitiesData, { onConflict: 'id' });\r\n-\r\n-        if (activitiesError) throw activitiesError;\r\n-      }\r\n-\r\n-      // After successful save\r\n-      console.log('✅ Content heading saved successfully:', {\r\n-        contentHeading,\r\n-        lessonId: currentLessonId,\r\n-        timestamp: new Date().toISOString()\r\n-      });\r\n-\r\n-      toast.success('Lesson saved successfully');\r\n-    } catch (err) {\r\n-      const error = err as PostgrestError;\r\n-      console.error('❌ Error saving content heading:', {\r\n-        error: error.message,\r\n-        contentHeading,\r\n-        lessonContent,\r\n-        lessonId: currentLessonId,\r\n-        timestamp: new Date().toISOString()\r\n-      });\r\n-      toast.error(`Failed to save lesson: ${error.message}`);\r\n-\r\n-\r\n-    }\r\n-  };\r\n-\r\n-  const handleSaveQuestion = async (question: Question, index: number) => {\r\n-    const loadingToast = toast.loading(`Saving question ${index + 1}...`);\r\n-    \r\n-    try {\r\n-      const { data: { session } } = await supabase.auth.getSession();\r\n-      if (!session?.user) {\r\n-        toast.error('Please sign in to save question', { id: loadingToast });\r\n-        return;\r\n-      }\r\n-\r\n-      // Save question\r\n-      const questionData = {\r\n-        id: question.id,\r\n-        lesson_id: currentLessonId,\r\n-        type: question.type,\r\n-        title: question.title,\r\n-        metadata: question.metadata,\r\n-        data: question.data,\r\n-        user_id: session.user.id,\r\n-        updated_at: new Date().toISOString()\r\n-      };\r\n-\r\n-      const { error: questionError } = await supabase\r\n-        .from('questions')\r\n-        .upsert(questionData, { onConflict: 'id' });\r\n-\r\n-      if (questionError) throw questionError;\r\n-\r\n-      // Save exercise prompts if they exist\r\n-      if (question.exercisePrompts?.length) {\r\n-        for (const prompt of question.exercisePrompts) {\r\n-          const promptData = {\r\n-            id: prompt.id,\r\n-            question_id: question.id,\r\n-            text: prompt.text,\r\n-            type: prompt.type,\r\n-            narration: prompt.narration,\r\n-            saytext: prompt.saytext,\r\n-            media: prompt.media,\r\n-            user_id: session.user.id,\r\n-            updated_at: new Date().toISOString()\r\n-          };\r\n-\r\n-          const { error: promptError } = await supabase\r\n-            .from('exercise_prompts')\r\n-            .upsert(promptData, { onConflict: 'id' });\r\n-\r\n-          if (promptError) throw promptError;\r\n-        }\r\n-      }\r\n-\r\n-      toast.success(`Question ${index + 1} saved successfully`, { id: loadingToast });\r\n-    } catch (error) {\r\n-      console.error('Error saving question:', error);\r\n-      toast.error(`Failed to save question ${index + 1}`, { id: loadingToast });\r\n-    }\r\n-  };\r\n-\r\n-  const handleSaveActivity = async (activity: Activity) => {\r\n-    try {\r\n-      await contentService.saveActivity(activity);\r\n-      toast.success('Activity saved');\r\n-    } catch (error) {\r\n-      console.error('Failed to save activity:', error);\r\n-      toast.error('Failed to save activity');\r\n-    }\r\n-  };\r\n-\r\n-  // Effects\r\n-  useEffect(() => {\r\n-    const fetchGrades = async () => {\r\n-      try {\r\n-        const { data, error } = await supabase\r\n-          .from('grades')\r\n-          .select('*')\r\n-          .order('name');\r\n-\r\n-        if (error) {\r\n-          console.error('Supabase error:', error);\r\n-          throw error;\r\n-        }\r\n-\r\n-        if (!data) {\r\n-          throw new Error('No data returned from Supabase');\r\n-        }\r\n-\r\n-        // Map the grades to match your interface\r\n-        const validGrades = data.map((grade: any) => ({\r\n-          _id: grade.id,\r\n-          id: grade.id,\r\n-          name: grade.name,\r\n-          level: grade.level || 0,  // Add default value if not provided\r\n-          orderIndex: grade.order_index || 0,  // Add default value if not provided\r\n-          topics: []\r\n-        }));\r\n-        \r\n-        setGrades(validGrades);\r\n-      } catch (error) {\r\n-        console.error('Error fetching grades:', error);\r\n-        toast.error('Failed to fetch grades');\r\n-      }\r\n-    };\r\n-\r\n-    fetchGrades();\r\n-  }, []);\r\n-\r\n-  // Topic Selection\r\n-  useEffect(() => {\r\n-    const fetchTopics = async () => {\r\n-      if (!selectedGradeId) return;\r\n-      \r\n-      try {\r\n-        const { data, error } = await supabase\r\n-          .from('topics')\r\n-          .select('*')\r\n-          .eq('grade_id', selectedGradeId)\r\n-          .order('title');\r\n-\r\n-        if (error) {\r\n-          throw error;\r\n-        }\r\n-\r\n-        // Map the topics to match your interface\r\n-        const validTopics = (data || []).map((topic: any) => ({\r\n-          _id: topic.id,\r\n-          id: topic.id,\r\n-          name: topic.title,\r\n-          title: topic.title,\r\n-          grade_id: topic.grade_id,\r\n-          subtopics: []\r\n-        }));\r\n-        \r\n-        setTopics(validTopics);\r\n-      } catch (error) {\r\n-        console.error('Error fetching topics:', error);\r\n-        toast.error('Failed to fetch topics');\r\n-      }\r\n-    };\r\n-\r\n-    fetchTopics();\r\n-  }, [selectedGradeId]);\r\n-\r\n-  // Subtopic Selection\r\n-  useEffect(() => {\r\n-    const fetchSubtopics = async () => {\r\n-      if (!selectedTopicId) return;\r\n-      \r\n-      try {\r\n-        // Use content service to fetch subtopics\r\n-        const subtopicsData = await contentService.fetchSubtopics(selectedTopicId);\r\n-        console.log('Fetched subtopics:', subtopicsData);\r\n-\r\n-        const validSubtopics = subtopicsData.map((subtopic: any) => ({\r\n-          id: subtopic.id,\r\n-          title: subtopic.title,\r\n-          description: subtopic.description,\r\n-          topic_id: subtopic.topic_id,\r\n-          lessons: [],\r\n-          order_index: subtopicsData.length\r\n-        }));\r\n-        \r\n-        setSubtopics(validSubtopics);\r\n-        \r\n-        // Update global state\r\n-        if (selectedSubtopic) {\r\n-          setSelectedSubtopic(selectedSubtopic);\r\n-        }\r\n-      } catch (err) {\r\n-        const error = err as Error;\r\n-        console.error('Error fetching subtopics:', error);\r\n-        toast.error('Failed to fetch subtopics');\r\n-      }\r\n-    };\r\n-\r\n-    fetchSubtopics();\r\n-  }, [selectedTopicId, selectedSubtopic, setSelectedSubtopic]);\r\n-\r\n-  // Add effect to monitor subtopics state\r\n-  useEffect(() => {\r\n-    console.log('Current subtopics state:', subtopics);\r\n-  }, [subtopics]);\r\n-\r\n-  // Add fetchLessons function\r\n-  const fetchLessons = useCallback(async () => {\r\n-    if (!selectedSubtopicId) return;\r\n-    try {\r\n-      const { data, error } = await supabase\r\n-        .from('lessons')\r\n-        .select('*')\r\n-        .eq('subtopic_id', selectedSubtopicId)\r\n-        .order('title');\r\n-\r\n-      if (error) {\r\n-        throw error;\r\n-      }\r\n-      \r\n-      // Map the lessons to ensure they have _id\r\n-      const validLessons = (data || []).map((lesson: any) => ({\r\n-        ...lesson,\r\n-        _id: lesson._id || lesson.id, // Use _id if available, otherwise use id\r\n-        title: lesson.title || 'Untitled Lesson'\r\n-      })).filter((lesson: any) => lesson._id); // Only include lessons with valid IDs\r\n-      \r\n-      setLessons(validLessons);\r\n-    } catch (error) {\r\n-      console.error('Error fetching lessons:', error);\r\n-      toast.error('Failed to fetch lessons');\r\n-    }\r\n-  }, [selectedSubtopicId]);\r\n-  // Add loadLessonContent function\r\n-  const isLoading = useRef(false);\r\n-  const loadLessonContent = useCallback(async (lessonId: string) => {\r\n     // Prevent multiple simultaneous loads\r\n     if (isLoading.current) return;\r\n     isLoading.current = true;\r\n \r\n"
                },
                {
                    "date": 1739691720430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2611,14 +2611,14 @@\n                                         ...question, \r\n                                         lesson_id: currentLessonId || '',\r\n                                         type: isValidQuestionType(question.type) ? question.type : 'speaking',\r\n                                         data: {\r\n-                                          prompt: question.data?.prompt || '',\r\n-                                          teacherScript: question.data?.teacherScript || '',\r\n-                                          followup_prompt: question.data?.followup_prompt || [],\r\n-                                          sampleAnswer: question.data?.sampleAnswer,\r\n-                                          answer: question.data?.answer\r\n-                                        }\r\n+                                          prompt: question.data?.prompt ?? '',\r\n+                                          teacherScript: question.data?.teacherScript ?? '',\r\n+                                          followup_prompt: question.data?.followup_prompt ?? [],\r\n+                                          sampleAnswer: question.data?.sampleAnswer ?? '',\r\n+                                          answer: question.data?.answer ?? ''\r\n+                                        } as QuestionData\r\n                                       }}\r\n                                       index={index}\r\n                                       onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\r\n                                         await handleUpdateQuestion(index, {\r\n"
                },
                {
                    "date": 1739691796166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,8 +38,9 @@\n } from \"@/components/ui/alert-dialog\";\r\n import { debounce, isNull } from 'lodash';\r\n import { PostgrestError } from '@supabase/supabase-js';\r\n import { Question as ContentQuestion } from './types';  // Import the specific type\r\n+import { QuestionData } from '@/types/content';\r\n \r\n \r\n // Update the API endpoint to match your backend route\r\n const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\r\n@@ -2623,13 +2624,13 @@\n                                       onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\r\n                                         await handleUpdateQuestion(index, {\r\n                                           ...updatedQuestion,\r\n                                           data: {\r\n-                                            prompt: updatedQuestion.data?.prompt || '',\r\n-                                            teacherScript: updatedQuestion.data?.teacherScript || '',\r\n-                                            followup_prompt: updatedQuestion.data?.followup_prompt || [],\r\n-                                            sampleAnswer: updatedQuestion.data?.sampleAnswer,\r\n-                                            answer: updatedQuestion.data?.answer\r\n+                                            prompt: updatedQuestion.data?.prompt ?? '',\r\n+                                            teacherScript: updatedQuestion.data?.teacherScript ?? '',\r\n+                                            followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\r\n+                                            sampleAnswer: updatedQuestion.data?.sampleAnswer ?? '',\r\n+                                            answer: updatedQuestion.data?.answer ?? ''\r\n                                           }\r\n                                         });\r\n                                       }}\r\n                                       onRemove={handleRemoveQuestion}\r\n@@ -2650,53 +2651,23 @@\n                                     Save Question\r\n                                                     </Button>\r\n                                     {/* Exercise Prompts with Save Buttons */}\r\n                                     {question.exercisePrompts?.map((prompt, promptIndex) => (\r\n-                                      <div key={`${question.id}-prompt-${promptIndex}`} className=\"mt-4\"> {/* Updated key */}\r\n-                                        <div className=\"flex items-center justify-between mb-2\">\r\n-                                          <h4 className=\"text-sm font-medium\">Exercise Prompt {promptIndex + 1}</h4>\r\n-                                          <div className=\"flex items-center gap-2\">\r\n-                                            <TooltipProvider>\r\n-                                              <Tooltip>\r\n-                                                <TooltipTrigger asChild>\r\n-                                                  <Button\r\n-                                                    size=\"sm\"\r\n-                                                    variant=\"outline\"\r\n-                                                    onClick={() => handleSavePrompt(question.id, prompt, promptIndex)}\r\n-                                                    disabled={promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving'}\r\n-                                                  >\r\n-                                                    {promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving' ? (\r\n-                                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n-                                                    ) : (\r\n-                                                      <Save className=\"h-4 w-4 mr-2\" />\r\n-                                                    )}\r\n-                                                    Save Prompt\r\n-                                                  </Button>\r\n-                                                </TooltipTrigger>\r\n-                                                <TooltipContent>\r\n-                                                  {`Status: ${promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}`}\r\n-                                                </TooltipContent>\r\n-                                              </Tooltip>\r\n-                                            </TooltipProvider>\r\n-                                            <Badge variant={\r\n-                                              promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saved'\r\n-                                                ? 'secondary'\r\n-                                                : promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'error'\r\n-                                                ? 'destructive'\r\n-                                                : 'default'\r\n-                                            }>\r\n-                                              {promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}\r\n-                                            </Badge>\r\n-                                                  </div>\r\n-                                        </div>\r\n+                                      <div key={`${question.id}-prompt-${promptIndex}`} className=\"mt-4\">\r\n                                         <ExercisePromptCard\r\n-                                          key={prompt.id} // Add a unique key here\r\n-                                          prompt={prompt}\r\n+                                          key={prompt.id || `new-prompt-${promptIndex}`}\r\n+                                          prompt={{\r\n+                                            ...prompt,\r\n+                                            text: prompt.text || '',\r\n+                                            type: prompt.type || 'practice',\r\n+                                            narration: prompt.narration || '',\r\n+                                            saytext: prompt.saytext || '',\r\n+                                            media: prompt.media || ''\r\n+                                          }}\r\n                                           promptIndex={promptIndex}\r\n                                           onRemove={() => handleRemoveExercisePrompt(index, promptIndex)}\r\n                                           onUpdate={(updatedPrompt: ExercisePrompt) => {\r\n-                                            // Prevent duplicate updates\r\n-                                            if (updatedPrompt.id === prompt.id) {\r\n+                                            if (updatedPrompt) {\r\n                                               handleExercisePromptChange(index, promptIndex, updatedPrompt);\r\n                                             }\r\n                                           }}\r\n                                         />\r\n"
                },
                {
                    "date": 1739691902091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,8 @@\n } from \"@/components/ui/alert-dialog\";\r\n import { debounce, isNull } from 'lodash';\r\n import { PostgrestError } from '@supabase/supabase-js';\r\n import { Question as ContentQuestion } from './types';  // Import the specific type\r\n-import { QuestionData } from '@/types/content';\r\n \r\n \r\n // Update the API endpoint to match your backend route\r\n const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\r\n@@ -2651,23 +2650,53 @@\n                                     Save Question\r\n                                                     </Button>\r\n                                     {/* Exercise Prompts with Save Buttons */}\r\n                                     {question.exercisePrompts?.map((prompt, promptIndex) => (\r\n-                                      <div key={`${question.id}-prompt-${promptIndex}`} className=\"mt-4\">\r\n+                                      <div key={`${question.id}-prompt-${promptIndex}`} className=\"mt-4\"> {/* Updated key */}\r\n+                                        <div className=\"flex items-center justify-between mb-2\">\r\n+                                          <h4 className=\"text-sm font-medium\">Exercise Prompt {promptIndex + 1}</h4>\r\n+                                          <div className=\"flex items-center gap-2\">\r\n+                                            <TooltipProvider>\r\n+                                              <Tooltip>\r\n+                                                <TooltipTrigger asChild>\r\n+                                                  <Button\r\n+                                                    size=\"sm\"\r\n+                                                    variant=\"outline\"\r\n+                                                    onClick={() => handleSavePrompt(question.id, prompt, promptIndex)}\r\n+                                                    disabled={promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving'}\r\n+                                                  >\r\n+                                                    {promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving' ? (\r\n+                                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n+                                                    ) : (\r\n+                                                      <Save className=\"h-4 w-4 mr-2\" />\r\n+                                                    )}\r\n+                                                    Save Prompt\r\n+                                                  </Button>\r\n+                                                </TooltipTrigger>\r\n+                                                <TooltipContent>\r\n+                                                  {`Status: ${promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}`}\r\n+                                                </TooltipContent>\r\n+                                              </Tooltip>\r\n+                                            </TooltipProvider>\r\n+                                            <Badge variant={\r\n+                                              promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saved'\r\n+                                                ? 'secondary'\r\n+                                                : promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'error'\r\n+                                                ? 'destructive'\r\n+                                                : 'default'\r\n+                                            }>\r\n+                                              {promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}\r\n+                                            </Badge>\r\n+                                                  </div>\r\n+                                        </div>\r\n                                         <ExercisePromptCard\r\n-                                          key={prompt.id || `new-prompt-${promptIndex}`}\r\n-                                          prompt={{\r\n-                                            ...prompt,\r\n-                                            text: prompt.text || '',\r\n-                                            type: prompt.type || 'practice',\r\n-                                            narration: prompt.narration || '',\r\n-                                            saytext: prompt.saytext || '',\r\n-                                            media: prompt.media || ''\r\n-                                          }}\r\n+                                          key={prompt.id} // Add a unique key here\r\n+                                          prompt={prompt}\r\n                                           promptIndex={promptIndex}\r\n                                           onRemove={() => handleRemoveExercisePrompt(index, promptIndex)}\r\n                                           onUpdate={(updatedPrompt: ExercisePrompt) => {\r\n-                                            if (updatedPrompt) {\r\n+                                            // Prevent duplicate updates\r\n+                                            if (updatedPrompt.id === prompt.id) {\r\n                                               handleExercisePromptChange(index, promptIndex, updatedPrompt);\r\n                                             }\r\n                                           }}\r\n                                         />\r\n"
                },
                {
                    "date": 1739692117063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -250,8 +250,284 @@\n \r\n   return { isValid: true, message: '' };\r\n };\r\n \r\n+// Add proper type for question data\r\n+interface QuestionData {\r\n+  id?: string;\r\n+  content?: string;\r\n+  type?: string;\r\n+  sampleAnswer?: string | null;\r\n+  data?: {\r\n+    prompt?: string;\r\n+    teacherScript?: string;\r\n+    followup_prompt?: string[];\r\n+    sampleAnswer?: string;\r\n+    answer?: string;\r\n+  } | null;\r\n+}\r\n+\r\n+// In your component where you handle questions\r\n+const handleQuestionData = (question: QuestionData) => {\r\n+  return {\r\n+    ...question,\r\n+    data: {\r\n+      prompt: question?.data?.prompt || '',\r\n+      teacherScript: question?.data?.teacherScript || '',\r\n+      followup_prompt: question?.data?.followup_prompt || [],\r\n+\"use client\";\r\n+\r\n+import { useState, useCallback, useEffect, useRef } from 'react';\r\n+import { toast } from 'sonner';\r\n+import { Toaster } from 'sonner';\r\n+import Link from 'next/link';\r\n+import {  Activity as ActivityIcon,  ArrowLeft,  BookOpen,  ChevronDown,  ChevronRight,  Check,  Edit,  Eye,  EyeOff,  HelpCircle,  Layers,  List,  MessageSquare,  Plus,  Save,  Trash as Trash2, X, Pencil, Lock, Unlock, RefreshCw } from 'lucide-react';\r\n+import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\n+import { Badge } from '@/components/ui/badge';\r\n+import { Button } from '@/components/ui/button';\r\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\n+import { Input } from '@/components/ui/input';\r\n+import { Label } from '@/components/ui/label';\r\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\n+import { Textarea } from '@/components/ui/textarea';\r\n+import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\r\n+import { cn } from '@/lib/utils';\r\n+import { API_BASE_URL, QUESTION_TYPES, isQuestionType } from './constants';\r\n+import { ExercisePrompt, Lesson } from './types';\r\n+import { QuestionFormProps, ExercisePromptCardProps, Activity, Grade, Topic, Subtopic as SubTopic } from './types';\r\n+import { QuestionForm } from './components/question-form';\r\n+import { ExercisePromptCard } from './components/exercise-prompt-card';\r\n+import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\r\n+import { supabase } from '@/lib/supabase';\r\n+import { useContentStore } from '@/lib/content/store';\r\n+import { contentService } from '@/lib/content/ContentService';\r\n+import { MediaPreview } from '@/components/ui/media-preview';\r\n+import { QuestionTypeSelect } from './components/question-type-select';\r\n+import { RichTextEditor } from '@/components/ui/rich-text-editor';\r\n+import {\r\n+  AlertDialog,\r\n+  AlertDialogAction,\r\n+  AlertDialogContent,\r\n+  AlertDialogDescription,\r\n+  AlertDialogFooter,\r\n+  AlertDialogHeader,\r\n+  AlertDialogTitle,\r\n+} from \"@/components/ui/alert-dialog\";\r\n+import { debounce, isNull } from 'lodash';\r\n+import { PostgrestError } from '@supabase/supabase-js';\r\n+import { Question as ContentQuestion } from './types';  // Import the specific type\r\n+\r\n+\r\n+// Update the API endpoint to match your backend route\r\n+const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\r\n+\r\n+interface QuestionTypeSelectProps {\r\n+  value: string;\r\n+  onValueChange: (value: string) => void;\r\n+}\r\n+\r\n+// Add metadata type\r\n+interface LessonMetadata {\r\n+  lastEdited?: string;\r\n+  version?: number;\r\n+  tags?: string[];\r\n+  status?: 'draft' | 'published';\r\n+  authorId?: string;\r\n+  duration?: number;\r\n+  transcript?: string;\r\n+}\r\n+\r\n+type ContentType = 'html' | 'markdown' | 'rich-text' | 'text' | 'json';\r\n+\r\n+interface LessonContent {\r\n+  id: string;\r\n+  lesson_id: string;\r\n+  content: any[];\r\n+  metadata: {\r\n+    lastEdited?: string;\r\n+    version?: number;\r\n+    status?: 'draft' | 'published';\r\n+    authorId?: string;\r\n+  };\r\n+  content_type: string;\r\n+  order_index: number;\r\n+  updated_at: string;\r\n+  user_id: string;\r\n+}\r\n+\r\n+interface InlineEditProps {\r\n+  value: string;\r\n+  onSave: (value: string) => void;\r\n+  isEditing: boolean;\r\n+  setIsEditing: (value: boolean) => void;\r\n+  placeholder?: string;\r\n+  className?: string;\r\n+}\r\n+\r\n+// Add validation interface\r\n+interface QuestionValidation {\r\n+  isValid: boolean;\r\n+  message: string;\r\n+}\r\n+\r\n+// Add this type validation helper\r\n+const getQuestionTypeFields = (type: string) => {\r\n+  switch (type) {\r\n+    case 'multipleChoice':\r\n+      return {\r\n+        required: ['prompt', 'options', 'correctAnswer'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          options: [],\r\n+          correctAnswer: '',\r\n+          teacherScript: '',\r\n+          explanation: ''\r\n+        }\r\n+      };\r\n+    case 'fillInBlank':\r\n+      return {\r\n+        required: ['prompt', 'blanks'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          blanks: [],\r\n+          teacherScript: '',\r\n+          explanation: ''\r\n+        }\r\n+      };\r\n+    case 'trueFalse':\r\n+      return {\r\n+        required: ['prompt', 'correctAnswer'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          correctAnswer: null,\r\n+          teacherScript: '',\r\n+          explanation: ''\r\n+        }\r\n+      };\r\n+    case 'matching':\r\n+      return {\r\n+        required: ['prompt', 'pairs'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          pairs: [],\r\n+          teacherScript: '',\r\n+          explanation: ''\r\n+        }\r\n+      };\r\n+    case 'ordering':\r\n+      return {\r\n+        required: ['prompt', 'items'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          items: [],\r\n+          correctOrder: [],\r\n+          teacherScript: '',\r\n+          explanation: ''\r\n+        }\r\n+      };\r\n+    case 'shortAnswer':\r\n+      return {\r\n+        required: ['prompt', 'sampleAnswer'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          sampleAnswer: '',\r\n+          teacherScript: '',\r\n+          explanation: '',\r\n+          keywords: []\r\n+        }\r\n+      };\r\n+    case 'speaking':\r\n+      return {\r\n+        required: ['prompt', 'sampleAnswer'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          sampleAnswer: '',\r\n+          teacherScript: '',\r\n+          audioPrompt: '',\r\n+          pronunciation: ''\r\n+        }\r\n+      };\r\n+    case 'listening':\r\n+      return {\r\n+        required: ['prompt', 'audioContent'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          audioContent: '',\r\n+          transcript: '',\r\n+          teacherScript: '',\r\n+          comprehensionQuestions: []\r\n+        }\r\n+      };\r\n+    case 'listenAndRepeat':\r\n+      return {\r\n+        required: ['prompt', 'audioContent'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          audioContent: '',\r\n+          targetPhrase: '',\r\n+          teacherScript: '',\r\n+          pronunciation: ''\r\n+        }\r\n+      };\r\n+    default:\r\n+      return {\r\n+        required: ['prompt'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          teacherScript: ''\r\n+        }\r\n+      };\r\n+  }\r\n+}\r\n+\r\n+interface SaveStatus {\r\n+  id: string;\r\n+  status: 'draft' | 'saved' | 'saving' | 'error';\r\n+  lastSaved?: string;\r\n+}\r\n+\r\n+interface Question {\r\n+  id: string;\r\n+  type: string;\r\n+  lesson_id: string;\r\n+  title: string;\r\n+  metadata: Record<string, any>;\r\n+  data: Record<string, any>; // This allows dynamic field access\r\n+  exercisePrompts: ExercisePrompt[];\r\n+  isDraft?: boolean;\r\n+}\r\n+\r\n+// Add at the top of the file with other type definitions\r\n+type QuestionType = keyof typeof QUESTION_TYPES;\r\n+\r\n+// Add this type guard function\r\n+const isValidQuestionType = (type: string): type is QuestionType => {\r\n+  return type in QUESTION_TYPES;\r\n+};\r\n+\r\n+// Update handleAddQuestion\r\n+\r\n+\r\n+// Update validateQuestion\r\n+const validateQuestion = (question: Question): QuestionValidation => {\r\n+  const { required } = getQuestionTypeFields(question.type);\r\n+  const missingFields = required.filter(field => {\r\n+    const value = question.data?.[field];\r\n+    return !value || \r\n+      (Array.isArray(value) && value.length === 0) || \r\n+      (typeof value === 'string' && !value.trim());\r\n+  });\r\n+\r\n+  if (missingFields.length > 0) {\r\n+    return {\r\n+      isValid: false,\r\n+      message: `Missing required fields: ${missingFields.join(', ')}`\r\n+    };\r\n+  }\r\n+\r\n+  return { isValid: true, message: '' };\r\n+};\r\n+\r\n export default function LessonManagementPage() {\r\n   // State declarations\r\n   \r\n   const [selectedGradeId, setSelectedGradeId] = useState<string | null>(null);\r\n"
                },
                {
                    "date": 1739692129341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -273,261 +273,15 @@\n     data: {\r\n       prompt: question?.data?.prompt || '',\r\n       teacherScript: question?.data?.teacherScript || '',\r\n       followup_prompt: question?.data?.followup_prompt || [],\r\n-\"use client\";\r\n-\r\n-import { useState, useCallback, useEffect, useRef } from 'react';\r\n-import { toast } from 'sonner';\r\n-import { Toaster } from 'sonner';\r\n-import Link from 'next/link';\r\n-import {  Activity as ActivityIcon,  ArrowLeft,  BookOpen,  ChevronDown,  ChevronRight,  Check,  Edit,  Eye,  EyeOff,  HelpCircle,  Layers,  List,  MessageSquare,  Plus,  Save,  Trash as Trash2, X, Pencil, Lock, Unlock, RefreshCw } from 'lucide-react';\r\n-import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\n-import { Badge } from '@/components/ui/badge';\r\n-import { Button } from '@/components/ui/button';\r\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\n-import { Input } from '@/components/ui/input';\r\n-import { Label } from '@/components/ui/label';\r\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\n-import { Textarea } from '@/components/ui/textarea';\r\n-import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\r\n-import { cn } from '@/lib/utils';\r\n-import { API_BASE_URL, QUESTION_TYPES, isQuestionType } from './constants';\r\n-import { ExercisePrompt, Lesson } from './types';\r\n-import { QuestionFormProps, ExercisePromptCardProps, Activity, Grade, Topic, Subtopic as SubTopic } from './types';\r\n-import { QuestionForm } from './components/question-form';\r\n-import { ExercisePromptCard } from './components/exercise-prompt-card';\r\n-import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\r\n-import { supabase } from '@/lib/supabase';\r\n-import { useContentStore } from '@/lib/content/store';\r\n-import { contentService } from '@/lib/content/ContentService';\r\n-import { MediaPreview } from '@/components/ui/media-preview';\r\n-import { QuestionTypeSelect } from './components/question-type-select';\r\n-import { RichTextEditor } from '@/components/ui/rich-text-editor';\r\n-import {\r\n-  AlertDialog,\r\n-  AlertDialogAction,\r\n-  AlertDialogContent,\r\n-  AlertDialogDescription,\r\n-  AlertDialogFooter,\r\n-  AlertDialogHeader,\r\n-  AlertDialogTitle,\r\n-} from \"@/components/ui/alert-dialog\";\r\n-import { debounce, isNull } from 'lodash';\r\n-import { PostgrestError } from '@supabase/supabase-js';\r\n-import { Question as ContentQuestion } from './types';  // Import the specific type\r\n-\r\n-\r\n-// Update the API endpoint to match your backend route\r\n-const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\r\n-\r\n-interface QuestionTypeSelectProps {\r\n-  value: string;\r\n-  onValueChange: (value: string) => void;\r\n-}\r\n-\r\n-// Add metadata type\r\n-interface LessonMetadata {\r\n-  lastEdited?: string;\r\n-  version?: number;\r\n-  tags?: string[];\r\n-  status?: 'draft' | 'published';\r\n-  authorId?: string;\r\n-  duration?: number;\r\n-  transcript?: string;\r\n-}\r\n-\r\n-type ContentType = 'html' | 'markdown' | 'rich-text' | 'text' | 'json';\r\n-\r\n-interface LessonContent {\r\n-  id: string;\r\n-  lesson_id: string;\r\n-  content: any[];\r\n-  metadata: {\r\n-    lastEdited?: string;\r\n-    version?: number;\r\n-    status?: 'draft' | 'published';\r\n-    authorId?: string;\r\n+      sampleAnswer: question?.data?.sampleAnswer || '',\r\n+      answer: question?.data?.answer || ''\r\n+    },\r\n+    sampleAnswer: question?.sampleAnswer || ''\r\n   };\r\n-  content_type: string;\r\n-  order_index: number;\r\n-  updated_at: string;\r\n-  user_id: string;\r\n-}\r\n-\r\n-interface InlineEditProps {\r\n-  value: string;\r\n-  onSave: (value: string) => void;\r\n-  isEditing: boolean;\r\n-  setIsEditing: (value: boolean) => void;\r\n-  placeholder?: string;\r\n-  className?: string;\r\n-}\r\n-\r\n-// Add validation interface\r\n-interface QuestionValidation {\r\n-  isValid: boolean;\r\n-  message: string;\r\n-}\r\n-\r\n-// Add this type validation helper\r\n-const getQuestionTypeFields = (type: string) => {\r\n-  switch (type) {\r\n-    case 'multipleChoice':\r\n-      return {\r\n-        required: ['prompt', 'options', 'correctAnswer'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          options: [],\r\n-          correctAnswer: '',\r\n-          teacherScript: '',\r\n-          explanation: ''\r\n-        }\r\n-      };\r\n-    case 'fillInBlank':\r\n-      return {\r\n-        required: ['prompt', 'blanks'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          blanks: [],\r\n-          teacherScript: '',\r\n-          explanation: ''\r\n-        }\r\n-      };\r\n-    case 'trueFalse':\r\n-      return {\r\n-        required: ['prompt', 'correctAnswer'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          correctAnswer: null,\r\n-          teacherScript: '',\r\n-          explanation: ''\r\n-        }\r\n-      };\r\n-    case 'matching':\r\n-      return {\r\n-        required: ['prompt', 'pairs'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          pairs: [],\r\n-          teacherScript: '',\r\n-          explanation: ''\r\n-        }\r\n-      };\r\n-    case 'ordering':\r\n-      return {\r\n-        required: ['prompt', 'items'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          items: [],\r\n-          correctOrder: [],\r\n-          teacherScript: '',\r\n-          explanation: ''\r\n-        }\r\n-      };\r\n-    case 'shortAnswer':\r\n-      return {\r\n-        required: ['prompt', 'sampleAnswer'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          sampleAnswer: '',\r\n-          teacherScript: '',\r\n-          explanation: '',\r\n-          keywords: []\r\n-        }\r\n-      };\r\n-    case 'speaking':\r\n-      return {\r\n-        required: ['prompt', 'sampleAnswer'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          sampleAnswer: '',\r\n-          teacherScript: '',\r\n-          audioPrompt: '',\r\n-          pronunciation: ''\r\n-        }\r\n-      };\r\n-    case 'listening':\r\n-      return {\r\n-        required: ['prompt', 'audioContent'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          audioContent: '',\r\n-          transcript: '',\r\n-          teacherScript: '',\r\n-          comprehensionQuestions: []\r\n-        }\r\n-      };\r\n-    case 'listenAndRepeat':\r\n-      return {\r\n-        required: ['prompt', 'audioContent'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          audioContent: '',\r\n-          targetPhrase: '',\r\n-          teacherScript: '',\r\n-          pronunciation: ''\r\n-        }\r\n-      };\r\n-    default:\r\n-      return {\r\n-        required: ['prompt'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          teacherScript: ''\r\n-        }\r\n-      };\r\n-  }\r\n-}\r\n-\r\n-interface SaveStatus {\r\n-  id: string;\r\n-  status: 'draft' | 'saved' | 'saving' | 'error';\r\n-  lastSaved?: string;\r\n-}\r\n-\r\n-interface Question {\r\n-  id: string;\r\n-  type: string;\r\n-  lesson_id: string;\r\n-  title: string;\r\n-  metadata: Record<string, any>;\r\n-  data: Record<string, any>; // This allows dynamic field access\r\n-  exercisePrompts: ExercisePrompt[];\r\n-  isDraft?: boolean;\r\n-}\r\n-\r\n-// Add at the top of the file with other type definitions\r\n-type QuestionType = keyof typeof QUESTION_TYPES;\r\n-\r\n-// Add this type guard function\r\n-const isValidQuestionType = (type: string): type is QuestionType => {\r\n-  return type in QUESTION_TYPES;\r\n };\r\n \r\n-// Update handleAddQuestion\r\n-\r\n-\r\n-// Update validateQuestion\r\n-const validateQuestion = (question: Question): QuestionValidation => {\r\n-  const { required } = getQuestionTypeFields(question.type);\r\n-  const missingFields = required.filter(field => {\r\n-    const value = question.data?.[field];\r\n-    return !value || \r\n-      (Array.isArray(value) && value.length === 0) || \r\n-      (typeof value === 'string' && !value.trim());\r\n-  });\r\n-\r\n-  if (missingFields.length > 0) {\r\n-    return {\r\n-      isValid: false,\r\n-      message: `Missing required fields: ${missingFields.join(', ')}`\r\n-    };\r\n-  }\r\n-\r\n-  return { isValid: true, message: '' };\r\n-};\r\n-\r\n export default function LessonManagementPage() {\r\n   // State declarations\r\n   \r\n   const [selectedGradeId, setSelectedGradeId] = useState<string | null>(null);\r\n"
                },
                {
                    "date": 1739692176399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -252,8 +252,17 @@\n };\r\n \r\n // Add proper type for question data\r\n interface QuestionData {\r\n+  prompt: string;\r\n+  teacherScript: string;\r\n+  followup_prompt: string[];\r\n+  sampleAnswer?: string;\r\n+  answer?: string;\r\n+}\r\n+\r\n+// In your component where you handle questions\r\n+const handleQuestionData = (question: QuestionData) => {\r\n   id?: string;\r\n   content?: string;\r\n   type?: string;\r\n   sampleAnswer?: string | null;\r\n"
                },
                {
                    "date": 1739692194977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -261,23 +261,8 @@\n }\r\n \r\n // In your component where you handle questions\r\n const handleQuestionData = (question: QuestionData) => {\r\n-  id?: string;\r\n-  content?: string;\r\n-  type?: string;\r\n-  sampleAnswer?: string | null;\r\n-  data?: {\r\n-    prompt?: string;\r\n-    teacherScript?: string;\r\n-    followup_prompt?: string[];\r\n-    sampleAnswer?: string;\r\n-    answer?: string;\r\n-  } | null;\r\n-}\r\n-\r\n-// In your component where you handle questions\r\n-const handleQuestionData = (question: QuestionData) => {\r\n   return {\r\n     ...question,\r\n     data: {\r\n       prompt: question?.data?.prompt || '',\r\n"
                },
                {
                    "date": 1739692240924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -252,13 +252,19 @@\n };\r\n \r\n // Add proper type for question data\r\n interface QuestionData {\r\n-  prompt: string;\r\n-  teacherScript: string;\r\n-  followup_prompt: string[];\r\n-  sampleAnswer?: string;\r\n-  answer?: string;\r\n+  id?: string;\r\n+  content?: string;\r\n+  type?: string;\r\n+  sampleAnswer?: string | null;\r\n+  data?: {\r\n+    prompt?: string;\r\n+    teacherScript?: string;\r\n+    followup_prompt?: string[];\r\n+    sampleAnswer?: string;\r\n+    answer?: string;\r\n+  } | null;\r\n }\r\n \r\n // In your component where you handle questions\r\n const handleQuestionData = (question: QuestionData) => {\r\n"
                },
                {
                    "date": 1739692251266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -263,8 +263,9 @@\n     followup_prompt?: string[];\r\n     sampleAnswer?: string;\r\n     answer?: string;\r\n   } | null;\r\n+  \r\n }\r\n \r\n // In your component where you handle questions\r\n const handleQuestionData = (question: QuestionData) => {\r\n"
                },
                {
                    "date": 1739692267783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -263,9 +263,12 @@\n     followup_prompt?: string[];\r\n     sampleAnswer?: string;\r\n     answer?: string;\r\n   } | null;\r\n-  \r\n+  prompt: string;\r\n+  teacherScript: string;\r\n+  followup_prompt: string[];\r\n+  answer?: string;\r\n }\r\n \r\n // In your component where you handle questions\r\n const handleQuestionData = (question: QuestionData) => {\r\n"
                },
                {
                    "date": 1739692364912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -277,11 +277,11 @@\n     data: {\r\n       prompt: question?.data?.prompt || '',\r\n       teacherScript: question?.data?.teacherScript || '',\r\n       followup_prompt: question?.data?.followup_prompt || [],\r\n-      sampleAnswer: question?.data?.sampleAnswer || '',\r\n-      answer: question?.data?.answer || ''\r\n-    },\r\n+      sampleAnswer: question?.data?.sampleAnswer || undefined,  // Convert null to undefined\r\n+      answer: question?.data?.answer || undefined  // Convert null to undefined\r\n+    } as const,\r\n     sampleAnswer: question?.sampleAnswer || ''\r\n   };\r\n };\r\n \r\n"
                },
                {
                    "date": 1739692372427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -772,9 +772,15 @@\n         lesson_id: currentLessonId,\r\n         type: question.type,\r\n         title: question.title,\r\n         metadata: question.metadata,\r\n-        data: question.data,\r\n+        data: {\r\n+          prompt: question.data?.prompt ?? '',\r\n+          teacherScript: question.data?.teacherScript ?? '',\r\n+          followup_prompt: question.data?.followup_prompt ?? [],\r\n+          sampleAnswer: question.data?.sampleAnswer || undefined,  // Convert null to undefined\r\n+          answer: question.data?.answer || undefined  // Convert null to undefined\r\n+        } as const,\r\n         user_id: session.user.id,\r\n         updated_at: new Date().toISOString()\r\n       };\r\n \r\n@@ -2648,11 +2654,12 @@\n                                         data: {\r\n                                           prompt: question.data?.prompt ?? '',\r\n                                           teacherScript: question.data?.teacherScript ?? '',\r\n                                           followup_prompt: question.data?.followup_prompt ?? [],\r\n-                                          sampleAnswer: question.data?.sampleAnswer ?? '',\r\n-                                          answer: question.data?.answer ?? ''\r\n-                                        } as QuestionData\r\n+                                          sampleAnswer: question.data?.sampleAnswer || undefined,  // Convert null to undefined\r\n+                                          answer: question.data?.answer || undefined  // Convert null to undefined\r\n+                                        } as const,\r\n+                                        sampleAnswer: question.sampleAnswer || ''\r\n                                       }}\r\n                                       index={index}\r\n                                       onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\r\n                                         await handleUpdateQuestion(index, {\r\n@@ -2660,10 +2667,10 @@\n                                           data: {\r\n                                             prompt: updatedQuestion.data?.prompt ?? '',\r\n                                             teacherScript: updatedQuestion.data?.teacherScript ?? '',\r\n                                             followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\r\n-                                            sampleAnswer: updatedQuestion.data?.sampleAnswer ?? '',\r\n-                                            answer: updatedQuestion.data?.answer ?? ''\r\n+                                            sampleAnswer: updatedQuestion.data?.sampleAnswer || undefined,  // Convert null to undefined\r\n+                                            answer: updatedQuestion.data?.answer || undefined  // Convert null to undefined\r\n                                           }\r\n                                         });\r\n                                       }}\r\n                                       onRemove={handleRemoveQuestion}\r\n"
                },
                {
                    "date": 1739692406917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2654,12 +2654,11 @@\n                                         data: {\r\n                                           prompt: question.data?.prompt ?? '',\r\n                                           teacherScript: question.data?.teacherScript ?? '',\r\n                                           followup_prompt: question.data?.followup_prompt ?? [],\r\n-                                          sampleAnswer: question.data?.sampleAnswer || undefined,  // Convert null to undefined\r\n-                                          answer: question.data?.answer || undefined  // Convert null to undefined\r\n-                                        } as const,\r\n-                                        sampleAnswer: question.sampleAnswer || ''\r\n+                                          sampleAnswer: question.data?.sampleAnswer ?? '',\r\n+                                          answer: question.data?.answer ?? ''\r\n+                                        } as QuestionData\r\n                                       }}\r\n                                       index={index}\r\n                                       onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\r\n                                         await handleUpdateQuestion(index, {\r\n"
                },
                {
                    "date": 1739692428307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2654,9 +2654,9 @@\n                                         data: {\r\n                                           prompt: question.data?.prompt ?? '',\r\n                                           teacherScript: question.data?.teacherScript ?? '',\r\n                                           followup_prompt: question.data?.followup_prompt ?? [],\r\n-                                          sampleAnswer: question.data?.sampleAnswer ?? '',\r\n+                                          sampleAnswer: question.data?.sampleAnswer ?? || '',\r\n                                           answer: question.data?.answer ?? ''\r\n                                         } as QuestionData\r\n                                       }}\r\n                                       index={index}\r\n"
                },
                {
                    "date": 1739692442439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2654,10 +2654,10 @@\n                                         data: {\r\n                                           prompt: question.data?.prompt ?? '',\r\n                                           teacherScript: question.data?.teacherScript ?? '',\r\n                                           followup_prompt: question.data?.followup_prompt ?? [],\r\n-                                          sampleAnswer: question.data?.sampleAnswer ?? || '',\r\n-                                          answer: question.data?.answer ?? ''\r\n+                                          sampleAnswer: question.data?.sampleAnswer ?|| undefined,\r\n+                                          answer: question.data?.answer ?? undefined\r\n                                         } as QuestionData\r\n                                       }}\r\n                                       index={index}\r\n                                       onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\r\n"
                },
                {
                    "date": 1739692453465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2654,10 +2654,10 @@\n                                         data: {\r\n                                           prompt: question.data?.prompt ?? '',\r\n                                           teacherScript: question.data?.teacherScript ?? '',\r\n                                           followup_prompt: question.data?.followup_prompt ?? [],\r\n-                                          sampleAnswer: question.data?.sampleAnswer ?|| undefined,\r\n-                                          answer: question.data?.answer ?? undefined\r\n+                                          sampleAnswer: question.data?.sampleAnswer || undefined,\r\n+                                          answer: question.data?.answer | undefined\r\n                                         } as QuestionData\r\n                                       }}\r\n                                       index={index}\r\n                                       onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\r\n"
                },
                {
                    "date": 1739692487322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2655,9 +2655,9 @@\n                                           prompt: question.data?.prompt ?? '',\r\n                                           teacherScript: question.data?.teacherScript ?? '',\r\n                                           followup_prompt: question.data?.followup_prompt ?? [],\r\n                                           sampleAnswer: question.data?.sampleAnswer || undefined,\r\n-                                          answer: question.data?.answer | undefined\r\n+                                          answer: question.data?.answer || undefined\r\n                                         } as QuestionData\r\n                                       }}\r\n                                       index={index}\r\n                                       onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\r\n@@ -2666,10 +2666,10 @@\n                                           data: {\r\n                                             prompt: updatedQuestion.data?.prompt ?? '',\r\n                                             teacherScript: updatedQuestion.data?.teacherScript ?? '',\r\n                                             followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\r\n-                                            sampleAnswer: updatedQuestion.data?.sampleAnswer || undefined,  // Convert null to undefined\r\n-                                            answer: updatedQuestion.data?.answer || undefined  // Convert null to undefined\r\n+                                            sampleAnswer: updatedQuestion.data?.sampleAnswer ?? '',\r\n+                                            answer: updatedQuestion.data?.answer ?? ''\r\n                                           }\r\n                                         });\r\n                                       }}\r\n                                       onRemove={handleRemoveQuestion}\r\n"
                },
                {
                    "date": 1739692502886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2656,9 +2656,9 @@\n                                           teacherScript: question.data?.teacherScript ?? '',\r\n                                           followup_prompt: question.data?.followup_prompt ?? [],\r\n                                           sampleAnswer: question.data?.sampleAnswer || undefined,\r\n                                           answer: question.data?.answer || undefined\r\n-                                        } as QuestionData\r\n+                                        } \r\n                                       }}\r\n                                       index={index}\r\n                                       onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\r\n                                         await handleUpdateQuestion(index, {\r\n"
                },
                {
                    "date": 1739692511913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2654,10 +2654,10 @@\n                                         data: {\r\n                                           prompt: question.data?.prompt ?? '',\r\n                                           teacherScript: question.data?.teacherScript ?? '',\r\n                                           followup_prompt: question.data?.followup_prompt ?? [],\r\n-                                          sampleAnswer: question.data?.sampleAnswer || undefined,\r\n-                                          answer: question.data?.answer || undefined\r\n+                                          sampleAnswer: question.data?.sampleAnswer ?? '',\r\n+                                          answer: question.data?.answer ?? ''\r\n                                         } \r\n                                       }}\r\n                                       index={index}\r\n                                       onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\r\n"
                },
                {
                    "date": 1739799749767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,13 +29,15 @@\n import { RichTextEditor } from '@/components/ui/rich-text-editor';\r\n import {\r\n   AlertDialog,\r\n   AlertDialogAction,\r\n+  AlertDialogCancel,\r\n   AlertDialogContent,\r\n   AlertDialogDescription,\r\n   AlertDialogFooter,\r\n   AlertDialogHeader,\r\n   AlertDialogTitle,\r\n+  AlertDialogTrigger,\r\n } from \"@/components/ui/alert-dialog\";\r\n import { debounce, isNull } from 'lodash';\r\n import { PostgrestError } from '@supabase/supabase-js';\r\n import { Question as ContentQuestion } from './types';  // Import the specific type\r\n"
                },
                {
                    "date": 1739799759124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,8 +40,9 @@\n } from \"@/components/ui/alert-dialog\";\r\n import { debounce, isNull } from 'lodash';\r\n import { PostgrestError } from '@supabase/supabase-js';\r\n import { Question as ContentQuestion } from './types';  // Import the specific type\r\n+import { Trash } from \"lucide-react\";\r\n \r\n \r\n // Update the API endpoint to match your backend route\r\n const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\r\n@@ -2070,567 +2071,35 @@\n                           <Card key={topic.id} className=\"border-l-4 border-l-primary\">\r\n                             <CardHeader className=\"py-3\">\r\n                               <div className=\"flex items-center justify-between\">\r\n                                 <h4 className=\"font-medium\">{topic.title}</h4>\r\n-                                <Button \r\n-                                  variant=\"ghost\" \r\n-                                  size=\"sm\" \r\n-                                  onClick={() => handleTopicExpand(topic.id || '')}\r\n-                                >\r\n-                                  {expandedTopic === topic.id ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n-                                </Button>\r\n-                              </div>\r\n-                            </CardHeader>\r\n-                            {expandedTopic === topic.id && (\r\n-                              <CardContent className=\"py-0 pl-4\">\r\n-                                {subtopics\r\n-                                  .filter(subtopic => subtopic.topic_id === topic.id)\r\n-                                  .map((subtopic: SubTopic) => (\r\n-                                    <div key={subtopic.id} className=\"mb-3 last:mb-0\">\r\n-                                      <div className=\"flex items-center justify-between py-2\">\r\n-                                        <span className=\"text-sm font-medium\">{subtopic.name}</span>\r\n-                                        <Button \r\n-                                          variant=\"ghost\" \r\n-                                          size=\"sm\" \r\n-                                          onClick={() => handleSubtopicExpand(subtopic.id || '')}\r\n+                                <div className=\"flex items-center gap-2\">\r\n+                                  <AlertDialog>\r\n+                                    <AlertDialogTrigger asChild>\r\n+                                      <Button variant=\"ghost\" size=\"sm\" className=\"hover:bg-destructive/10 hover:text-destructive\">\r\n+                                        <Trash className=\"h-4 w-4\" />\r\n+                                      </Button>\r\n+                                    </AlertDialogTrigger>\r\n+                                    <AlertDialogContent>\r\n+                                      <AlertDialogHeader>\r\n+                                        <AlertDialogTitle>Are you sure?</AlertDialogTitle>\r\n+                                        <AlertDialogDescription>\r\n+                                          This will permanently delete the topic and all its subtopics and lessons.\r\n+                                        </AlertDialogDescription>\r\n+                                      </AlertDialogHeader>\r\n+                                      <AlertDialogFooter>\r\n+                                        <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n+                                        <AlertDialogAction \r\n+                                          onClick={() => handleDeleteTopic(topic.id || '')}\r\n+                                          className=\"bg-destructive hover:bg-destructive/90\"\r\n                                         >\r\n-                                          {expandedSubtopic === subtopic.id ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n-                                        </Button>\r\n-                                      </div>\r\n-                                      {expandedSubtopic === subtopic.id && (\r\n-                                        <div className=\"pl-4 space-y-2\">\r\n-                                          {lessons\r\n-                                            .filter(lesson => lesson.subtopic_id === subtopic.id)\r\n-                                            .map((lesson: Lesson) => (\r\n-                                              <div\r\n-                                                key={lesson.id}\r\n-                                                className=\"flex items-center gap-2 py-1 px-2 rounded-md hover:bg-accent cursor-pointer\"\r\n-                                                onClick={() => {\r\n-                                                  const lessonId = lesson.id || '';\r\n-                                                  const topicId = topic.id || '';\r\n-                                                  const subtopicId = subtopic.id || '';\r\n-                                                  \r\n-                                                  setCurrentLessonId(lessonId);\r\n-                                                  setSelectedTopicId(topicId);\r\n-                                                  setSelectedSubtopicId(subtopicId);\r\n-                                                }}\r\n-                                              >\r\n-                                                <BookOpen className=\"h-4 w-4 text-muted-foreground\" />\r\n-                                                <span className=\"text-sm\">{lesson.title}</span>\r\n-                                              </div>\r\n-                                            ))}\r\n-                                        </div>\r\n-                                      )}\r\n-                                    </div>\r\n-                                  ))}\r\n-                              </CardContent>\r\n-                            )}\r\n-                          </Card>\r\n-                        ))}\r\n-                      </div>\r\n-                    )}\r\n-\r\n-                    {/* Regular Edit Mode Content */}\r\n-                    {!isViewMode && (\r\n-                      <>\r\n-                        {/* Existing Topic, Subtopic, and Lesson Selection UI */}\r\n-                      {/* Topic Selection */}\r\n-                        {selectedGradeId && (\r\n-                      <div className=\"space-y-2\">\r\n-                        <div className=\"flex items-center justify-between\">\r\n-                        <Label htmlFor=\"topic-select\">Topic</Label>\r\n-                        </div>\r\n-                        <Select \r\n-                              value={selectedTopicId || ''} \r\n-                              onValueChange={handleTopicSelect}\r\n-                        >\r\n-                          <SelectTrigger id=\"topic-select\" className=\"w-full\">\r\n-                            <SelectValue placeholder=\"Select Topic\" />\r\n-                          </SelectTrigger>\r\n-                          <SelectContent>\r\n-                                {topics.map((topic: Topic) => (\r\n-                                  <SelectItem \r\n-                                    key={`topic-${topic.id || 'new'}`} \r\n-                                    value={topic.id || ''}\r\n-                                  >\r\n-                                  <div className=\"flex items-center gap-2\">\r\n-                                  <Layers className=\"h-4 w-4 text-primary\" />\r\n-                                    {topic.title}\r\n-                                  </div>\r\n-                                </SelectItem>\r\n-                              ))}\r\n-                          </SelectContent>\r\n-                        </Select>\r\n-                        <Button \r\n-                          variant=\"outline\" \r\n-                          size=\"sm\" \r\n-                          className=\"w-full gap-2\"\r\n-                          onClick={() => setModalState({ ...modalState, showAddTopic: true })}\r\n-                        >\r\n-                          <Plus className=\"h-4 w-4\" />\r\n-                          Add New Topic\r\n-                        </Button>\r\n-                      </div>\r\n-                    )}\r\n-\r\n-                    {/* Subtopic Selection */}\r\n-                        {selectedTopicId && (\r\n-                      <div className=\"space-y-2\">\r\n-                        <div className=\"flex items-center justify-between\">\r\n-                        <Label htmlFor=\"subtopic-select\">Subtopic</Label>\r\n-                        </div>\r\n-                        <Select \r\n-                              value={selectedSubtopicId || ''} \r\n-                              onValueChange={handleSubtopicSelect}\r\n-                        >\r\n-                          <SelectTrigger id=\"subtopic-select\" className=\"w-full\">\r\n-                            <SelectValue placeholder=\"Select Subtopic\" />\r\n-                          </SelectTrigger>\r\n-                          <SelectContent>\r\n-                                {subtopics\r\n-                                  .filter(subtopic => subtopic.id)\r\n-                                  .map((subtopic, index) => (\r\n-                                    <SelectItem \r\n-                                      key={subtopic.id || `subtopic-${index}`}\r\n-                                      value={subtopic.id || ''}\r\n-                                    >\r\n-                                      {subtopic.title || 'Untitled Subtopic'}\r\n-                                    </SelectItem>\r\n-                                  ))}\r\n-                          </SelectContent>\r\n-                        </Select>\r\n-                        {!isViewMode && (\r\n-                          <Button \r\n-                            variant=\"outline\" \r\n-                            size=\"sm\" \r\n-                            className=\"w-full gap-2\"\r\n-                            onClick={() => setModalState({ ...modalState, showAddSubtopic: true })}\r\n-                          >\r\n-                            <Plus className=\"h-4 w-4\" />\r\n-                            Add New Subtopic\r\n-                          </Button>\r\n-                        )}\r\n-                      </div>\r\n-                    )}\r\n-\r\n-                    {/* Lesson Selection */}\r\n-                        {selectedSubtopicId && (\r\n-                      <div className=\"space-y-2\">\r\n-                        <div className=\"flex items-center justify-between\">\r\n-                          <Label htmlFor=\"lesson-select\">Lesson</Label>\r\n-                        </div>\r\n-                          <Select \r\n-                            value={currentLessonId || ''} \r\n-                            onValueChange={handleLessonSelect}\r\n-                            onOpenChange={(open) => {\r\n-                              setIsDropdownOpen(open);\r\n-                              if (open) {\r\n-                                setIsSidebarCollapsed(false);\r\n-                                setIsSidebarLocked(true);\r\n-                              } else {\r\n-                                // Small delay before unlocking to prevent immediate collapse\r\n-                                setTimeout(() => {\r\n-                                  setIsSidebarLocked(false);\r\n-                                }, 100);\r\n-                              }\r\n-                            }}\r\n-                          >\r\n-                            <SelectTrigger \r\n-                              id=\"lesson-select\" \r\n-                              className=\"w-full\"\r\n-                              onClick={(e) => {\r\n-                                e.stopPropagation();\r\n-                                setIsSidebarCollapsed(false);\r\n-                                setIsSidebarLocked(true);\r\n-                              }}\r\n-                            >\r\n-                              <SelectValue placeholder=\"Select Lesson\" />\r\n-                            </SelectTrigger>\r\n-                            <SelectContent>\r\n-                              {lessons\r\n-                                .filter((lesson): lesson is Lesson => lesson !== undefined && lesson !== null)\r\n-                                .map((lesson: Lesson) => (\r\n-                                  <SelectItem \r\n-                                    key={`lesson-${lesson.id || 'new'}`} \r\n-                                    value={lesson.id || ''}\r\n-                                  >\r\n-                                    <div className=\"flex items-center gap-2\">\r\n-                                      <BookOpen className=\"h-4 w-4 text-primary\" />\r\n-                                      {lesson.title || 'Untitled Lesson'}\r\n-                                    </div>\r\n-                                  </SelectItem>\r\n-                                ))}\r\n-                            </SelectContent>\r\n-                          </Select>\r\n-                    <Button \r\n-                            variant=\"outline\" \r\n-                            size=\"sm\" \r\n-                            className=\"w-full gap-2\"\r\n-                        onClick={() => setModalState({ ...modalState, showAddLesson: true })}\r\n-                          >\r\n-                            <Plus className=\"h-4 w-4\" />\r\n-                            Add New Lesson\r\n-                    </Button>\r\n-                      </div>\r\n-                        )}\r\n-                      </>\r\n-                    )}\r\n-                  </CardContent>\r\n-                </Card>\r\n-              </div>\r\n-\r\n-              {/* Collapsed view */}\r\n-              {isSidebarCollapsed && (\r\n-                <div className=\"absolute inset-0 flex flex-col items-center pt-12 gap-4\">\r\n-                  <BookOpen className=\"h-6 w-6 text-muted-foreground\" />\r\n-                  <div className=\"w-px h-full bg-border\" />\r\n-                </div>\r\n-              )}\r\n-            </Card>\r\n-          </div>\r\n-        \r\n-\r\n-          {/* Right Content Area */}\r\n-          <div className=\"flex-1 overflow-y-auto\">\r\n-            {isNavigating ? (\r\n-              <div className=\"flex items-center justify-center h-[400px]\">\r\n-                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n-                <span className=\"ml-3\">Loading...</span>\r\n-              </div>\r\n-            ) : (\r\n-              <>\r\n-                {!selectedGradeId ? (\r\n-                  // Question Types Display Section\r\n-                  <div className=\"space-y-6\">\r\n-                    <Card>\r\n-                      <CardHeader>\r\n-                        <div className=\"flex items-center justify-between\">\r\n-                          <div>\r\n-                            <CardTitle className=\"text-xl font-semibold\">Available Question Types</CardTitle>\r\n-                            <CardDescription>Browse through different question formats and examples</CardDescription>\r\n-                          </div>\r\n-                          <TooltipProvider>\r\n-                            <Tooltip>\r\n-                              <TooltipTrigger>\r\n-                                <HelpCircle className=\"h-5 w-5 text-muted-foreground\" />\r\n-                              </TooltipTrigger>\r\n-                              <TooltipContent>\r\n-                                <p>Click on each type to see detailed examples</p>\r\n-                              </TooltipContent>\r\n-                            </Tooltip>\r\n-                          </TooltipProvider>\r\n-                        </div>\r\n-                      </CardHeader>\r\n-                      <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n-                        {Object.entries(QUESTION_TYPES).map(([type, details]) => (\r\n-                          <Card key={type} className=\"cursor-pointer hover:bg-accent/50 transition-colors\">\r\n-                            <CardHeader className=\"p-4\">\r\n-                              <div className=\"flex items-center justify-between mb-2\">\r\n-                                <Badge variant=\"outline\" className=\"bg-primary/5 text-lg\">\r\n-                                  {details.label}\r\n-                                </Badge>\r\n-                              </div>\r\n-                              <CardDescription className=\"text-sm\">\r\n-                                {details.description || 'No description available'}\r\n-                              </CardDescription>\r\n-                              <div className=\"mt-4\">\r\n-                                <div className=\"text-sm font-medium mb-2\">Example:</div>\r\n-                                <div className=\"p-3 rounded-md bg-muted/50 text-sm\">\r\n-                                  {type === 'multiple-choice' && (\r\n-                                    <>\r\n-                                      <div className=\"font-medium mb-2\">Q: What is the capital of France?</div>\r\n-                                      <div className=\"space-y-1 pl-4\">\r\n-                                        <div>A) Paris</div>\r\n-                                        <div>B) London</div>\r\n-                                        <div>C) Berlin</div>\r\n-                                        <div>D) Madrid</div>\r\n-                                      </div>\r\n-                                    </>\r\n-                                  )}\r\n-                                  {type === 'fill-in-blank' && (\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <div>Complete the sentence:</div>\r\n-                                      <div>The sun rises in the <span className=\"bg-primary/20 px-2 rounded\">_____</span> and sets in the <span className=\"bg-primary/20 px-2 rounded\">_____</span>.</div>\r\n-                                    </div>\r\n-                                  )}\r\n-                                  {type === 'true-false' && (\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <div className=\"font-medium\">Statement:</div>\r\n-                                      <div>The Earth is flat.</div>\r\n-                                      <div className=\"mt-2\">\r\n-                                        <Badge variant=\"outline\" className=\"mr-2\">True</Badge>\r\n-                                        <Badge variant=\"outline\">False</Badge>\r\n-                                      </div>\r\n-                                    </div>\r\n-                                  )}\r\n-                                  {type === 'matching' && (\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <div className=\"font-medium mb-2\">Match the countries with their capitals:</div>\r\n-                                      <div className=\"grid grid-cols-2 gap-4\">\r\n-                                        <div>\r\n-                                          1. France<br />\r\n-                                          2. Germany<br />\r\n-                                          3. Spain\r\n-                                        </div>\r\n-                                        <div>\r\n-                                          • Berlin<br />\r\n-                                          • Paris<br />\r\n-                                          • Madrid\r\n-                                        </div>\r\n-                                      </div>\r\n-                                    </div>\r\n-                                  )}\r\n-                                  {type === 'ordering' && (\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <div className=\"font-medium mb-2\">Arrange in chronological order:</div>\r\n-                                      <div className=\"space-y-1\">\r\n-                                        <Badge variant=\"outline\" className=\"mr-2\">1</Badge>World War II<br />\r\n-                                        <Badge variant=\"outline\" className=\"mr-2\">2</Badge>Industrial Revolution<br />\r\n-                                        <Badge variant=\"outline\" className=\"mr-2\">3</Badge>Renaissance\r\n-                                      </div>\r\n-                                    </div>\r\n-                                  )}\r\n-                                  {type === 'short-answer' && (\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <div className=\"font-medium\">Question:</div>\r\n-                                      <div>Explain the water cycle in 2-3 sentences.</div>\r\n-                                      <div className=\"mt-2 p-2 border border-dashed rounded-md border-primary/30\">\r\n-                                        Answer space\r\n-                                      </div>\r\n-                                    </div>\r\n-                                  )}\r\n-                                </div>\r\n-                              </div>\r\n-                            </CardHeader>\r\n-                          </Card>\r\n-                        ))}\r\n-                      </CardContent>\r\n-                    </Card>\r\n-                  </div>\r\n-                ) : isViewMode ? (\r\n-                  <div className=\"space-y-6\">\r\n-                    {selectedGradeId ? (\r\n-                      <div className=\"grid grid-cols-1 gap-6\">\r\n-                        {topics.map((topic) => (\r\n-                          <Card key={topic.id} className=\"border-l-4 border-l-primary\">\r\n-                            <CardHeader>\r\n-                              <div className=\"flex items-center justify-between\">\r\n-                                <h3 className=\"text-lg font-semibold\">{topic.title}</h3>\r\n-                              </div>\r\n-                            </CardHeader>\r\n-                            <CardContent>\r\n-                              <div className=\"space-y-4\">\r\n-                                {subtopics\r\n-                                  .filter(subtopic => subtopic.topic_id === topic.id)\r\n-                                  .map((subtopic, index) => (\r\n-                                    <div key={subtopic.id || `subtopic-${index}`} className=\"border-l-2 pl-4\">\r\n-                                      <h4 className=\"text-md font-medium mb-2\">{subtopic.name || 'Untitled Subtopic'}</h4>\r\n-                                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n-                                        {lessons\r\n-                                          .filter(lesson => lesson.subtopic_id === subtopic.id)\r\n-                                          .map((lesson) => (\r\n-                                            <Card \r\n-                                              key={lesson.id} \r\n-                                              className={cn(\r\n-                                                \"cursor-pointer transition-all duration-200\",\r\n-                                                \"hover:shadow-md hover:translate-y-[-2px]\",\r\n-                                                \"hover:bg-accent/50 hover:border-primary/50\",\r\n-                                                \"active:translate-y-[0px]\",\r\n-                                                currentLessonId === lesson.id && \"border-primary bg-accent/50 shadow-md\",\r\n-                                                \"group\" // Enable group hover effects\r\n-                                              )}\r\n-                                              onClick={() => handleLessonSelect(lesson.id || '')}\r\n-                                            >\r\n-                                              <CardHeader className=\"p-4\">\r\n-                                                <div className=\"flex flex-col gap-2\">\r\n-                                                  <div className=\"flex items-center justify-between\">\r\n-                                                    <div className=\"flex items-center gap-2\">\r\n-                                                      <BookOpen className={cn(\r\n-                                                        \"h-4 w-4 text-primary\",\r\n-                                                        \"transition-transform duration-200\",\r\n-                                                        \"group-hover:scale-110\"\r\n-                                                      )} />\r\n-                                                      <span className=\"font-medium\">{lesson.title}</span>\r\n-                                                    </div>\r\n-                                                    <Button\r\n-                                                      variant=\"outline\"\r\n-                                                      size=\"sm\"\r\n-                                                      className={cn(\r\n-                                                        \"opacity-0 group-hover:opacity-100\",\r\n-                                                        \"transition-all duration-200\",\r\n-                                                        \"hover:bg-primary hover:text-primary-foreground\"\r\n-                                                      )}\r\n-                                                      disabled={!lesson.content || currentLessonId !== lesson.id}\r\n-                                                      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\r\n-                                                        e.stopPropagation();\r\n-                                                        window.location.href = `/teacher/lessons/${lesson.id}`;\r\n-                                                      }}\r\n-                                                    >\r\n-                                                      Start Lesson\r\n-                                                    </Button>\r\n-                                                  </div>\r\n-                                                  <div className=\"flex items-center gap-2\">\r\n-                                                    <Badge variant=\"outline\" className={cn(\r\n-                                                      \"bg-primary/5\",\r\n-                                                      \"transition-colors duration-200\",\r\n-                                                      \"group-hover:bg-primary/10\"\r\n-                                                    )}>\r\n-                                                      {lesson.questions?.length || 0} Questions\r\n-                                                    </Badge>\r\n-                                                    <Badge variant=\"outline\" className={cn(\r\n-                                                      \"bg-primary/5\",\r\n-                                                      \"transition-colors duration-200\",\r\n-                                                      \"group-hover:bg-primary/10\"\r\n-                                                    )}>\r\n-                                                      {lesson.activities?.length || 0} Activities\r\n-                                                    </Badge>\r\n-                                                  </div>\r\n-                                                </div>\r\n-                                              </CardHeader>\r\n-                                            </Card>\r\n-                                          ))}\r\n-                                      </div>\r\n-                                    </div>\r\n-                                  ))}\r\n-                              </div>\r\n-                            </CardContent>\r\n-                          </Card>\r\n-                        ))}\r\n-                      </div>\r\n-                    ) : (\r\n-                      <div className=\"text-center py-20\">\r\n-                        <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\r\n-                        <h3 className=\"text-lg font-medium\">Select a Grade</h3>\r\n-                        <p className=\"text-sm text-muted-foreground\">\r\n-                          Choose a grade from the left panel to start managing content\r\n-                        </p>\r\n-                      </div>\r\n-                    )}\r\n-                  </div>\r\n-                ) : (\r\n-                  // Edit Mode Content\r\n-                  <div className=\"space-y-4\">\r\n-                    {/* Lesson Title */}\r\n-                    <Card>\r\n-                      <CardHeader>\r\n-                        <div className=\"flex items-center justify-between mb-4\">\r\n-                          <h2 className=\"text-2xl font-bold\">Lesson Content</h2>\r\n-                                                    <Button\r\n-                                                      variant=\"outline\"\r\n-                                                      size=\"sm\"\r\n-                            onClick={() => setIsContentEditorOpen(true)}\r\n-                          >\r\n-                            <Pencil className=\"h-4 w-4 mr-2\" />\r\n-                            Edit Content\r\n-                          </Button>\r\n-                        </div>\r\n-                      </CardHeader>\r\n-                      <CardContent className=\"space-y-4\">\r\n-                        {/* Lesson Title */}\r\n-                        <div className=\"flex items-center justify-between\">\r\n-                          <div className=\"space-y-1\">\r\n-                            <Label>Lesson Title</Label>\r\n-                            <InlineEdit\r\n-                              value={lessonTitle}\r\n-                              onSave={async (newTitle) => {\r\n-                                setLessonTitle(newTitle);\r\n-                                await handleSaveLesson();\r\n-                              }}\r\n-                              isEditing={isEditingTitle}\r\n-                              setIsEditing={setIsEditingTitle}\r\n-                              placeholder=\"Enter lesson title\"\r\n-                              className=\"text-lg font-medium\"\r\n-                            />\r\n-                          </div>\r\n-                        </div>\r\n-\r\n-                        {/* Content Editor and Display */}\r\n-                        <div className=\"space-y-4\">\r\n-                          {isContentEditorOpen ? (\r\n-                            <div className=\"border rounded-lg p-4\">\r\n-                              <div className=\"mb-4\">\r\n-                                <Label>Content Heading</Label>\r\n-                                <InlineEdit\r\n-                                  value={contentHeading}\r\n-                                  onSave={(newHeading) => setContentHeading(newHeading)}\r\n-                                  isEditing={isEditingHeading}\r\n-                                  setIsEditing={setIsEditingHeading}\r\n-                                  placeholder=\"Add content heading\"\r\n-                                  className=\"text-base text-muted-foreground\"\r\n-                                />\r\n-                              </div>\r\n-                              <RichTextEditor\r\n-                                value={lessonContent}\r\n-                                onChange={setLessonContent}\r\n-                                onSave={async (content) => {\r\n-                                  await handleContentSave(content);\r\n-                                  setIsContentEditorOpen(false);\r\n-                                }}\r\n-                                placeholder=\"Add lesson content here...\"\r\n-                              />\r\n-                            </div>\r\n-                          ) : lessonContent ? (\r\n-                            <div className=\"prose prose-sm max-w-none\">\r\n-                              {contentHeading && (\r\n-                                <h3 className=\"text-lg font-semibold mb-2\">{contentHeading}</h3>\r\n-                              )}\r\n-                              <div dangerouslySetInnerHTML={{ __html: lessonContent }} />\r\n-                            </div>\r\n-                          ) : (\r\n-                            <div className=\"text-center py-8 text-muted-foreground\">\r\n-                              Click 'Edit Content' to add lesson content\r\n-                            </div>\r\n-                          )}\r\n-                        </div>\r\n-                      </CardContent>\r\n-                    </Card>\r\n-\r\n-                    {/* Tabs */}\r\n-                    <Tabs defaultValue=\"questions\" className=\"mt-6\">\r\n-                    <TabsList className=\"grid w-full grid-cols-2\">\r\n-                        <TabsTrigger value=\"questions\">\r\n-                          <MessageSquare className=\"h-4 w-4 mr-2\" />\r\n-                        Questions\r\n-                      </TabsTrigger>\r\n-                        <TabsTrigger value=\"activities\">\r\n-                          <ActivityIcon className=\"h-4 w-4 mr-2\" />\r\n-                        Activities\r\n-                      </TabsTrigger>\r\n-                    </TabsList>\r\n-\r\n-                      {/* Questions Tab */}\r\n-                      <TabsContent value=\"questions\" className=\"space-y-4\">\r\n-                      <CardHeader>\r\n-                          <CardDescription>Add and manage questions for this lesson</CardDescription>\r\n-                      </CardHeader>\r\n-                        {questions.map((question, index) => (\r\n-                          <Card key={index} className={cn(\r\n-                            \"relative border-l-4 transition-colors duration-200\",\r\n-                            expandedQuestion === index ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\r\n-                          )}>\r\n-                            <CardHeader className=\"pb-3\">\r\n-                              <div className=\"flex items-center justify-between gap-4\">\r\n-                                <div className=\"flex items-center gap-3 min-w-0 flex-1\">\r\n-                                  <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n-                                    <span className=\"px-2 py-1 bg-primary/10 rounded-md text-sm font-semibold text-primary whitespace-nowrap\">\r\n-                                      Q {index + 1}\r\n-                                    </span>\r\n-                                    <Badge variant=\"outline\" className=\"whitespace-nowrap\">\r\n-                                      {QUESTION_TYPES[question.type as keyof typeof QUESTION_TYPES]?.label || question.type}\r\n-                                    </Badge>\r\n-                                    {question.isDraft && (\r\n-                                      <Badge variant=\"secondary\" className=\"whitespace-nowrap\">Draft</Badge>\r\n-                                )}\r\n-                                  </div>\r\n-                                      {expandedQuestion !== index && (\r\n-                                        <div className=\"text-sm text-muted-foreground truncate\">\r\n-                                          {question.metadata?.prompt || 'No question text'}\r\n-                                        </div>\r\n-                                      )}\r\n-                                    </div>\r\n-                                    <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n-                                      <Button\r\n-                                        variant=\"ghost\"\r\n+                                          Delete\r\n+                                        </AlertDialogAction>\r\n+                                      </AlertDialogFooter>\r\n+                                    </AlertDialogContent>\r\n+                                  </AlertDialog>\r\n+                                  <Button \r\n+                                    variant=\"ghost\" \r\n                                         size=\"sm\"\r\n                                         onClick={() => handleQuestionExpand(index)}\r\n                                       >\r\n                                         {expandedQuestion === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n"
                },
                {
                    "date": 1739799777826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2098,8 +2098,620 @@\n                                     </AlertDialogContent>\r\n                                   </AlertDialog>\r\n                                   <Button \r\n                                     variant=\"ghost\" \r\n+                                    size=\"sm\" \r\n+                                    onClick={() => handleTopicExpand(topic.id || '')}\r\n+                                  >\r\n+                                    {expandedTopic === topic.id ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n+                                  </Button>\r\n+                                </div>\r\n+                              </div>\r\n+                            </CardHeader>\r\n+                            {expandedTopic === topic.id && (\r\n+                              <CardContent className=\"py-0 pl-4\">\r\n+                                {subtopics\r\n+                                  .filter(subtopic => subtopic.topic_id === topic.id)\r\n+                                  .map((subtopic: SubTopic) => (\r\n+                                    <div key={subtopic.id} className=\"mb-3 last:mb-0\">\r\n+                                      <div className=\"flex items-center justify-between py-2\">\r\n+                                        <span className=\"text-sm font-medium\">{subtopic.name}</span>\r\n+                                        <div className=\"flex items-center gap-2\">\r\n+                                          <AlertDialog>\r\n+                                            <AlertDialogTrigger asChild>\r\n+                                              <Button variant=\"ghost\" size=\"sm\" className=\"hover:bg-destructive/10 hover:text-destructive\">\r\n+                                                <Trash className=\"h-4 w-4\" />\r\n+                                              </Button>\r\n+                                            </AlertDialogTrigger>\r\n+                                            <AlertDialogContent>\r\n+                                              <AlertDialogHeader>\r\n+                                                <AlertDialogTitle>Are you sure?</AlertDialogTitle>\r\n+                                                <AlertDialogDescription>\r\n+                                                  This will permanently delete the subtopic and all its lessons.\r\n+                                                </AlertDialogDescription>\r\n+                                              </AlertDialogHeader>\r\n+                                              <AlertDialogFooter>\r\n+                                                <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n+                                                <AlertDialogAction \r\n+                                                  onClick={() => handleDeleteSubtopic(subtopic.id || '')}\r\n+                                                  className=\"bg-destructive hover:bg-destructive/90\"\r\n+                                                >\r\n+                                                  Delete\r\n+                                                </AlertDialogAction>\r\n+                                              </AlertDialogFooter>\r\n+                                            </AlertDialogContent>\r\n+                                          </AlertDialog>\r\n+                                          <Button \r\n+                                            variant=\"ghost\" \r\n+                                            size=\"sm\" \r\n+                                            onClick={() => handleSubtopicExpand(subtopic.id || '')}\r\n+                                          >\r\n+                                            {expandedSubtopic === subtopic.id ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n+                                          </Button>\r\n+                                        </div>\r\n+                                      </div>\r\n+                                      {expandedSubtopic === subtopic.id && (\r\n+                                        <div className=\"pl-4 space-y-2\">\r\n+                                          {lessons\r\n+                                            .filter(lesson => lesson.subtopic_id === subtopic.id)\r\n+                                            .map((lesson: Lesson) => (\r\n+                                              <div\r\n+                                                key={lesson.id}\r\n+                                                className=\"flex items-center justify-between gap-2 py-1 px-2 rounded-md hover:bg-accent\"\r\n+                                              >\r\n+                                                <div \r\n+                                                  className=\"flex items-center gap-2 flex-1 cursor-pointer\"\r\n+                                                  onClick={() => {\r\n+                                                    const lessonId = lesson.id || '';\r\n+                                                    const topicId = topic.id || '';\r\n+                                                    const subtopicId = subtopic.id || '';\r\n+                                                    \r\n+                                                    setCurrentLessonId(lessonId);\r\n+                                                    setSelectedTopicId(topicId);\r\n+                                                    setSelectedSubtopicId(subtopicId);\r\n+                                                  }}\r\n+                                                >\r\n+                                                  <BookOpen className=\"h-4 w-4 text-muted-foreground\" />\r\n+                                                  <span className=\"text-sm\">{lesson.title}</span>\r\n+                                                </div>\r\n+                                                <AlertDialog>\r\n+                                                  <AlertDialogTrigger asChild>\r\n+                                                    <Button variant=\"ghost\" size=\"sm\" className=\"hover:bg-destructive/10 hover:text-destructive\">\r\n+                                                      <Trash className=\"h-4 w-4\" />\r\n+                                                    </Button>\r\n+                                                  </AlertDialogTrigger>\r\n+                                                  <AlertDialogContent>\r\n+                                                    <AlertDialogHeader>\r\n+                                                      <AlertDialogTitle>Are you sure?</AlertDialogTitle>\r\n+                                                      <AlertDialogDescription>\r\n+                                                        This will permanently delete the lesson and all its content.\r\n+                                                      </AlertDialogDescription>\r\n+                                                    </AlertDialogHeader>\r\n+                                                    <AlertDialogFooter>\r\n+                                                      <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n+                                                      <AlertDialogAction \r\n+                                                        onClick={() => handleDeleteLesson(lesson.id || '')}\r\n+                                                        className=\"bg-destructive hover:bg-destructive/90\"\r\n+                                                      >\r\n+                                                        Delete\r\n+                                                      </AlertDialogAction>\r\n+                                                    </AlertDialogFooter>\r\n+                                                  </AlertDialogContent>\r\n+                                                </AlertDialog>\r\n+                                              </div>\r\n+                                            ))}\r\n+                                        </div>\r\n+                                      )}\r\n+                                    </div>\r\n+                                  ))}\r\n+                              </CardContent>\r\n+                            )}\r\n+                          </Card>\r\n+                        ))}\r\n+                      </div>\r\n+                    )}\r\n+\r\n+                    {/* Regular Edit Mode Content */}\r\n+                    {!isViewMode && (\r\n+                      <>\r\n+                        {/* Existing Topic, Subtopic, and Lesson Selection UI */}\r\n+                      {/* Topic Selection */}\r\n+                        {selectedGradeId && (\r\n+                      <div className=\"space-y-2\">\r\n+                        <div className=\"flex items-center justify-between\">\r\n+                        <Label htmlFor=\"topic-select\">Topic</Label>\r\n+                        </div>\r\n+                        <Select \r\n+                              value={selectedTopicId || ''} \r\n+                              onValueChange={handleTopicSelect}\r\n+                        >\r\n+                          <SelectTrigger id=\"topic-select\" className=\"w-full\">\r\n+                            <SelectValue placeholder=\"Select Topic\" />\r\n+                          </SelectTrigger>\r\n+                          <SelectContent>\r\n+                                {topics.map((topic: Topic) => (\r\n+                                  <SelectItem \r\n+                                    key={`topic-${topic.id || 'new'}`} \r\n+                                    value={topic.id || ''}\r\n+                                  >\r\n+                                  <div className=\"flex items-center gap-2\">\r\n+                                  <Layers className=\"h-4 w-4 text-primary\" />\r\n+                                    {topic.title}\r\n+                                  </div>\r\n+                                </SelectItem>\r\n+                              ))}\r\n+                          </SelectContent>\r\n+                        </Select>\r\n+                        <Button \r\n+                          variant=\"outline\" \r\n+                          size=\"sm\" \r\n+                          className=\"w-full gap-2\"\r\n+                          onClick={() => setModalState({ ...modalState, showAddTopic: true })}\r\n+                        >\r\n+                          <Plus className=\"h-4 w-4\" />\r\n+                          Add New Topic\r\n+                        </Button>\r\n+                      </div>\r\n+                    )}\r\n+\r\n+                    {/* Subtopic Selection */}\r\n+                        {selectedTopicId && (\r\n+                      <div className=\"space-y-2\">\r\n+                        <div className=\"flex items-center justify-between\">\r\n+                        <Label htmlFor=\"subtopic-select\">Subtopic</Label>\r\n+                        </div>\r\n+                        <Select \r\n+                              value={selectedSubtopicId || ''} \r\n+                              onValueChange={handleSubtopicSelect}\r\n+                        >\r\n+                          <SelectTrigger id=\"subtopic-select\" className=\"w-full\">\r\n+                            <SelectValue placeholder=\"Select Subtopic\" />\r\n+                          </SelectTrigger>\r\n+                          <SelectContent>\r\n+                                {subtopics\r\n+                                  .filter(subtopic => subtopic.id)\r\n+                                  .map((subtopic, index) => (\r\n+                                    <SelectItem \r\n+                                      key={subtopic.id || `subtopic-${index}`}\r\n+                                      value={subtopic.id || ''}\r\n+                                    >\r\n+                                      {subtopic.title || 'Untitled Subtopic'}\r\n+                                    </SelectItem>\r\n+                                  ))}\r\n+                          </SelectContent>\r\n+                        </Select>\r\n+                        {!isViewMode && (\r\n+                          <Button \r\n+                            variant=\"outline\" \r\n+                            size=\"sm\" \r\n+                            className=\"w-full gap-2\"\r\n+                            onClick={() => setModalState({ ...modalState, showAddSubtopic: true })}\r\n+                          >\r\n+                            <Plus className=\"h-4 w-4\" />\r\n+                            Add New Subtopic\r\n+                          </Button>\r\n+                        )}\r\n+                      </div>\r\n+                    )}\r\n+\r\n+                    {/* Lesson Selection */}\r\n+                        {selectedSubtopicId && (\r\n+                      <div className=\"space-y-2\">\r\n+                        <div className=\"flex items-center justify-between\">\r\n+                          <Label htmlFor=\"lesson-select\">Lesson</Label>\r\n+                        </div>\r\n+                          <Select \r\n+                            value={currentLessonId || ''} \r\n+                            onValueChange={handleLessonSelect}\r\n+                            onOpenChange={(open) => {\r\n+                              setIsDropdownOpen(open);\r\n+                              if (open) {\r\n+                                setIsSidebarCollapsed(false);\r\n+                                setIsSidebarLocked(true);\r\n+                              } else {\r\n+                                // Small delay before unlocking to prevent immediate collapse\r\n+                                setTimeout(() => {\r\n+                                  setIsSidebarLocked(false);\r\n+                                }, 100);\r\n+                              }\r\n+                            }}\r\n+                          >\r\n+                            <SelectTrigger \r\n+                              id=\"lesson-select\" \r\n+                              className=\"w-full\"\r\n+                              onClick={(e) => {\r\n+                                e.stopPropagation();\r\n+                                setIsSidebarCollapsed(false);\r\n+                                setIsSidebarLocked(true);\r\n+                              }}\r\n+                            >\r\n+                              <SelectValue placeholder=\"Select Lesson\" />\r\n+                            </SelectTrigger>\r\n+                            <SelectContent>\r\n+                              {lessons\r\n+                                .filter((lesson): lesson is Lesson => lesson !== undefined && lesson !== null)\r\n+                                .map((lesson: Lesson) => (\r\n+                                  <SelectItem \r\n+                                    key={`lesson-${lesson.id || 'new'}`} \r\n+                                    value={lesson.id || ''}\r\n+                                  >\r\n+                                    <div className=\"flex items-center gap-2\">\r\n+                                      <BookOpen className=\"h-4 w-4 text-primary\" />\r\n+                                      {lesson.title || 'Untitled Lesson'}\r\n+                                    </div>\r\n+                                  </SelectItem>\r\n+                                ))}\r\n+                            </SelectContent>\r\n+                          </Select>\r\n+                    <Button \r\n+                            variant=\"outline\" \r\n+                            size=\"sm\" \r\n+                            className=\"w-full gap-2\"\r\n+                        onClick={() => setModalState({ ...modalState, showAddLesson: true })}\r\n+                          >\r\n+                            <Plus className=\"h-4 w-4\" />\r\n+                            Add New Lesson\r\n+                    </Button>\r\n+                      </div>\r\n+                        )}\r\n+                      </>\r\n+                    )}\r\n+                  </CardContent>\r\n+                </Card>\r\n+              </div>\r\n+\r\n+              {/* Collapsed view */}\r\n+              {isSidebarCollapsed && (\r\n+                <div className=\"absolute inset-0 flex flex-col items-center pt-12 gap-4\">\r\n+                  <BookOpen className=\"h-6 w-6 text-muted-foreground\" />\r\n+                  <div className=\"w-px h-full bg-border\" />\r\n+                </div>\r\n+              )}\r\n+            </Card>\r\n+          </div>\r\n+        \r\n+\r\n+          {/* Right Content Area */}\r\n+          <div className=\"flex-1 overflow-y-auto\">\r\n+            {isNavigating ? (\r\n+              <div className=\"flex items-center justify-center h-[400px]\">\r\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n+                <span className=\"ml-3\">Loading...</span>\r\n+              </div>\r\n+            ) : (\r\n+              <>\r\n+                {!selectedGradeId ? (\r\n+                  // Question Types Display Section\r\n+                  <div className=\"space-y-6\">\r\n+                    <Card>\r\n+                      <CardHeader>\r\n+                        <div className=\"flex items-center justify-between\">\r\n+                          <div>\r\n+                            <CardTitle className=\"text-xl font-semibold\">Available Question Types</CardTitle>\r\n+                            <CardDescription>Browse through different question formats and examples</CardDescription>\r\n+                          </div>\r\n+                          <TooltipProvider>\r\n+                            <Tooltip>\r\n+                              <TooltipTrigger>\r\n+                                <HelpCircle className=\"h-5 w-5 text-muted-foreground\" />\r\n+                              </TooltipTrigger>\r\n+                              <TooltipContent>\r\n+                                <p>Click on each type to see detailed examples</p>\r\n+                              </TooltipContent>\r\n+                            </Tooltip>\r\n+                          </TooltipProvider>\r\n+                        </div>\r\n+                      </CardHeader>\r\n+                      <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n+                        {Object.entries(QUESTION_TYPES).map(([type, details]) => (\r\n+                          <Card key={type} className=\"cursor-pointer hover:bg-accent/50 transition-colors\">\r\n+                            <CardHeader className=\"p-4\">\r\n+                              <div className=\"flex items-center justify-between mb-2\">\r\n+                                <Badge variant=\"outline\" className=\"bg-primary/5 text-lg\">\r\n+                                  {details.label}\r\n+                                </Badge>\r\n+                              </div>\r\n+                              <CardDescription className=\"text-sm\">\r\n+                                {details.description || 'No description available'}\r\n+                              </CardDescription>\r\n+                              <div className=\"mt-4\">\r\n+                                <div className=\"text-sm font-medium mb-2\">Example:</div>\r\n+                                <div className=\"p-3 rounded-md bg-muted/50 text-sm\">\r\n+                                  {type === 'multiple-choice' && (\r\n+                                    <>\r\n+                                      <div className=\"font-medium mb-2\">Q: What is the capital of France?</div>\r\n+                                      <div className=\"space-y-1 pl-4\">\r\n+                                        <div>A) Paris</div>\r\n+                                        <div>B) London</div>\r\n+                                        <div>C) Berlin</div>\r\n+                                        <div>D) Madrid</div>\r\n+                                      </div>\r\n+                                    </>\r\n+                                  )}\r\n+                                  {type === 'fill-in-blank' && (\r\n+                                    <div className=\"space-y-2\">\r\n+                                      <div>Complete the sentence:</div>\r\n+                                      <div>The sun rises in the <span className=\"bg-primary/20 px-2 rounded\">_____</span> and sets in the <span className=\"bg-primary/20 px-2 rounded\">_____</span>.</div>\r\n+                                    </div>\r\n+                                  )}\r\n+                                  {type === 'true-false' && (\r\n+                                    <div className=\"space-y-2\">\r\n+                                      <div className=\"font-medium\">Statement:</div>\r\n+                                      <div>The Earth is flat.</div>\r\n+                                      <div className=\"mt-2\">\r\n+                                        <Badge variant=\"outline\" className=\"mr-2\">True</Badge>\r\n+                                        <Badge variant=\"outline\">False</Badge>\r\n+                                      </div>\r\n+                                    </div>\r\n+                                  )}\r\n+                                  {type === 'matching' && (\r\n+                                    <div className=\"space-y-2\">\r\n+                                      <div className=\"font-medium mb-2\">Match the countries with their capitals:</div>\r\n+                                      <div className=\"grid grid-cols-2 gap-4\">\r\n+                                        <div>\r\n+                                          1. France<br />\r\n+                                          2. Germany<br />\r\n+                                          3. Spain\r\n+                                        </div>\r\n+                                        <div>\r\n+                                          • Berlin<br />\r\n+                                          • Paris<br />\r\n+                                          • Madrid\r\n+                                        </div>\r\n+                                      </div>\r\n+                                    </div>\r\n+                                  )}\r\n+                                  {type === 'ordering' && (\r\n+                                    <div className=\"space-y-2\">\r\n+                                      <div className=\"font-medium mb-2\">Arrange in chronological order:</div>\r\n+                                      <div className=\"space-y-1\">\r\n+                                        <Badge variant=\"outline\" className=\"mr-2\">1</Badge>World War II<br />\r\n+                                        <Badge variant=\"outline\" className=\"mr-2\">2</Badge>Industrial Revolution<br />\r\n+                                        <Badge variant=\"outline\" className=\"mr-2\">3</Badge>Renaissance\r\n+                                      </div>\r\n+                                    </div>\r\n+                                  )}\r\n+                                  {type === 'short-answer' && (\r\n+                                    <div className=\"space-y-2\">\r\n+                                      <div className=\"font-medium\">Question:</div>\r\n+                                      <div>Explain the water cycle in 2-3 sentences.</div>\r\n+                                      <div className=\"mt-2 p-2 border border-dashed rounded-md border-primary/30\">\r\n+                                        Answer space\r\n+                                      </div>\r\n+                                    </div>\r\n+                                  )}\r\n+                                </div>\r\n+                              </div>\r\n+                            </CardHeader>\r\n+                          </Card>\r\n+                        ))}\r\n+                      </CardContent>\r\n+                    </Card>\r\n+                  </div>\r\n+                ) : isViewMode ? (\r\n+                  <div className=\"space-y-6\">\r\n+                    {selectedGradeId ? (\r\n+                      <div className=\"grid grid-cols-1 gap-6\">\r\n+                        {topics.map((topic) => (\r\n+                          <Card key={topic.id} className=\"border-l-4 border-l-primary\">\r\n+                            <CardHeader>\r\n+                              <div className=\"flex items-center justify-between\">\r\n+                                <h3 className=\"text-lg font-semibold\">{topic.title}</h3>\r\n+                              </div>\r\n+                            </CardHeader>\r\n+                            <CardContent>\r\n+                              <div className=\"space-y-4\">\r\n+                                {subtopics\r\n+                                  .filter(subtopic => subtopic.topic_id === topic.id)\r\n+                                  .map((subtopic, index) => (\r\n+                                    <div key={subtopic.id || `subtopic-${index}`} className=\"border-l-2 pl-4\">\r\n+                                      <h4 className=\"text-md font-medium mb-2\">{subtopic.name || 'Untitled Subtopic'}</h4>\r\n+                                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n+                                        {lessons\r\n+                                          .filter(lesson => lesson.subtopic_id === subtopic.id)\r\n+                                          .map((lesson) => (\r\n+                                            <Card \r\n+                                              key={lesson.id} \r\n+                                              className={cn(\r\n+                                                \"cursor-pointer transition-all duration-200\",\r\n+                                                \"hover:shadow-md hover:translate-y-[-2px]\",\r\n+                                                \"hover:bg-accent/50 hover:border-primary/50\",\r\n+                                                \"active:translate-y-[0px]\",\r\n+                                                currentLessonId === lesson.id && \"border-primary bg-accent/50 shadow-md\",\r\n+                                                \"group\" // Enable group hover effects\r\n+                                              )}\r\n+                                              onClick={() => handleLessonSelect(lesson.id || '')}\r\n+                                            >\r\n+                                              <CardHeader className=\"p-4\">\r\n+                                                <div className=\"flex flex-col gap-2\">\r\n+                                                  <div className=\"flex items-center justify-between\">\r\n+                                                    <div className=\"flex items-center gap-2\">\r\n+                                                      <BookOpen className={cn(\r\n+                                                        \"h-4 w-4 text-primary\",\r\n+                                                        \"transition-transform duration-200\",\r\n+                                                        \"group-hover:scale-110\"\r\n+                                                      )} />\r\n+                                                      <span className=\"font-medium\">{lesson.title}</span>\r\n+                                                    </div>\r\n+                                                    <Button\r\n+                                                      variant=\"outline\"\r\n+                                                      size=\"sm\"\r\n+                                                      className={cn(\r\n+                                                        \"opacity-0 group-hover:opacity-100\",\r\n+                                                        \"transition-all duration-200\",\r\n+                                                        \"hover:bg-primary hover:text-primary-foreground\"\r\n+                                                      )}\r\n+                                                      disabled={!lesson.content || currentLessonId !== lesson.id}\r\n+                                                      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\r\n+                                                        e.stopPropagation();\r\n+                                                        window.location.href = `/teacher/lessons/${lesson.id}`;\r\n+                                                      }}\r\n+                                                    >\r\n+                                                      Start Lesson\r\n+                                                    </Button>\r\n+                                                  </div>\r\n+                                                  <div className=\"flex items-center gap-2\">\r\n+                                                    <Badge variant=\"outline\" className={cn(\r\n+                                                      \"bg-primary/5\",\r\n+                                                      \"transition-colors duration-200\",\r\n+                                                      \"group-hover:bg-primary/10\"\r\n+                                                    )}>\r\n+                                                      {lesson.questions?.length || 0} Questions\r\n+                                                    </Badge>\r\n+                                                    <Badge variant=\"outline\" className={cn(\r\n+                                                      \"bg-primary/5\",\r\n+                                                      \"transition-colors duration-200\",\r\n+                                                      \"group-hover:bg-primary/10\"\r\n+                                                    )}>\r\n+                                                      {lesson.activities?.length || 0} Activities\r\n+                                                    </Badge>\r\n+                                                  </div>\r\n+                                                </div>\r\n+                                              </CardHeader>\r\n+                                            </Card>\r\n+                                          ))}\r\n+                                      </div>\r\n+                                    </div>\r\n+                                  ))}\r\n+                              </div>\r\n+                            </CardContent>\r\n+                          </Card>\r\n+                        ))}\r\n+                      </div>\r\n+                    ) : (\r\n+                      <div className=\"text-center py-20\">\r\n+                        <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\r\n+                        <h3 className=\"text-lg font-medium\">Select a Grade</h3>\r\n+                        <p className=\"text-sm text-muted-foreground\">\r\n+                          Choose a grade from the left panel to start managing content\r\n+                        </p>\r\n+                      </div>\r\n+                    )}\r\n+                  </div>\r\n+                ) : (\r\n+                  // Edit Mode Content\r\n+                  <div className=\"space-y-4\">\r\n+                    {/* Lesson Title */}\r\n+                    <Card>\r\n+                      <CardHeader>\r\n+                        <div className=\"flex items-center justify-between mb-4\">\r\n+                          <h2 className=\"text-2xl font-bold\">Lesson Content</h2>\r\n+                                                    <Button\r\n+                                                      variant=\"outline\"\r\n+                                                      size=\"sm\"\r\n+                            onClick={() => setIsContentEditorOpen(true)}\r\n+                          >\r\n+                            <Pencil className=\"h-4 w-4 mr-2\" />\r\n+                            Edit Content\r\n+                          </Button>\r\n+                        </div>\r\n+                      </CardHeader>\r\n+                      <CardContent className=\"space-y-4\">\r\n+                        {/* Lesson Title */}\r\n+                        <div className=\"flex items-center justify-between\">\r\n+                          <div className=\"space-y-1\">\r\n+                            <Label>Lesson Title</Label>\r\n+                            <InlineEdit\r\n+                              value={lessonTitle}\r\n+                              onSave={async (newTitle) => {\r\n+                                setLessonTitle(newTitle);\r\n+                                await handleSaveLesson();\r\n+                              }}\r\n+                              isEditing={isEditingTitle}\r\n+                              setIsEditing={setIsEditingTitle}\r\n+                              placeholder=\"Enter lesson title\"\r\n+                              className=\"text-lg font-medium\"\r\n+                            />\r\n+                          </div>\r\n+                        </div>\r\n+\r\n+                        {/* Content Editor and Display */}\r\n+                        <div className=\"space-y-4\">\r\n+                          {isContentEditorOpen ? (\r\n+                            <div className=\"border rounded-lg p-4\">\r\n+                              <div className=\"mb-4\">\r\n+                                <Label>Content Heading</Label>\r\n+                                <InlineEdit\r\n+                                  value={contentHeading}\r\n+                                  onSave={(newHeading) => setContentHeading(newHeading)}\r\n+                                  isEditing={isEditingHeading}\r\n+                                  setIsEditing={setIsEditingHeading}\r\n+                                  placeholder=\"Add content heading\"\r\n+                                  className=\"text-base text-muted-foreground\"\r\n+                                />\r\n+                              </div>\r\n+                              <RichTextEditor\r\n+                                value={lessonContent}\r\n+                                onChange={setLessonContent}\r\n+                                onSave={async (content) => {\r\n+                                  await handleContentSave(content);\r\n+                                  setIsContentEditorOpen(false);\r\n+                                }}\r\n+                                placeholder=\"Add lesson content here...\"\r\n+                              />\r\n+                            </div>\r\n+                          ) : lessonContent ? (\r\n+                            <div className=\"prose prose-sm max-w-none\">\r\n+                              {contentHeading && (\r\n+                                <h3 className=\"text-lg font-semibold mb-2\">{contentHeading}</h3>\r\n+                              )}\r\n+                              <div dangerouslySetInnerHTML={{ __html: lessonContent }} />\r\n+                            </div>\r\n+                          ) : (\r\n+                            <div className=\"text-center py-8 text-muted-foreground\">\r\n+                              Click 'Edit Content' to add lesson content\r\n+                            </div>\r\n+                          )}\r\n+                        </div>\r\n+                      </CardContent>\r\n+                    </Card>\r\n+\r\n+                    {/* Tabs */}\r\n+                    <Tabs defaultValue=\"questions\" className=\"mt-6\">\r\n+                    <TabsList className=\"grid w-full grid-cols-2\">\r\n+                        <TabsTrigger value=\"questions\">\r\n+                          <MessageSquare className=\"h-4 w-4 mr-2\" />\r\n+                        Questions\r\n+                      </TabsTrigger>\r\n+                        <TabsTrigger value=\"activities\">\r\n+                          <ActivityIcon className=\"h-4 w-4 mr-2\" />\r\n+                        Activities\r\n+                      </TabsTrigger>\r\n+                    </TabsList>\r\n+\r\n+                      {/* Questions Tab */}\r\n+                      <TabsContent value=\"questions\" className=\"space-y-4\">\r\n+                      <CardHeader>\r\n+                          <CardDescription>Add and manage questions for this lesson</CardDescription>\r\n+                      </CardHeader>\r\n+                        {questions.map((question, index) => (\r\n+                          <Card key={index} className={cn(\r\n+                            \"relative border-l-4 transition-colors duration-200\",\r\n+                            expandedQuestion === index ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\r\n+                          )}>\r\n+                            <CardHeader className=\"pb-3\">\r\n+                              <div className=\"flex items-center justify-between gap-4\">\r\n+                                <div className=\"flex items-center gap-3 min-w-0 flex-1\">\r\n+                                  <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n+                                    <span className=\"px-2 py-1 bg-primary/10 rounded-md text-sm font-semibold text-primary whitespace-nowrap\">\r\n+                                      Q {index + 1}\r\n+                                    </span>\r\n+                                    <Badge variant=\"outline\" className=\"whitespace-nowrap\">\r\n+                                      {QUESTION_TYPES[question.type as keyof typeof QUESTION_TYPES]?.label || question.type}\r\n+                                    </Badge>\r\n+                                    {question.isDraft && (\r\n+                                      <Badge variant=\"secondary\" className=\"whitespace-nowrap\">Draft</Badge>\r\n+                                )}\r\n+                                  </div>\r\n+                                      {expandedQuestion !== index && (\r\n+                                        <div className=\"text-sm text-muted-foreground truncate\">\r\n+                                          {question.metadata?.prompt || 'No question text'}\r\n+                                        </div>\r\n+                                      )}\r\n+                                    </div>\r\n+                                    <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n+                                      <Button\r\n+                                        variant=\"ghost\"\r\n                                         size=\"sm\"\r\n                                         onClick={() => handleQuestionExpand(index)}\r\n                                       >\r\n                                         {expandedQuestion === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n"
                },
                {
                    "date": 1739799977029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,8 +41,9 @@\n import { debounce, isNull } from 'lodash';\r\n import { PostgrestError } from '@supabase/supabase-js';\r\n import { Question as ContentQuestion } from './types';  // Import the specific type\r\n import { Trash } from \"lucide-react\";\r\n+import { AnimatePresence, motion } from 'framer-motion';\r\n \r\n \r\n // Update the API endpoint to match your backend route\r\n const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\r\n@@ -2065,10 +2066,19 @@\n                     </div>\r\n \r\n                     {/* Content Tree View in View Mode */}\r\n                     {isViewMode && expandedGrade && (\r\n-                      <div className=\"mt-4 space-y-4\">\r\n+                      <div className=\"mt-4 space-y-4 overflow-y-auto max-h-[calc(100vh-300px)]\">\r\n                         {topics.map((topic: Topic) => (\r\n+                          <Card \r\n+                            key={topic.id} \r\n+                            className={cn(\r\n+                              \"border-l-4 transition-all duration-200\",\r\n+                              expandedTopic === topic.id ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\r\n+                            )}\r\n+                          >\r\n+                            <CardHeader className=\"py-3 cursor-pointer\" onClick={() => handleTopicExpand(topic.id || '')}>\r\n+                              <div className=\"flex items-center justify-between\">\r\n                           <Card key={topic.id} className=\"border-l-4 border-l-primary\">\r\n                             <CardHeader className=\"py-3\">\r\n                               <div className=\"flex items-center justify-between\">\r\n                                 <h4 className=\"font-medium\">{topic.title}</h4>\r\n"
                },
                {
                    "date": 1739800002036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2077,145 +2077,153 @@\n                             )}\r\n                           >\r\n                             <CardHeader className=\"py-3 cursor-pointer\" onClick={() => handleTopicExpand(topic.id || '')}>\r\n                               <div className=\"flex items-center justify-between\">\r\n-                          <Card key={topic.id} className=\"border-l-4 border-l-primary\">\r\n-                            <CardHeader className=\"py-3\">\r\n-                              <div className=\"flex items-center justify-between\">\r\n-                                <h4 className=\"font-medium\">{topic.title}</h4>\r\n                                 <div className=\"flex items-center gap-2\">\r\n+                                  <Layers className=\"h-4 w-4 text-primary\" />\r\n+                                  <h4 className=\"font-medium\">{topic.title}</h4>\r\n+                                  <Badge variant=\"outline\" className=\"ml-2\">\r\n+                                    {subtopics.filter(s => s.topic_id === topic.id).length} Subtopics\r\n+                                  </Badge>\r\n+                                </div>\r\n+                                <div className=\"flex items-center gap-2\">\r\n                                   <AlertDialog>\r\n                                     <AlertDialogTrigger asChild>\r\n-                                      <Button variant=\"ghost\" size=\"sm\" className=\"hover:bg-destructive/10 hover:text-destructive\">\r\n+                                      <Button \r\n+                                        variant=\"ghost\" \r\n+                                        size=\"sm\" \r\n+                                        className=\"hover:bg-destructive/10 hover:text-destructive\"\r\n+                                        onClick={(e) => e.stopPropagation()}\r\n+                                      >\r\n                                         <Trash className=\"h-4 w-4\" />\r\n                                       </Button>\r\n                                     </AlertDialogTrigger>\r\n-                                    <AlertDialogContent>\r\n-                                      <AlertDialogHeader>\r\n-                                        <AlertDialogTitle>Are you sure?</AlertDialogTitle>\r\n-                                        <AlertDialogDescription>\r\n-                                          This will permanently delete the topic and all its subtopics and lessons.\r\n-                                        </AlertDialogDescription>\r\n-                                      </AlertDialogHeader>\r\n-                                      <AlertDialogFooter>\r\n-                                        <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n-                                        <AlertDialogAction \r\n-                                          onClick={() => handleDeleteTopic(topic.id || '')}\r\n-                                          className=\"bg-destructive hover:bg-destructive/90\"\r\n-                                        >\r\n-                                          Delete\r\n-                                        </AlertDialogAction>\r\n-                                      </AlertDialogFooter>\r\n-                                    </AlertDialogContent>\r\n+                                    {/* Alert Dialog Content */}\r\n                                   </AlertDialog>\r\n-                                  <Button \r\n-                                    variant=\"ghost\" \r\n-                                    size=\"sm\" \r\n-                                    onClick={() => handleTopicExpand(topic.id || '')}\r\n-                                  >\r\n-                                    {expandedTopic === topic.id ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n-                                  </Button>\r\n+                                  <ChevronDown className={cn(\r\n+                                    \"h-4 w-4 transition-transform duration-200\",\r\n+                                    expandedTopic === topic.id ? \"rotate-0\" : \"-rotate-90\"\r\n+                                  )} />\r\n                                 </div>\r\n                               </div>\r\n                             </CardHeader>\r\n-                            {expandedTopic === topic.id && (\r\n-                              <CardContent className=\"py-0 pl-4\">\r\n-                                {subtopics\r\n-                                  .filter(subtopic => subtopic.topic_id === topic.id)\r\n-                                  .map((subtopic: SubTopic) => (\r\n-                                    <div key={subtopic.id} className=\"mb-3 last:mb-0\">\r\n-                                      <div className=\"flex items-center justify-between py-2\">\r\n-                                        <span className=\"text-sm font-medium\">{subtopic.name}</span>\r\n-                                        <div className=\"flex items-center gap-2\">\r\n-                                          <AlertDialog>\r\n-                                            <AlertDialogTrigger asChild>\r\n-                                              <Button variant=\"ghost\" size=\"sm\" className=\"hover:bg-destructive/10 hover:text-destructive\">\r\n-                                                <Trash className=\"h-4 w-4\" />\r\n-                                              </Button>\r\n-                                            </AlertDialogTrigger>\r\n-                                            <AlertDialogContent>\r\n-                                              <AlertDialogHeader>\r\n-                                                <AlertDialogTitle>Are you sure?</AlertDialogTitle>\r\n-                                                <AlertDialogDescription>\r\n-                                                  This will permanently delete the subtopic and all its lessons.\r\n-                                                </AlertDialogDescription>\r\n-                                              </AlertDialogHeader>\r\n-                                              <AlertDialogFooter>\r\n-                                                <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n-                                                <AlertDialogAction \r\n-                                                  onClick={() => handleDeleteSubtopic(subtopic.id || '')}\r\n-                                                  className=\"bg-destructive hover:bg-destructive/90\"\r\n-                                                >\r\n-                                                  Delete\r\n-                                                </AlertDialogAction>\r\n-                                              </AlertDialogFooter>\r\n-                                            </AlertDialogContent>\r\n-                                          </AlertDialog>\r\n-                                          <Button \r\n-                                            variant=\"ghost\" \r\n-                                            size=\"sm\" \r\n+\r\n+                            <AnimatePresence>\r\n+                              {expandedTopic === topic.id && (\r\n+                                <motion.div\r\n+                                  initial={{ height: 0, opacity: 0 }}\r\n+                                  animate={{ height: \"auto\", opacity: 1 }}\r\n+                                  exit={{ height: 0, opacity: 0 }}\r\n+                                  transition={{ duration: 0.2 }}\r\n+                                >\r\n+                                  <CardContent className=\"py-0 pl-4\">\r\n+                                    {subtopics\r\n+                                      .filter(subtopic => subtopic.topic_id === topic.id)\r\n+                                      .map((subtopic: SubTopic) => (\r\n+                                        <div \r\n+                                          key={subtopic.id} \r\n+                                          className={cn(\r\n+                                            \"mb-3 last:mb-0 border-l-2 pl-4\",\r\n+                                            expandedSubtopic === subtopic.id ? \"border-l-primary\" : \"border-l-muted\"\r\n+                                          )}\r\n+                                        >\r\n+                                          <div \r\n+                                            className=\"flex items-center justify-between py-2 cursor-pointer hover:bg-accent/50 rounded-md px-2\"\r\n                                             onClick={() => handleSubtopicExpand(subtopic.id || '')}\r\n                                           >\r\n-                                            {expandedSubtopic === subtopic.id ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n-                                          </Button>\r\n-                                        </div>\r\n-                                      </div>\r\n-                                      {expandedSubtopic === subtopic.id && (\r\n-                                        <div className=\"pl-4 space-y-2\">\r\n-                                          {lessons\r\n-                                            .filter(lesson => lesson.subtopic_id === subtopic.id)\r\n-                                            .map((lesson: Lesson) => (\r\n-                                              <div\r\n-                                                key={lesson.id}\r\n-                                                className=\"flex items-center justify-between gap-2 py-1 px-2 rounded-md hover:bg-accent\"\r\n+                                            <div className=\"flex items-center gap-2\">\r\n+                                              <BookOpen className=\"h-4 w-4 text-primary\" />\r\n+                                              <span className=\"text-sm font-medium\">{subtopic.name}</span>\r\n+                                              <Badge variant=\"outline\" className=\"ml-2\">\r\n+                                                {lessons.filter(l => l.subtopic_id === subtopic.id).length} Lessons\r\n+                                              </Badge>\r\n+                                            </div>\r\n+                                            <div className=\"flex items-center gap-2\">\r\n+                                              <AlertDialog>\r\n+                                                <AlertDialogTrigger asChild>\r\n+                                                  <Button \r\n+                                                    variant=\"ghost\" \r\n+                                                    size=\"sm\" \r\n+                                                    className=\"hover:bg-destructive/10 hover:text-destructive\"\r\n+                                                    onClick={(e) => e.stopPropagation()}\r\n+                                                  >\r\n+                                                    <Trash className=\"h-4 w-4\" />\r\n+                                                  </Button>\r\n+                                                </AlertDialogTrigger>\r\n+                                                {/* Alert Dialog Content */}\r\n+                                              </AlertDialog>\r\n+                                              <ChevronDown className={cn(\r\n+                                                \"h-4 w-4 transition-transform duration-200\",\r\n+                                                expandedSubtopic === subtopic.id ? \"rotate-0\" : \"-rotate-90\"\r\n+                                              )} />\r\n+                                            </div>\r\n+                                          </div>\r\n+\r\n+                                          <AnimatePresence>\r\n+                                            {expandedSubtopic === subtopic.id && (\r\n+                                              <motion.div\r\n+                                                initial={{ height: 0, opacity: 0 }}\r\n+                                                animate={{ height: \"auto\", opacity: 1 }}\r\n+                                                exit={{ height: 0, opacity: 0 }}\r\n+                                                transition={{ duration: 0.2 }}\r\n                                               >\r\n-                                                <div \r\n-                                                  className=\"flex items-center gap-2 flex-1 cursor-pointer\"\r\n-                                                  onClick={() => {\r\n-                                                    const lessonId = lesson.id || '';\r\n-                                                    const topicId = topic.id || '';\r\n-                                                    const subtopicId = subtopic.id || '';\r\n-                                                    \r\n-                                                    setCurrentLessonId(lessonId);\r\n-                                                    setSelectedTopicId(topicId);\r\n-                                                    setSelectedSubtopicId(subtopicId);\r\n-                                                  }}\r\n-                                                >\r\n-                                                  <BookOpen className=\"h-4 w-4 text-muted-foreground\" />\r\n-                                                  <span className=\"text-sm\">{lesson.title}</span>\r\n+                                                <div className=\"pl-4 space-y-2 mt-2\">\r\n+                                                  {lessons\r\n+                                                    .filter(lesson => lesson.subtopic_id === subtopic.id)\r\n+                                                    .map((lesson: Lesson) => (\r\n+                                                      <div\r\n+                                                        key={lesson.id}\r\n+                                                        className={cn(\r\n+                                                          \"flex items-center justify-between gap-2 py-2 px-3 rounded-md transition-colors\",\r\n+                                                          \"hover:bg-accent cursor-pointer\",\r\n+                                                          currentLessonId === lesson.id && \"bg-accent/50 border-primary\"\r\n+                                                        )}\r\n+                                                        onClick={() => {\r\n+                                                          const lessonId = lesson.id || '';\r\n+                                                          const topicId = topic.id || '';\r\n+                                                          const subtopicId = subtopic.id || '';\r\n+                                                          \r\n+                                                          setCurrentLessonId(lessonId);\r\n+                                                          setSelectedTopicId(topicId);\r\n+                                                          setSelectedSubtopicId(subtopicId);\r\n+                                                        }}\r\n+                                                      >\r\n+                                                        <div className=\"flex items-center gap-2 flex-1\">\r\n+                                                          <div className=\"flex h-8 w-8 items-center justify-center rounded-md border bg-background\">\r\n+                                                            <BookOpen className=\"h-4 w-4 text-primary\" />\r\n+                                                          </div>\r\n+                                                          <div className=\"flex flex-col\">\r\n+                                                            <span className=\"text-sm font-medium\">{lesson.title}</span>\r\n+                                                            <span className=\"text-xs text-muted-foreground\">\r\n+                                                              {lesson.duration} mins • {lesson.questions?.length || 0} Questions\r\n+                                                            </span>\r\n+                                                          </div>\r\n+                                                        </div>\r\n+                                                        <AlertDialog>\r\n+                                                          <AlertDialogTrigger asChild>\r\n+                                                            <Button \r\n+                                                              variant=\"ghost\" \r\n+                                                              size=\"sm\" \r\n+                                                              className=\"hover:bg-destructive/10 hover:text-destructive\"\r\n+                                                              onClick={(e) => e.stopPropagation()}\r\n+                                                            >\r\n+                                                              <Trash className=\"h-4 w-4\" />\r\n+                                                            </Button>\r\n+                                                          </AlertDialogTrigger>\r\n+                                                          {/* Alert Dialog Content */}\r\n+                                                        </AlertDialog>\r\n+                                                      </div>\r\n+                                                    ))}\r\n                                                 </div>\r\n-                                                <AlertDialog>\r\n-                                                  <AlertDialogTrigger asChild>\r\n-                                                    <Button variant=\"ghost\" size=\"sm\" className=\"hover:bg-destructive/10 hover:text-destructive\">\r\n-                                                      <Trash className=\"h-4 w-4\" />\r\n-                                                    </Button>\r\n-                                                  </AlertDialogTrigger>\r\n-                                                  <AlertDialogContent>\r\n-                                                    <AlertDialogHeader>\r\n-                                                      <AlertDialogTitle>Are you sure?</AlertDialogTitle>\r\n-                                                      <AlertDialogDescription>\r\n-                                                        This will permanently delete the lesson and all its content.\r\n-                                                      </AlertDialogDescription>\r\n-                                                    </AlertDialogHeader>\r\n-                                                    <AlertDialogFooter>\r\n-                                                      <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n-                                                      <AlertDialogAction \r\n-                                                        onClick={() => handleDeleteLesson(lesson.id || '')}\r\n-                                                        className=\"bg-destructive hover:bg-destructive/90\"\r\n-                                                      >\r\n-                                                        Delete\r\n-                                                      </AlertDialogAction>\r\n-                                                    </AlertDialogFooter>\r\n-                                                  </AlertDialogContent>\r\n-                                                </AlertDialog>\r\n-                                              </div>\r\n-                                            ))}\r\n+                                              </motion.div>\r\n+                                            )}\r\n+                                          </AnimatePresence>\r\n                                         </div>\r\n-                                      )}\r\n-                                    </div>\r\n-                                  ))}\r\n-                              </CardContent>\r\n-                            )}\r\n+                                      ))}\r\n+                                  </CardContent>\r\n+                                </motion.div>\r\n+                              )}\r\n+                            </AnimatePresence>\r\n                           </Card>\r\n                         ))}\r\n                       </div>\r\n                     )}\r\n"
                },
                {
                    "date": 1739800512145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import { useState, useCallback, useEffect, useRef } from 'react';\r\n import { toast } from 'sonner';\r\n import { Toaster } from 'sonner';\r\n import Link from 'next/link';\r\n-import {  Activity as ActivityIcon,  ArrowLeft,  BookOpen,  ChevronDown,  ChevronRight,  Check,  Edit,  Eye,  EyeOff,  HelpCircle,  Layers,  List,  MessageSquare,  Plus,  Save,  Trash as Trash2, X, Pencil, Lock, Unlock, RefreshCw } from 'lucide-react';\r\n+import {  Activity as ActivityIcon,  ArrowLeft,  BookOpen,  ChevronDown,  ChevronRight,  Check,  Edit,  Eye,  EyeOff,  HelpCircle,  Layers,  List,  MessageSquare,  Plus,  Save,  Trash as Trash2, X, Pencil, Lock, Unlock, RefreshCw, Clock } from 'lucide-react';\r\n import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\n import { Badge } from '@/components/ui/badge';\r\n import { Button } from '@/components/ui/button';\r\n import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\n"
                },
                {
                    "date": 1739800526649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -374,8 +374,12 @@\n \r\n   // Add this state to track dropdown state\r\n   const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n \r\n+  // Add these states\r\n+  const [isLoadingSubtopics, setIsLoadingSubtopics] = useState(false);\r\n+  const [isLoadingLessons, setIsLoadingLessons] = useState(false);\r\n+\r\n   // Event handlers\r\n   const handleQuestionTypeChange = useCallback((type: string) => {\r\n     if (isQuestionType(type)) {\r\n       setSelectedQuestionType(type);\r\n@@ -1243,360 +1247,26 @@\n   const handleTopicExpand = (topicId: string | null) => {\r\n     setExpandedTopic(expandedTopic === topicId ? null : topicId);\r\n   };\r\n \r\n-  const handleSubtopicExpand = (subtopicId: string | null) => {\r\n+  const handleSubtopicExpand = async (subtopicId: string) => {\r\n     setExpandedSubtopic(expandedSubtopic === subtopicId ? null : subtopicId);\r\n-  };\r\n-\r\n-  const handleQuestionExpand = (index: number) => {\r\n-    setExpandedQuestion(expandedQuestion === index ? null : index);\r\n-  };\r\n-\r\n-  const handleActivityExpand = (index: number) => {\r\n-    setExpandedActivity(expandedActivity === index ? null : index);\r\n-  };\r\n-\r\n-  // Add effect to save mode changes to localStorage\r\n-  useEffect(() => {\r\n-    localStorage.setItem('lessonManagementViewMode', isViewMode.toString());\r\n-  }, [isViewMode]);\r\n-\r\n-  // Add handlers for creating new items\r\n-  const handleCreateGrade = async () => {\r\n-    try {\r\n-      const response = await fetch(`${API_ENDPOINT}/grades`, {\r\n-        method: 'POST',\r\n-        headers: { 'Content-Type': 'application/json' },\r\n-        body: JSON.stringify({ name: newItemData.name })\r\n-      });\r\n-\r\n-      if (!response.ok) throw new Error('Failed to create grade');\r\n-      const data = await response.json();\r\n-      \r\n-      if (!data.success) throw new Error(data.message || 'Failed to create grade');\r\n-      \r\n-      // Update grades list\r\n-      setGrades([...grades, data.data.grade]);\r\n-      setModalState({ ...modalState, showAddGrade: false });\r\n-      setNewItemData({ name: '', description: '' });\r\n-      toast.success('Grade created successfully');\r\n-    } catch (error) {\r\n-      console.error('Error creating grade:', error);\r\n-      toast.error('Failed to create grade');\r\n-    }\r\n-  };\r\n-\r\n-  const handleCreateTopic = async () => {\r\n-    if (!selectedGradeId) {\r\n-      toast.error('Please select a grade first');\r\n-      return;\r\n-    }\r\n-\r\n-    try {\r\n-      const newTopic = await contentService.createTopic({\r\n-        title: newItemData.name, // Map from newItemData.name to title\r\n-        description: newItemData.description,\r\n-        gradeId: selectedGradeId\r\n-      });\r\n-\r\n-      setTopics(prev => [...prev, newTopic]);\r\n-      toast.success('Topic created successfully');\r\n-      setModalState({ ...modalState, showAddTopic: false });\r\n-      setNewItemData({ name: '', description: '' });\r\n-    } catch (err) {\r\n-      const error = err instanceof Error ? err.message : String(err);\r\n-      console.error('Error creating topic:', error);\r\n-      toast.error('Failed to create topic');\r\n-    }\r\n-  };\r\n+    setSelectedSubtopicId(subtopicId);\r\n     \r\n-  \r\n+    if (subtopicId) {\r\n+      setIsLoadingLessons(true);\r\n+      try {\r\n+        const { data: lessonsData, error } = await supabase\r\n+          .from('lessons')\r\n+          .select('*')\r\n+          .eq('subtopic_id', subtopicId)\r\n+          .order('order_index');\r\n \r\n-\r\n-  const handleCreateSubtopic = async (data: { title: string; description?: string }) => {\r\n-    try {\r\n-      if (!selectedTopicId) {\r\n-        toast.error('Please select a topic first');\r\n-        return;\r\n-      }\r\n-\r\n-      const newSubtopic = await contentService.createSubtopic({\r\n-        ...data,\r\n-        topicId: selectedTopicId\r\n-      });\r\n-\r\n-      setSubtopics(prev => [...prev, {\r\n-        _id: newSubtopic.id,\r\n-        id: newSubtopic.id,\r\n-        name: newSubtopic.title,\r\n-        title: newSubtopic.title,\r\n-        description: newSubtopic.description,\r\n-        topic_id: newSubtopic.topic_id,\r\n-        orderIndex: prev.length,\r\n-        lessons: []\r\n-      }]);\r\n-\r\n-      toast.success('Subtopic created successfully');\r\n-      setModalState(prev => ({ ...prev, showAddSubtopic: false }));\r\n-    } catch (err) {\r\n-      const error = err as Error;\r\n-      console.error('Error creating subtopic:', error);\r\n-      toast.error('Failed to create subtopic');\r\n-    }\r\n-  };\r\n-\r\n-  const handleUpdateSubtopic = async (subtopicId: string, data: { title: string; description?: string }) => {\r\n-    try {\r\n-      const { data: updatedSubtopic, error } = await supabase\r\n-        .from('sub_topics')\r\n-        .update(data)\r\n-        .eq('id', subtopicId)\r\n-        .select()\r\n-        .single();\r\n-\r\n-      if (error) throw error;\r\n-      \r\n-      setSubtopics(prev => prev.map(subtopic => \r\n-        subtopic.id === subtopicId \r\n-          ? {\r\n-              ...subtopic,\r\n-              name: updatedSubtopic.title\r\n-            }\r\n-          : subtopic\r\n-      ));\r\n-\r\n-      toast.success('Subtopic updated successfully');\r\n-    } catch (err) {\r\n-      const error = err as Error;\r\n-      console.error('Error updating subtopic:', error);\r\n-      toast.error('Failed to update subtopic');\r\n-    }\r\n-  };\r\n-\r\n-  const handleDeleteSubtopic = async (subtopicId: string) => {\r\n-    try {\r\n-      await contentService.deleteSubtopic(subtopicId);\r\n-      setSubtopics(prev => prev.filter(subtopic => subtopic.id !== subtopicId));\r\n-      setSelectedSubtopicId(null);\r\n-      toast.success('Subtopic deleted successfully');\r\n-    } catch (err) {\r\n-      const error = err as Error;\r\n-      console.error('Error deleting subtopic:', error);\r\n-      toast.error('Failed to delete subtopic');\r\n-    }\r\n-  };\r\n-\r\n-  const handleCreateLesson = async () => {\r\n-    if (!selectedSubtopicId) {\r\n-      toast.error('Please select a subtopic first');\r\n-      return;\r\n-    }\r\n-\r\n-    try {\r\n-      // First create the lesson\r\n-      const { data: newLesson, error: lessonError } = await supabase\r\n-        .from('lessons')\r\n-        .insert({\r\n-          title: newItemData.name,\r\n-          subtopic_id: selectedSubtopicId,\r\n-          content: '', // Empty rich text content initially\r\n-          status: 'draft'\r\n-        })\r\n-        .select()\r\n-        .single();\r\n-\r\n-      if (lessonError) throw lessonError;\r\n-\r\n-      // Create initial question\r\n-      const { data: newQuestion, error: questionError } = await supabase\r\n-        .from('questions')\r\n-        .insert({\r\n-          lesson_id: newLesson.id,\r\n-          type: 'speaking', // default type\r\n-          title: 'Question 1',\r\n-          data: {\r\n-            prompt: '',\r\n-            teacherScript: '',\r\n-            options: []\r\n-          },\r\n-          order_index: 0\r\n-        })\r\n-        .select()\r\n-        .single();\r\n-\r\n-      if (questionError) throw questionError;\r\n-\r\n-      // Create initial exercise prompts for the question\r\n-      const { error: promptsError } = await supabase\r\n-        .from('exercise_prompts')\r\n-        .insert([\r\n-          {\r\n-            question_id: newQuestion.id,\r\n-            text: '',\r\n-            type: 'image',\r\n-            narration: '',\r\n-            saytext: '',\r\n-            media: [],\r\n-            order_index: 0\r\n-          },\r\n-          {\r\n-            question_id: newQuestion.id,\r\n-            text: '',\r\n-            type: 'gif',\r\n-            narration: '',\r\n-            saytext: '',\r\n-            media: [],\r\n-            order_index: 1\r\n-          }\r\n-        ]);\r\n-\r\n-      if (promptsError) throw promptsError;\r\n-\r\n-      // Create initial activity\r\n-      // const { error: activityError } = await supabase\r\n-      //   .from('activities')\r\n-      //   .insert({\r\n-      //     lesson_id: newLesson.id,\r\n-      //     type: 'practice',\r\n-      //     title: '',\r\n-      //     instructions: '',\r\n-      //     media: [],\r\n-      //     data: {\r\n-      //       prompt: '',\r\n-      //       teacherScript: '',\r\n-      //       media: []\r\n-      //     },\r\n-      //     order_index: 0\r\n-      //   });\r\n-\r\n-      // if (activityError) throw activityError;\r\n-\r\n-      // Update UI state\r\n-      setLessons(prev => [...prev, newLesson]);\r\n-      setCurrentLessonId(newLesson.id);\r\n-      setLessonTitle(newLesson.title);\r\n-      setModalState({ ...modalState, showAddLesson: false });\r\n-      setNewItemData({ name: '', description: '' });\r\n-      toast.success('Lesson created successfully');\r\n-\r\n-    } catch (error) {\r\n-      console.error('Error creating lesson:', error);\r\n-      toast.error('Failed to create lesson');\r\n-    }\r\n-  };\r\n-\r\n-  // Effect to handle localStorage after mount\r\n-  useEffect(() => {\r\n-    const storedMode = localStorage.getItem('lessonManagementViewMode');\r\n-    if (storedMode !== null) {\r\n-      setIsViewMode(storedMode === 'true');\r\n-    }\r\n-  }, []);\r\n-\r\n-  // Update the cleanupModalState function\r\n-  const cleanupModalState = useCallback(() => {\r\n-    document.body.style.pointerEvents = '';\r\n-    document.body.style.overflow = '';\r\n-    setModalState({\r\n-      showAddGrade: false,\r\n-      showAddTopic: false,\r\n-      showAddSubtopic: false,\r\n-      showAddLesson: false\r\n-    });\r\n-    setNewItemData({ name: '', description: '' });\r\n-  }, []);\r\n-\r\n-  // Add a function to handle modal state changes\r\n-  const handleModalStateChange = useCallback((modalType: keyof typeof modalState, open: boolean) => {\r\n-    if (!open) {\r\n-      cleanupModalState();\r\n-    } else {\r\n-      setModalState(prev => ({ ...prev, [modalType]: open }));\r\n-    }\r\n-  }, [cleanupModalState]);\r\n-\r\n-  const handleContentSave = async (content: string) => {\r\n-    const loadingToast = toast.loading(\"Saving content...\", {\r\n-      action: {\r\n-        label: \"Close\",\r\n-        onClick: () => toast.dismiss()\r\n-      }\r\n-    });\r\n-    \r\n-    try {\r\n-      const { data: { session } } = await supabase.auth.getSession();\r\n-      if (!session?.user) {\r\n-        toast.error('Please sign in to save content', { id: loadingToast });\r\n-        return;\r\n-      }\r\n-\r\n-      // Get the most recent content entry\r\n-      const { data: existingContent, error: checkError } = await supabase\r\n-        .from('lesson_content')\r\n-        .select('id')\r\n-        .eq('lesson_id', currentLessonId)\r\n-        .order('updated_at', { ascending: false })\r\n-        .limit(1)\r\n-        .maybeSingle();\r\n-\r\n-      // If content exists, update it; if not, insert new\r\n-      const { error } = await supabase\r\n-        .from('lesson_content')\r\n-        .upsert({\r\n-          id: existingContent?.id, // This ensures we update if id exists\r\n-          lesson_id: currentLessonId,\r\n-          content: [content],\r\n-          content_type: 'text',\r\n-          metadata: {\r\n-            heading: contentHeading\r\n-          },\r\n-          user_id: session.user.id,\r\n-          updated_at: new Date().toISOString()\r\n-        }, {\r\n-          onConflict: 'id'  // This ensures we update based on lesson_id\r\n-        });\r\n-\r\n-      if (error) throw error;\r\n-\r\n-      // Save questions separately\r\n-      for (const question of questions) {\r\n-        const { exercisePrompts, ...questionData } = question; // Remove exercisePrompts from question data\r\n-        \r\n-        // Save question\r\n-        const { error: questionError } = await supabase\r\n-          .from('questions')\r\n-          .upsert(questionData, {\r\n-            onConflict: 'id'\r\n-          })\r\n-          .select();\r\n-\r\n-        if (questionError) throw questionError;\r\n-\r\n-        // Save exercise prompts\r\n-        if (exercisePrompts?.length > 0) {\r\n-          for (const prompt of exercisePrompts) {\r\n-            const { error: promptError } = await supabase\r\n-              .from('exercise_prompts')\r\n-              .upsert(prompt, {\r\n-                onConflict: 'id'\r\n-              })\r\n-              .select();\r\n-\r\n-            if (promptError) throw promptError;\r\n-          }\r\n-        }\r\n-      }\r\n-      \r\n-      toast.success(\"Content saved successfully\", {\r\n-        action: {\r\n-          label: \"Close\",\r\n-          onClick: () => toast.dismiss()\r\n-        },\r\n-        id: loadingToast,\r\n-      });\r\n-      setIsContentEditorOpen(false);\r\n-    } catch (error) {\r\n+        if (error) throw error;\r\n+        setLessons(lessonsData || []);\r\n+      } catch (error) {\r\n+        console.error('Error loading lessons:', error);\r\n+        toast.error('Failed to load lessons');\r\n       console.error('Error saving content:', error);\r\n       toast.error(\"Failed to save content\", {\r\n         action: {\r\n           label: \"Close\",\r\n"
                },
                {
                    "date": 1739800623913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1265,8 +1265,362 @@\n         setLessons(lessonsData || []);\r\n       } catch (error) {\r\n         console.error('Error loading lessons:', error);\r\n         toast.error('Failed to load lessons');\r\n+      } finally {\r\n+        setIsLoadingLessons(false);\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const handleQuestionExpand = (index: number) => {\r\n+    setExpandedQuestion(expandedQuestion === index ? null : index);\r\n+  };\r\n+\r\n+  const handleActivityExpand = (index: number) => {\r\n+    setExpandedActivity(expandedActivity === index ? null : index);\r\n+  };\r\n+\r\n+  // Add effect to save mode changes to localStorage\r\n+  useEffect(() => {\r\n+    localStorage.setItem('lessonManagementViewMode', isViewMode.toString());\r\n+  }, [isViewMode]);\r\n+\r\n+  // Add handlers for creating new items\r\n+  const handleCreateGrade = async () => {\r\n+    try {\r\n+      const response = await fetch(`${API_ENDPOINT}/grades`, {\r\n+        method: 'POST',\r\n+        headers: { 'Content-Type': 'application/json' },\r\n+        body: JSON.stringify({ name: newItemData.name })\r\n+      });\r\n+\r\n+      if (!response.ok) throw new Error('Failed to create grade');\r\n+      const data = await response.json();\r\n+      \r\n+      if (!data.success) throw new Error(data.message || 'Failed to create grade');\r\n+      \r\n+      // Update grades list\r\n+      setGrades([...grades, data.data.grade]);\r\n+      setModalState({ ...modalState, showAddGrade: false });\r\n+      setNewItemData({ name: '', description: '' });\r\n+      toast.success('Grade created successfully');\r\n+    } catch (error) {\r\n+      console.error('Error creating grade:', error);\r\n+      toast.error('Failed to create grade');\r\n+    }\r\n+  };\r\n+\r\n+  const handleCreateTopic = async () => {\r\n+    if (!selectedGradeId) {\r\n+      toast.error('Please select a grade first');\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      const newTopic = await contentService.createTopic({\r\n+        title: newItemData.name, // Map from newItemData.name to title\r\n+        description: newItemData.description,\r\n+        gradeId: selectedGradeId\r\n+      });\r\n+\r\n+      setTopics(prev => [...prev, newTopic]);\r\n+      toast.success('Topic created successfully');\r\n+      setModalState({ ...modalState, showAddTopic: false });\r\n+      setNewItemData({ name: '', description: '' });\r\n+    } catch (err) {\r\n+      const error = err instanceof Error ? err.message : String(err);\r\n+      console.error('Error creating topic:', error);\r\n+      toast.error('Failed to create topic');\r\n+    }\r\n+  };\r\n+    \r\n+  \r\n+\r\n+\r\n+  const handleCreateSubtopic = async (data: { title: string; description?: string }) => {\r\n+    try {\r\n+      if (!selectedTopicId) {\r\n+        toast.error('Please select a topic first');\r\n+        return;\r\n+      }\r\n+\r\n+      const newSubtopic = await contentService.createSubtopic({\r\n+        ...data,\r\n+        topicId: selectedTopicId\r\n+      });\r\n+\r\n+      setSubtopics(prev => [...prev, {\r\n+        _id: newSubtopic.id,\r\n+        id: newSubtopic.id,\r\n+        name: newSubtopic.title,\r\n+        title: newSubtopic.title,\r\n+        description: newSubtopic.description,\r\n+        topic_id: newSubtopic.topic_id,\r\n+        orderIndex: prev.length,\r\n+        lessons: []\r\n+      }]);\r\n+\r\n+      toast.success('Subtopic created successfully');\r\n+      setModalState(prev => ({ ...prev, showAddSubtopic: false }));\r\n+    } catch (err) {\r\n+      const error = err as Error;\r\n+      console.error('Error creating subtopic:', error);\r\n+      toast.error('Failed to create subtopic');\r\n+    }\r\n+  };\r\n+\r\n+  const handleUpdateSubtopic = async (subtopicId: string, data: { title: string; description?: string }) => {\r\n+    try {\r\n+      const { data: updatedSubtopic, error } = await supabase\r\n+        .from('sub_topics')\r\n+        .update(data)\r\n+        .eq('id', subtopicId)\r\n+        .select()\r\n+        .single();\r\n+\r\n+      if (error) throw error;\r\n+      \r\n+      setSubtopics(prev => prev.map(subtopic => \r\n+        subtopic.id === subtopicId \r\n+          ? {\r\n+              ...subtopic,\r\n+              name: updatedSubtopic.title\r\n+            }\r\n+          : subtopic\r\n+      ));\r\n+\r\n+      toast.success('Subtopic updated successfully');\r\n+    } catch (err) {\r\n+      const error = err as Error;\r\n+      console.error('Error updating subtopic:', error);\r\n+      toast.error('Failed to update subtopic');\r\n+    }\r\n+  };\r\n+\r\n+  const handleDeleteSubtopic = async (subtopicId: string) => {\r\n+    try {\r\n+      await contentService.deleteSubtopic(subtopicId);\r\n+      setSubtopics(prev => prev.filter(subtopic => subtopic.id !== subtopicId));\r\n+      setSelectedSubtopicId(null);\r\n+      toast.success('Subtopic deleted successfully');\r\n+    } catch (err) {\r\n+      const error = err as Error;\r\n+      console.error('Error deleting subtopic:', error);\r\n+      toast.error('Failed to delete subtopic');\r\n+    }\r\n+  };\r\n+\r\n+  const handleCreateLesson = async () => {\r\n+    if (!selectedSubtopicId) {\r\n+      toast.error('Please select a subtopic first');\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      // First create the lesson\r\n+      const { data: newLesson, error: lessonError } = await supabase\r\n+        .from('lessons')\r\n+        .insert({\r\n+          title: newItemData.name,\r\n+          subtopic_id: selectedSubtopicId,\r\n+          content: '', // Empty rich text content initially\r\n+          status: 'draft'\r\n+        })\r\n+        .select()\r\n+        .single();\r\n+\r\n+      if (lessonError) throw lessonError;\r\n+\r\n+      // Create initial question\r\n+      const { data: newQuestion, error: questionError } = await supabase\r\n+        .from('questions')\r\n+        .insert({\r\n+          lesson_id: newLesson.id,\r\n+          type: 'speaking', // default type\r\n+          title: 'Question 1',\r\n+          data: {\r\n+            prompt: '',\r\n+            teacherScript: '',\r\n+            options: []\r\n+          },\r\n+          order_index: 0\r\n+        })\r\n+        .select()\r\n+        .single();\r\n+\r\n+      if (questionError) throw questionError;\r\n+\r\n+      // Create initial exercise prompts for the question\r\n+      const { error: promptsError } = await supabase\r\n+        .from('exercise_prompts')\r\n+        .insert([\r\n+          {\r\n+            question_id: newQuestion.id,\r\n+            text: '',\r\n+            type: 'image',\r\n+            narration: '',\r\n+            saytext: '',\r\n+            media: [],\r\n+            order_index: 0\r\n+          },\r\n+          {\r\n+            question_id: newQuestion.id,\r\n+            text: '',\r\n+            type: 'gif',\r\n+            narration: '',\r\n+            saytext: '',\r\n+            media: [],\r\n+            order_index: 1\r\n+          }\r\n+        ]);\r\n+\r\n+      if (promptsError) throw promptsError;\r\n+\r\n+      // Create initial activity\r\n+      // const { error: activityError } = await supabase\r\n+      //   .from('activities')\r\n+      //   .insert({\r\n+      //     lesson_id: newLesson.id,\r\n+      //     type: 'practice',\r\n+      //     title: '',\r\n+      //     instructions: '',\r\n+      //     media: [],\r\n+      //     data: {\r\n+      //       prompt: '',\r\n+      //       teacherScript: '',\r\n+      //       media: []\r\n+      //     },\r\n+      //     order_index: 0\r\n+      //   });\r\n+\r\n+      // if (activityError) throw activityError;\r\n+\r\n+      // Update UI state\r\n+      setLessons(prev => [...prev, newLesson]);\r\n+      setCurrentLessonId(newLesson.id);\r\n+      setLessonTitle(newLesson.title);\r\n+      setModalState({ ...modalState, showAddLesson: false });\r\n+      setNewItemData({ name: '', description: '' });\r\n+      toast.success('Lesson created successfully');\r\n+\r\n+    } catch (error) {\r\n+      console.error('Error creating lesson:', error);\r\n+      toast.error('Failed to create lesson');\r\n+    }\r\n+  };\r\n+\r\n+  // Effect to handle localStorage after mount\r\n+  useEffect(() => {\r\n+    const storedMode = localStorage.getItem('lessonManagementViewMode');\r\n+    if (storedMode !== null) {\r\n+      setIsViewMode(storedMode === 'true');\r\n+    }\r\n+  }, []);\r\n+\r\n+  // Update the cleanupModalState function\r\n+  const cleanupModalState = useCallback(() => {\r\n+    document.body.style.pointerEvents = '';\r\n+    document.body.style.overflow = '';\r\n+    setModalState({\r\n+      showAddGrade: false,\r\n+      showAddTopic: false,\r\n+      showAddSubtopic: false,\r\n+      showAddLesson: false\r\n+    });\r\n+    setNewItemData({ name: '', description: '' });\r\n+  }, []);\r\n+\r\n+  // Add a function to handle modal state changes\r\n+  const handleModalStateChange = useCallback((modalType: keyof typeof modalState, open: boolean) => {\r\n+    if (!open) {\r\n+      cleanupModalState();\r\n+    } else {\r\n+      setModalState(prev => ({ ...prev, [modalType]: open }));\r\n+    }\r\n+  }, [cleanupModalState]);\r\n+\r\n+  const handleContentSave = async (content: string) => {\r\n+    const loadingToast = toast.loading(\"Saving content...\", {\r\n+      action: {\r\n+        label: \"Close\",\r\n+        onClick: () => toast.dismiss()\r\n+      }\r\n+    });\r\n+    \r\n+    try {\r\n+      const { data: { session } } = await supabase.auth.getSession();\r\n+      if (!session?.user) {\r\n+        toast.error('Please sign in to save content', { id: loadingToast });\r\n+        return;\r\n+      }\r\n+\r\n+      // Get the most recent content entry\r\n+      const { data: existingContent, error: checkError } = await supabase\r\n+        .from('lesson_content')\r\n+        .select('id')\r\n+        .eq('lesson_id', currentLessonId)\r\n+        .order('updated_at', { ascending: false })\r\n+        .limit(1)\r\n+        .maybeSingle();\r\n+\r\n+      // If content exists, update it; if not, insert new\r\n+      const { error } = await supabase\r\n+        .from('lesson_content')\r\n+        .upsert({\r\n+          id: existingContent?.id, // This ensures we update if id exists\r\n+          lesson_id: currentLessonId,\r\n+          content: [content],\r\n+          content_type: 'text',\r\n+          metadata: {\r\n+            heading: contentHeading\r\n+          },\r\n+          user_id: session.user.id,\r\n+          updated_at: new Date().toISOString()\r\n+        }, {\r\n+          onConflict: 'id'  // This ensures we update based on lesson_id\r\n+        });\r\n+\r\n+      if (error) throw error;\r\n+\r\n+      // Save questions separately\r\n+      for (const question of questions) {\r\n+        const { exercisePrompts, ...questionData } = question; // Remove exercisePrompts from question data\r\n+        \r\n+        // Save question\r\n+        const { error: questionError } = await supabase\r\n+          .from('questions')\r\n+          .upsert(questionData, {\r\n+            onConflict: 'id'\r\n+          })\r\n+          .select();\r\n+\r\n+        if (questionError) throw questionError;\r\n+\r\n+        // Save exercise prompts\r\n+        if (exercisePrompts?.length > 0) {\r\n+          for (const prompt of exercisePrompts) {\r\n+            const { error: promptError } = await supabase\r\n+              .from('exercise_prompts')\r\n+              .upsert(prompt, {\r\n+                onConflict: 'id'\r\n+              })\r\n+              .select();\r\n+\r\n+            if (promptError) throw promptError;\r\n+          }\r\n+        }\r\n+      }\r\n+      \r\n+      toast.success(\"Content saved successfully\", {\r\n+        action: {\r\n+          label: \"Close\",\r\n+          onClick: () => toast.dismiss()\r\n+        },\r\n+        id: loadingToast,\r\n+      });\r\n+      setIsContentEditorOpen(false);\r\n+    } catch (error) {\r\n       console.error('Error saving content:', error);\r\n       toast.error(\"Failed to save content\", {\r\n         action: {\r\n           label: \"Close\",\r\n"
                },
                {
                    "date": 1739800631832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1172,101 +1172,57 @@\n     setSelectedSubtopic(value);\r\n     setCurrentLessonId(null);\r\n   };\r\n \r\n-  const handleLessonSelect = async (lessonId: string) => {\r\n-    try {\r\n-      // Lock sidebar during selection\r\n-      setIsSidebarLocked(true);\r\n-      setIsSidebarCollapsed(false);\r\n-      setCurrentLessonId(lessonId);\r\n-      \r\n-      // 1. Fetch lesson data\r\n-      const { data: lessonData, error: lessonError } = await supabase\r\n-        .from('lessons')\r\n-        .select('*')\r\n-        .eq('id', lessonId)\r\n-        .single();\r\n+  const handleLessonSelect = (lesson: Lesson) => {\r\n+    const lessonId = lesson.id || '';\r\n+    setCurrentLessonId(lessonId);\r\n+    \r\n+    // Load lesson content\r\n+    const loadLessonContent = async () => {\r\n+      try {\r\n+        const { data: lessonData, error } = await supabase\r\n+          .from('lessons')\r\n+          .select('*, questions(*), activities(*)')\r\n+          .eq('id', lessonId)\r\n+          .single();\r\n \r\n-      if (lessonError) throw lessonError;\r\n-\r\n-      // 2. Fetch questions with exercise prompts\r\n-      const { data: questionsData, error: questionsError } = await supabase\r\n-        .from('questions')\r\n-        .select(`\r\n-          *,\r\n-          exercise_prompts (*)\r\n-        `)\r\n-        .eq('lesson_id', lessonId);\r\n-\r\n-      if (questionsError) throw questionsError;\r\n-\r\n-      // 3. Fetch activities - removed order_index\r\n-      const { data: activitiesData, error: activitiesError } = await supabase\r\n-        .from('activities')\r\n-        .select('*')\r\n-        .eq('lesson_id', lessonId);\r\n-\r\n-      if (activitiesError) throw activitiesError;\r\n-\r\n-      // Format questions with their exercise prompts\r\n-      const formattedQuestions = questionsData?.map(q => ({\r\n-        ...q,\r\n-        data: q.data || {},\r\n-        exercisePrompts: q.exercise_prompts || []\r\n-      })) || [];\r\n-\r\n-      // Set all states\r\n-      setLessonTitle(lessonData.title || '');\r\n-      setLessonContent(lessonData.content || '');\r\n-      setQuestions(formattedQuestions);\r\n-      setActivities(activitiesData || []);\r\n-\r\n-      // After successful load, unlock sidebar and allow collapse\r\n-      setTimeout(() => {\r\n-        setIsSidebarLocked(false);\r\n-        if (!isSidebarLocked) {\r\n-          setIsSidebarCollapsed(true);\r\n+        if (error) throw error;\r\n+        \r\n+        if (lessonData) {\r\n+          setLessonTitle(lessonData.title);\r\n+          setQuestions(lessonData.questions || []);\r\n+          setActivities(lessonData.activities || []);\r\n         }\r\n-      }, 300);\r\n+      } catch (error) {\r\n+        console.error('Error loading lesson:', error);\r\n+        toast.error('Failed to load lesson content');\r\n+      }\r\n+    };\r\n \r\n-    } catch (error) {\r\n-      console.error('Error loading lesson:', error);\r\n-      toast.error('Failed to load lesson');\r\n-      // Reset states on error\r\n-      setLessonTitle('');\r\n-      setLessonContent('');\r\n-      setQuestions([]);\r\n-      setActivities([]);\r\n-    }\r\n-    if (!isSidebarLocked) {\r\n-      setIsSidebarCollapsed(true);\r\n-    }\r\n+    loadLessonContent();\r\n   };\r\n \r\n   // Update the expansion handlers\r\n-  const handleTopicExpand = (topicId: string | null) => {\r\n+  const handleTopicExpand = async (topicId: string) => {\r\n     setExpandedTopic(expandedTopic === topicId ? null : topicId);\r\n-  };\r\n-\r\n-  const handleSubtopicExpand = async (subtopicId: string) => {\r\n-    setExpandedSubtopic(expandedSubtopic === subtopicId ? null : subtopicId);\r\n-    setSelectedSubtopicId(subtopicId);\r\n+    setSelectedTopicId(topicId);\r\n     \r\n-    if (subtopicId) {\r\n-      setIsLoadingLessons(true);\r\n+    // Load subtopics when topic is expanded\r\n+    if (topicId) {\r\n+      setIsLoadingSubtopics(true);\r\n       try {\r\n-        const { data: lessonsData, error } = await supabase\r\n-          .from('lessons')\r\n+        const { data: subtopicsData, error } = await supabase\r\n+          .from('subtopics')\r\n           .select('*')\r\n-          .eq('subtopic_id', subtopicId)\r\n+          .eq('topic_id', topicId)\r\n           .order('order_index');\r\n \r\n         if (error) throw error;\r\n-        setLessons(lessonsData || []);\r\n+        setSubtopics(subtopicsData || []);\r\n       } catch (error) {\r\n-        console.error('Error loading lessons:', error);\r\n-        toast.error('Failed to load lessons');\r\n+        console.error('Error loading subtopics:', error);\r\n+        toast.error('Failed to load subtopics');\r\n       } finally {\r\n         setIsLoadingLessons(false);\r\n       }\r\n     }\r\n"
                },
                {
                    "date": 1739800638672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1222,8 +1222,32 @@\n       } catch (error) {\r\n         console.error('Error loading subtopics:', error);\r\n         toast.error('Failed to load subtopics');\r\n       } finally {\r\n+        setIsLoadingSubtopics(false);\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const handleSubtopicExpand = async (subtopicId: string) => {\r\n+    setExpandedSubtopic(expandedSubtopic === subtopicId ? null : subtopicId);\r\n+    setSelectedSubtopicId(subtopicId);\r\n+    \r\n+    if (subtopicId) {\r\n+      setIsLoadingLessons(true);\r\n+      try {\r\n+        const { data: lessonsData, error } = await supabase\r\n+          .from('lessons')\r\n+          .select('*')\r\n+          .eq('subtopic_id', subtopicId)\r\n+          .order('order_index');\r\n+\r\n+        if (error) throw error;\r\n+        setLessons(lessonsData || []);\r\n+      } catch (error) {\r\n+        console.error('Error loading lessons:', error);\r\n+        toast.error('Failed to load lessons');\r\n+      } finally {\r\n         setIsLoadingLessons(false);\r\n       }\r\n     }\r\n   };\r\n@@ -1760,9 +1784,9 @@\n           label: \"Close\",\r\n           onClick: () => toast.dismiss()\r\n         },\r\n       });\r\n-      await handleLessonSelect(currentLessonId);\r\n+      await handleLessonSelect(selectedLesson);\r\n       toast.success('Content refreshed', {\r\n         action: {\r\n           label: \"Close\",\r\n           onClick: () => toast.dismiss()\r\n@@ -2051,8 +2075,16 @@\n                         {topics.map((topic: Topic) => (\r\n                           <Card \r\n                             key={topic.id} \r\n                             className={cn(\r\n+                              \"border-l-4 transition-all duration-200 hover:shadow-md\",\r\n+                              expandedTopic === topic.id \r\n+                                ? \"border-l-primary bg-accent/5\" \r\n+                                : \"border-l-primary/40 hover:border-l-primary\"\r\n+                            )}\r\n+                          >\r\n+                            <CardHeader \r\n+                              className=\"py-3 cursor-pointer select-none\" \r\n                               \"border-l-4 transition-all duration-200\",\r\n                               expandedTopic === topic.id ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\r\n                             )}\r\n                           >\r\n"
                },
                {
                    "date": 1739800644615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2083,13 +2083,10 @@\n                             )}\r\n                           >\r\n                             <CardHeader \r\n                               className=\"py-3 cursor-pointer select-none\" \r\n-                              \"border-l-4 transition-all duration-200\",\r\n-                              expandedTopic === topic.id ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\r\n-                            )}\r\n-                          >\r\n-                            <CardHeader className=\"py-3 cursor-pointer\" onClick={() => handleTopicExpand(topic.id || '')}>\r\n+                              onClick={() => handleTopicExpand(topic.id || '')}\r\n+                            >\r\n                               <div className=\"flex items-center justify-between\">\r\n                                 <div className=\"flex items-center gap-2\">\r\n                                   <Layers className=\"h-4 w-4 text-primary\" />\r\n                                   <h4 className=\"font-medium\">{topic.title}</h4>\r\n@@ -2126,20 +2123,29 @@\n                                   animate={{ height: \"auto\", opacity: 1 }}\r\n                                   exit={{ height: 0, opacity: 0 }}\r\n                                   transition={{ duration: 0.2 }}\r\n                                 >\r\n-                                  <CardContent className=\"py-0 pl-4\">\r\n-                                    {subtopics\r\n-                                      .filter(subtopic => subtopic.topic_id === topic.id)\r\n-                                      .map((subtopic: SubTopic) => (\r\n-                                        <div \r\n-                                          key={subtopic.id} \r\n-                                          className={cn(\r\n-                                            \"mb-3 last:mb-0 border-l-2 pl-4\",\r\n-                                            expandedSubtopic === subtopic.id ? \"border-l-primary\" : \"border-l-muted\"\r\n-                                          )}\r\n-                                        >\r\n-                                          <div \r\n+                                  <CardContent className=\"pt-0 pb-2\">\r\n+                                    <div className=\"pl-4 space-y-2\">\r\n+                                      {isLoadingSubtopics ? (\r\n+                                        <div className=\"flex items-center justify-center py-4\">\r\n+                                          <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\r\n+                                        </div>\r\n+                                      ) : (\r\n+                                        subtopics\r\n+                                          .filter(subtopic => subtopic.topic_id === topic.id)\r\n+                                          .map((subtopic: SubTopic) => (\r\n+                                            <div \r\n+                                              key={subtopic.id}\r\n+                                              className={cn(\r\n+                                                \"rounded-lg border transition-colors\",\r\n+                                                expandedSubtopic === subtopic.id \r\n+                                                  ? \"bg-accent/10 border-primary/20\" \r\n+                                                  : \"hover:bg-accent/5\"\r\n+                                              )}\r\n+                                            >\r\n+                                              <div \r\n+                                                className=\"p-3 cursor-pointer\"\r\n                                             className=\"flex items-center justify-between py-2 cursor-pointer hover:bg-accent/50 rounded-md px-2\"\r\n                                             onClick={() => handleSubtopicExpand(subtopic.id || '')}\r\n                                           >\r\n                                             <div className=\"flex items-center gap-2\">\r\n"
                },
                {
                    "date": 1739800655132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2144,8 +2144,48 @@\n                                               )}\r\n                                             >\r\n                                               <div \r\n                                                 className=\"p-3 cursor-pointer\"\r\n+                                                onClick={() => handleSubtopicExpand(subtopic.id || '')}\r\n+                                              >\r\n+                                                <div className=\"flex items-center justify-between py-2 cursor-pointer hover:bg-accent/50 rounded-md px-2\">\r\n+                                                  <div className=\"flex items-center gap-2\">\r\n+                                                    <BookOpen className=\"h-4 w-4 text-primary\" />\r\n+                                                    <span className=\"text-sm font-medium\">{subtopic.name}</span>\r\n+                                                    <Badge variant=\"outline\" className=\"ml-2\">\r\n+                                                      {lessons.filter(l => l.subtopic_id === subtopic.id).length} Lessons\r\n+                                                    </Badge>\r\n+                                                  </div>\r\n+                                                  <div className=\"flex items-center gap-2\">\r\n+                                                    <AlertDialog>\r\n+                                                      <AlertDialogTrigger asChild>\r\n+                                                        <Button \r\n+                                                          variant=\"ghost\" \r\n+                                                          size=\"sm\" \r\n+                                                          className=\"hover:bg-destructive/10 hover:text-destructive\"\r\n+                                                          onClick={(e) => e.stopPropagation()}\r\n+                                                        >\r\n+                                                          <Trash className=\"h-4 w-4\" />\r\n+                                                        </Button>\r\n+                                                      </AlertDialogTrigger>\r\n+                                                      {/* Alert Dialog Content */}\r\n+                                                    </AlertDialog>\r\n+                                                    <ChevronDown className={cn(\r\n+                                                      \"h-4 w-4 transition-transform duration-200\",\r\n+                                                      expandedSubtopic === subtopic.id ? \"rotate-0\" : \"-rotate-90\"\r\n+                                                    )} />\r\n+                                  <CardContent className=\"py-0 pl-4\">\r\n+                                    {subtopics\r\n+                                      .filter(subtopic => subtopic.topic_id === topic.id)\r\n+                                      .map((subtopic: SubTopic) => (\r\n+                                        <div \r\n+                                          key={subtopic.id} \r\n+                                          className={cn(\r\n+                                            \"mb-3 last:mb-0 border-l-2 pl-4\",\r\n+                                            expandedSubtopic === subtopic.id ? \"border-l-primary\" : \"border-l-muted\"\r\n+                                          )}\r\n+                                        >\r\n+                                          <div \r\n                                             className=\"flex items-center justify-between py-2 cursor-pointer hover:bg-accent/50 rounded-md px-2\"\r\n                                             onClick={() => handleSubtopicExpand(subtopic.id || '')}\r\n                                           >\r\n                                             <div className=\"flex items-center gap-2\">\r\n"
                },
                {
                    "date": 1739800670878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2172,112 +2172,75 @@\n                                                     <ChevronDown className={cn(\r\n                                                       \"h-4 w-4 transition-transform duration-200\",\r\n                                                       expandedSubtopic === subtopic.id ? \"rotate-0\" : \"-rotate-90\"\r\n                                                     )} />\r\n-                                  <CardContent className=\"py-0 pl-4\">\r\n-                                    {subtopics\r\n-                                      .filter(subtopic => subtopic.topic_id === topic.id)\r\n-                                      .map((subtopic: SubTopic) => (\r\n-                                        <div \r\n-                                          key={subtopic.id} \r\n-                                          className={cn(\r\n-                                            \"mb-3 last:mb-0 border-l-2 pl-4\",\r\n-                                            expandedSubtopic === subtopic.id ? \"border-l-primary\" : \"border-l-muted\"\r\n-                                          )}\r\n-                                        >\r\n-                                          <div \r\n-                                            className=\"flex items-center justify-between py-2 cursor-pointer hover:bg-accent/50 rounded-md px-2\"\r\n-                                            onClick={() => handleSubtopicExpand(subtopic.id || '')}\r\n-                                          >\r\n-                                            <div className=\"flex items-center gap-2\">\r\n-                                              <BookOpen className=\"h-4 w-4 text-primary\" />\r\n-                                              <span className=\"text-sm font-medium\">{subtopic.name}</span>\r\n-                                              <Badge variant=\"outline\" className=\"ml-2\">\r\n-                                                {lessons.filter(l => l.subtopic_id === subtopic.id).length} Lessons\r\n-                                              </Badge>\r\n-                                            </div>\r\n-                                            <div className=\"flex items-center gap-2\">\r\n-                                              <AlertDialog>\r\n-                                                <AlertDialogTrigger asChild>\r\n-                                                  <Button \r\n-                                                    variant=\"ghost\" \r\n-                                                    size=\"sm\" \r\n-                                                    className=\"hover:bg-destructive/10 hover:text-destructive\"\r\n-                                                    onClick={(e) => e.stopPropagation()}\r\n-                                                  >\r\n-                                                    <Trash className=\"h-4 w-4\" />\r\n-                                                  </Button>\r\n-                                                </AlertDialogTrigger>\r\n-                                                {/* Alert Dialog Content */}\r\n-                                              </AlertDialog>\r\n-                                              <ChevronDown className={cn(\r\n-                                                \"h-4 w-4 transition-transform duration-200\",\r\n-                                                expandedSubtopic === subtopic.id ? \"rotate-0\" : \"-rotate-90\"\r\n-                                              )} />\r\n-                                            </div>\r\n-                                          </div>\r\n+                                                  </div>\r\n+                                                </div>\r\n \r\n-                                          <AnimatePresence>\r\n-                                            {expandedSubtopic === subtopic.id && (\r\n-                                              <motion.div\r\n-                                                initial={{ height: 0, opacity: 0 }}\r\n-                                                animate={{ height: \"auto\", opacity: 1 }}\r\n-                                                exit={{ height: 0, opacity: 0 }}\r\n-                                                transition={{ duration: 0.2 }}\r\n-                                              >\r\n-                                                <div className=\"pl-4 space-y-2 mt-2\">\r\n-                                                  {lessons\r\n-                                                    .filter(lesson => lesson.subtopic_id === subtopic.id)\r\n-                                                    .map((lesson: Lesson) => (\r\n-                                                      <div\r\n-                                                        key={lesson.id}\r\n-                                                        className={cn(\r\n-                                                          \"flex items-center justify-between gap-2 py-2 px-3 rounded-md transition-colors\",\r\n-                                                          \"hover:bg-accent cursor-pointer\",\r\n-                                                          currentLessonId === lesson.id && \"bg-accent/50 border-primary\"\r\n-                                                        )}\r\n-                                                        onClick={() => {\r\n-                                                          const lessonId = lesson.id || '';\r\n-                                                          const topicId = topic.id || '';\r\n-                                                          const subtopicId = subtopic.id || '';\r\n-                                                          \r\n-                                                          setCurrentLessonId(lessonId);\r\n-                                                          setSelectedTopicId(topicId);\r\n-                                                          setSelectedSubtopicId(subtopicId);\r\n-                                                        }}\r\n-                                                      >\r\n-                                                        <div className=\"flex items-center gap-2 flex-1\">\r\n-                                                          <div className=\"flex h-8 w-8 items-center justify-center rounded-md border bg-background\">\r\n-                                                            <BookOpen className=\"h-4 w-4 text-primary\" />\r\n-                                                          </div>\r\n-                                                          <div className=\"flex flex-col\">\r\n-                                                            <span className=\"text-sm font-medium\">{lesson.title}</span>\r\n-                                                            <span className=\"text-xs text-muted-foreground\">\r\n-                                                              {lesson.duration} mins • {lesson.questions?.length || 0} Questions\r\n-                                                            </span>\r\n-                                                          </div>\r\n+                                                <AnimatePresence>\r\n+                                                  {expandedSubtopic === subtopic.id && (\r\n+                                                    <motion.div\r\n+                                                      initial={{ height: 0, opacity: 0 }}\r\n+                                                      animate={{ height: \"auto\", opacity: 1 }}\r\n+                                                      exit={{ height: 0, opacity: 0 }}\r\n+                                                      transition={{ duration: 0.2 }}\r\n+                                                    >\r\n+                                                      <div className=\"px-3 pb-3\">\r\n+                                                        <div className=\"space-y-2\">\r\n+                                                          {isLoadingLessons ? (\r\n+                                                            <div className=\"flex items-center justify-center py-4\">\r\n+                                                              <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\r\n+                                                            </div>\r\n+                                                          ) : (\r\n+                                                            lessons\r\n+                                                              .filter(lesson => lesson.subtopic_id === subtopic.id)\r\n+                                                              .map((lesson: Lesson) => (\r\n+                                                                <div\r\n+                                                                  key={lesson.id}\r\n+                                                                  onClick={() => handleLessonSelect(lesson)}\r\n+                                                                  className={cn(\r\n+                                                                    \"flex items-center gap-3 p-2 rounded-md cursor-pointer transition-colors\",\r\n+                                                                    \"hover:bg-accent\",\r\n+                                                                    currentLessonId === lesson.id && \"bg-accent\"\r\n+                                                                  )}\r\n+                                                                >\r\n+                                                                  <div className=\"flex items-center gap-2 flex-1\">\r\n+                                                                    <div className=\"flex h-8 w-8 items-center justify-center rounded-md border bg-background\">\r\n+                                                                      <BookOpen className=\"h-4 w-4 text-primary\" />\r\n+                                                                    </div>\r\n+                                                                    <div className=\"flex flex-col\">\r\n+                                                                      <span className=\"text-sm font-medium\">{lesson.title}</span>\r\n+                                                                      <span className=\"text-xs text-muted-foreground\">\r\n+                                                                        {lesson.duration} mins • {lesson.questions?.length || 0} Questions\r\n+                                                                      </span>\r\n+                                                                    </div>\r\n+                                                                  </div>\r\n+                                                                  <AlertDialog>\r\n+                                                                    <AlertDialogTrigger asChild>\r\n+                                                                      <Button \r\n+                                                                        variant=\"ghost\" \r\n+                                                                        size=\"sm\" \r\n+                                                                        className=\"hover:bg-destructive/10 hover:text-destructive\"\r\n+                                                                        onClick={(e) => e.stopPropagation()}\r\n+                                                                      >\r\n+                                                                        <Trash className=\"h-4 w-4\" />\r\n+                                                                      </Button>\r\n+                                                                    </AlertDialogTrigger>\r\n+                                                                    {/* Alert Dialog Content */}\r\n+                                                                  </AlertDialog>\r\n+                                                                </div>\r\n+                                                              ))\r\n+                                                          )}\r\n                                                         </div>\r\n-                                                        <AlertDialog>\r\n-                                                          <AlertDialogTrigger asChild>\r\n-                                                            <Button \r\n-                                                              variant=\"ghost\" \r\n-                                                              size=\"sm\" \r\n-                                                              className=\"hover:bg-destructive/10 hover:text-destructive\"\r\n-                                                              onClick={(e) => e.stopPropagation()}\r\n-                                                            >\r\n-                                                              <Trash className=\"h-4 w-4\" />\r\n-                                                            </Button>\r\n-                                                          </AlertDialogTrigger>\r\n-                                                          {/* Alert Dialog Content */}\r\n-                                                        </AlertDialog>\r\n                                                       </div>\r\n-                                                    ))}\r\n-                                                </div>\r\n-                                              </motion.div>\r\n-                                            )}\r\n-                                          </AnimatePresence>\r\n-                                        </div>\r\n-                                      ))}\r\n+                                                    </motion.div>\r\n+                                                  )}\r\n+                                                </AnimatePresence>\r\n+                                              </div>\r\n+                                            </div>\r\n+                                          ))\r\n+                                      )}\r\n+                                    </div>\r\n                                   </CardContent>\r\n                                 </motion.div>\r\n                               )}\r\n                             </AnimatePresence>\r\n"
                },
                {
                    "date": 1739802181456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import { useState, useCallback, useEffect, useRef } from 'react';\r\n import { toast } from 'sonner';\r\n import { Toaster } from 'sonner';\r\n import Link from 'next/link';\r\n-import {  Activity as ActivityIcon,  ArrowLeft,  BookOpen,  ChevronDown,  ChevronRight,  Check,  Edit,  Eye,  EyeOff,  HelpCircle,  Layers,  List,  MessageSquare,  Plus,  Save,  Trash as Trash2, X, Pencil, Lock, Unlock, RefreshCw, Clock } from 'lucide-react';\r\n+import {  Activity as ActivityIcon,  ArrowLeft,  BookOpen,  ChevronDown,  ChevronRight,  Check,  Edit,  Eye,  EyeOff,  HelpCircle,  Layers,  List,  MessageSquare,  Plus,  Save,  Trash as Trash2, X, Pencil, Lock, Unlock, RefreshCw, Clock, Bell, Moon, GraduationCap, MoreHorizontal, Loader2 } from 'lucide-react';\r\n import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\n import { Badge } from '@/components/ui/badge';\r\n import { Button } from '@/components/ui/button';\r\n import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\n"
                },
                {
                    "date": 1739802645141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1172,20 +1172,21 @@\n     setSelectedSubtopic(value);\r\n     setCurrentLessonId(null);\r\n   };\r\n \r\n-  const handleLessonSelect = (lesson: Lesson) => {\r\n-    const lessonId = lesson.id || '';\r\n-    setCurrentLessonId(lessonId);\r\n-    \r\n-    // Load lesson content\r\n-    const loadLessonContent = async () => {\r\n-      try {\r\n-        const { data: lessonData, error } = await supabase\r\n-          .from('lessons')\r\n-          .select('*, questions(*), activities(*)')\r\n-          .eq('id', lessonId)\r\n-          .single();\r\n+  const handleLessonSelect = async (lessonId: string) => {\r\n+    try {\r\n+      // Lock sidebar during selection\r\n+      setIsSidebarLocked(true);\r\n+      setIsSidebarCollapsed(false);\r\n+      setCurrentLessonId(lessonId);\r\n+      \r\n+      // 1. Fetch lesson data\r\n+      const { data: lessonData, error: lessonError } = await supabase\r\n+        .from('lessons')\r\n+        .select('*')\r\n+        .eq('id', lessonId)\r\n+        .single();\r\n \r\n         if (error) throw error;\r\n         \r\n         if (lessonData) {\r\n"
                },
                {
                    "date": 1739802674886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1186,14 +1186,47 @@\n         .select('*')\r\n         .eq('id', lessonId)\r\n         .single();\r\n \r\n-        if (error) throw error;\r\n-        \r\n-        if (lessonData) {\r\n-          setLessonTitle(lessonData.title);\r\n-          setQuestions(lessonData.questions || []);\r\n-          setActivities(lessonData.activities || []);\r\n+      if (lessonError) throw lessonError;\r\n+\r\n+      // 2. Fetch questions with exercise prompts\r\n+      const { data: questionsData, error: questionsError } = await supabase\r\n+        .from('questions')\r\n+        .select(`\r\n+          *,\r\n+          exercise_prompts (*)\r\n+        `)\r\n+        .eq('lesson_id', lessonId);\r\n+\r\n+      if (questionsError) throw questionsError;\r\n+\r\n+      // 3. Fetch activities - removed order_index\r\n+      const { data: activitiesData, error: activitiesError } = await supabase\r\n+        .from('activities')\r\n+        .select('*')\r\n+        .eq('lesson_id', lessonId);\r\n+\r\n+      if (activitiesError) throw activitiesError;\r\n+\r\n+      // Format questions with their exercise prompts\r\n+      const formattedQuestions = questionsData?.map(q => ({\r\n+        ...q,\r\n+        data: q.data || {},\r\n+        exercisePrompts: q.exercise_prompts || []\r\n+      })) || [];\r\n+\r\n+      // Set all states\r\n+      setLessonTitle(lessonData.title || '');\r\n+      setLessonContent(lessonData.content || '');\r\n+      setQuestions(formattedQuestions);\r\n+      setActivities(activitiesData || []);\r\n+\r\n+      // After successful load, unlock sidebar and allow collapse\r\n+      setTimeout(() => {\r\n+        setIsSidebarLocked(false);\r\n+        if (!isSidebarLocked) {\r\n+          setIsSidebarCollapsed(true);\r\n         }\r\n       } catch (error) {\r\n         console.error('Error loading lesson:', error);\r\n         toast.error('Failed to load lesson content');\r\n"
                },
                {
                    "date": 1739802687710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1226,15 +1226,22 @@\n         setIsSidebarLocked(false);\r\n         if (!isSidebarLocked) {\r\n           setIsSidebarCollapsed(true);\r\n         }\r\n-      } catch (error) {\r\n-        console.error('Error loading lesson:', error);\r\n-        toast.error('Failed to load lesson content');\r\n-      }\r\n-    };\r\n+      }, 300);\r\n \r\n-    loadLessonContent();\r\n+    } catch (error) {\r\n+      console.error('Error loading lesson:', error);\r\n+      toast.error('Failed to load lesson');\r\n+      // Reset states on error\r\n+      setLessonTitle('');\r\n+      setLessonContent('');\r\n+      setQuestions([]);\r\n+      setActivities([]);\r\n+    }\r\n+    if (!isSidebarLocked) {\r\n+      setIsSidebarCollapsed(true);\r\n+    }\r\n   };\r\n \r\n   // Update the expansion handlers\r\n   const handleTopicExpand = async (topicId: string) => {\r\n"
                },
                {
                    "date": 1739804266312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2236,9 +2236,9 @@\n                                                               .filter(lesson => lesson.subtopic_id === subtopic.id)\r\n                                                               .map((lesson: Lesson) => (\r\n                                                                 <div\r\n                                                                   key={lesson.id}\r\n-                                                                  onClick={() => handleLessonSelect(lesson)}\r\n+                                                                  onClick={() => handleLessonSelect(lesson.id || '')}\r\n                                                                   className={cn(\r\n                                                                     \"flex items-center gap-3 p-2 rounded-md cursor-pointer transition-colors\",\r\n                                                                     \"hover:bg-accent\",\r\n                                                                     currentLessonId === lesson.id && \"bg-accent\"\r\n"
                },
                {
                    "date": 1739804278481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2260,9 +2260,9 @@\n                                                                       <Button \r\n                                                                         variant=\"ghost\" \r\n                                                                         size=\"sm\" \r\n                                                                         className=\"hover:bg-destructive/10 hover:text-destructive\"\r\n-                                                                        onClick={(e) => e.stopPropagation()}\r\n+                                                                        onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}\r\n                                                                       >\r\n                                                                         <Trash className=\"h-4 w-4\" />\r\n                                                                       </Button>\r\n                                                                     </AlertDialogTrigger>\r\n"
                },
                {
                    "date": 1739804360912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2202,9 +2202,9 @@\n                                                         <Button \r\n                                                           variant=\"ghost\" \r\n                                                           size=\"sm\" \r\n                                                           className=\"hover:bg-destructive/10 hover:text-destructive\"\r\n-                                                          onClick={(e) => e.stopPropagation()}\r\n+                                                          onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}\r\n                                                         >\r\n                                                           <Trash className=\"h-4 w-4\" />\r\n                                                         </Button>\r\n                                                       </AlertDialogTrigger>\r\n"
                },
                {
                    "date": 1739804404931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1825,9 +1825,9 @@\n           label: \"Close\",\r\n           onClick: () => toast.dismiss()\r\n         },\r\n       });\r\n-      await handleLessonSelect(selectedLesson);\r\n+      await handleLessonSelect(currentLessonId);\r\n       toast.success('Content refreshed', {\r\n         action: {\r\n           label: \"Close\",\r\n           onClick: () => toast.dismiss()\r\n"
                },
                {
                    "date": 1739804745797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2141,9 +2141,9 @@\n                                       <Button \r\n                                         variant=\"ghost\" \r\n                                         size=\"sm\" \r\n                                         className=\"hover:bg-destructive/10 hover:text-destructive\"\r\n-                                        onClick={(e) => e.stopPropagation()}\r\n+                                        onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}\r\n                                       >\r\n                                         <Trash className=\"h-4 w-4\" />\r\n                                       </Button>\r\n                                     </AlertDialogTrigger>\r\n"
                },
                {
                    "date": 1739824970024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2783,9 +2783,9 @@\n                                 )}\r\n                                   </div>\r\n                                       {expandedQuestion !== index && (\r\n                                         <div className=\"text-sm text-muted-foreground truncate\">\r\n-                                          {question.metadata?.prompt || 'No question text'}\r\n+                                          {question.data?.prompt || 'No question text'}\r\n                                         </div>\r\n                                       )}\r\n                                     </div>\r\n                                     <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n"
                },
                {
                    "date": 1739825002953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2783,9 +2783,9 @@\n                                 )}\r\n                                   </div>\r\n                                       {expandedQuestion !== index && (\r\n                                         <div className=\"text-sm text-muted-foreground truncate\">\r\n-                                          {question.data?.prompt || 'No question text'}\r\n+                                          {question.data?.prompt || '}\r\n                                         </div>\r\n                                       )}\r\n                                     </div>\r\n                                     <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n"
                },
                {
                    "date": 1739825054150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2783,9 +2783,9 @@\n                                 )}\r\n                                   </div>\r\n                                       {expandedQuestion !== index && (\r\n                                         <div className=\"text-sm text-muted-foreground truncate\">\r\n-                                          {question.data?.prompt || '}\r\n+                                          {question.data?.prompt || 'No question text'}\r\n                                         </div>\r\n                                       )}\r\n                                     </div>\r\n                                     <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n"
                },
                {
                    "date": 1739825405880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2783,9 +2783,9 @@\n                                 )}\r\n                                   </div>\r\n                                       {expandedQuestion !== index && (\r\n                                         <div className=\"text-sm text-muted-foreground truncate\">\r\n-                                          {question.data?.prompt || 'No question text'}\r\n+                                          {question.data?.prompt || 'No question texts'}\r\n                                         </div>\r\n                                       )}\r\n                                     </div>\r\n                                     <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n"
                },
                {
                    "date": 1739825534052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2815,9 +2815,9 @@\n                                         lesson_id: currentLessonId || '',\r\n                                         type: isValidQuestionType(question.type) ? question.type : 'speaking',\r\n                                         data: {\r\n                                           prompt: question.data?.prompt ?? '',\r\n-                                          teacherScript: question.data?.teacherScript ?? '',\r\n+                                          teacherScript: question.data?.teacherScript  '',\r\n                                           followup_prompt: question.data?.followup_prompt ?? [],\r\n                                           sampleAnswer: question.data?.sampleAnswer ?? '',\r\n                                           answer: question.data?.answer ?? ''\r\n                                         } \r\n"
                },
                {
                    "date": 1739825540011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2815,9 +2815,9 @@\n                                         lesson_id: currentLessonId || '',\r\n                                         type: isValidQuestionType(question.type) ? question.type : 'speaking',\r\n                                         data: {\r\n                                           prompt: question.data?.prompt ?? '',\r\n-                                          teacherScript: question.data?.teacherScript  '',\r\n+                                          teacherScript: question.data?.teacherScript,\r\n                                           followup_prompt: question.data?.followup_prompt ?? [],\r\n                                           sampleAnswer: question.data?.sampleAnswer ?? '',\r\n                                           answer: question.data?.answer ?? ''\r\n                                         } \r\n"
                },
                {
                    "date": 1739865879116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2783,9 +2783,9 @@\n                                 )}\r\n                                   </div>\r\n                                       {expandedQuestion !== index && (\r\n                                         <div className=\"text-sm text-muted-foreground truncate\">\r\n-                                          {question.data?.prompt || 'No question texts'}\r\n+                                          {question.data?.title || 'No question texts'}\r\n                                         </div>\r\n                                       )}\r\n                                     </div>\r\n                                     <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n"
                },
                {
                    "date": 1739865892188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2783,9 +2783,9 @@\n                                 )}\r\n                                   </div>\r\n                                       {expandedQuestion !== index && (\r\n                                         <div className=\"text-sm text-muted-foreground truncate\">\r\n-                                          {question.data?.title || 'No question texts'}\r\n+                                          {question.data?.title || 'No question texts'} \r\n                                         </div>\r\n                                       )}\r\n                                     </div>\r\n                                     <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n"
                },
                {
                    "date": 1739865898651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2783,9 +2783,9 @@\n                                 )}\r\n                                   </div>\r\n                                       {expandedQuestion !== index && (\r\n                                         <div className=\"text-sm text-muted-foreground truncate\">\r\n-                                          {question.data?.title || 'No question texts'} \r\n+                                          {question.data?.title || 'No question texts'} - {question.data?.prompt || 'No question texts'}\r\n                                         </div>\r\n                                       )}\r\n                                     </div>\r\n                                     <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n"
                },
                {
                    "date": 1739865908608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2783,9 +2783,9 @@\n                                 )}\r\n                                   </div>\r\n                                       {expandedQuestion !== index && (\r\n                                         <div className=\"text-sm text-muted-foreground truncate\">\r\n-                                          {question.data?.title || 'No question texts'} - {question.data?.prompt || 'No question texts'}\r\n+                                          {question.data?.title || 'No question texts'} - {question.data?.content || 'No question texts'}\r\n                                         </div>\r\n                                       )}\r\n                                     </div>\r\n                                     <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n"
                },
                {
                    "date": 1739865930002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2783,9 +2783,9 @@\n                                 )}\r\n                                   </div>\r\n                                       {expandedQuestion !== index && (\r\n                                         <div className=\"text-sm text-muted-foreground truncate\">\r\n-                                          {question.data?.title || 'No question texts'} - {question.data?.content || 'No question texts'}\r\n+                                          {question.data?.title || 'No question text'} - {question.data?.content || 'No question texts'}\r\n                                         </div>\r\n                                       )}\r\n                                     </div>\r\n                                     <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n"
                },
                {
                    "date": 1739865970683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2815,9 +2815,9 @@\n                                         lesson_id: currentLessonId || '',\r\n                                         type: isValidQuestionType(question.type) ? question.type : 'speaking',\r\n                                         data: {\r\n                                           prompt: question.data?.prompt ?? '',\r\n-                                          teacherScript: question.data?.teacherScript,\r\n+                                          teacherScript: question.data?.teacherScript ,\r\n                                           followup_prompt: question.data?.followup_prompt ?? [],\r\n                                           sampleAnswer: question.data?.sampleAnswer ?? '',\r\n                                           answer: question.data?.answer ?? ''\r\n                                         } \r\n"
                },
                {
                    "date": 1739866282017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2101,9 +2101,9 @@\n                       <Button \r\n                         variant=\"outline\" \r\n                         size=\"sm\" \r\n                         className=\"w-full gap-2\"\r\n-                        onClick={() => setModalState({ ...modalState, showAddGrade: true })}\r\n+                        onClick={() => setModalState({ ...modalState, showAddGrade: false })}\r\n                       >\r\n                         <Plus className=\"h-4 w-4\" />\r\n                         Add New Grade\r\n                       </Button>\r\n@@ -2815,9 +2815,9 @@\n                                         lesson_id: currentLessonId || '',\r\n                                         type: isValidQuestionType(question.type) ? question.type : 'speaking',\r\n                                         data: {\r\n                                           prompt: question.data?.prompt ?? '',\r\n-                                          teacherScript: question.data?.teacherScript ,\r\n+                                          teacherScript: question.data?.teacherScript ?? '',\r\n                                           followup_prompt: question.data?.followup_prompt ?? [],\r\n                                           sampleAnswer: question.data?.sampleAnswer ?? '',\r\n                                           answer: question.data?.answer ?? ''\r\n                                         } \r\n"
                },
                {
                    "date": 1739866397268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1710,9 +1710,9 @@\n     }\r\n   }, [currentLessonId, selectedGradeId, selectedTopicId, selectedSubtopicId]);\r\n \r\n   // Add individual save handlers\r\n-  // const handleSaveQuestion = async (question: Question, index: number) => {\r\n+   const handleSaveQuestion = async (question: Question, index: number) => {\r\n   //   try {\r\n   //     // Update status to saving\r\n   //     setQuestionSaveStatuses(prev => [\r\n   //       ...prev.filter(s => s.id !== question.id),\r\n"
                },
                {
                    "date": 1739866521108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1442,8 +1442,9 @@\n       const { data: newLesson, error: lessonError } = await supabase\r\n         .from('lessons')\r\n         .insert({\r\n           title: newItemData.name,\r\n+          \r\n           subtopic_id: selectedSubtopicId,\r\n           content: '', // Empty rich text content initially\r\n           status: 'draft'\r\n         })\r\n@@ -1710,9 +1711,9 @@\n     }\r\n   }, [currentLessonId, selectedGradeId, selectedTopicId, selectedSubtopicId]);\r\n \r\n   // Add individual save handlers\r\n-   const handleSaveQuestion = async (question: Question, index: number) => {\r\n+  // const handleSaveQuestion = async (question: Question, index: number) => {\r\n   //   try {\r\n   //     // Update status to saving\r\n   //     setQuestionSaveStatuses(prev => [\r\n   //       ...prev.filter(s => s.id !== question.id),\r\n"
                },
                {
                    "date": 1739866528042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1442,8 +1442,9 @@\n       const { data: newLesson, error: lessonError } = await supabase\r\n         .from('lessons')\r\n         .insert({\r\n           title: newItemData.name,\r\n+          duration: 0,\r\n           \r\n           subtopic_id: selectedSubtopicId,\r\n           content: '', // Empty rich text content initially\r\n           status: 'draft'\r\n"
                },
                {
                    "date": 1739866534937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1443,9 +1443,9 @@\n         .from('lessons')\r\n         .insert({\r\n           title: newItemData.name,\r\n           duration: 0,\r\n-          \r\n+          topic_id: selectedTopicId,\r\n           subtopic_id: selectedSubtopicId,\r\n           content: '', // Empty rich text content initially\r\n           status: 'draft'\r\n         })\r\n"
                },
                {
                    "date": 1739867178809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2785,9 +2785,9 @@\n                                 )}\r\n                                   </div>\r\n                                       {expandedQuestion !== index && (\r\n                                         <div className=\"text-sm text-muted-foreground truncate\">\r\n-                                          {question.data?.title || 'No question text'} - {question.data?.content || 'No question texts'}\r\n+                                          {q.data?.title || 'No question text'} - {question.data?.content || 'No question texts'}\r\n                                         </div>\r\n                                       )}\r\n                                     </div>\r\n                                     <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n"
                },
                {
                    "date": 1739867190534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2785,9 +2785,9 @@\n                                 )}\r\n                                   </div>\r\n                                       {expandedQuestion !== index && (\r\n                                         <div className=\"text-sm text-muted-foreground truncate\">\r\n-                                          {q.data?.title || 'No question text'} - {question.data?.content || 'No question texts'}\r\n+                                          {question.data?.title || 'No question text'} - {question.data?.content || 'No question texts'}\r\n                                         </div>\r\n                                       )}\r\n                                     </div>\r\n                                     <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n"
                },
                {
                    "date": 1739867317313,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2785,9 +2785,9 @@\n                                 )}\r\n                                   </div>\r\n                                       {expandedQuestion !== index && (\r\n                                         <div className=\"text-sm text-muted-foreground truncate\">\r\n-                                          {question.data?.title || 'No question text'} - {question.data?.content || 'No question texts'}\r\n+                                          {question.title || 'No question text'} - {question.data?.content || 'No question texts'}\r\n                                         </div>\r\n                                       )}\r\n                                     </div>\r\n                                     <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n"
                },
                {
                    "date": 1739867325339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2785,9 +2785,9 @@\n                                 )}\r\n                                   </div>\r\n                                       {expandedQuestion !== index && (\r\n                                         <div className=\"text-sm text-muted-foreground truncate\">\r\n-                                          {question.title || 'No question text'} - {question.data?.content || 'No question texts'}\r\n+                                          {question.title || 'No question text'} - {question.prompt || 'No question texts'}\r\n                                         </div>\r\n                                       )}\r\n                                     </div>\r\n                                     <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n"
                },
                {
                    "date": 1739867482899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2785,9 +2785,9 @@\n                                 )}\r\n                                   </div>\r\n                                       {expandedQuestion !== index && (\r\n                                         <div className=\"text-sm text-muted-foreground truncate\">\r\n-                                          {question.title || 'No question text'} - {question.prompt || 'No question texts'}\r\n+                                          {question.title || 'No question text'} - {question.content || 'No question texts'}\r\n                                         </div>\r\n                                       )}\r\n                                     </div>\r\n                                     <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n"
                },
                {
                    "date": 1739868075478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2785,9 +2785,9 @@\n                                 )}\r\n                                   </div>\r\n                                       {expandedQuestion !== index && (\r\n                                         <div className=\"text-sm text-muted-foreground truncate\">\r\n-                                          {question.title || 'No question text'} - {question.content || 'No question texts'}\r\n+                                          {question.title || 'No question text'} - {question.data.content || 'No question texts'}\r\n                                         </div>\r\n                                       )}\r\n                                     </div>\r\n                                     <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n"
                },
                {
                    "date": 1739868408612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2785,9 +2785,9 @@\n                                 )}\r\n                                   </div>\r\n                                       {expandedQuestion !== index && (\r\n                                         <div className=\"text-sm text-muted-foreground truncate\">\r\n-                                          {question.title || 'No question text'} - {question.data.content || 'No question texts'}\r\n+                                          {question.title || 'No question text'} - {question.content || 'No question texts'}\r\n                                         </div>\r\n                                       )}\r\n                                     </div>\r\n                                     <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n"
                },
                {
                    "date": 1739868427653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -217,8 +217,9 @@\n   id: string;\r\n   type: string;\r\n   lesson_id: string;\r\n   title: string;\r\n+  content: string;\r\n   metadata: Record<string, any>;\r\n   data: Record<string, any>; // This allows dynamic field access\r\n   exercisePrompts: ExercisePrompt[];\r\n   isDraft?: boolean;\r\n"
                },
                {
                    "date": 1739868510461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -395,8 +395,9 @@\n       id: crypto.randomUUID(),\r\n       type: selectedQuestionType,\r\n       data: {},\r\n       title: 'New Question',\r\n+      \r\n       lesson_id: currentLessonId || '',\r\n       metadata: {},\r\n       // data: {\r\n       //   ...defaultData,\r\n"
                },
                {
                    "date": 1739868642214,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -395,9 +395,9 @@\n       id: crypto.randomUUID(),\r\n       type: selectedQuestionType,\r\n       data: {},\r\n       title: 'New Question',\r\n-      \r\n+      content: '',\r\n       lesson_id: currentLessonId || '',\r\n       metadata: {},\r\n       // data: {\r\n       //   ...defaultData,\r\n@@ -2834,9 +2834,9 @@\n                                             prompt: updatedQuestion.data?.prompt ?? '',\r\n                                             teacherScript: updatedQuestion.data?.teacherScript ?? '',\r\n                                             followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\r\n                                             sampleAnswer: updatedQuestion.data?.sampleAnswer ?? '',\r\n-                                            answer: updatedQuestion.data?.answer ?? ''\r\n+                                            answer: updatedQuestion.data?.answer ?? '',\r\n                                           }\r\n                                         });\r\n                                       }}\r\n                                       onRemove={handleRemoveQuestion}\r\n"
                },
                {
                    "date": 1739868651171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2835,8 +2835,9 @@\n                                             teacherScript: updatedQuestion.data?.teacherScript ?? '',\r\n                                             followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\r\n                                             sampleAnswer: updatedQuestion.data?.sampleAnswer ?? '',\r\n                                             answer: updatedQuestion.data?.answer ?? '',\r\n+                                            content: updatedQuestion.content ?? ''  // Add default value\r\n                                           }\r\n                                         });\r\n                                       }}\r\n                                       onRemove={handleRemoveQuestion}\r\n"
                },
                {
                    "date": 1739868688532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2835,9 +2835,9 @@\n                                             teacherScript: updatedQuestion.data?.teacherScript ?? '',\r\n                                             followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\r\n                                             sampleAnswer: updatedQuestion.data?.sampleAnswer ?? '',\r\n                                             answer: updatedQuestion.data?.answer ?? '',\r\n-                                            content: updatedQuestion.content ?? ''  // Add default value\r\n+                                              // Add default value\r\n                                           }\r\n                                         });\r\n                                       }}\r\n                                       onRemove={handleRemoveQuestion}\r\n"
                },
                {
                    "date": 1739868696766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2835,9 +2835,9 @@\n                                             teacherScript: updatedQuestion.data?.teacherScript ?? '',\r\n                                             followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\r\n                                             sampleAnswer: updatedQuestion.data?.sampleAnswer ?? '',\r\n                                             answer: updatedQuestion.data?.answer ?? '',\r\n-                                              // Add default value\r\n+                                            \r\n                                           }\r\n                                         });\r\n                                       }}\r\n                                       onRemove={handleRemoveQuestion}\r\n"
                },
                {
                    "date": 1739868702898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2835,9 +2835,9 @@\n                                             teacherScript: updatedQuestion.data?.teacherScript ?? '',\r\n                                             followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\r\n                                             sampleAnswer: updatedQuestion.data?.sampleAnswer ?? '',\r\n                                             answer: updatedQuestion.data?.answer ?? '',\r\n-                                            \r\n+                                            content: updatedQuestion.content ?? ''\r\n                                           }\r\n                                         });\r\n                                       }}\r\n                                       onRemove={handleRemoveQuestion}\r\n"
                },
                {
                    "date": 1739868717761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2835,10 +2835,9 @@\n                                             teacherScript: updatedQuestion.data?.teacherScript ?? '',\r\n                                             followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\r\n                                             sampleAnswer: updatedQuestion.data?.sampleAnswer ?? '',\r\n                                             answer: updatedQuestion.data?.answer ?? '',\r\n-                                            content: updatedQuestion.content ?? ''\r\n-                                          }\r\n+                                            }\r\n                                         });\r\n                                       }}\r\n                                       onRemove={handleRemoveQuestion}\r\n                                       onAddExercisePrompt={handleAddExercisePrompt}\r\n"
                },
                {
                    "date": 1739868734579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2835,9 +2835,10 @@\n                                             teacherScript: updatedQuestion.data?.teacherScript ?? '',\r\n                                             followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\r\n                                             sampleAnswer: updatedQuestion.data?.sampleAnswer ?? '',\r\n                                             answer: updatedQuestion.data?.answer ?? '',\r\n-                                            }\r\n+                                            },\r\n+                                            content: updatedQuestion.content ?? ''  // Add default value\r\n                                         });\r\n                                       }}\r\n                                       onRemove={handleRemoveQuestion}\r\n                                       onAddExercisePrompt={handleAddExercisePrompt}\r\n"
                },
                {
                    "date": 1739868956088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3143,9 +3143,9 @@\n         )}\r\n         <SaveFeedback />\r\n \r\n         {/* Add Grade Modal */}\r\n-        {modalState.showAddGrade && (\r\n+        {/* {modalState.showAddGrade && (\r\n           <Dialog \r\n             open={modalState.showAddGrade} \r\n             onOpenChange={(open) => handleModalStateChange('showAddGrade', open)}\r\n           >\r\n@@ -3179,9 +3179,9 @@\n                 <Button onClick={handleCreateGrade} disabled={!newItemData.name}>Create Grade</Button>\r\n               </DialogFooter>\r\n             </DialogContent>\r\n           </Dialog>\r\n-        )}\r\n+        )} */}\r\n \r\n         {/* Add Topic Modal */}\r\n         {modalState.showAddTopic && (\r\n           <Dialog \r\n"
                },
                {
                    "date": 1739868970803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3142,9 +3142,9 @@\n           </div>\r\n         )}\r\n         <SaveFeedback />\r\n \r\n-        {/* Add Grade Modal */}\r\n+        {/* Add Grade Modal - do not delete */}\r\n         {/* {modalState.showAddGrade && (\r\n           <Dialog \r\n             open={modalState.showAddGrade} \r\n             onOpenChange={(open) => handleModalStateChange('showAddGrade', open)}\r\n"
                },
                {
                    "date": 1739958724461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2819,9 +2819,9 @@\n                                         lesson_id: currentLessonId || '',\r\n                                         type: isValidQuestionType(question.type) ? question.type : 'speaking',\r\n                                         data: {\r\n                                           prompt: question.data?.prompt ?? '',\r\n-                                          teacherScript: question.data?.teacherScript ?? '',\r\n+                                          teacherScript: question.data?.teacher_script ?? '',\r\n                                           followup_prompt: question.data?.followup_prompt ?? [],\r\n                                           sampleAnswer: question.data?.sampleAnswer ?? '',\r\n                                           answer: question.data?.answer ?? ''\r\n                                         } \r\n"
                },
                {
                    "date": 1739958749707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2831,9 +2831,9 @@\n                                         await handleUpdateQuestion(index, {\r\n                                           ...updatedQuestion,\r\n                                           data: {\r\n                                             prompt: updatedQuestion.data?.prompt ?? '',\r\n-                                            teacherScript: updatedQuestion.data?.teacherScript ?? '',\r\n+                                            teacherScript: updatedQuestion.data?.teachercript ?? '',\r\n                                             followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\r\n                                             sampleAnswer: updatedQuestion.data?.sampleAnswer ?? '',\r\n                                             answer: updatedQuestion.data?.answer ?? '',\r\n                                             },\r\n"
                },
                {
                    "date": 1739960385412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2819,9 +2819,9 @@\n                                         lesson_id: currentLessonId || '',\r\n                                         type: isValidQuestionType(question.type) ? question.type : 'speaking',\r\n                                         data: {\r\n                                           prompt: question.data?.prompt ?? '',\r\n-                                          teacherScript: question.data?.teacher_script ?? '',\r\n+                                          teachercript: question.data?.teacher_script ?? '',\r\n                                           followup_prompt: question.data?.followup_prompt ?? [],\r\n                                           sampleAnswer: question.data?.sampleAnswer ?? '',\r\n                                           answer: question.data?.answer ?? ''\r\n                                         } \r\n@@ -2831,9 +2831,9 @@\n                                         await handleUpdateQuestion(index, {\r\n                                           ...updatedQuestion,\r\n                                           data: {\r\n                                             prompt: updatedQuestion.data?.prompt ?? '',\r\n-                                            teacherScript: updatedQuestion.data?.teachercript ?? '',\r\n+                                            teacherScript: updatedQuestion.data?.teacher_script ?? '',\r\n                                             followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\r\n                                             sampleAnswer: updatedQuestion.data?.sampleAnswer ?? '',\r\n                                             answer: updatedQuestion.data?.answer ?? '',\r\n                                             },\r\n"
                },
                {
                    "date": 1739960393825,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2819,11 +2819,11 @@\n                                         lesson_id: currentLessonId || '',\r\n                                         type: isValidQuestionType(question.type) ? question.type : 'speaking',\r\n                                         data: {\r\n                                           prompt: question.data?.prompt ?? '',\r\n-                                          teachercript: question.data?.teacher_script ?? '',\r\n+                                          teacher_script: question.data?.teacher_script ?? '',\r\n                                           followup_prompt: question.data?.followup_prompt ?? [],\r\n-                                          sampleAnswer: question.data?.sampleAnswer ?? '',\r\n+                                          sample_answer: question.data?.sampleAnswer ?? '',\r\n                                           answer: question.data?.answer ?? ''\r\n                                         } \r\n                                       }}\r\n                                       index={index}\r\n"
                },
                {
                    "date": 1739960402005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2822,9 +2822,9 @@\n                                           prompt: question.data?.prompt ?? '',\r\n                                           teacher_script: question.data?.teacher_script ?? '',\r\n                                           followup_prompt: question.data?.followup_prompt ?? [],\r\n                                           sample_answer: question.data?.sampleAnswer ?? '',\r\n-                                          answer: question.data?.answer ?? ''\r\n+                                          \r\n                                         } \r\n                                       }}\r\n                                       index={index}\r\n                                       onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\r\n"
                },
                {
                    "date": 1739960411040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2821,9 +2821,9 @@\n                                         data: {\r\n                                           prompt: question.data?.prompt ?? '',\r\n                                           teacher_script: question.data?.teacher_script ?? '',\r\n                                           followup_prompt: question.data?.followup_prompt ?? [],\r\n-                                          sample_answer: question.data?.sampleAnswer ?? '',\r\n+                                          sample_answer: question.data?.sample_answer ?? '',\r\n                                           \r\n                                         } \r\n                                       }}\r\n                                       index={index}\r\n"
                },
                {
                    "date": 1739960420369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2831,11 +2831,11 @@\n                                         await handleUpdateQuestion(index, {\r\n                                           ...updatedQuestion,\r\n                                           data: {\r\n                                             prompt: updatedQuestion.data?.prompt ?? '',\r\n-                                            teacherScript: updatedQuestion.data?.teacher_script ?? '',\r\n+                                            teacher_script: updatedQuestion.data?.teacher_script ?? '',\r\n                                             followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\r\n-                                            sampleAnswer: updatedQuestion.data?.sampleAnswer ?? '',\r\n+                                            sample_answer: updatedQuestion.data?.sample_answer ?? '',\r\n                                             answer: updatedQuestion.data?.answer ?? '',\r\n                                             },\r\n                                             content: updatedQuestion.content ?? ''  // Add default value\r\n                                         });\r\n"
                },
                {
                    "date": 1739960428082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2834,9 +2834,8 @@\n                                             prompt: updatedQuestion.data?.prompt ?? '',\r\n                                             teacher_script: updatedQuestion.data?.teacher_script ?? '',\r\n                                             followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\r\n                                             sample_answer: updatedQuestion.data?.sample_answer ?? '',\r\n-                                            answer: updatedQuestion.data?.answer ?? '',\r\n                                             },\r\n                                             content: updatedQuestion.content ?? ''  // Add default value\r\n                                         });\r\n                                       }}\r\n"
                },
                {
                    "date": 1739960665366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2834,8 +2834,9 @@\n                                             prompt: updatedQuestion.data?.prompt ?? '',\r\n                                             teacher_script: updatedQuestion.data?.teacher_script ?? '',\r\n                                             followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\r\n                                             sample_answer: updatedQuestion.data?.sample_answer ?? '',\r\n+                                            m\r\n                                             },\r\n                                             content: updatedQuestion.content ?? ''  // Add default value\r\n                                         });\r\n                                       }}\r\n"
                },
                {
                    "date": 1739960676320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2834,9 +2834,9 @@\n                                             prompt: updatedQuestion.data?.prompt ?? '',\r\n                                             teacher_script: updatedQuestion.data?.teacher_script ?? '',\r\n                                             followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\r\n                                             sample_answer: updatedQuestion.data?.sample_answer ?? '',\r\n-                                            m\r\n+                                            metadata: \r\n                                             },\r\n                                             content: updatedQuestion.content ?? ''  // Add default value\r\n                                         });\r\n                                       }}\r\n"
                },
                {
                    "date": 1739960683695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2834,9 +2834,9 @@\n                                             prompt: updatedQuestion.data?.prompt ?? '',\r\n                                             teacher_script: updatedQuestion.data?.teacher_script ?? '',\r\n                                             followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\r\n                                             sample_answer: updatedQuestion.data?.sample_answer ?? '',\r\n-                                            metadata: \r\n+                                            metadata: updatedQuestion.metadata ?? {},\r\n                                             },\r\n                                             content: updatedQuestion.content ?? ''  // Add default value\r\n                                         });\r\n                                       }}\r\n"
                },
                {
                    "date": 1739960707652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -469,8 +469,11 @@\n               media: '',\r\n               type: 'image',\r\n               narration: 'Your turn',\r\n               saytext: 'Say: ',\r\n+              metadata: {\r\n+                estimatedTime: 0\r\n+              },\r\n               created_at: new Date().toISOString(),\r\n               updated_at: new Date().toISOString()\r\n             }\r\n           ]\r\n"
                },
                {
                    "date": 1739960882965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -398,13 +398,13 @@\n       title: 'New Question',\r\n       content: '',\r\n       lesson_id: currentLessonId || '',\r\n       metadata: {},\r\n-      // data: {\r\n-      //   ...defaultData,\r\n-      //   prompt: '',\r\n-      //   teacherScript: ''\r\n-      // },\r\n+      data: {\r\n+        ...defaultData,\r\n+        prompt: '',\r\n+        teacherScript: ''\r\n+      },\r\n       exercisePrompts: [],\r\n       isDraft: true\r\n     };\r\n \r\n"
                },
                {
                    "date": 1739960912472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -393,9 +393,9 @@\n     const defaultData = QUESTION_TYPES[selectedQuestionType].defaultData;\r\n     const newQuestion: Question = {\r\n       id: crypto.randomUUID(),\r\n       type: selectedQuestionType,\r\n-      data: {},\r\n+      //data: {},\r\n       title: 'New Question',\r\n       content: '',\r\n       lesson_id: currentLessonId || '',\r\n       metadata: {},\r\n"
                },
                {
                    "date": 1739960919759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -401,9 +401,10 @@\n       metadata: {},\r\n       data: {\r\n         ...defaultData,\r\n         prompt: '',\r\n-        teacherScript: ''\r\n+        teacherScript: '',\r\n+        followup_prompt: [],\r\n       },\r\n       exercisePrompts: [],\r\n       isDraft: true\r\n     };\r\n"
                },
                {
                    "date": 1739960927502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -403,8 +403,11 @@\n         ...defaultData,\r\n         prompt: '',\r\n         teacherScript: '',\r\n         followup_prompt: [],\r\n+        sampleAnswer: '',\r\n+        \r\n+        metadata: {}\r\n       },\r\n       exercisePrompts: [],\r\n       isDraft: true\r\n     };\r\n"
                },
                {
                    "date": 1739960932717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -405,9 +405,8 @@\n         teacherScript: '',\r\n         followup_prompt: [],\r\n         sampleAnswer: '',\r\n         \r\n-        metadata: {}\r\n       },\r\n       exercisePrompts: [],\r\n       isDraft: true\r\n     };\r\n"
                },
                {
                    "date": 1739960938067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -403,10 +403,9 @@\n         ...defaultData,\r\n         prompt: '',\r\n         teacherScript: '',\r\n         followup_prompt: [],\r\n-        sampleAnswer: '',\r\n-        \r\n+        sampleAnswer: ''\r\n       },\r\n       exercisePrompts: [],\r\n       isDraft: true\r\n     };\r\n"
                },
                {
                    "date": 1739960984221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -265,9 +265,9 @@\n   data?: {\r\n     prompt?: string;\r\n     teacherScript?: string;\r\n     followup_prompt?: string[];\r\n-    sampleAnswer?: string;\r\n+    samplenswer?: string;\r\n     answer?: string;\r\n   } | null;\r\n   prompt: string;\r\n   teacherScript: string;\r\n"
                },
                {
                    "date": 1739960998749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -263,11 +263,11 @@\n   type?: string;\r\n   sampleAnswer?: string | null;\r\n   data?: {\r\n     prompt?: string;\r\n-    teacherScript?: string;\r\n+    teacher_script?: string;\r\n     followup_prompt?: string[];\r\n-    samplenswer?: string;\r\n+    sample_answer?: string;\r\n     answer?: string;\r\n   } | null;\r\n   prompt: string;\r\n   teacherScript: string;\r\n@@ -280,9 +280,9 @@\n   return {\r\n     ...question,\r\n     data: {\r\n       prompt: question?.data?.prompt || '',\r\n-      teacherScript: question?.data?.teacherScript || '',\r\n+      teacherScript: question?.data?.teacher_script || '',\r\n       followup_prompt: question?.data?.followup_prompt || [],\r\n       sampleAnswer: question?.data?.sampleAnswer || undefined,  // Convert null to undefined\r\n       answer: question?.data?.answer || undefined  // Convert null to undefined\r\n     } as const,\r\n"
                },
                {
                    "date": 1739961005390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -280,14 +280,14 @@\n   return {\r\n     ...question,\r\n     data: {\r\n       prompt: question?.data?.prompt || '',\r\n-      teacherScript: question?.data?.teacher_script || '',\r\n+      teacher_script: question?.data?.teacher_script || '',\r\n       followup_prompt: question?.data?.followup_prompt || [],\r\n-      sampleAnswer: question?.data?.sampleAnswer || undefined,  // Convert null to undefined\r\n+      sample_answer: question?.data?.sample_answer || undefined,  // Convert null to undefined\r\n       answer: question?.data?.answer || undefined  // Convert null to undefined\r\n     } as const,\r\n-    sampleAnswer: question?.sampleAnswer || ''\r\n+    sample_answer: question?.sample_answer || ''\r\n   };\r\n };\r\n \r\n export default function LessonManagementPage() {\r\n"
                },
                {
                    "date": 1739961013195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -280,14 +280,14 @@\n   return {\r\n     ...question,\r\n     data: {\r\n       prompt: question?.data?.prompt || '',\r\n-      teacher_script: question?.data?.teacher_script || '',\r\n+      teacherScript: question?.data?.teacher_script || '',\r\n       followup_prompt: question?.data?.followup_prompt || [],\r\n-      sample_answer: question?.data?.sample_answer || undefined,  // Convert null to undefined\r\n+      sampleAnswer: question?.data?.sampleAnswer || undefined,  // Convert null to undefined\r\n       answer: question?.data?.answer || undefined  // Convert null to undefined\r\n     } as const,\r\n-    sample_answer: question?.sample_answer || ''\r\n+    sampleAnswer: question?.sampleAnswer || ''\r\n   };\r\n };\r\n \r\n export default function LessonManagementPage() {\r\n"
                },
                {
                    "date": 1739961066929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -280,14 +280,14 @@\n   return {\r\n     ...question,\r\n     data: {\r\n       prompt: question?.data?.prompt || '',\r\n-      teacherScript: question?.data?.teacher_script || '',\r\n+      teacher_script: question?.data?.teacher_script || '',\r\n       followup_prompt: question?.data?.followup_prompt || [],\r\n-      sampleAnswer: question?.data?.sampleAnswer || undefined,  // Convert null to undefined\r\n+      sample_answer: question?.data?.sample_answer || undefined,  // Convert null to undefined\r\n       answer: question?.data?.answer || undefined  // Convert null to undefined\r\n     } as const,\r\n-    sampleAnswer: question?.sampleAnswer || ''\r\n+    sampleAnswer: question?.correct_answer || ''\r\n   };\r\n };\r\n \r\n export default function LessonManagementPage() {\r\n"
                },
                {
                    "date": 1739961077197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,8 +272,9 @@\n   prompt: string;\r\n   teacherScript: string;\r\n   followup_prompt: string[];\r\n   answer?: string;\r\n+  correct_answer?: string;\r\n }\r\n \r\n // In your component where you handle questions\r\n const handleQuestionData = (question: QuestionData) => {\r\n"
                },
                {
                    "date": 1739961107628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -260,9 +260,9 @@\n interface QuestionData {\r\n   id?: string;\r\n   content?: string;\r\n   type?: string;\r\n-  sampleAnswer?: string | null;\r\n+  \r\n   data?: {\r\n     prompt?: string;\r\n     teacher_script?: string;\r\n     followup_prompt?: string[];\r\n"
                },
                {
                    "date": 1739961130987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -260,9 +260,8 @@\n interface QuestionData {\r\n   id?: string;\r\n   content?: string;\r\n   type?: string;\r\n-  \r\n   data?: {\r\n     prompt?: string;\r\n     teacher_script?: string;\r\n     followup_prompt?: string[];\r\n@@ -402,11 +401,11 @@\n       metadata: {},\r\n       data: {\r\n         ...defaultData,\r\n         prompt: '',\r\n-        teacherScript: '',\r\n+        teacher_script: '',\r\n         followup_prompt: [],\r\n-        sampleAnswer: ''\r\n+        sample_answer: ''\r\n       },\r\n       exercisePrompts: [],\r\n       isDraft: true\r\n     };\r\n"
                },
                {
                    "date": 1739961149059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -405,8 +405,9 @@\n         teacher_script: '',\r\n         followup_prompt: [],\r\n         sample_answer: ''\r\n       },\r\n+      \r\n       exercisePrompts: [],\r\n       isDraft: true\r\n     };\r\n \r\n"
                },
                {
                    "date": 1739961185579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -220,8 +220,9 @@\n   title: string;\r\n   content: string;\r\n   metadata: Record<string, any>;\r\n   data: Record<string, any>; // This allows dynamic field access\r\n+  correct_answer: string;\r\n   exercisePrompts: ExercisePrompt[];\r\n   isDraft?: boolean;\r\n }\r\n \r\n@@ -405,9 +406,9 @@\n         teacher_script: '',\r\n         followup_prompt: [],\r\n         sample_answer: ''\r\n       },\r\n-      \r\n+      correct_answer: '',\r\n       exercisePrompts: [],\r\n       isDraft: true\r\n     };\r\n \r\n"
                },
                {
                    "date": 1739961210162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2842,8 +2842,9 @@\n                                             teacher_script: updatedQuestion.data?.teacher_script ?? '',\r\n                                             followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\r\n                                             sample_answer: updatedQuestion.data?.sample_answer ?? '',\r\n                                             metadata: updatedQuestion.metadata ?? {},\r\n+                                            correct_answer: updatedQuestion.correct_answer ?? '',\r\n                                             },\r\n                                             content: updatedQuestion.content ?? ''  // Add default value\r\n                                         });\r\n                                       }}\r\n"
                },
                {
                    "date": 1739961257371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,3313 @@\n+\"use client\";\r\n+\r\n+import { useState, useCallback, useEffect, useRef } from 'react';\r\n+import { toast } from 'sonner';\r\n+import { Toaster } from 'sonner';\r\n+import Link from 'next/link';\r\n+import {  Activity as ActivityIcon,  ArrowLeft,  BookOpen,  ChevronDown,  ChevronRight,  Check,  Edit,  Eye,  EyeOff,  HelpCircle,  Layers,  List,  MessageSquare,  Plus,  Save,  Trash as Trash2, X, Pencil, Lock, Unlock, RefreshCw, Clock, Bell, Moon, GraduationCap, MoreHorizontal, Loader2 } from 'lucide-react';\r\n+import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\n+import { Badge } from '@/components/ui/badge';\r\n+import { Button } from '@/components/ui/button';\r\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\n+import { Input } from '@/components/ui/input';\r\n+import { Label } from '@/components/ui/label';\r\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\n+import { Textarea } from '@/components/ui/textarea';\r\n+import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\r\n+import { cn } from '@/lib/utils';\r\n+import { API_BASE_URL, QUESTION_TYPES, isQuestionType } from './constants';\r\n+import { ExercisePrompt, Lesson } from './types';\r\n+import { QuestionFormProps, ExercisePromptCardProps, Activity, Grade, Topic, Subtopic as SubTopic } from './types';\r\n+import { QuestionForm } from './components/question-form';\r\n+import { ExercisePromptCard } from './components/exercise-prompt-card';\r\n+import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\r\n+import { supabase } from '@/lib/supabase';\r\n+import { useContentStore } from '@/lib/content/store';\r\n+import { contentService } from '@/lib/content/ContentService';\r\n+import { MediaPreview } from '@/components/ui/media-preview';\r\n+import { QuestionTypeSelect } from './components/question-type-select';\r\n+import { RichTextEditor } from '@/components/ui/rich-text-editor';\r\n+import {\r\n+  AlertDialog,\r\n+  AlertDialogAction,\r\n+  AlertDialogCancel,\r\n+  AlertDialogContent,\r\n+  AlertDialogDescription,\r\n+  AlertDialogFooter,\r\n+  AlertDialogHeader,\r\n+  AlertDialogTitle,\r\n+  AlertDialogTrigger,\r\n+} from \"@/components/ui/alert-dialog\";\r\n+import { debounce, isNull } from 'lodash';\r\n+import { PostgrestError } from '@supabase/supabase-js';\r\n+import { Question as ContentQuestion } from './types';  // Import the specific type\r\n+import { Trash } from \"lucide-react\";\r\n+import { AnimatePresence, motion } from 'framer-motion';\r\n+\r\n+\r\n+// Update the API endpoint to match your backend route\r\n+const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\r\n+\r\n+interface QuestionTypeSelectProps {\r\n+  value: string;\r\n+  onValueChange: (value: string) => void;\r\n+}\r\n+\r\n+// Add metadata type\r\n+interface LessonMetadata {\r\n+  lastEdited?: string;\r\n+  version?: number;\r\n+  tags?: string[];\r\n+  status?: 'draft' | 'published';\r\n+  authorId?: string;\r\n+  duration?: number;\r\n+  transcript?: string;\r\n+}\r\n+\r\n+type ContentType = 'html' | 'markdown' | 'rich-text' | 'text' | 'json';\r\n+\r\n+interface LessonContent {\r\n+  id: string;\r\n+  lesson_id: string;\r\n+  content: any[];\r\n+  metadata: {\r\n+    lastEdited?: string;\r\n+    version?: number;\r\n+    status?: 'draft' | 'published';\r\n+    authorId?: string;\r\n+  };\r\n+  content_type: string;\r\n+  order_index: number;\r\n+  updated_at: string;\r\n+  user_id: string;\r\n+}\r\n+\r\n+interface InlineEditProps {\r\n+  value: string;\r\n+  onSave: (value: string) => void;\r\n+  isEditing: boolean;\r\n+  setIsEditing: (value: boolean) => void;\r\n+  placeholder?: string;\r\n+  className?: string;\r\n+}\r\n+\r\n+// Add validation interface\r\n+interface QuestionValidation {\r\n+  isValid: boolean;\r\n+  message: string;\r\n+}\r\n+\r\n+// Add this type validation helper\r\n+const getQuestionTypeFields = (type: string) => {\r\n+  switch (type) {\r\n+    case 'multipleChoice':\r\n+      return {\r\n+        required: ['prompt', 'options', 'correctAnswer'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          options: [],\r\n+          correctAnswer: '',\r\n+          teacherScript: '',\r\n+          explanation: ''\r\n+        }\r\n+      };\r\n+    case 'fillInBlank':\r\n+      return {\r\n+        required: ['prompt', 'blanks'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          blanks: [],\r\n+          teacherScript: '',\r\n+          explanation: ''\r\n+        }\r\n+      };\r\n+    case 'trueFalse':\r\n+      return {\r\n+        required: ['prompt', 'correctAnswer'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          correctAnswer: null,\r\n+          teacherScript: '',\r\n+          explanation: ''\r\n+        }\r\n+      };\r\n+    case 'matching':\r\n+      return {\r\n+        required: ['prompt', 'pairs'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          pairs: [],\r\n+          teacherScript: '',\r\n+          explanation: ''\r\n+        }\r\n+      };\r\n+    case 'ordering':\r\n+      return {\r\n+        required: ['prompt', 'items'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          items: [],\r\n+          correctOrder: [],\r\n+          teacherScript: '',\r\n+          explanation: ''\r\n+        }\r\n+      };\r\n+    case 'shortAnswer':\r\n+      return {\r\n+        required: ['prompt', 'sampleAnswer'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          sampleAnswer: '',\r\n+          teacherScript: '',\r\n+          explanation: '',\r\n+          keywords: []\r\n+        }\r\n+      };\r\n+    case 'speaking':\r\n+      return {\r\n+        required: ['prompt', 'sampleAnswer'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          sampleAnswer: '',\r\n+          teacherScript: '',\r\n+          audioPrompt: '',\r\n+          pronunciation: ''\r\n+        }\r\n+      };\r\n+    case 'listening':\r\n+      return {\r\n+        required: ['prompt', 'audioContent'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          audioContent: '',\r\n+          transcript: '',\r\n+          teacherScript: '',\r\n+          comprehensionQuestions: []\r\n+        }\r\n+      };\r\n+    case 'listenAndRepeat':\r\n+      return {\r\n+        required: ['prompt', 'audioContent'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          audioContent: '',\r\n+          targetPhrase: '',\r\n+          teacherScript: '',\r\n+          pronunciation: ''\r\n+        }\r\n+      };\r\n+    default:\r\n+      return {\r\n+        required: ['prompt'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          teacherScript: ''\r\n+        }\r\n+      };\r\n+  }\r\n+}\r\n+\r\n+interface SaveStatus {\r\n+  id: string;\r\n+  status: 'draft' | 'saved' | 'saving' | 'error';\r\n+  lastSaved?: string;\r\n+}\r\n+\r\n+interface Question {\r\n+  id: string;\r\n+  type: string;\r\n+  lesson_id: string;\r\n+  title: string;\r\n+  content: string;\r\n+  metadata: Record<string, any>;\r\n+  data: Record<string, any>; // This allows dynamic field access\r\n+  correct_answer: string;\r\n+  exercisePrompts: ExercisePrompt[];\r\n+  isDraft?: boolean;\r\n+}\r\n+\r\n+// Add at the top of the file with other type definitions\r\n+type QuestionType = keyof typeof QUESTION_TYPES;\r\n+\r\n+// Add this type guard function\r\n+const isValidQuestionType = (type: string): type is QuestionType => {\r\n+  return type in QUESTION_TYPES;\r\n+};\r\n+\r\n+// Update handleAddQuestion\r\n+\r\n+\r\n+// Update validateQuestion\r\n+const validateQuestion = (question: Question): QuestionValidation => {\r\n+  const { required } = getQuestionTypeFields(question.type);\r\n+  const missingFields = required.filter(field => {\r\n+    const value = question.data?.[field];\r\n+    return !value || \r\n+      (Array.isArray(value) && value.length === 0) || \r\n+      (typeof value === 'string' && !value.trim());\r\n+  });\r\n+\r\n+  if (missingFields.length > 0) {\r\n+    return {\r\n+      isValid: false,\r\n+      message: `Missing required fields: ${missingFields.join(', ')}`\r\n+    };\r\n+  }\r\n+\r\n+  return { isValid: true, message: '' };\r\n+};\r\n+\r\n+// Add proper type for question data\r\n+interface QuestionData {\r\n+  id?: string;\r\n+  content?: string;\r\n+  type?: string;\r\n+  data?: {\r\n+    prompt?: string;\r\n+    teacher_script?: string;\r\n+    followup_prompt?: string[];\r\n+    sample_answer?: string;\r\n+    answer?: string;\r\n+  } | null;\r\n+  prompt: string;\r\n+  teacherScript: string;\r\n+  followup_prompt: string[];\r\n+  answer?: string;\r\n+  correct_answer?: string;\r\n+}\r\n+\r\n+// In your component where you handle questions\r\n+const handleQuestionData = (question: QuestionData) => {\r\n+  return {\r\n+    ...question,\r\n+    data: {\r\n+      prompt: question?.data?.prompt || '',\r\n+      teacher_script: question?.data?.teacher_script || '',\r\n+      followup_prompt: question?.data?.followup_prompt || [],\r\n+      sample_answer: question?.data?.sample_answer || undefined,  // Convert null to undefined\r\n+      answer: question?.data?.answer || undefined  // Convert null to undefined\r\n+    } as const,\r\n+    sampleAnswer: question?.correct_answer || ''\r\n+  };\r\n+};\r\n+\r\n+export default function LessonManagementPage() {\r\n+  // State declarations\r\n+  \r\n+  const [selectedGradeId, setSelectedGradeId] = useState<string | null>(null);\r\n+  const [selectedTopicId, setSelectedTopicId] = useState<string | null>(null);\r\n+  const [selectedSubtopicId, setSelectedSubtopicId] = useState<string | null>(null);\r\n+  const [lessonTitle, setLessonTitle] = useState<string>('');\r\n+  const [currentLessonId, setCurrentLessonId] = useState<string | null>(null);\r\n+  const [questions, setQuestions] = useState<Question[]>([]);\r\n+  const [saveProgress, setSaveProgress] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');\r\n+  const [activities, setActivities] = useState<Activity[]>([]);\r\n+  const [localBuffer, setLocalBuffer] = useState<{ timestamp: number; data: any } | null>(null);\r\n+  const [lastSavedToServer, setLastSavedToServer] = useState<number>(Date.now());\r\n+  const [selectedQuestionType, setSelectedQuestionType] = useState<string>('');\r\n+  const [editingQuestionIndex, setEditingQuestionIndex] = useState<number | null>(null);\r\n+  const [showHelpTips, setShowHelpTips] = useState(true);\r\n+  const [isNavigating, setIsNavigating] = useState(false);\r\n+  const [lessons, setLessons] = useState<Lesson[]>([]);\r\n+  const [grades, setGrades] = useState<Grade[]>([]);\r\n+  const [topics, setTopics] = useState<Topic[]>([]);\r\n+  const [subtopics, setSubtopics] = useState<SubTopic[]>([]);\r\n+  const [contentHeading, setContentHeading] = useState<string>('');\r\n+    // Add with your other state declarations\r\n+  const [isContentExpanded, setIsContentExpanded] = useState<boolean>(false);\r\n+  const [modalState, setModalState] = useState({\r\n+    showAddGrade: false,\r\n+    showAddTopic: false,\r\n+    showAddSubtopic: false,\r\n+    showAddLesson: false\r\n+  });\r\n+  const [isViewMode, setIsViewMode] = useState<boolean>(true);\r\n+  const [expandedGrade, setExpandedGrade] = useState<string | null>(null);\r\n+  const [expandedTopic, setExpandedTopic] = useState<string | null>(null);\r\n+  const [expandedSubtopic, setExpandedSubtopic] = useState<string | null>(null);\r\n+  const [expandedQuestion, setExpandedQuestion] = useState<number | null>(null);\r\n+  const [expandedActivity, setExpandedActivity] = useState<number | null>(null);\r\n+  const [newItemData, setNewItemData] = useState({\r\n+    name: '',\r\n+    description: ''\r\n+  });\r\n+  const [lessonContent, setLessonContent] = useState<string>('');\r\n+  const [isContentEditorOpen, setIsContentEditorOpen] = useState(false);\r\n+  const [isEditingTitle, setIsEditingTitle] = useState<boolean>(false);\r\n+  const [isEditingHeading, setIsEditingHeading] = useState<boolean>(false);\r\n+  const [isEditingDescription, setIsEditingDescription] = useState<boolean>(false);\r\n+  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\r\n+  const [isSidebarLocked, setIsSidebarLocked] = useState(true);\r\n+  const [alertDialogState, setAlertDialogState] = useState<{\r\n+    isOpen: boolean;\r\n+    title: string;\r\n+    message: string;\r\n+    onConfirm: (value?: unknown) => void;\r\n+  }>({\r\n+    isOpen: false,\r\n+    title: '',\r\n+    message: '',\r\n+    onConfirm: () => {}\r\n+  });\r\n+\r\n+  const { \r\n+    selectedGrade,\r\n+    setSelectedGrade,\r\n+    selectedTopic,\r\n+    setSelectedTopic,\r\n+    selectedSubtopic,\r\n+    setSelectedSubtopic,\r\n+    selectedLesson,\r\n+    setSelectedLesson\r\n+  } = useContentStore();\r\n+\r\n+  // Add new state for tracking save status\r\n+  interface SaveStatus {\r\n+    id: string;\r\n+    status: 'draft' | 'saved' | 'saving' | 'error' | 'draft';\r\n+    lastSaved?: string;\r\n+  }\r\n+\r\n+  const [questionSaveStatuses, setQuestionSaveStatuses] = useState<Array<{\r\n+    id: string;\r\n+    status: 'idle' | 'saving' | 'saved' | 'error' | 'draft';\r\n+  }>>([]);\r\n+  const [promptSaveStatuses, setPromptSaveStatuses] = useState<SaveStatus[]>([]);\r\n+\r\n+  // Add this state to track dropdown state\r\n+  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n+\r\n+  // Add these states\r\n+  const [isLoadingSubtopics, setIsLoadingSubtopics] = useState(false);\r\n+  const [isLoadingLessons, setIsLoadingLessons] = useState(false);\r\n+\r\n+  // Event handlers\r\n+  const handleQuestionTypeChange = useCallback((type: string) => {\r\n+    if (isQuestionType(type)) {\r\n+      setSelectedQuestionType(type);\r\n+    }\r\n+  }, []);\r\n+\r\n+  const handleAddQuestion = useCallback(() => {\r\n+    if (!selectedQuestionType || !isQuestionType(selectedQuestionType)) return;\r\n+\r\n+    const defaultData = QUESTION_TYPES[selectedQuestionType].defaultData;\r\n+    const newQuestion: Question = {\r\n+      id: crypto.randomUUID(),\r\n+      type: selectedQuestionType,\r\n+      //data: {},\r\n+      title: 'New Question',\r\n+      content: '',\r\n+      lesson_id: currentLessonId || '',\r\n+      metadata: {},\r\n+      data: {\r\n+        ...defaultData,\r\n+        prompt: '',\r\n+        teacher_script: '',\r\n+        followup_prompt: [],\r\n+        sample_answer: ''\r\n+      },\r\n+      correct_answer: '',\r\n+      exercisePrompts: [],\r\n+      isDraft: true\r\n+    };\r\n+\r\n+    setQuestions(prev => [...prev, newQuestion]);\r\n+    setQuestionSaveStatuses(prev => [\r\n+      ...prev,\r\n+      { id: newQuestion.id, status: 'draft' }\r\n+    ]);\r\n+    setSelectedQuestionType('');\r\n+  }, [selectedQuestionType, currentLessonId]);\r\n+\r\n+  const handleRemoveQuestion = async (index: number) => {\r\n+    try {\r\n+      const questionToDelete = questions[index];\r\n+      \r\n+      // Delete related exercise prompts first\r\n+      const { error: promptError } = await supabase\r\n+        .from('exercise_prompts')\r\n+        .delete()\r\n+        .eq('question_id', questionToDelete.id);\r\n+\r\n+      if (promptError) throw promptError;\r\n+\r\n+      // Then delete the question\r\n+      const { error: questionError } = await supabase\r\n+        .from('questions')\r\n+        .delete()\r\n+        .eq('id', questionToDelete.id);\r\n+\r\n+      if (questionError) throw questionError;\r\n+\r\n+      // Update local state\r\n+      const newQuestions = questions.filter((_, i) => i !== index);\r\n+      setQuestions(newQuestions);\r\n+      \r\n+      toast.success('Question and related prompts deleted successfully');\r\n+    } catch (error) {\r\n+      console.error('Error deleting question:', error);\r\n+      toast.error('Failed to delete question and prompts');\r\n+    }\r\n+  };\r\n+\r\n+  const handleUpdateQuestion = useCallback(async (index: number, updatedQuestion: Question) => {\r\n+    const newQuestions = [...questions];\r\n+    newQuestions[index] = updatedQuestion;\r\n+    setQuestions(newQuestions);\r\n+    setQuestionSaveStatuses(prev => prev.map((status, i) => \r\n+      i === index ? { ...status, status: 'draft' } : status\r\n+    ));\r\n+  }, [questions]);\r\n+\r\n+  const handleAddExercisePrompt = useCallback((questionIndex: number) => {\r\n+    setQuestions(prev => prev.map((question, i) => {\r\n+      if (i === questionIndex) {\r\n+        return {\r\n+          ...question,\r\n+          exercisePrompts: [\r\n+            ...question.exercisePrompts,\r\n+            {\r\n+              id: crypto.randomUUID(),\r\n+              text: '',\r\n+              media: '',\r\n+              type: 'image',\r\n+              narration: 'Your turn',\r\n+              saytext: 'Say: ',\r\n+              metadata: {\r\n+                estimatedTime: 0\r\n+              },\r\n+              created_at: new Date().toISOString(),\r\n+              updated_at: new Date().toISOString()\r\n+            }\r\n+          ]\r\n+        };\r\n+      }\r\n+      return question;\r\n+    }));\r\n+  }, []);\r\n+\r\n+  const handleRemoveExercisePrompt = useCallback((questionIndex: number, promptIndex: number) => {\r\n+    setQuestions(prev => prev.map((question, i) => {\r\n+      if (i === questionIndex) {\r\n+        return {\r\n+          ...question,\r\n+          exercisePrompts: question.exercisePrompts.filter((_, j) => j !== promptIndex)\r\n+        };\r\n+      }\r\n+      return question;\r\n+    }));\r\n+  }, []);\r\n+\r\n+  const handleExercisePromptChange = useCallback(async (\r\n+    questionIndex: number,\r\n+    promptIndex: number,\r\n+    updatedPrompt: ExercisePrompt\r\n+  ) => {\r\n+    try {\r\n+      const promptUpdate = {\r\n+        id: updatedPrompt.id,\r\n+        question_id: updatedPrompt.question_id,\r\n+        text: updatedPrompt.text,\r\n+        type: updatedPrompt.type,\r\n+        narration: updatedPrompt.narration,\r\n+        saytext: updatedPrompt.saytext,\r\n+        media: updatedPrompt.media,\r\n+        // Remove order_index as it's not in schema\r\n+        created_at: new Date().toISOString()\r\n+      };\r\n+\r\n+      const { error: promptError } = await supabase\r\n+        .from('exercise_prompts')\r\n+        .upsert(promptUpdate)\r\n+        .select();\r\n+\r\n+      if (promptError) throw promptError;\r\n+\r\n+      // Update local state\r\n+      setQuestions(prev => prev.map((question, i) => {\r\n+        if (i === questionIndex) {\r\n+          const newPrompts = [...question.exercisePrompts];\r\n+          newPrompts[promptIndex] = updatedPrompt;\r\n+          return { ...question, exercisePrompts: newPrompts };\r\n+        }\r\n+        return question;\r\n+      }));\r\n+\r\n+    } catch (error) {\r\n+      console.error('Error saving prompt:', error);\r\n+      toast.error('Failed to save prompt');\r\n+    }\r\n+  }, []);\r\n+\r\n+  const handleAddActivity = useCallback(() => {\r\n+    const newActivity: Activity = {\r\n+      id: crypto.randomUUID(),\r\n+      lesson_id: currentLessonId || '',\r\n+      created_at: new Date().toISOString(),\r\n+      type: 'practice',\r\n+      title: '',\r\n+      name: '',\r\n+      instructions: '',\r\n+      media: [],\r\n+      data: {\r\n+        prompt: '',\r\n+        teacherScript: '',\r\n+        media: []\r\n+      }\r\n+    };\r\n+    setActivities(prev => [...prev, newActivity]);\r\n+  }, [currentLessonId]);\r\n+\r\n+  const handleUpdateActivity = useCallback((index: number, updatedActivity: Activity) => {\r\n+    setActivities(prev => prev.map((activity, i) => i === index ? updatedActivity : activity));\r\n+  }, []);\r\n+\r\n+  const handleRemoveActivity = useCallback((index: number) => {\r\n+    setActivities(prev => prev.filter((_, i) => i !== index));\r\n+  }, []);\r\n+\r\n+  const handleExercisePromptUpdate = useCallback((questionIndex: number, promptIndex: number, updatedPrompt: ExercisePrompt) => {\r\n+    const updatedQuestions = [...questions];\r\n+    updatedQuestions[questionIndex].exercisePrompts[promptIndex] = updatedPrompt;\r\n+    handleUpdateQuestion(questionIndex, updatedQuestions[questionIndex]);\r\n+  }, [questions, handleUpdateQuestion]);\r\n+\r\n+  const handleQuestionDataChange = useCallback((questionIndex: number, field: string, value: string) => {\r\n+    setQuestions(prev => prev.map((q, i) => \r\n+      i === questionIndex \r\n+        ? { \r\n+            ...q, \r\n+            data: { \r\n+              prompt: q.data?.prompt || '',\r\n+              teacherScript: q.data?.teacherScript || '',\r\n+              ...q.data,\r\n+              [field]: value \r\n+            } \r\n+          }\r\n+        : q\r\n+    ));\r\n+  }, []);\r\n+\r\n+  const [isSaving, setIsSaving] = useState(false);\r\n+\r\n+  const handleSaveLesson = async () => {\r\n+    try {\r\n+      if (!currentLessonId || !selectedSubtopicId) {\r\n+        toast.error('Please select a subtopic and lesson first');\r\n+        return;\r\n+      }\r\n+\r\n+      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\r\n+      if (sessionError) throw sessionError;\r\n+      \r\n+      if (!session?.user) {\r\n+        toast.error('Please sign in to save lessons');\r\n+        return;\r\n+      }\r\n+\r\n+      // Get user's role from session\r\n+      const userRole = session.user.user_metadata?.role;\r\n+      console.log('Current user role:', userRole);\r\n+      console.log('📝 Saving content heading:', {\r\n+        contentHeading,\r\n+        currentLessonId,\r\n+        selectedSubtopicId,\r\n+        timestamp: new Date().toISOString()\r\n+      });\r\n+\r\n+      // Create metadata object\r\n+      const lessonMetadata = {\r\n+        lastEdited: new Date().toISOString(),\r\n+        version: 1,\r\n+        status: 'draft' \r\n+      };\r\n+\r\n+      // Complete lesson data with all fields\r\n+      const lessonData = {\r\n+        id: currentLessonId,\r\n+        title: lessonTitle,\r\n+        content: lessonContent,\r\n+        metadata: lessonMetadata, // Supabase will automatically handle JSON conversion\r\n+        content_type: 'html',\r\n+        lesson_type: 'lesson',\r\n+        grade_id: selectedGradeId,\r\n+        topic_id: selectedTopicId,\r\n+        subtopic_id: selectedSubtopicId,\r\n+        user_id: session.user.id,\r\n+        updated_at: new Date().toISOString(),\r\n+        role: userRole, // Include role in the payload\r\n+        description: '',\r\n+        prerequisites: [],\r\n+        media_type: 'image',\r\n+        media_url: '',\r\n+        contentheading: contentHeading || ''\r\n+      };\r\n+\r\n+      console.log('📦 Data being sent to Supabase:', lessonData);\r\n+\r\n+      // Save lesson with all fields\r\n+      const { data, error: lessonError } = await supabase\r\n+        .from('lessons')\r\n+        .upsert(lessonData, { \r\n+          onConflict: 'id'\r\n+        })\r\n+        .select();\r\n+\r\n+      if (lessonError) throw lessonError;\r\n+\r\n+      // 2. Save lesson content\r\n+      const { data: existingContent } = await supabase\r\n+        .from('lesson_content')\r\n+        .select('id')\r\n+        .eq('lesson_id', currentLessonId)\r\n+        .single();\r\n+\r\n+      const contentMetadata = {\r\n+        lastEdited: new Date().toISOString(),\r\n+        version: 1,\r\n+        status: 'draft'\r\n+      };\r\n+\r\n+      const contentUpdate = {\r\n+        id: existingContent?.id || crypto.randomUUID(),\r\n+        lesson_id: currentLessonId,\r\n+        content: [lessonContent],\r\n+        metadata: contentMetadata, // Supabase will automatically handle JSON conversion\r\n+        content_type: 'html',\r\n+        user_id: session.user.id,\r\n+        updated_at: new Date().toISOString(),\r\n+        created_at: new Date().toISOString()\r\n+      };\r\n+\r\n+      const { error: contentError } = await supabase\r\n+        .from('lesson_content')\r\n+        .upsert(contentUpdate, { onConflict: 'id' });\r\n+\r\n+      if (contentError) throw contentError;\r\n+\r\n+      // 3. Save questions\r\n+      for (const question of questions) {\r\n+        const questionData = {\r\n+          id: question.id,\r\n+          lesson_id: currentLessonId,\r\n+          type: question.type,\r\n+          title: question.title,\r\n+          metadata: question.metadata,\r\n+          data: question.data,\r\n+          updated_at: new Date().toISOString(),\r\n+          user_id: session.user.id\r\n+        };\r\n+\r\n+        const { error: questionError } = await supabase\r\n+          .from('questions')\r\n+          .upsert(questionData, { onConflict: 'id' });\r\n+\r\n+        if (questionError) throw questionError;\r\n+\r\n+        //4. Save exercise prompts for this question\r\n+        if (question.exercisePrompts) {\r\n+          for (const prompt of question.exercisePrompts) {\r\n+            const promptData = {\r\n+              id: prompt.id,\r\n+              question_id: question.id,\r\n+              text: prompt.text,\r\n+              media: prompt.media,\r\n+              type: prompt.type,\r\n+              narration: prompt.narration,\r\n+              saytext: prompt.saytext,\r\n+              user_id: session.user.id,\r\n+              updated_at: new Date().toISOString()\r\n+            };\r\n+\r\n+            const { error: promptError } = await supabase\r\n+              .from('exercise_prompts')\r\n+              .upsert(promptData, { onConflict: 'id' });\r\n+\r\n+            if (promptError) throw promptError;\r\n+          }\r\n+        }\r\n+      }\r\n+\r\n+      // 5. Save activities\r\n+      if (activities.length > 0) {\r\n+        const activitiesData = activities.map(activity => ({\r\n+          id: activity.id,\r\n+          lesson_id: currentLessonId,\r\n+          type: activity.type,\r\n+          title: activity.title,\r\n+          name: activity.name,\r\n+          instructions: activity.instructions,\r\n+          media: activity.media,\r\n+          data: activity.data,\r\n+          created_at: new Date().toISOString()\r\n+        }));\r\n+\r\n+        const { error: activitiesError } = await supabase\r\n+          .from('activities')\r\n+          .upsert(activitiesData, { onConflict: 'id' });\r\n+\r\n+        if (activitiesError) throw activitiesError;\r\n+      }\r\n+\r\n+      // After successful save\r\n+      console.log('✅ Content heading saved successfully:', {\r\n+        contentHeading,\r\n+        lessonId: currentLessonId,\r\n+        timestamp: new Date().toISOString()\r\n+      });\r\n+\r\n+      toast.success('Lesson saved successfully');\r\n+    } catch (err) {\r\n+      const error = err as PostgrestError;\r\n+      console.error('❌ Error saving content heading:', {\r\n+        error: error.message,\r\n+        contentHeading,\r\n+        lessonContent,\r\n+        lessonId: currentLessonId,\r\n+        timestamp: new Date().toISOString()\r\n+      });\r\n+      toast.error(`Failed to save lesson: ${error.message}`);\r\n+\r\n+\r\n+    }\r\n+  };\r\n+\r\n+  const handleSaveQuestion = async (question: Question, index: number) => {\r\n+    const loadingToast = toast.loading(`Saving question ${index + 1}...`);\r\n+    \r\n+    try {\r\n+      const { data: { session } } = await supabase.auth.getSession();\r\n+      if (!session?.user) {\r\n+        toast.error('Please sign in to save question', { id: loadingToast });\r\n+        return;\r\n+      }\r\n+\r\n+      // Save question\r\n+      const questionData = {\r\n+        id: question.id,\r\n+        lesson_id: currentLessonId,\r\n+        type: question.type,\r\n+        title: question.title,\r\n+        metadata: question.metadata,\r\n+        data: {\r\n+          prompt: question.data?.prompt ?? '',\r\n+          teacherScript: question.data?.teacherScript ?? '',\r\n+          followup_prompt: question.data?.followup_prompt ?? [],\r\n+          sampleAnswer: question.data?.sampleAnswer || undefined,  // Convert null to undefined\r\n+          answer: question.data?.answer || undefined  // Convert null to undefined\r\n+        } as const,\r\n+        user_id: session.user.id,\r\n+        updated_at: new Date().toISOString()\r\n+      };\r\n+\r\n+      const { error: questionError } = await supabase\r\n+        .from('questions')\r\n+        .upsert(questionData, { onConflict: 'id' });\r\n+\r\n+      if (questionError) throw questionError;\r\n+\r\n+      // Save exercise prompts if they exist\r\n+      if (question.exercisePrompts?.length) {\r\n+        for (const prompt of question.exercisePrompts) {\r\n+          const promptData = {\r\n+            id: prompt.id,\r\n+            question_id: question.id,\r\n+            text: prompt.text,\r\n+            type: prompt.type,\r\n+            narration: prompt.narration,\r\n+            saytext: prompt.saytext,\r\n+            media: prompt.media,\r\n+            user_id: session.user.id,\r\n+            updated_at: new Date().toISOString()\r\n+          };\r\n+\r\n+          const { error: promptError } = await supabase\r\n+            .from('exercise_prompts')\r\n+            .upsert(promptData, { onConflict: 'id' });\r\n+\r\n+          if (promptError) throw promptError;\r\n+        }\r\n+      }\r\n+\r\n+      toast.success(`Question ${index + 1} saved successfully`, { id: loadingToast });\r\n+    } catch (error) {\r\n+      console.error('Error saving question:', error);\r\n+      toast.error(`Failed to save question ${index + 1}`, { id: loadingToast });\r\n+    }\r\n+  };\r\n+\r\n+  const handleSaveActivity = async (activity: Activity) => {\r\n+    try {\r\n+      await contentService.saveActivity(activity);\r\n+      toast.success('Activity saved');\r\n+    } catch (error) {\r\n+      console.error('Failed to save activity:', error);\r\n+      toast.error('Failed to save activity');\r\n+    }\r\n+  };\r\n+\r\n+  // Effects\r\n+  useEffect(() => {\r\n+    const fetchGrades = async () => {\r\n+      try {\r\n+        const { data, error } = await supabase\r\n+          .from('grades')\r\n+          .select('*')\r\n+          .order('name');\r\n+\r\n+        if (error) {\r\n+          console.error('Supabase error:', error);\r\n+          throw error;\r\n+        }\r\n+\r\n+        if (!data) {\r\n+          throw new Error('No data returned from Supabase');\r\n+        }\r\n+\r\n+        // Map the grades to match your interface\r\n+        const validGrades = data.map((grade: any) => ({\r\n+          _id: grade.id,\r\n+          id: grade.id,\r\n+          name: grade.name,\r\n+          level: grade.level || 0,  // Add default value if not provided\r\n+          orderIndex: grade.order_index || 0,  // Add default value if not provided\r\n+          topics: []\r\n+        }));\r\n+        \r\n+        setGrades(validGrades);\r\n+      } catch (error) {\r\n+        console.error('Error fetching grades:', error);\r\n+        toast.error('Failed to fetch grades');\r\n+      }\r\n+    };\r\n+\r\n+    fetchGrades();\r\n+  }, []);\r\n+\r\n+  // Topic Selection\r\n+  useEffect(() => {\r\n+    const fetchTopics = async () => {\r\n+      if (!selectedGradeId) return;\r\n+      \r\n+      try {\r\n+        const { data, error } = await supabase\r\n+          .from('topics')\r\n+          .select('*')\r\n+          .eq('grade_id', selectedGradeId)\r\n+          .order('title');\r\n+\r\n+        if (error) {\r\n+          throw error;\r\n+        }\r\n+\r\n+        // Map the topics to match your interface\r\n+        const validTopics = (data || []).map((topic: any) => ({\r\n+          _id: topic.id,\r\n+          id: topic.id,\r\n+          name: topic.title,\r\n+          title: topic.title,\r\n+          grade_id: topic.grade_id,\r\n+          subtopics: []\r\n+        }));\r\n+        \r\n+        setTopics(validTopics);\r\n+      } catch (error) {\r\n+        console.error('Error fetching topics:', error);\r\n+        toast.error('Failed to fetch topics');\r\n+      }\r\n+    };\r\n+\r\n+    fetchTopics();\r\n+  }, [selectedGradeId]);\r\n+\r\n+  // Subtopic Selection\r\n+  useEffect(() => {\r\n+    const fetchSubtopics = async () => {\r\n+      if (!selectedTopicId) return;\r\n+      \r\n+      try {\r\n+        // Use content service to fetch subtopics\r\n+        const subtopicsData = await contentService.fetchSubtopics(selectedTopicId);\r\n+        console.log('Fetched subtopics:', subtopicsData);\r\n+\r\n+        const validSubtopics = subtopicsData.map((subtopic: any) => ({\r\n+          id: subtopic.id,\r\n+          title: subtopic.title,\r\n+          description: subtopic.description,\r\n+          topic_id: subtopic.topic_id,\r\n+          lessons: [],\r\n+          order_index: subtopicsData.length\r\n+        }));\r\n+        \r\n+        setSubtopics(validSubtopics);\r\n+        \r\n+        // Update global state\r\n+        if (selectedSubtopic) {\r\n+          setSelectedSubtopic(selectedSubtopic);\r\n+        }\r\n+      } catch (err) {\r\n+        const error = err as Error;\r\n+        console.error('Error fetching subtopics:', error);\r\n+        toast.error('Failed to fetch subtopics');\r\n+      }\r\n+    };\r\n+\r\n+    fetchSubtopics();\r\n+  }, [selectedTopicId, selectedSubtopic, setSelectedSubtopic]);\r\n+\r\n+  // Add effect to monitor subtopics state\r\n+  useEffect(() => {\r\n+    console.log('Current subtopics state:', subtopics);\r\n+  }, [subtopics]);\r\n+\r\n+  // Add fetchLessons function\r\n+  const fetchLessons = useCallback(async () => {\r\n+    if (!selectedSubtopicId) return;\r\n+    try {\r\n+      const { data, error } = await supabase\r\n+        .from('lessons')\r\n+        .select('*')\r\n+        .eq('subtopic_id', selectedSubtopicId)\r\n+        .order('title');\r\n+\r\n+      if (error) {\r\n+        throw error;\r\n+      }\r\n+      \r\n+      // Map the lessons to ensure they have _id\r\n+      const validLessons = (data || []).map((lesson: any) => ({\r\n+        ...lesson,\r\n+        _id: lesson._id || lesson.id, // Use _id if available, otherwise use id\r\n+        title: lesson.title || 'Untitled Lesson'\r\n+      })).filter((lesson: any) => lesson._id); // Only include lessons with valid IDs\r\n+      \r\n+      setLessons(validLessons);\r\n+    } catch (error) {\r\n+      console.error('Error fetching lessons:', error);\r\n+      toast.error('Failed to fetch lessons');\r\n+    }\r\n+  }, [selectedSubtopicId]);\r\n+  // Add loadLessonContent function\r\n+  const isLoading = useRef(false);\r\n+  const loadLessonContent = useCallback(async (lessonId: string) => {\r\n+    // Prevent multiple simultaneous loads\r\n+    if (isLoading.current) return;\r\n+    isLoading.current = true;\r\n+\r\n+    const controller = new AbortController();\r\n+\r\n+    try {\r\n+      // Clear existing content first\r\n+      setLessonTitle('');\r\n+      setContentHeading('');\r\n+      setLessonContent('');\r\n+      setQuestions([]);\r\n+      \r\n+      // First fetch lesson data\r\n+      const { data: lessonData, error: lessonError } = await supabase\r\n+        .from('lessons')\r\n+        .select('*')\r\n+        .eq('id', lessonId)\r\n+        .single()\r\n+        \r\n+\r\n+      if (lessonError) {\r\n+        console.error('Lesson fetch error:', lessonError);\r\n+        throw lessonError;\r\n+      }\r\n+\r\n+      // Set lesson data\r\n+      setLessonTitle(lessonData.title || '');\r\n+      setContentHeading(lessonData.content || '');\r\n+\r\n+      // Then fetch lesson content with explicit headers\r\n+      const { data: contentData, error: contentError } = await supabase\r\n+        .from('lesson_content')\r\n+        .select('*')\r\n+        .eq('lesson_id', lessonId)\r\n+        .order('updated_at', { ascending: false })\r\n+        .limit(1)\r\n+        .maybeSingle();\r\n+\r\n+      if (contentError) {\r\n+        console.error('Content fetch error:', contentError);\r\n+        throw contentError;\r\n+      }\r\n+\r\n+      // Set content if available\r\n+      if (contentData?.content) {\r\n+        setLessonContent(typeof contentData.content === 'string' \r\n+          ? contentData.content \r\n+          : JSON.stringify(contentData.content)\r\n+        );\r\n+      }\r\n+\r\n+    } catch (error: unknown) {\r\n+      if (error instanceof Error && error.name === 'AbortError') {\r\n+        console.log('Request aborted');\r\n+        return;\r\n+      }\r\n+      console.error('Error loading lesson:', error);\r\n+      toast.error('Failed to load lesson content');\r\n+      \r\n+      // Reset states on error\r\n+      setLessonTitle('');\r\n+      setContentHeading('');\r\n+      setLessonContent('');\r\n+      setQuestions([]);\r\n+    } finally {\r\n+      isLoading.current = false;\r\n+    }\r\n+\r\n+    return () => {\r\n+      controller.abort();\r\n+    };\r\n+  }, []); // Empty dependencies since we're using closure over state setters\r\n+\r\n+  // // Add effect for fetching lessons when subtopic changes\r\n+  useEffect(() => {\r\n+    if (selectedSubtopicId) {\r\n+      fetchLessons();\r\n+    }\r\n+  }, [selectedSubtopicId, fetchLessons]);\r\n+\r\n+  // Add effect for loading lesson content when currentLessonId changes\r\n+    useEffect(() => {\r\n+    let isMounted = true;\r\n+    let timeoutId: NodeJS.Timeout;\r\n+\r\n+    const loadContent = async () => {\r\n+      if (!currentLessonId || !isMounted) return;\r\n+\r\n+      // Clear previous timeout if exists\r\n+      if (timeoutId) clearTimeout(timeoutId);\r\n+\r\n+      // Set new timeout for debouncing\r\n+      timeoutId = setTimeout(() => {\r\n+        if (isMounted) {\r\n+          loadLessonContent(currentLessonId);\r\n+        }\r\n+      }, 300);\r\n+    };\r\n+\r\n+    loadContent();\r\n+\r\n+    // Cleanup function\r\n+    return () => {\r\n+      isMounted = false;\r\n+      if (timeoutId) clearTimeout(timeoutId);\r\n+      if (isLoading.current) isLoading.current = false;\r\n+    };\r\n+  }, [currentLessonId]); // Remove loadLessonContent from dependencies\r\n+\r\n+  useEffect(() => {\r\n+    console.log('Current lessons state:', lessons);\r\n+  }, [lessons]);\r\n+\r\n+    // Add keyboard shortcut for saving\r\n+  useEffect(() => {\r\n+    const handleKeyDown = (e: KeyboardEvent) => {\r\n+      if ((e.ctrlKey || e.metaKey) && e.key === 's') {\r\n+        e.preventDefault();\r\n+        handleSaveLesson();\r\n+      }\r\n+    };\r\n+\r\n+    window.addEventListener('keydown', handleKeyDown);\r\n+    return () => window.removeEventListener('keydown', handleKeyDown);\r\n+  }, [handleSaveLesson]);\r\n+\r\n+  // Add SaveFeedback component\r\n+  const SaveFeedback = useCallback(() => {\r\n+    if (saveProgress === 'idle') return null;\r\n+\r\n+    return (\r\n+    <div className=\"fixed bottom-4 right-4\">\r\n+      {saveProgress === 'saving' && (\r\n+        <div className=\"flex items-center gap-2 bg-background border rounded-lg px-4 py-2 shadow-lg\">\r\n+          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n+          <span className=\"text-sm\">Saving changes...</span>\r\n+        </div>\r\n+      )}\r\n+      {saveProgress === 'saved' && (\r\n+        <div className=\"flex items-center gap-2 bg-green-500 text-white rounded-lg px-4 py-2 shadow-lg\">\r\n+          <Check className=\"h-4 w-4\" />\r\n+          <span className=\"text-sm\">Changes saved</span>\r\n+        </div>\r\n+      )}\r\n+      {saveProgress === 'error' && (\r\n+        <div className=\"flex items-center gap-2 bg-destructive text-destructive-foreground rounded-lg px-4 py-2 shadow-lg\">\r\n+          <X className=\"h-4 w-4\" />\r\n+          <span className=\"text-sm\">Error saving changes</span>\r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+  }, [saveProgress]);\r\n+\r\n+  // Update handlers\r\n+  const handleGradeSelect = (gradeId: string) => {\r\n+    // Always keep sidebar open during selection\r\n+    setIsSidebarCollapsed(false);\r\n+    setIsSidebarLocked(true);\r\n+    \r\n+    // Batch state updates\r\n+    requestAnimationFrame(() => {\r\n+      setSelectedGradeId(gradeId);\r\n+      setSelectedGrade(gradeId);\r\n+      setSelectedTopicId(null);\r\n+      setSelectedTopic('');\r\n+      setSelectedSubtopicId(null);\r\n+      setSelectedSubtopic('');\r\n+      setCurrentLessonId(null);\r\n+      \r\n+      if (isViewMode) {\r\n+        setExpandedGrade(gradeId);\r\n+      }\r\n+    });\r\n+  };\r\n+\r\n+  const handleTopicSelect = (value: string) => {\r\n+    setSelectedTopicId(value);\r\n+    setSelectedTopic(value);\r\n+    setSelectedSubtopicId(null);\r\n+    setSelectedSubtopic('');\r\n+    setCurrentLessonId(null);\r\n+  };\r\n+\r\n+  const handleSubtopicSelect = (value: string) => {\r\n+    setSelectedSubtopicId(value);\r\n+    setSelectedSubtopic(value);\r\n+    setCurrentLessonId(null);\r\n+  };\r\n+\r\n+  const handleLessonSelect = async (lessonId: string) => {\r\n+    try {\r\n+      // Lock sidebar during selection\r\n+      setIsSidebarLocked(true);\r\n+      setIsSidebarCollapsed(false);\r\n+      setCurrentLessonId(lessonId);\r\n+      \r\n+      // 1. Fetch lesson data\r\n+      const { data: lessonData, error: lessonError } = await supabase\r\n+        .from('lessons')\r\n+        .select('*')\r\n+        .eq('id', lessonId)\r\n+        .single();\r\n+\r\n+      if (lessonError) throw lessonError;\r\n+\r\n+      // 2. Fetch questions with exercise prompts\r\n+      const { data: questionsData, error: questionsError } = await supabase\r\n+        .from('questions')\r\n+        .select(`\r\n+          *,\r\n+          exercise_prompts (*)\r\n+        `)\r\n+        .eq('lesson_id', lessonId);\r\n+\r\n+      if (questionsError) throw questionsError;\r\n+\r\n+      // 3. Fetch activities - removed order_index\r\n+      const { data: activitiesData, error: activitiesError } = await supabase\r\n+        .from('activities')\r\n+        .select('*')\r\n+        .eq('lesson_id', lessonId);\r\n+\r\n+      if (activitiesError) throw activitiesError;\r\n+\r\n+      // Format questions with their exercise prompts\r\n+      const formattedQuestions = questionsData?.map(q => ({\r\n+        ...q,\r\n+        data: q.data || {},\r\n+        exercisePrompts: q.exercise_prompts || []\r\n+      })) || [];\r\n+\r\n+      // Set all states\r\n+      setLessonTitle(lessonData.title || '');\r\n+      setLessonContent(lessonData.content || '');\r\n+      setQuestions(formattedQuestions);\r\n+      setActivities(activitiesData || []);\r\n+\r\n+      // After successful load, unlock sidebar and allow collapse\r\n+      setTimeout(() => {\r\n+        setIsSidebarLocked(false);\r\n+        if (!isSidebarLocked) {\r\n+          setIsSidebarCollapsed(true);\r\n+        }\r\n+      }, 300);\r\n+\r\n+    } catch (error) {\r\n+      console.error('Error loading lesson:', error);\r\n+      toast.error('Failed to load lesson');\r\n+      // Reset states on error\r\n+      setLessonTitle('');\r\n+      setLessonContent('');\r\n+      setQuestions([]);\r\n+      setActivities([]);\r\n+    }\r\n+    if (!isSidebarLocked) {\r\n+      setIsSidebarCollapsed(true);\r\n+    }\r\n+  };\r\n+\r\n+  // Update the expansion handlers\r\n+  const handleTopicExpand = async (topicId: string) => {\r\n+    setExpandedTopic(expandedTopic === topicId ? null : topicId);\r\n+    setSelectedTopicId(topicId);\r\n+    \r\n+    // Load subtopics when topic is expanded\r\n+    if (topicId) {\r\n+      setIsLoadingSubtopics(true);\r\n+      try {\r\n+        const { data: subtopicsData, error } = await supabase\r\n+          .from('subtopics')\r\n+          .select('*')\r\n+          .eq('topic_id', topicId)\r\n+          .order('order_index');\r\n+\r\n+        if (error) throw error;\r\n+        setSubtopics(subtopicsData || []);\r\n+      } catch (error) {\r\n+        console.error('Error loading subtopics:', error);\r\n+        toast.error('Failed to load subtopics');\r\n+      } finally {\r\n+        setIsLoadingSubtopics(false);\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const handleSubtopicExpand = async (subtopicId: string) => {\r\n+    setExpandedSubtopic(expandedSubtopic === subtopicId ? null : subtopicId);\r\n+    setSelectedSubtopicId(subtopicId);\r\n+    \r\n+    if (subtopicId) {\r\n+      setIsLoadingLessons(true);\r\n+      try {\r\n+        const { data: lessonsData, error } = await supabase\r\n+          .from('lessons')\r\n+          .select('*')\r\n+          .eq('subtopic_id', subtopicId)\r\n+          .order('order_index');\r\n+\r\n+        if (error) throw error;\r\n+        setLessons(lessonsData || []);\r\n+      } catch (error) {\r\n+        console.error('Error loading lessons:', error);\r\n+        toast.error('Failed to load lessons');\r\n+      } finally {\r\n+        setIsLoadingLessons(false);\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const handleQuestionExpand = (index: number) => {\r\n+    setExpandedQuestion(expandedQuestion === index ? null : index);\r\n+  };\r\n+\r\n+  const handleActivityExpand = (index: number) => {\r\n+    setExpandedActivity(expandedActivity === index ? null : index);\r\n+  };\r\n+\r\n+  // Add effect to save mode changes to localStorage\r\n+  useEffect(() => {\r\n+    localStorage.setItem('lessonManagementViewMode', isViewMode.toString());\r\n+  }, [isViewMode]);\r\n+\r\n+  // Add handlers for creating new items\r\n+  const handleCreateGrade = async () => {\r\n+    try {\r\n+      const response = await fetch(`${API_ENDPOINT}/grades`, {\r\n+        method: 'POST',\r\n+        headers: { 'Content-Type': 'application/json' },\r\n+        body: JSON.stringify({ name: newItemData.name })\r\n+      });\r\n+\r\n+      if (!response.ok) throw new Error('Failed to create grade');\r\n+      const data = await response.json();\r\n+      \r\n+      if (!data.success) throw new Error(data.message || 'Failed to create grade');\r\n+      \r\n+      // Update grades list\r\n+      setGrades([...grades, data.data.grade]);\r\n+      setModalState({ ...modalState, showAddGrade: false });\r\n+      setNewItemData({ name: '', description: '' });\r\n+      toast.success('Grade created successfully');\r\n+    } catch (error) {\r\n+      console.error('Error creating grade:', error);\r\n+      toast.error('Failed to create grade');\r\n+    }\r\n+  };\r\n+\r\n+  const handleCreateTopic = async () => {\r\n+    if (!selectedGradeId) {\r\n+      toast.error('Please select a grade first');\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      const newTopic = await contentService.createTopic({\r\n+        title: newItemData.name, // Map from newItemData.name to title\r\n+        description: newItemData.description,\r\n+        gradeId: selectedGradeId\r\n+      });\r\n+\r\n+      setTopics(prev => [...prev, newTopic]);\r\n+      toast.success('Topic created successfully');\r\n+      setModalState({ ...modalState, showAddTopic: false });\r\n+      setNewItemData({ name: '', description: '' });\r\n+    } catch (err) {\r\n+      const error = err instanceof Error ? err.message : String(err);\r\n+      console.error('Error creating topic:', error);\r\n+      toast.error('Failed to create topic');\r\n+    }\r\n+  };\r\n+    \r\n+  \r\n+\r\n+\r\n+  const handleCreateSubtopic = async (data: { title: string; description?: string }) => {\r\n+    try {\r\n+      if (!selectedTopicId) {\r\n+        toast.error('Please select a topic first');\r\n+        return;\r\n+      }\r\n+\r\n+      const newSubtopic = await contentService.createSubtopic({\r\n+        ...data,\r\n+        topicId: selectedTopicId\r\n+      });\r\n+\r\n+      setSubtopics(prev => [...prev, {\r\n+        _id: newSubtopic.id,\r\n+        id: newSubtopic.id,\r\n+        name: newSubtopic.title,\r\n+        title: newSubtopic.title,\r\n+        description: newSubtopic.description,\r\n+        topic_id: newSubtopic.topic_id,\r\n+        orderIndex: prev.length,\r\n+        lessons: []\r\n+      }]);\r\n+\r\n+      toast.success('Subtopic created successfully');\r\n+      setModalState(prev => ({ ...prev, showAddSubtopic: false }));\r\n+    } catch (err) {\r\n+      const error = err as Error;\r\n+      console.error('Error creating subtopic:', error);\r\n+      toast.error('Failed to create subtopic');\r\n+    }\r\n+  };\r\n+\r\n+  const handleUpdateSubtopic = async (subtopicId: string, data: { title: string; description?: string }) => {\r\n+    try {\r\n+      const { data: updatedSubtopic, error } = await supabase\r\n+        .from('sub_topics')\r\n+        .update(data)\r\n+        .eq('id', subtopicId)\r\n+        .select()\r\n+        .single();\r\n+\r\n+      if (error) throw error;\r\n+      \r\n+      setSubtopics(prev => prev.map(subtopic => \r\n+        subtopic.id === subtopicId \r\n+          ? {\r\n+              ...subtopic,\r\n+              name: updatedSubtopic.title\r\n+            }\r\n+          : subtopic\r\n+      ));\r\n+\r\n+      toast.success('Subtopic updated successfully');\r\n+    } catch (err) {\r\n+      const error = err as Error;\r\n+      console.error('Error updating subtopic:', error);\r\n+      toast.error('Failed to update subtopic');\r\n+    }\r\n+  };\r\n+\r\n+  const handleDeleteSubtopic = async (subtopicId: string) => {\r\n+    try {\r\n+      await contentService.deleteSubtopic(subtopicId);\r\n+      setSubtopics(prev => prev.filter(subtopic => subtopic.id !== subtopicId));\r\n+      setSelectedSubtopicId(null);\r\n+      toast.success('Subtopic deleted successfully');\r\n+    } catch (err) {\r\n+      const error = err as Error;\r\n+      console.error('Error deleting subtopic:', error);\r\n+      toast.error('Failed to delete subtopic');\r\n+    }\r\n+  };\r\n+\r\n+  const handleCreateLesson = async () => {\r\n+    if (!selectedSubtopicId) {\r\n+      toast.error('Please select a subtopic first');\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      // First create the lesson\r\n+      const { data: newLesson, error: lessonError } = await supabase\r\n+        .from('lessons')\r\n+        .insert({\r\n+          title: newItemData.name,\r\n+          duration: 0,\r\n+          topic_id: selectedTopicId,\r\n+          subtopic_id: selectedSubtopicId,\r\n+          content: '', // Empty rich text content initially\r\n+          status: 'draft'\r\n+        })\r\n+        .select()\r\n+        .single();\r\n+\r\n+      if (lessonError) throw lessonError;\r\n+\r\n+      // Create initial question\r\n+      const { data: newQuestion, error: questionError } = await supabase\r\n+        .from('questions')\r\n+        .insert({\r\n+          lesson_id: newLesson.id,\r\n+          type: 'speaking', // default type\r\n+          title: 'Question 1',\r\n+          data: {\r\n+            prompt: '',\r\n+            teacherScript: '',\r\n+            options: []\r\n+          },\r\n+          order_index: 0\r\n+        })\r\n+        .select()\r\n+        .single();\r\n+\r\n+      if (questionError) throw questionError;\r\n+\r\n+      // Create initial exercise prompts for the question\r\n+      const { error: promptsError } = await supabase\r\n+        .from('exercise_prompts')\r\n+        .insert([\r\n+          {\r\n+            question_id: newQuestion.id,\r\n+            text: '',\r\n+            type: 'image',\r\n+            narration: '',\r\n+            saytext: '',\r\n+            media: [],\r\n+            order_index: 0\r\n+          },\r\n+          {\r\n+            question_id: newQuestion.id,\r\n+            text: '',\r\n+            type: 'gif',\r\n+            narration: '',\r\n+            saytext: '',\r\n+            media: [],\r\n+            order_index: 1\r\n+          }\r\n+        ]);\r\n+\r\n+      if (promptsError) throw promptsError;\r\n+\r\n+      // Create initial activity\r\n+      // const { error: activityError } = await supabase\r\n+      //   .from('activities')\r\n+      //   .insert({\r\n+      //     lesson_id: newLesson.id,\r\n+      //     type: 'practice',\r\n+      //     title: '',\r\n+      //     instructions: '',\r\n+      //     media: [],\r\n+      //     data: {\r\n+      //       prompt: '',\r\n+      //       teacherScript: '',\r\n+      //       media: []\r\n+      //     },\r\n+      //     order_index: 0\r\n+      //   });\r\n+\r\n+      // if (activityError) throw activityError;\r\n+\r\n+      // Update UI state\r\n+      setLessons(prev => [...prev, newLesson]);\r\n+      setCurrentLessonId(newLesson.id);\r\n+      setLessonTitle(newLesson.title);\r\n+      setModalState({ ...modalState, showAddLesson: false });\r\n+      setNewItemData({ name: '', description: '' });\r\n+      toast.success('Lesson created successfully');\r\n+\r\n+    } catch (error) {\r\n+      console.error('Error creating lesson:', error);\r\n+      toast.error('Failed to create lesson');\r\n+    }\r\n+  };\r\n+\r\n+  // Effect to handle localStorage after mount\r\n+  useEffect(() => {\r\n+    const storedMode = localStorage.getItem('lessonManagementViewMode');\r\n+    if (storedMode !== null) {\r\n+      setIsViewMode(storedMode === 'true');\r\n+    }\r\n+  }, []);\r\n+\r\n+  // Update the cleanupModalState function\r\n+  const cleanupModalState = useCallback(() => {\r\n+    document.body.style.pointerEvents = '';\r\n+    document.body.style.overflow = '';\r\n+    setModalState({\r\n+      showAddGrade: false,\r\n+      showAddTopic: false,\r\n+      showAddSubtopic: false,\r\n+      showAddLesson: false\r\n+    });\r\n+    setNewItemData({ name: '', description: '' });\r\n+  }, []);\r\n+\r\n+  // Add a function to handle modal state changes\r\n+  const handleModalStateChange = useCallback((modalType: keyof typeof modalState, open: boolean) => {\r\n+    if (!open) {\r\n+      cleanupModalState();\r\n+    } else {\r\n+      setModalState(prev => ({ ...prev, [modalType]: open }));\r\n+    }\r\n+  }, [cleanupModalState]);\r\n+\r\n+  const handleContentSave = async (content: string) => {\r\n+    const loadingToast = toast.loading(\"Saving content...\", {\r\n+      action: {\r\n+        label: \"Close\",\r\n+        onClick: () => toast.dismiss()\r\n+      }\r\n+    });\r\n+    \r\n+    try {\r\n+      const { data: { session } } = await supabase.auth.getSession();\r\n+      if (!session?.user) {\r\n+        toast.error('Please sign in to save content', { id: loadingToast });\r\n+        return;\r\n+      }\r\n+\r\n+      // Get the most recent content entry\r\n+      const { data: existingContent, error: checkError } = await supabase\r\n+        .from('lesson_content')\r\n+        .select('id')\r\n+        .eq('lesson_id', currentLessonId)\r\n+        .order('updated_at', { ascending: false })\r\n+        .limit(1)\r\n+        .maybeSingle();\r\n+\r\n+      // If content exists, update it; if not, insert new\r\n+      const { error } = await supabase\r\n+        .from('lesson_content')\r\n+        .upsert({\r\n+          id: existingContent?.id, // This ensures we update if id exists\r\n+          lesson_id: currentLessonId,\r\n+          content: [content],\r\n+          content_type: 'text',\r\n+          metadata: {\r\n+            heading: contentHeading\r\n+          },\r\n+          user_id: session.user.id,\r\n+          updated_at: new Date().toISOString()\r\n+        }, {\r\n+          onConflict: 'id'  // This ensures we update based on lesson_id\r\n+        });\r\n+\r\n+      if (error) throw error;\r\n+\r\n+      // Save questions separately\r\n+      for (const question of questions) {\r\n+        const { exercisePrompts, ...questionData } = question; // Remove exercisePrompts from question data\r\n+        \r\n+        // Save question\r\n+        const { error: questionError } = await supabase\r\n+          .from('questions')\r\n+          .upsert(questionData, {\r\n+            onConflict: 'id'\r\n+          })\r\n+          .select();\r\n+\r\n+        if (questionError) throw questionError;\r\n+\r\n+        // Save exercise prompts\r\n+        if (exercisePrompts?.length > 0) {\r\n+          for (const prompt of exercisePrompts) {\r\n+            const { error: promptError } = await supabase\r\n+              .from('exercise_prompts')\r\n+              .upsert(prompt, {\r\n+                onConflict: 'id'\r\n+              })\r\n+              .select();\r\n+\r\n+            if (promptError) throw promptError;\r\n+          }\r\n+        }\r\n+      }\r\n+      \r\n+      toast.success(\"Content saved successfully\", {\r\n+        action: {\r\n+          label: \"Close\",\r\n+          onClick: () => toast.dismiss()\r\n+        },\r\n+        id: loadingToast,\r\n+      });\r\n+      setIsContentEditorOpen(false);\r\n+    } catch (error) {\r\n+      console.error('Error saving content:', error);\r\n+      toast.error(\"Failed to save content\", {\r\n+        action: {\r\n+          label: \"Close\",\r\n+          onClick: () => toast.dismiss()\r\n+        },\r\n+        id: loadingToast,\r\n+      });\r\n+    }\r\n+  };\r\n+\r\n+  // Add this component for inline editing\r\n+  const InlineEdit = ({ \r\n+    value, \r\n+    onSave, \r\n+    isEditing, \r\n+    setIsEditing, \r\n+    placeholder,\r\n+    className = \"\"\r\n+  }: InlineEditProps) => {\r\n+    const [tempValue, setTempValue] = useState(value);\r\n+    \r\n+    return isEditing ? (\r\n+      <div className=\"flex items-center gap-2\">\r\n+        <Input\r\n+          value={tempValue}\r\n+          onChange={(e) => setTempValue(e.target.value)}\r\n+          placeholder={placeholder}\r\n+          className={className}\r\n+          autoFocus\r\n+        />\r\n+        <Button\r\n+          size=\"sm\"\r\n+          variant=\"ghost\"\r\n+          onClick={() => {\r\n+            onSave(tempValue);\r\n+            setIsEditing(false);\r\n+          }}\r\n+        >\r\n+          <Check className=\"h-4 w-4 text-green-500\" />\r\n+        </Button>\r\n+        <Button\r\n+          size=\"sm\"\r\n+          variant=\"ghost\"\r\n+          onClick={() => setIsEditing(false)}\r\n+        >\r\n+          <X className=\"h-4 w-4 text-red-500\" />\r\n+        </Button>\r\n+      </div>\r\n+    ) : (\r\n+      <div \r\n+        className=\"group flex items-center gap-2 cursor-pointer\"\r\n+        onClick={() => setIsEditing(true)}\r\n+      >\r\n+        <span className={className}>{value || placeholder}</span>\r\n+        <Pencil className=\"h-4 w-4 opacity-0 group-hover:opacity-100 transition-opacity\" />\r\n+      </div>\r\n+    );\r\n+  };\r\n+\r\n+  // Add this effect to handle auto-collapse after lesson selection\r\n+  useEffect(() => {\r\n+    if (currentLessonId && selectedGradeId && selectedTopicId && selectedSubtopicId) {\r\n+      setIsSidebarLocked(false);\r\n+      // Optional: add a slight delay before collapsing\r\n+      setTimeout(() => setIsSidebarCollapsed(true), 300);\r\n+    }\r\n+  }, [currentLessonId, selectedGradeId, selectedTopicId, selectedSubtopicId]);\r\n+\r\n+  // Add individual save handlers\r\n+  // const handleSaveQuestion = async (question: Question, index: number) => {\r\n+  //   try {\r\n+  //     // Update status to saving\r\n+  //     setQuestionSaveStatuses(prev => [\r\n+  //       ...prev.filter(s => s.id !== question.id),\r\n+  //       { id: question.id, status: 'saving' }\r\n+  //     ]);\r\n+\r\n+  //     const questionUpsert = {\r\n+  //       id: question.id,\r\n+  //       lesson_id: currentLessonId,\r\n+  //       type: question.type,\r\n+  //       title: question.data?.prompt || 'Untitled Question',\r\n+  //       metadata: question.metadata || {},\r\n+  //       data: {\r\n+  //         prompt: question.data?.prompt || '',\r\n+  //         teacherScript: question.data?.teacherScript || '',\r\n+  //         ...question.data\r\n+  //       },\r\n+  //       order_index: index,\r\n+  //       created_at: new Date().toISOString(),\r\n+  //       updated_at: new Date().toISOString()\r\n+  //     };\r\n+\r\n+  //     const { error: questionError } = await supabase\r\n+  //       .from('questions')\r\n+  //       .upsert(questionUpsert);\r\n+\r\n+  //     if (questionError) throw questionError;\r\n+\r\n+  //     // Update status to saved\r\n+  //     setQuestionSaveStatuses(prev => [\r\n+  //       ...prev.filter(s => s.id !== question.id),\r\n+  //       { id: question.id, status: 'saved', lastSaved: new Date().toISOString() }\r\n+  //     ]);\r\n+\r\n+  //     toast.success(`Question ${index + 1} saved successfully`);\r\n+  //   } catch (error) {\r\n+  //     console.error('Error saving question:', error);\r\n+  //     setQuestionSaveStatuses(prev => [\r\n+  //       ...prev.filter(s => s.id !== question.id),\r\n+  //       { id: question.id, status: 'error' }\r\n+  //     ]);\r\n+  //     toast.error(`Failed to save question ${index + 1}`);\r\n+  //   }\r\n+  // };\r\n+\r\n+  const handleSavePrompt = async (questionId: string, prompt: ExercisePrompt, promptIndex: number) => {\r\n+    try {\r\n+      setPromptSaveStatuses(prev => [\r\n+        ...prev.filter(s => s.id !== prompt.id),\r\n+        { id: prompt.id || '', status: 'saving' } as SaveStatus\r\n+      ]);\r\n+\r\n+      const promptUpsert = {\r\n+        id: prompt.id,\r\n+        question_id: questionId,\r\n+        text: prompt.text || '',\r\n+        type: prompt.type || 'text',\r\n+        narration: prompt.narration || '',\r\n+        saytext: prompt.saytext || '',\r\n+        media: prompt.media || [],\r\n+        order_index: promptIndex,\r\n+        created_at: prompt.created_at || new Date().toISOString(),\r\n+        updated_at: new Date().toISOString()\r\n+      };\r\n+\r\n+      const { error: promptError } = await supabase\r\n+        .from('exercise_prompts')\r\n+        .upsert(promptUpsert);\r\n+\r\n+      if (promptError) throw promptError;\r\n+\r\n+      setPromptSaveStatuses(prev => [\r\n+        ...prev.filter(s => s.id !== prompt.id),\r\n+        { id: prompt.id || '', status: 'saved', lastSaved: new Date().toISOString() } as SaveStatus\r\n+      ]);\r\n+\r\n+      toast.success(`Prompt ${promptIndex + 1} saved successfully`);\r\n+    } catch (error) {\r\n+      console.error('Error saving prompt:', error);\r\n+      setPromptSaveStatuses(prev => [\r\n+        ...prev.filter(s => s.id !== prompt.id),\r\n+        { id: prompt.id || '', status: 'error' } as SaveStatus\r\n+      ]);\r\n+      toast.error(`Failed to save prompt ${promptIndex + 1}`);\r\n+    }\r\n+  };\r\n+\r\n+  // Add effect to mark items as draft when edited\r\n+  useEffect(() => {\r\n+    questions.forEach(question => {\r\n+      if (!questionSaveStatuses.find(s => s.id === question.id)) {\r\n+        setQuestionSaveStatuses(prev => [\r\n+          ...prev,\r\n+          { id: question.id, status: 'draft' }\r\n+        ]);\r\n+      }\r\n+    });\r\n+  }, [questions]);\r\n+\r\n+  // Add this function with your other handlers\r\n+  const handleRefreshLesson = async () => {\r\n+    if (!currentLessonId) {\r\n+      toast.error('No lesson selected');\r\n+      return;\r\n+    }\r\n+    \r\n+    try {\r\n+      toast.loading('Refreshing lesson content...', {\r\n+        action: {\r\n+          label: \"Close\",\r\n+          onClick: () => toast.dismiss()\r\n+        },\r\n+      });\r\n+      await handleLessonSelect(currentLessonId);\r\n+      toast.success('Content refreshed', {\r\n+        action: {\r\n+          label: \"Close\",\r\n+          onClick: () => toast.dismiss()\r\n+        },\r\n+      });\r\n+    } catch (error) {\r\n+      console.error('Error refreshing lesson:', error);\r\n+      toast.error('Failed to refresh content', {\r\n+        action: {\r\n+          label: \"Close\",\r\n+          onClick: () => toast.dismiss()\r\n+        },\r\n+      });\r\n+    }\r\n+  };\r\n+\r\n+  // Add this function to handle refresh\r\n+  const handleRefreshContent = async () => {\r\n+    if (!currentLessonId) {\r\n+      toast.error('No lesson selected');\r\n+      return;\r\n+    }\r\n+    \r\n+    toast.loading('Refreshing content...');\r\n+    try {\r\n+      await loadLessonContent(currentLessonId);\r\n+      toast.success('Content refreshed');\r\n+    } catch (error) {\r\n+      console.error('Refresh error:', error);\r\n+      toast.error('Failed to refresh content');\r\n+    }\r\n+  };\r\n+\r\n+  // Update the sidebar hover mechanism\r\n+  const handleSidebarHover = useCallback(\r\n+    debounce((isHovering: boolean) => {\r\n+      if (!isSidebarLocked && !isNavigating && !isDropdownOpen) {\r\n+        if (isHovering || document.activeElement?.closest('.sidebar-content')) {\r\n+          setIsSidebarCollapsed(false);\r\n+        } else {\r\n+          setTimeout(() => {\r\n+            if (!isDropdownOpen) { // Only collapse if dropdown is closed\r\n+              setIsSidebarCollapsed(true);\r\n+            }\r\n+          }, 300);\r\n+        }\r\n+      }\r\n+    }, 100),\r\n+    [isSidebarLocked, isNavigating, isDropdownOpen]\r\n+  );\r\n+\r\n+  // Update the sidebar JSX\r\n+  <div \r\n+    className={cn(\r\n+      \"transition-all duration-300 ease-in-out relative\",\r\n+      isSidebarCollapsed ? \"w-20\" : \"w-80\",\r\n+      \"flex-shrink-0 group\"\r\n+    )}\r\n+    onMouseEnter={() => {\r\n+      handleSidebarHover(true);\r\n+      // Immediately expand on mouse enter\r\n+      if (!isSidebarLocked) {\r\n+        setIsSidebarCollapsed(false);\r\n+      }\r\n+    }}\r\n+    onMouseLeave={() => {\r\n+      // Only collapse if not interacting with content\r\n+      if (!document.activeElement?.closest('.sidebar-content')) {\r\n+        handleSidebarHover(false);\r\n+      }\r\n+    }}\r\n+    onFocus={() => setIsSidebarCollapsed(false)}\r\n+  >\r\n+    <Card className={cn(\r\n+      \"h-full relative sidebar-content\", // Added sidebar-content class\r\n+      \"transition-shadow duration-300\",\r\n+      \"hover:shadow-lg\"\r\n+    )}>\r\n+      {/* Rest of sidebar content */}\r\n+    </Card>\r\n+  </div>\r\n+\r\n+  // Update the sidebar and card styles\r\n+  return (\r\n+      <div className=\"container mx-auto py-8\">\r\n+        {/* Header */}\r\n+        <div className=\"flex items-center justify-between mb-2\">\r\n+          {/* ... header content ... */}\r\n+          <div className=\"flex items-center gap-4\">\r\n+            <Link href=\"/super-admin\">\r\n+              <Button variant=\"outline\" className=\"gap-2\">\r\n+                <ArrowLeft className=\"h-4 w-4\" />\r\n+                Back\r\n+              </Button>\r\n+            </Link>\r\n+            <div className=\"flex items-center gap-2\">\r\n+              <h1 className=\"text-2xl font-bold\">Lesson Management</h1>\r\n+              <Button\r\n+                variant=\"ghost\"\r\n+                size=\"icon\"\r\n+                onClick={handleRefreshLesson}\r\n+                className=\"ml-2\"\r\n+                title=\"Refresh lesson content\"\r\n+              >\r\n+                <RefreshCw className=\"h-4 w-4\" />\r\n+              </Button>\r\n+            </div>\r\n+            <p className=\"text-sm text-muted-foreground\">Create and manage your educational content</p>\r\n+          </div>\r\n+          <div className=\"flex items-center gap-2\">\r\n+            <Button\r\n+              variant=\"outline\"\r\n+              size=\"sm\"\r\n+              onClick={() => setShowHelpTips(!showHelpTips)}\r\n+              className=\"gap-2\"\r\n+            >\r\n+              {showHelpTips ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\r\n+              {showHelpTips ? 'Hide Tips' : 'Show Tips'}\r\n+            </Button>\r\n+          </div>\r\n+        </div>\r\n+        \r\n+        {/* Main content wrapper - Fix the layout here */}\r\n+        <div className=\"flex gap-6 h-[calc(100vh-200px)]\">\r\n+          {/* Improved sidebar */}\r\n+          <div \r\n+            className={cn(\r\n+              \"transition-all duration-300 ease-in-out relative\",\r\n+              isSidebarCollapsed ? \"w-20\" : \"w-80\",\r\n+              \"flex-shrink-0 group\"\r\n+            )}\r\n+            onMouseEnter={() => {\r\n+              handleSidebarHover(true);\r\n+              // Immediately expand on mouse enter\r\n+              if (!isSidebarLocked) {\r\n+                setIsSidebarCollapsed(false);\r\n+              }\r\n+            }}\r\n+            onMouseLeave={() => {\r\n+              // Only collapse if not interacting with content\r\n+              if (!document.activeElement?.closest('.sidebar-content')) {\r\n+                handleSidebarHover(false);\r\n+              }\r\n+            }}\r\n+            onFocus={() => setIsSidebarCollapsed(false)}\r\n+          >\r\n+            <Card className={cn(\r\n+              \"h-full relative sidebar-content\", // Added sidebar-content class\r\n+              \"transition-shadow duration-300\",\r\n+              \"hover:shadow-lg\"\r\n+            )}>\r\n+              {/* Lock button - only show after lesson selection */}\r\n+              {currentLessonId && (\r\n+                <Button\r\n+                  variant=\"ghost\"\r\n+                  size=\"sm\"\r\n+                  className=\"absolute top-2 right-2 z-10\"\r\n+                  onClick={() => {\r\n+                    setIsSidebarLocked(!isSidebarLocked);\r\n+                    if (!isSidebarLocked) {\r\n+                      setIsSidebarCollapsed(false);\r\n+                    }\r\n+                  }}\r\n+                >\r\n+                  {isSidebarLocked ? <Lock className=\"h-4 w-4\" /> : <Unlock className=\"h-4 w-4\" />}\r\n+                </Button>\r\n+              )}\r\n+\r\n+              {/* Sidebar content with overflow handling */}\r\n+              <div className={cn(\r\n+                \"transition-all duration-300 overflow-hidden\",\r\n+                isSidebarCollapsed ? \"opacity-0\" : \"opacity-100\"\r\n+              )}>\r\n+                <Card className=\"h-full\">\r\n+                  <CardHeader className=\"pb-3\">\r\n+                    <div className=\"flex items-center justify-between\">\r\n+                      <CardTitle className=\"text-lg font-semibold\">Content Management</CardTitle>\r\n+                      <TooltipProvider>\r\n+                        <Tooltip>\r\n+                          <TooltipTrigger>\r\n+                            <HelpCircle className=\"h-4 w-4 text-muted-foreground\" />\r\n+                          </TooltipTrigger>\r\n+                          <TooltipContent>\r\n+                            <p>Manage your educational content here</p>\r\n+                          </TooltipContent>\r\n+                        </Tooltip>\r\n+                      </TooltipProvider>\r\n+                      </div>\r\n+                    <CardDescription>Create and manage your lessons</CardDescription>\r\n+                  </CardHeader>\r\n+                  <CardContent className=\"space-y-4\">\r\n+                    {/* View/Edit Mode Toggle */}\r\n+                    <div className=\"grid grid-cols-2 gap-2 p-1 bg-muted rounded-lg\">\r\n+                      <Button\r\n+                        variant={isViewMode ? \"default\" : \"ghost\"}\r\n+                        size=\"sm\"\r\n+                        onClick={() => setIsViewMode(true)}\r\n+                        className=\"w-full\"\r\n+                      >\r\n+                        <Eye className=\"h-4 w-4 mr-2\" />\r\n+                        View\r\n+                      </Button>\r\n+                      <Button\r\n+                        variant={!isViewMode ? \"default\" : \"ghost\"}\r\n+                        size=\"sm\"\r\n+                        onClick={() => setIsViewMode(false)}\r\n+                        className=\"w-full\"\r\n+                      >\r\n+                        <Edit className=\"h-4 w-4 mr-2\" />\r\n+                        Edit\r\n+                      </Button>\r\n+                    </div>\r\n+\r\n+                    {/* Grade Selection */}\r\n+                    <div className=\"space-y-2\">\r\n+                      <div className=\"flex items-center justify-between\">\r\n+                        <Label htmlFor=\"grade-select\">Grade</Label>\r\n+                        {isViewMode && (\r\n+                          <Button variant=\"ghost\" size=\"sm\" onClick={() => setExpandedGrade(expandedGrade ? null : selectedGrade)}>\r\n+                            {expandedGrade ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n+                          </Button>\r\n+                        )}\r\n+                      </div>\r\n+                      <Select \r\n+                        value={selectedGradeId || ''}\r\n+                        onValueChange={handleGradeSelect}\r\n+                        onOpenChange={(open) => {\r\n+                          if (open) {\r\n+                            // Force sidebar to stay open and lock it\r\n+                            setIsSidebarCollapsed(false);\r\n+                            setIsSidebarLocked(true);\r\n+                          }\r\n+                        }}\r\n+                      >\r\n+                        <SelectTrigger \r\n+                          id=\"grade-select\" \r\n+                          className=\"w-full\"\r\n+                          onClick={(e) => {\r\n+                            e.stopPropagation(); // Prevent event bubbling\r\n+                            setIsSidebarCollapsed(false);\r\n+                            setIsSidebarLocked(true);\r\n+                          }}\r\n+                        >\r\n+                          <SelectValue placeholder=\"Select Grade\" />\r\n+                        </SelectTrigger>\r\n+                        <SelectContent \r\n+                          onCloseAutoFocus={(e) => {\r\n+                            e.preventDefault();\r\n+                            setIsSidebarLocked(true);\r\n+                            setIsSidebarCollapsed(false);\r\n+                          }}\r\n+                        >\r\n+                          {grades.map((grade: Grade) => (\r\n+                            <SelectItem \r\n+                              key={`grade-${grade.id || 'new'}`} \r\n+                              value={grade.id || ''}\r\n+                              onMouseDown={(e) => {\r\n+                                e.preventDefault();\r\n+                                e.stopPropagation();\r\n+                              }}\r\n+                            >\r\n+                              <div className=\"flex items-center gap-2\">\r\n+                                <BookOpen className=\"h-4 w-4 text-primary\" />\r\n+                                {grade.name}\r\n+                              </div>\r\n+                            </SelectItem>\r\n+                          ))}\r\n+                        </SelectContent>\r\n+                      </Select>\r\n+                      {!isViewMode && (\r\n+                      <Button \r\n+                        variant=\"outline\" \r\n+                        size=\"sm\" \r\n+                        className=\"w-full gap-2\"\r\n+                        onClick={() => setModalState({ ...modalState, showAddGrade: false })}\r\n+                      >\r\n+                        <Plus className=\"h-4 w-4\" />\r\n+                        Add New Grade\r\n+                      </Button>\r\n+                      )}\r\n+                    </div>\r\n+\r\n+                    {/* Content Tree View in View Mode */}\r\n+                    {isViewMode && expandedGrade && (\r\n+                      <div className=\"mt-4 space-y-4 overflow-y-auto max-h-[calc(100vh-300px)]\">\r\n+                        {topics.map((topic: Topic) => (\r\n+                          <Card \r\n+                            key={topic.id} \r\n+                            className={cn(\r\n+                              \"border-l-4 transition-all duration-200 hover:shadow-md\",\r\n+                              expandedTopic === topic.id \r\n+                                ? \"border-l-primary bg-accent/5\" \r\n+                                : \"border-l-primary/40 hover:border-l-primary\"\r\n+                            )}\r\n+                          >\r\n+                            <CardHeader \r\n+                              className=\"py-3 cursor-pointer select-none\" \r\n+                              onClick={() => handleTopicExpand(topic.id || '')}\r\n+                            >\r\n+                              <div className=\"flex items-center justify-between\">\r\n+                                <div className=\"flex items-center gap-2\">\r\n+                                  <Layers className=\"h-4 w-4 text-primary\" />\r\n+                                  <h4 className=\"font-medium\">{topic.title}</h4>\r\n+                                  <Badge variant=\"outline\" className=\"ml-2\">\r\n+                                    {subtopics.filter(s => s.topic_id === topic.id).length} Subtopics\r\n+                                  </Badge>\r\n+                                </div>\r\n+                                <div className=\"flex items-center gap-2\">\r\n+                                  <AlertDialog>\r\n+                                    <AlertDialogTrigger asChild>\r\n+                                      <Button \r\n+                                        variant=\"ghost\" \r\n+                                        size=\"sm\" \r\n+                                        className=\"hover:bg-destructive/10 hover:text-destructive\"\r\n+                                        onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}\r\n+                                      >\r\n+                                        <Trash className=\"h-4 w-4\" />\r\n+                                      </Button>\r\n+                                    </AlertDialogTrigger>\r\n+                                    {/* Alert Dialog Content */}\r\n+                                  </AlertDialog>\r\n+                                  <ChevronDown className={cn(\r\n+                                    \"h-4 w-4 transition-transform duration-200\",\r\n+                                    expandedTopic === topic.id ? \"rotate-0\" : \"-rotate-90\"\r\n+                                  )} />\r\n+                                </div>\r\n+                              </div>\r\n+                            </CardHeader>\r\n+\r\n+                            <AnimatePresence>\r\n+                              {expandedTopic === topic.id && (\r\n+                                <motion.div\r\n+                                  initial={{ height: 0, opacity: 0 }}\r\n+                                  animate={{ height: \"auto\", opacity: 1 }}\r\n+                                  exit={{ height: 0, opacity: 0 }}\r\n+                                  transition={{ duration: 0.2 }}\r\n+                                >\r\n+                                  <CardContent className=\"pt-0 pb-2\">\r\n+                                    <div className=\"pl-4 space-y-2\">\r\n+                                      {isLoadingSubtopics ? (\r\n+                                        <div className=\"flex items-center justify-center py-4\">\r\n+                                          <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\r\n+                                        </div>\r\n+                                      ) : (\r\n+                                        subtopics\r\n+                                          .filter(subtopic => subtopic.topic_id === topic.id)\r\n+                                          .map((subtopic: SubTopic) => (\r\n+                                            <div \r\n+                                              key={subtopic.id}\r\n+                                              className={cn(\r\n+                                                \"rounded-lg border transition-colors\",\r\n+                                                expandedSubtopic === subtopic.id \r\n+                                                  ? \"bg-accent/10 border-primary/20\" \r\n+                                                  : \"hover:bg-accent/5\"\r\n+                                              )}\r\n+                                            >\r\n+                                              <div \r\n+                                                className=\"p-3 cursor-pointer\"\r\n+                                                onClick={() => handleSubtopicExpand(subtopic.id || '')}\r\n+                                              >\r\n+                                                <div className=\"flex items-center justify-between py-2 cursor-pointer hover:bg-accent/50 rounded-md px-2\">\r\n+                                                  <div className=\"flex items-center gap-2\">\r\n+                                                    <BookOpen className=\"h-4 w-4 text-primary\" />\r\n+                                                    <span className=\"text-sm font-medium\">{subtopic.name}</span>\r\n+                                                    <Badge variant=\"outline\" className=\"ml-2\">\r\n+                                                      {lessons.filter(l => l.subtopic_id === subtopic.id).length} Lessons\r\n+                                                    </Badge>\r\n+                                                  </div>\r\n+                                                  <div className=\"flex items-center gap-2\">\r\n+                                                    <AlertDialog>\r\n+                                                      <AlertDialogTrigger asChild>\r\n+                                                        <Button \r\n+                                                          variant=\"ghost\" \r\n+                                                          size=\"sm\" \r\n+                                                          className=\"hover:bg-destructive/10 hover:text-destructive\"\r\n+                                                          onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}\r\n+                                                        >\r\n+                                                          <Trash className=\"h-4 w-4\" />\r\n+                                                        </Button>\r\n+                                                      </AlertDialogTrigger>\r\n+                                                      {/* Alert Dialog Content */}\r\n+                                                    </AlertDialog>\r\n+                                                    <ChevronDown className={cn(\r\n+                                                      \"h-4 w-4 transition-transform duration-200\",\r\n+                                                      expandedSubtopic === subtopic.id ? \"rotate-0\" : \"-rotate-90\"\r\n+                                                    )} />\r\n+                                                  </div>\r\n+                                                </div>\r\n+\r\n+                                                <AnimatePresence>\r\n+                                                  {expandedSubtopic === subtopic.id && (\r\n+                                                    <motion.div\r\n+                                                      initial={{ height: 0, opacity: 0 }}\r\n+                                                      animate={{ height: \"auto\", opacity: 1 }}\r\n+                                                      exit={{ height: 0, opacity: 0 }}\r\n+                                                      transition={{ duration: 0.2 }}\r\n+                                                    >\r\n+                                                      <div className=\"px-3 pb-3\">\r\n+                                                        <div className=\"space-y-2\">\r\n+                                                          {isLoadingLessons ? (\r\n+                                                            <div className=\"flex items-center justify-center py-4\">\r\n+                                                              <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\r\n+                                                            </div>\r\n+                                                          ) : (\r\n+                                                            lessons\r\n+                                                              .filter(lesson => lesson.subtopic_id === subtopic.id)\r\n+                                                              .map((lesson: Lesson) => (\r\n+                                                                <div\r\n+                                                                  key={lesson.id}\r\n+                                                                  onClick={() => handleLessonSelect(lesson.id || '')}\r\n+                                                                  className={cn(\r\n+                                                                    \"flex items-center gap-3 p-2 rounded-md cursor-pointer transition-colors\",\r\n+                                                                    \"hover:bg-accent\",\r\n+                                                                    currentLessonId === lesson.id && \"bg-accent\"\r\n+                                                                  )}\r\n+                                                                >\r\n+                                                                  <div className=\"flex items-center gap-2 flex-1\">\r\n+                                                                    <div className=\"flex h-8 w-8 items-center justify-center rounded-md border bg-background\">\r\n+                                                                      <BookOpen className=\"h-4 w-4 text-primary\" />\r\n+                                                                    </div>\r\n+                                                                    <div className=\"flex flex-col\">\r\n+                                                                      <span className=\"text-sm font-medium\">{lesson.title}</span>\r\n+                                                                      <span className=\"text-xs text-muted-foreground\">\r\n+                                                                        {lesson.duration} mins • {lesson.questions?.length || 0} Questions\r\n+                                                                      </span>\r\n+                                                                    </div>\r\n+                                                                  </div>\r\n+                                                                  <AlertDialog>\r\n+                                                                    <AlertDialogTrigger asChild>\r\n+                                                                      <Button \r\n+                                                                        variant=\"ghost\" \r\n+                                                                        size=\"sm\" \r\n+                                                                        className=\"hover:bg-destructive/10 hover:text-destructive\"\r\n+                                                                        onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}\r\n+                                                                      >\r\n+                                                                        <Trash className=\"h-4 w-4\" />\r\n+                                                                      </Button>\r\n+                                                                    </AlertDialogTrigger>\r\n+                                                                    {/* Alert Dialog Content */}\r\n+                                                                  </AlertDialog>\r\n+                                                                </div>\r\n+                                                              ))\r\n+                                                          )}\r\n+                                                        </div>\r\n+                                                      </div>\r\n+                                                    </motion.div>\r\n+                                                  )}\r\n+                                                </AnimatePresence>\r\n+                                              </div>\r\n+                                            </div>\r\n+                                          ))\r\n+                                      )}\r\n+                                    </div>\r\n+                                  </CardContent>\r\n+                                </motion.div>\r\n+                              )}\r\n+                            </AnimatePresence>\r\n+                          </Card>\r\n+                        ))}\r\n+                      </div>\r\n+                    )}\r\n+\r\n+                    {/* Regular Edit Mode Content */}\r\n+                    {!isViewMode && (\r\n+                      <>\r\n+                        {/* Existing Topic, Subtopic, and Lesson Selection UI */}\r\n+                      {/* Topic Selection */}\r\n+                        {selectedGradeId && (\r\n+                      <div className=\"space-y-2\">\r\n+                        <div className=\"flex items-center justify-between\">\r\n+                        <Label htmlFor=\"topic-select\">Topic</Label>\r\n+                        </div>\r\n+                        <Select \r\n+                              value={selectedTopicId || ''} \r\n+                              onValueChange={handleTopicSelect}\r\n+                        >\r\n+                          <SelectTrigger id=\"topic-select\" className=\"w-full\">\r\n+                            <SelectValue placeholder=\"Select Topic\" />\r\n+                          </SelectTrigger>\r\n+                          <SelectContent>\r\n+                                {topics.map((topic: Topic) => (\r\n+                                  <SelectItem \r\n+                                    key={`topic-${topic.id || 'new'}`} \r\n+                                    value={topic.id || ''}\r\n+                                  >\r\n+                                  <div className=\"flex items-center gap-2\">\r\n+                                  <Layers className=\"h-4 w-4 text-primary\" />\r\n+                                    {topic.title}\r\n+                                  </div>\r\n+                                </SelectItem>\r\n+                              ))}\r\n+                          </SelectContent>\r\n+                        </Select>\r\n+                        <Button \r\n+                          variant=\"outline\" \r\n+                          size=\"sm\" \r\n+                          className=\"w-full gap-2\"\r\n+                          onClick={() => setModalState({ ...modalState, showAddTopic: true })}\r\n+                        >\r\n+                          <Plus className=\"h-4 w-4\" />\r\n+                          Add New Topic\r\n+                        </Button>\r\n+                      </div>\r\n+                    )}\r\n+\r\n+                    {/* Subtopic Selection */}\r\n+                        {selectedTopicId && (\r\n+                      <div className=\"space-y-2\">\r\n+                        <div className=\"flex items-center justify-between\">\r\n+                        <Label htmlFor=\"subtopic-select\">Subtopic</Label>\r\n+                        </div>\r\n+                        <Select \r\n+                              value={selectedSubtopicId || ''} \r\n+                              onValueChange={handleSubtopicSelect}\r\n+                        >\r\n+                          <SelectTrigger id=\"subtopic-select\" className=\"w-full\">\r\n+                            <SelectValue placeholder=\"Select Subtopic\" />\r\n+                          </SelectTrigger>\r\n+                          <SelectContent>\r\n+                                {subtopics\r\n+                                  .filter(subtopic => subtopic.id)\r\n+                                  .map((subtopic, index) => (\r\n+                                    <SelectItem \r\n+                                      key={subtopic.id || `subtopic-${index}`}\r\n+                                      value={subtopic.id || ''}\r\n+                                    >\r\n+                                      {subtopic.title || 'Untitled Subtopic'}\r\n+                                    </SelectItem>\r\n+                                  ))}\r\n+                          </SelectContent>\r\n+                        </Select>\r\n+                        {!isViewMode && (\r\n+                          <Button \r\n+                            variant=\"outline\" \r\n+                            size=\"sm\" \r\n+                            className=\"w-full gap-2\"\r\n+                            onClick={() => setModalState({ ...modalState, showAddSubtopic: true })}\r\n+                          >\r\n+                            <Plus className=\"h-4 w-4\" />\r\n+                            Add New Subtopic\r\n+                          </Button>\r\n+                        )}\r\n+                      </div>\r\n+                    )}\r\n+\r\n+                    {/* Lesson Selection */}\r\n+                        {selectedSubtopicId && (\r\n+                      <div className=\"space-y-2\">\r\n+                        <div className=\"flex items-center justify-between\">\r\n+                          <Label htmlFor=\"lesson-select\">Lesson</Label>\r\n+                        </div>\r\n+                          <Select \r\n+                            value={currentLessonId || ''} \r\n+                            onValueChange={handleLessonSelect}\r\n+                            onOpenChange={(open) => {\r\n+                              setIsDropdownOpen(open);\r\n+                              if (open) {\r\n+                                setIsSidebarCollapsed(false);\r\n+                                setIsSidebarLocked(true);\r\n+                              } else {\r\n+                                // Small delay before unlocking to prevent immediate collapse\r\n+                                setTimeout(() => {\r\n+                                  setIsSidebarLocked(false);\r\n+                                }, 100);\r\n+                              }\r\n+                            }}\r\n+                          >\r\n+                            <SelectTrigger \r\n+                              id=\"lesson-select\" \r\n+                              className=\"w-full\"\r\n+                              onClick={(e) => {\r\n+                                e.stopPropagation();\r\n+                                setIsSidebarCollapsed(false);\r\n+                                setIsSidebarLocked(true);\r\n+                              }}\r\n+                            >\r\n+                              <SelectValue placeholder=\"Select Lesson\" />\r\n+                            </SelectTrigger>\r\n+                            <SelectContent>\r\n+                              {lessons\r\n+                                .filter((lesson): lesson is Lesson => lesson !== undefined && lesson !== null)\r\n+                                .map((lesson: Lesson) => (\r\n+                                  <SelectItem \r\n+                                    key={`lesson-${lesson.id || 'new'}`} \r\n+                                    value={lesson.id || ''}\r\n+                                  >\r\n+                                    <div className=\"flex items-center gap-2\">\r\n+                                      <BookOpen className=\"h-4 w-4 text-primary\" />\r\n+                                      {lesson.title || 'Untitled Lesson'}\r\n+                                    </div>\r\n+                                  </SelectItem>\r\n+                                ))}\r\n+                            </SelectContent>\r\n+                          </Select>\r\n+                    <Button \r\n+                            variant=\"outline\" \r\n+                            size=\"sm\" \r\n+                            className=\"w-full gap-2\"\r\n+                        onClick={() => setModalState({ ...modalState, showAddLesson: true })}\r\n+                          >\r\n+                            <Plus className=\"h-4 w-4\" />\r\n+                            Add New Lesson\r\n+                    </Button>\r\n+                      </div>\r\n+                        )}\r\n+                      </>\r\n+                    )}\r\n+                  </CardContent>\r\n+                </Card>\r\n+              </div>\r\n+\r\n+              {/* Collapsed view */}\r\n+              {isSidebarCollapsed && (\r\n+                <div className=\"absolute inset-0 flex flex-col items-center pt-12 gap-4\">\r\n+                  <BookOpen className=\"h-6 w-6 text-muted-foreground\" />\r\n+                  <div className=\"w-px h-full bg-border\" />\r\n+                </div>\r\n+              )}\r\n+            </Card>\r\n+          </div>\r\n+        \r\n+\r\n+          {/* Right Content Area */}\r\n+          <div className=\"flex-1 overflow-y-auto\">\r\n+            {isNavigating ? (\r\n+              <div className=\"flex items-center justify-center h-[400px]\">\r\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n+                <span className=\"ml-3\">Loading...</span>\r\n+              </div>\r\n+            ) : (\r\n+              <>\r\n+                {!selectedGradeId ? (\r\n+                  // Question Types Display Section\r\n+                  <div className=\"space-y-6\">\r\n+                    <Card>\r\n+                      <CardHeader>\r\n+                        <div className=\"flex items-center justify-between\">\r\n+                          <div>\r\n+                            <CardTitle className=\"text-xl font-semibold\">Available Question Types</CardTitle>\r\n+                            <CardDescription>Browse through different question formats and examples</CardDescription>\r\n+                          </div>\r\n+                          <TooltipProvider>\r\n+                            <Tooltip>\r\n+                              <TooltipTrigger>\r\n+                                <HelpCircle className=\"h-5 w-5 text-muted-foreground\" />\r\n+                              </TooltipTrigger>\r\n+                              <TooltipContent>\r\n+                                <p>Click on each type to see detailed examples</p>\r\n+                              </TooltipContent>\r\n+                            </Tooltip>\r\n+                          </TooltipProvider>\r\n+                        </div>\r\n+                      </CardHeader>\r\n+                      <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n+                        {Object.entries(QUESTION_TYPES).map(([type, details]) => (\r\n+                          <Card key={type} className=\"cursor-pointer hover:bg-accent/50 transition-colors\">\r\n+                            <CardHeader className=\"p-4\">\r\n+                              <div className=\"flex items-center justify-between mb-2\">\r\n+                                <Badge variant=\"outline\" className=\"bg-primary/5 text-lg\">\r\n+                                  {details.label}\r\n+                                </Badge>\r\n+                              </div>\r\n+                              <CardDescription className=\"text-sm\">\r\n+                                {details.description || 'No description available'}\r\n+                              </CardDescription>\r\n+                              <div className=\"mt-4\">\r\n+                                <div className=\"text-sm font-medium mb-2\">Example:</div>\r\n+                                <div className=\"p-3 rounded-md bg-muted/50 text-sm\">\r\n+                                  {type === 'multiple-choice' && (\r\n+                                    <>\r\n+                                      <div className=\"font-medium mb-2\">Q: What is the capital of France?</div>\r\n+                                      <div className=\"space-y-1 pl-4\">\r\n+                                        <div>A) Paris</div>\r\n+                                        <div>B) London</div>\r\n+                                        <div>C) Berlin</div>\r\n+                                        <div>D) Madrid</div>\r\n+                                      </div>\r\n+                                    </>\r\n+                                  )}\r\n+                                  {type === 'fill-in-blank' && (\r\n+                                    <div className=\"space-y-2\">\r\n+                                      <div>Complete the sentence:</div>\r\n+                                      <div>The sun rises in the <span className=\"bg-primary/20 px-2 rounded\">_____</span> and sets in the <span className=\"bg-primary/20 px-2 rounded\">_____</span>.</div>\r\n+                                    </div>\r\n+                                  )}\r\n+                                  {type === 'true-false' && (\r\n+                                    <div className=\"space-y-2\">\r\n+                                      <div className=\"font-medium\">Statement:</div>\r\n+                                      <div>The Earth is flat.</div>\r\n+                                      <div className=\"mt-2\">\r\n+                                        <Badge variant=\"outline\" className=\"mr-2\">True</Badge>\r\n+                                        <Badge variant=\"outline\">False</Badge>\r\n+                                      </div>\r\n+                                    </div>\r\n+                                  )}\r\n+                                  {type === 'matching' && (\r\n+                                    <div className=\"space-y-2\">\r\n+                                      <div className=\"font-medium mb-2\">Match the countries with their capitals:</div>\r\n+                                      <div className=\"grid grid-cols-2 gap-4\">\r\n+                                        <div>\r\n+                                          1. France<br />\r\n+                                          2. Germany<br />\r\n+                                          3. Spain\r\n+                                        </div>\r\n+                                        <div>\r\n+                                          • Berlin<br />\r\n+                                          • Paris<br />\r\n+                                          • Madrid\r\n+                                        </div>\r\n+                                      </div>\r\n+                                    </div>\r\n+                                  )}\r\n+                                  {type === 'ordering' && (\r\n+                                    <div className=\"space-y-2\">\r\n+                                      <div className=\"font-medium mb-2\">Arrange in chronological order:</div>\r\n+                                      <div className=\"space-y-1\">\r\n+                                        <Badge variant=\"outline\" className=\"mr-2\">1</Badge>World War II<br />\r\n+                                        <Badge variant=\"outline\" className=\"mr-2\">2</Badge>Industrial Revolution<br />\r\n+                                        <Badge variant=\"outline\" className=\"mr-2\">3</Badge>Renaissance\r\n+                                      </div>\r\n+                                    </div>\r\n+                                  )}\r\n+                                  {type === 'short-answer' && (\r\n+                                    <div className=\"space-y-2\">\r\n+                                      <div className=\"font-medium\">Question:</div>\r\n+                                      <div>Explain the water cycle in 2-3 sentences.</div>\r\n+                                      <div className=\"mt-2 p-2 border border-dashed rounded-md border-primary/30\">\r\n+                                        Answer space\r\n+                                      </div>\r\n+                                    </div>\r\n+                                  )}\r\n+                                </div>\r\n+                              </div>\r\n+                            </CardHeader>\r\n+                          </Card>\r\n+                        ))}\r\n+                      </CardContent>\r\n+                    </Card>\r\n+                  </div>\r\n+                ) : isViewMode ? (\r\n+                  <div className=\"space-y-6\">\r\n+                    {selectedGradeId ? (\r\n+                      <div className=\"grid grid-cols-1 gap-6\">\r\n+                        {topics.map((topic) => (\r\n+                          <Card key={topic.id} className=\"border-l-4 border-l-primary\">\r\n+                            <CardHeader>\r\n+                              <div className=\"flex items-center justify-between\">\r\n+                                <h3 className=\"text-lg font-semibold\">{topic.title}</h3>\r\n+                              </div>\r\n+                            </CardHeader>\r\n+                            <CardContent>\r\n+                              <div className=\"space-y-4\">\r\n+                                {subtopics\r\n+                                  .filter(subtopic => subtopic.topic_id === topic.id)\r\n+                                  .map((subtopic, index) => (\r\n+                                    <div key={subtopic.id || `subtopic-${index}`} className=\"border-l-2 pl-4\">\r\n+                                      <h4 className=\"text-md font-medium mb-2\">{subtopic.name || 'Untitled Subtopic'}</h4>\r\n+                                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n+                                        {lessons\r\n+                                          .filter(lesson => lesson.subtopic_id === subtopic.id)\r\n+                                          .map((lesson) => (\r\n+                                            <Card \r\n+                                              key={lesson.id} \r\n+                                              className={cn(\r\n+                                                \"cursor-pointer transition-all duration-200\",\r\n+                                                \"hover:shadow-md hover:translate-y-[-2px]\",\r\n+                                                \"hover:bg-accent/50 hover:border-primary/50\",\r\n+                                                \"active:translate-y-[0px]\",\r\n+                                                currentLessonId === lesson.id && \"border-primary bg-accent/50 shadow-md\",\r\n+                                                \"group\" // Enable group hover effects\r\n+                                              )}\r\n+                                              onClick={() => handleLessonSelect(lesson.id || '')}\r\n+                                            >\r\n+                                              <CardHeader className=\"p-4\">\r\n+                                                <div className=\"flex flex-col gap-2\">\r\n+                                                  <div className=\"flex items-center justify-between\">\r\n+                                                    <div className=\"flex items-center gap-2\">\r\n+                                                      <BookOpen className={cn(\r\n+                                                        \"h-4 w-4 text-primary\",\r\n+                                                        \"transition-transform duration-200\",\r\n+                                                        \"group-hover:scale-110\"\r\n+                                                      )} />\r\n+                                                      <span className=\"font-medium\">{lesson.title}</span>\r\n+                                                    </div>\r\n+                                                    <Button\r\n+                                                      variant=\"outline\"\r\n+                                                      size=\"sm\"\r\n+                                                      className={cn(\r\n+                                                        \"opacity-0 group-hover:opacity-100\",\r\n+                                                        \"transition-all duration-200\",\r\n+                                                        \"hover:bg-primary hover:text-primary-foreground\"\r\n+                                                      )}\r\n+                                                      disabled={!lesson.content || currentLessonId !== lesson.id}\r\n+                                                      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\r\n+                                                        e.stopPropagation();\r\n+                                                        window.location.href = `/teacher/lessons/${lesson.id}`;\r\n+                                                      }}\r\n+                                                    >\r\n+                                                      Start Lesson\r\n+                                                    </Button>\r\n+                                                  </div>\r\n+                                                  <div className=\"flex items-center gap-2\">\r\n+                                                    <Badge variant=\"outline\" className={cn(\r\n+                                                      \"bg-primary/5\",\r\n+                                                      \"transition-colors duration-200\",\r\n+                                                      \"group-hover:bg-primary/10\"\r\n+                                                    )}>\r\n+                                                      {lesson.questions?.length || 0} Questions\r\n+                                                    </Badge>\r\n+                                                    <Badge variant=\"outline\" className={cn(\r\n+                                                      \"bg-primary/5\",\r\n+                                                      \"transition-colors duration-200\",\r\n+                                                      \"group-hover:bg-primary/10\"\r\n+                                                    )}>\r\n+                                                      {lesson.activities?.length || 0} Activities\r\n+                                                    </Badge>\r\n+                                                  </div>\r\n+                                                </div>\r\n+                                              </CardHeader>\r\n+                                            </Card>\r\n+                                          ))}\r\n+                                      </div>\r\n+                                    </div>\r\n+                                  ))}\r\n+                              </div>\r\n+                            </CardContent>\r\n+                          </Card>\r\n+                        ))}\r\n+                      </div>\r\n+                    ) : (\r\n+                      <div className=\"text-center py-20\">\r\n+                        <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\r\n+                        <h3 className=\"text-lg font-medium\">Select a Grade</h3>\r\n+                        <p className=\"text-sm text-muted-foreground\">\r\n+                          Choose a grade from the left panel to start managing content\r\n+                        </p>\r\n+                      </div>\r\n+                    )}\r\n+                  </div>\r\n+                ) : (\r\n+                  // Edit Mode Content\r\n+                  <div className=\"space-y-4\">\r\n+                    {/* Lesson Title */}\r\n+                    <Card>\r\n+                      <CardHeader>\r\n+                        <div className=\"flex items-center justify-between mb-4\">\r\n+                          <h2 className=\"text-2xl font-bold\">Lesson Content</h2>\r\n+                                                    <Button\r\n+                                                      variant=\"outline\"\r\n+                                                      size=\"sm\"\r\n+                            onClick={() => setIsContentEditorOpen(true)}\r\n+                          >\r\n+                            <Pencil className=\"h-4 w-4 mr-2\" />\r\n+                            Edit Content\r\n+                          </Button>\r\n+                        </div>\r\n+                      </CardHeader>\r\n+                      <CardContent className=\"space-y-4\">\r\n+                        {/* Lesson Title */}\r\n+                        <div className=\"flex items-center justify-between\">\r\n+                          <div className=\"space-y-1\">\r\n+                            <Label>Lesson Title</Label>\r\n+                            <InlineEdit\r\n+                              value={lessonTitle}\r\n+                              onSave={async (newTitle) => {\r\n+                                setLessonTitle(newTitle);\r\n+                                await handleSaveLesson();\r\n+                              }}\r\n+                              isEditing={isEditingTitle}\r\n+                              setIsEditing={setIsEditingTitle}\r\n+                              placeholder=\"Enter lesson title\"\r\n+                              className=\"text-lg font-medium\"\r\n+                            />\r\n+                          </div>\r\n+                        </div>\r\n+\r\n+                        {/* Content Editor and Display */}\r\n+                        <div className=\"space-y-4\">\r\n+                          {isContentEditorOpen ? (\r\n+                            <div className=\"border rounded-lg p-4\">\r\n+                              <div className=\"mb-4\">\r\n+                                <Label>Content Heading</Label>\r\n+                                <InlineEdit\r\n+                                  value={contentHeading}\r\n+                                  onSave={(newHeading) => setContentHeading(newHeading)}\r\n+                                  isEditing={isEditingHeading}\r\n+                                  setIsEditing={setIsEditingHeading}\r\n+                                  placeholder=\"Add content heading\"\r\n+                                  className=\"text-base text-muted-foreground\"\r\n+                                />\r\n+                              </div>\r\n+                              <RichTextEditor\r\n+                                value={lessonContent}\r\n+                                onChange={setLessonContent}\r\n+                                onSave={async (content) => {\r\n+                                  await handleContentSave(content);\r\n+                                  setIsContentEditorOpen(false);\r\n+                                }}\r\n+                                placeholder=\"Add lesson content here...\"\r\n+                              />\r\n+                            </div>\r\n+                          ) : lessonContent ? (\r\n+                            <div className=\"prose prose-sm max-w-none\">\r\n+                              {contentHeading && (\r\n+                                <h3 className=\"text-lg font-semibold mb-2\">{contentHeading}</h3>\r\n+                              )}\r\n+                              <div dangerouslySetInnerHTML={{ __html: lessonContent }} />\r\n+                            </div>\r\n+                          ) : (\r\n+                            <div className=\"text-center py-8 text-muted-foreground\">\r\n+                              Click 'Edit Content' to add lesson content\r\n+                            </div>\r\n+                          )}\r\n+                        </div>\r\n+                      </CardContent>\r\n+                    </Card>\r\n+\r\n+                    {/* Tabs */}\r\n+                    <Tabs defaultValue=\"questions\" className=\"mt-6\">\r\n+                    <TabsList className=\"grid w-full grid-cols-2\">\r\n+                        <TabsTrigger value=\"questions\">\r\n+                          <MessageSquare className=\"h-4 w-4 mr-2\" />\r\n+                        Questions\r\n+                      </TabsTrigger>\r\n+                        <TabsTrigger value=\"activities\">\r\n+                          <ActivityIcon className=\"h-4 w-4 mr-2\" />\r\n+                        Activities\r\n+                      </TabsTrigger>\r\n+                    </TabsList>\r\n+\r\n+                      {/* Questions Tab */}\r\n+                      <TabsContent value=\"questions\" className=\"space-y-4\">\r\n+                      <CardHeader>\r\n+                          <CardDescription>Add and manage questions for this lesson</CardDescription>\r\n+                      </CardHeader>\r\n+                        {questions.map((question, index) => (\r\n+                          <Card key={index} className={cn(\r\n+                            \"relative border-l-4 transition-colors duration-200\",\r\n+                            expandedQuestion === index ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\r\n+                          )}>\r\n+                            <CardHeader className=\"pb-3\">\r\n+                              <div className=\"flex items-center justify-between gap-4\">\r\n+                                <div className=\"flex items-center gap-3 min-w-0 flex-1\">\r\n+                                  <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n+                                    <span className=\"px-2 py-1 bg-primary/10 rounded-md text-sm font-semibold text-primary whitespace-nowrap\">\r\n+                                      Q {index + 1}\r\n+                                    </span>\r\n+                                    <Badge variant=\"outline\" className=\"whitespace-nowrap\">\r\n+                                      {QUESTION_TYPES[question.type as keyof typeof QUESTION_TYPES]?.label || question.type}\r\n+                                    </Badge>\r\n+                                    {question.isDraft && (\r\n+                                      <Badge variant=\"secondary\" className=\"whitespace-nowrap\">Draft</Badge>\r\n+                                )}\r\n+                                  </div>\r\n+                                      {expandedQuestion !== index && (\r\n+                                        <div className=\"text-sm text-muted-foreground truncate\">\r\n+                                          {question.title || 'No question text'} - {question.content || 'No question texts'}\r\n+                                        </div>\r\n+                                      )}\r\n+                                    </div>\r\n+                                    <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n+                                      <Button\r\n+                                        variant=\"ghost\"\r\n+                                        size=\"sm\"\r\n+                                        onClick={() => handleQuestionExpand(index)}\r\n+                                      >\r\n+                                        {expandedQuestion === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n+                                      </Button>\r\n+                                      <Button\r\n+                                        variant=\"ghost\"\r\n+                                        size=\"sm\"\r\n+                                        onClick={() => handleRemoveQuestion(index)}\r\n+                                      >\r\n+                                        <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n+                                      </Button>\r\n+                                    </div>\r\n+                                  </div>\r\n+                                </CardHeader>\r\n+                                {expandedQuestion === index && (\r\n+                                  <CardContent>\r\n+                                    <QuestionForm\r\n+                                      key={index}\r\n+                                      question={{ \r\n+                                        ...question, \r\n+                                        lesson_id: currentLessonId || '',\r\n+                                        type: isValidQuestionType(question.type) ? question.type : 'speaking',\r\n+                                        data: {\r\n+                                          prompt: question.data?.prompt ?? '',\r\n+                                          teacher_script: question.data?.teacher_script ?? '',\r\n+                                          followup_prompt: question.data?.followup_prompt ?? [],\r\n+                                          sample_answer: question.data?.sample_answer ?? '',\r\n+                                          \r\n+                                        } \r\n+                                      }}\r\n+                                      index={index}\r\n+                                      onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\r\n+                                        await handleUpdateQuestion(index, {\r\n+                                          ...updatedQuestion,\r\n+                                          data: {\r\n+                                            prompt: updatedQuestion.data?.prompt ?? '',\r\n+                                            teacher_script: updatedQuestion.data?.teacher_script ?? '',\r\n+                                            followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\r\n+                                            sample_answer: updatedQuestion.data?.sample_answer ?? '',\r\n+                                            metadata: updatedQuestion.metadata ?? {},\r\n+                                            },\r\n+                                            correct_answer: updatedQuestion.correct_answer ?? '',\r\n+                                            content: updatedQuestion.content ?? ''  // Add default value\r\n+                                        });\r\n+                                      }}\r\n+                                      onRemove={handleRemoveQuestion}\r\n+                                      onAddExercisePrompt={handleAddExercisePrompt}\r\n+                                      onRemoveExercisePrompt={handleRemoveExercisePrompt}\r\n+                                      onExercisePromptChange={handleExercisePromptChange}\r\n+                                    /><Button \r\n+                                    size=\"sm\"\r\n+                                    variant=\"outline\"\r\n+                                    onClick={() => handleSaveQuestion(question, index)}\r\n+                                    className=\"ml-2\"\r\n+                                  >\r\n+                                    {questionSaveStatuses.find(s => s.id === question.id)?.status === 'saving' ? (\r\n+                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n+                                    ) : (\r\n+                                      <Save className=\"h-4 w-4 mr-2\" />\r\n+                                    )}\r\n+                                    Save Question\r\n+                                                    </Button>\r\n+                                    {/* Exercise Prompts with Save Buttons */}\r\n+                                    {question.exercisePrompts?.map((prompt, promptIndex) => (\r\n+                                      <div key={`${question.id}-prompt-${promptIndex}`} className=\"mt-4\"> {/* Updated key */}\r\n+                                        <div className=\"flex items-center justify-between mb-2\">\r\n+                                          <h4 className=\"text-sm font-medium\">Exercise Prompt {promptIndex + 1}</h4>\r\n+                                          <div className=\"flex items-center gap-2\">\r\n+                                            <TooltipProvider>\r\n+                                              <Tooltip>\r\n+                                                <TooltipTrigger asChild>\r\n+                                                  <Button\r\n+                                                    size=\"sm\"\r\n+                                                    variant=\"outline\"\r\n+                                                    onClick={() => handleSavePrompt(question.id, prompt, promptIndex)}\r\n+                                                    disabled={promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving'}\r\n+                                                  >\r\n+                                                    {promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving' ? (\r\n+                                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n+                                                    ) : (\r\n+                                                      <Save className=\"h-4 w-4 mr-2\" />\r\n+                                                    )}\r\n+                                                    Save Prompt\r\n+                                                  </Button>\r\n+                                                </TooltipTrigger>\r\n+                                                <TooltipContent>\r\n+                                                  {`Status: ${promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}`}\r\n+                                                </TooltipContent>\r\n+                                              </Tooltip>\r\n+                                            </TooltipProvider>\r\n+                                            <Badge variant={\r\n+                                              promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saved'\r\n+                                                ? 'secondary'\r\n+                                                : promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'error'\r\n+                                                ? 'destructive'\r\n+                                                : 'default'\r\n+                                            }>\r\n+                                              {promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}\r\n+                                            </Badge>\r\n+                                                  </div>\r\n+                                        </div>\r\n+                                        <ExercisePromptCard\r\n+                                          key={prompt.id} // Add a unique key here\r\n+                                          prompt={prompt}\r\n+                                          promptIndex={promptIndex}\r\n+                                          onRemove={() => handleRemoveExercisePrompt(index, promptIndex)}\r\n+                                          onUpdate={(updatedPrompt: ExercisePrompt) => {\r\n+                                            // Prevent duplicate updates\r\n+                                            if (updatedPrompt.id === prompt.id) {\r\n+                                              handleExercisePromptChange(index, promptIndex, updatedPrompt);\r\n+                                            }\r\n+                                          }}\r\n+                                        />\r\n+                                      </div>\r\n+                                    ))}\r\n+                                  </CardContent>\r\n+                                )}\r\n+                              </Card>\r\n+                            ))}\r\n+\r\n+                            {/* Add Question Button */}\r\n+                            <div className=\"flex items-center justify-between\">\r\n+                              <QuestionTypeSelect \r\n+                                value={selectedQuestionType} \r\n+                                onChange={handleQuestionTypeChange}\r\n+                              />\r\n+                                        <Button\r\n+                                          onClick={handleAddQuestion}\r\n+                                          disabled={!selectedQuestionType}\r\n+                                        >\r\n+                                <Plus className=\"h-4 w-4 mr-2\" />\r\n+                                          Add Question\r\n+                                        </Button>\r\n+                                      </div>\r\n+                      </TabsContent>\r\n+\r\n+                      {/* Activities Tab */}\r\n+                      <TabsContent value=\"activities\" className=\"space-y-4\">\r\n+                      <CardHeader>\r\n+                          <CardDescription>Add and manage activities for this lesson</CardDescription>\r\n+                      </CardHeader>\r\n+                        {activities.map((activity, index) => (\r\n+                          <Card key={index}>\r\n+                            <CardHeader className=\"pb-3\">\r\n+                              <div className=\"flex items-center justify-between\">\r\n+                                  <div className=\"flex items-center gap-2\">\r\n+                                  <Badge variant=\"outline\">Activity {index + 1}</Badge>\r\n+                                  </div>\r\n+                                <div className=\"flex items-center gap-2\">\r\n+                                  <Button\r\n+                                    variant=\"ghost\"\r\n+                                    size=\"sm\"\r\n+                                    onClick={() => handleActivityExpand(index)}\r\n+                                  >\r\n+                                    {expandedActivity === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n+                                  </Button>\r\n+                                  <Button\r\n+                                    variant=\"ghost\"\r\n+                                    size=\"sm\"\r\n+                                    onClick={() => handleRemoveActivity(index)}\r\n+                                  >\r\n+                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n+                                  </Button>\r\n+                                </div>\r\n+                              </div>\r\n+                            </CardHeader>\r\n+                            {expandedActivity === index && (\r\n+                              <CardContent>\r\n+                                <div className=\"space-y-4\">\r\n+                                  <div className=\"space-y-2\">\r\n+                                    <Label>Instructions</Label>\r\n+                                    <Textarea\r\n+                                      value={activity.instructions}\r\n+                                      onChange={(e) => handleUpdateActivity(index, {\r\n+                                        ...activity,\r\n+                                        instructions: e.target.value\r\n+                                      })}\r\n+                                      placeholder=\"Enter activity instructions\"\r\n+                                    />\r\n+                                  </div>\r\n+                                    \r\n+                                    {/* Media Section */}\r\n+                                    <div className=\"space-y-2\">\r\n+                                      <Label>Media</Label>\r\n+                                      {activity.media?.map((media, mediaIndex) => (\r\n+                                        <div key={mediaIndex} className=\"flex items-center gap-2\">\r\n+                                          <Input\r\n+                                            value={media.url}\r\n+                                            onChange={(e) => {\r\n+                                              const updatedMedia = [...(activity.media || [])];\r\n+                                              updatedMedia[mediaIndex] = {\r\n+                                                type: media.type,\r\n+                                                url: e.target.value\r\n+                                              };\r\n+                                              handleUpdateActivity(index, {\r\n+                                                ...activity,\r\n+                                                media: updatedMedia\r\n+                                              });\r\n+                                            }}\r\n+                                            placeholder=\"Media URL\"\r\n+                                          />\r\n+                                          <Select\r\n+                                            value={media.type}\r\n+                                            onValueChange={(value) => {\r\n+                                              const updatedMedia = [...(activity.media || [])];\r\n+                                              updatedMedia[mediaIndex] = {\r\n+                                                type: value as 'image' | 'gif' | 'video',\r\n+                                                url: media.url\r\n+                                              };\r\n+                                              handleUpdateActivity(index, {\r\n+                                                ...activity,\r\n+                                                media: updatedMedia\r\n+                                              });\r\n+                                            }}\r\n+                                          >\r\n+                                            <SelectTrigger className=\"w-[120px]\">\r\n+                                              <SelectValue placeholder=\"Type\" />\r\n+                                            </SelectTrigger>\r\n+                                            <SelectContent>\r\n+                                              <SelectItem value=\"image\">Image</SelectItem>\r\n+                                              <SelectItem value=\"gif\">GIF</SelectItem>\r\n+                                              <SelectItem value=\"video\">Video</SelectItem>\r\n+                                            </SelectContent>\r\n+                                          </Select>\r\n+                                <Button\r\n+                                            variant=\"ghost\"\r\n+                                            size=\"sm\"\r\n+                                  onClick={() => {\r\n+                                              const updatedMedia = (activity.media || []).filter((_, i) => i !== mediaIndex);\r\n+                                              handleUpdateActivity(index, {\r\n+                                                ...activity,\r\n+                                                media: updatedMedia\r\n+                                          });\r\n+                                          }}\r\n+                                  >\r\n+                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n+                                  </Button>\r\n+                                </div>\r\n+                                        ))}\r\n+                                  <Button\r\n+                                    variant=\"outline\"\r\n+                                    size=\"sm\"\r\n+                                            onClick={() => {\r\n+                                              handleUpdateActivity(index, {\r\n+                                                ...activity,\r\n+                                                media: [\r\n+                                                  ...(activity.media || [])  ,\r\n+                                                  { url: '', type: 'image' }\r\n+                                                ]\r\n+                                              });\r\n+                                            }}\r\n+                                  >\r\n+                                    <Plus className=\"h-4 w-4 mr-2\" />\r\n+                                            Add Media\r\n+                                  </Button>\r\n+                                </div>\r\n+                                      </div>\r\n+                                    </CardContent>\r\n+                                  )}\r\n+                                </Card>\r\n+                              ))}\r\n+\r\n+                              {/* Add Activity Button */}\r\n+                              <Button\r\n+                                onClick={handleAddActivity}\r\n+                                className=\"w-full\"\r\n+                              >\r\n+                                <Plus className=\"h-4 w-4 mr-2\" />\r\n+                                Add Activity\r\n+                              </Button>\r\n+                          </TabsContent>\r\n+                        </Tabs>\r\n+                        </div>\r\n+                )}\r\n+\r\n+                    {/* Floating Save Button */}\r\n+                    <div className=\"fixed bottom-8 right-8 flex items-center gap-4\">\r\n+                      {saveProgress !== 'idle' && (\r\n+                        <div className={cn(\r\n+                          \"flex items-center gap-2 rounded-lg px-4 py-2 shadow-lg\",\r\n+                          {\r\n+                            \"bg-background border\": saveProgress === 'saving',\r\n+                            \"bg-green-500 text-white\": saveProgress === 'saved',\r\n+                            \"bg-destructive text-destructive-foreground\": saveProgress === 'error'\r\n+                          }\r\n+                        )}>\r\n+                          {saveProgress === 'saving' && (\r\n+                            <>\r\n+                              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n+                              <span className=\"text-sm\">Saving changes...</span>\r\n+                            </>\r\n+                          )}\r\n+                          {saveProgress === 'saved' && (\r\n+                            <>\r\n+                              <Check className=\"h-4 w-4\" />\r\n+                              <span className=\"text-sm\">Changes saved</span>\r\n+                            </>\r\n+                          )}\r\n+                          {saveProgress === 'error' && (\r\n+                            <>\r\n+                              <X className=\"h-4 w-4\" />\r\n+                              <span className=\"text-sm\">Error saving changes</span>\r\n+                            </>\r\n+                          )}\r\n+                        </div>\r\n+                      )}\r\n+                      <Button\r\n+                        onClick={handleSaveLesson}\r\n+                        disabled={saveProgress === 'saving'}\r\n+                        className=\"shadow-lg\"\r\n+                      >\r\n+                        {saveProgress === 'saving' ? (\r\n+                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\r\n+                        ) : (\r\n+                          <Save className=\"h-4 w-4 mr-2\" />\r\n+                        )}\r\n+                        {saveProgress === 'saving' ? 'Saving...' : 'Save Lesson'}\r\n+                      </Button>\r\n+                    </div>\r\n+                  </>\r\n+            )}\r\n+    </div>\r\n+    \r\n+\r\n+      {/* Floating Save Button */}\r\n+      {selectedSubtopicId && currentLessonId && (\r\n+          <div className=\"fixed bottom-4 right-4 flex flex-col gap-2\">\r\n+            <TooltipProvider>\r\n+              <Tooltip>\r\n+                <TooltipTrigger asChild>\r\n+                  <Button\r\n+                    size=\"icon\"\r\n+                    className=\"rounded-full h-12 w-12 shadow-lg\"\r\n+                    onClick={handleSaveLesson}\r\n+                    disabled={!selectedSubtopicId || !lessonTitle || questions.length === 0}\r\n+                  >\r\n+                    <Save className=\"h-6 w-6\" />\r\n+                  </Button>\r\n+                </TooltipTrigger>\r\n+                <TooltipContent>\r\n+                  <p>Save Lesson (Ctrl+S)</p>\r\n+                </TooltipContent>\r\n+              </Tooltip>\r\n+            </TooltipProvider>\r\n+          </div>\r\n+        )}\r\n+        <SaveFeedback />\r\n+\r\n+        {/* Add Grade Modal - do not delete */}\r\n+        {/* {modalState.showAddGrade && (\r\n+          <Dialog \r\n+            open={modalState.showAddGrade} \r\n+            onOpenChange={(open) => handleModalStateChange('showAddGrade', open)}\r\n+          >\r\n+            <DialogContent \r\n+              className=\"sm:max-w-[425px]\"\r\n+              onEscapeKeyDown={cleanupModalState}\r\n+              onPointerDownOutside={cleanupModalState}\r\n+            >\r\n+              <DialogHeader>\r\n+                <DialogTitle>Add New Grade</DialogTitle>\r\n+                <DialogDescription>Enter the details for the new grade.</DialogDescription>\r\n+              </DialogHeader>\r\n+              <div className=\"space-y-4 py-4\">\r\n+                <div className=\"space-y-2\">\r\n+                  <Label htmlFor=\"grade-name\">Grade Name</Label>\r\n+                  <Input\r\n+                    id=\"grade-name\"\r\n+                    value={newItemData.name}\r\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n+                    placeholder=\"Enter grade name\"\r\n+                  />\r\n+      </div>\r\n+              </div>\r\n+              <DialogFooter>\r\n+                <Button variant=\"outline\" onClick={() => {\r\n+                  setModalState({ ...modalState, showAddGrade: false });\r\n+                  setNewItemData({ name: '', description: '' });\r\n+                }}>\r\n+                  Cancel\r\n+                </Button>\r\n+                <Button onClick={handleCreateGrade} disabled={!newItemData.name}>Create Grade</Button>\r\n+              </DialogFooter>\r\n+            </DialogContent>\r\n+          </Dialog>\r\n+        )} */}\r\n+\r\n+        {/* Add Topic Modal */}\r\n+        {modalState.showAddTopic && (\r\n+          <Dialog \r\n+            open={modalState.showAddTopic} \r\n+            onOpenChange={(open) => handleModalStateChange('showAddTopic', open)}\r\n+          >\r\n+            <DialogContent \r\n+              className=\"sm:max-w-[425px]\"\r\n+              onEscapeKeyDown={cleanupModalState}\r\n+              onPointerDownOutside={cleanupModalState}\r\n+            >\r\n+              <DialogHeader>\r\n+                <DialogTitle>Add New Topic</DialogTitle>\r\n+                <DialogDescription>Enter the details for the new topic.</DialogDescription>\r\n+              </DialogHeader>\r\n+              <div className=\"space-y-4 py-4\">\r\n+                <div className=\"space-y-2\">\r\n+                  <Label htmlFor=\"topic-name\">Topic Name</Label>\r\n+                  <Input\r\n+                    id=\"topic-name\"\r\n+                    value={newItemData.name}\r\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n+                    placeholder=\"Enter topic name\"\r\n+                  />\r\n+                </div>\r\n+              </div>\r\n+              <DialogFooter>\r\n+                <Button variant=\"outline\" onClick={() => {\r\n+                  setModalState({ ...modalState, showAddTopic: false });\r\n+                  setNewItemData({ name: '', description: '' });\r\n+                }}>\r\n+                  Cancel\r\n+                </Button>\r\n+                <Button onClick={handleCreateTopic} disabled={!newItemData.name}>Create Topic</Button>\r\n+              </DialogFooter>\r\n+            </DialogContent>\r\n+          </Dialog>\r\n+        )}\r\n+\r\n+        {/* Add Subtopic Modal */}\r\n+        {modalState.showAddSubtopic && (\r\n+          <Dialog \r\n+            open={modalState.showAddSubtopic} \r\n+            onOpenChange={(open) => handleModalStateChange('showAddSubtopic', open)}\r\n+          >\r\n+            <DialogContent \r\n+              className=\"sm:max-w-[425px]\"\r\n+              onEscapeKeyDown={cleanupModalState}\r\n+              onPointerDownOutside={cleanupModalState}\r\n+            >\r\n+              <DialogHeader>\r\n+                <DialogTitle>Add New Subtopic</DialogTitle>\r\n+                <DialogDescription>Enter the details for the new subtopic.</DialogDescription>\r\n+              </DialogHeader>\r\n+              <div className=\"space-y-4 py-4\">\r\n+                <div className=\"space-y-2\">\r\n+                  <Label htmlFor=\"subtopic-name\">Subtopic Name</Label>\r\n+                  <Input\r\n+                    id=\"subtopic-name\"\r\n+                    value={newItemData.name}\r\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n+                    placeholder=\"Enter subtopic name\"\r\n+                  />\r\n+                </div>\r\n+              </div>\r\n+              <DialogFooter>\r\n+                <Button variant=\"outline\" onClick={() => {\r\n+                  setModalState({ ...modalState, showAddSubtopic: false });\r\n+                  setNewItemData({ name: '', description: '' });\r\n+                }}>\r\n+                  Cancel\r\n+                </Button>\r\n+                <Button onClick={() => handleCreateSubtopic({ title: newItemData.name })} disabled={!newItemData.name}>Create Subtopic</Button>\r\n+              </DialogFooter>\r\n+            </DialogContent>\r\n+          </Dialog>\r\n+        )}\r\n+\r\n+        {/* Add Lesson Modal */}\r\n+        {modalState.showAddLesson && (\r\n+          <Dialog \r\n+            open={modalState.showAddLesson} \r\n+            onOpenChange={(open) => handleModalStateChange('showAddLesson', open)}\r\n+          >\r\n+            <DialogContent \r\n+              className=\"sm:max-w-[425px]\"\r\n+              onEscapeKeyDown={cleanupModalState}\r\n+              onPointerDownOutside={cleanupModalState}\r\n+            >\r\n+              <DialogHeader>\r\n+                <DialogTitle>Add New Lesson</DialogTitle>\r\n+                <DialogDescription>Enter the details for the new lesson.</DialogDescription>\r\n+              </DialogHeader>\r\n+              <div className=\"space-y-4 py-4\">\r\n+                <div className=\"space-y-2\">\r\n+                  <Label htmlFor=\"lesson-name\">Lesson Title</Label>\r\n+                  <Input\r\n+                    id=\"lesson-name\"\r\n+                    value={newItemData.name}\r\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n+                    placeholder=\"Enter lesson title\"\r\n+                  />\r\n+                </div>\r\n+              </div>\r\n+              <DialogFooter>\r\n+                <Button variant=\"outline\" onClick={() => {\r\n+                  setModalState({ ...modalState, showAddLesson: false });\r\n+                  setNewItemData({ name: '', description: '' });\r\n+                }}>\r\n+                  Cancel\r\n+                </Button>\r\n+                <Button onClick={handleCreateLesson} disabled={!newItemData.name}>Create Lesson</Button>\r\n+              </DialogFooter>\r\n+            </DialogContent>\r\n+          </Dialog>\r\n+        )}\r\n+      </div>\r\n+      <Toaster />\r\n+      </div>\r\n+  );\r\n+} \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739961432184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1428,3544 +1428,25 @@\n   };\r\n \r\n   const handleDeleteSubtopic = async (subtopicId: string) => {\r\n     try {\r\n-      await contentService.deleteSubtopic(subtopicId);\r\n-      setSubtopics(prev => prev.filter(subtopic => subtopic.id !== subtopicId));\r\n-      setSelectedSubtopicId(null);\r\n-      toast.success('Subtopic deleted successfully');\r\n-    } catch (err) {\r\n-      const error = err as Error;\r\n-      console.error('Error deleting subtopic:', error);\r\n-      toast.error('Failed to delete subtopic');\r\n-    }\r\n-  };\r\n-\r\n-  const handleCreateLesson = async () => {\r\n-    if (!selectedSubtopicId) {\r\n-      toast.error('Please select a subtopic first');\r\n-      return;\r\n-    }\r\n-\r\n-    try {\r\n-      // First create the lesson\r\n-      const { data: newLesson, error: lessonError } = await supabase\r\n-        .from('lessons')\r\n-        .insert({\r\n-          title: newItemData.name,\r\n-          duration: 0,\r\n-          topic_id: selectedTopicId,\r\n-          subtopic_id: selectedSubtopicId,\r\n-          content: '', // Empty rich text content initially\r\n-          status: 'draft'\r\n-        })\r\n-        .select()\r\n-        .single();\r\n-\r\n-      if (lessonError) throw lessonError;\r\n-\r\n-      // Create initial question\r\n-      const { data: newQuestion, error: questionError } = await supabase\r\n-        .from('questions')\r\n-        .insert({\r\n-          lesson_id: newLesson.id,\r\n-          type: 'speaking', // default type\r\n-          title: 'Question 1',\r\n-          data: {\r\n-            prompt: '',\r\n-            teacherScript: '',\r\n-            options: []\r\n-          },\r\n-          order_index: 0\r\n-        })\r\n-        .select()\r\n-        .single();\r\n-\r\n-      if (questionError) throw questionError;\r\n-\r\n-      // Create initial exercise prompts for the question\r\n-      const { error: promptsError } = await supabase\r\n-        .from('exercise_prompts')\r\n-        .insert([\r\n-          {\r\n-            question_id: newQuestion.id,\r\n-            text: '',\r\n-            type: 'image',\r\n-            narration: '',\r\n-            saytext: '',\r\n-            media: [],\r\n-            order_index: 0\r\n-          },\r\n-          {\r\n-            question_id: newQuestion.id,\r\n-            text: '',\r\n-            type: 'gif',\r\n-            narration: '',\r\n-            saytext: '',\r\n-            media: [],\r\n-            order_index: 1\r\n-          }\r\n-        ]);\r\n-\r\n-      if (promptsError) throw promptsError;\r\n-\r\n-      // Create initial activity\r\n-      // const { error: activityError } = await supabase\r\n-      //   .from('activities')\r\n-      //   .insert({\r\n-      //     lesson_id: newLesson.id,\r\n-      //     type: 'practice',\r\n-      //     title: '',\r\n-      //     instructions: '',\r\n-      //     media: [],\r\n-      //     data: {\r\n-      //       prompt: '',\r\n-      //       teacherScript: '',\r\n-      //       media: []\r\n-      //     },\r\n-      //     order_index: 0\r\n-      //   });\r\n-\r\n-      // if (activityError) throw activityError;\r\n-\r\n-      // Update UI state\r\n-      setLessons(prev => [...prev, newLesson]);\r\n-      setCurrentLessonId(newLesson.id);\r\n-      setLessonTitle(newLesson.title);\r\n-      setModalState({ ...modalState, showAddLesson: false });\r\n-      setNewItemData({ name: '', description: '' });\r\n-      toast.success('Lesson created successfully');\r\n-\r\n-    } catch (error) {\r\n-      console.error('Error creating lesson:', error);\r\n-      toast.error('Failed to create lesson');\r\n-    }\r\n-  };\r\n-\r\n-  // Effect to handle localStorage after mount\r\n-  useEffect(() => {\r\n-    const storedMode = localStorage.getItem('lessonManagementViewMode');\r\n-    if (storedMode !== null) {\r\n-      setIsViewMode(storedMode === 'true');\r\n-    }\r\n-  }, []);\r\n-\r\n-  // Update the cleanupModalState function\r\n-  const cleanupModalState = useCallback(() => {\r\n-    document.body.style.pointerEvents = '';\r\n-    document.body.style.overflow = '';\r\n-    setModalState({\r\n-      showAddGrade: false,\r\n-      showAddTopic: false,\r\n-      showAddSubtopic: false,\r\n-      showAddLesson: false\r\n-    });\r\n-    setNewItemData({ name: '', description: '' });\r\n-  }, []);\r\n-\r\n-  // Add a function to handle modal state changes\r\n-  const handleModalStateChange = useCallback((modalType: keyof typeof modalState, open: boolean) => {\r\n-    if (!open) {\r\n-      cleanupModalState();\r\n-    } else {\r\n-      setModalState(prev => ({ ...prev, [modalType]: open }));\r\n-    }\r\n-  }, [cleanupModalState]);\r\n-\r\n-  const handleContentSave = async (content: string) => {\r\n-    const loadingToast = toast.loading(\"Saving content...\", {\r\n-      action: {\r\n-        label: \"Close\",\r\n-        onClick: () => toast.dismiss()\r\n-      }\r\n-    });\r\n-    \r\n-    try {\r\n-      const { data: { session } } = await supabase.auth.getSession();\r\n-      if (!session?.user) {\r\n-        toast.error('Please sign in to save content', { id: loadingToast });\r\n-        return;\r\n-      }\r\n-\r\n-      // Get the most recent content entry\r\n-      const { data: existingContent, error: checkError } = await supabase\r\n-        .from('lesson_content')\r\n-        .select('id')\r\n-        .eq('lesson_id', currentLessonId)\r\n-        .order('updated_at', { ascending: false })\r\n-        .limit(1)\r\n-        .maybeSingle();\r\n-\r\n-      // If content exists, update it; if not, insert new\r\n       const { error } = await supabase\r\n-        .from('lesson_content')\r\n-        .upsert({\r\n-          id: existingContent?.id, // This ensures we update if id exists\r\n-          lesson_id: currentLessonId,\r\n-          content: [content],\r\n-          content_type: 'text',\r\n-          metadata: {\r\n-            heading: contentHeading\r\n-          },\r\n-          user_id: session.user.id,\r\n-          updated_at: new Date().toISOString()\r\n-        }, {\r\n-          onConflict: 'id'  // This ensures we update based on lesson_id\r\n-        });\r\n+        .from('subtopics')\r\n+        .delete()\r\n+        .eq('id', subtopicId);\r\n \r\n       if (error) throw error;\r\n \r\n-      // Save questions separately\r\n-      for (const question of questions) {\r\n-        const { exercisePrompts, ...questionData } = question; // Remove exercisePrompts from question data\r\n-        \r\n-        // Save question\r\n-        const { error: questionError } = await supabase\r\n-          .from('questions')\r\n-          .upsert(questionData, {\r\n-            onConflict: 'id'\r\n-          })\r\n-          .select();\r\n-\r\n-        if (questionError) throw questionError;\r\n-\r\n-        // Save exercise prompts\r\n-        if (exercisePrompts?.length > 0) {\r\n-          for (const prompt of exercisePrompts) {\r\n-            const { error: promptError } = await supabase\r\n-              .from('exercise_prompts')\r\n-              .upsert(prompt, {\r\n-                onConflict: 'id'\r\n-              })\r\n-              .select();\r\n-\r\n-            if (promptError) throw promptError;\r\n-          }\r\n-        }\r\n-      }\r\n-      \r\n-      toast.success(\"Content saved successfully\", {\r\n-        action: {\r\n-          label: \"Close\",\r\n-          onClick: () => toast.dismiss()\r\n-        },\r\n-        id: loadingToast,\r\n-      });\r\n-      setIsContentEditorOpen(false);\r\n-    } catch (error) {\r\n-      console.error('Error saving content:', error);\r\n-      toast.error(\"Failed to save content\", {\r\n-        action: {\r\n-          label: \"Close\",\r\n-          onClick: () => toast.dismiss()\r\n-        },\r\n-        id: loadingToast,\r\n-      });\r\n-    }\r\n-  };\r\n-\r\n-  // Add this component for inline editing\r\n-  const InlineEdit = ({ \r\n-    value, \r\n-    onSave, \r\n-    isEditing, \r\n-    setIsEditing, \r\n-    placeholder,\r\n-    className = \"\"\r\n-  }: InlineEditProps) => {\r\n-    const [tempValue, setTempValue] = useState(value);\r\n-    \r\n-    return isEditing ? (\r\n-      <div className=\"flex items-center gap-2\">\r\n-        <Input\r\n-          value={tempValue}\r\n-          onChange={(e) => setTempValue(e.target.value)}\r\n-          placeholder={placeholder}\r\n-          className={className}\r\n-          autoFocus\r\n-        />\r\n-        <Button\r\n-          size=\"sm\"\r\n-          variant=\"ghost\"\r\n-          onClick={() => {\r\n-            onSave(tempValue);\r\n-            setIsEditing(false);\r\n-          }}\r\n-        >\r\n-          <Check className=\"h-4 w-4 text-green-500\" />\r\n-        </Button>\r\n-        <Button\r\n-          size=\"sm\"\r\n-          variant=\"ghost\"\r\n-          onClick={() => setIsEditing(false)}\r\n-        >\r\n-          <X className=\"h-4 w-4 text-red-500\" />\r\n-        </Button>\r\n-      </div>\r\n-    ) : (\r\n-      <div \r\n-        className=\"group flex items-center gap-2 cursor-pointer\"\r\n-        onClick={() => setIsEditing(true)}\r\n-      >\r\n-        <span className={className}>{value || placeholder}</span>\r\n-        <Pencil className=\"h-4 w-4 opacity-0 group-hover:opacity-100 transition-opacity\" />\r\n-      </div>\r\n-    );\r\n-  };\r\n-\r\n-  // Add this effect to handle auto-collapse after lesson selection\r\n-  useEffect(() => {\r\n-    if (currentLessonId && selectedGradeId && selectedTopicId && selectedSubtopicId) {\r\n-      setIsSidebarLocked(false);\r\n-      // Optional: add a slight delay before collapsing\r\n-      setTimeout(() => setIsSidebarCollapsed(true), 300);\r\n-    }\r\n-  }, [currentLessonId, selectedGradeId, selectedTopicId, selectedSubtopicId]);\r\n-\r\n-  // Add individual save handlers\r\n-  // const handleSaveQuestion = async (question: Question, index: number) => {\r\n-  //   try {\r\n-  //     // Update status to saving\r\n-  //     setQuestionSaveStatuses(prev => [\r\n-  //       ...prev.filter(s => s.id !== question.id),\r\n-  //       { id: question.id, status: 'saving' }\r\n-  //     ]);\r\n-\r\n-  //     const questionUpsert = {\r\n-  //       id: question.id,\r\n-  //       lesson_id: currentLessonId,\r\n-  //       type: question.type,\r\n-  //       title: question.data?.prompt || 'Untitled Question',\r\n-  //       metadata: question.metadata || {},\r\n-  //       data: {\r\n-  //         prompt: question.data?.prompt || '',\r\n-  //         teacherScript: question.data?.teacherScript || '',\r\n-  //         ...question.data\r\n-  //       },\r\n-  //       order_index: index,\r\n-  //       created_at: new Date().toISOString(),\r\n-  //       updated_at: new Date().toISOString()\r\n-  //     };\r\n-\r\n-  //     const { error: questionError } = await supabase\r\n-  //       .from('questions')\r\n-  //       .upsert(questionUpsert);\r\n-\r\n-  //     if (questionError) throw questionError;\r\n-\r\n-  //     // Update status to saved\r\n-  //     setQuestionSaveStatuses(prev => [\r\n-  //       ...prev.filter(s => s.id !== question.id),\r\n-  //       { id: question.id, status: 'saved', lastSaved: new Date().toISOString() }\r\n-  //     ]);\r\n-\r\n-  //     toast.success(`Question ${index + 1} saved successfully`);\r\n-  //   } catch (error) {\r\n-  //     console.error('Error saving question:', error);\r\n-  //     setQuestionSaveStatuses(prev => [\r\n-  //       ...prev.filter(s => s.id !== question.id),\r\n-  //       { id: question.id, status: 'error' }\r\n-  //     ]);\r\n-  //     toast.error(`Failed to save question ${index + 1}`);\r\n-  //   }\r\n-  // };\r\n-\r\n-  const handleSavePrompt = async (questionId: string, prompt: ExercisePrompt, promptIndex: number) => {\r\n-    try {\r\n-      setPromptSaveStatuses(prev => [\r\n-        ...prev.filter(s => s.id !== prompt.id),\r\n-        { id: prompt.id || '', status: 'saving' } as SaveStatus\r\n-      ]);\r\n-\r\n-      const promptUpsert = {\r\n-        id: prompt.id,\r\n-        question_id: questionId,\r\n-        text: prompt.text || '',\r\n-        type: prompt.type || 'text',\r\n-        narration: prompt.narration || '',\r\n-        saytext: prompt.saytext || '',\r\n-        media: prompt.media || [],\r\n-        order_index: promptIndex,\r\n-        created_at: prompt.created_at || new Date().toISOString(),\r\n-        updated_at: new Date().toISOString()\r\n-      };\r\n-\r\n-      const { error: promptError } = await supabase\r\n-        .from('exercise_prompts')\r\n-        .upsert(promptUpsert);\r\n-\r\n-      if (promptError) throw promptError;\r\n-\r\n-      setPromptSaveStatuses(prev => [\r\n-        ...prev.filter(s => s.id !== prompt.id),\r\n-        { id: prompt.id || '', status: 'saved', lastSaved: new Date().toISOString() } as SaveStatus\r\n-      ]);\r\n-\r\n-      toast.success(`Prompt ${promptIndex + 1} saved successfully`);\r\n-    } catch (error) {\r\n-      console.error('Error saving prompt:', error);\r\n-      setPromptSaveStatuses(prev => [\r\n-        ...prev.filter(s => s.id !== prompt.id),\r\n-        { id: prompt.id || '', status: 'error' } as SaveStatus\r\n-      ]);\r\n-      toast.error(`Failed to save prompt ${promptIndex + 1}`);\r\n-    }\r\n-  };\r\n-\r\n-  // Add effect to mark items as draft when edited\r\n-  useEffect(() => {\r\n-    questions.forEach(question => {\r\n-      if (!questionSaveStatuses.find(s => s.id === question.id)) {\r\n-        setQuestionSaveStatuses(prev => [\r\n-          ...prev,\r\n-          { id: question.id, status: 'draft' }\r\n-        ]);\r\n-      }\r\n-    });\r\n-  }, [questions]);\r\n-\r\n-  // Add this function with your other handlers\r\n-  const handleRefreshLesson = async () => {\r\n-    if (!currentLessonId) {\r\n-      toast.error('No lesson selected');\r\n-      return;\r\n-    }\r\n-    \r\n-    try {\r\n-      toast.loading('Refreshing lesson content...', {\r\n-        action: {\r\n-          label: \"Close\",\r\n-          onClick: () => toast.dismiss()\r\n-        },\r\n-      });\r\n-      await handleLessonSelect(currentLessonId);\r\n-      toast.success('Content refreshed', {\r\n-        action: {\r\n-          label: \"Close\",\r\n-          onClick: () => toast.dismiss()\r\n-        },\r\n-      });\r\n-    } catch (error) {\r\n-      console.error('Error refreshing lesson:', error);\r\n-      toast.error('Failed to refresh content', {\r\n-        action: {\r\n-          label: \"Close\",\r\n-          onClick: () => toast.dismiss()\r\n-        },\r\n-      });\r\n-    }\r\n-  };\r\n-\r\n-  // Add this function to handle refresh\r\n-  const handleRefreshContent = async () => {\r\n-    if (!currentLessonId) {\r\n-      toast.error('No lesson selected');\r\n-      return;\r\n-    }\r\n-    \r\n-    toast.loading('Refreshing content...');\r\n-    try {\r\n-      await loadLessonContent(currentLessonId);\r\n-      toast.success('Content refreshed');\r\n-    } catch (error) {\r\n-      console.error('Refresh error:', error);\r\n-      toast.error('Failed to refresh content');\r\n-    }\r\n-  };\r\n-\r\n-  // Update the sidebar hover mechanism\r\n-  const handleSidebarHover = useCallback(\r\n-    debounce((isHovering: boolean) => {\r\n-      if (!isSidebarLocked && !isNavigating && !isDropdownOpen) {\r\n-        if (isHovering || document.activeElement?.closest('.sidebar-content')) {\r\n-          setIsSidebarCollapsed(false);\r\n-        } else {\r\n-          setTimeout(() => {\r\n-            if (!isDropdownOpen) { // Only collapse if dropdown is closed\r\n-              setIsSidebarCollapsed(true);\r\n-            }\r\n-          }, 300);\r\n-        }\r\n-      }\r\n-    }, 100),\r\n-    [isSidebarLocked, isNavigating, isDropdownOpen]\r\n-  );\r\n-\r\n-  // Update the sidebar JSX\r\n-  <div \r\n-    className={cn(\r\n-      \"transition-all duration-300 ease-in-out relative\",\r\n-      isSidebarCollapsed ? \"w-20\" : \"w-80\",\r\n-      \"flex-shrink-0 group\"\r\n-    )}\r\n-    onMouseEnter={() => {\r\n-      handleSidebarHover(true);\r\n-      // Immediately expand on mouse enter\r\n-      if (!isSidebarLocked) {\r\n-        setIsSidebarCollapsed(false);\r\n-      }\r\n-    }}\r\n-    onMouseLeave={() => {\r\n-      // Only collapse if not interacting with content\r\n-      if (!document.activeElement?.closest('.sidebar-content')) {\r\n-        handleSidebarHover(false);\r\n-      }\r\n-    }}\r\n-    onFocus={() => setIsSidebarCollapsed(false)}\r\n-  >\r\n-    <Card className={cn(\r\n-      \"h-full relative sidebar-content\", // Added sidebar-content class\r\n-      \"transition-shadow duration-300\",\r\n-      \"hover:shadow-lg\"\r\n-    )}>\r\n-      {/* Rest of sidebar content */}\r\n-    </Card>\r\n-  </div>\r\n-\r\n-  // Update the sidebar and card styles\r\n-  return (\r\n-      <div className=\"container mx-auto py-8\">\r\n-        {/* Header */}\r\n-        <div className=\"flex items-center justify-between mb-2\">\r\n-          {/* ... header content ... */}\r\n-          <div className=\"flex items-center gap-4\">\r\n-            <Link href=\"/super-admin\">\r\n-              <Button variant=\"outline\" className=\"gap-2\">\r\n-                <ArrowLeft className=\"h-4 w-4\" />\r\n-                Back\r\n-              </Button>\r\n-            </Link>\r\n-            <div className=\"flex items-center gap-2\">\r\n-              <h1 className=\"text-2xl font-bold\">Lesson Management</h1>\r\n-              <Button\r\n-                variant=\"ghost\"\r\n-                size=\"icon\"\r\n-                onClick={handleRefreshLesson}\r\n-                className=\"ml-2\"\r\n-                title=\"Refresh lesson content\"\r\n-              >\r\n-                <RefreshCw className=\"h-4 w-4\" />\r\n-              </Button>\r\n-            </div>\r\n-            <p className=\"text-sm text-muted-foreground\">Create and manage your educational content</p>\r\n-          </div>\r\n-          <div className=\"flex items-center gap-2\">\r\n-            <Button\r\n-              variant=\"outline\"\r\n-              size=\"sm\"\r\n-              onClick={() => setShowHelpTips(!showHelpTips)}\r\n-              className=\"gap-2\"\r\n-            >\r\n-              {showHelpTips ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\r\n-              {showHelpTips ? 'Hide Tips' : 'Show Tips'}\r\n-            </Button>\r\n-          </div>\r\n-        </div>\r\n-        \r\n-        {/* Main content wrapper - Fix the layout here */}\r\n-        <div className=\"flex gap-6 h-[calc(100vh-200px)]\">\r\n-          {/* Improved sidebar */}\r\n-          <div \r\n-            className={cn(\r\n-              \"transition-all duration-300 ease-in-out relative\",\r\n-              isSidebarCollapsed ? \"w-20\" : \"w-80\",\r\n-              \"flex-shrink-0 group\"\r\n-            )}\r\n-            onMouseEnter={() => {\r\n-              handleSidebarHover(true);\r\n-              // Immediately expand on mouse enter\r\n-              if (!isSidebarLocked) {\r\n-                setIsSidebarCollapsed(false);\r\n-              }\r\n-            }}\r\n-            onMouseLeave={() => {\r\n-              // Only collapse if not interacting with content\r\n-              if (!document.activeElement?.closest('.sidebar-content')) {\r\n-                handleSidebarHover(false);\r\n-              }\r\n-            }}\r\n-            onFocus={() => setIsSidebarCollapsed(false)}\r\n-          >\r\n-            <Card className={cn(\r\n-              \"h-full relative sidebar-content\", // Added sidebar-content class\r\n-              \"transition-shadow duration-300\",\r\n-              \"hover:shadow-lg\"\r\n-            )}>\r\n-              {/* Lock button - only show after lesson selection */}\r\n-              {currentLessonId && (\r\n-                <Button\r\n-                  variant=\"ghost\"\r\n-                  size=\"sm\"\r\n-                  className=\"absolute top-2 right-2 z-10\"\r\n-                  onClick={() => {\r\n-                    setIsSidebarLocked(!isSidebarLocked);\r\n-                    if (!isSidebarLocked) {\r\n-                      setIsSidebarCollapsed(false);\r\n-                    }\r\n-                  }}\r\n-                >\r\n-                  {isSidebarLocked ? <Lock className=\"h-4 w-4\" /> : <Unlock className=\"h-4 w-4\" />}\r\n-                </Button>\r\n-              )}\r\n-\r\n-              {/* Sidebar content with overflow handling */}\r\n-              <div className={cn(\r\n-                \"transition-all duration-300 overflow-hidden\",\r\n-                isSidebarCollapsed ? \"opacity-0\" : \"opacity-100\"\r\n-              )}>\r\n-                <Card className=\"h-full\">\r\n-                  <CardHeader className=\"pb-3\">\r\n-                    <div className=\"flex items-center justify-between\">\r\n-                      <CardTitle className=\"text-lg font-semibold\">Content Management</CardTitle>\r\n-                      <TooltipProvider>\r\n-                        <Tooltip>\r\n-                          <TooltipTrigger>\r\n-                            <HelpCircle className=\"h-4 w-4 text-muted-foreground\" />\r\n-                          </TooltipTrigger>\r\n-                          <TooltipContent>\r\n-                            <p>Manage your educational content here</p>\r\n-                          </TooltipContent>\r\n-                        </Tooltip>\r\n-                      </TooltipProvider>\r\n-                      </div>\r\n-                    <CardDescription>Create and manage your lessons</CardDescription>\r\n-                  </CardHeader>\r\n-                  <CardContent className=\"space-y-4\">\r\n-                    {/* View/Edit Mode Toggle */}\r\n-                    <div className=\"grid grid-cols-2 gap-2 p-1 bg-muted rounded-lg\">\r\n-                      <Button\r\n-                        variant={isViewMode ? \"default\" : \"ghost\"}\r\n-                        size=\"sm\"\r\n-                        onClick={() => setIsViewMode(true)}\r\n-                        className=\"w-full\"\r\n-                      >\r\n-                        <Eye className=\"h-4 w-4 mr-2\" />\r\n-                        View\r\n-                      </Button>\r\n-                      <Button\r\n-                        variant={!isViewMode ? \"default\" : \"ghost\"}\r\n-                        size=\"sm\"\r\n-                        onClick={() => setIsViewMode(false)}\r\n-                        className=\"w-full\"\r\n-                      >\r\n-                        <Edit className=\"h-4 w-4 mr-2\" />\r\n-                        Edit\r\n-                      </Button>\r\n-                    </div>\r\n-\r\n-                    {/* Grade Selection */}\r\n-                    <div className=\"space-y-2\">\r\n-                      <div className=\"flex items-center justify-between\">\r\n-                        <Label htmlFor=\"grade-select\">Grade</Label>\r\n-                        {isViewMode && (\r\n-                          <Button variant=\"ghost\" size=\"sm\" onClick={() => setExpandedGrade(expandedGrade ? null : selectedGrade)}>\r\n-                            {expandedGrade ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n-                          </Button>\r\n-                        )}\r\n-                      </div>\r\n-                      <Select \r\n-                        value={selectedGradeId || ''}\r\n-                        onValueChange={handleGradeSelect}\r\n-                        onOpenChange={(open) => {\r\n-                          if (open) {\r\n-                            // Force sidebar to stay open and lock it\r\n-                            setIsSidebarCollapsed(false);\r\n-                            setIsSidebarLocked(true);\r\n-                          }\r\n-                        }}\r\n-                      >\r\n-                        <SelectTrigger \r\n-                          id=\"grade-select\" \r\n-                          className=\"w-full\"\r\n-                          onClick={(e) => {\r\n-                            e.stopPropagation(); // Prevent event bubbling\r\n-                            setIsSidebarCollapsed(false);\r\n-                            setIsSidebarLocked(true);\r\n-                          }}\r\n-                        >\r\n-                          <SelectValue placeholder=\"Select Grade\" />\r\n-                        </SelectTrigger>\r\n-                        <SelectContent \r\n-                          onCloseAutoFocus={(e) => {\r\n-                            e.preventDefault();\r\n-                            setIsSidebarLocked(true);\r\n-                            setIsSidebarCollapsed(false);\r\n-                          }}\r\n-                        >\r\n-                          {grades.map((grade: Grade) => (\r\n-                            <SelectItem \r\n-                              key={`grade-${grade.id || 'new'}`} \r\n-                              value={grade.id || ''}\r\n-                              onMouseDown={(e) => {\r\n-                                e.preventDefault();\r\n-                                e.stopPropagation();\r\n-                              }}\r\n-                            >\r\n-                              <div className=\"flex items-center gap-2\">\r\n-                                <BookOpen className=\"h-4 w-4 text-primary\" />\r\n-                                {grade.name}\r\n-                              </div>\r\n-                            </SelectItem>\r\n-                          ))}\r\n-                        </SelectContent>\r\n-                      </Select>\r\n-                      {!isViewMode && (\r\n-                      <Button \r\n-                        variant=\"outline\" \r\n-                        size=\"sm\" \r\n-                        className=\"w-full gap-2\"\r\n-                        onClick={() => setModalState({ ...modalState, showAddGrade: false })}\r\n-                      >\r\n-                        <Plus className=\"h-4 w-4\" />\r\n-                        Add New Grade\r\n-                      </Button>\r\n-                      )}\r\n-                    </div>\r\n-\r\n-                    {/* Content Tree View in View Mode */}\r\n-                    {isViewMode && expandedGrade && (\r\n-                      <div className=\"mt-4 space-y-4 overflow-y-auto max-h-[calc(100vh-300px)]\">\r\n-                        {topics.map((topic: Topic) => (\r\n-                          <Card \r\n-                            key={topic.id} \r\n-                            className={cn(\r\n-                              \"border-l-4 transition-all duration-200 hover:shadow-md\",\r\n-                              expandedTopic === topic.id \r\n-                                ? \"border-l-primary bg-accent/5\" \r\n-                                : \"border-l-primary/40 hover:border-l-primary\"\r\n-                            )}\r\n-                          >\r\n-                            <CardHeader \r\n-                              className=\"py-3 cursor-pointer select-none\" \r\n-                              onClick={() => handleTopicExpand(topic.id || '')}\r\n-                            >\r\n-                              <div className=\"flex items-center justify-between\">\r\n-                                <div className=\"flex items-center gap-2\">\r\n-                                  <Layers className=\"h-4 w-4 text-primary\" />\r\n-                                  <h4 className=\"font-medium\">{topic.title}</h4>\r\n-                                  <Badge variant=\"outline\" className=\"ml-2\">\r\n-                                    {subtopics.filter(s => s.topic_id === topic.id).length} Subtopics\r\n-                                  </Badge>\r\n-                                </div>\r\n-                                <div className=\"flex items-center gap-2\">\r\n-                                  <AlertDialog>\r\n-                                    <AlertDialogTrigger asChild>\r\n-                                      <Button \r\n-                                        variant=\"ghost\" \r\n-                                        size=\"sm\" \r\n-                                        className=\"hover:bg-destructive/10 hover:text-destructive\"\r\n-                                        onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}\r\n-                                      >\r\n-                                        <Trash className=\"h-4 w-4\" />\r\n-                                      </Button>\r\n-                                    </AlertDialogTrigger>\r\n-                                    {/* Alert Dialog Content */}\r\n-                                  </AlertDialog>\r\n-                                  <ChevronDown className={cn(\r\n-                                    \"h-4 w-4 transition-transform duration-200\",\r\n-                                    expandedTopic === topic.id ? \"rotate-0\" : \"-rotate-90\"\r\n-                                  )} />\r\n-                                </div>\r\n-                              </div>\r\n-                            </CardHeader>\r\n-\r\n-                            <AnimatePresence>\r\n-                              {expandedTopic === topic.id && (\r\n-                                <motion.div\r\n-                                  initial={{ height: 0, opacity: 0 }}\r\n-                                  animate={{ height: \"auto\", opacity: 1 }}\r\n-                                  exit={{ height: 0, opacity: 0 }}\r\n-                                  transition={{ duration: 0.2 }}\r\n-                                >\r\n-                                  <CardContent className=\"pt-0 pb-2\">\r\n-                                    <div className=\"pl-4 space-y-2\">\r\n-                                      {isLoadingSubtopics ? (\r\n-                                        <div className=\"flex items-center justify-center py-4\">\r\n-                                          <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\r\n-                                        </div>\r\n-                                      ) : (\r\n-                                        subtopics\r\n-                                          .filter(subtopic => subtopic.topic_id === topic.id)\r\n-                                          .map((subtopic: SubTopic) => (\r\n-                                            <div \r\n-                                              key={subtopic.id}\r\n-                                              className={cn(\r\n-                                                \"rounded-lg border transition-colors\",\r\n-                                                expandedSubtopic === subtopic.id \r\n-                                                  ? \"bg-accent/10 border-primary/20\" \r\n-                                                  : \"hover:bg-accent/5\"\r\n-                                              )}\r\n-                                            >\r\n-                                              <div \r\n-                                                className=\"p-3 cursor-pointer\"\r\n-                                                onClick={() => handleSubtopicExpand(subtopic.id || '')}\r\n-                                              >\r\n-                                                <div className=\"flex items-center justify-between py-2 cursor-pointer hover:bg-accent/50 rounded-md px-2\">\r\n-                                                  <div className=\"flex items-center gap-2\">\r\n-                                                    <BookOpen className=\"h-4 w-4 text-primary\" />\r\n-                                                    <span className=\"text-sm font-medium\">{subtopic.name}</span>\r\n-                                                    <Badge variant=\"outline\" className=\"ml-2\">\r\n-                                                      {lessons.filter(l => l.subtopic_id === subtopic.id).length} Lessons\r\n-                                                    </Badge>\r\n-                                                  </div>\r\n-                                                  <div className=\"flex items-center gap-2\">\r\n-                                                    <AlertDialog>\r\n-                                                      <AlertDialogTrigger asChild>\r\n-                                                        <Button \r\n-                                                          variant=\"ghost\" \r\n-                                                          size=\"sm\" \r\n-                                                          className=\"hover:bg-destructive/10 hover:text-destructive\"\r\n-                                                          onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}\r\n-                                                        >\r\n-                                                          <Trash className=\"h-4 w-4\" />\r\n-                                                        </Button>\r\n-                                                      </AlertDialogTrigger>\r\n-                                                      {/* Alert Dialog Content */}\r\n-                                                    </AlertDialog>\r\n-                                                    <ChevronDown className={cn(\r\n-                                                      \"h-4 w-4 transition-transform duration-200\",\r\n-                                                      expandedSubtopic === subtopic.id ? \"rotate-0\" : \"-rotate-90\"\r\n-                                                    )} />\r\n-                                                  </div>\r\n-                                                </div>\r\n-\r\n-                                                <AnimatePresence>\r\n-                                                  {expandedSubtopic === subtopic.id && (\r\n-                                                    <motion.div\r\n-                                                      initial={{ height: 0, opacity: 0 }}\r\n-                                                      animate={{ height: \"auto\", opacity: 1 }}\r\n-                                                      exit={{ height: 0, opacity: 0 }}\r\n-                                                      transition={{ duration: 0.2 }}\r\n-                                                    >\r\n-                                                      <div className=\"px-3 pb-3\">\r\n-                                                        <div className=\"space-y-2\">\r\n-                                                          {isLoadingLessons ? (\r\n-                                                            <div className=\"flex items-center justify-center py-4\">\r\n-                                                              <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\r\n-                                                            </div>\r\n-                                                          ) : (\r\n-                                                            lessons\r\n-                                                              .filter(lesson => lesson.subtopic_id === subtopic.id)\r\n-                                                              .map((lesson: Lesson) => (\r\n-                                                                <div\r\n-                                                                  key={lesson.id}\r\n-                                                                  onClick={() => handleLessonSelect(lesson.id || '')}\r\n-                                                                  className={cn(\r\n-                                                                    \"flex items-center gap-3 p-2 rounded-md cursor-pointer transition-colors\",\r\n-                                                                    \"hover:bg-accent\",\r\n-                                                                    currentLessonId === lesson.id && \"bg-accent\"\r\n-                                                                  )}\r\n-                                                                >\r\n-                                                                  <div className=\"flex items-center gap-2 flex-1\">\r\n-                                                                    <div className=\"flex h-8 w-8 items-center justify-center rounded-md border bg-background\">\r\n-                                                                      <BookOpen className=\"h-4 w-4 text-primary\" />\r\n-                                                                    </div>\r\n-                                                                    <div className=\"flex flex-col\">\r\n-                                                                      <span className=\"text-sm font-medium\">{lesson.title}</span>\r\n-                                                                      <span className=\"text-xs text-muted-foreground\">\r\n-                                                                        {lesson.duration} mins • {lesson.questions?.length || 0} Questions\r\n-                                                                      </span>\r\n-                                                                    </div>\r\n-                                                                  </div>\r\n-                                                                  <AlertDialog>\r\n-                                                                    <AlertDialogTrigger asChild>\r\n-                                                                      <Button \r\n-                                                                        variant=\"ghost\" \r\n-                                                                        size=\"sm\" \r\n-                                                                        className=\"hover:bg-destructive/10 hover:text-destructive\"\r\n-                                                                        onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}\r\n-                                                                      >\r\n-                                                                        <Trash className=\"h-4 w-4\" />\r\n-                                                                      </Button>\r\n-                                                                    </AlertDialogTrigger>\r\n-                                                                    {/* Alert Dialog Content */}\r\n-                                                                  </AlertDialog>\r\n-                                                                </div>\r\n-                                                              ))\r\n-                                                          )}\r\n-                                                        </div>\r\n-                                                      </div>\r\n-                                                    </motion.div>\r\n-                                                  )}\r\n-                                                </AnimatePresence>\r\n-                                              </div>\r\n-                                            </div>\r\n-                                          ))\r\n-                                      )}\r\n-                                    </div>\r\n-                                  </CardContent>\r\n-                                </motion.div>\r\n-                              )}\r\n-                            </AnimatePresence>\r\n-                          </Card>\r\n-                        ))}\r\n-                      </div>\r\n-                    )}\r\n-\r\n-                    {/* Regular Edit Mode Content */}\r\n-                    {!isViewMode && (\r\n-                      <>\r\n-                        {/* Existing Topic, Subtopic, and Lesson Selection UI */}\r\n-                      {/* Topic Selection */}\r\n-                        {selectedGradeId && (\r\n-                      <div className=\"space-y-2\">\r\n-                        <div className=\"flex items-center justify-between\">\r\n-                        <Label htmlFor=\"topic-select\">Topic</Label>\r\n-                        </div>\r\n-                        <Select \r\n-                              value={selectedTopicId || ''} \r\n-                              onValueChange={handleTopicSelect}\r\n-                        >\r\n-                          <SelectTrigger id=\"topic-select\" className=\"w-full\">\r\n-                            <SelectValue placeholder=\"Select Topic\" />\r\n-                          </SelectTrigger>\r\n-                          <SelectContent>\r\n-                                {topics.map((topic: Topic) => (\r\n-                                  <SelectItem \r\n-                                    key={`topic-${topic.id || 'new'}`} \r\n-                                    value={topic.id || ''}\r\n-                                  >\r\n-                                  <div className=\"flex items-center gap-2\">\r\n-                                  <Layers className=\"h-4 w-4 text-primary\" />\r\n-                                    {topic.title}\r\n-                                  </div>\r\n-                                </SelectItem>\r\n-                              ))}\r\n-                          </SelectContent>\r\n-                        </Select>\r\n-                        <Button \r\n-                          variant=\"outline\" \r\n-                          size=\"sm\" \r\n-                          className=\"w-full gap-2\"\r\n-                          onClick={() => setModalState({ ...modalState, showAddTopic: true })}\r\n-                        >\r\n-                          <Plus className=\"h-4 w-4\" />\r\n-                          Add New Topic\r\n-                        </Button>\r\n-                      </div>\r\n-                    )}\r\n-\r\n-                    {/* Subtopic Selection */}\r\n-                        {selectedTopicId && (\r\n-                      <div className=\"space-y-2\">\r\n-                        <div className=\"flex items-center justify-between\">\r\n-                        <Label htmlFor=\"subtopic-select\">Subtopic</Label>\r\n-                        </div>\r\n-                        <Select \r\n-                              value={selectedSubtopicId || ''} \r\n-                              onValueChange={handleSubtopicSelect}\r\n-                        >\r\n-                          <SelectTrigger id=\"subtopic-select\" className=\"w-full\">\r\n-                            <SelectValue placeholder=\"Select Subtopic\" />\r\n-                          </SelectTrigger>\r\n-                          <SelectContent>\r\n-                                {subtopics\r\n-                                  .filter(subtopic => subtopic.id)\r\n-                                  .map((subtopic, index) => (\r\n-                                    <SelectItem \r\n-                                      key={subtopic.id || `subtopic-${index}`}\r\n-                                      value={subtopic.id || ''}\r\n-                                    >\r\n-                                      {subtopic.title || 'Untitled Subtopic'}\r\n-                                    </SelectItem>\r\n-                                  ))}\r\n-                          </SelectContent>\r\n-                        </Select>\r\n-                        {!isViewMode && (\r\n-                          <Button \r\n-                            variant=\"outline\" \r\n-                            size=\"sm\" \r\n-                            className=\"w-full gap-2\"\r\n-                            onClick={() => setModalState({ ...modalState, showAddSubtopic: true })}\r\n-                          >\r\n-                            <Plus className=\"h-4 w-4\" />\r\n-                            Add New Subtopic\r\n-                          </Button>\r\n-                        )}\r\n-                      </div>\r\n-                    )}\r\n-\r\n-                    {/* Lesson Selection */}\r\n-                        {selectedSubtopicId && (\r\n-                      <div className=\"space-y-2\">\r\n-                        <div className=\"flex items-center justify-between\">\r\n-                          <Label htmlFor=\"lesson-select\">Lesson</Label>\r\n-                        </div>\r\n-                          <Select \r\n-                            value={currentLessonId || ''} \r\n-                            onValueChange={handleLessonSelect}\r\n-                            onOpenChange={(open) => {\r\n-                              setIsDropdownOpen(open);\r\n-                              if (open) {\r\n-                                setIsSidebarCollapsed(false);\r\n-                                setIsSidebarLocked(true);\r\n-                              } else {\r\n-                                // Small delay before unlocking to prevent immediate collapse\r\n-                                setTimeout(() => {\r\n-                                  setIsSidebarLocked(false);\r\n-                                }, 100);\r\n-                              }\r\n-                            }}\r\n-                          >\r\n-                            <SelectTrigger \r\n-                              id=\"lesson-select\" \r\n-                              className=\"w-full\"\r\n-                              onClick={(e) => {\r\n-                                e.stopPropagation();\r\n-                                setIsSidebarCollapsed(false);\r\n-                                setIsSidebarLocked(true);\r\n-                              }}\r\n-                            >\r\n-                              <SelectValue placeholder=\"Select Lesson\" />\r\n-                            </SelectTrigger>\r\n-                            <SelectContent>\r\n-                              {lessons\r\n-                                .filter((lesson): lesson is Lesson => lesson !== undefined && lesson !== null)\r\n-                                .map((lesson: Lesson) => (\r\n-                                  <SelectItem \r\n-                                    key={`lesson-${lesson.id || 'new'}`} \r\n-                                    value={lesson.id || ''}\r\n-                                  >\r\n-                                    <div className=\"flex items-center gap-2\">\r\n-                                      <BookOpen className=\"h-4 w-4 text-primary\" />\r\n-                                      {lesson.title || 'Untitled Lesson'}\r\n-                                    </div>\r\n-                                  </SelectItem>\r\n-                                ))}\r\n-                            </SelectContent>\r\n-                          </Select>\r\n-                    <Button \r\n-                            variant=\"outline\" \r\n-                            size=\"sm\" \r\n-                            className=\"w-full gap-2\"\r\n-                        onClick={() => setModalState({ ...modalState, showAddLesson: true })}\r\n-                          >\r\n-                            <Plus className=\"h-4 w-4\" />\r\n-                            Add New Lesson\r\n-                    </Button>\r\n-                      </div>\r\n-                        )}\r\n-                      </>\r\n-                    )}\r\n-                  </CardContent>\r\n-                </Card>\r\n-              </div>\r\n-\r\n-              {/* Collapsed view */}\r\n-              {isSidebarCollapsed && (\r\n-                <div className=\"absolute inset-0 flex flex-col items-center pt-12 gap-4\">\r\n-                  <BookOpen className=\"h-6 w-6 text-muted-foreground\" />\r\n-                  <div className=\"w-px h-full bg-border\" />\r\n-                </div>\r\n-              )}\r\n-            </Card>\r\n-          </div>\r\n-        \r\n-\r\n-          {/* Right Content Area */}\r\n-          <div className=\"flex-1 overflow-y-auto\">\r\n-            {isNavigating ? (\r\n-              <div className=\"flex items-center justify-center h-[400px]\">\r\n-                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n-                <span className=\"ml-3\">Loading...</span>\r\n-              </div>\r\n-            ) : (\r\n-              <>\r\n-                {!selectedGradeId ? (\r\n-                  // Question Types Display Section\r\n-                  <div className=\"space-y-6\">\r\n-                    <Card>\r\n-                      <CardHeader>\r\n-                        <div className=\"flex items-center justify-between\">\r\n-                          <div>\r\n-                            <CardTitle className=\"text-xl font-semibold\">Available Question Types</CardTitle>\r\n-                            <CardDescription>Browse through different question formats and examples</CardDescription>\r\n-                          </div>\r\n-                          <TooltipProvider>\r\n-                            <Tooltip>\r\n-                              <TooltipTrigger>\r\n-                                <HelpCircle className=\"h-5 w-5 text-muted-foreground\" />\r\n-                              </TooltipTrigger>\r\n-                              <TooltipContent>\r\n-                                <p>Click on each type to see detailed examples</p>\r\n-                              </TooltipContent>\r\n-                            </Tooltip>\r\n-                          </TooltipProvider>\r\n-                        </div>\r\n-                      </CardHeader>\r\n-                      <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n-                        {Object.entries(QUESTION_TYPES).map(([type, details]) => (\r\n-                          <Card key={type} className=\"cursor-pointer hover:bg-accent/50 transition-colors\">\r\n-                            <CardHeader className=\"p-4\">\r\n-                              <div className=\"flex items-center justify-between mb-2\">\r\n-                                <Badge variant=\"outline\" className=\"bg-primary/5 text-lg\">\r\n-                                  {details.label}\r\n-                                </Badge>\r\n-                              </div>\r\n-                              <CardDescription className=\"text-sm\">\r\n-                                {details.description || 'No description available'}\r\n-                              </CardDescription>\r\n-                              <div className=\"mt-4\">\r\n-                                <div className=\"text-sm font-medium mb-2\">Example:</div>\r\n-                                <div className=\"p-3 rounded-md bg-muted/50 text-sm\">\r\n-                                  {type === 'multiple-choice' && (\r\n-                                    <>\r\n-                                      <div className=\"font-medium mb-2\">Q: What is the capital of France?</div>\r\n-                                      <div className=\"space-y-1 pl-4\">\r\n-                                        <div>A) Paris</div>\r\n-                                        <div>B) London</div>\r\n-                                        <div>C) Berlin</div>\r\n-                                        <div>D) Madrid</div>\r\n-                                      </div>\r\n-                                    </>\r\n-                                  )}\r\n-                                  {type === 'fill-in-blank' && (\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <div>Complete the sentence:</div>\r\n-                                      <div>The sun rises in the <span className=\"bg-primary/20 px-2 rounded\">_____</span> and sets in the <span className=\"bg-primary/20 px-2 rounded\">_____</span>.</div>\r\n-                                    </div>\r\n-                                  )}\r\n-                                  {type === 'true-false' && (\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <div className=\"font-medium\">Statement:</div>\r\n-                                      <div>The Earth is flat.</div>\r\n-                                      <div className=\"mt-2\">\r\n-                                        <Badge variant=\"outline\" className=\"mr-2\">True</Badge>\r\n-                                        <Badge variant=\"outline\">False</Badge>\r\n-                                      </div>\r\n-                                    </div>\r\n-                                  )}\r\n-                                  {type === 'matching' && (\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <div className=\"font-medium mb-2\">Match the countries with their capitals:</div>\r\n-                                      <div className=\"grid grid-cols-2 gap-4\">\r\n-                                        <div>\r\n-                                          1. France<br />\r\n-                                          2. Germany<br />\r\n-                                          3. Spain\r\n-                                        </div>\r\n-                                        <div>\r\n-                                          • Berlin<br />\r\n-                                          • Paris<br />\r\n-                                          • Madrid\r\n-                                        </div>\r\n-                                      </div>\r\n-                                    </div>\r\n-                                  )}\r\n-                                  {type === 'ordering' && (\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <div className=\"font-medium mb-2\">Arrange in chronological order:</div>\r\n-                                      <div className=\"space-y-1\">\r\n-                                        <Badge variant=\"outline\" className=\"mr-2\">1</Badge>World War II<br />\r\n-                                        <Badge variant=\"outline\" className=\"mr-2\">2</Badge>Industrial Revolution<br />\r\n-                                        <Badge variant=\"outline\" className=\"mr-2\">3</Badge>Renaissance\r\n-                                      </div>\r\n-                                    </div>\r\n-                                  )}\r\n-                                  {type === 'short-answer' && (\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <div className=\"font-medium\">Question:</div>\r\n-                                      <div>Explain the water cycle in 2-3 sentences.</div>\r\n-                                      <div className=\"mt-2 p-2 border border-dashed rounded-md border-primary/30\">\r\n-                                        Answer space\r\n-                                      </div>\r\n-                                    </div>\r\n-                                  )}\r\n-                                </div>\r\n-                              </div>\r\n-                            </CardHeader>\r\n-                          </Card>\r\n-                        ))}\r\n-                      </CardContent>\r\n-                    </Card>\r\n-                  </div>\r\n-                ) : isViewMode ? (\r\n-                  <div className=\"space-y-6\">\r\n-                    {selectedGradeId ? (\r\n-                      <div className=\"grid grid-cols-1 gap-6\">\r\n-                        {topics.map((topic) => (\r\n-                          <Card key={topic.id} className=\"border-l-4 border-l-primary\">\r\n-                            <CardHeader>\r\n-                              <div className=\"flex items-center justify-between\">\r\n-                                <h3 className=\"text-lg font-semibold\">{topic.title}</h3>\r\n-                              </div>\r\n-                            </CardHeader>\r\n-                            <CardContent>\r\n-                              <div className=\"space-y-4\">\r\n-                                {subtopics\r\n-                                  .filter(subtopic => subtopic.topic_id === topic.id)\r\n-                                  .map((subtopic, index) => (\r\n-                                    <div key={subtopic.id || `subtopic-${index}`} className=\"border-l-2 pl-4\">\r\n-                                      <h4 className=\"text-md font-medium mb-2\">{subtopic.name || 'Untitled Subtopic'}</h4>\r\n-                                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n-                                        {lessons\r\n-                                          .filter(lesson => lesson.subtopic_id === subtopic.id)\r\n-                                          .map((lesson) => (\r\n-                                            <Card \r\n-                                              key={lesson.id} \r\n-                                              className={cn(\r\n-                                                \"cursor-pointer transition-all duration-200\",\r\n-                                                \"hover:shadow-md hover:translate-y-[-2px]\",\r\n-                                                \"hover:bg-accent/50 hover:border-primary/50\",\r\n-                                                \"active:translate-y-[0px]\",\r\n-                                                currentLessonId === lesson.id && \"border-primary bg-accent/50 shadow-md\",\r\n-                                                \"group\" // Enable group hover effects\r\n-                                              )}\r\n-                                              onClick={() => handleLessonSelect(lesson.id || '')}\r\n-                                            >\r\n-                                              <CardHeader className=\"p-4\">\r\n-                                                <div className=\"flex flex-col gap-2\">\r\n-                                                  <div className=\"flex items-center justify-between\">\r\n-                                                    <div className=\"flex items-center gap-2\">\r\n-                                                      <BookOpen className={cn(\r\n-                                                        \"h-4 w-4 text-primary\",\r\n-                                                        \"transition-transform duration-200\",\r\n-                                                        \"group-hover:scale-110\"\r\n-                                                      )} />\r\n-                                                      <span className=\"font-medium\">{lesson.title}</span>\r\n-                                                    </div>\r\n-                                                    <Button\r\n-                                                      variant=\"outline\"\r\n-                                                      size=\"sm\"\r\n-                                                      className={cn(\r\n-                                                        \"opacity-0 group-hover:opacity-100\",\r\n-                                                        \"transition-all duration-200\",\r\n-                                                        \"hover:bg-primary hover:text-primary-foreground\"\r\n-                                                      )}\r\n-                                                      disabled={!lesson.content || currentLessonId !== lesson.id}\r\n-                                                      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\r\n-                                                        e.stopPropagation();\r\n-                                                        window.location.href = `/teacher/lessons/${lesson.id}`;\r\n-                                                      }}\r\n-                                                    >\r\n-                                                      Start Lesson\r\n-                                                    </Button>\r\n-                                                  </div>\r\n-                                                  <div className=\"flex items-center gap-2\">\r\n-                                                    <Badge variant=\"outline\" className={cn(\r\n-                                                      \"bg-primary/5\",\r\n-                                                      \"transition-colors duration-200\",\r\n-                                                      \"group-hover:bg-primary/10\"\r\n-                                                    )}>\r\n-                                                      {lesson.questions?.length || 0} Questions\r\n-                                                    </Badge>\r\n-                                                    <Badge variant=\"outline\" className={cn(\r\n-                                                      \"bg-primary/5\",\r\n-                                                      \"transition-colors duration-200\",\r\n-                                                      \"group-hover:bg-primary/10\"\r\n-                                                    )}>\r\n-                                                      {lesson.activities?.length || 0} Activities\r\n-                                                    </Badge>\r\n-                                                  </div>\r\n-                                                </div>\r\n-                                              </CardHeader>\r\n-                                            </Card>\r\n-                                          ))}\r\n-                                      </div>\r\n-                                    </div>\r\n-                                  ))}\r\n-                              </div>\r\n-                            </CardContent>\r\n-                          </Card>\r\n-                        ))}\r\n-                      </div>\r\n-                    ) : (\r\n-                      <div className=\"text-center py-20\">\r\n-                        <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\r\n-                        <h3 className=\"text-lg font-medium\">Select a Grade</h3>\r\n-                        <p className=\"text-sm text-muted-foreground\">\r\n-                          Choose a grade from the left panel to start managing content\r\n-                        </p>\r\n-                      </div>\r\n-                    )}\r\n-                  </div>\r\n-                ) : (\r\n-                  // Edit Mode Content\r\n-                  <div className=\"space-y-4\">\r\n-                    {/* Lesson Title */}\r\n-                    <Card>\r\n-                      <CardHeader>\r\n-                        <div className=\"flex items-center justify-between mb-4\">\r\n-                          <h2 className=\"text-2xl font-bold\">Lesson Content</h2>\r\n-                                                    <Button\r\n-                                                      variant=\"outline\"\r\n-                                                      size=\"sm\"\r\n-                            onClick={() => setIsContentEditorOpen(true)}\r\n-                          >\r\n-                            <Pencil className=\"h-4 w-4 mr-2\" />\r\n-                            Edit Content\r\n-                          </Button>\r\n-                        </div>\r\n-                      </CardHeader>\r\n-                      <CardContent className=\"space-y-4\">\r\n-                        {/* Lesson Title */}\r\n-                        <div className=\"flex items-center justify-between\">\r\n-                          <div className=\"space-y-1\">\r\n-                            <Label>Lesson Title</Label>\r\n-                            <InlineEdit\r\n-                              value={lessonTitle}\r\n-                              onSave={async (newTitle) => {\r\n-                                setLessonTitle(newTitle);\r\n-                                await handleSaveLesson();\r\n-                              }}\r\n-                              isEditing={isEditingTitle}\r\n-                              setIsEditing={setIsEditingTitle}\r\n-                              placeholder=\"Enter lesson title\"\r\n-                              className=\"text-lg font-medium\"\r\n-                            />\r\n-                          </div>\r\n-                        </div>\r\n-\r\n-                        {/* Content Editor and Display */}\r\n-                        <div className=\"space-y-4\">\r\n-                          {isContentEditorOpen ? (\r\n-                            <div className=\"border rounded-lg p-4\">\r\n-                              <div className=\"mb-4\">\r\n-                                <Label>Content Heading</Label>\r\n-                                <InlineEdit\r\n-                                  value={contentHeading}\r\n-                                  onSave={(newHeading) => setContentHeading(newHeading)}\r\n-                                  isEditing={isEditingHeading}\r\n-                                  setIsEditing={setIsEditingHeading}\r\n-                                  placeholder=\"Add content heading\"\r\n-                                  className=\"text-base text-muted-foreground\"\r\n-                                />\r\n-                              </div>\r\n-                              <RichTextEditor\r\n-                                value={lessonContent}\r\n-                                onChange={setLessonContent}\r\n-                                onSave={async (content) => {\r\n-                                  await handleContentSave(content);\r\n-                                  setIsContentEditorOpen(false);\r\n-                                }}\r\n-                                placeholder=\"Add lesson content here...\"\r\n-                              />\r\n-                            </div>\r\n-                          ) : lessonContent ? (\r\n-                            <div className=\"prose prose-sm max-w-none\">\r\n-                              {contentHeading && (\r\n-                                <h3 className=\"text-lg font-semibold mb-2\">{contentHeading}</h3>\r\n-                              )}\r\n-                              <div dangerouslySetInnerHTML={{ __html: lessonContent }} />\r\n-                            </div>\r\n-                          ) : (\r\n-                            <div className=\"text-center py-8 text-muted-foreground\">\r\n-                              Click 'Edit Content' to add lesson content\r\n-                            </div>\r\n-                          )}\r\n-                        </div>\r\n-                      </CardContent>\r\n-                    </Card>\r\n-\r\n-                    {/* Tabs */}\r\n-                    <Tabs defaultValue=\"questions\" className=\"mt-6\">\r\n-                    <TabsList className=\"grid w-full grid-cols-2\">\r\n-                        <TabsTrigger value=\"questions\">\r\n-                          <MessageSquare className=\"h-4 w-4 mr-2\" />\r\n-                        Questions\r\n-                      </TabsTrigger>\r\n-                        <TabsTrigger value=\"activities\">\r\n-                          <ActivityIcon className=\"h-4 w-4 mr-2\" />\r\n-                        Activities\r\n-                      </TabsTrigger>\r\n-                    </TabsList>\r\n-\r\n-                      {/* Questions Tab */}\r\n-                      <TabsContent value=\"questions\" className=\"space-y-4\">\r\n-                      <CardHeader>\r\n-                          <CardDescription>Add and manage questions for this lesson</CardDescription>\r\n-                      </CardHeader>\r\n-                        {questions.map((question, index) => (\r\n-                          <Card key={index} className={cn(\r\n-                            \"relative border-l-4 transition-colors duration-200\",\r\n-                            expandedQuestion === index ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\r\n-                          )}>\r\n-                            <CardHeader className=\"pb-3\">\r\n-                              <div className=\"flex items-center justify-between gap-4\">\r\n-                                <div className=\"flex items-center gap-3 min-w-0 flex-1\">\r\n-                                  <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n-                                    <span className=\"px-2 py-1 bg-primary/10 rounded-md text-sm font-semibold text-primary whitespace-nowrap\">\r\n-                                      Q {index + 1}\r\n-                                    </span>\r\n-                                    <Badge variant=\"outline\" className=\"whitespace-nowrap\">\r\n-                                      {QUESTION_TYPES[question.type as keyof typeof QUESTION_TYPES]?.label || question.type}\r\n-                                    </Badge>\r\n-                                    {question.isDraft && (\r\n-                                      <Badge variant=\"secondary\" className=\"whitespace-nowrap\">Draft</Badge>\r\n-                                )}\r\n-                                  </div>\r\n-                                      {expandedQuestion !== index && (\r\n-                                        <div className=\"text-sm text-muted-foreground truncate\">\r\n-                                          {question.title || 'No question text'} - {question.content || 'No question texts'}\r\n-                                        </div>\r\n-                                      )}\r\n-                                    </div>\r\n-                                    <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n-                                      <Button\r\n-                                        variant=\"ghost\"\r\n-                                        size=\"sm\"\r\n-                                        onClick={() => handleQuestionExpand(index)}\r\n-                                      >\r\n-                                        {expandedQuestion === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n-                                      </Button>\r\n-                                      <Button\r\n-                                        variant=\"ghost\"\r\n-                                        size=\"sm\"\r\n-                                        onClick={() => handleRemoveQuestion(index)}\r\n-                                      >\r\n-                                        <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n-                                      </Button>\r\n-                                    </div>\r\n-                                  </div>\r\n-                                </CardHeader>\r\n-                                {expandedQuestion === index && (\r\n-                                  <CardContent>\r\n-                                    <QuestionForm\r\n-                                      key={index}\r\n-                                      question={{ \r\n-                                        ...question, \r\n-                                        lesson_id: currentLessonId || '',\r\n-                                        type: isValidQuestionType(question.type) ? question.type : 'speaking',\r\n-                                        data: {\r\n-                                          prompt: question.data?.prompt ?? '',\r\n-                                          teacher_script: question.data?.teacher_script ?? '',\r\n-                                          followup_prompt: question.data?.followup_prompt ?? [],\r\n-                                          sample_answer: question.data?.sample_answer ?? '',\r\n-                                          \r\n-                                        } \r\n-                                      }}\r\n-                                      index={index}\r\n-                                      onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\r\n-                                        await handleUpdateQuestion(index, {\r\n-                                          ...updatedQuestion,\r\n-                                          data: {\r\n-                                            prompt: updatedQuestion.data?.prompt ?? '',\r\n-                                            teacher_script: updatedQuestion.data?.teacher_script ?? '',\r\n-                                            followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\r\n-                                            sample_answer: updatedQuestion.data?.sample_answer ?? '',\r\n-                                            metadata: updatedQuestion.metadata ?? {},\r\n-                                            },\r\n-                                            correct_answer: updatedQuestion.correct_answer ?? '',\r\n-                                            content: updatedQuestion.content ?? ''  // Add default value\r\n-                                        });\r\n-                                      }}\r\n-                                      onRemove={handleRemoveQuestion}\r\n-                                      onAddExercisePrompt={handleAddExercisePrompt}\r\n-                                      onRemoveExercisePrompt={handleRemoveExercisePrompt}\r\n-                                      onExercisePromptChange={handleExercisePromptChange}\r\n-                                    /><Button \r\n-                                    size=\"sm\"\r\n-                                    variant=\"outline\"\r\n-                                    onClick={() => handleSaveQuestion(question, index)}\r\n-                                    className=\"ml-2\"\r\n-                                  >\r\n-                                    {questionSaveStatuses.find(s => s.id === question.id)?.status === 'saving' ? (\r\n-                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n-                                    ) : (\r\n-                                      <Save className=\"h-4 w-4 mr-2\" />\r\n-                                    )}\r\n-                                    Save Question\r\n-                                                    </Button>\r\n-                                    {/* Exercise Prompts with Save Buttons */}\r\n-                                    {question.exercisePrompts?.map((prompt, promptIndex) => (\r\n-                                      <div key={`${question.id}-prompt-${promptIndex}`} className=\"mt-4\"> {/* Updated key */}\r\n-                                        <div className=\"flex items-center justify-between mb-2\">\r\n-                                          <h4 className=\"text-sm font-medium\">Exercise Prompt {promptIndex + 1}</h4>\r\n-                                          <div className=\"flex items-center gap-2\">\r\n-                                            <TooltipProvider>\r\n-                                              <Tooltip>\r\n-                                                <TooltipTrigger asChild>\r\n-                                                  <Button\r\n-                                                    size=\"sm\"\r\n-                                                    variant=\"outline\"\r\n-                                                    onClick={() => handleSavePrompt(question.id, prompt, promptIndex)}\r\n-                                                    disabled={promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving'}\r\n-                                                  >\r\n-                                                    {promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving' ? (\r\n-                                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n-                                                    ) : (\r\n-                                                      <Save className=\"h-4 w-4 mr-2\" />\r\n-                                                    )}\r\n-                                                    Save Prompt\r\n-                                                  </Button>\r\n-                                                </TooltipTrigger>\r\n-                                                <TooltipContent>\r\n-                                                  {`Status: ${promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}`}\r\n-                                                </TooltipContent>\r\n-                                              </Tooltip>\r\n-                                            </TooltipProvider>\r\n-                                            <Badge variant={\r\n-                                              promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saved'\r\n-                                                ? 'secondary'\r\n-                                                : promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'error'\r\n-                                                ? 'destructive'\r\n-                                                : 'default'\r\n-                                            }>\r\n-                                              {promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}\r\n-                                            </Badge>\r\n-                                                  </div>\r\n-                                        </div>\r\n-                                        <ExercisePromptCard\r\n-                                          key={prompt.id} // Add a unique key here\r\n-                                          prompt={prompt}\r\n-                                          promptIndex={promptIndex}\r\n-                                          onRemove={() => handleRemoveExercisePrompt(index, promptIndex)}\r\n-                                          onUpdate={(updatedPrompt: ExercisePrompt) => {\r\n-                                            // Prevent duplicate updates\r\n-                                            if (updatedPrompt.id === prompt.id) {\r\n-                                              handleExercisePromptChange(index, promptIndex, updatedPrompt);\r\n-                                            }\r\n-                                          }}\r\n-                                        />\r\n-                                      </div>\r\n-                                    ))}\r\n-                                  </CardContent>\r\n-                                )}\r\n-                              </Card>\r\n-                            ))}\r\n-\r\n-                            {/* Add Question Button */}\r\n-                            <div className=\"flex items-center justify-between\">\r\n-                              <QuestionTypeSelect \r\n-                                value={selectedQuestionType} \r\n-                                onChange={handleQuestionTypeChange}\r\n-                              />\r\n-                                        <Button\r\n-                                          onClick={handleAddQuestion}\r\n-                                          disabled={!selectedQuestionType}\r\n-                                        >\r\n-                                <Plus className=\"h-4 w-4 mr-2\" />\r\n-                                          Add Question\r\n-                                        </Button>\r\n-                                      </div>\r\n-                      </TabsContent>\r\n-\r\n-                      {/* Activities Tab */}\r\n-                      <TabsContent value=\"activities\" className=\"space-y-4\">\r\n-                      <CardHeader>\r\n-                          <CardDescription>Add and manage activities for this lesson</CardDescription>\r\n-                      </CardHeader>\r\n-                        {activities.map((activity, index) => (\r\n-                          <Card key={index}>\r\n-                            <CardHeader className=\"pb-3\">\r\n-                              <div className=\"flex items-center justify-between\">\r\n-                                  <div className=\"flex items-center gap-2\">\r\n-                                  <Badge variant=\"outline\">Activity {index + 1}</Badge>\r\n-                                  </div>\r\n-                                <div className=\"flex items-center gap-2\">\r\n-                                  <Button\r\n-                                    variant=\"ghost\"\r\n-                                    size=\"sm\"\r\n-                                    onClick={() => handleActivityExpand(index)}\r\n-                                  >\r\n-                                    {expandedActivity === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n-                                  </Button>\r\n-                                  <Button\r\n-                                    variant=\"ghost\"\r\n-                                    size=\"sm\"\r\n-                                    onClick={() => handleRemoveActivity(index)}\r\n-                                  >\r\n-                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n-                                  </Button>\r\n-                                </div>\r\n-                              </div>\r\n-                            </CardHeader>\r\n-                            {expandedActivity === index && (\r\n-                              <CardContent>\r\n-                                <div className=\"space-y-4\">\r\n-                                  <div className=\"space-y-2\">\r\n-                                    <Label>Instructions</Label>\r\n-                                    <Textarea\r\n-                                      value={activity.instructions}\r\n-                                      onChange={(e) => handleUpdateActivity(index, {\r\n-                                        ...activity,\r\n-                                        instructions: e.target.value\r\n-                                      })}\r\n-                                      placeholder=\"Enter activity instructions\"\r\n-                                    />\r\n-                                  </div>\r\n-                                    \r\n-                                    {/* Media Section */}\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <Label>Media</Label>\r\n-                                      {activity.media?.map((media, mediaIndex) => (\r\n-                                        <div key={mediaIndex} className=\"flex items-center gap-2\">\r\n-                                          <Input\r\n-                                            value={media.url}\r\n-                                            onChange={(e) => {\r\n-                                              const updatedMedia = [...(activity.media || [])];\r\n-                                              updatedMedia[mediaIndex] = {\r\n-                                                type: media.type,\r\n-                                                url: e.target.value\r\n-                                              };\r\n-                                              handleUpdateActivity(index, {\r\n-                                                ...activity,\r\n-                                                media: updatedMedia\r\n-                                              });\r\n-                                            }}\r\n-                                            placeholder=\"Media URL\"\r\n-                                          />\r\n-                                          <Select\r\n-                                            value={media.type}\r\n-                                            onValueChange={(value) => {\r\n-                                              const updatedMedia = [...(activity.media || [])];\r\n-                                              updatedMedia[mediaIndex] = {\r\n-                                                type: value as 'image' | 'gif' | 'video',\r\n-                                                url: media.url\r\n-                                              };\r\n-                                              handleUpdateActivity(index, {\r\n-                                                ...activity,\r\n-                                                media: updatedMedia\r\n-                                              });\r\n-                                            }}\r\n-                                          >\r\n-                                            <SelectTrigger className=\"w-[120px]\">\r\n-                                              <SelectValue placeholder=\"Type\" />\r\n-                                            </SelectTrigger>\r\n-                                            <SelectContent>\r\n-                                              <SelectItem value=\"image\">Image</SelectItem>\r\n-                                              <SelectItem value=\"gif\">GIF</SelectItem>\r\n-                                              <SelectItem value=\"video\">Video</SelectItem>\r\n-                                            </SelectContent>\r\n-                                          </Select>\r\n-                                <Button\r\n-                                            variant=\"ghost\"\r\n-                                            size=\"sm\"\r\n-                                  onClick={() => {\r\n-                                              const updatedMedia = (activity.media || []).filter((_, i) => i !== mediaIndex);\r\n-                                              handleUpdateActivity(index, {\r\n-                                                ...activity,\r\n-                                                media: updatedMedia\r\n-                                          });\r\n-                                          }}\r\n-                                  >\r\n-                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n-                                  </Button>\r\n-                                </div>\r\n-                                        ))}\r\n-                                  <Button\r\n-                                    variant=\"outline\"\r\n-                                    size=\"sm\"\r\n-                                            onClick={() => {\r\n-                                              handleUpdateActivity(index, {\r\n-                                                ...activity,\r\n-                                                media: [\r\n-                                                  ...(activity.media || [])  ,\r\n-                                                  { url: '', type: 'image' }\r\n-                                                ]\r\n-                                              });\r\n-                                            }}\r\n-                                  >\r\n-                                    <Plus className=\"h-4 w-4 mr-2\" />\r\n-                                            Add Media\r\n-                                  </Button>\r\n-                                </div>\r\n-                                      </div>\r\n-                                    </CardContent>\r\n-                                  )}\r\n-                                </Card>\r\n-                              ))}\r\n-\r\n-                              {/* Add Activity Button */}\r\n-                              <Button\r\n-                                onClick={handleAddActivity}\r\n-                                className=\"w-full\"\r\n-                              >\r\n-                                <Plus className=\"h-4 w-4 mr-2\" />\r\n-                                Add Activity\r\n-                              </Button>\r\n-                          </TabsContent>\r\n-                        </Tabs>\r\n-                        </div>\r\n-                )}\r\n-\r\n-                    {/* Floating Save Button */}\r\n-                    <div className=\"fixed bottom-8 right-8 flex items-center gap-4\">\r\n-                      {saveProgress !== 'idle' && (\r\n-                        <div className={cn(\r\n-                          \"flex items-center gap-2 rounded-lg px-4 py-2 shadow-lg\",\r\n-                          {\r\n-                            \"bg-background border\": saveProgress === 'saving',\r\n-                            \"bg-green-500 text-white\": saveProgress === 'saved',\r\n-                            \"bg-destructive text-destructive-foreground\": saveProgress === 'error'\r\n-                          }\r\n-                        )}>\r\n-                          {saveProgress === 'saving' && (\r\n-                            <>\r\n-                              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n-                              <span className=\"text-sm\">Saving changes...</span>\r\n-                            </>\r\n-                          )}\r\n-                          {saveProgress === 'saved' && (\r\n-                            <>\r\n-                              <Check className=\"h-4 w-4\" />\r\n-                              <span className=\"text-sm\">Changes saved</span>\r\n-                            </>\r\n-                          )}\r\n-                          {saveProgress === 'error' && (\r\n-                            <>\r\n-                              <X className=\"h-4 w-4\" />\r\n-                              <span className=\"text-sm\">Error saving changes</span>\r\n-                            </>\r\n-                          )}\r\n-                        </div>\r\n-                      )}\r\n-                      <Button\r\n-                        onClick={handleSaveLesson}\r\n-                        disabled={saveProgress === 'saving'}\r\n-                        className=\"shadow-lg\"\r\n-                      >\r\n-                        {saveProgress === 'saving' ? (\r\n-                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\r\n-                        ) : (\r\n-                          <Save className=\"h-4 w-4 mr-2\" />\r\n-                        )}\r\n-                        {saveProgress === 'saving' ? 'Saving...' : 'Save Lesson'}\r\n-                      </Button>\r\n-                    </div>\r\n-                  </>\r\n-            )}\r\n-    </div>\r\n-    \r\n-\r\n-      {/* Floating Save Button */}\r\n-      {selectedSubtopicId && currentLessonId && (\r\n-          <div className=\"fixed bottom-4 right-4 flex flex-col gap-2\">\r\n-            <TooltipProvider>\r\n-              <Tooltip>\r\n-                <TooltipTrigger asChild>\r\n-                  <Button\r\n-                    size=\"icon\"\r\n-                    className=\"rounded-full h-12 w-12 shadow-lg\"\r\n-                    onClick={handleSaveLesson}\r\n-                    disabled={!selectedSubtopicId || !lessonTitle || questions.length === 0}\r\n-                  >\r\n-                    <Save className=\"h-6 w-6\" />\r\n-                  </Button>\r\n-                </TooltipTrigger>\r\n-                <TooltipContent>\r\n-                  <p>Save Lesson (Ctrl+S)</p>\r\n-                </TooltipContent>\r\n-              </Tooltip>\r\n-            </TooltipProvider>\r\n-          </div>\r\n-        )}\r\n-        <SaveFeedback />\r\n-\r\n-        {/* Add Grade Modal - do not delete */}\r\n-        {/* {modalState.showAddGrade && (\r\n-          <Dialog \r\n-            open={modalState.showAddGrade} \r\n-            onOpenChange={(open) => handleModalStateChange('showAddGrade', open)}\r\n-          >\r\n-            <DialogContent \r\n-              className=\"sm:max-w-[425px]\"\r\n-              onEscapeKeyDown={cleanupModalState}\r\n-              onPointerDownOutside={cleanupModalState}\r\n-            >\r\n-              <DialogHeader>\r\n-                <DialogTitle>Add New Grade</DialogTitle>\r\n-                <DialogDescription>Enter the details for the new grade.</DialogDescription>\r\n-              </DialogHeader>\r\n-              <div className=\"space-y-4 py-4\">\r\n-                <div className=\"space-y-2\">\r\n-                  <Label htmlFor=\"grade-name\">Grade Name</Label>\r\n-                  <Input\r\n-                    id=\"grade-name\"\r\n-                    value={newItemData.name}\r\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n-                    placeholder=\"Enter grade name\"\r\n-                  />\r\n-      </div>\r\n-              </div>\r\n-              <DialogFooter>\r\n-                <Button variant=\"outline\" onClick={() => {\r\n-                  setModalState({ ...modalState, showAddGrade: false });\r\n-                  setNewItemData({ name: '', description: '' });\r\n-                }}>\r\n-                  Cancel\r\n-                </Button>\r\n-                <Button onClick={handleCreateGrade} disabled={!newItemData.name}>Create Grade</Button>\r\n-              </DialogFooter>\r\n-            </DialogContent>\r\n-          </Dialog>\r\n-        )} */}\r\n-\r\n-        {/* Add Topic Modal */}\r\n-        {modalState.showAddTopic && (\r\n-          <Dialog \r\n-            open={modalState.showAddTopic} \r\n-            onOpenChange={(open) => handleModalStateChange('showAddTopic', open)}\r\n-          >\r\n-            <DialogContent \r\n-              className=\"sm:max-w-[425px]\"\r\n-              onEscapeKeyDown={cleanupModalState}\r\n-              onPointerDownOutside={cleanupModalState}\r\n-            >\r\n-              <DialogHeader>\r\n-                <DialogTitle>Add New Topic</DialogTitle>\r\n-                <DialogDescription>Enter the details for the new topic.</DialogDescription>\r\n-              </DialogHeader>\r\n-              <div className=\"space-y-4 py-4\">\r\n-                <div className=\"space-y-2\">\r\n-                  <Label htmlFor=\"topic-name\">Topic Name</Label>\r\n-                  <Input\r\n-                    id=\"topic-name\"\r\n-                    value={newItemData.name}\r\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n-                    placeholder=\"Enter topic name\"\r\n-                  />\r\n-                </div>\r\n-              </div>\r\n-              <DialogFooter>\r\n-                <Button variant=\"outline\" onClick={() => {\r\n-                  setModalState({ ...modalState, showAddTopic: false });\r\n-                  setNewItemData({ name: '', description: '' });\r\n-                }}>\r\n-                  Cancel\r\n-                </Button>\r\n-                <Button onClick={handleCreateTopic} disabled={!newItemData.name}>Create Topic</Button>\r\n-              </DialogFooter>\r\n-            </DialogContent>\r\n-          </Dialog>\r\n-        )}\r\n-\r\n-        {/* Add Subtopic Modal */}\r\n-        {modalState.showAddSubtopic && (\r\n-          <Dialog \r\n-            open={modalState.showAddSubtopic} \r\n-            onOpenChange={(open) => handleModalStateChange('showAddSubtopic', open)}\r\n-          >\r\n-            <DialogContent \r\n-              className=\"sm:max-w-[425px]\"\r\n-              onEscapeKeyDown={cleanupModalState}\r\n-              onPointerDownOutside={cleanupModalState}\r\n-            >\r\n-              <DialogHeader>\r\n-                <DialogTitle>Add New Subtopic</DialogTitle>\r\n-                <DialogDescription>Enter the details for the new subtopic.</DialogDescription>\r\n-              </DialogHeader>\r\n-              <div className=\"space-y-4 py-4\">\r\n-                <div className=\"space-y-2\">\r\n-                  <Label htmlFor=\"subtopic-name\">Subtopic Name</Label>\r\n-                  <Input\r\n-                    id=\"subtopic-name\"\r\n-                    value={newItemData.name}\r\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n-                    placeholder=\"Enter subtopic name\"\r\n-                  />\r\n-                </div>\r\n-              </div>\r\n-              <DialogFooter>\r\n-                <Button variant=\"outline\" onClick={() => {\r\n-                  setModalState({ ...modalState, showAddSubtopic: false });\r\n-                  setNewItemData({ name: '', description: '' });\r\n-                }}>\r\n-                  Cancel\r\n-                </Button>\r\n-                <Button onClick={() => handleCreateSubtopic({ title: newItemData.name })} disabled={!newItemData.name}>Create Subtopic</Button>\r\n-              </DialogFooter>\r\n-            </DialogContent>\r\n-          </Dialog>\r\n-        )}\r\n-\r\n-        {/* Add Lesson Modal */}\r\n-        {modalState.showAddLesson && (\r\n-          <Dialog \r\n-            open={modalState.showAddLesson} \r\n-            onOpenChange={(open) => handleModalStateChange('showAddLesson', open)}\r\n-          >\r\n-            <DialogContent \r\n-              className=\"sm:max-w-[425px]\"\r\n-              onEscapeKeyDown={cleanupModalState}\r\n-              onPointerDownOutside={cleanupModalState}\r\n-            >\r\n-              <DialogHeader>\r\n-                <DialogTitle>Add New Lesson</DialogTitle>\r\n-                <DialogDescription>Enter the details for the new lesson.</DialogDescription>\r\n-              </DialogHeader>\r\n-              <div className=\"space-y-4 py-4\">\r\n-                <div className=\"space-y-2\">\r\n-                  <Label htmlFor=\"lesson-name\">Lesson Title</Label>\r\n-                  <Input\r\n-                    id=\"lesson-name\"\r\n-                    value={newItemData.name}\r\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n-                    placeholder=\"Enter lesson title\"\r\n-                  />\r\n-                </div>\r\n-              </div>\r\n-              <DialogFooter>\r\n-                <Button variant=\"outline\" onClick={() => {\r\n-                  setModalState({ ...modalState, showAddLesson: false });\r\n-                  setNewItemData({ name: '', description: '' });\r\n-                }}>\r\n-                  Cancel\r\n-                </Button>\r\n-                <Button onClick={handleCreateLesson} disabled={!newItemData.name}>Create Lesson</Button>\r\n-              </DialogFooter>\r\n-            </DialogContent>\r\n-          </Dialog>\r\n-        )}\r\n-      </div>\r\n-      <Toaster />\r\n-      </div>\r\n-  );\r\n-} \n-\"use client\";\r\n-\r\n-import { useState, useCallback, useEffect, useRef } from 'react';\r\n-import { toast } from 'sonner';\r\n-import { Toaster } from 'sonner';\r\n-import Link from 'next/link';\r\n-import {  Activity as ActivityIcon,  ArrowLeft,  BookOpen,  ChevronDown,  ChevronRight,  Check,  Edit,  Eye,  EyeOff,  HelpCircle,  Layers,  List,  MessageSquare,  Plus,  Save,  Trash as Trash2, X, Pencil, Lock, Unlock, RefreshCw, Clock, Bell, Moon, GraduationCap, MoreHorizontal, Loader2 } from 'lucide-react';\r\n-import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\n-import { Badge } from '@/components/ui/badge';\r\n-import { Button } from '@/components/ui/button';\r\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\n-import { Input } from '@/components/ui/input';\r\n-import { Label } from '@/components/ui/label';\r\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\n-import { Textarea } from '@/components/ui/textarea';\r\n-import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\r\n-import { cn } from '@/lib/utils';\r\n-import { API_BASE_URL, QUESTION_TYPES, isQuestionType } from './constants';\r\n-import { ExercisePrompt, Lesson } from './types';\r\n-import { QuestionFormProps, ExercisePromptCardProps, Activity, Grade, Topic, Subtopic as SubTopic } from './types';\r\n-import { QuestionForm } from './components/question-form';\r\n-import { ExercisePromptCard } from './components/exercise-prompt-card';\r\n-import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\r\n-import { supabase } from '@/lib/supabase';\r\n-import { useContentStore } from '@/lib/content/store';\r\n-import { contentService } from '@/lib/content/ContentService';\r\n-import { MediaPreview } from '@/components/ui/media-preview';\r\n-import { QuestionTypeSelect } from './components/question-type-select';\r\n-import { RichTextEditor } from '@/components/ui/rich-text-editor';\r\n-import {\r\n-  AlertDialog,\r\n-  AlertDialogAction,\r\n-  AlertDialogCancel,\r\n-  AlertDialogContent,\r\n-  AlertDialogDescription,\r\n-  AlertDialogFooter,\r\n-  AlertDialogHeader,\r\n-  AlertDialogTitle,\r\n-  AlertDialogTrigger,\r\n-} from \"@/components/ui/alert-dialog\";\r\n-import { debounce, isNull } from 'lodash';\r\n-import { PostgrestError } from '@supabase/supabase-js';\r\n-import { Question as ContentQuestion } from './types';  // Import the specific type\r\n-import { Trash } from \"lucide-react\";\r\n-import { AnimatePresence, motion } from 'framer-motion';\r\n-\r\n-\r\n-// Update the API endpoint to match your backend route\r\n-const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\r\n-\r\n-interface QuestionTypeSelectProps {\r\n-  value: string;\r\n-  onValueChange: (value: string) => void;\r\n-}\r\n-\r\n-// Add metadata type\r\n-interface LessonMetadata {\r\n-  lastEdited?: string;\r\n-  version?: number;\r\n-  tags?: string[];\r\n-  status?: 'draft' | 'published';\r\n-  authorId?: string;\r\n-  duration?: number;\r\n-  transcript?: string;\r\n-}\r\n-\r\n-type ContentType = 'html' | 'markdown' | 'rich-text' | 'text' | 'json';\r\n-\r\n-interface LessonContent {\r\n-  id: string;\r\n-  lesson_id: string;\r\n-  content: any[];\r\n-  metadata: {\r\n-    lastEdited?: string;\r\n-    version?: number;\r\n-    status?: 'draft' | 'published';\r\n-    authorId?: string;\r\n-  };\r\n-  content_type: string;\r\n-  order_index: number;\r\n-  updated_at: string;\r\n-  user_id: string;\r\n-}\r\n-\r\n-interface InlineEditProps {\r\n-  value: string;\r\n-  onSave: (value: string) => void;\r\n-  isEditing: boolean;\r\n-  setIsEditing: (value: boolean) => void;\r\n-  placeholder?: string;\r\n-  className?: string;\r\n-}\r\n-\r\n-// Add validation interface\r\n-interface QuestionValidation {\r\n-  isValid: boolean;\r\n-  message: string;\r\n-}\r\n-\r\n-// Add this type validation helper\r\n-const getQuestionTypeFields = (type: string) => {\r\n-  switch (type) {\r\n-    case 'multipleChoice':\r\n-      return {\r\n-        required: ['prompt', 'options', 'correctAnswer'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          options: [],\r\n-          correctAnswer: '',\r\n-          teacherScript: '',\r\n-          explanation: ''\r\n-        }\r\n-      };\r\n-    case 'fillInBlank':\r\n-      return {\r\n-        required: ['prompt', 'blanks'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          blanks: [],\r\n-          teacherScript: '',\r\n-          explanation: ''\r\n-        }\r\n-      };\r\n-    case 'trueFalse':\r\n-      return {\r\n-        required: ['prompt', 'correctAnswer'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          correctAnswer: null,\r\n-          teacherScript: '',\r\n-          explanation: ''\r\n-        }\r\n-      };\r\n-    case 'matching':\r\n-      return {\r\n-        required: ['prompt', 'pairs'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          pairs: [],\r\n-          teacherScript: '',\r\n-          explanation: ''\r\n-        }\r\n-      };\r\n-    case 'ordering':\r\n-      return {\r\n-        required: ['prompt', 'items'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          items: [],\r\n-          correctOrder: [],\r\n-          teacherScript: '',\r\n-          explanation: ''\r\n-        }\r\n-      };\r\n-    case 'shortAnswer':\r\n-      return {\r\n-        required: ['prompt', 'sampleAnswer'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          sampleAnswer: '',\r\n-          teacherScript: '',\r\n-          explanation: '',\r\n-          keywords: []\r\n-        }\r\n-      };\r\n-    case 'speaking':\r\n-      return {\r\n-        required: ['prompt', 'sampleAnswer'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          sampleAnswer: '',\r\n-          teacherScript: '',\r\n-          audioPrompt: '',\r\n-          pronunciation: ''\r\n-        }\r\n-      };\r\n-    case 'listening':\r\n-      return {\r\n-        required: ['prompt', 'audioContent'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          audioContent: '',\r\n-          transcript: '',\r\n-          teacherScript: '',\r\n-          comprehensionQuestions: []\r\n-        }\r\n-      };\r\n-    case 'listenAndRepeat':\r\n-      return {\r\n-        required: ['prompt', 'audioContent'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          audioContent: '',\r\n-          targetPhrase: '',\r\n-          teacherScript: '',\r\n-          pronunciation: ''\r\n-        }\r\n-      };\r\n-    default:\r\n-      return {\r\n-        required: ['prompt'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          teacherScript: ''\r\n-        }\r\n-      };\r\n-  }\r\n-}\r\n-\r\n-interface SaveStatus {\r\n-  id: string;\r\n-  status: 'draft' | 'saved' | 'saving' | 'error';\r\n-  lastSaved?: string;\r\n-}\r\n-\r\n-interface Question {\r\n-  id: string;\r\n-  type: string;\r\n-  lesson_id: string;\r\n-  title: string;\r\n-  content: string;\r\n-  metadata: Record<string, any>;\r\n-  data: Record<string, any>; // This allows dynamic field access\r\n-  correct_answer: string;\r\n-  exercisePrompts: ExercisePrompt[];\r\n-  isDraft?: boolean;\r\n-}\r\n-\r\n-// Add at the top of the file with other type definitions\r\n-type QuestionType = keyof typeof QUESTION_TYPES;\r\n-\r\n-// Add this type guard function\r\n-const isValidQuestionType = (type: string): type is QuestionType => {\r\n-  return type in QUESTION_TYPES;\r\n-};\r\n-\r\n-// Update handleAddQuestion\r\n-\r\n-\r\n-// Update validateQuestion\r\n-const validateQuestion = (question: Question): QuestionValidation => {\r\n-  const { required } = getQuestionTypeFields(question.type);\r\n-  const missingFields = required.filter(field => {\r\n-    const value = question.data?.[field];\r\n-    return !value || \r\n-      (Array.isArray(value) && value.length === 0) || \r\n-      (typeof value === 'string' && !value.trim());\r\n-  });\r\n-\r\n-  if (missingFields.length > 0) {\r\n-    return {\r\n-      isValid: false,\r\n-      message: `Missing required fields: ${missingFields.join(', ')}`\r\n-    };\r\n-  }\r\n-\r\n-  return { isValid: true, message: '' };\r\n-};\r\n-\r\n-// Add proper type for question data\r\n-interface QuestionData {\r\n-  id?: string;\r\n-  content?: string;\r\n-  type?: string;\r\n-  data?: {\r\n-    prompt?: string;\r\n-    teacher_script?: string;\r\n-    followup_prompt?: string[];\r\n-    sample_answer?: string;\r\n-    answer?: string;\r\n-  } | null;\r\n-  prompt: string;\r\n-  teacherScript: string;\r\n-  followup_prompt: string[];\r\n-  answer?: string;\r\n-  correct_answer?: string;\r\n-}\r\n-\r\n-// In your component where you handle questions\r\n-const handleQuestionData = (question: QuestionData) => {\r\n-  return {\r\n-    ...question,\r\n-    data: {\r\n-      prompt: question?.data?.prompt || '',\r\n-      teacher_script: question?.data?.teacher_script || '',\r\n-      followup_prompt: question?.data?.followup_prompt || [],\r\n-      sample_answer: question?.data?.sample_answer || undefined,  // Convert null to undefined\r\n-      answer: question?.data?.answer || undefined  // Convert null to undefined\r\n-    } as const,\r\n-    sampleAnswer: question?.correct_answer || ''\r\n-  };\r\n-};\r\n-\r\n-export default function LessonManagementPage() {\r\n-  // State declarations\r\n-  \r\n-  const [selectedGradeId, setSelectedGradeId] = useState<string | null>(null);\r\n-  const [selectedTopicId, setSelectedTopicId] = useState<string | null>(null);\r\n-  const [selectedSubtopicId, setSelectedSubtopicId] = useState<string | null>(null);\r\n-  const [lessonTitle, setLessonTitle] = useState<string>('');\r\n-  const [currentLessonId, setCurrentLessonId] = useState<string | null>(null);\r\n-  const [questions, setQuestions] = useState<Question[]>([]);\r\n-  const [saveProgress, setSaveProgress] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');\r\n-  const [activities, setActivities] = useState<Activity[]>([]);\r\n-  const [localBuffer, setLocalBuffer] = useState<{ timestamp: number; data: any } | null>(null);\r\n-  const [lastSavedToServer, setLastSavedToServer] = useState<number>(Date.now());\r\n-  const [selectedQuestionType, setSelectedQuestionType] = useState<string>('');\r\n-  const [editingQuestionIndex, setEditingQuestionIndex] = useState<number | null>(null);\r\n-  const [showHelpTips, setShowHelpTips] = useState(true);\r\n-  const [isNavigating, setIsNavigating] = useState(false);\r\n-  const [lessons, setLessons] = useState<Lesson[]>([]);\r\n-  const [grades, setGrades] = useState<Grade[]>([]);\r\n-  const [topics, setTopics] = useState<Topic[]>([]);\r\n-  const [subtopics, setSubtopics] = useState<SubTopic[]>([]);\r\n-  const [contentHeading, setContentHeading] = useState<string>('');\r\n-    // Add with your other state declarations\r\n-  const [isContentExpanded, setIsContentExpanded] = useState<boolean>(false);\r\n-  const [modalState, setModalState] = useState({\r\n-    showAddGrade: false,\r\n-    showAddTopic: false,\r\n-    showAddSubtopic: false,\r\n-    showAddLesson: false\r\n-  });\r\n-  const [isViewMode, setIsViewMode] = useState<boolean>(true);\r\n-  const [expandedGrade, setExpandedGrade] = useState<string | null>(null);\r\n-  const [expandedTopic, setExpandedTopic] = useState<string | null>(null);\r\n-  const [expandedSubtopic, setExpandedSubtopic] = useState<string | null>(null);\r\n-  const [expandedQuestion, setExpandedQuestion] = useState<number | null>(null);\r\n-  const [expandedActivity, setExpandedActivity] = useState<number | null>(null);\r\n-  const [newItemData, setNewItemData] = useState({\r\n-    name: '',\r\n-    description: ''\r\n-  });\r\n-  const [lessonContent, setLessonContent] = useState<string>('');\r\n-  const [isContentEditorOpen, setIsContentEditorOpen] = useState(false);\r\n-  const [isEditingTitle, setIsEditingTitle] = useState<boolean>(false);\r\n-  const [isEditingHeading, setIsEditingHeading] = useState<boolean>(false);\r\n-  const [isEditingDescription, setIsEditingDescription] = useState<boolean>(false);\r\n-  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\r\n-  const [isSidebarLocked, setIsSidebarLocked] = useState(true);\r\n-  const [alertDialogState, setAlertDialogState] = useState<{\r\n-    isOpen: boolean;\r\n-    title: string;\r\n-    message: string;\r\n-    onConfirm: (value?: unknown) => void;\r\n-  }>({\r\n-    isOpen: false,\r\n-    title: '',\r\n-    message: '',\r\n-    onConfirm: () => {}\r\n-  });\r\n-\r\n-  const { \r\n-    selectedGrade,\r\n-    setSelectedGrade,\r\n-    selectedTopic,\r\n-    setSelectedTopic,\r\n-    selectedSubtopic,\r\n-    setSelectedSubtopic,\r\n-    selectedLesson,\r\n-    setSelectedLesson\r\n-  } = useContentStore();\r\n-\r\n-  // Add new state for tracking save status\r\n-  interface SaveStatus {\r\n-    id: string;\r\n-    status: 'draft' | 'saved' | 'saving' | 'error' | 'draft';\r\n-    lastSaved?: string;\r\n-  }\r\n-\r\n-  const [questionSaveStatuses, setQuestionSaveStatuses] = useState<Array<{\r\n-    id: string;\r\n-    status: 'idle' | 'saving' | 'saved' | 'error' | 'draft';\r\n-  }>>([]);\r\n-  const [promptSaveStatuses, setPromptSaveStatuses] = useState<SaveStatus[]>([]);\r\n-\r\n-  // Add this state to track dropdown state\r\n-  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n-\r\n-  // Add these states\r\n-  const [isLoadingSubtopics, setIsLoadingSubtopics] = useState(false);\r\n-  const [isLoadingLessons, setIsLoadingLessons] = useState(false);\r\n-\r\n-  // Event handlers\r\n-  const handleQuestionTypeChange = useCallback((type: string) => {\r\n-    if (isQuestionType(type)) {\r\n-      setSelectedQuestionType(type);\r\n-    }\r\n-  }, []);\r\n-\r\n-  const handleAddQuestion = useCallback(() => {\r\n-    if (!selectedQuestionType || !isQuestionType(selectedQuestionType)) return;\r\n-\r\n-    const defaultData = QUESTION_TYPES[selectedQuestionType].defaultData;\r\n-    const newQuestion: Question = {\r\n-      id: crypto.randomUUID(),\r\n-      type: selectedQuestionType,\r\n-      //data: {},\r\n-      title: 'New Question',\r\n-      content: '',\r\n-      lesson_id: currentLessonId || '',\r\n-      metadata: {},\r\n-      data: {\r\n-        ...defaultData,\r\n-        prompt: '',\r\n-        teacher_script: '',\r\n-        followup_prompt: [],\r\n-        sample_answer: ''\r\n-      },\r\n-      correct_answer: '',\r\n-      exercisePrompts: [],\r\n-      isDraft: true\r\n-    };\r\n-\r\n-    setQuestions(prev => [...prev, newQuestion]);\r\n-    setQuestionSaveStatuses(prev => [\r\n-      ...prev,\r\n-      { id: newQuestion.id, status: 'draft' }\r\n-    ]);\r\n-    setSelectedQuestionType('');\r\n-  }, [selectedQuestionType, currentLessonId]);\r\n-\r\n-  const handleRemoveQuestion = async (index: number) => {\r\n-    try {\r\n-      const questionToDelete = questions[index];\r\n-      \r\n-      // Delete related exercise prompts first\r\n-      const { error: promptError } = await supabase\r\n-        .from('exercise_prompts')\r\n-        .delete()\r\n-        .eq('question_id', questionToDelete.id);\r\n-\r\n-      if (promptError) throw promptError;\r\n-\r\n-      // Then delete the question\r\n-      const { error: questionError } = await supabase\r\n-        .from('questions')\r\n-        .delete()\r\n-        .eq('id', questionToDelete.id);\r\n-\r\n-      if (questionError) throw questionError;\r\n-\r\n-      // Update local state\r\n-      const newQuestions = questions.filter((_, i) => i !== index);\r\n-      setQuestions(newQuestions);\r\n-      \r\n-      toast.success('Question and related prompts deleted successfully');\r\n-    } catch (error) {\r\n-      console.error('Error deleting question:', error);\r\n-      toast.error('Failed to delete question and prompts');\r\n-    }\r\n-  };\r\n-\r\n-  const handleUpdateQuestion = useCallback(async (index: number, updatedQuestion: Question) => {\r\n-    const newQuestions = [...questions];\r\n-    newQuestions[index] = updatedQuestion;\r\n-    setQuestions(newQuestions);\r\n-    setQuestionSaveStatuses(prev => prev.map((status, i) => \r\n-      i === index ? { ...status, status: 'draft' } : status\r\n-    ));\r\n-  }, [questions]);\r\n-\r\n-  const handleAddExercisePrompt = useCallback((questionIndex: number) => {\r\n-    setQuestions(prev => prev.map((question, i) => {\r\n-      if (i === questionIndex) {\r\n-        return {\r\n-          ...question,\r\n-          exercisePrompts: [\r\n-            ...question.exercisePrompts,\r\n-            {\r\n-              id: crypto.randomUUID(),\r\n-              text: '',\r\n-              media: '',\r\n-              type: 'image',\r\n-              narration: 'Your turn',\r\n-              saytext: 'Say: ',\r\n-              metadata: {\r\n-                estimatedTime: 0\r\n-              },\r\n-              created_at: new Date().toISOString(),\r\n-              updated_at: new Date().toISOString()\r\n-            }\r\n-          ]\r\n-        };\r\n-      }\r\n-      return question;\r\n-    }));\r\n-  }, []);\r\n-\r\n-  const handleRemoveExercisePrompt = useCallback((questionIndex: number, promptIndex: number) => {\r\n-    setQuestions(prev => prev.map((question, i) => {\r\n-      if (i === questionIndex) {\r\n-        return {\r\n-          ...question,\r\n-          exercisePrompts: question.exercisePrompts.filter((_, j) => j !== promptIndex)\r\n-        };\r\n-      }\r\n-      return question;\r\n-    }));\r\n-  }, []);\r\n-\r\n-  const handleExercisePromptChange = useCallback(async (\r\n-    questionIndex: number,\r\n-    promptIndex: number,\r\n-    updatedPrompt: ExercisePrompt\r\n-  ) => {\r\n-    try {\r\n-      const promptUpdate = {\r\n-        id: updatedPrompt.id,\r\n-        question_id: updatedPrompt.question_id,\r\n-        text: updatedPrompt.text,\r\n-        type: updatedPrompt.type,\r\n-        narration: updatedPrompt.narration,\r\n-        saytext: updatedPrompt.saytext,\r\n-        media: updatedPrompt.media,\r\n-        // Remove order_index as it's not in schema\r\n-        created_at: new Date().toISOString()\r\n-      };\r\n-\r\n-      const { error: promptError } = await supabase\r\n-        .from('exercise_prompts')\r\n-        .upsert(promptUpdate)\r\n-        .select();\r\n-\r\n-      if (promptError) throw promptError;\r\n-\r\n-      // Update local state\r\n-      setQuestions(prev => prev.map((question, i) => {\r\n-        if (i === questionIndex) {\r\n-          const newPrompts = [...question.exercisePrompts];\r\n-          newPrompts[promptIndex] = updatedPrompt;\r\n-          return { ...question, exercisePrompts: newPrompts };\r\n-        }\r\n-        return question;\r\n-      }));\r\n-\r\n-    } catch (error) {\r\n-      console.error('Error saving prompt:', error);\r\n-      toast.error('Failed to save prompt');\r\n-    }\r\n-  }, []);\r\n-\r\n-  const handleAddActivity = useCallback(() => {\r\n-    const newActivity: Activity = {\r\n-      id: crypto.randomUUID(),\r\n-      lesson_id: currentLessonId || '',\r\n-      created_at: new Date().toISOString(),\r\n-      type: 'practice',\r\n-      title: '',\r\n-      name: '',\r\n-      instructions: '',\r\n-      media: [],\r\n-      data: {\r\n-        prompt: '',\r\n-        teacherScript: '',\r\n-        media: []\r\n-      }\r\n-    };\r\n-    setActivities(prev => [...prev, newActivity]);\r\n-  }, [currentLessonId]);\r\n-\r\n-  const handleUpdateActivity = useCallback((index: number, updatedActivity: Activity) => {\r\n-    setActivities(prev => prev.map((activity, i) => i === index ? updatedActivity : activity));\r\n-  }, []);\r\n-\r\n-  const handleRemoveActivity = useCallback((index: number) => {\r\n-    setActivities(prev => prev.filter((_, i) => i !== index));\r\n-  }, []);\r\n-\r\n-  const handleExercisePromptUpdate = useCallback((questionIndex: number, promptIndex: number, updatedPrompt: ExercisePrompt) => {\r\n-    const updatedQuestions = [...questions];\r\n-    updatedQuestions[questionIndex].exercisePrompts[promptIndex] = updatedPrompt;\r\n-    handleUpdateQuestion(questionIndex, updatedQuestions[questionIndex]);\r\n-  }, [questions, handleUpdateQuestion]);\r\n-\r\n-  const handleQuestionDataChange = useCallback((questionIndex: number, field: string, value: string) => {\r\n-    setQuestions(prev => prev.map((q, i) => \r\n-      i === questionIndex \r\n-        ? { \r\n-            ...q, \r\n-            data: { \r\n-              prompt: q.data?.prompt || '',\r\n-              teacherScript: q.data?.teacherScript || '',\r\n-              ...q.data,\r\n-              [field]: value \r\n-            } \r\n-          }\r\n-        : q\r\n-    ));\r\n-  }, []);\r\n-\r\n-  const [isSaving, setIsSaving] = useState(false);\r\n-\r\n-  const handleSaveLesson = async () => {\r\n-    try {\r\n-      if (!currentLessonId || !selectedSubtopicId) {\r\n-        toast.error('Please select a subtopic and lesson first');\r\n-        return;\r\n-      }\r\n-\r\n-      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\r\n-      if (sessionError) throw sessionError;\r\n-      \r\n-      if (!session?.user) {\r\n-        toast.error('Please sign in to save lessons');\r\n-        return;\r\n-      }\r\n-\r\n-      // Get user's role from session\r\n-      const userRole = session.user.user_metadata?.role;\r\n-      console.log('Current user role:', userRole);\r\n-      console.log('📝 Saving content heading:', {\r\n-        contentHeading,\r\n-        currentLessonId,\r\n-        selectedSubtopicId,\r\n-        timestamp: new Date().toISOString()\r\n-      });\r\n-\r\n-      // Create metadata object\r\n-      const lessonMetadata = {\r\n-        lastEdited: new Date().toISOString(),\r\n-        version: 1,\r\n-        status: 'draft' \r\n-      };\r\n-\r\n-      // Complete lesson data with all fields\r\n-      const lessonData = {\r\n-        id: currentLessonId,\r\n-        title: lessonTitle,\r\n-        content: lessonContent,\r\n-        metadata: lessonMetadata, // Supabase will automatically handle JSON conversion\r\n-        content_type: 'html',\r\n-        lesson_type: 'lesson',\r\n-        grade_id: selectedGradeId,\r\n-        topic_id: selectedTopicId,\r\n-        subtopic_id: selectedSubtopicId,\r\n-        user_id: session.user.id,\r\n-        updated_at: new Date().toISOString(),\r\n-        role: userRole, // Include role in the payload\r\n-        description: '',\r\n-        prerequisites: [],\r\n-        media_type: 'image',\r\n-        media_url: '',\r\n-        contentheading: contentHeading || ''\r\n-      };\r\n-\r\n-      console.log('📦 Data being sent to Supabase:', lessonData);\r\n-\r\n-      // Save lesson with all fields\r\n-      const { data, error: lessonError } = await supabase\r\n-        .from('lessons')\r\n-        .upsert(lessonData, { \r\n-          onConflict: 'id'\r\n-        })\r\n-        .select();\r\n-\r\n-      if (lessonError) throw lessonError;\r\n-\r\n-      // 2. Save lesson content\r\n-      const { data: existingContent } = await supabase\r\n-        .from('lesson_content')\r\n-        .select('id')\r\n-        .eq('lesson_id', currentLessonId)\r\n-        .single();\r\n-\r\n-      const contentMetadata = {\r\n-        lastEdited: new Date().toISOString(),\r\n-        version: 1,\r\n-        status: 'draft'\r\n-      };\r\n-\r\n-      const contentUpdate = {\r\n-        id: existingContent?.id || crypto.randomUUID(),\r\n-        lesson_id: currentLessonId,\r\n-        content: [lessonContent],\r\n-        metadata: contentMetadata, // Supabase will automatically handle JSON conversion\r\n-        content_type: 'html',\r\n-        user_id: session.user.id,\r\n-        updated_at: new Date().toISOString(),\r\n-        created_at: new Date().toISOString()\r\n-      };\r\n-\r\n-      const { error: contentError } = await supabase\r\n-        .from('lesson_content')\r\n-        .upsert(contentUpdate, { onConflict: 'id' });\r\n-\r\n-      if (contentError) throw contentError;\r\n-\r\n-      // 3. Save questions\r\n-      for (const question of questions) {\r\n-        const questionData = {\r\n-          id: question.id,\r\n-          lesson_id: currentLessonId,\r\n-          type: question.type,\r\n-          title: question.title,\r\n-          metadata: question.metadata,\r\n-          data: question.data,\r\n-          updated_at: new Date().toISOString(),\r\n-          user_id: session.user.id\r\n-        };\r\n-\r\n-        const { error: questionError } = await supabase\r\n-          .from('questions')\r\n-          .upsert(questionData, { onConflict: 'id' });\r\n-\r\n-        if (questionError) throw questionError;\r\n-\r\n-        //4. Save exercise prompts for this question\r\n-        if (question.exercisePrompts) {\r\n-          for (const prompt of question.exercisePrompts) {\r\n-            const promptData = {\r\n-              id: prompt.id,\r\n-              question_id: question.id,\r\n-              text: prompt.text,\r\n-              media: prompt.media,\r\n-              type: prompt.type,\r\n-              narration: prompt.narration,\r\n-              saytext: prompt.saytext,\r\n-              user_id: session.user.id,\r\n-              updated_at: new Date().toISOString()\r\n-            };\r\n-\r\n-            const { error: promptError } = await supabase\r\n-              .from('exercise_prompts')\r\n-              .upsert(promptData, { onConflict: 'id' });\r\n-\r\n-            if (promptError) throw promptError;\r\n-          }\r\n-        }\r\n-      }\r\n-\r\n-      // 5. Save activities\r\n-      if (activities.length > 0) {\r\n-        const activitiesData = activities.map(activity => ({\r\n-          id: activity.id,\r\n-          lesson_id: currentLessonId,\r\n-          type: activity.type,\r\n-          title: activity.title,\r\n-          name: activity.name,\r\n-          instructions: activity.instructions,\r\n-          media: activity.media,\r\n-          data: activity.data,\r\n-          created_at: new Date().toISOString()\r\n-        }));\r\n-\r\n-        const { error: activitiesError } = await supabase\r\n-          .from('activities')\r\n-          .upsert(activitiesData, { onConflict: 'id' });\r\n-\r\n-        if (activitiesError) throw activitiesError;\r\n-      }\r\n-\r\n-      // After successful save\r\n-      console.log('✅ Content heading saved successfully:', {\r\n-        contentHeading,\r\n-        lessonId: currentLessonId,\r\n-        timestamp: new Date().toISOString()\r\n-      });\r\n-\r\n-      toast.success('Lesson saved successfully');\r\n-    } catch (err) {\r\n-      const error = err as PostgrestError;\r\n-      console.error('❌ Error saving content heading:', {\r\n-        error: error.message,\r\n-        contentHeading,\r\n-        lessonContent,\r\n-        lessonId: currentLessonId,\r\n-        timestamp: new Date().toISOString()\r\n-      });\r\n-      toast.error(`Failed to save lesson: ${error.message}`);\r\n-\r\n-\r\n-    }\r\n-  };\r\n-\r\n-  const handleSaveQuestion = async (question: Question, index: number) => {\r\n-    const loadingToast = toast.loading(`Saving question ${index + 1}...`);\r\n-    \r\n-    try {\r\n-      const { data: { session } } = await supabase.auth.getSession();\r\n-      if (!session?.user) {\r\n-        toast.error('Please sign in to save question', { id: loadingToast });\r\n-        return;\r\n-      }\r\n-\r\n-      // Save question\r\n-      const questionData = {\r\n-        id: question.id,\r\n-        lesson_id: currentLessonId,\r\n-        type: question.type,\r\n-        title: question.title,\r\n-        metadata: question.metadata,\r\n-        data: {\r\n-          prompt: question.data?.prompt ?? '',\r\n-          teacherScript: question.data?.teacherScript ?? '',\r\n-          followup_prompt: question.data?.followup_prompt ?? [],\r\n-          sampleAnswer: question.data?.sampleAnswer || undefined,  // Convert null to undefined\r\n-          answer: question.data?.answer || undefined  // Convert null to undefined\r\n-        } as const,\r\n-        user_id: session.user.id,\r\n-        updated_at: new Date().toISOString()\r\n-      };\r\n-\r\n-      const { error: questionError } = await supabase\r\n-        .from('questions')\r\n-        .upsert(questionData, { onConflict: 'id' });\r\n-\r\n-      if (questionError) throw questionError;\r\n-\r\n-      // Save exercise prompts if they exist\r\n-      if (question.exercisePrompts?.length) {\r\n-        for (const prompt of question.exercisePrompts) {\r\n-          const promptData = {\r\n-            id: prompt.id,\r\n-            question_id: question.id,\r\n-            text: prompt.text,\r\n-            type: prompt.type,\r\n-            narration: prompt.narration,\r\n-            saytext: prompt.saytext,\r\n-            media: prompt.media,\r\n-            user_id: session.user.id,\r\n-            updated_at: new Date().toISOString()\r\n-          };\r\n-\r\n-          const { error: promptError } = await supabase\r\n-            .from('exercise_prompts')\r\n-            .upsert(promptData, { onConflict: 'id' });\r\n-\r\n-          if (promptError) throw promptError;\r\n-        }\r\n-      }\r\n-\r\n-      toast.success(`Question ${index + 1} saved successfully`, { id: loadingToast });\r\n-    } catch (error) {\r\n-      console.error('Error saving question:', error);\r\n-      toast.error(`Failed to save question ${index + 1}`, { id: loadingToast });\r\n-    }\r\n-  };\r\n-\r\n-  const handleSaveActivity = async (activity: Activity) => {\r\n-    try {\r\n-      await contentService.saveActivity(activity);\r\n-      toast.success('Activity saved');\r\n-    } catch (error) {\r\n-      console.error('Failed to save activity:', error);\r\n-      toast.error('Failed to save activity');\r\n-    }\r\n-  };\r\n-\r\n-  // Effects\r\n-  useEffect(() => {\r\n-    const fetchGrades = async () => {\r\n-      try {\r\n-        const { data, error } = await supabase\r\n-          .from('grades')\r\n-          .select('*')\r\n-          .order('name');\r\n-\r\n-        if (error) {\r\n-          console.error('Supabase error:', error);\r\n-          throw error;\r\n-        }\r\n-\r\n-        if (!data) {\r\n-          throw new Error('No data returned from Supabase');\r\n-        }\r\n-\r\n-        // Map the grades to match your interface\r\n-        const validGrades = data.map((grade: any) => ({\r\n-          _id: grade.id,\r\n-          id: grade.id,\r\n-          name: grade.name,\r\n-          level: grade.level || 0,  // Add default value if not provided\r\n-          orderIndex: grade.order_index || 0,  // Add default value if not provided\r\n-          topics: []\r\n-        }));\r\n-        \r\n-        setGrades(validGrades);\r\n-      } catch (error) {\r\n-        console.error('Error fetching grades:', error);\r\n-        toast.error('Failed to fetch grades');\r\n-      }\r\n-    };\r\n-\r\n-    fetchGrades();\r\n-  }, []);\r\n-\r\n-  // Topic Selection\r\n-  useEffect(() => {\r\n-    const fetchTopics = async () => {\r\n-      if (!selectedGradeId) return;\r\n-      \r\n-      try {\r\n-        const { data, error } = await supabase\r\n-          .from('topics')\r\n-          .select('*')\r\n-          .eq('grade_id', selectedGradeId)\r\n-          .order('title');\r\n-\r\n-        if (error) {\r\n-          throw error;\r\n-        }\r\n-\r\n-        // Map the topics to match your interface\r\n-        const validTopics = (data || []).map((topic: any) => ({\r\n-          _id: topic.id,\r\n-          id: topic.id,\r\n-          name: topic.title,\r\n-          title: topic.title,\r\n-          grade_id: topic.grade_id,\r\n-          subtopics: []\r\n-        }));\r\n-        \r\n-        setTopics(validTopics);\r\n-      } catch (error) {\r\n-        console.error('Error fetching topics:', error);\r\n-        toast.error('Failed to fetch topics');\r\n-      }\r\n-    };\r\n-\r\n-    fetchTopics();\r\n-  }, [selectedGradeId]);\r\n-\r\n-  // Subtopic Selection\r\n-  useEffect(() => {\r\n-    const fetchSubtopics = async () => {\r\n-      if (!selectedTopicId) return;\r\n-      \r\n-      try {\r\n-        // Use content service to fetch subtopics\r\n-        const subtopicsData = await contentService.fetchSubtopics(selectedTopicId);\r\n-        console.log('Fetched subtopics:', subtopicsData);\r\n-\r\n-        const validSubtopics = subtopicsData.map((subtopic: any) => ({\r\n-          id: subtopic.id,\r\n-          title: subtopic.title,\r\n-          description: subtopic.description,\r\n-          topic_id: subtopic.topic_id,\r\n-          lessons: [],\r\n-          order_index: subtopicsData.length\r\n-        }));\r\n-        \r\n-        setSubtopics(validSubtopics);\r\n-        \r\n-        // Update global state\r\n-        if (selectedSubtopic) {\r\n-          setSelectedSubtopic(selectedSubtopic);\r\n-        }\r\n-      } catch (err) {\r\n-        const error = err as Error;\r\n-        console.error('Error fetching subtopics:', error);\r\n-        toast.error('Failed to fetch subtopics');\r\n-      }\r\n-    };\r\n-\r\n-    fetchSubtopics();\r\n-  }, [selectedTopicId, selectedSubtopic, setSelectedSubtopic]);\r\n-\r\n-  // Add effect to monitor subtopics state\r\n-  useEffect(() => {\r\n-    console.log('Current subtopics state:', subtopics);\r\n-  }, [subtopics]);\r\n-\r\n-  // Add fetchLessons function\r\n-  const fetchLessons = useCallback(async () => {\r\n-    if (!selectedSubtopicId) return;\r\n-    try {\r\n-      const { data, error } = await supabase\r\n-        .from('lessons')\r\n-        .select('*')\r\n-        .eq('subtopic_id', selectedSubtopicId)\r\n-        .order('title');\r\n-\r\n-      if (error) {\r\n-        throw error;\r\n-      }\r\n-      \r\n-      // Map the lessons to ensure they have _id\r\n-      const validLessons = (data || []).map((lesson: any) => ({\r\n-        ...lesson,\r\n-        _id: lesson._id || lesson.id, // Use _id if available, otherwise use id\r\n-        title: lesson.title || 'Untitled Lesson'\r\n-      })).filter((lesson: any) => lesson._id); // Only include lessons with valid IDs\r\n-      \r\n-      setLessons(validLessons);\r\n-    } catch (error) {\r\n-      console.error('Error fetching lessons:', error);\r\n-      toast.error('Failed to fetch lessons');\r\n-    }\r\n-  }, [selectedSubtopicId]);\r\n-  // Add loadLessonContent function\r\n-  const isLoading = useRef(false);\r\n-  const loadLessonContent = useCallback(async (lessonId: string) => {\r\n-    // Prevent multiple simultaneous loads\r\n-    if (isLoading.current) return;\r\n-    isLoading.current = true;\r\n-\r\n-    const controller = new AbortController();\r\n-\r\n-    try {\r\n-      // Clear existing content first\r\n-      setLessonTitle('');\r\n-      setContentHeading('');\r\n-      setLessonContent('');\r\n-      setQuestions([]);\r\n-      \r\n-      // First fetch lesson data\r\n-      const { data: lessonData, error: lessonError } = await supabase\r\n-        .from('lessons')\r\n-        .select('*')\r\n-        .eq('id', lessonId)\r\n-        .single()\r\n-        \r\n-\r\n-      if (lessonError) {\r\n-        console.error('Lesson fetch error:', lessonError);\r\n-        throw lessonError;\r\n-      }\r\n-\r\n-      // Set lesson data\r\n-      setLessonTitle(lessonData.title || '');\r\n-      setContentHeading(lessonData.content || '');\r\n-\r\n-      // Then fetch lesson content with explicit headers\r\n-      const { data: contentData, error: contentError } = await supabase\r\n-        .from('lesson_content')\r\n-        .select('*')\r\n-        .eq('lesson_id', lessonId)\r\n-        .order('updated_at', { ascending: false })\r\n-        .limit(1)\r\n-        .maybeSingle();\r\n-\r\n-      if (contentError) {\r\n-        console.error('Content fetch error:', contentError);\r\n-        throw contentError;\r\n-      }\r\n-\r\n-      // Set content if available\r\n-      if (contentData?.content) {\r\n-        setLessonContent(typeof contentData.content === 'string' \r\n-          ? contentData.content \r\n-          : JSON.stringify(contentData.content)\r\n-        );\r\n-      }\r\n-\r\n-    } catch (error: unknown) {\r\n-      if (error instanceof Error && error.name === 'AbortError') {\r\n-        console.log('Request aborted');\r\n-        return;\r\n-      }\r\n-      console.error('Error loading lesson:', error);\r\n-      toast.error('Failed to load lesson content');\r\n-      \r\n-      // Reset states on error\r\n-      setLessonTitle('');\r\n-      setContentHeading('');\r\n-      setLessonContent('');\r\n-      setQuestions([]);\r\n-    } finally {\r\n-      isLoading.current = false;\r\n-    }\r\n-\r\n-    return () => {\r\n-      controller.abort();\r\n-    };\r\n-  }, []); // Empty dependencies since we're using closure over state setters\r\n-\r\n-  // // Add effect for fetching lessons when subtopic changes\r\n-  useEffect(() => {\r\n-    if (selectedSubtopicId) {\r\n-      fetchLessons();\r\n-    }\r\n-  }, [selectedSubtopicId, fetchLessons]);\r\n-\r\n-  // Add effect for loading lesson content when currentLessonId changes\r\n-    useEffect(() => {\r\n-    let isMounted = true;\r\n-    let timeoutId: NodeJS.Timeout;\r\n-\r\n-    const loadContent = async () => {\r\n-      if (!currentLessonId || !isMounted) return;\r\n-\r\n-      // Clear previous timeout if exists\r\n-      if (timeoutId) clearTimeout(timeoutId);\r\n-\r\n-      // Set new timeout for debouncing\r\n-      timeoutId = setTimeout(() => {\r\n-        if (isMounted) {\r\n-          loadLessonContent(currentLessonId);\r\n-        }\r\n-      }, 300);\r\n-    };\r\n-\r\n-    loadContent();\r\n-\r\n-    // Cleanup function\r\n-    return () => {\r\n-      isMounted = false;\r\n-      if (timeoutId) clearTimeout(timeoutId);\r\n-      if (isLoading.current) isLoading.current = false;\r\n-    };\r\n-  }, [currentLessonId]); // Remove loadLessonContent from dependencies\r\n-\r\n-  useEffect(() => {\r\n-    console.log('Current lessons state:', lessons);\r\n-  }, [lessons]);\r\n-\r\n-    // Add keyboard shortcut for saving\r\n-  useEffect(() => {\r\n-    const handleKeyDown = (e: KeyboardEvent) => {\r\n-      if ((e.ctrlKey || e.metaKey) && e.key === 's') {\r\n-        e.preventDefault();\r\n-        handleSaveLesson();\r\n-      }\r\n-    };\r\n-\r\n-    window.addEventListener('keydown', handleKeyDown);\r\n-    return () => window.removeEventListener('keydown', handleKeyDown);\r\n-  }, [handleSaveLesson]);\r\n-\r\n-  // Add SaveFeedback component\r\n-  const SaveFeedback = useCallback(() => {\r\n-    if (saveProgress === 'idle') return null;\r\n-\r\n-    return (\r\n-    <div className=\"fixed bottom-4 right-4\">\r\n-      {saveProgress === 'saving' && (\r\n-        <div className=\"flex items-center gap-2 bg-background border rounded-lg px-4 py-2 shadow-lg\">\r\n-          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n-          <span className=\"text-sm\">Saving changes...</span>\r\n-        </div>\r\n-      )}\r\n-      {saveProgress === 'saved' && (\r\n-        <div className=\"flex items-center gap-2 bg-green-500 text-white rounded-lg px-4 py-2 shadow-lg\">\r\n-          <Check className=\"h-4 w-4\" />\r\n-          <span className=\"text-sm\">Changes saved</span>\r\n-        </div>\r\n-      )}\r\n-      {saveProgress === 'error' && (\r\n-        <div className=\"flex items-center gap-2 bg-destructive text-destructive-foreground rounded-lg px-4 py-2 shadow-lg\">\r\n-          <X className=\"h-4 w-4\" />\r\n-          <span className=\"text-sm\">Error saving changes</span>\r\n-        </div>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-  }, [saveProgress]);\r\n-\r\n-  // Update handlers\r\n-  const handleGradeSelect = (gradeId: string) => {\r\n-    // Always keep sidebar open during selection\r\n-    setIsSidebarCollapsed(false);\r\n-    setIsSidebarLocked(true);\r\n-    \r\n-    // Batch state updates\r\n-    requestAnimationFrame(() => {\r\n-      setSelectedGradeId(gradeId);\r\n-      setSelectedGrade(gradeId);\r\n-      setSelectedTopicId(null);\r\n-      setSelectedTopic('');\r\n+      // Reset selections\r\n       setSelectedSubtopicId(null);\r\n-      setSelectedSubtopic('');\r\n       setCurrentLessonId(null);\r\n       \r\n-      if (isViewMode) {\r\n-        setExpandedGrade(gradeId);\r\n-      }\r\n-    });\r\n-  };\r\n-\r\n-  const handleTopicSelect = (value: string) => {\r\n-    setSelectedTopicId(value);\r\n-    setSelectedTopic(value);\r\n-    setSelectedSubtopicId(null);\r\n-    setSelectedSubtopic('');\r\n-    setCurrentLessonId(null);\r\n-  };\r\n-\r\n-  const handleSubtopicSelect = (value: string) => {\r\n-    setSelectedSubtopicId(value);\r\n-    setSelectedSubtopic(value);\r\n-    setCurrentLessonId(null);\r\n-  };\r\n-\r\n-  const handleLessonSelect = async (lessonId: string) => {\r\n-    try {\r\n-      // Lock sidebar during selection\r\n-      setIsSidebarLocked(true);\r\n-      setIsSidebarCollapsed(false);\r\n-      setCurrentLessonId(lessonId);\r\n-      \r\n-      // 1. Fetch lesson data\r\n-      const { data: lessonData, error: lessonError } = await supabase\r\n-        .from('lessons')\r\n-        .select('*')\r\n-        .eq('id', lessonId)\r\n-        .single();\r\n-\r\n-      if (lessonError) throw lessonError;\r\n-\r\n-      // 2. Fetch questions with exercise prompts\r\n-      const { data: questionsData, error: questionsError } = await supabase\r\n-        .from('questions')\r\n-        .select(`\r\n-          *,\r\n-          exercise_prompts (*)\r\n-        `)\r\n-        .eq('lesson_id', lessonId);\r\n-\r\n-      if (questionsError) throw questionsError;\r\n-\r\n-      // 3. Fetch activities - removed order_index\r\n-      const { data: activitiesData, error: activitiesError } = await supabase\r\n-        .from('activities')\r\n-        .select('*')\r\n-        .eq('lesson_id', lessonId);\r\n-\r\n-      if (activitiesError) throw activitiesError;\r\n-\r\n-      // Format questions with their exercise prompts\r\n-      const formattedQuestions = questionsData?.map(q => ({\r\n-        ...q,\r\n-        data: q.data || {},\r\n-        exercisePrompts: q.exercise_prompts || []\r\n-      })) || [];\r\n-\r\n-      // Set all states\r\n-      setLessonTitle(lessonData.title || '');\r\n-      setLessonContent(lessonData.content || '');\r\n-      setQuestions(formattedQuestions);\r\n-      setActivities(activitiesData || []);\r\n-\r\n-      // After successful load, unlock sidebar and allow collapse\r\n-      setTimeout(() => {\r\n-        setIsSidebarLocked(false);\r\n-        if (!isSidebarLocked) {\r\n-          setIsSidebarCollapsed(true);\r\n-        }\r\n-      }, 300);\r\n-\r\n+      // Refresh subtopics\r\n+      await fetchSubtopics();\r\n+      toast.success('Subtopic deleted successfully');\r\n     } catch (error) {\r\n-      console.error('Error loading lesson:', error);\r\n-      toast.error('Failed to load lesson');\r\n-      // Reset states on error\r\n-      setLessonTitle('');\r\n-      setLessonContent('');\r\n-      setQuestions([]);\r\n-      setActivities([]);\r\n-    }\r\n-    if (!isSidebarLocked) {\r\n-      setIsSidebarCollapsed(true);\r\n-    }\r\n-  };\r\n-\r\n-  // Update the expansion handlers\r\n-  const handleTopicExpand = async (topicId: string) => {\r\n-    setExpandedTopic(expandedTopic === topicId ? null : topicId);\r\n-    setSelectedTopicId(topicId);\r\n-    \r\n-    // Load subtopics when topic is expanded\r\n-    if (topicId) {\r\n-      setIsLoadingSubtopics(true);\r\n-      try {\r\n-        const { data: subtopicsData, error } = await supabase\r\n-          .from('subtopics')\r\n-          .select('*')\r\n-          .eq('topic_id', topicId)\r\n-          .order('order_index');\r\n-\r\n-        if (error) throw error;\r\n-        setSubtopics(subtopicsData || []);\r\n-      } catch (error) {\r\n-        console.error('Error loading subtopics:', error);\r\n-        toast.error('Failed to load subtopics');\r\n-      } finally {\r\n-        setIsLoadingSubtopics(false);\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const handleSubtopicExpand = async (subtopicId: string) => {\r\n-    setExpandedSubtopic(expandedSubtopic === subtopicId ? null : subtopicId);\r\n-    setSelectedSubtopicId(subtopicId);\r\n-    \r\n-    if (subtopicId) {\r\n-      setIsLoadingLessons(true);\r\n-      try {\r\n-        const { data: lessonsData, error } = await supabase\r\n-          .from('lessons')\r\n-          .select('*')\r\n-          .eq('subtopic_id', subtopicId)\r\n-          .order('order_index');\r\n-\r\n-        if (error) throw error;\r\n-        setLessons(lessonsData || []);\r\n-      } catch (error) {\r\n-        console.error('Error loading lessons:', error);\r\n-        toast.error('Failed to load lessons');\r\n-      } finally {\r\n-        setIsLoadingLessons(false);\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const handleQuestionExpand = (index: number) => {\r\n-    setExpandedQuestion(expandedQuestion === index ? null : index);\r\n-  };\r\n-\r\n-  const handleActivityExpand = (index: number) => {\r\n-    setExpandedActivity(expandedActivity === index ? null : index);\r\n-  };\r\n-\r\n-  // Add effect to save mode changes to localStorage\r\n-  useEffect(() => {\r\n-    localStorage.setItem('lessonManagementViewMode', isViewMode.toString());\r\n-  }, [isViewMode]);\r\n-\r\n-  // Add handlers for creating new items\r\n-  const handleCreateGrade = async () => {\r\n-    try {\r\n-      const response = await fetch(`${API_ENDPOINT}/grades`, {\r\n-        method: 'POST',\r\n-        headers: { 'Content-Type': 'application/json' },\r\n-        body: JSON.stringify({ name: newItemData.name })\r\n-      });\r\n-\r\n-      if (!response.ok) throw new Error('Failed to create grade');\r\n-      const data = await response.json();\r\n-      \r\n-      if (!data.success) throw new Error(data.message || 'Failed to create grade');\r\n-      \r\n-      // Update grades list\r\n-      setGrades([...grades, data.data.grade]);\r\n-      setModalState({ ...modalState, showAddGrade: false });\r\n-      setNewItemData({ name: '', description: '' });\r\n-      toast.success('Grade created successfully');\r\n-    } catch (error) {\r\n-      console.error('Error creating grade:', error);\r\n-      toast.error('Failed to create grade');\r\n-    }\r\n-  };\r\n-\r\n-  const handleCreateTopic = async () => {\r\n-    if (!selectedGradeId) {\r\n-      toast.error('Please select a grade first');\r\n-      return;\r\n-    }\r\n-\r\n-    try {\r\n-      const newTopic = await contentService.createTopic({\r\n-        title: newItemData.name, // Map from newItemData.name to title\r\n-        description: newItemData.description,\r\n-        gradeId: selectedGradeId\r\n-      });\r\n-\r\n-      setTopics(prev => [...prev, newTopic]);\r\n-      toast.success('Topic created successfully');\r\n-      setModalState({ ...modalState, showAddTopic: false });\r\n-      setNewItemData({ name: '', description: '' });\r\n-    } catch (err) {\r\n-      const error = err instanceof Error ? err.message : String(err);\r\n-      console.error('Error creating topic:', error);\r\n-      toast.error('Failed to create topic');\r\n-    }\r\n-  };\r\n-    \r\n-  \r\n-\r\n-\r\n-  const handleCreateSubtopic = async (data: { title: string; description?: string }) => {\r\n-    try {\r\n-      if (!selectedTopicId) {\r\n-        toast.error('Please select a topic first');\r\n-        return;\r\n-      }\r\n-\r\n-      const newSubtopic = await contentService.createSubtopic({\r\n-        ...data,\r\n-        topicId: selectedTopicId\r\n-      });\r\n-\r\n-      setSubtopics(prev => [...prev, {\r\n-        _id: newSubtopic.id,\r\n-        id: newSubtopic.id,\r\n-        name: newSubtopic.title,\r\n-        title: newSubtopic.title,\r\n-        description: newSubtopic.description,\r\n-        topic_id: newSubtopic.topic_id,\r\n-        orderIndex: prev.length,\r\n-        lessons: []\r\n-      }]);\r\n-\r\n-      toast.success('Subtopic created successfully');\r\n-      setModalState(prev => ({ ...prev, showAddSubtopic: false }));\r\n-    } catch (err) {\r\n-      const error = err as Error;\r\n-      console.error('Error creating subtopic:', error);\r\n-      toast.error('Failed to create subtopic');\r\n-    }\r\n-  };\r\n-\r\n-  const handleUpdateSubtopic = async (subtopicId: string, data: { title: string; description?: string }) => {\r\n-    try {\r\n-      const { data: updatedSubtopic, error } = await supabase\r\n-        .from('sub_topics')\r\n-        .update(data)\r\n-        .eq('id', subtopicId)\r\n-        .select()\r\n-        .single();\r\n-\r\n-      if (error) throw error;\r\n-      \r\n-      setSubtopics(prev => prev.map(subtopic => \r\n-        subtopic.id === subtopicId \r\n-          ? {\r\n-              ...subtopic,\r\n-              name: updatedSubtopic.title\r\n-            }\r\n-          : subtopic\r\n-      ));\r\n-\r\n-      toast.success('Subtopic updated successfully');\r\n-    } catch (err) {\r\n-      const error = err as Error;\r\n-      console.error('Error updating subtopic:', error);\r\n-      toast.error('Failed to update subtopic');\r\n-    }\r\n-  };\r\n-\r\n-  const handleDeleteSubtopic = async (subtopicId: string) => {\r\n-    try {\r\n-      await contentService.deleteSubtopic(subtopicId);\r\n-      setSubtopics(prev => prev.filter(subtopic => subtopic.id !== subtopicId));\r\n-      setSelectedSubtopicId(null);\r\n-      toast.success('Subtopic deleted successfully');\r\n-    } catch (err) {\r\n-      const error = err as Error;\r\n       console.error('Error deleting subtopic:', error);\r\n       toast.error('Failed to delete subtopic');\r\n-    }\r\n-  };\r\n-\r\n-  const handleCreateLesson = async () => {\r\n-    if (!selectedSubtopicId) {\r\n-      toast.error('Please select a subtopic first');\r\n-      return;\r\n-    }\r\n-\r\n-    try {\r\n-      // First create the lesson\r\n-      const { data: newLesson, error: lessonError } = await supabase\r\n-        .from('lessons')\r\n-        .insert({\r\n-          title: newItemData.name,\r\n-          duration: 0,\r\n-          topic_id: selectedTopicId,\r\n-          subtopic_id: selectedSubtopicId,\r\n-          content: '', // Empty rich text content initially\r\n-          status: 'draft'\r\n-        })\r\n-        .select()\r\n-        .single();\r\n-\r\n-      if (lessonError) throw lessonError;\r\n-\r\n-      // Create initial question\r\n-      const { data: newQuestion, error: questionError } = await supabase\r\n-        .from('questions')\r\n-        .insert({\r\n-          lesson_id: newLesson.id,\r\n-          type: 'speaking', // default type\r\n-          title: 'Question 1',\r\n-          data: {\r\n-            prompt: '',\r\n-            teacherScript: '',\r\n-            options: []\r\n-          },\r\n-          order_index: 0\r\n-        })\r\n-        .select()\r\n-        .single();\r\n-\r\n-      if (questionError) throw questionError;\r\n-\r\n-      // Create initial exercise prompts for the question\r\n-      const { error: promptsError } = await supabase\r\n-        .from('exercise_prompts')\r\n-        .insert([\r\n-          {\r\n-            question_id: newQuestion.id,\r\n-            text: '',\r\n-            type: 'image',\r\n-            narration: '',\r\n-            saytext: '',\r\n-            media: [],\r\n-            order_index: 0\r\n-          },\r\n-          {\r\n-            question_id: newQuestion.id,\r\n-            text: '',\r\n-            type: 'gif',\r\n-            narration: '',\r\n-            saytext: '',\r\n-            media: [],\r\n-            order_index: 1\r\n-          }\r\n-        ]);\r\n-\r\n-      if (promptsError) throw promptsError;\r\n-\r\n-      // Create initial activity\r\n-      // const { error: activityError } = await supabase\r\n-      //   .from('activities')\r\n-      //   .insert({\r\n-      //     lesson_id: newLesson.id,\r\n-      //     type: 'practice',\r\n-      //     title: '',\r\n-      //     instructions: '',\r\n-      //     media: [],\r\n-      //     data: {\r\n-      //       prompt: '',\r\n-      //       teacherScript: '',\r\n-      //       media: []\r\n-      //     },\r\n-      //     order_index: 0\r\n-      //   });\r\n-\r\n-      // if (activityError) throw activityError;\r\n-\r\n-      // Update UI state\r\n-      setLessons(prev => [...prev, newLesson]);\r\n-      setCurrentLessonId(newLesson.id);\r\n-      setLessonTitle(newLesson.title);\r\n-      setModalState({ ...modalState, showAddLesson: false });\r\n-      setNewItemData({ name: '', description: '' });\r\n-      toast.success('Lesson created successfully');\r\n-\r\n-    } catch (error) {\r\n-      console.error('Error creating lesson:', error);\r\n-      toast.error('Failed to create lesson');\r\n-    }\r\n-  };\r\n-\r\n-  // Effect to handle localStorage after mount\r\n-  useEffect(() => {\r\n-    const storedMode = localStorage.getItem('lessonManagementViewMode');\r\n-    if (storedMode !== null) {\r\n-      setIsViewMode(storedMode === 'true');\r\n-    }\r\n-  }, []);\r\n-\r\n-  // Update the cleanupModalState function\r\n-  const cleanupModalState = useCallback(() => {\r\n-    document.body.style.pointerEvents = '';\r\n-    document.body.style.overflow = '';\r\n-    setModalState({\r\n-      showAddGrade: false,\r\n-      showAddTopic: false,\r\n-      showAddSubtopic: false,\r\n-      showAddLesson: false\r\n-    });\r\n-    setNewItemData({ name: '', description: '' });\r\n-  }, []);\r\n-\r\n-  // Add a function to handle modal state changes\r\n-  const handleModalStateChange = useCallback((modalType: keyof typeof modalState, open: boolean) => {\r\n-    if (!open) {\r\n-      cleanupModalState();\r\n-    } else {\r\n-      setModalState(prev => ({ ...prev, [modalType]: open }));\r\n-    }\r\n-  }, [cleanupModalState]);\r\n-\r\n-  const handleContentSave = async (content: string) => {\r\n-    const loadingToast = toast.loading(\"Saving content...\", {\r\n-      action: {\r\n-        label: \"Close\",\r\n-        onClick: () => toast.dismiss()\r\n-      }\r\n-    });\r\n-    \r\n-    try {\r\n-      const { data: { session } } = await supabase.auth.getSession();\r\n-      if (!session?.user) {\r\n-        toast.error('Please sign in to save content', { id: loadingToast });\r\n-        return;\r\n-      }\r\n-\r\n-      // Get the most recent content entry\r\n-      const { data: existingContent, error: checkError } = await supabase\r\n-        .from('lesson_content')\r\n-        .select('id')\r\n-        .eq('lesson_id', currentLessonId)\r\n-        .order('updated_at', { ascending: false })\r\n-        .limit(1)\r\n-        .maybeSingle();\r\n-\r\n-      // If content exists, update it; if not, insert new\r\n-      const { error } = await supabase\r\n-        .from('lesson_content')\r\n-        .upsert({\r\n-          id: existingContent?.id, // This ensures we update if id exists\r\n-          lesson_id: currentLessonId,\r\n-          content: [content],\r\n-          content_type: 'text',\r\n-          metadata: {\r\n-            heading: contentHeading\r\n-          },\r\n-          user_id: session.user.id,\r\n-          updated_at: new Date().toISOString()\r\n-        }, {\r\n-          onConflict: 'id'  // This ensures we update based on lesson_id\r\n-        });\r\n-\r\n-      if (error) throw error;\r\n-\r\n-      // Save questions separately\r\n-      for (const question of questions) {\r\n-        const { exercisePrompts, ...questionData } = question; // Remove exercisePrompts from question data\r\n-        \r\n-        // Save question\r\n-        const { error: questionError } = await supabase\r\n-          .from('questions')\r\n-          .upsert(questionData, {\r\n-            onConflict: 'id'\r\n-          })\r\n-          .select();\r\n-\r\n-        if (questionError) throw questionError;\r\n-\r\n-        // Save exercise prompts\r\n-        if (exercisePrompts?.length > 0) {\r\n-          for (const prompt of exercisePrompts) {\r\n-            const { error: promptError } = await supabase\r\n-              .from('exercise_prompts')\r\n-              .upsert(prompt, {\r\n-                onConflict: 'id'\r\n-              })\r\n-              .select();\r\n-\r\n-            if (promptError) throw promptError;\r\n-          }\r\n-        }\r\n-      }\r\n-      \r\n-      toast.success(\"Content saved successfully\", {\r\n-        action: {\r\n-          label: \"Close\",\r\n-          onClick: () => toast.dismiss()\r\n-        },\r\n-        id: loadingToast,\r\n-      });\r\n-      setIsContentEditorOpen(false);\r\n-    } catch (error) {\r\n       console.error('Error saving content:', error);\r\n       toast.error(\"Failed to save content\", {\r\n         action: {\r\n           label: \"Close\",\r\n@@ -6155,10 +2636,10 @@\n                                             teacher_script: updatedQuestion.data?.teacher_script ?? '',\r\n                                             followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\r\n                                             sample_answer: updatedQuestion.data?.sample_answer ?? '',\r\n                                             metadata: updatedQuestion.metadata ?? {},\r\n+                                            },\r\n                                             correct_answer: updatedQuestion.correct_answer ?? '',\r\n-                                            },\r\n                                             content: updatedQuestion.content ?? ''  // Add default value\r\n                                         });\r\n                                       }}\r\n                                       onRemove={handleRemoveQuestion}\r\n"
                },
                {
                    "date": 1739961439950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1445,8 +1445,223 @@\n       toast.success('Subtopic deleted successfully');\r\n     } catch (error) {\r\n       console.error('Error deleting subtopic:', error);\r\n       toast.error('Failed to delete subtopic');\r\n+    }\r\n+  };\r\n+\r\n+  const handleCreateLesson = async () => {\r\n+    if (!selectedSubtopicId) {\r\n+      toast.error('Please select a subtopic first');\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      // First create the lesson\r\n+      const { data: newLesson, error: lessonError } = await supabase\r\n+        .from('lessons')\r\n+        .insert({\r\n+          title: newItemData.name,\r\n+          duration: 0,\r\n+          topic_id: selectedTopicId,\r\n+          subtopic_id: selectedSubtopicId,\r\n+          content: '', // Empty rich text content initially\r\n+          status: 'draft'\r\n+        })\r\n+        .select()\r\n+        .single();\r\n+\r\n+      if (lessonError) throw lessonError;\r\n+\r\n+      // Create initial question\r\n+      const { data: newQuestion, error: questionError } = await supabase\r\n+        .from('questions')\r\n+        .insert({\r\n+          lesson_id: newLesson.id,\r\n+          type: 'speaking', // default type\r\n+          title: 'Question 1',\r\n+          data: {\r\n+            prompt: '',\r\n+            teacherScript: '',\r\n+            options: []\r\n+          },\r\n+          order_index: 0\r\n+        })\r\n+        .select()\r\n+        .single();\r\n+\r\n+      if (questionError) throw questionError;\r\n+\r\n+      // Create initial exercise prompts for the question\r\n+      const { error: promptsError } = await supabase\r\n+        .from('exercise_prompts')\r\n+        .insert([\r\n+          {\r\n+            question_id: newQuestion.id,\r\n+            text: '',\r\n+            type: 'image',\r\n+            narration: '',\r\n+            saytext: '',\r\n+            media: [],\r\n+            order_index: 0\r\n+          },\r\n+          {\r\n+            question_id: newQuestion.id,\r\n+            text: '',\r\n+            type: 'gif',\r\n+            narration: '',\r\n+            saytext: '',\r\n+            media: [],\r\n+            order_index: 1\r\n+          }\r\n+        ]);\r\n+\r\n+      if (promptsError) throw promptsError;\r\n+\r\n+      // Create initial activity\r\n+      // const { error: activityError } = await supabase\r\n+      //   .from('activities')\r\n+      //   .insert({\r\n+      //     lesson_id: newLesson.id,\r\n+      //     type: 'practice',\r\n+      //     title: '',\r\n+      //     instructions: '',\r\n+      //     media: [],\r\n+      //     data: {\r\n+      //       prompt: '',\r\n+      //       teacherScript: '',\r\n+      //       media: []\r\n+      //     },\r\n+      //     order_index: 0\r\n+      //   });\r\n+\r\n+      // if (activityError) throw activityError;\r\n+\r\n+      // Update UI state\r\n+      setLessons(prev => [...prev, newLesson]);\r\n+      setCurrentLessonId(newLesson.id);\r\n+      setLessonTitle(newLesson.title);\r\n+      setModalState({ ...modalState, showAddLesson: false });\r\n+      setNewItemData({ name: '', description: '' });\r\n+      toast.success('Lesson created successfully');\r\n+\r\n+    } catch (error) {\r\n+      console.error('Error creating lesson:', error);\r\n+      toast.error('Failed to create lesson');\r\n+    }\r\n+  };\r\n+\r\n+  // Effect to handle localStorage after mount\r\n+  useEffect(() => {\r\n+    const storedMode = localStorage.getItem('lessonManagementViewMode');\r\n+    if (storedMode !== null) {\r\n+      setIsViewMode(storedMode === 'true');\r\n+    }\r\n+  }, []);\r\n+\r\n+  // Update the cleanupModalState function\r\n+  const cleanupModalState = useCallback(() => {\r\n+    document.body.style.pointerEvents = '';\r\n+    document.body.style.overflow = '';\r\n+    setModalState({\r\n+      showAddGrade: false,\r\n+      showAddTopic: false,\r\n+      showAddSubtopic: false,\r\n+      showAddLesson: false\r\n+    });\r\n+    setNewItemData({ name: '', description: '' });\r\n+  }, []);\r\n+\r\n+  // Add a function to handle modal state changes\r\n+  const handleModalStateChange = useCallback((modalType: keyof typeof modalState, open: boolean) => {\r\n+    if (!open) {\r\n+      cleanupModalState();\r\n+    } else {\r\n+      setModalState(prev => ({ ...prev, [modalType]: open }));\r\n+    }\r\n+  }, [cleanupModalState]);\r\n+\r\n+  const handleContentSave = async (content: string) => {\r\n+    const loadingToast = toast.loading(\"Saving content...\", {\r\n+      action: {\r\n+        label: \"Close\",\r\n+        onClick: () => toast.dismiss()\r\n+      }\r\n+    });\r\n+    \r\n+    try {\r\n+      const { data: { session } } = await supabase.auth.getSession();\r\n+      if (!session?.user) {\r\n+        toast.error('Please sign in to save content', { id: loadingToast });\r\n+        return;\r\n+      }\r\n+\r\n+      // Get the most recent content entry\r\n+      const { data: existingContent, error: checkError } = await supabase\r\n+        .from('lesson_content')\r\n+        .select('id')\r\n+        .eq('lesson_id', currentLessonId)\r\n+        .order('updated_at', { ascending: false })\r\n+        .limit(1)\r\n+        .maybeSingle();\r\n+\r\n+      // If content exists, update it; if not, insert new\r\n+      const { error } = await supabase\r\n+        .from('lesson_content')\r\n+        .upsert({\r\n+          id: existingContent?.id, // This ensures we update if id exists\r\n+          lesson_id: currentLessonId,\r\n+          content: [content],\r\n+          content_type: 'text',\r\n+          metadata: {\r\n+            heading: contentHeading\r\n+          },\r\n+          user_id: session.user.id,\r\n+          updated_at: new Date().toISOString()\r\n+        }, {\r\n+          onConflict: 'id'  // This ensures we update based on lesson_id\r\n+        });\r\n+\r\n+      if (error) throw error;\r\n+\r\n+      // Save questions separately\r\n+      for (const question of questions) {\r\n+        const { exercisePrompts, ...questionData } = question; // Remove exercisePrompts from question data\r\n+        \r\n+        // Save question\r\n+        const { error: questionError } = await supabase\r\n+          .from('questions')\r\n+          .upsert(questionData, {\r\n+            onConflict: 'id'\r\n+          })\r\n+          .select();\r\n+\r\n+        if (questionError) throw questionError;\r\n+\r\n+        // Save exercise prompts\r\n+        if (exercisePrompts?.length > 0) {\r\n+          for (const prompt of exercisePrompts) {\r\n+            const { error: promptError } = await supabase\r\n+              .from('exercise_prompts')\r\n+              .upsert(prompt, {\r\n+                onConflict: 'id'\r\n+              })\r\n+              .select();\r\n+\r\n+            if (promptError) throw promptError;\r\n+          }\r\n+        }\r\n+      }\r\n+      \r\n+      toast.success(\"Content saved successfully\", {\r\n+        action: {\r\n+          label: \"Close\",\r\n+          onClick: () => toast.dismiss()\r\n+        },\r\n+        id: loadingToast,\r\n+      });\r\n+      setIsContentEditorOpen(false);\r\n+    } catch (error) {\r\n       console.error('Error saving content:', error);\r\n       toast.error(\"Failed to save content\", {\r\n         action: {\r\n           label: \"Close\",\r\n@@ -2113,18 +2328,46 @@\n                             <SelectValue placeholder=\"Select Topic\" />\r\n                           </SelectTrigger>\r\n                           <SelectContent>\r\n                                 {topics.map((topic: Topic) => (\r\n-                                  <SelectItem \r\n-                                    key={`topic-${topic.id || 'new'}`} \r\n-                                    value={topic.id || ''}\r\n-                                  >\r\n-                                  <div className=\"flex items-center gap-2\">\r\n-                                  <Layers className=\"h-4 w-4 text-primary\" />\r\n-                                    {topic.title}\r\n+                                  <div key={`topic-${topic.id || 'new'}`} className=\"flex items-center justify-between\">\r\n+                                    <SelectItem value={topic.id || ''}>\r\n+                                      <div className=\"flex items-center gap-2\">\r\n+                                        <Layers className=\"h-4 w-4 text-primary\" />\r\n+                                        {topic.title}\r\n+                                      </div>\r\n+                                    </SelectItem>\r\n+                                    <AlertDialog>\r\n+                                      <AlertDialogTrigger asChild>\r\n+                                        <Button\r\n+                                          variant=\"ghost\"\r\n+                                          size=\"sm\"\r\n+                                          className=\"hover:bg-destructive/10 hover:text-destructive\"\r\n+                                          onClick={(e) => e.stopPropagation()}\r\n+                                        >\r\n+                                          <Trash2 className=\"h-4 w-4\" />\r\n+                                        </Button>\r\n+                                      </AlertDialogTrigger>\r\n+                                      <AlertDialogContent>\r\n+                                        <AlertDialogHeader>\r\n+                                          <AlertDialogTitle>Delete Topic</AlertDialogTitle>\r\n+                                          <AlertDialogDescription>\r\n+                                            Are you sure you want to delete \"{topic.title}\"? This will also delete all associated subtopics and lessons.\r\n+                                          </AlertDialogDescription>\r\n+                                        </AlertDialogHeader>\r\n+                                        <AlertDialogFooter>\r\n+                                          <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n+                                          <AlertDialogAction\r\n+                                            className=\"bg-destructive hover:bg-destructive/90\"\r\n+                                            onClick={() => handleDeleteTopic(topic.id || '')}\r\n+                                          >\r\n+                                            Delete\r\n+                                          </AlertDialogAction>\r\n+                                        </AlertDialogFooter>\r\n+                                      </AlertDialogContent>\r\n+                                    </AlertDialog>\r\n                                   </div>\r\n-                                </SelectItem>\r\n-                              ))}\r\n+                                ))}\r\n                           </SelectContent>\r\n                         </Select>\r\n                         <Button \r\n                           variant=\"outline\" \r\n@@ -2151,460 +2394,40 @@\n                           <SelectTrigger id=\"subtopic-select\" className=\"w-full\">\r\n                             <SelectValue placeholder=\"Select Subtopic\" />\r\n                           </SelectTrigger>\r\n                           <SelectContent>\r\n-                                {subtopics\r\n-                                  .filter(subtopic => subtopic.id)\r\n-                                  .map((subtopic, index) => (\r\n-                                    <SelectItem \r\n-                                      key={subtopic.id || `subtopic-${index}`}\r\n-                                      value={subtopic.id || ''}\r\n-                                    >\r\n-                                      {subtopic.title || 'Untitled Subtopic'}\r\n+                                {subtopics.map((subtopic) => (\r\n+                                  <div key={subtopic.id} className=\"flex items-center justify-between\">\r\n+                                    <SelectItem value={subtopic.id || ''}>\r\n+                                      {subtopic.title}\r\n                                     </SelectItem>\r\n-                                  ))}\r\n-                          </SelectContent>\r\n-                        </Select>\r\n-                        {!isViewMode && (\r\n-                          <Button \r\n-                            variant=\"outline\" \r\n-                            size=\"sm\" \r\n-                            className=\"w-full gap-2\"\r\n-                            onClick={() => setModalState({ ...modalState, showAddSubtopic: true })}\r\n-                          >\r\n-                            <Plus className=\"h-4 w-4\" />\r\n-                            Add New Subtopic\r\n-                          </Button>\r\n-                        )}\r\n-                      </div>\r\n-                    )}\r\n-\r\n-                    {/* Lesson Selection */}\r\n-                        {selectedSubtopicId && (\r\n-                      <div className=\"space-y-2\">\r\n-                        <div className=\"flex items-center justify-between\">\r\n-                          <Label htmlFor=\"lesson-select\">Lesson</Label>\r\n-                        </div>\r\n-                          <Select \r\n-                            value={currentLessonId || ''} \r\n-                            onValueChange={handleLessonSelect}\r\n-                            onOpenChange={(open) => {\r\n-                              setIsDropdownOpen(open);\r\n-                              if (open) {\r\n-                                setIsSidebarCollapsed(false);\r\n-                                setIsSidebarLocked(true);\r\n-                              } else {\r\n-                                // Small delay before unlocking to prevent immediate collapse\r\n-                                setTimeout(() => {\r\n-                                  setIsSidebarLocked(false);\r\n-                                }, 100);\r\n-                              }\r\n-                            }}\r\n-                          >\r\n-                            <SelectTrigger \r\n-                              id=\"lesson-select\" \r\n-                              className=\"w-full\"\r\n-                              onClick={(e) => {\r\n-                                e.stopPropagation();\r\n-                                setIsSidebarCollapsed(false);\r\n-                                setIsSidebarLocked(true);\r\n-                              }}\r\n-                            >\r\n-                              <SelectValue placeholder=\"Select Lesson\" />\r\n-                            </SelectTrigger>\r\n-                            <SelectContent>\r\n-                              {lessons\r\n-                                .filter((lesson): lesson is Lesson => lesson !== undefined && lesson !== null)\r\n-                                .map((lesson: Lesson) => (\r\n-                                  <SelectItem \r\n-                                    key={`lesson-${lesson.id || 'new'}`} \r\n-                                    value={lesson.id || ''}\r\n-                                  >\r\n-                                    <div className=\"flex items-center gap-2\">\r\n-                                      <BookOpen className=\"h-4 w-4 text-primary\" />\r\n-                                      {lesson.title || 'Untitled Lesson'}\r\n-                                    </div>\r\n-                                  </SelectItem>\r\n-                                ))}\r\n-                            </SelectContent>\r\n-                          </Select>\r\n-                    <Button \r\n-                            variant=\"outline\" \r\n-                            size=\"sm\" \r\n-                            className=\"w-full gap-2\"\r\n-                        onClick={() => setModalState({ ...modalState, showAddLesson: true })}\r\n-                          >\r\n-                            <Plus className=\"h-4 w-4\" />\r\n-                            Add New Lesson\r\n-                    </Button>\r\n-                      </div>\r\n-                        )}\r\n-                      </>\r\n-                    )}\r\n-                  </CardContent>\r\n-                </Card>\r\n-              </div>\r\n-\r\n-              {/* Collapsed view */}\r\n-              {isSidebarCollapsed && (\r\n-                <div className=\"absolute inset-0 flex flex-col items-center pt-12 gap-4\">\r\n-                  <BookOpen className=\"h-6 w-6 text-muted-foreground\" />\r\n-                  <div className=\"w-px h-full bg-border\" />\r\n-                </div>\r\n-              )}\r\n-            </Card>\r\n-          </div>\r\n-        \r\n-\r\n-          {/* Right Content Area */}\r\n-          <div className=\"flex-1 overflow-y-auto\">\r\n-            {isNavigating ? (\r\n-              <div className=\"flex items-center justify-center h-[400px]\">\r\n-                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n-                <span className=\"ml-3\">Loading...</span>\r\n-              </div>\r\n-            ) : (\r\n-              <>\r\n-                {!selectedGradeId ? (\r\n-                  // Question Types Display Section\r\n-                  <div className=\"space-y-6\">\r\n-                    <Card>\r\n-                      <CardHeader>\r\n-                        <div className=\"flex items-center justify-between\">\r\n-                          <div>\r\n-                            <CardTitle className=\"text-xl font-semibold\">Available Question Types</CardTitle>\r\n-                            <CardDescription>Browse through different question formats and examples</CardDescription>\r\n-                          </div>\r\n-                          <TooltipProvider>\r\n-                            <Tooltip>\r\n-                              <TooltipTrigger>\r\n-                                <HelpCircle className=\"h-5 w-5 text-muted-foreground\" />\r\n-                              </TooltipTrigger>\r\n-                              <TooltipContent>\r\n-                                <p>Click on each type to see detailed examples</p>\r\n-                              </TooltipContent>\r\n-                            </Tooltip>\r\n-                          </TooltipProvider>\r\n-                        </div>\r\n-                      </CardHeader>\r\n-                      <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n-                        {Object.entries(QUESTION_TYPES).map(([type, details]) => (\r\n-                          <Card key={type} className=\"cursor-pointer hover:bg-accent/50 transition-colors\">\r\n-                            <CardHeader className=\"p-4\">\r\n-                              <div className=\"flex items-center justify-between mb-2\">\r\n-                                <Badge variant=\"outline\" className=\"bg-primary/5 text-lg\">\r\n-                                  {details.label}\r\n-                                </Badge>\r\n-                              </div>\r\n-                              <CardDescription className=\"text-sm\">\r\n-                                {details.description || 'No description available'}\r\n-                              </CardDescription>\r\n-                              <div className=\"mt-4\">\r\n-                                <div className=\"text-sm font-medium mb-2\">Example:</div>\r\n-                                <div className=\"p-3 rounded-md bg-muted/50 text-sm\">\r\n-                                  {type === 'multiple-choice' && (\r\n-                                    <>\r\n-                                      <div className=\"font-medium mb-2\">Q: What is the capital of France?</div>\r\n-                                      <div className=\"space-y-1 pl-4\">\r\n-                                        <div>A) Paris</div>\r\n-                                        <div>B) London</div>\r\n-                                        <div>C) Berlin</div>\r\n-                                        <div>D) Madrid</div>\r\n-                                      </div>\r\n-                                    </>\r\n-                                  )}\r\n-                                  {type === 'fill-in-blank' && (\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <div>Complete the sentence:</div>\r\n-                                      <div>The sun rises in the <span className=\"bg-primary/20 px-2 rounded\">_____</span> and sets in the <span className=\"bg-primary/20 px-2 rounded\">_____</span>.</div>\r\n-                                    </div>\r\n-                                  )}\r\n-                                  {type === 'true-false' && (\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <div className=\"font-medium\">Statement:</div>\r\n-                                      <div>The Earth is flat.</div>\r\n-                                      <div className=\"mt-2\">\r\n-                                        <Badge variant=\"outline\" className=\"mr-2\">True</Badge>\r\n-                                        <Badge variant=\"outline\">False</Badge>\r\n-                                      </div>\r\n-                                    </div>\r\n-                                  )}\r\n-                                  {type === 'matching' && (\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <div className=\"font-medium mb-2\">Match the countries with their capitals:</div>\r\n-                                      <div className=\"grid grid-cols-2 gap-4\">\r\n-                                        <div>\r\n-                                          1. France<br />\r\n-                                          2. Germany<br />\r\n-                                          3. Spain\r\n-                                        </div>\r\n-                                        <div>\r\n-                                          • Berlin<br />\r\n-                                          • Paris<br />\r\n-                                          • Madrid\r\n-                                        </div>\r\n-                                      </div>\r\n-                                    </div>\r\n-                                  )}\r\n-                                  {type === 'ordering' && (\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <div className=\"font-medium mb-2\">Arrange in chronological order:</div>\r\n-                                      <div className=\"space-y-1\">\r\n-                                        <Badge variant=\"outline\" className=\"mr-2\">1</Badge>World War II<br />\r\n-                                        <Badge variant=\"outline\" className=\"mr-2\">2</Badge>Industrial Revolution<br />\r\n-                                        <Badge variant=\"outline\" className=\"mr-2\">3</Badge>Renaissance\r\n-                                      </div>\r\n-                                    </div>\r\n-                                  )}\r\n-                                  {type === 'short-answer' && (\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <div className=\"font-medium\">Question:</div>\r\n-                                      <div>Explain the water cycle in 2-3 sentences.</div>\r\n-                                      <div className=\"mt-2 p-2 border border-dashed rounded-md border-primary/30\">\r\n-                                        Answer space\r\n-                                      </div>\r\n-                                    </div>\r\n-                                  )}\r\n-                                </div>\r\n-                              </div>\r\n-                            </CardHeader>\r\n-                          </Card>\r\n-                        ))}\r\n-                      </CardContent>\r\n-                    </Card>\r\n-                  </div>\r\n-                ) : isViewMode ? (\r\n-                  <div className=\"space-y-6\">\r\n-                    {selectedGradeId ? (\r\n-                      <div className=\"grid grid-cols-1 gap-6\">\r\n-                        {topics.map((topic) => (\r\n-                          <Card key={topic.id} className=\"border-l-4 border-l-primary\">\r\n-                            <CardHeader>\r\n-                              <div className=\"flex items-center justify-between\">\r\n-                                <h3 className=\"text-lg font-semibold\">{topic.title}</h3>\r\n-                              </div>\r\n-                            </CardHeader>\r\n-                            <CardContent>\r\n-                              <div className=\"space-y-4\">\r\n-                                {subtopics\r\n-                                  .filter(subtopic => subtopic.topic_id === topic.id)\r\n-                                  .map((subtopic, index) => (\r\n-                                    <div key={subtopic.id || `subtopic-${index}`} className=\"border-l-2 pl-4\">\r\n-                                      <h4 className=\"text-md font-medium mb-2\">{subtopic.name || 'Untitled Subtopic'}</h4>\r\n-                                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n-                                        {lessons\r\n-                                          .filter(lesson => lesson.subtopic_id === subtopic.id)\r\n-                                          .map((lesson) => (\r\n-                                            <Card \r\n-                                              key={lesson.id} \r\n-                                              className={cn(\r\n-                                                \"cursor-pointer transition-all duration-200\",\r\n-                                                \"hover:shadow-md hover:translate-y-[-2px]\",\r\n-                                                \"hover:bg-accent/50 hover:border-primary/50\",\r\n-                                                \"active:translate-y-[0px]\",\r\n-                                                currentLessonId === lesson.id && \"border-primary bg-accent/50 shadow-md\",\r\n-                                                \"group\" // Enable group hover effects\r\n-                                              )}\r\n-                                              onClick={() => handleLessonSelect(lesson.id || '')}\r\n-                                            >\r\n-                                              <CardHeader className=\"p-4\">\r\n-                                                <div className=\"flex flex-col gap-2\">\r\n-                                                  <div className=\"flex items-center justify-between\">\r\n-                                                    <div className=\"flex items-center gap-2\">\r\n-                                                      <BookOpen className={cn(\r\n-                                                        \"h-4 w-4 text-primary\",\r\n-                                                        \"transition-transform duration-200\",\r\n-                                                        \"group-hover:scale-110\"\r\n-                                                      )} />\r\n-                                                      <span className=\"font-medium\">{lesson.title}</span>\r\n-                                                    </div>\r\n-                                                    <Button\r\n-                                                      variant=\"outline\"\r\n-                                                      size=\"sm\"\r\n-                                                      className={cn(\r\n-                                                        \"opacity-0 group-hover:opacity-100\",\r\n-                                                        \"transition-all duration-200\",\r\n-                                                        \"hover:bg-primary hover:text-primary-foreground\"\r\n-                                                      )}\r\n-                                                      disabled={!lesson.content || currentLessonId !== lesson.id}\r\n-                                                      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\r\n-                                                        e.stopPropagation();\r\n-                                                        window.location.href = `/teacher/lessons/${lesson.id}`;\r\n-                                                      }}\r\n-                                                    >\r\n-                                                      Start Lesson\r\n-                                                    </Button>\r\n-                                                  </div>\r\n-                                                  <div className=\"flex items-center gap-2\">\r\n-                                                    <Badge variant=\"outline\" className={cn(\r\n-                                                      \"bg-primary/5\",\r\n-                                                      \"transition-colors duration-200\",\r\n-                                                      \"group-hover:bg-primary/10\"\r\n-                                                    )}>\r\n-                                                      {lesson.questions?.length || 0} Questions\r\n-                                                    </Badge>\r\n-                                                    <Badge variant=\"outline\" className={cn(\r\n-                                                      \"bg-primary/5\",\r\n-                                                      \"transition-colors duration-200\",\r\n-                                                      \"group-hover:bg-primary/10\"\r\n-                                                    )}>\r\n-                                                      {lesson.activities?.length || 0} Activities\r\n-                                                    </Badge>\r\n-                                                  </div>\r\n-                                                </div>\r\n-                                              </CardHeader>\r\n-                                            </Card>\r\n-                                          ))}\r\n-                                      </div>\r\n-                                    </div>\r\n-                                  ))}\r\n-                              </div>\r\n-                            </CardContent>\r\n-                          </Card>\r\n-                        ))}\r\n-                      </div>\r\n-                    ) : (\r\n-                      <div className=\"text-center py-20\">\r\n-                        <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\r\n-                        <h3 className=\"text-lg font-medium\">Select a Grade</h3>\r\n-                        <p className=\"text-sm text-muted-foreground\">\r\n-                          Choose a grade from the left panel to start managing content\r\n-                        </p>\r\n-                      </div>\r\n-                    )}\r\n-                  </div>\r\n-                ) : (\r\n-                  // Edit Mode Content\r\n-                  <div className=\"space-y-4\">\r\n-                    {/* Lesson Title */}\r\n-                    <Card>\r\n-                      <CardHeader>\r\n-                        <div className=\"flex items-center justify-between mb-4\">\r\n-                          <h2 className=\"text-2xl font-bold\">Lesson Content</h2>\r\n-                                                    <Button\r\n-                                                      variant=\"outline\"\r\n-                                                      size=\"sm\"\r\n-                            onClick={() => setIsContentEditorOpen(true)}\r\n-                          >\r\n-                            <Pencil className=\"h-4 w-4 mr-2\" />\r\n-                            Edit Content\r\n-                          </Button>\r\n-                        </div>\r\n-                      </CardHeader>\r\n-                      <CardContent className=\"space-y-4\">\r\n-                        {/* Lesson Title */}\r\n-                        <div className=\"flex items-center justify-between\">\r\n-                          <div className=\"space-y-1\">\r\n-                            <Label>Lesson Title</Label>\r\n-                            <InlineEdit\r\n-                              value={lessonTitle}\r\n-                              onSave={async (newTitle) => {\r\n-                                setLessonTitle(newTitle);\r\n-                                await handleSaveLesson();\r\n-                              }}\r\n-                              isEditing={isEditingTitle}\r\n-                              setIsEditing={setIsEditingTitle}\r\n-                              placeholder=\"Enter lesson title\"\r\n-                              className=\"text-lg font-medium\"\r\n-                            />\r\n-                          </div>\r\n-                        </div>\r\n-\r\n-                        {/* Content Editor and Display */}\r\n-                        <div className=\"space-y-4\">\r\n-                          {isContentEditorOpen ? (\r\n-                            <div className=\"border rounded-lg p-4\">\r\n-                              <div className=\"mb-4\">\r\n-                                <Label>Content Heading</Label>\r\n-                                <InlineEdit\r\n-                                  value={contentHeading}\r\n-                                  onSave={(newHeading) => setContentHeading(newHeading)}\r\n-                                  isEditing={isEditingHeading}\r\n-                                  setIsEditing={setIsEditingHeading}\r\n-                                  placeholder=\"Add content heading\"\r\n-                                  className=\"text-base text-muted-foreground\"\r\n-                                />\r\n-                              </div>\r\n-                              <RichTextEditor\r\n-                                value={lessonContent}\r\n-                                onChange={setLessonContent}\r\n-                                onSave={async (content) => {\r\n-                                  await handleContentSave(content);\r\n-                                  setIsContentEditorOpen(false);\r\n-                                }}\r\n-                                placeholder=\"Add lesson content here...\"\r\n-                              />\r\n-                            </div>\r\n-                          ) : lessonContent ? (\r\n-                            <div className=\"prose prose-sm max-w-none\">\r\n-                              {contentHeading && (\r\n-                                <h3 className=\"text-lg font-semibold mb-2\">{contentHeading}</h3>\r\n-                              )}\r\n-                              <div dangerouslySetInnerHTML={{ __html: lessonContent }} />\r\n-                            </div>\r\n-                          ) : (\r\n-                            <div className=\"text-center py-8 text-muted-foreground\">\r\n-                              Click 'Edit Content' to add lesson content\r\n-                            </div>\r\n-                          )}\r\n-                        </div>\r\n-                      </CardContent>\r\n-                    </Card>\r\n-\r\n-                    {/* Tabs */}\r\n-                    <Tabs defaultValue=\"questions\" className=\"mt-6\">\r\n-                    <TabsList className=\"grid w-full grid-cols-2\">\r\n-                        <TabsTrigger value=\"questions\">\r\n-                          <MessageSquare className=\"h-4 w-4 mr-2\" />\r\n-                        Questions\r\n-                      </TabsTrigger>\r\n-                        <TabsTrigger value=\"activities\">\r\n-                          <ActivityIcon className=\"h-4 w-4 mr-2\" />\r\n-                        Activities\r\n-                      </TabsTrigger>\r\n-                    </TabsList>\r\n-\r\n-                      {/* Questions Tab */}\r\n-                      <TabsContent value=\"questions\" className=\"space-y-4\">\r\n-                      <CardHeader>\r\n-                          <CardDescription>Add and manage questions for this lesson</CardDescription>\r\n-                      </CardHeader>\r\n-                        {questions.map((question, index) => (\r\n-                          <Card key={index} className={cn(\r\n-                            \"relative border-l-4 transition-colors duration-200\",\r\n-                            expandedQuestion === index ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\r\n-                          )}>\r\n-                            <CardHeader className=\"pb-3\">\r\n-                              <div className=\"flex items-center justify-between gap-4\">\r\n-                                <div className=\"flex items-center gap-3 min-w-0 flex-1\">\r\n-                                  <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n-                                    <span className=\"px-2 py-1 bg-primary/10 rounded-md text-sm font-semibold text-primary whitespace-nowrap\">\r\n-                                      Q {index + 1}\r\n-                                    </span>\r\n-                                    <Badge variant=\"outline\" className=\"whitespace-nowrap\">\r\n-                                      {QUESTION_TYPES[question.type as keyof typeof QUESTION_TYPES]?.label || question.type}\r\n-                                    </Badge>\r\n-                                    {question.isDraft && (\r\n-                                      <Badge variant=\"secondary\" className=\"whitespace-nowrap\">Draft</Badge>\r\n-                                )}\r\n-                                  </div>\r\n-                                      {expandedQuestion !== index && (\r\n-                                        <div className=\"text-sm text-muted-foreground truncate\">\r\n-                                          {question.title || 'No question text'} - {question.content || 'No question texts'}\r\n-                                        </div>\r\n-                                      )}\r\n-                                    </div>\r\n-                                    <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n+                                    <AlertDialog>\r\n+                                      <AlertDialogTrigger asChild>\r\n+                                        <Button\r\n+                                          variant=\"ghost\"\r\n+                                          size=\"sm\"\r\n+                                          className=\"hover:bg-destructive/10 hover:text-destructive\"\r\n+                                          onClick={(e) => e.stopPropagation()}\r\n+                                        >\r\n+                                          <Trash2 className=\"h-4 w-4\" />\r\n+                                        </Button>\r\n+                                      </AlertDialogTrigger>\r\n+                                      <AlertDialogContent>\r\n+                                        <AlertDialogHeader>\r\n+                                          <AlertDialogTitle>Delete Subtopic</AlertDialogTitle>\r\n+                                          <AlertDialogDescription>\r\n+                                            Are you sure you want to delete \"{subtopic.title}\"? This will also delete all associated lessons.\r\n+                                          </AlertDialogDescription>\r\n+                                        </AlertDialogHeader>\r\n+                                        <AlertDialogFooter>\r\n+                                          <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n+                                          <AlertDialogAction\r\n+                                            className=\"bg-destructive hover:bg-destructive/90\"\r\n+                                            onClick={() => handleDeleteSubtopic(subtopic.id || '')}\r\n+                                          >\r\n                                       <Button\r\n                                         variant=\"ghost\"\r\n                                         size=\"sm\"\r\n-                                        onClick={() => handleQuestionExpand(index)}\r\n-                                      >\r\n-                                        {expandedQuestion === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n-                                      </Button>\r\n-                                      <Button\r\n-                                        variant=\"ghost\"\r\n-                                        size=\"sm\"\r\n                                         onClick={() => handleRemoveQuestion(index)}\r\n                                       >\r\n                                         <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n                                       </Button>\r\n"
                },
                {
                    "date": 1739961447785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2423,11 +2423,483 @@\n                                           <AlertDialogAction\r\n                                             className=\"bg-destructive hover:bg-destructive/90\"\r\n                                             onClick={() => handleDeleteSubtopic(subtopic.id || '')}\r\n                                           >\r\n+                                            Delete\r\n+                                          </AlertDialogAction>\r\n+                                        </AlertDialogFooter>\r\n+                                      </AlertDialogContent>\r\n+                                    </AlertDialog>\r\n+                                  </div>\r\n+                                ))}\r\n+                          </SelectContent>\r\n+                        </Select>\r\n+                        {!isViewMode && (\r\n+                          <Button \r\n+                            variant=\"outline\" \r\n+                            size=\"sm\" \r\n+                            className=\"w-full gap-2\"\r\n+                            onClick={() => setModalState({ ...modalState, showAddSubtopic: true })}\r\n+                          >\r\n+                            <Plus className=\"h-4 w-4\" />\r\n+                            Add New Subtopic\r\n+                          </Button>\r\n+                        )}\r\n+                      </div>\r\n+                    )}\r\n+\r\n+                    {/* Lesson Selection */}\r\n+                        {selectedSubtopicId && (\r\n+                      <div className=\"space-y-2\">\r\n+                        <div className=\"flex items-center justify-between\">\r\n+                          <Label htmlFor=\"lesson-select\">Lesson</Label>\r\n+                        </div>\r\n+                          <Select \r\n+                            value={currentLessonId || ''} \r\n+                            onValueChange={handleLessonSelect}\r\n+                            onOpenChange={(open) => {\r\n+                              setIsDropdownOpen(open);\r\n+                              if (open) {\r\n+                                setIsSidebarCollapsed(false);\r\n+                                setIsSidebarLocked(true);\r\n+                              } else {\r\n+                                // Small delay before unlocking to prevent immediate collapse\r\n+                                setTimeout(() => {\r\n+                                  setIsSidebarLocked(false);\r\n+                                }, 100);\r\n+                              }\r\n+                            }}\r\n+                          >\r\n+                            <SelectTrigger \r\n+                              id=\"lesson-select\" \r\n+                              className=\"w-full\"\r\n+                              onClick={(e) => {\r\n+                                e.stopPropagation();\r\n+                                setIsSidebarCollapsed(false);\r\n+                                setIsSidebarLocked(true);\r\n+                              }}\r\n+                            >\r\n+                              <SelectValue placeholder=\"Select Lesson\" />\r\n+                            </SelectTrigger>\r\n+                            <SelectContent>\r\n+                              {lessons.map((lesson) => (\r\n+                                <div key={lesson.id} className=\"flex items-center justify-between\">\r\n+                                  <SelectItem value={lesson.id || ''}>\r\n+                                    <div className=\"flex items-center gap-2\">\r\n+                                      <BookOpen className=\"h-4 w-4 text-primary\" />\r\n+                                      {lesson.title}\r\n+                                    </div>\r\n+                                  </SelectItem>\r\n+                                  <AlertDialog>\r\n+                                    <AlertDialogTrigger asChild>\r\n                                       <Button\r\n                                         variant=\"ghost\"\r\n                                         size=\"sm\"\r\n+                                        className=\"hover:bg-destructive/10 hover:text-destructive\"\r\n+                                        onClick={(e) => e.stopPropagation()}\r\n+                                      >\r\n+                                        <Trash2 className=\"h-4 w-4\" />\r\n+                                      </Button>\r\n+                                    </AlertDialogTrigger>\r\n+                                    <AlertDialogContent>\r\n+                                      <AlertDialogHeader>\r\n+                                        <AlertDialogTitle>Delete Lesson</AlertDialogTitle>\r\n+                                        <AlertDialogDescription>\r\n+                                          Are you sure you want to delete \"{lesson.title}\"? This action cannot be undone.\r\n+                                        </AlertDialogDescription>\r\n+                                      </AlertDialogHeader>\r\n+                                      <AlertDialogFooter>\r\n+                                        <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n+                                        <AlertDialogAction\r\n+                                          className=\"bg-destructive hover:bg-destructive/90\"\r\n+                                          onClick={() => handleDeleteLesson(lesson.id || '')}\r\n+                                        >\r\n+                                          Delete\r\n+                                        </AlertDialogAction>\r\n+                                      </AlertDialogFooter>\r\n+                                    </AlertDialogContent>\r\n+                                  </AlertDialog>\r\n+                                </div>\r\n+                              ))}\r\n+                            </SelectContent>\r\n+                          </Select>\r\n+                    <Button \r\n+                            variant=\"outline\" \r\n+                            size=\"sm\" \r\n+                            className=\"w-full gap-2\"\r\n+                        onClick={() => setModalState({ ...modalState, showAddLesson: true })}\r\n+                          >\r\n+                            <Plus className=\"h-4 w-4\" />\r\n+                            Add New Lesson\r\n+                    </Button>\r\n+                      </div>\r\n+                        )}\r\n+                      </>\r\n+                    )}\r\n+                  </CardContent>\r\n+                </Card>\r\n+              </div>\r\n+\r\n+              {/* Collapsed view */}\r\n+              {isSidebarCollapsed && (\r\n+                <div className=\"absolute inset-0 flex flex-col items-center pt-12 gap-4\">\r\n+                  <BookOpen className=\"h-6 w-6 text-muted-foreground\" />\r\n+                  <div className=\"w-px h-full bg-border\" />\r\n+                </div>\r\n+              )}\r\n+            </Card>\r\n+          </div>\r\n+        \r\n+\r\n+          {/* Right Content Area */}\r\n+          <div className=\"flex-1 overflow-y-auto\">\r\n+            {isNavigating ? (\r\n+              <div className=\"flex items-center justify-center h-[400px]\">\r\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n+                <span className=\"ml-3\">Loading...</span>\r\n+              </div>\r\n+            ) : (\r\n+              <>\r\n+                {!selectedGradeId ? (\r\n+                  // Question Types Display Section\r\n+                  <div className=\"space-y-6\">\r\n+                    <Card>\r\n+                      <CardHeader>\r\n+                        <div className=\"flex items-center justify-between\">\r\n+                          <div>\r\n+                            <CardTitle className=\"text-xl font-semibold\">Available Question Types</CardTitle>\r\n+                            <CardDescription>Browse through different question formats and examples</CardDescription>\r\n+                          </div>\r\n+                          <TooltipProvider>\r\n+                            <Tooltip>\r\n+                              <TooltipTrigger>\r\n+                                <HelpCircle className=\"h-5 w-5 text-muted-foreground\" />\r\n+                              </TooltipTrigger>\r\n+                              <TooltipContent>\r\n+                                <p>Click on each type to see detailed examples</p>\r\n+                              </TooltipContent>\r\n+                            </Tooltip>\r\n+                          </TooltipProvider>\r\n+                        </div>\r\n+                      </CardHeader>\r\n+                      <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n+                        {Object.entries(QUESTION_TYPES).map(([type, details]) => (\r\n+                          <Card key={type} className=\"cursor-pointer hover:bg-accent/50 transition-colors\">\r\n+                            <CardHeader className=\"p-4\">\r\n+                              <div className=\"flex items-center justify-between mb-2\">\r\n+                                <Badge variant=\"outline\" className=\"bg-primary/5 text-lg\">\r\n+                                  {details.label}\r\n+                                </Badge>\r\n+                              </div>\r\n+                              <CardDescription className=\"text-sm\">\r\n+                                {details.description || 'No description available'}\r\n+                              </CardDescription>\r\n+                              <div className=\"mt-4\">\r\n+                                <div className=\"text-sm font-medium mb-2\">Example:</div>\r\n+                                <div className=\"p-3 rounded-md bg-muted/50 text-sm\">\r\n+                                  {type === 'multiple-choice' && (\r\n+                                    <>\r\n+                                      <div className=\"font-medium mb-2\">Q: What is the capital of France?</div>\r\n+                                      <div className=\"space-y-1 pl-4\">\r\n+                                        <div>A) Paris</div>\r\n+                                        <div>B) London</div>\r\n+                                        <div>C) Berlin</div>\r\n+                                        <div>D) Madrid</div>\r\n+                                      </div>\r\n+                                    </>\r\n+                                  )}\r\n+                                  {type === 'fill-in-blank' && (\r\n+                                    <div className=\"space-y-2\">\r\n+                                      <div>Complete the sentence:</div>\r\n+                                      <div>The sun rises in the <span className=\"bg-primary/20 px-2 rounded\">_____</span> and sets in the <span className=\"bg-primary/20 px-2 rounded\">_____</span>.</div>\r\n+                                    </div>\r\n+                                  )}\r\n+                                  {type === 'true-false' && (\r\n+                                    <div className=\"space-y-2\">\r\n+                                      <div className=\"font-medium\">Statement:</div>\r\n+                                      <div>The Earth is flat.</div>\r\n+                                      <div className=\"mt-2\">\r\n+                                        <Badge variant=\"outline\" className=\"mr-2\">True</Badge>\r\n+                                        <Badge variant=\"outline\">False</Badge>\r\n+                                      </div>\r\n+                                    </div>\r\n+                                  )}\r\n+                                  {type === 'matching' && (\r\n+                                    <div className=\"space-y-2\">\r\n+                                      <div className=\"font-medium mb-2\">Match the countries with their capitals:</div>\r\n+                                      <div className=\"grid grid-cols-2 gap-4\">\r\n+                                        <div>\r\n+                                          1. France<br />\r\n+                                          2. Germany<br />\r\n+                                          3. Spain\r\n+                                        </div>\r\n+                                        <div>\r\n+                                          • Berlin<br />\r\n+                                          • Paris<br />\r\n+                                          • Madrid\r\n+                                        </div>\r\n+                                      </div>\r\n+                                    </div>\r\n+                                  )}\r\n+                                  {type === 'ordering' && (\r\n+                                    <div className=\"space-y-2\">\r\n+                                      <div className=\"font-medium mb-2\">Arrange in chronological order:</div>\r\n+                                      <div className=\"space-y-1\">\r\n+                                        <Badge variant=\"outline\" className=\"mr-2\">1</Badge>World War II<br />\r\n+                                        <Badge variant=\"outline\" className=\"mr-2\">2</Badge>Industrial Revolution<br />\r\n+                                        <Badge variant=\"outline\" className=\"mr-2\">3</Badge>Renaissance\r\n+                                      </div>\r\n+                                    </div>\r\n+                                  )}\r\n+                                  {type === 'short-answer' && (\r\n+                                    <div className=\"space-y-2\">\r\n+                                      <div className=\"font-medium\">Question:</div>\r\n+                                      <div>Explain the water cycle in 2-3 sentences.</div>\r\n+                                      <div className=\"mt-2 p-2 border border-dashed rounded-md border-primary/30\">\r\n+                                        Answer space\r\n+                                      </div>\r\n+                                    </div>\r\n+                                  )}\r\n+                                </div>\r\n+                              </div>\r\n+                            </CardHeader>\r\n+                          </Card>\r\n+                        ))}\r\n+                      </CardContent>\r\n+                    </Card>\r\n+                  </div>\r\n+                ) : isViewMode ? (\r\n+                  <div className=\"space-y-6\">\r\n+                    {selectedGradeId ? (\r\n+                      <div className=\"grid grid-cols-1 gap-6\">\r\n+                        {topics.map((topic) => (\r\n+                          <Card key={topic.id} className=\"border-l-4 border-l-primary\">\r\n+                            <CardHeader>\r\n+                              <div className=\"flex items-center justify-between\">\r\n+                                <h3 className=\"text-lg font-semibold\">{topic.title}</h3>\r\n+                              </div>\r\n+                            </CardHeader>\r\n+                            <CardContent>\r\n+                              <div className=\"space-y-4\">\r\n+                                {subtopics\r\n+                                  .filter(subtopic => subtopic.topic_id === topic.id)\r\n+                                  .map((subtopic, index) => (\r\n+                                    <div key={subtopic.id || `subtopic-${index}`} className=\"border-l-2 pl-4\">\r\n+                                      <h4 className=\"text-md font-medium mb-2\">{subtopic.name || 'Untitled Subtopic'}</h4>\r\n+                                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n+                                        {lessons\r\n+                                          .filter(lesson => lesson.subtopic_id === subtopic.id)\r\n+                                          .map((lesson) => (\r\n+                                            <Card \r\n+                                              key={lesson.id} \r\n+                                              className={cn(\r\n+                                                \"cursor-pointer transition-all duration-200\",\r\n+                                                \"hover:shadow-md hover:translate-y-[-2px]\",\r\n+                                                \"hover:bg-accent/50 hover:border-primary/50\",\r\n+                                                \"active:translate-y-[0px]\",\r\n+                                                currentLessonId === lesson.id && \"border-primary bg-accent/50 shadow-md\",\r\n+                                                \"group\" // Enable group hover effects\r\n+                                              )}\r\n+                                              onClick={() => handleLessonSelect(lesson.id || '')}\r\n+                                            >\r\n+                                              <CardHeader className=\"p-4\">\r\n+                                                <div className=\"flex flex-col gap-2\">\r\n+                                                  <div className=\"flex items-center justify-between\">\r\n+                                                    <div className=\"flex items-center gap-2\">\r\n+                                                      <BookOpen className={cn(\r\n+                                                        \"h-4 w-4 text-primary\",\r\n+                                                        \"transition-transform duration-200\",\r\n+                                                        \"group-hover:scale-110\"\r\n+                                                      )} />\r\n+                                                      <span className=\"font-medium\">{lesson.title}</span>\r\n+                                                    </div>\r\n+                                                    <Button\r\n+                                                      variant=\"outline\"\r\n+                                                      size=\"sm\"\r\n+                                                      className={cn(\r\n+                                                        \"opacity-0 group-hover:opacity-100\",\r\n+                                                        \"transition-all duration-200\",\r\n+                                                        \"hover:bg-primary hover:text-primary-foreground\"\r\n+                                                      )}\r\n+                                                      disabled={!lesson.content || currentLessonId !== lesson.id}\r\n+                                                      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\r\n+                                                        e.stopPropagation();\r\n+                                                        window.location.href = `/teacher/lessons/${lesson.id}`;\r\n+                                                      }}\r\n+                                                    >\r\n+                                                      Start Lesson\r\n+                                                    </Button>\r\n+                                                  </div>\r\n+                                                  <div className=\"flex items-center gap-2\">\r\n+                                                    <Badge variant=\"outline\" className={cn(\r\n+                                                      \"bg-primary/5\",\r\n+                                                      \"transition-colors duration-200\",\r\n+                                                      \"group-hover:bg-primary/10\"\r\n+                                                    )}>\r\n+                                                      {lesson.questions?.length || 0} Questions\r\n+                                                    </Badge>\r\n+                                                    <Badge variant=\"outline\" className={cn(\r\n+                                                      \"bg-primary/5\",\r\n+                                                      \"transition-colors duration-200\",\r\n+                                                      \"group-hover:bg-primary/10\"\r\n+                                                    )}>\r\n+                                                      {lesson.activities?.length || 0} Activities\r\n+                                                    </Badge>\r\n+                                                  </div>\r\n+                                                </div>\r\n+                                              </CardHeader>\r\n+                                            </Card>\r\n+                                          ))}\r\n+                                      </div>\r\n+                                    </div>\r\n+                                  ))}\r\n+                              </div>\r\n+                            </CardContent>\r\n+                          </Card>\r\n+                        ))}\r\n+                      </div>\r\n+                    ) : (\r\n+                      <div className=\"text-center py-20\">\r\n+                        <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\r\n+                        <h3 className=\"text-lg font-medium\">Select a Grade</h3>\r\n+                        <p className=\"text-sm text-muted-foreground\">\r\n+                          Choose a grade from the left panel to start managing content\r\n+                        </p>\r\n+                      </div>\r\n+                    )}\r\n+                  </div>\r\n+                ) : (\r\n+                  // Edit Mode Content\r\n+                  <div className=\"space-y-4\">\r\n+                    {/* Lesson Title */}\r\n+                    <Card>\r\n+                      <CardHeader>\r\n+                        <div className=\"flex items-center justify-between mb-4\">\r\n+                          <h2 className=\"text-2xl font-bold\">Lesson Content</h2>\r\n+                                                    <Button\r\n+                                                      variant=\"outline\"\r\n+                                                      size=\"sm\"\r\n+                            onClick={() => setIsContentEditorOpen(true)}\r\n+                          >\r\n+                            <Pencil className=\"h-4 w-4 mr-2\" />\r\n+                            Edit Content\r\n+                          </Button>\r\n+                        </div>\r\n+                      </CardHeader>\r\n+                      <CardContent className=\"space-y-4\">\r\n+                        {/* Lesson Title */}\r\n+                        <div className=\"flex items-center justify-between\">\r\n+                          <div className=\"space-y-1\">\r\n+                            <Label>Lesson Title</Label>\r\n+                            <InlineEdit\r\n+                              value={lessonTitle}\r\n+                              onSave={async (newTitle) => {\r\n+                                setLessonTitle(newTitle);\r\n+                                await handleSaveLesson();\r\n+                              }}\r\n+                              isEditing={isEditingTitle}\r\n+                              setIsEditing={setIsEditingTitle}\r\n+                              placeholder=\"Enter lesson title\"\r\n+                              className=\"text-lg font-medium\"\r\n+                            />\r\n+                          </div>\r\n+                        </div>\r\n+\r\n+                        {/* Content Editor and Display */}\r\n+                        <div className=\"space-y-4\">\r\n+                          {isContentEditorOpen ? (\r\n+                            <div className=\"border rounded-lg p-4\">\r\n+                              <div className=\"mb-4\">\r\n+                                <Label>Content Heading</Label>\r\n+                                <InlineEdit\r\n+                                  value={contentHeading}\r\n+                                  onSave={(newHeading) => setContentHeading(newHeading)}\r\n+                                  isEditing={isEditingHeading}\r\n+                                  setIsEditing={setIsEditingHeading}\r\n+                                  placeholder=\"Add content heading\"\r\n+                                  className=\"text-base text-muted-foreground\"\r\n+                                />\r\n+                              </div>\r\n+                              <RichTextEditor\r\n+                                value={lessonContent}\r\n+                                onChange={setLessonContent}\r\n+                                onSave={async (content) => {\r\n+                                  await handleContentSave(content);\r\n+                                  setIsContentEditorOpen(false);\r\n+                                }}\r\n+                                placeholder=\"Add lesson content here...\"\r\n+                              />\r\n+                            </div>\r\n+                          ) : lessonContent ? (\r\n+                            <div className=\"prose prose-sm max-w-none\">\r\n+                              {contentHeading && (\r\n+                                <h3 className=\"text-lg font-semibold mb-2\">{contentHeading}</h3>\r\n+                              )}\r\n+                              <div dangerouslySetInnerHTML={{ __html: lessonContent }} />\r\n+                            </div>\r\n+                          ) : (\r\n+                            <div className=\"text-center py-8 text-muted-foreground\">\r\n+                              Click 'Edit Content' to add lesson content\r\n+                            </div>\r\n+                          )}\r\n+                        </div>\r\n+                      </CardContent>\r\n+                    </Card>\r\n+\r\n+                    {/* Tabs */}\r\n+                    <Tabs defaultValue=\"questions\" className=\"mt-6\">\r\n+                    <TabsList className=\"grid w-full grid-cols-2\">\r\n+                        <TabsTrigger value=\"questions\">\r\n+                          <MessageSquare className=\"h-4 w-4 mr-2\" />\r\n+                        Questions\r\n+                      </TabsTrigger>\r\n+                        <TabsTrigger value=\"activities\">\r\n+                          <ActivityIcon className=\"h-4 w-4 mr-2\" />\r\n+                        Activities\r\n+                      </TabsTrigger>\r\n+                    </TabsList>\r\n+\r\n+                      {/* Questions Tab */}\r\n+                      <TabsContent value=\"questions\" className=\"space-y-4\">\r\n+                      <CardHeader>\r\n+                          <CardDescription>Add and manage questions for this lesson</CardDescription>\r\n+                      </CardHeader>\r\n+                        {questions.map((question, index) => (\r\n+                          <Card key={index} className={cn(\r\n+                            \"relative border-l-4 transition-colors duration-200\",\r\n+                            expandedQuestion === index ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\r\n+                          )}>\r\n+                            <CardHeader className=\"pb-3\">\r\n+                              <div className=\"flex items-center justify-between gap-4\">\r\n+                                <div className=\"flex items-center gap-3 min-w-0 flex-1\">\r\n+                                  <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n+                                    <span className=\"px-2 py-1 bg-primary/10 rounded-md text-sm font-semibold text-primary whitespace-nowrap\">\r\n+                                      Q {index + 1}\r\n+                                    </span>\r\n+                                    <Badge variant=\"outline\" className=\"whitespace-nowrap\">\r\n+                                      {QUESTION_TYPES[question.type as keyof typeof QUESTION_TYPES]?.label || question.type}\r\n+                                    </Badge>\r\n+                                    {question.isDraft && (\r\n+                                      <Badge variant=\"secondary\" className=\"whitespace-nowrap\">Draft</Badge>\r\n+                                )}\r\n+                                  </div>\r\n+                                      {expandedQuestion !== index && (\r\n+                                        <div className=\"text-sm text-muted-foreground truncate\">\r\n+                                          {question.title || 'No question text'} - {question.content || 'No question texts'}\r\n+                                        </div>\r\n+                                      )}\r\n+                                    </div>\r\n+                                    <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n+                                      <Button\r\n+                                        variant=\"ghost\"\r\n+                                        size=\"sm\"\r\n+                                        onClick={() => handleQuestionExpand(index)}\r\n+                                      >\r\n+                                        {expandedQuestion === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n+                                      </Button>\r\n+                                      <Button\r\n+                                        variant=\"ghost\"\r\n+                                        size=\"sm\"\r\n                                         onClick={() => handleRemoveQuestion(index)}\r\n                                       >\r\n                                         <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n                                       </Button>\r\n"
                },
                {
                    "date": 1739961524993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1428,23 +1428,14 @@\n   };\r\n \r\n   const handleDeleteSubtopic = async (subtopicId: string) => {\r\n     try {\r\n-      const { error } = await supabase\r\n-        .from('subtopics')\r\n-        .delete()\r\n-        .eq('id', subtopicId);\r\n-\r\n-      if (error) throw error;\r\n-\r\n-      // Reset selections\r\n+      await contentService.deleteSubtopic(subtopicId);\r\n+      setSubtopics(prev => prev.filter(subtopic => subtopic.id !== subtopicId));\r\n       setSelectedSubtopicId(null);\r\n-      setCurrentLessonId(null);\r\n-      \r\n-      // Refresh subtopics\r\n-      await fetchSubtopics();\r\n       toast.success('Subtopic deleted successfully');\r\n-    } catch (error) {\r\n+    } catch (err) {\r\n+      const error = err as Error;\r\n       console.error('Error deleting subtopic:', error);\r\n       toast.error('Failed to delete subtopic');\r\n     }\r\n   };\r\n@@ -2328,46 +2319,18 @@\n                             <SelectValue placeholder=\"Select Topic\" />\r\n                           </SelectTrigger>\r\n                           <SelectContent>\r\n                                 {topics.map((topic: Topic) => (\r\n-                                  <div key={`topic-${topic.id || 'new'}`} className=\"flex items-center justify-between\">\r\n-                                    <SelectItem value={topic.id || ''}>\r\n-                                      <div className=\"flex items-center gap-2\">\r\n-                                        <Layers className=\"h-4 w-4 text-primary\" />\r\n-                                        {topic.title}\r\n-                                      </div>\r\n-                                    </SelectItem>\r\n-                                    <AlertDialog>\r\n-                                      <AlertDialogTrigger asChild>\r\n-                                        <Button\r\n-                                          variant=\"ghost\"\r\n-                                          size=\"sm\"\r\n-                                          className=\"hover:bg-destructive/10 hover:text-destructive\"\r\n-                                          onClick={(e) => e.stopPropagation()}\r\n-                                        >\r\n-                                          <Trash2 className=\"h-4 w-4\" />\r\n-                                        </Button>\r\n-                                      </AlertDialogTrigger>\r\n-                                      <AlertDialogContent>\r\n-                                        <AlertDialogHeader>\r\n-                                          <AlertDialogTitle>Delete Topic</AlertDialogTitle>\r\n-                                          <AlertDialogDescription>\r\n-                                            Are you sure you want to delete \"{topic.title}\"? This will also delete all associated subtopics and lessons.\r\n-                                          </AlertDialogDescription>\r\n-                                        </AlertDialogHeader>\r\n-                                        <AlertDialogFooter>\r\n-                                          <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n-                                          <AlertDialogAction\r\n-                                            className=\"bg-destructive hover:bg-destructive/90\"\r\n-                                            onClick={() => handleDeleteTopic(topic.id || '')}\r\n-                                          >\r\n-                                            Delete\r\n-                                          </AlertDialogAction>\r\n-                                        </AlertDialogFooter>\r\n-                                      </AlertDialogContent>\r\n-                                    </AlertDialog>\r\n+                                  <SelectItem \r\n+                                    key={`topic-${topic.id || 'new'}`} \r\n+                                    value={topic.id || ''}\r\n+                                  >\r\n+                                  <div className=\"flex items-center gap-2\">\r\n+                                  <Layers className=\"h-4 w-4 text-primary\" />\r\n+                                    {topic.title}\r\n                                   </div>\r\n-                                ))}\r\n+                                </SelectItem>\r\n+                              ))}\r\n                           </SelectContent>\r\n                         </Select>\r\n                         <Button \r\n                           variant=\"outline\" \r\n@@ -2394,44 +2357,18 @@\n                           <SelectTrigger id=\"subtopic-select\" className=\"w-full\">\r\n                             <SelectValue placeholder=\"Select Subtopic\" />\r\n                           </SelectTrigger>\r\n                           <SelectContent>\r\n-                                {subtopics.map((subtopic) => (\r\n-                                  <div key={subtopic.id} className=\"flex items-center justify-between\">\r\n-                                    <SelectItem value={subtopic.id || ''}>\r\n-                                      {subtopic.title}\r\n+                                {subtopics\r\n+                                  .filter(subtopic => subtopic.id)\r\n+                                  .map((subtopic, index) => (\r\n+                                    <SelectItem \r\n+                                      key={subtopic.id || `subtopic-${index}`}\r\n+                                      value={subtopic.id || ''}\r\n+                                    >\r\n+                                      {subtopic.title || 'Untitled Subtopic'}\r\n                                     </SelectItem>\r\n-                                    <AlertDialog>\r\n-                                      <AlertDialogTrigger asChild>\r\n-                                        <Button\r\n-                                          variant=\"ghost\"\r\n-                                          size=\"sm\"\r\n-                                          className=\"hover:bg-destructive/10 hover:text-destructive\"\r\n-                                          onClick={(e) => e.stopPropagation()}\r\n-                                        >\r\n-                                          <Trash2 className=\"h-4 w-4\" />\r\n-                                        </Button>\r\n-                                      </AlertDialogTrigger>\r\n-                                      <AlertDialogContent>\r\n-                                        <AlertDialogHeader>\r\n-                                          <AlertDialogTitle>Delete Subtopic</AlertDialogTitle>\r\n-                                          <AlertDialogDescription>\r\n-                                            Are you sure you want to delete \"{subtopic.title}\"? This will also delete all associated lessons.\r\n-                                          </AlertDialogDescription>\r\n-                                        </AlertDialogHeader>\r\n-                                        <AlertDialogFooter>\r\n-                                          <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n-                                          <AlertDialogAction\r\n-                                            className=\"bg-destructive hover:bg-destructive/90\"\r\n-                                            onClick={() => handleDeleteSubtopic(subtopic.id || '')}\r\n-                                          >\r\n-                                            Delete\r\n-                                          </AlertDialogAction>\r\n-                                        </AlertDialogFooter>\r\n-                                      </AlertDialogContent>\r\n-                                    </AlertDialog>\r\n-                                  </div>\r\n-                                ))}\r\n+                                  ))}\r\n                           </SelectContent>\r\n                         </Select>\r\n                         {!isViewMode && (\r\n                           <Button \r\n@@ -2480,47 +2417,21 @@\n                             >\r\n                               <SelectValue placeholder=\"Select Lesson\" />\r\n                             </SelectTrigger>\r\n                             <SelectContent>\r\n-                              {lessons.map((lesson) => (\r\n-                                <div key={lesson.id} className=\"flex items-center justify-between\">\r\n-                                  <SelectItem value={lesson.id || ''}>\r\n+                              {lessons\r\n+                                .filter((lesson): lesson is Lesson => lesson !== undefined && lesson !== null)\r\n+                                .map((lesson: Lesson) => (\r\n+                                  <SelectItem \r\n+                                    key={`lesson-${lesson.id || 'new'}`} \r\n+                                    value={lesson.id || ''}\r\n+                                  >\r\n                                     <div className=\"flex items-center gap-2\">\r\n                                       <BookOpen className=\"h-4 w-4 text-primary\" />\r\n-                                      {lesson.title}\r\n+                                      {lesson.title || 'Untitled Lesson'}\r\n                                     </div>\r\n                                   </SelectItem>\r\n-                                  <AlertDialog>\r\n-                                    <AlertDialogTrigger asChild>\r\n-                                      <Button\r\n-                                        variant=\"ghost\"\r\n-                                        size=\"sm\"\r\n-                                        className=\"hover:bg-destructive/10 hover:text-destructive\"\r\n-                                        onClick={(e) => e.stopPropagation()}\r\n-                                      >\r\n-                                        <Trash2 className=\"h-4 w-4\" />\r\n-                                      </Button>\r\n-                                    </AlertDialogTrigger>\r\n-                                    <AlertDialogContent>\r\n-                                      <AlertDialogHeader>\r\n-                                        <AlertDialogTitle>Delete Lesson</AlertDialogTitle>\r\n-                                        <AlertDialogDescription>\r\n-                                          Are you sure you want to delete \"{lesson.title}\"? This action cannot be undone.\r\n-                                        </AlertDialogDescription>\r\n-                                      </AlertDialogHeader>\r\n-                                      <AlertDialogFooter>\r\n-                                        <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n-                                        <AlertDialogAction\r\n-                                          className=\"bg-destructive hover:bg-destructive/90\"\r\n-                                          onClick={() => handleDeleteLesson(lesson.id || '')}\r\n-                                        >\r\n-                                          Delete\r\n-                                        </AlertDialogAction>\r\n-                                      </AlertDialogFooter>\r\n-                                    </AlertDialogContent>\r\n-                                  </AlertDialog>\r\n-                                </div>\r\n-                              ))}\r\n+                                ))}\r\n                             </SelectContent>\r\n                           </Select>\r\n                     <Button \r\n                             variant=\"outline\" \r\n"
                },
                {
                    "date": 1739961840627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,9 @@\n import { PostgrestError } from '@supabase/supabase-js';\r\n import { Question as ContentQuestion } from './types';  // Import the specific type\r\n import { Trash } from \"lucide-react\";\r\n import { AnimatePresence, motion } from 'framer-motion';\r\n+import { Icon } from '@/components/ui/icon';\r\n \r\n \r\n // Update the API endpoint to match your backend route\r\n const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\r\n"
                },
                {
                    "date": 1739962247284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,8 @@\n import { PostgrestError } from '@supabase/supabase-js';\r\n import { Question as ContentQuestion } from './types';  // Import the specific type\r\n import { Trash } from \"lucide-react\";\r\n import { AnimatePresence, motion } from 'framer-motion';\r\n-import { Icon } from '@/components/ui/icon';\r\n \r\n \r\n // Update the API endpoint to match your backend route\r\n const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\r\n"
                },
                {
                    "date": 1739962340161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2794,9 +2794,9 @@\n                                 )}\r\n                                   </div>\r\n                                       {expandedQuestion !== index && (\r\n                                         <div className=\"text-sm text-muted-foreground truncate\">\r\n-                                          {question.title || 'No question text'} - {question.content || 'No question texts'}\r\n+                                          {question.title || 'No question text'} - {question.data?.prompt || 'No question texts'}\r\n                                         </div>\r\n                                       )}\r\n                                     </div>\r\n                                     <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n"
                },
                {
                    "date": 1739962434033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2794,9 +2794,9 @@\n                                 )}\r\n                                   </div>\r\n                                       {expandedQuestion !== index && (\r\n                                         <div className=\"text-sm text-muted-foreground truncate\">\r\n-                                          {question.title || 'No question text'} - {question.data?.prompt || 'No question texts'}\r\n+                                          {question.title || 'No question text'} - {question.content || 'No question texts'}\r\n                                         </div>\r\n                                       )}\r\n                                     </div>\r\n                                     <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n"
                },
                {
                    "date": 1739962445691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2794,9 +2794,9 @@\n                                 )}\r\n                                   </div>\r\n                                       {expandedQuestion !== index && (\r\n                                         <div className=\"text-sm text-muted-foreground truncate\">\r\n-                                          {question.title || 'No question text'} - {question.content || 'No question texts'}\r\n+                                          {question.title || 'No question text'} - {question.data?.prompt || 'No question texts'}\r\n                                         </div>\r\n                                       )}\r\n                                     </div>\r\n                                     <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n"
                },
                {
                    "date": 1739962472660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2794,9 +2794,9 @@\n                                 )}\r\n                                   </div>\r\n                                       {expandedQuestion !== index && (\r\n                                         <div className=\"text-sm text-muted-foreground truncate\">\r\n-                                          {question.title || 'No question text'} - {question.data?.prompt || 'No question texts'}\r\n+                                          {question.title || 'No question text'} - {question.content || 'No question texts'}\r\n                                         </div>\r\n                                       )}\r\n                                     </div>\r\n                                     <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n"
                },
                {
                    "date": 1739962482407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2794,9 +2794,9 @@\n                                 )}\r\n                                   </div>\r\n                                       {expandedQuestion !== index && (\r\n                                         <div className=\"text-sm text-muted-foreground truncate\">\r\n-                                          {question.title || 'No question text'} - {question.content || 'No question texts'}\r\n+                                          {question.title || 'No question text'} - {question.data?.content || 'No question texts'}\r\n                                         </div>\r\n                                       )}\r\n                                     </div>\r\n                                     <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n"
                },
                {
                    "date": 1739962918636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2609,9 +2609,9 @@\n                                                 \"active:translate-y-[0px]\",\r\n                                                 currentLessonId === lesson.id && \"border-primary bg-accent/50 shadow-md\",\r\n                                                 \"group\" // Enable group hover effects\r\n                                               )}\r\n-                                              onClick={() => handleLessonSelect(lesson.id || '')}\r\n+                                              onClick={() => handleLessonSelect(lesson.id)}\r\n                                             >\r\n                                               <CardHeader className=\"p-4\">\r\n                                                 <div className=\"flex flex-col gap-2\">\r\n                                                   <div className=\"flex items-center justify-between\">\r\n"
                },
                {
                    "date": 1739963286474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2609,9 +2609,9 @@\n                                                 \"active:translate-y-[0px]\",\r\n                                                 currentLessonId === lesson.id && \"border-primary bg-accent/50 shadow-md\",\r\n                                                 \"group\" // Enable group hover effects\r\n                                               )}\r\n-                                              onClick={() => handleLessonSelect(lesson.id)}\r\n+                                              onClick={() => handleLessonSelect(lesson.id || '')}\r\n                                             >\r\n                                               <CardHeader className=\"p-4\">\r\n                                                 <div className=\"flex flex-col gap-2\">\r\n                                                   <div className=\"flex items-center justify-between\">\r\n"
                },
                {
                    "date": 1739963307641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2609,9 +2609,9 @@\n                                                 \"active:translate-y-[0px]\",\r\n                                                 currentLessonId === lesson.id && \"border-primary bg-accent/50 shadow-md\",\r\n                                                 \"group\" // Enable group hover effects\r\n                                               )}\r\n-                                              onClick={() => handleLessonSelect(lesson.id || '')}\r\n+                                              onClick={() => handleLessonSelect(lesson.id)}\r\n                                             >\r\n                                               <CardHeader className=\"p-4\">\r\n                                                 <div className=\"flex flex-col gap-2\">\r\n                                                   <div className=\"flex items-center justify-between\">\r\n"
                },
                {
                    "date": 1739964433104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2128,8 +2128,9 @@\n                           <Card \r\n                             key={topic.id} \r\n                             className={cn(\r\n                               \"border-l-4 transition-all duration-200 hover:shadow-md\",\r\n+                              expandedTopic === topic.id ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\r\n                               expandedTopic === topic.id \r\n                                 ? \"border-l-primary bg-accent/5\" \r\n                                 : \"border-l-primary/40 hover:border-l-primary\"\r\n                             )}\r\n"
                },
                {
                    "date": 1739964439658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2129,8 +2129,11 @@\n                             key={topic.id} \r\n                             className={cn(\r\n                               \"border-l-4 transition-all duration-200 hover:shadow-md\",\r\n                               expandedTopic === topic.id ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\r\n+                            )}\r\n+                          >\r\n+                            <CardHeader className=\"py-3 cursor-pointer select-none\">\r\n                               expandedTopic === topic.id \r\n                                 ? \"border-l-primary bg-accent/5\" \r\n                                 : \"border-l-primary/40 hover:border-l-primary\"\r\n                             )}\r\n"
                },
                {
                    "date": 1739964446437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2132,24 +2132,12 @@\n                               expandedTopic === topic.id ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\r\n                             )}\r\n                           >\r\n                             <CardHeader className=\"py-3 cursor-pointer select-none\">\r\n-                              expandedTopic === topic.id \r\n-                                ? \"border-l-primary bg-accent/5\" \r\n-                                : \"border-l-primary/40 hover:border-l-primary\"\r\n-                            )}\r\n-                          >\r\n-                            <CardHeader \r\n-                              className=\"py-3 cursor-pointer select-none\" \r\n-                              onClick={() => handleTopicExpand(topic.id || '')}\r\n-                            >\r\n                               <div className=\"flex items-center justify-between\">\r\n-                                <div className=\"flex items-center gap-2\">\r\n+                                <div className=\"flex items-center gap-2\" onClick={() => handleTopicExpand(topic.id || '')}>\r\n                                   <Layers className=\"h-4 w-4 text-primary\" />\r\n                                   <h4 className=\"font-medium\">{topic.title}</h4>\r\n-                                  <Badge variant=\"outline\" className=\"ml-2\">\r\n-                                    {subtopics.filter(s => s.topic_id === topic.id).length} Subtopics\r\n-                                  </Badge>\r\n                                 </div>\r\n                                 <div className=\"flex items-center gap-2\">\r\n                                   <AlertDialog>\r\n                                     <AlertDialogTrigger asChild>\r\n"
                },
                {
                    "date": 1739964452831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2144,13 +2144,25 @@\n                                       <Button \r\n                                         variant=\"ghost\" \r\n                                         size=\"sm\" \r\n                                         className=\"hover:bg-destructive/10 hover:text-destructive\"\r\n-                                        onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}\r\n+                                        onClick={(e) => e.stopPropagation()}\r\n                                       >\r\n                                         <Trash className=\"h-4 w-4\" />\r\n                                       </Button>\r\n                                     </AlertDialogTrigger>\r\n+                                    <AlertDialogContent>\r\n+                                      <AlertDialogHeader>\r\n+                                        <AlertDialogTitle>Delete Topic</AlertDialogTitle>\r\n+                                        <AlertDialogDescription>\r\n+                                          Are you sure you want to delete {topic.title}? This action cannot be undone.\r\n+                                        </AlertDialogDescription>\r\n+                                      </AlertDialogHeader>\r\n+                                      <AlertDialogFooter>\r\n+                                        <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n+                                        <AlertDialogAction onClick={() => handleDelete(topic.id, 'topic', topic.title)}>\r\n+                                          Delete\r\n+                                        </AlertDialogAction>\r\n                                     {/* Alert Dialog Content */}\r\n                                   </AlertDialog>\r\n                                   <ChevronDown className={cn(\r\n                                     \"h-4 w-4 transition-transform duration-200\",\r\n"
                },
                {
                    "date": 1739964458918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2161,9 +2161,10 @@\n                                         <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n                                         <AlertDialogAction onClick={() => handleDelete(topic.id, 'topic', topic.title)}>\r\n                                           Delete\r\n                                         </AlertDialogAction>\r\n-                                    {/* Alert Dialog Content */}\r\n+                                      </AlertDialogFooter>\r\n+                                    </AlertDialogContent>\r\n                                   </AlertDialog>\r\n                                   <ChevronDown className={cn(\r\n                                     \"h-4 w-4 transition-transform duration-200\",\r\n                                     expandedTopic === topic.id ? \"rotate-0\" : \"-rotate-90\"\r\n@@ -2179,8 +2180,20 @@\n                                   animate={{ height: \"auto\", opacity: 1 }}\r\n                                   exit={{ height: 0, opacity: 0 }}\r\n                                   transition={{ duration: 0.2 }}\r\n                                 >\r\n+                                  <CardContent className=\"py-0 pl-4\">\r\n+                                    {subtopics.map((subtopic) => (\r\n+                                      <div key={subtopic.id} className=\"mb-3 last:mb-0\">\r\n+                                        <div className=\"flex items-center justify-between py-2\">\r\n+                                          <div className=\"flex items-center gap-2\" onClick={() => handleSubtopicExpand(subtopic.id)}>\r\n+                                            <BookOpen className=\"h-4 w-4 text-primary\" />\r\n+                                            <span className=\"text-sm font-medium\">{subtopic.title}</span>\r\n+                                          </div>\r\n+                                          <div className=\"flex items-center gap-2\">\r\n+                                            <AlertDialog>\r\n+                                              <AlertDialogTrigger asChild>\r\n+                                                <Button \r\n                                   <CardContent className=\"pt-0 pb-2\">\r\n                                     <div className=\"pl-4 space-y-2\">\r\n                                       {isLoadingSubtopics ? (\r\n                                         <div className=\"flex items-center justify-center py-4\">\r\n"
                },
                {
                    "date": 1739964473632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2192,60 +2192,79 @@\n                                           <div className=\"flex items-center gap-2\">\r\n                                             <AlertDialog>\r\n                                               <AlertDialogTrigger asChild>\r\n                                                 <Button \r\n-                                  <CardContent className=\"pt-0 pb-2\">\r\n-                                    <div className=\"pl-4 space-y-2\">\r\n-                                      {isLoadingSubtopics ? (\r\n-                                        <div className=\"flex items-center justify-center py-4\">\r\n-                                          <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\r\n+                                                  variant=\"ghost\" \r\n+                                                  size=\"sm\"\r\n+                                                  className=\"hover:bg-destructive/10 hover:text-destructive\"\r\n+                                                  onClick={(e) => e.stopPropagation()}\r\n+                                                >\r\n+                                                  <Trash className=\"h-4 w-4\" />\r\n+                                                </Button>\r\n+                                              </AlertDialogTrigger>\r\n+                                              <AlertDialogContent>\r\n+                                                <AlertDialogHeader>\r\n+                                                  <AlertDialogTitle>Delete Subtopic</AlertDialogTitle>\r\n+                                                  <AlertDialogDescription>\r\n+                                                    Are you sure you want to delete {subtopic.title}?\r\n+                                                  </AlertDialogDescription>\r\n+                                                </AlertDialogHeader>\r\n+                                                <AlertDialogFooter>\r\n+                                                  <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n+                                                  <AlertDialogAction onClick={() => handleDelete(subtopic.id, 'subtopic', subtopic.title)}>\r\n+                                                    Delete\r\n+                                                  </AlertDialogAction>\r\n+                                                </AlertDialogFooter>\r\n+                                              </AlertDialogContent>\r\n+                                            </AlertDialog>\r\n+                                            <ChevronDown className={cn(\r\n+                                              \"h-4 w-4 transition-transform duration-200\",\r\n+                                              expandedSubtopic === subtopic.id ? \"rotate-0\" : \"-rotate-90\"\r\n+                                            )} />\r\n+                                          </div>\r\n                                         </div>\r\n-                                      ) : (\r\n-                                        subtopics\r\n-                                          .filter(subtopic => subtopic.topic_id === topic.id)\r\n-                                          .map((subtopic: SubTopic) => (\r\n-                                            <div \r\n-                                              key={subtopic.id}\r\n-                                              className={cn(\r\n-                                                \"rounded-lg border transition-colors\",\r\n-                                                expandedSubtopic === subtopic.id \r\n-                                                  ? \"bg-accent/10 border-primary/20\" \r\n-                                                  : \"hover:bg-accent/5\"\r\n-                                              )}\r\n-                                            >\r\n-                                              <div \r\n-                                                className=\"p-3 cursor-pointer\"\r\n-                                                onClick={() => handleSubtopicExpand(subtopic.id || '')}\r\n-                                              >\r\n-                                                <div className=\"flex items-center justify-between py-2 cursor-pointer hover:bg-accent/50 rounded-md px-2\">\r\n-                                                  <div className=\"flex items-center gap-2\">\r\n-                                                    <BookOpen className=\"h-4 w-4 text-primary\" />\r\n-                                                    <span className=\"text-sm font-medium\">{subtopic.name}</span>\r\n-                                                    <Badge variant=\"outline\" className=\"ml-2\">\r\n-                                                      {lessons.filter(l => l.subtopic_id === subtopic.id).length} Lessons\r\n-                                                    </Badge>\r\n-                                                  </div>\r\n-                                                  <div className=\"flex items-center gap-2\">\r\n-                                                    <AlertDialog>\r\n-                                                      <AlertDialogTrigger asChild>\r\n-                                                        <Button \r\n-                                                          variant=\"ghost\" \r\n-                                                          size=\"sm\" \r\n-                                                          className=\"hover:bg-destructive/10 hover:text-destructive\"\r\n-                                                          onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}\r\n-                                                        >\r\n-                                                          <Trash className=\"h-4 w-4\" />\r\n-                                                        </Button>\r\n-                                                      </AlertDialogTrigger>\r\n-                                                      {/* Alert Dialog Content */}\r\n-                                                    </AlertDialog>\r\n-                                                    <ChevronDown className={cn(\r\n-                                                      \"h-4 w-4 transition-transform duration-200\",\r\n-                                                      expandedSubtopic === subtopic.id ? \"rotate-0\" : \"-rotate-90\"\r\n-                                                    )} />\r\n-                                                  </div>\r\n+\r\n+                                        {/* Similar pattern for lessons */}\r\n+                                        {expandedSubtopic === subtopic.id && (\r\n+                                          <div className=\"pl-4 space-y-2\">\r\n+                                            {lessons.map((lesson) => (\r\n+                                              <div key={lesson.id} \r\n+                                                className=\"flex items-center justify-between gap-2 py-2 px-3 rounded-md transition-colors hover:bg-accent\">\r\n+                                                <div className=\"flex items-center gap-2\" onClick={() => handleLessonSelect(lesson.id)}>\r\n+                                                  <BookOpen className=\"h-4 w-4 text-muted-foreground\" />\r\n+                                                  <span className=\"text-sm\">{lesson.title}</span>\r\n                                                 </div>\r\n-\r\n+                                                <AlertDialog>\r\n+                                                  <AlertDialogTrigger asChild>\r\n+                                                    <Button \r\n+                                                      variant=\"ghost\" \r\n+                                                      size=\"sm\"\r\n+                                                      className=\"hover:bg-destructive/10 hover:text-destructive\"\r\n+                                                      onClick={(e) => e.stopPropagation()}\r\n+                                                    >\r\n+                                                      <Trash className=\"h-4 w-4\" />\r\n+                                                    </Button>\r\n+                                                  </AlertDialogTrigger>\r\n+                                                  <AlertDialogContent>\r\n+                                                    <AlertDialogHeader>\r\n+                                                      <AlertDialogTitle>Delete Lesson</AlertDialogTitle>\r\n+                                                      <AlertDialogDescription>\r\n+                                                        Are you sure you want to delete {lesson.title}?\r\n+                                                      </AlertDialogDescription>\r\n+                                                    </AlertDialogHeader>\r\n+                                                    <AlertDialogFooter>\r\n+                                                      <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n+                                                      <AlertDialogAction onClick={() => handleDelete(lesson.id, 'lesson', lesson.title)}>\r\n+                                                        Delete\r\n+                                                      </AlertDialogAction>\r\n+                                                    </AlertDialogFooter>\r\n+                                                  </AlertDialogContent>\r\n+                                                </AlertDialog>\r\n+                                              </div>\r\n+                                            ))}\r\n+                                          </div>\r\n+                                        )}\r\n+                                      </div>\r\n                                                 <AnimatePresence>\r\n                                                   {expandedSubtopic === subtopic.id && (\r\n                                                     <motion.div\r\n                                                       initial={{ height: 0, opacity: 0 }}\r\n"
                },
                {
                    "date": 1739964479617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2263,72 +2263,9 @@\n                                             ))}\r\n                                           </div>\r\n                                         )}\r\n                                       </div>\r\n-                                                <AnimatePresence>\r\n-                                                  {expandedSubtopic === subtopic.id && (\r\n-                                                    <motion.div\r\n-                                                      initial={{ height: 0, opacity: 0 }}\r\n-                                                      animate={{ height: \"auto\", opacity: 1 }}\r\n-                                                      exit={{ height: 0, opacity: 0 }}\r\n-                                                      transition={{ duration: 0.2 }}\r\n-                                                    >\r\n-                                                      <div className=\"px-3 pb-3\">\r\n-                                                        <div className=\"space-y-2\">\r\n-                                                          {isLoadingLessons ? (\r\n-                                                            <div className=\"flex items-center justify-center py-4\">\r\n-                                                              <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\r\n-                                                            </div>\r\n-                                                          ) : (\r\n-                                                            lessons\r\n-                                                              .filter(lesson => lesson.subtopic_id === subtopic.id)\r\n-                                                              .map((lesson: Lesson) => (\r\n-                                                                <div\r\n-                                                                  key={lesson.id}\r\n-                                                                  onClick={() => handleLessonSelect(lesson.id || '')}\r\n-                                                                  className={cn(\r\n-                                                                    \"flex items-center gap-3 p-2 rounded-md cursor-pointer transition-colors\",\r\n-                                                                    \"hover:bg-accent\",\r\n-                                                                    currentLessonId === lesson.id && \"bg-accent\"\r\n-                                                                  )}\r\n-                                                                >\r\n-                                                                  <div className=\"flex items-center gap-2 flex-1\">\r\n-                                                                    <div className=\"flex h-8 w-8 items-center justify-center rounded-md border bg-background\">\r\n-                                                                      <BookOpen className=\"h-4 w-4 text-primary\" />\r\n-                                                                    </div>\r\n-                                                                    <div className=\"flex flex-col\">\r\n-                                                                      <span className=\"text-sm font-medium\">{lesson.title}</span>\r\n-                                                                      <span className=\"text-xs text-muted-foreground\">\r\n-                                                                        {lesson.duration} mins • {lesson.questions?.length || 0} Questions\r\n-                                                                      </span>\r\n-                                                                    </div>\r\n-                                                                  </div>\r\n-                                                                  <AlertDialog>\r\n-                                                                    <AlertDialogTrigger asChild>\r\n-                                                                      <Button \r\n-                                                                        variant=\"ghost\" \r\n-                                                                        size=\"sm\" \r\n-                                                                        className=\"hover:bg-destructive/10 hover:text-destructive\"\r\n-                                                                        onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}\r\n-                                                                      >\r\n-                                                                        <Trash className=\"h-4 w-4\" />\r\n-                                                                      </Button>\r\n-                                                                    </AlertDialogTrigger>\r\n-                                                                    {/* Alert Dialog Content */}\r\n-                                                                  </AlertDialog>\r\n-                                                                </div>\r\n-                                                              ))\r\n-                                                          )}\r\n-                                                        </div>\r\n-                                                      </div>\r\n-                                                    </motion.div>\r\n-                                                  )}\r\n-                                                </AnimatePresence>\r\n-                                              </div>\r\n-                                            </div>\r\n-                                          ))\r\n-                                      )}\r\n-                                    </div>\r\n+                                    ))}\r\n                                   </CardContent>\r\n                                 </motion.div>\r\n                               )}\r\n                             </AnimatePresence>\r\n"
                },
                {
                    "date": 1739964582539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,3286 +1,3313 @@\n-\"use client\";\r\n-\r\n-import { useState, useCallback, useEffect, useRef } from 'react';\r\n-import { toast } from 'sonner';\r\n-import { Toaster } from 'sonner';\r\n-import Link from 'next/link';\r\n-import {  Activity as ActivityIcon,  ArrowLeft,  BookOpen,  ChevronDown,  ChevronRight,  Check,  Edit,  Eye,  EyeOff,  HelpCircle,  Layers,  List,  MessageSquare,  Plus,  Save,  Trash as Trash2, X, Pencil, Lock, Unlock, RefreshCw, Clock, Bell, Moon, GraduationCap, MoreHorizontal, Loader2 } from 'lucide-react';\r\n-import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\n-import { Badge } from '@/components/ui/badge';\r\n-import { Button } from '@/components/ui/button';\r\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\n-import { Input } from '@/components/ui/input';\r\n-import { Label } from '@/components/ui/label';\r\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\n-import { Textarea } from '@/components/ui/textarea';\r\n-import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\r\n-import { cn } from '@/lib/utils';\r\n-import { API_BASE_URL, QUESTION_TYPES, isQuestionType } from './constants';\r\n-import { ExercisePrompt, Lesson } from './types';\r\n-import { QuestionFormProps, ExercisePromptCardProps, Activity, Grade, Topic, Subtopic as SubTopic } from './types';\r\n-import { QuestionForm } from './components/question-form';\r\n-import { ExercisePromptCard } from './components/exercise-prompt-card';\r\n-import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\r\n-import { supabase } from '@/lib/supabase';\r\n-import { useContentStore } from '@/lib/content/store';\r\n-import { contentService } from '@/lib/content/ContentService';\r\n-import { MediaPreview } from '@/components/ui/media-preview';\r\n-import { QuestionTypeSelect } from './components/question-type-select';\r\n-import { RichTextEditor } from '@/components/ui/rich-text-editor';\r\n-import {\r\n-  AlertDialog,\r\n-  AlertDialogAction,\r\n-  AlertDialogCancel,\r\n-  AlertDialogContent,\r\n-  AlertDialogDescription,\r\n-  AlertDialogFooter,\r\n-  AlertDialogHeader,\r\n-  AlertDialogTitle,\r\n-  AlertDialogTrigger,\r\n-} from \"@/components/ui/alert-dialog\";\r\n-import { debounce, isNull } from 'lodash';\r\n-import { PostgrestError } from '@supabase/supabase-js';\r\n-import { Question as ContentQuestion } from './types';  // Import the specific type\r\n-import { Trash } from \"lucide-react\";\r\n-import { AnimatePresence, motion } from 'framer-motion';\r\n-\r\n-\r\n-// Update the API endpoint to match your backend route\r\n-const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\r\n-\r\n-interface QuestionTypeSelectProps {\r\n-  value: string;\r\n-  onValueChange: (value: string) => void;\r\n-}\r\n-\r\n-// Add metadata type\r\n-interface LessonMetadata {\r\n-  lastEdited?: string;\r\n-  version?: number;\r\n-  tags?: string[];\r\n-  status?: 'draft' | 'published';\r\n-  authorId?: string;\r\n-  duration?: number;\r\n-  transcript?: string;\r\n-}\r\n-\r\n-type ContentType = 'html' | 'markdown' | 'rich-text' | 'text' | 'json';\r\n-\r\n-interface LessonContent {\r\n-  id: string;\r\n-  lesson_id: string;\r\n-  content: any[];\r\n-  metadata: {\r\n-    lastEdited?: string;\r\n-    version?: number;\r\n-    status?: 'draft' | 'published';\r\n-    authorId?: string;\r\n-  };\r\n-  content_type: string;\r\n-  order_index: number;\r\n-  updated_at: string;\r\n-  user_id: string;\r\n-}\r\n-\r\n-interface InlineEditProps {\r\n-  value: string;\r\n-  onSave: (value: string) => void;\r\n-  isEditing: boolean;\r\n-  setIsEditing: (value: boolean) => void;\r\n-  placeholder?: string;\r\n-  className?: string;\r\n-}\r\n-\r\n-// Add validation interface\r\n-interface QuestionValidation {\r\n-  isValid: boolean;\r\n-  message: string;\r\n-}\r\n-\r\n-// Add this type validation helper\r\n-const getQuestionTypeFields = (type: string) => {\r\n-  switch (type) {\r\n-    case 'multipleChoice':\r\n-      return {\r\n-        required: ['prompt', 'options', 'correctAnswer'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          options: [],\r\n-          correctAnswer: '',\r\n-          teacherScript: '',\r\n-          explanation: ''\r\n-        }\r\n-      };\r\n-    case 'fillInBlank':\r\n-      return {\r\n-        required: ['prompt', 'blanks'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          blanks: [],\r\n-          teacherScript: '',\r\n-          explanation: ''\r\n-        }\r\n-      };\r\n-    case 'trueFalse':\r\n-      return {\r\n-        required: ['prompt', 'correctAnswer'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          correctAnswer: null,\r\n-          teacherScript: '',\r\n-          explanation: ''\r\n-        }\r\n-      };\r\n-    case 'matching':\r\n-      return {\r\n-        required: ['prompt', 'pairs'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          pairs: [],\r\n-          teacherScript: '',\r\n-          explanation: ''\r\n-        }\r\n-      };\r\n-    case 'ordering':\r\n-      return {\r\n-        required: ['prompt', 'items'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          items: [],\r\n-          correctOrder: [],\r\n-          teacherScript: '',\r\n-          explanation: ''\r\n-        }\r\n-      };\r\n-    case 'shortAnswer':\r\n-      return {\r\n-        required: ['prompt', 'sampleAnswer'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          sampleAnswer: '',\r\n-          teacherScript: '',\r\n-          explanation: '',\r\n-          keywords: []\r\n-        }\r\n-      };\r\n-    case 'speaking':\r\n-      return {\r\n-        required: ['prompt', 'sampleAnswer'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          sampleAnswer: '',\r\n-          teacherScript: '',\r\n-          audioPrompt: '',\r\n-          pronunciation: ''\r\n-        }\r\n-      };\r\n-    case 'listening':\r\n-      return {\r\n-        required: ['prompt', 'audioContent'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          audioContent: '',\r\n-          transcript: '',\r\n-          teacherScript: '',\r\n-          comprehensionQuestions: []\r\n-        }\r\n-      };\r\n-    case 'listenAndRepeat':\r\n-      return {\r\n-        required: ['prompt', 'audioContent'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          audioContent: '',\r\n-          targetPhrase: '',\r\n-          teacherScript: '',\r\n-          pronunciation: ''\r\n-        }\r\n-      };\r\n-    default:\r\n-      return {\r\n-        required: ['prompt'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          teacherScript: ''\r\n-        }\r\n-      };\r\n-  }\r\n-}\r\n-\r\n-interface SaveStatus {\r\n-  id: string;\r\n-  status: 'draft' | 'saved' | 'saving' | 'error';\r\n-  lastSaved?: string;\r\n-}\r\n-\r\n-interface Question {\r\n-  id: string;\r\n-  type: string;\r\n-  lesson_id: string;\r\n-  title: string;\r\n-  content: string;\r\n-  metadata: Record<string, any>;\r\n-  data: Record<string, any>; // This allows dynamic field access\r\n-  correct_answer: string;\r\n-  exercisePrompts: ExercisePrompt[];\r\n-  isDraft?: boolean;\r\n-}\r\n-\r\n-// Add at the top of the file with other type definitions\r\n-type QuestionType = keyof typeof QUESTION_TYPES;\r\n-\r\n-// Add this type guard function\r\n-const isValidQuestionType = (type: string): type is QuestionType => {\r\n-  return type in QUESTION_TYPES;\r\n-};\r\n-\r\n-// Update handleAddQuestion\r\n-\r\n-\r\n-// Update validateQuestion\r\n-const validateQuestion = (question: Question): QuestionValidation => {\r\n-  const { required } = getQuestionTypeFields(question.type);\r\n-  const missingFields = required.filter(field => {\r\n-    const value = question.data?.[field];\r\n-    return !value || \r\n-      (Array.isArray(value) && value.length === 0) || \r\n-      (typeof value === 'string' && !value.trim());\r\n-  });\r\n-\r\n-  if (missingFields.length > 0) {\r\n-    return {\r\n-      isValid: false,\r\n-      message: `Missing required fields: ${missingFields.join(', ')}`\r\n-    };\r\n-  }\r\n-\r\n-  return { isValid: true, message: '' };\r\n-};\r\n-\r\n-// Add proper type for question data\r\n-interface QuestionData {\r\n-  id?: string;\r\n-  content?: string;\r\n-  type?: string;\r\n-  data?: {\r\n-    prompt?: string;\r\n-    teacher_script?: string;\r\n-    followup_prompt?: string[];\r\n-    sample_answer?: string;\r\n-    answer?: string;\r\n-  } | null;\r\n-  prompt: string;\r\n-  teacherScript: string;\r\n-  followup_prompt: string[];\r\n-  answer?: string;\r\n-  correct_answer?: string;\r\n-}\r\n-\r\n-// In your component where you handle questions\r\n-const handleQuestionData = (question: QuestionData) => {\r\n-  return {\r\n-    ...question,\r\n-    data: {\r\n-      prompt: question?.data?.prompt || '',\r\n-      teacher_script: question?.data?.teacher_script || '',\r\n-      followup_prompt: question?.data?.followup_prompt || [],\r\n-      sample_answer: question?.data?.sample_answer || undefined,  // Convert null to undefined\r\n-      answer: question?.data?.answer || undefined  // Convert null to undefined\r\n-    } as const,\r\n-    sampleAnswer: question?.correct_answer || ''\r\n-  };\r\n-};\r\n-\r\n-export default function LessonManagementPage() {\r\n-  // State declarations\r\n-  \r\n-  const [selectedGradeId, setSelectedGradeId] = useState<string | null>(null);\r\n-  const [selectedTopicId, setSelectedTopicId] = useState<string | null>(null);\r\n-  const [selectedSubtopicId, setSelectedSubtopicId] = useState<string | null>(null);\r\n-  const [lessonTitle, setLessonTitle] = useState<string>('');\r\n-  const [currentLessonId, setCurrentLessonId] = useState<string | null>(null);\r\n-  const [questions, setQuestions] = useState<Question[]>([]);\r\n-  const [saveProgress, setSaveProgress] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');\r\n-  const [activities, setActivities] = useState<Activity[]>([]);\r\n-  const [localBuffer, setLocalBuffer] = useState<{ timestamp: number; data: any } | null>(null);\r\n-  const [lastSavedToServer, setLastSavedToServer] = useState<number>(Date.now());\r\n-  const [selectedQuestionType, setSelectedQuestionType] = useState<string>('');\r\n-  const [editingQuestionIndex, setEditingQuestionIndex] = useState<number | null>(null);\r\n-  const [showHelpTips, setShowHelpTips] = useState(true);\r\n-  const [isNavigating, setIsNavigating] = useState(false);\r\n-  const [lessons, setLessons] = useState<Lesson[]>([]);\r\n-  const [grades, setGrades] = useState<Grade[]>([]);\r\n-  const [topics, setTopics] = useState<Topic[]>([]);\r\n-  const [subtopics, setSubtopics] = useState<SubTopic[]>([]);\r\n-  const [contentHeading, setContentHeading] = useState<string>('');\r\n-    // Add with your other state declarations\r\n-  const [isContentExpanded, setIsContentExpanded] = useState<boolean>(false);\r\n-  const [modalState, setModalState] = useState({\r\n-    showAddGrade: false,\r\n-    showAddTopic: false,\r\n-    showAddSubtopic: false,\r\n-    showAddLesson: false\r\n-  });\r\n-  const [isViewMode, setIsViewMode] = useState<boolean>(true);\r\n-  const [expandedGrade, setExpandedGrade] = useState<string | null>(null);\r\n-  const [expandedTopic, setExpandedTopic] = useState<string | null>(null);\r\n-  const [expandedSubtopic, setExpandedSubtopic] = useState<string | null>(null);\r\n-  const [expandedQuestion, setExpandedQuestion] = useState<number | null>(null);\r\n-  const [expandedActivity, setExpandedActivity] = useState<number | null>(null);\r\n-  const [newItemData, setNewItemData] = useState({\r\n-    name: '',\r\n-    description: ''\r\n-  });\r\n-  const [lessonContent, setLessonContent] = useState<string>('');\r\n-  const [isContentEditorOpen, setIsContentEditorOpen] = useState(false);\r\n-  const [isEditingTitle, setIsEditingTitle] = useState<boolean>(false);\r\n-  const [isEditingHeading, setIsEditingHeading] = useState<boolean>(false);\r\n-  const [isEditingDescription, setIsEditingDescription] = useState<boolean>(false);\r\n-  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\r\n-  const [isSidebarLocked, setIsSidebarLocked] = useState(true);\r\n-  const [alertDialogState, setAlertDialogState] = useState<{\r\n-    isOpen: boolean;\r\n-    title: string;\r\n-    message: string;\r\n-    onConfirm: (value?: unknown) => void;\r\n-  }>({\r\n-    isOpen: false,\r\n-    title: '',\r\n-    message: '',\r\n-    onConfirm: () => {}\r\n-  });\r\n-\r\n-  const { \r\n-    selectedGrade,\r\n-    setSelectedGrade,\r\n-    selectedTopic,\r\n-    setSelectedTopic,\r\n-    selectedSubtopic,\r\n-    setSelectedSubtopic,\r\n-    selectedLesson,\r\n-    setSelectedLesson\r\n-  } = useContentStore();\r\n-\r\n-  // Add new state for tracking save status\r\n-  interface SaveStatus {\r\n-    id: string;\r\n-    status: 'draft' | 'saved' | 'saving' | 'error' | 'draft';\r\n-    lastSaved?: string;\r\n-  }\r\n-\r\n-  const [questionSaveStatuses, setQuestionSaveStatuses] = useState<Array<{\r\n-    id: string;\r\n-    status: 'idle' | 'saving' | 'saved' | 'error' | 'draft';\r\n-  }>>([]);\r\n-  const [promptSaveStatuses, setPromptSaveStatuses] = useState<SaveStatus[]>([]);\r\n-\r\n-  // Add this state to track dropdown state\r\n-  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n-\r\n-  // Add these states\r\n-  const [isLoadingSubtopics, setIsLoadingSubtopics] = useState(false);\r\n-  const [isLoadingLessons, setIsLoadingLessons] = useState(false);\r\n-\r\n-  // Event handlers\r\n-  const handleQuestionTypeChange = useCallback((type: string) => {\r\n-    if (isQuestionType(type)) {\r\n-      setSelectedQuestionType(type);\r\n-    }\r\n-  }, []);\r\n-\r\n-  const handleAddQuestion = useCallback(() => {\r\n-    if (!selectedQuestionType || !isQuestionType(selectedQuestionType)) return;\r\n-\r\n-    const defaultData = QUESTION_TYPES[selectedQuestionType].defaultData;\r\n-    const newQuestion: Question = {\r\n-      id: crypto.randomUUID(),\r\n-      type: selectedQuestionType,\r\n-      //data: {},\r\n-      title: 'New Question',\r\n-      content: '',\r\n-      lesson_id: currentLessonId || '',\r\n-      metadata: {},\r\n-      data: {\r\n-        ...defaultData,\r\n-        prompt: '',\r\n-        teacher_script: '',\r\n-        followup_prompt: [],\r\n-        sample_answer: ''\r\n-      },\r\n-      correct_answer: '',\r\n-      exercisePrompts: [],\r\n-      isDraft: true\r\n-    };\r\n-\r\n-    setQuestions(prev => [...prev, newQuestion]);\r\n-    setQuestionSaveStatuses(prev => [\r\n-      ...prev,\r\n-      { id: newQuestion.id, status: 'draft' }\r\n-    ]);\r\n-    setSelectedQuestionType('');\r\n-  }, [selectedQuestionType, currentLessonId]);\r\n-\r\n-  const handleRemoveQuestion = async (index: number) => {\r\n-    try {\r\n-      const questionToDelete = questions[index];\r\n-      \r\n-      // Delete related exercise prompts first\r\n-      const { error: promptError } = await supabase\r\n-        .from('exercise_prompts')\r\n-        .delete()\r\n-        .eq('question_id', questionToDelete.id);\r\n-\r\n-      if (promptError) throw promptError;\r\n-\r\n-      // Then delete the question\r\n-      const { error: questionError } = await supabase\r\n-        .from('questions')\r\n-        .delete()\r\n-        .eq('id', questionToDelete.id);\r\n-\r\n-      if (questionError) throw questionError;\r\n-\r\n-      // Update local state\r\n-      const newQuestions = questions.filter((_, i) => i !== index);\r\n-      setQuestions(newQuestions);\r\n-      \r\n-      toast.success('Question and related prompts deleted successfully');\r\n-    } catch (error) {\r\n-      console.error('Error deleting question:', error);\r\n-      toast.error('Failed to delete question and prompts');\r\n-    }\r\n-  };\r\n-\r\n-  const handleUpdateQuestion = useCallback(async (index: number, updatedQuestion: Question) => {\r\n-    const newQuestions = [...questions];\r\n-    newQuestions[index] = updatedQuestion;\r\n-    setQuestions(newQuestions);\r\n-    setQuestionSaveStatuses(prev => prev.map((status, i) => \r\n-      i === index ? { ...status, status: 'draft' } : status\r\n-    ));\r\n-  }, [questions]);\r\n-\r\n-  const handleAddExercisePrompt = useCallback((questionIndex: number) => {\r\n-    setQuestions(prev => prev.map((question, i) => {\r\n-      if (i === questionIndex) {\r\n-        return {\r\n-          ...question,\r\n-          exercisePrompts: [\r\n-            ...question.exercisePrompts,\r\n-            {\r\n-              id: crypto.randomUUID(),\r\n-              text: '',\r\n-              media: '',\r\n-              type: 'image',\r\n-              narration: 'Your turn',\r\n-              saytext: 'Say: ',\r\n-              metadata: {\r\n-                estimatedTime: 0\r\n-              },\r\n-              created_at: new Date().toISOString(),\r\n-              updated_at: new Date().toISOString()\r\n-            }\r\n-          ]\r\n-        };\r\n-      }\r\n-      return question;\r\n-    }));\r\n-  }, []);\r\n-\r\n-  const handleRemoveExercisePrompt = useCallback((questionIndex: number, promptIndex: number) => {\r\n-    setQuestions(prev => prev.map((question, i) => {\r\n-      if (i === questionIndex) {\r\n-        return {\r\n-          ...question,\r\n-          exercisePrompts: question.exercisePrompts.filter((_, j) => j !== promptIndex)\r\n-        };\r\n-      }\r\n-      return question;\r\n-    }));\r\n-  }, []);\r\n-\r\n-  const handleExercisePromptChange = useCallback(async (\r\n-    questionIndex: number,\r\n-    promptIndex: number,\r\n-    updatedPrompt: ExercisePrompt\r\n-  ) => {\r\n-    try {\r\n-      const promptUpdate = {\r\n-        id: updatedPrompt.id,\r\n-        question_id: updatedPrompt.question_id,\r\n-        text: updatedPrompt.text,\r\n-        type: updatedPrompt.type,\r\n-        narration: updatedPrompt.narration,\r\n-        saytext: updatedPrompt.saytext,\r\n-        media: updatedPrompt.media,\r\n-        // Remove order_index as it's not in schema\r\n-        created_at: new Date().toISOString()\r\n-      };\r\n-\r\n-      const { error: promptError } = await supabase\r\n-        .from('exercise_prompts')\r\n-        .upsert(promptUpdate)\r\n-        .select();\r\n-\r\n-      if (promptError) throw promptError;\r\n-\r\n-      // Update local state\r\n-      setQuestions(prev => prev.map((question, i) => {\r\n-        if (i === questionIndex) {\r\n-          const newPrompts = [...question.exercisePrompts];\r\n-          newPrompts[promptIndex] = updatedPrompt;\r\n-          return { ...question, exercisePrompts: newPrompts };\r\n-        }\r\n-        return question;\r\n-      }));\r\n-\r\n-    } catch (error) {\r\n-      console.error('Error saving prompt:', error);\r\n-      toast.error('Failed to save prompt');\r\n-    }\r\n-  }, []);\r\n-\r\n-  const handleAddActivity = useCallback(() => {\r\n-    const newActivity: Activity = {\r\n-      id: crypto.randomUUID(),\r\n-      lesson_id: currentLessonId || '',\r\n-      created_at: new Date().toISOString(),\r\n-      type: 'practice',\r\n-      title: '',\r\n-      name: '',\r\n-      instructions: '',\r\n-      media: [],\r\n-      data: {\r\n-        prompt: '',\r\n-        teacherScript: '',\r\n-        media: []\r\n-      }\r\n-    };\r\n-    setActivities(prev => [...prev, newActivity]);\r\n-  }, [currentLessonId]);\r\n-\r\n-  const handleUpdateActivity = useCallback((index: number, updatedActivity: Activity) => {\r\n-    setActivities(prev => prev.map((activity, i) => i === index ? updatedActivity : activity));\r\n-  }, []);\r\n-\r\n-  const handleRemoveActivity = useCallback((index: number) => {\r\n-    setActivities(prev => prev.filter((_, i) => i !== index));\r\n-  }, []);\r\n-\r\n-  const handleExercisePromptUpdate = useCallback((questionIndex: number, promptIndex: number, updatedPrompt: ExercisePrompt) => {\r\n-    const updatedQuestions = [...questions];\r\n-    updatedQuestions[questionIndex].exercisePrompts[promptIndex] = updatedPrompt;\r\n-    handleUpdateQuestion(questionIndex, updatedQuestions[questionIndex]);\r\n-  }, [questions, handleUpdateQuestion]);\r\n-\r\n-  const handleQuestionDataChange = useCallback((questionIndex: number, field: string, value: string) => {\r\n-    setQuestions(prev => prev.map((q, i) => \r\n-      i === questionIndex \r\n-        ? { \r\n-            ...q, \r\n-            data: { \r\n-              prompt: q.data?.prompt || '',\r\n-              teacherScript: q.data?.teacherScript || '',\r\n-              ...q.data,\r\n-              [field]: value \r\n-            } \r\n-          }\r\n-        : q\r\n-    ));\r\n-  }, []);\r\n-\r\n-  const [isSaving, setIsSaving] = useState(false);\r\n-\r\n-  const handleSaveLesson = async () => {\r\n-    try {\r\n-      if (!currentLessonId || !selectedSubtopicId) {\r\n-        toast.error('Please select a subtopic and lesson first');\r\n-        return;\r\n-      }\r\n-\r\n-      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\r\n-      if (sessionError) throw sessionError;\r\n-      \r\n-      if (!session?.user) {\r\n-        toast.error('Please sign in to save lessons');\r\n-        return;\r\n-      }\r\n-\r\n-      // Get user's role from session\r\n-      const userRole = session.user.user_metadata?.role;\r\n-      console.log('Current user role:', userRole);\r\n-      console.log('📝 Saving content heading:', {\r\n-        contentHeading,\r\n-        currentLessonId,\r\n-        selectedSubtopicId,\r\n-        timestamp: new Date().toISOString()\r\n-      });\r\n-\r\n-      // Create metadata object\r\n-      const lessonMetadata = {\r\n-        lastEdited: new Date().toISOString(),\r\n-        version: 1,\r\n-        status: 'draft' \r\n-      };\r\n-\r\n-      // Complete lesson data with all fields\r\n-      const lessonData = {\r\n-        id: currentLessonId,\r\n-        title: lessonTitle,\r\n-        content: lessonContent,\r\n-        metadata: lessonMetadata, // Supabase will automatically handle JSON conversion\r\n-        content_type: 'html',\r\n-        lesson_type: 'lesson',\r\n-        grade_id: selectedGradeId,\r\n-        topic_id: selectedTopicId,\r\n-        subtopic_id: selectedSubtopicId,\r\n-        user_id: session.user.id,\r\n-        updated_at: new Date().toISOString(),\r\n-        role: userRole, // Include role in the payload\r\n-        description: '',\r\n-        prerequisites: [],\r\n-        media_type: 'image',\r\n-        media_url: '',\r\n-        contentheading: contentHeading || ''\r\n-      };\r\n-\r\n-      console.log('📦 Data being sent to Supabase:', lessonData);\r\n-\r\n-      // Save lesson with all fields\r\n-      const { data, error: lessonError } = await supabase\r\n-        .from('lessons')\r\n-        .upsert(lessonData, { \r\n-          onConflict: 'id'\r\n-        })\r\n-        .select();\r\n-\r\n-      if (lessonError) throw lessonError;\r\n-\r\n-      // 2. Save lesson content\r\n-      const { data: existingContent } = await supabase\r\n-        .from('lesson_content')\r\n-        .select('id')\r\n-        .eq('lesson_id', currentLessonId)\r\n-        .single();\r\n-\r\n-      const contentMetadata = {\r\n-        lastEdited: new Date().toISOString(),\r\n-        version: 1,\r\n-        status: 'draft'\r\n-      };\r\n-\r\n-      const contentUpdate = {\r\n-        id: existingContent?.id || crypto.randomUUID(),\r\n-        lesson_id: currentLessonId,\r\n-        content: [lessonContent],\r\n-        metadata: contentMetadata, // Supabase will automatically handle JSON conversion\r\n-        content_type: 'html',\r\n-        user_id: session.user.id,\r\n-        updated_at: new Date().toISOString(),\r\n-        created_at: new Date().toISOString()\r\n-      };\r\n-\r\n-      const { error: contentError } = await supabase\r\n-        .from('lesson_content')\r\n-        .upsert(contentUpdate, { onConflict: 'id' });\r\n-\r\n-      if (contentError) throw contentError;\r\n-\r\n-      // 3. Save questions\r\n-      for (const question of questions) {\r\n-        const questionData = {\r\n-          id: question.id,\r\n-          lesson_id: currentLessonId,\r\n-          type: question.type,\r\n-          title: question.title,\r\n-          metadata: question.metadata,\r\n-          data: question.data,\r\n-          updated_at: new Date().toISOString(),\r\n-          user_id: session.user.id\r\n-        };\r\n-\r\n-        const { error: questionError } = await supabase\r\n-          .from('questions')\r\n-          .upsert(questionData, { onConflict: 'id' });\r\n-\r\n-        if (questionError) throw questionError;\r\n-\r\n-        //4. Save exercise prompts for this question\r\n-        if (question.exercisePrompts) {\r\n-          for (const prompt of question.exercisePrompts) {\r\n-            const promptData = {\r\n-              id: prompt.id,\r\n-              question_id: question.id,\r\n-              text: prompt.text,\r\n-              media: prompt.media,\r\n-              type: prompt.type,\r\n-              narration: prompt.narration,\r\n-              saytext: prompt.saytext,\r\n-              user_id: session.user.id,\r\n-              updated_at: new Date().toISOString()\r\n-            };\r\n-\r\n-            const { error: promptError } = await supabase\r\n-              .from('exercise_prompts')\r\n-              .upsert(promptData, { onConflict: 'id' });\r\n-\r\n-            if (promptError) throw promptError;\r\n-          }\r\n-        }\r\n-      }\r\n-\r\n-      // 5. Save activities\r\n-      if (activities.length > 0) {\r\n-        const activitiesData = activities.map(activity => ({\r\n-          id: activity.id,\r\n-          lesson_id: currentLessonId,\r\n-          type: activity.type,\r\n-          title: activity.title,\r\n-          name: activity.name,\r\n-          instructions: activity.instructions,\r\n-          media: activity.media,\r\n-          data: activity.data,\r\n-          created_at: new Date().toISOString()\r\n-        }));\r\n-\r\n-        const { error: activitiesError } = await supabase\r\n-          .from('activities')\r\n-          .upsert(activitiesData, { onConflict: 'id' });\r\n-\r\n-        if (activitiesError) throw activitiesError;\r\n-      }\r\n-\r\n-      // After successful save\r\n-      console.log('✅ Content heading saved successfully:', {\r\n-        contentHeading,\r\n-        lessonId: currentLessonId,\r\n-        timestamp: new Date().toISOString()\r\n-      });\r\n-\r\n-      toast.success('Lesson saved successfully');\r\n-    } catch (err) {\r\n-      const error = err as PostgrestError;\r\n-      console.error('❌ Error saving content heading:', {\r\n-        error: error.message,\r\n-        contentHeading,\r\n-        lessonContent,\r\n-        lessonId: currentLessonId,\r\n-        timestamp: new Date().toISOString()\r\n-      });\r\n-      toast.error(`Failed to save lesson: ${error.message}`);\r\n-\r\n-\r\n-    }\r\n-  };\r\n-\r\n-  const handleSaveQuestion = async (question: Question, index: number) => {\r\n-    const loadingToast = toast.loading(`Saving question ${index + 1}...`);\r\n-    \r\n-    try {\r\n-      const { data: { session } } = await supabase.auth.getSession();\r\n-      if (!session?.user) {\r\n-        toast.error('Please sign in to save question', { id: loadingToast });\r\n-        return;\r\n-      }\r\n-\r\n-      // Save question\r\n-      const questionData = {\r\n-        id: question.id,\r\n-        lesson_id: currentLessonId,\r\n-        type: question.type,\r\n-        title: question.title,\r\n-        metadata: question.metadata,\r\n-        data: {\r\n-          prompt: question.data?.prompt ?? '',\r\n-          teacherScript: question.data?.teacherScript ?? '',\r\n-          followup_prompt: question.data?.followup_prompt ?? [],\r\n-          sampleAnswer: question.data?.sampleAnswer || undefined,  // Convert null to undefined\r\n-          answer: question.data?.answer || undefined  // Convert null to undefined\r\n-        } as const,\r\n-        user_id: session.user.id,\r\n-        updated_at: new Date().toISOString()\r\n-      };\r\n-\r\n-      const { error: questionError } = await supabase\r\n-        .from('questions')\r\n-        .upsert(questionData, { onConflict: 'id' });\r\n-\r\n-      if (questionError) throw questionError;\r\n-\r\n-      // Save exercise prompts if they exist\r\n-      if (question.exercisePrompts?.length) {\r\n-        for (const prompt of question.exercisePrompts) {\r\n-          const promptData = {\r\n-            id: prompt.id,\r\n-            question_id: question.id,\r\n-            text: prompt.text,\r\n-            type: prompt.type,\r\n-            narration: prompt.narration,\r\n-            saytext: prompt.saytext,\r\n-            media: prompt.media,\r\n-            user_id: session.user.id,\r\n-            updated_at: new Date().toISOString()\r\n-          };\r\n-\r\n-          const { error: promptError } = await supabase\r\n-            .from('exercise_prompts')\r\n-            .upsert(promptData, { onConflict: 'id' });\r\n-\r\n-          if (promptError) throw promptError;\r\n-        }\r\n-      }\r\n-\r\n-      toast.success(`Question ${index + 1} saved successfully`, { id: loadingToast });\r\n-    } catch (error) {\r\n-      console.error('Error saving question:', error);\r\n-      toast.error(`Failed to save question ${index + 1}`, { id: loadingToast });\r\n-    }\r\n-  };\r\n-\r\n-  const handleSaveActivity = async (activity: Activity) => {\r\n-    try {\r\n-      await contentService.saveActivity(activity);\r\n-      toast.success('Activity saved');\r\n-    } catch (error) {\r\n-      console.error('Failed to save activity:', error);\r\n-      toast.error('Failed to save activity');\r\n-    }\r\n-  };\r\n-\r\n-  // Effects\r\n-  useEffect(() => {\r\n-    const fetchGrades = async () => {\r\n-      try {\r\n-        const { data, error } = await supabase\r\n-          .from('grades')\r\n-          .select('*')\r\n-          .order('name');\r\n-\r\n-        if (error) {\r\n-          console.error('Supabase error:', error);\r\n-          throw error;\r\n-        }\r\n-\r\n-        if (!data) {\r\n-          throw new Error('No data returned from Supabase');\r\n-        }\r\n-\r\n-        // Map the grades to match your interface\r\n-        const validGrades = data.map((grade: any) => ({\r\n-          _id: grade.id,\r\n-          id: grade.id,\r\n-          name: grade.name,\r\n-          level: grade.level || 0,  // Add default value if not provided\r\n-          orderIndex: grade.order_index || 0,  // Add default value if not provided\r\n-          topics: []\r\n-        }));\r\n-        \r\n-        setGrades(validGrades);\r\n-      } catch (error) {\r\n-        console.error('Error fetching grades:', error);\r\n-        toast.error('Failed to fetch grades');\r\n-      }\r\n-    };\r\n-\r\n-    fetchGrades();\r\n-  }, []);\r\n-\r\n-  // Topic Selection\r\n-  useEffect(() => {\r\n-    const fetchTopics = async () => {\r\n-      if (!selectedGradeId) return;\r\n-      \r\n-      try {\r\n-        const { data, error } = await supabase\r\n-          .from('topics')\r\n-          .select('*')\r\n-          .eq('grade_id', selectedGradeId)\r\n-          .order('title');\r\n-\r\n-        if (error) {\r\n-          throw error;\r\n-        }\r\n-\r\n-        // Map the topics to match your interface\r\n-        const validTopics = (data || []).map((topic: any) => ({\r\n-          _id: topic.id,\r\n-          id: topic.id,\r\n-          name: topic.title,\r\n-          title: topic.title,\r\n-          grade_id: topic.grade_id,\r\n-          subtopics: []\r\n-        }));\r\n-        \r\n-        setTopics(validTopics);\r\n-      } catch (error) {\r\n-        console.error('Error fetching topics:', error);\r\n-        toast.error('Failed to fetch topics');\r\n-      }\r\n-    };\r\n-\r\n-    fetchTopics();\r\n-  }, [selectedGradeId]);\r\n-\r\n-  // Subtopic Selection\r\n-  useEffect(() => {\r\n-    const fetchSubtopics = async () => {\r\n-      if (!selectedTopicId) return;\r\n-      \r\n-      try {\r\n-        // Use content service to fetch subtopics\r\n-        const subtopicsData = await contentService.fetchSubtopics(selectedTopicId);\r\n-        console.log('Fetched subtopics:', subtopicsData);\r\n-\r\n-        const validSubtopics = subtopicsData.map((subtopic: any) => ({\r\n-          id: subtopic.id,\r\n-          title: subtopic.title,\r\n-          description: subtopic.description,\r\n-          topic_id: subtopic.topic_id,\r\n-          lessons: [],\r\n-          order_index: subtopicsData.length\r\n-        }));\r\n-        \r\n-        setSubtopics(validSubtopics);\r\n-        \r\n-        // Update global state\r\n-        if (selectedSubtopic) {\r\n-          setSelectedSubtopic(selectedSubtopic);\r\n-        }\r\n-      } catch (err) {\r\n-        const error = err as Error;\r\n-        console.error('Error fetching subtopics:', error);\r\n-        toast.error('Failed to fetch subtopics');\r\n-      }\r\n-    };\r\n-\r\n-    fetchSubtopics();\r\n-  }, [selectedTopicId, selectedSubtopic, setSelectedSubtopic]);\r\n-\r\n-  // Add effect to monitor subtopics state\r\n-  useEffect(() => {\r\n-    console.log('Current subtopics state:', subtopics);\r\n-  }, [subtopics]);\r\n-\r\n-  // Add fetchLessons function\r\n-  const fetchLessons = useCallback(async () => {\r\n-    if (!selectedSubtopicId) return;\r\n-    try {\r\n-      const { data, error } = await supabase\r\n-        .from('lessons')\r\n-        .select('*')\r\n-        .eq('subtopic_id', selectedSubtopicId)\r\n-        .order('title');\r\n-\r\n-      if (error) {\r\n-        throw error;\r\n-      }\r\n-      \r\n-      // Map the lessons to ensure they have _id\r\n-      const validLessons = (data || []).map((lesson: any) => ({\r\n-        ...lesson,\r\n-        _id: lesson._id || lesson.id, // Use _id if available, otherwise use id\r\n-        title: lesson.title || 'Untitled Lesson'\r\n-      })).filter((lesson: any) => lesson._id); // Only include lessons with valid IDs\r\n-      \r\n-      setLessons(validLessons);\r\n-    } catch (error) {\r\n-      console.error('Error fetching lessons:', error);\r\n-      toast.error('Failed to fetch lessons');\r\n-    }\r\n-  }, [selectedSubtopicId]);\r\n-  // Add loadLessonContent function\r\n-  const isLoading = useRef(false);\r\n-  const loadLessonContent = useCallback(async (lessonId: string) => {\r\n-    // Prevent multiple simultaneous loads\r\n-    if (isLoading.current) return;\r\n-    isLoading.current = true;\r\n-\r\n-    const controller = new AbortController();\r\n-\r\n-    try {\r\n-      // Clear existing content first\r\n-      setLessonTitle('');\r\n-      setContentHeading('');\r\n-      setLessonContent('');\r\n-      setQuestions([]);\r\n-      \r\n-      // First fetch lesson data\r\n-      const { data: lessonData, error: lessonError } = await supabase\r\n-        .from('lessons')\r\n-        .select('*')\r\n-        .eq('id', lessonId)\r\n-        .single()\r\n-        \r\n-\r\n-      if (lessonError) {\r\n-        console.error('Lesson fetch error:', lessonError);\r\n-        throw lessonError;\r\n-      }\r\n-\r\n-      // Set lesson data\r\n-      setLessonTitle(lessonData.title || '');\r\n-      setContentHeading(lessonData.content || '');\r\n-\r\n-      // Then fetch lesson content with explicit headers\r\n-      const { data: contentData, error: contentError } = await supabase\r\n-        .from('lesson_content')\r\n-        .select('*')\r\n-        .eq('lesson_id', lessonId)\r\n-        .order('updated_at', { ascending: false })\r\n-        .limit(1)\r\n-        .maybeSingle();\r\n-\r\n-      if (contentError) {\r\n-        console.error('Content fetch error:', contentError);\r\n-        throw contentError;\r\n-      }\r\n-\r\n-      // Set content if available\r\n-      if (contentData?.content) {\r\n-        setLessonContent(typeof contentData.content === 'string' \r\n-          ? contentData.content \r\n-          : JSON.stringify(contentData.content)\r\n-        );\r\n-      }\r\n-\r\n-    } catch (error: unknown) {\r\n-      if (error instanceof Error && error.name === 'AbortError') {\r\n-        console.log('Request aborted');\r\n-        return;\r\n-      }\r\n-      console.error('Error loading lesson:', error);\r\n-      toast.error('Failed to load lesson content');\r\n-      \r\n-      // Reset states on error\r\n-      setLessonTitle('');\r\n-      setContentHeading('');\r\n-      setLessonContent('');\r\n-      setQuestions([]);\r\n-    } finally {\r\n-      isLoading.current = false;\r\n-    }\r\n-\r\n-    return () => {\r\n-      controller.abort();\r\n-    };\r\n-  }, []); // Empty dependencies since we're using closure over state setters\r\n-\r\n-  // // Add effect for fetching lessons when subtopic changes\r\n-  useEffect(() => {\r\n-    if (selectedSubtopicId) {\r\n-      fetchLessons();\r\n-    }\r\n-  }, [selectedSubtopicId, fetchLessons]);\r\n-\r\n-  // Add effect for loading lesson content when currentLessonId changes\r\n-    useEffect(() => {\r\n-    let isMounted = true;\r\n-    let timeoutId: NodeJS.Timeout;\r\n-\r\n-    const loadContent = async () => {\r\n-      if (!currentLessonId || !isMounted) return;\r\n-\r\n-      // Clear previous timeout if exists\r\n-      if (timeoutId) clearTimeout(timeoutId);\r\n-\r\n-      // Set new timeout for debouncing\r\n-      timeoutId = setTimeout(() => {\r\n-        if (isMounted) {\r\n-          loadLessonContent(currentLessonId);\r\n-        }\r\n-      }, 300);\r\n-    };\r\n-\r\n-    loadContent();\r\n-\r\n-    // Cleanup function\r\n-    return () => {\r\n-      isMounted = false;\r\n-      if (timeoutId) clearTimeout(timeoutId);\r\n-      if (isLoading.current) isLoading.current = false;\r\n-    };\r\n-  }, [currentLessonId]); // Remove loadLessonContent from dependencies\r\n-\r\n-  useEffect(() => {\r\n-    console.log('Current lessons state:', lessons);\r\n-  }, [lessons]);\r\n-\r\n-    // Add keyboard shortcut for saving\r\n-  useEffect(() => {\r\n-    const handleKeyDown = (e: KeyboardEvent) => {\r\n-      if ((e.ctrlKey || e.metaKey) && e.key === 's') {\r\n-        e.preventDefault();\r\n-        handleSaveLesson();\r\n-      }\r\n-    };\r\n-\r\n-    window.addEventListener('keydown', handleKeyDown);\r\n-    return () => window.removeEventListener('keydown', handleKeyDown);\r\n-  }, [handleSaveLesson]);\r\n-\r\n-  // Add SaveFeedback component\r\n-  const SaveFeedback = useCallback(() => {\r\n-    if (saveProgress === 'idle') return null;\r\n-\r\n-    return (\r\n-    <div className=\"fixed bottom-4 right-4\">\r\n-      {saveProgress === 'saving' && (\r\n-        <div className=\"flex items-center gap-2 bg-background border rounded-lg px-4 py-2 shadow-lg\">\r\n-          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n-          <span className=\"text-sm\">Saving changes...</span>\r\n-        </div>\r\n-      )}\r\n-      {saveProgress === 'saved' && (\r\n-        <div className=\"flex items-center gap-2 bg-green-500 text-white rounded-lg px-4 py-2 shadow-lg\">\r\n-          <Check className=\"h-4 w-4\" />\r\n-          <span className=\"text-sm\">Changes saved</span>\r\n-        </div>\r\n-      )}\r\n-      {saveProgress === 'error' && (\r\n-        <div className=\"flex items-center gap-2 bg-destructive text-destructive-foreground rounded-lg px-4 py-2 shadow-lg\">\r\n-          <X className=\"h-4 w-4\" />\r\n-          <span className=\"text-sm\">Error saving changes</span>\r\n-        </div>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-  }, [saveProgress]);\r\n-\r\n-  // Update handlers\r\n-  const handleGradeSelect = (gradeId: string) => {\r\n-    // Always keep sidebar open during selection\r\n-    setIsSidebarCollapsed(false);\r\n-    setIsSidebarLocked(true);\r\n-    \r\n-    // Batch state updates\r\n-    requestAnimationFrame(() => {\r\n-      setSelectedGradeId(gradeId);\r\n-      setSelectedGrade(gradeId);\r\n-      setSelectedTopicId(null);\r\n-      setSelectedTopic('');\r\n-      setSelectedSubtopicId(null);\r\n-      setSelectedSubtopic('');\r\n-      setCurrentLessonId(null);\r\n-      \r\n-      if (isViewMode) {\r\n-        setExpandedGrade(gradeId);\r\n-      }\r\n-    });\r\n-  };\r\n-\r\n-  const handleTopicSelect = (value: string) => {\r\n-    setSelectedTopicId(value);\r\n-    setSelectedTopic(value);\r\n-    setSelectedSubtopicId(null);\r\n-    setSelectedSubtopic('');\r\n-    setCurrentLessonId(null);\r\n-  };\r\n-\r\n-  const handleSubtopicSelect = (value: string) => {\r\n-    setSelectedSubtopicId(value);\r\n-    setSelectedSubtopic(value);\r\n-    setCurrentLessonId(null);\r\n-  };\r\n-\r\n-  const handleLessonSelect = async (lessonId: string) => {\r\n-    try {\r\n-      // Lock sidebar during selection\r\n-      setIsSidebarLocked(true);\r\n-      setIsSidebarCollapsed(false);\r\n-      setCurrentLessonId(lessonId);\r\n-      \r\n-      // 1. Fetch lesson data\r\n-      const { data: lessonData, error: lessonError } = await supabase\r\n-        .from('lessons')\r\n-        .select('*')\r\n-        .eq('id', lessonId)\r\n-        .single();\r\n-\r\n-      if (lessonError) throw lessonError;\r\n-\r\n-      // 2. Fetch questions with exercise prompts\r\n-      const { data: questionsData, error: questionsError } = await supabase\r\n-        .from('questions')\r\n-        .select(`\r\n-          *,\r\n-          exercise_prompts (*)\r\n-        `)\r\n-        .eq('lesson_id', lessonId);\r\n-\r\n-      if (questionsError) throw questionsError;\r\n-\r\n-      // 3. Fetch activities - removed order_index\r\n-      const { data: activitiesData, error: activitiesError } = await supabase\r\n-        .from('activities')\r\n-        .select('*')\r\n-        .eq('lesson_id', lessonId);\r\n-\r\n-      if (activitiesError) throw activitiesError;\r\n-\r\n-      // Format questions with their exercise prompts\r\n-      const formattedQuestions = questionsData?.map(q => ({\r\n-        ...q,\r\n-        data: q.data || {},\r\n-        exercisePrompts: q.exercise_prompts || []\r\n-      })) || [];\r\n-\r\n-      // Set all states\r\n-      setLessonTitle(lessonData.title || '');\r\n-      setLessonContent(lessonData.content || '');\r\n-      setQuestions(formattedQuestions);\r\n-      setActivities(activitiesData || []);\r\n-\r\n-      // After successful load, unlock sidebar and allow collapse\r\n-      setTimeout(() => {\r\n-        setIsSidebarLocked(false);\r\n-        if (!isSidebarLocked) {\r\n-          setIsSidebarCollapsed(true);\r\n-        }\r\n-      }, 300);\r\n-\r\n-    } catch (error) {\r\n-      console.error('Error loading lesson:', error);\r\n-      toast.error('Failed to load lesson');\r\n-      // Reset states on error\r\n-      setLessonTitle('');\r\n-      setLessonContent('');\r\n-      setQuestions([]);\r\n-      setActivities([]);\r\n-    }\r\n-    if (!isSidebarLocked) {\r\n-      setIsSidebarCollapsed(true);\r\n-    }\r\n-  };\r\n-\r\n-  // Update the expansion handlers\r\n-  const handleTopicExpand = async (topicId: string) => {\r\n-    setExpandedTopic(expandedTopic === topicId ? null : topicId);\r\n-    setSelectedTopicId(topicId);\r\n-    \r\n-    // Load subtopics when topic is expanded\r\n-    if (topicId) {\r\n-      setIsLoadingSubtopics(true);\r\n-      try {\r\n-        const { data: subtopicsData, error } = await supabase\r\n-          .from('subtopics')\r\n-          .select('*')\r\n-          .eq('topic_id', topicId)\r\n-          .order('order_index');\r\n-\r\n-        if (error) throw error;\r\n-        setSubtopics(subtopicsData || []);\r\n-      } catch (error) {\r\n-        console.error('Error loading subtopics:', error);\r\n-        toast.error('Failed to load subtopics');\r\n-      } finally {\r\n-        setIsLoadingSubtopics(false);\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const handleSubtopicExpand = async (subtopicId: string) => {\r\n-    setExpandedSubtopic(expandedSubtopic === subtopicId ? null : subtopicId);\r\n-    setSelectedSubtopicId(subtopicId);\r\n-    \r\n-    if (subtopicId) {\r\n-      setIsLoadingLessons(true);\r\n-      try {\r\n-        const { data: lessonsData, error } = await supabase\r\n-          .from('lessons')\r\n-          .select('*')\r\n-          .eq('subtopic_id', subtopicId)\r\n-          .order('order_index');\r\n-\r\n-        if (error) throw error;\r\n-        setLessons(lessonsData || []);\r\n-      } catch (error) {\r\n-        console.error('Error loading lessons:', error);\r\n-        toast.error('Failed to load lessons');\r\n-      } finally {\r\n-        setIsLoadingLessons(false);\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const handleQuestionExpand = (index: number) => {\r\n-    setExpandedQuestion(expandedQuestion === index ? null : index);\r\n-  };\r\n-\r\n-  const handleActivityExpand = (index: number) => {\r\n-    setExpandedActivity(expandedActivity === index ? null : index);\r\n-  };\r\n-\r\n-  // Add effect to save mode changes to localStorage\r\n-  useEffect(() => {\r\n-    localStorage.setItem('lessonManagementViewMode', isViewMode.toString());\r\n-  }, [isViewMode]);\r\n-\r\n-  // Add handlers for creating new items\r\n-  const handleCreateGrade = async () => {\r\n-    try {\r\n-      const response = await fetch(`${API_ENDPOINT}/grades`, {\r\n-        method: 'POST',\r\n-        headers: { 'Content-Type': 'application/json' },\r\n-        body: JSON.stringify({ name: newItemData.name })\r\n-      });\r\n-\r\n-      if (!response.ok) throw new Error('Failed to create grade');\r\n-      const data = await response.json();\r\n-      \r\n-      if (!data.success) throw new Error(data.message || 'Failed to create grade');\r\n-      \r\n-      // Update grades list\r\n-      setGrades([...grades, data.data.grade]);\r\n-      setModalState({ ...modalState, showAddGrade: false });\r\n-      setNewItemData({ name: '', description: '' });\r\n-      toast.success('Grade created successfully');\r\n-    } catch (error) {\r\n-      console.error('Error creating grade:', error);\r\n-      toast.error('Failed to create grade');\r\n-    }\r\n-  };\r\n-\r\n-  const handleCreateTopic = async () => {\r\n-    if (!selectedGradeId) {\r\n-      toast.error('Please select a grade first');\r\n-      return;\r\n-    }\r\n-\r\n-    try {\r\n-      const newTopic = await contentService.createTopic({\r\n-        title: newItemData.name, // Map from newItemData.name to title\r\n-        description: newItemData.description,\r\n-        gradeId: selectedGradeId\r\n-      });\r\n-\r\n-      setTopics(prev => [...prev, newTopic]);\r\n-      toast.success('Topic created successfully');\r\n-      setModalState({ ...modalState, showAddTopic: false });\r\n-      setNewItemData({ name: '', description: '' });\r\n-    } catch (err) {\r\n-      const error = err instanceof Error ? err.message : String(err);\r\n-      console.error('Error creating topic:', error);\r\n-      toast.error('Failed to create topic');\r\n-    }\r\n-  };\r\n-    \r\n-  \r\n-\r\n-\r\n-  const handleCreateSubtopic = async (data: { title: string; description?: string }) => {\r\n-    try {\r\n-      if (!selectedTopicId) {\r\n-        toast.error('Please select a topic first');\r\n-        return;\r\n-      }\r\n-\r\n-      const newSubtopic = await contentService.createSubtopic({\r\n-        ...data,\r\n-        topicId: selectedTopicId\r\n-      });\r\n-\r\n-      setSubtopics(prev => [...prev, {\r\n-        _id: newSubtopic.id,\r\n-        id: newSubtopic.id,\r\n-        name: newSubtopic.title,\r\n-        title: newSubtopic.title,\r\n-        description: newSubtopic.description,\r\n-        topic_id: newSubtopic.topic_id,\r\n-        orderIndex: prev.length,\r\n-        lessons: []\r\n-      }]);\r\n-\r\n-      toast.success('Subtopic created successfully');\r\n-      setModalState(prev => ({ ...prev, showAddSubtopic: false }));\r\n-    } catch (err) {\r\n-      const error = err as Error;\r\n-      console.error('Error creating subtopic:', error);\r\n-      toast.error('Failed to create subtopic');\r\n-    }\r\n-  };\r\n-\r\n-  const handleUpdateSubtopic = async (subtopicId: string, data: { title: string; description?: string }) => {\r\n-    try {\r\n-      const { data: updatedSubtopic, error } = await supabase\r\n-        .from('sub_topics')\r\n-        .update(data)\r\n-        .eq('id', subtopicId)\r\n-        .select()\r\n-        .single();\r\n-\r\n-      if (error) throw error;\r\n-      \r\n-      setSubtopics(prev => prev.map(subtopic => \r\n-        subtopic.id === subtopicId \r\n-          ? {\r\n-              ...subtopic,\r\n-              name: updatedSubtopic.title\r\n-            }\r\n-          : subtopic\r\n-      ));\r\n-\r\n-      toast.success('Subtopic updated successfully');\r\n-    } catch (err) {\r\n-      const error = err as Error;\r\n-      console.error('Error updating subtopic:', error);\r\n-      toast.error('Failed to update subtopic');\r\n-    }\r\n-  };\r\n-\r\n-  const handleDeleteSubtopic = async (subtopicId: string) => {\r\n-    try {\r\n-      await contentService.deleteSubtopic(subtopicId);\r\n-      setSubtopics(prev => prev.filter(subtopic => subtopic.id !== subtopicId));\r\n-      setSelectedSubtopicId(null);\r\n-      toast.success('Subtopic deleted successfully');\r\n-    } catch (err) {\r\n-      const error = err as Error;\r\n-      console.error('Error deleting subtopic:', error);\r\n-      toast.error('Failed to delete subtopic');\r\n-    }\r\n-  };\r\n-\r\n-  const handleCreateLesson = async () => {\r\n-    if (!selectedSubtopicId) {\r\n-      toast.error('Please select a subtopic first');\r\n-      return;\r\n-    }\r\n-\r\n-    try {\r\n-      // First create the lesson\r\n-      const { data: newLesson, error: lessonError } = await supabase\r\n-        .from('lessons')\r\n-        .insert({\r\n-          title: newItemData.name,\r\n-          duration: 0,\r\n-          topic_id: selectedTopicId,\r\n-          subtopic_id: selectedSubtopicId,\r\n-          content: '', // Empty rich text content initially\r\n-          status: 'draft'\r\n-        })\r\n-        .select()\r\n-        .single();\r\n-\r\n-      if (lessonError) throw lessonError;\r\n-\r\n-      // Create initial question\r\n-      const { data: newQuestion, error: questionError } = await supabase\r\n-        .from('questions')\r\n-        .insert({\r\n-          lesson_id: newLesson.id,\r\n-          type: 'speaking', // default type\r\n-          title: 'Question 1',\r\n-          data: {\r\n-            prompt: '',\r\n-            teacherScript: '',\r\n-            options: []\r\n-          },\r\n-          order_index: 0\r\n-        })\r\n-        .select()\r\n-        .single();\r\n-\r\n-      if (questionError) throw questionError;\r\n-\r\n-      // Create initial exercise prompts for the question\r\n-      const { error: promptsError } = await supabase\r\n-        .from('exercise_prompts')\r\n-        .insert([\r\n-          {\r\n-            question_id: newQuestion.id,\r\n-            text: '',\r\n-            type: 'image',\r\n-            narration: '',\r\n-            saytext: '',\r\n-            media: [],\r\n-            order_index: 0\r\n-          },\r\n-          {\r\n-            question_id: newQuestion.id,\r\n-            text: '',\r\n-            type: 'gif',\r\n-            narration: '',\r\n-            saytext: '',\r\n-            media: [],\r\n-            order_index: 1\r\n-          }\r\n-        ]);\r\n-\r\n-      if (promptsError) throw promptsError;\r\n-\r\n-      // Create initial activity\r\n-      // const { error: activityError } = await supabase\r\n-      //   .from('activities')\r\n-      //   .insert({\r\n-      //     lesson_id: newLesson.id,\r\n-      //     type: 'practice',\r\n-      //     title: '',\r\n-      //     instructions: '',\r\n-      //     media: [],\r\n-      //     data: {\r\n-      //       prompt: '',\r\n-      //       teacherScript: '',\r\n-      //       media: []\r\n-      //     },\r\n-      //     order_index: 0\r\n-      //   });\r\n-\r\n-      // if (activityError) throw activityError;\r\n-\r\n-      // Update UI state\r\n-      setLessons(prev => [...prev, newLesson]);\r\n-      setCurrentLessonId(newLesson.id);\r\n-      setLessonTitle(newLesson.title);\r\n-      setModalState({ ...modalState, showAddLesson: false });\r\n-      setNewItemData({ name: '', description: '' });\r\n-      toast.success('Lesson created successfully');\r\n-\r\n-    } catch (error) {\r\n-      console.error('Error creating lesson:', error);\r\n-      toast.error('Failed to create lesson');\r\n-    }\r\n-  };\r\n-\r\n-  // Effect to handle localStorage after mount\r\n-  useEffect(() => {\r\n-    const storedMode = localStorage.getItem('lessonManagementViewMode');\r\n-    if (storedMode !== null) {\r\n-      setIsViewMode(storedMode === 'true');\r\n-    }\r\n-  }, []);\r\n-\r\n-  // Update the cleanupModalState function\r\n-  const cleanupModalState = useCallback(() => {\r\n-    document.body.style.pointerEvents = '';\r\n-    document.body.style.overflow = '';\r\n-    setModalState({\r\n-      showAddGrade: false,\r\n-      showAddTopic: false,\r\n-      showAddSubtopic: false,\r\n-      showAddLesson: false\r\n-    });\r\n-    setNewItemData({ name: '', description: '' });\r\n-  }, []);\r\n-\r\n-  // Add a function to handle modal state changes\r\n-  const handleModalStateChange = useCallback((modalType: keyof typeof modalState, open: boolean) => {\r\n-    if (!open) {\r\n-      cleanupModalState();\r\n-    } else {\r\n-      setModalState(prev => ({ ...prev, [modalType]: open }));\r\n-    }\r\n-  }, [cleanupModalState]);\r\n-\r\n-  const handleContentSave = async (content: string) => {\r\n-    const loadingToast = toast.loading(\"Saving content...\", {\r\n-      action: {\r\n-        label: \"Close\",\r\n-        onClick: () => toast.dismiss()\r\n-      }\r\n-    });\r\n-    \r\n-    try {\r\n-      const { data: { session } } = await supabase.auth.getSession();\r\n-      if (!session?.user) {\r\n-        toast.error('Please sign in to save content', { id: loadingToast });\r\n-        return;\r\n-      }\r\n-\r\n-      // Get the most recent content entry\r\n-      const { data: existingContent, error: checkError } = await supabase\r\n-        .from('lesson_content')\r\n-        .select('id')\r\n-        .eq('lesson_id', currentLessonId)\r\n-        .order('updated_at', { ascending: false })\r\n-        .limit(1)\r\n-        .maybeSingle();\r\n-\r\n-      // If content exists, update it; if not, insert new\r\n-      const { error } = await supabase\r\n-        .from('lesson_content')\r\n-        .upsert({\r\n-          id: existingContent?.id, // This ensures we update if id exists\r\n-          lesson_id: currentLessonId,\r\n-          content: [content],\r\n-          content_type: 'text',\r\n-          metadata: {\r\n-            heading: contentHeading\r\n-          },\r\n-          user_id: session.user.id,\r\n-          updated_at: new Date().toISOString()\r\n-        }, {\r\n-          onConflict: 'id'  // This ensures we update based on lesson_id\r\n-        });\r\n-\r\n-      if (error) throw error;\r\n-\r\n-      // Save questions separately\r\n-      for (const question of questions) {\r\n-        const { exercisePrompts, ...questionData } = question; // Remove exercisePrompts from question data\r\n-        \r\n-        // Save question\r\n-        const { error: questionError } = await supabase\r\n-          .from('questions')\r\n-          .upsert(questionData, {\r\n-            onConflict: 'id'\r\n-          })\r\n-          .select();\r\n-\r\n-        if (questionError) throw questionError;\r\n-\r\n-        // Save exercise prompts\r\n-        if (exercisePrompts?.length > 0) {\r\n-          for (const prompt of exercisePrompts) {\r\n-            const { error: promptError } = await supabase\r\n-              .from('exercise_prompts')\r\n-              .upsert(prompt, {\r\n-                onConflict: 'id'\r\n-              })\r\n-              .select();\r\n-\r\n-            if (promptError) throw promptError;\r\n-          }\r\n-        }\r\n-      }\r\n-      \r\n-      toast.success(\"Content saved successfully\", {\r\n-        action: {\r\n-          label: \"Close\",\r\n-          onClick: () => toast.dismiss()\r\n-        },\r\n-        id: loadingToast,\r\n-      });\r\n-      setIsContentEditorOpen(false);\r\n-    } catch (error) {\r\n-      console.error('Error saving content:', error);\r\n-      toast.error(\"Failed to save content\", {\r\n-        action: {\r\n-          label: \"Close\",\r\n-          onClick: () => toast.dismiss()\r\n-        },\r\n-        id: loadingToast,\r\n-      });\r\n-    }\r\n-  };\r\n-\r\n-  // Add this component for inline editing\r\n-  const InlineEdit = ({ \r\n-    value, \r\n-    onSave, \r\n-    isEditing, \r\n-    setIsEditing, \r\n-    placeholder,\r\n-    className = \"\"\r\n-  }: InlineEditProps) => {\r\n-    const [tempValue, setTempValue] = useState(value);\r\n-    \r\n-    return isEditing ? (\r\n-      <div className=\"flex items-center gap-2\">\r\n-        <Input\r\n-          value={tempValue}\r\n-          onChange={(e) => setTempValue(e.target.value)}\r\n-          placeholder={placeholder}\r\n-          className={className}\r\n-          autoFocus\r\n-        />\r\n-        <Button\r\n-          size=\"sm\"\r\n-          variant=\"ghost\"\r\n-          onClick={() => {\r\n-            onSave(tempValue);\r\n-            setIsEditing(false);\r\n-          }}\r\n-        >\r\n-          <Check className=\"h-4 w-4 text-green-500\" />\r\n-        </Button>\r\n-        <Button\r\n-          size=\"sm\"\r\n-          variant=\"ghost\"\r\n-          onClick={() => setIsEditing(false)}\r\n-        >\r\n-          <X className=\"h-4 w-4 text-red-500\" />\r\n-        </Button>\r\n-      </div>\r\n-    ) : (\r\n-      <div \r\n-        className=\"group flex items-center gap-2 cursor-pointer\"\r\n-        onClick={() => setIsEditing(true)}\r\n-      >\r\n-        <span className={className}>{value || placeholder}</span>\r\n-        <Pencil className=\"h-4 w-4 opacity-0 group-hover:opacity-100 transition-opacity\" />\r\n-      </div>\r\n-    );\r\n-  };\r\n-\r\n-  // Add this effect to handle auto-collapse after lesson selection\r\n-  useEffect(() => {\r\n-    if (currentLessonId && selectedGradeId && selectedTopicId && selectedSubtopicId) {\r\n-      setIsSidebarLocked(false);\r\n-      // Optional: add a slight delay before collapsing\r\n-      setTimeout(() => setIsSidebarCollapsed(true), 300);\r\n-    }\r\n-  }, [currentLessonId, selectedGradeId, selectedTopicId, selectedSubtopicId]);\r\n-\r\n-  // Add individual save handlers\r\n-  // const handleSaveQuestion = async (question: Question, index: number) => {\r\n-  //   try {\r\n-  //     // Update status to saving\r\n-  //     setQuestionSaveStatuses(prev => [\r\n-  //       ...prev.filter(s => s.id !== question.id),\r\n-  //       { id: question.id, status: 'saving' }\r\n-  //     ]);\r\n-\r\n-  //     const questionUpsert = {\r\n-  //       id: question.id,\r\n-  //       lesson_id: currentLessonId,\r\n-  //       type: question.type,\r\n-  //       title: question.data?.prompt || 'Untitled Question',\r\n-  //       metadata: question.metadata || {},\r\n-  //       data: {\r\n-  //         prompt: question.data?.prompt || '',\r\n-  //         teacherScript: question.data?.teacherScript || '',\r\n-  //         ...question.data\r\n-  //       },\r\n-  //       order_index: index,\r\n-  //       created_at: new Date().toISOString(),\r\n-  //       updated_at: new Date().toISOString()\r\n-  //     };\r\n-\r\n-  //     const { error: questionError } = await supabase\r\n-  //       .from('questions')\r\n-  //       .upsert(questionUpsert);\r\n-\r\n-  //     if (questionError) throw questionError;\r\n-\r\n-  //     // Update status to saved\r\n-  //     setQuestionSaveStatuses(prev => [\r\n-  //       ...prev.filter(s => s.id !== question.id),\r\n-  //       { id: question.id, status: 'saved', lastSaved: new Date().toISOString() }\r\n-  //     ]);\r\n-\r\n-  //     toast.success(`Question ${index + 1} saved successfully`);\r\n-  //   } catch (error) {\r\n-  //     console.error('Error saving question:', error);\r\n-  //     setQuestionSaveStatuses(prev => [\r\n-  //       ...prev.filter(s => s.id !== question.id),\r\n-  //       { id: question.id, status: 'error' }\r\n-  //     ]);\r\n-  //     toast.error(`Failed to save question ${index + 1}`);\r\n-  //   }\r\n-  // };\r\n-\r\n-  const handleSavePrompt = async (questionId: string, prompt: ExercisePrompt, promptIndex: number) => {\r\n-    try {\r\n-      setPromptSaveStatuses(prev => [\r\n-        ...prev.filter(s => s.id !== prompt.id),\r\n-        { id: prompt.id || '', status: 'saving' } as SaveStatus\r\n-      ]);\r\n-\r\n-      const promptUpsert = {\r\n-        id: prompt.id,\r\n-        question_id: questionId,\r\n-        text: prompt.text || '',\r\n-        type: prompt.type || 'text',\r\n-        narration: prompt.narration || '',\r\n-        saytext: prompt.saytext || '',\r\n-        media: prompt.media || [],\r\n-        order_index: promptIndex,\r\n-        created_at: prompt.created_at || new Date().toISOString(),\r\n-        updated_at: new Date().toISOString()\r\n-      };\r\n-\r\n-      const { error: promptError } = await supabase\r\n-        .from('exercise_prompts')\r\n-        .upsert(promptUpsert);\r\n-\r\n-      if (promptError) throw promptError;\r\n-\r\n-      setPromptSaveStatuses(prev => [\r\n-        ...prev.filter(s => s.id !== prompt.id),\r\n-        { id: prompt.id || '', status: 'saved', lastSaved: new Date().toISOString() } as SaveStatus\r\n-      ]);\r\n-\r\n-      toast.success(`Prompt ${promptIndex + 1} saved successfully`);\r\n-    } catch (error) {\r\n-      console.error('Error saving prompt:', error);\r\n-      setPromptSaveStatuses(prev => [\r\n-        ...prev.filter(s => s.id !== prompt.id),\r\n-        { id: prompt.id || '', status: 'error' } as SaveStatus\r\n-      ]);\r\n-      toast.error(`Failed to save prompt ${promptIndex + 1}`);\r\n-    }\r\n-  };\r\n-\r\n-  // Add effect to mark items as draft when edited\r\n-  useEffect(() => {\r\n-    questions.forEach(question => {\r\n-      if (!questionSaveStatuses.find(s => s.id === question.id)) {\r\n-        setQuestionSaveStatuses(prev => [\r\n-          ...prev,\r\n-          { id: question.id, status: 'draft' }\r\n-        ]);\r\n-      }\r\n-    });\r\n-  }, [questions]);\r\n-\r\n-  // Add this function with your other handlers\r\n-  const handleRefreshLesson = async () => {\r\n-    if (!currentLessonId) {\r\n-      toast.error('No lesson selected');\r\n-      return;\r\n-    }\r\n-    \r\n-    try {\r\n-      toast.loading('Refreshing lesson content...', {\r\n-        action: {\r\n-          label: \"Close\",\r\n-          onClick: () => toast.dismiss()\r\n-        },\r\n-      });\r\n-      await handleLessonSelect(currentLessonId);\r\n-      toast.success('Content refreshed', {\r\n-        action: {\r\n-          label: \"Close\",\r\n-          onClick: () => toast.dismiss()\r\n-        },\r\n-      });\r\n-    } catch (error) {\r\n-      console.error('Error refreshing lesson:', error);\r\n-      toast.error('Failed to refresh content', {\r\n-        action: {\r\n-          label: \"Close\",\r\n-          onClick: () => toast.dismiss()\r\n-        },\r\n-      });\r\n-    }\r\n-  };\r\n-\r\n-  // Add this function to handle refresh\r\n-  const handleRefreshContent = async () => {\r\n-    if (!currentLessonId) {\r\n-      toast.error('No lesson selected');\r\n-      return;\r\n-    }\r\n-    \r\n-    toast.loading('Refreshing content...');\r\n-    try {\r\n-      await loadLessonContent(currentLessonId);\r\n-      toast.success('Content refreshed');\r\n-    } catch (error) {\r\n-      console.error('Refresh error:', error);\r\n-      toast.error('Failed to refresh content');\r\n-    }\r\n-  };\r\n-\r\n-  // Update the sidebar hover mechanism\r\n-  const handleSidebarHover = useCallback(\r\n-    debounce((isHovering: boolean) => {\r\n-      if (!isSidebarLocked && !isNavigating && !isDropdownOpen) {\r\n-        if (isHovering || document.activeElement?.closest('.sidebar-content')) {\r\n-          setIsSidebarCollapsed(false);\r\n-        } else {\r\n-          setTimeout(() => {\r\n-            if (!isDropdownOpen) { // Only collapse if dropdown is closed\r\n-              setIsSidebarCollapsed(true);\r\n-            }\r\n-          }, 300);\r\n-        }\r\n-      }\r\n-    }, 100),\r\n-    [isSidebarLocked, isNavigating, isDropdownOpen]\r\n-  );\r\n-\r\n-  // Update the sidebar JSX\r\n-  <div \r\n-    className={cn(\r\n-      \"transition-all duration-300 ease-in-out relative\",\r\n-      isSidebarCollapsed ? \"w-20\" : \"w-80\",\r\n-      \"flex-shrink-0 group\"\r\n-    )}\r\n-    onMouseEnter={() => {\r\n-      handleSidebarHover(true);\r\n-      // Immediately expand on mouse enter\r\n-      if (!isSidebarLocked) {\r\n-        setIsSidebarCollapsed(false);\r\n-      }\r\n-    }}\r\n-    onMouseLeave={() => {\r\n-      // Only collapse if not interacting with content\r\n-      if (!document.activeElement?.closest('.sidebar-content')) {\r\n-        handleSidebarHover(false);\r\n-      }\r\n-    }}\r\n-    onFocus={() => setIsSidebarCollapsed(false)}\r\n-  >\r\n-    <Card className={cn(\r\n-      \"h-full relative sidebar-content\", // Added sidebar-content class\r\n-      \"transition-shadow duration-300\",\r\n-      \"hover:shadow-lg\"\r\n-    )}>\r\n-      {/* Rest of sidebar content */}\r\n-    </Card>\r\n-  </div>\r\n-\r\n-  // Update the sidebar and card styles\r\n-  return (\r\n-      <div className=\"container mx-auto py-8\">\r\n-        {/* Header */}\r\n-        <div className=\"flex items-center justify-between mb-2\">\r\n-          {/* ... header content ... */}\r\n-          <div className=\"flex items-center gap-4\">\r\n-            <Link href=\"/super-admin\">\r\n-              <Button variant=\"outline\" className=\"gap-2\">\r\n-                <ArrowLeft className=\"h-4 w-4\" />\r\n-                Back\r\n-              </Button>\r\n-            </Link>\r\n-            <div className=\"flex items-center gap-2\">\r\n-              <h1 className=\"text-2xl font-bold\">Lesson Management</h1>\r\n-              <Button\r\n-                variant=\"ghost\"\r\n-                size=\"icon\"\r\n-                onClick={handleRefreshLesson}\r\n-                className=\"ml-2\"\r\n-                title=\"Refresh lesson content\"\r\n-              >\r\n-                <RefreshCw className=\"h-4 w-4\" />\r\n-              </Button>\r\n-            </div>\r\n-            <p className=\"text-sm text-muted-foreground\">Create and manage your educational content</p>\r\n-          </div>\r\n-          <div className=\"flex items-center gap-2\">\r\n-            <Button\r\n-              variant=\"outline\"\r\n-              size=\"sm\"\r\n-              onClick={() => setShowHelpTips(!showHelpTips)}\r\n-              className=\"gap-2\"\r\n-            >\r\n-              {showHelpTips ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\r\n-              {showHelpTips ? 'Hide Tips' : 'Show Tips'}\r\n-            </Button>\r\n-          </div>\r\n-        </div>\r\n-        \r\n-        {/* Main content wrapper - Fix the layout here */}\r\n-        <div className=\"flex gap-6 h-[calc(100vh-200px)]\">\r\n-          {/* Improved sidebar */}\r\n-          <div \r\n-            className={cn(\r\n-              \"transition-all duration-300 ease-in-out relative\",\r\n-              isSidebarCollapsed ? \"w-20\" : \"w-80\",\r\n-              \"flex-shrink-0 group\"\r\n-            )}\r\n-            onMouseEnter={() => {\r\n-              handleSidebarHover(true);\r\n-              // Immediately expand on mouse enter\r\n-              if (!isSidebarLocked) {\r\n-                setIsSidebarCollapsed(false);\r\n-              }\r\n-            }}\r\n-            onMouseLeave={() => {\r\n-              // Only collapse if not interacting with content\r\n-              if (!document.activeElement?.closest('.sidebar-content')) {\r\n-                handleSidebarHover(false);\r\n-              }\r\n-            }}\r\n-            onFocus={() => setIsSidebarCollapsed(false)}\r\n-          >\r\n-            <Card className={cn(\r\n-              \"h-full relative sidebar-content\", // Added sidebar-content class\r\n-              \"transition-shadow duration-300\",\r\n-              \"hover:shadow-lg\"\r\n-            )}>\r\n-              {/* Lock button - only show after lesson selection */}\r\n-              {currentLessonId && (\r\n-                <Button\r\n-                  variant=\"ghost\"\r\n-                  size=\"sm\"\r\n-                  className=\"absolute top-2 right-2 z-10\"\r\n-                  onClick={() => {\r\n-                    setIsSidebarLocked(!isSidebarLocked);\r\n-                    if (!isSidebarLocked) {\r\n-                      setIsSidebarCollapsed(false);\r\n-                    }\r\n-                  }}\r\n-                >\r\n-                  {isSidebarLocked ? <Lock className=\"h-4 w-4\" /> : <Unlock className=\"h-4 w-4\" />}\r\n-                </Button>\r\n-              )}\r\n-\r\n-              {/* Sidebar content with overflow handling */}\r\n-              <div className={cn(\r\n-                \"transition-all duration-300 overflow-hidden\",\r\n-                isSidebarCollapsed ? \"opacity-0\" : \"opacity-100\"\r\n-              )}>\r\n-                <Card className=\"h-full\">\r\n-                  <CardHeader className=\"pb-3\">\r\n-                    <div className=\"flex items-center justify-between\">\r\n-                      <CardTitle className=\"text-lg font-semibold\">Content Management</CardTitle>\r\n-                      <TooltipProvider>\r\n-                        <Tooltip>\r\n-                          <TooltipTrigger>\r\n-                            <HelpCircle className=\"h-4 w-4 text-muted-foreground\" />\r\n-                          </TooltipTrigger>\r\n-                          <TooltipContent>\r\n-                            <p>Manage your educational content here</p>\r\n-                          </TooltipContent>\r\n-                        </Tooltip>\r\n-                      </TooltipProvider>\r\n-                      </div>\r\n-                    <CardDescription>Create and manage your lessons</CardDescription>\r\n-                  </CardHeader>\r\n-                  <CardContent className=\"space-y-4\">\r\n-                    {/* View/Edit Mode Toggle */}\r\n-                    <div className=\"grid grid-cols-2 gap-2 p-1 bg-muted rounded-lg\">\r\n-                      <Button\r\n-                        variant={isViewMode ? \"default\" : \"ghost\"}\r\n-                        size=\"sm\"\r\n-                        onClick={() => setIsViewMode(true)}\r\n-                        className=\"w-full\"\r\n-                      >\r\n-                        <Eye className=\"h-4 w-4 mr-2\" />\r\n-                        View\r\n-                      </Button>\r\n-                      <Button\r\n-                        variant={!isViewMode ? \"default\" : \"ghost\"}\r\n-                        size=\"sm\"\r\n-                        onClick={() => setIsViewMode(false)}\r\n-                        className=\"w-full\"\r\n-                      >\r\n-                        <Edit className=\"h-4 w-4 mr-2\" />\r\n-                        Edit\r\n-                      </Button>\r\n-                    </div>\r\n-\r\n-                    {/* Grade Selection */}\r\n-                    <div className=\"space-y-2\">\r\n-                      <div className=\"flex items-center justify-between\">\r\n-                        <Label htmlFor=\"grade-select\">Grade</Label>\r\n-                        {isViewMode && (\r\n-                          <Button variant=\"ghost\" size=\"sm\" onClick={() => setExpandedGrade(expandedGrade ? null : selectedGrade)}>\r\n-                            {expandedGrade ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n-                          </Button>\r\n-                        )}\r\n-                      </div>\r\n-                      <Select \r\n-                        value={selectedGradeId || ''}\r\n-                        onValueChange={handleGradeSelect}\r\n-                        onOpenChange={(open) => {\r\n-                          if (open) {\r\n-                            // Force sidebar to stay open and lock it\r\n-                            setIsSidebarCollapsed(false);\r\n-                            setIsSidebarLocked(true);\r\n-                          }\r\n-                        }}\r\n-                      >\r\n-                        <SelectTrigger \r\n-                          id=\"grade-select\" \r\n-                          className=\"w-full\"\r\n-                          onClick={(e) => {\r\n-                            e.stopPropagation(); // Prevent event bubbling\r\n-                            setIsSidebarCollapsed(false);\r\n-                            setIsSidebarLocked(true);\r\n-                          }}\r\n-                        >\r\n-                          <SelectValue placeholder=\"Select Grade\" />\r\n-                        </SelectTrigger>\r\n-                        <SelectContent \r\n-                          onCloseAutoFocus={(e) => {\r\n-                            e.preventDefault();\r\n-                            setIsSidebarLocked(true);\r\n-                            setIsSidebarCollapsed(false);\r\n-                          }}\r\n-                        >\r\n-                          {grades.map((grade: Grade) => (\r\n-                            <SelectItem \r\n-                              key={`grade-${grade.id || 'new'}`} \r\n-                              value={grade.id || ''}\r\n-                              onMouseDown={(e) => {\r\n-                                e.preventDefault();\r\n-                                e.stopPropagation();\r\n-                              }}\r\n-                            >\r\n-                              <div className=\"flex items-center gap-2\">\r\n-                                <BookOpen className=\"h-4 w-4 text-primary\" />\r\n-                                {grade.name}\r\n-                              </div>\r\n-                            </SelectItem>\r\n-                          ))}\r\n-                        </SelectContent>\r\n-                      </Select>\r\n-                      {!isViewMode && (\r\n-                      <Button \r\n-                        variant=\"outline\" \r\n-                        size=\"sm\" \r\n-                        className=\"w-full gap-2\"\r\n-                        onClick={() => setModalState({ ...modalState, showAddGrade: false })}\r\n-                      >\r\n-                        <Plus className=\"h-4 w-4\" />\r\n-                        Add New Grade\r\n-                      </Button>\r\n-                      )}\r\n-                    </div>\r\n-\r\n-                    {/* Content Tree View in View Mode */}\r\n-                    {isViewMode && expandedGrade && (\r\n-                      <div className=\"mt-4 space-y-4 overflow-y-auto max-h-[calc(100vh-300px)]\">\r\n-                        {topics.map((topic: Topic) => (\r\n-                          <Card \r\n-                            key={topic.id} \r\n-                            className={cn(\r\n-                              \"border-l-4 transition-all duration-200 hover:shadow-md\",\r\n-                              expandedTopic === topic.id ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\r\n-                            )}\r\n-                          >\r\n-                            <CardHeader className=\"py-3 cursor-pointer select-none\">\r\n-                              <div className=\"flex items-center justify-between\">\r\n-                                <div className=\"flex items-center gap-2\" onClick={() => handleTopicExpand(topic.id || '')}>\r\n-                                  <Layers className=\"h-4 w-4 text-primary\" />\r\n-                                  <h4 className=\"font-medium\">{topic.title}</h4>\r\n-                                </div>\r\n-                                <div className=\"flex items-center gap-2\">\r\n-                                  <AlertDialog>\r\n-                                    <AlertDialogTrigger asChild>\r\n-                                      <Button \r\n-                                        variant=\"ghost\" \r\n-                                        size=\"sm\" \r\n-                                        className=\"hover:bg-destructive/10 hover:text-destructive\"\r\n-                                        onClick={(e) => e.stopPropagation()}\r\n-                                      >\r\n-                                        <Trash className=\"h-4 w-4\" />\r\n-                                      </Button>\r\n-                                    </AlertDialogTrigger>\r\n-                                    <AlertDialogContent>\r\n-                                      <AlertDialogHeader>\r\n-                                        <AlertDialogTitle>Delete Topic</AlertDialogTitle>\r\n-                                        <AlertDialogDescription>\r\n-                                          Are you sure you want to delete {topic.title}? This action cannot be undone.\r\n-                                        </AlertDialogDescription>\r\n-                                      </AlertDialogHeader>\r\n-                                      <AlertDialogFooter>\r\n-                                        <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n-                                        <AlertDialogAction onClick={() => handleDelete(topic.id, 'topic', topic.title)}>\r\n-                                          Delete\r\n-                                        </AlertDialogAction>\r\n-                                      </AlertDialogFooter>\r\n-                                    </AlertDialogContent>\r\n-                                  </AlertDialog>\r\n-                                  <ChevronDown className={cn(\r\n-                                    \"h-4 w-4 transition-transform duration-200\",\r\n-                                    expandedTopic === topic.id ? \"rotate-0\" : \"-rotate-90\"\r\n-                                  )} />\r\n-                                </div>\r\n-                              </div>\r\n-                            </CardHeader>\r\n-\r\n-                            <AnimatePresence>\r\n-                              {expandedTopic === topic.id && (\r\n-                                <motion.div\r\n-                                  initial={{ height: 0, opacity: 0 }}\r\n-                                  animate={{ height: \"auto\", opacity: 1 }}\r\n-                                  exit={{ height: 0, opacity: 0 }}\r\n-                                  transition={{ duration: 0.2 }}\r\n-                                >\r\n-                                  <CardContent className=\"py-0 pl-4\">\r\n-                                    {subtopics.map((subtopic) => (\r\n-                                      <div key={subtopic.id} className=\"mb-3 last:mb-0\">\r\n-                                        <div className=\"flex items-center justify-between py-2\">\r\n-                                          <div className=\"flex items-center gap-2\" onClick={() => handleSubtopicExpand(subtopic.id)}>\r\n-                                            <BookOpen className=\"h-4 w-4 text-primary\" />\r\n-                                            <span className=\"text-sm font-medium\">{subtopic.title}</span>\r\n-                                          </div>\r\n-                                          <div className=\"flex items-center gap-2\">\r\n-                                            <AlertDialog>\r\n-                                              <AlertDialogTrigger asChild>\r\n-                                                <Button \r\n-                                                  variant=\"ghost\" \r\n-                                                  size=\"sm\"\r\n-                                                  className=\"hover:bg-destructive/10 hover:text-destructive\"\r\n-                                                  onClick={(e) => e.stopPropagation()}\r\n-                                                >\r\n-                                                  <Trash className=\"h-4 w-4\" />\r\n-                                                </Button>\r\n-                                              </AlertDialogTrigger>\r\n-                                              <AlertDialogContent>\r\n-                                                <AlertDialogHeader>\r\n-                                                  <AlertDialogTitle>Delete Subtopic</AlertDialogTitle>\r\n-                                                  <AlertDialogDescription>\r\n-                                                    Are you sure you want to delete {subtopic.title}?\r\n-                                                  </AlertDialogDescription>\r\n-                                                </AlertDialogHeader>\r\n-                                                <AlertDialogFooter>\r\n-                                                  <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n-                                                  <AlertDialogAction onClick={() => handleDelete(subtopic.id, 'subtopic', subtopic.title)}>\r\n-                                                    Delete\r\n-                                                  </AlertDialogAction>\r\n-                                                </AlertDialogFooter>\r\n-                                              </AlertDialogContent>\r\n-                                            </AlertDialog>\r\n-                                            <ChevronDown className={cn(\r\n-                                              \"h-4 w-4 transition-transform duration-200\",\r\n-                                              expandedSubtopic === subtopic.id ? \"rotate-0\" : \"-rotate-90\"\r\n-                                            )} />\r\n-                                          </div>\r\n-                                        </div>\r\n-\r\n-                                        {/* Similar pattern for lessons */}\r\n-                                        {expandedSubtopic === subtopic.id && (\r\n-                                          <div className=\"pl-4 space-y-2\">\r\n-                                            {lessons.map((lesson) => (\r\n-                                              <div key={lesson.id} \r\n-                                                className=\"flex items-center justify-between gap-2 py-2 px-3 rounded-md transition-colors hover:bg-accent\">\r\n-                                                <div className=\"flex items-center gap-2\" onClick={() => handleLessonSelect(lesson.id)}>\r\n-                                                  <BookOpen className=\"h-4 w-4 text-muted-foreground\" />\r\n-                                                  <span className=\"text-sm\">{lesson.title}</span>\r\n-                                                </div>\r\n-                                                <AlertDialog>\r\n-                                                  <AlertDialogTrigger asChild>\r\n-                                                    <Button \r\n-                                                      variant=\"ghost\" \r\n-                                                      size=\"sm\"\r\n-                                                      className=\"hover:bg-destructive/10 hover:text-destructive\"\r\n-                                                      onClick={(e) => e.stopPropagation()}\r\n-                                                    >\r\n-                                                      <Trash className=\"h-4 w-4\" />\r\n-                                                    </Button>\r\n-                                                  </AlertDialogTrigger>\r\n-                                                  <AlertDialogContent>\r\n-                                                    <AlertDialogHeader>\r\n-                                                      <AlertDialogTitle>Delete Lesson</AlertDialogTitle>\r\n-                                                      <AlertDialogDescription>\r\n-                                                        Are you sure you want to delete {lesson.title}?\r\n-                                                      </AlertDialogDescription>\r\n-                                                    </AlertDialogHeader>\r\n-                                                    <AlertDialogFooter>\r\n-                                                      <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n-                                                      <AlertDialogAction onClick={() => handleDelete(lesson.id, 'lesson', lesson.title)}>\r\n-                                                        Delete\r\n-                                                      </AlertDialogAction>\r\n-                                                    </AlertDialogFooter>\r\n-                                                  </AlertDialogContent>\r\n-                                                </AlertDialog>\r\n-                                              </div>\r\n-                                            ))}\r\n-                                          </div>\r\n-                                        )}\r\n-                                      </div>\r\n-                                    ))}\r\n-                                  </CardContent>\r\n-                                </motion.div>\r\n-                              )}\r\n-                            </AnimatePresence>\r\n-                          </Card>\r\n-                        ))}\r\n-                      </div>\r\n-                    )}\r\n-\r\n-                    {/* Regular Edit Mode Content */}\r\n-                    {!isViewMode && (\r\n-                      <>\r\n-                        {/* Existing Topic, Subtopic, and Lesson Selection UI */}\r\n-                      {/* Topic Selection */}\r\n-                        {selectedGradeId && (\r\n-                      <div className=\"space-y-2\">\r\n-                        <div className=\"flex items-center justify-between\">\r\n-                        <Label htmlFor=\"topic-select\">Topic</Label>\r\n-                        </div>\r\n-                        <Select \r\n-                              value={selectedTopicId || ''} \r\n-                              onValueChange={handleTopicSelect}\r\n-                        >\r\n-                          <SelectTrigger id=\"topic-select\" className=\"w-full\">\r\n-                            <SelectValue placeholder=\"Select Topic\" />\r\n-                          </SelectTrigger>\r\n-                          <SelectContent>\r\n-                                {topics.map((topic: Topic) => (\r\n-                                  <SelectItem \r\n-                                    key={`topic-${topic.id || 'new'}`} \r\n-                                    value={topic.id || ''}\r\n-                                  >\r\n-                                  <div className=\"flex items-center gap-2\">\r\n-                                  <Layers className=\"h-4 w-4 text-primary\" />\r\n-                                    {topic.title}\r\n-                                  </div>\r\n-                                </SelectItem>\r\n-                              ))}\r\n-                          </SelectContent>\r\n-                        </Select>\r\n-                        <Button \r\n-                          variant=\"outline\" \r\n-                          size=\"sm\" \r\n-                          className=\"w-full gap-2\"\r\n-                          onClick={() => setModalState({ ...modalState, showAddTopic: true })}\r\n-                        >\r\n-                          <Plus className=\"h-4 w-4\" />\r\n-                          Add New Topic\r\n-                        </Button>\r\n-                      </div>\r\n-                    )}\r\n-\r\n-                    {/* Subtopic Selection */}\r\n-                        {selectedTopicId && (\r\n-                      <div className=\"space-y-2\">\r\n-                        <div className=\"flex items-center justify-between\">\r\n-                        <Label htmlFor=\"subtopic-select\">Subtopic</Label>\r\n-                        </div>\r\n-                        <Select \r\n-                              value={selectedSubtopicId || ''} \r\n-                              onValueChange={handleSubtopicSelect}\r\n-                        >\r\n-                          <SelectTrigger id=\"subtopic-select\" className=\"w-full\">\r\n-                            <SelectValue placeholder=\"Select Subtopic\" />\r\n-                          </SelectTrigger>\r\n-                          <SelectContent>\r\n-                                {subtopics\r\n-                                  .filter(subtopic => subtopic.id)\r\n-                                  .map((subtopic, index) => (\r\n-                                    <SelectItem \r\n-                                      key={subtopic.id || `subtopic-${index}`}\r\n-                                      value={subtopic.id || ''}\r\n-                                    >\r\n-                                      {subtopic.title || 'Untitled Subtopic'}\r\n-                                    </SelectItem>\r\n-                                  ))}\r\n-                          </SelectContent>\r\n-                        </Select>\r\n-                        {!isViewMode && (\r\n-                          <Button \r\n-                            variant=\"outline\" \r\n-                            size=\"sm\" \r\n-                            className=\"w-full gap-2\"\r\n-                            onClick={() => setModalState({ ...modalState, showAddSubtopic: true })}\r\n-                          >\r\n-                            <Plus className=\"h-4 w-4\" />\r\n-                            Add New Subtopic\r\n-                          </Button>\r\n-                        )}\r\n-                      </div>\r\n-                    )}\r\n-\r\n-                    {/* Lesson Selection */}\r\n-                        {selectedSubtopicId && (\r\n-                      <div className=\"space-y-2\">\r\n-                        <div className=\"flex items-center justify-between\">\r\n-                          <Label htmlFor=\"lesson-select\">Lesson</Label>\r\n-                        </div>\r\n-                          <Select \r\n-                            value={currentLessonId || ''} \r\n-                            onValueChange={handleLessonSelect}\r\n-                            onOpenChange={(open) => {\r\n-                              setIsDropdownOpen(open);\r\n-                              if (open) {\r\n-                                setIsSidebarCollapsed(false);\r\n-                                setIsSidebarLocked(true);\r\n-                              } else {\r\n-                                // Small delay before unlocking to prevent immediate collapse\r\n-                                setTimeout(() => {\r\n-                                  setIsSidebarLocked(false);\r\n-                                }, 100);\r\n-                              }\r\n-                            }}\r\n-                          >\r\n-                            <SelectTrigger \r\n-                              id=\"lesson-select\" \r\n-                              className=\"w-full\"\r\n-                              onClick={(e) => {\r\n-                                e.stopPropagation();\r\n-                                setIsSidebarCollapsed(false);\r\n-                                setIsSidebarLocked(true);\r\n-                              }}\r\n-                            >\r\n-                              <SelectValue placeholder=\"Select Lesson\" />\r\n-                            </SelectTrigger>\r\n-                            <SelectContent>\r\n-                              {lessons\r\n-                                .filter((lesson): lesson is Lesson => lesson !== undefined && lesson !== null)\r\n-                                .map((lesson: Lesson) => (\r\n-                                  <SelectItem \r\n-                                    key={`lesson-${lesson.id || 'new'}`} \r\n-                                    value={lesson.id || ''}\r\n-                                  >\r\n-                                    <div className=\"flex items-center gap-2\">\r\n-                                      <BookOpen className=\"h-4 w-4 text-primary\" />\r\n-                                      {lesson.title || 'Untitled Lesson'}\r\n-                                    </div>\r\n-                                  </SelectItem>\r\n-                                ))}\r\n-                            </SelectContent>\r\n-                          </Select>\r\n-                    <Button \r\n-                            variant=\"outline\" \r\n-                            size=\"sm\" \r\n-                            className=\"w-full gap-2\"\r\n-                        onClick={() => setModalState({ ...modalState, showAddLesson: true })}\r\n-                          >\r\n-                            <Plus className=\"h-4 w-4\" />\r\n-                            Add New Lesson\r\n-                    </Button>\r\n-                      </div>\r\n-                        )}\r\n-                      </>\r\n-                    )}\r\n-                  </CardContent>\r\n-                </Card>\r\n-              </div>\r\n-\r\n-              {/* Collapsed view */}\r\n-              {isSidebarCollapsed && (\r\n-                <div className=\"absolute inset-0 flex flex-col items-center pt-12 gap-4\">\r\n-                  <BookOpen className=\"h-6 w-6 text-muted-foreground\" />\r\n-                  <div className=\"w-px h-full bg-border\" />\r\n-                </div>\r\n-              )}\r\n-            </Card>\r\n-          </div>\r\n-        \r\n-\r\n-          {/* Right Content Area */}\r\n-          <div className=\"flex-1 overflow-y-auto\">\r\n-            {isNavigating ? (\r\n-              <div className=\"flex items-center justify-center h-[400px]\">\r\n-                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n-                <span className=\"ml-3\">Loading...</span>\r\n-              </div>\r\n-            ) : (\r\n-              <>\r\n-                {!selectedGradeId ? (\r\n-                  // Question Types Display Section\r\n-                  <div className=\"space-y-6\">\r\n-                    <Card>\r\n-                      <CardHeader>\r\n-                        <div className=\"flex items-center justify-between\">\r\n-                          <div>\r\n-                            <CardTitle className=\"text-xl font-semibold\">Available Question Types</CardTitle>\r\n-                            <CardDescription>Browse through different question formats and examples</CardDescription>\r\n-                          </div>\r\n-                          <TooltipProvider>\r\n-                            <Tooltip>\r\n-                              <TooltipTrigger>\r\n-                                <HelpCircle className=\"h-5 w-5 text-muted-foreground\" />\r\n-                              </TooltipTrigger>\r\n-                              <TooltipContent>\r\n-                                <p>Click on each type to see detailed examples</p>\r\n-                              </TooltipContent>\r\n-                            </Tooltip>\r\n-                          </TooltipProvider>\r\n-                        </div>\r\n-                      </CardHeader>\r\n-                      <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n-                        {Object.entries(QUESTION_TYPES).map(([type, details]) => (\r\n-                          <Card key={type} className=\"cursor-pointer hover:bg-accent/50 transition-colors\">\r\n-                            <CardHeader className=\"p-4\">\r\n-                              <div className=\"flex items-center justify-between mb-2\">\r\n-                                <Badge variant=\"outline\" className=\"bg-primary/5 text-lg\">\r\n-                                  {details.label}\r\n-                                </Badge>\r\n-                              </div>\r\n-                              <CardDescription className=\"text-sm\">\r\n-                                {details.description || 'No description available'}\r\n-                              </CardDescription>\r\n-                              <div className=\"mt-4\">\r\n-                                <div className=\"text-sm font-medium mb-2\">Example:</div>\r\n-                                <div className=\"p-3 rounded-md bg-muted/50 text-sm\">\r\n-                                  {type === 'multiple-choice' && (\r\n-                                    <>\r\n-                                      <div className=\"font-medium mb-2\">Q: What is the capital of France?</div>\r\n-                                      <div className=\"space-y-1 pl-4\">\r\n-                                        <div>A) Paris</div>\r\n-                                        <div>B) London</div>\r\n-                                        <div>C) Berlin</div>\r\n-                                        <div>D) Madrid</div>\r\n-                                      </div>\r\n-                                    </>\r\n-                                  )}\r\n-                                  {type === 'fill-in-blank' && (\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <div>Complete the sentence:</div>\r\n-                                      <div>The sun rises in the <span className=\"bg-primary/20 px-2 rounded\">_____</span> and sets in the <span className=\"bg-primary/20 px-2 rounded\">_____</span>.</div>\r\n-                                    </div>\r\n-                                  )}\r\n-                                  {type === 'true-false' && (\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <div className=\"font-medium\">Statement:</div>\r\n-                                      <div>The Earth is flat.</div>\r\n-                                      <div className=\"mt-2\">\r\n-                                        <Badge variant=\"outline\" className=\"mr-2\">True</Badge>\r\n-                                        <Badge variant=\"outline\">False</Badge>\r\n-                                      </div>\r\n-                                    </div>\r\n-                                  )}\r\n-                                  {type === 'matching' && (\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <div className=\"font-medium mb-2\">Match the countries with their capitals:</div>\r\n-                                      <div className=\"grid grid-cols-2 gap-4\">\r\n-                                        <div>\r\n-                                          1. France<br />\r\n-                                          2. Germany<br />\r\n-                                          3. Spain\r\n-                                        </div>\r\n-                                        <div>\r\n-                                          • Berlin<br />\r\n-                                          • Paris<br />\r\n-                                          • Madrid\r\n-                                        </div>\r\n-                                      </div>\r\n-                                    </div>\r\n-                                  )}\r\n-                                  {type === 'ordering' && (\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <div className=\"font-medium mb-2\">Arrange in chronological order:</div>\r\n-                                      <div className=\"space-y-1\">\r\n-                                        <Badge variant=\"outline\" className=\"mr-2\">1</Badge>World War II<br />\r\n-                                        <Badge variant=\"outline\" className=\"mr-2\">2</Badge>Industrial Revolution<br />\r\n-                                        <Badge variant=\"outline\" className=\"mr-2\">3</Badge>Renaissance\r\n-                                      </div>\r\n-                                    </div>\r\n-                                  )}\r\n-                                  {type === 'short-answer' && (\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <div className=\"font-medium\">Question:</div>\r\n-                                      <div>Explain the water cycle in 2-3 sentences.</div>\r\n-                                      <div className=\"mt-2 p-2 border border-dashed rounded-md border-primary/30\">\r\n-                                        Answer space\r\n-                                      </div>\r\n-                                    </div>\r\n-                                  )}\r\n-                                </div>\r\n-                              </div>\r\n-                            </CardHeader>\r\n-                          </Card>\r\n-                        ))}\r\n-                      </CardContent>\r\n-                    </Card>\r\n-                  </div>\r\n-                ) : isViewMode ? (\r\n-                  <div className=\"space-y-6\">\r\n-                    {selectedGradeId ? (\r\n-                      <div className=\"grid grid-cols-1 gap-6\">\r\n-                        {topics.map((topic) => (\r\n-                          <Card key={topic.id} className=\"border-l-4 border-l-primary\">\r\n-                            <CardHeader>\r\n-                              <div className=\"flex items-center justify-between\">\r\n-                                <h3 className=\"text-lg font-semibold\">{topic.title}</h3>\r\n-                              </div>\r\n-                            </CardHeader>\r\n-                            <CardContent>\r\n-                              <div className=\"space-y-4\">\r\n-                                {subtopics\r\n-                                  .filter(subtopic => subtopic.topic_id === topic.id)\r\n-                                  .map((subtopic, index) => (\r\n-                                    <div key={subtopic.id || `subtopic-${index}`} className=\"border-l-2 pl-4\">\r\n-                                      <h4 className=\"text-md font-medium mb-2\">{subtopic.name || 'Untitled Subtopic'}</h4>\r\n-                                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n-                                        {lessons\r\n-                                          .filter(lesson => lesson.subtopic_id === subtopic.id)\r\n-                                          .map((lesson) => (\r\n-                                            <Card \r\n-                                              key={lesson.id} \r\n-                                              className={cn(\r\n-                                                \"cursor-pointer transition-all duration-200\",\r\n-                                                \"hover:shadow-md hover:translate-y-[-2px]\",\r\n-                                                \"hover:bg-accent/50 hover:border-primary/50\",\r\n-                                                \"active:translate-y-[0px]\",\r\n-                                                currentLessonId === lesson.id && \"border-primary bg-accent/50 shadow-md\",\r\n-                                                \"group\" // Enable group hover effects\r\n-                                              )}\r\n-                                              onClick={() => handleLessonSelect(lesson.id)}\r\n-                                            >\r\n-                                              <CardHeader className=\"p-4\">\r\n-                                                <div className=\"flex flex-col gap-2\">\r\n-                                                  <div className=\"flex items-center justify-between\">\r\n-                                                    <div className=\"flex items-center gap-2\">\r\n-                                                      <BookOpen className={cn(\r\n-                                                        \"h-4 w-4 text-primary\",\r\n-                                                        \"transition-transform duration-200\",\r\n-                                                        \"group-hover:scale-110\"\r\n-                                                      )} />\r\n-                                                      <span className=\"font-medium\">{lesson.title}</span>\r\n-                                                    </div>\r\n-                                                    <Button\r\n-                                                      variant=\"outline\"\r\n-                                                      size=\"sm\"\r\n-                                                      className={cn(\r\n-                                                        \"opacity-0 group-hover:opacity-100\",\r\n-                                                        \"transition-all duration-200\",\r\n-                                                        \"hover:bg-primary hover:text-primary-foreground\"\r\n-                                                      )}\r\n-                                                      disabled={!lesson.content || currentLessonId !== lesson.id}\r\n-                                                      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\r\n-                                                        e.stopPropagation();\r\n-                                                        window.location.href = `/teacher/lessons/${lesson.id}`;\r\n-                                                      }}\r\n-                                                    >\r\n-                                                      Start Lesson\r\n-                                                    </Button>\r\n-                                                  </div>\r\n-                                                  <div className=\"flex items-center gap-2\">\r\n-                                                    <Badge variant=\"outline\" className={cn(\r\n-                                                      \"bg-primary/5\",\r\n-                                                      \"transition-colors duration-200\",\r\n-                                                      \"group-hover:bg-primary/10\"\r\n-                                                    )}>\r\n-                                                      {lesson.questions?.length || 0} Questions\r\n-                                                    </Badge>\r\n-                                                    <Badge variant=\"outline\" className={cn(\r\n-                                                      \"bg-primary/5\",\r\n-                                                      \"transition-colors duration-200\",\r\n-                                                      \"group-hover:bg-primary/10\"\r\n-                                                    )}>\r\n-                                                      {lesson.activities?.length || 0} Activities\r\n-                                                    </Badge>\r\n-                                                  </div>\r\n-                                                </div>\r\n-                                              </CardHeader>\r\n-                                            </Card>\r\n-                                          ))}\r\n-                                      </div>\r\n-                                    </div>\r\n-                                  ))}\r\n-                              </div>\r\n-                            </CardContent>\r\n-                          </Card>\r\n-                        ))}\r\n-                      </div>\r\n-                    ) : (\r\n-                      <div className=\"text-center py-20\">\r\n-                        <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\r\n-                        <h3 className=\"text-lg font-medium\">Select a Grade</h3>\r\n-                        <p className=\"text-sm text-muted-foreground\">\r\n-                          Choose a grade from the left panel to start managing content\r\n-                        </p>\r\n-                      </div>\r\n-                    )}\r\n-                  </div>\r\n-                ) : (\r\n-                  // Edit Mode Content\r\n-                  <div className=\"space-y-4\">\r\n-                    {/* Lesson Title */}\r\n-                    <Card>\r\n-                      <CardHeader>\r\n-                        <div className=\"flex items-center justify-between mb-4\">\r\n-                          <h2 className=\"text-2xl font-bold\">Lesson Content</h2>\r\n-                                                    <Button\r\n-                                                      variant=\"outline\"\r\n-                                                      size=\"sm\"\r\n-                            onClick={() => setIsContentEditorOpen(true)}\r\n-                          >\r\n-                            <Pencil className=\"h-4 w-4 mr-2\" />\r\n-                            Edit Content\r\n-                          </Button>\r\n-                        </div>\r\n-                      </CardHeader>\r\n-                      <CardContent className=\"space-y-4\">\r\n-                        {/* Lesson Title */}\r\n-                        <div className=\"flex items-center justify-between\">\r\n-                          <div className=\"space-y-1\">\r\n-                            <Label>Lesson Title</Label>\r\n-                            <InlineEdit\r\n-                              value={lessonTitle}\r\n-                              onSave={async (newTitle) => {\r\n-                                setLessonTitle(newTitle);\r\n-                                await handleSaveLesson();\r\n-                              }}\r\n-                              isEditing={isEditingTitle}\r\n-                              setIsEditing={setIsEditingTitle}\r\n-                              placeholder=\"Enter lesson title\"\r\n-                              className=\"text-lg font-medium\"\r\n-                            />\r\n-                          </div>\r\n-                        </div>\r\n-\r\n-                        {/* Content Editor and Display */}\r\n-                        <div className=\"space-y-4\">\r\n-                          {isContentEditorOpen ? (\r\n-                            <div className=\"border rounded-lg p-4\">\r\n-                              <div className=\"mb-4\">\r\n-                                <Label>Content Heading</Label>\r\n-                                <InlineEdit\r\n-                                  value={contentHeading}\r\n-                                  onSave={(newHeading) => setContentHeading(newHeading)}\r\n-                                  isEditing={isEditingHeading}\r\n-                                  setIsEditing={setIsEditingHeading}\r\n-                                  placeholder=\"Add content heading\"\r\n-                                  className=\"text-base text-muted-foreground\"\r\n-                                />\r\n-                              </div>\r\n-                              <RichTextEditor\r\n-                                value={lessonContent}\r\n-                                onChange={setLessonContent}\r\n-                                onSave={async (content) => {\r\n-                                  await handleContentSave(content);\r\n-                                  setIsContentEditorOpen(false);\r\n-                                }}\r\n-                                placeholder=\"Add lesson content here...\"\r\n-                              />\r\n-                            </div>\r\n-                          ) : lessonContent ? (\r\n-                            <div className=\"prose prose-sm max-w-none\">\r\n-                              {contentHeading && (\r\n-                                <h3 className=\"text-lg font-semibold mb-2\">{contentHeading}</h3>\r\n-                              )}\r\n-                              <div dangerouslySetInnerHTML={{ __html: lessonContent }} />\r\n-                            </div>\r\n-                          ) : (\r\n-                            <div className=\"text-center py-8 text-muted-foreground\">\r\n-                              Click 'Edit Content' to add lesson content\r\n-                            </div>\r\n-                          )}\r\n-                        </div>\r\n-                      </CardContent>\r\n-                    </Card>\r\n-\r\n-                    {/* Tabs */}\r\n-                    <Tabs defaultValue=\"questions\" className=\"mt-6\">\r\n-                    <TabsList className=\"grid w-full grid-cols-2\">\r\n-                        <TabsTrigger value=\"questions\">\r\n-                          <MessageSquare className=\"h-4 w-4 mr-2\" />\r\n-                        Questions\r\n-                      </TabsTrigger>\r\n-                        <TabsTrigger value=\"activities\">\r\n-                          <ActivityIcon className=\"h-4 w-4 mr-2\" />\r\n-                        Activities\r\n-                      </TabsTrigger>\r\n-                    </TabsList>\r\n-\r\n-                      {/* Questions Tab */}\r\n-                      <TabsContent value=\"questions\" className=\"space-y-4\">\r\n-                      <CardHeader>\r\n-                          <CardDescription>Add and manage questions for this lesson</CardDescription>\r\n-                      </CardHeader>\r\n-                        {questions.map((question, index) => (\r\n-                          <Card key={index} className={cn(\r\n-                            \"relative border-l-4 transition-colors duration-200\",\r\n-                            expandedQuestion === index ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\r\n-                          )}>\r\n-                            <CardHeader className=\"pb-3\">\r\n-                              <div className=\"flex items-center justify-between gap-4\">\r\n-                                <div className=\"flex items-center gap-3 min-w-0 flex-1\">\r\n-                                  <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n-                                    <span className=\"px-2 py-1 bg-primary/10 rounded-md text-sm font-semibold text-primary whitespace-nowrap\">\r\n-                                      Q {index + 1}\r\n-                                    </span>\r\n-                                    <Badge variant=\"outline\" className=\"whitespace-nowrap\">\r\n-                                      {QUESTION_TYPES[question.type as keyof typeof QUESTION_TYPES]?.label || question.type}\r\n-                                    </Badge>\r\n-                                    {question.isDraft && (\r\n-                                      <Badge variant=\"secondary\" className=\"whitespace-nowrap\">Draft</Badge>\r\n-                                )}\r\n-                                  </div>\r\n-                                      {expandedQuestion !== index && (\r\n-                                        <div className=\"text-sm text-muted-foreground truncate\">\r\n-                                          {question.title || 'No question text'} - {question.data?.content || 'No question texts'}\r\n-                                        </div>\r\n-                                      )}\r\n-                                    </div>\r\n-                                    <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n-                                      <Button\r\n-                                        variant=\"ghost\"\r\n-                                        size=\"sm\"\r\n-                                        onClick={() => handleQuestionExpand(index)}\r\n-                                      >\r\n-                                        {expandedQuestion === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n-                                      </Button>\r\n-                                      <Button\r\n-                                        variant=\"ghost\"\r\n-                                        size=\"sm\"\r\n-                                        onClick={() => handleRemoveQuestion(index)}\r\n-                                      >\r\n-                                        <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n-                                      </Button>\r\n-                                    </div>\r\n-                                  </div>\r\n-                                </CardHeader>\r\n-                                {expandedQuestion === index && (\r\n-                                  <CardContent>\r\n-                                    <QuestionForm\r\n-                                      key={index}\r\n-                                      question={{ \r\n-                                        ...question, \r\n-                                        lesson_id: currentLessonId || '',\r\n-                                        type: isValidQuestionType(question.type) ? question.type : 'speaking',\r\n-                                        data: {\r\n-                                          prompt: question.data?.prompt ?? '',\r\n-                                          teacher_script: question.data?.teacher_script ?? '',\r\n-                                          followup_prompt: question.data?.followup_prompt ?? [],\r\n-                                          sample_answer: question.data?.sample_answer ?? '',\r\n-                                          \r\n-                                        } \r\n-                                      }}\r\n-                                      index={index}\r\n-                                      onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\r\n-                                        await handleUpdateQuestion(index, {\r\n-                                          ...updatedQuestion,\r\n-                                          data: {\r\n-                                            prompt: updatedQuestion.data?.prompt ?? '',\r\n-                                            teacher_script: updatedQuestion.data?.teacher_script ?? '',\r\n-                                            followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\r\n-                                            sample_answer: updatedQuestion.data?.sample_answer ?? '',\r\n-                                            metadata: updatedQuestion.metadata ?? {},\r\n-                                            },\r\n-                                            correct_answer: updatedQuestion.correct_answer ?? '',\r\n-                                            content: updatedQuestion.content ?? ''  // Add default value\r\n-                                        });\r\n-                                      }}\r\n-                                      onRemove={handleRemoveQuestion}\r\n-                                      onAddExercisePrompt={handleAddExercisePrompt}\r\n-                                      onRemoveExercisePrompt={handleRemoveExercisePrompt}\r\n-                                      onExercisePromptChange={handleExercisePromptChange}\r\n-                                    /><Button \r\n-                                    size=\"sm\"\r\n-                                    variant=\"outline\"\r\n-                                    onClick={() => handleSaveQuestion(question, index)}\r\n-                                    className=\"ml-2\"\r\n-                                  >\r\n-                                    {questionSaveStatuses.find(s => s.id === question.id)?.status === 'saving' ? (\r\n-                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n-                                    ) : (\r\n-                                      <Save className=\"h-4 w-4 mr-2\" />\r\n-                                    )}\r\n-                                    Save Question\r\n-                                                    </Button>\r\n-                                    {/* Exercise Prompts with Save Buttons */}\r\n-                                    {question.exercisePrompts?.map((prompt, promptIndex) => (\r\n-                                      <div key={`${question.id}-prompt-${promptIndex}`} className=\"mt-4\"> {/* Updated key */}\r\n-                                        <div className=\"flex items-center justify-between mb-2\">\r\n-                                          <h4 className=\"text-sm font-medium\">Exercise Prompt {promptIndex + 1}</h4>\r\n-                                          <div className=\"flex items-center gap-2\">\r\n-                                            <TooltipProvider>\r\n-                                              <Tooltip>\r\n-                                                <TooltipTrigger asChild>\r\n-                                                  <Button\r\n-                                                    size=\"sm\"\r\n-                                                    variant=\"outline\"\r\n-                                                    onClick={() => handleSavePrompt(question.id, prompt, promptIndex)}\r\n-                                                    disabled={promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving'}\r\n-                                                  >\r\n-                                                    {promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving' ? (\r\n-                                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n-                                                    ) : (\r\n-                                                      <Save className=\"h-4 w-4 mr-2\" />\r\n-                                                    )}\r\n-                                                    Save Prompt\r\n-                                                  </Button>\r\n-                                                </TooltipTrigger>\r\n-                                                <TooltipContent>\r\n-                                                  {`Status: ${promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}`}\r\n-                                                </TooltipContent>\r\n-                                              </Tooltip>\r\n-                                            </TooltipProvider>\r\n-                                            <Badge variant={\r\n-                                              promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saved'\r\n-                                                ? 'secondary'\r\n-                                                : promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'error'\r\n-                                                ? 'destructive'\r\n-                                                : 'default'\r\n-                                            }>\r\n-                                              {promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}\r\n-                                            </Badge>\r\n-                                                  </div>\r\n-                                        </div>\r\n-                                        <ExercisePromptCard\r\n-                                          key={prompt.id} // Add a unique key here\r\n-                                          prompt={prompt}\r\n-                                          promptIndex={promptIndex}\r\n-                                          onRemove={() => handleRemoveExercisePrompt(index, promptIndex)}\r\n-                                          onUpdate={(updatedPrompt: ExercisePrompt) => {\r\n-                                            // Prevent duplicate updates\r\n-                                            if (updatedPrompt.id === prompt.id) {\r\n-                                              handleExercisePromptChange(index, promptIndex, updatedPrompt);\r\n-                                            }\r\n-                                          }}\r\n-                                        />\r\n-                                      </div>\r\n-                                    ))}\r\n-                                  </CardContent>\r\n-                                )}\r\n-                              </Card>\r\n-                            ))}\r\n-\r\n-                            {/* Add Question Button */}\r\n-                            <div className=\"flex items-center justify-between\">\r\n-                              <QuestionTypeSelect \r\n-                                value={selectedQuestionType} \r\n-                                onChange={handleQuestionTypeChange}\r\n-                              />\r\n-                                        <Button\r\n-                                          onClick={handleAddQuestion}\r\n-                                          disabled={!selectedQuestionType}\r\n-                                        >\r\n-                                <Plus className=\"h-4 w-4 mr-2\" />\r\n-                                          Add Question\r\n-                                        </Button>\r\n-                                      </div>\r\n-                      </TabsContent>\r\n-\r\n-                      {/* Activities Tab */}\r\n-                      <TabsContent value=\"activities\" className=\"space-y-4\">\r\n-                      <CardHeader>\r\n-                          <CardDescription>Add and manage activities for this lesson</CardDescription>\r\n-                      </CardHeader>\r\n-                        {activities.map((activity, index) => (\r\n-                          <Card key={index}>\r\n-                            <CardHeader className=\"pb-3\">\r\n-                              <div className=\"flex items-center justify-between\">\r\n-                                  <div className=\"flex items-center gap-2\">\r\n-                                  <Badge variant=\"outline\">Activity {index + 1}</Badge>\r\n-                                  </div>\r\n-                                <div className=\"flex items-center gap-2\">\r\n-                                  <Button\r\n-                                    variant=\"ghost\"\r\n-                                    size=\"sm\"\r\n-                                    onClick={() => handleActivityExpand(index)}\r\n-                                  >\r\n-                                    {expandedActivity === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n-                                  </Button>\r\n-                                  <Button\r\n-                                    variant=\"ghost\"\r\n-                                    size=\"sm\"\r\n-                                    onClick={() => handleRemoveActivity(index)}\r\n-                                  >\r\n-                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n-                                  </Button>\r\n-                                </div>\r\n-                              </div>\r\n-                            </CardHeader>\r\n-                            {expandedActivity === index && (\r\n-                              <CardContent>\r\n-                                <div className=\"space-y-4\">\r\n-                                  <div className=\"space-y-2\">\r\n-                                    <Label>Instructions</Label>\r\n-                                    <Textarea\r\n-                                      value={activity.instructions}\r\n-                                      onChange={(e) => handleUpdateActivity(index, {\r\n-                                        ...activity,\r\n-                                        instructions: e.target.value\r\n-                                      })}\r\n-                                      placeholder=\"Enter activity instructions\"\r\n-                                    />\r\n-                                  </div>\r\n-                                    \r\n-                                    {/* Media Section */}\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <Label>Media</Label>\r\n-                                      {activity.media?.map((media, mediaIndex) => (\r\n-                                        <div key={mediaIndex} className=\"flex items-center gap-2\">\r\n-                                          <Input\r\n-                                            value={media.url}\r\n-                                            onChange={(e) => {\r\n-                                              const updatedMedia = [...(activity.media || [])];\r\n-                                              updatedMedia[mediaIndex] = {\r\n-                                                type: media.type,\r\n-                                                url: e.target.value\r\n-                                              };\r\n-                                              handleUpdateActivity(index, {\r\n-                                                ...activity,\r\n-                                                media: updatedMedia\r\n-                                              });\r\n-                                            }}\r\n-                                            placeholder=\"Media URL\"\r\n-                                          />\r\n-                                          <Select\r\n-                                            value={media.type}\r\n-                                            onValueChange={(value) => {\r\n-                                              const updatedMedia = [...(activity.media || [])];\r\n-                                              updatedMedia[mediaIndex] = {\r\n-                                                type: value as 'image' | 'gif' | 'video',\r\n-                                                url: media.url\r\n-                                              };\r\n-                                              handleUpdateActivity(index, {\r\n-                                                ...activity,\r\n-                                                media: updatedMedia\r\n-                                              });\r\n-                                            }}\r\n-                                          >\r\n-                                            <SelectTrigger className=\"w-[120px]\">\r\n-                                              <SelectValue placeholder=\"Type\" />\r\n-                                            </SelectTrigger>\r\n-                                            <SelectContent>\r\n-                                              <SelectItem value=\"image\">Image</SelectItem>\r\n-                                              <SelectItem value=\"gif\">GIF</SelectItem>\r\n-                                              <SelectItem value=\"video\">Video</SelectItem>\r\n-                                            </SelectContent>\r\n-                                          </Select>\r\n-                                <Button\r\n-                                            variant=\"ghost\"\r\n-                                            size=\"sm\"\r\n-                                  onClick={() => {\r\n-                                              const updatedMedia = (activity.media || []).filter((_, i) => i !== mediaIndex);\r\n-                                              handleUpdateActivity(index, {\r\n-                                                ...activity,\r\n-                                                media: updatedMedia\r\n-                                          });\r\n-                                          }}\r\n-                                  >\r\n-                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n-                                  </Button>\r\n-                                </div>\r\n-                                        ))}\r\n-                                  <Button\r\n-                                    variant=\"outline\"\r\n-                                    size=\"sm\"\r\n-                                            onClick={() => {\r\n-                                              handleUpdateActivity(index, {\r\n-                                                ...activity,\r\n-                                                media: [\r\n-                                                  ...(activity.media || [])  ,\r\n-                                                  { url: '', type: 'image' }\r\n-                                                ]\r\n-                                              });\r\n-                                            }}\r\n-                                  >\r\n-                                    <Plus className=\"h-4 w-4 mr-2\" />\r\n-                                            Add Media\r\n-                                  </Button>\r\n-                                </div>\r\n-                                      </div>\r\n-                                    </CardContent>\r\n-                                  )}\r\n-                                </Card>\r\n-                              ))}\r\n-\r\n-                              {/* Add Activity Button */}\r\n-                              <Button\r\n-                                onClick={handleAddActivity}\r\n-                                className=\"w-full\"\r\n-                              >\r\n-                                <Plus className=\"h-4 w-4 mr-2\" />\r\n-                                Add Activity\r\n-                              </Button>\r\n-                          </TabsContent>\r\n-                        </Tabs>\r\n-                        </div>\r\n-                )}\r\n-\r\n-                    {/* Floating Save Button */}\r\n-                    <div className=\"fixed bottom-8 right-8 flex items-center gap-4\">\r\n-                      {saveProgress !== 'idle' && (\r\n-                        <div className={cn(\r\n-                          \"flex items-center gap-2 rounded-lg px-4 py-2 shadow-lg\",\r\n-                          {\r\n-                            \"bg-background border\": saveProgress === 'saving',\r\n-                            \"bg-green-500 text-white\": saveProgress === 'saved',\r\n-                            \"bg-destructive text-destructive-foreground\": saveProgress === 'error'\r\n-                          }\r\n-                        )}>\r\n-                          {saveProgress === 'saving' && (\r\n-                            <>\r\n-                              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n-                              <span className=\"text-sm\">Saving changes...</span>\r\n-                            </>\r\n-                          )}\r\n-                          {saveProgress === 'saved' && (\r\n-                            <>\r\n-                              <Check className=\"h-4 w-4\" />\r\n-                              <span className=\"text-sm\">Changes saved</span>\r\n-                            </>\r\n-                          )}\r\n-                          {saveProgress === 'error' && (\r\n-                            <>\r\n-                              <X className=\"h-4 w-4\" />\r\n-                              <span className=\"text-sm\">Error saving changes</span>\r\n-                            </>\r\n-                          )}\r\n-                        </div>\r\n-                      )}\r\n-                      <Button\r\n-                        onClick={handleSaveLesson}\r\n-                        disabled={saveProgress === 'saving'}\r\n-                        className=\"shadow-lg\"\r\n-                      >\r\n-                        {saveProgress === 'saving' ? (\r\n-                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\r\n-                        ) : (\r\n-                          <Save className=\"h-4 w-4 mr-2\" />\r\n-                        )}\r\n-                        {saveProgress === 'saving' ? 'Saving...' : 'Save Lesson'}\r\n-                      </Button>\r\n-                    </div>\r\n-                  </>\r\n-            )}\r\n-    </div>\r\n-    \r\n-\r\n-      {/* Floating Save Button */}\r\n-      {selectedSubtopicId && currentLessonId && (\r\n-          <div className=\"fixed bottom-4 right-4 flex flex-col gap-2\">\r\n-            <TooltipProvider>\r\n-              <Tooltip>\r\n-                <TooltipTrigger asChild>\r\n-                  <Button\r\n-                    size=\"icon\"\r\n-                    className=\"rounded-full h-12 w-12 shadow-lg\"\r\n-                    onClick={handleSaveLesson}\r\n-                    disabled={!selectedSubtopicId || !lessonTitle || questions.length === 0}\r\n-                  >\r\n-                    <Save className=\"h-6 w-6\" />\r\n-                  </Button>\r\n-                </TooltipTrigger>\r\n-                <TooltipContent>\r\n-                  <p>Save Lesson (Ctrl+S)</p>\r\n-                </TooltipContent>\r\n-              </Tooltip>\r\n-            </TooltipProvider>\r\n-          </div>\r\n-        )}\r\n-        <SaveFeedback />\r\n-\r\n-        {/* Add Grade Modal - do not delete */}\r\n-        {/* {modalState.showAddGrade && (\r\n-          <Dialog \r\n-            open={modalState.showAddGrade} \r\n-            onOpenChange={(open) => handleModalStateChange('showAddGrade', open)}\r\n-          >\r\n-            <DialogContent \r\n-              className=\"sm:max-w-[425px]\"\r\n-              onEscapeKeyDown={cleanupModalState}\r\n-              onPointerDownOutside={cleanupModalState}\r\n-            >\r\n-              <DialogHeader>\r\n-                <DialogTitle>Add New Grade</DialogTitle>\r\n-                <DialogDescription>Enter the details for the new grade.</DialogDescription>\r\n-              </DialogHeader>\r\n-              <div className=\"space-y-4 py-4\">\r\n-                <div className=\"space-y-2\">\r\n-                  <Label htmlFor=\"grade-name\">Grade Name</Label>\r\n-                  <Input\r\n-                    id=\"grade-name\"\r\n-                    value={newItemData.name}\r\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n-                    placeholder=\"Enter grade name\"\r\n-                  />\r\n-      </div>\r\n-              </div>\r\n-              <DialogFooter>\r\n-                <Button variant=\"outline\" onClick={() => {\r\n-                  setModalState({ ...modalState, showAddGrade: false });\r\n-                  setNewItemData({ name: '', description: '' });\r\n-                }}>\r\n-                  Cancel\r\n-                </Button>\r\n-                <Button onClick={handleCreateGrade} disabled={!newItemData.name}>Create Grade</Button>\r\n-              </DialogFooter>\r\n-            </DialogContent>\r\n-          </Dialog>\r\n-        )} */}\r\n-\r\n-        {/* Add Topic Modal */}\r\n-        {modalState.showAddTopic && (\r\n-          <Dialog \r\n-            open={modalState.showAddTopic} \r\n-            onOpenChange={(open) => handleModalStateChange('showAddTopic', open)}\r\n-          >\r\n-            <DialogContent \r\n-              className=\"sm:max-w-[425px]\"\r\n-              onEscapeKeyDown={cleanupModalState}\r\n-              onPointerDownOutside={cleanupModalState}\r\n-            >\r\n-              <DialogHeader>\r\n-                <DialogTitle>Add New Topic</DialogTitle>\r\n-                <DialogDescription>Enter the details for the new topic.</DialogDescription>\r\n-              </DialogHeader>\r\n-              <div className=\"space-y-4 py-4\">\r\n-                <div className=\"space-y-2\">\r\n-                  <Label htmlFor=\"topic-name\">Topic Name</Label>\r\n-                  <Input\r\n-                    id=\"topic-name\"\r\n-                    value={newItemData.name}\r\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n-                    placeholder=\"Enter topic name\"\r\n-                  />\r\n-                </div>\r\n-              </div>\r\n-              <DialogFooter>\r\n-                <Button variant=\"outline\" onClick={() => {\r\n-                  setModalState({ ...modalState, showAddTopic: false });\r\n-                  setNewItemData({ name: '', description: '' });\r\n-                }}>\r\n-                  Cancel\r\n-                </Button>\r\n-                <Button onClick={handleCreateTopic} disabled={!newItemData.name}>Create Topic</Button>\r\n-              </DialogFooter>\r\n-            </DialogContent>\r\n-          </Dialog>\r\n-        )}\r\n-\r\n-        {/* Add Subtopic Modal */}\r\n-        {modalState.showAddSubtopic && (\r\n-          <Dialog \r\n-            open={modalState.showAddSubtopic} \r\n-            onOpenChange={(open) => handleModalStateChange('showAddSubtopic', open)}\r\n-          >\r\n-            <DialogContent \r\n-              className=\"sm:max-w-[425px]\"\r\n-              onEscapeKeyDown={cleanupModalState}\r\n-              onPointerDownOutside={cleanupModalState}\r\n-            >\r\n-              <DialogHeader>\r\n-                <DialogTitle>Add New Subtopic</DialogTitle>\r\n-                <DialogDescription>Enter the details for the new subtopic.</DialogDescription>\r\n-              </DialogHeader>\r\n-              <div className=\"space-y-4 py-4\">\r\n-                <div className=\"space-y-2\">\r\n-                  <Label htmlFor=\"subtopic-name\">Subtopic Name</Label>\r\n-                  <Input\r\n-                    id=\"subtopic-name\"\r\n-                    value={newItemData.name}\r\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n-                    placeholder=\"Enter subtopic name\"\r\n-                  />\r\n-                </div>\r\n-              </div>\r\n-              <DialogFooter>\r\n-                <Button variant=\"outline\" onClick={() => {\r\n-                  setModalState({ ...modalState, showAddSubtopic: false });\r\n-                  setNewItemData({ name: '', description: '' });\r\n-                }}>\r\n-                  Cancel\r\n-                </Button>\r\n-                <Button onClick={() => handleCreateSubtopic({ title: newItemData.name })} disabled={!newItemData.name}>Create Subtopic</Button>\r\n-              </DialogFooter>\r\n-            </DialogContent>\r\n-          </Dialog>\r\n-        )}\r\n-\r\n-        {/* Add Lesson Modal */}\r\n-        {modalState.showAddLesson && (\r\n-          <Dialog \r\n-            open={modalState.showAddLesson} \r\n-            onOpenChange={(open) => handleModalStateChange('showAddLesson', open)}\r\n-          >\r\n-            <DialogContent \r\n-              className=\"sm:max-w-[425px]\"\r\n-              onEscapeKeyDown={cleanupModalState}\r\n-              onPointerDownOutside={cleanupModalState}\r\n-            >\r\n-              <DialogHeader>\r\n-                <DialogTitle>Add New Lesson</DialogTitle>\r\n-                <DialogDescription>Enter the details for the new lesson.</DialogDescription>\r\n-              </DialogHeader>\r\n-              <div className=\"space-y-4 py-4\">\r\n-                <div className=\"space-y-2\">\r\n-                  <Label htmlFor=\"lesson-name\">Lesson Title</Label>\r\n-                  <Input\r\n-                    id=\"lesson-name\"\r\n-                    value={newItemData.name}\r\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n-                    placeholder=\"Enter lesson title\"\r\n-                  />\r\n-                </div>\r\n-              </div>\r\n-              <DialogFooter>\r\n-                <Button variant=\"outline\" onClick={() => {\r\n-                  setModalState({ ...modalState, showAddLesson: false });\r\n-                  setNewItemData({ name: '', description: '' });\r\n-                }}>\r\n-                  Cancel\r\n-                </Button>\r\n-                <Button onClick={handleCreateLesson} disabled={!newItemData.name}>Create Lesson</Button>\r\n-              </DialogFooter>\r\n-            </DialogContent>\r\n-          </Dialog>\r\n-        )}\r\n-      </div>\r\n-      <Toaster />\r\n-      </div>\r\n-  );\r\n+\"use client\";\n+\n+import { useState, useCallback, useEffect, useRef } from 'react';\n+import { toast } from 'sonner';\n+import { Toaster } from 'sonner';\n+import Link from 'next/link';\n+import {  Activity as ActivityIcon,  ArrowLeft,  BookOpen,  ChevronDown,  ChevronRight,  Check,  Edit,  Eye,  EyeOff,  HelpCircle,  Layers,  List,  MessageSquare,  Plus,  Save,  Trash as Trash2, X, Pencil, Lock, Unlock, RefreshCw, Clock, Bell, Moon, GraduationCap, MoreHorizontal, Loader2 } from 'lucide-react';\n+import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\n+import { Badge } from '@/components/ui/badge';\n+import { Button } from '@/components/ui/button';\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\n+import { Input } from '@/components/ui/input';\n+import { Label } from '@/components/ui/label';\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\n+import { Textarea } from '@/components/ui/textarea';\n+import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\n+import { cn } from '@/lib/utils';\n+import { API_BASE_URL, QUESTION_TYPES, isQuestionType } from './constants';\n+import { ExercisePrompt, Lesson } from './types';\n+import { QuestionFormProps, ExercisePromptCardProps, Activity, Grade, Topic, Subtopic as SubTopic } from './types';\n+import { QuestionForm } from './components/question-form';\n+import { ExercisePromptCard } from './components/exercise-prompt-card';\n+import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\n+import { supabase } from '@/lib/supabase';\n+import { useContentStore } from '@/lib/content/store';\n+import { contentService } from '@/lib/content/ContentService';\n+import { MediaPreview } from '@/components/ui/media-preview';\n+import { QuestionTypeSelect } from './components/question-type-select';\n+import { RichTextEditor } from '@/components/ui/rich-text-editor';\n+import {\n+  AlertDialog,\n+  AlertDialogAction,\n+  AlertDialogCancel,\n+  AlertDialogContent,\n+  AlertDialogDescription,\n+  AlertDialogFooter,\n+  AlertDialogHeader,\n+  AlertDialogTitle,\n+  AlertDialogTrigger,\n+} from \"@/components/ui/alert-dialog\";\n+import { debounce, isNull } from 'lodash';\n+import { PostgrestError } from '@supabase/supabase-js';\n+import { Question as ContentQuestion } from './types';  // Import the specific type\n+import { Trash } from \"lucide-react\";\n+import { AnimatePresence, motion } from 'framer-motion';\n+\n+\n+// Update the API endpoint to match your backend route\n+const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\n+\n+interface QuestionTypeSelectProps {\n+  value: string;\n+  onValueChange: (value: string) => void;\n+}\n+\n+// Add metadata type\n+interface LessonMetadata {\n+  lastEdited?: string;\n+  version?: number;\n+  tags?: string[];\n+  status?: 'draft' | 'published';\n+  authorId?: string;\n+  duration?: number;\n+  transcript?: string;\n+}\n+\n+type ContentType = 'html' | 'markdown' | 'rich-text' | 'text' | 'json';\n+\n+interface LessonContent {\n+  id: string;\n+  lesson_id: string;\n+  content: any[];\n+  metadata: {\n+    lastEdited?: string;\n+    version?: number;\n+    status?: 'draft' | 'published';\n+    authorId?: string;\n+  };\n+  content_type: string;\n+  order_index: number;\n+  updated_at: string;\n+  user_id: string;\n+}\n+\n+interface InlineEditProps {\n+  value: string;\n+  onSave: (value: string) => void;\n+  isEditing: boolean;\n+  setIsEditing: (value: boolean) => void;\n+  placeholder?: string;\n+  className?: string;\n+}\n+\n+// Add validation interface\n+interface QuestionValidation {\n+  isValid: boolean;\n+  message: string;\n+}\n+\n+// Add this type validation helper\n+const getQuestionTypeFields = (type: string) => {\n+  switch (type) {\n+    case 'multipleChoice':\n+      return {\n+        required: ['prompt', 'options', 'correctAnswer'],\n+        fields: {\n+          prompt: '',\n+          options: [],\n+          correctAnswer: '',\n+          teacherScript: '',\n+          explanation: ''\n+        }\n+      };\n+    case 'fillInBlank':\n+      return {\n+        required: ['prompt', 'blanks'],\n+        fields: {\n+          prompt: '',\n+          blanks: [],\n+          teacherScript: '',\n+          explanation: ''\n+        }\n+      };\n+    case 'trueFalse':\n+      return {\n+        required: ['prompt', 'correctAnswer'],\n+        fields: {\n+          prompt: '',\n+          correctAnswer: null,\n+          teacherScript: '',\n+          explanation: ''\n+        }\n+      };\n+    case 'matching':\n+      return {\n+        required: ['prompt', 'pairs'],\n+        fields: {\n+          prompt: '',\n+          pairs: [],\n+          teacherScript: '',\n+          explanation: ''\n+        }\n+      };\n+    case 'ordering':\n+      return {\n+        required: ['prompt', 'items'],\n+        fields: {\n+          prompt: '',\n+          items: [],\n+          correctOrder: [],\n+          teacherScript: '',\n+          explanation: ''\n+        }\n+      };\n+    case 'shortAnswer':\n+      return {\n+        required: ['prompt', 'sampleAnswer'],\n+        fields: {\n+          prompt: '',\n+          sampleAnswer: '',\n+          teacherScript: '',\n+          explanation: '',\n+          keywords: []\n+        }\n+      };\n+    case 'speaking':\n+      return {\n+        required: ['prompt', 'sampleAnswer'],\n+        fields: {\n+          prompt: '',\n+          sampleAnswer: '',\n+          teacherScript: '',\n+          audioPrompt: '',\n+          pronunciation: ''\n+        }\n+      };\n+    case 'listening':\n+      return {\n+        required: ['prompt', 'audioContent'],\n+        fields: {\n+          prompt: '',\n+          audioContent: '',\n+          transcript: '',\n+          teacherScript: '',\n+          comprehensionQuestions: []\n+        }\n+      };\n+    case 'listenAndRepeat':\n+      return {\n+        required: ['prompt', 'audioContent'],\n+        fields: {\n+          prompt: '',\n+          audioContent: '',\n+          targetPhrase: '',\n+          teacherScript: '',\n+          pronunciation: ''\n+        }\n+      };\n+    default:\n+      return {\n+        required: ['prompt'],\n+        fields: {\n+          prompt: '',\n+          teacherScript: ''\n+        }\n+      };\n+  }\n+}\n+\n+interface SaveStatus {\n+  id: string;\n+  status: 'draft' | 'saved' | 'saving' | 'error';\n+  lastSaved?: string;\n+}\n+\n+interface Question {\n+  id: string;\n+  type: string;\n+  lesson_id: string;\n+  title: string;\n+  content: string;\n+  metadata: Record<string, any>;\n+  data: Record<string, any>; // This allows dynamic field access\n+  correct_answer: string;\n+  exercisePrompts: ExercisePrompt[];\n+  isDraft?: boolean;\n+}\n+\n+// Add at the top of the file with other type definitions\n+type QuestionType = keyof typeof QUESTION_TYPES;\n+\n+// Add this type guard function\n+const isValidQuestionType = (type: string): type is QuestionType => {\n+  return type in QUESTION_TYPES;\n+};\n+\n+// Update handleAddQuestion\n+\n+\n+// Update validateQuestion\n+const validateQuestion = (question: Question): QuestionValidation => {\n+  const { required } = getQuestionTypeFields(question.type);\n+  const missingFields = required.filter(field => {\n+    const value = question.data?.[field];\n+    return !value || \n+      (Array.isArray(value) && value.length === 0) || \n+      (typeof value === 'string' && !value.trim());\n+  });\n+\n+  if (missingFields.length > 0) {\n+    return {\n+      isValid: false,\n+      message: `Missing required fields: ${missingFields.join(', ')}`\n+    };\n+  }\n+\n+  return { isValid: true, message: '' };\n+};\n+\n+// Add proper type for question data\n+interface QuestionData {\n+  id?: string;\n+  content?: string;\n+  type?: string;\n+  data?: {\n+    prompt?: string;\n+    teacher_script?: string;\n+    followup_prompt?: string[];\n+    sample_answer?: string;\n+    answer?: string;\n+  } | null;\n+  prompt: string;\n+  teacherScript: string;\n+  followup_prompt: string[];\n+  answer?: string;\n+  correct_answer?: string;\n+}\n+\n+// In your component where you handle questions\n+const handleQuestionData = (question: QuestionData) => {\n+  return {\n+    ...question,\n+    data: {\n+      prompt: question?.data?.prompt || '',\n+      teacher_script: question?.data?.teacher_script || '',\n+      followup_prompt: question?.data?.followup_prompt || [],\n+      sample_answer: question?.data?.sample_answer || undefined,  // Convert null to undefined\n+      answer: question?.data?.answer || undefined  // Convert null to undefined\n+    } as const,\n+    sampleAnswer: question?.correct_answer || ''\n+  };\n+};\n+\n+export default function LessonManagementPage() {\n+  // State declarations\n+  \n+  const [selectedGradeId, setSelectedGradeId] = useState<string | null>(null);\n+  const [selectedTopicId, setSelectedTopicId] = useState<string | null>(null);\n+  const [selectedSubtopicId, setSelectedSubtopicId] = useState<string | null>(null);\n+  const [lessonTitle, setLessonTitle] = useState<string>('');\n+  const [currentLessonId, setCurrentLessonId] = useState<string | null>(null);\n+  const [questions, setQuestions] = useState<Question[]>([]);\n+  const [saveProgress, setSaveProgress] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');\n+  const [activities, setActivities] = useState<Activity[]>([]);\n+  const [localBuffer, setLocalBuffer] = useState<{ timestamp: number; data: any } | null>(null);\n+  const [lastSavedToServer, setLastSavedToServer] = useState<number>(Date.now());\n+  const [selectedQuestionType, setSelectedQuestionType] = useState<string>('');\n+  const [editingQuestionIndex, setEditingQuestionIndex] = useState<number | null>(null);\n+  const [showHelpTips, setShowHelpTips] = useState(true);\n+  const [isNavigating, setIsNavigating] = useState(false);\n+  const [lessons, setLessons] = useState<Lesson[]>([]);\n+  const [grades, setGrades] = useState<Grade[]>([]);\n+  const [topics, setTopics] = useState<Topic[]>([]);\n+  const [subtopics, setSubtopics] = useState<SubTopic[]>([]);\n+  const [contentHeading, setContentHeading] = useState<string>('');\n+    // Add with your other state declarations\n+  const [isContentExpanded, setIsContentExpanded] = useState<boolean>(false);\n+  const [modalState, setModalState] = useState({\n+    showAddGrade: false,\n+    showAddTopic: false,\n+    showAddSubtopic: false,\n+    showAddLesson: false\n+  });\n+  const [isViewMode, setIsViewMode] = useState<boolean>(true);\n+  const [expandedGrade, setExpandedGrade] = useState<string | null>(null);\n+  const [expandedTopic, setExpandedTopic] = useState<string | null>(null);\n+  const [expandedSubtopic, setExpandedSubtopic] = useState<string | null>(null);\n+  const [expandedQuestion, setExpandedQuestion] = useState<number | null>(null);\n+  const [expandedActivity, setExpandedActivity] = useState<number | null>(null);\n+  const [newItemData, setNewItemData] = useState({\n+    name: '',\n+    description: ''\n+  });\n+  const [lessonContent, setLessonContent] = useState<string>('');\n+  const [isContentEditorOpen, setIsContentEditorOpen] = useState(false);\n+  const [isEditingTitle, setIsEditingTitle] = useState<boolean>(false);\n+  const [isEditingHeading, setIsEditingHeading] = useState<boolean>(false);\n+  const [isEditingDescription, setIsEditingDescription] = useState<boolean>(false);\n+  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\n+  const [isSidebarLocked, setIsSidebarLocked] = useState(true);\n+  const [alertDialogState, setAlertDialogState] = useState<{\n+    isOpen: boolean;\n+    title: string;\n+    message: string;\n+    onConfirm: (value?: unknown) => void;\n+  }>({\n+    isOpen: false,\n+    title: '',\n+    message: '',\n+    onConfirm: () => {}\n+  });\n+\n+  const { \n+    selectedGrade,\n+    setSelectedGrade,\n+    selectedTopic,\n+    setSelectedTopic,\n+    selectedSubtopic,\n+    setSelectedSubtopic,\n+    selectedLesson,\n+    setSelectedLesson\n+  } = useContentStore();\n+\n+  // Add new state for tracking save status\n+  interface SaveStatus {\n+    id: string;\n+    status: 'draft' | 'saved' | 'saving' | 'error' | 'draft';\n+    lastSaved?: string;\n+  }\n+\n+  const [questionSaveStatuses, setQuestionSaveStatuses] = useState<Array<{\n+    id: string;\n+    status: 'idle' | 'saving' | 'saved' | 'error' | 'draft';\n+  }>>([]);\n+  const [promptSaveStatuses, setPromptSaveStatuses] = useState<SaveStatus[]>([]);\n+\n+  // Add this state to track dropdown state\n+  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n+\n+  // Add these states\n+  const [isLoadingSubtopics, setIsLoadingSubtopics] = useState(false);\n+  const [isLoadingLessons, setIsLoadingLessons] = useState(false);\n+\n+  // Event handlers\n+  const handleQuestionTypeChange = useCallback((type: string) => {\n+    if (isQuestionType(type)) {\n+      setSelectedQuestionType(type);\n+    }\n+  }, []);\n+\n+  const handleAddQuestion = useCallback(() => {\n+    if (!selectedQuestionType || !isQuestionType(selectedQuestionType)) return;\n+\n+    const defaultData = QUESTION_TYPES[selectedQuestionType].defaultData;\n+    const newQuestion: Question = {\n+      id: crypto.randomUUID(),\n+      type: selectedQuestionType,\n+      //data: {},\n+      title: 'New Question',\n+      content: '',\n+      lesson_id: currentLessonId || '',\n+      metadata: {},\n+      data: {\n+        ...defaultData,\n+        prompt: '',\n+        teacher_script: '',\n+        followup_prompt: [],\n+        sample_answer: ''\n+      },\n+      correct_answer: '',\n+      exercisePrompts: [],\n+      isDraft: true\n+    };\n+\n+    setQuestions(prev => [...prev, newQuestion]);\n+    setQuestionSaveStatuses(prev => [\n+      ...prev,\n+      { id: newQuestion.id, status: 'draft' }\n+    ]);\n+    setSelectedQuestionType('');\n+  }, [selectedQuestionType, currentLessonId]);\n+\n+  const handleRemoveQuestion = async (index: number) => {\n+    try {\n+      const questionToDelete = questions[index];\n+      \n+      // Delete related exercise prompts first\n+      const { error: promptError } = await supabase\n+        .from('exercise_prompts')\n+        .delete()\n+        .eq('question_id', questionToDelete.id);\n+\n+      if (promptError) throw promptError;\n+\n+      // Then delete the question\n+      const { error: questionError } = await supabase\n+        .from('questions')\n+        .delete()\n+        .eq('id', questionToDelete.id);\n+\n+      if (questionError) throw questionError;\n+\n+      // Update local state\n+      const newQuestions = questions.filter((_, i) => i !== index);\n+      setQuestions(newQuestions);\n+      \n+      toast.success('Question and related prompts deleted successfully');\n+    } catch (error) {\n+      console.error('Error deleting question:', error);\n+      toast.error('Failed to delete question and prompts');\n+    }\n+  };\n+\n+  const handleUpdateQuestion = useCallback(async (index: number, updatedQuestion: Question) => {\n+    const newQuestions = [...questions];\n+    newQuestions[index] = updatedQuestion;\n+    setQuestions(newQuestions);\n+    setQuestionSaveStatuses(prev => prev.map((status, i) => \n+      i === index ? { ...status, status: 'draft' } : status\n+    ));\n+  }, [questions]);\n+\n+  const handleAddExercisePrompt = useCallback((questionIndex: number) => {\n+    setQuestions(prev => prev.map((question, i) => {\n+      if (i === questionIndex) {\n+        return {\n+          ...question,\n+          exercisePrompts: [\n+            ...question.exercisePrompts,\n+            {\n+              id: crypto.randomUUID(),\n+              text: '',\n+              media: '',\n+              type: 'image',\n+              narration: 'Your turn',\n+              saytext: 'Say: ',\n+              metadata: {\n+                estimatedTime: 0\n+              },\n+              created_at: new Date().toISOString(),\n+              updated_at: new Date().toISOString()\n+            }\n+          ]\n+        };\n+      }\n+      return question;\n+    }));\n+  }, []);\n+\n+  const handleRemoveExercisePrompt = useCallback((questionIndex: number, promptIndex: number) => {\n+    setQuestions(prev => prev.map((question, i) => {\n+      if (i === questionIndex) {\n+        return {\n+          ...question,\n+          exercisePrompts: question.exercisePrompts.filter((_, j) => j !== promptIndex)\n+        };\n+      }\n+      return question;\n+    }));\n+  }, []);\n+\n+  const handleExercisePromptChange = useCallback(async (\n+    questionIndex: number,\n+    promptIndex: number,\n+    updatedPrompt: ExercisePrompt\n+  ) => {\n+    try {\n+      const promptUpdate = {\n+        id: updatedPrompt.id,\n+        question_id: updatedPrompt.question_id,\n+        text: updatedPrompt.text,\n+        type: updatedPrompt.type,\n+        narration: updatedPrompt.narration,\n+        saytext: updatedPrompt.saytext,\n+        media: updatedPrompt.media,\n+        // Remove order_index as it's not in schema\n+        created_at: new Date().toISOString()\n+      };\n+\n+      const { error: promptError } = await supabase\n+        .from('exercise_prompts')\n+        .upsert(promptUpdate)\n+        .select();\n+\n+      if (promptError) throw promptError;\n+\n+      // Update local state\n+      setQuestions(prev => prev.map((question, i) => {\n+        if (i === questionIndex) {\n+          const newPrompts = [...question.exercisePrompts];\n+          newPrompts[promptIndex] = updatedPrompt;\n+          return { ...question, exercisePrompts: newPrompts };\n+        }\n+        return question;\n+      }));\n+\n+    } catch (error) {\n+      console.error('Error saving prompt:', error);\n+      toast.error('Failed to save prompt');\n+    }\n+  }, []);\n+\n+  const handleAddActivity = useCallback(() => {\n+    const newActivity: Activity = {\n+      id: crypto.randomUUID(),\n+      lesson_id: currentLessonId || '',\n+      created_at: new Date().toISOString(),\n+      type: 'practice',\n+      title: '',\n+      name: '',\n+      instructions: '',\n+      media: [],\n+      data: {\n+        prompt: '',\n+        teacherScript: '',\n+        media: []\n+      }\n+    };\n+    setActivities(prev => [...prev, newActivity]);\n+  }, [currentLessonId]);\n+\n+  const handleUpdateActivity = useCallback((index: number, updatedActivity: Activity) => {\n+    setActivities(prev => prev.map((activity, i) => i === index ? updatedActivity : activity));\n+  }, []);\n+\n+  const handleRemoveActivity = useCallback((index: number) => {\n+    setActivities(prev => prev.filter((_, i) => i !== index));\n+  }, []);\n+\n+  const handleExercisePromptUpdate = useCallback((questionIndex: number, promptIndex: number, updatedPrompt: ExercisePrompt) => {\n+    const updatedQuestions = [...questions];\n+    updatedQuestions[questionIndex].exercisePrompts[promptIndex] = updatedPrompt;\n+    handleUpdateQuestion(questionIndex, updatedQuestions[questionIndex]);\n+  }, [questions, handleUpdateQuestion]);\n+\n+  const handleQuestionDataChange = useCallback((questionIndex: number, field: string, value: string) => {\n+    setQuestions(prev => prev.map((q, i) => \n+      i === questionIndex \n+        ? { \n+            ...q, \n+            data: { \n+              prompt: q.data?.prompt || '',\n+              teacherScript: q.data?.teacherScript || '',\n+              ...q.data,\n+              [field]: value \n+            } \n+          }\n+        : q\n+    ));\n+  }, []);\n+\n+  const [isSaving, setIsSaving] = useState(false);\n+\n+  const handleSaveLesson = async () => {\n+    try {\n+      if (!currentLessonId || !selectedSubtopicId) {\n+        toast.error('Please select a subtopic and lesson first');\n+        return;\n+      }\n+\n+      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\n+      if (sessionError) throw sessionError;\n+      \n+      if (!session?.user) {\n+        toast.error('Please sign in to save lessons');\n+        return;\n+      }\n+\n+      // Get user's role from session\n+      const userRole = session.user.user_metadata?.role;\n+      console.log('Current user role:', userRole);\n+      console.log('📝 Saving content heading:', {\n+        contentHeading,\n+        currentLessonId,\n+        selectedSubtopicId,\n+        timestamp: new Date().toISOString()\n+      });\n+\n+      // Create metadata object\n+      const lessonMetadata = {\n+        lastEdited: new Date().toISOString(),\n+        version: 1,\n+        status: 'draft' \n+      };\n+\n+      // Complete lesson data with all fields\n+      const lessonData = {\n+        id: currentLessonId,\n+        title: lessonTitle,\n+        content: lessonContent,\n+        metadata: lessonMetadata, // Supabase will automatically handle JSON conversion\n+        content_type: 'html',\n+        lesson_type: 'lesson',\n+        grade_id: selectedGradeId,\n+        topic_id: selectedTopicId,\n+        subtopic_id: selectedSubtopicId,\n+        user_id: session.user.id,\n+        updated_at: new Date().toISOString(),\n+        role: userRole, // Include role in the payload\n+        description: '',\n+        prerequisites: [],\n+        media_type: 'image',\n+        media_url: '',\n+        contentheading: contentHeading || ''\n+      };\n+\n+      console.log('📦 Data being sent to Supabase:', lessonData);\n+\n+      // Save lesson with all fields\n+      const { data, error: lessonError } = await supabase\n+        .from('lessons')\n+        .upsert(lessonData, { \n+          onConflict: 'id'\n+        })\n+        .select();\n+\n+      if (lessonError) throw lessonError;\n+\n+      // 2. Save lesson content\n+      const { data: existingContent } = await supabase\n+        .from('lesson_content')\n+        .select('id')\n+        .eq('lesson_id', currentLessonId)\n+        .single();\n+\n+      const contentMetadata = {\n+        lastEdited: new Date().toISOString(),\n+        version: 1,\n+        status: 'draft'\n+      };\n+\n+      const contentUpdate = {\n+        id: existingContent?.id || crypto.randomUUID(),\n+        lesson_id: currentLessonId,\n+        content: [lessonContent],\n+        metadata: contentMetadata, // Supabase will automatically handle JSON conversion\n+        content_type: 'html',\n+        user_id: session.user.id,\n+        updated_at: new Date().toISOString(),\n+        created_at: new Date().toISOString()\n+      };\n+\n+      const { error: contentError } = await supabase\n+        .from('lesson_content')\n+        .upsert(contentUpdate, { onConflict: 'id' });\n+\n+      if (contentError) throw contentError;\n+\n+      // 3. Save questions\n+      for (const question of questions) {\n+        const questionData = {\n+          id: question.id,\n+          lesson_id: currentLessonId,\n+          type: question.type,\n+          title: question.title,\n+          metadata: question.metadata,\n+          data: question.data,\n+          updated_at: new Date().toISOString(),\n+          user_id: session.user.id\n+        };\n+\n+        const { error: questionError } = await supabase\n+          .from('questions')\n+          .upsert(questionData, { onConflict: 'id' });\n+\n+        if (questionError) throw questionError;\n+\n+        //4. Save exercise prompts for this question\n+        if (question.exercisePrompts) {\n+          for (const prompt of question.exercisePrompts) {\n+            const promptData = {\n+              id: prompt.id,\n+              question_id: question.id,\n+              text: prompt.text,\n+              media: prompt.media,\n+              type: prompt.type,\n+              narration: prompt.narration,\n+              saytext: prompt.saytext,\n+              user_id: session.user.id,\n+              updated_at: new Date().toISOString()\n+            };\n+\n+            const { error: promptError } = await supabase\n+              .from('exercise_prompts')\n+              .upsert(promptData, { onConflict: 'id' });\n+\n+            if (promptError) throw promptError;\n+          }\n+        }\n+      }\n+\n+      // 5. Save activities\n+      if (activities.length > 0) {\n+        const activitiesData = activities.map(activity => ({\n+          id: activity.id,\n+          lesson_id: currentLessonId,\n+          type: activity.type,\n+          title: activity.title,\n+          name: activity.name,\n+          instructions: activity.instructions,\n+          media: activity.media,\n+          data: activity.data,\n+          created_at: new Date().toISOString()\n+        }));\n+\n+        const { error: activitiesError } = await supabase\n+          .from('activities')\n+          .upsert(activitiesData, { onConflict: 'id' });\n+\n+        if (activitiesError) throw activitiesError;\n+      }\n+\n+      // After successful save\n+      console.log('✅ Content heading saved successfully:', {\n+        contentHeading,\n+        lessonId: currentLessonId,\n+        timestamp: new Date().toISOString()\n+      });\n+\n+      toast.success('Lesson saved successfully');\n+    } catch (err) {\n+      const error = err as PostgrestError;\n+      console.error('❌ Error saving content heading:', {\n+        error: error.message,\n+        contentHeading,\n+        lessonContent,\n+        lessonId: currentLessonId,\n+        timestamp: new Date().toISOString()\n+      });\n+      toast.error(`Failed to save lesson: ${error.message}`);\n+\n+\n+    }\n+  };\n+\n+  const handleSaveQuestion = async (question: Question, index: number) => {\n+    const loadingToast = toast.loading(`Saving question ${index + 1}...`);\n+    \n+    try {\n+      const { data: { session } } = await supabase.auth.getSession();\n+      if (!session?.user) {\n+        toast.error('Please sign in to save question', { id: loadingToast });\n+        return;\n+      }\n+\n+      // Save question\n+      const questionData = {\n+        id: question.id,\n+        lesson_id: currentLessonId,\n+        type: question.type,\n+        title: question.title,\n+        metadata: question.metadata,\n+        data: {\n+          prompt: question.data?.prompt ?? '',\n+          teacherScript: question.data?.teacherScript ?? '',\n+          followup_prompt: question.data?.followup_prompt ?? [],\n+          sampleAnswer: question.data?.sampleAnswer || undefined,  // Convert null to undefined\n+          answer: question.data?.answer || undefined  // Convert null to undefined\n+        } as const,\n+        user_id: session.user.id,\n+        updated_at: new Date().toISOString()\n+      };\n+\n+      const { error: questionError } = await supabase\n+        .from('questions')\n+        .upsert(questionData, { onConflict: 'id' });\n+\n+      if (questionError) throw questionError;\n+\n+      // Save exercise prompts if they exist\n+      if (question.exercisePrompts?.length) {\n+        for (const prompt of question.exercisePrompts) {\n+          const promptData = {\n+            id: prompt.id,\n+            question_id: question.id,\n+            text: prompt.text,\n+            type: prompt.type,\n+            narration: prompt.narration,\n+            saytext: prompt.saytext,\n+            media: prompt.media,\n+            user_id: session.user.id,\n+            updated_at: new Date().toISOString()\n+          };\n+\n+          const { error: promptError } = await supabase\n+            .from('exercise_prompts')\n+            .upsert(promptData, { onConflict: 'id' });\n+\n+          if (promptError) throw promptError;\n+        }\n+      }\n+\n+      toast.success(`Question ${index + 1} saved successfully`, { id: loadingToast });\n+    } catch (error) {\n+      console.error('Error saving question:', error);\n+      toast.error(`Failed to save question ${index + 1}`, { id: loadingToast });\n+    }\n+  };\n+\n+  const handleSaveActivity = async (activity: Activity) => {\n+    try {\n+      await contentService.saveActivity(activity);\n+      toast.success('Activity saved');\n+    } catch (error) {\n+      console.error('Failed to save activity:', error);\n+      toast.error('Failed to save activity');\n+    }\n+  };\n+\n+  // Effects\n+  useEffect(() => {\n+    const fetchGrades = async () => {\n+      try {\n+        const { data, error } = await supabase\n+          .from('grades')\n+          .select('*')\n+          .order('name');\n+\n+        if (error) {\n+          console.error('Supabase error:', error);\n+          throw error;\n+        }\n+\n+        if (!data) {\n+          throw new Error('No data returned from Supabase');\n+        }\n+\n+        // Map the grades to match your interface\n+        const validGrades = data.map((grade: any) => ({\n+          _id: grade.id,\n+          id: grade.id,\n+          name: grade.name,\n+          level: grade.level || 0,  // Add default value if not provided\n+          orderIndex: grade.order_index || 0,  // Add default value if not provided\n+          topics: []\n+        }));\n+        \n+        setGrades(validGrades);\n+      } catch (error) {\n+        console.error('Error fetching grades:', error);\n+        toast.error('Failed to fetch grades');\n+      }\n+    };\n+\n+    fetchGrades();\n+  }, []);\n+\n+  // Topic Selection\n+  useEffect(() => {\n+    const fetchTopics = async () => {\n+      if (!selectedGradeId) return;\n+      \n+      try {\n+        const { data, error } = await supabase\n+          .from('topics')\n+          .select('*')\n+          .eq('grade_id', selectedGradeId)\n+          .order('title');\n+\n+        if (error) {\n+          throw error;\n+        }\n+\n+        // Map the topics to match your interface\n+        const validTopics = (data || []).map((topic: any) => ({\n+          _id: topic.id,\n+          id: topic.id,\n+          name: topic.title,\n+          title: topic.title,\n+          grade_id: topic.grade_id,\n+          subtopics: []\n+        }));\n+        \n+        setTopics(validTopics);\n+      } catch (error) {\n+        console.error('Error fetching topics:', error);\n+        toast.error('Failed to fetch topics');\n+      }\n+    };\n+\n+    fetchTopics();\n+  }, [selectedGradeId]);\n+\n+  // Subtopic Selection\n+  useEffect(() => {\n+    const fetchSubtopics = async () => {\n+      if (!selectedTopicId) return;\n+      \n+      try {\n+        // Use content service to fetch subtopics\n+        const subtopicsData = await contentService.fetchSubtopics(selectedTopicId);\n+        console.log('Fetched subtopics:', subtopicsData);\n+\n+        const validSubtopics = subtopicsData.map((subtopic: any) => ({\n+          id: subtopic.id,\n+          title: subtopic.title,\n+          description: subtopic.description,\n+          topic_id: subtopic.topic_id,\n+          lessons: [],\n+          order_index: subtopicsData.length\n+        }));\n+        \n+        setSubtopics(validSubtopics);\n+        \n+        // Update global state\n+        if (selectedSubtopic) {\n+          setSelectedSubtopic(selectedSubtopic);\n+        }\n+      } catch (err) {\n+        const error = err as Error;\n+        console.error('Error fetching subtopics:', error);\n+        toast.error('Failed to fetch subtopics');\n+      }\n+    };\n+\n+    fetchSubtopics();\n+  }, [selectedTopicId, selectedSubtopic, setSelectedSubtopic]);\n+\n+  // Add effect to monitor subtopics state\n+  useEffect(() => {\n+    console.log('Current subtopics state:', subtopics);\n+  }, [subtopics]);\n+\n+  // Add fetchLessons function\n+  const fetchLessons = useCallback(async () => {\n+    if (!selectedSubtopicId) return;\n+    try {\n+      const { data, error } = await supabase\n+        .from('lessons')\n+        .select('*')\n+        .eq('subtopic_id', selectedSubtopicId)\n+        .order('title');\n+\n+      if (error) {\n+        throw error;\n+      }\n+      \n+      // Map the lessons to ensure they have _id\n+      const validLessons = (data || []).map((lesson: any) => ({\n+        ...lesson,\n+        _id: lesson._id || lesson.id, // Use _id if available, otherwise use id\n+        title: lesson.title || 'Untitled Lesson'\n+      })).filter((lesson: any) => lesson._id); // Only include lessons with valid IDs\n+      \n+      setLessons(validLessons);\n+    } catch (error) {\n+      console.error('Error fetching lessons:', error);\n+      toast.error('Failed to fetch lessons');\n+    }\n+  }, [selectedSubtopicId]);\n+  // Add loadLessonContent function\n+  const isLoading = useRef(false);\n+  const loadLessonContent = useCallback(async (lessonId: string) => {\n+    // Prevent multiple simultaneous loads\n+    if (isLoading.current) return;\n+    isLoading.current = true;\n+\n+    const controller = new AbortController();\n+\n+    try {\n+      // Clear existing content first\n+      setLessonTitle('');\n+      setContentHeading('');\n+      setLessonContent('');\n+      setQuestions([]);\n+      \n+      // First fetch lesson data\n+      const { data: lessonData, error: lessonError } = await supabase\n+        .from('lessons')\n+        .select('*')\n+        .eq('id', lessonId)\n+        .single()\n+        \n+\n+      if (lessonError) {\n+        console.error('Lesson fetch error:', lessonError);\n+        throw lessonError;\n+      }\n+\n+      // Set lesson data\n+      setLessonTitle(lessonData.title || '');\n+      setContentHeading(lessonData.content || '');\n+\n+      // Then fetch lesson content with explicit headers\n+      const { data: contentData, error: contentError } = await supabase\n+        .from('lesson_content')\n+        .select('*')\n+        .eq('lesson_id', lessonId)\n+        .order('updated_at', { ascending: false })\n+        .limit(1)\n+        .maybeSingle();\n+\n+      if (contentError) {\n+        console.error('Content fetch error:', contentError);\n+        throw contentError;\n+      }\n+\n+      // Set content if available\n+      if (contentData?.content) {\n+        setLessonContent(typeof contentData.content === 'string' \n+          ? contentData.content \n+          : JSON.stringify(contentData.content)\n+        );\n+      }\n+\n+    } catch (error: unknown) {\n+      if (error instanceof Error && error.name === 'AbortError') {\n+        console.log('Request aborted');\n+        return;\n+      }\n+      console.error('Error loading lesson:', error);\n+      toast.error('Failed to load lesson content');\n+      \n+      // Reset states on error\n+      setLessonTitle('');\n+      setContentHeading('');\n+      setLessonContent('');\n+      setQuestions([]);\n+    } finally {\n+      isLoading.current = false;\n+    }\n+\n+    return () => {\n+      controller.abort();\n+    };\n+  }, []); // Empty dependencies since we're using closure over state setters\n+\n+  // // Add effect for fetching lessons when subtopic changes\n+  useEffect(() => {\n+    if (selectedSubtopicId) {\n+      fetchLessons();\n+    }\n+  }, [selectedSubtopicId, fetchLessons]);\n+\n+  // Add effect for loading lesson content when currentLessonId changes\n+    useEffect(() => {\n+    let isMounted = true;\n+    let timeoutId: NodeJS.Timeout;\n+\n+    const loadContent = async () => {\n+      if (!currentLessonId || !isMounted) return;\n+\n+      // Clear previous timeout if exists\n+      if (timeoutId) clearTimeout(timeoutId);\n+\n+      // Set new timeout for debouncing\n+      timeoutId = setTimeout(() => {\n+        if (isMounted) {\n+          loadLessonContent(currentLessonId);\n+        }\n+      }, 300);\n+    };\n+\n+    loadContent();\n+\n+    // Cleanup function\n+    return () => {\n+      isMounted = false;\n+      if (timeoutId) clearTimeout(timeoutId);\n+      if (isLoading.current) isLoading.current = false;\n+    };\n+  }, [currentLessonId]); // Remove loadLessonContent from dependencies\n+\n+  useEffect(() => {\n+    console.log('Current lessons state:', lessons);\n+  }, [lessons]);\n+\n+    // Add keyboard shortcut for saving\n+  useEffect(() => {\n+    const handleKeyDown = (e: KeyboardEvent) => {\n+      if ((e.ctrlKey || e.metaKey) && e.key === 's') {\n+        e.preventDefault();\n+        handleSaveLesson();\n+      }\n+    };\n+\n+    window.addEventListener('keydown', handleKeyDown);\n+    return () => window.removeEventListener('keydown', handleKeyDown);\n+  }, [handleSaveLesson]);\n+\n+  // Add SaveFeedback component\n+  const SaveFeedback = useCallback(() => {\n+    if (saveProgress === 'idle') return null;\n+\n+    return (\n+    <div className=\"fixed bottom-4 right-4\">\n+      {saveProgress === 'saving' && (\n+        <div className=\"flex items-center gap-2 bg-background border rounded-lg px-4 py-2 shadow-lg\">\n+          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n+          <span className=\"text-sm\">Saving changes...</span>\n+        </div>\n+      )}\n+      {saveProgress === 'saved' && (\n+        <div className=\"flex items-center gap-2 bg-green-500 text-white rounded-lg px-4 py-2 shadow-lg\">\n+          <Check className=\"h-4 w-4\" />\n+          <span className=\"text-sm\">Changes saved</span>\n+        </div>\n+      )}\n+      {saveProgress === 'error' && (\n+        <div className=\"flex items-center gap-2 bg-destructive text-destructive-foreground rounded-lg px-4 py-2 shadow-lg\">\n+          <X className=\"h-4 w-4\" />\n+          <span className=\"text-sm\">Error saving changes</span>\n+        </div>\n+      )}\n+    </div>\n+  );\n+  }, [saveProgress]);\n+\n+  // Update handlers\n+  const handleGradeSelect = (gradeId: string) => {\n+    // Always keep sidebar open during selection\n+    setIsSidebarCollapsed(false);\n+    setIsSidebarLocked(true);\n+    \n+    // Batch state updates\n+    requestAnimationFrame(() => {\n+      setSelectedGradeId(gradeId);\n+      setSelectedGrade(gradeId);\n+      setSelectedTopicId(null);\n+      setSelectedTopic('');\n+      setSelectedSubtopicId(null);\n+      setSelectedSubtopic('');\n+      setCurrentLessonId(null);\n+      \n+      if (isViewMode) {\n+        setExpandedGrade(gradeId);\n+      }\n+    });\n+  };\n+\n+  const handleTopicSelect = (value: string) => {\n+    setSelectedTopicId(value);\n+    setSelectedTopic(value);\n+    setSelectedSubtopicId(null);\n+    setSelectedSubtopic('');\n+    setCurrentLessonId(null);\n+  };\n+\n+  const handleSubtopicSelect = (value: string) => {\n+    setSelectedSubtopicId(value);\n+    setSelectedSubtopic(value);\n+    setCurrentLessonId(null);\n+  };\n+\n+  const handleLessonSelect = async (lessonId: string) => {\n+    try {\n+      // Lock sidebar during selection\n+      setIsSidebarLocked(true);\n+      setIsSidebarCollapsed(false);\n+      setCurrentLessonId(lessonId);\n+      \n+      // 1. Fetch lesson data\n+      const { data: lessonData, error: lessonError } = await supabase\n+        .from('lessons')\n+        .select('*')\n+        .eq('id', lessonId)\n+        .single();\n+\n+      if (lessonError) throw lessonError;\n+\n+      // 2. Fetch questions with exercise prompts\n+      const { data: questionsData, error: questionsError } = await supabase\n+        .from('questions')\n+        .select(`\n+          *,\n+          exercise_prompts (*)\n+        `)\n+        .eq('lesson_id', lessonId);\n+\n+      if (questionsError) throw questionsError;\n+\n+      // 3. Fetch activities - removed order_index\n+      const { data: activitiesData, error: activitiesError } = await supabase\n+        .from('activities')\n+        .select('*')\n+        .eq('lesson_id', lessonId);\n+\n+      if (activitiesError) throw activitiesError;\n+\n+      // Format questions with their exercise prompts\n+      const formattedQuestions = questionsData?.map(q => ({\n+        ...q,\n+        data: q.data || {},\n+        exercisePrompts: q.exercise_prompts || []\n+      })) || [];\n+\n+      // Set all states\n+      setLessonTitle(lessonData.title || '');\n+      setLessonContent(lessonData.content || '');\n+      setQuestions(formattedQuestions);\n+      setActivities(activitiesData || []);\n+\n+      // After successful load, unlock sidebar and allow collapse\n+      setTimeout(() => {\n+        setIsSidebarLocked(false);\n+        if (!isSidebarLocked) {\n+          setIsSidebarCollapsed(true);\n+        }\n+      }, 300);\n+\n+    } catch (error) {\n+      console.error('Error loading lesson:', error);\n+      toast.error('Failed to load lesson');\n+      // Reset states on error\n+      setLessonTitle('');\n+      setLessonContent('');\n+      setQuestions([]);\n+      setActivities([]);\n+    }\n+    if (!isSidebarLocked) {\n+      setIsSidebarCollapsed(true);\n+    }\n+  };\n+\n+  // Update the expansion handlers\n+  const handleTopicExpand = async (topicId: string) => {\n+    setExpandedTopic(expandedTopic === topicId ? null : topicId);\n+    setSelectedTopicId(topicId);\n+    \n+    // Load subtopics when topic is expanded\n+    if (topicId) {\n+      setIsLoadingSubtopics(true);\n+      try {\n+        const { data: subtopicsData, error } = await supabase\n+          .from('subtopics')\n+          .select('*')\n+          .eq('topic_id', topicId)\n+          .order('order_index');\n+\n+        if (error) throw error;\n+        setSubtopics(subtopicsData || []);\n+      } catch (error) {\n+        console.error('Error loading subtopics:', error);\n+        toast.error('Failed to load subtopics');\n+      } finally {\n+        setIsLoadingSubtopics(false);\n+      }\n+    }\n+  };\n+\n+  const handleSubtopicExpand = async (subtopicId: string) => {\n+    setExpandedSubtopic(expandedSubtopic === subtopicId ? null : subtopicId);\n+    setSelectedSubtopicId(subtopicId);\n+    \n+    if (subtopicId) {\n+      setIsLoadingLessons(true);\n+      try {\n+        const { data: lessonsData, error } = await supabase\n+          .from('lessons')\n+          .select('*')\n+          .eq('subtopic_id', subtopicId)\n+          .order('order_index');\n+\n+        if (error) throw error;\n+        setLessons(lessonsData || []);\n+      } catch (error) {\n+        console.error('Error loading lessons:', error);\n+        toast.error('Failed to load lessons');\n+      } finally {\n+        setIsLoadingLessons(false);\n+      }\n+    }\n+  };\n+\n+  const handleQuestionExpand = (index: number) => {\n+    setExpandedQuestion(expandedQuestion === index ? null : index);\n+  };\n+\n+  const handleActivityExpand = (index: number) => {\n+    setExpandedActivity(expandedActivity === index ? null : index);\n+  };\n+\n+  // Add effect to save mode changes to localStorage\n+  useEffect(() => {\n+    localStorage.setItem('lessonManagementViewMode', isViewMode.toString());\n+  }, [isViewMode]);\n+\n+  // Add handlers for creating new items\n+  const handleCreateGrade = async () => {\n+    try {\n+      const response = await fetch(`${API_ENDPOINT}/grades`, {\n+        method: 'POST',\n+        headers: { 'Content-Type': 'application/json' },\n+        body: JSON.stringify({ name: newItemData.name })\n+      });\n+\n+      if (!response.ok) throw new Error('Failed to create grade');\n+      const data = await response.json();\n+      \n+      if (!data.success) throw new Error(data.message || 'Failed to create grade');\n+      \n+      // Update grades list\n+      setGrades([...grades, data.data.grade]);\n+      setModalState({ ...modalState, showAddGrade: false });\n+      setNewItemData({ name: '', description: '' });\n+      toast.success('Grade created successfully');\n+    } catch (error) {\n+      console.error('Error creating grade:', error);\n+      toast.error('Failed to create grade');\n+    }\n+  };\n+\n+  const handleCreateTopic = async () => {\n+    if (!selectedGradeId) {\n+      toast.error('Please select a grade first');\n+      return;\n+    }\n+\n+    try {\n+      const newTopic = await contentService.createTopic({\n+        title: newItemData.name, // Map from newItemData.name to title\n+        description: newItemData.description,\n+        gradeId: selectedGradeId\n+      });\n+\n+      setTopics(prev => [...prev, newTopic]);\n+      toast.success('Topic created successfully');\n+      setModalState({ ...modalState, showAddTopic: false });\n+      setNewItemData({ name: '', description: '' });\n+    } catch (err) {\n+      const error = err instanceof Error ? err.message : String(err);\n+      console.error('Error creating topic:', error);\n+      toast.error('Failed to create topic');\n+    }\n+  };\n+    \n+  \n+\n+\n+  const handleCreateSubtopic = async (data: { title: string; description?: string }) => {\n+    try {\n+      if (!selectedTopicId) {\n+        toast.error('Please select a topic first');\n+        return;\n+      }\n+\n+      const newSubtopic = await contentService.createSubtopic({\n+        ...data,\n+        topicId: selectedTopicId\n+      });\n+\n+      setSubtopics(prev => [...prev, {\n+        _id: newSubtopic.id,\n+        id: newSubtopic.id,\n+        name: newSubtopic.title,\n+        title: newSubtopic.title,\n+        description: newSubtopic.description,\n+        topic_id: newSubtopic.topic_id,\n+        orderIndex: prev.length,\n+        lessons: []\n+      }]);\n+\n+      toast.success('Subtopic created successfully');\n+      setModalState(prev => ({ ...prev, showAddSubtopic: false }));\n+    } catch (err) {\n+      const error = err as Error;\n+      console.error('Error creating subtopic:', error);\n+      toast.error('Failed to create subtopic');\n+    }\n+  };\n+\n+  const handleUpdateSubtopic = async (subtopicId: string, data: { title: string; description?: string }) => {\n+    try {\n+      const { data: updatedSubtopic, error } = await supabase\n+        .from('sub_topics')\n+        .update(data)\n+        .eq('id', subtopicId)\n+        .select()\n+        .single();\n+\n+      if (error) throw error;\n+      \n+      setSubtopics(prev => prev.map(subtopic => \n+        subtopic.id === subtopicId \n+          ? {\n+              ...subtopic,\n+              name: updatedSubtopic.title\n+            }\n+          : subtopic\n+      ));\n+\n+      toast.success('Subtopic updated successfully');\n+    } catch (err) {\n+      const error = err as Error;\n+      console.error('Error updating subtopic:', error);\n+      toast.error('Failed to update subtopic');\n+    }\n+  };\n+\n+  const handleDeleteSubtopic = async (subtopicId: string) => {\n+    try {\n+      await contentService.deleteSubtopic(subtopicId);\n+      setSubtopics(prev => prev.filter(subtopic => subtopic.id !== subtopicId));\n+      setSelectedSubtopicId(null);\n+      toast.success('Subtopic deleted successfully');\n+    } catch (err) {\n+      const error = err as Error;\n+      console.error('Error deleting subtopic:', error);\n+      toast.error('Failed to delete subtopic');\n+    }\n+  };\n+\n+  const handleCreateLesson = async () => {\n+    if (!selectedSubtopicId) {\n+      toast.error('Please select a subtopic first');\n+      return;\n+    }\n+\n+    try {\n+      // First create the lesson\n+      const { data: newLesson, error: lessonError } = await supabase\n+        .from('lessons')\n+        .insert({\n+          title: newItemData.name,\n+          duration: 0,\n+          topic_id: selectedTopicId,\n+          subtopic_id: selectedSubtopicId,\n+          content: '', // Empty rich text content initially\n+          status: 'draft'\n+        })\n+        .select()\n+        .single();\n+\n+      if (lessonError) throw lessonError;\n+\n+      // Create initial question\n+      const { data: newQuestion, error: questionError } = await supabase\n+        .from('questions')\n+        .insert({\n+          lesson_id: newLesson.id,\n+          type: 'speaking', // default type\n+          title: 'Question 1',\n+          data: {\n+            prompt: '',\n+            teacherScript: '',\n+            options: []\n+          },\n+          order_index: 0\n+        })\n+        .select()\n+        .single();\n+\n+      if (questionError) throw questionError;\n+\n+      // Create initial exercise prompts for the question\n+      const { error: promptsError } = await supabase\n+        .from('exercise_prompts')\n+        .insert([\n+          {\n+            question_id: newQuestion.id,\n+            text: '',\n+            type: 'image',\n+            narration: '',\n+            saytext: '',\n+            media: [],\n+            order_index: 0\n+          },\n+          {\n+            question_id: newQuestion.id,\n+            text: '',\n+            type: 'gif',\n+            narration: '',\n+            saytext: '',\n+            media: [],\n+            order_index: 1\n+          }\n+        ]);\n+\n+      if (promptsError) throw promptsError;\n+\n+      // Create initial activity\n+      // const { error: activityError } = await supabase\n+      //   .from('activities')\n+      //   .insert({\n+      //     lesson_id: newLesson.id,\n+      //     type: 'practice',\n+      //     title: '',\n+      //     instructions: '',\n+      //     media: [],\n+      //     data: {\n+      //       prompt: '',\n+      //       teacherScript: '',\n+      //       media: []\n+      //     },\n+      //     order_index: 0\n+      //   });\n+\n+      // if (activityError) throw activityError;\n+\n+      // Update UI state\n+      setLessons(prev => [...prev, newLesson]);\n+      setCurrentLessonId(newLesson.id);\n+      setLessonTitle(newLesson.title);\n+      setModalState({ ...modalState, showAddLesson: false });\n+      setNewItemData({ name: '', description: '' });\n+      toast.success('Lesson created successfully');\n+\n+    } catch (error) {\n+      console.error('Error creating lesson:', error);\n+      toast.error('Failed to create lesson');\n+    }\n+  };\n+\n+  // Effect to handle localStorage after mount\n+  useEffect(() => {\n+    const storedMode = localStorage.getItem('lessonManagementViewMode');\n+    if (storedMode !== null) {\n+      setIsViewMode(storedMode === 'true');\n+    }\n+  }, []);\n+\n+  // Update the cleanupModalState function\n+  const cleanupModalState = useCallback(() => {\n+    document.body.style.pointerEvents = '';\n+    document.body.style.overflow = '';\n+    setModalState({\n+      showAddGrade: false,\n+      showAddTopic: false,\n+      showAddSubtopic: false,\n+      showAddLesson: false\n+    });\n+    setNewItemData({ name: '', description: '' });\n+  }, []);\n+\n+  // Add a function to handle modal state changes\n+  const handleModalStateChange = useCallback((modalType: keyof typeof modalState, open: boolean) => {\n+    if (!open) {\n+      cleanupModalState();\n+    } else {\n+      setModalState(prev => ({ ...prev, [modalType]: open }));\n+    }\n+  }, [cleanupModalState]);\n+\n+  const handleContentSave = async (content: string) => {\n+    const loadingToast = toast.loading(\"Saving content...\", {\n+      action: {\n+        label: \"Close\",\n+        onClick: () => toast.dismiss()\n+      }\n+    });\n+    \n+    try {\n+      const { data: { session } } = await supabase.auth.getSession();\n+      if (!session?.user) {\n+        toast.error('Please sign in to save content', { id: loadingToast });\n+        return;\n+      }\n+\n+      // Get the most recent content entry\n+      const { data: existingContent, error: checkError } = await supabase\n+        .from('lesson_content')\n+        .select('id')\n+        .eq('lesson_id', currentLessonId)\n+        .order('updated_at', { ascending: false })\n+        .limit(1)\n+        .maybeSingle();\n+\n+      // If content exists, update it; if not, insert new\n+      const { error } = await supabase\n+        .from('lesson_content')\n+        .upsert({\n+          id: existingContent?.id, // This ensures we update if id exists\n+          lesson_id: currentLessonId,\n+          content: [content],\n+          content_type: 'text',\n+          metadata: {\n+            heading: contentHeading\n+          },\n+          user_id: session.user.id,\n+          updated_at: new Date().toISOString()\n+        }, {\n+          onConflict: 'id'  // This ensures we update based on lesson_id\n+        });\n+\n+      if (error) throw error;\n+\n+      // Save questions separately\n+      for (const question of questions) {\n+        const { exercisePrompts, ...questionData } = question; // Remove exercisePrompts from question data\n+        \n+        // Save question\n+        const { error: questionError } = await supabase\n+          .from('questions')\n+          .upsert(questionData, {\n+            onConflict: 'id'\n+          })\n+          .select();\n+\n+        if (questionError) throw questionError;\n+\n+        // Save exercise prompts\n+        if (exercisePrompts?.length > 0) {\n+          for (const prompt of exercisePrompts) {\n+            const { error: promptError } = await supabase\n+              .from('exercise_prompts')\n+              .upsert(prompt, {\n+                onConflict: 'id'\n+              })\n+              .select();\n+\n+            if (promptError) throw promptError;\n+          }\n+        }\n+      }\n+      \n+      toast.success(\"Content saved successfully\", {\n+        action: {\n+          label: \"Close\",\n+          onClick: () => toast.dismiss()\n+        },\n+        id: loadingToast,\n+      });\n+      setIsContentEditorOpen(false);\n+    } catch (error) {\n+      console.error('Error saving content:', error);\n+      toast.error(\"Failed to save content\", {\n+        action: {\n+          label: \"Close\",\n+          onClick: () => toast.dismiss()\n+        },\n+        id: loadingToast,\n+      });\n+    }\n+  };\n+\n+  // Add this component for inline editing\n+  const InlineEdit = ({ \n+    value, \n+    onSave, \n+    isEditing, \n+    setIsEditing, \n+    placeholder,\n+    className = \"\"\n+  }: InlineEditProps) => {\n+    const [tempValue, setTempValue] = useState(value);\n+    \n+    return isEditing ? (\n+      <div className=\"flex items-center gap-2\">\n+        <Input\n+          value={tempValue}\n+          onChange={(e) => setTempValue(e.target.value)}\n+          placeholder={placeholder}\n+          className={className}\n+          autoFocus\n+        />\n+        <Button\n+          size=\"sm\"\n+          variant=\"ghost\"\n+          onClick={() => {\n+            onSave(tempValue);\n+            setIsEditing(false);\n+          }}\n+        >\n+          <Check className=\"h-4 w-4 text-green-500\" />\n+        </Button>\n+        <Button\n+          size=\"sm\"\n+          variant=\"ghost\"\n+          onClick={() => setIsEditing(false)}\n+        >\n+          <X className=\"h-4 w-4 text-red-500\" />\n+        </Button>\n+      </div>\n+    ) : (\n+      <div \n+        className=\"group flex items-center gap-2 cursor-pointer\"\n+        onClick={() => setIsEditing(true)}\n+      >\n+        <span className={className}>{value || placeholder}</span>\n+        <Pencil className=\"h-4 w-4 opacity-0 group-hover:opacity-100 transition-opacity\" />\n+      </div>\n+    );\n+  };\n+\n+  // Add this effect to handle auto-collapse after lesson selection\n+  useEffect(() => {\n+    if (currentLessonId && selectedGradeId && selectedTopicId && selectedSubtopicId) {\n+      setIsSidebarLocked(false);\n+      // Optional: add a slight delay before collapsing\n+      setTimeout(() => setIsSidebarCollapsed(true), 300);\n+    }\n+  }, [currentLessonId, selectedGradeId, selectedTopicId, selectedSubtopicId]);\n+\n+  // Add individual save handlers\n+  // const handleSaveQuestion = async (question: Question, index: number) => {\n+  //   try {\n+  //     // Update status to saving\n+  //     setQuestionSaveStatuses(prev => [\n+  //       ...prev.filter(s => s.id !== question.id),\n+  //       { id: question.id, status: 'saving' }\n+  //     ]);\n+\n+  //     const questionUpsert = {\n+  //       id: question.id,\n+  //       lesson_id: currentLessonId,\n+  //       type: question.type,\n+  //       title: question.data?.prompt || 'Untitled Question',\n+  //       metadata: question.metadata || {},\n+  //       data: {\n+  //         prompt: question.data?.prompt || '',\n+  //         teacherScript: question.data?.teacherScript || '',\n+  //         ...question.data\n+  //       },\n+  //       order_index: index,\n+  //       created_at: new Date().toISOString(),\n+  //       updated_at: new Date().toISOString()\n+  //     };\n+\n+  //     const { error: questionError } = await supabase\n+  //       .from('questions')\n+  //       .upsert(questionUpsert);\n+\n+  //     if (questionError) throw questionError;\n+\n+  //     // Update status to saved\n+  //     setQuestionSaveStatuses(prev => [\n+  //       ...prev.filter(s => s.id !== question.id),\n+  //       { id: question.id, status: 'saved', lastSaved: new Date().toISOString() }\n+  //     ]);\n+\n+  //     toast.success(`Question ${index + 1} saved successfully`);\n+  //   } catch (error) {\n+  //     console.error('Error saving question:', error);\n+  //     setQuestionSaveStatuses(prev => [\n+  //       ...prev.filter(s => s.id !== question.id),\n+  //       { id: question.id, status: 'error' }\n+  //     ]);\n+  //     toast.error(`Failed to save question ${index + 1}`);\n+  //   }\n+  // };\n+\n+  const handleSavePrompt = async (questionId: string, prompt: ExercisePrompt, promptIndex: number) => {\n+    try {\n+      setPromptSaveStatuses(prev => [\n+        ...prev.filter(s => s.id !== prompt.id),\n+        { id: prompt.id || '', status: 'saving' } as SaveStatus\n+      ]);\n+\n+      const promptUpsert = {\n+        id: prompt.id,\n+        question_id: questionId,\n+        text: prompt.text || '',\n+        type: prompt.type || 'text',\n+        narration: prompt.narration || '',\n+        saytext: prompt.saytext || '',\n+        media: prompt.media || [],\n+        order_index: promptIndex,\n+        created_at: prompt.created_at || new Date().toISOString(),\n+        updated_at: new Date().toISOString()\n+      };\n+\n+      const { error: promptError } = await supabase\n+        .from('exercise_prompts')\n+        .upsert(promptUpsert);\n+\n+      if (promptError) throw promptError;\n+\n+      setPromptSaveStatuses(prev => [\n+        ...prev.filter(s => s.id !== prompt.id),\n+        { id: prompt.id || '', status: 'saved', lastSaved: new Date().toISOString() } as SaveStatus\n+      ]);\n+\n+      toast.success(`Prompt ${promptIndex + 1} saved successfully`);\n+    } catch (error) {\n+      console.error('Error saving prompt:', error);\n+      setPromptSaveStatuses(prev => [\n+        ...prev.filter(s => s.id !== prompt.id),\n+        { id: prompt.id || '', status: 'error' } as SaveStatus\n+      ]);\n+      toast.error(`Failed to save prompt ${promptIndex + 1}`);\n+    }\n+  };\n+\n+  // Add effect to mark items as draft when edited\n+  useEffect(() => {\n+    questions.forEach(question => {\n+      if (!questionSaveStatuses.find(s => s.id === question.id)) {\n+        setQuestionSaveStatuses(prev => [\n+          ...prev,\n+          { id: question.id, status: 'draft' }\n+        ]);\n+      }\n+    });\n+  }, [questions]);\n+\n+  // Add this function with your other handlers\n+  const handleRefreshLesson = async () => {\n+    if (!currentLessonId) {\n+      toast.error('No lesson selected');\n+      return;\n+    }\n+    \n+    try {\n+      toast.loading('Refreshing lesson content...', {\n+        action: {\n+          label: \"Close\",\n+          onClick: () => toast.dismiss()\n+        },\n+      });\n+      await handleLessonSelect(currentLessonId);\n+      toast.success('Content refreshed', {\n+        action: {\n+          label: \"Close\",\n+          onClick: () => toast.dismiss()\n+        },\n+      });\n+    } catch (error) {\n+      console.error('Error refreshing lesson:', error);\n+      toast.error('Failed to refresh content', {\n+        action: {\n+          label: \"Close\",\n+          onClick: () => toast.dismiss()\n+        },\n+      });\n+    }\n+  };\n+\n+  // Add this function to handle refresh\n+  const handleRefreshContent = async () => {\n+    if (!currentLessonId) {\n+      toast.error('No lesson selected');\n+      return;\n+    }\n+    \n+    toast.loading('Refreshing content...');\n+    try {\n+      await loadLessonContent(currentLessonId);\n+      toast.success('Content refreshed');\n+    } catch (error) {\n+      console.error('Refresh error:', error);\n+      toast.error('Failed to refresh content');\n+    }\n+  };\n+\n+  // Update the sidebar hover mechanism\n+  const handleSidebarHover = useCallback(\n+    debounce((isHovering: boolean) => {\n+      if (!isSidebarLocked && !isNavigating && !isDropdownOpen) {\n+        if (isHovering || document.activeElement?.closest('.sidebar-content')) {\n+          setIsSidebarCollapsed(false);\n+        } else {\n+          setTimeout(() => {\n+            if (!isDropdownOpen) { // Only collapse if dropdown is closed\n+              setIsSidebarCollapsed(true);\n+            }\n+          }, 300);\n+        }\n+      }\n+    }, 100),\n+    [isSidebarLocked, isNavigating, isDropdownOpen]\n+  );\n+\n+  // Update the sidebar JSX\n+  <div \n+    className={cn(\n+      \"transition-all duration-300 ease-in-out relative\",\n+      isSidebarCollapsed ? \"w-20\" : \"w-80\",\n+      \"flex-shrink-0 group\"\n+    )}\n+    onMouseEnter={() => {\n+      handleSidebarHover(true);\n+      // Immediately expand on mouse enter\n+      if (!isSidebarLocked) {\n+        setIsSidebarCollapsed(false);\n+      }\n+    }}\n+    onMouseLeave={() => {\n+      // Only collapse if not interacting with content\n+      if (!document.activeElement?.closest('.sidebar-content')) {\n+        handleSidebarHover(false);\n+      }\n+    }}\n+    onFocus={() => setIsSidebarCollapsed(false)}\n+  >\n+    <Card className={cn(\n+      \"h-full relative sidebar-content\", // Added sidebar-content class\n+      \"transition-shadow duration-300\",\n+      \"hover:shadow-lg\"\n+    )}>\n+      {/* Rest of sidebar content */}\n+    </Card>\n+  </div>\n+\n+  // Update the sidebar and card styles\n+  return (\n+      <div className=\"container mx-auto py-8\">\n+        {/* Header */}\n+        <div className=\"flex items-center justify-between mb-2\">\n+          {/* ... header content ... */}\n+          <div className=\"flex items-center gap-4\">\n+            <Link href=\"/super-admin\">\n+              <Button variant=\"outline\" className=\"gap-2\">\n+                <ArrowLeft className=\"h-4 w-4\" />\n+                Back\n+              </Button>\n+            </Link>\n+            <div className=\"flex items-center gap-2\">\n+              <h1 className=\"text-2xl font-bold\">Lesson Management</h1>\n+              <Button\n+                variant=\"ghost\"\n+                size=\"icon\"\n+                onClick={handleRefreshLesson}\n+                className=\"ml-2\"\n+                title=\"Refresh lesson content\"\n+              >\n+                <RefreshCw className=\"h-4 w-4\" />\n+              </Button>\n+            </div>\n+            <p className=\"text-sm text-muted-foreground\">Create and manage your educational content</p>\n+          </div>\n+          <div className=\"flex items-center gap-2\">\n+            <Button\n+              variant=\"outline\"\n+              size=\"sm\"\n+              onClick={() => setShowHelpTips(!showHelpTips)}\n+              className=\"gap-2\"\n+            >\n+              {showHelpTips ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n+              {showHelpTips ? 'Hide Tips' : 'Show Tips'}\n+            </Button>\n+          </div>\n+        </div>\n+        \n+        {/* Main content wrapper - Fix the layout here */}\n+        <div className=\"flex gap-6 h-[calc(100vh-200px)]\">\n+          {/* Improved sidebar */}\n+          <div \n+            className={cn(\n+              \"transition-all duration-300 ease-in-out relative\",\n+              isSidebarCollapsed ? \"w-20\" : \"w-80\",\n+              \"flex-shrink-0 group\"\n+            )}\n+            onMouseEnter={() => {\n+              handleSidebarHover(true);\n+              // Immediately expand on mouse enter\n+              if (!isSidebarLocked) {\n+                setIsSidebarCollapsed(false);\n+              }\n+            }}\n+            onMouseLeave={() => {\n+              // Only collapse if not interacting with content\n+              if (!document.activeElement?.closest('.sidebar-content')) {\n+                handleSidebarHover(false);\n+              }\n+            }}\n+            onFocus={() => setIsSidebarCollapsed(false)}\n+          >\n+            <Card className={cn(\n+              \"h-full relative sidebar-content\", // Added sidebar-content class\n+              \"transition-shadow duration-300\",\n+              \"hover:shadow-lg\"\n+            )}>\n+              {/* Lock button - only show after lesson selection */}\n+              {currentLessonId && (\n+                <Button\n+                  variant=\"ghost\"\n+                  size=\"sm\"\n+                  className=\"absolute top-2 right-2 z-10\"\n+                  onClick={() => {\n+                    setIsSidebarLocked(!isSidebarLocked);\n+                    if (!isSidebarLocked) {\n+                      setIsSidebarCollapsed(false);\n+                    }\n+                  }}\n+                >\n+                  {isSidebarLocked ? <Lock className=\"h-4 w-4\" /> : <Unlock className=\"h-4 w-4\" />}\n+                </Button>\n+              )}\n+\n+              {/* Sidebar content with overflow handling */}\n+              <div className={cn(\n+                \"transition-all duration-300 overflow-hidden\",\n+                isSidebarCollapsed ? \"opacity-0\" : \"opacity-100\"\n+              )}>\n+                <Card className=\"h-full\">\n+                  <CardHeader className=\"pb-3\">\n+                    <div className=\"flex items-center justify-between\">\n+                      <CardTitle className=\"text-lg font-semibold\">Content Management</CardTitle>\n+                      <TooltipProvider>\n+                        <Tooltip>\n+                          <TooltipTrigger>\n+                            <HelpCircle className=\"h-4 w-4 text-muted-foreground\" />\n+                          </TooltipTrigger>\n+                          <TooltipContent>\n+                            <p>Manage your educational content here</p>\n+                          </TooltipContent>\n+                        </Tooltip>\n+                      </TooltipProvider>\n+                      </div>\n+                    <CardDescription>Create and manage your lessons</CardDescription>\n+                  </CardHeader>\n+                  <CardContent className=\"space-y-4\">\n+                    {/* View/Edit Mode Toggle */}\n+                    <div className=\"grid grid-cols-2 gap-2 p-1 bg-muted rounded-lg\">\n+                      <Button\n+                        variant={isViewMode ? \"default\" : \"ghost\"}\n+                        size=\"sm\"\n+                        onClick={() => setIsViewMode(true)}\n+                        className=\"w-full\"\n+                      >\n+                        <Eye className=\"h-4 w-4 mr-2\" />\n+                        View\n+                      </Button>\n+                      <Button\n+                        variant={!isViewMode ? \"default\" : \"ghost\"}\n+                        size=\"sm\"\n+                        onClick={() => setIsViewMode(false)}\n+                        className=\"w-full\"\n+                      >\n+                        <Edit className=\"h-4 w-4 mr-2\" />\n+                        Edit\n+                      </Button>\n+                    </div>\n+\n+                    {/* Grade Selection */}\n+                    <div className=\"space-y-2\">\n+                      <div className=\"flex items-center justify-between\">\n+                        <Label htmlFor=\"grade-select\">Grade</Label>\n+                        {isViewMode && (\n+                          <Button variant=\"ghost\" size=\"sm\" onClick={() => setExpandedGrade(expandedGrade ? null : selectedGrade)}>\n+                            {expandedGrade ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n+                          </Button>\n+                        )}\n+                      </div>\n+                      <Select \n+                        value={selectedGradeId || ''}\n+                        onValueChange={handleGradeSelect}\n+                        onOpenChange={(open) => {\n+                          if (open) {\n+                            // Force sidebar to stay open and lock it\n+                            setIsSidebarCollapsed(false);\n+                            setIsSidebarLocked(true);\n+                          }\n+                        }}\n+                      >\n+                        <SelectTrigger \n+                          id=\"grade-select\" \n+                          className=\"w-full\"\n+                          onClick={(e) => {\n+                            e.stopPropagation(); // Prevent event bubbling\n+                            setIsSidebarCollapsed(false);\n+                            setIsSidebarLocked(true);\n+                          }}\n+                        >\n+                          <SelectValue placeholder=\"Select Grade\" />\n+                        </SelectTrigger>\n+                        <SelectContent \n+                          onCloseAutoFocus={(e) => {\n+                            e.preventDefault();\n+                            setIsSidebarLocked(true);\n+                            setIsSidebarCollapsed(false);\n+                          }}\n+                        >\n+                          {grades.map((grade: Grade) => (\n+                            <SelectItem \n+                              key={`grade-${grade.id || 'new'}`} \n+                              value={grade.id || ''}\n+                              onMouseDown={(e) => {\n+                                e.preventDefault();\n+                                e.stopPropagation();\n+                              }}\n+                            >\n+                              <div className=\"flex items-center gap-2\">\n+                                <BookOpen className=\"h-4 w-4 text-primary\" />\n+                                {grade.name}\n+                              </div>\n+                            </SelectItem>\n+                          ))}\n+                        </SelectContent>\n+                      </Select>\n+                      {!isViewMode && (\n+                      <Button \n+                        variant=\"outline\" \n+                        size=\"sm\" \n+                        className=\"w-full gap-2\"\n+                        onClick={() => setModalState({ ...modalState, showAddGrade: false })}\n+                      >\n+                        <Plus className=\"h-4 w-4\" />\n+                        Add New Grade\n+                      </Button>\n+                      )}\n+                    </div>\n+\n+                    {/* Content Tree View in View Mode */}\n+                    {isViewMode && expandedGrade && (\n+                      <div className=\"mt-4 space-y-4 overflow-y-auto max-h-[calc(100vh-300px)]\">\n+                        {topics.map((topic: Topic) => (\n+                          <Card \n+                            key={topic.id} \n+                            className={cn(\n+                              \"border-l-4 transition-all duration-200 hover:shadow-md\",\n+                              expandedTopic === topic.id ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\n+                            )}\n+                          >\n+                            <CardHeader className=\"py-3 cursor-pointer select-none\">\n+                              <div className=\"flex items-center justify-between\">\n+                                <div className=\"flex items-center gap-2\" onClick={() => handleTopicExpand(topic.id || '')}>\n+                                  <Layers className=\"h-4 w-4 text-primary\" />\n+                                  <h4 className=\"font-medium\">{topic.title}</h4>\n+                                </div>\n+                                <div className=\"flex items-center gap-2\">\n+                                  <AlertDialog>\n+                                    <AlertDialogTrigger asChild>\n+                                      <Button \n+                                        variant=\"ghost\" \n+                                        size=\"sm\" \n+                                        className=\"hover:bg-destructive/10 hover:text-destructive\"\n+                                        onClick={(e) => e.stopPropagation()}\n+                                      >\n+                                        <Trash className=\"h-4 w-4\" />\n+                                      </Button>\n+                                    </AlertDialogTrigger>\n+                                    <AlertDialogContent>\n+                                      <AlertDialogHeader>\n+                                        <AlertDialogTitle>Delete Topic</AlertDialogTitle>\n+                                        <AlertDialogDescription>\n+                                          Are you sure you want to delete {topic.title}? This action cannot be undone.\n+                                        </AlertDialogDescription>\n+                                      </AlertDialogHeader>\n+                                      <AlertDialogFooter>\n+                                        <AlertDialogCancel>Cancel</AlertDialogCancel>\n+                                        <AlertDialogAction onClick={() => handleDelete(topic.id, 'topic', topic.title)}>\n+                                          Delete\n+                                        </AlertDialogAction>\n+                                      </AlertDialogFooter>\n+                                    </AlertDialogContent>\n+                                  </AlertDialog>\n+                                  <ChevronDown className={cn(\n+                                    \"h-4 w-4 transition-transform duration-200\",\n+                                    expandedTopic === topic.id ? \"rotate-0\" : \"-rotate-90\"\n+                                  )} />\n+                                </div>\n+                              </div>\n+                            </CardHeader>\n+\n+                            <AnimatePresence>\n+                              {expandedTopic === topic.id && (\n+                                <motion.div\n+                                  initial={{ height: 0, opacity: 0 }}\n+                                  animate={{ height: \"auto\", opacity: 1 }}\n+                                  exit={{ height: 0, opacity: 0 }}\n+                                  transition={{ duration: 0.2 }}\n+                                >\n+                                  <CardContent className=\"py-0 pl-4\">\n+                                    {subtopics.map((subtopic) => (\n+                                      <div key={subtopic.id} className=\"mb-3 last:mb-0\">\n+                                        <div className=\"flex items-center justify-between py-2\">\n+                                          <div className=\"flex items-center gap-2\" onClick={() => handleSubtopicExpand(subtopic.id)}>\n+                                            <BookOpen className=\"h-4 w-4 text-primary\" />\n+                                            <span className=\"text-sm font-medium\">{subtopic.title}</span>\n+                                          </div>\n+                                          <div className=\"flex items-center gap-2\">\n+                                            <AlertDialog>\n+                                              <AlertDialogTrigger asChild>\n+                                                <Button \n+                                                  variant=\"ghost\" \n+                                                  size=\"sm\"\n+                                                  className=\"hover:bg-destructive/10 hover:text-destructive\"\n+                                                  onClick={(e) => e.stopPropagation()}\n+                                                >\n+                                                  <Trash className=\"h-4 w-4\" />\n+                                                </Button>\n+                                              </AlertDialogTrigger>\n+                                              <AlertDialogContent>\n+                                                <AlertDialogHeader>\n+                                                  <AlertDialogTitle>Delete Subtopic</AlertDialogTitle>\n+                                                  <AlertDialogDescription>\n+                                                    Are you sure you want to delete {subtopic.title}?\n+                                                  </AlertDialogDescription>\n+                                                </AlertDialogHeader>\n+                                                <AlertDialogFooter>\n+                                                  <AlertDialogCancel>Cancel</AlertDialogCancel>\n+                                                  <AlertDialogAction onClick={() => handleDelete(subtopic.id, 'subtopic', subtopic.title)}>\n+                                                    Delete\n+                                                  </AlertDialogAction>\n+                                                </AlertDialogFooter>\n+                                              </AlertDialogContent>\n+                                            </AlertDialog>\n+                                            <ChevronDown className={cn(\n+                                              \"h-4 w-4 transition-transform duration-200\",\n+                                              expandedSubtopic === subtopic.id ? \"rotate-0\" : \"-rotate-90\"\n+                                            )} />\n+                                          </div>\n+                                        </div>\n+\n+                                        {/* Similar pattern for lessons */}\n+                                        {expandedSubtopic === subtopic.id && (\n+                                          <div className=\"pl-4 space-y-2\">\n+                                            {lessons.map((lesson) => (\n+                                              <div key={lesson.id} \n+                                                className=\"flex items-center justify-between gap-2 py-2 px-3 rounded-md transition-colors hover:bg-accent\">\n+                                                <div className=\"flex items-center gap-2\" onClick={() => handleLessonSelect(lesson.id)}>\n+                                                  <BookOpen className=\"h-4 w-4 text-muted-foreground\" />\n+                                                  <span className=\"text-sm\">{lesson.title}</span>\n+                                                </div>\n+                                                <AlertDialog>\n+                                                  <AlertDialogTrigger asChild>\n+                                                    <Button \n+                                                      variant=\"ghost\" \n+                                                      size=\"sm\"\n+                                                      className=\"hover:bg-destructive/10 hover:text-destructive\"\n+                                                      onClick={(e) => e.stopPropagation()}\n+                                                    >\n+                                                      <Trash className=\"h-4 w-4\" />\n+                                                    </Button>\n+                                                  </AlertDialogTrigger>\n+                                                  <AlertDialogContent>\n+                                                    <AlertDialogHeader>\n+                                                      <AlertDialogTitle>Delete Lesson</AlertDialogTitle>\n+                                                      <AlertDialogDescription>\n+                                                        Are you sure you want to delete {lesson.title}?\n+                                                      </AlertDialogDescription>\n+                                                    </AlertDialogHeader>\n+                                                    <AlertDialogFooter>\n+                                                      <AlertDialogCancel>Cancel</AlertDialogCancel>\n+                                                      <AlertDialogAction onClick={() => handleDelete(lesson.id, 'lesson', lesson.title)}>\n+                                                        Delete\n+                                                      </AlertDialogAction>\n+                                                    </AlertDialogFooter>\n+                                                  </AlertDialogContent>\n+                                                </AlertDialog>\n+                                              </div>\n+                                            ))}\n+                                          </div>\n+                                        )}\n+                                      </div>\n+                                    ))}\n+                                  </CardContent>\n+                                </motion.div>\n+                              )}\n+                            </AnimatePresence>\n+                          </Card>\n+                        ))}\n+                      </div>\n+                    )}\n+\n+                    {/* Regular Edit Mode Content */}\n+                    {!isViewMode && (\n+                      <>\n+                        {/* Existing Topic, Subtopic, and Lesson Selection UI */}\n+                      {/* Topic Selection */}\n+                        {selectedGradeId && (\n+                      <div className=\"space-y-2\">\n+                        <div className=\"flex items-center justify-between\">\n+                        <Label htmlFor=\"topic-select\">Topic</Label>\n+                        </div>\n+                        <Select \n+                              value={selectedTopicId || ''} \n+                              onValueChange={handleTopicSelect}\n+                        >\n+                          <SelectTrigger id=\"topic-select\" className=\"w-full\">\n+                            <SelectValue placeholder=\"Select Topic\" />\n+                          </SelectTrigger>\n+                          <SelectContent>\n+                                {topics.map((topic: Topic) => (\n+                                  <SelectItem \n+                                    key={`topic-${topic.id || 'new'}`} \n+                                    value={topic.id || ''}\n+                                  >\n+                                  <div className=\"flex items-center gap-2\">\n+                                  <Layers className=\"h-4 w-4 text-primary\" />\n+                                    {topic.title}\n+                                  </div>\n+                                </SelectItem>\n+                              ))}\n+                          </SelectContent>\n+                        </Select>\n+                        <Button \n+                          variant=\"outline\" \n+                          size=\"sm\" \n+                          className=\"w-full gap-2\"\n+                          onClick={() => setModalState({ ...modalState, showAddTopic: true })}\n+                        >\n+                          <Plus className=\"h-4 w-4\" />\n+                          Add New Topic\n+                        </Button>\n+                      </div>\n+                    )}\n+\n+                    {/* Subtopic Selection */}\n+                        {selectedTopicId && (\n+                      <div className=\"space-y-2\">\n+                        <div className=\"flex items-center justify-between\">\n+                        <Label htmlFor=\"subtopic-select\">Subtopic</Label>\n+                        </div>\n+                        <Select \n+                              value={selectedSubtopicId || ''} \n+                              onValueChange={handleSubtopicSelect}\n+                        >\n+                          <SelectTrigger id=\"subtopic-select\" className=\"w-full\">\n+                            <SelectValue placeholder=\"Select Subtopic\" />\n+                          </SelectTrigger>\n+                          <SelectContent>\n+                                {subtopics\n+                                  .filter(subtopic => subtopic.id)\n+                                  .map((subtopic, index) => (\n+                                    <SelectItem \n+                                      key={subtopic.id || `subtopic-${index}`}\n+                                      value={subtopic.id || ''}\n+                                    >\n+                                      {subtopic.title || 'Untitled Subtopic'}\n+                                    </SelectItem>\n+                                  ))}\n+                          </SelectContent>\n+                        </Select>\n+                        {!isViewMode && (\n+                          <Button \n+                            variant=\"outline\" \n+                            size=\"sm\" \n+                            className=\"w-full gap-2\"\n+                            onClick={() => setModalState({ ...modalState, showAddSubtopic: true })}\n+                          >\n+                            <Plus className=\"h-4 w-4\" />\n+                            Add New Subtopic\n+                          </Button>\n+                        )}\n+                      </div>\n+                    )}\n+\n+                    {/* Lesson Selection */}\n+                        {selectedSubtopicId && (\n+                      <div className=\"space-y-2\">\n+                        <div className=\"flex items-center justify-between\">\n+                          <Label htmlFor=\"lesson-select\">Lesson</Label>\n+                        </div>\n+                          <Select \n+                            value={currentLessonId || ''} \n+                            onValueChange={handleLessonSelect}\n+                            onOpenChange={(open) => {\n+                              setIsDropdownOpen(open);\n+                              if (open) {\n+                                setIsSidebarCollapsed(false);\n+                                setIsSidebarLocked(true);\n+                              } else {\n+                                // Small delay before unlocking to prevent immediate collapse\n+                                setTimeout(() => {\n+                                  setIsSidebarLocked(false);\n+                                }, 100);\n+                              }\n+                            }}\n+                          >\n+                            <SelectTrigger \n+                              id=\"lesson-select\" \n+                              className=\"w-full\"\n+                              onClick={(e) => {\n+                                e.stopPropagation();\n+                                setIsSidebarCollapsed(false);\n+                                setIsSidebarLocked(true);\n+                              }}\n+                            >\n+                              <SelectValue placeholder=\"Select Lesson\" />\n+                            </SelectTrigger>\n+                            <SelectContent>\n+                              {lessons\n+                                .filter((lesson): lesson is Lesson => lesson !== undefined && lesson !== null)\n+                                .map((lesson: Lesson) => (\n+                                  <SelectItem \n+                                    key={`lesson-${lesson.id || 'new'}`} \n+                                    value={lesson.id || ''}\n+                                  >\n+                                    <div className=\"flex items-center gap-2\">\n+                                      <BookOpen className=\"h-4 w-4 text-primary\" />\n+                                      {lesson.title || 'Untitled Lesson'}\n+                                    </div>\n+                                  </SelectItem>\n+                                ))}\n+                            </SelectContent>\n+                          </Select>\n+                    <Button \n+                            variant=\"outline\" \n+                            size=\"sm\" \n+                            className=\"w-full gap-2\"\n+                        onClick={() => setModalState({ ...modalState, showAddLesson: true })}\n+                          >\n+                            <Plus className=\"h-4 w-4\" />\n+                            Add New Lesson\n+                    </Button>\n+                      </div>\n+                        )}\n+                      </>\n+                    )}\n+                  </CardContent>\n+                </Card>\n+              </div>\n+\n+              {/* Collapsed view */}\n+              {isSidebarCollapsed && (\n+                <div className=\"absolute inset-0 flex flex-col items-center pt-12 gap-4\">\n+                  <BookOpen className=\"h-6 w-6 text-muted-foreground\" />\n+                  <div className=\"w-px h-full bg-border\" />\n+                </div>\n+              )}\n+            </Card>\n+          </div>\n+        \n+\n+          {/* Right Content Area */}\n+          <div className=\"flex-1 overflow-y-auto\">\n+            {isNavigating ? (\n+              <div className=\"flex items-center justify-center h-[400px]\">\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n+                <span className=\"ml-3\">Loading...</span>\n+              </div>\n+            ) : (\n+              <>\n+                {!selectedGradeId ? (\n+                  // Question Types Display Section\n+                  <div className=\"space-y-6\">\n+                    <Card>\n+                      <CardHeader>\n+                        <div className=\"flex items-center justify-between\">\n+                          <div>\n+                            <CardTitle className=\"text-xl font-semibold\">Available Question Types</CardTitle>\n+                            <CardDescription>Browse through different question formats and examples</CardDescription>\n+                          </div>\n+                          <TooltipProvider>\n+                            <Tooltip>\n+                              <TooltipTrigger>\n+                                <HelpCircle className=\"h-5 w-5 text-muted-foreground\" />\n+                              </TooltipTrigger>\n+                              <TooltipContent>\n+                                <p>Click on each type to see detailed examples</p>\n+                              </TooltipContent>\n+                            </Tooltip>\n+                          </TooltipProvider>\n+                        </div>\n+                      </CardHeader>\n+                      <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n+                        {Object.entries(QUESTION_TYPES).map(([type, details]) => (\n+                          <Card key={type} className=\"cursor-pointer hover:bg-accent/50 transition-colors\">\n+                            <CardHeader className=\"p-4\">\n+                              <div className=\"flex items-center justify-between mb-2\">\n+                                <Badge variant=\"outline\" className=\"bg-primary/5 text-lg\">\n+                                  {details.label}\n+                                </Badge>\n+                              </div>\n+                              <CardDescription className=\"text-sm\">\n+                                {details.description || 'No description available'}\n+                              </CardDescription>\n+                              <div className=\"mt-4\">\n+                                <div className=\"text-sm font-medium mb-2\">Example:</div>\n+                                <div className=\"p-3 rounded-md bg-muted/50 text-sm\">\n+                                  {type === 'multiple-choice' && (\n+                                    <>\n+                                      <div className=\"font-medium mb-2\">Q: What is the capital of France?</div>\n+                                      <div className=\"space-y-1 pl-4\">\n+                                        <div>A) Paris</div>\n+                                        <div>B) London</div>\n+                                        <div>C) Berlin</div>\n+                                        <div>D) Madrid</div>\n+                                      </div>\n+                                    </>\n+                                  )}\n+                                  {type === 'fill-in-blank' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div>Complete the sentence:</div>\n+                                      <div>The sun rises in the <span className=\"bg-primary/20 px-2 rounded\">_____</span> and sets in the <span className=\"bg-primary/20 px-2 rounded\">_____</span>.</div>\n+                                    </div>\n+                                  )}\n+                                  {type === 'true-false' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div className=\"font-medium\">Statement:</div>\n+                                      <div>The Earth is flat.</div>\n+                                      <div className=\"mt-2\">\n+                                        <Badge variant=\"outline\" className=\"mr-2\">True</Badge>\n+                                        <Badge variant=\"outline\">False</Badge>\n+                                      </div>\n+                                    </div>\n+                                  )}\n+                                  {type === 'matching' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div className=\"font-medium mb-2\">Match the countries with their capitals:</div>\n+                                      <div className=\"grid grid-cols-2 gap-4\">\n+                                        <div>\n+                                          1. France<br />\n+                                          2. Germany<br />\n+                                          3. Spain\n+                                        </div>\n+                                        <div>\n+                                          • Berlin<br />\n+                                          • Paris<br />\n+                                          • Madrid\n+                                        </div>\n+                                      </div>\n+                                    </div>\n+                                  )}\n+                                  {type === 'ordering' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div className=\"font-medium mb-2\">Arrange in chronological order:</div>\n+                                      <div className=\"space-y-1\">\n+                                        <Badge variant=\"outline\" className=\"mr-2\">1</Badge>World War II<br />\n+                                        <Badge variant=\"outline\" className=\"mr-2\">2</Badge>Industrial Revolution<br />\n+                                        <Badge variant=\"outline\" className=\"mr-2\">3</Badge>Renaissance\n+                                      </div>\n+                                    </div>\n+                                  )}\n+                                  {type === 'short-answer' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div className=\"font-medium\">Question:</div>\n+                                      <div>Explain the water cycle in 2-3 sentences.</div>\n+                                      <div className=\"mt-2 p-2 border border-dashed rounded-md border-primary/30\">\n+                                        Answer space\n+                                      </div>\n+                                    </div>\n+                                  )}\n+                                </div>\n+                              </div>\n+                            </CardHeader>\n+                          </Card>\n+                        ))}\n+                      </CardContent>\n+                    </Card>\n+                  </div>\n+                ) : isViewMode ? (\n+                  <div className=\"space-y-6\">\n+                    {selectedGradeId ? (\n+                      <div className=\"grid grid-cols-1 gap-6\">\n+                        {topics.map((topic) => (\n+                          <Card key={topic.id} className=\"border-l-4 border-l-primary\">\n+                            <CardHeader>\n+                              <div className=\"flex items-center justify-between\">\n+                                <h3 className=\"text-lg font-semibold\">{topic.title}</h3>\n+                              </div>\n+                            </CardHeader>\n+                            <CardContent>\n+                              <div className=\"space-y-4\">\n+                                {subtopics\n+                                  .filter(subtopic => subtopic.topic_id === topic.id)\n+                                  .map((subtopic, index) => (\n+                                    <div key={subtopic.id || `subtopic-${index}`} className=\"border-l-2 pl-4\">\n+                                      <h4 className=\"text-md font-medium mb-2\">{subtopic.name || 'Untitled Subtopic'}</h4>\n+                                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n+                                        {lessons\n+                                          .filter(lesson => lesson.subtopic_id === subtopic.id)\n+                                          .map((lesson) => (\n+                                            <Card \n+                                              key={lesson.id} \n+                                              className={cn(\n+                                                \"cursor-pointer transition-all duration-200\",\n+                                                \"hover:shadow-md hover:translate-y-[-2px]\",\n+                                                \"hover:bg-accent/50 hover:border-primary/50\",\n+                                                \"active:translate-y-[0px]\",\n+                                                currentLessonId === lesson.id && \"border-primary bg-accent/50 shadow-md\",\n+                                                \"group\" // Enable group hover effects\n+                                              )}\n+                                              onClick={() => handleLessonSelect(lesson.id)}\n+                                            >\n+                                              <CardHeader className=\"p-4\">\n+                                                <div className=\"flex flex-col gap-2\">\n+                                                  <div className=\"flex items-center justify-between\">\n+                                                    <div className=\"flex items-center gap-2\">\n+                                                      <BookOpen className={cn(\n+                                                        \"h-4 w-4 text-primary\",\n+                                                        \"transition-transform duration-200\",\n+                                                        \"group-hover:scale-110\"\n+                                                      )} />\n+                                                      <span className=\"font-medium\">{lesson.title}</span>\n+                                                    </div>\n+                                                    <Button\n+                                                      variant=\"outline\"\n+                                                      size=\"sm\"\n+                                                      className={cn(\n+                                                        \"opacity-0 group-hover:opacity-100\",\n+                                                        \"transition-all duration-200\",\n+                                                        \"hover:bg-primary hover:text-primary-foreground\"\n+                                                      )}\n+                                                      disabled={!lesson.content || currentLessonId !== lesson.id}\n+                                                      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n+                                                        e.stopPropagation();\n+                                                        window.location.href = `/teacher/lessons/${lesson.id}`;\n+                                                      }}\n+                                                    >\n+                                                      Start Lesson\n+                                                    </Button>\n+                                                  </div>\n+                                                  <div className=\"flex items-center gap-2\">\n+                                                    <Badge variant=\"outline\" className={cn(\n+                                                      \"bg-primary/5\",\n+                                                      \"transition-colors duration-200\",\n+                                                      \"group-hover:bg-primary/10\"\n+                                                    )}>\n+                                                      {lesson.questions?.length || 0} Questions\n+                                                    </Badge>\n+                                                    <Badge variant=\"outline\" className={cn(\n+                                                      \"bg-primary/5\",\n+                                                      \"transition-colors duration-200\",\n+                                                      \"group-hover:bg-primary/10\"\n+                                                    )}>\n+                                                      {lesson.activities?.length || 0} Activities\n+                                                    </Badge>\n+                                                  </div>\n+                                                </div>\n+                                              </CardHeader>\n+                                            </Card>\n+                                          ))}\n+                                      </div>\n+                                    </div>\n+                                  ))}\n+                              </div>\n+                            </CardContent>\n+                          </Card>\n+                        ))}\n+                      </div>\n+                    ) : (\n+                      <div className=\"text-center py-20\">\n+                        <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n+                        <h3 className=\"text-lg font-medium\">Select a Grade</h3>\n+                        <p className=\"text-sm text-muted-foreground\">\n+                          Choose a grade from the left panel to start managing content\n+                        </p>\n+                      </div>\n+                    )}\n+                  </div>\n+                ) : (\n+                  // Edit Mode Content\n+                  <div className=\"space-y-4\">\n+                    {/* Lesson Title */}\n+                    <Card>\n+                      <CardHeader>\n+                        <div className=\"flex items-center justify-between mb-4\">\n+                          <h2 className=\"text-2xl font-bold\">Lesson Content</h2>\n+                                                    <Button\n+                                                      variant=\"outline\"\n+                                                      size=\"sm\"\n+                            onClick={() => setIsContentEditorOpen(true)}\n+                          >\n+                            <Pencil className=\"h-4 w-4 mr-2\" />\n+                            Edit Content\n+                          </Button>\n+                        </div>\n+                      </CardHeader>\n+                      <CardContent className=\"space-y-4\">\n+                        {/* Lesson Title */}\n+                        <div className=\"flex items-center justify-between\">\n+                          <div className=\"space-y-1\">\n+                            <Label>Lesson Title</Label>\n+                            <InlineEdit\n+                              value={lessonTitle}\n+                              onSave={async (newTitle) => {\n+                                setLessonTitle(newTitle);\n+                                await handleSaveLesson();\n+                              }}\n+                              isEditing={isEditingTitle}\n+                              setIsEditing={setIsEditingTitle}\n+                              placeholder=\"Enter lesson title\"\n+                              className=\"text-lg font-medium\"\n+                            />\n+                          </div>\n+                        </div>\n+\n+                        {/* Content Editor and Display */}\n+                        <div className=\"space-y-4\">\n+                          {isContentEditorOpen ? (\n+                            <div className=\"border rounded-lg p-4\">\n+                              <div className=\"mb-4\">\n+                                <Label>Content Heading</Label>\n+                                <InlineEdit\n+                                  value={contentHeading}\n+                                  onSave={(newHeading) => setContentHeading(newHeading)}\n+                                  isEditing={isEditingHeading}\n+                                  setIsEditing={setIsEditingHeading}\n+                                  placeholder=\"Add content heading\"\n+                                  className=\"text-base text-muted-foreground\"\n+                                />\n+                              </div>\n+                              <RichTextEditor\n+                                value={lessonContent}\n+                                onChange={setLessonContent}\n+                                onSave={async (content) => {\n+                                  await handleContentSave(content);\n+                                  setIsContentEditorOpen(false);\n+                                }}\n+                                placeholder=\"Add lesson content here...\"\n+                              />\n+                            </div>\n+                          ) : lessonContent ? (\n+                            <div className=\"prose prose-sm max-w-none\">\n+                              {contentHeading && (\n+                                <h3 className=\"text-lg font-semibold mb-2\">{contentHeading}</h3>\n+                              )}\n+                              <div dangerouslySetInnerHTML={{ __html: lessonContent }} />\n+                            </div>\n+                          ) : (\n+                            <div className=\"text-center py-8 text-muted-foreground\">\n+                              Click 'Edit Content' to add lesson content\n+                            </div>\n+                          )}\n+                        </div>\n+                      </CardContent>\n+                    </Card>\n+\n+                    {/* Tabs */}\n+                    <Tabs defaultValue=\"questions\" className=\"mt-6\">\n+                    <TabsList className=\"grid w-full grid-cols-2\">\n+                        <TabsTrigger value=\"questions\">\n+                          <MessageSquare className=\"h-4 w-4 mr-2\" />\n+                        Questions\n+                      </TabsTrigger>\n+                        <TabsTrigger value=\"activities\">\n+                          <ActivityIcon className=\"h-4 w-4 mr-2\" />\n+                        Activities\n+                      </TabsTrigger>\n+                    </TabsList>\n+\n+                      {/* Questions Tab */}\n+                      <TabsContent value=\"questions\" className=\"space-y-4\">\n+                      <CardHeader>\n+                          <CardDescription>Add and manage questions for this lesson</CardDescription>\n+                      </CardHeader>\n+                        {questions.map((question, index) => (\n+                          <Card key={index} className={cn(\n+                            \"relative border-l-4 transition-colors duration-200\",\n+                            expandedQuestion === index ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\n+                          )}>\n+                            <CardHeader className=\"pb-3\">\n+                              <div className=\"flex items-center justify-between gap-4\">\n+                                <div className=\"flex items-center gap-3 min-w-0 flex-1\">\n+                                  <div className=\"flex items-center gap-2 flex-shrink-0\">\n+                                    <span className=\"px-2 py-1 bg-primary/10 rounded-md text-sm font-semibold text-primary whitespace-nowrap\">\n+                                      Q {index + 1}\n+                                    </span>\n+                                    <Badge variant=\"outline\" className=\"whitespace-nowrap\">\n+                                      {QUESTION_TYPES[question.type as keyof typeof QUESTION_TYPES]?.label || question.type}\n+                                    </Badge>\n+                                    {question.isDraft && (\n+                                      <Badge variant=\"secondary\" className=\"whitespace-nowrap\">Draft</Badge>\n+                                )}\n+                                  </div>\n+                                      {expandedQuestion !== index && (\n+                                        <div className=\"text-sm text-muted-foreground truncate\">\n+                                          {question.title || 'No question text'} - {question.data?.content || 'No question texts'}\n+                                        </div>\n+                                      )}\n+                                    </div>\n+                                    <div className=\"flex items-center gap-2 flex-shrink-0\">\n+                                      <Button\n+                                        variant=\"ghost\"\n+                                        size=\"sm\"\n+                                        onClick={() => handleQuestionExpand(index)}\n+                                      >\n+                                        {expandedQuestion === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n+                                      </Button>\n+                                      <Button\n+                                        variant=\"ghost\"\n+                                        size=\"sm\"\n+                                        onClick={() => handleRemoveQuestion(index)}\n+                                      >\n+                                        <Trash2 className=\"h-4 w-4 text-destructive\" />\n+                                      </Button>\n+                                    </div>\n+                                  </div>\n+                                </CardHeader>\n+                                {expandedQuestion === index && (\n+                                  <CardContent>\n+                                    <QuestionForm\n+                                      key={index}\n+                                      question={{ \n+                                        ...question, \n+                                        lesson_id: currentLessonId || '',\n+                                        type: isValidQuestionType(question.type) ? question.type : 'speaking',\n+                                        data: {\n+                                          prompt: question.data?.prompt ?? '',\n+                                          teacher_script: question.data?.teacher_script ?? '',\n+                                          followup_prompt: question.data?.followup_prompt ?? [],\n+                                          sample_answer: question.data?.sample_answer ?? '',\n+                                          \n+                                        } \n+                                      }}\n+                                      index={index}\n+                                      onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\n+                                        await handleUpdateQuestion(index, {\n+                                          ...updatedQuestion,\n+                                          data: {\n+                                            prompt: updatedQuestion.data?.prompt ?? '',\n+                                            teacher_script: updatedQuestion.data?.teacher_script ?? '',\n+                                            followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\n+                                            sample_answer: updatedQuestion.data?.sample_answer ?? '',\n+                                            metadata: updatedQuestion.metadata ?? {},\n+                                            },\n+                                            correct_answer: updatedQuestion.correct_answer ?? '',\n+                                            content: updatedQuestion.content ?? ''  // Add default value\n+                                        });\n+                                      }}\n+                                      onRemove={handleRemoveQuestion}\n+                                      onAddExercisePrompt={handleAddExercisePrompt}\n+                                      onRemoveExercisePrompt={handleRemoveExercisePrompt}\n+                                      onExercisePromptChange={handleExercisePromptChange}\n+                                    /><Button \n+                                    size=\"sm\"\n+                                    variant=\"outline\"\n+                                    onClick={() => handleSaveQuestion(question, index)}\n+                                    className=\"ml-2\"\n+                                  >\n+                                    {questionSaveStatuses.find(s => s.id === question.id)?.status === 'saving' ? (\n+                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n+                                    ) : (\n+                                      <Save className=\"h-4 w-4 mr-2\" />\n+                                    )}\n+                                    Save Question\n+                                                    </Button>\n+                                    {/* Exercise Prompts with Save Buttons */}\n+                                    {question.exercisePrompts?.map((prompt, promptIndex) => (\n+                                      <div key={`${question.id}-prompt-${promptIndex}`} className=\"mt-4\"> {/* Updated key */}\n+                                        <div className=\"flex items-center justify-between mb-2\">\n+                                          <h4 className=\"text-sm font-medium\">Exercise Prompt {promptIndex + 1}</h4>\n+                                          <div className=\"flex items-center gap-2\">\n+                                            <TooltipProvider>\n+                                              <Tooltip>\n+                                                <TooltipTrigger asChild>\n+                                                  <Button\n+                                                    size=\"sm\"\n+                                                    variant=\"outline\"\n+                                                    onClick={() => handleSavePrompt(question.id, prompt, promptIndex)}\n+                                                    disabled={promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving'}\n+                                                  >\n+                                                    {promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving' ? (\n+                                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n+                                                    ) : (\n+                                                      <Save className=\"h-4 w-4 mr-2\" />\n+                                                    )}\n+                                                    Save Prompt\n+                                                  </Button>\n+                                                </TooltipTrigger>\n+                                                <TooltipContent>\n+                                                  {`Status: ${promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}`}\n+                                                </TooltipContent>\n+                                              </Tooltip>\n+                                            </TooltipProvider>\n+                                            <Badge variant={\n+                                              promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saved'\n+                                                ? 'secondary'\n+                                                : promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'error'\n+                                                ? 'destructive'\n+                                                : 'default'\n+                                            }>\n+                                              {promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}\n+                                            </Badge>\n+                                                  </div>\n+                                        </div>\n+                                        <ExercisePromptCard\n+                                          key={prompt.id} // Add a unique key here\n+                                          prompt={prompt}\n+                                          promptIndex={promptIndex}\n+                                          onRemove={() => handleRemoveExercisePrompt(index, promptIndex)}\n+                                          onUpdate={(updatedPrompt: ExercisePrompt) => {\n+                                            // Prevent duplicate updates\n+                                            if (updatedPrompt.id === prompt.id) {\n+                                              handleExercisePromptChange(index, promptIndex, updatedPrompt);\n+                                            }\n+                                          }}\n+                                        />\n+                                      </div>\n+                                    ))}\n+                                  </CardContent>\n+                                )}\n+                              </Card>\n+                            ))}\n+\n+                            {/* Add Question Button */}\n+                            <div className=\"flex items-center justify-between\">\n+                              <QuestionTypeSelect \n+                                value={selectedQuestionType} \n+                                onChange={handleQuestionTypeChange}\n+                              />\n+                                        <Button\n+                                          onClick={handleAddQuestion}\n+                                          disabled={!selectedQuestionType}\n+                                        >\n+                                <Plus className=\"h-4 w-4 mr-2\" />\n+                                          Add Question\n+                                        </Button>\n+                                      </div>\n+                      </TabsContent>\n+\n+                      {/* Activities Tab */}\n+                      <TabsContent value=\"activities\" className=\"space-y-4\">\n+                      <CardHeader>\n+                          <CardDescription>Add and manage activities for this lesson</CardDescription>\n+                      </CardHeader>\n+                        {activities.map((activity, index) => (\n+                          <Card key={index}>\n+                            <CardHeader className=\"pb-3\">\n+                              <div className=\"flex items-center justify-between\">\n+                                  <div className=\"flex items-center gap-2\">\n+                                  <Badge variant=\"outline\">Activity {index + 1}</Badge>\n+                                  </div>\n+                                <div className=\"flex items-center gap-2\">\n+                                  <Button\n+                                    variant=\"ghost\"\n+                                    size=\"sm\"\n+                                    onClick={() => handleActivityExpand(index)}\n+                                  >\n+                                    {expandedActivity === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n+                                  </Button>\n+                                  <Button\n+                                    variant=\"ghost\"\n+                                    size=\"sm\"\n+                                    onClick={() => handleRemoveActivity(index)}\n+                                  >\n+                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\n+                                  </Button>\n+                                </div>\n+                              </div>\n+                            </CardHeader>\n+                            {expandedActivity === index && (\n+                              <CardContent>\n+                                <div className=\"space-y-4\">\n+                                  <div className=\"space-y-2\">\n+                                    <Label>Instructions</Label>\n+                                    <Textarea\n+                                      value={activity.instructions}\n+                                      onChange={(e) => handleUpdateActivity(index, {\n+                                        ...activity,\n+                                        instructions: e.target.value\n+                                      })}\n+                                      placeholder=\"Enter activity instructions\"\n+                                    />\n+                                  </div>\n+                                    \n+                                    {/* Media Section */}\n+                                    <div className=\"space-y-2\">\n+                                      <Label>Media</Label>\n+                                      {activity.media?.map((media, mediaIndex) => (\n+                                        <div key={mediaIndex} className=\"flex items-center gap-2\">\n+                                          <Input\n+                                            value={media.url}\n+                                            onChange={(e) => {\n+                                              const updatedMedia = [...(activity.media || [])];\n+                                              updatedMedia[mediaIndex] = {\n+                                                type: media.type,\n+                                                url: e.target.value\n+                                              };\n+                                              handleUpdateActivity(index, {\n+                                                ...activity,\n+                                                media: updatedMedia\n+                                              });\n+                                            }}\n+                                            placeholder=\"Media URL\"\n+                                          />\n+                                          <Select\n+                                            value={media.type}\n+                                            onValueChange={(value) => {\n+                                              const updatedMedia = [...(activity.media || [])];\n+                                              updatedMedia[mediaIndex] = {\n+                                                type: value as 'image' | 'gif' | 'video',\n+                                                url: media.url\n+                                              };\n+                                              handleUpdateActivity(index, {\n+                                                ...activity,\n+                                                media: updatedMedia\n+                                              });\n+                                            }}\n+                                          >\n+                                            <SelectTrigger className=\"w-[120px]\">\n+                                              <SelectValue placeholder=\"Type\" />\n+                                            </SelectTrigger>\n+                                            <SelectContent>\n+                                              <SelectItem value=\"image\">Image</SelectItem>\n+                                              <SelectItem value=\"gif\">GIF</SelectItem>\n+                                              <SelectItem value=\"video\">Video</SelectItem>\n+                                            </SelectContent>\n+                                          </Select>\n+                                <Button\n+                                            variant=\"ghost\"\n+                                            size=\"sm\"\n+                                  onClick={() => {\n+                                              const updatedMedia = (activity.media || []).filter((_, i) => i !== mediaIndex);\n+                                              handleUpdateActivity(index, {\n+                                                ...activity,\n+                                                media: updatedMedia\n+                                          });\n+                                          }}\n+                                  >\n+                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\n+                                  </Button>\n+                                </div>\n+                                        ))}\n+                                  <Button\n+                                    variant=\"outline\"\n+                                    size=\"sm\"\n+                                            onClick={() => {\n+                                              handleUpdateActivity(index, {\n+                                                ...activity,\n+                                                media: [\n+                                                  ...(activity.media || [])  ,\n+                                                  { url: '', type: 'image' }\n+                                                ]\n+                                              });\n+                                            }}\n+                                  >\n+                                    <Plus className=\"h-4 w-4 mr-2\" />\n+                                            Add Media\n+                                  </Button>\n+                                </div>\n+                                      </div>\n+                                    </CardContent>\n+                                  )}\n+                                </Card>\n+                              ))}\n+\n+                              {/* Add Activity Button */}\n+                              <Button\n+                                onClick={handleAddActivity}\n+                                className=\"w-full\"\n+                              >\n+                                <Plus className=\"h-4 w-4 mr-2\" />\n+                                Add Activity\n+                              </Button>\n+                          </TabsContent>\n+                        </Tabs>\n+                        </div>\n+                )}\n+\n+                    {/* Floating Save Button */}\n+                    <div className=\"fixed bottom-8 right-8 flex items-center gap-4\">\n+                      {saveProgress !== 'idle' && (\n+                        <div className={cn(\n+                          \"flex items-center gap-2 rounded-lg px-4 py-2 shadow-lg\",\n+                          {\n+                            \"bg-background border\": saveProgress === 'saving',\n+                            \"bg-green-500 text-white\": saveProgress === 'saved',\n+                            \"bg-destructive text-destructive-foreground\": saveProgress === 'error'\n+                          }\n+                        )}>\n+                          {saveProgress === 'saving' && (\n+                            <>\n+                              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n+                              <span className=\"text-sm\">Saving changes...</span>\n+                            </>\n+                          )}\n+                          {saveProgress === 'saved' && (\n+                            <>\n+                              <Check className=\"h-4 w-4\" />\n+                              <span className=\"text-sm\">Changes saved</span>\n+                            </>\n+                          )}\n+                          {saveProgress === 'error' && (\n+                            <>\n+                              <X className=\"h-4 w-4\" />\n+                              <span className=\"text-sm\">Error saving changes</span>\n+                            </>\n+                          )}\n+                        </div>\n+                      )}\n+                      <Button\n+                        onClick={handleSaveLesson}\n+                        disabled={saveProgress === 'saving'}\n+                        className=\"shadow-lg\"\n+                      >\n+                        {saveProgress === 'saving' ? (\n+                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n+                        ) : (\n+                          <Save className=\"h-4 w-4 mr-2\" />\n+                        )}\n+                        {saveProgress === 'saving' ? 'Saving...' : 'Save Lesson'}\n+                      </Button>\n+                    </div>\n+                  </>\n+            )}\n+    </div>\n+    \n+\n+      {/* Floating Save Button */}\n+      {selectedSubtopicId && currentLessonId && (\n+          <div className=\"fixed bottom-4 right-4 flex flex-col gap-2\">\n+            <TooltipProvider>\n+              <Tooltip>\n+                <TooltipTrigger asChild>\n+                  <Button\n+                    size=\"icon\"\n+                    className=\"rounded-full h-12 w-12 shadow-lg\"\n+                    onClick={handleSaveLesson}\n+                    disabled={!selectedSubtopicId || !lessonTitle || questions.length === 0}\n+                  >\n+                    <Save className=\"h-6 w-6\" />\n+                  </Button>\n+                </TooltipTrigger>\n+                <TooltipContent>\n+                  <p>Save Lesson (Ctrl+S)</p>\n+                </TooltipContent>\n+              </Tooltip>\n+            </TooltipProvider>\n+          </div>\n+        )}\n+        <SaveFeedback />\n+\n+        {/* Add Grade Modal - do not delete */}\n+        {/* {modalState.showAddGrade && (\n+          <Dialog \n+            open={modalState.showAddGrade} \n+            onOpenChange={(open) => handleModalStateChange('showAddGrade', open)}\n+          >\n+            <DialogContent \n+              className=\"sm:max-w-[425px]\"\n+              onEscapeKeyDown={cleanupModalState}\n+              onPointerDownOutside={cleanupModalState}\n+            >\n+              <DialogHeader>\n+                <DialogTitle>Add New Grade</DialogTitle>\n+                <DialogDescription>Enter the details for the new grade.</DialogDescription>\n+              </DialogHeader>\n+              <div className=\"space-y-4 py-4\">\n+                <div className=\"space-y-2\">\n+                  <Label htmlFor=\"grade-name\">Grade Name</Label>\n+                  <Input\n+                    id=\"grade-name\"\n+                    value={newItemData.name}\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n+                    placeholder=\"Enter grade name\"\n+                  />\n+      </div>\n+              </div>\n+              <DialogFooter>\n+                <Button variant=\"outline\" onClick={() => {\n+                  setModalState({ ...modalState, showAddGrade: false });\n+                  setNewItemData({ name: '', description: '' });\n+                }}>\n+                  Cancel\n+                </Button>\n+                <Button onClick={handleCreateGrade} disabled={!newItemData.name}>Create Grade</Button>\n+              </DialogFooter>\n+            </DialogContent>\n+          </Dialog>\n+        )} */}\n+\n+        {/* Add Topic Modal */}\n+        {modalState.showAddTopic && (\n+          <Dialog \n+            open={modalState.showAddTopic} \n+            onOpenChange={(open) => handleModalStateChange('showAddTopic', open)}\n+          >\n+            <DialogContent \n+              className=\"sm:max-w-[425px]\"\n+              onEscapeKeyDown={cleanupModalState}\n+              onPointerDownOutside={cleanupModalState}\n+            >\n+              <DialogHeader>\n+                <DialogTitle>Add New Topic</DialogTitle>\n+                <DialogDescription>Enter the details for the new topic.</DialogDescription>\n+              </DialogHeader>\n+              <div className=\"space-y-4 py-4\">\n+                <div className=\"space-y-2\">\n+                  <Label htmlFor=\"topic-name\">Topic Name</Label>\n+                  <Input\n+                    id=\"topic-name\"\n+                    value={newItemData.name}\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n+                    placeholder=\"Enter topic name\"\n+                  />\n+                </div>\n+              </div>\n+              <DialogFooter>\n+                <Button variant=\"outline\" onClick={() => {\n+                  setModalState({ ...modalState, showAddTopic: false });\n+                  setNewItemData({ name: '', description: '' });\n+                }}>\n+                  Cancel\n+                </Button>\n+                <Button onClick={handleCreateTopic} disabled={!newItemData.name}>Create Topic</Button>\n+              </DialogFooter>\n+            </DialogContent>\n+          </Dialog>\n+        )}\n+\n+        {/* Add Subtopic Modal */}\n+        {modalState.showAddSubtopic && (\n+          <Dialog \n+            open={modalState.showAddSubtopic} \n+            onOpenChange={(open) => handleModalStateChange('showAddSubtopic', open)}\n+          >\n+            <DialogContent \n+              className=\"sm:max-w-[425px]\"\n+              onEscapeKeyDown={cleanupModalState}\n+              onPointerDownOutside={cleanupModalState}\n+            >\n+              <DialogHeader>\n+                <DialogTitle>Add New Subtopic</DialogTitle>\n+                <DialogDescription>Enter the details for the new subtopic.</DialogDescription>\n+              </DialogHeader>\n+              <div className=\"space-y-4 py-4\">\n+                <div className=\"space-y-2\">\n+                  <Label htmlFor=\"subtopic-name\">Subtopic Name</Label>\n+                  <Input\n+                    id=\"subtopic-name\"\n+                    value={newItemData.name}\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n+                    placeholder=\"Enter subtopic name\"\n+                  />\n+                </div>\n+              </div>\n+              <DialogFooter>\n+                <Button variant=\"outline\" onClick={() => {\n+                  setModalState({ ...modalState, showAddSubtopic: false });\n+                  setNewItemData({ name: '', description: '' });\n+                }}>\n+                  Cancel\n+                </Button>\n+                <Button onClick={() => handleCreateSubtopic({ title: newItemData.name })} disabled={!newItemData.name}>Create Subtopic</Button>\n+              </DialogFooter>\n+            </DialogContent>\n+          </Dialog>\n+        )}\n+\n+        {/* Add Lesson Modal */}\n+        {modalState.showAddLesson && (\n+          <Dialog \n+            open={modalState.showAddLesson} \n+            onOpenChange={(open) => handleModalStateChange('showAddLesson', open)}\n+          >\n+            <DialogContent \n+              className=\"sm:max-w-[425px]\"\n+              onEscapeKeyDown={cleanupModalState}\n+              onPointerDownOutside={cleanupModalState}\n+            >\n+              <DialogHeader>\n+                <DialogTitle>Add New Lesson</DialogTitle>\n+                <DialogDescription>Enter the details for the new lesson.</DialogDescription>\n+              </DialogHeader>\n+              <div className=\"space-y-4 py-4\">\n+                <div className=\"space-y-2\">\n+                  <Label htmlFor=\"lesson-name\">Lesson Title</Label>\n+                  <Input\n+                    id=\"lesson-name\"\n+                    value={newItemData.name}\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n+                    placeholder=\"Enter lesson title\"\n+                  />\n+                </div>\n+              </div>\n+              <DialogFooter>\n+                <Button variant=\"outline\" onClick={() => {\n+                  setModalState({ ...modalState, showAddLesson: false });\n+                  setNewItemData({ name: '', description: '' });\n+                }}>\n+                  Cancel\n+                </Button>\n+                <Button onClick={handleCreateLesson} disabled={!newItemData.name}>Create Lesson</Button>\n+              </DialogFooter>\n+            </DialogContent>\n+          </Dialog>\n+        )}\n+      </div>\n+      <Toaster />\n+      </div>\n+  );\n+} \n+                <div className=\"space-y-2\">\n+                  <Label htmlFor=\"lesson-name\">Lesson Title</Label>\n+                  <Input\n+                    id=\"lesson-name\"\n+                    value={newItemData.name}\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n+                    placeholder=\"Enter lesson title\"\n+                  />\n+                </div>\n+              </div>\n+              <DialogFooter>\n+                <Button variant=\"outline\" onClick={() => {\n+                  setModalState({ ...modalState, showAddLesson: false });\n+                  setNewItemData({ name: '', description: '' });\n+                }}>\n+                  Cancel\n+                </Button>\n+                <Button onClick={handleCreateLesson} disabled={!newItemData.name}>Create Lesson</Button>\n+              </DialogFooter>\n+            </DialogContent>\n+          </Dialog>\n+        )}\n+      </div>\n+      <Toaster />\n+      </div>\n+  );\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739964619434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2128,43 +2128,38 @@\n                           <Card \n                             key={topic.id} \n                             className={cn(\n                               \"border-l-4 transition-all duration-200 hover:shadow-md\",\n-                              expandedTopic === topic.id ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\n+                              expandedTopic === topic.id \n+                                ? \"border-l-primary bg-accent/5\" \n+                                : \"border-l-primary/40 hover:border-l-primary\"\n                             )}\n                           >\n-                            <CardHeader className=\"py-3 cursor-pointer select-none\">\n+                            <CardHeader \n+                              className=\"py-3 cursor-pointer select-none\" \n+                              onClick={() => handleTopicExpand(topic.id || '')}\n+                            >\n                               <div className=\"flex items-center justify-between\">\n-                                <div className=\"flex items-center gap-2\" onClick={() => handleTopicExpand(topic.id || '')}>\n+                                <div className=\"flex items-center gap-2\">\n                                   <Layers className=\"h-4 w-4 text-primary\" />\n                                   <h4 className=\"font-medium\">{topic.title}</h4>\n+                                  <Badge variant=\"outline\" className=\"ml-2\">\n+                                    {subtopics.filter(s => s.topic_id === topic.id).length} Subtopics\n+                                  </Badge>\n                                 </div>\n                                 <div className=\"flex items-center gap-2\">\n                                   <AlertDialog>\n                                     <AlertDialogTrigger asChild>\n                                       <Button \n                                         variant=\"ghost\" \n                                         size=\"sm\" \n                                         className=\"hover:bg-destructive/10 hover:text-destructive\"\n-                                        onClick={(e) => e.stopPropagation()}\n+                                        onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}\n                                       >\n                                         <Trash className=\"h-4 w-4\" />\n                                       </Button>\n                                     </AlertDialogTrigger>\n-                                    <AlertDialogContent>\n-                                      <AlertDialogHeader>\n-                                        <AlertDialogTitle>Delete Topic</AlertDialogTitle>\n-                                        <AlertDialogDescription>\n-                                          Are you sure you want to delete {topic.title}? This action cannot be undone.\n-                                        </AlertDialogDescription>\n-                                      </AlertDialogHeader>\n-                                      <AlertDialogFooter>\n-                                        <AlertDialogCancel>Cancel</AlertDialogCancel>\n-                                        <AlertDialogAction onClick={() => handleDelete(topic.id, 'topic', topic.title)}>\n-                                          Delete\n-                                        </AlertDialogAction>\n-                                      </AlertDialogFooter>\n-                                    </AlertDialogContent>\n+                                    {/* Alert Dialog Content */}\n                                   </AlertDialog>\n                                   <ChevronDown className={cn(\n                                     \"h-4 w-4 transition-transform duration-200\",\n                                     expandedTopic === topic.id ? \"rotate-0\" : \"-rotate-90\"\n@@ -2180,92 +2175,124 @@\n                                   animate={{ height: \"auto\", opacity: 1 }}\n                                   exit={{ height: 0, opacity: 0 }}\n                                   transition={{ duration: 0.2 }}\n                                 >\n-                                  <CardContent className=\"py-0 pl-4\">\n-                                    {subtopics.map((subtopic) => (\n-                                      <div key={subtopic.id} className=\"mb-3 last:mb-0\">\n-                                        <div className=\"flex items-center justify-between py-2\">\n-                                          <div className=\"flex items-center gap-2\" onClick={() => handleSubtopicExpand(subtopic.id)}>\n-                                            <BookOpen className=\"h-4 w-4 text-primary\" />\n-                                            <span className=\"text-sm font-medium\">{subtopic.title}</span>\n-                                          </div>\n-                                          <div className=\"flex items-center gap-2\">\n-                                            <AlertDialog>\n-                                              <AlertDialogTrigger asChild>\n-                                                <Button \n-                                                  variant=\"ghost\" \n-                                                  size=\"sm\"\n-                                                  className=\"hover:bg-destructive/10 hover:text-destructive\"\n-                                                  onClick={(e) => e.stopPropagation()}\n-                                                >\n-                                                  <Trash className=\"h-4 w-4\" />\n-                                                </Button>\n-                                              </AlertDialogTrigger>\n-                                              <AlertDialogContent>\n-                                                <AlertDialogHeader>\n-                                                  <AlertDialogTitle>Delete Subtopic</AlertDialogTitle>\n-                                                  <AlertDialogDescription>\n-                                                    Are you sure you want to delete {subtopic.title}?\n-                                                  </AlertDialogDescription>\n-                                                </AlertDialogHeader>\n-                                                <AlertDialogFooter>\n-                                                  <AlertDialogCancel>Cancel</AlertDialogCancel>\n-                                                  <AlertDialogAction onClick={() => handleDelete(subtopic.id, 'subtopic', subtopic.title)}>\n-                                                    Delete\n-                                                  </AlertDialogAction>\n-                                                </AlertDialogFooter>\n-                                              </AlertDialogContent>\n-                                            </AlertDialog>\n-                                            <ChevronDown className={cn(\n-                                              \"h-4 w-4 transition-transform duration-200\",\n-                                              expandedSubtopic === subtopic.id ? \"rotate-0\" : \"-rotate-90\"\n-                                            )} />\n-                                          </div>\n+                                  <CardContent className=\"pt-0 pb-2\">\n+                                    <div className=\"pl-4 space-y-2\">\n+                                      {isLoadingSubtopics ? (\n+                                        <div className=\"flex items-center justify-center py-4\">\n+                                          <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\n                                         </div>\n+                                      ) : (\n+                                        subtopics\n+                                          .filter(subtopic => subtopic.topic_id === topic.id)\n+                                          .map((subtopic: SubTopic) => (\n+                                            <div \n+                                              key={subtopic.id}\n+                                              className={cn(\n+                                                \"rounded-lg border transition-colors\",\n+                                                expandedSubtopic === subtopic.id \n+                                                  ? \"bg-accent/10 border-primary/20\" \n+                                                  : \"hover:bg-accent/5\"\n+                                              )}\n+                                            >\n+                                              <div \n+                                                className=\"p-3 cursor-pointer\"\n+                                                onClick={() => handleSubtopicExpand(subtopic.id || '')}\n+                                              >\n+                                                <div className=\"flex items-center justify-between py-2 cursor-pointer hover:bg-accent/50 rounded-md px-2\">\n+                                                  <div className=\"flex items-center gap-2\">\n+                                                    <BookOpen className=\"h-4 w-4 text-primary\" />\n+                                                    <span className=\"text-sm font-medium\">{subtopic.name}</span>\n+                                                    <Badge variant=\"outline\" className=\"ml-2\">\n+                                                      {lessons.filter(l => l.subtopic_id === subtopic.id).length} Lessons\n+                                                    </Badge>\n+                                                  </div>\n+                                                  <div className=\"flex items-center gap-2\">\n+                                                    <AlertDialog>\n+                                                      <AlertDialogTrigger asChild>\n+                                                        <Button \n+                                                          variant=\"ghost\" \n+                                                          size=\"sm\" \n+                                                          className=\"hover:bg-destructive/10 hover:text-destructive\"\n+                                                          onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}\n+                                                        >\n+                                                          <Trash className=\"h-4 w-4\" />\n+                                                        </Button>\n+                                                      </AlertDialogTrigger>\n+                                                      {/* Alert Dialog Content */}\n+                                                    </AlertDialog>\n+                                                    <ChevronDown className={cn(\n+                                                      \"h-4 w-4 transition-transform duration-200\",\n+                                                      expandedSubtopic === subtopic.id ? \"rotate-0\" : \"-rotate-90\"\n+                                                    )} />\n+                                                  </div>\n+                                                </div>\n \n-                                        {/* Similar pattern for lessons */}\n-                                        {expandedSubtopic === subtopic.id && (\n-                                          <div className=\"pl-4 space-y-2\">\n-                                            {lessons.map((lesson) => (\n-                                              <div key={lesson.id} \n-                                                className=\"flex items-center justify-between gap-2 py-2 px-3 rounded-md transition-colors hover:bg-accent\">\n-                                                <div className=\"flex items-center gap-2\" onClick={() => handleLessonSelect(lesson.id)}>\n-                                                  <BookOpen className=\"h-4 w-4 text-muted-foreground\" />\n-                                                  <span className=\"text-sm\">{lesson.title}</span>\n-                                                </div>\n-                                                <AlertDialog>\n-                                                  <AlertDialogTrigger asChild>\n-                                                    <Button \n-                                                      variant=\"ghost\" \n-                                                      size=\"sm\"\n-                                                      className=\"hover:bg-destructive/10 hover:text-destructive\"\n-                                                      onClick={(e) => e.stopPropagation()}\n+                                                <AnimatePresence>\n+                                                  {expandedSubtopic === subtopic.id && (\n+                                                    <motion.div\n+                                                      initial={{ height: 0, opacity: 0 }}\n+                                                      animate={{ height: \"auto\", opacity: 1 }}\n+                                                      exit={{ height: 0, opacity: 0 }}\n+                                                      transition={{ duration: 0.2 }}\n                                                     >\n-                                                      <Trash className=\"h-4 w-4\" />\n-                                                    </Button>\n-                                                  </AlertDialogTrigger>\n-                                                  <AlertDialogContent>\n-                                                    <AlertDialogHeader>\n-                                                      <AlertDialogTitle>Delete Lesson</AlertDialogTitle>\n-                                                      <AlertDialogDescription>\n-                                                        Are you sure you want to delete {lesson.title}?\n-                                                      </AlertDialogDescription>\n-                                                    </AlertDialogHeader>\n-                                                    <AlertDialogFooter>\n-                                                      <AlertDialogCancel>Cancel</AlertDialogCancel>\n-                                                      <AlertDialogAction onClick={() => handleDelete(lesson.id, 'lesson', lesson.title)}>\n-                                                        Delete\n-                                                      </AlertDialogAction>\n-                                                    </AlertDialogFooter>\n-                                                  </AlertDialogContent>\n-                                                </AlertDialog>\n+                                                      <div className=\"px-3 pb-3\">\n+                                                        <div className=\"space-y-2\">\n+                                                          {isLoadingLessons ? (\n+                                                            <div className=\"flex items-center justify-center py-4\">\n+                                                              <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\n+                                                            </div>\n+                                                          ) : (\n+                                                            lessons\n+                                                              .filter(lesson => lesson.subtopic_id === subtopic.id)\n+                                                              .map((lesson: Lesson) => (\n+                                                                <div\n+                                                                  key={lesson.id}\n+                                                                  onClick={() => handleLessonSelect(lesson.id || '')}\n+                                                                  className={cn(\n+                                                                    \"flex items-center gap-3 p-2 rounded-md cursor-pointer transition-colors\",\n+                                                                    \"hover:bg-accent\",\n+                                                                    currentLessonId === lesson.id && \"bg-accent\"\n+                                                                  )}\n+                                                                >\n+                                                                  <div className=\"flex items-center gap-2 flex-1\">\n+                                                                    <div className=\"flex h-8 w-8 items-center justify-center rounded-md border bg-background\">\n+                                                                      <BookOpen className=\"h-4 w-4 text-primary\" />\n+                                                                    </div>\n+                                                                    <div className=\"flex flex-col\">\n+                                                                      <span className=\"text-sm font-medium\">{lesson.title}</span>\n+                                                                      <span className=\"text-xs text-muted-foreground\">\n+                                                                        {lesson.duration} mins • {lesson.questions?.length || 0} Questions\n+                                                                      </span>\n+                                                                    </div>\n+                                                                  </div>\n+                                                                  <AlertDialog>\n+                                                                    <AlertDialogTrigger asChild>\n+                                                                      <Button \n+                                                                        variant=\"ghost\" \n+                                                                        size=\"sm\" \n+                                                                        className=\"hover:bg-destructive/10 hover:text-destructive\"\n+                                                                        onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}\n+                                                                      >\n+                                                                        <Trash className=\"h-4 w-4\" />\n+                                                                      </Button>\n+                                                                    </AlertDialogTrigger>\n+                                                                    {/* Alert Dialog Content */}\n+                                                                  </AlertDialog>\n+                                                                </div>\n+                                                              ))\n+                                                          )}\n+                                                        </div>\n+                                                      </div>\n+                                                    </motion.div>\n+                                                  )}\n+                                                </AnimatePresence>\n                                               </div>\n-                                            ))}\n-                                          </div>\n-                                        )}\n-                                      </div>\n-                                    ))}\n+                                            </div>\n+                                          ))\n+                                      )}\n+                                    </div>\n                                   </CardContent>\n                                 </motion.div>\n                               )}\n                             </AnimatePresence>\n@@ -2582,9 +2609,9 @@\n                                                 \"active:translate-y-[0px]\",\n                                                 currentLessonId === lesson.id && \"border-primary bg-accent/50 shadow-md\",\n                                                 \"group\" // Enable group hover effects\n                                               )}\n-                                              onClick={() => handleLessonSelect(lesson.id)}\n+                                              onClick={() => handleLessonSelect(lesson.id || '')}\n                                             >\n                                               <CardHeader className=\"p-4\">\n                                                 <div className=\"flex flex-col gap-2\">\n                                                   <div className=\"flex items-center justify-between\">\n@@ -3282,32 +3309,5 @@\n       </div>\n       <Toaster />\n       </div>\n   );\n-} \n-                <div className=\"space-y-2\">\n-                  <Label htmlFor=\"lesson-name\">Lesson Title</Label>\n-                  <Input\n-                    id=\"lesson-name\"\n-                    value={newItemData.name}\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n-                    placeholder=\"Enter lesson title\"\n-                  />\n-                </div>\n-              </div>\n-              <DialogFooter>\n-                <Button variant=\"outline\" onClick={() => {\n-                  setModalState({ ...modalState, showAddLesson: false });\n-                  setNewItemData({ name: '', description: '' });\n-                }}>\n-                  Cancel\n-                </Button>\n-                <Button onClick={handleCreateLesson} disabled={!newItemData.name}>Create Lesson</Button>\n-              </DialogFooter>\n-            </DialogContent>\n-          </Dialog>\n-        )}\n-      </div>\n-      <Toaster />\n-      </div>\n-  );\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739964673120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2128,38 +2128,43 @@\n                           <Card \n                             key={topic.id} \n                             className={cn(\n                               \"border-l-4 transition-all duration-200 hover:shadow-md\",\n-                              expandedTopic === topic.id \n-                                ? \"border-l-primary bg-accent/5\" \n-                                : \"border-l-primary/40 hover:border-l-primary\"\n+                              expandedTopic === topic.id ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\n                             )}\n                           >\n-                            <CardHeader \n-                              className=\"py-3 cursor-pointer select-none\" \n-                              onClick={() => handleTopicExpand(topic.id || '')}\n-                            >\n+                            <CardHeader className=\"py-3 cursor-pointer select-none\">\n                               <div className=\"flex items-center justify-between\">\n-                                <div className=\"flex items-center gap-2\">\n+                                <div className=\"flex items-center gap-2\" onClick={() => handleTopicExpand(topic.id || '')}>\n                                   <Layers className=\"h-4 w-4 text-primary\" />\n                                   <h4 className=\"font-medium\">{topic.title}</h4>\n-                                  <Badge variant=\"outline\" className=\"ml-2\">\n-                                    {subtopics.filter(s => s.topic_id === topic.id).length} Subtopics\n-                                  </Badge>\n                                 </div>\n                                 <div className=\"flex items-center gap-2\">\n                                   <AlertDialog>\n                                     <AlertDialogTrigger asChild>\n                                       <Button \n                                         variant=\"ghost\" \n                                         size=\"sm\" \n                                         className=\"hover:bg-destructive/10 hover:text-destructive\"\n-                                        onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}\n+                                        onClick={(e) => e.stopPropagation()}\n                                       >\n                                         <Trash className=\"h-4 w-4\" />\n                                       </Button>\n                                     </AlertDialogTrigger>\n-                                    {/* Alert Dialog Content */}\n+                                    <AlertDialogContent>\n+                                      <AlertDialogHeader>\n+                                        <AlertDialogTitle>Delete Topic</AlertDialogTitle>\n+                                        <AlertDialogDescription>\n+                                          Are you sure you want to delete {topic.title}? This action cannot be undone.\n+                                        </AlertDialogDescription>\n+                                      </AlertDialogHeader>\n+                                      <AlertDialogFooter>\n+                                        <AlertDialogCancel>Cancel</AlertDialogCancel>\n+                                        <AlertDialogAction onClick={() => handleDelete(topic.id, 'topic', topic.title)}>\n+                                          Delete\n+                                        </AlertDialogAction>\n+                                      </AlertDialogFooter>\n+                                    </AlertDialogContent>\n                                   </AlertDialog>\n                                   <ChevronDown className={cn(\n                                     \"h-4 w-4 transition-transform duration-200\",\n                                     expandedTopic === topic.id ? \"rotate-0\" : \"-rotate-90\"\n@@ -2175,124 +2180,92 @@\n                                   animate={{ height: \"auto\", opacity: 1 }}\n                                   exit={{ height: 0, opacity: 0 }}\n                                   transition={{ duration: 0.2 }}\n                                 >\n-                                  <CardContent className=\"pt-0 pb-2\">\n-                                    <div className=\"pl-4 space-y-2\">\n-                                      {isLoadingSubtopics ? (\n-                                        <div className=\"flex items-center justify-center py-4\">\n-                                          <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\n+                                  <CardContent className=\"py-0 pl-4\">\n+                                    {subtopics.map((subtopic) => (\n+                                      <div key={subtopic.id} className=\"mb-3 last:mb-0\">\n+                                        <div className=\"flex items-center justify-between py-2\">\n+                                          <div className=\"flex items-center gap-2\" onClick={() => handleSubtopicExpand(subtopic.id)}>\n+                                            <BookOpen className=\"h-4 w-4 text-primary\" />\n+                                            <span className=\"text-sm font-medium\">{subtopic.title}</span>\n+                                          </div>\n+                                          <div className=\"flex items-center gap-2\">\n+                                            <AlertDialog>\n+                                              <AlertDialogTrigger asChild>\n+                                                <Button \n+                                                  variant=\"ghost\" \n+                                                  size=\"sm\"\n+                                                  className=\"hover:bg-destructive/10 hover:text-destructive\"\n+                                                  onClick={(e) => e.stopPropagation()}\n+                                                >\n+                                                  <Trash className=\"h-4 w-4\" />\n+                                                </Button>\n+                                              </AlertDialogTrigger>\n+                                              <AlertDialogContent>\n+                                                <AlertDialogHeader>\n+                                                  <AlertDialogTitle>Delete Subtopic</AlertDialogTitle>\n+                                                  <AlertDialogDescription>\n+                                                    Are you sure you want to delete {subtopic.title}?\n+                                                  </AlertDialogDescription>\n+                                                </AlertDialogHeader>\n+                                                <AlertDialogFooter>\n+                                                  <AlertDialogCancel>Cancel</AlertDialogCancel>\n+                                                  <AlertDialogAction onClick={() => handleDelete(subtopic.id, 'subtopic', subtopic.title)}>\n+                                                    Delete\n+                                                  </AlertDialogAction>\n+                                                </AlertDialogFooter>\n+                                              </AlertDialogContent>\n+                                            </AlertDialog>\n+                                            <ChevronDown className={cn(\n+                                              \"h-4 w-4 transition-transform duration-200\",\n+                                              expandedSubtopic === subtopic.id ? \"rotate-0\" : \"-rotate-90\"\n+                                            )} />\n+                                          </div>\n                                         </div>\n-                                      ) : (\n-                                        subtopics\n-                                          .filter(subtopic => subtopic.topic_id === topic.id)\n-                                          .map((subtopic: SubTopic) => (\n-                                            <div \n-                                              key={subtopic.id}\n-                                              className={cn(\n-                                                \"rounded-lg border transition-colors\",\n-                                                expandedSubtopic === subtopic.id \n-                                                  ? \"bg-accent/10 border-primary/20\" \n-                                                  : \"hover:bg-accent/5\"\n-                                              )}\n-                                            >\n-                                              <div \n-                                                className=\"p-3 cursor-pointer\"\n-                                                onClick={() => handleSubtopicExpand(subtopic.id || '')}\n-                                              >\n-                                                <div className=\"flex items-center justify-between py-2 cursor-pointer hover:bg-accent/50 rounded-md px-2\">\n-                                                  <div className=\"flex items-center gap-2\">\n-                                                    <BookOpen className=\"h-4 w-4 text-primary\" />\n-                                                    <span className=\"text-sm font-medium\">{subtopic.name}</span>\n-                                                    <Badge variant=\"outline\" className=\"ml-2\">\n-                                                      {lessons.filter(l => l.subtopic_id === subtopic.id).length} Lessons\n-                                                    </Badge>\n-                                                  </div>\n-                                                  <div className=\"flex items-center gap-2\">\n-                                                    <AlertDialog>\n-                                                      <AlertDialogTrigger asChild>\n-                                                        <Button \n-                                                          variant=\"ghost\" \n-                                                          size=\"sm\" \n-                                                          className=\"hover:bg-destructive/10 hover:text-destructive\"\n-                                                          onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}\n-                                                        >\n-                                                          <Trash className=\"h-4 w-4\" />\n-                                                        </Button>\n-                                                      </AlertDialogTrigger>\n-                                                      {/* Alert Dialog Content */}\n-                                                    </AlertDialog>\n-                                                    <ChevronDown className={cn(\n-                                                      \"h-4 w-4 transition-transform duration-200\",\n-                                                      expandedSubtopic === subtopic.id ? \"rotate-0\" : \"-rotate-90\"\n-                                                    )} />\n-                                                  </div>\n+\n+                                        {/* Similar pattern for lessons */}\n+                                        {expandedSubtopic === subtopic.id && (\n+                                          <div className=\"pl-4 space-y-2\">\n+                                            {lessons.map((lesson) => (\n+                                              <div key={lesson.id} \n+                                                className=\"flex items-center justify-between gap-2 py-2 px-3 rounded-md transition-colors hover:bg-accent\">\n+                                                <div className=\"flex items-center gap-2\" onClick={() => handleLessonSelect(lesson.id)}>\n+                                                  <BookOpen className=\"h-4 w-4 text-muted-foreground\" />\n+                                                  <span className=\"text-sm\">{lesson.title}</span>\n                                                 </div>\n-\n-                                                <AnimatePresence>\n-                                                  {expandedSubtopic === subtopic.id && (\n-                                                    <motion.div\n-                                                      initial={{ height: 0, opacity: 0 }}\n-                                                      animate={{ height: \"auto\", opacity: 1 }}\n-                                                      exit={{ height: 0, opacity: 0 }}\n-                                                      transition={{ duration: 0.2 }}\n+                                                <AlertDialog>\n+                                                  <AlertDialogTrigger asChild>\n+                                                    <Button \n+                                                      variant=\"ghost\" \n+                                                      size=\"sm\"\n+                                                      className=\"hover:bg-destructive/10 hover:text-destructive\"\n+                                                      onClick={(e) => e.stopPropagation()}\n                                                     >\n-                                                      <div className=\"px-3 pb-3\">\n-                                                        <div className=\"space-y-2\">\n-                                                          {isLoadingLessons ? (\n-                                                            <div className=\"flex items-center justify-center py-4\">\n-                                                              <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\n-                                                            </div>\n-                                                          ) : (\n-                                                            lessons\n-                                                              .filter(lesson => lesson.subtopic_id === subtopic.id)\n-                                                              .map((lesson: Lesson) => (\n-                                                                <div\n-                                                                  key={lesson.id}\n-                                                                  onClick={() => handleLessonSelect(lesson.id || '')}\n-                                                                  className={cn(\n-                                                                    \"flex items-center gap-3 p-2 rounded-md cursor-pointer transition-colors\",\n-                                                                    \"hover:bg-accent\",\n-                                                                    currentLessonId === lesson.id && \"bg-accent\"\n-                                                                  )}\n-                                                                >\n-                                                                  <div className=\"flex items-center gap-2 flex-1\">\n-                                                                    <div className=\"flex h-8 w-8 items-center justify-center rounded-md border bg-background\">\n-                                                                      <BookOpen className=\"h-4 w-4 text-primary\" />\n-                                                                    </div>\n-                                                                    <div className=\"flex flex-col\">\n-                                                                      <span className=\"text-sm font-medium\">{lesson.title}</span>\n-                                                                      <span className=\"text-xs text-muted-foreground\">\n-                                                                        {lesson.duration} mins • {lesson.questions?.length || 0} Questions\n-                                                                      </span>\n-                                                                    </div>\n-                                                                  </div>\n-                                                                  <AlertDialog>\n-                                                                    <AlertDialogTrigger asChild>\n-                                                                      <Button \n-                                                                        variant=\"ghost\" \n-                                                                        size=\"sm\" \n-                                                                        className=\"hover:bg-destructive/10 hover:text-destructive\"\n-                                                                        onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}\n-                                                                      >\n-                                                                        <Trash className=\"h-4 w-4\" />\n-                                                                      </Button>\n-                                                                    </AlertDialogTrigger>\n-                                                                    {/* Alert Dialog Content */}\n-                                                                  </AlertDialog>\n-                                                                </div>\n-                                                              ))\n-                                                          )}\n-                                                        </div>\n-                                                      </div>\n-                                                    </motion.div>\n-                                                  )}\n-                                                </AnimatePresence>\n+                                                      <Trash className=\"h-4 w-4\" />\n+                                                    </Button>\n+                                                  </AlertDialogTrigger>\n+                                                  <AlertDialogContent>\n+                                                    <AlertDialogHeader>\n+                                                      <AlertDialogTitle>Delete Lesson</AlertDialogTitle>\n+                                                      <AlertDialogDescription>\n+                                                        Are you sure you want to delete {lesson.title}?\n+                                                      </AlertDialogDescription>\n+                                                    </AlertDialogHeader>\n+                                                    <AlertDialogFooter>\n+                                                      <AlertDialogCancel>Cancel</AlertDialogCancel>\n+                                                      <AlertDialogAction onClick={() => handleDelete(lesson.id, 'lesson', lesson.title)}>\n+                                                        Delete\n+                                                      </AlertDialogAction>\n+                                                    </AlertDialogFooter>\n+                                                  </AlertDialogContent>\n+                                                </AlertDialog>\n                                               </div>\n-                                            </div>\n-                                          ))\n-                                      )}\n-                                    </div>\n+                                            ))}\n+                                          </div>\n+                                        )}\n+                                      </div>\n+                                    ))}\n                                   </CardContent>\n                                 </motion.div>\n                               )}\n                             </AnimatePresence>\n@@ -2609,9 +2582,9 @@\n                                                 \"active:translate-y-[0px]\",\n                                                 currentLessonId === lesson.id && \"border-primary bg-accent/50 shadow-md\",\n                                                 \"group\" // Enable group hover effects\n                                               )}\n-                                              onClick={() => handleLessonSelect(lesson.id || '')}\n+                                              onClick={() => handleLessonSelect(lesson.id)}\n                                             >\n                                               <CardHeader className=\"p-4\">\n                                                 <div className=\"flex flex-col gap-2\">\n                                                   <div className=\"flex items-center justify-between\">\n@@ -3309,5 +3282,32 @@\n       </div>\n       <Toaster />\n       </div>\n   );\n+} \n+                <div className=\"space-y-2\">\n+                  <Label htmlFor=\"lesson-name\">Lesson Title</Label>\n+                  <Input\n+                    id=\"lesson-name\"\n+                    value={newItemData.name}\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n+                    placeholder=\"Enter lesson title\"\n+                  />\n+                </div>\n+              </div>\n+              <DialogFooter>\n+                <Button variant=\"outline\" onClick={() => {\n+                  setModalState({ ...modalState, showAddLesson: false });\n+                  setNewItemData({ name: '', description: '' });\n+                }}>\n+                  Cancel\n+                </Button>\n+                <Button onClick={handleCreateLesson} disabled={!newItemData.name}>Create Lesson</Button>\n+              </DialogFooter>\n+            </DialogContent>\n+          </Dialog>\n+        )}\n+      </div>\n+      <Toaster />\n+      </div>\n+  );\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739964740722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3309,5 +3309,5 @@\n       </div>\n       <Toaster />\n       </div>\n   );\n-} \n\\ No newline at end of file\n+} }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739964746528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3309,5 +3309,5 @@\n       </div>\n       <Toaster />\n       </div>\n   );\n-} }\n\\ No newline at end of file\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739965331447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2123,8 +2123,115 @@\n \n                     {/* Content Tree View in View Mode */}\n                     {isViewMode && expandedGrade && (\n                       <div className=\"mt-4 space-y-4 overflow-y-auto max-h-[calc(100vh-300px)]\">\n+                        {topics.map((topic) => (\n+                          <div key={topic.id} className=\"flex items-center justify-between p-4 border rounded-lg mb-4 hover:bg-accent/50 transition-colors\">\n+                            <div className=\"flex-1\" onClick={() => handleTopicSelect(topic.id)}>\n+                              <h3 className=\"font-medium\">{topic.title}</h3>\n+                              {topic.description && (\n+                                <p className=\"text-sm text-muted-foreground mt-1\">{topic.description}</p>\n+                              )}\n+                            </div>\n+                            <AlertDialog>\n+                              <AlertDialogTrigger asChild>\n+                                <Button \n+                                  variant=\"ghost\" \n+                                  size=\"sm\"\n+                                  className=\"hover:bg-destructive/10 hover:text-destructive\"\n+                                  onClick={(e) => e.stopPropagation()}\n+                                >\n+                                  <Trash className=\"h-4 w-4\" />\n+                                </Button>\n+                              </AlertDialogTrigger>\n+                              <AlertDialogContent>\n+                                <AlertDialogHeader>\n+                                  <AlertDialogTitle>Delete Topic</AlertDialogTitle>\n+                                  <AlertDialogDescription>\n+                                    This will permanently delete \"{topic.title}\" and all its subtopics and lessons.\n+                                  </AlertDialogDescription>\n+                                </AlertDialogHeader>\n+                                <AlertDialogFooter>\n+                                  <AlertDialogCancel>Cancel</AlertDialogCancel>\n+                                  <AlertDialogAction onClick={() => handleDeleteTopic(topic.id)}>\n+                                    Delete\n+                                  </AlertDialogAction>\n+                                </AlertDialogFooter>\n+                              </AlertDialogContent>\n+                            </AlertDialog>\n+                          </div>\n+                        ))}\n+                        {subtopics.map((subtopic) => (\n+                          <div key={subtopic.id} className=\"flex items-center justify-between p-4 border rounded-lg mb-4 hover:bg-accent/50 transition-colors\">\n+                            <div className=\"flex-1\" onClick={() => handleSubtopicSelect(subtopic.id)}>\n+                              <h3 className=\"font-medium\">{subtopic.title}</h3>\n+                              {subtopic.description && (\n+                                <p className=\"text-sm text-muted-foreground mt-1\">{subtopic.description}</p>\n+                              )}\n+                            </div>\n+                            <AlertDialog>\n+                              <AlertDialogTrigger asChild>\n+                                <Button \n+                                  variant=\"ghost\" \n+                                  size=\"sm\"\n+                                  className=\"hover:bg-destructive/10 hover:text-destructive\"\n+                                  onClick={(e) => e.stopPropagation()}\n+                                >\n+                                  <Trash className=\"h-4 w-4\" />\n+                                </Button>\n+                              </AlertDialogTrigger>\n+                              <AlertDialogContent>\n+                                <AlertDialogHeader>\n+                                  <AlertDialogTitle>Delete Subtopic</AlertDialogTitle>\n+                                  <AlertDialogDescription>\n+                                    This will permanently delete \"{subtopic.title}\" and all its lessons.\n+                                  </AlertDialogDescription>\n+                                </AlertDialogHeader>\n+                                <AlertDialogFooter>\n+                                  <AlertDialogCancel>Cancel</AlertDialogCancel>\n+                                  <AlertDialogAction onClick={() => handleDeleteSubtopic(subtopic.id)}>\n+                                    Delete\n+                                  </AlertDialogAction>\n+                                </AlertDialogFooter>\n+                              </AlertDialogContent>\n+                            </AlertDialog>\n+                          </div>\n+                        ))}\n+                        {lessons.map((lesson) => (\n+                          <div key={lesson.id} className=\"flex items-center justify-between p-4 border rounded-lg mb-4 hover:bg-accent/50 transition-colors\">\n+                            <div className=\"flex-1\" onClick={() => handleLessonSelect(lesson.id)}>\n+                              <h3 className=\"font-medium\">{lesson.title}</h3>\n+                              {lesson.description && (\n+                                <p className=\"text-sm text-muted-foreground mt-1\">{lesson.description}</p>\n+                              )}\n+                            </div>\n+                            <AlertDialog>\n+                              <AlertDialogTrigger asChild>\n+                                <Button \n+                                  variant=\"ghost\" \n+                                  size=\"sm\"\n+                                  className=\"hover:bg-destructive/10 hover:text-destructive\"\n+                                  onClick={(e) => e.stopPropagation()}\n+                                >\n+                                  <Trash className=\"h-4 w-4\" />\n+                                </Button>\n+                              </AlertDialogTrigger>\n+                              <AlertDialogContent>\n+                                <AlertDialogHeader>\n+                                  <AlertDialogTitle>Delete Lesson</AlertDialogTitle>\n+                                  <AlertDialogDescription>\n+                                    This will permanently delete \"{lesson.title}\".\n+                                  </AlertDialogDescription>\n+                                </AlertDialogHeader>\n+                                <AlertDialogFooter>\n+                                  <AlertDialogCancel>Cancel</AlertDialogCancel>\n+                                  <AlertDialogAction onClick={() => handleDeleteLesson(lesson.id)}>\n+                                    Delete\n+                                  </AlertDialogAction>\n+                                </AlertDialogFooter>\n+                              </AlertDialogContent>\n+                            </AlertDialog>\n+                          </div>\n                         {topics.map((topic: Topic) => (\n                           <Card \n                             key={topic.id} \n                             className={cn(\n"
                },
                {
                    "date": 1739965486884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2230,154 +2230,8 @@\n                                 </AlertDialogFooter>\n                               </AlertDialogContent>\n                             </AlertDialog>\n                           </div>\n-                        {topics.map((topic: Topic) => (\n-                          <Card \n-                            key={topic.id} \n-                            className={cn(\n-                              \"border-l-4 transition-all duration-200 hover:shadow-md\",\n-                              expandedTopic === topic.id ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\n-                            )}\n-                          >\n-                            <CardHeader className=\"py-3 cursor-pointer select-none\">\n-                              <div className=\"flex items-center justify-between\">\n-                                <div className=\"flex items-center gap-2\" onClick={() => handleTopicExpand(topic.id || '')}>\n-                                  <Layers className=\"h-4 w-4 text-primary\" />\n-                                  <h4 className=\"font-medium\">{topic.title}</h4>\n-                                </div>\n-                                <div className=\"flex items-center gap-2\">\n-                                  <AlertDialog>\n-                                    <AlertDialogTrigger asChild>\n-                                      <Button \n-                                        variant=\"ghost\" \n-                                        size=\"sm\" \n-                                        className=\"hover:bg-destructive/10 hover:text-destructive\"\n-                                        onClick={(e) => e.stopPropagation()}\n-                                      >\n-                                        <Trash className=\"h-4 w-4\" />\n-                                      </Button>\n-                                    </AlertDialogTrigger>\n-                                    <AlertDialogContent>\n-                                      <AlertDialogHeader>\n-                                        <AlertDialogTitle>Delete Topic</AlertDialogTitle>\n-                                        <AlertDialogDescription>\n-                                          Are you sure you want to delete {topic.title}? This action cannot be undone.\n-                                        </AlertDialogDescription>\n-                                      </AlertDialogHeader>\n-                                      <AlertDialogFooter>\n-                                        <AlertDialogCancel>Cancel</AlertDialogCancel>\n-                                        <AlertDialogAction onClick={() => handleDelete(topic.id, 'topic', topic.title)}>\n-                                          Delete\n-                                        </AlertDialogAction>\n-                                      </AlertDialogFooter>\n-                                    </AlertDialogContent>\n-                                  </AlertDialog>\n-                                  <ChevronDown className={cn(\n-                                    \"h-4 w-4 transition-transform duration-200\",\n-                                    expandedTopic === topic.id ? \"rotate-0\" : \"-rotate-90\"\n-                                  )} />\n-                                </div>\n-                              </div>\n-                            </CardHeader>\n-\n-                            <AnimatePresence>\n-                              {expandedTopic === topic.id && (\n-                                <motion.div\n-                                  initial={{ height: 0, opacity: 0 }}\n-                                  animate={{ height: \"auto\", opacity: 1 }}\n-                                  exit={{ height: 0, opacity: 0 }}\n-                                  transition={{ duration: 0.2 }}\n-                                >\n-                                  <CardContent className=\"py-0 pl-4\">\n-                                    {subtopics.map((subtopic) => (\n-                                      <div key={subtopic.id} className=\"mb-3 last:mb-0\">\n-                                        <div className=\"flex items-center justify-between py-2\">\n-                                          <div className=\"flex items-center gap-2\" onClick={() => handleSubtopicExpand(subtopic.id)}>\n-                                            <BookOpen className=\"h-4 w-4 text-primary\" />\n-                                            <span className=\"text-sm font-medium\">{subtopic.title}</span>\n-                                          </div>\n-                                          <div className=\"flex items-center gap-2\">\n-                                            <AlertDialog>\n-                                              <AlertDialogTrigger asChild>\n-                                                <Button \n-                                                  variant=\"ghost\" \n-                                                  size=\"sm\"\n-                                                  className=\"hover:bg-destructive/10 hover:text-destructive\"\n-                                                  onClick={(e) => e.stopPropagation()}\n-                                                >\n-                                                  <Trash className=\"h-4 w-4\" />\n-                                                </Button>\n-                                              </AlertDialogTrigger>\n-                                              <AlertDialogContent>\n-                                                <AlertDialogHeader>\n-                                                  <AlertDialogTitle>Delete Subtopic</AlertDialogTitle>\n-                                                  <AlertDialogDescription>\n-                                                    Are you sure you want to delete {subtopic.title}?\n-                                                  </AlertDialogDescription>\n-                                                </AlertDialogHeader>\n-                                                <AlertDialogFooter>\n-                                                  <AlertDialogCancel>Cancel</AlertDialogCancel>\n-                                                  <AlertDialogAction onClick={() => handleDelete(subtopic.id, 'subtopic', subtopic.title)}>\n-                                                    Delete\n-                                                  </AlertDialogAction>\n-                                                </AlertDialogFooter>\n-                                              </AlertDialogContent>\n-                                            </AlertDialog>\n-                                            <ChevronDown className={cn(\n-                                              \"h-4 w-4 transition-transform duration-200\",\n-                                              expandedSubtopic === subtopic.id ? \"rotate-0\" : \"-rotate-90\"\n-                                            )} />\n-                                          </div>\n-                                        </div>\n-\n-                                        {/* Similar pattern for lessons */}\n-                                        {expandedSubtopic === subtopic.id && (\n-                                          <div className=\"pl-4 space-y-2\">\n-                                            {lessons.map((lesson) => (\n-                                              <div key={lesson.id} \n-                                                className=\"flex items-center justify-between gap-2 py-2 px-3 rounded-md transition-colors hover:bg-accent\">\n-                                                <div className=\"flex items-center gap-2\" onClick={() => handleLessonSelect(lesson.id)}>\n-                                                  <BookOpen className=\"h-4 w-4 text-muted-foreground\" />\n-                                                  <span className=\"text-sm\">{lesson.title}</span>\n-                                                </div>\n-                                                <AlertDialog>\n-                                                  <AlertDialogTrigger asChild>\n-                                                    <Button \n-                                                      variant=\"ghost\" \n-                                                      size=\"sm\"\n-                                                      className=\"hover:bg-destructive/10 hover:text-destructive\"\n-                                                      onClick={(e) => e.stopPropagation()}\n-                                                    >\n-                                                      <Trash className=\"h-4 w-4\" />\n-                                                    </Button>\n-                                                  </AlertDialogTrigger>\n-                                                  <AlertDialogContent>\n-                                                    <AlertDialogHeader>\n-                                                      <AlertDialogTitle>Delete Lesson</AlertDialogTitle>\n-                                                      <AlertDialogDescription>\n-                                                        Are you sure you want to delete {lesson.title}?\n-                                                      </AlertDialogDescription>\n-                                                    </AlertDialogHeader>\n-                                                    <AlertDialogFooter>\n-                                                      <AlertDialogCancel>Cancel</AlertDialogCancel>\n-                                                      <AlertDialogAction onClick={() => handleDelete(lesson.id, 'lesson', lesson.title)}>\n-                                                        Delete\n-                                                      </AlertDialogAction>\n-                                                    </AlertDialogFooter>\n-                                                  </AlertDialogContent>\n-                                                </AlertDialog>\n-                                              </div>\n-                                            ))}\n-                                          </div>\n-                                        )}\n-                                      </div>\n-                                    ))}\n-                                  </CardContent>\n-                                </motion.div>\n-                              )}\n-                            </AnimatePresence>\n-                          </Card>\n                         ))}\n                       </div>\n                     )}\n \n@@ -3389,32 +3243,5 @@\n       </div>\n       <Toaster />\n       </div>\n   );\n-} \n-                <div className=\"space-y-2\">\n-                  <Label htmlFor=\"lesson-name\">Lesson Title</Label>\n-                  <Input\n-                    id=\"lesson-name\"\n-                    value={newItemData.name}\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n-                    placeholder=\"Enter lesson title\"\n-                  />\n-                </div>\n-              </div>\n-              <DialogFooter>\n-                <Button variant=\"outline\" onClick={() => {\n-                  setModalState({ ...modalState, showAddLesson: false });\n-                  setNewItemData({ name: '', description: '' });\n-                }}>\n-                  Cancel\n-                </Button>\n-                <Button onClick={handleCreateLesson} disabled={!newItemData.name}>Create Lesson</Button>\n-              </DialogFooter>\n-            </DialogContent>\n-          </Dialog>\n-        )}\n-      </div>\n-      <Toaster />\n-      </div>\n-  );\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739965493822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1428,29 +1428,23 @@\n   };\n \n   const handleDeleteSubtopic = async (subtopicId: string) => {\n     try {\n-      await contentService.deleteSubtopic(subtopicId);\n-      setSubtopics(prev => prev.filter(subtopic => subtopic.id !== subtopicId));\n-      setSelectedSubtopicId(null);\n-      toast.success('Subtopic deleted successfully');\n-    } catch (err) {\n-      const error = err as Error;\n-      console.error('Error deleting subtopic:', error);\n-      toast.error('Failed to delete subtopic');\n-    }\n-  };\n+      // First delete all lessons\n+      await supabase\n+        .from('lessons')\n+        .delete()\n+        .eq('subtopic_id', subtopicId);\n \n-  const handleCreateLesson = async () => {\n-    if (!selectedSubtopicId) {\n-      toast.error('Please select a subtopic first');\n-      return;\n-    }\n+      // Then delete the subtopic\n+      await supabase\n+        .from('subtopics')\n+        .delete()\n+        .eq('id', subtopicId);\n \n-    try {\n-      // First create the lesson\n-      const { data: newLesson, error: lessonError } = await supabase\n-        .from('lessons')\n+      // Update local state\n+      setSubtopics(subtopics.filter(s => s.id !== subtopicId));\n+      toast.success('Subtopic deleted successfully');\n         .insert({\n           title: newItemData.name,\n           duration: 0,\n           topic_id: selectedTopicId,\n"
                },
                {
                    "date": 1739965509609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1443,8 +1443,24 @@\n \n       // Update local state\n       setSubtopics(subtopics.filter(s => s.id !== subtopicId));\n       toast.success('Subtopic deleted successfully');\n+    } catch (error) {\n+      console.error('Error deleting subtopic:', error);\n+      toast.error('Failed to delete subtopic');\n+    }\n+  };\n+\n+  const handleCreateLesson = async () => {\n+    if (!selectedSubtopicId) {\n+      toast.error('Please select a subtopic first');\n+      return;\n+    }\n+\n+    try {\n+      // First create the lesson\n+      const { data: newLesson, error: lessonError } = await supabase\n+        .from('lessons')\n         .insert({\n           title: newItemData.name,\n           duration: 0,\n           topic_id: selectedTopicId,\n@@ -3237,5 +3253,113 @@\n       </div>\n       <Toaster />\n       </div>\n   );\n-}\n\\ No newline at end of file\n+}\n+\n+// Add these handler functions\n+const handleDeleteTopic = async (topicId: string) => {\n+  try {\n+    // First fetch all subtopics to cascade delete\n+    const { data: subtopicsToDelete } = await supabase\n+      .from('subtopics')\n+      .select('id')\n+      .eq('topic_id', topicId);\n+\n+    // Delete all lessons from these subtopics\n+    if (subtopicsToDelete?.length) {\n+      for (const subtopic of subtopicsToDelete) {\n+        await supabase\n+          .from('lessons')\n+          .delete()\n+          .eq('subtopic_id', subtopic.id);\n+      }\n+    }\n+\n+    // Delete all subtopics\n+    await supabase\n+      .from('subtopics')\n+      .delete()\n+      .eq('topic_id', topicId);\n+\n+    // Finally delete the topic\n+    await supabase\n+      .from('topics')\n+      .delete()\n+      .eq('id', topicId);\n+\n+    // Update local state\n+    setTopics(topics.filter(t => t.id !== topicId));\n+    toast.success('Topic deleted successfully');\n+  } catch (error) {\n+    console.error('Error deleting topic:', error);\n+    toast.error('Failed to delete topic');\n+  }\n+};\n+\n+const handleDeleteSubtopic = async (subtopicId: string) => {\n+  try {\n+    // First delete all lessons\n+    await supabase\n+      .from('lessons')\n+      .delete()\n+      .eq('subtopic_id', subtopicId);\n+\n+    // Then delete the subtopic\n+    await supabase\n+      .from('subtopics')\n+      .delete()\n+      .eq('id', subtopicId);\n+\n+    // Update local state\n+    setSubtopics(subtopics.filter(s => s.id !== subtopicId));\n+    toast.success('Subtopic deleted successfully');\n+  } catch (error) {\n+    console.error('Error deleting subtopic:', error);\n+    toast.error('Failed to delete subtopic');\n+  }\n+};\n+\n+const handleDeleteLesson = async (lessonId: string) => {\n+  try {\n+    // Delete all questions and their exercise prompts\n+    const { data: questions } = await supabase\n+      .from('questions')\n+      .select('id')\n+      .eq('lesson_id', lessonId);\n+\n+    if (questions?.length) {\n+      for (const question of questions) {\n+        // Delete exercise prompts\n+        await supabase\n+          .from('exercise_prompts')\n+          .delete()\n+          .eq('question_id', question.id);\n+      }\n+\n+      // Delete questions\n+      await supabase\n+        .from('questions')\n+        .delete()\n+        .eq('lesson_id', lessonId);\n+    }\n+\n+    // Delete lesson content\n+    await supabase\n+      .from('lesson_content')\n+      .delete()\n+      .eq('lesson_id', lessonId);\n+\n+    // Finally delete the lesson\n+    await supabase\n+      .from('lessons')\n+      .delete()\n+      .eq('id', lessonId);\n+\n+    // Update local state\n+    setLessons(lessons.filter(l => l.id !== lessonId));\n+    toast.success('Lesson deleted successfully');\n+  } catch (error) {\n+    console.error('Error deleting lesson:', error);\n+    toast.error('Failed to delete lesson');\n+  }\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739965516831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2147,9 +2147,9 @@\n                                 <Button \n                                   variant=\"ghost\" \n                                   size=\"sm\"\n                                   className=\"hover:bg-destructive/10 hover:text-destructive\"\n-                                  onClick={(e) => e.stopPropagation()}\n+                                  onClick={(e: React.MouseEvent) => e.stopPropagation()}\n                                 >\n                                   <Trash className=\"h-4 w-4\" />\n                                 </Button>\n                               </AlertDialogTrigger>\n@@ -2183,9 +2183,9 @@\n                                 <Button \n                                   variant=\"ghost\" \n                                   size=\"sm\"\n                                   className=\"hover:bg-destructive/10 hover:text-destructive\"\n-                                  onClick={(e) => e.stopPropagation()}\n+                                  onClick={(e: React.MouseEvent) => e.stopPropagation()}\n                                 >\n                                   <Trash className=\"h-4 w-4\" />\n                                 </Button>\n                               </AlertDialogTrigger>\n"
                },
                {
                    "date": 1739965523503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2219,9 +2219,9 @@\n                                 <Button \n                                   variant=\"ghost\" \n                                   size=\"sm\"\n                                   className=\"hover:bg-destructive/10 hover:text-destructive\"\n-                                  onClick={(e) => e.stopPropagation()}\n+                                  onClick={(e: React.MouseEvent) => e.stopPropagation()}\n                                 >\n                                   <Trash className=\"h-4 w-4\" />\n                                 </Button>\n                               </AlertDialogTrigger>\n@@ -2575,9 +2575,9 @@\n                                                         \"transition-all duration-200\",\n                                                         \"hover:bg-primary hover:text-primary-foreground\"\n                                                       )}\n                                                       disabled={!lesson.content || currentLessonId !== lesson.id}\n-                                                      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n+                                                      onClick={(e: React.MouseEvent) => {\n                                                         e.stopPropagation();\n                                                         window.location.href = `/teacher/lessons/${lesson.id}`;\n                                                       }}\n                                                     >\n"
                },
                {
                    "date": 1739965920857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,9 @@\n import { PostgrestError } from '@supabase/supabase-js';\n import { Question as ContentQuestion } from './types';  // Import the specific type\n import { Trash } from \"lucide-react\";\n import { AnimatePresence, motion } from 'framer-motion';\n+import { FileText } from \"lucide-react\";\n \n \n // Update the API endpoint to match your backend route\n const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\n@@ -3361,5 +3362,182 @@\n   } catch (error) {\n     console.error('Error deleting lesson:', error);\n     toast.error('Failed to delete lesson');\n   }\n-};\n\\ No newline at end of file\n+};\n+\n+// Add this component for the right plane content view\n+const ContentHierarchyView = () => {\n+  return (\n+    <div className=\"space-y-6\">\n+      {topics.map((topic) => (\n+        <Card key={topic.id} className=\"border-l-4 border-l-primary/40 hover:border-l-primary transition-all duration-200\">\n+          <CardHeader className=\"py-4\">\n+            <div className=\"flex items-center justify-between\">\n+              <div className=\"flex items-center gap-3\">\n+                <div className=\"h-8 w-8 rounded-md bg-primary/10 flex items-center justify-center\">\n+                  <Layers className=\"h-4 w-4 text-primary\" />\n+                </div>\n+                <div>\n+                  <h3 className=\"font-semibold\">{topic.title}</h3>\n+                  <p className=\"text-sm text-muted-foreground\">\n+                    {subtopics.filter(s => s.topic_id === topic.id).length} Subtopics\n+                  </p>\n+                </div>\n+              </div>\n+              <AlertDialog>\n+                <AlertDialogTrigger asChild>\n+                  <Button \n+                    variant=\"ghost\" \n+                    size=\"sm\"\n+                    className=\"hover:bg-destructive/10 hover:text-destructive\"\n+                  >\n+                    <Trash className=\"h-4 w-4\" />\n+                  </Button>\n+                </AlertDialogTrigger>\n+                <AlertDialogContent>\n+                  <AlertDialogHeader>\n+                    <AlertDialogTitle>Delete Topic</AlertDialogTitle>\n+                    <AlertDialogDescription>\n+                      This will permanently delete \"{topic.title}\" and all its contents.\n+                    </AlertDialogDescription>\n+                  </AlertDialogHeader>\n+                  <AlertDialogFooter>\n+                    <AlertDialogCancel>Cancel</AlertDialogCancel>\n+                    <AlertDialogAction onClick={() => handleDeleteTopic(topic.id)}>\n+                      Delete\n+                    </AlertDialogAction>\n+                  </AlertDialogFooter>\n+                </AlertDialogContent>\n+              </AlertDialog>\n+            </div>\n+          </CardHeader>\n+          <CardContent>\n+            <div className=\"pl-11 space-y-4\">\n+              {subtopics\n+                .filter(subtopic => subtopic.topic_id === topic.id)\n+                .map((subtopic) => {\n+                  const subtopicLessons = lessons.filter(l => l.subtopic_id === subtopic.id);\n+                  const isEmpty = subtopicLessons.length === 0;\n+\n+                  return (\n+                    <div \n+                      key={subtopic.id} \n+                      className={cn(\n+                        \"rounded-lg border p-4\",\n+                        isEmpty ? \"border-dashed border-muted-foreground/30\" : \"border-primary/10\"\n+                      )}\n+                    >\n+                      <div className=\"flex items-center justify-between mb-4\">\n+                        <div className=\"flex items-center gap-3\">\n+                          <div className=\"h-7 w-7 rounded-md bg-primary/5 flex items-center justify-center\">\n+                            <BookOpen className=\"h-4 w-4 text-primary/70\" />\n+                          </div>\n+                          <div>\n+                            <h4 className=\"font-medium\">{subtopic.title}</h4>\n+                            <p className=\"text-sm text-muted-foreground\">\n+                              {subtopicLessons.length} Lessons\n+                            </p>\n+                          </div>\n+                        </div>\n+                        <AlertDialog>\n+                          <AlertDialogTrigger asChild>\n+                            <Button \n+                              variant=\"ghost\" \n+                              size=\"sm\"\n+                              className=\"hover:bg-destructive/10 hover:text-destructive\"\n+                            >\n+                              <Trash className=\"h-4 w-4\" />\n+                            </Button>\n+                          </AlertDialogTrigger>\n+                          <AlertDialogContent>\n+                            <AlertDialogHeader>\n+                              <AlertDialogTitle>Delete Subtopic</AlertDialogTitle>\n+                              <AlertDialogDescription>\n+                                This will permanently delete \"{subtopic.title}\" and all its lessons.\n+                              </AlertDialogDescription>\n+                            </AlertDialogHeader>\n+                            <AlertDialogFooter>\n+                              <AlertDialogCancel>Cancel</AlertDialogCancel>\n+                              <AlertDialogAction onClick={() => handleDeleteSubtopic(subtopic.id)}>\n+                                Delete\n+                              </AlertDialogAction>\n+                            </AlertDialogFooter>\n+                          </AlertDialogContent>\n+                        </AlertDialog>\n+                      </div>\n+\n+                      {isEmpty ? (\n+                        <div className=\"flex items-center justify-center p-4 text-muted-foreground text-sm\">\n+                          <p>No lessons available</p>\n+                        </div>\n+                      ) : (\n+                        <div className=\"space-y-2\">\n+                          {subtopicLessons.map((lesson) => (\n+                            <div \n+                              key={lesson.id}\n+                              className=\"flex items-center justify-between p-3 rounded-md bg-accent/50 hover:bg-accent transition-colors\"\n+                            >\n+                              <div className=\"flex items-center gap-2\">\n+                                <div className=\"h-6 w-6 rounded bg-background flex items-center justify-center\">\n+                                  <FileText className=\"h-3 w-3 text-primary\" />\n+                                </div>\n+                                <span className=\"text-sm\">{lesson.title}</span>\n+                              </div>\n+                              <div className=\"flex items-center gap-2\">\n+                                <Button\n+                                  variant=\"ghost\"\n+                                  size=\"sm\"\n+                                  className=\"h-7 hover:bg-primary/10\"\n+                                  onClick={() => handleLessonSelect(lesson.id)}\n+                                >\n+                                  <Pencil className=\"h-3 w-3\" />\n+                                </Button>\n+                                <AlertDialog>\n+                                  <AlertDialogTrigger asChild>\n+                                    <Button \n+                                      variant=\"ghost\" \n+                                      size=\"sm\"\n+                                      className=\"h-7 hover:bg-destructive/10 hover:text-destructive\"\n+                                    >\n+                                      <Trash className=\"h-3 w-3\" />\n+                                    </Button>\n+                                  </AlertDialogTrigger>\n+                                  <AlertDialogContent>\n+                                    <AlertDialogHeader>\n+                                      <AlertDialogTitle>Delete Lesson</AlertDialogTitle>\n+                                      <AlertDialogDescription>\n+                                        This will permanently delete \"{lesson.title}\".\n+                                      </AlertDialogDescription>\n+                                    </AlertDialogHeader>\n+                                    <AlertDialogFooter>\n+                                      <AlertDialogCancel>Cancel</AlertDialogCancel>\n+                                      <AlertDialogAction onClick={() => handleDeleteLesson(lesson.id)}>\n+                                        Delete\n+                                      </AlertDialogAction>\n+                                    </AlertDialogFooter>\n+                                  </AlertDialogContent>\n+                                </AlertDialog>\n+                              </div>\n+                            </div>\n+                          ))}\n+                        </div>\n+                      )}\n+                    </div>\n+                  );\n+                })}\n+            </div>\n+          </CardContent>\n+        </Card>\n+      ))}\n+    </div>\n+  );\n+};\n+\n+// Update the main content area to use this component in view mode\n+{isViewMode && selectedGradeId ? (\n+  <div className=\"p-6\">\n+    <ContentHierarchyView />\n+  </div>\n+) : (\n+  // ... existing edit mode content\n+)}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739965930660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2025,8 +2025,22 @@\n               )}>\n                 <Card className=\"h-full\">\n                   <CardHeader className=\"pb-3\">\n                     <div className=\"flex items-center justify-between\">\n+                      <div className=\"flex items-center justify-between\">\n+                        <CardTitle className=\"text-lg font-semibold\">Content Management</CardTitle>\n+                        <TooltipProvider>\n+                          <Tooltip>\n+                            <TooltipTrigger>\n+                              <HelpCircle className=\"h-4 w-4 text-muted-foreground\" />\n+                            </TooltipTrigger>\n+                            <TooltipContent>\n+                              <p>Manage your educational content here</p>\n+                            </TooltipContent>\n+                          </Tooltip>\n+                        </TooltipProvider>\n+                        </div>\n+                      <CardDescription>Create and manage your lessons</CardDescription>\n                       <CardTitle className=\"text-lg font-semibold\">Content Management</CardTitle>\n                       <TooltipProvider>\n                         <Tooltip>\n                           <TooltipTrigger>\n"
                },
                {
                    "date": 1739965939942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2039,624 +2039,12 @@\n                           </Tooltip>\n                         </TooltipProvider>\n                         </div>\n                       <CardDescription>Create and manage your lessons</CardDescription>\n-                      <CardTitle className=\"text-lg font-semibold\">Content Management</CardTitle>\n-                      <TooltipProvider>\n-                        <Tooltip>\n-                          <TooltipTrigger>\n-                            <HelpCircle className=\"h-4 w-4 text-muted-foreground\" />\n-                          </TooltipTrigger>\n-                          <TooltipContent>\n-                            <p>Manage your educational content here</p>\n-                          </TooltipContent>\n-                        </Tooltip>\n-                      </TooltipProvider>\n-                      </div>\n-                    <CardDescription>Create and manage your lessons</CardDescription>\n+                    </div>\n                   </CardHeader>\n                   <CardContent className=\"space-y-4\">\n                     {/* View/Edit Mode Toggle */}\n-                    <div className=\"grid grid-cols-2 gap-2 p-1 bg-muted rounded-lg\">\n-                      <Button\n-                        variant={isViewMode ? \"default\" : \"ghost\"}\n-                        size=\"sm\"\n-                        onClick={() => setIsViewMode(true)}\n-                        className=\"w-full\"\n-                      >\n-                        <Eye className=\"h-4 w-4 mr-2\" />\n-                        View\n-                      </Button>\n-                      <Button\n-                        variant={!isViewMode ? \"default\" : \"ghost\"}\n-                        size=\"sm\"\n-                        onClick={() => setIsViewMode(false)}\n-                        className=\"w-full\"\n-                      >\n-                        <Edit className=\"h-4 w-4 mr-2\" />\n-                        Edit\n-                      </Button>\n-                    </div>\n-\n-                    {/* Grade Selection */}\n-                    <div className=\"space-y-2\">\n-                      <div className=\"flex items-center justify-between\">\n-                        <Label htmlFor=\"grade-select\">Grade</Label>\n-                        {isViewMode && (\n-                          <Button variant=\"ghost\" size=\"sm\" onClick={() => setExpandedGrade(expandedGrade ? null : selectedGrade)}>\n-                            {expandedGrade ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n-                          </Button>\n-                        )}\n-                      </div>\n-                      <Select \n-                        value={selectedGradeId || ''}\n-                        onValueChange={handleGradeSelect}\n-                        onOpenChange={(open) => {\n-                          if (open) {\n-                            // Force sidebar to stay open and lock it\n-                            setIsSidebarCollapsed(false);\n-                            setIsSidebarLocked(true);\n-                          }\n-                        }}\n-                      >\n-                        <SelectTrigger \n-                          id=\"grade-select\" \n-                          className=\"w-full\"\n-                          onClick={(e) => {\n-                            e.stopPropagation(); // Prevent event bubbling\n-                            setIsSidebarCollapsed(false);\n-                            setIsSidebarLocked(true);\n-                          }}\n-                        >\n-                          <SelectValue placeholder=\"Select Grade\" />\n-                        </SelectTrigger>\n-                        <SelectContent \n-                          onCloseAutoFocus={(e) => {\n-                            e.preventDefault();\n-                            setIsSidebarLocked(true);\n-                            setIsSidebarCollapsed(false);\n-                          }}\n-                        >\n-                          {grades.map((grade: Grade) => (\n-                            <SelectItem \n-                              key={`grade-${grade.id || 'new'}`} \n-                              value={grade.id || ''}\n-                              onMouseDown={(e) => {\n-                                e.preventDefault();\n-                                e.stopPropagation();\n-                              }}\n-                            >\n-                              <div className=\"flex items-center gap-2\">\n-                                <BookOpen className=\"h-4 w-4 text-primary\" />\n-                                {grade.name}\n-                              </div>\n-                            </SelectItem>\n-                          ))}\n-                        </SelectContent>\n-                      </Select>\n-                      {!isViewMode && (\n-                      <Button \n-                        variant=\"outline\" \n-                        size=\"sm\" \n-                        className=\"w-full gap-2\"\n-                        onClick={() => setModalState({ ...modalState, showAddGrade: false })}\n-                      >\n-                        <Plus className=\"h-4 w-4\" />\n-                        Add New Grade\n-                      </Button>\n-                      )}\n-                    </div>\n-\n-                    {/* Content Tree View in View Mode */}\n-                    {isViewMode && expandedGrade && (\n-                      <div className=\"mt-4 space-y-4 overflow-y-auto max-h-[calc(100vh-300px)]\">\n-                        {topics.map((topic) => (\n-                          <div key={topic.id} className=\"flex items-center justify-between p-4 border rounded-lg mb-4 hover:bg-accent/50 transition-colors\">\n-                            <div className=\"flex-1\" onClick={() => handleTopicSelect(topic.id)}>\n-                              <h3 className=\"font-medium\">{topic.title}</h3>\n-                              {topic.description && (\n-                                <p className=\"text-sm text-muted-foreground mt-1\">{topic.description}</p>\n-                              )}\n-                            </div>\n-                            <AlertDialog>\n-                              <AlertDialogTrigger asChild>\n-                                <Button \n-                                  variant=\"ghost\" \n-                                  size=\"sm\"\n-                                  className=\"hover:bg-destructive/10 hover:text-destructive\"\n-                                  onClick={(e: React.MouseEvent) => e.stopPropagation()}\n-                                >\n-                                  <Trash className=\"h-4 w-4\" />\n-                                </Button>\n-                              </AlertDialogTrigger>\n-                              <AlertDialogContent>\n-                                <AlertDialogHeader>\n-                                  <AlertDialogTitle>Delete Topic</AlertDialogTitle>\n-                                  <AlertDialogDescription>\n-                                    This will permanently delete \"{topic.title}\" and all its subtopics and lessons.\n-                                  </AlertDialogDescription>\n-                                </AlertDialogHeader>\n-                                <AlertDialogFooter>\n-                                  <AlertDialogCancel>Cancel</AlertDialogCancel>\n-                                  <AlertDialogAction onClick={() => handleDeleteTopic(topic.id)}>\n-                                    Delete\n-                                  </AlertDialogAction>\n-                                </AlertDialogFooter>\n-                              </AlertDialogContent>\n-                            </AlertDialog>\n-                          </div>\n-                        ))}\n-                        {subtopics.map((subtopic) => (\n-                          <div key={subtopic.id} className=\"flex items-center justify-between p-4 border rounded-lg mb-4 hover:bg-accent/50 transition-colors\">\n-                            <div className=\"flex-1\" onClick={() => handleSubtopicSelect(subtopic.id)}>\n-                              <h3 className=\"font-medium\">{subtopic.title}</h3>\n-                              {subtopic.description && (\n-                                <p className=\"text-sm text-muted-foreground mt-1\">{subtopic.description}</p>\n-                              )}\n-                            </div>\n-                            <AlertDialog>\n-                              <AlertDialogTrigger asChild>\n-                                <Button \n-                                  variant=\"ghost\" \n-                                  size=\"sm\"\n-                                  className=\"hover:bg-destructive/10 hover:text-destructive\"\n-                                  onClick={(e: React.MouseEvent) => e.stopPropagation()}\n-                                >\n-                                  <Trash className=\"h-4 w-4\" />\n-                                </Button>\n-                              </AlertDialogTrigger>\n-                              <AlertDialogContent>\n-                                <AlertDialogHeader>\n-                                  <AlertDialogTitle>Delete Subtopic</AlertDialogTitle>\n-                                  <AlertDialogDescription>\n-                                    This will permanently delete \"{subtopic.title}\" and all its lessons.\n-                                  </AlertDialogDescription>\n-                                </AlertDialogHeader>\n-                                <AlertDialogFooter>\n-                                  <AlertDialogCancel>Cancel</AlertDialogCancel>\n-                                  <AlertDialogAction onClick={() => handleDeleteSubtopic(subtopic.id)}>\n-                                    Delete\n-                                  </AlertDialogAction>\n-                                </AlertDialogFooter>\n-                              </AlertDialogContent>\n-                            </AlertDialog>\n-                          </div>\n-                        ))}\n-                        {lessons.map((lesson) => (\n-                          <div key={lesson.id} className=\"flex items-center justify-between p-4 border rounded-lg mb-4 hover:bg-accent/50 transition-colors\">\n-                            <div className=\"flex-1\" onClick={() => handleLessonSelect(lesson.id)}>\n-                              <h3 className=\"font-medium\">{lesson.title}</h3>\n-                              {lesson.description && (\n-                                <p className=\"text-sm text-muted-foreground mt-1\">{lesson.description}</p>\n-                              )}\n-                            </div>\n-                            <AlertDialog>\n-                              <AlertDialogTrigger asChild>\n-                                <Button \n-                                  variant=\"ghost\" \n-                                  size=\"sm\"\n-                                  className=\"hover:bg-destructive/10 hover:text-destructive\"\n-                                  onClick={(e: React.MouseEvent) => e.stopPropagation()}\n-                                >\n-                                  <Trash className=\"h-4 w-4\" />\n-                                </Button>\n-                              </AlertDialogTrigger>\n-                              <AlertDialogContent>\n-                                <AlertDialogHeader>\n-                                  <AlertDialogTitle>Delete Lesson</AlertDialogTitle>\n-                                  <AlertDialogDescription>\n-                                    This will permanently delete \"{lesson.title}\".\n-                                  </AlertDialogDescription>\n-                                </AlertDialogHeader>\n-                                <AlertDialogFooter>\n-                                  <AlertDialogCancel>Cancel</AlertDialogCancel>\n-                                  <AlertDialogAction onClick={() => handleDeleteLesson(lesson.id)}>\n-                                    Delete\n-                                  </AlertDialogAction>\n-                                </AlertDialogFooter>\n-                              </AlertDialogContent>\n-                            </AlertDialog>\n-                          </div>\n-                        ))}\n-                      </div>\n-                    )}\n-\n-                    {/* Regular Edit Mode Content */}\n-                    {!isViewMode && (\n-                      <>\n-                        {/* Existing Topic, Subtopic, and Lesson Selection UI */}\n-                      {/* Topic Selection */}\n-                        {selectedGradeId && (\n-                      <div className=\"space-y-2\">\n-                        <div className=\"flex items-center justify-between\">\n-                        <Label htmlFor=\"topic-select\">Topic</Label>\n-                        </div>\n-                        <Select \n-                              value={selectedTopicId || ''} \n-                              onValueChange={handleTopicSelect}\n-                        >\n-                          <SelectTrigger id=\"topic-select\" className=\"w-full\">\n-                            <SelectValue placeholder=\"Select Topic\" />\n-                          </SelectTrigger>\n-                          <SelectContent>\n-                                {topics.map((topic: Topic) => (\n-                                  <SelectItem \n-                                    key={`topic-${topic.id || 'new'}`} \n-                                    value={topic.id || ''}\n-                                  >\n-                                  <div className=\"flex items-center gap-2\">\n-                                  <Layers className=\"h-4 w-4 text-primary\" />\n-                                    {topic.title}\n-                                  </div>\n-                                </SelectItem>\n-                              ))}\n-                          </SelectContent>\n-                        </Select>\n-                        <Button \n-                          variant=\"outline\" \n-                          size=\"sm\" \n-                          className=\"w-full gap-2\"\n-                          onClick={() => setModalState({ ...modalState, showAddTopic: true })}\n-                        >\n-                          <Plus className=\"h-4 w-4\" />\n-                          Add New Topic\n-                        </Button>\n-                      </div>\n-                    )}\n-\n-                    {/* Subtopic Selection */}\n-                        {selectedTopicId && (\n-                      <div className=\"space-y-2\">\n-                        <div className=\"flex items-center justify-between\">\n-                        <Label htmlFor=\"subtopic-select\">Subtopic</Label>\n-                        </div>\n-                        <Select \n-                              value={selectedSubtopicId || ''} \n-                              onValueChange={handleSubtopicSelect}\n-                        >\n-                          <SelectTrigger id=\"subtopic-select\" className=\"w-full\">\n-                            <SelectValue placeholder=\"Select Subtopic\" />\n-                          </SelectTrigger>\n-                          <SelectContent>\n-                                {subtopics\n-                                  .filter(subtopic => subtopic.id)\n-                                  .map((subtopic, index) => (\n-                                    <SelectItem \n-                                      key={subtopic.id || `subtopic-${index}`}\n-                                      value={subtopic.id || ''}\n-                                    >\n-                                      {subtopic.title || 'Untitled Subtopic'}\n-                                    </SelectItem>\n-                                  ))}\n-                          </SelectContent>\n-                        </Select>\n-                        {!isViewMode && (\n-                          <Button \n-                            variant=\"outline\" \n-                            size=\"sm\" \n-                            className=\"w-full gap-2\"\n-                            onClick={() => setModalState({ ...modalState, showAddSubtopic: true })}\n-                          >\n-                            <Plus className=\"h-4 w-4\" />\n-                            Add New Subtopic\n-                          </Button>\n-                        )}\n-                      </div>\n-                    )}\n-\n-                    {/* Lesson Selection */}\n-                        {selectedSubtopicId && (\n-                      <div className=\"space-y-2\">\n-                        <div className=\"flex items-center justify-between\">\n-                          <Label htmlFor=\"lesson-select\">Lesson</Label>\n-                        </div>\n-                          <Select \n-                            value={currentLessonId || ''} \n-                            onValueChange={handleLessonSelect}\n-                            onOpenChange={(open) => {\n-                              setIsDropdownOpen(open);\n-                              if (open) {\n-                                setIsSidebarCollapsed(false);\n-                                setIsSidebarLocked(true);\n-                              } else {\n-                                // Small delay before unlocking to prevent immediate collapse\n-                                setTimeout(() => {\n-                                  setIsSidebarLocked(false);\n-                                }, 100);\n-                              }\n-                            }}\n-                          >\n-                            <SelectTrigger \n-                              id=\"lesson-select\" \n-                              className=\"w-full\"\n-                              onClick={(e) => {\n-                                e.stopPropagation();\n-                                setIsSidebarCollapsed(false);\n-                                setIsSidebarLocked(true);\n-                              }}\n-                            >\n-                              <SelectValue placeholder=\"Select Lesson\" />\n-                            </SelectTrigger>\n-                            <SelectContent>\n-                              {lessons\n-                                .filter((lesson): lesson is Lesson => lesson !== undefined && lesson !== null)\n-                                .map((lesson: Lesson) => (\n-                                  <SelectItem \n-                                    key={`lesson-${lesson.id || 'new'}`} \n-                                    value={lesson.id || ''}\n-                                  >\n-                                    <div className=\"flex items-center gap-2\">\n-                                      <BookOpen className=\"h-4 w-4 text-primary\" />\n-                                      {lesson.title || 'Untitled Lesson'}\n-                                    </div>\n-                                  </SelectItem>\n-                                ))}\n-                            </SelectContent>\n-                          </Select>\n-                    <Button \n-                            variant=\"outline\" \n-                            size=\"sm\" \n-                            className=\"w-full gap-2\"\n-                        onClick={() => setModalState({ ...modalState, showAddLesson: true })}\n-                          >\n-                            <Plus className=\"h-4 w-4\" />\n-                            Add New Lesson\n-                    </Button>\n-                      </div>\n-                        )}\n-                      </>\n-                    )}\n-                  </CardContent>\n-                </Card>\n-              </div>\n-\n-              {/* Collapsed view */}\n-              {isSidebarCollapsed && (\n-                <div className=\"absolute inset-0 flex flex-col items-center pt-12 gap-4\">\n-                  <BookOpen className=\"h-6 w-6 text-muted-foreground\" />\n-                  <div className=\"w-px h-full bg-border\" />\n-                </div>\n-              )}\n-            </Card>\n-          </div>\n-        \n-\n-          {/* Right Content Area */}\n-          <div className=\"flex-1 overflow-y-auto\">\n-            {isNavigating ? (\n-              <div className=\"flex items-center justify-center h-[400px]\">\n-                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n-                <span className=\"ml-3\">Loading...</span>\n-              </div>\n-            ) : (\n-              <>\n-                {!selectedGradeId ? (\n-                  // Question Types Display Section\n-                  <div className=\"space-y-6\">\n-                    <Card>\n-                      <CardHeader>\n-                        <div className=\"flex items-center justify-between\">\n-                          <div>\n-                            <CardTitle className=\"text-xl font-semibold\">Available Question Types</CardTitle>\n-                            <CardDescription>Browse through different question formats and examples</CardDescription>\n-                          </div>\n-                          <TooltipProvider>\n-                            <Tooltip>\n-                              <TooltipTrigger>\n-                                <HelpCircle className=\"h-5 w-5 text-muted-foreground\" />\n-                              </TooltipTrigger>\n-                              <TooltipContent>\n-                                <p>Click on each type to see detailed examples</p>\n-                              </TooltipContent>\n-                            </Tooltip>\n-                          </TooltipProvider>\n-                        </div>\n-                      </CardHeader>\n-                      <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n-                        {Object.entries(QUESTION_TYPES).map(([type, details]) => (\n-                          <Card key={type} className=\"cursor-pointer hover:bg-accent/50 transition-colors\">\n-                            <CardHeader className=\"p-4\">\n-                              <div className=\"flex items-center justify-between mb-2\">\n-                                <Badge variant=\"outline\" className=\"bg-primary/5 text-lg\">\n-                                  {details.label}\n-                                </Badge>\n-                              </div>\n-                              <CardDescription className=\"text-sm\">\n-                                {details.description || 'No description available'}\n-                              </CardDescription>\n-                              <div className=\"mt-4\">\n-                                <div className=\"text-sm font-medium mb-2\">Example:</div>\n-                                <div className=\"p-3 rounded-md bg-muted/50 text-sm\">\n-                                  {type === 'multiple-choice' && (\n-                                    <>\n-                                      <div className=\"font-medium mb-2\">Q: What is the capital of France?</div>\n-                                      <div className=\"space-y-1 pl-4\">\n-                                        <div>A) Paris</div>\n-                                        <div>B) London</div>\n-                                        <div>C) Berlin</div>\n-                                        <div>D) Madrid</div>\n-                                      </div>\n-                                    </>\n-                                  )}\n-                                  {type === 'fill-in-blank' && (\n-                                    <div className=\"space-y-2\">\n-                                      <div>Complete the sentence:</div>\n-                                      <div>The sun rises in the <span className=\"bg-primary/20 px-2 rounded\">_____</span> and sets in the <span className=\"bg-primary/20 px-2 rounded\">_____</span>.</div>\n-                                    </div>\n-                                  )}\n-                                  {type === 'true-false' && (\n-                                    <div className=\"space-y-2\">\n-                                      <div className=\"font-medium\">Statement:</div>\n-                                      <div>The Earth is flat.</div>\n-                                      <div className=\"mt-2\">\n-                                        <Badge variant=\"outline\" className=\"mr-2\">True</Badge>\n-                                        <Badge variant=\"outline\">False</Badge>\n-                                      </div>\n-                                    </div>\n-                                  )}\n-                                  {type === 'matching' && (\n-                                    <div className=\"space-y-2\">\n-                                      <div className=\"font-medium mb-2\">Match the countries with their capitals:</div>\n-                                      <div className=\"grid grid-cols-2 gap-4\">\n-                                        <div>\n-                                          1. France<br />\n-                                          2. Germany<br />\n-                                          3. Spain\n-                                        </div>\n-                                        <div>\n-                                          • Berlin<br />\n-                                          • Paris<br />\n-                                          • Madrid\n-                                        </div>\n-                                      </div>\n-                                    </div>\n-                                  )}\n-                                  {type === 'ordering' && (\n-                                    <div className=\"space-y-2\">\n-                                      <div className=\"font-medium mb-2\">Arrange in chronological order:</div>\n-                                      <div className=\"space-y-1\">\n-                                        <Badge variant=\"outline\" className=\"mr-2\">1</Badge>World War II<br />\n-                                        <Badge variant=\"outline\" className=\"mr-2\">2</Badge>Industrial Revolution<br />\n-                                        <Badge variant=\"outline\" className=\"mr-2\">3</Badge>Renaissance\n-                                      </div>\n-                                    </div>\n-                                  )}\n-                                  {type === 'short-answer' && (\n-                                    <div className=\"space-y-2\">\n-                                      <div className=\"font-medium\">Question:</div>\n-                                      <div>Explain the water cycle in 2-3 sentences.</div>\n-                                      <div className=\"mt-2 p-2 border border-dashed rounded-md border-primary/30\">\n-                                        Answer space\n-                                      </div>\n-                                    </div>\n-                                  )}\n-                                </div>\n-                              </div>\n-                            </CardHeader>\n-                          </Card>\n-                        ))}\n-                      </CardContent>\n-                    </Card>\n-                  </div>\n-                ) : isViewMode ? (\n-                  <div className=\"space-y-6\">\n-                    {selectedGradeId ? (\n-                      <div className=\"grid grid-cols-1 gap-6\">\n-                        {topics.map((topic) => (\n-                          <Card key={topic.id} className=\"border-l-4 border-l-primary\">\n-                            <CardHeader>\n-                              <div className=\"flex items-center justify-between\">\n-                                <h3 className=\"text-lg font-semibold\">{topic.title}</h3>\n-                              </div>\n-                            </CardHeader>\n-                            <CardContent>\n-                              <div className=\"space-y-4\">\n-                                {subtopics\n-                                  .filter(subtopic => subtopic.topic_id === topic.id)\n-                                  .map((subtopic, index) => (\n-                                    <div key={subtopic.id || `subtopic-${index}`} className=\"border-l-2 pl-4\">\n-                                      <h4 className=\"text-md font-medium mb-2\">{subtopic.name || 'Untitled Subtopic'}</h4>\n-                                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n-                                        {lessons\n-                                          .filter(lesson => lesson.subtopic_id === subtopic.id)\n-                                          .map((lesson) => (\n-                                            <Card \n-                                              key={lesson.id} \n-                                              className={cn(\n-                                                \"cursor-pointer transition-all duration-200\",\n-                                                \"hover:shadow-md hover:translate-y-[-2px]\",\n-                                                \"hover:bg-accent/50 hover:border-primary/50\",\n-                                                \"active:translate-y-[0px]\",\n-                                                currentLessonId === lesson.id && \"border-primary bg-accent/50 shadow-md\",\n-                                                \"group\" // Enable group hover effects\n-                                              )}\n-                                              onClick={() => handleLessonSelect(lesson.id)}\n-                                            >\n-                                              <CardHeader className=\"p-4\">\n-                                                <div className=\"flex flex-col gap-2\">\n-                                                  <div className=\"flex items-center justify-between\">\n-                                                    <div className=\"flex items-center gap-2\">\n-                                                      <BookOpen className={cn(\n-                                                        \"h-4 w-4 text-primary\",\n-                                                        \"transition-transform duration-200\",\n-                                                        \"group-hover:scale-110\"\n-                                                      )} />\n-                                                      <span className=\"font-medium\">{lesson.title}</span>\n-                                                    </div>\n-                                                    <Button\n-                                                      variant=\"outline\"\n-                                                      size=\"sm\"\n-                                                      className={cn(\n-                                                        \"opacity-0 group-hover:opacity-100\",\n-                                                        \"transition-all duration-200\",\n-                                                        \"hover:bg-primary hover:text-primary-foreground\"\n-                                                      )}\n-                                                      disabled={!lesson.content || currentLessonId !== lesson.id}\n-                                                      onClick={(e: React.MouseEvent) => {\n-                                                        e.stopPropagation();\n-                                                        window.location.href = `/teacher/lessons/${lesson.id}`;\n-                                                      }}\n-                                                    >\n-                                                      Start Lesson\n-                                                    </Button>\n-                                                  </div>\n-                                                  <div className=\"flex items-center gap-2\">\n-                                                    <Badge variant=\"outline\" className={cn(\n-                                                      \"bg-primary/5\",\n-                                                      \"transition-colors duration-200\",\n-                                                      \"group-hover:bg-primary/10\"\n-                                                    )}>\n-                                                      {lesson.questions?.length || 0} Questions\n-                                                    </Badge>\n-                                                    <Badge variant=\"outline\" className={cn(\n-                                                      \"bg-primary/5\",\n-                                                      \"transition-colors duration-200\",\n-                                                      \"group-hover:bg-primary/10\"\n-                                                    )}>\n-                                                      {lesson.activities?.length || 0} Activities\n-                                                    </Badge>\n-                                                  </div>\n-                                                </div>\n-                                              </CardHeader>\n-                                            </Card>\n-                                          ))}\n-                                      </div>\n-                                    </div>\n-                                  ))}\n-                              </div>\n-                            </CardContent>\n-                          </Card>\n-                        ))}\n-                      </div>\n-                    ) : (\n-                      <div className=\"text-center py-20\">\n-                        <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n-                        <h3 className=\"text-lg font-medium\">Select a Grade</h3>\n-                        <p className=\"text-sm text-muted-foreground\">\n-                          Choose a grade from the left panel to start managing content\n-                        </p>\n-                      </div>\n-                    )}\n-                  </div>\n-                ) : (\n-                  // Edit Mode Content\n-                  <div className=\"space-y-4\">\n-                    {/* Lesson Title */}\n-                    <Card>\n-                      <CardHeader>\n-                        <div className=\"flex items-center justify-between mb-4\">\n-                          <h2 className=\"text-2xl font-bold\">Lesson Content</h2>\n-                                                    <Button\n-                                                      variant=\"outline\"\n-                                                      size=\"sm\"\n-                            onClick={() => setIsContentEditorOpen(true)}\n-                          >\n-                            <Pencil className=\"h-4 w-4 mr-2\" />\n-                            Edit Content\n-                          </Button>\n-                        </div>\n-                      </CardHeader>\n-                      <CardContent className=\"space-y-4\">\n                         {/* Lesson Title */}\n                         <div className=\"flex items-center justify-between\">\n                           <div className=\"space-y-1\">\n                             <Label>Lesson Title</Label>\n"
                },
                {
                    "date": 1739965948852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2043,8 +2043,608 @@\n                     </div>\n                   </CardHeader>\n                   <CardContent className=\"space-y-4\">\n                     {/* View/Edit Mode Toggle */}\n+                    <div className=\"grid grid-cols-2 gap-2 p-1 bg-muted rounded-lg\">\n+                      <Button\n+                        variant={isViewMode ? \"default\" : \"ghost\"}\n+                        size=\"sm\"\n+                        onClick={() => setIsViewMode(true)}\n+                        className=\"w-full\"\n+                      >\n+                        <Eye className=\"h-4 w-4 mr-2\" />\n+                        View\n+                      </Button>\n+                      <Button\n+                        variant={!isViewMode ? \"default\" : \"ghost\"}\n+                        size=\"sm\"\n+                        onClick={() => setIsViewMode(false)}\n+                        className=\"w-full\"\n+                      >\n+                        <Edit className=\"h-4 w-4 mr-2\" />\n+                        Edit\n+                      </Button>\n+                    </div>\n+\n+                    {/* Grade Selection */}\n+                    <div className=\"space-y-2\">\n+                      <div className=\"flex items-center justify-between\">\n+                        <Label htmlFor=\"grade-select\">Grade</Label>\n+                        {isViewMode && (\n+                          <Button variant=\"ghost\" size=\"sm\" onClick={() => setExpandedGrade(expandedGrade ? null : selectedGrade)}>\n+                            {expandedGrade ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n+                          </Button>\n+                        )}\n+                      </div>\n+                      <Select \n+                        value={selectedGradeId || ''}\n+                        onValueChange={handleGradeSelect}\n+                        onOpenChange={(open) => {\n+                          if (open) {\n+                            // Force sidebar to stay open and lock it\n+                            setIsSidebarCollapsed(false);\n+                            setIsSidebarLocked(true);\n+                          }\n+                        }}\n+                      >\n+                        <SelectTrigger \n+                          id=\"grade-select\" \n+                          className=\"w-full\"\n+                          onClick={(e) => {\n+                            e.stopPropagation(); // Prevent event bubbling\n+                            setIsSidebarCollapsed(false);\n+                            setIsSidebarLocked(true);\n+                          }}\n+                        >\n+                          <SelectValue placeholder=\"Select Grade\" />\n+                        </SelectTrigger>\n+                        <SelectContent \n+                          onCloseAutoFocus={(e) => {\n+                            e.preventDefault();\n+                            setIsSidebarLocked(true);\n+                            setIsSidebarCollapsed(false);\n+                          }}\n+                        >\n+                          {grades.map((grade: Grade) => (\n+                            <SelectItem \n+                              key={`grade-${grade.id || 'new'}`} \n+                              value={grade.id || ''}\n+                              onMouseDown={(e) => {\n+                                e.preventDefault();\n+                                e.stopPropagation();\n+                              }}\n+                            >\n+                              <div className=\"flex items-center gap-2\">\n+                                <BookOpen className=\"h-4 w-4 text-primary\" />\n+                                {grade.name}\n+                              </div>\n+                            </SelectItem>\n+                          ))}\n+                        </SelectContent>\n+                      </Select>\n+                      {!isViewMode && (\n+                      <Button \n+                        variant=\"outline\" \n+                        size=\"sm\" \n+                        className=\"w-full gap-2\"\n+                        onClick={() => setModalState({ ...modalState, showAddGrade: false })}\n+                      >\n+                        <Plus className=\"h-4 w-4\" />\n+                        Add New Grade\n+                      </Button>\n+                      )}\n+                    </div>\n+\n+                    {/* Content Tree View in View Mode */}\n+                    {isViewMode && expandedGrade && (\n+                      <div className=\"mt-4 space-y-4 overflow-y-auto max-h-[calc(100vh-300px)]\">\n+                        {topics.map((topic) => (\n+                          <div key={topic.id} className=\"flex items-center justify-between p-4 border rounded-lg mb-4 hover:bg-accent/50 transition-colors\">\n+                            <div className=\"flex-1\" onClick={() => handleTopicSelect(topic.id)}>\n+                              <h3 className=\"font-medium\">{topic.title}</h3>\n+                              {topic.description && (\n+                                <p className=\"text-sm text-muted-foreground mt-1\">{topic.description}</p>\n+                              )}\n+                            </div>\n+                            <AlertDialog>\n+                              <AlertDialogTrigger asChild>\n+                                <Button \n+                                  variant=\"ghost\" \n+                                  size=\"sm\"\n+                                  className=\"hover:bg-destructive/10 hover:text-destructive\"\n+                                  onClick={(e: React.MouseEvent) => e.stopPropagation()}\n+                                >\n+                                  <Trash className=\"h-4 w-4\" />\n+                                </Button>\n+                              </AlertDialogTrigger>\n+                              <AlertDialogContent>\n+                                <AlertDialogHeader>\n+                                  <AlertDialogTitle>Delete Topic</AlertDialogTitle>\n+                                  <AlertDialogDescription>\n+                                    This will permanently delete \"{topic.title}\" and all its subtopics and lessons.\n+                                  </AlertDialogDescription>\n+                                </AlertDialogHeader>\n+                                <AlertDialogFooter>\n+                                  <AlertDialogCancel>Cancel</AlertDialogCancel>\n+                                  <AlertDialogAction onClick={() => handleDeleteTopic(topic.id)}>\n+                                    Delete\n+                                  </AlertDialogAction>\n+                                </AlertDialogFooter>\n+                              </AlertDialogContent>\n+                            </AlertDialog>\n+                          </div>\n+                        ))}\n+                        {subtopics.map((subtopic) => (\n+                          <div key={subtopic.id} className=\"flex items-center justify-between p-4 border rounded-lg mb-4 hover:bg-accent/50 transition-colors\">\n+                            <div className=\"flex-1\" onClick={() => handleSubtopicSelect(subtopic.id)}>\n+                              <h3 className=\"font-medium\">{subtopic.title}</h3>\n+                              {subtopic.description && (\n+                                <p className=\"text-sm text-muted-foreground mt-1\">{subtopic.description}</p>\n+                              )}\n+                            </div>\n+                            <AlertDialog>\n+                              <AlertDialogTrigger asChild>\n+                                <Button \n+                                  variant=\"ghost\" \n+                                  size=\"sm\"\n+                                  className=\"hover:bg-destructive/10 hover:text-destructive\"\n+                                  onClick={(e: React.MouseEvent) => e.stopPropagation()}\n+                                >\n+                                  <Trash className=\"h-4 w-4\" />\n+                                </Button>\n+                              </AlertDialogTrigger>\n+                              <AlertDialogContent>\n+                                <AlertDialogHeader>\n+                                  <AlertDialogTitle>Delete Subtopic</AlertDialogTitle>\n+                                  <AlertDialogDescription>\n+                                    This will permanently delete \"{subtopic.title}\" and all its lessons.\n+                                  </AlertDialogDescription>\n+                                </AlertDialogHeader>\n+                                <AlertDialogFooter>\n+                                  <AlertDialogCancel>Cancel</AlertDialogCancel>\n+                                  <AlertDialogAction onClick={() => handleDeleteSubtopic(subtopic.id)}>\n+                                    Delete\n+                                  </AlertDialogAction>\n+                                </AlertDialogFooter>\n+                              </AlertDialogContent>\n+                            </AlertDialog>\n+                          </div>\n+                        ))}\n+                        {lessons.map((lesson) => (\n+                          <div key={lesson.id} className=\"flex items-center justify-between p-4 border rounded-lg mb-4 hover:bg-accent/50 transition-colors\">\n+                            <div className=\"flex-1\" onClick={() => handleLessonSelect(lesson.id)}>\n+                              <h3 className=\"font-medium\">{lesson.title}</h3>\n+                              {lesson.description && (\n+                                <p className=\"text-sm text-muted-foreground mt-1\">{lesson.description}</p>\n+                              )}\n+                            </div>\n+                            <AlertDialog>\n+                              <AlertDialogTrigger asChild>\n+                                <Button \n+                                  variant=\"ghost\" \n+                                  size=\"sm\"\n+                                  className=\"hover:bg-destructive/10 hover:text-destructive\"\n+                                  onClick={(e: React.MouseEvent) => e.stopPropagation()}\n+                                >\n+                                  <Trash className=\"h-4 w-4\" />\n+                                </Button>\n+                              </AlertDialogTrigger>\n+                              <AlertDialogContent>\n+                                <AlertDialogHeader>\n+                                  <AlertDialogTitle>Delete Lesson</AlertDialogTitle>\n+                                  <AlertDialogDescription>\n+                                    This will permanently delete \"{lesson.title}\".\n+                                  </AlertDialogDescription>\n+                                </AlertDialogHeader>\n+                                <AlertDialogFooter>\n+                                  <AlertDialogCancel>Cancel</AlertDialogCancel>\n+                                  <AlertDialogAction onClick={() => handleDeleteLesson(lesson.id)}>\n+                                    Delete\n+                                  </AlertDialogAction>\n+                                </AlertDialogFooter>\n+                              </AlertDialogContent>\n+                            </AlertDialog>\n+                          </div>\n+                        ))}\n+                      </div>\n+                    )}\n+\n+                    {/* Regular Edit Mode Content */}\n+                    {!isViewMode && (\n+                      <>\n+                        {/* Existing Topic, Subtopic, and Lesson Selection UI */}\n+                      {/* Topic Selection */}\n+                        {selectedGradeId && (\n+                      <div className=\"space-y-2\">\n+                        <div className=\"flex items-center justify-between\">\n+                        <Label htmlFor=\"topic-select\">Topic</Label>\n+                        </div>\n+                        <Select \n+                              value={selectedTopicId || ''} \n+                              onValueChange={handleTopicSelect}\n+                        >\n+                          <SelectTrigger id=\"topic-select\" className=\"w-full\">\n+                            <SelectValue placeholder=\"Select Topic\" />\n+                          </SelectTrigger>\n+                          <SelectContent>\n+                                {topics.map((topic: Topic) => (\n+                                  <SelectItem \n+                                    key={`topic-${topic.id || 'new'}`} \n+                                    value={topic.id || ''}\n+                                  >\n+                                  <div className=\"flex items-center gap-2\">\n+                                  <Layers className=\"h-4 w-4 text-primary\" />\n+                                    {topic.title}\n+                                  </div>\n+                                </SelectItem>\n+                              ))}\n+                          </SelectContent>\n+                        </Select>\n+                        <Button \n+                          variant=\"outline\" \n+                          size=\"sm\" \n+                          className=\"w-full gap-2\"\n+                          onClick={() => setModalState({ ...modalState, showAddTopic: true })}\n+                        >\n+                          <Plus className=\"h-4 w-4\" />\n+                          Add New Topic\n+                        </Button>\n+                      </div>\n+                    )}\n+\n+                    {/* Subtopic Selection */}\n+                        {selectedTopicId && (\n+                      <div className=\"space-y-2\">\n+                        <div className=\"flex items-center justify-between\">\n+                        <Label htmlFor=\"subtopic-select\">Subtopic</Label>\n+                        </div>\n+                        <Select \n+                              value={selectedSubtopicId || ''} \n+                              onValueChange={handleSubtopicSelect}\n+                        >\n+                          <SelectTrigger id=\"subtopic-select\" className=\"w-full\">\n+                            <SelectValue placeholder=\"Select Subtopic\" />\n+                          </SelectTrigger>\n+                          <SelectContent>\n+                                {subtopics\n+                                  .filter(subtopic => subtopic.id)\n+                                  .map((subtopic, index) => (\n+                                    <SelectItem \n+                                      key={subtopic.id || `subtopic-${index}`}\n+                                      value={subtopic.id || ''}\n+                                    >\n+                                      {subtopic.title || 'Untitled Subtopic'}\n+                                    </SelectItem>\n+                                  ))}\n+                          </SelectContent>\n+                        </Select>\n+                        {!isViewMode && (\n+                          <Button \n+                            variant=\"outline\" \n+                            size=\"sm\" \n+                            className=\"w-full gap-2\"\n+                            onClick={() => setModalState({ ...modalState, showAddSubtopic: true })}\n+                          >\n+                            <Plus className=\"h-4 w-4\" />\n+                            Add New Subtopic\n+                          </Button>\n+                        )}\n+                      </div>\n+                    )}\n+\n+                    {/* Lesson Selection */}\n+                        {selectedSubtopicId && (\n+                      <div className=\"space-y-2\">\n+                        <div className=\"flex items-center justify-between\">\n+                          <Label htmlFor=\"lesson-select\">Lesson</Label>\n+                        </div>\n+                          <Select \n+                            value={currentLessonId || ''} \n+                            onValueChange={handleLessonSelect}\n+                            onOpenChange={(open) => {\n+                              setIsDropdownOpen(open);\n+                              if (open) {\n+                                setIsSidebarCollapsed(false);\n+                                setIsSidebarLocked(true);\n+                              } else {\n+                                // Small delay before unlocking to prevent immediate collapse\n+                                setTimeout(() => {\n+                                  setIsSidebarLocked(false);\n+                                }, 100);\n+                              }\n+                            }}\n+                          >\n+                            <SelectTrigger \n+                              id=\"lesson-select\" \n+                              className=\"w-full\"\n+                              onClick={(e) => {\n+                                e.stopPropagation();\n+                                setIsSidebarCollapsed(false);\n+                                setIsSidebarLocked(true);\n+                              }}\n+                            >\n+                              <SelectValue placeholder=\"Select Lesson\" />\n+                            </SelectTrigger>\n+                            <SelectContent>\n+                              {lessons\n+                                .filter((lesson): lesson is Lesson => lesson !== undefined && lesson !== null)\n+                                .map((lesson: Lesson) => (\n+                                  <SelectItem \n+                                    key={`lesson-${lesson.id || 'new'}`} \n+                                    value={lesson.id || ''}\n+                                  >\n+                                    <div className=\"flex items-center gap-2\">\n+                                      <BookOpen className=\"h-4 w-4 text-primary\" />\n+                                      {lesson.title || 'Untitled Lesson'}\n+                                    </div>\n+                                  </SelectItem>\n+                                ))}\n+                            </SelectContent>\n+                          </Select>\n+                    <Button \n+                            variant=\"outline\" \n+                            size=\"sm\" \n+                            className=\"w-full gap-2\"\n+                        onClick={() => setModalState({ ...modalState, showAddLesson: true })}\n+                          >\n+                            <Plus className=\"h-4 w-4\" />\n+                            Add New Lesson\n+                    </Button>\n+                      </div>\n+                        )}\n+                      </>\n+                    )}\n+                  </CardContent>\n+                </Card>\n+              </div>\n+\n+              {/* Collapsed view */}\n+              {isSidebarCollapsed && (\n+                <div className=\"absolute inset-0 flex flex-col items-center pt-12 gap-4\">\n+                  <BookOpen className=\"h-6 w-6 text-muted-foreground\" />\n+                  <div className=\"w-px h-full bg-border\" />\n+                </div>\n+              )}\n+            </Card>\n+          </div>\n+        \n+\n+          {/* Right Content Area */}\n+          <div className=\"flex-1 overflow-y-auto\">\n+            {isNavigating ? (\n+              <div className=\"flex items-center justify-center h-[400px]\">\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n+                <span className=\"ml-3\">Loading...</span>\n+              </div>\n+            ) : (\n+              <>\n+                {!selectedGradeId ? (\n+                  // Question Types Display Section\n+                  <div className=\"space-y-6\">\n+                    <Card>\n+                      <CardHeader>\n+                        <div className=\"flex items-center justify-between\">\n+                          <div>\n+                            <CardTitle className=\"text-xl font-semibold\">Available Question Types</CardTitle>\n+                            <CardDescription>Browse through different question formats and examples</CardDescription>\n+                          </div>\n+                          <TooltipProvider>\n+                            <Tooltip>\n+                              <TooltipTrigger>\n+                                <HelpCircle className=\"h-5 w-5 text-muted-foreground\" />\n+                              </TooltipTrigger>\n+                              <TooltipContent>\n+                                <p>Click on each type to see detailed examples</p>\n+                              </TooltipContent>\n+                            </Tooltip>\n+                          </TooltipProvider>\n+                        </div>\n+                      </CardHeader>\n+                      <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n+                        {Object.entries(QUESTION_TYPES).map(([type, details]) => (\n+                          <Card key={type} className=\"cursor-pointer hover:bg-accent/50 transition-colors\">\n+                            <CardHeader className=\"p-4\">\n+                              <div className=\"flex items-center justify-between mb-2\">\n+                                <Badge variant=\"outline\" className=\"bg-primary/5 text-lg\">\n+                                  {details.label}\n+                                </Badge>\n+                              </div>\n+                              <CardDescription className=\"text-sm\">\n+                                {details.description || 'No description available'}\n+                              </CardDescription>\n+                              <div className=\"mt-4\">\n+                                <div className=\"text-sm font-medium mb-2\">Example:</div>\n+                                <div className=\"p-3 rounded-md bg-muted/50 text-sm\">\n+                                  {type === 'multiple-choice' && (\n+                                    <>\n+                                      <div className=\"font-medium mb-2\">Q: What is the capital of France?</div>\n+                                      <div className=\"space-y-1 pl-4\">\n+                                        <div>A) Paris</div>\n+                                        <div>B) London</div>\n+                                        <div>C) Berlin</div>\n+                                        <div>D) Madrid</div>\n+                                      </div>\n+                                    </>\n+                                  )}\n+                                  {type === 'fill-in-blank' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div>Complete the sentence:</div>\n+                                      <div>The sun rises in the <span className=\"bg-primary/20 px-2 rounded\">_____</span> and sets in the <span className=\"bg-primary/20 px-2 rounded\">_____</span>.</div>\n+                                    </div>\n+                                  )}\n+                                  {type === 'true-false' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div className=\"font-medium\">Statement:</div>\n+                                      <div>The Earth is flat.</div>\n+                                      <div className=\"mt-2\">\n+                                        <Badge variant=\"outline\" className=\"mr-2\">True</Badge>\n+                                        <Badge variant=\"outline\">False</Badge>\n+                                      </div>\n+                                    </div>\n+                                  )}\n+                                  {type === 'matching' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div className=\"font-medium mb-2\">Match the countries with their capitals:</div>\n+                                      <div className=\"grid grid-cols-2 gap-4\">\n+                                        <div>\n+                                          1. France<br />\n+                                          2. Germany<br />\n+                                          3. Spain\n+                                        </div>\n+                                        <div>\n+                                          • Berlin<br />\n+                                          • Paris<br />\n+                                          • Madrid\n+                                        </div>\n+                                      </div>\n+                                    </div>\n+                                  )}\n+                                  {type === 'ordering' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div className=\"font-medium mb-2\">Arrange in chronological order:</div>\n+                                      <div className=\"space-y-1\">\n+                                        <Badge variant=\"outline\" className=\"mr-2\">1</Badge>World War II<br />\n+                                        <Badge variant=\"outline\" className=\"mr-2\">2</Badge>Industrial Revolution<br />\n+                                        <Badge variant=\"outline\" className=\"mr-2\">3</Badge>Renaissance\n+                                      </div>\n+                                    </div>\n+                                  )}\n+                                  {type === 'short-answer' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div className=\"font-medium\">Question:</div>\n+                                      <div>Explain the water cycle in 2-3 sentences.</div>\n+                                      <div className=\"mt-2 p-2 border border-dashed rounded-md border-primary/30\">\n+                                        Answer space\n+                                      </div>\n+                                    </div>\n+                                  )}\n+                                </div>\n+                              </div>\n+                            </CardHeader>\n+                          </Card>\n+                        ))}\n+                      </CardContent>\n+                    </Card>\n+                  </div>\n+                ) : isViewMode ? (\n+                  <div className=\"space-y-6\">\n+                    {selectedGradeId ? (\n+                      <div className=\"grid grid-cols-1 gap-6\">\n+                        {topics.map((topic) => (\n+                          <Card key={topic.id} className=\"border-l-4 border-l-primary\">\n+                            <CardHeader>\n+                              <div className=\"flex items-center justify-between\">\n+                                <h3 className=\"text-lg font-semibold\">{topic.title}</h3>\n+                              </div>\n+                            </CardHeader>\n+                            <CardContent>\n+                              <div className=\"space-y-4\">\n+                                {subtopics\n+                                  .filter(subtopic => subtopic.topic_id === topic.id)\n+                                  .map((subtopic, index) => (\n+                                    <div key={subtopic.id || `subtopic-${index}`} className=\"border-l-2 pl-4\">\n+                                      <h4 className=\"text-md font-medium mb-2\">{subtopic.name || 'Untitled Subtopic'}</h4>\n+                                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n+                                        {lessons\n+                                          .filter(lesson => lesson.subtopic_id === subtopic.id)\n+                                          .map((lesson) => (\n+                                            <Card \n+                                              key={lesson.id} \n+                                              className={cn(\n+                                                \"cursor-pointer transition-all duration-200\",\n+                                                \"hover:shadow-md hover:translate-y-[-2px]\",\n+                                                \"hover:bg-accent/50 hover:border-primary/50\",\n+                                                \"active:translate-y-[0px]\",\n+                                                currentLessonId === lesson.id && \"border-primary bg-accent/50 shadow-md\",\n+                                                \"group\" // Enable group hover effects\n+                                              )}\n+                                              onClick={() => handleLessonSelect(lesson.id)}\n+                                            >\n+                                              <CardHeader className=\"p-4\">\n+                                                <div className=\"flex flex-col gap-2\">\n+                                                  <div className=\"flex items-center justify-between\">\n+                                                    <div className=\"flex items-center gap-2\">\n+                                                      <BookOpen className={cn(\n+                                                        \"h-4 w-4 text-primary\",\n+                                                        \"transition-transform duration-200\",\n+                                                        \"group-hover:scale-110\"\n+                                                      )} />\n+                                                      <span className=\"font-medium\">{lesson.title}</span>\n+                                                    </div>\n+                                                    <Button\n+                                                      variant=\"outline\"\n+                                                      size=\"sm\"\n+                                                      className={cn(\n+                                                        \"opacity-0 group-hover:opacity-100\",\n+                                                        \"transition-all duration-200\",\n+                                                        \"hover:bg-primary hover:text-primary-foreground\"\n+                                                      )}\n+                                                      disabled={!lesson.content || currentLessonId !== lesson.id}\n+                                                      onClick={(e: React.MouseEvent) => {\n+                                                        e.stopPropagation();\n+                                                        window.location.href = `/teacher/lessons/${lesson.id}`;\n+                                                      }}\n+                                                    >\n+                                                      Start Lesson\n+                                                    </Button>\n+                                                  </div>\n+                                                  <div className=\"flex items-center gap-2\">\n+                                                    <Badge variant=\"outline\" className={cn(\n+                                                      \"bg-primary/5\",\n+                                                      \"transition-colors duration-200\",\n+                                                      \"group-hover:bg-primary/10\"\n+                                                    )}>\n+                                                      {lesson.questions?.length || 0} Questions\n+                                                    </Badge>\n+                                                    <Badge variant=\"outline\" className={cn(\n+                                                      \"bg-primary/5\",\n+                                                      \"transition-colors duration-200\",\n+                                                      \"group-hover:bg-primary/10\"\n+                                                    )}>\n+                                                      {lesson.activities?.length || 0} Activities\n+                                                    </Badge>\n+                                                  </div>\n+                                                </div>\n+                                              </CardHeader>\n+                                            </Card>\n+                                          ))}\n+                                      </div>\n+                                    </div>\n+                                  ))}\n+                              </div>\n+                            </CardContent>\n+                          </Card>\n+                        ))}\n+                      </div>\n+                    ) : (\n+                      <div className=\"text-center py-20\">\n+                        <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n+                        <h3 className=\"text-lg font-medium\">Select a Grade</h3>\n+                        <p className=\"text-sm text-muted-foreground\">\n+                          Choose a grade from the left panel to start managing content\n+                        </p>\n+                      </div>\n+                    )}\n+                  </div>\n+                ) : (\n+                  // Edit Mode Content\n+                  <div className=\"space-y-4\">\n+                    {/* Lesson Title */}\n+                    <Card>\n+                      <CardHeader>\n+                        <div className=\"flex items-center justify-between mb-4\">\n+                          <h2 className=\"text-2xl font-bold\">Lesson Content</h2>\n+                                                    <Button\n+                                                      variant=\"outline\"\n+                                                      size=\"sm\"\n+                            onClick={() => setIsContentEditorOpen(true)}\n+                          >\n+                            <Pencil className=\"h-4 w-4 mr-2\" />\n+                            Edit Content\n+                          </Button>\n+                        </div>\n+                      </CardHeader>\n+                      <CardContent className=\"space-y-4\">\n                         {/* Lesson Title */}\n                         <div className=\"flex items-center justify-between\">\n                           <div className=\"space-y-1\">\n                             <Label>Lesson Title</Label>\n@@ -2766,9 +3366,9 @@\n     toast.error('Failed to delete lesson');\n   }\n };\n \n-// Add this component for the right plane content view\n+// Define ContentHierarchyView inside the component\n const ContentHierarchyView = () => {\n   return (\n     <div className=\"space-y-6\">\n       {topics.map((topic) => (\n@@ -2934,12 +3534,31 @@\n     </div>\n   );\n };\n \n-// Update the main content area to use this component in view mode\n-{isViewMode && selectedGradeId ? (\n-  <div className=\"p-6\">\n-    <ContentHierarchyView />\n-  </div>\n-) : (\n-  // ... existing edit mode content\n-)}\n\\ No newline at end of file\n+// Main render return\n+export default function LessonManagementPage() {\n+  // ... existing state and handlers ...\n+\n+  // Main render return\n+  return (\n+    <div className=\"container mx-auto p-6\">\n+      {/* ... other content ... */}\n+      \n+      {/* Replace the content area with this conditional render */}\n+      <div className=\"flex-1\">\n+        {isViewMode && selectedGradeId ? (\n+          <div className=\"p-6\">\n+            <ContentHierarchyView />\n+          </div>\n+        ) : (\n+          // Your existing edit mode content\n+          <div>\n+            {/* Existing edit mode JSX */}\n+          </div>\n+        )}\n+      </div>\n+      \n+      {/* ... rest of your component ... */}\n+    </div>\n+  );\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739966288134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3538,27 +3538,47 @@\n // Main render return\n export default function LessonManagementPage() {\n   // ... existing state and handlers ...\n \n+  // Define ContentHierarchyView inside the component to access state and handlers\n+  const ContentHierarchyView = () => {\n+    return (\n+      <div className=\"space-y-6\">\n+        {topics.map((topic) => (\n+          <Card key={topic.id} className=\"border-l-4 border-l-primary/40 hover:border-l-primary transition-all duration-200\">\n+            {/* ... rest of ContentHierarchyView implementation ... */}\n+          </Card>\n+        ))}\n+      </div>\n+    );\n+  };\n+\n   // Main render return\n   return (\n     <div className=\"container mx-auto p-6\">\n-      {/* ... other content ... */}\n-      \n-      {/* Replace the content area with this conditional render */}\n-      <div className=\"flex-1\">\n-        {isViewMode && selectedGradeId ? (\n-          <div className=\"p-6\">\n-            <ContentHierarchyView />\n-          </div>\n-        ) : (\n-          // Your existing edit mode content\n-          <div>\n-            {/* Existing edit mode JSX */}\n-          </div>\n-        )}\n+      <div className=\"flex gap-6 h-[calc(100vh-200px)]\">\n+        {/* Left Sidebar */}\n+        <div className={cn(\n+          \"transition-all duration-300 ease-in-out relative\",\n+          isSidebarCollapsed ? \"w-20\" : \"w-80\",\n+          \"flex-shrink-0 group\"\n+        )}>\n+          {/* ... existing sidebar content ... */}\n+        </div>\n+\n+        {/* Main Content Area */}\n+        <div className=\"flex-1\">\n+          {isViewMode && selectedGradeId ? (\n+            <div className=\"p-6\">\n+              <ContentHierarchyView />\n+            </div>\n+          ) : (\n+            // Your existing edit mode content\n+            <div>\n+              {/* Existing edit mode JSX */}\n+            </div>\n+          )}\n+        </div>\n       </div>\n-      \n-      {/* ... rest of your component ... */}\n     </div>\n   );\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739966295825,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3428,8 +3428,9 @@\n                         \"rounded-lg border p-4\",\n                         isEmpty ? \"border-dashed border-muted-foreground/30\" : \"border-primary/10\"\n                       )}\n                     >\n+                      {/* Subtopic header */}\n                       <div className=\"flex items-center justify-between mb-4\">\n                         <div className=\"flex items-center gap-3\">\n                           <div className=\"h-7 w-7 rounded-md bg-primary/5 flex items-center justify-center\">\n                             <BookOpen className=\"h-4 w-4 text-primary/70\" />\n@@ -3441,31 +3442,9 @@\n                             </p>\n                           </div>\n                         </div>\n                         <AlertDialog>\n-                          <AlertDialogTrigger asChild>\n-                            <Button \n-                              variant=\"ghost\" \n-                              size=\"sm\"\n-                              className=\"hover:bg-destructive/10 hover:text-destructive\"\n-                            >\n-                              <Trash className=\"h-4 w-4\" />\n-                            </Button>\n-                          </AlertDialogTrigger>\n-                          <AlertDialogContent>\n-                            <AlertDialogHeader>\n-                              <AlertDialogTitle>Delete Subtopic</AlertDialogTitle>\n-                              <AlertDialogDescription>\n-                                This will permanently delete \"{subtopic.title}\" and all its lessons.\n-                              </AlertDialogDescription>\n-                            </AlertDialogHeader>\n-                            <AlertDialogFooter>\n-                              <AlertDialogCancel>Cancel</AlertDialogCancel>\n-                              <AlertDialogAction onClick={() => handleDeleteSubtopic(subtopic.id)}>\n-                                Delete\n-                              </AlertDialogAction>\n-                            </AlertDialogFooter>\n-                          </AlertDialogContent>\n+                          {/* Delete subtopic dialog */}\n                         </AlertDialog>\n                       </div>\n \n                       {isEmpty ? (\n"
                },
                {
                    "date": 1739966302854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3446,8 +3446,9 @@\n                           {/* Delete subtopic dialog */}\n                         </AlertDialog>\n                       </div>\n \n+                      {/* Lessons list */}\n                       {isEmpty ? (\n                         <div className=\"flex items-center justify-center p-4 text-muted-foreground text-sm\">\n                           <p>No lessons available</p>\n                         </div>\n@@ -3457,49 +3458,9 @@\n                             <div \n                               key={lesson.id}\n                               className=\"flex items-center justify-between p-3 rounded-md bg-accent/50 hover:bg-accent transition-colors\"\n                             >\n-                              <div className=\"flex items-center gap-2\">\n-                                <div className=\"h-6 w-6 rounded bg-background flex items-center justify-center\">\n-                                  <FileText className=\"h-3 w-3 text-primary\" />\n-                                </div>\n-                                <span className=\"text-sm\">{lesson.title}</span>\n-                              </div>\n-                              <div className=\"flex items-center gap-2\">\n-                                <Button\n-                                  variant=\"ghost\"\n-                                  size=\"sm\"\n-                                  className=\"h-7 hover:bg-primary/10\"\n-                                  onClick={() => handleLessonSelect(lesson.id)}\n-                                >\n-                                  <Pencil className=\"h-3 w-3\" />\n-                                </Button>\n-                                <AlertDialog>\n-                                  <AlertDialogTrigger asChild>\n-                                    <Button \n-                                      variant=\"ghost\" \n-                                      size=\"sm\"\n-                                      className=\"h-7 hover:bg-destructive/10 hover:text-destructive\"\n-                                    >\n-                                      <Trash className=\"h-3 w-3\" />\n-                                    </Button>\n-                                  </AlertDialogTrigger>\n-                                  <AlertDialogContent>\n-                                    <AlertDialogHeader>\n-                                      <AlertDialogTitle>Delete Lesson</AlertDialogTitle>\n-                                      <AlertDialogDescription>\n-                                        This will permanently delete \"{lesson.title}\".\n-                                      </AlertDialogDescription>\n-                                    </AlertDialogHeader>\n-                                    <AlertDialogFooter>\n-                                      <AlertDialogCancel>Cancel</AlertDialogCancel>\n-                                      <AlertDialogAction onClick={() => handleDeleteLesson(lesson.id)}>\n-                                        Delete\n-                                      </AlertDialogAction>\n-                                    </AlertDialogFooter>\n-                                  </AlertDialogContent>\n-                                </AlertDialog>\n-                              </div>\n+                              {/* Lesson content */}\n                             </div>\n                           ))}\n                         </div>\n                       )}\n@@ -3517,12 +3478,13 @@\n // Main render return\n export default function LessonManagementPage() {\n   // ... existing state and handlers ...\n \n-  // Define ContentHierarchyView inside the component to access state and handlers\n+  // Define ContentHierarchyView inside the component\n   const ContentHierarchyView = () => {\n     return (\n       <div className=\"space-y-6\">\n+        {topics.map((topic: Topic) => (\n         {topics.map((topic) => (\n           <Card key={topic.id} className=\"border-l-4 border-l-primary/40 hover:border-l-primary transition-all duration-200\">\n             {/* ... rest of ContentHierarchyView implementation ... */}\n           </Card>\n"
                },
                {
                    "date": 1739966313100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3483,8 +3483,169 @@\n   const ContentHierarchyView = () => {\n     return (\n       <div className=\"space-y-6\">\n         {topics.map((topic: Topic) => (\n+          <Card key={topic.id} className=\"border-l-4 border-l-primary/40 hover:border-l-primary transition-all duration-200\">\n+            <CardHeader className=\"py-4\">\n+              <div className=\"flex items-center justify-between\">\n+                <div className=\"flex items-center gap-3\">\n+                  <div className=\"h-8 w-8 rounded-md bg-primary/10 flex items-center justify-center\">\n+                    <Layers className=\"h-4 w-4 text-primary\" />\n+                  </div>\n+                  <div>\n+                    <h3 className=\"font-semibold\">{topic.title}</h3>\n+                    <p className=\"text-sm text-muted-foreground\">\n+                      {subtopics.filter(s => s.topic_id === topic.id).length} Subtopics\n+                    </p>\n+                  </div>\n+                </div>\n+                <AlertDialog>\n+                  <AlertDialogTrigger asChild>\n+                    <Button \n+                      variant=\"ghost\" \n+                      size=\"sm\"\n+                      className=\"hover:bg-destructive/10 hover:text-destructive\"\n+                    >\n+                      <Trash className=\"h-4 w-4\" />\n+                    </Button>\n+                  </AlertDialogTrigger>\n+                  <AlertDialogContent>\n+                    <AlertDialogHeader>\n+                      <AlertDialogTitle>Delete Topic</AlertDialogTitle>\n+                      <AlertDialogDescription>\n+                        This will permanently delete \"{topic.title}\" and all its contents.\n+                      </AlertDialogDescription>\n+                    </AlertDialogHeader>\n+                    <AlertDialogFooter>\n+                      <AlertDialogCancel>Cancel</AlertDialogCancel>\n+                      <AlertDialogAction onClick={() => handleDeleteTopic(topic.id)}>\n+                        Delete\n+                      </AlertDialogAction>\n+                    </AlertDialogFooter>\n+                  </AlertDialogContent>\n+                </AlertDialog>\n+              </div>\n+            </CardHeader>\n+            <CardContent>\n+              <div className=\"pl-11 space-y-4\">\n+                {subtopics\n+                  .filter(subtopic => subtopic.topic_id === topic.id)\n+                  .map((subtopic) => {\n+                    const subtopicLessons = lessons.filter(l => l.subtopic_id === subtopic.id);\n+                    const isEmpty = subtopicLessons.length === 0;\n+\n+                    return (\n+                      <div \n+                        key={subtopic.id} \n+                        className={cn(\n+                          \"rounded-lg border p-4\",\n+                          isEmpty ? \"border-dashed border-muted-foreground/30\" : \"border-primary/10\"\n+                        )}\n+                      >\n+                        {/* Subtopic header */}\n+                        <div className=\"flex items-center justify-between mb-4\">\n+                          <div className=\"flex items-center gap-3\">\n+                            <div className=\"h-7 w-7 rounded-md bg-primary/5 flex items-center justify-center\">\n+                              <BookOpen className=\"h-4 w-4 text-primary/70\" />\n+                            </div>\n+                            <div>\n+                              <h4 className=\"font-medium\">{subtopic.title}</h4>\n+                              <p className=\"text-sm text-muted-foreground\">\n+                                {subtopicLessons.length} Lessons\n+                              </p>\n+                            </div>\n+                          </div>\n+                          <AlertDialog>\n+                            {/* Delete subtopic dialog */}\n+                          </AlertDialog>\n+                        </div>\n+\n+                        {/* Lessons list */}\n+                        {isEmpty ? (\n+                          <div className=\"flex items-center justify-center p-4 text-muted-foreground text-sm\">\n+                            <p>No lessons available</p>\n+                          </div>\n+                        ) : (\n+                          <div className=\"space-y-2\">\n+                            {subtopicLessons.map((lesson) => (\n+                              <div \n+                                key={lesson.id}\n+                                className=\"flex items-center justify-between p-3 rounded-md bg-accent/50 hover:bg-accent transition-colors\"\n+                              >\n+                                {/* Lesson content */}\n+                              </div>\n+                            ))}\n+                          </div>\n+                        )}\n+                      </div>\n+                    );\n+                  })}\n+              </div>\n+            </CardContent>\n+                              <div className=\"flex items-center gap-2\">\n+                                <div className=\"h-6 w-6 rounded bg-background flex items-center justify-center\">\n+                                  <FileText className=\"h-3 w-3 text-primary\" />\n+                                </div>\n+                                <span className=\"text-sm\">{lesson.title}</span>\n+                              </div>\n+                              <div className=\"flex items-center gap-2\">\n+                                <Button\n+                                  variant=\"ghost\"\n+                                  size=\"sm\"\n+                                  className=\"h-7 hover:bg-primary/10\"\n+                                  onClick={() => handleLessonSelect(lesson.id)}\n+                                >\n+                                  <Pencil className=\"h-3 w-3\" />\n+                                </Button>\n+                                <AlertDialog>\n+                                  <AlertDialogTrigger asChild>\n+                                    <Button \n+                                      variant=\"ghost\" \n+                                      size=\"sm\"\n+                                      className=\"h-7 hover:bg-destructive/10 hover:text-destructive\"\n+                                    >\n+                                      <Trash className=\"h-3 w-3\" />\n+                                    </Button>\n+                                  </AlertDialogTrigger>\n+                                  <AlertDialogContent>\n+                                    <AlertDialogHeader>\n+                                      <AlertDialogTitle>Delete Lesson</AlertDialogTitle>\n+                                      <AlertDialogDescription>\n+                                        This will permanently delete \"{lesson.title}\".\n+                                      </AlertDialogDescription>\n+                                    </AlertDialogHeader>\n+                                    <AlertDialogFooter>\n+                                      <AlertDialogCancel>Cancel</AlertDialogCancel>\n+                                      <AlertDialogAction onClick={() => handleDeleteLesson(lesson.id)}>\n+                                        Delete\n+                                      </AlertDialogAction>\n+                                    </AlertDialogFooter>\n+                                  </AlertDialogContent>\n+                                </AlertDialog>\n+                              </div>\n+                            </div>\n+                          ))}\n+                        </div>\n+                      )}\n+                    </div>\n+                  );\n+                })}\n+            </div>\n+          </CardContent>\n+        </Card>\n+      ))}\n+    </div>\n+  );\n+};\n+\n+// Main render return\n+export default function LessonManagementPage() {\n+  // ... existing state and handlers ...\n+\n+  // Define ContentHierarchyView inside the component to access state and handlers\n+  const ContentHierarchyView = () => {\n+    return (\n+      <div className=\"space-y-6\">\n         {topics.map((topic) => (\n           <Card key={topic.id} className=\"border-l-4 border-l-primary/40 hover:border-l-primary transition-all duration-200\">\n             {/* ... rest of ContentHierarchyView implementation ... */}\n           </Card>\n"
                },
                {
                    "date": 1739966426679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,8 @@\n import { PostgrestError } from '@supabase/supabase-js';\n import { Question as ContentQuestion } from './types';  // Import the specific type\n import { Trash } from \"lucide-react\";\n import { AnimatePresence, motion } from 'framer-motion';\n-import { FileText } from \"lucide-react\";\n \n \n // Update the API endpoint to match your backend route\n const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\n@@ -2025,23 +2024,21 @@\n               )}>\n                 <Card className=\"h-full\">\n                   <CardHeader className=\"pb-3\">\n                     <div className=\"flex items-center justify-between\">\n-                      <div className=\"flex items-center justify-between\">\n-                        <CardTitle className=\"text-lg font-semibold\">Content Management</CardTitle>\n-                        <TooltipProvider>\n-                          <Tooltip>\n-                            <TooltipTrigger>\n-                              <HelpCircle className=\"h-4 w-4 text-muted-foreground\" />\n-                            </TooltipTrigger>\n-                            <TooltipContent>\n-                              <p>Manage your educational content here</p>\n-                            </TooltipContent>\n-                          </Tooltip>\n-                        </TooltipProvider>\n-                        </div>\n-                      <CardDescription>Create and manage your lessons</CardDescription>\n-                    </div>\n+                      <CardTitle className=\"text-lg font-semibold\">Content Management</CardTitle>\n+                      <TooltipProvider>\n+                        <Tooltip>\n+                          <TooltipTrigger>\n+                            <HelpCircle className=\"h-4 w-4 text-muted-foreground\" />\n+                          </TooltipTrigger>\n+                          <TooltipContent>\n+                            <p>Manage your educational content here</p>\n+                          </TooltipContent>\n+                        </Tooltip>\n+                      </TooltipProvider>\n+                      </div>\n+                    <CardDescription>Create and manage your lessons</CardDescription>\n                   </CardHeader>\n                   <CardContent className=\"space-y-4\">\n                     {/* View/Edit Mode Toggle */}\n                     <div className=\"grid grid-cols-2 gap-2 p-1 bg-muted rounded-lg\">\n@@ -3364,323 +3361,5 @@\n   } catch (error) {\n     console.error('Error deleting lesson:', error);\n     toast.error('Failed to delete lesson');\n   }\n-};\n-\n-// Define ContentHierarchyView inside the component\n-const ContentHierarchyView = () => {\n-  return (\n-    <div className=\"space-y-6\">\n-      {topics.map((topic) => (\n-        <Card key={topic.id} className=\"border-l-4 border-l-primary/40 hover:border-l-primary transition-all duration-200\">\n-          <CardHeader className=\"py-4\">\n-            <div className=\"flex items-center justify-between\">\n-              <div className=\"flex items-center gap-3\">\n-                <div className=\"h-8 w-8 rounded-md bg-primary/10 flex items-center justify-center\">\n-                  <Layers className=\"h-4 w-4 text-primary\" />\n-                </div>\n-                <div>\n-                  <h3 className=\"font-semibold\">{topic.title}</h3>\n-                  <p className=\"text-sm text-muted-foreground\">\n-                    {subtopics.filter(s => s.topic_id === topic.id).length} Subtopics\n-                  </p>\n-                </div>\n-              </div>\n-              <AlertDialog>\n-                <AlertDialogTrigger asChild>\n-                  <Button \n-                    variant=\"ghost\" \n-                    size=\"sm\"\n-                    className=\"hover:bg-destructive/10 hover:text-destructive\"\n-                  >\n-                    <Trash className=\"h-4 w-4\" />\n-                  </Button>\n-                </AlertDialogTrigger>\n-                <AlertDialogContent>\n-                  <AlertDialogHeader>\n-                    <AlertDialogTitle>Delete Topic</AlertDialogTitle>\n-                    <AlertDialogDescription>\n-                      This will permanently delete \"{topic.title}\" and all its contents.\n-                    </AlertDialogDescription>\n-                  </AlertDialogHeader>\n-                  <AlertDialogFooter>\n-                    <AlertDialogCancel>Cancel</AlertDialogCancel>\n-                    <AlertDialogAction onClick={() => handleDeleteTopic(topic.id)}>\n-                      Delete\n-                    </AlertDialogAction>\n-                  </AlertDialogFooter>\n-                </AlertDialogContent>\n-              </AlertDialog>\n-            </div>\n-          </CardHeader>\n-          <CardContent>\n-            <div className=\"pl-11 space-y-4\">\n-              {subtopics\n-                .filter(subtopic => subtopic.topic_id === topic.id)\n-                .map((subtopic) => {\n-                  const subtopicLessons = lessons.filter(l => l.subtopic_id === subtopic.id);\n-                  const isEmpty = subtopicLessons.length === 0;\n-\n-                  return (\n-                    <div \n-                      key={subtopic.id} \n-                      className={cn(\n-                        \"rounded-lg border p-4\",\n-                        isEmpty ? \"border-dashed border-muted-foreground/30\" : \"border-primary/10\"\n-                      )}\n-                    >\n-                      {/* Subtopic header */}\n-                      <div className=\"flex items-center justify-between mb-4\">\n-                        <div className=\"flex items-center gap-3\">\n-                          <div className=\"h-7 w-7 rounded-md bg-primary/5 flex items-center justify-center\">\n-                            <BookOpen className=\"h-4 w-4 text-primary/70\" />\n-                          </div>\n-                          <div>\n-                            <h4 className=\"font-medium\">{subtopic.title}</h4>\n-                            <p className=\"text-sm text-muted-foreground\">\n-                              {subtopicLessons.length} Lessons\n-                            </p>\n-                          </div>\n-                        </div>\n-                        <AlertDialog>\n-                          {/* Delete subtopic dialog */}\n-                        </AlertDialog>\n-                      </div>\n-\n-                      {/* Lessons list */}\n-                      {isEmpty ? (\n-                        <div className=\"flex items-center justify-center p-4 text-muted-foreground text-sm\">\n-                          <p>No lessons available</p>\n-                        </div>\n-                      ) : (\n-                        <div className=\"space-y-2\">\n-                          {subtopicLessons.map((lesson) => (\n-                            <div \n-                              key={lesson.id}\n-                              className=\"flex items-center justify-between p-3 rounded-md bg-accent/50 hover:bg-accent transition-colors\"\n-                            >\n-                              {/* Lesson content */}\n-                            </div>\n-                          ))}\n-                        </div>\n-                      )}\n-                    </div>\n-                  );\n-                })}\n-            </div>\n-          </CardContent>\n-        </Card>\n-      ))}\n-    </div>\n-  );\n-};\n-\n-// Main render return\n-export default function LessonManagementPage() {\n-  // ... existing state and handlers ...\n-\n-  // Define ContentHierarchyView inside the component\n-  const ContentHierarchyView = () => {\n-    return (\n-      <div className=\"space-y-6\">\n-        {topics.map((topic: Topic) => (\n-          <Card key={topic.id} className=\"border-l-4 border-l-primary/40 hover:border-l-primary transition-all duration-200\">\n-            <CardHeader className=\"py-4\">\n-              <div className=\"flex items-center justify-between\">\n-                <div className=\"flex items-center gap-3\">\n-                  <div className=\"h-8 w-8 rounded-md bg-primary/10 flex items-center justify-center\">\n-                    <Layers className=\"h-4 w-4 text-primary\" />\n-                  </div>\n-                  <div>\n-                    <h3 className=\"font-semibold\">{topic.title}</h3>\n-                    <p className=\"text-sm text-muted-foreground\">\n-                      {subtopics.filter(s => s.topic_id === topic.id).length} Subtopics\n-                    </p>\n-                  </div>\n-                </div>\n-                <AlertDialog>\n-                  <AlertDialogTrigger asChild>\n-                    <Button \n-                      variant=\"ghost\" \n-                      size=\"sm\"\n-                      className=\"hover:bg-destructive/10 hover:text-destructive\"\n-                    >\n-                      <Trash className=\"h-4 w-4\" />\n-                    </Button>\n-                  </AlertDialogTrigger>\n-                  <AlertDialogContent>\n-                    <AlertDialogHeader>\n-                      <AlertDialogTitle>Delete Topic</AlertDialogTitle>\n-                      <AlertDialogDescription>\n-                        This will permanently delete \"{topic.title}\" and all its contents.\n-                      </AlertDialogDescription>\n-                    </AlertDialogHeader>\n-                    <AlertDialogFooter>\n-                      <AlertDialogCancel>Cancel</AlertDialogCancel>\n-                      <AlertDialogAction onClick={() => handleDeleteTopic(topic.id)}>\n-                        Delete\n-                      </AlertDialogAction>\n-                    </AlertDialogFooter>\n-                  </AlertDialogContent>\n-                </AlertDialog>\n-              </div>\n-            </CardHeader>\n-            <CardContent>\n-              <div className=\"pl-11 space-y-4\">\n-                {subtopics\n-                  .filter(subtopic => subtopic.topic_id === topic.id)\n-                  .map((subtopic) => {\n-                    const subtopicLessons = lessons.filter(l => l.subtopic_id === subtopic.id);\n-                    const isEmpty = subtopicLessons.length === 0;\n-\n-                    return (\n-                      <div \n-                        key={subtopic.id} \n-                        className={cn(\n-                          \"rounded-lg border p-4\",\n-                          isEmpty ? \"border-dashed border-muted-foreground/30\" : \"border-primary/10\"\n-                        )}\n-                      >\n-                        {/* Subtopic header */}\n-                        <div className=\"flex items-center justify-between mb-4\">\n-                          <div className=\"flex items-center gap-3\">\n-                            <div className=\"h-7 w-7 rounded-md bg-primary/5 flex items-center justify-center\">\n-                              <BookOpen className=\"h-4 w-4 text-primary/70\" />\n-                            </div>\n-                            <div>\n-                              <h4 className=\"font-medium\">{subtopic.title}</h4>\n-                              <p className=\"text-sm text-muted-foreground\">\n-                                {subtopicLessons.length} Lessons\n-                              </p>\n-                            </div>\n-                          </div>\n-                          <AlertDialog>\n-                            {/* Delete subtopic dialog */}\n-                          </AlertDialog>\n-                        </div>\n-\n-                        {/* Lessons list */}\n-                        {isEmpty ? (\n-                          <div className=\"flex items-center justify-center p-4 text-muted-foreground text-sm\">\n-                            <p>No lessons available</p>\n-                          </div>\n-                        ) : (\n-                          <div className=\"space-y-2\">\n-                            {subtopicLessons.map((lesson) => (\n-                              <div \n-                                key={lesson.id}\n-                                className=\"flex items-center justify-between p-3 rounded-md bg-accent/50 hover:bg-accent transition-colors\"\n-                              >\n-                                {/* Lesson content */}\n-                              </div>\n-                            ))}\n-                          </div>\n-                        )}\n-                      </div>\n-                    );\n-                  })}\n-              </div>\n-            </CardContent>\n-                              <div className=\"flex items-center gap-2\">\n-                                <div className=\"h-6 w-6 rounded bg-background flex items-center justify-center\">\n-                                  <FileText className=\"h-3 w-3 text-primary\" />\n-                                </div>\n-                                <span className=\"text-sm\">{lesson.title}</span>\n-                              </div>\n-                              <div className=\"flex items-center gap-2\">\n-                                <Button\n-                                  variant=\"ghost\"\n-                                  size=\"sm\"\n-                                  className=\"h-7 hover:bg-primary/10\"\n-                                  onClick={() => handleLessonSelect(lesson.id)}\n-                                >\n-                                  <Pencil className=\"h-3 w-3\" />\n-                                </Button>\n-                                <AlertDialog>\n-                                  <AlertDialogTrigger asChild>\n-                                    <Button \n-                                      variant=\"ghost\" \n-                                      size=\"sm\"\n-                                      className=\"h-7 hover:bg-destructive/10 hover:text-destructive\"\n-                                    >\n-                                      <Trash className=\"h-3 w-3\" />\n-                                    </Button>\n-                                  </AlertDialogTrigger>\n-                                  <AlertDialogContent>\n-                                    <AlertDialogHeader>\n-                                      <AlertDialogTitle>Delete Lesson</AlertDialogTitle>\n-                                      <AlertDialogDescription>\n-                                        This will permanently delete \"{lesson.title}\".\n-                                      </AlertDialogDescription>\n-                                    </AlertDialogHeader>\n-                                    <AlertDialogFooter>\n-                                      <AlertDialogCancel>Cancel</AlertDialogCancel>\n-                                      <AlertDialogAction onClick={() => handleDeleteLesson(lesson.id)}>\n-                                        Delete\n-                                      </AlertDialogAction>\n-                                    </AlertDialogFooter>\n-                                  </AlertDialogContent>\n-                                </AlertDialog>\n-                              </div>\n-                            </div>\n-                          ))}\n-                        </div>\n-                      )}\n-                    </div>\n-                  );\n-                })}\n-            </div>\n-          </CardContent>\n-        </Card>\n-      ))}\n-    </div>\n-  );\n-};\n-\n-// Main render return\n-export default function LessonManagementPage() {\n-  // ... existing state and handlers ...\n-\n-  // Define ContentHierarchyView inside the component to access state and handlers\n-  const ContentHierarchyView = () => {\n-    return (\n-      <div className=\"space-y-6\">\n-        {topics.map((topic) => (\n-          <Card key={topic.id} className=\"border-l-4 border-l-primary/40 hover:border-l-primary transition-all duration-200\">\n-            {/* ... rest of ContentHierarchyView implementation ... */}\n-          </Card>\n-        ))}\n-      </div>\n-    );\n-  };\n-\n-  // Main render return\n-  return (\n-    <div className=\"container mx-auto p-6\">\n-      <div className=\"flex gap-6 h-[calc(100vh-200px)]\">\n-        {/* Left Sidebar */}\n-        <div className={cn(\n-          \"transition-all duration-300 ease-in-out relative\",\n-          isSidebarCollapsed ? \"w-20\" : \"w-80\",\n-          \"flex-shrink-0 group\"\n-        )}>\n-          {/* ... existing sidebar content ... */}\n-        </div>\n-\n-        {/* Main Content Area */}\n-        <div className=\"flex-1\">\n-          {isViewMode && selectedGradeId ? (\n-            <div className=\"p-6\">\n-              <ContentHierarchyView />\n-            </div>\n-          ) : (\n-            // Your existing edit mode content\n-            <div>\n-              {/* Existing edit mode JSX */}\n-            </div>\n-          )}\n-        </div>\n-      </div>\n-    </div>\n-  );\n-}\n\\ No newline at end of file\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739966473902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,9 @@\n import { PostgrestError } from '@supabase/supabase-js';\n import { Question as ContentQuestion } from './types';  // Import the specific type\n import { Trash } from \"lucide-react\";\n import { AnimatePresence, motion } from 'framer-motion';\n+import { FileText } from 'lucide-react';\n \n \n // Update the API endpoint to match your backend route\n const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\n@@ -1930,613 +1931,76 @@\n       {/* Rest of sidebar content */}\n     </Card>\n   </div>\n \n-  // Update the sidebar and card styles\n-  return (\n-      <div className=\"container mx-auto py-8\">\n-        {/* Header */}\n-        <div className=\"flex items-center justify-between mb-2\">\n-          {/* ... header content ... */}\n-          <div className=\"flex items-center gap-4\">\n-            <Link href=\"/super-admin\">\n-              <Button variant=\"outline\" className=\"gap-2\">\n-                <ArrowLeft className=\"h-4 w-4\" />\n-                Back\n-              </Button>\n-            </Link>\n-            <div className=\"flex items-center gap-2\">\n-              <h1 className=\"text-2xl font-bold\">Lesson Management</h1>\n-              <Button\n-                variant=\"ghost\"\n-                size=\"icon\"\n-                onClick={handleRefreshLesson}\n-                className=\"ml-2\"\n-                title=\"Refresh lesson content\"\n-              >\n-                <RefreshCw className=\"h-4 w-4\" />\n-              </Button>\n+  // Add this component for the right plane content view\n+  const ContentHierarchyView = () => {\n+    return (\n+      <div className=\"p-6\">\n+        <Card>\n+          <CardHeader>\n+            <div className=\"flex items-center justify-between\">\n+              <div className=\"space-y-1\">\n+                <CardTitle>Content Structure</CardTitle>\n+                <CardDescription>View and manage your educational content</CardDescription>\n+              </div>\n             </div>\n-            <p className=\"text-sm text-muted-foreground\">Create and manage your educational content</p>\n-          </div>\n-          <div className=\"flex items-center gap-2\">\n-            <Button\n-              variant=\"outline\"\n-              size=\"sm\"\n-              onClick={() => setShowHelpTips(!showHelpTips)}\n-              className=\"gap-2\"\n-            >\n-              {showHelpTips ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n-              {showHelpTips ? 'Hide Tips' : 'Show Tips'}\n-            </Button>\n-          </div>\n-        </div>\n-        \n-        {/* Main content wrapper - Fix the layout here */}\n-        <div className=\"flex gap-6 h-[calc(100vh-200px)]\">\n-          {/* Improved sidebar */}\n-          <div \n-            className={cn(\n-              \"transition-all duration-300 ease-in-out relative\",\n-              isSidebarCollapsed ? \"w-20\" : \"w-80\",\n-              \"flex-shrink-0 group\"\n-            )}\n-            onMouseEnter={() => {\n-              handleSidebarHover(true);\n-              // Immediately expand on mouse enter\n-              if (!isSidebarLocked) {\n-                setIsSidebarCollapsed(false);\n-              }\n-            }}\n-            onMouseLeave={() => {\n-              // Only collapse if not interacting with content\n-              if (!document.activeElement?.closest('.sidebar-content')) {\n-                handleSidebarHover(false);\n-              }\n-            }}\n-            onFocus={() => setIsSidebarCollapsed(false)}\n-          >\n-            <Card className={cn(\n-              \"h-full relative sidebar-content\", // Added sidebar-content class\n-              \"transition-shadow duration-300\",\n-              \"hover:shadow-lg\"\n-            )}>\n-              {/* Lock button - only show after lesson selection */}\n-              {currentLessonId && (\n-                <Button\n-                  variant=\"ghost\"\n-                  size=\"sm\"\n-                  className=\"absolute top-2 right-2 z-10\"\n-                  onClick={() => {\n-                    setIsSidebarLocked(!isSidebarLocked);\n-                    if (!isSidebarLocked) {\n-                      setIsSidebarCollapsed(false);\n-                    }\n-                  }}\n-                >\n-                  {isSidebarLocked ? <Lock className=\"h-4 w-4\" /> : <Unlock className=\"h-4 w-4\" />}\n-                </Button>\n-              )}\n-\n-              {/* Sidebar content with overflow handling */}\n-              <div className={cn(\n-                \"transition-all duration-300 overflow-hidden\",\n-                isSidebarCollapsed ? \"opacity-0\" : \"opacity-100\"\n-              )}>\n-                <Card className=\"h-full\">\n-                  <CardHeader className=\"pb-3\">\n+          </CardHeader>\n+          <CardContent>\n+            <div className=\"space-y-6\">\n+              {topics.map((topic) => (\n+                <Card key={topic.id} className=\"border-l-4 border-l-primary/40 hover:border-l-primary transition-all\">\n+                  <CardHeader className=\"py-4\">\n                     <div className=\"flex items-center justify-between\">\n-                      <CardTitle className=\"text-lg font-semibold\">Content Management</CardTitle>\n-                      <TooltipProvider>\n-                        <Tooltip>\n-                          <TooltipTrigger>\n-                            <HelpCircle className=\"h-4 w-4 text-muted-foreground\" />\n-                          </TooltipTrigger>\n-                          <TooltipContent>\n-                            <p>Manage your educational content here</p>\n-                          </TooltipContent>\n-                        </Tooltip>\n-                      </TooltipProvider>\n-                      </div>\n-                    <CardDescription>Create and manage your lessons</CardDescription>\n-                  </CardHeader>\n-                  <CardContent className=\"space-y-4\">\n-                    {/* View/Edit Mode Toggle */}\n-                    <div className=\"grid grid-cols-2 gap-2 p-1 bg-muted rounded-lg\">\n-                      <Button\n-                        variant={isViewMode ? \"default\" : \"ghost\"}\n-                        size=\"sm\"\n-                        onClick={() => setIsViewMode(true)}\n-                        className=\"w-full\"\n-                      >\n-                        <Eye className=\"h-4 w-4 mr-2\" />\n-                        View\n-                      </Button>\n-                      <Button\n-                        variant={!isViewMode ? \"default\" : \"ghost\"}\n-                        size=\"sm\"\n-                        onClick={() => setIsViewMode(false)}\n-                        className=\"w-full\"\n-                      >\n-                        <Edit className=\"h-4 w-4 mr-2\" />\n-                        Edit\n-                      </Button>\n-                    </div>\n-\n-                    {/* Grade Selection */}\n-                    <div className=\"space-y-2\">\n-                      <div className=\"flex items-center justify-between\">\n-                        <Label htmlFor=\"grade-select\">Grade</Label>\n-                        {isViewMode && (\n-                          <Button variant=\"ghost\" size=\"sm\" onClick={() => setExpandedGrade(expandedGrade ? null : selectedGrade)}>\n-                            {expandedGrade ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n-                          </Button>\n-                        )}\n-                      </div>\n-                      <Select \n-                        value={selectedGradeId || ''}\n-                        onValueChange={handleGradeSelect}\n-                        onOpenChange={(open) => {\n-                          if (open) {\n-                            // Force sidebar to stay open and lock it\n-                            setIsSidebarCollapsed(false);\n-                            setIsSidebarLocked(true);\n-                          }\n-                        }}\n-                      >\n-                        <SelectTrigger \n-                          id=\"grade-select\" \n-                          className=\"w-full\"\n-                          onClick={(e) => {\n-                            e.stopPropagation(); // Prevent event bubbling\n-                            setIsSidebarCollapsed(false);\n-                            setIsSidebarLocked(true);\n-                          }}\n-                        >\n-                          <SelectValue placeholder=\"Select Grade\" />\n-                        </SelectTrigger>\n-                        <SelectContent \n-                          onCloseAutoFocus={(e) => {\n-                            e.preventDefault();\n-                            setIsSidebarLocked(true);\n-                            setIsSidebarCollapsed(false);\n-                          }}\n-                        >\n-                          {grades.map((grade: Grade) => (\n-                            <SelectItem \n-                              key={`grade-${grade.id || 'new'}`} \n-                              value={grade.id || ''}\n-                              onMouseDown={(e) => {\n-                                e.preventDefault();\n-                                e.stopPropagation();\n-                              }}\n-                            >\n-                              <div className=\"flex items-center gap-2\">\n-                                <BookOpen className=\"h-4 w-4 text-primary\" />\n-                                {grade.name}\n-                              </div>\n-                            </SelectItem>\n-                          ))}\n-                        </SelectContent>\n-                      </Select>\n-                      {!isViewMode && (\n-                      <Button \n-                        variant=\"outline\" \n-                        size=\"sm\" \n-                        className=\"w-full gap-2\"\n-                        onClick={() => setModalState({ ...modalState, showAddGrade: false })}\n-                      >\n-                        <Plus className=\"h-4 w-4\" />\n-                        Add New Grade\n-                      </Button>\n-                      )}\n-                    </div>\n-\n-                    {/* Content Tree View in View Mode */}\n-                    {isViewMode && expandedGrade && (\n-                      <div className=\"mt-4 space-y-4 overflow-y-auto max-h-[calc(100vh-300px)]\">\n-                        {topics.map((topic) => (\n-                          <div key={topic.id} className=\"flex items-center justify-between p-4 border rounded-lg mb-4 hover:bg-accent/50 transition-colors\">\n-                            <div className=\"flex-1\" onClick={() => handleTopicSelect(topic.id)}>\n-                              <h3 className=\"font-medium\">{topic.title}</h3>\n-                              {topic.description && (\n-                                <p className=\"text-sm text-muted-foreground mt-1\">{topic.description}</p>\n-                              )}\n-                            </div>\n-                            <AlertDialog>\n-                              <AlertDialogTrigger asChild>\n-                                <Button \n-                                  variant=\"ghost\" \n-                                  size=\"sm\"\n-                                  className=\"hover:bg-destructive/10 hover:text-destructive\"\n-                                  onClick={(e: React.MouseEvent) => e.stopPropagation()}\n-                                >\n-                                  <Trash className=\"h-4 w-4\" />\n-                                </Button>\n-                              </AlertDialogTrigger>\n-                              <AlertDialogContent>\n-                                <AlertDialogHeader>\n-                                  <AlertDialogTitle>Delete Topic</AlertDialogTitle>\n-                                  <AlertDialogDescription>\n-                                    This will permanently delete \"{topic.title}\" and all its subtopics and lessons.\n-                                  </AlertDialogDescription>\n-                                </AlertDialogHeader>\n-                                <AlertDialogFooter>\n-                                  <AlertDialogCancel>Cancel</AlertDialogCancel>\n-                                  <AlertDialogAction onClick={() => handleDeleteTopic(topic.id)}>\n-                                    Delete\n-                                  </AlertDialogAction>\n-                                </AlertDialogFooter>\n-                              </AlertDialogContent>\n-                            </AlertDialog>\n-                          </div>\n-                        ))}\n-                        {subtopics.map((subtopic) => (\n-                          <div key={subtopic.id} className=\"flex items-center justify-between p-4 border rounded-lg mb-4 hover:bg-accent/50 transition-colors\">\n-                            <div className=\"flex-1\" onClick={() => handleSubtopicSelect(subtopic.id)}>\n-                              <h3 className=\"font-medium\">{subtopic.title}</h3>\n-                              {subtopic.description && (\n-                                <p className=\"text-sm text-muted-foreground mt-1\">{subtopic.description}</p>\n-                              )}\n-                            </div>\n-                            <AlertDialog>\n-                              <AlertDialogTrigger asChild>\n-                                <Button \n-                                  variant=\"ghost\" \n-                                  size=\"sm\"\n-                                  className=\"hover:bg-destructive/10 hover:text-destructive\"\n-                                  onClick={(e: React.MouseEvent) => e.stopPropagation()}\n-                                >\n-                                  <Trash className=\"h-4 w-4\" />\n-                                </Button>\n-                              </AlertDialogTrigger>\n-                              <AlertDialogContent>\n-                                <AlertDialogHeader>\n-                                  <AlertDialogTitle>Delete Subtopic</AlertDialogTitle>\n-                                  <AlertDialogDescription>\n-                                    This will permanently delete \"{subtopic.title}\" and all its lessons.\n-                                  </AlertDialogDescription>\n-                                </AlertDialogHeader>\n-                                <AlertDialogFooter>\n-                                  <AlertDialogCancel>Cancel</AlertDialogCancel>\n-                                  <AlertDialogAction onClick={() => handleDeleteSubtopic(subtopic.id)}>\n-                                    Delete\n-                                  </AlertDialogAction>\n-                                </AlertDialogFooter>\n-                              </AlertDialogContent>\n-                            </AlertDialog>\n-                          </div>\n-                        ))}\n-                        {lessons.map((lesson) => (\n-                          <div key={lesson.id} className=\"flex items-center justify-between p-4 border rounded-lg mb-4 hover:bg-accent/50 transition-colors\">\n-                            <div className=\"flex-1\" onClick={() => handleLessonSelect(lesson.id)}>\n-                              <h3 className=\"font-medium\">{lesson.title}</h3>\n-                              {lesson.description && (\n-                                <p className=\"text-sm text-muted-foreground mt-1\">{lesson.description}</p>\n-                              )}\n-                            </div>\n-                            <AlertDialog>\n-                              <AlertDialogTrigger asChild>\n-                                <Button \n-                                  variant=\"ghost\" \n-                                  size=\"sm\"\n-                                  className=\"hover:bg-destructive/10 hover:text-destructive\"\n-                                  onClick={(e: React.MouseEvent) => e.stopPropagation()}\n-                                >\n-                                  <Trash className=\"h-4 w-4\" />\n-                                </Button>\n-                              </AlertDialogTrigger>\n-                              <AlertDialogContent>\n-                                <AlertDialogHeader>\n-                                  <AlertDialogTitle>Delete Lesson</AlertDialogTitle>\n-                                  <AlertDialogDescription>\n-                                    This will permanently delete \"{lesson.title}\".\n-                                  </AlertDialogDescription>\n-                                </AlertDialogHeader>\n-                                <AlertDialogFooter>\n-                                  <AlertDialogCancel>Cancel</AlertDialogCancel>\n-                                  <AlertDialogAction onClick={() => handleDeleteLesson(lesson.id)}>\n-                                    Delete\n-                                  </AlertDialogAction>\n-                                </AlertDialogFooter>\n-                              </AlertDialogContent>\n-                            </AlertDialog>\n-                          </div>\n-                        ))}\n-                      </div>\n-                    )}\n-\n-                    {/* Regular Edit Mode Content */}\n-                    {!isViewMode && (\n-                      <>\n-                        {/* Existing Topic, Subtopic, and Lesson Selection UI */}\n-                      {/* Topic Selection */}\n-                        {selectedGradeId && (\n-                      <div className=\"space-y-2\">\n-                        <div className=\"flex items-center justify-between\">\n-                        <Label htmlFor=\"topic-select\">Topic</Label>\n+                      <div className=\"flex items-center gap-2\">\n+                        <Layers className=\"h-5 w-5 text-primary\" />\n+                        <div>\n+                          <h3 className=\"font-semibold\">{topic.title}</h3>\n+                          {topic.description && (\n+                            <p className=\"text-sm text-muted-foreground\">{topic.description}</p>\n+                          )}\n                         </div>\n-                        <Select \n-                              value={selectedTopicId || ''} \n-                              onValueChange={handleTopicSelect}\n-                        >\n-                          <SelectTrigger id=\"topic-select\" className=\"w-full\">\n-                            <SelectValue placeholder=\"Select Topic\" />\n-                          </SelectTrigger>\n-                          <SelectContent>\n-                                {topics.map((topic: Topic) => (\n-                                  <SelectItem \n-                                    key={`topic-${topic.id || 'new'}`} \n-                                    value={topic.id || ''}\n-                                  >\n-                                  <div className=\"flex items-center gap-2\">\n-                                  <Layers className=\"h-4 w-4 text-primary\" />\n-                                    {topic.title}\n-                                  </div>\n-                                </SelectItem>\n-                              ))}\n-                          </SelectContent>\n-                        </Select>\n-                        <Button \n-                          variant=\"outline\" \n-                          size=\"sm\" \n-                          className=\"w-full gap-2\"\n-                          onClick={() => setModalState({ ...modalState, showAddTopic: true })}\n-                        >\n-                          <Plus className=\"h-4 w-4\" />\n-                          Add New Topic\n-                        </Button>\n                       </div>\n-                    )}\n-\n-                    {/* Subtopic Selection */}\n-                        {selectedTopicId && (\n-                      <div className=\"space-y-2\">\n-                        <div className=\"flex items-center justify-between\">\n-                        <Label htmlFor=\"subtopic-select\">Subtopic</Label>\n-                        </div>\n-                        <Select \n-                              value={selectedSubtopicId || ''} \n-                              onValueChange={handleSubtopicSelect}\n-                        >\n-                          <SelectTrigger id=\"subtopic-select\" className=\"w-full\">\n-                            <SelectValue placeholder=\"Select Subtopic\" />\n-                          </SelectTrigger>\n-                          <SelectContent>\n-                                {subtopics\n-                                  .filter(subtopic => subtopic.id)\n-                                  .map((subtopic, index) => (\n-                                    <SelectItem \n-                                      key={subtopic.id || `subtopic-${index}`}\n-                                      value={subtopic.id || ''}\n-                                    >\n-                                      {subtopic.title || 'Untitled Subtopic'}\n-                                    </SelectItem>\n-                                  ))}\n-                          </SelectContent>\n-                        </Select>\n-                        {!isViewMode && (\n+                      <AlertDialog>\n+                        <AlertDialogTrigger asChild>\n                           <Button \n-                            variant=\"outline\" \n-                            size=\"sm\" \n-                            className=\"w-full gap-2\"\n-                            onClick={() => setModalState({ ...modalState, showAddSubtopic: true })}\n+                            variant=\"ghost\" \n+                            size=\"sm\"\n+                            className=\"hover:bg-destructive/10 hover:text-destructive\"\n                           >\n-                            <Plus className=\"h-4 w-4\" />\n-                            Add New Subtopic\n+                            <Trash className=\"h-4 w-4\" />\n                           </Button>\n-                        )}\n-                      </div>\n-                    )}\n-\n-                    {/* Lesson Selection */}\n-                        {selectedSubtopicId && (\n-                      <div className=\"space-y-2\">\n-                        <div className=\"flex items-center justify-between\">\n-                          <Label htmlFor=\"lesson-select\">Lesson</Label>\n-                        </div>\n-                          <Select \n-                            value={currentLessonId || ''} \n-                            onValueChange={handleLessonSelect}\n-                            onOpenChange={(open) => {\n-                              setIsDropdownOpen(open);\n-                              if (open) {\n-                                setIsSidebarCollapsed(false);\n-                                setIsSidebarLocked(true);\n-                              } else {\n-                                // Small delay before unlocking to prevent immediate collapse\n-                                setTimeout(() => {\n-                                  setIsSidebarLocked(false);\n-                                }, 100);\n-                              }\n-                            }}\n-                          >\n-                            <SelectTrigger \n-                              id=\"lesson-select\" \n-                              className=\"w-full\"\n-                              onClick={(e) => {\n-                                e.stopPropagation();\n-                                setIsSidebarCollapsed(false);\n-                                setIsSidebarLocked(true);\n-                              }}\n-                            >\n-                              <SelectValue placeholder=\"Select Lesson\" />\n-                            </SelectTrigger>\n-                            <SelectContent>\n-                              {lessons\n-                                .filter((lesson): lesson is Lesson => lesson !== undefined && lesson !== null)\n-                                .map((lesson: Lesson) => (\n-                                  <SelectItem \n-                                    key={`lesson-${lesson.id || 'new'}`} \n-                                    value={lesson.id || ''}\n-                                  >\n-                                    <div className=\"flex items-center gap-2\">\n-                                      <BookOpen className=\"h-4 w-4 text-primary\" />\n-                                      {lesson.title || 'Untitled Lesson'}\n-                                    </div>\n-                                  </SelectItem>\n-                                ))}\n-                            </SelectContent>\n-                          </Select>\n-                    <Button \n-                            variant=\"outline\" \n-                            size=\"sm\" \n-                            className=\"w-full gap-2\"\n-                        onClick={() => setModalState({ ...modalState, showAddLesson: true })}\n-                          >\n-                            <Plus className=\"h-4 w-4\" />\n-                            Add New Lesson\n-                    </Button>\n-                      </div>\n-                        )}\n-                      </>\n-                    )}\n-                  </CardContent>\n-                </Card>\n-              </div>\n-\n-              {/* Collapsed view */}\n-              {isSidebarCollapsed && (\n-                <div className=\"absolute inset-0 flex flex-col items-center pt-12 gap-4\">\n-                  <BookOpen className=\"h-6 w-6 text-muted-foreground\" />\n-                  <div className=\"w-px h-full bg-border\" />\n-                </div>\n-              )}\n-            </Card>\n-          </div>\n-        \n-\n-          {/* Right Content Area */}\n-          <div className=\"flex-1 overflow-y-auto\">\n-            {isNavigating ? (\n-              <div className=\"flex items-center justify-center h-[400px]\">\n-                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n-                <span className=\"ml-3\">Loading...</span>\n-              </div>\n-            ) : (\n-              <>\n-                {!selectedGradeId ? (\n-                  // Question Types Display Section\n-                  <div className=\"space-y-6\">\n-                    <Card>\n-                      <CardHeader>\n-                        <div className=\"flex items-center justify-between\">\n-                          <div>\n-                            <CardTitle className=\"text-xl font-semibold\">Available Question Types</CardTitle>\n-                            <CardDescription>Browse through different question formats and examples</CardDescription>\n-                          </div>\n-                          <TooltipProvider>\n-                            <Tooltip>\n-                              <TooltipTrigger>\n-                                <HelpCircle className=\"h-5 w-5 text-muted-foreground\" />\n-                              </TooltipTrigger>\n-                              <TooltipContent>\n-                                <p>Click on each type to see detailed examples</p>\n-                              </TooltipContent>\n-                            </Tooltip>\n-                          </TooltipProvider>\n-                        </div>\n-                      </CardHeader>\n-                      <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n-                        {Object.entries(QUESTION_TYPES).map(([type, details]) => (\n-                          <Card key={type} className=\"cursor-pointer hover:bg-accent/50 transition-colors\">\n-                            <CardHeader className=\"p-4\">\n-                              <div className=\"flex items-center justify-between mb-2\">\n-                                <Badge variant=\"outline\" className=\"bg-primary/5 text-lg\">\n-                                  {details.label}\n-                                </Badge>\n-                              </div>\n-                              <CardDescription className=\"text-sm\">\n-                                {details.description || 'No description available'}\n-                              </CardDescription>\n-                              <div className=\"mt-4\">\n-                                <div className=\"text-sm font-medium mb-2\">Example:</div>\n-                                <div className=\"p-3 rounded-md bg-muted/50 text-sm\">\n-                                  {type === 'multiple-choice' && (\n-                                    <>\n-                                      <div className=\"font-medium mb-2\">Q: What is the capital of France?</div>\n-                                      <div className=\"space-y-1 pl-4\">\n-                                        <div>A) Paris</div>\n-                                        <div>B) London</div>\n-                                        <div>C) Berlin</div>\n-                                        <div>D) Madrid</div>\n-                                      </div>\n-                                    </>\n-                                  )}\n-                                  {type === 'fill-in-blank' && (\n-                                    <div className=\"space-y-2\">\n-                                      <div>Complete the sentence:</div>\n-                                      <div>The sun rises in the <span className=\"bg-primary/20 px-2 rounded\">_____</span> and sets in the <span className=\"bg-primary/20 px-2 rounded\">_____</span>.</div>\n-                                    </div>\n-                                  )}\n-                                  {type === 'true-false' && (\n-                                    <div className=\"space-y-2\">\n-                                      <div className=\"font-medium\">Statement:</div>\n-                                      <div>The Earth is flat.</div>\n-                                      <div className=\"mt-2\">\n-                                        <Badge variant=\"outline\" className=\"mr-2\">True</Badge>\n-                                        <Badge variant=\"outline\">False</Badge>\n-                                      </div>\n-                                    </div>\n-                                  )}\n-                                  {type === 'matching' && (\n-                                    <div className=\"space-y-2\">\n-                                      <div className=\"font-medium mb-2\">Match the countries with their capitals:</div>\n-                                      <div className=\"grid grid-cols-2 gap-4\">\n-                                        <div>\n-                                          1. France<br />\n-                                          2. Germany<br />\n-                                          3. Spain\n-                                        </div>\n-                                        <div>\n-                                          • Berlin<br />\n-                                          • Paris<br />\n-                                          • Madrid\n-                                        </div>\n-                                      </div>\n-                                    </div>\n-                                  )}\n-                                  {type === 'ordering' && (\n-                                    <div className=\"space-y-2\">\n-                                      <div className=\"font-medium mb-2\">Arrange in chronological order:</div>\n-                                      <div className=\"space-y-1\">\n-                                        <Badge variant=\"outline\" className=\"mr-2\">1</Badge>World War II<br />\n-                                        <Badge variant=\"outline\" className=\"mr-2\">2</Badge>Industrial Revolution<br />\n-                                        <Badge variant=\"outline\" className=\"mr-2\">3</Badge>Renaissance\n-                                      </div>\n-                                    </div>\n-                                  )}\n-                                  {type === 'short-answer' && (\n-                                    <div className=\"space-y-2\">\n-                                      <div className=\"font-medium\">Question:</div>\n-                                      <div>Explain the water cycle in 2-3 sentences.</div>\n-                                      <div className=\"mt-2 p-2 border border-dashed rounded-md border-primary/30\">\n-                                        Answer space\n-                                      </div>\n-                                    </div>\n-                                  )}\n-                                </div>\n-                              </div>\n-                            </CardHeader>\n-                          </Card>\n-                        ))}\n-                      </CardContent>\n-                    </Card>\n-                  </div>\n-                ) : isViewMode ? (\n-                  <div className=\"space-y-6\">\n-                    {selectedGradeId ? (\n-                      <div className=\"grid grid-cols-1 gap-6\">\n-                        {topics.map((topic) => (\n-                          <Card key={topic.id} className=\"border-l-4 border-l-primary\">\n-                            <CardHeader>\n-                              <div className=\"flex items-center justify-between\">\n-                                <h3 className=\"text-lg font-semibold\">{topic.title}</h3>\n-                              </div>\n-                            </CardHeader>\n-                            <CardContent>\n-                              <div className=\"space-y-4\">\n-                                {subtopics\n+                        </AlertDialogTrigger>\n+                        <AlertDialogContent>\n+                          <AlertDialogHeader>\n+                            <AlertDialogTitle>Delete Topic</AlertDialogTitle>\n+                            <AlertDialogDescription>\n+                              This will permanently delete \"{topic.title}\" and all its content.\n+                            </AlertDialogDescription>\n+                          </AlertDialogHeader>\n+                          <AlertDialogFooter>\n+                            <AlertDialogCancel>Cancel</AlertDialogCancel>\n+                            <AlertDialogAction onClick={() => handleDeleteTopic(topic.id)}>\n+                              Delete\n+                            </AlertDialogAction>\n+                          </AlertDialogFooter>\n+                        </AlertDialogContent>\n+                      </AlertDialog>\n+                    </div>\n+                  </CardHeader>\n+                  <CardContent className=\"pt-0\">\n+                    {/* Subtopics */}\n+                    <div className=\"ml-6 space-y-4\">\n+                      {subtopics\n+                        .filter(sub => sub.topic_id === topic.id)\n+                        .map((subtopic) => {\n+                          const subtopicLessons = lessons.filter(l => l.subtopic_id === subtopic.id);\n+                          const isEmpty = subtopicLessons.length === 0;\n+                          \n+                          return (\n+                            <Card key={subtopic.id} className={cn(\n+                              \"border-l-2\",\n+                              isEmpty ? \"border-l-yellow-500/40\" : \"border-l-primary/40\",\n                                   .filter(subtopic => subtopic.topic_id === topic.id)\n                                   .map((subtopic, index) => (\n                                     <div key={subtopic.id || `subtopic-${index}`} className=\"border-l-2 pl-4\">\n                                       <h4 className=\"text-md font-medium mb-2\">{subtopic.name || 'Untitled Subtopic'}</h4>\n"
                },
                {
                    "date": 1739966486635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1999,540 +1999,121 @@\n                           return (\n                             <Card key={subtopic.id} className={cn(\n                               \"border-l-2\",\n                               isEmpty ? \"border-l-yellow-500/40\" : \"border-l-primary/40\",\n-                                  .filter(subtopic => subtopic.topic_id === topic.id)\n-                                  .map((subtopic, index) => (\n-                                    <div key={subtopic.id || `subtopic-${index}`} className=\"border-l-2 pl-4\">\n-                                      <h4 className=\"text-md font-medium mb-2\">{subtopic.name || 'Untitled Subtopic'}</h4>\n-                                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n-                                        {lessons\n-                                          .filter(lesson => lesson.subtopic_id === subtopic.id)\n-                                          .map((lesson) => (\n-                                            <Card \n-                                              key={lesson.id} \n-                                              className={cn(\n-                                                \"cursor-pointer transition-all duration-200\",\n-                                                \"hover:shadow-md hover:translate-y-[-2px]\",\n-                                                \"hover:bg-accent/50 hover:border-primary/50\",\n-                                                \"active:translate-y-[0px]\",\n-                                                currentLessonId === lesson.id && \"border-primary bg-accent/50 shadow-md\",\n-                                                \"group\" // Enable group hover effects\n-                                              )}\n-                                              onClick={() => handleLessonSelect(lesson.id)}\n-                                            >\n-                                              <CardHeader className=\"p-4\">\n-                                                <div className=\"flex flex-col gap-2\">\n-                                                  <div className=\"flex items-center justify-between\">\n-                                                    <div className=\"flex items-center gap-2\">\n-                                                      <BookOpen className={cn(\n-                                                        \"h-4 w-4 text-primary\",\n-                                                        \"transition-transform duration-200\",\n-                                                        \"group-hover:scale-110\"\n-                                                      )} />\n-                                                      <span className=\"font-medium\">{lesson.title}</span>\n-                                                    </div>\n-                                                    <Button\n-                                                      variant=\"outline\"\n-                                                      size=\"sm\"\n-                                                      className={cn(\n-                                                        \"opacity-0 group-hover:opacity-100\",\n-                                                        \"transition-all duration-200\",\n-                                                        \"hover:bg-primary hover:text-primary-foreground\"\n-                                                      )}\n-                                                      disabled={!lesson.content || currentLessonId !== lesson.id}\n-                                                      onClick={(e: React.MouseEvent) => {\n-                                                        e.stopPropagation();\n-                                                        window.location.href = `/teacher/lessons/${lesson.id}`;\n-                                                      }}\n-                                                    >\n-                                                      Start Lesson\n-                                                    </Button>\n-                                                  </div>\n-                                                  <div className=\"flex items-center gap-2\">\n-                                                    <Badge variant=\"outline\" className={cn(\n-                                                      \"bg-primary/5\",\n-                                                      \"transition-colors duration-200\",\n-                                                      \"group-hover:bg-primary/10\"\n-                                                    )}>\n-                                                      {lesson.questions?.length || 0} Questions\n-                                                    </Badge>\n-                                                    <Badge variant=\"outline\" className={cn(\n-                                                      \"bg-primary/5\",\n-                                                      \"transition-colors duration-200\",\n-                                                      \"group-hover:bg-primary/10\"\n-                                                    )}>\n-                                                      {lesson.activities?.length || 0} Activities\n-                                                    </Badge>\n-                                                  </div>\n-                                                </div>\n-                                              </CardHeader>\n-                                            </Card>\n-                                          ))}\n-                                      </div>\n+                              \"hover:border-l-primary transition-all\"\n+                            )}>\n+                              <CardHeader className=\"py-3\">\n+                                <div className=\"flex items-center justify-between\">\n+                                  <div className=\"flex items-center gap-2\">\n+                                    <BookOpen className=\"h-4 w-4 text-primary\" />\n+                                    <div>\n+                                      <h4 className=\"font-medium\">{subtopic.title}</h4>\n+                                      {isEmpty && (\n+                                        <Badge variant=\"outline\" className=\"text-yellow-500 border-yellow-500/20\">\n+                                          Empty\n+                                        </Badge>\n+                                      )}\n                                     </div>\n-                                  ))}\n-                              </div>\n-                            </CardContent>\n-                          </Card>\n-                        ))}\n-                      </div>\n-                    ) : (\n-                      <div className=\"text-center py-20\">\n-                        <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n-                        <h3 className=\"text-lg font-medium\">Select a Grade</h3>\n-                        <p className=\"text-sm text-muted-foreground\">\n-                          Choose a grade from the left panel to start managing content\n-                        </p>\n-                      </div>\n-                    )}\n-                  </div>\n-                ) : (\n-                  // Edit Mode Content\n-                  <div className=\"space-y-4\">\n-                    {/* Lesson Title */}\n-                    <Card>\n-                      <CardHeader>\n-                        <div className=\"flex items-center justify-between mb-4\">\n-                          <h2 className=\"text-2xl font-bold\">Lesson Content</h2>\n-                                                    <Button\n-                                                      variant=\"outline\"\n-                                                      size=\"sm\"\n-                            onClick={() => setIsContentEditorOpen(true)}\n-                          >\n-                            <Pencil className=\"h-4 w-4 mr-2\" />\n-                            Edit Content\n-                          </Button>\n-                        </div>\n-                      </CardHeader>\n-                      <CardContent className=\"space-y-4\">\n-                        {/* Lesson Title */}\n-                        <div className=\"flex items-center justify-between\">\n-                          <div className=\"space-y-1\">\n-                            <Label>Lesson Title</Label>\n-                            <InlineEdit\n-                              value={lessonTitle}\n-                              onSave={async (newTitle) => {\n-                                setLessonTitle(newTitle);\n-                                await handleSaveLesson();\n-                              }}\n-                              isEditing={isEditingTitle}\n-                              setIsEditing={setIsEditingTitle}\n-                              placeholder=\"Enter lesson title\"\n-                              className=\"text-lg font-medium\"\n-                            />\n-                          </div>\n-                        </div>\n-\n-                        {/* Content Editor and Display */}\n-                        <div className=\"space-y-4\">\n-                          {isContentEditorOpen ? (\n-                            <div className=\"border rounded-lg p-4\">\n-                              <div className=\"mb-4\">\n-                                <Label>Content Heading</Label>\n-                                <InlineEdit\n-                                  value={contentHeading}\n-                                  onSave={(newHeading) => setContentHeading(newHeading)}\n-                                  isEditing={isEditingHeading}\n-                                  setIsEditing={setIsEditingHeading}\n-                                  placeholder=\"Add content heading\"\n-                                  className=\"text-base text-muted-foreground\"\n-                                />\n-                              </div>\n-                              <RichTextEditor\n-                                value={lessonContent}\n-                                onChange={setLessonContent}\n-                                onSave={async (content) => {\n-                                  await handleContentSave(content);\n-                                  setIsContentEditorOpen(false);\n-                                }}\n-                                placeholder=\"Add lesson content here...\"\n-                              />\n-                            </div>\n-                          ) : lessonContent ? (\n-                            <div className=\"prose prose-sm max-w-none\">\n-                              {contentHeading && (\n-                                <h3 className=\"text-lg font-semibold mb-2\">{contentHeading}</h3>\n-                              )}\n-                              <div dangerouslySetInnerHTML={{ __html: lessonContent }} />\n-                            </div>\n-                          ) : (\n-                            <div className=\"text-center py-8 text-muted-foreground\">\n-                              Click 'Edit Content' to add lesson content\n-                            </div>\n-                          )}\n-                        </div>\n-                      </CardContent>\n-                    </Card>\n-\n-                    {/* Tabs */}\n-                    <Tabs defaultValue=\"questions\" className=\"mt-6\">\n-                    <TabsList className=\"grid w-full grid-cols-2\">\n-                        <TabsTrigger value=\"questions\">\n-                          <MessageSquare className=\"h-4 w-4 mr-2\" />\n-                        Questions\n-                      </TabsTrigger>\n-                        <TabsTrigger value=\"activities\">\n-                          <ActivityIcon className=\"h-4 w-4 mr-2\" />\n-                        Activities\n-                      </TabsTrigger>\n-                    </TabsList>\n-\n-                      {/* Questions Tab */}\n-                      <TabsContent value=\"questions\" className=\"space-y-4\">\n-                      <CardHeader>\n-                          <CardDescription>Add and manage questions for this lesson</CardDescription>\n-                      </CardHeader>\n-                        {questions.map((question, index) => (\n-                          <Card key={index} className={cn(\n-                            \"relative border-l-4 transition-colors duration-200\",\n-                            expandedQuestion === index ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\n-                          )}>\n-                            <CardHeader className=\"pb-3\">\n-                              <div className=\"flex items-center justify-between gap-4\">\n-                                <div className=\"flex items-center gap-3 min-w-0 flex-1\">\n-                                  <div className=\"flex items-center gap-2 flex-shrink-0\">\n-                                    <span className=\"px-2 py-1 bg-primary/10 rounded-md text-sm font-semibold text-primary whitespace-nowrap\">\n-                                      Q {index + 1}\n-                                    </span>\n-                                    <Badge variant=\"outline\" className=\"whitespace-nowrap\">\n-                                      {QUESTION_TYPES[question.type as keyof typeof QUESTION_TYPES]?.label || question.type}\n-                                    </Badge>\n-                                    {question.isDraft && (\n-                                      <Badge variant=\"secondary\" className=\"whitespace-nowrap\">Draft</Badge>\n-                                )}\n                                   </div>\n-                                      {expandedQuestion !== index && (\n-                                        <div className=\"text-sm text-muted-foreground truncate\">\n-                                          {question.title || 'No question text'} - {question.data?.content || 'No question texts'}\n-                                        </div>\n-                                      )}\n-                                    </div>\n-                                    <div className=\"flex items-center gap-2 flex-shrink-0\">\n-                                      <Button\n-                                        variant=\"ghost\"\n+                                  <AlertDialog>\n+                                    <AlertDialogTrigger asChild>\n+                                      <Button \n+                                        variant=\"ghost\" \n                                         size=\"sm\"\n-                                        onClick={() => handleQuestionExpand(index)}\n+                                        className=\"hover:bg-destructive/10 hover:text-destructive\"\n                                       >\n-                                        {expandedQuestion === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n+                                        <Trash className=\"h-4 w-4\" />\n                                       </Button>\n-                                      <Button\n-                                        variant=\"ghost\"\n-                                        size=\"sm\"\n-                                        onClick={() => handleRemoveQuestion(index)}\n+                                    </AlertDialogTrigger>\n+                                    <AlertDialogContent>\n+                                      <AlertDialogHeader>\n+                                        <AlertDialogTitle>Delete Subtopic</AlertDialogTitle>\n+                                        <AlertDialogDescription>\n+                                          This will permanently delete \"{subtopic.title}\" and all its lessons.\n+                                        </AlertDialogDescription>\n+                                      </AlertDialogHeader>\n+                                      <AlertDialogFooter>\n+                                        <AlertDialogCancel>Cancel</AlertDialogCancel>\n+                                        <AlertDialogAction onClick={() => handleDeleteSubtopic(subtopic.id)}>\n+                                          Delete\n+                                        </AlertDialogAction>\n+                                      </AlertDialogFooter>\n+                                    </AlertDialogContent>\n+                                  </AlertDialog>\n+                                </div>\n+                              </CardHeader>\n+                              {subtopicLessons.length > 0 && (\n+                                <CardContent className=\"py-0 pl-6\">\n+                                  <div className=\"space-y-2\">\n+                                    {subtopicLessons.map((lesson) => (\n+                                      <div key={lesson.id} \n+                                        className=\"flex items-center justify-between p-2 rounded-md hover:bg-accent/50 transition-colors\"\n                                       >\n-                                        <Trash2 className=\"h-4 w-4 text-destructive\" />\n-                                      </Button>\n-                                    </div>\n-                                  </div>\n-                                </CardHeader>\n-                                {expandedQuestion === index && (\n-                                  <CardContent>\n-                                    <QuestionForm\n-                                      key={index}\n-                                      question={{ \n-                                        ...question, \n-                                        lesson_id: currentLessonId || '',\n-                                        type: isValidQuestionType(question.type) ? question.type : 'speaking',\n-                                        data: {\n-                                          prompt: question.data?.prompt ?? '',\n-                                          teacher_script: question.data?.teacher_script ?? '',\n-                                          followup_prompt: question.data?.followup_prompt ?? [],\n-                                          sample_answer: question.data?.sample_answer ?? '',\n-                                          \n-                                        } \n-                                      }}\n-                                      index={index}\n-                                      onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\n-                                        await handleUpdateQuestion(index, {\n-                                          ...updatedQuestion,\n-                                          data: {\n-                                            prompt: updatedQuestion.data?.prompt ?? '',\n-                                            teacher_script: updatedQuestion.data?.teacher_script ?? '',\n-                                            followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\n-                                            sample_answer: updatedQuestion.data?.sample_answer ?? '',\n-                                            metadata: updatedQuestion.metadata ?? {},\n-                                            },\n-                                            correct_answer: updatedQuestion.correct_answer ?? '',\n-                                            content: updatedQuestion.content ?? ''  // Add default value\n-                                        });\n-                                      }}\n-                                      onRemove={handleRemoveQuestion}\n-                                      onAddExercisePrompt={handleAddExercisePrompt}\n-                                      onRemoveExercisePrompt={handleRemoveExercisePrompt}\n-                                      onExercisePromptChange={handleExercisePromptChange}\n-                                    /><Button \n-                                    size=\"sm\"\n-                                    variant=\"outline\"\n-                                    onClick={() => handleSaveQuestion(question, index)}\n-                                    className=\"ml-2\"\n-                                  >\n-                                    {questionSaveStatuses.find(s => s.id === question.id)?.status === 'saving' ? (\n-                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n-                                    ) : (\n-                                      <Save className=\"h-4 w-4 mr-2\" />\n-                                    )}\n-                                    Save Question\n-                                                    </Button>\n-                                    {/* Exercise Prompts with Save Buttons */}\n-                                    {question.exercisePrompts?.map((prompt, promptIndex) => (\n-                                      <div key={`${question.id}-prompt-${promptIndex}`} className=\"mt-4\"> {/* Updated key */}\n-                                        <div className=\"flex items-center justify-between mb-2\">\n-                                          <h4 className=\"text-sm font-medium\">Exercise Prompt {promptIndex + 1}</h4>\n-                                          <div className=\"flex items-center gap-2\">\n-                                            <TooltipProvider>\n-                                              <Tooltip>\n-                                                <TooltipTrigger asChild>\n-                                                  <Button\n-                                                    size=\"sm\"\n-                                                    variant=\"outline\"\n-                                                    onClick={() => handleSavePrompt(question.id, prompt, promptIndex)}\n-                                                    disabled={promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving'}\n-                                                  >\n-                                                    {promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving' ? (\n-                                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n-                                                    ) : (\n-                                                      <Save className=\"h-4 w-4 mr-2\" />\n-                                                    )}\n-                                                    Save Prompt\n-                                                  </Button>\n-                                                </TooltipTrigger>\n-                                                <TooltipContent>\n-                                                  {`Status: ${promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}`}\n-                                                </TooltipContent>\n-                                              </Tooltip>\n-                                            </TooltipProvider>\n-                                            <Badge variant={\n-                                              promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saved'\n-                                                ? 'secondary'\n-                                                : promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'error'\n-                                                ? 'destructive'\n-                                                : 'default'\n-                                            }>\n-                                              {promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}\n-                                            </Badge>\n-                                                  </div>\n+                                        <div className=\"flex items-center gap-2\">\n+                                          <FileText className=\"h-4 w-4 text-muted-foreground\" />\n+                                          <span className=\"text-sm\">{lesson.title}</span>\n                                         </div>\n-                                        <ExercisePromptCard\n-                                          key={prompt.id} // Add a unique key here\n-                                          prompt={prompt}\n-                                          promptIndex={promptIndex}\n-                                          onRemove={() => handleRemoveExercisePrompt(index, promptIndex)}\n-                                          onUpdate={(updatedPrompt: ExercisePrompt) => {\n-                                            // Prevent duplicate updates\n-                                            if (updatedPrompt.id === prompt.id) {\n-                                              handleExercisePromptChange(index, promptIndex, updatedPrompt);\n-                                            }\n-                                          }}\n-                                        />\n+                                        <AlertDialog>\n+                                          <AlertDialogTrigger asChild>\n+                                            <Button \n+                                              variant=\"ghost\" \n+                                              size=\"sm\"\n+                                              className=\"hover:bg-destructive/10 hover:text-destructive\"\n+                                            >\n+                                              <Trash className=\"h-4 w-4\" />\n+                                            </Button>\n+                                          </AlertDialogTrigger>\n+                                          <AlertDialogContent>\n+                                            <AlertDialogHeader>\n+                                              <AlertDialogTitle>Delete Lesson</AlertDialogTitle>\n+                                              <AlertDialogDescription>\n+                                                This will permanently delete \"{lesson.title}\".\n+                                              </AlertDialogDescription>\n+                                            </AlertDialogHeader>\n+                                            <AlertDialogFooter>\n+                                              <AlertDialogCancel>Cancel</AlertDialogCancel>\n+                                              <AlertDialogAction onClick={() => handleDeleteLesson(lesson.id)}>\n+                                                Delete\n+                                              </AlertDialogAction>\n+                                            </AlertDialogFooter>\n+                                          </AlertDialogContent>\n+                                        </AlertDialog>\n                                       </div>\n                                     ))}\n-                                  </CardContent>\n-                                )}\n-                              </Card>\n-                            ))}\n-\n-                            {/* Add Question Button */}\n-                            <div className=\"flex items-center justify-between\">\n-                              <QuestionTypeSelect \n-                                value={selectedQuestionType} \n-                                onChange={handleQuestionTypeChange}\n-                              />\n-                                        <Button\n-                                          onClick={handleAddQuestion}\n-                                          disabled={!selectedQuestionType}\n-                                        >\n-                                <Plus className=\"h-4 w-4 mr-2\" />\n-                                          Add Question\n-                                        </Button>\n-                                      </div>\n-                      </TabsContent>\n-\n-                      {/* Activities Tab */}\n-                      <TabsContent value=\"activities\" className=\"space-y-4\">\n-                      <CardHeader>\n-                          <CardDescription>Add and manage activities for this lesson</CardDescription>\n-                      </CardHeader>\n-                        {activities.map((activity, index) => (\n-                          <Card key={index}>\n-                            <CardHeader className=\"pb-3\">\n-                              <div className=\"flex items-center justify-between\">\n-                                  <div className=\"flex items-center gap-2\">\n-                                  <Badge variant=\"outline\">Activity {index + 1}</Badge>\n                                   </div>\n-                                <div className=\"flex items-center gap-2\">\n-                                  <Button\n-                                    variant=\"ghost\"\n-                                    size=\"sm\"\n-                                    onClick={() => handleActivityExpand(index)}\n-                                  >\n-                                    {expandedActivity === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n-                                  </Button>\n-                                  <Button\n-                                    variant=\"ghost\"\n-                                    size=\"sm\"\n-                                    onClick={() => handleRemoveActivity(index)}\n-                                  >\n-                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\n-                                  </Button>\n-                                </div>\n-                              </div>\n-                            </CardHeader>\n-                            {expandedActivity === index && (\n-                              <CardContent>\n-                                <div className=\"space-y-4\">\n-                                  <div className=\"space-y-2\">\n-                                    <Label>Instructions</Label>\n-                                    <Textarea\n-                                      value={activity.instructions}\n-                                      onChange={(e) => handleUpdateActivity(index, {\n-                                        ...activity,\n-                                        instructions: e.target.value\n-                                      })}\n-                                      placeholder=\"Enter activity instructions\"\n-                                    />\n-                                  </div>\n-                                    \n-                                    {/* Media Section */}\n-                                    <div className=\"space-y-2\">\n-                                      <Label>Media</Label>\n-                                      {activity.media?.map((media, mediaIndex) => (\n-                                        <div key={mediaIndex} className=\"flex items-center gap-2\">\n-                                          <Input\n-                                            value={media.url}\n-                                            onChange={(e) => {\n-                                              const updatedMedia = [...(activity.media || [])];\n-                                              updatedMedia[mediaIndex] = {\n-                                                type: media.type,\n-                                                url: e.target.value\n-                                              };\n-                                              handleUpdateActivity(index, {\n-                                                ...activity,\n-                                                media: updatedMedia\n-                                              });\n-                                            }}\n-                                            placeholder=\"Media URL\"\n-                                          />\n-                                          <Select\n-                                            value={media.type}\n-                                            onValueChange={(value) => {\n-                                              const updatedMedia = [...(activity.media || [])];\n-                                              updatedMedia[mediaIndex] = {\n-                                                type: value as 'image' | 'gif' | 'video',\n-                                                url: media.url\n-                                              };\n-                                              handleUpdateActivity(index, {\n-                                                ...activity,\n-                                                media: updatedMedia\n-                                              });\n-                                            }}\n-                                          >\n-                                            <SelectTrigger className=\"w-[120px]\">\n-                                              <SelectValue placeholder=\"Type\" />\n-                                            </SelectTrigger>\n-                                            <SelectContent>\n-                                              <SelectItem value=\"image\">Image</SelectItem>\n-                                              <SelectItem value=\"gif\">GIF</SelectItem>\n-                                              <SelectItem value=\"video\">Video</SelectItem>\n-                                            </SelectContent>\n-                                          </Select>\n-                                <Button\n-                                            variant=\"ghost\"\n-                                            size=\"sm\"\n-                                  onClick={() => {\n-                                              const updatedMedia = (activity.media || []).filter((_, i) => i !== mediaIndex);\n-                                              handleUpdateActivity(index, {\n-                                                ...activity,\n-                                                media: updatedMedia\n-                                          });\n-                                          }}\n-                                  >\n-                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\n-                                  </Button>\n-                                </div>\n-                                        ))}\n-                                  <Button\n-                                    variant=\"outline\"\n-                                    size=\"sm\"\n-                                            onClick={() => {\n-                                              handleUpdateActivity(index, {\n-                                                ...activity,\n-                                                media: [\n-                                                  ...(activity.media || [])  ,\n-                                                  { url: '', type: 'image' }\n-                                                ]\n-                                              });\n-                                            }}\n-                                  >\n-                                    <Plus className=\"h-4 w-4 mr-2\" />\n-                                            Add Media\n-                                  </Button>\n-                                </div>\n-                                      </div>\n-                                    </CardContent>\n-                                  )}\n-                                </Card>\n-                              ))}\n+                                </CardContent>\n+                              )}\n+                            </Card>\n+                          );\n+                      })}\n+                    </div>\n+                  </CardContent>\n+                </Card>\n+              ))}\n+            </div>\n+          </CardContent>\n+        </Card>\n+      </div>\n+    );\n+  };\n \n-                              {/* Add Activity Button */}\n-                              <Button\n-                                onClick={handleAddActivity}\n-                                className=\"w-full\"\n-                              >\n-                                <Plus className=\"h-4 w-4 mr-2\" />\n-                                Add Activity\n-                              </Button>\n-                          </TabsContent>\n-                        </Tabs>\n-                        </div>\n-                )}\n+  // Update the main return to use this component\n+  return (\n+    <div className=\"flex h-screen overflow-hidden\">\n+      {/* Left sidebar remains the same */}\n+      <div className=\"w-80 border-r bg-card overflow-y-auto\">\n+        {/* ... existing sidebar code ... */}\n+      </div>\n \n-                    {/* Floating Save Button */}\n-                    <div className=\"fixed bottom-8 right-8 flex items-center gap-4\">\n-                      {saveProgress !== 'idle' && (\n-                        <div className={cn(\n-                          \"flex items-center gap-2 rounded-lg px-4 py-2 shadow-lg\",\n-                          {\n-                            \"bg-background border\": saveProgress === 'saving',\n-                            \"bg-green-500 text-white\": saveProgress === 'saved',\n-                            \"bg-destructive text-destructive-foreground\": saveProgress === 'error'\n-                          }\n-                        )}>\n-                          {saveProgress === 'saving' && (\n-                            <>\n-                              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n-                              <span className=\"text-sm\">Saving changes...</span>\n-                            </>\n-                          )}\n-                          {saveProgress === 'saved' && (\n-                            <>\n-                              <Check className=\"h-4 w-4\" />\n-                              <span className=\"text-sm\">Changes saved</span>\n-                            </>\n-                          )}\n-                          {saveProgress === 'error' && (\n-                            <>\n-                              <X className=\"h-4 w-4\" />\n-                              <span className=\"text-sm\">Error saving changes</span>\n-                            </>\n-                          )}\n-                        </div>\n-                      )}\n-                      <Button\n-                        onClick={handleSaveLesson}\n-                        disabled={saveProgress === 'saving'}\n-                        className=\"shadow-lg\"\n-                      >\n-                        {saveProgress === 'saving' ? (\n-                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n-                        ) : (\n-                          <Save className=\"h-4 w-4 mr-2\" />\n-                        )}\n-                        {saveProgress === 'saving' ? 'Saving...' : 'Save Lesson'}\n-                      </Button>\n-                    </div>\n-                  </>\n-            )}\n+      {/* Right content area */}\n+      <div className=\"flex-1 overflow-y-auto\">\n+        {isViewMode && selectedGrade ? (\n+          <ContentHierarchyView />\n+        ) : (\n+          // ... existing content ...\n+        )}\n+      </div>\n     </div>\n     \n \n       {/* Floating Save Button */}\n"
                },
                {
                    "date": 1739966724423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,2410 +1,3313 @@\n-\"use client\";\n-\n-import { useState, useCallback, useEffect, useRef } from 'react';\n-import { toast } from 'sonner';\n-import { Toaster } from 'sonner';\n-import Link from 'next/link';\n-import {  Activity as ActivityIcon,  ArrowLeft,  BookOpen,  ChevronDown,  ChevronRight,  Check,  Edit,  Eye,  EyeOff,  HelpCircle,  Layers,  List,  MessageSquare,  Plus,  Save,  Trash as Trash2, X, Pencil, Lock, Unlock, RefreshCw, Clock, Bell, Moon, GraduationCap, MoreHorizontal, Loader2 } from 'lucide-react';\n-import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\n-import { Badge } from '@/components/ui/badge';\n-import { Button } from '@/components/ui/button';\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\n-import { Input } from '@/components/ui/input';\n-import { Label } from '@/components/ui/label';\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\n-import { Textarea } from '@/components/ui/textarea';\n-import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\n-import { cn } from '@/lib/utils';\n-import { API_BASE_URL, QUESTION_TYPES, isQuestionType } from './constants';\n-import { ExercisePrompt, Lesson } from './types';\n-import { QuestionFormProps, ExercisePromptCardProps, Activity, Grade, Topic, Subtopic as SubTopic } from './types';\n-import { QuestionForm } from './components/question-form';\n-import { ExercisePromptCard } from './components/exercise-prompt-card';\n-import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\n-import { supabase } from '@/lib/supabase';\n-import { useContentStore } from '@/lib/content/store';\n-import { contentService } from '@/lib/content/ContentService';\n-import { MediaPreview } from '@/components/ui/media-preview';\n-import { QuestionTypeSelect } from './components/question-type-select';\n-import { RichTextEditor } from '@/components/ui/rich-text-editor';\n-import {\n-  AlertDialog,\n-  AlertDialogAction,\n-  AlertDialogCancel,\n-  AlertDialogContent,\n-  AlertDialogDescription,\n-  AlertDialogFooter,\n-  AlertDialogHeader,\n-  AlertDialogTitle,\n-  AlertDialogTrigger,\n-} from \"@/components/ui/alert-dialog\";\n-import { debounce, isNull } from 'lodash';\n-import { PostgrestError } from '@supabase/supabase-js';\n-import { Question as ContentQuestion } from './types';  // Import the specific type\n-import { Trash } from \"lucide-react\";\n-import { AnimatePresence, motion } from 'framer-motion';\n-import { FileText } from 'lucide-react';\n-\n-\n-// Update the API endpoint to match your backend route\n-const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\n-\n-interface QuestionTypeSelectProps {\n-  value: string;\n-  onValueChange: (value: string) => void;\n-}\n-\n-// Add metadata type\n-interface LessonMetadata {\n-  lastEdited?: string;\n-  version?: number;\n-  tags?: string[];\n-  status?: 'draft' | 'published';\n-  authorId?: string;\n-  duration?: number;\n-  transcript?: string;\n-}\n-\n-type ContentType = 'html' | 'markdown' | 'rich-text' | 'text' | 'json';\n-\n-interface LessonContent {\n-  id: string;\n-  lesson_id: string;\n-  content: any[];\n-  metadata: {\n-    lastEdited?: string;\n-    version?: number;\n-    status?: 'draft' | 'published';\n-    authorId?: string;\n-  };\n-  content_type: string;\n-  order_index: number;\n-  updated_at: string;\n-  user_id: string;\n-}\n-\n-interface InlineEditProps {\n-  value: string;\n-  onSave: (value: string) => void;\n-  isEditing: boolean;\n-  setIsEditing: (value: boolean) => void;\n-  placeholder?: string;\n-  className?: string;\n-}\n-\n-// Add validation interface\n-interface QuestionValidation {\n-  isValid: boolean;\n-  message: string;\n-}\n-\n-// Add this type validation helper\n-const getQuestionTypeFields = (type: string) => {\n-  switch (type) {\n-    case 'multipleChoice':\n-      return {\n-        required: ['prompt', 'options', 'correctAnswer'],\n-        fields: {\n-          prompt: '',\n-          options: [],\n-          correctAnswer: '',\n-          teacherScript: '',\n-          explanation: ''\n-        }\n-      };\n-    case 'fillInBlank':\n-      return {\n-        required: ['prompt', 'blanks'],\n-        fields: {\n-          prompt: '',\n-          blanks: [],\n-          teacherScript: '',\n-          explanation: ''\n-        }\n-      };\n-    case 'trueFalse':\n-      return {\n-        required: ['prompt', 'correctAnswer'],\n-        fields: {\n-          prompt: '',\n-          correctAnswer: null,\n-          teacherScript: '',\n-          explanation: ''\n-        }\n-      };\n-    case 'matching':\n-      return {\n-        required: ['prompt', 'pairs'],\n-        fields: {\n-          prompt: '',\n-          pairs: [],\n-          teacherScript: '',\n-          explanation: ''\n-        }\n-      };\n-    case 'ordering':\n-      return {\n-        required: ['prompt', 'items'],\n-        fields: {\n-          prompt: '',\n-          items: [],\n-          correctOrder: [],\n-          teacherScript: '',\n-          explanation: ''\n-        }\n-      };\n-    case 'shortAnswer':\n-      return {\n-        required: ['prompt', 'sampleAnswer'],\n-        fields: {\n-          prompt: '',\n-          sampleAnswer: '',\n-          teacherScript: '',\n-          explanation: '',\n-          keywords: []\n-        }\n-      };\n-    case 'speaking':\n-      return {\n-        required: ['prompt', 'sampleAnswer'],\n-        fields: {\n-          prompt: '',\n-          sampleAnswer: '',\n-          teacherScript: '',\n-          audioPrompt: '',\n-          pronunciation: ''\n-        }\n-      };\n-    case 'listening':\n-      return {\n-        required: ['prompt', 'audioContent'],\n-        fields: {\n-          prompt: '',\n-          audioContent: '',\n-          transcript: '',\n-          teacherScript: '',\n-          comprehensionQuestions: []\n-        }\n-      };\n-    case 'listenAndRepeat':\n-      return {\n-        required: ['prompt', 'audioContent'],\n-        fields: {\n-          prompt: '',\n-          audioContent: '',\n-          targetPhrase: '',\n-          teacherScript: '',\n-          pronunciation: ''\n-        }\n-      };\n-    default:\n-      return {\n-        required: ['prompt'],\n-        fields: {\n-          prompt: '',\n-          teacherScript: ''\n-        }\n-      };\n-  }\n-}\n-\n-interface SaveStatus {\n-  id: string;\n-  status: 'draft' | 'saved' | 'saving' | 'error';\n-  lastSaved?: string;\n-}\n-\n-interface Question {\n-  id: string;\n-  type: string;\n-  lesson_id: string;\n-  title: string;\n-  content: string;\n-  metadata: Record<string, any>;\n-  data: Record<string, any>; // This allows dynamic field access\n-  correct_answer: string;\n-  exercisePrompts: ExercisePrompt[];\n-  isDraft?: boolean;\n-}\n-\n-// Add at the top of the file with other type definitions\n-type QuestionType = keyof typeof QUESTION_TYPES;\n-\n-// Add this type guard function\n-const isValidQuestionType = (type: string): type is QuestionType => {\n-  return type in QUESTION_TYPES;\n-};\n-\n-// Update handleAddQuestion\n-\n-\n-// Update validateQuestion\n-const validateQuestion = (question: Question): QuestionValidation => {\n-  const { required } = getQuestionTypeFields(question.type);\n-  const missingFields = required.filter(field => {\n-    const value = question.data?.[field];\n-    return !value || \n-      (Array.isArray(value) && value.length === 0) || \n-      (typeof value === 'string' && !value.trim());\n-  });\n-\n-  if (missingFields.length > 0) {\n-    return {\n-      isValid: false,\n-      message: `Missing required fields: ${missingFields.join(', ')}`\n-    };\n-  }\n-\n-  return { isValid: true, message: '' };\n-};\n-\n-// Add proper type for question data\n-interface QuestionData {\n-  id?: string;\n-  content?: string;\n-  type?: string;\n-  data?: {\n-    prompt?: string;\n-    teacher_script?: string;\n-    followup_prompt?: string[];\n-    sample_answer?: string;\n-    answer?: string;\n-  } | null;\n-  prompt: string;\n-  teacherScript: string;\n-  followup_prompt: string[];\n-  answer?: string;\n-  correct_answer?: string;\n-}\n-\n-// In your component where you handle questions\n-const handleQuestionData = (question: QuestionData) => {\n-  return {\n-    ...question,\n-    data: {\n-      prompt: question?.data?.prompt || '',\n-      teacher_script: question?.data?.teacher_script || '',\n-      followup_prompt: question?.data?.followup_prompt || [],\n-      sample_answer: question?.data?.sample_answer || undefined,  // Convert null to undefined\n-      answer: question?.data?.answer || undefined  // Convert null to undefined\n-    } as const,\n-    sampleAnswer: question?.correct_answer || ''\n-  };\n-};\n-\n-export default function LessonManagementPage() {\n-  // State declarations\n-  \n-  const [selectedGradeId, setSelectedGradeId] = useState<string | null>(null);\n-  const [selectedTopicId, setSelectedTopicId] = useState<string | null>(null);\n-  const [selectedSubtopicId, setSelectedSubtopicId] = useState<string | null>(null);\n-  const [lessonTitle, setLessonTitle] = useState<string>('');\n-  const [currentLessonId, setCurrentLessonId] = useState<string | null>(null);\n-  const [questions, setQuestions] = useState<Question[]>([]);\n-  const [saveProgress, setSaveProgress] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');\n-  const [activities, setActivities] = useState<Activity[]>([]);\n-  const [localBuffer, setLocalBuffer] = useState<{ timestamp: number; data: any } | null>(null);\n-  const [lastSavedToServer, setLastSavedToServer] = useState<number>(Date.now());\n-  const [selectedQuestionType, setSelectedQuestionType] = useState<string>('');\n-  const [editingQuestionIndex, setEditingQuestionIndex] = useState<number | null>(null);\n-  const [showHelpTips, setShowHelpTips] = useState(true);\n-  const [isNavigating, setIsNavigating] = useState(false);\n-  const [lessons, setLessons] = useState<Lesson[]>([]);\n-  const [grades, setGrades] = useState<Grade[]>([]);\n-  const [topics, setTopics] = useState<Topic[]>([]);\n-  const [subtopics, setSubtopics] = useState<SubTopic[]>([]);\n-  const [contentHeading, setContentHeading] = useState<string>('');\n-    // Add with your other state declarations\n-  const [isContentExpanded, setIsContentExpanded] = useState<boolean>(false);\n-  const [modalState, setModalState] = useState({\n-    showAddGrade: false,\n-    showAddTopic: false,\n-    showAddSubtopic: false,\n-    showAddLesson: false\n-  });\n-  const [isViewMode, setIsViewMode] = useState<boolean>(true);\n-  const [expandedGrade, setExpandedGrade] = useState<string | null>(null);\n-  const [expandedTopic, setExpandedTopic] = useState<string | null>(null);\n-  const [expandedSubtopic, setExpandedSubtopic] = useState<string | null>(null);\n-  const [expandedQuestion, setExpandedQuestion] = useState<number | null>(null);\n-  const [expandedActivity, setExpandedActivity] = useState<number | null>(null);\n-  const [newItemData, setNewItemData] = useState({\n-    name: '',\n-    description: ''\n-  });\n-  const [lessonContent, setLessonContent] = useState<string>('');\n-  const [isContentEditorOpen, setIsContentEditorOpen] = useState(false);\n-  const [isEditingTitle, setIsEditingTitle] = useState<boolean>(false);\n-  const [isEditingHeading, setIsEditingHeading] = useState<boolean>(false);\n-  const [isEditingDescription, setIsEditingDescription] = useState<boolean>(false);\n-  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\n-  const [isSidebarLocked, setIsSidebarLocked] = useState(true);\n-  const [alertDialogState, setAlertDialogState] = useState<{\n-    isOpen: boolean;\n-    title: string;\n-    message: string;\n-    onConfirm: (value?: unknown) => void;\n-  }>({\n-    isOpen: false,\n-    title: '',\n-    message: '',\n-    onConfirm: () => {}\n-  });\n-\n-  const { \n-    selectedGrade,\n-    setSelectedGrade,\n-    selectedTopic,\n-    setSelectedTopic,\n-    selectedSubtopic,\n-    setSelectedSubtopic,\n-    selectedLesson,\n-    setSelectedLesson\n-  } = useContentStore();\n-\n-  // Add new state for tracking save status\n-  interface SaveStatus {\n-    id: string;\n-    status: 'draft' | 'saved' | 'saving' | 'error' | 'draft';\n-    lastSaved?: string;\n-  }\n-\n-  const [questionSaveStatuses, setQuestionSaveStatuses] = useState<Array<{\n-    id: string;\n-    status: 'idle' | 'saving' | 'saved' | 'error' | 'draft';\n-  }>>([]);\n-  const [promptSaveStatuses, setPromptSaveStatuses] = useState<SaveStatus[]>([]);\n-\n-  // Add this state to track dropdown state\n-  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n-\n-  // Add these states\n-  const [isLoadingSubtopics, setIsLoadingSubtopics] = useState(false);\n-  const [isLoadingLessons, setIsLoadingLessons] = useState(false);\n-\n-  // Event handlers\n-  const handleQuestionTypeChange = useCallback((type: string) => {\n-    if (isQuestionType(type)) {\n-      setSelectedQuestionType(type);\n-    }\n-  }, []);\n-\n-  const handleAddQuestion = useCallback(() => {\n-    if (!selectedQuestionType || !isQuestionType(selectedQuestionType)) return;\n-\n-    const defaultData = QUESTION_TYPES[selectedQuestionType].defaultData;\n-    const newQuestion: Question = {\n-      id: crypto.randomUUID(),\n-      type: selectedQuestionType,\n-      //data: {},\n-      title: 'New Question',\n-      content: '',\n-      lesson_id: currentLessonId || '',\n-      metadata: {},\n-      data: {\n-        ...defaultData,\n-        prompt: '',\n-        teacher_script: '',\n-        followup_prompt: [],\n-        sample_answer: ''\n-      },\n-      correct_answer: '',\n-      exercisePrompts: [],\n-      isDraft: true\n-    };\n-\n-    setQuestions(prev => [...prev, newQuestion]);\n-    setQuestionSaveStatuses(prev => [\n-      ...prev,\n-      { id: newQuestion.id, status: 'draft' }\n-    ]);\n-    setSelectedQuestionType('');\n-  }, [selectedQuestionType, currentLessonId]);\n-\n-  const handleRemoveQuestion = async (index: number) => {\n-    try {\n-      const questionToDelete = questions[index];\n-      \n-      // Delete related exercise prompts first\n-      const { error: promptError } = await supabase\n-        .from('exercise_prompts')\n-        .delete()\n-        .eq('question_id', questionToDelete.id);\n-\n-      if (promptError) throw promptError;\n-\n-      // Then delete the question\n-      const { error: questionError } = await supabase\n-        .from('questions')\n-        .delete()\n-        .eq('id', questionToDelete.id);\n-\n-      if (questionError) throw questionError;\n-\n-      // Update local state\n-      const newQuestions = questions.filter((_, i) => i !== index);\n-      setQuestions(newQuestions);\n-      \n-      toast.success('Question and related prompts deleted successfully');\n-    } catch (error) {\n-      console.error('Error deleting question:', error);\n-      toast.error('Failed to delete question and prompts');\n-    }\n-  };\n-\n-  const handleUpdateQuestion = useCallback(async (index: number, updatedQuestion: Question) => {\n-    const newQuestions = [...questions];\n-    newQuestions[index] = updatedQuestion;\n-    setQuestions(newQuestions);\n-    setQuestionSaveStatuses(prev => prev.map((status, i) => \n-      i === index ? { ...status, status: 'draft' } : status\n-    ));\n-  }, [questions]);\n-\n-  const handleAddExercisePrompt = useCallback((questionIndex: number) => {\n-    setQuestions(prev => prev.map((question, i) => {\n-      if (i === questionIndex) {\n-        return {\n-          ...question,\n-          exercisePrompts: [\n-            ...question.exercisePrompts,\n-            {\n-              id: crypto.randomUUID(),\n-              text: '',\n-              media: '',\n-              type: 'image',\n-              narration: 'Your turn',\n-              saytext: 'Say: ',\n-              metadata: {\n-                estimatedTime: 0\n-              },\n-              created_at: new Date().toISOString(),\n-              updated_at: new Date().toISOString()\n-            }\n-          ]\n-        };\n-      }\n-      return question;\n-    }));\n-  }, []);\n-\n-  const handleRemoveExercisePrompt = useCallback((questionIndex: number, promptIndex: number) => {\n-    setQuestions(prev => prev.map((question, i) => {\n-      if (i === questionIndex) {\n-        return {\n-          ...question,\n-          exercisePrompts: question.exercisePrompts.filter((_, j) => j !== promptIndex)\n-        };\n-      }\n-      return question;\n-    }));\n-  }, []);\n-\n-  const handleExercisePromptChange = useCallback(async (\n-    questionIndex: number,\n-    promptIndex: number,\n-    updatedPrompt: ExercisePrompt\n-  ) => {\n-    try {\n-      const promptUpdate = {\n-        id: updatedPrompt.id,\n-        question_id: updatedPrompt.question_id,\n-        text: updatedPrompt.text,\n-        type: updatedPrompt.type,\n-        narration: updatedPrompt.narration,\n-        saytext: updatedPrompt.saytext,\n-        media: updatedPrompt.media,\n-        // Remove order_index as it's not in schema\n-        created_at: new Date().toISOString()\n-      };\n-\n-      const { error: promptError } = await supabase\n-        .from('exercise_prompts')\n-        .upsert(promptUpdate)\n-        .select();\n-\n-      if (promptError) throw promptError;\n-\n-      // Update local state\n-      setQuestions(prev => prev.map((question, i) => {\n-        if (i === questionIndex) {\n-          const newPrompts = [...question.exercisePrompts];\n-          newPrompts[promptIndex] = updatedPrompt;\n-          return { ...question, exercisePrompts: newPrompts };\n-        }\n-        return question;\n-      }));\n-\n-    } catch (error) {\n-      console.error('Error saving prompt:', error);\n-      toast.error('Failed to save prompt');\n-    }\n-  }, []);\n-\n-  const handleAddActivity = useCallback(() => {\n-    const newActivity: Activity = {\n-      id: crypto.randomUUID(),\n-      lesson_id: currentLessonId || '',\n-      created_at: new Date().toISOString(),\n-      type: 'practice',\n-      title: '',\n-      name: '',\n-      instructions: '',\n-      media: [],\n-      data: {\n-        prompt: '',\n-        teacherScript: '',\n-        media: []\n-      }\n-    };\n-    setActivities(prev => [...prev, newActivity]);\n-  }, [currentLessonId]);\n-\n-  const handleUpdateActivity = useCallback((index: number, updatedActivity: Activity) => {\n-    setActivities(prev => prev.map((activity, i) => i === index ? updatedActivity : activity));\n-  }, []);\n-\n-  const handleRemoveActivity = useCallback((index: number) => {\n-    setActivities(prev => prev.filter((_, i) => i !== index));\n-  }, []);\n-\n-  const handleExercisePromptUpdate = useCallback((questionIndex: number, promptIndex: number, updatedPrompt: ExercisePrompt) => {\n-    const updatedQuestions = [...questions];\n-    updatedQuestions[questionIndex].exercisePrompts[promptIndex] = updatedPrompt;\n-    handleUpdateQuestion(questionIndex, updatedQuestions[questionIndex]);\n-  }, [questions, handleUpdateQuestion]);\n-\n-  const handleQuestionDataChange = useCallback((questionIndex: number, field: string, value: string) => {\n-    setQuestions(prev => prev.map((q, i) => \n-      i === questionIndex \n-        ? { \n-            ...q, \n-            data: { \n-              prompt: q.data?.prompt || '',\n-              teacherScript: q.data?.teacherScript || '',\n-              ...q.data,\n-              [field]: value \n-            } \n-          }\n-        : q\n-    ));\n-  }, []);\n-\n-  const [isSaving, setIsSaving] = useState(false);\n-\n-  const handleSaveLesson = async () => {\n-    try {\n-      if (!currentLessonId || !selectedSubtopicId) {\n-        toast.error('Please select a subtopic and lesson first');\n-        return;\n-      }\n-\n-      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\n-      if (sessionError) throw sessionError;\n-      \n-      if (!session?.user) {\n-        toast.error('Please sign in to save lessons');\n-        return;\n-      }\n-\n-      // Get user's role from session\n-      const userRole = session.user.user_metadata?.role;\n-      console.log('Current user role:', userRole);\n-      console.log('📝 Saving content heading:', {\n-        contentHeading,\n-        currentLessonId,\n-        selectedSubtopicId,\n-        timestamp: new Date().toISOString()\n-      });\n-\n-      // Create metadata object\n-      const lessonMetadata = {\n-        lastEdited: new Date().toISOString(),\n-        version: 1,\n-        status: 'draft' \n-      };\n-\n-      // Complete lesson data with all fields\n-      const lessonData = {\n-        id: currentLessonId,\n-        title: lessonTitle,\n-        content: lessonContent,\n-        metadata: lessonMetadata, // Supabase will automatically handle JSON conversion\n-        content_type: 'html',\n-        lesson_type: 'lesson',\n-        grade_id: selectedGradeId,\n-        topic_id: selectedTopicId,\n-        subtopic_id: selectedSubtopicId,\n-        user_id: session.user.id,\n-        updated_at: new Date().toISOString(),\n-        role: userRole, // Include role in the payload\n-        description: '',\n-        prerequisites: [],\n-        media_type: 'image',\n-        media_url: '',\n-        contentheading: contentHeading || ''\n-      };\n-\n-      console.log('📦 Data being sent to Supabase:', lessonData);\n-\n-      // Save lesson with all fields\n-      const { data, error: lessonError } = await supabase\n-        .from('lessons')\n-        .upsert(lessonData, { \n-          onConflict: 'id'\n-        })\n-        .select();\n-\n-      if (lessonError) throw lessonError;\n-\n-      // 2. Save lesson content\n-      const { data: existingContent } = await supabase\n-        .from('lesson_content')\n-        .select('id')\n-        .eq('lesson_id', currentLessonId)\n-        .single();\n-\n-      const contentMetadata = {\n-        lastEdited: new Date().toISOString(),\n-        version: 1,\n-        status: 'draft'\n-      };\n-\n-      const contentUpdate = {\n-        id: existingContent?.id || crypto.randomUUID(),\n-        lesson_id: currentLessonId,\n-        content: [lessonContent],\n-        metadata: contentMetadata, // Supabase will automatically handle JSON conversion\n-        content_type: 'html',\n-        user_id: session.user.id,\n-        updated_at: new Date().toISOString(),\n-        created_at: new Date().toISOString()\n-      };\n-\n-      const { error: contentError } = await supabase\n-        .from('lesson_content')\n-        .upsert(contentUpdate, { onConflict: 'id' });\n-\n-      if (contentError) throw contentError;\n-\n-      // 3. Save questions\n-      for (const question of questions) {\n-        const questionData = {\n-          id: question.id,\n-          lesson_id: currentLessonId,\n-          type: question.type,\n-          title: question.title,\n-          metadata: question.metadata,\n-          data: question.data,\n-          updated_at: new Date().toISOString(),\n-          user_id: session.user.id\n-        };\n-\n-        const { error: questionError } = await supabase\n-          .from('questions')\n-          .upsert(questionData, { onConflict: 'id' });\n-\n-        if (questionError) throw questionError;\n-\n-        //4. Save exercise prompts for this question\n-        if (question.exercisePrompts) {\n-          for (const prompt of question.exercisePrompts) {\n-            const promptData = {\n-              id: prompt.id,\n-              question_id: question.id,\n-              text: prompt.text,\n-              media: prompt.media,\n-              type: prompt.type,\n-              narration: prompt.narration,\n-              saytext: prompt.saytext,\n-              user_id: session.user.id,\n-              updated_at: new Date().toISOString()\n-            };\n-\n-            const { error: promptError } = await supabase\n-              .from('exercise_prompts')\n-              .upsert(promptData, { onConflict: 'id' });\n-\n-            if (promptError) throw promptError;\n-          }\n-        }\n-      }\n-\n-      // 5. Save activities\n-      if (activities.length > 0) {\n-        const activitiesData = activities.map(activity => ({\n-          id: activity.id,\n-          lesson_id: currentLessonId,\n-          type: activity.type,\n-          title: activity.title,\n-          name: activity.name,\n-          instructions: activity.instructions,\n-          media: activity.media,\n-          data: activity.data,\n-          created_at: new Date().toISOString()\n-        }));\n-\n-        const { error: activitiesError } = await supabase\n-          .from('activities')\n-          .upsert(activitiesData, { onConflict: 'id' });\n-\n-        if (activitiesError) throw activitiesError;\n-      }\n-\n-      // After successful save\n-      console.log('✅ Content heading saved successfully:', {\n-        contentHeading,\n-        lessonId: currentLessonId,\n-        timestamp: new Date().toISOString()\n-      });\n-\n-      toast.success('Lesson saved successfully');\n-    } catch (err) {\n-      const error = err as PostgrestError;\n-      console.error('❌ Error saving content heading:', {\n-        error: error.message,\n-        contentHeading,\n-        lessonContent,\n-        lessonId: currentLessonId,\n-        timestamp: new Date().toISOString()\n-      });\n-      toast.error(`Failed to save lesson: ${error.message}`);\n-\n-\n-    }\n-  };\n-\n-  const handleSaveQuestion = async (question: Question, index: number) => {\n-    const loadingToast = toast.loading(`Saving question ${index + 1}...`);\n-    \n-    try {\n-      const { data: { session } } = await supabase.auth.getSession();\n-      if (!session?.user) {\n-        toast.error('Please sign in to save question', { id: loadingToast });\n-        return;\n-      }\n-\n-      // Save question\n-      const questionData = {\n-        id: question.id,\n-        lesson_id: currentLessonId,\n-        type: question.type,\n-        title: question.title,\n-        metadata: question.metadata,\n-        data: {\n-          prompt: question.data?.prompt ?? '',\n-          teacherScript: question.data?.teacherScript ?? '',\n-          followup_prompt: question.data?.followup_prompt ?? [],\n-          sampleAnswer: question.data?.sampleAnswer || undefined,  // Convert null to undefined\n-          answer: question.data?.answer || undefined  // Convert null to undefined\n-        } as const,\n-        user_id: session.user.id,\n-        updated_at: new Date().toISOString()\n-      };\n-\n-      const { error: questionError } = await supabase\n-        .from('questions')\n-        .upsert(questionData, { onConflict: 'id' });\n-\n-      if (questionError) throw questionError;\n-\n-      // Save exercise prompts if they exist\n-      if (question.exercisePrompts?.length) {\n-        for (const prompt of question.exercisePrompts) {\n-          const promptData = {\n-            id: prompt.id,\n-            question_id: question.id,\n-            text: prompt.text,\n-            type: prompt.type,\n-            narration: prompt.narration,\n-            saytext: prompt.saytext,\n-            media: prompt.media,\n-            user_id: session.user.id,\n-            updated_at: new Date().toISOString()\n-          };\n-\n-          const { error: promptError } = await supabase\n-            .from('exercise_prompts')\n-            .upsert(promptData, { onConflict: 'id' });\n-\n-          if (promptError) throw promptError;\n-        }\n-      }\n-\n-      toast.success(`Question ${index + 1} saved successfully`, { id: loadingToast });\n-    } catch (error) {\n-      console.error('Error saving question:', error);\n-      toast.error(`Failed to save question ${index + 1}`, { id: loadingToast });\n-    }\n-  };\n-\n-  const handleSaveActivity = async (activity: Activity) => {\n-    try {\n-      await contentService.saveActivity(activity);\n-      toast.success('Activity saved');\n-    } catch (error) {\n-      console.error('Failed to save activity:', error);\n-      toast.error('Failed to save activity');\n-    }\n-  };\n-\n-  // Effects\n-  useEffect(() => {\n-    const fetchGrades = async () => {\n-      try {\n-        const { data, error } = await supabase\n-          .from('grades')\n-          .select('*')\n-          .order('name');\n-\n-        if (error) {\n-          console.error('Supabase error:', error);\n-          throw error;\n-        }\n-\n-        if (!data) {\n-          throw new Error('No data returned from Supabase');\n-        }\n-\n-        // Map the grades to match your interface\n-        const validGrades = data.map((grade: any) => ({\n-          _id: grade.id,\n-          id: grade.id,\n-          name: grade.name,\n-          level: grade.level || 0,  // Add default value if not provided\n-          orderIndex: grade.order_index || 0,  // Add default value if not provided\n-          topics: []\n-        }));\n-        \n-        setGrades(validGrades);\n-      } catch (error) {\n-        console.error('Error fetching grades:', error);\n-        toast.error('Failed to fetch grades');\n-      }\n-    };\n-\n-    fetchGrades();\n-  }, []);\n-\n-  // Topic Selection\n-  useEffect(() => {\n-    const fetchTopics = async () => {\n-      if (!selectedGradeId) return;\n-      \n-      try {\n-        const { data, error } = await supabase\n-          .from('topics')\n-          .select('*')\n-          .eq('grade_id', selectedGradeId)\n-          .order('title');\n-\n-        if (error) {\n-          throw error;\n-        }\n-\n-        // Map the topics to match your interface\n-        const validTopics = (data || []).map((topic: any) => ({\n-          _id: topic.id,\n-          id: topic.id,\n-          name: topic.title,\n-          title: topic.title,\n-          grade_id: topic.grade_id,\n-          subtopics: []\n-        }));\n-        \n-        setTopics(validTopics);\n-      } catch (error) {\n-        console.error('Error fetching topics:', error);\n-        toast.error('Failed to fetch topics');\n-      }\n-    };\n-\n-    fetchTopics();\n-  }, [selectedGradeId]);\n-\n-  // Subtopic Selection\n-  useEffect(() => {\n-    const fetchSubtopics = async () => {\n-      if (!selectedTopicId) return;\n-      \n-      try {\n-        // Use content service to fetch subtopics\n-        const subtopicsData = await contentService.fetchSubtopics(selectedTopicId);\n-        console.log('Fetched subtopics:', subtopicsData);\n-\n-        const validSubtopics = subtopicsData.map((subtopic: any) => ({\n-          id: subtopic.id,\n-          title: subtopic.title,\n-          description: subtopic.description,\n-          topic_id: subtopic.topic_id,\n-          lessons: [],\n-          order_index: subtopicsData.length\n-        }));\n-        \n-        setSubtopics(validSubtopics);\n-        \n-        // Update global state\n-        if (selectedSubtopic) {\n-          setSelectedSubtopic(selectedSubtopic);\n-        }\n-      } catch (err) {\n-        const error = err as Error;\n-        console.error('Error fetching subtopics:', error);\n-        toast.error('Failed to fetch subtopics');\n-      }\n-    };\n-\n-    fetchSubtopics();\n-  }, [selectedTopicId, selectedSubtopic, setSelectedSubtopic]);\n-\n-  // Add effect to monitor subtopics state\n-  useEffect(() => {\n-    console.log('Current subtopics state:', subtopics);\n-  }, [subtopics]);\n-\n-  // Add fetchLessons function\n-  const fetchLessons = useCallback(async () => {\n-    if (!selectedSubtopicId) return;\n-    try {\n-      const { data, error } = await supabase\n-        .from('lessons')\n-        .select('*')\n-        .eq('subtopic_id', selectedSubtopicId)\n-        .order('title');\n-\n-      if (error) {\n-        throw error;\n-      }\n-      \n-      // Map the lessons to ensure they have _id\n-      const validLessons = (data || []).map((lesson: any) => ({\n-        ...lesson,\n-        _id: lesson._id || lesson.id, // Use _id if available, otherwise use id\n-        title: lesson.title || 'Untitled Lesson'\n-      })).filter((lesson: any) => lesson._id); // Only include lessons with valid IDs\n-      \n-      setLessons(validLessons);\n-    } catch (error) {\n-      console.error('Error fetching lessons:', error);\n-      toast.error('Failed to fetch lessons');\n-    }\n-  }, [selectedSubtopicId]);\n-  // Add loadLessonContent function\n-  const isLoading = useRef(false);\n-  const loadLessonContent = useCallback(async (lessonId: string) => {\n-    // Prevent multiple simultaneous loads\n-    if (isLoading.current) return;\n-    isLoading.current = true;\n-\n-    const controller = new AbortController();\n-\n-    try {\n-      // Clear existing content first\n-      setLessonTitle('');\n-      setContentHeading('');\n-      setLessonContent('');\n-      setQuestions([]);\n-      \n-      // First fetch lesson data\n-      const { data: lessonData, error: lessonError } = await supabase\n-        .from('lessons')\n-        .select('*')\n-        .eq('id', lessonId)\n-        .single()\n-        \n-\n-      if (lessonError) {\n-        console.error('Lesson fetch error:', lessonError);\n-        throw lessonError;\n-      }\n-\n-      // Set lesson data\n-      setLessonTitle(lessonData.title || '');\n-      setContentHeading(lessonData.content || '');\n-\n-      // Then fetch lesson content with explicit headers\n-      const { data: contentData, error: contentError } = await supabase\n-        .from('lesson_content')\n-        .select('*')\n-        .eq('lesson_id', lessonId)\n-        .order('updated_at', { ascending: false })\n-        .limit(1)\n-        .maybeSingle();\n-\n-      if (contentError) {\n-        console.error('Content fetch error:', contentError);\n-        throw contentError;\n-      }\n-\n-      // Set content if available\n-      if (contentData?.content) {\n-        setLessonContent(typeof contentData.content === 'string' \n-          ? contentData.content \n-          : JSON.stringify(contentData.content)\n-        );\n-      }\n-\n-    } catch (error: unknown) {\n-      if (error instanceof Error && error.name === 'AbortError') {\n-        console.log('Request aborted');\n-        return;\n-      }\n-      console.error('Error loading lesson:', error);\n-      toast.error('Failed to load lesson content');\n-      \n-      // Reset states on error\n-      setLessonTitle('');\n-      setContentHeading('');\n-      setLessonContent('');\n-      setQuestions([]);\n-    } finally {\n-      isLoading.current = false;\n-    }\n-\n-    return () => {\n-      controller.abort();\n-    };\n-  }, []); // Empty dependencies since we're using closure over state setters\n-\n-  // // Add effect for fetching lessons when subtopic changes\n-  useEffect(() => {\n-    if (selectedSubtopicId) {\n-      fetchLessons();\n-    }\n-  }, [selectedSubtopicId, fetchLessons]);\n-\n-  // Add effect for loading lesson content when currentLessonId changes\n-    useEffect(() => {\n-    let isMounted = true;\n-    let timeoutId: NodeJS.Timeout;\n-\n-    const loadContent = async () => {\n-      if (!currentLessonId || !isMounted) return;\n-\n-      // Clear previous timeout if exists\n-      if (timeoutId) clearTimeout(timeoutId);\n-\n-      // Set new timeout for debouncing\n-      timeoutId = setTimeout(() => {\n-        if (isMounted) {\n-          loadLessonContent(currentLessonId);\n-        }\n-      }, 300);\n-    };\n-\n-    loadContent();\n-\n-    // Cleanup function\n-    return () => {\n-      isMounted = false;\n-      if (timeoutId) clearTimeout(timeoutId);\n-      if (isLoading.current) isLoading.current = false;\n-    };\n-  }, [currentLessonId]); // Remove loadLessonContent from dependencies\n-\n-  useEffect(() => {\n-    console.log('Current lessons state:', lessons);\n-  }, [lessons]);\n-\n-    // Add keyboard shortcut for saving\n-  useEffect(() => {\n-    const handleKeyDown = (e: KeyboardEvent) => {\n-      if ((e.ctrlKey || e.metaKey) && e.key === 's') {\n-        e.preventDefault();\n-        handleSaveLesson();\n-      }\n-    };\n-\n-    window.addEventListener('keydown', handleKeyDown);\n-    return () => window.removeEventListener('keydown', handleKeyDown);\n-  }, [handleSaveLesson]);\n-\n-  // Add SaveFeedback component\n-  const SaveFeedback = useCallback(() => {\n-    if (saveProgress === 'idle') return null;\n-\n-    return (\n-    <div className=\"fixed bottom-4 right-4\">\n-      {saveProgress === 'saving' && (\n-        <div className=\"flex items-center gap-2 bg-background border rounded-lg px-4 py-2 shadow-lg\">\n-          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n-          <span className=\"text-sm\">Saving changes...</span>\n-        </div>\n-      )}\n-      {saveProgress === 'saved' && (\n-        <div className=\"flex items-center gap-2 bg-green-500 text-white rounded-lg px-4 py-2 shadow-lg\">\n-          <Check className=\"h-4 w-4\" />\n-          <span className=\"text-sm\">Changes saved</span>\n-        </div>\n-      )}\n-      {saveProgress === 'error' && (\n-        <div className=\"flex items-center gap-2 bg-destructive text-destructive-foreground rounded-lg px-4 py-2 shadow-lg\">\n-          <X className=\"h-4 w-4\" />\n-          <span className=\"text-sm\">Error saving changes</span>\n-        </div>\n-      )}\n-    </div>\n-  );\n-  }, [saveProgress]);\n-\n-  // Update handlers\n-  const handleGradeSelect = (gradeId: string) => {\n-    // Always keep sidebar open during selection\n-    setIsSidebarCollapsed(false);\n-    setIsSidebarLocked(true);\n-    \n-    // Batch state updates\n-    requestAnimationFrame(() => {\n-      setSelectedGradeId(gradeId);\n-      setSelectedGrade(gradeId);\n-      setSelectedTopicId(null);\n-      setSelectedTopic('');\n-      setSelectedSubtopicId(null);\n-      setSelectedSubtopic('');\n-      setCurrentLessonId(null);\n-      \n-      if (isViewMode) {\n-        setExpandedGrade(gradeId);\n-      }\n-    });\n-  };\n-\n-  const handleTopicSelect = (value: string) => {\n-    setSelectedTopicId(value);\n-    setSelectedTopic(value);\n-    setSelectedSubtopicId(null);\n-    setSelectedSubtopic('');\n-    setCurrentLessonId(null);\n-  };\n-\n-  const handleSubtopicSelect = (value: string) => {\n-    setSelectedSubtopicId(value);\n-    setSelectedSubtopic(value);\n-    setCurrentLessonId(null);\n-  };\n-\n-  const handleLessonSelect = async (lessonId: string) => {\n-    try {\n-      // Lock sidebar during selection\n-      setIsSidebarLocked(true);\n-      setIsSidebarCollapsed(false);\n-      setCurrentLessonId(lessonId);\n-      \n-      // 1. Fetch lesson data\n-      const { data: lessonData, error: lessonError } = await supabase\n-        .from('lessons')\n-        .select('*')\n-        .eq('id', lessonId)\n-        .single();\n-\n-      if (lessonError) throw lessonError;\n-\n-      // 2. Fetch questions with exercise prompts\n-      const { data: questionsData, error: questionsError } = await supabase\n-        .from('questions')\n-        .select(`\n-          *,\n-          exercise_prompts (*)\n-        `)\n-        .eq('lesson_id', lessonId);\n-\n-      if (questionsError) throw questionsError;\n-\n-      // 3. Fetch activities - removed order_index\n-      const { data: activitiesData, error: activitiesError } = await supabase\n-        .from('activities')\n-        .select('*')\n-        .eq('lesson_id', lessonId);\n-\n-      if (activitiesError) throw activitiesError;\n-\n-      // Format questions with their exercise prompts\n-      const formattedQuestions = questionsData?.map(q => ({\n-        ...q,\n-        data: q.data || {},\n-        exercisePrompts: q.exercise_prompts || []\n-      })) || [];\n-\n-      // Set all states\n-      setLessonTitle(lessonData.title || '');\n-      setLessonContent(lessonData.content || '');\n-      setQuestions(formattedQuestions);\n-      setActivities(activitiesData || []);\n-\n-      // After successful load, unlock sidebar and allow collapse\n-      setTimeout(() => {\n-        setIsSidebarLocked(false);\n-        if (!isSidebarLocked) {\n-          setIsSidebarCollapsed(true);\n-        }\n-      }, 300);\n-\n-    } catch (error) {\n-      console.error('Error loading lesson:', error);\n-      toast.error('Failed to load lesson');\n-      // Reset states on error\n-      setLessonTitle('');\n-      setLessonContent('');\n-      setQuestions([]);\n-      setActivities([]);\n-    }\n-    if (!isSidebarLocked) {\n-      setIsSidebarCollapsed(true);\n-    }\n-  };\n-\n-  // Update the expansion handlers\n-  const handleTopicExpand = async (topicId: string) => {\n-    setExpandedTopic(expandedTopic === topicId ? null : topicId);\n-    setSelectedTopicId(topicId);\n-    \n-    // Load subtopics when topic is expanded\n-    if (topicId) {\n-      setIsLoadingSubtopics(true);\n-      try {\n-        const { data: subtopicsData, error } = await supabase\n-          .from('subtopics')\n-          .select('*')\n-          .eq('topic_id', topicId)\n-          .order('order_index');\n-\n-        if (error) throw error;\n-        setSubtopics(subtopicsData || []);\n-      } catch (error) {\n-        console.error('Error loading subtopics:', error);\n-        toast.error('Failed to load subtopics');\n-      } finally {\n-        setIsLoadingSubtopics(false);\n-      }\n-    }\n-  };\n-\n-  const handleSubtopicExpand = async (subtopicId: string) => {\n-    setExpandedSubtopic(expandedSubtopic === subtopicId ? null : subtopicId);\n-    setSelectedSubtopicId(subtopicId);\n-    \n-    if (subtopicId) {\n-      setIsLoadingLessons(true);\n-      try {\n-        const { data: lessonsData, error } = await supabase\n-          .from('lessons')\n-          .select('*')\n-          .eq('subtopic_id', subtopicId)\n-          .order('order_index');\n-\n-        if (error) throw error;\n-        setLessons(lessonsData || []);\n-      } catch (error) {\n-        console.error('Error loading lessons:', error);\n-        toast.error('Failed to load lessons');\n-      } finally {\n-        setIsLoadingLessons(false);\n-      }\n-    }\n-  };\n-\n-  const handleQuestionExpand = (index: number) => {\n-    setExpandedQuestion(expandedQuestion === index ? null : index);\n-  };\n-\n-  const handleActivityExpand = (index: number) => {\n-    setExpandedActivity(expandedActivity === index ? null : index);\n-  };\n-\n-  // Add effect to save mode changes to localStorage\n-  useEffect(() => {\n-    localStorage.setItem('lessonManagementViewMode', isViewMode.toString());\n-  }, [isViewMode]);\n-\n-  // Add handlers for creating new items\n-  const handleCreateGrade = async () => {\n-    try {\n-      const response = await fetch(`${API_ENDPOINT}/grades`, {\n-        method: 'POST',\n-        headers: { 'Content-Type': 'application/json' },\n-        body: JSON.stringify({ name: newItemData.name })\n-      });\n-\n-      if (!response.ok) throw new Error('Failed to create grade');\n-      const data = await response.json();\n-      \n-      if (!data.success) throw new Error(data.message || 'Failed to create grade');\n-      \n-      // Update grades list\n-      setGrades([...grades, data.data.grade]);\n-      setModalState({ ...modalState, showAddGrade: false });\n-      setNewItemData({ name: '', description: '' });\n-      toast.success('Grade created successfully');\n-    } catch (error) {\n-      console.error('Error creating grade:', error);\n-      toast.error('Failed to create grade');\n-    }\n-  };\n-\n-  const handleCreateTopic = async () => {\n-    if (!selectedGradeId) {\n-      toast.error('Please select a grade first');\n-      return;\n-    }\n-\n-    try {\n-      const newTopic = await contentService.createTopic({\n-        title: newItemData.name, // Map from newItemData.name to title\n-        description: newItemData.description,\n-        gradeId: selectedGradeId\n-      });\n-\n-      setTopics(prev => [...prev, newTopic]);\n-      toast.success('Topic created successfully');\n-      setModalState({ ...modalState, showAddTopic: false });\n-      setNewItemData({ name: '', description: '' });\n-    } catch (err) {\n-      const error = err instanceof Error ? err.message : String(err);\n-      console.error('Error creating topic:', error);\n-      toast.error('Failed to create topic');\n-    }\n-  };\n-    \n-  \n-\n-\n-  const handleCreateSubtopic = async (data: { title: string; description?: string }) => {\n-    try {\n-      if (!selectedTopicId) {\n-        toast.error('Please select a topic first');\n-        return;\n-      }\n-\n-      const newSubtopic = await contentService.createSubtopic({\n-        ...data,\n-        topicId: selectedTopicId\n-      });\n-\n-      setSubtopics(prev => [...prev, {\n-        _id: newSubtopic.id,\n-        id: newSubtopic.id,\n-        name: newSubtopic.title,\n-        title: newSubtopic.title,\n-        description: newSubtopic.description,\n-        topic_id: newSubtopic.topic_id,\n-        orderIndex: prev.length,\n-        lessons: []\n-      }]);\n-\n-      toast.success('Subtopic created successfully');\n-      setModalState(prev => ({ ...prev, showAddSubtopic: false }));\n-    } catch (err) {\n-      const error = err as Error;\n-      console.error('Error creating subtopic:', error);\n-      toast.error('Failed to create subtopic');\n-    }\n-  };\n-\n-  const handleUpdateSubtopic = async (subtopicId: string, data: { title: string; description?: string }) => {\n-    try {\n-      const { data: updatedSubtopic, error } = await supabase\n-        .from('sub_topics')\n-        .update(data)\n-        .eq('id', subtopicId)\n-        .select()\n-        .single();\n-\n-      if (error) throw error;\n-      \n-      setSubtopics(prev => prev.map(subtopic => \n-        subtopic.id === subtopicId \n-          ? {\n-              ...subtopic,\n-              name: updatedSubtopic.title\n-            }\n-          : subtopic\n-      ));\n-\n-      toast.success('Subtopic updated successfully');\n-    } catch (err) {\n-      const error = err as Error;\n-      console.error('Error updating subtopic:', error);\n-      toast.error('Failed to update subtopic');\n-    }\n-  };\n-\n-  const handleDeleteSubtopic = async (subtopicId: string) => {\n-    try {\n-      // First delete all lessons\n-      await supabase\n-        .from('lessons')\n-        .delete()\n-        .eq('subtopic_id', subtopicId);\n-\n-      // Then delete the subtopic\n-      await supabase\n-        .from('subtopics')\n-        .delete()\n-        .eq('id', subtopicId);\n-\n-      // Update local state\n-      setSubtopics(subtopics.filter(s => s.id !== subtopicId));\n-      toast.success('Subtopic deleted successfully');\n-    } catch (error) {\n-      console.error('Error deleting subtopic:', error);\n-      toast.error('Failed to delete subtopic');\n-    }\n-  };\n-\n-  const handleCreateLesson = async () => {\n-    if (!selectedSubtopicId) {\n-      toast.error('Please select a subtopic first');\n-      return;\n-    }\n-\n-    try {\n-      // First create the lesson\n-      const { data: newLesson, error: lessonError } = await supabase\n-        .from('lessons')\n-        .insert({\n-          title: newItemData.name,\n-          duration: 0,\n-          topic_id: selectedTopicId,\n-          subtopic_id: selectedSubtopicId,\n-          content: '', // Empty rich text content initially\n-          status: 'draft'\n-        })\n-        .select()\n-        .single();\n-\n-      if (lessonError) throw lessonError;\n-\n-      // Create initial question\n-      const { data: newQuestion, error: questionError } = await supabase\n-        .from('questions')\n-        .insert({\n-          lesson_id: newLesson.id,\n-          type: 'speaking', // default type\n-          title: 'Question 1',\n-          data: {\n-            prompt: '',\n-            teacherScript: '',\n-            options: []\n-          },\n-          order_index: 0\n-        })\n-        .select()\n-        .single();\n-\n-      if (questionError) throw questionError;\n-\n-      // Create initial exercise prompts for the question\n-      const { error: promptsError } = await supabase\n-        .from('exercise_prompts')\n-        .insert([\n-          {\n-            question_id: newQuestion.id,\n-            text: '',\n-            type: 'image',\n-            narration: '',\n-            saytext: '',\n-            media: [],\n-            order_index: 0\n-          },\n-          {\n-            question_id: newQuestion.id,\n-            text: '',\n-            type: 'gif',\n-            narration: '',\n-            saytext: '',\n-            media: [],\n-            order_index: 1\n-          }\n-        ]);\n-\n-      if (promptsError) throw promptsError;\n-\n-      // Create initial activity\n-      // const { error: activityError } = await supabase\n-      //   .from('activities')\n-      //   .insert({\n-      //     lesson_id: newLesson.id,\n-      //     type: 'practice',\n-      //     title: '',\n-      //     instructions: '',\n-      //     media: [],\n-      //     data: {\n-      //       prompt: '',\n-      //       teacherScript: '',\n-      //       media: []\n-      //     },\n-      //     order_index: 0\n-      //   });\n-\n-      // if (activityError) throw activityError;\n-\n-      // Update UI state\n-      setLessons(prev => [...prev, newLesson]);\n-      setCurrentLessonId(newLesson.id);\n-      setLessonTitle(newLesson.title);\n-      setModalState({ ...modalState, showAddLesson: false });\n-      setNewItemData({ name: '', description: '' });\n-      toast.success('Lesson created successfully');\n-\n-    } catch (error) {\n-      console.error('Error creating lesson:', error);\n-      toast.error('Failed to create lesson');\n-    }\n-  };\n-\n-  // Effect to handle localStorage after mount\n-  useEffect(() => {\n-    const storedMode = localStorage.getItem('lessonManagementViewMode');\n-    if (storedMode !== null) {\n-      setIsViewMode(storedMode === 'true');\n-    }\n-  }, []);\n-\n-  // Update the cleanupModalState function\n-  const cleanupModalState = useCallback(() => {\n-    document.body.style.pointerEvents = '';\n-    document.body.style.overflow = '';\n-    setModalState({\n-      showAddGrade: false,\n-      showAddTopic: false,\n-      showAddSubtopic: false,\n-      showAddLesson: false\n-    });\n-    setNewItemData({ name: '', description: '' });\n-  }, []);\n-\n-  // Add a function to handle modal state changes\n-  const handleModalStateChange = useCallback((modalType: keyof typeof modalState, open: boolean) => {\n-    if (!open) {\n-      cleanupModalState();\n-    } else {\n-      setModalState(prev => ({ ...prev, [modalType]: open }));\n-    }\n-  }, [cleanupModalState]);\n-\n-  const handleContentSave = async (content: string) => {\n-    const loadingToast = toast.loading(\"Saving content...\", {\n-      action: {\n-        label: \"Close\",\n-        onClick: () => toast.dismiss()\n-      }\n-    });\n-    \n-    try {\n-      const { data: { session } } = await supabase.auth.getSession();\n-      if (!session?.user) {\n-        toast.error('Please sign in to save content', { id: loadingToast });\n-        return;\n-      }\n-\n-      // Get the most recent content entry\n-      const { data: existingContent, error: checkError } = await supabase\n-        .from('lesson_content')\n-        .select('id')\n-        .eq('lesson_id', currentLessonId)\n-        .order('updated_at', { ascending: false })\n-        .limit(1)\n-        .maybeSingle();\n-\n-      // If content exists, update it; if not, insert new\n-      const { error } = await supabase\n-        .from('lesson_content')\n-        .upsert({\n-          id: existingContent?.id, // This ensures we update if id exists\n-          lesson_id: currentLessonId,\n-          content: [content],\n-          content_type: 'text',\n-          metadata: {\n-            heading: contentHeading\n-          },\n-          user_id: session.user.id,\n-          updated_at: new Date().toISOString()\n-        }, {\n-          onConflict: 'id'  // This ensures we update based on lesson_id\n-        });\n-\n-      if (error) throw error;\n-\n-      // Save questions separately\n-      for (const question of questions) {\n-        const { exercisePrompts, ...questionData } = question; // Remove exercisePrompts from question data\n-        \n-        // Save question\n-        const { error: questionError } = await supabase\n-          .from('questions')\n-          .upsert(questionData, {\n-            onConflict: 'id'\n-          })\n-          .select();\n-\n-        if (questionError) throw questionError;\n-\n-        // Save exercise prompts\n-        if (exercisePrompts?.length > 0) {\n-          for (const prompt of exercisePrompts) {\n-            const { error: promptError } = await supabase\n-              .from('exercise_prompts')\n-              .upsert(prompt, {\n-                onConflict: 'id'\n-              })\n-              .select();\n-\n-            if (promptError) throw promptError;\n-          }\n-        }\n-      }\n-      \n-      toast.success(\"Content saved successfully\", {\n-        action: {\n-          label: \"Close\",\n-          onClick: () => toast.dismiss()\n-        },\n-        id: loadingToast,\n-      });\n-      setIsContentEditorOpen(false);\n-    } catch (error) {\n-      console.error('Error saving content:', error);\n-      toast.error(\"Failed to save content\", {\n-        action: {\n-          label: \"Close\",\n-          onClick: () => toast.dismiss()\n-        },\n-        id: loadingToast,\n-      });\n-    }\n-  };\n-\n-  // Add this component for inline editing\n-  const InlineEdit = ({ \n-    value, \n-    onSave, \n-    isEditing, \n-    setIsEditing, \n-    placeholder,\n-    className = \"\"\n-  }: InlineEditProps) => {\n-    const [tempValue, setTempValue] = useState(value);\n-    \n-    return isEditing ? (\n-      <div className=\"flex items-center gap-2\">\n-        <Input\n-          value={tempValue}\n-          onChange={(e) => setTempValue(e.target.value)}\n-          placeholder={placeholder}\n-          className={className}\n-          autoFocus\n-        />\n-        <Button\n-          size=\"sm\"\n-          variant=\"ghost\"\n-          onClick={() => {\n-            onSave(tempValue);\n-            setIsEditing(false);\n-          }}\n-        >\n-          <Check className=\"h-4 w-4 text-green-500\" />\n-        </Button>\n-        <Button\n-          size=\"sm\"\n-          variant=\"ghost\"\n-          onClick={() => setIsEditing(false)}\n-        >\n-          <X className=\"h-4 w-4 text-red-500\" />\n-        </Button>\n-      </div>\n-    ) : (\n-      <div \n-        className=\"group flex items-center gap-2 cursor-pointer\"\n-        onClick={() => setIsEditing(true)}\n-      >\n-        <span className={className}>{value || placeholder}</span>\n-        <Pencil className=\"h-4 w-4 opacity-0 group-hover:opacity-100 transition-opacity\" />\n-      </div>\n-    );\n-  };\n-\n-  // Add this effect to handle auto-collapse after lesson selection\n-  useEffect(() => {\n-    if (currentLessonId && selectedGradeId && selectedTopicId && selectedSubtopicId) {\n-      setIsSidebarLocked(false);\n-      // Optional: add a slight delay before collapsing\n-      setTimeout(() => setIsSidebarCollapsed(true), 300);\n-    }\n-  }, [currentLessonId, selectedGradeId, selectedTopicId, selectedSubtopicId]);\n-\n-  // Add individual save handlers\n-  // const handleSaveQuestion = async (question: Question, index: number) => {\n-  //   try {\n-  //     // Update status to saving\n-  //     setQuestionSaveStatuses(prev => [\n-  //       ...prev.filter(s => s.id !== question.id),\n-  //       { id: question.id, status: 'saving' }\n-  //     ]);\n-\n-  //     const questionUpsert = {\n-  //       id: question.id,\n-  //       lesson_id: currentLessonId,\n-  //       type: question.type,\n-  //       title: question.data?.prompt || 'Untitled Question',\n-  //       metadata: question.metadata || {},\n-  //       data: {\n-  //         prompt: question.data?.prompt || '',\n-  //         teacherScript: question.data?.teacherScript || '',\n-  //         ...question.data\n-  //       },\n-  //       order_index: index,\n-  //       created_at: new Date().toISOString(),\n-  //       updated_at: new Date().toISOString()\n-  //     };\n-\n-  //     const { error: questionError } = await supabase\n-  //       .from('questions')\n-  //       .upsert(questionUpsert);\n-\n-  //     if (questionError) throw questionError;\n-\n-  //     // Update status to saved\n-  //     setQuestionSaveStatuses(prev => [\n-  //       ...prev.filter(s => s.id !== question.id),\n-  //       { id: question.id, status: 'saved', lastSaved: new Date().toISOString() }\n-  //     ]);\n-\n-  //     toast.success(`Question ${index + 1} saved successfully`);\n-  //   } catch (error) {\n-  //     console.error('Error saving question:', error);\n-  //     setQuestionSaveStatuses(prev => [\n-  //       ...prev.filter(s => s.id !== question.id),\n-  //       { id: question.id, status: 'error' }\n-  //     ]);\n-  //     toast.error(`Failed to save question ${index + 1}`);\n-  //   }\n-  // };\n-\n-  const handleSavePrompt = async (questionId: string, prompt: ExercisePrompt, promptIndex: number) => {\n-    try {\n-      setPromptSaveStatuses(prev => [\n-        ...prev.filter(s => s.id !== prompt.id),\n-        { id: prompt.id || '', status: 'saving' } as SaveStatus\n-      ]);\n-\n-      const promptUpsert = {\n-        id: prompt.id,\n-        question_id: questionId,\n-        text: prompt.text || '',\n-        type: prompt.type || 'text',\n-        narration: prompt.narration || '',\n-        saytext: prompt.saytext || '',\n-        media: prompt.media || [],\n-        order_index: promptIndex,\n-        created_at: prompt.created_at || new Date().toISOString(),\n-        updated_at: new Date().toISOString()\n-      };\n-\n-      const { error: promptError } = await supabase\n-        .from('exercise_prompts')\n-        .upsert(promptUpsert);\n-\n-      if (promptError) throw promptError;\n-\n-      setPromptSaveStatuses(prev => [\n-        ...prev.filter(s => s.id !== prompt.id),\n-        { id: prompt.id || '', status: 'saved', lastSaved: new Date().toISOString() } as SaveStatus\n-      ]);\n-\n-      toast.success(`Prompt ${promptIndex + 1} saved successfully`);\n-    } catch (error) {\n-      console.error('Error saving prompt:', error);\n-      setPromptSaveStatuses(prev => [\n-        ...prev.filter(s => s.id !== prompt.id),\n-        { id: prompt.id || '', status: 'error' } as SaveStatus\n-      ]);\n-      toast.error(`Failed to save prompt ${promptIndex + 1}`);\n-    }\n-  };\n-\n-  // Add effect to mark items as draft when edited\n-  useEffect(() => {\n-    questions.forEach(question => {\n-      if (!questionSaveStatuses.find(s => s.id === question.id)) {\n-        setQuestionSaveStatuses(prev => [\n-          ...prev,\n-          { id: question.id, status: 'draft' }\n-        ]);\n-      }\n-    });\n-  }, [questions]);\n-\n-  // Add this function with your other handlers\n-  const handleRefreshLesson = async () => {\n-    if (!currentLessonId) {\n-      toast.error('No lesson selected');\n-      return;\n-    }\n-    \n-    try {\n-      toast.loading('Refreshing lesson content...', {\n-        action: {\n-          label: \"Close\",\n-          onClick: () => toast.dismiss()\n-        },\n-      });\n-      await handleLessonSelect(currentLessonId);\n-      toast.success('Content refreshed', {\n-        action: {\n-          label: \"Close\",\n-          onClick: () => toast.dismiss()\n-        },\n-      });\n-    } catch (error) {\n-      console.error('Error refreshing lesson:', error);\n-      toast.error('Failed to refresh content', {\n-        action: {\n-          label: \"Close\",\n-          onClick: () => toast.dismiss()\n-        },\n-      });\n-    }\n-  };\n-\n-  // Add this function to handle refresh\n-  const handleRefreshContent = async () => {\n-    if (!currentLessonId) {\n-      toast.error('No lesson selected');\n-      return;\n-    }\n-    \n-    toast.loading('Refreshing content...');\n-    try {\n-      await loadLessonContent(currentLessonId);\n-      toast.success('Content refreshed');\n-    } catch (error) {\n-      console.error('Refresh error:', error);\n-      toast.error('Failed to refresh content');\n-    }\n-  };\n-\n-  // Update the sidebar hover mechanism\n-  const handleSidebarHover = useCallback(\n-    debounce((isHovering: boolean) => {\n-      if (!isSidebarLocked && !isNavigating && !isDropdownOpen) {\n-        if (isHovering || document.activeElement?.closest('.sidebar-content')) {\n-          setIsSidebarCollapsed(false);\n-        } else {\n-          setTimeout(() => {\n-            if (!isDropdownOpen) { // Only collapse if dropdown is closed\n-              setIsSidebarCollapsed(true);\n-            }\n-          }, 300);\n-        }\n-      }\n-    }, 100),\n-    [isSidebarLocked, isNavigating, isDropdownOpen]\n-  );\n-\n-  // Update the sidebar JSX\n-  <div \n-    className={cn(\n-      \"transition-all duration-300 ease-in-out relative\",\n-      isSidebarCollapsed ? \"w-20\" : \"w-80\",\n-      \"flex-shrink-0 group\"\n-    )}\n-    onMouseEnter={() => {\n-      handleSidebarHover(true);\n-      // Immediately expand on mouse enter\n-      if (!isSidebarLocked) {\n-        setIsSidebarCollapsed(false);\n-      }\n-    }}\n-    onMouseLeave={() => {\n-      // Only collapse if not interacting with content\n-      if (!document.activeElement?.closest('.sidebar-content')) {\n-        handleSidebarHover(false);\n-      }\n-    }}\n-    onFocus={() => setIsSidebarCollapsed(false)}\n-  >\n-    <Card className={cn(\n-      \"h-full relative sidebar-content\", // Added sidebar-content class\n-      \"transition-shadow duration-300\",\n-      \"hover:shadow-lg\"\n-    )}>\n-      {/* Rest of sidebar content */}\n-    </Card>\n-  </div>\n-\n-  // Add this component for the right plane content view\n-  const ContentHierarchyView = () => {\n-    return (\n-      <div className=\"p-6\">\n-        <Card>\n-          <CardHeader>\n-            <div className=\"flex items-center justify-between\">\n-              <div className=\"space-y-1\">\n-                <CardTitle>Content Structure</CardTitle>\n-                <CardDescription>View and manage your educational content</CardDescription>\n-              </div>\n-            </div>\n-          </CardHeader>\n-          <CardContent>\n-            <div className=\"space-y-6\">\n-              {topics.map((topic) => (\n-                <Card key={topic.id} className=\"border-l-4 border-l-primary/40 hover:border-l-primary transition-all\">\n-                  <CardHeader className=\"py-4\">\n-                    <div className=\"flex items-center justify-between\">\n-                      <div className=\"flex items-center gap-2\">\n-                        <Layers className=\"h-5 w-5 text-primary\" />\n-                        <div>\n-                          <h3 className=\"font-semibold\">{topic.title}</h3>\n-                          {topic.description && (\n-                            <p className=\"text-sm text-muted-foreground\">{topic.description}</p>\n-                          )}\n-                        </div>\n-                      </div>\n-                      <AlertDialog>\n-                        <AlertDialogTrigger asChild>\n-                          <Button \n-                            variant=\"ghost\" \n-                            size=\"sm\"\n-                            className=\"hover:bg-destructive/10 hover:text-destructive\"\n-                          >\n-                            <Trash className=\"h-4 w-4\" />\n-                          </Button>\n-                        </AlertDialogTrigger>\n-                        <AlertDialogContent>\n-                          <AlertDialogHeader>\n-                            <AlertDialogTitle>Delete Topic</AlertDialogTitle>\n-                            <AlertDialogDescription>\n-                              This will permanently delete \"{topic.title}\" and all its content.\n-                            </AlertDialogDescription>\n-                          </AlertDialogHeader>\n-                          <AlertDialogFooter>\n-                            <AlertDialogCancel>Cancel</AlertDialogCancel>\n-                            <AlertDialogAction onClick={() => handleDeleteTopic(topic.id)}>\n-                              Delete\n-                            </AlertDialogAction>\n-                          </AlertDialogFooter>\n-                        </AlertDialogContent>\n-                      </AlertDialog>\n-                    </div>\n-                  </CardHeader>\n-                  <CardContent className=\"pt-0\">\n-                    {/* Subtopics */}\n-                    <div className=\"ml-6 space-y-4\">\n-                      {subtopics\n-                        .filter(sub => sub.topic_id === topic.id)\n-                        .map((subtopic) => {\n-                          const subtopicLessons = lessons.filter(l => l.subtopic_id === subtopic.id);\n-                          const isEmpty = subtopicLessons.length === 0;\n-                          \n-                          return (\n-                            <Card key={subtopic.id} className={cn(\n-                              \"border-l-2\",\n-                              isEmpty ? \"border-l-yellow-500/40\" : \"border-l-primary/40\",\n-                              \"hover:border-l-primary transition-all\"\n-                            )}>\n-                              <CardHeader className=\"py-3\">\n-                                <div className=\"flex items-center justify-between\">\n-                                  <div className=\"flex items-center gap-2\">\n-                                    <BookOpen className=\"h-4 w-4 text-primary\" />\n-                                    <div>\n-                                      <h4 className=\"font-medium\">{subtopic.title}</h4>\n-                                      {isEmpty && (\n-                                        <Badge variant=\"outline\" className=\"text-yellow-500 border-yellow-500/20\">\n-                                          Empty\n-                                        </Badge>\n-                                      )}\n-                                    </div>\n-                                  </div>\n-                                  <AlertDialog>\n-                                    <AlertDialogTrigger asChild>\n-                                      <Button \n-                                        variant=\"ghost\" \n-                                        size=\"sm\"\n-                                        className=\"hover:bg-destructive/10 hover:text-destructive\"\n-                                      >\n-                                        <Trash className=\"h-4 w-4\" />\n-                                      </Button>\n-                                    </AlertDialogTrigger>\n-                                    <AlertDialogContent>\n-                                      <AlertDialogHeader>\n-                                        <AlertDialogTitle>Delete Subtopic</AlertDialogTitle>\n-                                        <AlertDialogDescription>\n-                                          This will permanently delete \"{subtopic.title}\" and all its lessons.\n-                                        </AlertDialogDescription>\n-                                      </AlertDialogHeader>\n-                                      <AlertDialogFooter>\n-                                        <AlertDialogCancel>Cancel</AlertDialogCancel>\n-                                        <AlertDialogAction onClick={() => handleDeleteSubtopic(subtopic.id)}>\n-                                          Delete\n-                                        </AlertDialogAction>\n-                                      </AlertDialogFooter>\n-                                    </AlertDialogContent>\n-                                  </AlertDialog>\n-                                </div>\n-                              </CardHeader>\n-                              {subtopicLessons.length > 0 && (\n-                                <CardContent className=\"py-0 pl-6\">\n-                                  <div className=\"space-y-2\">\n-                                    {subtopicLessons.map((lesson) => (\n-                                      <div key={lesson.id} \n-                                        className=\"flex items-center justify-between p-2 rounded-md hover:bg-accent/50 transition-colors\"\n-                                      >\n-                                        <div className=\"flex items-center gap-2\">\n-                                          <FileText className=\"h-4 w-4 text-muted-foreground\" />\n-                                          <span className=\"text-sm\">{lesson.title}</span>\n-                                        </div>\n-                                        <AlertDialog>\n-                                          <AlertDialogTrigger asChild>\n-                                            <Button \n-                                              variant=\"ghost\" \n-                                              size=\"sm\"\n-                                              className=\"hover:bg-destructive/10 hover:text-destructive\"\n-                                            >\n-                                              <Trash className=\"h-4 w-4\" />\n-                                            </Button>\n-                                          </AlertDialogTrigger>\n-                                          <AlertDialogContent>\n-                                            <AlertDialogHeader>\n-                                              <AlertDialogTitle>Delete Lesson</AlertDialogTitle>\n-                                              <AlertDialogDescription>\n-                                                This will permanently delete \"{lesson.title}\".\n-                                              </AlertDialogDescription>\n-                                            </AlertDialogHeader>\n-                                            <AlertDialogFooter>\n-                                              <AlertDialogCancel>Cancel</AlertDialogCancel>\n-                                              <AlertDialogAction onClick={() => handleDeleteLesson(lesson.id)}>\n-                                                Delete\n-                                              </AlertDialogAction>\n-                                            </AlertDialogFooter>\n-                                          </AlertDialogContent>\n-                                        </AlertDialog>\n-                                      </div>\n-                                    ))}\n-                                  </div>\n-                                </CardContent>\n-                              )}\n-                            </Card>\n-                          );\n-                      })}\n-                    </div>\n-                  </CardContent>\n-                </Card>\n-              ))}\n-            </div>\n-          </CardContent>\n-        </Card>\n-      </div>\n-    );\n-  };\n-\n-  // Update the main return to use this component\n-  return (\n-    <div className=\"flex h-screen overflow-hidden\">\n-      {/* Left sidebar remains the same */}\n-      <div className=\"w-80 border-r bg-card overflow-y-auto\">\n-        {/* ... existing sidebar code ... */}\n-      </div>\n-\n-      {/* Right content area */}\n-      <div className=\"flex-1 overflow-y-auto\">\n-        {isViewMode && selectedGrade ? (\n-          <ContentHierarchyView />\n-        ) : (\n-          // ... existing content ...\n-        )}\n-      </div>\n-    </div>\n-    \n-\n-      {/* Floating Save Button */}\n-      {selectedSubtopicId && currentLessonId && (\n-          <div className=\"fixed bottom-4 right-4 flex flex-col gap-2\">\n-            <TooltipProvider>\n-              <Tooltip>\n-                <TooltipTrigger asChild>\n-                  <Button\n-                    size=\"icon\"\n-                    className=\"rounded-full h-12 w-12 shadow-lg\"\n-                    onClick={handleSaveLesson}\n-                    disabled={!selectedSubtopicId || !lessonTitle || questions.length === 0}\n-                  >\n-                    <Save className=\"h-6 w-6\" />\n-                  </Button>\n-                </TooltipTrigger>\n-                <TooltipContent>\n-                  <p>Save Lesson (Ctrl+S)</p>\n-                </TooltipContent>\n-              </Tooltip>\n-            </TooltipProvider>\n-          </div>\n-        )}\n-        <SaveFeedback />\n-\n-        {/* Add Grade Modal - do not delete */}\n-        {/* {modalState.showAddGrade && (\n-          <Dialog \n-            open={modalState.showAddGrade} \n-            onOpenChange={(open) => handleModalStateChange('showAddGrade', open)}\n-          >\n-            <DialogContent \n-              className=\"sm:max-w-[425px]\"\n-              onEscapeKeyDown={cleanupModalState}\n-              onPointerDownOutside={cleanupModalState}\n-            >\n-              <DialogHeader>\n-                <DialogTitle>Add New Grade</DialogTitle>\n-                <DialogDescription>Enter the details for the new grade.</DialogDescription>\n-              </DialogHeader>\n-              <div className=\"space-y-4 py-4\">\n-                <div className=\"space-y-2\">\n-                  <Label htmlFor=\"grade-name\">Grade Name</Label>\n-                  <Input\n-                    id=\"grade-name\"\n-                    value={newItemData.name}\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n-                    placeholder=\"Enter grade name\"\n-                  />\n-      </div>\n-              </div>\n-              <DialogFooter>\n-                <Button variant=\"outline\" onClick={() => {\n-                  setModalState({ ...modalState, showAddGrade: false });\n-                  setNewItemData({ name: '', description: '' });\n-                }}>\n-                  Cancel\n-                </Button>\n-                <Button onClick={handleCreateGrade} disabled={!newItemData.name}>Create Grade</Button>\n-              </DialogFooter>\n-            </DialogContent>\n-          </Dialog>\n-        )} */}\n-\n-        {/* Add Topic Modal */}\n-        {modalState.showAddTopic && (\n-          <Dialog \n-            open={modalState.showAddTopic} \n-            onOpenChange={(open) => handleModalStateChange('showAddTopic', open)}\n-          >\n-            <DialogContent \n-              className=\"sm:max-w-[425px]\"\n-              onEscapeKeyDown={cleanupModalState}\n-              onPointerDownOutside={cleanupModalState}\n-            >\n-              <DialogHeader>\n-                <DialogTitle>Add New Topic</DialogTitle>\n-                <DialogDescription>Enter the details for the new topic.</DialogDescription>\n-              </DialogHeader>\n-              <div className=\"space-y-4 py-4\">\n-                <div className=\"space-y-2\">\n-                  <Label htmlFor=\"topic-name\">Topic Name</Label>\n-                  <Input\n-                    id=\"topic-name\"\n-                    value={newItemData.name}\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n-                    placeholder=\"Enter topic name\"\n-                  />\n-                </div>\n-              </div>\n-              <DialogFooter>\n-                <Button variant=\"outline\" onClick={() => {\n-                  setModalState({ ...modalState, showAddTopic: false });\n-                  setNewItemData({ name: '', description: '' });\n-                }}>\n-                  Cancel\n-                </Button>\n-                <Button onClick={handleCreateTopic} disabled={!newItemData.name}>Create Topic</Button>\n-              </DialogFooter>\n-            </DialogContent>\n-          </Dialog>\n-        )}\n-\n-        {/* Add Subtopic Modal */}\n-        {modalState.showAddSubtopic && (\n-          <Dialog \n-            open={modalState.showAddSubtopic} \n-            onOpenChange={(open) => handleModalStateChange('showAddSubtopic', open)}\n-          >\n-            <DialogContent \n-              className=\"sm:max-w-[425px]\"\n-              onEscapeKeyDown={cleanupModalState}\n-              onPointerDownOutside={cleanupModalState}\n-            >\n-              <DialogHeader>\n-                <DialogTitle>Add New Subtopic</DialogTitle>\n-                <DialogDescription>Enter the details for the new subtopic.</DialogDescription>\n-              </DialogHeader>\n-              <div className=\"space-y-4 py-4\">\n-                <div className=\"space-y-2\">\n-                  <Label htmlFor=\"subtopic-name\">Subtopic Name</Label>\n-                  <Input\n-                    id=\"subtopic-name\"\n-                    value={newItemData.name}\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n-                    placeholder=\"Enter subtopic name\"\n-                  />\n-                </div>\n-              </div>\n-              <DialogFooter>\n-                <Button variant=\"outline\" onClick={() => {\n-                  setModalState({ ...modalState, showAddSubtopic: false });\n-                  setNewItemData({ name: '', description: '' });\n-                }}>\n-                  Cancel\n-                </Button>\n-                <Button onClick={() => handleCreateSubtopic({ title: newItemData.name })} disabled={!newItemData.name}>Create Subtopic</Button>\n-              </DialogFooter>\n-            </DialogContent>\n-          </Dialog>\n-        )}\n-\n-        {/* Add Lesson Modal */}\n-        {modalState.showAddLesson && (\n-          <Dialog \n-            open={modalState.showAddLesson} \n-            onOpenChange={(open) => handleModalStateChange('showAddLesson', open)}\n-          >\n-            <DialogContent \n-              className=\"sm:max-w-[425px]\"\n-              onEscapeKeyDown={cleanupModalState}\n-              onPointerDownOutside={cleanupModalState}\n-            >\n-              <DialogHeader>\n-                <DialogTitle>Add New Lesson</DialogTitle>\n-                <DialogDescription>Enter the details for the new lesson.</DialogDescription>\n-              </DialogHeader>\n-              <div className=\"space-y-4 py-4\">\n-                <div className=\"space-y-2\">\n-                  <Label htmlFor=\"lesson-name\">Lesson Title</Label>\n-                  <Input\n-                    id=\"lesson-name\"\n-                    value={newItemData.name}\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n-                    placeholder=\"Enter lesson title\"\n-                  />\n-                </div>\n-              </div>\n-              <DialogFooter>\n-                <Button variant=\"outline\" onClick={() => {\n-                  setModalState({ ...modalState, showAddLesson: false });\n-                  setNewItemData({ name: '', description: '' });\n-                }}>\n-                  Cancel\n-                </Button>\n-                <Button onClick={handleCreateLesson} disabled={!newItemData.name}>Create Lesson</Button>\n-              </DialogFooter>\n-            </DialogContent>\n-          </Dialog>\n-        )}\n-      </div>\n-      <Toaster />\n-      </div>\n-  );\n-}\n-\n-// Add these handler functions\n-const handleDeleteTopic = async (topicId: string) => {\n-  try {\n-    // First fetch all subtopics to cascade delete\n-    const { data: subtopicsToDelete } = await supabase\n-      .from('subtopics')\n-      .select('id')\n-      .eq('topic_id', topicId);\n-\n-    // Delete all lessons from these subtopics\n-    if (subtopicsToDelete?.length) {\n-      for (const subtopic of subtopicsToDelete) {\n-        await supabase\n-          .from('lessons')\n-          .delete()\n-          .eq('subtopic_id', subtopic.id);\n-      }\n-    }\n-\n-    // Delete all subtopics\n-    await supabase\n-      .from('subtopics')\n-      .delete()\n-      .eq('topic_id', topicId);\n-\n-    // Finally delete the topic\n-    await supabase\n-      .from('topics')\n-      .delete()\n-      .eq('id', topicId);\n-\n-    // Update local state\n-    setTopics(topics.filter(t => t.id !== topicId));\n-    toast.success('Topic deleted successfully');\n-  } catch (error) {\n-    console.error('Error deleting topic:', error);\n-    toast.error('Failed to delete topic');\n-  }\n-};\n-\n-const handleDeleteSubtopic = async (subtopicId: string) => {\n-  try {\n-    // First delete all lessons\n-    await supabase\n-      .from('lessons')\n-      .delete()\n-      .eq('subtopic_id', subtopicId);\n-\n-    // Then delete the subtopic\n-    await supabase\n-      .from('subtopics')\n-      .delete()\n-      .eq('id', subtopicId);\n-\n-    // Update local state\n-    setSubtopics(subtopics.filter(s => s.id !== subtopicId));\n-    toast.success('Subtopic deleted successfully');\n-  } catch (error) {\n-    console.error('Error deleting subtopic:', error);\n-    toast.error('Failed to delete subtopic');\n-  }\n-};\n-\n-const handleDeleteLesson = async (lessonId: string) => {\n-  try {\n-    // Delete all questions and their exercise prompts\n-    const { data: questions } = await supabase\n-      .from('questions')\n-      .select('id')\n-      .eq('lesson_id', lessonId);\n-\n-    if (questions?.length) {\n-      for (const question of questions) {\n-        // Delete exercise prompts\n-        await supabase\n-          .from('exercise_prompts')\n-          .delete()\n-          .eq('question_id', question.id);\n-      }\n-\n-      // Delete questions\n-      await supabase\n-        .from('questions')\n-        .delete()\n-        .eq('lesson_id', lessonId);\n-    }\n-\n-    // Delete lesson content\n-    await supabase\n-      .from('lesson_content')\n-      .delete()\n-      .eq('lesson_id', lessonId);\n-\n-    // Finally delete the lesson\n-    await supabase\n-      .from('lessons')\n-      .delete()\n-      .eq('id', lessonId);\n-\n-    // Update local state\n-    setLessons(lessons.filter(l => l.id !== lessonId));\n-    toast.success('Lesson deleted successfully');\n-  } catch (error) {\n-    console.error('Error deleting lesson:', error);\n-    toast.error('Failed to delete lesson');\n-  }\n-};\n\\ No newline at end of file\n+\"use client\";\r\n+\r\n+import { useState, useCallback, useEffect, useRef } from 'react';\r\n+import { toast } from 'sonner';\r\n+import { Toaster } from 'sonner';\r\n+import Link from 'next/link';\r\n+import {  Activity as ActivityIcon,  ArrowLeft,  BookOpen,  ChevronDown,  ChevronRight,  Check,  Edit,  Eye,  EyeOff,  HelpCircle,  Layers,  List,  MessageSquare,  Plus,  Save,  Trash as Trash2, X, Pencil, Lock, Unlock, RefreshCw, Clock, Bell, Moon, GraduationCap, MoreHorizontal, Loader2 } from 'lucide-react';\r\n+import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\n+import { Badge } from '@/components/ui/badge';\r\n+import { Button } from '@/components/ui/button';\r\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\n+import { Input } from '@/components/ui/input';\r\n+import { Label } from '@/components/ui/label';\r\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\n+import { Textarea } from '@/components/ui/textarea';\r\n+import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\r\n+import { cn } from '@/lib/utils';\r\n+import { API_BASE_URL, QUESTION_TYPES, isQuestionType } from './constants';\r\n+import { ExercisePrompt, Lesson } from './types';\r\n+import { QuestionFormProps, ExercisePromptCardProps, Activity, Grade, Topic, Subtopic as SubTopic } from './types';\r\n+import { QuestionForm } from './components/question-form';\r\n+import { ExercisePromptCard } from './components/exercise-prompt-card';\r\n+import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\r\n+import { supabase } from '@/lib/supabase';\r\n+import { useContentStore } from '@/lib/content/store';\r\n+import { contentService } from '@/lib/content/ContentService';\r\n+import { MediaPreview } from '@/components/ui/media-preview';\r\n+import { QuestionTypeSelect } from './components/question-type-select';\r\n+import { RichTextEditor } from '@/components/ui/rich-text-editor';\r\n+import {\r\n+  AlertDialog,\r\n+  AlertDialogAction,\r\n+  AlertDialogCancel,\r\n+  AlertDialogContent,\r\n+  AlertDialogDescription,\r\n+  AlertDialogFooter,\r\n+  AlertDialogHeader,\r\n+  AlertDialogTitle,\r\n+  AlertDialogTrigger,\r\n+} from \"@/components/ui/alert-dialog\";\r\n+import { debounce, isNull } from 'lodash';\r\n+import { PostgrestError } from '@supabase/supabase-js';\r\n+import { Question as ContentQuestion } from './types';  // Import the specific type\r\n+import { Trash } from \"lucide-react\";\r\n+import { AnimatePresence, motion } from 'framer-motion';\r\n+\r\n+\r\n+// Update the API endpoint to match your backend route\r\n+const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\r\n+\r\n+interface QuestionTypeSelectProps {\r\n+  value: string;\r\n+  onValueChange: (value: string) => void;\r\n+}\r\n+\r\n+// Add metadata type\r\n+interface LessonMetadata {\r\n+  lastEdited?: string;\r\n+  version?: number;\r\n+  tags?: string[];\r\n+  status?: 'draft' | 'published';\r\n+  authorId?: string;\r\n+  duration?: number;\r\n+  transcript?: string;\r\n+}\r\n+\r\n+type ContentType = 'html' | 'markdown' | 'rich-text' | 'text' | 'json';\r\n+\r\n+interface LessonContent {\r\n+  id: string;\r\n+  lesson_id: string;\r\n+  content: any[];\r\n+  metadata: {\r\n+    lastEdited?: string;\r\n+    version?: number;\r\n+    status?: 'draft' | 'published';\r\n+    authorId?: string;\r\n+  };\r\n+  content_type: string;\r\n+  order_index: number;\r\n+  updated_at: string;\r\n+  user_id: string;\r\n+}\r\n+\r\n+interface InlineEditProps {\r\n+  value: string;\r\n+  onSave: (value: string) => void;\r\n+  isEditing: boolean;\r\n+  setIsEditing: (value: boolean) => void;\r\n+  placeholder?: string;\r\n+  className?: string;\r\n+}\r\n+\r\n+// Add validation interface\r\n+interface QuestionValidation {\r\n+  isValid: boolean;\r\n+  message: string;\r\n+}\r\n+\r\n+// Add this type validation helper\r\n+const getQuestionTypeFields = (type: string) => {\r\n+  switch (type) {\r\n+    case 'multipleChoice':\r\n+      return {\r\n+        required: ['prompt', 'options', 'correctAnswer'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          options: [],\r\n+          correctAnswer: '',\r\n+          teacherScript: '',\r\n+          explanation: ''\r\n+        }\r\n+      };\r\n+    case 'fillInBlank':\r\n+      return {\r\n+        required: ['prompt', 'blanks'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          blanks: [],\r\n+          teacherScript: '',\r\n+          explanation: ''\r\n+        }\r\n+      };\r\n+    case 'trueFalse':\r\n+      return {\r\n+        required: ['prompt', 'correctAnswer'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          correctAnswer: null,\r\n+          teacherScript: '',\r\n+          explanation: ''\r\n+        }\r\n+      };\r\n+    case 'matching':\r\n+      return {\r\n+        required: ['prompt', 'pairs'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          pairs: [],\r\n+          teacherScript: '',\r\n+          explanation: ''\r\n+        }\r\n+      };\r\n+    case 'ordering':\r\n+      return {\r\n+        required: ['prompt', 'items'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          items: [],\r\n+          correctOrder: [],\r\n+          teacherScript: '',\r\n+          explanation: ''\r\n+        }\r\n+      };\r\n+    case 'shortAnswer':\r\n+      return {\r\n+        required: ['prompt', 'sampleAnswer'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          sampleAnswer: '',\r\n+          teacherScript: '',\r\n+          explanation: '',\r\n+          keywords: []\r\n+        }\r\n+      };\r\n+    case 'speaking':\r\n+      return {\r\n+        required: ['prompt', 'sampleAnswer'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          sampleAnswer: '',\r\n+          teacherScript: '',\r\n+          audioPrompt: '',\r\n+          pronunciation: ''\r\n+        }\r\n+      };\r\n+    case 'listening':\r\n+      return {\r\n+        required: ['prompt', 'audioContent'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          audioContent: '',\r\n+          transcript: '',\r\n+          teacherScript: '',\r\n+          comprehensionQuestions: []\r\n+        }\r\n+      };\r\n+    case 'listenAndRepeat':\r\n+      return {\r\n+        required: ['prompt', 'audioContent'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          audioContent: '',\r\n+          targetPhrase: '',\r\n+          teacherScript: '',\r\n+          pronunciation: ''\r\n+        }\r\n+      };\r\n+    default:\r\n+      return {\r\n+        required: ['prompt'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          teacherScript: ''\r\n+        }\r\n+      };\r\n+  }\r\n+}\r\n+\r\n+interface SaveStatus {\r\n+  id: string;\r\n+  status: 'draft' | 'saved' | 'saving' | 'error';\r\n+  lastSaved?: string;\r\n+}\r\n+\r\n+interface Question {\r\n+  id: string;\r\n+  type: string;\r\n+  lesson_id: string;\r\n+  title: string;\r\n+  content: string;\r\n+  metadata: Record<string, any>;\r\n+  data: Record<string, any>; // This allows dynamic field access\r\n+  correct_answer: string;\r\n+  exercisePrompts: ExercisePrompt[];\r\n+  isDraft?: boolean;\r\n+}\r\n+\r\n+// Add at the top of the file with other type definitions\r\n+type QuestionType = keyof typeof QUESTION_TYPES;\r\n+\r\n+// Add this type guard function\r\n+const isValidQuestionType = (type: string): type is QuestionType => {\r\n+  return type in QUESTION_TYPES;\r\n+};\r\n+\r\n+// Update handleAddQuestion\r\n+\r\n+\r\n+// Update validateQuestion\r\n+const validateQuestion = (question: Question): QuestionValidation => {\r\n+  const { required } = getQuestionTypeFields(question.type);\r\n+  const missingFields = required.filter(field => {\r\n+    const value = question.data?.[field];\r\n+    return !value || \r\n+      (Array.isArray(value) && value.length === 0) || \r\n+      (typeof value === 'string' && !value.trim());\r\n+  });\r\n+\r\n+  if (missingFields.length > 0) {\r\n+    return {\r\n+      isValid: false,\r\n+      message: `Missing required fields: ${missingFields.join(', ')}`\r\n+    };\r\n+  }\r\n+\r\n+  return { isValid: true, message: '' };\r\n+};\r\n+\r\n+// Add proper type for question data\r\n+interface QuestionData {\r\n+  id?: string;\r\n+  content?: string;\r\n+  type?: string;\r\n+  data?: {\r\n+    prompt?: string;\r\n+    teacher_script?: string;\r\n+    followup_prompt?: string[];\r\n+    sample_answer?: string;\r\n+    answer?: string;\r\n+  } | null;\r\n+  prompt: string;\r\n+  teacherScript: string;\r\n+  followup_prompt: string[];\r\n+  answer?: string;\r\n+  correct_answer?: string;\r\n+}\r\n+\r\n+// In your component where you handle questions\r\n+const handleQuestionData = (question: QuestionData) => {\r\n+  return {\r\n+    ...question,\r\n+    data: {\r\n+      prompt: question?.data?.prompt || '',\r\n+      teacher_script: question?.data?.teacher_script || '',\r\n+      followup_prompt: question?.data?.followup_prompt || [],\r\n+      sample_answer: question?.data?.sample_answer || undefined,  // Convert null to undefined\r\n+      answer: question?.data?.answer || undefined  // Convert null to undefined\r\n+    } as const,\r\n+    sampleAnswer: question?.correct_answer || ''\r\n+  };\r\n+};\r\n+\r\n+export default function LessonManagementPage() {\r\n+  // State declarations\r\n+  \r\n+  const [selectedGradeId, setSelectedGradeId] = useState<string | null>(null);\r\n+  const [selectedTopicId, setSelectedTopicId] = useState<string | null>(null);\r\n+  const [selectedSubtopicId, setSelectedSubtopicId] = useState<string | null>(null);\r\n+  const [lessonTitle, setLessonTitle] = useState<string>('');\r\n+  const [currentLessonId, setCurrentLessonId] = useState<string | null>(null);\r\n+  const [questions, setQuestions] = useState<Question[]>([]);\r\n+  const [saveProgress, setSaveProgress] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');\r\n+  const [activities, setActivities] = useState<Activity[]>([]);\r\n+  const [localBuffer, setLocalBuffer] = useState<{ timestamp: number; data: any } | null>(null);\r\n+  const [lastSavedToServer, setLastSavedToServer] = useState<number>(Date.now());\r\n+  const [selectedQuestionType, setSelectedQuestionType] = useState<string>('');\r\n+  const [editingQuestionIndex, setEditingQuestionIndex] = useState<number | null>(null);\r\n+  const [showHelpTips, setShowHelpTips] = useState(true);\r\n+  const [isNavigating, setIsNavigating] = useState(false);\r\n+  const [lessons, setLessons] = useState<Lesson[]>([]);\r\n+  const [grades, setGrades] = useState<Grade[]>([]);\r\n+  const [topics, setTopics] = useState<Topic[]>([]);\r\n+  const [subtopics, setSubtopics] = useState<SubTopic[]>([]);\r\n+  const [contentHeading, setContentHeading] = useState<string>('');\r\n+    // Add with your other state declarations\r\n+  const [isContentExpanded, setIsContentExpanded] = useState<boolean>(false);\r\n+  const [modalState, setModalState] = useState({\r\n+    showAddGrade: false,\r\n+    showAddTopic: false,\r\n+    showAddSubtopic: false,\r\n+    showAddLesson: false\r\n+  });\r\n+  const [isViewMode, setIsViewMode] = useState<boolean>(true);\r\n+  const [expandedGrade, setExpandedGrade] = useState<string | null>(null);\r\n+  const [expandedTopic, setExpandedTopic] = useState<string | null>(null);\r\n+  const [expandedSubtopic, setExpandedSubtopic] = useState<string | null>(null);\r\n+  const [expandedQuestion, setExpandedQuestion] = useState<number | null>(null);\r\n+  const [expandedActivity, setExpandedActivity] = useState<number | null>(null);\r\n+  const [newItemData, setNewItemData] = useState({\r\n+    name: '',\r\n+    description: ''\r\n+  });\r\n+  const [lessonContent, setLessonContent] = useState<string>('');\r\n+  const [isContentEditorOpen, setIsContentEditorOpen] = useState(false);\r\n+  const [isEditingTitle, setIsEditingTitle] = useState<boolean>(false);\r\n+  const [isEditingHeading, setIsEditingHeading] = useState<boolean>(false);\r\n+  const [isEditingDescription, setIsEditingDescription] = useState<boolean>(false);\r\n+  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\r\n+  const [isSidebarLocked, setIsSidebarLocked] = useState(true);\r\n+  const [alertDialogState, setAlertDialogState] = useState<{\r\n+    isOpen: boolean;\r\n+    title: string;\r\n+    message: string;\r\n+    onConfirm: (value?: unknown) => void;\r\n+  }>({\r\n+    isOpen: false,\r\n+    title: '',\r\n+    message: '',\r\n+    onConfirm: () => {}\r\n+  });\r\n+\r\n+  const { \r\n+    selectedGrade,\r\n+    setSelectedGrade,\r\n+    selectedTopic,\r\n+    setSelectedTopic,\r\n+    selectedSubtopic,\r\n+    setSelectedSubtopic,\r\n+    selectedLesson,\r\n+    setSelectedLesson\r\n+  } = useContentStore();\r\n+\r\n+  // Add new state for tracking save status\r\n+  interface SaveStatus {\r\n+    id: string;\r\n+    status: 'draft' | 'saved' | 'saving' | 'error' | 'draft';\r\n+    lastSaved?: string;\r\n+  }\r\n+\r\n+  const [questionSaveStatuses, setQuestionSaveStatuses] = useState<Array<{\r\n+    id: string;\r\n+    status: 'idle' | 'saving' | 'saved' | 'error' | 'draft';\r\n+  }>>([]);\r\n+  const [promptSaveStatuses, setPromptSaveStatuses] = useState<SaveStatus[]>([]);\r\n+\r\n+  // Add this state to track dropdown state\r\n+  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n+\r\n+  // Add these states\r\n+  const [isLoadingSubtopics, setIsLoadingSubtopics] = useState(false);\r\n+  const [isLoadingLessons, setIsLoadingLessons] = useState(false);\r\n+\r\n+  // Event handlers\r\n+  const handleQuestionTypeChange = useCallback((type: string) => {\r\n+    if (isQuestionType(type)) {\r\n+      setSelectedQuestionType(type);\r\n+    }\r\n+  }, []);\r\n+\r\n+  const handleAddQuestion = useCallback(() => {\r\n+    if (!selectedQuestionType || !isQuestionType(selectedQuestionType)) return;\r\n+\r\n+    const defaultData = QUESTION_TYPES[selectedQuestionType].defaultData;\r\n+    const newQuestion: Question = {\r\n+      id: crypto.randomUUID(),\r\n+      type: selectedQuestionType,\r\n+      //data: {},\r\n+      title: 'New Question',\r\n+      content: '',\r\n+      lesson_id: currentLessonId || '',\r\n+      metadata: {},\r\n+      data: {\r\n+        ...defaultData,\r\n+        prompt: '',\r\n+        teacher_script: '',\r\n+        followup_prompt: [],\r\n+        sample_answer: ''\r\n+      },\r\n+      correct_answer: '',\r\n+      exercisePrompts: [],\r\n+      isDraft: true\r\n+    };\r\n+\r\n+    setQuestions(prev => [...prev, newQuestion]);\r\n+    setQuestionSaveStatuses(prev => [\r\n+      ...prev,\r\n+      { id: newQuestion.id, status: 'draft' }\r\n+    ]);\r\n+    setSelectedQuestionType('');\r\n+  }, [selectedQuestionType, currentLessonId]);\r\n+\r\n+  const handleRemoveQuestion = async (index: number) => {\r\n+    try {\r\n+      const questionToDelete = questions[index];\r\n+      \r\n+      // Delete related exercise prompts first\r\n+      const { error: promptError } = await supabase\r\n+        .from('exercise_prompts')\r\n+        .delete()\r\n+        .eq('question_id', questionToDelete.id);\r\n+\r\n+      if (promptError) throw promptError;\r\n+\r\n+      // Then delete the question\r\n+      const { error: questionError } = await supabase\r\n+        .from('questions')\r\n+        .delete()\r\n+        .eq('id', questionToDelete.id);\r\n+\r\n+      if (questionError) throw questionError;\r\n+\r\n+      // Update local state\r\n+      const newQuestions = questions.filter((_, i) => i !== index);\r\n+      setQuestions(newQuestions);\r\n+      \r\n+      toast.success('Question and related prompts deleted successfully');\r\n+    } catch (error) {\r\n+      console.error('Error deleting question:', error);\r\n+      toast.error('Failed to delete question and prompts');\r\n+    }\r\n+  };\r\n+\r\n+  const handleUpdateQuestion = useCallback(async (index: number, updatedQuestion: Question) => {\r\n+    const newQuestions = [...questions];\r\n+    newQuestions[index] = updatedQuestion;\r\n+    setQuestions(newQuestions);\r\n+    setQuestionSaveStatuses(prev => prev.map((status, i) => \r\n+      i === index ? { ...status, status: 'draft' } : status\r\n+    ));\r\n+  }, [questions]);\r\n+\r\n+  const handleAddExercisePrompt = useCallback((questionIndex: number) => {\r\n+    setQuestions(prev => prev.map((question, i) => {\r\n+      if (i === questionIndex) {\r\n+        return {\r\n+          ...question,\r\n+          exercisePrompts: [\r\n+            ...question.exercisePrompts,\r\n+            {\r\n+              id: crypto.randomUUID(),\r\n+              text: '',\r\n+              media: '',\r\n+              type: 'image',\r\n+              narration: 'Your turn',\r\n+              saytext: 'Say: ',\r\n+              metadata: {\r\n+                estimatedTime: 0\r\n+              },\r\n+              created_at: new Date().toISOString(),\r\n+              updated_at: new Date().toISOString()\r\n+            }\r\n+          ]\r\n+        };\r\n+      }\r\n+      return question;\r\n+    }));\r\n+  }, []);\r\n+\r\n+  const handleRemoveExercisePrompt = useCallback((questionIndex: number, promptIndex: number) => {\r\n+    setQuestions(prev => prev.map((question, i) => {\r\n+      if (i === questionIndex) {\r\n+        return {\r\n+          ...question,\r\n+          exercisePrompts: question.exercisePrompts.filter((_, j) => j !== promptIndex)\r\n+        };\r\n+      }\r\n+      return question;\r\n+    }));\r\n+  }, []);\r\n+\r\n+  const handleExercisePromptChange = useCallback(async (\r\n+    questionIndex: number,\r\n+    promptIndex: number,\r\n+    updatedPrompt: ExercisePrompt\r\n+  ) => {\r\n+    try {\r\n+      const promptUpdate = {\r\n+        id: updatedPrompt.id,\r\n+        question_id: updatedPrompt.question_id,\r\n+        text: updatedPrompt.text,\r\n+        type: updatedPrompt.type,\r\n+        narration: updatedPrompt.narration,\r\n+        saytext: updatedPrompt.saytext,\r\n+        media: updatedPrompt.media,\r\n+        // Remove order_index as it's not in schema\r\n+        created_at: new Date().toISOString()\r\n+      };\r\n+\r\n+      const { error: promptError } = await supabase\r\n+        .from('exercise_prompts')\r\n+        .upsert(promptUpdate)\r\n+        .select();\r\n+\r\n+      if (promptError) throw promptError;\r\n+\r\n+      // Update local state\r\n+      setQuestions(prev => prev.map((question, i) => {\r\n+        if (i === questionIndex) {\r\n+          const newPrompts = [...question.exercisePrompts];\r\n+          newPrompts[promptIndex] = updatedPrompt;\r\n+          return { ...question, exercisePrompts: newPrompts };\r\n+        }\r\n+        return question;\r\n+      }));\r\n+\r\n+    } catch (error) {\r\n+      console.error('Error saving prompt:', error);\r\n+      toast.error('Failed to save prompt');\r\n+    }\r\n+  }, []);\r\n+\r\n+  const handleAddActivity = useCallback(() => {\r\n+    const newActivity: Activity = {\r\n+      id: crypto.randomUUID(),\r\n+      lesson_id: currentLessonId || '',\r\n+      created_at: new Date().toISOString(),\r\n+      type: 'practice',\r\n+      title: '',\r\n+      name: '',\r\n+      instructions: '',\r\n+      media: [],\r\n+      data: {\r\n+        prompt: '',\r\n+        teacherScript: '',\r\n+        media: []\r\n+      }\r\n+    };\r\n+    setActivities(prev => [...prev, newActivity]);\r\n+  }, [currentLessonId]);\r\n+\r\n+  const handleUpdateActivity = useCallback((index: number, updatedActivity: Activity) => {\r\n+    setActivities(prev => prev.map((activity, i) => i === index ? updatedActivity : activity));\r\n+  }, []);\r\n+\r\n+  const handleRemoveActivity = useCallback((index: number) => {\r\n+    setActivities(prev => prev.filter((_, i) => i !== index));\r\n+  }, []);\r\n+\r\n+  const handleExercisePromptUpdate = useCallback((questionIndex: number, promptIndex: number, updatedPrompt: ExercisePrompt) => {\r\n+    const updatedQuestions = [...questions];\r\n+    updatedQuestions[questionIndex].exercisePrompts[promptIndex] = updatedPrompt;\r\n+    handleUpdateQuestion(questionIndex, updatedQuestions[questionIndex]);\r\n+  }, [questions, handleUpdateQuestion]);\r\n+\r\n+  const handleQuestionDataChange = useCallback((questionIndex: number, field: string, value: string) => {\r\n+    setQuestions(prev => prev.map((q, i) => \r\n+      i === questionIndex \r\n+        ? { \r\n+            ...q, \r\n+            data: { \r\n+              prompt: q.data?.prompt || '',\r\n+              teacherScript: q.data?.teacherScript || '',\r\n+              ...q.data,\r\n+              [field]: value \r\n+            } \r\n+          }\r\n+        : q\r\n+    ));\r\n+  }, []);\r\n+\r\n+  const [isSaving, setIsSaving] = useState(false);\r\n+\r\n+  const handleSaveLesson = async () => {\r\n+    try {\r\n+      if (!currentLessonId || !selectedSubtopicId) {\r\n+        toast.error('Please select a subtopic and lesson first');\r\n+        return;\r\n+      }\r\n+\r\n+      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\r\n+      if (sessionError) throw sessionError;\r\n+      \r\n+      if (!session?.user) {\r\n+        toast.error('Please sign in to save lessons');\r\n+        return;\r\n+      }\r\n+\r\n+      // Get user's role from session\r\n+      const userRole = session.user.user_metadata?.role;\r\n+      console.log('Current user role:', userRole);\r\n+      console.log('📝 Saving content heading:', {\r\n+        contentHeading,\r\n+        currentLessonId,\r\n+        selectedSubtopicId,\r\n+        timestamp: new Date().toISOString()\r\n+      });\r\n+\r\n+      // Create metadata object\r\n+      const lessonMetadata = {\r\n+        lastEdited: new Date().toISOString(),\r\n+        version: 1,\r\n+        status: 'draft' \r\n+      };\r\n+\r\n+      // Complete lesson data with all fields\r\n+      const lessonData = {\r\n+        id: currentLessonId,\r\n+        title: lessonTitle,\r\n+        content: lessonContent,\r\n+        metadata: lessonMetadata, // Supabase will automatically handle JSON conversion\r\n+        content_type: 'html',\r\n+        lesson_type: 'lesson',\r\n+        grade_id: selectedGradeId,\r\n+        topic_id: selectedTopicId,\r\n+        subtopic_id: selectedSubtopicId,\r\n+        user_id: session.user.id,\r\n+        updated_at: new Date().toISOString(),\r\n+        role: userRole, // Include role in the payload\r\n+        description: '',\r\n+        prerequisites: [],\r\n+        media_type: 'image',\r\n+        media_url: '',\r\n+        contentheading: contentHeading || ''\r\n+      };\r\n+\r\n+      console.log('📦 Data being sent to Supabase:', lessonData);\r\n+\r\n+      // Save lesson with all fields\r\n+      const { data, error: lessonError } = await supabase\r\n+        .from('lessons')\r\n+        .upsert(lessonData, { \r\n+          onConflict: 'id'\r\n+        })\r\n+        .select();\r\n+\r\n+      if (lessonError) throw lessonError;\r\n+\r\n+      // 2. Save lesson content\r\n+      const { data: existingContent } = await supabase\r\n+        .from('lesson_content')\r\n+        .select('id')\r\n+        .eq('lesson_id', currentLessonId)\r\n+        .single();\r\n+\r\n+      const contentMetadata = {\r\n+        lastEdited: new Date().toISOString(),\r\n+        version: 1,\r\n+        status: 'draft'\r\n+      };\r\n+\r\n+      const contentUpdate = {\r\n+        id: existingContent?.id || crypto.randomUUID(),\r\n+        lesson_id: currentLessonId,\r\n+        content: [lessonContent],\r\n+        metadata: contentMetadata, // Supabase will automatically handle JSON conversion\r\n+        content_type: 'html',\r\n+        user_id: session.user.id,\r\n+        updated_at: new Date().toISOString(),\r\n+        created_at: new Date().toISOString()\r\n+      };\r\n+\r\n+      const { error: contentError } = await supabase\r\n+        .from('lesson_content')\r\n+        .upsert(contentUpdate, { onConflict: 'id' });\r\n+\r\n+      if (contentError) throw contentError;\r\n+\r\n+      // 3. Save questions\r\n+      for (const question of questions) {\r\n+        const questionData = {\r\n+          id: question.id,\r\n+          lesson_id: currentLessonId,\r\n+          type: question.type,\r\n+          title: question.title,\r\n+          metadata: question.metadata,\r\n+          data: question.data,\r\n+          updated_at: new Date().toISOString(),\r\n+          user_id: session.user.id\r\n+        };\r\n+\r\n+        const { error: questionError } = await supabase\r\n+          .from('questions')\r\n+          .upsert(questionData, { onConflict: 'id' });\r\n+\r\n+        if (questionError) throw questionError;\r\n+\r\n+        //4. Save exercise prompts for this question\r\n+        if (question.exercisePrompts) {\r\n+          for (const prompt of question.exercisePrompts) {\r\n+            const promptData = {\r\n+              id: prompt.id,\r\n+              question_id: question.id,\r\n+              text: prompt.text,\r\n+              media: prompt.media,\r\n+              type: prompt.type,\r\n+              narration: prompt.narration,\r\n+              saytext: prompt.saytext,\r\n+              user_id: session.user.id,\r\n+              updated_at: new Date().toISOString()\r\n+            };\r\n+\r\n+            const { error: promptError } = await supabase\r\n+              .from('exercise_prompts')\r\n+              .upsert(promptData, { onConflict: 'id' });\r\n+\r\n+            if (promptError) throw promptError;\r\n+          }\r\n+        }\r\n+      }\r\n+\r\n+      // 5. Save activities\r\n+      if (activities.length > 0) {\r\n+        const activitiesData = activities.map(activity => ({\r\n+          id: activity.id,\r\n+          lesson_id: currentLessonId,\r\n+          type: activity.type,\r\n+          title: activity.title,\r\n+          name: activity.name,\r\n+          instructions: activity.instructions,\r\n+          media: activity.media,\r\n+          data: activity.data,\r\n+          created_at: new Date().toISOString()\r\n+        }));\r\n+\r\n+        const { error: activitiesError } = await supabase\r\n+          .from('activities')\r\n+          .upsert(activitiesData, { onConflict: 'id' });\r\n+\r\n+        if (activitiesError) throw activitiesError;\r\n+      }\r\n+\r\n+      // After successful save\r\n+      console.log('✅ Content heading saved successfully:', {\r\n+        contentHeading,\r\n+        lessonId: currentLessonId,\r\n+        timestamp: new Date().toISOString()\r\n+      });\r\n+\r\n+      toast.success('Lesson saved successfully');\r\n+    } catch (err) {\r\n+      const error = err as PostgrestError;\r\n+      console.error('❌ Error saving content heading:', {\r\n+        error: error.message,\r\n+        contentHeading,\r\n+        lessonContent,\r\n+        lessonId: currentLessonId,\r\n+        timestamp: new Date().toISOString()\r\n+      });\r\n+      toast.error(`Failed to save lesson: ${error.message}`);\r\n+\r\n+\r\n+    }\r\n+  };\r\n+\r\n+  const handleSaveQuestion = async (question: Question, index: number) => {\r\n+    const loadingToast = toast.loading(`Saving question ${index + 1}...`);\r\n+    \r\n+    try {\r\n+      const { data: { session } } = await supabase.auth.getSession();\r\n+      if (!session?.user) {\r\n+        toast.error('Please sign in to save question', { id: loadingToast });\r\n+        return;\r\n+      }\r\n+\r\n+      // Save question\r\n+      const questionData = {\r\n+        id: question.id,\r\n+        lesson_id: currentLessonId,\r\n+        type: question.type,\r\n+        title: question.title,\r\n+        metadata: question.metadata,\r\n+        data: {\r\n+          prompt: question.data?.prompt ?? '',\r\n+          teacherScript: question.data?.teacherScript ?? '',\r\n+          followup_prompt: question.data?.followup_prompt ?? [],\r\n+          sampleAnswer: question.data?.sampleAnswer || undefined,  // Convert null to undefined\r\n+          answer: question.data?.answer || undefined  // Convert null to undefined\r\n+        } as const,\r\n+        user_id: session.user.id,\r\n+        updated_at: new Date().toISOString()\r\n+      };\r\n+\r\n+      const { error: questionError } = await supabase\r\n+        .from('questions')\r\n+        .upsert(questionData, { onConflict: 'id' });\r\n+\r\n+      if (questionError) throw questionError;\r\n+\r\n+      // Save exercise prompts if they exist\r\n+      if (question.exercisePrompts?.length) {\r\n+        for (const prompt of question.exercisePrompts) {\r\n+          const promptData = {\r\n+            id: prompt.id,\r\n+            question_id: question.id,\r\n+            text: prompt.text,\r\n+            type: prompt.type,\r\n+            narration: prompt.narration,\r\n+            saytext: prompt.saytext,\r\n+            media: prompt.media,\r\n+            user_id: session.user.id,\r\n+            updated_at: new Date().toISOString()\r\n+          };\r\n+\r\n+          const { error: promptError } = await supabase\r\n+            .from('exercise_prompts')\r\n+            .upsert(promptData, { onConflict: 'id' });\r\n+\r\n+          if (promptError) throw promptError;\r\n+        }\r\n+      }\r\n+\r\n+      toast.success(`Question ${index + 1} saved successfully`, { id: loadingToast });\r\n+    } catch (error) {\r\n+      console.error('Error saving question:', error);\r\n+      toast.error(`Failed to save question ${index + 1}`, { id: loadingToast });\r\n+    }\r\n+  };\r\n+\r\n+  const handleSaveActivity = async (activity: Activity) => {\r\n+    try {\r\n+      await contentService.saveActivity(activity);\r\n+      toast.success('Activity saved');\r\n+    } catch (error) {\r\n+      console.error('Failed to save activity:', error);\r\n+      toast.error('Failed to save activity');\r\n+    }\r\n+  };\r\n+\r\n+  // Effects\r\n+  useEffect(() => {\r\n+    const fetchGrades = async () => {\r\n+      try {\r\n+        const { data, error } = await supabase\r\n+          .from('grades')\r\n+          .select('*')\r\n+          .order('name');\r\n+\r\n+        if (error) {\r\n+          console.error('Supabase error:', error);\r\n+          throw error;\r\n+        }\r\n+\r\n+        if (!data) {\r\n+          throw new Error('No data returned from Supabase');\r\n+        }\r\n+\r\n+        // Map the grades to match your interface\r\n+        const validGrades = data.map((grade: any) => ({\r\n+          _id: grade.id,\r\n+          id: grade.id,\r\n+          name: grade.name,\r\n+          level: grade.level || 0,  // Add default value if not provided\r\n+          orderIndex: grade.order_index || 0,  // Add default value if not provided\r\n+          topics: []\r\n+        }));\r\n+        \r\n+        setGrades(validGrades);\r\n+      } catch (error) {\r\n+        console.error('Error fetching grades:', error);\r\n+        toast.error('Failed to fetch grades');\r\n+      }\r\n+    };\r\n+\r\n+    fetchGrades();\r\n+  }, []);\r\n+\r\n+  // Topic Selection\r\n+  useEffect(() => {\r\n+    const fetchTopics = async () => {\r\n+      if (!selectedGradeId) return;\r\n+      \r\n+      try {\r\n+        const { data, error } = await supabase\r\n+          .from('topics')\r\n+          .select('*')\r\n+          .eq('grade_id', selectedGradeId)\r\n+          .order('title');\r\n+\r\n+        if (error) {\r\n+          throw error;\r\n+        }\r\n+\r\n+        // Map the topics to match your interface\r\n+        const validTopics = (data || []).map((topic: any) => ({\r\n+          _id: topic.id,\r\n+          id: topic.id,\r\n+          name: topic.title,\r\n+          title: topic.title,\r\n+          grade_id: topic.grade_id,\r\n+          subtopics: []\r\n+        }));\r\n+        \r\n+        setTopics(validTopics);\r\n+      } catch (error) {\r\n+        console.error('Error fetching topics:', error);\r\n+        toast.error('Failed to fetch topics');\r\n+      }\r\n+    };\r\n+\r\n+    fetchTopics();\r\n+  }, [selectedGradeId]);\r\n+\r\n+  // Subtopic Selection\r\n+  useEffect(() => {\r\n+    const fetchSubtopics = async () => {\r\n+      if (!selectedTopicId) return;\r\n+      \r\n+      try {\r\n+        // Use content service to fetch subtopics\r\n+        const subtopicsData = await contentService.fetchSubtopics(selectedTopicId);\r\n+        console.log('Fetched subtopics:', subtopicsData);\r\n+\r\n+        const validSubtopics = subtopicsData.map((subtopic: any) => ({\r\n+          id: subtopic.id,\r\n+          title: subtopic.title,\r\n+          description: subtopic.description,\r\n+          topic_id: subtopic.topic_id,\r\n+          lessons: [],\r\n+          order_index: subtopicsData.length\r\n+        }));\r\n+        \r\n+        setSubtopics(validSubtopics);\r\n+        \r\n+        // Update global state\r\n+        if (selectedSubtopic) {\r\n+          setSelectedSubtopic(selectedSubtopic);\r\n+        }\r\n+      } catch (err) {\r\n+        const error = err as Error;\r\n+        console.error('Error fetching subtopics:', error);\r\n+        toast.error('Failed to fetch subtopics');\r\n+      }\r\n+    };\r\n+\r\n+    fetchSubtopics();\r\n+  }, [selectedTopicId, selectedSubtopic, setSelectedSubtopic]);\r\n+\r\n+  // Add effect to monitor subtopics state\r\n+  useEffect(() => {\r\n+    console.log('Current subtopics state:', subtopics);\r\n+  }, [subtopics]);\r\n+\r\n+  // Add fetchLessons function\r\n+  const fetchLessons = useCallback(async () => {\r\n+    if (!selectedSubtopicId) return;\r\n+    try {\r\n+      const { data, error } = await supabase\r\n+        .from('lessons')\r\n+        .select('*')\r\n+        .eq('subtopic_id', selectedSubtopicId)\r\n+        .order('title');\r\n+\r\n+      if (error) {\r\n+        throw error;\r\n+      }\r\n+      \r\n+      // Map the lessons to ensure they have _id\r\n+      const validLessons = (data || []).map((lesson: any) => ({\r\n+        ...lesson,\r\n+        _id: lesson._id || lesson.id, // Use _id if available, otherwise use id\r\n+        title: lesson.title || 'Untitled Lesson'\r\n+      })).filter((lesson: any) => lesson._id); // Only include lessons with valid IDs\r\n+      \r\n+      setLessons(validLessons);\r\n+    } catch (error) {\r\n+      console.error('Error fetching lessons:', error);\r\n+      toast.error('Failed to fetch lessons');\r\n+    }\r\n+  }, [selectedSubtopicId]);\r\n+  // Add loadLessonContent function\r\n+  const isLoading = useRef(false);\r\n+  const loadLessonContent = useCallback(async (lessonId: string) => {\r\n+    // Prevent multiple simultaneous loads\r\n+    if (isLoading.current) return;\r\n+    isLoading.current = true;\r\n+\r\n+    const controller = new AbortController();\r\n+\r\n+    try {\r\n+      // Clear existing content first\r\n+      setLessonTitle('');\r\n+      setContentHeading('');\r\n+      setLessonContent('');\r\n+      setQuestions([]);\r\n+      \r\n+      // First fetch lesson data\r\n+      const { data: lessonData, error: lessonError } = await supabase\r\n+        .from('lessons')\r\n+        .select('*')\r\n+        .eq('id', lessonId)\r\n+        .single()\r\n+        \r\n+\r\n+      if (lessonError) {\r\n+        console.error('Lesson fetch error:', lessonError);\r\n+        throw lessonError;\r\n+      }\r\n+\r\n+      // Set lesson data\r\n+      setLessonTitle(lessonData.title || '');\r\n+      setContentHeading(lessonData.content || '');\r\n+\r\n+      // Then fetch lesson content with explicit headers\r\n+      const { data: contentData, error: contentError } = await supabase\r\n+        .from('lesson_content')\r\n+        .select('*')\r\n+        .eq('lesson_id', lessonId)\r\n+        .order('updated_at', { ascending: false })\r\n+        .limit(1)\r\n+        .maybeSingle();\r\n+\r\n+      if (contentError) {\r\n+        console.error('Content fetch error:', contentError);\r\n+        throw contentError;\r\n+      }\r\n+\r\n+      // Set content if available\r\n+      if (contentData?.content) {\r\n+        setLessonContent(typeof contentData.content === 'string' \r\n+          ? contentData.content \r\n+          : JSON.stringify(contentData.content)\r\n+        );\r\n+      }\r\n+\r\n+    } catch (error: unknown) {\r\n+      if (error instanceof Error && error.name === 'AbortError') {\r\n+        console.log('Request aborted');\r\n+        return;\r\n+      }\r\n+      console.error('Error loading lesson:', error);\r\n+      toast.error('Failed to load lesson content');\r\n+      \r\n+      // Reset states on error\r\n+      setLessonTitle('');\r\n+      setContentHeading('');\r\n+      setLessonContent('');\r\n+      setQuestions([]);\r\n+    } finally {\r\n+      isLoading.current = false;\r\n+    }\r\n+\r\n+    return () => {\r\n+      controller.abort();\r\n+    };\r\n+  }, []); // Empty dependencies since we're using closure over state setters\r\n+\r\n+  // // Add effect for fetching lessons when subtopic changes\r\n+  useEffect(() => {\r\n+    if (selectedSubtopicId) {\r\n+      fetchLessons();\r\n+    }\r\n+  }, [selectedSubtopicId, fetchLessons]);\r\n+\r\n+  // Add effect for loading lesson content when currentLessonId changes\r\n+    useEffect(() => {\r\n+    let isMounted = true;\r\n+    let timeoutId: NodeJS.Timeout;\r\n+\r\n+    const loadContent = async () => {\r\n+      if (!currentLessonId || !isMounted) return;\r\n+\r\n+      // Clear previous timeout if exists\r\n+      if (timeoutId) clearTimeout(timeoutId);\r\n+\r\n+      // Set new timeout for debouncing\r\n+      timeoutId = setTimeout(() => {\r\n+        if (isMounted) {\r\n+          loadLessonContent(currentLessonId);\r\n+        }\r\n+      }, 300);\r\n+    };\r\n+\r\n+    loadContent();\r\n+\r\n+    // Cleanup function\r\n+    return () => {\r\n+      isMounted = false;\r\n+      if (timeoutId) clearTimeout(timeoutId);\r\n+      if (isLoading.current) isLoading.current = false;\r\n+    };\r\n+  }, [currentLessonId]); // Remove loadLessonContent from dependencies\r\n+\r\n+  useEffect(() => {\r\n+    console.log('Current lessons state:', lessons);\r\n+  }, [lessons]);\r\n+\r\n+    // Add keyboard shortcut for saving\r\n+  useEffect(() => {\r\n+    const handleKeyDown = (e: KeyboardEvent) => {\r\n+      if ((e.ctrlKey || e.metaKey) && e.key === 's') {\r\n+        e.preventDefault();\r\n+        handleSaveLesson();\r\n+      }\r\n+    };\r\n+\r\n+    window.addEventListener('keydown', handleKeyDown);\r\n+    return () => window.removeEventListener('keydown', handleKeyDown);\r\n+  }, [handleSaveLesson]);\r\n+\r\n+  // Add SaveFeedback component\r\n+  const SaveFeedback = useCallback(() => {\r\n+    if (saveProgress === 'idle') return null;\r\n+\r\n+    return (\r\n+    <div className=\"fixed bottom-4 right-4\">\r\n+      {saveProgress === 'saving' && (\r\n+        <div className=\"flex items-center gap-2 bg-background border rounded-lg px-4 py-2 shadow-lg\">\r\n+          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n+          <span className=\"text-sm\">Saving changes...</span>\r\n+        </div>\r\n+      )}\r\n+      {saveProgress === 'saved' && (\r\n+        <div className=\"flex items-center gap-2 bg-green-500 text-white rounded-lg px-4 py-2 shadow-lg\">\r\n+          <Check className=\"h-4 w-4\" />\r\n+          <span className=\"text-sm\">Changes saved</span>\r\n+        </div>\r\n+      )}\r\n+      {saveProgress === 'error' && (\r\n+        <div className=\"flex items-center gap-2 bg-destructive text-destructive-foreground rounded-lg px-4 py-2 shadow-lg\">\r\n+          <X className=\"h-4 w-4\" />\r\n+          <span className=\"text-sm\">Error saving changes</span>\r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+  }, [saveProgress]);\r\n+\r\n+  // Update handlers\r\n+  const handleGradeSelect = (gradeId: string) => {\r\n+    // Always keep sidebar open during selection\r\n+    setIsSidebarCollapsed(false);\r\n+    setIsSidebarLocked(true);\r\n+    \r\n+    // Batch state updates\r\n+    requestAnimationFrame(() => {\r\n+      setSelectedGradeId(gradeId);\r\n+      setSelectedGrade(gradeId);\r\n+      setSelectedTopicId(null);\r\n+      setSelectedTopic('');\r\n+      setSelectedSubtopicId(null);\r\n+      setSelectedSubtopic('');\r\n+      setCurrentLessonId(null);\r\n+      \r\n+      if (isViewMode) {\r\n+        setExpandedGrade(gradeId);\r\n+      }\r\n+    });\r\n+  };\r\n+\r\n+  const handleTopicSelect = (value: string) => {\r\n+    setSelectedTopicId(value);\r\n+    setSelectedTopic(value);\r\n+    setSelectedSubtopicId(null);\r\n+    setSelectedSubtopic('');\r\n+    setCurrentLessonId(null);\r\n+  };\r\n+\r\n+  const handleSubtopicSelect = (value: string) => {\r\n+    setSelectedSubtopicId(value);\r\n+    setSelectedSubtopic(value);\r\n+    setCurrentLessonId(null);\r\n+  };\r\n+\r\n+  const handleLessonSelect = async (lessonId: string) => {\r\n+    try {\r\n+      // Lock sidebar during selection\r\n+      setIsSidebarLocked(true);\r\n+      setIsSidebarCollapsed(false);\r\n+      setCurrentLessonId(lessonId);\r\n+      \r\n+      // 1. Fetch lesson data\r\n+      const { data: lessonData, error: lessonError } = await supabase\r\n+        .from('lessons')\r\n+        .select('*')\r\n+        .eq('id', lessonId)\r\n+        .single();\r\n+\r\n+      if (lessonError) throw lessonError;\r\n+\r\n+      // 2. Fetch questions with exercise prompts\r\n+      const { data: questionsData, error: questionsError } = await supabase\r\n+        .from('questions')\r\n+        .select(`\r\n+          *,\r\n+          exercise_prompts (*)\r\n+        `)\r\n+        .eq('lesson_id', lessonId);\r\n+\r\n+      if (questionsError) throw questionsError;\r\n+\r\n+      // 3. Fetch activities - removed order_index\r\n+      const { data: activitiesData, error: activitiesError } = await supabase\r\n+        .from('activities')\r\n+        .select('*')\r\n+        .eq('lesson_id', lessonId);\r\n+\r\n+      if (activitiesError) throw activitiesError;\r\n+\r\n+      // Format questions with their exercise prompts\r\n+      const formattedQuestions = questionsData?.map(q => ({\r\n+        ...q,\r\n+        data: q.data || {},\r\n+        exercisePrompts: q.exercise_prompts || []\r\n+      })) || [];\r\n+\r\n+      // Set all states\r\n+      setLessonTitle(lessonData.title || '');\r\n+      setLessonContent(lessonData.content || '');\r\n+      setQuestions(formattedQuestions);\r\n+      setActivities(activitiesData || []);\r\n+\r\n+      // After successful load, unlock sidebar and allow collapse\r\n+      setTimeout(() => {\r\n+        setIsSidebarLocked(false);\r\n+        if (!isSidebarLocked) {\r\n+          setIsSidebarCollapsed(true);\r\n+        }\r\n+      }, 300);\r\n+\r\n+    } catch (error) {\r\n+      console.error('Error loading lesson:', error);\r\n+      toast.error('Failed to load lesson');\r\n+      // Reset states on error\r\n+      setLessonTitle('');\r\n+      setLessonContent('');\r\n+      setQuestions([]);\r\n+      setActivities([]);\r\n+    }\r\n+    if (!isSidebarLocked) {\r\n+      setIsSidebarCollapsed(true);\r\n+    }\r\n+  };\r\n+\r\n+  // Update the expansion handlers\r\n+  const handleTopicExpand = async (topicId: string) => {\r\n+    setExpandedTopic(expandedTopic === topicId ? null : topicId);\r\n+    setSelectedTopicId(topicId);\r\n+    \r\n+    // Load subtopics when topic is expanded\r\n+    if (topicId) {\r\n+      setIsLoadingSubtopics(true);\r\n+      try {\r\n+        const { data: subtopicsData, error } = await supabase\r\n+          .from('subtopics')\r\n+          .select('*')\r\n+          .eq('topic_id', topicId)\r\n+          .order('order_index');\r\n+\r\n+        if (error) throw error;\r\n+        setSubtopics(subtopicsData || []);\r\n+      } catch (error) {\r\n+        console.error('Error loading subtopics:', error);\r\n+        toast.error('Failed to load subtopics');\r\n+      } finally {\r\n+        setIsLoadingSubtopics(false);\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const handleSubtopicExpand = async (subtopicId: string) => {\r\n+    setExpandedSubtopic(expandedSubtopic === subtopicId ? null : subtopicId);\r\n+    setSelectedSubtopicId(subtopicId);\r\n+    \r\n+    if (subtopicId) {\r\n+      setIsLoadingLessons(true);\r\n+      try {\r\n+        const { data: lessonsData, error } = await supabase\r\n+          .from('lessons')\r\n+          .select('*')\r\n+          .eq('subtopic_id', subtopicId)\r\n+          .order('order_index');\r\n+\r\n+        if (error) throw error;\r\n+        setLessons(lessonsData || []);\r\n+      } catch (error) {\r\n+        console.error('Error loading lessons:', error);\r\n+        toast.error('Failed to load lessons');\r\n+      } finally {\r\n+        setIsLoadingLessons(false);\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const handleQuestionExpand = (index: number) => {\r\n+    setExpandedQuestion(expandedQuestion === index ? null : index);\r\n+  };\r\n+\r\n+  const handleActivityExpand = (index: number) => {\r\n+    setExpandedActivity(expandedActivity === index ? null : index);\r\n+  };\r\n+\r\n+  // Add effect to save mode changes to localStorage\r\n+  useEffect(() => {\r\n+    localStorage.setItem('lessonManagementViewMode', isViewMode.toString());\r\n+  }, [isViewMode]);\r\n+\r\n+  // Add handlers for creating new items\r\n+  const handleCreateGrade = async () => {\r\n+    try {\r\n+      const response = await fetch(`${API_ENDPOINT}/grades`, {\r\n+        method: 'POST',\r\n+        headers: { 'Content-Type': 'application/json' },\r\n+        body: JSON.stringify({ name: newItemData.name })\r\n+      });\r\n+\r\n+      if (!response.ok) throw new Error('Failed to create grade');\r\n+      const data = await response.json();\r\n+      \r\n+      if (!data.success) throw new Error(data.message || 'Failed to create grade');\r\n+      \r\n+      // Update grades list\r\n+      setGrades([...grades, data.data.grade]);\r\n+      setModalState({ ...modalState, showAddGrade: false });\r\n+      setNewItemData({ name: '', description: '' });\r\n+      toast.success('Grade created successfully');\r\n+    } catch (error) {\r\n+      console.error('Error creating grade:', error);\r\n+      toast.error('Failed to create grade');\r\n+    }\r\n+  };\r\n+\r\n+  const handleCreateTopic = async () => {\r\n+    if (!selectedGradeId) {\r\n+      toast.error('Please select a grade first');\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      const newTopic = await contentService.createTopic({\r\n+        title: newItemData.name, // Map from newItemData.name to title\r\n+        description: newItemData.description,\r\n+        gradeId: selectedGradeId\r\n+      });\r\n+\r\n+      setTopics(prev => [...prev, newTopic]);\r\n+      toast.success('Topic created successfully');\r\n+      setModalState({ ...modalState, showAddTopic: false });\r\n+      setNewItemData({ name: '', description: '' });\r\n+    } catch (err) {\r\n+      const error = err instanceof Error ? err.message : String(err);\r\n+      console.error('Error creating topic:', error);\r\n+      toast.error('Failed to create topic');\r\n+    }\r\n+  };\r\n+    \r\n+  \r\n+\r\n+\r\n+  const handleCreateSubtopic = async (data: { title: string; description?: string }) => {\r\n+    try {\r\n+      if (!selectedTopicId) {\r\n+        toast.error('Please select a topic first');\r\n+        return;\r\n+      }\r\n+\r\n+      const newSubtopic = await contentService.createSubtopic({\r\n+        ...data,\r\n+        topicId: selectedTopicId\r\n+      });\r\n+\r\n+      setSubtopics(prev => [...prev, {\r\n+        _id: newSubtopic.id,\r\n+        id: newSubtopic.id,\r\n+        name: newSubtopic.title,\r\n+        title: newSubtopic.title,\r\n+        description: newSubtopic.description,\r\n+        topic_id: newSubtopic.topic_id,\r\n+        orderIndex: prev.length,\r\n+        lessons: []\r\n+      }]);\r\n+\r\n+      toast.success('Subtopic created successfully');\r\n+      setModalState(prev => ({ ...prev, showAddSubtopic: false }));\r\n+    } catch (err) {\r\n+      const error = err as Error;\r\n+      console.error('Error creating subtopic:', error);\r\n+      toast.error('Failed to create subtopic');\r\n+    }\r\n+  };\r\n+\r\n+  const handleUpdateSubtopic = async (subtopicId: string, data: { title: string; description?: string }) => {\r\n+    try {\r\n+      const { data: updatedSubtopic, error } = await supabase\r\n+        .from('sub_topics')\r\n+        .update(data)\r\n+        .eq('id', subtopicId)\r\n+        .select()\r\n+        .single();\r\n+\r\n+      if (error) throw error;\r\n+      \r\n+      setSubtopics(prev => prev.map(subtopic => \r\n+        subtopic.id === subtopicId \r\n+          ? {\r\n+              ...subtopic,\r\n+              name: updatedSubtopic.title\r\n+            }\r\n+          : subtopic\r\n+      ));\r\n+\r\n+      toast.success('Subtopic updated successfully');\r\n+    } catch (err) {\r\n+      const error = err as Error;\r\n+      console.error('Error updating subtopic:', error);\r\n+      toast.error('Failed to update subtopic');\r\n+    }\r\n+  };\r\n+\r\n+  const handleDeleteSubtopic = async (subtopicId: string) => {\r\n+    try {\r\n+      await contentService.deleteSubtopic(subtopicId);\r\n+      setSubtopics(prev => prev.filter(subtopic => subtopic.id !== subtopicId));\r\n+      setSelectedSubtopicId(null);\r\n+      toast.success('Subtopic deleted successfully');\r\n+    } catch (err) {\r\n+      const error = err as Error;\r\n+      console.error('Error deleting subtopic:', error);\r\n+      toast.error('Failed to delete subtopic');\r\n+    }\r\n+  };\r\n+\r\n+  const handleCreateLesson = async () => {\r\n+    if (!selectedSubtopicId) {\r\n+      toast.error('Please select a subtopic first');\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      // First create the lesson\r\n+      const { data: newLesson, error: lessonError } = await supabase\r\n+        .from('lessons')\r\n+        .insert({\r\n+          title: newItemData.name,\r\n+          duration: 0,\r\n+          topic_id: selectedTopicId,\r\n+          subtopic_id: selectedSubtopicId,\r\n+          content: '', // Empty rich text content initially\r\n+          status: 'draft'\r\n+        })\r\n+        .select()\r\n+        .single();\r\n+\r\n+      if (lessonError) throw lessonError;\r\n+\r\n+      // Create initial question\r\n+      const { data: newQuestion, error: questionError } = await supabase\r\n+        .from('questions')\r\n+        .insert({\r\n+          lesson_id: newLesson.id,\r\n+          type: 'speaking', // default type\r\n+          title: 'Question 1',\r\n+          data: {\r\n+            prompt: '',\r\n+            teacherScript: '',\r\n+            options: []\r\n+          },\r\n+          order_index: 0\r\n+        })\r\n+        .select()\r\n+        .single();\r\n+\r\n+      if (questionError) throw questionError;\r\n+\r\n+      // Create initial exercise prompts for the question\r\n+      const { error: promptsError } = await supabase\r\n+        .from('exercise_prompts')\r\n+        .insert([\r\n+          {\r\n+            question_id: newQuestion.id,\r\n+            text: '',\r\n+            type: 'image',\r\n+            narration: '',\r\n+            saytext: '',\r\n+            media: [],\r\n+            order_index: 0\r\n+          },\r\n+          {\r\n+            question_id: newQuestion.id,\r\n+            text: '',\r\n+            type: 'gif',\r\n+            narration: '',\r\n+            saytext: '',\r\n+            media: [],\r\n+            order_index: 1\r\n+          }\r\n+        ]);\r\n+\r\n+      if (promptsError) throw promptsError;\r\n+\r\n+      // Create initial activity\r\n+      // const { error: activityError } = await supabase\r\n+      //   .from('activities')\r\n+      //   .insert({\r\n+      //     lesson_id: newLesson.id,\r\n+      //     type: 'practice',\r\n+      //     title: '',\r\n+      //     instructions: '',\r\n+      //     media: [],\r\n+      //     data: {\r\n+      //       prompt: '',\r\n+      //       teacherScript: '',\r\n+      //       media: []\r\n+      //     },\r\n+      //     order_index: 0\r\n+      //   });\r\n+\r\n+      // if (activityError) throw activityError;\r\n+\r\n+      // Update UI state\r\n+      setLessons(prev => [...prev, newLesson]);\r\n+      setCurrentLessonId(newLesson.id);\r\n+      setLessonTitle(newLesson.title);\r\n+      setModalState({ ...modalState, showAddLesson: false });\r\n+      setNewItemData({ name: '', description: '' });\r\n+      toast.success('Lesson created successfully');\r\n+\r\n+    } catch (error) {\r\n+      console.error('Error creating lesson:', error);\r\n+      toast.error('Failed to create lesson');\r\n+    }\r\n+  };\r\n+\r\n+  // Effect to handle localStorage after mount\r\n+  useEffect(() => {\r\n+    const storedMode = localStorage.getItem('lessonManagementViewMode');\r\n+    if (storedMode !== null) {\r\n+      setIsViewMode(storedMode === 'true');\r\n+    }\r\n+  }, []);\r\n+\r\n+  // Update the cleanupModalState function\r\n+  const cleanupModalState = useCallback(() => {\r\n+    document.body.style.pointerEvents = '';\r\n+    document.body.style.overflow = '';\r\n+    setModalState({\r\n+      showAddGrade: false,\r\n+      showAddTopic: false,\r\n+      showAddSubtopic: false,\r\n+      showAddLesson: false\r\n+    });\r\n+    setNewItemData({ name: '', description: '' });\r\n+  }, []);\r\n+\r\n+  // Add a function to handle modal state changes\r\n+  const handleModalStateChange = useCallback((modalType: keyof typeof modalState, open: boolean) => {\r\n+    if (!open) {\r\n+      cleanupModalState();\r\n+    } else {\r\n+      setModalState(prev => ({ ...prev, [modalType]: open }));\r\n+    }\r\n+  }, [cleanupModalState]);\r\n+\r\n+  const handleContentSave = async (content: string) => {\r\n+    const loadingToast = toast.loading(\"Saving content...\", {\r\n+      action: {\r\n+        label: \"Close\",\r\n+        onClick: () => toast.dismiss()\r\n+      }\r\n+    });\r\n+    \r\n+    try {\r\n+      const { data: { session } } = await supabase.auth.getSession();\r\n+      if (!session?.user) {\r\n+        toast.error('Please sign in to save content', { id: loadingToast });\r\n+        return;\r\n+      }\r\n+\r\n+      // Get the most recent content entry\r\n+      const { data: existingContent, error: checkError } = await supabase\r\n+        .from('lesson_content')\r\n+        .select('id')\r\n+        .eq('lesson_id', currentLessonId)\r\n+        .order('updated_at', { ascending: false })\r\n+        .limit(1)\r\n+        .maybeSingle();\r\n+\r\n+      // If content exists, update it; if not, insert new\r\n+      const { error } = await supabase\r\n+        .from('lesson_content')\r\n+        .upsert({\r\n+          id: existingContent?.id, // This ensures we update if id exists\r\n+          lesson_id: currentLessonId,\r\n+          content: [content],\r\n+          content_type: 'text',\r\n+          metadata: {\r\n+            heading: contentHeading\r\n+          },\r\n+          user_id: session.user.id,\r\n+          updated_at: new Date().toISOString()\r\n+        }, {\r\n+          onConflict: 'id'  // This ensures we update based on lesson_id\r\n+        });\r\n+\r\n+      if (error) throw error;\r\n+\r\n+      // Save questions separately\r\n+      for (const question of questions) {\r\n+        const { exercisePrompts, ...questionData } = question; // Remove exercisePrompts from question data\r\n+        \r\n+        // Save question\r\n+        const { error: questionError } = await supabase\r\n+          .from('questions')\r\n+          .upsert(questionData, {\r\n+            onConflict: 'id'\r\n+          })\r\n+          .select();\r\n+\r\n+        if (questionError) throw questionError;\r\n+\r\n+        // Save exercise prompts\r\n+        if (exercisePrompts?.length > 0) {\r\n+          for (const prompt of exercisePrompts) {\r\n+            const { error: promptError } = await supabase\r\n+              .from('exercise_prompts')\r\n+              .upsert(prompt, {\r\n+                onConflict: 'id'\r\n+              })\r\n+              .select();\r\n+\r\n+            if (promptError) throw promptError;\r\n+          }\r\n+        }\r\n+      }\r\n+      \r\n+      toast.success(\"Content saved successfully\", {\r\n+        action: {\r\n+          label: \"Close\",\r\n+          onClick: () => toast.dismiss()\r\n+        },\r\n+        id: loadingToast,\r\n+      });\r\n+      setIsContentEditorOpen(false);\r\n+    } catch (error) {\r\n+      console.error('Error saving content:', error);\r\n+      toast.error(\"Failed to save content\", {\r\n+        action: {\r\n+          label: \"Close\",\r\n+          onClick: () => toast.dismiss()\r\n+        },\r\n+        id: loadingToast,\r\n+      });\r\n+    }\r\n+  };\r\n+\r\n+  // Add this component for inline editing\r\n+  const InlineEdit = ({ \r\n+    value, \r\n+    onSave, \r\n+    isEditing, \r\n+    setIsEditing, \r\n+    placeholder,\r\n+    className = \"\"\r\n+  }: InlineEditProps) => {\r\n+    const [tempValue, setTempValue] = useState(value);\r\n+    \r\n+    return isEditing ? (\r\n+      <div className=\"flex items-center gap-2\">\r\n+        <Input\r\n+          value={tempValue}\r\n+          onChange={(e) => setTempValue(e.target.value)}\r\n+          placeholder={placeholder}\r\n+          className={className}\r\n+          autoFocus\r\n+        />\r\n+        <Button\r\n+          size=\"sm\"\r\n+          variant=\"ghost\"\r\n+          onClick={() => {\r\n+            onSave(tempValue);\r\n+            setIsEditing(false);\r\n+          }}\r\n+        >\r\n+          <Check className=\"h-4 w-4 text-green-500\" />\r\n+        </Button>\r\n+        <Button\r\n+          size=\"sm\"\r\n+          variant=\"ghost\"\r\n+          onClick={() => setIsEditing(false)}\r\n+        >\r\n+          <X className=\"h-4 w-4 text-red-500\" />\r\n+        </Button>\r\n+      </div>\r\n+    ) : (\r\n+      <div \r\n+        className=\"group flex items-center gap-2 cursor-pointer\"\r\n+        onClick={() => setIsEditing(true)}\r\n+      >\r\n+        <span className={className}>{value || placeholder}</span>\r\n+        <Pencil className=\"h-4 w-4 opacity-0 group-hover:opacity-100 transition-opacity\" />\r\n+      </div>\r\n+    );\r\n+  };\r\n+\r\n+  // Add this effect to handle auto-collapse after lesson selection\r\n+  useEffect(() => {\r\n+    if (currentLessonId && selectedGradeId && selectedTopicId && selectedSubtopicId) {\r\n+      setIsSidebarLocked(false);\r\n+      // Optional: add a slight delay before collapsing\r\n+      setTimeout(() => setIsSidebarCollapsed(true), 300);\r\n+    }\r\n+  }, [currentLessonId, selectedGradeId, selectedTopicId, selectedSubtopicId]);\r\n+\r\n+  // Add individual save handlers\r\n+  // const handleSaveQuestion = async (question: Question, index: number) => {\r\n+  //   try {\r\n+  //     // Update status to saving\r\n+  //     setQuestionSaveStatuses(prev => [\r\n+  //       ...prev.filter(s => s.id !== question.id),\r\n+  //       { id: question.id, status: 'saving' }\r\n+  //     ]);\r\n+\r\n+  //     const questionUpsert = {\r\n+  //       id: question.id,\r\n+  //       lesson_id: currentLessonId,\r\n+  //       type: question.type,\r\n+  //       title: question.data?.prompt || 'Untitled Question',\r\n+  //       metadata: question.metadata || {},\r\n+  //       data: {\r\n+  //         prompt: question.data?.prompt || '',\r\n+  //         teacherScript: question.data?.teacherScript || '',\r\n+  //         ...question.data\r\n+  //       },\r\n+  //       order_index: index,\r\n+  //       created_at: new Date().toISOString(),\r\n+  //       updated_at: new Date().toISOString()\r\n+  //     };\r\n+\r\n+  //     const { error: questionError } = await supabase\r\n+  //       .from('questions')\r\n+  //       .upsert(questionUpsert);\r\n+\r\n+  //     if (questionError) throw questionError;\r\n+\r\n+  //     // Update status to saved\r\n+  //     setQuestionSaveStatuses(prev => [\r\n+  //       ...prev.filter(s => s.id !== question.id),\r\n+  //       { id: question.id, status: 'saved', lastSaved: new Date().toISOString() }\r\n+  //     ]);\r\n+\r\n+  //     toast.success(`Question ${index + 1} saved successfully`);\r\n+  //   } catch (error) {\r\n+  //     console.error('Error saving question:', error);\r\n+  //     setQuestionSaveStatuses(prev => [\r\n+  //       ...prev.filter(s => s.id !== question.id),\r\n+  //       { id: question.id, status: 'error' }\r\n+  //     ]);\r\n+  //     toast.error(`Failed to save question ${index + 1}`);\r\n+  //   }\r\n+  // };\r\n+\r\n+  const handleSavePrompt = async (questionId: string, prompt: ExercisePrompt, promptIndex: number) => {\r\n+    try {\r\n+      setPromptSaveStatuses(prev => [\r\n+        ...prev.filter(s => s.id !== prompt.id),\r\n+        { id: prompt.id || '', status: 'saving' } as SaveStatus\r\n+      ]);\r\n+\r\n+      const promptUpsert = {\r\n+        id: prompt.id,\r\n+        question_id: questionId,\r\n+        text: prompt.text || '',\r\n+        type: prompt.type || 'text',\r\n+        narration: prompt.narration || '',\r\n+        saytext: prompt.saytext || '',\r\n+        media: prompt.media || [],\r\n+        order_index: promptIndex,\r\n+        created_at: prompt.created_at || new Date().toISOString(),\r\n+        updated_at: new Date().toISOString()\r\n+      };\r\n+\r\n+      const { error: promptError } = await supabase\r\n+        .from('exercise_prompts')\r\n+        .upsert(promptUpsert);\r\n+\r\n+      if (promptError) throw promptError;\r\n+\r\n+      setPromptSaveStatuses(prev => [\r\n+        ...prev.filter(s => s.id !== prompt.id),\r\n+        { id: prompt.id || '', status: 'saved', lastSaved: new Date().toISOString() } as SaveStatus\r\n+      ]);\r\n+\r\n+      toast.success(`Prompt ${promptIndex + 1} saved successfully`);\r\n+    } catch (error) {\r\n+      console.error('Error saving prompt:', error);\r\n+      setPromptSaveStatuses(prev => [\r\n+        ...prev.filter(s => s.id !== prompt.id),\r\n+        { id: prompt.id || '', status: 'error' } as SaveStatus\r\n+      ]);\r\n+      toast.error(`Failed to save prompt ${promptIndex + 1}`);\r\n+    }\r\n+  };\r\n+\r\n+  // Add effect to mark items as draft when edited\r\n+  useEffect(() => {\r\n+    questions.forEach(question => {\r\n+      if (!questionSaveStatuses.find(s => s.id === question.id)) {\r\n+        setQuestionSaveStatuses(prev => [\r\n+          ...prev,\r\n+          { id: question.id, status: 'draft' }\r\n+        ]);\r\n+      }\r\n+    });\r\n+  }, [questions]);\r\n+\r\n+  // Add this function with your other handlers\r\n+  const handleRefreshLesson = async () => {\r\n+    if (!currentLessonId) {\r\n+      toast.error('No lesson selected');\r\n+      return;\r\n+    }\r\n+    \r\n+    try {\r\n+      toast.loading('Refreshing lesson content...', {\r\n+        action: {\r\n+          label: \"Close\",\r\n+          onClick: () => toast.dismiss()\r\n+        },\r\n+      });\r\n+      await handleLessonSelect(currentLessonId);\r\n+      toast.success('Content refreshed', {\r\n+        action: {\r\n+          label: \"Close\",\r\n+          onClick: () => toast.dismiss()\r\n+        },\r\n+      });\r\n+    } catch (error) {\r\n+      console.error('Error refreshing lesson:', error);\r\n+      toast.error('Failed to refresh content', {\r\n+        action: {\r\n+          label: \"Close\",\r\n+          onClick: () => toast.dismiss()\r\n+        },\r\n+      });\r\n+    }\r\n+  };\r\n+\r\n+  // Add this function to handle refresh\r\n+  const handleRefreshContent = async () => {\r\n+    if (!currentLessonId) {\r\n+      toast.error('No lesson selected');\r\n+      return;\r\n+    }\r\n+    \r\n+    toast.loading('Refreshing content...');\r\n+    try {\r\n+      await loadLessonContent(currentLessonId);\r\n+      toast.success('Content refreshed');\r\n+    } catch (error) {\r\n+      console.error('Refresh error:', error);\r\n+      toast.error('Failed to refresh content');\r\n+    }\r\n+  };\r\n+\r\n+  // Update the sidebar hover mechanism\r\n+  const handleSidebarHover = useCallback(\r\n+    debounce((isHovering: boolean) => {\r\n+      if (!isSidebarLocked && !isNavigating && !isDropdownOpen) {\r\n+        if (isHovering || document.activeElement?.closest('.sidebar-content')) {\r\n+          setIsSidebarCollapsed(false);\r\n+        } else {\r\n+          setTimeout(() => {\r\n+            if (!isDropdownOpen) { // Only collapse if dropdown is closed\r\n+              setIsSidebarCollapsed(true);\r\n+            }\r\n+          }, 300);\r\n+        }\r\n+      }\r\n+    }, 100),\r\n+    [isSidebarLocked, isNavigating, isDropdownOpen]\r\n+  );\r\n+\r\n+  // Update the sidebar JSX\r\n+  <div \r\n+    className={cn(\r\n+      \"transition-all duration-300 ease-in-out relative\",\r\n+      isSidebarCollapsed ? \"w-20\" : \"w-80\",\r\n+      \"flex-shrink-0 group\"\r\n+    )}\r\n+    onMouseEnter={() => {\r\n+      handleSidebarHover(true);\r\n+      // Immediately expand on mouse enter\r\n+      if (!isSidebarLocked) {\r\n+        setIsSidebarCollapsed(false);\r\n+      }\r\n+    }}\r\n+    onMouseLeave={() => {\r\n+      // Only collapse if not interacting with content\r\n+      if (!document.activeElement?.closest('.sidebar-content')) {\r\n+        handleSidebarHover(false);\r\n+      }\r\n+    }}\r\n+    onFocus={() => setIsSidebarCollapsed(false)}\r\n+  >\r\n+    <Card className={cn(\r\n+      \"h-full relative sidebar-content\", // Added sidebar-content class\r\n+      \"transition-shadow duration-300\",\r\n+      \"hover:shadow-lg\"\r\n+    )}>\r\n+      {/* Rest of sidebar content */}\r\n+    </Card>\r\n+  </div>\r\n+\r\n+  // Update the sidebar and card styles\r\n+  return (\r\n+      <div className=\"container mx-auto py-8\">\r\n+        {/* Header */}\r\n+        <div className=\"flex items-center justify-between mb-2\">\r\n+          {/* ... header content ... */}\r\n+          <div className=\"flex items-center gap-4\">\r\n+            <Link href=\"/super-admin\">\r\n+              <Button variant=\"outline\" className=\"gap-2\">\r\n+                <ArrowLeft className=\"h-4 w-4\" />\r\n+                Back\r\n+              </Button>\r\n+            </Link>\r\n+            <div className=\"flex items-center gap-2\">\r\n+              <h1 className=\"text-2xl font-bold\">Lesson Management</h1>\r\n+              <Button\r\n+                variant=\"ghost\"\r\n+                size=\"icon\"\r\n+                onClick={handleRefreshLesson}\r\n+                className=\"ml-2\"\r\n+                title=\"Refresh lesson content\"\r\n+              >\r\n+                <RefreshCw className=\"h-4 w-4\" />\r\n+              </Button>\r\n+            </div>\r\n+            <p className=\"text-sm text-muted-foreground\">Create and manage your educational content</p>\r\n+          </div>\r\n+          <div className=\"flex items-center gap-2\">\r\n+            <Button\r\n+              variant=\"outline\"\r\n+              size=\"sm\"\r\n+              onClick={() => setShowHelpTips(!showHelpTips)}\r\n+              className=\"gap-2\"\r\n+            >\r\n+              {showHelpTips ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\r\n+              {showHelpTips ? 'Hide Tips' : 'Show Tips'}\r\n+            </Button>\r\n+          </div>\r\n+        </div>\r\n+        \r\n+        {/* Main content wrapper - Fix the layout here */}\r\n+        <div className=\"flex gap-6 h-[calc(100vh-200px)]\">\r\n+          {/* Improved sidebar */}\r\n+          <div \r\n+            className={cn(\r\n+              \"transition-all duration-300 ease-in-out relative\",\r\n+              isSidebarCollapsed ? \"w-20\" : \"w-80\",\r\n+              \"flex-shrink-0 group\"\r\n+            )}\r\n+            onMouseEnter={() => {\r\n+              handleSidebarHover(true);\r\n+              // Immediately expand on mouse enter\r\n+              if (!isSidebarLocked) {\r\n+                setIsSidebarCollapsed(false);\r\n+              }\r\n+            }}\r\n+            onMouseLeave={() => {\r\n+              // Only collapse if not interacting with content\r\n+              if (!document.activeElement?.closest('.sidebar-content')) {\r\n+                handleSidebarHover(false);\r\n+              }\r\n+            }}\r\n+            onFocus={() => setIsSidebarCollapsed(false)}\r\n+          >\r\n+            <Card className={cn(\r\n+              \"h-full relative sidebar-content\", // Added sidebar-content class\r\n+              \"transition-shadow duration-300\",\r\n+              \"hover:shadow-lg\"\r\n+            )}>\r\n+              {/* Lock button - only show after lesson selection */}\r\n+              {currentLessonId && (\r\n+                <Button\r\n+                  variant=\"ghost\"\r\n+                  size=\"sm\"\r\n+                  className=\"absolute top-2 right-2 z-10\"\r\n+                  onClick={() => {\r\n+                    setIsSidebarLocked(!isSidebarLocked);\r\n+                    if (!isSidebarLocked) {\r\n+                      setIsSidebarCollapsed(false);\r\n+                    }\r\n+                  }}\r\n+                >\r\n+                  {isSidebarLocked ? <Lock className=\"h-4 w-4\" /> : <Unlock className=\"h-4 w-4\" />}\r\n+                </Button>\r\n+              )}\r\n+\r\n+              {/* Sidebar content with overflow handling */}\r\n+              <div className={cn(\r\n+                \"transition-all duration-300 overflow-hidden\",\r\n+                isSidebarCollapsed ? \"opacity-0\" : \"opacity-100\"\r\n+              )}>\r\n+                <Card className=\"h-full\">\r\n+                  <CardHeader className=\"pb-3\">\r\n+                    <div className=\"flex items-center justify-between\">\r\n+                      <CardTitle className=\"text-lg font-semibold\">Content Management</CardTitle>\r\n+                      <TooltipProvider>\r\n+                        <Tooltip>\r\n+                          <TooltipTrigger>\r\n+                            <HelpCircle className=\"h-4 w-4 text-muted-foreground\" />\r\n+                          </TooltipTrigger>\r\n+                          <TooltipContent>\r\n+                            <p>Manage your educational content here</p>\r\n+                          </TooltipContent>\r\n+                        </Tooltip>\r\n+                      </TooltipProvider>\r\n+                      </div>\r\n+                    <CardDescription>Create and manage your lessons</CardDescription>\r\n+                  </CardHeader>\r\n+                  <CardContent className=\"space-y-4\">\r\n+                    {/* View/Edit Mode Toggle */}\r\n+                    <div className=\"grid grid-cols-2 gap-2 p-1 bg-muted rounded-lg\">\r\n+                      <Button\r\n+                        variant={isViewMode ? \"default\" : \"ghost\"}\r\n+                        size=\"sm\"\r\n+                        onClick={() => setIsViewMode(true)}\r\n+                        className=\"w-full\"\r\n+                      >\r\n+                        <Eye className=\"h-4 w-4 mr-2\" />\r\n+                        View\r\n+                      </Button>\r\n+                      <Button\r\n+                        variant={!isViewMode ? \"default\" : \"ghost\"}\r\n+                        size=\"sm\"\r\n+                        onClick={() => setIsViewMode(false)}\r\n+                        className=\"w-full\"\r\n+                      >\r\n+                        <Edit className=\"h-4 w-4 mr-2\" />\r\n+                        Edit\r\n+                      </Button>\r\n+                    </div>\r\n+\r\n+                    {/* Grade Selection */}\r\n+                    <div className=\"space-y-2\">\r\n+                      <div className=\"flex items-center justify-between\">\r\n+                        <Label htmlFor=\"grade-select\">Grade</Label>\r\n+                        {isViewMode && (\r\n+                          <Button variant=\"ghost\" size=\"sm\" onClick={() => setExpandedGrade(expandedGrade ? null : selectedGrade)}>\r\n+                            {expandedGrade ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n+                          </Button>\r\n+                        )}\r\n+                      </div>\r\n+                      <Select \r\n+                        value={selectedGradeId || ''}\r\n+                        onValueChange={handleGradeSelect}\r\n+                        onOpenChange={(open) => {\r\n+                          if (open) {\r\n+                            // Force sidebar to stay open and lock it\r\n+                            setIsSidebarCollapsed(false);\r\n+                            setIsSidebarLocked(true);\r\n+                          }\r\n+                        }}\r\n+                      >\r\n+                        <SelectTrigger \r\n+                          id=\"grade-select\" \r\n+                          className=\"w-full\"\r\n+                          onClick={(e) => {\r\n+                            e.stopPropagation(); // Prevent event bubbling\r\n+                            setIsSidebarCollapsed(false);\r\n+                            setIsSidebarLocked(true);\r\n+                          }}\r\n+                        >\r\n+                          <SelectValue placeholder=\"Select Grade\" />\r\n+                        </SelectTrigger>\r\n+                        <SelectContent \r\n+                          onCloseAutoFocus={(e) => {\r\n+                            e.preventDefault();\r\n+                            setIsSidebarLocked(true);\r\n+                            setIsSidebarCollapsed(false);\r\n+                          }}\r\n+                        >\r\n+                          {grades.map((grade: Grade) => (\r\n+                            <SelectItem \r\n+                              key={`grade-${grade.id || 'new'}`} \r\n+                              value={grade.id || ''}\r\n+                              onMouseDown={(e) => {\r\n+                                e.preventDefault();\r\n+                                e.stopPropagation();\r\n+                              }}\r\n+                            >\r\n+                              <div className=\"flex items-center gap-2\">\r\n+                                <BookOpen className=\"h-4 w-4 text-primary\" />\r\n+                                {grade.name}\r\n+                              </div>\r\n+                            </SelectItem>\r\n+                          ))}\r\n+                        </SelectContent>\r\n+                      </Select>\r\n+                      {!isViewMode && (\r\n+                      <Button \r\n+                        variant=\"outline\" \r\n+                        size=\"sm\" \r\n+                        className=\"w-full gap-2\"\r\n+                        onClick={() => setModalState({ ...modalState, showAddGrade: false })}\r\n+                      >\r\n+                        <Plus className=\"h-4 w-4\" />\r\n+                        Add New Grade\r\n+                      </Button>\r\n+                      )}\r\n+                    </div>\r\n+\r\n+                    {/* Content Tree View in View Mode */}\r\n+                    {isViewMode && expandedGrade && (\r\n+                      <div className=\"mt-4 space-y-4 overflow-y-auto max-h-[calc(100vh-300px)]\">\r\n+                        {topics.map((topic: Topic) => (\r\n+                          <Card \r\n+                            key={topic.id} \r\n+                            className={cn(\r\n+                              \"border-l-4 transition-all duration-200 hover:shadow-md\",\r\n+                              expandedTopic === topic.id \r\n+                                ? \"border-l-primary bg-accent/5\" \r\n+                                : \"border-l-primary/40 hover:border-l-primary\"\r\n+                            )}\r\n+                          >\r\n+                            <CardHeader \r\n+                              className=\"py-3 cursor-pointer select-none\" \r\n+                              onClick={() => handleTopicExpand(topic.id || '')}\r\n+                            >\r\n+                              <div className=\"flex items-center justify-between\">\r\n+                                <div className=\"flex items-center gap-2\">\r\n+                                  <Layers className=\"h-4 w-4 text-primary\" />\r\n+                                  <h4 className=\"font-medium\">{topic.title}</h4>\r\n+                                  <Badge variant=\"outline\" className=\"ml-2\">\r\n+                                    {subtopics.filter(s => s.topic_id === topic.id).length} Subtopics\r\n+                                  </Badge>\r\n+                                </div>\r\n+                                <div className=\"flex items-center gap-2\">\r\n+                                  <AlertDialog>\r\n+                                    <AlertDialogTrigger asChild>\r\n+                                      <Button \r\n+                                        variant=\"ghost\" \r\n+                                        size=\"sm\" \r\n+                                        className=\"hover:bg-destructive/10 hover:text-destructive\"\r\n+                                        onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}\r\n+                                      >\r\n+                                        <Trash className=\"h-4 w-4\" />\r\n+                                      </Button>\r\n+                                    </AlertDialogTrigger>\r\n+                                    {/* Alert Dialog Content */}\r\n+                                  </AlertDialog>\r\n+                                  <ChevronDown className={cn(\r\n+                                    \"h-4 w-4 transition-transform duration-200\",\r\n+                                    expandedTopic === topic.id ? \"rotate-0\" : \"-rotate-90\"\r\n+                                  )} />\r\n+                                </div>\r\n+                              </div>\r\n+                            </CardHeader>\r\n+\r\n+                            <AnimatePresence>\r\n+                              {expandedTopic === topic.id && (\r\n+                                <motion.div\r\n+                                  initial={{ height: 0, opacity: 0 }}\r\n+                                  animate={{ height: \"auto\", opacity: 1 }}\r\n+                                  exit={{ height: 0, opacity: 0 }}\r\n+                                  transition={{ duration: 0.2 }}\r\n+                                >\r\n+                                  <CardContent className=\"pt-0 pb-2\">\r\n+                                    <div className=\"pl-4 space-y-2\">\r\n+                                      {isLoadingSubtopics ? (\r\n+                                        <div className=\"flex items-center justify-center py-4\">\r\n+                                          <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\r\n+                                        </div>\r\n+                                      ) : (\r\n+                                        subtopics\r\n+                                          .filter(subtopic => subtopic.topic_id === topic.id)\r\n+                                          .map((subtopic: SubTopic) => (\r\n+                                            <div \r\n+                                              key={subtopic.id}\r\n+                                              className={cn(\r\n+                                                \"rounded-lg border transition-colors\",\r\n+                                                expandedSubtopic === subtopic.id \r\n+                                                  ? \"bg-accent/10 border-primary/20\" \r\n+                                                  : \"hover:bg-accent/5\"\r\n+                                              )}\r\n+                                            >\r\n+                                              <div \r\n+                                                className=\"p-3 cursor-pointer\"\r\n+                                                onClick={() => handleSubtopicExpand(subtopic.id || '')}\r\n+                                              >\r\n+                                                <div className=\"flex items-center justify-between py-2 cursor-pointer hover:bg-accent/50 rounded-md px-2\">\r\n+                                                  <div className=\"flex items-center gap-2\">\r\n+                                                    <BookOpen className=\"h-4 w-4 text-primary\" />\r\n+                                                    <span className=\"text-sm font-medium\">{subtopic.name}</span>\r\n+                                                    <Badge variant=\"outline\" className=\"ml-2\">\r\n+                                                      {lessons.filter(l => l.subtopic_id === subtopic.id).length} Lessons\r\n+                                                    </Badge>\r\n+                                                  </div>\r\n+                                                  <div className=\"flex items-center gap-2\">\r\n+                                                    <AlertDialog>\r\n+                                                      <AlertDialogTrigger asChild>\r\n+                                                        <Button \r\n+                                                          variant=\"ghost\" \r\n+                                                          size=\"sm\" \r\n+                                                          className=\"hover:bg-destructive/10 hover:text-destructive\"\r\n+                                                          onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}\r\n+                                                        >\r\n+                                                          <Trash className=\"h-4 w-4\" />\r\n+                                                        </Button>\r\n+                                                      </AlertDialogTrigger>\r\n+                                                      {/* Alert Dialog Content */}\r\n+                                                    </AlertDialog>\r\n+                                                    <ChevronDown className={cn(\r\n+                                                      \"h-4 w-4 transition-transform duration-200\",\r\n+                                                      expandedSubtopic === subtopic.id ? \"rotate-0\" : \"-rotate-90\"\r\n+                                                    )} />\r\n+                                                  </div>\r\n+                                                </div>\r\n+\r\n+                                                <AnimatePresence>\r\n+                                                  {expandedSubtopic === subtopic.id && (\r\n+                                                    <motion.div\r\n+                                                      initial={{ height: 0, opacity: 0 }}\r\n+                                                      animate={{ height: \"auto\", opacity: 1 }}\r\n+                                                      exit={{ height: 0, opacity: 0 }}\r\n+                                                      transition={{ duration: 0.2 }}\r\n+                                                    >\r\n+                                                      <div className=\"px-3 pb-3\">\r\n+                                                        <div className=\"space-y-2\">\r\n+                                                          {isLoadingLessons ? (\r\n+                                                            <div className=\"flex items-center justify-center py-4\">\r\n+                                                              <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\r\n+                                                            </div>\r\n+                                                          ) : (\r\n+                                                            lessons\r\n+                                                              .filter(lesson => lesson.subtopic_id === subtopic.id)\r\n+                                                              .map((lesson: Lesson) => (\r\n+                                                                <div\r\n+                                                                  key={lesson.id}\r\n+                                                                  onClick={() => handleLessonSelect(lesson.id || '')}\r\n+                                                                  className={cn(\r\n+                                                                    \"flex items-center gap-3 p-2 rounded-md cursor-pointer transition-colors\",\r\n+                                                                    \"hover:bg-accent\",\r\n+                                                                    currentLessonId === lesson.id && \"bg-accent\"\r\n+                                                                  )}\r\n+                                                                >\r\n+                                                                  <div className=\"flex items-center gap-2 flex-1\">\r\n+                                                                    <div className=\"flex h-8 w-8 items-center justify-center rounded-md border bg-background\">\r\n+                                                                      <BookOpen className=\"h-4 w-4 text-primary\" />\r\n+                                                                    </div>\r\n+                                                                    <div className=\"flex flex-col\">\r\n+                                                                      <span className=\"text-sm font-medium\">{lesson.title}</span>\r\n+                                                                      <span className=\"text-xs text-muted-foreground\">\r\n+                                                                        {lesson.duration} mins • {lesson.questions?.length || 0} Questions\r\n+                                                                      </span>\r\n+                                                                    </div>\r\n+                                                                  </div>\r\n+                                                                  <AlertDialog>\r\n+                                                                    <AlertDialogTrigger asChild>\r\n+                                                                      <Button \r\n+                                                                        variant=\"ghost\" \r\n+                                                                        size=\"sm\" \r\n+                                                                        className=\"hover:bg-destructive/10 hover:text-destructive\"\r\n+                                                                        onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}\r\n+                                                                      >\r\n+                                                                        <Trash className=\"h-4 w-4\" />\r\n+                                                                      </Button>\r\n+                                                                    </AlertDialogTrigger>\r\n+                                                                    {/* Alert Dialog Content */}\r\n+                                                                  </AlertDialog>\r\n+                                                                </div>\r\n+                                                              ))\r\n+                                                          )}\r\n+                                                        </div>\r\n+                                                      </div>\r\n+                                                    </motion.div>\r\n+                                                  )}\r\n+                                                </AnimatePresence>\r\n+                                              </div>\r\n+                                            </div>\r\n+                                          ))\r\n+                                      )}\r\n+                                    </div>\r\n+                                  </CardContent>\r\n+                                </motion.div>\r\n+                              )}\r\n+                            </AnimatePresence>\r\n+                          </Card>\r\n+                        ))}\r\n+                      </div>\r\n+                    )}\r\n+\r\n+                    {/* Regular Edit Mode Content */}\r\n+                    {!isViewMode && (\r\n+                      <>\r\n+                        {/* Existing Topic, Subtopic, and Lesson Selection UI */}\r\n+                      {/* Topic Selection */}\r\n+                        {selectedGradeId && (\r\n+                      <div className=\"space-y-2\">\r\n+                        <div className=\"flex items-center justify-between\">\r\n+                        <Label htmlFor=\"topic-select\">Topic</Label>\r\n+                        </div>\r\n+                        <Select \r\n+                              value={selectedTopicId || ''} \r\n+                              onValueChange={handleTopicSelect}\r\n+                        >\r\n+                          <SelectTrigger id=\"topic-select\" className=\"w-full\">\r\n+                            <SelectValue placeholder=\"Select Topic\" />\r\n+                          </SelectTrigger>\r\n+                          <SelectContent>\r\n+                                {topics.map((topic: Topic) => (\r\n+                                  <SelectItem \r\n+                                    key={`topic-${topic.id || 'new'}`} \r\n+                                    value={topic.id || ''}\r\n+                                  >\r\n+                                  <div className=\"flex items-center gap-2\">\r\n+                                  <Layers className=\"h-4 w-4 text-primary\" />\r\n+                                    {topic.title}\r\n+                                  </div>\r\n+                                </SelectItem>\r\n+                              ))}\r\n+                          </SelectContent>\r\n+                        </Select>\r\n+                        <Button \r\n+                          variant=\"outline\" \r\n+                          size=\"sm\" \r\n+                          className=\"w-full gap-2\"\r\n+                          onClick={() => setModalState({ ...modalState, showAddTopic: true })}\r\n+                        >\r\n+                          <Plus className=\"h-4 w-4\" />\r\n+                          Add New Topic\r\n+                        </Button>\r\n+                      </div>\r\n+                    )}\r\n+\r\n+                    {/* Subtopic Selection */}\r\n+                        {selectedTopicId && (\r\n+                      <div className=\"space-y-2\">\r\n+                        <div className=\"flex items-center justify-between\">\r\n+                        <Label htmlFor=\"subtopic-select\">Subtopic</Label>\r\n+                        </div>\r\n+                        <Select \r\n+                              value={selectedSubtopicId || ''} \r\n+                              onValueChange={handleSubtopicSelect}\r\n+                        >\r\n+                          <SelectTrigger id=\"subtopic-select\" className=\"w-full\">\r\n+                            <SelectValue placeholder=\"Select Subtopic\" />\r\n+                          </SelectTrigger>\r\n+                          <SelectContent>\r\n+                                {subtopics\r\n+                                  .filter(subtopic => subtopic.id)\r\n+                                  .map((subtopic, index) => (\r\n+                                    <SelectItem \r\n+                                      key={subtopic.id || `subtopic-${index}`}\r\n+                                      value={subtopic.id || ''}\r\n+                                    >\r\n+                                      {subtopic.title || 'Untitled Subtopic'}\r\n+                                    </SelectItem>\r\n+                                  ))}\r\n+                          </SelectContent>\r\n+                        </Select>\r\n+                        {!isViewMode && (\r\n+                          <Button \r\n+                            variant=\"outline\" \r\n+                            size=\"sm\" \r\n+                            className=\"w-full gap-2\"\r\n+                            onClick={() => setModalState({ ...modalState, showAddSubtopic: true })}\r\n+                          >\r\n+                            <Plus className=\"h-4 w-4\" />\r\n+                            Add New Subtopic\r\n+                          </Button>\r\n+                        )}\r\n+                      </div>\r\n+                    )}\r\n+\r\n+                    {/* Lesson Selection */}\r\n+                        {selectedSubtopicId && (\r\n+                      <div className=\"space-y-2\">\r\n+                        <div className=\"flex items-center justify-between\">\r\n+                          <Label htmlFor=\"lesson-select\">Lesson</Label>\r\n+                        </div>\r\n+                          <Select \r\n+                            value={currentLessonId || ''} \r\n+                            onValueChange={handleLessonSelect}\r\n+                            onOpenChange={(open) => {\r\n+                              setIsDropdownOpen(open);\r\n+                              if (open) {\r\n+                                setIsSidebarCollapsed(false);\r\n+                                setIsSidebarLocked(true);\r\n+                              } else {\r\n+                                // Small delay before unlocking to prevent immediate collapse\r\n+                                setTimeout(() => {\r\n+                                  setIsSidebarLocked(false);\r\n+                                }, 100);\r\n+                              }\r\n+                            }}\r\n+                          >\r\n+                            <SelectTrigger \r\n+                              id=\"lesson-select\" \r\n+                              className=\"w-full\"\r\n+                              onClick={(e) => {\r\n+                                e.stopPropagation();\r\n+                                setIsSidebarCollapsed(false);\r\n+                                setIsSidebarLocked(true);\r\n+                              }}\r\n+                            >\r\n+                              <SelectValue placeholder=\"Select Lesson\" />\r\n+                            </SelectTrigger>\r\n+                            <SelectContent>\r\n+                              {lessons\r\n+                                .filter((lesson): lesson is Lesson => lesson !== undefined && lesson !== null)\r\n+                                .map((lesson: Lesson) => (\r\n+                                  <SelectItem \r\n+                                    key={`lesson-${lesson.id || 'new'}`} \r\n+                                    value={lesson.id || ''}\r\n+                                  >\r\n+                                    <div className=\"flex items-center gap-2\">\r\n+                                      <BookOpen className=\"h-4 w-4 text-primary\" />\r\n+                                      {lesson.title || 'Untitled Lesson'}\r\n+                                    </div>\r\n+                                  </SelectItem>\r\n+                                ))}\r\n+                            </SelectContent>\r\n+                          </Select>\r\n+                    <Button \r\n+                            variant=\"outline\" \r\n+                            size=\"sm\" \r\n+                            className=\"w-full gap-2\"\r\n+                        onClick={() => setModalState({ ...modalState, showAddLesson: true })}\r\n+                          >\r\n+                            <Plus className=\"h-4 w-4\" />\r\n+                            Add New Lesson\r\n+                    </Button>\r\n+                      </div>\r\n+                        )}\r\n+                      </>\r\n+                    )}\r\n+                  </CardContent>\r\n+                </Card>\r\n+              </div>\r\n+\r\n+              {/* Collapsed view */}\r\n+              {isSidebarCollapsed && (\r\n+                <div className=\"absolute inset-0 flex flex-col items-center pt-12 gap-4\">\r\n+                  <BookOpen className=\"h-6 w-6 text-muted-foreground\" />\r\n+                  <div className=\"w-px h-full bg-border\" />\r\n+                </div>\r\n+              )}\r\n+            </Card>\r\n+          </div>\r\n+        \r\n+\r\n+          {/* Right Content Area */}\r\n+          <div className=\"flex-1 overflow-y-auto\">\r\n+            {isNavigating ? (\r\n+              <div className=\"flex items-center justify-center h-[400px]\">\r\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n+                <span className=\"ml-3\">Loading...</span>\r\n+              </div>\r\n+            ) : (\r\n+              <>\r\n+                {!selectedGradeId ? (\r\n+                  // Question Types Display Section\r\n+                  <div className=\"space-y-6\">\r\n+                    <Card>\r\n+                      <CardHeader>\r\n+                        <div className=\"flex items-center justify-between\">\r\n+                          <div>\r\n+                            <CardTitle className=\"text-xl font-semibold\">Available Question Types</CardTitle>\r\n+                            <CardDescription>Browse through different question formats and examples</CardDescription>\r\n+                          </div>\r\n+                          <TooltipProvider>\r\n+                            <Tooltip>\r\n+                              <TooltipTrigger>\r\n+                                <HelpCircle className=\"h-5 w-5 text-muted-foreground\" />\r\n+                              </TooltipTrigger>\r\n+                              <TooltipContent>\r\n+                                <p>Click on each type to see detailed examples</p>\r\n+                              </TooltipContent>\r\n+                            </Tooltip>\r\n+                          </TooltipProvider>\r\n+                        </div>\r\n+                      </CardHeader>\r\n+                      <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n+                        {Object.entries(QUESTION_TYPES).map(([type, details]) => (\r\n+                          <Card key={type} className=\"cursor-pointer hover:bg-accent/50 transition-colors\">\r\n+                            <CardHeader className=\"p-4\">\r\n+                              <div className=\"flex items-center justify-between mb-2\">\r\n+                                <Badge variant=\"outline\" className=\"bg-primary/5 text-lg\">\r\n+                                  {details.label}\r\n+                                </Badge>\r\n+                              </div>\r\n+                              <CardDescription className=\"text-sm\">\r\n+                                {details.description || 'No description available'}\r\n+                              </CardDescription>\r\n+                              <div className=\"mt-4\">\r\n+                                <div className=\"text-sm font-medium mb-2\">Example:</div>\r\n+                                <div className=\"p-3 rounded-md bg-muted/50 text-sm\">\r\n+                                  {type === 'multiple-choice' && (\r\n+                                    <>\r\n+                                      <div className=\"font-medium mb-2\">Q: What is the capital of France?</div>\r\n+                                      <div className=\"space-y-1 pl-4\">\r\n+                                        <div>A) Paris</div>\r\n+                                        <div>B) London</div>\r\n+                                        <div>C) Berlin</div>\r\n+                                        <div>D) Madrid</div>\r\n+                                      </div>\r\n+                                    </>\r\n+                                  )}\r\n+                                  {type === 'fill-in-blank' && (\r\n+                                    <div className=\"space-y-2\">\r\n+                                      <div>Complete the sentence:</div>\r\n+                                      <div>The sun rises in the <span className=\"bg-primary/20 px-2 rounded\">_____</span> and sets in the <span className=\"bg-primary/20 px-2 rounded\">_____</span>.</div>\r\n+                                    </div>\r\n+                                  )}\r\n+                                  {type === 'true-false' && (\r\n+                                    <div className=\"space-y-2\">\r\n+                                      <div className=\"font-medium\">Statement:</div>\r\n+                                      <div>The Earth is flat.</div>\r\n+                                      <div className=\"mt-2\">\r\n+                                        <Badge variant=\"outline\" className=\"mr-2\">True</Badge>\r\n+                                        <Badge variant=\"outline\">False</Badge>\r\n+                                      </div>\r\n+                                    </div>\r\n+                                  )}\r\n+                                  {type === 'matching' && (\r\n+                                    <div className=\"space-y-2\">\r\n+                                      <div className=\"font-medium mb-2\">Match the countries with their capitals:</div>\r\n+                                      <div className=\"grid grid-cols-2 gap-4\">\r\n+                                        <div>\r\n+                                          1. France<br />\r\n+                                          2. Germany<br />\r\n+                                          3. Spain\r\n+                                        </div>\r\n+                                        <div>\r\n+                                          • Berlin<br />\r\n+                                          • Paris<br />\r\n+                                          • Madrid\r\n+                                        </div>\r\n+                                      </div>\r\n+                                    </div>\r\n+                                  )}\r\n+                                  {type === 'ordering' && (\r\n+                                    <div className=\"space-y-2\">\r\n+                                      <div className=\"font-medium mb-2\">Arrange in chronological order:</div>\r\n+                                      <div className=\"space-y-1\">\r\n+                                        <Badge variant=\"outline\" className=\"mr-2\">1</Badge>World War II<br />\r\n+                                        <Badge variant=\"outline\" className=\"mr-2\">2</Badge>Industrial Revolution<br />\r\n+                                        <Badge variant=\"outline\" className=\"mr-2\">3</Badge>Renaissance\r\n+                                      </div>\r\n+                                    </div>\r\n+                                  )}\r\n+                                  {type === 'short-answer' && (\r\n+                                    <div className=\"space-y-2\">\r\n+                                      <div className=\"font-medium\">Question:</div>\r\n+                                      <div>Explain the water cycle in 2-3 sentences.</div>\r\n+                                      <div className=\"mt-2 p-2 border border-dashed rounded-md border-primary/30\">\r\n+                                        Answer space\r\n+                                      </div>\r\n+                                    </div>\r\n+                                  )}\r\n+                                </div>\r\n+                              </div>\r\n+                            </CardHeader>\r\n+                          </Card>\r\n+                        ))}\r\n+                      </CardContent>\r\n+                    </Card>\r\n+                  </div>\r\n+                ) : isViewMode ? (\r\n+                  <div className=\"space-y-6\">\r\n+                    {selectedGradeId ? (\r\n+                      <div className=\"grid grid-cols-1 gap-6\">\r\n+                        {topics.map((topic) => (\r\n+                          <Card key={topic.id} className=\"border-l-4 border-l-primary\">\r\n+                            <CardHeader>\r\n+                              <div className=\"flex items-center justify-between\">\r\n+                                <h3 className=\"text-lg font-semibold\">{topic.title}</h3>\r\n+                              </div>\r\n+                            </CardHeader>\r\n+                            <CardContent>\r\n+                              <div className=\"space-y-4\">\r\n+                                {subtopics\r\n+                                  .filter(subtopic => subtopic.topic_id === topic.id)\r\n+                                  .map((subtopic, index) => (\r\n+                                    <div key={subtopic.id || `subtopic-${index}`} className=\"border-l-2 pl-4\">\r\n+                                      <h4 className=\"text-md font-medium mb-2\">{subtopic.name || 'Untitled Subtopic'}</h4>\r\n+                                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n+                                        {lessons\r\n+                                          .filter(lesson => lesson.subtopic_id === subtopic.id)\r\n+                                          .map((lesson) => (\r\n+                                            <Card \r\n+                                              key={lesson.id} \r\n+                                              className={cn(\r\n+                                                \"cursor-pointer transition-all duration-200\",\r\n+                                                \"hover:shadow-md hover:translate-y-[-2px]\",\r\n+                                                \"hover:bg-accent/50 hover:border-primary/50\",\r\n+                                                \"active:translate-y-[0px]\",\r\n+                                                currentLessonId === lesson.id && \"border-primary bg-accent/50 shadow-md\",\r\n+                                                \"group\" // Enable group hover effects\r\n+                                              )}\r\n+                                              onClick={() => handleLessonSelect(lesson.id || '')}\r\n+                                            >\r\n+                                              <CardHeader className=\"p-4\">\r\n+                                                <div className=\"flex flex-col gap-2\">\r\n+                                                  <div className=\"flex items-center justify-between\">\r\n+                                                    <div className=\"flex items-center gap-2\">\r\n+                                                      <BookOpen className={cn(\r\n+                                                        \"h-4 w-4 text-primary\",\r\n+                                                        \"transition-transform duration-200\",\r\n+                                                        \"group-hover:scale-110\"\r\n+                                                      )} />\r\n+                                                      <span className=\"font-medium\">{lesson.title}</span>\r\n+                                                    </div>\r\n+                                                    <Button\r\n+                                                      variant=\"outline\"\r\n+                                                      size=\"sm\"\r\n+                                                      className={cn(\r\n+                                                        \"opacity-0 group-hover:opacity-100\",\r\n+                                                        \"transition-all duration-200\",\r\n+                                                        \"hover:bg-primary hover:text-primary-foreground\"\r\n+                                                      )}\r\n+                                                      disabled={!lesson.content || currentLessonId !== lesson.id}\r\n+                                                      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\r\n+                                                        e.stopPropagation();\r\n+                                                        window.location.href = `/teacher/lessons/${lesson.id}`;\r\n+                                                      }}\r\n+                                                    >\r\n+                                                      Start Lesson\r\n+                                                    </Button>\r\n+                                                  </div>\r\n+                                                  <div className=\"flex items-center gap-2\">\r\n+                                                    <Badge variant=\"outline\" className={cn(\r\n+                                                      \"bg-primary/5\",\r\n+                                                      \"transition-colors duration-200\",\r\n+                                                      \"group-hover:bg-primary/10\"\r\n+                                                    )}>\r\n+                                                      {lesson.questions?.length || 0} Questions\r\n+                                                    </Badge>\r\n+                                                    <Badge variant=\"outline\" className={cn(\r\n+                                                      \"bg-primary/5\",\r\n+                                                      \"transition-colors duration-200\",\r\n+                                                      \"group-hover:bg-primary/10\"\r\n+                                                    )}>\r\n+                                                      {lesson.activities?.length || 0} Activities\r\n+                                                    </Badge>\r\n+                                                  </div>\r\n+                                                </div>\r\n+                                              </CardHeader>\r\n+                                            </Card>\r\n+                                          ))}\r\n+                                      </div>\r\n+                                    </div>\r\n+                                  ))}\r\n+                              </div>\r\n+                            </CardContent>\r\n+                          </Card>\r\n+                        ))}\r\n+                      </div>\r\n+                    ) : (\r\n+                      <div className=\"text-center py-20\">\r\n+                        <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\r\n+                        <h3 className=\"text-lg font-medium\">Select a Grade</h3>\r\n+                        <p className=\"text-sm text-muted-foreground\">\r\n+                          Choose a grade from the left panel to start managing content\r\n+                        </p>\r\n+                      </div>\r\n+                    )}\r\n+                  </div>\r\n+                ) : (\r\n+                  // Edit Mode Content\r\n+                  <div className=\"space-y-4\">\r\n+                    {/* Lesson Title */}\r\n+                    <Card>\r\n+                      <CardHeader>\r\n+                        <div className=\"flex items-center justify-between mb-4\">\r\n+                          <h2 className=\"text-2xl font-bold\">Lesson Content</h2>\r\n+                                                    <Button\r\n+                                                      variant=\"outline\"\r\n+                                                      size=\"sm\"\r\n+                            onClick={() => setIsContentEditorOpen(true)}\r\n+                          >\r\n+                            <Pencil className=\"h-4 w-4 mr-2\" />\r\n+                            Edit Content\r\n+                          </Button>\r\n+                        </div>\r\n+                      </CardHeader>\r\n+                      <CardContent className=\"space-y-4\">\r\n+                        {/* Lesson Title */}\r\n+                        <div className=\"flex items-center justify-between\">\r\n+                          <div className=\"space-y-1\">\r\n+                            <Label>Lesson Title</Label>\r\n+                            <InlineEdit\r\n+                              value={lessonTitle}\r\n+                              onSave={async (newTitle) => {\r\n+                                setLessonTitle(newTitle);\r\n+                                await handleSaveLesson();\r\n+                              }}\r\n+                              isEditing={isEditingTitle}\r\n+                              setIsEditing={setIsEditingTitle}\r\n+                              placeholder=\"Enter lesson title\"\r\n+                              className=\"text-lg font-medium\"\r\n+                            />\r\n+                          </div>\r\n+                        </div>\r\n+\r\n+                        {/* Content Editor and Display */}\r\n+                        <div className=\"space-y-4\">\r\n+                          {isContentEditorOpen ? (\r\n+                            <div className=\"border rounded-lg p-4\">\r\n+                              <div className=\"mb-4\">\r\n+                                <Label>Content Heading</Label>\r\n+                                <InlineEdit\r\n+                                  value={contentHeading}\r\n+                                  onSave={(newHeading) => setContentHeading(newHeading)}\r\n+                                  isEditing={isEditingHeading}\r\n+                                  setIsEditing={setIsEditingHeading}\r\n+                                  placeholder=\"Add content heading\"\r\n+                                  className=\"text-base text-muted-foreground\"\r\n+                                />\r\n+                              </div>\r\n+                              <RichTextEditor\r\n+                                value={lessonContent}\r\n+                                onChange={setLessonContent}\r\n+                                onSave={async (content) => {\r\n+                                  await handleContentSave(content);\r\n+                                  setIsContentEditorOpen(false);\r\n+                                }}\r\n+                                placeholder=\"Add lesson content here...\"\r\n+                              />\r\n+                            </div>\r\n+                          ) : lessonContent ? (\r\n+                            <div className=\"prose prose-sm max-w-none\">\r\n+                              {contentHeading && (\r\n+                                <h3 className=\"text-lg font-semibold mb-2\">{contentHeading}</h3>\r\n+                              )}\r\n+                              <div dangerouslySetInnerHTML={{ __html: lessonContent }} />\r\n+                            </div>\r\n+                          ) : (\r\n+                            <div className=\"text-center py-8 text-muted-foreground\">\r\n+                              Click 'Edit Content' to add lesson content\r\n+                            </div>\r\n+                          )}\r\n+                        </div>\r\n+                      </CardContent>\r\n+                    </Card>\r\n+\r\n+                    {/* Tabs */}\r\n+                    <Tabs defaultValue=\"questions\" className=\"mt-6\">\r\n+                    <TabsList className=\"grid w-full grid-cols-2\">\r\n+                        <TabsTrigger value=\"questions\">\r\n+                          <MessageSquare className=\"h-4 w-4 mr-2\" />\r\n+                        Questions\r\n+                      </TabsTrigger>\r\n+                        <TabsTrigger value=\"activities\">\r\n+                          <ActivityIcon className=\"h-4 w-4 mr-2\" />\r\n+                        Activities\r\n+                      </TabsTrigger>\r\n+                    </TabsList>\r\n+\r\n+                      {/* Questions Tab */}\r\n+                      <TabsContent value=\"questions\" className=\"space-y-4\">\r\n+                      <CardHeader>\r\n+                          <CardDescription>Add and manage questions for this lesson</CardDescription>\r\n+                      </CardHeader>\r\n+                        {questions.map((question, index) => (\r\n+                          <Card key={index} className={cn(\r\n+                            \"relative border-l-4 transition-colors duration-200\",\r\n+                            expandedQuestion === index ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\r\n+                          )}>\r\n+                            <CardHeader className=\"pb-3\">\r\n+                              <div className=\"flex items-center justify-between gap-4\">\r\n+                                <div className=\"flex items-center gap-3 min-w-0 flex-1\">\r\n+                                  <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n+                                    <span className=\"px-2 py-1 bg-primary/10 rounded-md text-sm font-semibold text-primary whitespace-nowrap\">\r\n+                                      Q {index + 1}\r\n+                                    </span>\r\n+                                    <Badge variant=\"outline\" className=\"whitespace-nowrap\">\r\n+                                      {QUESTION_TYPES[question.type as keyof typeof QUESTION_TYPES]?.label || question.type}\r\n+                                    </Badge>\r\n+                                    {question.isDraft && (\r\n+                                      <Badge variant=\"secondary\" className=\"whitespace-nowrap\">Draft</Badge>\r\n+                                )}\r\n+                                  </div>\r\n+                                      {expandedQuestion !== index && (\r\n+                                        <div className=\"text-sm text-muted-foreground truncate\">\r\n+                                          {question.title || 'No question text'} - {question.content || 'No question texts'}\r\n+                                        </div>\r\n+                                      )}\r\n+                                    </div>\r\n+                                    <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n+                                      <Button\r\n+                                        variant=\"ghost\"\r\n+                                        size=\"sm\"\r\n+                                        onClick={() => handleQuestionExpand(index)}\r\n+                                      >\r\n+                                        {expandedQuestion === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n+                                      </Button>\r\n+                                      <Button\r\n+                                        variant=\"ghost\"\r\n+                                        size=\"sm\"\r\n+                                        onClick={() => handleRemoveQuestion(index)}\r\n+                                      >\r\n+                                        <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n+                                      </Button>\r\n+                                    </div>\r\n+                                  </div>\r\n+                                </CardHeader>\r\n+                                {expandedQuestion === index && (\r\n+                                  <CardContent>\r\n+                                    <QuestionForm\r\n+                                      key={index}\r\n+                                      question={{ \r\n+                                        ...question, \r\n+                                        lesson_id: currentLessonId || '',\r\n+                                        type: isValidQuestionType(question.type) ? question.type : 'speaking',\r\n+                                        data: {\r\n+                                          prompt: question.data?.prompt ?? '',\r\n+                                          teacher_script: question.data?.teacher_script ?? '',\r\n+                                          followup_prompt: question.data?.followup_prompt ?? [],\r\n+                                          sample_answer: question.data?.sample_answer ?? '',\r\n+                                          \r\n+                                        } \r\n+                                      }}\r\n+                                      index={index}\r\n+                                      onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\r\n+                                        await handleUpdateQuestion(index, {\r\n+                                          ...updatedQuestion,\r\n+                                          data: {\r\n+                                            prompt: updatedQuestion.data?.prompt ?? '',\r\n+                                            teacher_script: updatedQuestion.data?.teacher_script ?? '',\r\n+                                            followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\r\n+                                            sample_answer: updatedQuestion.data?.sample_answer ?? '',\r\n+                                            metadata: updatedQuestion.metadata ?? {},\r\n+                                            },\r\n+                                            correct_answer: updatedQuestion.correct_answer ?? '',\r\n+                                            content: updatedQuestion.content ?? ''  // Add default value\r\n+                                        });\r\n+                                      }}\r\n+                                      onRemove={handleRemoveQuestion}\r\n+                                      onAddExercisePrompt={handleAddExercisePrompt}\r\n+                                      onRemoveExercisePrompt={handleRemoveExercisePrompt}\r\n+                                      onExercisePromptChange={handleExercisePromptChange}\r\n+                                    /><Button \r\n+                                    size=\"sm\"\r\n+                                    variant=\"outline\"\r\n+                                    onClick={() => handleSaveQuestion(question, index)}\r\n+                                    className=\"ml-2\"\r\n+                                  >\r\n+                                    {questionSaveStatuses.find(s => s.id === question.id)?.status === 'saving' ? (\r\n+                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n+                                    ) : (\r\n+                                      <Save className=\"h-4 w-4 mr-2\" />\r\n+                                    )}\r\n+                                    Save Question\r\n+                                                    </Button>\r\n+                                    {/* Exercise Prompts with Save Buttons */}\r\n+                                    {question.exercisePrompts?.map((prompt, promptIndex) => (\r\n+                                      <div key={`${question.id}-prompt-${promptIndex}`} className=\"mt-4\"> {/* Updated key */}\r\n+                                        <div className=\"flex items-center justify-between mb-2\">\r\n+                                          <h4 className=\"text-sm font-medium\">Exercise Prompt {promptIndex + 1}</h4>\r\n+                                          <div className=\"flex items-center gap-2\">\r\n+                                            <TooltipProvider>\r\n+                                              <Tooltip>\r\n+                                                <TooltipTrigger asChild>\r\n+                                                  <Button\r\n+                                                    size=\"sm\"\r\n+                                                    variant=\"outline\"\r\n+                                                    onClick={() => handleSavePrompt(question.id, prompt, promptIndex)}\r\n+                                                    disabled={promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving'}\r\n+                                                  >\r\n+                                                    {promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving' ? (\r\n+                                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n+                                                    ) : (\r\n+                                                      <Save className=\"h-4 w-4 mr-2\" />\r\n+                                                    )}\r\n+                                                    Save Prompt\r\n+                                                  </Button>\r\n+                                                </TooltipTrigger>\r\n+                                                <TooltipContent>\r\n+                                                  {`Status: ${promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}`}\r\n+                                                </TooltipContent>\r\n+                                              </Tooltip>\r\n+                                            </TooltipProvider>\r\n+                                            <Badge variant={\r\n+                                              promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saved'\r\n+                                                ? 'secondary'\r\n+                                                : promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'error'\r\n+                                                ? 'destructive'\r\n+                                                : 'default'\r\n+                                            }>\r\n+                                              {promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}\r\n+                                            </Badge>\r\n+                                                  </div>\r\n+                                        </div>\r\n+                                        <ExercisePromptCard\r\n+                                          key={prompt.id} // Add a unique key here\r\n+                                          prompt={prompt}\r\n+                                          promptIndex={promptIndex}\r\n+                                          onRemove={() => handleRemoveExercisePrompt(index, promptIndex)}\r\n+                                          onUpdate={(updatedPrompt: ExercisePrompt) => {\r\n+                                            // Prevent duplicate updates\r\n+                                            if (updatedPrompt.id === prompt.id) {\r\n+                                              handleExercisePromptChange(index, promptIndex, updatedPrompt);\r\n+                                            }\r\n+                                          }}\r\n+                                        />\r\n+                                      </div>\r\n+                                    ))}\r\n+                                  </CardContent>\r\n+                                )}\r\n+                              </Card>\r\n+                            ))}\r\n+\r\n+                            {/* Add Question Button */}\r\n+                            <div className=\"flex items-center justify-between\">\r\n+                              <QuestionTypeSelect \r\n+                                value={selectedQuestionType} \r\n+                                onChange={handleQuestionTypeChange}\r\n+                              />\r\n+                                        <Button\r\n+                                          onClick={handleAddQuestion}\r\n+                                          disabled={!selectedQuestionType}\r\n+                                        >\r\n+                                <Plus className=\"h-4 w-4 mr-2\" />\r\n+                                          Add Question\r\n+                                        </Button>\r\n+                                      </div>\r\n+                      </TabsContent>\r\n+\r\n+                      {/* Activities Tab */}\r\n+                      <TabsContent value=\"activities\" className=\"space-y-4\">\r\n+                      <CardHeader>\r\n+                          <CardDescription>Add and manage activities for this lesson</CardDescription>\r\n+                      </CardHeader>\r\n+                        {activities.map((activity, index) => (\r\n+                          <Card key={index}>\r\n+                            <CardHeader className=\"pb-3\">\r\n+                              <div className=\"flex items-center justify-between\">\r\n+                                  <div className=\"flex items-center gap-2\">\r\n+                                  <Badge variant=\"outline\">Activity {index + 1}</Badge>\r\n+                                  </div>\r\n+                                <div className=\"flex items-center gap-2\">\r\n+                                  <Button\r\n+                                    variant=\"ghost\"\r\n+                                    size=\"sm\"\r\n+                                    onClick={() => handleActivityExpand(index)}\r\n+                                  >\r\n+                                    {expandedActivity === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n+                                  </Button>\r\n+                                  <Button\r\n+                                    variant=\"ghost\"\r\n+                                    size=\"sm\"\r\n+                                    onClick={() => handleRemoveActivity(index)}\r\n+                                  >\r\n+                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n+                                  </Button>\r\n+                                </div>\r\n+                              </div>\r\n+                            </CardHeader>\r\n+                            {expandedActivity === index && (\r\n+                              <CardContent>\r\n+                                <div className=\"space-y-4\">\r\n+                                  <div className=\"space-y-2\">\r\n+                                    <Label>Instructions</Label>\r\n+                                    <Textarea\r\n+                                      value={activity.instructions}\r\n+                                      onChange={(e) => handleUpdateActivity(index, {\r\n+                                        ...activity,\r\n+                                        instructions: e.target.value\r\n+                                      })}\r\n+                                      placeholder=\"Enter activity instructions\"\r\n+                                    />\r\n+                                  </div>\r\n+                                    \r\n+                                    {/* Media Section */}\r\n+                                    <div className=\"space-y-2\">\r\n+                                      <Label>Media</Label>\r\n+                                      {activity.media?.map((media, mediaIndex) => (\r\n+                                        <div key={mediaIndex} className=\"flex items-center gap-2\">\r\n+                                          <Input\r\n+                                            value={media.url}\r\n+                                            onChange={(e) => {\r\n+                                              const updatedMedia = [...(activity.media || [])];\r\n+                                              updatedMedia[mediaIndex] = {\r\n+                                                type: media.type,\r\n+                                                url: e.target.value\r\n+                                              };\r\n+                                              handleUpdateActivity(index, {\r\n+                                                ...activity,\r\n+                                                media: updatedMedia\r\n+                                              });\r\n+                                            }}\r\n+                                            placeholder=\"Media URL\"\r\n+                                          />\r\n+                                          <Select\r\n+                                            value={media.type}\r\n+                                            onValueChange={(value) => {\r\n+                                              const updatedMedia = [...(activity.media || [])];\r\n+                                              updatedMedia[mediaIndex] = {\r\n+                                                type: value as 'image' | 'gif' | 'video',\r\n+                                                url: media.url\r\n+                                              };\r\n+                                              handleUpdateActivity(index, {\r\n+                                                ...activity,\r\n+                                                media: updatedMedia\r\n+                                              });\r\n+                                            }}\r\n+                                          >\r\n+                                            <SelectTrigger className=\"w-[120px]\">\r\n+                                              <SelectValue placeholder=\"Type\" />\r\n+                                            </SelectTrigger>\r\n+                                            <SelectContent>\r\n+                                              <SelectItem value=\"image\">Image</SelectItem>\r\n+                                              <SelectItem value=\"gif\">GIF</SelectItem>\r\n+                                              <SelectItem value=\"video\">Video</SelectItem>\r\n+                                            </SelectContent>\r\n+                                          </Select>\r\n+                                <Button\r\n+                                            variant=\"ghost\"\r\n+                                            size=\"sm\"\r\n+                                  onClick={() => {\r\n+                                              const updatedMedia = (activity.media || []).filter((_, i) => i !== mediaIndex);\r\n+                                              handleUpdateActivity(index, {\r\n+                                                ...activity,\r\n+                                                media: updatedMedia\r\n+                                          });\r\n+                                          }}\r\n+                                  >\r\n+                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n+                                  </Button>\r\n+                                </div>\r\n+                                        ))}\r\n+                                  <Button\r\n+                                    variant=\"outline\"\r\n+                                    size=\"sm\"\r\n+                                            onClick={() => {\r\n+                                              handleUpdateActivity(index, {\r\n+                                                ...activity,\r\n+                                                media: [\r\n+                                                  ...(activity.media || [])  ,\r\n+                                                  { url: '', type: 'image' }\r\n+                                                ]\r\n+                                              });\r\n+                                            }}\r\n+                                  >\r\n+                                    <Plus className=\"h-4 w-4 mr-2\" />\r\n+                                            Add Media\r\n+                                  </Button>\r\n+                                </div>\r\n+                                      </div>\r\n+                                    </CardContent>\r\n+                                  )}\r\n+                                </Card>\r\n+                              ))}\r\n+\r\n+                              {/* Add Activity Button */}\r\n+                              <Button\r\n+                                onClick={handleAddActivity}\r\n+                                className=\"w-full\"\r\n+                              >\r\n+                                <Plus className=\"h-4 w-4 mr-2\" />\r\n+                                Add Activity\r\n+                              </Button>\r\n+                          </TabsContent>\r\n+                        </Tabs>\r\n+                        </div>\r\n+                )}\r\n+\r\n+                    {/* Floating Save Button */}\r\n+                    <div className=\"fixed bottom-8 right-8 flex items-center gap-4\">\r\n+                      {saveProgress !== 'idle' && (\r\n+                        <div className={cn(\r\n+                          \"flex items-center gap-2 rounded-lg px-4 py-2 shadow-lg\",\r\n+                          {\r\n+                            \"bg-background border\": saveProgress === 'saving',\r\n+                            \"bg-green-500 text-white\": saveProgress === 'saved',\r\n+                            \"bg-destructive text-destructive-foreground\": saveProgress === 'error'\r\n+                          }\r\n+                        )}>\r\n+                          {saveProgress === 'saving' && (\r\n+                            <>\r\n+                              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n+                              <span className=\"text-sm\">Saving changes...</span>\r\n+                            </>\r\n+                          )}\r\n+                          {saveProgress === 'saved' && (\r\n+                            <>\r\n+                              <Check className=\"h-4 w-4\" />\r\n+                              <span className=\"text-sm\">Changes saved</span>\r\n+                            </>\r\n+                          )}\r\n+                          {saveProgress === 'error' && (\r\n+                            <>\r\n+                              <X className=\"h-4 w-4\" />\r\n+                              <span className=\"text-sm\">Error saving changes</span>\r\n+                            </>\r\n+                          )}\r\n+                        </div>\r\n+                      )}\r\n+                      <Button\r\n+                        onClick={handleSaveLesson}\r\n+                        disabled={saveProgress === 'saving'}\r\n+                        className=\"shadow-lg\"\r\n+                      >\r\n+                        {saveProgress === 'saving' ? (\r\n+                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\r\n+                        ) : (\r\n+                          <Save className=\"h-4 w-4 mr-2\" />\r\n+                        )}\r\n+                        {saveProgress === 'saving' ? 'Saving...' : 'Save Lesson'}\r\n+                      </Button>\r\n+                    </div>\r\n+                  </>\r\n+            )}\r\n+    </div>\r\n+    \r\n+\r\n+      {/* Floating Save Button */}\r\n+      {selectedSubtopicId && currentLessonId && (\r\n+          <div className=\"fixed bottom-4 right-4 flex flex-col gap-2\">\r\n+            <TooltipProvider>\r\n+              <Tooltip>\r\n+                <TooltipTrigger asChild>\r\n+                  <Button\r\n+                    size=\"icon\"\r\n+                    className=\"rounded-full h-12 w-12 shadow-lg\"\r\n+                    onClick={handleSaveLesson}\r\n+                    disabled={!selectedSubtopicId || !lessonTitle || questions.length === 0}\r\n+                  >\r\n+                    <Save className=\"h-6 w-6\" />\r\n+                  </Button>\r\n+                </TooltipTrigger>\r\n+                <TooltipContent>\r\n+                  <p>Save Lesson (Ctrl+S)</p>\r\n+                </TooltipContent>\r\n+              </Tooltip>\r\n+            </TooltipProvider>\r\n+          </div>\r\n+        )}\r\n+        <SaveFeedback />\r\n+\r\n+        {/* Add Grade Modal - do not delete */}\r\n+        {/* {modalState.showAddGrade && (\r\n+          <Dialog \r\n+            open={modalState.showAddGrade} \r\n+            onOpenChange={(open) => handleModalStateChange('showAddGrade', open)}\r\n+          >\r\n+            <DialogContent \r\n+              className=\"sm:max-w-[425px]\"\r\n+              onEscapeKeyDown={cleanupModalState}\r\n+              onPointerDownOutside={cleanupModalState}\r\n+            >\r\n+              <DialogHeader>\r\n+                <DialogTitle>Add New Grade</DialogTitle>\r\n+                <DialogDescription>Enter the details for the new grade.</DialogDescription>\r\n+              </DialogHeader>\r\n+              <div className=\"space-y-4 py-4\">\r\n+                <div className=\"space-y-2\">\r\n+                  <Label htmlFor=\"grade-name\">Grade Name</Label>\r\n+                  <Input\r\n+                    id=\"grade-name\"\r\n+                    value={newItemData.name}\r\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n+                    placeholder=\"Enter grade name\"\r\n+                  />\r\n+      </div>\r\n+              </div>\r\n+              <DialogFooter>\r\n+                <Button variant=\"outline\" onClick={() => {\r\n+                  setModalState({ ...modalState, showAddGrade: false });\r\n+                  setNewItemData({ name: '', description: '' });\r\n+                }}>\r\n+                  Cancel\r\n+                </Button>\r\n+                <Button onClick={handleCreateGrade} disabled={!newItemData.name}>Create Grade</Button>\r\n+              </DialogFooter>\r\n+            </DialogContent>\r\n+          </Dialog>\r\n+        )} */}\r\n+\r\n+        {/* Add Topic Modal */}\r\n+        {modalState.showAddTopic && (\r\n+          <Dialog \r\n+            open={modalState.showAddTopic} \r\n+            onOpenChange={(open) => handleModalStateChange('showAddTopic', open)}\r\n+          >\r\n+            <DialogContent \r\n+              className=\"sm:max-w-[425px]\"\r\n+              onEscapeKeyDown={cleanupModalState}\r\n+              onPointerDownOutside={cleanupModalState}\r\n+            >\r\n+              <DialogHeader>\r\n+                <DialogTitle>Add New Topic</DialogTitle>\r\n+                <DialogDescription>Enter the details for the new topic.</DialogDescription>\r\n+              </DialogHeader>\r\n+              <div className=\"space-y-4 py-4\">\r\n+                <div className=\"space-y-2\">\r\n+                  <Label htmlFor=\"topic-name\">Topic Name</Label>\r\n+                  <Input\r\n+                    id=\"topic-name\"\r\n+                    value={newItemData.name}\r\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n+                    placeholder=\"Enter topic name\"\r\n+                  />\r\n+                </div>\r\n+              </div>\r\n+              <DialogFooter>\r\n+                <Button variant=\"outline\" onClick={() => {\r\n+                  setModalState({ ...modalState, showAddTopic: false });\r\n+                  setNewItemData({ name: '', description: '' });\r\n+                }}>\r\n+                  Cancel\r\n+                </Button>\r\n+                <Button onClick={handleCreateTopic} disabled={!newItemData.name}>Create Topic</Button>\r\n+              </DialogFooter>\r\n+            </DialogContent>\r\n+          </Dialog>\r\n+        )}\r\n+\r\n+        {/* Add Subtopic Modal */}\r\n+        {modalState.showAddSubtopic && (\r\n+          <Dialog \r\n+            open={modalState.showAddSubtopic} \r\n+            onOpenChange={(open) => handleModalStateChange('showAddSubtopic', open)}\r\n+          >\r\n+            <DialogContent \r\n+              className=\"sm:max-w-[425px]\"\r\n+              onEscapeKeyDown={cleanupModalState}\r\n+              onPointerDownOutside={cleanupModalState}\r\n+            >\r\n+              <DialogHeader>\r\n+                <DialogTitle>Add New Subtopic</DialogTitle>\r\n+                <DialogDescription>Enter the details for the new subtopic.</DialogDescription>\r\n+              </DialogHeader>\r\n+              <div className=\"space-y-4 py-4\">\r\n+                <div className=\"space-y-2\">\r\n+                  <Label htmlFor=\"subtopic-name\">Subtopic Name</Label>\r\n+                  <Input\r\n+                    id=\"subtopic-name\"\r\n+                    value={newItemData.name}\r\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n+                    placeholder=\"Enter subtopic name\"\r\n+                  />\r\n+                </div>\r\n+              </div>\r\n+              <DialogFooter>\r\n+                <Button variant=\"outline\" onClick={() => {\r\n+                  setModalState({ ...modalState, showAddSubtopic: false });\r\n+                  setNewItemData({ name: '', description: '' });\r\n+                }}>\r\n+                  Cancel\r\n+                </Button>\r\n+                <Button onClick={() => handleCreateSubtopic({ title: newItemData.name })} disabled={!newItemData.name}>Create Subtopic</Button>\r\n+              </DialogFooter>\r\n+            </DialogContent>\r\n+          </Dialog>\r\n+        )}\r\n+\r\n+        {/* Add Lesson Modal */}\r\n+        {modalState.showAddLesson && (\r\n+          <Dialog \r\n+            open={modalState.showAddLesson} \r\n+            onOpenChange={(open) => handleModalStateChange('showAddLesson', open)}\r\n+          >\r\n+            <DialogContent \r\n+              className=\"sm:max-w-[425px]\"\r\n+              onEscapeKeyDown={cleanupModalState}\r\n+              onPointerDownOutside={cleanupModalState}\r\n+            >\r\n+              <DialogHeader>\r\n+                <DialogTitle>Add New Lesson</DialogTitle>\r\n+                <DialogDescription>Enter the details for the new lesson.</DialogDescription>\r\n+              </DialogHeader>\r\n+              <div className=\"space-y-4 py-4\">\r\n+                <div className=\"space-y-2\">\r\n+                  <Label htmlFor=\"lesson-name\">Lesson Title</Label>\r\n+                  <Input\r\n+                    id=\"lesson-name\"\r\n+                    value={newItemData.name}\r\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n+                    placeholder=\"Enter lesson title\"\r\n+                  />\r\n+                </div>\r\n+              </div>\r\n+              <DialogFooter>\r\n+                <Button variant=\"outline\" onClick={() => {\r\n+                  setModalState({ ...modalState, showAddLesson: false });\r\n+                  setNewItemData({ name: '', description: '' });\r\n+                }}>\r\n+                  Cancel\r\n+                </Button>\r\n+                <Button onClick={handleCreateLesson} disabled={!newItemData.name}>Create Lesson</Button>\r\n+              </DialogFooter>\r\n+            </DialogContent>\r\n+          </Dialog>\r\n+        )}\r\n+      </div>\r\n+      <Toaster />\r\n+      </div>\r\n+  );\r\n+} \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739966851767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,3313 +1,3313 @@\n-\"use client\";\r\n-\r\n-import { useState, useCallback, useEffect, useRef } from 'react';\r\n-import { toast } from 'sonner';\r\n-import { Toaster } from 'sonner';\r\n-import Link from 'next/link';\r\n-import {  Activity as ActivityIcon,  ArrowLeft,  BookOpen,  ChevronDown,  ChevronRight,  Check,  Edit,  Eye,  EyeOff,  HelpCircle,  Layers,  List,  MessageSquare,  Plus,  Save,  Trash as Trash2, X, Pencil, Lock, Unlock, RefreshCw, Clock, Bell, Moon, GraduationCap, MoreHorizontal, Loader2 } from 'lucide-react';\r\n-import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\n-import { Badge } from '@/components/ui/badge';\r\n-import { Button } from '@/components/ui/button';\r\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\n-import { Input } from '@/components/ui/input';\r\n-import { Label } from '@/components/ui/label';\r\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\n-import { Textarea } from '@/components/ui/textarea';\r\n-import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\r\n-import { cn } from '@/lib/utils';\r\n-import { API_BASE_URL, QUESTION_TYPES, isQuestionType } from './constants';\r\n-import { ExercisePrompt, Lesson } from './types';\r\n-import { QuestionFormProps, ExercisePromptCardProps, Activity, Grade, Topic, Subtopic as SubTopic } from './types';\r\n-import { QuestionForm } from './components/question-form';\r\n-import { ExercisePromptCard } from './components/exercise-prompt-card';\r\n-import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\r\n-import { supabase } from '@/lib/supabase';\r\n-import { useContentStore } from '@/lib/content/store';\r\n-import { contentService } from '@/lib/content/ContentService';\r\n-import { MediaPreview } from '@/components/ui/media-preview';\r\n-import { QuestionTypeSelect } from './components/question-type-select';\r\n-import { RichTextEditor } from '@/components/ui/rich-text-editor';\r\n-import {\r\n-  AlertDialog,\r\n-  AlertDialogAction,\r\n-  AlertDialogCancel,\r\n-  AlertDialogContent,\r\n-  AlertDialogDescription,\r\n-  AlertDialogFooter,\r\n-  AlertDialogHeader,\r\n-  AlertDialogTitle,\r\n-  AlertDialogTrigger,\r\n-} from \"@/components/ui/alert-dialog\";\r\n-import { debounce, isNull } from 'lodash';\r\n-import { PostgrestError } from '@supabase/supabase-js';\r\n-import { Question as ContentQuestion } from './types';  // Import the specific type\r\n-import { Trash } from \"lucide-react\";\r\n-import { AnimatePresence, motion } from 'framer-motion';\r\n-\r\n-\r\n-// Update the API endpoint to match your backend route\r\n-const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\r\n-\r\n-interface QuestionTypeSelectProps {\r\n-  value: string;\r\n-  onValueChange: (value: string) => void;\r\n-}\r\n-\r\n-// Add metadata type\r\n-interface LessonMetadata {\r\n-  lastEdited?: string;\r\n-  version?: number;\r\n-  tags?: string[];\r\n-  status?: 'draft' | 'published';\r\n-  authorId?: string;\r\n-  duration?: number;\r\n-  transcript?: string;\r\n-}\r\n-\r\n-type ContentType = 'html' | 'markdown' | 'rich-text' | 'text' | 'json';\r\n-\r\n-interface LessonContent {\r\n-  id: string;\r\n-  lesson_id: string;\r\n-  content: any[];\r\n-  metadata: {\r\n-    lastEdited?: string;\r\n-    version?: number;\r\n-    status?: 'draft' | 'published';\r\n-    authorId?: string;\r\n-  };\r\n-  content_type: string;\r\n-  order_index: number;\r\n-  updated_at: string;\r\n-  user_id: string;\r\n-}\r\n-\r\n-interface InlineEditProps {\r\n-  value: string;\r\n-  onSave: (value: string) => void;\r\n-  isEditing: boolean;\r\n-  setIsEditing: (value: boolean) => void;\r\n-  placeholder?: string;\r\n-  className?: string;\r\n-}\r\n-\r\n-// Add validation interface\r\n-interface QuestionValidation {\r\n-  isValid: boolean;\r\n-  message: string;\r\n-}\r\n-\r\n-// Add this type validation helper\r\n-const getQuestionTypeFields = (type: string) => {\r\n-  switch (type) {\r\n-    case 'multipleChoice':\r\n-      return {\r\n-        required: ['prompt', 'options', 'correctAnswer'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          options: [],\r\n-          correctAnswer: '',\r\n-          teacherScript: '',\r\n-          explanation: ''\r\n-        }\r\n-      };\r\n-    case 'fillInBlank':\r\n-      return {\r\n-        required: ['prompt', 'blanks'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          blanks: [],\r\n-          teacherScript: '',\r\n-          explanation: ''\r\n-        }\r\n-      };\r\n-    case 'trueFalse':\r\n-      return {\r\n-        required: ['prompt', 'correctAnswer'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          correctAnswer: null,\r\n-          teacherScript: '',\r\n-          explanation: ''\r\n-        }\r\n-      };\r\n-    case 'matching':\r\n-      return {\r\n-        required: ['prompt', 'pairs'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          pairs: [],\r\n-          teacherScript: '',\r\n-          explanation: ''\r\n-        }\r\n-      };\r\n-    case 'ordering':\r\n-      return {\r\n-        required: ['prompt', 'items'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          items: [],\r\n-          correctOrder: [],\r\n-          teacherScript: '',\r\n-          explanation: ''\r\n-        }\r\n-      };\r\n-    case 'shortAnswer':\r\n-      return {\r\n-        required: ['prompt', 'sampleAnswer'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          sampleAnswer: '',\r\n-          teacherScript: '',\r\n-          explanation: '',\r\n-          keywords: []\r\n-        }\r\n-      };\r\n-    case 'speaking':\r\n-      return {\r\n-        required: ['prompt', 'sampleAnswer'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          sampleAnswer: '',\r\n-          teacherScript: '',\r\n-          audioPrompt: '',\r\n-          pronunciation: ''\r\n-        }\r\n-      };\r\n-    case 'listening':\r\n-      return {\r\n-        required: ['prompt', 'audioContent'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          audioContent: '',\r\n-          transcript: '',\r\n-          teacherScript: '',\r\n-          comprehensionQuestions: []\r\n-        }\r\n-      };\r\n-    case 'listenAndRepeat':\r\n-      return {\r\n-        required: ['prompt', 'audioContent'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          audioContent: '',\r\n-          targetPhrase: '',\r\n-          teacherScript: '',\r\n-          pronunciation: ''\r\n-        }\r\n-      };\r\n-    default:\r\n-      return {\r\n-        required: ['prompt'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          teacherScript: ''\r\n-        }\r\n-      };\r\n-  }\r\n-}\r\n-\r\n-interface SaveStatus {\r\n-  id: string;\r\n-  status: 'draft' | 'saved' | 'saving' | 'error';\r\n-  lastSaved?: string;\r\n-}\r\n-\r\n-interface Question {\r\n-  id: string;\r\n-  type: string;\r\n-  lesson_id: string;\r\n-  title: string;\r\n-  content: string;\r\n-  metadata: Record<string, any>;\r\n-  data: Record<string, any>; // This allows dynamic field access\r\n-  correct_answer: string;\r\n-  exercisePrompts: ExercisePrompt[];\r\n-  isDraft?: boolean;\r\n-}\r\n-\r\n-// Add at the top of the file with other type definitions\r\n-type QuestionType = keyof typeof QUESTION_TYPES;\r\n-\r\n-// Add this type guard function\r\n-const isValidQuestionType = (type: string): type is QuestionType => {\r\n-  return type in QUESTION_TYPES;\r\n-};\r\n-\r\n-// Update handleAddQuestion\r\n-\r\n-\r\n-// Update validateQuestion\r\n-const validateQuestion = (question: Question): QuestionValidation => {\r\n-  const { required } = getQuestionTypeFields(question.type);\r\n-  const missingFields = required.filter(field => {\r\n-    const value = question.data?.[field];\r\n-    return !value || \r\n-      (Array.isArray(value) && value.length === 0) || \r\n-      (typeof value === 'string' && !value.trim());\r\n-  });\r\n-\r\n-  if (missingFields.length > 0) {\r\n-    return {\r\n-      isValid: false,\r\n-      message: `Missing required fields: ${missingFields.join(', ')}`\r\n-    };\r\n-  }\r\n-\r\n-  return { isValid: true, message: '' };\r\n-};\r\n-\r\n-// Add proper type for question data\r\n-interface QuestionData {\r\n-  id?: string;\r\n-  content?: string;\r\n-  type?: string;\r\n-  data?: {\r\n-    prompt?: string;\r\n-    teacher_script?: string;\r\n-    followup_prompt?: string[];\r\n-    sample_answer?: string;\r\n-    answer?: string;\r\n-  } | null;\r\n-  prompt: string;\r\n-  teacherScript: string;\r\n-  followup_prompt: string[];\r\n-  answer?: string;\r\n-  correct_answer?: string;\r\n-}\r\n-\r\n-// In your component where you handle questions\r\n-const handleQuestionData = (question: QuestionData) => {\r\n-  return {\r\n-    ...question,\r\n-    data: {\r\n-      prompt: question?.data?.prompt || '',\r\n-      teacher_script: question?.data?.teacher_script || '',\r\n-      followup_prompt: question?.data?.followup_prompt || [],\r\n-      sample_answer: question?.data?.sample_answer || undefined,  // Convert null to undefined\r\n-      answer: question?.data?.answer || undefined  // Convert null to undefined\r\n-    } as const,\r\n-    sampleAnswer: question?.correct_answer || ''\r\n-  };\r\n-};\r\n-\r\n-export default function LessonManagementPage() {\r\n-  // State declarations\r\n-  \r\n-  const [selectedGradeId, setSelectedGradeId] = useState<string | null>(null);\r\n-  const [selectedTopicId, setSelectedTopicId] = useState<string | null>(null);\r\n-  const [selectedSubtopicId, setSelectedSubtopicId] = useState<string | null>(null);\r\n-  const [lessonTitle, setLessonTitle] = useState<string>('');\r\n-  const [currentLessonId, setCurrentLessonId] = useState<string | null>(null);\r\n-  const [questions, setQuestions] = useState<Question[]>([]);\r\n-  const [saveProgress, setSaveProgress] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');\r\n-  const [activities, setActivities] = useState<Activity[]>([]);\r\n-  const [localBuffer, setLocalBuffer] = useState<{ timestamp: number; data: any } | null>(null);\r\n-  const [lastSavedToServer, setLastSavedToServer] = useState<number>(Date.now());\r\n-  const [selectedQuestionType, setSelectedQuestionType] = useState<string>('');\r\n-  const [editingQuestionIndex, setEditingQuestionIndex] = useState<number | null>(null);\r\n-  const [showHelpTips, setShowHelpTips] = useState(true);\r\n-  const [isNavigating, setIsNavigating] = useState(false);\r\n-  const [lessons, setLessons] = useState<Lesson[]>([]);\r\n-  const [grades, setGrades] = useState<Grade[]>([]);\r\n-  const [topics, setTopics] = useState<Topic[]>([]);\r\n-  const [subtopics, setSubtopics] = useState<SubTopic[]>([]);\r\n-  const [contentHeading, setContentHeading] = useState<string>('');\r\n-    // Add with your other state declarations\r\n-  const [isContentExpanded, setIsContentExpanded] = useState<boolean>(false);\r\n-  const [modalState, setModalState] = useState({\r\n-    showAddGrade: false,\r\n-    showAddTopic: false,\r\n-    showAddSubtopic: false,\r\n-    showAddLesson: false\r\n-  });\r\n-  const [isViewMode, setIsViewMode] = useState<boolean>(true);\r\n-  const [expandedGrade, setExpandedGrade] = useState<string | null>(null);\r\n-  const [expandedTopic, setExpandedTopic] = useState<string | null>(null);\r\n-  const [expandedSubtopic, setExpandedSubtopic] = useState<string | null>(null);\r\n-  const [expandedQuestion, setExpandedQuestion] = useState<number | null>(null);\r\n-  const [expandedActivity, setExpandedActivity] = useState<number | null>(null);\r\n-  const [newItemData, setNewItemData] = useState({\r\n-    name: '',\r\n-    description: ''\r\n-  });\r\n-  const [lessonContent, setLessonContent] = useState<string>('');\r\n-  const [isContentEditorOpen, setIsContentEditorOpen] = useState(false);\r\n-  const [isEditingTitle, setIsEditingTitle] = useState<boolean>(false);\r\n-  const [isEditingHeading, setIsEditingHeading] = useState<boolean>(false);\r\n-  const [isEditingDescription, setIsEditingDescription] = useState<boolean>(false);\r\n-  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\r\n-  const [isSidebarLocked, setIsSidebarLocked] = useState(true);\r\n-  const [alertDialogState, setAlertDialogState] = useState<{\r\n-    isOpen: boolean;\r\n-    title: string;\r\n-    message: string;\r\n-    onConfirm: (value?: unknown) => void;\r\n-  }>({\r\n-    isOpen: false,\r\n-    title: '',\r\n-    message: '',\r\n-    onConfirm: () => {}\r\n-  });\r\n-\r\n-  const { \r\n-    selectedGrade,\r\n-    setSelectedGrade,\r\n-    selectedTopic,\r\n-    setSelectedTopic,\r\n-    selectedSubtopic,\r\n-    setSelectedSubtopic,\r\n-    selectedLesson,\r\n-    setSelectedLesson\r\n-  } = useContentStore();\r\n-\r\n-  // Add new state for tracking save status\r\n-  interface SaveStatus {\r\n-    id: string;\r\n-    status: 'draft' | 'saved' | 'saving' | 'error' | 'draft';\r\n-    lastSaved?: string;\r\n-  }\r\n-\r\n-  const [questionSaveStatuses, setQuestionSaveStatuses] = useState<Array<{\r\n-    id: string;\r\n-    status: 'idle' | 'saving' | 'saved' | 'error' | 'draft';\r\n-  }>>([]);\r\n-  const [promptSaveStatuses, setPromptSaveStatuses] = useState<SaveStatus[]>([]);\r\n-\r\n-  // Add this state to track dropdown state\r\n-  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n-\r\n-  // Add these states\r\n-  const [isLoadingSubtopics, setIsLoadingSubtopics] = useState(false);\r\n-  const [isLoadingLessons, setIsLoadingLessons] = useState(false);\r\n-\r\n-  // Event handlers\r\n-  const handleQuestionTypeChange = useCallback((type: string) => {\r\n-    if (isQuestionType(type)) {\r\n-      setSelectedQuestionType(type);\r\n-    }\r\n-  }, []);\r\n-\r\n-  const handleAddQuestion = useCallback(() => {\r\n-    if (!selectedQuestionType || !isQuestionType(selectedQuestionType)) return;\r\n-\r\n-    const defaultData = QUESTION_TYPES[selectedQuestionType].defaultData;\r\n-    const newQuestion: Question = {\r\n-      id: crypto.randomUUID(),\r\n-      type: selectedQuestionType,\r\n-      //data: {},\r\n-      title: 'New Question',\r\n-      content: '',\r\n-      lesson_id: currentLessonId || '',\r\n-      metadata: {},\r\n-      data: {\r\n-        ...defaultData,\r\n-        prompt: '',\r\n-        teacher_script: '',\r\n-        followup_prompt: [],\r\n-        sample_answer: ''\r\n-      },\r\n-      correct_answer: '',\r\n-      exercisePrompts: [],\r\n-      isDraft: true\r\n-    };\r\n-\r\n-    setQuestions(prev => [...prev, newQuestion]);\r\n-    setQuestionSaveStatuses(prev => [\r\n-      ...prev,\r\n-      { id: newQuestion.id, status: 'draft' }\r\n-    ]);\r\n-    setSelectedQuestionType('');\r\n-  }, [selectedQuestionType, currentLessonId]);\r\n-\r\n-  const handleRemoveQuestion = async (index: number) => {\r\n-    try {\r\n-      const questionToDelete = questions[index];\r\n-      \r\n-      // Delete related exercise prompts first\r\n-      const { error: promptError } = await supabase\r\n-        .from('exercise_prompts')\r\n-        .delete()\r\n-        .eq('question_id', questionToDelete.id);\r\n-\r\n-      if (promptError) throw promptError;\r\n-\r\n-      // Then delete the question\r\n-      const { error: questionError } = await supabase\r\n-        .from('questions')\r\n-        .delete()\r\n-        .eq('id', questionToDelete.id);\r\n-\r\n-      if (questionError) throw questionError;\r\n-\r\n-      // Update local state\r\n-      const newQuestions = questions.filter((_, i) => i !== index);\r\n-      setQuestions(newQuestions);\r\n-      \r\n-      toast.success('Question and related prompts deleted successfully');\r\n-    } catch (error) {\r\n-      console.error('Error deleting question:', error);\r\n-      toast.error('Failed to delete question and prompts');\r\n-    }\r\n-  };\r\n-\r\n-  const handleUpdateQuestion = useCallback(async (index: number, updatedQuestion: Question) => {\r\n-    const newQuestions = [...questions];\r\n-    newQuestions[index] = updatedQuestion;\r\n-    setQuestions(newQuestions);\r\n-    setQuestionSaveStatuses(prev => prev.map((status, i) => \r\n-      i === index ? { ...status, status: 'draft' } : status\r\n-    ));\r\n-  }, [questions]);\r\n-\r\n-  const handleAddExercisePrompt = useCallback((questionIndex: number) => {\r\n-    setQuestions(prev => prev.map((question, i) => {\r\n-      if (i === questionIndex) {\r\n-        return {\r\n-          ...question,\r\n-          exercisePrompts: [\r\n-            ...question.exercisePrompts,\r\n-            {\r\n-              id: crypto.randomUUID(),\r\n-              text: '',\r\n-              media: '',\r\n-              type: 'image',\r\n-              narration: 'Your turn',\r\n-              saytext: 'Say: ',\r\n-              metadata: {\r\n-                estimatedTime: 0\r\n-              },\r\n-              created_at: new Date().toISOString(),\r\n-              updated_at: new Date().toISOString()\r\n-            }\r\n-          ]\r\n-        };\r\n-      }\r\n-      return question;\r\n-    }));\r\n-  }, []);\r\n-\r\n-  const handleRemoveExercisePrompt = useCallback((questionIndex: number, promptIndex: number) => {\r\n-    setQuestions(prev => prev.map((question, i) => {\r\n-      if (i === questionIndex) {\r\n-        return {\r\n-          ...question,\r\n-          exercisePrompts: question.exercisePrompts.filter((_, j) => j !== promptIndex)\r\n-        };\r\n-      }\r\n-      return question;\r\n-    }));\r\n-  }, []);\r\n-\r\n-  const handleExercisePromptChange = useCallback(async (\r\n-    questionIndex: number,\r\n-    promptIndex: number,\r\n-    updatedPrompt: ExercisePrompt\r\n-  ) => {\r\n-    try {\r\n-      const promptUpdate = {\r\n-        id: updatedPrompt.id,\r\n-        question_id: updatedPrompt.question_id,\r\n-        text: updatedPrompt.text,\r\n-        type: updatedPrompt.type,\r\n-        narration: updatedPrompt.narration,\r\n-        saytext: updatedPrompt.saytext,\r\n-        media: updatedPrompt.media,\r\n-        // Remove order_index as it's not in schema\r\n-        created_at: new Date().toISOString()\r\n-      };\r\n-\r\n-      const { error: promptError } = await supabase\r\n-        .from('exercise_prompts')\r\n-        .upsert(promptUpdate)\r\n-        .select();\r\n-\r\n-      if (promptError) throw promptError;\r\n-\r\n-      // Update local state\r\n-      setQuestions(prev => prev.map((question, i) => {\r\n-        if (i === questionIndex) {\r\n-          const newPrompts = [...question.exercisePrompts];\r\n-          newPrompts[promptIndex] = updatedPrompt;\r\n-          return { ...question, exercisePrompts: newPrompts };\r\n-        }\r\n-        return question;\r\n-      }));\r\n-\r\n-    } catch (error) {\r\n-      console.error('Error saving prompt:', error);\r\n-      toast.error('Failed to save prompt');\r\n-    }\r\n-  }, []);\r\n-\r\n-  const handleAddActivity = useCallback(() => {\r\n-    const newActivity: Activity = {\r\n-      id: crypto.randomUUID(),\r\n-      lesson_id: currentLessonId || '',\r\n-      created_at: new Date().toISOString(),\r\n-      type: 'practice',\r\n-      title: '',\r\n-      name: '',\r\n-      instructions: '',\r\n-      media: [],\r\n-      data: {\r\n-        prompt: '',\r\n-        teacherScript: '',\r\n-        media: []\r\n-      }\r\n-    };\r\n-    setActivities(prev => [...prev, newActivity]);\r\n-  }, [currentLessonId]);\r\n-\r\n-  const handleUpdateActivity = useCallback((index: number, updatedActivity: Activity) => {\r\n-    setActivities(prev => prev.map((activity, i) => i === index ? updatedActivity : activity));\r\n-  }, []);\r\n-\r\n-  const handleRemoveActivity = useCallback((index: number) => {\r\n-    setActivities(prev => prev.filter((_, i) => i !== index));\r\n-  }, []);\r\n-\r\n-  const handleExercisePromptUpdate = useCallback((questionIndex: number, promptIndex: number, updatedPrompt: ExercisePrompt) => {\r\n-    const updatedQuestions = [...questions];\r\n-    updatedQuestions[questionIndex].exercisePrompts[promptIndex] = updatedPrompt;\r\n-    handleUpdateQuestion(questionIndex, updatedQuestions[questionIndex]);\r\n-  }, [questions, handleUpdateQuestion]);\r\n-\r\n-  const handleQuestionDataChange = useCallback((questionIndex: number, field: string, value: string) => {\r\n-    setQuestions(prev => prev.map((q, i) => \r\n-      i === questionIndex \r\n-        ? { \r\n-            ...q, \r\n-            data: { \r\n-              prompt: q.data?.prompt || '',\r\n-              teacherScript: q.data?.teacherScript || '',\r\n-              ...q.data,\r\n-              [field]: value \r\n-            } \r\n-          }\r\n-        : q\r\n-    ));\r\n-  }, []);\r\n-\r\n-  const [isSaving, setIsSaving] = useState(false);\r\n-\r\n-  const handleSaveLesson = async () => {\r\n-    try {\r\n-      if (!currentLessonId || !selectedSubtopicId) {\r\n-        toast.error('Please select a subtopic and lesson first');\r\n-        return;\r\n-      }\r\n-\r\n-      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\r\n-      if (sessionError) throw sessionError;\r\n-      \r\n-      if (!session?.user) {\r\n-        toast.error('Please sign in to save lessons');\r\n-        return;\r\n-      }\r\n-\r\n-      // Get user's role from session\r\n-      const userRole = session.user.user_metadata?.role;\r\n-      console.log('Current user role:', userRole);\r\n-      console.log('📝 Saving content heading:', {\r\n-        contentHeading,\r\n-        currentLessonId,\r\n-        selectedSubtopicId,\r\n-        timestamp: new Date().toISOString()\r\n-      });\r\n-\r\n-      // Create metadata object\r\n-      const lessonMetadata = {\r\n-        lastEdited: new Date().toISOString(),\r\n-        version: 1,\r\n-        status: 'draft' \r\n-      };\r\n-\r\n-      // Complete lesson data with all fields\r\n-      const lessonData = {\r\n-        id: currentLessonId,\r\n-        title: lessonTitle,\r\n-        content: lessonContent,\r\n-        metadata: lessonMetadata, // Supabase will automatically handle JSON conversion\r\n-        content_type: 'html',\r\n-        lesson_type: 'lesson',\r\n-        grade_id: selectedGradeId,\r\n-        topic_id: selectedTopicId,\r\n-        subtopic_id: selectedSubtopicId,\r\n-        user_id: session.user.id,\r\n-        updated_at: new Date().toISOString(),\r\n-        role: userRole, // Include role in the payload\r\n-        description: '',\r\n-        prerequisites: [],\r\n-        media_type: 'image',\r\n-        media_url: '',\r\n-        contentheading: contentHeading || ''\r\n-      };\r\n-\r\n-      console.log('📦 Data being sent to Supabase:', lessonData);\r\n-\r\n-      // Save lesson with all fields\r\n-      const { data, error: lessonError } = await supabase\r\n-        .from('lessons')\r\n-        .upsert(lessonData, { \r\n-          onConflict: 'id'\r\n-        })\r\n-        .select();\r\n-\r\n-      if (lessonError) throw lessonError;\r\n-\r\n-      // 2. Save lesson content\r\n-      const { data: existingContent } = await supabase\r\n-        .from('lesson_content')\r\n-        .select('id')\r\n-        .eq('lesson_id', currentLessonId)\r\n-        .single();\r\n-\r\n-      const contentMetadata = {\r\n-        lastEdited: new Date().toISOString(),\r\n-        version: 1,\r\n-        status: 'draft'\r\n-      };\r\n-\r\n-      const contentUpdate = {\r\n-        id: existingContent?.id || crypto.randomUUID(),\r\n-        lesson_id: currentLessonId,\r\n-        content: [lessonContent],\r\n-        metadata: contentMetadata, // Supabase will automatically handle JSON conversion\r\n-        content_type: 'html',\r\n-        user_id: session.user.id,\r\n-        updated_at: new Date().toISOString(),\r\n-        created_at: new Date().toISOString()\r\n-      };\r\n-\r\n-      const { error: contentError } = await supabase\r\n-        .from('lesson_content')\r\n-        .upsert(contentUpdate, { onConflict: 'id' });\r\n-\r\n-      if (contentError) throw contentError;\r\n-\r\n-      // 3. Save questions\r\n-      for (const question of questions) {\r\n-        const questionData = {\r\n-          id: question.id,\r\n-          lesson_id: currentLessonId,\r\n-          type: question.type,\r\n-          title: question.title,\r\n-          metadata: question.metadata,\r\n-          data: question.data,\r\n-          updated_at: new Date().toISOString(),\r\n-          user_id: session.user.id\r\n-        };\r\n-\r\n-        const { error: questionError } = await supabase\r\n-          .from('questions')\r\n-          .upsert(questionData, { onConflict: 'id' });\r\n-\r\n-        if (questionError) throw questionError;\r\n-\r\n-        //4. Save exercise prompts for this question\r\n-        if (question.exercisePrompts) {\r\n-          for (const prompt of question.exercisePrompts) {\r\n-            const promptData = {\r\n-              id: prompt.id,\r\n-              question_id: question.id,\r\n-              text: prompt.text,\r\n-              media: prompt.media,\r\n-              type: prompt.type,\r\n-              narration: prompt.narration,\r\n-              saytext: prompt.saytext,\r\n-              user_id: session.user.id,\r\n-              updated_at: new Date().toISOString()\r\n-            };\r\n-\r\n-            const { error: promptError } = await supabase\r\n-              .from('exercise_prompts')\r\n-              .upsert(promptData, { onConflict: 'id' });\r\n-\r\n-            if (promptError) throw promptError;\r\n-          }\r\n-        }\r\n-      }\r\n-\r\n-      // 5. Save activities\r\n-      if (activities.length > 0) {\r\n-        const activitiesData = activities.map(activity => ({\r\n-          id: activity.id,\r\n-          lesson_id: currentLessonId,\r\n-          type: activity.type,\r\n-          title: activity.title,\r\n-          name: activity.name,\r\n-          instructions: activity.instructions,\r\n-          media: activity.media,\r\n-          data: activity.data,\r\n-          created_at: new Date().toISOString()\r\n-        }));\r\n-\r\n-        const { error: activitiesError } = await supabase\r\n-          .from('activities')\r\n-          .upsert(activitiesData, { onConflict: 'id' });\r\n-\r\n-        if (activitiesError) throw activitiesError;\r\n-      }\r\n-\r\n-      // After successful save\r\n-      console.log('✅ Content heading saved successfully:', {\r\n-        contentHeading,\r\n-        lessonId: currentLessonId,\r\n-        timestamp: new Date().toISOString()\r\n-      });\r\n-\r\n-      toast.success('Lesson saved successfully');\r\n-    } catch (err) {\r\n-      const error = err as PostgrestError;\r\n-      console.error('❌ Error saving content heading:', {\r\n-        error: error.message,\r\n-        contentHeading,\r\n-        lessonContent,\r\n-        lessonId: currentLessonId,\r\n-        timestamp: new Date().toISOString()\r\n-      });\r\n-      toast.error(`Failed to save lesson: ${error.message}`);\r\n-\r\n-\r\n-    }\r\n-  };\r\n-\r\n-  const handleSaveQuestion = async (question: Question, index: number) => {\r\n-    const loadingToast = toast.loading(`Saving question ${index + 1}...`);\r\n-    \r\n-    try {\r\n-      const { data: { session } } = await supabase.auth.getSession();\r\n-      if (!session?.user) {\r\n-        toast.error('Please sign in to save question', { id: loadingToast });\r\n-        return;\r\n-      }\r\n-\r\n-      // Save question\r\n-      const questionData = {\r\n-        id: question.id,\r\n-        lesson_id: currentLessonId,\r\n-        type: question.type,\r\n-        title: question.title,\r\n-        metadata: question.metadata,\r\n-        data: {\r\n-          prompt: question.data?.prompt ?? '',\r\n-          teacherScript: question.data?.teacherScript ?? '',\r\n-          followup_prompt: question.data?.followup_prompt ?? [],\r\n-          sampleAnswer: question.data?.sampleAnswer || undefined,  // Convert null to undefined\r\n-          answer: question.data?.answer || undefined  // Convert null to undefined\r\n-        } as const,\r\n-        user_id: session.user.id,\r\n-        updated_at: new Date().toISOString()\r\n-      };\r\n-\r\n-      const { error: questionError } = await supabase\r\n-        .from('questions')\r\n-        .upsert(questionData, { onConflict: 'id' });\r\n-\r\n-      if (questionError) throw questionError;\r\n-\r\n-      // Save exercise prompts if they exist\r\n-      if (question.exercisePrompts?.length) {\r\n-        for (const prompt of question.exercisePrompts) {\r\n-          const promptData = {\r\n-            id: prompt.id,\r\n-            question_id: question.id,\r\n-            text: prompt.text,\r\n-            type: prompt.type,\r\n-            narration: prompt.narration,\r\n-            saytext: prompt.saytext,\r\n-            media: prompt.media,\r\n-            user_id: session.user.id,\r\n-            updated_at: new Date().toISOString()\r\n-          };\r\n-\r\n-          const { error: promptError } = await supabase\r\n-            .from('exercise_prompts')\r\n-            .upsert(promptData, { onConflict: 'id' });\r\n-\r\n-          if (promptError) throw promptError;\r\n-        }\r\n-      }\r\n-\r\n-      toast.success(`Question ${index + 1} saved successfully`, { id: loadingToast });\r\n-    } catch (error) {\r\n-      console.error('Error saving question:', error);\r\n-      toast.error(`Failed to save question ${index + 1}`, { id: loadingToast });\r\n-    }\r\n-  };\r\n-\r\n-  const handleSaveActivity = async (activity: Activity) => {\r\n-    try {\r\n-      await contentService.saveActivity(activity);\r\n-      toast.success('Activity saved');\r\n-    } catch (error) {\r\n-      console.error('Failed to save activity:', error);\r\n-      toast.error('Failed to save activity');\r\n-    }\r\n-  };\r\n-\r\n-  // Effects\r\n-  useEffect(() => {\r\n-    const fetchGrades = async () => {\r\n-      try {\r\n-        const { data, error } = await supabase\r\n-          .from('grades')\r\n-          .select('*')\r\n-          .order('name');\r\n-\r\n-        if (error) {\r\n-          console.error('Supabase error:', error);\r\n-          throw error;\r\n-        }\r\n-\r\n-        if (!data) {\r\n-          throw new Error('No data returned from Supabase');\r\n-        }\r\n-\r\n-        // Map the grades to match your interface\r\n-        const validGrades = data.map((grade: any) => ({\r\n-          _id: grade.id,\r\n-          id: grade.id,\r\n-          name: grade.name,\r\n-          level: grade.level || 0,  // Add default value if not provided\r\n-          orderIndex: grade.order_index || 0,  // Add default value if not provided\r\n-          topics: []\r\n-        }));\r\n-        \r\n-        setGrades(validGrades);\r\n-      } catch (error) {\r\n-        console.error('Error fetching grades:', error);\r\n-        toast.error('Failed to fetch grades');\r\n-      }\r\n-    };\r\n-\r\n-    fetchGrades();\r\n-  }, []);\r\n-\r\n-  // Topic Selection\r\n-  useEffect(() => {\r\n-    const fetchTopics = async () => {\r\n-      if (!selectedGradeId) return;\r\n-      \r\n-      try {\r\n-        const { data, error } = await supabase\r\n-          .from('topics')\r\n-          .select('*')\r\n-          .eq('grade_id', selectedGradeId)\r\n-          .order('title');\r\n-\r\n-        if (error) {\r\n-          throw error;\r\n-        }\r\n-\r\n-        // Map the topics to match your interface\r\n-        const validTopics = (data || []).map((topic: any) => ({\r\n-          _id: topic.id,\r\n-          id: topic.id,\r\n-          name: topic.title,\r\n-          title: topic.title,\r\n-          grade_id: topic.grade_id,\r\n-          subtopics: []\r\n-        }));\r\n-        \r\n-        setTopics(validTopics);\r\n-      } catch (error) {\r\n-        console.error('Error fetching topics:', error);\r\n-        toast.error('Failed to fetch topics');\r\n-      }\r\n-    };\r\n-\r\n-    fetchTopics();\r\n-  }, [selectedGradeId]);\r\n-\r\n-  // Subtopic Selection\r\n-  useEffect(() => {\r\n-    const fetchSubtopics = async () => {\r\n-      if (!selectedTopicId) return;\r\n-      \r\n-      try {\r\n-        // Use content service to fetch subtopics\r\n-        const subtopicsData = await contentService.fetchSubtopics(selectedTopicId);\r\n-        console.log('Fetched subtopics:', subtopicsData);\r\n-\r\n-        const validSubtopics = subtopicsData.map((subtopic: any) => ({\r\n-          id: subtopic.id,\r\n-          title: subtopic.title,\r\n-          description: subtopic.description,\r\n-          topic_id: subtopic.topic_id,\r\n-          lessons: [],\r\n-          order_index: subtopicsData.length\r\n-        }));\r\n-        \r\n-        setSubtopics(validSubtopics);\r\n-        \r\n-        // Update global state\r\n-        if (selectedSubtopic) {\r\n-          setSelectedSubtopic(selectedSubtopic);\r\n-        }\r\n-      } catch (err) {\r\n-        const error = err as Error;\r\n-        console.error('Error fetching subtopics:', error);\r\n-        toast.error('Failed to fetch subtopics');\r\n-      }\r\n-    };\r\n-\r\n-    fetchSubtopics();\r\n-  }, [selectedTopicId, selectedSubtopic, setSelectedSubtopic]);\r\n-\r\n-  // Add effect to monitor subtopics state\r\n-  useEffect(() => {\r\n-    console.log('Current subtopics state:', subtopics);\r\n-  }, [subtopics]);\r\n-\r\n-  // Add fetchLessons function\r\n-  const fetchLessons = useCallback(async () => {\r\n-    if (!selectedSubtopicId) return;\r\n-    try {\r\n-      const { data, error } = await supabase\r\n-        .from('lessons')\r\n-        .select('*')\r\n-        .eq('subtopic_id', selectedSubtopicId)\r\n-        .order('title');\r\n-\r\n-      if (error) {\r\n-        throw error;\r\n-      }\r\n-      \r\n-      // Map the lessons to ensure they have _id\r\n-      const validLessons = (data || []).map((lesson: any) => ({\r\n-        ...lesson,\r\n-        _id: lesson._id || lesson.id, // Use _id if available, otherwise use id\r\n-        title: lesson.title || 'Untitled Lesson'\r\n-      })).filter((lesson: any) => lesson._id); // Only include lessons with valid IDs\r\n-      \r\n-      setLessons(validLessons);\r\n-    } catch (error) {\r\n-      console.error('Error fetching lessons:', error);\r\n-      toast.error('Failed to fetch lessons');\r\n-    }\r\n-  }, [selectedSubtopicId]);\r\n-  // Add loadLessonContent function\r\n-  const isLoading = useRef(false);\r\n-  const loadLessonContent = useCallback(async (lessonId: string) => {\r\n-    // Prevent multiple simultaneous loads\r\n-    if (isLoading.current) return;\r\n-    isLoading.current = true;\r\n-\r\n-    const controller = new AbortController();\r\n-\r\n-    try {\r\n-      // Clear existing content first\r\n-      setLessonTitle('');\r\n-      setContentHeading('');\r\n-      setLessonContent('');\r\n-      setQuestions([]);\r\n-      \r\n-      // First fetch lesson data\r\n-      const { data: lessonData, error: lessonError } = await supabase\r\n-        .from('lessons')\r\n-        .select('*')\r\n-        .eq('id', lessonId)\r\n-        .single()\r\n-        \r\n-\r\n-      if (lessonError) {\r\n-        console.error('Lesson fetch error:', lessonError);\r\n-        throw lessonError;\r\n-      }\r\n-\r\n-      // Set lesson data\r\n-      setLessonTitle(lessonData.title || '');\r\n-      setContentHeading(lessonData.content || '');\r\n-\r\n-      // Then fetch lesson content with explicit headers\r\n-      const { data: contentData, error: contentError } = await supabase\r\n-        .from('lesson_content')\r\n-        .select('*')\r\n-        .eq('lesson_id', lessonId)\r\n-        .order('updated_at', { ascending: false })\r\n-        .limit(1)\r\n-        .maybeSingle();\r\n-\r\n-      if (contentError) {\r\n-        console.error('Content fetch error:', contentError);\r\n-        throw contentError;\r\n-      }\r\n-\r\n-      // Set content if available\r\n-      if (contentData?.content) {\r\n-        setLessonContent(typeof contentData.content === 'string' \r\n-          ? contentData.content \r\n-          : JSON.stringify(contentData.content)\r\n-        );\r\n-      }\r\n-\r\n-    } catch (error: unknown) {\r\n-      if (error instanceof Error && error.name === 'AbortError') {\r\n-        console.log('Request aborted');\r\n-        return;\r\n-      }\r\n-      console.error('Error loading lesson:', error);\r\n-      toast.error('Failed to load lesson content');\r\n-      \r\n-      // Reset states on error\r\n-      setLessonTitle('');\r\n-      setContentHeading('');\r\n-      setLessonContent('');\r\n-      setQuestions([]);\r\n-    } finally {\r\n-      isLoading.current = false;\r\n-    }\r\n-\r\n-    return () => {\r\n-      controller.abort();\r\n-    };\r\n-  }, []); // Empty dependencies since we're using closure over state setters\r\n-\r\n-  // // Add effect for fetching lessons when subtopic changes\r\n-  useEffect(() => {\r\n-    if (selectedSubtopicId) {\r\n-      fetchLessons();\r\n-    }\r\n-  }, [selectedSubtopicId, fetchLessons]);\r\n-\r\n-  // Add effect for loading lesson content when currentLessonId changes\r\n-    useEffect(() => {\r\n-    let isMounted = true;\r\n-    let timeoutId: NodeJS.Timeout;\r\n-\r\n-    const loadContent = async () => {\r\n-      if (!currentLessonId || !isMounted) return;\r\n-\r\n-      // Clear previous timeout if exists\r\n-      if (timeoutId) clearTimeout(timeoutId);\r\n-\r\n-      // Set new timeout for debouncing\r\n-      timeoutId = setTimeout(() => {\r\n-        if (isMounted) {\r\n-          loadLessonContent(currentLessonId);\r\n-        }\r\n-      }, 300);\r\n-    };\r\n-\r\n-    loadContent();\r\n-\r\n-    // Cleanup function\r\n-    return () => {\r\n-      isMounted = false;\r\n-      if (timeoutId) clearTimeout(timeoutId);\r\n-      if (isLoading.current) isLoading.current = false;\r\n-    };\r\n-  }, [currentLessonId]); // Remove loadLessonContent from dependencies\r\n-\r\n-  useEffect(() => {\r\n-    console.log('Current lessons state:', lessons);\r\n-  }, [lessons]);\r\n-\r\n-    // Add keyboard shortcut for saving\r\n-  useEffect(() => {\r\n-    const handleKeyDown = (e: KeyboardEvent) => {\r\n-      if ((e.ctrlKey || e.metaKey) && e.key === 's') {\r\n-        e.preventDefault();\r\n-        handleSaveLesson();\r\n-      }\r\n-    };\r\n-\r\n-    window.addEventListener('keydown', handleKeyDown);\r\n-    return () => window.removeEventListener('keydown', handleKeyDown);\r\n-  }, [handleSaveLesson]);\r\n-\r\n-  // Add SaveFeedback component\r\n-  const SaveFeedback = useCallback(() => {\r\n-    if (saveProgress === 'idle') return null;\r\n-\r\n-    return (\r\n-    <div className=\"fixed bottom-4 right-4\">\r\n-      {saveProgress === 'saving' && (\r\n-        <div className=\"flex items-center gap-2 bg-background border rounded-lg px-4 py-2 shadow-lg\">\r\n-          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n-          <span className=\"text-sm\">Saving changes...</span>\r\n-        </div>\r\n-      )}\r\n-      {saveProgress === 'saved' && (\r\n-        <div className=\"flex items-center gap-2 bg-green-500 text-white rounded-lg px-4 py-2 shadow-lg\">\r\n-          <Check className=\"h-4 w-4\" />\r\n-          <span className=\"text-sm\">Changes saved</span>\r\n-        </div>\r\n-      )}\r\n-      {saveProgress === 'error' && (\r\n-        <div className=\"flex items-center gap-2 bg-destructive text-destructive-foreground rounded-lg px-4 py-2 shadow-lg\">\r\n-          <X className=\"h-4 w-4\" />\r\n-          <span className=\"text-sm\">Error saving changes</span>\r\n-        </div>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-  }, [saveProgress]);\r\n-\r\n-  // Update handlers\r\n-  const handleGradeSelect = (gradeId: string) => {\r\n-    // Always keep sidebar open during selection\r\n-    setIsSidebarCollapsed(false);\r\n-    setIsSidebarLocked(true);\r\n-    \r\n-    // Batch state updates\r\n-    requestAnimationFrame(() => {\r\n-      setSelectedGradeId(gradeId);\r\n-      setSelectedGrade(gradeId);\r\n-      setSelectedTopicId(null);\r\n-      setSelectedTopic('');\r\n-      setSelectedSubtopicId(null);\r\n-      setSelectedSubtopic('');\r\n-      setCurrentLessonId(null);\r\n-      \r\n-      if (isViewMode) {\r\n-        setExpandedGrade(gradeId);\r\n-      }\r\n-    });\r\n-  };\r\n-\r\n-  const handleTopicSelect = (value: string) => {\r\n-    setSelectedTopicId(value);\r\n-    setSelectedTopic(value);\r\n-    setSelectedSubtopicId(null);\r\n-    setSelectedSubtopic('');\r\n-    setCurrentLessonId(null);\r\n-  };\r\n-\r\n-  const handleSubtopicSelect = (value: string) => {\r\n-    setSelectedSubtopicId(value);\r\n-    setSelectedSubtopic(value);\r\n-    setCurrentLessonId(null);\r\n-  };\r\n-\r\n-  const handleLessonSelect = async (lessonId: string) => {\r\n-    try {\r\n-      // Lock sidebar during selection\r\n-      setIsSidebarLocked(true);\r\n-      setIsSidebarCollapsed(false);\r\n-      setCurrentLessonId(lessonId);\r\n-      \r\n-      // 1. Fetch lesson data\r\n-      const { data: lessonData, error: lessonError } = await supabase\r\n-        .from('lessons')\r\n-        .select('*')\r\n-        .eq('id', lessonId)\r\n-        .single();\r\n-\r\n-      if (lessonError) throw lessonError;\r\n-\r\n-      // 2. Fetch questions with exercise prompts\r\n-      const { data: questionsData, error: questionsError } = await supabase\r\n-        .from('questions')\r\n-        .select(`\r\n-          *,\r\n-          exercise_prompts (*)\r\n-        `)\r\n-        .eq('lesson_id', lessonId);\r\n-\r\n-      if (questionsError) throw questionsError;\r\n-\r\n-      // 3. Fetch activities - removed order_index\r\n-      const { data: activitiesData, error: activitiesError } = await supabase\r\n-        .from('activities')\r\n-        .select('*')\r\n-        .eq('lesson_id', lessonId);\r\n-\r\n-      if (activitiesError) throw activitiesError;\r\n-\r\n-      // Format questions with their exercise prompts\r\n-      const formattedQuestions = questionsData?.map(q => ({\r\n-        ...q,\r\n-        data: q.data || {},\r\n-        exercisePrompts: q.exercise_prompts || []\r\n-      })) || [];\r\n-\r\n-      // Set all states\r\n-      setLessonTitle(lessonData.title || '');\r\n-      setLessonContent(lessonData.content || '');\r\n-      setQuestions(formattedQuestions);\r\n-      setActivities(activitiesData || []);\r\n-\r\n-      // After successful load, unlock sidebar and allow collapse\r\n-      setTimeout(() => {\r\n-        setIsSidebarLocked(false);\r\n-        if (!isSidebarLocked) {\r\n-          setIsSidebarCollapsed(true);\r\n-        }\r\n-      }, 300);\r\n-\r\n-    } catch (error) {\r\n-      console.error('Error loading lesson:', error);\r\n-      toast.error('Failed to load lesson');\r\n-      // Reset states on error\r\n-      setLessonTitle('');\r\n-      setLessonContent('');\r\n-      setQuestions([]);\r\n-      setActivities([]);\r\n-    }\r\n-    if (!isSidebarLocked) {\r\n-      setIsSidebarCollapsed(true);\r\n-    }\r\n-  };\r\n-\r\n-  // Update the expansion handlers\r\n-  const handleTopicExpand = async (topicId: string) => {\r\n-    setExpandedTopic(expandedTopic === topicId ? null : topicId);\r\n-    setSelectedTopicId(topicId);\r\n-    \r\n-    // Load subtopics when topic is expanded\r\n-    if (topicId) {\r\n-      setIsLoadingSubtopics(true);\r\n-      try {\r\n-        const { data: subtopicsData, error } = await supabase\r\n-          .from('subtopics')\r\n-          .select('*')\r\n-          .eq('topic_id', topicId)\r\n-          .order('order_index');\r\n-\r\n-        if (error) throw error;\r\n-        setSubtopics(subtopicsData || []);\r\n-      } catch (error) {\r\n-        console.error('Error loading subtopics:', error);\r\n-        toast.error('Failed to load subtopics');\r\n-      } finally {\r\n-        setIsLoadingSubtopics(false);\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const handleSubtopicExpand = async (subtopicId: string) => {\r\n-    setExpandedSubtopic(expandedSubtopic === subtopicId ? null : subtopicId);\r\n-    setSelectedSubtopicId(subtopicId);\r\n-    \r\n-    if (subtopicId) {\r\n-      setIsLoadingLessons(true);\r\n-      try {\r\n-        const { data: lessonsData, error } = await supabase\r\n-          .from('lessons')\r\n-          .select('*')\r\n-          .eq('subtopic_id', subtopicId)\r\n-          .order('order_index');\r\n-\r\n-        if (error) throw error;\r\n-        setLessons(lessonsData || []);\r\n-      } catch (error) {\r\n-        console.error('Error loading lessons:', error);\r\n-        toast.error('Failed to load lessons');\r\n-      } finally {\r\n-        setIsLoadingLessons(false);\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const handleQuestionExpand = (index: number) => {\r\n-    setExpandedQuestion(expandedQuestion === index ? null : index);\r\n-  };\r\n-\r\n-  const handleActivityExpand = (index: number) => {\r\n-    setExpandedActivity(expandedActivity === index ? null : index);\r\n-  };\r\n-\r\n-  // Add effect to save mode changes to localStorage\r\n-  useEffect(() => {\r\n-    localStorage.setItem('lessonManagementViewMode', isViewMode.toString());\r\n-  }, [isViewMode]);\r\n-\r\n-  // Add handlers for creating new items\r\n-  const handleCreateGrade = async () => {\r\n-    try {\r\n-      const response = await fetch(`${API_ENDPOINT}/grades`, {\r\n-        method: 'POST',\r\n-        headers: { 'Content-Type': 'application/json' },\r\n-        body: JSON.stringify({ name: newItemData.name })\r\n-      });\r\n-\r\n-      if (!response.ok) throw new Error('Failed to create grade');\r\n-      const data = await response.json();\r\n-      \r\n-      if (!data.success) throw new Error(data.message || 'Failed to create grade');\r\n-      \r\n-      // Update grades list\r\n-      setGrades([...grades, data.data.grade]);\r\n-      setModalState({ ...modalState, showAddGrade: false });\r\n-      setNewItemData({ name: '', description: '' });\r\n-      toast.success('Grade created successfully');\r\n-    } catch (error) {\r\n-      console.error('Error creating grade:', error);\r\n-      toast.error('Failed to create grade');\r\n-    }\r\n-  };\r\n-\r\n-  const handleCreateTopic = async () => {\r\n-    if (!selectedGradeId) {\r\n-      toast.error('Please select a grade first');\r\n-      return;\r\n-    }\r\n-\r\n-    try {\r\n-      const newTopic = await contentService.createTopic({\r\n-        title: newItemData.name, // Map from newItemData.name to title\r\n-        description: newItemData.description,\r\n-        gradeId: selectedGradeId\r\n-      });\r\n-\r\n-      setTopics(prev => [...prev, newTopic]);\r\n-      toast.success('Topic created successfully');\r\n-      setModalState({ ...modalState, showAddTopic: false });\r\n-      setNewItemData({ name: '', description: '' });\r\n-    } catch (err) {\r\n-      const error = err instanceof Error ? err.message : String(err);\r\n-      console.error('Error creating topic:', error);\r\n-      toast.error('Failed to create topic');\r\n-    }\r\n-  };\r\n-    \r\n-  \r\n-\r\n-\r\n-  const handleCreateSubtopic = async (data: { title: string; description?: string }) => {\r\n-    try {\r\n-      if (!selectedTopicId) {\r\n-        toast.error('Please select a topic first');\r\n-        return;\r\n-      }\r\n-\r\n-      const newSubtopic = await contentService.createSubtopic({\r\n-        ...data,\r\n-        topicId: selectedTopicId\r\n-      });\r\n-\r\n-      setSubtopics(prev => [...prev, {\r\n-        _id: newSubtopic.id,\r\n-        id: newSubtopic.id,\r\n-        name: newSubtopic.title,\r\n-        title: newSubtopic.title,\r\n-        description: newSubtopic.description,\r\n-        topic_id: newSubtopic.topic_id,\r\n-        orderIndex: prev.length,\r\n-        lessons: []\r\n-      }]);\r\n-\r\n-      toast.success('Subtopic created successfully');\r\n-      setModalState(prev => ({ ...prev, showAddSubtopic: false }));\r\n-    } catch (err) {\r\n-      const error = err as Error;\r\n-      console.error('Error creating subtopic:', error);\r\n-      toast.error('Failed to create subtopic');\r\n-    }\r\n-  };\r\n-\r\n-  const handleUpdateSubtopic = async (subtopicId: string, data: { title: string; description?: string }) => {\r\n-    try {\r\n-      const { data: updatedSubtopic, error } = await supabase\r\n-        .from('sub_topics')\r\n-        .update(data)\r\n-        .eq('id', subtopicId)\r\n-        .select()\r\n-        .single();\r\n-\r\n-      if (error) throw error;\r\n-      \r\n-      setSubtopics(prev => prev.map(subtopic => \r\n-        subtopic.id === subtopicId \r\n-          ? {\r\n-              ...subtopic,\r\n-              name: updatedSubtopic.title\r\n-            }\r\n-          : subtopic\r\n-      ));\r\n-\r\n-      toast.success('Subtopic updated successfully');\r\n-    } catch (err) {\r\n-      const error = err as Error;\r\n-      console.error('Error updating subtopic:', error);\r\n-      toast.error('Failed to update subtopic');\r\n-    }\r\n-  };\r\n-\r\n-  const handleDeleteSubtopic = async (subtopicId: string) => {\r\n-    try {\r\n-      await contentService.deleteSubtopic(subtopicId);\r\n-      setSubtopics(prev => prev.filter(subtopic => subtopic.id !== subtopicId));\r\n-      setSelectedSubtopicId(null);\r\n-      toast.success('Subtopic deleted successfully');\r\n-    } catch (err) {\r\n-      const error = err as Error;\r\n-      console.error('Error deleting subtopic:', error);\r\n-      toast.error('Failed to delete subtopic');\r\n-    }\r\n-  };\r\n-\r\n-  const handleCreateLesson = async () => {\r\n-    if (!selectedSubtopicId) {\r\n-      toast.error('Please select a subtopic first');\r\n-      return;\r\n-    }\r\n-\r\n-    try {\r\n-      // First create the lesson\r\n-      const { data: newLesson, error: lessonError } = await supabase\r\n-        .from('lessons')\r\n-        .insert({\r\n-          title: newItemData.name,\r\n-          duration: 0,\r\n-          topic_id: selectedTopicId,\r\n-          subtopic_id: selectedSubtopicId,\r\n-          content: '', // Empty rich text content initially\r\n-          status: 'draft'\r\n-        })\r\n-        .select()\r\n-        .single();\r\n-\r\n-      if (lessonError) throw lessonError;\r\n-\r\n-      // Create initial question\r\n-      const { data: newQuestion, error: questionError } = await supabase\r\n-        .from('questions')\r\n-        .insert({\r\n-          lesson_id: newLesson.id,\r\n-          type: 'speaking', // default type\r\n-          title: 'Question 1',\r\n-          data: {\r\n-            prompt: '',\r\n-            teacherScript: '',\r\n-            options: []\r\n-          },\r\n-          order_index: 0\r\n-        })\r\n-        .select()\r\n-        .single();\r\n-\r\n-      if (questionError) throw questionError;\r\n-\r\n-      // Create initial exercise prompts for the question\r\n-      const { error: promptsError } = await supabase\r\n-        .from('exercise_prompts')\r\n-        .insert([\r\n-          {\r\n-            question_id: newQuestion.id,\r\n-            text: '',\r\n-            type: 'image',\r\n-            narration: '',\r\n-            saytext: '',\r\n-            media: [],\r\n-            order_index: 0\r\n-          },\r\n-          {\r\n-            question_id: newQuestion.id,\r\n-            text: '',\r\n-            type: 'gif',\r\n-            narration: '',\r\n-            saytext: '',\r\n-            media: [],\r\n-            order_index: 1\r\n-          }\r\n-        ]);\r\n-\r\n-      if (promptsError) throw promptsError;\r\n-\r\n-      // Create initial activity\r\n-      // const { error: activityError } = await supabase\r\n-      //   .from('activities')\r\n-      //   .insert({\r\n-      //     lesson_id: newLesson.id,\r\n-      //     type: 'practice',\r\n-      //     title: '',\r\n-      //     instructions: '',\r\n-      //     media: [],\r\n-      //     data: {\r\n-      //       prompt: '',\r\n-      //       teacherScript: '',\r\n-      //       media: []\r\n-      //     },\r\n-      //     order_index: 0\r\n-      //   });\r\n-\r\n-      // if (activityError) throw activityError;\r\n-\r\n-      // Update UI state\r\n-      setLessons(prev => [...prev, newLesson]);\r\n-      setCurrentLessonId(newLesson.id);\r\n-      setLessonTitle(newLesson.title);\r\n-      setModalState({ ...modalState, showAddLesson: false });\r\n-      setNewItemData({ name: '', description: '' });\r\n-      toast.success('Lesson created successfully');\r\n-\r\n-    } catch (error) {\r\n-      console.error('Error creating lesson:', error);\r\n-      toast.error('Failed to create lesson');\r\n-    }\r\n-  };\r\n-\r\n-  // Effect to handle localStorage after mount\r\n-  useEffect(() => {\r\n-    const storedMode = localStorage.getItem('lessonManagementViewMode');\r\n-    if (storedMode !== null) {\r\n-      setIsViewMode(storedMode === 'true');\r\n-    }\r\n-  }, []);\r\n-\r\n-  // Update the cleanupModalState function\r\n-  const cleanupModalState = useCallback(() => {\r\n-    document.body.style.pointerEvents = '';\r\n-    document.body.style.overflow = '';\r\n-    setModalState({\r\n-      showAddGrade: false,\r\n-      showAddTopic: false,\r\n-      showAddSubtopic: false,\r\n-      showAddLesson: false\r\n-    });\r\n-    setNewItemData({ name: '', description: '' });\r\n-  }, []);\r\n-\r\n-  // Add a function to handle modal state changes\r\n-  const handleModalStateChange = useCallback((modalType: keyof typeof modalState, open: boolean) => {\r\n-    if (!open) {\r\n-      cleanupModalState();\r\n-    } else {\r\n-      setModalState(prev => ({ ...prev, [modalType]: open }));\r\n-    }\r\n-  }, [cleanupModalState]);\r\n-\r\n-  const handleContentSave = async (content: string) => {\r\n-    const loadingToast = toast.loading(\"Saving content...\", {\r\n-      action: {\r\n-        label: \"Close\",\r\n-        onClick: () => toast.dismiss()\r\n-      }\r\n-    });\r\n-    \r\n-    try {\r\n-      const { data: { session } } = await supabase.auth.getSession();\r\n-      if (!session?.user) {\r\n-        toast.error('Please sign in to save content', { id: loadingToast });\r\n-        return;\r\n-      }\r\n-\r\n-      // Get the most recent content entry\r\n-      const { data: existingContent, error: checkError } = await supabase\r\n-        .from('lesson_content')\r\n-        .select('id')\r\n-        .eq('lesson_id', currentLessonId)\r\n-        .order('updated_at', { ascending: false })\r\n-        .limit(1)\r\n-        .maybeSingle();\r\n-\r\n-      // If content exists, update it; if not, insert new\r\n-      const { error } = await supabase\r\n-        .from('lesson_content')\r\n-        .upsert({\r\n-          id: existingContent?.id, // This ensures we update if id exists\r\n-          lesson_id: currentLessonId,\r\n-          content: [content],\r\n-          content_type: 'text',\r\n-          metadata: {\r\n-            heading: contentHeading\r\n-          },\r\n-          user_id: session.user.id,\r\n-          updated_at: new Date().toISOString()\r\n-        }, {\r\n-          onConflict: 'id'  // This ensures we update based on lesson_id\r\n-        });\r\n-\r\n-      if (error) throw error;\r\n-\r\n-      // Save questions separately\r\n-      for (const question of questions) {\r\n-        const { exercisePrompts, ...questionData } = question; // Remove exercisePrompts from question data\r\n-        \r\n-        // Save question\r\n-        const { error: questionError } = await supabase\r\n-          .from('questions')\r\n-          .upsert(questionData, {\r\n-            onConflict: 'id'\r\n-          })\r\n-          .select();\r\n-\r\n-        if (questionError) throw questionError;\r\n-\r\n-        // Save exercise prompts\r\n-        if (exercisePrompts?.length > 0) {\r\n-          for (const prompt of exercisePrompts) {\r\n-            const { error: promptError } = await supabase\r\n-              .from('exercise_prompts')\r\n-              .upsert(prompt, {\r\n-                onConflict: 'id'\r\n-              })\r\n-              .select();\r\n-\r\n-            if (promptError) throw promptError;\r\n-          }\r\n-        }\r\n-      }\r\n-      \r\n-      toast.success(\"Content saved successfully\", {\r\n-        action: {\r\n-          label: \"Close\",\r\n-          onClick: () => toast.dismiss()\r\n-        },\r\n-        id: loadingToast,\r\n-      });\r\n-      setIsContentEditorOpen(false);\r\n-    } catch (error) {\r\n-      console.error('Error saving content:', error);\r\n-      toast.error(\"Failed to save content\", {\r\n-        action: {\r\n-          label: \"Close\",\r\n-          onClick: () => toast.dismiss()\r\n-        },\r\n-        id: loadingToast,\r\n-      });\r\n-    }\r\n-  };\r\n-\r\n-  // Add this component for inline editing\r\n-  const InlineEdit = ({ \r\n-    value, \r\n-    onSave, \r\n-    isEditing, \r\n-    setIsEditing, \r\n-    placeholder,\r\n-    className = \"\"\r\n-  }: InlineEditProps) => {\r\n-    const [tempValue, setTempValue] = useState(value);\r\n-    \r\n-    return isEditing ? (\r\n-      <div className=\"flex items-center gap-2\">\r\n-        <Input\r\n-          value={tempValue}\r\n-          onChange={(e) => setTempValue(e.target.value)}\r\n-          placeholder={placeholder}\r\n-          className={className}\r\n-          autoFocus\r\n-        />\r\n-        <Button\r\n-          size=\"sm\"\r\n-          variant=\"ghost\"\r\n-          onClick={() => {\r\n-            onSave(tempValue);\r\n-            setIsEditing(false);\r\n-          }}\r\n-        >\r\n-          <Check className=\"h-4 w-4 text-green-500\" />\r\n-        </Button>\r\n-        <Button\r\n-          size=\"sm\"\r\n-          variant=\"ghost\"\r\n-          onClick={() => setIsEditing(false)}\r\n-        >\r\n-          <X className=\"h-4 w-4 text-red-500\" />\r\n-        </Button>\r\n-      </div>\r\n-    ) : (\r\n-      <div \r\n-        className=\"group flex items-center gap-2 cursor-pointer\"\r\n-        onClick={() => setIsEditing(true)}\r\n-      >\r\n-        <span className={className}>{value || placeholder}</span>\r\n-        <Pencil className=\"h-4 w-4 opacity-0 group-hover:opacity-100 transition-opacity\" />\r\n-      </div>\r\n-    );\r\n-  };\r\n-\r\n-  // Add this effect to handle auto-collapse after lesson selection\r\n-  useEffect(() => {\r\n-    if (currentLessonId && selectedGradeId && selectedTopicId && selectedSubtopicId) {\r\n-      setIsSidebarLocked(false);\r\n-      // Optional: add a slight delay before collapsing\r\n-      setTimeout(() => setIsSidebarCollapsed(true), 300);\r\n-    }\r\n-  }, [currentLessonId, selectedGradeId, selectedTopicId, selectedSubtopicId]);\r\n-\r\n-  // Add individual save handlers\r\n-  // const handleSaveQuestion = async (question: Question, index: number) => {\r\n-  //   try {\r\n-  //     // Update status to saving\r\n-  //     setQuestionSaveStatuses(prev => [\r\n-  //       ...prev.filter(s => s.id !== question.id),\r\n-  //       { id: question.id, status: 'saving' }\r\n-  //     ]);\r\n-\r\n-  //     const questionUpsert = {\r\n-  //       id: question.id,\r\n-  //       lesson_id: currentLessonId,\r\n-  //       type: question.type,\r\n-  //       title: question.data?.prompt || 'Untitled Question',\r\n-  //       metadata: question.metadata || {},\r\n-  //       data: {\r\n-  //         prompt: question.data?.prompt || '',\r\n-  //         teacherScript: question.data?.teacherScript || '',\r\n-  //         ...question.data\r\n-  //       },\r\n-  //       order_index: index,\r\n-  //       created_at: new Date().toISOString(),\r\n-  //       updated_at: new Date().toISOString()\r\n-  //     };\r\n-\r\n-  //     const { error: questionError } = await supabase\r\n-  //       .from('questions')\r\n-  //       .upsert(questionUpsert);\r\n-\r\n-  //     if (questionError) throw questionError;\r\n-\r\n-  //     // Update status to saved\r\n-  //     setQuestionSaveStatuses(prev => [\r\n-  //       ...prev.filter(s => s.id !== question.id),\r\n-  //       { id: question.id, status: 'saved', lastSaved: new Date().toISOString() }\r\n-  //     ]);\r\n-\r\n-  //     toast.success(`Question ${index + 1} saved successfully`);\r\n-  //   } catch (error) {\r\n-  //     console.error('Error saving question:', error);\r\n-  //     setQuestionSaveStatuses(prev => [\r\n-  //       ...prev.filter(s => s.id !== question.id),\r\n-  //       { id: question.id, status: 'error' }\r\n-  //     ]);\r\n-  //     toast.error(`Failed to save question ${index + 1}`);\r\n-  //   }\r\n-  // };\r\n-\r\n-  const handleSavePrompt = async (questionId: string, prompt: ExercisePrompt, promptIndex: number) => {\r\n-    try {\r\n-      setPromptSaveStatuses(prev => [\r\n-        ...prev.filter(s => s.id !== prompt.id),\r\n-        { id: prompt.id || '', status: 'saving' } as SaveStatus\r\n-      ]);\r\n-\r\n-      const promptUpsert = {\r\n-        id: prompt.id,\r\n-        question_id: questionId,\r\n-        text: prompt.text || '',\r\n-        type: prompt.type || 'text',\r\n-        narration: prompt.narration || '',\r\n-        saytext: prompt.saytext || '',\r\n-        media: prompt.media || [],\r\n-        order_index: promptIndex,\r\n-        created_at: prompt.created_at || new Date().toISOString(),\r\n-        updated_at: new Date().toISOString()\r\n-      };\r\n-\r\n-      const { error: promptError } = await supabase\r\n-        .from('exercise_prompts')\r\n-        .upsert(promptUpsert);\r\n-\r\n-      if (promptError) throw promptError;\r\n-\r\n-      setPromptSaveStatuses(prev => [\r\n-        ...prev.filter(s => s.id !== prompt.id),\r\n-        { id: prompt.id || '', status: 'saved', lastSaved: new Date().toISOString() } as SaveStatus\r\n-      ]);\r\n-\r\n-      toast.success(`Prompt ${promptIndex + 1} saved successfully`);\r\n-    } catch (error) {\r\n-      console.error('Error saving prompt:', error);\r\n-      setPromptSaveStatuses(prev => [\r\n-        ...prev.filter(s => s.id !== prompt.id),\r\n-        { id: prompt.id || '', status: 'error' } as SaveStatus\r\n-      ]);\r\n-      toast.error(`Failed to save prompt ${promptIndex + 1}`);\r\n-    }\r\n-  };\r\n-\r\n-  // Add effect to mark items as draft when edited\r\n-  useEffect(() => {\r\n-    questions.forEach(question => {\r\n-      if (!questionSaveStatuses.find(s => s.id === question.id)) {\r\n-        setQuestionSaveStatuses(prev => [\r\n-          ...prev,\r\n-          { id: question.id, status: 'draft' }\r\n-        ]);\r\n-      }\r\n-    });\r\n-  }, [questions]);\r\n-\r\n-  // Add this function with your other handlers\r\n-  const handleRefreshLesson = async () => {\r\n-    if (!currentLessonId) {\r\n-      toast.error('No lesson selected');\r\n-      return;\r\n-    }\r\n-    \r\n-    try {\r\n-      toast.loading('Refreshing lesson content...', {\r\n-        action: {\r\n-          label: \"Close\",\r\n-          onClick: () => toast.dismiss()\r\n-        },\r\n-      });\r\n-      await handleLessonSelect(currentLessonId);\r\n-      toast.success('Content refreshed', {\r\n-        action: {\r\n-          label: \"Close\",\r\n-          onClick: () => toast.dismiss()\r\n-        },\r\n-      });\r\n-    } catch (error) {\r\n-      console.error('Error refreshing lesson:', error);\r\n-      toast.error('Failed to refresh content', {\r\n-        action: {\r\n-          label: \"Close\",\r\n-          onClick: () => toast.dismiss()\r\n-        },\r\n-      });\r\n-    }\r\n-  };\r\n-\r\n-  // Add this function to handle refresh\r\n-  const handleRefreshContent = async () => {\r\n-    if (!currentLessonId) {\r\n-      toast.error('No lesson selected');\r\n-      return;\r\n-    }\r\n-    \r\n-    toast.loading('Refreshing content...');\r\n-    try {\r\n-      await loadLessonContent(currentLessonId);\r\n-      toast.success('Content refreshed');\r\n-    } catch (error) {\r\n-      console.error('Refresh error:', error);\r\n-      toast.error('Failed to refresh content');\r\n-    }\r\n-  };\r\n-\r\n-  // Update the sidebar hover mechanism\r\n-  const handleSidebarHover = useCallback(\r\n-    debounce((isHovering: boolean) => {\r\n-      if (!isSidebarLocked && !isNavigating && !isDropdownOpen) {\r\n-        if (isHovering || document.activeElement?.closest('.sidebar-content')) {\r\n-          setIsSidebarCollapsed(false);\r\n-        } else {\r\n-          setTimeout(() => {\r\n-            if (!isDropdownOpen) { // Only collapse if dropdown is closed\r\n-              setIsSidebarCollapsed(true);\r\n-            }\r\n-          }, 300);\r\n-        }\r\n-      }\r\n-    }, 100),\r\n-    [isSidebarLocked, isNavigating, isDropdownOpen]\r\n-  );\r\n-\r\n-  // Update the sidebar JSX\r\n-  <div \r\n-    className={cn(\r\n-      \"transition-all duration-300 ease-in-out relative\",\r\n-      isSidebarCollapsed ? \"w-20\" : \"w-80\",\r\n-      \"flex-shrink-0 group\"\r\n-    )}\r\n-    onMouseEnter={() => {\r\n-      handleSidebarHover(true);\r\n-      // Immediately expand on mouse enter\r\n-      if (!isSidebarLocked) {\r\n-        setIsSidebarCollapsed(false);\r\n-      }\r\n-    }}\r\n-    onMouseLeave={() => {\r\n-      // Only collapse if not interacting with content\r\n-      if (!document.activeElement?.closest('.sidebar-content')) {\r\n-        handleSidebarHover(false);\r\n-      }\r\n-    }}\r\n-    onFocus={() => setIsSidebarCollapsed(false)}\r\n-  >\r\n-    <Card className={cn(\r\n-      \"h-full relative sidebar-content\", // Added sidebar-content class\r\n-      \"transition-shadow duration-300\",\r\n-      \"hover:shadow-lg\"\r\n-    )}>\r\n-      {/* Rest of sidebar content */}\r\n-    </Card>\r\n-  </div>\r\n-\r\n-  // Update the sidebar and card styles\r\n-  return (\r\n-      <div className=\"container mx-auto py-8\">\r\n-        {/* Header */}\r\n-        <div className=\"flex items-center justify-between mb-2\">\r\n-          {/* ... header content ... */}\r\n-          <div className=\"flex items-center gap-4\">\r\n-            <Link href=\"/super-admin\">\r\n-              <Button variant=\"outline\" className=\"gap-2\">\r\n-                <ArrowLeft className=\"h-4 w-4\" />\r\n-                Back\r\n-              </Button>\r\n-            </Link>\r\n-            <div className=\"flex items-center gap-2\">\r\n-              <h1 className=\"text-2xl font-bold\">Lesson Management</h1>\r\n-              <Button\r\n-                variant=\"ghost\"\r\n-                size=\"icon\"\r\n-                onClick={handleRefreshLesson}\r\n-                className=\"ml-2\"\r\n-                title=\"Refresh lesson content\"\r\n-              >\r\n-                <RefreshCw className=\"h-4 w-4\" />\r\n-              </Button>\r\n-            </div>\r\n-            <p className=\"text-sm text-muted-foreground\">Create and manage your educational content</p>\r\n-          </div>\r\n-          <div className=\"flex items-center gap-2\">\r\n-            <Button\r\n-              variant=\"outline\"\r\n-              size=\"sm\"\r\n-              onClick={() => setShowHelpTips(!showHelpTips)}\r\n-              className=\"gap-2\"\r\n-            >\r\n-              {showHelpTips ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\r\n-              {showHelpTips ? 'Hide Tips' : 'Show Tips'}\r\n-            </Button>\r\n-          </div>\r\n-        </div>\r\n-        \r\n-        {/* Main content wrapper - Fix the layout here */}\r\n-        <div className=\"flex gap-6 h-[calc(100vh-200px)]\">\r\n-          {/* Improved sidebar */}\r\n-          <div \r\n-            className={cn(\r\n-              \"transition-all duration-300 ease-in-out relative\",\r\n-              isSidebarCollapsed ? \"w-20\" : \"w-80\",\r\n-              \"flex-shrink-0 group\"\r\n-            )}\r\n-            onMouseEnter={() => {\r\n-              handleSidebarHover(true);\r\n-              // Immediately expand on mouse enter\r\n-              if (!isSidebarLocked) {\r\n-                setIsSidebarCollapsed(false);\r\n-              }\r\n-            }}\r\n-            onMouseLeave={() => {\r\n-              // Only collapse if not interacting with content\r\n-              if (!document.activeElement?.closest('.sidebar-content')) {\r\n-                handleSidebarHover(false);\r\n-              }\r\n-            }}\r\n-            onFocus={() => setIsSidebarCollapsed(false)}\r\n-          >\r\n-            <Card className={cn(\r\n-              \"h-full relative sidebar-content\", // Added sidebar-content class\r\n-              \"transition-shadow duration-300\",\r\n-              \"hover:shadow-lg\"\r\n-            )}>\r\n-              {/* Lock button - only show after lesson selection */}\r\n-              {currentLessonId && (\r\n-                <Button\r\n-                  variant=\"ghost\"\r\n-                  size=\"sm\"\r\n-                  className=\"absolute top-2 right-2 z-10\"\r\n-                  onClick={() => {\r\n-                    setIsSidebarLocked(!isSidebarLocked);\r\n-                    if (!isSidebarLocked) {\r\n-                      setIsSidebarCollapsed(false);\r\n-                    }\r\n-                  }}\r\n-                >\r\n-                  {isSidebarLocked ? <Lock className=\"h-4 w-4\" /> : <Unlock className=\"h-4 w-4\" />}\r\n-                </Button>\r\n-              )}\r\n-\r\n-              {/* Sidebar content with overflow handling */}\r\n-              <div className={cn(\r\n-                \"transition-all duration-300 overflow-hidden\",\r\n-                isSidebarCollapsed ? \"opacity-0\" : \"opacity-100\"\r\n-              )}>\r\n-                <Card className=\"h-full\">\r\n-                  <CardHeader className=\"pb-3\">\r\n-                    <div className=\"flex items-center justify-between\">\r\n-                      <CardTitle className=\"text-lg font-semibold\">Content Management</CardTitle>\r\n-                      <TooltipProvider>\r\n-                        <Tooltip>\r\n-                          <TooltipTrigger>\r\n-                            <HelpCircle className=\"h-4 w-4 text-muted-foreground\" />\r\n-                          </TooltipTrigger>\r\n-                          <TooltipContent>\r\n-                            <p>Manage your educational content here</p>\r\n-                          </TooltipContent>\r\n-                        </Tooltip>\r\n-                      </TooltipProvider>\r\n-                      </div>\r\n-                    <CardDescription>Create and manage your lessons</CardDescription>\r\n-                  </CardHeader>\r\n-                  <CardContent className=\"space-y-4\">\r\n-                    {/* View/Edit Mode Toggle */}\r\n-                    <div className=\"grid grid-cols-2 gap-2 p-1 bg-muted rounded-lg\">\r\n-                      <Button\r\n-                        variant={isViewMode ? \"default\" : \"ghost\"}\r\n-                        size=\"sm\"\r\n-                        onClick={() => setIsViewMode(true)}\r\n-                        className=\"w-full\"\r\n-                      >\r\n-                        <Eye className=\"h-4 w-4 mr-2\" />\r\n-                        View\r\n-                      </Button>\r\n-                      <Button\r\n-                        variant={!isViewMode ? \"default\" : \"ghost\"}\r\n-                        size=\"sm\"\r\n-                        onClick={() => setIsViewMode(false)}\r\n-                        className=\"w-full\"\r\n-                      >\r\n-                        <Edit className=\"h-4 w-4 mr-2\" />\r\n-                        Edit\r\n-                      </Button>\r\n-                    </div>\r\n-\r\n-                    {/* Grade Selection */}\r\n-                    <div className=\"space-y-2\">\r\n-                      <div className=\"flex items-center justify-between\">\r\n-                        <Label htmlFor=\"grade-select\">Grade</Label>\r\n-                        {isViewMode && (\r\n-                          <Button variant=\"ghost\" size=\"sm\" onClick={() => setExpandedGrade(expandedGrade ? null : selectedGrade)}>\r\n-                            {expandedGrade ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n-                          </Button>\r\n-                        )}\r\n-                      </div>\r\n-                      <Select \r\n-                        value={selectedGradeId || ''}\r\n-                        onValueChange={handleGradeSelect}\r\n-                        onOpenChange={(open) => {\r\n-                          if (open) {\r\n-                            // Force sidebar to stay open and lock it\r\n-                            setIsSidebarCollapsed(false);\r\n-                            setIsSidebarLocked(true);\r\n-                          }\r\n-                        }}\r\n-                      >\r\n-                        <SelectTrigger \r\n-                          id=\"grade-select\" \r\n-                          className=\"w-full\"\r\n-                          onClick={(e) => {\r\n-                            e.stopPropagation(); // Prevent event bubbling\r\n-                            setIsSidebarCollapsed(false);\r\n-                            setIsSidebarLocked(true);\r\n-                          }}\r\n-                        >\r\n-                          <SelectValue placeholder=\"Select Grade\" />\r\n-                        </SelectTrigger>\r\n-                        <SelectContent \r\n-                          onCloseAutoFocus={(e) => {\r\n-                            e.preventDefault();\r\n-                            setIsSidebarLocked(true);\r\n-                            setIsSidebarCollapsed(false);\r\n-                          }}\r\n-                        >\r\n-                          {grades.map((grade: Grade) => (\r\n-                            <SelectItem \r\n-                              key={`grade-${grade.id || 'new'}`} \r\n-                              value={grade.id || ''}\r\n-                              onMouseDown={(e) => {\r\n-                                e.preventDefault();\r\n-                                e.stopPropagation();\r\n-                              }}\r\n-                            >\r\n-                              <div className=\"flex items-center gap-2\">\r\n-                                <BookOpen className=\"h-4 w-4 text-primary\" />\r\n-                                {grade.name}\r\n-                              </div>\r\n-                            </SelectItem>\r\n-                          ))}\r\n-                        </SelectContent>\r\n-                      </Select>\r\n-                      {!isViewMode && (\r\n-                      <Button \r\n-                        variant=\"outline\" \r\n-                        size=\"sm\" \r\n-                        className=\"w-full gap-2\"\r\n-                        onClick={() => setModalState({ ...modalState, showAddGrade: false })}\r\n-                      >\r\n-                        <Plus className=\"h-4 w-4\" />\r\n-                        Add New Grade\r\n-                      </Button>\r\n-                      )}\r\n-                    </div>\r\n-\r\n-                    {/* Content Tree View in View Mode */}\r\n-                    {isViewMode && expandedGrade && (\r\n-                      <div className=\"mt-4 space-y-4 overflow-y-auto max-h-[calc(100vh-300px)]\">\r\n-                        {topics.map((topic: Topic) => (\r\n-                          <Card \r\n-                            key={topic.id} \r\n-                            className={cn(\r\n-                              \"border-l-4 transition-all duration-200 hover:shadow-md\",\r\n-                              expandedTopic === topic.id \r\n-                                ? \"border-l-primary bg-accent/5\" \r\n-                                : \"border-l-primary/40 hover:border-l-primary\"\r\n-                            )}\r\n-                          >\r\n-                            <CardHeader \r\n-                              className=\"py-3 cursor-pointer select-none\" \r\n-                              onClick={() => handleTopicExpand(topic.id || '')}\r\n-                            >\r\n-                              <div className=\"flex items-center justify-between\">\r\n-                                <div className=\"flex items-center gap-2\">\r\n-                                  <Layers className=\"h-4 w-4 text-primary\" />\r\n-                                  <h4 className=\"font-medium\">{topic.title}</h4>\r\n-                                  <Badge variant=\"outline\" className=\"ml-2\">\r\n-                                    {subtopics.filter(s => s.topic_id === topic.id).length} Subtopics\r\n-                                  </Badge>\r\n-                                </div>\r\n-                                <div className=\"flex items-center gap-2\">\r\n-                                  <AlertDialog>\r\n-                                    <AlertDialogTrigger asChild>\r\n-                                      <Button \r\n-                                        variant=\"ghost\" \r\n-                                        size=\"sm\" \r\n-                                        className=\"hover:bg-destructive/10 hover:text-destructive\"\r\n-                                        onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}\r\n-                                      >\r\n-                                        <Trash className=\"h-4 w-4\" />\r\n-                                      </Button>\r\n-                                    </AlertDialogTrigger>\r\n-                                    {/* Alert Dialog Content */}\r\n-                                  </AlertDialog>\r\n-                                  <ChevronDown className={cn(\r\n-                                    \"h-4 w-4 transition-transform duration-200\",\r\n-                                    expandedTopic === topic.id ? \"rotate-0\" : \"-rotate-90\"\r\n-                                  )} />\r\n-                                </div>\r\n-                              </div>\r\n-                            </CardHeader>\r\n-\r\n-                            <AnimatePresence>\r\n-                              {expandedTopic === topic.id && (\r\n-                                <motion.div\r\n-                                  initial={{ height: 0, opacity: 0 }}\r\n-                                  animate={{ height: \"auto\", opacity: 1 }}\r\n-                                  exit={{ height: 0, opacity: 0 }}\r\n-                                  transition={{ duration: 0.2 }}\r\n-                                >\r\n-                                  <CardContent className=\"pt-0 pb-2\">\r\n-                                    <div className=\"pl-4 space-y-2\">\r\n-                                      {isLoadingSubtopics ? (\r\n-                                        <div className=\"flex items-center justify-center py-4\">\r\n-                                          <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\r\n-                                        </div>\r\n-                                      ) : (\r\n-                                        subtopics\r\n-                                          .filter(subtopic => subtopic.topic_id === topic.id)\r\n-                                          .map((subtopic: SubTopic) => (\r\n-                                            <div \r\n-                                              key={subtopic.id}\r\n-                                              className={cn(\r\n-                                                \"rounded-lg border transition-colors\",\r\n-                                                expandedSubtopic === subtopic.id \r\n-                                                  ? \"bg-accent/10 border-primary/20\" \r\n-                                                  : \"hover:bg-accent/5\"\r\n-                                              )}\r\n-                                            >\r\n-                                              <div \r\n-                                                className=\"p-3 cursor-pointer\"\r\n-                                                onClick={() => handleSubtopicExpand(subtopic.id || '')}\r\n-                                              >\r\n-                                                <div className=\"flex items-center justify-between py-2 cursor-pointer hover:bg-accent/50 rounded-md px-2\">\r\n-                                                  <div className=\"flex items-center gap-2\">\r\n-                                                    <BookOpen className=\"h-4 w-4 text-primary\" />\r\n-                                                    <span className=\"text-sm font-medium\">{subtopic.name}</span>\r\n-                                                    <Badge variant=\"outline\" className=\"ml-2\">\r\n-                                                      {lessons.filter(l => l.subtopic_id === subtopic.id).length} Lessons\r\n-                                                    </Badge>\r\n-                                                  </div>\r\n-                                                  <div className=\"flex items-center gap-2\">\r\n-                                                    <AlertDialog>\r\n-                                                      <AlertDialogTrigger asChild>\r\n-                                                        <Button \r\n-                                                          variant=\"ghost\" \r\n-                                                          size=\"sm\" \r\n-                                                          className=\"hover:bg-destructive/10 hover:text-destructive\"\r\n-                                                          onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}\r\n-                                                        >\r\n-                                                          <Trash className=\"h-4 w-4\" />\r\n-                                                        </Button>\r\n-                                                      </AlertDialogTrigger>\r\n-                                                      {/* Alert Dialog Content */}\r\n-                                                    </AlertDialog>\r\n-                                                    <ChevronDown className={cn(\r\n-                                                      \"h-4 w-4 transition-transform duration-200\",\r\n-                                                      expandedSubtopic === subtopic.id ? \"rotate-0\" : \"-rotate-90\"\r\n-                                                    )} />\r\n-                                                  </div>\r\n-                                                </div>\r\n-\r\n-                                                <AnimatePresence>\r\n-                                                  {expandedSubtopic === subtopic.id && (\r\n-                                                    <motion.div\r\n-                                                      initial={{ height: 0, opacity: 0 }}\r\n-                                                      animate={{ height: \"auto\", opacity: 1 }}\r\n-                                                      exit={{ height: 0, opacity: 0 }}\r\n-                                                      transition={{ duration: 0.2 }}\r\n-                                                    >\r\n-                                                      <div className=\"px-3 pb-3\">\r\n-                                                        <div className=\"space-y-2\">\r\n-                                                          {isLoadingLessons ? (\r\n-                                                            <div className=\"flex items-center justify-center py-4\">\r\n-                                                              <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\r\n-                                                            </div>\r\n-                                                          ) : (\r\n-                                                            lessons\r\n-                                                              .filter(lesson => lesson.subtopic_id === subtopic.id)\r\n-                                                              .map((lesson: Lesson) => (\r\n-                                                                <div\r\n-                                                                  key={lesson.id}\r\n-                                                                  onClick={() => handleLessonSelect(lesson.id || '')}\r\n-                                                                  className={cn(\r\n-                                                                    \"flex items-center gap-3 p-2 rounded-md cursor-pointer transition-colors\",\r\n-                                                                    \"hover:bg-accent\",\r\n-                                                                    currentLessonId === lesson.id && \"bg-accent\"\r\n-                                                                  )}\r\n-                                                                >\r\n-                                                                  <div className=\"flex items-center gap-2 flex-1\">\r\n-                                                                    <div className=\"flex h-8 w-8 items-center justify-center rounded-md border bg-background\">\r\n-                                                                      <BookOpen className=\"h-4 w-4 text-primary\" />\r\n-                                                                    </div>\r\n-                                                                    <div className=\"flex flex-col\">\r\n-                                                                      <span className=\"text-sm font-medium\">{lesson.title}</span>\r\n-                                                                      <span className=\"text-xs text-muted-foreground\">\r\n-                                                                        {lesson.duration} mins • {lesson.questions?.length || 0} Questions\r\n-                                                                      </span>\r\n-                                                                    </div>\r\n-                                                                  </div>\r\n-                                                                  <AlertDialog>\r\n-                                                                    <AlertDialogTrigger asChild>\r\n-                                                                      <Button \r\n-                                                                        variant=\"ghost\" \r\n-                                                                        size=\"sm\" \r\n-                                                                        className=\"hover:bg-destructive/10 hover:text-destructive\"\r\n-                                                                        onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}\r\n-                                                                      >\r\n-                                                                        <Trash className=\"h-4 w-4\" />\r\n-                                                                      </Button>\r\n-                                                                    </AlertDialogTrigger>\r\n-                                                                    {/* Alert Dialog Content */}\r\n-                                                                  </AlertDialog>\r\n-                                                                </div>\r\n-                                                              ))\r\n-                                                          )}\r\n-                                                        </div>\r\n-                                                      </div>\r\n-                                                    </motion.div>\r\n-                                                  )}\r\n-                                                </AnimatePresence>\r\n-                                              </div>\r\n-                                            </div>\r\n-                                          ))\r\n-                                      )}\r\n-                                    </div>\r\n-                                  </CardContent>\r\n-                                </motion.div>\r\n-                              )}\r\n-                            </AnimatePresence>\r\n-                          </Card>\r\n-                        ))}\r\n-                      </div>\r\n-                    )}\r\n-\r\n-                    {/* Regular Edit Mode Content */}\r\n-                    {!isViewMode && (\r\n-                      <>\r\n-                        {/* Existing Topic, Subtopic, and Lesson Selection UI */}\r\n-                      {/* Topic Selection */}\r\n-                        {selectedGradeId && (\r\n-                      <div className=\"space-y-2\">\r\n-                        <div className=\"flex items-center justify-between\">\r\n-                        <Label htmlFor=\"topic-select\">Topic</Label>\r\n-                        </div>\r\n-                        <Select \r\n-                              value={selectedTopicId || ''} \r\n-                              onValueChange={handleTopicSelect}\r\n-                        >\r\n-                          <SelectTrigger id=\"topic-select\" className=\"w-full\">\r\n-                            <SelectValue placeholder=\"Select Topic\" />\r\n-                          </SelectTrigger>\r\n-                          <SelectContent>\r\n-                                {topics.map((topic: Topic) => (\r\n-                                  <SelectItem \r\n-                                    key={`topic-${topic.id || 'new'}`} \r\n-                                    value={topic.id || ''}\r\n-                                  >\r\n-                                  <div className=\"flex items-center gap-2\">\r\n-                                  <Layers className=\"h-4 w-4 text-primary\" />\r\n-                                    {topic.title}\r\n-                                  </div>\r\n-                                </SelectItem>\r\n-                              ))}\r\n-                          </SelectContent>\r\n-                        </Select>\r\n-                        <Button \r\n-                          variant=\"outline\" \r\n-                          size=\"sm\" \r\n-                          className=\"w-full gap-2\"\r\n-                          onClick={() => setModalState({ ...modalState, showAddTopic: true })}\r\n-                        >\r\n-                          <Plus className=\"h-4 w-4\" />\r\n-                          Add New Topic\r\n-                        </Button>\r\n-                      </div>\r\n-                    )}\r\n-\r\n-                    {/* Subtopic Selection */}\r\n-                        {selectedTopicId && (\r\n-                      <div className=\"space-y-2\">\r\n-                        <div className=\"flex items-center justify-between\">\r\n-                        <Label htmlFor=\"subtopic-select\">Subtopic</Label>\r\n-                        </div>\r\n-                        <Select \r\n-                              value={selectedSubtopicId || ''} \r\n-                              onValueChange={handleSubtopicSelect}\r\n-                        >\r\n-                          <SelectTrigger id=\"subtopic-select\" className=\"w-full\">\r\n-                            <SelectValue placeholder=\"Select Subtopic\" />\r\n-                          </SelectTrigger>\r\n-                          <SelectContent>\r\n-                                {subtopics\r\n-                                  .filter(subtopic => subtopic.id)\r\n-                                  .map((subtopic, index) => (\r\n-                                    <SelectItem \r\n-                                      key={subtopic.id || `subtopic-${index}`}\r\n-                                      value={subtopic.id || ''}\r\n-                                    >\r\n-                                      {subtopic.title || 'Untitled Subtopic'}\r\n-                                    </SelectItem>\r\n-                                  ))}\r\n-                          </SelectContent>\r\n-                        </Select>\r\n-                        {!isViewMode && (\r\n-                          <Button \r\n-                            variant=\"outline\" \r\n-                            size=\"sm\" \r\n-                            className=\"w-full gap-2\"\r\n-                            onClick={() => setModalState({ ...modalState, showAddSubtopic: true })}\r\n-                          >\r\n-                            <Plus className=\"h-4 w-4\" />\r\n-                            Add New Subtopic\r\n-                          </Button>\r\n-                        )}\r\n-                      </div>\r\n-                    )}\r\n-\r\n-                    {/* Lesson Selection */}\r\n-                        {selectedSubtopicId && (\r\n-                      <div className=\"space-y-2\">\r\n-                        <div className=\"flex items-center justify-between\">\r\n-                          <Label htmlFor=\"lesson-select\">Lesson</Label>\r\n-                        </div>\r\n-                          <Select \r\n-                            value={currentLessonId || ''} \r\n-                            onValueChange={handleLessonSelect}\r\n-                            onOpenChange={(open) => {\r\n-                              setIsDropdownOpen(open);\r\n-                              if (open) {\r\n-                                setIsSidebarCollapsed(false);\r\n-                                setIsSidebarLocked(true);\r\n-                              } else {\r\n-                                // Small delay before unlocking to prevent immediate collapse\r\n-                                setTimeout(() => {\r\n-                                  setIsSidebarLocked(false);\r\n-                                }, 100);\r\n-                              }\r\n-                            }}\r\n-                          >\r\n-                            <SelectTrigger \r\n-                              id=\"lesson-select\" \r\n-                              className=\"w-full\"\r\n-                              onClick={(e) => {\r\n-                                e.stopPropagation();\r\n-                                setIsSidebarCollapsed(false);\r\n-                                setIsSidebarLocked(true);\r\n-                              }}\r\n-                            >\r\n-                              <SelectValue placeholder=\"Select Lesson\" />\r\n-                            </SelectTrigger>\r\n-                            <SelectContent>\r\n-                              {lessons\r\n-                                .filter((lesson): lesson is Lesson => lesson !== undefined && lesson !== null)\r\n-                                .map((lesson: Lesson) => (\r\n-                                  <SelectItem \r\n-                                    key={`lesson-${lesson.id || 'new'}`} \r\n-                                    value={lesson.id || ''}\r\n-                                  >\r\n-                                    <div className=\"flex items-center gap-2\">\r\n-                                      <BookOpen className=\"h-4 w-4 text-primary\" />\r\n-                                      {lesson.title || 'Untitled Lesson'}\r\n-                                    </div>\r\n-                                  </SelectItem>\r\n-                                ))}\r\n-                            </SelectContent>\r\n-                          </Select>\r\n-                    <Button \r\n-                            variant=\"outline\" \r\n-                            size=\"sm\" \r\n-                            className=\"w-full gap-2\"\r\n-                        onClick={() => setModalState({ ...modalState, showAddLesson: true })}\r\n-                          >\r\n-                            <Plus className=\"h-4 w-4\" />\r\n-                            Add New Lesson\r\n-                    </Button>\r\n-                      </div>\r\n-                        )}\r\n-                      </>\r\n-                    )}\r\n-                  </CardContent>\r\n-                </Card>\r\n-              </div>\r\n-\r\n-              {/* Collapsed view */}\r\n-              {isSidebarCollapsed && (\r\n-                <div className=\"absolute inset-0 flex flex-col items-center pt-12 gap-4\">\r\n-                  <BookOpen className=\"h-6 w-6 text-muted-foreground\" />\r\n-                  <div className=\"w-px h-full bg-border\" />\r\n-                </div>\r\n-              )}\r\n-            </Card>\r\n-          </div>\r\n-        \r\n-\r\n-          {/* Right Content Area */}\r\n-          <div className=\"flex-1 overflow-y-auto\">\r\n-            {isNavigating ? (\r\n-              <div className=\"flex items-center justify-center h-[400px]\">\r\n-                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n-                <span className=\"ml-3\">Loading...</span>\r\n-              </div>\r\n-            ) : (\r\n-              <>\r\n-                {!selectedGradeId ? (\r\n-                  // Question Types Display Section\r\n-                  <div className=\"space-y-6\">\r\n-                    <Card>\r\n-                      <CardHeader>\r\n-                        <div className=\"flex items-center justify-between\">\r\n-                          <div>\r\n-                            <CardTitle className=\"text-xl font-semibold\">Available Question Types</CardTitle>\r\n-                            <CardDescription>Browse through different question formats and examples</CardDescription>\r\n-                          </div>\r\n-                          <TooltipProvider>\r\n-                            <Tooltip>\r\n-                              <TooltipTrigger>\r\n-                                <HelpCircle className=\"h-5 w-5 text-muted-foreground\" />\r\n-                              </TooltipTrigger>\r\n-                              <TooltipContent>\r\n-                                <p>Click on each type to see detailed examples</p>\r\n-                              </TooltipContent>\r\n-                            </Tooltip>\r\n-                          </TooltipProvider>\r\n-                        </div>\r\n-                      </CardHeader>\r\n-                      <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n-                        {Object.entries(QUESTION_TYPES).map(([type, details]) => (\r\n-                          <Card key={type} className=\"cursor-pointer hover:bg-accent/50 transition-colors\">\r\n-                            <CardHeader className=\"p-4\">\r\n-                              <div className=\"flex items-center justify-between mb-2\">\r\n-                                <Badge variant=\"outline\" className=\"bg-primary/5 text-lg\">\r\n-                                  {details.label}\r\n-                                </Badge>\r\n-                              </div>\r\n-                              <CardDescription className=\"text-sm\">\r\n-                                {details.description || 'No description available'}\r\n-                              </CardDescription>\r\n-                              <div className=\"mt-4\">\r\n-                                <div className=\"text-sm font-medium mb-2\">Example:</div>\r\n-                                <div className=\"p-3 rounded-md bg-muted/50 text-sm\">\r\n-                                  {type === 'multiple-choice' && (\r\n-                                    <>\r\n-                                      <div className=\"font-medium mb-2\">Q: What is the capital of France?</div>\r\n-                                      <div className=\"space-y-1 pl-4\">\r\n-                                        <div>A) Paris</div>\r\n-                                        <div>B) London</div>\r\n-                                        <div>C) Berlin</div>\r\n-                                        <div>D) Madrid</div>\r\n-                                      </div>\r\n-                                    </>\r\n-                                  )}\r\n-                                  {type === 'fill-in-blank' && (\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <div>Complete the sentence:</div>\r\n-                                      <div>The sun rises in the <span className=\"bg-primary/20 px-2 rounded\">_____</span> and sets in the <span className=\"bg-primary/20 px-2 rounded\">_____</span>.</div>\r\n-                                    </div>\r\n-                                  )}\r\n-                                  {type === 'true-false' && (\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <div className=\"font-medium\">Statement:</div>\r\n-                                      <div>The Earth is flat.</div>\r\n-                                      <div className=\"mt-2\">\r\n-                                        <Badge variant=\"outline\" className=\"mr-2\">True</Badge>\r\n-                                        <Badge variant=\"outline\">False</Badge>\r\n-                                      </div>\r\n-                                    </div>\r\n-                                  )}\r\n-                                  {type === 'matching' && (\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <div className=\"font-medium mb-2\">Match the countries with their capitals:</div>\r\n-                                      <div className=\"grid grid-cols-2 gap-4\">\r\n-                                        <div>\r\n-                                          1. France<br />\r\n-                                          2. Germany<br />\r\n-                                          3. Spain\r\n-                                        </div>\r\n-                                        <div>\r\n-                                          • Berlin<br />\r\n-                                          • Paris<br />\r\n-                                          • Madrid\r\n-                                        </div>\r\n-                                      </div>\r\n-                                    </div>\r\n-                                  )}\r\n-                                  {type === 'ordering' && (\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <div className=\"font-medium mb-2\">Arrange in chronological order:</div>\r\n-                                      <div className=\"space-y-1\">\r\n-                                        <Badge variant=\"outline\" className=\"mr-2\">1</Badge>World War II<br />\r\n-                                        <Badge variant=\"outline\" className=\"mr-2\">2</Badge>Industrial Revolution<br />\r\n-                                        <Badge variant=\"outline\" className=\"mr-2\">3</Badge>Renaissance\r\n-                                      </div>\r\n-                                    </div>\r\n-                                  )}\r\n-                                  {type === 'short-answer' && (\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <div className=\"font-medium\">Question:</div>\r\n-                                      <div>Explain the water cycle in 2-3 sentences.</div>\r\n-                                      <div className=\"mt-2 p-2 border border-dashed rounded-md border-primary/30\">\r\n-                                        Answer space\r\n-                                      </div>\r\n-                                    </div>\r\n-                                  )}\r\n-                                </div>\r\n-                              </div>\r\n-                            </CardHeader>\r\n-                          </Card>\r\n-                        ))}\r\n-                      </CardContent>\r\n-                    </Card>\r\n-                  </div>\r\n-                ) : isViewMode ? (\r\n-                  <div className=\"space-y-6\">\r\n-                    {selectedGradeId ? (\r\n-                      <div className=\"grid grid-cols-1 gap-6\">\r\n-                        {topics.map((topic) => (\r\n-                          <Card key={topic.id} className=\"border-l-4 border-l-primary\">\r\n-                            <CardHeader>\r\n-                              <div className=\"flex items-center justify-between\">\r\n-                                <h3 className=\"text-lg font-semibold\">{topic.title}</h3>\r\n-                              </div>\r\n-                            </CardHeader>\r\n-                            <CardContent>\r\n-                              <div className=\"space-y-4\">\r\n-                                {subtopics\r\n-                                  .filter(subtopic => subtopic.topic_id === topic.id)\r\n-                                  .map((subtopic, index) => (\r\n-                                    <div key={subtopic.id || `subtopic-${index}`} className=\"border-l-2 pl-4\">\r\n-                                      <h4 className=\"text-md font-medium mb-2\">{subtopic.name || 'Untitled Subtopic'}</h4>\r\n-                                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n-                                        {lessons\r\n-                                          .filter(lesson => lesson.subtopic_id === subtopic.id)\r\n-                                          .map((lesson) => (\r\n-                                            <Card \r\n-                                              key={lesson.id} \r\n-                                              className={cn(\r\n-                                                \"cursor-pointer transition-all duration-200\",\r\n-                                                \"hover:shadow-md hover:translate-y-[-2px]\",\r\n-                                                \"hover:bg-accent/50 hover:border-primary/50\",\r\n-                                                \"active:translate-y-[0px]\",\r\n-                                                currentLessonId === lesson.id && \"border-primary bg-accent/50 shadow-md\",\r\n-                                                \"group\" // Enable group hover effects\r\n-                                              )}\r\n-                                              onClick={() => handleLessonSelect(lesson.id || '')}\r\n-                                            >\r\n-                                              <CardHeader className=\"p-4\">\r\n-                                                <div className=\"flex flex-col gap-2\">\r\n-                                                  <div className=\"flex items-center justify-between\">\r\n-                                                    <div className=\"flex items-center gap-2\">\r\n-                                                      <BookOpen className={cn(\r\n-                                                        \"h-4 w-4 text-primary\",\r\n-                                                        \"transition-transform duration-200\",\r\n-                                                        \"group-hover:scale-110\"\r\n-                                                      )} />\r\n-                                                      <span className=\"font-medium\">{lesson.title}</span>\r\n-                                                    </div>\r\n-                                                    <Button\r\n-                                                      variant=\"outline\"\r\n-                                                      size=\"sm\"\r\n-                                                      className={cn(\r\n-                                                        \"opacity-0 group-hover:opacity-100\",\r\n-                                                        \"transition-all duration-200\",\r\n-                                                        \"hover:bg-primary hover:text-primary-foreground\"\r\n-                                                      )}\r\n-                                                      disabled={!lesson.content || currentLessonId !== lesson.id}\r\n-                                                      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\r\n-                                                        e.stopPropagation();\r\n-                                                        window.location.href = `/teacher/lessons/${lesson.id}`;\r\n-                                                      }}\r\n-                                                    >\r\n-                                                      Start Lesson\r\n-                                                    </Button>\r\n-                                                  </div>\r\n-                                                  <div className=\"flex items-center gap-2\">\r\n-                                                    <Badge variant=\"outline\" className={cn(\r\n-                                                      \"bg-primary/5\",\r\n-                                                      \"transition-colors duration-200\",\r\n-                                                      \"group-hover:bg-primary/10\"\r\n-                                                    )}>\r\n-                                                      {lesson.questions?.length || 0} Questions\r\n-                                                    </Badge>\r\n-                                                    <Badge variant=\"outline\" className={cn(\r\n-                                                      \"bg-primary/5\",\r\n-                                                      \"transition-colors duration-200\",\r\n-                                                      \"group-hover:bg-primary/10\"\r\n-                                                    )}>\r\n-                                                      {lesson.activities?.length || 0} Activities\r\n-                                                    </Badge>\r\n-                                                  </div>\r\n-                                                </div>\r\n-                                              </CardHeader>\r\n-                                            </Card>\r\n-                                          ))}\r\n-                                      </div>\r\n-                                    </div>\r\n-                                  ))}\r\n-                              </div>\r\n-                            </CardContent>\r\n-                          </Card>\r\n-                        ))}\r\n-                      </div>\r\n-                    ) : (\r\n-                      <div className=\"text-center py-20\">\r\n-                        <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\r\n-                        <h3 className=\"text-lg font-medium\">Select a Grade</h3>\r\n-                        <p className=\"text-sm text-muted-foreground\">\r\n-                          Choose a grade from the left panel to start managing content\r\n-                        </p>\r\n-                      </div>\r\n-                    )}\r\n-                  </div>\r\n-                ) : (\r\n-                  // Edit Mode Content\r\n-                  <div className=\"space-y-4\">\r\n-                    {/* Lesson Title */}\r\n-                    <Card>\r\n-                      <CardHeader>\r\n-                        <div className=\"flex items-center justify-between mb-4\">\r\n-                          <h2 className=\"text-2xl font-bold\">Lesson Content</h2>\r\n-                                                    <Button\r\n-                                                      variant=\"outline\"\r\n-                                                      size=\"sm\"\r\n-                            onClick={() => setIsContentEditorOpen(true)}\r\n-                          >\r\n-                            <Pencil className=\"h-4 w-4 mr-2\" />\r\n-                            Edit Content\r\n-                          </Button>\r\n-                        </div>\r\n-                      </CardHeader>\r\n-                      <CardContent className=\"space-y-4\">\r\n-                        {/* Lesson Title */}\r\n-                        <div className=\"flex items-center justify-between\">\r\n-                          <div className=\"space-y-1\">\r\n-                            <Label>Lesson Title</Label>\r\n-                            <InlineEdit\r\n-                              value={lessonTitle}\r\n-                              onSave={async (newTitle) => {\r\n-                                setLessonTitle(newTitle);\r\n-                                await handleSaveLesson();\r\n-                              }}\r\n-                              isEditing={isEditingTitle}\r\n-                              setIsEditing={setIsEditingTitle}\r\n-                              placeholder=\"Enter lesson title\"\r\n-                              className=\"text-lg font-medium\"\r\n-                            />\r\n-                          </div>\r\n-                        </div>\r\n-\r\n-                        {/* Content Editor and Display */}\r\n-                        <div className=\"space-y-4\">\r\n-                          {isContentEditorOpen ? (\r\n-                            <div className=\"border rounded-lg p-4\">\r\n-                              <div className=\"mb-4\">\r\n-                                <Label>Content Heading</Label>\r\n-                                <InlineEdit\r\n-                                  value={contentHeading}\r\n-                                  onSave={(newHeading) => setContentHeading(newHeading)}\r\n-                                  isEditing={isEditingHeading}\r\n-                                  setIsEditing={setIsEditingHeading}\r\n-                                  placeholder=\"Add content heading\"\r\n-                                  className=\"text-base text-muted-foreground\"\r\n-                                />\r\n-                              </div>\r\n-                              <RichTextEditor\r\n-                                value={lessonContent}\r\n-                                onChange={setLessonContent}\r\n-                                onSave={async (content) => {\r\n-                                  await handleContentSave(content);\r\n-                                  setIsContentEditorOpen(false);\r\n-                                }}\r\n-                                placeholder=\"Add lesson content here...\"\r\n-                              />\r\n-                            </div>\r\n-                          ) : lessonContent ? (\r\n-                            <div className=\"prose prose-sm max-w-none\">\r\n-                              {contentHeading && (\r\n-                                <h3 className=\"text-lg font-semibold mb-2\">{contentHeading}</h3>\r\n-                              )}\r\n-                              <div dangerouslySetInnerHTML={{ __html: lessonContent }} />\r\n-                            </div>\r\n-                          ) : (\r\n-                            <div className=\"text-center py-8 text-muted-foreground\">\r\n-                              Click 'Edit Content' to add lesson content\r\n-                            </div>\r\n-                          )}\r\n-                        </div>\r\n-                      </CardContent>\r\n-                    </Card>\r\n-\r\n-                    {/* Tabs */}\r\n-                    <Tabs defaultValue=\"questions\" className=\"mt-6\">\r\n-                    <TabsList className=\"grid w-full grid-cols-2\">\r\n-                        <TabsTrigger value=\"questions\">\r\n-                          <MessageSquare className=\"h-4 w-4 mr-2\" />\r\n-                        Questions\r\n-                      </TabsTrigger>\r\n-                        <TabsTrigger value=\"activities\">\r\n-                          <ActivityIcon className=\"h-4 w-4 mr-2\" />\r\n-                        Activities\r\n-                      </TabsTrigger>\r\n-                    </TabsList>\r\n-\r\n-                      {/* Questions Tab */}\r\n-                      <TabsContent value=\"questions\" className=\"space-y-4\">\r\n-                      <CardHeader>\r\n-                          <CardDescription>Add and manage questions for this lesson</CardDescription>\r\n-                      </CardHeader>\r\n-                        {questions.map((question, index) => (\r\n-                          <Card key={index} className={cn(\r\n-                            \"relative border-l-4 transition-colors duration-200\",\r\n-                            expandedQuestion === index ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\r\n-                          )}>\r\n-                            <CardHeader className=\"pb-3\">\r\n-                              <div className=\"flex items-center justify-between gap-4\">\r\n-                                <div className=\"flex items-center gap-3 min-w-0 flex-1\">\r\n-                                  <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n-                                    <span className=\"px-2 py-1 bg-primary/10 rounded-md text-sm font-semibold text-primary whitespace-nowrap\">\r\n-                                      Q {index + 1}\r\n-                                    </span>\r\n-                                    <Badge variant=\"outline\" className=\"whitespace-nowrap\">\r\n-                                      {QUESTION_TYPES[question.type as keyof typeof QUESTION_TYPES]?.label || question.type}\r\n-                                    </Badge>\r\n-                                    {question.isDraft && (\r\n-                                      <Badge variant=\"secondary\" className=\"whitespace-nowrap\">Draft</Badge>\r\n-                                )}\r\n-                                  </div>\r\n-                                      {expandedQuestion !== index && (\r\n-                                        <div className=\"text-sm text-muted-foreground truncate\">\r\n-                                          {question.title || 'No question text'} - {question.content || 'No question texts'}\r\n-                                        </div>\r\n-                                      )}\r\n-                                    </div>\r\n-                                    <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n-                                      <Button\r\n-                                        variant=\"ghost\"\r\n-                                        size=\"sm\"\r\n-                                        onClick={() => handleQuestionExpand(index)}\r\n-                                      >\r\n-                                        {expandedQuestion === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n-                                      </Button>\r\n-                                      <Button\r\n-                                        variant=\"ghost\"\r\n-                                        size=\"sm\"\r\n-                                        onClick={() => handleRemoveQuestion(index)}\r\n-                                      >\r\n-                                        <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n-                                      </Button>\r\n-                                    </div>\r\n-                                  </div>\r\n-                                </CardHeader>\r\n-                                {expandedQuestion === index && (\r\n-                                  <CardContent>\r\n-                                    <QuestionForm\r\n-                                      key={index}\r\n-                                      question={{ \r\n-                                        ...question, \r\n-                                        lesson_id: currentLessonId || '',\r\n-                                        type: isValidQuestionType(question.type) ? question.type : 'speaking',\r\n-                                        data: {\r\n-                                          prompt: question.data?.prompt ?? '',\r\n-                                          teacher_script: question.data?.teacher_script ?? '',\r\n-                                          followup_prompt: question.data?.followup_prompt ?? [],\r\n-                                          sample_answer: question.data?.sample_answer ?? '',\r\n-                                          \r\n-                                        } \r\n-                                      }}\r\n-                                      index={index}\r\n-                                      onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\r\n-                                        await handleUpdateQuestion(index, {\r\n-                                          ...updatedQuestion,\r\n-                                          data: {\r\n-                                            prompt: updatedQuestion.data?.prompt ?? '',\r\n-                                            teacher_script: updatedQuestion.data?.teacher_script ?? '',\r\n-                                            followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\r\n-                                            sample_answer: updatedQuestion.data?.sample_answer ?? '',\r\n-                                            metadata: updatedQuestion.metadata ?? {},\r\n-                                            },\r\n-                                            correct_answer: updatedQuestion.correct_answer ?? '',\r\n-                                            content: updatedQuestion.content ?? ''  // Add default value\r\n-                                        });\r\n-                                      }}\r\n-                                      onRemove={handleRemoveQuestion}\r\n-                                      onAddExercisePrompt={handleAddExercisePrompt}\r\n-                                      onRemoveExercisePrompt={handleRemoveExercisePrompt}\r\n-                                      onExercisePromptChange={handleExercisePromptChange}\r\n-                                    /><Button \r\n-                                    size=\"sm\"\r\n-                                    variant=\"outline\"\r\n-                                    onClick={() => handleSaveQuestion(question, index)}\r\n-                                    className=\"ml-2\"\r\n-                                  >\r\n-                                    {questionSaveStatuses.find(s => s.id === question.id)?.status === 'saving' ? (\r\n-                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n-                                    ) : (\r\n-                                      <Save className=\"h-4 w-4 mr-2\" />\r\n-                                    )}\r\n-                                    Save Question\r\n-                                                    </Button>\r\n-                                    {/* Exercise Prompts with Save Buttons */}\r\n-                                    {question.exercisePrompts?.map((prompt, promptIndex) => (\r\n-                                      <div key={`${question.id}-prompt-${promptIndex}`} className=\"mt-4\"> {/* Updated key */}\r\n-                                        <div className=\"flex items-center justify-between mb-2\">\r\n-                                          <h4 className=\"text-sm font-medium\">Exercise Prompt {promptIndex + 1}</h4>\r\n-                                          <div className=\"flex items-center gap-2\">\r\n-                                            <TooltipProvider>\r\n-                                              <Tooltip>\r\n-                                                <TooltipTrigger asChild>\r\n-                                                  <Button\r\n-                                                    size=\"sm\"\r\n-                                                    variant=\"outline\"\r\n-                                                    onClick={() => handleSavePrompt(question.id, prompt, promptIndex)}\r\n-                                                    disabled={promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving'}\r\n-                                                  >\r\n-                                                    {promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving' ? (\r\n-                                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n-                                                    ) : (\r\n-                                                      <Save className=\"h-4 w-4 mr-2\" />\r\n-                                                    )}\r\n-                                                    Save Prompt\r\n-                                                  </Button>\r\n-                                                </TooltipTrigger>\r\n-                                                <TooltipContent>\r\n-                                                  {`Status: ${promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}`}\r\n-                                                </TooltipContent>\r\n-                                              </Tooltip>\r\n-                                            </TooltipProvider>\r\n-                                            <Badge variant={\r\n-                                              promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saved'\r\n-                                                ? 'secondary'\r\n-                                                : promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'error'\r\n-                                                ? 'destructive'\r\n-                                                : 'default'\r\n-                                            }>\r\n-                                              {promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}\r\n-                                            </Badge>\r\n-                                                  </div>\r\n-                                        </div>\r\n-                                        <ExercisePromptCard\r\n-                                          key={prompt.id} // Add a unique key here\r\n-                                          prompt={prompt}\r\n-                                          promptIndex={promptIndex}\r\n-                                          onRemove={() => handleRemoveExercisePrompt(index, promptIndex)}\r\n-                                          onUpdate={(updatedPrompt: ExercisePrompt) => {\r\n-                                            // Prevent duplicate updates\r\n-                                            if (updatedPrompt.id === prompt.id) {\r\n-                                              handleExercisePromptChange(index, promptIndex, updatedPrompt);\r\n-                                            }\r\n-                                          }}\r\n-                                        />\r\n-                                      </div>\r\n-                                    ))}\r\n-                                  </CardContent>\r\n-                                )}\r\n-                              </Card>\r\n-                            ))}\r\n-\r\n-                            {/* Add Question Button */}\r\n-                            <div className=\"flex items-center justify-between\">\r\n-                              <QuestionTypeSelect \r\n-                                value={selectedQuestionType} \r\n-                                onChange={handleQuestionTypeChange}\r\n-                              />\r\n-                                        <Button\r\n-                                          onClick={handleAddQuestion}\r\n-                                          disabled={!selectedQuestionType}\r\n-                                        >\r\n-                                <Plus className=\"h-4 w-4 mr-2\" />\r\n-                                          Add Question\r\n-                                        </Button>\r\n-                                      </div>\r\n-                      </TabsContent>\r\n-\r\n-                      {/* Activities Tab */}\r\n-                      <TabsContent value=\"activities\" className=\"space-y-4\">\r\n-                      <CardHeader>\r\n-                          <CardDescription>Add and manage activities for this lesson</CardDescription>\r\n-                      </CardHeader>\r\n-                        {activities.map((activity, index) => (\r\n-                          <Card key={index}>\r\n-                            <CardHeader className=\"pb-3\">\r\n-                              <div className=\"flex items-center justify-between\">\r\n-                                  <div className=\"flex items-center gap-2\">\r\n-                                  <Badge variant=\"outline\">Activity {index + 1}</Badge>\r\n-                                  </div>\r\n-                                <div className=\"flex items-center gap-2\">\r\n-                                  <Button\r\n-                                    variant=\"ghost\"\r\n-                                    size=\"sm\"\r\n-                                    onClick={() => handleActivityExpand(index)}\r\n-                                  >\r\n-                                    {expandedActivity === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n-                                  </Button>\r\n-                                  <Button\r\n-                                    variant=\"ghost\"\r\n-                                    size=\"sm\"\r\n-                                    onClick={() => handleRemoveActivity(index)}\r\n-                                  >\r\n-                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n-                                  </Button>\r\n-                                </div>\r\n-                              </div>\r\n-                            </CardHeader>\r\n-                            {expandedActivity === index && (\r\n-                              <CardContent>\r\n-                                <div className=\"space-y-4\">\r\n-                                  <div className=\"space-y-2\">\r\n-                                    <Label>Instructions</Label>\r\n-                                    <Textarea\r\n-                                      value={activity.instructions}\r\n-                                      onChange={(e) => handleUpdateActivity(index, {\r\n-                                        ...activity,\r\n-                                        instructions: e.target.value\r\n-                                      })}\r\n-                                      placeholder=\"Enter activity instructions\"\r\n-                                    />\r\n-                                  </div>\r\n-                                    \r\n-                                    {/* Media Section */}\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <Label>Media</Label>\r\n-                                      {activity.media?.map((media, mediaIndex) => (\r\n-                                        <div key={mediaIndex} className=\"flex items-center gap-2\">\r\n-                                          <Input\r\n-                                            value={media.url}\r\n-                                            onChange={(e) => {\r\n-                                              const updatedMedia = [...(activity.media || [])];\r\n-                                              updatedMedia[mediaIndex] = {\r\n-                                                type: media.type,\r\n-                                                url: e.target.value\r\n-                                              };\r\n-                                              handleUpdateActivity(index, {\r\n-                                                ...activity,\r\n-                                                media: updatedMedia\r\n-                                              });\r\n-                                            }}\r\n-                                            placeholder=\"Media URL\"\r\n-                                          />\r\n-                                          <Select\r\n-                                            value={media.type}\r\n-                                            onValueChange={(value) => {\r\n-                                              const updatedMedia = [...(activity.media || [])];\r\n-                                              updatedMedia[mediaIndex] = {\r\n-                                                type: value as 'image' | 'gif' | 'video',\r\n-                                                url: media.url\r\n-                                              };\r\n-                                              handleUpdateActivity(index, {\r\n-                                                ...activity,\r\n-                                                media: updatedMedia\r\n-                                              });\r\n-                                            }}\r\n-                                          >\r\n-                                            <SelectTrigger className=\"w-[120px]\">\r\n-                                              <SelectValue placeholder=\"Type\" />\r\n-                                            </SelectTrigger>\r\n-                                            <SelectContent>\r\n-                                              <SelectItem value=\"image\">Image</SelectItem>\r\n-                                              <SelectItem value=\"gif\">GIF</SelectItem>\r\n-                                              <SelectItem value=\"video\">Video</SelectItem>\r\n-                                            </SelectContent>\r\n-                                          </Select>\r\n-                                <Button\r\n-                                            variant=\"ghost\"\r\n-                                            size=\"sm\"\r\n-                                  onClick={() => {\r\n-                                              const updatedMedia = (activity.media || []).filter((_, i) => i !== mediaIndex);\r\n-                                              handleUpdateActivity(index, {\r\n-                                                ...activity,\r\n-                                                media: updatedMedia\r\n-                                          });\r\n-                                          }}\r\n-                                  >\r\n-                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n-                                  </Button>\r\n-                                </div>\r\n-                                        ))}\r\n-                                  <Button\r\n-                                    variant=\"outline\"\r\n-                                    size=\"sm\"\r\n-                                            onClick={() => {\r\n-                                              handleUpdateActivity(index, {\r\n-                                                ...activity,\r\n-                                                media: [\r\n-                                                  ...(activity.media || [])  ,\r\n-                                                  { url: '', type: 'image' }\r\n-                                                ]\r\n-                                              });\r\n-                                            }}\r\n-                                  >\r\n-                                    <Plus className=\"h-4 w-4 mr-2\" />\r\n-                                            Add Media\r\n-                                  </Button>\r\n-                                </div>\r\n-                                      </div>\r\n-                                    </CardContent>\r\n-                                  )}\r\n-                                </Card>\r\n-                              ))}\r\n-\r\n-                              {/* Add Activity Button */}\r\n-                              <Button\r\n-                                onClick={handleAddActivity}\r\n-                                className=\"w-full\"\r\n-                              >\r\n-                                <Plus className=\"h-4 w-4 mr-2\" />\r\n-                                Add Activity\r\n-                              </Button>\r\n-                          </TabsContent>\r\n-                        </Tabs>\r\n-                        </div>\r\n-                )}\r\n-\r\n-                    {/* Floating Save Button */}\r\n-                    <div className=\"fixed bottom-8 right-8 flex items-center gap-4\">\r\n-                      {saveProgress !== 'idle' && (\r\n-                        <div className={cn(\r\n-                          \"flex items-center gap-2 rounded-lg px-4 py-2 shadow-lg\",\r\n-                          {\r\n-                            \"bg-background border\": saveProgress === 'saving',\r\n-                            \"bg-green-500 text-white\": saveProgress === 'saved',\r\n-                            \"bg-destructive text-destructive-foreground\": saveProgress === 'error'\r\n-                          }\r\n-                        )}>\r\n-                          {saveProgress === 'saving' && (\r\n-                            <>\r\n-                              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n-                              <span className=\"text-sm\">Saving changes...</span>\r\n-                            </>\r\n-                          )}\r\n-                          {saveProgress === 'saved' && (\r\n-                            <>\r\n-                              <Check className=\"h-4 w-4\" />\r\n-                              <span className=\"text-sm\">Changes saved</span>\r\n-                            </>\r\n-                          )}\r\n-                          {saveProgress === 'error' && (\r\n-                            <>\r\n-                              <X className=\"h-4 w-4\" />\r\n-                              <span className=\"text-sm\">Error saving changes</span>\r\n-                            </>\r\n-                          )}\r\n-                        </div>\r\n-                      )}\r\n-                      <Button\r\n-                        onClick={handleSaveLesson}\r\n-                        disabled={saveProgress === 'saving'}\r\n-                        className=\"shadow-lg\"\r\n-                      >\r\n-                        {saveProgress === 'saving' ? (\r\n-                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\r\n-                        ) : (\r\n-                          <Save className=\"h-4 w-4 mr-2\" />\r\n-                        )}\r\n-                        {saveProgress === 'saving' ? 'Saving...' : 'Save Lesson'}\r\n-                      </Button>\r\n-                    </div>\r\n-                  </>\r\n-            )}\r\n-    </div>\r\n-    \r\n-\r\n-      {/* Floating Save Button */}\r\n-      {selectedSubtopicId && currentLessonId && (\r\n-          <div className=\"fixed bottom-4 right-4 flex flex-col gap-2\">\r\n-            <TooltipProvider>\r\n-              <Tooltip>\r\n-                <TooltipTrigger asChild>\r\n-                  <Button\r\n-                    size=\"icon\"\r\n-                    className=\"rounded-full h-12 w-12 shadow-lg\"\r\n-                    onClick={handleSaveLesson}\r\n-                    disabled={!selectedSubtopicId || !lessonTitle || questions.length === 0}\r\n-                  >\r\n-                    <Save className=\"h-6 w-6\" />\r\n-                  </Button>\r\n-                </TooltipTrigger>\r\n-                <TooltipContent>\r\n-                  <p>Save Lesson (Ctrl+S)</p>\r\n-                </TooltipContent>\r\n-              </Tooltip>\r\n-            </TooltipProvider>\r\n-          </div>\r\n-        )}\r\n-        <SaveFeedback />\r\n-\r\n-        {/* Add Grade Modal - do not delete */}\r\n-        {/* {modalState.showAddGrade && (\r\n-          <Dialog \r\n-            open={modalState.showAddGrade} \r\n-            onOpenChange={(open) => handleModalStateChange('showAddGrade', open)}\r\n-          >\r\n-            <DialogContent \r\n-              className=\"sm:max-w-[425px]\"\r\n-              onEscapeKeyDown={cleanupModalState}\r\n-              onPointerDownOutside={cleanupModalState}\r\n-            >\r\n-              <DialogHeader>\r\n-                <DialogTitle>Add New Grade</DialogTitle>\r\n-                <DialogDescription>Enter the details for the new grade.</DialogDescription>\r\n-              </DialogHeader>\r\n-              <div className=\"space-y-4 py-4\">\r\n-                <div className=\"space-y-2\">\r\n-                  <Label htmlFor=\"grade-name\">Grade Name</Label>\r\n-                  <Input\r\n-                    id=\"grade-name\"\r\n-                    value={newItemData.name}\r\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n-                    placeholder=\"Enter grade name\"\r\n-                  />\r\n-      </div>\r\n-              </div>\r\n-              <DialogFooter>\r\n-                <Button variant=\"outline\" onClick={() => {\r\n-                  setModalState({ ...modalState, showAddGrade: false });\r\n-                  setNewItemData({ name: '', description: '' });\r\n-                }}>\r\n-                  Cancel\r\n-                </Button>\r\n-                <Button onClick={handleCreateGrade} disabled={!newItemData.name}>Create Grade</Button>\r\n-              </DialogFooter>\r\n-            </DialogContent>\r\n-          </Dialog>\r\n-        )} */}\r\n-\r\n-        {/* Add Topic Modal */}\r\n-        {modalState.showAddTopic && (\r\n-          <Dialog \r\n-            open={modalState.showAddTopic} \r\n-            onOpenChange={(open) => handleModalStateChange('showAddTopic', open)}\r\n-          >\r\n-            <DialogContent \r\n-              className=\"sm:max-w-[425px]\"\r\n-              onEscapeKeyDown={cleanupModalState}\r\n-              onPointerDownOutside={cleanupModalState}\r\n-            >\r\n-              <DialogHeader>\r\n-                <DialogTitle>Add New Topic</DialogTitle>\r\n-                <DialogDescription>Enter the details for the new topic.</DialogDescription>\r\n-              </DialogHeader>\r\n-              <div className=\"space-y-4 py-4\">\r\n-                <div className=\"space-y-2\">\r\n-                  <Label htmlFor=\"topic-name\">Topic Name</Label>\r\n-                  <Input\r\n-                    id=\"topic-name\"\r\n-                    value={newItemData.name}\r\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n-                    placeholder=\"Enter topic name\"\r\n-                  />\r\n-                </div>\r\n-              </div>\r\n-              <DialogFooter>\r\n-                <Button variant=\"outline\" onClick={() => {\r\n-                  setModalState({ ...modalState, showAddTopic: false });\r\n-                  setNewItemData({ name: '', description: '' });\r\n-                }}>\r\n-                  Cancel\r\n-                </Button>\r\n-                <Button onClick={handleCreateTopic} disabled={!newItemData.name}>Create Topic</Button>\r\n-              </DialogFooter>\r\n-            </DialogContent>\r\n-          </Dialog>\r\n-        )}\r\n-\r\n-        {/* Add Subtopic Modal */}\r\n-        {modalState.showAddSubtopic && (\r\n-          <Dialog \r\n-            open={modalState.showAddSubtopic} \r\n-            onOpenChange={(open) => handleModalStateChange('showAddSubtopic', open)}\r\n-          >\r\n-            <DialogContent \r\n-              className=\"sm:max-w-[425px]\"\r\n-              onEscapeKeyDown={cleanupModalState}\r\n-              onPointerDownOutside={cleanupModalState}\r\n-            >\r\n-              <DialogHeader>\r\n-                <DialogTitle>Add New Subtopic</DialogTitle>\r\n-                <DialogDescription>Enter the details for the new subtopic.</DialogDescription>\r\n-              </DialogHeader>\r\n-              <div className=\"space-y-4 py-4\">\r\n-                <div className=\"space-y-2\">\r\n-                  <Label htmlFor=\"subtopic-name\">Subtopic Name</Label>\r\n-                  <Input\r\n-                    id=\"subtopic-name\"\r\n-                    value={newItemData.name}\r\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n-                    placeholder=\"Enter subtopic name\"\r\n-                  />\r\n-                </div>\r\n-              </div>\r\n-              <DialogFooter>\r\n-                <Button variant=\"outline\" onClick={() => {\r\n-                  setModalState({ ...modalState, showAddSubtopic: false });\r\n-                  setNewItemData({ name: '', description: '' });\r\n-                }}>\r\n-                  Cancel\r\n-                </Button>\r\n-                <Button onClick={() => handleCreateSubtopic({ title: newItemData.name })} disabled={!newItemData.name}>Create Subtopic</Button>\r\n-              </DialogFooter>\r\n-            </DialogContent>\r\n-          </Dialog>\r\n-        )}\r\n-\r\n-        {/* Add Lesson Modal */}\r\n-        {modalState.showAddLesson && (\r\n-          <Dialog \r\n-            open={modalState.showAddLesson} \r\n-            onOpenChange={(open) => handleModalStateChange('showAddLesson', open)}\r\n-          >\r\n-            <DialogContent \r\n-              className=\"sm:max-w-[425px]\"\r\n-              onEscapeKeyDown={cleanupModalState}\r\n-              onPointerDownOutside={cleanupModalState}\r\n-            >\r\n-              <DialogHeader>\r\n-                <DialogTitle>Add New Lesson</DialogTitle>\r\n-                <DialogDescription>Enter the details for the new lesson.</DialogDescription>\r\n-              </DialogHeader>\r\n-              <div className=\"space-y-4 py-4\">\r\n-                <div className=\"space-y-2\">\r\n-                  <Label htmlFor=\"lesson-name\">Lesson Title</Label>\r\n-                  <Input\r\n-                    id=\"lesson-name\"\r\n-                    value={newItemData.name}\r\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n-                    placeholder=\"Enter lesson title\"\r\n-                  />\r\n-                </div>\r\n-              </div>\r\n-              <DialogFooter>\r\n-                <Button variant=\"outline\" onClick={() => {\r\n-                  setModalState({ ...modalState, showAddLesson: false });\r\n-                  setNewItemData({ name: '', description: '' });\r\n-                }}>\r\n-                  Cancel\r\n-                </Button>\r\n-                <Button onClick={handleCreateLesson} disabled={!newItemData.name}>Create Lesson</Button>\r\n-              </DialogFooter>\r\n-            </DialogContent>\r\n-          </Dialog>\r\n-        )}\r\n-      </div>\r\n-      <Toaster />\r\n-      </div>\r\n-  );\r\n+\"use client\";\n+\n+import { useState, useCallback, useEffect, useRef } from 'react';\n+import { toast } from 'sonner';\n+import { Toaster } from 'sonner';\n+import Link from 'next/link';\n+import {  Activity as ActivityIcon,  ArrowLeft,  BookOpen,  ChevronDown,  ChevronRight,  Check,  Edit,  Eye,  EyeOff,  HelpCircle,  Layers,  List,  MessageSquare,  Plus,  Save,  Trash as Trash2, X, Pencil, Lock, Unlock, RefreshCw, Clock, Bell, Moon, GraduationCap, MoreHorizontal, Loader2 } from 'lucide-react';\n+import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\n+import { Badge } from '@/components/ui/badge';\n+import { Button } from '@/components/ui/button';\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\n+import { Input } from '@/components/ui/input';\n+import { Label } from '@/components/ui/label';\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\n+import { Textarea } from '@/components/ui/textarea';\n+import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\n+import { cn } from '@/lib/utils';\n+import { API_BASE_URL, QUESTION_TYPES, isQuestionType } from './constants';\n+import { ExercisePrompt, Lesson } from './types';\n+import { QuestionFormProps, ExercisePromptCardProps, Activity, Grade, Topic, Subtopic as SubTopic } from './types';\n+import { QuestionForm } from './components/question-form';\n+import { ExercisePromptCard } from './components/exercise-prompt-card';\n+import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\n+import { supabase } from '@/lib/supabase';\n+import { useContentStore } from '@/lib/content/store';\n+import { contentService } from '@/lib/content/ContentService';\n+import { MediaPreview } from '@/components/ui/media-preview';\n+import { QuestionTypeSelect } from './components/question-type-select';\n+import { RichTextEditor } from '@/components/ui/rich-text-editor';\n+import {\n+  AlertDialog,\n+  AlertDialogAction,\n+  AlertDialogCancel,\n+  AlertDialogContent,\n+  AlertDialogDescription,\n+  AlertDialogFooter,\n+  AlertDialogHeader,\n+  AlertDialogTitle,\n+  AlertDialogTrigger,\n+} from \"@/components/ui/alert-dialog\";\n+import { debounce, isNull } from 'lodash';\n+import { PostgrestError } from '@supabase/supabase-js';\n+import { Question as ContentQuestion } from './types';  // Import the specific type\n+import { Trash } from \"lucide-react\";\n+import { AnimatePresence, motion } from 'framer-motion';\n+\n+\n+// Update the API endpoint to match your backend route\n+const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\n+\n+interface QuestionTypeSelectProps {\n+  value: string;\n+  onValueChange: (value: string) => void;\n+}\n+\n+// Add metadata type\n+interface LessonMetadata {\n+  lastEdited?: string;\n+  version?: number;\n+  tags?: string[];\n+  status?: 'draft' | 'published';\n+  authorId?: string;\n+  duration?: number;\n+  transcript?: string;\n+}\n+\n+type ContentType = 'html' | 'markdown' | 'rich-text' | 'text' | 'json';\n+\n+interface LessonContent {\n+  id: string;\n+  lesson_id: string;\n+  content: any[];\n+  metadata: {\n+    lastEdited?: string;\n+    version?: number;\n+    status?: 'draft' | 'published';\n+    authorId?: string;\n+  };\n+  content_type: string;\n+  order_index: number;\n+  updated_at: string;\n+  user_id: string;\n+}\n+\n+interface InlineEditProps {\n+  value: string;\n+  onSave: (value: string) => void;\n+  isEditing: boolean;\n+  setIsEditing: (value: boolean) => void;\n+  placeholder?: string;\n+  className?: string;\n+}\n+\n+// Add validation interface\n+interface QuestionValidation {\n+  isValid: boolean;\n+  message: string;\n+}\n+\n+// Add this type validation helper\n+const getQuestionTypeFields = (type: string) => {\n+  switch (type) {\n+    case 'multipleChoice':\n+      return {\n+        required: ['prompt', 'options', 'correctAnswer'],\n+        fields: {\n+          prompt: '',\n+          options: [],\n+          correctAnswer: '',\n+          teacherScript: '',\n+          explanation: ''\n+        }\n+      };\n+    case 'fillInBlank':\n+      return {\n+        required: ['prompt', 'blanks'],\n+        fields: {\n+          prompt: '',\n+          blanks: [],\n+          teacherScript: '',\n+          explanation: ''\n+        }\n+      };\n+    case 'trueFalse':\n+      return {\n+        required: ['prompt', 'correctAnswer'],\n+        fields: {\n+          prompt: '',\n+          correctAnswer: null,\n+          teacherScript: '',\n+          explanation: ''\n+        }\n+      };\n+    case 'matching':\n+      return {\n+        required: ['prompt', 'pairs'],\n+        fields: {\n+          prompt: '',\n+          pairs: [],\n+          teacherScript: '',\n+          explanation: ''\n+        }\n+      };\n+    case 'ordering':\n+      return {\n+        required: ['prompt', 'items'],\n+        fields: {\n+          prompt: '',\n+          items: [],\n+          correctOrder: [],\n+          teacherScript: '',\n+          explanation: ''\n+        }\n+      };\n+    case 'shortAnswer':\n+      return {\n+        required: ['prompt', 'sampleAnswer'],\n+        fields: {\n+          prompt: '',\n+          sampleAnswer: '',\n+          teacherScript: '',\n+          explanation: '',\n+          keywords: []\n+        }\n+      };\n+    case 'speaking':\n+      return {\n+        required: ['prompt', 'sampleAnswer'],\n+        fields: {\n+          prompt: '',\n+          sampleAnswer: '',\n+          teacherScript: '',\n+          audioPrompt: '',\n+          pronunciation: ''\n+        }\n+      };\n+    case 'listening':\n+      return {\n+        required: ['prompt', 'audioContent'],\n+        fields: {\n+          prompt: '',\n+          audioContent: '',\n+          transcript: '',\n+          teacherScript: '',\n+          comprehensionQuestions: []\n+        }\n+      };\n+    case 'listenAndRepeat':\n+      return {\n+        required: ['prompt', 'audioContent'],\n+        fields: {\n+          prompt: '',\n+          audioContent: '',\n+          targetPhrase: '',\n+          teacherScript: '',\n+          pronunciation: ''\n+        }\n+      };\n+    default:\n+      return {\n+        required: ['prompt'],\n+        fields: {\n+          prompt: '',\n+          teacherScript: ''\n+        }\n+      };\n+  }\n+}\n+\n+interface SaveStatus {\n+  id: string;\n+  status: 'draft' | 'saved' | 'saving' | 'error';\n+  lastSaved?: string;\n+}\n+\n+interface Question {\n+  id: string;\n+  type: string;\n+  lesson_id: string;\n+  title: string;\n+  content: string;\n+  metadata: Record<string, any>;\n+  data: Record<string, any>; // This allows dynamic field access\n+  correct_answer: string;\n+  exercisePrompts: ExercisePrompt[];\n+  isDraft?: boolean;\n+}\n+\n+// Add at the top of the file with other type definitions\n+type QuestionType = keyof typeof QUESTION_TYPES;\n+\n+// Add this type guard function\n+const isValidQuestionType = (type: string): type is QuestionType => {\n+  return type in QUESTION_TYPES;\n+};\n+\n+// Update handleAddQuestion\n+\n+\n+// Update validateQuestion\n+const validateQuestion = (question: Question): QuestionValidation => {\n+  const { required } = getQuestionTypeFields(question.type);\n+  const missingFields = required.filter(field => {\n+    const value = question.data?.[field];\n+    return !value || \n+      (Array.isArray(value) && value.length === 0) || \n+      (typeof value === 'string' && !value.trim());\n+  });\n+\n+  if (missingFields.length > 0) {\n+    return {\n+      isValid: false,\n+      message: `Missing required fields: ${missingFields.join(', ')}`\n+    };\n+  }\n+\n+  return { isValid: true, message: '' };\n+};\n+\n+// Add proper type for question data\n+interface QuestionData {\n+  id?: string;\n+  content?: string;\n+  type?: string;\n+  data?: {\n+    prompt?: string;\n+    teacher_script?: string;\n+    followup_prompt?: string[];\n+    sample_answer?: string;\n+    answer?: string;\n+  } | null;\n+  prompt: string;\n+  teacherScript: string;\n+  followup_prompt: string[];\n+  answer?: string;\n+  correct_answer?: string;\n+}\n+\n+// In your component where you handle questions\n+const handleQuestionData = (question: QuestionData) => {\n+  return {\n+    ...question,\n+    data: {\n+      prompt: question?.data?.prompt || '',\n+      teacher_script: question?.data?.teacher_script || '',\n+      followup_prompt: question?.data?.followup_prompt || [],\n+      sample_answer: question?.data?.sample_answer || undefined,  // Convert null to undefined\n+      answer: question?.data?.answer || undefined  // Convert null to undefined\n+    } as const,\n+    sampleAnswer: question?.correct_answer || ''\n+  };\n+};\n+\n+export default function LessonManagementPage() {\n+  // State declarations\n+  \n+  const [selectedGradeId, setSelectedGradeId] = useState<string | null>(null);\n+  const [selectedTopicId, setSelectedTopicId] = useState<string | null>(null);\n+  const [selectedSubtopicId, setSelectedSubtopicId] = useState<string | null>(null);\n+  const [lessonTitle, setLessonTitle] = useState<string>('');\n+  const [currentLessonId, setCurrentLessonId] = useState<string | null>(null);\n+  const [questions, setQuestions] = useState<Question[]>([]);\n+  const [saveProgress, setSaveProgress] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');\n+  const [activities, setActivities] = useState<Activity[]>([]);\n+  const [localBuffer, setLocalBuffer] = useState<{ timestamp: number; data: any } | null>(null);\n+  const [lastSavedToServer, setLastSavedToServer] = useState<number>(Date.now());\n+  const [selectedQuestionType, setSelectedQuestionType] = useState<string>('');\n+  const [editingQuestionIndex, setEditingQuestionIndex] = useState<number | null>(null);\n+  const [showHelpTips, setShowHelpTips] = useState(true);\n+  const [isNavigating, setIsNavigating] = useState(false);\n+  const [lessons, setLessons] = useState<Lesson[]>([]);\n+  const [grades, setGrades] = useState<Grade[]>([]);\n+  const [topics, setTopics] = useState<Topic[]>([]);\n+  const [subtopics, setSubtopics] = useState<SubTopic[]>([]);\n+  const [contentHeading, setContentHeading] = useState<string>('');\n+    // Add with your other state declarations\n+  const [isContentExpanded, setIsContentExpanded] = useState<boolean>(false);\n+  const [modalState, setModalState] = useState({\n+    showAddGrade: false,\n+    showAddTopic: false,\n+    showAddSubtopic: false,\n+    showAddLesson: false\n+  });\n+  const [isViewMode, setIsViewMode] = useState<boolean>(true);\n+  const [expandedGrade, setExpandedGrade] = useState<string | null>(null);\n+  const [expandedTopic, setExpandedTopic] = useState<string | null>(null);\n+  const [expandedSubtopic, setExpandedSubtopic] = useState<string | null>(null);\n+  const [expandedQuestion, setExpandedQuestion] = useState<number | null>(null);\n+  const [expandedActivity, setExpandedActivity] = useState<number | null>(null);\n+  const [newItemData, setNewItemData] = useState({\n+    name: '',\n+    description: ''\n+  });\n+  const [lessonContent, setLessonContent] = useState<string>('');\n+  const [isContentEditorOpen, setIsContentEditorOpen] = useState(false);\n+  const [isEditingTitle, setIsEditingTitle] = useState<boolean>(false);\n+  const [isEditingHeading, setIsEditingHeading] = useState<boolean>(false);\n+  const [isEditingDescription, setIsEditingDescription] = useState<boolean>(false);\n+  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\n+  const [isSidebarLocked, setIsSidebarLocked] = useState(true);\n+  const [alertDialogState, setAlertDialogState] = useState<{\n+    isOpen: boolean;\n+    title: string;\n+    message: string;\n+    onConfirm: (value?: unknown) => void;\n+  }>({\n+    isOpen: false,\n+    title: '',\n+    message: '',\n+    onConfirm: () => {}\n+  });\n+\n+  const { \n+    selectedGrade,\n+    setSelectedGrade,\n+    selectedTopic,\n+    setSelectedTopic,\n+    selectedSubtopic,\n+    setSelectedSubtopic,\n+    selectedLesson,\n+    setSelectedLesson\n+  } = useContentStore();\n+\n+  // Add new state for tracking save status\n+  interface SaveStatus {\n+    id: string;\n+    status: 'draft' | 'saved' | 'saving' | 'error' | 'draft';\n+    lastSaved?: string;\n+  }\n+\n+  const [questionSaveStatuses, setQuestionSaveStatuses] = useState<Array<{\n+    id: string;\n+    status: 'idle' | 'saving' | 'saved' | 'error' | 'draft';\n+  }>>([]);\n+  const [promptSaveStatuses, setPromptSaveStatuses] = useState<SaveStatus[]>([]);\n+\n+  // Add this state to track dropdown state\n+  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n+\n+  // Add these states\n+  const [isLoadingSubtopics, setIsLoadingSubtopics] = useState(false);\n+  const [isLoadingLessons, setIsLoadingLessons] = useState(false);\n+\n+  // Event handlers\n+  const handleQuestionTypeChange = useCallback((type: string) => {\n+    if (isQuestionType(type)) {\n+      setSelectedQuestionType(type);\n+    }\n+  }, []);\n+\n+  const handleAddQuestion = useCallback(() => {\n+    if (!selectedQuestionType || !isQuestionType(selectedQuestionType)) return;\n+\n+    const defaultData = QUESTION_TYPES[selectedQuestionType].defaultData;\n+    const newQuestion: Question = {\n+      id: crypto.randomUUID(),\n+      type: selectedQuestionType,\n+      //data: {},\n+      title: 'New Question',\n+      content: '',\n+      lesson_id: currentLessonId || '',\n+      metadata: {},\n+      data: {\n+        ...defaultData,\n+        prompt: '',\n+        teacher_script: '',\n+        followup_prompt: [],\n+        sample_answer: ''\n+      },\n+      correct_answer: '',\n+      exercisePrompts: [],\n+      isDraft: true\n+    };\n+\n+    setQuestions(prev => [...prev, newQuestion]);\n+    setQuestionSaveStatuses(prev => [\n+      ...prev,\n+      { id: newQuestion.id, status: 'draft' }\n+    ]);\n+    setSelectedQuestionType('');\n+  }, [selectedQuestionType, currentLessonId]);\n+\n+  const handleRemoveQuestion = async (index: number) => {\n+    try {\n+      const questionToDelete = questions[index];\n+      \n+      // Delete related exercise prompts first\n+      const { error: promptError } = await supabase\n+        .from('exercise_prompts')\n+        .delete()\n+        .eq('question_id', questionToDelete.id);\n+\n+      if (promptError) throw promptError;\n+\n+      // Then delete the question\n+      const { error: questionError } = await supabase\n+        .from('questions')\n+        .delete()\n+        .eq('id', questionToDelete.id);\n+\n+      if (questionError) throw questionError;\n+\n+      // Update local state\n+      const newQuestions = questions.filter((_, i) => i !== index);\n+      setQuestions(newQuestions);\n+      \n+      toast.success('Question and related prompts deleted successfully');\n+    } catch (error) {\n+      console.error('Error deleting question:', error);\n+      toast.error('Failed to delete question and prompts');\n+    }\n+  };\n+\n+  const handleUpdateQuestion = useCallback(async (index: number, updatedQuestion: Question) => {\n+    const newQuestions = [...questions];\n+    newQuestions[index] = updatedQuestion;\n+    setQuestions(newQuestions);\n+    setQuestionSaveStatuses(prev => prev.map((status, i) => \n+      i === index ? { ...status, status: 'draft' } : status\n+    ));\n+  }, [questions]);\n+\n+  const handleAddExercisePrompt = useCallback((questionIndex: number) => {\n+    setQuestions(prev => prev.map((question, i) => {\n+      if (i === questionIndex) {\n+        return {\n+          ...question,\n+          exercisePrompts: [\n+            ...question.exercisePrompts,\n+            {\n+              id: crypto.randomUUID(),\n+              text: '',\n+              media: '',\n+              type: 'image',\n+              narration: 'Your turn',\n+              saytext: 'Say: ',\n+              metadata: {\n+                estimatedTime: 0\n+              },\n+              created_at: new Date().toISOString(),\n+              updated_at: new Date().toISOString()\n+            }\n+          ]\n+        };\n+      }\n+      return question;\n+    }));\n+  }, []);\n+\n+  const handleRemoveExercisePrompt = useCallback((questionIndex: number, promptIndex: number) => {\n+    setQuestions(prev => prev.map((question, i) => {\n+      if (i === questionIndex) {\n+        return {\n+          ...question,\n+          exercisePrompts: question.exercisePrompts.filter((_, j) => j !== promptIndex)\n+        };\n+      }\n+      return question;\n+    }));\n+  }, []);\n+\n+  const handleExercisePromptChange = useCallback(async (\n+    questionIndex: number,\n+    promptIndex: number,\n+    updatedPrompt: ExercisePrompt\n+  ) => {\n+    try {\n+      const promptUpdate = {\n+        id: updatedPrompt.id,\n+        question_id: updatedPrompt.question_id,\n+        text: updatedPrompt.text,\n+        type: updatedPrompt.type,\n+        narration: updatedPrompt.narration,\n+        saytext: updatedPrompt.saytext,\n+        media: updatedPrompt.media,\n+        // Remove order_index as it's not in schema\n+        created_at: new Date().toISOString()\n+      };\n+\n+      const { error: promptError } = await supabase\n+        .from('exercise_prompts')\n+        .upsert(promptUpdate)\n+        .select();\n+\n+      if (promptError) throw promptError;\n+\n+      // Update local state\n+      setQuestions(prev => prev.map((question, i) => {\n+        if (i === questionIndex) {\n+          const newPrompts = [...question.exercisePrompts];\n+          newPrompts[promptIndex] = updatedPrompt;\n+          return { ...question, exercisePrompts: newPrompts };\n+        }\n+        return question;\n+      }));\n+\n+    } catch (error) {\n+      console.error('Error saving prompt:', error);\n+      toast.error('Failed to save prompt');\n+    }\n+  }, []);\n+\n+  const handleAddActivity = useCallback(() => {\n+    const newActivity: Activity = {\n+      id: crypto.randomUUID(),\n+      lesson_id: currentLessonId || '',\n+      created_at: new Date().toISOString(),\n+      type: 'practice',\n+      title: '',\n+      name: '',\n+      instructions: '',\n+      media: [],\n+      data: {\n+        prompt: '',\n+        teacherScript: '',\n+        media: []\n+      }\n+    };\n+    setActivities(prev => [...prev, newActivity]);\n+  }, [currentLessonId]);\n+\n+  const handleUpdateActivity = useCallback((index: number, updatedActivity: Activity) => {\n+    setActivities(prev => prev.map((activity, i) => i === index ? updatedActivity : activity));\n+  }, []);\n+\n+  const handleRemoveActivity = useCallback((index: number) => {\n+    setActivities(prev => prev.filter((_, i) => i !== index));\n+  }, []);\n+\n+  const handleExercisePromptUpdate = useCallback((questionIndex: number, promptIndex: number, updatedPrompt: ExercisePrompt) => {\n+    const updatedQuestions = [...questions];\n+    updatedQuestions[questionIndex].exercisePrompts[promptIndex] = updatedPrompt;\n+    handleUpdateQuestion(questionIndex, updatedQuestions[questionIndex]);\n+  }, [questions, handleUpdateQuestion]);\n+\n+  const handleQuestionDataChange = useCallback((questionIndex: number, field: string, value: string) => {\n+    setQuestions(prev => prev.map((q, i) => \n+      i === questionIndex \n+        ? { \n+            ...q, \n+            data: { \n+              prompt: q.data?.prompt || '',\n+              teacherScript: q.data?.teacherScript || '',\n+              ...q.data,\n+              [field]: value \n+            } \n+          }\n+        : q\n+    ));\n+  }, []);\n+\n+  const [isSaving, setIsSaving] = useState(false);\n+\n+  const handleSaveLesson = async () => {\n+    try {\n+      if (!currentLessonId || !selectedSubtopicId) {\n+        toast.error('Please select a subtopic and lesson first');\n+        return;\n+      }\n+\n+      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\n+      if (sessionError) throw sessionError;\n+      \n+      if (!session?.user) {\n+        toast.error('Please sign in to save lessons');\n+        return;\n+      }\n+\n+      // Get user's role from session\n+      const userRole = session.user.user_metadata?.role;\n+      console.log('Current user role:', userRole);\n+      console.log('📝 Saving content heading:', {\n+        contentHeading,\n+        currentLessonId,\n+        selectedSubtopicId,\n+        timestamp: new Date().toISOString()\n+      });\n+\n+      // Create metadata object\n+      const lessonMetadata = {\n+        lastEdited: new Date().toISOString(),\n+        version: 1,\n+        status: 'draft' \n+      };\n+\n+      // Complete lesson data with all fields\n+      const lessonData = {\n+        id: currentLessonId,\n+        title: lessonTitle,\n+        content: lessonContent,\n+        metadata: lessonMetadata, // Supabase will automatically handle JSON conversion\n+        content_type: 'html',\n+        lesson_type: 'lesson',\n+        grade_id: selectedGradeId,\n+        topic_id: selectedTopicId,\n+        subtopic_id: selectedSubtopicId,\n+        user_id: session.user.id,\n+        updated_at: new Date().toISOString(),\n+        role: userRole, // Include role in the payload\n+        description: '',\n+        prerequisites: [],\n+        media_type: 'image',\n+        media_url: '',\n+        contentheading: contentHeading || ''\n+      };\n+\n+      console.log('📦 Data being sent to Supabase:', lessonData);\n+\n+      // Save lesson with all fields\n+      const { data, error: lessonError } = await supabase\n+        .from('lessons')\n+        .upsert(lessonData, { \n+          onConflict: 'id'\n+        })\n+        .select();\n+\n+      if (lessonError) throw lessonError;\n+\n+      // 2. Save lesson content\n+      const { data: existingContent } = await supabase\n+        .from('lesson_content')\n+        .select('id')\n+        .eq('lesson_id', currentLessonId)\n+        .single();\n+\n+      const contentMetadata = {\n+        lastEdited: new Date().toISOString(),\n+        version: 1,\n+        status: 'draft'\n+      };\n+\n+      const contentUpdate = {\n+        id: existingContent?.id || crypto.randomUUID(),\n+        lesson_id: currentLessonId,\n+        content: [lessonContent],\n+        metadata: contentMetadata, // Supabase will automatically handle JSON conversion\n+        content_type: 'html',\n+        user_id: session.user.id,\n+        updated_at: new Date().toISOString(),\n+        created_at: new Date().toISOString()\n+      };\n+\n+      const { error: contentError } = await supabase\n+        .from('lesson_content')\n+        .upsert(contentUpdate, { onConflict: 'id' });\n+\n+      if (contentError) throw contentError;\n+\n+      // 3. Save questions\n+      for (const question of questions) {\n+        const questionData = {\n+          id: question.id,\n+          lesson_id: currentLessonId,\n+          type: question.type,\n+          title: question.title,\n+          metadata: question.metadata,\n+          data: question.data,\n+          updated_at: new Date().toISOString(),\n+          user_id: session.user.id\n+        };\n+\n+        const { error: questionError } = await supabase\n+          .from('questions')\n+          .upsert(questionData, { onConflict: 'id' });\n+\n+        if (questionError) throw questionError;\n+\n+        //4. Save exercise prompts for this question\n+        if (question.exercisePrompts) {\n+          for (const prompt of question.exercisePrompts) {\n+            const promptData = {\n+              id: prompt.id,\n+              question_id: question.id,\n+              text: prompt.text,\n+              media: prompt.media,\n+              type: prompt.type,\n+              narration: prompt.narration,\n+              saytext: prompt.saytext,\n+              user_id: session.user.id,\n+              updated_at: new Date().toISOString()\n+            };\n+\n+            const { error: promptError } = await supabase\n+              .from('exercise_prompts')\n+              .upsert(promptData, { onConflict: 'id' });\n+\n+            if (promptError) throw promptError;\n+          }\n+        }\n+      }\n+\n+      // 5. Save activities\n+      if (activities.length > 0) {\n+        const activitiesData = activities.map(activity => ({\n+          id: activity.id,\n+          lesson_id: currentLessonId,\n+          type: activity.type,\n+          title: activity.title,\n+          name: activity.name,\n+          instructions: activity.instructions,\n+          media: activity.media,\n+          data: activity.data,\n+          created_at: new Date().toISOString()\n+        }));\n+\n+        const { error: activitiesError } = await supabase\n+          .from('activities')\n+          .upsert(activitiesData, { onConflict: 'id' });\n+\n+        if (activitiesError) throw activitiesError;\n+      }\n+\n+      // After successful save\n+      console.log('✅ Content heading saved successfully:', {\n+        contentHeading,\n+        lessonId: currentLessonId,\n+        timestamp: new Date().toISOString()\n+      });\n+\n+      toast.success('Lesson saved successfully');\n+    } catch (err) {\n+      const error = err as PostgrestError;\n+      console.error('❌ Error saving content heading:', {\n+        error: error.message,\n+        contentHeading,\n+        lessonContent,\n+        lessonId: currentLessonId,\n+        timestamp: new Date().toISOString()\n+      });\n+      toast.error(`Failed to save lesson: ${error.message}`);\n+\n+\n+    }\n+  };\n+\n+  const handleSaveQuestion = async (question: Question, index: number) => {\n+    const loadingToast = toast.loading(`Saving question ${index + 1}...`);\n+    \n+    try {\n+      const { data: { session } } = await supabase.auth.getSession();\n+      if (!session?.user) {\n+        toast.error('Please sign in to save question', { id: loadingToast });\n+        return;\n+      }\n+\n+      // Save question\n+      const questionData = {\n+        id: question.id,\n+        lesson_id: currentLessonId,\n+        type: question.type,\n+        title: question.title,\n+        metadata: question.metadata,\n+        data: {\n+          prompt: question.data?.prompt ?? '',\n+          teacherScript: question.data?.teacherScript ?? '',\n+          followup_prompt: question.data?.followup_prompt ?? [],\n+          sampleAnswer: question.data?.sampleAnswer || undefined,  // Convert null to undefined\n+          answer: question.data?.answer || undefined  // Convert null to undefined\n+        } as const,\n+        user_id: session.user.id,\n+        updated_at: new Date().toISOString()\n+      };\n+\n+      const { error: questionError } = await supabase\n+        .from('questions')\n+        .upsert(questionData, { onConflict: 'id' });\n+\n+      if (questionError) throw questionError;\n+\n+      // Save exercise prompts if they exist\n+      if (question.exercisePrompts?.length) {\n+        for (const prompt of question.exercisePrompts) {\n+          const promptData = {\n+            id: prompt.id,\n+            question_id: question.id,\n+            text: prompt.text,\n+            type: prompt.type,\n+            narration: prompt.narration,\n+            saytext: prompt.saytext,\n+            media: prompt.media,\n+            user_id: session.user.id,\n+            updated_at: new Date().toISOString()\n+          };\n+\n+          const { error: promptError } = await supabase\n+            .from('exercise_prompts')\n+            .upsert(promptData, { onConflict: 'id' });\n+\n+          if (promptError) throw promptError;\n+        }\n+      }\n+\n+      toast.success(`Question ${index + 1} saved successfully`, { id: loadingToast });\n+    } catch (error) {\n+      console.error('Error saving question:', error);\n+      toast.error(`Failed to save question ${index + 1}`, { id: loadingToast });\n+    }\n+  };\n+\n+  const handleSaveActivity = async (activity: Activity) => {\n+    try {\n+      await contentService.saveActivity(activity);\n+      toast.success('Activity saved');\n+    } catch (error) {\n+      console.error('Failed to save activity:', error);\n+      toast.error('Failed to save activity');\n+    }\n+  };\n+\n+  // Effects\n+  useEffect(() => {\n+    const fetchGrades = async () => {\n+      try {\n+        const { data, error } = await supabase\n+          .from('grades')\n+          .select('*')\n+          .order('name');\n+\n+        if (error) {\n+          console.error('Supabase error:', error);\n+          throw error;\n+        }\n+\n+        if (!data) {\n+          throw new Error('No data returned from Supabase');\n+        }\n+\n+        // Map the grades to match your interface\n+        const validGrades = data.map((grade: any) => ({\n+          _id: grade.id,\n+          id: grade.id,\n+          name: grade.name,\n+          level: grade.level || 0,  // Add default value if not provided\n+          orderIndex: grade.order_index || 0,  // Add default value if not provided\n+          topics: []\n+        }));\n+        \n+        setGrades(validGrades);\n+      } catch (error) {\n+        console.error('Error fetching grades:', error);\n+        toast.error('Failed to fetch grades');\n+      }\n+    };\n+\n+    fetchGrades();\n+  }, []);\n+\n+  // Topic Selection\n+  useEffect(() => {\n+    const fetchTopics = async () => {\n+      if (!selectedGradeId) return;\n+      \n+      try {\n+        const { data, error } = await supabase\n+          .from('topics')\n+          .select('*')\n+          .eq('grade_id', selectedGradeId)\n+          .order('title');\n+\n+        if (error) {\n+          throw error;\n+        }\n+\n+        // Map the topics to match your interface\n+        const validTopics = (data || []).map((topic: any) => ({\n+          _id: topic.id,\n+          id: topic.id,\n+          name: topic.title,\n+          title: topic.title,\n+          grade_id: topic.grade_id,\n+          subtopics: []\n+        }));\n+        \n+        setTopics(validTopics);\n+      } catch (error) {\n+        console.error('Error fetching topics:', error);\n+        toast.error('Failed to fetch topics');\n+      }\n+    };\n+\n+    fetchTopics();\n+  }, [selectedGradeId]);\n+\n+  // Subtopic Selection\n+  useEffect(() => {\n+    const fetchSubtopics = async () => {\n+      if (!selectedTopicId) return;\n+      \n+      try {\n+        // Use content service to fetch subtopics\n+        const subtopicsData = await contentService.fetchSubtopics(selectedTopicId);\n+        console.log('Fetched subtopics:', subtopicsData);\n+\n+        const validSubtopics = subtopicsData.map((subtopic: any) => ({\n+          id: subtopic.id,\n+          title: subtopic.title,\n+          description: subtopic.description,\n+          topic_id: subtopic.topic_id,\n+          lessons: [],\n+          order_index: subtopicsData.length\n+        }));\n+        \n+        setSubtopics(validSubtopics);\n+        \n+        // Update global state\n+        if (selectedSubtopic) {\n+          setSelectedSubtopic(selectedSubtopic);\n+        }\n+      } catch (err) {\n+        const error = err as Error;\n+        console.error('Error fetching subtopics:', error);\n+        toast.error('Failed to fetch subtopics');\n+      }\n+    };\n+\n+    fetchSubtopics();\n+  }, [selectedTopicId, selectedSubtopic, setSelectedSubtopic]);\n+\n+  // Add effect to monitor subtopics state\n+  useEffect(() => {\n+    console.log('Current subtopics state:', subtopics);\n+  }, [subtopics]);\n+\n+  // Add fetchLessons function\n+  const fetchLessons = useCallback(async () => {\n+    if (!selectedSubtopicId) return;\n+    try {\n+      const { data, error } = await supabase\n+        .from('lessons')\n+        .select('*')\n+        .eq('subtopic_id', selectedSubtopicId)\n+        .order('title');\n+\n+      if (error) {\n+        throw error;\n+      }\n+      \n+      // Map the lessons to ensure they have _id\n+      const validLessons = (data || []).map((lesson: any) => ({\n+        ...lesson,\n+        _id: lesson._id || lesson.id, // Use _id if available, otherwise use id\n+        title: lesson.title || 'Untitled Lesson'\n+      })).filter((lesson: any) => lesson._id); // Only include lessons with valid IDs\n+      \n+      setLessons(validLessons);\n+    } catch (error) {\n+      console.error('Error fetching lessons:', error);\n+      toast.error('Failed to fetch lessons');\n+    }\n+  }, [selectedSubtopicId]);\n+  // Add loadLessonContent function\n+  const isLoading = useRef(false);\n+  const loadLessonContent = useCallback(async (lessonId: string) => {\n+    // Prevent multiple simultaneous loads\n+    if (isLoading.current) return;\n+    isLoading.current = true;\n+\n+    const controller = new AbortController();\n+\n+    try {\n+      // Clear existing content first\n+      setLessonTitle('');\n+      setContentHeading('');\n+      setLessonContent('');\n+      setQuestions([]);\n+      \n+      // First fetch lesson data\n+      const { data: lessonData, error: lessonError } = await supabase\n+        .from('lessons')\n+        .select('*')\n+        .eq('id', lessonId)\n+        .single()\n+        \n+\n+      if (lessonError) {\n+        console.error('Lesson fetch error:', lessonError);\n+        throw lessonError;\n+      }\n+\n+      // Set lesson data\n+      setLessonTitle(lessonData.title || '');\n+      setContentHeading(lessonData.content || '');\n+\n+      // Then fetch lesson content with explicit headers\n+      const { data: contentData, error: contentError } = await supabase\n+        .from('lesson_content')\n+        .select('*')\n+        .eq('lesson_id', lessonId)\n+        .order('updated_at', { ascending: false })\n+        .limit(1)\n+        .maybeSingle();\n+\n+      if (contentError) {\n+        console.error('Content fetch error:', contentError);\n+        throw contentError;\n+      }\n+\n+      // Set content if available\n+      if (contentData?.content) {\n+        setLessonContent(typeof contentData.content === 'string' \n+          ? contentData.content \n+          : JSON.stringify(contentData.content)\n+        );\n+      }\n+\n+    } catch (error: unknown) {\n+      if (error instanceof Error && error.name === 'AbortError') {\n+        console.log('Request aborted');\n+        return;\n+      }\n+      console.error('Error loading lesson:', error);\n+      toast.error('Failed to load lesson content');\n+      \n+      // Reset states on error\n+      setLessonTitle('');\n+      setContentHeading('');\n+      setLessonContent('');\n+      setQuestions([]);\n+    } finally {\n+      isLoading.current = false;\n+    }\n+\n+    return () => {\n+      controller.abort();\n+    };\n+  }, []); // Empty dependencies since we're using closure over state setters\n+\n+  // // Add effect for fetching lessons when subtopic changes\n+  useEffect(() => {\n+    if (selectedSubtopicId) {\n+      fetchLessons();\n+    }\n+  }, [selectedSubtopicId, fetchLessons]);\n+\n+  // Add effect for loading lesson content when currentLessonId changes\n+    useEffect(() => {\n+    let isMounted = true;\n+    let timeoutId: NodeJS.Timeout;\n+\n+    const loadContent = async () => {\n+      if (!currentLessonId || !isMounted) return;\n+\n+      // Clear previous timeout if exists\n+      if (timeoutId) clearTimeout(timeoutId);\n+\n+      // Set new timeout for debouncing\n+      timeoutId = setTimeout(() => {\n+        if (isMounted) {\n+          loadLessonContent(currentLessonId);\n+        }\n+      }, 300);\n+    };\n+\n+    loadContent();\n+\n+    // Cleanup function\n+    return () => {\n+      isMounted = false;\n+      if (timeoutId) clearTimeout(timeoutId);\n+      if (isLoading.current) isLoading.current = false;\n+    };\n+  }, [currentLessonId]); // Remove loadLessonContent from dependencies\n+\n+  useEffect(() => {\n+    console.log('Current lessons state:', lessons);\n+  }, [lessons]);\n+\n+    // Add keyboard shortcut for saving\n+  useEffect(() => {\n+    const handleKeyDown = (e: KeyboardEvent) => {\n+      if ((e.ctrlKey || e.metaKey) && e.key === 's') {\n+        e.preventDefault();\n+        handleSaveLesson();\n+      }\n+    };\n+\n+    window.addEventListener('keydown', handleKeyDown);\n+    return () => window.removeEventListener('keydown', handleKeyDown);\n+  }, [handleSaveLesson]);\n+\n+  // Add SaveFeedback component\n+  const SaveFeedback = useCallback(() => {\n+    if (saveProgress === 'idle') return null;\n+\n+    return (\n+    <div className=\"fixed bottom-4 right-4\">\n+      {saveProgress === 'saving' && (\n+        <div className=\"flex items-center gap-2 bg-background border rounded-lg px-4 py-2 shadow-lg\">\n+          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n+          <span className=\"text-sm\">Saving changes...</span>\n+        </div>\n+      )}\n+      {saveProgress === 'saved' && (\n+        <div className=\"flex items-center gap-2 bg-green-500 text-white rounded-lg px-4 py-2 shadow-lg\">\n+          <Check className=\"h-4 w-4\" />\n+          <span className=\"text-sm\">Changes saved</span>\n+        </div>\n+      )}\n+      {saveProgress === 'error' && (\n+        <div className=\"flex items-center gap-2 bg-destructive text-destructive-foreground rounded-lg px-4 py-2 shadow-lg\">\n+          <X className=\"h-4 w-4\" />\n+          <span className=\"text-sm\">Error saving changes</span>\n+        </div>\n+      )}\n+    </div>\n+  );\n+  }, [saveProgress]);\n+\n+  // Update handlers\n+  const handleGradeSelect = (gradeId: string) => {\n+    // Always keep sidebar open during selection\n+    setIsSidebarCollapsed(false);\n+    setIsSidebarLocked(true);\n+    \n+    // Batch state updates\n+    requestAnimationFrame(() => {\n+      setSelectedGradeId(gradeId);\n+      setSelectedGrade(gradeId);\n+      setSelectedTopicId(null);\n+      setSelectedTopic('');\n+      setSelectedSubtopicId(null);\n+      setSelectedSubtopic('');\n+      setCurrentLessonId(null);\n+      \n+      if (isViewMode) {\n+        setExpandedGrade(gradeId);\n+      }\n+    });\n+  };\n+\n+  const handleTopicSelect = (value: string) => {\n+    setSelectedTopicId(value);\n+    setSelectedTopic(value);\n+    setSelectedSubtopicId(null);\n+    setSelectedSubtopic('');\n+    setCurrentLessonId(null);\n+  };\n+\n+  const handleSubtopicSelect = (value: string) => {\n+    setSelectedSubtopicId(value);\n+    setSelectedSubtopic(value);\n+    setCurrentLessonId(null);\n+  };\n+\n+  const handleLessonSelect = async (lessonId: string) => {\n+    try {\n+      // Lock sidebar during selection\n+      setIsSidebarLocked(true);\n+      setIsSidebarCollapsed(false);\n+      setCurrentLessonId(lessonId);\n+      \n+      // 1. Fetch lesson data\n+      const { data: lessonData, error: lessonError } = await supabase\n+        .from('lessons')\n+        .select('*')\n+        .eq('id', lessonId)\n+        .single();\n+\n+      if (lessonError) throw lessonError;\n+\n+      // 2. Fetch questions with exercise prompts\n+      const { data: questionsData, error: questionsError } = await supabase\n+        .from('questions')\n+        .select(`\n+          *,\n+          exercise_prompts (*)\n+        `)\n+        .eq('lesson_id', lessonId);\n+\n+      if (questionsError) throw questionsError;\n+\n+      // 3. Fetch activities - removed order_index\n+      const { data: activitiesData, error: activitiesError } = await supabase\n+        .from('activities')\n+        .select('*')\n+        .eq('lesson_id', lessonId);\n+\n+      if (activitiesError) throw activitiesError;\n+\n+      // Format questions with their exercise prompts\n+      const formattedQuestions = questionsData?.map(q => ({\n+        ...q,\n+        data: q.data || {},\n+        exercisePrompts: q.exercise_prompts || []\n+      })) || [];\n+\n+      // Set all states\n+      setLessonTitle(lessonData.title || '');\n+      setLessonContent(lessonData.content || '');\n+      setQuestions(formattedQuestions);\n+      setActivities(activitiesData || []);\n+\n+      // After successful load, unlock sidebar and allow collapse\n+      setTimeout(() => {\n+        setIsSidebarLocked(false);\n+        if (!isSidebarLocked) {\n+          setIsSidebarCollapsed(true);\n+        }\n+      }, 300);\n+\n+    } catch (error) {\n+      console.error('Error loading lesson:', error);\n+      toast.error('Failed to load lesson');\n+      // Reset states on error\n+      setLessonTitle('');\n+      setLessonContent('');\n+      setQuestions([]);\n+      setActivities([]);\n+    }\n+    if (!isSidebarLocked) {\n+      setIsSidebarCollapsed(true);\n+    }\n+  };\n+\n+  // Update the expansion handlers\n+  const handleTopicExpand = async (topicId: string) => {\n+    setExpandedTopic(expandedTopic === topicId ? null : topicId);\n+    setSelectedTopicId(topicId);\n+    \n+    // Load subtopics when topic is expanded\n+    if (topicId) {\n+      setIsLoadingSubtopics(true);\n+      try {\n+        const { data: subtopicsData, error } = await supabase\n+          .from('subtopics')\n+          .select('*')\n+          .eq('topic_id', topicId)\n+          .order('order_index');\n+\n+        if (error) throw error;\n+        setSubtopics(subtopicsData || []);\n+      } catch (error) {\n+        console.error('Error loading subtopics:', error);\n+        toast.error('Failed to load subtopics');\n+      } finally {\n+        setIsLoadingSubtopics(false);\n+      }\n+    }\n+  };\n+\n+  const handleSubtopicExpand = async (subtopicId: string) => {\n+    setExpandedSubtopic(expandedSubtopic === subtopicId ? null : subtopicId);\n+    setSelectedSubtopicId(subtopicId);\n+    \n+    if (subtopicId) {\n+      setIsLoadingLessons(true);\n+      try {\n+        const { data: lessonsData, error } = await supabase\n+          .from('lessons')\n+          .select('*')\n+          .eq('subtopic_id', subtopicId)\n+          .order('order_index');\n+\n+        if (error) throw error;\n+        setLessons(lessonsData || []);\n+      } catch (error) {\n+        console.error('Error loading lessons:', error);\n+        toast.error('Failed to load lessons');\n+      } finally {\n+        setIsLoadingLessons(false);\n+      }\n+    }\n+  };\n+\n+  const handleQuestionExpand = (index: number) => {\n+    setExpandedQuestion(expandedQuestion === index ? null : index);\n+  };\n+\n+  const handleActivityExpand = (index: number) => {\n+    setExpandedActivity(expandedActivity === index ? null : index);\n+  };\n+\n+  // Add effect to save mode changes to localStorage\n+  useEffect(() => {\n+    localStorage.setItem('lessonManagementViewMode', isViewMode.toString());\n+  }, [isViewMode]);\n+\n+  // Add handlers for creating new items\n+  const handleCreateGrade = async () => {\n+    try {\n+      const response = await fetch(`${API_ENDPOINT}/grades`, {\n+        method: 'POST',\n+        headers: { 'Content-Type': 'application/json' },\n+        body: JSON.stringify({ name: newItemData.name })\n+      });\n+\n+      if (!response.ok) throw new Error('Failed to create grade');\n+      const data = await response.json();\n+      \n+      if (!data.success) throw new Error(data.message || 'Failed to create grade');\n+      \n+      // Update grades list\n+      setGrades([...grades, data.data.grade]);\n+      setModalState({ ...modalState, showAddGrade: false });\n+      setNewItemData({ name: '', description: '' });\n+      toast.success('Grade created successfully');\n+    } catch (error) {\n+      console.error('Error creating grade:', error);\n+      toast.error('Failed to create grade');\n+    }\n+  };\n+\n+  const handleCreateTopic = async () => {\n+    if (!selectedGradeId) {\n+      toast.error('Please select a grade first');\n+      return;\n+    }\n+\n+    try {\n+      const newTopic = await contentService.createTopic({\n+        title: newItemData.name, // Map from newItemData.name to title\n+        description: newItemData.description,\n+        gradeId: selectedGradeId\n+      });\n+\n+      setTopics(prev => [...prev, newTopic]);\n+      toast.success('Topic created successfully');\n+      setModalState({ ...modalState, showAddTopic: false });\n+      setNewItemData({ name: '', description: '' });\n+    } catch (err) {\n+      const error = err instanceof Error ? err.message : String(err);\n+      console.error('Error creating topic:', error);\n+      toast.error('Failed to create topic');\n+    }\n+  };\n+    \n+  \n+\n+\n+  const handleCreateSubtopic = async (data: { title: string; description?: string }) => {\n+    try {\n+      if (!selectedTopicId) {\n+        toast.error('Please select a topic first');\n+        return;\n+      }\n+\n+      const newSubtopic = await contentService.createSubtopic({\n+        ...data,\n+        topicId: selectedTopicId\n+      });\n+\n+      setSubtopics(prev => [...prev, {\n+        _id: newSubtopic.id,\n+        id: newSubtopic.id,\n+        name: newSubtopic.title,\n+        title: newSubtopic.title,\n+        description: newSubtopic.description,\n+        topic_id: newSubtopic.topic_id,\n+        orderIndex: prev.length,\n+        lessons: []\n+      }]);\n+\n+      toast.success('Subtopic created successfully');\n+      setModalState(prev => ({ ...prev, showAddSubtopic: false }));\n+    } catch (err) {\n+      const error = err as Error;\n+      console.error('Error creating subtopic:', error);\n+      toast.error('Failed to create subtopic');\n+    }\n+  };\n+\n+  const handleUpdateSubtopic = async (subtopicId: string, data: { title: string; description?: string }) => {\n+    try {\n+      const { data: updatedSubtopic, error } = await supabase\n+        .from('sub_topics')\n+        .update(data)\n+        .eq('id', subtopicId)\n+        .select()\n+        .single();\n+\n+      if (error) throw error;\n+      \n+      setSubtopics(prev => prev.map(subtopic => \n+        subtopic.id === subtopicId \n+          ? {\n+              ...subtopic,\n+              name: updatedSubtopic.title\n+            }\n+          : subtopic\n+      ));\n+\n+      toast.success('Subtopic updated successfully');\n+    } catch (err) {\n+      const error = err as Error;\n+      console.error('Error updating subtopic:', error);\n+      toast.error('Failed to update subtopic');\n+    }\n+  };\n+\n+  const handleDeleteSubtopic = async (subtopicId: string) => {\n+    try {\n+      await contentService.deleteSubtopic(subtopicId);\n+      setSubtopics(prev => prev.filter(subtopic => subtopic.id !== subtopicId));\n+      setSelectedSubtopicId(null);\n+      toast.success('Subtopic deleted successfully');\n+    } catch (err) {\n+      const error = err as Error;\n+      console.error('Error deleting subtopic:', error);\n+      toast.error('Failed to delete subtopic');\n+    }\n+  };\n+\n+  const handleCreateLesson = async () => {\n+    if (!selectedSubtopicId) {\n+      toast.error('Please select a subtopic first');\n+      return;\n+    }\n+\n+    try {\n+      // First create the lesson\n+      const { data: newLesson, error: lessonError } = await supabase\n+        .from('lessons')\n+        .insert({\n+          title: newItemData.name,\n+          duration: 0,\n+          topic_id: selectedTopicId,\n+          subtopic_id: selectedSubtopicId,\n+          content: '', // Empty rich text content initially\n+          status: 'draft'\n+        })\n+        .select()\n+        .single();\n+\n+      if (lessonError) throw lessonError;\n+\n+      // Create initial question\n+      const { data: newQuestion, error: questionError } = await supabase\n+        .from('questions')\n+        .insert({\n+          lesson_id: newLesson.id,\n+          type: 'speaking', // default type\n+          title: 'Question 1',\n+          data: {\n+            prompt: '',\n+            teacherScript: '',\n+            options: []\n+          },\n+          order_index: 0\n+        })\n+        .select()\n+        .single();\n+\n+      if (questionError) throw questionError;\n+\n+      // Create initial exercise prompts for the question\n+      const { error: promptsError } = await supabase\n+        .from('exercise_prompts')\n+        .insert([\n+          {\n+            question_id: newQuestion.id,\n+            text: '',\n+            type: 'image',\n+            narration: '',\n+            saytext: '',\n+            media: [],\n+            order_index: 0\n+          },\n+          {\n+            question_id: newQuestion.id,\n+            text: '',\n+            type: 'gif',\n+            narration: '',\n+            saytext: '',\n+            media: [],\n+            order_index: 1\n+          }\n+        ]);\n+\n+      if (promptsError) throw promptsError;\n+\n+      // Create initial activity\n+      // const { error: activityError } = await supabase\n+      //   .from('activities')\n+      //   .insert({\n+      //     lesson_id: newLesson.id,\n+      //     type: 'practice',\n+      //     title: '',\n+      //     instructions: '',\n+      //     media: [],\n+      //     data: {\n+      //       prompt: '',\n+      //       teacherScript: '',\n+      //       media: []\n+      //     },\n+      //     order_index: 0\n+      //   });\n+\n+      // if (activityError) throw activityError;\n+\n+      // Update UI state\n+      setLessons(prev => [...prev, newLesson]);\n+      setCurrentLessonId(newLesson.id);\n+      setLessonTitle(newLesson.title);\n+      setModalState({ ...modalState, showAddLesson: false });\n+      setNewItemData({ name: '', description: '' });\n+      toast.success('Lesson created successfully');\n+\n+    } catch (error) {\n+      console.error('Error creating lesson:', error);\n+      toast.error('Failed to create lesson');\n+    }\n+  };\n+\n+  // Effect to handle localStorage after mount\n+  useEffect(() => {\n+    const storedMode = localStorage.getItem('lessonManagementViewMode');\n+    if (storedMode !== null) {\n+      setIsViewMode(storedMode === 'true');\n+    }\n+  }, []);\n+\n+  // Update the cleanupModalState function\n+  const cleanupModalState = useCallback(() => {\n+    document.body.style.pointerEvents = '';\n+    document.body.style.overflow = '';\n+    setModalState({\n+      showAddGrade: false,\n+      showAddTopic: false,\n+      showAddSubtopic: false,\n+      showAddLesson: false\n+    });\n+    setNewItemData({ name: '', description: '' });\n+  }, []);\n+\n+  // Add a function to handle modal state changes\n+  const handleModalStateChange = useCallback((modalType: keyof typeof modalState, open: boolean) => {\n+    if (!open) {\n+      cleanupModalState();\n+    } else {\n+      setModalState(prev => ({ ...prev, [modalType]: open }));\n+    }\n+  }, [cleanupModalState]);\n+\n+  const handleContentSave = async (content: string) => {\n+    const loadingToast = toast.loading(\"Saving content...\", {\n+      action: {\n+        label: \"Close\",\n+        onClick: () => toast.dismiss()\n+      }\n+    });\n+    \n+    try {\n+      const { data: { session } } = await supabase.auth.getSession();\n+      if (!session?.user) {\n+        toast.error('Please sign in to save content', { id: loadingToast });\n+        return;\n+      }\n+\n+      // Get the most recent content entry\n+      const { data: existingContent, error: checkError } = await supabase\n+        .from('lesson_content')\n+        .select('id')\n+        .eq('lesson_id', currentLessonId)\n+        .order('updated_at', { ascending: false })\n+        .limit(1)\n+        .maybeSingle();\n+\n+      // If content exists, update it; if not, insert new\n+      const { error } = await supabase\n+        .from('lesson_content')\n+        .upsert({\n+          id: existingContent?.id, // This ensures we update if id exists\n+          lesson_id: currentLessonId,\n+          content: [content],\n+          content_type: 'text',\n+          metadata: {\n+            heading: contentHeading\n+          },\n+          user_id: session.user.id,\n+          updated_at: new Date().toISOString()\n+        }, {\n+          onConflict: 'id'  // This ensures we update based on lesson_id\n+        });\n+\n+      if (error) throw error;\n+\n+      // Save questions separately\n+      for (const question of questions) {\n+        const { exercisePrompts, ...questionData } = question; // Remove exercisePrompts from question data\n+        \n+        // Save question\n+        const { error: questionError } = await supabase\n+          .from('questions')\n+          .upsert(questionData, {\n+            onConflict: 'id'\n+          })\n+          .select();\n+\n+        if (questionError) throw questionError;\n+\n+        // Save exercise prompts\n+        if (exercisePrompts?.length > 0) {\n+          for (const prompt of exercisePrompts) {\n+            const { error: promptError } = await supabase\n+              .from('exercise_prompts')\n+              .upsert(prompt, {\n+                onConflict: 'id'\n+              })\n+              .select();\n+\n+            if (promptError) throw promptError;\n+          }\n+        }\n+      }\n+      \n+      toast.success(\"Content saved successfully\", {\n+        action: {\n+          label: \"Close\",\n+          onClick: () => toast.dismiss()\n+        },\n+        id: loadingToast,\n+      });\n+      setIsContentEditorOpen(false);\n+    } catch (error) {\n+      console.error('Error saving content:', error);\n+      toast.error(\"Failed to save content\", {\n+        action: {\n+          label: \"Close\",\n+          onClick: () => toast.dismiss()\n+        },\n+        id: loadingToast,\n+      });\n+    }\n+  };\n+\n+  // Add this component for inline editing\n+  const InlineEdit = ({ \n+    value, \n+    onSave, \n+    isEditing, \n+    setIsEditing, \n+    placeholder,\n+    className = \"\"\n+  }: InlineEditProps) => {\n+    const [tempValue, setTempValue] = useState(value);\n+    \n+    return isEditing ? (\n+      <div className=\"flex items-center gap-2\">\n+        <Input\n+          value={tempValue}\n+          onChange={(e) => setTempValue(e.target.value)}\n+          placeholder={placeholder}\n+          className={className}\n+          autoFocus\n+        />\n+        <Button\n+          size=\"sm\"\n+          variant=\"ghost\"\n+          onClick={() => {\n+            onSave(tempValue);\n+            setIsEditing(false);\n+          }}\n+        >\n+          <Check className=\"h-4 w-4 text-green-500\" />\n+        </Button>\n+        <Button\n+          size=\"sm\"\n+          variant=\"ghost\"\n+          onClick={() => setIsEditing(false)}\n+        >\n+          <X className=\"h-4 w-4 text-red-500\" />\n+        </Button>\n+      </div>\n+    ) : (\n+      <div \n+        className=\"group flex items-center gap-2 cursor-pointer\"\n+        onClick={() => setIsEditing(true)}\n+      >\n+        <span className={className}>{value || placeholder}</span>\n+        <Pencil className=\"h-4 w-4 opacity-0 group-hover:opacity-100 transition-opacity\" />\n+      </div>\n+    );\n+  };\n+\n+  // Add this effect to handle auto-collapse after lesson selection\n+  useEffect(() => {\n+    if (currentLessonId && selectedGradeId && selectedTopicId && selectedSubtopicId) {\n+      setIsSidebarLocked(false);\n+      // Optional: add a slight delay before collapsing\n+      setTimeout(() => setIsSidebarCollapsed(true), 300);\n+    }\n+  }, [currentLessonId, selectedGradeId, selectedTopicId, selectedSubtopicId]);\n+\n+  // Add individual save handlers\n+  // const handleSaveQuestion = async (question: Question, index: number) => {\n+  //   try {\n+  //     // Update status to saving\n+  //     setQuestionSaveStatuses(prev => [\n+  //       ...prev.filter(s => s.id !== question.id),\n+  //       { id: question.id, status: 'saving' }\n+  //     ]);\n+\n+  //     const questionUpsert = {\n+  //       id: question.id,\n+  //       lesson_id: currentLessonId,\n+  //       type: question.type,\n+  //       title: question.data?.prompt || 'Untitled Question',\n+  //       metadata: question.metadata || {},\n+  //       data: {\n+  //         prompt: question.data?.prompt || '',\n+  //         teacherScript: question.data?.teacherScript || '',\n+  //         ...question.data\n+  //       },\n+  //       order_index: index,\n+  //       created_at: new Date().toISOString(),\n+  //       updated_at: new Date().toISOString()\n+  //     };\n+\n+  //     const { error: questionError } = await supabase\n+  //       .from('questions')\n+  //       .upsert(questionUpsert);\n+\n+  //     if (questionError) throw questionError;\n+\n+  //     // Update status to saved\n+  //     setQuestionSaveStatuses(prev => [\n+  //       ...prev.filter(s => s.id !== question.id),\n+  //       { id: question.id, status: 'saved', lastSaved: new Date().toISOString() }\n+  //     ]);\n+\n+  //     toast.success(`Question ${index + 1} saved successfully`);\n+  //   } catch (error) {\n+  //     console.error('Error saving question:', error);\n+  //     setQuestionSaveStatuses(prev => [\n+  //       ...prev.filter(s => s.id !== question.id),\n+  //       { id: question.id, status: 'error' }\n+  //     ]);\n+  //     toast.error(`Failed to save question ${index + 1}`);\n+  //   }\n+  // };\n+\n+  const handleSavePrompt = async (questionId: string, prompt: ExercisePrompt, promptIndex: number) => {\n+    try {\n+      setPromptSaveStatuses(prev => [\n+        ...prev.filter(s => s.id !== prompt.id),\n+        { id: prompt.id || '', status: 'saving' } as SaveStatus\n+      ]);\n+\n+      const promptUpsert = {\n+        id: prompt.id,\n+        question_id: questionId,\n+        text: prompt.text || '',\n+        type: prompt.type || 'text',\n+        narration: prompt.narration || '',\n+        saytext: prompt.saytext || '',\n+        media: prompt.media || [],\n+        order_index: promptIndex,\n+        created_at: prompt.created_at || new Date().toISOString(),\n+        updated_at: new Date().toISOString()\n+      };\n+\n+      const { error: promptError } = await supabase\n+        .from('exercise_prompts')\n+        .upsert(promptUpsert);\n+\n+      if (promptError) throw promptError;\n+\n+      setPromptSaveStatuses(prev => [\n+        ...prev.filter(s => s.id !== prompt.id),\n+        { id: prompt.id || '', status: 'saved', lastSaved: new Date().toISOString() } as SaveStatus\n+      ]);\n+\n+      toast.success(`Prompt ${promptIndex + 1} saved successfully`);\n+    } catch (error) {\n+      console.error('Error saving prompt:', error);\n+      setPromptSaveStatuses(prev => [\n+        ...prev.filter(s => s.id !== prompt.id),\n+        { id: prompt.id || '', status: 'error' } as SaveStatus\n+      ]);\n+      toast.error(`Failed to save prompt ${promptIndex + 1}`);\n+    }\n+  };\n+\n+  // Add effect to mark items as draft when edited\n+  useEffect(() => {\n+    questions.forEach(question => {\n+      if (!questionSaveStatuses.find(s => s.id === question.id)) {\n+        setQuestionSaveStatuses(prev => [\n+          ...prev,\n+          { id: question.id, status: 'draft' }\n+        ]);\n+      }\n+    });\n+  }, [questions]);\n+\n+  // Add this function with your other handlers\n+  const handleRefreshLesson = async () => {\n+    if (!currentLessonId) {\n+      toast.error('No lesson selected');\n+      return;\n+    }\n+    \n+    try {\n+      toast.loading('Refreshing lesson content...', {\n+        action: {\n+          label: \"Close\",\n+          onClick: () => toast.dismiss()\n+        },\n+      });\n+      await handleLessonSelect(currentLessonId);\n+      toast.success('Content refreshed', {\n+        action: {\n+          label: \"Close\",\n+          onClick: () => toast.dismiss()\n+        },\n+      });\n+    } catch (error) {\n+      console.error('Error refreshing lesson:', error);\n+      toast.error('Failed to refresh content', {\n+        action: {\n+          label: \"Close\",\n+          onClick: () => toast.dismiss()\n+        },\n+      });\n+    }\n+  };\n+\n+  // Add this function to handle refresh\n+  const handleRefreshContent = async () => {\n+    if (!currentLessonId) {\n+      toast.error('No lesson selected');\n+      return;\n+    }\n+    \n+    toast.loading('Refreshing content...');\n+    try {\n+      await loadLessonContent(currentLessonId);\n+      toast.success('Content refreshed');\n+    } catch (error) {\n+      console.error('Refresh error:', error);\n+      toast.error('Failed to refresh content');\n+    }\n+  };\n+\n+  // Update the sidebar hover mechanism\n+  const handleSidebarHover = useCallback(\n+    debounce((isHovering: boolean) => {\n+      if (!isSidebarLocked && !isNavigating && !isDropdownOpen) {\n+        if (isHovering || document.activeElement?.closest('.sidebar-content')) {\n+          setIsSidebarCollapsed(false);\n+        } else {\n+          setTimeout(() => {\n+            if (!isDropdownOpen) { // Only collapse if dropdown is closed\n+              setIsSidebarCollapsed(true);\n+            }\n+          }, 300);\n+        }\n+      }\n+    }, 100),\n+    [isSidebarLocked, isNavigating, isDropdownOpen]\n+  );\n+\n+  // Update the sidebar JSX\n+  <div \n+    className={cn(\n+      \"transition-all duration-300 ease-in-out relative\",\n+      isSidebarCollapsed ? \"w-20\" : \"w-80\",\n+      \"flex-shrink-0 group\"\n+    )}\n+    onMouseEnter={() => {\n+      handleSidebarHover(true);\n+      // Immediately expand on mouse enter\n+      if (!isSidebarLocked) {\n+        setIsSidebarCollapsed(false);\n+      }\n+    }}\n+    onMouseLeave={() => {\n+      // Only collapse if not interacting with content\n+      if (!document.activeElement?.closest('.sidebar-content')) {\n+        handleSidebarHover(false);\n+      }\n+    }}\n+    onFocus={() => setIsSidebarCollapsed(false)}\n+  >\n+    <Card className={cn(\n+      \"h-full relative sidebar-content\", // Added sidebar-content class\n+      \"transition-shadow duration-300\",\n+      \"hover:shadow-lg\"\n+    )}>\n+      {/* Rest of sidebar content */}\n+    </Card>\n+  </div>\n+\n+  // Update the sidebar and card styles\n+  return (\n+      <div className=\"container mx-auto py-8\">\n+        {/* Header */}\n+        <div className=\"flex items-center justify-between mb-2\">\n+          {/* ... header content ... */}\n+          <div className=\"flex items-center gap-4\">\n+            <Link href=\"/super-admin\">\n+              <Button variant=\"outline\" className=\"gap-2\">\n+                <ArrowLeft className=\"h-4 w-4\" />\n+                Back\n+              </Button>\n+            </Link>\n+            <div className=\"flex items-center gap-2\">\n+              <h1 className=\"text-2xl font-bold\">Lesson Management</h1>\n+              <Button\n+                variant=\"ghost\"\n+                size=\"icon\"\n+                onClick={handleRefreshLesson}\n+                className=\"ml-2\"\n+                title=\"Refresh lesson content\"\n+              >\n+                <RefreshCw className=\"h-4 w-4\" />\n+              </Button>\n+            </div>\n+            <p className=\"text-sm text-muted-foreground\">Create and manage your educational content</p>\n+          </div>\n+          <div className=\"flex items-center gap-2\">\n+            <Button\n+              variant=\"outline\"\n+              size=\"sm\"\n+              onClick={() => setShowHelpTips(!showHelpTips)}\n+              className=\"gap-2\"\n+            >\n+              {showHelpTips ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n+              {showHelpTips ? 'Hide Tips' : 'Show Tips'}\n+            </Button>\n+          </div>\n+        </div>\n+        \n+        {/* Main content wrapper - Fix the layout here */}\n+        <div className=\"flex gap-6 h-[calc(100vh-200px)]\">\n+          {/* Improved sidebar */}\n+          <div \n+            className={cn(\n+              \"transition-all duration-300 ease-in-out relative\",\n+              isSidebarCollapsed ? \"w-20\" : \"w-80\",\n+              \"flex-shrink-0 group\"\n+            )}\n+            onMouseEnter={() => {\n+              handleSidebarHover(true);\n+              // Immediately expand on mouse enter\n+              if (!isSidebarLocked) {\n+                setIsSidebarCollapsed(false);\n+              }\n+            }}\n+            onMouseLeave={() => {\n+              // Only collapse if not interacting with content\n+              if (!document.activeElement?.closest('.sidebar-content')) {\n+                handleSidebarHover(false);\n+              }\n+            }}\n+            onFocus={() => setIsSidebarCollapsed(false)}\n+          >\n+            <Card className={cn(\n+              \"h-full relative sidebar-content\", // Added sidebar-content class\n+              \"transition-shadow duration-300\",\n+              \"hover:shadow-lg\"\n+            )}>\n+              {/* Lock button - only show after lesson selection */}\n+              {currentLessonId && (\n+                <Button\n+                  variant=\"ghost\"\n+                  size=\"sm\"\n+                  className=\"absolute top-2 right-2 z-10\"\n+                  onClick={() => {\n+                    setIsSidebarLocked(!isSidebarLocked);\n+                    if (!isSidebarLocked) {\n+                      setIsSidebarCollapsed(false);\n+                    }\n+                  }}\n+                >\n+                  {isSidebarLocked ? <Lock className=\"h-4 w-4\" /> : <Unlock className=\"h-4 w-4\" />}\n+                </Button>\n+              )}\n+\n+              {/* Sidebar content with overflow handling */}\n+              <div className={cn(\n+                \"transition-all duration-300 overflow-hidden\",\n+                isSidebarCollapsed ? \"opacity-0\" : \"opacity-100\"\n+              )}>\n+                <Card className=\"h-full\">\n+                  <CardHeader className=\"pb-3\">\n+                    <div className=\"flex items-center justify-between\">\n+                      <CardTitle className=\"text-lg font-semibold\">Content Management</CardTitle>\n+                      <TooltipProvider>\n+                        <Tooltip>\n+                          <TooltipTrigger>\n+                            <HelpCircle className=\"h-4 w-4 text-muted-foreground\" />\n+                          </TooltipTrigger>\n+                          <TooltipContent>\n+                            <p>Manage your educational content here</p>\n+                          </TooltipContent>\n+                        </Tooltip>\n+                      </TooltipProvider>\n+                      </div>\n+                    <CardDescription>Create and manage your lessons</CardDescription>\n+                  </CardHeader>\n+                  <CardContent className=\"space-y-4\">\n+                    {/* View/Edit Mode Toggle */}\n+                    <div className=\"grid grid-cols-2 gap-2 p-1 bg-muted rounded-lg\">\n+                      <Button\n+                        variant={isViewMode ? \"default\" : \"ghost\"}\n+                        size=\"sm\"\n+                        onClick={() => setIsViewMode(true)}\n+                        className=\"w-full\"\n+                      >\n+                        <Eye className=\"h-4 w-4 mr-2\" />\n+                        View\n+                      </Button>\n+                      <Button\n+                        variant={!isViewMode ? \"default\" : \"ghost\"}\n+                        size=\"sm\"\n+                        onClick={() => setIsViewMode(false)}\n+                        className=\"w-full\"\n+                      >\n+                        <Edit className=\"h-4 w-4 mr-2\" />\n+                        Edit\n+                      </Button>\n+                    </div>\n+\n+                    {/* Grade Selection */}\n+                    <div className=\"space-y-2\">\n+                      <div className=\"flex items-center justify-between\">\n+                        <Label htmlFor=\"grade-select\">Grade</Label>\n+                        {isViewMode && (\n+                          <Button variant=\"ghost\" size=\"sm\" onClick={() => setExpandedGrade(expandedGrade ? null : selectedGrade)}>\n+                            {expandedGrade ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n+                          </Button>\n+                        )}\n+                      </div>\n+                      <Select \n+                        value={selectedGradeId || ''}\n+                        onValueChange={handleGradeSelect}\n+                        onOpenChange={(open) => {\n+                          if (open) {\n+                            // Force sidebar to stay open and lock it\n+                            setIsSidebarCollapsed(false);\n+                            setIsSidebarLocked(true);\n+                          }\n+                        }}\n+                      >\n+                        <SelectTrigger \n+                          id=\"grade-select\" \n+                          className=\"w-full\"\n+                          onClick={(e) => {\n+                            e.stopPropagation(); // Prevent event bubbling\n+                            setIsSidebarCollapsed(false);\n+                            setIsSidebarLocked(true);\n+                          }}\n+                        >\n+                          <SelectValue placeholder=\"Select Grade\" />\n+                        </SelectTrigger>\n+                        <SelectContent \n+                          onCloseAutoFocus={(e) => {\n+                            e.preventDefault();\n+                            setIsSidebarLocked(true);\n+                            setIsSidebarCollapsed(false);\n+                          }}\n+                        >\n+                          {grades.map((grade: Grade) => (\n+                            <SelectItem \n+                              key={`grade-${grade.id || 'new'}`} \n+                              value={grade.id || ''}\n+                              onMouseDown={(e) => {\n+                                e.preventDefault();\n+                                e.stopPropagation();\n+                              }}\n+                            >\n+                              <div className=\"flex items-center gap-2\">\n+                                <BookOpen className=\"h-4 w-4 text-primary\" />\n+                                {grade.name}\n+                              </div>\n+                            </SelectItem>\n+                          ))}\n+                        </SelectContent>\n+                      </Select>\n+                      {!isViewMode && (\n+                      <Button \n+                        variant=\"outline\" \n+                        size=\"sm\" \n+                        className=\"w-full gap-2\"\n+                        onClick={() => setModalState({ ...modalState, showAddGrade: false })}\n+                      >\n+                        <Plus className=\"h-4 w-4\" />\n+                        Add New Grade\n+                      </Button>\n+                      )}\n+                    </div>\n+\n+                    {/* Content Tree View in View Mode */}\n+                    {isViewMode && expandedGrade && (\n+                      <div className=\"mt-4 space-y-4 overflow-y-auto max-h-[calc(100vh-300px)]\">\n+                        {topics.map((topic: Topic) => (\n+                          <Card \n+                            key={topic.id} \n+                            className={cn(\n+                              \"border-l-4 transition-all duration-200 hover:shadow-md\",\n+                              expandedTopic === topic.id \n+                                ? \"border-l-primary bg-accent/5\" \n+                                : \"border-l-primary/40 hover:border-l-primary\"\n+                            )}\n+                          >\n+                            <CardHeader \n+                              className=\"py-3 cursor-pointer select-none\" \n+                              onClick={() => handleTopicExpand(topic.id || '')}\n+                            >\n+                              <div className=\"flex items-center justify-between\">\n+                                <div className=\"flex items-center gap-2\">\n+                                  <Layers className=\"h-4 w-4 text-primary\" />\n+                                  <h4 className=\"font-medium\">{topic.title}</h4>\n+                                  <Badge variant=\"outline\" className=\"ml-2\">\n+                                    {subtopics.filter(s => s.topic_id === topic.id).length} Subtopics\n+                                  </Badge>\n+                                </div>\n+                                <div className=\"flex items-center gap-2\">\n+                                  <AlertDialog>\n+                                    <AlertDialogTrigger asChild>\n+                                      <Button \n+                                        variant=\"ghost\" \n+                                        size=\"sm\" \n+                                        className=\"hover:bg-destructive/10 hover:text-destructive\"\n+                                        onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}\n+                                      >\n+                                        <Trash className=\"h-4 w-4\" />\n+                                      </Button>\n+                                    </AlertDialogTrigger>\n+                                    {/* Alert Dialog Content */}\n+                                  </AlertDialog>\n+                                  <ChevronDown className={cn(\n+                                    \"h-4 w-4 transition-transform duration-200\",\n+                                    expandedTopic === topic.id ? \"rotate-0\" : \"-rotate-90\"\n+                                  )} />\n+                                </div>\n+                              </div>\n+                            </CardHeader>\n+\n+                            <AnimatePresence>\n+                              {expandedTopic === topic.id && (\n+                                <motion.div\n+                                  initial={{ height: 0, opacity: 0 }}\n+                                  animate={{ height: \"auto\", opacity: 1 }}\n+                                  exit={{ height: 0, opacity: 0 }}\n+                                  transition={{ duration: 0.2 }}\n+                                >\n+                                  <CardContent className=\"pt-0 pb-2\">\n+                                    <div className=\"pl-4 space-y-2\">\n+                                      {isLoadingSubtopics ? (\n+                                        <div className=\"flex items-center justify-center py-4\">\n+                                          <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\n+                                        </div>\n+                                      ) : (\n+                                        subtopics\n+                                          .filter(subtopic => subtopic.topic_id === topic.id)\n+                                          .map((subtopic: SubTopic) => (\n+                                            <div \n+                                              key={subtopic.id}\n+                                              className={cn(\n+                                                \"rounded-lg border transition-colors\",\n+                                                expandedSubtopic === subtopic.id \n+                                                  ? \"bg-accent/10 border-primary/20\" \n+                                                  : \"hover:bg-accent/5\"\n+                                              )}\n+                                            >\n+                                              <div \n+                                                className=\"p-3 cursor-pointer\"\n+                                                onClick={() => handleSubtopicExpand(subtopic.id || '')}\n+                                              >\n+                                                <div className=\"flex items-center justify-between py-2 cursor-pointer hover:bg-accent/50 rounded-md px-2\">\n+                                                  <div className=\"flex items-center gap-2\">\n+                                                    <BookOpen className=\"h-4 w-4 text-primary\" />\n+                                                    <span className=\"text-sm font-medium\">{subtopic.name}</span>\n+                                                    <Badge variant=\"outline\" className=\"ml-2\">\n+                                                      {lessons.filter(l => l.subtopic_id === subtopic.id).length} Lessons\n+                                                    </Badge>\n+                                                  </div>\n+                                                  <div className=\"flex items-center gap-2\">\n+                                                    <AlertDialog>\n+                                                      <AlertDialogTrigger asChild>\n+                                                        <Button \n+                                                          variant=\"ghost\" \n+                                                          size=\"sm\" \n+                                                          className=\"hover:bg-destructive/10 hover:text-destructive\"\n+                                                          onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}\n+                                                        >\n+                                                          <Trash className=\"h-4 w-4\" />\n+                                                        </Button>\n+                                                      </AlertDialogTrigger>\n+                                                      {/* Alert Dialog Content */}\n+                                                    </AlertDialog>\n+                                                    <ChevronDown className={cn(\n+                                                      \"h-4 w-4 transition-transform duration-200\",\n+                                                      expandedSubtopic === subtopic.id ? \"rotate-0\" : \"-rotate-90\"\n+                                                    )} />\n+                                                  </div>\n+                                                </div>\n+\n+                                                <AnimatePresence>\n+                                                  {expandedSubtopic === subtopic.id && (\n+                                                    <motion.div\n+                                                      initial={{ height: 0, opacity: 0 }}\n+                                                      animate={{ height: \"auto\", opacity: 1 }}\n+                                                      exit={{ height: 0, opacity: 0 }}\n+                                                      transition={{ duration: 0.2 }}\n+                                                    >\n+                                                      <div className=\"px-3 pb-3\">\n+                                                        <div className=\"space-y-2\">\n+                                                          {isLoadingLessons ? (\n+                                                            <div className=\"flex items-center justify-center py-4\">\n+                                                              <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\n+                                                            </div>\n+                                                          ) : (\n+                                                            lessons\n+                                                              .filter(lesson => lesson.subtopic_id === subtopic.id)\n+                                                              .map((lesson: Lesson) => (\n+                                                                <div\n+                                                                  key={lesson.id}\n+                                                                  onClick={() => handleLessonSelect(lesson.id || '')}\n+                                                                  className={cn(\n+                                                                    \"flex items-center gap-3 p-2 rounded-md cursor-pointer transition-colors\",\n+                                                                    \"hover:bg-accent\",\n+                                                                    currentLessonId === lesson.id && \"bg-accent\"\n+                                                                  )}\n+                                                                >\n+                                                                  <div className=\"flex items-center gap-2 flex-1\">\n+                                                                    <div className=\"flex h-8 w-8 items-center justify-center rounded-md border bg-background\">\n+                                                                      <BookOpen className=\"h-4 w-4 text-primary\" />\n+                                                                    </div>\n+                                                                    <div className=\"flex flex-col\">\n+                                                                      <span className=\"text-sm font-medium\">{lesson.title}</span>\n+                                                                      <span className=\"text-xs text-muted-foreground\">\n+                                                                        {lesson.duration} mins • {lesson.questions?.length || 0} Questions\n+                                                                      </span>\n+                                                                    </div>\n+                                                                  </div>\n+                                                                  <AlertDialog>\n+                                                                    <AlertDialogTrigger asChild>\n+                                                                      <Button \n+                                                                        variant=\"ghost\" \n+                                                                        size=\"sm\" \n+                                                                        className=\"hover:bg-destructive/10 hover:text-destructive\"\n+                                                                        onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}\n+                                                                      >\n+                                                                        <Trash className=\"h-4 w-4\" />\n+                                                                      </Button>\n+                                                                    </AlertDialogTrigger>\n+                                                                    {/* Alert Dialog Content */}\n+                                                                  </AlertDialog>\n+                                                                </div>\n+                                                              ))\n+                                                          )}\n+                                                        </div>\n+                                                      </div>\n+                                                    </motion.div>\n+                                                  )}\n+                                                </AnimatePresence>\n+                                              </div>\n+                                            </div>\n+                                          ))\n+                                      )}\n+                                    </div>\n+                                  </CardContent>\n+                                </motion.div>\n+                              )}\n+                            </AnimatePresence>\n+                          </Card>\n+                        ))}\n+                      </div>\n+                    )}\n+\n+                    {/* Regular Edit Mode Content */}\n+                    {!isViewMode && (\n+                      <>\n+                        {/* Existing Topic, Subtopic, and Lesson Selection UI */}\n+                      {/* Topic Selection */}\n+                        {selectedGradeId && (\n+                      <div className=\"space-y-2\">\n+                        <div className=\"flex items-center justify-between\">\n+                        <Label htmlFor=\"topic-select\">Topic</Label>\n+                        </div>\n+                        <Select \n+                              value={selectedTopicId || ''} \n+                              onValueChange={handleTopicSelect}\n+                        >\n+                          <SelectTrigger id=\"topic-select\" className=\"w-full\">\n+                            <SelectValue placeholder=\"Select Topic\" />\n+                          </SelectTrigger>\n+                          <SelectContent>\n+                                {topics.map((topic: Topic) => (\n+                                  <SelectItem \n+                                    key={`topic-${topic.id || 'new'}`} \n+                                    value={topic.id || ''}\n+                                  >\n+                                  <div className=\"flex items-center gap-2\">\n+                                  <Layers className=\"h-4 w-4 text-primary\" />\n+                                    {topic.title}\n+                                  </div>\n+                                </SelectItem>\n+                              ))}\n+                          </SelectContent>\n+                        </Select>\n+                        <Button \n+                          variant=\"outline\" \n+                          size=\"sm\" \n+                          className=\"w-full gap-2\"\n+                          onClick={() => setModalState({ ...modalState, showAddTopic: true })}\n+                        >\n+                          <Plus className=\"h-4 w-4\" />\n+                          Add New Topic\n+                        </Button>\n+                      </div>\n+                    )}\n+\n+                    {/* Subtopic Selection */}\n+                        {selectedTopicId && (\n+                      <div className=\"space-y-2\">\n+                        <div className=\"flex items-center justify-between\">\n+                        <Label htmlFor=\"subtopic-select\">Subtopic</Label>\n+                        </div>\n+                        <Select \n+                              value={selectedSubtopicId || ''} \n+                              onValueChange={handleSubtopicSelect}\n+                        >\n+                          <SelectTrigger id=\"subtopic-select\" className=\"w-full\">\n+                            <SelectValue placeholder=\"Select Subtopic\" />\n+                          </SelectTrigger>\n+                          <SelectContent>\n+                                {subtopics\n+                                  .filter(subtopic => subtopic.id)\n+                                  .map((subtopic, index) => (\n+                                    <SelectItem \n+                                      key={subtopic.id || `subtopic-${index}`}\n+                                      value={subtopic.id || ''}\n+                                    >\n+                                      {subtopic.title || 'Untitled Subtopic'}\n+                                    </SelectItem>\n+                                  ))}\n+                          </SelectContent>\n+                        </Select>\n+                        {!isViewMode && (\n+                          <Button \n+                            variant=\"outline\" \n+                            size=\"sm\" \n+                            className=\"w-full gap-2\"\n+                            onClick={() => setModalState({ ...modalState, showAddSubtopic: true })}\n+                          >\n+                            <Plus className=\"h-4 w-4\" />\n+                            Add New Subtopic\n+                          </Button>\n+                        )}\n+                      </div>\n+                    )}\n+\n+                    {/* Lesson Selection */}\n+                        {selectedSubtopicId && (\n+                      <div className=\"space-y-2\">\n+                        <div className=\"flex items-center justify-between\">\n+                          <Label htmlFor=\"lesson-select\">Lesson</Label>\n+                        </div>\n+                          <Select \n+                            value={currentLessonId || ''} \n+                            onValueChange={handleLessonSelect}\n+                            onOpenChange={(open) => {\n+                              setIsDropdownOpen(open);\n+                              if (open) {\n+                                setIsSidebarCollapsed(false);\n+                                setIsSidebarLocked(true);\n+                              } else {\n+                                // Small delay before unlocking to prevent immediate collapse\n+                                setTimeout(() => {\n+                                  setIsSidebarLocked(false);\n+                                }, 100);\n+                              }\n+                            }}\n+                          >\n+                            <SelectTrigger \n+                              id=\"lesson-select\" \n+                              className=\"w-full\"\n+                              onClick={(e) => {\n+                                e.stopPropagation();\n+                                setIsSidebarCollapsed(false);\n+                                setIsSidebarLocked(true);\n+                              }}\n+                            >\n+                              <SelectValue placeholder=\"Select Lesson\" />\n+                            </SelectTrigger>\n+                            <SelectContent>\n+                              {lessons\n+                                .filter((lesson): lesson is Lesson => lesson !== undefined && lesson !== null)\n+                                .map((lesson: Lesson) => (\n+                                  <SelectItem \n+                                    key={`lesson-${lesson.id || 'new'}`} \n+                                    value={lesson.id || ''}\n+                                  >\n+                                    <div className=\"flex items-center gap-2\">\n+                                      <BookOpen className=\"h-4 w-4 text-primary\" />\n+                                      {lesson.title || 'Untitled Lesson'}\n+                                    </div>\n+                                  </SelectItem>\n+                                ))}\n+                            </SelectContent>\n+                          </Select>\n+                    <Button \n+                            variant=\"outline\" \n+                            size=\"sm\" \n+                            className=\"w-full gap-2\"\n+                        onClick={() => setModalState({ ...modalState, showAddLesson: true })}\n+                          >\n+                            <Plus className=\"h-4 w-4\" />\n+                            Add New Lesson\n+                    </Button>\n+                      </div>\n+                        )}\n+                      </>\n+                    )}\n+                  </CardContent>\n+                </Card>\n+              </div>\n+\n+              {/* Collapsed view */}\n+              {isSidebarCollapsed && (\n+                <div className=\"absolute inset-0 flex flex-col items-center pt-12 gap-4\">\n+                  <BookOpen className=\"h-6 w-6 text-muted-foreground\" />\n+                  <div className=\"w-px h-full bg-border\" />\n+                </div>\n+              )}\n+            </Card>\n+          </div>\n+        \n+\n+          {/* Right Content Area */}\n+          <div className=\"flex-1 overflow-y-auto\">\n+            {isNavigating ? (\n+              <div className=\"flex items-center justify-center h-[400px]\">\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n+                <span className=\"ml-3\">Loading...</span>\n+              </div>\n+            ) : (\n+              <>\n+                {!selectedGradeId ? (\n+                  // Question Types Display Section\n+                  <div className=\"space-y-6\">\n+                    <Card>\n+                      <CardHeader>\n+                        <div className=\"flex items-center justify-between\">\n+                          <div>\n+                            <CardTitle className=\"text-xl font-semibold\">Available Question Types</CardTitle>\n+                            <CardDescription>Browse through different question formats and examples</CardDescription>\n+                          </div>\n+                          <TooltipProvider>\n+                            <Tooltip>\n+                              <TooltipTrigger>\n+                                <HelpCircle className=\"h-5 w-5 text-muted-foreground\" />\n+                              </TooltipTrigger>\n+                              <TooltipContent>\n+                                <p>Click on each type to see detailed examples</p>\n+                              </TooltipContent>\n+                            </Tooltip>\n+                          </TooltipProvider>\n+                        </div>\n+                      </CardHeader>\n+                      <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n+                        {Object.entries(QUESTION_TYPES).map(([type, details]) => (\n+                          <Card key={type} className=\"cursor-pointer hover:bg-accent/50 transition-colors\">\n+                            <CardHeader className=\"p-4\">\n+                              <div className=\"flex items-center justify-between mb-2\">\n+                                <Badge variant=\"outline\" className=\"bg-primary/5 text-lg\">\n+                                  {details.label}\n+                                </Badge>\n+                              </div>\n+                              <CardDescription className=\"text-sm\">\n+                                {details.description || 'No description available'}\n+                              </CardDescription>\n+                              <div className=\"mt-4\">\n+                                <div className=\"text-sm font-medium mb-2\">Example:</div>\n+                                <div className=\"p-3 rounded-md bg-muted/50 text-sm\">\n+                                  {type === 'multiple-choice' && (\n+                                    <>\n+                                      <div className=\"font-medium mb-2\">Q: What is the capital of France?</div>\n+                                      <div className=\"space-y-1 pl-4\">\n+                                        <div>A) Paris</div>\n+                                        <div>B) London</div>\n+                                        <div>C) Berlin</div>\n+                                        <div>D) Madrid</div>\n+                                      </div>\n+                                    </>\n+                                  )}\n+                                  {type === 'fill-in-blank' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div>Complete the sentence:</div>\n+                                      <div>The sun rises in the <span className=\"bg-primary/20 px-2 rounded\">_____</span> and sets in the <span className=\"bg-primary/20 px-2 rounded\">_____</span>.</div>\n+                                    </div>\n+                                  )}\n+                                  {type === 'true-false' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div className=\"font-medium\">Statement:</div>\n+                                      <div>The Earth is flat.</div>\n+                                      <div className=\"mt-2\">\n+                                        <Badge variant=\"outline\" className=\"mr-2\">True</Badge>\n+                                        <Badge variant=\"outline\">False</Badge>\n+                                      </div>\n+                                    </div>\n+                                  )}\n+                                  {type === 'matching' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div className=\"font-medium mb-2\">Match the countries with their capitals:</div>\n+                                      <div className=\"grid grid-cols-2 gap-4\">\n+                                        <div>\n+                                          1. France<br />\n+                                          2. Germany<br />\n+                                          3. Spain\n+                                        </div>\n+                                        <div>\n+                                          • Berlin<br />\n+                                          • Paris<br />\n+                                          • Madrid\n+                                        </div>\n+                                      </div>\n+                                    </div>\n+                                  )}\n+                                  {type === 'ordering' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div className=\"font-medium mb-2\">Arrange in chronological order:</div>\n+                                      <div className=\"space-y-1\">\n+                                        <Badge variant=\"outline\" className=\"mr-2\">1</Badge>World War II<br />\n+                                        <Badge variant=\"outline\" className=\"mr-2\">2</Badge>Industrial Revolution<br />\n+                                        <Badge variant=\"outline\" className=\"mr-2\">3</Badge>Renaissance\n+                                      </div>\n+                                    </div>\n+                                  )}\n+                                  {type === 'short-answer' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div className=\"font-medium\">Question:</div>\n+                                      <div>Explain the water cycle in 2-3 sentences.</div>\n+                                      <div className=\"mt-2 p-2 border border-dashed rounded-md border-primary/30\">\n+                                        Answer space\n+                                      </div>\n+                                    </div>\n+                                  )}\n+                                </div>\n+                              </div>\n+                            </CardHeader>\n+                          </Card>\n+                        ))}\n+                      </CardContent>\n+                    </Card>\n+                  </div>\n+                ) : isViewMode ? (\n+                  <div className=\"space-y-6\">\n+                    {selectedGradeId ? (\n+                      <div className=\"grid grid-cols-1 gap-6\">\n+                        {topics.map((topic) => (\n+                          <Card key={topic.id} className=\"border-l-4 border-l-primary\">\n+                            <CardHeader>\n+                              <div className=\"flex items-center justify-between\">\n+                                <h3 className=\"text-lg font-semibold\">{topic.title}</h3>\n+                              </div>\n+                            </CardHeader>\n+                            <CardContent>\n+                              <div className=\"space-y-4\">\n+                                {subtopics\n+                                  .filter(subtopic => subtopic.topic_id === topic.id)\n+                                  .map((subtopic, index) => (\n+                                    <div key={subtopic.id || `subtopic-${index}`} className=\"border-l-2 pl-4\">\n+                                      <h4 className=\"text-md font-medium mb-2\">{subtopic.name || 'Untitled Subtopic'}</h4>\n+                                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n+                                        {lessons\n+                                          .filter(lesson => lesson.subtopic_id === subtopic.id)\n+                                          .map((lesson) => (\n+                                            <Card \n+                                              key={lesson.id} \n+                                              className={cn(\n+                                                \"cursor-pointer transition-all duration-200\",\n+                                                \"hover:shadow-md hover:translate-y-[-2px]\",\n+                                                \"hover:bg-accent/50 hover:border-primary/50\",\n+                                                \"active:translate-y-[0px]\",\n+                                                currentLessonId === lesson.id && \"border-primary bg-accent/50 shadow-md\",\n+                                                \"group\" // Enable group hover effects\n+                                              )}\n+                                              onClick={() => handleLessonSelect(lesson.id)}\n+                                            >\n+                                              <CardHeader className=\"p-4\">\n+                                                <div className=\"flex flex-col gap-2\">\n+                                                  <div className=\"flex items-center justify-between\">\n+                                                    <div className=\"flex items-center gap-2\">\n+                                                      <BookOpen className={cn(\n+                                                        \"h-4 w-4 text-primary\",\n+                                                        \"transition-transform duration-200\",\n+                                                        \"group-hover:scale-110\"\n+                                                      )} />\n+                                                      <span className=\"font-medium\">{lesson.title}</span>\n+                                                    </div>\n+                                                    <Button\n+                                                      variant=\"outline\"\n+                                                      size=\"sm\"\n+                                                      className={cn(\n+                                                        \"opacity-0 group-hover:opacity-100\",\n+                                                        \"transition-all duration-200\",\n+                                                        \"hover:bg-primary hover:text-primary-foreground\"\n+                                                      )}\n+                                                      disabled={!lesson.content || currentLessonId !== lesson.id}\n+                                                      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n+                                                        e.stopPropagation();\n+                                                        window.location.href = `/teacher/lessons/${lesson.id}`;\n+                                                      }}\n+                                                    >\n+                                                      Start Lesson\n+                                                    </Button>\n+                                                  </div>\n+                                                  <div className=\"flex items-center gap-2\">\n+                                                    <Badge variant=\"outline\" className={cn(\n+                                                      \"bg-primary/5\",\n+                                                      \"transition-colors duration-200\",\n+                                                      \"group-hover:bg-primary/10\"\n+                                                    )}>\n+                                                      {lesson.questions?.length || 0} Questions\n+                                                    </Badge>\n+                                                    <Badge variant=\"outline\" className={cn(\n+                                                      \"bg-primary/5\",\n+                                                      \"transition-colors duration-200\",\n+                                                      \"group-hover:bg-primary/10\"\n+                                                    )}>\n+                                                      {lesson.activities?.length || 0} Activities\n+                                                    </Badge>\n+                                                  </div>\n+                                                </div>\n+                                              </CardHeader>\n+                                            </Card>\n+                                          ))}\n+                                      </div>\n+                                    </div>\n+                                  ))}\n+                              </div>\n+                            </CardContent>\n+                          </Card>\n+                        ))}\n+                      </div>\n+                    ) : (\n+                      <div className=\"text-center py-20\">\n+                        <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n+                        <h3 className=\"text-lg font-medium\">Select a Grade</h3>\n+                        <p className=\"text-sm text-muted-foreground\">\n+                          Choose a grade from the left panel to start managing content\n+                        </p>\n+                      </div>\n+                    )}\n+                  </div>\n+                ) : (\n+                  // Edit Mode Content\n+                  <div className=\"space-y-4\">\n+                    {/* Lesson Title */}\n+                    <Card>\n+                      <CardHeader>\n+                        <div className=\"flex items-center justify-between mb-4\">\n+                          <h2 className=\"text-2xl font-bold\">Lesson Content</h2>\n+                                                    <Button\n+                                                      variant=\"outline\"\n+                                                      size=\"sm\"\n+                            onClick={() => setIsContentEditorOpen(true)}\n+                          >\n+                            <Pencil className=\"h-4 w-4 mr-2\" />\n+                            Edit Content\n+                          </Button>\n+                        </div>\n+                      </CardHeader>\n+                      <CardContent className=\"space-y-4\">\n+                        {/* Lesson Title */}\n+                        <div className=\"flex items-center justify-between\">\n+                          <div className=\"space-y-1\">\n+                            <Label>Lesson Title</Label>\n+                            <InlineEdit\n+                              value={lessonTitle}\n+                              onSave={async (newTitle) => {\n+                                setLessonTitle(newTitle);\n+                                await handleSaveLesson();\n+                              }}\n+                              isEditing={isEditingTitle}\n+                              setIsEditing={setIsEditingTitle}\n+                              placeholder=\"Enter lesson title\"\n+                              className=\"text-lg font-medium\"\n+                            />\n+                          </div>\n+                        </div>\n+\n+                        {/* Content Editor and Display */}\n+                        <div className=\"space-y-4\">\n+                          {isContentEditorOpen ? (\n+                            <div className=\"border rounded-lg p-4\">\n+                              <div className=\"mb-4\">\n+                                <Label>Content Heading</Label>\n+                                <InlineEdit\n+                                  value={contentHeading}\n+                                  onSave={(newHeading) => setContentHeading(newHeading)}\n+                                  isEditing={isEditingHeading}\n+                                  setIsEditing={setIsEditingHeading}\n+                                  placeholder=\"Add content heading\"\n+                                  className=\"text-base text-muted-foreground\"\n+                                />\n+                              </div>\n+                              <RichTextEditor\n+                                value={lessonContent}\n+                                onChange={setLessonContent}\n+                                onSave={async (content) => {\n+                                  await handleContentSave(content);\n+                                  setIsContentEditorOpen(false);\n+                                }}\n+                                placeholder=\"Add lesson content here...\"\n+                              />\n+                            </div>\n+                          ) : lessonContent ? (\n+                            <div className=\"prose prose-sm max-w-none\">\n+                              {contentHeading && (\n+                                <h3 className=\"text-lg font-semibold mb-2\">{contentHeading}</h3>\n+                              )}\n+                              <div dangerouslySetInnerHTML={{ __html: lessonContent }} />\n+                            </div>\n+                          ) : (\n+                            <div className=\"text-center py-8 text-muted-foreground\">\n+                              Click 'Edit Content' to add lesson content\n+                            </div>\n+                          )}\n+                        </div>\n+                      </CardContent>\n+                    </Card>\n+\n+                    {/* Tabs */}\n+                    <Tabs defaultValue=\"questions\" className=\"mt-6\">\n+                    <TabsList className=\"grid w-full grid-cols-2\">\n+                        <TabsTrigger value=\"questions\">\n+                          <MessageSquare className=\"h-4 w-4 mr-2\" />\n+                        Questions\n+                      </TabsTrigger>\n+                        <TabsTrigger value=\"activities\">\n+                          <ActivityIcon className=\"h-4 w-4 mr-2\" />\n+                        Activities\n+                      </TabsTrigger>\n+                    </TabsList>\n+\n+                      {/* Questions Tab */}\n+                      <TabsContent value=\"questions\" className=\"space-y-4\">\n+                      <CardHeader>\n+                          <CardDescription>Add and manage questions for this lesson</CardDescription>\n+                      </CardHeader>\n+                        {questions.map((question, index) => (\n+                          <Card key={index} className={cn(\n+                            \"relative border-l-4 transition-colors duration-200\",\n+                            expandedQuestion === index ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\n+                          )}>\n+                            <CardHeader className=\"pb-3\">\n+                              <div className=\"flex items-center justify-between gap-4\">\n+                                <div className=\"flex items-center gap-3 min-w-0 flex-1\">\n+                                  <div className=\"flex items-center gap-2 flex-shrink-0\">\n+                                    <span className=\"px-2 py-1 bg-primary/10 rounded-md text-sm font-semibold text-primary whitespace-nowrap\">\n+                                      Q {index + 1}\n+                                    </span>\n+                                    <Badge variant=\"outline\" className=\"whitespace-nowrap\">\n+                                      {QUESTION_TYPES[question.type as keyof typeof QUESTION_TYPES]?.label || question.type}\n+                                    </Badge>\n+                                    {question.isDraft && (\n+                                      <Badge variant=\"secondary\" className=\"whitespace-nowrap\">Draft</Badge>\n+                                )}\n+                                  </div>\n+                                      {expandedQuestion !== index && (\n+                                        <div className=\"text-sm text-muted-foreground truncate\">\n+                                          {question.title || 'No question text'} - {question.data?.content || 'No question texts'}\n+                                        </div>\n+                                      )}\n+                                    </div>\n+                                    <div className=\"flex items-center gap-2 flex-shrink-0\">\n+                                      <Button\n+                                        variant=\"ghost\"\n+                                        size=\"sm\"\n+                                        onClick={() => handleQuestionExpand(index)}\n+                                      >\n+                                        {expandedQuestion === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n+                                      </Button>\n+                                      <Button\n+                                        variant=\"ghost\"\n+                                        size=\"sm\"\n+                                        onClick={() => handleRemoveQuestion(index)}\n+                                      >\n+                                        <Trash2 className=\"h-4 w-4 text-destructive\" />\n+                                      </Button>\n+                                    </div>\n+                                  </div>\n+                                </CardHeader>\n+                                {expandedQuestion === index && (\n+                                  <CardContent>\n+                                    <QuestionForm\n+                                      key={index}\n+                                      question={{ \n+                                        ...question, \n+                                        lesson_id: currentLessonId || '',\n+                                        type: isValidQuestionType(question.type) ? question.type : 'speaking',\n+                                        data: {\n+                                          prompt: question.data?.prompt ?? '',\n+                                          teacher_script: question.data?.teacher_script ?? '',\n+                                          followup_prompt: question.data?.followup_prompt ?? [],\n+                                          sample_answer: question.data?.sample_answer ?? '',\n+                                          \n+                                        } \n+                                      }}\n+                                      index={index}\n+                                      onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\n+                                        await handleUpdateQuestion(index, {\n+                                          ...updatedQuestion,\n+                                          data: {\n+                                            prompt: updatedQuestion.data?.prompt ?? '',\n+                                            teacher_script: updatedQuestion.data?.teacher_script ?? '',\n+                                            followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\n+                                            sample_answer: updatedQuestion.data?.sample_answer ?? '',\n+                                            metadata: updatedQuestion.metadata ?? {},\n+                                            },\n+                                            correct_answer: updatedQuestion.correct_answer ?? '',\n+                                            content: updatedQuestion.content ?? ''  // Add default value\n+                                        });\n+                                      }}\n+                                      onRemove={handleRemoveQuestion}\n+                                      onAddExercisePrompt={handleAddExercisePrompt}\n+                                      onRemoveExercisePrompt={handleRemoveExercisePrompt}\n+                                      onExercisePromptChange={handleExercisePromptChange}\n+                                    /><Button \n+                                    size=\"sm\"\n+                                    variant=\"outline\"\n+                                    onClick={() => handleSaveQuestion(question, index)}\n+                                    className=\"ml-2\"\n+                                  >\n+                                    {questionSaveStatuses.find(s => s.id === question.id)?.status === 'saving' ? (\n+                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n+                                    ) : (\n+                                      <Save className=\"h-4 w-4 mr-2\" />\n+                                    )}\n+                                    Save Question\n+                                                    </Button>\n+                                    {/* Exercise Prompts with Save Buttons */}\n+                                    {question.exercisePrompts?.map((prompt, promptIndex) => (\n+                                      <div key={`${question.id}-prompt-${promptIndex}`} className=\"mt-4\"> {/* Updated key */}\n+                                        <div className=\"flex items-center justify-between mb-2\">\n+                                          <h4 className=\"text-sm font-medium\">Exercise Prompt {promptIndex + 1}</h4>\n+                                          <div className=\"flex items-center gap-2\">\n+                                            <TooltipProvider>\n+                                              <Tooltip>\n+                                                <TooltipTrigger asChild>\n+                                                  <Button\n+                                                    size=\"sm\"\n+                                                    variant=\"outline\"\n+                                                    onClick={() => handleSavePrompt(question.id, prompt, promptIndex)}\n+                                                    disabled={promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving'}\n+                                                  >\n+                                                    {promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving' ? (\n+                                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n+                                                    ) : (\n+                                                      <Save className=\"h-4 w-4 mr-2\" />\n+                                                    )}\n+                                                    Save Prompt\n+                                                  </Button>\n+                                                </TooltipTrigger>\n+                                                <TooltipContent>\n+                                                  {`Status: ${promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}`}\n+                                                </TooltipContent>\n+                                              </Tooltip>\n+                                            </TooltipProvider>\n+                                            <Badge variant={\n+                                              promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saved'\n+                                                ? 'secondary'\n+                                                : promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'error'\n+                                                ? 'destructive'\n+                                                : 'default'\n+                                            }>\n+                                              {promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}\n+                                            </Badge>\n+                                                  </div>\n+                                        </div>\n+                                        <ExercisePromptCard\n+                                          key={prompt.id} // Add a unique key here\n+                                          prompt={prompt}\n+                                          promptIndex={promptIndex}\n+                                          onRemove={() => handleRemoveExercisePrompt(index, promptIndex)}\n+                                          onUpdate={(updatedPrompt: ExercisePrompt) => {\n+                                            // Prevent duplicate updates\n+                                            if (updatedPrompt.id === prompt.id) {\n+                                              handleExercisePromptChange(index, promptIndex, updatedPrompt);\n+                                            }\n+                                          }}\n+                                        />\n+                                      </div>\n+                                    ))}\n+                                  </CardContent>\n+                                )}\n+                              </Card>\n+                            ))}\n+\n+                            {/* Add Question Button */}\n+                            <div className=\"flex items-center justify-between\">\n+                              <QuestionTypeSelect \n+                                value={selectedQuestionType} \n+                                onChange={handleQuestionTypeChange}\n+                              />\n+                                        <Button\n+                                          onClick={handleAddQuestion}\n+                                          disabled={!selectedQuestionType}\n+                                        >\n+                                <Plus className=\"h-4 w-4 mr-2\" />\n+                                          Add Question\n+                                        </Button>\n+                                      </div>\n+                      </TabsContent>\n+\n+                      {/* Activities Tab */}\n+                      <TabsContent value=\"activities\" className=\"space-y-4\">\n+                      <CardHeader>\n+                          <CardDescription>Add and manage activities for this lesson</CardDescription>\n+                      </CardHeader>\n+                        {activities.map((activity, index) => (\n+                          <Card key={index}>\n+                            <CardHeader className=\"pb-3\">\n+                              <div className=\"flex items-center justify-between\">\n+                                  <div className=\"flex items-center gap-2\">\n+                                  <Badge variant=\"outline\">Activity {index + 1}</Badge>\n+                                  </div>\n+                                <div className=\"flex items-center gap-2\">\n+                                  <Button\n+                                    variant=\"ghost\"\n+                                    size=\"sm\"\n+                                    onClick={() => handleActivityExpand(index)}\n+                                  >\n+                                    {expandedActivity === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n+                                  </Button>\n+                                  <Button\n+                                    variant=\"ghost\"\n+                                    size=\"sm\"\n+                                    onClick={() => handleRemoveActivity(index)}\n+                                  >\n+                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\n+                                  </Button>\n+                                </div>\n+                              </div>\n+                            </CardHeader>\n+                            {expandedActivity === index && (\n+                              <CardContent>\n+                                <div className=\"space-y-4\">\n+                                  <div className=\"space-y-2\">\n+                                    <Label>Instructions</Label>\n+                                    <Textarea\n+                                      value={activity.instructions}\n+                                      onChange={(e) => handleUpdateActivity(index, {\n+                                        ...activity,\n+                                        instructions: e.target.value\n+                                      })}\n+                                      placeholder=\"Enter activity instructions\"\n+                                    />\n+                                  </div>\n+                                    \n+                                    {/* Media Section */}\n+                                    <div className=\"space-y-2\">\n+                                      <Label>Media</Label>\n+                                      {activity.media?.map((media, mediaIndex) => (\n+                                        <div key={mediaIndex} className=\"flex items-center gap-2\">\n+                                          <Input\n+                                            value={media.url}\n+                                            onChange={(e) => {\n+                                              const updatedMedia = [...(activity.media || [])];\n+                                              updatedMedia[mediaIndex] = {\n+                                                type: media.type,\n+                                                url: e.target.value\n+                                              };\n+                                              handleUpdateActivity(index, {\n+                                                ...activity,\n+                                                media: updatedMedia\n+                                              });\n+                                            }}\n+                                            placeholder=\"Media URL\"\n+                                          />\n+                                          <Select\n+                                            value={media.type}\n+                                            onValueChange={(value) => {\n+                                              const updatedMedia = [...(activity.media || [])];\n+                                              updatedMedia[mediaIndex] = {\n+                                                type: value as 'image' | 'gif' | 'video',\n+                                                url: media.url\n+                                              };\n+                                              handleUpdateActivity(index, {\n+                                                ...activity,\n+                                                media: updatedMedia\n+                                              });\n+                                            }}\n+                                          >\n+                                            <SelectTrigger className=\"w-[120px]\">\n+                                              <SelectValue placeholder=\"Type\" />\n+                                            </SelectTrigger>\n+                                            <SelectContent>\n+                                              <SelectItem value=\"image\">Image</SelectItem>\n+                                              <SelectItem value=\"gif\">GIF</SelectItem>\n+                                              <SelectItem value=\"video\">Video</SelectItem>\n+                                            </SelectContent>\n+                                          </Select>\n+                                <Button\n+                                            variant=\"ghost\"\n+                                            size=\"sm\"\n+                                  onClick={() => {\n+                                              const updatedMedia = (activity.media || []).filter((_, i) => i !== mediaIndex);\n+                                              handleUpdateActivity(index, {\n+                                                ...activity,\n+                                                media: updatedMedia\n+                                          });\n+                                          }}\n+                                  >\n+                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\n+                                  </Button>\n+                                </div>\n+                                        ))}\n+                                  <Button\n+                                    variant=\"outline\"\n+                                    size=\"sm\"\n+                                            onClick={() => {\n+                                              handleUpdateActivity(index, {\n+                                                ...activity,\n+                                                media: [\n+                                                  ...(activity.media || [])  ,\n+                                                  { url: '', type: 'image' }\n+                                                ]\n+                                              });\n+                                            }}\n+                                  >\n+                                    <Plus className=\"h-4 w-4 mr-2\" />\n+                                            Add Media\n+                                  </Button>\n+                                </div>\n+                                      </div>\n+                                    </CardContent>\n+                                  )}\n+                                </Card>\n+                              ))}\n+\n+                              {/* Add Activity Button */}\n+                              <Button\n+                                onClick={handleAddActivity}\n+                                className=\"w-full\"\n+                              >\n+                                <Plus className=\"h-4 w-4 mr-2\" />\n+                                Add Activity\n+                              </Button>\n+                          </TabsContent>\n+                        </Tabs>\n+                        </div>\n+                )}\n+\n+                    {/* Floating Save Button */}\n+                    <div className=\"fixed bottom-8 right-8 flex items-center gap-4\">\n+                      {saveProgress !== 'idle' && (\n+                        <div className={cn(\n+                          \"flex items-center gap-2 rounded-lg px-4 py-2 shadow-lg\",\n+                          {\n+                            \"bg-background border\": saveProgress === 'saving',\n+                            \"bg-green-500 text-white\": saveProgress === 'saved',\n+                            \"bg-destructive text-destructive-foreground\": saveProgress === 'error'\n+                          }\n+                        )}>\n+                          {saveProgress === 'saving' && (\n+                            <>\n+                              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n+                              <span className=\"text-sm\">Saving changes...</span>\n+                            </>\n+                          )}\n+                          {saveProgress === 'saved' && (\n+                            <>\n+                              <Check className=\"h-4 w-4\" />\n+                              <span className=\"text-sm\">Changes saved</span>\n+                            </>\n+                          )}\n+                          {saveProgress === 'error' && (\n+                            <>\n+                              <X className=\"h-4 w-4\" />\n+                              <span className=\"text-sm\">Error saving changes</span>\n+                            </>\n+                          )}\n+                        </div>\n+                      )}\n+                      <Button\n+                        onClick={handleSaveLesson}\n+                        disabled={saveProgress === 'saving'}\n+                        className=\"shadow-lg\"\n+                      >\n+                        {saveProgress === 'saving' ? (\n+                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n+                        ) : (\n+                          <Save className=\"h-4 w-4 mr-2\" />\n+                        )}\n+                        {saveProgress === 'saving' ? 'Saving...' : 'Save Lesson'}\n+                      </Button>\n+                    </div>\n+                  </>\n+            )}\n+    </div>\n+    \n+\n+      {/* Floating Save Button */}\n+      {selectedSubtopicId && currentLessonId && (\n+          <div className=\"fixed bottom-4 right-4 flex flex-col gap-2\">\n+            <TooltipProvider>\n+              <Tooltip>\n+                <TooltipTrigger asChild>\n+                  <Button\n+                    size=\"icon\"\n+                    className=\"rounded-full h-12 w-12 shadow-lg\"\n+                    onClick={handleSaveLesson}\n+                    disabled={!selectedSubtopicId || !lessonTitle || questions.length === 0}\n+                  >\n+                    <Save className=\"h-6 w-6\" />\n+                  </Button>\n+                </TooltipTrigger>\n+                <TooltipContent>\n+                  <p>Save Lesson (Ctrl+S)</p>\n+                </TooltipContent>\n+              </Tooltip>\n+            </TooltipProvider>\n+          </div>\n+        )}\n+        <SaveFeedback />\n+\n+        {/* Add Grade Modal - do not delete */}\n+        {/* {modalState.showAddGrade && (\n+          <Dialog \n+            open={modalState.showAddGrade} \n+            onOpenChange={(open) => handleModalStateChange('showAddGrade', open)}\n+          >\n+            <DialogContent \n+              className=\"sm:max-w-[425px]\"\n+              onEscapeKeyDown={cleanupModalState}\n+              onPointerDownOutside={cleanupModalState}\n+            >\n+              <DialogHeader>\n+                <DialogTitle>Add New Grade</DialogTitle>\n+                <DialogDescription>Enter the details for the new grade.</DialogDescription>\n+              </DialogHeader>\n+              <div className=\"space-y-4 py-4\">\n+                <div className=\"space-y-2\">\n+                  <Label htmlFor=\"grade-name\">Grade Name</Label>\n+                  <Input\n+                    id=\"grade-name\"\n+                    value={newItemData.name}\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n+                    placeholder=\"Enter grade name\"\n+                  />\n+      </div>\n+              </div>\n+              <DialogFooter>\n+                <Button variant=\"outline\" onClick={() => {\n+                  setModalState({ ...modalState, showAddGrade: false });\n+                  setNewItemData({ name: '', description: '' });\n+                }}>\n+                  Cancel\n+                </Button>\n+                <Button onClick={handleCreateGrade} disabled={!newItemData.name}>Create Grade</Button>\n+              </DialogFooter>\n+            </DialogContent>\n+          </Dialog>\n+        )} */}\n+\n+        {/* Add Topic Modal */}\n+        {modalState.showAddTopic && (\n+          <Dialog \n+            open={modalState.showAddTopic} \n+            onOpenChange={(open) => handleModalStateChange('showAddTopic', open)}\n+          >\n+            <DialogContent \n+              className=\"sm:max-w-[425px]\"\n+              onEscapeKeyDown={cleanupModalState}\n+              onPointerDownOutside={cleanupModalState}\n+            >\n+              <DialogHeader>\n+                <DialogTitle>Add New Topic</DialogTitle>\n+                <DialogDescription>Enter the details for the new topic.</DialogDescription>\n+              </DialogHeader>\n+              <div className=\"space-y-4 py-4\">\n+                <div className=\"space-y-2\">\n+                  <Label htmlFor=\"topic-name\">Topic Name</Label>\n+                  <Input\n+                    id=\"topic-name\"\n+                    value={newItemData.name}\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n+                    placeholder=\"Enter topic name\"\n+                  />\n+                </div>\n+              </div>\n+              <DialogFooter>\n+                <Button variant=\"outline\" onClick={() => {\n+                  setModalState({ ...modalState, showAddTopic: false });\n+                  setNewItemData({ name: '', description: '' });\n+                }}>\n+                  Cancel\n+                </Button>\n+                <Button onClick={handleCreateTopic} disabled={!newItemData.name}>Create Topic</Button>\n+              </DialogFooter>\n+            </DialogContent>\n+          </Dialog>\n+        )}\n+\n+        {/* Add Subtopic Modal */}\n+        {modalState.showAddSubtopic && (\n+          <Dialog \n+            open={modalState.showAddSubtopic} \n+            onOpenChange={(open) => handleModalStateChange('showAddSubtopic', open)}\n+          >\n+            <DialogContent \n+              className=\"sm:max-w-[425px]\"\n+              onEscapeKeyDown={cleanupModalState}\n+              onPointerDownOutside={cleanupModalState}\n+            >\n+              <DialogHeader>\n+                <DialogTitle>Add New Subtopic</DialogTitle>\n+                <DialogDescription>Enter the details for the new subtopic.</DialogDescription>\n+              </DialogHeader>\n+              <div className=\"space-y-4 py-4\">\n+                <div className=\"space-y-2\">\n+                  <Label htmlFor=\"subtopic-name\">Subtopic Name</Label>\n+                  <Input\n+                    id=\"subtopic-name\"\n+                    value={newItemData.name}\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n+                    placeholder=\"Enter subtopic name\"\n+                  />\n+                </div>\n+              </div>\n+              <DialogFooter>\n+                <Button variant=\"outline\" onClick={() => {\n+                  setModalState({ ...modalState, showAddSubtopic: false });\n+                  setNewItemData({ name: '', description: '' });\n+                }}>\n+                  Cancel\n+                </Button>\n+                <Button onClick={() => handleCreateSubtopic({ title: newItemData.name })} disabled={!newItemData.name}>Create Subtopic</Button>\n+              </DialogFooter>\n+            </DialogContent>\n+          </Dialog>\n+        )}\n+\n+        {/* Add Lesson Modal */}\n+        {modalState.showAddLesson && (\n+          <Dialog \n+            open={modalState.showAddLesson} \n+            onOpenChange={(open) => handleModalStateChange('showAddLesson', open)}\n+          >\n+            <DialogContent \n+              className=\"sm:max-w-[425px]\"\n+              onEscapeKeyDown={cleanupModalState}\n+              onPointerDownOutside={cleanupModalState}\n+            >\n+              <DialogHeader>\n+                <DialogTitle>Add New Lesson</DialogTitle>\n+                <DialogDescription>Enter the details for the new lesson.</DialogDescription>\n+              </DialogHeader>\n+              <div className=\"space-y-4 py-4\">\n+                <div className=\"space-y-2\">\n+                  <Label htmlFor=\"lesson-name\">Lesson Title</Label>\n+                  <Input\n+                    id=\"lesson-name\"\n+                    value={newItemData.name}\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n+                    placeholder=\"Enter lesson title\"\n+                  />\n+                </div>\n+              </div>\n+              <DialogFooter>\n+                <Button variant=\"outline\" onClick={() => {\n+                  setModalState({ ...modalState, showAddLesson: false });\n+                  setNewItemData({ name: '', description: '' });\n+                }}>\n+                  Cancel\n+                </Button>\n+                <Button onClick={handleCreateLesson} disabled={!newItemData.name}>Create Lesson</Button>\n+              </DialogFooter>\n+            </DialogContent>\n+          </Dialog>\n+        )}\n+      </div>\n+      <Toaster />\n+      </div>\n+  );\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739966886740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -380,8 +380,15 @@\n   // Add these states\n   const [isLoadingSubtopics, setIsLoadingSubtopics] = useState(false);\n   const [isLoadingLessons, setIsLoadingLessons] = useState(false);\n \n+  // Add these state variables\n+  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n+  const [itemToDelete, setItemToDelete] = useState<{\n+    id: string;\n+    type: 'topic' | 'subtopic' | 'lesson';\n+    title: string;\n+  } | null>(null);\n   // Event handlers\n   const handleQuestionTypeChange = useCallback((type: string) => {\n     if (isQuestionType(type)) {\n       setSelectedQuestionType(type);\n"
                },
                {
                    "date": 1739967120351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -387,8 +387,9 @@\n     id: string;\n     type: 'topic' | 'subtopic' | 'lesson';\n     title: string;\n   } | null>(null);\n+\n   // Event handlers\n   const handleQuestionTypeChange = useCallback((type: string) => {\n     if (isQuestionType(type)) {\n       setSelectedQuestionType(type);\n"
                },
                {
                    "date": 1739967381324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,9 @@\n import { PostgrestError } from '@supabase/supabase-js';\n import { Question as ContentQuestion } from './types';  // Import the specific type\n import { Trash } from \"lucide-react\";\n import { AnimatePresence, motion } from 'framer-motion';\n+import { ContentDisplay } from \"./components/content-display\";\n \n \n // Update the API endpoint to match your backend route\n const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\n"
                },
                {
                    "date": 1739967446358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,8 @@\n import { PostgrestError } from '@supabase/supabase-js';\n import { Question as ContentQuestion } from './types';  // Import the specific type\n import { Trash } from \"lucide-react\";\n import { AnimatePresence, motion } from 'framer-motion';\n-import { ContentDisplay } from \"./components/content-display\";\n \n \n // Update the API endpoint to match your backend route\n const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\n"
                },
                {
                    "date": 1739967477508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,9 @@\n import { PostgrestError } from '@supabase/supabase-js';\n import { Question as ContentQuestion } from './types';  // Import the specific type\n import { Trash } from \"lucide-react\";\n import { AnimatePresence, motion } from 'framer-motion';\n+import { ContentDisplay } from \"./components/content-display\";\n \n \n // Update the API endpoint to match your backend route\n const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\n@@ -290,3032 +291,21 @@\n     sampleAnswer: question?.correct_answer || ''\n   };\n };\n \n-export default function LessonManagementPage() {\n-  // State declarations\n-  \n-  const [selectedGradeId, setSelectedGradeId] = useState<string | null>(null);\n-  const [selectedTopicId, setSelectedTopicId] = useState<string | null>(null);\n-  const [selectedSubtopicId, setSelectedSubtopicId] = useState<string | null>(null);\n-  const [lessonTitle, setLessonTitle] = useState<string>('');\n-  const [currentLessonId, setCurrentLessonId] = useState<string | null>(null);\n-  const [questions, setQuestions] = useState<Question[]>([]);\n-  const [saveProgress, setSaveProgress] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');\n-  const [activities, setActivities] = useState<Activity[]>([]);\n-  const [localBuffer, setLocalBuffer] = useState<{ timestamp: number; data: any } | null>(null);\n-  const [lastSavedToServer, setLastSavedToServer] = useState<number>(Date.now());\n-  const [selectedQuestionType, setSelectedQuestionType] = useState<string>('');\n-  const [editingQuestionIndex, setEditingQuestionIndex] = useState<number | null>(null);\n-  const [showHelpTips, setShowHelpTips] = useState(true);\n-  const [isNavigating, setIsNavigating] = useState(false);\n-  const [lessons, setLessons] = useState<Lesson[]>([]);\n-  const [grades, setGrades] = useState<Grade[]>([]);\n-  const [topics, setTopics] = useState<Topic[]>([]);\n-  const [subtopics, setSubtopics] = useState<SubTopic[]>([]);\n-  const [contentHeading, setContentHeading] = useState<string>('');\n-    // Add with your other state declarations\n-  const [isContentExpanded, setIsContentExpanded] = useState<boolean>(false);\n-  const [modalState, setModalState] = useState({\n-    showAddGrade: false,\n-    showAddTopic: false,\n-    showAddSubtopic: false,\n-    showAddLesson: false\n-  });\n-  const [isViewMode, setIsViewMode] = useState<boolean>(true);\n-  const [expandedGrade, setExpandedGrade] = useState<string | null>(null);\n-  const [expandedTopic, setExpandedTopic] = useState<string | null>(null);\n-  const [expandedSubtopic, setExpandedSubtopic] = useState<string | null>(null);\n-  const [expandedQuestion, setExpandedQuestion] = useState<number | null>(null);\n-  const [expandedActivity, setExpandedActivity] = useState<number | null>(null);\n-  const [newItemData, setNewItemData] = useState({\n-    name: '',\n-    description: ''\n-  });\n-  const [lessonContent, setLessonContent] = useState<string>('');\n-  const [isContentEditorOpen, setIsContentEditorOpen] = useState(false);\n-  const [isEditingTitle, setIsEditingTitle] = useState<boolean>(false);\n-  const [isEditingHeading, setIsEditingHeading] = useState<boolean>(false);\n-  const [isEditingDescription, setIsEditingDescription] = useState<boolean>(false);\n-  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\n-  const [isSidebarLocked, setIsSidebarLocked] = useState(true);\n-  const [alertDialogState, setAlertDialogState] = useState<{\n-    isOpen: boolean;\n-    title: string;\n-    message: string;\n-    onConfirm: (value?: unknown) => void;\n-  }>({\n-    isOpen: false,\n-    title: '',\n-    message: '',\n-    onConfirm: () => {}\n-  });\n+export default function ContentManagementPage() {\n+  return (\n+    <div className=\"container mx-auto py-6\">\n+      <div className=\"grid grid-cols-12 gap-6\">\n+        {/* Left sidebar - keep existing content */}\n+        <div className=\"col-span-3\">\n+          {/* Existing sidebar content */}\n+        </div>\n \n-  const { \n-    selectedGrade,\n-    setSelectedGrade,\n-    selectedTopic,\n-    setSelectedTopic,\n-    selectedSubtopic,\n-    setSelectedSubtopic,\n-    selectedLesson,\n-    setSelectedLesson\n-  } = useContentStore();\n-\n-  // Add new state for tracking save status\n-  interface SaveStatus {\n-    id: string;\n-    status: 'draft' | 'saved' | 'saving' | 'error' | 'draft';\n-    lastSaved?: string;\n-  }\n-\n-  const [questionSaveStatuses, setQuestionSaveStatuses] = useState<Array<{\n-    id: string;\n-    status: 'idle' | 'saving' | 'saved' | 'error' | 'draft';\n-  }>>([]);\n-  const [promptSaveStatuses, setPromptSaveStatuses] = useState<SaveStatus[]>([]);\n-\n-  // Add this state to track dropdown state\n-  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n-\n-  // Add these states\n-  const [isLoadingSubtopics, setIsLoadingSubtopics] = useState(false);\n-  const [isLoadingLessons, setIsLoadingLessons] = useState(false);\n-\n-  // Add these state variables\n-  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n-  const [itemToDelete, setItemToDelete] = useState<{\n-    id: string;\n-    type: 'topic' | 'subtopic' | 'lesson';\n-    title: string;\n-  } | null>(null);\n-\n-  // Event handlers\n-  const handleQuestionTypeChange = useCallback((type: string) => {\n-    if (isQuestionType(type)) {\n-      setSelectedQuestionType(type);\n-    }\n-  }, []);\n-\n-  const handleAddQuestion = useCallback(() => {\n-    if (!selectedQuestionType || !isQuestionType(selectedQuestionType)) return;\n-\n-    const defaultData = QUESTION_TYPES[selectedQuestionType].defaultData;\n-    const newQuestion: Question = {\n-      id: crypto.randomUUID(),\n-      type: selectedQuestionType,\n-      //data: {},\n-      title: 'New Question',\n-      content: '',\n-      lesson_id: currentLessonId || '',\n-      metadata: {},\n-      data: {\n-        ...defaultData,\n-        prompt: '',\n-        teacher_script: '',\n-        followup_prompt: [],\n-        sample_answer: ''\n-      },\n-      correct_answer: '',\n-      exercisePrompts: [],\n-      isDraft: true\n-    };\n-\n-    setQuestions(prev => [...prev, newQuestion]);\n-    setQuestionSaveStatuses(prev => [\n-      ...prev,\n-      { id: newQuestion.id, status: 'draft' }\n-    ]);\n-    setSelectedQuestionType('');\n-  }, [selectedQuestionType, currentLessonId]);\n-\n-  const handleRemoveQuestion = async (index: number) => {\n-    try {\n-      const questionToDelete = questions[index];\n-      \n-      // Delete related exercise prompts first\n-      const { error: promptError } = await supabase\n-        .from('exercise_prompts')\n-        .delete()\n-        .eq('question_id', questionToDelete.id);\n-\n-      if (promptError) throw promptError;\n-\n-      // Then delete the question\n-      const { error: questionError } = await supabase\n-        .from('questions')\n-        .delete()\n-        .eq('id', questionToDelete.id);\n-\n-      if (questionError) throw questionError;\n-\n-      // Update local state\n-      const newQuestions = questions.filter((_, i) => i !== index);\n-      setQuestions(newQuestions);\n-      \n-      toast.success('Question and related prompts deleted successfully');\n-    } catch (error) {\n-      console.error('Error deleting question:', error);\n-      toast.error('Failed to delete question and prompts');\n-    }\n-  };\n-\n-  const handleUpdateQuestion = useCallback(async (index: number, updatedQuestion: Question) => {\n-    const newQuestions = [...questions];\n-    newQuestions[index] = updatedQuestion;\n-    setQuestions(newQuestions);\n-    setQuestionSaveStatuses(prev => prev.map((status, i) => \n-      i === index ? { ...status, status: 'draft' } : status\n-    ));\n-  }, [questions]);\n-\n-  const handleAddExercisePrompt = useCallback((questionIndex: number) => {\n-    setQuestions(prev => prev.map((question, i) => {\n-      if (i === questionIndex) {\n-        return {\n-          ...question,\n-          exercisePrompts: [\n-            ...question.exercisePrompts,\n-            {\n-              id: crypto.randomUUID(),\n-              text: '',\n-              media: '',\n-              type: 'image',\n-              narration: 'Your turn',\n-              saytext: 'Say: ',\n-              metadata: {\n-                estimatedTime: 0\n-              },\n-              created_at: new Date().toISOString(),\n-              updated_at: new Date().toISOString()\n-            }\n-          ]\n-        };\n-      }\n-      return question;\n-    }));\n-  }, []);\n-\n-  const handleRemoveExercisePrompt = useCallback((questionIndex: number, promptIndex: number) => {\n-    setQuestions(prev => prev.map((question, i) => {\n-      if (i === questionIndex) {\n-        return {\n-          ...question,\n-          exercisePrompts: question.exercisePrompts.filter((_, j) => j !== promptIndex)\n-        };\n-      }\n-      return question;\n-    }));\n-  }, []);\n-\n-  const handleExercisePromptChange = useCallback(async (\n-    questionIndex: number,\n-    promptIndex: number,\n-    updatedPrompt: ExercisePrompt\n-  ) => {\n-    try {\n-      const promptUpdate = {\n-        id: updatedPrompt.id,\n-        question_id: updatedPrompt.question_id,\n-        text: updatedPrompt.text,\n-        type: updatedPrompt.type,\n-        narration: updatedPrompt.narration,\n-        saytext: updatedPrompt.saytext,\n-        media: updatedPrompt.media,\n-        // Remove order_index as it's not in schema\n-        created_at: new Date().toISOString()\n-      };\n-\n-      const { error: promptError } = await supabase\n-        .from('exercise_prompts')\n-        .upsert(promptUpdate)\n-        .select();\n-\n-      if (promptError) throw promptError;\n-\n-      // Update local state\n-      setQuestions(prev => prev.map((question, i) => {\n-        if (i === questionIndex) {\n-          const newPrompts = [...question.exercisePrompts];\n-          newPrompts[promptIndex] = updatedPrompt;\n-          return { ...question, exercisePrompts: newPrompts };\n-        }\n-        return question;\n-      }));\n-\n-    } catch (error) {\n-      console.error('Error saving prompt:', error);\n-      toast.error('Failed to save prompt');\n-    }\n-  }, []);\n-\n-  const handleAddActivity = useCallback(() => {\n-    const newActivity: Activity = {\n-      id: crypto.randomUUID(),\n-      lesson_id: currentLessonId || '',\n-      created_at: new Date().toISOString(),\n-      type: 'practice',\n-      title: '',\n-      name: '',\n-      instructions: '',\n-      media: [],\n-      data: {\n-        prompt: '',\n-        teacherScript: '',\n-        media: []\n-      }\n-    };\n-    setActivities(prev => [...prev, newActivity]);\n-  }, [currentLessonId]);\n-\n-  const handleUpdateActivity = useCallback((index: number, updatedActivity: Activity) => {\n-    setActivities(prev => prev.map((activity, i) => i === index ? updatedActivity : activity));\n-  }, []);\n-\n-  const handleRemoveActivity = useCallback((index: number) => {\n-    setActivities(prev => prev.filter((_, i) => i !== index));\n-  }, []);\n-\n-  const handleExercisePromptUpdate = useCallback((questionIndex: number, promptIndex: number, updatedPrompt: ExercisePrompt) => {\n-    const updatedQuestions = [...questions];\n-    updatedQuestions[questionIndex].exercisePrompts[promptIndex] = updatedPrompt;\n-    handleUpdateQuestion(questionIndex, updatedQuestions[questionIndex]);\n-  }, [questions, handleUpdateQuestion]);\n-\n-  const handleQuestionDataChange = useCallback((questionIndex: number, field: string, value: string) => {\n-    setQuestions(prev => prev.map((q, i) => \n-      i === questionIndex \n-        ? { \n-            ...q, \n-            data: { \n-              prompt: q.data?.prompt || '',\n-              teacherScript: q.data?.teacherScript || '',\n-              ...q.data,\n-              [field]: value \n-            } \n-          }\n-        : q\n-    ));\n-  }, []);\n-\n-  const [isSaving, setIsSaving] = useState(false);\n-\n-  const handleSaveLesson = async () => {\n-    try {\n-      if (!currentLessonId || !selectedSubtopicId) {\n-        toast.error('Please select a subtopic and lesson first');\n-        return;\n-      }\n-\n-      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\n-      if (sessionError) throw sessionError;\n-      \n-      if (!session?.user) {\n-        toast.error('Please sign in to save lessons');\n-        return;\n-      }\n-\n-      // Get user's role from session\n-      const userRole = session.user.user_metadata?.role;\n-      console.log('Current user role:', userRole);\n-      console.log('📝 Saving content heading:', {\n-        contentHeading,\n-        currentLessonId,\n-        selectedSubtopicId,\n-        timestamp: new Date().toISOString()\n-      });\n-\n-      // Create metadata object\n-      const lessonMetadata = {\n-        lastEdited: new Date().toISOString(),\n-        version: 1,\n-        status: 'draft' \n-      };\n-\n-      // Complete lesson data with all fields\n-      const lessonData = {\n-        id: currentLessonId,\n-        title: lessonTitle,\n-        content: lessonContent,\n-        metadata: lessonMetadata, // Supabase will automatically handle JSON conversion\n-        content_type: 'html',\n-        lesson_type: 'lesson',\n-        grade_id: selectedGradeId,\n-        topic_id: selectedTopicId,\n-        subtopic_id: selectedSubtopicId,\n-        user_id: session.user.id,\n-        updated_at: new Date().toISOString(),\n-        role: userRole, // Include role in the payload\n-        description: '',\n-        prerequisites: [],\n-        media_type: 'image',\n-        media_url: '',\n-        contentheading: contentHeading || ''\n-      };\n-\n-      console.log('📦 Data being sent to Supabase:', lessonData);\n-\n-      // Save lesson with all fields\n-      const { data, error: lessonError } = await supabase\n-        .from('lessons')\n-        .upsert(lessonData, { \n-          onConflict: 'id'\n-        })\n-        .select();\n-\n-      if (lessonError) throw lessonError;\n-\n-      // 2. Save lesson content\n-      const { data: existingContent } = await supabase\n-        .from('lesson_content')\n-        .select('id')\n-        .eq('lesson_id', currentLessonId)\n-        .single();\n-\n-      const contentMetadata = {\n-        lastEdited: new Date().toISOString(),\n-        version: 1,\n-        status: 'draft'\n-      };\n-\n-      const contentUpdate = {\n-        id: existingContent?.id || crypto.randomUUID(),\n-        lesson_id: currentLessonId,\n-        content: [lessonContent],\n-        metadata: contentMetadata, // Supabase will automatically handle JSON conversion\n-        content_type: 'html',\n-        user_id: session.user.id,\n-        updated_at: new Date().toISOString(),\n-        created_at: new Date().toISOString()\n-      };\n-\n-      const { error: contentError } = await supabase\n-        .from('lesson_content')\n-        .upsert(contentUpdate, { onConflict: 'id' });\n-\n-      if (contentError) throw contentError;\n-\n-      // 3. Save questions\n-      for (const question of questions) {\n-        const questionData = {\n-          id: question.id,\n-          lesson_id: currentLessonId,\n-          type: question.type,\n-          title: question.title,\n-          metadata: question.metadata,\n-          data: question.data,\n-          updated_at: new Date().toISOString(),\n-          user_id: session.user.id\n-        };\n-\n-        const { error: questionError } = await supabase\n-          .from('questions')\n-          .upsert(questionData, { onConflict: 'id' });\n-\n-        if (questionError) throw questionError;\n-\n-        //4. Save exercise prompts for this question\n-        if (question.exercisePrompts) {\n-          for (const prompt of question.exercisePrompts) {\n-            const promptData = {\n-              id: prompt.id,\n-              question_id: question.id,\n-              text: prompt.text,\n-              media: prompt.media,\n-              type: prompt.type,\n-              narration: prompt.narration,\n-              saytext: prompt.saytext,\n-              user_id: session.user.id,\n-              updated_at: new Date().toISOString()\n-            };\n-\n-            const { error: promptError } = await supabase\n-              .from('exercise_prompts')\n-              .upsert(promptData, { onConflict: 'id' });\n-\n-            if (promptError) throw promptError;\n-          }\n-        }\n-      }\n-\n-      // 5. Save activities\n-      if (activities.length > 0) {\n-        const activitiesData = activities.map(activity => ({\n-          id: activity.id,\n-          lesson_id: currentLessonId,\n-          type: activity.type,\n-          title: activity.title,\n-          name: activity.name,\n-          instructions: activity.instructions,\n-          media: activity.media,\n-          data: activity.data,\n-          created_at: new Date().toISOString()\n-        }));\n-\n-        const { error: activitiesError } = await supabase\n-          .from('activities')\n-          .upsert(activitiesData, { onConflict: 'id' });\n-\n-        if (activitiesError) throw activitiesError;\n-      }\n-\n-      // After successful save\n-      console.log('✅ Content heading saved successfully:', {\n-        contentHeading,\n-        lessonId: currentLessonId,\n-        timestamp: new Date().toISOString()\n-      });\n-\n-      toast.success('Lesson saved successfully');\n-    } catch (err) {\n-      const error = err as PostgrestError;\n-      console.error('❌ Error saving content heading:', {\n-        error: error.message,\n-        contentHeading,\n-        lessonContent,\n-        lessonId: currentLessonId,\n-        timestamp: new Date().toISOString()\n-      });\n-      toast.error(`Failed to save lesson: ${error.message}`);\n-\n-\n-    }\n-  };\n-\n-  const handleSaveQuestion = async (question: Question, index: number) => {\n-    const loadingToast = toast.loading(`Saving question ${index + 1}...`);\n-    \n-    try {\n-      const { data: { session } } = await supabase.auth.getSession();\n-      if (!session?.user) {\n-        toast.error('Please sign in to save question', { id: loadingToast });\n-        return;\n-      }\n-\n-      // Save question\n-      const questionData = {\n-        id: question.id,\n-        lesson_id: currentLessonId,\n-        type: question.type,\n-        title: question.title,\n-        metadata: question.metadata,\n-        data: {\n-          prompt: question.data?.prompt ?? '',\n-          teacherScript: question.data?.teacherScript ?? '',\n-          followup_prompt: question.data?.followup_prompt ?? [],\n-          sampleAnswer: question.data?.sampleAnswer || undefined,  // Convert null to undefined\n-          answer: question.data?.answer || undefined  // Convert null to undefined\n-        } as const,\n-        user_id: session.user.id,\n-        updated_at: new Date().toISOString()\n-      };\n-\n-      const { error: questionError } = await supabase\n-        .from('questions')\n-        .upsert(questionData, { onConflict: 'id' });\n-\n-      if (questionError) throw questionError;\n-\n-      // Save exercise prompts if they exist\n-      if (question.exercisePrompts?.length) {\n-        for (const prompt of question.exercisePrompts) {\n-          const promptData = {\n-            id: prompt.id,\n-            question_id: question.id,\n-            text: prompt.text,\n-            type: prompt.type,\n-            narration: prompt.narration,\n-            saytext: prompt.saytext,\n-            media: prompt.media,\n-            user_id: session.user.id,\n-            updated_at: new Date().toISOString()\n-          };\n-\n-          const { error: promptError } = await supabase\n-            .from('exercise_prompts')\n-            .upsert(promptData, { onConflict: 'id' });\n-\n-          if (promptError) throw promptError;\n-        }\n-      }\n-\n-      toast.success(`Question ${index + 1} saved successfully`, { id: loadingToast });\n-    } catch (error) {\n-      console.error('Error saving question:', error);\n-      toast.error(`Failed to save question ${index + 1}`, { id: loadingToast });\n-    }\n-  };\n-\n-  const handleSaveActivity = async (activity: Activity) => {\n-    try {\n-      await contentService.saveActivity(activity);\n-      toast.success('Activity saved');\n-    } catch (error) {\n-      console.error('Failed to save activity:', error);\n-      toast.error('Failed to save activity');\n-    }\n-  };\n-\n-  // Effects\n-  useEffect(() => {\n-    const fetchGrades = async () => {\n-      try {\n-        const { data, error } = await supabase\n-          .from('grades')\n-          .select('*')\n-          .order('name');\n-\n-        if (error) {\n-          console.error('Supabase error:', error);\n-          throw error;\n-        }\n-\n-        if (!data) {\n-          throw new Error('No data returned from Supabase');\n-        }\n-\n-        // Map the grades to match your interface\n-        const validGrades = data.map((grade: any) => ({\n-          _id: grade.id,\n-          id: grade.id,\n-          name: grade.name,\n-          level: grade.level || 0,  // Add default value if not provided\n-          orderIndex: grade.order_index || 0,  // Add default value if not provided\n-          topics: []\n-        }));\n-        \n-        setGrades(validGrades);\n-      } catch (error) {\n-        console.error('Error fetching grades:', error);\n-        toast.error('Failed to fetch grades');\n-      }\n-    };\n-\n-    fetchGrades();\n-  }, []);\n-\n-  // Topic Selection\n-  useEffect(() => {\n-    const fetchTopics = async () => {\n-      if (!selectedGradeId) return;\n-      \n-      try {\n-        const { data, error } = await supabase\n-          .from('topics')\n-          .select('*')\n-          .eq('grade_id', selectedGradeId)\n-          .order('title');\n-\n-        if (error) {\n-          throw error;\n-        }\n-\n-        // Map the topics to match your interface\n-        const validTopics = (data || []).map((topic: any) => ({\n-          _id: topic.id,\n-          id: topic.id,\n-          name: topic.title,\n-          title: topic.title,\n-          grade_id: topic.grade_id,\n-          subtopics: []\n-        }));\n-        \n-        setTopics(validTopics);\n-      } catch (error) {\n-        console.error('Error fetching topics:', error);\n-        toast.error('Failed to fetch topics');\n-      }\n-    };\n-\n-    fetchTopics();\n-  }, [selectedGradeId]);\n-\n-  // Subtopic Selection\n-  useEffect(() => {\n-    const fetchSubtopics = async () => {\n-      if (!selectedTopicId) return;\n-      \n-      try {\n-        // Use content service to fetch subtopics\n-        const subtopicsData = await contentService.fetchSubtopics(selectedTopicId);\n-        console.log('Fetched subtopics:', subtopicsData);\n-\n-        const validSubtopics = subtopicsData.map((subtopic: any) => ({\n-          id: subtopic.id,\n-          title: subtopic.title,\n-          description: subtopic.description,\n-          topic_id: subtopic.topic_id,\n-          lessons: [],\n-          order_index: subtopicsData.length\n-        }));\n-        \n-        setSubtopics(validSubtopics);\n-        \n-        // Update global state\n-        if (selectedSubtopic) {\n-          setSelectedSubtopic(selectedSubtopic);\n-        }\n-      } catch (err) {\n-        const error = err as Error;\n-        console.error('Error fetching subtopics:', error);\n-        toast.error('Failed to fetch subtopics');\n-      }\n-    };\n-\n-    fetchSubtopics();\n-  }, [selectedTopicId, selectedSubtopic, setSelectedSubtopic]);\n-\n-  // Add effect to monitor subtopics state\n-  useEffect(() => {\n-    console.log('Current subtopics state:', subtopics);\n-  }, [subtopics]);\n-\n-  // Add fetchLessons function\n-  const fetchLessons = useCallback(async () => {\n-    if (!selectedSubtopicId) return;\n-    try {\n-      const { data, error } = await supabase\n-        .from('lessons')\n-        .select('*')\n-        .eq('subtopic_id', selectedSubtopicId)\n-        .order('title');\n-\n-      if (error) {\n-        throw error;\n-      }\n-      \n-      // Map the lessons to ensure they have _id\n-      const validLessons = (data || []).map((lesson: any) => ({\n-        ...lesson,\n-        _id: lesson._id || lesson.id, // Use _id if available, otherwise use id\n-        title: lesson.title || 'Untitled Lesson'\n-      })).filter((lesson: any) => lesson._id); // Only include lessons with valid IDs\n-      \n-      setLessons(validLessons);\n-    } catch (error) {\n-      console.error('Error fetching lessons:', error);\n-      toast.error('Failed to fetch lessons');\n-    }\n-  }, [selectedSubtopicId]);\n-  // Add loadLessonContent function\n-  const isLoading = useRef(false);\n-  const loadLessonContent = useCallback(async (lessonId: string) => {\n-    // Prevent multiple simultaneous loads\n-    if (isLoading.current) return;\n-    isLoading.current = true;\n-\n-    const controller = new AbortController();\n-\n-    try {\n-      // Clear existing content first\n-      setLessonTitle('');\n-      setContentHeading('');\n-      setLessonContent('');\n-      setQuestions([]);\n-      \n-      // First fetch lesson data\n-      const { data: lessonData, error: lessonError } = await supabase\n-        .from('lessons')\n-        .select('*')\n-        .eq('id', lessonId)\n-        .single()\n-        \n-\n-      if (lessonError) {\n-        console.error('Lesson fetch error:', lessonError);\n-        throw lessonError;\n-      }\n-\n-      // Set lesson data\n-      setLessonTitle(lessonData.title || '');\n-      setContentHeading(lessonData.content || '');\n-\n-      // Then fetch lesson content with explicit headers\n-      const { data: contentData, error: contentError } = await supabase\n-        .from('lesson_content')\n-        .select('*')\n-        .eq('lesson_id', lessonId)\n-        .order('updated_at', { ascending: false })\n-        .limit(1)\n-        .maybeSingle();\n-\n-      if (contentError) {\n-        console.error('Content fetch error:', contentError);\n-        throw contentError;\n-      }\n-\n-      // Set content if available\n-      if (contentData?.content) {\n-        setLessonContent(typeof contentData.content === 'string' \n-          ? contentData.content \n-          : JSON.stringify(contentData.content)\n-        );\n-      }\n-\n-    } catch (error: unknown) {\n-      if (error instanceof Error && error.name === 'AbortError') {\n-        console.log('Request aborted');\n-        return;\n-      }\n-      console.error('Error loading lesson:', error);\n-      toast.error('Failed to load lesson content');\n-      \n-      // Reset states on error\n-      setLessonTitle('');\n-      setContentHeading('');\n-      setLessonContent('');\n-      setQuestions([]);\n-    } finally {\n-      isLoading.current = false;\n-    }\n-\n-    return () => {\n-      controller.abort();\n-    };\n-  }, []); // Empty dependencies since we're using closure over state setters\n-\n-  // // Add effect for fetching lessons when subtopic changes\n-  useEffect(() => {\n-    if (selectedSubtopicId) {\n-      fetchLessons();\n-    }\n-  }, [selectedSubtopicId, fetchLessons]);\n-\n-  // Add effect for loading lesson content when currentLessonId changes\n-    useEffect(() => {\n-    let isMounted = true;\n-    let timeoutId: NodeJS.Timeout;\n-\n-    const loadContent = async () => {\n-      if (!currentLessonId || !isMounted) return;\n-\n-      // Clear previous timeout if exists\n-      if (timeoutId) clearTimeout(timeoutId);\n-\n-      // Set new timeout for debouncing\n-      timeoutId = setTimeout(() => {\n-        if (isMounted) {\n-          loadLessonContent(currentLessonId);\n-        }\n-      }, 300);\n-    };\n-\n-    loadContent();\n-\n-    // Cleanup function\n-    return () => {\n-      isMounted = false;\n-      if (timeoutId) clearTimeout(timeoutId);\n-      if (isLoading.current) isLoading.current = false;\n-    };\n-  }, [currentLessonId]); // Remove loadLessonContent from dependencies\n-\n-  useEffect(() => {\n-    console.log('Current lessons state:', lessons);\n-  }, [lessons]);\n-\n-    // Add keyboard shortcut for saving\n-  useEffect(() => {\n-    const handleKeyDown = (e: KeyboardEvent) => {\n-      if ((e.ctrlKey || e.metaKey) && e.key === 's') {\n-        e.preventDefault();\n-        handleSaveLesson();\n-      }\n-    };\n-\n-    window.addEventListener('keydown', handleKeyDown);\n-    return () => window.removeEventListener('keydown', handleKeyDown);\n-  }, [handleSaveLesson]);\n-\n-  // Add SaveFeedback component\n-  const SaveFeedback = useCallback(() => {\n-    if (saveProgress === 'idle') return null;\n-\n-    return (\n-    <div className=\"fixed bottom-4 right-4\">\n-      {saveProgress === 'saving' && (\n-        <div className=\"flex items-center gap-2 bg-background border rounded-lg px-4 py-2 shadow-lg\">\n-          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n-          <span className=\"text-sm\">Saving changes...</span>\n+        {/* Main content area */}\n+        <div className=\"col-span-9\">\n+          <ContentDisplay />\n         </div>\n-      )}\n-      {saveProgress === 'saved' && (\n-        <div className=\"flex items-center gap-2 bg-green-500 text-white rounded-lg px-4 py-2 shadow-lg\">\n-          <Check className=\"h-4 w-4\" />\n-          <span className=\"text-sm\">Changes saved</span>\n-        </div>\n-      )}\n-      {saveProgress === 'error' && (\n-        <div className=\"flex items-center gap-2 bg-destructive text-destructive-foreground rounded-lg px-4 py-2 shadow-lg\">\n-          <X className=\"h-4 w-4\" />\n-          <span className=\"text-sm\">Error saving changes</span>\n-        </div>\n-      )}\n-    </div>\n-  );\n-  }, [saveProgress]);\n-\n-  // Update handlers\n-  const handleGradeSelect = (gradeId: string) => {\n-    // Always keep sidebar open during selection\n-    setIsSidebarCollapsed(false);\n-    setIsSidebarLocked(true);\n-    \n-    // Batch state updates\n-    requestAnimationFrame(() => {\n-      setSelectedGradeId(gradeId);\n-      setSelectedGrade(gradeId);\n-      setSelectedTopicId(null);\n-      setSelectedTopic('');\n-      setSelectedSubtopicId(null);\n-      setSelectedSubtopic('');\n-      setCurrentLessonId(null);\n-      \n-      if (isViewMode) {\n-        setExpandedGrade(gradeId);\n-      }\n-    });\n-  };\n-\n-  const handleTopicSelect = (value: string) => {\n-    setSelectedTopicId(value);\n-    setSelectedTopic(value);\n-    setSelectedSubtopicId(null);\n-    setSelectedSubtopic('');\n-    setCurrentLessonId(null);\n-  };\n-\n-  const handleSubtopicSelect = (value: string) => {\n-    setSelectedSubtopicId(value);\n-    setSelectedSubtopic(value);\n-    setCurrentLessonId(null);\n-  };\n-\n-  const handleLessonSelect = async (lessonId: string) => {\n-    try {\n-      // Lock sidebar during selection\n-      setIsSidebarLocked(true);\n-      setIsSidebarCollapsed(false);\n-      setCurrentLessonId(lessonId);\n-      \n-      // 1. Fetch lesson data\n-      const { data: lessonData, error: lessonError } = await supabase\n-        .from('lessons')\n-        .select('*')\n-        .eq('id', lessonId)\n-        .single();\n-\n-      if (lessonError) throw lessonError;\n-\n-      // 2. Fetch questions with exercise prompts\n-      const { data: questionsData, error: questionsError } = await supabase\n-        .from('questions')\n-        .select(`\n-          *,\n-          exercise_prompts (*)\n-        `)\n-        .eq('lesson_id', lessonId);\n-\n-      if (questionsError) throw questionsError;\n-\n-      // 3. Fetch activities - removed order_index\n-      const { data: activitiesData, error: activitiesError } = await supabase\n-        .from('activities')\n-        .select('*')\n-        .eq('lesson_id', lessonId);\n-\n-      if (activitiesError) throw activitiesError;\n-\n-      // Format questions with their exercise prompts\n-      const formattedQuestions = questionsData?.map(q => ({\n-        ...q,\n-        data: q.data || {},\n-        exercisePrompts: q.exercise_prompts || []\n-      })) || [];\n-\n-      // Set all states\n-      setLessonTitle(lessonData.title || '');\n-      setLessonContent(lessonData.content || '');\n-      setQuestions(formattedQuestions);\n-      setActivities(activitiesData || []);\n-\n-      // After successful load, unlock sidebar and allow collapse\n-      setTimeout(() => {\n-        setIsSidebarLocked(false);\n-        if (!isSidebarLocked) {\n-          setIsSidebarCollapsed(true);\n-        }\n-      }, 300);\n-\n-    } catch (error) {\n-      console.error('Error loading lesson:', error);\n-      toast.error('Failed to load lesson');\n-      // Reset states on error\n-      setLessonTitle('');\n-      setLessonContent('');\n-      setQuestions([]);\n-      setActivities([]);\n-    }\n-    if (!isSidebarLocked) {\n-      setIsSidebarCollapsed(true);\n-    }\n-  };\n-\n-  // Update the expansion handlers\n-  const handleTopicExpand = async (topicId: string) => {\n-    setExpandedTopic(expandedTopic === topicId ? null : topicId);\n-    setSelectedTopicId(topicId);\n-    \n-    // Load subtopics when topic is expanded\n-    if (topicId) {\n-      setIsLoadingSubtopics(true);\n-      try {\n-        const { data: subtopicsData, error } = await supabase\n-          .from('subtopics')\n-          .select('*')\n-          .eq('topic_id', topicId)\n-          .order('order_index');\n-\n-        if (error) throw error;\n-        setSubtopics(subtopicsData || []);\n-      } catch (error) {\n-        console.error('Error loading subtopics:', error);\n-        toast.error('Failed to load subtopics');\n-      } finally {\n-        setIsLoadingSubtopics(false);\n-      }\n-    }\n-  };\n-\n-  const handleSubtopicExpand = async (subtopicId: string) => {\n-    setExpandedSubtopic(expandedSubtopic === subtopicId ? null : subtopicId);\n-    setSelectedSubtopicId(subtopicId);\n-    \n-    if (subtopicId) {\n-      setIsLoadingLessons(true);\n-      try {\n-        const { data: lessonsData, error } = await supabase\n-          .from('lessons')\n-          .select('*')\n-          .eq('subtopic_id', subtopicId)\n-          .order('order_index');\n-\n-        if (error) throw error;\n-        setLessons(lessonsData || []);\n-      } catch (error) {\n-        console.error('Error loading lessons:', error);\n-        toast.error('Failed to load lessons');\n-      } finally {\n-        setIsLoadingLessons(false);\n-      }\n-    }\n-  };\n-\n-  const handleQuestionExpand = (index: number) => {\n-    setExpandedQuestion(expandedQuestion === index ? null : index);\n-  };\n-\n-  const handleActivityExpand = (index: number) => {\n-    setExpandedActivity(expandedActivity === index ? null : index);\n-  };\n-\n-  // Add effect to save mode changes to localStorage\n-  useEffect(() => {\n-    localStorage.setItem('lessonManagementViewMode', isViewMode.toString());\n-  }, [isViewMode]);\n-\n-  // Add handlers for creating new items\n-  const handleCreateGrade = async () => {\n-    try {\n-      const response = await fetch(`${API_ENDPOINT}/grades`, {\n-        method: 'POST',\n-        headers: { 'Content-Type': 'application/json' },\n-        body: JSON.stringify({ name: newItemData.name })\n-      });\n-\n-      if (!response.ok) throw new Error('Failed to create grade');\n-      const data = await response.json();\n-      \n-      if (!data.success) throw new Error(data.message || 'Failed to create grade');\n-      \n-      // Update grades list\n-      setGrades([...grades, data.data.grade]);\n-      setModalState({ ...modalState, showAddGrade: false });\n-      setNewItemData({ name: '', description: '' });\n-      toast.success('Grade created successfully');\n-    } catch (error) {\n-      console.error('Error creating grade:', error);\n-      toast.error('Failed to create grade');\n-    }\n-  };\n-\n-  const handleCreateTopic = async () => {\n-    if (!selectedGradeId) {\n-      toast.error('Please select a grade first');\n-      return;\n-    }\n-\n-    try {\n-      const newTopic = await contentService.createTopic({\n-        title: newItemData.name, // Map from newItemData.name to title\n-        description: newItemData.description,\n-        gradeId: selectedGradeId\n-      });\n-\n-      setTopics(prev => [...prev, newTopic]);\n-      toast.success('Topic created successfully');\n-      setModalState({ ...modalState, showAddTopic: false });\n-      setNewItemData({ name: '', description: '' });\n-    } catch (err) {\n-      const error = err instanceof Error ? err.message : String(err);\n-      console.error('Error creating topic:', error);\n-      toast.error('Failed to create topic');\n-    }\n-  };\n-    \n-  \n-\n-\n-  const handleCreateSubtopic = async (data: { title: string; description?: string }) => {\n-    try {\n-      if (!selectedTopicId) {\n-        toast.error('Please select a topic first');\n-        return;\n-      }\n-\n-      const newSubtopic = await contentService.createSubtopic({\n-        ...data,\n-        topicId: selectedTopicId\n-      });\n-\n-      setSubtopics(prev => [...prev, {\n-        _id: newSubtopic.id,\n-        id: newSubtopic.id,\n-        name: newSubtopic.title,\n-        title: newSubtopic.title,\n-        description: newSubtopic.description,\n-        topic_id: newSubtopic.topic_id,\n-        orderIndex: prev.length,\n-        lessons: []\n-      }]);\n-\n-      toast.success('Subtopic created successfully');\n-      setModalState(prev => ({ ...prev, showAddSubtopic: false }));\n-    } catch (err) {\n-      const error = err as Error;\n-      console.error('Error creating subtopic:', error);\n-      toast.error('Failed to create subtopic');\n-    }\n-  };\n-\n-  const handleUpdateSubtopic = async (subtopicId: string, data: { title: string; description?: string }) => {\n-    try {\n-      const { data: updatedSubtopic, error } = await supabase\n-        .from('sub_topics')\n-        .update(data)\n-        .eq('id', subtopicId)\n-        .select()\n-        .single();\n-\n-      if (error) throw error;\n-      \n-      setSubtopics(prev => prev.map(subtopic => \n-        subtopic.id === subtopicId \n-          ? {\n-              ...subtopic,\n-              name: updatedSubtopic.title\n-            }\n-          : subtopic\n-      ));\n-\n-      toast.success('Subtopic updated successfully');\n-    } catch (err) {\n-      const error = err as Error;\n-      console.error('Error updating subtopic:', error);\n-      toast.error('Failed to update subtopic');\n-    }\n-  };\n-\n-  const handleDeleteSubtopic = async (subtopicId: string) => {\n-    try {\n-      await contentService.deleteSubtopic(subtopicId);\n-      setSubtopics(prev => prev.filter(subtopic => subtopic.id !== subtopicId));\n-      setSelectedSubtopicId(null);\n-      toast.success('Subtopic deleted successfully');\n-    } catch (err) {\n-      const error = err as Error;\n-      console.error('Error deleting subtopic:', error);\n-      toast.error('Failed to delete subtopic');\n-    }\n-  };\n-\n-  const handleCreateLesson = async () => {\n-    if (!selectedSubtopicId) {\n-      toast.error('Please select a subtopic first');\n-      return;\n-    }\n-\n-    try {\n-      // First create the lesson\n-      const { data: newLesson, error: lessonError } = await supabase\n-        .from('lessons')\n-        .insert({\n-          title: newItemData.name,\n-          duration: 0,\n-          topic_id: selectedTopicId,\n-          subtopic_id: selectedSubtopicId,\n-          content: '', // Empty rich text content initially\n-          status: 'draft'\n-        })\n-        .select()\n-        .single();\n-\n-      if (lessonError) throw lessonError;\n-\n-      // Create initial question\n-      const { data: newQuestion, error: questionError } = await supabase\n-        .from('questions')\n-        .insert({\n-          lesson_id: newLesson.id,\n-          type: 'speaking', // default type\n-          title: 'Question 1',\n-          data: {\n-            prompt: '',\n-            teacherScript: '',\n-            options: []\n-          },\n-          order_index: 0\n-        })\n-        .select()\n-        .single();\n-\n-      if (questionError) throw questionError;\n-\n-      // Create initial exercise prompts for the question\n-      const { error: promptsError } = await supabase\n-        .from('exercise_prompts')\n-        .insert([\n-          {\n-            question_id: newQuestion.id,\n-            text: '',\n-            type: 'image',\n-            narration: '',\n-            saytext: '',\n-            media: [],\n-            order_index: 0\n-          },\n-          {\n-            question_id: newQuestion.id,\n-            text: '',\n-            type: 'gif',\n-            narration: '',\n-            saytext: '',\n-            media: [],\n-            order_index: 1\n-          }\n-        ]);\n-\n-      if (promptsError) throw promptsError;\n-\n-      // Create initial activity\n-      // const { error: activityError } = await supabase\n-      //   .from('activities')\n-      //   .insert({\n-      //     lesson_id: newLesson.id,\n-      //     type: 'practice',\n-      //     title: '',\n-      //     instructions: '',\n-      //     media: [],\n-      //     data: {\n-      //       prompt: '',\n-      //       teacherScript: '',\n-      //       media: []\n-      //     },\n-      //     order_index: 0\n-      //   });\n-\n-      // if (activityError) throw activityError;\n-\n-      // Update UI state\n-      setLessons(prev => [...prev, newLesson]);\n-      setCurrentLessonId(newLesson.id);\n-      setLessonTitle(newLesson.title);\n-      setModalState({ ...modalState, showAddLesson: false });\n-      setNewItemData({ name: '', description: '' });\n-      toast.success('Lesson created successfully');\n-\n-    } catch (error) {\n-      console.error('Error creating lesson:', error);\n-      toast.error('Failed to create lesson');\n-    }\n-  };\n-\n-  // Effect to handle localStorage after mount\n-  useEffect(() => {\n-    const storedMode = localStorage.getItem('lessonManagementViewMode');\n-    if (storedMode !== null) {\n-      setIsViewMode(storedMode === 'true');\n-    }\n-  }, []);\n-\n-  // Update the cleanupModalState function\n-  const cleanupModalState = useCallback(() => {\n-    document.body.style.pointerEvents = '';\n-    document.body.style.overflow = '';\n-    setModalState({\n-      showAddGrade: false,\n-      showAddTopic: false,\n-      showAddSubtopic: false,\n-      showAddLesson: false\n-    });\n-    setNewItemData({ name: '', description: '' });\n-  }, []);\n-\n-  // Add a function to handle modal state changes\n-  const handleModalStateChange = useCallback((modalType: keyof typeof modalState, open: boolean) => {\n-    if (!open) {\n-      cleanupModalState();\n-    } else {\n-      setModalState(prev => ({ ...prev, [modalType]: open }));\n-    }\n-  }, [cleanupModalState]);\n-\n-  const handleContentSave = async (content: string) => {\n-    const loadingToast = toast.loading(\"Saving content...\", {\n-      action: {\n-        label: \"Close\",\n-        onClick: () => toast.dismiss()\n-      }\n-    });\n-    \n-    try {\n-      const { data: { session } } = await supabase.auth.getSession();\n-      if (!session?.user) {\n-        toast.error('Please sign in to save content', { id: loadingToast });\n-        return;\n-      }\n-\n-      // Get the most recent content entry\n-      const { data: existingContent, error: checkError } = await supabase\n-        .from('lesson_content')\n-        .select('id')\n-        .eq('lesson_id', currentLessonId)\n-        .order('updated_at', { ascending: false })\n-        .limit(1)\n-        .maybeSingle();\n-\n-      // If content exists, update it; if not, insert new\n-      const { error } = await supabase\n-        .from('lesson_content')\n-        .upsert({\n-          id: existingContent?.id, // This ensures we update if id exists\n-          lesson_id: currentLessonId,\n-          content: [content],\n-          content_type: 'text',\n-          metadata: {\n-            heading: contentHeading\n-          },\n-          user_id: session.user.id,\n-          updated_at: new Date().toISOString()\n-        }, {\n-          onConflict: 'id'  // This ensures we update based on lesson_id\n-        });\n-\n-      if (error) throw error;\n-\n-      // Save questions separately\n-      for (const question of questions) {\n-        const { exercisePrompts, ...questionData } = question; // Remove exercisePrompts from question data\n-        \n-        // Save question\n-        const { error: questionError } = await supabase\n-          .from('questions')\n-          .upsert(questionData, {\n-            onConflict: 'id'\n-          })\n-          .select();\n-\n-        if (questionError) throw questionError;\n-\n-        // Save exercise prompts\n-        if (exercisePrompts?.length > 0) {\n-          for (const prompt of exercisePrompts) {\n-            const { error: promptError } = await supabase\n-              .from('exercise_prompts')\n-              .upsert(prompt, {\n-                onConflict: 'id'\n-              })\n-              .select();\n-\n-            if (promptError) throw promptError;\n-          }\n-        }\n-      }\n-      \n-      toast.success(\"Content saved successfully\", {\n-        action: {\n-          label: \"Close\",\n-          onClick: () => toast.dismiss()\n-        },\n-        id: loadingToast,\n-      });\n-      setIsContentEditorOpen(false);\n-    } catch (error) {\n-      console.error('Error saving content:', error);\n-      toast.error(\"Failed to save content\", {\n-        action: {\n-          label: \"Close\",\n-          onClick: () => toast.dismiss()\n-        },\n-        id: loadingToast,\n-      });\n-    }\n-  };\n-\n-  // Add this component for inline editing\n-  const InlineEdit = ({ \n-    value, \n-    onSave, \n-    isEditing, \n-    setIsEditing, \n-    placeholder,\n-    className = \"\"\n-  }: InlineEditProps) => {\n-    const [tempValue, setTempValue] = useState(value);\n-    \n-    return isEditing ? (\n-      <div className=\"flex items-center gap-2\">\n-        <Input\n-          value={tempValue}\n-          onChange={(e) => setTempValue(e.target.value)}\n-          placeholder={placeholder}\n-          className={className}\n-          autoFocus\n-        />\n-        <Button\n-          size=\"sm\"\n-          variant=\"ghost\"\n-          onClick={() => {\n-            onSave(tempValue);\n-            setIsEditing(false);\n-          }}\n-        >\n-          <Check className=\"h-4 w-4 text-green-500\" />\n-        </Button>\n-        <Button\n-          size=\"sm\"\n-          variant=\"ghost\"\n-          onClick={() => setIsEditing(false)}\n-        >\n-          <X className=\"h-4 w-4 text-red-500\" />\n-        </Button>\n       </div>\n-    ) : (\n-      <div \n-        className=\"group flex items-center gap-2 cursor-pointer\"\n-        onClick={() => setIsEditing(true)}\n-      >\n-        <span className={className}>{value || placeholder}</span>\n-        <Pencil className=\"h-4 w-4 opacity-0 group-hover:opacity-100 transition-opacity\" />\n-      </div>\n-    );\n-  };\n-\n-  // Add this effect to handle auto-collapse after lesson selection\n-  useEffect(() => {\n-    if (currentLessonId && selectedGradeId && selectedTopicId && selectedSubtopicId) {\n-      setIsSidebarLocked(false);\n-      // Optional: add a slight delay before collapsing\n-      setTimeout(() => setIsSidebarCollapsed(true), 300);\n-    }\n-  }, [currentLessonId, selectedGradeId, selectedTopicId, selectedSubtopicId]);\n-\n-  // Add individual save handlers\n-  // const handleSaveQuestion = async (question: Question, index: number) => {\n-  //   try {\n-  //     // Update status to saving\n-  //     setQuestionSaveStatuses(prev => [\n-  //       ...prev.filter(s => s.id !== question.id),\n-  //       { id: question.id, status: 'saving' }\n-  //     ]);\n-\n-  //     const questionUpsert = {\n-  //       id: question.id,\n-  //       lesson_id: currentLessonId,\n-  //       type: question.type,\n-  //       title: question.data?.prompt || 'Untitled Question',\n-  //       metadata: question.metadata || {},\n-  //       data: {\n-  //         prompt: question.data?.prompt || '',\n-  //         teacherScript: question.data?.teacherScript || '',\n-  //         ...question.data\n-  //       },\n-  //       order_index: index,\n-  //       created_at: new Date().toISOString(),\n-  //       updated_at: new Date().toISOString()\n-  //     };\n-\n-  //     const { error: questionError } = await supabase\n-  //       .from('questions')\n-  //       .upsert(questionUpsert);\n-\n-  //     if (questionError) throw questionError;\n-\n-  //     // Update status to saved\n-  //     setQuestionSaveStatuses(prev => [\n-  //       ...prev.filter(s => s.id !== question.id),\n-  //       { id: question.id, status: 'saved', lastSaved: new Date().toISOString() }\n-  //     ]);\n-\n-  //     toast.success(`Question ${index + 1} saved successfully`);\n-  //   } catch (error) {\n-  //     console.error('Error saving question:', error);\n-  //     setQuestionSaveStatuses(prev => [\n-  //       ...prev.filter(s => s.id !== question.id),\n-  //       { id: question.id, status: 'error' }\n-  //     ]);\n-  //     toast.error(`Failed to save question ${index + 1}`);\n-  //   }\n-  // };\n-\n-  const handleSavePrompt = async (questionId: string, prompt: ExercisePrompt, promptIndex: number) => {\n-    try {\n-      setPromptSaveStatuses(prev => [\n-        ...prev.filter(s => s.id !== prompt.id),\n-        { id: prompt.id || '', status: 'saving' } as SaveStatus\n-      ]);\n-\n-      const promptUpsert = {\n-        id: prompt.id,\n-        question_id: questionId,\n-        text: prompt.text || '',\n-        type: prompt.type || 'text',\n-        narration: prompt.narration || '',\n-        saytext: prompt.saytext || '',\n-        media: prompt.media || [],\n-        order_index: promptIndex,\n-        created_at: prompt.created_at || new Date().toISOString(),\n-        updated_at: new Date().toISOString()\n-      };\n-\n-      const { error: promptError } = await supabase\n-        .from('exercise_prompts')\n-        .upsert(promptUpsert);\n-\n-      if (promptError) throw promptError;\n-\n-      setPromptSaveStatuses(prev => [\n-        ...prev.filter(s => s.id !== prompt.id),\n-        { id: prompt.id || '', status: 'saved', lastSaved: new Date().toISOString() } as SaveStatus\n-      ]);\n-\n-      toast.success(`Prompt ${promptIndex + 1} saved successfully`);\n-    } catch (error) {\n-      console.error('Error saving prompt:', error);\n-      setPromptSaveStatuses(prev => [\n-        ...prev.filter(s => s.id !== prompt.id),\n-        { id: prompt.id || '', status: 'error' } as SaveStatus\n-      ]);\n-      toast.error(`Failed to save prompt ${promptIndex + 1}`);\n-    }\n-  };\n-\n-  // Add effect to mark items as draft when edited\n-  useEffect(() => {\n-    questions.forEach(question => {\n-      if (!questionSaveStatuses.find(s => s.id === question.id)) {\n-        setQuestionSaveStatuses(prev => [\n-          ...prev,\n-          { id: question.id, status: 'draft' }\n-        ]);\n-      }\n-    });\n-  }, [questions]);\n-\n-  // Add this function with your other handlers\n-  const handleRefreshLesson = async () => {\n-    if (!currentLessonId) {\n-      toast.error('No lesson selected');\n-      return;\n-    }\n-    \n-    try {\n-      toast.loading('Refreshing lesson content...', {\n-        action: {\n-          label: \"Close\",\n-          onClick: () => toast.dismiss()\n-        },\n-      });\n-      await handleLessonSelect(currentLessonId);\n-      toast.success('Content refreshed', {\n-        action: {\n-          label: \"Close\",\n-          onClick: () => toast.dismiss()\n-        },\n-      });\n-    } catch (error) {\n-      console.error('Error refreshing lesson:', error);\n-      toast.error('Failed to refresh content', {\n-        action: {\n-          label: \"Close\",\n-          onClick: () => toast.dismiss()\n-        },\n-      });\n-    }\n-  };\n-\n-  // Add this function to handle refresh\n-  const handleRefreshContent = async () => {\n-    if (!currentLessonId) {\n-      toast.error('No lesson selected');\n-      return;\n-    }\n-    \n-    toast.loading('Refreshing content...');\n-    try {\n-      await loadLessonContent(currentLessonId);\n-      toast.success('Content refreshed');\n-    } catch (error) {\n-      console.error('Refresh error:', error);\n-      toast.error('Failed to refresh content');\n-    }\n-  };\n-\n-  // Update the sidebar hover mechanism\n-  const handleSidebarHover = useCallback(\n-    debounce((isHovering: boolean) => {\n-      if (!isSidebarLocked && !isNavigating && !isDropdownOpen) {\n-        if (isHovering || document.activeElement?.closest('.sidebar-content')) {\n-          setIsSidebarCollapsed(false);\n-        } else {\n-          setTimeout(() => {\n-            if (!isDropdownOpen) { // Only collapse if dropdown is closed\n-              setIsSidebarCollapsed(true);\n-            }\n-          }, 300);\n-        }\n-      }\n-    }, 100),\n-    [isSidebarLocked, isNavigating, isDropdownOpen]\n-  );\n-\n-  // Update the sidebar JSX\n-  <div \n-    className={cn(\n-      \"transition-all duration-300 ease-in-out relative\",\n-      isSidebarCollapsed ? \"w-20\" : \"w-80\",\n-      \"flex-shrink-0 group\"\n-    )}\n-    onMouseEnter={() => {\n-      handleSidebarHover(true);\n-      // Immediately expand on mouse enter\n-      if (!isSidebarLocked) {\n-        setIsSidebarCollapsed(false);\n-      }\n-    }}\n-    onMouseLeave={() => {\n-      // Only collapse if not interacting with content\n-      if (!document.activeElement?.closest('.sidebar-content')) {\n-        handleSidebarHover(false);\n-      }\n-    }}\n-    onFocus={() => setIsSidebarCollapsed(false)}\n-  >\n-    <Card className={cn(\n-      \"h-full relative sidebar-content\", // Added sidebar-content class\n-      \"transition-shadow duration-300\",\n-      \"hover:shadow-lg\"\n-    )}>\n-      {/* Rest of sidebar content */}\n-    </Card>\n-  </div>\n-\n-  // Update the sidebar and card styles\n-  return (\n-      <div className=\"container mx-auto py-8\">\n-        {/* Header */}\n-        <div className=\"flex items-center justify-between mb-2\">\n-          {/* ... header content ... */}\n-          <div className=\"flex items-center gap-4\">\n-            <Link href=\"/super-admin\">\n-              <Button variant=\"outline\" className=\"gap-2\">\n-                <ArrowLeft className=\"h-4 w-4\" />\n-                Back\n-              </Button>\n-            </Link>\n-            <div className=\"flex items-center gap-2\">\n-              <h1 className=\"text-2xl font-bold\">Lesson Management</h1>\n-              <Button\n-                variant=\"ghost\"\n-                size=\"icon\"\n-                onClick={handleRefreshLesson}\n-                className=\"ml-2\"\n-                title=\"Refresh lesson content\"\n-              >\n-                <RefreshCw className=\"h-4 w-4\" />\n-              </Button>\n-            </div>\n-            <p className=\"text-sm text-muted-foreground\">Create and manage your educational content</p>\n-          </div>\n-          <div className=\"flex items-center gap-2\">\n-            <Button\n-              variant=\"outline\"\n-              size=\"sm\"\n-              onClick={() => setShowHelpTips(!showHelpTips)}\n-              className=\"gap-2\"\n-            >\n-              {showHelpTips ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n-              {showHelpTips ? 'Hide Tips' : 'Show Tips'}\n-            </Button>\n-          </div>\n-        </div>\n-        \n-        {/* Main content wrapper - Fix the layout here */}\n-        <div className=\"flex gap-6 h-[calc(100vh-200px)]\">\n-          {/* Improved sidebar */}\n-          <div \n-            className={cn(\n-              \"transition-all duration-300 ease-in-out relative\",\n-              isSidebarCollapsed ? \"w-20\" : \"w-80\",\n-              \"flex-shrink-0 group\"\n-            )}\n-            onMouseEnter={() => {\n-              handleSidebarHover(true);\n-              // Immediately expand on mouse enter\n-              if (!isSidebarLocked) {\n-                setIsSidebarCollapsed(false);\n-              }\n-            }}\n-            onMouseLeave={() => {\n-              // Only collapse if not interacting with content\n-              if (!document.activeElement?.closest('.sidebar-content')) {\n-                handleSidebarHover(false);\n-              }\n-            }}\n-            onFocus={() => setIsSidebarCollapsed(false)}\n-          >\n-            <Card className={cn(\n-              \"h-full relative sidebar-content\", // Added sidebar-content class\n-              \"transition-shadow duration-300\",\n-              \"hover:shadow-lg\"\n-            )}>\n-              {/* Lock button - only show after lesson selection */}\n-              {currentLessonId && (\n-                <Button\n-                  variant=\"ghost\"\n-                  size=\"sm\"\n-                  className=\"absolute top-2 right-2 z-10\"\n-                  onClick={() => {\n-                    setIsSidebarLocked(!isSidebarLocked);\n-                    if (!isSidebarLocked) {\n-                      setIsSidebarCollapsed(false);\n-                    }\n-                  }}\n-                >\n-                  {isSidebarLocked ? <Lock className=\"h-4 w-4\" /> : <Unlock className=\"h-4 w-4\" />}\n-                </Button>\n-              )}\n-\n-              {/* Sidebar content with overflow handling */}\n-              <div className={cn(\n-                \"transition-all duration-300 overflow-hidden\",\n-                isSidebarCollapsed ? \"opacity-0\" : \"opacity-100\"\n-              )}>\n-                <Card className=\"h-full\">\n-                  <CardHeader className=\"pb-3\">\n-                    <div className=\"flex items-center justify-between\">\n-                      <CardTitle className=\"text-lg font-semibold\">Content Management</CardTitle>\n-                      <TooltipProvider>\n-                        <Tooltip>\n-                          <TooltipTrigger>\n-                            <HelpCircle className=\"h-4 w-4 text-muted-foreground\" />\n-                          </TooltipTrigger>\n-                          <TooltipContent>\n-                            <p>Manage your educational content here</p>\n-                          </TooltipContent>\n-                        </Tooltip>\n-                      </TooltipProvider>\n-                      </div>\n-                    <CardDescription>Create and manage your lessons</CardDescription>\n-                  </CardHeader>\n-                  <CardContent className=\"space-y-4\">\n-                    {/* View/Edit Mode Toggle */}\n-                    <div className=\"grid grid-cols-2 gap-2 p-1 bg-muted rounded-lg\">\n-                      <Button\n-                        variant={isViewMode ? \"default\" : \"ghost\"}\n-                        size=\"sm\"\n-                        onClick={() => setIsViewMode(true)}\n-                        className=\"w-full\"\n-                      >\n-                        <Eye className=\"h-4 w-4 mr-2\" />\n-                        View\n-                      </Button>\n-                      <Button\n-                        variant={!isViewMode ? \"default\" : \"ghost\"}\n-                        size=\"sm\"\n-                        onClick={() => setIsViewMode(false)}\n-                        className=\"w-full\"\n-                      >\n-                        <Edit className=\"h-4 w-4 mr-2\" />\n-                        Edit\n-                      </Button>\n-                    </div>\n-\n-                    {/* Grade Selection */}\n-                    <div className=\"space-y-2\">\n-                      <div className=\"flex items-center justify-between\">\n-                        <Label htmlFor=\"grade-select\">Grade</Label>\n-                        {isViewMode && (\n-                          <Button variant=\"ghost\" size=\"sm\" onClick={() => setExpandedGrade(expandedGrade ? null : selectedGrade)}>\n-                            {expandedGrade ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n-                          </Button>\n-                        )}\n-                      </div>\n-                      <Select \n-                        value={selectedGradeId || ''}\n-                        onValueChange={handleGradeSelect}\n-                        onOpenChange={(open) => {\n-                          if (open) {\n-                            // Force sidebar to stay open and lock it\n-                            setIsSidebarCollapsed(false);\n-                            setIsSidebarLocked(true);\n-                          }\n-                        }}\n-                      >\n-                        <SelectTrigger \n-                          id=\"grade-select\" \n-                          className=\"w-full\"\n-                          onClick={(e) => {\n-                            e.stopPropagation(); // Prevent event bubbling\n-                            setIsSidebarCollapsed(false);\n-                            setIsSidebarLocked(true);\n-                          }}\n-                        >\n-                          <SelectValue placeholder=\"Select Grade\" />\n-                        </SelectTrigger>\n-                        <SelectContent \n-                          onCloseAutoFocus={(e) => {\n-                            e.preventDefault();\n-                            setIsSidebarLocked(true);\n-                            setIsSidebarCollapsed(false);\n-                          }}\n-                        >\n-                          {grades.map((grade: Grade) => (\n-                            <SelectItem \n-                              key={`grade-${grade.id || 'new'}`} \n-                              value={grade.id || ''}\n-                              onMouseDown={(e) => {\n-                                e.preventDefault();\n-                                e.stopPropagation();\n-                              }}\n-                            >\n-                              <div className=\"flex items-center gap-2\">\n-                                <BookOpen className=\"h-4 w-4 text-primary\" />\n-                                {grade.name}\n-                              </div>\n-                            </SelectItem>\n-                          ))}\n-                        </SelectContent>\n-                      </Select>\n-                      {!isViewMode && (\n-                      <Button \n-                        variant=\"outline\" \n-                        size=\"sm\" \n-                        className=\"w-full gap-2\"\n-                        onClick={() => setModalState({ ...modalState, showAddGrade: false })}\n-                      >\n-                        <Plus className=\"h-4 w-4\" />\n-                        Add New Grade\n-                      </Button>\n-                      )}\n-                    </div>\n-\n-                    {/* Content Tree View in View Mode */}\n-                    {isViewMode && expandedGrade && (\n-                      <div className=\"mt-4 space-y-4 overflow-y-auto max-h-[calc(100vh-300px)]\">\n-                        {topics.map((topic: Topic) => (\n-                          <Card \n-                            key={topic.id} \n-                            className={cn(\n-                              \"border-l-4 transition-all duration-200 hover:shadow-md\",\n-                              expandedTopic === topic.id \n-                                ? \"border-l-primary bg-accent/5\" \n-                                : \"border-l-primary/40 hover:border-l-primary\"\n-                            )}\n-                          >\n-                            <CardHeader \n-                              className=\"py-3 cursor-pointer select-none\" \n-                              onClick={() => handleTopicExpand(topic.id || '')}\n-                            >\n-                              <div className=\"flex items-center justify-between\">\n-                                <div className=\"flex items-center gap-2\">\n-                                  <Layers className=\"h-4 w-4 text-primary\" />\n-                                  <h4 className=\"font-medium\">{topic.title}</h4>\n-                                  <Badge variant=\"outline\" className=\"ml-2\">\n-                                    {subtopics.filter(s => s.topic_id === topic.id).length} Subtopics\n-                                  </Badge>\n-                                </div>\n-                                <div className=\"flex items-center gap-2\">\n-                                  <AlertDialog>\n-                                    <AlertDialogTrigger asChild>\n-                                      <Button \n-                                        variant=\"ghost\" \n-                                        size=\"sm\" \n-                                        className=\"hover:bg-destructive/10 hover:text-destructive\"\n-                                        onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}\n-                                      >\n-                                        <Trash className=\"h-4 w-4\" />\n-                                      </Button>\n-                                    </AlertDialogTrigger>\n-                                    {/* Alert Dialog Content */}\n-                                  </AlertDialog>\n-                                  <ChevronDown className={cn(\n-                                    \"h-4 w-4 transition-transform duration-200\",\n-                                    expandedTopic === topic.id ? \"rotate-0\" : \"-rotate-90\"\n-                                  )} />\n-                                </div>\n-                              </div>\n-                            </CardHeader>\n-\n-                            <AnimatePresence>\n-                              {expandedTopic === topic.id && (\n-                                <motion.div\n-                                  initial={{ height: 0, opacity: 0 }}\n-                                  animate={{ height: \"auto\", opacity: 1 }}\n-                                  exit={{ height: 0, opacity: 0 }}\n-                                  transition={{ duration: 0.2 }}\n-                                >\n-                                  <CardContent className=\"pt-0 pb-2\">\n-                                    <div className=\"pl-4 space-y-2\">\n-                                      {isLoadingSubtopics ? (\n-                                        <div className=\"flex items-center justify-center py-4\">\n-                                          <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\n-                                        </div>\n-                                      ) : (\n-                                        subtopics\n-                                          .filter(subtopic => subtopic.topic_id === topic.id)\n-                                          .map((subtopic: SubTopic) => (\n-                                            <div \n-                                              key={subtopic.id}\n-                                              className={cn(\n-                                                \"rounded-lg border transition-colors\",\n-                                                expandedSubtopic === subtopic.id \n-                                                  ? \"bg-accent/10 border-primary/20\" \n-                                                  : \"hover:bg-accent/5\"\n-                                              )}\n-                                            >\n-                                              <div \n-                                                className=\"p-3 cursor-pointer\"\n-                                                onClick={() => handleSubtopicExpand(subtopic.id || '')}\n-                                              >\n-                                                <div className=\"flex items-center justify-between py-2 cursor-pointer hover:bg-accent/50 rounded-md px-2\">\n-                                                  <div className=\"flex items-center gap-2\">\n-                                                    <BookOpen className=\"h-4 w-4 text-primary\" />\n-                                                    <span className=\"text-sm font-medium\">{subtopic.name}</span>\n-                                                    <Badge variant=\"outline\" className=\"ml-2\">\n-                                                      {lessons.filter(l => l.subtopic_id === subtopic.id).length} Lessons\n-                                                    </Badge>\n-                                                  </div>\n-                                                  <div className=\"flex items-center gap-2\">\n-                                                    <AlertDialog>\n-                                                      <AlertDialogTrigger asChild>\n-                                                        <Button \n-                                                          variant=\"ghost\" \n-                                                          size=\"sm\" \n-                                                          className=\"hover:bg-destructive/10 hover:text-destructive\"\n-                                                          onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}\n-                                                        >\n-                                                          <Trash className=\"h-4 w-4\" />\n-                                                        </Button>\n-                                                      </AlertDialogTrigger>\n-                                                      {/* Alert Dialog Content */}\n-                                                    </AlertDialog>\n-                                                    <ChevronDown className={cn(\n-                                                      \"h-4 w-4 transition-transform duration-200\",\n-                                                      expandedSubtopic === subtopic.id ? \"rotate-0\" : \"-rotate-90\"\n-                                                    )} />\n-                                                  </div>\n-                                                </div>\n-\n-                                                <AnimatePresence>\n-                                                  {expandedSubtopic === subtopic.id && (\n-                                                    <motion.div\n-                                                      initial={{ height: 0, opacity: 0 }}\n-                                                      animate={{ height: \"auto\", opacity: 1 }}\n-                                                      exit={{ height: 0, opacity: 0 }}\n-                                                      transition={{ duration: 0.2 }}\n-                                                    >\n-                                                      <div className=\"px-3 pb-3\">\n-                                                        <div className=\"space-y-2\">\n-                                                          {isLoadingLessons ? (\n-                                                            <div className=\"flex items-center justify-center py-4\">\n-                                                              <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\n-                                                            </div>\n-                                                          ) : (\n-                                                            lessons\n-                                                              .filter(lesson => lesson.subtopic_id === subtopic.id)\n-                                                              .map((lesson: Lesson) => (\n-                                                                <div\n-                                                                  key={lesson.id}\n-                                                                  onClick={() => handleLessonSelect(lesson.id || '')}\n-                                                                  className={cn(\n-                                                                    \"flex items-center gap-3 p-2 rounded-md cursor-pointer transition-colors\",\n-                                                                    \"hover:bg-accent\",\n-                                                                    currentLessonId === lesson.id && \"bg-accent\"\n-                                                                  )}\n-                                                                >\n-                                                                  <div className=\"flex items-center gap-2 flex-1\">\n-                                                                    <div className=\"flex h-8 w-8 items-center justify-center rounded-md border bg-background\">\n-                                                                      <BookOpen className=\"h-4 w-4 text-primary\" />\n-                                                                    </div>\n-                                                                    <div className=\"flex flex-col\">\n-                                                                      <span className=\"text-sm font-medium\">{lesson.title}</span>\n-                                                                      <span className=\"text-xs text-muted-foreground\">\n-                                                                        {lesson.duration} mins • {lesson.questions?.length || 0} Questions\n-                                                                      </span>\n-                                                                    </div>\n-                                                                  </div>\n-                                                                  <AlertDialog>\n-                                                                    <AlertDialogTrigger asChild>\n-                                                                      <Button \n-                                                                        variant=\"ghost\" \n-                                                                        size=\"sm\" \n-                                                                        className=\"hover:bg-destructive/10 hover:text-destructive\"\n-                                                                        onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}\n-                                                                      >\n-                                                                        <Trash className=\"h-4 w-4\" />\n-                                                                      </Button>\n-                                                                    </AlertDialogTrigger>\n-                                                                    {/* Alert Dialog Content */}\n-                                                                  </AlertDialog>\n-                                                                </div>\n-                                                              ))\n-                                                          )}\n-                                                        </div>\n-                                                      </div>\n-                                                    </motion.div>\n-                                                  )}\n-                                                </AnimatePresence>\n-                                              </div>\n-                                            </div>\n-                                          ))\n-                                      )}\n-                                    </div>\n-                                  </CardContent>\n-                                </motion.div>\n-                              )}\n-                            </AnimatePresence>\n-                          </Card>\n-                        ))}\n-                      </div>\n-                    )}\n-\n-                    {/* Regular Edit Mode Content */}\n-                    {!isViewMode && (\n-                      <>\n-                        {/* Existing Topic, Subtopic, and Lesson Selection UI */}\n-                      {/* Topic Selection */}\n-                        {selectedGradeId && (\n-                      <div className=\"space-y-2\">\n-                        <div className=\"flex items-center justify-between\">\n-                        <Label htmlFor=\"topic-select\">Topic</Label>\n-                        </div>\n-                        <Select \n-                              value={selectedTopicId || ''} \n-                              onValueChange={handleTopicSelect}\n-                        >\n-                          <SelectTrigger id=\"topic-select\" className=\"w-full\">\n-                            <SelectValue placeholder=\"Select Topic\" />\n-                          </SelectTrigger>\n-                          <SelectContent>\n-                                {topics.map((topic: Topic) => (\n-                                  <SelectItem \n-                                    key={`topic-${topic.id || 'new'}`} \n-                                    value={topic.id || ''}\n-                                  >\n-                                  <div className=\"flex items-center gap-2\">\n-                                  <Layers className=\"h-4 w-4 text-primary\" />\n-                                    {topic.title}\n-                                  </div>\n-                                </SelectItem>\n-                              ))}\n-                          </SelectContent>\n-                        </Select>\n-                        <Button \n-                          variant=\"outline\" \n-                          size=\"sm\" \n-                          className=\"w-full gap-2\"\n-                          onClick={() => setModalState({ ...modalState, showAddTopic: true })}\n-                        >\n-                          <Plus className=\"h-4 w-4\" />\n-                          Add New Topic\n-                        </Button>\n-                      </div>\n-                    )}\n-\n-                    {/* Subtopic Selection */}\n-                        {selectedTopicId && (\n-                      <div className=\"space-y-2\">\n-                        <div className=\"flex items-center justify-between\">\n-                        <Label htmlFor=\"subtopic-select\">Subtopic</Label>\n-                        </div>\n-                        <Select \n-                              value={selectedSubtopicId || ''} \n-                              onValueChange={handleSubtopicSelect}\n-                        >\n-                          <SelectTrigger id=\"subtopic-select\" className=\"w-full\">\n-                            <SelectValue placeholder=\"Select Subtopic\" />\n-                          </SelectTrigger>\n-                          <SelectContent>\n-                                {subtopics\n-                                  .filter(subtopic => subtopic.id)\n-                                  .map((subtopic, index) => (\n-                                    <SelectItem \n-                                      key={subtopic.id || `subtopic-${index}`}\n-                                      value={subtopic.id || ''}\n-                                    >\n-                                      {subtopic.title || 'Untitled Subtopic'}\n-                                    </SelectItem>\n-                                  ))}\n-                          </SelectContent>\n-                        </Select>\n-                        {!isViewMode && (\n-                          <Button \n-                            variant=\"outline\" \n-                            size=\"sm\" \n-                            className=\"w-full gap-2\"\n-                            onClick={() => setModalState({ ...modalState, showAddSubtopic: true })}\n-                          >\n-                            <Plus className=\"h-4 w-4\" />\n-                            Add New Subtopic\n-                          </Button>\n-                        )}\n-                      </div>\n-                    )}\n-\n-                    {/* Lesson Selection */}\n-                        {selectedSubtopicId && (\n-                      <div className=\"space-y-2\">\n-                        <div className=\"flex items-center justify-between\">\n-                          <Label htmlFor=\"lesson-select\">Lesson</Label>\n-                        </div>\n-                          <Select \n-                            value={currentLessonId || ''} \n-                            onValueChange={handleLessonSelect}\n-                            onOpenChange={(open) => {\n-                              setIsDropdownOpen(open);\n-                              if (open) {\n-                                setIsSidebarCollapsed(false);\n-                                setIsSidebarLocked(true);\n-                              } else {\n-                                // Small delay before unlocking to prevent immediate collapse\n-                                setTimeout(() => {\n-                                  setIsSidebarLocked(false);\n-                                }, 100);\n-                              }\n-                            }}\n-                          >\n-                            <SelectTrigger \n-                              id=\"lesson-select\" \n-                              className=\"w-full\"\n-                              onClick={(e) => {\n-                                e.stopPropagation();\n-                                setIsSidebarCollapsed(false);\n-                                setIsSidebarLocked(true);\n-                              }}\n-                            >\n-                              <SelectValue placeholder=\"Select Lesson\" />\n-                            </SelectTrigger>\n-                            <SelectContent>\n-                              {lessons\n-                                .filter((lesson): lesson is Lesson => lesson !== undefined && lesson !== null)\n-                                .map((lesson: Lesson) => (\n-                                  <SelectItem \n-                                    key={`lesson-${lesson.id || 'new'}`} \n-                                    value={lesson.id || ''}\n-                                  >\n-                                    <div className=\"flex items-center gap-2\">\n-                                      <BookOpen className=\"h-4 w-4 text-primary\" />\n-                                      {lesson.title || 'Untitled Lesson'}\n-                                    </div>\n-                                  </SelectItem>\n-                                ))}\n-                            </SelectContent>\n-                          </Select>\n-                    <Button \n-                            variant=\"outline\" \n-                            size=\"sm\" \n-                            className=\"w-full gap-2\"\n-                        onClick={() => setModalState({ ...modalState, showAddLesson: true })}\n-                          >\n-                            <Plus className=\"h-4 w-4\" />\n-                            Add New Lesson\n-                    </Button>\n-                      </div>\n-                        )}\n-                      </>\n-                    )}\n-                  </CardContent>\n-                </Card>\n-              </div>\n-\n-              {/* Collapsed view */}\n-              {isSidebarCollapsed && (\n-                <div className=\"absolute inset-0 flex flex-col items-center pt-12 gap-4\">\n-                  <BookOpen className=\"h-6 w-6 text-muted-foreground\" />\n-                  <div className=\"w-px h-full bg-border\" />\n-                </div>\n-              )}\n-            </Card>\n-          </div>\n-        \n-\n-          {/* Right Content Area */}\n-          <div className=\"flex-1 overflow-y-auto\">\n-            {isNavigating ? (\n-              <div className=\"flex items-center justify-center h-[400px]\">\n-                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n-                <span className=\"ml-3\">Loading...</span>\n-              </div>\n-            ) : (\n-              <>\n-                {!selectedGradeId ? (\n-                  // Question Types Display Section\n-                  <div className=\"space-y-6\">\n-                    <Card>\n-                      <CardHeader>\n-                        <div className=\"flex items-center justify-between\">\n-                          <div>\n-                            <CardTitle className=\"text-xl font-semibold\">Available Question Types</CardTitle>\n-                            <CardDescription>Browse through different question formats and examples</CardDescription>\n-                          </div>\n-                          <TooltipProvider>\n-                            <Tooltip>\n-                              <TooltipTrigger>\n-                                <HelpCircle className=\"h-5 w-5 text-muted-foreground\" />\n-                              </TooltipTrigger>\n-                              <TooltipContent>\n-                                <p>Click on each type to see detailed examples</p>\n-                              </TooltipContent>\n-                            </Tooltip>\n-                          </TooltipProvider>\n-                        </div>\n-                      </CardHeader>\n-                      <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n-                        {Object.entries(QUESTION_TYPES).map(([type, details]) => (\n-                          <Card key={type} className=\"cursor-pointer hover:bg-accent/50 transition-colors\">\n-                            <CardHeader className=\"p-4\">\n-                              <div className=\"flex items-center justify-between mb-2\">\n-                                <Badge variant=\"outline\" className=\"bg-primary/5 text-lg\">\n-                                  {details.label}\n-                                </Badge>\n-                              </div>\n-                              <CardDescription className=\"text-sm\">\n-                                {details.description || 'No description available'}\n-                              </CardDescription>\n-                              <div className=\"mt-4\">\n-                                <div className=\"text-sm font-medium mb-2\">Example:</div>\n-                                <div className=\"p-3 rounded-md bg-muted/50 text-sm\">\n-                                  {type === 'multiple-choice' && (\n-                                    <>\n-                                      <div className=\"font-medium mb-2\">Q: What is the capital of France?</div>\n-                                      <div className=\"space-y-1 pl-4\">\n-                                        <div>A) Paris</div>\n-                                        <div>B) London</div>\n-                                        <div>C) Berlin</div>\n-                                        <div>D) Madrid</div>\n-                                      </div>\n-                                    </>\n-                                  )}\n-                                  {type === 'fill-in-blank' && (\n-                                    <div className=\"space-y-2\">\n-                                      <div>Complete the sentence:</div>\n-                                      <div>The sun rises in the <span className=\"bg-primary/20 px-2 rounded\">_____</span> and sets in the <span className=\"bg-primary/20 px-2 rounded\">_____</span>.</div>\n-                                    </div>\n-                                  )}\n-                                  {type === 'true-false' && (\n-                                    <div className=\"space-y-2\">\n-                                      <div className=\"font-medium\">Statement:</div>\n-                                      <div>The Earth is flat.</div>\n-                                      <div className=\"mt-2\">\n-                                        <Badge variant=\"outline\" className=\"mr-2\">True</Badge>\n-                                        <Badge variant=\"outline\">False</Badge>\n-                                      </div>\n-                                    </div>\n-                                  )}\n-                                  {type === 'matching' && (\n-                                    <div className=\"space-y-2\">\n-                                      <div className=\"font-medium mb-2\">Match the countries with their capitals:</div>\n-                                      <div className=\"grid grid-cols-2 gap-4\">\n-                                        <div>\n-                                          1. France<br />\n-                                          2. Germany<br />\n-                                          3. Spain\n-                                        </div>\n-                                        <div>\n-                                          • Berlin<br />\n-                                          • Paris<br />\n-                                          • Madrid\n-                                        </div>\n-                                      </div>\n-                                    </div>\n-                                  )}\n-                                  {type === 'ordering' && (\n-                                    <div className=\"space-y-2\">\n-                                      <div className=\"font-medium mb-2\">Arrange in chronological order:</div>\n-                                      <div className=\"space-y-1\">\n-                                        <Badge variant=\"outline\" className=\"mr-2\">1</Badge>World War II<br />\n-                                        <Badge variant=\"outline\" className=\"mr-2\">2</Badge>Industrial Revolution<br />\n-                                        <Badge variant=\"outline\" className=\"mr-2\">3</Badge>Renaissance\n-                                      </div>\n-                                    </div>\n-                                  )}\n-                                  {type === 'short-answer' && (\n-                                    <div className=\"space-y-2\">\n-                                      <div className=\"font-medium\">Question:</div>\n-                                      <div>Explain the water cycle in 2-3 sentences.</div>\n-                                      <div className=\"mt-2 p-2 border border-dashed rounded-md border-primary/30\">\n-                                        Answer space\n-                                      </div>\n-                                    </div>\n-                                  )}\n-                                </div>\n-                              </div>\n-                            </CardHeader>\n-                          </Card>\n-                        ))}\n-                      </CardContent>\n-                    </Card>\n-                  </div>\n-                ) : isViewMode ? (\n-                  <div className=\"space-y-6\">\n-                    {selectedGradeId ? (\n-                      <div className=\"grid grid-cols-1 gap-6\">\n-                        {topics.map((topic) => (\n-                          <Card key={topic.id} className=\"border-l-4 border-l-primary\">\n-                            <CardHeader>\n-                              <div className=\"flex items-center justify-between\">\n-                                <h3 className=\"text-lg font-semibold\">{topic.title}</h3>\n-                              </div>\n-                            </CardHeader>\n-                            <CardContent>\n-                              <div className=\"space-y-4\">\n-                                {subtopics\n-                                  .filter(subtopic => subtopic.topic_id === topic.id)\n-                                  .map((subtopic, index) => (\n-                                    <div key={subtopic.id || `subtopic-${index}`} className=\"border-l-2 pl-4\">\n-                                      <h4 className=\"text-md font-medium mb-2\">{subtopic.name || 'Untitled Subtopic'}</h4>\n-                                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n-                                        {lessons\n-                                          .filter(lesson => lesson.subtopic_id === subtopic.id)\n-                                          .map((lesson) => (\n-                                            <Card \n-                                              key={lesson.id} \n-                                              className={cn(\n-                                                \"cursor-pointer transition-all duration-200\",\n-                                                \"hover:shadow-md hover:translate-y-[-2px]\",\n-                                                \"hover:bg-accent/50 hover:border-primary/50\",\n-                                                \"active:translate-y-[0px]\",\n-                                                currentLessonId === lesson.id && \"border-primary bg-accent/50 shadow-md\",\n-                                                \"group\" // Enable group hover effects\n-                                              )}\n-                                              onClick={() => handleLessonSelect(lesson.id)}\n-                                            >\n-                                              <CardHeader className=\"p-4\">\n-                                                <div className=\"flex flex-col gap-2\">\n-                                                  <div className=\"flex items-center justify-between\">\n-                                                    <div className=\"flex items-center gap-2\">\n-                                                      <BookOpen className={cn(\n-                                                        \"h-4 w-4 text-primary\",\n-                                                        \"transition-transform duration-200\",\n-                                                        \"group-hover:scale-110\"\n-                                                      )} />\n-                                                      <span className=\"font-medium\">{lesson.title}</span>\n-                                                    </div>\n-                                                    <Button\n-                                                      variant=\"outline\"\n-                                                      size=\"sm\"\n-                                                      className={cn(\n-                                                        \"opacity-0 group-hover:opacity-100\",\n-                                                        \"transition-all duration-200\",\n-                                                        \"hover:bg-primary hover:text-primary-foreground\"\n-                                                      )}\n-                                                      disabled={!lesson.content || currentLessonId !== lesson.id}\n-                                                      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n-                                                        e.stopPropagation();\n-                                                        window.location.href = `/teacher/lessons/${lesson.id}`;\n-                                                      }}\n-                                                    >\n-                                                      Start Lesson\n-                                                    </Button>\n-                                                  </div>\n-                                                  <div className=\"flex items-center gap-2\">\n-                                                    <Badge variant=\"outline\" className={cn(\n-                                                      \"bg-primary/5\",\n-                                                      \"transition-colors duration-200\",\n-                                                      \"group-hover:bg-primary/10\"\n-                                                    )}>\n-                                                      {lesson.questions?.length || 0} Questions\n-                                                    </Badge>\n-                                                    <Badge variant=\"outline\" className={cn(\n-                                                      \"bg-primary/5\",\n-                                                      \"transition-colors duration-200\",\n-                                                      \"group-hover:bg-primary/10\"\n-                                                    )}>\n-                                                      {lesson.activities?.length || 0} Activities\n-                                                    </Badge>\n-                                                  </div>\n-                                                </div>\n-                                              </CardHeader>\n-                                            </Card>\n-                                          ))}\n-                                      </div>\n-                                    </div>\n-                                  ))}\n-                              </div>\n-                            </CardContent>\n-                          </Card>\n-                        ))}\n-                      </div>\n-                    ) : (\n-                      <div className=\"text-center py-20\">\n-                        <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n-                        <h3 className=\"text-lg font-medium\">Select a Grade</h3>\n-                        <p className=\"text-sm text-muted-foreground\">\n-                          Choose a grade from the left panel to start managing content\n-                        </p>\n-                      </div>\n-                    )}\n-                  </div>\n-                ) : (\n-                  // Edit Mode Content\n-                  <div className=\"space-y-4\">\n-                    {/* Lesson Title */}\n-                    <Card>\n-                      <CardHeader>\n-                        <div className=\"flex items-center justify-between mb-4\">\n-                          <h2 className=\"text-2xl font-bold\">Lesson Content</h2>\n-                                                    <Button\n-                                                      variant=\"outline\"\n-                                                      size=\"sm\"\n-                            onClick={() => setIsContentEditorOpen(true)}\n-                          >\n-                            <Pencil className=\"h-4 w-4 mr-2\" />\n-                            Edit Content\n-                          </Button>\n-                        </div>\n-                      </CardHeader>\n-                      <CardContent className=\"space-y-4\">\n-                        {/* Lesson Title */}\n-                        <div className=\"flex items-center justify-between\">\n-                          <div className=\"space-y-1\">\n-                            <Label>Lesson Title</Label>\n-                            <InlineEdit\n-                              value={lessonTitle}\n-                              onSave={async (newTitle) => {\n-                                setLessonTitle(newTitle);\n-                                await handleSaveLesson();\n-                              }}\n-                              isEditing={isEditingTitle}\n-                              setIsEditing={setIsEditingTitle}\n-                              placeholder=\"Enter lesson title\"\n-                              className=\"text-lg font-medium\"\n-                            />\n-                          </div>\n-                        </div>\n-\n-                        {/* Content Editor and Display */}\n-                        <div className=\"space-y-4\">\n-                          {isContentEditorOpen ? (\n-                            <div className=\"border rounded-lg p-4\">\n-                              <div className=\"mb-4\">\n-                                <Label>Content Heading</Label>\n-                                <InlineEdit\n-                                  value={contentHeading}\n-                                  onSave={(newHeading) => setContentHeading(newHeading)}\n-                                  isEditing={isEditingHeading}\n-                                  setIsEditing={setIsEditingHeading}\n-                                  placeholder=\"Add content heading\"\n-                                  className=\"text-base text-muted-foreground\"\n-                                />\n-                              </div>\n-                              <RichTextEditor\n-                                value={lessonContent}\n-                                onChange={setLessonContent}\n-                                onSave={async (content) => {\n-                                  await handleContentSave(content);\n-                                  setIsContentEditorOpen(false);\n-                                }}\n-                                placeholder=\"Add lesson content here...\"\n-                              />\n-                            </div>\n-                          ) : lessonContent ? (\n-                            <div className=\"prose prose-sm max-w-none\">\n-                              {contentHeading && (\n-                                <h3 className=\"text-lg font-semibold mb-2\">{contentHeading}</h3>\n-                              )}\n-                              <div dangerouslySetInnerHTML={{ __html: lessonContent }} />\n-                            </div>\n-                          ) : (\n-                            <div className=\"text-center py-8 text-muted-foreground\">\n-                              Click 'Edit Content' to add lesson content\n-                            </div>\n-                          )}\n-                        </div>\n-                      </CardContent>\n-                    </Card>\n-\n-                    {/* Tabs */}\n-                    <Tabs defaultValue=\"questions\" className=\"mt-6\">\n-                    <TabsList className=\"grid w-full grid-cols-2\">\n-                        <TabsTrigger value=\"questions\">\n-                          <MessageSquare className=\"h-4 w-4 mr-2\" />\n-                        Questions\n-                      </TabsTrigger>\n-                        <TabsTrigger value=\"activities\">\n-                          <ActivityIcon className=\"h-4 w-4 mr-2\" />\n-                        Activities\n-                      </TabsTrigger>\n-                    </TabsList>\n-\n-                      {/* Questions Tab */}\n-                      <TabsContent value=\"questions\" className=\"space-y-4\">\n-                      <CardHeader>\n-                          <CardDescription>Add and manage questions for this lesson</CardDescription>\n-                      </CardHeader>\n-                        {questions.map((question, index) => (\n-                          <Card key={index} className={cn(\n-                            \"relative border-l-4 transition-colors duration-200\",\n-                            expandedQuestion === index ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\n-                          )}>\n-                            <CardHeader className=\"pb-3\">\n-                              <div className=\"flex items-center justify-between gap-4\">\n-                                <div className=\"flex items-center gap-3 min-w-0 flex-1\">\n-                                  <div className=\"flex items-center gap-2 flex-shrink-0\">\n-                                    <span className=\"px-2 py-1 bg-primary/10 rounded-md text-sm font-semibold text-primary whitespace-nowrap\">\n-                                      Q {index + 1}\n-                                    </span>\n-                                    <Badge variant=\"outline\" className=\"whitespace-nowrap\">\n-                                      {QUESTION_TYPES[question.type as keyof typeof QUESTION_TYPES]?.label || question.type}\n-                                    </Badge>\n-                                    {question.isDraft && (\n-                                      <Badge variant=\"secondary\" className=\"whitespace-nowrap\">Draft</Badge>\n-                                )}\n-                                  </div>\n-                                      {expandedQuestion !== index && (\n-                                        <div className=\"text-sm text-muted-foreground truncate\">\n-                                          {question.title || 'No question text'} - {question.data?.content || 'No question texts'}\n-                                        </div>\n-                                      )}\n-                                    </div>\n-                                    <div className=\"flex items-center gap-2 flex-shrink-0\">\n-                                      <Button\n-                                        variant=\"ghost\"\n-                                        size=\"sm\"\n-                                        onClick={() => handleQuestionExpand(index)}\n-                                      >\n-                                        {expandedQuestion === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n-                                      </Button>\n-                                      <Button\n-                                        variant=\"ghost\"\n-                                        size=\"sm\"\n-                                        onClick={() => handleRemoveQuestion(index)}\n-                                      >\n-                                        <Trash2 className=\"h-4 w-4 text-destructive\" />\n-                                      </Button>\n-                                    </div>\n-                                  </div>\n-                                </CardHeader>\n-                                {expandedQuestion === index && (\n-                                  <CardContent>\n-                                    <QuestionForm\n-                                      key={index}\n-                                      question={{ \n-                                        ...question, \n-                                        lesson_id: currentLessonId || '',\n-                                        type: isValidQuestionType(question.type) ? question.type : 'speaking',\n-                                        data: {\n-                                          prompt: question.data?.prompt ?? '',\n-                                          teacher_script: question.data?.teacher_script ?? '',\n-                                          followup_prompt: question.data?.followup_prompt ?? [],\n-                                          sample_answer: question.data?.sample_answer ?? '',\n-                                          \n-                                        } \n-                                      }}\n-                                      index={index}\n-                                      onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\n-                                        await handleUpdateQuestion(index, {\n-                                          ...updatedQuestion,\n-                                          data: {\n-                                            prompt: updatedQuestion.data?.prompt ?? '',\n-                                            teacher_script: updatedQuestion.data?.teacher_script ?? '',\n-                                            followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\n-                                            sample_answer: updatedQuestion.data?.sample_answer ?? '',\n-                                            metadata: updatedQuestion.metadata ?? {},\n-                                            },\n-                                            correct_answer: updatedQuestion.correct_answer ?? '',\n-                                            content: updatedQuestion.content ?? ''  // Add default value\n-                                        });\n-                                      }}\n-                                      onRemove={handleRemoveQuestion}\n-                                      onAddExercisePrompt={handleAddExercisePrompt}\n-                                      onRemoveExercisePrompt={handleRemoveExercisePrompt}\n-                                      onExercisePromptChange={handleExercisePromptChange}\n-                                    /><Button \n-                                    size=\"sm\"\n-                                    variant=\"outline\"\n-                                    onClick={() => handleSaveQuestion(question, index)}\n-                                    className=\"ml-2\"\n-                                  >\n-                                    {questionSaveStatuses.find(s => s.id === question.id)?.status === 'saving' ? (\n-                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n-                                    ) : (\n-                                      <Save className=\"h-4 w-4 mr-2\" />\n-                                    )}\n-                                    Save Question\n-                                                    </Button>\n-                                    {/* Exercise Prompts with Save Buttons */}\n-                                    {question.exercisePrompts?.map((prompt, promptIndex) => (\n-                                      <div key={`${question.id}-prompt-${promptIndex}`} className=\"mt-4\"> {/* Updated key */}\n-                                        <div className=\"flex items-center justify-between mb-2\">\n-                                          <h4 className=\"text-sm font-medium\">Exercise Prompt {promptIndex + 1}</h4>\n-                                          <div className=\"flex items-center gap-2\">\n-                                            <TooltipProvider>\n-                                              <Tooltip>\n-                                                <TooltipTrigger asChild>\n-                                                  <Button\n-                                                    size=\"sm\"\n-                                                    variant=\"outline\"\n-                                                    onClick={() => handleSavePrompt(question.id, prompt, promptIndex)}\n-                                                    disabled={promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving'}\n-                                                  >\n-                                                    {promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving' ? (\n-                                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n-                                                    ) : (\n-                                                      <Save className=\"h-4 w-4 mr-2\" />\n-                                                    )}\n-                                                    Save Prompt\n-                                                  </Button>\n-                                                </TooltipTrigger>\n-                                                <TooltipContent>\n-                                                  {`Status: ${promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}`}\n-                                                </TooltipContent>\n-                                              </Tooltip>\n-                                            </TooltipProvider>\n-                                            <Badge variant={\n-                                              promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saved'\n-                                                ? 'secondary'\n-                                                : promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'error'\n-                                                ? 'destructive'\n-                                                : 'default'\n-                                            }>\n-                                              {promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}\n-                                            </Badge>\n-                                                  </div>\n-                                        </div>\n-                                        <ExercisePromptCard\n-                                          key={prompt.id} // Add a unique key here\n-                                          prompt={prompt}\n-                                          promptIndex={promptIndex}\n-                                          onRemove={() => handleRemoveExercisePrompt(index, promptIndex)}\n-                                          onUpdate={(updatedPrompt: ExercisePrompt) => {\n-                                            // Prevent duplicate updates\n-                                            if (updatedPrompt.id === prompt.id) {\n-                                              handleExercisePromptChange(index, promptIndex, updatedPrompt);\n-                                            }\n-                                          }}\n-                                        />\n-                                      </div>\n-                                    ))}\n-                                  </CardContent>\n-                                )}\n-                              </Card>\n-                            ))}\n-\n-                            {/* Add Question Button */}\n-                            <div className=\"flex items-center justify-between\">\n-                              <QuestionTypeSelect \n-                                value={selectedQuestionType} \n-                                onChange={handleQuestionTypeChange}\n-                              />\n-                                        <Button\n-                                          onClick={handleAddQuestion}\n-                                          disabled={!selectedQuestionType}\n-                                        >\n-                                <Plus className=\"h-4 w-4 mr-2\" />\n-                                          Add Question\n-                                        </Button>\n-                                      </div>\n-                      </TabsContent>\n-\n-                      {/* Activities Tab */}\n-                      <TabsContent value=\"activities\" className=\"space-y-4\">\n-                      <CardHeader>\n-                          <CardDescription>Add and manage activities for this lesson</CardDescription>\n-                      </CardHeader>\n-                        {activities.map((activity, index) => (\n-                          <Card key={index}>\n-                            <CardHeader className=\"pb-3\">\n-                              <div className=\"flex items-center justify-between\">\n-                                  <div className=\"flex items-center gap-2\">\n-                                  <Badge variant=\"outline\">Activity {index + 1}</Badge>\n-                                  </div>\n-                                <div className=\"flex items-center gap-2\">\n-                                  <Button\n-                                    variant=\"ghost\"\n-                                    size=\"sm\"\n-                                    onClick={() => handleActivityExpand(index)}\n-                                  >\n-                                    {expandedActivity === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n-                                  </Button>\n-                                  <Button\n-                                    variant=\"ghost\"\n-                                    size=\"sm\"\n-                                    onClick={() => handleRemoveActivity(index)}\n-                                  >\n-                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\n-                                  </Button>\n-                                </div>\n-                              </div>\n-                            </CardHeader>\n-                            {expandedActivity === index && (\n-                              <CardContent>\n-                                <div className=\"space-y-4\">\n-                                  <div className=\"space-y-2\">\n-                                    <Label>Instructions</Label>\n-                                    <Textarea\n-                                      value={activity.instructions}\n-                                      onChange={(e) => handleUpdateActivity(index, {\n-                                        ...activity,\n-                                        instructions: e.target.value\n-                                      })}\n-                                      placeholder=\"Enter activity instructions\"\n-                                    />\n-                                  </div>\n-                                    \n-                                    {/* Media Section */}\n-                                    <div className=\"space-y-2\">\n-                                      <Label>Media</Label>\n-                                      {activity.media?.map((media, mediaIndex) => (\n-                                        <div key={mediaIndex} className=\"flex items-center gap-2\">\n-                                          <Input\n-                                            value={media.url}\n-                                            onChange={(e) => {\n-                                              const updatedMedia = [...(activity.media || [])];\n-                                              updatedMedia[mediaIndex] = {\n-                                                type: media.type,\n-                                                url: e.target.value\n-                                              };\n-                                              handleUpdateActivity(index, {\n-                                                ...activity,\n-                                                media: updatedMedia\n-                                              });\n-                                            }}\n-                                            placeholder=\"Media URL\"\n-                                          />\n-                                          <Select\n-                                            value={media.type}\n-                                            onValueChange={(value) => {\n-                                              const updatedMedia = [...(activity.media || [])];\n-                                              updatedMedia[mediaIndex] = {\n-                                                type: value as 'image' | 'gif' | 'video',\n-                                                url: media.url\n-                                              };\n-                                              handleUpdateActivity(index, {\n-                                                ...activity,\n-                                                media: updatedMedia\n-                                              });\n-                                            }}\n-                                          >\n-                                            <SelectTrigger className=\"w-[120px]\">\n-                                              <SelectValue placeholder=\"Type\" />\n-                                            </SelectTrigger>\n-                                            <SelectContent>\n-                                              <SelectItem value=\"image\">Image</SelectItem>\n-                                              <SelectItem value=\"gif\">GIF</SelectItem>\n-                                              <SelectItem value=\"video\">Video</SelectItem>\n-                                            </SelectContent>\n-                                          </Select>\n-                                <Button\n-                                            variant=\"ghost\"\n-                                            size=\"sm\"\n-                                  onClick={() => {\n-                                              const updatedMedia = (activity.media || []).filter((_, i) => i !== mediaIndex);\n-                                              handleUpdateActivity(index, {\n-                                                ...activity,\n-                                                media: updatedMedia\n-                                          });\n-                                          }}\n-                                  >\n-                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\n-                                  </Button>\n-                                </div>\n-                                        ))}\n-                                  <Button\n-                                    variant=\"outline\"\n-                                    size=\"sm\"\n-                                            onClick={() => {\n-                                              handleUpdateActivity(index, {\n-                                                ...activity,\n-                                                media: [\n-                                                  ...(activity.media || [])  ,\n-                                                  { url: '', type: 'image' }\n-                                                ]\n-                                              });\n-                                            }}\n-                                  >\n-                                    <Plus className=\"h-4 w-4 mr-2\" />\n-                                            Add Media\n-                                  </Button>\n-                                </div>\n-                                      </div>\n-                                    </CardContent>\n-                                  )}\n-                                </Card>\n-                              ))}\n-\n-                              {/* Add Activity Button */}\n-                              <Button\n-                                onClick={handleAddActivity}\n-                                className=\"w-full\"\n-                              >\n-                                <Plus className=\"h-4 w-4 mr-2\" />\n-                                Add Activity\n-                              </Button>\n-                          </TabsContent>\n-                        </Tabs>\n-                        </div>\n-                )}\n-\n-                    {/* Floating Save Button */}\n-                    <div className=\"fixed bottom-8 right-8 flex items-center gap-4\">\n-                      {saveProgress !== 'idle' && (\n-                        <div className={cn(\n-                          \"flex items-center gap-2 rounded-lg px-4 py-2 shadow-lg\",\n-                          {\n-                            \"bg-background border\": saveProgress === 'saving',\n-                            \"bg-green-500 text-white\": saveProgress === 'saved',\n-                            \"bg-destructive text-destructive-foreground\": saveProgress === 'error'\n-                          }\n-                        )}>\n-                          {saveProgress === 'saving' && (\n-                            <>\n-                              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n-                              <span className=\"text-sm\">Saving changes...</span>\n-                            </>\n-                          )}\n-                          {saveProgress === 'saved' && (\n-                            <>\n-                              <Check className=\"h-4 w-4\" />\n-                              <span className=\"text-sm\">Changes saved</span>\n-                            </>\n-                          )}\n-                          {saveProgress === 'error' && (\n-                            <>\n-                              <X className=\"h-4 w-4\" />\n-                              <span className=\"text-sm\">Error saving changes</span>\n-                            </>\n-                          )}\n-                        </div>\n-                      )}\n-                      <Button\n-                        onClick={handleSaveLesson}\n-                        disabled={saveProgress === 'saving'}\n-                        className=\"shadow-lg\"\n-                      >\n-                        {saveProgress === 'saving' ? (\n-                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n-                        ) : (\n-                          <Save className=\"h-4 w-4 mr-2\" />\n-                        )}\n-                        {saveProgress === 'saving' ? 'Saving...' : 'Save Lesson'}\n-                      </Button>\n-                    </div>\n-                  </>\n-            )}\n     </div>\n-    \n-\n-      {/* Floating Save Button */}\n-      {selectedSubtopicId && currentLessonId && (\n-          <div className=\"fixed bottom-4 right-4 flex flex-col gap-2\">\n-            <TooltipProvider>\n-              <Tooltip>\n-                <TooltipTrigger asChild>\n-                  <Button\n-                    size=\"icon\"\n-                    className=\"rounded-full h-12 w-12 shadow-lg\"\n-                    onClick={handleSaveLesson}\n-                    disabled={!selectedSubtopicId || !lessonTitle || questions.length === 0}\n-                  >\n-                    <Save className=\"h-6 w-6\" />\n-                  </Button>\n-                </TooltipTrigger>\n-                <TooltipContent>\n-                  <p>Save Lesson (Ctrl+S)</p>\n-                </TooltipContent>\n-              </Tooltip>\n-            </TooltipProvider>\n-          </div>\n-        )}\n-        <SaveFeedback />\n-\n-        {/* Add Grade Modal - do not delete */}\n-        {/* {modalState.showAddGrade && (\n-          <Dialog \n-            open={modalState.showAddGrade} \n-            onOpenChange={(open) => handleModalStateChange('showAddGrade', open)}\n-          >\n-            <DialogContent \n-              className=\"sm:max-w-[425px]\"\n-              onEscapeKeyDown={cleanupModalState}\n-              onPointerDownOutside={cleanupModalState}\n-            >\n-              <DialogHeader>\n-                <DialogTitle>Add New Grade</DialogTitle>\n-                <DialogDescription>Enter the details for the new grade.</DialogDescription>\n-              </DialogHeader>\n-              <div className=\"space-y-4 py-4\">\n-                <div className=\"space-y-2\">\n-                  <Label htmlFor=\"grade-name\">Grade Name</Label>\n-                  <Input\n-                    id=\"grade-name\"\n-                    value={newItemData.name}\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n-                    placeholder=\"Enter grade name\"\n-                  />\n-      </div>\n-              </div>\n-              <DialogFooter>\n-                <Button variant=\"outline\" onClick={() => {\n-                  setModalState({ ...modalState, showAddGrade: false });\n-                  setNewItemData({ name: '', description: '' });\n-                }}>\n-                  Cancel\n-                </Button>\n-                <Button onClick={handleCreateGrade} disabled={!newItemData.name}>Create Grade</Button>\n-              </DialogFooter>\n-            </DialogContent>\n-          </Dialog>\n-        )} */}\n-\n-        {/* Add Topic Modal */}\n-        {modalState.showAddTopic && (\n-          <Dialog \n-            open={modalState.showAddTopic} \n-            onOpenChange={(open) => handleModalStateChange('showAddTopic', open)}\n-          >\n-            <DialogContent \n-              className=\"sm:max-w-[425px]\"\n-              onEscapeKeyDown={cleanupModalState}\n-              onPointerDownOutside={cleanupModalState}\n-            >\n-              <DialogHeader>\n-                <DialogTitle>Add New Topic</DialogTitle>\n-                <DialogDescription>Enter the details for the new topic.</DialogDescription>\n-              </DialogHeader>\n-              <div className=\"space-y-4 py-4\">\n-                <div className=\"space-y-2\">\n-                  <Label htmlFor=\"topic-name\">Topic Name</Label>\n-                  <Input\n-                    id=\"topic-name\"\n-                    value={newItemData.name}\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n-                    placeholder=\"Enter topic name\"\n-                  />\n-                </div>\n-              </div>\n-              <DialogFooter>\n-                <Button variant=\"outline\" onClick={() => {\n-                  setModalState({ ...modalState, showAddTopic: false });\n-                  setNewItemData({ name: '', description: '' });\n-                }}>\n-                  Cancel\n-                </Button>\n-                <Button onClick={handleCreateTopic} disabled={!newItemData.name}>Create Topic</Button>\n-              </DialogFooter>\n-            </DialogContent>\n-          </Dialog>\n-        )}\n-\n-        {/* Add Subtopic Modal */}\n-        {modalState.showAddSubtopic && (\n-          <Dialog \n-            open={modalState.showAddSubtopic} \n-            onOpenChange={(open) => handleModalStateChange('showAddSubtopic', open)}\n-          >\n-            <DialogContent \n-              className=\"sm:max-w-[425px]\"\n-              onEscapeKeyDown={cleanupModalState}\n-              onPointerDownOutside={cleanupModalState}\n-            >\n-              <DialogHeader>\n-                <DialogTitle>Add New Subtopic</DialogTitle>\n-                <DialogDescription>Enter the details for the new subtopic.</DialogDescription>\n-              </DialogHeader>\n-              <div className=\"space-y-4 py-4\">\n-                <div className=\"space-y-2\">\n-                  <Label htmlFor=\"subtopic-name\">Subtopic Name</Label>\n-                  <Input\n-                    id=\"subtopic-name\"\n-                    value={newItemData.name}\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n-                    placeholder=\"Enter subtopic name\"\n-                  />\n-                </div>\n-              </div>\n-              <DialogFooter>\n-                <Button variant=\"outline\" onClick={() => {\n-                  setModalState({ ...modalState, showAddSubtopic: false });\n-                  setNewItemData({ name: '', description: '' });\n-                }}>\n-                  Cancel\n-                </Button>\n-                <Button onClick={() => handleCreateSubtopic({ title: newItemData.name })} disabled={!newItemData.name}>Create Subtopic</Button>\n-              </DialogFooter>\n-            </DialogContent>\n-          </Dialog>\n-        )}\n-\n-        {/* Add Lesson Modal */}\n-        {modalState.showAddLesson && (\n-          <Dialog \n-            open={modalState.showAddLesson} \n-            onOpenChange={(open) => handleModalStateChange('showAddLesson', open)}\n-          >\n-            <DialogContent \n-              className=\"sm:max-w-[425px]\"\n-              onEscapeKeyDown={cleanupModalState}\n-              onPointerDownOutside={cleanupModalState}\n-            >\n-              <DialogHeader>\n-                <DialogTitle>Add New Lesson</DialogTitle>\n-                <DialogDescription>Enter the details for the new lesson.</DialogDescription>\n-              </DialogHeader>\n-              <div className=\"space-y-4 py-4\">\n-                <div className=\"space-y-2\">\n-                  <Label htmlFor=\"lesson-name\">Lesson Title</Label>\n-                  <Input\n-                    id=\"lesson-name\"\n-                    value={newItemData.name}\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n-                    placeholder=\"Enter lesson title\"\n-                  />\n-                </div>\n-              </div>\n-              <DialogFooter>\n-                <Button variant=\"outline\" onClick={() => {\n-                  setModalState({ ...modalState, showAddLesson: false });\n-                  setNewItemData({ name: '', description: '' });\n-                }}>\n-                  Cancel\n-                </Button>\n-                <Button onClick={handleCreateLesson} disabled={!newItemData.name}>Create Lesson</Button>\n-              </DialogFooter>\n-            </DialogContent>\n-          </Dialog>\n-        )}\n-      </div>\n-      <Toaster />\n-      </div>\n   );\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739967521202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,8 @@\n import { PostgrestError } from '@supabase/supabase-js';\n import { Question as ContentQuestion } from './types';  // Import the specific type\n import { Trash } from \"lucide-react\";\n import { AnimatePresence, motion } from 'framer-motion';\n-import { ContentDisplay } from \"./components/content-display\";\n \n \n // Update the API endpoint to match your backend route\n const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\n@@ -291,21 +290,3032 @@\n     sampleAnswer: question?.correct_answer || ''\n   };\n };\n \n-export default function ContentManagementPage() {\n+export default function LessonManagementPage() {\n+  // State declarations\n+  \n+  const [selectedGradeId, setSelectedGradeId] = useState<string | null>(null);\n+  const [selectedTopicId, setSelectedTopicId] = useState<string | null>(null);\n+  const [selectedSubtopicId, setSelectedSubtopicId] = useState<string | null>(null);\n+  const [lessonTitle, setLessonTitle] = useState<string>('');\n+  const [currentLessonId, setCurrentLessonId] = useState<string | null>(null);\n+  const [questions, setQuestions] = useState<Question[]>([]);\n+  const [saveProgress, setSaveProgress] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');\n+  const [activities, setActivities] = useState<Activity[]>([]);\n+  const [localBuffer, setLocalBuffer] = useState<{ timestamp: number; data: any } | null>(null);\n+  const [lastSavedToServer, setLastSavedToServer] = useState<number>(Date.now());\n+  const [selectedQuestionType, setSelectedQuestionType] = useState<string>('');\n+  const [editingQuestionIndex, setEditingQuestionIndex] = useState<number | null>(null);\n+  const [showHelpTips, setShowHelpTips] = useState(true);\n+  const [isNavigating, setIsNavigating] = useState(false);\n+  const [lessons, setLessons] = useState<Lesson[]>([]);\n+  const [grades, setGrades] = useState<Grade[]>([]);\n+  const [topics, setTopics] = useState<Topic[]>([]);\n+  const [subtopics, setSubtopics] = useState<SubTopic[]>([]);\n+  const [contentHeading, setContentHeading] = useState<string>('');\n+    // Add with your other state declarations\n+  const [isContentExpanded, setIsContentExpanded] = useState<boolean>(false);\n+  const [modalState, setModalState] = useState({\n+    showAddGrade: false,\n+    showAddTopic: false,\n+    showAddSubtopic: false,\n+    showAddLesson: false\n+  });\n+  const [isViewMode, setIsViewMode] = useState<boolean>(true);\n+  const [expandedGrade, setExpandedGrade] = useState<string | null>(null);\n+  const [expandedTopic, setExpandedTopic] = useState<string | null>(null);\n+  const [expandedSubtopic, setExpandedSubtopic] = useState<string | null>(null);\n+  const [expandedQuestion, setExpandedQuestion] = useState<number | null>(null);\n+  const [expandedActivity, setExpandedActivity] = useState<number | null>(null);\n+  const [newItemData, setNewItemData] = useState({\n+    name: '',\n+    description: ''\n+  });\n+  const [lessonContent, setLessonContent] = useState<string>('');\n+  const [isContentEditorOpen, setIsContentEditorOpen] = useState(false);\n+  const [isEditingTitle, setIsEditingTitle] = useState<boolean>(false);\n+  const [isEditingHeading, setIsEditingHeading] = useState<boolean>(false);\n+  const [isEditingDescription, setIsEditingDescription] = useState<boolean>(false);\n+  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\n+  const [isSidebarLocked, setIsSidebarLocked] = useState(true);\n+  const [alertDialogState, setAlertDialogState] = useState<{\n+    isOpen: boolean;\n+    title: string;\n+    message: string;\n+    onConfirm: (value?: unknown) => void;\n+  }>({\n+    isOpen: false,\n+    title: '',\n+    message: '',\n+    onConfirm: () => {}\n+  });\n+\n+  const { \n+    selectedGrade,\n+    setSelectedGrade,\n+    selectedTopic,\n+    setSelectedTopic,\n+    selectedSubtopic,\n+    setSelectedSubtopic,\n+    selectedLesson,\n+    setSelectedLesson\n+  } = useContentStore();\n+\n+  // Add new state for tracking save status\n+  interface SaveStatus {\n+    id: string;\n+    status: 'draft' | 'saved' | 'saving' | 'error' | 'draft';\n+    lastSaved?: string;\n+  }\n+\n+  const [questionSaveStatuses, setQuestionSaveStatuses] = useState<Array<{\n+    id: string;\n+    status: 'idle' | 'saving' | 'saved' | 'error' | 'draft';\n+  }>>([]);\n+  const [promptSaveStatuses, setPromptSaveStatuses] = useState<SaveStatus[]>([]);\n+\n+  // Add this state to track dropdown state\n+  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n+\n+  // Add these states\n+  const [isLoadingSubtopics, setIsLoadingSubtopics] = useState(false);\n+  const [isLoadingLessons, setIsLoadingLessons] = useState(false);\n+\n+  // Add these state variables\n+  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n+  const [itemToDelete, setItemToDelete] = useState<{\n+    id: string;\n+    type: 'topic' | 'subtopic' | 'lesson';\n+    title: string;\n+  } | null>(null);\n+\n+  // Event handlers\n+  const handleQuestionTypeChange = useCallback((type: string) => {\n+    if (isQuestionType(type)) {\n+      setSelectedQuestionType(type);\n+    }\n+  }, []);\n+\n+  const handleAddQuestion = useCallback(() => {\n+    if (!selectedQuestionType || !isQuestionType(selectedQuestionType)) return;\n+\n+    const defaultData = QUESTION_TYPES[selectedQuestionType].defaultData;\n+    const newQuestion: Question = {\n+      id: crypto.randomUUID(),\n+      type: selectedQuestionType,\n+      //data: {},\n+      title: 'New Question',\n+      content: '',\n+      lesson_id: currentLessonId || '',\n+      metadata: {},\n+      data: {\n+        ...defaultData,\n+        prompt: '',\n+        teacher_script: '',\n+        followup_prompt: [],\n+        sample_answer: ''\n+      },\n+      correct_answer: '',\n+      exercisePrompts: [],\n+      isDraft: true\n+    };\n+\n+    setQuestions(prev => [...prev, newQuestion]);\n+    setQuestionSaveStatuses(prev => [\n+      ...prev,\n+      { id: newQuestion.id, status: 'draft' }\n+    ]);\n+    setSelectedQuestionType('');\n+  }, [selectedQuestionType, currentLessonId]);\n+\n+  const handleRemoveQuestion = async (index: number) => {\n+    try {\n+      const questionToDelete = questions[index];\n+      \n+      // Delete related exercise prompts first\n+      const { error: promptError } = await supabase\n+        .from('exercise_prompts')\n+        .delete()\n+        .eq('question_id', questionToDelete.id);\n+\n+      if (promptError) throw promptError;\n+\n+      // Then delete the question\n+      const { error: questionError } = await supabase\n+        .from('questions')\n+        .delete()\n+        .eq('id', questionToDelete.id);\n+\n+      if (questionError) throw questionError;\n+\n+      // Update local state\n+      const newQuestions = questions.filter((_, i) => i !== index);\n+      setQuestions(newQuestions);\n+      \n+      toast.success('Question and related prompts deleted successfully');\n+    } catch (error) {\n+      console.error('Error deleting question:', error);\n+      toast.error('Failed to delete question and prompts');\n+    }\n+  };\n+\n+  const handleUpdateQuestion = useCallback(async (index: number, updatedQuestion: Question) => {\n+    const newQuestions = [...questions];\n+    newQuestions[index] = updatedQuestion;\n+    setQuestions(newQuestions);\n+    setQuestionSaveStatuses(prev => prev.map((status, i) => \n+      i === index ? { ...status, status: 'draft' } : status\n+    ));\n+  }, [questions]);\n+\n+  const handleAddExercisePrompt = useCallback((questionIndex: number) => {\n+    setQuestions(prev => prev.map((question, i) => {\n+      if (i === questionIndex) {\n+        return {\n+          ...question,\n+          exercisePrompts: [\n+            ...question.exercisePrompts,\n+            {\n+              id: crypto.randomUUID(),\n+              text: '',\n+              media: '',\n+              type: 'image',\n+              narration: 'Your turn',\n+              saytext: 'Say: ',\n+              metadata: {\n+                estimatedTime: 0\n+              },\n+              created_at: new Date().toISOString(),\n+              updated_at: new Date().toISOString()\n+            }\n+          ]\n+        };\n+      }\n+      return question;\n+    }));\n+  }, []);\n+\n+  const handleRemoveExercisePrompt = useCallback((questionIndex: number, promptIndex: number) => {\n+    setQuestions(prev => prev.map((question, i) => {\n+      if (i === questionIndex) {\n+        return {\n+          ...question,\n+          exercisePrompts: question.exercisePrompts.filter((_, j) => j !== promptIndex)\n+        };\n+      }\n+      return question;\n+    }));\n+  }, []);\n+\n+  const handleExercisePromptChange = useCallback(async (\n+    questionIndex: number,\n+    promptIndex: number,\n+    updatedPrompt: ExercisePrompt\n+  ) => {\n+    try {\n+      const promptUpdate = {\n+        id: updatedPrompt.id,\n+        question_id: updatedPrompt.question_id,\n+        text: updatedPrompt.text,\n+        type: updatedPrompt.type,\n+        narration: updatedPrompt.narration,\n+        saytext: updatedPrompt.saytext,\n+        media: updatedPrompt.media,\n+        // Remove order_index as it's not in schema\n+        created_at: new Date().toISOString()\n+      };\n+\n+      const { error: promptError } = await supabase\n+        .from('exercise_prompts')\n+        .upsert(promptUpdate)\n+        .select();\n+\n+      if (promptError) throw promptError;\n+\n+      // Update local state\n+      setQuestions(prev => prev.map((question, i) => {\n+        if (i === questionIndex) {\n+          const newPrompts = [...question.exercisePrompts];\n+          newPrompts[promptIndex] = updatedPrompt;\n+          return { ...question, exercisePrompts: newPrompts };\n+        }\n+        return question;\n+      }));\n+\n+    } catch (error) {\n+      console.error('Error saving prompt:', error);\n+      toast.error('Failed to save prompt');\n+    }\n+  }, []);\n+\n+  const handleAddActivity = useCallback(() => {\n+    const newActivity: Activity = {\n+      id: crypto.randomUUID(),\n+      lesson_id: currentLessonId || '',\n+      created_at: new Date().toISOString(),\n+      type: 'practice',\n+      title: '',\n+      name: '',\n+      instructions: '',\n+      media: [],\n+      data: {\n+        prompt: '',\n+        teacherScript: '',\n+        media: []\n+      }\n+    };\n+    setActivities(prev => [...prev, newActivity]);\n+  }, [currentLessonId]);\n+\n+  const handleUpdateActivity = useCallback((index: number, updatedActivity: Activity) => {\n+    setActivities(prev => prev.map((activity, i) => i === index ? updatedActivity : activity));\n+  }, []);\n+\n+  const handleRemoveActivity = useCallback((index: number) => {\n+    setActivities(prev => prev.filter((_, i) => i !== index));\n+  }, []);\n+\n+  const handleExercisePromptUpdate = useCallback((questionIndex: number, promptIndex: number, updatedPrompt: ExercisePrompt) => {\n+    const updatedQuestions = [...questions];\n+    updatedQuestions[questionIndex].exercisePrompts[promptIndex] = updatedPrompt;\n+    handleUpdateQuestion(questionIndex, updatedQuestions[questionIndex]);\n+  }, [questions, handleUpdateQuestion]);\n+\n+  const handleQuestionDataChange = useCallback((questionIndex: number, field: string, value: string) => {\n+    setQuestions(prev => prev.map((q, i) => \n+      i === questionIndex \n+        ? { \n+            ...q, \n+            data: { \n+              prompt: q.data?.prompt || '',\n+              teacherScript: q.data?.teacherScript || '',\n+              ...q.data,\n+              [field]: value \n+            } \n+          }\n+        : q\n+    ));\n+  }, []);\n+\n+  const [isSaving, setIsSaving] = useState(false);\n+\n+  const handleSaveLesson = async () => {\n+    try {\n+      if (!currentLessonId || !selectedSubtopicId) {\n+        toast.error('Please select a subtopic and lesson first');\n+        return;\n+      }\n+\n+      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\n+      if (sessionError) throw sessionError;\n+      \n+      if (!session?.user) {\n+        toast.error('Please sign in to save lessons');\n+        return;\n+      }\n+\n+      // Get user's role from session\n+      const userRole = session.user.user_metadata?.role;\n+      console.log('Current user role:', userRole);\n+      console.log('📝 Saving content heading:', {\n+        contentHeading,\n+        currentLessonId,\n+        selectedSubtopicId,\n+        timestamp: new Date().toISOString()\n+      });\n+\n+      // Create metadata object\n+      const lessonMetadata = {\n+        lastEdited: new Date().toISOString(),\n+        version: 1,\n+        status: 'draft' \n+      };\n+\n+      // Complete lesson data with all fields\n+      const lessonData = {\n+        id: currentLessonId,\n+        title: lessonTitle,\n+        content: lessonContent,\n+        metadata: lessonMetadata, // Supabase will automatically handle JSON conversion\n+        content_type: 'html',\n+        lesson_type: 'lesson',\n+        grade_id: selectedGradeId,\n+        topic_id: selectedTopicId,\n+        subtopic_id: selectedSubtopicId,\n+        user_id: session.user.id,\n+        updated_at: new Date().toISOString(),\n+        role: userRole, // Include role in the payload\n+        description: '',\n+        prerequisites: [],\n+        media_type: 'image',\n+        media_url: '',\n+        contentheading: contentHeading || ''\n+      };\n+\n+      console.log('📦 Data being sent to Supabase:', lessonData);\n+\n+      // Save lesson with all fields\n+      const { data, error: lessonError } = await supabase\n+        .from('lessons')\n+        .upsert(lessonData, { \n+          onConflict: 'id'\n+        })\n+        .select();\n+\n+      if (lessonError) throw lessonError;\n+\n+      // 2. Save lesson content\n+      const { data: existingContent } = await supabase\n+        .from('lesson_content')\n+        .select('id')\n+        .eq('lesson_id', currentLessonId)\n+        .single();\n+\n+      const contentMetadata = {\n+        lastEdited: new Date().toISOString(),\n+        version: 1,\n+        status: 'draft'\n+      };\n+\n+      const contentUpdate = {\n+        id: existingContent?.id || crypto.randomUUID(),\n+        lesson_id: currentLessonId,\n+        content: [lessonContent],\n+        metadata: contentMetadata, // Supabase will automatically handle JSON conversion\n+        content_type: 'html',\n+        user_id: session.user.id,\n+        updated_at: new Date().toISOString(),\n+        created_at: new Date().toISOString()\n+      };\n+\n+      const { error: contentError } = await supabase\n+        .from('lesson_content')\n+        .upsert(contentUpdate, { onConflict: 'id' });\n+\n+      if (contentError) throw contentError;\n+\n+      // 3. Save questions\n+      for (const question of questions) {\n+        const questionData = {\n+          id: question.id,\n+          lesson_id: currentLessonId,\n+          type: question.type,\n+          title: question.title,\n+          metadata: question.metadata,\n+          data: question.data,\n+          updated_at: new Date().toISOString(),\n+          user_id: session.user.id\n+        };\n+\n+        const { error: questionError } = await supabase\n+          .from('questions')\n+          .upsert(questionData, { onConflict: 'id' });\n+\n+        if (questionError) throw questionError;\n+\n+        //4. Save exercise prompts for this question\n+        if (question.exercisePrompts) {\n+          for (const prompt of question.exercisePrompts) {\n+            const promptData = {\n+              id: prompt.id,\n+              question_id: question.id,\n+              text: prompt.text,\n+              media: prompt.media,\n+              type: prompt.type,\n+              narration: prompt.narration,\n+              saytext: prompt.saytext,\n+              user_id: session.user.id,\n+              updated_at: new Date().toISOString()\n+            };\n+\n+            const { error: promptError } = await supabase\n+              .from('exercise_prompts')\n+              .upsert(promptData, { onConflict: 'id' });\n+\n+            if (promptError) throw promptError;\n+          }\n+        }\n+      }\n+\n+      // 5. Save activities\n+      if (activities.length > 0) {\n+        const activitiesData = activities.map(activity => ({\n+          id: activity.id,\n+          lesson_id: currentLessonId,\n+          type: activity.type,\n+          title: activity.title,\n+          name: activity.name,\n+          instructions: activity.instructions,\n+          media: activity.media,\n+          data: activity.data,\n+          created_at: new Date().toISOString()\n+        }));\n+\n+        const { error: activitiesError } = await supabase\n+          .from('activities')\n+          .upsert(activitiesData, { onConflict: 'id' });\n+\n+        if (activitiesError) throw activitiesError;\n+      }\n+\n+      // After successful save\n+      console.log('✅ Content heading saved successfully:', {\n+        contentHeading,\n+        lessonId: currentLessonId,\n+        timestamp: new Date().toISOString()\n+      });\n+\n+      toast.success('Lesson saved successfully');\n+    } catch (err) {\n+      const error = err as PostgrestError;\n+      console.error('❌ Error saving content heading:', {\n+        error: error.message,\n+        contentHeading,\n+        lessonContent,\n+        lessonId: currentLessonId,\n+        timestamp: new Date().toISOString()\n+      });\n+      toast.error(`Failed to save lesson: ${error.message}`);\n+\n+\n+    }\n+  };\n+\n+  const handleSaveQuestion = async (question: Question, index: number) => {\n+    const loadingToast = toast.loading(`Saving question ${index + 1}...`);\n+    \n+    try {\n+      const { data: { session } } = await supabase.auth.getSession();\n+      if (!session?.user) {\n+        toast.error('Please sign in to save question', { id: loadingToast });\n+        return;\n+      }\n+\n+      // Save question\n+      const questionData = {\n+        id: question.id,\n+        lesson_id: currentLessonId,\n+        type: question.type,\n+        title: question.title,\n+        metadata: question.metadata,\n+        data: {\n+          prompt: question.data?.prompt ?? '',\n+          teacherScript: question.data?.teacherScript ?? '',\n+          followup_prompt: question.data?.followup_prompt ?? [],\n+          sampleAnswer: question.data?.sampleAnswer || undefined,  // Convert null to undefined\n+          answer: question.data?.answer || undefined  // Convert null to undefined\n+        } as const,\n+        user_id: session.user.id,\n+        updated_at: new Date().toISOString()\n+      };\n+\n+      const { error: questionError } = await supabase\n+        .from('questions')\n+        .upsert(questionData, { onConflict: 'id' });\n+\n+      if (questionError) throw questionError;\n+\n+      // Save exercise prompts if they exist\n+      if (question.exercisePrompts?.length) {\n+        for (const prompt of question.exercisePrompts) {\n+          const promptData = {\n+            id: prompt.id,\n+            question_id: question.id,\n+            text: prompt.text,\n+            type: prompt.type,\n+            narration: prompt.narration,\n+            saytext: prompt.saytext,\n+            media: prompt.media,\n+            user_id: session.user.id,\n+            updated_at: new Date().toISOString()\n+          };\n+\n+          const { error: promptError } = await supabase\n+            .from('exercise_prompts')\n+            .upsert(promptData, { onConflict: 'id' });\n+\n+          if (promptError) throw promptError;\n+        }\n+      }\n+\n+      toast.success(`Question ${index + 1} saved successfully`, { id: loadingToast });\n+    } catch (error) {\n+      console.error('Error saving question:', error);\n+      toast.error(`Failed to save question ${index + 1}`, { id: loadingToast });\n+    }\n+  };\n+\n+  const handleSaveActivity = async (activity: Activity) => {\n+    try {\n+      await contentService.saveActivity(activity);\n+      toast.success('Activity saved');\n+    } catch (error) {\n+      console.error('Failed to save activity:', error);\n+      toast.error('Failed to save activity');\n+    }\n+  };\n+\n+  // Effects\n+  useEffect(() => {\n+    const fetchGrades = async () => {\n+      try {\n+        const { data, error } = await supabase\n+          .from('grades')\n+          .select('*')\n+          .order('name');\n+\n+        if (error) {\n+          console.error('Supabase error:', error);\n+          throw error;\n+        }\n+\n+        if (!data) {\n+          throw new Error('No data returned from Supabase');\n+        }\n+\n+        // Map the grades to match your interface\n+        const validGrades = data.map((grade: any) => ({\n+          _id: grade.id,\n+          id: grade.id,\n+          name: grade.name,\n+          level: grade.level || 0,  // Add default value if not provided\n+          orderIndex: grade.order_index || 0,  // Add default value if not provided\n+          topics: []\n+        }));\n+        \n+        setGrades(validGrades);\n+      } catch (error) {\n+        console.error('Error fetching grades:', error);\n+        toast.error('Failed to fetch grades');\n+      }\n+    };\n+\n+    fetchGrades();\n+  }, []);\n+\n+  // Topic Selection\n+  useEffect(() => {\n+    const fetchTopics = async () => {\n+      if (!selectedGradeId) return;\n+      \n+      try {\n+        const { data, error } = await supabase\n+          .from('topics')\n+          .select('*')\n+          .eq('grade_id', selectedGradeId)\n+          .order('title');\n+\n+        if (error) {\n+          throw error;\n+        }\n+\n+        // Map the topics to match your interface\n+        const validTopics = (data || []).map((topic: any) => ({\n+          _id: topic.id,\n+          id: topic.id,\n+          name: topic.title,\n+          title: topic.title,\n+          grade_id: topic.grade_id,\n+          subtopics: []\n+        }));\n+        \n+        setTopics(validTopics);\n+      } catch (error) {\n+        console.error('Error fetching topics:', error);\n+        toast.error('Failed to fetch topics');\n+      }\n+    };\n+\n+    fetchTopics();\n+  }, [selectedGradeId]);\n+\n+  // Subtopic Selection\n+  useEffect(() => {\n+    const fetchSubtopics = async () => {\n+      if (!selectedTopicId) return;\n+      \n+      try {\n+        // Use content service to fetch subtopics\n+        const subtopicsData = await contentService.fetchSubtopics(selectedTopicId);\n+        console.log('Fetched subtopics:', subtopicsData);\n+\n+        const validSubtopics = subtopicsData.map((subtopic: any) => ({\n+          id: subtopic.id,\n+          title: subtopic.title,\n+          description: subtopic.description,\n+          topic_id: subtopic.topic_id,\n+          lessons: [],\n+          order_index: subtopicsData.length\n+        }));\n+        \n+        setSubtopics(validSubtopics);\n+        \n+        // Update global state\n+        if (selectedSubtopic) {\n+          setSelectedSubtopic(selectedSubtopic);\n+        }\n+      } catch (err) {\n+        const error = err as Error;\n+        console.error('Error fetching subtopics:', error);\n+        toast.error('Failed to fetch subtopics');\n+      }\n+    };\n+\n+    fetchSubtopics();\n+  }, [selectedTopicId, selectedSubtopic, setSelectedSubtopic]);\n+\n+  // Add effect to monitor subtopics state\n+  useEffect(() => {\n+    console.log('Current subtopics state:', subtopics);\n+  }, [subtopics]);\n+\n+  // Add fetchLessons function\n+  const fetchLessons = useCallback(async () => {\n+    if (!selectedSubtopicId) return;\n+    try {\n+      const { data, error } = await supabase\n+        .from('lessons')\n+        .select('*')\n+        .eq('subtopic_id', selectedSubtopicId)\n+        .order('title');\n+\n+      if (error) {\n+        throw error;\n+      }\n+      \n+      // Map the lessons to ensure they have _id\n+      const validLessons = (data || []).map((lesson: any) => ({\n+        ...lesson,\n+        _id: lesson._id || lesson.id, // Use _id if available, otherwise use id\n+        title: lesson.title || 'Untitled Lesson'\n+      })).filter((lesson: any) => lesson._id); // Only include lessons with valid IDs\n+      \n+      setLessons(validLessons);\n+    } catch (error) {\n+      console.error('Error fetching lessons:', error);\n+      toast.error('Failed to fetch lessons');\n+    }\n+  }, [selectedSubtopicId]);\n+  // Add loadLessonContent function\n+  const isLoading = useRef(false);\n+  const loadLessonContent = useCallback(async (lessonId: string) => {\n+    // Prevent multiple simultaneous loads\n+    if (isLoading.current) return;\n+    isLoading.current = true;\n+\n+    const controller = new AbortController();\n+\n+    try {\n+      // Clear existing content first\n+      setLessonTitle('');\n+      setContentHeading('');\n+      setLessonContent('');\n+      setQuestions([]);\n+      \n+      // First fetch lesson data\n+      const { data: lessonData, error: lessonError } = await supabase\n+        .from('lessons')\n+        .select('*')\n+        .eq('id', lessonId)\n+        .single()\n+        \n+\n+      if (lessonError) {\n+        console.error('Lesson fetch error:', lessonError);\n+        throw lessonError;\n+      }\n+\n+      // Set lesson data\n+      setLessonTitle(lessonData.title || '');\n+      setContentHeading(lessonData.content || '');\n+\n+      // Then fetch lesson content with explicit headers\n+      const { data: contentData, error: contentError } = await supabase\n+        .from('lesson_content')\n+        .select('*')\n+        .eq('lesson_id', lessonId)\n+        .order('updated_at', { ascending: false })\n+        .limit(1)\n+        .maybeSingle();\n+\n+      if (contentError) {\n+        console.error('Content fetch error:', contentError);\n+        throw contentError;\n+      }\n+\n+      // Set content if available\n+      if (contentData?.content) {\n+        setLessonContent(typeof contentData.content === 'string' \n+          ? contentData.content \n+          : JSON.stringify(contentData.content)\n+        );\n+      }\n+\n+    } catch (error: unknown) {\n+      if (error instanceof Error && error.name === 'AbortError') {\n+        console.log('Request aborted');\n+        return;\n+      }\n+      console.error('Error loading lesson:', error);\n+      toast.error('Failed to load lesson content');\n+      \n+      // Reset states on error\n+      setLessonTitle('');\n+      setContentHeading('');\n+      setLessonContent('');\n+      setQuestions([]);\n+    } finally {\n+      isLoading.current = false;\n+    }\n+\n+    return () => {\n+      controller.abort();\n+    };\n+  }, []); // Empty dependencies since we're using closure over state setters\n+\n+  // // Add effect for fetching lessons when subtopic changes\n+  useEffect(() => {\n+    if (selectedSubtopicId) {\n+      fetchLessons();\n+    }\n+  }, [selectedSubtopicId, fetchLessons]);\n+\n+  // Add effect for loading lesson content when currentLessonId changes\n+    useEffect(() => {\n+    let isMounted = true;\n+    let timeoutId: NodeJS.Timeout;\n+\n+    const loadContent = async () => {\n+      if (!currentLessonId || !isMounted) return;\n+\n+      // Clear previous timeout if exists\n+      if (timeoutId) clearTimeout(timeoutId);\n+\n+      // Set new timeout for debouncing\n+      timeoutId = setTimeout(() => {\n+        if (isMounted) {\n+          loadLessonContent(currentLessonId);\n+        }\n+      }, 300);\n+    };\n+\n+    loadContent();\n+\n+    // Cleanup function\n+    return () => {\n+      isMounted = false;\n+      if (timeoutId) clearTimeout(timeoutId);\n+      if (isLoading.current) isLoading.current = false;\n+    };\n+  }, [currentLessonId]); // Remove loadLessonContent from dependencies\n+\n+  useEffect(() => {\n+    console.log('Current lessons state:', lessons);\n+  }, [lessons]);\n+\n+    // Add keyboard shortcut for saving\n+  useEffect(() => {\n+    const handleKeyDown = (e: KeyboardEvent) => {\n+      if ((e.ctrlKey || e.metaKey) && e.key === 's') {\n+        e.preventDefault();\n+        handleSaveLesson();\n+      }\n+    };\n+\n+    window.addEventListener('keydown', handleKeyDown);\n+    return () => window.removeEventListener('keydown', handleKeyDown);\n+  }, [handleSaveLesson]);\n+\n+  // Add SaveFeedback component\n+  const SaveFeedback = useCallback(() => {\n+    if (saveProgress === 'idle') return null;\n+\n+    return (\n+    <div className=\"fixed bottom-4 right-4\">\n+      {saveProgress === 'saving' && (\n+        <div className=\"flex items-center gap-2 bg-background border rounded-lg px-4 py-2 shadow-lg\">\n+          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n+          <span className=\"text-sm\">Saving changes...</span>\n+        </div>\n+      )}\n+      {saveProgress === 'saved' && (\n+        <div className=\"flex items-center gap-2 bg-green-500 text-white rounded-lg px-4 py-2 shadow-lg\">\n+          <Check className=\"h-4 w-4\" />\n+          <span className=\"text-sm\">Changes saved</span>\n+        </div>\n+      )}\n+      {saveProgress === 'error' && (\n+        <div className=\"flex items-center gap-2 bg-destructive text-destructive-foreground rounded-lg px-4 py-2 shadow-lg\">\n+          <X className=\"h-4 w-4\" />\n+          <span className=\"text-sm\">Error saving changes</span>\n+        </div>\n+      )}\n+    </div>\n+  );\n+  }, [saveProgress]);\n+\n+  // Update handlers\n+  const handleGradeSelect = (gradeId: string) => {\n+    // Always keep sidebar open during selection\n+    setIsSidebarCollapsed(false);\n+    setIsSidebarLocked(true);\n+    \n+    // Batch state updates\n+    requestAnimationFrame(() => {\n+      setSelectedGradeId(gradeId);\n+      setSelectedGrade(gradeId);\n+      setSelectedTopicId(null);\n+      setSelectedTopic('');\n+      setSelectedSubtopicId(null);\n+      setSelectedSubtopic('');\n+      setCurrentLessonId(null);\n+      \n+      if (isViewMode) {\n+        setExpandedGrade(gradeId);\n+      }\n+    });\n+  };\n+\n+  const handleTopicSelect = (value: string) => {\n+    setSelectedTopicId(value);\n+    setSelectedTopic(value);\n+    setSelectedSubtopicId(null);\n+    setSelectedSubtopic('');\n+    setCurrentLessonId(null);\n+  };\n+\n+  const handleSubtopicSelect = (value: string) => {\n+    setSelectedSubtopicId(value);\n+    setSelectedSubtopic(value);\n+    setCurrentLessonId(null);\n+  };\n+\n+  const handleLessonSelect = async (lessonId: string) => {\n+    try {\n+      // Lock sidebar during selection\n+      setIsSidebarLocked(true);\n+      setIsSidebarCollapsed(false);\n+      setCurrentLessonId(lessonId);\n+      \n+      // 1. Fetch lesson data\n+      const { data: lessonData, error: lessonError } = await supabase\n+        .from('lessons')\n+        .select('*')\n+        .eq('id', lessonId)\n+        .single();\n+\n+      if (lessonError) throw lessonError;\n+\n+      // 2. Fetch questions with exercise prompts\n+      const { data: questionsData, error: questionsError } = await supabase\n+        .from('questions')\n+        .select(`\n+          *,\n+          exercise_prompts (*)\n+        `)\n+        .eq('lesson_id', lessonId);\n+\n+      if (questionsError) throw questionsError;\n+\n+      // 3. Fetch activities - removed order_index\n+      const { data: activitiesData, error: activitiesError } = await supabase\n+        .from('activities')\n+        .select('*')\n+        .eq('lesson_id', lessonId);\n+\n+      if (activitiesError) throw activitiesError;\n+\n+      // Format questions with their exercise prompts\n+      const formattedQuestions = questionsData?.map(q => ({\n+        ...q,\n+        data: q.data || {},\n+        exercisePrompts: q.exercise_prompts || []\n+      })) || [];\n+\n+      // Set all states\n+      setLessonTitle(lessonData.title || '');\n+      setLessonContent(lessonData.content || '');\n+      setQuestions(formattedQuestions);\n+      setActivities(activitiesData || []);\n+\n+      // After successful load, unlock sidebar and allow collapse\n+      setTimeout(() => {\n+        setIsSidebarLocked(false);\n+        if (!isSidebarLocked) {\n+          setIsSidebarCollapsed(true);\n+        }\n+      }, 300);\n+\n+    } catch (error) {\n+      console.error('Error loading lesson:', error);\n+      toast.error('Failed to load lesson');\n+      // Reset states on error\n+      setLessonTitle('');\n+      setLessonContent('');\n+      setQuestions([]);\n+      setActivities([]);\n+    }\n+    if (!isSidebarLocked) {\n+      setIsSidebarCollapsed(true);\n+    }\n+  };\n+\n+  // Update the expansion handlers\n+  const handleTopicExpand = async (topicId: string) => {\n+    setExpandedTopic(expandedTopic === topicId ? null : topicId);\n+    setSelectedTopicId(topicId);\n+    \n+    // Load subtopics when topic is expanded\n+    if (topicId) {\n+      setIsLoadingSubtopics(true);\n+      try {\n+        const { data: subtopicsData, error } = await supabase\n+          .from('subtopics')\n+          .select('*')\n+          .eq('topic_id', topicId)\n+          .order('order_index');\n+\n+        if (error) throw error;\n+        setSubtopics(subtopicsData || []);\n+      } catch (error) {\n+        console.error('Error loading subtopics:', error);\n+        toast.error('Failed to load subtopics');\n+      } finally {\n+        setIsLoadingSubtopics(false);\n+      }\n+    }\n+  };\n+\n+  const handleSubtopicExpand = async (subtopicId: string) => {\n+    setExpandedSubtopic(expandedSubtopic === subtopicId ? null : subtopicId);\n+    setSelectedSubtopicId(subtopicId);\n+    \n+    if (subtopicId) {\n+      setIsLoadingLessons(true);\n+      try {\n+        const { data: lessonsData, error } = await supabase\n+          .from('lessons')\n+          .select('*')\n+          .eq('subtopic_id', subtopicId)\n+          .order('order_index');\n+\n+        if (error) throw error;\n+        setLessons(lessonsData || []);\n+      } catch (error) {\n+        console.error('Error loading lessons:', error);\n+        toast.error('Failed to load lessons');\n+      } finally {\n+        setIsLoadingLessons(false);\n+      }\n+    }\n+  };\n+\n+  const handleQuestionExpand = (index: number) => {\n+    setExpandedQuestion(expandedQuestion === index ? null : index);\n+  };\n+\n+  const handleActivityExpand = (index: number) => {\n+    setExpandedActivity(expandedActivity === index ? null : index);\n+  };\n+\n+  // Add effect to save mode changes to localStorage\n+  useEffect(() => {\n+    localStorage.setItem('lessonManagementViewMode', isViewMode.toString());\n+  }, [isViewMode]);\n+\n+  // Add handlers for creating new items\n+  const handleCreateGrade = async () => {\n+    try {\n+      const response = await fetch(`${API_ENDPOINT}/grades`, {\n+        method: 'POST',\n+        headers: { 'Content-Type': 'application/json' },\n+        body: JSON.stringify({ name: newItemData.name })\n+      });\n+\n+      if (!response.ok) throw new Error('Failed to create grade');\n+      const data = await response.json();\n+      \n+      if (!data.success) throw new Error(data.message || 'Failed to create grade');\n+      \n+      // Update grades list\n+      setGrades([...grades, data.data.grade]);\n+      setModalState({ ...modalState, showAddGrade: false });\n+      setNewItemData({ name: '', description: '' });\n+      toast.success('Grade created successfully');\n+    } catch (error) {\n+      console.error('Error creating grade:', error);\n+      toast.error('Failed to create grade');\n+    }\n+  };\n+\n+  const handleCreateTopic = async () => {\n+    if (!selectedGradeId) {\n+      toast.error('Please select a grade first');\n+      return;\n+    }\n+\n+    try {\n+      const newTopic = await contentService.createTopic({\n+        title: newItemData.name, // Map from newItemData.name to title\n+        description: newItemData.description,\n+        gradeId: selectedGradeId\n+      });\n+\n+      setTopics(prev => [...prev, newTopic]);\n+      toast.success('Topic created successfully');\n+      setModalState({ ...modalState, showAddTopic: false });\n+      setNewItemData({ name: '', description: '' });\n+    } catch (err) {\n+      const error = err instanceof Error ? err.message : String(err);\n+      console.error('Error creating topic:', error);\n+      toast.error('Failed to create topic');\n+    }\n+  };\n+    \n+  \n+\n+\n+  const handleCreateSubtopic = async (data: { title: string; description?: string }) => {\n+    try {\n+      if (!selectedTopicId) {\n+        toast.error('Please select a topic first');\n+        return;\n+      }\n+\n+      const newSubtopic = await contentService.createSubtopic({\n+        ...data,\n+        topicId: selectedTopicId\n+      });\n+\n+      setSubtopics(prev => [...prev, {\n+        _id: newSubtopic.id,\n+        id: newSubtopic.id,\n+        name: newSubtopic.title,\n+        title: newSubtopic.title,\n+        description: newSubtopic.description,\n+        topic_id: newSubtopic.topic_id,\n+        orderIndex: prev.length,\n+        lessons: []\n+      }]);\n+\n+      toast.success('Subtopic created successfully');\n+      setModalState(prev => ({ ...prev, showAddSubtopic: false }));\n+    } catch (err) {\n+      const error = err as Error;\n+      console.error('Error creating subtopic:', error);\n+      toast.error('Failed to create subtopic');\n+    }\n+  };\n+\n+  const handleUpdateSubtopic = async (subtopicId: string, data: { title: string; description?: string }) => {\n+    try {\n+      const { data: updatedSubtopic, error } = await supabase\n+        .from('sub_topics')\n+        .update(data)\n+        .eq('id', subtopicId)\n+        .select()\n+        .single();\n+\n+      if (error) throw error;\n+      \n+      setSubtopics(prev => prev.map(subtopic => \n+        subtopic.id === subtopicId \n+          ? {\n+              ...subtopic,\n+              name: updatedSubtopic.title\n+            }\n+          : subtopic\n+      ));\n+\n+      toast.success('Subtopic updated successfully');\n+    } catch (err) {\n+      const error = err as Error;\n+      console.error('Error updating subtopic:', error);\n+      toast.error('Failed to update subtopic');\n+    }\n+  };\n+\n+  const handleDeleteSubtopic = async (subtopicId: string) => {\n+    try {\n+      await contentService.deleteSubtopic(subtopicId);\n+      setSubtopics(prev => prev.filter(subtopic => subtopic.id !== subtopicId));\n+      setSelectedSubtopicId(null);\n+      toast.success('Subtopic deleted successfully');\n+    } catch (err) {\n+      const error = err as Error;\n+      console.error('Error deleting subtopic:', error);\n+      toast.error('Failed to delete subtopic');\n+    }\n+  };\n+\n+  const handleCreateLesson = async () => {\n+    if (!selectedSubtopicId) {\n+      toast.error('Please select a subtopic first');\n+      return;\n+    }\n+\n+    try {\n+      // First create the lesson\n+      const { data: newLesson, error: lessonError } = await supabase\n+        .from('lessons')\n+        .insert({\n+          title: newItemData.name,\n+          duration: 0,\n+          topic_id: selectedTopicId,\n+          subtopic_id: selectedSubtopicId,\n+          content: '', // Empty rich text content initially\n+          status: 'draft'\n+        })\n+        .select()\n+        .single();\n+\n+      if (lessonError) throw lessonError;\n+\n+      // Create initial question\n+      const { data: newQuestion, error: questionError } = await supabase\n+        .from('questions')\n+        .insert({\n+          lesson_id: newLesson.id,\n+          type: 'speaking', // default type\n+          title: 'Question 1',\n+          data: {\n+            prompt: '',\n+            teacherScript: '',\n+            options: []\n+          },\n+          order_index: 0\n+        })\n+        .select()\n+        .single();\n+\n+      if (questionError) throw questionError;\n+\n+      // Create initial exercise prompts for the question\n+      const { error: promptsError } = await supabase\n+        .from('exercise_prompts')\n+        .insert([\n+          {\n+            question_id: newQuestion.id,\n+            text: '',\n+            type: 'image',\n+            narration: '',\n+            saytext: '',\n+            media: [],\n+            order_index: 0\n+          },\n+          {\n+            question_id: newQuestion.id,\n+            text: '',\n+            type: 'gif',\n+            narration: '',\n+            saytext: '',\n+            media: [],\n+            order_index: 1\n+          }\n+        ]);\n+\n+      if (promptsError) throw promptsError;\n+\n+      // Create initial activity\n+      // const { error: activityError } = await supabase\n+      //   .from('activities')\n+      //   .insert({\n+      //     lesson_id: newLesson.id,\n+      //     type: 'practice',\n+      //     title: '',\n+      //     instructions: '',\n+      //     media: [],\n+      //     data: {\n+      //       prompt: '',\n+      //       teacherScript: '',\n+      //       media: []\n+      //     },\n+      //     order_index: 0\n+      //   });\n+\n+      // if (activityError) throw activityError;\n+\n+      // Update UI state\n+      setLessons(prev => [...prev, newLesson]);\n+      setCurrentLessonId(newLesson.id);\n+      setLessonTitle(newLesson.title);\n+      setModalState({ ...modalState, showAddLesson: false });\n+      setNewItemData({ name: '', description: '' });\n+      toast.success('Lesson created successfully');\n+\n+    } catch (error) {\n+      console.error('Error creating lesson:', error);\n+      toast.error('Failed to create lesson');\n+    }\n+  };\n+\n+  // Effect to handle localStorage after mount\n+  useEffect(() => {\n+    const storedMode = localStorage.getItem('lessonManagementViewMode');\n+    if (storedMode !== null) {\n+      setIsViewMode(storedMode === 'true');\n+    }\n+  }, []);\n+\n+  // Update the cleanupModalState function\n+  const cleanupModalState = useCallback(() => {\n+    document.body.style.pointerEvents = '';\n+    document.body.style.overflow = '';\n+    setModalState({\n+      showAddGrade: false,\n+      showAddTopic: false,\n+      showAddSubtopic: false,\n+      showAddLesson: false\n+    });\n+    setNewItemData({ name: '', description: '' });\n+  }, []);\n+\n+  // Add a function to handle modal state changes\n+  const handleModalStateChange = useCallback((modalType: keyof typeof modalState, open: boolean) => {\n+    if (!open) {\n+      cleanupModalState();\n+    } else {\n+      setModalState(prev => ({ ...prev, [modalType]: open }));\n+    }\n+  }, [cleanupModalState]);\n+\n+  const handleContentSave = async (content: string) => {\n+    const loadingToast = toast.loading(\"Saving content...\", {\n+      action: {\n+        label: \"Close\",\n+        onClick: () => toast.dismiss()\n+      }\n+    });\n+    \n+    try {\n+      const { data: { session } } = await supabase.auth.getSession();\n+      if (!session?.user) {\n+        toast.error('Please sign in to save content', { id: loadingToast });\n+        return;\n+      }\n+\n+      // Get the most recent content entry\n+      const { data: existingContent, error: checkError } = await supabase\n+        .from('lesson_content')\n+        .select('id')\n+        .eq('lesson_id', currentLessonId)\n+        .order('updated_at', { ascending: false })\n+        .limit(1)\n+        .maybeSingle();\n+\n+      // If content exists, update it; if not, insert new\n+      const { error } = await supabase\n+        .from('lesson_content')\n+        .upsert({\n+          id: existingContent?.id, // This ensures we update if id exists\n+          lesson_id: currentLessonId,\n+          content: [content],\n+          content_type: 'text',\n+          metadata: {\n+            heading: contentHeading\n+          },\n+          user_id: session.user.id,\n+          updated_at: new Date().toISOString()\n+        }, {\n+          onConflict: 'id'  // This ensures we update based on lesson_id\n+        });\n+\n+      if (error) throw error;\n+\n+      // Save questions separately\n+      for (const question of questions) {\n+        const { exercisePrompts, ...questionData } = question; // Remove exercisePrompts from question data\n+        \n+        // Save question\n+        const { error: questionError } = await supabase\n+          .from('questions')\n+          .upsert(questionData, {\n+            onConflict: 'id'\n+          })\n+          .select();\n+\n+        if (questionError) throw questionError;\n+\n+        // Save exercise prompts\n+        if (exercisePrompts?.length > 0) {\n+          for (const prompt of exercisePrompts) {\n+            const { error: promptError } = await supabase\n+              .from('exercise_prompts')\n+              .upsert(prompt, {\n+                onConflict: 'id'\n+              })\n+              .select();\n+\n+            if (promptError) throw promptError;\n+          }\n+        }\n+      }\n+      \n+      toast.success(\"Content saved successfully\", {\n+        action: {\n+          label: \"Close\",\n+          onClick: () => toast.dismiss()\n+        },\n+        id: loadingToast,\n+      });\n+      setIsContentEditorOpen(false);\n+    } catch (error) {\n+      console.error('Error saving content:', error);\n+      toast.error(\"Failed to save content\", {\n+        action: {\n+          label: \"Close\",\n+          onClick: () => toast.dismiss()\n+        },\n+        id: loadingToast,\n+      });\n+    }\n+  };\n+\n+  // Add this component for inline editing\n+  const InlineEdit = ({ \n+    value, \n+    onSave, \n+    isEditing, \n+    setIsEditing, \n+    placeholder,\n+    className = \"\"\n+  }: InlineEditProps) => {\n+    const [tempValue, setTempValue] = useState(value);\n+    \n+    return isEditing ? (\n+      <div className=\"flex items-center gap-2\">\n+        <Input\n+          value={tempValue}\n+          onChange={(e) => setTempValue(e.target.value)}\n+          placeholder={placeholder}\n+          className={className}\n+          autoFocus\n+        />\n+        <Button\n+          size=\"sm\"\n+          variant=\"ghost\"\n+          onClick={() => {\n+            onSave(tempValue);\n+            setIsEditing(false);\n+          }}\n+        >\n+          <Check className=\"h-4 w-4 text-green-500\" />\n+        </Button>\n+        <Button\n+          size=\"sm\"\n+          variant=\"ghost\"\n+          onClick={() => setIsEditing(false)}\n+        >\n+          <X className=\"h-4 w-4 text-red-500\" />\n+        </Button>\n+      </div>\n+    ) : (\n+      <div \n+        className=\"group flex items-center gap-2 cursor-pointer\"\n+        onClick={() => setIsEditing(true)}\n+      >\n+        <span className={className}>{value || placeholder}</span>\n+        <Pencil className=\"h-4 w-4 opacity-0 group-hover:opacity-100 transition-opacity\" />\n+      </div>\n+    );\n+  };\n+\n+  // Add this effect to handle auto-collapse after lesson selection\n+  useEffect(() => {\n+    if (currentLessonId && selectedGradeId && selectedTopicId && selectedSubtopicId) {\n+      setIsSidebarLocked(false);\n+      // Optional: add a slight delay before collapsing\n+      setTimeout(() => setIsSidebarCollapsed(true), 300);\n+    }\n+  }, [currentLessonId, selectedGradeId, selectedTopicId, selectedSubtopicId]);\n+\n+  // Add individual save handlers\n+  // const handleSaveQuestion = async (question: Question, index: number) => {\n+  //   try {\n+  //     // Update status to saving\n+  //     setQuestionSaveStatuses(prev => [\n+  //       ...prev.filter(s => s.id !== question.id),\n+  //       { id: question.id, status: 'saving' }\n+  //     ]);\n+\n+  //     const questionUpsert = {\n+  //       id: question.id,\n+  //       lesson_id: currentLessonId,\n+  //       type: question.type,\n+  //       title: question.data?.prompt || 'Untitled Question',\n+  //       metadata: question.metadata || {},\n+  //       data: {\n+  //         prompt: question.data?.prompt || '',\n+  //         teacherScript: question.data?.teacherScript || '',\n+  //         ...question.data\n+  //       },\n+  //       order_index: index,\n+  //       created_at: new Date().toISOString(),\n+  //       updated_at: new Date().toISOString()\n+  //     };\n+\n+  //     const { error: questionError } = await supabase\n+  //       .from('questions')\n+  //       .upsert(questionUpsert);\n+\n+  //     if (questionError) throw questionError;\n+\n+  //     // Update status to saved\n+  //     setQuestionSaveStatuses(prev => [\n+  //       ...prev.filter(s => s.id !== question.id),\n+  //       { id: question.id, status: 'saved', lastSaved: new Date().toISOString() }\n+  //     ]);\n+\n+  //     toast.success(`Question ${index + 1} saved successfully`);\n+  //   } catch (error) {\n+  //     console.error('Error saving question:', error);\n+  //     setQuestionSaveStatuses(prev => [\n+  //       ...prev.filter(s => s.id !== question.id),\n+  //       { id: question.id, status: 'error' }\n+  //     ]);\n+  //     toast.error(`Failed to save question ${index + 1}`);\n+  //   }\n+  // };\n+\n+  const handleSavePrompt = async (questionId: string, prompt: ExercisePrompt, promptIndex: number) => {\n+    try {\n+      setPromptSaveStatuses(prev => [\n+        ...prev.filter(s => s.id !== prompt.id),\n+        { id: prompt.id || '', status: 'saving' } as SaveStatus\n+      ]);\n+\n+      const promptUpsert = {\n+        id: prompt.id,\n+        question_id: questionId,\n+        text: prompt.text || '',\n+        type: prompt.type || 'text',\n+        narration: prompt.narration || '',\n+        saytext: prompt.saytext || '',\n+        media: prompt.media || [],\n+        order_index: promptIndex,\n+        created_at: prompt.created_at || new Date().toISOString(),\n+        updated_at: new Date().toISOString()\n+      };\n+\n+      const { error: promptError } = await supabase\n+        .from('exercise_prompts')\n+        .upsert(promptUpsert);\n+\n+      if (promptError) throw promptError;\n+\n+      setPromptSaveStatuses(prev => [\n+        ...prev.filter(s => s.id !== prompt.id),\n+        { id: prompt.id || '', status: 'saved', lastSaved: new Date().toISOString() } as SaveStatus\n+      ]);\n+\n+      toast.success(`Prompt ${promptIndex + 1} saved successfully`);\n+    } catch (error) {\n+      console.error('Error saving prompt:', error);\n+      setPromptSaveStatuses(prev => [\n+        ...prev.filter(s => s.id !== prompt.id),\n+        { id: prompt.id || '', status: 'error' } as SaveStatus\n+      ]);\n+      toast.error(`Failed to save prompt ${promptIndex + 1}`);\n+    }\n+  };\n+\n+  // Add effect to mark items as draft when edited\n+  useEffect(() => {\n+    questions.forEach(question => {\n+      if (!questionSaveStatuses.find(s => s.id === question.id)) {\n+        setQuestionSaveStatuses(prev => [\n+          ...prev,\n+          { id: question.id, status: 'draft' }\n+        ]);\n+      }\n+    });\n+  }, [questions]);\n+\n+  // Add this function with your other handlers\n+  const handleRefreshLesson = async () => {\n+    if (!currentLessonId) {\n+      toast.error('No lesson selected');\n+      return;\n+    }\n+    \n+    try {\n+      toast.loading('Refreshing lesson content...', {\n+        action: {\n+          label: \"Close\",\n+          onClick: () => toast.dismiss()\n+        },\n+      });\n+      await handleLessonSelect(currentLessonId);\n+      toast.success('Content refreshed', {\n+        action: {\n+          label: \"Close\",\n+          onClick: () => toast.dismiss()\n+        },\n+      });\n+    } catch (error) {\n+      console.error('Error refreshing lesson:', error);\n+      toast.error('Failed to refresh content', {\n+        action: {\n+          label: \"Close\",\n+          onClick: () => toast.dismiss()\n+        },\n+      });\n+    }\n+  };\n+\n+  // Add this function to handle refresh\n+  const handleRefreshContent = async () => {\n+    if (!currentLessonId) {\n+      toast.error('No lesson selected');\n+      return;\n+    }\n+    \n+    toast.loading('Refreshing content...');\n+    try {\n+      await loadLessonContent(currentLessonId);\n+      toast.success('Content refreshed');\n+    } catch (error) {\n+      console.error('Refresh error:', error);\n+      toast.error('Failed to refresh content');\n+    }\n+  };\n+\n+  // Update the sidebar hover mechanism\n+  const handleSidebarHover = useCallback(\n+    debounce((isHovering: boolean) => {\n+      if (!isSidebarLocked && !isNavigating && !isDropdownOpen) {\n+        if (isHovering || document.activeElement?.closest('.sidebar-content')) {\n+          setIsSidebarCollapsed(false);\n+        } else {\n+          setTimeout(() => {\n+            if (!isDropdownOpen) { // Only collapse if dropdown is closed\n+              setIsSidebarCollapsed(true);\n+            }\n+          }, 300);\n+        }\n+      }\n+    }, 100),\n+    [isSidebarLocked, isNavigating, isDropdownOpen]\n+  );\n+\n+  // Update the sidebar JSX\n+  <div \n+    className={cn(\n+      \"transition-all duration-300 ease-in-out relative\",\n+      isSidebarCollapsed ? \"w-20\" : \"w-80\",\n+      \"flex-shrink-0 group\"\n+    )}\n+    onMouseEnter={() => {\n+      handleSidebarHover(true);\n+      // Immediately expand on mouse enter\n+      if (!isSidebarLocked) {\n+        setIsSidebarCollapsed(false);\n+      }\n+    }}\n+    onMouseLeave={() => {\n+      // Only collapse if not interacting with content\n+      if (!document.activeElement?.closest('.sidebar-content')) {\n+        handleSidebarHover(false);\n+      }\n+    }}\n+    onFocus={() => setIsSidebarCollapsed(false)}\n+  >\n+    <Card className={cn(\n+      \"h-full relative sidebar-content\", // Added sidebar-content class\n+      \"transition-shadow duration-300\",\n+      \"hover:shadow-lg\"\n+    )}>\n+      {/* Rest of sidebar content */}\n+    </Card>\n+  </div>\n+\n+  // Update the sidebar and card styles\n   return (\n-    <div className=\"container mx-auto py-6\">\n-      <div className=\"grid grid-cols-12 gap-6\">\n-        {/* Left sidebar - keep existing content */}\n-        <div className=\"col-span-3\">\n-          {/* Existing sidebar content */}\n+      <div className=\"container mx-auto py-8\">\n+        {/* Header */}\n+        <div className=\"flex items-center justify-between mb-2\">\n+          {/* ... header content ... */}\n+          <div className=\"flex items-center gap-4\">\n+            <Link href=\"/super-admin\">\n+              <Button variant=\"outline\" className=\"gap-2\">\n+                <ArrowLeft className=\"h-4 w-4\" />\n+                Back\n+              </Button>\n+            </Link>\n+            <div className=\"flex items-center gap-2\">\n+              <h1 className=\"text-2xl font-bold\">Lesson Management</h1>\n+              <Button\n+                variant=\"ghost\"\n+                size=\"icon\"\n+                onClick={handleRefreshLesson}\n+                className=\"ml-2\"\n+                title=\"Refresh lesson content\"\n+              >\n+                <RefreshCw className=\"h-4 w-4\" />\n+              </Button>\n+            </div>\n+            <p className=\"text-sm text-muted-foreground\">Create and manage your educational content</p>\n+          </div>\n+          <div className=\"flex items-center gap-2\">\n+            <Button\n+              variant=\"outline\"\n+              size=\"sm\"\n+              onClick={() => setShowHelpTips(!showHelpTips)}\n+              className=\"gap-2\"\n+            >\n+              {showHelpTips ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n+              {showHelpTips ? 'Hide Tips' : 'Show Tips'}\n+            </Button>\n+          </div>\n         </div>\n+        \n+        {/* Main content wrapper - Fix the layout here */}\n+        <div className=\"flex gap-6 h-[calc(100vh-200px)]\">\n+          {/* Improved sidebar */}\n+          <div \n+            className={cn(\n+              \"transition-all duration-300 ease-in-out relative\",\n+              isSidebarCollapsed ? \"w-20\" : \"w-80\",\n+              \"flex-shrink-0 group\"\n+            )}\n+            onMouseEnter={() => {\n+              handleSidebarHover(true);\n+              // Immediately expand on mouse enter\n+              if (!isSidebarLocked) {\n+                setIsSidebarCollapsed(false);\n+              }\n+            }}\n+            onMouseLeave={() => {\n+              // Only collapse if not interacting with content\n+              if (!document.activeElement?.closest('.sidebar-content')) {\n+                handleSidebarHover(false);\n+              }\n+            }}\n+            onFocus={() => setIsSidebarCollapsed(false)}\n+          >\n+            <Card className={cn(\n+              \"h-full relative sidebar-content\", // Added sidebar-content class\n+              \"transition-shadow duration-300\",\n+              \"hover:shadow-lg\"\n+            )}>\n+              {/* Lock button - only show after lesson selection */}\n+              {currentLessonId && (\n+                <Button\n+                  variant=\"ghost\"\n+                  size=\"sm\"\n+                  className=\"absolute top-2 right-2 z-10\"\n+                  onClick={() => {\n+                    setIsSidebarLocked(!isSidebarLocked);\n+                    if (!isSidebarLocked) {\n+                      setIsSidebarCollapsed(false);\n+                    }\n+                  }}\n+                >\n+                  {isSidebarLocked ? <Lock className=\"h-4 w-4\" /> : <Unlock className=\"h-4 w-4\" />}\n+                </Button>\n+              )}\n \n-        {/* Main content area */}\n-        <div className=\"col-span-9\">\n-          <ContentDisplay />\n-        </div>\n+              {/* Sidebar content with overflow handling */}\n+              <div className={cn(\n+                \"transition-all duration-300 overflow-hidden\",\n+                isSidebarCollapsed ? \"opacity-0\" : \"opacity-100\"\n+              )}>\n+                <Card className=\"h-full\">\n+                  <CardHeader className=\"pb-3\">\n+                    <div className=\"flex items-center justify-between\">\n+                      <CardTitle className=\"text-lg font-semibold\">Content Management</CardTitle>\n+                      <TooltipProvider>\n+                        <Tooltip>\n+                          <TooltipTrigger>\n+                            <HelpCircle className=\"h-4 w-4 text-muted-foreground\" />\n+                          </TooltipTrigger>\n+                          <TooltipContent>\n+                            <p>Manage your educational content here</p>\n+                          </TooltipContent>\n+                        </Tooltip>\n+                      </TooltipProvider>\n+                      </div>\n+                    <CardDescription>Create and manage your lessons</CardDescription>\n+                  </CardHeader>\n+                  <CardContent className=\"space-y-4\">\n+                    {/* View/Edit Mode Toggle */}\n+                    <div className=\"grid grid-cols-2 gap-2 p-1 bg-muted rounded-lg\">\n+                      <Button\n+                        variant={isViewMode ? \"default\" : \"ghost\"}\n+                        size=\"sm\"\n+                        onClick={() => setIsViewMode(true)}\n+                        className=\"w-full\"\n+                      >\n+                        <Eye className=\"h-4 w-4 mr-2\" />\n+                        View\n+                      </Button>\n+                      <Button\n+                        variant={!isViewMode ? \"default\" : \"ghost\"}\n+                        size=\"sm\"\n+                        onClick={() => setIsViewMode(false)}\n+                        className=\"w-full\"\n+                      >\n+                        <Edit className=\"h-4 w-4 mr-2\" />\n+                        Edit\n+                      </Button>\n+                    </div>\n+\n+                    {/* Grade Selection */}\n+                    <div className=\"space-y-2\">\n+                      <div className=\"flex items-center justify-between\">\n+                        <Label htmlFor=\"grade-select\">Grade</Label>\n+                        {isViewMode && (\n+                          <Button variant=\"ghost\" size=\"sm\" onClick={() => setExpandedGrade(expandedGrade ? null : selectedGrade)}>\n+                            {expandedGrade ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n+                          </Button>\n+                        )}\n+                      </div>\n+                      <Select \n+                        value={selectedGradeId || ''}\n+                        onValueChange={handleGradeSelect}\n+                        onOpenChange={(open) => {\n+                          if (open) {\n+                            // Force sidebar to stay open and lock it\n+                            setIsSidebarCollapsed(false);\n+                            setIsSidebarLocked(true);\n+                          }\n+                        }}\n+                      >\n+                        <SelectTrigger \n+                          id=\"grade-select\" \n+                          className=\"w-full\"\n+                          onClick={(e) => {\n+                            e.stopPropagation(); // Prevent event bubbling\n+                            setIsSidebarCollapsed(false);\n+                            setIsSidebarLocked(true);\n+                          }}\n+                        >\n+                          <SelectValue placeholder=\"Select Grade\" />\n+                        </SelectTrigger>\n+                        <SelectContent \n+                          onCloseAutoFocus={(e) => {\n+                            e.preventDefault();\n+                            setIsSidebarLocked(true);\n+                            setIsSidebarCollapsed(false);\n+                          }}\n+                        >\n+                          {grades.map((grade: Grade) => (\n+                            <SelectItem \n+                              key={`grade-${grade.id || 'new'}`} \n+                              value={grade.id || ''}\n+                              onMouseDown={(e) => {\n+                                e.preventDefault();\n+                                e.stopPropagation();\n+                              }}\n+                            >\n+                              <div className=\"flex items-center gap-2\">\n+                                <BookOpen className=\"h-4 w-4 text-primary\" />\n+                                {grade.name}\n+                              </div>\n+                            </SelectItem>\n+                          ))}\n+                        </SelectContent>\n+                      </Select>\n+                      {!isViewMode && (\n+                      <Button \n+                        variant=\"outline\" \n+                        size=\"sm\" \n+                        className=\"w-full gap-2\"\n+                        onClick={() => setModalState({ ...modalState, showAddGrade: false })}\n+                      >\n+                        <Plus className=\"h-4 w-4\" />\n+                        Add New Grade\n+                      </Button>\n+                      )}\n+                    </div>\n+\n+                    {/* Content Tree View in View Mode */}\n+                    {isViewMode && expandedGrade && (\n+                      <div className=\"mt-4 space-y-4 overflow-y-auto max-h-[calc(100vh-300px)]\">\n+                        {topics.map((topic: Topic) => (\n+                          <Card \n+                            key={topic.id} \n+                            className={cn(\n+                              \"border-l-4 transition-all duration-200 hover:shadow-md\",\n+                              expandedTopic === topic.id \n+                                ? \"border-l-primary bg-accent/5\" \n+                                : \"border-l-primary/40 hover:border-l-primary\"\n+                            )}\n+                          >\n+                            <CardHeader \n+                              className=\"py-3 cursor-pointer select-none\" \n+                              onClick={() => handleTopicExpand(topic.id || '')}\n+                            >\n+                              <div className=\"flex items-center justify-between\">\n+                                <div className=\"flex items-center gap-2\">\n+                                  <Layers className=\"h-4 w-4 text-primary\" />\n+                                  <h4 className=\"font-medium\">{topic.title}</h4>\n+                                  <Badge variant=\"outline\" className=\"ml-2\">\n+                                    {subtopics.filter(s => s.topic_id === topic.id).length} Subtopics\n+                                  </Badge>\n+                                </div>\n+                                <div className=\"flex items-center gap-2\">\n+                                  <AlertDialog>\n+                                    <AlertDialogTrigger asChild>\n+                                      <Button \n+                                        variant=\"ghost\" \n+                                        size=\"sm\" \n+                                        className=\"hover:bg-destructive/10 hover:text-destructive\"\n+                                        onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}\n+                                      >\n+                                        <Trash className=\"h-4 w-4\" />\n+                                      </Button>\n+                                    </AlertDialogTrigger>\n+                                    {/* Alert Dialog Content */}\n+                                  </AlertDialog>\n+                                  <ChevronDown className={cn(\n+                                    \"h-4 w-4 transition-transform duration-200\",\n+                                    expandedTopic === topic.id ? \"rotate-0\" : \"-rotate-90\"\n+                                  )} />\n+                                </div>\n+                              </div>\n+                            </CardHeader>\n+\n+                            <AnimatePresence>\n+                              {expandedTopic === topic.id && (\n+                                <motion.div\n+                                  initial={{ height: 0, opacity: 0 }}\n+                                  animate={{ height: \"auto\", opacity: 1 }}\n+                                  exit={{ height: 0, opacity: 0 }}\n+                                  transition={{ duration: 0.2 }}\n+                                >\n+                                  <CardContent className=\"pt-0 pb-2\">\n+                                    <div className=\"pl-4 space-y-2\">\n+                                      {isLoadingSubtopics ? (\n+                                        <div className=\"flex items-center justify-center py-4\">\n+                                          <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\n+                                        </div>\n+                                      ) : (\n+                                        subtopics\n+                                          .filter(subtopic => subtopic.topic_id === topic.id)\n+                                          .map((subtopic: SubTopic) => (\n+                                            <div \n+                                              key={subtopic.id}\n+                                              className={cn(\n+                                                \"rounded-lg border transition-colors\",\n+                                                expandedSubtopic === subtopic.id \n+                                                  ? \"bg-accent/10 border-primary/20\" \n+                                                  : \"hover:bg-accent/5\"\n+                                              )}\n+                                            >\n+                                              <div \n+                                                className=\"p-3 cursor-pointer\"\n+                                                onClick={() => handleSubtopicExpand(subtopic.id || '')}\n+                                              >\n+                                                <div className=\"flex items-center justify-between py-2 cursor-pointer hover:bg-accent/50 rounded-md px-2\">\n+                                                  <div className=\"flex items-center gap-2\">\n+                                                    <BookOpen className=\"h-4 w-4 text-primary\" />\n+                                                    <span className=\"text-sm font-medium\">{subtopic.name}</span>\n+                                                    <Badge variant=\"outline\" className=\"ml-2\">\n+                                                      {lessons.filter(l => l.subtopic_id === subtopic.id).length} Lessons\n+                                                    </Badge>\n+                                                  </div>\n+                                                  <div className=\"flex items-center gap-2\">\n+                                                    <AlertDialog>\n+                                                      <AlertDialogTrigger asChild>\n+                                                        <Button \n+                                                          variant=\"ghost\" \n+                                                          size=\"sm\" \n+                                                          className=\"hover:bg-destructive/10 hover:text-destructive\"\n+                                                          onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}\n+                                                        >\n+                                                          <Trash className=\"h-4 w-4\" />\n+                                                        </Button>\n+                                                      </AlertDialogTrigger>\n+                                                      {/* Alert Dialog Content */}\n+                                                    </AlertDialog>\n+                                                    <ChevronDown className={cn(\n+                                                      \"h-4 w-4 transition-transform duration-200\",\n+                                                      expandedSubtopic === subtopic.id ? \"rotate-0\" : \"-rotate-90\"\n+                                                    )} />\n+                                                  </div>\n+                                                </div>\n+\n+                                                <AnimatePresence>\n+                                                  {expandedSubtopic === subtopic.id && (\n+                                                    <motion.div\n+                                                      initial={{ height: 0, opacity: 0 }}\n+                                                      animate={{ height: \"auto\", opacity: 1 }}\n+                                                      exit={{ height: 0, opacity: 0 }}\n+                                                      transition={{ duration: 0.2 }}\n+                                                    >\n+                                                      <div className=\"px-3 pb-3\">\n+                                                        <div className=\"space-y-2\">\n+                                                          {isLoadingLessons ? (\n+                                                            <div className=\"flex items-center justify-center py-4\">\n+                                                              <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\n+                                                            </div>\n+                                                          ) : (\n+                                                            lessons\n+                                                              .filter(lesson => lesson.subtopic_id === subtopic.id)\n+                                                              .map((lesson: Lesson) => (\n+                                                                <div\n+                                                                  key={lesson.id}\n+                                                                  onClick={() => handleLessonSelect(lesson.id || '')}\n+                                                                  className={cn(\n+                                                                    \"flex items-center gap-3 p-2 rounded-md cursor-pointer transition-colors\",\n+                                                                    \"hover:bg-accent\",\n+                                                                    currentLessonId === lesson.id && \"bg-accent\"\n+                                                                  )}\n+                                                                >\n+                                                                  <div className=\"flex items-center gap-2 flex-1\">\n+                                                                    <div className=\"flex h-8 w-8 items-center justify-center rounded-md border bg-background\">\n+                                                                      <BookOpen className=\"h-4 w-4 text-primary\" />\n+                                                                    </div>\n+                                                                    <div className=\"flex flex-col\">\n+                                                                      <span className=\"text-sm font-medium\">{lesson.title}</span>\n+                                                                      <span className=\"text-xs text-muted-foreground\">\n+                                                                        {lesson.duration} mins • {lesson.questions?.length || 0} Questions\n+                                                                      </span>\n+                                                                    </div>\n+                                                                  </div>\n+                                                                  <AlertDialog>\n+                                                                    <AlertDialogTrigger asChild>\n+                                                                      <Button \n+                                                                        variant=\"ghost\" \n+                                                                        size=\"sm\" \n+                                                                        className=\"hover:bg-destructive/10 hover:text-destructive\"\n+                                                                        onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}\n+                                                                      >\n+                                                                        <Trash className=\"h-4 w-4\" />\n+                                                                      </Button>\n+                                                                    </AlertDialogTrigger>\n+                                                                    {/* Alert Dialog Content */}\n+                                                                  </AlertDialog>\n+                                                                </div>\n+                                                              ))\n+                                                          )}\n+                                                        </div>\n+                                                      </div>\n+                                                    </motion.div>\n+                                                  )}\n+                                                </AnimatePresence>\n+                                              </div>\n+                                            </div>\n+                                          ))\n+                                      )}\n+                                    </div>\n+                                  </CardContent>\n+                                </motion.div>\n+                              )}\n+                            </AnimatePresence>\n+                          </Card>\n+                        ))}\n+                      </div>\n+                    )}\n+\n+                    {/* Regular Edit Mode Content */}\n+                    {!isViewMode && (\n+                      <>\n+                        {/* Existing Topic, Subtopic, and Lesson Selection UI */}\n+                      {/* Topic Selection */}\n+                        {selectedGradeId && (\n+                      <div className=\"space-y-2\">\n+                        <div className=\"flex items-center justify-between\">\n+                        <Label htmlFor=\"topic-select\">Topic</Label>\n+                        </div>\n+                        <Select \n+                              value={selectedTopicId || ''} \n+                              onValueChange={handleTopicSelect}\n+                        >\n+                          <SelectTrigger id=\"topic-select\" className=\"w-full\">\n+                            <SelectValue placeholder=\"Select Topic\" />\n+                          </SelectTrigger>\n+                          <SelectContent>\n+                                {topics.map((topic: Topic) => (\n+                                  <SelectItem \n+                                    key={`topic-${topic.id || 'new'}`} \n+                                    value={topic.id || ''}\n+                                  >\n+                                  <div className=\"flex items-center gap-2\">\n+                                  <Layers className=\"h-4 w-4 text-primary\" />\n+                                    {topic.title}\n+                                  </div>\n+                                </SelectItem>\n+                              ))}\n+                          </SelectContent>\n+                        </Select>\n+                        <Button \n+                          variant=\"outline\" \n+                          size=\"sm\" \n+                          className=\"w-full gap-2\"\n+                          onClick={() => setModalState({ ...modalState, showAddTopic: true })}\n+                        >\n+                          <Plus className=\"h-4 w-4\" />\n+                          Add New Topic\n+                        </Button>\n+                      </div>\n+                    )}\n+\n+                    {/* Subtopic Selection */}\n+                        {selectedTopicId && (\n+                      <div className=\"space-y-2\">\n+                        <div className=\"flex items-center justify-between\">\n+                        <Label htmlFor=\"subtopic-select\">Subtopic</Label>\n+                        </div>\n+                        <Select \n+                              value={selectedSubtopicId || ''} \n+                              onValueChange={handleSubtopicSelect}\n+                        >\n+                          <SelectTrigger id=\"subtopic-select\" className=\"w-full\">\n+                            <SelectValue placeholder=\"Select Subtopic\" />\n+                          </SelectTrigger>\n+                          <SelectContent>\n+                                {subtopics\n+                                  .filter(subtopic => subtopic.id)\n+                                  .map((subtopic, index) => (\n+                                    <SelectItem \n+                                      key={subtopic.id || `subtopic-${index}`}\n+                                      value={subtopic.id || ''}\n+                                    >\n+                                      {subtopic.title || 'Untitled Subtopic'}\n+                                    </SelectItem>\n+                                  ))}\n+                          </SelectContent>\n+                        </Select>\n+                        {!isViewMode && (\n+                          <Button \n+                            variant=\"outline\" \n+                            size=\"sm\" \n+                            className=\"w-full gap-2\"\n+                            onClick={() => setModalState({ ...modalState, showAddSubtopic: true })}\n+                          >\n+                            <Plus className=\"h-4 w-4\" />\n+                            Add New Subtopic\n+                          </Button>\n+                        )}\n+                      </div>\n+                    )}\n+\n+                    {/* Lesson Selection */}\n+                        {selectedSubtopicId && (\n+                      <div className=\"space-y-2\">\n+                        <div className=\"flex items-center justify-between\">\n+                          <Label htmlFor=\"lesson-select\">Lesson</Label>\n+                        </div>\n+                          <Select \n+                            value={currentLessonId || ''} \n+                            onValueChange={handleLessonSelect}\n+                            onOpenChange={(open) => {\n+                              setIsDropdownOpen(open);\n+                              if (open) {\n+                                setIsSidebarCollapsed(false);\n+                                setIsSidebarLocked(true);\n+                              } else {\n+                                // Small delay before unlocking to prevent immediate collapse\n+                                setTimeout(() => {\n+                                  setIsSidebarLocked(false);\n+                                }, 100);\n+                              }\n+                            }}\n+                          >\n+                            <SelectTrigger \n+                              id=\"lesson-select\" \n+                              className=\"w-full\"\n+                              onClick={(e) => {\n+                                e.stopPropagation();\n+                                setIsSidebarCollapsed(false);\n+                                setIsSidebarLocked(true);\n+                              }}\n+                            >\n+                              <SelectValue placeholder=\"Select Lesson\" />\n+                            </SelectTrigger>\n+                            <SelectContent>\n+                              {lessons\n+                                .filter((lesson): lesson is Lesson => lesson !== undefined && lesson !== null)\n+                                .map((lesson: Lesson) => (\n+                                  <SelectItem \n+                                    key={`lesson-${lesson.id || 'new'}`} \n+                                    value={lesson.id || ''}\n+                                  >\n+                                    <div className=\"flex items-center gap-2\">\n+                                      <BookOpen className=\"h-4 w-4 text-primary\" />\n+                                      {lesson.title || 'Untitled Lesson'}\n+                                    </div>\n+                                  </SelectItem>\n+                                ))}\n+                            </SelectContent>\n+                          </Select>\n+                    <Button \n+                            variant=\"outline\" \n+                            size=\"sm\" \n+                            className=\"w-full gap-2\"\n+                        onClick={() => setModalState({ ...modalState, showAddLesson: true })}\n+                          >\n+                            <Plus className=\"h-4 w-4\" />\n+                            Add New Lesson\n+                    </Button>\n+                      </div>\n+                        )}\n+                      </>\n+                    )}\n+                  </CardContent>\n+                </Card>\n+              </div>\n+\n+              {/* Collapsed view */}\n+              {isSidebarCollapsed && (\n+                <div className=\"absolute inset-0 flex flex-col items-center pt-12 gap-4\">\n+                  <BookOpen className=\"h-6 w-6 text-muted-foreground\" />\n+                  <div className=\"w-px h-full bg-border\" />\n+                </div>\n+              )}\n+            </Card>\n+          </div>\n+        \n+\n+          {/* Right Content Area */}\n+          <div className=\"flex-1 overflow-y-auto\">\n+            {isNavigating ? (\n+              <div className=\"flex items-center justify-center h-[400px]\">\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n+                <span className=\"ml-3\">Loading...</span>\n+              </div>\n+            ) : (\n+              <>\n+                {!selectedGradeId ? (\n+                  // Question Types Display Section\n+                  <div className=\"space-y-6\">\n+                    <Card>\n+                      <CardHeader>\n+                        <div className=\"flex items-center justify-between\">\n+                          <div>\n+                            <CardTitle className=\"text-xl font-semibold\">Available Question Types</CardTitle>\n+                            <CardDescription>Browse through different question formats and examples</CardDescription>\n+                          </div>\n+                          <TooltipProvider>\n+                            <Tooltip>\n+                              <TooltipTrigger>\n+                                <HelpCircle className=\"h-5 w-5 text-muted-foreground\" />\n+                              </TooltipTrigger>\n+                              <TooltipContent>\n+                                <p>Click on each type to see detailed examples</p>\n+                              </TooltipContent>\n+                            </Tooltip>\n+                          </TooltipProvider>\n+                        </div>\n+                      </CardHeader>\n+                      <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n+                        {Object.entries(QUESTION_TYPES).map(([type, details]) => (\n+                          <Card key={type} className=\"cursor-pointer hover:bg-accent/50 transition-colors\">\n+                            <CardHeader className=\"p-4\">\n+                              <div className=\"flex items-center justify-between mb-2\">\n+                                <Badge variant=\"outline\" className=\"bg-primary/5 text-lg\">\n+                                  {details.label}\n+                                </Badge>\n+                              </div>\n+                              <CardDescription className=\"text-sm\">\n+                                {details.description || 'No description available'}\n+                              </CardDescription>\n+                              <div className=\"mt-4\">\n+                                <div className=\"text-sm font-medium mb-2\">Example:</div>\n+                                <div className=\"p-3 rounded-md bg-muted/50 text-sm\">\n+                                  {type === 'multiple-choice' && (\n+                                    <>\n+                                      <div className=\"font-medium mb-2\">Q: What is the capital of France?</div>\n+                                      <div className=\"space-y-1 pl-4\">\n+                                        <div>A) Paris</div>\n+                                        <div>B) London</div>\n+                                        <div>C) Berlin</div>\n+                                        <div>D) Madrid</div>\n+                                      </div>\n+                                    </>\n+                                  )}\n+                                  {type === 'fill-in-blank' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div>Complete the sentence:</div>\n+                                      <div>The sun rises in the <span className=\"bg-primary/20 px-2 rounded\">_____</span> and sets in the <span className=\"bg-primary/20 px-2 rounded\">_____</span>.</div>\n+                                    </div>\n+                                  )}\n+                                  {type === 'true-false' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div className=\"font-medium\">Statement:</div>\n+                                      <div>The Earth is flat.</div>\n+                                      <div className=\"mt-2\">\n+                                        <Badge variant=\"outline\" className=\"mr-2\">True</Badge>\n+                                        <Badge variant=\"outline\">False</Badge>\n+                                      </div>\n+                                    </div>\n+                                  )}\n+                                  {type === 'matching' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div className=\"font-medium mb-2\">Match the countries with their capitals:</div>\n+                                      <div className=\"grid grid-cols-2 gap-4\">\n+                                        <div>\n+                                          1. France<br />\n+                                          2. Germany<br />\n+                                          3. Spain\n+                                        </div>\n+                                        <div>\n+                                          • Berlin<br />\n+                                          • Paris<br />\n+                                          • Madrid\n+                                        </div>\n+                                      </div>\n+                                    </div>\n+                                  )}\n+                                  {type === 'ordering' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div className=\"font-medium mb-2\">Arrange in chronological order:</div>\n+                                      <div className=\"space-y-1\">\n+                                        <Badge variant=\"outline\" className=\"mr-2\">1</Badge>World War II<br />\n+                                        <Badge variant=\"outline\" className=\"mr-2\">2</Badge>Industrial Revolution<br />\n+                                        <Badge variant=\"outline\" className=\"mr-2\">3</Badge>Renaissance\n+                                      </div>\n+                                    </div>\n+                                  )}\n+                                  {type === 'short-answer' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div className=\"font-medium\">Question:</div>\n+                                      <div>Explain the water cycle in 2-3 sentences.</div>\n+                                      <div className=\"mt-2 p-2 border border-dashed rounded-md border-primary/30\">\n+                                        Answer space\n+                                      </div>\n+                                    </div>\n+                                  )}\n+                                </div>\n+                              </div>\n+                            </CardHeader>\n+                          </Card>\n+                        ))}\n+                      </CardContent>\n+                    </Card>\n+                  </div>\n+                ) : isViewMode ? (\n+                  <div className=\"space-y-6\">\n+                    {selectedGradeId ? (\n+                      <div className=\"grid grid-cols-1 gap-6\">\n+                        {topics.map((topic) => (\n+                          <Card key={topic.id} className=\"border-l-4 border-l-primary\">\n+                            <CardHeader>\n+                              <div className=\"flex items-center justify-between\">\n+                                <h3 className=\"text-lg font-semibold\">{topic.title}</h3>\n+                              </div>\n+                            </CardHeader>\n+                            <CardContent>\n+                              <div className=\"space-y-4\">\n+                                {subtopics\n+                                  .filter(subtopic => subtopic.topic_id === topic.id)\n+                                  .map((subtopic, index) => (\n+                                    <div key={subtopic.id || `subtopic-${index}`} className=\"border-l-2 pl-4\">\n+                                      <h4 className=\"text-md font-medium mb-2\">{subtopic.name || 'Untitled Subtopic'}</h4>\n+                                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n+                                        {lessons\n+                                          .filter(lesson => lesson.subtopic_id === subtopic.id)\n+                                          .map((lesson) => (\n+                                            <Card \n+                                              key={lesson.id} \n+                                              className={cn(\n+                                                \"cursor-pointer transition-all duration-200\",\n+                                                \"hover:shadow-md hover:translate-y-[-2px]\",\n+                                                \"hover:bg-accent/50 hover:border-primary/50\",\n+                                                \"active:translate-y-[0px]\",\n+                                                currentLessonId === lesson.id && \"border-primary bg-accent/50 shadow-md\",\n+                                                \"group\" // Enable group hover effects\n+                                              )}\n+                                              onClick={() => handleLessonSelect(lesson.id)}\n+                                            >\n+                                              <CardHeader className=\"p-4\">\n+                                                <div className=\"flex flex-col gap-2\">\n+                                                  <div className=\"flex items-center justify-between\">\n+                                                    <div className=\"flex items-center gap-2\">\n+                                                      <BookOpen className={cn(\n+                                                        \"h-4 w-4 text-primary\",\n+                                                        \"transition-transform duration-200\",\n+                                                        \"group-hover:scale-110\"\n+                                                      )} />\n+                                                      <span className=\"font-medium\">{lesson.title}</span>\n+                                                    </div>\n+                                                    <Button\n+                                                      variant=\"outline\"\n+                                                      size=\"sm\"\n+                                                      className={cn(\n+                                                        \"opacity-0 group-hover:opacity-100\",\n+                                                        \"transition-all duration-200\",\n+                                                        \"hover:bg-primary hover:text-primary-foreground\"\n+                                                      )}\n+                                                      disabled={!lesson.content || currentLessonId !== lesson.id}\n+                                                      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n+                                                        e.stopPropagation();\n+                                                        window.location.href = `/teacher/lessons/${lesson.id}`;\n+                                                      }}\n+                                                    >\n+                                                      Start Lesson\n+                                                    </Button>\n+                                                  </div>\n+                                                  <div className=\"flex items-center gap-2\">\n+                                                    <Badge variant=\"outline\" className={cn(\n+                                                      \"bg-primary/5\",\n+                                                      \"transition-colors duration-200\",\n+                                                      \"group-hover:bg-primary/10\"\n+                                                    )}>\n+                                                      {lesson.questions?.length || 0} Questions\n+                                                    </Badge>\n+                                                    <Badge variant=\"outline\" className={cn(\n+                                                      \"bg-primary/5\",\n+                                                      \"transition-colors duration-200\",\n+                                                      \"group-hover:bg-primary/10\"\n+                                                    )}>\n+                                                      {lesson.activities?.length || 0} Activities\n+                                                    </Badge>\n+                                                  </div>\n+                                                </div>\n+                                              </CardHeader>\n+                                            </Card>\n+                                          ))}\n+                                      </div>\n+                                    </div>\n+                                  ))}\n+                              </div>\n+                            </CardContent>\n+                          </Card>\n+                        ))}\n+                      </div>\n+                    ) : (\n+                      <div className=\"text-center py-20\">\n+                        <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n+                        <h3 className=\"text-lg font-medium\">Select a Grade</h3>\n+                        <p className=\"text-sm text-muted-foreground\">\n+                          Choose a grade from the left panel to start managing content\n+                        </p>\n+                      </div>\n+                    )}\n+                  </div>\n+                ) : (\n+                  // Edit Mode Content\n+                  <div className=\"space-y-4\">\n+                    {/* Lesson Title */}\n+                    <Card>\n+                      <CardHeader>\n+                        <div className=\"flex items-center justify-between mb-4\">\n+                          <h2 className=\"text-2xl font-bold\">Lesson Content</h2>\n+                                                    <Button\n+                                                      variant=\"outline\"\n+                                                      size=\"sm\"\n+                            onClick={() => setIsContentEditorOpen(true)}\n+                          >\n+                            <Pencil className=\"h-4 w-4 mr-2\" />\n+                            Edit Content\n+                          </Button>\n+                        </div>\n+                      </CardHeader>\n+                      <CardContent className=\"space-y-4\">\n+                        {/* Lesson Title */}\n+                        <div className=\"flex items-center justify-between\">\n+                          <div className=\"space-y-1\">\n+                            <Label>Lesson Title</Label>\n+                            <InlineEdit\n+                              value={lessonTitle}\n+                              onSave={async (newTitle) => {\n+                                setLessonTitle(newTitle);\n+                                await handleSaveLesson();\n+                              }}\n+                              isEditing={isEditingTitle}\n+                              setIsEditing={setIsEditingTitle}\n+                              placeholder=\"Enter lesson title\"\n+                              className=\"text-lg font-medium\"\n+                            />\n+                          </div>\n+                        </div>\n+\n+                        {/* Content Editor and Display */}\n+                        <div className=\"space-y-4\">\n+                          {isContentEditorOpen ? (\n+                            <div className=\"border rounded-lg p-4\">\n+                              <div className=\"mb-4\">\n+                                <Label>Content Heading</Label>\n+                                <InlineEdit\n+                                  value={contentHeading}\n+                                  onSave={(newHeading) => setContentHeading(newHeading)}\n+                                  isEditing={isEditingHeading}\n+                                  setIsEditing={setIsEditingHeading}\n+                                  placeholder=\"Add content heading\"\n+                                  className=\"text-base text-muted-foreground\"\n+                                />\n+                              </div>\n+                              <RichTextEditor\n+                                value={lessonContent}\n+                                onChange={setLessonContent}\n+                                onSave={async (content) => {\n+                                  await handleContentSave(content);\n+                                  setIsContentEditorOpen(false);\n+                                }}\n+                                placeholder=\"Add lesson content here...\"\n+                              />\n+                            </div>\n+                          ) : lessonContent ? (\n+                            <div className=\"prose prose-sm max-w-none\">\n+                              {contentHeading && (\n+                                <h3 className=\"text-lg font-semibold mb-2\">{contentHeading}</h3>\n+                              )}\n+                              <div dangerouslySetInnerHTML={{ __html: lessonContent }} />\n+                            </div>\n+                          ) : (\n+                            <div className=\"text-center py-8 text-muted-foreground\">\n+                              Click 'Edit Content' to add lesson content\n+                            </div>\n+                          )}\n+                        </div>\n+                      </CardContent>\n+                    </Card>\n+\n+                    {/* Tabs */}\n+                    <Tabs defaultValue=\"questions\" className=\"mt-6\">\n+                    <TabsList className=\"grid w-full grid-cols-2\">\n+                        <TabsTrigger value=\"questions\">\n+                          <MessageSquare className=\"h-4 w-4 mr-2\" />\n+                        Questions\n+                      </TabsTrigger>\n+                        <TabsTrigger value=\"activities\">\n+                          <ActivityIcon className=\"h-4 w-4 mr-2\" />\n+                        Activities\n+                      </TabsTrigger>\n+                    </TabsList>\n+\n+                      {/* Questions Tab */}\n+                      <TabsContent value=\"questions\" className=\"space-y-4\">\n+                      <CardHeader>\n+                          <CardDescription>Add and manage questions for this lesson</CardDescription>\n+                      </CardHeader>\n+                        {questions.map((question, index) => (\n+                          <Card key={index} className={cn(\n+                            \"relative border-l-4 transition-colors duration-200\",\n+                            expandedQuestion === index ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\n+                          )}>\n+                            <CardHeader className=\"pb-3\">\n+                              <div className=\"flex items-center justify-between gap-4\">\n+                                <div className=\"flex items-center gap-3 min-w-0 flex-1\">\n+                                  <div className=\"flex items-center gap-2 flex-shrink-0\">\n+                                    <span className=\"px-2 py-1 bg-primary/10 rounded-md text-sm font-semibold text-primary whitespace-nowrap\">\n+                                      Q {index + 1}\n+                                    </span>\n+                                    <Badge variant=\"outline\" className=\"whitespace-nowrap\">\n+                                      {QUESTION_TYPES[question.type as keyof typeof QUESTION_TYPES]?.label || question.type}\n+                                    </Badge>\n+                                    {question.isDraft && (\n+                                      <Badge variant=\"secondary\" className=\"whitespace-nowrap\">Draft</Badge>\n+                                )}\n+                                  </div>\n+                                      {expandedQuestion !== index && (\n+                                        <div className=\"text-sm text-muted-foreground truncate\">\n+                                          {question.title || 'No question text'} - {question.data?.content || 'No question texts'}\n+                                        </div>\n+                                      )}\n+                                    </div>\n+                                    <div className=\"flex items-center gap-2 flex-shrink-0\">\n+                                      <Button\n+                                        variant=\"ghost\"\n+                                        size=\"sm\"\n+                                        onClick={() => handleQuestionExpand(index)}\n+                                      >\n+                                        {expandedQuestion === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n+                                      </Button>\n+                                      <Button\n+                                        variant=\"ghost\"\n+                                        size=\"sm\"\n+                                        onClick={() => handleRemoveQuestion(index)}\n+                                      >\n+                                        <Trash2 className=\"h-4 w-4 text-destructive\" />\n+                                      </Button>\n+                                    </div>\n+                                  </div>\n+                                </CardHeader>\n+                                {expandedQuestion === index && (\n+                                  <CardContent>\n+                                    <QuestionForm\n+                                      key={index}\n+                                      question={{ \n+                                        ...question, \n+                                        lesson_id: currentLessonId || '',\n+                                        type: isValidQuestionType(question.type) ? question.type : 'speaking',\n+                                        data: {\n+                                          prompt: question.data?.prompt ?? '',\n+                                          teacher_script: question.data?.teacher_script ?? '',\n+                                          followup_prompt: question.data?.followup_prompt ?? [],\n+                                          sample_answer: question.data?.sample_answer ?? '',\n+                                          \n+                                        } \n+                                      }}\n+                                      index={index}\n+                                      onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\n+                                        await handleUpdateQuestion(index, {\n+                                          ...updatedQuestion,\n+                                          data: {\n+                                            prompt: updatedQuestion.data?.prompt ?? '',\n+                                            teacher_script: updatedQuestion.data?.teacher_script ?? '',\n+                                            followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\n+                                            sample_answer: updatedQuestion.data?.sample_answer ?? '',\n+                                            metadata: updatedQuestion.metadata ?? {},\n+                                            },\n+                                            correct_answer: updatedQuestion.correct_answer ?? '',\n+                                            content: updatedQuestion.content ?? ''  // Add default value\n+                                        });\n+                                      }}\n+                                      onRemove={handleRemoveQuestion}\n+                                      onAddExercisePrompt={handleAddExercisePrompt}\n+                                      onRemoveExercisePrompt={handleRemoveExercisePrompt}\n+                                      onExercisePromptChange={handleExercisePromptChange}\n+                                    /><Button \n+                                    size=\"sm\"\n+                                    variant=\"outline\"\n+                                    onClick={() => handleSaveQuestion(question, index)}\n+                                    className=\"ml-2\"\n+                                  >\n+                                    {questionSaveStatuses.find(s => s.id === question.id)?.status === 'saving' ? (\n+                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n+                                    ) : (\n+                                      <Save className=\"h-4 w-4 mr-2\" />\n+                                    )}\n+                                    Save Question\n+                                                    </Button>\n+                                    {/* Exercise Prompts with Save Buttons */}\n+                                    {question.exercisePrompts?.map((prompt, promptIndex) => (\n+                                      <div key={`${question.id}-prompt-${promptIndex}`} className=\"mt-4\"> {/* Updated key */}\n+                                        <div className=\"flex items-center justify-between mb-2\">\n+                                          <h4 className=\"text-sm font-medium\">Exercise Prompt {promptIndex + 1}</h4>\n+                                          <div className=\"flex items-center gap-2\">\n+                                            <TooltipProvider>\n+                                              <Tooltip>\n+                                                <TooltipTrigger asChild>\n+                                                  <Button\n+                                                    size=\"sm\"\n+                                                    variant=\"outline\"\n+                                                    onClick={() => handleSavePrompt(question.id, prompt, promptIndex)}\n+                                                    disabled={promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving'}\n+                                                  >\n+                                                    {promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving' ? (\n+                                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n+                                                    ) : (\n+                                                      <Save className=\"h-4 w-4 mr-2\" />\n+                                                    )}\n+                                                    Save Prompt\n+                                                  </Button>\n+                                                </TooltipTrigger>\n+                                                <TooltipContent>\n+                                                  {`Status: ${promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}`}\n+                                                </TooltipContent>\n+                                              </Tooltip>\n+                                            </TooltipProvider>\n+                                            <Badge variant={\n+                                              promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saved'\n+                                                ? 'secondary'\n+                                                : promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'error'\n+                                                ? 'destructive'\n+                                                : 'default'\n+                                            }>\n+                                              {promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}\n+                                            </Badge>\n+                                                  </div>\n+                                        </div>\n+                                        <ExercisePromptCard\n+                                          key={prompt.id} // Add a unique key here\n+                                          prompt={prompt}\n+                                          promptIndex={promptIndex}\n+                                          onRemove={() => handleRemoveExercisePrompt(index, promptIndex)}\n+                                          onUpdate={(updatedPrompt: ExercisePrompt) => {\n+                                            // Prevent duplicate updates\n+                                            if (updatedPrompt.id === prompt.id) {\n+                                              handleExercisePromptChange(index, promptIndex, updatedPrompt);\n+                                            }\n+                                          }}\n+                                        />\n+                                      </div>\n+                                    ))}\n+                                  </CardContent>\n+                                )}\n+                              </Card>\n+                            ))}\n+\n+                            {/* Add Question Button */}\n+                            <div className=\"flex items-center justify-between\">\n+                              <QuestionTypeSelect \n+                                value={selectedQuestionType} \n+                                onChange={handleQuestionTypeChange}\n+                              />\n+                                        <Button\n+                                          onClick={handleAddQuestion}\n+                                          disabled={!selectedQuestionType}\n+                                        >\n+                                <Plus className=\"h-4 w-4 mr-2\" />\n+                                          Add Question\n+                                        </Button>\n+                                      </div>\n+                      </TabsContent>\n+\n+                      {/* Activities Tab */}\n+                      <TabsContent value=\"activities\" className=\"space-y-4\">\n+                      <CardHeader>\n+                          <CardDescription>Add and manage activities for this lesson</CardDescription>\n+                      </CardHeader>\n+                        {activities.map((activity, index) => (\n+                          <Card key={index}>\n+                            <CardHeader className=\"pb-3\">\n+                              <div className=\"flex items-center justify-between\">\n+                                  <div className=\"flex items-center gap-2\">\n+                                  <Badge variant=\"outline\">Activity {index + 1}</Badge>\n+                                  </div>\n+                                <div className=\"flex items-center gap-2\">\n+                                  <Button\n+                                    variant=\"ghost\"\n+                                    size=\"sm\"\n+                                    onClick={() => handleActivityExpand(index)}\n+                                  >\n+                                    {expandedActivity === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n+                                  </Button>\n+                                  <Button\n+                                    variant=\"ghost\"\n+                                    size=\"sm\"\n+                                    onClick={() => handleRemoveActivity(index)}\n+                                  >\n+                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\n+                                  </Button>\n+                                </div>\n+                              </div>\n+                            </CardHeader>\n+                            {expandedActivity === index && (\n+                              <CardContent>\n+                                <div className=\"space-y-4\">\n+                                  <div className=\"space-y-2\">\n+                                    <Label>Instructions</Label>\n+                                    <Textarea\n+                                      value={activity.instructions}\n+                                      onChange={(e) => handleUpdateActivity(index, {\n+                                        ...activity,\n+                                        instructions: e.target.value\n+                                      })}\n+                                      placeholder=\"Enter activity instructions\"\n+                                    />\n+                                  </div>\n+                                    \n+                                    {/* Media Section */}\n+                                    <div className=\"space-y-2\">\n+                                      <Label>Media</Label>\n+                                      {activity.media?.map((media, mediaIndex) => (\n+                                        <div key={mediaIndex} className=\"flex items-center gap-2\">\n+                                          <Input\n+                                            value={media.url}\n+                                            onChange={(e) => {\n+                                              const updatedMedia = [...(activity.media || [])];\n+                                              updatedMedia[mediaIndex] = {\n+                                                type: media.type,\n+                                                url: e.target.value\n+                                              };\n+                                              handleUpdateActivity(index, {\n+                                                ...activity,\n+                                                media: updatedMedia\n+                                              });\n+                                            }}\n+                                            placeholder=\"Media URL\"\n+                                          />\n+                                          <Select\n+                                            value={media.type}\n+                                            onValueChange={(value) => {\n+                                              const updatedMedia = [...(activity.media || [])];\n+                                              updatedMedia[mediaIndex] = {\n+                                                type: value as 'image' | 'gif' | 'video',\n+                                                url: media.url\n+                                              };\n+                                              handleUpdateActivity(index, {\n+                                                ...activity,\n+                                                media: updatedMedia\n+                                              });\n+                                            }}\n+                                          >\n+                                            <SelectTrigger className=\"w-[120px]\">\n+                                              <SelectValue placeholder=\"Type\" />\n+                                            </SelectTrigger>\n+                                            <SelectContent>\n+                                              <SelectItem value=\"image\">Image</SelectItem>\n+                                              <SelectItem value=\"gif\">GIF</SelectItem>\n+                                              <SelectItem value=\"video\">Video</SelectItem>\n+                                            </SelectContent>\n+                                          </Select>\n+                                <Button\n+                                            variant=\"ghost\"\n+                                            size=\"sm\"\n+                                  onClick={() => {\n+                                              const updatedMedia = (activity.media || []).filter((_, i) => i !== mediaIndex);\n+                                              handleUpdateActivity(index, {\n+                                                ...activity,\n+                                                media: updatedMedia\n+                                          });\n+                                          }}\n+                                  >\n+                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\n+                                  </Button>\n+                                </div>\n+                                        ))}\n+                                  <Button\n+                                    variant=\"outline\"\n+                                    size=\"sm\"\n+                                            onClick={() => {\n+                                              handleUpdateActivity(index, {\n+                                                ...activity,\n+                                                media: [\n+                                                  ...(activity.media || [])  ,\n+                                                  { url: '', type: 'image' }\n+                                                ]\n+                                              });\n+                                            }}\n+                                  >\n+                                    <Plus className=\"h-4 w-4 mr-2\" />\n+                                            Add Media\n+                                  </Button>\n+                                </div>\n+                                      </div>\n+                                    </CardContent>\n+                                  )}\n+                                </Card>\n+                              ))}\n+\n+                              {/* Add Activity Button */}\n+                              <Button\n+                                onClick={handleAddActivity}\n+                                className=\"w-full\"\n+                              >\n+                                <Plus className=\"h-4 w-4 mr-2\" />\n+                                Add Activity\n+                              </Button>\n+                          </TabsContent>\n+                        </Tabs>\n+                        </div>\n+                )}\n+\n+                    {/* Floating Save Button */}\n+                    <div className=\"fixed bottom-8 right-8 flex items-center gap-4\">\n+                      {saveProgress !== 'idle' && (\n+                        <div className={cn(\n+                          \"flex items-center gap-2 rounded-lg px-4 py-2 shadow-lg\",\n+                          {\n+                            \"bg-background border\": saveProgress === 'saving',\n+                            \"bg-green-500 text-white\": saveProgress === 'saved',\n+                            \"bg-destructive text-destructive-foreground\": saveProgress === 'error'\n+                          }\n+                        )}>\n+                          {saveProgress === 'saving' && (\n+                            <>\n+                              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n+                              <span className=\"text-sm\">Saving changes...</span>\n+                            </>\n+                          )}\n+                          {saveProgress === 'saved' && (\n+                            <>\n+                              <Check className=\"h-4 w-4\" />\n+                              <span className=\"text-sm\">Changes saved</span>\n+                            </>\n+                          )}\n+                          {saveProgress === 'error' && (\n+                            <>\n+                              <X className=\"h-4 w-4\" />\n+                              <span className=\"text-sm\">Error saving changes</span>\n+                            </>\n+                          )}\n+                        </div>\n+                      )}\n+                      <Button\n+                        onClick={handleSaveLesson}\n+                        disabled={saveProgress === 'saving'}\n+                        className=\"shadow-lg\"\n+                      >\n+                        {saveProgress === 'saving' ? (\n+                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n+                        ) : (\n+                          <Save className=\"h-4 w-4 mr-2\" />\n+                        )}\n+                        {saveProgress === 'saving' ? 'Saving...' : 'Save Lesson'}\n+                      </Button>\n+                    </div>\n+                  </>\n+            )}\n+    </div>\n+    \n+\n+      {/* Floating Save Button */}\n+      {selectedSubtopicId && currentLessonId && (\n+          <div className=\"fixed bottom-4 right-4 flex flex-col gap-2\">\n+            <TooltipProvider>\n+              <Tooltip>\n+                <TooltipTrigger asChild>\n+                  <Button\n+                    size=\"icon\"\n+                    className=\"rounded-full h-12 w-12 shadow-lg\"\n+                    onClick={handleSaveLesson}\n+                    disabled={!selectedSubtopicId || !lessonTitle || questions.length === 0}\n+                  >\n+                    <Save className=\"h-6 w-6\" />\n+                  </Button>\n+                </TooltipTrigger>\n+                <TooltipContent>\n+                  <p>Save Lesson (Ctrl+S)</p>\n+                </TooltipContent>\n+              </Tooltip>\n+            </TooltipProvider>\n+          </div>\n+        )}\n+        <SaveFeedback />\n+\n+        {/* Add Grade Modal - do not delete */}\n+        {/* {modalState.showAddGrade && (\n+          <Dialog \n+            open={modalState.showAddGrade} \n+            onOpenChange={(open) => handleModalStateChange('showAddGrade', open)}\n+          >\n+            <DialogContent \n+              className=\"sm:max-w-[425px]\"\n+              onEscapeKeyDown={cleanupModalState}\n+              onPointerDownOutside={cleanupModalState}\n+            >\n+              <DialogHeader>\n+                <DialogTitle>Add New Grade</DialogTitle>\n+                <DialogDescription>Enter the details for the new grade.</DialogDescription>\n+              </DialogHeader>\n+              <div className=\"space-y-4 py-4\">\n+                <div className=\"space-y-2\">\n+                  <Label htmlFor=\"grade-name\">Grade Name</Label>\n+                  <Input\n+                    id=\"grade-name\"\n+                    value={newItemData.name}\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n+                    placeholder=\"Enter grade name\"\n+                  />\n       </div>\n-    </div>\n+              </div>\n+              <DialogFooter>\n+                <Button variant=\"outline\" onClick={() => {\n+                  setModalState({ ...modalState, showAddGrade: false });\n+                  setNewItemData({ name: '', description: '' });\n+                }}>\n+                  Cancel\n+                </Button>\n+                <Button onClick={handleCreateGrade} disabled={!newItemData.name}>Create Grade</Button>\n+              </DialogFooter>\n+            </DialogContent>\n+          </Dialog>\n+        )} */}\n+\n+        {/* Add Topic Modal */}\n+        {modalState.showAddTopic && (\n+          <Dialog \n+            open={modalState.showAddTopic} \n+            onOpenChange={(open) => handleModalStateChange('showAddTopic', open)}\n+          >\n+            <DialogContent \n+              className=\"sm:max-w-[425px]\"\n+              onEscapeKeyDown={cleanupModalState}\n+              onPointerDownOutside={cleanupModalState}\n+            >\n+              <DialogHeader>\n+                <DialogTitle>Add New Topic</DialogTitle>\n+                <DialogDescription>Enter the details for the new topic.</DialogDescription>\n+              </DialogHeader>\n+              <div className=\"space-y-4 py-4\">\n+                <div className=\"space-y-2\">\n+                  <Label htmlFor=\"topic-name\">Topic Name</Label>\n+                  <Input\n+                    id=\"topic-name\"\n+                    value={newItemData.name}\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n+                    placeholder=\"Enter topic name\"\n+                  />\n+                </div>\n+              </div>\n+              <DialogFooter>\n+                <Button variant=\"outline\" onClick={() => {\n+                  setModalState({ ...modalState, showAddTopic: false });\n+                  setNewItemData({ name: '', description: '' });\n+                }}>\n+                  Cancel\n+                </Button>\n+                <Button onClick={handleCreateTopic} disabled={!newItemData.name}>Create Topic</Button>\n+              </DialogFooter>\n+            </DialogContent>\n+          </Dialog>\n+        )}\n+\n+        {/* Add Subtopic Modal */}\n+        {modalState.showAddSubtopic && (\n+          <Dialog \n+            open={modalState.showAddSubtopic} \n+            onOpenChange={(open) => handleModalStateChange('showAddSubtopic', open)}\n+          >\n+            <DialogContent \n+              className=\"sm:max-w-[425px]\"\n+              onEscapeKeyDown={cleanupModalState}\n+              onPointerDownOutside={cleanupModalState}\n+            >\n+              <DialogHeader>\n+                <DialogTitle>Add New Subtopic</DialogTitle>\n+                <DialogDescription>Enter the details for the new subtopic.</DialogDescription>\n+              </DialogHeader>\n+              <div className=\"space-y-4 py-4\">\n+                <div className=\"space-y-2\">\n+                  <Label htmlFor=\"subtopic-name\">Subtopic Name</Label>\n+                  <Input\n+                    id=\"subtopic-name\"\n+                    value={newItemData.name}\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n+                    placeholder=\"Enter subtopic name\"\n+                  />\n+                </div>\n+              </div>\n+              <DialogFooter>\n+                <Button variant=\"outline\" onClick={() => {\n+                  setModalState({ ...modalState, showAddSubtopic: false });\n+                  setNewItemData({ name: '', description: '' });\n+                }}>\n+                  Cancel\n+                </Button>\n+                <Button onClick={() => handleCreateSubtopic({ title: newItemData.name })} disabled={!newItemData.name}>Create Subtopic</Button>\n+              </DialogFooter>\n+            </DialogContent>\n+          </Dialog>\n+        )}\n+\n+        {/* Add Lesson Modal */}\n+        {modalState.showAddLesson && (\n+          <Dialog \n+            open={modalState.showAddLesson} \n+            onOpenChange={(open) => handleModalStateChange('showAddLesson', open)}\n+          >\n+            <DialogContent \n+              className=\"sm:max-w-[425px]\"\n+              onEscapeKeyDown={cleanupModalState}\n+              onPointerDownOutside={cleanupModalState}\n+            >\n+              <DialogHeader>\n+                <DialogTitle>Add New Lesson</DialogTitle>\n+                <DialogDescription>Enter the details for the new lesson.</DialogDescription>\n+              </DialogHeader>\n+              <div className=\"space-y-4 py-4\">\n+                <div className=\"space-y-2\">\n+                  <Label htmlFor=\"lesson-name\">Lesson Title</Label>\n+                  <Input\n+                    id=\"lesson-name\"\n+                    value={newItemData.name}\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n+                    placeholder=\"Enter lesson title\"\n+                  />\n+                </div>\n+              </div>\n+              <DialogFooter>\n+                <Button variant=\"outline\" onClick={() => {\n+                  setModalState({ ...modalState, showAddLesson: false });\n+                  setNewItemData({ name: '', description: '' });\n+                }}>\n+                  Cancel\n+                </Button>\n+                <Button onClick={handleCreateLesson} disabled={!newItemData.name}>Create Lesson</Button>\n+              </DialogFooter>\n+            </DialogContent>\n+          </Dialog>\n+        )}\n+      </div>\n+      <Toaster />\n+      </div>\n   );\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739967570899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2146,8 +2146,20 @@\n                               className=\"py-3 cursor-pointer select-none\" \n                               onClick={() => handleTopicExpand(topic.id || '')}\n                             >\n                               <div className=\"flex items-center justify-between\">\n+                                <div className=\"flex items-center justify-between\">\n+                                  <div className=\"flex items-center gap-2\">\n+                                    <Layers className=\"h-4 w-4 text-primary\" />\n+                                    <h4 className=\"font-medium\">{topic.title}</h4>\n+                                    <Badge variant=\"outline\" className=\"ml-2\">\n+                                      {subtopics.filter(s => s.topic_id === topic.id).length} Subtopics\n+                                    </Badge>\n+                                  </div>\n+                                  <div className=\"flex items-center gap-2\">\n+                                    <Button \n+                                      variant=\"ghost\" \n+                                      size=\"sm\"\n                                 <div className=\"flex items-center gap-2\">\n                                   <Layers className=\"h-4 w-4 text-primary\" />\n                                   <h4 className=\"font-medium\">{topic.title}</h4>\n                                   <Badge variant=\"outline\" className=\"ml-2\">\n"
                },
                {
                    "date": 1739967578615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2158,29 +2158,23 @@\n                                   <div className=\"flex items-center gap-2\">\n                                     <Button \n                                       variant=\"ghost\" \n                                       size=\"sm\"\n-                                <div className=\"flex items-center gap-2\">\n-                                  <Layers className=\"h-4 w-4 text-primary\" />\n-                                  <h4 className=\"font-medium\">{topic.title}</h4>\n-                                  <Badge variant=\"outline\" className=\"ml-2\">\n-                                    {subtopics.filter(s => s.topic_id === topic.id).length} Subtopics\n-                                  </Badge>\n+                                      onClick={(e) => {\n+                                        e.stopPropagation();\n+                                        setItemToDelete({\n+                                          id: topic.id,\n+                                          type: 'topic',\n+                                          title: topic.title\n+                                        });\n+                                        setDeleteDialogOpen(true);\n+                                      }}\n+                                    >\n+                                      <Trash className=\"h-4 w-4\" />\n+                                    </Button>\n+                                  </div>\n                                 </div>\n                                 <div className=\"flex items-center gap-2\">\n-                                  <AlertDialog>\n-                                    <AlertDialogTrigger asChild>\n-                                      <Button \n-                                        variant=\"ghost\" \n-                                        size=\"sm\" \n-                                        className=\"hover:bg-destructive/10 hover:text-destructive\"\n-                                        onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}\n-                                      >\n-                                        <Trash className=\"h-4 w-4\" />\n-                                      </Button>\n-                                    </AlertDialogTrigger>\n-                                    {/* Alert Dialog Content */}\n-                                  </AlertDialog>\n                                   <ChevronDown className={cn(\n                                     \"h-4 w-4 transition-transform duration-200\",\n                                     expandedTopic === topic.id ? \"rotate-0\" : \"-rotate-90\"\n                                   )} />\n@@ -2227,21 +2221,23 @@\n                                                       {lessons.filter(l => l.subtopic_id === subtopic.id).length} Lessons\n                                                     </Badge>\n                                                   </div>\n                                                   <div className=\"flex items-center gap-2\">\n-                                                    <AlertDialog>\n-                                                      <AlertDialogTrigger asChild>\n-                                                        <Button \n-                                                          variant=\"ghost\" \n-                                                          size=\"sm\" \n-                                                          className=\"hover:bg-destructive/10 hover:text-destructive\"\n-                                                          onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}\n-                                                        >\n-                                                          <Trash className=\"h-4 w-4\" />\n-                                                        </Button>\n-                                                      </AlertDialogTrigger>\n-                                                      {/* Alert Dialog Content */}\n-                                                    </AlertDialog>\n+                                                    <Button \n+                                                      variant=\"ghost\" \n+                                                      size=\"sm\"\n+                                                      onClick={(e) => {\n+                                                        e.stopPropagation();\n+                                                        setItemToDelete({\n+                                                          id: subtopic.id,\n+                                                          type: 'subtopic',\n+                                                          title: subtopic.title\n+                                                        });\n+                                                        setDeleteDialogOpen(true);\n+                                                      }}\n+                                                    >\n+                                                      <Trash className=\"h-4 w-4\" />\n+                                                    </Button>\n                                                     <ChevronDown className={cn(\n                                                       \"h-4 w-4 transition-transform duration-200\",\n                                                       expandedSubtopic === subtopic.id ? \"rotate-0\" : \"-rotate-90\"\n                                                     )} />\n"
                },
                {
                    "date": 1739968371289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2281,21 +2281,23 @@\n                                                                         {lesson.duration} mins • {lesson.questions?.length || 0} Questions\n                                                                       </span>\n                                                                     </div>\n                                                                   </div>\n-                                                                  <AlertDialog>\n-                                                                    <AlertDialogTrigger asChild>\n-                                                                      <Button \n-                                                                        variant=\"ghost\" \n-                                                                        size=\"sm\" \n-                                                                        className=\"hover:bg-destructive/10 hover:text-destructive\"\n-                                                                        onClick={(e: React.MouseEvent<HTMLButtonElement>) => e.stopPropagation()}\n-                                                                      >\n-                                                                        <Trash className=\"h-4 w-4\" />\n-                                                                      </Button>\n-                                                                    </AlertDialogTrigger>\n-                                                                    {/* Alert Dialog Content */}\n-                                                                  </AlertDialog>\n+                                                                  <Button \n+                                                                    variant=\"ghost\" \n+                                                                    size=\"sm\"\n+                                                                    onClick={(e) => {\n+                                                                      e.stopPropagation();\n+                                                                      setItemToDelete({\n+                                                                        id: lesson.id,\n+                                                                        type: 'lesson',\n+                                                                        title: lesson.title\n+                                                                      });\n+                                                                      setDeleteDialogOpen(true);\n+                                                                    }}\n+                                                                  >\n+                                                                    <Trash className=\"h-4 w-4\" />\n+                                                                  </Button>\n                                                                 </div>\n                                                               ))\n                                                           )}\n                                                         </div>\n"
                },
                {
                    "date": 1739968376693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,9 @@\n import { PostgrestError } from '@supabase/supabase-js';\n import { Question as ContentQuestion } from './types';  // Import the specific type\n import { Trash } from \"lucide-react\";\n import { AnimatePresence, motion } from 'framer-motion';\n+import { useQueryClient } from 'react-query';\n \n \n // Update the API endpoint to match your backend route\n const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\n"
                },
                {
                    "date": 1739968387105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -389,891 +389,38 @@\n     type: 'topic' | 'subtopic' | 'lesson';\n     title: string;\n   } | null>(null);\n \n-  // Event handlers\n-  const handleQuestionTypeChange = useCallback((type: string) => {\n-    if (isQuestionType(type)) {\n-      setSelectedQuestionType(type);\n-    }\n-  }, []);\n+  // Add these state and validation functions\n+  const [deleteError, setDeleteError] = useState<string | null>(null);\n \n-  const handleAddQuestion = useCallback(() => {\n-    if (!selectedQuestionType || !isQuestionType(selectedQuestionType)) return;\n-\n-    const defaultData = QUESTION_TYPES[selectedQuestionType].defaultData;\n-    const newQuestion: Question = {\n-      id: crypto.randomUUID(),\n-      type: selectedQuestionType,\n-      //data: {},\n-      title: 'New Question',\n-      content: '',\n-      lesson_id: currentLessonId || '',\n-      metadata: {},\n-      data: {\n-        ...defaultData,\n-        prompt: '',\n-        teacher_script: '',\n-        followup_prompt: [],\n-        sample_answer: ''\n-      },\n-      correct_answer: '',\n-      exercisePrompts: [],\n-      isDraft: true\n-    };\n-\n-    setQuestions(prev => [...prev, newQuestion]);\n-    setQuestionSaveStatuses(prev => [\n-      ...prev,\n-      { id: newQuestion.id, status: 'draft' }\n-    ]);\n-    setSelectedQuestionType('');\n-  }, [selectedQuestionType, currentLessonId]);\n-\n-  const handleRemoveQuestion = async (index: number) => {\n-    try {\n-      const questionToDelete = questions[index];\n+  const canDeleteLesson = async (lessonId: string) => {\n+    const { data: questions } = await supabase\n+      .from('questions')\n+      .select('id')\n+      .eq('lesson_id', lessonId);\n       \n-      // Delete related exercise prompts first\n-      const { error: promptError } = await supabase\n-        .from('exercise_prompts')\n-        .delete()\n-        .eq('question_id', questionToDelete.id);\n-\n-      if (promptError) throw promptError;\n-\n-      // Then delete the question\n-      const { error: questionError } = await supabase\n-        .from('questions')\n-        .delete()\n-        .eq('id', questionToDelete.id);\n-\n-      if (questionError) throw questionError;\n-\n-      // Update local state\n-      const newQuestions = questions.filter((_, i) => i !== index);\n-      setQuestions(newQuestions);\n-      \n-      toast.success('Question and related prompts deleted successfully');\n-    } catch (error) {\n-      console.error('Error deleting question:', error);\n-      toast.error('Failed to delete question and prompts');\n-    }\n+    return !questions || questions.length === 0;\n   };\n \n-  const handleUpdateQuestion = useCallback(async (index: number, updatedQuestion: Question) => {\n-    const newQuestions = [...questions];\n-    newQuestions[index] = updatedQuestion;\n-    setQuestions(newQuestions);\n-    setQuestionSaveStatuses(prev => prev.map((status, i) => \n-      i === index ? { ...status, status: 'draft' } : status\n-    ));\n-  }, [questions]);\n-\n-  const handleAddExercisePrompt = useCallback((questionIndex: number) => {\n-    setQuestions(prev => prev.map((question, i) => {\n-      if (i === questionIndex) {\n-        return {\n-          ...question,\n-          exercisePrompts: [\n-            ...question.exercisePrompts,\n-            {\n-              id: crypto.randomUUID(),\n-              text: '',\n-              media: '',\n-              type: 'image',\n-              narration: 'Your turn',\n-              saytext: 'Say: ',\n-              metadata: {\n-                estimatedTime: 0\n-              },\n-              created_at: new Date().toISOString(),\n-              updated_at: new Date().toISOString()\n-            }\n-          ]\n-        };\n-      }\n-      return question;\n-    }));\n-  }, []);\n-\n-  const handleRemoveExercisePrompt = useCallback((questionIndex: number, promptIndex: number) => {\n-    setQuestions(prev => prev.map((question, i) => {\n-      if (i === questionIndex) {\n-        return {\n-          ...question,\n-          exercisePrompts: question.exercisePrompts.filter((_, j) => j !== promptIndex)\n-        };\n-      }\n-      return question;\n-    }));\n-  }, []);\n-\n-  const handleExercisePromptChange = useCallback(async (\n-    questionIndex: number,\n-    promptIndex: number,\n-    updatedPrompt: ExercisePrompt\n-  ) => {\n-    try {\n-      const promptUpdate = {\n-        id: updatedPrompt.id,\n-        question_id: updatedPrompt.question_id,\n-        text: updatedPrompt.text,\n-        type: updatedPrompt.type,\n-        narration: updatedPrompt.narration,\n-        saytext: updatedPrompt.saytext,\n-        media: updatedPrompt.media,\n-        // Remove order_index as it's not in schema\n-        created_at: new Date().toISOString()\n-      };\n-\n-      const { error: promptError } = await supabase\n-        .from('exercise_prompts')\n-        .upsert(promptUpdate)\n-        .select();\n-\n-      if (promptError) throw promptError;\n-\n-      // Update local state\n-      setQuestions(prev => prev.map((question, i) => {\n-        if (i === questionIndex) {\n-          const newPrompts = [...question.exercisePrompts];\n-          newPrompts[promptIndex] = updatedPrompt;\n-          return { ...question, exercisePrompts: newPrompts };\n-        }\n-        return question;\n-      }));\n-\n-    } catch (error) {\n-      console.error('Error saving prompt:', error);\n-      toast.error('Failed to save prompt');\n-    }\n-  }, []);\n-\n-  const handleAddActivity = useCallback(() => {\n-    const newActivity: Activity = {\n-      id: crypto.randomUUID(),\n-      lesson_id: currentLessonId || '',\n-      created_at: new Date().toISOString(),\n-      type: 'practice',\n-      title: '',\n-      name: '',\n-      instructions: '',\n-      media: [],\n-      data: {\n-        prompt: '',\n-        teacherScript: '',\n-        media: []\n-      }\n-    };\n-    setActivities(prev => [...prev, newActivity]);\n-  }, [currentLessonId]);\n-\n-  const handleUpdateActivity = useCallback((index: number, updatedActivity: Activity) => {\n-    setActivities(prev => prev.map((activity, i) => i === index ? updatedActivity : activity));\n-  }, []);\n-\n-  const handleRemoveActivity = useCallback((index: number) => {\n-    setActivities(prev => prev.filter((_, i) => i !== index));\n-  }, []);\n-\n-  const handleExercisePromptUpdate = useCallback((questionIndex: number, promptIndex: number, updatedPrompt: ExercisePrompt) => {\n-    const updatedQuestions = [...questions];\n-    updatedQuestions[questionIndex].exercisePrompts[promptIndex] = updatedPrompt;\n-    handleUpdateQuestion(questionIndex, updatedQuestions[questionIndex]);\n-  }, [questions, handleUpdateQuestion]);\n-\n-  const handleQuestionDataChange = useCallback((questionIndex: number, field: string, value: string) => {\n-    setQuestions(prev => prev.map((q, i) => \n-      i === questionIndex \n-        ? { \n-            ...q, \n-            data: { \n-              prompt: q.data?.prompt || '',\n-              teacherScript: q.data?.teacherScript || '',\n-              ...q.data,\n-              [field]: value \n-            } \n-          }\n-        : q\n-    ));\n-  }, []);\n-\n-  const [isSaving, setIsSaving] = useState(false);\n-\n-  const handleSaveLesson = async () => {\n-    try {\n-      if (!currentLessonId || !selectedSubtopicId) {\n-        toast.error('Please select a subtopic and lesson first');\n-        return;\n-      }\n-\n-      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\n-      if (sessionError) throw sessionError;\n+  const canDeleteSubtopic = async (subtopicId: string) => {\n+    const { data: lessons } = await supabase\n+      .from('lessons')\n+      .select('id, questions(id)')\n+      .eq('subtopic_id', subtopicId);\n       \n-      if (!session?.user) {\n-        toast.error('Please sign in to save lessons');\n-        return;\n-      }\n-\n-      // Get user's role from session\n-      const userRole = session.user.user_metadata?.role;\n-      console.log('Current user role:', userRole);\n-      console.log('📝 Saving content heading:', {\n-        contentHeading,\n-        currentLessonId,\n-        selectedSubtopicId,\n-        timestamp: new Date().toISOString()\n-      });\n-\n-      // Create metadata object\n-      const lessonMetadata = {\n-        lastEdited: new Date().toISOString(),\n-        version: 1,\n-        status: 'draft' \n-      };\n-\n-      // Complete lesson data with all fields\n-      const lessonData = {\n-        id: currentLessonId,\n-        title: lessonTitle,\n-        content: lessonContent,\n-        metadata: lessonMetadata, // Supabase will automatically handle JSON conversion\n-        content_type: 'html',\n-        lesson_type: 'lesson',\n-        grade_id: selectedGradeId,\n-        topic_id: selectedTopicId,\n-        subtopic_id: selectedSubtopicId,\n-        user_id: session.user.id,\n-        updated_at: new Date().toISOString(),\n-        role: userRole, // Include role in the payload\n-        description: '',\n-        prerequisites: [],\n-        media_type: 'image',\n-        media_url: '',\n-        contentheading: contentHeading || ''\n-      };\n-\n-      console.log('📦 Data being sent to Supabase:', lessonData);\n-\n-      // Save lesson with all fields\n-      const { data, error: lessonError } = await supabase\n-        .from('lessons')\n-        .upsert(lessonData, { \n-          onConflict: 'id'\n-        })\n-        .select();\n-\n-      if (lessonError) throw lessonError;\n-\n-      // 2. Save lesson content\n-      const { data: existingContent } = await supabase\n-        .from('lesson_content')\n-        .select('id')\n-        .eq('lesson_id', currentLessonId)\n-        .single();\n-\n-      const contentMetadata = {\n-        lastEdited: new Date().toISOString(),\n-        version: 1,\n-        status: 'draft'\n-      };\n-\n-      const contentUpdate = {\n-        id: existingContent?.id || crypto.randomUUID(),\n-        lesson_id: currentLessonId,\n-        content: [lessonContent],\n-        metadata: contentMetadata, // Supabase will automatically handle JSON conversion\n-        content_type: 'html',\n-        user_id: session.user.id,\n-        updated_at: new Date().toISOString(),\n-        created_at: new Date().toISOString()\n-      };\n-\n-      const { error: contentError } = await supabase\n-        .from('lesson_content')\n-        .upsert(contentUpdate, { onConflict: 'id' });\n-\n-      if (contentError) throw contentError;\n-\n-      // 3. Save questions\n-      for (const question of questions) {\n-        const questionData = {\n-          id: question.id,\n-          lesson_id: currentLessonId,\n-          type: question.type,\n-          title: question.title,\n-          metadata: question.metadata,\n-          data: question.data,\n-          updated_at: new Date().toISOString(),\n-          user_id: session.user.id\n-        };\n-\n-        const { error: questionError } = await supabase\n-          .from('questions')\n-          .upsert(questionData, { onConflict: 'id' });\n-\n-        if (questionError) throw questionError;\n-\n-        //4. Save exercise prompts for this question\n-        if (question.exercisePrompts) {\n-          for (const prompt of question.exercisePrompts) {\n-            const promptData = {\n-              id: prompt.id,\n-              question_id: question.id,\n-              text: prompt.text,\n-              media: prompt.media,\n-              type: prompt.type,\n-              narration: prompt.narration,\n-              saytext: prompt.saytext,\n-              user_id: session.user.id,\n-              updated_at: new Date().toISOString()\n-            };\n-\n-            const { error: promptError } = await supabase\n-              .from('exercise_prompts')\n-              .upsert(promptData, { onConflict: 'id' });\n-\n-            if (promptError) throw promptError;\n-          }\n-        }\n-      }\n-\n-      // 5. Save activities\n-      if (activities.length > 0) {\n-        const activitiesData = activities.map(activity => ({\n-          id: activity.id,\n-          lesson_id: currentLessonId,\n-          type: activity.type,\n-          title: activity.title,\n-          name: activity.name,\n-          instructions: activity.instructions,\n-          media: activity.media,\n-          data: activity.data,\n-          created_at: new Date().toISOString()\n-        }));\n-\n-        const { error: activitiesError } = await supabase\n-          .from('activities')\n-          .upsert(activitiesData, { onConflict: 'id' });\n-\n-        if (activitiesError) throw activitiesError;\n-      }\n-\n-      // After successful save\n-      console.log('✅ Content heading saved successfully:', {\n-        contentHeading,\n-        lessonId: currentLessonId,\n-        timestamp: new Date().toISOString()\n-      });\n-\n-      toast.success('Lesson saved successfully');\n-    } catch (err) {\n-      const error = err as PostgrestError;\n-      console.error('❌ Error saving content heading:', {\n-        error: error.message,\n-        contentHeading,\n-        lessonContent,\n-        lessonId: currentLessonId,\n-        timestamp: new Date().toISOString()\n-      });\n-      toast.error(`Failed to save lesson: ${error.message}`);\n-\n-\n-    }\n+    return !lessons || lessons.every(lesson => !lesson.questions?.length);\n   };\n \n-  const handleSaveQuestion = async (question: Question, index: number) => {\n-    const loadingToast = toast.loading(`Saving question ${index + 1}...`);\n-    \n-    try {\n-      const { data: { session } } = await supabase.auth.getSession();\n-      if (!session?.user) {\n-        toast.error('Please sign in to save question', { id: loadingToast });\n-        return;\n-      }\n-\n-      // Save question\n-      const questionData = {\n-        id: question.id,\n-        lesson_id: currentLessonId,\n-        type: question.type,\n-        title: question.title,\n-        metadata: question.metadata,\n-        data: {\n-          prompt: question.data?.prompt ?? '',\n-          teacherScript: question.data?.teacherScript ?? '',\n-          followup_prompt: question.data?.followup_prompt ?? [],\n-          sampleAnswer: question.data?.sampleAnswer || undefined,  // Convert null to undefined\n-          answer: question.data?.answer || undefined  // Convert null to undefined\n-        } as const,\n-        user_id: session.user.id,\n-        updated_at: new Date().toISOString()\n-      };\n-\n-      const { error: questionError } = await supabase\n-        .from('questions')\n-        .upsert(questionData, { onConflict: 'id' });\n-\n-      if (questionError) throw questionError;\n-\n-      // Save exercise prompts if they exist\n-      if (question.exercisePrompts?.length) {\n-        for (const prompt of question.exercisePrompts) {\n-          const promptData = {\n-            id: prompt.id,\n-            question_id: question.id,\n-            text: prompt.text,\n-            type: prompt.type,\n-            narration: prompt.narration,\n-            saytext: prompt.saytext,\n-            media: prompt.media,\n-            user_id: session.user.id,\n-            updated_at: new Date().toISOString()\n-          };\n-\n-          const { error: promptError } = await supabase\n-            .from('exercise_prompts')\n-            .upsert(promptData, { onConflict: 'id' });\n-\n-          if (promptError) throw promptError;\n-        }\n-      }\n-\n-      toast.success(`Question ${index + 1} saved successfully`, { id: loadingToast });\n-    } catch (error) {\n-      console.error('Error saving question:', error);\n-      toast.error(`Failed to save question ${index + 1}`, { id: loadingToast });\n-    }\n-  };\n-\n-  const handleSaveActivity = async (activity: Activity) => {\n-    try {\n-      await contentService.saveActivity(activity);\n-      toast.success('Activity saved');\n-    } catch (error) {\n-      console.error('Failed to save activity:', error);\n-      toast.error('Failed to save activity');\n-    }\n-  };\n-\n-  // Effects\n-  useEffect(() => {\n-    const fetchGrades = async () => {\n-      try {\n-        const { data, error } = await supabase\n-          .from('grades')\n-          .select('*')\n-          .order('name');\n-\n-        if (error) {\n-          console.error('Supabase error:', error);\n-          throw error;\n-        }\n-\n-        if (!data) {\n-          throw new Error('No data returned from Supabase');\n-        }\n-\n-        // Map the grades to match your interface\n-        const validGrades = data.map((grade: any) => ({\n-          _id: grade.id,\n-          id: grade.id,\n-          name: grade.name,\n-          level: grade.level || 0,  // Add default value if not provided\n-          orderIndex: grade.order_index || 0,  // Add default value if not provided\n-          topics: []\n-        }));\n-        \n-        setGrades(validGrades);\n-      } catch (error) {\n-        console.error('Error fetching grades:', error);\n-        toast.error('Failed to fetch grades');\n-      }\n-    };\n-\n-    fetchGrades();\n-  }, []);\n-\n-  // Topic Selection\n-  useEffect(() => {\n-    const fetchTopics = async () => {\n-      if (!selectedGradeId) return;\n+  const canDeleteTopic = async (topicId: string) => {\n+    const { data: subtopics } = await supabase\n+      .from('subtopics')\n+      .select('id, lessons(id, questions(id))')\n+      .eq('topic_id', topicId);\n       \n-      try {\n-        const { data, error } = await supabase\n-          .from('topics')\n+    return !subtopics || subtopics.every(subtopic => \n+      !subtopic.lessons?.some(lesson => lesson.questions?.length)\n           .select('*')\n-          .eq('grade_id', selectedGradeId)\n-          .order('title');\n-\n-        if (error) {\n-          throw error;\n-        }\n-\n-        // Map the topics to match your interface\n-        const validTopics = (data || []).map((topic: any) => ({\n-          _id: topic.id,\n-          id: topic.id,\n-          name: topic.title,\n-          title: topic.title,\n-          grade_id: topic.grade_id,\n-          subtopics: []\n-        }));\n-        \n-        setTopics(validTopics);\n-      } catch (error) {\n-        console.error('Error fetching topics:', error);\n-        toast.error('Failed to fetch topics');\n-      }\n-    };\n-\n-    fetchTopics();\n-  }, [selectedGradeId]);\n-\n-  // Subtopic Selection\n-  useEffect(() => {\n-    const fetchSubtopics = async () => {\n-      if (!selectedTopicId) return;\n-      \n-      try {\n-        // Use content service to fetch subtopics\n-        const subtopicsData = await contentService.fetchSubtopics(selectedTopicId);\n-        console.log('Fetched subtopics:', subtopicsData);\n-\n-        const validSubtopics = subtopicsData.map((subtopic: any) => ({\n-          id: subtopic.id,\n-          title: subtopic.title,\n-          description: subtopic.description,\n-          topic_id: subtopic.topic_id,\n-          lessons: [],\n-          order_index: subtopicsData.length\n-        }));\n-        \n-        setSubtopics(validSubtopics);\n-        \n-        // Update global state\n-        if (selectedSubtopic) {\n-          setSelectedSubtopic(selectedSubtopic);\n-        }\n-      } catch (err) {\n-        const error = err as Error;\n-        console.error('Error fetching subtopics:', error);\n-        toast.error('Failed to fetch subtopics');\n-      }\n-    };\n-\n-    fetchSubtopics();\n-  }, [selectedTopicId, selectedSubtopic, setSelectedSubtopic]);\n-\n-  // Add effect to monitor subtopics state\n-  useEffect(() => {\n-    console.log('Current subtopics state:', subtopics);\n-  }, [subtopics]);\n-\n-  // Add fetchLessons function\n-  const fetchLessons = useCallback(async () => {\n-    if (!selectedSubtopicId) return;\n-    try {\n-      const { data, error } = await supabase\n-        .from('lessons')\n-        .select('*')\n-        .eq('subtopic_id', selectedSubtopicId)\n-        .order('title');\n-\n-      if (error) {\n-        throw error;\n-      }\n-      \n-      // Map the lessons to ensure they have _id\n-      const validLessons = (data || []).map((lesson: any) => ({\n-        ...lesson,\n-        _id: lesson._id || lesson.id, // Use _id if available, otherwise use id\n-        title: lesson.title || 'Untitled Lesson'\n-      })).filter((lesson: any) => lesson._id); // Only include lessons with valid IDs\n-      \n-      setLessons(validLessons);\n-    } catch (error) {\n-      console.error('Error fetching lessons:', error);\n-      toast.error('Failed to fetch lessons');\n-    }\n-  }, [selectedSubtopicId]);\n-  // Add loadLessonContent function\n-  const isLoading = useRef(false);\n-  const loadLessonContent = useCallback(async (lessonId: string) => {\n-    // Prevent multiple simultaneous loads\n-    if (isLoading.current) return;\n-    isLoading.current = true;\n-\n-    const controller = new AbortController();\n-\n-    try {\n-      // Clear existing content first\n-      setLessonTitle('');\n-      setContentHeading('');\n-      setLessonContent('');\n-      setQuestions([]);\n-      \n-      // First fetch lesson data\n-      const { data: lessonData, error: lessonError } = await supabase\n-        .from('lessons')\n-        .select('*')\n-        .eq('id', lessonId)\n-        .single()\n-        \n-\n-      if (lessonError) {\n-        console.error('Lesson fetch error:', lessonError);\n-        throw lessonError;\n-      }\n-\n-      // Set lesson data\n-      setLessonTitle(lessonData.title || '');\n-      setContentHeading(lessonData.content || '');\n-\n-      // Then fetch lesson content with explicit headers\n-      const { data: contentData, error: contentError } = await supabase\n-        .from('lesson_content')\n-        .select('*')\n-        .eq('lesson_id', lessonId)\n-        .order('updated_at', { ascending: false })\n-        .limit(1)\n-        .maybeSingle();\n-\n-      if (contentError) {\n-        console.error('Content fetch error:', contentError);\n-        throw contentError;\n-      }\n-\n-      // Set content if available\n-      if (contentData?.content) {\n-        setLessonContent(typeof contentData.content === 'string' \n-          ? contentData.content \n-          : JSON.stringify(contentData.content)\n-        );\n-      }\n-\n-    } catch (error: unknown) {\n-      if (error instanceof Error && error.name === 'AbortError') {\n-        console.log('Request aborted');\n-        return;\n-      }\n-      console.error('Error loading lesson:', error);\n-      toast.error('Failed to load lesson content');\n-      \n-      // Reset states on error\n-      setLessonTitle('');\n-      setContentHeading('');\n-      setLessonContent('');\n-      setQuestions([]);\n-    } finally {\n-      isLoading.current = false;\n-    }\n-\n-    return () => {\n-      controller.abort();\n-    };\n-  }, []); // Empty dependencies since we're using closure over state setters\n-\n-  // // Add effect for fetching lessons when subtopic changes\n-  useEffect(() => {\n-    if (selectedSubtopicId) {\n-      fetchLessons();\n-    }\n-  }, [selectedSubtopicId, fetchLessons]);\n-\n-  // Add effect for loading lesson content when currentLessonId changes\n-    useEffect(() => {\n-    let isMounted = true;\n-    let timeoutId: NodeJS.Timeout;\n-\n-    const loadContent = async () => {\n-      if (!currentLessonId || !isMounted) return;\n-\n-      // Clear previous timeout if exists\n-      if (timeoutId) clearTimeout(timeoutId);\n-\n-      // Set new timeout for debouncing\n-      timeoutId = setTimeout(() => {\n-        if (isMounted) {\n-          loadLessonContent(currentLessonId);\n-        }\n-      }, 300);\n-    };\n-\n-    loadContent();\n-\n-    // Cleanup function\n-    return () => {\n-      isMounted = false;\n-      if (timeoutId) clearTimeout(timeoutId);\n-      if (isLoading.current) isLoading.current = false;\n-    };\n-  }, [currentLessonId]); // Remove loadLessonContent from dependencies\n-\n-  useEffect(() => {\n-    console.log('Current lessons state:', lessons);\n-  }, [lessons]);\n-\n-    // Add keyboard shortcut for saving\n-  useEffect(() => {\n-    const handleKeyDown = (e: KeyboardEvent) => {\n-      if ((e.ctrlKey || e.metaKey) && e.key === 's') {\n-        e.preventDefault();\n-        handleSaveLesson();\n-      }\n-    };\n-\n-    window.addEventListener('keydown', handleKeyDown);\n-    return () => window.removeEventListener('keydown', handleKeyDown);\n-  }, [handleSaveLesson]);\n-\n-  // Add SaveFeedback component\n-  const SaveFeedback = useCallback(() => {\n-    if (saveProgress === 'idle') return null;\n-\n-    return (\n-    <div className=\"fixed bottom-4 right-4\">\n-      {saveProgress === 'saving' && (\n-        <div className=\"flex items-center gap-2 bg-background border rounded-lg px-4 py-2 shadow-lg\">\n-          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n-          <span className=\"text-sm\">Saving changes...</span>\n-        </div>\n-      )}\n-      {saveProgress === 'saved' && (\n-        <div className=\"flex items-center gap-2 bg-green-500 text-white rounded-lg px-4 py-2 shadow-lg\">\n-          <Check className=\"h-4 w-4\" />\n-          <span className=\"text-sm\">Changes saved</span>\n-        </div>\n-      )}\n-      {saveProgress === 'error' && (\n-        <div className=\"flex items-center gap-2 bg-destructive text-destructive-foreground rounded-lg px-4 py-2 shadow-lg\">\n-          <X className=\"h-4 w-4\" />\n-          <span className=\"text-sm\">Error saving changes</span>\n-        </div>\n-      )}\n-    </div>\n-  );\n-  }, [saveProgress]);\n-\n-  // Update handlers\n-  const handleGradeSelect = (gradeId: string) => {\n-    // Always keep sidebar open during selection\n-    setIsSidebarCollapsed(false);\n-    setIsSidebarLocked(true);\n-    \n-    // Batch state updates\n-    requestAnimationFrame(() => {\n-      setSelectedGradeId(gradeId);\n-      setSelectedGrade(gradeId);\n-      setSelectedTopicId(null);\n-      setSelectedTopic('');\n-      setSelectedSubtopicId(null);\n-      setSelectedSubtopic('');\n-      setCurrentLessonId(null);\n-      \n-      if (isViewMode) {\n-        setExpandedGrade(gradeId);\n-      }\n-    });\n-  };\n-\n-  const handleTopicSelect = (value: string) => {\n-    setSelectedTopicId(value);\n-    setSelectedTopic(value);\n-    setSelectedSubtopicId(null);\n-    setSelectedSubtopic('');\n-    setCurrentLessonId(null);\n-  };\n-\n-  const handleSubtopicSelect = (value: string) => {\n-    setSelectedSubtopicId(value);\n-    setSelectedSubtopic(value);\n-    setCurrentLessonId(null);\n-  };\n-\n-  const handleLessonSelect = async (lessonId: string) => {\n-    try {\n-      // Lock sidebar during selection\n-      setIsSidebarLocked(true);\n-      setIsSidebarCollapsed(false);\n-      setCurrentLessonId(lessonId);\n-      \n-      // 1. Fetch lesson data\n-      const { data: lessonData, error: lessonError } = await supabase\n-        .from('lessons')\n-        .select('*')\n-        .eq('id', lessonId)\n-        .single();\n-\n-      if (lessonError) throw lessonError;\n-\n-      // 2. Fetch questions with exercise prompts\n-      const { data: questionsData, error: questionsError } = await supabase\n-        .from('questions')\n-        .select(`\n-          *,\n-          exercise_prompts (*)\n-        `)\n-        .eq('lesson_id', lessonId);\n-\n-      if (questionsError) throw questionsError;\n-\n-      // 3. Fetch activities - removed order_index\n-      const { data: activitiesData, error: activitiesError } = await supabase\n-        .from('activities')\n-        .select('*')\n-        .eq('lesson_id', lessonId);\n-\n-      if (activitiesError) throw activitiesError;\n-\n-      // Format questions with their exercise prompts\n-      const formattedQuestions = questionsData?.map(q => ({\n-        ...q,\n-        data: q.data || {},\n-        exercisePrompts: q.exercise_prompts || []\n-      })) || [];\n-\n-      // Set all states\n-      setLessonTitle(lessonData.title || '');\n-      setLessonContent(lessonData.content || '');\n-      setQuestions(formattedQuestions);\n-      setActivities(activitiesData || []);\n-\n-      // After successful load, unlock sidebar and allow collapse\n-      setTimeout(() => {\n-        setIsSidebarLocked(false);\n-        if (!isSidebarLocked) {\n-          setIsSidebarCollapsed(true);\n-        }\n-      }, 300);\n-\n-    } catch (error) {\n-      console.error('Error loading lesson:', error);\n-      toast.error('Failed to load lesson');\n-      // Reset states on error\n-      setLessonTitle('');\n-      setLessonContent('');\n-      setQuestions([]);\n-      setActivities([]);\n-    }\n-    if (!isSidebarLocked) {\n-      setIsSidebarCollapsed(true);\n-    }\n-  };\n-\n-  // Update the expansion handlers\n-  const handleTopicExpand = async (topicId: string) => {\n-    setExpandedTopic(expandedTopic === topicId ? null : topicId);\n-    setSelectedTopicId(topicId);\n-    \n-    // Load subtopics when topic is expanded\n-    if (topicId) {\n-      setIsLoadingSubtopics(true);\n-      try {\n-        const { data: subtopicsData, error } = await supabase\n-          .from('subtopics')\n-          .select('*')\n           .eq('topic_id', topicId)\n           .order('order_index');\n \n         if (error) throw error;\n"
                },
                {
                    "date": 1739968393507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -418,9 +418,894 @@\n       .eq('topic_id', topicId);\n       \n     return !subtopics || subtopics.every(subtopic => \n       !subtopic.lessons?.some(lesson => lesson.questions?.length)\n+    );\n+  };\n+\n+  // Event handlers\n+  const handleQuestionTypeChange = useCallback((type: string) => {\n+    if (isQuestionType(type)) {\n+      setSelectedQuestionType(type);\n+    }\n+  }, []);\n+\n+  const handleAddQuestion = useCallback(() => {\n+    if (!selectedQuestionType || !isQuestionType(selectedQuestionType)) return;\n+\n+    const defaultData = QUESTION_TYPES[selectedQuestionType].defaultData;\n+    const newQuestion: Question = {\n+      id: crypto.randomUUID(),\n+      type: selectedQuestionType,\n+      //data: {},\n+      title: 'New Question',\n+      content: '',\n+      lesson_id: currentLessonId || '',\n+      metadata: {},\n+      data: {\n+        ...defaultData,\n+        prompt: '',\n+        teacher_script: '',\n+        followup_prompt: [],\n+        sample_answer: ''\n+      },\n+      correct_answer: '',\n+      exercisePrompts: [],\n+      isDraft: true\n+    };\n+\n+    setQuestions(prev => [...prev, newQuestion]);\n+    setQuestionSaveStatuses(prev => [\n+      ...prev,\n+      { id: newQuestion.id, status: 'draft' }\n+    ]);\n+    setSelectedQuestionType('');\n+  }, [selectedQuestionType, currentLessonId]);\n+\n+  const handleRemoveQuestion = async (index: number) => {\n+    try {\n+      const questionToDelete = questions[index];\n+      \n+      // Delete related exercise prompts first\n+      const { error: promptError } = await supabase\n+        .from('exercise_prompts')\n+        .delete()\n+        .eq('question_id', questionToDelete.id);\n+\n+      if (promptError) throw promptError;\n+\n+      // Then delete the question\n+      const { error: questionError } = await supabase\n+        .from('questions')\n+        .delete()\n+        .eq('id', questionToDelete.id);\n+\n+      if (questionError) throw questionError;\n+\n+      // Update local state\n+      const newQuestions = questions.filter((_, i) => i !== index);\n+      setQuestions(newQuestions);\n+      \n+      toast.success('Question and related prompts deleted successfully');\n+    } catch (error) {\n+      console.error('Error deleting question:', error);\n+      toast.error('Failed to delete question and prompts');\n+    }\n+  };\n+\n+  const handleUpdateQuestion = useCallback(async (index: number, updatedQuestion: Question) => {\n+    const newQuestions = [...questions];\n+    newQuestions[index] = updatedQuestion;\n+    setQuestions(newQuestions);\n+    setQuestionSaveStatuses(prev => prev.map((status, i) => \n+      i === index ? { ...status, status: 'draft' } : status\n+    ));\n+  }, [questions]);\n+\n+  const handleAddExercisePrompt = useCallback((questionIndex: number) => {\n+    setQuestions(prev => prev.map((question, i) => {\n+      if (i === questionIndex) {\n+        return {\n+          ...question,\n+          exercisePrompts: [\n+            ...question.exercisePrompts,\n+            {\n+              id: crypto.randomUUID(),\n+              text: '',\n+              media: '',\n+              type: 'image',\n+              narration: 'Your turn',\n+              saytext: 'Say: ',\n+              metadata: {\n+                estimatedTime: 0\n+              },\n+              created_at: new Date().toISOString(),\n+              updated_at: new Date().toISOString()\n+            }\n+          ]\n+        };\n+      }\n+      return question;\n+    }));\n+  }, []);\n+\n+  const handleRemoveExercisePrompt = useCallback((questionIndex: number, promptIndex: number) => {\n+    setQuestions(prev => prev.map((question, i) => {\n+      if (i === questionIndex) {\n+        return {\n+          ...question,\n+          exercisePrompts: question.exercisePrompts.filter((_, j) => j !== promptIndex)\n+        };\n+      }\n+      return question;\n+    }));\n+  }, []);\n+\n+  const handleExercisePromptChange = useCallback(async (\n+    questionIndex: number,\n+    promptIndex: number,\n+    updatedPrompt: ExercisePrompt\n+  ) => {\n+    try {\n+      const promptUpdate = {\n+        id: updatedPrompt.id,\n+        question_id: updatedPrompt.question_id,\n+        text: updatedPrompt.text,\n+        type: updatedPrompt.type,\n+        narration: updatedPrompt.narration,\n+        saytext: updatedPrompt.saytext,\n+        media: updatedPrompt.media,\n+        // Remove order_index as it's not in schema\n+        created_at: new Date().toISOString()\n+      };\n+\n+      const { error: promptError } = await supabase\n+        .from('exercise_prompts')\n+        .upsert(promptUpdate)\n+        .select();\n+\n+      if (promptError) throw promptError;\n+\n+      // Update local state\n+      setQuestions(prev => prev.map((question, i) => {\n+        if (i === questionIndex) {\n+          const newPrompts = [...question.exercisePrompts];\n+          newPrompts[promptIndex] = updatedPrompt;\n+          return { ...question, exercisePrompts: newPrompts };\n+        }\n+        return question;\n+      }));\n+\n+    } catch (error) {\n+      console.error('Error saving prompt:', error);\n+      toast.error('Failed to save prompt');\n+    }\n+  }, []);\n+\n+  const handleAddActivity = useCallback(() => {\n+    const newActivity: Activity = {\n+      id: crypto.randomUUID(),\n+      lesson_id: currentLessonId || '',\n+      created_at: new Date().toISOString(),\n+      type: 'practice',\n+      title: '',\n+      name: '',\n+      instructions: '',\n+      media: [],\n+      data: {\n+        prompt: '',\n+        teacherScript: '',\n+        media: []\n+      }\n+    };\n+    setActivities(prev => [...prev, newActivity]);\n+  }, [currentLessonId]);\n+\n+  const handleUpdateActivity = useCallback((index: number, updatedActivity: Activity) => {\n+    setActivities(prev => prev.map((activity, i) => i === index ? updatedActivity : activity));\n+  }, []);\n+\n+  const handleRemoveActivity = useCallback((index: number) => {\n+    setActivities(prev => prev.filter((_, i) => i !== index));\n+  }, []);\n+\n+  const handleExercisePromptUpdate = useCallback((questionIndex: number, promptIndex: number, updatedPrompt: ExercisePrompt) => {\n+    const updatedQuestions = [...questions];\n+    updatedQuestions[questionIndex].exercisePrompts[promptIndex] = updatedPrompt;\n+    handleUpdateQuestion(questionIndex, updatedQuestions[questionIndex]);\n+  }, [questions, handleUpdateQuestion]);\n+\n+  const handleQuestionDataChange = useCallback((questionIndex: number, field: string, value: string) => {\n+    setQuestions(prev => prev.map((q, i) => \n+      i === questionIndex \n+        ? { \n+            ...q, \n+            data: { \n+              prompt: q.data?.prompt || '',\n+              teacherScript: q.data?.teacherScript || '',\n+              ...q.data,\n+              [field]: value \n+            } \n+          }\n+        : q\n+    ));\n+  }, []);\n+\n+  const [isSaving, setIsSaving] = useState(false);\n+\n+  const handleSaveLesson = async () => {\n+    try {\n+      if (!currentLessonId || !selectedSubtopicId) {\n+        toast.error('Please select a subtopic and lesson first');\n+        return;\n+      }\n+\n+      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\n+      if (sessionError) throw sessionError;\n+      \n+      if (!session?.user) {\n+        toast.error('Please sign in to save lessons');\n+        return;\n+      }\n+\n+      // Get user's role from session\n+      const userRole = session.user.user_metadata?.role;\n+      console.log('Current user role:', userRole);\n+      console.log('📝 Saving content heading:', {\n+        contentHeading,\n+        currentLessonId,\n+        selectedSubtopicId,\n+        timestamp: new Date().toISOString()\n+      });\n+\n+      // Create metadata object\n+      const lessonMetadata = {\n+        lastEdited: new Date().toISOString(),\n+        version: 1,\n+        status: 'draft' \n+      };\n+\n+      // Complete lesson data with all fields\n+      const lessonData = {\n+        id: currentLessonId,\n+        title: lessonTitle,\n+        content: lessonContent,\n+        metadata: lessonMetadata, // Supabase will automatically handle JSON conversion\n+        content_type: 'html',\n+        lesson_type: 'lesson',\n+        grade_id: selectedGradeId,\n+        topic_id: selectedTopicId,\n+        subtopic_id: selectedSubtopicId,\n+        user_id: session.user.id,\n+        updated_at: new Date().toISOString(),\n+        role: userRole, // Include role in the payload\n+        description: '',\n+        prerequisites: [],\n+        media_type: 'image',\n+        media_url: '',\n+        contentheading: contentHeading || ''\n+      };\n+\n+      console.log('📦 Data being sent to Supabase:', lessonData);\n+\n+      // Save lesson with all fields\n+      const { data, error: lessonError } = await supabase\n+        .from('lessons')\n+        .upsert(lessonData, { \n+          onConflict: 'id'\n+        })\n+        .select();\n+\n+      if (lessonError) throw lessonError;\n+\n+      // 2. Save lesson content\n+      const { data: existingContent } = await supabase\n+        .from('lesson_content')\n+        .select('id')\n+        .eq('lesson_id', currentLessonId)\n+        .single();\n+\n+      const contentMetadata = {\n+        lastEdited: new Date().toISOString(),\n+        version: 1,\n+        status: 'draft'\n+      };\n+\n+      const contentUpdate = {\n+        id: existingContent?.id || crypto.randomUUID(),\n+        lesson_id: currentLessonId,\n+        content: [lessonContent],\n+        metadata: contentMetadata, // Supabase will automatically handle JSON conversion\n+        content_type: 'html',\n+        user_id: session.user.id,\n+        updated_at: new Date().toISOString(),\n+        created_at: new Date().toISOString()\n+      };\n+\n+      const { error: contentError } = await supabase\n+        .from('lesson_content')\n+        .upsert(contentUpdate, { onConflict: 'id' });\n+\n+      if (contentError) throw contentError;\n+\n+      // 3. Save questions\n+      for (const question of questions) {\n+        const questionData = {\n+          id: question.id,\n+          lesson_id: currentLessonId,\n+          type: question.type,\n+          title: question.title,\n+          metadata: question.metadata,\n+          data: question.data,\n+          updated_at: new Date().toISOString(),\n+          user_id: session.user.id\n+        };\n+\n+        const { error: questionError } = await supabase\n+          .from('questions')\n+          .upsert(questionData, { onConflict: 'id' });\n+\n+        if (questionError) throw questionError;\n+\n+        //4. Save exercise prompts for this question\n+        if (question.exercisePrompts) {\n+          for (const prompt of question.exercisePrompts) {\n+            const promptData = {\n+              id: prompt.id,\n+              question_id: question.id,\n+              text: prompt.text,\n+              media: prompt.media,\n+              type: prompt.type,\n+              narration: prompt.narration,\n+              saytext: prompt.saytext,\n+              user_id: session.user.id,\n+              updated_at: new Date().toISOString()\n+            };\n+\n+            const { error: promptError } = await supabase\n+              .from('exercise_prompts')\n+              .upsert(promptData, { onConflict: 'id' });\n+\n+            if (promptError) throw promptError;\n+          }\n+        }\n+      }\n+\n+      // 5. Save activities\n+      if (activities.length > 0) {\n+        const activitiesData = activities.map(activity => ({\n+          id: activity.id,\n+          lesson_id: currentLessonId,\n+          type: activity.type,\n+          title: activity.title,\n+          name: activity.name,\n+          instructions: activity.instructions,\n+          media: activity.media,\n+          data: activity.data,\n+          created_at: new Date().toISOString()\n+        }));\n+\n+        const { error: activitiesError } = await supabase\n+          .from('activities')\n+          .upsert(activitiesData, { onConflict: 'id' });\n+\n+        if (activitiesError) throw activitiesError;\n+      }\n+\n+      // After successful save\n+      console.log('✅ Content heading saved successfully:', {\n+        contentHeading,\n+        lessonId: currentLessonId,\n+        timestamp: new Date().toISOString()\n+      });\n+\n+      toast.success('Lesson saved successfully');\n+    } catch (err) {\n+      const error = err as PostgrestError;\n+      console.error('❌ Error saving content heading:', {\n+        error: error.message,\n+        contentHeading,\n+        lessonContent,\n+        lessonId: currentLessonId,\n+        timestamp: new Date().toISOString()\n+      });\n+      toast.error(`Failed to save lesson: ${error.message}`);\n+\n+\n+    }\n+  };\n+\n+  const handleSaveQuestion = async (question: Question, index: number) => {\n+    const loadingToast = toast.loading(`Saving question ${index + 1}...`);\n+    \n+    try {\n+      const { data: { session } } = await supabase.auth.getSession();\n+      if (!session?.user) {\n+        toast.error('Please sign in to save question', { id: loadingToast });\n+        return;\n+      }\n+\n+      // Save question\n+      const questionData = {\n+        id: question.id,\n+        lesson_id: currentLessonId,\n+        type: question.type,\n+        title: question.title,\n+        metadata: question.metadata,\n+        data: {\n+          prompt: question.data?.prompt ?? '',\n+          teacherScript: question.data?.teacherScript ?? '',\n+          followup_prompt: question.data?.followup_prompt ?? [],\n+          sampleAnswer: question.data?.sampleAnswer || undefined,  // Convert null to undefined\n+          answer: question.data?.answer || undefined  // Convert null to undefined\n+        } as const,\n+        user_id: session.user.id,\n+        updated_at: new Date().toISOString()\n+      };\n+\n+      const { error: questionError } = await supabase\n+        .from('questions')\n+        .upsert(questionData, { onConflict: 'id' });\n+\n+      if (questionError) throw questionError;\n+\n+      // Save exercise prompts if they exist\n+      if (question.exercisePrompts?.length) {\n+        for (const prompt of question.exercisePrompts) {\n+          const promptData = {\n+            id: prompt.id,\n+            question_id: question.id,\n+            text: prompt.text,\n+            type: prompt.type,\n+            narration: prompt.narration,\n+            saytext: prompt.saytext,\n+            media: prompt.media,\n+            user_id: session.user.id,\n+            updated_at: new Date().toISOString()\n+          };\n+\n+          const { error: promptError } = await supabase\n+            .from('exercise_prompts')\n+            .upsert(promptData, { onConflict: 'id' });\n+\n+          if (promptError) throw promptError;\n+        }\n+      }\n+\n+      toast.success(`Question ${index + 1} saved successfully`, { id: loadingToast });\n+    } catch (error) {\n+      console.error('Error saving question:', error);\n+      toast.error(`Failed to save question ${index + 1}`, { id: loadingToast });\n+    }\n+  };\n+\n+  const handleSaveActivity = async (activity: Activity) => {\n+    try {\n+      await contentService.saveActivity(activity);\n+      toast.success('Activity saved');\n+    } catch (error) {\n+      console.error('Failed to save activity:', error);\n+      toast.error('Failed to save activity');\n+    }\n+  };\n+\n+  // Effects\n+  useEffect(() => {\n+    const fetchGrades = async () => {\n+      try {\n+        const { data, error } = await supabase\n+          .from('grades')\n           .select('*')\n+          .order('name');\n+\n+        if (error) {\n+          console.error('Supabase error:', error);\n+          throw error;\n+        }\n+\n+        if (!data) {\n+          throw new Error('No data returned from Supabase');\n+        }\n+\n+        // Map the grades to match your interface\n+        const validGrades = data.map((grade: any) => ({\n+          _id: grade.id,\n+          id: grade.id,\n+          name: grade.name,\n+          level: grade.level || 0,  // Add default value if not provided\n+          orderIndex: grade.order_index || 0,  // Add default value if not provided\n+          topics: []\n+        }));\n+        \n+        setGrades(validGrades);\n+      } catch (error) {\n+        console.error('Error fetching grades:', error);\n+        toast.error('Failed to fetch grades');\n+      }\n+    };\n+\n+    fetchGrades();\n+  }, []);\n+\n+  // Topic Selection\n+  useEffect(() => {\n+    const fetchTopics = async () => {\n+      if (!selectedGradeId) return;\n+      \n+      try {\n+        const { data, error } = await supabase\n+          .from('topics')\n+          .select('*')\n+          .eq('grade_id', selectedGradeId)\n+          .order('title');\n+\n+        if (error) {\n+          throw error;\n+        }\n+\n+        // Map the topics to match your interface\n+        const validTopics = (data || []).map((topic: any) => ({\n+          _id: topic.id,\n+          id: topic.id,\n+          name: topic.title,\n+          title: topic.title,\n+          grade_id: topic.grade_id,\n+          subtopics: []\n+        }));\n+        \n+        setTopics(validTopics);\n+      } catch (error) {\n+        console.error('Error fetching topics:', error);\n+        toast.error('Failed to fetch topics');\n+      }\n+    };\n+\n+    fetchTopics();\n+  }, [selectedGradeId]);\n+\n+  // Subtopic Selection\n+  useEffect(() => {\n+    const fetchSubtopics = async () => {\n+      if (!selectedTopicId) return;\n+      \n+      try {\n+        // Use content service to fetch subtopics\n+        const subtopicsData = await contentService.fetchSubtopics(selectedTopicId);\n+        console.log('Fetched subtopics:', subtopicsData);\n+\n+        const validSubtopics = subtopicsData.map((subtopic: any) => ({\n+          id: subtopic.id,\n+          title: subtopic.title,\n+          description: subtopic.description,\n+          topic_id: subtopic.topic_id,\n+          lessons: [],\n+          order_index: subtopicsData.length\n+        }));\n+        \n+        setSubtopics(validSubtopics);\n+        \n+        // Update global state\n+        if (selectedSubtopic) {\n+          setSelectedSubtopic(selectedSubtopic);\n+        }\n+      } catch (err) {\n+        const error = err as Error;\n+        console.error('Error fetching subtopics:', error);\n+        toast.error('Failed to fetch subtopics');\n+      }\n+    };\n+\n+    fetchSubtopics();\n+  }, [selectedTopicId, selectedSubtopic, setSelectedSubtopic]);\n+\n+  // Add effect to monitor subtopics state\n+  useEffect(() => {\n+    console.log('Current subtopics state:', subtopics);\n+  }, [subtopics]);\n+\n+  // Add fetchLessons function\n+  const fetchLessons = useCallback(async () => {\n+    if (!selectedSubtopicId) return;\n+    try {\n+      const { data, error } = await supabase\n+        .from('lessons')\n+        .select('*')\n+        .eq('subtopic_id', selectedSubtopicId)\n+        .order('title');\n+\n+      if (error) {\n+        throw error;\n+      }\n+      \n+      // Map the lessons to ensure they have _id\n+      const validLessons = (data || []).map((lesson: any) => ({\n+        ...lesson,\n+        _id: lesson._id || lesson.id, // Use _id if available, otherwise use id\n+        title: lesson.title || 'Untitled Lesson'\n+      })).filter((lesson: any) => lesson._id); // Only include lessons with valid IDs\n+      \n+      setLessons(validLessons);\n+    } catch (error) {\n+      console.error('Error fetching lessons:', error);\n+      toast.error('Failed to fetch lessons');\n+    }\n+  }, [selectedSubtopicId]);\n+  // Add loadLessonContent function\n+  const isLoading = useRef(false);\n+  const loadLessonContent = useCallback(async (lessonId: string) => {\n+    // Prevent multiple simultaneous loads\n+    if (isLoading.current) return;\n+    isLoading.current = true;\n+\n+    const controller = new AbortController();\n+\n+    try {\n+      // Clear existing content first\n+      setLessonTitle('');\n+      setContentHeading('');\n+      setLessonContent('');\n+      setQuestions([]);\n+      \n+      // First fetch lesson data\n+      const { data: lessonData, error: lessonError } = await supabase\n+        .from('lessons')\n+        .select('*')\n+        .eq('id', lessonId)\n+        .single()\n+        \n+\n+      if (lessonError) {\n+        console.error('Lesson fetch error:', lessonError);\n+        throw lessonError;\n+      }\n+\n+      // Set lesson data\n+      setLessonTitle(lessonData.title || '');\n+      setContentHeading(lessonData.content || '');\n+\n+      // Then fetch lesson content with explicit headers\n+      const { data: contentData, error: contentError } = await supabase\n+        .from('lesson_content')\n+        .select('*')\n+        .eq('lesson_id', lessonId)\n+        .order('updated_at', { ascending: false })\n+        .limit(1)\n+        .maybeSingle();\n+\n+      if (contentError) {\n+        console.error('Content fetch error:', contentError);\n+        throw contentError;\n+      }\n+\n+      // Set content if available\n+      if (contentData?.content) {\n+        setLessonContent(typeof contentData.content === 'string' \n+          ? contentData.content \n+          : JSON.stringify(contentData.content)\n+        );\n+      }\n+\n+    } catch (error: unknown) {\n+      if (error instanceof Error && error.name === 'AbortError') {\n+        console.log('Request aborted');\n+        return;\n+      }\n+      console.error('Error loading lesson:', error);\n+      toast.error('Failed to load lesson content');\n+      \n+      // Reset states on error\n+      setLessonTitle('');\n+      setContentHeading('');\n+      setLessonContent('');\n+      setQuestions([]);\n+    } finally {\n+      isLoading.current = false;\n+    }\n+\n+    return () => {\n+      controller.abort();\n+    };\n+  }, []); // Empty dependencies since we're using closure over state setters\n+\n+  // // Add effect for fetching lessons when subtopic changes\n+  useEffect(() => {\n+    if (selectedSubtopicId) {\n+      fetchLessons();\n+    }\n+  }, [selectedSubtopicId, fetchLessons]);\n+\n+  // Add effect for loading lesson content when currentLessonId changes\n+    useEffect(() => {\n+    let isMounted = true;\n+    let timeoutId: NodeJS.Timeout;\n+\n+    const loadContent = async () => {\n+      if (!currentLessonId || !isMounted) return;\n+\n+      // Clear previous timeout if exists\n+      if (timeoutId) clearTimeout(timeoutId);\n+\n+      // Set new timeout for debouncing\n+      timeoutId = setTimeout(() => {\n+        if (isMounted) {\n+          loadLessonContent(currentLessonId);\n+        }\n+      }, 300);\n+    };\n+\n+    loadContent();\n+\n+    // Cleanup function\n+    return () => {\n+      isMounted = false;\n+      if (timeoutId) clearTimeout(timeoutId);\n+      if (isLoading.current) isLoading.current = false;\n+    };\n+  }, [currentLessonId]); // Remove loadLessonContent from dependencies\n+\n+  useEffect(() => {\n+    console.log('Current lessons state:', lessons);\n+  }, [lessons]);\n+\n+    // Add keyboard shortcut for saving\n+  useEffect(() => {\n+    const handleKeyDown = (e: KeyboardEvent) => {\n+      if ((e.ctrlKey || e.metaKey) && e.key === 's') {\n+        e.preventDefault();\n+        handleSaveLesson();\n+      }\n+    };\n+\n+    window.addEventListener('keydown', handleKeyDown);\n+    return () => window.removeEventListener('keydown', handleKeyDown);\n+  }, [handleSaveLesson]);\n+\n+  // Add SaveFeedback component\n+  const SaveFeedback = useCallback(() => {\n+    if (saveProgress === 'idle') return null;\n+\n+    return (\n+    <div className=\"fixed bottom-4 right-4\">\n+      {saveProgress === 'saving' && (\n+        <div className=\"flex items-center gap-2 bg-background border rounded-lg px-4 py-2 shadow-lg\">\n+          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n+          <span className=\"text-sm\">Saving changes...</span>\n+        </div>\n+      )}\n+      {saveProgress === 'saved' && (\n+        <div className=\"flex items-center gap-2 bg-green-500 text-white rounded-lg px-4 py-2 shadow-lg\">\n+          <Check className=\"h-4 w-4\" />\n+          <span className=\"text-sm\">Changes saved</span>\n+        </div>\n+      )}\n+      {saveProgress === 'error' && (\n+        <div className=\"flex items-center gap-2 bg-destructive text-destructive-foreground rounded-lg px-4 py-2 shadow-lg\">\n+          <X className=\"h-4 w-4\" />\n+          <span className=\"text-sm\">Error saving changes</span>\n+        </div>\n+      )}\n+    </div>\n+  );\n+  }, [saveProgress]);\n+\n+  // Update handlers\n+  const handleGradeSelect = (gradeId: string) => {\n+    // Always keep sidebar open during selection\n+    setIsSidebarCollapsed(false);\n+    setIsSidebarLocked(true);\n+    \n+    // Batch state updates\n+    requestAnimationFrame(() => {\n+      setSelectedGradeId(gradeId);\n+      setSelectedGrade(gradeId);\n+      setSelectedTopicId(null);\n+      setSelectedTopic('');\n+      setSelectedSubtopicId(null);\n+      setSelectedSubtopic('');\n+      setCurrentLessonId(null);\n+      \n+      if (isViewMode) {\n+        setExpandedGrade(gradeId);\n+      }\n+    });\n+  };\n+\n+  const handleTopicSelect = (value: string) => {\n+    setSelectedTopicId(value);\n+    setSelectedTopic(value);\n+    setSelectedSubtopicId(null);\n+    setSelectedSubtopic('');\n+    setCurrentLessonId(null);\n+  };\n+\n+  const handleSubtopicSelect = (value: string) => {\n+    setSelectedSubtopicId(value);\n+    setSelectedSubtopic(value);\n+    setCurrentLessonId(null);\n+  };\n+\n+  const handleLessonSelect = async (lessonId: string) => {\n+    try {\n+      // Lock sidebar during selection\n+      setIsSidebarLocked(true);\n+      setIsSidebarCollapsed(false);\n+      setCurrentLessonId(lessonId);\n+      \n+      // 1. Fetch lesson data\n+      const { data: lessonData, error: lessonError } = await supabase\n+        .from('lessons')\n+        .select('*')\n+        .eq('id', lessonId)\n+        .single();\n+\n+      if (lessonError) throw lessonError;\n+\n+      // 2. Fetch questions with exercise prompts\n+      const { data: questionsData, error: questionsError } = await supabase\n+        .from('questions')\n+        .select(`\n+          *,\n+          exercise_prompts (*)\n+        `)\n+        .eq('lesson_id', lessonId);\n+\n+      if (questionsError) throw questionsError;\n+\n+      // 3. Fetch activities - removed order_index\n+      const { data: activitiesData, error: activitiesError } = await supabase\n+        .from('activities')\n+        .select('*')\n+        .eq('lesson_id', lessonId);\n+\n+      if (activitiesError) throw activitiesError;\n+\n+      // Format questions with their exercise prompts\n+      const formattedQuestions = questionsData?.map(q => ({\n+        ...q,\n+        data: q.data || {},\n+        exercisePrompts: q.exercise_prompts || []\n+      })) || [];\n+\n+      // Set all states\n+      setLessonTitle(lessonData.title || '');\n+      setLessonContent(lessonData.content || '');\n+      setQuestions(formattedQuestions);\n+      setActivities(activitiesData || []);\n+\n+      // After successful load, unlock sidebar and allow collapse\n+      setTimeout(() => {\n+        setIsSidebarLocked(false);\n+        if (!isSidebarLocked) {\n+          setIsSidebarCollapsed(true);\n+        }\n+      }, 300);\n+\n+    } catch (error) {\n+      console.error('Error loading lesson:', error);\n+      toast.error('Failed to load lesson');\n+      // Reset states on error\n+      setLessonTitle('');\n+      setLessonContent('');\n+      setQuestions([]);\n+      setActivities([]);\n+    }\n+    if (!isSidebarLocked) {\n+      setIsSidebarCollapsed(true);\n+    }\n+  };\n+\n+  // Update the expansion handlers\n+  const handleTopicExpand = async (topicId: string) => {\n+    setExpandedTopic(expandedTopic === topicId ? null : topicId);\n+    setSelectedTopicId(topicId);\n+    \n+    // Load subtopics when topic is expanded\n+    if (topicId) {\n+      setIsLoadingSubtopics(true);\n+      try {\n+        const { data: subtopicsData, error } = await supabase\n+          .from('subtopics')\n+          .select('*')\n           .eq('topic_id', topicId)\n           .order('order_index');\n \n         if (error) throw error;\n@@ -1279,765 +2164,21 @@\n \n                     {/* Content Tree View in View Mode */}\n                     {isViewMode && expandedGrade && (\n                       <div className=\"mt-4 space-y-4 overflow-y-auto max-h-[calc(100vh-300px)]\">\n-                        {topics.map((topic: Topic) => (\n-                          <Card \n-                            key={topic.id} \n-                            className={cn(\n-                              \"border-l-4 transition-all duration-200 hover:shadow-md\",\n-                              expandedTopic === topic.id \n-                                ? \"border-l-primary bg-accent/5\" \n-                                : \"border-l-primary/40 hover:border-l-primary\"\n-                            )}\n-                          >\n-                            <CardHeader \n-                              className=\"py-3 cursor-pointer select-none\" \n-                              onClick={() => handleTopicExpand(topic.id || '')}\n-                            >\n-                              <div className=\"flex items-center justify-between\">\n+                        {topics.map((topic: Topic) => {\n+                          const topicSubtopics = subtopics.filter(s => s.topic_id === topic.id);\n+                          const hasContent = topicSubtopics.length > 0;\n+                          \n+                          return (\n+                            <Card key={topic.id} className={cn(\n+                              \"border-l-4 transition-all duration-200\",\n+                              !hasContent && \"border-l-destructive/40\",\n+                              expandedTopic === topic.id ? \"border-l-primary\" : \"border-l-primary/40\"\n+                            )}>\n+                              <CardHeader className=\"py-3\">\n                                 <div className=\"flex items-center justify-between\">\n                                   <div className=\"flex items-center gap-2\">\n-                                    <Layers className=\"h-4 w-4 text-primary\" />\n-                                    <h4 className=\"font-medium\">{topic.title}</h4>\n-                                    <Badge variant=\"outline\" className=\"ml-2\">\n-                                      {subtopics.filter(s => s.topic_id === topic.id).length} Subtopics\n-                                    </Badge>\n-                                  </div>\n-                                  <div className=\"flex items-center gap-2\">\n-                                    <Button \n-                                      variant=\"ghost\" \n-                                      size=\"sm\"\n-                                      onClick={(e) => {\n-                                        e.stopPropagation();\n-                                        setItemToDelete({\n-                                          id: topic.id,\n-                                          type: 'topic',\n-                                          title: topic.title\n-                                        });\n-                                        setDeleteDialogOpen(true);\n-                                      }}\n-                                    >\n-                                      <Trash className=\"h-4 w-4\" />\n-                                    </Button>\n-                                  </div>\n-                                </div>\n-                                <div className=\"flex items-center gap-2\">\n-                                  <ChevronDown className={cn(\n-                                    \"h-4 w-4 transition-transform duration-200\",\n-                                    expandedTopic === topic.id ? \"rotate-0\" : \"-rotate-90\"\n-                                  )} />\n-                                </div>\n-                              </div>\n-                            </CardHeader>\n-\n-                            <AnimatePresence>\n-                              {expandedTopic === topic.id && (\n-                                <motion.div\n-                                  initial={{ height: 0, opacity: 0 }}\n-                                  animate={{ height: \"auto\", opacity: 1 }}\n-                                  exit={{ height: 0, opacity: 0 }}\n-                                  transition={{ duration: 0.2 }}\n-                                >\n-                                  <CardContent className=\"pt-0 pb-2\">\n-                                    <div className=\"pl-4 space-y-2\">\n-                                      {isLoadingSubtopics ? (\n-                                        <div className=\"flex items-center justify-center py-4\">\n-                                          <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\n-                                        </div>\n-                                      ) : (\n-                                        subtopics\n-                                          .filter(subtopic => subtopic.topic_id === topic.id)\n-                                          .map((subtopic: SubTopic) => (\n-                                            <div \n-                                              key={subtopic.id}\n-                                              className={cn(\n-                                                \"rounded-lg border transition-colors\",\n-                                                expandedSubtopic === subtopic.id \n-                                                  ? \"bg-accent/10 border-primary/20\" \n-                                                  : \"hover:bg-accent/5\"\n-                                              )}\n-                                            >\n-                                              <div \n-                                                className=\"p-3 cursor-pointer\"\n-                                                onClick={() => handleSubtopicExpand(subtopic.id || '')}\n-                                              >\n-                                                <div className=\"flex items-center justify-between py-2 cursor-pointer hover:bg-accent/50 rounded-md px-2\">\n-                                                  <div className=\"flex items-center gap-2\">\n-                                                    <BookOpen className=\"h-4 w-4 text-primary\" />\n-                                                    <span className=\"text-sm font-medium\">{subtopic.name}</span>\n-                                                    <Badge variant=\"outline\" className=\"ml-2\">\n-                                                      {lessons.filter(l => l.subtopic_id === subtopic.id).length} Lessons\n-                                                    </Badge>\n-                                                  </div>\n-                                                  <div className=\"flex items-center gap-2\">\n-                                                    <Button \n-                                                      variant=\"ghost\" \n-                                                      size=\"sm\"\n-                                                      onClick={(e) => {\n-                                                        e.stopPropagation();\n-                                                        setItemToDelete({\n-                                                          id: subtopic.id,\n-                                                          type: 'subtopic',\n-                                                          title: subtopic.title\n-                                                        });\n-                                                        setDeleteDialogOpen(true);\n-                                                      }}\n-                                                    >\n-                                                      <Trash className=\"h-4 w-4\" />\n-                                                    </Button>\n-                                                    <ChevronDown className={cn(\n-                                                      \"h-4 w-4 transition-transform duration-200\",\n-                                                      expandedSubtopic === subtopic.id ? \"rotate-0\" : \"-rotate-90\"\n-                                                    )} />\n-                                                  </div>\n-                                                </div>\n-\n-                                                <AnimatePresence>\n-                                                  {expandedSubtopic === subtopic.id && (\n-                                                    <motion.div\n-                                                      initial={{ height: 0, opacity: 0 }}\n-                                                      animate={{ height: \"auto\", opacity: 1 }}\n-                                                      exit={{ height: 0, opacity: 0 }}\n-                                                      transition={{ duration: 0.2 }}\n-                                                    >\n-                                                      <div className=\"px-3 pb-3\">\n-                                                        <div className=\"space-y-2\">\n-                                                          {isLoadingLessons ? (\n-                                                            <div className=\"flex items-center justify-center py-4\">\n-                                                              <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\n-                                                            </div>\n-                                                          ) : (\n-                                                            lessons\n-                                                              .filter(lesson => lesson.subtopic_id === subtopic.id)\n-                                                              .map((lesson: Lesson) => (\n-                                                                <div\n-                                                                  key={lesson.id}\n-                                                                  onClick={() => handleLessonSelect(lesson.id || '')}\n-                                                                  className={cn(\n-                                                                    \"flex items-center gap-3 p-2 rounded-md cursor-pointer transition-colors\",\n-                                                                    \"hover:bg-accent\",\n-                                                                    currentLessonId === lesson.id && \"bg-accent\"\n-                                                                  )}\n-                                                                >\n-                                                                  <div className=\"flex items-center gap-2 flex-1\">\n-                                                                    <div className=\"flex h-8 w-8 items-center justify-center rounded-md border bg-background\">\n-                                                                      <BookOpen className=\"h-4 w-4 text-primary\" />\n-                                                                    </div>\n-                                                                    <div className=\"flex flex-col\">\n-                                                                      <span className=\"text-sm font-medium\">{lesson.title}</span>\n-                                                                      <span className=\"text-xs text-muted-foreground\">\n-                                                                        {lesson.duration} mins • {lesson.questions?.length || 0} Questions\n-                                                                      </span>\n-                                                                    </div>\n-                                                                  </div>\n-                                                                  <Button \n-                                                                    variant=\"ghost\" \n-                                                                    size=\"sm\"\n-                                                                    onClick={(e) => {\n-                                                                      e.stopPropagation();\n-                                                                      setItemToDelete({\n-                                                                        id: lesson.id,\n-                                                                        type: 'lesson',\n-                                                                        title: lesson.title\n-                                                                      });\n-                                                                      setDeleteDialogOpen(true);\n-                                                                    }}\n-                                                                  >\n-                                                                    <Trash className=\"h-4 w-4\" />\n-                                                                  </Button>\n-                                                                </div>\n-                                                              ))\n-                                                          )}\n-                                                        </div>\n-                                                      </div>\n-                                                    </motion.div>\n-                                                  )}\n-                                                </AnimatePresence>\n-                                              </div>\n-                                            </div>\n-                                          ))\n-                                      )}\n-                                    </div>\n-                                  </CardContent>\n-                                </motion.div>\n-                              )}\n-                            </AnimatePresence>\n-                          </Card>\n-                        ))}\n-                      </div>\n-                    )}\n-\n-                    {/* Regular Edit Mode Content */}\n-                    {!isViewMode && (\n-                      <>\n-                        {/* Existing Topic, Subtopic, and Lesson Selection UI */}\n-                      {/* Topic Selection */}\n-                        {selectedGradeId && (\n-                      <div className=\"space-y-2\">\n-                        <div className=\"flex items-center justify-between\">\n-                        <Label htmlFor=\"topic-select\">Topic</Label>\n-                        </div>\n-                        <Select \n-                              value={selectedTopicId || ''} \n-                              onValueChange={handleTopicSelect}\n-                        >\n-                          <SelectTrigger id=\"topic-select\" className=\"w-full\">\n-                            <SelectValue placeholder=\"Select Topic\" />\n-                          </SelectTrigger>\n-                          <SelectContent>\n-                                {topics.map((topic: Topic) => (\n-                                  <SelectItem \n-                                    key={`topic-${topic.id || 'new'}`} \n-                                    value={topic.id || ''}\n-                                  >\n-                                  <div className=\"flex items-center gap-2\">\n-                                  <Layers className=\"h-4 w-4 text-primary\" />\n-                                    {topic.title}\n-                                  </div>\n-                                </SelectItem>\n-                              ))}\n-                          </SelectContent>\n-                        </Select>\n-                        <Button \n-                          variant=\"outline\" \n-                          size=\"sm\" \n-                          className=\"w-full gap-2\"\n-                          onClick={() => setModalState({ ...modalState, showAddTopic: true })}\n-                        >\n-                          <Plus className=\"h-4 w-4\" />\n-                          Add New Topic\n-                        </Button>\n-                      </div>\n-                    )}\n-\n-                    {/* Subtopic Selection */}\n-                        {selectedTopicId && (\n-                      <div className=\"space-y-2\">\n-                        <div className=\"flex items-center justify-between\">\n-                        <Label htmlFor=\"subtopic-select\">Subtopic</Label>\n-                        </div>\n-                        <Select \n-                              value={selectedSubtopicId || ''} \n-                              onValueChange={handleSubtopicSelect}\n-                        >\n-                          <SelectTrigger id=\"subtopic-select\" className=\"w-full\">\n-                            <SelectValue placeholder=\"Select Subtopic\" />\n-                          </SelectTrigger>\n-                          <SelectContent>\n-                                {subtopics\n-                                  .filter(subtopic => subtopic.id)\n-                                  .map((subtopic, index) => (\n-                                    <SelectItem \n-                                      key={subtopic.id || `subtopic-${index}`}\n-                                      value={subtopic.id || ''}\n-                                    >\n-                                      {subtopic.title || 'Untitled Subtopic'}\n-                                    </SelectItem>\n-                                  ))}\n-                          </SelectContent>\n-                        </Select>\n-                        {!isViewMode && (\n-                          <Button \n-                            variant=\"outline\" \n-                            size=\"sm\" \n-                            className=\"w-full gap-2\"\n-                            onClick={() => setModalState({ ...modalState, showAddSubtopic: true })}\n-                          >\n-                            <Plus className=\"h-4 w-4\" />\n-                            Add New Subtopic\n-                          </Button>\n-                        )}\n-                      </div>\n-                    )}\n-\n-                    {/* Lesson Selection */}\n-                        {selectedSubtopicId && (\n-                      <div className=\"space-y-2\">\n-                        <div className=\"flex items-center justify-between\">\n-                          <Label htmlFor=\"lesson-select\">Lesson</Label>\n-                        </div>\n-                          <Select \n-                            value={currentLessonId || ''} \n-                            onValueChange={handleLessonSelect}\n-                            onOpenChange={(open) => {\n-                              setIsDropdownOpen(open);\n-                              if (open) {\n-                                setIsSidebarCollapsed(false);\n-                                setIsSidebarLocked(true);\n-                              } else {\n-                                // Small delay before unlocking to prevent immediate collapse\n-                                setTimeout(() => {\n-                                  setIsSidebarLocked(false);\n-                                }, 100);\n-                              }\n-                            }}\n-                          >\n-                            <SelectTrigger \n-                              id=\"lesson-select\" \n-                              className=\"w-full\"\n-                              onClick={(e) => {\n-                                e.stopPropagation();\n-                                setIsSidebarCollapsed(false);\n-                                setIsSidebarLocked(true);\n-                              }}\n-                            >\n-                              <SelectValue placeholder=\"Select Lesson\" />\n-                            </SelectTrigger>\n-                            <SelectContent>\n-                              {lessons\n-                                .filter((lesson): lesson is Lesson => lesson !== undefined && lesson !== null)\n-                                .map((lesson: Lesson) => (\n-                                  <SelectItem \n-                                    key={`lesson-${lesson.id || 'new'}`} \n-                                    value={lesson.id || ''}\n-                                  >\n-                                    <div className=\"flex items-center gap-2\">\n-                                      <BookOpen className=\"h-4 w-4 text-primary\" />\n-                                      {lesson.title || 'Untitled Lesson'}\n-                                    </div>\n-                                  </SelectItem>\n-                                ))}\n-                            </SelectContent>\n-                          </Select>\n-                    <Button \n-                            variant=\"outline\" \n-                            size=\"sm\" \n-                            className=\"w-full gap-2\"\n-                        onClick={() => setModalState({ ...modalState, showAddLesson: true })}\n-                          >\n-                            <Plus className=\"h-4 w-4\" />\n-                            Add New Lesson\n-                    </Button>\n-                      </div>\n-                        )}\n-                      </>\n-                    )}\n-                  </CardContent>\n-                </Card>\n-              </div>\n-\n-              {/* Collapsed view */}\n-              {isSidebarCollapsed && (\n-                <div className=\"absolute inset-0 flex flex-col items-center pt-12 gap-4\">\n-                  <BookOpen className=\"h-6 w-6 text-muted-foreground\" />\n-                  <div className=\"w-px h-full bg-border\" />\n-                </div>\n-              )}\n-            </Card>\n-          </div>\n-        \n-\n-          {/* Right Content Area */}\n-          <div className=\"flex-1 overflow-y-auto\">\n-            {isNavigating ? (\n-              <div className=\"flex items-center justify-center h-[400px]\">\n-                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n-                <span className=\"ml-3\">Loading...</span>\n-              </div>\n-            ) : (\n-              <>\n-                {!selectedGradeId ? (\n-                  // Question Types Display Section\n-                  <div className=\"space-y-6\">\n-                    <Card>\n-                      <CardHeader>\n-                        <div className=\"flex items-center justify-between\">\n-                          <div>\n-                            <CardTitle className=\"text-xl font-semibold\">Available Question Types</CardTitle>\n-                            <CardDescription>Browse through different question formats and examples</CardDescription>\n-                          </div>\n-                          <TooltipProvider>\n-                            <Tooltip>\n-                              <TooltipTrigger>\n-                                <HelpCircle className=\"h-5 w-5 text-muted-foreground\" />\n-                              </TooltipTrigger>\n-                              <TooltipContent>\n-                                <p>Click on each type to see detailed examples</p>\n-                              </TooltipContent>\n-                            </Tooltip>\n-                          </TooltipProvider>\n-                        </div>\n-                      </CardHeader>\n-                      <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n-                        {Object.entries(QUESTION_TYPES).map(([type, details]) => (\n-                          <Card key={type} className=\"cursor-pointer hover:bg-accent/50 transition-colors\">\n-                            <CardHeader className=\"p-4\">\n-                              <div className=\"flex items-center justify-between mb-2\">\n-                                <Badge variant=\"outline\" className=\"bg-primary/5 text-lg\">\n-                                  {details.label}\n-                                </Badge>\n-                              </div>\n-                              <CardDescription className=\"text-sm\">\n-                                {details.description || 'No description available'}\n-                              </CardDescription>\n-                              <div className=\"mt-4\">\n-                                <div className=\"text-sm font-medium mb-2\">Example:</div>\n-                                <div className=\"p-3 rounded-md bg-muted/50 text-sm\">\n-                                  {type === 'multiple-choice' && (\n-                                    <>\n-                                      <div className=\"font-medium mb-2\">Q: What is the capital of France?</div>\n-                                      <div className=\"space-y-1 pl-4\">\n-                                        <div>A) Paris</div>\n-                                        <div>B) London</div>\n-                                        <div>C) Berlin</div>\n-                                        <div>D) Madrid</div>\n-                                      </div>\n-                                    </>\n-                                  )}\n-                                  {type === 'fill-in-blank' && (\n-                                    <div className=\"space-y-2\">\n-                                      <div>Complete the sentence:</div>\n-                                      <div>The sun rises in the <span className=\"bg-primary/20 px-2 rounded\">_____</span> and sets in the <span className=\"bg-primary/20 px-2 rounded\">_____</span>.</div>\n-                                    </div>\n-                                  )}\n-                                  {type === 'true-false' && (\n-                                    <div className=\"space-y-2\">\n-                                      <div className=\"font-medium\">Statement:</div>\n-                                      <div>The Earth is flat.</div>\n-                                      <div className=\"mt-2\">\n-                                        <Badge variant=\"outline\" className=\"mr-2\">True</Badge>\n-                                        <Badge variant=\"outline\">False</Badge>\n-                                      </div>\n-                                    </div>\n-                                  )}\n-                                  {type === 'matching' && (\n-                                    <div className=\"space-y-2\">\n-                                      <div className=\"font-medium mb-2\">Match the countries with their capitals:</div>\n-                                      <div className=\"grid grid-cols-2 gap-4\">\n-                                        <div>\n-                                          1. France<br />\n-                                          2. Germany<br />\n-                                          3. Spain\n-                                        </div>\n-                                        <div>\n-                                          • Berlin<br />\n-                                          • Paris<br />\n-                                          • Madrid\n-                                        </div>\n-                                      </div>\n-                                    </div>\n-                                  )}\n-                                  {type === 'ordering' && (\n-                                    <div className=\"space-y-2\">\n-                                      <div className=\"font-medium mb-2\">Arrange in chronological order:</div>\n-                                      <div className=\"space-y-1\">\n-                                        <Badge variant=\"outline\" className=\"mr-2\">1</Badge>World War II<br />\n-                                        <Badge variant=\"outline\" className=\"mr-2\">2</Badge>Industrial Revolution<br />\n-                                        <Badge variant=\"outline\" className=\"mr-2\">3</Badge>Renaissance\n-                                      </div>\n-                                    </div>\n-                                  )}\n-                                  {type === 'short-answer' && (\n-                                    <div className=\"space-y-2\">\n-                                      <div className=\"font-medium\">Question:</div>\n-                                      <div>Explain the water cycle in 2-3 sentences.</div>\n-                                      <div className=\"mt-2 p-2 border border-dashed rounded-md border-primary/30\">\n-                                        Answer space\n-                                      </div>\n-                                    </div>\n-                                  )}\n-                                </div>\n-                              </div>\n-                            </CardHeader>\n-                          </Card>\n-                        ))}\n-                      </CardContent>\n-                    </Card>\n-                  </div>\n-                ) : isViewMode ? (\n-                  <div className=\"space-y-6\">\n-                    {selectedGradeId ? (\n-                      <div className=\"grid grid-cols-1 gap-6\">\n-                        {topics.map((topic) => (\n-                          <Card key={topic.id} className=\"border-l-4 border-l-primary\">\n-                            <CardHeader>\n-                              <div className=\"flex items-center justify-between\">\n-                                <h3 className=\"text-lg font-semibold\">{topic.title}</h3>\n-                              </div>\n-                            </CardHeader>\n-                            <CardContent>\n-                              <div className=\"space-y-4\">\n-                                {subtopics\n-                                  .filter(subtopic => subtopic.topic_id === topic.id)\n-                                  .map((subtopic, index) => (\n-                                    <div key={subtopic.id || `subtopic-${index}`} className=\"border-l-2 pl-4\">\n-                                      <h4 className=\"text-md font-medium mb-2\">{subtopic.name || 'Untitled Subtopic'}</h4>\n-                                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n-                                        {lessons\n-                                          .filter(lesson => lesson.subtopic_id === subtopic.id)\n-                                          .map((lesson) => (\n-                                            <Card \n-                                              key={lesson.id} \n-                                              className={cn(\n-                                                \"cursor-pointer transition-all duration-200\",\n-                                                \"hover:shadow-md hover:translate-y-[-2px]\",\n-                                                \"hover:bg-accent/50 hover:border-primary/50\",\n-                                                \"active:translate-y-[0px]\",\n-                                                currentLessonId === lesson.id && \"border-primary bg-accent/50 shadow-md\",\n-                                                \"group\" // Enable group hover effects\n-                                              )}\n-                                              onClick={() => handleLessonSelect(lesson.id)}\n-                                            >\n-                                              <CardHeader className=\"p-4\">\n-                                                <div className=\"flex flex-col gap-2\">\n-                                                  <div className=\"flex items-center justify-between\">\n-                                                    <div className=\"flex items-center gap-2\">\n-                                                      <BookOpen className={cn(\n-                                                        \"h-4 w-4 text-primary\",\n-                                                        \"transition-transform duration-200\",\n-                                                        \"group-hover:scale-110\"\n-                                                      )} />\n-                                                      <span className=\"font-medium\">{lesson.title}</span>\n-                                                    </div>\n-                                                    <Button\n-                                                      variant=\"outline\"\n-                                                      size=\"sm\"\n-                                                      className={cn(\n-                                                        \"opacity-0 group-hover:opacity-100\",\n-                                                        \"transition-all duration-200\",\n-                                                        \"hover:bg-primary hover:text-primary-foreground\"\n-                                                      )}\n-                                                      disabled={!lesson.content || currentLessonId !== lesson.id}\n-                                                      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n-                                                        e.stopPropagation();\n-                                                        window.location.href = `/teacher/lessons/${lesson.id}`;\n-                                                      }}\n-                                                    >\n-                                                      Start Lesson\n-                                                    </Button>\n-                                                  </div>\n-                                                  <div className=\"flex items-center gap-2\">\n-                                                    <Badge variant=\"outline\" className={cn(\n-                                                      \"bg-primary/5\",\n-                                                      \"transition-colors duration-200\",\n-                                                      \"group-hover:bg-primary/10\"\n-                                                    )}>\n-                                                      {lesson.questions?.length || 0} Questions\n-                                                    </Badge>\n-                                                    <Badge variant=\"outline\" className={cn(\n-                                                      \"bg-primary/5\",\n-                                                      \"transition-colors duration-200\",\n-                                                      \"group-hover:bg-primary/10\"\n-                                                    )}>\n-                                                      {lesson.activities?.length || 0} Activities\n-                                                    </Badge>\n-                                                  </div>\n-                                                </div>\n-                                              </CardHeader>\n-                                            </Card>\n-                                          ))}\n-                                      </div>\n-                                    </div>\n-                                  ))}\n-                              </div>\n-                            </CardContent>\n-                          </Card>\n-                        ))}\n-                      </div>\n-                    ) : (\n-                      <div className=\"text-center py-20\">\n-                        <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n-                        <h3 className=\"text-lg font-medium\">Select a Grade</h3>\n-                        <p className=\"text-sm text-muted-foreground\">\n-                          Choose a grade from the left panel to start managing content\n-                        </p>\n-                      </div>\n-                    )}\n-                  </div>\n-                ) : (\n-                  // Edit Mode Content\n-                  <div className=\"space-y-4\">\n-                    {/* Lesson Title */}\n-                    <Card>\n-                      <CardHeader>\n-                        <div className=\"flex items-center justify-between mb-4\">\n-                          <h2 className=\"text-2xl font-bold\">Lesson Content</h2>\n-                                                    <Button\n-                                                      variant=\"outline\"\n-                                                      size=\"sm\"\n-                            onClick={() => setIsContentEditorOpen(true)}\n-                          >\n-                            <Pencil className=\"h-4 w-4 mr-2\" />\n-                            Edit Content\n-                          </Button>\n-                        </div>\n-                      </CardHeader>\n-                      <CardContent className=\"space-y-4\">\n-                        {/* Lesson Title */}\n-                        <div className=\"flex items-center justify-between\">\n-                          <div className=\"space-y-1\">\n-                            <Label>Lesson Title</Label>\n-                            <InlineEdit\n-                              value={lessonTitle}\n-                              onSave={async (newTitle) => {\n-                                setLessonTitle(newTitle);\n-                                await handleSaveLesson();\n-                              }}\n-                              isEditing={isEditingTitle}\n-                              setIsEditing={setIsEditingTitle}\n-                              placeholder=\"Enter lesson title\"\n-                              className=\"text-lg font-medium\"\n-                            />\n-                          </div>\n-                        </div>\n-\n-                        {/* Content Editor and Display */}\n-                        <div className=\"space-y-4\">\n-                          {isContentEditorOpen ? (\n-                            <div className=\"border rounded-lg p-4\">\n-                              <div className=\"mb-4\">\n-                                <Label>Content Heading</Label>\n-                                <InlineEdit\n-                                  value={contentHeading}\n-                                  onSave={(newHeading) => setContentHeading(newHeading)}\n-                                  isEditing={isEditingHeading}\n-                                  setIsEditing={setIsEditingHeading}\n-                                  placeholder=\"Add content heading\"\n-                                  className=\"text-base text-muted-foreground\"\n-                                />\n-                              </div>\n-                              <RichTextEditor\n-                                value={lessonContent}\n-                                onChange={setLessonContent}\n-                                onSave={async (content) => {\n-                                  await handleContentSave(content);\n-                                  setIsContentEditorOpen(false);\n-                                }}\n-                                placeholder=\"Add lesson content here...\"\n-                              />\n-                            </div>\n-                          ) : lessonContent ? (\n-                            <div className=\"prose prose-sm max-w-none\">\n-                              {contentHeading && (\n-                                <h3 className=\"text-lg font-semibold mb-2\">{contentHeading}</h3>\n-                              )}\n-                              <div dangerouslySetInnerHTML={{ __html: lessonContent }} />\n-                            </div>\n-                          ) : (\n-                            <div className=\"text-center py-8 text-muted-foreground\">\n-                              Click 'Edit Content' to add lesson content\n-                            </div>\n-                          )}\n-                        </div>\n-                      </CardContent>\n-                    </Card>\n-\n-                    {/* Tabs */}\n-                    <Tabs defaultValue=\"questions\" className=\"mt-6\">\n-                    <TabsList className=\"grid w-full grid-cols-2\">\n-                        <TabsTrigger value=\"questions\">\n-                          <MessageSquare className=\"h-4 w-4 mr-2\" />\n-                        Questions\n-                      </TabsTrigger>\n-                        <TabsTrigger value=\"activities\">\n-                          <ActivityIcon className=\"h-4 w-4 mr-2\" />\n-                        Activities\n-                      </TabsTrigger>\n-                    </TabsList>\n-\n-                      {/* Questions Tab */}\n-                      <TabsContent value=\"questions\" className=\"space-y-4\">\n-                      <CardHeader>\n-                          <CardDescription>Add and manage questions for this lesson</CardDescription>\n-                      </CardHeader>\n-                        {questions.map((question, index) => (\n-                          <Card key={index} className={cn(\n-                            \"relative border-l-4 transition-colors duration-200\",\n-                            expandedQuestion === index ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\n-                          )}>\n-                            <CardHeader className=\"pb-3\">\n-                              <div className=\"flex items-center justify-between gap-4\">\n-                                <div className=\"flex items-center gap-3 min-w-0 flex-1\">\n-                                  <div className=\"flex items-center gap-2 flex-shrink-0\">\n-                                    <span className=\"px-2 py-1 bg-primary/10 rounded-md text-sm font-semibold text-primary whitespace-nowrap\">\n-                                      Q {index + 1}\n-                                    </span>\n-                                    <Badge variant=\"outline\" className=\"whitespace-nowrap\">\n-                                      {QUESTION_TYPES[question.type as keyof typeof QUESTION_TYPES]?.label || question.type}\n-                                    </Badge>\n-                                    {question.isDraft && (\n-                                      <Badge variant=\"secondary\" className=\"whitespace-nowrap\">Draft</Badge>\n-                                )}\n-                                  </div>\n-                                      {expandedQuestion !== index && (\n-                                        <div className=\"text-sm text-muted-foreground truncate\">\n-                                          {question.title || 'No question text'} - {question.data?.content || 'No question texts'}\n-                                        </div>\n-                                      )}\n-                                    </div>\n-                                    <div className=\"flex items-center gap-2 flex-shrink-0\">\n-                                      <Button\n-                                        variant=\"ghost\"\n-                                        size=\"sm\"\n-                                        onClick={() => handleQuestionExpand(index)}\n-                                      >\n-                                        {expandedQuestion === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n-                                      </Button>\n-                                      <Button\n-                                        variant=\"ghost\"\n-                                        size=\"sm\"\n-                                        onClick={() => handleRemoveQuestion(index)}\n-                                      >\n-                                        <Trash2 className=\"h-4 w-4 text-destructive\" />\n-                                      </Button>\n-                                    </div>\n-                                  </div>\n-                                </CardHeader>\n-                                {expandedQuestion === index && (\n-                                  <CardContent>\n-                                    <QuestionForm\n-                                      key={index}\n-                                      question={{ \n-                                        ...question, \n-                                        lesson_id: currentLessonId || '',\n-                                        type: isValidQuestionType(question.type) ? question.type : 'speaking',\n-                                        data: {\n-                                          prompt: question.data?.prompt ?? '',\n-                                          teacher_script: question.data?.teacher_script ?? '',\n-                                          followup_prompt: question.data?.followup_prompt ?? [],\n-                                          sample_answer: question.data?.sample_answer ?? '',\n-                                          \n-                                        } \n-                                      }}\n-                                      index={index}\n-                                      onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\n-                                        await handleUpdateQuestion(index, {\n-                                          ...updatedQuestion,\n-                                          data: {\n-                                            prompt: updatedQuestion.data?.prompt ?? '',\n-                                            teacher_script: updatedQuestion.data?.teacher_script ?? '',\n-                                            followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\n-                                            sample_answer: updatedQuestion.data?.sample_answer ?? '',\n-                                            metadata: updatedQuestion.metadata ?? {},\n-                                            },\n-                                            correct_answer: updatedQuestion.correct_answer ?? '',\n-                                            content: updatedQuestion.content ?? ''  // Add default value\n-                                        });\n-                                      }}\n-                                      onRemove={handleRemoveQuestion}\n-                                      onAddExercisePrompt={handleAddExercisePrompt}\n-                                      onRemoveExercisePrompt={handleRemoveExercisePrompt}\n-                                      onExercisePromptChange={handleExercisePromptChange}\n-                                    /><Button \n-                                    size=\"sm\"\n-                                    variant=\"outline\"\n-                                    onClick={() => handleSaveQuestion(question, index)}\n-                                    className=\"ml-2\"\n-                                  >\n-                                    {questionSaveStatuses.find(s => s.id === question.id)?.status === 'saving' ? (\n-                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n-                                    ) : (\n-                                      <Save className=\"h-4 w-4 mr-2\" />\n-                                    )}\n-                                    Save Question\n-                                                    </Button>\n-                                    {/* Exercise Prompts with Save Buttons */}\n-                                    {question.exercisePrompts?.map((prompt, promptIndex) => (\n-                                      <div key={`${question.id}-prompt-${promptIndex}`} className=\"mt-4\"> {/* Updated key */}\n-                                        <div className=\"flex items-center justify-between mb-2\">\n-                                          <h4 className=\"text-sm font-medium\">Exercise Prompt {promptIndex + 1}</h4>\n-                                          <div className=\"flex items-center gap-2\">\n                                             <TooltipProvider>\n                                               <Tooltip>\n                                                 <TooltipTrigger asChild>\n                                                   <Button\n"
                },
                {
                    "date": 1739968401503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2177,8 +2177,751 @@\n                             )}>\n                               <CardHeader className=\"py-3\">\n                                 <div className=\"flex items-center justify-between\">\n                                   <div className=\"flex items-center gap-2\">\n+                                    <Layers className=\"h-4 w-4 text-primary\" />\n+                                    <h4 className=\"font-medium\">{topic.title}</h4>\n+                                    <Badge variant={hasContent ? \"outline\" : \"destructive\"}>\n+                                      {hasContent ? `${topicSubtopics.length} Subtopics` : 'Empty'}\n+                                    </Badge>\n+                                  </div>\n+                                  <div className=\"flex items-center gap-2\">\n+                                    <Button\n+                                      variant=\"ghost\"\n+                                      size=\"sm\"\n+                                      onClick={(e: React.MouseEvent) => {\n+                                        e.stopPropagation();\n+                                        setItemToDelete({\n+                                          id: topic.id,\n+                                          type: 'topic',\n+                                          title: topic.title\n+                                        });\n+                                        setDeleteDialogOpen(true);\n+                                      }}\n+                                    >\n+                                      <Trash className=\"h-4 w-4\" />\n+                                    </Button>\n+                                    <ChevronDown className={cn(\n+                                      \"h-4 w-4 transition-transform duration-200\",\n+                                      expandedTopic === topic.id ? \"rotate-0\" : \"-rotate-90\"\n+                                    )} />\n+                                  </div>\n+                                </div>\n+                              </CardHeader>\n+\n+                              {/* Subtopics Section */}\n+                              <AnimatePresence>\n+                                {expandedTopic === topic.id && (\n+                                  <motion.div\n+                                    initial={{ height: 0, opacity: 0 }}\n+                                    animate={{ height: \"auto\", opacity: 1 }}\n+                            <AnimatePresence>\n+                              {expandedTopic === topic.id && (\n+                                <motion.div\n+                                  initial={{ height: 0, opacity: 0 }}\n+                                  animate={{ height: \"auto\", opacity: 1 }}\n+                                  exit={{ height: 0, opacity: 0 }}\n+                                  transition={{ duration: 0.2 }}\n+                                >\n+                                  <CardContent className=\"pt-0 pb-2\">\n+                                    <div className=\"pl-4 space-y-2\">\n+                                      {isLoadingSubtopics ? (\n+                                        <div className=\"flex items-center justify-center py-4\">\n+                                          <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\n+                                        </div>\n+                                      ) : (\n+                                        subtopics\n+                                          .filter(subtopic => subtopic.topic_id === topic.id)\n+                                          .map((subtopic: SubTopic) => (\n+                                            <div \n+                                              key={subtopic.id}\n+                                              className={cn(\n+                                                \"rounded-lg border transition-colors\",\n+                                                expandedSubtopic === subtopic.id \n+                                                  ? \"bg-accent/10 border-primary/20\" \n+                                                  : \"hover:bg-accent/5\"\n+                                              )}\n+                                            >\n+                                              <div \n+                                                className=\"p-3 cursor-pointer\"\n+                                                onClick={() => handleSubtopicExpand(subtopic.id || '')}\n+                                              >\n+                                                <div className=\"flex items-center justify-between py-2 cursor-pointer hover:bg-accent/50 rounded-md px-2\">\n+                                                  <div className=\"flex items-center gap-2\">\n+                                                    <BookOpen className=\"h-4 w-4 text-primary\" />\n+                                                    <span className=\"text-sm font-medium\">{subtopic.name}</span>\n+                                                    <Badge variant=\"outline\" className=\"ml-2\">\n+                                                      {lessons.filter(l => l.subtopic_id === subtopic.id).length} Lessons\n+                                                    </Badge>\n+                                                  </div>\n+                                                  <div className=\"flex items-center gap-2\">\n+                                                    <Button \n+                                                      variant=\"ghost\" \n+                                                      size=\"sm\"\n+                                                      onClick={(e) => {\n+                                                        e.stopPropagation();\n+                                                        setItemToDelete({\n+                                                          id: subtopic.id,\n+                                                          type: 'subtopic',\n+                                                          title: subtopic.title\n+                                                        });\n+                                                        setDeleteDialogOpen(true);\n+                                                      }}\n+                                                    >\n+                                                      <Trash className=\"h-4 w-4\" />\n+                                                    </Button>\n+                                                    <ChevronDown className={cn(\n+                                                      \"h-4 w-4 transition-transform duration-200\",\n+                                                      expandedSubtopic === subtopic.id ? \"rotate-0\" : \"-rotate-90\"\n+                                                    )} />\n+                                                  </div>\n+                                                </div>\n+\n+                                                <AnimatePresence>\n+                                                  {expandedSubtopic === subtopic.id && (\n+                                                    <motion.div\n+                                                      initial={{ height: 0, opacity: 0 }}\n+                                                      animate={{ height: \"auto\", opacity: 1 }}\n+                                                      exit={{ height: 0, opacity: 0 }}\n+                                                      transition={{ duration: 0.2 }}\n+                                                    >\n+                                                      <div className=\"px-3 pb-3\">\n+                                                        <div className=\"space-y-2\">\n+                                                          {isLoadingLessons ? (\n+                                                            <div className=\"flex items-center justify-center py-4\">\n+                                                              <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\n+                                                            </div>\n+                                                          ) : (\n+                                                            lessons\n+                                                              .filter(lesson => lesson.subtopic_id === subtopic.id)\n+                                                              .map((lesson: Lesson) => (\n+                                                                <div\n+                                                                  key={lesson.id}\n+                                                                  onClick={() => handleLessonSelect(lesson.id || '')}\n+                                                                  className={cn(\n+                                                                    \"flex items-center gap-3 p-2 rounded-md cursor-pointer transition-colors\",\n+                                                                    \"hover:bg-accent\",\n+                                                                    currentLessonId === lesson.id && \"bg-accent\"\n+                                                                  )}\n+                                                                >\n+                                                                  <div className=\"flex items-center gap-2 flex-1\">\n+                                                                    <div className=\"flex h-8 w-8 items-center justify-center rounded-md border bg-background\">\n+                                                                      <BookOpen className=\"h-4 w-4 text-primary\" />\n+                                                                    </div>\n+                                                                    <div className=\"flex flex-col\">\n+                                                                      <span className=\"text-sm font-medium\">{lesson.title}</span>\n+                                                                      <span className=\"text-xs text-muted-foreground\">\n+                                                                        {lesson.duration} mins • {lesson.questions?.length || 0} Questions\n+                                                                      </span>\n+                                                                    </div>\n+                                                                  </div>\n+                                                                  <Button \n+                                                                    variant=\"ghost\" \n+                                                                    size=\"sm\"\n+                                                                    onClick={(e) => {\n+                                                                      e.stopPropagation();\n+                                                                      setItemToDelete({\n+                                                                        id: lesson.id,\n+                                                                        type: 'lesson',\n+                                                                        title: lesson.title\n+                                                                      });\n+                                                                      setDeleteDialogOpen(true);\n+                                                                    }}\n+                                                                  >\n+                                                                    <Trash className=\"h-4 w-4\" />\n+                                                                  </Button>\n+                                                                </div>\n+                                                              ))\n+                                                          )}\n+                                                        </div>\n+                                                      </div>\n+                                                    </motion.div>\n+                                                  )}\n+                                                </AnimatePresence>\n+                                              </div>\n+                                            </div>\n+                                          ))\n+                                      )}\n+                                    </div>\n+                                  </CardContent>\n+                                </motion.div>\n+                              )}\n+                            </AnimatePresence>\n+                          </Card>\n+                        ))}\n+                      </div>\n+                    )}\n+\n+                    {/* Regular Edit Mode Content */}\n+                    {!isViewMode && (\n+                      <>\n+                        {/* Existing Topic, Subtopic, and Lesson Selection UI */}\n+                      {/* Topic Selection */}\n+                        {selectedGradeId && (\n+                      <div className=\"space-y-2\">\n+                        <div className=\"flex items-center justify-between\">\n+                        <Label htmlFor=\"topic-select\">Topic</Label>\n+                        </div>\n+                        <Select \n+                              value={selectedTopicId || ''} \n+                              onValueChange={handleTopicSelect}\n+                        >\n+                          <SelectTrigger id=\"topic-select\" className=\"w-full\">\n+                            <SelectValue placeholder=\"Select Topic\" />\n+                          </SelectTrigger>\n+                          <SelectContent>\n+                                {topics.map((topic: Topic) => (\n+                                  <SelectItem \n+                                    key={`topic-${topic.id || 'new'}`} \n+                                    value={topic.id || ''}\n+                                  >\n+                                  <div className=\"flex items-center gap-2\">\n+                                  <Layers className=\"h-4 w-4 text-primary\" />\n+                                    {topic.title}\n+                                  </div>\n+                                </SelectItem>\n+                              ))}\n+                          </SelectContent>\n+                        </Select>\n+                        <Button \n+                          variant=\"outline\" \n+                          size=\"sm\" \n+                          className=\"w-full gap-2\"\n+                          onClick={() => setModalState({ ...modalState, showAddTopic: true })}\n+                        >\n+                          <Plus className=\"h-4 w-4\" />\n+                          Add New Topic\n+                        </Button>\n+                      </div>\n+                    )}\n+\n+                    {/* Subtopic Selection */}\n+                        {selectedTopicId && (\n+                      <div className=\"space-y-2\">\n+                        <div className=\"flex items-center justify-between\">\n+                        <Label htmlFor=\"subtopic-select\">Subtopic</Label>\n+                        </div>\n+                        <Select \n+                              value={selectedSubtopicId || ''} \n+                              onValueChange={handleSubtopicSelect}\n+                        >\n+                          <SelectTrigger id=\"subtopic-select\" className=\"w-full\">\n+                            <SelectValue placeholder=\"Select Subtopic\" />\n+                          </SelectTrigger>\n+                          <SelectContent>\n+                                {subtopics\n+                                  .filter(subtopic => subtopic.id)\n+                                  .map((subtopic, index) => (\n+                                    <SelectItem \n+                                      key={subtopic.id || `subtopic-${index}`}\n+                                      value={subtopic.id || ''}\n+                                    >\n+                                      {subtopic.title || 'Untitled Subtopic'}\n+                                    </SelectItem>\n+                                  ))}\n+                          </SelectContent>\n+                        </Select>\n+                        {!isViewMode && (\n+                          <Button \n+                            variant=\"outline\" \n+                            size=\"sm\" \n+                            className=\"w-full gap-2\"\n+                            onClick={() => setModalState({ ...modalState, showAddSubtopic: true })}\n+                          >\n+                            <Plus className=\"h-4 w-4\" />\n+                            Add New Subtopic\n+                          </Button>\n+                        )}\n+                      </div>\n+                    )}\n+\n+                    {/* Lesson Selection */}\n+                        {selectedSubtopicId && (\n+                      <div className=\"space-y-2\">\n+                        <div className=\"flex items-center justify-between\">\n+                          <Label htmlFor=\"lesson-select\">Lesson</Label>\n+                        </div>\n+                          <Select \n+                            value={currentLessonId || ''} \n+                            onValueChange={handleLessonSelect}\n+                            onOpenChange={(open) => {\n+                              setIsDropdownOpen(open);\n+                              if (open) {\n+                                setIsSidebarCollapsed(false);\n+                                setIsSidebarLocked(true);\n+                              } else {\n+                                // Small delay before unlocking to prevent immediate collapse\n+                                setTimeout(() => {\n+                                  setIsSidebarLocked(false);\n+                                }, 100);\n+                              }\n+                            }}\n+                          >\n+                            <SelectTrigger \n+                              id=\"lesson-select\" \n+                              className=\"w-full\"\n+                              onClick={(e) => {\n+                                e.stopPropagation();\n+                                setIsSidebarCollapsed(false);\n+                                setIsSidebarLocked(true);\n+                              }}\n+                            >\n+                              <SelectValue placeholder=\"Select Lesson\" />\n+                            </SelectTrigger>\n+                            <SelectContent>\n+                              {lessons\n+                                .filter((lesson): lesson is Lesson => lesson !== undefined && lesson !== null)\n+                                .map((lesson: Lesson) => (\n+                                  <SelectItem \n+                                    key={`lesson-${lesson.id || 'new'}`} \n+                                    value={lesson.id || ''}\n+                                  >\n+                                    <div className=\"flex items-center gap-2\">\n+                                      <BookOpen className=\"h-4 w-4 text-primary\" />\n+                                      {lesson.title || 'Untitled Lesson'}\n+                                    </div>\n+                                  </SelectItem>\n+                                ))}\n+                            </SelectContent>\n+                          </Select>\n+                    <Button \n+                            variant=\"outline\" \n+                            size=\"sm\" \n+                            className=\"w-full gap-2\"\n+                        onClick={() => setModalState({ ...modalState, showAddLesson: true })}\n+                          >\n+                            <Plus className=\"h-4 w-4\" />\n+                            Add New Lesson\n+                    </Button>\n+                      </div>\n+                        )}\n+                      </>\n+                    )}\n+                  </CardContent>\n+                </Card>\n+              </div>\n+\n+              {/* Collapsed view */}\n+              {isSidebarCollapsed && (\n+                <div className=\"absolute inset-0 flex flex-col items-center pt-12 gap-4\">\n+                  <BookOpen className=\"h-6 w-6 text-muted-foreground\" />\n+                  <div className=\"w-px h-full bg-border\" />\n+                </div>\n+              )}\n+            </Card>\n+          </div>\n+        \n+\n+          {/* Right Content Area */}\n+          <div className=\"flex-1 overflow-y-auto\">\n+            {isNavigating ? (\n+              <div className=\"flex items-center justify-center h-[400px]\">\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n+                <span className=\"ml-3\">Loading...</span>\n+              </div>\n+            ) : (\n+              <>\n+                {!selectedGradeId ? (\n+                  // Question Types Display Section\n+                  <div className=\"space-y-6\">\n+                    <Card>\n+                      <CardHeader>\n+                        <div className=\"flex items-center justify-between\">\n+                          <div>\n+                            <CardTitle className=\"text-xl font-semibold\">Available Question Types</CardTitle>\n+                            <CardDescription>Browse through different question formats and examples</CardDescription>\n+                          </div>\n+                          <TooltipProvider>\n+                            <Tooltip>\n+                              <TooltipTrigger>\n+                                <HelpCircle className=\"h-5 w-5 text-muted-foreground\" />\n+                              </TooltipTrigger>\n+                              <TooltipContent>\n+                                <p>Click on each type to see detailed examples</p>\n+                              </TooltipContent>\n+                            </Tooltip>\n+                          </TooltipProvider>\n+                        </div>\n+                      </CardHeader>\n+                      <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n+                        {Object.entries(QUESTION_TYPES).map(([type, details]) => (\n+                          <Card key={type} className=\"cursor-pointer hover:bg-accent/50 transition-colors\">\n+                            <CardHeader className=\"p-4\">\n+                              <div className=\"flex items-center justify-between mb-2\">\n+                                <Badge variant=\"outline\" className=\"bg-primary/5 text-lg\">\n+                                  {details.label}\n+                                </Badge>\n+                              </div>\n+                              <CardDescription className=\"text-sm\">\n+                                {details.description || 'No description available'}\n+                              </CardDescription>\n+                              <div className=\"mt-4\">\n+                                <div className=\"text-sm font-medium mb-2\">Example:</div>\n+                                <div className=\"p-3 rounded-md bg-muted/50 text-sm\">\n+                                  {type === 'multiple-choice' && (\n+                                    <>\n+                                      <div className=\"font-medium mb-2\">Q: What is the capital of France?</div>\n+                                      <div className=\"space-y-1 pl-4\">\n+                                        <div>A) Paris</div>\n+                                        <div>B) London</div>\n+                                        <div>C) Berlin</div>\n+                                        <div>D) Madrid</div>\n+                                      </div>\n+                                    </>\n+                                  )}\n+                                  {type === 'fill-in-blank' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div>Complete the sentence:</div>\n+                                      <div>The sun rises in the <span className=\"bg-primary/20 px-2 rounded\">_____</span> and sets in the <span className=\"bg-primary/20 px-2 rounded\">_____</span>.</div>\n+                                    </div>\n+                                  )}\n+                                  {type === 'true-false' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div className=\"font-medium\">Statement:</div>\n+                                      <div>The Earth is flat.</div>\n+                                      <div className=\"mt-2\">\n+                                        <Badge variant=\"outline\" className=\"mr-2\">True</Badge>\n+                                        <Badge variant=\"outline\">False</Badge>\n+                                      </div>\n+                                    </div>\n+                                  )}\n+                                  {type === 'matching' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div className=\"font-medium mb-2\">Match the countries with their capitals:</div>\n+                                      <div className=\"grid grid-cols-2 gap-4\">\n+                                        <div>\n+                                          1. France<br />\n+                                          2. Germany<br />\n+                                          3. Spain\n+                                        </div>\n+                                        <div>\n+                                          • Berlin<br />\n+                                          • Paris<br />\n+                                          • Madrid\n+                                        </div>\n+                                      </div>\n+                                    </div>\n+                                  )}\n+                                  {type === 'ordering' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div className=\"font-medium mb-2\">Arrange in chronological order:</div>\n+                                      <div className=\"space-y-1\">\n+                                        <Badge variant=\"outline\" className=\"mr-2\">1</Badge>World War II<br />\n+                                        <Badge variant=\"outline\" className=\"mr-2\">2</Badge>Industrial Revolution<br />\n+                                        <Badge variant=\"outline\" className=\"mr-2\">3</Badge>Renaissance\n+                                      </div>\n+                                    </div>\n+                                  )}\n+                                  {type === 'short-answer' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div className=\"font-medium\">Question:</div>\n+                                      <div>Explain the water cycle in 2-3 sentences.</div>\n+                                      <div className=\"mt-2 p-2 border border-dashed rounded-md border-primary/30\">\n+                                        Answer space\n+                                      </div>\n+                                    </div>\n+                                  )}\n+                                </div>\n+                              </div>\n+                            </CardHeader>\n+                          </Card>\n+                        ))}\n+                      </CardContent>\n+                    </Card>\n+                  </div>\n+                ) : isViewMode ? (\n+                  <div className=\"space-y-6\">\n+                    {selectedGradeId ? (\n+                      <div className=\"grid grid-cols-1 gap-6\">\n+                        {topics.map((topic) => (\n+                          <Card key={topic.id} className=\"border-l-4 border-l-primary\">\n+                            <CardHeader>\n+                              <div className=\"flex items-center justify-between\">\n+                                <h3 className=\"text-lg font-semibold\">{topic.title}</h3>\n+                              </div>\n+                            </CardHeader>\n+                            <CardContent>\n+                              <div className=\"space-y-4\">\n+                                {subtopics\n+                                  .filter(subtopic => subtopic.topic_id === topic.id)\n+                                  .map((subtopic, index) => (\n+                                    <div key={subtopic.id || `subtopic-${index}`} className=\"border-l-2 pl-4\">\n+                                      <h4 className=\"text-md font-medium mb-2\">{subtopic.name || 'Untitled Subtopic'}</h4>\n+                                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n+                                        {lessons\n+                                          .filter(lesson => lesson.subtopic_id === subtopic.id)\n+                                          .map((lesson) => (\n+                                            <Card \n+                                              key={lesson.id} \n+                                              className={cn(\n+                                                \"cursor-pointer transition-all duration-200\",\n+                                                \"hover:shadow-md hover:translate-y-[-2px]\",\n+                                                \"hover:bg-accent/50 hover:border-primary/50\",\n+                                                \"active:translate-y-[0px]\",\n+                                                currentLessonId === lesson.id && \"border-primary bg-accent/50 shadow-md\",\n+                                                \"group\" // Enable group hover effects\n+                                              )}\n+                                              onClick={() => handleLessonSelect(lesson.id)}\n+                                            >\n+                                              <CardHeader className=\"p-4\">\n+                                                <div className=\"flex flex-col gap-2\">\n+                                                  <div className=\"flex items-center justify-between\">\n+                                                    <div className=\"flex items-center gap-2\">\n+                                                      <BookOpen className={cn(\n+                                                        \"h-4 w-4 text-primary\",\n+                                                        \"transition-transform duration-200\",\n+                                                        \"group-hover:scale-110\"\n+                                                      )} />\n+                                                      <span className=\"font-medium\">{lesson.title}</span>\n+                                                    </div>\n+                                                    <Button\n+                                                      variant=\"outline\"\n+                                                      size=\"sm\"\n+                                                      className={cn(\n+                                                        \"opacity-0 group-hover:opacity-100\",\n+                                                        \"transition-all duration-200\",\n+                                                        \"hover:bg-primary hover:text-primary-foreground\"\n+                                                      )}\n+                                                      disabled={!lesson.content || currentLessonId !== lesson.id}\n+                                                      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n+                                                        e.stopPropagation();\n+                                                        window.location.href = `/teacher/lessons/${lesson.id}`;\n+                                                      }}\n+                                                    >\n+                                                      Start Lesson\n+                                                    </Button>\n+                                                  </div>\n+                                                  <div className=\"flex items-center gap-2\">\n+                                                    <Badge variant=\"outline\" className={cn(\n+                                                      \"bg-primary/5\",\n+                                                      \"transition-colors duration-200\",\n+                                                      \"group-hover:bg-primary/10\"\n+                                                    )}>\n+                                                      {lesson.questions?.length || 0} Questions\n+                                                    </Badge>\n+                                                    <Badge variant=\"outline\" className={cn(\n+                                                      \"bg-primary/5\",\n+                                                      \"transition-colors duration-200\",\n+                                                      \"group-hover:bg-primary/10\"\n+                                                    )}>\n+                                                      {lesson.activities?.length || 0} Activities\n+                                                    </Badge>\n+                                                  </div>\n+                                                </div>\n+                                              </CardHeader>\n+                                            </Card>\n+                                          ))}\n+                                      </div>\n+                                    </div>\n+                                  ))}\n+                              </div>\n+                            </CardContent>\n+                          </Card>\n+                        ))}\n+                      </div>\n+                    ) : (\n+                      <div className=\"text-center py-20\">\n+                        <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n+                        <h3 className=\"text-lg font-medium\">Select a Grade</h3>\n+                        <p className=\"text-sm text-muted-foreground\">\n+                          Choose a grade from the left panel to start managing content\n+                        </p>\n+                      </div>\n+                    )}\n+                  </div>\n+                ) : (\n+                  // Edit Mode Content\n+                  <div className=\"space-y-4\">\n+                    {/* Lesson Title */}\n+                    <Card>\n+                      <CardHeader>\n+                        <div className=\"flex items-center justify-between mb-4\">\n+                          <h2 className=\"text-2xl font-bold\">Lesson Content</h2>\n+                                                    <Button\n+                                                      variant=\"outline\"\n+                                                      size=\"sm\"\n+                            onClick={() => setIsContentEditorOpen(true)}\n+                          >\n+                            <Pencil className=\"h-4 w-4 mr-2\" />\n+                            Edit Content\n+                          </Button>\n+                        </div>\n+                      </CardHeader>\n+                      <CardContent className=\"space-y-4\">\n+                        {/* Lesson Title */}\n+                        <div className=\"flex items-center justify-between\">\n+                          <div className=\"space-y-1\">\n+                            <Label>Lesson Title</Label>\n+                            <InlineEdit\n+                              value={lessonTitle}\n+                              onSave={async (newTitle) => {\n+                                setLessonTitle(newTitle);\n+                                await handleSaveLesson();\n+                              }}\n+                              isEditing={isEditingTitle}\n+                              setIsEditing={setIsEditingTitle}\n+                              placeholder=\"Enter lesson title\"\n+                              className=\"text-lg font-medium\"\n+                            />\n+                          </div>\n+                        </div>\n+\n+                        {/* Content Editor and Display */}\n+                        <div className=\"space-y-4\">\n+                          {isContentEditorOpen ? (\n+                            <div className=\"border rounded-lg p-4\">\n+                              <div className=\"mb-4\">\n+                                <Label>Content Heading</Label>\n+                                <InlineEdit\n+                                  value={contentHeading}\n+                                  onSave={(newHeading) => setContentHeading(newHeading)}\n+                                  isEditing={isEditingHeading}\n+                                  setIsEditing={setIsEditingHeading}\n+                                  placeholder=\"Add content heading\"\n+                                  className=\"text-base text-muted-foreground\"\n+                                />\n+                              </div>\n+                              <RichTextEditor\n+                                value={lessonContent}\n+                                onChange={setLessonContent}\n+                                onSave={async (content) => {\n+                                  await handleContentSave(content);\n+                                  setIsContentEditorOpen(false);\n+                                }}\n+                                placeholder=\"Add lesson content here...\"\n+                              />\n+                            </div>\n+                          ) : lessonContent ? (\n+                            <div className=\"prose prose-sm max-w-none\">\n+                              {contentHeading && (\n+                                <h3 className=\"text-lg font-semibold mb-2\">{contentHeading}</h3>\n+                              )}\n+                              <div dangerouslySetInnerHTML={{ __html: lessonContent }} />\n+                            </div>\n+                          ) : (\n+                            <div className=\"text-center py-8 text-muted-foreground\">\n+                              Click 'Edit Content' to add lesson content\n+                            </div>\n+                          )}\n+                        </div>\n+                      </CardContent>\n+                    </Card>\n+\n+                    {/* Tabs */}\n+                    <Tabs defaultValue=\"questions\" className=\"mt-6\">\n+                    <TabsList className=\"grid w-full grid-cols-2\">\n+                        <TabsTrigger value=\"questions\">\n+                          <MessageSquare className=\"h-4 w-4 mr-2\" />\n+                        Questions\n+                      </TabsTrigger>\n+                        <TabsTrigger value=\"activities\">\n+                          <ActivityIcon className=\"h-4 w-4 mr-2\" />\n+                        Activities\n+                      </TabsTrigger>\n+                    </TabsList>\n+\n+                      {/* Questions Tab */}\n+                      <TabsContent value=\"questions\" className=\"space-y-4\">\n+                      <CardHeader>\n+                          <CardDescription>Add and manage questions for this lesson</CardDescription>\n+                      </CardHeader>\n+                        {questions.map((question, index) => (\n+                          <Card key={index} className={cn(\n+                            \"relative border-l-4 transition-colors duration-200\",\n+                            expandedQuestion === index ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\n+                          )}>\n+                            <CardHeader className=\"pb-3\">\n+                              <div className=\"flex items-center justify-between gap-4\">\n+                                <div className=\"flex items-center gap-3 min-w-0 flex-1\">\n+                                  <div className=\"flex items-center gap-2 flex-shrink-0\">\n+                                    <span className=\"px-2 py-1 bg-primary/10 rounded-md text-sm font-semibold text-primary whitespace-nowrap\">\n+                                      Q {index + 1}\n+                                    </span>\n+                                    <Badge variant=\"outline\" className=\"whitespace-nowrap\">\n+                                      {QUESTION_TYPES[question.type as keyof typeof QUESTION_TYPES]?.label || question.type}\n+                                    </Badge>\n+                                    {question.isDraft && (\n+                                      <Badge variant=\"secondary\" className=\"whitespace-nowrap\">Draft</Badge>\n+                                )}\n+                                  </div>\n+                                      {expandedQuestion !== index && (\n+                                        <div className=\"text-sm text-muted-foreground truncate\">\n+                                          {question.title || 'No question text'} - {question.data?.content || 'No question texts'}\n+                                        </div>\n+                                      )}\n+                                    </div>\n+                                    <div className=\"flex items-center gap-2 flex-shrink-0\">\n+                                      <Button\n+                                        variant=\"ghost\"\n+                                        size=\"sm\"\n+                                        onClick={() => handleQuestionExpand(index)}\n+                                      >\n+                                        {expandedQuestion === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n+                                      </Button>\n+                                      <Button\n+                                        variant=\"ghost\"\n+                                        size=\"sm\"\n+                                        onClick={() => handleRemoveQuestion(index)}\n+                                      >\n+                                        <Trash2 className=\"h-4 w-4 text-destructive\" />\n+                                      </Button>\n+                                    </div>\n+                                  </div>\n+                                </CardHeader>\n+                                {expandedQuestion === index && (\n+                                  <CardContent>\n+                                    <QuestionForm\n+                                      key={index}\n+                                      question={{ \n+                                        ...question, \n+                                        lesson_id: currentLessonId || '',\n+                                        type: isValidQuestionType(question.type) ? question.type : 'speaking',\n+                                        data: {\n+                                          prompt: question.data?.prompt ?? '',\n+                                          teacher_script: question.data?.teacher_script ?? '',\n+                                          followup_prompt: question.data?.followup_prompt ?? [],\n+                                          sample_answer: question.data?.sample_answer ?? '',\n+                                          \n+                                        } \n+                                      }}\n+                                      index={index}\n+                                      onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\n+                                        await handleUpdateQuestion(index, {\n+                                          ...updatedQuestion,\n+                                          data: {\n+                                            prompt: updatedQuestion.data?.prompt ?? '',\n+                                            teacher_script: updatedQuestion.data?.teacher_script ?? '',\n+                                            followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\n+                                            sample_answer: updatedQuestion.data?.sample_answer ?? '',\n+                                            metadata: updatedQuestion.metadata ?? {},\n+                                            },\n+                                            correct_answer: updatedQuestion.correct_answer ?? '',\n+                                            content: updatedQuestion.content ?? ''  // Add default value\n+                                        });\n+                                      }}\n+                                      onRemove={handleRemoveQuestion}\n+                                      onAddExercisePrompt={handleAddExercisePrompt}\n+                                      onRemoveExercisePrompt={handleRemoveExercisePrompt}\n+                                      onExercisePromptChange={handleExercisePromptChange}\n+                                    /><Button \n+                                    size=\"sm\"\n+                                    variant=\"outline\"\n+                                    onClick={() => handleSaveQuestion(question, index)}\n+                                    className=\"ml-2\"\n+                                  >\n+                                    {questionSaveStatuses.find(s => s.id === question.id)?.status === 'saving' ? (\n+                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n+                                    ) : (\n+                                      <Save className=\"h-4 w-4 mr-2\" />\n+                                    )}\n+                                    Save Question\n+                                                    </Button>\n+                                    {/* Exercise Prompts with Save Buttons */}\n+                                    {question.exercisePrompts?.map((prompt, promptIndex) => (\n+                                      <div key={`${question.id}-prompt-${promptIndex}`} className=\"mt-4\"> {/* Updated key */}\n+                                        <div className=\"flex items-center justify-between mb-2\">\n+                                          <h4 className=\"text-sm font-medium\">Exercise Prompt {promptIndex + 1}</h4>\n+                                          <div className=\"flex items-center gap-2\">\n                                             <TooltipProvider>\n                                               <Tooltip>\n                                                 <TooltipTrigger asChild>\n                                                   <Button\n"
                },
                {
                    "date": 1739968413231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2213,169 +2213,52 @@\n                                 {expandedTopic === topic.id && (\n                                   <motion.div\n                                     initial={{ height: 0, opacity: 0 }}\n                                     animate={{ height: \"auto\", opacity: 1 }}\n-                            <AnimatePresence>\n-                              {expandedTopic === topic.id && (\n-                                <motion.div\n-                                  initial={{ height: 0, opacity: 0 }}\n-                                  animate={{ height: \"auto\", opacity: 1 }}\n-                                  exit={{ height: 0, opacity: 0 }}\n-                                  transition={{ duration: 0.2 }}\n-                                >\n-                                  <CardContent className=\"pt-0 pb-2\">\n-                                    <div className=\"pl-4 space-y-2\">\n-                                      {isLoadingSubtopics ? (\n-                                        <div className=\"flex items-center justify-center py-4\">\n-                                          <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\n-                                        </div>\n-                                      ) : (\n-                                        subtopics\n-                                          .filter(subtopic => subtopic.topic_id === topic.id)\n-                                          .map((subtopic: SubTopic) => (\n-                                            <div \n-                                              key={subtopic.id}\n-                                              className={cn(\n-                                                \"rounded-lg border transition-colors\",\n-                                                expandedSubtopic === subtopic.id \n-                                                  ? \"bg-accent/10 border-primary/20\" \n-                                                  : \"hover:bg-accent/5\"\n-                                              )}\n-                                            >\n-                                              <div \n-                                                className=\"p-3 cursor-pointer\"\n-                                                onClick={() => handleSubtopicExpand(subtopic.id || '')}\n+                                    exit={{ height: 0, opacity: 0 }}\n+                                    transition={{ duration: 0.2 }}\n+                                  >\n+                                    <CardContent className=\"pl-6\">\n+                                      {topicSubtopics.map((subtopic: SubTopic) => {\n+                                        const subtopicLessons = lessons.filter(l => l.subtopic_id === subtopic.id);\n+                                        const hasLessons = subtopicLessons.length > 0;\n+                                        \n+                                        return (\n+                                          <div key={subtopic.id} className=\"mb-4\">\n+                                            <div className=\"flex items-center justify-between\">\n+                                              <div className=\"flex items-center gap-2\">\n+                                                <BookOpen className=\"h-4 w-4 text-primary\" />\n+                                                <span className=\"font-medium\">{subtopic.title}</span>\n+                                                <Badge variant={hasLessons ? \"outline\" : \"destructive\"}>\n+                                                  {hasLessons ? `${subtopicLessons.length} Lessons` : 'Empty'}\n+                                                </Badge>\n+                                              </div>\n+                                              <Button\n+                                                variant=\"ghost\"\n+                                                size=\"sm\"\n+                                                onClick={(e: React.MouseEvent) => {\n+                                                  e.stopPropagation();\n+                                                  setItemToDelete({\n+                                                    id: subtopic.id,\n+                                                    type: 'subtopic',\n+                                                    title: subtopic.title\n+                                                  });\n+                                                  setDeleteDialogOpen(true);\n+                                                }}\n                                               >\n-                                                <div className=\"flex items-center justify-between py-2 cursor-pointer hover:bg-accent/50 rounded-md px-2\">\n-                                                  <div className=\"flex items-center gap-2\">\n-                                                    <BookOpen className=\"h-4 w-4 text-primary\" />\n-                                                    <span className=\"text-sm font-medium\">{subtopic.name}</span>\n-                                                    <Badge variant=\"outline\" className=\"ml-2\">\n-                                                      {lessons.filter(l => l.subtopic_id === subtopic.id).length} Lessons\n-                                                    </Badge>\n-                                                  </div>\n-                                                  <div className=\"flex items-center gap-2\">\n-                                                    <Button \n-                                                      variant=\"ghost\" \n-                                                      size=\"sm\"\n-                                                      onClick={(e) => {\n-                                                        e.stopPropagation();\n-                                                        setItemToDelete({\n-                                                          id: subtopic.id,\n-                                                          type: 'subtopic',\n-                                                          title: subtopic.title\n-                                                        });\n-                                                        setDeleteDialogOpen(true);\n-                                                      }}\n-                                                    >\n-                                                      <Trash className=\"h-4 w-4\" />\n-                                                    </Button>\n-                                                    <ChevronDown className={cn(\n-                                                      \"h-4 w-4 transition-transform duration-200\",\n-                                                      expandedSubtopic === subtopic.id ? \"rotate-0\" : \"-rotate-90\"\n-                                                    )} />\n-                                                  </div>\n-                                                </div>\n-\n-                                                <AnimatePresence>\n-                                                  {expandedSubtopic === subtopic.id && (\n-                                                    <motion.div\n-                                                      initial={{ height: 0, opacity: 0 }}\n-                                                      animate={{ height: \"auto\", opacity: 1 }}\n-                                                      exit={{ height: 0, opacity: 0 }}\n-                                                      transition={{ duration: 0.2 }}\n-                                                    >\n-                                                      <div className=\"px-3 pb-3\">\n-                                                        <div className=\"space-y-2\">\n-                                                          {isLoadingLessons ? (\n-                                                            <div className=\"flex items-center justify-center py-4\">\n-                                                              <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\n-                                                            </div>\n-                                                          ) : (\n-                                                            lessons\n-                                                              .filter(lesson => lesson.subtopic_id === subtopic.id)\n-                                                              .map((lesson: Lesson) => (\n-                                                                <div\n-                                                                  key={lesson.id}\n-                                                                  onClick={() => handleLessonSelect(lesson.id || '')}\n-                                                                  className={cn(\n-                                                                    \"flex items-center gap-3 p-2 rounded-md cursor-pointer transition-colors\",\n-                                                                    \"hover:bg-accent\",\n-                                                                    currentLessonId === lesson.id && \"bg-accent\"\n-                                                                  )}\n-                                                                >\n-                                                                  <div className=\"flex items-center gap-2 flex-1\">\n-                                                                    <div className=\"flex h-8 w-8 items-center justify-center rounded-md border bg-background\">\n-                                                                      <BookOpen className=\"h-4 w-4 text-primary\" />\n-                                                                    </div>\n-                                                                    <div className=\"flex flex-col\">\n-                                                                      <span className=\"text-sm font-medium\">{lesson.title}</span>\n-                                                                      <span className=\"text-xs text-muted-foreground\">\n-                                                                        {lesson.duration} mins • {lesson.questions?.length || 0} Questions\n-                                                                      </span>\n-                                                                    </div>\n-                                                                  </div>\n-                                                                  <Button \n-                                                                    variant=\"ghost\" \n-                                                                    size=\"sm\"\n-                                                                    onClick={(e) => {\n-                                                                      e.stopPropagation();\n-                                                                      setItemToDelete({\n-                                                                        id: lesson.id,\n-                                                                        type: 'lesson',\n-                                                                        title: lesson.title\n-                                                                      });\n-                                                                      setDeleteDialogOpen(true);\n-                                                                    }}\n-                                                                  >\n-                                                                    <Trash className=\"h-4 w-4\" />\n-                                                                  </Button>\n-                                                                </div>\n-                                                              ))\n-                                                          )}\n-                                                        </div>\n-                                                      </div>\n-                                                    </motion.div>\n-                                                  )}\n-                                                </AnimatePresence>\n-                                              </div>\n+                                                <Trash className=\"h-4 w-4\" />\n+                                              </Button>\n                                             </div>\n-                                          ))\n-                                      )}\n-                                    </div>\n-                                  </CardContent>\n-                                </motion.div>\n-                              )}\n-                            </AnimatePresence>\n-                          </Card>\n-                        ))}\n-                      </div>\n-                    )}\n \n-                    {/* Regular Edit Mode Content */}\n-                    {!isViewMode && (\n-                      <>\n-                        {/* Existing Topic, Subtopic, and Lesson Selection UI */}\n-                      {/* Topic Selection */}\n-                        {selectedGradeId && (\n-                      <div className=\"space-y-2\">\n-                        <div className=\"flex items-center justify-between\">\n-                        <Label htmlFor=\"topic-select\">Topic</Label>\n-                        </div>\n-                        <Select \n-                              value={selectedTopicId || ''} \n-                              onValueChange={handleTopicSelect}\n-                        >\n-                          <SelectTrigger id=\"topic-select\" className=\"w-full\">\n-                            <SelectValue placeholder=\"Select Topic\" />\n-                          </SelectTrigger>\n-                          <SelectContent>\n-                                {topics.map((topic: Topic) => (\n-                                  <SelectItem \n-                                    key={`topic-${topic.id || 'new'}`} \n-                                    value={topic.id || ''}\n-                                  >\n-                                  <div className=\"flex items-center gap-2\">\n+                                            {/* Lessons Section */}\n+                                            {subtopicLessons.map((lesson: Lesson) => {\n+                                              const questionCount = lesson.questions?.length || 0;\n+                                              \n+                                              return (\n+                                                <div key={lesson.id} className=\"ml-6 mt-2 p-2 rounded-md hover:bg-accent/5\">\n+                                                  <div className=\"flex items-center justify-between\">\n+                                                    <div className=\"flex items-center gap-2\">\n+                                                      <div className=\"flex flex-col\">\n                                   <Layers className=\"h-4 w-4 text-primary\" />\n                                     {topic.title}\n                                   </div>\n                                 </SelectItem>\n"
                },
                {
                    "date": 1739968420583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2257,8 +2257,77 @@\n                                                 <div key={lesson.id} className=\"ml-6 mt-2 p-2 rounded-md hover:bg-accent/5\">\n                                                   <div className=\"flex items-center justify-between\">\n                                                     <div className=\"flex items-center gap-2\">\n                                                       <div className=\"flex flex-col\">\n+                                                        <span className=\"text-sm\">{lesson.title}</span>\n+                                                        <span className=\"text-xs text-muted-foreground\">\n+                                                          {lesson.duration} mins • {questionCount} Questions\n+                                                        </span>\n+                                                      </div>\n+                                                      {questionCount === 0 && (\n+                                                        <Badge variant=\"destructive\" className=\"text-xs\">\n+                                                          No Questions\n+                                                        </Badge>\n+                                                      )}\n+                                                    </div>\n+                                                    <Button\n+                                                      variant=\"ghost\"\n+                                                      size=\"sm\"\n+                                                      onClick={(e: React.MouseEvent) => {\n+                                                        e.stopPropagation();\n+                                                        setItemToDelete({\n+                                                          id: lesson.id,\n+                                                          type: 'lesson',\n+                                                          title: lesson.title\n+                                                        });\n+                                                        setDeleteDialogOpen(true);\n+                                                      }}\n+                                                      disabled={questionCount > 0}\n+                                                      title={questionCount > 0 ? \"Delete questions first\" : \"Delete lesson\"}\n+                                                    >\n+                                                      <Trash className=\"h-4 w-4\" />\n+                                                    </Button>\n+                                                  </div>\n+                                                </div>\n+                                              );\n+                                            })}\n+                                          </div>\n+                                        );\n+                                      })}\n+                                    </CardContent>\n+                                  </motion.div>\n+                                )}\n+                              </AnimatePresence>\n+                            </Card>\n+                          );\n+                        })}\n+                      </div>\n+                    )}\n+\n+                    {/* Regular Edit Mode Content */}\n+                    {!isViewMode && (\n+                      <>\n+                        {/* Existing Topic, Subtopic, and Lesson Selection UI */}\n+                      {/* Topic Selection */}\n+                        {selectedGradeId && (\n+                      <div className=\"space-y-2\">\n+                        <div className=\"flex items-center justify-between\">\n+                        <Label htmlFor=\"topic-select\">Topic</Label>\n+                        </div>\n+                        <Select \n+                              value={selectedTopicId || ''} \n+                              onValueChange={handleTopicSelect}\n+                        >\n+                          <SelectTrigger id=\"topic-select\" className=\"w-full\">\n+                            <SelectValue placeholder=\"Select Topic\" />\n+                          </SelectTrigger>\n+                          <SelectContent>\n+                                {topics.map((topic: Topic) => (\n+                                  <SelectItem \n+                                    key={`topic-${topic.id || 'new'}`} \n+                                    value={topic.id || ''}\n+                                  >\n+                                  <div className=\"flex items-center gap-2\">\n                                   <Layers className=\"h-4 w-4 text-primary\" />\n                                     {topic.title}\n                                   </div>\n                                 </SelectItem>\n"
                },
                {
                    "date": 1739968672349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,8 @@\n import { PostgrestError } from '@supabase/supabase-js';\n import { Question as ContentQuestion } from './types';  // Import the specific type\n import { Trash } from \"lucide-react\";\n import { AnimatePresence, motion } from 'framer-motion';\n-import { useQueryClient } from 'react-query';\n \n \n // Update the API endpoint to match your backend route\n const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\n@@ -389,40 +388,8 @@\n     type: 'topic' | 'subtopic' | 'lesson';\n     title: string;\n   } | null>(null);\n \n-  // Add these state and validation functions\n-  const [deleteError, setDeleteError] = useState<string | null>(null);\n-\n-  const canDeleteLesson = async (lessonId: string) => {\n-    const { data: questions } = await supabase\n-      .from('questions')\n-      .select('id')\n-      .eq('lesson_id', lessonId);\n-      \n-    return !questions || questions.length === 0;\n-  };\n-\n-  const canDeleteSubtopic = async (subtopicId: string) => {\n-    const { data: lessons } = await supabase\n-      .from('lessons')\n-      .select('id, questions(id)')\n-      .eq('subtopic_id', subtopicId);\n-      \n-    return !lessons || lessons.every(lesson => !lesson.questions?.length);\n-  };\n-\n-  const canDeleteTopic = async (topicId: string) => {\n-    const { data: subtopics } = await supabase\n-      .from('subtopics')\n-      .select('id, lessons(id, questions(id))')\n-      .eq('topic_id', topicId);\n-      \n-    return !subtopics || subtopics.every(subtopic => \n-      !subtopic.lessons?.some(lesson => lesson.questions?.length)\n-    );\n-  };\n-\n   // Event handlers\n   const handleQuestionTypeChange = useCallback((type: string) => {\n     if (isQuestionType(type)) {\n       setSelectedQuestionType(type);\n@@ -2164,32 +2131,36 @@\n \n                     {/* Content Tree View in View Mode */}\n                     {isViewMode && expandedGrade && (\n                       <div className=\"mt-4 space-y-4 overflow-y-auto max-h-[calc(100vh-300px)]\">\n-                        {topics.map((topic: Topic) => {\n-                          const topicSubtopics = subtopics.filter(s => s.topic_id === topic.id);\n-                          const hasContent = topicSubtopics.length > 0;\n-                          \n-                          return (\n-                            <Card key={topic.id} className={cn(\n-                              \"border-l-4 transition-all duration-200\",\n-                              !hasContent && \"border-l-destructive/40\",\n-                              expandedTopic === topic.id ? \"border-l-primary\" : \"border-l-primary/40\"\n-                            )}>\n-                              <CardHeader className=\"py-3\">\n+                        {topics.map((topic: Topic) => (\n+                          <Card \n+                            key={topic.id} \n+                            className={cn(\n+                              \"border-l-4 transition-all duration-200 hover:shadow-md\",\n+                              expandedTopic === topic.id \n+                                ? \"border-l-primary bg-accent/5\" \n+                                : \"border-l-primary/40 hover:border-l-primary\"\n+                            )}\n+                          >\n+                            <CardHeader \n+                              className=\"py-3 cursor-pointer select-none\" \n+                              onClick={() => handleTopicExpand(topic.id || '')}\n+                            >\n+                              <div className=\"flex items-center justify-between\">\n                                 <div className=\"flex items-center justify-between\">\n                                   <div className=\"flex items-center gap-2\">\n                                     <Layers className=\"h-4 w-4 text-primary\" />\n                                     <h4 className=\"font-medium\">{topic.title}</h4>\n-                                    <Badge variant={hasContent ? \"outline\" : \"destructive\"}>\n-                                      {hasContent ? `${topicSubtopics.length} Subtopics` : 'Empty'}\n+                                    <Badge variant=\"outline\" className=\"ml-2\">\n+                                      {subtopics.filter(s => s.topic_id === topic.id).length} Subtopics\n                                     </Badge>\n                                   </div>\n                                   <div className=\"flex items-center gap-2\">\n-                                    <Button\n-                                      variant=\"ghost\"\n+                                    <Button \n+                                      variant=\"ghost\" \n                                       size=\"sm\"\n-                                      onClick={(e: React.MouseEvent) => {\n+                                      onClick={(e) => {\n                                         e.stopPropagation();\n                                         setItemToDelete({\n                                           id: topic.id,\n                                           type: 'topic',\n@@ -2199,108 +2170,153 @@\n                                       }}\n                                     >\n                                       <Trash className=\"h-4 w-4\" />\n                                     </Button>\n-                                    <ChevronDown className={cn(\n-                                      \"h-4 w-4 transition-transform duration-200\",\n-                                      expandedTopic === topic.id ? \"rotate-0\" : \"-rotate-90\"\n-                                    )} />\n                                   </div>\n                                 </div>\n-                              </CardHeader>\n+                                <div className=\"flex items-center gap-2\">\n+                                  <ChevronDown className={cn(\n+                                    \"h-4 w-4 transition-transform duration-200\",\n+                                    expandedTopic === topic.id ? \"rotate-0\" : \"-rotate-90\"\n+                                  )} />\n+                                </div>\n+                              </div>\n+                            </CardHeader>\n \n-                              {/* Subtopics Section */}\n-                              <AnimatePresence>\n-                                {expandedTopic === topic.id && (\n-                                  <motion.div\n-                                    initial={{ height: 0, opacity: 0 }}\n-                                    animate={{ height: \"auto\", opacity: 1 }}\n-                                    exit={{ height: 0, opacity: 0 }}\n-                                    transition={{ duration: 0.2 }}\n-                                  >\n-                                    <CardContent className=\"pl-6\">\n-                                      {topicSubtopics.map((subtopic: SubTopic) => {\n-                                        const subtopicLessons = lessons.filter(l => l.subtopic_id === subtopic.id);\n-                                        const hasLessons = subtopicLessons.length > 0;\n-                                        \n-                                        return (\n-                                          <div key={subtopic.id} className=\"mb-4\">\n-                                            <div className=\"flex items-center justify-between\">\n-                                              <div className=\"flex items-center gap-2\">\n-                                                <BookOpen className=\"h-4 w-4 text-primary\" />\n-                                                <span className=\"font-medium\">{subtopic.title}</span>\n-                                                <Badge variant={hasLessons ? \"outline\" : \"destructive\"}>\n-                                                  {hasLessons ? `${subtopicLessons.length} Lessons` : 'Empty'}\n-                                                </Badge>\n-                                              </div>\n-                                              <Button\n-                                                variant=\"ghost\"\n-                                                size=\"sm\"\n-                                                onClick={(e: React.MouseEvent) => {\n-                                                  e.stopPropagation();\n-                                                  setItemToDelete({\n-                                                    id: subtopic.id,\n-                                                    type: 'subtopic',\n-                                                    title: subtopic.title\n-                                                  });\n-                                                  setDeleteDialogOpen(true);\n-                                                }}\n+                            <AnimatePresence>\n+                              {expandedTopic === topic.id && (\n+                                <motion.div\n+                                  initial={{ height: 0, opacity: 0 }}\n+                                  animate={{ height: \"auto\", opacity: 1 }}\n+                                  exit={{ height: 0, opacity: 0 }}\n+                                  transition={{ duration: 0.2 }}\n+                                >\n+                                  <CardContent className=\"pt-0 pb-2\">\n+                                    <div className=\"pl-4 space-y-2\">\n+                                      {isLoadingSubtopics ? (\n+                                        <div className=\"flex items-center justify-center py-4\">\n+                                          <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\n+                                        </div>\n+                                      ) : (\n+                                        subtopics\n+                                          .filter(subtopic => subtopic.topic_id === topic.id)\n+                                          .map((subtopic: SubTopic) => (\n+                                            <div \n+                                              key={subtopic.id}\n+                                              className={cn(\n+                                                \"rounded-lg border transition-colors\",\n+                                                expandedSubtopic === subtopic.id \n+                                                  ? \"bg-accent/10 border-primary/20\" \n+                                                  : \"hover:bg-accent/5\"\n+                                              )}\n+                                            >\n+                                              <div \n+                                                className=\"p-3 cursor-pointer\"\n+                                                onClick={() => handleSubtopicExpand(subtopic.id || '')}\n                                               >\n-                                                <Trash className=\"h-4 w-4\" />\n-                                              </Button>\n-                                            </div>\n-\n-                                            {/* Lessons Section */}\n-                                            {subtopicLessons.map((lesson: Lesson) => {\n-                                              const questionCount = lesson.questions?.length || 0;\n-                                              \n-                                              return (\n-                                                <div key={lesson.id} className=\"ml-6 mt-2 p-2 rounded-md hover:bg-accent/5\">\n-                                                  <div className=\"flex items-center justify-between\">\n-                                                    <div className=\"flex items-center gap-2\">\n-                                                      <div className=\"flex flex-col\">\n-                                                        <span className=\"text-sm\">{lesson.title}</span>\n-                                                        <span className=\"text-xs text-muted-foreground\">\n-                                                          {lesson.duration} mins • {questionCount} Questions\n-                                                        </span>\n-                                                      </div>\n-                                                      {questionCount === 0 && (\n-                                                        <Badge variant=\"destructive\" className=\"text-xs\">\n-                                                          No Questions\n-                                                        </Badge>\n-                                                      )}\n-                                                    </div>\n-                                                    <Button\n-                                                      variant=\"ghost\"\n+                                                <div className=\"flex items-center justify-between py-2 cursor-pointer hover:bg-accent/50 rounded-md px-2\">\n+                                                  <div className=\"flex items-center gap-2\">\n+                                                    <BookOpen className=\"h-4 w-4 text-primary\" />\n+                                                    <span className=\"text-sm font-medium\">{subtopic.name}</span>\n+                                                    <Badge variant=\"outline\" className=\"ml-2\">\n+                                                      {lessons.filter(l => l.subtopic_id === subtopic.id).length} Lessons\n+                                                    </Badge>\n+                                                  </div>\n+                                                  <div className=\"flex items-center gap-2\">\n+                                                    <Button \n+                                                      variant=\"ghost\" \n                                                       size=\"sm\"\n-                                                      onClick={(e: React.MouseEvent) => {\n+                                                      onClick={(e) => {\n                                                         e.stopPropagation();\n                                                         setItemToDelete({\n-                                                          id: lesson.id,\n-                                                          type: 'lesson',\n-                                                          title: lesson.title\n+                                                          id: subtopic.id,\n+                                                          type: 'subtopic',\n+                                                          title: subtopic.title\n                                                         });\n                                                         setDeleteDialogOpen(true);\n                                                       }}\n-                                                      disabled={questionCount > 0}\n-                                                      title={questionCount > 0 ? \"Delete questions first\" : \"Delete lesson\"}\n                                                     >\n                                                       <Trash className=\"h-4 w-4\" />\n                                                     </Button>\n+                                                    <ChevronDown className={cn(\n+                                                      \"h-4 w-4 transition-transform duration-200\",\n+                                                      expandedSubtopic === subtopic.id ? \"rotate-0\" : \"-rotate-90\"\n+                                                    )} />\n                                                   </div>\n                                                 </div>\n-                                              );\n-                                            })}\n-                                          </div>\n-                                        );\n-                                      })}\n-                                    </CardContent>\n-                                  </motion.div>\n-                                )}\n-                              </AnimatePresence>\n-                            </Card>\n-                          );\n-                        })}\n+\n+                                                <AnimatePresence>\n+                                                  {expandedSubtopic === subtopic.id && (\n+                                                    <motion.div\n+                                                      initial={{ height: 0, opacity: 0 }}\n+                                                      animate={{ height: \"auto\", opacity: 1 }}\n+                                                      exit={{ height: 0, opacity: 0 }}\n+                                                      transition={{ duration: 0.2 }}\n+                                                    >\n+                                                      <div className=\"px-3 pb-3\">\n+                                                        <div className=\"space-y-2\">\n+                                                          {isLoadingLessons ? (\n+                                                            <div className=\"flex items-center justify-center py-4\">\n+                                                              <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\n+                                                            </div>\n+                                                          ) : (\n+                                                            lessons\n+                                                              .filter(lesson => lesson.subtopic_id === subtopic.id)\n+                                                              .map((lesson: Lesson) => (\n+                                                                <div\n+                                                                  key={lesson.id}\n+                                                                  onClick={() => handleLessonSelect(lesson.id || '')}\n+                                                                  className={cn(\n+                                                                    \"flex items-center gap-3 p-2 rounded-md cursor-pointer transition-colors\",\n+                                                                    \"hover:bg-accent\",\n+                                                                    currentLessonId === lesson.id && \"bg-accent\"\n+                                                                  )}\n+                                                                >\n+                                                                  <div className=\"flex items-center gap-2 flex-1\">\n+                                                                    <div className=\"flex h-8 w-8 items-center justify-center rounded-md border bg-background\">\n+                                                                      <BookOpen className=\"h-4 w-4 text-primary\" />\n+                                                                    </div>\n+                                                                    <div className=\"flex flex-col\">\n+                                                                      <span className=\"text-sm font-medium\">{lesson.title}</span>\n+                                                                      <span className=\"text-xs text-muted-foreground\">\n+                                                                        {lesson.duration} mins • {lesson.questions?.length || 0} Questions\n+                                                                      </span>\n+                                                                    </div>\n+                                                                  </div>\n+                                                                  <Button \n+                                                                    variant=\"ghost\" \n+                                                                    size=\"sm\"\n+                                                                    onClick={(e) => {\n+                                                                      e.stopPropagation();\n+                                                                      setItemToDelete({\n+                                                                        id: lesson.id,\n+                                                                        type: 'lesson',\n+                                                                        title: lesson.title\n+                                                                      });\n+                                                                      setDeleteDialogOpen(true);\n+                                                                    }}\n+                                                                  >\n+                                                                    <Trash className=\"h-4 w-4\" />\n+                                                                  </Button>\n+                                                                </div>\n+                                                              ))\n+                                                          )}\n+                                                        </div>\n+                                                      </div>\n+                                                    </motion.div>\n+                                                  )}\n+                                                </AnimatePresence>\n+                                              </div>\n+                                            </div>\n+                                          ))\n+                                      )}\n+                                    </div>\n+                                  </CardContent>\n+                                </motion.div>\n+                              )}\n+                            </AnimatePresence>\n+                          </Card>\n+                        ))}\n                       </div>\n                     )}\n \n                     {/* Regular Edit Mode Content */}\n"
                },
                {
                    "date": 1739968739224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -388,890 +388,64 @@\n     type: 'topic' | 'subtopic' | 'lesson';\n     title: string;\n   } | null>(null);\n \n-  // Event handlers\n-  const handleQuestionTypeChange = useCallback((type: string) => {\n-    if (isQuestionType(type)) {\n-      setSelectedQuestionType(type);\n-    }\n-  }, []);\n+  // Add these types and interfaces\n+  interface DeleteValidation {\n+    canDelete: boolean;\n+    message: string;\n+  }\n \n-  const handleAddQuestion = useCallback(() => {\n-    if (!selectedQuestionType || !isQuestionType(selectedQuestionType)) return;\n+  // Add these state variables\n+  const [deleteError, setDeleteError] = useState<string | null>(null);\n \n-    const defaultData = QUESTION_TYPES[selectedQuestionType].defaultData;\n-    const newQuestion: Question = {\n-      id: crypto.randomUUID(),\n-      type: selectedQuestionType,\n-      //data: {},\n-      title: 'New Question',\n-      content: '',\n-      lesson_id: currentLessonId || '',\n-      metadata: {},\n-      data: {\n-        ...defaultData,\n-        prompt: '',\n-        teacher_script: '',\n-        followup_prompt: [],\n-        sample_answer: ''\n-      },\n-      correct_answer: '',\n-      exercisePrompts: [],\n-      isDraft: true\n-    };\n-\n-    setQuestions(prev => [...prev, newQuestion]);\n-    setQuestionSaveStatuses(prev => [\n-      ...prev,\n-      { id: newQuestion.id, status: 'draft' }\n-    ]);\n-    setSelectedQuestionType('');\n-  }, [selectedQuestionType, currentLessonId]);\n-\n-  const handleRemoveQuestion = async (index: number) => {\n-    try {\n-      const questionToDelete = questions[index];\n-      \n-      // Delete related exercise prompts first\n-      const { error: promptError } = await supabase\n-        .from('exercise_prompts')\n-        .delete()\n-        .eq('question_id', questionToDelete.id);\n-\n-      if (promptError) throw promptError;\n-\n-      // Then delete the question\n-      const { error: questionError } = await supabase\n-        .from('questions')\n-        .delete()\n-        .eq('id', questionToDelete.id);\n-\n-      if (questionError) throw questionError;\n-\n-      // Update local state\n-      const newQuestions = questions.filter((_, i) => i !== index);\n-      setQuestions(newQuestions);\n-      \n-      toast.success('Question and related prompts deleted successfully');\n-    } catch (error) {\n-      console.error('Error deleting question:', error);\n-      toast.error('Failed to delete question and prompts');\n-    }\n-  };\n-\n-  const handleUpdateQuestion = useCallback(async (index: number, updatedQuestion: Question) => {\n-    const newQuestions = [...questions];\n-    newQuestions[index] = updatedQuestion;\n-    setQuestions(newQuestions);\n-    setQuestionSaveStatuses(prev => prev.map((status, i) => \n-      i === index ? { ...status, status: 'draft' } : status\n-    ));\n-  }, [questions]);\n-\n-  const handleAddExercisePrompt = useCallback((questionIndex: number) => {\n-    setQuestions(prev => prev.map((question, i) => {\n-      if (i === questionIndex) {\n-        return {\n-          ...question,\n-          exercisePrompts: [\n-            ...question.exercisePrompts,\n-            {\n-              id: crypto.randomUUID(),\n-              text: '',\n-              media: '',\n-              type: 'image',\n-              narration: 'Your turn',\n-              saytext: 'Say: ',\n-              metadata: {\n-                estimatedTime: 0\n-              },\n-              created_at: new Date().toISOString(),\n-              updated_at: new Date().toISOString()\n-            }\n-          ]\n-        };\n-      }\n-      return question;\n-    }));\n-  }, []);\n-\n-  const handleRemoveExercisePrompt = useCallback((questionIndex: number, promptIndex: number) => {\n-    setQuestions(prev => prev.map((question, i) => {\n-      if (i === questionIndex) {\n-        return {\n-          ...question,\n-          exercisePrompts: question.exercisePrompts.filter((_, j) => j !== promptIndex)\n-        };\n-      }\n-      return question;\n-    }));\n-  }, []);\n-\n-  const handleExercisePromptChange = useCallback(async (\n-    questionIndex: number,\n-    promptIndex: number,\n-    updatedPrompt: ExercisePrompt\n-  ) => {\n-    try {\n-      const promptUpdate = {\n-        id: updatedPrompt.id,\n-        question_id: updatedPrompt.question_id,\n-        text: updatedPrompt.text,\n-        type: updatedPrompt.type,\n-        narration: updatedPrompt.narration,\n-        saytext: updatedPrompt.saytext,\n-        media: updatedPrompt.media,\n-        // Remove order_index as it's not in schema\n-        created_at: new Date().toISOString()\n-      };\n-\n-      const { error: promptError } = await supabase\n-        .from('exercise_prompts')\n-        .upsert(promptUpdate)\n-        .select();\n-\n-      if (promptError) throw promptError;\n-\n-      // Update local state\n-      setQuestions(prev => prev.map((question, i) => {\n-        if (i === questionIndex) {\n-          const newPrompts = [...question.exercisePrompts];\n-          newPrompts[promptIndex] = updatedPrompt;\n-          return { ...question, exercisePrompts: newPrompts };\n-        }\n-        return question;\n-      }));\n-\n-    } catch (error) {\n-      console.error('Error saving prompt:', error);\n-      toast.error('Failed to save prompt');\n-    }\n-  }, []);\n-\n-  const handleAddActivity = useCallback(() => {\n-    const newActivity: Activity = {\n-      id: crypto.randomUUID(),\n-      lesson_id: currentLessonId || '',\n-      created_at: new Date().toISOString(),\n-      type: 'practice',\n-      title: '',\n-      name: '',\n-      instructions: '',\n-      media: [],\n-      data: {\n-        prompt: '',\n-        teacherScript: '',\n-        media: []\n-      }\n-    };\n-    setActivities(prev => [...prev, newActivity]);\n-  }, [currentLessonId]);\n-\n-  const handleUpdateActivity = useCallback((index: number, updatedActivity: Activity) => {\n-    setActivities(prev => prev.map((activity, i) => i === index ? updatedActivity : activity));\n-  }, []);\n-\n-  const handleRemoveActivity = useCallback((index: number) => {\n-    setActivities(prev => prev.filter((_, i) => i !== index));\n-  }, []);\n-\n-  const handleExercisePromptUpdate = useCallback((questionIndex: number, promptIndex: number, updatedPrompt: ExercisePrompt) => {\n-    const updatedQuestions = [...questions];\n-    updatedQuestions[questionIndex].exercisePrompts[promptIndex] = updatedPrompt;\n-    handleUpdateQuestion(questionIndex, updatedQuestions[questionIndex]);\n-  }, [questions, handleUpdateQuestion]);\n-\n-  const handleQuestionDataChange = useCallback((questionIndex: number, field: string, value: string) => {\n-    setQuestions(prev => prev.map((q, i) => \n-      i === questionIndex \n-        ? { \n-            ...q, \n-            data: { \n-              prompt: q.data?.prompt || '',\n-              teacherScript: q.data?.teacherScript || '',\n-              ...q.data,\n-              [field]: value \n-            } \n-          }\n-        : q\n-    ));\n-  }, []);\n-\n-  const [isSaving, setIsSaving] = useState(false);\n-\n-  const handleSaveLesson = async () => {\n-    try {\n-      if (!currentLessonId || !selectedSubtopicId) {\n-        toast.error('Please select a subtopic and lesson first');\n-        return;\n-      }\n-\n-      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\n-      if (sessionError) throw sessionError;\n-      \n-      if (!session?.user) {\n-        toast.error('Please sign in to save lessons');\n-        return;\n-      }\n-\n-      // Get user's role from session\n-      const userRole = session.user.user_metadata?.role;\n-      console.log('Current user role:', userRole);\n-      console.log('📝 Saving content heading:', {\n-        contentHeading,\n-        currentLessonId,\n-        selectedSubtopicId,\n-        timestamp: new Date().toISOString()\n-      });\n-\n-      // Create metadata object\n-      const lessonMetadata = {\n-        lastEdited: new Date().toISOString(),\n-        version: 1,\n-        status: 'draft' \n-      };\n-\n-      // Complete lesson data with all fields\n-      const lessonData = {\n-        id: currentLessonId,\n-        title: lessonTitle,\n-        content: lessonContent,\n-        metadata: lessonMetadata, // Supabase will automatically handle JSON conversion\n-        content_type: 'html',\n-        lesson_type: 'lesson',\n-        grade_id: selectedGradeId,\n-        topic_id: selectedTopicId,\n-        subtopic_id: selectedSubtopicId,\n-        user_id: session.user.id,\n-        updated_at: new Date().toISOString(),\n-        role: userRole, // Include role in the payload\n-        description: '',\n-        prerequisites: [],\n-        media_type: 'image',\n-        media_url: '',\n-        contentheading: contentHeading || ''\n-      };\n-\n-      console.log('📦 Data being sent to Supabase:', lessonData);\n-\n-      // Save lesson with all fields\n-      const { data, error: lessonError } = await supabase\n-        .from('lessons')\n-        .upsert(lessonData, { \n-          onConflict: 'id'\n-        })\n-        .select();\n-\n-      if (lessonError) throw lessonError;\n-\n-      // 2. Save lesson content\n-      const { data: existingContent } = await supabase\n-        .from('lesson_content')\n-        .select('id')\n-        .eq('lesson_id', currentLessonId)\n-        .single();\n-\n-      const contentMetadata = {\n-        lastEdited: new Date().toISOString(),\n-        version: 1,\n-        status: 'draft'\n-      };\n-\n-      const contentUpdate = {\n-        id: existingContent?.id || crypto.randomUUID(),\n-        lesson_id: currentLessonId,\n-        content: [lessonContent],\n-        metadata: contentMetadata, // Supabase will automatically handle JSON conversion\n-        content_type: 'html',\n-        user_id: session.user.id,\n-        updated_at: new Date().toISOString(),\n-        created_at: new Date().toISOString()\n-      };\n-\n-      const { error: contentError } = await supabase\n-        .from('lesson_content')\n-        .upsert(contentUpdate, { onConflict: 'id' });\n-\n-      if (contentError) throw contentError;\n-\n-      // 3. Save questions\n-      for (const question of questions) {\n-        const questionData = {\n-          id: question.id,\n-          lesson_id: currentLessonId,\n-          type: question.type,\n-          title: question.title,\n-          metadata: question.metadata,\n-          data: question.data,\n-          updated_at: new Date().toISOString(),\n-          user_id: session.user.id\n-        };\n-\n-        const { error: questionError } = await supabase\n+  // Add this validation function\n+  const validateDelete = async (type: 'topic' | 'subtopic' | 'lesson', id: string): Promise<DeleteValidation> => {\n+    switch (type) {\n+      case 'lesson':\n+        const { data: questions } = await supabase\n           .from('questions')\n-          .upsert(questionData, { onConflict: 'id' });\n-\n-        if (questionError) throw questionError;\n-\n-        //4. Save exercise prompts for this question\n-        if (question.exercisePrompts) {\n-          for (const prompt of question.exercisePrompts) {\n-            const promptData = {\n-              id: prompt.id,\n-              question_id: question.id,\n-              text: prompt.text,\n-              media: prompt.media,\n-              type: prompt.type,\n-              narration: prompt.narration,\n-              saytext: prompt.saytext,\n-              user_id: session.user.id,\n-              updated_at: new Date().toISOString()\n-            };\n-\n-            const { error: promptError } = await supabase\n-              .from('exercise_prompts')\n-              .upsert(promptData, { onConflict: 'id' });\n-\n-            if (promptError) throw promptError;\n-          }\n-        }\n-      }\n-\n-      // 5. Save activities\n-      if (activities.length > 0) {\n-        const activitiesData = activities.map(activity => ({\n-          id: activity.id,\n-          lesson_id: currentLessonId,\n-          type: activity.type,\n-          title: activity.title,\n-          name: activity.name,\n-          instructions: activity.instructions,\n-          media: activity.media,\n-          data: activity.data,\n-          created_at: new Date().toISOString()\n-        }));\n-\n-        const { error: activitiesError } = await supabase\n-          .from('activities')\n-          .upsert(activitiesData, { onConflict: 'id' });\n-\n-        if (activitiesError) throw activitiesError;\n-      }\n-\n-      // After successful save\n-      console.log('✅ Content heading saved successfully:', {\n-        contentHeading,\n-        lessonId: currentLessonId,\n-        timestamp: new Date().toISOString()\n-      });\n-\n-      toast.success('Lesson saved successfully');\n-    } catch (err) {\n-      const error = err as PostgrestError;\n-      console.error('❌ Error saving content heading:', {\n-        error: error.message,\n-        contentHeading,\n-        lessonContent,\n-        lessonId: currentLessonId,\n-        timestamp: new Date().toISOString()\n-      });\n-      toast.error(`Failed to save lesson: ${error.message}`);\n-\n-\n-    }\n-  };\n-\n-  const handleSaveQuestion = async (question: Question, index: number) => {\n-    const loadingToast = toast.loading(`Saving question ${index + 1}...`);\n-    \n-    try {\n-      const { data: { session } } = await supabase.auth.getSession();\n-      if (!session?.user) {\n-        toast.error('Please sign in to save question', { id: loadingToast });\n-        return;\n-      }\n-\n-      // Save question\n-      const questionData = {\n-        id: question.id,\n-        lesson_id: currentLessonId,\n-        type: question.type,\n-        title: question.title,\n-        metadata: question.metadata,\n-        data: {\n-          prompt: question.data?.prompt ?? '',\n-          teacherScript: question.data?.teacherScript ?? '',\n-          followup_prompt: question.data?.followup_prompt ?? [],\n-          sampleAnswer: question.data?.sampleAnswer || undefined,  // Convert null to undefined\n-          answer: question.data?.answer || undefined  // Convert null to undefined\n-        } as const,\n-        user_id: session.user.id,\n-        updated_at: new Date().toISOString()\n-      };\n-\n-      const { error: questionError } = await supabase\n-        .from('questions')\n-        .upsert(questionData, { onConflict: 'id' });\n-\n-      if (questionError) throw questionError;\n-\n-      // Save exercise prompts if they exist\n-      if (question.exercisePrompts?.length) {\n-        for (const prompt of question.exercisePrompts) {\n-          const promptData = {\n-            id: prompt.id,\n-            question_id: question.id,\n-            text: prompt.text,\n-            type: prompt.type,\n-            narration: prompt.narration,\n-            saytext: prompt.saytext,\n-            media: prompt.media,\n-            user_id: session.user.id,\n-            updated_at: new Date().toISOString()\n+          .select('id')\n+          .eq('lesson_id', id);\n+        \n+        if (questions && questions.length > 0) {\n+          return {\n+            canDelete: false,\n+            message: `Cannot delete lesson. Please delete ${questions.length} questions first.`\n           };\n-\n-          const { error: promptError } = await supabase\n-            .from('exercise_prompts')\n-            .upsert(promptData, { onConflict: 'id' });\n-\n-          if (promptError) throw promptError;\n         }\n-      }\n+        break;\n \n-      toast.success(`Question ${index + 1} saved successfully`, { id: loadingToast });\n-    } catch (error) {\n-      console.error('Error saving question:', error);\n-      toast.error(`Failed to save question ${index + 1}`, { id: loadingToast });\n-    }\n-  };\n-\n-  const handleSaveActivity = async (activity: Activity) => {\n-    try {\n-      await contentService.saveActivity(activity);\n-      toast.success('Activity saved');\n-    } catch (error) {\n-      console.error('Failed to save activity:', error);\n-      toast.error('Failed to save activity');\n-    }\n-  };\n-\n-  // Effects\n-  useEffect(() => {\n-    const fetchGrades = async () => {\n-      try {\n-        const { data, error } = await supabase\n-          .from('grades')\n-          .select('*')\n-          .order('name');\n-\n-        if (error) {\n-          console.error('Supabase error:', error);\n-          throw error;\n-        }\n-\n-        if (!data) {\n-          throw new Error('No data returned from Supabase');\n-        }\n-\n-        // Map the grades to match your interface\n-        const validGrades = data.map((grade: any) => ({\n-          _id: grade.id,\n-          id: grade.id,\n-          name: grade.name,\n-          level: grade.level || 0,  // Add default value if not provided\n-          orderIndex: grade.order_index || 0,  // Add default value if not provided\n-          topics: []\n-        }));\n+      case 'subtopic':\n+        const { data: lessons } = await supabase\n+          .from('lessons')\n+          .select('id, questions(id)')\n+          .eq('subtopic_id', id);\n         \n-        setGrades(validGrades);\n-      } catch (error) {\n-        console.error('Error fetching grades:', error);\n-        toast.error('Failed to fetch grades');\n-      }\n-    };\n-\n-    fetchGrades();\n-  }, []);\n-\n-  // Topic Selection\n-  useEffect(() => {\n-    const fetchTopics = async () => {\n-      if (!selectedGradeId) return;\n-      \n-      try {\n-        const { data, error } = await supabase\n-          .from('topics')\n-          .select('*')\n-          .eq('grade_id', selectedGradeId)\n-          .order('title');\n-\n-        if (error) {\n-          throw error;\n+        if (lessons && lessons.some(lesson => lesson.questions.length > 0)) {\n+          return {\n+            canDelete: false,\n+            message: 'Cannot delete subtopic. Please delete all questions from lessons first.'\n+          };\n         }\n+        break;\n \n-        // Map the topics to match your interface\n-        const validTopics = (data || []).map((topic: any) => ({\n-          _id: topic.id,\n-          id: topic.id,\n-          name: topic.title,\n-          title: topic.title,\n-          grade_id: topic.grade_id,\n-          subtopics: []\n-        }));\n+      case 'topic':\n+        const { data: subtopics } = await supabase\n+          .from('subtopics')\n+          .select('id, lessons(questions(id))')\n+          .eq('topic_id', id);\n         \n-        setTopics(validTopics);\n-      } catch (error) {\n-        console.error('Error fetching topics:', error);\n-        toast.error('Failed to fetch topics');\n-      }\n-    };\n-\n-    fetchTopics();\n-  }, [selectedGradeId]);\n-\n-  // Subtopic Selection\n-  useEffect(() => {\n-    const fetchSubtopics = async () => {\n-      if (!selectedTopicId) return;\n-      \n-      try {\n-        // Use content service to fetch subtopics\n-        const subtopicsData = await contentService.fetchSubtopics(selectedTopicId);\n-        console.log('Fetched subtopics:', subtopicsData);\n-\n-        const validSubtopics = subtopicsData.map((subtopic: any) => ({\n-          id: subtopic.id,\n-          title: subtopic.title,\n-          description: subtopic.description,\n-          topic_id: subtopic.topic_id,\n-          lessons: [],\n-          order_index: subtopicsData.length\n-        }));\n-        \n-        setSubtopics(validSubtopics);\n-        \n-        // Update global state\n-        if (selectedSubtopic) {\n-          setSelectedSubtopic(selectedSubtopic);\n+        if (subtopics && subtopics.some(sub => sub.lessons.some(les => les.questions.length > 0))) {\n+          return {\n+            canDelete: false,\n+            message: 'Cannot delete topic. Please delete all questions from lessons first.'\n+          };\n         }\n-      } catch (err) {\n-        const error = err as Error;\n-        console.error('Error fetching subtopics:', error);\n-        toast.error('Failed to fetch subtopics');\n-      }\n-    };\n-\n-    fetchSubtopics();\n-  }, [selectedTopicId, selectedSubtopic, setSelectedSubtopic]);\n-\n-  // Add effect to monitor subtopics state\n-  useEffect(() => {\n-    console.log('Current subtopics state:', subtopics);\n-  }, [subtopics]);\n-\n-  // Add fetchLessons function\n-  const fetchLessons = useCallback(async () => {\n-    if (!selectedSubtopicId) return;\n-    try {\n-      const { data, error } = await supabase\n-        .from('lessons')\n-        .select('*')\n-        .eq('subtopic_id', selectedSubtopicId)\n-        .order('title');\n-\n-      if (error) {\n-        throw error;\n-      }\n-      \n-      // Map the lessons to ensure they have _id\n-      const validLessons = (data || []).map((lesson: any) => ({\n-        ...lesson,\n-        _id: lesson._id || lesson.id, // Use _id if available, otherwise use id\n-        title: lesson.title || 'Untitled Lesson'\n-      })).filter((lesson: any) => lesson._id); // Only include lessons with valid IDs\n-      \n-      setLessons(validLessons);\n-    } catch (error) {\n-      console.error('Error fetching lessons:', error);\n-      toast.error('Failed to fetch lessons');\n+        break;\n     }\n-  }, [selectedSubtopicId]);\n-  // Add loadLessonContent function\n-  const isLoading = useRef(false);\n-  const loadLessonContent = useCallback(async (lessonId: string) => {\n-    // Prevent multiple simultaneous loads\n-    if (isLoading.current) return;\n-    isLoading.current = true;\n \n-    const controller = new AbortController();\n-\n-    try {\n-      // Clear existing content first\n-      setLessonTitle('');\n-      setContentHeading('');\n-      setLessonContent('');\n-      setQuestions([]);\n-      \n-      // First fetch lesson data\n-      const { data: lessonData, error: lessonError } = await supabase\n-        .from('lessons')\n-        .select('*')\n-        .eq('id', lessonId)\n-        .single()\n-        \n-\n-      if (lessonError) {\n-        console.error('Lesson fetch error:', lessonError);\n-        throw lessonError;\n-      }\n-\n-      // Set lesson data\n-      setLessonTitle(lessonData.title || '');\n-      setContentHeading(lessonData.content || '');\n-\n-      // Then fetch lesson content with explicit headers\n-      const { data: contentData, error: contentError } = await supabase\n-        .from('lesson_content')\n-        .select('*')\n-        .eq('lesson_id', lessonId)\n-        .order('updated_at', { ascending: false })\n-        .limit(1)\n-        .maybeSingle();\n-\n-      if (contentError) {\n-        console.error('Content fetch error:', contentError);\n-        throw contentError;\n-      }\n-\n-      // Set content if available\n-      if (contentData?.content) {\n-        setLessonContent(typeof contentData.content === 'string' \n-          ? contentData.content \n-          : JSON.stringify(contentData.content)\n-        );\n-      }\n-\n-    } catch (error: unknown) {\n-      if (error instanceof Error && error.name === 'AbortError') {\n-        console.log('Request aborted');\n-        return;\n-      }\n-      console.error('Error loading lesson:', error);\n-      toast.error('Failed to load lesson content');\n-      \n-      // Reset states on error\n-      setLessonTitle('');\n-      setContentHeading('');\n-      setLessonContent('');\n-      setQuestions([]);\n-    } finally {\n-      isLoading.current = false;\n-    }\n-\n-    return () => {\n-      controller.abort();\n-    };\n-  }, []); // Empty dependencies since we're using closure over state setters\n-\n-  // // Add effect for fetching lessons when subtopic changes\n-  useEffect(() => {\n-    if (selectedSubtopicId) {\n-      fetchLessons();\n-    }\n-  }, [selectedSubtopicId, fetchLessons]);\n-\n-  // Add effect for loading lesson content when currentLessonId changes\n-    useEffect(() => {\n-    let isMounted = true;\n-    let timeoutId: NodeJS.Timeout;\n-\n-    const loadContent = async () => {\n-      if (!currentLessonId || !isMounted) return;\n-\n-      // Clear previous timeout if exists\n-      if (timeoutId) clearTimeout(timeoutId);\n-\n-      // Set new timeout for debouncing\n-      timeoutId = setTimeout(() => {\n-        if (isMounted) {\n-          loadLessonContent(currentLessonId);\n-        }\n-      }, 300);\n-    };\n-\n-    loadContent();\n-\n-    // Cleanup function\n-    return () => {\n-      isMounted = false;\n-      if (timeoutId) clearTimeout(timeoutId);\n-      if (isLoading.current) isLoading.current = false;\n-    };\n-  }, [currentLessonId]); // Remove loadLessonContent from dependencies\n-\n-  useEffect(() => {\n-    console.log('Current lessons state:', lessons);\n-  }, [lessons]);\n-\n-    // Add keyboard shortcut for saving\n-  useEffect(() => {\n-    const handleKeyDown = (e: KeyboardEvent) => {\n-      if ((e.ctrlKey || e.metaKey) && e.key === 's') {\n-        e.preventDefault();\n-        handleSaveLesson();\n-      }\n-    };\n-\n-    window.addEventListener('keydown', handleKeyDown);\n-    return () => window.removeEventListener('keydown', handleKeyDown);\n-  }, [handleSaveLesson]);\n-\n-  // Add SaveFeedback component\n-  const SaveFeedback = useCallback(() => {\n-    if (saveProgress === 'idle') return null;\n-\n-    return (\n-    <div className=\"fixed bottom-4 right-4\">\n-      {saveProgress === 'saving' && (\n-        <div className=\"flex items-center gap-2 bg-background border rounded-lg px-4 py-2 shadow-lg\">\n-          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n-          <span className=\"text-sm\">Saving changes...</span>\n-        </div>\n-      )}\n-      {saveProgress === 'saved' && (\n-        <div className=\"flex items-center gap-2 bg-green-500 text-white rounded-lg px-4 py-2 shadow-lg\">\n-          <Check className=\"h-4 w-4\" />\n-          <span className=\"text-sm\">Changes saved</span>\n-        </div>\n-      )}\n-      {saveProgress === 'error' && (\n-        <div className=\"flex items-center gap-2 bg-destructive text-destructive-foreground rounded-lg px-4 py-2 shadow-lg\">\n-          <X className=\"h-4 w-4\" />\n-          <span className=\"text-sm\">Error saving changes</span>\n-        </div>\n-      )}\n-    </div>\n-  );\n-  }, [saveProgress]);\n-\n-  // Update handlers\n-  const handleGradeSelect = (gradeId: string) => {\n-    // Always keep sidebar open during selection\n-    setIsSidebarCollapsed(false);\n-    setIsSidebarLocked(true);\n-    \n-    // Batch state updates\n-    requestAnimationFrame(() => {\n-      setSelectedGradeId(gradeId);\n-      setSelectedGrade(gradeId);\n-      setSelectedTopicId(null);\n-      setSelectedTopic('');\n-      setSelectedSubtopicId(null);\n-      setSelectedSubtopic('');\n-      setCurrentLessonId(null);\n-      \n-      if (isViewMode) {\n-        setExpandedGrade(gradeId);\n-      }\n-    });\n-  };\n-\n-  const handleTopicSelect = (value: string) => {\n-    setSelectedTopicId(value);\n-    setSelectedTopic(value);\n-    setSelectedSubtopicId(null);\n-    setSelectedSubtopic('');\n-    setCurrentLessonId(null);\n-  };\n-\n-  const handleSubtopicSelect = (value: string) => {\n-    setSelectedSubtopicId(value);\n-    setSelectedSubtopic(value);\n-    setCurrentLessonId(null);\n-  };\n-\n-  const handleLessonSelect = async (lessonId: string) => {\n-    try {\n-      // Lock sidebar during selection\n-      setIsSidebarLocked(true);\n-      setIsSidebarCollapsed(false);\n-      setCurrentLessonId(lessonId);\n-      \n-      // 1. Fetch lesson data\n-      const { data: lessonData, error: lessonError } = await supabase\n-        .from('lessons')\n-        .select('*')\n-        .eq('id', lessonId)\n-        .single();\n-\n-      if (lessonError) throw lessonError;\n-\n-      // 2. Fetch questions with exercise prompts\n-      const { data: questionsData, error: questionsError } = await supabase\n-        .from('questions')\n-        .select(`\n-          *,\n-          exercise_prompts (*)\n-        `)\n-        .eq('lesson_id', lessonId);\n-\n-      if (questionsError) throw questionsError;\n-\n-      // 3. Fetch activities - removed order_index\n-      const { data: activitiesData, error: activitiesError } = await supabase\n-        .from('activities')\n-        .select('*')\n-        .eq('lesson_id', lessonId);\n-\n-      if (activitiesError) throw activitiesError;\n-\n-      // Format questions with their exercise prompts\n-      const formattedQuestions = questionsData?.map(q => ({\n-        ...q,\n-        data: q.data || {},\n-        exercisePrompts: q.exercise_prompts || []\n-      })) || [];\n-\n-      // Set all states\n-      setLessonTitle(lessonData.title || '');\n-      setLessonContent(lessonData.content || '');\n-      setQuestions(formattedQuestions);\n-      setActivities(activitiesData || []);\n-\n-      // After successful load, unlock sidebar and allow collapse\n-      setTimeout(() => {\n-        setIsSidebarLocked(false);\n-        if (!isSidebarLocked) {\n-          setIsSidebarCollapsed(true);\n-        }\n-      }, 300);\n-\n-    } catch (error) {\n-      console.error('Error loading lesson:', error);\n-      toast.error('Failed to load lesson');\n-      // Reset states on error\n-      setLessonTitle('');\n-      setLessonContent('');\n-      setQuestions([]);\n-      setActivities([]);\n-    }\n-    if (!isSidebarLocked) {\n-      setIsSidebarCollapsed(true);\n-    }\n-  };\n-\n-  // Update the expansion handlers\n-  const handleTopicExpand = async (topicId: string) => {\n-    setExpandedTopic(expandedTopic === topicId ? null : topicId);\n-    setSelectedTopicId(topicId);\n-    \n-    // Load subtopics when topic is expanded\n-    if (topicId) {\n-      setIsLoadingSubtopics(true);\n-      try {\n-        const { data: subtopicsData, error } = await supabase\n-          .from('subtopics')\n+    return { canDelete: true, message: '' };\n           .select('*')\n           .eq('topic_id', topicId)\n           .order('order_index');\n \n"
                },
                {
                    "date": 1739968745301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -444,8 +444,13 @@\n         break;\n     }\n \n     return { canDelete: true, message: '' };\n+  };\n+\n+  // Event handlers\n+  const handleQuestionTypeChange = useCallback((type: string) => {\n+    if (isQuestionType(type)) {\n           .select('*')\n           .eq('topic_id', topicId)\n           .order('order_index');\n \n"
                },
                {
                    "date": 1739968753274,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -449,9 +449,888 @@\n \n   // Event handlers\n   const handleQuestionTypeChange = useCallback((type: string) => {\n     if (isQuestionType(type)) {\n+      setSelectedQuestionType(type);\n+    }\n+  }, []);\n+\n+  const handleAddQuestion = useCallback(() => {\n+    if (!selectedQuestionType || !isQuestionType(selectedQuestionType)) return;\n+\n+    const defaultData = QUESTION_TYPES[selectedQuestionType].defaultData;\n+    const newQuestion: Question = {\n+      id: crypto.randomUUID(),\n+      type: selectedQuestionType,\n+      //data: {},\n+      title: 'New Question',\n+      content: '',\n+      lesson_id: currentLessonId || '',\n+      metadata: {},\n+      data: {\n+        ...defaultData,\n+        prompt: '',\n+        teacher_script: '',\n+        followup_prompt: [],\n+        sample_answer: ''\n+      },\n+      correct_answer: '',\n+      exercisePrompts: [],\n+      isDraft: true\n+    };\n+\n+    setQuestions(prev => [...prev, newQuestion]);\n+    setQuestionSaveStatuses(prev => [\n+      ...prev,\n+      { id: newQuestion.id, status: 'draft' }\n+    ]);\n+    setSelectedQuestionType('');\n+  }, [selectedQuestionType, currentLessonId]);\n+\n+  const handleRemoveQuestion = async (index: number) => {\n+    try {\n+      const questionToDelete = questions[index];\n+      \n+      // Delete related exercise prompts first\n+      const { error: promptError } = await supabase\n+        .from('exercise_prompts')\n+        .delete()\n+        .eq('question_id', questionToDelete.id);\n+\n+      if (promptError) throw promptError;\n+\n+      // Then delete the question\n+      const { error: questionError } = await supabase\n+        .from('questions')\n+        .delete()\n+        .eq('id', questionToDelete.id);\n+\n+      if (questionError) throw questionError;\n+\n+      // Update local state\n+      const newQuestions = questions.filter((_, i) => i !== index);\n+      setQuestions(newQuestions);\n+      \n+      toast.success('Question and related prompts deleted successfully');\n+    } catch (error) {\n+      console.error('Error deleting question:', error);\n+      toast.error('Failed to delete question and prompts');\n+    }\n+  };\n+\n+  const handleUpdateQuestion = useCallback(async (index: number, updatedQuestion: Question) => {\n+    const newQuestions = [...questions];\n+    newQuestions[index] = updatedQuestion;\n+    setQuestions(newQuestions);\n+    setQuestionSaveStatuses(prev => prev.map((status, i) => \n+      i === index ? { ...status, status: 'draft' } : status\n+    ));\n+  }, [questions]);\n+\n+  const handleAddExercisePrompt = useCallback((questionIndex: number) => {\n+    setQuestions(prev => prev.map((question, i) => {\n+      if (i === questionIndex) {\n+        return {\n+          ...question,\n+          exercisePrompts: [\n+            ...question.exercisePrompts,\n+            {\n+              id: crypto.randomUUID(),\n+              text: '',\n+              media: '',\n+              type: 'image',\n+              narration: 'Your turn',\n+              saytext: 'Say: ',\n+              metadata: {\n+                estimatedTime: 0\n+              },\n+              created_at: new Date().toISOString(),\n+              updated_at: new Date().toISOString()\n+            }\n+          ]\n+        };\n+      }\n+      return question;\n+    }));\n+  }, []);\n+\n+  const handleRemoveExercisePrompt = useCallback((questionIndex: number, promptIndex: number) => {\n+    setQuestions(prev => prev.map((question, i) => {\n+      if (i === questionIndex) {\n+        return {\n+          ...question,\n+          exercisePrompts: question.exercisePrompts.filter((_, j) => j !== promptIndex)\n+        };\n+      }\n+      return question;\n+    }));\n+  }, []);\n+\n+  const handleExercisePromptChange = useCallback(async (\n+    questionIndex: number,\n+    promptIndex: number,\n+    updatedPrompt: ExercisePrompt\n+  ) => {\n+    try {\n+      const promptUpdate = {\n+        id: updatedPrompt.id,\n+        question_id: updatedPrompt.question_id,\n+        text: updatedPrompt.text,\n+        type: updatedPrompt.type,\n+        narration: updatedPrompt.narration,\n+        saytext: updatedPrompt.saytext,\n+        media: updatedPrompt.media,\n+        // Remove order_index as it's not in schema\n+        created_at: new Date().toISOString()\n+      };\n+\n+      const { error: promptError } = await supabase\n+        .from('exercise_prompts')\n+        .upsert(promptUpdate)\n+        .select();\n+\n+      if (promptError) throw promptError;\n+\n+      // Update local state\n+      setQuestions(prev => prev.map((question, i) => {\n+        if (i === questionIndex) {\n+          const newPrompts = [...question.exercisePrompts];\n+          newPrompts[promptIndex] = updatedPrompt;\n+          return { ...question, exercisePrompts: newPrompts };\n+        }\n+        return question;\n+      }));\n+\n+    } catch (error) {\n+      console.error('Error saving prompt:', error);\n+      toast.error('Failed to save prompt');\n+    }\n+  }, []);\n+\n+  const handleAddActivity = useCallback(() => {\n+    const newActivity: Activity = {\n+      id: crypto.randomUUID(),\n+      lesson_id: currentLessonId || '',\n+      created_at: new Date().toISOString(),\n+      type: 'practice',\n+      title: '',\n+      name: '',\n+      instructions: '',\n+      media: [],\n+      data: {\n+        prompt: '',\n+        teacherScript: '',\n+        media: []\n+      }\n+    };\n+    setActivities(prev => [...prev, newActivity]);\n+  }, [currentLessonId]);\n+\n+  const handleUpdateActivity = useCallback((index: number, updatedActivity: Activity) => {\n+    setActivities(prev => prev.map((activity, i) => i === index ? updatedActivity : activity));\n+  }, []);\n+\n+  const handleRemoveActivity = useCallback((index: number) => {\n+    setActivities(prev => prev.filter((_, i) => i !== index));\n+  }, []);\n+\n+  const handleExercisePromptUpdate = useCallback((questionIndex: number, promptIndex: number, updatedPrompt: ExercisePrompt) => {\n+    const updatedQuestions = [...questions];\n+    updatedQuestions[questionIndex].exercisePrompts[promptIndex] = updatedPrompt;\n+    handleUpdateQuestion(questionIndex, updatedQuestions[questionIndex]);\n+  }, [questions, handleUpdateQuestion]);\n+\n+  const handleQuestionDataChange = useCallback((questionIndex: number, field: string, value: string) => {\n+    setQuestions(prev => prev.map((q, i) => \n+      i === questionIndex \n+        ? { \n+            ...q, \n+            data: { \n+              prompt: q.data?.prompt || '',\n+              teacherScript: q.data?.teacherScript || '',\n+              ...q.data,\n+              [field]: value \n+            } \n+          }\n+        : q\n+    ));\n+  }, []);\n+\n+  const [isSaving, setIsSaving] = useState(false);\n+\n+  const handleSaveLesson = async () => {\n+    try {\n+      if (!currentLessonId || !selectedSubtopicId) {\n+        toast.error('Please select a subtopic and lesson first');\n+        return;\n+      }\n+\n+      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\n+      if (sessionError) throw sessionError;\n+      \n+      if (!session?.user) {\n+        toast.error('Please sign in to save lessons');\n+        return;\n+      }\n+\n+      // Get user's role from session\n+      const userRole = session.user.user_metadata?.role;\n+      console.log('Current user role:', userRole);\n+      console.log('📝 Saving content heading:', {\n+        contentHeading,\n+        currentLessonId,\n+        selectedSubtopicId,\n+        timestamp: new Date().toISOString()\n+      });\n+\n+      // Create metadata object\n+      const lessonMetadata = {\n+        lastEdited: new Date().toISOString(),\n+        version: 1,\n+        status: 'draft' \n+      };\n+\n+      // Complete lesson data with all fields\n+      const lessonData = {\n+        id: currentLessonId,\n+        title: lessonTitle,\n+        content: lessonContent,\n+        metadata: lessonMetadata, // Supabase will automatically handle JSON conversion\n+        content_type: 'html',\n+        lesson_type: 'lesson',\n+        grade_id: selectedGradeId,\n+        topic_id: selectedTopicId,\n+        subtopic_id: selectedSubtopicId,\n+        user_id: session.user.id,\n+        updated_at: new Date().toISOString(),\n+        role: userRole, // Include role in the payload\n+        description: '',\n+        prerequisites: [],\n+        media_type: 'image',\n+        media_url: '',\n+        contentheading: contentHeading || ''\n+      };\n+\n+      console.log('📦 Data being sent to Supabase:', lessonData);\n+\n+      // Save lesson with all fields\n+      const { data, error: lessonError } = await supabase\n+        .from('lessons')\n+        .upsert(lessonData, { \n+          onConflict: 'id'\n+        })\n+        .select();\n+\n+      if (lessonError) throw lessonError;\n+\n+      // 2. Save lesson content\n+      const { data: existingContent } = await supabase\n+        .from('lesson_content')\n+        .select('id')\n+        .eq('lesson_id', currentLessonId)\n+        .single();\n+\n+      const contentMetadata = {\n+        lastEdited: new Date().toISOString(),\n+        version: 1,\n+        status: 'draft'\n+      };\n+\n+      const contentUpdate = {\n+        id: existingContent?.id || crypto.randomUUID(),\n+        lesson_id: currentLessonId,\n+        content: [lessonContent],\n+        metadata: contentMetadata, // Supabase will automatically handle JSON conversion\n+        content_type: 'html',\n+        user_id: session.user.id,\n+        updated_at: new Date().toISOString(),\n+        created_at: new Date().toISOString()\n+      };\n+\n+      const { error: contentError } = await supabase\n+        .from('lesson_content')\n+        .upsert(contentUpdate, { onConflict: 'id' });\n+\n+      if (contentError) throw contentError;\n+\n+      // 3. Save questions\n+      for (const question of questions) {\n+        const questionData = {\n+          id: question.id,\n+          lesson_id: currentLessonId,\n+          type: question.type,\n+          title: question.title,\n+          metadata: question.metadata,\n+          data: question.data,\n+          updated_at: new Date().toISOString(),\n+          user_id: session.user.id\n+        };\n+\n+        const { error: questionError } = await supabase\n+          .from('questions')\n+          .upsert(questionData, { onConflict: 'id' });\n+\n+        if (questionError) throw questionError;\n+\n+        //4. Save exercise prompts for this question\n+        if (question.exercisePrompts) {\n+          for (const prompt of question.exercisePrompts) {\n+            const promptData = {\n+              id: prompt.id,\n+              question_id: question.id,\n+              text: prompt.text,\n+              media: prompt.media,\n+              type: prompt.type,\n+              narration: prompt.narration,\n+              saytext: prompt.saytext,\n+              user_id: session.user.id,\n+              updated_at: new Date().toISOString()\n+            };\n+\n+            const { error: promptError } = await supabase\n+              .from('exercise_prompts')\n+              .upsert(promptData, { onConflict: 'id' });\n+\n+            if (promptError) throw promptError;\n+          }\n+        }\n+      }\n+\n+      // 5. Save activities\n+      if (activities.length > 0) {\n+        const activitiesData = activities.map(activity => ({\n+          id: activity.id,\n+          lesson_id: currentLessonId,\n+          type: activity.type,\n+          title: activity.title,\n+          name: activity.name,\n+          instructions: activity.instructions,\n+          media: activity.media,\n+          data: activity.data,\n+          created_at: new Date().toISOString()\n+        }));\n+\n+        const { error: activitiesError } = await supabase\n+          .from('activities')\n+          .upsert(activitiesData, { onConflict: 'id' });\n+\n+        if (activitiesError) throw activitiesError;\n+      }\n+\n+      // After successful save\n+      console.log('✅ Content heading saved successfully:', {\n+        contentHeading,\n+        lessonId: currentLessonId,\n+        timestamp: new Date().toISOString()\n+      });\n+\n+      toast.success('Lesson saved successfully');\n+    } catch (err) {\n+      const error = err as PostgrestError;\n+      console.error('❌ Error saving content heading:', {\n+        error: error.message,\n+        contentHeading,\n+        lessonContent,\n+        lessonId: currentLessonId,\n+        timestamp: new Date().toISOString()\n+      });\n+      toast.error(`Failed to save lesson: ${error.message}`);\n+\n+\n+    }\n+  };\n+\n+  const handleSaveQuestion = async (question: Question, index: number) => {\n+    const loadingToast = toast.loading(`Saving question ${index + 1}...`);\n+    \n+    try {\n+      const { data: { session } } = await supabase.auth.getSession();\n+      if (!session?.user) {\n+        toast.error('Please sign in to save question', { id: loadingToast });\n+        return;\n+      }\n+\n+      // Save question\n+      const questionData = {\n+        id: question.id,\n+        lesson_id: currentLessonId,\n+        type: question.type,\n+        title: question.title,\n+        metadata: question.metadata,\n+        data: {\n+          prompt: question.data?.prompt ?? '',\n+          teacherScript: question.data?.teacherScript ?? '',\n+          followup_prompt: question.data?.followup_prompt ?? [],\n+          sampleAnswer: question.data?.sampleAnswer || undefined,  // Convert null to undefined\n+          answer: question.data?.answer || undefined  // Convert null to undefined\n+        } as const,\n+        user_id: session.user.id,\n+        updated_at: new Date().toISOString()\n+      };\n+\n+      const { error: questionError } = await supabase\n+        .from('questions')\n+        .upsert(questionData, { onConflict: 'id' });\n+\n+      if (questionError) throw questionError;\n+\n+      // Save exercise prompts if they exist\n+      if (question.exercisePrompts?.length) {\n+        for (const prompt of question.exercisePrompts) {\n+          const promptData = {\n+            id: prompt.id,\n+            question_id: question.id,\n+            text: prompt.text,\n+            type: prompt.type,\n+            narration: prompt.narration,\n+            saytext: prompt.saytext,\n+            media: prompt.media,\n+            user_id: session.user.id,\n+            updated_at: new Date().toISOString()\n+          };\n+\n+          const { error: promptError } = await supabase\n+            .from('exercise_prompts')\n+            .upsert(promptData, { onConflict: 'id' });\n+\n+          if (promptError) throw promptError;\n+        }\n+      }\n+\n+      toast.success(`Question ${index + 1} saved successfully`, { id: loadingToast });\n+    } catch (error) {\n+      console.error('Error saving question:', error);\n+      toast.error(`Failed to save question ${index + 1}`, { id: loadingToast });\n+    }\n+  };\n+\n+  const handleSaveActivity = async (activity: Activity) => {\n+    try {\n+      await contentService.saveActivity(activity);\n+      toast.success('Activity saved');\n+    } catch (error) {\n+      console.error('Failed to save activity:', error);\n+      toast.error('Failed to save activity');\n+    }\n+  };\n+\n+  // Effects\n+  useEffect(() => {\n+    const fetchGrades = async () => {\n+      try {\n+        const { data, error } = await supabase\n+          .from('grades')\n           .select('*')\n+          .order('name');\n+\n+        if (error) {\n+          console.error('Supabase error:', error);\n+          throw error;\n+        }\n+\n+        if (!data) {\n+          throw new Error('No data returned from Supabase');\n+        }\n+\n+        // Map the grades to match your interface\n+        const validGrades = data.map((grade: any) => ({\n+          _id: grade.id,\n+          id: grade.id,\n+          name: grade.name,\n+          level: grade.level || 0,  // Add default value if not provided\n+          orderIndex: grade.order_index || 0,  // Add default value if not provided\n+          topics: []\n+        }));\n+        \n+        setGrades(validGrades);\n+      } catch (error) {\n+        console.error('Error fetching grades:', error);\n+        toast.error('Failed to fetch grades');\n+      }\n+    };\n+\n+    fetchGrades();\n+  }, []);\n+\n+  // Topic Selection\n+  useEffect(() => {\n+    const fetchTopics = async () => {\n+      if (!selectedGradeId) return;\n+      \n+      try {\n+        const { data, error } = await supabase\n+          .from('topics')\n+          .select('*')\n+          .eq('grade_id', selectedGradeId)\n+          .order('title');\n+\n+        if (error) {\n+          throw error;\n+        }\n+\n+        // Map the topics to match your interface\n+        const validTopics = (data || []).map((topic: any) => ({\n+          _id: topic.id,\n+          id: topic.id,\n+          name: topic.title,\n+          title: topic.title,\n+          grade_id: topic.grade_id,\n+          subtopics: []\n+        }));\n+        \n+        setTopics(validTopics);\n+      } catch (error) {\n+        console.error('Error fetching topics:', error);\n+        toast.error('Failed to fetch topics');\n+      }\n+    };\n+\n+    fetchTopics();\n+  }, [selectedGradeId]);\n+\n+  // Subtopic Selection\n+  useEffect(() => {\n+    const fetchSubtopics = async () => {\n+      if (!selectedTopicId) return;\n+      \n+      try {\n+        // Use content service to fetch subtopics\n+        const subtopicsData = await contentService.fetchSubtopics(selectedTopicId);\n+        console.log('Fetched subtopics:', subtopicsData);\n+\n+        const validSubtopics = subtopicsData.map((subtopic: any) => ({\n+          id: subtopic.id,\n+          title: subtopic.title,\n+          description: subtopic.description,\n+          topic_id: subtopic.topic_id,\n+          lessons: [],\n+          order_index: subtopicsData.length\n+        }));\n+        \n+        setSubtopics(validSubtopics);\n+        \n+        // Update global state\n+        if (selectedSubtopic) {\n+          setSelectedSubtopic(selectedSubtopic);\n+        }\n+      } catch (err) {\n+        const error = err as Error;\n+        console.error('Error fetching subtopics:', error);\n+        toast.error('Failed to fetch subtopics');\n+      }\n+    };\n+\n+    fetchSubtopics();\n+  }, [selectedTopicId, selectedSubtopic, setSelectedSubtopic]);\n+\n+  // Add effect to monitor subtopics state\n+  useEffect(() => {\n+    console.log('Current subtopics state:', subtopics);\n+  }, [subtopics]);\n+\n+  // Add fetchLessons function\n+  const fetchLessons = useCallback(async () => {\n+    if (!selectedSubtopicId) return;\n+    try {\n+      const { data, error } = await supabase\n+        .from('lessons')\n+        .select('*')\n+        .eq('subtopic_id', selectedSubtopicId)\n+        .order('title');\n+\n+      if (error) {\n+        throw error;\n+      }\n+      \n+      // Map the lessons to ensure they have _id\n+      const validLessons = (data || []).map((lesson: any) => ({\n+        ...lesson,\n+        _id: lesson._id || lesson.id, // Use _id if available, otherwise use id\n+        title: lesson.title || 'Untitled Lesson'\n+      })).filter((lesson: any) => lesson._id); // Only include lessons with valid IDs\n+      \n+      setLessons(validLessons);\n+    } catch (error) {\n+      console.error('Error fetching lessons:', error);\n+      toast.error('Failed to fetch lessons');\n+    }\n+  }, [selectedSubtopicId]);\n+  // Add loadLessonContent function\n+  const isLoading = useRef(false);\n+  const loadLessonContent = useCallback(async (lessonId: string) => {\n+    // Prevent multiple simultaneous loads\n+    if (isLoading.current) return;\n+    isLoading.current = true;\n+\n+    const controller = new AbortController();\n+\n+    try {\n+      // Clear existing content first\n+      setLessonTitle('');\n+      setContentHeading('');\n+      setLessonContent('');\n+      setQuestions([]);\n+      \n+      // First fetch lesson data\n+      const { data: lessonData, error: lessonError } = await supabase\n+        .from('lessons')\n+        .select('*')\n+        .eq('id', lessonId)\n+        .single()\n+        \n+\n+      if (lessonError) {\n+        console.error('Lesson fetch error:', lessonError);\n+        throw lessonError;\n+      }\n+\n+      // Set lesson data\n+      setLessonTitle(lessonData.title || '');\n+      setContentHeading(lessonData.content || '');\n+\n+      // Then fetch lesson content with explicit headers\n+      const { data: contentData, error: contentError } = await supabase\n+        .from('lesson_content')\n+        .select('*')\n+        .eq('lesson_id', lessonId)\n+        .order('updated_at', { ascending: false })\n+        .limit(1)\n+        .maybeSingle();\n+\n+      if (contentError) {\n+        console.error('Content fetch error:', contentError);\n+        throw contentError;\n+      }\n+\n+      // Set content if available\n+      if (contentData?.content) {\n+        setLessonContent(typeof contentData.content === 'string' \n+          ? contentData.content \n+          : JSON.stringify(contentData.content)\n+        );\n+      }\n+\n+    } catch (error: unknown) {\n+      if (error instanceof Error && error.name === 'AbortError') {\n+        console.log('Request aborted');\n+        return;\n+      }\n+      console.error('Error loading lesson:', error);\n+      toast.error('Failed to load lesson content');\n+      \n+      // Reset states on error\n+      setLessonTitle('');\n+      setContentHeading('');\n+      setLessonContent('');\n+      setQuestions([]);\n+    } finally {\n+      isLoading.current = false;\n+    }\n+\n+    return () => {\n+      controller.abort();\n+    };\n+  }, []); // Empty dependencies since we're using closure over state setters\n+\n+  // // Add effect for fetching lessons when subtopic changes\n+  useEffect(() => {\n+    if (selectedSubtopicId) {\n+      fetchLessons();\n+    }\n+  }, [selectedSubtopicId, fetchLessons]);\n+\n+  // Add effect for loading lesson content when currentLessonId changes\n+    useEffect(() => {\n+    let isMounted = true;\n+    let timeoutId: NodeJS.Timeout;\n+\n+    const loadContent = async () => {\n+      if (!currentLessonId || !isMounted) return;\n+\n+      // Clear previous timeout if exists\n+      if (timeoutId) clearTimeout(timeoutId);\n+\n+      // Set new timeout for debouncing\n+      timeoutId = setTimeout(() => {\n+        if (isMounted) {\n+          loadLessonContent(currentLessonId);\n+        }\n+      }, 300);\n+    };\n+\n+    loadContent();\n+\n+    // Cleanup function\n+    return () => {\n+      isMounted = false;\n+      if (timeoutId) clearTimeout(timeoutId);\n+      if (isLoading.current) isLoading.current = false;\n+    };\n+  }, [currentLessonId]); // Remove loadLessonContent from dependencies\n+\n+  useEffect(() => {\n+    console.log('Current lessons state:', lessons);\n+  }, [lessons]);\n+\n+    // Add keyboard shortcut for saving\n+  useEffect(() => {\n+    const handleKeyDown = (e: KeyboardEvent) => {\n+      if ((e.ctrlKey || e.metaKey) && e.key === 's') {\n+        e.preventDefault();\n+        handleSaveLesson();\n+      }\n+    };\n+\n+    window.addEventListener('keydown', handleKeyDown);\n+    return () => window.removeEventListener('keydown', handleKeyDown);\n+  }, [handleSaveLesson]);\n+\n+  // Add SaveFeedback component\n+  const SaveFeedback = useCallback(() => {\n+    if (saveProgress === 'idle') return null;\n+\n+    return (\n+    <div className=\"fixed bottom-4 right-4\">\n+      {saveProgress === 'saving' && (\n+        <div className=\"flex items-center gap-2 bg-background border rounded-lg px-4 py-2 shadow-lg\">\n+          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n+          <span className=\"text-sm\">Saving changes...</span>\n+        </div>\n+      )}\n+      {saveProgress === 'saved' && (\n+        <div className=\"flex items-center gap-2 bg-green-500 text-white rounded-lg px-4 py-2 shadow-lg\">\n+          <Check className=\"h-4 w-4\" />\n+          <span className=\"text-sm\">Changes saved</span>\n+        </div>\n+      )}\n+      {saveProgress === 'error' && (\n+        <div className=\"flex items-center gap-2 bg-destructive text-destructive-foreground rounded-lg px-4 py-2 shadow-lg\">\n+          <X className=\"h-4 w-4\" />\n+          <span className=\"text-sm\">Error saving changes</span>\n+        </div>\n+      )}\n+    </div>\n+  );\n+  }, [saveProgress]);\n+\n+  // Update handlers\n+  const handleGradeSelect = (gradeId: string) => {\n+    // Always keep sidebar open during selection\n+    setIsSidebarCollapsed(false);\n+    setIsSidebarLocked(true);\n+    \n+    // Batch state updates\n+    requestAnimationFrame(() => {\n+      setSelectedGradeId(gradeId);\n+      setSelectedGrade(gradeId);\n+      setSelectedTopicId(null);\n+      setSelectedTopic('');\n+      setSelectedSubtopicId(null);\n+      setSelectedSubtopic('');\n+      setCurrentLessonId(null);\n+      \n+      if (isViewMode) {\n+        setExpandedGrade(gradeId);\n+      }\n+    });\n+  };\n+\n+  const handleTopicSelect = (value: string) => {\n+    setSelectedTopicId(value);\n+    setSelectedTopic(value);\n+    setSelectedSubtopicId(null);\n+    setSelectedSubtopic('');\n+    setCurrentLessonId(null);\n+  };\n+\n+  const handleSubtopicSelect = (value: string) => {\n+    setSelectedSubtopicId(value);\n+    setSelectedSubtopic(value);\n+    setCurrentLessonId(null);\n+  };\n+\n+  const handleLessonSelect = async (lessonId: string) => {\n+    try {\n+      // Lock sidebar during selection\n+      setIsSidebarLocked(true);\n+      setIsSidebarCollapsed(false);\n+      setCurrentLessonId(lessonId);\n+      \n+      // 1. Fetch lesson data\n+      const { data: lessonData, error: lessonError } = await supabase\n+        .from('lessons')\n+        .select('*')\n+        .eq('id', lessonId)\n+        .single();\n+\n+      if (lessonError) throw lessonError;\n+\n+      // 2. Fetch questions with exercise prompts\n+      const { data: questionsData, error: questionsError } = await supabase\n+        .from('questions')\n+        .select(`\n+          *,\n+          exercise_prompts (*)\n+        `)\n+        .eq('lesson_id', lessonId);\n+\n+      if (questionsError) throw questionsError;\n+\n+      // 3. Fetch activities - removed order_index\n+      const { data: activitiesData, error: activitiesError } = await supabase\n+        .from('activities')\n+        .select('*')\n+        .eq('lesson_id', lessonId);\n+\n+      if (activitiesError) throw activitiesError;\n+\n+      // Format questions with their exercise prompts\n+      const formattedQuestions = questionsData?.map(q => ({\n+        ...q,\n+        data: q.data || {},\n+        exercisePrompts: q.exercise_prompts || []\n+      })) || [];\n+\n+      // Set all states\n+      setLessonTitle(lessonData.title || '');\n+      setLessonContent(lessonData.content || '');\n+      setQuestions(formattedQuestions);\n+      setActivities(activitiesData || []);\n+\n+      // After successful load, unlock sidebar and allow collapse\n+      setTimeout(() => {\n+        setIsSidebarLocked(false);\n+        if (!isSidebarLocked) {\n+          setIsSidebarCollapsed(true);\n+        }\n+      }, 300);\n+\n+    } catch (error) {\n+      console.error('Error loading lesson:', error);\n+      toast.error('Failed to load lesson');\n+      // Reset states on error\n+      setLessonTitle('');\n+      setLessonContent('');\n+      setQuestions([]);\n+      setActivities([]);\n+    }\n+    if (!isSidebarLocked) {\n+      setIsSidebarCollapsed(true);\n+    }\n+  };\n+\n+  // Update the expansion handlers\n+  const handleTopicExpand = async (topicId: string) => {\n+    setExpandedTopic(expandedTopic === topicId ? null : topicId);\n+    setSelectedTopicId(topicId);\n+    \n+    // Load subtopics when topic is expanded\n+    if (topicId) {\n+      setIsLoadingSubtopics(true);\n+      try {\n+        const { data: subtopicsData, error } = await supabase\n+          .from('subtopics')\n+          .select('*')\n           .eq('topic_id', topicId)\n           .order('order_index');\n \n         if (error) throw error;\n"
                },
                {
                    "date": 1739968766125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,9 @@\n import { PostgrestError } from '@supabase/supabase-js';\n import { Question as ContentQuestion } from './types';  // Import the specific type\n import { Trash } from \"lucide-react\";\n import { AnimatePresence, motion } from 'framer-motion';\n+import { NestedContentView } from './NestedContentView';\n \n \n // Update the API endpoint to match your backend route\n const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\n"
                },
                {
                    "date": 1739968807213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2217,9 +2217,9 @@\n                                   <div className=\"flex items-center gap-2\">\n                                     <Button \n                                       variant=\"ghost\" \n                                       size=\"sm\"\n-                                      onClick={(e) => {\n+                                      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n                                         e.stopPropagation();\n                                         setItemToDelete({\n                                           id: topic.id,\n                                           type: 'topic',\n"
                },
                {
                    "date": 1739968816392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2283,9 +2283,9 @@\n                                                   <div className=\"flex items-center gap-2\">\n                                                     <Button \n                                                       variant=\"ghost\" \n                                                       size=\"sm\"\n-                                                      onClick={(e) => {\n+                                                      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n                                                         e.stopPropagation();\n                                                         setItemToDelete({\n                                                           id: subtopic.id,\n                                                           type: 'subtopic',\n"
                },
                {
                    "date": 1739968824231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2343,9 +2343,9 @@\n                                                                   </div>\n                                                                   <Button \n                                                                     variant=\"ghost\" \n                                                                     size=\"sm\"\n-                                                                    onClick={(e) => {\n+                                                                    onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n                                                                       e.stopPropagation();\n                                                                       setItemToDelete({\n                                                                         id: lesson.id,\n                                                                         type: 'lesson',\n"
                },
                {
                    "date": 1739968909001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,8 @@\n import { PostgrestError } from '@supabase/supabase-js';\n import { Question as ContentQuestion } from './types';  // Import the specific type\n import { Trash } from \"lucide-react\";\n import { AnimatePresence, motion } from 'framer-motion';\n-import { NestedContentView } from './NestedContentView';\n \n \n // Update the API endpoint to match your backend route\n const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\n@@ -389,66 +388,8 @@\n     type: 'topic' | 'subtopic' | 'lesson';\n     title: string;\n   } | null>(null);\n \n-  // Add these types and interfaces\n-  interface DeleteValidation {\n-    canDelete: boolean;\n-    message: string;\n-  }\n-\n-  // Add these state variables\n-  const [deleteError, setDeleteError] = useState<string | null>(null);\n-\n-  // Add this validation function\n-  const validateDelete = async (type: 'topic' | 'subtopic' | 'lesson', id: string): Promise<DeleteValidation> => {\n-    switch (type) {\n-      case 'lesson':\n-        const { data: questions } = await supabase\n-          .from('questions')\n-          .select('id')\n-          .eq('lesson_id', id);\n-        \n-        if (questions && questions.length > 0) {\n-          return {\n-            canDelete: false,\n-            message: `Cannot delete lesson. Please delete ${questions.length} questions first.`\n-          };\n-        }\n-        break;\n-\n-      case 'subtopic':\n-        const { data: lessons } = await supabase\n-          .from('lessons')\n-          .select('id, questions(id)')\n-          .eq('subtopic_id', id);\n-        \n-        if (lessons && lessons.some(lesson => lesson.questions.length > 0)) {\n-          return {\n-            canDelete: false,\n-            message: 'Cannot delete subtopic. Please delete all questions from lessons first.'\n-          };\n-        }\n-        break;\n-\n-      case 'topic':\n-        const { data: subtopics } = await supabase\n-          .from('subtopics')\n-          .select('id, lessons(questions(id))')\n-          .eq('topic_id', id);\n-        \n-        if (subtopics && subtopics.some(sub => sub.lessons.some(les => les.questions.length > 0))) {\n-          return {\n-            canDelete: false,\n-            message: 'Cannot delete topic. Please delete all questions from lessons first.'\n-          };\n-        }\n-        break;\n-    }\n-\n-    return { canDelete: true, message: '' };\n-  };\n-\n   // Event handlers\n   const handleQuestionTypeChange = useCallback((type: string) => {\n     if (isQuestionType(type)) {\n       setSelectedQuestionType(type);\n@@ -2217,9 +2158,9 @@\n                                   <div className=\"flex items-center gap-2\">\n                                     <Button \n                                       variant=\"ghost\" \n                                       size=\"sm\"\n-                                      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n+                                      onClick={(e) => {\n                                         e.stopPropagation();\n                                         setItemToDelete({\n                                           id: topic.id,\n                                           type: 'topic',\n@@ -2283,9 +2224,9 @@\n                                                   <div className=\"flex items-center gap-2\">\n                                                     <Button \n                                                       variant=\"ghost\" \n                                                       size=\"sm\"\n-                                                      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n+                                                      onClick={(e) => {\n                                                         e.stopPropagation();\n                                                         setItemToDelete({\n                                                           id: subtopic.id,\n                                                           type: 'subtopic',\n@@ -2343,9 +2284,9 @@\n                                                                   </div>\n                                                                   <Button \n                                                                     variant=\"ghost\" \n                                                                     size=\"sm\"\n-                                                                    onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n+                                                                    onClick={(e) => {\n                                                                       e.stopPropagation();\n                                                                       setItemToDelete({\n                                                                         id: lesson.id,\n                                                                         type: 'lesson',\n"
                },
                {
                    "date": 1739968950749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -388,287 +388,33 @@\n     type: 'topic' | 'subtopic' | 'lesson';\n     title: string;\n   } | null>(null);\n \n-  // Event handlers\n-  const handleQuestionTypeChange = useCallback((type: string) => {\n-    if (isQuestionType(type)) {\n-      setSelectedQuestionType(type);\n-    }\n-  }, []);\n+  // Add these state variables\n+  const [deleteError, setDeleteError] = useState<string | null>(null);\n \n-  const handleAddQuestion = useCallback(() => {\n-    if (!selectedQuestionType || !isQuestionType(selectedQuestionType)) return;\n-\n-    const defaultData = QUESTION_TYPES[selectedQuestionType].defaultData;\n-    const newQuestion: Question = {\n-      id: crypto.randomUUID(),\n-      type: selectedQuestionType,\n-      //data: {},\n-      title: 'New Question',\n-      content: '',\n-      lesson_id: currentLessonId || '',\n-      metadata: {},\n-      data: {\n-        ...defaultData,\n-        prompt: '',\n-        teacher_script: '',\n-        followup_prompt: [],\n-        sample_answer: ''\n-      },\n-      correct_answer: '',\n-      exercisePrompts: [],\n-      isDraft: true\n-    };\n-\n-    setQuestions(prev => [...prev, newQuestion]);\n-    setQuestionSaveStatuses(prev => [\n-      ...prev,\n-      { id: newQuestion.id, status: 'draft' }\n-    ]);\n-    setSelectedQuestionType('');\n-  }, [selectedQuestionType, currentLessonId]);\n-\n-  const handleRemoveQuestion = async (index: number) => {\n-    try {\n-      const questionToDelete = questions[index];\n-      \n-      // Delete related exercise prompts first\n-      const { error: promptError } = await supabase\n-        .from('exercise_prompts')\n-        .delete()\n-        .eq('question_id', questionToDelete.id);\n-\n-      if (promptError) throw promptError;\n-\n-      // Then delete the question\n-      const { error: questionError } = await supabase\n-        .from('questions')\n-        .delete()\n-        .eq('id', questionToDelete.id);\n-\n-      if (questionError) throw questionError;\n-\n-      // Update local state\n-      const newQuestions = questions.filter((_, i) => i !== index);\n-      setQuestions(newQuestions);\n-      \n-      toast.success('Question and related prompts deleted successfully');\n-    } catch (error) {\n-      console.error('Error deleting question:', error);\n-      toast.error('Failed to delete question and prompts');\n+  // Add this validation function\n+  const canDeleteItem = async (type: 'topic' | 'subtopic' | 'lesson', id: string) => {\n+    switch (type) {\n+      case 'topic':\n+        const subtopicsInTopic = subtopics.filter(s => s.topic_id === id);\n+        return subtopicsInTopic.length === 0;\n+        \n+      case 'subtopic':\n+        const lessonsInSubtopic = lessons.filter(l => l.subtopic_id === id);\n+        return lessonsInSubtopic.length === 0;\n+        \n+      case 'lesson':\n+        const { data: questions } = await supabase\n+          .from('questions')\n+          .select('id')\n+          .eq('lesson_id', id);\n+        return !questions || questions.length === 0;\n+        \n+      default:\n+        return false;\n     }\n   };\n-\n-  const handleUpdateQuestion = useCallback(async (index: number, updatedQuestion: Question) => {\n-    const newQuestions = [...questions];\n-    newQuestions[index] = updatedQuestion;\n-    setQuestions(newQuestions);\n-    setQuestionSaveStatuses(prev => prev.map((status, i) => \n-      i === index ? { ...status, status: 'draft' } : status\n-    ));\n-  }, [questions]);\n-\n-  const handleAddExercisePrompt = useCallback((questionIndex: number) => {\n-    setQuestions(prev => prev.map((question, i) => {\n-      if (i === questionIndex) {\n-        return {\n-          ...question,\n-          exercisePrompts: [\n-            ...question.exercisePrompts,\n-            {\n-              id: crypto.randomUUID(),\n-              text: '',\n-              media: '',\n-              type: 'image',\n-              narration: 'Your turn',\n-              saytext: 'Say: ',\n-              metadata: {\n-                estimatedTime: 0\n-              },\n-              created_at: new Date().toISOString(),\n-              updated_at: new Date().toISOString()\n-            }\n-          ]\n-        };\n-      }\n-      return question;\n-    }));\n-  }, []);\n-\n-  const handleRemoveExercisePrompt = useCallback((questionIndex: number, promptIndex: number) => {\n-    setQuestions(prev => prev.map((question, i) => {\n-      if (i === questionIndex) {\n-        return {\n-          ...question,\n-          exercisePrompts: question.exercisePrompts.filter((_, j) => j !== promptIndex)\n-        };\n-      }\n-      return question;\n-    }));\n-  }, []);\n-\n-  const handleExercisePromptChange = useCallback(async (\n-    questionIndex: number,\n-    promptIndex: number,\n-    updatedPrompt: ExercisePrompt\n-  ) => {\n-    try {\n-      const promptUpdate = {\n-        id: updatedPrompt.id,\n-        question_id: updatedPrompt.question_id,\n-        text: updatedPrompt.text,\n-        type: updatedPrompt.type,\n-        narration: updatedPrompt.narration,\n-        saytext: updatedPrompt.saytext,\n-        media: updatedPrompt.media,\n-        // Remove order_index as it's not in schema\n-        created_at: new Date().toISOString()\n-      };\n-\n-      const { error: promptError } = await supabase\n-        .from('exercise_prompts')\n-        .upsert(promptUpdate)\n-        .select();\n-\n-      if (promptError) throw promptError;\n-\n-      // Update local state\n-      setQuestions(prev => prev.map((question, i) => {\n-        if (i === questionIndex) {\n-          const newPrompts = [...question.exercisePrompts];\n-          newPrompts[promptIndex] = updatedPrompt;\n-          return { ...question, exercisePrompts: newPrompts };\n-        }\n-        return question;\n-      }));\n-\n-    } catch (error) {\n-      console.error('Error saving prompt:', error);\n-      toast.error('Failed to save prompt');\n-    }\n-  }, []);\n-\n-  const handleAddActivity = useCallback(() => {\n-    const newActivity: Activity = {\n-      id: crypto.randomUUID(),\n-      lesson_id: currentLessonId || '',\n-      created_at: new Date().toISOString(),\n-      type: 'practice',\n-      title: '',\n-      name: '',\n-      instructions: '',\n-      media: [],\n-      data: {\n-        prompt: '',\n-        teacherScript: '',\n-        media: []\n-      }\n-    };\n-    setActivities(prev => [...prev, newActivity]);\n-  }, [currentLessonId]);\n-\n-  const handleUpdateActivity = useCallback((index: number, updatedActivity: Activity) => {\n-    setActivities(prev => prev.map((activity, i) => i === index ? updatedActivity : activity));\n-  }, []);\n-\n-  const handleRemoveActivity = useCallback((index: number) => {\n-    setActivities(prev => prev.filter((_, i) => i !== index));\n-  }, []);\n-\n-  const handleExercisePromptUpdate = useCallback((questionIndex: number, promptIndex: number, updatedPrompt: ExercisePrompt) => {\n-    const updatedQuestions = [...questions];\n-    updatedQuestions[questionIndex].exercisePrompts[promptIndex] = updatedPrompt;\n-    handleUpdateQuestion(questionIndex, updatedQuestions[questionIndex]);\n-  }, [questions, handleUpdateQuestion]);\n-\n-  const handleQuestionDataChange = useCallback((questionIndex: number, field: string, value: string) => {\n-    setQuestions(prev => prev.map((q, i) => \n-      i === questionIndex \n-        ? { \n-            ...q, \n-            data: { \n-              prompt: q.data?.prompt || '',\n-              teacherScript: q.data?.teacherScript || '',\n-              ...q.data,\n-              [field]: value \n-            } \n-          }\n-        : q\n-    ));\n-  }, []);\n-\n-  const [isSaving, setIsSaving] = useState(false);\n-\n-  const handleSaveLesson = async () => {\n-    try {\n-      if (!currentLessonId || !selectedSubtopicId) {\n-        toast.error('Please select a subtopic and lesson first');\n-        return;\n-      }\n-\n-      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\n-      if (sessionError) throw sessionError;\n-      \n-      if (!session?.user) {\n-        toast.error('Please sign in to save lessons');\n-        return;\n-      }\n-\n-      // Get user's role from session\n-      const userRole = session.user.user_metadata?.role;\n-      console.log('Current user role:', userRole);\n-      console.log('📝 Saving content heading:', {\n-        contentHeading,\n-        currentLessonId,\n-        selectedSubtopicId,\n-        timestamp: new Date().toISOString()\n-      });\n-\n-      // Create metadata object\n-      const lessonMetadata = {\n-        lastEdited: new Date().toISOString(),\n-        version: 1,\n-        status: 'draft' \n-      };\n-\n-      // Complete lesson data with all fields\n-      const lessonData = {\n-        id: currentLessonId,\n-        title: lessonTitle,\n-        content: lessonContent,\n-        metadata: lessonMetadata, // Supabase will automatically handle JSON conversion\n-        content_type: 'html',\n-        lesson_type: 'lesson',\n-        grade_id: selectedGradeId,\n-        topic_id: selectedTopicId,\n-        subtopic_id: selectedSubtopicId,\n-        user_id: session.user.id,\n-        updated_at: new Date().toISOString(),\n-        role: userRole, // Include role in the payload\n-        description: '',\n-        prerequisites: [],\n-        media_type: 'image',\n-        media_url: '',\n-        contentheading: contentHeading || ''\n-      };\n-\n-      console.log('📦 Data being sent to Supabase:', lessonData);\n-\n-      // Save lesson with all fields\n-      const { data, error: lessonError } = await supabase\n-        .from('lessons')\n-        .upsert(lessonData, { \n-          onConflict: 'id'\n-        })\n-        .select();\n-\n-      if (lessonError) throw lessonError;\n-\n-      // 2. Save lesson content\n-      const { data: existingContent } = await supabase\n-        .from('lesson_content')\n-        .select('id')\n         .eq('lesson_id', currentLessonId)\n         .single();\n \n       const contentMetadata = {\n"
                },
                {
                    "date": 1739968957256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -413,8 +413,288 @@\n       default:\n         return false;\n     }\n   };\n+\n+  // Event handlers\n+  const handleQuestionTypeChange = useCallback((type: string) => {\n+    if (isQuestionType(type)) {\n+      setSelectedQuestionType(type);\n+    }\n+  }, []);\n+\n+  const handleAddQuestion = useCallback(() => {\n+    if (!selectedQuestionType || !isQuestionType(selectedQuestionType)) return;\n+\n+    const defaultData = QUESTION_TYPES[selectedQuestionType].defaultData;\n+    const newQuestion: Question = {\n+      id: crypto.randomUUID(),\n+      type: selectedQuestionType,\n+      //data: {},\n+      title: 'New Question',\n+      content: '',\n+      lesson_id: currentLessonId || '',\n+      metadata: {},\n+      data: {\n+        ...defaultData,\n+        prompt: '',\n+        teacher_script: '',\n+        followup_prompt: [],\n+        sample_answer: ''\n+      },\n+      correct_answer: '',\n+      exercisePrompts: [],\n+      isDraft: true\n+    };\n+\n+    setQuestions(prev => [...prev, newQuestion]);\n+    setQuestionSaveStatuses(prev => [\n+      ...prev,\n+      { id: newQuestion.id, status: 'draft' }\n+    ]);\n+    setSelectedQuestionType('');\n+  }, [selectedQuestionType, currentLessonId]);\n+\n+  const handleRemoveQuestion = async (index: number) => {\n+    try {\n+      const questionToDelete = questions[index];\n+      \n+      // Delete related exercise prompts first\n+      const { error: promptError } = await supabase\n+        .from('exercise_prompts')\n+        .delete()\n+        .eq('question_id', questionToDelete.id);\n+\n+      if (promptError) throw promptError;\n+\n+      // Then delete the question\n+      const { error: questionError } = await supabase\n+        .from('questions')\n+        .delete()\n+        .eq('id', questionToDelete.id);\n+\n+      if (questionError) throw questionError;\n+\n+      // Update local state\n+      const newQuestions = questions.filter((_, i) => i !== index);\n+      setQuestions(newQuestions);\n+      \n+      toast.success('Question and related prompts deleted successfully');\n+    } catch (error) {\n+      console.error('Error deleting question:', error);\n+      toast.error('Failed to delete question and prompts');\n+    }\n+  };\n+\n+  const handleUpdateQuestion = useCallback(async (index: number, updatedQuestion: Question) => {\n+    const newQuestions = [...questions];\n+    newQuestions[index] = updatedQuestion;\n+    setQuestions(newQuestions);\n+    setQuestionSaveStatuses(prev => prev.map((status, i) => \n+      i === index ? { ...status, status: 'draft' } : status\n+    ));\n+  }, [questions]);\n+\n+  const handleAddExercisePrompt = useCallback((questionIndex: number) => {\n+    setQuestions(prev => prev.map((question, i) => {\n+      if (i === questionIndex) {\n+        return {\n+          ...question,\n+          exercisePrompts: [\n+            ...question.exercisePrompts,\n+            {\n+              id: crypto.randomUUID(),\n+              text: '',\n+              media: '',\n+              type: 'image',\n+              narration: 'Your turn',\n+              saytext: 'Say: ',\n+              metadata: {\n+                estimatedTime: 0\n+              },\n+              created_at: new Date().toISOString(),\n+              updated_at: new Date().toISOString()\n+            }\n+          ]\n+        };\n+      }\n+      return question;\n+    }));\n+  }, []);\n+\n+  const handleRemoveExercisePrompt = useCallback((questionIndex: number, promptIndex: number) => {\n+    setQuestions(prev => prev.map((question, i) => {\n+      if (i === questionIndex) {\n+        return {\n+          ...question,\n+          exercisePrompts: question.exercisePrompts.filter((_, j) => j !== promptIndex)\n+        };\n+      }\n+      return question;\n+    }));\n+  }, []);\n+\n+  const handleExercisePromptChange = useCallback(async (\n+    questionIndex: number,\n+    promptIndex: number,\n+    updatedPrompt: ExercisePrompt\n+  ) => {\n+    try {\n+      const promptUpdate = {\n+        id: updatedPrompt.id,\n+        question_id: updatedPrompt.question_id,\n+        text: updatedPrompt.text,\n+        type: updatedPrompt.type,\n+        narration: updatedPrompt.narration,\n+        saytext: updatedPrompt.saytext,\n+        media: updatedPrompt.media,\n+        // Remove order_index as it's not in schema\n+        created_at: new Date().toISOString()\n+      };\n+\n+      const { error: promptError } = await supabase\n+        .from('exercise_prompts')\n+        .upsert(promptUpdate)\n+        .select();\n+\n+      if (promptError) throw promptError;\n+\n+      // Update local state\n+      setQuestions(prev => prev.map((question, i) => {\n+        if (i === questionIndex) {\n+          const newPrompts = [...question.exercisePrompts];\n+          newPrompts[promptIndex] = updatedPrompt;\n+          return { ...question, exercisePrompts: newPrompts };\n+        }\n+        return question;\n+      }));\n+\n+    } catch (error) {\n+      console.error('Error saving prompt:', error);\n+      toast.error('Failed to save prompt');\n+    }\n+  }, []);\n+\n+  const handleAddActivity = useCallback(() => {\n+    const newActivity: Activity = {\n+      id: crypto.randomUUID(),\n+      lesson_id: currentLessonId || '',\n+      created_at: new Date().toISOString(),\n+      type: 'practice',\n+      title: '',\n+      name: '',\n+      instructions: '',\n+      media: [],\n+      data: {\n+        prompt: '',\n+        teacherScript: '',\n+        media: []\n+      }\n+    };\n+    setActivities(prev => [...prev, newActivity]);\n+  }, [currentLessonId]);\n+\n+  const handleUpdateActivity = useCallback((index: number, updatedActivity: Activity) => {\n+    setActivities(prev => prev.map((activity, i) => i === index ? updatedActivity : activity));\n+  }, []);\n+\n+  const handleRemoveActivity = useCallback((index: number) => {\n+    setActivities(prev => prev.filter((_, i) => i !== index));\n+  }, []);\n+\n+  const handleExercisePromptUpdate = useCallback((questionIndex: number, promptIndex: number, updatedPrompt: ExercisePrompt) => {\n+    const updatedQuestions = [...questions];\n+    updatedQuestions[questionIndex].exercisePrompts[promptIndex] = updatedPrompt;\n+    handleUpdateQuestion(questionIndex, updatedQuestions[questionIndex]);\n+  }, [questions, handleUpdateQuestion]);\n+\n+  const handleQuestionDataChange = useCallback((questionIndex: number, field: string, value: string) => {\n+    setQuestions(prev => prev.map((q, i) => \n+      i === questionIndex \n+        ? { \n+            ...q, \n+            data: { \n+              prompt: q.data?.prompt || '',\n+              teacherScript: q.data?.teacherScript || '',\n+              ...q.data,\n+              [field]: value \n+            } \n+          }\n+        : q\n+    ));\n+  }, []);\n+\n+  const [isSaving, setIsSaving] = useState(false);\n+\n+  const handleSaveLesson = async () => {\n+    try {\n+      if (!currentLessonId || !selectedSubtopicId) {\n+        toast.error('Please select a subtopic and lesson first');\n+        return;\n+      }\n+\n+      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\n+      if (sessionError) throw sessionError;\n+      \n+      if (!session?.user) {\n+        toast.error('Please sign in to save lessons');\n+        return;\n+      }\n+\n+      // Get user's role from session\n+      const userRole = session.user.user_metadata?.role;\n+      console.log('Current user role:', userRole);\n+      console.log('📝 Saving content heading:', {\n+        contentHeading,\n+        currentLessonId,\n+        selectedSubtopicId,\n+        timestamp: new Date().toISOString()\n+      });\n+\n+      // Create metadata object\n+      const lessonMetadata = {\n+        lastEdited: new Date().toISOString(),\n+        version: 1,\n+        status: 'draft' \n+      };\n+\n+      // Complete lesson data with all fields\n+      const lessonData = {\n+        id: currentLessonId,\n+        title: lessonTitle,\n+        content: lessonContent,\n+        metadata: lessonMetadata, // Supabase will automatically handle JSON conversion\n+        content_type: 'html',\n+        lesson_type: 'lesson',\n+        grade_id: selectedGradeId,\n+        topic_id: selectedTopicId,\n+        subtopic_id: selectedSubtopicId,\n+        user_id: session.user.id,\n+        updated_at: new Date().toISOString(),\n+        role: userRole, // Include role in the payload\n+        description: '',\n+        prerequisites: [],\n+        media_type: 'image',\n+        media_url: '',\n+        contentheading: contentHeading || ''\n+      };\n+\n+      console.log('📦 Data being sent to Supabase:', lessonData);\n+\n+      // Save lesson with all fields\n+      const { data, error: lessonError } = await supabase\n+        .from('lessons')\n+        .upsert(lessonData, { \n+          onConflict: 'id'\n+        })\n+        .select();\n+\n+      if (lessonError) throw lessonError;\n+\n+      // 2. Save lesson content\n+      const { data: existingContent } = await supabase\n+        .from('lesson_content')\n+        .select('id')\n         .eq('lesson_id', currentLessonId)\n         .single();\n \n       const contentMetadata = {\n"
                },
                {
                    "date": 1739969164921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2310,9 +2310,9 @@\n                                                                   </div>\n                                                                   <Button \n                                                                     variant=\"ghost\" \n                                                                     size=\"sm\"\n-                                                                    onClick={(e) => {\n+                                                                    onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n                                                                       e.stopPropagation();\n                                                                       setItemToDelete({\n                                                                         id: lesson.id,\n                                                                         type: 'lesson',\n"
                },
                {
                    "date": 1739969171083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2250,9 +2250,9 @@\n                                                   <div className=\"flex items-center gap-2\">\n                                                     <Button \n                                                       variant=\"ghost\" \n                                                       size=\"sm\"\n-                                                      onClick={(e) => {\n+                                                      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n                                                         e.stopPropagation();\n                                                         setItemToDelete({\n                                                           id: subtopic.id,\n                                                           type: 'subtopic',\n"
                },
                {
                    "date": 1739969177406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2184,9 +2184,9 @@\n                                   <div className=\"flex items-center gap-2\">\n                                     <Button \n                                       variant=\"ghost\" \n                                       size=\"sm\"\n-                                      onClick={(e) => {\n+                                      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n                                         e.stopPropagation();\n                                         setItemToDelete({\n                                           id: topic.id,\n                                           type: 'topic',\n"
                },
                {
                    "date": 1739969247056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,9 @@\n import { PostgrestError } from '@supabase/supabase-js';\n import { Question as ContentQuestion } from './types';  // Import the specific type\n import { Trash } from \"lucide-react\";\n import { AnimatePresence, motion } from 'framer-motion';\n+import { useQueryClient } from 'react-query';\n \n \n // Update the API endpoint to match your backend route\n const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\n"
                },
                {
                    "date": 1739969373845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,8 @@\n import { PostgrestError } from '@supabase/supabase-js';\n import { Question as ContentQuestion } from './types';  // Import the specific type\n import { Trash } from \"lucide-react\";\n import { AnimatePresence, motion } from 'framer-motion';\n-import { useQueryClient } from 'react-query';\n \n \n // Update the API endpoint to match your backend route\n const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\n"
                },
                {
                    "date": 1739969420601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,9 @@\n import { PostgrestError } from '@supabase/supabase-js';\n import { Question as ContentQuestion } from './types';  // Import the specific type\n import { Trash } from \"lucide-react\";\n import { AnimatePresence, motion } from 'framer-motion';\n+import { useQueryClient } from 'react-query';\n \n \n // Update the API endpoint to match your backend route\n const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\n"
                },
                {
                    "date": 1739969742005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -454,8 +454,52 @@\n     ]);\n     setSelectedQuestionType('');\n   }, [selectedQuestionType, currentLessonId]);\n \n+  const checkDeletability = async (type: 'topic' | 'subtopic' | 'lesson', id: string) => {\n+    try {\n+      switch (type) {\n+        case 'lesson':\n+          const { data: questions } = await supabase\n+            .from('questions')\n+            .select('count')\n+            .eq('lesson_id', id);\n+          return { \n+            canDelete: questions?.[0]?.count === 0,\n+            message: questions?.[0]?.count > 0 \n+              ? `Delete ${questions?.[0]?.count} questions first` \n+              : null\n+          };\n+  \n+        case 'subtopic':\n+          const { data: lessons } = await supabase\n+            .from('lessons')\n+            .select('id')\n+            .eq('subtopic_id', id);\n+          return {\n+            canDelete: !lessons?.length,\n+            message: lessons?.length ? 'Delete all lessons first' : null\n+          };\n+  \n+        case 'topic':\n+          const { data: subtopics } = await supabase\n+            .from('subtopics')\n+            .select('id')\n+            .eq('topic_id', id);\n+          return {\n+            canDelete: !subtopics?.length,\n+            message: subtopics?.length ? 'Delete all subtopics first' : null\n+          };\n+  \n+        default:\n+          return { canDelete: false, message: 'Invalid item type' };\n+      }\n+    } catch (error) {\n+      console.error('Error checking deletability:', error);\n+      return { canDelete: false, message: 'Error checking item' };\n+    }\n+  };\n+\n   const handleRemoveQuestion = async (index: number) => {\n     try {\n       const questionToDelete = questions[index];\n       \n"
                },
                {
                    "date": 1739969780087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -464,9 +464,9 @@\n             .select('count')\n             .eq('lesson_id', id);\n           return { \n             canDelete: questions?.[0]?.count === 0,\n-            message: questions?.[0]?.count > 0 \n+            message: questions?.[0]?.count  > 0 \n               ? `Delete ${questions?.[0]?.count} questions first` \n               : null\n           };\n   \n"
                },
                {
                    "date": 1739969830355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -464,9 +464,9 @@\n             .select('count')\n             .eq('lesson_id', id);\n           return { \n             canDelete: questions?.[0]?.count === 0,\n-            message: questions?.[0]?.count  > 0 \n+            message: questions?.[0]?.count ?? 0 > 0 \n               ? `Delete ${questions?.[0]?.count} questions first` \n               : null\n           };\n   \n@@ -2200,9 +2200,9 @@\n                       )}\n                     </div>\n \n                     {/* Content Tree View in View Mode */}\n-                    {isViewMode && expandedGrade && (\n+                    {isViewMode && selectedGrade &&  && (\n                       <div className=\"mt-4 space-y-4 overflow-y-auto max-h-[calc(100vh-300px)]\">\n                         {topics.map((topic: Topic) => (\n                           <Card \n                             key={topic.id} \n"
                },
                {
                    "date": 1739969837918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2200,9 +2200,9 @@\n                       )}\n                     </div>\n \n                     {/* Content Tree View in View Mode */}\n-                    {isViewMode && selectedGrade &&  && (\n+                    {isViewMode && selectedGradeId && (\n                       <div className=\"mt-4 space-y-4 overflow-y-auto max-h-[calc(100vh-300px)]\">\n                         {topics.map((topic: Topic) => (\n                           <Card \n                             key={topic.id} \n"
                },
                {
                    "date": 1739969916276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2200,197 +2200,167 @@\n                       )}\n                     </div>\n \n                     {/* Content Tree View in View Mode */}\n-                    {isViewMode && selectedGradeId && (\n-                      <div className=\"mt-4 space-y-4 overflow-y-auto max-h-[calc(100vh-300px)]\">\n-                        {topics.map((topic: Topic) => (\n-                          <Card \n-                            key={topic.id} \n-                            className={cn(\n-                              \"border-l-4 transition-all duration-200 hover:shadow-md\",\n-                              expandedTopic === topic.id \n-                                ? \"border-l-primary bg-accent/5\" \n-                                : \"border-l-primary/40 hover:border-l-primary\"\n-                            )}\n+                    {isViewMode && selectedGrade && (\n+  <div className=\"flex h-full\">\n+    {/* Left Plane - Only Grade Selection */}\n+    <div className=\"w-64 border-r p-4\">\n+      <Select\n+        value={selectedGrade}\n+        onValueChange={setSelectedGrade}\n+      >\n+        <SelectTrigger>\n+          <SelectValue placeholder=\"Select Grade\" />\n+        </SelectTrigger>\n+        <SelectContent>\n+          {grades.map((grade) => (\n+            <SelectItem key={grade.id} value={grade.id}>\n+              {grade.name}\n+            </SelectItem>\n+          ))}\n+        </SelectContent>\n+      </Select>\n+    </div>\n+\n+    {/* Right Plane - Nested Content View */}\n+    <div className=\"flex-1 p-6 overflow-auto\">\n+      <div className=\"space-y-6\">\n+        {topics.map((topic) => (\n+          <Card \n+            key={topic.id} \n+            className=\"border-l-4 border-l-primary/40 hover:border-l-primary transition-all duration-200\"\n+          >\n+            <CardHeader className=\"py-4\">\n+              <div className=\"flex items-center justify-between\">\n+                <div className=\"flex items-center gap-2\">\n+                  <Layers className=\"h-5 w-5 text-primary\" />\n+                  <div>\n+                    <h3 className=\"font-medium text-lg\">{topic.title}</h3>\n+                    <p className=\"text-sm text-muted-foreground\">\n+                      {subtopics.filter(s => s.topic_id === topic.id).length} Subtopics\n+                    </p>\n+                  </div>\n+                </div>\n+                <Button\n+                  variant=\"ghost\"\n+                  size=\"sm\"\n+                  onClick={async () => {\n+                    const { canDelete, message } = await checkDeletability('topic', topic.id);\n+                    if (!canDelete) {\n+                      toast.error(message);\n+                      return;\n+                    }\n+                    setItemToDelete({\n+                      id: topic.id,\n+                      type: 'topic',\n+                      title: topic.title\n+                    });\n+                    setDeleteDialogOpen(true);\n+                  }}\n+                >\n+                  <Trash className=\"h-4 w-4\" />\n+                </Button>\n+              </div>\n+\n+              <div className=\"mt-4 pl-6 space-y-4\">\n+                {subtopics\n+                  .filter(subtopic => subtopic.topic_id === topic.id)\n+                  .map((subtopic) => (\n+                    <Card key={subtopic.id} className=\"border-l-2 border-l-primary/20\">\n+                      <CardHeader className=\"py-3\">\n+                        <div className=\"flex items-center justify-between\">\n+                          <div className=\"flex items-center gap-2\">\n+                            <BookOpen className=\"h-4 w-4 text-primary\" />\n+                            <div>\n+                              <h4 className=\"font-medium\">{subtopic.title}</h4>\n+                              <p className=\"text-sm text-muted-foreground\">\n+                                {lessons.filter(l => l.subtopic_id === subtopic.id).length} Lessons\n+                              </p>\n+                            </div>\n+                          </div>\n+                          <Button\n+                            variant=\"ghost\"\n+                            size=\"sm\"\n+                            onClick={async () => {\n+                              const { canDelete, message } = await checkDeletability('subtopic', subtopic.id);\n+                              if (!canDelete) {\n+                                toast.error(message);\n+                                return;\n+                              }\n+                              setItemToDelete({\n+                                id: subtopic.id,\n+                                type: 'subtopic',\n+                                title: subtopic.title\n+                              });\n+                              setDeleteDialogOpen(true);\n+                            }}\n                           >\n-                            <CardHeader \n-                              className=\"py-3 cursor-pointer select-none\" \n-                              onClick={() => handleTopicExpand(topic.id || '')}\n-                            >\n-                              <div className=\"flex items-center justify-between\">\n-                                <div className=\"flex items-center justify-between\">\n-                                  <div className=\"flex items-center gap-2\">\n-                                    <Layers className=\"h-4 w-4 text-primary\" />\n-                                    <h4 className=\"font-medium\">{topic.title}</h4>\n-                                    <Badge variant=\"outline\" className=\"ml-2\">\n-                                      {subtopics.filter(s => s.topic_id === topic.id).length} Subtopics\n-                                    </Badge>\n-                                  </div>\n-                                  <div className=\"flex items-center gap-2\">\n-                                    <Button \n-                                      variant=\"ghost\" \n+                            <Trash className=\"h-4 w-4\" />\n+                          </Button>\n+                        </div>\n+\n+                        <div className=\"mt-2 pl-6 space-y-2\">\n+                          {lessons\n+                            .filter(lesson => lesson.subtopic_id === subtopic.id)\n+                            .map((lesson) => (\n+                              <Card key={lesson.id} className=\"border-l border-l-primary/10\">\n+                                <CardHeader className=\"py-2\">\n+                                  <div className=\"flex items-center justify-between\">\n+                                    <div className=\"flex items-center gap-2\">\n+                                      <div>\n+                                        <h5 className=\"text-sm font-medium\">{lesson.title}</h5>\n+                                        <div className=\"flex items-center gap-2 mt-1\">\n+                                          <Badge variant=\"secondary\" className=\"text-xs\">\n+                                            {lesson.duration || 0} mins\n+                                          </Badge>\n+                                          <Badge variant=\"secondary\" className=\"text-xs\">\n+                                            {lesson.questions?.length || 0} Questions\n+                                          </Badge>\n+                                          {(!lesson.questions || lesson.questions.length === 0) && (\n+                                            <Badge variant=\"outline\" className=\"text-yellow-500 text-xs\">\n+                                              Empty\n+                                            </Badge>\n+                                          )}\n+                                        </div>\n+                                      </div>\n+                                    </div>\n+                                    <Button\n+                                      variant=\"ghost\"\n                                       size=\"sm\"\n-                                      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n-                                        e.stopPropagation();\n+                                      onClick={async () => {\n+                                        const { canDelete, message } = await checkDeletability('lesson', lesson.id);\n+                                        if (!canDelete) {\n+                                          toast.error(message);\n+                                          return;\n+                                        }\n                                         setItemToDelete({\n-                                          id: topic.id,\n-                                          type: 'topic',\n-                                          title: topic.title\n+                                          id: lesson.id,\n+                                          type: 'lesson',\n+                                          title: lesson.title\n                                         });\n                                         setDeleteDialogOpen(true);\n                                       }}\n                                     >\n                                       <Trash className=\"h-4 w-4\" />\n                                     </Button>\n                                   </div>\n-                                </div>\n-                                <div className=\"flex items-center gap-2\">\n-                                  <ChevronDown className={cn(\n-                                    \"h-4 w-4 transition-transform duration-200\",\n-                                    expandedTopic === topic.id ? \"rotate-0\" : \"-rotate-90\"\n-                                  )} />\n-                                </div>\n-                              </div>\n-                            </CardHeader>\n+                                </CardHeader>\n+                              </Card>\n+                            ))}\n+                        </div>\n+                      </CardHeader>\n+                    </Card>\n+                  ))}\n+              </div>\n+            </CardHeader>\n+          </Card>\n+        ))}\n+      </div>\n+    </div>\n+  </div>\n+)}\n \n-                            <AnimatePresence>\n-                              {expandedTopic === topic.id && (\n-                                <motion.div\n-                                  initial={{ height: 0, opacity: 0 }}\n-                                  animate={{ height: \"auto\", opacity: 1 }}\n-                                  exit={{ height: 0, opacity: 0 }}\n-                                  transition={{ duration: 0.2 }}\n-                                >\n-                                  <CardContent className=\"pt-0 pb-2\">\n-                                    <div className=\"pl-4 space-y-2\">\n-                                      {isLoadingSubtopics ? (\n-                                        <div className=\"flex items-center justify-center py-4\">\n-                                          <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\n-                                        </div>\n-                                      ) : (\n-                                        subtopics\n-                                          .filter(subtopic => subtopic.topic_id === topic.id)\n-                                          .map((subtopic: SubTopic) => (\n-                                            <div \n-                                              key={subtopic.id}\n-                                              className={cn(\n-                                                \"rounded-lg border transition-colors\",\n-                                                expandedSubtopic === subtopic.id \n-                                                  ? \"bg-accent/10 border-primary/20\" \n-                                                  : \"hover:bg-accent/5\"\n-                                              )}\n-                                            >\n-                                              <div \n-                                                className=\"p-3 cursor-pointer\"\n-                                                onClick={() => handleSubtopicExpand(subtopic.id || '')}\n-                                              >\n-                                                <div className=\"flex items-center justify-between py-2 cursor-pointer hover:bg-accent/50 rounded-md px-2\">\n-                                                  <div className=\"flex items-center gap-2\">\n-                                                    <BookOpen className=\"h-4 w-4 text-primary\" />\n-                                                    <span className=\"text-sm font-medium\">{subtopic.name}</span>\n-                                                    <Badge variant=\"outline\" className=\"ml-2\">\n-                                                      {lessons.filter(l => l.subtopic_id === subtopic.id).length} Lessons\n-                                                    </Badge>\n-                                                  </div>\n-                                                  <div className=\"flex items-center gap-2\">\n-                                                    <Button \n-                                                      variant=\"ghost\" \n-                                                      size=\"sm\"\n-                                                      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n-                                                        e.stopPropagation();\n-                                                        setItemToDelete({\n-                                                          id: subtopic.id,\n-                                                          type: 'subtopic',\n-                                                          title: subtopic.title\n-                                                        });\n-                                                        setDeleteDialogOpen(true);\n-                                                      }}\n-                                                    >\n-                                                      <Trash className=\"h-4 w-4\" />\n-                                                    </Button>\n-                                                    <ChevronDown className={cn(\n-                                                      \"h-4 w-4 transition-transform duration-200\",\n-                                                      expandedSubtopic === subtopic.id ? \"rotate-0\" : \"-rotate-90\"\n-                                                    )} />\n-                                                  </div>\n-                                                </div>\n-\n-                                                <AnimatePresence>\n-                                                  {expandedSubtopic === subtopic.id && (\n-                                                    <motion.div\n-                                                      initial={{ height: 0, opacity: 0 }}\n-                                                      animate={{ height: \"auto\", opacity: 1 }}\n-                                                      exit={{ height: 0, opacity: 0 }}\n-                                                      transition={{ duration: 0.2 }}\n-                                                    >\n-                                                      <div className=\"px-3 pb-3\">\n-                                                        <div className=\"space-y-2\">\n-                                                          {isLoadingLessons ? (\n-                                                            <div className=\"flex items-center justify-center py-4\">\n-                                                              <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\n-                                                            </div>\n-                                                          ) : (\n-                                                            lessons\n-                                                              .filter(lesson => lesson.subtopic_id === subtopic.id)\n-                                                              .map((lesson: Lesson) => (\n-                                                                <div\n-                                                                  key={lesson.id}\n-                                                                  onClick={() => handleLessonSelect(lesson.id || '')}\n-                                                                  className={cn(\n-                                                                    \"flex items-center gap-3 p-2 rounded-md cursor-pointer transition-colors\",\n-                                                                    \"hover:bg-accent\",\n-                                                                    currentLessonId === lesson.id && \"bg-accent\"\n-                                                                  )}\n-                                                                >\n-                                                                  <div className=\"flex items-center gap-2 flex-1\">\n-                                                                    <div className=\"flex h-8 w-8 items-center justify-center rounded-md border bg-background\">\n-                                                                      <BookOpen className=\"h-4 w-4 text-primary\" />\n-                                                                    </div>\n-                                                                    <div className=\"flex flex-col\">\n-                                                                      <span className=\"text-sm font-medium\">{lesson.title}</span>\n-                                                                      <span className=\"text-xs text-muted-foreground\">\n-                                                                        {lesson.duration} mins • {lesson.questions?.length || 0} Questions\n-                                                                      </span>\n-                                                                    </div>\n-                                                                  </div>\n-                                                                  <Button \n-                                                                    variant=\"ghost\" \n-                                                                    size=\"sm\"\n-                                                                    onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n-                                                                      e.stopPropagation();\n-                                                                      setItemToDelete({\n-                                                                        id: lesson.id,\n-                                                                        type: 'lesson',\n-                                                                        title: lesson.title\n-                                                                      });\n-                                                                      setDeleteDialogOpen(true);\n-                                                                    }}\n-                                                                  >\n-                                                                    <Trash className=\"h-4 w-4\" />\n-                                                                  </Button>\n-                                                                </div>\n-                                                              ))\n-                                                          )}\n-                                                        </div>\n-                                                      </div>\n-                                                    </motion.div>\n-                                                  )}\n-                                                </AnimatePresence>\n-                                              </div>\n-                                            </div>\n-                                          ))\n-                                      )}\n-                                    </div>\n-                                  </CardContent>\n-                                </motion.div>\n-                              )}\n-                            </AnimatePresence>\n-                          </Card>\n-                        ))}\n-                      </div>\n-                    )}\n-\n                     {/* Regular Edit Mode Content */}\n                     {!isViewMode && (\n                       <>\n                         {/* Existing Topic, Subtopic, and Lesson Selection UI */}\n"
                },
                {
                    "date": 1739969936234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2355,11 +2355,8 @@\n             </CardHeader>\n           </Card>\n         ))}\n       </div>\n-    </div>\n-  </div>\n-)}\n \n                     {/* Regular Edit Mode Content */}\n                     {!isViewMode && (\n                       <>\n"
                },
                {
                    "date": 1739969980893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2355,8 +2355,11 @@\n             </CardHeader>\n           </Card>\n         ))}\n       </div>\n+    </div>\n+  </div>\n+)}\n \n                     {/* Regular Edit Mode Content */}\n                     {!isViewMode && (\n                       <>\n"
                },
                {
                    "date": 1739969998849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,3372 @@\n+\"use client\";\n+\n+import { useState, useCallback, useEffect, useRef } from 'react';\n+import { toast } from 'sonner';\n+import { Toaster } from 'sonner';\n+import Link from 'next/link';\n+import {  Activity as ActivityIcon,  ArrowLeft,  BookOpen,  ChevronDown,  ChevronRight,  Check,  Edit,  Eye,  EyeOff,  HelpCircle,  Layers,  List,  MessageSquare,  Plus,  Save,  Trash as Trash2, X, Pencil, Lock, Unlock, RefreshCw, Clock, Bell, Moon, GraduationCap, MoreHorizontal, Loader2 } from 'lucide-react';\n+import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\n+import { Badge } from '@/components/ui/badge';\n+import { Button } from '@/components/ui/button';\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\n+import { Input } from '@/components/ui/input';\n+import { Label } from '@/components/ui/label';\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\n+import { Textarea } from '@/components/ui/textarea';\n+import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\n+import { cn } from '@/lib/utils';\n+import { API_BASE_URL, QUESTION_TYPES, isQuestionType } from './constants';\n+import { ExercisePrompt, Lesson } from './types';\n+import { QuestionFormProps, ExercisePromptCardProps, Activity, Grade, Topic, Subtopic as SubTopic } from './types';\n+import { QuestionForm } from './components/question-form';\n+import { ExercisePromptCard } from './components/exercise-prompt-card';\n+import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\n+import { supabase } from '@/lib/supabase';\n+import { useContentStore } from '@/lib/content/store';\n+import { contentService } from '@/lib/content/ContentService';\n+import { MediaPreview } from '@/components/ui/media-preview';\n+import { QuestionTypeSelect } from './components/question-type-select';\n+import { RichTextEditor } from '@/components/ui/rich-text-editor';\n+import {\n+  AlertDialog,\n+  AlertDialogAction,\n+  AlertDialogCancel,\n+  AlertDialogContent,\n+  AlertDialogDescription,\n+  AlertDialogFooter,\n+  AlertDialogHeader,\n+  AlertDialogTitle,\n+  AlertDialogTrigger,\n+} from \"@/components/ui/alert-dialog\";\n+import { debounce, isNull } from 'lodash';\n+import { PostgrestError } from '@supabase/supabase-js';\n+import { Question as ContentQuestion } from './types';  // Import the specific type\n+import { Trash } from \"lucide-react\";\n+import { AnimatePresence, motion } from 'framer-motion';\n+import { useQueryClient } from 'react-query';\n+\n+\n+// Update the API endpoint to match your backend route\n+const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\n+\n+interface QuestionTypeSelectProps {\n+  value: string;\n+  onValueChange: (value: string) => void;\n+}\n+\n+// Add metadata type\n+interface LessonMetadata {\n+  lastEdited?: string;\n+  version?: number;\n+  tags?: string[];\n+  status?: 'draft' | 'published';\n+  authorId?: string;\n+  duration?: number;\n+  transcript?: string;\n+}\n+\n+type ContentType = 'html' | 'markdown' | 'rich-text' | 'text' | 'json';\n+\n+interface LessonContent {\n+  id: string;\n+  lesson_id: string;\n+  content: any[];\n+  metadata: {\n+    lastEdited?: string;\n+    version?: number;\n+    status?: 'draft' | 'published';\n+    authorId?: string;\n+  };\n+  content_type: string;\n+  order_index: number;\n+  updated_at: string;\n+  user_id: string;\n+}\n+\n+interface InlineEditProps {\n+  value: string;\n+  onSave: (value: string) => void;\n+  isEditing: boolean;\n+  setIsEditing: (value: boolean) => void;\n+  placeholder?: string;\n+  className?: string;\n+}\n+\n+// Add validation interface\n+interface QuestionValidation {\n+  isValid: boolean;\n+  message: string;\n+}\n+\n+// Add this type validation helper\n+const getQuestionTypeFields = (type: string) => {\n+  switch (type) {\n+    case 'multipleChoice':\n+      return {\n+        required: ['prompt', 'options', 'correctAnswer'],\n+        fields: {\n+          prompt: '',\n+          options: [],\n+          correctAnswer: '',\n+          teacherScript: '',\n+          explanation: ''\n+        }\n+      };\n+    case 'fillInBlank':\n+      return {\n+        required: ['prompt', 'blanks'],\n+        fields: {\n+          prompt: '',\n+          blanks: [],\n+          teacherScript: '',\n+          explanation: ''\n+        }\n+      };\n+    case 'trueFalse':\n+      return {\n+        required: ['prompt', 'correctAnswer'],\n+        fields: {\n+          prompt: '',\n+          correctAnswer: null,\n+          teacherScript: '',\n+          explanation: ''\n+        }\n+      };\n+    case 'matching':\n+      return {\n+        required: ['prompt', 'pairs'],\n+        fields: {\n+          prompt: '',\n+          pairs: [],\n+          teacherScript: '',\n+          explanation: ''\n+        }\n+      };\n+    case 'ordering':\n+      return {\n+        required: ['prompt', 'items'],\n+        fields: {\n+          prompt: '',\n+          items: [],\n+          correctOrder: [],\n+          teacherScript: '',\n+          explanation: ''\n+        }\n+      };\n+    case 'shortAnswer':\n+      return {\n+        required: ['prompt', 'sampleAnswer'],\n+        fields: {\n+          prompt: '',\n+          sampleAnswer: '',\n+          teacherScript: '',\n+          explanation: '',\n+          keywords: []\n+        }\n+      };\n+    case 'speaking':\n+      return {\n+        required: ['prompt', 'sampleAnswer'],\n+        fields: {\n+          prompt: '',\n+          sampleAnswer: '',\n+          teacherScript: '',\n+          audioPrompt: '',\n+          pronunciation: ''\n+        }\n+      };\n+    case 'listening':\n+      return {\n+        required: ['prompt', 'audioContent'],\n+        fields: {\n+          prompt: '',\n+          audioContent: '',\n+          transcript: '',\n+          teacherScript: '',\n+          comprehensionQuestions: []\n+        }\n+      };\n+    case 'listenAndRepeat':\n+      return {\n+        required: ['prompt', 'audioContent'],\n+        fields: {\n+          prompt: '',\n+          audioContent: '',\n+          targetPhrase: '',\n+          teacherScript: '',\n+          pronunciation: ''\n+        }\n+      };\n+    default:\n+      return {\n+        required: ['prompt'],\n+        fields: {\n+          prompt: '',\n+          teacherScript: ''\n+        }\n+      };\n+  }\n+}\n+\n+interface SaveStatus {\n+  id: string;\n+  status: 'draft' | 'saved' | 'saving' | 'error';\n+  lastSaved?: string;\n+}\n+\n+interface Question {\n+  id: string;\n+  type: string;\n+  lesson_id: string;\n+  title: string;\n+  content: string;\n+  metadata: Record<string, any>;\n+  data: Record<string, any>; // This allows dynamic field access\n+  correct_answer: string;\n+  exercisePrompts: ExercisePrompt[];\n+  isDraft?: boolean;\n+}\n+\n+// Add at the top of the file with other type definitions\n+type QuestionType = keyof typeof QUESTION_TYPES;\n+\n+// Add this type guard function\n+const isValidQuestionType = (type: string): type is QuestionType => {\n+  return type in QUESTION_TYPES;\n+};\n+\n+// Update handleAddQuestion\n+\n+\n+// Update validateQuestion\n+const validateQuestion = (question: Question): QuestionValidation => {\n+  const { required } = getQuestionTypeFields(question.type);\n+  const missingFields = required.filter(field => {\n+    const value = question.data?.[field];\n+    return !value || \n+      (Array.isArray(value) && value.length === 0) || \n+      (typeof value === 'string' && !value.trim());\n+  });\n+\n+  if (missingFields.length > 0) {\n+    return {\n+      isValid: false,\n+      message: `Missing required fields: ${missingFields.join(', ')}`\n+    };\n+  }\n+\n+  return { isValid: true, message: '' };\n+};\n+\n+// Add proper type for question data\n+interface QuestionData {\n+  id?: string;\n+  content?: string;\n+  type?: string;\n+  data?: {\n+    prompt?: string;\n+    teacher_script?: string;\n+    followup_prompt?: string[];\n+    sample_answer?: string;\n+    answer?: string;\n+  } | null;\n+  prompt: string;\n+  teacherScript: string;\n+  followup_prompt: string[];\n+  answer?: string;\n+  correct_answer?: string;\n+}\n+\n+// In your component where you handle questions\n+const handleQuestionData = (question: QuestionData) => {\n+  return {\n+    ...question,\n+    data: {\n+      prompt: question?.data?.prompt || '',\n+      teacher_script: question?.data?.teacher_script || '',\n+      followup_prompt: question?.data?.followup_prompt || [],\n+      sample_answer: question?.data?.sample_answer || undefined,  // Convert null to undefined\n+      answer: question?.data?.answer || undefined  // Convert null to undefined\n+    } as const,\n+    sampleAnswer: question?.correct_answer || ''\n+  };\n+};\n+\n+export default function LessonManagementPage() {\n+  // State declarations\n+  \n+  const [selectedGradeId, setSelectedGradeId] = useState<string | null>(null);\n+  const [selectedTopicId, setSelectedTopicId] = useState<string | null>(null);\n+  const [selectedSubtopicId, setSelectedSubtopicId] = useState<string | null>(null);\n+  const [lessonTitle, setLessonTitle] = useState<string>('');\n+  const [currentLessonId, setCurrentLessonId] = useState<string | null>(null);\n+  const [questions, setQuestions] = useState<Question[]>([]);\n+  const [saveProgress, setSaveProgress] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');\n+  const [activities, setActivities] = useState<Activity[]>([]);\n+  const [localBuffer, setLocalBuffer] = useState<{ timestamp: number; data: any } | null>(null);\n+  const [lastSavedToServer, setLastSavedToServer] = useState<number>(Date.now());\n+  const [selectedQuestionType, setSelectedQuestionType] = useState<string>('');\n+  const [editingQuestionIndex, setEditingQuestionIndex] = useState<number | null>(null);\n+  const [showHelpTips, setShowHelpTips] = useState(true);\n+  const [isNavigating, setIsNavigating] = useState(false);\n+  const [lessons, setLessons] = useState<Lesson[]>([]);\n+  const [grades, setGrades] = useState<Grade[]>([]);\n+  const [topics, setTopics] = useState<Topic[]>([]);\n+  const [subtopics, setSubtopics] = useState<SubTopic[]>([]);\n+  const [contentHeading, setContentHeading] = useState<string>('');\n+    // Add with your other state declarations\n+  const [isContentExpanded, setIsContentExpanded] = useState<boolean>(false);\n+  const [modalState, setModalState] = useState({\n+    showAddGrade: false,\n+    showAddTopic: false,\n+    showAddSubtopic: false,\n+    showAddLesson: false\n+  });\n+  const [isViewMode, setIsViewMode] = useState<boolean>(true);\n+  const [expandedGrade, setExpandedGrade] = useState<string | null>(null);\n+  const [expandedTopic, setExpandedTopic] = useState<string | null>(null);\n+  const [expandedSubtopic, setExpandedSubtopic] = useState<string | null>(null);\n+  const [expandedQuestion, setExpandedQuestion] = useState<number | null>(null);\n+  const [expandedActivity, setExpandedActivity] = useState<number | null>(null);\n+  const [newItemData, setNewItemData] = useState({\n+    name: '',\n+    description: ''\n+  });\n+  const [lessonContent, setLessonContent] = useState<string>('');\n+  const [isContentEditorOpen, setIsContentEditorOpen] = useState(false);\n+  const [isEditingTitle, setIsEditingTitle] = useState<boolean>(false);\n+  const [isEditingHeading, setIsEditingHeading] = useState<boolean>(false);\n+  const [isEditingDescription, setIsEditingDescription] = useState<boolean>(false);\n+  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\n+  const [isSidebarLocked, setIsSidebarLocked] = useState(true);\n+  const [alertDialogState, setAlertDialogState] = useState<{\n+    isOpen: boolean;\n+    title: string;\n+    message: string;\n+    onConfirm: (value?: unknown) => void;\n+  }>({\n+    isOpen: false,\n+    title: '',\n+    message: '',\n+    onConfirm: () => {}\n+  });\n+\n+  const { \n+    selectedGrade,\n+    setSelectedGrade,\n+    selectedTopic,\n+    setSelectedTopic,\n+    selectedSubtopic,\n+    setSelectedSubtopic,\n+    selectedLesson,\n+    setSelectedLesson\n+  } = useContentStore();\n+\n+  // Add new state for tracking save status\n+  interface SaveStatus {\n+    id: string;\n+    status: 'draft' | 'saved' | 'saving' | 'error' | 'draft';\n+    lastSaved?: string;\n+  }\n+\n+  const [questionSaveStatuses, setQuestionSaveStatuses] = useState<Array<{\n+    id: string;\n+    status: 'idle' | 'saving' | 'saved' | 'error' | 'draft';\n+  }>>([]);\n+  const [promptSaveStatuses, setPromptSaveStatuses] = useState<SaveStatus[]>([]);\n+\n+  // Add this state to track dropdown state\n+  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n+\n+  // Add these states\n+  const [isLoadingSubtopics, setIsLoadingSubtopics] = useState(false);\n+  const [isLoadingLessons, setIsLoadingLessons] = useState(false);\n+\n+  // Add these state variables\n+  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n+  const [itemToDelete, setItemToDelete] = useState<{\n+    id: string;\n+    type: 'topic' | 'subtopic' | 'lesson';\n+    title: string;\n+  } | null>(null);\n+\n+  // Add these state variables\n+  const [deleteError, setDeleteError] = useState<string | null>(null);\n+\n+  // Add this validation function\n+  const canDeleteItem = async (type: 'topic' | 'subtopic' | 'lesson', id: string) => {\n+    switch (type) {\n+      case 'topic':\n+        const subtopicsInTopic = subtopics.filter(s => s.topic_id === id);\n+        return subtopicsInTopic.length === 0;\n+        \n+      case 'subtopic':\n+        const lessonsInSubtopic = lessons.filter(l => l.subtopic_id === id);\n+        return lessonsInSubtopic.length === 0;\n+        \n+      case 'lesson':\n+        const { data: questions } = await supabase\n+          .from('questions')\n+          .select('id')\n+          .eq('lesson_id', id);\n+        return !questions || questions.length === 0;\n+        \n+      default:\n+        return false;\n+    }\n+  };\n+\n+  // Event handlers\n+  const handleQuestionTypeChange = useCallback((type: string) => {\n+    if (isQuestionType(type)) {\n+      setSelectedQuestionType(type);\n+    }\n+  }, []);\n+\n+  const handleAddQuestion = useCallback(() => {\n+    if (!selectedQuestionType || !isQuestionType(selectedQuestionType)) return;\n+\n+    const defaultData = QUESTION_TYPES[selectedQuestionType].defaultData;\n+    const newQuestion: Question = {\n+      id: crypto.randomUUID(),\n+      type: selectedQuestionType,\n+      //data: {},\n+      title: 'New Question',\n+      content: '',\n+      lesson_id: currentLessonId || '',\n+      metadata: {},\n+      data: {\n+        ...defaultData,\n+        prompt: '',\n+        teacher_script: '',\n+        followup_prompt: [],\n+        sample_answer: ''\n+      },\n+      correct_answer: '',\n+      exercisePrompts: [],\n+      isDraft: true\n+    };\n+\n+    setQuestions(prev => [...prev, newQuestion]);\n+    setQuestionSaveStatuses(prev => [\n+      ...prev,\n+      { id: newQuestion.id, status: 'draft' }\n+    ]);\n+    setSelectedQuestionType('');\n+  }, [selectedQuestionType, currentLessonId]);\n+\n+  const checkDeletability = async (type: 'topic' | 'subtopic' | 'lesson', id: string) => {\n+    try {\n+      switch (type) {\n+        case 'lesson':\n+          const { data: questions } = await supabase\n+            .from('questions')\n+            .select('count')\n+            .eq('lesson_id', id);\n+          return { \n+            canDelete: questions?.[0]?.count === 0,\n+            message: questions?.[0]?.count ?? 0 > 0 \n+              ? `Delete ${questions?.[0]?.count} questions first` \n+              : null\n+          };\n+  \n+        case 'subtopic':\n+          const { data: lessons } = await supabase\n+            .from('lessons')\n+            .select('id')\n+            .eq('subtopic_id', id);\n+          return {\n+            canDelete: !lessons?.length,\n+            message: lessons?.length ? 'Delete all lessons first' : null\n+          };\n+  \n+        case 'topic':\n+          const { data: subtopics } = await supabase\n+            .from('subtopics')\n+            .select('id')\n+            .eq('topic_id', id);\n+          return {\n+            canDelete: !subtopics?.length,\n+            message: subtopics?.length ? 'Delete all subtopics first' : null\n+          };\n+  \n+        default:\n+          return { canDelete: false, message: 'Invalid item type' };\n+      }\n+    } catch (error) {\n+      console.error('Error checking deletability:', error);\n+      return { canDelete: false, message: 'Error checking item' };\n+    }\n+  };\n+\n+  const handleRemoveQuestion = async (index: number) => {\n+    try {\n+      const questionToDelete = questions[index];\n+      \n+      // Delete related exercise prompts first\n+      const { error: promptError } = await supabase\n+        .from('exercise_prompts')\n+        .delete()\n+        .eq('question_id', questionToDelete.id);\n+\n+      if (promptError) throw promptError;\n+\n+      // Then delete the question\n+      const { error: questionError } = await supabase\n+        .from('questions')\n+        .delete()\n+        .eq('id', questionToDelete.id);\n+\n+      if (questionError) throw questionError;\n+\n+      // Update local state\n+      const newQuestions = questions.filter((_, i) => i !== index);\n+      setQuestions(newQuestions);\n+      \n+      toast.success('Question and related prompts deleted successfully');\n+    } catch (error) {\n+      console.error('Error deleting question:', error);\n+      toast.error('Failed to delete question and prompts');\n+    }\n+  };\n+\n+  const handleUpdateQuestion = useCallback(async (index: number, updatedQuestion: Question) => {\n+    const newQuestions = [...questions];\n+    newQuestions[index] = updatedQuestion;\n+    setQuestions(newQuestions);\n+    setQuestionSaveStatuses(prev => prev.map((status, i) => \n+      i === index ? { ...status, status: 'draft' } : status\n+    ));\n+  }, [questions]);\n+\n+  const handleAddExercisePrompt = useCallback((questionIndex: number) => {\n+    setQuestions(prev => prev.map((question, i) => {\n+      if (i === questionIndex) {\n+        return {\n+          ...question,\n+          exercisePrompts: [\n+            ...question.exercisePrompts,\n+            {\n+              id: crypto.randomUUID(),\n+              text: '',\n+              media: '',\n+              type: 'image',\n+              narration: 'Your turn',\n+              saytext: 'Say: ',\n+              metadata: {\n+                estimatedTime: 0\n+              },\n+              created_at: new Date().toISOString(),\n+              updated_at: new Date().toISOString()\n+            }\n+          ]\n+        };\n+      }\n+      return question;\n+    }));\n+  }, []);\n+\n+  const handleRemoveExercisePrompt = useCallback((questionIndex: number, promptIndex: number) => {\n+    setQuestions(prev => prev.map((question, i) => {\n+      if (i === questionIndex) {\n+        return {\n+          ...question,\n+          exercisePrompts: question.exercisePrompts.filter((_, j) => j !== promptIndex)\n+        };\n+      }\n+      return question;\n+    }));\n+  }, []);\n+\n+  const handleExercisePromptChange = useCallback(async (\n+    questionIndex: number,\n+    promptIndex: number,\n+    updatedPrompt: ExercisePrompt\n+  ) => {\n+    try {\n+      const promptUpdate = {\n+        id: updatedPrompt.id,\n+        question_id: updatedPrompt.question_id,\n+        text: updatedPrompt.text,\n+        type: updatedPrompt.type,\n+        narration: updatedPrompt.narration,\n+        saytext: updatedPrompt.saytext,\n+        media: updatedPrompt.media,\n+        // Remove order_index as it's not in schema\n+        created_at: new Date().toISOString()\n+      };\n+\n+      const { error: promptError } = await supabase\n+        .from('exercise_prompts')\n+        .upsert(promptUpdate)\n+        .select();\n+\n+      if (promptError) throw promptError;\n+\n+      // Update local state\n+      setQuestions(prev => prev.map((question, i) => {\n+        if (i === questionIndex) {\n+          const newPrompts = [...question.exercisePrompts];\n+          newPrompts[promptIndex] = updatedPrompt;\n+          return { ...question, exercisePrompts: newPrompts };\n+        }\n+        return question;\n+      }));\n+\n+    } catch (error) {\n+      console.error('Error saving prompt:', error);\n+      toast.error('Failed to save prompt');\n+    }\n+  }, []);\n+\n+  const handleAddActivity = useCallback(() => {\n+    const newActivity: Activity = {\n+      id: crypto.randomUUID(),\n+      lesson_id: currentLessonId || '',\n+      created_at: new Date().toISOString(),\n+      type: 'practice',\n+      title: '',\n+      name: '',\n+      instructions: '',\n+      media: [],\n+      data: {\n+        prompt: '',\n+        teacherScript: '',\n+        media: []\n+      }\n+    };\n+    setActivities(prev => [...prev, newActivity]);\n+  }, [currentLessonId]);\n+\n+  const handleUpdateActivity = useCallback((index: number, updatedActivity: Activity) => {\n+    setActivities(prev => prev.map((activity, i) => i === index ? updatedActivity : activity));\n+  }, []);\n+\n+  const handleRemoveActivity = useCallback((index: number) => {\n+    setActivities(prev => prev.filter((_, i) => i !== index));\n+  }, []);\n+\n+  const handleExercisePromptUpdate = useCallback((questionIndex: number, promptIndex: number, updatedPrompt: ExercisePrompt) => {\n+    const updatedQuestions = [...questions];\n+    updatedQuestions[questionIndex].exercisePrompts[promptIndex] = updatedPrompt;\n+    handleUpdateQuestion(questionIndex, updatedQuestions[questionIndex]);\n+  }, [questions, handleUpdateQuestion]);\n+\n+  const handleQuestionDataChange = useCallback((questionIndex: number, field: string, value: string) => {\n+    setQuestions(prev => prev.map((q, i) => \n+      i === questionIndex \n+        ? { \n+            ...q, \n+            data: { \n+              prompt: q.data?.prompt || '',\n+              teacherScript: q.data?.teacherScript || '',\n+              ...q.data,\n+              [field]: value \n+            } \n+          }\n+        : q\n+    ));\n+  }, []);\n+\n+  const [isSaving, setIsSaving] = useState(false);\n+\n+  const handleSaveLesson = async () => {\n+    try {\n+      if (!currentLessonId || !selectedSubtopicId) {\n+        toast.error('Please select a subtopic and lesson first');\n+        return;\n+      }\n+\n+      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\n+      if (sessionError) throw sessionError;\n+      \n+      if (!session?.user) {\n+        toast.error('Please sign in to save lessons');\n+        return;\n+      }\n+\n+      // Get user's role from session\n+      const userRole = session.user.user_metadata?.role;\n+      console.log('Current user role:', userRole);\n+      console.log('📝 Saving content heading:', {\n+        contentHeading,\n+        currentLessonId,\n+        selectedSubtopicId,\n+        timestamp: new Date().toISOString()\n+      });\n+\n+      // Create metadata object\n+      const lessonMetadata = {\n+        lastEdited: new Date().toISOString(),\n+        version: 1,\n+        status: 'draft' \n+      };\n+\n+      // Complete lesson data with all fields\n+      const lessonData = {\n+        id: currentLessonId,\n+        title: lessonTitle,\n+        content: lessonContent,\n+        metadata: lessonMetadata, // Supabase will automatically handle JSON conversion\n+        content_type: 'html',\n+        lesson_type: 'lesson',\n+        grade_id: selectedGradeId,\n+        topic_id: selectedTopicId,\n+        subtopic_id: selectedSubtopicId,\n+        user_id: session.user.id,\n+        updated_at: new Date().toISOString(),\n+        role: userRole, // Include role in the payload\n+        description: '',\n+        prerequisites: [],\n+        media_type: 'image',\n+        media_url: '',\n+        contentheading: contentHeading || ''\n+      };\n+\n+      console.log('📦 Data being sent to Supabase:', lessonData);\n+\n+      // Save lesson with all fields\n+      const { data, error: lessonError } = await supabase\n+        .from('lessons')\n+        .upsert(lessonData, { \n+          onConflict: 'id'\n+        })\n+        .select();\n+\n+      if (lessonError) throw lessonError;\n+\n+      // 2. Save lesson content\n+      const { data: existingContent } = await supabase\n+        .from('lesson_content')\n+        .select('id')\n+        .eq('lesson_id', currentLessonId)\n+        .single();\n+\n+      const contentMetadata = {\n+        lastEdited: new Date().toISOString(),\n+        version: 1,\n+        status: 'draft'\n+      };\n+\n+      const contentUpdate = {\n+        id: existingContent?.id || crypto.randomUUID(),\n+        lesson_id: currentLessonId,\n+        content: [lessonContent],\n+        metadata: contentMetadata, // Supabase will automatically handle JSON conversion\n+        content_type: 'html',\n+        user_id: session.user.id,\n+        updated_at: new Date().toISOString(),\n+        created_at: new Date().toISOString()\n+      };\n+\n+      const { error: contentError } = await supabase\n+        .from('lesson_content')\n+        .upsert(contentUpdate, { onConflict: 'id' });\n+\n+      if (contentError) throw contentError;\n+\n+      // 3. Save questions\n+      for (const question of questions) {\n+        const questionData = {\n+          id: question.id,\n+          lesson_id: currentLessonId,\n+          type: question.type,\n+          title: question.title,\n+          metadata: question.metadata,\n+          data: question.data,\n+          updated_at: new Date().toISOString(),\n+          user_id: session.user.id\n+        };\n+\n+        const { error: questionError } = await supabase\n+          .from('questions')\n+          .upsert(questionData, { onConflict: 'id' });\n+\n+        if (questionError) throw questionError;\n+\n+        //4. Save exercise prompts for this question\n+        if (question.exercisePrompts) {\n+          for (const prompt of question.exercisePrompts) {\n+            const promptData = {\n+              id: prompt.id,\n+              question_id: question.id,\n+              text: prompt.text,\n+              media: prompt.media,\n+              type: prompt.type,\n+              narration: prompt.narration,\n+              saytext: prompt.saytext,\n+              user_id: session.user.id,\n+              updated_at: new Date().toISOString()\n+            };\n+\n+            const { error: promptError } = await supabase\n+              .from('exercise_prompts')\n+              .upsert(promptData, { onConflict: 'id' });\n+\n+            if (promptError) throw promptError;\n+          }\n+        }\n+      }\n+\n+      // 5. Save activities\n+      if (activities.length > 0) {\n+        const activitiesData = activities.map(activity => ({\n+          id: activity.id,\n+          lesson_id: currentLessonId,\n+          type: activity.type,\n+          title: activity.title,\n+          name: activity.name,\n+          instructions: activity.instructions,\n+          media: activity.media,\n+          data: activity.data,\n+          created_at: new Date().toISOString()\n+        }));\n+\n+        const { error: activitiesError } = await supabase\n+          .from('activities')\n+          .upsert(activitiesData, { onConflict: 'id' });\n+\n+        if (activitiesError) throw activitiesError;\n+      }\n+\n+      // After successful save\n+      console.log('✅ Content heading saved successfully:', {\n+        contentHeading,\n+        lessonId: currentLessonId,\n+        timestamp: new Date().toISOString()\n+      });\n+\n+      toast.success('Lesson saved successfully');\n+    } catch (err) {\n+      const error = err as PostgrestError;\n+      console.error('❌ Error saving content heading:', {\n+        error: error.message,\n+        contentHeading,\n+        lessonContent,\n+        lessonId: currentLessonId,\n+        timestamp: new Date().toISOString()\n+      });\n+      toast.error(`Failed to save lesson: ${error.message}`);\n+\n+\n+    }\n+  };\n+\n+  const handleSaveQuestion = async (question: Question, index: number) => {\n+    const loadingToast = toast.loading(`Saving question ${index + 1}...`);\n+    \n+    try {\n+      const { data: { session } } = await supabase.auth.getSession();\n+      if (!session?.user) {\n+        toast.error('Please sign in to save question', { id: loadingToast });\n+        return;\n+      }\n+\n+      // Save question\n+      const questionData = {\n+        id: question.id,\n+        lesson_id: currentLessonId,\n+        type: question.type,\n+        title: question.title,\n+        metadata: question.metadata,\n+        data: {\n+          prompt: question.data?.prompt ?? '',\n+          teacherScript: question.data?.teacherScript ?? '',\n+          followup_prompt: question.data?.followup_prompt ?? [],\n+          sampleAnswer: question.data?.sampleAnswer || undefined,  // Convert null to undefined\n+          answer: question.data?.answer || undefined  // Convert null to undefined\n+        } as const,\n+        user_id: session.user.id,\n+        updated_at: new Date().toISOString()\n+      };\n+\n+      const { error: questionError } = await supabase\n+        .from('questions')\n+        .upsert(questionData, { onConflict: 'id' });\n+\n+      if (questionError) throw questionError;\n+\n+      // Save exercise prompts if they exist\n+      if (question.exercisePrompts?.length) {\n+        for (const prompt of question.exercisePrompts) {\n+          const promptData = {\n+            id: prompt.id,\n+            question_id: question.id,\n+            text: prompt.text,\n+            type: prompt.type,\n+            narration: prompt.narration,\n+            saytext: prompt.saytext,\n+            media: prompt.media,\n+            user_id: session.user.id,\n+            updated_at: new Date().toISOString()\n+          };\n+\n+          const { error: promptError } = await supabase\n+            .from('exercise_prompts')\n+            .upsert(promptData, { onConflict: 'id' });\n+\n+          if (promptError) throw promptError;\n+        }\n+      }\n+\n+      toast.success(`Question ${index + 1} saved successfully`, { id: loadingToast });\n+    } catch (error) {\n+      console.error('Error saving question:', error);\n+      toast.error(`Failed to save question ${index + 1}`, { id: loadingToast });\n+    }\n+  };\n+\n+  const handleSaveActivity = async (activity: Activity) => {\n+    try {\n+      await contentService.saveActivity(activity);\n+      toast.success('Activity saved');\n+    } catch (error) {\n+      console.error('Failed to save activity:', error);\n+      toast.error('Failed to save activity');\n+    }\n+  };\n+\n+  // Effects\n+  useEffect(() => {\n+    const fetchGrades = async () => {\n+      try {\n+        const { data, error } = await supabase\n+          .from('grades')\n+          .select('*')\n+          .order('name');\n+\n+        if (error) {\n+          console.error('Supabase error:', error);\n+          throw error;\n+        }\n+\n+        if (!data) {\n+          throw new Error('No data returned from Supabase');\n+        }\n+\n+        // Map the grades to match your interface\n+        const validGrades = data.map((grade: any) => ({\n+          _id: grade.id,\n+          id: grade.id,\n+          name: grade.name,\n+          level: grade.level || 0,  // Add default value if not provided\n+          orderIndex: grade.order_index || 0,  // Add default value if not provided\n+          topics: []\n+        }));\n+        \n+        setGrades(validGrades);\n+      } catch (error) {\n+        console.error('Error fetching grades:', error);\n+        toast.error('Failed to fetch grades');\n+      }\n+    };\n+\n+    fetchGrades();\n+  }, []);\n+\n+  // Topic Selection\n+  useEffect(() => {\n+    const fetchTopics = async () => {\n+      if (!selectedGradeId) return;\n+      \n+      try {\n+        const { data, error } = await supabase\n+          .from('topics')\n+          .select('*')\n+          .eq('grade_id', selectedGradeId)\n+          .order('title');\n+\n+        if (error) {\n+          throw error;\n+        }\n+\n+        // Map the topics to match your interface\n+        const validTopics = (data || []).map((topic: any) => ({\n+          _id: topic.id,\n+          id: topic.id,\n+          name: topic.title,\n+          title: topic.title,\n+          grade_id: topic.grade_id,\n+          subtopics: []\n+        }));\n+        \n+        setTopics(validTopics);\n+      } catch (error) {\n+        console.error('Error fetching topics:', error);\n+        toast.error('Failed to fetch topics');\n+      }\n+    };\n+\n+    fetchTopics();\n+  }, [selectedGradeId]);\n+\n+  // Subtopic Selection\n+  useEffect(() => {\n+    const fetchSubtopics = async () => {\n+      if (!selectedTopicId) return;\n+      \n+      try {\n+        // Use content service to fetch subtopics\n+        const subtopicsData = await contentService.fetchSubtopics(selectedTopicId);\n+        console.log('Fetched subtopics:', subtopicsData);\n+\n+        const validSubtopics = subtopicsData.map((subtopic: any) => ({\n+          id: subtopic.id,\n+          title: subtopic.title,\n+          description: subtopic.description,\n+          topic_id: subtopic.topic_id,\n+          lessons: [],\n+          order_index: subtopicsData.length\n+        }));\n+        \n+        setSubtopics(validSubtopics);\n+        \n+        // Update global state\n+        if (selectedSubtopic) {\n+          setSelectedSubtopic(selectedSubtopic);\n+        }\n+      } catch (err) {\n+        const error = err as Error;\n+        console.error('Error fetching subtopics:', error);\n+        toast.error('Failed to fetch subtopics');\n+      }\n+    };\n+\n+    fetchSubtopics();\n+  }, [selectedTopicId, selectedSubtopic, setSelectedSubtopic]);\n+\n+  // Add effect to monitor subtopics state\n+  useEffect(() => {\n+    console.log('Current subtopics state:', subtopics);\n+  }, [subtopics]);\n+\n+  // Add fetchLessons function\n+  const fetchLessons = useCallback(async () => {\n+    if (!selectedSubtopicId) return;\n+    try {\n+      const { data, error } = await supabase\n+        .from('lessons')\n+        .select('*')\n+        .eq('subtopic_id', selectedSubtopicId)\n+        .order('title');\n+\n+      if (error) {\n+        throw error;\n+      }\n+      \n+      // Map the lessons to ensure they have _id\n+      const validLessons = (data || []).map((lesson: any) => ({\n+        ...lesson,\n+        _id: lesson._id || lesson.id, // Use _id if available, otherwise use id\n+        title: lesson.title || 'Untitled Lesson'\n+      })).filter((lesson: any) => lesson._id); // Only include lessons with valid IDs\n+      \n+      setLessons(validLessons);\n+    } catch (error) {\n+      console.error('Error fetching lessons:', error);\n+      toast.error('Failed to fetch lessons');\n+    }\n+  }, [selectedSubtopicId]);\n+  // Add loadLessonContent function\n+  const isLoading = useRef(false);\n+  const loadLessonContent = useCallback(async (lessonId: string) => {\n+    // Prevent multiple simultaneous loads\n+    if (isLoading.current) return;\n+    isLoading.current = true;\n+\n+    const controller = new AbortController();\n+\n+    try {\n+      // Clear existing content first\n+      setLessonTitle('');\n+      setContentHeading('');\n+      setLessonContent('');\n+      setQuestions([]);\n+      \n+      // First fetch lesson data\n+      const { data: lessonData, error: lessonError } = await supabase\n+        .from('lessons')\n+        .select('*')\n+        .eq('id', lessonId)\n+        .single()\n+        \n+\n+      if (lessonError) {\n+        console.error('Lesson fetch error:', lessonError);\n+        throw lessonError;\n+      }\n+\n+      // Set lesson data\n+      setLessonTitle(lessonData.title || '');\n+      setContentHeading(lessonData.content || '');\n+\n+      // Then fetch lesson content with explicit headers\n+      const { data: contentData, error: contentError } = await supabase\n+        .from('lesson_content')\n+        .select('*')\n+        .eq('lesson_id', lessonId)\n+        .order('updated_at', { ascending: false })\n+        .limit(1)\n+        .maybeSingle();\n+\n+      if (contentError) {\n+        console.error('Content fetch error:', contentError);\n+        throw contentError;\n+      }\n+\n+      // Set content if available\n+      if (contentData?.content) {\n+        setLessonContent(typeof contentData.content === 'string' \n+          ? contentData.content \n+          : JSON.stringify(contentData.content)\n+        );\n+      }\n+\n+    } catch (error: unknown) {\n+      if (error instanceof Error && error.name === 'AbortError') {\n+        console.log('Request aborted');\n+        return;\n+      }\n+      console.error('Error loading lesson:', error);\n+      toast.error('Failed to load lesson content');\n+      \n+      // Reset states on error\n+      setLessonTitle('');\n+      setContentHeading('');\n+      setLessonContent('');\n+      setQuestions([]);\n+    } finally {\n+      isLoading.current = false;\n+    }\n+\n+    return () => {\n+      controller.abort();\n+    };\n+  }, []); // Empty dependencies since we're using closure over state setters\n+\n+  // // Add effect for fetching lessons when subtopic changes\n+  useEffect(() => {\n+    if (selectedSubtopicId) {\n+      fetchLessons();\n+    }\n+  }, [selectedSubtopicId, fetchLessons]);\n+\n+  // Add effect for loading lesson content when currentLessonId changes\n+    useEffect(() => {\n+    let isMounted = true;\n+    let timeoutId: NodeJS.Timeout;\n+\n+    const loadContent = async () => {\n+      if (!currentLessonId || !isMounted) return;\n+\n+      // Clear previous timeout if exists\n+      if (timeoutId) clearTimeout(timeoutId);\n+\n+      // Set new timeout for debouncing\n+      timeoutId = setTimeout(() => {\n+        if (isMounted) {\n+          loadLessonContent(currentLessonId);\n+        }\n+      }, 300);\n+    };\n+\n+    loadContent();\n+\n+    // Cleanup function\n+    return () => {\n+      isMounted = false;\n+      if (timeoutId) clearTimeout(timeoutId);\n+      if (isLoading.current) isLoading.current = false;\n+    };\n+  }, [currentLessonId]); // Remove loadLessonContent from dependencies\n+\n+  useEffect(() => {\n+    console.log('Current lessons state:', lessons);\n+  }, [lessons]);\n+\n+    // Add keyboard shortcut for saving\n+  useEffect(() => {\n+    const handleKeyDown = (e: KeyboardEvent) => {\n+      if ((e.ctrlKey || e.metaKey) && e.key === 's') {\n+        e.preventDefault();\n+        handleSaveLesson();\n+      }\n+    };\n+\n+    window.addEventListener('keydown', handleKeyDown);\n+    return () => window.removeEventListener('keydown', handleKeyDown);\n+  }, [handleSaveLesson]);\n+\n+  // Add SaveFeedback component\n+  const SaveFeedback = useCallback(() => {\n+    if (saveProgress === 'idle') return null;\n+\n+    return (\n+    <div className=\"fixed bottom-4 right-4\">\n+      {saveProgress === 'saving' && (\n+        <div className=\"flex items-center gap-2 bg-background border rounded-lg px-4 py-2 shadow-lg\">\n+          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n+          <span className=\"text-sm\">Saving changes...</span>\n+        </div>\n+      )}\n+      {saveProgress === 'saved' && (\n+        <div className=\"flex items-center gap-2 bg-green-500 text-white rounded-lg px-4 py-2 shadow-lg\">\n+          <Check className=\"h-4 w-4\" />\n+          <span className=\"text-sm\">Changes saved</span>\n+        </div>\n+      )}\n+      {saveProgress === 'error' && (\n+        <div className=\"flex items-center gap-2 bg-destructive text-destructive-foreground rounded-lg px-4 py-2 shadow-lg\">\n+          <X className=\"h-4 w-4\" />\n+          <span className=\"text-sm\">Error saving changes</span>\n+        </div>\n+      )}\n+    </div>\n+  );\n+  }, [saveProgress]);\n+\n+  // Update handlers\n+  const handleGradeSelect = (gradeId: string) => {\n+    // Always keep sidebar open during selection\n+    setIsSidebarCollapsed(false);\n+    setIsSidebarLocked(true);\n+    \n+    // Batch state updates\n+    requestAnimationFrame(() => {\n+      setSelectedGradeId(gradeId);\n+      setSelectedGrade(gradeId);\n+      setSelectedTopicId(null);\n+      setSelectedTopic('');\n+      setSelectedSubtopicId(null);\n+      setSelectedSubtopic('');\n+      setCurrentLessonId(null);\n+      \n+      if (isViewMode) {\n+        setExpandedGrade(gradeId);\n+      }\n+    });\n+  };\n+\n+  const handleTopicSelect = (value: string) => {\n+    setSelectedTopicId(value);\n+    setSelectedTopic(value);\n+    setSelectedSubtopicId(null);\n+    setSelectedSubtopic('');\n+    setCurrentLessonId(null);\n+  };\n+\n+  const handleSubtopicSelect = (value: string) => {\n+    setSelectedSubtopicId(value);\n+    setSelectedSubtopic(value);\n+    setCurrentLessonId(null);\n+  };\n+\n+  const handleLessonSelect = async (lessonId: string) => {\n+    try {\n+      // Lock sidebar during selection\n+      setIsSidebarLocked(true);\n+      setIsSidebarCollapsed(false);\n+      setCurrentLessonId(lessonId);\n+      \n+      // 1. Fetch lesson data\n+      const { data: lessonData, error: lessonError } = await supabase\n+        .from('lessons')\n+        .select('*')\n+        .eq('id', lessonId)\n+        .single();\n+\n+      if (lessonError) throw lessonError;\n+\n+      // 2. Fetch questions with exercise prompts\n+      const { data: questionsData, error: questionsError } = await supabase\n+        .from('questions')\n+        .select(`\n+          *,\n+          exercise_prompts (*)\n+        `)\n+        .eq('lesson_id', lessonId);\n+\n+      if (questionsError) throw questionsError;\n+\n+      // 3. Fetch activities - removed order_index\n+      const { data: activitiesData, error: activitiesError } = await supabase\n+        .from('activities')\n+        .select('*')\n+        .eq('lesson_id', lessonId);\n+\n+      if (activitiesError) throw activitiesError;\n+\n+      // Format questions with their exercise prompts\n+      const formattedQuestions = questionsData?.map(q => ({\n+        ...q,\n+        data: q.data || {},\n+        exercisePrompts: q.exercise_prompts || []\n+      })) || [];\n+\n+      // Set all states\n+      setLessonTitle(lessonData.title || '');\n+      setLessonContent(lessonData.content || '');\n+      setQuestions(formattedQuestions);\n+      setActivities(activitiesData || []);\n+\n+      // After successful load, unlock sidebar and allow collapse\n+      setTimeout(() => {\n+        setIsSidebarLocked(false);\n+        if (!isSidebarLocked) {\n+          setIsSidebarCollapsed(true);\n+        }\n+      }, 300);\n+\n+    } catch (error) {\n+      console.error('Error loading lesson:', error);\n+      toast.error('Failed to load lesson');\n+      // Reset states on error\n+      setLessonTitle('');\n+      setLessonContent('');\n+      setQuestions([]);\n+      setActivities([]);\n+    }\n+    if (!isSidebarLocked) {\n+      setIsSidebarCollapsed(true);\n+    }\n+  };\n+\n+  // Update the expansion handlers\n+  const handleTopicExpand = async (topicId: string) => {\n+    setExpandedTopic(expandedTopic === topicId ? null : topicId);\n+    setSelectedTopicId(topicId);\n+    \n+    // Load subtopics when topic is expanded\n+    if (topicId) {\n+      setIsLoadingSubtopics(true);\n+      try {\n+        const { data: subtopicsData, error } = await supabase\n+          .from('subtopics')\n+          .select('*')\n+          .eq('topic_id', topicId)\n+          .order('order_index');\n+\n+        if (error) throw error;\n+        setSubtopics(subtopicsData || []);\n+      } catch (error) {\n+        console.error('Error loading subtopics:', error);\n+        toast.error('Failed to load subtopics');\n+      } finally {\n+        setIsLoadingSubtopics(false);\n+      }\n+    }\n+  };\n+\n+  const handleSubtopicExpand = async (subtopicId: string) => {\n+    setExpandedSubtopic(expandedSubtopic === subtopicId ? null : subtopicId);\n+    setSelectedSubtopicId(subtopicId);\n+    \n+    if (subtopicId) {\n+      setIsLoadingLessons(true);\n+      try {\n+        const { data: lessonsData, error } = await supabase\n+          .from('lessons')\n+          .select('*')\n+          .eq('subtopic_id', subtopicId)\n+          .order('order_index');\n+\n+        if (error) throw error;\n+        setLessons(lessonsData || []);\n+      } catch (error) {\n+        console.error('Error loading lessons:', error);\n+        toast.error('Failed to load lessons');\n+      } finally {\n+        setIsLoadingLessons(false);\n+      }\n+    }\n+  };\n+\n+  const handleQuestionExpand = (index: number) => {\n+    setExpandedQuestion(expandedQuestion === index ? null : index);\n+  };\n+\n+  const handleActivityExpand = (index: number) => {\n+    setExpandedActivity(expandedActivity === index ? null : index);\n+  };\n+\n+  // Add effect to save mode changes to localStorage\n+  useEffect(() => {\n+    localStorage.setItem('lessonManagementViewMode', isViewMode.toString());\n+  }, [isViewMode]);\n+\n+  // Add handlers for creating new items\n+  const handleCreateGrade = async () => {\n+    try {\n+      const response = await fetch(`${API_ENDPOINT}/grades`, {\n+        method: 'POST',\n+        headers: { 'Content-Type': 'application/json' },\n+        body: JSON.stringify({ name: newItemData.name })\n+      });\n+\n+      if (!response.ok) throw new Error('Failed to create grade');\n+      const data = await response.json();\n+      \n+      if (!data.success) throw new Error(data.message || 'Failed to create grade');\n+      \n+      // Update grades list\n+      setGrades([...grades, data.data.grade]);\n+      setModalState({ ...modalState, showAddGrade: false });\n+      setNewItemData({ name: '', description: '' });\n+      toast.success('Grade created successfully');\n+    } catch (error) {\n+      console.error('Error creating grade:', error);\n+      toast.error('Failed to create grade');\n+    }\n+  };\n+\n+  const handleCreateTopic = async () => {\n+    if (!selectedGradeId) {\n+      toast.error('Please select a grade first');\n+      return;\n+    }\n+\n+    try {\n+      const newTopic = await contentService.createTopic({\n+        title: newItemData.name, // Map from newItemData.name to title\n+        description: newItemData.description,\n+        gradeId: selectedGradeId\n+      });\n+\n+      setTopics(prev => [...prev, newTopic]);\n+      toast.success('Topic created successfully');\n+      setModalState({ ...modalState, showAddTopic: false });\n+      setNewItemData({ name: '', description: '' });\n+    } catch (err) {\n+      const error = err instanceof Error ? err.message : String(err);\n+      console.error('Error creating topic:', error);\n+      toast.error('Failed to create topic');\n+    }\n+  };\n+    \n+  \n+\n+\n+  const handleCreateSubtopic = async (data: { title: string; description?: string }) => {\n+    try {\n+      if (!selectedTopicId) {\n+        toast.error('Please select a topic first');\n+        return;\n+      }\n+\n+      const newSubtopic = await contentService.createSubtopic({\n+        ...data,\n+        topicId: selectedTopicId\n+      });\n+\n+      setSubtopics(prev => [...prev, {\n+        _id: newSubtopic.id,\n+        id: newSubtopic.id,\n+        name: newSubtopic.title,\n+        title: newSubtopic.title,\n+        description: newSubtopic.description,\n+        topic_id: newSubtopic.topic_id,\n+        orderIndex: prev.length,\n+        lessons: []\n+      }]);\n+\n+      toast.success('Subtopic created successfully');\n+      setModalState(prev => ({ ...prev, showAddSubtopic: false }));\n+    } catch (err) {\n+      const error = err as Error;\n+      console.error('Error creating subtopic:', error);\n+      toast.error('Failed to create subtopic');\n+    }\n+  };\n+\n+  const handleUpdateSubtopic = async (subtopicId: string, data: { title: string; description?: string }) => {\n+    try {\n+      const { data: updatedSubtopic, error } = await supabase\n+        .from('sub_topics')\n+        .update(data)\n+        .eq('id', subtopicId)\n+        .select()\n+        .single();\n+\n+      if (error) throw error;\n+      \n+      setSubtopics(prev => prev.map(subtopic => \n+        subtopic.id === subtopicId \n+          ? {\n+              ...subtopic,\n+              name: updatedSubtopic.title\n+            }\n+          : subtopic\n+      ));\n+\n+      toast.success('Subtopic updated successfully');\n+    } catch (err) {\n+      const error = err as Error;\n+      console.error('Error updating subtopic:', error);\n+      toast.error('Failed to update subtopic');\n+    }\n+  };\n+\n+  const handleDeleteSubtopic = async (subtopicId: string) => {\n+    try {\n+      await contentService.deleteSubtopic(subtopicId);\n+      setSubtopics(prev => prev.filter(subtopic => subtopic.id !== subtopicId));\n+      setSelectedSubtopicId(null);\n+      toast.success('Subtopic deleted successfully');\n+    } catch (err) {\n+      const error = err as Error;\n+      console.error('Error deleting subtopic:', error);\n+      toast.error('Failed to delete subtopic');\n+    }\n+  };\n+\n+  const handleCreateLesson = async () => {\n+    if (!selectedSubtopicId) {\n+      toast.error('Please select a subtopic first');\n+      return;\n+    }\n+\n+    try {\n+      // First create the lesson\n+      const { data: newLesson, error: lessonError } = await supabase\n+        .from('lessons')\n+        .insert({\n+          title: newItemData.name,\n+          duration: 0,\n+          topic_id: selectedTopicId,\n+          subtopic_id: selectedSubtopicId,\n+          content: '', // Empty rich text content initially\n+          status: 'draft'\n+        })\n+        .select()\n+        .single();\n+\n+      if (lessonError) throw lessonError;\n+\n+      // Create initial question\n+      const { data: newQuestion, error: questionError } = await supabase\n+        .from('questions')\n+        .insert({\n+          lesson_id: newLesson.id,\n+          type: 'speaking', // default type\n+          title: 'Question 1',\n+          data: {\n+            prompt: '',\n+            teacherScript: '',\n+            options: []\n+          },\n+          order_index: 0\n+        })\n+        .select()\n+        .single();\n+\n+      if (questionError) throw questionError;\n+\n+      // Create initial exercise prompts for the question\n+      const { error: promptsError } = await supabase\n+        .from('exercise_prompts')\n+        .insert([\n+          {\n+            question_id: newQuestion.id,\n+            text: '',\n+            type: 'image',\n+            narration: '',\n+            saytext: '',\n+            media: [],\n+            order_index: 0\n+          },\n+          {\n+            question_id: newQuestion.id,\n+            text: '',\n+            type: 'gif',\n+            narration: '',\n+            saytext: '',\n+            media: [],\n+            order_index: 1\n+          }\n+        ]);\n+\n+      if (promptsError) throw promptsError;\n+\n+      // Create initial activity\n+      // const { error: activityError } = await supabase\n+      //   .from('activities')\n+      //   .insert({\n+      //     lesson_id: newLesson.id,\n+      //     type: 'practice',\n+      //     title: '',\n+      //     instructions: '',\n+      //     media: [],\n+      //     data: {\n+      //       prompt: '',\n+      //       teacherScript: '',\n+      //       media: []\n+      //     },\n+      //     order_index: 0\n+      //   });\n+\n+      // if (activityError) throw activityError;\n+\n+      // Update UI state\n+      setLessons(prev => [...prev, newLesson]);\n+      setCurrentLessonId(newLesson.id);\n+      setLessonTitle(newLesson.title);\n+      setModalState({ ...modalState, showAddLesson: false });\n+      setNewItemData({ name: '', description: '' });\n+      toast.success('Lesson created successfully');\n+\n+    } catch (error) {\n+      console.error('Error creating lesson:', error);\n+      toast.error('Failed to create lesson');\n+    }\n+  };\n+\n+  // Effect to handle localStorage after mount\n+  useEffect(() => {\n+    const storedMode = localStorage.getItem('lessonManagementViewMode');\n+    if (storedMode !== null) {\n+      setIsViewMode(storedMode === 'true');\n+    }\n+  }, []);\n+\n+  // Update the cleanupModalState function\n+  const cleanupModalState = useCallback(() => {\n+    document.body.style.pointerEvents = '';\n+    document.body.style.overflow = '';\n+    setModalState({\n+      showAddGrade: false,\n+      showAddTopic: false,\n+      showAddSubtopic: false,\n+      showAddLesson: false\n+    });\n+    setNewItemData({ name: '', description: '' });\n+  }, []);\n+\n+  // Add a function to handle modal state changes\n+  const handleModalStateChange = useCallback((modalType: keyof typeof modalState, open: boolean) => {\n+    if (!open) {\n+      cleanupModalState();\n+    } else {\n+      setModalState(prev => ({ ...prev, [modalType]: open }));\n+    }\n+  }, [cleanupModalState]);\n+\n+  const handleContentSave = async (content: string) => {\n+    const loadingToast = toast.loading(\"Saving content...\", {\n+      action: {\n+        label: \"Close\",\n+        onClick: () => toast.dismiss()\n+      }\n+    });\n+    \n+    try {\n+      const { data: { session } } = await supabase.auth.getSession();\n+      if (!session?.user) {\n+        toast.error('Please sign in to save content', { id: loadingToast });\n+        return;\n+      }\n+\n+      // Get the most recent content entry\n+      const { data: existingContent, error: checkError } = await supabase\n+        .from('lesson_content')\n+        .select('id')\n+        .eq('lesson_id', currentLessonId)\n+        .order('updated_at', { ascending: false })\n+        .limit(1)\n+        .maybeSingle();\n+\n+      // If content exists, update it; if not, insert new\n+      const { error } = await supabase\n+        .from('lesson_content')\n+        .upsert({\n+          id: existingContent?.id, // This ensures we update if id exists\n+          lesson_id: currentLessonId,\n+          content: [content],\n+          content_type: 'text',\n+          metadata: {\n+            heading: contentHeading\n+          },\n+          user_id: session.user.id,\n+          updated_at: new Date().toISOString()\n+        }, {\n+          onConflict: 'id'  // This ensures we update based on lesson_id\n+        });\n+\n+      if (error) throw error;\n+\n+      // Save questions separately\n+      for (const question of questions) {\n+        const { exercisePrompts, ...questionData } = question; // Remove exercisePrompts from question data\n+        \n+        // Save question\n+        const { error: questionError } = await supabase\n+          .from('questions')\n+          .upsert(questionData, {\n+            onConflict: 'id'\n+          })\n+          .select();\n+\n+        if (questionError) throw questionError;\n+\n+        // Save exercise prompts\n+        if (exercisePrompts?.length > 0) {\n+          for (const prompt of exercisePrompts) {\n+            const { error: promptError } = await supabase\n+              .from('exercise_prompts')\n+              .upsert(prompt, {\n+                onConflict: 'id'\n+              })\n+              .select();\n+\n+            if (promptError) throw promptError;\n+          }\n+        }\n+      }\n+      \n+      toast.success(\"Content saved successfully\", {\n+        action: {\n+          label: \"Close\",\n+          onClick: () => toast.dismiss()\n+        },\n+        id: loadingToast,\n+      });\n+      setIsContentEditorOpen(false);\n+    } catch (error) {\n+      console.error('Error saving content:', error);\n+      toast.error(\"Failed to save content\", {\n+        action: {\n+          label: \"Close\",\n+          onClick: () => toast.dismiss()\n+        },\n+        id: loadingToast,\n+      });\n+    }\n+  };\n+\n+  // Add this component for inline editing\n+  const InlineEdit = ({ \n+    value, \n+    onSave, \n+    isEditing, \n+    setIsEditing, \n+    placeholder,\n+    className = \"\"\n+  }: InlineEditProps) => {\n+    const [tempValue, setTempValue] = useState(value);\n+    \n+    return isEditing ? (\n+      <div className=\"flex items-center gap-2\">\n+        <Input\n+          value={tempValue}\n+          onChange={(e) => setTempValue(e.target.value)}\n+          placeholder={placeholder}\n+          className={className}\n+          autoFocus\n+        />\n+        <Button\n+          size=\"sm\"\n+          variant=\"ghost\"\n+          onClick={() => {\n+            onSave(tempValue);\n+            setIsEditing(false);\n+          }}\n+        >\n+          <Check className=\"h-4 w-4 text-green-500\" />\n+        </Button>\n+        <Button\n+          size=\"sm\"\n+          variant=\"ghost\"\n+          onClick={() => setIsEditing(false)}\n+        >\n+          <X className=\"h-4 w-4 text-red-500\" />\n+        </Button>\n+      </div>\n+    ) : (\n+      <div \n+        className=\"group flex items-center gap-2 cursor-pointer\"\n+        onClick={() => setIsEditing(true)}\n+      >\n+        <span className={className}>{value || placeholder}</span>\n+        <Pencil className=\"h-4 w-4 opacity-0 group-hover:opacity-100 transition-opacity\" />\n+      </div>\n+    );\n+  };\n+\n+  // Add this effect to handle auto-collapse after lesson selection\n+  useEffect(() => {\n+    if (currentLessonId && selectedGradeId && selectedTopicId && selectedSubtopicId) {\n+      setIsSidebarLocked(false);\n+      // Optional: add a slight delay before collapsing\n+      setTimeout(() => setIsSidebarCollapsed(true), 300);\n+    }\n+  }, [currentLessonId, selectedGradeId, selectedTopicId, selectedSubtopicId]);\n+\n+  // Add individual save handlers\n+  // const handleSaveQuestion = async (question: Question, index: number) => {\n+  //   try {\n+  //     // Update status to saving\n+  //     setQuestionSaveStatuses(prev => [\n+  //       ...prev.filter(s => s.id !== question.id),\n+  //       { id: question.id, status: 'saving' }\n+  //     ]);\n+\n+  //     const questionUpsert = {\n+  //       id: question.id,\n+  //       lesson_id: currentLessonId,\n+  //       type: question.type,\n+  //       title: question.data?.prompt || 'Untitled Question',\n+  //       metadata: question.metadata || {},\n+  //       data: {\n+  //         prompt: question.data?.prompt || '',\n+  //         teacherScript: question.data?.teacherScript || '',\n+  //         ...question.data\n+  //       },\n+  //       order_index: index,\n+  //       created_at: new Date().toISOString(),\n+  //       updated_at: new Date().toISOString()\n+  //     };\n+\n+  //     const { error: questionError } = await supabase\n+  //       .from('questions')\n+  //       .upsert(questionUpsert);\n+\n+  //     if (questionError) throw questionError;\n+\n+  //     // Update status to saved\n+  //     setQuestionSaveStatuses(prev => [\n+  //       ...prev.filter(s => s.id !== question.id),\n+  //       { id: question.id, status: 'saved', lastSaved: new Date().toISOString() }\n+  //     ]);\n+\n+  //     toast.success(`Question ${index + 1} saved successfully`);\n+  //   } catch (error) {\n+  //     console.error('Error saving question:', error);\n+  //     setQuestionSaveStatuses(prev => [\n+  //       ...prev.filter(s => s.id !== question.id),\n+  //       { id: question.id, status: 'error' }\n+  //     ]);\n+  //     toast.error(`Failed to save question ${index + 1}`);\n+  //   }\n+  // };\n+\n+  const handleSavePrompt = async (questionId: string, prompt: ExercisePrompt, promptIndex: number) => {\n+    try {\n+      setPromptSaveStatuses(prev => [\n+        ...prev.filter(s => s.id !== prompt.id),\n+        { id: prompt.id || '', status: 'saving' } as SaveStatus\n+      ]);\n+\n+      const promptUpsert = {\n+        id: prompt.id,\n+        question_id: questionId,\n+        text: prompt.text || '',\n+        type: prompt.type || 'text',\n+        narration: prompt.narration || '',\n+        saytext: prompt.saytext || '',\n+        media: prompt.media || [],\n+        order_index: promptIndex,\n+        created_at: prompt.created_at || new Date().toISOString(),\n+        updated_at: new Date().toISOString()\n+      };\n+\n+      const { error: promptError } = await supabase\n+        .from('exercise_prompts')\n+        .upsert(promptUpsert);\n+\n+      if (promptError) throw promptError;\n+\n+      setPromptSaveStatuses(prev => [\n+        ...prev.filter(s => s.id !== prompt.id),\n+        { id: prompt.id || '', status: 'saved', lastSaved: new Date().toISOString() } as SaveStatus\n+      ]);\n+\n+      toast.success(`Prompt ${promptIndex + 1} saved successfully`);\n+    } catch (error) {\n+      console.error('Error saving prompt:', error);\n+      setPromptSaveStatuses(prev => [\n+        ...prev.filter(s => s.id !== prompt.id),\n+        { id: prompt.id || '', status: 'error' } as SaveStatus\n+      ]);\n+      toast.error(`Failed to save prompt ${promptIndex + 1}`);\n+    }\n+  };\n+\n+  // Add effect to mark items as draft when edited\n+  useEffect(() => {\n+    questions.forEach(question => {\n+      if (!questionSaveStatuses.find(s => s.id === question.id)) {\n+        setQuestionSaveStatuses(prev => [\n+          ...prev,\n+          { id: question.id, status: 'draft' }\n+        ]);\n+      }\n+    });\n+  }, [questions]);\n+\n+  // Add this function with your other handlers\n+  const handleRefreshLesson = async () => {\n+    if (!currentLessonId) {\n+      toast.error('No lesson selected');\n+      return;\n+    }\n+    \n+    try {\n+      toast.loading('Refreshing lesson content...', {\n+        action: {\n+          label: \"Close\",\n+          onClick: () => toast.dismiss()\n+        },\n+      });\n+      await handleLessonSelect(currentLessonId);\n+      toast.success('Content refreshed', {\n+        action: {\n+          label: \"Close\",\n+          onClick: () => toast.dismiss()\n+        },\n+      });\n+    } catch (error) {\n+      console.error('Error refreshing lesson:', error);\n+      toast.error('Failed to refresh content', {\n+        action: {\n+          label: \"Close\",\n+          onClick: () => toast.dismiss()\n+        },\n+      });\n+    }\n+  };\n+\n+  // Add this function to handle refresh\n+  const handleRefreshContent = async () => {\n+    if (!currentLessonId) {\n+      toast.error('No lesson selected');\n+      return;\n+    }\n+    \n+    toast.loading('Refreshing content...');\n+    try {\n+      await loadLessonContent(currentLessonId);\n+      toast.success('Content refreshed');\n+    } catch (error) {\n+      console.error('Refresh error:', error);\n+      toast.error('Failed to refresh content');\n+    }\n+  };\n+\n+  // Update the sidebar hover mechanism\n+  const handleSidebarHover = useCallback(\n+    debounce((isHovering: boolean) => {\n+      if (!isSidebarLocked && !isNavigating && !isDropdownOpen) {\n+        if (isHovering || document.activeElement?.closest('.sidebar-content')) {\n+          setIsSidebarCollapsed(false);\n+        } else {\n+          setTimeout(() => {\n+            if (!isDropdownOpen) { // Only collapse if dropdown is closed\n+              setIsSidebarCollapsed(true);\n+            }\n+          }, 300);\n+        }\n+      }\n+    }, 100),\n+    [isSidebarLocked, isNavigating, isDropdownOpen]\n+  );\n+\n+  // Update the sidebar JSX\n+  <div \n+    className={cn(\n+      \"transition-all duration-300 ease-in-out relative\",\n+      isSidebarCollapsed ? \"w-20\" : \"w-80\",\n+      \"flex-shrink-0 group\"\n+    )}\n+    onMouseEnter={() => {\n+      handleSidebarHover(true);\n+      // Immediately expand on mouse enter\n+      if (!isSidebarLocked) {\n+        setIsSidebarCollapsed(false);\n+      }\n+    }}\n+    onMouseLeave={() => {\n+      // Only collapse if not interacting with content\n+      if (!document.activeElement?.closest('.sidebar-content')) {\n+        handleSidebarHover(false);\n+      }\n+    }}\n+    onFocus={() => setIsSidebarCollapsed(false)}\n+  >\n+    <Card className={cn(\n+      \"h-full relative sidebar-content\", // Added sidebar-content class\n+      \"transition-shadow duration-300\",\n+      \"hover:shadow-lg\"\n+    )}>\n+      {/* Rest of sidebar content */}\n+    </Card>\n+  </div>\n+\n+  // Update the sidebar and card styles\n+  return (\n+      <div className=\"container mx-auto py-8\">\n+        {/* Header */}\n+        <div className=\"flex items-center justify-between mb-2\">\n+          {/* ... header content ... */}\n+          <div className=\"flex items-center gap-4\">\n+            <Link href=\"/super-admin\">\n+              <Button variant=\"outline\" className=\"gap-2\">\n+                <ArrowLeft className=\"h-4 w-4\" />\n+                Back\n+              </Button>\n+            </Link>\n+            <div className=\"flex items-center gap-2\">\n+              <h1 className=\"text-2xl font-bold\">Lesson Management</h1>\n+              <Button\n+                variant=\"ghost\"\n+                size=\"icon\"\n+                onClick={handleRefreshLesson}\n+                className=\"ml-2\"\n+                title=\"Refresh lesson content\"\n+              >\n+                <RefreshCw className=\"h-4 w-4\" />\n+              </Button>\n+            </div>\n+            <p className=\"text-sm text-muted-foreground\">Create and manage your educational content</p>\n+          </div>\n+          <div className=\"flex items-center gap-2\">\n+            <Button\n+              variant=\"outline\"\n+              size=\"sm\"\n+              onClick={() => setShowHelpTips(!showHelpTips)}\n+              className=\"gap-2\"\n+            >\n+              {showHelpTips ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n+              {showHelpTips ? 'Hide Tips' : 'Show Tips'}\n+            </Button>\n+          </div>\n+        </div>\n+        \n+        {/* Main content wrapper - Fix the layout here */}\n+        <div className=\"flex gap-6 h-[calc(100vh-200px)]\">\n+          {/* Improved sidebar */}\n+          <div \n+            className={cn(\n+              \"transition-all duration-300 ease-in-out relative\",\n+              isSidebarCollapsed ? \"w-20\" : \"w-80\",\n+              \"flex-shrink-0 group\"\n+            )}\n+            onMouseEnter={() => {\n+              handleSidebarHover(true);\n+              // Immediately expand on mouse enter\n+              if (!isSidebarLocked) {\n+                setIsSidebarCollapsed(false);\n+              }\n+            }}\n+            onMouseLeave={() => {\n+              // Only collapse if not interacting with content\n+              if (!document.activeElement?.closest('.sidebar-content')) {\n+                handleSidebarHover(false);\n+              }\n+            }}\n+            onFocus={() => setIsSidebarCollapsed(false)}\n+          >\n+            <Card className={cn(\n+              \"h-full relative sidebar-content\", // Added sidebar-content class\n+              \"transition-shadow duration-300\",\n+              \"hover:shadow-lg\"\n+            )}>\n+              {/* Lock button - only show after lesson selection */}\n+              {currentLessonId && (\n+                <Button\n+                  variant=\"ghost\"\n+                  size=\"sm\"\n+                  className=\"absolute top-2 right-2 z-10\"\n+                  onClick={() => {\n+                    setIsSidebarLocked(!isSidebarLocked);\n+                    if (!isSidebarLocked) {\n+                      setIsSidebarCollapsed(false);\n+                    }\n+                  }}\n+                >\n+                  {isSidebarLocked ? <Lock className=\"h-4 w-4\" /> : <Unlock className=\"h-4 w-4\" />}\n+                </Button>\n+              )}\n+\n+              {/* Sidebar content with overflow handling */}\n+              <div className={cn(\n+                \"transition-all duration-300 overflow-hidden\",\n+                isSidebarCollapsed ? \"opacity-0\" : \"opacity-100\"\n+              )}>\n+                <Card className=\"h-full\">\n+                  <CardHeader className=\"pb-3\">\n+                    <div className=\"flex items-center justify-between\">\n+                      <CardTitle className=\"text-lg font-semibold\">Content Management</CardTitle>\n+                      <TooltipProvider>\n+                        <Tooltip>\n+                          <TooltipTrigger>\n+                            <HelpCircle className=\"h-4 w-4 text-muted-foreground\" />\n+                          </TooltipTrigger>\n+                          <TooltipContent>\n+                            <p>Manage your educational content here</p>\n+                          </TooltipContent>\n+                        </Tooltip>\n+                      </TooltipProvider>\n+                      </div>\n+                    <CardDescription>Create and manage your lessons</CardDescription>\n+                  </CardHeader>\n+                  <CardContent className=\"space-y-4\">\n+                    {/* View/Edit Mode Toggle */}\n+                    <div className=\"grid grid-cols-2 gap-2 p-1 bg-muted rounded-lg\">\n+                      <Button\n+                        variant={isViewMode ? \"default\" : \"ghost\"}\n+                        size=\"sm\"\n+                        onClick={() => setIsViewMode(true)}\n+                        className=\"w-full\"\n+                      >\n+                        <Eye className=\"h-4 w-4 mr-2\" />\n+                        View\n+                      </Button>\n+                      <Button\n+                        variant={!isViewMode ? \"default\" : \"ghost\"}\n+                        size=\"sm\"\n+                        onClick={() => setIsViewMode(false)}\n+                        className=\"w-full\"\n+                      >\n+                        <Edit className=\"h-4 w-4 mr-2\" />\n+                        Edit\n+                      </Button>\n+                    </div>\n+\n+                    {/* Grade Selection */}\n+                    <div className=\"space-y-2\">\n+                      <div className=\"flex items-center justify-between\">\n+                        <Label htmlFor=\"grade-select\">Grade</Label>\n+                        {isViewMode && (\n+                          <Button variant=\"ghost\" size=\"sm\" onClick={() => setExpandedGrade(expandedGrade ? null : selectedGrade)}>\n+                            {expandedGrade ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n+                          </Button>\n+                        )}\n+                      </div>\n+                      <Select \n+                        value={selectedGradeId || ''}\n+                        onValueChange={handleGradeSelect}\n+                        onOpenChange={(open) => {\n+                          if (open) {\n+                            // Force sidebar to stay open and lock it\n+                            setIsSidebarCollapsed(false);\n+                            setIsSidebarLocked(true);\n+                          }\n+                        }}\n+                      >\n+                        <SelectTrigger \n+                          id=\"grade-select\" \n+                          className=\"w-full\"\n+                          onClick={(e) => {\n+                            e.stopPropagation(); // Prevent event bubbling\n+                            setIsSidebarCollapsed(false);\n+                            setIsSidebarLocked(true);\n+                          }}\n+                        >\n+                          <SelectValue placeholder=\"Select Grade\" />\n+                        </SelectTrigger>\n+                        <SelectContent \n+                          onCloseAutoFocus={(e) => {\n+                            e.preventDefault();\n+                            setIsSidebarLocked(true);\n+                            setIsSidebarCollapsed(false);\n+                          }}\n+                        >\n+                          {grades.map((grade: Grade) => (\n+                            <SelectItem \n+                              key={`grade-${grade.id || 'new'}`} \n+                              value={grade.id || ''}\n+                              onMouseDown={(e) => {\n+                                e.preventDefault();\n+                                e.stopPropagation();\n+                              }}\n+                            >\n+                              <div className=\"flex items-center gap-2\">\n+                                <BookOpen className=\"h-4 w-4 text-primary\" />\n+                                {grade.name}\n+                              </div>\n+                            </SelectItem>\n+                          ))}\n+                        </SelectContent>\n+                      </Select>\n+                      {!isViewMode && (\n+                      <Button \n+                        variant=\"outline\" \n+                        size=\"sm\" \n+                        className=\"w-full gap-2\"\n+                        onClick={() => setModalState({ ...modalState, showAddGrade: false })}\n+                      >\n+                        <Plus className=\"h-4 w-4\" />\n+                        Add New Grade\n+                      </Button>\n+                      )}\n+                    </div>\n+\n+                    {/* Content Tree View in View Mode */}\n+                    {isViewMode && selectedGrade && (\n+  <div className=\"flex h-full\">\n+    {/* Left Plane - Only Grade Selection */}\n+    <div className=\"w-64 border-r p-4\">\n+      <Select\n+        value={selectedGrade}\n+        onValueChange={setSelectedGrade}\n+      >\n+        <SelectTrigger>\n+          <SelectValue placeholder=\"Select Grade\" />\n+        </SelectTrigger>\n+        <SelectContent>\n+          {grades.map((grade) => (\n+            <SelectItem key={grade.id} value={grade.id}>\n+              {grade.name}\n+            </SelectItem>\n+          ))}\n+        </SelectContent>\n+      </Select>\n+    </div>\n+\n+    {/* Right Plane - Nested Content View */}\n+    <div className=\"flex-1 p-6 overflow-auto\">\n+      <div className=\"space-y-6\">\n+        {topics.map((topic) => (\n+          <Card \n+            key={topic.id} \n+            className=\"border-l-4 border-l-primary/40 hover:border-l-primary transition-all duration-200\"\n+          >\n+            <CardHeader className=\"py-4\">\n+              <div className=\"flex items-center justify-between\">\n+                <div className=\"flex items-center gap-2\">\n+                  <Layers className=\"h-5 w-5 text-primary\" />\n+                  <div>\n+                    <h3 className=\"font-medium text-lg\">{topic.title}</h3>\n+                    <p className=\"text-sm text-muted-foreground\">\n+                      {subtopics.filter(s => s.topic_id === topic.id).length} Subtopics\n+                    </p>\n+                  </div>\n+                </div>\n+                <Button\n+                  variant=\"ghost\"\n+                  size=\"sm\"\n+                  onClick={async () => {\n+                    const { canDelete, message } = await checkDeletability('topic', topic.id);\n+                    if (!canDelete) {\n+                      toast.error(message);\n+                      return;\n+                    }\n+                    setItemToDelete({\n+                      id: topic.id,\n+                      type: 'topic',\n+                      title: topic.title\n+                    });\n+                    setDeleteDialogOpen(true);\n+                  }}\n+                >\n+                  <Trash className=\"h-4 w-4\" />\n+                </Button>\n+              </div>\n+\n+              <div className=\"mt-4 pl-6 space-y-4\">\n+                {subtopics\n+                  .filter(subtopic => subtopic.topic_id === topic.id)\n+                  .map((subtopic) => (\n+                    <Card key={subtopic.id} className=\"border-l-2 border-l-primary/20\">\n+                      <CardHeader className=\"py-3\">\n+                        <div className=\"flex items-center justify-between\">\n+                          <div className=\"flex items-center gap-2\">\n+                            <BookOpen className=\"h-4 w-4 text-primary\" />\n+                            <div>\n+                              <h4 className=\"font-medium\">{subtopic.title}</h4>\n+                              <p className=\"text-sm text-muted-foreground\">\n+                                {lessons.filter(l => l.subtopic_id === subtopic.id).length} Lessons\n+                              </p>\n+                            </div>\n+                          </div>\n+                          <Button\n+                            variant=\"ghost\"\n+                            size=\"sm\"\n+                            onClick={async () => {\n+                              const { canDelete, message } = await checkDeletability('subtopic', subtopic.id);\n+                              if (!canDelete) {\n+                                toast.error(message);\n+                                return;\n+                              }\n+                              setItemToDelete({\n+                                id: subtopic.id,\n+                                type: 'subtopic',\n+                                title: subtopic.title\n+                              });\n+                              setDeleteDialogOpen(true);\n+                            }}\n+                          >\n+                            <Trash className=\"h-4 w-4\" />\n+                          </Button>\n+                        </div>\n+\n+                        <div className=\"mt-2 pl-6 space-y-2\">\n+                          {lessons\n+                            .filter(lesson => lesson.subtopic_id === subtopic.id)\n+                            .map((lesson) => (\n+                              <Card key={lesson.id} className=\"border-l border-l-primary/10\">\n+                                <CardHeader className=\"py-2\">\n+                                  <div className=\"flex items-center justify-between\">\n+                                    <div className=\"flex items-center gap-2\">\n+                                      <div>\n+                                        <h5 className=\"text-sm font-medium\">{lesson.title}</h5>\n+                                        <div className=\"flex items-center gap-2 mt-1\">\n+                                          <Badge variant=\"secondary\" className=\"text-xs\">\n+                                            {lesson.duration || 0} mins\n+                                          </Badge>\n+                                          <Badge variant=\"secondary\" className=\"text-xs\">\n+                                            {lesson.questions?.length || 0} Questions\n+                                          </Badge>\n+                                          {(!lesson.questions || lesson.questions.length === 0) && (\n+                                            <Badge variant=\"outline\" className=\"text-yellow-500 text-xs\">\n+                                              Empty\n+                                            </Badge>\n+                                          )}\n+                                        </div>\n+                                      </div>\n+                                    </div>\n+                                    <Button\n+                                      variant=\"ghost\"\n+                                      size=\"sm\"\n+                                      onClick={async () => {\n+                                        const { canDelete, message } = await checkDeletability('lesson', lesson.id);\n+                                        if (!canDelete) {\n+                                          toast.error(message);\n+                                          return;\n+                                        }\n+                                        setItemToDelete({\n+                                          id: lesson.id,\n+                                          type: 'lesson',\n+                                          title: lesson.title\n+                                        });\n+                                        setDeleteDialogOpen(true);\n+                                      }}\n+                                    >\n+                                      <Trash className=\"h-4 w-4\" />\n+                                    </Button>\n+                                  </div>\n+                                </CardHeader>\n+                              </Card>\n+                            ))}\n+                        </div>\n+                      </CardHeader>\n+                    </Card>\n+                  ))}\n+              </div>\n+            </CardHeader>\n+          </Card>\n+        ))}\n+      </div>\n+    </div>\n+  </div>\n+)}\n+\n+                    {/* Regular Edit Mode Content */}\n+                    {!isViewMode && (\n+                      <>\n+                        {/* Existing Topic, Subtopic, and Lesson Selection UI */}\n+                      {/* Topic Selection */}\n+                        {selectedGradeId && (\n+                      <div className=\"space-y-2\">\n+                        <div className=\"flex items-center justify-between\">\n+                        <Label htmlFor=\"topic-select\">Topic</Label>\n+                        </div>\n+                        <Select \n+                              value={selectedTopicId || ''} \n+                              onValueChange={handleTopicSelect}\n+                        >\n+                          <SelectTrigger id=\"topic-select\" className=\"w-full\">\n+                            <SelectValue placeholder=\"Select Topic\" />\n+                          </SelectTrigger>\n+                          <SelectContent>\n+                                {topics.map((topic: Topic) => (\n+                                  <SelectItem \n+                                    key={`topic-${topic.id || 'new'}`} \n+                                    value={topic.id || ''}\n+                                  >\n+                                  <div className=\"flex items-center gap-2\">\n+                                  <Layers className=\"h-4 w-4 text-primary\" />\n+                                    {topic.title}\n+                                  </div>\n+                                </SelectItem>\n+                              ))}\n+                          </SelectContent>\n+                        </Select>\n+                        <Button \n+                          variant=\"outline\" \n+                          size=\"sm\" \n+                          className=\"w-full gap-2\"\n+                          onClick={() => setModalState({ ...modalState, showAddTopic: true })}\n+                        >\n+                          <Plus className=\"h-4 w-4\" />\n+                          Add New Topic\n+                        </Button>\n+                      </div>\n+                    )}\n+\n+                    {/* Subtopic Selection */}\n+                        {selectedTopicId && (\n+                      <div className=\"space-y-2\">\n+                        <div className=\"flex items-center justify-between\">\n+                        <Label htmlFor=\"subtopic-select\">Subtopic</Label>\n+                        </div>\n+                        <Select \n+                              value={selectedSubtopicId || ''} \n+                              onValueChange={handleSubtopicSelect}\n+                        >\n+                          <SelectTrigger id=\"subtopic-select\" className=\"w-full\">\n+                            <SelectValue placeholder=\"Select Subtopic\" />\n+                          </SelectTrigger>\n+                          <SelectContent>\n+                                {subtopics\n+                                  .filter(subtopic => subtopic.id)\n+                                  .map((subtopic, index) => (\n+                                    <SelectItem \n+                                      key={subtopic.id || `subtopic-${index}`}\n+                                      value={subtopic.id || ''}\n+                                    >\n+                                      {subtopic.title || 'Untitled Subtopic'}\n+                                    </SelectItem>\n+                                  ))}\n+                          </SelectContent>\n+                        </Select>\n+                        {!isViewMode && (\n+                          <Button \n+                            variant=\"outline\" \n+                            size=\"sm\" \n+                            className=\"w-full gap-2\"\n+                            onClick={() => setModalState({ ...modalState, showAddSubtopic: true })}\n+                          >\n+                            <Plus className=\"h-4 w-4\" />\n+                            Add New Subtopic\n+                          </Button>\n+                        )}\n+                      </div>\n+                    )}\n+\n+                    {/* Lesson Selection */}\n+                        {selectedSubtopicId && (\n+                      <div className=\"space-y-2\">\n+                        <div className=\"flex items-center justify-between\">\n+                          <Label htmlFor=\"lesson-select\">Lesson</Label>\n+                        </div>\n+                          <Select \n+                            value={currentLessonId || ''} \n+                            onValueChange={handleLessonSelect}\n+                            onOpenChange={(open) => {\n+                              setIsDropdownOpen(open);\n+                              if (open) {\n+                                setIsSidebarCollapsed(false);\n+                                setIsSidebarLocked(true);\n+                              } else {\n+                                // Small delay before unlocking to prevent immediate collapse\n+                                setTimeout(() => {\n+                                  setIsSidebarLocked(false);\n+                                }, 100);\n+                              }\n+                            }}\n+                          >\n+                            <SelectTrigger \n+                              id=\"lesson-select\" \n+                              className=\"w-full\"\n+                              onClick={(e) => {\n+                                e.stopPropagation();\n+                                setIsSidebarCollapsed(false);\n+                                setIsSidebarLocked(true);\n+                              }}\n+                            >\n+                              <SelectValue placeholder=\"Select Lesson\" />\n+                            </SelectTrigger>\n+                            <SelectContent>\n+                              {lessons\n+                                .filter((lesson): lesson is Lesson => lesson !== undefined && lesson !== null)\n+                                .map((lesson: Lesson) => (\n+                                  <SelectItem \n+                                    key={`lesson-${lesson.id || 'new'}`} \n+                                    value={lesson.id || ''}\n+                                  >\n+                                    <div className=\"flex items-center gap-2\">\n+                                      <BookOpen className=\"h-4 w-4 text-primary\" />\n+                                      {lesson.title || 'Untitled Lesson'}\n+                                    </div>\n+                                  </SelectItem>\n+                                ))}\n+                            </SelectContent>\n+                          </Select>\n+                    <Button \n+                            variant=\"outline\" \n+                            size=\"sm\" \n+                            className=\"w-full gap-2\"\n+                        onClick={() => setModalState({ ...modalState, showAddLesson: true })}\n+                          >\n+                            <Plus className=\"h-4 w-4\" />\n+                            Add New Lesson\n+                    </Button>\n+                      </div>\n+                        )}\n+                      </>\n+                    )}\n+                  </CardContent>\n+                </Card>\n+              </div>\n+\n+              {/* Collapsed view */}\n+              {isSidebarCollapsed && (\n+                <div className=\"absolute inset-0 flex flex-col items-center pt-12 gap-4\">\n+                  <BookOpen className=\"h-6 w-6 text-muted-foreground\" />\n+                  <div className=\"w-px h-full bg-border\" />\n+                </div>\n+              )}\n+            </Card>\n+          </div>\n+        \n+\n+          {/* Right Content Area */}\n+          <div className=\"flex-1 overflow-y-auto\">\n+            {isNavigating ? (\n+              <div className=\"flex items-center justify-center h-[400px]\">\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n+                <span className=\"ml-3\">Loading...</span>\n+              </div>\n+            ) : (\n+              <>\n+                {!selectedGradeId ? (\n+                  // Question Types Display Section\n+                  <div className=\"space-y-6\">\n+                    <Card>\n+                      <CardHeader>\n+                        <div className=\"flex items-center justify-between\">\n+                          <div>\n+                            <CardTitle className=\"text-xl font-semibold\">Available Question Types</CardTitle>\n+                            <CardDescription>Browse through different question formats and examples</CardDescription>\n+                          </div>\n+                          <TooltipProvider>\n+                            <Tooltip>\n+                              <TooltipTrigger>\n+                                <HelpCircle className=\"h-5 w-5 text-muted-foreground\" />\n+                              </TooltipTrigger>\n+                              <TooltipContent>\n+                                <p>Click on each type to see detailed examples</p>\n+                              </TooltipContent>\n+                            </Tooltip>\n+                          </TooltipProvider>\n+                        </div>\n+                      </CardHeader>\n+                      <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n+                        {Object.entries(QUESTION_TYPES).map(([type, details]) => (\n+                          <Card key={type} className=\"cursor-pointer hover:bg-accent/50 transition-colors\">\n+                            <CardHeader className=\"p-4\">\n+                              <div className=\"flex items-center justify-between mb-2\">\n+                                <Badge variant=\"outline\" className=\"bg-primary/5 text-lg\">\n+                                  {details.label}\n+                                </Badge>\n+                              </div>\n+                              <CardDescription className=\"text-sm\">\n+                                {details.description || 'No description available'}\n+                              </CardDescription>\n+                              <div className=\"mt-4\">\n+                                <div className=\"text-sm font-medium mb-2\">Example:</div>\n+                                <div className=\"p-3 rounded-md bg-muted/50 text-sm\">\n+                                  {type === 'multiple-choice' && (\n+                                    <>\n+                                      <div className=\"font-medium mb-2\">Q: What is the capital of France?</div>\n+                                      <div className=\"space-y-1 pl-4\">\n+                                        <div>A) Paris</div>\n+                                        <div>B) London</div>\n+                                        <div>C) Berlin</div>\n+                                        <div>D) Madrid</div>\n+                                      </div>\n+                                    </>\n+                                  )}\n+                                  {type === 'fill-in-blank' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div>Complete the sentence:</div>\n+                                      <div>The sun rises in the <span className=\"bg-primary/20 px-2 rounded\">_____</span> and sets in the <span className=\"bg-primary/20 px-2 rounded\">_____</span>.</div>\n+                                    </div>\n+                                  )}\n+                                  {type === 'true-false' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div className=\"font-medium\">Statement:</div>\n+                                      <div>The Earth is flat.</div>\n+                                      <div className=\"mt-2\">\n+                                        <Badge variant=\"outline\" className=\"mr-2\">True</Badge>\n+                                        <Badge variant=\"outline\">False</Badge>\n+                                      </div>\n+                                    </div>\n+                                  )}\n+                                  {type === 'matching' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div className=\"font-medium mb-2\">Match the countries with their capitals:</div>\n+                                      <div className=\"grid grid-cols-2 gap-4\">\n+                                        <div>\n+                                          1. France<br />\n+                                          2. Germany<br />\n+                                          3. Spain\n+                                        </div>\n+                                        <div>\n+                                          • Berlin<br />\n+                                          • Paris<br />\n+                                          • Madrid\n+                                        </div>\n+                                      </div>\n+                                    </div>\n+                                  )}\n+                                  {type === 'ordering' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div className=\"font-medium mb-2\">Arrange in chronological order:</div>\n+                                      <div className=\"space-y-1\">\n+                                        <Badge variant=\"outline\" className=\"mr-2\">1</Badge>World War II<br />\n+                                        <Badge variant=\"outline\" className=\"mr-2\">2</Badge>Industrial Revolution<br />\n+                                        <Badge variant=\"outline\" className=\"mr-2\">3</Badge>Renaissance\n+                                      </div>\n+                                    </div>\n+                                  )}\n+                                  {type === 'short-answer' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div className=\"font-medium\">Question:</div>\n+                                      <div>Explain the water cycle in 2-3 sentences.</div>\n+                                      <div className=\"mt-2 p-2 border border-dashed rounded-md border-primary/30\">\n+                                        Answer space\n+                                      </div>\n+                                    </div>\n+                                  )}\n+                                </div>\n+                              </div>\n+                            </CardHeader>\n+                          </Card>\n+                        ))}\n+                      </CardContent>\n+                    </Card>\n+                  </div>\n+                ) : isViewMode ? (\n+                  <div className=\"space-y-6\">\n+                    {selectedGradeId ? (\n+                      <div className=\"grid grid-cols-1 gap-6\">\n+                        {topics.map((topic) => (\n+                          <Card key={topic.id} className=\"border-l-4 border-l-primary\">\n+                            <CardHeader>\n+                              <div className=\"flex items-center justify-between\">\n+                                <h3 className=\"text-lg font-semibold\">{topic.title}</h3>\n+                              </div>\n+                            </CardHeader>\n+                            <CardContent>\n+                              <div className=\"space-y-4\">\n+                                {subtopics\n+                                  .filter(subtopic => subtopic.topic_id === topic.id)\n+                                  .map((subtopic, index) => (\n+                                    <div key={subtopic.id || `subtopic-${index}`} className=\"border-l-2 pl-4\">\n+                                      <h4 className=\"text-md font-medium mb-2\">{subtopic.name || 'Untitled Subtopic'}</h4>\n+                                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n+                                        {lessons\n+                                          .filter(lesson => lesson.subtopic_id === subtopic.id)\n+                                          .map((lesson) => (\n+                                            <Card \n+                                              key={lesson.id} \n+                                              className={cn(\n+                                                \"cursor-pointer transition-all duration-200\",\n+                                                \"hover:shadow-md hover:translate-y-[-2px]\",\n+                                                \"hover:bg-accent/50 hover:border-primary/50\",\n+                                                \"active:translate-y-[0px]\",\n+                                                currentLessonId === lesson.id && \"border-primary bg-accent/50 shadow-md\",\n+                                                \"group\" // Enable group hover effects\n+                                              )}\n+                                              onClick={() => handleLessonSelect(lesson.id)}\n+                                            >\n+                                              <CardHeader className=\"p-4\">\n+                                                <div className=\"flex flex-col gap-2\">\n+                                                  <div className=\"flex items-center justify-between\">\n+                                                    <div className=\"flex items-center gap-2\">\n+                                                      <BookOpen className={cn(\n+                                                        \"h-4 w-4 text-primary\",\n+                                                        \"transition-transform duration-200\",\n+                                                        \"group-hover:scale-110\"\n+                                                      )} />\n+                                                      <span className=\"font-medium\">{lesson.title}</span>\n+                                                    </div>\n+                                                    <Button\n+                                                      variant=\"outline\"\n+                                                      size=\"sm\"\n+                                                      className={cn(\n+                                                        \"opacity-0 group-hover:opacity-100\",\n+                                                        \"transition-all duration-200\",\n+                                                        \"hover:bg-primary hover:text-primary-foreground\"\n+                                                      )}\n+                                                      disabled={!lesson.content || currentLessonId !== lesson.id}\n+                                                      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n+                                                        e.stopPropagation();\n+                                                        window.location.href = `/teacher/lessons/${lesson.id}`;\n+                                                      }}\n+                                                    >\n+                                                      Start Lesson\n+                                                    </Button>\n+                                                  </div>\n+                                                  <div className=\"flex items-center gap-2\">\n+                                                    <Badge variant=\"outline\" className={cn(\n+                                                      \"bg-primary/5\",\n+                                                      \"transition-colors duration-200\",\n+                                                      \"group-hover:bg-primary/10\"\n+                                                    )}>\n+                                                      {lesson.questions?.length || 0} Questions\n+                                                    </Badge>\n+                                                    <Badge variant=\"outline\" className={cn(\n+                                                      \"bg-primary/5\",\n+                                                      \"transition-colors duration-200\",\n+                                                      \"group-hover:bg-primary/10\"\n+                                                    )}>\n+                                                      {lesson.activities?.length || 0} Activities\n+                                                    </Badge>\n+                                                  </div>\n+                                                </div>\n+                                              </CardHeader>\n+                                            </Card>\n+                                          ))}\n+                                      </div>\n+                                    </div>\n+                                  ))}\n+                              </div>\n+                            </CardContent>\n+                          </Card>\n+                        ))}\n+                      </div>\n+                    ) : (\n+                      <div className=\"text-center py-20\">\n+                        <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n+                        <h3 className=\"text-lg font-medium\">Select a Grade</h3>\n+                        <p className=\"text-sm text-muted-foreground\">\n+                          Choose a grade from the left panel to start managing content\n+                        </p>\n+                      </div>\n+                    )}\n+                  </div>\n+                ) : (\n+                  // Edit Mode Content\n+                  <div className=\"space-y-4\">\n+                    {/* Lesson Title */}\n+                    <Card>\n+                      <CardHeader>\n+                        <div className=\"flex items-center justify-between mb-4\">\n+                          <h2 className=\"text-2xl font-bold\">Lesson Content</h2>\n+                                                    <Button\n+                                                      variant=\"outline\"\n+                                                      size=\"sm\"\n+                            onClick={() => setIsContentEditorOpen(true)}\n+                          >\n+                            <Pencil className=\"h-4 w-4 mr-2\" />\n+                            Edit Content\n+                          </Button>\n+                        </div>\n+                      </CardHeader>\n+                      <CardContent className=\"space-y-4\">\n+                        {/* Lesson Title */}\n+                        <div className=\"flex items-center justify-between\">\n+                          <div className=\"space-y-1\">\n+                            <Label>Lesson Title</Label>\n+                            <InlineEdit\n+                              value={lessonTitle}\n+                              onSave={async (newTitle) => {\n+                                setLessonTitle(newTitle);\n+                                await handleSaveLesson();\n+                              }}\n+                              isEditing={isEditingTitle}\n+                              setIsEditing={setIsEditingTitle}\n+                              placeholder=\"Enter lesson title\"\n+                              className=\"text-lg font-medium\"\n+                            />\n+                          </div>\n+                        </div>\n+\n+                        {/* Content Editor and Display */}\n+                        <div className=\"space-y-4\">\n+                          {isContentEditorOpen ? (\n+                            <div className=\"border rounded-lg p-4\">\n+                              <div className=\"mb-4\">\n+                                <Label>Content Heading</Label>\n+                                <InlineEdit\n+                                  value={contentHeading}\n+                                  onSave={(newHeading) => setContentHeading(newHeading)}\n+                                  isEditing={isEditingHeading}\n+                                  setIsEditing={setIsEditingHeading}\n+                                  placeholder=\"Add content heading\"\n+                                  className=\"text-base text-muted-foreground\"\n+                                />\n+                              </div>\n+                              <RichTextEditor\n+                                value={lessonContent}\n+                                onChange={setLessonContent}\n+                                onSave={async (content) => {\n+                                  await handleContentSave(content);\n+                                  setIsContentEditorOpen(false);\n+                                }}\n+                                placeholder=\"Add lesson content here...\"\n+                              />\n+                            </div>\n+                          ) : lessonContent ? (\n+                            <div className=\"prose prose-sm max-w-none\">\n+                              {contentHeading && (\n+                                <h3 className=\"text-lg font-semibold mb-2\">{contentHeading}</h3>\n+                              )}\n+                              <div dangerouslySetInnerHTML={{ __html: lessonContent }} />\n+                            </div>\n+                          ) : (\n+                            <div className=\"text-center py-8 text-muted-foreground\">\n+                              Click 'Edit Content' to add lesson content\n+                            </div>\n+                          )}\n+                        </div>\n+                      </CardContent>\n+                    </Card>\n+\n+                    {/* Tabs */}\n+                    <Tabs defaultValue=\"questions\" className=\"mt-6\">\n+                    <TabsList className=\"grid w-full grid-cols-2\">\n+                        <TabsTrigger value=\"questions\">\n+                          <MessageSquare className=\"h-4 w-4 mr-2\" />\n+                        Questions\n+                      </TabsTrigger>\n+                        <TabsTrigger value=\"activities\">\n+                          <ActivityIcon className=\"h-4 w-4 mr-2\" />\n+                        Activities\n+                      </TabsTrigger>\n+                    </TabsList>\n+\n+                      {/* Questions Tab */}\n+                      <TabsContent value=\"questions\" className=\"space-y-4\">\n+                      <CardHeader>\n+                          <CardDescription>Add and manage questions for this lesson</CardDescription>\n+                      </CardHeader>\n+                        {questions.map((question, index) => (\n+                          <Card key={index} className={cn(\n+                            \"relative border-l-4 transition-colors duration-200\",\n+                            expandedQuestion === index ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\n+                          )}>\n+                            <CardHeader className=\"pb-3\">\n+                              <div className=\"flex items-center justify-between gap-4\">\n+                                <div className=\"flex items-center gap-3 min-w-0 flex-1\">\n+                                  <div className=\"flex items-center gap-2 flex-shrink-0\">\n+                                    <span className=\"px-2 py-1 bg-primary/10 rounded-md text-sm font-semibold text-primary whitespace-nowrap\">\n+                                      Q {index + 1}\n+                                    </span>\n+                                    <Badge variant=\"outline\" className=\"whitespace-nowrap\">\n+                                      {QUESTION_TYPES[question.type as keyof typeof QUESTION_TYPES]?.label || question.type}\n+                                    </Badge>\n+                                    {question.isDraft && (\n+                                      <Badge variant=\"secondary\" className=\"whitespace-nowrap\">Draft</Badge>\n+                                )}\n+                                  </div>\n+                                      {expandedQuestion !== index && (\n+                                        <div className=\"text-sm text-muted-foreground truncate\">\n+                                          {question.title || 'No question text'} - {question.data?.content || 'No question texts'}\n+                                        </div>\n+                                      )}\n+                                    </div>\n+                                    <div className=\"flex items-center gap-2 flex-shrink-0\">\n+                                      <Button\n+                                        variant=\"ghost\"\n+                                        size=\"sm\"\n+                                        onClick={() => handleQuestionExpand(index)}\n+                                      >\n+                                        {expandedQuestion === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n+                                      </Button>\n+                                      <Button\n+                                        variant=\"ghost\"\n+                                        size=\"sm\"\n+                                        onClick={() => handleRemoveQuestion(index)}\n+                                      >\n+                                        <Trash2 className=\"h-4 w-4 text-destructive\" />\n+                                      </Button>\n+                                    </div>\n+                                  </div>\n+                                </CardHeader>\n+                                {expandedQuestion === index && (\n+                                  <CardContent>\n+                                    <QuestionForm\n+                                      key={index}\n+                                      question={{ \n+                                        ...question, \n+                                        lesson_id: currentLessonId || '',\n+                                        type: isValidQuestionType(question.type) ? question.type : 'speaking',\n+                                        data: {\n+                                          prompt: question.data?.prompt ?? '',\n+                                          teacher_script: question.data?.teacher_script ?? '',\n+                                          followup_prompt: question.data?.followup_prompt ?? [],\n+                                          sample_answer: question.data?.sample_answer ?? '',\n+                                          \n+                                        } \n+                                      }}\n+                                      index={index}\n+                                      onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\n+                                        await handleUpdateQuestion(index, {\n+                                          ...updatedQuestion,\n+                                          data: {\n+                                            prompt: updatedQuestion.data?.prompt ?? '',\n+                                            teacher_script: updatedQuestion.data?.teacher_script ?? '',\n+                                            followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\n+                                            sample_answer: updatedQuestion.data?.sample_answer ?? '',\n+                                            metadata: updatedQuestion.metadata ?? {},\n+                                            },\n+                                            correct_answer: updatedQuestion.correct_answer ?? '',\n+                                            content: updatedQuestion.content ?? ''  // Add default value\n+                                        });\n+                                      }}\n+                                      onRemove={handleRemoveQuestion}\n+                                      onAddExercisePrompt={handleAddExercisePrompt}\n+                                      onRemoveExercisePrompt={handleRemoveExercisePrompt}\n+                                      onExercisePromptChange={handleExercisePromptChange}\n+                                    /><Button \n+                                    size=\"sm\"\n+                                    variant=\"outline\"\n+                                    onClick={() => handleSaveQuestion(question, index)}\n+                                    className=\"ml-2\"\n+                                  >\n+                                    {questionSaveStatuses.find(s => s.id === question.id)?.status === 'saving' ? (\n+                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n+                                    ) : (\n+                                      <Save className=\"h-4 w-4 mr-2\" />\n+                                    )}\n+                                    Save Question\n+                                                    </Button>\n+                                    {/* Exercise Prompts with Save Buttons */}\n+                                    {question.exercisePrompts?.map((prompt, promptIndex) => (\n+                                      <div key={`${question.id}-prompt-${promptIndex}`} className=\"mt-4\"> {/* Updated key */}\n+                                        <div className=\"flex items-center justify-between mb-2\">\n+                                          <h4 className=\"text-sm font-medium\">Exercise Prompt {promptIndex + 1}</h4>\n+                                          <div className=\"flex items-center gap-2\">\n+                                            <TooltipProvider>\n+                                              <Tooltip>\n+                                                <TooltipTrigger asChild>\n+                                                  <Button\n+                                                    size=\"sm\"\n+                                                    variant=\"outline\"\n+                                                    onClick={() => handleSavePrompt(question.id, prompt, promptIndex)}\n+                                                    disabled={promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving'}\n+                                                  >\n+                                                    {promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving' ? (\n+                                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n+                                                    ) : (\n+                                                      <Save className=\"h-4 w-4 mr-2\" />\n+                                                    )}\n+                                                    Save Prompt\n+                                                  </Button>\n+                                                </TooltipTrigger>\n+                                                <TooltipContent>\n+                                                  {`Status: ${promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}`}\n+                                                </TooltipContent>\n+                                              </Tooltip>\n+                                            </TooltipProvider>\n+                                            <Badge variant={\n+                                              promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saved'\n+                                                ? 'secondary'\n+                                                : promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'error'\n+                                                ? 'destructive'\n+                                                : 'default'\n+                                            }>\n+                                              {promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}\n+                                            </Badge>\n+                                                  </div>\n+                                        </div>\n+                                        <ExercisePromptCard\n+                                          key={prompt.id} // Add a unique key here\n+                                          prompt={prompt}\n+                                          promptIndex={promptIndex}\n+                                          onRemove={() => handleRemoveExercisePrompt(index, promptIndex)}\n+                                          onUpdate={(updatedPrompt: ExercisePrompt) => {\n+                                            // Prevent duplicate updates\n+                                            if (updatedPrompt.id === prompt.id) {\n+                                              handleExercisePromptChange(index, promptIndex, updatedPrompt);\n+                                            }\n+                                          }}\n+                                        />\n+                                      </div>\n+                                    ))}\n+                                  </CardContent>\n+                                )}\n+                              </Card>\n+                            ))}\n+\n+                            {/* Add Question Button */}\n+                            <div className=\"flex items-center justify-between\">\n+                              <QuestionTypeSelect \n+                                value={selectedQuestionType} \n+                                onChange={handleQuestionTypeChange}\n+                              />\n+                                        <Button\n+                                          onClick={handleAddQuestion}\n+                                          disabled={!selectedQuestionType}\n+                                        >\n+                                <Plus className=\"h-4 w-4 mr-2\" />\n+                                          Add Question\n+                                        </Button>\n+                                      </div>\n+                      </TabsContent>\n+\n+                      {/* Activities Tab */}\n+                      <TabsContent value=\"activities\" className=\"space-y-4\">\n+                      <CardHeader>\n+                          <CardDescription>Add and manage activities for this lesson</CardDescription>\n+                      </CardHeader>\n+                        {activities.map((activity, index) => (\n+                          <Card key={index}>\n+                            <CardHeader className=\"pb-3\">\n+                              <div className=\"flex items-center justify-between\">\n+                                  <div className=\"flex items-center gap-2\">\n+                                  <Badge variant=\"outline\">Activity {index + 1}</Badge>\n+                                  </div>\n+                                <div className=\"flex items-center gap-2\">\n+                                  <Button\n+                                    variant=\"ghost\"\n+                                    size=\"sm\"\n+                                    onClick={() => handleActivityExpand(index)}\n+                                  >\n+                                    {expandedActivity === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n+                                  </Button>\n+                                  <Button\n+                                    variant=\"ghost\"\n+                                    size=\"sm\"\n+                                    onClick={() => handleRemoveActivity(index)}\n+                                  >\n+                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\n+                                  </Button>\n+                                </div>\n+                              </div>\n+                            </CardHeader>\n+                            {expandedActivity === index && (\n+                              <CardContent>\n+                                <div className=\"space-y-4\">\n+                                  <div className=\"space-y-2\">\n+                                    <Label>Instructions</Label>\n+                                    <Textarea\n+                                      value={activity.instructions}\n+                                      onChange={(e) => handleUpdateActivity(index, {\n+                                        ...activity,\n+                                        instructions: e.target.value\n+                                      })}\n+                                      placeholder=\"Enter activity instructions\"\n+                                    />\n+                                  </div>\n+                                    \n+                                    {/* Media Section */}\n+                                    <div className=\"space-y-2\">\n+                                      <Label>Media</Label>\n+                                      {activity.media?.map((media, mediaIndex) => (\n+                                        <div key={mediaIndex} className=\"flex items-center gap-2\">\n+                                          <Input\n+                                            value={media.url}\n+                                            onChange={(e) => {\n+                                              const updatedMedia = [...(activity.media || [])];\n+                                              updatedMedia[mediaIndex] = {\n+                                                type: media.type,\n+                                                url: e.target.value\n+                                              };\n+                                              handleUpdateActivity(index, {\n+                                                ...activity,\n+                                                media: updatedMedia\n+                                              });\n+                                            }}\n+                                            placeholder=\"Media URL\"\n+                                          />\n+                                          <Select\n+                                            value={media.type}\n+                                            onValueChange={(value) => {\n+                                              const updatedMedia = [...(activity.media || [])];\n+                                              updatedMedia[mediaIndex] = {\n+                                                type: value as 'image' | 'gif' | 'video',\n+                                                url: media.url\n+                                              };\n+                                              handleUpdateActivity(index, {\n+                                                ...activity,\n+                                                media: updatedMedia\n+                                              });\n+                                            }}\n+                                          >\n+                                            <SelectTrigger className=\"w-[120px]\">\n+                                              <SelectValue placeholder=\"Type\" />\n+                                            </SelectTrigger>\n+                                            <SelectContent>\n+                                              <SelectItem value=\"image\">Image</SelectItem>\n+                                              <SelectItem value=\"gif\">GIF</SelectItem>\n+                                              <SelectItem value=\"video\">Video</SelectItem>\n+                                            </SelectContent>\n+                                          </Select>\n+                                <Button\n+                                            variant=\"ghost\"\n+                                            size=\"sm\"\n+                                  onClick={() => {\n+                                              const updatedMedia = (activity.media || []).filter((_, i) => i !== mediaIndex);\n+                                              handleUpdateActivity(index, {\n+                                                ...activity,\n+                                                media: updatedMedia\n+                                          });\n+                                          }}\n+                                  >\n+                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\n+                                  </Button>\n+                                </div>\n+                                        ))}\n+                                  <Button\n+                                    variant=\"outline\"\n+                                    size=\"sm\"\n+                                            onClick={() => {\n+                                              handleUpdateActivity(index, {\n+                                                ...activity,\n+                                                media: [\n+                                                  ...(activity.media || [])  ,\n+                                                  { url: '', type: 'image' }\n+                                                ]\n+                                              });\n+                                            }}\n+                                  >\n+                                    <Plus className=\"h-4 w-4 mr-2\" />\n+                                            Add Media\n+                                  </Button>\n+                                </div>\n+                                      </div>\n+                                    </CardContent>\n+                                  )}\n+                                </Card>\n+                              ))}\n+\n+                              {/* Add Activity Button */}\n+                              <Button\n+                                onClick={handleAddActivity}\n+                                className=\"w-full\"\n+                              >\n+                                <Plus className=\"h-4 w-4 mr-2\" />\n+                                Add Activity\n+                              </Button>\n+                          </TabsContent>\n+                        </Tabs>\n+                        </div>\n+                )}\n+\n+                    {/* Floating Save Button */}\n+                    <div className=\"fixed bottom-8 right-8 flex items-center gap-4\">\n+                      {saveProgress !== 'idle' && (\n+                        <div className={cn(\n+                          \"flex items-center gap-2 rounded-lg px-4 py-2 shadow-lg\",\n+                          {\n+                            \"bg-background border\": saveProgress === 'saving',\n+                            \"bg-green-500 text-white\": saveProgress === 'saved',\n+                            \"bg-destructive text-destructive-foreground\": saveProgress === 'error'\n+                          }\n+                        )}>\n+                          {saveProgress === 'saving' && (\n+                            <>\n+                              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n+                              <span className=\"text-sm\">Saving changes...</span>\n+                            </>\n+                          )}\n+                          {saveProgress === 'saved' && (\n+                            <>\n+                              <Check className=\"h-4 w-4\" />\n+                              <span className=\"text-sm\">Changes saved</span>\n+                            </>\n+                          )}\n+                          {saveProgress === 'error' && (\n+                            <>\n+                              <X className=\"h-4 w-4\" />\n+                              <span className=\"text-sm\">Error saving changes</span>\n+                            </>\n+                          )}\n+                        </div>\n+                      )}\n+                      <Button\n+                        onClick={handleSaveLesson}\n+                        disabled={saveProgress === 'saving'}\n+                        className=\"shadow-lg\"\n+                      >\n+                        {saveProgress === 'saving' ? (\n+                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n+                        ) : (\n+                          <Save className=\"h-4 w-4 mr-2\" />\n+                        )}\n+                        {saveProgress === 'saving' ? 'Saving...' : 'Save Lesson'}\n+                      </Button>\n+                    </div>\n+                  </>\n+            )}\n+    </div>\n+    \n+\n+      {/* Floating Save Button */}\n+      {selectedSubtopicId && currentLessonId && (\n+          <div className=\"fixed bottom-4 right-4 flex flex-col gap-2\">\n+            <TooltipProvider>\n+              <Tooltip>\n+                <TooltipTrigger asChild>\n+                  <Button\n+                    size=\"icon\"\n+                    className=\"rounded-full h-12 w-12 shadow-lg\"\n+                    onClick={handleSaveLesson}\n+                    disabled={!selectedSubtopicId || !lessonTitle || questions.length === 0}\n+                  >\n+                    <Save className=\"h-6 w-6\" />\n+                  </Button>\n+                </TooltipTrigger>\n+                <TooltipContent>\n+                  <p>Save Lesson (Ctrl+S)</p>\n+                </TooltipContent>\n+              </Tooltip>\n+            </TooltipProvider>\n+          </div>\n+        )}\n+        <SaveFeedback />\n+\n+        {/* Add Grade Modal - do not delete */}\n+        {/* {modalState.showAddGrade && (\n+          <Dialog \n+            open={modalState.showAddGrade} \n+            onOpenChange={(open) => handleModalStateChange('showAddGrade', open)}\n+          >\n+            <DialogContent \n+              className=\"sm:max-w-[425px]\"\n+              onEscapeKeyDown={cleanupModalState}\n+              onPointerDownOutside={cleanupModalState}\n+            >\n+              <DialogHeader>\n+                <DialogTitle>Add New Grade</DialogTitle>\n+                <DialogDescription>Enter the details for the new grade.</DialogDescription>\n+              </DialogHeader>\n+              <div className=\"space-y-4 py-4\">\n+                <div className=\"space-y-2\">\n+                  <Label htmlFor=\"grade-name\">Grade Name</Label>\n+                  <Input\n+                    id=\"grade-name\"\n+                    value={newItemData.name}\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n+                    placeholder=\"Enter grade name\"\n+                  />\n+      </div>\n+              </div>\n+              <DialogFooter>\n+                <Button variant=\"outline\" onClick={() => {\n+                  setModalState({ ...modalState, showAddGrade: false });\n+                  setNewItemData({ name: '', description: '' });\n+                }}>\n+                  Cancel\n+                </Button>\n+                <Button onClick={handleCreateGrade} disabled={!newItemData.name}>Create Grade</Button>\n+              </DialogFooter>\n+            </DialogContent>\n+          </Dialog>\n+        )} */}\n+\n+        {/* Add Topic Modal */}\n+        {modalState.showAddTopic && (\n+          <Dialog \n+            open={modalState.showAddTopic} \n+            onOpenChange={(open) => handleModalStateChange('showAddTopic', open)}\n+          >\n+            <DialogContent \n+              className=\"sm:max-w-[425px]\"\n+              onEscapeKeyDown={cleanupModalState}\n+              onPointerDownOutside={cleanupModalState}\n+            >\n+              <DialogHeader>\n+                <DialogTitle>Add New Topic</DialogTitle>\n+                <DialogDescription>Enter the details for the new topic.</DialogDescription>\n+              </DialogHeader>\n+              <div className=\"space-y-4 py-4\">\n+                <div className=\"space-y-2\">\n+                  <Label htmlFor=\"topic-name\">Topic Name</Label>\n+                  <Input\n+                    id=\"topic-name\"\n+                    value={newItemData.name}\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n+                    placeholder=\"Enter topic name\"\n+                  />\n+                </div>\n+              </div>\n+              <DialogFooter>\n+                <Button variant=\"outline\" onClick={() => {\n+                  setModalState({ ...modalState, showAddTopic: false });\n+                  setNewItemData({ name: '', description: '' });\n+                }}>\n+                  Cancel\n+                </Button>\n+                <Button onClick={handleCreateTopic} disabled={!newItemData.name}>Create Topic</Button>\n+              </DialogFooter>\n+            </DialogContent>\n+          </Dialog>\n+        )}\n+\n+        {/* Add Subtopic Modal */}\n+        {modalState.showAddSubtopic && (\n+          <Dialog \n+            open={modalState.showAddSubtopic} \n+            onOpenChange={(open) => handleModalStateChange('showAddSubtopic', open)}\n+          >\n+            <DialogContent \n+              className=\"sm:max-w-[425px]\"\n+              onEscapeKeyDown={cleanupModalState}\n+              onPointerDownOutside={cleanupModalState}\n+            >\n+              <DialogHeader>\n+                <DialogTitle>Add New Subtopic</DialogTitle>\n+                <DialogDescription>Enter the details for the new subtopic.</DialogDescription>\n+              </DialogHeader>\n+              <div className=\"space-y-4 py-4\">\n+                <div className=\"space-y-2\">\n+                  <Label htmlFor=\"subtopic-name\">Subtopic Name</Label>\n+                  <Input\n+                    id=\"subtopic-name\"\n+                    value={newItemData.name}\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n+                    placeholder=\"Enter subtopic name\"\n+                  />\n+                </div>\n+              </div>\n+              <DialogFooter>\n+                <Button variant=\"outline\" onClick={() => {\n+                  setModalState({ ...modalState, showAddSubtopic: false });\n+                  setNewItemData({ name: '', description: '' });\n+                }}>\n+                  Cancel\n+                </Button>\n+                <Button onClick={() => handleCreateSubtopic({ title: newItemData.name })} disabled={!newItemData.name}>Create Subtopic</Button>\n+              </DialogFooter>\n+            </DialogContent>\n+          </Dialog>\n+        )}\n+\n+        {/* Add Lesson Modal */}\n+        {modalState.showAddLesson && (\n+          <Dialog \n+            open={modalState.showAddLesson} \n+            onOpenChange={(open) => handleModalStateChange('showAddLesson', open)}\n+          >\n+            <DialogContent \n+              className=\"sm:max-w-[425px]\"\n+              onEscapeKeyDown={cleanupModalState}\n+              onPointerDownOutside={cleanupModalState}\n+            >\n+              <DialogHeader>\n+                <DialogTitle>Add New Lesson</DialogTitle>\n+                <DialogDescription>Enter the details for the new lesson.</DialogDescription>\n+              </DialogHeader>\n+              <div className=\"space-y-4 py-4\">\n+                <div className=\"space-y-2\">\n+                  <Label htmlFor=\"lesson-name\">Lesson Title</Label>\n+                  <Input\n+                    id=\"lesson-name\"\n+                    value={newItemData.name}\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n+                    placeholder=\"Enter lesson title\"\n+                  />\n+                </div>\n+              </div>\n+              <DialogFooter>\n+                <Button variant=\"outline\" onClick={() => {\n+                  setModalState({ ...modalState, showAddLesson: false });\n+                  setNewItemData({ name: '', description: '' });\n+                }}>\n+                  Cancel\n+                </Button>\n+                <Button onClick={handleCreateLesson} disabled={!newItemData.name}>Create Lesson</Button>\n+              </DialogFooter>\n+            </DialogContent>\n+          </Dialog>\n+        )}\n+      </div>\n+      <Toaster />\n+      </div>\n+  );\n+} \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739970145124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -464,3407 +464,38 @@\n             .select('count')\n             .eq('lesson_id', id);\n           return { \n             canDelete: questions?.[0]?.count === 0,\n-            message: questions?.[0]?.count ?? 0 > 0 \n-              ? `Delete ${questions?.[0]?.count} questions first` \n+            message: questions?.[0]?.count > 0 \n+              ? `Please delete ${questions?.[0]?.count} questions first` \n               : null\n           };\n-  \n+\n         case 'subtopic':\n           const { data: lessons } = await supabase\n             .from('lessons')\n-            .select('id')\n+            .select('id, questions(count)')\n             .eq('subtopic_id', id);\n+          const hasQuestions = lessons?.some(l => l.questions?.count > 0);\n           return {\n-            canDelete: !lessons?.length,\n-            message: lessons?.length ? 'Delete all lessons first' : null\n+            canDelete: !hasQuestions && !lessons?.length,\n+            message: hasQuestions ? 'Delete questions from lessons first' : \n+                     lessons?.length ? 'Delete all lessons first' : null\n           };\n-  \n-        case 'topic':\n-          const { data: subtopics } = await supabase\n-            .from('subtopics')\n-            .select('id')\n-            .eq('topic_id', id);\n-          return {\n-            canDelete: !subtopics?.length,\n-            message: subtopics?.length ? 'Delete all subtopics first' : null\n-          };\n-  \n-        default:\n-          return { canDelete: false, message: 'Invalid item type' };\n-      }\n-    } catch (error) {\n-      console.error('Error checking deletability:', error);\n-      return { canDelete: false, message: 'Error checking item' };\n-    }\n-  };\n \n-  const handleRemoveQuestion = async (index: number) => {\n-    try {\n-      const questionToDelete = questions[index];\n-      \n-      // Delete related exercise prompts first\n-      const { error: promptError } = await supabase\n-        .from('exercise_prompts')\n-        .delete()\n-        .eq('question_id', questionToDelete.id);\n-\n-      if (promptError) throw promptError;\n-\n-      // Then delete the question\n-      const { error: questionError } = await supabase\n-        .from('questions')\n-        .delete()\n-        .eq('id', questionToDelete.id);\n-\n-      if (questionError) throw questionError;\n-\n-      // Update local state\n-      const newQuestions = questions.filter((_, i) => i !== index);\n-      setQuestions(newQuestions);\n-      \n-      toast.success('Question and related prompts deleted successfully');\n-    } catch (error) {\n-      console.error('Error deleting question:', error);\n-      toast.error('Failed to delete question and prompts');\n-    }\n-  };\n-\n-  const handleUpdateQuestion = useCallback(async (index: number, updatedQuestion: Question) => {\n-    const newQuestions = [...questions];\n-    newQuestions[index] = updatedQuestion;\n-    setQuestions(newQuestions);\n-    setQuestionSaveStatuses(prev => prev.map((status, i) => \n-      i === index ? { ...status, status: 'draft' } : status\n-    ));\n-  }, [questions]);\n-\n-  const handleAddExercisePrompt = useCallback((questionIndex: number) => {\n-    setQuestions(prev => prev.map((question, i) => {\n-      if (i === questionIndex) {\n-        return {\n-          ...question,\n-          exercisePrompts: [\n-            ...question.exercisePrompts,\n-            {\n-              id: crypto.randomUUID(),\n-              text: '',\n-              media: '',\n-              type: 'image',\n-              narration: 'Your turn',\n-              saytext: 'Say: ',\n-              metadata: {\n-                estimatedTime: 0\n-              },\n-              created_at: new Date().toISOString(),\n-              updated_at: new Date().toISOString()\n-            }\n-          ]\n-        };\n-      }\n-      return question;\n-    }));\n-  }, []);\n-\n-  const handleRemoveExercisePrompt = useCallback((questionIndex: number, promptIndex: number) => {\n-    setQuestions(prev => prev.map((question, i) => {\n-      if (i === questionIndex) {\n-        return {\n-          ...question,\n-          exercisePrompts: question.exercisePrompts.filter((_, j) => j !== promptIndex)\n-        };\n-      }\n-      return question;\n-    }));\n-  }, []);\n-\n-  const handleExercisePromptChange = useCallback(async (\n-    questionIndex: number,\n-    promptIndex: number,\n-    updatedPrompt: ExercisePrompt\n-  ) => {\n-    try {\n-      const promptUpdate = {\n-        id: updatedPrompt.id,\n-        question_id: updatedPrompt.question_id,\n-        text: updatedPrompt.text,\n-        type: updatedPrompt.type,\n-        narration: updatedPrompt.narration,\n-        saytext: updatedPrompt.saytext,\n-        media: updatedPrompt.media,\n-        // Remove order_index as it's not in schema\n-        created_at: new Date().toISOString()\n-      };\n-\n-      const { error: promptError } = await supabase\n-        .from('exercise_prompts')\n-        .upsert(promptUpdate)\n-        .select();\n-\n-      if (promptError) throw promptError;\n-\n-      // Update local state\n-      setQuestions(prev => prev.map((question, i) => {\n-        if (i === questionIndex) {\n-          const newPrompts = [...question.exercisePrompts];\n-          newPrompts[promptIndex] = updatedPrompt;\n-          return { ...question, exercisePrompts: newPrompts };\n-        }\n-        return question;\n-      }));\n-\n-    } catch (error) {\n-      console.error('Error saving prompt:', error);\n-      toast.error('Failed to save prompt');\n-    }\n-  }, []);\n-\n-  const handleAddActivity = useCallback(() => {\n-    const newActivity: Activity = {\n-      id: crypto.randomUUID(),\n-      lesson_id: currentLessonId || '',\n-      created_at: new Date().toISOString(),\n-      type: 'practice',\n-      title: '',\n-      name: '',\n-      instructions: '',\n-      media: [],\n-      data: {\n-        prompt: '',\n-        teacherScript: '',\n-        media: []\n-      }\n-    };\n-    setActivities(prev => [...prev, newActivity]);\n-  }, [currentLessonId]);\n-\n-  const handleUpdateActivity = useCallback((index: number, updatedActivity: Activity) => {\n-    setActivities(prev => prev.map((activity, i) => i === index ? updatedActivity : activity));\n-  }, []);\n-\n-  const handleRemoveActivity = useCallback((index: number) => {\n-    setActivities(prev => prev.filter((_, i) => i !== index));\n-  }, []);\n-\n-  const handleExercisePromptUpdate = useCallback((questionIndex: number, promptIndex: number, updatedPrompt: ExercisePrompt) => {\n-    const updatedQuestions = [...questions];\n-    updatedQuestions[questionIndex].exercisePrompts[promptIndex] = updatedPrompt;\n-    handleUpdateQuestion(questionIndex, updatedQuestions[questionIndex]);\n-  }, [questions, handleUpdateQuestion]);\n-\n-  const handleQuestionDataChange = useCallback((questionIndex: number, field: string, value: string) => {\n-    setQuestions(prev => prev.map((q, i) => \n-      i === questionIndex \n-        ? { \n-            ...q, \n-            data: { \n-              prompt: q.data?.prompt || '',\n-              teacherScript: q.data?.teacherScript || '',\n-              ...q.data,\n-              [field]: value \n-            } \n-          }\n-        : q\n-    ));\n-  }, []);\n-\n-  const [isSaving, setIsSaving] = useState(false);\n-\n-  const handleSaveLesson = async () => {\n-    try {\n-      if (!currentLessonId || !selectedSubtopicId) {\n-        toast.error('Please select a subtopic and lesson first');\n-        return;\n-      }\n-\n-      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\n-      if (sessionError) throw sessionError;\n-      \n-      if (!session?.user) {\n-        toast.error('Please sign in to save lessons');\n-        return;\n-      }\n-\n-      // Get user's role from session\n-      const userRole = session.user.user_metadata?.role;\n-      console.log('Current user role:', userRole);\n-      console.log('📝 Saving content heading:', {\n-        contentHeading,\n-        currentLessonId,\n-        selectedSubtopicId,\n-        timestamp: new Date().toISOString()\n-      });\n-\n-      // Create metadata object\n-      const lessonMetadata = {\n-        lastEdited: new Date().toISOString(),\n-        version: 1,\n-        status: 'draft' \n-      };\n-\n-      // Complete lesson data with all fields\n-      const lessonData = {\n-        id: currentLessonId,\n-        title: lessonTitle,\n-        content: lessonContent,\n-        metadata: lessonMetadata, // Supabase will automatically handle JSON conversion\n-        content_type: 'html',\n-        lesson_type: 'lesson',\n-        grade_id: selectedGradeId,\n-        topic_id: selectedTopicId,\n-        subtopic_id: selectedSubtopicId,\n-        user_id: session.user.id,\n-        updated_at: new Date().toISOString(),\n-        role: userRole, // Include role in the payload\n-        description: '',\n-        prerequisites: [],\n-        media_type: 'image',\n-        media_url: '',\n-        contentheading: contentHeading || ''\n-      };\n-\n-      console.log('📦 Data being sent to Supabase:', lessonData);\n-\n-      // Save lesson with all fields\n-      const { data, error: lessonError } = await supabase\n-        .from('lessons')\n-        .upsert(lessonData, { \n-          onConflict: 'id'\n-        })\n-        .select();\n-\n-      if (lessonError) throw lessonError;\n-\n-      // 2. Save lesson content\n-      const { data: existingContent } = await supabase\n-        .from('lesson_content')\n-        .select('id')\n-        .eq('lesson_id', currentLessonId)\n-        .single();\n-\n-      const contentMetadata = {\n-        lastEdited: new Date().toISOString(),\n-        version: 1,\n-        status: 'draft'\n-      };\n-\n-      const contentUpdate = {\n-        id: existingContent?.id || crypto.randomUUID(),\n-        lesson_id: currentLessonId,\n-        content: [lessonContent],\n-        metadata: contentMetadata, // Supabase will automatically handle JSON conversion\n-        content_type: 'html',\n-        user_id: session.user.id,\n-        updated_at: new Date().toISOString(),\n-        created_at: new Date().toISOString()\n-      };\n-\n-      const { error: contentError } = await supabase\n-        .from('lesson_content')\n-        .upsert(contentUpdate, { onConflict: 'id' });\n-\n-      if (contentError) throw contentError;\n-\n-      // 3. Save questions\n-      for (const question of questions) {\n-        const questionData = {\n-          id: question.id,\n-          lesson_id: currentLessonId,\n-          type: question.type,\n-          title: question.title,\n-          metadata: question.metadata,\n-          data: question.data,\n-          updated_at: new Date().toISOString(),\n-          user_id: session.user.id\n-        };\n-\n-        const { error: questionError } = await supabase\n-          .from('questions')\n-          .upsert(questionData, { onConflict: 'id' });\n-\n-        if (questionError) throw questionError;\n-\n-        //4. Save exercise prompts for this question\n-        if (question.exercisePrompts) {\n-          for (const prompt of question.exercisePrompts) {\n-            const promptData = {\n-              id: prompt.id,\n-              question_id: question.id,\n-              text: prompt.text,\n-              media: prompt.media,\n-              type: prompt.type,\n-              narration: prompt.narration,\n-              saytext: prompt.saytext,\n-              user_id: session.user.id,\n-              updated_at: new Date().toISOString()\n-            };\n-\n-            const { error: promptError } = await supabase\n-              .from('exercise_prompts')\n-              .upsert(promptData, { onConflict: 'id' });\n-\n-            if (promptError) throw promptError;\n-          }\n-        }\n-      }\n-\n-      // 5. Save activities\n-      if (activities.length > 0) {\n-        const activitiesData = activities.map(activity => ({\n-          id: activity.id,\n-          lesson_id: currentLessonId,\n-          type: activity.type,\n-          title: activity.title,\n-          name: activity.name,\n-          instructions: activity.instructions,\n-          media: activity.media,\n-          data: activity.data,\n-          created_at: new Date().toISOString()\n-        }));\n-\n-        const { error: activitiesError } = await supabase\n-          .from('activities')\n-          .upsert(activitiesData, { onConflict: 'id' });\n-\n-        if (activitiesError) throw activitiesError;\n-      }\n-\n-      // After successful save\n-      console.log('✅ Content heading saved successfully:', {\n-        contentHeading,\n-        lessonId: currentLessonId,\n-        timestamp: new Date().toISOString()\n-      });\n-\n-      toast.success('Lesson saved successfully');\n-    } catch (err) {\n-      const error = err as PostgrestError;\n-      console.error('❌ Error saving content heading:', {\n-        error: error.message,\n-        contentHeading,\n-        lessonContent,\n-        lessonId: currentLessonId,\n-        timestamp: new Date().toISOString()\n-      });\n-      toast.error(`Failed to save lesson: ${error.message}`);\n-\n-\n-    }\n-  };\n-\n-  const handleSaveQuestion = async (question: Question, index: number) => {\n-    const loadingToast = toast.loading(`Saving question ${index + 1}...`);\n-    \n-    try {\n-      const { data: { session } } = await supabase.auth.getSession();\n-      if (!session?.user) {\n-        toast.error('Please sign in to save question', { id: loadingToast });\n-        return;\n-      }\n-\n-      // Save question\n-      const questionData = {\n-        id: question.id,\n-        lesson_id: currentLessonId,\n-        type: question.type,\n-        title: question.title,\n-        metadata: question.metadata,\n-        data: {\n-          prompt: question.data?.prompt ?? '',\n-          teacherScript: question.data?.teacherScript ?? '',\n-          followup_prompt: question.data?.followup_prompt ?? [],\n-          sampleAnswer: question.data?.sampleAnswer || undefined,  // Convert null to undefined\n-          answer: question.data?.answer || undefined  // Convert null to undefined\n-        } as const,\n-        user_id: session.user.id,\n-        updated_at: new Date().toISOString()\n-      };\n-\n-      const { error: questionError } = await supabase\n-        .from('questions')\n-        .upsert(questionData, { onConflict: 'id' });\n-\n-      if (questionError) throw questionError;\n-\n-      // Save exercise prompts if they exist\n-      if (question.exercisePrompts?.length) {\n-        for (const prompt of question.exercisePrompts) {\n-          const promptData = {\n-            id: prompt.id,\n-            question_id: question.id,\n-            text: prompt.text,\n-            type: prompt.type,\n-            narration: prompt.narration,\n-            saytext: prompt.saytext,\n-            media: prompt.media,\n-            user_id: session.user.id,\n-            updated_at: new Date().toISOString()\n-          };\n-\n-          const { error: promptError } = await supabase\n-            .from('exercise_prompts')\n-            .upsert(promptData, { onConflict: 'id' });\n-\n-          if (promptError) throw promptError;\n-        }\n-      }\n-\n-      toast.success(`Question ${index + 1} saved successfully`, { id: loadingToast });\n-    } catch (error) {\n-      console.error('Error saving question:', error);\n-      toast.error(`Failed to save question ${index + 1}`, { id: loadingToast });\n-    }\n-  };\n-\n-  const handleSaveActivity = async (activity: Activity) => {\n-    try {\n-      await contentService.saveActivity(activity);\n-      toast.success('Activity saved');\n-    } catch (error) {\n-      console.error('Failed to save activity:', error);\n-      toast.error('Failed to save activity');\n-    }\n-  };\n-\n-  // Effects\n-  useEffect(() => {\n-    const fetchGrades = async () => {\n-      try {\n-        const { data, error } = await supabase\n-          .from('grades')\n-          .select('*')\n-          .order('name');\n-\n-        if (error) {\n-          console.error('Supabase error:', error);\n-          throw error;\n-        }\n-\n-        if (!data) {\n-          throw new Error('No data returned from Supabase');\n-        }\n-\n-        // Map the grades to match your interface\n-        const validGrades = data.map((grade: any) => ({\n-          _id: grade.id,\n-          id: grade.id,\n-          name: grade.name,\n-          level: grade.level || 0,  // Add default value if not provided\n-          orderIndex: grade.order_index || 0,  // Add default value if not provided\n-          topics: []\n-        }));\n-        \n-        setGrades(validGrades);\n-      } catch (error) {\n-        console.error('Error fetching grades:', error);\n-        toast.error('Failed to fetch grades');\n-      }\n-    };\n-\n-    fetchGrades();\n-  }, []);\n-\n-  // Topic Selection\n-  useEffect(() => {\n-    const fetchTopics = async () => {\n-      if (!selectedGradeId) return;\n-      \n-      try {\n-        const { data, error } = await supabase\n-          .from('topics')\n-          .select('*')\n-          .eq('grade_id', selectedGradeId)\n-          .order('title');\n-\n-        if (error) {\n-          throw error;\n-        }\n-\n-        // Map the topics to match your interface\n-        const validTopics = (data || []).map((topic: any) => ({\n-          _id: topic.id,\n-          id: topic.id,\n-          name: topic.title,\n-          title: topic.title,\n-          grade_id: topic.grade_id,\n-          subtopics: []\n-        }));\n-        \n-        setTopics(validTopics);\n-      } catch (error) {\n-        console.error('Error fetching topics:', error);\n-        toast.error('Failed to fetch topics');\n-      }\n-    };\n-\n-    fetchTopics();\n-  }, [selectedGradeId]);\n-\n-  // Subtopic Selection\n-  useEffect(() => {\n-    const fetchSubtopics = async () => {\n-      if (!selectedTopicId) return;\n-      \n-      try {\n-        // Use content service to fetch subtopics\n-        const subtopicsData = await contentService.fetchSubtopics(selectedTopicId);\n-        console.log('Fetched subtopics:', subtopicsData);\n-\n-        const validSubtopics = subtopicsData.map((subtopic: any) => ({\n-          id: subtopic.id,\n-          title: subtopic.title,\n-          description: subtopic.description,\n-          topic_id: subtopic.topic_id,\n-          lessons: [],\n-          order_index: subtopicsData.length\n-        }));\n-        \n-        setSubtopics(validSubtopics);\n-        \n-        // Update global state\n-        if (selectedSubtopic) {\n-          setSelectedSubtopic(selectedSubtopic);\n-        }\n-      } catch (err) {\n-        const error = err as Error;\n-        console.error('Error fetching subtopics:', error);\n-        toast.error('Failed to fetch subtopics');\n-      }\n-    };\n-\n-    fetchSubtopics();\n-  }, [selectedTopicId, selectedSubtopic, setSelectedSubtopic]);\n-\n-  // Add effect to monitor subtopics state\n-  useEffect(() => {\n-    console.log('Current subtopics state:', subtopics);\n-  }, [subtopics]);\n-\n-  // Add fetchLessons function\n-  const fetchLessons = useCallback(async () => {\n-    if (!selectedSubtopicId) return;\n-    try {\n-      const { data, error } = await supabase\n-        .from('lessons')\n-        .select('*')\n-        .eq('subtopic_id', selectedSubtopicId)\n-        .order('title');\n-\n-      if (error) {\n-        throw error;\n-      }\n-      \n-      // Map the lessons to ensure they have _id\n-      const validLessons = (data || []).map((lesson: any) => ({\n-        ...lesson,\n-        _id: lesson._id || lesson.id, // Use _id if available, otherwise use id\n-        title: lesson.title || 'Untitled Lesson'\n-      })).filter((lesson: any) => lesson._id); // Only include lessons with valid IDs\n-      \n-      setLessons(validLessons);\n-    } catch (error) {\n-      console.error('Error fetching lessons:', error);\n-      toast.error('Failed to fetch lessons');\n-    }\n-  }, [selectedSubtopicId]);\n-  // Add loadLessonContent function\n-  const isLoading = useRef(false);\n-  const loadLessonContent = useCallback(async (lessonId: string) => {\n-    // Prevent multiple simultaneous loads\n-    if (isLoading.current) return;\n-    isLoading.current = true;\n-\n-    const controller = new AbortController();\n-\n-    try {\n-      // Clear existing content first\n-      setLessonTitle('');\n-      setContentHeading('');\n-      setLessonContent('');\n-      setQuestions([]);\n-      \n-      // First fetch lesson data\n-      const { data: lessonData, error: lessonError } = await supabase\n-        .from('lessons')\n-        .select('*')\n-        .eq('id', lessonId)\n-        .single()\n-        \n-\n-      if (lessonError) {\n-        console.error('Lesson fetch error:', lessonError);\n-        throw lessonError;\n-      }\n-\n-      // Set lesson data\n-      setLessonTitle(lessonData.title || '');\n-      setContentHeading(lessonData.content || '');\n-\n-      // Then fetch lesson content with explicit headers\n-      const { data: contentData, error: contentError } = await supabase\n-        .from('lesson_content')\n-        .select('*')\n-        .eq('lesson_id', lessonId)\n-        .order('updated_at', { ascending: false })\n-        .limit(1)\n-        .maybeSingle();\n-\n-      if (contentError) {\n-        console.error('Content fetch error:', contentError);\n-        throw contentError;\n-      }\n-\n-      // Set content if available\n-      if (contentData?.content) {\n-        setLessonContent(typeof contentData.content === 'string' \n-          ? contentData.content \n-          : JSON.stringify(contentData.content)\n-        );\n-      }\n-\n-    } catch (error: unknown) {\n-      if (error instanceof Error && error.name === 'AbortError') {\n-        console.log('Request aborted');\n-        return;\n-      }\n-      console.error('Error loading lesson:', error);\n-      toast.error('Failed to load lesson content');\n-      \n-      // Reset states on error\n-      setLessonTitle('');\n-      setContentHeading('');\n-      setLessonContent('');\n-      setQuestions([]);\n-    } finally {\n-      isLoading.current = false;\n-    }\n-\n-    return () => {\n-      controller.abort();\n-    };\n-  }, []); // Empty dependencies since we're using closure over state setters\n-\n-  // // Add effect for fetching lessons when subtopic changes\n-  useEffect(() => {\n-    if (selectedSubtopicId) {\n-      fetchLessons();\n-    }\n-  }, [selectedSubtopicId, fetchLessons]);\n-\n-  // Add effect for loading lesson content when currentLessonId changes\n-    useEffect(() => {\n-    let isMounted = true;\n-    let timeoutId: NodeJS.Timeout;\n-\n-    const loadContent = async () => {\n-      if (!currentLessonId || !isMounted) return;\n-\n-      // Clear previous timeout if exists\n-      if (timeoutId) clearTimeout(timeoutId);\n-\n-      // Set new timeout for debouncing\n-      timeoutId = setTimeout(() => {\n-        if (isMounted) {\n-          loadLessonContent(currentLessonId);\n-        }\n-      }, 300);\n-    };\n-\n-    loadContent();\n-\n-    // Cleanup function\n-    return () => {\n-      isMounted = false;\n-      if (timeoutId) clearTimeout(timeoutId);\n-      if (isLoading.current) isLoading.current = false;\n-    };\n-  }, [currentLessonId]); // Remove loadLessonContent from dependencies\n-\n-  useEffect(() => {\n-    console.log('Current lessons state:', lessons);\n-  }, [lessons]);\n-\n-    // Add keyboard shortcut for saving\n-  useEffect(() => {\n-    const handleKeyDown = (e: KeyboardEvent) => {\n-      if ((e.ctrlKey || e.metaKey) && e.key === 's') {\n-        e.preventDefault();\n-        handleSaveLesson();\n-      }\n-    };\n-\n-    window.addEventListener('keydown', handleKeyDown);\n-    return () => window.removeEventListener('keydown', handleKeyDown);\n-  }, [handleSaveLesson]);\n-\n-  // Add SaveFeedback component\n-  const SaveFeedback = useCallback(() => {\n-    if (saveProgress === 'idle') return null;\n-\n-    return (\n-    <div className=\"fixed bottom-4 right-4\">\n-      {saveProgress === 'saving' && (\n-        <div className=\"flex items-center gap-2 bg-background border rounded-lg px-4 py-2 shadow-lg\">\n-          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n-          <span className=\"text-sm\">Saving changes...</span>\n-        </div>\n-      )}\n-      {saveProgress === 'saved' && (\n-        <div className=\"flex items-center gap-2 bg-green-500 text-white rounded-lg px-4 py-2 shadow-lg\">\n-          <Check className=\"h-4 w-4\" />\n-          <span className=\"text-sm\">Changes saved</span>\n-        </div>\n-      )}\n-      {saveProgress === 'error' && (\n-        <div className=\"flex items-center gap-2 bg-destructive text-destructive-foreground rounded-lg px-4 py-2 shadow-lg\">\n-          <X className=\"h-4 w-4\" />\n-          <span className=\"text-sm\">Error saving changes</span>\n-        </div>\n-      )}\n-    </div>\n-  );\n-  }, [saveProgress]);\n-\n-  // Update handlers\n-  const handleGradeSelect = (gradeId: string) => {\n-    // Always keep sidebar open during selection\n-    setIsSidebarCollapsed(false);\n-    setIsSidebarLocked(true);\n-    \n-    // Batch state updates\n-    requestAnimationFrame(() => {\n-      setSelectedGradeId(gradeId);\n-      setSelectedGrade(gradeId);\n-      setSelectedTopicId(null);\n-      setSelectedTopic('');\n-      setSelectedSubtopicId(null);\n-      setSelectedSubtopic('');\n-      setCurrentLessonId(null);\n-      \n-      if (isViewMode) {\n-        setExpandedGrade(gradeId);\n-      }\n-    });\n-  };\n-\n-  const handleTopicSelect = (value: string) => {\n-    setSelectedTopicId(value);\n-    setSelectedTopic(value);\n-    setSelectedSubtopicId(null);\n-    setSelectedSubtopic('');\n-    setCurrentLessonId(null);\n-  };\n-\n-  const handleSubtopicSelect = (value: string) => {\n-    setSelectedSubtopicId(value);\n-    setSelectedSubtopic(value);\n-    setCurrentLessonId(null);\n-  };\n-\n-  const handleLessonSelect = async (lessonId: string) => {\n-    try {\n-      // Lock sidebar during selection\n-      setIsSidebarLocked(true);\n-      setIsSidebarCollapsed(false);\n-      setCurrentLessonId(lessonId);\n-      \n-      // 1. Fetch lesson data\n-      const { data: lessonData, error: lessonError } = await supabase\n-        .from('lessons')\n-        .select('*')\n-        .eq('id', lessonId)\n-        .single();\n-\n-      if (lessonError) throw lessonError;\n-\n-      // 2. Fetch questions with exercise prompts\n-      const { data: questionsData, error: questionsError } = await supabase\n-        .from('questions')\n-        .select(`\n-          *,\n-          exercise_prompts (*)\n-        `)\n-        .eq('lesson_id', lessonId);\n-\n-      if (questionsError) throw questionsError;\n-\n-      // 3. Fetch activities - removed order_index\n-      const { data: activitiesData, error: activitiesError } = await supabase\n-        .from('activities')\n-        .select('*')\n-        .eq('lesson_id', lessonId);\n-\n-      if (activitiesError) throw activitiesError;\n-\n-      // Format questions with their exercise prompts\n-      const formattedQuestions = questionsData?.map(q => ({\n-        ...q,\n-        data: q.data || {},\n-        exercisePrompts: q.exercise_prompts || []\n-      })) || [];\n-\n-      // Set all states\n-      setLessonTitle(lessonData.title || '');\n-      setLessonContent(lessonData.content || '');\n-      setQuestions(formattedQuestions);\n-      setActivities(activitiesData || []);\n-\n-      // After successful load, unlock sidebar and allow collapse\n-      setTimeout(() => {\n-        setIsSidebarLocked(false);\n-        if (!isSidebarLocked) {\n-          setIsSidebarCollapsed(true);\n-        }\n-      }, 300);\n-\n-    } catch (error) {\n-      console.error('Error loading lesson:', error);\n-      toast.error('Failed to load lesson');\n-      // Reset states on error\n-      setLessonTitle('');\n-      setLessonContent('');\n-      setQuestions([]);\n-      setActivities([]);\n-    }\n-    if (!isSidebarLocked) {\n-      setIsSidebarCollapsed(true);\n-    }\n-  };\n-\n-  // Update the expansion handlers\n-  const handleTopicExpand = async (topicId: string) => {\n-    setExpandedTopic(expandedTopic === topicId ? null : topicId);\n-    setSelectedTopicId(topicId);\n-    \n-    // Load subtopics when topic is expanded\n-    if (topicId) {\n-      setIsLoadingSubtopics(true);\n-      try {\n-        const { data: subtopicsData, error } = await supabase\n-          .from('subtopics')\n-          .select('*')\n-          .eq('topic_id', topicId)\n-          .order('order_index');\n-\n-        if (error) throw error;\n-        setSubtopics(subtopicsData || []);\n-      } catch (error) {\n-        console.error('Error loading subtopics:', error);\n-        toast.error('Failed to load subtopics');\n-      } finally {\n-        setIsLoadingSubtopics(false);\n-      }\n-    }\n-  };\n-\n-  const handleSubtopicExpand = async (subtopicId: string) => {\n-    setExpandedSubtopic(expandedSubtopic === subtopicId ? null : subtopicId);\n-    setSelectedSubtopicId(subtopicId);\n-    \n-    if (subtopicId) {\n-      setIsLoadingLessons(true);\n-      try {\n-        const { data: lessonsData, error } = await supabase\n-          .from('lessons')\n-          .select('*')\n-          .eq('subtopic_id', subtopicId)\n-          .order('order_index');\n-\n-        if (error) throw error;\n-        setLessons(lessonsData || []);\n-      } catch (error) {\n-        console.error('Error loading lessons:', error);\n-        toast.error('Failed to load lessons');\n-      } finally {\n-        setIsLoadingLessons(false);\n-      }\n-    }\n-  };\n-\n-  const handleQuestionExpand = (index: number) => {\n-    setExpandedQuestion(expandedQuestion === index ? null : index);\n-  };\n-\n-  const handleActivityExpand = (index: number) => {\n-    setExpandedActivity(expandedActivity === index ? null : index);\n-  };\n-\n-  // Add effect to save mode changes to localStorage\n-  useEffect(() => {\n-    localStorage.setItem('lessonManagementViewMode', isViewMode.toString());\n-  }, [isViewMode]);\n-\n-  // Add handlers for creating new items\n-  const handleCreateGrade = async () => {\n-    try {\n-      const response = await fetch(`${API_ENDPOINT}/grades`, {\n-        method: 'POST',\n-        headers: { 'Content-Type': 'application/json' },\n-        body: JSON.stringify({ name: newItemData.name })\n-      });\n-\n-      if (!response.ok) throw new Error('Failed to create grade');\n-      const data = await response.json();\n-      \n-      if (!data.success) throw new Error(data.message || 'Failed to create grade');\n-      \n-      // Update grades list\n-      setGrades([...grades, data.data.grade]);\n-      setModalState({ ...modalState, showAddGrade: false });\n-      setNewItemData({ name: '', description: '' });\n-      toast.success('Grade created successfully');\n-    } catch (error) {\n-      console.error('Error creating grade:', error);\n-      toast.error('Failed to create grade');\n-    }\n-  };\n-\n-  const handleCreateTopic = async () => {\n-    if (!selectedGradeId) {\n-      toast.error('Please select a grade first');\n-      return;\n-    }\n-\n-    try {\n-      const newTopic = await contentService.createTopic({\n-        title: newItemData.name, // Map from newItemData.name to title\n-        description: newItemData.description,\n-        gradeId: selectedGradeId\n-      });\n-\n-      setTopics(prev => [...prev, newTopic]);\n-      toast.success('Topic created successfully');\n-      setModalState({ ...modalState, showAddTopic: false });\n-      setNewItemData({ name: '', description: '' });\n-    } catch (err) {\n-      const error = err instanceof Error ? err.message : String(err);\n-      console.error('Error creating topic:', error);\n-      toast.error('Failed to create topic');\n-    }\n-  };\n-    \n-  \n-\n-\n-  const handleCreateSubtopic = async (data: { title: string; description?: string }) => {\n-    try {\n-      if (!selectedTopicId) {\n-        toast.error('Please select a topic first');\n-        return;\n-      }\n-\n-      const newSubtopic = await contentService.createSubtopic({\n-        ...data,\n-        topicId: selectedTopicId\n-      });\n-\n-      setSubtopics(prev => [...prev, {\n-        _id: newSubtopic.id,\n-        id: newSubtopic.id,\n-        name: newSubtopic.title,\n-        title: newSubtopic.title,\n-        description: newSubtopic.description,\n-        topic_id: newSubtopic.topic_id,\n-        orderIndex: prev.length,\n-        lessons: []\n-      }]);\n-\n-      toast.success('Subtopic created successfully');\n-      setModalState(prev => ({ ...prev, showAddSubtopic: false }));\n-    } catch (err) {\n-      const error = err as Error;\n-      console.error('Error creating subtopic:', error);\n-      toast.error('Failed to create subtopic');\n-    }\n-  };\n-\n-  const handleUpdateSubtopic = async (subtopicId: string, data: { title: string; description?: string }) => {\n-    try {\n-      const { data: updatedSubtopic, error } = await supabase\n-        .from('sub_topics')\n-        .update(data)\n-        .eq('id', subtopicId)\n-        .select()\n-        .single();\n-\n-      if (error) throw error;\n-      \n-      setSubtopics(prev => prev.map(subtopic => \n-        subtopic.id === subtopicId \n-          ? {\n-              ...subtopic,\n-              name: updatedSubtopic.title\n-            }\n-          : subtopic\n-      ));\n-\n-      toast.success('Subtopic updated successfully');\n-    } catch (err) {\n-      const error = err as Error;\n-      console.error('Error updating subtopic:', error);\n-      toast.error('Failed to update subtopic');\n-    }\n-  };\n-\n-  const handleDeleteSubtopic = async (subtopicId: string) => {\n-    try {\n-      await contentService.deleteSubtopic(subtopicId);\n-      setSubtopics(prev => prev.filter(subtopic => subtopic.id !== subtopicId));\n-      setSelectedSubtopicId(null);\n-      toast.success('Subtopic deleted successfully');\n-    } catch (err) {\n-      const error = err as Error;\n-      console.error('Error deleting subtopic:', error);\n-      toast.error('Failed to delete subtopic');\n-    }\n-  };\n-\n-  const handleCreateLesson = async () => {\n-    if (!selectedSubtopicId) {\n-      toast.error('Please select a subtopic first');\n-      return;\n-    }\n-\n-    try {\n-      // First create the lesson\n-      const { data: newLesson, error: lessonError } = await supabase\n-        .from('lessons')\n-        .insert({\n-          title: newItemData.name,\n-          duration: 0,\n-          topic_id: selectedTopicId,\n-          subtopic_id: selectedSubtopicId,\n-          content: '', // Empty rich text content initially\n-          status: 'draft'\n-        })\n-        .select()\n-        .single();\n-\n-      if (lessonError) throw lessonError;\n-\n-      // Create initial question\n-      const { data: newQuestion, error: questionError } = await supabase\n-        .from('questions')\n-        .insert({\n-          lesson_id: newLesson.id,\n-          type: 'speaking', // default type\n-          title: 'Question 1',\n-          data: {\n-            prompt: '',\n-            teacherScript: '',\n-            options: []\n-          },\n-          order_index: 0\n-        })\n-        .select()\n-        .single();\n-\n-      if (questionError) throw questionError;\n-\n-      // Create initial exercise prompts for the question\n-      const { error: promptsError } = await supabase\n-        .from('exercise_prompts')\n-        .insert([\n-          {\n-            question_id: newQuestion.id,\n-            text: '',\n-            type: 'image',\n-            narration: '',\n-            saytext: '',\n-            media: [],\n-            order_index: 0\n-          },\n-          {\n-            question_id: newQuestion.id,\n-            text: '',\n-            type: 'gif',\n-            narration: '',\n-            saytext: '',\n-            media: [],\n-            order_index: 1\n-          }\n-        ]);\n-\n-      if (promptsError) throw promptsError;\n-\n-      // Create initial activity\n-      // const { error: activityError } = await supabase\n-      //   .from('activities')\n-      //   .insert({\n-      //     lesson_id: newLesson.id,\n-      //     type: 'practice',\n-      //     title: '',\n-      //     instructions: '',\n-      //     media: [],\n-      //     data: {\n-      //       prompt: '',\n-      //       teacherScript: '',\n-      //       media: []\n-      //     },\n-      //     order_index: 0\n-      //   });\n-\n-      // if (activityError) throw activityError;\n-\n-      // Update UI state\n-      setLessons(prev => [...prev, newLesson]);\n-      setCurrentLessonId(newLesson.id);\n-      setLessonTitle(newLesson.title);\n-      setModalState({ ...modalState, showAddLesson: false });\n-      setNewItemData({ name: '', description: '' });\n-      toast.success('Lesson created successfully');\n-\n-    } catch (error) {\n-      console.error('Error creating lesson:', error);\n-      toast.error('Failed to create lesson');\n-    }\n-  };\n-\n-  // Effect to handle localStorage after mount\n-  useEffect(() => {\n-    const storedMode = localStorage.getItem('lessonManagementViewMode');\n-    if (storedMode !== null) {\n-      setIsViewMode(storedMode === 'true');\n-    }\n-  }, []);\n-\n-  // Update the cleanupModalState function\n-  const cleanupModalState = useCallback(() => {\n-    document.body.style.pointerEvents = '';\n-    document.body.style.overflow = '';\n-    setModalState({\n-      showAddGrade: false,\n-      showAddTopic: false,\n-      showAddSubtopic: false,\n-      showAddLesson: false\n-    });\n-    setNewItemData({ name: '', description: '' });\n-  }, []);\n-\n-  // Add a function to handle modal state changes\n-  const handleModalStateChange = useCallback((modalType: keyof typeof modalState, open: boolean) => {\n-    if (!open) {\n-      cleanupModalState();\n-    } else {\n-      setModalState(prev => ({ ...prev, [modalType]: open }));\n-    }\n-  }, [cleanupModalState]);\n-\n-  const handleContentSave = async (content: string) => {\n-    const loadingToast = toast.loading(\"Saving content...\", {\n-      action: {\n-        label: \"Close\",\n-        onClick: () => toast.dismiss()\n-      }\n-    });\n-    \n-    try {\n-      const { data: { session } } = await supabase.auth.getSession();\n-      if (!session?.user) {\n-        toast.error('Please sign in to save content', { id: loadingToast });\n-        return;\n-      }\n-\n-      // Get the most recent content entry\n-      const { data: existingContent, error: checkError } = await supabase\n-        .from('lesson_content')\n-        .select('id')\n-        .eq('lesson_id', currentLessonId)\n-        .order('updated_at', { ascending: false })\n-        .limit(1)\n-        .maybeSingle();\n-\n-      // If content exists, update it; if not, insert new\n-      const { error } = await supabase\n-        .from('lesson_content')\n-        .upsert({\n-          id: existingContent?.id, // This ensures we update if id exists\n-          lesson_id: currentLessonId,\n-          content: [content],\n-          content_type: 'text',\n-          metadata: {\n-            heading: contentHeading\n-          },\n-          user_id: session.user.id,\n-          updated_at: new Date().toISOString()\n-        }, {\n-          onConflict: 'id'  // This ensures we update based on lesson_id\n-        });\n-\n-      if (error) throw error;\n-\n-      // Save questions separately\n-      for (const question of questions) {\n-        const { exercisePrompts, ...questionData } = question; // Remove exercisePrompts from question data\n-        \n-        // Save question\n-        const { error: questionError } = await supabase\n-          .from('questions')\n-          .upsert(questionData, {\n-            onConflict: 'id'\n-          })\n-          .select();\n-\n-        if (questionError) throw questionError;\n-\n-        // Save exercise prompts\n-        if (exercisePrompts?.length > 0) {\n-          for (const prompt of exercisePrompts) {\n-            const { error: promptError } = await supabase\n-              .from('exercise_prompts')\n-              .upsert(prompt, {\n-                onConflict: 'id'\n-              })\n-              .select();\n-\n-            if (promptError) throw promptError;\n-          }\n-        }\n-      }\n-      \n-      toast.success(\"Content saved successfully\", {\n-        action: {\n-          label: \"Close\",\n-          onClick: () => toast.dismiss()\n-        },\n-        id: loadingToast,\n-      });\n-      setIsContentEditorOpen(false);\n-    } catch (error) {\n-      console.error('Error saving content:', error);\n-      toast.error(\"Failed to save content\", {\n-        action: {\n-          label: \"Close\",\n-          onClick: () => toast.dismiss()\n-        },\n-        id: loadingToast,\n-      });\n-    }\n-  };\n-\n-  // Add this component for inline editing\n-  const InlineEdit = ({ \n-    value, \n-    onSave, \n-    isEditing, \n-    setIsEditing, \n-    placeholder,\n-    className = \"\"\n-  }: InlineEditProps) => {\n-    const [tempValue, setTempValue] = useState(value);\n-    \n-    return isEditing ? (\n-      <div className=\"flex items-center gap-2\">\n-        <Input\n-          value={tempValue}\n-          onChange={(e) => setTempValue(e.target.value)}\n-          placeholder={placeholder}\n-          className={className}\n-          autoFocus\n-        />\n-        <Button\n-          size=\"sm\"\n-          variant=\"ghost\"\n-          onClick={() => {\n-            onSave(tempValue);\n-            setIsEditing(false);\n-          }}\n-        >\n-          <Check className=\"h-4 w-4 text-green-500\" />\n-        </Button>\n-        <Button\n-          size=\"sm\"\n-          variant=\"ghost\"\n-          onClick={() => setIsEditing(false)}\n-        >\n-          <X className=\"h-4 w-4 text-red-500\" />\n-        </Button>\n-      </div>\n-    ) : (\n-      <div \n-        className=\"group flex items-center gap-2 cursor-pointer\"\n-        onClick={() => setIsEditing(true)}\n-      >\n-        <span className={className}>{value || placeholder}</span>\n-        <Pencil className=\"h-4 w-4 opacity-0 group-hover:opacity-100 transition-opacity\" />\n-      </div>\n-    );\n-  };\n-\n-  // Add this effect to handle auto-collapse after lesson selection\n-  useEffect(() => {\n-    if (currentLessonId && selectedGradeId && selectedTopicId && selectedSubtopicId) {\n-      setIsSidebarLocked(false);\n-      // Optional: add a slight delay before collapsing\n-      setTimeout(() => setIsSidebarCollapsed(true), 300);\n-    }\n-  }, [currentLessonId, selectedGradeId, selectedTopicId, selectedSubtopicId]);\n-\n-  // Add individual save handlers\n-  // const handleSaveQuestion = async (question: Question, index: number) => {\n-  //   try {\n-  //     // Update status to saving\n-  //     setQuestionSaveStatuses(prev => [\n-  //       ...prev.filter(s => s.id !== question.id),\n-  //       { id: question.id, status: 'saving' }\n-  //     ]);\n-\n-  //     const questionUpsert = {\n-  //       id: question.id,\n-  //       lesson_id: currentLessonId,\n-  //       type: question.type,\n-  //       title: question.data?.prompt || 'Untitled Question',\n-  //       metadata: question.metadata || {},\n-  //       data: {\n-  //         prompt: question.data?.prompt || '',\n-  //         teacherScript: question.data?.teacherScript || '',\n-  //         ...question.data\n-  //       },\n-  //       order_index: index,\n-  //       created_at: new Date().toISOString(),\n-  //       updated_at: new Date().toISOString()\n-  //     };\n-\n-  //     const { error: questionError } = await supabase\n-  //       .from('questions')\n-  //       .upsert(questionUpsert);\n-\n-  //     if (questionError) throw questionError;\n-\n-  //     // Update status to saved\n-  //     setQuestionSaveStatuses(prev => [\n-  //       ...prev.filter(s => s.id !== question.id),\n-  //       { id: question.id, status: 'saved', lastSaved: new Date().toISOString() }\n-  //     ]);\n-\n-  //     toast.success(`Question ${index + 1} saved successfully`);\n-  //   } catch (error) {\n-  //     console.error('Error saving question:', error);\n-  //     setQuestionSaveStatuses(prev => [\n-  //       ...prev.filter(s => s.id !== question.id),\n-  //       { id: question.id, status: 'error' }\n-  //     ]);\n-  //     toast.error(`Failed to save question ${index + 1}`);\n-  //   }\n-  // };\n-\n-  const handleSavePrompt = async (questionId: string, prompt: ExercisePrompt, promptIndex: number) => {\n-    try {\n-      setPromptSaveStatuses(prev => [\n-        ...prev.filter(s => s.id !== prompt.id),\n-        { id: prompt.id || '', status: 'saving' } as SaveStatus\n-      ]);\n-\n-      const promptUpsert = {\n-        id: prompt.id,\n-        question_id: questionId,\n-        text: prompt.text || '',\n-        type: prompt.type || 'text',\n-        narration: prompt.narration || '',\n-        saytext: prompt.saytext || '',\n-        media: prompt.media || [],\n-        order_index: promptIndex,\n-        created_at: prompt.created_at || new Date().toISOString(),\n-        updated_at: new Date().toISOString()\n-      };\n-\n-      const { error: promptError } = await supabase\n-        .from('exercise_prompts')\n-        .upsert(promptUpsert);\n-\n-      if (promptError) throw promptError;\n-\n-      setPromptSaveStatuses(prev => [\n-        ...prev.filter(s => s.id !== prompt.id),\n-        { id: prompt.id || '', status: 'saved', lastSaved: new Date().toISOString() } as SaveStatus\n-      ]);\n-\n-      toast.success(`Prompt ${promptIndex + 1} saved successfully`);\n-    } catch (error) {\n-      console.error('Error saving prompt:', error);\n-      setPromptSaveStatuses(prev => [\n-        ...prev.filter(s => s.id !== prompt.id),\n-        { id: prompt.id || '', status: 'error' } as SaveStatus\n-      ]);\n-      toast.error(`Failed to save prompt ${promptIndex + 1}`);\n-    }\n-  };\n-\n-  // Add effect to mark items as draft when edited\n-  useEffect(() => {\n-    questions.forEach(question => {\n-      if (!questionSaveStatuses.find(s => s.id === question.id)) {\n-        setQuestionSaveStatuses(prev => [\n-          ...prev,\n-          { id: question.id, status: 'draft' }\n-        ]);\n-      }\n-    });\n-  }, [questions]);\n-\n-  // Add this function with your other handlers\n-  const handleRefreshLesson = async () => {\n-    if (!currentLessonId) {\n-      toast.error('No lesson selected');\n-      return;\n-    }\n-    \n-    try {\n-      toast.loading('Refreshing lesson content...', {\n-        action: {\n-          label: \"Close\",\n-          onClick: () => toast.dismiss()\n-        },\n-      });\n-      await handleLessonSelect(currentLessonId);\n-      toast.success('Content refreshed', {\n-        action: {\n-          label: \"Close\",\n-          onClick: () => toast.dismiss()\n-        },\n-      });\n-    } catch (error) {\n-      console.error('Error refreshing lesson:', error);\n-      toast.error('Failed to refresh content', {\n-        action: {\n-          label: \"Close\",\n-          onClick: () => toast.dismiss()\n-        },\n-      });\n-    }\n-  };\n-\n-  // Add this function to handle refresh\n-  const handleRefreshContent = async () => {\n-    if (!currentLessonId) {\n-      toast.error('No lesson selected');\n-      return;\n-    }\n-    \n-    toast.loading('Refreshing content...');\n-    try {\n-      await loadLessonContent(currentLessonId);\n-      toast.success('Content refreshed');\n-    } catch (error) {\n-      console.error('Refresh error:', error);\n-      toast.error('Failed to refresh content');\n-    }\n-  };\n-\n-  // Update the sidebar hover mechanism\n-  const handleSidebarHover = useCallback(\n-    debounce((isHovering: boolean) => {\n-      if (!isSidebarLocked && !isNavigating && !isDropdownOpen) {\n-        if (isHovering || document.activeElement?.closest('.sidebar-content')) {\n-          setIsSidebarCollapsed(false);\n-        } else {\n-          setTimeout(() => {\n-            if (!isDropdownOpen) { // Only collapse if dropdown is closed\n-              setIsSidebarCollapsed(true);\n-            }\n-          }, 300);\n-        }\n-      }\n-    }, 100),\n-    [isSidebarLocked, isNavigating, isDropdownOpen]\n-  );\n-\n-  // Update the sidebar JSX\n-  <div \n-    className={cn(\n-      \"transition-all duration-300 ease-in-out relative\",\n-      isSidebarCollapsed ? \"w-20\" : \"w-80\",\n-      \"flex-shrink-0 group\"\n-    )}\n-    onMouseEnter={() => {\n-      handleSidebarHover(true);\n-      // Immediately expand on mouse enter\n-      if (!isSidebarLocked) {\n-        setIsSidebarCollapsed(false);\n-      }\n-    }}\n-    onMouseLeave={() => {\n-      // Only collapse if not interacting with content\n-      if (!document.activeElement?.closest('.sidebar-content')) {\n-        handleSidebarHover(false);\n-      }\n-    }}\n-    onFocus={() => setIsSidebarCollapsed(false)}\n-  >\n-    <Card className={cn(\n-      \"h-full relative sidebar-content\", // Added sidebar-content class\n-      \"transition-shadow duration-300\",\n-      \"hover:shadow-lg\"\n-    )}>\n-      {/* Rest of sidebar content */}\n-    </Card>\n-  </div>\n-\n-  // Update the sidebar and card styles\n-  return (\n-      <div className=\"container mx-auto py-8\">\n-        {/* Header */}\n-        <div className=\"flex items-center justify-between mb-2\">\n-          {/* ... header content ... */}\n-          <div className=\"flex items-center gap-4\">\n-            <Link href=\"/super-admin\">\n-              <Button variant=\"outline\" className=\"gap-2\">\n-                <ArrowLeft className=\"h-4 w-4\" />\n-                Back\n-              </Button>\n-            </Link>\n-            <div className=\"flex items-center gap-2\">\n-              <h1 className=\"text-2xl font-bold\">Lesson Management</h1>\n-              <Button\n-                variant=\"ghost\"\n-                size=\"icon\"\n-                onClick={handleRefreshLesson}\n-                className=\"ml-2\"\n-                title=\"Refresh lesson content\"\n-              >\n-                <RefreshCw className=\"h-4 w-4\" />\n-              </Button>\n-            </div>\n-            <p className=\"text-sm text-muted-foreground\">Create and manage your educational content</p>\n-          </div>\n-          <div className=\"flex items-center gap-2\">\n-            <Button\n-              variant=\"outline\"\n-              size=\"sm\"\n-              onClick={() => setShowHelpTips(!showHelpTips)}\n-              className=\"gap-2\"\n-            >\n-              {showHelpTips ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n-              {showHelpTips ? 'Hide Tips' : 'Show Tips'}\n-            </Button>\n-          </div>\n-        </div>\n-        \n-        {/* Main content wrapper - Fix the layout here */}\n-        <div className=\"flex gap-6 h-[calc(100vh-200px)]\">\n-          {/* Improved sidebar */}\n-          <div \n-            className={cn(\n-              \"transition-all duration-300 ease-in-out relative\",\n-              isSidebarCollapsed ? \"w-20\" : \"w-80\",\n-              \"flex-shrink-0 group\"\n-            )}\n-            onMouseEnter={() => {\n-              handleSidebarHover(true);\n-              // Immediately expand on mouse enter\n-              if (!isSidebarLocked) {\n-                setIsSidebarCollapsed(false);\n-              }\n-            }}\n-            onMouseLeave={() => {\n-              // Only collapse if not interacting with content\n-              if (!document.activeElement?.closest('.sidebar-content')) {\n-                handleSidebarHover(false);\n-              }\n-            }}\n-            onFocus={() => setIsSidebarCollapsed(false)}\n-          >\n-            <Card className={cn(\n-              \"h-full relative sidebar-content\", // Added sidebar-content class\n-              \"transition-shadow duration-300\",\n-              \"hover:shadow-lg\"\n-            )}>\n-              {/* Lock button - only show after lesson selection */}\n-              {currentLessonId && (\n-                <Button\n-                  variant=\"ghost\"\n-                  size=\"sm\"\n-                  className=\"absolute top-2 right-2 z-10\"\n-                  onClick={() => {\n-                    setIsSidebarLocked(!isSidebarLocked);\n-                    if (!isSidebarLocked) {\n-                      setIsSidebarCollapsed(false);\n-                    }\n-                  }}\n-                >\n-                  {isSidebarLocked ? <Lock className=\"h-4 w-4\" /> : <Unlock className=\"h-4 w-4\" />}\n-                </Button>\n-              )}\n-\n-              {/* Sidebar content with overflow handling */}\n-              <div className={cn(\n-                \"transition-all duration-300 overflow-hidden\",\n-                isSidebarCollapsed ? \"opacity-0\" : \"opacity-100\"\n-              )}>\n-                <Card className=\"h-full\">\n-                  <CardHeader className=\"pb-3\">\n-                    <div className=\"flex items-center justify-between\">\n-                      <CardTitle className=\"text-lg font-semibold\">Content Management</CardTitle>\n-                      <TooltipProvider>\n-                        <Tooltip>\n-                          <TooltipTrigger>\n-                            <HelpCircle className=\"h-4 w-4 text-muted-foreground\" />\n-                          </TooltipTrigger>\n-                          <TooltipContent>\n-                            <p>Manage your educational content here</p>\n-                          </TooltipContent>\n-                        </Tooltip>\n-                      </TooltipProvider>\n-                      </div>\n-                    <CardDescription>Create and manage your lessons</CardDescription>\n-                  </CardHeader>\n-                  <CardContent className=\"space-y-4\">\n-                    {/* View/Edit Mode Toggle */}\n-                    <div className=\"grid grid-cols-2 gap-2 p-1 bg-muted rounded-lg\">\n-                      <Button\n-                        variant={isViewMode ? \"default\" : \"ghost\"}\n-                        size=\"sm\"\n-                        onClick={() => setIsViewMode(true)}\n-                        className=\"w-full\"\n-                      >\n-                        <Eye className=\"h-4 w-4 mr-2\" />\n-                        View\n-                      </Button>\n-                      <Button\n-                        variant={!isViewMode ? \"default\" : \"ghost\"}\n-                        size=\"sm\"\n-                        onClick={() => setIsViewMode(false)}\n-                        className=\"w-full\"\n-                      >\n-                        <Edit className=\"h-4 w-4 mr-2\" />\n-                        Edit\n-                      </Button>\n-                    </div>\n-\n-                    {/* Grade Selection */}\n-                    <div className=\"space-y-2\">\n-                      <div className=\"flex items-center justify-between\">\n-                        <Label htmlFor=\"grade-select\">Grade</Label>\n-                        {isViewMode && (\n-                          <Button variant=\"ghost\" size=\"sm\" onClick={() => setExpandedGrade(expandedGrade ? null : selectedGrade)}>\n-                            {expandedGrade ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n-                          </Button>\n-                        )}\n-                      </div>\n-                      <Select \n-                        value={selectedGradeId || ''}\n-                        onValueChange={handleGradeSelect}\n-                        onOpenChange={(open) => {\n-                          if (open) {\n-                            // Force sidebar to stay open and lock it\n-                            setIsSidebarCollapsed(false);\n-                            setIsSidebarLocked(true);\n-                          }\n-                        }}\n-                      >\n-                        <SelectTrigger \n-                          id=\"grade-select\" \n-                          className=\"w-full\"\n-                          onClick={(e) => {\n-                            e.stopPropagation(); // Prevent event bubbling\n-                            setIsSidebarCollapsed(false);\n-                            setIsSidebarLocked(true);\n-                          }}\n-                        >\n-                          <SelectValue placeholder=\"Select Grade\" />\n-                        </SelectTrigger>\n-                        <SelectContent \n-                          onCloseAutoFocus={(e) => {\n-                            e.preventDefault();\n-                            setIsSidebarLocked(true);\n-                            setIsSidebarCollapsed(false);\n-                          }}\n-                        >\n-                          {grades.map((grade: Grade) => (\n-                            <SelectItem \n-                              key={`grade-${grade.id || 'new'}`} \n-                              value={grade.id || ''}\n-                              onMouseDown={(e) => {\n-                                e.preventDefault();\n-                                e.stopPropagation();\n-                              }}\n-                            >\n-                              <div className=\"flex items-center gap-2\">\n-                                <BookOpen className=\"h-4 w-4 text-primary\" />\n-                                {grade.name}\n-                              </div>\n-                            </SelectItem>\n-                          ))}\n-                        </SelectContent>\n-                      </Select>\n-                      {!isViewMode && (\n-                      <Button \n-                        variant=\"outline\" \n-                        size=\"sm\" \n-                        className=\"w-full gap-2\"\n-                        onClick={() => setModalState({ ...modalState, showAddGrade: false })}\n-                      >\n-                        <Plus className=\"h-4 w-4\" />\n-                        Add New Grade\n-                      </Button>\n-                      )}\n-                    </div>\n-\n-                    {/* Content Tree View in View Mode */}\n-                    {isViewMode && selectedGrade && (\n-  <div className=\"flex h-full\">\n-    {/* Left Plane - Only Grade Selection */}\n-    <div className=\"w-64 border-r p-4\">\n-      <Select\n-        value={selectedGrade}\n-        onValueChange={setSelectedGrade}\n-      >\n-        <SelectTrigger>\n-          <SelectValue placeholder=\"Select Grade\" />\n-        </SelectTrigger>\n-        <SelectContent>\n-          {grades.map((grade) => (\n-            <SelectItem key={grade.id} value={grade.id}>\n-              {grade.name}\n-            </SelectItem>\n-          ))}\n-        </SelectContent>\n-      </Select>\n-    </div>\n-\n-    {/* Right Plane - Nested Content View */}\n-    <div className=\"flex-1 p-6 overflow-auto\">\n-      <div className=\"space-y-6\">\n-        {topics.map((topic) => (\n-          <Card \n-            key={topic.id} \n-            className=\"border-l-4 border-l-primary/40 hover:border-l-primary transition-all duration-200\"\n-          >\n-            <CardHeader className=\"py-4\">\n-              <div className=\"flex items-center justify-between\">\n-                <div className=\"flex items-center gap-2\">\n-                  <Layers className=\"h-5 w-5 text-primary\" />\n-                  <div>\n-                    <h3 className=\"font-medium text-lg\">{topic.title}</h3>\n-                    <p className=\"text-sm text-muted-foreground\">\n-                      {subtopics.filter(s => s.topic_id === topic.id).length} Subtopics\n-                    </p>\n-                  </div>\n-                </div>\n-                <Button\n-                  variant=\"ghost\"\n-                  size=\"sm\"\n-                  onClick={async () => {\n-                    const { canDelete, message } = await checkDeletability('topic', topic.id);\n-                    if (!canDelete) {\n-                      toast.error(message);\n-                      return;\n-                    }\n-                    setItemToDelete({\n-                      id: topic.id,\n-                      type: 'topic',\n-                      title: topic.title\n-                    });\n-                    setDeleteDialogOpen(true);\n-                  }}\n-                >\n-                  <Trash className=\"h-4 w-4\" />\n-                </Button>\n-              </div>\n-\n-              <div className=\"mt-4 pl-6 space-y-4\">\n-                {subtopics\n-                  .filter(subtopic => subtopic.topic_id === topic.id)\n-                  .map((subtopic) => (\n-                    <Card key={subtopic.id} className=\"border-l-2 border-l-primary/20\">\n-                      <CardHeader className=\"py-3\">\n-                        <div className=\"flex items-center justify-between\">\n-                          <div className=\"flex items-center gap-2\">\n-                            <BookOpen className=\"h-4 w-4 text-primary\" />\n-                            <div>\n-                              <h4 className=\"font-medium\">{subtopic.title}</h4>\n-                              <p className=\"text-sm text-muted-foreground\">\n-                                {lessons.filter(l => l.subtopic_id === subtopic.id).length} Lessons\n-                              </p>\n-                            </div>\n-                          </div>\n-                          <Button\n-                            variant=\"ghost\"\n-                            size=\"sm\"\n-                            onClick={async () => {\n-                              const { canDelete, message } = await checkDeletability('subtopic', subtopic.id);\n-                              if (!canDelete) {\n-                                toast.error(message);\n-                                return;\n-                              }\n-                              setItemToDelete({\n-                                id: subtopic.id,\n-                                type: 'subtopic',\n-                                title: subtopic.title\n-                              });\n-                              setDeleteDialogOpen(true);\n-                            }}\n-                          >\n-                            <Trash className=\"h-4 w-4\" />\n-                          </Button>\n-                        </div>\n-\n-                        <div className=\"mt-2 pl-6 space-y-2\">\n-                          {lessons\n-                            .filter(lesson => lesson.subtopic_id === subtopic.id)\n-                            .map((lesson) => (\n-                              <Card key={lesson.id} className=\"border-l border-l-primary/10\">\n-                                <CardHeader className=\"py-2\">\n-                                  <div className=\"flex items-center justify-between\">\n-                                    <div className=\"flex items-center gap-2\">\n-                                      <div>\n-                                        <h5 className=\"text-sm font-medium\">{lesson.title}</h5>\n-                                        <div className=\"flex items-center gap-2 mt-1\">\n-                                          <Badge variant=\"secondary\" className=\"text-xs\">\n-                                            {lesson.duration || 0} mins\n-                                          </Badge>\n-                                          <Badge variant=\"secondary\" className=\"text-xs\">\n-                                            {lesson.questions?.length || 0} Questions\n-                                          </Badge>\n-                                          {(!lesson.questions || lesson.questions.length === 0) && (\n-                                            <Badge variant=\"outline\" className=\"text-yellow-500 text-xs\">\n-                                              Empty\n-                                            </Badge>\n-                                          )}\n-                                        </div>\n-                                      </div>\n-                                    </div>\n-                                    <Button\n-                                      variant=\"ghost\"\n-                                      size=\"sm\"\n-                                      onClick={async () => {\n-                                        const { canDelete, message } = await checkDeletability('lesson', lesson.id);\n-                                        if (!canDelete) {\n-                                          toast.error(message);\n-                                          return;\n-                                        }\n-                                        setItemToDelete({\n-                                          id: lesson.id,\n-                                          type: 'lesson',\n-                                          title: lesson.title\n-                                        });\n-                                        setDeleteDialogOpen(true);\n-                                      }}\n-                                    >\n-                                      <Trash className=\"h-4 w-4\" />\n-                                    </Button>\n-                                  </div>\n-                                </CardHeader>\n-                              </Card>\n-                            ))}\n-                        </div>\n-                      </CardHeader>\n-                    </Card>\n-                  ))}\n-              </div>\n-            </CardHeader>\n-          </Card>\n-        ))}\n-      </div>\n-    </div>\n-  </div>\n-)}\n-\n-                    {/* Regular Edit Mode Content */}\n-                    {!isViewMode && (\n-                      <>\n-                        {/* Existing Topic, Subtopic, and Lesson Selection UI */}\n-                      {/* Topic Selection */}\n-                        {selectedGradeId && (\n-                      <div className=\"space-y-2\">\n-                        <div className=\"flex items-center justify-between\">\n-                        <Label htmlFor=\"topic-select\">Topic</Label>\n-                        </div>\n-                        <Select \n-                              value={selectedTopicId || ''} \n-                              onValueChange={handleTopicSelect}\n-                        >\n-                          <SelectTrigger id=\"topic-select\" className=\"w-full\">\n-                            <SelectValue placeholder=\"Select Topic\" />\n-                          </SelectTrigger>\n-                          <SelectContent>\n-                                {topics.map((topic: Topic) => (\n-                                  <SelectItem \n-                                    key={`topic-${topic.id || 'new'}`} \n-                                    value={topic.id || ''}\n-                                  >\n-                                  <div className=\"flex items-center gap-2\">\n-                                  <Layers className=\"h-4 w-4 text-primary\" />\n-                                    {topic.title}\n-                                  </div>\n-                                </SelectItem>\n-                              ))}\n-                          </SelectContent>\n-                        </Select>\n-                        <Button \n-                          variant=\"outline\" \n-                          size=\"sm\" \n-                          className=\"w-full gap-2\"\n-                          onClick={() => setModalState({ ...modalState, showAddTopic: true })}\n-                        >\n-                          <Plus className=\"h-4 w-4\" />\n-                          Add New Topic\n-                        </Button>\n-                      </div>\n-                    )}\n-\n-                    {/* Subtopic Selection */}\n-                        {selectedTopicId && (\n-                      <div className=\"space-y-2\">\n-                        <div className=\"flex items-center justify-between\">\n-                        <Label htmlFor=\"subtopic-select\">Subtopic</Label>\n-                        </div>\n-                        <Select \n-                              value={selectedSubtopicId || ''} \n-                              onValueChange={handleSubtopicSelect}\n-                        >\n-                          <SelectTrigger id=\"subtopic-select\" className=\"w-full\">\n-                            <SelectValue placeholder=\"Select Subtopic\" />\n-                          </SelectTrigger>\n-                          <SelectContent>\n-                                {subtopics\n-                                  .filter(subtopic => subtopic.id)\n-                                  .map((subtopic, index) => (\n-                                    <SelectItem \n-                                      key={subtopic.id || `subtopic-${index}`}\n-                                      value={subtopic.id || ''}\n-                                    >\n-                                      {subtopic.title || 'Untitled Subtopic'}\n-                                    </SelectItem>\n-                                  ))}\n-                          </SelectContent>\n-                        </Select>\n-                        {!isViewMode && (\n-                          <Button \n-                            variant=\"outline\" \n-                            size=\"sm\" \n-                            className=\"w-full gap-2\"\n-                            onClick={() => setModalState({ ...modalState, showAddSubtopic: true })}\n-                          >\n-                            <Plus className=\"h-4 w-4\" />\n-                            Add New Subtopic\n-                          </Button>\n-                        )}\n-                      </div>\n-                    )}\n-\n-                    {/* Lesson Selection */}\n-                        {selectedSubtopicId && (\n-                      <div className=\"space-y-2\">\n-                        <div className=\"flex items-center justify-between\">\n-                          <Label htmlFor=\"lesson-select\">Lesson</Label>\n-                        </div>\n-                          <Select \n-                            value={currentLessonId || ''} \n-                            onValueChange={handleLessonSelect}\n-                            onOpenChange={(open) => {\n-                              setIsDropdownOpen(open);\n-                              if (open) {\n-                                setIsSidebarCollapsed(false);\n-                                setIsSidebarLocked(true);\n-                              } else {\n-                                // Small delay before unlocking to prevent immediate collapse\n-                                setTimeout(() => {\n-                                  setIsSidebarLocked(false);\n-                                }, 100);\n-                              }\n-                            }}\n-                          >\n-                            <SelectTrigger \n-                              id=\"lesson-select\" \n-                              className=\"w-full\"\n-                              onClick={(e) => {\n-                                e.stopPropagation();\n-                                setIsSidebarCollapsed(false);\n-                                setIsSidebarLocked(true);\n-                              }}\n-                            >\n-                              <SelectValue placeholder=\"Select Lesson\" />\n-                            </SelectTrigger>\n-                            <SelectContent>\n-                              {lessons\n-                                .filter((lesson): lesson is Lesson => lesson !== undefined && lesson !== null)\n-                                .map((lesson: Lesson) => (\n-                                  <SelectItem \n-                                    key={`lesson-${lesson.id || 'new'}`} \n-                                    value={lesson.id || ''}\n-                                  >\n-                                    <div className=\"flex items-center gap-2\">\n-                                      <BookOpen className=\"h-4 w-4 text-primary\" />\n-                                      {lesson.title || 'Untitled Lesson'}\n-                                    </div>\n-                                  </SelectItem>\n-                                ))}\n-                            </SelectContent>\n-                          </Select>\n-                    <Button \n-                            variant=\"outline\" \n-                            size=\"sm\" \n-                            className=\"w-full gap-2\"\n-                        onClick={() => setModalState({ ...modalState, showAddLesson: true })}\n-                          >\n-                            <Plus className=\"h-4 w-4\" />\n-                            Add New Lesson\n-                    </Button>\n-                      </div>\n-                        )}\n-                      </>\n-                    )}\n-                  </CardContent>\n-                </Card>\n-              </div>\n-\n-              {/* Collapsed view */}\n-              {isSidebarCollapsed && (\n-                <div className=\"absolute inset-0 flex flex-col items-center pt-12 gap-4\">\n-                  <BookOpen className=\"h-6 w-6 text-muted-foreground\" />\n-                  <div className=\"w-px h-full bg-border\" />\n-                </div>\n-              )}\n-            </Card>\n-          </div>\n-        \n-\n-          {/* Right Content Area */}\n-          <div className=\"flex-1 overflow-y-auto\">\n-            {isNavigating ? (\n-              <div className=\"flex items-center justify-center h-[400px]\">\n-                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n-                <span className=\"ml-3\">Loading...</span>\n-              </div>\n-            ) : (\n-              <>\n-                {!selectedGradeId ? (\n-                  // Question Types Display Section\n-                  <div className=\"space-y-6\">\n-                    <Card>\n-                      <CardHeader>\n-                        <div className=\"flex items-center justify-between\">\n-                          <div>\n-                            <CardTitle className=\"text-xl font-semibold\">Available Question Types</CardTitle>\n-                            <CardDescription>Browse through different question formats and examples</CardDescription>\n-                          </div>\n-                          <TooltipProvider>\n-                            <Tooltip>\n-                              <TooltipTrigger>\n-                                <HelpCircle className=\"h-5 w-5 text-muted-foreground\" />\n-                              </TooltipTrigger>\n-                              <TooltipContent>\n-                                <p>Click on each type to see detailed examples</p>\n-                              </TooltipContent>\n-                            </Tooltip>\n-                          </TooltipProvider>\n-                        </div>\n-                      </CardHeader>\n-                      <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n-                        {Object.entries(QUESTION_TYPES).map(([type, details]) => (\n-                          <Card key={type} className=\"cursor-pointer hover:bg-accent/50 transition-colors\">\n-                            <CardHeader className=\"p-4\">\n-                              <div className=\"flex items-center justify-between mb-2\">\n-                                <Badge variant=\"outline\" className=\"bg-primary/5 text-lg\">\n-                                  {details.label}\n-                                </Badge>\n-                              </div>\n-                              <CardDescription className=\"text-sm\">\n-                                {details.description || 'No description available'}\n-                              </CardDescription>\n-                              <div className=\"mt-4\">\n-                                <div className=\"text-sm font-medium mb-2\">Example:</div>\n-                                <div className=\"p-3 rounded-md bg-muted/50 text-sm\">\n-                                  {type === 'multiple-choice' && (\n-                                    <>\n-                                      <div className=\"font-medium mb-2\">Q: What is the capital of France?</div>\n-                                      <div className=\"space-y-1 pl-4\">\n-                                        <div>A) Paris</div>\n-                                        <div>B) London</div>\n-                                        <div>C) Berlin</div>\n-                                        <div>D) Madrid</div>\n-                                      </div>\n-                                    </>\n-                                  )}\n-                                  {type === 'fill-in-blank' && (\n-                                    <div className=\"space-y-2\">\n-                                      <div>Complete the sentence:</div>\n-                                      <div>The sun rises in the <span className=\"bg-primary/20 px-2 rounded\">_____</span> and sets in the <span className=\"bg-primary/20 px-2 rounded\">_____</span>.</div>\n-                                    </div>\n-                                  )}\n-                                  {type === 'true-false' && (\n-                                    <div className=\"space-y-2\">\n-                                      <div className=\"font-medium\">Statement:</div>\n-                                      <div>The Earth is flat.</div>\n-                                      <div className=\"mt-2\">\n-                                        <Badge variant=\"outline\" className=\"mr-2\">True</Badge>\n-                                        <Badge variant=\"outline\">False</Badge>\n-                                      </div>\n-                                    </div>\n-                                  )}\n-                                  {type === 'matching' && (\n-                                    <div className=\"space-y-2\">\n-                                      <div className=\"font-medium mb-2\">Match the countries with their capitals:</div>\n-                                      <div className=\"grid grid-cols-2 gap-4\">\n-                                        <div>\n-                                          1. France<br />\n-                                          2. Germany<br />\n-                                          3. Spain\n-                                        </div>\n-                                        <div>\n-                                          • Berlin<br />\n-                                          • Paris<br />\n-                                          • Madrid\n-                                        </div>\n-                                      </div>\n-                                    </div>\n-                                  )}\n-                                  {type === 'ordering' && (\n-                                    <div className=\"space-y-2\">\n-                                      <div className=\"font-medium mb-2\">Arrange in chronological order:</div>\n-                                      <div className=\"space-y-1\">\n-                                        <Badge variant=\"outline\" className=\"mr-2\">1</Badge>World War II<br />\n-                                        <Badge variant=\"outline\" className=\"mr-2\">2</Badge>Industrial Revolution<br />\n-                                        <Badge variant=\"outline\" className=\"mr-2\">3</Badge>Renaissance\n-                                      </div>\n-                                    </div>\n-                                  )}\n-                                  {type === 'short-answer' && (\n-                                    <div className=\"space-y-2\">\n-                                      <div className=\"font-medium\">Question:</div>\n-                                      <div>Explain the water cycle in 2-3 sentences.</div>\n-                                      <div className=\"mt-2 p-2 border border-dashed rounded-md border-primary/30\">\n-                                        Answer space\n-                                      </div>\n-                                    </div>\n-                                  )}\n-                                </div>\n-                              </div>\n-                            </CardHeader>\n-                          </Card>\n-                        ))}\n-                      </CardContent>\n-                    </Card>\n-                  </div>\n-                ) : isViewMode ? (\n-                  <div className=\"space-y-6\">\n-                    {selectedGradeId ? (\n-                      <div className=\"grid grid-cols-1 gap-6\">\n-                        {topics.map((topic) => (\n-                          <Card key={topic.id} className=\"border-l-4 border-l-primary\">\n-                            <CardHeader>\n-                              <div className=\"flex items-center justify-between\">\n-                                <h3 className=\"text-lg font-semibold\">{topic.title}</h3>\n-                              </div>\n-                            </CardHeader>\n-                            <CardContent>\n-                              <div className=\"space-y-4\">\n-                                {subtopics\n-                                  .filter(subtopic => subtopic.topic_id === topic.id)\n-                                  .map((subtopic, index) => (\n-                                    <div key={subtopic.id || `subtopic-${index}`} className=\"border-l-2 pl-4\">\n-                                      <h4 className=\"text-md font-medium mb-2\">{subtopic.name || 'Untitled Subtopic'}</h4>\n-                                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n-                                        {lessons\n-                                          .filter(lesson => lesson.subtopic_id === subtopic.id)\n-                                          .map((lesson) => (\n-                                            <Card \n-                                              key={lesson.id} \n-                                              className={cn(\n-                                                \"cursor-pointer transition-all duration-200\",\n-                                                \"hover:shadow-md hover:translate-y-[-2px]\",\n-                                                \"hover:bg-accent/50 hover:border-primary/50\",\n-                                                \"active:translate-y-[0px]\",\n-                                                currentLessonId === lesson.id && \"border-primary bg-accent/50 shadow-md\",\n-                                                \"group\" // Enable group hover effects\n-                                              )}\n-                                              onClick={() => handleLessonSelect(lesson.id)}\n-                                            >\n-                                              <CardHeader className=\"p-4\">\n-                                                <div className=\"flex flex-col gap-2\">\n-                                                  <div className=\"flex items-center justify-between\">\n-                                                    <div className=\"flex items-center gap-2\">\n-                                                      <BookOpen className={cn(\n-                                                        \"h-4 w-4 text-primary\",\n-                                                        \"transition-transform duration-200\",\n-                                                        \"group-hover:scale-110\"\n-                                                      )} />\n-                                                      <span className=\"font-medium\">{lesson.title}</span>\n-                                                    </div>\n-                                                    <Button\n-                                                      variant=\"outline\"\n-                                                      size=\"sm\"\n-                                                      className={cn(\n-                                                        \"opacity-0 group-hover:opacity-100\",\n-                                                        \"transition-all duration-200\",\n-                                                        \"hover:bg-primary hover:text-primary-foreground\"\n-                                                      )}\n-                                                      disabled={!lesson.content || currentLessonId !== lesson.id}\n-                                                      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n-                                                        e.stopPropagation();\n-                                                        window.location.href = `/teacher/lessons/${lesson.id}`;\n-                                                      }}\n-                                                    >\n-                                                      Start Lesson\n-                                                    </Button>\n-                                                  </div>\n-                                                  <div className=\"flex items-center gap-2\">\n-                                                    <Badge variant=\"outline\" className={cn(\n-                                                      \"bg-primary/5\",\n-                                                      \"transition-colors duration-200\",\n-                                                      \"group-hover:bg-primary/10\"\n-                                                    )}>\n-                                                      {lesson.questions?.length || 0} Questions\n-                                                    </Badge>\n-                                                    <Badge variant=\"outline\" className={cn(\n-                                                      \"bg-primary/5\",\n-                                                      \"transition-colors duration-200\",\n-                                                      \"group-hover:bg-primary/10\"\n-                                                    )}>\n-                                                      {lesson.activities?.length || 0} Activities\n-                                                    </Badge>\n-                                                  </div>\n-                                                </div>\n-                                              </CardHeader>\n-                                            </Card>\n-                                          ))}\n-                                      </div>\n-                                    </div>\n-                                  ))}\n-                              </div>\n-                            </CardContent>\n-                          </Card>\n-                        ))}\n-                      </div>\n-                    ) : (\n-                      <div className=\"text-center py-20\">\n-                        <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n-                        <h3 className=\"text-lg font-medium\">Select a Grade</h3>\n-                        <p className=\"text-sm text-muted-foreground\">\n-                          Choose a grade from the left panel to start managing content\n-                        </p>\n-                      </div>\n-                    )}\n-                  </div>\n-                ) : (\n-                  // Edit Mode Content\n-                  <div className=\"space-y-4\">\n-                    {/* Lesson Title */}\n-                    <Card>\n-                      <CardHeader>\n-                        <div className=\"flex items-center justify-between mb-4\">\n-                          <h2 className=\"text-2xl font-bold\">Lesson Content</h2>\n-                                                    <Button\n-                                                      variant=\"outline\"\n-                                                      size=\"sm\"\n-                            onClick={() => setIsContentEditorOpen(true)}\n-                          >\n-                            <Pencil className=\"h-4 w-4 mr-2\" />\n-                            Edit Content\n-                          </Button>\n-                        </div>\n-                      </CardHeader>\n-                      <CardContent className=\"space-y-4\">\n-                        {/* Lesson Title */}\n-                        <div className=\"flex items-center justify-between\">\n-                          <div className=\"space-y-1\">\n-                            <Label>Lesson Title</Label>\n-                            <InlineEdit\n-                              value={lessonTitle}\n-                              onSave={async (newTitle) => {\n-                                setLessonTitle(newTitle);\n-                                await handleSaveLesson();\n-                              }}\n-                              isEditing={isEditingTitle}\n-                              setIsEditing={setIsEditingTitle}\n-                              placeholder=\"Enter lesson title\"\n-                              className=\"text-lg font-medium\"\n-                            />\n-                          </div>\n-                        </div>\n-\n-                        {/* Content Editor and Display */}\n-                        <div className=\"space-y-4\">\n-                          {isContentEditorOpen ? (\n-                            <div className=\"border rounded-lg p-4\">\n-                              <div className=\"mb-4\">\n-                                <Label>Content Heading</Label>\n-                                <InlineEdit\n-                                  value={contentHeading}\n-                                  onSave={(newHeading) => setContentHeading(newHeading)}\n-                                  isEditing={isEditingHeading}\n-                                  setIsEditing={setIsEditingHeading}\n-                                  placeholder=\"Add content heading\"\n-                                  className=\"text-base text-muted-foreground\"\n-                                />\n-                              </div>\n-                              <RichTextEditor\n-                                value={lessonContent}\n-                                onChange={setLessonContent}\n-                                onSave={async (content) => {\n-                                  await handleContentSave(content);\n-                                  setIsContentEditorOpen(false);\n-                                }}\n-                                placeholder=\"Add lesson content here...\"\n-                              />\n-                            </div>\n-                          ) : lessonContent ? (\n-                            <div className=\"prose prose-sm max-w-none\">\n-                              {contentHeading && (\n-                                <h3 className=\"text-lg font-semibold mb-2\">{contentHeading}</h3>\n-                              )}\n-                              <div dangerouslySetInnerHTML={{ __html: lessonContent }} />\n-                            </div>\n-                          ) : (\n-                            <div className=\"text-center py-8 text-muted-foreground\">\n-                              Click 'Edit Content' to add lesson content\n-                            </div>\n-                          )}\n-                        </div>\n-                      </CardContent>\n-                    </Card>\n-\n-                    {/* Tabs */}\n-                    <Tabs defaultValue=\"questions\" className=\"mt-6\">\n-                    <TabsList className=\"grid w-full grid-cols-2\">\n-                        <TabsTrigger value=\"questions\">\n-                          <MessageSquare className=\"h-4 w-4 mr-2\" />\n-                        Questions\n-                      </TabsTrigger>\n-                        <TabsTrigger value=\"activities\">\n-                          <ActivityIcon className=\"h-4 w-4 mr-2\" />\n-                        Activities\n-                      </TabsTrigger>\n-                    </TabsList>\n-\n-                      {/* Questions Tab */}\n-                      <TabsContent value=\"questions\" className=\"space-y-4\">\n-                      <CardHeader>\n-                          <CardDescription>Add and manage questions for this lesson</CardDescription>\n-                      </CardHeader>\n-                        {questions.map((question, index) => (\n-                          <Card key={index} className={cn(\n-                            \"relative border-l-4 transition-colors duration-200\",\n-                            expandedQuestion === index ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\n-                          )}>\n-                            <CardHeader className=\"pb-3\">\n-                              <div className=\"flex items-center justify-between gap-4\">\n-                                <div className=\"flex items-center gap-3 min-w-0 flex-1\">\n-                                  <div className=\"flex items-center gap-2 flex-shrink-0\">\n-                                    <span className=\"px-2 py-1 bg-primary/10 rounded-md text-sm font-semibold text-primary whitespace-nowrap\">\n-                                      Q {index + 1}\n-                                    </span>\n-                                    <Badge variant=\"outline\" className=\"whitespace-nowrap\">\n-                                      {QUESTION_TYPES[question.type as keyof typeof QUESTION_TYPES]?.label || question.type}\n-                                    </Badge>\n-                                    {question.isDraft && (\n-                                      <Badge variant=\"secondary\" className=\"whitespace-nowrap\">Draft</Badge>\n-                                )}\n-                                  </div>\n-                                      {expandedQuestion !== index && (\n-                                        <div className=\"text-sm text-muted-foreground truncate\">\n-                                          {question.title || 'No question text'} - {question.data?.content || 'No question texts'}\n-                                        </div>\n-                                      )}\n-                                    </div>\n-                                    <div className=\"flex items-center gap-2 flex-shrink-0\">\n-                                      <Button\n-                                        variant=\"ghost\"\n-                                        size=\"sm\"\n-                                        onClick={() => handleQuestionExpand(index)}\n-                                      >\n-                                        {expandedQuestion === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n-                                      </Button>\n-                                      <Button\n-                                        variant=\"ghost\"\n-                                        size=\"sm\"\n-                                        onClick={() => handleRemoveQuestion(index)}\n-                                      >\n-                                        <Trash2 className=\"h-4 w-4 text-destructive\" />\n-                                      </Button>\n-                                    </div>\n-                                  </div>\n-                                </CardHeader>\n-                                {expandedQuestion === index && (\n-                                  <CardContent>\n-                                    <QuestionForm\n-                                      key={index}\n-                                      question={{ \n-                                        ...question, \n-                                        lesson_id: currentLessonId || '',\n-                                        type: isValidQuestionType(question.type) ? question.type : 'speaking',\n-                                        data: {\n-                                          prompt: question.data?.prompt ?? '',\n-                                          teacher_script: question.data?.teacher_script ?? '',\n-                                          followup_prompt: question.data?.followup_prompt ?? [],\n-                                          sample_answer: question.data?.sample_answer ?? '',\n-                                          \n-                                        } \n-                                      }}\n-                                      index={index}\n-                                      onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\n-                                        await handleUpdateQuestion(index, {\n-                                          ...updatedQuestion,\n-                                          data: {\n-                                            prompt: updatedQuestion.data?.prompt ?? '',\n-                                            teacher_script: updatedQuestion.data?.teacher_script ?? '',\n-                                            followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\n-                                            sample_answer: updatedQuestion.data?.sample_answer ?? '',\n-                                            metadata: updatedQuestion.metadata ?? {},\n-                                            },\n-                                            correct_answer: updatedQuestion.correct_answer ?? '',\n-                                            content: updatedQuestion.content ?? ''  // Add default value\n-                                        });\n-                                      }}\n-                                      onRemove={handleRemoveQuestion}\n-                                      onAddExercisePrompt={handleAddExercisePrompt}\n-                                      onRemoveExercisePrompt={handleRemoveExercisePrompt}\n-                                      onExercisePromptChange={handleExercisePromptChange}\n-                                    /><Button \n-                                    size=\"sm\"\n-                                    variant=\"outline\"\n-                                    onClick={() => handleSaveQuestion(question, index)}\n-                                    className=\"ml-2\"\n-                                  >\n-                                    {questionSaveStatuses.find(s => s.id === question.id)?.status === 'saving' ? (\n-                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n-                                    ) : (\n-                                      <Save className=\"h-4 w-4 mr-2\" />\n-                                    )}\n-                                    Save Question\n-                                                    </Button>\n-                                    {/* Exercise Prompts with Save Buttons */}\n-                                    {question.exercisePrompts?.map((prompt, promptIndex) => (\n-                                      <div key={`${question.id}-prompt-${promptIndex}`} className=\"mt-4\"> {/* Updated key */}\n-                                        <div className=\"flex items-center justify-between mb-2\">\n-                                          <h4 className=\"text-sm font-medium\">Exercise Prompt {promptIndex + 1}</h4>\n-                                          <div className=\"flex items-center gap-2\">\n-                                            <TooltipProvider>\n-                                              <Tooltip>\n-                                                <TooltipTrigger asChild>\n-                                                  <Button\n-                                                    size=\"sm\"\n-                                                    variant=\"outline\"\n-                                                    onClick={() => handleSavePrompt(question.id, prompt, promptIndex)}\n-                                                    disabled={promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving'}\n-                                                  >\n-                                                    {promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving' ? (\n-                                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n-                                                    ) : (\n-                                                      <Save className=\"h-4 w-4 mr-2\" />\n-                                                    )}\n-                                                    Save Prompt\n-                                                  </Button>\n-                                                </TooltipTrigger>\n-                                                <TooltipContent>\n-                                                  {`Status: ${promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}`}\n-                                                </TooltipContent>\n-                                              </Tooltip>\n-                                            </TooltipProvider>\n-                                            <Badge variant={\n-                                              promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saved'\n-                                                ? 'secondary'\n-                                                : promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'error'\n-                                                ? 'destructive'\n-                                                : 'default'\n-                                            }>\n-                                              {promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}\n-                                            </Badge>\n-                                                  </div>\n-                                        </div>\n-                                        <ExercisePromptCard\n-                                          key={prompt.id} // Add a unique key here\n-                                          prompt={prompt}\n-                                          promptIndex={promptIndex}\n-                                          onRemove={() => handleRemoveExercisePrompt(index, promptIndex)}\n-                                          onUpdate={(updatedPrompt: ExercisePrompt) => {\n-                                            // Prevent duplicate updates\n-                                            if (updatedPrompt.id === prompt.id) {\n-                                              handleExercisePromptChange(index, promptIndex, updatedPrompt);\n-                                            }\n-                                          }}\n-                                        />\n-                                      </div>\n-                                    ))}\n-                                  </CardContent>\n-                                )}\n-                              </Card>\n-                            ))}\n-\n-                            {/* Add Question Button */}\n-                            <div className=\"flex items-center justify-between\">\n-                              <QuestionTypeSelect \n-                                value={selectedQuestionType} \n-                                onChange={handleQuestionTypeChange}\n-                              />\n-                                        <Button\n-                                          onClick={handleAddQuestion}\n-                                          disabled={!selectedQuestionType}\n-                                        >\n-                                <Plus className=\"h-4 w-4 mr-2\" />\n-                                          Add Question\n-                                        </Button>\n-                                      </div>\n-                      </TabsContent>\n-\n-                      {/* Activities Tab */}\n-                      <TabsContent value=\"activities\" className=\"space-y-4\">\n-                      <CardHeader>\n-                          <CardDescription>Add and manage activities for this lesson</CardDescription>\n-                      </CardHeader>\n-                        {activities.map((activity, index) => (\n-                          <Card key={index}>\n-                            <CardHeader className=\"pb-3\">\n-                              <div className=\"flex items-center justify-between\">\n-                                  <div className=\"flex items-center gap-2\">\n-                                  <Badge variant=\"outline\">Activity {index + 1}</Badge>\n-                                  </div>\n-                                <div className=\"flex items-center gap-2\">\n-                                  <Button\n-                                    variant=\"ghost\"\n-                                    size=\"sm\"\n-                                    onClick={() => handleActivityExpand(index)}\n-                                  >\n-                                    {expandedActivity === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n-                                  </Button>\n-                                  <Button\n-                                    variant=\"ghost\"\n-                                    size=\"sm\"\n-                                    onClick={() => handleRemoveActivity(index)}\n-                                  >\n-                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\n-                                  </Button>\n-                                </div>\n-                              </div>\n-                            </CardHeader>\n-                            {expandedActivity === index && (\n-                              <CardContent>\n-                                <div className=\"space-y-4\">\n-                                  <div className=\"space-y-2\">\n-                                    <Label>Instructions</Label>\n-                                    <Textarea\n-                                      value={activity.instructions}\n-                                      onChange={(e) => handleUpdateActivity(index, {\n-                                        ...activity,\n-                                        instructions: e.target.value\n-                                      })}\n-                                      placeholder=\"Enter activity instructions\"\n-                                    />\n-                                  </div>\n-                                    \n-                                    {/* Media Section */}\n-                                    <div className=\"space-y-2\">\n-                                      <Label>Media</Label>\n-                                      {activity.media?.map((media, mediaIndex) => (\n-                                        <div key={mediaIndex} className=\"flex items-center gap-2\">\n-                                          <Input\n-                                            value={media.url}\n-                                            onChange={(e) => {\n-                                              const updatedMedia = [...(activity.media || [])];\n-                                              updatedMedia[mediaIndex] = {\n-                                                type: media.type,\n-                                                url: e.target.value\n-                                              };\n-                                              handleUpdateActivity(index, {\n-                                                ...activity,\n-                                                media: updatedMedia\n-                                              });\n-                                            }}\n-                                            placeholder=\"Media URL\"\n-                                          />\n-                                          <Select\n-                                            value={media.type}\n-                                            onValueChange={(value) => {\n-                                              const updatedMedia = [...(activity.media || [])];\n-                                              updatedMedia[mediaIndex] = {\n-                                                type: value as 'image' | 'gif' | 'video',\n-                                                url: media.url\n-                                              };\n-                                              handleUpdateActivity(index, {\n-                                                ...activity,\n-                                                media: updatedMedia\n-                                              });\n-                                            }}\n-                                          >\n-                                            <SelectTrigger className=\"w-[120px]\">\n-                                              <SelectValue placeholder=\"Type\" />\n-                                            </SelectTrigger>\n-                                            <SelectContent>\n-                                              <SelectItem value=\"image\">Image</SelectItem>\n-                                              <SelectItem value=\"gif\">GIF</SelectItem>\n-                                              <SelectItem value=\"video\">Video</SelectItem>\n-                                            </SelectContent>\n-                                          </Select>\n-                                <Button\n-                                            variant=\"ghost\"\n-                                            size=\"sm\"\n-                                  onClick={() => {\n-                                              const updatedMedia = (activity.media || []).filter((_, i) => i !== mediaIndex);\n-                                              handleUpdateActivity(index, {\n-                                                ...activity,\n-                                                media: updatedMedia\n-                                          });\n-                                          }}\n-                                  >\n-                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\n-                                  </Button>\n-                                </div>\n-                                        ))}\n-                                  <Button\n-                                    variant=\"outline\"\n-                                    size=\"sm\"\n-                                            onClick={() => {\n-                                              handleUpdateActivity(index, {\n-                                                ...activity,\n-                                                media: [\n-                                                  ...(activity.media || [])  ,\n-                                                  { url: '', type: 'image' }\n-                                                ]\n-                                              });\n-                                            }}\n-                                  >\n-                                    <Plus className=\"h-4 w-4 mr-2\" />\n-                                            Add Media\n-                                  </Button>\n-                                </div>\n-                                      </div>\n-                                    </CardContent>\n-                                  )}\n-                                </Card>\n-                              ))}\n-\n-                              {/* Add Activity Button */}\n-                              <Button\n-                                onClick={handleAddActivity}\n-                                className=\"w-full\"\n-                              >\n-                                <Plus className=\"h-4 w-4 mr-2\" />\n-                                Add Activity\n-                              </Button>\n-                          </TabsContent>\n-                        </Tabs>\n-                        </div>\n-                )}\n-\n-                    {/* Floating Save Button */}\n-                    <div className=\"fixed bottom-8 right-8 flex items-center gap-4\">\n-                      {saveProgress !== 'idle' && (\n-                        <div className={cn(\n-                          \"flex items-center gap-2 rounded-lg px-4 py-2 shadow-lg\",\n-                          {\n-                            \"bg-background border\": saveProgress === 'saving',\n-                            \"bg-green-500 text-white\": saveProgress === 'saved',\n-                            \"bg-destructive text-destructive-foreground\": saveProgress === 'error'\n-                          }\n-                        )}>\n-                          {saveProgress === 'saving' && (\n-                            <>\n-                              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n-                              <span className=\"text-sm\">Saving changes...</span>\n-                            </>\n-                          )}\n-                          {saveProgress === 'saved' && (\n-                            <>\n-                              <Check className=\"h-4 w-4\" />\n-                              <span className=\"text-sm\">Changes saved</span>\n-                            </>\n-                          )}\n-                          {saveProgress === 'error' && (\n-                            <>\n-                              <X className=\"h-4 w-4\" />\n-                              <span className=\"text-sm\">Error saving changes</span>\n-                            </>\n-                          )}\n-                        </div>\n-                      )}\n-                      <Button\n-                        onClick={handleSaveLesson}\n-                        disabled={saveProgress === 'saving'}\n-                        className=\"shadow-lg\"\n-                      >\n-                        {saveProgress === 'saving' ? (\n-                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n-                        ) : (\n-                          <Save className=\"h-4 w-4 mr-2\" />\n-                        )}\n-                        {saveProgress === 'saving' ? 'Saving...' : 'Save Lesson'}\n-                      </Button>\n-                    </div>\n-                  </>\n-            )}\n-    </div>\n-    \n-\n-      {/* Floating Save Button */}\n-      {selectedSubtopicId && currentLessonId && (\n-          <div className=\"fixed bottom-4 right-4 flex flex-col gap-2\">\n-            <TooltipProvider>\n-              <Tooltip>\n-                <TooltipTrigger asChild>\n-                  <Button\n-                    size=\"icon\"\n-                    className=\"rounded-full h-12 w-12 shadow-lg\"\n-                    onClick={handleSaveLesson}\n-                    disabled={!selectedSubtopicId || !lessonTitle || questions.length === 0}\n-                  >\n-                    <Save className=\"h-6 w-6\" />\n-                  </Button>\n-                </TooltipTrigger>\n-                <TooltipContent>\n-                  <p>Save Lesson (Ctrl+S)</p>\n-                </TooltipContent>\n-              </Tooltip>\n-            </TooltipProvider>\n-          </div>\n-        )}\n-        <SaveFeedback />\n-\n-        {/* Add Grade Modal - do not delete */}\n-        {/* {modalState.showAddGrade && (\n-          <Dialog \n-            open={modalState.showAddGrade} \n-            onOpenChange={(open) => handleModalStateChange('showAddGrade', open)}\n-          >\n-            <DialogContent \n-              className=\"sm:max-w-[425px]\"\n-              onEscapeKeyDown={cleanupModalState}\n-              onPointerDownOutside={cleanupModalState}\n-            >\n-              <DialogHeader>\n-                <DialogTitle>Add New Grade</DialogTitle>\n-                <DialogDescription>Enter the details for the new grade.</DialogDescription>\n-              </DialogHeader>\n-              <div className=\"space-y-4 py-4\">\n-                <div className=\"space-y-2\">\n-                  <Label htmlFor=\"grade-name\">Grade Name</Label>\n-                  <Input\n-                    id=\"grade-name\"\n-                    value={newItemData.name}\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n-                    placeholder=\"Enter grade name\"\n-                  />\n-      </div>\n-              </div>\n-              <DialogFooter>\n-                <Button variant=\"outline\" onClick={() => {\n-                  setModalState({ ...modalState, showAddGrade: false });\n-                  setNewItemData({ name: '', description: '' });\n-                }}>\n-                  Cancel\n-                </Button>\n-                <Button onClick={handleCreateGrade} disabled={!newItemData.name}>Create Grade</Button>\n-              </DialogFooter>\n-            </DialogContent>\n-          </Dialog>\n-        )} */}\n-\n-        {/* Add Topic Modal */}\n-        {modalState.showAddTopic && (\n-          <Dialog \n-            open={modalState.showAddTopic} \n-            onOpenChange={(open) => handleModalStateChange('showAddTopic', open)}\n-          >\n-            <DialogContent \n-              className=\"sm:max-w-[425px]\"\n-              onEscapeKeyDown={cleanupModalState}\n-              onPointerDownOutside={cleanupModalState}\n-            >\n-              <DialogHeader>\n-                <DialogTitle>Add New Topic</DialogTitle>\n-                <DialogDescription>Enter the details for the new topic.</DialogDescription>\n-              </DialogHeader>\n-              <div className=\"space-y-4 py-4\">\n-                <div className=\"space-y-2\">\n-                  <Label htmlFor=\"topic-name\">Topic Name</Label>\n-                  <Input\n-                    id=\"topic-name\"\n-                    value={newItemData.name}\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n-                    placeholder=\"Enter topic name\"\n-                  />\n-                </div>\n-              </div>\n-              <DialogFooter>\n-                <Button variant=\"outline\" onClick={() => {\n-                  setModalState({ ...modalState, showAddTopic: false });\n-                  setNewItemData({ name: '', description: '' });\n-                }}>\n-                  Cancel\n-                </Button>\n-                <Button onClick={handleCreateTopic} disabled={!newItemData.name}>Create Topic</Button>\n-              </DialogFooter>\n-            </DialogContent>\n-          </Dialog>\n-        )}\n-\n-        {/* Add Subtopic Modal */}\n-        {modalState.showAddSubtopic && (\n-          <Dialog \n-            open={modalState.showAddSubtopic} \n-            onOpenChange={(open) => handleModalStateChange('showAddSubtopic', open)}\n-          >\n-            <DialogContent \n-              className=\"sm:max-w-[425px]\"\n-              onEscapeKeyDown={cleanupModalState}\n-              onPointerDownOutside={cleanupModalState}\n-            >\n-              <DialogHeader>\n-                <DialogTitle>Add New Subtopic</DialogTitle>\n-                <DialogDescription>Enter the details for the new subtopic.</DialogDescription>\n-              </DialogHeader>\n-              <div className=\"space-y-4 py-4\">\n-                <div className=\"space-y-2\">\n-                  <Label htmlFor=\"subtopic-name\">Subtopic Name</Label>\n-                  <Input\n-                    id=\"subtopic-name\"\n-                    value={newItemData.name}\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n-                    placeholder=\"Enter subtopic name\"\n-                  />\n-                </div>\n-              </div>\n-              <DialogFooter>\n-                <Button variant=\"outline\" onClick={() => {\n-                  setModalState({ ...modalState, showAddSubtopic: false });\n-                  setNewItemData({ name: '', description: '' });\n-                }}>\n-                  Cancel\n-                </Button>\n-                <Button onClick={() => handleCreateSubtopic({ title: newItemData.name })} disabled={!newItemData.name}>Create Subtopic</Button>\n-              </DialogFooter>\n-            </DialogContent>\n-          </Dialog>\n-        )}\n-\n-        {/* Add Lesson Modal */}\n-        {modalState.showAddLesson && (\n-          <Dialog \n-            open={modalState.showAddLesson} \n-            onOpenChange={(open) => handleModalStateChange('showAddLesson', open)}\n-          >\n-            <DialogContent \n-              className=\"sm:max-w-[425px]\"\n-              onEscapeKeyDown={cleanupModalState}\n-              onPointerDownOutside={cleanupModalState}\n-            >\n-              <DialogHeader>\n-                <DialogTitle>Add New Lesson</DialogTitle>\n-                <DialogDescription>Enter the details for the new lesson.</DialogDescription>\n-              </DialogHeader>\n-              <div className=\"space-y-4 py-4\">\n-                <div className=\"space-y-2\">\n-                  <Label htmlFor=\"lesson-name\">Lesson Title</Label>\n-                  <Input\n-                    id=\"lesson-name\"\n-                    value={newItemData.name}\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n-                    placeholder=\"Enter lesson title\"\n-                  />\n-                </div>\n-              </div>\n-              <DialogFooter>\n-                <Button variant=\"outline\" onClick={() => {\n-                  setModalState({ ...modalState, showAddLesson: false });\n-                  setNewItemData({ name: '', description: '' });\n-                }}>\n-                  Cancel\n-                </Button>\n-                <Button onClick={handleCreateLesson} disabled={!newItemData.name}>Create Lesson</Button>\n-              </DialogFooter>\n-            </DialogContent>\n-          </Dialog>\n-        )}\n-      </div>\n-      <Toaster />\n-      </div>\n-  );\n-} \n-\"use client\";\n-\n-import { useState, useCallback, useEffect, useRef } from 'react';\n-import { toast } from 'sonner';\n-import { Toaster } from 'sonner';\n-import Link from 'next/link';\n-import {  Activity as ActivityIcon,  ArrowLeft,  BookOpen,  ChevronDown,  ChevronRight,  Check,  Edit,  Eye,  EyeOff,  HelpCircle,  Layers,  List,  MessageSquare,  Plus,  Save,  Trash as Trash2, X, Pencil, Lock, Unlock, RefreshCw, Clock, Bell, Moon, GraduationCap, MoreHorizontal, Loader2 } from 'lucide-react';\n-import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\n-import { Badge } from '@/components/ui/badge';\n-import { Button } from '@/components/ui/button';\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\n-import { Input } from '@/components/ui/input';\n-import { Label } from '@/components/ui/label';\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\n-import { Textarea } from '@/components/ui/textarea';\n-import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\n-import { cn } from '@/lib/utils';\n-import { API_BASE_URL, QUESTION_TYPES, isQuestionType } from './constants';\n-import { ExercisePrompt, Lesson } from './types';\n-import { QuestionFormProps, ExercisePromptCardProps, Activity, Grade, Topic, Subtopic as SubTopic } from './types';\n-import { QuestionForm } from './components/question-form';\n-import { ExercisePromptCard } from './components/exercise-prompt-card';\n-import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\n-import { supabase } from '@/lib/supabase';\n-import { useContentStore } from '@/lib/content/store';\n-import { contentService } from '@/lib/content/ContentService';\n-import { MediaPreview } from '@/components/ui/media-preview';\n-import { QuestionTypeSelect } from './components/question-type-select';\n-import { RichTextEditor } from '@/components/ui/rich-text-editor';\n-import {\n-  AlertDialog,\n-  AlertDialogAction,\n-  AlertDialogCancel,\n-  AlertDialogContent,\n-  AlertDialogDescription,\n-  AlertDialogFooter,\n-  AlertDialogHeader,\n-  AlertDialogTitle,\n-  AlertDialogTrigger,\n-} from \"@/components/ui/alert-dialog\";\n-import { debounce, isNull } from 'lodash';\n-import { PostgrestError } from '@supabase/supabase-js';\n-import { Question as ContentQuestion } from './types';  // Import the specific type\n-import { Trash } from \"lucide-react\";\n-import { AnimatePresence, motion } from 'framer-motion';\n-import { useQueryClient } from 'react-query';\n-\n-\n-// Update the API endpoint to match your backend route\n-const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\n-\n-interface QuestionTypeSelectProps {\n-  value: string;\n-  onValueChange: (value: string) => void;\n-}\n-\n-// Add metadata type\n-interface LessonMetadata {\n-  lastEdited?: string;\n-  version?: number;\n-  tags?: string[];\n-  status?: 'draft' | 'published';\n-  authorId?: string;\n-  duration?: number;\n-  transcript?: string;\n-}\n-\n-type ContentType = 'html' | 'markdown' | 'rich-text' | 'text' | 'json';\n-\n-interface LessonContent {\n-  id: string;\n-  lesson_id: string;\n-  content: any[];\n-  metadata: {\n-    lastEdited?: string;\n-    version?: number;\n-    status?: 'draft' | 'published';\n-    authorId?: string;\n-  };\n-  content_type: string;\n-  order_index: number;\n-  updated_at: string;\n-  user_id: string;\n-}\n-\n-interface InlineEditProps {\n-  value: string;\n-  onSave: (value: string) => void;\n-  isEditing: boolean;\n-  setIsEditing: (value: boolean) => void;\n-  placeholder?: string;\n-  className?: string;\n-}\n-\n-// Add validation interface\n-interface QuestionValidation {\n-  isValid: boolean;\n-  message: string;\n-}\n-\n-// Add this type validation helper\n-const getQuestionTypeFields = (type: string) => {\n-  switch (type) {\n-    case 'multipleChoice':\n-      return {\n-        required: ['prompt', 'options', 'correctAnswer'],\n-        fields: {\n-          prompt: '',\n-          options: [],\n-          correctAnswer: '',\n-          teacherScript: '',\n-          explanation: ''\n-        }\n-      };\n-    case 'fillInBlank':\n-      return {\n-        required: ['prompt', 'blanks'],\n-        fields: {\n-          prompt: '',\n-          blanks: [],\n-          teacherScript: '',\n-          explanation: ''\n-        }\n-      };\n-    case 'trueFalse':\n-      return {\n-        required: ['prompt', 'correctAnswer'],\n-        fields: {\n-          prompt: '',\n-          correctAnswer: null,\n-          teacherScript: '',\n-          explanation: ''\n-        }\n-      };\n-    case 'matching':\n-      return {\n-        required: ['prompt', 'pairs'],\n-        fields: {\n-          prompt: '',\n-          pairs: [],\n-          teacherScript: '',\n-          explanation: ''\n-        }\n-      };\n-    case 'ordering':\n-      return {\n-        required: ['prompt', 'items'],\n-        fields: {\n-          prompt: '',\n-          items: [],\n-          correctOrder: [],\n-          teacherScript: '',\n-          explanation: ''\n-        }\n-      };\n-    case 'shortAnswer':\n-      return {\n-        required: ['prompt', 'sampleAnswer'],\n-        fields: {\n-          prompt: '',\n-          sampleAnswer: '',\n-          teacherScript: '',\n-          explanation: '',\n-          keywords: []\n-        }\n-      };\n-    case 'speaking':\n-      return {\n-        required: ['prompt', 'sampleAnswer'],\n-        fields: {\n-          prompt: '',\n-          sampleAnswer: '',\n-          teacherScript: '',\n-          audioPrompt: '',\n-          pronunciation: ''\n-        }\n-      };\n-    case 'listening':\n-      return {\n-        required: ['prompt', 'audioContent'],\n-        fields: {\n-          prompt: '',\n-          audioContent: '',\n-          transcript: '',\n-          teacherScript: '',\n-          comprehensionQuestions: []\n-        }\n-      };\n-    case 'listenAndRepeat':\n-      return {\n-        required: ['prompt', 'audioContent'],\n-        fields: {\n-          prompt: '',\n-          audioContent: '',\n-          targetPhrase: '',\n-          teacherScript: '',\n-          pronunciation: ''\n-        }\n-      };\n-    default:\n-      return {\n-        required: ['prompt'],\n-        fields: {\n-          prompt: '',\n-          teacherScript: ''\n-        }\n-      };\n-  }\n-}\n-\n-interface SaveStatus {\n-  id: string;\n-  status: 'draft' | 'saved' | 'saving' | 'error';\n-  lastSaved?: string;\n-}\n-\n-interface Question {\n-  id: string;\n-  type: string;\n-  lesson_id: string;\n-  title: string;\n-  content: string;\n-  metadata: Record<string, any>;\n-  data: Record<string, any>; // This allows dynamic field access\n-  correct_answer: string;\n-  exercisePrompts: ExercisePrompt[];\n-  isDraft?: boolean;\n-}\n-\n-// Add at the top of the file with other type definitions\n-type QuestionType = keyof typeof QUESTION_TYPES;\n-\n-// Add this type guard function\n-const isValidQuestionType = (type: string): type is QuestionType => {\n-  return type in QUESTION_TYPES;\n-};\n-\n-// Update handleAddQuestion\n-\n-\n-// Update validateQuestion\n-const validateQuestion = (question: Question): QuestionValidation => {\n-  const { required } = getQuestionTypeFields(question.type);\n-  const missingFields = required.filter(field => {\n-    const value = question.data?.[field];\n-    return !value || \n-      (Array.isArray(value) && value.length === 0) || \n-      (typeof value === 'string' && !value.trim());\n-  });\n-\n-  if (missingFields.length > 0) {\n-    return {\n-      isValid: false,\n-      message: `Missing required fields: ${missingFields.join(', ')}`\n-    };\n-  }\n-\n-  return { isValid: true, message: '' };\n-};\n-\n-// Add proper type for question data\n-interface QuestionData {\n-  id?: string;\n-  content?: string;\n-  type?: string;\n-  data?: {\n-    prompt?: string;\n-    teacher_script?: string;\n-    followup_prompt?: string[];\n-    sample_answer?: string;\n-    answer?: string;\n-  } | null;\n-  prompt: string;\n-  teacherScript: string;\n-  followup_prompt: string[];\n-  answer?: string;\n-  correct_answer?: string;\n-}\n-\n-// In your component where you handle questions\n-const handleQuestionData = (question: QuestionData) => {\n-  return {\n-    ...question,\n-    data: {\n-      prompt: question?.data?.prompt || '',\n-      teacher_script: question?.data?.teacher_script || '',\n-      followup_prompt: question?.data?.followup_prompt || [],\n-      sample_answer: question?.data?.sample_answer || undefined,  // Convert null to undefined\n-      answer: question?.data?.answer || undefined  // Convert null to undefined\n-    } as const,\n-    sampleAnswer: question?.correct_answer || ''\n-  };\n-};\n-\n-export default function LessonManagementPage() {\n-  // State declarations\n-  \n-  const [selectedGradeId, setSelectedGradeId] = useState<string | null>(null);\n-  const [selectedTopicId, setSelectedTopicId] = useState<string | null>(null);\n-  const [selectedSubtopicId, setSelectedSubtopicId] = useState<string | null>(null);\n-  const [lessonTitle, setLessonTitle] = useState<string>('');\n-  const [currentLessonId, setCurrentLessonId] = useState<string | null>(null);\n-  const [questions, setQuestions] = useState<Question[]>([]);\n-  const [saveProgress, setSaveProgress] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');\n-  const [activities, setActivities] = useState<Activity[]>([]);\n-  const [localBuffer, setLocalBuffer] = useState<{ timestamp: number; data: any } | null>(null);\n-  const [lastSavedToServer, setLastSavedToServer] = useState<number>(Date.now());\n-  const [selectedQuestionType, setSelectedQuestionType] = useState<string>('');\n-  const [editingQuestionIndex, setEditingQuestionIndex] = useState<number | null>(null);\n-  const [showHelpTips, setShowHelpTips] = useState(true);\n-  const [isNavigating, setIsNavigating] = useState(false);\n-  const [lessons, setLessons] = useState<Lesson[]>([]);\n-  const [grades, setGrades] = useState<Grade[]>([]);\n-  const [topics, setTopics] = useState<Topic[]>([]);\n-  const [subtopics, setSubtopics] = useState<SubTopic[]>([]);\n-  const [contentHeading, setContentHeading] = useState<string>('');\n-    // Add with your other state declarations\n-  const [isContentExpanded, setIsContentExpanded] = useState<boolean>(false);\n-  const [modalState, setModalState] = useState({\n-    showAddGrade: false,\n-    showAddTopic: false,\n-    showAddSubtopic: false,\n-    showAddLesson: false\n-  });\n-  const [isViewMode, setIsViewMode] = useState<boolean>(true);\n-  const [expandedGrade, setExpandedGrade] = useState<string | null>(null);\n-  const [expandedTopic, setExpandedTopic] = useState<string | null>(null);\n-  const [expandedSubtopic, setExpandedSubtopic] = useState<string | null>(null);\n-  const [expandedQuestion, setExpandedQuestion] = useState<number | null>(null);\n-  const [expandedActivity, setExpandedActivity] = useState<number | null>(null);\n-  const [newItemData, setNewItemData] = useState({\n-    name: '',\n-    description: ''\n-  });\n-  const [lessonContent, setLessonContent] = useState<string>('');\n-  const [isContentEditorOpen, setIsContentEditorOpen] = useState(false);\n-  const [isEditingTitle, setIsEditingTitle] = useState<boolean>(false);\n-  const [isEditingHeading, setIsEditingHeading] = useState<boolean>(false);\n-  const [isEditingDescription, setIsEditingDescription] = useState<boolean>(false);\n-  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\n-  const [isSidebarLocked, setIsSidebarLocked] = useState(true);\n-  const [alertDialogState, setAlertDialogState] = useState<{\n-    isOpen: boolean;\n-    title: string;\n-    message: string;\n-    onConfirm: (value?: unknown) => void;\n-  }>({\n-    isOpen: false,\n-    title: '',\n-    message: '',\n-    onConfirm: () => {}\n-  });\n-\n-  const { \n-    selectedGrade,\n-    setSelectedGrade,\n-    selectedTopic,\n-    setSelectedTopic,\n-    selectedSubtopic,\n-    setSelectedSubtopic,\n-    selectedLesson,\n-    setSelectedLesson\n-  } = useContentStore();\n-\n-  // Add new state for tracking save status\n-  interface SaveStatus {\n-    id: string;\n-    status: 'draft' | 'saved' | 'saving' | 'error' | 'draft';\n-    lastSaved?: string;\n-  }\n-\n-  const [questionSaveStatuses, setQuestionSaveStatuses] = useState<Array<{\n-    id: string;\n-    status: 'idle' | 'saving' | 'saved' | 'error' | 'draft';\n-  }>>([]);\n-  const [promptSaveStatuses, setPromptSaveStatuses] = useState<SaveStatus[]>([]);\n-\n-  // Add this state to track dropdown state\n-  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n-\n-  // Add these states\n-  const [isLoadingSubtopics, setIsLoadingSubtopics] = useState(false);\n-  const [isLoadingLessons, setIsLoadingLessons] = useState(false);\n-\n-  // Add these state variables\n-  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n-  const [itemToDelete, setItemToDelete] = useState<{\n-    id: string;\n-    type: 'topic' | 'subtopic' | 'lesson';\n-    title: string;\n-  } | null>(null);\n-\n-  // Add these state variables\n-  const [deleteError, setDeleteError] = useState<string | null>(null);\n-\n-  // Add this validation function\n-  const canDeleteItem = async (type: 'topic' | 'subtopic' | 'lesson', id: string) => {\n-    switch (type) {\n-      case 'topic':\n-        const subtopicsInTopic = subtopics.filter(s => s.topic_id === id);\n-        return subtopicsInTopic.length === 0;\n-        \n-      case 'subtopic':\n-        const lessonsInSubtopic = lessons.filter(l => l.subtopic_id === id);\n-        return lessonsInSubtopic.length === 0;\n-        \n-      case 'lesson':\n-        const { data: questions } = await supabase\n-          .from('questions')\n-          .select('id')\n-          .eq('lesson_id', id);\n-        return !questions || questions.length === 0;\n-        \n-      default:\n-        return false;\n-    }\n-  };\n-\n-  // Event handlers\n-  const handleQuestionTypeChange = useCallback((type: string) => {\n-    if (isQuestionType(type)) {\n-      setSelectedQuestionType(type);\n-    }\n-  }, []);\n-\n-  const handleAddQuestion = useCallback(() => {\n-    if (!selectedQuestionType || !isQuestionType(selectedQuestionType)) return;\n-\n-    const defaultData = QUESTION_TYPES[selectedQuestionType].defaultData;\n-    const newQuestion: Question = {\n-      id: crypto.randomUUID(),\n-      type: selectedQuestionType,\n-      //data: {},\n-      title: 'New Question',\n-      content: '',\n-      lesson_id: currentLessonId || '',\n-      metadata: {},\n-      data: {\n-        ...defaultData,\n-        prompt: '',\n-        teacher_script: '',\n-        followup_prompt: [],\n-        sample_answer: ''\n-      },\n-      correct_answer: '',\n-      exercisePrompts: [],\n-      isDraft: true\n-    };\n-\n-    setQuestions(prev => [...prev, newQuestion]);\n-    setQuestionSaveStatuses(prev => [\n-      ...prev,\n-      { id: newQuestion.id, status: 'draft' }\n-    ]);\n-    setSelectedQuestionType('');\n-  }, [selectedQuestionType, currentLessonId]);\n-\n-  const checkDeletability = async (type: 'topic' | 'subtopic' | 'lesson', id: string) => {\n-    try {\n-      switch (type) {\n-        case 'lesson':\n-          const { data: questions } = await supabase\n-            .from('questions')\n-            .select('count')\n-            .eq('lesson_id', id);\n-          return { \n-            canDelete: questions?.[0]?.count === 0,\n-            message: questions?.[0]?.count ?? 0 > 0 \n-              ? `Delete ${questions?.[0]?.count} questions first` \n-              : null\n-          };\n-  \n-        case 'subtopic':\n-          const { data: lessons } = await supabase\n-            .from('lessons')\n-            .select('id')\n-            .eq('subtopic_id', id);\n-          return {\n-            canDelete: !lessons?.length,\n-            message: lessons?.length ? 'Delete all lessons first' : null\n-          };\n-  \n         case 'topic':\n           const { data: subtopics } = await supabase\n             .from('subtopics')\n-            .select('id')\n+            .select('id, lessons(questions(count))')\n             .eq('topic_id', id);\n+          const hasContent = subtopics?.some(s => \n+            s.lessons?.some(l => l.questions?.count > 0)\n+          );\n           return {\n-            canDelete: !subtopics?.length,\n-            message: subtopics?.length ? 'Delete all subtopics first' : null\n+            canDelete: !hasContent && !subtopics?.length,\n+            message: hasContent ? 'Delete all content first' : \n+                     subtopics?.length ? 'Delete all subtopics first' : null\n           };\n-  \n-        default:\n-          return { canDelete: false, message: 'Invalid item type' };\n       }\n     } catch (error) {\n       console.error('Error checking deletability:', error);\n       return { canDelete: false, message: 'Error checking item' };\n"
                },
                {
                    "date": 1739970151048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2204,50 +2204,42 @@\n                     </div>\n \n                     {/* Content Tree View in View Mode */}\n                     {isViewMode && selectedGrade && (\n-  <div className=\"flex h-full\">\n-    {/* Left Plane - Only Grade Selection */}\n-    <div className=\"w-64 border-r p-4\">\n-      <Select\n-        value={selectedGrade}\n-        onValueChange={setSelectedGrade}\n-      >\n-        <SelectTrigger>\n-          <SelectValue placeholder=\"Select Grade\" />\n-        </SelectTrigger>\n-        <SelectContent>\n-          {grades.map((grade) => (\n-            <SelectItem key={grade.id} value={grade.id}>\n-              {grade.name}\n-            </SelectItem>\n-          ))}\n-        </SelectContent>\n-      </Select>\n-    </div>\n-\n-    {/* Right Plane - Nested Content View */}\n-    <div className=\"flex-1 p-6 overflow-auto\">\n-      <div className=\"space-y-6\">\n+  <div className=\"grid grid-cols-1 gap-6 p-6\">\n+    <Card className=\"border-primary/10\">\n+      <CardHeader>\n+        <div className=\"flex items-center justify-between\">\n+          <CardTitle>Content Structure</CardTitle>\n+          <Badge variant=\"outline\" className=\"text-primary\">\n+            {topics.length} Topics\n+          </Badge>\n+        </div>\n+      </CardHeader>\n+      <CardContent className=\"space-y-6\">\n         {topics.map((topic) => (\n           <Card \n             key={topic.id} \n-            className=\"border-l-4 border-l-primary/40 hover:border-l-primary transition-all duration-200\"\n+            className={cn(\n+              \"border-l-4 transition-all duration-200\",\n+              \"border-l-primary/40 hover:border-l-primary\"\n+            )}\n           >\n             <CardHeader className=\"py-4\">\n               <div className=\"flex items-center justify-between\">\n                 <div className=\"flex items-center gap-2\">\n                   <Layers className=\"h-5 w-5 text-primary\" />\n                   <div>\n-                    <h3 className=\"font-medium text-lg\">{topic.title}</h3>\n+                    <h3 className=\"font-medium\">{topic.title}</h3>\n                     <p className=\"text-sm text-muted-foreground\">\n                       {subtopics.filter(s => s.topic_id === topic.id).length} Subtopics\n                     </p>\n                   </div>\n                 </div>\n                 <Button\n                   variant=\"ghost\"\n                   size=\"sm\"\n+                  className=\"hover:bg-destructive/10\"\n                   onClick={async () => {\n                     const { canDelete, message } = await checkDeletability('topic', topic.id);\n                     if (!canDelete) {\n                       toast.error(message);\n@@ -2264,11 +2256,21 @@\n                   <Trash className=\"h-4 w-4\" />\n                 </Button>\n               </div>\n \n-              <div className=\"mt-4 pl-6 space-y-4\">\n+              <div className=\"mt-4 pl-4 space-y-4\">\n                 {subtopics\n                   .filter(subtopic => subtopic.topic_id === topic.id)\n+                  .map((subtopic) => {\n+                    const subtopicLessons = lessons.filter(l => l.subtopic_id === subtopic.id);\n+                    const isEmpty = subtopicLessons.length === 0;\n+                    \n+                    return (\n+                      <Card key={subtopic.id} className=\"border-l-2 border-l-primary/20\">\n+                        <CardHeader className=\"py-3\">\n+                          <div className=\"flex items-center justify-between\">\n+                            <div className=\"flex items-center gap-2\">\n+                              <BookOpen className=\"h-4 w-4 text-primary\" />\n                   .map((subtopic) => (\n                     <Card key={subtopic.id} className=\"border-l-2 border-l-primary/20\">\n                       <CardHeader className=\"py-3\">\n                         <div className=\"flex items-center justify-between\">\n"
                },
                {
                    "date": 1739970158734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2269,100 +2269,109 @@\n                         <CardHeader className=\"py-3\">\n                           <div className=\"flex items-center justify-between\">\n                             <div className=\"flex items-center gap-2\">\n                               <BookOpen className=\"h-4 w-4 text-primary\" />\n-                  .map((subtopic) => (\n-                    <Card key={subtopic.id} className=\"border-l-2 border-l-primary/20\">\n-                      <CardHeader className=\"py-3\">\n-                        <div className=\"flex items-center justify-between\">\n-                          <div className=\"flex items-center gap-2\">\n-                            <BookOpen className=\"h-4 w-4 text-primary\" />\n-                            <div>\n-                              <h4 className=\"font-medium\">{subtopic.title}</h4>\n-                              <p className=\"text-sm text-muted-foreground\">\n-                                {lessons.filter(l => l.subtopic_id === subtopic.id).length} Lessons\n-                              </p>\n+                              <div>\n+                                <h4 className=\"font-medium\">{subtopic.title}</h4>\n+                                <div className=\"flex items-center gap-2\">\n+                                  <Badge variant=\"outline\">\n+                                    {subtopicLessons.length} Lessons\n+                                  </Badge>\n+                                  {isEmpty && (\n+                                    <Badge variant=\"outline\" className=\"text-yellow-500\">\n+                                      Empty\n+                                    </Badge>\n+                                  )}\n+                                </div>\n+                              </div>\n                             </div>\n+                            <Button\n+                              variant=\"ghost\"\n+                              size=\"sm\"\n+                              className=\"hover:bg-destructive/10\"\n+                              onClick={async () => {\n+                                const { canDelete, message } = await checkDeletability('subtopic', subtopic.id);\n+                                if (!canDelete) {\n+                                  toast.error(message);\n+                                  return;\n+                                }\n+                                setItemToDelete({\n+                                  id: subtopic.id,\n+                                  type: 'subtopic',\n+                                  title: subtopic.title\n+                                });\n+                                setDeleteDialogOpen(true);\n+                              }}\n+                            >\n+                              <Trash className=\"h-4 w-4\" />\n+                            </Button>\n                           </div>\n-                          <Button\n-                            variant=\"ghost\"\n-                            size=\"sm\"\n-                            onClick={async () => {\n-                              const { canDelete, message } = await checkDeletability('subtopic', subtopic.id);\n-                              if (!canDelete) {\n-                                toast.error(message);\n-                                return;\n-                              }\n-                              setItemToDelete({\n-                                id: subtopic.id,\n-                                type: 'subtopic',\n-                                title: subtopic.title\n-                              });\n-                              setDeleteDialogOpen(true);\n-                            }}\n-                          >\n-                            <Trash className=\"h-4 w-4\" />\n-                          </Button>\n-                        </div>\n \n-                        <div className=\"mt-2 pl-6 space-y-2\">\n-                          {lessons\n-                            .filter(lesson => lesson.subtopic_id === subtopic.id)\n-                            .map((lesson) => (\n-                              <Card key={lesson.id} className=\"border-l border-l-primary/10\">\n-                                <CardHeader className=\"py-2\">\n-                                  <div className=\"flex items-center justify-between\">\n-                                    <div className=\"flex items-center gap-2\">\n-                                      <div>\n-                                        <h5 className=\"text-sm font-medium\">{lesson.title}</h5>\n-                                        <div className=\"flex items-center gap-2 mt-1\">\n-                                          <Badge variant=\"secondary\" className=\"text-xs\">\n-                                            {lesson.duration || 0} mins\n-                                          </Badge>\n-                                          <Badge variant=\"secondary\" className=\"text-xs\">\n-                                            {lesson.questions?.length || 0} Questions\n-                                          </Badge>\n-                                          {(!lesson.questions || lesson.questions.length === 0) && (\n-                                            <Badge variant=\"outline\" className=\"text-yellow-500 text-xs\">\n-                                              Empty\n-                                            </Badge>\n-                                          )}\n+                          <div className=\"pl-4 mt-2 space-y-2\">\n+                            {subtopicLessons.map((lesson) => {\n+                              const questionCount = lesson.questions?.length || 0;\n+                              const isEmpty = questionCount === 0;\n+                              \n+                              return (\n+                                <Card key={lesson.id} className=\"border-l border-l-primary/10\">\n+                                  <CardHeader className=\"py-2\">\n+                                    <div className=\"flex items-center justify-between\">\n+                                      <div className=\"flex items-center gap-2\">\n+                                        <div className=\"flex flex-col\">\n+                                          <span className=\"text-sm font-medium\">\n+                                            {lesson.title}\n+                                          </span>\n+                                          <div className=\"flex items-center gap-2\">\n+                                            <span className=\"text-xs text-muted-foreground\">\n+                                              {lesson.duration || 0} mins • {questionCount} Questions\n+                                            </span>\n+                                            {isEmpty && (\n+                                              <Badge \n+                                                variant=\"outline\" \n+                                                className=\"text-yellow-500\"\n+                                              >\n+                                                Empty\n+                                              </Badge>\n+                                            )}\n+                                          </div>\n                                         </div>\n                                       </div>\n+                                      <Button\n+                                        variant=\"ghost\"\n+                                        size=\"sm\"\n+                                        className=\"hover:bg-destructive/10\"\n+                                        onClick={async () => {\n+                                          const { canDelete, message } = await checkDeletability('lesson', lesson.id);\n+                                          if (!canDelete) {\n+                                            toast.error(message);\n+                                            return;\n+                                          }\n+                                          setItemToDelete({\n+                                            id: lesson.id,\n+                                            type: 'lesson',\n+                                            title: lesson.title\n+                                          });\n+                                          setDeleteDialogOpen(true);\n+                                        }}\n+                                      >\n+                                        <Trash className=\"h-4 w-4\" />\n+                                      </Button>\n                                     </div>\n-                                    <Button\n-                                      variant=\"ghost\"\n-                                      size=\"sm\"\n-                                      onClick={async () => {\n-                                        const { canDelete, message } = await checkDeletability('lesson', lesson.id);\n-                                        if (!canDelete) {\n-                                          toast.error(message);\n-                                          return;\n-                                        }\n-                                        setItemToDelete({\n-                                          id: lesson.id,\n-                                          type: 'lesson',\n-                                          title: lesson.title\n-                                        });\n-                                        setDeleteDialogOpen(true);\n-                                      }}\n-                                    >\n-                                      <Trash className=\"h-4 w-4\" />\n-                                    </Button>\n-                                  </div>\n-                                </CardHeader>\n-                              </Card>\n-                            ))}\n-                        </div>\n-                      </CardHeader>\n-                    </Card>\n-                  ))}\n+                                  </CardHeader>\n+                                </Card>\n+                              );\n+                            })}\n+                          </div>\n+                        </CardHeader>\n+                      </Card>\n+                    );\n+                  })}\n               </div>\n             </CardHeader>\n           </Card>\n         ))}\n-      </div>\n-    </div>\n+      </CardContent>\n+    </Card>\n   </div>\n )}\n \n                     {/* Regular Edit Mode Content */}\n"
                },
                {
                    "date": 1739970264681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -464,9 +464,9 @@\n             .select('count')\n             .eq('lesson_id', id);\n           return { \n             canDelete: questions?.[0]?.count === 0,\n-            message: questions?.[0]?.count > 0 \n+            message: questions?.[0]?.count ?? 0> 0 \n               ? `Please delete ${questions?.[0]?.count} questions first` \n               : null\n           };\n \n"
                },
                {
                    "date": 1739970274187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -474,9 +474,9 @@\n           const { data: lessons } = await supabase\n             .from('lessons')\n             .select('id, questions(count)')\n             .eq('subtopic_id', id);\n-          const hasQuestions = lessons?.some(l => l.questions?.count > 0);\n+          const hasQuestions = lessons?.some(l => l.questions?.[0]?.count > 0);\n           return {\n             canDelete: !hasQuestions && !lessons?.length,\n             message: hasQuestions ? 'Delete questions from lessons first' : \n                      lessons?.length ? 'Delete all lessons first' : null\n"
                },
                {
                    "date": 1739970351121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -487,9 +487,9 @@\n             .from('subtopics')\n             .select('id, lessons(questions(count))')\n             .eq('topic_id', id);\n           const hasContent = subtopics?.some(s => \n-            s.lessons?.some(l => l.questions?.count > 0)\n+            s.lessons?.some(l => l.questions?.[0]?.count > 0)\n           );\n           return {\n             canDelete: !hasContent && !subtopics?.length,\n             message: hasContent ? 'Delete all content first' : \n"
                },
                {
                    "date": 1739970555198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -633,9 +633,9 @@\n       instructions: '',\n       media: [],\n       data: {\n         prompt: '',\n-        teacherScript: '',\n+        teacher_script: '',\n         media: []\n       }\n     };\n     setActivities(prev => [...prev, newActivity]);\n"
                },
                {
                    "date": 1739970584673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -270,9 +270,9 @@\n     sample_answer?: string;\n     answer?: string;\n   } | null;\n   prompt: string;\n-  teacherScript: string;\n+  teacher_script: string;\n   followup_prompt: string[];\n   answer?: string;\n   correct_answer?: string;\n }\n"
                },
                {
                    "date": 1739970596488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -201,9 +201,9 @@\n       return {\n         required: ['prompt'],\n         fields: {\n           prompt: '',\n-          teacherScript: ''\n+          teacher_script: ''\n         }\n       };\n   }\n }\n"
                },
                {
                    "date": 1739970609528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -192,9 +192,9 @@\n         fields: {\n           prompt: '',\n           audioContent: '',\n           targetPhrase: '',\n-          teacherScript: '',\n+          teacher_script: '',\n           pronunciation: ''\n         }\n       };\n     default:\n"
                },
                {
                    "date": 1739970626574,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,9 +169,9 @@\n         required: ['prompt', 'sampleAnswer'],\n         fields: {\n           prompt: '',\n           sampleAnswer: '',\n-          teacherScript: '',\n+          teacher_script: '',\n           audioPrompt: '',\n           pronunciation: ''\n         }\n       };\n"
                },
                {
                    "date": 1739970637035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -158,9 +158,9 @@\n         required: ['prompt', 'sampleAnswer'],\n         fields: {\n           prompt: '',\n           sampleAnswer: '',\n-          teacherScript: '',\n+          teacher_script: '',\n           explanation: '',\n           keywords: []\n         }\n       };\n"
                },
                {
                    "date": 1739970645150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,9 +137,9 @@\n         required: ['prompt', 'pairs'],\n         fields: {\n           prompt: '',\n           pairs: [],\n-          teacherScript: '',\n+          teacher_script: '',\n           explanation: ''\n         }\n       };\n     case 'ordering':\n@@ -148,9 +148,9 @@\n         fields: {\n           prompt: '',\n           items: [],\n           correctOrder: [],\n-          teacherScript: '',\n+          teacher_script: '',\n           explanation: ''\n         }\n       };\n     case 'shortAnswer':\n"
                },
                {
                    "date": 1739970652204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,9 @@\n         required: ['prompt', 'blanks'],\n         fields: {\n           prompt: '',\n           blanks: [],\n-          teacherScript: '',\n+          teacher_script: '',\n           explanation: ''\n         }\n       };\n     case 'trueFalse':\n@@ -127,9 +127,9 @@\n         required: ['prompt', 'correctAnswer'],\n         fields: {\n           prompt: '',\n           correctAnswer: null,\n-          teacherScript: '',\n+          teacher_script: '',\n           explanation: ''\n         }\n       };\n     case 'matching':\n"
                },
                {
                    "date": 1739970669778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,10 +106,10 @@\n         required: ['prompt', 'options', 'correctAnswer'],\n         fields: {\n           prompt: '',\n           options: [],\n-          correctAnswer: '',\n-          teacherScript: '',\n+          correct_answer: '',\n+          teacher_script: '',\n           explanation: ''\n         }\n       };\n     case 'fillInBlank':\n"
                },
                {
                    "date": 1739970680630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n       return {\n         required: ['prompt', 'correctAnswer'],\n         fields: {\n           prompt: '',\n-          correctAnswer: null,\n+          correctAswer: null,\n           teacher_script: '',\n           explanation: ''\n         }\n       };\n"
                },
                {
                    "date": 1739970686015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n       return {\n         required: ['prompt', 'correctAnswer'],\n         fields: {\n           prompt: '',\n-          correctAswer: null,\n+          correctnswer: null,\n           teacher_script: '',\n           explanation: ''\n         }\n       };\n"
                },
                {
                    "date": 1739970741369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n       return {\n         required: ['prompt', 'correctAnswer'],\n         fields: {\n           prompt: '',\n-          correctnswer: null,\n+          correct_answer: null,\n           teacher_script: '',\n           explanation: ''\n         }\n       };\n"
                },
                {
                    "date": 1739970746910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n           correct_answer: '',\n           teacher_script: '',\n           explanation: ''\n         }\n-      };\n+      };sa\n     case 'fillInBlank':\n       return {\n         required: ['prompt', 'blanks'],\n         fields: {\n"
                },
                {
                    "date": 1739970753294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n           correct_answer: '',\n           teacher_script: '',\n           explanation: ''\n         }\n-      };sa\n+      };\n     case 'fillInBlank':\n       return {\n         required: ['prompt', 'blanks'],\n         fields: {\n"
                },
                {
                    "date": 1740043717827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,3386 +1,3455 @@\n-\"use client\";\n-\n-import { useState, useCallback, useEffect, useRef } from 'react';\n-import { toast } from 'sonner';\n-import { Toaster } from 'sonner';\n-import Link from 'next/link';\n-import {  Activity as ActivityIcon,  ArrowLeft,  BookOpen,  ChevronDown,  ChevronRight,  Check,  Edit,  Eye,  EyeOff,  HelpCircle,  Layers,  List,  MessageSquare,  Plus,  Save,  Trash as Trash2, X, Pencil, Lock, Unlock, RefreshCw, Clock, Bell, Moon, GraduationCap, MoreHorizontal, Loader2 } from 'lucide-react';\n-import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\n-import { Badge } from '@/components/ui/badge';\n-import { Button } from '@/components/ui/button';\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\n-import { Input } from '@/components/ui/input';\n-import { Label } from '@/components/ui/label';\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\n-import { Textarea } from '@/components/ui/textarea';\n-import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\n-import { cn } from '@/lib/utils';\n-import { API_BASE_URL, QUESTION_TYPES, isQuestionType } from './constants';\n-import { ExercisePrompt, Lesson } from './types';\n-import { QuestionFormProps, ExercisePromptCardProps, Activity, Grade, Topic, Subtopic as SubTopic } from './types';\n-import { QuestionForm } from './components/question-form';\n-import { ExercisePromptCard } from './components/exercise-prompt-card';\n-import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\n-import { supabase } from '@/lib/supabase';\n-import { useContentStore } from '@/lib/content/store';\n-import { contentService } from '@/lib/content/ContentService';\n-import { MediaPreview } from '@/components/ui/media-preview';\n-import { QuestionTypeSelect } from './components/question-type-select';\n-import { RichTextEditor } from '@/components/ui/rich-text-editor';\n-import {\n-  AlertDialog,\n-  AlertDialogAction,\n-  AlertDialogCancel,\n-  AlertDialogContent,\n-  AlertDialogDescription,\n-  AlertDialogFooter,\n-  AlertDialogHeader,\n-  AlertDialogTitle,\n-  AlertDialogTrigger,\n-} from \"@/components/ui/alert-dialog\";\n-import { debounce, isNull } from 'lodash';\n-import { PostgrestError } from '@supabase/supabase-js';\n-import { Question as ContentQuestion } from './types';  // Import the specific type\n-import { Trash } from \"lucide-react\";\n-import { AnimatePresence, motion } from 'framer-motion';\n-import { useQueryClient } from 'react-query';\n-\n-\n-// Update the API endpoint to match your backend route\n-const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\n-\n-interface QuestionTypeSelectProps {\n-  value: string;\n-  onValueChange: (value: string) => void;\n-}\n-\n-// Add metadata type\n-interface LessonMetadata {\n-  lastEdited?: string;\n-  version?: number;\n-  tags?: string[];\n-  status?: 'draft' | 'published';\n-  authorId?: string;\n-  duration?: number;\n-  transcript?: string;\n-}\n-\n-type ContentType = 'html' | 'markdown' | 'rich-text' | 'text' | 'json';\n-\n-interface LessonContent {\n-  id: string;\n-  lesson_id: string;\n-  content: any[];\n-  metadata: {\n-    lastEdited?: string;\n-    version?: number;\n-    status?: 'draft' | 'published';\n-    authorId?: string;\n-  };\n-  content_type: string;\n-  order_index: number;\n-  updated_at: string;\n-  user_id: string;\n-}\n-\n-interface InlineEditProps {\n-  value: string;\n-  onSave: (value: string) => void;\n-  isEditing: boolean;\n-  setIsEditing: (value: boolean) => void;\n-  placeholder?: string;\n-  className?: string;\n-}\n-\n-// Add validation interface\n-interface QuestionValidation {\n-  isValid: boolean;\n-  message: string;\n-}\n-\n-// Add this type validation helper\n-const getQuestionTypeFields = (type: string) => {\n-  switch (type) {\n-    case 'multipleChoice':\n-      return {\n-        required: ['prompt', 'options', 'correctAnswer'],\n-        fields: {\n-          prompt: '',\n-          options: [],\n-          correct_answer: '',\n-          teacher_script: '',\n-          explanation: ''\n-        }\n-      };\n-    case 'fillInBlank':\n-      return {\n-        required: ['prompt', 'blanks'],\n-        fields: {\n-          prompt: '',\n-          blanks: [],\n-          teacher_script: '',\n-          explanation: ''\n-        }\n-      };\n-    case 'trueFalse':\n-      return {\n-        required: ['prompt', 'correctAnswer'],\n-        fields: {\n-          prompt: '',\n-          correct_answer: null,\n-          teacher_script: '',\n-          explanation: ''\n-        }\n-      };\n-    case 'matching':\n-      return {\n-        required: ['prompt', 'pairs'],\n-        fields: {\n-          prompt: '',\n-          pairs: [],\n-          teacher_script: '',\n-          explanation: ''\n-        }\n-      };\n-    case 'ordering':\n-      return {\n-        required: ['prompt', 'items'],\n-        fields: {\n-          prompt: '',\n-          items: [],\n-          correctOrder: [],\n-          teacher_script: '',\n-          explanation: ''\n-        }\n-      };\n-    case 'shortAnswer':\n-      return {\n-        required: ['prompt', 'sampleAnswer'],\n-        fields: {\n-          prompt: '',\n-          sampleAnswer: '',\n-          teacher_script: '',\n-          explanation: '',\n-          keywords: []\n-        }\n-      };\n-    case 'speaking':\n-      return {\n-        required: ['prompt', 'sampleAnswer'],\n-        fields: {\n-          prompt: '',\n-          sampleAnswer: '',\n-          teacher_script: '',\n-          audioPrompt: '',\n-          pronunciation: ''\n-        }\n-      };\n-    case 'listening':\n-      return {\n-        required: ['prompt', 'audioContent'],\n-        fields: {\n-          prompt: '',\n-          audioContent: '',\n-          transcript: '',\n-          teacherScript: '',\n-          comprehensionQuestions: []\n-        }\n-      };\n-    case 'listenAndRepeat':\n-      return {\n-        required: ['prompt', 'audioContent'],\n-        fields: {\n-          prompt: '',\n-          audioContent: '',\n-          targetPhrase: '',\n-          teacher_script: '',\n-          pronunciation: ''\n-        }\n-      };\n-    default:\n-      return {\n-        required: ['prompt'],\n-        fields: {\n-          prompt: '',\n-          teacher_script: ''\n-        }\n-      };\n-  }\n-}\n-\n-interface SaveStatus {\n-  id: string;\n-  status: 'draft' | 'saved' | 'saving' | 'error';\n-  lastSaved?: string;\n-}\n-\n-interface Question {\n-  id: string;\n-  type: string;\n-  lesson_id: string;\n-  title: string;\n-  content: string;\n-  metadata: Record<string, any>;\n-  data: Record<string, any>; // This allows dynamic field access\n-  correct_answer: string;\n-  exercisePrompts: ExercisePrompt[];\n-  isDraft?: boolean;\n-}\n-\n-// Add at the top of the file with other type definitions\n-type QuestionType = keyof typeof QUESTION_TYPES;\n-\n-// Add this type guard function\n-const isValidQuestionType = (type: string): type is QuestionType => {\n-  return type in QUESTION_TYPES;\n-};\n-\n-// Update handleAddQuestion\n-\n-\n-// Update validateQuestion\n-const validateQuestion = (question: Question): QuestionValidation => {\n-  const { required } = getQuestionTypeFields(question.type);\n-  const missingFields = required.filter(field => {\n-    const value = question.data?.[field];\n-    return !value || \n-      (Array.isArray(value) && value.length === 0) || \n-      (typeof value === 'string' && !value.trim());\n-  });\n-\n-  if (missingFields.length > 0) {\n-    return {\n-      isValid: false,\n-      message: `Missing required fields: ${missingFields.join(', ')}`\n-    };\n-  }\n-\n-  return { isValid: true, message: '' };\n-};\n-\n-// Add proper type for question data\n-interface QuestionData {\n-  id?: string;\n-  content?: string;\n-  type?: string;\n-  data?: {\n-    prompt?: string;\n-    teacher_script?: string;\n-    followup_prompt?: string[];\n-    sample_answer?: string;\n-    answer?: string;\n-  } | null;\n-  prompt: string;\n-  teacher_script: string;\n-  followup_prompt: string[];\n-  answer?: string;\n-  correct_answer?: string;\n-}\n-\n-// In your component where you handle questions\n-const handleQuestionData = (question: QuestionData) => {\n-  return {\n-    ...question,\n-    data: {\n-      prompt: question?.data?.prompt || '',\n-      teacher_script: question?.data?.teacher_script || '',\n-      followup_prompt: question?.data?.followup_prompt || [],\n-      sample_answer: question?.data?.sample_answer || undefined,  // Convert null to undefined\n-      answer: question?.data?.answer || undefined  // Convert null to undefined\n-    } as const,\n-    sampleAnswer: question?.correct_answer || ''\n-  };\n-};\n-\n-export default function LessonManagementPage() {\n-  // State declarations\n-  \n-  const [selectedGradeId, setSelectedGradeId] = useState<string | null>(null);\n-  const [selectedTopicId, setSelectedTopicId] = useState<string | null>(null);\n-  const [selectedSubtopicId, setSelectedSubtopicId] = useState<string | null>(null);\n-  const [lessonTitle, setLessonTitle] = useState<string>('');\n-  const [currentLessonId, setCurrentLessonId] = useState<string | null>(null);\n-  const [questions, setQuestions] = useState<Question[]>([]);\n-  const [saveProgress, setSaveProgress] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');\n-  const [activities, setActivities] = useState<Activity[]>([]);\n-  const [localBuffer, setLocalBuffer] = useState<{ timestamp: number; data: any } | null>(null);\n-  const [lastSavedToServer, setLastSavedToServer] = useState<number>(Date.now());\n-  const [selectedQuestionType, setSelectedQuestionType] = useState<string>('');\n-  const [editingQuestionIndex, setEditingQuestionIndex] = useState<number | null>(null);\n-  const [showHelpTips, setShowHelpTips] = useState(true);\n-  const [isNavigating, setIsNavigating] = useState(false);\n-  const [lessons, setLessons] = useState<Lesson[]>([]);\n-  const [grades, setGrades] = useState<Grade[]>([]);\n-  const [topics, setTopics] = useState<Topic[]>([]);\n-  const [subtopics, setSubtopics] = useState<SubTopic[]>([]);\n-  const [contentHeading, setContentHeading] = useState<string>('');\n-    // Add with your other state declarations\n-  const [isContentExpanded, setIsContentExpanded] = useState<boolean>(false);\n-  const [modalState, setModalState] = useState({\n-    showAddGrade: false,\n-    showAddTopic: false,\n-    showAddSubtopic: false,\n-    showAddLesson: false\n-  });\n-  const [isViewMode, setIsViewMode] = useState<boolean>(true);\n-  const [expandedGrade, setExpandedGrade] = useState<string | null>(null);\n-  const [expandedTopic, setExpandedTopic] = useState<string | null>(null);\n-  const [expandedSubtopic, setExpandedSubtopic] = useState<string | null>(null);\n-  const [expandedQuestion, setExpandedQuestion] = useState<number | null>(null);\n-  const [expandedActivity, setExpandedActivity] = useState<number | null>(null);\n-  const [newItemData, setNewItemData] = useState({\n-    name: '',\n-    description: ''\n-  });\n-  const [lessonContent, setLessonContent] = useState<string>('');\n-  const [isContentEditorOpen, setIsContentEditorOpen] = useState(false);\n-  const [isEditingTitle, setIsEditingTitle] = useState<boolean>(false);\n-  const [isEditingHeading, setIsEditingHeading] = useState<boolean>(false);\n-  const [isEditingDescription, setIsEditingDescription] = useState<boolean>(false);\n-  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\n-  const [isSidebarLocked, setIsSidebarLocked] = useState(true);\n-  const [alertDialogState, setAlertDialogState] = useState<{\n-    isOpen: boolean;\n-    title: string;\n-    message: string;\n-    onConfirm: (value?: unknown) => void;\n-  }>({\n-    isOpen: false,\n-    title: '',\n-    message: '',\n-    onConfirm: () => {}\n-  });\n-\n-  const { \n-    selectedGrade,\n-    setSelectedGrade,\n-    selectedTopic,\n-    setSelectedTopic,\n-    selectedSubtopic,\n-    setSelectedSubtopic,\n-    selectedLesson,\n-    setSelectedLesson\n-  } = useContentStore();\n-\n-  // Add new state for tracking save status\n-  interface SaveStatus {\n-    id: string;\n-    status: 'draft' | 'saved' | 'saving' | 'error' | 'draft';\n-    lastSaved?: string;\n-  }\n-\n-  const [questionSaveStatuses, setQuestionSaveStatuses] = useState<Array<{\n-    id: string;\n-    status: 'idle' | 'saving' | 'saved' | 'error' | 'draft';\n-  }>>([]);\n-  const [promptSaveStatuses, setPromptSaveStatuses] = useState<SaveStatus[]>([]);\n-\n-  // Add this state to track dropdown state\n-  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n-\n-  // Add these states\n-  const [isLoadingSubtopics, setIsLoadingSubtopics] = useState(false);\n-  const [isLoadingLessons, setIsLoadingLessons] = useState(false);\n-\n-  // Add these state variables\n-  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n-  const [itemToDelete, setItemToDelete] = useState<{\n-    id: string;\n-    type: 'topic' | 'subtopic' | 'lesson';\n-    title: string;\n-  } | null>(null);\n-\n-  // Add these state variables\n-  const [deleteError, setDeleteError] = useState<string | null>(null);\n-\n-  // Add this validation function\n-  const canDeleteItem = async (type: 'topic' | 'subtopic' | 'lesson', id: string) => {\n-    switch (type) {\n-      case 'topic':\n-        const subtopicsInTopic = subtopics.filter(s => s.topic_id === id);\n-        return subtopicsInTopic.length === 0;\n-        \n-      case 'subtopic':\n-        const lessonsInSubtopic = lessons.filter(l => l.subtopic_id === id);\n-        return lessonsInSubtopic.length === 0;\n-        \n-      case 'lesson':\n-        const { data: questions } = await supabase\n-          .from('questions')\n-          .select('id')\n-          .eq('lesson_id', id);\n-        return !questions || questions.length === 0;\n-        \n-      default:\n-        return false;\n-    }\n-  };\n-\n-  // Event handlers\n-  const handleQuestionTypeChange = useCallback((type: string) => {\n-    if (isQuestionType(type)) {\n-      setSelectedQuestionType(type);\n-    }\n-  }, []);\n-\n-  const handleAddQuestion = useCallback(() => {\n-    if (!selectedQuestionType || !isQuestionType(selectedQuestionType)) return;\n-\n-    const defaultData = QUESTION_TYPES[selectedQuestionType].defaultData;\n-    const newQuestion: Question = {\n-      id: crypto.randomUUID(),\n-      type: selectedQuestionType,\n-      //data: {},\n-      title: 'New Question',\n-      content: '',\n-      lesson_id: currentLessonId || '',\n-      metadata: {},\n-      data: {\n-        ...defaultData,\n-        prompt: '',\n-        teacher_script: '',\n-        followup_prompt: [],\n-        sample_answer: ''\n-      },\n-      correct_answer: '',\n-      exercisePrompts: [],\n-      isDraft: true\n-    };\n-\n-    setQuestions(prev => [...prev, newQuestion]);\n-    setQuestionSaveStatuses(prev => [\n-      ...prev,\n-      { id: newQuestion.id, status: 'draft' }\n-    ]);\n-    setSelectedQuestionType('');\n-  }, [selectedQuestionType, currentLessonId]);\n-\n-  const checkDeletability = async (type: 'topic' | 'subtopic' | 'lesson', id: string) => {\n-    try {\n-      switch (type) {\n-        case 'lesson':\n-          const { data: questions } = await supabase\n-            .from('questions')\n-            .select('count')\n-            .eq('lesson_id', id);\n-          return { \n-            canDelete: questions?.[0]?.count === 0,\n-            message: questions?.[0]?.count ?? 0> 0 \n-              ? `Please delete ${questions?.[0]?.count} questions first` \n-              : null\n-          };\n-\n-        case 'subtopic':\n-          const { data: lessons } = await supabase\n-            .from('lessons')\n-            .select('id, questions(count)')\n-            .eq('subtopic_id', id);\n-          const hasQuestions = lessons?.some(l => l.questions?.[0]?.count > 0);\n-          return {\n-            canDelete: !hasQuestions && !lessons?.length,\n-            message: hasQuestions ? 'Delete questions from lessons first' : \n-                     lessons?.length ? 'Delete all lessons first' : null\n-          };\n-\n-        case 'topic':\n-          const { data: subtopics } = await supabase\n-            .from('subtopics')\n-            .select('id, lessons(questions(count))')\n-            .eq('topic_id', id);\n-          const hasContent = subtopics?.some(s => \n-            s.lessons?.some(l => l.questions?.[0]?.count > 0)\n-          );\n-          return {\n-            canDelete: !hasContent && !subtopics?.length,\n-            message: hasContent ? 'Delete all content first' : \n-                     subtopics?.length ? 'Delete all subtopics first' : null\n-          };\n-      }\n-    } catch (error) {\n-      console.error('Error checking deletability:', error);\n-      return { canDelete: false, message: 'Error checking item' };\n-    }\n-  };\n-\n-  const handleRemoveQuestion = async (index: number) => {\n-    try {\n-      const questionToDelete = questions[index];\n-      \n-      // Delete related exercise prompts first\n-      const { error: promptError } = await supabase\n-        .from('exercise_prompts')\n-        .delete()\n-        .eq('question_id', questionToDelete.id);\n-\n-      if (promptError) throw promptError;\n-\n-      // Then delete the question\n-      const { error: questionError } = await supabase\n-        .from('questions')\n-        .delete()\n-        .eq('id', questionToDelete.id);\n-\n-      if (questionError) throw questionError;\n-\n-      // Update local state\n-      const newQuestions = questions.filter((_, i) => i !== index);\n-      setQuestions(newQuestions);\n-      \n-      toast.success('Question and related prompts deleted successfully');\n-    } catch (error) {\n-      console.error('Error deleting question:', error);\n-      toast.error('Failed to delete question and prompts');\n-    }\n-  };\n-\n-  const handleUpdateQuestion = useCallback(async (index: number, updatedQuestion: Question) => {\n-    const newQuestions = [...questions];\n-    newQuestions[index] = updatedQuestion;\n-    setQuestions(newQuestions);\n-    setQuestionSaveStatuses(prev => prev.map((status, i) => \n-      i === index ? { ...status, status: 'draft' } : status\n-    ));\n-  }, [questions]);\n-\n-  const handleAddExercisePrompt = useCallback((questionIndex: number) => {\n-    setQuestions(prev => prev.map((question, i) => {\n-      if (i === questionIndex) {\n-        return {\n-          ...question,\n-          exercisePrompts: [\n-            ...question.exercisePrompts,\n-            {\n-              id: crypto.randomUUID(),\n-              text: '',\n-              media: '',\n-              type: 'image',\n-              narration: 'Your turn',\n-              saytext: 'Say: ',\n-              metadata: {\n-                estimatedTime: 0\n-              },\n-              created_at: new Date().toISOString(),\n-              updated_at: new Date().toISOString()\n-            }\n-          ]\n-        };\n-      }\n-      return question;\n-    }));\n-  }, []);\n-\n-  const handleRemoveExercisePrompt = useCallback((questionIndex: number, promptIndex: number) => {\n-    setQuestions(prev => prev.map((question, i) => {\n-      if (i === questionIndex) {\n-        return {\n-          ...question,\n-          exercisePrompts: question.exercisePrompts.filter((_, j) => j !== promptIndex)\n-        };\n-      }\n-      return question;\n-    }));\n-  }, []);\n-\n-  const handleExercisePromptChange = useCallback(async (\n-    questionIndex: number,\n-    promptIndex: number,\n-    updatedPrompt: ExercisePrompt\n-  ) => {\n-    try {\n-      const promptUpdate = {\n-        id: updatedPrompt.id,\n-        question_id: updatedPrompt.question_id,\n-        text: updatedPrompt.text,\n-        type: updatedPrompt.type,\n-        narration: updatedPrompt.narration,\n-        saytext: updatedPrompt.saytext,\n-        media: updatedPrompt.media,\n-        // Remove order_index as it's not in schema\n-        created_at: new Date().toISOString()\n-      };\n-\n-      const { error: promptError } = await supabase\n-        .from('exercise_prompts')\n-        .upsert(promptUpdate)\n-        .select();\n-\n-      if (promptError) throw promptError;\n-\n-      // Update local state\n-      setQuestions(prev => prev.map((question, i) => {\n-        if (i === questionIndex) {\n-          const newPrompts = [...question.exercisePrompts];\n-          newPrompts[promptIndex] = updatedPrompt;\n-          return { ...question, exercisePrompts: newPrompts };\n-        }\n-        return question;\n-      }));\n-\n-    } catch (error) {\n-      console.error('Error saving prompt:', error);\n-      toast.error('Failed to save prompt');\n-    }\n-  }, []);\n-\n-  const handleAddActivity = useCallback(() => {\n-    const newActivity: Activity = {\n-      id: crypto.randomUUID(),\n-      lesson_id: currentLessonId || '',\n-      created_at: new Date().toISOString(),\n-      type: 'practice',\n-      title: '',\n-      name: '',\n-      instructions: '',\n-      media: [],\n-      data: {\n-        prompt: '',\n-        teacher_script: '',\n-        media: []\n-      }\n-    };\n-    setActivities(prev => [...prev, newActivity]);\n-  }, [currentLessonId]);\n-\n-  const handleUpdateActivity = useCallback((index: number, updatedActivity: Activity) => {\n-    setActivities(prev => prev.map((activity, i) => i === index ? updatedActivity : activity));\n-  }, []);\n-\n-  const handleRemoveActivity = useCallback((index: number) => {\n-    setActivities(prev => prev.filter((_, i) => i !== index));\n-  }, []);\n-\n-  const handleExercisePromptUpdate = useCallback((questionIndex: number, promptIndex: number, updatedPrompt: ExercisePrompt) => {\n-    const updatedQuestions = [...questions];\n-    updatedQuestions[questionIndex].exercisePrompts[promptIndex] = updatedPrompt;\n-    handleUpdateQuestion(questionIndex, updatedQuestions[questionIndex]);\n-  }, [questions, handleUpdateQuestion]);\n-\n-  const handleQuestionDataChange = useCallback((questionIndex: number, field: string, value: string) => {\n-    setQuestions(prev => prev.map((q, i) => \n-      i === questionIndex \n-        ? { \n-            ...q, \n-            data: { \n-              prompt: q.data?.prompt || '',\n-              teacherScript: q.data?.teacherScript || '',\n-              ...q.data,\n-              [field]: value \n-            } \n-          }\n-        : q\n-    ));\n-  }, []);\n-\n-  const [isSaving, setIsSaving] = useState(false);\n-\n-  const handleSaveLesson = async () => {\n-    try {\n-      if (!currentLessonId || !selectedSubtopicId) {\n-        toast.error('Please select a subtopic and lesson first');\n-        return;\n-      }\n-\n-      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\n-      if (sessionError) throw sessionError;\n-      \n-      if (!session?.user) {\n-        toast.error('Please sign in to save lessons');\n-        return;\n-      }\n-\n-      // Get user's role from session\n-      const userRole = session.user.user_metadata?.role;\n-      console.log('Current user role:', userRole);\n-      console.log('📝 Saving content heading:', {\n-        contentHeading,\n-        currentLessonId,\n-        selectedSubtopicId,\n-        timestamp: new Date().toISOString()\n-      });\n-\n-      // Create metadata object\n-      const lessonMetadata = {\n-        lastEdited: new Date().toISOString(),\n-        version: 1,\n-        status: 'draft' \n-      };\n-\n-      // Complete lesson data with all fields\n-      const lessonData = {\n-        id: currentLessonId,\n-        title: lessonTitle,\n-        content: lessonContent,\n-        metadata: lessonMetadata, // Supabase will automatically handle JSON conversion\n-        content_type: 'html',\n-        lesson_type: 'lesson',\n-        grade_id: selectedGradeId,\n-        topic_id: selectedTopicId,\n-        subtopic_id: selectedSubtopicId,\n-        user_id: session.user.id,\n-        updated_at: new Date().toISOString(),\n-        role: userRole, // Include role in the payload\n-        description: '',\n-        prerequisites: [],\n-        media_type: 'image',\n-        media_url: '',\n-        contentheading: contentHeading || ''\n-      };\n-\n-      console.log('📦 Data being sent to Supabase:', lessonData);\n-\n-      // Save lesson with all fields\n-      const { data, error: lessonError } = await supabase\n-        .from('lessons')\n-        .upsert(lessonData, { \n-          onConflict: 'id'\n-        })\n-        .select();\n-\n-      if (lessonError) throw lessonError;\n-\n-      // 2. Save lesson content\n-      const { data: existingContent } = await supabase\n-        .from('lesson_content')\n-        .select('id')\n-        .eq('lesson_id', currentLessonId)\n-        .single();\n-\n-      const contentMetadata = {\n-        lastEdited: new Date().toISOString(),\n-        version: 1,\n-        status: 'draft'\n-      };\n-\n-      const contentUpdate = {\n-        id: existingContent?.id || crypto.randomUUID(),\n-        lesson_id: currentLessonId,\n-        content: [lessonContent],\n-        metadata: contentMetadata, // Supabase will automatically handle JSON conversion\n-        content_type: 'html',\n-        user_id: session.user.id,\n-        updated_at: new Date().toISOString(),\n-        created_at: new Date().toISOString()\n-      };\n-\n-      const { error: contentError } = await supabase\n-        .from('lesson_content')\n-        .upsert(contentUpdate, { onConflict: 'id' });\n-\n-      if (contentError) throw contentError;\n-\n-      // 3. Save questions\n-      for (const question of questions) {\n-        const questionData = {\n-          id: question.id,\n-          lesson_id: currentLessonId,\n-          type: question.type,\n-          title: question.title,\n-          metadata: question.metadata,\n-          data: question.data,\n-          updated_at: new Date().toISOString(),\n-          user_id: session.user.id\n-        };\n-\n-        const { error: questionError } = await supabase\n-          .from('questions')\n-          .upsert(questionData, { onConflict: 'id' });\n-\n-        if (questionError) throw questionError;\n-\n-        //4. Save exercise prompts for this question\n-        if (question.exercisePrompts) {\n-          for (const prompt of question.exercisePrompts) {\n-            const promptData = {\n-              id: prompt.id,\n-              question_id: question.id,\n-              text: prompt.text,\n-              media: prompt.media,\n-              type: prompt.type,\n-              narration: prompt.narration,\n-              saytext: prompt.saytext,\n-              user_id: session.user.id,\n-              updated_at: new Date().toISOString()\n-            };\n-\n-            const { error: promptError } = await supabase\n-              .from('exercise_prompts')\n-              .upsert(promptData, { onConflict: 'id' });\n-\n-            if (promptError) throw promptError;\n-          }\n-        }\n-      }\n-\n-      // 5. Save activities\n-      if (activities.length > 0) {\n-        const activitiesData = activities.map(activity => ({\n-          id: activity.id,\n-          lesson_id: currentLessonId,\n-          type: activity.type,\n-          title: activity.title,\n-          name: activity.name,\n-          instructions: activity.instructions,\n-          media: activity.media,\n-          data: activity.data,\n-          created_at: new Date().toISOString()\n-        }));\n-\n-        const { error: activitiesError } = await supabase\n-          .from('activities')\n-          .upsert(activitiesData, { onConflict: 'id' });\n-\n-        if (activitiesError) throw activitiesError;\n-      }\n-\n-      // After successful save\n-      console.log('✅ Content heading saved successfully:', {\n-        contentHeading,\n-        lessonId: currentLessonId,\n-        timestamp: new Date().toISOString()\n-      });\n-\n-      toast.success('Lesson saved successfully');\n-    } catch (err) {\n-      const error = err as PostgrestError;\n-      console.error('❌ Error saving content heading:', {\n-        error: error.message,\n-        contentHeading,\n-        lessonContent,\n-        lessonId: currentLessonId,\n-        timestamp: new Date().toISOString()\n-      });\n-      toast.error(`Failed to save lesson: ${error.message}`);\n-\n-\n-    }\n-  };\n-\n-  const handleSaveQuestion = async (question: Question, index: number) => {\n-    const loadingToast = toast.loading(`Saving question ${index + 1}...`);\n-    \n-    try {\n-      const { data: { session } } = await supabase.auth.getSession();\n-      if (!session?.user) {\n-        toast.error('Please sign in to save question', { id: loadingToast });\n-        return;\n-      }\n-\n-      // Save question\n-      const questionData = {\n-        id: question.id,\n-        lesson_id: currentLessonId,\n-        type: question.type,\n-        title: question.title,\n-        metadata: question.metadata,\n-        data: {\n-          prompt: question.data?.prompt ?? '',\n-          teacherScript: question.data?.teacherScript ?? '',\n-          followup_prompt: question.data?.followup_prompt ?? [],\n-          sampleAnswer: question.data?.sampleAnswer || undefined,  // Convert null to undefined\n-          answer: question.data?.answer || undefined  // Convert null to undefined\n-        } as const,\n-        user_id: session.user.id,\n-        updated_at: new Date().toISOString()\n-      };\n-\n-      const { error: questionError } = await supabase\n-        .from('questions')\n-        .upsert(questionData, { onConflict: 'id' });\n-\n-      if (questionError) throw questionError;\n-\n-      // Save exercise prompts if they exist\n-      if (question.exercisePrompts?.length) {\n-        for (const prompt of question.exercisePrompts) {\n-          const promptData = {\n-            id: prompt.id,\n-            question_id: question.id,\n-            text: prompt.text,\n-            type: prompt.type,\n-            narration: prompt.narration,\n-            saytext: prompt.saytext,\n-            media: prompt.media,\n-            user_id: session.user.id,\n-            updated_at: new Date().toISOString()\n-          };\n-\n-          const { error: promptError } = await supabase\n-            .from('exercise_prompts')\n-            .upsert(promptData, { onConflict: 'id' });\n-\n-          if (promptError) throw promptError;\n-        }\n-      }\n-\n-      toast.success(`Question ${index + 1} saved successfully`, { id: loadingToast });\n-    } catch (error) {\n-      console.error('Error saving question:', error);\n-      toast.error(`Failed to save question ${index + 1}`, { id: loadingToast });\n-    }\n-  };\n-\n-  const handleSaveActivity = async (activity: Activity) => {\n-    try {\n-      await contentService.saveActivity(activity);\n-      toast.success('Activity saved');\n-    } catch (error) {\n-      console.error('Failed to save activity:', error);\n-      toast.error('Failed to save activity');\n-    }\n-  };\n-\n-  // Effects\n-  useEffect(() => {\n-    const fetchGrades = async () => {\n-      try {\n-        const { data, error } = await supabase\n-          .from('grades')\n-          .select('*')\n-          .order('name');\n-\n-        if (error) {\n-          console.error('Supabase error:', error);\n-          throw error;\n-        }\n-\n-        if (!data) {\n-          throw new Error('No data returned from Supabase');\n-        }\n-\n-        // Map the grades to match your interface\n-        const validGrades = data.map((grade: any) => ({\n-          _id: grade.id,\n-          id: grade.id,\n-          name: grade.name,\n-          level: grade.level || 0,  // Add default value if not provided\n-          orderIndex: grade.order_index || 0,  // Add default value if not provided\n-          topics: []\n-        }));\n-        \n-        setGrades(validGrades);\n-      } catch (error) {\n-        console.error('Error fetching grades:', error);\n-        toast.error('Failed to fetch grades');\n-      }\n-    };\n-\n-    fetchGrades();\n-  }, []);\n-\n-  // Topic Selection\n-  useEffect(() => {\n-    const fetchTopics = async () => {\n-      if (!selectedGradeId) return;\n-      \n-      try {\n-        const { data, error } = await supabase\n-          .from('topics')\n-          .select('*')\n-          .eq('grade_id', selectedGradeId)\n-          .order('title');\n-\n-        if (error) {\n-          throw error;\n-        }\n-\n-        // Map the topics to match your interface\n-        const validTopics = (data || []).map((topic: any) => ({\n-          _id: topic.id,\n-          id: topic.id,\n-          name: topic.title,\n-          title: topic.title,\n-          grade_id: topic.grade_id,\n-          subtopics: []\n-        }));\n-        \n-        setTopics(validTopics);\n-      } catch (error) {\n-        console.error('Error fetching topics:', error);\n-        toast.error('Failed to fetch topics');\n-      }\n-    };\n-\n-    fetchTopics();\n-  }, [selectedGradeId]);\n-\n-  // Subtopic Selection\n-  useEffect(() => {\n-    const fetchSubtopics = async () => {\n-      if (!selectedTopicId) return;\n-      \n-      try {\n-        // Use content service to fetch subtopics\n-        const subtopicsData = await contentService.fetchSubtopics(selectedTopicId);\n-        console.log('Fetched subtopics:', subtopicsData);\n-\n-        const validSubtopics = subtopicsData.map((subtopic: any) => ({\n-          id: subtopic.id,\n-          title: subtopic.title,\n-          description: subtopic.description,\n-          topic_id: subtopic.topic_id,\n-          lessons: [],\n-          order_index: subtopicsData.length\n-        }));\n-        \n-        setSubtopics(validSubtopics);\n-        \n-        // Update global state\n-        if (selectedSubtopic) {\n-          setSelectedSubtopic(selectedSubtopic);\n-        }\n-      } catch (err) {\n-        const error = err as Error;\n-        console.error('Error fetching subtopics:', error);\n-        toast.error('Failed to fetch subtopics');\n-      }\n-    };\n-\n-    fetchSubtopics();\n-  }, [selectedTopicId, selectedSubtopic, setSelectedSubtopic]);\n-\n-  // Add effect to monitor subtopics state\n-  useEffect(() => {\n-    console.log('Current subtopics state:', subtopics);\n-  }, [subtopics]);\n-\n-  // Add fetchLessons function\n-  const fetchLessons = useCallback(async () => {\n-    if (!selectedSubtopicId) return;\n-    try {\n-      const { data, error } = await supabase\n-        .from('lessons')\n-        .select('*')\n-        .eq('subtopic_id', selectedSubtopicId)\n-        .order('title');\n-\n-      if (error) {\n-        throw error;\n-      }\n-      \n-      // Map the lessons to ensure they have _id\n-      const validLessons = (data || []).map((lesson: any) => ({\n-        ...lesson,\n-        _id: lesson._id || lesson.id, // Use _id if available, otherwise use id\n-        title: lesson.title || 'Untitled Lesson'\n-      })).filter((lesson: any) => lesson._id); // Only include lessons with valid IDs\n-      \n-      setLessons(validLessons);\n-    } catch (error) {\n-      console.error('Error fetching lessons:', error);\n-      toast.error('Failed to fetch lessons');\n-    }\n-  }, [selectedSubtopicId]);\n-  // Add loadLessonContent function\n-  const isLoading = useRef(false);\n-  const loadLessonContent = useCallback(async (lessonId: string) => {\n-    // Prevent multiple simultaneous loads\n-    if (isLoading.current) return;\n-    isLoading.current = true;\n-\n-    const controller = new AbortController();\n-\n-    try {\n-      // Clear existing content first\n-      setLessonTitle('');\n-      setContentHeading('');\n-      setLessonContent('');\n-      setQuestions([]);\n-      \n-      // First fetch lesson data\n-      const { data: lessonData, error: lessonError } = await supabase\n-        .from('lessons')\n-        .select('*')\n-        .eq('id', lessonId)\n-        .single()\n-        \n-\n-      if (lessonError) {\n-        console.error('Lesson fetch error:', lessonError);\n-        throw lessonError;\n-      }\n-\n-      // Set lesson data\n-      setLessonTitle(lessonData.title || '');\n-      setContentHeading(lessonData.content || '');\n-\n-      // Then fetch lesson content with explicit headers\n-      const { data: contentData, error: contentError } = await supabase\n-        .from('lesson_content')\n-        .select('*')\n-        .eq('lesson_id', lessonId)\n-        .order('updated_at', { ascending: false })\n-        .limit(1)\n-        .maybeSingle();\n-\n-      if (contentError) {\n-        console.error('Content fetch error:', contentError);\n-        throw contentError;\n-      }\n-\n-      // Set content if available\n-      if (contentData?.content) {\n-        setLessonContent(typeof contentData.content === 'string' \n-          ? contentData.content \n-          : JSON.stringify(contentData.content)\n-        );\n-      }\n-\n-    } catch (error: unknown) {\n-      if (error instanceof Error && error.name === 'AbortError') {\n-        console.log('Request aborted');\n-        return;\n-      }\n-      console.error('Error loading lesson:', error);\n-      toast.error('Failed to load lesson content');\n-      \n-      // Reset states on error\n-      setLessonTitle('');\n-      setContentHeading('');\n-      setLessonContent('');\n-      setQuestions([]);\n-    } finally {\n-      isLoading.current = false;\n-    }\n-\n-    return () => {\n-      controller.abort();\n-    };\n-  }, []); // Empty dependencies since we're using closure over state setters\n-\n-  // // Add effect for fetching lessons when subtopic changes\n-  useEffect(() => {\n-    if (selectedSubtopicId) {\n-      fetchLessons();\n-    }\n-  }, [selectedSubtopicId, fetchLessons]);\n-\n-  // Add effect for loading lesson content when currentLessonId changes\n-    useEffect(() => {\n-    let isMounted = true;\n-    let timeoutId: NodeJS.Timeout;\n-\n-    const loadContent = async () => {\n-      if (!currentLessonId || !isMounted) return;\n-\n-      // Clear previous timeout if exists\n-      if (timeoutId) clearTimeout(timeoutId);\n-\n-      // Set new timeout for debouncing\n-      timeoutId = setTimeout(() => {\n-        if (isMounted) {\n-          loadLessonContent(currentLessonId);\n-        }\n-      }, 300);\n-    };\n-\n-    loadContent();\n-\n-    // Cleanup function\n-    return () => {\n-      isMounted = false;\n-      if (timeoutId) clearTimeout(timeoutId);\n-      if (isLoading.current) isLoading.current = false;\n-    };\n-  }, [currentLessonId]); // Remove loadLessonContent from dependencies\n-\n-  useEffect(() => {\n-    console.log('Current lessons state:', lessons);\n-  }, [lessons]);\n-\n-    // Add keyboard shortcut for saving\n-  useEffect(() => {\n-    const handleKeyDown = (e: KeyboardEvent) => {\n-      if ((e.ctrlKey || e.metaKey) && e.key === 's') {\n-        e.preventDefault();\n-        handleSaveLesson();\n-      }\n-    };\n-\n-    window.addEventListener('keydown', handleKeyDown);\n-    return () => window.removeEventListener('keydown', handleKeyDown);\n-  }, [handleSaveLesson]);\n-\n-  // Add SaveFeedback component\n-  const SaveFeedback = useCallback(() => {\n-    if (saveProgress === 'idle') return null;\n-\n-    return (\n-    <div className=\"fixed bottom-4 right-4\">\n-      {saveProgress === 'saving' && (\n-        <div className=\"flex items-center gap-2 bg-background border rounded-lg px-4 py-2 shadow-lg\">\n-          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n-          <span className=\"text-sm\">Saving changes...</span>\n-        </div>\n-      )}\n-      {saveProgress === 'saved' && (\n-        <div className=\"flex items-center gap-2 bg-green-500 text-white rounded-lg px-4 py-2 shadow-lg\">\n-          <Check className=\"h-4 w-4\" />\n-          <span className=\"text-sm\">Changes saved</span>\n-        </div>\n-      )}\n-      {saveProgress === 'error' && (\n-        <div className=\"flex items-center gap-2 bg-destructive text-destructive-foreground rounded-lg px-4 py-2 shadow-lg\">\n-          <X className=\"h-4 w-4\" />\n-          <span className=\"text-sm\">Error saving changes</span>\n-        </div>\n-      )}\n-    </div>\n-  );\n-  }, [saveProgress]);\n-\n-  // Update handlers\n-  const handleGradeSelect = (gradeId: string) => {\n-    // Always keep sidebar open during selection\n-    setIsSidebarCollapsed(false);\n-    setIsSidebarLocked(true);\n-    \n-    // Batch state updates\n-    requestAnimationFrame(() => {\n-      setSelectedGradeId(gradeId);\n-      setSelectedGrade(gradeId);\n-      setSelectedTopicId(null);\n-      setSelectedTopic('');\n-      setSelectedSubtopicId(null);\n-      setSelectedSubtopic('');\n-      setCurrentLessonId(null);\n-      \n-      if (isViewMode) {\n-        setExpandedGrade(gradeId);\n-      }\n-    });\n-  };\n-\n-  const handleTopicSelect = (value: string) => {\n-    setSelectedTopicId(value);\n-    setSelectedTopic(value);\n-    setSelectedSubtopicId(null);\n-    setSelectedSubtopic('');\n-    setCurrentLessonId(null);\n-  };\n-\n-  const handleSubtopicSelect = (value: string) => {\n-    setSelectedSubtopicId(value);\n-    setSelectedSubtopic(value);\n-    setCurrentLessonId(null);\n-  };\n-\n-  const handleLessonSelect = async (lessonId: string) => {\n-    try {\n-      // Lock sidebar during selection\n-      setIsSidebarLocked(true);\n-      setIsSidebarCollapsed(false);\n-      setCurrentLessonId(lessonId);\n-      \n-      // 1. Fetch lesson data\n-      const { data: lessonData, error: lessonError } = await supabase\n-        .from('lessons')\n-        .select('*')\n-        .eq('id', lessonId)\n-        .single();\n-\n-      if (lessonError) throw lessonError;\n-\n-      // 2. Fetch questions with exercise prompts\n-      const { data: questionsData, error: questionsError } = await supabase\n-        .from('questions')\n-        .select(`\n-          *,\n-          exercise_prompts (*)\n-        `)\n-        .eq('lesson_id', lessonId);\n-\n-      if (questionsError) throw questionsError;\n-\n-      // 3. Fetch activities - removed order_index\n-      const { data: activitiesData, error: activitiesError } = await supabase\n-        .from('activities')\n-        .select('*')\n-        .eq('lesson_id', lessonId);\n-\n-      if (activitiesError) throw activitiesError;\n-\n-      // Format questions with their exercise prompts\n-      const formattedQuestions = questionsData?.map(q => ({\n-        ...q,\n-        data: q.data || {},\n-        exercisePrompts: q.exercise_prompts || []\n-      })) || [];\n-\n-      // Set all states\n-      setLessonTitle(lessonData.title || '');\n-      setLessonContent(lessonData.content || '');\n-      setQuestions(formattedQuestions);\n-      setActivities(activitiesData || []);\n-\n-      // After successful load, unlock sidebar and allow collapse\n-      setTimeout(() => {\n-        setIsSidebarLocked(false);\n-        if (!isSidebarLocked) {\n-          setIsSidebarCollapsed(true);\n-        }\n-      }, 300);\n-\n-    } catch (error) {\n-      console.error('Error loading lesson:', error);\n-      toast.error('Failed to load lesson');\n-      // Reset states on error\n-      setLessonTitle('');\n-      setLessonContent('');\n-      setQuestions([]);\n-      setActivities([]);\n-    }\n-    if (!isSidebarLocked) {\n-      setIsSidebarCollapsed(true);\n-    }\n-  };\n-\n-  // Update the expansion handlers\n-  const handleTopicExpand = async (topicId: string) => {\n-    setExpandedTopic(expandedTopic === topicId ? null : topicId);\n-    setSelectedTopicId(topicId);\n-    \n-    // Load subtopics when topic is expanded\n-    if (topicId) {\n-      setIsLoadingSubtopics(true);\n-      try {\n-        const { data: subtopicsData, error } = await supabase\n-          .from('subtopics')\n-          .select('*')\n-          .eq('topic_id', topicId)\n-          .order('order_index');\n-\n-        if (error) throw error;\n-        setSubtopics(subtopicsData || []);\n-      } catch (error) {\n-        console.error('Error loading subtopics:', error);\n-        toast.error('Failed to load subtopics');\n-      } finally {\n-        setIsLoadingSubtopics(false);\n-      }\n-    }\n-  };\n-\n-  const handleSubtopicExpand = async (subtopicId: string) => {\n-    setExpandedSubtopic(expandedSubtopic === subtopicId ? null : subtopicId);\n-    setSelectedSubtopicId(subtopicId);\n-    \n-    if (subtopicId) {\n-      setIsLoadingLessons(true);\n-      try {\n-        const { data: lessonsData, error } = await supabase\n-          .from('lessons')\n-          .select('*')\n-          .eq('subtopic_id', subtopicId)\n-          .order('order_index');\n-\n-        if (error) throw error;\n-        setLessons(lessonsData || []);\n-      } catch (error) {\n-        console.error('Error loading lessons:', error);\n-        toast.error('Failed to load lessons');\n-      } finally {\n-        setIsLoadingLessons(false);\n-      }\n-    }\n-  };\n-\n-  const handleQuestionExpand = (index: number) => {\n-    setExpandedQuestion(expandedQuestion === index ? null : index);\n-  };\n-\n-  const handleActivityExpand = (index: number) => {\n-    setExpandedActivity(expandedActivity === index ? null : index);\n-  };\n-\n-  // Add effect to save mode changes to localStorage\n-  useEffect(() => {\n-    localStorage.setItem('lessonManagementViewMode', isViewMode.toString());\n-  }, [isViewMode]);\n-\n-  // Add handlers for creating new items\n-  const handleCreateGrade = async () => {\n-    try {\n-      const response = await fetch(`${API_ENDPOINT}/grades`, {\n-        method: 'POST',\n-        headers: { 'Content-Type': 'application/json' },\n-        body: JSON.stringify({ name: newItemData.name })\n-      });\n-\n-      if (!response.ok) throw new Error('Failed to create grade');\n-      const data = await response.json();\n-      \n-      if (!data.success) throw new Error(data.message || 'Failed to create grade');\n-      \n-      // Update grades list\n-      setGrades([...grades, data.data.grade]);\n-      setModalState({ ...modalState, showAddGrade: false });\n-      setNewItemData({ name: '', description: '' });\n-      toast.success('Grade created successfully');\n-    } catch (error) {\n-      console.error('Error creating grade:', error);\n-      toast.error('Failed to create grade');\n-    }\n-  };\n-\n-  const handleCreateTopic = async () => {\n-    if (!selectedGradeId) {\n-      toast.error('Please select a grade first');\n-      return;\n-    }\n-\n-    try {\n-      const newTopic = await contentService.createTopic({\n-        title: newItemData.name, // Map from newItemData.name to title\n-        description: newItemData.description,\n-        gradeId: selectedGradeId\n-      });\n-\n-      setTopics(prev => [...prev, newTopic]);\n-      toast.success('Topic created successfully');\n-      setModalState({ ...modalState, showAddTopic: false });\n-      setNewItemData({ name: '', description: '' });\n-    } catch (err) {\n-      const error = err instanceof Error ? err.message : String(err);\n-      console.error('Error creating topic:', error);\n-      toast.error('Failed to create topic');\n-    }\n-  };\n-    \n-  \n-\n-\n-  const handleCreateSubtopic = async (data: { title: string; description?: string }) => {\n-    try {\n-      if (!selectedTopicId) {\n-        toast.error('Please select a topic first');\n-        return;\n-      }\n-\n-      const newSubtopic = await contentService.createSubtopic({\n-        ...data,\n-        topicId: selectedTopicId\n-      });\n-\n-      setSubtopics(prev => [...prev, {\n-        _id: newSubtopic.id,\n-        id: newSubtopic.id,\n-        name: newSubtopic.title,\n-        title: newSubtopic.title,\n-        description: newSubtopic.description,\n-        topic_id: newSubtopic.topic_id,\n-        orderIndex: prev.length,\n-        lessons: []\n-      }]);\n-\n-      toast.success('Subtopic created successfully');\n-      setModalState(prev => ({ ...prev, showAddSubtopic: false }));\n-    } catch (err) {\n-      const error = err as Error;\n-      console.error('Error creating subtopic:', error);\n-      toast.error('Failed to create subtopic');\n-    }\n-  };\n-\n-  const handleUpdateSubtopic = async (subtopicId: string, data: { title: string; description?: string }) => {\n-    try {\n-      const { data: updatedSubtopic, error } = await supabase\n-        .from('sub_topics')\n-        .update(data)\n-        .eq('id', subtopicId)\n-        .select()\n-        .single();\n-\n-      if (error) throw error;\n-      \n-      setSubtopics(prev => prev.map(subtopic => \n-        subtopic.id === subtopicId \n-          ? {\n-              ...subtopic,\n-              name: updatedSubtopic.title\n-            }\n-          : subtopic\n-      ));\n-\n-      toast.success('Subtopic updated successfully');\n-    } catch (err) {\n-      const error = err as Error;\n-      console.error('Error updating subtopic:', error);\n-      toast.error('Failed to update subtopic');\n-    }\n-  };\n-\n-  const handleDeleteSubtopic = async (subtopicId: string) => {\n-    try {\n-      await contentService.deleteSubtopic(subtopicId);\n-      setSubtopics(prev => prev.filter(subtopic => subtopic.id !== subtopicId));\n-      setSelectedSubtopicId(null);\n-      toast.success('Subtopic deleted successfully');\n-    } catch (err) {\n-      const error = err as Error;\n-      console.error('Error deleting subtopic:', error);\n-      toast.error('Failed to delete subtopic');\n-    }\n-  };\n-\n-  const handleCreateLesson = async () => {\n-    if (!selectedSubtopicId) {\n-      toast.error('Please select a subtopic first');\n-      return;\n-    }\n-\n-    try {\n-      // First create the lesson\n-      const { data: newLesson, error: lessonError } = await supabase\n-        .from('lessons')\n-        .insert({\n-          title: newItemData.name,\n-          duration: 0,\n-          topic_id: selectedTopicId,\n-          subtopic_id: selectedSubtopicId,\n-          content: '', // Empty rich text content initially\n-          status: 'draft'\n-        })\n-        .select()\n-        .single();\n-\n-      if (lessonError) throw lessonError;\n-\n-      // Create initial question\n-      const { data: newQuestion, error: questionError } = await supabase\n-        .from('questions')\n-        .insert({\n-          lesson_id: newLesson.id,\n-          type: 'speaking', // default type\n-          title: 'Question 1',\n-          data: {\n-            prompt: '',\n-            teacherScript: '',\n-            options: []\n-          },\n-          order_index: 0\n-        })\n-        .select()\n-        .single();\n-\n-      if (questionError) throw questionError;\n-\n-      // Create initial exercise prompts for the question\n-      const { error: promptsError } = await supabase\n-        .from('exercise_prompts')\n-        .insert([\n-          {\n-            question_id: newQuestion.id,\n-            text: '',\n-            type: 'image',\n-            narration: '',\n-            saytext: '',\n-            media: [],\n-            order_index: 0\n-          },\n-          {\n-            question_id: newQuestion.id,\n-            text: '',\n-            type: 'gif',\n-            narration: '',\n-            saytext: '',\n-            media: [],\n-            order_index: 1\n-          }\n-        ]);\n-\n-      if (promptsError) throw promptsError;\n-\n-      // Create initial activity\n-      // const { error: activityError } = await supabase\n-      //   .from('activities')\n-      //   .insert({\n-      //     lesson_id: newLesson.id,\n-      //     type: 'practice',\n-      //     title: '',\n-      //     instructions: '',\n-      //     media: [],\n-      //     data: {\n-      //       prompt: '',\n-      //       teacherScript: '',\n-      //       media: []\n-      //     },\n-      //     order_index: 0\n-      //   });\n-\n-      // if (activityError) throw activityError;\n-\n-      // Update UI state\n-      setLessons(prev => [...prev, newLesson]);\n-      setCurrentLessonId(newLesson.id);\n-      setLessonTitle(newLesson.title);\n-      setModalState({ ...modalState, showAddLesson: false });\n-      setNewItemData({ name: '', description: '' });\n-      toast.success('Lesson created successfully');\n-\n-    } catch (error) {\n-      console.error('Error creating lesson:', error);\n-      toast.error('Failed to create lesson');\n-    }\n-  };\n-\n-  // Effect to handle localStorage after mount\n-  useEffect(() => {\n-    const storedMode = localStorage.getItem('lessonManagementViewMode');\n-    if (storedMode !== null) {\n-      setIsViewMode(storedMode === 'true');\n-    }\n-  }, []);\n-\n-  // Update the cleanupModalState function\n-  const cleanupModalState = useCallback(() => {\n-    document.body.style.pointerEvents = '';\n-    document.body.style.overflow = '';\n-    setModalState({\n-      showAddGrade: false,\n-      showAddTopic: false,\n-      showAddSubtopic: false,\n-      showAddLesson: false\n-    });\n-    setNewItemData({ name: '', description: '' });\n-  }, []);\n-\n-  // Add a function to handle modal state changes\n-  const handleModalStateChange = useCallback((modalType: keyof typeof modalState, open: boolean) => {\n-    if (!open) {\n-      cleanupModalState();\n-    } else {\n-      setModalState(prev => ({ ...prev, [modalType]: open }));\n-    }\n-  }, [cleanupModalState]);\n-\n-  const handleContentSave = async (content: string) => {\n-    const loadingToast = toast.loading(\"Saving content...\", {\n-      action: {\n-        label: \"Close\",\n-        onClick: () => toast.dismiss()\n-      }\n-    });\n-    \n-    try {\n-      const { data: { session } } = await supabase.auth.getSession();\n-      if (!session?.user) {\n-        toast.error('Please sign in to save content', { id: loadingToast });\n-        return;\n-      }\n-\n-      // Get the most recent content entry\n-      const { data: existingContent, error: checkError } = await supabase\n-        .from('lesson_content')\n-        .select('id')\n-        .eq('lesson_id', currentLessonId)\n-        .order('updated_at', { ascending: false })\n-        .limit(1)\n-        .maybeSingle();\n-\n-      // If content exists, update it; if not, insert new\n-      const { error } = await supabase\n-        .from('lesson_content')\n-        .upsert({\n-          id: existingContent?.id, // This ensures we update if id exists\n-          lesson_id: currentLessonId,\n-          content: [content],\n-          content_type: 'text',\n-          metadata: {\n-            heading: contentHeading\n-          },\n-          user_id: session.user.id,\n-          updated_at: new Date().toISOString()\n-        }, {\n-          onConflict: 'id'  // This ensures we update based on lesson_id\n-        });\n-\n-      if (error) throw error;\n-\n-      // Save questions separately\n-      for (const question of questions) {\n-        const { exercisePrompts, ...questionData } = question; // Remove exercisePrompts from question data\n-        \n-        // Save question\n-        const { error: questionError } = await supabase\n-          .from('questions')\n-          .upsert(questionData, {\n-            onConflict: 'id'\n-          })\n-          .select();\n-\n-        if (questionError) throw questionError;\n-\n-        // Save exercise prompts\n-        if (exercisePrompts?.length > 0) {\n-          for (const prompt of exercisePrompts) {\n-            const { error: promptError } = await supabase\n-              .from('exercise_prompts')\n-              .upsert(prompt, {\n-                onConflict: 'id'\n-              })\n-              .select();\n-\n-            if (promptError) throw promptError;\n-          }\n-        }\n-      }\n-      \n-      toast.success(\"Content saved successfully\", {\n-        action: {\n-          label: \"Close\",\n-          onClick: () => toast.dismiss()\n-        },\n-        id: loadingToast,\n-      });\n-      setIsContentEditorOpen(false);\n-    } catch (error) {\n-      console.error('Error saving content:', error);\n-      toast.error(\"Failed to save content\", {\n-        action: {\n-          label: \"Close\",\n-          onClick: () => toast.dismiss()\n-        },\n-        id: loadingToast,\n-      });\n-    }\n-  };\n-\n-  // Add this component for inline editing\n-  const InlineEdit = ({ \n-    value, \n-    onSave, \n-    isEditing, \n-    setIsEditing, \n-    placeholder,\n-    className = \"\"\n-  }: InlineEditProps) => {\n-    const [tempValue, setTempValue] = useState(value);\n-    \n-    return isEditing ? (\n-      <div className=\"flex items-center gap-2\">\n-        <Input\n-          value={tempValue}\n-          onChange={(e) => setTempValue(e.target.value)}\n-          placeholder={placeholder}\n-          className={className}\n-          autoFocus\n-        />\n-        <Button\n-          size=\"sm\"\n-          variant=\"ghost\"\n-          onClick={() => {\n-            onSave(tempValue);\n-            setIsEditing(false);\n-          }}\n-        >\n-          <Check className=\"h-4 w-4 text-green-500\" />\n-        </Button>\n-        <Button\n-          size=\"sm\"\n-          variant=\"ghost\"\n-          onClick={() => setIsEditing(false)}\n-        >\n-          <X className=\"h-4 w-4 text-red-500\" />\n-        </Button>\n-      </div>\n-    ) : (\n-      <div \n-        className=\"group flex items-center gap-2 cursor-pointer\"\n-        onClick={() => setIsEditing(true)}\n-      >\n-        <span className={className}>{value || placeholder}</span>\n-        <Pencil className=\"h-4 w-4 opacity-0 group-hover:opacity-100 transition-opacity\" />\n-      </div>\n-    );\n-  };\n-\n-  // Add this effect to handle auto-collapse after lesson selection\n-  useEffect(() => {\n-    if (currentLessonId && selectedGradeId && selectedTopicId && selectedSubtopicId) {\n-      setIsSidebarLocked(false);\n-      // Optional: add a slight delay before collapsing\n-      setTimeout(() => setIsSidebarCollapsed(true), 300);\n-    }\n-  }, [currentLessonId, selectedGradeId, selectedTopicId, selectedSubtopicId]);\n-\n-  // Add individual save handlers\n-  // const handleSaveQuestion = async (question: Question, index: number) => {\n-  //   try {\n-  //     // Update status to saving\n-  //     setQuestionSaveStatuses(prev => [\n-  //       ...prev.filter(s => s.id !== question.id),\n-  //       { id: question.id, status: 'saving' }\n-  //     ]);\n-\n-  //     const questionUpsert = {\n-  //       id: question.id,\n-  //       lesson_id: currentLessonId,\n-  //       type: question.type,\n-  //       title: question.data?.prompt || 'Untitled Question',\n-  //       metadata: question.metadata || {},\n-  //       data: {\n-  //         prompt: question.data?.prompt || '',\n-  //         teacherScript: question.data?.teacherScript || '',\n-  //         ...question.data\n-  //       },\n-  //       order_index: index,\n-  //       created_at: new Date().toISOString(),\n-  //       updated_at: new Date().toISOString()\n-  //     };\n-\n-  //     const { error: questionError } = await supabase\n-  //       .from('questions')\n-  //       .upsert(questionUpsert);\n-\n-  //     if (questionError) throw questionError;\n-\n-  //     // Update status to saved\n-  //     setQuestionSaveStatuses(prev => [\n-  //       ...prev.filter(s => s.id !== question.id),\n-  //       { id: question.id, status: 'saved', lastSaved: new Date().toISOString() }\n-  //     ]);\n-\n-  //     toast.success(`Question ${index + 1} saved successfully`);\n-  //   } catch (error) {\n-  //     console.error('Error saving question:', error);\n-  //     setQuestionSaveStatuses(prev => [\n-  //       ...prev.filter(s => s.id !== question.id),\n-  //       { id: question.id, status: 'error' }\n-  //     ]);\n-  //     toast.error(`Failed to save question ${index + 1}`);\n-  //   }\n-  // };\n-\n-  const handleSavePrompt = async (questionId: string, prompt: ExercisePrompt, promptIndex: number) => {\n-    try {\n-      setPromptSaveStatuses(prev => [\n-        ...prev.filter(s => s.id !== prompt.id),\n-        { id: prompt.id || '', status: 'saving' } as SaveStatus\n-      ]);\n-\n-      const promptUpsert = {\n-        id: prompt.id,\n-        question_id: questionId,\n-        text: prompt.text || '',\n-        type: prompt.type || 'text',\n-        narration: prompt.narration || '',\n-        saytext: prompt.saytext || '',\n-        media: prompt.media || [],\n-        order_index: promptIndex,\n-        created_at: prompt.created_at || new Date().toISOString(),\n-        updated_at: new Date().toISOString()\n-      };\n-\n-      const { error: promptError } = await supabase\n-        .from('exercise_prompts')\n-        .upsert(promptUpsert);\n-\n-      if (promptError) throw promptError;\n-\n-      setPromptSaveStatuses(prev => [\n-        ...prev.filter(s => s.id !== prompt.id),\n-        { id: prompt.id || '', status: 'saved', lastSaved: new Date().toISOString() } as SaveStatus\n-      ]);\n-\n-      toast.success(`Prompt ${promptIndex + 1} saved successfully`);\n-    } catch (error) {\n-      console.error('Error saving prompt:', error);\n-      setPromptSaveStatuses(prev => [\n-        ...prev.filter(s => s.id !== prompt.id),\n-        { id: prompt.id || '', status: 'error' } as SaveStatus\n-      ]);\n-      toast.error(`Failed to save prompt ${promptIndex + 1}`);\n-    }\n-  };\n-\n-  // Add effect to mark items as draft when edited\n-  useEffect(() => {\n-    questions.forEach(question => {\n-      if (!questionSaveStatuses.find(s => s.id === question.id)) {\n-        setQuestionSaveStatuses(prev => [\n-          ...prev,\n-          { id: question.id, status: 'draft' }\n-        ]);\n-      }\n-    });\n-  }, [questions]);\n-\n-  // Add this function with your other handlers\n-  const handleRefreshLesson = async () => {\n-    if (!currentLessonId) {\n-      toast.error('No lesson selected');\n-      return;\n-    }\n-    \n-    try {\n-      toast.loading('Refreshing lesson content...', {\n-        action: {\n-          label: \"Close\",\n-          onClick: () => toast.dismiss()\n-        },\n-      });\n-      await handleLessonSelect(currentLessonId);\n-      toast.success('Content refreshed', {\n-        action: {\n-          label: \"Close\",\n-          onClick: () => toast.dismiss()\n-        },\n-      });\n-    } catch (error) {\n-      console.error('Error refreshing lesson:', error);\n-      toast.error('Failed to refresh content', {\n-        action: {\n-          label: \"Close\",\n-          onClick: () => toast.dismiss()\n-        },\n-      });\n-    }\n-  };\n-\n-  // Add this function to handle refresh\n-  const handleRefreshContent = async () => {\n-    if (!currentLessonId) {\n-      toast.error('No lesson selected');\n-      return;\n-    }\n-    \n-    toast.loading('Refreshing content...');\n-    try {\n-      await loadLessonContent(currentLessonId);\n-      toast.success('Content refreshed');\n-    } catch (error) {\n-      console.error('Refresh error:', error);\n-      toast.error('Failed to refresh content');\n-    }\n-  };\n-\n-  // Update the sidebar hover mechanism\n-  const handleSidebarHover = useCallback(\n-    debounce((isHovering: boolean) => {\n-      if (!isSidebarLocked && !isNavigating && !isDropdownOpen) {\n-        if (isHovering || document.activeElement?.closest('.sidebar-content')) {\n-          setIsSidebarCollapsed(false);\n-        } else {\n-          setTimeout(() => {\n-            if (!isDropdownOpen) { // Only collapse if dropdown is closed\n-              setIsSidebarCollapsed(true);\n-            }\n-          }, 300);\n-        }\n-      }\n-    }, 100),\n-    [isSidebarLocked, isNavigating, isDropdownOpen]\n-  );\n-\n-  // Update the sidebar JSX\n-  <div \n-    className={cn(\n-      \"transition-all duration-300 ease-in-out relative\",\n-      isSidebarCollapsed ? \"w-20\" : \"w-80\",\n-      \"flex-shrink-0 group\"\n-    )}\n-    onMouseEnter={() => {\n-      handleSidebarHover(true);\n-      // Immediately expand on mouse enter\n-      if (!isSidebarLocked) {\n-        setIsSidebarCollapsed(false);\n-      }\n-    }}\n-    onMouseLeave={() => {\n-      // Only collapse if not interacting with content\n-      if (!document.activeElement?.closest('.sidebar-content')) {\n-        handleSidebarHover(false);\n-      }\n-    }}\n-    onFocus={() => setIsSidebarCollapsed(false)}\n-  >\n-    <Card className={cn(\n-      \"h-full relative sidebar-content\", // Added sidebar-content class\n-      \"transition-shadow duration-300\",\n-      \"hover:shadow-lg\"\n-    )}>\n-      {/* Rest of sidebar content */}\n-    </Card>\n-  </div>\n-\n-  // Update the sidebar and card styles\n-  return (\n-      <div className=\"container mx-auto py-8\">\n-        {/* Header */}\n-        <div className=\"flex items-center justify-between mb-2\">\n-          {/* ... header content ... */}\n-          <div className=\"flex items-center gap-4\">\n-            <Link href=\"/super-admin\">\n-              <Button variant=\"outline\" className=\"gap-2\">\n-                <ArrowLeft className=\"h-4 w-4\" />\n-                Back\n-              </Button>\n-            </Link>\n-            <div className=\"flex items-center gap-2\">\n-              <h1 className=\"text-2xl font-bold\">Lesson Management</h1>\n-              <Button\n-                variant=\"ghost\"\n-                size=\"icon\"\n-                onClick={handleRefreshLesson}\n-                className=\"ml-2\"\n-                title=\"Refresh lesson content\"\n-              >\n-                <RefreshCw className=\"h-4 w-4\" />\n-              </Button>\n-            </div>\n-            <p className=\"text-sm text-muted-foreground\">Create and manage your educational content</p>\n-          </div>\n-          <div className=\"flex items-center gap-2\">\n-            <Button\n-              variant=\"outline\"\n-              size=\"sm\"\n-              onClick={() => setShowHelpTips(!showHelpTips)}\n-              className=\"gap-2\"\n-            >\n-              {showHelpTips ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n-              {showHelpTips ? 'Hide Tips' : 'Show Tips'}\n-            </Button>\n-          </div>\n-        </div>\n-        \n-        {/* Main content wrapper - Fix the layout here */}\n-        <div className=\"flex gap-6 h-[calc(100vh-200px)]\">\n-          {/* Improved sidebar */}\n-          <div \n-            className={cn(\n-              \"transition-all duration-300 ease-in-out relative\",\n-              isSidebarCollapsed ? \"w-20\" : \"w-80\",\n-              \"flex-shrink-0 group\"\n-            )}\n-            onMouseEnter={() => {\n-              handleSidebarHover(true);\n-              // Immediately expand on mouse enter\n-              if (!isSidebarLocked) {\n-                setIsSidebarCollapsed(false);\n-              }\n-            }}\n-            onMouseLeave={() => {\n-              // Only collapse if not interacting with content\n-              if (!document.activeElement?.closest('.sidebar-content')) {\n-                handleSidebarHover(false);\n-              }\n-            }}\n-            onFocus={() => setIsSidebarCollapsed(false)}\n-          >\n-            <Card className={cn(\n-              \"h-full relative sidebar-content\", // Added sidebar-content class\n-              \"transition-shadow duration-300\",\n-              \"hover:shadow-lg\"\n-            )}>\n-              {/* Lock button - only show after lesson selection */}\n-              {currentLessonId && (\n-                <Button\n-                  variant=\"ghost\"\n-                  size=\"sm\"\n-                  className=\"absolute top-2 right-2 z-10\"\n-                  onClick={() => {\n-                    setIsSidebarLocked(!isSidebarLocked);\n-                    if (!isSidebarLocked) {\n-                      setIsSidebarCollapsed(false);\n-                    }\n-                  }}\n-                >\n-                  {isSidebarLocked ? <Lock className=\"h-4 w-4\" /> : <Unlock className=\"h-4 w-4\" />}\n-                </Button>\n-              )}\n-\n-              {/* Sidebar content with overflow handling */}\n-              <div className={cn(\n-                \"transition-all duration-300 overflow-hidden\",\n-                isSidebarCollapsed ? \"opacity-0\" : \"opacity-100\"\n-              )}>\n-                <Card className=\"h-full\">\n-                  <CardHeader className=\"pb-3\">\n-                    <div className=\"flex items-center justify-between\">\n-                      <CardTitle className=\"text-lg font-semibold\">Content Management</CardTitle>\n-                      <TooltipProvider>\n-                        <Tooltip>\n-                          <TooltipTrigger>\n-                            <HelpCircle className=\"h-4 w-4 text-muted-foreground\" />\n-                          </TooltipTrigger>\n-                          <TooltipContent>\n-                            <p>Manage your educational content here</p>\n-                          </TooltipContent>\n-                        </Tooltip>\n-                      </TooltipProvider>\n-                      </div>\n-                    <CardDescription>Create and manage your lessons</CardDescription>\n-                  </CardHeader>\n-                  <CardContent className=\"space-y-4\">\n-                    {/* View/Edit Mode Toggle */}\n-                    <div className=\"grid grid-cols-2 gap-2 p-1 bg-muted rounded-lg\">\n-                      <Button\n-                        variant={isViewMode ? \"default\" : \"ghost\"}\n-                        size=\"sm\"\n-                        onClick={() => setIsViewMode(true)}\n-                        className=\"w-full\"\n-                      >\n-                        <Eye className=\"h-4 w-4 mr-2\" />\n-                        View\n-                      </Button>\n-                      <Button\n-                        variant={!isViewMode ? \"default\" : \"ghost\"}\n-                        size=\"sm\"\n-                        onClick={() => setIsViewMode(false)}\n-                        className=\"w-full\"\n-                      >\n-                        <Edit className=\"h-4 w-4 mr-2\" />\n-                        Edit\n-                      </Button>\n-                    </div>\n-\n-                    {/* Grade Selection */}\n-                    <div className=\"space-y-2\">\n-                      <div className=\"flex items-center justify-between\">\n-                        <Label htmlFor=\"grade-select\">Grade</Label>\n-                        {isViewMode && (\n-                          <Button variant=\"ghost\" size=\"sm\" onClick={() => setExpandedGrade(expandedGrade ? null : selectedGrade)}>\n-                            {expandedGrade ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n-                          </Button>\n-                        )}\n-                      </div>\n-                      <Select \n-                        value={selectedGradeId || ''}\n-                        onValueChange={handleGradeSelect}\n-                        onOpenChange={(open) => {\n-                          if (open) {\n-                            // Force sidebar to stay open and lock it\n-                            setIsSidebarCollapsed(false);\n-                            setIsSidebarLocked(true);\n-                          }\n-                        }}\n-                      >\n-                        <SelectTrigger \n-                          id=\"grade-select\" \n-                          className=\"w-full\"\n-                          onClick={(e) => {\n-                            e.stopPropagation(); // Prevent event bubbling\n-                            setIsSidebarCollapsed(false);\n-                            setIsSidebarLocked(true);\n-                          }}\n-                        >\n-                          <SelectValue placeholder=\"Select Grade\" />\n-                        </SelectTrigger>\n-                        <SelectContent \n-                          onCloseAutoFocus={(e) => {\n-                            e.preventDefault();\n-                            setIsSidebarLocked(true);\n-                            setIsSidebarCollapsed(false);\n-                          }}\n-                        >\n-                          {grades.map((grade: Grade) => (\n-                            <SelectItem \n-                              key={`grade-${grade.id || 'new'}`} \n-                              value={grade.id || ''}\n-                              onMouseDown={(e) => {\n-                                e.preventDefault();\n-                                e.stopPropagation();\n-                              }}\n-                            >\n-                              <div className=\"flex items-center gap-2\">\n-                                <BookOpen className=\"h-4 w-4 text-primary\" />\n-                                {grade.name}\n-                              </div>\n-                            </SelectItem>\n-                          ))}\n-                        </SelectContent>\n-                      </Select>\n-                      {!isViewMode && (\n-                      <Button \n-                        variant=\"outline\" \n-                        size=\"sm\" \n-                        className=\"w-full gap-2\"\n-                        onClick={() => setModalState({ ...modalState, showAddGrade: false })}\n-                      >\n-                        <Plus className=\"h-4 w-4\" />\n-                        Add New Grade\n-                      </Button>\n-                      )}\n-                    </div>\n-\n-                    {/* Content Tree View in View Mode */}\n-                    {isViewMode && selectedGrade && (\n-  <div className=\"grid grid-cols-1 gap-6 p-6\">\n-    <Card className=\"border-primary/10\">\n-      <CardHeader>\n-        <div className=\"flex items-center justify-between\">\n-          <CardTitle>Content Structure</CardTitle>\n-          <Badge variant=\"outline\" className=\"text-primary\">\n-            {topics.length} Topics\n-          </Badge>\n-        </div>\n-      </CardHeader>\n-      <CardContent className=\"space-y-6\">\n-        {topics.map((topic) => (\n-          <Card \n-            key={topic.id} \n-            className={cn(\n-              \"border-l-4 transition-all duration-200\",\n-              \"border-l-primary/40 hover:border-l-primary\"\n-            )}\n-          >\n-            <CardHeader className=\"py-4\">\n-              <div className=\"flex items-center justify-between\">\n-                <div className=\"flex items-center gap-2\">\n-                  <Layers className=\"h-5 w-5 text-primary\" />\n-                  <div>\n-                    <h3 className=\"font-medium\">{topic.title}</h3>\n-                    <p className=\"text-sm text-muted-foreground\">\n-                      {subtopics.filter(s => s.topic_id === topic.id).length} Subtopics\n-                    </p>\n-                  </div>\n-                </div>\n-                <Button\n-                  variant=\"ghost\"\n-                  size=\"sm\"\n-                  className=\"hover:bg-destructive/10\"\n-                  onClick={async () => {\n-                    const { canDelete, message } = await checkDeletability('topic', topic.id);\n-                    if (!canDelete) {\n-                      toast.error(message);\n-                      return;\n-                    }\n-                    setItemToDelete({\n-                      id: topic.id,\n-                      type: 'topic',\n-                      title: topic.title\n-                    });\n-                    setDeleteDialogOpen(true);\n-                  }}\n-                >\n-                  <Trash className=\"h-4 w-4\" />\n-                </Button>\n-              </div>\n-\n-              <div className=\"mt-4 pl-4 space-y-4\">\n-                {subtopics\n-                  .filter(subtopic => subtopic.topic_id === topic.id)\n-                  .map((subtopic) => {\n-                    const subtopicLessons = lessons.filter(l => l.subtopic_id === subtopic.id);\n-                    const isEmpty = subtopicLessons.length === 0;\n-                    \n-                    return (\n-                      <Card key={subtopic.id} className=\"border-l-2 border-l-primary/20\">\n-                        <CardHeader className=\"py-3\">\n-                          <div className=\"flex items-center justify-between\">\n-                            <div className=\"flex items-center gap-2\">\n-                              <BookOpen className=\"h-4 w-4 text-primary\" />\n-                              <div>\n-                                <h4 className=\"font-medium\">{subtopic.title}</h4>\n-                                <div className=\"flex items-center gap-2\">\n-                                  <Badge variant=\"outline\">\n-                                    {subtopicLessons.length} Lessons\n-                                  </Badge>\n-                                  {isEmpty && (\n-                                    <Badge variant=\"outline\" className=\"text-yellow-500\">\n-                                      Empty\n-                                    </Badge>\n-                                  )}\n-                                </div>\n-                              </div>\n-                            </div>\n-                            <Button\n-                              variant=\"ghost\"\n-                              size=\"sm\"\n-                              className=\"hover:bg-destructive/10\"\n-                              onClick={async () => {\n-                                const { canDelete, message } = await checkDeletability('subtopic', subtopic.id);\n-                                if (!canDelete) {\n-                                  toast.error(message);\n-                                  return;\n-                                }\n-                                setItemToDelete({\n-                                  id: subtopic.id,\n-                                  type: 'subtopic',\n-                                  title: subtopic.title\n-                                });\n-                                setDeleteDialogOpen(true);\n-                              }}\n-                            >\n-                              <Trash className=\"h-4 w-4\" />\n-                            </Button>\n-                          </div>\n-\n-                          <div className=\"pl-4 mt-2 space-y-2\">\n-                            {subtopicLessons.map((lesson) => {\n-                              const questionCount = lesson.questions?.length || 0;\n-                              const isEmpty = questionCount === 0;\n-                              \n-                              return (\n-                                <Card key={lesson.id} className=\"border-l border-l-primary/10\">\n-                                  <CardHeader className=\"py-2\">\n-                                    <div className=\"flex items-center justify-between\">\n-                                      <div className=\"flex items-center gap-2\">\n-                                        <div className=\"flex flex-col\">\n-                                          <span className=\"text-sm font-medium\">\n-                                            {lesson.title}\n-                                          </span>\n-                                          <div className=\"flex items-center gap-2\">\n-                                            <span className=\"text-xs text-muted-foreground\">\n-                                              {lesson.duration || 0} mins • {questionCount} Questions\n-                                            </span>\n-                                            {isEmpty && (\n-                                              <Badge \n-                                                variant=\"outline\" \n-                                                className=\"text-yellow-500\"\n-                                              >\n-                                                Empty\n-                                              </Badge>\n-                                            )}\n-                                          </div>\n-                                        </div>\n-                                      </div>\n-                                      <Button\n-                                        variant=\"ghost\"\n-                                        size=\"sm\"\n-                                        className=\"hover:bg-destructive/10\"\n-                                        onClick={async () => {\n-                                          const { canDelete, message } = await checkDeletability('lesson', lesson.id);\n-                                          if (!canDelete) {\n-                                            toast.error(message);\n-                                            return;\n-                                          }\n-                                          setItemToDelete({\n-                                            id: lesson.id,\n-                                            type: 'lesson',\n-                                            title: lesson.title\n-                                          });\n-                                          setDeleteDialogOpen(true);\n-                                        }}\n-                                      >\n-                                        <Trash className=\"h-4 w-4\" />\n-                                      </Button>\n-                                    </div>\n-                                  </CardHeader>\n-                                </Card>\n-                              );\n-                            })}\n-                          </div>\n-                        </CardHeader>\n-                      </Card>\n-                    );\n-                  })}\n-              </div>\n-            </CardHeader>\n-          </Card>\n-        ))}\n-      </CardContent>\n-    </Card>\n-  </div>\n-)}\n-\n-                    {/* Regular Edit Mode Content */}\n-                    {!isViewMode && (\n-                      <>\n-                        {/* Existing Topic, Subtopic, and Lesson Selection UI */}\n-                      {/* Topic Selection */}\n-                        {selectedGradeId && (\n-                      <div className=\"space-y-2\">\n-                        <div className=\"flex items-center justify-between\">\n-                        <Label htmlFor=\"topic-select\">Topic</Label>\n-                        </div>\n-                        <Select \n-                              value={selectedTopicId || ''} \n-                              onValueChange={handleTopicSelect}\n-                        >\n-                          <SelectTrigger id=\"topic-select\" className=\"w-full\">\n-                            <SelectValue placeholder=\"Select Topic\" />\n-                          </SelectTrigger>\n-                          <SelectContent>\n-                                {topics.map((topic: Topic) => (\n-                                  <SelectItem \n-                                    key={`topic-${topic.id || 'new'}`} \n-                                    value={topic.id || ''}\n-                                  >\n-                                  <div className=\"flex items-center gap-2\">\n-                                  <Layers className=\"h-4 w-4 text-primary\" />\n-                                    {topic.title}\n-                                  </div>\n-                                </SelectItem>\n-                              ))}\n-                          </SelectContent>\n-                        </Select>\n-                        <Button \n-                          variant=\"outline\" \n-                          size=\"sm\" \n-                          className=\"w-full gap-2\"\n-                          onClick={() => setModalState({ ...modalState, showAddTopic: true })}\n-                        >\n-                          <Plus className=\"h-4 w-4\" />\n-                          Add New Topic\n-                        </Button>\n-                      </div>\n-                    )}\n-\n-                    {/* Subtopic Selection */}\n-                        {selectedTopicId && (\n-                      <div className=\"space-y-2\">\n-                        <div className=\"flex items-center justify-between\">\n-                        <Label htmlFor=\"subtopic-select\">Subtopic</Label>\n-                        </div>\n-                        <Select \n-                              value={selectedSubtopicId || ''} \n-                              onValueChange={handleSubtopicSelect}\n-                        >\n-                          <SelectTrigger id=\"subtopic-select\" className=\"w-full\">\n-                            <SelectValue placeholder=\"Select Subtopic\" />\n-                          </SelectTrigger>\n-                          <SelectContent>\n-                                {subtopics\n-                                  .filter(subtopic => subtopic.id)\n-                                  .map((subtopic, index) => (\n-                                    <SelectItem \n-                                      key={subtopic.id || `subtopic-${index}`}\n-                                      value={subtopic.id || ''}\n-                                    >\n-                                      {subtopic.title || 'Untitled Subtopic'}\n-                                    </SelectItem>\n-                                  ))}\n-                          </SelectContent>\n-                        </Select>\n-                        {!isViewMode && (\n-                          <Button \n-                            variant=\"outline\" \n-                            size=\"sm\" \n-                            className=\"w-full gap-2\"\n-                            onClick={() => setModalState({ ...modalState, showAddSubtopic: true })}\n-                          >\n-                            <Plus className=\"h-4 w-4\" />\n-                            Add New Subtopic\n-                          </Button>\n-                        )}\n-                      </div>\n-                    )}\n-\n-                    {/* Lesson Selection */}\n-                        {selectedSubtopicId && (\n-                      <div className=\"space-y-2\">\n-                        <div className=\"flex items-center justify-between\">\n-                          <Label htmlFor=\"lesson-select\">Lesson</Label>\n-                        </div>\n-                          <Select \n-                            value={currentLessonId || ''} \n-                            onValueChange={handleLessonSelect}\n-                            onOpenChange={(open) => {\n-                              setIsDropdownOpen(open);\n-                              if (open) {\n-                                setIsSidebarCollapsed(false);\n-                                setIsSidebarLocked(true);\n-                              } else {\n-                                // Small delay before unlocking to prevent immediate collapse\n-                                setTimeout(() => {\n-                                  setIsSidebarLocked(false);\n-                                }, 100);\n-                              }\n-                            }}\n-                          >\n-                            <SelectTrigger \n-                              id=\"lesson-select\" \n-                              className=\"w-full\"\n-                              onClick={(e) => {\n-                                e.stopPropagation();\n-                                setIsSidebarCollapsed(false);\n-                                setIsSidebarLocked(true);\n-                              }}\n-                            >\n-                              <SelectValue placeholder=\"Select Lesson\" />\n-                            </SelectTrigger>\n-                            <SelectContent>\n-                              {lessons\n-                                .filter((lesson): lesson is Lesson => lesson !== undefined && lesson !== null)\n-                                .map((lesson: Lesson) => (\n-                                  <SelectItem \n-                                    key={`lesson-${lesson.id || 'new'}`} \n-                                    value={lesson.id || ''}\n-                                  >\n-                                    <div className=\"flex items-center gap-2\">\n-                                      <BookOpen className=\"h-4 w-4 text-primary\" />\n-                                      {lesson.title || 'Untitled Lesson'}\n-                                    </div>\n-                                  </SelectItem>\n-                                ))}\n-                            </SelectContent>\n-                          </Select>\n-                    <Button \n-                            variant=\"outline\" \n-                            size=\"sm\" \n-                            className=\"w-full gap-2\"\n-                        onClick={() => setModalState({ ...modalState, showAddLesson: true })}\n-                          >\n-                            <Plus className=\"h-4 w-4\" />\n-                            Add New Lesson\n-                    </Button>\n-                      </div>\n-                        )}\n-                      </>\n-                    )}\n-                  </CardContent>\n-                </Card>\n-              </div>\n-\n-              {/* Collapsed view */}\n-              {isSidebarCollapsed && (\n-                <div className=\"absolute inset-0 flex flex-col items-center pt-12 gap-4\">\n-                  <BookOpen className=\"h-6 w-6 text-muted-foreground\" />\n-                  <div className=\"w-px h-full bg-border\" />\n-                </div>\n-              )}\n-            </Card>\n-          </div>\n-        \n-\n-          {/* Right Content Area */}\n-          <div className=\"flex-1 overflow-y-auto\">\n-            {isNavigating ? (\n-              <div className=\"flex items-center justify-center h-[400px]\">\n-                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n-                <span className=\"ml-3\">Loading...</span>\n-              </div>\n-            ) : (\n-              <>\n-                {!selectedGradeId ? (\n-                  // Question Types Display Section\n-                  <div className=\"space-y-6\">\n-                    <Card>\n-                      <CardHeader>\n-                        <div className=\"flex items-center justify-between\">\n-                          <div>\n-                            <CardTitle className=\"text-xl font-semibold\">Available Question Types</CardTitle>\n-                            <CardDescription>Browse through different question formats and examples</CardDescription>\n-                          </div>\n-                          <TooltipProvider>\n-                            <Tooltip>\n-                              <TooltipTrigger>\n-                                <HelpCircle className=\"h-5 w-5 text-muted-foreground\" />\n-                              </TooltipTrigger>\n-                              <TooltipContent>\n-                                <p>Click on each type to see detailed examples</p>\n-                              </TooltipContent>\n-                            </Tooltip>\n-                          </TooltipProvider>\n-                        </div>\n-                      </CardHeader>\n-                      <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n-                        {Object.entries(QUESTION_TYPES).map(([type, details]) => (\n-                          <Card key={type} className=\"cursor-pointer hover:bg-accent/50 transition-colors\">\n-                            <CardHeader className=\"p-4\">\n-                              <div className=\"flex items-center justify-between mb-2\">\n-                                <Badge variant=\"outline\" className=\"bg-primary/5 text-lg\">\n-                                  {details.label}\n-                                </Badge>\n-                              </div>\n-                              <CardDescription className=\"text-sm\">\n-                                {details.description || 'No description available'}\n-                              </CardDescription>\n-                              <div className=\"mt-4\">\n-                                <div className=\"text-sm font-medium mb-2\">Example:</div>\n-                                <div className=\"p-3 rounded-md bg-muted/50 text-sm\">\n-                                  {type === 'multiple-choice' && (\n-                                    <>\n-                                      <div className=\"font-medium mb-2\">Q: What is the capital of France?</div>\n-                                      <div className=\"space-y-1 pl-4\">\n-                                        <div>A) Paris</div>\n-                                        <div>B) London</div>\n-                                        <div>C) Berlin</div>\n-                                        <div>D) Madrid</div>\n-                                      </div>\n-                                    </>\n-                                  )}\n-                                  {type === 'fill-in-blank' && (\n-                                    <div className=\"space-y-2\">\n-                                      <div>Complete the sentence:</div>\n-                                      <div>The sun rises in the <span className=\"bg-primary/20 px-2 rounded\">_____</span> and sets in the <span className=\"bg-primary/20 px-2 rounded\">_____</span>.</div>\n-                                    </div>\n-                                  )}\n-                                  {type === 'true-false' && (\n-                                    <div className=\"space-y-2\">\n-                                      <div className=\"font-medium\">Statement:</div>\n-                                      <div>The Earth is flat.</div>\n-                                      <div className=\"mt-2\">\n-                                        <Badge variant=\"outline\" className=\"mr-2\">True</Badge>\n-                                        <Badge variant=\"outline\">False</Badge>\n-                                      </div>\n-                                    </div>\n-                                  )}\n-                                  {type === 'matching' && (\n-                                    <div className=\"space-y-2\">\n-                                      <div className=\"font-medium mb-2\">Match the countries with their capitals:</div>\n-                                      <div className=\"grid grid-cols-2 gap-4\">\n-                                        <div>\n-                                          1. France<br />\n-                                          2. Germany<br />\n-                                          3. Spain\n-                                        </div>\n-                                        <div>\n-                                          • Berlin<br />\n-                                          • Paris<br />\n-                                          • Madrid\n-                                        </div>\n-                                      </div>\n-                                    </div>\n-                                  )}\n-                                  {type === 'ordering' && (\n-                                    <div className=\"space-y-2\">\n-                                      <div className=\"font-medium mb-2\">Arrange in chronological order:</div>\n-                                      <div className=\"space-y-1\">\n-                                        <Badge variant=\"outline\" className=\"mr-2\">1</Badge>World War II<br />\n-                                        <Badge variant=\"outline\" className=\"mr-2\">2</Badge>Industrial Revolution<br />\n-                                        <Badge variant=\"outline\" className=\"mr-2\">3</Badge>Renaissance\n-                                      </div>\n-                                    </div>\n-                                  )}\n-                                  {type === 'short-answer' && (\n-                                    <div className=\"space-y-2\">\n-                                      <div className=\"font-medium\">Question:</div>\n-                                      <div>Explain the water cycle in 2-3 sentences.</div>\n-                                      <div className=\"mt-2 p-2 border border-dashed rounded-md border-primary/30\">\n-                                        Answer space\n-                                      </div>\n-                                    </div>\n-                                  )}\n-                                </div>\n-                              </div>\n-                            </CardHeader>\n-                          </Card>\n-                        ))}\n-                      </CardContent>\n-                    </Card>\n-                  </div>\n-                ) : isViewMode ? (\n-                  <div className=\"space-y-6\">\n-                    {selectedGradeId ? (\n-                      <div className=\"grid grid-cols-1 gap-6\">\n-                        {topics.map((topic) => (\n-                          <Card key={topic.id} className=\"border-l-4 border-l-primary\">\n-                            <CardHeader>\n-                              <div className=\"flex items-center justify-between\">\n-                                <h3 className=\"text-lg font-semibold\">{topic.title}</h3>\n-                              </div>\n-                            </CardHeader>\n-                            <CardContent>\n-                              <div className=\"space-y-4\">\n-                                {subtopics\n-                                  .filter(subtopic => subtopic.topic_id === topic.id)\n-                                  .map((subtopic, index) => (\n-                                    <div key={subtopic.id || `subtopic-${index}`} className=\"border-l-2 pl-4\">\n-                                      <h4 className=\"text-md font-medium mb-2\">{subtopic.name || 'Untitled Subtopic'}</h4>\n-                                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n-                                        {lessons\n-                                          .filter(lesson => lesson.subtopic_id === subtopic.id)\n-                                          .map((lesson) => (\n-                                            <Card \n-                                              key={lesson.id} \n-                                              className={cn(\n-                                                \"cursor-pointer transition-all duration-200\",\n-                                                \"hover:shadow-md hover:translate-y-[-2px]\",\n-                                                \"hover:bg-accent/50 hover:border-primary/50\",\n-                                                \"active:translate-y-[0px]\",\n-                                                currentLessonId === lesson.id && \"border-primary bg-accent/50 shadow-md\",\n-                                                \"group\" // Enable group hover effects\n-                                              )}\n-                                              onClick={() => handleLessonSelect(lesson.id)}\n-                                            >\n-                                              <CardHeader className=\"p-4\">\n-                                                <div className=\"flex flex-col gap-2\">\n-                                                  <div className=\"flex items-center justify-between\">\n-                                                    <div className=\"flex items-center gap-2\">\n-                                                      <BookOpen className={cn(\n-                                                        \"h-4 w-4 text-primary\",\n-                                                        \"transition-transform duration-200\",\n-                                                        \"group-hover:scale-110\"\n-                                                      )} />\n-                                                      <span className=\"font-medium\">{lesson.title}</span>\n-                                                    </div>\n-                                                    <Button\n-                                                      variant=\"outline\"\n-                                                      size=\"sm\"\n-                                                      className={cn(\n-                                                        \"opacity-0 group-hover:opacity-100\",\n-                                                        \"transition-all duration-200\",\n-                                                        \"hover:bg-primary hover:text-primary-foreground\"\n-                                                      )}\n-                                                      disabled={!lesson.content || currentLessonId !== lesson.id}\n-                                                      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n-                                                        e.stopPropagation();\n-                                                        window.location.href = `/teacher/lessons/${lesson.id}`;\n-                                                      }}\n-                                                    >\n-                                                      Start Lesson\n-                                                    </Button>\n-                                                  </div>\n-                                                  <div className=\"flex items-center gap-2\">\n-                                                    <Badge variant=\"outline\" className={cn(\n-                                                      \"bg-primary/5\",\n-                                                      \"transition-colors duration-200\",\n-                                                      \"group-hover:bg-primary/10\"\n-                                                    )}>\n-                                                      {lesson.questions?.length || 0} Questions\n-                                                    </Badge>\n-                                                    <Badge variant=\"outline\" className={cn(\n-                                                      \"bg-primary/5\",\n-                                                      \"transition-colors duration-200\",\n-                                                      \"group-hover:bg-primary/10\"\n-                                                    )}>\n-                                                      {lesson.activities?.length || 0} Activities\n-                                                    </Badge>\n-                                                  </div>\n-                                                </div>\n-                                              </CardHeader>\n-                                            </Card>\n-                                          ))}\n-                                      </div>\n-                                    </div>\n-                                  ))}\n-                              </div>\n-                            </CardContent>\n-                          </Card>\n-                        ))}\n-                      </div>\n-                    ) : (\n-                      <div className=\"text-center py-20\">\n-                        <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n-                        <h3 className=\"text-lg font-medium\">Select a Grade</h3>\n-                        <p className=\"text-sm text-muted-foreground\">\n-                          Choose a grade from the left panel to start managing content\n-                        </p>\n-                      </div>\n-                    )}\n-                  </div>\n-                ) : (\n-                  // Edit Mode Content\n-                  <div className=\"space-y-4\">\n-                    {/* Lesson Title */}\n-                    <Card>\n-                      <CardHeader>\n-                        <div className=\"flex items-center justify-between mb-4\">\n-                          <h2 className=\"text-2xl font-bold\">Lesson Content</h2>\n-                                                    <Button\n-                                                      variant=\"outline\"\n-                                                      size=\"sm\"\n-                            onClick={() => setIsContentEditorOpen(true)}\n-                          >\n-                            <Pencil className=\"h-4 w-4 mr-2\" />\n-                            Edit Content\n-                          </Button>\n-                        </div>\n-                      </CardHeader>\n-                      <CardContent className=\"space-y-4\">\n-                        {/* Lesson Title */}\n-                        <div className=\"flex items-center justify-between\">\n-                          <div className=\"space-y-1\">\n-                            <Label>Lesson Title</Label>\n-                            <InlineEdit\n-                              value={lessonTitle}\n-                              onSave={async (newTitle) => {\n-                                setLessonTitle(newTitle);\n-                                await handleSaveLesson();\n-                              }}\n-                              isEditing={isEditingTitle}\n-                              setIsEditing={setIsEditingTitle}\n-                              placeholder=\"Enter lesson title\"\n-                              className=\"text-lg font-medium\"\n-                            />\n-                          </div>\n-                        </div>\n-\n-                        {/* Content Editor and Display */}\n-                        <div className=\"space-y-4\">\n-                          {isContentEditorOpen ? (\n-                            <div className=\"border rounded-lg p-4\">\n-                              <div className=\"mb-4\">\n-                                <Label>Content Heading</Label>\n-                                <InlineEdit\n-                                  value={contentHeading}\n-                                  onSave={(newHeading) => setContentHeading(newHeading)}\n-                                  isEditing={isEditingHeading}\n-                                  setIsEditing={setIsEditingHeading}\n-                                  placeholder=\"Add content heading\"\n-                                  className=\"text-base text-muted-foreground\"\n-                                />\n-                              </div>\n-                              <RichTextEditor\n-                                value={lessonContent}\n-                                onChange={setLessonContent}\n-                                onSave={async (content) => {\n-                                  await handleContentSave(content);\n-                                  setIsContentEditorOpen(false);\n-                                }}\n-                                placeholder=\"Add lesson content here...\"\n-                              />\n-                            </div>\n-                          ) : lessonContent ? (\n-                            <div className=\"prose prose-sm max-w-none\">\n-                              {contentHeading && (\n-                                <h3 className=\"text-lg font-semibold mb-2\">{contentHeading}</h3>\n-                              )}\n-                              <div dangerouslySetInnerHTML={{ __html: lessonContent }} />\n-                            </div>\n-                          ) : (\n-                            <div className=\"text-center py-8 text-muted-foreground\">\n-                              Click 'Edit Content' to add lesson content\n-                            </div>\n-                          )}\n-                        </div>\n-                      </CardContent>\n-                    </Card>\n-\n-                    {/* Tabs */}\n-                    <Tabs defaultValue=\"questions\" className=\"mt-6\">\n-                    <TabsList className=\"grid w-full grid-cols-2\">\n-                        <TabsTrigger value=\"questions\">\n-                          <MessageSquare className=\"h-4 w-4 mr-2\" />\n-                        Questions\n-                      </TabsTrigger>\n-                        <TabsTrigger value=\"activities\">\n-                          <ActivityIcon className=\"h-4 w-4 mr-2\" />\n-                        Activities\n-                      </TabsTrigger>\n-                    </TabsList>\n-\n-                      {/* Questions Tab */}\n-                      <TabsContent value=\"questions\" className=\"space-y-4\">\n-                      <CardHeader>\n-                          <CardDescription>Add and manage questions for this lesson</CardDescription>\n-                      </CardHeader>\n-                        {questions.map((question, index) => (\n-                          <Card key={index} className={cn(\n-                            \"relative border-l-4 transition-colors duration-200\",\n-                            expandedQuestion === index ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\n-                          )}>\n-                            <CardHeader className=\"pb-3\">\n-                              <div className=\"flex items-center justify-between gap-4\">\n-                                <div className=\"flex items-center gap-3 min-w-0 flex-1\">\n-                                  <div className=\"flex items-center gap-2 flex-shrink-0\">\n-                                    <span className=\"px-2 py-1 bg-primary/10 rounded-md text-sm font-semibold text-primary whitespace-nowrap\">\n-                                      Q {index + 1}\n-                                    </span>\n-                                    <Badge variant=\"outline\" className=\"whitespace-nowrap\">\n-                                      {QUESTION_TYPES[question.type as keyof typeof QUESTION_TYPES]?.label || question.type}\n-                                    </Badge>\n-                                    {question.isDraft && (\n-                                      <Badge variant=\"secondary\" className=\"whitespace-nowrap\">Draft</Badge>\n-                                )}\n-                                  </div>\n-                                      {expandedQuestion !== index && (\n-                                        <div className=\"text-sm text-muted-foreground truncate\">\n-                                          {question.title || 'No question text'} - {question.data?.content || 'No question texts'}\n-                                        </div>\n-                                      )}\n-                                    </div>\n-                                    <div className=\"flex items-center gap-2 flex-shrink-0\">\n-                                      <Button\n-                                        variant=\"ghost\"\n-                                        size=\"sm\"\n-                                        onClick={() => handleQuestionExpand(index)}\n-                                      >\n-                                        {expandedQuestion === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n-                                      </Button>\n-                                      <Button\n-                                        variant=\"ghost\"\n-                                        size=\"sm\"\n-                                        onClick={() => handleRemoveQuestion(index)}\n-                                      >\n-                                        <Trash2 className=\"h-4 w-4 text-destructive\" />\n-                                      </Button>\n-                                    </div>\n-                                  </div>\n-                                </CardHeader>\n-                                {expandedQuestion === index && (\n-                                  <CardContent>\n-                                    <QuestionForm\n-                                      key={index}\n-                                      question={{ \n-                                        ...question, \n-                                        lesson_id: currentLessonId || '',\n-                                        type: isValidQuestionType(question.type) ? question.type : 'speaking',\n-                                        data: {\n-                                          prompt: question.data?.prompt ?? '',\n-                                          teacher_script: question.data?.teacher_script ?? '',\n-                                          followup_prompt: question.data?.followup_prompt ?? [],\n-                                          sample_answer: question.data?.sample_answer ?? '',\n-                                          \n-                                        } \n-                                      }}\n-                                      index={index}\n-                                      onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\n-                                        await handleUpdateQuestion(index, {\n-                                          ...updatedQuestion,\n-                                          data: {\n-                                            prompt: updatedQuestion.data?.prompt ?? '',\n-                                            teacher_script: updatedQuestion.data?.teacher_script ?? '',\n-                                            followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\n-                                            sample_answer: updatedQuestion.data?.sample_answer ?? '',\n-                                            metadata: updatedQuestion.metadata ?? {},\n-                                            },\n-                                            correct_answer: updatedQuestion.correct_answer ?? '',\n-                                            content: updatedQuestion.content ?? ''  // Add default value\n-                                        });\n-                                      }}\n-                                      onRemove={handleRemoveQuestion}\n-                                      onAddExercisePrompt={handleAddExercisePrompt}\n-                                      onRemoveExercisePrompt={handleRemoveExercisePrompt}\n-                                      onExercisePromptChange={handleExercisePromptChange}\n-                                    /><Button \n-                                    size=\"sm\"\n-                                    variant=\"outline\"\n-                                    onClick={() => handleSaveQuestion(question, index)}\n-                                    className=\"ml-2\"\n-                                  >\n-                                    {questionSaveStatuses.find(s => s.id === question.id)?.status === 'saving' ? (\n-                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n-                                    ) : (\n-                                      <Save className=\"h-4 w-4 mr-2\" />\n-                                    )}\n-                                    Save Question\n-                                                    </Button>\n-                                    {/* Exercise Prompts with Save Buttons */}\n-                                    {question.exercisePrompts?.map((prompt, promptIndex) => (\n-                                      <div key={`${question.id}-prompt-${promptIndex}`} className=\"mt-4\"> {/* Updated key */}\n-                                        <div className=\"flex items-center justify-between mb-2\">\n-                                          <h4 className=\"text-sm font-medium\">Exercise Prompt {promptIndex + 1}</h4>\n-                                          <div className=\"flex items-center gap-2\">\n-                                            <TooltipProvider>\n-                                              <Tooltip>\n-                                                <TooltipTrigger asChild>\n-                                                  <Button\n-                                                    size=\"sm\"\n-                                                    variant=\"outline\"\n-                                                    onClick={() => handleSavePrompt(question.id, prompt, promptIndex)}\n-                                                    disabled={promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving'}\n-                                                  >\n-                                                    {promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving' ? (\n-                                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n-                                                    ) : (\n-                                                      <Save className=\"h-4 w-4 mr-2\" />\n-                                                    )}\n-                                                    Save Prompt\n-                                                  </Button>\n-                                                </TooltipTrigger>\n-                                                <TooltipContent>\n-                                                  {`Status: ${promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}`}\n-                                                </TooltipContent>\n-                                              </Tooltip>\n-                                            </TooltipProvider>\n-                                            <Badge variant={\n-                                              promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saved'\n-                                                ? 'secondary'\n-                                                : promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'error'\n-                                                ? 'destructive'\n-                                                : 'default'\n-                                            }>\n-                                              {promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}\n-                                            </Badge>\n-                                                  </div>\n-                                        </div>\n-                                        <ExercisePromptCard\n-                                          key={prompt.id} // Add a unique key here\n-                                          prompt={prompt}\n-                                          promptIndex={promptIndex}\n-                                          onRemove={() => handleRemoveExercisePrompt(index, promptIndex)}\n-                                          onUpdate={(updatedPrompt: ExercisePrompt) => {\n-                                            // Prevent duplicate updates\n-                                            if (updatedPrompt.id === prompt.id) {\n-                                              handleExercisePromptChange(index, promptIndex, updatedPrompt);\n-                                            }\n-                                          }}\n-                                        />\n-                                      </div>\n-                                    ))}\n-                                  </CardContent>\n-                                )}\n-                              </Card>\n-                            ))}\n-\n-                            {/* Add Question Button */}\n-                            <div className=\"flex items-center justify-between\">\n-                              <QuestionTypeSelect \n-                                value={selectedQuestionType} \n-                                onChange={handleQuestionTypeChange}\n-                              />\n-                                        <Button\n-                                          onClick={handleAddQuestion}\n-                                          disabled={!selectedQuestionType}\n-                                        >\n-                                <Plus className=\"h-4 w-4 mr-2\" />\n-                                          Add Question\n-                                        </Button>\n-                                      </div>\n-                      </TabsContent>\n-\n-                      {/* Activities Tab */}\n-                      <TabsContent value=\"activities\" className=\"space-y-4\">\n-                      <CardHeader>\n-                          <CardDescription>Add and manage activities for this lesson</CardDescription>\n-                      </CardHeader>\n-                        {activities.map((activity, index) => (\n-                          <Card key={index}>\n-                            <CardHeader className=\"pb-3\">\n-                              <div className=\"flex items-center justify-between\">\n-                                  <div className=\"flex items-center gap-2\">\n-                                  <Badge variant=\"outline\">Activity {index + 1}</Badge>\n-                                  </div>\n-                                <div className=\"flex items-center gap-2\">\n-                                  <Button\n-                                    variant=\"ghost\"\n-                                    size=\"sm\"\n-                                    onClick={() => handleActivityExpand(index)}\n-                                  >\n-                                    {expandedActivity === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n-                                  </Button>\n-                                  <Button\n-                                    variant=\"ghost\"\n-                                    size=\"sm\"\n-                                    onClick={() => handleRemoveActivity(index)}\n-                                  >\n-                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\n-                                  </Button>\n-                                </div>\n-                              </div>\n-                            </CardHeader>\n-                            {expandedActivity === index && (\n-                              <CardContent>\n-                                <div className=\"space-y-4\">\n-                                  <div className=\"space-y-2\">\n-                                    <Label>Instructions</Label>\n-                                    <Textarea\n-                                      value={activity.instructions}\n-                                      onChange={(e) => handleUpdateActivity(index, {\n-                                        ...activity,\n-                                        instructions: e.target.value\n-                                      })}\n-                                      placeholder=\"Enter activity instructions\"\n-                                    />\n-                                  </div>\n-                                    \n-                                    {/* Media Section */}\n-                                    <div className=\"space-y-2\">\n-                                      <Label>Media</Label>\n-                                      {activity.media?.map((media, mediaIndex) => (\n-                                        <div key={mediaIndex} className=\"flex items-center gap-2\">\n-                                          <Input\n-                                            value={media.url}\n-                                            onChange={(e) => {\n-                                              const updatedMedia = [...(activity.media || [])];\n-                                              updatedMedia[mediaIndex] = {\n-                                                type: media.type,\n-                                                url: e.target.value\n-                                              };\n-                                              handleUpdateActivity(index, {\n-                                                ...activity,\n-                                                media: updatedMedia\n-                                              });\n-                                            }}\n-                                            placeholder=\"Media URL\"\n-                                          />\n-                                          <Select\n-                                            value={media.type}\n-                                            onValueChange={(value) => {\n-                                              const updatedMedia = [...(activity.media || [])];\n-                                              updatedMedia[mediaIndex] = {\n-                                                type: value as 'image' | 'gif' | 'video',\n-                                                url: media.url\n-                                              };\n-                                              handleUpdateActivity(index, {\n-                                                ...activity,\n-                                                media: updatedMedia\n-                                              });\n-                                            }}\n-                                          >\n-                                            <SelectTrigger className=\"w-[120px]\">\n-                                              <SelectValue placeholder=\"Type\" />\n-                                            </SelectTrigger>\n-                                            <SelectContent>\n-                                              <SelectItem value=\"image\">Image</SelectItem>\n-                                              <SelectItem value=\"gif\">GIF</SelectItem>\n-                                              <SelectItem value=\"video\">Video</SelectItem>\n-                                            </SelectContent>\n-                                          </Select>\n-                                <Button\n-                                            variant=\"ghost\"\n-                                            size=\"sm\"\n-                                  onClick={() => {\n-                                              const updatedMedia = (activity.media || []).filter((_, i) => i !== mediaIndex);\n-                                              handleUpdateActivity(index, {\n-                                                ...activity,\n-                                                media: updatedMedia\n-                                          });\n-                                          }}\n-                                  >\n-                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\n-                                  </Button>\n-                                </div>\n-                                        ))}\n-                                  <Button\n-                                    variant=\"outline\"\n-                                    size=\"sm\"\n-                                            onClick={() => {\n-                                              handleUpdateActivity(index, {\n-                                                ...activity,\n-                                                media: [\n-                                                  ...(activity.media || [])  ,\n-                                                  { url: '', type: 'image' }\n-                                                ]\n-                                              });\n-                                            }}\n-                                  >\n-                                    <Plus className=\"h-4 w-4 mr-2\" />\n-                                            Add Media\n-                                  </Button>\n-                                </div>\n-                                      </div>\n-                                    </CardContent>\n-                                  )}\n-                                </Card>\n-                              ))}\n-\n-                              {/* Add Activity Button */}\n-                              <Button\n-                                onClick={handleAddActivity}\n-                                className=\"w-full\"\n-                              >\n-                                <Plus className=\"h-4 w-4 mr-2\" />\n-                                Add Activity\n-                              </Button>\n-                          </TabsContent>\n-                        </Tabs>\n-                        </div>\n-                )}\n-\n-                    {/* Floating Save Button */}\n-                    <div className=\"fixed bottom-8 right-8 flex items-center gap-4\">\n-                      {saveProgress !== 'idle' && (\n-                        <div className={cn(\n-                          \"flex items-center gap-2 rounded-lg px-4 py-2 shadow-lg\",\n-                          {\n-                            \"bg-background border\": saveProgress === 'saving',\n-                            \"bg-green-500 text-white\": saveProgress === 'saved',\n-                            \"bg-destructive text-destructive-foreground\": saveProgress === 'error'\n-                          }\n-                        )}>\n-                          {saveProgress === 'saving' && (\n-                            <>\n-                              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n-                              <span className=\"text-sm\">Saving changes...</span>\n-                            </>\n-                          )}\n-                          {saveProgress === 'saved' && (\n-                            <>\n-                              <Check className=\"h-4 w-4\" />\n-                              <span className=\"text-sm\">Changes saved</span>\n-                            </>\n-                          )}\n-                          {saveProgress === 'error' && (\n-                            <>\n-                              <X className=\"h-4 w-4\" />\n-                              <span className=\"text-sm\">Error saving changes</span>\n-                            </>\n-                          )}\n-                        </div>\n-                      )}\n-                      <Button\n-                        onClick={handleSaveLesson}\n-                        disabled={saveProgress === 'saving'}\n-                        className=\"shadow-lg\"\n-                      >\n-                        {saveProgress === 'saving' ? (\n-                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n-                        ) : (\n-                          <Save className=\"h-4 w-4 mr-2\" />\n-                        )}\n-                        {saveProgress === 'saving' ? 'Saving...' : 'Save Lesson'}\n-                      </Button>\n-                    </div>\n-                  </>\n-            )}\n-    </div>\n-    \n-\n-      {/* Floating Save Button */}\n-      {selectedSubtopicId && currentLessonId && (\n-          <div className=\"fixed bottom-4 right-4 flex flex-col gap-2\">\n-            <TooltipProvider>\n-              <Tooltip>\n-                <TooltipTrigger asChild>\n-                  <Button\n-                    size=\"icon\"\n-                    className=\"rounded-full h-12 w-12 shadow-lg\"\n-                    onClick={handleSaveLesson}\n-                    disabled={!selectedSubtopicId || !lessonTitle || questions.length === 0}\n-                  >\n-                    <Save className=\"h-6 w-6\" />\n-                  </Button>\n-                </TooltipTrigger>\n-                <TooltipContent>\n-                  <p>Save Lesson (Ctrl+S)</p>\n-                </TooltipContent>\n-              </Tooltip>\n-            </TooltipProvider>\n-          </div>\n-        )}\n-        <SaveFeedback />\n-\n-        {/* Add Grade Modal - do not delete */}\n-        {/* {modalState.showAddGrade && (\n-          <Dialog \n-            open={modalState.showAddGrade} \n-            onOpenChange={(open) => handleModalStateChange('showAddGrade', open)}\n-          >\n-            <DialogContent \n-              className=\"sm:max-w-[425px]\"\n-              onEscapeKeyDown={cleanupModalState}\n-              onPointerDownOutside={cleanupModalState}\n-            >\n-              <DialogHeader>\n-                <DialogTitle>Add New Grade</DialogTitle>\n-                <DialogDescription>Enter the details for the new grade.</DialogDescription>\n-              </DialogHeader>\n-              <div className=\"space-y-4 py-4\">\n-                <div className=\"space-y-2\">\n-                  <Label htmlFor=\"grade-name\">Grade Name</Label>\n-                  <Input\n-                    id=\"grade-name\"\n-                    value={newItemData.name}\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n-                    placeholder=\"Enter grade name\"\n-                  />\n-      </div>\n-              </div>\n-              <DialogFooter>\n-                <Button variant=\"outline\" onClick={() => {\n-                  setModalState({ ...modalState, showAddGrade: false });\n-                  setNewItemData({ name: '', description: '' });\n-                }}>\n-                  Cancel\n-                </Button>\n-                <Button onClick={handleCreateGrade} disabled={!newItemData.name}>Create Grade</Button>\n-              </DialogFooter>\n-            </DialogContent>\n-          </Dialog>\n-        )} */}\n-\n-        {/* Add Topic Modal */}\n-        {modalState.showAddTopic && (\n-          <Dialog \n-            open={modalState.showAddTopic} \n-            onOpenChange={(open) => handleModalStateChange('showAddTopic', open)}\n-          >\n-            <DialogContent \n-              className=\"sm:max-w-[425px]\"\n-              onEscapeKeyDown={cleanupModalState}\n-              onPointerDownOutside={cleanupModalState}\n-            >\n-              <DialogHeader>\n-                <DialogTitle>Add New Topic</DialogTitle>\n-                <DialogDescription>Enter the details for the new topic.</DialogDescription>\n-              </DialogHeader>\n-              <div className=\"space-y-4 py-4\">\n-                <div className=\"space-y-2\">\n-                  <Label htmlFor=\"topic-name\">Topic Name</Label>\n-                  <Input\n-                    id=\"topic-name\"\n-                    value={newItemData.name}\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n-                    placeholder=\"Enter topic name\"\n-                  />\n-                </div>\n-              </div>\n-              <DialogFooter>\n-                <Button variant=\"outline\" onClick={() => {\n-                  setModalState({ ...modalState, showAddTopic: false });\n-                  setNewItemData({ name: '', description: '' });\n-                }}>\n-                  Cancel\n-                </Button>\n-                <Button onClick={handleCreateTopic} disabled={!newItemData.name}>Create Topic</Button>\n-              </DialogFooter>\n-            </DialogContent>\n-          </Dialog>\n-        )}\n-\n-        {/* Add Subtopic Modal */}\n-        {modalState.showAddSubtopic && (\n-          <Dialog \n-            open={modalState.showAddSubtopic} \n-            onOpenChange={(open) => handleModalStateChange('showAddSubtopic', open)}\n-          >\n-            <DialogContent \n-              className=\"sm:max-w-[425px]\"\n-              onEscapeKeyDown={cleanupModalState}\n-              onPointerDownOutside={cleanupModalState}\n-            >\n-              <DialogHeader>\n-                <DialogTitle>Add New Subtopic</DialogTitle>\n-                <DialogDescription>Enter the details for the new subtopic.</DialogDescription>\n-              </DialogHeader>\n-              <div className=\"space-y-4 py-4\">\n-                <div className=\"space-y-2\">\n-                  <Label htmlFor=\"subtopic-name\">Subtopic Name</Label>\n-                  <Input\n-                    id=\"subtopic-name\"\n-                    value={newItemData.name}\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n-                    placeholder=\"Enter subtopic name\"\n-                  />\n-                </div>\n-              </div>\n-              <DialogFooter>\n-                <Button variant=\"outline\" onClick={() => {\n-                  setModalState({ ...modalState, showAddSubtopic: false });\n-                  setNewItemData({ name: '', description: '' });\n-                }}>\n-                  Cancel\n-                </Button>\n-                <Button onClick={() => handleCreateSubtopic({ title: newItemData.name })} disabled={!newItemData.name}>Create Subtopic</Button>\n-              </DialogFooter>\n-            </DialogContent>\n-          </Dialog>\n-        )}\n-\n-        {/* Add Lesson Modal */}\n-        {modalState.showAddLesson && (\n-          <Dialog \n-            open={modalState.showAddLesson} \n-            onOpenChange={(open) => handleModalStateChange('showAddLesson', open)}\n-          >\n-            <DialogContent \n-              className=\"sm:max-w-[425px]\"\n-              onEscapeKeyDown={cleanupModalState}\n-              onPointerDownOutside={cleanupModalState}\n-            >\n-              <DialogHeader>\n-                <DialogTitle>Add New Lesson</DialogTitle>\n-                <DialogDescription>Enter the details for the new lesson.</DialogDescription>\n-              </DialogHeader>\n-              <div className=\"space-y-4 py-4\">\n-                <div className=\"space-y-2\">\n-                  <Label htmlFor=\"lesson-name\">Lesson Title</Label>\n-                  <Input\n-                    id=\"lesson-name\"\n-                    value={newItemData.name}\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n-                    placeholder=\"Enter lesson title\"\n-                  />\n-                </div>\n-              </div>\n-              <DialogFooter>\n-                <Button variant=\"outline\" onClick={() => {\n-                  setModalState({ ...modalState, showAddLesson: false });\n-                  setNewItemData({ name: '', description: '' });\n-                }}>\n-                  Cancel\n-                </Button>\n-                <Button onClick={handleCreateLesson} disabled={!newItemData.name}>Create Lesson</Button>\n-              </DialogFooter>\n-            </DialogContent>\n-          </Dialog>\n-        )}\n-      </div>\n-      <Toaster />\n-      </div>\n-  );\n+\"use client\";\r\n+\r\n+import { useState, useCallback, useEffect, useRef } from 'react';\r\n+import { toast } from 'sonner';\r\n+import { Toaster } from 'sonner';\r\n+import Link from 'next/link';\r\n+import {  Activity as ActivityIcon,  ArrowLeft,  BookOpen,  ChevronDown,  ChevronRight,  Check,  Edit,  Eye,  EyeOff,  HelpCircle,  Layers,  List,  MessageSquare,  Plus,  Save,  Trash as Trash2, X, Pencil, Lock, Unlock, RefreshCw, Clock, Bell, Moon, GraduationCap, MoreHorizontal, Loader2 } from 'lucide-react';\r\n+import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\n+import { Badge } from '@/components/ui/badge';\r\n+import { Button } from '@/components/ui/button';\r\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\n+import { Input } from '@/components/ui/input';\r\n+import { Label } from '@/components/ui/label';\r\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\n+import { Textarea } from '@/components/ui/textarea';\r\n+import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\r\n+import { cn } from '@/lib/utils';\r\n+import { API_BASE_URL, QUESTION_TYPES, isQuestionType } from './constants';\r\n+import { ExercisePrompt, Lesson } from './types';\r\n+import { QuestionFormProps, ExercisePromptCardProps, Activity, Grade, Topic, Subtopic as SubTopic } from './types';\r\n+import { QuestionForm } from './components/question-form';\r\n+import { ExercisePromptCard } from './components/exercise-prompt-card';\r\n+import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\r\n+import { supabase } from '@/lib/supabase';\r\n+import { useContentStore } from '@/lib/content/store';\r\n+import { contentService } from '@/lib/content/ContentService';\r\n+import { MediaPreview } from '@/components/ui/media-preview';\r\n+import { QuestionTypeSelect } from './components/question-type-select';\r\n+import { RichTextEditor } from '@/components/ui/rich-text-editor';\r\n+import {\r\n+  AlertDialog,\r\n+  AlertDialogAction,\r\n+  AlertDialogCancel,\r\n+  AlertDialogContent,\r\n+  AlertDialogDescription,\r\n+  AlertDialogFooter,\r\n+  AlertDialogHeader,\r\n+  AlertDialogTitle,\r\n+  AlertDialogTrigger,\r\n+} from \"@/components/ui/alert-dialog\";\r\n+import { debounce, isNull } from 'lodash';\r\n+import { PostgrestError } from '@supabase/supabase-js';\r\n+import { Question as ContentQuestion } from './types';  // Import the specific type\r\n+import { Trash } from \"lucide-react\";\r\n+import { AnimatePresence, motion } from 'framer-motion';\r\n+import { useQueryClient } from 'react-query';\r\n+\r\n+\r\n+// Update the API endpoint to match your backend route\r\n+const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\r\n+\r\n+interface QuestionTypeSelectProps {\r\n+  value: string;\r\n+  onValueChange: (value: string) => void;\r\n+}\r\n+\r\n+// Add metadata type\r\n+interface LessonMetadata {\r\n+  lastEdited?: string;\r\n+  version?: number;\r\n+  tags?: string[];\r\n+  status?: 'draft' | 'published';\r\n+  authorId?: string;\r\n+  duration?: number;\r\n+  transcript?: string;\r\n+}\r\n+\r\n+type ContentType = 'html' | 'markdown' | 'rich-text' | 'text' | 'json';\r\n+\r\n+interface LessonContent {\r\n+  id: string;\r\n+  lesson_id: string;\r\n+  content: any[];\r\n+  metadata: {\r\n+    lastEdited?: string;\r\n+    version?: number;\r\n+    status?: 'draft' | 'published';\r\n+    authorId?: string;\r\n+  };\r\n+  content_type: string;\r\n+  order_index: number;\r\n+  updated_at: string;\r\n+  user_id: string;\r\n+}\r\n+\r\n+interface InlineEditProps {\r\n+  value: string;\r\n+  onSave: (value: string) => void;\r\n+  isEditing: boolean;\r\n+  setIsEditing: (value: boolean) => void;\r\n+  placeholder?: string;\r\n+  className?: string;\r\n+}\r\n+\r\n+// Add validation interface\r\n+interface QuestionValidation {\r\n+  isValid: boolean;\r\n+  message: string;\r\n+}\r\n+\r\n+// Add this type validation helper\r\n+const getQuestionTypeFields = (type: string) => {\r\n+  switch (type) {\r\n+    case 'multipleChoice':\r\n+      return {\r\n+        required: ['prompt', 'options', 'correctAnswer'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          options: [],\r\n+          correct_answer: '',\r\n+          teacher_script: '',\r\n+          explanation: ''\r\n+        }\r\n+      };\r\n+    case 'fillInBlank':\r\n+      return {\r\n+        required: ['prompt', 'blanks'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          blanks: [],\r\n+          teacher_script: '',\r\n+          explanation: ''\r\n+        }\r\n+      };\r\n+    case 'trueFalse':\r\n+      return {\r\n+        required: ['prompt', 'correctAnswer'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          correct_answer: null,\r\n+          teacher_script: '',\r\n+          explanation: ''\r\n+        }\r\n+      };\r\n+    case 'matching':\r\n+      return {\r\n+        required: ['prompt', 'pairs'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          pairs: [],\r\n+          teacher_script: '',\r\n+          explanation: ''\r\n+        }\r\n+      };\r\n+    case 'ordering':\r\n+      return {\r\n+        required: ['prompt', 'items'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          items: [],\r\n+          correctOrder: [],\r\n+          teacher_script: '',\r\n+          explanation: ''\r\n+        }\r\n+      };\r\n+    case 'shortAnswer':\r\n+      return {\r\n+        required: ['prompt', 'sampleAnswer'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          sampleAnswer: '',\r\n+          teacher_script: '',\r\n+          explanation: '',\r\n+          keywords: []\r\n+        }\r\n+      };\r\n+    case 'speaking':\r\n+      return {\r\n+        required: ['prompt', 'sampleAnswer'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          sampleAnswer: '',\r\n+          teacher_script: '',\r\n+          audioPrompt: '',\r\n+          pronunciation: ''\r\n+        }\r\n+      };\r\n+    case 'listening':\r\n+      return {\r\n+        required: ['prompt', 'audioContent'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          audioContent: '',\r\n+          transcript: '',\r\n+          teacherScript: '',\r\n+          comprehensionQuestions: []\r\n+        }\r\n+      };\r\n+    case 'listenAndRepeat':\r\n+      return {\r\n+        required: ['prompt', 'audioContent'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          audioContent: '',\r\n+          targetPhrase: '',\r\n+          teacher_script: '',\r\n+          pronunciation: ''\r\n+        }\r\n+      };\r\n+    default:\r\n+      return {\r\n+        required: ['prompt'],\r\n+        fields: {\r\n+          prompt: '',\r\n+          teacher_script: ''\r\n+        }\r\n+      };\r\n+  }\r\n+}\r\n+\r\n+interface SaveStatus {\r\n+  id: string;\r\n+  status: 'draft' | 'saved' | 'saving' | 'error';\r\n+  lastSaved?: string;\r\n+}\r\n+\r\n+interface Question {\r\n+  id: string;\r\n+  type: string;\r\n+  lesson_id: string;\r\n+  title: string;\r\n+  content: string;\r\n+  metadata: Record<string, any>;\r\n+  data: Record<string, any>; // This allows dynamic field access\r\n+  correct_answer: string;\r\n+  exercisePrompts: ExercisePrompt[];\r\n+  isDraft?: boolean;\r\n+}\r\n+\r\n+// Add at the top of the file with other type definitions\r\n+type QuestionType = keyof typeof QUESTION_TYPES;\r\n+\r\n+// Add this type guard function\r\n+const isValidQuestionType = (type: string): type is QuestionType => {\r\n+  return type in QUESTION_TYPES;\r\n+};\r\n+\r\n+// Update handleAddQuestion\r\n+\r\n+\r\n+// Update validateQuestion\r\n+const validateQuestion = (question: Question): QuestionValidation => {\r\n+  const { required } = getQuestionTypeFields(question.type);\r\n+  const missingFields = required.filter(field => {\r\n+    const value = question.data?.[field];\r\n+    return !value || \r\n+      (Array.isArray(value) && value.length === 0) || \r\n+      (typeof value === 'string' && !value.trim());\r\n+  });\r\n+\r\n+  if (missingFields.length > 0) {\r\n+    return {\r\n+      isValid: false,\r\n+      message: `Missing required fields: ${missingFields.join(', ')}`\r\n+    };\r\n+  }\r\n+\r\n+  return { isValid: true, message: '' };\r\n+};\r\n+\r\n+// Add proper type for question data\r\n+interface QuestionData {\r\n+  id?: string;\r\n+  content?: string;\r\n+  type?: string;\r\n+  data?: {\r\n+    prompt?: string;\r\n+    teacher_script?: string;\r\n+    followup_prompt?: string[];\r\n+    sample_answer?: string;\r\n+    answer?: string;\r\n+  } | null;\r\n+  prompt: string;\r\n+  teacher_script: string;\r\n+  followup_prompt: string[];\r\n+  answer?: string;\r\n+  correct_answer?: string;\r\n+}\r\n+\r\n+// In your component where you handle questions\r\n+const handleQuestionData = (question: QuestionData) => {\r\n+  return {\r\n+    ...question,\r\n+    data: {\r\n+      prompt: question?.data?.prompt || '',\r\n+      teacher_script: question?.data?.teacher_script || '',\r\n+      followup_prompt: question?.data?.followup_prompt || [],\r\n+      sample_answer: question?.data?.sample_answer || undefined,  // Convert null to undefined\r\n+      answer: question?.data?.answer || undefined  // Convert null to undefined\r\n+    } as const,\r\n+    sampleAnswer: question?.correct_answer || ''\r\n+  };\r\n+};\r\n+\r\n+export default function LessonManagementPage() {\r\n+  // State declarations\r\n+  \r\n+  const [selectedGradeId, setSelectedGradeId] = useState<string | null>(null);\r\n+  const [selectedTopicId, setSelectedTopicId] = useState<string | null>(null);\r\n+  const [selectedSubtopicId, setSelectedSubtopicId] = useState<string | null>(null);\r\n+  const [lessonTitle, setLessonTitle] = useState<string>('');\r\n+  const [currentLessonId, setCurrentLessonId] = useState<string | null>(null);\r\n+  const [questions, setQuestions] = useState<Question[]>([]);\r\n+  const [saveProgress, setSaveProgress] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');\r\n+  const [activities, setActivities] = useState<Activity[]>([]);\r\n+  const [localBuffer, setLocalBuffer] = useState<{ timestamp: number; data: any } | null>(null);\r\n+  const [lastSavedToServer, setLastSavedToServer] = useState<number>(Date.now());\r\n+  const [selectedQuestionType, setSelectedQuestionType] = useState<string>('');\r\n+  const [editingQuestionIndex, setEditingQuestionIndex] = useState<number | null>(null);\r\n+  const [showHelpTips, setShowHelpTips] = useState(true);\r\n+  const [isNavigating, setIsNavigating] = useState(false);\r\n+  const [lessons, setLessons] = useState<Lesson[]>([]);\r\n+  const [grades, setGrades] = useState<Grade[]>([]);\r\n+  const [topics, setTopics] = useState<Topic[]>([]);\r\n+  const [subtopics, setSubtopics] = useState<SubTopic[]>([]);\r\n+  const [contentHeading, setContentHeading] = useState<string>('');\r\n+    // Add with your other state declarations\r\n+  const [isContentExpanded, setIsContentExpanded] = useState<boolean>(false);\r\n+  const [modalState, setModalState] = useState({\r\n+    showAddGrade: false,\r\n+    showAddTopic: false,\r\n+    showAddSubtopic: false,\r\n+    showAddLesson: false\r\n+  });\r\n+  const [isViewMode, setIsViewMode] = useState<boolean>(true);\r\n+  const [expandedGrade, setExpandedGrade] = useState<string | null>(null);\r\n+  const [expandedTopic, setExpandedTopic] = useState<string | null>(null);\r\n+  const [expandedSubtopic, setExpandedSubtopic] = useState<string | null>(null);\r\n+  const [expandedQuestion, setExpandedQuestion] = useState<number | null>(null);\r\n+  const [expandedActivity, setExpandedActivity] = useState<number | null>(null);\r\n+  const [newItemData, setNewItemData] = useState({\r\n+    name: '',\r\n+    description: ''\r\n+  });\r\n+  const [lessonContent, setLessonContent] = useState<string>('');\r\n+  const [isContentEditorOpen, setIsContentEditorOpen] = useState(false);\r\n+  const [isEditingTitle, setIsEditingTitle] = useState<boolean>(false);\r\n+  const [isEditingHeading, setIsEditingHeading] = useState<boolean>(false);\r\n+  const [isEditingDescription, setIsEditingDescription] = useState<boolean>(false);\r\n+  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\r\n+  const [isSidebarLocked, setIsSidebarLocked] = useState(true);\r\n+  const [alertDialogState, setAlertDialogState] = useState<{\r\n+    isOpen: boolean;\r\n+    title: string;\r\n+    message: string;\r\n+    onConfirm: (value?: unknown) => void;\r\n+  }>({\r\n+    isOpen: false,\r\n+    title: '',\r\n+    message: '',\r\n+    onConfirm: () => {}\r\n+  });\r\n+\r\n+  const { \r\n+    selectedGrade,\r\n+    setSelectedGrade,\r\n+    selectedTopic,\r\n+    setSelectedTopic,\r\n+    selectedSubtopic,\r\n+    setSelectedSubtopic,\r\n+    selectedLesson,\r\n+    setSelectedLesson\r\n+  } = useContentStore();\r\n+\r\n+  // Add new state for tracking save status\r\n+  interface SaveStatus {\r\n+    id: string;\r\n+    status: 'draft' | 'saved' | 'saving' | 'error' | 'draft';\r\n+    lastSaved?: string;\r\n+  }\r\n+\r\n+  const [questionSaveStatuses, setQuestionSaveStatuses] = useState<Array<{\r\n+    id: string;\r\n+    status: 'idle' | 'saving' | 'saved' | 'error' | 'draft';\r\n+  }>>([]);\r\n+  const [promptSaveStatuses, setPromptSaveStatuses] = useState<SaveStatus[]>([]);\r\n+\r\n+  // Add this state to track dropdown state\r\n+  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n+\r\n+  // Add these states\r\n+  const [isLoadingSubtopics, setIsLoadingSubtopics] = useState(false);\r\n+  const [isLoadingLessons, setIsLoadingLessons] = useState(false);\r\n+\r\n+  // Add these state variables\r\n+  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\r\n+  const [itemToDelete, setItemToDelete] = useState<{\r\n+    id: string;\r\n+    type: 'topic' | 'subtopic' | 'lesson';\r\n+    title: string;\r\n+  } | null>(null);\r\n+\r\n+  // Add these state variables\r\n+  const [deleteError, setDeleteError] = useState<string | null>(null);\r\n+\r\n+  // Add this validation function\r\n+  const canDeleteItem = async (type: 'topic' | 'subtopic' | 'lesson', id: string) => {\r\n+    switch (type) {\r\n+      case 'topic':\r\n+        const subtopicsInTopic = subtopics.filter(s => s.topic_id === id);\r\n+        return subtopicsInTopic.length === 0;\r\n+        \r\n+      case 'subtopic':\r\n+        const lessonsInSubtopic = lessons.filter(l => l.subtopic_id === id);\r\n+        return lessonsInSubtopic.length === 0;\r\n+        \r\n+      case 'lesson':\r\n+        const { data: questions } = await supabase\r\n+          .from('questions')\r\n+          .select('id')\r\n+          .eq('lesson_id', id);\r\n+        return !questions || questions.length === 0;\r\n+        \r\n+      default:\r\n+        return false;\r\n+    }\r\n+  };\r\n+\r\n+  // Event handlers\r\n+  const handleQuestionTypeChange = useCallback((type: string) => {\r\n+    if (isQuestionType(type)) {\r\n+      setSelectedQuestionType(type);\r\n+    }\r\n+  }, []);\r\n+\r\n+  const handleAddQuestion = useCallback(() => {\r\n+    if (!selectedQuestionType || !isQuestionType(selectedQuestionType)) return;\r\n+\r\n+    const defaultData = QUESTION_TYPES[selectedQuestionType].defaultData;\r\n+    const newQuestion: Question = {\r\n+      id: crypto.randomUUID(),\r\n+      type: selectedQuestionType,\r\n+      //data: {},\r\n+      title: 'New Question',\r\n+      content: '',\r\n+      lesson_id: currentLessonId || '',\r\n+      metadata: {},\r\n+      data: {\r\n+        ...defaultData,\r\n+        prompt: '',\r\n+        teacher_script: '',\r\n+        followup_prompt: [],\r\n+        sample_answer: ''\r\n+      },\r\n+      correct_answer: '',\r\n+      exercisePrompts: [],\r\n+      isDraft: true\r\n+    };\r\n+\r\n+    setQuestions(prev => [...prev, newQuestion]);\r\n+    setQuestionSaveStatuses(prev => [\r\n+      ...prev,\r\n+      { id: newQuestion.id, status: 'draft' }\r\n+    ]);\r\n+    setSelectedQuestionType('');\r\n+  }, [selectedQuestionType, currentLessonId]);\r\n+\r\n+  const checkDeletability = async (type: 'topic' | 'subtopic' | 'lesson', id: string) => {\r\n+    try {\r\n+      switch (type) {\r\n+        case 'lesson':\r\n+          const { data: questions } = await supabase\r\n+            .from('questions')\r\n+            .select('count')\r\n+            .eq('lesson_id', id);\r\n+          return { \r\n+            canDelete: questions?.[0]?.count === 0,\r\n+            message: questions?.[0]?.count ?? 0> 0 \r\n+              ? `Please delete ${questions?.[0]?.count} questions first` \r\n+              : null\r\n+          };\r\n+\r\n+        case 'subtopic':\r\n+          const { data: lessons } = await supabase\r\n+            .from('lessons')\r\n+            .select('id, questions(count)')\r\n+            .eq('subtopic_id', id);\r\n+          const hasQuestions = lessons?.some(l => l.questions?.[0]?.count > 0);\r\n+          return {\r\n+            canDelete: !hasQuestions && !lessons?.length,\r\n+            message: hasQuestions ? 'Delete questions from lessons first' : \r\n+                     lessons?.length ? 'Delete all lessons first' : null\r\n+          };\r\n+\r\n+        case 'topic':\r\n+          const { data: subtopics } = await supabase\r\n+            .from('subtopics')\r\n+            .select('id, lessons(questions(count))')\r\n+            .eq('topic_id', id);\r\n+          const hasContent = subtopics?.some(s => \r\n+            s.lessons?.some(l => l.questions?.[0]?.count > 0)\r\n+          );\r\n+          return {\r\n+            canDelete: !hasContent && !subtopics?.length,\r\n+            message: hasContent ? 'Delete all content first' : \r\n+                     subtopics?.length ? 'Delete all subtopics first' : null\r\n+          };\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error checking deletability:', error);\r\n+      return { canDelete: false, message: 'Error checking item' };\r\n+    }\r\n+  };\r\n+\r\n+  const handleRemoveQuestion = async (index: number) => {\r\n+    try {\r\n+      const questionToDelete = questions[index];\r\n+      \r\n+      // Delete related exercise prompts first\r\n+      const { error: promptError } = await supabase\r\n+        .from('exercise_prompts')\r\n+        .delete()\r\n+        .eq('question_id', questionToDelete.id);\r\n+\r\n+      if (promptError) throw promptError;\r\n+\r\n+      // Then delete the question\r\n+      const { error: questionError } = await supabase\r\n+        .from('questions')\r\n+        .delete()\r\n+        .eq('id', questionToDelete.id);\r\n+\r\n+      if (questionError) throw questionError;\r\n+\r\n+      // Update local state\r\n+      const newQuestions = questions.filter((_, i) => i !== index);\r\n+      setQuestions(newQuestions);\r\n+      \r\n+      toast.success('Question and related prompts deleted successfully');\r\n+    } catch (error) {\r\n+      console.error('Error deleting question:', error);\r\n+      toast.error('Failed to delete question and prompts');\r\n+    }\r\n+  };\r\n+\r\n+  const handleUpdateQuestion = useCallback(async (index: number, updatedQuestion: Question) => {\r\n+    const newQuestions = [...questions];\r\n+    newQuestions[index] = updatedQuestion;\r\n+    setQuestions(newQuestions);\r\n+    setQuestionSaveStatuses(prev => prev.map((status, i) => \r\n+      i === index ? { ...status, status: 'draft' } : status\r\n+    ));\r\n+  }, [questions]);\r\n+\r\n+  const handleAddExercisePrompt = useCallback((questionIndex: number) => {\r\n+    setQuestions(prev => prev.map((question, i) => {\r\n+      if (i === questionIndex) {\r\n+        return {\r\n+          ...question,\r\n+          exercisePrompts: [\r\n+            ...question.exercisePrompts,\r\n+            {\r\n+              id: crypto.randomUUID(),\r\n+              text: '',\r\n+              media: '',\r\n+              type: 'image',\r\n+              narration: 'Your turn',\r\n+              saytext: 'Say: ',\r\n+              metadata: {\r\n+                estimatedTime: 0\r\n+              },\r\n+              created_at: new Date().toISOString(),\r\n+              updated_at: new Date().toISOString()\r\n+            }\r\n+          ]\r\n+        };\r\n+      }\r\n+      return question;\r\n+    }));\r\n+  }, []);\r\n+\r\n+  const handleRemoveExercisePrompt = useCallback((questionIndex: number, promptIndex: number) => {\r\n+    setQuestions(prev => prev.map((question, i) => {\r\n+      if (i === questionIndex) {\r\n+        return {\r\n+          ...question,\r\n+          exercisePrompts: question.exercisePrompts.filter((_, j) => j !== promptIndex)\r\n+        };\r\n+      }\r\n+      return question;\r\n+    }));\r\n+  }, []);\r\n+\r\n+  const handleExercisePromptChange = useCallback(async (\r\n+    questionIndex: number,\r\n+    promptIndex: number,\r\n+    updatedPrompt: ExercisePrompt\r\n+  ) => {\r\n+    try {\r\n+      const promptUpdate = {\r\n+        id: updatedPrompt.id,\r\n+        question_id: updatedPrompt.question_id,\r\n+        text: updatedPrompt.text,\r\n+        type: updatedPrompt.type,\r\n+        narration: updatedPrompt.narration,\r\n+        saytext: updatedPrompt.saytext,\r\n+        media: updatedPrompt.media,\r\n+        // Remove order_index as it's not in schema\r\n+        created_at: new Date().toISOString()\r\n+      };\r\n+\r\n+      const { error: promptError } = await supabase\r\n+        .from('exercise_prompts')\r\n+        .upsert(promptUpdate)\r\n+        .select();\r\n+\r\n+      if (promptError) throw promptError;\r\n+\r\n+      // Update local state\r\n+      setQuestions(prev => prev.map((question, i) => {\r\n+        if (i === questionIndex) {\r\n+          const newPrompts = [...question.exercisePrompts];\r\n+          newPrompts[promptIndex] = updatedPrompt;\r\n+          return { ...question, exercisePrompts: newPrompts };\r\n+        }\r\n+        return question;\r\n+      }));\r\n+\r\n+    } catch (error) {\r\n+      console.error('Error saving prompt:', error);\r\n+      toast.error('Failed to save prompt');\r\n+    }\r\n+  }, []);\r\n+\r\n+  const handleAddActivity = useCallback(() => {\r\n+    const newActivity: Activity = {\r\n+      id: crypto.randomUUID(),\r\n+      lesson_id: currentLessonId || '',\r\n+      created_at: new Date().toISOString(),\r\n+      type: 'practice',\r\n+      title: '',\r\n+      name: '',\r\n+      instructions: '',\r\n+      media: [],\r\n+      data: {\r\n+        prompt: '',\r\n+        teacher_script: '',\r\n+        media: []\r\n+      }\r\n+    };\r\n+    setActivities(prev => [...prev, newActivity]);\r\n+  }, [currentLessonId]);\r\n+\r\n+  const handleUpdateActivity = useCallback((index: number, updatedActivity: Activity) => {\r\n+    setActivities(prev => prev.map((activity, i) => i === index ? updatedActivity : activity));\r\n+  }, []);\r\n+\r\n+  const handleRemoveActivity = useCallback((index: number) => {\r\n+    setActivities(prev => prev.filter((_, i) => i !== index));\r\n+  }, []);\r\n+\r\n+  const handleExercisePromptUpdate = useCallback((questionIndex: number, promptIndex: number, updatedPrompt: ExercisePrompt) => {\r\n+    const updatedQuestions = [...questions];\r\n+    updatedQuestions[questionIndex].exercisePrompts[promptIndex] = updatedPrompt;\r\n+    handleUpdateQuestion(questionIndex, updatedQuestions[questionIndex]);\r\n+  }, [questions, handleUpdateQuestion]);\r\n+\r\n+  const handleQuestionDataChange = useCallback((questionIndex: number, field: string, value: string) => {\r\n+    setQuestions(prev => prev.map((q, i) => \r\n+      i === questionIndex \r\n+        ? { \r\n+            ...q, \r\n+            data: { \r\n+              prompt: q.data?.prompt || '',\r\n+              teacherScript: q.data?.teacherScript || '',\r\n+              ...q.data,\r\n+              [field]: value \r\n+            } \r\n+          }\r\n+        : q\r\n+    ));\r\n+  }, []);\r\n+\r\n+  const [isSaving, setIsSaving] = useState(false);\r\n+\r\n+  const handleSaveLesson = async () => {\r\n+    try {\r\n+      if (!currentLessonId || !selectedSubtopicId) {\r\n+        toast.error('Please select a subtopic and lesson first');\r\n+        return;\r\n+      }\r\n+\r\n+      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\r\n+      if (sessionError) throw sessionError;\r\n+      \r\n+      if (!session?.user) {\r\n+        toast.error('Please sign in to save lessons');\r\n+        return;\r\n+      }\r\n+\r\n+      // Get user's role from session\r\n+      const userRole = session.user.user_metadata?.role;\r\n+      console.log('Current user role:', userRole);\r\n+      console.log('📝 Saving content heading:', {\r\n+        contentHeading,\r\n+        currentLessonId,\r\n+        selectedSubtopicId,\r\n+        timestamp: new Date().toISOString()\r\n+      });\r\n+\r\n+      // Create metadata object\r\n+      const lessonMetadata = {\r\n+        lastEdited: new Date().toISOString(),\r\n+        version: 1,\r\n+        status: 'draft' \r\n+      };\r\n+\r\n+      // Complete lesson data with all fields\r\n+      const lessonData = {\r\n+        id: currentLessonId,\r\n+        title: lessonTitle,\r\n+        content: lessonContent,\r\n+        metadata: lessonMetadata, // Supabase will automatically handle JSON conversion\r\n+        content_type: 'html',\r\n+        lesson_type: 'lesson',\r\n+        grade_id: selectedGradeId,\r\n+        topic_id: selectedTopicId,\r\n+        subtopic_id: selectedSubtopicId,\r\n+        user_id: session.user.id,\r\n+        updated_at: new Date().toISOString(),\r\n+        role: userRole, // Include role in the payload\r\n+        description: '',\r\n+        prerequisites: [],\r\n+        media_type: 'image',\r\n+        media_url: '',\r\n+        contentheading: contentHeading || ''\r\n+      };\r\n+\r\n+      console.log('📦 Data being sent to Supabase:', lessonData);\r\n+\r\n+      // Save lesson with all fields\r\n+      const { data, error: lessonError } = await supabase\r\n+        .from('lessons')\r\n+        .upsert(lessonData, { \r\n+          onConflict: 'id'\r\n+        })\r\n+        .select();\r\n+\r\n+      if (lessonError) throw lessonError;\r\n+\r\n+      // 2. Save lesson content\r\n+      const { data: existingContent } = await supabase\r\n+        .from('lesson_content')\r\n+        .select('id')\r\n+        .eq('lesson_id', currentLessonId)\r\n+        .single();\r\n+\r\n+      const contentMetadata = {\r\n+        lastEdited: new Date().toISOString(),\r\n+        version: 1,\r\n+        status: 'draft'\r\n+      };\r\n+\r\n+      const contentUpdate = {\r\n+        id: existingContent?.id || crypto.randomUUID(),\r\n+        lesson_id: currentLessonId,\r\n+        content: [lessonContent],\r\n+        metadata: contentMetadata, // Supabase will automatically handle JSON conversion\r\n+        content_type: 'html',\r\n+        user_id: session.user.id,\r\n+        updated_at: new Date().toISOString(),\r\n+        created_at: new Date().toISOString()\r\n+      };\r\n+\r\n+      const { error: contentError } = await supabase\r\n+        .from('lesson_content')\r\n+        .upsert(contentUpdate, { onConflict: 'id' });\r\n+\r\n+      if (contentError) throw contentError;\r\n+\r\n+      // 3. Save questions\r\n+      for (const question of questions) {\r\n+        const questionData = {\r\n+          id: question.id,\r\n+          lesson_id: currentLessonId,\r\n+          type: question.type,\r\n+          title: question.title,\r\n+          metadata: question.metadata,\r\n+          data: question.data,\r\n+          updated_at: new Date().toISOString(),\r\n+          user_id: session.user.id\r\n+        };\r\n+\r\n+        const { error: questionError } = await supabase\r\n+          .from('questions')\r\n+          .upsert(questionData, { onConflict: 'id' });\r\n+\r\n+        if (questionError) throw questionError;\r\n+\r\n+        //4. Save exercise prompts for this question\r\n+        if (question.exercisePrompts) {\r\n+          for (const prompt of question.exercisePrompts) {\r\n+            const promptData = {\r\n+              id: prompt.id,\r\n+              question_id: question.id,\r\n+              text: prompt.text,\r\n+              media: prompt.media,\r\n+              type: prompt.type,\r\n+              narration: prompt.narration,\r\n+              saytext: prompt.saytext,\r\n+              user_id: session.user.id,\r\n+              updated_at: new Date().toISOString()\r\n+            };\r\n+\r\n+            const { error: promptError } = await supabase\r\n+              .from('exercise_prompts')\r\n+              .upsert(promptData, { onConflict: 'id' });\r\n+\r\n+            if (promptError) throw promptError;\r\n+          }\r\n+        }\r\n+      }\r\n+\r\n+      // 5. Save activities\r\n+      if (activities.length > 0) {\r\n+        const activitiesData = activities.map(activity => ({\r\n+          id: activity.id,\r\n+          lesson_id: currentLessonId,\r\n+          type: activity.type,\r\n+          title: activity.title,\r\n+          name: activity.name,\r\n+          instructions: activity.instructions,\r\n+          media: activity.media,\r\n+          data: activity.data,\r\n+          created_at: new Date().toISOString()\r\n+        }));\r\n+\r\n+        const { error: activitiesError } = await supabase\r\n+          .from('activities')\r\n+          .upsert(activitiesData, { onConflict: 'id' });\r\n+\r\n+        if (activitiesError) throw activitiesError;\r\n+      }\r\n+\r\n+      // After successful save\r\n+      console.log('✅ Content heading saved successfully:', {\r\n+        contentHeading,\r\n+        lessonId: currentLessonId,\r\n+        timestamp: new Date().toISOString()\r\n+      });\r\n+\r\n+      toast.success('Lesson saved successfully');\r\n+    } catch (err) {\r\n+      const error = err as PostgrestError;\r\n+      console.error('❌ Error saving content heading:', {\r\n+        error: error.message,\r\n+        contentHeading,\r\n+        lessonContent,\r\n+        lessonId: currentLessonId,\r\n+        timestamp: new Date().toISOString()\r\n+      });\r\n+      toast.error(`Failed to save lesson: ${error.message}`);\r\n+\r\n+\r\n+    }\r\n+  };\r\n+\r\n+  const handleSaveQuestion = async (question: Question, index: number) => {\r\n+    const loadingToast = toast.loading(`Saving question ${index + 1}...`);\r\n+    \r\n+    try {\r\n+      const { data: { session } } = await supabase.auth.getSession();\r\n+      if (!session?.user) {\r\n+        toast.error('Please sign in to save question', { id: loadingToast });\r\n+        return;\r\n+      }\r\n+\r\n+      // Save question\r\n+      const questionData = {\r\n+        id: question.id,\r\n+        lesson_id: currentLessonId,\r\n+        type: question.type,\r\n+        title: question.title,\r\n+        metadata: question.metadata,\r\n+        data: {\r\n+          prompt: question.data?.prompt ?? '',\r\n+          teacherScript: question.data?.teacherScript ?? '',\r\n+          followup_prompt: question.data?.followup_prompt ?? [],\r\n+          sampleAnswer: question.data?.sampleAnswer || undefined,  // Convert null to undefined\r\n+          answer: question.data?.answer || undefined  // Convert null to undefined\r\n+        } as const,\r\n+        user_id: session.user.id,\r\n+        updated_at: new Date().toISOString()\r\n+      };\r\n+\r\n+      const { error: questionError } = await supabase\r\n+        .from('questions')\r\n+        .upsert(questionData, { onConflict: 'id' });\r\n+\r\n+      if (questionError) throw questionError;\r\n+\r\n+      // Save exercise prompts if they exist\r\n+      if (question.exercisePrompts?.length) {\r\n+        for (const prompt of question.exercisePrompts) {\r\n+          const promptData = {\r\n+            id: prompt.id,\r\n+            question_id: question.id,\r\n+            text: prompt.text,\r\n+            type: prompt.type,\r\n+            narration: prompt.narration,\r\n+            saytext: prompt.saytext,\r\n+            media: prompt.media,\r\n+            user_id: session.user.id,\r\n+            updated_at: new Date().toISOString()\r\n+          };\r\n+\r\n+          const { error: promptError } = await supabase\r\n+            .from('exercise_prompts')\r\n+            .upsert(promptData, { onConflict: 'id' });\r\n+\r\n+          if (promptError) throw promptError;\r\n+        }\r\n+      }\r\n+\r\n+      toast.success(`Question ${index + 1} saved successfully`, { id: loadingToast });\r\n+    } catch (error) {\r\n+      console.error('Error saving question:', error);\r\n+      toast.error(`Failed to save question ${index + 1}`, { id: loadingToast });\r\n+    }\r\n+  };\r\n+\r\n+  const handleSaveActivity = async (activity: Activity) => {\r\n+    try {\r\n+      await contentService.saveActivity(activity);\r\n+      toast.success('Activity saved');\r\n+    } catch (error) {\r\n+      console.error('Failed to save activity:', error);\r\n+      toast.error('Failed to save activity');\r\n+    }\r\n+  };\r\n+\r\n+  // Effects\r\n+  useEffect(() => {\r\n+    const fetchGrades = async () => {\r\n+      try {\r\n+        const { data, error } = await supabase\r\n+          .from('grades')\r\n+          .select('*')\r\n+          .order('name');\r\n+\r\n+        if (error) {\r\n+          console.error('Supabase error:', error);\r\n+          throw error;\r\n+        }\r\n+\r\n+        if (!data) {\r\n+          throw new Error('No data returned from Supabase');\r\n+        }\r\n+\r\n+        // Map the grades to match your interface\r\n+        const validGrades = data.map((grade: any) => ({\r\n+          _id: grade.id,\r\n+          id: grade.id,\r\n+          name: grade.name,\r\n+          level: grade.level || 0,  // Add default value if not provided\r\n+          orderIndex: grade.order_index || 0,  // Add default value if not provided\r\n+          topics: []\r\n+        }));\r\n+        \r\n+        setGrades(validGrades);\r\n+      } catch (error) {\r\n+        console.error('Error fetching grades:', error);\r\n+        toast.error('Failed to fetch grades');\r\n+      }\r\n+    };\r\n+\r\n+    fetchGrades();\r\n+  }, []);\r\n+\r\n+  // Topic Selection\r\n+  useEffect(() => {\r\n+    const fetchTopics = async () => {\r\n+      if (!selectedGradeId) return;\r\n+      \r\n+      try {\r\n+        const { data, error } = await supabase\r\n+          .from('topics')\r\n+          .select('*')\r\n+          .eq('grade_id', selectedGradeId)\r\n+          .order('title');\r\n+\r\n+        if (error) {\r\n+          throw error;\r\n+        }\r\n+\r\n+        // Map the topics to match your interface\r\n+        const validTopics = (data || []).map((topic: any) => ({\r\n+          _id: topic.id,\r\n+          id: topic.id,\r\n+          name: topic.title,\r\n+          title: topic.title,\r\n+          grade_id: topic.grade_id,\r\n+          subtopics: []\r\n+        }));\r\n+        \r\n+        setTopics(validTopics);\r\n+      } catch (error) {\r\n+        console.error('Error fetching topics:', error);\r\n+        toast.error('Failed to fetch topics');\r\n+      }\r\n+    };\r\n+\r\n+    fetchTopics();\r\n+  }, [selectedGradeId]);\r\n+\r\n+  // Subtopic Selection\r\n+  useEffect(() => {\r\n+    const fetchSubtopics = async () => {\r\n+      if (!selectedTopicId) return;\r\n+      \r\n+      try {\r\n+        // Use content service to fetch subtopics\r\n+        const subtopicsData = await contentService.fetchSubtopics(selectedTopicId);\r\n+        console.log('Fetched subtopics:', subtopicsData);\r\n+\r\n+        const validSubtopics = subtopicsData.map((subtopic: any) => ({\r\n+          id: subtopic.id,\r\n+          title: subtopic.title,\r\n+          description: subtopic.description,\r\n+          topic_id: subtopic.topic_id,\r\n+          lessons: [],\r\n+          order_index: subtopicsData.length\r\n+        }));\r\n+        \r\n+        setSubtopics(validSubtopics);\r\n+        \r\n+        // Update global state\r\n+        if (selectedSubtopic) {\r\n+          setSelectedSubtopic(selectedSubtopic);\r\n+        }\r\n+      } catch (err) {\r\n+        const error = err as Error;\r\n+        console.error('Error fetching subtopics:', error);\r\n+        toast.error('Failed to fetch subtopics');\r\n+      }\r\n+    };\r\n+\r\n+    fetchSubtopics();\r\n+  }, [selectedTopicId, selectedSubtopic, setSelectedSubtopic]);\r\n+\r\n+  // Add effect to monitor subtopics state\r\n+  useEffect(() => {\r\n+    console.log('Current subtopics state:', subtopics);\r\n+  }, [subtopics]);\r\n+\r\n+  // Add fetchLessons function\r\n+  const fetchLessons = useCallback(async () => {\r\n+    if (!selectedSubtopicId) return;\r\n+    try {\r\n+      const { data, error } = await supabase\r\n+        .from('lessons')\r\n+        .select('*')\r\n+        .eq('subtopic_id', selectedSubtopicId)\r\n+        .order('title');\r\n+\r\n+      if (error) {\r\n+        throw error;\r\n+      }\r\n+      \r\n+      // Map the lessons to ensure they have _id\r\n+      const validLessons = (data || []).map((lesson: any) => ({\r\n+        ...lesson,\r\n+        _id: lesson._id || lesson.id, // Use _id if available, otherwise use id\r\n+        title: lesson.title || 'Untitled Lesson'\r\n+      })).filter((lesson: any) => lesson._id); // Only include lessons with valid IDs\r\n+      \r\n+      setLessons(validLessons);\r\n+    } catch (error) {\r\n+      console.error('Error fetching lessons:', error);\r\n+      toast.error('Failed to fetch lessons');\r\n+    }\r\n+  }, [selectedSubtopicId]);\r\n+  // Add loadLessonContent function\r\n+  const isLoading = useRef(false);\r\n+  const loadLessonContent = useCallback(async (lessonId: string) => {\r\n+    // Prevent multiple simultaneous loads\r\n+    if (isLoading.current) return;\r\n+    isLoading.current = true;\r\n+\r\n+    const controller = new AbortController();\r\n+\r\n+    try {\r\n+      // Clear existing content first\r\n+      setLessonTitle('');\r\n+      setContentHeading('');\r\n+      setLessonContent('');\r\n+      setQuestions([]);\r\n+      \r\n+      // First fetch lesson data\r\n+      const { data: lessonData, error: lessonError } = await supabase\r\n+        .from('lessons')\r\n+        .select('*')\r\n+        .eq('id', lessonId)\r\n+        .single()\r\n+        \r\n+\r\n+      if (lessonError) {\r\n+        console.error('Lesson fetch error:', lessonError);\r\n+        throw lessonError;\r\n+      }\r\n+\r\n+      // Set lesson data\r\n+      setLessonTitle(lessonData.title || '');\r\n+      setContentHeading(lessonData.content || '');\r\n+\r\n+      // Then fetch lesson content with explicit headers\r\n+      const { data: contentData, error: contentError } = await supabase\r\n+        .from('lesson_content')\r\n+        .select('*')\r\n+        .eq('lesson_id', lessonId)\r\n+        .order('updated_at', { ascending: false })\r\n+        .limit(1)\r\n+        .maybeSingle();\r\n+\r\n+      if (contentError) {\r\n+        console.error('Content fetch error:', contentError);\r\n+        throw contentError;\r\n+      }\r\n+\r\n+      // Set content if available\r\n+      if (contentData?.content) {\r\n+        setLessonContent(typeof contentData.content === 'string' \r\n+          ? contentData.content \r\n+          : JSON.stringify(contentData.content)\r\n+        );\r\n+      }\r\n+\r\n+    } catch (error: unknown) {\r\n+      if (error instanceof Error && error.name === 'AbortError') {\r\n+        console.log('Request aborted');\r\n+        return;\r\n+      }\r\n+      console.error('Error loading lesson:', error);\r\n+      toast.error('Failed to load lesson content');\r\n+      \r\n+      // Reset states on error\r\n+      setLessonTitle('');\r\n+      setContentHeading('');\r\n+      setLessonContent('');\r\n+      setQuestions([]);\r\n+    } finally {\r\n+      isLoading.current = false;\r\n+    }\r\n+\r\n+    return () => {\r\n+      controller.abort();\r\n+    };\r\n+  }, []); // Empty dependencies since we're using closure over state setters\r\n+\r\n+  // // Add effect for fetching lessons when subtopic changes\r\n+  useEffect(() => {\r\n+    if (selectedSubtopicId) {\r\n+      fetchLessons();\r\n+    }\r\n+  }, [selectedSubtopicId, fetchLessons]);\r\n+\r\n+  // Add effect for loading lesson content when currentLessonId changes\r\n+    useEffect(() => {\r\n+    let isMounted = true;\r\n+    let timeoutId: NodeJS.Timeout;\r\n+\r\n+    const loadContent = async () => {\r\n+      if (!currentLessonId || !isMounted) return;\r\n+\r\n+      // Clear previous timeout if exists\r\n+      if (timeoutId) clearTimeout(timeoutId);\r\n+\r\n+      // Set new timeout for debouncing\r\n+      timeoutId = setTimeout(() => {\r\n+        if (isMounted) {\r\n+          loadLessonContent(currentLessonId);\r\n+        }\r\n+      }, 300);\r\n+    };\r\n+\r\n+    loadContent();\r\n+\r\n+    // Cleanup function\r\n+    return () => {\r\n+      isMounted = false;\r\n+      if (timeoutId) clearTimeout(timeoutId);\r\n+      if (isLoading.current) isLoading.current = false;\r\n+    };\r\n+  }, [currentLessonId]); // Remove loadLessonContent from dependencies\r\n+\r\n+  useEffect(() => {\r\n+    console.log('Current lessons state:', lessons);\r\n+  }, [lessons]);\r\n+\r\n+    // Add keyboard shortcut for saving\r\n+  useEffect(() => {\r\n+    const handleKeyDown = (e: KeyboardEvent) => {\r\n+      if ((e.ctrlKey || e.metaKey) && e.key === 's') {\r\n+        e.preventDefault();\r\n+        handleSaveLesson();\r\n+      }\r\n+    };\r\n+\r\n+    window.addEventListener('keydown', handleKeyDown);\r\n+    return () => window.removeEventListener('keydown', handleKeyDown);\r\n+  }, [handleSaveLesson]);\r\n+\r\n+  // Add SaveFeedback component\r\n+  const SaveFeedback = useCallback(() => {\r\n+    if (saveProgress === 'idle') return null;\r\n+\r\n+    return (\r\n+    <div className=\"fixed bottom-4 right-4\">\r\n+      {saveProgress === 'saving' && (\r\n+        <div className=\"flex items-center gap-2 bg-background border rounded-lg px-4 py-2 shadow-lg\">\r\n+          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n+          <span className=\"text-sm\">Saving changes...</span>\r\n+        </div>\r\n+      )}\r\n+      {saveProgress === 'saved' && (\r\n+        <div className=\"flex items-center gap-2 bg-green-500 text-white rounded-lg px-4 py-2 shadow-lg\">\r\n+          <Check className=\"h-4 w-4\" />\r\n+          <span className=\"text-sm\">Changes saved</span>\r\n+        </div>\r\n+      )}\r\n+      {saveProgress === 'error' && (\r\n+        <div className=\"flex items-center gap-2 bg-destructive text-destructive-foreground rounded-lg px-4 py-2 shadow-lg\">\r\n+          <X className=\"h-4 w-4\" />\r\n+          <span className=\"text-sm\">Error saving changes</span>\r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+  }, [saveProgress]);\r\n+\r\n+  // Update handlers\r\n+  const handleGradeSelect = (gradeId: string) => {\r\n+    // Always keep sidebar open during selection\r\n+    setIsSidebarCollapsed(false);\r\n+    setIsSidebarLocked(true);\r\n+    \r\n+    // Batch state updates\r\n+    requestAnimationFrame(() => {\r\n+      setSelectedGradeId(gradeId);\r\n+      setSelectedGrade(gradeId);\r\n+      setSelectedTopicId(null);\r\n+      setSelectedTopic('');\r\n+      setSelectedSubtopicId(null);\r\n+      setSelectedSubtopic('');\r\n+      setCurrentLessonId(null);\r\n+      \r\n+      if (isViewMode) {\r\n+        setExpandedGrade(gradeId);\r\n+      }\r\n+    });\r\n+  };\r\n+\r\n+  const handleTopicSelect = (value: string) => {\r\n+    setSelectedTopicId(value);\r\n+    setSelectedTopic(value);\r\n+    setSelectedSubtopicId(null);\r\n+    setSelectedSubtopic('');\r\n+    setCurrentLessonId(null);\r\n+  };\r\n+\r\n+  const handleSubtopicSelect = (value: string) => {\r\n+    setSelectedSubtopicId(value);\r\n+    setSelectedSubtopic(value);\r\n+    setCurrentLessonId(null);\r\n+  };\r\n+\r\n+  const handleLessonSelect = async (lessonId: string) => {\r\n+    try {\r\n+      // Lock sidebar during selection\r\n+      setIsSidebarLocked(true);\r\n+      setIsSidebarCollapsed(false);\r\n+      setCurrentLessonId(lessonId);\r\n+      \r\n+      // 1. Fetch lesson data\r\n+      const { data: lessonData, error: lessonError } = await supabase\r\n+        .from('lessons')\r\n+        .select('*')\r\n+        .eq('id', lessonId)\r\n+        .single();\r\n+\r\n+      if (lessonError) throw lessonError;\r\n+\r\n+      // 2. Fetch questions with exercise prompts\r\n+      const { data: questionsData, error: questionsError } = await supabase\r\n+        .from('questions')\r\n+        .select(`\r\n+          *,\r\n+          exercise_prompts (*)\r\n+        `)\r\n+        .eq('lesson_id', lessonId);\r\n+\r\n+      if (questionsError) throw questionsError;\r\n+\r\n+      // 3. Fetch activities - removed order_index\r\n+      const { data: activitiesData, error: activitiesError } = await supabase\r\n+        .from('activities')\r\n+        .select('*')\r\n+        .eq('lesson_id', lessonId);\r\n+\r\n+      if (activitiesError) throw activitiesError;\r\n+\r\n+      // Format questions with their exercise prompts\r\n+      const formattedQuestions = questionsData?.map(q => ({\r\n+        ...q,\r\n+        data: q.data || {},\r\n+        exercisePrompts: q.exercise_prompts || []\r\n+      })) || [];\r\n+\r\n+      // Set all states\r\n+      setLessonTitle(lessonData.title || '');\r\n+      setLessonContent(lessonData.content || '');\r\n+      setQuestions(formattedQuestions);\r\n+      setActivities(activitiesData || []);\r\n+\r\n+      // After successful load, unlock sidebar and allow collapse\r\n+      setTimeout(() => {\r\n+        setIsSidebarLocked(false);\r\n+        if (!isSidebarLocked) {\r\n+          setIsSidebarCollapsed(true);\r\n+        }\r\n+      }, 300);\r\n+\r\n+    } catch (error) {\r\n+      console.error('Error loading lesson:', error);\r\n+      toast.error('Failed to load lesson');\r\n+      // Reset states on error\r\n+      setLessonTitle('');\r\n+      setLessonContent('');\r\n+      setQuestions([]);\r\n+      setActivities([]);\r\n+    }\r\n+    if (!isSidebarLocked) {\r\n+      setIsSidebarCollapsed(true);\r\n+    }\r\n+  };\r\n+\r\n+  // Update the expansion handlers\r\n+  const handleTopicExpand = async (topicId: string) => {\r\n+    setExpandedTopic(expandedTopic === topicId ? null : topicId);\r\n+    setSelectedTopicId(topicId);\r\n+    \r\n+    // Load subtopics when topic is expanded\r\n+    if (topicId) {\r\n+      setIsLoadingSubtopics(true);\r\n+      try {\r\n+        const { data: subtopicsData, error } = await supabase\r\n+          .from('subtopics')\r\n+          .select('*')\r\n+          .eq('topic_id', topicId)\r\n+          .order('order_index');\r\n+\r\n+        if (error) throw error;\r\n+        setSubtopics(subtopicsData || []);\r\n+      } catch (error) {\r\n+        console.error('Error loading subtopics:', error);\r\n+        toast.error('Failed to load subtopics');\r\n+      } finally {\r\n+        setIsLoadingSubtopics(false);\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const handleSubtopicExpand = async (subtopicId: string) => {\r\n+    setExpandedSubtopic(expandedSubtopic === subtopicId ? null : subtopicId);\r\n+    setSelectedSubtopicId(subtopicId);\r\n+    \r\n+    if (subtopicId) {\r\n+      setIsLoadingLessons(true);\r\n+      try {\r\n+        const { data: lessonsData, error } = await supabase\r\n+          .from('lessons')\r\n+          .select('*')\r\n+          .eq('subtopic_id', subtopicId)\r\n+          .order('order_index');\r\n+\r\n+        if (error) throw error;\r\n+        setLessons(lessonsData || []);\r\n+      } catch (error) {\r\n+        console.error('Error loading lessons:', error);\r\n+        toast.error('Failed to load lessons');\r\n+      } finally {\r\n+        setIsLoadingLessons(false);\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const handleQuestionExpand = (index: number) => {\r\n+    setExpandedQuestion(expandedQuestion === index ? null : index);\r\n+  };\r\n+\r\n+  const handleActivityExpand = (index: number) => {\r\n+    setExpandedActivity(expandedActivity === index ? null : index);\r\n+  };\r\n+\r\n+  // Add effect to save mode changes to localStorage\r\n+  useEffect(() => {\r\n+    localStorage.setItem('lessonManagementViewMode', isViewMode.toString());\r\n+  }, [isViewMode]);\r\n+\r\n+  // Add handlers for creating new items\r\n+  const handleCreateGrade = async () => {\r\n+    try {\r\n+      const response = await fetch(`${API_ENDPOINT}/grades`, {\r\n+        method: 'POST',\r\n+        headers: { 'Content-Type': 'application/json' },\r\n+        body: JSON.stringify({ name: newItemData.name })\r\n+      });\r\n+\r\n+      if (!response.ok) throw new Error('Failed to create grade');\r\n+      const data = await response.json();\r\n+      \r\n+      if (!data.success) throw new Error(data.message || 'Failed to create grade');\r\n+      \r\n+      // Update grades list\r\n+      setGrades([...grades, data.data.grade]);\r\n+      setModalState({ ...modalState, showAddGrade: false });\r\n+      setNewItemData({ name: '', description: '' });\r\n+      toast.success('Grade created successfully');\r\n+    } catch (error) {\r\n+      console.error('Error creating grade:', error);\r\n+      toast.error('Failed to create grade');\r\n+    }\r\n+  };\r\n+\r\n+  const handleCreateTopic = async () => {\r\n+    if (!selectedGradeId) {\r\n+      toast.error('Please select a grade first');\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      const newTopic = await contentService.createTopic({\r\n+        title: newItemData.name, // Map from newItemData.name to title\r\n+        description: newItemData.description,\r\n+        gradeId: selectedGradeId\r\n+      });\r\n+\r\n+      setTopics(prev => [...prev, newTopic]);\r\n+      toast.success('Topic created successfully');\r\n+      setModalState({ ...modalState, showAddTopic: false });\r\n+      setNewItemData({ name: '', description: '' });\r\n+    } catch (err) {\r\n+      const error = err instanceof Error ? err.message : String(err);\r\n+      console.error('Error creating topic:', error);\r\n+      toast.error('Failed to create topic');\r\n+    }\r\n+  };\r\n+    \r\n+  \r\n+\r\n+\r\n+  const handleCreateSubtopic = async (data: { title: string; description?: string }) => {\r\n+    try {\r\n+      if (!selectedTopicId) {\r\n+        toast.error('Please select a topic first');\r\n+        return;\r\n+      }\r\n+\r\n+      const newSubtopic = await contentService.createSubtopic({\r\n+        ...data,\r\n+        topicId: selectedTopicId\r\n+      });\r\n+\r\n+      setSubtopics(prev => [...prev, {\r\n+        _id: newSubtopic.id,\r\n+        id: newSubtopic.id,\r\n+        name: newSubtopic.title,\r\n+        title: newSubtopic.title,\r\n+        description: newSubtopic.description,\r\n+        topic_id: newSubtopic.topic_id,\r\n+        orderIndex: prev.length,\r\n+        lessons: []\r\n+      }]);\r\n+\r\n+      toast.success('Subtopic created successfully');\r\n+      setModalState(prev => ({ ...prev, showAddSubtopic: false }));\r\n+    } catch (err) {\r\n+      const error = err as Error;\r\n+      console.error('Error creating subtopic:', error);\r\n+      toast.error('Failed to create subtopic');\r\n+    }\r\n+  };\r\n+\r\n+  const handleUpdateSubtopic = async (subtopicId: string, data: { title: string; description?: string }) => {\r\n+    try {\r\n+      const { data: updatedSubtopic, error } = await supabase\r\n+        .from('sub_topics')\r\n+        .update(data)\r\n+        .eq('id', subtopicId)\r\n+        .select()\r\n+        .single();\r\n+\r\n+      if (error) throw error;\r\n+      \r\n+      setSubtopics(prev => prev.map(subtopic => \r\n+        subtopic.id === subtopicId \r\n+          ? {\r\n+              ...subtopic,\r\n+              name: updatedSubtopic.title\r\n+            }\r\n+          : subtopic\r\n+      ));\r\n+\r\n+      toast.success('Subtopic updated successfully');\r\n+    } catch (err) {\r\n+      const error = err as Error;\r\n+      console.error('Error updating subtopic:', error);\r\n+      toast.error('Failed to update subtopic');\r\n+    }\r\n+  };\r\n+\r\n+  const handleDeleteSubtopic = async (subtopicId: string) => {\r\n+    try {\r\n+      await contentService.deleteSubtopic(subtopicId);\r\n+      setSubtopics(prev => prev.filter(subtopic => subtopic.id !== subtopicId));\r\n+      setSelectedSubtopicId(null);\r\n+      toast.success('Subtopic deleted successfully');\r\n+    } catch (err) {\r\n+      const error = err as Error;\r\n+      console.error('Error deleting subtopic:', error);\r\n+      toast.error('Failed to delete subtopic');\r\n+    }\r\n+  };\r\n+\r\n+  const handleCreateLesson = async () => {\r\n+    if (!selectedSubtopicId) {\r\n+      toast.error('Please select a subtopic first');\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      // First create the lesson\r\n+      const { data: newLesson, error: lessonError } = await supabase\r\n+        .from('lessons')\r\n+        .insert({\r\n+          title: newItemData.name,\r\n+          duration: 0,\r\n+          topic_id: selectedTopicId,\r\n+          subtopic_id: selectedSubtopicId,\r\n+          content: '', // Empty rich text content initially\r\n+          status: 'draft'\r\n+        })\r\n+        .select()\r\n+        .single();\r\n+\r\n+      if (lessonError) throw lessonError;\r\n+\r\n+      // Create initial question\r\n+      const { data: newQuestion, error: questionError } = await supabase\r\n+        .from('questions')\r\n+        .insert({\r\n+          lesson_id: newLesson.id,\r\n+          type: 'speaking', // default type\r\n+          title: 'Question 1',\r\n+          data: {\r\n+            prompt: '',\r\n+            teacherScript: '',\r\n+            options: []\r\n+          },\r\n+          order_index: 0\r\n+        })\r\n+        .select()\r\n+        .single();\r\n+\r\n+      if (questionError) throw questionError;\r\n+\r\n+      // Create initial exercise prompts for the question\r\n+      const { error: promptsError } = await supabase\r\n+        .from('exercise_prompts')\r\n+        .insert([\r\n+          {\r\n+            question_id: newQuestion.id,\r\n+            text: '',\r\n+            type: 'image',\r\n+            narration: '',\r\n+            saytext: '',\r\n+            media: [],\r\n+            order_index: 0\r\n+          },\r\n+          {\r\n+            question_id: newQuestion.id,\r\n+            text: '',\r\n+            type: 'gif',\r\n+            narration: '',\r\n+            saytext: '',\r\n+            media: [],\r\n+            order_index: 1\r\n+          }\r\n+        ]);\r\n+\r\n+      if (promptsError) throw promptsError;\r\n+\r\n+      // Create initial activity\r\n+      // const { error: activityError } = await supabase\r\n+      //   .from('activities')\r\n+      //   .insert({\r\n+      //     lesson_id: newLesson.id,\r\n+      //     type: 'practice',\r\n+      //     title: '',\r\n+      //     instructions: '',\r\n+      //     media: [],\r\n+      //     data: {\r\n+      //       prompt: '',\r\n+      //       teacherScript: '',\r\n+      //       media: []\r\n+      //     },\r\n+      //     order_index: 0\r\n+      //   });\r\n+\r\n+      // if (activityError) throw activityError;\r\n+\r\n+      // Update UI state\r\n+      setLessons(prev => [...prev, newLesson]);\r\n+      setCurrentLessonId(newLesson.id);\r\n+      setLessonTitle(newLesson.title);\r\n+      setModalState({ ...modalState, showAddLesson: false });\r\n+      setNewItemData({ name: '', description: '' });\r\n+      toast.success('Lesson created successfully');\r\n+\r\n+    } catch (error) {\r\n+      console.error('Error creating lesson:', error);\r\n+      toast.error('Failed to create lesson');\r\n+    }\r\n+  };\r\n+\r\n+  // Effect to handle localStorage after mount\r\n+  useEffect(() => {\r\n+    const storedMode = localStorage.getItem('lessonManagementViewMode');\r\n+    if (storedMode !== null) {\r\n+      setIsViewMode(storedMode === 'true');\r\n+    }\r\n+  }, []);\r\n+\r\n+  // Update the cleanupModalState function\r\n+  const cleanupModalState = useCallback(() => {\r\n+    document.body.style.pointerEvents = '';\r\n+    document.body.style.overflow = '';\r\n+    setModalState({\r\n+      showAddGrade: false,\r\n+      showAddTopic: false,\r\n+      showAddSubtopic: false,\r\n+      showAddLesson: false\r\n+    });\r\n+    setNewItemData({ name: '', description: '' });\r\n+  }, []);\r\n+\r\n+  // Add a function to handle modal state changes\r\n+  const handleModalStateChange = useCallback((modalType: keyof typeof modalState, open: boolean) => {\r\n+    if (!open) {\r\n+      cleanupModalState();\r\n+    } else {\r\n+      setModalState(prev => ({ ...prev, [modalType]: open }));\r\n+    }\r\n+  }, [cleanupModalState]);\r\n+\r\n+  const handleContentSave = async (content: string) => {\r\n+    const loadingToast = toast.loading(\"Saving content...\", {\r\n+      action: {\r\n+        label: \"Close\",\r\n+        onClick: () => toast.dismiss()\r\n+      }\r\n+    });\r\n+    \r\n+    try {\r\n+      const { data: { session } } = await supabase.auth.getSession();\r\n+      if (!session?.user) {\r\n+        toast.error('Please sign in to save content', { id: loadingToast });\r\n+        return;\r\n+      }\r\n+\r\n+      // Get the most recent content entry\r\n+      const { data: existingContent, error: checkError } = await supabase\r\n+        .from('lesson_content')\r\n+        .select('id')\r\n+        .eq('lesson_id', currentLessonId)\r\n+        .order('updated_at', { ascending: false })\r\n+        .limit(1)\r\n+        .maybeSingle();\r\n+\r\n+      // If content exists, update it; if not, insert new\r\n+      const { error } = await supabase\r\n+        .from('lesson_content')\r\n+        .upsert({\r\n+          id: existingContent?.id, // This ensures we update if id exists\r\n+          lesson_id: currentLessonId,\r\n+          content: [content],\r\n+          content_type: 'text',\r\n+          metadata: {\r\n+            heading: contentHeading\r\n+          },\r\n+          user_id: session.user.id,\r\n+          updated_at: new Date().toISOString()\r\n+        }, {\r\n+          onConflict: 'id'  // This ensures we update based on lesson_id\r\n+        });\r\n+\r\n+      if (error) throw error;\r\n+\r\n+      // Save questions separately\r\n+      for (const question of questions) {\r\n+        const { exercisePrompts, ...questionData } = question; // Remove exercisePrompts from question data\r\n+        \r\n+        // Save question\r\n+        const { error: questionError } = await supabase\r\n+          .from('questions')\r\n+          .upsert(questionData, {\r\n+            onConflict: 'id'\r\n+          })\r\n+          .select();\r\n+\r\n+        if (questionError) throw questionError;\r\n+\r\n+        // Save exercise prompts\r\n+        if (exercisePrompts?.length > 0) {\r\n+          for (const prompt of exercisePrompts) {\r\n+            const { error: promptError } = await supabase\r\n+              .from('exercise_prompts')\r\n+              .upsert(prompt, {\r\n+                onConflict: 'id'\r\n+              })\r\n+              .select();\r\n+\r\n+            if (promptError) throw promptError;\r\n+          }\r\n+        }\r\n+      }\r\n+      \r\n+      toast.success(\"Content saved successfully\", {\r\n+        action: {\r\n+          label: \"Close\",\r\n+          onClick: () => toast.dismiss()\r\n+        },\r\n+        id: loadingToast,\r\n+      });\r\n+      setIsContentEditorOpen(false);\r\n+    } catch (error) {\r\n+      console.error('Error saving content:', error);\r\n+      toast.error(\"Failed to save content\", {\r\n+        action: {\r\n+          label: \"Close\",\r\n+          onClick: () => toast.dismiss()\r\n+        },\r\n+        id: loadingToast,\r\n+      });\r\n+    }\r\n+  };\r\n+\r\n+  // Add this component for inline editing\r\n+  const InlineEdit = ({ \r\n+    value, \r\n+    onSave, \r\n+    isEditing, \r\n+    setIsEditing, \r\n+    placeholder,\r\n+    className = \"\"\r\n+  }: InlineEditProps) => {\r\n+    const [tempValue, setTempValue] = useState(value);\r\n+    \r\n+    return isEditing ? (\r\n+      <div className=\"flex items-center gap-2\">\r\n+        <Input\r\n+          value={tempValue}\r\n+          onChange={(e) => setTempValue(e.target.value)}\r\n+          placeholder={placeholder}\r\n+          className={className}\r\n+          autoFocus\r\n+        />\r\n+        <Button\r\n+          size=\"sm\"\r\n+          variant=\"ghost\"\r\n+          onClick={() => {\r\n+            onSave(tempValue);\r\n+            setIsEditing(false);\r\n+          }}\r\n+        >\r\n+          <Check className=\"h-4 w-4 text-green-500\" />\r\n+        </Button>\r\n+        <Button\r\n+          size=\"sm\"\r\n+          variant=\"ghost\"\r\n+          onClick={() => setIsEditing(false)}\r\n+        >\r\n+          <X className=\"h-4 w-4 text-red-500\" />\r\n+        </Button>\r\n+      </div>\r\n+    ) : (\r\n+      <div \r\n+        className=\"group flex items-center gap-2 cursor-pointer\"\r\n+        onClick={() => setIsEditing(true)}\r\n+      >\r\n+        <span className={className}>{value || placeholder}</span>\r\n+        <Pencil className=\"h-4 w-4 opacity-0 group-hover:opacity-100 transition-opacity\" />\r\n+      </div>\r\n+    );\r\n+  };\r\n+\r\n+  // Add this effect to handle auto-collapse after lesson selection\r\n+  useEffect(() => {\r\n+    if (currentLessonId && selectedGradeId && selectedTopicId && selectedSubtopicId) {\r\n+      setIsSidebarLocked(false);\r\n+      // Optional: add a slight delay before collapsing\r\n+      setTimeout(() => setIsSidebarCollapsed(true), 300);\r\n+    }\r\n+  }, [currentLessonId, selectedGradeId, selectedTopicId, selectedSubtopicId]);\r\n+\r\n+  // Add individual save handlers\r\n+  // const handleSaveQuestion = async (question: Question, index: number) => {\r\n+  //   try {\r\n+  //     // Update status to saving\r\n+  //     setQuestionSaveStatuses(prev => [\r\n+  //       ...prev.filter(s => s.id !== question.id),\r\n+  //       { id: question.id, status: 'saving' }\r\n+  //     ]);\r\n+\r\n+  //     const questionUpsert = {\r\n+  //       id: question.id,\r\n+  //       lesson_id: currentLessonId,\r\n+  //       type: question.type,\r\n+  //       title: question.data?.prompt || 'Untitled Question',\r\n+  //       metadata: question.metadata || {},\r\n+  //       data: {\r\n+  //         prompt: question.data?.prompt || '',\r\n+  //         teacherScript: question.data?.teacherScript || '',\r\n+  //         ...question.data\r\n+  //       },\r\n+  //       order_index: index,\r\n+  //       created_at: new Date().toISOString(),\r\n+  //       updated_at: new Date().toISOString()\r\n+  //     };\r\n+\r\n+  //     const { error: questionError } = await supabase\r\n+  //       .from('questions')\r\n+  //       .upsert(questionUpsert);\r\n+\r\n+  //     if (questionError) throw questionError;\r\n+\r\n+  //     // Update status to saved\r\n+  //     setQuestionSaveStatuses(prev => [\r\n+  //       ...prev.filter(s => s.id !== question.id),\r\n+  //       { id: question.id, status: 'saved', lastSaved: new Date().toISOString() }\r\n+  //     ]);\r\n+\r\n+  //     toast.success(`Question ${index + 1} saved successfully`);\r\n+  //   } catch (error) {\r\n+  //     console.error('Error saving question:', error);\r\n+  //     setQuestionSaveStatuses(prev => [\r\n+  //       ...prev.filter(s => s.id !== question.id),\r\n+  //       { id: question.id, status: 'error' }\r\n+  //     ]);\r\n+  //     toast.error(`Failed to save question ${index + 1}`);\r\n+  //   }\r\n+  // };\r\n+\r\n+  const handleSavePrompt = async (questionId: string, prompt: ExercisePrompt, promptIndex: number) => {\r\n+    try {\r\n+      setPromptSaveStatuses(prev => [\r\n+        ...prev.filter(s => s.id !== prompt.id),\r\n+        { id: prompt.id || '', status: 'saving' } as SaveStatus\r\n+      ]);\r\n+\r\n+      const promptUpsert = {\r\n+        id: prompt.id,\r\n+        question_id: questionId,\r\n+        text: prompt.text || '',\r\n+        type: prompt.type || 'text',\r\n+        narration: prompt.narration || '',\r\n+        saytext: prompt.saytext || '',\r\n+        media: prompt.media || [],\r\n+        order_index: promptIndex,\r\n+        created_at: prompt.created_at || new Date().toISOString(),\r\n+        updated_at: new Date().toISOString()\r\n+      };\r\n+\r\n+      const { error: promptError } = await supabase\r\n+        .from('exercise_prompts')\r\n+        .upsert(promptUpsert);\r\n+\r\n+      if (promptError) throw promptError;\r\n+\r\n+      setPromptSaveStatuses(prev => [\r\n+        ...prev.filter(s => s.id !== prompt.id),\r\n+        { id: prompt.id || '', status: 'saved', lastSaved: new Date().toISOString() } as SaveStatus\r\n+      ]);\r\n+\r\n+      toast.success(`Prompt ${promptIndex + 1} saved successfully`);\r\n+    } catch (error) {\r\n+      console.error('Error saving prompt:', error);\r\n+      setPromptSaveStatuses(prev => [\r\n+        ...prev.filter(s => s.id !== prompt.id),\r\n+        { id: prompt.id || '', status: 'error' } as SaveStatus\r\n+      ]);\r\n+      toast.error(`Failed to save prompt ${promptIndex + 1}`);\r\n+    }\r\n+  };\r\n+\r\n+  // Add effect to mark items as draft when edited\r\n+  useEffect(() => {\r\n+    questions.forEach(question => {\r\n+      if (!questionSaveStatuses.find(s => s.id === question.id)) {\r\n+        setQuestionSaveStatuses(prev => [\r\n+          ...prev,\r\n+          { id: question.id, status: 'draft' }\r\n+        ]);\r\n+      }\r\n+    });\r\n+  }, [questions]);\r\n+\r\n+  // Add this function with your other handlers\r\n+  const handleRefreshLesson = async () => {\r\n+    if (!currentLessonId) {\r\n+      toast.error('No lesson selected');\r\n+      return;\r\n+    }\r\n+    \r\n+    try {\r\n+      toast.loading('Refreshing lesson content...', {\r\n+        action: {\r\n+          label: \"Close\",\r\n+          onClick: () => toast.dismiss()\r\n+        },\r\n+      });\r\n+      await handleLessonSelect(currentLessonId);\r\n+      toast.success('Content refreshed', {\r\n+        action: {\r\n+          label: \"Close\",\r\n+          onClick: () => toast.dismiss()\r\n+        },\r\n+      });\r\n+    } catch (error) {\r\n+      console.error('Error refreshing lesson:', error);\r\n+      toast.error('Failed to refresh content', {\r\n+        action: {\r\n+          label: \"Close\",\r\n+          onClick: () => toast.dismiss()\r\n+        },\r\n+      });\r\n+    }\r\n+  };\r\n+\r\n+  // Add this function to handle refresh\r\n+  const handleRefreshContent = async () => {\r\n+    if (!currentLessonId) {\r\n+      toast.error('No lesson selected');\r\n+      return;\r\n+    }\r\n+    \r\n+    toast.loading('Refreshing content...');\r\n+    try {\r\n+      await loadLessonContent(currentLessonId);\r\n+      toast.success('Content refreshed');\r\n+    } catch (error) {\r\n+      console.error('Refresh error:', error);\r\n+      toast.error('Failed to refresh content');\r\n+    }\r\n+  };\r\n+\r\n+  // Update the sidebar hover mechanism\r\n+  const handleSidebarHover = useCallback(\r\n+    debounce((isHovering: boolean) => {\r\n+      if (!isSidebarLocked && !isNavigating && !isDropdownOpen) {\r\n+        if (isHovering || document.activeElement?.closest('.sidebar-content')) {\r\n+          setIsSidebarCollapsed(false);\r\n+        } else {\r\n+          setTimeout(() => {\r\n+            if (!isDropdownOpen) { // Only collapse if dropdown is closed\r\n+              setIsSidebarCollapsed(true);\r\n+            }\r\n+          }, 300);\r\n+        }\r\n+      }\r\n+    }, 100),\r\n+    [isSidebarLocked, isNavigating, isDropdownOpen]\r\n+  );\r\n+\r\n+  // Update the sidebar JSX\r\n+  <div \r\n+    className={cn(\r\n+      \"transition-all duration-300 ease-in-out relative\",\r\n+      isSidebarCollapsed ? \"w-20\" : \"w-80\",\r\n+      \"flex-shrink-0 group\"\r\n+    )}\r\n+    onMouseEnter={() => {\r\n+      handleSidebarHover(true);\r\n+      // Immediately expand on mouse enter\r\n+      if (!isSidebarLocked) {\r\n+        setIsSidebarCollapsed(false);\r\n+      }\r\n+    }}\r\n+    onMouseLeave={() => {\r\n+      // Only collapse if not interacting with content\r\n+      if (!document.activeElement?.closest('.sidebar-content')) {\r\n+        handleSidebarHover(false);\r\n+      }\r\n+    }}\r\n+    onFocus={() => setIsSidebarCollapsed(false)}\r\n+  >\r\n+    <Card className={cn(\r\n+      \"h-full relative sidebar-content\", // Added sidebar-content class\r\n+      \"transition-shadow duration-300\",\r\n+      \"hover:shadow-lg\"\r\n+    )}>\r\n+      {/* Rest of sidebar content */}\r\n+    </Card>\r\n+  </div>\r\n+\r\n+  // Add this state to control sidebar visibility\r\n+  const [showSidebar, setShowSidebar] = useState(true);\r\n+\r\n+  // Add this effect to hide sidebar on grade selection\r\n+  useEffect(() => {\r\n+    if (selectedGradeId && isViewMode) {\r\n+      setShowSidebar(false);\r\n+    } else {\r\n+      setShowSidebar(true);\r\n+    }\r\n+  }, [selectedGradeId, isViewMode]);\r\n+\r\n+  // Add this function to handle lesson start\r\n+  const handleStartLesson = async (lessonId: string) => {\r\n+    try {\r\n+      setIsNavigating(true);\r\n+      const { data: lessonData, error } = await supabase\r\n+        .from('lessons')\r\n+        .select(`\r\n+          *,\r\n+          questions (\r\n+            id,\r\n+            title,\r\n+            content,\r\n+            type,\r\n+            data,\r\n+            metadata,\r\n+            exercise_prompts (*)\r\n+          )\r\n+        `)\r\n+        .eq('id', lessonId)\r\n+        .single();\r\n+\r\n+      if (error) throw error;\r\n+\r\n+      setCurrentLessonId(lessonId);\r\n+      setLessonDialogOpen(true);\r\n+      setLessonContent(lessonData);\r\n+    } catch (error) {\r\n+      toast.error('Failed to load lesson');\r\n+      console.error(error);\r\n+    } finally {\r\n+      setIsNavigating(false);\r\n+    }\r\n+  };\r\n+\r\n+  // Update the main content section\r\n+  return (\r\n+    <div className=\"container mx-auto py-8\">\r\n+      {/* Header */}\r\n+      <div className=\"flex items-center justify-between mb-2\">\r\n+        {/* ... header content ... */}\r\n+        <div className=\"flex items-center gap-4\">\r\n+          <Link href=\"/super-admin\">\r\n+            <Button variant=\"outline\" className=\"gap-2\">\r\n+              <ArrowLeft className=\"h-4 w-4\" />\r\n+              Back\r\n+            </Button>\r\n+          </Link>\r\n+          <div className=\"flex items-center gap-2\">\r\n+            <h1 className=\"text-2xl font-bold\">Lesson Management</h1>\r\n+            <Button\r\n+              variant=\"ghost\"\r\n+              size=\"icon\"\r\n+              onClick={handleRefreshLesson}\r\n+              className=\"ml-2\"\r\n+              title=\"Refresh lesson content\"\r\n+            >\r\n+              <RefreshCw className=\"h-4 w-4\" />\r\n+            </Button>\r\n+          </div>\r\n+      <div className=\"container mx-auto py-8\">\r\n+        {/* Header */}\r\n+        <div className=\"flex items-center justify-between mb-2\">\r\n+          {/* ... header content ... */}\r\n+          <div className=\"flex items-center gap-4\">\r\n+            <Link href=\"/super-admin\">\r\n+              <Button variant=\"outline\" className=\"gap-2\">\r\n+                <ArrowLeft className=\"h-4 w-4\" />\r\n+                Back\r\n+              </Button>\r\n+            </Link>\r\n+            <div className=\"flex items-center gap-2\">\r\n+              <h1 className=\"text-2xl font-bold\">Lesson Management</h1>\r\n+              <Button\r\n+                variant=\"ghost\"\r\n+                size=\"icon\"\r\n+                onClick={handleRefreshLesson}\r\n+                className=\"ml-2\"\r\n+                title=\"Refresh lesson content\"\r\n+              >\r\n+                <RefreshCw className=\"h-4 w-4\" />\r\n+              </Button>\r\n+            </div>\r\n+            <p className=\"text-sm text-muted-foreground\">Create and manage your educational content</p>\r\n+          </div>\r\n+          <div className=\"flex items-center gap-2\">\r\n+            <Button\r\n+              variant=\"outline\"\r\n+              size=\"sm\"\r\n+              onClick={() => setShowHelpTips(!showHelpTips)}\r\n+              className=\"gap-2\"\r\n+            >\r\n+              {showHelpTips ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\r\n+              {showHelpTips ? 'Hide Tips' : 'Show Tips'}\r\n+            </Button>\r\n+          </div>\r\n+        </div>\r\n+        \r\n+        {/* Main content wrapper - Fix the layout here */}\r\n+        <div className=\"flex gap-6 h-[calc(100vh-200px)]\">\r\n+          {/* Improved sidebar */}\r\n+          <div \r\n+            className={cn(\r\n+              \"transition-all duration-300 ease-in-out relative\",\r\n+              isSidebarCollapsed ? \"w-20\" : \"w-80\",\r\n+              \"flex-shrink-0 group\"\r\n+            )}\r\n+            onMouseEnter={() => {\r\n+              handleSidebarHover(true);\r\n+              // Immediately expand on mouse enter\r\n+              if (!isSidebarLocked) {\r\n+                setIsSidebarCollapsed(false);\r\n+              }\r\n+            }}\r\n+            onMouseLeave={() => {\r\n+              // Only collapse if not interacting with content\r\n+              if (!document.activeElement?.closest('.sidebar-content')) {\r\n+                handleSidebarHover(false);\r\n+              }\r\n+            }}\r\n+            onFocus={() => setIsSidebarCollapsed(false)}\r\n+          >\r\n+            <Card className={cn(\r\n+              \"h-full relative sidebar-content\", // Added sidebar-content class\r\n+              \"transition-shadow duration-300\",\r\n+              \"hover:shadow-lg\"\r\n+            )}>\r\n+              {/* Lock button - only show after lesson selection */}\r\n+              {currentLessonId && (\r\n+                <Button\r\n+                  variant=\"ghost\"\r\n+                  size=\"sm\"\r\n+                  className=\"absolute top-2 right-2 z-10\"\r\n+                  onClick={() => {\r\n+                    setIsSidebarLocked(!isSidebarLocked);\r\n+                    if (!isSidebarLocked) {\r\n+                      setIsSidebarCollapsed(false);\r\n+                    }\r\n+                  }}\r\n+                >\r\n+                  {isSidebarLocked ? <Lock className=\"h-4 w-4\" /> : <Unlock className=\"h-4 w-4\" />}\r\n+                </Button>\r\n+              )}\r\n+\r\n+              {/* Sidebar content with overflow handling */}\r\n+              <div className={cn(\r\n+                \"transition-all duration-300 overflow-hidden\",\r\n+                isSidebarCollapsed ? \"opacity-0\" : \"opacity-100\"\r\n+              )}>\r\n+                <Card className=\"h-full\">\r\n+                  <CardHeader className=\"pb-3\">\r\n+                    <div className=\"flex items-center justify-between\">\r\n+                      <CardTitle className=\"text-lg font-semibold\">Content Management</CardTitle>\r\n+                      <TooltipProvider>\r\n+                        <Tooltip>\r\n+                          <TooltipTrigger>\r\n+                            <HelpCircle className=\"h-4 w-4 text-muted-foreground\" />\r\n+                          </TooltipTrigger>\r\n+                          <TooltipContent>\r\n+                            <p>Manage your educational content here</p>\r\n+                          </TooltipContent>\r\n+                        </Tooltip>\r\n+                      </TooltipProvider>\r\n+                      </div>\r\n+                    <CardDescription>Create and manage your lessons</CardDescription>\r\n+                  </CardHeader>\r\n+                  <CardContent className=\"space-y-4\">\r\n+                    {/* View/Edit Mode Toggle */}\r\n+                    <div className=\"grid grid-cols-2 gap-2 p-1 bg-muted rounded-lg\">\r\n+                      <Button\r\n+                        variant={isViewMode ? \"default\" : \"ghost\"}\r\n+                        size=\"sm\"\r\n+                        onClick={() => setIsViewMode(true)}\r\n+                        className=\"w-full\"\r\n+                      >\r\n+                        <Eye className=\"h-4 w-4 mr-2\" />\r\n+                        View\r\n+                      </Button>\r\n+                      <Button\r\n+                        variant={!isViewMode ? \"default\" : \"ghost\"}\r\n+                        size=\"sm\"\r\n+                        onClick={() => setIsViewMode(false)}\r\n+                        className=\"w-full\"\r\n+                      >\r\n+                        <Edit className=\"h-4 w-4 mr-2\" />\r\n+                        Edit\r\n+                      </Button>\r\n+                    </div>\r\n+\r\n+                    {/* Grade Selection */}\r\n+                    <div className=\"space-y-2\">\r\n+                      <div className=\"flex items-center justify-between\">\r\n+                        <Label htmlFor=\"grade-select\">Grade</Label>\r\n+                        {isViewMode && (\r\n+                          <Button variant=\"ghost\" size=\"sm\" onClick={() => setExpandedGrade(expandedGrade ? null : selectedGrade)}>\r\n+                            {expandedGrade ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n+                          </Button>\r\n+                        )}\r\n+                      </div>\r\n+                      <Select \r\n+                        value={selectedGradeId || ''}\r\n+                        onValueChange={handleGradeSelect}\r\n+                        onOpenChange={(open) => {\r\n+                          if (open) {\r\n+                            // Force sidebar to stay open and lock it\r\n+                            setIsSidebarCollapsed(false);\r\n+                            setIsSidebarLocked(true);\r\n+                          }\r\n+                        }}\r\n+                      >\r\n+                        <SelectTrigger \r\n+                          id=\"grade-select\" \r\n+                          className=\"w-full\"\r\n+                          onClick={(e) => {\r\n+                            e.stopPropagation(); // Prevent event bubbling\r\n+                            setIsSidebarCollapsed(false);\r\n+                            setIsSidebarLocked(true);\r\n+                          }}\r\n+                        >\r\n+                          <SelectValue placeholder=\"Select Grade\" />\r\n+                        </SelectTrigger>\r\n+                        <SelectContent \r\n+                          onCloseAutoFocus={(e) => {\r\n+                            e.preventDefault();\r\n+                            setIsSidebarLocked(true);\r\n+                            setIsSidebarCollapsed(false);\r\n+                          }}\r\n+                        >\r\n+                          {grades.map((grade: Grade) => (\r\n+                            <SelectItem \r\n+                              key={`grade-${grade.id || 'new'}`} \r\n+                              value={grade.id || ''}\r\n+                              onMouseDown={(e) => {\r\n+                                e.preventDefault();\r\n+                                e.stopPropagation();\r\n+                              }}\r\n+                            >\r\n+                              <div className=\"flex items-center gap-2\">\r\n+                                <BookOpen className=\"h-4 w-4 text-primary\" />\r\n+                                {grade.name}\r\n+                              </div>\r\n+                            </SelectItem>\r\n+                          ))}\r\n+                        </SelectContent>\r\n+                      </Select>\r\n+                      {!isViewMode && (\r\n+                      <Button \r\n+                        variant=\"outline\" \r\n+                        size=\"sm\" \r\n+                        className=\"w-full gap-2\"\r\n+                        onClick={() => setModalState({ ...modalState, showAddGrade: false })}\r\n+                      >\r\n+                        <Plus className=\"h-4 w-4\" />\r\n+                        Add New Grade\r\n+                      </Button>\r\n+                      )}\r\n+                    </div>\r\n+\r\n+                    {/* Content Tree View in View Mode */}\r\n+                    {isViewMode && selectedGrade && (\r\n+  <div className=\"grid grid-cols-1 gap-6 p-6\">\r\n+    <Card className=\"border-primary/10\">\r\n+      <CardHeader>\r\n+        <div className=\"flex items-center justify-between\">\r\n+          <CardTitle>Content Structure</CardTitle>\r\n+          <Badge variant=\"outline\" className=\"text-primary\">\r\n+            {topics.length} Topics\r\n+          </Badge>\r\n+        </div>\r\n+      </CardHeader>\r\n+      <CardContent className=\"space-y-6\">\r\n+        {topics.map((topic) => (\r\n+          <Card \r\n+            key={topic.id} \r\n+            className={cn(\r\n+              \"border-l-4 transition-all duration-200\",\r\n+              \"border-l-primary/40 hover:border-l-primary\"\r\n+            )}\r\n+          >\r\n+            <CardHeader className=\"py-4\">\r\n+              <div className=\"flex items-center justify-between\">\r\n+                <div className=\"flex items-center gap-2\">\r\n+                  <Layers className=\"h-5 w-5 text-primary\" />\r\n+                  <div>\r\n+                    <h3 className=\"font-medium\">{topic.title}</h3>\r\n+                    <p className=\"text-sm text-muted-foreground\">\r\n+                      {subtopics.filter(s => s.topic_id === topic.id).length} Subtopics\r\n+                    </p>\r\n+                  </div>\r\n+                </div>\r\n+                <Button\r\n+                  variant=\"ghost\"\r\n+                  size=\"sm\"\r\n+                  className=\"hover:bg-destructive/10\"\r\n+                  onClick={async () => {\r\n+                    const { canDelete, message } = await checkDeletability('topic', topic.id);\r\n+                    if (!canDelete) {\r\n+                      toast.error(message);\r\n+                      return;\r\n+                    }\r\n+                    setItemToDelete({\r\n+                      id: topic.id,\r\n+                      type: 'topic',\r\n+                      title: topic.title\r\n+                    });\r\n+                    setDeleteDialogOpen(true);\r\n+                  }}\r\n+                >\r\n+                  <Trash className=\"h-4 w-4\" />\r\n+                </Button>\r\n+              </div>\r\n+\r\n+              <div className=\"mt-4 pl-4 space-y-4\">\r\n+                {subtopics\r\n+                  .filter(subtopic => subtopic.topic_id === topic.id)\r\n+                  .map((subtopic) => {\r\n+                    const subtopicLessons = lessons.filter(l => l.subtopic_id === subtopic.id);\r\n+                    const isEmpty = subtopicLessons.length === 0;\r\n+                    \r\n+                    return (\r\n+                      <Card key={subtopic.id} className=\"border-l-2 border-l-primary/20\">\r\n+                        <CardHeader className=\"py-3\">\r\n+                          <div className=\"flex items-center justify-between\">\r\n+                            <div className=\"flex items-center gap-2\">\r\n+                              <BookOpen className=\"h-4 w-4 text-primary\" />\r\n+                              <div>\r\n+                                <h4 className=\"font-medium\">{subtopic.title}</h4>\r\n+                                <div className=\"flex items-center gap-2\">\r\n+                                  <Badge variant=\"outline\">\r\n+                                    {subtopicLessons.length} Lessons\r\n+                                  </Badge>\r\n+                                  {isEmpty && (\r\n+                                    <Badge variant=\"outline\" className=\"text-yellow-500\">\r\n+                                      Empty\r\n+                                    </Badge>\r\n+                                  )}\r\n+                                </div>\r\n+                              </div>\r\n+                            </div>\r\n+                            <Button\r\n+                              variant=\"ghost\"\r\n+                              size=\"sm\"\r\n+                              className=\"hover:bg-destructive/10\"\r\n+                              onClick={async () => {\r\n+                                const { canDelete, message } = await checkDeletability('subtopic', subtopic.id);\r\n+                                if (!canDelete) {\r\n+                                  toast.error(message);\r\n+                                  return;\r\n+                                }\r\n+                                setItemToDelete({\r\n+                                  id: subtopic.id,\r\n+                                  type: 'subtopic',\r\n+                                  title: subtopic.title\r\n+                                });\r\n+                                setDeleteDialogOpen(true);\r\n+                              }}\r\n+                            >\r\n+                              <Trash className=\"h-4 w-4\" />\r\n+                            </Button>\r\n+                          </div>\r\n+\r\n+                          <div className=\"pl-4 mt-2 space-y-2\">\r\n+                            {subtopicLessons.map((lesson) => {\r\n+                              const questionCount = lesson.questions?.length || 0;\r\n+                              const isEmpty = questionCount === 0;\r\n+                              \r\n+                              return (\r\n+                                <Card key={lesson.id} className=\"border-l border-l-primary/10\">\r\n+                                  <CardHeader className=\"py-2\">\r\n+                                    <div className=\"flex items-center justify-between\">\r\n+                                      <div className=\"flex items-center gap-2\">\r\n+                                        <div className=\"flex flex-col\">\r\n+                                          <span className=\"text-sm font-medium\">\r\n+                                            {lesson.title}\r\n+                                          </span>\r\n+                                          <div className=\"flex items-center gap-2\">\r\n+                                            <span className=\"text-xs text-muted-foreground\">\r\n+                                              {lesson.duration || 0} mins • {questionCount} Questions\r\n+                                            </span>\r\n+                                            {isEmpty && (\r\n+                                              <Badge \r\n+                                                variant=\"outline\" \r\n+                                                className=\"text-yellow-500\"\r\n+                                              >\r\n+                                                Empty\r\n+                                              </Badge>\r\n+                                            )}\r\n+                                          </div>\r\n+                                        </div>\r\n+                                      </div>\r\n+                                      <Button\r\n+                                        variant=\"ghost\"\r\n+                                        size=\"sm\"\r\n+                                        className=\"hover:bg-destructive/10\"\r\n+                                        onClick={async () => {\r\n+                                          const { canDelete, message } = await checkDeletability('lesson', lesson.id);\r\n+                                          if (!canDelete) {\r\n+                                            toast.error(message);\r\n+                                            return;\r\n+                                          }\r\n+                                          setItemToDelete({\r\n+                                            id: lesson.id,\r\n+                                            type: 'lesson',\r\n+                                            title: lesson.title\r\n+                                          });\r\n+                                          setDeleteDialogOpen(true);\r\n+                                        }}\r\n+                                      >\r\n+                                        <Trash className=\"h-4 w-4\" />\r\n+                                      </Button>\r\n+                                    </div>\r\n+                                  </CardHeader>\r\n+                                </Card>\r\n+                              );\r\n+                            })}\r\n+                          </div>\r\n+                        </CardHeader>\r\n+                      </Card>\r\n+                    );\r\n+                  })}\r\n+              </div>\r\n+            </CardHeader>\r\n+          </Card>\r\n+        ))}\r\n+      </CardContent>\r\n+    </Card>\r\n+  </div>\r\n+)}\r\n+\r\n+                    {/* Regular Edit Mode Content */}\r\n+                    {!isViewMode && (\r\n+                      <>\r\n+                        {/* Existing Topic, Subtopic, and Lesson Selection UI */}\r\n+                      {/* Topic Selection */}\r\n+                        {selectedGradeId && (\r\n+                      <div className=\"space-y-2\">\r\n+                        <div className=\"flex items-center justify-between\">\r\n+                        <Label htmlFor=\"topic-select\">Topic</Label>\r\n+                        </div>\r\n+                        <Select \r\n+                              value={selectedTopicId || ''} \r\n+                              onValueChange={handleTopicSelect}\r\n+                        >\r\n+                          <SelectTrigger id=\"topic-select\" className=\"w-full\">\r\n+                            <SelectValue placeholder=\"Select Topic\" />\r\n+                          </SelectTrigger>\r\n+                          <SelectContent>\r\n+                                {topics.map((topic: Topic) => (\r\n+                                  <SelectItem \r\n+                                    key={`topic-${topic.id || 'new'}`} \r\n+                                    value={topic.id || ''}\r\n+                                  >\r\n+                                  <div className=\"flex items-center gap-2\">\r\n+                                  <Layers className=\"h-4 w-4 text-primary\" />\r\n+                                    {topic.title}\r\n+                                  </div>\r\n+                                </SelectItem>\r\n+                              ))}\r\n+                          </SelectContent>\r\n+                        </Select>\r\n+                        <Button \r\n+                          variant=\"outline\" \r\n+                          size=\"sm\" \r\n+                          className=\"w-full gap-2\"\r\n+                          onClick={() => setModalState({ ...modalState, showAddTopic: true })}\r\n+                        >\r\n+                          <Plus className=\"h-4 w-4\" />\r\n+                          Add New Topic\r\n+                        </Button>\r\n+                      </div>\r\n+                    )}\r\n+\r\n+                    {/* Subtopic Selection */}\r\n+                        {selectedTopicId && (\r\n+                      <div className=\"space-y-2\">\r\n+                        <div className=\"flex items-center justify-between\">\r\n+                        <Label htmlFor=\"subtopic-select\">Subtopic</Label>\r\n+                        </div>\r\n+                        <Select \r\n+                              value={selectedSubtopicId || ''} \r\n+                              onValueChange={handleSubtopicSelect}\r\n+                        >\r\n+                          <SelectTrigger id=\"subtopic-select\" className=\"w-full\">\r\n+                            <SelectValue placeholder=\"Select Subtopic\" />\r\n+                          </SelectTrigger>\r\n+                          <SelectContent>\r\n+                                {subtopics\r\n+                                  .filter(subtopic => subtopic.id)\r\n+                                  .map((subtopic, index) => (\r\n+                                    <SelectItem \r\n+                                      key={subtopic.id || `subtopic-${index}`}\r\n+                                      value={subtopic.id || ''}\r\n+                                    >\r\n+                                      {subtopic.title || 'Untitled Subtopic'}\r\n+                                    </SelectItem>\r\n+                                  ))}\r\n+                          </SelectContent>\r\n+                        </Select>\r\n+                        {!isViewMode && (\r\n+                          <Button \r\n+                            variant=\"outline\" \r\n+                            size=\"sm\" \r\n+                            className=\"w-full gap-2\"\r\n+                            onClick={() => setModalState({ ...modalState, showAddSubtopic: true })}\r\n+                          >\r\n+                            <Plus className=\"h-4 w-4\" />\r\n+                            Add New Subtopic\r\n+                          </Button>\r\n+                        )}\r\n+                      </div>\r\n+                    )}\r\n+\r\n+                    {/* Lesson Selection */}\r\n+                        {selectedSubtopicId && (\r\n+                      <div className=\"space-y-2\">\r\n+                        <div className=\"flex items-center justify-between\">\r\n+                          <Label htmlFor=\"lesson-select\">Lesson</Label>\r\n+                        </div>\r\n+                          <Select \r\n+                            value={currentLessonId || ''} \r\n+                            onValueChange={handleLessonSelect}\r\n+                            onOpenChange={(open) => {\r\n+                              setIsDropdownOpen(open);\r\n+                              if (open) {\r\n+                                setIsSidebarCollapsed(false);\r\n+                                setIsSidebarLocked(true);\r\n+                              } else {\r\n+                                // Small delay before unlocking to prevent immediate collapse\r\n+                                setTimeout(() => {\r\n+                                  setIsSidebarLocked(false);\r\n+                                }, 100);\r\n+                              }\r\n+                            }}\r\n+                          >\r\n+                            <SelectTrigger \r\n+                              id=\"lesson-select\" \r\n+                              className=\"w-full\"\r\n+                              onClick={(e) => {\r\n+                                e.stopPropagation();\r\n+                                setIsSidebarCollapsed(false);\r\n+                                setIsSidebarLocked(true);\r\n+                              }}\r\n+                            >\r\n+                              <SelectValue placeholder=\"Select Lesson\" />\r\n+                            </SelectTrigger>\r\n+                            <SelectContent>\r\n+                              {lessons\r\n+                                .filter((lesson): lesson is Lesson => lesson !== undefined && lesson !== null)\r\n+                                .map((lesson: Lesson) => (\r\n+                                  <SelectItem \r\n+                                    key={`lesson-${lesson.id || 'new'}`} \r\n+                                    value={lesson.id || ''}\r\n+                                  >\r\n+                                    <div className=\"flex items-center gap-2\">\r\n+                                      <BookOpen className=\"h-4 w-4 text-primary\" />\r\n+                                      {lesson.title || 'Untitled Lesson'}\r\n+                                    </div>\r\n+                                  </SelectItem>\r\n+                                ))}\r\n+                            </SelectContent>\r\n+                          </Select>\r\n+                    <Button \r\n+                            variant=\"outline\" \r\n+                            size=\"sm\" \r\n+                            className=\"w-full gap-2\"\r\n+                        onClick={() => setModalState({ ...modalState, showAddLesson: true })}\r\n+                          >\r\n+                            <Plus className=\"h-4 w-4\" />\r\n+                            Add New Lesson\r\n+                    </Button>\r\n+                      </div>\r\n+                        )}\r\n+                      </>\r\n+                    )}\r\n+                  </CardContent>\r\n+                </Card>\r\n+              </div>\r\n+\r\n+              {/* Collapsed view */}\r\n+              {isSidebarCollapsed && (\r\n+                <div className=\"absolute inset-0 flex flex-col items-center pt-12 gap-4\">\r\n+                  <BookOpen className=\"h-6 w-6 text-muted-foreground\" />\r\n+                  <div className=\"w-px h-full bg-border\" />\r\n+                </div>\r\n+              )}\r\n+            </Card>\r\n+          </div>\r\n+        \r\n+\r\n+          {/* Right Content Area */}\r\n+          <div className=\"flex-1 overflow-y-auto\">\r\n+            {isNavigating ? (\r\n+              <div className=\"flex items-center justify-center h-[400px]\">\r\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n+                <span className=\"ml-3\">Loading...</span>\r\n+              </div>\r\n+            ) : (\r\n+              <>\r\n+                {!selectedGradeId ? (\r\n+                  // Question Types Display Section\r\n+                  <div className=\"space-y-6\">\r\n+                    <Card>\r\n+                      <CardHeader>\r\n+                        <div className=\"flex items-center justify-between\">\r\n+                          <div>\r\n+                            <CardTitle className=\"text-xl font-semibold\">Available Question Types</CardTitle>\r\n+                            <CardDescription>Browse through different question formats and examples</CardDescription>\r\n+                          </div>\r\n+                          <TooltipProvider>\r\n+                            <Tooltip>\r\n+                              <TooltipTrigger>\r\n+                                <HelpCircle className=\"h-5 w-5 text-muted-foreground\" />\r\n+                              </TooltipTrigger>\r\n+                              <TooltipContent>\r\n+                                <p>Click on each type to see detailed examples</p>\r\n+                              </TooltipContent>\r\n+                            </Tooltip>\r\n+                          </TooltipProvider>\r\n+                        </div>\r\n+                      </CardHeader>\r\n+                      <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n+                        {Object.entries(QUESTION_TYPES).map(([type, details]) => (\r\n+                          <Card key={type} className=\"cursor-pointer hover:bg-accent/50 transition-colors\">\r\n+                            <CardHeader className=\"p-4\">\r\n+                              <div className=\"flex items-center justify-between mb-2\">\r\n+                                <Badge variant=\"outline\" className=\"bg-primary/5 text-lg\">\r\n+                                  {details.label}\r\n+                                </Badge>\r\n+                              </div>\r\n+                              <CardDescription className=\"text-sm\">\r\n+                                {details.description || 'No description available'}\r\n+                              </CardDescription>\r\n+                              <div className=\"mt-4\">\r\n+                                <div className=\"text-sm font-medium mb-2\">Example:</div>\r\n+                                <div className=\"p-3 rounded-md bg-muted/50 text-sm\">\r\n+                                  {type === 'multiple-choice' && (\r\n+                                    <>\r\n+                                      <div className=\"font-medium mb-2\">Q: What is the capital of France?</div>\r\n+                                      <div className=\"space-y-1 pl-4\">\r\n+                                        <div>A) Paris</div>\r\n+                                        <div>B) London</div>\r\n+                                        <div>C) Berlin</div>\r\n+                                        <div>D) Madrid</div>\r\n+                                      </div>\r\n+                                    </>\r\n+                                  )}\r\n+                                  {type === 'fill-in-blank' && (\r\n+                                    <div className=\"space-y-2\">\r\n+                                      <div>Complete the sentence:</div>\r\n+                                      <div>The sun rises in the <span className=\"bg-primary/20 px-2 rounded\">_____</span> and sets in the <span className=\"bg-primary/20 px-2 rounded\">_____</span>.</div>\r\n+                                    </div>\r\n+                                  )}\r\n+                                  {type === 'true-false' && (\r\n+                                    <div className=\"space-y-2\">\r\n+                                      <div className=\"font-medium\">Statement:</div>\r\n+                                      <div>The Earth is flat.</div>\r\n+                                      <div className=\"mt-2\">\r\n+                                        <Badge variant=\"outline\" className=\"mr-2\">True</Badge>\r\n+                                        <Badge variant=\"outline\">False</Badge>\r\n+                                      </div>\r\n+                                    </div>\r\n+                                  )}\r\n+                                  {type === 'matching' && (\r\n+                                    <div className=\"space-y-2\">\r\n+                                      <div className=\"font-medium mb-2\">Match the countries with their capitals:</div>\r\n+                                      <div className=\"grid grid-cols-2 gap-4\">\r\n+                                        <div>\r\n+                                          1. France<br />\r\n+                                          2. Germany<br />\r\n+                                          3. Spain\r\n+                                        </div>\r\n+                                        <div>\r\n+                                          • Berlin<br />\r\n+                                          • Paris<br />\r\n+                                          • Madrid\r\n+                                        </div>\r\n+                                      </div>\r\n+                                    </div>\r\n+                                  )}\r\n+                                  {type === 'ordering' && (\r\n+                                    <div className=\"space-y-2\">\r\n+                                      <div className=\"font-medium mb-2\">Arrange in chronological order:</div>\r\n+                                      <div className=\"space-y-1\">\r\n+                                        <Badge variant=\"outline\" className=\"mr-2\">1</Badge>World War II<br />\r\n+                                        <Badge variant=\"outline\" className=\"mr-2\">2</Badge>Industrial Revolution<br />\r\n+                                        <Badge variant=\"outline\" className=\"mr-2\">3</Badge>Renaissance\r\n+                                      </div>\r\n+                                    </div>\r\n+                                  )}\r\n+                                  {type === 'short-answer' && (\r\n+                                    <div className=\"space-y-2\">\r\n+                                      <div className=\"font-medium\">Question:</div>\r\n+                                      <div>Explain the water cycle in 2-3 sentences.</div>\r\n+                                      <div className=\"mt-2 p-2 border border-dashed rounded-md border-primary/30\">\r\n+                                        Answer space\r\n+                                      </div>\r\n+                                    </div>\r\n+                                  )}\r\n+                                </div>\r\n+                              </div>\r\n+                            </CardHeader>\r\n+                          </Card>\r\n+                        ))}\r\n+                      </CardContent>\r\n+                    </Card>\r\n+                  </div>\r\n+                ) : isViewMode ? (\r\n+                  <div className=\"space-y-6\">\r\n+                    {selectedGradeId ? (\r\n+                      <div className=\"grid grid-cols-1 gap-6\">\r\n+                        {topics.map((topic) => (\r\n+                          <Card key={topic.id} className=\"border-l-4 border-l-primary\">\r\n+                            <CardHeader>\r\n+                              <div className=\"flex items-center justify-between\">\r\n+                                <h3 className=\"text-lg font-semibold\">{topic.title}</h3>\r\n+                              </div>\r\n+                            </CardHeader>\r\n+                            <CardContent>\r\n+                              <div className=\"space-y-4\">\r\n+                                {subtopics\r\n+                                  .filter(subtopic => subtopic.topic_id === topic.id)\r\n+                                  .map((subtopic, index) => (\r\n+                                    <div key={subtopic.id || `subtopic-${index}`} className=\"border-l-2 pl-4\">\r\n+                                      <h4 className=\"text-md font-medium mb-2\">{subtopic.name || 'Untitled Subtopic'}</h4>\r\n+                                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n+                                        {lessons\r\n+                                          .filter(lesson => lesson.subtopic_id === subtopic.id)\r\n+                                          .map((lesson) => (\r\n+                                            <Card \r\n+                                              key={lesson.id} \r\n+                                              className={cn(\r\n+                                                \"cursor-pointer transition-all duration-200\",\r\n+                                                \"hover:shadow-md hover:translate-y-[-2px]\",\r\n+                                                \"hover:bg-accent/50 hover:border-primary/50\",\r\n+                                                \"active:translate-y-[0px]\",\r\n+                                                currentLessonId === lesson.id && \"border-primary bg-accent/50 shadow-md\",\r\n+                                                \"group\" // Enable group hover effects\r\n+                                              )}\r\n+                                              onClick={() => handleLessonSelect(lesson.id)}\r\n+                                            >\r\n+                                              <CardHeader className=\"p-4\">\r\n+                                                <div className=\"flex flex-col gap-2\">\r\n+                                                  <div className=\"flex items-center justify-between\">\r\n+                                                    <div className=\"flex items-center gap-2\">\r\n+                                                      <BookOpen className={cn(\r\n+                                                        \"h-4 w-4 text-primary\",\r\n+                                                        \"transition-transform duration-200\",\r\n+                                                        \"group-hover:scale-110\"\r\n+                                                      )} />\r\n+                                                      <span className=\"font-medium\">{lesson.title}</span>\r\n+                                                    </div>\r\n+                                                    <Button\r\n+                                                      variant=\"outline\"\r\n+                                                      size=\"sm\"\r\n+                                                      className={cn(\r\n+                                                        \"opacity-0 group-hover:opacity-100\",\r\n+                                                        \"transition-all duration-200\",\r\n+                                                        \"hover:bg-primary hover:text-primary-foreground\"\r\n+                                                      )}\r\n+                                                      disabled={!lesson.content || currentLessonId !== lesson.id}\r\n+                                                      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\r\n+                                                        e.stopPropagation();\r\n+                                                        window.location.href = `/teacher/lessons/${lesson.id}`;\r\n+                                                      }}\r\n+                                                    >\r\n+                                                      Start Lesson\r\n+                                                    </Button>\r\n+                                                  </div>\r\n+                                                  <div className=\"flex items-center gap-2\">\r\n+                                                    <Badge variant=\"outline\" className={cn(\r\n+                                                      \"bg-primary/5\",\r\n+                                                      \"transition-colors duration-200\",\r\n+                                                      \"group-hover:bg-primary/10\"\r\n+                                                    )}>\r\n+                                                      {lesson.questions?.length || 0} Questions\r\n+                                                    </Badge>\r\n+                                                    <Badge variant=\"outline\" className={cn(\r\n+                                                      \"bg-primary/5\",\r\n+                                                      \"transition-colors duration-200\",\r\n+                                                      \"group-hover:bg-primary/10\"\r\n+                                                    )}>\r\n+                                                      {lesson.activities?.length || 0} Activities\r\n+                                                    </Badge>\r\n+                                                  </div>\r\n+                                                </div>\r\n+                                              </CardHeader>\r\n+                                            </Card>\r\n+                                          ))}\r\n+                                      </div>\r\n+                                    </div>\r\n+                                  ))}\r\n+                              </div>\r\n+                            </CardContent>\r\n+                          </Card>\r\n+                        ))}\r\n+                      </div>\r\n+                    ) : (\r\n+                      <div className=\"text-center py-20\">\r\n+                        <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\r\n+                        <h3 className=\"text-lg font-medium\">Select a Grade</h3>\r\n+                        <p className=\"text-sm text-muted-foreground\">\r\n+                          Choose a grade from the left panel to start managing content\r\n+                        </p>\r\n+                      </div>\r\n+                    )}\r\n+                  </div>\r\n+                ) : (\r\n+                  // Edit Mode Content\r\n+                  <div className=\"space-y-4\">\r\n+                    {/* Lesson Title */}\r\n+                    <Card>\r\n+                      <CardHeader>\r\n+                        <div className=\"flex items-center justify-between mb-4\">\r\n+                          <h2 className=\"text-2xl font-bold\">Lesson Content</h2>\r\n+                                                    <Button\r\n+                                                      variant=\"outline\"\r\n+                                                      size=\"sm\"\r\n+                            onClick={() => setIsContentEditorOpen(true)}\r\n+                          >\r\n+                            <Pencil className=\"h-4 w-4 mr-2\" />\r\n+                            Edit Content\r\n+                          </Button>\r\n+                        </div>\r\n+                      </CardHeader>\r\n+                      <CardContent className=\"space-y-4\">\r\n+                        {/* Lesson Title */}\r\n+                        <div className=\"flex items-center justify-between\">\r\n+                          <div className=\"space-y-1\">\r\n+                            <Label>Lesson Title</Label>\r\n+                            <InlineEdit\r\n+                              value={lessonTitle}\r\n+                              onSave={async (newTitle) => {\r\n+                                setLessonTitle(newTitle);\r\n+                                await handleSaveLesson();\r\n+                              }}\r\n+                              isEditing={isEditingTitle}\r\n+                              setIsEditing={setIsEditingTitle}\r\n+                              placeholder=\"Enter lesson title\"\r\n+                              className=\"text-lg font-medium\"\r\n+                            />\r\n+                          </div>\r\n+                        </div>\r\n+\r\n+                        {/* Content Editor and Display */}\r\n+                        <div className=\"space-y-4\">\r\n+                          {isContentEditorOpen ? (\r\n+                            <div className=\"border rounded-lg p-4\">\r\n+                              <div className=\"mb-4\">\r\n+                                <Label>Content Heading</Label>\r\n+                                <InlineEdit\r\n+                                  value={contentHeading}\r\n+                                  onSave={(newHeading) => setContentHeading(newHeading)}\r\n+                                  isEditing={isEditingHeading}\r\n+                                  setIsEditing={setIsEditingHeading}\r\n+                                  placeholder=\"Add content heading\"\r\n+                                  className=\"text-base text-muted-foreground\"\r\n+                                />\r\n+                              </div>\r\n+                              <RichTextEditor\r\n+                                value={lessonContent}\r\n+                                onChange={setLessonContent}\r\n+                                onSave={async (content) => {\r\n+                                  await handleContentSave(content);\r\n+                                  setIsContentEditorOpen(false);\r\n+                                }}\r\n+                                placeholder=\"Add lesson content here...\"\r\n+                              />\r\n+                            </div>\r\n+                          ) : lessonContent ? (\r\n+                            <div className=\"prose prose-sm max-w-none\">\r\n+                              {contentHeading && (\r\n+                                <h3 className=\"text-lg font-semibold mb-2\">{contentHeading}</h3>\r\n+                              )}\r\n+                              <div dangerouslySetInnerHTML={{ __html: lessonContent }} />\r\n+                            </div>\r\n+                          ) : (\r\n+                            <div className=\"text-center py-8 text-muted-foreground\">\r\n+                              Click 'Edit Content' to add lesson content\r\n+                            </div>\r\n+                          )}\r\n+                        </div>\r\n+                      </CardContent>\r\n+                    </Card>\r\n+\r\n+                    {/* Tabs */}\r\n+                    <Tabs defaultValue=\"questions\" className=\"mt-6\">\r\n+                    <TabsList className=\"grid w-full grid-cols-2\">\r\n+                        <TabsTrigger value=\"questions\">\r\n+                          <MessageSquare className=\"h-4 w-4 mr-2\" />\r\n+                        Questions\r\n+                      </TabsTrigger>\r\n+                        <TabsTrigger value=\"activities\">\r\n+                          <ActivityIcon className=\"h-4 w-4 mr-2\" />\r\n+                        Activities\r\n+                      </TabsTrigger>\r\n+                    </TabsList>\r\n+\r\n+                      {/* Questions Tab */}\r\n+                      <TabsContent value=\"questions\" className=\"space-y-4\">\r\n+                      <CardHeader>\r\n+                          <CardDescription>Add and manage questions for this lesson</CardDescription>\r\n+                      </CardHeader>\r\n+                        {questions.map((question, index) => (\r\n+                          <Card key={index} className={cn(\r\n+                            \"relative border-l-4 transition-colors duration-200\",\r\n+                            expandedQuestion === index ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\r\n+                          )}>\r\n+                            <CardHeader className=\"pb-3\">\r\n+                              <div className=\"flex items-center justify-between gap-4\">\r\n+                                <div className=\"flex items-center gap-3 min-w-0 flex-1\">\r\n+                                  <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n+                                    <span className=\"px-2 py-1 bg-primary/10 rounded-md text-sm font-semibold text-primary whitespace-nowrap\">\r\n+                                      Q {index + 1}\r\n+                                    </span>\r\n+                                    <Badge variant=\"outline\" className=\"whitespace-nowrap\">\r\n+                                      {QUESTION_TYPES[question.type as keyof typeof QUESTION_TYPES]?.label || question.type}\r\n+                                    </Badge>\r\n+                                    {question.isDraft && (\r\n+                                      <Badge variant=\"secondary\" className=\"whitespace-nowrap\">Draft</Badge>\r\n+                                )}\r\n+                                  </div>\r\n+                                      {expandedQuestion !== index && (\r\n+                                        <div className=\"text-sm text-muted-foreground truncate\">\r\n+                                          {question.title || 'No question text'} - {question.data?.content || 'No question texts'}\r\n+                                        </div>\r\n+                                      )}\r\n+                                    </div>\r\n+                                    <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n+                                      <Button\r\n+                                        variant=\"ghost\"\r\n+                                        size=\"sm\"\r\n+                                        onClick={() => handleQuestionExpand(index)}\r\n+                                      >\r\n+                                        {expandedQuestion === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n+                                      </Button>\r\n+                                      <Button\r\n+                                        variant=\"ghost\"\r\n+                                        size=\"sm\"\r\n+                                        onClick={() => handleRemoveQuestion(index)}\r\n+                                      >\r\n+                                        <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n+                                      </Button>\r\n+                                    </div>\r\n+                                  </div>\r\n+                                </CardHeader>\r\n+                                {expandedQuestion === index && (\r\n+                                  <CardContent>\r\n+                                    <QuestionForm\r\n+                                      key={index}\r\n+                                      question={{ \r\n+                                        ...question, \r\n+                                        lesson_id: currentLessonId || '',\r\n+                                        type: isValidQuestionType(question.type) ? question.type : 'speaking',\r\n+                                        data: {\r\n+                                          prompt: question.data?.prompt ?? '',\r\n+                                          teacher_script: question.data?.teacher_script ?? '',\r\n+                                          followup_prompt: question.data?.followup_prompt ?? [],\r\n+                                          sample_answer: question.data?.sample_answer ?? '',\r\n+                                          \r\n+                                        } \r\n+                                      }}\r\n+                                      index={index}\r\n+                                      onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\r\n+                                        await handleUpdateQuestion(index, {\r\n+                                          ...updatedQuestion,\r\n+                                          data: {\r\n+                                            prompt: updatedQuestion.data?.prompt ?? '',\r\n+                                            teacher_script: updatedQuestion.data?.teacher_script ?? '',\r\n+                                            followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\r\n+                                            sample_answer: updatedQuestion.data?.sample_answer ?? '',\r\n+                                            metadata: updatedQuestion.metadata ?? {},\r\n+                                            },\r\n+                                            correct_answer: updatedQuestion.correct_answer ?? '',\r\n+                                            content: updatedQuestion.content ?? ''  // Add default value\r\n+                                        });\r\n+                                      }}\r\n+                                      onRemove={handleRemoveQuestion}\r\n+                                      onAddExercisePrompt={handleAddExercisePrompt}\r\n+                                      onRemoveExercisePrompt={handleRemoveExercisePrompt}\r\n+                                      onExercisePromptChange={handleExercisePromptChange}\r\n+                                    /><Button \r\n+                                    size=\"sm\"\r\n+                                    variant=\"outline\"\r\n+                                    onClick={() => handleSaveQuestion(question, index)}\r\n+                                    className=\"ml-2\"\r\n+                                  >\r\n+                                    {questionSaveStatuses.find(s => s.id === question.id)?.status === 'saving' ? (\r\n+                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n+                                    ) : (\r\n+                                      <Save className=\"h-4 w-4 mr-2\" />\r\n+                                    )}\r\n+                                    Save Question\r\n+                                                    </Button>\r\n+                                    {/* Exercise Prompts with Save Buttons */}\r\n+                                    {question.exercisePrompts?.map((prompt, promptIndex) => (\r\n+                                      <div key={`${question.id}-prompt-${promptIndex}`} className=\"mt-4\"> {/* Updated key */}\r\n+                                        <div className=\"flex items-center justify-between mb-2\">\r\n+                                          <h4 className=\"text-sm font-medium\">Exercise Prompt {promptIndex + 1}</h4>\r\n+                                          <div className=\"flex items-center gap-2\">\r\n+                                            <TooltipProvider>\r\n+                                              <Tooltip>\r\n+                                                <TooltipTrigger asChild>\r\n+                                                  <Button\r\n+                                                    size=\"sm\"\r\n+                                                    variant=\"outline\"\r\n+                                                    onClick={() => handleSavePrompt(question.id, prompt, promptIndex)}\r\n+                                                    disabled={promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving'}\r\n+                                                  >\r\n+                                                    {promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving' ? (\r\n+                                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n+                                                    ) : (\r\n+                                                      <Save className=\"h-4 w-4 mr-2\" />\r\n+                                                    )}\r\n+                                                    Save Prompt\r\n+                                                  </Button>\r\n+                                                </TooltipTrigger>\r\n+                                                <TooltipContent>\r\n+                                                  {`Status: ${promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}`}\r\n+                                                </TooltipContent>\r\n+                                              </Tooltip>\r\n+                                            </TooltipProvider>\r\n+                                            <Badge variant={\r\n+                                              promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saved'\r\n+                                                ? 'secondary'\r\n+                                                : promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'error'\r\n+                                                ? 'destructive'\r\n+                                                : 'default'\r\n+                                            }>\r\n+                                              {promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}\r\n+                                            </Badge>\r\n+                                                  </div>\r\n+                                        </div>\r\n+                                        <ExercisePromptCard\r\n+                                          key={prompt.id} // Add a unique key here\r\n+                                          prompt={prompt}\r\n+                                          promptIndex={promptIndex}\r\n+                                          onRemove={() => handleRemoveExercisePrompt(index, promptIndex)}\r\n+                                          onUpdate={(updatedPrompt: ExercisePrompt) => {\r\n+                                            // Prevent duplicate updates\r\n+                                            if (updatedPrompt.id === prompt.id) {\r\n+                                              handleExercisePromptChange(index, promptIndex, updatedPrompt);\r\n+                                            }\r\n+                                          }}\r\n+                                        />\r\n+                                      </div>\r\n+                                    ))}\r\n+                                  </CardContent>\r\n+                                )}\r\n+                              </Card>\r\n+                            ))}\r\n+\r\n+                            {/* Add Question Button */}\r\n+                            <div className=\"flex items-center justify-between\">\r\n+                              <QuestionTypeSelect \r\n+                                value={selectedQuestionType} \r\n+                                onChange={handleQuestionTypeChange}\r\n+                              />\r\n+                                        <Button\r\n+                                          onClick={handleAddQuestion}\r\n+                                          disabled={!selectedQuestionType}\r\n+                                        >\r\n+                                <Plus className=\"h-4 w-4 mr-2\" />\r\n+                                          Add Question\r\n+                                        </Button>\r\n+                                      </div>\r\n+                      </TabsContent>\r\n+\r\n+                      {/* Activities Tab */}\r\n+                      <TabsContent value=\"activities\" className=\"space-y-4\">\r\n+                      <CardHeader>\r\n+                          <CardDescription>Add and manage activities for this lesson</CardDescription>\r\n+                      </CardHeader>\r\n+                        {activities.map((activity, index) => (\r\n+                          <Card key={index}>\r\n+                            <CardHeader className=\"pb-3\">\r\n+                              <div className=\"flex items-center justify-between\">\r\n+                                  <div className=\"flex items-center gap-2\">\r\n+                                  <Badge variant=\"outline\">Activity {index + 1}</Badge>\r\n+                                  </div>\r\n+                                <div className=\"flex items-center gap-2\">\r\n+                                  <Button\r\n+                                    variant=\"ghost\"\r\n+                                    size=\"sm\"\r\n+                                    onClick={() => handleActivityExpand(index)}\r\n+                                  >\r\n+                                    {expandedActivity === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n+                                  </Button>\r\n+                                  <Button\r\n+                                    variant=\"ghost\"\r\n+                                    size=\"sm\"\r\n+                                    onClick={() => handleRemoveActivity(index)}\r\n+                                  >\r\n+                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n+                                  </Button>\r\n+                                </div>\r\n+                              </div>\r\n+                            </CardHeader>\r\n+                            {expandedActivity === index && (\r\n+                              <CardContent>\r\n+                                <div className=\"space-y-4\">\r\n+                                  <div className=\"space-y-2\">\r\n+                                    <Label>Instructions</Label>\r\n+                                    <Textarea\r\n+                                      value={activity.instructions}\r\n+                                      onChange={(e) => handleUpdateActivity(index, {\r\n+                                        ...activity,\r\n+                                        instructions: e.target.value\r\n+                                      })}\r\n+                                      placeholder=\"Enter activity instructions\"\r\n+                                    />\r\n+                                  </div>\r\n+                                    \r\n+                                    {/* Media Section */}\r\n+                                    <div className=\"space-y-2\">\r\n+                                      <Label>Media</Label>\r\n+                                      {activity.media?.map((media, mediaIndex) => (\r\n+                                        <div key={mediaIndex} className=\"flex items-center gap-2\">\r\n+                                          <Input\r\n+                                            value={media.url}\r\n+                                            onChange={(e) => {\r\n+                                              const updatedMedia = [...(activity.media || [])];\r\n+                                              updatedMedia[mediaIndex] = {\r\n+                                                type: media.type,\r\n+                                                url: e.target.value\r\n+                                              };\r\n+                                              handleUpdateActivity(index, {\r\n+                                                ...activity,\r\n+                                                media: updatedMedia\r\n+                                              });\r\n+                                            }}\r\n+                                            placeholder=\"Media URL\"\r\n+                                          />\r\n+                                          <Select\r\n+                                            value={media.type}\r\n+                                            onValueChange={(value) => {\r\n+                                              const updatedMedia = [...(activity.media || [])];\r\n+                                              updatedMedia[mediaIndex] = {\r\n+                                                type: value as 'image' | 'gif' | 'video',\r\n+                                                url: media.url\r\n+                                              };\r\n+                                              handleUpdateActivity(index, {\r\n+                                                ...activity,\r\n+                                                media: updatedMedia\r\n+                                              });\r\n+                                            }}\r\n+                                          >\r\n+                                            <SelectTrigger className=\"w-[120px]\">\r\n+                                              <SelectValue placeholder=\"Type\" />\r\n+                                            </SelectTrigger>\r\n+                                            <SelectContent>\r\n+                                              <SelectItem value=\"image\">Image</SelectItem>\r\n+                                              <SelectItem value=\"gif\">GIF</SelectItem>\r\n+                                              <SelectItem value=\"video\">Video</SelectItem>\r\n+                                            </SelectContent>\r\n+                                          </Select>\r\n+                                <Button\r\n+                                            variant=\"ghost\"\r\n+                                            size=\"sm\"\r\n+                                  onClick={() => {\r\n+                                              const updatedMedia = (activity.media || []).filter((_, i) => i !== mediaIndex);\r\n+                                              handleUpdateActivity(index, {\r\n+                                                ...activity,\r\n+                                                media: updatedMedia\r\n+                                          });\r\n+                                          }}\r\n+                                  >\r\n+                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n+                                  </Button>\r\n+                                </div>\r\n+                                        ))}\r\n+                                  <Button\r\n+                                    variant=\"outline\"\r\n+                                    size=\"sm\"\r\n+                                            onClick={() => {\r\n+                                              handleUpdateActivity(index, {\r\n+                                                ...activity,\r\n+                                                media: [\r\n+                                                  ...(activity.media || [])  ,\r\n+                                                  { url: '', type: 'image' }\r\n+                                                ]\r\n+                                              });\r\n+                                            }}\r\n+                                  >\r\n+                                    <Plus className=\"h-4 w-4 mr-2\" />\r\n+                                            Add Media\r\n+                                  </Button>\r\n+                                </div>\r\n+                                      </div>\r\n+                                    </CardContent>\r\n+                                  )}\r\n+                                </Card>\r\n+                              ))}\r\n+\r\n+                              {/* Add Activity Button */}\r\n+                              <Button\r\n+                                onClick={handleAddActivity}\r\n+                                className=\"w-full\"\r\n+                              >\r\n+                                <Plus className=\"h-4 w-4 mr-2\" />\r\n+                                Add Activity\r\n+                              </Button>\r\n+                          </TabsContent>\r\n+                        </Tabs>\r\n+                        </div>\r\n+                )}\r\n+\r\n+                    {/* Floating Save Button */}\r\n+                    <div className=\"fixed bottom-8 right-8 flex items-center gap-4\">\r\n+                      {saveProgress !== 'idle' && (\r\n+                        <div className={cn(\r\n+                          \"flex items-center gap-2 rounded-lg px-4 py-2 shadow-lg\",\r\n+                          {\r\n+                            \"bg-background border\": saveProgress === 'saving',\r\n+                            \"bg-green-500 text-white\": saveProgress === 'saved',\r\n+                            \"bg-destructive text-destructive-foreground\": saveProgress === 'error'\r\n+                          }\r\n+                        )}>\r\n+                          {saveProgress === 'saving' && (\r\n+                            <>\r\n+                              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n+                              <span className=\"text-sm\">Saving changes...</span>\r\n+                            </>\r\n+                          )}\r\n+                          {saveProgress === 'saved' && (\r\n+                            <>\r\n+                              <Check className=\"h-4 w-4\" />\r\n+                              <span className=\"text-sm\">Changes saved</span>\r\n+                            </>\r\n+                          )}\r\n+                          {saveProgress === 'error' && (\r\n+                            <>\r\n+                              <X className=\"h-4 w-4\" />\r\n+                              <span className=\"text-sm\">Error saving changes</span>\r\n+                            </>\r\n+                          )}\r\n+                        </div>\r\n+                      )}\r\n+                      <Button\r\n+                        onClick={handleSaveLesson}\r\n+                        disabled={saveProgress === 'saving'}\r\n+                        className=\"shadow-lg\"\r\n+                      >\r\n+                        {saveProgress === 'saving' ? (\r\n+                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\r\n+                        ) : (\r\n+                          <Save className=\"h-4 w-4 mr-2\" />\r\n+                        )}\r\n+                        {saveProgress === 'saving' ? 'Saving...' : 'Save Lesson'}\r\n+                      </Button>\r\n+                    </div>\r\n+                  </>\r\n+            )}\r\n+    </div>\r\n+    \r\n+\r\n+      {/* Floating Save Button */}\r\n+      {selectedSubtopicId && currentLessonId && (\r\n+          <div className=\"fixed bottom-4 right-4 flex flex-col gap-2\">\r\n+            <TooltipProvider>\r\n+              <Tooltip>\r\n+                <TooltipTrigger asChild>\r\n+                  <Button\r\n+                    size=\"icon\"\r\n+                    className=\"rounded-full h-12 w-12 shadow-lg\"\r\n+                    onClick={handleSaveLesson}\r\n+                    disabled={!selectedSubtopicId || !lessonTitle || questions.length === 0}\r\n+                  >\r\n+                    <Save className=\"h-6 w-6\" />\r\n+                  </Button>\r\n+                </TooltipTrigger>\r\n+                <TooltipContent>\r\n+                  <p>Save Lesson (Ctrl+S)</p>\r\n+                </TooltipContent>\r\n+              </Tooltip>\r\n+            </TooltipProvider>\r\n+          </div>\r\n+        )}\r\n+        <SaveFeedback />\r\n+\r\n+        {/* Add Grade Modal - do not delete */}\r\n+        {/* {modalState.showAddGrade && (\r\n+          <Dialog \r\n+            open={modalState.showAddGrade} \r\n+            onOpenChange={(open) => handleModalStateChange('showAddGrade', open)}\r\n+          >\r\n+            <DialogContent \r\n+              className=\"sm:max-w-[425px]\"\r\n+              onEscapeKeyDown={cleanupModalState}\r\n+              onPointerDownOutside={cleanupModalState}\r\n+            >\r\n+              <DialogHeader>\r\n+                <DialogTitle>Add New Grade</DialogTitle>\r\n+                <DialogDescription>Enter the details for the new grade.</DialogDescription>\r\n+              </DialogHeader>\r\n+              <div className=\"space-y-4 py-4\">\r\n+                <div className=\"space-y-2\">\r\n+                  <Label htmlFor=\"grade-name\">Grade Name</Label>\r\n+                  <Input\r\n+                    id=\"grade-name\"\r\n+                    value={newItemData.name}\r\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n+                    placeholder=\"Enter grade name\"\r\n+                  />\r\n+      </div>\r\n+              </div>\r\n+              <DialogFooter>\r\n+                <Button variant=\"outline\" onClick={() => {\r\n+                  setModalState({ ...modalState, showAddGrade: false });\r\n+                  setNewItemData({ name: '', description: '' });\r\n+                }}>\r\n+                  Cancel\r\n+                </Button>\r\n+                <Button onClick={handleCreateGrade} disabled={!newItemData.name}>Create Grade</Button>\r\n+              </DialogFooter>\r\n+            </DialogContent>\r\n+          </Dialog>\r\n+        )} */}\r\n+\r\n+        {/* Add Topic Modal */}\r\n+        {modalState.showAddTopic && (\r\n+          <Dialog \r\n+            open={modalState.showAddTopic} \r\n+            onOpenChange={(open) => handleModalStateChange('showAddTopic', open)}\r\n+          >\r\n+            <DialogContent \r\n+              className=\"sm:max-w-[425px]\"\r\n+              onEscapeKeyDown={cleanupModalState}\r\n+              onPointerDownOutside={cleanupModalState}\r\n+            >\r\n+              <DialogHeader>\r\n+                <DialogTitle>Add New Topic</DialogTitle>\r\n+                <DialogDescription>Enter the details for the new topic.</DialogDescription>\r\n+              </DialogHeader>\r\n+              <div className=\"space-y-4 py-4\">\r\n+                <div className=\"space-y-2\">\r\n+                  <Label htmlFor=\"topic-name\">Topic Name</Label>\r\n+                  <Input\r\n+                    id=\"topic-name\"\r\n+                    value={newItemData.name}\r\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n+                    placeholder=\"Enter topic name\"\r\n+                  />\r\n+                </div>\r\n+              </div>\r\n+              <DialogFooter>\r\n+                <Button variant=\"outline\" onClick={() => {\r\n+                  setModalState({ ...modalState, showAddTopic: false });\r\n+                  setNewItemData({ name: '', description: '' });\r\n+                }}>\r\n+                  Cancel\r\n+                </Button>\r\n+                <Button onClick={handleCreateTopic} disabled={!newItemData.name}>Create Topic</Button>\r\n+              </DialogFooter>\r\n+            </DialogContent>\r\n+          </Dialog>\r\n+        )}\r\n+\r\n+        {/* Add Subtopic Modal */}\r\n+        {modalState.showAddSubtopic && (\r\n+          <Dialog \r\n+            open={modalState.showAddSubtopic} \r\n+            onOpenChange={(open) => handleModalStateChange('showAddSubtopic', open)}\r\n+          >\r\n+            <DialogContent \r\n+              className=\"sm:max-w-[425px]\"\r\n+              onEscapeKeyDown={cleanupModalState}\r\n+              onPointerDownOutside={cleanupModalState}\r\n+            >\r\n+              <DialogHeader>\r\n+                <DialogTitle>Add New Subtopic</DialogTitle>\r\n+                <DialogDescription>Enter the details for the new subtopic.</DialogDescription>\r\n+              </DialogHeader>\r\n+              <div className=\"space-y-4 py-4\">\r\n+                <div className=\"space-y-2\">\r\n+                  <Label htmlFor=\"subtopic-name\">Subtopic Name</Label>\r\n+                  <Input\r\n+                    id=\"subtopic-name\"\r\n+                    value={newItemData.name}\r\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n+                    placeholder=\"Enter subtopic name\"\r\n+                  />\r\n+                </div>\r\n+              </div>\r\n+              <DialogFooter>\r\n+                <Button variant=\"outline\" onClick={() => {\r\n+                  setModalState({ ...modalState, showAddSubtopic: false });\r\n+                  setNewItemData({ name: '', description: '' });\r\n+                }}>\r\n+                  Cancel\r\n+                </Button>\r\n+                <Button onClick={() => handleCreateSubtopic({ title: newItemData.name })} disabled={!newItemData.name}>Create Subtopic</Button>\r\n+              </DialogFooter>\r\n+            </DialogContent>\r\n+          </Dialog>\r\n+        )}\r\n+\r\n+        {/* Add Lesson Modal */}\r\n+        {modalState.showAddLesson && (\r\n+          <Dialog \r\n+            open={modalState.showAddLesson} \r\n+            onOpenChange={(open) => handleModalStateChange('showAddLesson', open)}\r\n+          >\r\n+            <DialogContent \r\n+              className=\"sm:max-w-[425px]\"\r\n+              onEscapeKeyDown={cleanupModalState}\r\n+              onPointerDownOutside={cleanupModalState}\r\n+            >\r\n+              <DialogHeader>\r\n+                <DialogTitle>Add New Lesson</DialogTitle>\r\n+                <DialogDescription>Enter the details for the new lesson.</DialogDescription>\r\n+              </DialogHeader>\r\n+              <div className=\"space-y-4 py-4\">\r\n+                <div className=\"space-y-2\">\r\n+                  <Label htmlFor=\"lesson-name\">Lesson Title</Label>\r\n+                  <Input\r\n+                    id=\"lesson-name\"\r\n+                    value={newItemData.name}\r\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n+                    placeholder=\"Enter lesson title\"\r\n+                  />\r\n+                </div>\r\n+              </div>\r\n+              <DialogFooter>\r\n+                <Button variant=\"outline\" onClick={() => {\r\n+                  setModalState({ ...modalState, showAddLesson: false });\r\n+                  setNewItemData({ name: '', description: '' });\r\n+                }}>\r\n+                  Cancel\r\n+                </Button>\r\n+                <Button onClick={handleCreateLesson} disabled={!newItemData.name}>Create Lesson</Button>\r\n+              </DialogFooter>\r\n+            </DialogContent>\r\n+          </Dialog>\r\n+        )}\r\n+      </div>\r\n+      <Toaster />\r\n+      </div>\r\n+  );\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1740043774080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2073,1383 +2073,330 @@\n             >\r\n               <RefreshCw className=\"h-4 w-4\" />\r\n             </Button>\r\n           </div>\r\n-      <div className=\"container mx-auto py-8\">\r\n-        {/* Header */}\r\n-        <div className=\"flex items-center justify-between mb-2\">\r\n-          {/* ... header content ... */}\r\n-          <div className=\"flex items-center gap-4\">\r\n-            <Link href=\"/super-admin\">\r\n-              <Button variant=\"outline\" className=\"gap-2\">\r\n-                <ArrowLeft className=\"h-4 w-4\" />\r\n-                Back\r\n-              </Button>\r\n-            </Link>\r\n-            <div className=\"flex items-center gap-2\">\r\n-              <h1 className=\"text-2xl font-bold\">Lesson Management</h1>\r\n-              <Button\r\n-                variant=\"ghost\"\r\n-                size=\"icon\"\r\n-                onClick={handleRefreshLesson}\r\n-                className=\"ml-2\"\r\n-                title=\"Refresh lesson content\"\r\n-              >\r\n-                <RefreshCw className=\"h-4 w-4\" />\r\n-              </Button>\r\n-            </div>\r\n-            <p className=\"text-sm text-muted-foreground\">Create and manage your educational content</p>\r\n-          </div>\r\n-          <div className=\"flex items-center gap-2\">\r\n-            <Button\r\n-              variant=\"outline\"\r\n-              size=\"sm\"\r\n-              onClick={() => setShowHelpTips(!showHelpTips)}\r\n-              className=\"gap-2\"\r\n-            >\r\n-              {showHelpTips ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\r\n-              {showHelpTips ? 'Hide Tips' : 'Show Tips'}\r\n-            </Button>\r\n-          </div>\r\n+          <p className=\"text-sm text-muted-foreground\">Create and manage your educational content</p>\r\n         </div>\r\n-        \r\n-        {/* Main content wrapper - Fix the layout here */}\r\n-        <div className=\"flex gap-6 h-[calc(100vh-200px)]\">\r\n-          {/* Improved sidebar */}\r\n-          <div \r\n-            className={cn(\r\n-              \"transition-all duration-300 ease-in-out relative\",\r\n-              isSidebarCollapsed ? \"w-20\" : \"w-80\",\r\n-              \"flex-shrink-0 group\"\r\n-            )}\r\n-            onMouseEnter={() => {\r\n-              handleSidebarHover(true);\r\n-              // Immediately expand on mouse enter\r\n-              if (!isSidebarLocked) {\r\n-                setIsSidebarCollapsed(false);\r\n-              }\r\n-            }}\r\n-            onMouseLeave={() => {\r\n-              // Only collapse if not interacting with content\r\n-              if (!document.activeElement?.closest('.sidebar-content')) {\r\n-                handleSidebarHover(false);\r\n-              }\r\n-            }}\r\n-            onFocus={() => setIsSidebarCollapsed(false)}\r\n+        <div className=\"flex items-center gap-2\">\r\n+          <Button\r\n+            variant=\"outline\"\r\n+            size=\"sm\"\r\n+            onClick={() => setShowHelpTips(!showHelpTips)}\r\n+            className=\"gap-2\"\r\n           >\r\n-            <Card className={cn(\r\n-              \"h-full relative sidebar-content\", // Added sidebar-content class\r\n-              \"transition-shadow duration-300\",\r\n-              \"hover:shadow-lg\"\r\n-            )}>\r\n-              {/* Lock button - only show after lesson selection */}\r\n-              {currentLessonId && (\r\n-                <Button\r\n-                  variant=\"ghost\"\r\n-                  size=\"sm\"\r\n-                  className=\"absolute top-2 right-2 z-10\"\r\n-                  onClick={() => {\r\n-                    setIsSidebarLocked(!isSidebarLocked);\r\n-                    if (!isSidebarLocked) {\r\n-                      setIsSidebarCollapsed(false);\r\n-                    }\r\n-                  }}\r\n-                >\r\n-                  {isSidebarLocked ? <Lock className=\"h-4 w-4\" /> : <Unlock className=\"h-4 w-4\" />}\r\n-                </Button>\r\n-              )}\r\n+            {showHelpTips ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\r\n+            {showHelpTips ? 'Hide Tips' : 'Show Tips'}\r\n+          </Button>\r\n+        </div>\r\n+      </div>\r\n+      \r\n+      {/* Main content wrapper - Fix the layout here */}\r\n+      <div className=\"flex gap-6 h-[calc(100vh-200px)]\">\r\n+        {/* Conditional render of sidebar */}\r\n+        {showSidebar && (\r\n+          <div className={cn(\r\n+            \"transition-all duration-300 ease-in-out relative\",\r\n+            isSidebarCollapsed ? \"w-20\" : \"w-80\",\r\n+            \"flex-shrink-0 group\"\r\n+          )}>\r\n+            {/* Existing sidebar content */}\r\n+          </div>\r\n+        )}\r\n \r\n-              {/* Sidebar content with overflow handling */}\r\n-              <div className={cn(\r\n-                \"transition-all duration-300 overflow-hidden\",\r\n-                isSidebarCollapsed ? \"opacity-0\" : \"opacity-100\"\r\n-              )}>\r\n-                <Card className=\"h-full\">\r\n-                  <CardHeader className=\"pb-3\">\r\n-                    <div className=\"flex items-center justify-between\">\r\n-                      <CardTitle className=\"text-lg font-semibold\">Content Management</CardTitle>\r\n-                      <TooltipProvider>\r\n-                        <Tooltip>\r\n-                          <TooltipTrigger>\r\n-                            <HelpCircle className=\"h-4 w-4 text-muted-foreground\" />\r\n-                          </TooltipTrigger>\r\n-                          <TooltipContent>\r\n-                            <p>Manage your educational content here</p>\r\n-                          </TooltipContent>\r\n-                        </Tooltip>\r\n-                      </TooltipProvider>\r\n-                      </div>\r\n-                    <CardDescription>Create and manage your lessons</CardDescription>\r\n-                  </CardHeader>\r\n-                  <CardContent className=\"space-y-4\">\r\n-                    {/* View/Edit Mode Toggle */}\r\n-                    <div className=\"grid grid-cols-2 gap-2 p-1 bg-muted rounded-lg\">\r\n-                      <Button\r\n-                        variant={isViewMode ? \"default\" : \"ghost\"}\r\n-                        size=\"sm\"\r\n-                        onClick={() => setIsViewMode(true)}\r\n-                        className=\"w-full\"\r\n-                      >\r\n-                        <Eye className=\"h-4 w-4 mr-2\" />\r\n-                        View\r\n-                      </Button>\r\n-                      <Button\r\n-                        variant={!isViewMode ? \"default\" : \"ghost\"}\r\n-                        size=\"sm\"\r\n-                        onClick={() => setIsViewMode(false)}\r\n-                        className=\"w-full\"\r\n-                      >\r\n-                        <Edit className=\"h-4 w-4 mr-2\" />\r\n-                        Edit\r\n-                      </Button>\r\n-                    </div>\r\n-\r\n-                    {/* Grade Selection */}\r\n-                    <div className=\"space-y-2\">\r\n+        {/* Right Content Area */}\r\n+        <div className=\"flex-1 overflow-y-auto\">\r\n+          {selectedGradeId && isViewMode ? (\r\n+            <Card className=\"border-primary/10\">\r\n+              <CardHeader>\r\n+                <div className=\"flex items-center justify-between\">\r\n+                  <CardTitle>Content Structure</CardTitle>\r\n+                  <Badge variant=\"outline\" className=\"text-primary\">\r\n+                    {topics.length} Topics\r\n+                  </Badge>\r\n+                </div>\r\n+              </CardHeader>\r\n+              <CardContent className=\"space-y-6\">\r\n+                {topics.map((topic) => (\r\n+                  <Card \r\n+                    key={topic.id} \r\n+                    className=\"border-l-4 border-l-primary/40 hover:border-l-primary transition-all duration-200\"\r\n+                  >\r\n+                    <CardHeader className=\"py-4\">\r\n                       <div className=\"flex items-center justify-between\">\r\n-                        <Label htmlFor=\"grade-select\">Grade</Label>\r\n-                        {isViewMode && (\r\n-                          <Button variant=\"ghost\" size=\"sm\" onClick={() => setExpandedGrade(expandedGrade ? null : selectedGrade)}>\r\n-                            {expandedGrade ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n-                          </Button>\r\n-                        )}\r\n-                      </div>\r\n-                      <Select \r\n-                        value={selectedGradeId || ''}\r\n-                        onValueChange={handleGradeSelect}\r\n-                        onOpenChange={(open) => {\r\n-                          if (open) {\r\n-                            // Force sidebar to stay open and lock it\r\n-                            setIsSidebarCollapsed(false);\r\n-                            setIsSidebarLocked(true);\r\n-                          }\r\n-                        }}\r\n-                      >\r\n-                        <SelectTrigger \r\n-                          id=\"grade-select\" \r\n-                          className=\"w-full\"\r\n-                          onClick={(e) => {\r\n-                            e.stopPropagation(); // Prevent event bubbling\r\n-                            setIsSidebarCollapsed(false);\r\n-                            setIsSidebarLocked(true);\r\n-                          }}\r\n-                        >\r\n-                          <SelectValue placeholder=\"Select Grade\" />\r\n-                        </SelectTrigger>\r\n-                        <SelectContent \r\n-                          onCloseAutoFocus={(e) => {\r\n-                            e.preventDefault();\r\n-                            setIsSidebarLocked(true);\r\n-                            setIsSidebarCollapsed(false);\r\n-                          }}\r\n-                        >\r\n-                          {grades.map((grade: Grade) => (\r\n-                            <SelectItem \r\n-                              key={`grade-${grade.id || 'new'}`} \r\n-                              value={grade.id || ''}\r\n-                              onMouseDown={(e) => {\r\n-                                e.preventDefault();\r\n-                                e.stopPropagation();\r\n-                              }}\r\n-                            >\r\n-                              <div className=\"flex items-center gap-2\">\r\n-                                <BookOpen className=\"h-4 w-4 text-primary\" />\r\n-                                {grade.name}\r\n-                              </div>\r\n-                            </SelectItem>\r\n-                          ))}\r\n-                        </SelectContent>\r\n-                      </Select>\r\n-                      {!isViewMode && (\r\n-                      <Button \r\n-                        variant=\"outline\" \r\n-                        size=\"sm\" \r\n-                        className=\"w-full gap-2\"\r\n-                        onClick={() => setModalState({ ...modalState, showAddGrade: false })}\r\n-                      >\r\n-                        <Plus className=\"h-4 w-4\" />\r\n-                        Add New Grade\r\n-                      </Button>\r\n-                      )}\r\n-                    </div>\r\n-\r\n-                    {/* Content Tree View in View Mode */}\r\n-                    {isViewMode && selectedGrade && (\r\n-  <div className=\"grid grid-cols-1 gap-6 p-6\">\r\n-    <Card className=\"border-primary/10\">\r\n-      <CardHeader>\r\n-        <div className=\"flex items-center justify-between\">\r\n-          <CardTitle>Content Structure</CardTitle>\r\n-          <Badge variant=\"outline\" className=\"text-primary\">\r\n-            {topics.length} Topics\r\n-          </Badge>\r\n-        </div>\r\n-      </CardHeader>\r\n-      <CardContent className=\"space-y-6\">\r\n-        {topics.map((topic) => (\r\n-          <Card \r\n-            key={topic.id} \r\n-            className={cn(\r\n-              \"border-l-4 transition-all duration-200\",\r\n-              \"border-l-primary/40 hover:border-l-primary\"\r\n-            )}\r\n-          >\r\n-            <CardHeader className=\"py-4\">\r\n-              <div className=\"flex items-center justify-between\">\r\n-                <div className=\"flex items-center gap-2\">\r\n-                  <Layers className=\"h-5 w-5 text-primary\" />\r\n-                  <div>\r\n-                    <h3 className=\"font-medium\">{topic.title}</h3>\r\n-                    <p className=\"text-sm text-muted-foreground\">\r\n-                      {subtopics.filter(s => s.topic_id === topic.id).length} Subtopics\r\n-                    </p>\r\n-                  </div>\r\n-                </div>\r\n-                <Button\r\n-                  variant=\"ghost\"\r\n-                  size=\"sm\"\r\n-                  className=\"hover:bg-destructive/10\"\r\n-                  onClick={async () => {\r\n-                    const { canDelete, message } = await checkDeletability('topic', topic.id);\r\n-                    if (!canDelete) {\r\n-                      toast.error(message);\r\n-                      return;\r\n-                    }\r\n-                    setItemToDelete({\r\n-                      id: topic.id,\r\n-                      type: 'topic',\r\n-                      title: topic.title\r\n-                    });\r\n-                    setDeleteDialogOpen(true);\r\n-                  }}\r\n-                >\r\n-                  <Trash className=\"h-4 w-4\" />\r\n-                </Button>\r\n-              </div>\r\n-\r\n-              <div className=\"mt-4 pl-4 space-y-4\">\r\n-                {subtopics\r\n-                  .filter(subtopic => subtopic.topic_id === topic.id)\r\n-                  .map((subtopic) => {\r\n-                    const subtopicLessons = lessons.filter(l => l.subtopic_id === subtopic.id);\r\n-                    const isEmpty = subtopicLessons.length === 0;\r\n-                    \r\n-                    return (\r\n-                      <Card key={subtopic.id} className=\"border-l-2 border-l-primary/20\">\r\n-                        <CardHeader className=\"py-3\">\r\n-                          <div className=\"flex items-center justify-between\">\r\n-                            <div className=\"flex items-center gap-2\">\r\n-                              <BookOpen className=\"h-4 w-4 text-primary\" />\r\n-                              <div>\r\n-                                <h4 className=\"font-medium\">{subtopic.title}</h4>\r\n-                                <div className=\"flex items-center gap-2\">\r\n-                                  <Badge variant=\"outline\">\r\n-                                    {subtopicLessons.length} Lessons\r\n-                                  </Badge>\r\n-                                  {isEmpty && (\r\n-                                    <Badge variant=\"outline\" className=\"text-yellow-500\">\r\n-                                      Empty\r\n-                                    </Badge>\r\n-                                  )}\r\n-                                </div>\r\n-                              </div>\r\n-                            </div>\r\n-                            <Button\r\n-                              variant=\"ghost\"\r\n-                              size=\"sm\"\r\n-                              className=\"hover:bg-destructive/10\"\r\n-                              onClick={async () => {\r\n-                                const { canDelete, message } = await checkDeletability('subtopic', subtopic.id);\r\n-                                if (!canDelete) {\r\n-                                  toast.error(message);\r\n-                                  return;\r\n-                                }\r\n-                                setItemToDelete({\r\n-                                  id: subtopic.id,\r\n-                                  type: 'subtopic',\r\n-                                  title: subtopic.title\r\n-                                });\r\n-                                setDeleteDialogOpen(true);\r\n-                              }}\r\n-                            >\r\n-                              <Trash className=\"h-4 w-4\" />\r\n-                            </Button>\r\n+                        <div className=\"flex items-center gap-2\">\r\n+                          <Layers className=\"h-5 w-5 text-primary\" />\r\n+                          <div>\r\n+                            <h3 className=\"font-medium\">{topic.title}</h3>\r\n+                            <p className=\"text-sm text-muted-foreground\">\r\n+                              {subtopics.filter(s => s.topic_id === topic.id).length} Subtopics\r\n+                            </p>\r\n                           </div>\r\n-\r\n-                          <div className=\"pl-4 mt-2 space-y-2\">\r\n-                            {subtopicLessons.map((lesson) => {\r\n-                              const questionCount = lesson.questions?.length || 0;\r\n-                              const isEmpty = questionCount === 0;\r\n-                              \r\n-                              return (\r\n-                                <Card key={lesson.id} className=\"border-l border-l-primary/10\">\r\n-                                  <CardHeader className=\"py-2\">\r\n-                                    <div className=\"flex items-center justify-between\">\r\n-                                      <div className=\"flex items-center gap-2\">\r\n-                                        <div className=\"flex flex-col\">\r\n-                                          <span className=\"text-sm font-medium\">\r\n-                                            {lesson.title}\r\n-                                          </span>\r\n-                                          <div className=\"flex items-center gap-2\">\r\n-                                            <span className=\"text-xs text-muted-foreground\">\r\n-                                              {lesson.duration || 0} mins • {questionCount} Questions\r\n-                                            </span>\r\n-                                            {isEmpty && (\r\n-                                              <Badge \r\n-                                                variant=\"outline\" \r\n-                                                className=\"text-yellow-500\"\r\n-                                              >\r\n-                                                Empty\r\n-                                              </Badge>\r\n-                                            )}\r\n-                                          </div>\r\n-                                        </div>\r\n-                                      </div>\r\n-                                      <Button\r\n-                                        variant=\"ghost\"\r\n-                                        size=\"sm\"\r\n-                                        className=\"hover:bg-destructive/10\"\r\n-                                        onClick={async () => {\r\n-                                          const { canDelete, message } = await checkDeletability('lesson', lesson.id);\r\n-                                          if (!canDelete) {\r\n-                                            toast.error(message);\r\n-                                            return;\r\n-                                          }\r\n-                                          setItemToDelete({\r\n-                                            id: lesson.id,\r\n-                                            type: 'lesson',\r\n-                                            title: lesson.title\r\n-                                          });\r\n-                                          setDeleteDialogOpen(true);\r\n-                                        }}\r\n-                                      >\r\n-                                        <Trash className=\"h-4 w-4\" />\r\n-                                      </Button>\r\n-                                    </div>\r\n-                                  </CardHeader>\r\n-                                </Card>\r\n-                              );\r\n-                            })}\r\n-                          </div>\r\n-                        </CardHeader>\r\n-                      </Card>\r\n-                    );\r\n-                  })}\r\n-              </div>\r\n-            </CardHeader>\r\n-          </Card>\r\n-        ))}\r\n-      </CardContent>\r\n-    </Card>\r\n-  </div>\r\n-)}\r\n-\r\n-                    {/* Regular Edit Mode Content */}\r\n-                    {!isViewMode && (\r\n-                      <>\r\n-                        {/* Existing Topic, Subtopic, and Lesson Selection UI */}\r\n-                      {/* Topic Selection */}\r\n-                        {selectedGradeId && (\r\n-                      <div className=\"space-y-2\">\r\n-                        <div className=\"flex items-center justify-between\">\r\n-                        <Label htmlFor=\"topic-select\">Topic</Label>\r\n                         </div>\r\n-                        <Select \r\n-                              value={selectedTopicId || ''} \r\n-                              onValueChange={handleTopicSelect}\r\n+                        <Button\r\n+                          variant=\"ghost\"\r\n+                          size=\"sm\"\r\n+                          className=\"hover:bg-destructive/10\"\r\n+                          onClick={async () => {\r\n+                            const { canDelete, message } = await checkDeletability('topic', topic.id);\r\n+                            if (!canDelete) {\r\n+                              toast.error(message);\r\n+                              return;\r\n+                            }\r\n+                            setItemToDelete({\r\n+                              id: topic.id,\r\n+                              type: 'topic',\r\n+                              title: topic.title\r\n+                            });\r\n+                            setDeleteDialogOpen(true);\r\n+                          }}\r\n                         >\r\n-                          <SelectTrigger id=\"topic-select\" className=\"w-full\">\r\n-                            <SelectValue placeholder=\"Select Topic\" />\r\n-                          </SelectTrigger>\r\n-                          <SelectContent>\r\n-                                {topics.map((topic: Topic) => (\r\n-                                  <SelectItem \r\n-                                    key={`topic-${topic.id || 'new'}`} \r\n-                                    value={topic.id || ''}\r\n-                                  >\r\n-                                  <div className=\"flex items-center gap-2\">\r\n-                                  <Layers className=\"h-4 w-4 text-primary\" />\r\n-                                    {topic.title}\r\n-                                  </div>\r\n-                                </SelectItem>\r\n-                              ))}\r\n-                          </SelectContent>\r\n-                        </Select>\r\n-                        <Button \r\n-                          variant=\"outline\" \r\n-                          size=\"sm\" \r\n-                          className=\"w-full gap-2\"\r\n-                          onClick={() => setModalState({ ...modalState, showAddTopic: true })}\r\n-                        >\r\n-                          <Plus className=\"h-4 w-4\" />\r\n-                          Add New Topic\r\n+                          <Trash className=\"h-4 w-4\" />\r\n                         </Button>\r\n                       </div>\r\n-                    )}\r\n \r\n-                    {/* Subtopic Selection */}\r\n-                        {selectedTopicId && (\r\n-                      <div className=\"space-y-2\">\r\n-                        <div className=\"flex items-center justify-between\">\r\n-                        <Label htmlFor=\"subtopic-select\">Subtopic</Label>\r\n-                        </div>\r\n-                        <Select \r\n-                              value={selectedSubtopicId || ''} \r\n-                              onValueChange={handleSubtopicSelect}\r\n-                        >\r\n-                          <SelectTrigger id=\"subtopic-select\" className=\"w-full\">\r\n-                            <SelectValue placeholder=\"Select Subtopic\" />\r\n-                          </SelectTrigger>\r\n-                          <SelectContent>\r\n-                                {subtopics\r\n-                                  .filter(subtopic => subtopic.id)\r\n-                                  .map((subtopic, index) => (\r\n-                                    <SelectItem \r\n-                                      key={subtopic.id || `subtopic-${index}`}\r\n-                                      value={subtopic.id || ''}\r\n-                                    >\r\n-                                      {subtopic.title || 'Untitled Subtopic'}\r\n-                                    </SelectItem>\r\n-                                  ))}\r\n-                          </SelectContent>\r\n-                        </Select>\r\n-                        {!isViewMode && (\r\n-                          <Button \r\n-                            variant=\"outline\" \r\n-                            size=\"sm\" \r\n-                            className=\"w-full gap-2\"\r\n-                            onClick={() => setModalState({ ...modalState, showAddSubtopic: true })}\r\n-                          >\r\n-                            <Plus className=\"h-4 w-4\" />\r\n-                            Add New Subtopic\r\n-                          </Button>\r\n-                        )}\r\n-                      </div>\r\n-                    )}\r\n-\r\n-                    {/* Lesson Selection */}\r\n-                        {selectedSubtopicId && (\r\n-                      <div className=\"space-y-2\">\r\n-                        <div className=\"flex items-center justify-between\">\r\n-                          <Label htmlFor=\"lesson-select\">Lesson</Label>\r\n-                        </div>\r\n-                          <Select \r\n-                            value={currentLessonId || ''} \r\n-                            onValueChange={handleLessonSelect}\r\n-                            onOpenChange={(open) => {\r\n-                              setIsDropdownOpen(open);\r\n-                              if (open) {\r\n-                                setIsSidebarCollapsed(false);\r\n-                                setIsSidebarLocked(true);\r\n-                              } else {\r\n-                                // Small delay before unlocking to prevent immediate collapse\r\n-                                setTimeout(() => {\r\n-                                  setIsSidebarLocked(false);\r\n-                                }, 100);\r\n-                              }\r\n-                            }}\r\n-                          >\r\n-                            <SelectTrigger \r\n-                              id=\"lesson-select\" \r\n-                              className=\"w-full\"\r\n-                              onClick={(e) => {\r\n-                                e.stopPropagation();\r\n-                                setIsSidebarCollapsed(false);\r\n-                                setIsSidebarLocked(true);\r\n-                              }}\r\n-                            >\r\n-                              <SelectValue placeholder=\"Select Lesson\" />\r\n-                            </SelectTrigger>\r\n-                            <SelectContent>\r\n-                              {lessons\r\n-                                .filter((lesson): lesson is Lesson => lesson !== undefined && lesson !== null)\r\n-                                .map((lesson: Lesson) => (\r\n-                                  <SelectItem \r\n-                                    key={`lesson-${lesson.id || 'new'}`} \r\n-                                    value={lesson.id || ''}\r\n-                                  >\r\n-                                    <div className=\"flex items-center gap-2\">\r\n-                                      <BookOpen className=\"h-4 w-4 text-primary\" />\r\n-                                      {lesson.title || 'Untitled Lesson'}\r\n+                      {/* Subtopics */}\r\n+                      <div className=\"mt-4 pl-6 space-y-4\">\r\n+                        {subtopics\r\n+                          .filter(subtopic => subtopic.topic_id === topic.id)\r\n+                          .map((subtopic) => (\r\n+                            <Card key={subtopic.id} className=\"border-l-2 border-l-primary/20\">\r\n+                              <CardHeader className=\"py-3\">\r\n+                                {/* Subtopic content */}\r\n+                                <div className=\"flex items-center justify-between\">\r\n+                                  <div className=\"flex items-center gap-2\">\r\n+                                    <BookOpen className=\"h-4 w-4 text-primary\" />\r\n+                                    <div>\r\n+                                      <h4 className=\"font-medium\">{subtopic.title}</h4>\r\n+                                      <Badge variant=\"outline\">\r\n+                                        {lessons.filter(l => l.subtopic_id === subtopic.id).length} Lessons\r\n+                                      </Badge>\r\n                                     </div>\r\n-                                  </SelectItem>\r\n-                                ))}\r\n-                            </SelectContent>\r\n-                          </Select>\r\n-                    <Button \r\n-                            variant=\"outline\" \r\n-                            size=\"sm\" \r\n-                            className=\"w-full gap-2\"\r\n-                        onClick={() => setModalState({ ...modalState, showAddLesson: true })}\r\n-                          >\r\n-                            <Plus className=\"h-4 w-4\" />\r\n-                            Add New Lesson\r\n-                    </Button>\r\n-                      </div>\r\n-                        )}\r\n-                      </>\r\n-                    )}\r\n-                  </CardContent>\r\n-                </Card>\r\n-              </div>\r\n-\r\n-              {/* Collapsed view */}\r\n-              {isSidebarCollapsed && (\r\n-                <div className=\"absolute inset-0 flex flex-col items-center pt-12 gap-4\">\r\n-                  <BookOpen className=\"h-6 w-6 text-muted-foreground\" />\r\n-                  <div className=\"w-px h-full bg-border\" />\r\n-                </div>\r\n-              )}\r\n-            </Card>\r\n-          </div>\r\n-        \r\n-\r\n-          {/* Right Content Area */}\r\n-          <div className=\"flex-1 overflow-y-auto\">\r\n-            {isNavigating ? (\r\n-              <div className=\"flex items-center justify-center h-[400px]\">\r\n-                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n-                <span className=\"ml-3\">Loading...</span>\r\n-              </div>\r\n-            ) : (\r\n-              <>\r\n-                {!selectedGradeId ? (\r\n-                  // Question Types Display Section\r\n-                  <div className=\"space-y-6\">\r\n-                    <Card>\r\n-                      <CardHeader>\r\n-                        <div className=\"flex items-center justify-between\">\r\n-                          <div>\r\n-                            <CardTitle className=\"text-xl font-semibold\">Available Question Types</CardTitle>\r\n-                            <CardDescription>Browse through different question formats and examples</CardDescription>\r\n-                          </div>\r\n-                          <TooltipProvider>\r\n-                            <Tooltip>\r\n-                              <TooltipTrigger>\r\n-                                <HelpCircle className=\"h-5 w-5 text-muted-foreground\" />\r\n-                              </TooltipTrigger>\r\n-                              <TooltipContent>\r\n-                                <p>Click on each type to see detailed examples</p>\r\n-                              </TooltipContent>\r\n-                            </Tooltip>\r\n-                          </TooltipProvider>\r\n-                        </div>\r\n-                      </CardHeader>\r\n-                      <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n-                        {Object.entries(QUESTION_TYPES).map(([type, details]) => (\r\n-                          <Card key={type} className=\"cursor-pointer hover:bg-accent/50 transition-colors\">\r\n-                            <CardHeader className=\"p-4\">\r\n-                              <div className=\"flex items-center justify-between mb-2\">\r\n-                                <Badge variant=\"outline\" className=\"bg-primary/5 text-lg\">\r\n-                                  {details.label}\r\n-                                </Badge>\r\n-                              </div>\r\n-                              <CardDescription className=\"text-sm\">\r\n-                                {details.description || 'No description available'}\r\n-                              </CardDescription>\r\n-                              <div className=\"mt-4\">\r\n-                                <div className=\"text-sm font-medium mb-2\">Example:</div>\r\n-                                <div className=\"p-3 rounded-md bg-muted/50 text-sm\">\r\n-                                  {type === 'multiple-choice' && (\r\n-                                    <>\r\n-                                      <div className=\"font-medium mb-2\">Q: What is the capital of France?</div>\r\n-                                      <div className=\"space-y-1 pl-4\">\r\n-                                        <div>A) Paris</div>\r\n-                                        <div>B) London</div>\r\n-                                        <div>C) Berlin</div>\r\n-                                        <div>D) Madrid</div>\r\n-                                      </div>\r\n-                                    </>\r\n-                                  )}\r\n-                                  {type === 'fill-in-blank' && (\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <div>Complete the sentence:</div>\r\n-                                      <div>The sun rises in the <span className=\"bg-primary/20 px-2 rounded\">_____</span> and sets in the <span className=\"bg-primary/20 px-2 rounded\">_____</span>.</div>\r\n-                                    </div>\r\n-                                  )}\r\n-                                  {type === 'true-false' && (\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <div className=\"font-medium\">Statement:</div>\r\n-                                      <div>The Earth is flat.</div>\r\n-                                      <div className=\"mt-2\">\r\n-                                        <Badge variant=\"outline\" className=\"mr-2\">True</Badge>\r\n-                                        <Badge variant=\"outline\">False</Badge>\r\n-                                      </div>\r\n-                                    </div>\r\n-                                  )}\r\n-                                  {type === 'matching' && (\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <div className=\"font-medium mb-2\">Match the countries with their capitals:</div>\r\n-                                      <div className=\"grid grid-cols-2 gap-4\">\r\n-                                        <div>\r\n-                                          1. France<br />\r\n-                                          2. Germany<br />\r\n-                                          3. Spain\r\n-                                        </div>\r\n-                                        <div>\r\n-                                          • Berlin<br />\r\n-                                          • Paris<br />\r\n-                                          • Madrid\r\n-                                        </div>\r\n-                                      </div>\r\n-                                    </div>\r\n-                                  )}\r\n-                                  {type === 'ordering' && (\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <div className=\"font-medium mb-2\">Arrange in chronological order:</div>\r\n-                                      <div className=\"space-y-1\">\r\n-                                        <Badge variant=\"outline\" className=\"mr-2\">1</Badge>World War II<br />\r\n-                                        <Badge variant=\"outline\" className=\"mr-2\">2</Badge>Industrial Revolution<br />\r\n-                                        <Badge variant=\"outline\" className=\"mr-2\">3</Badge>Renaissance\r\n-                                      </div>\r\n-                                    </div>\r\n-                                  )}\r\n-                                  {type === 'short-answer' && (\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <div className=\"font-medium\">Question:</div>\r\n-                                      <div>Explain the water cycle in 2-3 sentences.</div>\r\n-                                      <div className=\"mt-2 p-2 border border-dashed rounded-md border-primary/30\">\r\n-                                        Answer space\r\n-                                      </div>\r\n-                                    </div>\r\n-                                  )}\r\n-                                </div>\r\n-                              </div>\r\n-                            </CardHeader>\r\n-                          </Card>\r\n-                        ))}\r\n-                      </CardContent>\r\n-                    </Card>\r\n-                  </div>\r\n-                ) : isViewMode ? (\r\n-                  <div className=\"space-y-6\">\r\n-                    {selectedGradeId ? (\r\n-                      <div className=\"grid grid-cols-1 gap-6\">\r\n-                        {topics.map((topic) => (\r\n-                          <Card key={topic.id} className=\"border-l-4 border-l-primary\">\r\n-                            <CardHeader>\r\n-                              <div className=\"flex items-center justify-between\">\r\n-                                <h3 className=\"text-lg font-semibold\">{topic.title}</h3>\r\n-                              </div>\r\n-                            </CardHeader>\r\n-                            <CardContent>\r\n-                              <div className=\"space-y-4\">\r\n-                                {subtopics\r\n-                                  .filter(subtopic => subtopic.topic_id === topic.id)\r\n-                                  .map((subtopic, index) => (\r\n-                                    <div key={subtopic.id || `subtopic-${index}`} className=\"border-l-2 pl-4\">\r\n-                                      <h4 className=\"text-md font-medium mb-2\">{subtopic.name || 'Untitled Subtopic'}</h4>\r\n-                                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n-                                        {lessons\r\n-                                          .filter(lesson => lesson.subtopic_id === subtopic.id)\r\n-                                          .map((lesson) => (\r\n-                                            <Card \r\n-                                              key={lesson.id} \r\n-                                              className={cn(\r\n-                                                \"cursor-pointer transition-all duration-200\",\r\n-                                                \"hover:shadow-md hover:translate-y-[-2px]\",\r\n-                                                \"hover:bg-accent/50 hover:border-primary/50\",\r\n-                                                \"active:translate-y-[0px]\",\r\n-                                                currentLessonId === lesson.id && \"border-primary bg-accent/50 shadow-md\",\r\n-                                                \"group\" // Enable group hover effects\r\n-                                              )}\r\n-                                              onClick={() => handleLessonSelect(lesson.id)}\r\n-                                            >\r\n-                                              <CardHeader className=\"p-4\">\r\n-                                                <div className=\"flex flex-col gap-2\">\r\n-                                                  <div className=\"flex items-center justify-between\">\r\n-                                                    <div className=\"flex items-center gap-2\">\r\n-                                                      <BookOpen className={cn(\r\n-                                                        \"h-4 w-4 text-primary\",\r\n-                                                        \"transition-transform duration-200\",\r\n-                                                        \"group-hover:scale-110\"\r\n-                                                      )} />\r\n-                                                      <span className=\"font-medium\">{lesson.title}</span>\r\n-                                                    </div>\r\n-                                                    <Button\r\n-                                                      variant=\"outline\"\r\n-                                                      size=\"sm\"\r\n-                                                      className={cn(\r\n-                                                        \"opacity-0 group-hover:opacity-100\",\r\n-                                                        \"transition-all duration-200\",\r\n-                                                        \"hover:bg-primary hover:text-primary-foreground\"\r\n-                                                      )}\r\n-                                                      disabled={!lesson.content || currentLessonId !== lesson.id}\r\n-                                                      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\r\n-                                                        e.stopPropagation();\r\n-                                                        window.location.href = `/teacher/lessons/${lesson.id}`;\r\n-                                                      }}\r\n-                                                    >\r\n-                                                      Start Lesson\r\n-                                                    </Button>\r\n-                                                  </div>\r\n-                                                  <div className=\"flex items-center gap-2\">\r\n-                                                    <Badge variant=\"outline\" className={cn(\r\n-                                                      \"bg-primary/5\",\r\n-                                                      \"transition-colors duration-200\",\r\n-                                                      \"group-hover:bg-primary/10\"\r\n-                                                    )}>\r\n-                                                      {lesson.questions?.length || 0} Questions\r\n-                                                    </Badge>\r\n-                                                    <Badge variant=\"outline\" className={cn(\r\n-                                                      \"bg-primary/5\",\r\n-                                                      \"transition-colors duration-200\",\r\n-                                                      \"group-hover:bg-primary/10\"\r\n-                                                    )}>\r\n-                                                      {lesson.activities?.length || 0} Activities\r\n-                                                    </Badge>\r\n-                                                  </div>\r\n-                                                </div>\r\n-                                              </CardHeader>\r\n-                                            </Card>\r\n-                                          ))}\r\n-                                      </div>\r\n-                                    </div>\r\n-                                  ))}\r\n-                              </div>\r\n-                            </CardContent>\r\n-                          </Card>\r\n-                        ))}\r\n-                      </div>\r\n-                    ) : (\r\n-                      <div className=\"text-center py-20\">\r\n-                        <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\r\n-                        <h3 className=\"text-lg font-medium\">Select a Grade</h3>\r\n-                        <p className=\"text-sm text-muted-foreground\">\r\n-                          Choose a grade from the left panel to start managing content\r\n-                        </p>\r\n-                      </div>\r\n-                    )}\r\n-                  </div>\r\n-                ) : (\r\n-                  // Edit Mode Content\r\n-                  <div className=\"space-y-4\">\r\n-                    {/* Lesson Title */}\r\n-                    <Card>\r\n-                      <CardHeader>\r\n-                        <div className=\"flex items-center justify-between mb-4\">\r\n-                          <h2 className=\"text-2xl font-bold\">Lesson Content</h2>\r\n-                                                    <Button\r\n-                                                      variant=\"outline\"\r\n-                                                      size=\"sm\"\r\n-                            onClick={() => setIsContentEditorOpen(true)}\r\n-                          >\r\n-                            <Pencil className=\"h-4 w-4 mr-2\" />\r\n-                            Edit Content\r\n-                          </Button>\r\n-                        </div>\r\n-                      </CardHeader>\r\n-                      <CardContent className=\"space-y-4\">\r\n-                        {/* Lesson Title */}\r\n-                        <div className=\"flex items-center justify-between\">\r\n-                          <div className=\"space-y-1\">\r\n-                            <Label>Lesson Title</Label>\r\n-                            <InlineEdit\r\n-                              value={lessonTitle}\r\n-                              onSave={async (newTitle) => {\r\n-                                setLessonTitle(newTitle);\r\n-                                await handleSaveLesson();\r\n-                              }}\r\n-                              isEditing={isEditingTitle}\r\n-                              setIsEditing={setIsEditingTitle}\r\n-                              placeholder=\"Enter lesson title\"\r\n-                              className=\"text-lg font-medium\"\r\n-                            />\r\n-                          </div>\r\n-                        </div>\r\n-\r\n-                        {/* Content Editor and Display */}\r\n-                        <div className=\"space-y-4\">\r\n-                          {isContentEditorOpen ? (\r\n-                            <div className=\"border rounded-lg p-4\">\r\n-                              <div className=\"mb-4\">\r\n-                                <Label>Content Heading</Label>\r\n-                                <InlineEdit\r\n-                                  value={contentHeading}\r\n-                                  onSave={(newHeading) => setContentHeading(newHeading)}\r\n-                                  isEditing={isEditingHeading}\r\n-                                  setIsEditing={setIsEditingHeading}\r\n-                                  placeholder=\"Add content heading\"\r\n-                                  className=\"text-base text-muted-foreground\"\r\n-                                />\r\n-                              </div>\r\n-                              <RichTextEditor\r\n-                                value={lessonContent}\r\n-                                onChange={setLessonContent}\r\n-                                onSave={async (content) => {\r\n-                                  await handleContentSave(content);\r\n-                                  setIsContentEditorOpen(false);\r\n-                                }}\r\n-                                placeholder=\"Add lesson content here...\"\r\n-                              />\r\n-                            </div>\r\n-                          ) : lessonContent ? (\r\n-                            <div className=\"prose prose-sm max-w-none\">\r\n-                              {contentHeading && (\r\n-                                <h3 className=\"text-lg font-semibold mb-2\">{contentHeading}</h3>\r\n-                              )}\r\n-                              <div dangerouslySetInnerHTML={{ __html: lessonContent }} />\r\n-                            </div>\r\n-                          ) : (\r\n-                            <div className=\"text-center py-8 text-muted-foreground\">\r\n-                              Click 'Edit Content' to add lesson content\r\n-                            </div>\r\n-                          )}\r\n-                        </div>\r\n-                      </CardContent>\r\n-                    </Card>\r\n-\r\n-                    {/* Tabs */}\r\n-                    <Tabs defaultValue=\"questions\" className=\"mt-6\">\r\n-                    <TabsList className=\"grid w-full grid-cols-2\">\r\n-                        <TabsTrigger value=\"questions\">\r\n-                          <MessageSquare className=\"h-4 w-4 mr-2\" />\r\n-                        Questions\r\n-                      </TabsTrigger>\r\n-                        <TabsTrigger value=\"activities\">\r\n-                          <ActivityIcon className=\"h-4 w-4 mr-2\" />\r\n-                        Activities\r\n-                      </TabsTrigger>\r\n-                    </TabsList>\r\n-\r\n-                      {/* Questions Tab */}\r\n-                      <TabsContent value=\"questions\" className=\"space-y-4\">\r\n-                      <CardHeader>\r\n-                          <CardDescription>Add and manage questions for this lesson</CardDescription>\r\n-                      </CardHeader>\r\n-                        {questions.map((question, index) => (\r\n-                          <Card key={index} className={cn(\r\n-                            \"relative border-l-4 transition-colors duration-200\",\r\n-                            expandedQuestion === index ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\r\n-                          )}>\r\n-                            <CardHeader className=\"pb-3\">\r\n-                              <div className=\"flex items-center justify-between gap-4\">\r\n-                                <div className=\"flex items-center gap-3 min-w-0 flex-1\">\r\n-                                  <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n-                                    <span className=\"px-2 py-1 bg-primary/10 rounded-md text-sm font-semibold text-primary whitespace-nowrap\">\r\n-                                      Q {index + 1}\r\n-                                    </span>\r\n-                                    <Badge variant=\"outline\" className=\"whitespace-nowrap\">\r\n-                                      {QUESTION_TYPES[question.type as keyof typeof QUESTION_TYPES]?.label || question.type}\r\n-                                    </Badge>\r\n-                                    {question.isDraft && (\r\n-                                      <Badge variant=\"secondary\" className=\"whitespace-nowrap\">Draft</Badge>\r\n-                                )}\r\n                                   </div>\r\n-                                      {expandedQuestion !== index && (\r\n-                                        <div className=\"text-sm text-muted-foreground truncate\">\r\n-                                          {question.title || 'No question text'} - {question.data?.content || 'No question texts'}\r\n-                                        </div>\r\n-                                      )}\r\n-                                    </div>\r\n-                                    <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n-                                      <Button\r\n-                                        variant=\"ghost\"\r\n-                                        size=\"sm\"\r\n-                                        onClick={() => handleQuestionExpand(index)}\r\n-                                      >\r\n-                                        {expandedQuestion === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n-                                      </Button>\r\n-                                      <Button\r\n-                                        variant=\"ghost\"\r\n-                                        size=\"sm\"\r\n-                                        onClick={() => handleRemoveQuestion(index)}\r\n-                                      >\r\n-                                        <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n-                                      </Button>\r\n-                                    </div>\r\n-                                  </div>\r\n-                                </CardHeader>\r\n-                                {expandedQuestion === index && (\r\n-                                  <CardContent>\r\n-                                    <QuestionForm\r\n-                                      key={index}\r\n-                                      question={{ \r\n-                                        ...question, \r\n-                                        lesson_id: currentLessonId || '',\r\n-                                        type: isValidQuestionType(question.type) ? question.type : 'speaking',\r\n-                                        data: {\r\n-                                          prompt: question.data?.prompt ?? '',\r\n-                                          teacher_script: question.data?.teacher_script ?? '',\r\n-                                          followup_prompt: question.data?.followup_prompt ?? [],\r\n-                                          sample_answer: question.data?.sample_answer ?? '',\r\n-                                          \r\n-                                        } \r\n-                                      }}\r\n-                                      index={index}\r\n-                                      onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\r\n-                                        await handleUpdateQuestion(index, {\r\n-                                          ...updatedQuestion,\r\n-                                          data: {\r\n-                                            prompt: updatedQuestion.data?.prompt ?? '',\r\n-                                            teacher_script: updatedQuestion.data?.teacher_script ?? '',\r\n-                                            followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\r\n-                                            sample_answer: updatedQuestion.data?.sample_answer ?? '',\r\n-                                            metadata: updatedQuestion.metadata ?? {},\r\n-                                            },\r\n-                                            correct_answer: updatedQuestion.correct_answer ?? '',\r\n-                                            content: updatedQuestion.content ?? ''  // Add default value\r\n-                                        });\r\n-                                      }}\r\n-                                      onRemove={handleRemoveQuestion}\r\n-                                      onAddExercisePrompt={handleAddExercisePrompt}\r\n-                                      onRemoveExercisePrompt={handleRemoveExercisePrompt}\r\n-                                      onExercisePromptChange={handleExercisePromptChange}\r\n-                                    /><Button \r\n-                                    size=\"sm\"\r\n-                                    variant=\"outline\"\r\n-                                    onClick={() => handleSaveQuestion(question, index)}\r\n-                                    className=\"ml-2\"\r\n-                                  >\r\n-                                    {questionSaveStatuses.find(s => s.id === question.id)?.status === 'saving' ? (\r\n-                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n-                                    ) : (\r\n-                                      <Save className=\"h-4 w-4 mr-2\" />\r\n-                                    )}\r\n-                                    Save Question\r\n-                                                    </Button>\r\n-                                    {/* Exercise Prompts with Save Buttons */}\r\n-                                    {question.exercisePrompts?.map((prompt, promptIndex) => (\r\n-                                      <div key={`${question.id}-prompt-${promptIndex}`} className=\"mt-4\"> {/* Updated key */}\r\n-                                        <div className=\"flex items-center justify-between mb-2\">\r\n-                                          <h4 className=\"text-sm font-medium\">Exercise Prompt {promptIndex + 1}</h4>\r\n-                                          <div className=\"flex items-center gap-2\">\r\n-                                            <TooltipProvider>\r\n-                                              <Tooltip>\r\n-                                                <TooltipTrigger asChild>\r\n-                                                  <Button\r\n-                                                    size=\"sm\"\r\n-                                                    variant=\"outline\"\r\n-                                                    onClick={() => handleSavePrompt(question.id, prompt, promptIndex)}\r\n-                                                    disabled={promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving'}\r\n-                                                  >\r\n-                                                    {promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving' ? (\r\n-                                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n-                                                    ) : (\r\n-                                                      <Save className=\"h-4 w-4 mr-2\" />\r\n-                                                    )}\r\n-                                                    Save Prompt\r\n-                                                  </Button>\r\n-                                                </TooltipTrigger>\r\n-                                                <TooltipContent>\r\n-                                                  {`Status: ${promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}`}\r\n-                                                </TooltipContent>\r\n-                                              </Tooltip>\r\n-                                            </TooltipProvider>\r\n-                                            <Badge variant={\r\n-                                              promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saved'\r\n-                                                ? 'secondary'\r\n-                                                : promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'error'\r\n-                                                ? 'destructive'\r\n-                                                : 'default'\r\n-                                            }>\r\n-                                              {promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}\r\n-                                            </Badge>\r\n-                                                  </div>\r\n-                                        </div>\r\n-                                        <ExercisePromptCard\r\n-                                          key={prompt.id} // Add a unique key here\r\n-                                          prompt={prompt}\r\n-                                          promptIndex={promptIndex}\r\n-                                          onRemove={() => handleRemoveExercisePrompt(index, promptIndex)}\r\n-                                          onUpdate={(updatedPrompt: ExercisePrompt) => {\r\n-                                            // Prevent duplicate updates\r\n-                                            if (updatedPrompt.id === prompt.id) {\r\n-                                              handleExercisePromptChange(index, promptIndex, updatedPrompt);\r\n-                                            }\r\n-                                          }}\r\n-                                        />\r\n-                                      </div>\r\n-                                    ))}\r\n-                                  </CardContent>\r\n-                                )}\r\n-                              </Card>\r\n-                            ))}\r\n-\r\n-                            {/* Add Question Button */}\r\n-                            <div className=\"flex items-center justify-between\">\r\n-                              <QuestionTypeSelect \r\n-                                value={selectedQuestionType} \r\n-                                onChange={handleQuestionTypeChange}\r\n-                              />\r\n-                                        <Button\r\n-                                          onClick={handleAddQuestion}\r\n-                                          disabled={!selectedQuestionType}\r\n-                                        >\r\n-                                <Plus className=\"h-4 w-4 mr-2\" />\r\n-                                          Add Question\r\n-                                        </Button>\r\n-                                      </div>\r\n-                      </TabsContent>\r\n-\r\n-                      {/* Activities Tab */}\r\n-                      <TabsContent value=\"activities\" className=\"space-y-4\">\r\n-                      <CardHeader>\r\n-                          <CardDescription>Add and manage activities for this lesson</CardDescription>\r\n-                      </CardHeader>\r\n-                        {activities.map((activity, index) => (\r\n-                          <Card key={index}>\r\n-                            <CardHeader className=\"pb-3\">\r\n-                              <div className=\"flex items-center justify-between\">\r\n-                                  <div className=\"flex items-center gap-2\">\r\n-                                  <Badge variant=\"outline\">Activity {index + 1}</Badge>\r\n-                                  </div>\r\n-                                <div className=\"flex items-center gap-2\">\r\n                                   <Button\r\n                                     variant=\"ghost\"\r\n                                     size=\"sm\"\r\n-                                    onClick={() => handleActivityExpand(index)}\r\n+                                    onClick={async () => {\r\n+                                      const { canDelete, message } = await checkDeletability('subtopic', subtopic.id);\r\n+                                      if (!canDelete) {\r\n+                                        toast.error(message);\r\n+                                        return;\r\n+                                      }\r\n+                                      setItemToDelete({\r\n+                                        id: subtopic.id,\r\n+                                        type: 'subtopic',\r\n+                                        title: subtopic.title\r\n+                                      });\r\n+                                      setDeleteDialogOpen(true);\r\n+                                    }}\r\n                                   >\r\n-                                    {expandedActivity === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n+                                    <Trash className=\"h-4 w-4\" />\r\n                                   </Button>\r\n-                                  <Button\r\n-                                    variant=\"ghost\"\r\n-                                    size=\"sm\"\r\n-                                    onClick={() => handleRemoveActivity(index)}\r\n-                                  >\r\n-                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n-                                  </Button>\r\n                                 </div>\r\n-                              </div>\r\n-                            </CardHeader>\r\n-                            {expandedActivity === index && (\r\n-                              <CardContent>\r\n-                                <div className=\"space-y-4\">\r\n-                                  <div className=\"space-y-2\">\r\n-                                    <Label>Instructions</Label>\r\n-                                    <Textarea\r\n-                                      value={activity.instructions}\r\n-                                      onChange={(e) => handleUpdateActivity(index, {\r\n-                                        ...activity,\r\n-                                        instructions: e.target.value\r\n-                                      })}\r\n-                                      placeholder=\"Enter activity instructions\"\r\n-                                    />\r\n-                                  </div>\r\n-                                    \r\n-                                    {/* Media Section */}\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <Label>Media</Label>\r\n-                                      {activity.media?.map((media, mediaIndex) => (\r\n-                                        <div key={mediaIndex} className=\"flex items-center gap-2\">\r\n-                                          <Input\r\n-                                            value={media.url}\r\n-                                            onChange={(e) => {\r\n-                                              const updatedMedia = [...(activity.media || [])];\r\n-                                              updatedMedia[mediaIndex] = {\r\n-                                                type: media.type,\r\n-                                                url: e.target.value\r\n-                                              };\r\n-                                              handleUpdateActivity(index, {\r\n-                                                ...activity,\r\n-                                                media: updatedMedia\r\n-                                              });\r\n-                                            }}\r\n-                                            placeholder=\"Media URL\"\r\n-                                          />\r\n-                                          <Select\r\n-                                            value={media.type}\r\n-                                            onValueChange={(value) => {\r\n-                                              const updatedMedia = [...(activity.media || [])];\r\n-                                              updatedMedia[mediaIndex] = {\r\n-                                                type: value as 'image' | 'gif' | 'video',\r\n-                                                url: media.url\r\n-                                              };\r\n-                                              handleUpdateActivity(index, {\r\n-                                                ...activity,\r\n-                                                media: updatedMedia\r\n-                                              });\r\n-                                            }}\r\n-                                          >\r\n-                                            <SelectTrigger className=\"w-[120px]\">\r\n-                                              <SelectValue placeholder=\"Type\" />\r\n-                                            </SelectTrigger>\r\n-                                            <SelectContent>\r\n-                                              <SelectItem value=\"image\">Image</SelectItem>\r\n-                                              <SelectItem value=\"gif\">GIF</SelectItem>\r\n-                                              <SelectItem value=\"video\">Video</SelectItem>\r\n-                                            </SelectContent>\r\n-                                          </Select>\r\n-                                <Button\r\n-                                            variant=\"ghost\"\r\n-                                            size=\"sm\"\r\n-                                  onClick={() => {\r\n-                                              const updatedMedia = (activity.media || []).filter((_, i) => i !== mediaIndex);\r\n-                                              handleUpdateActivity(index, {\r\n-                                                ...activity,\r\n-                                                media: updatedMedia\r\n-                                          });\r\n-                                          }}\r\n-                                  >\r\n-                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n-                                  </Button>\r\n+\r\n+                                {/* Lessons */}\r\n+                                <div className=\"pl-6 mt-2 space-y-2\">\r\n+                                  {lessons\r\n+                                    .filter(lesson => lesson.subtopic_id === subtopic.id)\r\n+                                    .map((lesson) => (\r\n+                                      <Card \r\n+                                        key={lesson.id} \r\n+                                        className=\"hover:bg-accent/5 transition-colors cursor-pointer\"\r\n+                                        onClick={() => handleStartLesson(lesson.id)}\r\n+                                      >\r\n+                                        <CardHeader className=\"py-2\">\r\n+                                          <div className=\"flex items-center justify-between\">\r\n+                                            <div>\r\n+                                              <h5 className=\"text-sm font-medium\">{lesson.title}</h5>\r\n+                                              <div className=\"flex items-center gap-2 mt-1\">\r\n+                                                <Badge variant=\"outline\">\r\n+                                                  {lesson.duration || 0} mins\r\n+                                                </Badge>\r\n+                                                <Badge variant=\"outline\">\r\n+                                                  {lesson.questions?.length || 0} Questions\r\n+                                                </Badge>\r\n+                                              </div>\r\n+                                            </div>\r\n+                                            <Button\r\n+                                              variant=\"ghost\"\r\n+                                              size=\"sm\"\r\n+                                              onClick={(e) => {\r\n+                                                e.stopPropagation();\r\n+                                                const { canDelete, message } = await checkDeletability('lesson', lesson.id);\r\n+                                                if (!canDelete) {\r\n+                                                  toast.error(message);\r\n+                                                  return;\r\n+                                                }\r\n+                                                setItemToDelete({\r\n+                                                  id: lesson.id,\r\n+                                                  type: 'lesson',\r\n+                                                  title: lesson.title\r\n+                                                });\r\n+                                                setDeleteDialogOpen(true);\r\n+                                              }}\r\n+                                            >\r\n+                                              <Trash className=\"h-4 w-4\" />\r\n+                                            </Button>\r\n+                                          </div>\r\n+                                        </CardHeader>\r\n+                                      </Card>\r\n+                                    ))}\r\n                                 </div>\r\n-                                        ))}\r\n-                                  <Button\r\n-                                    variant=\"outline\"\r\n-                                    size=\"sm\"\r\n-                                            onClick={() => {\r\n-                                              handleUpdateActivity(index, {\r\n-                                                ...activity,\r\n-                                                media: [\r\n-                                                  ...(activity.media || [])  ,\r\n-                                                  { url: '', type: 'image' }\r\n-                                                ]\r\n-                                              });\r\n-                                            }}\r\n-                                  >\r\n-                                    <Plus className=\"h-4 w-4 mr-2\" />\r\n-                                            Add Media\r\n-                                  </Button>\r\n-                                </div>\r\n-                                      </div>\r\n-                                    </CardContent>\r\n-                                  )}\r\n-                                </Card>\r\n-                              ))}\r\n-\r\n-                              {/* Add Activity Button */}\r\n-                              <Button\r\n-                                onClick={handleAddActivity}\r\n-                                className=\"w-full\"\r\n-                              >\r\n-                                <Plus className=\"h-4 w-4 mr-2\" />\r\n-                                Add Activity\r\n-                              </Button>\r\n-                          </TabsContent>\r\n-                        </Tabs>\r\n-                        </div>\r\n-                )}\r\n-\r\n-                    {/* Floating Save Button */}\r\n-                    <div className=\"fixed bottom-8 right-8 flex items-center gap-4\">\r\n-                      {saveProgress !== 'idle' && (\r\n-                        <div className={cn(\r\n-                          \"flex items-center gap-2 rounded-lg px-4 py-2 shadow-lg\",\r\n-                          {\r\n-                            \"bg-background border\": saveProgress === 'saving',\r\n-                            \"bg-green-500 text-white\": saveProgress === 'saved',\r\n-                            \"bg-destructive text-destructive-foreground\": saveProgress === 'error'\r\n-                          }\r\n-                        )}>\r\n-                          {saveProgress === 'saving' && (\r\n-                            <>\r\n-                              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n-                              <span className=\"text-sm\">Saving changes...</span>\r\n-                            </>\r\n-                          )}\r\n-                          {saveProgress === 'saved' && (\r\n-                            <>\r\n-                              <Check className=\"h-4 w-4\" />\r\n-                              <span className=\"text-sm\">Changes saved</span>\r\n-                            </>\r\n-                          )}\r\n-                          {saveProgress === 'error' && (\r\n-                            <>\r\n-                              <X className=\"h-4 w-4\" />\r\n-                              <span className=\"text-sm\">Error saving changes</span>\r\n-                            </>\r\n-                          )}\r\n-                        </div>\r\n-                      )}\r\n-                      <Button\r\n-                        onClick={handleSaveLesson}\r\n-                        disabled={saveProgress === 'saving'}\r\n-                        className=\"shadow-lg\"\r\n-                      >\r\n-                        {saveProgress === 'saving' ? (\r\n-                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\r\n-                        ) : (\r\n-                          <Save className=\"h-4 w-4 mr-2\" />\r\n-                        )}\r\n-                        {saveProgress === 'saving' ? 'Saving...' : 'Save Lesson'}\r\n-                      </Button>\r\n-                    </div>\r\n-                  </>\r\n-            )}\r\n-    </div>\r\n-    \r\n-\r\n-      {/* Floating Save Button */}\r\n-      {selectedSubtopicId && currentLessonId && (\r\n-          <div className=\"fixed bottom-4 right-4 flex flex-col gap-2\">\r\n-            <TooltipProvider>\r\n-              <Tooltip>\r\n-                <TooltipTrigger asChild>\r\n-                  <Button\r\n-                    size=\"icon\"\r\n-                    className=\"rounded-full h-12 w-12 shadow-lg\"\r\n-                    onClick={handleSaveLesson}\r\n-                    disabled={!selectedSubtopicId || !lessonTitle || questions.length === 0}\r\n+                              </CardHeader>\r\n+                            </Card>\r\n+                          ))}\r\n+                      </div>\r\n+                    </CardHeader>\r\n+                  </Card>\r\n+                ))}\r\n+              </CardContent>\r\n+            </Card>\r\n+          ) : (\r\n+            // Original content for non-view mode\r\n+            <>\r\n+              {/* Existing Topic, Subtopic, and Lesson Selection UI */}\r\n+              {/* Topic Selection */}\r\n+              {selectedGradeId && (\r\n+                <div className=\"space-y-2\">\r\n+                  <div className=\"flex items-center justify-between\">\r\n+                  <Label htmlFor=\"topic-select\">Topic</Label>\r\n+                  </div>\r\n+                  <Select \r\n+                        value={selectedTopicId || ''} \r\n+                        onValueChange={handleTopicSelect}\r\n                   >\r\n-                    <Save className=\"h-6 w-6\" />\r\n+                    <SelectTrigger id=\"topic-select\" className=\"w-full\">\r\n+                      <SelectValue placeholder=\"Select Topic\" />\r\n+                    </SelectTrigger>\r\n+                    <SelectContent>\r\n+                          {topics.map((topic: Topic) => (\r\n+                            <SelectItem \r\n+                              key={`topic-${topic.id || 'new'}`} \r\n+                              value={topic.id || ''}\r\n+                            >\r\n+                            <div className=\"flex items-center gap-2\">\r\n+                            <Layers className=\"h-4 w-4 text-primary\" />\r\n+                              {topic.title}\r\n+                            </div>\r\n+                          </SelectItem>\r\n+                        ))}\r\n+                    </SelectContent>\r\n+                  </Select>\r\n+                  <Button \r\n+                    variant=\"outline\" \r\n+                    size=\"sm\" \r\n+                    className=\"w-full gap-2\"\r\n+                    onClick={() => setModalState({ ...modalState, showAddTopic: true })}\r\n+                  >\r\n+                    <Plus className=\"h-4 w-4\" />\r\n+                    Add New Topic\r\n                   </Button>\r\n-                </TooltipTrigger>\r\n-                <TooltipContent>\r\n-                  <p>Save Lesson (Ctrl+S)</p>\r\n-                </TooltipContent>\r\n-              </Tooltip>\r\n-            </TooltipProvider>\r\n-          </div>\r\n-        )}\r\n-        <SaveFeedback />\r\n+                </div>\r\n+              )}\r\n \r\n-        {/* Add Grade Modal - do not delete */}\r\n-        {/* {modalState.showAddGrade && (\r\n-          <Dialog \r\n-            open={modalState.showAddGrade} \r\n-            onOpenChange={(open) => handleModalStateChange('showAddGrade', open)}\r\n-          >\r\n-            <DialogContent \r\n-              className=\"sm:max-w-[425px]\"\r\n-              onEscapeKeyDown={cleanupModalState}\r\n-              onPointerDownOutside={cleanupModalState}\r\n-            >\r\n-              <DialogHeader>\r\n-                <DialogTitle>Add New Grade</DialogTitle>\r\n-                <DialogDescription>Enter the details for the new grade.</DialogDescription>\r\n-              </DialogHeader>\r\n-              <div className=\"space-y-4 py-4\">\r\n+              {/* Subtopic Selection */}\r\n+              {selectedTopicId && (\r\n                 <div className=\"space-y-2\">\r\n-                  <Label htmlFor=\"grade-name\">Grade Name</Label>\r\n-                  <Input\r\n-                    id=\"grade-name\"\r\n-                    value={newItemData.name}\r\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n-                    placeholder=\"Enter grade name\"\r\n-                  />\r\n-      </div>\r\n-              </div>\r\n-              <DialogFooter>\r\n-                <Button variant=\"outline\" onClick={() => {\r\n-                  setModalState({ ...modalState, showAddGrade: false });\r\n-                  setNewItemData({ name: '', description: '' });\r\n-                }}>\r\n-                  Cancel\r\n-                </Button>\r\n-                <Button onClick={handleCreateGrade} disabled={!newItemData.name}>Create Grade</Button>\r\n-              </DialogFooter>\r\n-            </DialogContent>\r\n-          </Dialog>\r\n-        )} */}\r\n-\r\n-        {/* Add Topic Modal */}\r\n-        {modalState.showAddTopic && (\r\n-          <Dialog \r\n-            open={modalState.showAddTopic} \r\n-            onOpenChange={(open) => handleModalStateChange('showAddTopic', open)}\r\n-          >\r\n-            <DialogContent \r\n-              className=\"sm:max-w-[425px]\"\r\n-              onEscapeKeyDown={cleanupModalState}\r\n-              onPointerDownOutside={cleanupModalState}\r\n-            >\r\n-              <DialogHeader>\r\n-                <DialogTitle>Add New Topic</DialogTitle>\r\n-                <DialogDescription>Enter the details for the new topic.</DialogDescription>\r\n-              </DialogHeader>\r\n-              <div className=\"space-y-4 py-4\">\r\n-                <div className=\"space-y-2\">\r\n-                  <Label htmlFor=\"topic-name\">Topic Name</Label>\r\n-                  <Input\r\n-                    id=\"topic-name\"\r\n-                    value={newItemData.name}\r\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n-                    placeholder=\"Enter topic name\"\r\n-                  />\r\n+                  <div className=\"flex items-center justify-between\">\r\n+                  <Label htmlFor=\"subtopic-select\">Subtopic</Label>\r\n+                  </div>\r\n+                  <Select \r\n+                        value={selectedSubtopicId || ''} \r\n+                        onValueChange={handleSubtopicSelect}\r\n+                  >\r\n+                    <SelectTrigger id=\"subtopic-select\" className=\"w-full\">\r\n+                      <SelectValue placeholder=\"Select Subtopic\" />\r\n+                    </SelectTrigger>\r\n+                    <SelectContent>\r\n+                          {subtopics\r\n+                            .filter(subtopic => subtopic.id)\r\n+                            .map((subtopic, index) => (\r\n+                              <SelectItem \r\n+                                key={subtopic.id || `subtopic-${index}`}\r\n+                                value={subtopic.id || ''}\r\n+                              >\r\n+                                {subtopic.title || 'Untitled Subtopic'}\r\n+                              </SelectItem>\r\n+                            ))}\r\n+                    </SelectContent>\r\n+                  </Select>\r\n+                  {!isViewMode && (\r\n+                    <Button \r\n+                      variant=\"outline\" \r\n+                      size=\"sm\" \r\n+                      className=\"w-full gap-2\"\r\n+                      onClick={() => setModalState({ ...modalState, showAddSubtopic: true })}\r\n+                    >\r\n+                      <Plus className=\"h-4 w-4\" />\r\n+                      Add New Subtopic\r\n+                    </Button>\r\n+                  )}\r\n                 </div>\r\n-              </div>\r\n-              <DialogFooter>\r\n-                <Button variant=\"outline\" onClick={() => {\r\n-                  setModalState({ ...modalState, showAddTopic: false });\r\n-                  setNewItemData({ name: '', description: '' });\r\n-                }}>\r\n-                  Cancel\r\n-                </Button>\r\n-                <Button onClick={handleCreateTopic} disabled={!newItemData.name}>Create Topic</Button>\r\n-              </DialogFooter>\r\n-            </DialogContent>\r\n-          </Dialog>\r\n-        )}\r\n+              )}\r\n \r\n-        {/* Add Subtopic Modal */}\r\n-        {modalState.showAddSubtopic && (\r\n-          <Dialog \r\n-            open={modalState.showAddSubtopic} \r\n-            onOpenChange={(open) => handleModalStateChange('showAddSubtopic', open)}\r\n-          >\r\n-            <DialogContent \r\n-              className=\"sm:max-w-[425px]\"\r\n-              onEscapeKeyDown={cleanupModalState}\r\n-              onPointerDownOutside={cleanupModalState}\r\n-            >\r\n-              <DialogHeader>\r\n-                <DialogTitle>Add New Subtopic</DialogTitle>\r\n-                <DialogDescription>Enter the details for the new subtopic.</DialogDescription>\r\n-              </DialogHeader>\r\n-              <div className=\"space-y-4 py-4\">\r\n+              {/* Lesson Selection */}\r\n+              {selectedSubtopicId && (\r\n                 <div className=\"space-y-2\">\r\n-                  <Label htmlFor=\"subtopic-name\">Subtopic Name</Label>\r\n-                  <Input\r\n-                    id=\"subtopic-name\"\r\n-                    value={newItemData.name}\r\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n-                    placeholder=\"Enter subtopic name\"\r\n-                  />\r\n-                </div>\r\n-              </div>\r\n-              <DialogFooter>\r\n-                <Button variant=\"outline\" onClick={() => {\r\n-                  setModalState({ ...modalState, showAddSubtopic: false });\r\n-                  setNewItemData({ name: '', description: '' });\r\n-                }}>\r\n-                  Cancel\r\n+                  <div className=\"flex items-center justify-between\">\r\n+                    <Label htmlFor=\"lesson-select\">Lesson</Label>\r\n+                  </div>\r\n+                    <Select \r\n+                      value={currentLessonId || ''} \r\n+                      onValueChange={handleLessonSelect}\r\n+                      onOpenChange={(open) => {\r\n+                        setIsDropdownOpen(open);\r\n+                        if (open) {\r\n+                          setIsSidebarCollapsed(false);\r\n+                          setIsSidebarLocked(true);\r\n+                        } else {\r\n+                          // Small delay before unlocking to prevent immediate collapse\r\n+                          setTimeout(() => {\r\n+                            setIsSidebarLocked(false);\r\n+                          }, 100);\r\n+                        }\r\n+                      }}\r\n+                    >\r\n+                      <SelectTrigger \r\n+                        id=\"lesson-select\" \r\n+                        className=\"w-full\"\r\n+                        onClick={(e) => {\r\n+                          e.stopPropagation();\r\n+                          setIsSidebarCollapsed(false);\r\n+                          setIsSidebarLocked(true);\r\n+                        }}\r\n+                      >\r\n+                        <SelectValue placeholder=\"Select Lesson\" />\r\n+                      </SelectTrigger>\r\n+                      <SelectContent>\r\n+                        {lessons\r\n+                          .filter((lesson): lesson is Lesson => lesson !== undefined && lesson !== null)\r\n+                          .map((lesson: Lesson) => (\r\n+                            <SelectItem \r\n+                              key={`lesson-${lesson.id || 'new'}`} \r\n+                              value={lesson.id || ''}\r\n+                            >\r\n+                              <div className=\"flex items-center gap-2\">\r\n+                                <BookOpen className=\"h-4 w-4 text-primary\" />\r\n+                                {lesson.title || 'Untitled Lesson'}\r\n+                              </div>\r\n+                            </SelectItem>\r\n+                          ))}\r\n+                      </SelectContent>\r\n+                    </Select>\r\n+                <Button \r\n+                        variant=\"outline\" \r\n+                        size=\"sm\" \r\n+                        className=\"w-full gap-2\"\r\n+                    onClick={() => setModalState({ ...modalState, showAddLesson: true })}\r\n+                      >\r\n+                        <Plus className=\"h-4 w-4\" />\r\n+                        Add New Lesson\r\n                 </Button>\r\n-                <Button onClick={() => handleCreateSubtopic({ title: newItemData.name })} disabled={!newItemData.name}>Create Subtopic</Button>\r\n-              </DialogFooter>\r\n-            </DialogContent>\r\n-          </Dialog>\r\n-        )}\r\n-\r\n-        {/* Add Lesson Modal */}\r\n-        {modalState.showAddLesson && (\r\n-          <Dialog \r\n-            open={modalState.showAddLesson} \r\n-            onOpenChange={(open) => handleModalStateChange('showAddLesson', open)}\r\n-          >\r\n-            <DialogContent \r\n-              className=\"sm:max-w-[425px]\"\r\n-              onEscapeKeyDown={cleanupModalState}\r\n-              onPointerDownOutside={cleanupModalState}\r\n-            >\r\n-              <DialogHeader>\r\n-                <DialogTitle>Add New Lesson</DialogTitle>\r\n-                <DialogDescription>Enter the details for the new lesson.</DialogDescription>\r\n-              </DialogHeader>\r\n-              <div className=\"space-y-4 py-4\">\r\n-                <div className=\"space-y-2\">\r\n-                  <Label htmlFor=\"lesson-name\">Lesson Title</Label>\r\n-                  <Input\r\n-                    id=\"lesson-name\"\r\n-                    value={newItemData.name}\r\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n-                    placeholder=\"Enter lesson title\"\r\n-                  />\r\n+                  </div>\r\n                 </div>\r\n-              </div>\r\n-              <DialogFooter>\r\n-                <Button variant=\"outline\" onClick={() => {\r\n-                  setModalState({ ...modalState, showAddLesson: false });\r\n-                  setNewItemData({ name: '', description: '' });\r\n-                }}>\r\n-                  Cancel\r\n-                </Button>\r\n-                <Button onClick={handleCreateLesson} disabled={!newItemData.name}>Create Lesson</Button>\r\n-              </DialogFooter>\r\n-            </DialogContent>\r\n-          </Dialog>\r\n-        )}\r\n+              )}\r\n+            </>\r\n+          )}\r\n+        </div>\r\n       </div>\r\n-      <Toaster />\r\n-      </div>\r\n+    </div>\r\n   );\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1740044282341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2217,9 +2217,9 @@\n                                             </div>\r\n                                             <Button\r\n                                               variant=\"ghost\"\r\n                                               size=\"sm\"\r\n-                                              onClick={(e) => {\r\n+                                              onClick={async (e) => {\r\n                                                 e.stopPropagation();\r\n                                                 const { canDelete, message } = await checkDeletability('lesson', lesson.id);\r\n                                                 if (!canDelete) {\r\n                                                   toast.error(message);\r\n"
                },
                {
                    "date": 1740044301878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2217,9 +2217,9 @@\n                                             </div>\r\n                                             <Button\r\n                                               variant=\"ghost\"\r\n                                               size=\"sm\"\r\n-                                              onClick={async (e) => {\r\n+                                              onClick={async(e) => {\r\n                                                 e.stopPropagation();\r\n                                                 const { canDelete, message } = await checkDeletability('lesson', lesson.id);\r\n                                                 if (!canDelete) {\r\n                                                   toast.error(message);\r\n"
                },
                {
                    "date": 1740044308579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2217,9 +2217,9 @@\n                                             </div>\r\n                                             <Button\r\n                                               variant=\"ghost\"\r\n                                               size=\"sm\"\r\n-                                              onClick={async(e) => {\r\n+                                              onClick={async (e: React.MouseEvent<HTMLButtonElement>) => {\r\n                                                 e.stopPropagation();\r\n                                                 const { canDelete, message } = await checkDeletability('lesson', lesson.id);\r\n                                                 if (!canDelete) {\r\n                                                   toast.error(message);\r\n"
                },
                {
                    "date": 1740044344695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2002,401 +2002,1385 @@\n       {/* Rest of sidebar content */}\r\n     </Card>\r\n   </div>\r\n \r\n-  // Add this state to control sidebar visibility\r\n-  const [showSidebar, setShowSidebar] = useState(true);\r\n-\r\n-  // Add this effect to hide sidebar on grade selection\r\n-  useEffect(() => {\r\n-    if (selectedGradeId && isViewMode) {\r\n-      setShowSidebar(false);\r\n-    } else {\r\n-      setShowSidebar(true);\r\n-    }\r\n-  }, [selectedGradeId, isViewMode]);\r\n-\r\n-  // Add this function to handle lesson start\r\n-  const handleStartLesson = async (lessonId: string) => {\r\n-    try {\r\n-      setIsNavigating(true);\r\n-      const { data: lessonData, error } = await supabase\r\n-        .from('lessons')\r\n-        .select(`\r\n-          *,\r\n-          questions (\r\n-            id,\r\n-            title,\r\n-            content,\r\n-            type,\r\n-            data,\r\n-            metadata,\r\n-            exercise_prompts (*)\r\n-          )\r\n-        `)\r\n-        .eq('id', lessonId)\r\n-        .single();\r\n-\r\n-      if (error) throw error;\r\n-\r\n-      setCurrentLessonId(lessonId);\r\n-      setLessonDialogOpen(true);\r\n-      setLessonContent(lessonData);\r\n-    } catch (error) {\r\n-      toast.error('Failed to load lesson');\r\n-      console.error(error);\r\n-    } finally {\r\n-      setIsNavigating(false);\r\n-    }\r\n-  };\r\n-\r\n-  // Update the main content section\r\n+  // Update the sidebar and card styles\r\n   return (\r\n-    <div className=\"container mx-auto py-8\">\r\n-      {/* Header */}\r\n-      <div className=\"flex items-center justify-between mb-2\">\r\n-        {/* ... header content ... */}\r\n-        <div className=\"flex items-center gap-4\">\r\n-          <Link href=\"/super-admin\">\r\n-            <Button variant=\"outline\" className=\"gap-2\">\r\n-              <ArrowLeft className=\"h-4 w-4\" />\r\n-              Back\r\n-            </Button>\r\n-          </Link>\r\n+      <div className=\"container mx-auto py-8\">\r\n+        {/* Header */}\r\n+        <div className=\"flex items-center justify-between mb-2\">\r\n+          {/* ... header content ... */}\r\n+          <div className=\"flex items-center gap-4\">\r\n+            <Link href=\"/super-admin\">\r\n+              <Button variant=\"outline\" className=\"gap-2\">\r\n+                <ArrowLeft className=\"h-4 w-4\" />\r\n+                Back\r\n+              </Button>\r\n+            </Link>\r\n+            <div className=\"flex items-center gap-2\">\r\n+              <h1 className=\"text-2xl font-bold\">Lesson Management</h1>\r\n+              <Button\r\n+                variant=\"ghost\"\r\n+                size=\"icon\"\r\n+                onClick={handleRefreshLesson}\r\n+                className=\"ml-2\"\r\n+                title=\"Refresh lesson content\"\r\n+              >\r\n+                <RefreshCw className=\"h-4 w-4\" />\r\n+              </Button>\r\n+            </div>\r\n+            <p className=\"text-sm text-muted-foreground\">Create and manage your educational content</p>\r\n+          </div>\r\n           <div className=\"flex items-center gap-2\">\r\n-            <h1 className=\"text-2xl font-bold\">Lesson Management</h1>\r\n             <Button\r\n-              variant=\"ghost\"\r\n-              size=\"icon\"\r\n-              onClick={handleRefreshLesson}\r\n-              className=\"ml-2\"\r\n-              title=\"Refresh lesson content\"\r\n+              variant=\"outline\"\r\n+              size=\"sm\"\r\n+              onClick={() => setShowHelpTips(!showHelpTips)}\r\n+              className=\"gap-2\"\r\n             >\r\n-              <RefreshCw className=\"h-4 w-4\" />\r\n+              {showHelpTips ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\r\n+              {showHelpTips ? 'Hide Tips' : 'Show Tips'}\r\n             </Button>\r\n           </div>\r\n-          <p className=\"text-sm text-muted-foreground\">Create and manage your educational content</p>\r\n         </div>\r\n-        <div className=\"flex items-center gap-2\">\r\n-          <Button\r\n-            variant=\"outline\"\r\n-            size=\"sm\"\r\n-            onClick={() => setShowHelpTips(!showHelpTips)}\r\n-            className=\"gap-2\"\r\n+        \r\n+        {/* Main content wrapper - Fix the layout here */}\r\n+        <div className=\"flex gap-6 h-[calc(100vh-200px)]\">\r\n+          {/* Improved sidebar */}\r\n+          <div \r\n+            className={cn(\r\n+              \"transition-all duration-300 ease-in-out relative\",\r\n+              isSidebarCollapsed ? \"w-20\" : \"w-80\",\r\n+              \"flex-shrink-0 group\"\r\n+            )}\r\n+            onMouseEnter={() => {\r\n+              handleSidebarHover(true);\r\n+              // Immediately expand on mouse enter\r\n+              if (!isSidebarLocked) {\r\n+                setIsSidebarCollapsed(false);\r\n+              }\r\n+            }}\r\n+            onMouseLeave={() => {\r\n+              // Only collapse if not interacting with content\r\n+              if (!document.activeElement?.closest('.sidebar-content')) {\r\n+                handleSidebarHover(false);\r\n+              }\r\n+            }}\r\n+            onFocus={() => setIsSidebarCollapsed(false)}\r\n           >\r\n-            {showHelpTips ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\r\n-            {showHelpTips ? 'Hide Tips' : 'Show Tips'}\r\n-          </Button>\r\n+            <Card className={cn(\r\n+              \"h-full relative sidebar-content\", // Added sidebar-content class\r\n+              \"transition-shadow duration-300\",\r\n+              \"hover:shadow-lg\"\r\n+            )}>\r\n+              {/* Lock button - only show after lesson selection */}\r\n+              {currentLessonId && (\r\n+                <Button\r\n+                  variant=\"ghost\"\r\n+                  size=\"sm\"\r\n+                  className=\"absolute top-2 right-2 z-10\"\r\n+                  onClick={() => {\r\n+                    setIsSidebarLocked(!isSidebarLocked);\r\n+                    if (!isSidebarLocked) {\r\n+                      setIsSidebarCollapsed(false);\r\n+                    }\r\n+                  }}\r\n+                >\r\n+                  {isSidebarLocked ? <Lock className=\"h-4 w-4\" /> : <Unlock className=\"h-4 w-4\" />}\r\n+                </Button>\r\n+              )}\r\n+\r\n+              {/* Sidebar content with overflow handling */}\r\n+              <div className={cn(\r\n+                \"transition-all duration-300 overflow-hidden\",\r\n+                isSidebarCollapsed ? \"opacity-0\" : \"opacity-100\"\r\n+              )}>\r\n+                <Card className=\"h-full\">\r\n+                  <CardHeader className=\"pb-3\">\r\n+                    <div className=\"flex items-center justify-between\">\r\n+                      <CardTitle className=\"text-lg font-semibold\">Content Management</CardTitle>\r\n+                      <TooltipProvider>\r\n+                        <Tooltip>\r\n+                          <TooltipTrigger>\r\n+                            <HelpCircle className=\"h-4 w-4 text-muted-foreground\" />\r\n+                          </TooltipTrigger>\r\n+                          <TooltipContent>\r\n+                            <p>Manage your educational content here</p>\r\n+                          </TooltipContent>\r\n+                        </Tooltip>\r\n+                      </TooltipProvider>\r\n+                      </div>\r\n+                    <CardDescription>Create and manage your lessons</CardDescription>\r\n+                  </CardHeader>\r\n+                  <CardContent className=\"space-y-4\">\r\n+                    {/* View/Edit Mode Toggle */}\r\n+                    <div className=\"grid grid-cols-2 gap-2 p-1 bg-muted rounded-lg\">\r\n+                      <Button\r\n+                        variant={isViewMode ? \"default\" : \"ghost\"}\r\n+                        size=\"sm\"\r\n+                        onClick={() => setIsViewMode(true)}\r\n+                        className=\"w-full\"\r\n+                      >\r\n+                        <Eye className=\"h-4 w-4 mr-2\" />\r\n+                        View\r\n+                      </Button>\r\n+                      <Button\r\n+                        variant={!isViewMode ? \"default\" : \"ghost\"}\r\n+                        size=\"sm\"\r\n+                        onClick={() => setIsViewMode(false)}\r\n+                        className=\"w-full\"\r\n+                      >\r\n+                        <Edit className=\"h-4 w-4 mr-2\" />\r\n+                        Edit\r\n+                      </Button>\r\n+                    </div>\r\n+\r\n+                    {/* Grade Selection */}\r\n+                    <div className=\"space-y-2\">\r\n+                      <div className=\"flex items-center justify-between\">\r\n+                        <Label htmlFor=\"grade-select\">Grade</Label>\r\n+                        {isViewMode && (\r\n+                          <Button variant=\"ghost\" size=\"sm\" onClick={() => setExpandedGrade(expandedGrade ? null : selectedGrade)}>\r\n+                            {expandedGrade ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n+                          </Button>\r\n+                        )}\r\n+                      </div>\r\n+                      <Select \r\n+                        value={selectedGradeId || ''}\r\n+                        onValueChange={handleGradeSelect}\r\n+                        onOpenChange={(open) => {\r\n+                          if (open) {\r\n+                            // Force sidebar to stay open and lock it\r\n+                            setIsSidebarCollapsed(false);\r\n+                            setIsSidebarLocked(true);\r\n+                          }\r\n+                        }}\r\n+                      >\r\n+                        <SelectTrigger \r\n+                          id=\"grade-select\" \r\n+                          className=\"w-full\"\r\n+                          onClick={(e) => {\r\n+                            e.stopPropagation(); // Prevent event bubbling\r\n+                            setIsSidebarCollapsed(false);\r\n+                            setIsSidebarLocked(true);\r\n+                          }}\r\n+                        >\r\n+                          <SelectValue placeholder=\"Select Grade\" />\r\n+                        </SelectTrigger>\r\n+                        <SelectContent \r\n+                          onCloseAutoFocus={(e) => {\r\n+                            e.preventDefault();\r\n+                            setIsSidebarLocked(true);\r\n+                            setIsSidebarCollapsed(false);\r\n+                          }}\r\n+                        >\r\n+                          {grades.map((grade: Grade) => (\r\n+                            <SelectItem \r\n+                              key={`grade-${grade.id || 'new'}`} \r\n+                              value={grade.id || ''}\r\n+                              onMouseDown={(e) => {\r\n+                                e.preventDefault();\r\n+                                e.stopPropagation();\r\n+                              }}\r\n+                            >\r\n+                              <div className=\"flex items-center gap-2\">\r\n+                                <BookOpen className=\"h-4 w-4 text-primary\" />\r\n+                                {grade.name}\r\n+                              </div>\r\n+                            </SelectItem>\r\n+                          ))}\r\n+                        </SelectContent>\r\n+                      </Select>\r\n+                      {!isViewMode && (\r\n+                      <Button \r\n+                        variant=\"outline\" \r\n+                        size=\"sm\" \r\n+                        className=\"w-full gap-2\"\r\n+                        onClick={() => setModalState({ ...modalState, showAddGrade: false })}\r\n+                      >\r\n+                        <Plus className=\"h-4 w-4\" />\r\n+                        Add New Grade\r\n+                      </Button>\r\n+                      )}\r\n+                    </div>\r\n+\r\n+                    {/* Content Tree View in View Mode */}\r\n+                    {isViewMode && selectedGrade && (\r\n+  <div className=\"grid grid-cols-1 gap-6 p-6\">\r\n+    <Card className=\"border-primary/10\">\r\n+      <CardHeader>\r\n+        <div className=\"flex items-center justify-between\">\r\n+          <CardTitle>Content Structure</CardTitle>\r\n+          <Badge variant=\"outline\" className=\"text-primary\">\r\n+            {topics.length} Topics\r\n+          </Badge>\r\n         </div>\r\n-      </div>\r\n-      \r\n-      {/* Main content wrapper - Fix the layout here */}\r\n-      <div className=\"flex gap-6 h-[calc(100vh-200px)]\">\r\n-        {/* Conditional render of sidebar */}\r\n-        {showSidebar && (\r\n-          <div className={cn(\r\n-            \"transition-all duration-300 ease-in-out relative\",\r\n-            isSidebarCollapsed ? \"w-20\" : \"w-80\",\r\n-            \"flex-shrink-0 group\"\r\n-          )}>\r\n-            {/* Existing sidebar content */}\r\n-          </div>\r\n-        )}\r\n+      </CardHeader>\r\n+      <CardContent className=\"space-y-6\">\r\n+        {topics.map((topic) => (\r\n+          <Card \r\n+            key={topic.id} \r\n+            className={cn(\r\n+              \"border-l-4 transition-all duration-200\",\r\n+              \"border-l-primary/40 hover:border-l-primary\"\r\n+            )}\r\n+          >\r\n+            <CardHeader className=\"py-4\">\r\n+              <div className=\"flex items-center justify-between\">\r\n+                <div className=\"flex items-center gap-2\">\r\n+                  <Layers className=\"h-5 w-5 text-primary\" />\r\n+                  <div>\r\n+                    <h3 className=\"font-medium\">{topic.title}</h3>\r\n+                    <p className=\"text-sm text-muted-foreground\">\r\n+                      {subtopics.filter(s => s.topic_id === topic.id).length} Subtopics\r\n+                    </p>\r\n+                  </div>\r\n+                </div>\r\n+                <Button\r\n+                  variant=\"ghost\"\r\n+                  size=\"sm\"\r\n+                  className=\"hover:bg-destructive/10\"\r\n+                  onClick={async () => {\r\n+                    const { canDelete, message } = await checkDeletability('topic', topic.id);\r\n+                    if (!canDelete) {\r\n+                      toast.error(message);\r\n+                      return;\r\n+                    }\r\n+                    setItemToDelete({\r\n+                      id: topic.id,\r\n+                      type: 'topic',\r\n+                      title: topic.title\r\n+                    });\r\n+                    setDeleteDialogOpen(true);\r\n+                  }}\r\n+                >\r\n+                  <Trash className=\"h-4 w-4\" />\r\n+                </Button>\r\n+              </div>\r\n \r\n-        {/* Right Content Area */}\r\n-        <div className=\"flex-1 overflow-y-auto\">\r\n-          {selectedGradeId && isViewMode ? (\r\n-            <Card className=\"border-primary/10\">\r\n-              <CardHeader>\r\n-                <div className=\"flex items-center justify-between\">\r\n-                  <CardTitle>Content Structure</CardTitle>\r\n-                  <Badge variant=\"outline\" className=\"text-primary\">\r\n-                    {topics.length} Topics\r\n-                  </Badge>\r\n-                </div>\r\n-              </CardHeader>\r\n-              <CardContent className=\"space-y-6\">\r\n-                {topics.map((topic) => (\r\n-                  <Card \r\n-                    key={topic.id} \r\n-                    className=\"border-l-4 border-l-primary/40 hover:border-l-primary transition-all duration-200\"\r\n-                  >\r\n-                    <CardHeader className=\"py-4\">\r\n-                      <div className=\"flex items-center justify-between\">\r\n-                        <div className=\"flex items-center gap-2\">\r\n-                          <Layers className=\"h-5 w-5 text-primary\" />\r\n-                          <div>\r\n-                            <h3 className=\"font-medium\">{topic.title}</h3>\r\n-                            <p className=\"text-sm text-muted-foreground\">\r\n-                              {subtopics.filter(s => s.topic_id === topic.id).length} Subtopics\r\n-                            </p>\r\n+              <div className=\"mt-4 pl-4 space-y-4\">\r\n+                {subtopics\r\n+                  .filter(subtopic => subtopic.topic_id === topic.id)\r\n+                  .map((subtopic) => {\r\n+                    const subtopicLessons = lessons.filter(l => l.subtopic_id === subtopic.id);\r\n+                    const isEmpty = subtopicLessons.length === 0;\r\n+                    \r\n+                    return (\r\n+                      <Card key={subtopic.id} className=\"border-l-2 border-l-primary/20\">\r\n+                        <CardHeader className=\"py-3\">\r\n+                          <div className=\"flex items-center justify-between\">\r\n+                            <div className=\"flex items-center gap-2\">\r\n+                              <BookOpen className=\"h-4 w-4 text-primary\" />\r\n+                              <div>\r\n+                                <h4 className=\"font-medium\">{subtopic.title}</h4>\r\n+                                <div className=\"flex items-center gap-2\">\r\n+                                  <Badge variant=\"outline\">\r\n+                                    {subtopicLessons.length} Lessons\r\n+                                  </Badge>\r\n+                                  {isEmpty && (\r\n+                                    <Badge variant=\"outline\" className=\"text-yellow-500\">\r\n+                                      Empty\r\n+                                    </Badge>\r\n+                                  )}\r\n+                                </div>\r\n+                              </div>\r\n+                            </div>\r\n+                            <Button\r\n+                              variant=\"ghost\"\r\n+                              size=\"sm\"\r\n+                              className=\"hover:bg-destructive/10\"\r\n+                              onClick={async () => {\r\n+                                const { canDelete, message } = await checkDeletability('subtopic', subtopic.id);\r\n+                                if (!canDelete) {\r\n+                                  toast.error(message);\r\n+                                  return;\r\n+                                }\r\n+                                setItemToDelete({\r\n+                                  id: subtopic.id,\r\n+                                  type: 'subtopic',\r\n+                                  title: subtopic.title\r\n+                                });\r\n+                                setDeleteDialogOpen(true);\r\n+                              }}\r\n+                            >\r\n+                              <Trash className=\"h-4 w-4\" />\r\n+                            </Button>\r\n                           </div>\r\n+\r\n+                          <div className=\"pl-4 mt-2 space-y-2\">\r\n+                            {subtopicLessons.map((lesson) => {\r\n+                              const questionCount = lesson.questions?.length || 0;\r\n+                              const isEmpty = questionCount === 0;\r\n+                              \r\n+                              return (\r\n+                                <Card key={lesson.id} className=\"border-l border-l-primary/10\">\r\n+                                  <CardHeader className=\"py-2\">\r\n+                                    <div className=\"flex items-center justify-between\">\r\n+                                      <div className=\"flex items-center gap-2\">\r\n+                                        <div className=\"flex flex-col\">\r\n+                                          <span className=\"text-sm font-medium\">\r\n+                                            {lesson.title}\r\n+                                          </span>\r\n+                                          <div className=\"flex items-center gap-2\">\r\n+                                            <span className=\"text-xs text-muted-foreground\">\r\n+                                              {lesson.duration || 0} mins • {questionCount} Questions\r\n+                                            </span>\r\n+                                            {isEmpty && (\r\n+                                              <Badge \r\n+                                                variant=\"outline\" \r\n+                                                className=\"text-yellow-500\"\r\n+                                              >\r\n+                                                Empty\r\n+                                              </Badge>\r\n+                                            )}\r\n+                                          </div>\r\n+                                        </div>\r\n+                                      </div>\r\n+                                      <Button\r\n+                                        variant=\"ghost\"\r\n+                                        size=\"sm\"\r\n+                                        className=\"hover:bg-destructive/10\"\r\n+                                        onClick={async () => {\r\n+                                          const { canDelete, message } = await checkDeletability('lesson', lesson.id);\r\n+                                          if (!canDelete) {\r\n+                                            toast.error(message);\r\n+                                            return;\r\n+                                          }\r\n+                                          setItemToDelete({\r\n+                                            id: lesson.id,\r\n+                                            type: 'lesson',\r\n+                                            title: lesson.title\r\n+                                          });\r\n+                                          setDeleteDialogOpen(true);\r\n+                                        }}\r\n+                                      >\r\n+                                        <Trash className=\"h-4 w-4\" />\r\n+                                      </Button>\r\n+                                    </div>\r\n+                                  </CardHeader>\r\n+                                </Card>\r\n+                              );\r\n+                            })}\r\n+                          </div>\r\n+                        </CardHeader>\r\n+                      </Card>\r\n+                    );\r\n+                  })}\r\n+              </div>\r\n+            </CardHeader>\r\n+          </Card>\r\n+        ))}\r\n+      </CardContent>\r\n+    </Card>\r\n+  </div>\r\n+)}\r\n+\r\n+                    {/* Regular Edit Mode Content */}\r\n+                    {!isViewMode && (\r\n+                      <>\r\n+                        {/* Existing Topic, Subtopic, and Lesson Selection UI */}\r\n+                      {/* Topic Selection */}\r\n+                        {selectedGradeId && (\r\n+                      <div className=\"space-y-2\">\r\n+                        <div className=\"flex items-center justify-between\">\r\n+                        <Label htmlFor=\"topic-select\">Topic</Label>\r\n                         </div>\r\n-                        <Button\r\n-                          variant=\"ghost\"\r\n-                          size=\"sm\"\r\n-                          className=\"hover:bg-destructive/10\"\r\n-                          onClick={async () => {\r\n-                            const { canDelete, message } = await checkDeletability('topic', topic.id);\r\n-                            if (!canDelete) {\r\n-                              toast.error(message);\r\n-                              return;\r\n-                            }\r\n-                            setItemToDelete({\r\n-                              id: topic.id,\r\n-                              type: 'topic',\r\n-                              title: topic.title\r\n-                            });\r\n-                            setDeleteDialogOpen(true);\r\n-                          }}\r\n+                        <Select \r\n+                              value={selectedTopicId || ''} \r\n+                              onValueChange={handleTopicSelect}\r\n                         >\r\n-                          <Trash className=\"h-4 w-4\" />\r\n+                          <SelectTrigger id=\"topic-select\" className=\"w-full\">\r\n+                            <SelectValue placeholder=\"Select Topic\" />\r\n+                          </SelectTrigger>\r\n+                          <SelectContent>\r\n+                                {topics.map((topic: Topic) => (\r\n+                                  <SelectItem \r\n+                                    key={`topic-${topic.id || 'new'}`} \r\n+                                    value={topic.id || ''}\r\n+                                  >\r\n+                                  <div className=\"flex items-center gap-2\">\r\n+                                  <Layers className=\"h-4 w-4 text-primary\" />\r\n+                                    {topic.title}\r\n+                                  </div>\r\n+                                </SelectItem>\r\n+                              ))}\r\n+                          </SelectContent>\r\n+                        </Select>\r\n+                        <Button \r\n+                          variant=\"outline\" \r\n+                          size=\"sm\" \r\n+                          className=\"w-full gap-2\"\r\n+                          onClick={() => setModalState({ ...modalState, showAddTopic: true })}\r\n+                        >\r\n+                          <Plus className=\"h-4 w-4\" />\r\n+                          Add New Topic\r\n                         </Button>\r\n                       </div>\r\n+                    )}\r\n \r\n-                      {/* Subtopics */}\r\n-                      <div className=\"mt-4 pl-6 space-y-4\">\r\n-                        {subtopics\r\n-                          .filter(subtopic => subtopic.topic_id === topic.id)\r\n-                          .map((subtopic) => (\r\n-                            <Card key={subtopic.id} className=\"border-l-2 border-l-primary/20\">\r\n-                              <CardHeader className=\"py-3\">\r\n-                                {/* Subtopic content */}\r\n-                                <div className=\"flex items-center justify-between\">\r\n-                                  <div className=\"flex items-center gap-2\">\r\n-                                    <BookOpen className=\"h-4 w-4 text-primary\" />\r\n-                                    <div>\r\n-                                      <h4 className=\"font-medium\">{subtopic.title}</h4>\r\n-                                      <Badge variant=\"outline\">\r\n-                                        {lessons.filter(l => l.subtopic_id === subtopic.id).length} Lessons\r\n-                                      </Badge>\r\n+                    {/* Subtopic Selection */}\r\n+                        {selectedTopicId && (\r\n+                      <div className=\"space-y-2\">\r\n+                        <div className=\"flex items-center justify-between\">\r\n+                        <Label htmlFor=\"subtopic-select\">Subtopic</Label>\r\n+                        </div>\r\n+                        <Select \r\n+                              value={selectedSubtopicId || ''} \r\n+                              onValueChange={handleSubtopicSelect}\r\n+                        >\r\n+                          <SelectTrigger id=\"subtopic-select\" className=\"w-full\">\r\n+                            <SelectValue placeholder=\"Select Subtopic\" />\r\n+                          </SelectTrigger>\r\n+                          <SelectContent>\r\n+                                {subtopics\r\n+                                  .filter(subtopic => subtopic.id)\r\n+                                  .map((subtopic, index) => (\r\n+                                    <SelectItem \r\n+                                      key={subtopic.id || `subtopic-${index}`}\r\n+                                      value={subtopic.id || ''}\r\n+                                    >\r\n+                                      {subtopic.title || 'Untitled Subtopic'}\r\n+                                    </SelectItem>\r\n+                                  ))}\r\n+                          </SelectContent>\r\n+                        </Select>\r\n+                        {!isViewMode && (\r\n+                          <Button \r\n+                            variant=\"outline\" \r\n+                            size=\"sm\" \r\n+                            className=\"w-full gap-2\"\r\n+                            onClick={() => setModalState({ ...modalState, showAddSubtopic: true })}\r\n+                          >\r\n+                            <Plus className=\"h-4 w-4\" />\r\n+                            Add New Subtopic\r\n+                          </Button>\r\n+                        )}\r\n+                      </div>\r\n+                    )}\r\n+\r\n+                    {/* Lesson Selection */}\r\n+                        {selectedSubtopicId && (\r\n+                      <div className=\"space-y-2\">\r\n+                        <div className=\"flex items-center justify-between\">\r\n+                          <Label htmlFor=\"lesson-select\">Lesson</Label>\r\n+                        </div>\r\n+                          <Select \r\n+                            value={currentLessonId || ''} \r\n+                            onValueChange={handleLessonSelect}\r\n+                            onOpenChange={(open) => {\r\n+                              setIsDropdownOpen(open);\r\n+                              if (open) {\r\n+                                setIsSidebarCollapsed(false);\r\n+                                setIsSidebarLocked(true);\r\n+                              } else {\r\n+                                // Small delay before unlocking to prevent immediate collapse\r\n+                                setTimeout(() => {\r\n+                                  setIsSidebarLocked(false);\r\n+                                }, 100);\r\n+                              }\r\n+                            }}\r\n+                          >\r\n+                            <SelectTrigger \r\n+                              id=\"lesson-select\" \r\n+                              className=\"w-full\"\r\n+                              onClick={(e) => {\r\n+                                e.stopPropagation();\r\n+                                setIsSidebarCollapsed(false);\r\n+                                setIsSidebarLocked(true);\r\n+                              }}\r\n+                            >\r\n+                              <SelectValue placeholder=\"Select Lesson\" />\r\n+                            </SelectTrigger>\r\n+                            <SelectContent>\r\n+                              {lessons\r\n+                                .filter((lesson): lesson is Lesson => lesson !== undefined && lesson !== null)\r\n+                                .map((lesson: Lesson) => (\r\n+                                  <SelectItem \r\n+                                    key={`lesson-${lesson.id || 'new'}`} \r\n+                                    value={lesson.id || ''}\r\n+                                  >\r\n+                                    <div className=\"flex items-center gap-2\">\r\n+                                      <BookOpen className=\"h-4 w-4 text-primary\" />\r\n+                                      {lesson.title || 'Untitled Lesson'}\r\n                                     </div>\r\n+                                  </SelectItem>\r\n+                                ))}\r\n+                            </SelectContent>\r\n+                          </Select>\r\n+                    <Button \r\n+                            variant=\"outline\" \r\n+                            size=\"sm\" \r\n+                            className=\"w-full gap-2\"\r\n+                        onClick={() => setModalState({ ...modalState, showAddLesson: true })}\r\n+                          >\r\n+                            <Plus className=\"h-4 w-4\" />\r\n+                            Add New Lesson\r\n+                    </Button>\r\n+                      </div>\r\n+                        )}\r\n+                      </>\r\n+                    )}\r\n+                  </CardContent>\r\n+                </Card>\r\n+              </div>\r\n+\r\n+              {/* Collapsed view */}\r\n+              {isSidebarCollapsed && (\r\n+                <div className=\"absolute inset-0 flex flex-col items-center pt-12 gap-4\">\r\n+                  <BookOpen className=\"h-6 w-6 text-muted-foreground\" />\r\n+                  <div className=\"w-px h-full bg-border\" />\r\n+                </div>\r\n+              )}\r\n+            </Card>\r\n+          </div>\r\n+        \r\n+\r\n+          {/* Right Content Area */}\r\n+          <div className=\"flex-1 overflow-y-auto\">\r\n+            {isNavigating ? (\r\n+              <div className=\"flex items-center justify-center h-[400px]\">\r\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n+                <span className=\"ml-3\">Loading...</span>\r\n+              </div>\r\n+            ) : (\r\n+              <>\r\n+                {!selectedGradeId ? (\r\n+                  // Question Types Display Section\r\n+                  <div className=\"space-y-6\">\r\n+                    <Card>\r\n+                      <CardHeader>\r\n+                        <div className=\"flex items-center justify-between\">\r\n+                          <div>\r\n+                            <CardTitle className=\"text-xl font-semibold\">Available Question Types</CardTitle>\r\n+                            <CardDescription>Browse through different question formats and examples</CardDescription>\r\n+                          </div>\r\n+                          <TooltipProvider>\r\n+                            <Tooltip>\r\n+                              <TooltipTrigger>\r\n+                                <HelpCircle className=\"h-5 w-5 text-muted-foreground\" />\r\n+                              </TooltipTrigger>\r\n+                              <TooltipContent>\r\n+                                <p>Click on each type to see detailed examples</p>\r\n+                              </TooltipContent>\r\n+                            </Tooltip>\r\n+                          </TooltipProvider>\r\n+                        </div>\r\n+                      </CardHeader>\r\n+                      <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n+                        {Object.entries(QUESTION_TYPES).map(([type, details]) => (\r\n+                          <Card key={type} className=\"cursor-pointer hover:bg-accent/50 transition-colors\">\r\n+                            <CardHeader className=\"p-4\">\r\n+                              <div className=\"flex items-center justify-between mb-2\">\r\n+                                <Badge variant=\"outline\" className=\"bg-primary/5 text-lg\">\r\n+                                  {details.label}\r\n+                                </Badge>\r\n+                              </div>\r\n+                              <CardDescription className=\"text-sm\">\r\n+                                {details.description || 'No description available'}\r\n+                              </CardDescription>\r\n+                              <div className=\"mt-4\">\r\n+                                <div className=\"text-sm font-medium mb-2\">Example:</div>\r\n+                                <div className=\"p-3 rounded-md bg-muted/50 text-sm\">\r\n+                                  {type === 'multiple-choice' && (\r\n+                                    <>\r\n+                                      <div className=\"font-medium mb-2\">Q: What is the capital of France?</div>\r\n+                                      <div className=\"space-y-1 pl-4\">\r\n+                                        <div>A) Paris</div>\r\n+                                        <div>B) London</div>\r\n+                                        <div>C) Berlin</div>\r\n+                                        <div>D) Madrid</div>\r\n+                                      </div>\r\n+                                    </>\r\n+                                  )}\r\n+                                  {type === 'fill-in-blank' && (\r\n+                                    <div className=\"space-y-2\">\r\n+                                      <div>Complete the sentence:</div>\r\n+                                      <div>The sun rises in the <span className=\"bg-primary/20 px-2 rounded\">_____</span> and sets in the <span className=\"bg-primary/20 px-2 rounded\">_____</span>.</div>\r\n+                                    </div>\r\n+                                  )}\r\n+                                  {type === 'true-false' && (\r\n+                                    <div className=\"space-y-2\">\r\n+                                      <div className=\"font-medium\">Statement:</div>\r\n+                                      <div>The Earth is flat.</div>\r\n+                                      <div className=\"mt-2\">\r\n+                                        <Badge variant=\"outline\" className=\"mr-2\">True</Badge>\r\n+                                        <Badge variant=\"outline\">False</Badge>\r\n+                                      </div>\r\n+                                    </div>\r\n+                                  )}\r\n+                                  {type === 'matching' && (\r\n+                                    <div className=\"space-y-2\">\r\n+                                      <div className=\"font-medium mb-2\">Match the countries with their capitals:</div>\r\n+                                      <div className=\"grid grid-cols-2 gap-4\">\r\n+                                        <div>\r\n+                                          1. France<br />\r\n+                                          2. Germany<br />\r\n+                                          3. Spain\r\n+                                        </div>\r\n+                                        <div>\r\n+                                          • Berlin<br />\r\n+                                          • Paris<br />\r\n+                                          • Madrid\r\n+                                        </div>\r\n+                                      </div>\r\n+                                    </div>\r\n+                                  )}\r\n+                                  {type === 'ordering' && (\r\n+                                    <div className=\"space-y-2\">\r\n+                                      <div className=\"font-medium mb-2\">Arrange in chronological order:</div>\r\n+                                      <div className=\"space-y-1\">\r\n+                                        <Badge variant=\"outline\" className=\"mr-2\">1</Badge>World War II<br />\r\n+                                        <Badge variant=\"outline\" className=\"mr-2\">2</Badge>Industrial Revolution<br />\r\n+                                        <Badge variant=\"outline\" className=\"mr-2\">3</Badge>Renaissance\r\n+                                      </div>\r\n+                                    </div>\r\n+                                  )}\r\n+                                  {type === 'short-answer' && (\r\n+                                    <div className=\"space-y-2\">\r\n+                                      <div className=\"font-medium\">Question:</div>\r\n+                                      <div>Explain the water cycle in 2-3 sentences.</div>\r\n+                                      <div className=\"mt-2 p-2 border border-dashed rounded-md border-primary/30\">\r\n+                                        Answer space\r\n+                                      </div>\r\n+                                    </div>\r\n+                                  )}\r\n+                                </div>\r\n+                              </div>\r\n+                            </CardHeader>\r\n+                          </Card>\r\n+                        ))}\r\n+                      </CardContent>\r\n+                    </Card>\r\n+                  </div>\r\n+                ) : isViewMode ? (\r\n+                  <div className=\"space-y-6\">\r\n+                    {selectedGradeId ? (\r\n+                      <div className=\"grid grid-cols-1 gap-6\">\r\n+                        {topics.map((topic) => (\r\n+                          <Card key={topic.id} className=\"border-l-4 border-l-primary\">\r\n+                            <CardHeader>\r\n+                              <div className=\"flex items-center justify-between\">\r\n+                                <h3 className=\"text-lg font-semibold\">{topic.title}</h3>\r\n+                              </div>\r\n+                            </CardHeader>\r\n+                            <CardContent>\r\n+                              <div className=\"space-y-4\">\r\n+                                {subtopics\r\n+                                  .filter(subtopic => subtopic.topic_id === topic.id)\r\n+                                  .map((subtopic, index) => (\r\n+                                    <div key={subtopic.id || `subtopic-${index}`} className=\"border-l-2 pl-4\">\r\n+                                      <h4 className=\"text-md font-medium mb-2\">{subtopic.name || 'Untitled Subtopic'}</h4>\r\n+                                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n+                                        {lessons\r\n+                                          .filter(lesson => lesson.subtopic_id === subtopic.id)\r\n+                                          .map((lesson) => (\r\n+                                            <Card \r\n+                                              key={lesson.id} \r\n+                                              className={cn(\r\n+                                                \"cursor-pointer transition-all duration-200\",\r\n+                                                \"hover:shadow-md hover:translate-y-[-2px]\",\r\n+                                                \"hover:bg-accent/50 hover:border-primary/50\",\r\n+                                                \"active:translate-y-[0px]\",\r\n+                                                currentLessonId === lesson.id && \"border-primary bg-accent/50 shadow-md\",\r\n+                                                \"group\" // Enable group hover effects\r\n+                                              )}\r\n+                                              onClick={() => handleLessonSelect(lesson.id)}\r\n+                                            >\r\n+                                              <CardHeader className=\"p-4\">\r\n+                                                <div className=\"flex flex-col gap-2\">\r\n+                                                  <div className=\"flex items-center justify-between\">\r\n+                                                    <div className=\"flex items-center gap-2\">\r\n+                                                      <BookOpen className={cn(\r\n+                                                        \"h-4 w-4 text-primary\",\r\n+                                                        \"transition-transform duration-200\",\r\n+                                                        \"group-hover:scale-110\"\r\n+                                                      )} />\r\n+                                                      <span className=\"font-medium\">{lesson.title}</span>\r\n+                                                    </div>\r\n+                                                    <Button\r\n+                                                      variant=\"outline\"\r\n+                                                      size=\"sm\"\r\n+                                                      className={cn(\r\n+                                                        \"opacity-0 group-hover:opacity-100\",\r\n+                                                        \"transition-all duration-200\",\r\n+                                                        \"hover:bg-primary hover:text-primary-foreground\"\r\n+                                                      )}\r\n+                                                      disabled={!lesson.content || currentLessonId !== lesson.id}\r\n+                                                      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\r\n+                                                        e.stopPropagation();\r\n+                                                        window.location.href = `/teacher/lessons/${lesson.id}`;\r\n+                                                      }}\r\n+                                                    >\r\n+                                                      Start Lesson\r\n+                                                    </Button>\r\n+                                                  </div>\r\n+                                                  <div className=\"flex items-center gap-2\">\r\n+                                                    <Badge variant=\"outline\" className={cn(\r\n+                                                      \"bg-primary/5\",\r\n+                                                      \"transition-colors duration-200\",\r\n+                                                      \"group-hover:bg-primary/10\"\r\n+                                                    )}>\r\n+                                                      {lesson.questions?.length || 0} Questions\r\n+                                                    </Badge>\r\n+                                                    <Badge variant=\"outline\" className={cn(\r\n+                                                      \"bg-primary/5\",\r\n+                                                      \"transition-colors duration-200\",\r\n+                                                      \"group-hover:bg-primary/10\"\r\n+                                                    )}>\r\n+                                                      {lesson.activities?.length || 0} Activities\r\n+                                                    </Badge>\r\n+                                                  </div>\r\n+                                                </div>\r\n+                                              </CardHeader>\r\n+                                            </Card>\r\n+                                          ))}\r\n+                                      </div>\r\n+                                    </div>\r\n+                                  ))}\r\n+                              </div>\r\n+                            </CardContent>\r\n+                          </Card>\r\n+                        ))}\r\n+                      </div>\r\n+                    ) : (\r\n+                      <div className=\"text-center py-20\">\r\n+                        <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\r\n+                        <h3 className=\"text-lg font-medium\">Select a Grade</h3>\r\n+                        <p className=\"text-sm text-muted-foreground\">\r\n+                          Choose a grade from the left panel to start managing content\r\n+                        </p>\r\n+                      </div>\r\n+                    )}\r\n+                  </div>\r\n+                ) : (\r\n+                  // Edit Mode Content\r\n+                  <div className=\"space-y-4\">\r\n+                    {/* Lesson Title */}\r\n+                    <Card>\r\n+                      <CardHeader>\r\n+                        <div className=\"flex items-center justify-between mb-4\">\r\n+                          <h2 className=\"text-2xl font-bold\">Lesson Content</h2>\r\n+                                                    <Button\r\n+                                                      variant=\"outline\"\r\n+                                                      size=\"sm\"\r\n+                            onClick={() => setIsContentEditorOpen(true)}\r\n+                          >\r\n+                            <Pencil className=\"h-4 w-4 mr-2\" />\r\n+                            Edit Content\r\n+                          </Button>\r\n+                        </div>\r\n+                      </CardHeader>\r\n+                      <CardContent className=\"space-y-4\">\r\n+                        {/* Lesson Title */}\r\n+                        <div className=\"flex items-center justify-between\">\r\n+                          <div className=\"space-y-1\">\r\n+                            <Label>Lesson Title</Label>\r\n+                            <InlineEdit\r\n+                              value={lessonTitle}\r\n+                              onSave={async (newTitle) => {\r\n+                                setLessonTitle(newTitle);\r\n+                                await handleSaveLesson();\r\n+                              }}\r\n+                              isEditing={isEditingTitle}\r\n+                              setIsEditing={setIsEditingTitle}\r\n+                              placeholder=\"Enter lesson title\"\r\n+                              className=\"text-lg font-medium\"\r\n+                            />\r\n+                          </div>\r\n+                        </div>\r\n+\r\n+                        {/* Content Editor and Display */}\r\n+                        <div className=\"space-y-4\">\r\n+                          {isContentEditorOpen ? (\r\n+                            <div className=\"border rounded-lg p-4\">\r\n+                              <div className=\"mb-4\">\r\n+                                <Label>Content Heading</Label>\r\n+                                <InlineEdit\r\n+                                  value={contentHeading}\r\n+                                  onSave={(newHeading) => setContentHeading(newHeading)}\r\n+                                  isEditing={isEditingHeading}\r\n+                                  setIsEditing={setIsEditingHeading}\r\n+                                  placeholder=\"Add content heading\"\r\n+                                  className=\"text-base text-muted-foreground\"\r\n+                                />\r\n+                              </div>\r\n+                              <RichTextEditor\r\n+                                value={lessonContent}\r\n+                                onChange={setLessonContent}\r\n+                                onSave={async (content) => {\r\n+                                  await handleContentSave(content);\r\n+                                  setIsContentEditorOpen(false);\r\n+                                }}\r\n+                                placeholder=\"Add lesson content here...\"\r\n+                              />\r\n+                            </div>\r\n+                          ) : lessonContent ? (\r\n+                            <div className=\"prose prose-sm max-w-none\">\r\n+                              {contentHeading && (\r\n+                                <h3 className=\"text-lg font-semibold mb-2\">{contentHeading}</h3>\r\n+                              )}\r\n+                              <div dangerouslySetInnerHTML={{ __html: lessonContent }} />\r\n+                            </div>\r\n+                          ) : (\r\n+                            <div className=\"text-center py-8 text-muted-foreground\">\r\n+                              Click 'Edit Content' to add lesson content\r\n+                            </div>\r\n+                          )}\r\n+                        </div>\r\n+                      </CardContent>\r\n+                    </Card>\r\n+\r\n+                    {/* Tabs */}\r\n+                    <Tabs defaultValue=\"questions\" className=\"mt-6\">\r\n+                    <TabsList className=\"grid w-full grid-cols-2\">\r\n+                        <TabsTrigger value=\"questions\">\r\n+                          <MessageSquare className=\"h-4 w-4 mr-2\" />\r\n+                        Questions\r\n+                      </TabsTrigger>\r\n+                        <TabsTrigger value=\"activities\">\r\n+                          <ActivityIcon className=\"h-4 w-4 mr-2\" />\r\n+                        Activities\r\n+                      </TabsTrigger>\r\n+                    </TabsList>\r\n+\r\n+                      {/* Questions Tab */}\r\n+                      <TabsContent value=\"questions\" className=\"space-y-4\">\r\n+                      <CardHeader>\r\n+                          <CardDescription>Add and manage questions for this lesson</CardDescription>\r\n+                      </CardHeader>\r\n+                        {questions.map((question, index) => (\r\n+                          <Card key={index} className={cn(\r\n+                            \"relative border-l-4 transition-colors duration-200\",\r\n+                            expandedQuestion === index ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\r\n+                          )}>\r\n+                            <CardHeader className=\"pb-3\">\r\n+                              <div className=\"flex items-center justify-between gap-4\">\r\n+                                <div className=\"flex items-center gap-3 min-w-0 flex-1\">\r\n+                                  <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n+                                    <span className=\"px-2 py-1 bg-primary/10 rounded-md text-sm font-semibold text-primary whitespace-nowrap\">\r\n+                                      Q {index + 1}\r\n+                                    </span>\r\n+                                    <Badge variant=\"outline\" className=\"whitespace-nowrap\">\r\n+                                      {QUESTION_TYPES[question.type as keyof typeof QUESTION_TYPES]?.label || question.type}\r\n+                                    </Badge>\r\n+                                    {question.isDraft && (\r\n+                                      <Badge variant=\"secondary\" className=\"whitespace-nowrap\">Draft</Badge>\r\n+                                )}\r\n                                   </div>\r\n+                                      {expandedQuestion !== index && (\r\n+                                        <div className=\"text-sm text-muted-foreground truncate\">\r\n+                                          {question.title || 'No question text'} - {question.data?.content || 'No question texts'}\r\n+                                        </div>\r\n+                                      )}\r\n+                                    </div>\r\n+                                    <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n+                                      <Button\r\n+                                        variant=\"ghost\"\r\n+                                        size=\"sm\"\r\n+                                        onClick={() => handleQuestionExpand(index)}\r\n+                                      >\r\n+                                        {expandedQuestion === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n+                                      </Button>\r\n+                                      <Button\r\n+                                        variant=\"ghost\"\r\n+                                        size=\"sm\"\r\n+                                        onClick={() => handleRemoveQuestion(index)}\r\n+                                      >\r\n+                                        <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n+                                      </Button>\r\n+                                    </div>\r\n+                                  </div>\r\n+                                </CardHeader>\r\n+                                {expandedQuestion === index && (\r\n+                                  <CardContent>\r\n+                                    <QuestionForm\r\n+                                      key={index}\r\n+                                      question={{ \r\n+                                        ...question, \r\n+                                        lesson_id: currentLessonId || '',\r\n+                                        type: isValidQuestionType(question.type) ? question.type : 'speaking',\r\n+                                        data: {\r\n+                                          prompt: question.data?.prompt ?? '',\r\n+                                          teacher_script: question.data?.teacher_script ?? '',\r\n+                                          followup_prompt: question.data?.followup_prompt ?? [],\r\n+                                          sample_answer: question.data?.sample_answer ?? '',\r\n+                                          \r\n+                                        } \r\n+                                      }}\r\n+                                      index={index}\r\n+                                      onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\r\n+                                        await handleUpdateQuestion(index, {\r\n+                                          ...updatedQuestion,\r\n+                                          data: {\r\n+                                            prompt: updatedQuestion.data?.prompt ?? '',\r\n+                                            teacher_script: updatedQuestion.data?.teacher_script ?? '',\r\n+                                            followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\r\n+                                            sample_answer: updatedQuestion.data?.sample_answer ?? '',\r\n+                                            metadata: updatedQuestion.metadata ?? {},\r\n+                                            },\r\n+                                            correct_answer: updatedQuestion.correct_answer ?? '',\r\n+                                            content: updatedQuestion.content ?? ''  // Add default value\r\n+                                        });\r\n+                                      }}\r\n+                                      onRemove={handleRemoveQuestion}\r\n+                                      onAddExercisePrompt={handleAddExercisePrompt}\r\n+                                      onRemoveExercisePrompt={handleRemoveExercisePrompt}\r\n+                                      onExercisePromptChange={handleExercisePromptChange}\r\n+                                    /><Button \r\n+                                    size=\"sm\"\r\n+                                    variant=\"outline\"\r\n+                                    onClick={() => handleSaveQuestion(question, index)}\r\n+                                    className=\"ml-2\"\r\n+                                  >\r\n+                                    {questionSaveStatuses.find(s => s.id === question.id)?.status === 'saving' ? (\r\n+                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n+                                    ) : (\r\n+                                      <Save className=\"h-4 w-4 mr-2\" />\r\n+                                    )}\r\n+                                    Save Question\r\n+                                                    </Button>\r\n+                                    {/* Exercise Prompts with Save Buttons */}\r\n+                                    {question.exercisePrompts?.map((prompt, promptIndex) => (\r\n+                                      <div key={`${question.id}-prompt-${promptIndex}`} className=\"mt-4\"> {/* Updated key */}\r\n+                                        <div className=\"flex items-center justify-between mb-2\">\r\n+                                          <h4 className=\"text-sm font-medium\">Exercise Prompt {promptIndex + 1}</h4>\r\n+                                          <div className=\"flex items-center gap-2\">\r\n+                                            <TooltipProvider>\r\n+                                              <Tooltip>\r\n+                                                <TooltipTrigger asChild>\r\n+                                                  <Button\r\n+                                                    size=\"sm\"\r\n+                                                    variant=\"outline\"\r\n+                                                    onClick={() => handleSavePrompt(question.id, prompt, promptIndex)}\r\n+                                                    disabled={promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving'}\r\n+                                                  >\r\n+                                                    {promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving' ? (\r\n+                                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n+                                                    ) : (\r\n+                                                      <Save className=\"h-4 w-4 mr-2\" />\r\n+                                                    )}\r\n+                                                    Save Prompt\r\n+                                                  </Button>\r\n+                                                </TooltipTrigger>\r\n+                                                <TooltipContent>\r\n+                                                  {`Status: ${promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}`}\r\n+                                                </TooltipContent>\r\n+                                              </Tooltip>\r\n+                                            </TooltipProvider>\r\n+                                            <Badge variant={\r\n+                                              promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saved'\r\n+                                                ? 'secondary'\r\n+                                                : promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'error'\r\n+                                                ? 'destructive'\r\n+                                                : 'default'\r\n+                                            }>\r\n+                                              {promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}\r\n+                                            </Badge>\r\n+                                                  </div>\r\n+                                        </div>\r\n+                                        <ExercisePromptCard\r\n+                                          key={prompt.id} // Add a unique key here\r\n+                                          prompt={prompt}\r\n+                                          promptIndex={promptIndex}\r\n+                                          onRemove={() => handleRemoveExercisePrompt(index, promptIndex)}\r\n+                                          onUpdate={(updatedPrompt: ExercisePrompt) => {\r\n+                                            // Prevent duplicate updates\r\n+                                            if (updatedPrompt.id === prompt.id) {\r\n+                                              handleExercisePromptChange(index, promptIndex, updatedPrompt);\r\n+                                            }\r\n+                                          }}\r\n+                                        />\r\n+                                      </div>\r\n+                                    ))}\r\n+                                  </CardContent>\r\n+                                )}\r\n+                              </Card>\r\n+                            ))}\r\n+\r\n+                            {/* Add Question Button */}\r\n+                            <div className=\"flex items-center justify-between\">\r\n+                              <QuestionTypeSelect \r\n+                                value={selectedQuestionType} \r\n+                                onChange={handleQuestionTypeChange}\r\n+                              />\r\n+                                        <Button\r\n+                                          onClick={handleAddQuestion}\r\n+                                          disabled={!selectedQuestionType}\r\n+                                        >\r\n+                                <Plus className=\"h-4 w-4 mr-2\" />\r\n+                                          Add Question\r\n+                                        </Button>\r\n+                                      </div>\r\n+                      </TabsContent>\r\n+\r\n+                      {/* Activities Tab */}\r\n+                      <TabsContent value=\"activities\" className=\"space-y-4\">\r\n+                      <CardHeader>\r\n+                          <CardDescription>Add and manage activities for this lesson</CardDescription>\r\n+                      </CardHeader>\r\n+                        {activities.map((activity, index) => (\r\n+                          <Card key={index}>\r\n+                            <CardHeader className=\"pb-3\">\r\n+                              <div className=\"flex items-center justify-between\">\r\n+                                  <div className=\"flex items-center gap-2\">\r\n+                                  <Badge variant=\"outline\">Activity {index + 1}</Badge>\r\n+                                  </div>\r\n+                                <div className=\"flex items-center gap-2\">\r\n                                   <Button\r\n                                     variant=\"ghost\"\r\n                                     size=\"sm\"\r\n-                                    onClick={async () => {\r\n-                                      const { canDelete, message } = await checkDeletability('subtopic', subtopic.id);\r\n-                                      if (!canDelete) {\r\n-                                        toast.error(message);\r\n-                                        return;\r\n-                                      }\r\n-                                      setItemToDelete({\r\n-                                        id: subtopic.id,\r\n-                                        type: 'subtopic',\r\n-                                        title: subtopic.title\r\n-                                      });\r\n-                                      setDeleteDialogOpen(true);\r\n-                                    }}\r\n+                                    onClick={() => handleActivityExpand(index)}\r\n                                   >\r\n-                                    <Trash className=\"h-4 w-4\" />\r\n+                                    {expandedActivity === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n                                   </Button>\r\n+                                  <Button\r\n+                                    variant=\"ghost\"\r\n+                                    size=\"sm\"\r\n+                                    onClick={() => handleRemoveActivity(index)}\r\n+                                  >\r\n+                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n+                                  </Button>\r\n                                 </div>\r\n+                              </div>\r\n+                            </CardHeader>\r\n+                            {expandedActivity === index && (\r\n+                              <CardContent>\r\n+                                <div className=\"space-y-4\">\r\n+                                  <div className=\"space-y-2\">\r\n+                                    <Label>Instructions</Label>\r\n+                                    <Textarea\r\n+                                      value={activity.instructions}\r\n+                                      onChange={(e) => handleUpdateActivity(index, {\r\n+                                        ...activity,\r\n+                                        instructions: e.target.value\r\n+                                      })}\r\n+                                      placeholder=\"Enter activity instructions\"\r\n+                                    />\r\n+                                  </div>\r\n+                                    \r\n+                                    {/* Media Section */}\r\n+                                    <div className=\"space-y-2\">\r\n+                                      <Label>Media</Label>\r\n+                                      {activity.media?.map((media, mediaIndex) => (\r\n+                                        <div key={mediaIndex} className=\"flex items-center gap-2\">\r\n+                                          <Input\r\n+                                            value={media.url}\r\n+                                            onChange={(e) => {\r\n+                                              const updatedMedia = [...(activity.media || [])];\r\n+                                              updatedMedia[mediaIndex] = {\r\n+                                                type: media.type,\r\n+                                                url: e.target.value\r\n+                                              };\r\n+                                              handleUpdateActivity(index, {\r\n+                                                ...activity,\r\n+                                                media: updatedMedia\r\n+                                              });\r\n+                                            }}\r\n+                                            placeholder=\"Media URL\"\r\n+                                          />\r\n+                                          <Select\r\n+                                            value={media.type}\r\n+                                            onValueChange={(value) => {\r\n+                                              const updatedMedia = [...(activity.media || [])];\r\n+                                              updatedMedia[mediaIndex] = {\r\n+                                                type: value as 'image' | 'gif' | 'video',\r\n+                                                url: media.url\r\n+                                              };\r\n+                                              handleUpdateActivity(index, {\r\n+                                                ...activity,\r\n+                                                media: updatedMedia\r\n+                                              });\r\n+                                            }}\r\n+                                          >\r\n+                                            <SelectTrigger className=\"w-[120px]\">\r\n+                                              <SelectValue placeholder=\"Type\" />\r\n+                                            </SelectTrigger>\r\n+                                            <SelectContent>\r\n+                                              <SelectItem value=\"image\">Image</SelectItem>\r\n+                                              <SelectItem value=\"gif\">GIF</SelectItem>\r\n+                                              <SelectItem value=\"video\">Video</SelectItem>\r\n+                                            </SelectContent>\r\n+                                          </Select>\r\n+                                <Button\r\n+                                            variant=\"ghost\"\r\n+                                            size=\"sm\"\r\n+                                  onClick={() => {\r\n+                                              const updatedMedia = (activity.media || []).filter((_, i) => i !== mediaIndex);\r\n+                                              handleUpdateActivity(index, {\r\n+                                                ...activity,\r\n+                                                media: updatedMedia\r\n+                                          });\r\n+                                          }}\r\n+                                  >\r\n+                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n+                                  </Button>\r\n+                                </div>\r\n+                                        ))}\r\n+                                  <Button\r\n+                                    variant=\"outline\"\r\n+                                    size=\"sm\"\r\n+                                            onClick={() => {\r\n+                                              handleUpdateActivity(index, {\r\n+                                                ...activity,\r\n+                                                media: [\r\n+                                                  ...(activity.media || [])  ,\r\n+                                                  { url: '', type: 'image' }\r\n+                                                ]\r\n+                                              });\r\n+                                            }}\r\n+                                  >\r\n+                                    <Plus className=\"h-4 w-4 mr-2\" />\r\n+                                            Add Media\r\n+                                  </Button>\r\n+                                </div>\r\n+                                      </div>\r\n+                                    </CardContent>\r\n+                                  )}\r\n+                                </Card>\r\n+                              ))}\r\n \r\n-                                {/* Lessons */}\r\n-                                <div className=\"pl-6 mt-2 space-y-2\">\r\n-                                  {lessons\r\n-                                    .filter(lesson => lesson.subtopic_id === subtopic.id)\r\n-                                    .map((lesson) => (\r\n-                                      <Card \r\n-                                        key={lesson.id} \r\n-                                        className=\"hover:bg-accent/5 transition-colors cursor-pointer\"\r\n-                                        onClick={() => handleStartLesson(lesson.id)}\r\n-                                      >\r\n-                                        <CardHeader className=\"py-2\">\r\n-                                          <div className=\"flex items-center justify-between\">\r\n-                                            <div>\r\n-                                              <h5 className=\"text-sm font-medium\">{lesson.title}</h5>\r\n-                                              <div className=\"flex items-center gap-2 mt-1\">\r\n-                                                <Badge variant=\"outline\">\r\n-                                                  {lesson.duration || 0} mins\r\n-                                                </Badge>\r\n-                                                <Badge variant=\"outline\">\r\n-                                                  {lesson.questions?.length || 0} Questions\r\n-                                                </Badge>\r\n-                                              </div>\r\n-                                            </div>\r\n-                                            <Button\r\n-                                              variant=\"ghost\"\r\n-                                              size=\"sm\"\r\n-                                              onClick={async (e: React.MouseEvent<HTMLButtonElement>) => {\r\n-                                                e.stopPropagation();\r\n-                                                const { canDelete, message } = await checkDeletability('lesson', lesson.id);\r\n-                                                if (!canDelete) {\r\n-                                                  toast.error(message);\r\n-                                                  return;\r\n-                                                }\r\n-                                                setItemToDelete({\r\n-                                                  id: lesson.id,\r\n-                                                  type: 'lesson',\r\n-                                                  title: lesson.title\r\n-                                                });\r\n-                                                setDeleteDialogOpen(true);\r\n-                                              }}\r\n-                                            >\r\n-                                              <Trash className=\"h-4 w-4\" />\r\n-                                            </Button>\r\n-                                          </div>\r\n-                                        </CardHeader>\r\n-                                      </Card>\r\n-                                    ))}\r\n-                                </div>\r\n-                              </CardHeader>\r\n-                            </Card>\r\n-                          ))}\r\n-                      </div>\r\n-                    </CardHeader>\r\n-                  </Card>\r\n-                ))}\r\n-              </CardContent>\r\n-            </Card>\r\n-          ) : (\r\n-            // Original content for non-view mode\r\n-            <>\r\n-              {/* Existing Topic, Subtopic, and Lesson Selection UI */}\r\n-              {/* Topic Selection */}\r\n-              {selectedGradeId && (\r\n-                <div className=\"space-y-2\">\r\n-                  <div className=\"flex items-center justify-between\">\r\n-                  <Label htmlFor=\"topic-select\">Topic</Label>\r\n-                  </div>\r\n-                  <Select \r\n-                        value={selectedTopicId || ''} \r\n-                        onValueChange={handleTopicSelect}\r\n+                              {/* Add Activity Button */}\r\n+                              <Button\r\n+                                onClick={handleAddActivity}\r\n+                                className=\"w-full\"\r\n+                              >\r\n+                                <Plus className=\"h-4 w-4 mr-2\" />\r\n+                                Add Activity\r\n+                              </Button>\r\n+                          </TabsContent>\r\n+                        </Tabs>\r\n+                        </div>\r\n+                )}\r\n+\r\n+                    {/* Floating Save Button */}\r\n+                    <div className=\"fixed bottom-8 right-8 flex items-center gap-4\">\r\n+                      {saveProgress !== 'idle' && (\r\n+                        <div className={cn(\r\n+                          \"flex items-center gap-2 rounded-lg px-4 py-2 shadow-lg\",\r\n+                          {\r\n+                            \"bg-background border\": saveProgress === 'saving',\r\n+                            \"bg-green-500 text-white\": saveProgress === 'saved',\r\n+                            \"bg-destructive text-destructive-foreground\": saveProgress === 'error'\r\n+                          }\r\n+                        )}>\r\n+                          {saveProgress === 'saving' && (\r\n+                            <>\r\n+                              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n+                              <span className=\"text-sm\">Saving changes...</span>\r\n+                            </>\r\n+                          )}\r\n+                          {saveProgress === 'saved' && (\r\n+                            <>\r\n+                              <Check className=\"h-4 w-4\" />\r\n+                              <span className=\"text-sm\">Changes saved</span>\r\n+                            </>\r\n+                          )}\r\n+                          {saveProgress === 'error' && (\r\n+                            <>\r\n+                              <X className=\"h-4 w-4\" />\r\n+                              <span className=\"text-sm\">Error saving changes</span>\r\n+                            </>\r\n+                          )}\r\n+                        </div>\r\n+                      )}\r\n+                      <Button\r\n+                        onClick={handleSaveLesson}\r\n+                        disabled={saveProgress === 'saving'}\r\n+                        className=\"shadow-lg\"\r\n+                      >\r\n+                        {saveProgress === 'saving' ? (\r\n+                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\r\n+                        ) : (\r\n+                          <Save className=\"h-4 w-4 mr-2\" />\r\n+                        )}\r\n+                        {saveProgress === 'saving' ? 'Saving...' : 'Save Lesson'}\r\n+                      </Button>\r\n+                    </div>\r\n+                  </>\r\n+            )}\r\n+    </div>\r\n+    \r\n+\r\n+      {/* Floating Save Button */}\r\n+      {selectedSubtopicId && currentLessonId && (\r\n+          <div className=\"fixed bottom-4 right-4 flex flex-col gap-2\">\r\n+            <TooltipProvider>\r\n+              <Tooltip>\r\n+                <TooltipTrigger asChild>\r\n+                  <Button\r\n+                    size=\"icon\"\r\n+                    className=\"rounded-full h-12 w-12 shadow-lg\"\r\n+                    onClick={handleSaveLesson}\r\n+                    disabled={!selectedSubtopicId || !lessonTitle || questions.length === 0}\r\n                   >\r\n-                    <SelectTrigger id=\"topic-select\" className=\"w-full\">\r\n-                      <SelectValue placeholder=\"Select Topic\" />\r\n-                    </SelectTrigger>\r\n-                    <SelectContent>\r\n-                          {topics.map((topic: Topic) => (\r\n-                            <SelectItem \r\n-                              key={`topic-${topic.id || 'new'}`} \r\n-                              value={topic.id || ''}\r\n-                            >\r\n-                            <div className=\"flex items-center gap-2\">\r\n-                            <Layers className=\"h-4 w-4 text-primary\" />\r\n-                              {topic.title}\r\n-                            </div>\r\n-                          </SelectItem>\r\n-                        ))}\r\n-                    </SelectContent>\r\n-                  </Select>\r\n-                  <Button \r\n-                    variant=\"outline\" \r\n-                    size=\"sm\" \r\n-                    className=\"w-full gap-2\"\r\n-                    onClick={() => setModalState({ ...modalState, showAddTopic: true })}\r\n-                  >\r\n-                    <Plus className=\"h-4 w-4\" />\r\n-                    Add New Topic\r\n+                    <Save className=\"h-6 w-6\" />\r\n                   </Button>\r\n+                </TooltipTrigger>\r\n+                <TooltipContent>\r\n+                  <p>Save Lesson (Ctrl+S)</p>\r\n+                </TooltipContent>\r\n+              </Tooltip>\r\n+            </TooltipProvider>\r\n+          </div>\r\n+        )}\r\n+        <SaveFeedback />\r\n+\r\n+        {/* Add Grade Modal - do not delete */}\r\n+        {/* {modalState.showAddGrade && (\r\n+          <Dialog \r\n+            open={modalState.showAddGrade} \r\n+            onOpenChange={(open) => handleModalStateChange('showAddGrade', open)}\r\n+          >\r\n+            <DialogContent \r\n+              className=\"sm:max-w-[425px]\"\r\n+              onEscapeKeyDown={cleanupModalState}\r\n+              onPointerDownOutside={cleanupModalState}\r\n+            >\r\n+              <DialogHeader>\r\n+                <DialogTitle>Add New Grade</DialogTitle>\r\n+                <DialogDescription>Enter the details for the new grade.</DialogDescription>\r\n+              </DialogHeader>\r\n+              <div className=\"space-y-4 py-4\">\r\n+                <div className=\"space-y-2\">\r\n+                  <Label htmlFor=\"grade-name\">Grade Name</Label>\r\n+                  <Input\r\n+                    id=\"grade-name\"\r\n+                    value={newItemData.name}\r\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n+                    placeholder=\"Enter grade name\"\r\n+                  />\r\n+      </div>\r\n+              </div>\r\n+              <DialogFooter>\r\n+                <Button variant=\"outline\" onClick={() => {\r\n+                  setModalState({ ...modalState, showAddGrade: false });\r\n+                  setNewItemData({ name: '', description: '' });\r\n+                }}>\r\n+                  Cancel\r\n+                </Button>\r\n+                <Button onClick={handleCreateGrade} disabled={!newItemData.name}>Create Grade</Button>\r\n+              </DialogFooter>\r\n+            </DialogContent>\r\n+          </Dialog>\r\n+        )} */}\r\n+\r\n+        {/* Add Topic Modal */}\r\n+        {modalState.showAddTopic && (\r\n+          <Dialog \r\n+            open={modalState.showAddTopic} \r\n+            onOpenChange={(open) => handleModalStateChange('showAddTopic', open)}\r\n+          >\r\n+            <DialogContent \r\n+              className=\"sm:max-w-[425px]\"\r\n+              onEscapeKeyDown={cleanupModalState}\r\n+              onPointerDownOutside={cleanupModalState}\r\n+            >\r\n+              <DialogHeader>\r\n+                <DialogTitle>Add New Topic</DialogTitle>\r\n+                <DialogDescription>Enter the details for the new topic.</DialogDescription>\r\n+              </DialogHeader>\r\n+              <div className=\"space-y-4 py-4\">\r\n+                <div className=\"space-y-2\">\r\n+                  <Label htmlFor=\"topic-name\">Topic Name</Label>\r\n+                  <Input\r\n+                    id=\"topic-name\"\r\n+                    value={newItemData.name}\r\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n+                    placeholder=\"Enter topic name\"\r\n+                  />\r\n                 </div>\r\n-              )}\r\n+              </div>\r\n+              <DialogFooter>\r\n+                <Button variant=\"outline\" onClick={() => {\r\n+                  setModalState({ ...modalState, showAddTopic: false });\r\n+                  setNewItemData({ name: '', description: '' });\r\n+                }}>\r\n+                  Cancel\r\n+                </Button>\r\n+                <Button onClick={handleCreateTopic} disabled={!newItemData.name}>Create Topic</Button>\r\n+              </DialogFooter>\r\n+            </DialogContent>\r\n+          </Dialog>\r\n+        )}\r\n \r\n-              {/* Subtopic Selection */}\r\n-              {selectedTopicId && (\r\n+        {/* Add Subtopic Modal */}\r\n+        {modalState.showAddSubtopic && (\r\n+          <Dialog \r\n+            open={modalState.showAddSubtopic} \r\n+            onOpenChange={(open) => handleModalStateChange('showAddSubtopic', open)}\r\n+          >\r\n+            <DialogContent \r\n+              className=\"sm:max-w-[425px]\"\r\n+              onEscapeKeyDown={cleanupModalState}\r\n+              onPointerDownOutside={cleanupModalState}\r\n+            >\r\n+              <DialogHeader>\r\n+                <DialogTitle>Add New Subtopic</DialogTitle>\r\n+                <DialogDescription>Enter the details for the new subtopic.</DialogDescription>\r\n+              </DialogHeader>\r\n+              <div className=\"space-y-4 py-4\">\r\n                 <div className=\"space-y-2\">\r\n-                  <div className=\"flex items-center justify-between\">\r\n-                  <Label htmlFor=\"subtopic-select\">Subtopic</Label>\r\n-                  </div>\r\n-                  <Select \r\n-                        value={selectedSubtopicId || ''} \r\n-                        onValueChange={handleSubtopicSelect}\r\n-                  >\r\n-                    <SelectTrigger id=\"subtopic-select\" className=\"w-full\">\r\n-                      <SelectValue placeholder=\"Select Subtopic\" />\r\n-                    </SelectTrigger>\r\n-                    <SelectContent>\r\n-                          {subtopics\r\n-                            .filter(subtopic => subtopic.id)\r\n-                            .map((subtopic, index) => (\r\n-                              <SelectItem \r\n-                                key={subtopic.id || `subtopic-${index}`}\r\n-                                value={subtopic.id || ''}\r\n-                              >\r\n-                                {subtopic.title || 'Untitled Subtopic'}\r\n-                              </SelectItem>\r\n-                            ))}\r\n-                    </SelectContent>\r\n-                  </Select>\r\n-                  {!isViewMode && (\r\n-                    <Button \r\n-                      variant=\"outline\" \r\n-                      size=\"sm\" \r\n-                      className=\"w-full gap-2\"\r\n-                      onClick={() => setModalState({ ...modalState, showAddSubtopic: true })}\r\n-                    >\r\n-                      <Plus className=\"h-4 w-4\" />\r\n-                      Add New Subtopic\r\n-                    </Button>\r\n-                  )}\r\n+                  <Label htmlFor=\"subtopic-name\">Subtopic Name</Label>\r\n+                  <Input\r\n+                    id=\"subtopic-name\"\r\n+                    value={newItemData.name}\r\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n+                    placeholder=\"Enter subtopic name\"\r\n+                  />\r\n                 </div>\r\n-              )}\r\n+              </div>\r\n+              <DialogFooter>\r\n+                <Button variant=\"outline\" onClick={() => {\r\n+                  setModalState({ ...modalState, showAddSubtopic: false });\r\n+                  setNewItemData({ name: '', description: '' });\r\n+                }}>\r\n+                  Cancel\r\n+                </Button>\r\n+                <Button onClick={() => handleCreateSubtopic({ title: newItemData.name })} disabled={!newItemData.name}>Create Subtopic</Button>\r\n+              </DialogFooter>\r\n+            </DialogContent>\r\n+          </Dialog>\r\n+        )}\r\n \r\n-              {/* Lesson Selection */}\r\n-              {selectedSubtopicId && (\r\n+        {/* Add Lesson Modal */}\r\n+        {modalState.showAddLesson && (\r\n+          <Dialog \r\n+            open={modalState.showAddLesson} \r\n+            onOpenChange={(open) => handleModalStateChange('showAddLesson', open)}\r\n+          >\r\n+            <DialogContent \r\n+              className=\"sm:max-w-[425px]\"\r\n+              onEscapeKeyDown={cleanupModalState}\r\n+              onPointerDownOutside={cleanupModalState}\r\n+            >\r\n+              <DialogHeader>\r\n+                <DialogTitle>Add New Lesson</DialogTitle>\r\n+                <DialogDescription>Enter the details for the new lesson.</DialogDescription>\r\n+              </DialogHeader>\r\n+              <div className=\"space-y-4 py-4\">\r\n                 <div className=\"space-y-2\">\r\n-                  <div className=\"flex items-center justify-between\">\r\n-                    <Label htmlFor=\"lesson-select\">Lesson</Label>\r\n-                  </div>\r\n-                    <Select \r\n-                      value={currentLessonId || ''} \r\n-                      onValueChange={handleLessonSelect}\r\n-                      onOpenChange={(open) => {\r\n-                        setIsDropdownOpen(open);\r\n-                        if (open) {\r\n-                          setIsSidebarCollapsed(false);\r\n-                          setIsSidebarLocked(true);\r\n-                        } else {\r\n-                          // Small delay before unlocking to prevent immediate collapse\r\n-                          setTimeout(() => {\r\n-                            setIsSidebarLocked(false);\r\n-                          }, 100);\r\n-                        }\r\n-                      }}\r\n-                    >\r\n-                      <SelectTrigger \r\n-                        id=\"lesson-select\" \r\n-                        className=\"w-full\"\r\n-                        onClick={(e) => {\r\n-                          e.stopPropagation();\r\n-                          setIsSidebarCollapsed(false);\r\n-                          setIsSidebarLocked(true);\r\n-                        }}\r\n-                      >\r\n-                        <SelectValue placeholder=\"Select Lesson\" />\r\n-                      </SelectTrigger>\r\n-                      <SelectContent>\r\n-                        {lessons\r\n-                          .filter((lesson): lesson is Lesson => lesson !== undefined && lesson !== null)\r\n-                          .map((lesson: Lesson) => (\r\n-                            <SelectItem \r\n-                              key={`lesson-${lesson.id || 'new'}`} \r\n-                              value={lesson.id || ''}\r\n-                            >\r\n-                              <div className=\"flex items-center gap-2\">\r\n-                                <BookOpen className=\"h-4 w-4 text-primary\" />\r\n-                                {lesson.title || 'Untitled Lesson'}\r\n-                              </div>\r\n-                            </SelectItem>\r\n-                          ))}\r\n-                      </SelectContent>\r\n-                    </Select>\r\n-                <Button \r\n-                        variant=\"outline\" \r\n-                        size=\"sm\" \r\n-                        className=\"w-full gap-2\"\r\n-                    onClick={() => setModalState({ ...modalState, showAddLesson: true })}\r\n-                      >\r\n-                        <Plus className=\"h-4 w-4\" />\r\n-                        Add New Lesson\r\n+                  <Label htmlFor=\"lesson-name\">Lesson Title</Label>\r\n+                  <Input\r\n+                    id=\"lesson-name\"\r\n+                    value={newItemData.name}\r\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n+                    placeholder=\"Enter lesson title\"\r\n+                  />\r\n+                </div>\r\n+              </div>\r\n+              <DialogFooter>\r\n+                <Button variant=\"outline\" onClick={() => {\r\n+                  setModalState({ ...modalState, showAddLesson: false });\r\n+                  setNewItemData({ name: '', description: '' });\r\n+                }}>\r\n+                  Cancel\r\n                 </Button>\r\n-                  </div>\r\n-                </div>\r\n-              )}\r\n-            </>\r\n-          )}\r\n-        </div>\r\n+                <Button onClick={handleCreateLesson} disabled={!newItemData.name}>Create Lesson</Button>\r\n+              </DialogFooter>\r\n+            </DialogContent>\r\n+          </Dialog>\r\n+        )}\r\n       </div>\r\n-    </div>\r\n+      <Toaster />\r\n+      </div>\r\n   );\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1740044354727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -349,8 +349,9 @@\n     title: '',\r\n     message: '',\r\n     onConfirm: () => {}\r\n   });\r\n+  const [lessonDialogOpen, setLessonDialogOpen] = useState(false);\r\n \r\n   const { \r\n     selectedGrade,\r\n     setSelectedGrade,\r\n"
                },
                {
                    "date": 1740044395038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,3387 +1,3386 @@\n-\"use client\";\r\n-\r\n-import { useState, useCallback, useEffect, useRef } from 'react';\r\n-import { toast } from 'sonner';\r\n-import { Toaster } from 'sonner';\r\n-import Link from 'next/link';\r\n-import {  Activity as ActivityIcon,  ArrowLeft,  BookOpen,  ChevronDown,  ChevronRight,  Check,  Edit,  Eye,  EyeOff,  HelpCircle,  Layers,  List,  MessageSquare,  Plus,  Save,  Trash as Trash2, X, Pencil, Lock, Unlock, RefreshCw, Clock, Bell, Moon, GraduationCap, MoreHorizontal, Loader2 } from 'lucide-react';\r\n-import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\n-import { Badge } from '@/components/ui/badge';\r\n-import { Button } from '@/components/ui/button';\r\n-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\n-import { Input } from '@/components/ui/input';\r\n-import { Label } from '@/components/ui/label';\r\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\n-import { Textarea } from '@/components/ui/textarea';\r\n-import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\r\n-import { cn } from '@/lib/utils';\r\n-import { API_BASE_URL, QUESTION_TYPES, isQuestionType } from './constants';\r\n-import { ExercisePrompt, Lesson } from './types';\r\n-import { QuestionFormProps, ExercisePromptCardProps, Activity, Grade, Topic, Subtopic as SubTopic } from './types';\r\n-import { QuestionForm } from './components/question-form';\r\n-import { ExercisePromptCard } from './components/exercise-prompt-card';\r\n-import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\r\n-import { supabase } from '@/lib/supabase';\r\n-import { useContentStore } from '@/lib/content/store';\r\n-import { contentService } from '@/lib/content/ContentService';\r\n-import { MediaPreview } from '@/components/ui/media-preview';\r\n-import { QuestionTypeSelect } from './components/question-type-select';\r\n-import { RichTextEditor } from '@/components/ui/rich-text-editor';\r\n-import {\r\n-  AlertDialog,\r\n-  AlertDialogAction,\r\n-  AlertDialogCancel,\r\n-  AlertDialogContent,\r\n-  AlertDialogDescription,\r\n-  AlertDialogFooter,\r\n-  AlertDialogHeader,\r\n-  AlertDialogTitle,\r\n-  AlertDialogTrigger,\r\n-} from \"@/components/ui/alert-dialog\";\r\n-import { debounce, isNull } from 'lodash';\r\n-import { PostgrestError } from '@supabase/supabase-js';\r\n-import { Question as ContentQuestion } from './types';  // Import the specific type\r\n-import { Trash } from \"lucide-react\";\r\n-import { AnimatePresence, motion } from 'framer-motion';\r\n-import { useQueryClient } from 'react-query';\r\n-\r\n-\r\n-// Update the API endpoint to match your backend route\r\n-const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\r\n-\r\n-interface QuestionTypeSelectProps {\r\n-  value: string;\r\n-  onValueChange: (value: string) => void;\r\n-}\r\n-\r\n-// Add metadata type\r\n-interface LessonMetadata {\r\n-  lastEdited?: string;\r\n-  version?: number;\r\n-  tags?: string[];\r\n-  status?: 'draft' | 'published';\r\n-  authorId?: string;\r\n-  duration?: number;\r\n-  transcript?: string;\r\n-}\r\n-\r\n-type ContentType = 'html' | 'markdown' | 'rich-text' | 'text' | 'json';\r\n-\r\n-interface LessonContent {\r\n-  id: string;\r\n-  lesson_id: string;\r\n-  content: any[];\r\n-  metadata: {\r\n-    lastEdited?: string;\r\n-    version?: number;\r\n-    status?: 'draft' | 'published';\r\n-    authorId?: string;\r\n-  };\r\n-  content_type: string;\r\n-  order_index: number;\r\n-  updated_at: string;\r\n-  user_id: string;\r\n-}\r\n-\r\n-interface InlineEditProps {\r\n-  value: string;\r\n-  onSave: (value: string) => void;\r\n-  isEditing: boolean;\r\n-  setIsEditing: (value: boolean) => void;\r\n-  placeholder?: string;\r\n-  className?: string;\r\n-}\r\n-\r\n-// Add validation interface\r\n-interface QuestionValidation {\r\n-  isValid: boolean;\r\n-  message: string;\r\n-}\r\n-\r\n-// Add this type validation helper\r\n-const getQuestionTypeFields = (type: string) => {\r\n-  switch (type) {\r\n-    case 'multipleChoice':\r\n-      return {\r\n-        required: ['prompt', 'options', 'correctAnswer'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          options: [],\r\n-          correct_answer: '',\r\n-          teacher_script: '',\r\n-          explanation: ''\r\n-        }\r\n-      };\r\n-    case 'fillInBlank':\r\n-      return {\r\n-        required: ['prompt', 'blanks'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          blanks: [],\r\n-          teacher_script: '',\r\n-          explanation: ''\r\n-        }\r\n-      };\r\n-    case 'trueFalse':\r\n-      return {\r\n-        required: ['prompt', 'correctAnswer'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          correct_answer: null,\r\n-          teacher_script: '',\r\n-          explanation: ''\r\n-        }\r\n-      };\r\n-    case 'matching':\r\n-      return {\r\n-        required: ['prompt', 'pairs'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          pairs: [],\r\n-          teacher_script: '',\r\n-          explanation: ''\r\n-        }\r\n-      };\r\n-    case 'ordering':\r\n-      return {\r\n-        required: ['prompt', 'items'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          items: [],\r\n-          correctOrder: [],\r\n-          teacher_script: '',\r\n-          explanation: ''\r\n-        }\r\n-      };\r\n-    case 'shortAnswer':\r\n-      return {\r\n-        required: ['prompt', 'sampleAnswer'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          sampleAnswer: '',\r\n-          teacher_script: '',\r\n-          explanation: '',\r\n-          keywords: []\r\n-        }\r\n-      };\r\n-    case 'speaking':\r\n-      return {\r\n-        required: ['prompt', 'sampleAnswer'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          sampleAnswer: '',\r\n-          teacher_script: '',\r\n-          audioPrompt: '',\r\n-          pronunciation: ''\r\n-        }\r\n-      };\r\n-    case 'listening':\r\n-      return {\r\n-        required: ['prompt', 'audioContent'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          audioContent: '',\r\n-          transcript: '',\r\n-          teacherScript: '',\r\n-          comprehensionQuestions: []\r\n-        }\r\n-      };\r\n-    case 'listenAndRepeat':\r\n-      return {\r\n-        required: ['prompt', 'audioContent'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          audioContent: '',\r\n-          targetPhrase: '',\r\n-          teacher_script: '',\r\n-          pronunciation: ''\r\n-        }\r\n-      };\r\n-    default:\r\n-      return {\r\n-        required: ['prompt'],\r\n-        fields: {\r\n-          prompt: '',\r\n-          teacher_script: ''\r\n-        }\r\n-      };\r\n-  }\r\n-}\r\n-\r\n-interface SaveStatus {\r\n-  id: string;\r\n-  status: 'draft' | 'saved' | 'saving' | 'error';\r\n-  lastSaved?: string;\r\n-}\r\n-\r\n-interface Question {\r\n-  id: string;\r\n-  type: string;\r\n-  lesson_id: string;\r\n-  title: string;\r\n-  content: string;\r\n-  metadata: Record<string, any>;\r\n-  data: Record<string, any>; // This allows dynamic field access\r\n-  correct_answer: string;\r\n-  exercisePrompts: ExercisePrompt[];\r\n-  isDraft?: boolean;\r\n-}\r\n-\r\n-// Add at the top of the file with other type definitions\r\n-type QuestionType = keyof typeof QUESTION_TYPES;\r\n-\r\n-// Add this type guard function\r\n-const isValidQuestionType = (type: string): type is QuestionType => {\r\n-  return type in QUESTION_TYPES;\r\n-};\r\n-\r\n-// Update handleAddQuestion\r\n-\r\n-\r\n-// Update validateQuestion\r\n-const validateQuestion = (question: Question): QuestionValidation => {\r\n-  const { required } = getQuestionTypeFields(question.type);\r\n-  const missingFields = required.filter(field => {\r\n-    const value = question.data?.[field];\r\n-    return !value || \r\n-      (Array.isArray(value) && value.length === 0) || \r\n-      (typeof value === 'string' && !value.trim());\r\n-  });\r\n-\r\n-  if (missingFields.length > 0) {\r\n-    return {\r\n-      isValid: false,\r\n-      message: `Missing required fields: ${missingFields.join(', ')}`\r\n-    };\r\n-  }\r\n-\r\n-  return { isValid: true, message: '' };\r\n-};\r\n-\r\n-// Add proper type for question data\r\n-interface QuestionData {\r\n-  id?: string;\r\n-  content?: string;\r\n-  type?: string;\r\n-  data?: {\r\n-    prompt?: string;\r\n-    teacher_script?: string;\r\n-    followup_prompt?: string[];\r\n-    sample_answer?: string;\r\n-    answer?: string;\r\n-  } | null;\r\n-  prompt: string;\r\n-  teacher_script: string;\r\n-  followup_prompt: string[];\r\n-  answer?: string;\r\n-  correct_answer?: string;\r\n-}\r\n-\r\n-// In your component where you handle questions\r\n-const handleQuestionData = (question: QuestionData) => {\r\n-  return {\r\n-    ...question,\r\n-    data: {\r\n-      prompt: question?.data?.prompt || '',\r\n-      teacher_script: question?.data?.teacher_script || '',\r\n-      followup_prompt: question?.data?.followup_prompt || [],\r\n-      sample_answer: question?.data?.sample_answer || undefined,  // Convert null to undefined\r\n-      answer: question?.data?.answer || undefined  // Convert null to undefined\r\n-    } as const,\r\n-    sampleAnswer: question?.correct_answer || ''\r\n-  };\r\n-};\r\n-\r\n-export default function LessonManagementPage() {\r\n-  // State declarations\r\n-  \r\n-  const [selectedGradeId, setSelectedGradeId] = useState<string | null>(null);\r\n-  const [selectedTopicId, setSelectedTopicId] = useState<string | null>(null);\r\n-  const [selectedSubtopicId, setSelectedSubtopicId] = useState<string | null>(null);\r\n-  const [lessonTitle, setLessonTitle] = useState<string>('');\r\n-  const [currentLessonId, setCurrentLessonId] = useState<string | null>(null);\r\n-  const [questions, setQuestions] = useState<Question[]>([]);\r\n-  const [saveProgress, setSaveProgress] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');\r\n-  const [activities, setActivities] = useState<Activity[]>([]);\r\n-  const [localBuffer, setLocalBuffer] = useState<{ timestamp: number; data: any } | null>(null);\r\n-  const [lastSavedToServer, setLastSavedToServer] = useState<number>(Date.now());\r\n-  const [selectedQuestionType, setSelectedQuestionType] = useState<string>('');\r\n-  const [editingQuestionIndex, setEditingQuestionIndex] = useState<number | null>(null);\r\n-  const [showHelpTips, setShowHelpTips] = useState(true);\r\n-  const [isNavigating, setIsNavigating] = useState(false);\r\n-  const [lessons, setLessons] = useState<Lesson[]>([]);\r\n-  const [grades, setGrades] = useState<Grade[]>([]);\r\n-  const [topics, setTopics] = useState<Topic[]>([]);\r\n-  const [subtopics, setSubtopics] = useState<SubTopic[]>([]);\r\n-  const [contentHeading, setContentHeading] = useState<string>('');\r\n-    // Add with your other state declarations\r\n-  const [isContentExpanded, setIsContentExpanded] = useState<boolean>(false);\r\n-  const [modalState, setModalState] = useState({\r\n-    showAddGrade: false,\r\n-    showAddTopic: false,\r\n-    showAddSubtopic: false,\r\n-    showAddLesson: false\r\n-  });\r\n-  const [isViewMode, setIsViewMode] = useState<boolean>(true);\r\n-  const [expandedGrade, setExpandedGrade] = useState<string | null>(null);\r\n-  const [expandedTopic, setExpandedTopic] = useState<string | null>(null);\r\n-  const [expandedSubtopic, setExpandedSubtopic] = useState<string | null>(null);\r\n-  const [expandedQuestion, setExpandedQuestion] = useState<number | null>(null);\r\n-  const [expandedActivity, setExpandedActivity] = useState<number | null>(null);\r\n-  const [newItemData, setNewItemData] = useState({\r\n-    name: '',\r\n-    description: ''\r\n-  });\r\n-  const [lessonContent, setLessonContent] = useState<string>('');\r\n-  const [isContentEditorOpen, setIsContentEditorOpen] = useState(false);\r\n-  const [isEditingTitle, setIsEditingTitle] = useState<boolean>(false);\r\n-  const [isEditingHeading, setIsEditingHeading] = useState<boolean>(false);\r\n-  const [isEditingDescription, setIsEditingDescription] = useState<boolean>(false);\r\n-  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\r\n-  const [isSidebarLocked, setIsSidebarLocked] = useState(true);\r\n-  const [alertDialogState, setAlertDialogState] = useState<{\r\n-    isOpen: boolean;\r\n-    title: string;\r\n-    message: string;\r\n-    onConfirm: (value?: unknown) => void;\r\n-  }>({\r\n-    isOpen: false,\r\n-    title: '',\r\n-    message: '',\r\n-    onConfirm: () => {}\r\n-  });\r\n-  const [lessonDialogOpen, setLessonDialogOpen] = useState(false);\r\n-\r\n-  const { \r\n-    selectedGrade,\r\n-    setSelectedGrade,\r\n-    selectedTopic,\r\n-    setSelectedTopic,\r\n-    selectedSubtopic,\r\n-    setSelectedSubtopic,\r\n-    selectedLesson,\r\n-    setSelectedLesson\r\n-  } = useContentStore();\r\n-\r\n-  // Add new state for tracking save status\r\n-  interface SaveStatus {\r\n-    id: string;\r\n-    status: 'draft' | 'saved' | 'saving' | 'error' | 'draft';\r\n-    lastSaved?: string;\r\n-  }\r\n-\r\n-  const [questionSaveStatuses, setQuestionSaveStatuses] = useState<Array<{\r\n-    id: string;\r\n-    status: 'idle' | 'saving' | 'saved' | 'error' | 'draft';\r\n-  }>>([]);\r\n-  const [promptSaveStatuses, setPromptSaveStatuses] = useState<SaveStatus[]>([]);\r\n-\r\n-  // Add this state to track dropdown state\r\n-  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n-\r\n-  // Add these states\r\n-  const [isLoadingSubtopics, setIsLoadingSubtopics] = useState(false);\r\n-  const [isLoadingLessons, setIsLoadingLessons] = useState(false);\r\n-\r\n-  // Add these state variables\r\n-  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\r\n-  const [itemToDelete, setItemToDelete] = useState<{\r\n-    id: string;\r\n-    type: 'topic' | 'subtopic' | 'lesson';\r\n-    title: string;\r\n-  } | null>(null);\r\n-\r\n-  // Add these state variables\r\n-  const [deleteError, setDeleteError] = useState<string | null>(null);\r\n-\r\n-  // Add this validation function\r\n-  const canDeleteItem = async (type: 'topic' | 'subtopic' | 'lesson', id: string) => {\r\n-    switch (type) {\r\n-      case 'topic':\r\n-        const subtopicsInTopic = subtopics.filter(s => s.topic_id === id);\r\n-        return subtopicsInTopic.length === 0;\r\n-        \r\n-      case 'subtopic':\r\n-        const lessonsInSubtopic = lessons.filter(l => l.subtopic_id === id);\r\n-        return lessonsInSubtopic.length === 0;\r\n-        \r\n-      case 'lesson':\r\n-        const { data: questions } = await supabase\r\n-          .from('questions')\r\n-          .select('id')\r\n-          .eq('lesson_id', id);\r\n-        return !questions || questions.length === 0;\r\n-        \r\n-      default:\r\n-        return false;\r\n-    }\r\n-  };\r\n-\r\n-  // Event handlers\r\n-  const handleQuestionTypeChange = useCallback((type: string) => {\r\n-    if (isQuestionType(type)) {\r\n-      setSelectedQuestionType(type);\r\n-    }\r\n-  }, []);\r\n-\r\n-  const handleAddQuestion = useCallback(() => {\r\n-    if (!selectedQuestionType || !isQuestionType(selectedQuestionType)) return;\r\n-\r\n-    const defaultData = QUESTION_TYPES[selectedQuestionType].defaultData;\r\n-    const newQuestion: Question = {\r\n-      id: crypto.randomUUID(),\r\n-      type: selectedQuestionType,\r\n-      //data: {},\r\n-      title: 'New Question',\r\n-      content: '',\r\n-      lesson_id: currentLessonId || '',\r\n-      metadata: {},\r\n-      data: {\r\n-        ...defaultData,\r\n-        prompt: '',\r\n-        teacher_script: '',\r\n-        followup_prompt: [],\r\n-        sample_answer: ''\r\n-      },\r\n-      correct_answer: '',\r\n-      exercisePrompts: [],\r\n-      isDraft: true\r\n-    };\r\n-\r\n-    setQuestions(prev => [...prev, newQuestion]);\r\n-    setQuestionSaveStatuses(prev => [\r\n-      ...prev,\r\n-      { id: newQuestion.id, status: 'draft' }\r\n-    ]);\r\n-    setSelectedQuestionType('');\r\n-  }, [selectedQuestionType, currentLessonId]);\r\n-\r\n-  const checkDeletability = async (type: 'topic' | 'subtopic' | 'lesson', id: string) => {\r\n-    try {\r\n-      switch (type) {\r\n-        case 'lesson':\r\n-          const { data: questions } = await supabase\r\n-            .from('questions')\r\n-            .select('count')\r\n-            .eq('lesson_id', id);\r\n-          return { \r\n-            canDelete: questions?.[0]?.count === 0,\r\n-            message: questions?.[0]?.count ?? 0> 0 \r\n-              ? `Please delete ${questions?.[0]?.count} questions first` \r\n-              : null\r\n-          };\r\n-\r\n-        case 'subtopic':\r\n-          const { data: lessons } = await supabase\r\n-            .from('lessons')\r\n-            .select('id, questions(count)')\r\n-            .eq('subtopic_id', id);\r\n-          const hasQuestions = lessons?.some(l => l.questions?.[0]?.count > 0);\r\n-          return {\r\n-            canDelete: !hasQuestions && !lessons?.length,\r\n-            message: hasQuestions ? 'Delete questions from lessons first' : \r\n-                     lessons?.length ? 'Delete all lessons first' : null\r\n-          };\r\n-\r\n-        case 'topic':\r\n-          const { data: subtopics } = await supabase\r\n-            .from('subtopics')\r\n-            .select('id, lessons(questions(count))')\r\n-            .eq('topic_id', id);\r\n-          const hasContent = subtopics?.some(s => \r\n-            s.lessons?.some(l => l.questions?.[0]?.count > 0)\r\n-          );\r\n-          return {\r\n-            canDelete: !hasContent && !subtopics?.length,\r\n-            message: hasContent ? 'Delete all content first' : \r\n-                     subtopics?.length ? 'Delete all subtopics first' : null\r\n-          };\r\n-      }\r\n-    } catch (error) {\r\n-      console.error('Error checking deletability:', error);\r\n-      return { canDelete: false, message: 'Error checking item' };\r\n-    }\r\n-  };\r\n-\r\n-  const handleRemoveQuestion = async (index: number) => {\r\n-    try {\r\n-      const questionToDelete = questions[index];\r\n-      \r\n-      // Delete related exercise prompts first\r\n-      const { error: promptError } = await supabase\r\n-        .from('exercise_prompts')\r\n-        .delete()\r\n-        .eq('question_id', questionToDelete.id);\r\n-\r\n-      if (promptError) throw promptError;\r\n-\r\n-      // Then delete the question\r\n-      const { error: questionError } = await supabase\r\n-        .from('questions')\r\n-        .delete()\r\n-        .eq('id', questionToDelete.id);\r\n-\r\n-      if (questionError) throw questionError;\r\n-\r\n-      // Update local state\r\n-      const newQuestions = questions.filter((_, i) => i !== index);\r\n-      setQuestions(newQuestions);\r\n-      \r\n-      toast.success('Question and related prompts deleted successfully');\r\n-    } catch (error) {\r\n-      console.error('Error deleting question:', error);\r\n-      toast.error('Failed to delete question and prompts');\r\n-    }\r\n-  };\r\n-\r\n-  const handleUpdateQuestion = useCallback(async (index: number, updatedQuestion: Question) => {\r\n-    const newQuestions = [...questions];\r\n-    newQuestions[index] = updatedQuestion;\r\n-    setQuestions(newQuestions);\r\n-    setQuestionSaveStatuses(prev => prev.map((status, i) => \r\n-      i === index ? { ...status, status: 'draft' } : status\r\n-    ));\r\n-  }, [questions]);\r\n-\r\n-  const handleAddExercisePrompt = useCallback((questionIndex: number) => {\r\n-    setQuestions(prev => prev.map((question, i) => {\r\n-      if (i === questionIndex) {\r\n-        return {\r\n-          ...question,\r\n-          exercisePrompts: [\r\n-            ...question.exercisePrompts,\r\n-            {\r\n-              id: crypto.randomUUID(),\r\n-              text: '',\r\n-              media: '',\r\n-              type: 'image',\r\n-              narration: 'Your turn',\r\n-              saytext: 'Say: ',\r\n-              metadata: {\r\n-                estimatedTime: 0\r\n-              },\r\n-              created_at: new Date().toISOString(),\r\n-              updated_at: new Date().toISOString()\r\n-            }\r\n-          ]\r\n-        };\r\n-      }\r\n-      return question;\r\n-    }));\r\n-  }, []);\r\n-\r\n-  const handleRemoveExercisePrompt = useCallback((questionIndex: number, promptIndex: number) => {\r\n-    setQuestions(prev => prev.map((question, i) => {\r\n-      if (i === questionIndex) {\r\n-        return {\r\n-          ...question,\r\n-          exercisePrompts: question.exercisePrompts.filter((_, j) => j !== promptIndex)\r\n-        };\r\n-      }\r\n-      return question;\r\n-    }));\r\n-  }, []);\r\n-\r\n-  const handleExercisePromptChange = useCallback(async (\r\n-    questionIndex: number,\r\n-    promptIndex: number,\r\n-    updatedPrompt: ExercisePrompt\r\n-  ) => {\r\n-    try {\r\n-      const promptUpdate = {\r\n-        id: updatedPrompt.id,\r\n-        question_id: updatedPrompt.question_id,\r\n-        text: updatedPrompt.text,\r\n-        type: updatedPrompt.type,\r\n-        narration: updatedPrompt.narration,\r\n-        saytext: updatedPrompt.saytext,\r\n-        media: updatedPrompt.media,\r\n-        // Remove order_index as it's not in schema\r\n-        created_at: new Date().toISOString()\r\n-      };\r\n-\r\n-      const { error: promptError } = await supabase\r\n-        .from('exercise_prompts')\r\n-        .upsert(promptUpdate)\r\n-        .select();\r\n-\r\n-      if (promptError) throw promptError;\r\n-\r\n-      // Update local state\r\n-      setQuestions(prev => prev.map((question, i) => {\r\n-        if (i === questionIndex) {\r\n-          const newPrompts = [...question.exercisePrompts];\r\n-          newPrompts[promptIndex] = updatedPrompt;\r\n-          return { ...question, exercisePrompts: newPrompts };\r\n-        }\r\n-        return question;\r\n-      }));\r\n-\r\n-    } catch (error) {\r\n-      console.error('Error saving prompt:', error);\r\n-      toast.error('Failed to save prompt');\r\n-    }\r\n-  }, []);\r\n-\r\n-  const handleAddActivity = useCallback(() => {\r\n-    const newActivity: Activity = {\r\n-      id: crypto.randomUUID(),\r\n-      lesson_id: currentLessonId || '',\r\n-      created_at: new Date().toISOString(),\r\n-      type: 'practice',\r\n-      title: '',\r\n-      name: '',\r\n-      instructions: '',\r\n-      media: [],\r\n-      data: {\r\n-        prompt: '',\r\n-        teacher_script: '',\r\n-        media: []\r\n-      }\r\n-    };\r\n-    setActivities(prev => [...prev, newActivity]);\r\n-  }, [currentLessonId]);\r\n-\r\n-  const handleUpdateActivity = useCallback((index: number, updatedActivity: Activity) => {\r\n-    setActivities(prev => prev.map((activity, i) => i === index ? updatedActivity : activity));\r\n-  }, []);\r\n-\r\n-  const handleRemoveActivity = useCallback((index: number) => {\r\n-    setActivities(prev => prev.filter((_, i) => i !== index));\r\n-  }, []);\r\n-\r\n-  const handleExercisePromptUpdate = useCallback((questionIndex: number, promptIndex: number, updatedPrompt: ExercisePrompt) => {\r\n-    const updatedQuestions = [...questions];\r\n-    updatedQuestions[questionIndex].exercisePrompts[promptIndex] = updatedPrompt;\r\n-    handleUpdateQuestion(questionIndex, updatedQuestions[questionIndex]);\r\n-  }, [questions, handleUpdateQuestion]);\r\n-\r\n-  const handleQuestionDataChange = useCallback((questionIndex: number, field: string, value: string) => {\r\n-    setQuestions(prev => prev.map((q, i) => \r\n-      i === questionIndex \r\n-        ? { \r\n-            ...q, \r\n-            data: { \r\n-              prompt: q.data?.prompt || '',\r\n-              teacherScript: q.data?.teacherScript || '',\r\n-              ...q.data,\r\n-              [field]: value \r\n-            } \r\n-          }\r\n-        : q\r\n-    ));\r\n-  }, []);\r\n-\r\n-  const [isSaving, setIsSaving] = useState(false);\r\n-\r\n-  const handleSaveLesson = async () => {\r\n-    try {\r\n-      if (!currentLessonId || !selectedSubtopicId) {\r\n-        toast.error('Please select a subtopic and lesson first');\r\n-        return;\r\n-      }\r\n-\r\n-      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\r\n-      if (sessionError) throw sessionError;\r\n-      \r\n-      if (!session?.user) {\r\n-        toast.error('Please sign in to save lessons');\r\n-        return;\r\n-      }\r\n-\r\n-      // Get user's role from session\r\n-      const userRole = session.user.user_metadata?.role;\r\n-      console.log('Current user role:', userRole);\r\n-      console.log('📝 Saving content heading:', {\r\n-        contentHeading,\r\n-        currentLessonId,\r\n-        selectedSubtopicId,\r\n-        timestamp: new Date().toISOString()\r\n-      });\r\n-\r\n-      // Create metadata object\r\n-      const lessonMetadata = {\r\n-        lastEdited: new Date().toISOString(),\r\n-        version: 1,\r\n-        status: 'draft' \r\n-      };\r\n-\r\n-      // Complete lesson data with all fields\r\n-      const lessonData = {\r\n-        id: currentLessonId,\r\n-        title: lessonTitle,\r\n-        content: lessonContent,\r\n-        metadata: lessonMetadata, // Supabase will automatically handle JSON conversion\r\n-        content_type: 'html',\r\n-        lesson_type: 'lesson',\r\n-        grade_id: selectedGradeId,\r\n-        topic_id: selectedTopicId,\r\n-        subtopic_id: selectedSubtopicId,\r\n-        user_id: session.user.id,\r\n-        updated_at: new Date().toISOString(),\r\n-        role: userRole, // Include role in the payload\r\n-        description: '',\r\n-        prerequisites: [],\r\n-        media_type: 'image',\r\n-        media_url: '',\r\n-        contentheading: contentHeading || ''\r\n-      };\r\n-\r\n-      console.log('📦 Data being sent to Supabase:', lessonData);\r\n-\r\n-      // Save lesson with all fields\r\n-      const { data, error: lessonError } = await supabase\r\n-        .from('lessons')\r\n-        .upsert(lessonData, { \r\n-          onConflict: 'id'\r\n-        })\r\n-        .select();\r\n-\r\n-      if (lessonError) throw lessonError;\r\n-\r\n-      // 2. Save lesson content\r\n-      const { data: existingContent } = await supabase\r\n-        .from('lesson_content')\r\n-        .select('id')\r\n-        .eq('lesson_id', currentLessonId)\r\n-        .single();\r\n-\r\n-      const contentMetadata = {\r\n-        lastEdited: new Date().toISOString(),\r\n-        version: 1,\r\n-        status: 'draft'\r\n-      };\r\n-\r\n-      const contentUpdate = {\r\n-        id: existingContent?.id || crypto.randomUUID(),\r\n-        lesson_id: currentLessonId,\r\n-        content: [lessonContent],\r\n-        metadata: contentMetadata, // Supabase will automatically handle JSON conversion\r\n-        content_type: 'html',\r\n-        user_id: session.user.id,\r\n-        updated_at: new Date().toISOString(),\r\n-        created_at: new Date().toISOString()\r\n-      };\r\n-\r\n-      const { error: contentError } = await supabase\r\n-        .from('lesson_content')\r\n-        .upsert(contentUpdate, { onConflict: 'id' });\r\n-\r\n-      if (contentError) throw contentError;\r\n-\r\n-      // 3. Save questions\r\n-      for (const question of questions) {\r\n-        const questionData = {\r\n-          id: question.id,\r\n-          lesson_id: currentLessonId,\r\n-          type: question.type,\r\n-          title: question.title,\r\n-          metadata: question.metadata,\r\n-          data: question.data,\r\n-          updated_at: new Date().toISOString(),\r\n-          user_id: session.user.id\r\n-        };\r\n-\r\n-        const { error: questionError } = await supabase\r\n-          .from('questions')\r\n-          .upsert(questionData, { onConflict: 'id' });\r\n-\r\n-        if (questionError) throw questionError;\r\n-\r\n-        //4. Save exercise prompts for this question\r\n-        if (question.exercisePrompts) {\r\n-          for (const prompt of question.exercisePrompts) {\r\n-            const promptData = {\r\n-              id: prompt.id,\r\n-              question_id: question.id,\r\n-              text: prompt.text,\r\n-              media: prompt.media,\r\n-              type: prompt.type,\r\n-              narration: prompt.narration,\r\n-              saytext: prompt.saytext,\r\n-              user_id: session.user.id,\r\n-              updated_at: new Date().toISOString()\r\n-            };\r\n-\r\n-            const { error: promptError } = await supabase\r\n-              .from('exercise_prompts')\r\n-              .upsert(promptData, { onConflict: 'id' });\r\n-\r\n-            if (promptError) throw promptError;\r\n-          }\r\n-        }\r\n-      }\r\n-\r\n-      // 5. Save activities\r\n-      if (activities.length > 0) {\r\n-        const activitiesData = activities.map(activity => ({\r\n-          id: activity.id,\r\n-          lesson_id: currentLessonId,\r\n-          type: activity.type,\r\n-          title: activity.title,\r\n-          name: activity.name,\r\n-          instructions: activity.instructions,\r\n-          media: activity.media,\r\n-          data: activity.data,\r\n-          created_at: new Date().toISOString()\r\n-        }));\r\n-\r\n-        const { error: activitiesError } = await supabase\r\n-          .from('activities')\r\n-          .upsert(activitiesData, { onConflict: 'id' });\r\n-\r\n-        if (activitiesError) throw activitiesError;\r\n-      }\r\n-\r\n-      // After successful save\r\n-      console.log('✅ Content heading saved successfully:', {\r\n-        contentHeading,\r\n-        lessonId: currentLessonId,\r\n-        timestamp: new Date().toISOString()\r\n-      });\r\n-\r\n-      toast.success('Lesson saved successfully');\r\n-    } catch (err) {\r\n-      const error = err as PostgrestError;\r\n-      console.error('❌ Error saving content heading:', {\r\n-        error: error.message,\r\n-        contentHeading,\r\n-        lessonContent,\r\n-        lessonId: currentLessonId,\r\n-        timestamp: new Date().toISOString()\r\n-      });\r\n-      toast.error(`Failed to save lesson: ${error.message}`);\r\n-\r\n-\r\n-    }\r\n-  };\r\n-\r\n-  const handleSaveQuestion = async (question: Question, index: number) => {\r\n-    const loadingToast = toast.loading(`Saving question ${index + 1}...`);\r\n-    \r\n-    try {\r\n-      const { data: { session } } = await supabase.auth.getSession();\r\n-      if (!session?.user) {\r\n-        toast.error('Please sign in to save question', { id: loadingToast });\r\n-        return;\r\n-      }\r\n-\r\n-      // Save question\r\n-      const questionData = {\r\n-        id: question.id,\r\n-        lesson_id: currentLessonId,\r\n-        type: question.type,\r\n-        title: question.title,\r\n-        metadata: question.metadata,\r\n-        data: {\r\n-          prompt: question.data?.prompt ?? '',\r\n-          teacherScript: question.data?.teacherScript ?? '',\r\n-          followup_prompt: question.data?.followup_prompt ?? [],\r\n-          sampleAnswer: question.data?.sampleAnswer || undefined,  // Convert null to undefined\r\n-          answer: question.data?.answer || undefined  // Convert null to undefined\r\n-        } as const,\r\n-        user_id: session.user.id,\r\n-        updated_at: new Date().toISOString()\r\n-      };\r\n-\r\n-      const { error: questionError } = await supabase\r\n-        .from('questions')\r\n-        .upsert(questionData, { onConflict: 'id' });\r\n-\r\n-      if (questionError) throw questionError;\r\n-\r\n-      // Save exercise prompts if they exist\r\n-      if (question.exercisePrompts?.length) {\r\n-        for (const prompt of question.exercisePrompts) {\r\n-          const promptData = {\r\n-            id: prompt.id,\r\n-            question_id: question.id,\r\n-            text: prompt.text,\r\n-            type: prompt.type,\r\n-            narration: prompt.narration,\r\n-            saytext: prompt.saytext,\r\n-            media: prompt.media,\r\n-            user_id: session.user.id,\r\n-            updated_at: new Date().toISOString()\r\n-          };\r\n-\r\n-          const { error: promptError } = await supabase\r\n-            .from('exercise_prompts')\r\n-            .upsert(promptData, { onConflict: 'id' });\r\n-\r\n-          if (promptError) throw promptError;\r\n-        }\r\n-      }\r\n-\r\n-      toast.success(`Question ${index + 1} saved successfully`, { id: loadingToast });\r\n-    } catch (error) {\r\n-      console.error('Error saving question:', error);\r\n-      toast.error(`Failed to save question ${index + 1}`, { id: loadingToast });\r\n-    }\r\n-  };\r\n-\r\n-  const handleSaveActivity = async (activity: Activity) => {\r\n-    try {\r\n-      await contentService.saveActivity(activity);\r\n-      toast.success('Activity saved');\r\n-    } catch (error) {\r\n-      console.error('Failed to save activity:', error);\r\n-      toast.error('Failed to save activity');\r\n-    }\r\n-  };\r\n-\r\n-  // Effects\r\n-  useEffect(() => {\r\n-    const fetchGrades = async () => {\r\n-      try {\r\n-        const { data, error } = await supabase\r\n-          .from('grades')\r\n-          .select('*')\r\n-          .order('name');\r\n-\r\n-        if (error) {\r\n-          console.error('Supabase error:', error);\r\n-          throw error;\r\n-        }\r\n-\r\n-        if (!data) {\r\n-          throw new Error('No data returned from Supabase');\r\n-        }\r\n-\r\n-        // Map the grades to match your interface\r\n-        const validGrades = data.map((grade: any) => ({\r\n-          _id: grade.id,\r\n-          id: grade.id,\r\n-          name: grade.name,\r\n-          level: grade.level || 0,  // Add default value if not provided\r\n-          orderIndex: grade.order_index || 0,  // Add default value if not provided\r\n-          topics: []\r\n-        }));\r\n-        \r\n-        setGrades(validGrades);\r\n-      } catch (error) {\r\n-        console.error('Error fetching grades:', error);\r\n-        toast.error('Failed to fetch grades');\r\n-      }\r\n-    };\r\n-\r\n-    fetchGrades();\r\n-  }, []);\r\n-\r\n-  // Topic Selection\r\n-  useEffect(() => {\r\n-    const fetchTopics = async () => {\r\n-      if (!selectedGradeId) return;\r\n-      \r\n-      try {\r\n-        const { data, error } = await supabase\r\n-          .from('topics')\r\n-          .select('*')\r\n-          .eq('grade_id', selectedGradeId)\r\n-          .order('title');\r\n-\r\n-        if (error) {\r\n-          throw error;\r\n-        }\r\n-\r\n-        // Map the topics to match your interface\r\n-        const validTopics = (data || []).map((topic: any) => ({\r\n-          _id: topic.id,\r\n-          id: topic.id,\r\n-          name: topic.title,\r\n-          title: topic.title,\r\n-          grade_id: topic.grade_id,\r\n-          subtopics: []\r\n-        }));\r\n-        \r\n-        setTopics(validTopics);\r\n-      } catch (error) {\r\n-        console.error('Error fetching topics:', error);\r\n-        toast.error('Failed to fetch topics');\r\n-      }\r\n-    };\r\n-\r\n-    fetchTopics();\r\n-  }, [selectedGradeId]);\r\n-\r\n-  // Subtopic Selection\r\n-  useEffect(() => {\r\n-    const fetchSubtopics = async () => {\r\n-      if (!selectedTopicId) return;\r\n-      \r\n-      try {\r\n-        // Use content service to fetch subtopics\r\n-        const subtopicsData = await contentService.fetchSubtopics(selectedTopicId);\r\n-        console.log('Fetched subtopics:', subtopicsData);\r\n-\r\n-        const validSubtopics = subtopicsData.map((subtopic: any) => ({\r\n-          id: subtopic.id,\r\n-          title: subtopic.title,\r\n-          description: subtopic.description,\r\n-          topic_id: subtopic.topic_id,\r\n-          lessons: [],\r\n-          order_index: subtopicsData.length\r\n-        }));\r\n-        \r\n-        setSubtopics(validSubtopics);\r\n-        \r\n-        // Update global state\r\n-        if (selectedSubtopic) {\r\n-          setSelectedSubtopic(selectedSubtopic);\r\n-        }\r\n-      } catch (err) {\r\n-        const error = err as Error;\r\n-        console.error('Error fetching subtopics:', error);\r\n-        toast.error('Failed to fetch subtopics');\r\n-      }\r\n-    };\r\n-\r\n-    fetchSubtopics();\r\n-  }, [selectedTopicId, selectedSubtopic, setSelectedSubtopic]);\r\n-\r\n-  // Add effect to monitor subtopics state\r\n-  useEffect(() => {\r\n-    console.log('Current subtopics state:', subtopics);\r\n-  }, [subtopics]);\r\n-\r\n-  // Add fetchLessons function\r\n-  const fetchLessons = useCallback(async () => {\r\n-    if (!selectedSubtopicId) return;\r\n-    try {\r\n-      const { data, error } = await supabase\r\n-        .from('lessons')\r\n-        .select('*')\r\n-        .eq('subtopic_id', selectedSubtopicId)\r\n-        .order('title');\r\n-\r\n-      if (error) {\r\n-        throw error;\r\n-      }\r\n-      \r\n-      // Map the lessons to ensure they have _id\r\n-      const validLessons = (data || []).map((lesson: any) => ({\r\n-        ...lesson,\r\n-        _id: lesson._id || lesson.id, // Use _id if available, otherwise use id\r\n-        title: lesson.title || 'Untitled Lesson'\r\n-      })).filter((lesson: any) => lesson._id); // Only include lessons with valid IDs\r\n-      \r\n-      setLessons(validLessons);\r\n-    } catch (error) {\r\n-      console.error('Error fetching lessons:', error);\r\n-      toast.error('Failed to fetch lessons');\r\n-    }\r\n-  }, [selectedSubtopicId]);\r\n-  // Add loadLessonContent function\r\n-  const isLoading = useRef(false);\r\n-  const loadLessonContent = useCallback(async (lessonId: string) => {\r\n-    // Prevent multiple simultaneous loads\r\n-    if (isLoading.current) return;\r\n-    isLoading.current = true;\r\n-\r\n-    const controller = new AbortController();\r\n-\r\n-    try {\r\n-      // Clear existing content first\r\n-      setLessonTitle('');\r\n-      setContentHeading('');\r\n-      setLessonContent('');\r\n-      setQuestions([]);\r\n-      \r\n-      // First fetch lesson data\r\n-      const { data: lessonData, error: lessonError } = await supabase\r\n-        .from('lessons')\r\n-        .select('*')\r\n-        .eq('id', lessonId)\r\n-        .single()\r\n-        \r\n-\r\n-      if (lessonError) {\r\n-        console.error('Lesson fetch error:', lessonError);\r\n-        throw lessonError;\r\n-      }\r\n-\r\n-      // Set lesson data\r\n-      setLessonTitle(lessonData.title || '');\r\n-      setContentHeading(lessonData.content || '');\r\n-\r\n-      // Then fetch lesson content with explicit headers\r\n-      const { data: contentData, error: contentError } = await supabase\r\n-        .from('lesson_content')\r\n-        .select('*')\r\n-        .eq('lesson_id', lessonId)\r\n-        .order('updated_at', { ascending: false })\r\n-        .limit(1)\r\n-        .maybeSingle();\r\n-\r\n-      if (contentError) {\r\n-        console.error('Content fetch error:', contentError);\r\n-        throw contentError;\r\n-      }\r\n-\r\n-      // Set content if available\r\n-      if (contentData?.content) {\r\n-        setLessonContent(typeof contentData.content === 'string' \r\n-          ? contentData.content \r\n-          : JSON.stringify(contentData.content)\r\n-        );\r\n-      }\r\n-\r\n-    } catch (error: unknown) {\r\n-      if (error instanceof Error && error.name === 'AbortError') {\r\n-        console.log('Request aborted');\r\n-        return;\r\n-      }\r\n-      console.error('Error loading lesson:', error);\r\n-      toast.error('Failed to load lesson content');\r\n-      \r\n-      // Reset states on error\r\n-      setLessonTitle('');\r\n-      setContentHeading('');\r\n-      setLessonContent('');\r\n-      setQuestions([]);\r\n-    } finally {\r\n-      isLoading.current = false;\r\n-    }\r\n-\r\n-    return () => {\r\n-      controller.abort();\r\n-    };\r\n-  }, []); // Empty dependencies since we're using closure over state setters\r\n-\r\n-  // // Add effect for fetching lessons when subtopic changes\r\n-  useEffect(() => {\r\n-    if (selectedSubtopicId) {\r\n-      fetchLessons();\r\n-    }\r\n-  }, [selectedSubtopicId, fetchLessons]);\r\n-\r\n-  // Add effect for loading lesson content when currentLessonId changes\r\n-    useEffect(() => {\r\n-    let isMounted = true;\r\n-    let timeoutId: NodeJS.Timeout;\r\n-\r\n-    const loadContent = async () => {\r\n-      if (!currentLessonId || !isMounted) return;\r\n-\r\n-      // Clear previous timeout if exists\r\n-      if (timeoutId) clearTimeout(timeoutId);\r\n-\r\n-      // Set new timeout for debouncing\r\n-      timeoutId = setTimeout(() => {\r\n-        if (isMounted) {\r\n-          loadLessonContent(currentLessonId);\r\n-        }\r\n-      }, 300);\r\n-    };\r\n-\r\n-    loadContent();\r\n-\r\n-    // Cleanup function\r\n-    return () => {\r\n-      isMounted = false;\r\n-      if (timeoutId) clearTimeout(timeoutId);\r\n-      if (isLoading.current) isLoading.current = false;\r\n-    };\r\n-  }, [currentLessonId]); // Remove loadLessonContent from dependencies\r\n-\r\n-  useEffect(() => {\r\n-    console.log('Current lessons state:', lessons);\r\n-  }, [lessons]);\r\n-\r\n-    // Add keyboard shortcut for saving\r\n-  useEffect(() => {\r\n-    const handleKeyDown = (e: KeyboardEvent) => {\r\n-      if ((e.ctrlKey || e.metaKey) && e.key === 's') {\r\n-        e.preventDefault();\r\n-        handleSaveLesson();\r\n-      }\r\n-    };\r\n-\r\n-    window.addEventListener('keydown', handleKeyDown);\r\n-    return () => window.removeEventListener('keydown', handleKeyDown);\r\n-  }, [handleSaveLesson]);\r\n-\r\n-  // Add SaveFeedback component\r\n-  const SaveFeedback = useCallback(() => {\r\n-    if (saveProgress === 'idle') return null;\r\n-\r\n-    return (\r\n-    <div className=\"fixed bottom-4 right-4\">\r\n-      {saveProgress === 'saving' && (\r\n-        <div className=\"flex items-center gap-2 bg-background border rounded-lg px-4 py-2 shadow-lg\">\r\n-          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n-          <span className=\"text-sm\">Saving changes...</span>\r\n-        </div>\r\n-      )}\r\n-      {saveProgress === 'saved' && (\r\n-        <div className=\"flex items-center gap-2 bg-green-500 text-white rounded-lg px-4 py-2 shadow-lg\">\r\n-          <Check className=\"h-4 w-4\" />\r\n-          <span className=\"text-sm\">Changes saved</span>\r\n-        </div>\r\n-      )}\r\n-      {saveProgress === 'error' && (\r\n-        <div className=\"flex items-center gap-2 bg-destructive text-destructive-foreground rounded-lg px-4 py-2 shadow-lg\">\r\n-          <X className=\"h-4 w-4\" />\r\n-          <span className=\"text-sm\">Error saving changes</span>\r\n-        </div>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-  }, [saveProgress]);\r\n-\r\n-  // Update handlers\r\n-  const handleGradeSelect = (gradeId: string) => {\r\n-    // Always keep sidebar open during selection\r\n-    setIsSidebarCollapsed(false);\r\n-    setIsSidebarLocked(true);\r\n-    \r\n-    // Batch state updates\r\n-    requestAnimationFrame(() => {\r\n-      setSelectedGradeId(gradeId);\r\n-      setSelectedGrade(gradeId);\r\n-      setSelectedTopicId(null);\r\n-      setSelectedTopic('');\r\n-      setSelectedSubtopicId(null);\r\n-      setSelectedSubtopic('');\r\n-      setCurrentLessonId(null);\r\n-      \r\n-      if (isViewMode) {\r\n-        setExpandedGrade(gradeId);\r\n-      }\r\n-    });\r\n-  };\r\n-\r\n-  const handleTopicSelect = (value: string) => {\r\n-    setSelectedTopicId(value);\r\n-    setSelectedTopic(value);\r\n-    setSelectedSubtopicId(null);\r\n-    setSelectedSubtopic('');\r\n-    setCurrentLessonId(null);\r\n-  };\r\n-\r\n-  const handleSubtopicSelect = (value: string) => {\r\n-    setSelectedSubtopicId(value);\r\n-    setSelectedSubtopic(value);\r\n-    setCurrentLessonId(null);\r\n-  };\r\n-\r\n-  const handleLessonSelect = async (lessonId: string) => {\r\n-    try {\r\n-      // Lock sidebar during selection\r\n-      setIsSidebarLocked(true);\r\n-      setIsSidebarCollapsed(false);\r\n-      setCurrentLessonId(lessonId);\r\n-      \r\n-      // 1. Fetch lesson data\r\n-      const { data: lessonData, error: lessonError } = await supabase\r\n-        .from('lessons')\r\n-        .select('*')\r\n-        .eq('id', lessonId)\r\n-        .single();\r\n-\r\n-      if (lessonError) throw lessonError;\r\n-\r\n-      // 2. Fetch questions with exercise prompts\r\n-      const { data: questionsData, error: questionsError } = await supabase\r\n-        .from('questions')\r\n-        .select(`\r\n-          *,\r\n-          exercise_prompts (*)\r\n-        `)\r\n-        .eq('lesson_id', lessonId);\r\n-\r\n-      if (questionsError) throw questionsError;\r\n-\r\n-      // 3. Fetch activities - removed order_index\r\n-      const { data: activitiesData, error: activitiesError } = await supabase\r\n-        .from('activities')\r\n-        .select('*')\r\n-        .eq('lesson_id', lessonId);\r\n-\r\n-      if (activitiesError) throw activitiesError;\r\n-\r\n-      // Format questions with their exercise prompts\r\n-      const formattedQuestions = questionsData?.map(q => ({\r\n-        ...q,\r\n-        data: q.data || {},\r\n-        exercisePrompts: q.exercise_prompts || []\r\n-      })) || [];\r\n-\r\n-      // Set all states\r\n-      setLessonTitle(lessonData.title || '');\r\n-      setLessonContent(lessonData.content || '');\r\n-      setQuestions(formattedQuestions);\r\n-      setActivities(activitiesData || []);\r\n-\r\n-      // After successful load, unlock sidebar and allow collapse\r\n-      setTimeout(() => {\r\n-        setIsSidebarLocked(false);\r\n-        if (!isSidebarLocked) {\r\n-          setIsSidebarCollapsed(true);\r\n-        }\r\n-      }, 300);\r\n-\r\n-    } catch (error) {\r\n-      console.error('Error loading lesson:', error);\r\n-      toast.error('Failed to load lesson');\r\n-      // Reset states on error\r\n-      setLessonTitle('');\r\n-      setLessonContent('');\r\n-      setQuestions([]);\r\n-      setActivities([]);\r\n-    }\r\n-    if (!isSidebarLocked) {\r\n-      setIsSidebarCollapsed(true);\r\n-    }\r\n-  };\r\n-\r\n-  // Update the expansion handlers\r\n-  const handleTopicExpand = async (topicId: string) => {\r\n-    setExpandedTopic(expandedTopic === topicId ? null : topicId);\r\n-    setSelectedTopicId(topicId);\r\n-    \r\n-    // Load subtopics when topic is expanded\r\n-    if (topicId) {\r\n-      setIsLoadingSubtopics(true);\r\n-      try {\r\n-        const { data: subtopicsData, error } = await supabase\r\n-          .from('subtopics')\r\n-          .select('*')\r\n-          .eq('topic_id', topicId)\r\n-          .order('order_index');\r\n-\r\n-        if (error) throw error;\r\n-        setSubtopics(subtopicsData || []);\r\n-      } catch (error) {\r\n-        console.error('Error loading subtopics:', error);\r\n-        toast.error('Failed to load subtopics');\r\n-      } finally {\r\n-        setIsLoadingSubtopics(false);\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const handleSubtopicExpand = async (subtopicId: string) => {\r\n-    setExpandedSubtopic(expandedSubtopic === subtopicId ? null : subtopicId);\r\n-    setSelectedSubtopicId(subtopicId);\r\n-    \r\n-    if (subtopicId) {\r\n-      setIsLoadingLessons(true);\r\n-      try {\r\n-        const { data: lessonsData, error } = await supabase\r\n-          .from('lessons')\r\n-          .select('*')\r\n-          .eq('subtopic_id', subtopicId)\r\n-          .order('order_index');\r\n-\r\n-        if (error) throw error;\r\n-        setLessons(lessonsData || []);\r\n-      } catch (error) {\r\n-        console.error('Error loading lessons:', error);\r\n-        toast.error('Failed to load lessons');\r\n-      } finally {\r\n-        setIsLoadingLessons(false);\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const handleQuestionExpand = (index: number) => {\r\n-    setExpandedQuestion(expandedQuestion === index ? null : index);\r\n-  };\r\n-\r\n-  const handleActivityExpand = (index: number) => {\r\n-    setExpandedActivity(expandedActivity === index ? null : index);\r\n-  };\r\n-\r\n-  // Add effect to save mode changes to localStorage\r\n-  useEffect(() => {\r\n-    localStorage.setItem('lessonManagementViewMode', isViewMode.toString());\r\n-  }, [isViewMode]);\r\n-\r\n-  // Add handlers for creating new items\r\n-  const handleCreateGrade = async () => {\r\n-    try {\r\n-      const response = await fetch(`${API_ENDPOINT}/grades`, {\r\n-        method: 'POST',\r\n-        headers: { 'Content-Type': 'application/json' },\r\n-        body: JSON.stringify({ name: newItemData.name })\r\n-      });\r\n-\r\n-      if (!response.ok) throw new Error('Failed to create grade');\r\n-      const data = await response.json();\r\n-      \r\n-      if (!data.success) throw new Error(data.message || 'Failed to create grade');\r\n-      \r\n-      // Update grades list\r\n-      setGrades([...grades, data.data.grade]);\r\n-      setModalState({ ...modalState, showAddGrade: false });\r\n-      setNewItemData({ name: '', description: '' });\r\n-      toast.success('Grade created successfully');\r\n-    } catch (error) {\r\n-      console.error('Error creating grade:', error);\r\n-      toast.error('Failed to create grade');\r\n-    }\r\n-  };\r\n-\r\n-  const handleCreateTopic = async () => {\r\n-    if (!selectedGradeId) {\r\n-      toast.error('Please select a grade first');\r\n-      return;\r\n-    }\r\n-\r\n-    try {\r\n-      const newTopic = await contentService.createTopic({\r\n-        title: newItemData.name, // Map from newItemData.name to title\r\n-        description: newItemData.description,\r\n-        gradeId: selectedGradeId\r\n-      });\r\n-\r\n-      setTopics(prev => [...prev, newTopic]);\r\n-      toast.success('Topic created successfully');\r\n-      setModalState({ ...modalState, showAddTopic: false });\r\n-      setNewItemData({ name: '', description: '' });\r\n-    } catch (err) {\r\n-      const error = err instanceof Error ? err.message : String(err);\r\n-      console.error('Error creating topic:', error);\r\n-      toast.error('Failed to create topic');\r\n-    }\r\n-  };\r\n-    \r\n-  \r\n-\r\n-\r\n-  const handleCreateSubtopic = async (data: { title: string; description?: string }) => {\r\n-    try {\r\n-      if (!selectedTopicId) {\r\n-        toast.error('Please select a topic first');\r\n-        return;\r\n-      }\r\n-\r\n-      const newSubtopic = await contentService.createSubtopic({\r\n-        ...data,\r\n-        topicId: selectedTopicId\r\n-      });\r\n-\r\n-      setSubtopics(prev => [...prev, {\r\n-        _id: newSubtopic.id,\r\n-        id: newSubtopic.id,\r\n-        name: newSubtopic.title,\r\n-        title: newSubtopic.title,\r\n-        description: newSubtopic.description,\r\n-        topic_id: newSubtopic.topic_id,\r\n-        orderIndex: prev.length,\r\n-        lessons: []\r\n-      }]);\r\n-\r\n-      toast.success('Subtopic created successfully');\r\n-      setModalState(prev => ({ ...prev, showAddSubtopic: false }));\r\n-    } catch (err) {\r\n-      const error = err as Error;\r\n-      console.error('Error creating subtopic:', error);\r\n-      toast.error('Failed to create subtopic');\r\n-    }\r\n-  };\r\n-\r\n-  const handleUpdateSubtopic = async (subtopicId: string, data: { title: string; description?: string }) => {\r\n-    try {\r\n-      const { data: updatedSubtopic, error } = await supabase\r\n-        .from('sub_topics')\r\n-        .update(data)\r\n-        .eq('id', subtopicId)\r\n-        .select()\r\n-        .single();\r\n-\r\n-      if (error) throw error;\r\n-      \r\n-      setSubtopics(prev => prev.map(subtopic => \r\n-        subtopic.id === subtopicId \r\n-          ? {\r\n-              ...subtopic,\r\n-              name: updatedSubtopic.title\r\n-            }\r\n-          : subtopic\r\n-      ));\r\n-\r\n-      toast.success('Subtopic updated successfully');\r\n-    } catch (err) {\r\n-      const error = err as Error;\r\n-      console.error('Error updating subtopic:', error);\r\n-      toast.error('Failed to update subtopic');\r\n-    }\r\n-  };\r\n-\r\n-  const handleDeleteSubtopic = async (subtopicId: string) => {\r\n-    try {\r\n-      await contentService.deleteSubtopic(subtopicId);\r\n-      setSubtopics(prev => prev.filter(subtopic => subtopic.id !== subtopicId));\r\n-      setSelectedSubtopicId(null);\r\n-      toast.success('Subtopic deleted successfully');\r\n-    } catch (err) {\r\n-      const error = err as Error;\r\n-      console.error('Error deleting subtopic:', error);\r\n-      toast.error('Failed to delete subtopic');\r\n-    }\r\n-  };\r\n-\r\n-  const handleCreateLesson = async () => {\r\n-    if (!selectedSubtopicId) {\r\n-      toast.error('Please select a subtopic first');\r\n-      return;\r\n-    }\r\n-\r\n-    try {\r\n-      // First create the lesson\r\n-      const { data: newLesson, error: lessonError } = await supabase\r\n-        .from('lessons')\r\n-        .insert({\r\n-          title: newItemData.name,\r\n-          duration: 0,\r\n-          topic_id: selectedTopicId,\r\n-          subtopic_id: selectedSubtopicId,\r\n-          content: '', // Empty rich text content initially\r\n-          status: 'draft'\r\n-        })\r\n-        .select()\r\n-        .single();\r\n-\r\n-      if (lessonError) throw lessonError;\r\n-\r\n-      // Create initial question\r\n-      const { data: newQuestion, error: questionError } = await supabase\r\n-        .from('questions')\r\n-        .insert({\r\n-          lesson_id: newLesson.id,\r\n-          type: 'speaking', // default type\r\n-          title: 'Question 1',\r\n-          data: {\r\n-            prompt: '',\r\n-            teacherScript: '',\r\n-            options: []\r\n-          },\r\n-          order_index: 0\r\n-        })\r\n-        .select()\r\n-        .single();\r\n-\r\n-      if (questionError) throw questionError;\r\n-\r\n-      // Create initial exercise prompts for the question\r\n-      const { error: promptsError } = await supabase\r\n-        .from('exercise_prompts')\r\n-        .insert([\r\n-          {\r\n-            question_id: newQuestion.id,\r\n-            text: '',\r\n-            type: 'image',\r\n-            narration: '',\r\n-            saytext: '',\r\n-            media: [],\r\n-            order_index: 0\r\n-          },\r\n-          {\r\n-            question_id: newQuestion.id,\r\n-            text: '',\r\n-            type: 'gif',\r\n-            narration: '',\r\n-            saytext: '',\r\n-            media: [],\r\n-            order_index: 1\r\n-          }\r\n-        ]);\r\n-\r\n-      if (promptsError) throw promptsError;\r\n-\r\n-      // Create initial activity\r\n-      // const { error: activityError } = await supabase\r\n-      //   .from('activities')\r\n-      //   .insert({\r\n-      //     lesson_id: newLesson.id,\r\n-      //     type: 'practice',\r\n-      //     title: '',\r\n-      //     instructions: '',\r\n-      //     media: [],\r\n-      //     data: {\r\n-      //       prompt: '',\r\n-      //       teacherScript: '',\r\n-      //       media: []\r\n-      //     },\r\n-      //     order_index: 0\r\n-      //   });\r\n-\r\n-      // if (activityError) throw activityError;\r\n-\r\n-      // Update UI state\r\n-      setLessons(prev => [...prev, newLesson]);\r\n-      setCurrentLessonId(newLesson.id);\r\n-      setLessonTitle(newLesson.title);\r\n-      setModalState({ ...modalState, showAddLesson: false });\r\n-      setNewItemData({ name: '', description: '' });\r\n-      toast.success('Lesson created successfully');\r\n-\r\n-    } catch (error) {\r\n-      console.error('Error creating lesson:', error);\r\n-      toast.error('Failed to create lesson');\r\n-    }\r\n-  };\r\n-\r\n-  // Effect to handle localStorage after mount\r\n-  useEffect(() => {\r\n-    const storedMode = localStorage.getItem('lessonManagementViewMode');\r\n-    if (storedMode !== null) {\r\n-      setIsViewMode(storedMode === 'true');\r\n-    }\r\n-  }, []);\r\n-\r\n-  // Update the cleanupModalState function\r\n-  const cleanupModalState = useCallback(() => {\r\n-    document.body.style.pointerEvents = '';\r\n-    document.body.style.overflow = '';\r\n-    setModalState({\r\n-      showAddGrade: false,\r\n-      showAddTopic: false,\r\n-      showAddSubtopic: false,\r\n-      showAddLesson: false\r\n-    });\r\n-    setNewItemData({ name: '', description: '' });\r\n-  }, []);\r\n-\r\n-  // Add a function to handle modal state changes\r\n-  const handleModalStateChange = useCallback((modalType: keyof typeof modalState, open: boolean) => {\r\n-    if (!open) {\r\n-      cleanupModalState();\r\n-    } else {\r\n-      setModalState(prev => ({ ...prev, [modalType]: open }));\r\n-    }\r\n-  }, [cleanupModalState]);\r\n-\r\n-  const handleContentSave = async (content: string) => {\r\n-    const loadingToast = toast.loading(\"Saving content...\", {\r\n-      action: {\r\n-        label: \"Close\",\r\n-        onClick: () => toast.dismiss()\r\n-      }\r\n-    });\r\n-    \r\n-    try {\r\n-      const { data: { session } } = await supabase.auth.getSession();\r\n-      if (!session?.user) {\r\n-        toast.error('Please sign in to save content', { id: loadingToast });\r\n-        return;\r\n-      }\r\n-\r\n-      // Get the most recent content entry\r\n-      const { data: existingContent, error: checkError } = await supabase\r\n-        .from('lesson_content')\r\n-        .select('id')\r\n-        .eq('lesson_id', currentLessonId)\r\n-        .order('updated_at', { ascending: false })\r\n-        .limit(1)\r\n-        .maybeSingle();\r\n-\r\n-      // If content exists, update it; if not, insert new\r\n-      const { error } = await supabase\r\n-        .from('lesson_content')\r\n-        .upsert({\r\n-          id: existingContent?.id, // This ensures we update if id exists\r\n-          lesson_id: currentLessonId,\r\n-          content: [content],\r\n-          content_type: 'text',\r\n-          metadata: {\r\n-            heading: contentHeading\r\n-          },\r\n-          user_id: session.user.id,\r\n-          updated_at: new Date().toISOString()\r\n-        }, {\r\n-          onConflict: 'id'  // This ensures we update based on lesson_id\r\n-        });\r\n-\r\n-      if (error) throw error;\r\n-\r\n-      // Save questions separately\r\n-      for (const question of questions) {\r\n-        const { exercisePrompts, ...questionData } = question; // Remove exercisePrompts from question data\r\n-        \r\n-        // Save question\r\n-        const { error: questionError } = await supabase\r\n-          .from('questions')\r\n-          .upsert(questionData, {\r\n-            onConflict: 'id'\r\n-          })\r\n-          .select();\r\n-\r\n-        if (questionError) throw questionError;\r\n-\r\n-        // Save exercise prompts\r\n-        if (exercisePrompts?.length > 0) {\r\n-          for (const prompt of exercisePrompts) {\r\n-            const { error: promptError } = await supabase\r\n-              .from('exercise_prompts')\r\n-              .upsert(prompt, {\r\n-                onConflict: 'id'\r\n-              })\r\n-              .select();\r\n-\r\n-            if (promptError) throw promptError;\r\n-          }\r\n-        }\r\n-      }\r\n-      \r\n-      toast.success(\"Content saved successfully\", {\r\n-        action: {\r\n-          label: \"Close\",\r\n-          onClick: () => toast.dismiss()\r\n-        },\r\n-        id: loadingToast,\r\n-      });\r\n-      setIsContentEditorOpen(false);\r\n-    } catch (error) {\r\n-      console.error('Error saving content:', error);\r\n-      toast.error(\"Failed to save content\", {\r\n-        action: {\r\n-          label: \"Close\",\r\n-          onClick: () => toast.dismiss()\r\n-        },\r\n-        id: loadingToast,\r\n-      });\r\n-    }\r\n-  };\r\n-\r\n-  // Add this component for inline editing\r\n-  const InlineEdit = ({ \r\n-    value, \r\n-    onSave, \r\n-    isEditing, \r\n-    setIsEditing, \r\n-    placeholder,\r\n-    className = \"\"\r\n-  }: InlineEditProps) => {\r\n-    const [tempValue, setTempValue] = useState(value);\r\n-    \r\n-    return isEditing ? (\r\n-      <div className=\"flex items-center gap-2\">\r\n-        <Input\r\n-          value={tempValue}\r\n-          onChange={(e) => setTempValue(e.target.value)}\r\n-          placeholder={placeholder}\r\n-          className={className}\r\n-          autoFocus\r\n-        />\r\n-        <Button\r\n-          size=\"sm\"\r\n-          variant=\"ghost\"\r\n-          onClick={() => {\r\n-            onSave(tempValue);\r\n-            setIsEditing(false);\r\n-          }}\r\n-        >\r\n-          <Check className=\"h-4 w-4 text-green-500\" />\r\n-        </Button>\r\n-        <Button\r\n-          size=\"sm\"\r\n-          variant=\"ghost\"\r\n-          onClick={() => setIsEditing(false)}\r\n-        >\r\n-          <X className=\"h-4 w-4 text-red-500\" />\r\n-        </Button>\r\n-      </div>\r\n-    ) : (\r\n-      <div \r\n-        className=\"group flex items-center gap-2 cursor-pointer\"\r\n-        onClick={() => setIsEditing(true)}\r\n-      >\r\n-        <span className={className}>{value || placeholder}</span>\r\n-        <Pencil className=\"h-4 w-4 opacity-0 group-hover:opacity-100 transition-opacity\" />\r\n-      </div>\r\n-    );\r\n-  };\r\n-\r\n-  // Add this effect to handle auto-collapse after lesson selection\r\n-  useEffect(() => {\r\n-    if (currentLessonId && selectedGradeId && selectedTopicId && selectedSubtopicId) {\r\n-      setIsSidebarLocked(false);\r\n-      // Optional: add a slight delay before collapsing\r\n-      setTimeout(() => setIsSidebarCollapsed(true), 300);\r\n-    }\r\n-  }, [currentLessonId, selectedGradeId, selectedTopicId, selectedSubtopicId]);\r\n-\r\n-  // Add individual save handlers\r\n-  // const handleSaveQuestion = async (question: Question, index: number) => {\r\n-  //   try {\r\n-  //     // Update status to saving\r\n-  //     setQuestionSaveStatuses(prev => [\r\n-  //       ...prev.filter(s => s.id !== question.id),\r\n-  //       { id: question.id, status: 'saving' }\r\n-  //     ]);\r\n-\r\n-  //     const questionUpsert = {\r\n-  //       id: question.id,\r\n-  //       lesson_id: currentLessonId,\r\n-  //       type: question.type,\r\n-  //       title: question.data?.prompt || 'Untitled Question',\r\n-  //       metadata: question.metadata || {},\r\n-  //       data: {\r\n-  //         prompt: question.data?.prompt || '',\r\n-  //         teacherScript: question.data?.teacherScript || '',\r\n-  //         ...question.data\r\n-  //       },\r\n-  //       order_index: index,\r\n-  //       created_at: new Date().toISOString(),\r\n-  //       updated_at: new Date().toISOString()\r\n-  //     };\r\n-\r\n-  //     const { error: questionError } = await supabase\r\n-  //       .from('questions')\r\n-  //       .upsert(questionUpsert);\r\n-\r\n-  //     if (questionError) throw questionError;\r\n-\r\n-  //     // Update status to saved\r\n-  //     setQuestionSaveStatuses(prev => [\r\n-  //       ...prev.filter(s => s.id !== question.id),\r\n-  //       { id: question.id, status: 'saved', lastSaved: new Date().toISOString() }\r\n-  //     ]);\r\n-\r\n-  //     toast.success(`Question ${index + 1} saved successfully`);\r\n-  //   } catch (error) {\r\n-  //     console.error('Error saving question:', error);\r\n-  //     setQuestionSaveStatuses(prev => [\r\n-  //       ...prev.filter(s => s.id !== question.id),\r\n-  //       { id: question.id, status: 'error' }\r\n-  //     ]);\r\n-  //     toast.error(`Failed to save question ${index + 1}`);\r\n-  //   }\r\n-  // };\r\n-\r\n-  const handleSavePrompt = async (questionId: string, prompt: ExercisePrompt, promptIndex: number) => {\r\n-    try {\r\n-      setPromptSaveStatuses(prev => [\r\n-        ...prev.filter(s => s.id !== prompt.id),\r\n-        { id: prompt.id || '', status: 'saving' } as SaveStatus\r\n-      ]);\r\n-\r\n-      const promptUpsert = {\r\n-        id: prompt.id,\r\n-        question_id: questionId,\r\n-        text: prompt.text || '',\r\n-        type: prompt.type || 'text',\r\n-        narration: prompt.narration || '',\r\n-        saytext: prompt.saytext || '',\r\n-        media: prompt.media || [],\r\n-        order_index: promptIndex,\r\n-        created_at: prompt.created_at || new Date().toISOString(),\r\n-        updated_at: new Date().toISOString()\r\n-      };\r\n-\r\n-      const { error: promptError } = await supabase\r\n-        .from('exercise_prompts')\r\n-        .upsert(promptUpsert);\r\n-\r\n-      if (promptError) throw promptError;\r\n-\r\n-      setPromptSaveStatuses(prev => [\r\n-        ...prev.filter(s => s.id !== prompt.id),\r\n-        { id: prompt.id || '', status: 'saved', lastSaved: new Date().toISOString() } as SaveStatus\r\n-      ]);\r\n-\r\n-      toast.success(`Prompt ${promptIndex + 1} saved successfully`);\r\n-    } catch (error) {\r\n-      console.error('Error saving prompt:', error);\r\n-      setPromptSaveStatuses(prev => [\r\n-        ...prev.filter(s => s.id !== prompt.id),\r\n-        { id: prompt.id || '', status: 'error' } as SaveStatus\r\n-      ]);\r\n-      toast.error(`Failed to save prompt ${promptIndex + 1}`);\r\n-    }\r\n-  };\r\n-\r\n-  // Add effect to mark items as draft when edited\r\n-  useEffect(() => {\r\n-    questions.forEach(question => {\r\n-      if (!questionSaveStatuses.find(s => s.id === question.id)) {\r\n-        setQuestionSaveStatuses(prev => [\r\n-          ...prev,\r\n-          { id: question.id, status: 'draft' }\r\n-        ]);\r\n-      }\r\n-    });\r\n-  }, [questions]);\r\n-\r\n-  // Add this function with your other handlers\r\n-  const handleRefreshLesson = async () => {\r\n-    if (!currentLessonId) {\r\n-      toast.error('No lesson selected');\r\n-      return;\r\n-    }\r\n-    \r\n-    try {\r\n-      toast.loading('Refreshing lesson content...', {\r\n-        action: {\r\n-          label: \"Close\",\r\n-          onClick: () => toast.dismiss()\r\n-        },\r\n-      });\r\n-      await handleLessonSelect(currentLessonId);\r\n-      toast.success('Content refreshed', {\r\n-        action: {\r\n-          label: \"Close\",\r\n-          onClick: () => toast.dismiss()\r\n-        },\r\n-      });\r\n-    } catch (error) {\r\n-      console.error('Error refreshing lesson:', error);\r\n-      toast.error('Failed to refresh content', {\r\n-        action: {\r\n-          label: \"Close\",\r\n-          onClick: () => toast.dismiss()\r\n-        },\r\n-      });\r\n-    }\r\n-  };\r\n-\r\n-  // Add this function to handle refresh\r\n-  const handleRefreshContent = async () => {\r\n-    if (!currentLessonId) {\r\n-      toast.error('No lesson selected');\r\n-      return;\r\n-    }\r\n-    \r\n-    toast.loading('Refreshing content...');\r\n-    try {\r\n-      await loadLessonContent(currentLessonId);\r\n-      toast.success('Content refreshed');\r\n-    } catch (error) {\r\n-      console.error('Refresh error:', error);\r\n-      toast.error('Failed to refresh content');\r\n-    }\r\n-  };\r\n-\r\n-  // Update the sidebar hover mechanism\r\n-  const handleSidebarHover = useCallback(\r\n-    debounce((isHovering: boolean) => {\r\n-      if (!isSidebarLocked && !isNavigating && !isDropdownOpen) {\r\n-        if (isHovering || document.activeElement?.closest('.sidebar-content')) {\r\n-          setIsSidebarCollapsed(false);\r\n-        } else {\r\n-          setTimeout(() => {\r\n-            if (!isDropdownOpen) { // Only collapse if dropdown is closed\r\n-              setIsSidebarCollapsed(true);\r\n-            }\r\n-          }, 300);\r\n-        }\r\n-      }\r\n-    }, 100),\r\n-    [isSidebarLocked, isNavigating, isDropdownOpen]\r\n-  );\r\n-\r\n-  // Update the sidebar JSX\r\n-  <div \r\n-    className={cn(\r\n-      \"transition-all duration-300 ease-in-out relative\",\r\n-      isSidebarCollapsed ? \"w-20\" : \"w-80\",\r\n-      \"flex-shrink-0 group\"\r\n-    )}\r\n-    onMouseEnter={() => {\r\n-      handleSidebarHover(true);\r\n-      // Immediately expand on mouse enter\r\n-      if (!isSidebarLocked) {\r\n-        setIsSidebarCollapsed(false);\r\n-      }\r\n-    }}\r\n-    onMouseLeave={() => {\r\n-      // Only collapse if not interacting with content\r\n-      if (!document.activeElement?.closest('.sidebar-content')) {\r\n-        handleSidebarHover(false);\r\n-      }\r\n-    }}\r\n-    onFocus={() => setIsSidebarCollapsed(false)}\r\n-  >\r\n-    <Card className={cn(\r\n-      \"h-full relative sidebar-content\", // Added sidebar-content class\r\n-      \"transition-shadow duration-300\",\r\n-      \"hover:shadow-lg\"\r\n-    )}>\r\n-      {/* Rest of sidebar content */}\r\n-    </Card>\r\n-  </div>\r\n-\r\n-  // Update the sidebar and card styles\r\n-  return (\r\n-      <div className=\"container mx-auto py-8\">\r\n-        {/* Header */}\r\n-        <div className=\"flex items-center justify-between mb-2\">\r\n-          {/* ... header content ... */}\r\n-          <div className=\"flex items-center gap-4\">\r\n-            <Link href=\"/super-admin\">\r\n-              <Button variant=\"outline\" className=\"gap-2\">\r\n-                <ArrowLeft className=\"h-4 w-4\" />\r\n-                Back\r\n-              </Button>\r\n-            </Link>\r\n-            <div className=\"flex items-center gap-2\">\r\n-              <h1 className=\"text-2xl font-bold\">Lesson Management</h1>\r\n-              <Button\r\n-                variant=\"ghost\"\r\n-                size=\"icon\"\r\n-                onClick={handleRefreshLesson}\r\n-                className=\"ml-2\"\r\n-                title=\"Refresh lesson content\"\r\n-              >\r\n-                <RefreshCw className=\"h-4 w-4\" />\r\n-              </Button>\r\n-            </div>\r\n-            <p className=\"text-sm text-muted-foreground\">Create and manage your educational content</p>\r\n-          </div>\r\n-          <div className=\"flex items-center gap-2\">\r\n-            <Button\r\n-              variant=\"outline\"\r\n-              size=\"sm\"\r\n-              onClick={() => setShowHelpTips(!showHelpTips)}\r\n-              className=\"gap-2\"\r\n-            >\r\n-              {showHelpTips ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\r\n-              {showHelpTips ? 'Hide Tips' : 'Show Tips'}\r\n-            </Button>\r\n-          </div>\r\n-        </div>\r\n-        \r\n-        {/* Main content wrapper - Fix the layout here */}\r\n-        <div className=\"flex gap-6 h-[calc(100vh-200px)]\">\r\n-          {/* Improved sidebar */}\r\n-          <div \r\n-            className={cn(\r\n-              \"transition-all duration-300 ease-in-out relative\",\r\n-              isSidebarCollapsed ? \"w-20\" : \"w-80\",\r\n-              \"flex-shrink-0 group\"\r\n-            )}\r\n-            onMouseEnter={() => {\r\n-              handleSidebarHover(true);\r\n-              // Immediately expand on mouse enter\r\n-              if (!isSidebarLocked) {\r\n-                setIsSidebarCollapsed(false);\r\n-              }\r\n-            }}\r\n-            onMouseLeave={() => {\r\n-              // Only collapse if not interacting with content\r\n-              if (!document.activeElement?.closest('.sidebar-content')) {\r\n-                handleSidebarHover(false);\r\n-              }\r\n-            }}\r\n-            onFocus={() => setIsSidebarCollapsed(false)}\r\n-          >\r\n-            <Card className={cn(\r\n-              \"h-full relative sidebar-content\", // Added sidebar-content class\r\n-              \"transition-shadow duration-300\",\r\n-              \"hover:shadow-lg\"\r\n-            )}>\r\n-              {/* Lock button - only show after lesson selection */}\r\n-              {currentLessonId && (\r\n-                <Button\r\n-                  variant=\"ghost\"\r\n-                  size=\"sm\"\r\n-                  className=\"absolute top-2 right-2 z-10\"\r\n-                  onClick={() => {\r\n-                    setIsSidebarLocked(!isSidebarLocked);\r\n-                    if (!isSidebarLocked) {\r\n-                      setIsSidebarCollapsed(false);\r\n-                    }\r\n-                  }}\r\n-                >\r\n-                  {isSidebarLocked ? <Lock className=\"h-4 w-4\" /> : <Unlock className=\"h-4 w-4\" />}\r\n-                </Button>\r\n-              )}\r\n-\r\n-              {/* Sidebar content with overflow handling */}\r\n-              <div className={cn(\r\n-                \"transition-all duration-300 overflow-hidden\",\r\n-                isSidebarCollapsed ? \"opacity-0\" : \"opacity-100\"\r\n-              )}>\r\n-                <Card className=\"h-full\">\r\n-                  <CardHeader className=\"pb-3\">\r\n-                    <div className=\"flex items-center justify-between\">\r\n-                      <CardTitle className=\"text-lg font-semibold\">Content Management</CardTitle>\r\n-                      <TooltipProvider>\r\n-                        <Tooltip>\r\n-                          <TooltipTrigger>\r\n-                            <HelpCircle className=\"h-4 w-4 text-muted-foreground\" />\r\n-                          </TooltipTrigger>\r\n-                          <TooltipContent>\r\n-                            <p>Manage your educational content here</p>\r\n-                          </TooltipContent>\r\n-                        </Tooltip>\r\n-                      </TooltipProvider>\r\n-                      </div>\r\n-                    <CardDescription>Create and manage your lessons</CardDescription>\r\n-                  </CardHeader>\r\n-                  <CardContent className=\"space-y-4\">\r\n-                    {/* View/Edit Mode Toggle */}\r\n-                    <div className=\"grid grid-cols-2 gap-2 p-1 bg-muted rounded-lg\">\r\n-                      <Button\r\n-                        variant={isViewMode ? \"default\" : \"ghost\"}\r\n-                        size=\"sm\"\r\n-                        onClick={() => setIsViewMode(true)}\r\n-                        className=\"w-full\"\r\n-                      >\r\n-                        <Eye className=\"h-4 w-4 mr-2\" />\r\n-                        View\r\n-                      </Button>\r\n-                      <Button\r\n-                        variant={!isViewMode ? \"default\" : \"ghost\"}\r\n-                        size=\"sm\"\r\n-                        onClick={() => setIsViewMode(false)}\r\n-                        className=\"w-full\"\r\n-                      >\r\n-                        <Edit className=\"h-4 w-4 mr-2\" />\r\n-                        Edit\r\n-                      </Button>\r\n-                    </div>\r\n-\r\n-                    {/* Grade Selection */}\r\n-                    <div className=\"space-y-2\">\r\n-                      <div className=\"flex items-center justify-between\">\r\n-                        <Label htmlFor=\"grade-select\">Grade</Label>\r\n-                        {isViewMode && (\r\n-                          <Button variant=\"ghost\" size=\"sm\" onClick={() => setExpandedGrade(expandedGrade ? null : selectedGrade)}>\r\n-                            {expandedGrade ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n-                          </Button>\r\n-                        )}\r\n-                      </div>\r\n-                      <Select \r\n-                        value={selectedGradeId || ''}\r\n-                        onValueChange={handleGradeSelect}\r\n-                        onOpenChange={(open) => {\r\n-                          if (open) {\r\n-                            // Force sidebar to stay open and lock it\r\n-                            setIsSidebarCollapsed(false);\r\n-                            setIsSidebarLocked(true);\r\n-                          }\r\n-                        }}\r\n-                      >\r\n-                        <SelectTrigger \r\n-                          id=\"grade-select\" \r\n-                          className=\"w-full\"\r\n-                          onClick={(e) => {\r\n-                            e.stopPropagation(); // Prevent event bubbling\r\n-                            setIsSidebarCollapsed(false);\r\n-                            setIsSidebarLocked(true);\r\n-                          }}\r\n-                        >\r\n-                          <SelectValue placeholder=\"Select Grade\" />\r\n-                        </SelectTrigger>\r\n-                        <SelectContent \r\n-                          onCloseAutoFocus={(e) => {\r\n-                            e.preventDefault();\r\n-                            setIsSidebarLocked(true);\r\n-                            setIsSidebarCollapsed(false);\r\n-                          }}\r\n-                        >\r\n-                          {grades.map((grade: Grade) => (\r\n-                            <SelectItem \r\n-                              key={`grade-${grade.id || 'new'}`} \r\n-                              value={grade.id || ''}\r\n-                              onMouseDown={(e) => {\r\n-                                e.preventDefault();\r\n-                                e.stopPropagation();\r\n-                              }}\r\n-                            >\r\n-                              <div className=\"flex items-center gap-2\">\r\n-                                <BookOpen className=\"h-4 w-4 text-primary\" />\r\n-                                {grade.name}\r\n-                              </div>\r\n-                            </SelectItem>\r\n-                          ))}\r\n-                        </SelectContent>\r\n-                      </Select>\r\n-                      {!isViewMode && (\r\n-                      <Button \r\n-                        variant=\"outline\" \r\n-                        size=\"sm\" \r\n-                        className=\"w-full gap-2\"\r\n-                        onClick={() => setModalState({ ...modalState, showAddGrade: false })}\r\n-                      >\r\n-                        <Plus className=\"h-4 w-4\" />\r\n-                        Add New Grade\r\n-                      </Button>\r\n-                      )}\r\n-                    </div>\r\n-\r\n-                    {/* Content Tree View in View Mode */}\r\n-                    {isViewMode && selectedGrade && (\r\n-  <div className=\"grid grid-cols-1 gap-6 p-6\">\r\n-    <Card className=\"border-primary/10\">\r\n-      <CardHeader>\r\n-        <div className=\"flex items-center justify-between\">\r\n-          <CardTitle>Content Structure</CardTitle>\r\n-          <Badge variant=\"outline\" className=\"text-primary\">\r\n-            {topics.length} Topics\r\n-          </Badge>\r\n-        </div>\r\n-      </CardHeader>\r\n-      <CardContent className=\"space-y-6\">\r\n-        {topics.map((topic) => (\r\n-          <Card \r\n-            key={topic.id} \r\n-            className={cn(\r\n-              \"border-l-4 transition-all duration-200\",\r\n-              \"border-l-primary/40 hover:border-l-primary\"\r\n-            )}\r\n-          >\r\n-            <CardHeader className=\"py-4\">\r\n-              <div className=\"flex items-center justify-between\">\r\n-                <div className=\"flex items-center gap-2\">\r\n-                  <Layers className=\"h-5 w-5 text-primary\" />\r\n-                  <div>\r\n-                    <h3 className=\"font-medium\">{topic.title}</h3>\r\n-                    <p className=\"text-sm text-muted-foreground\">\r\n-                      {subtopics.filter(s => s.topic_id === topic.id).length} Subtopics\r\n-                    </p>\r\n-                  </div>\r\n-                </div>\r\n-                <Button\r\n-                  variant=\"ghost\"\r\n-                  size=\"sm\"\r\n-                  className=\"hover:bg-destructive/10\"\r\n-                  onClick={async () => {\r\n-                    const { canDelete, message } = await checkDeletability('topic', topic.id);\r\n-                    if (!canDelete) {\r\n-                      toast.error(message);\r\n-                      return;\r\n-                    }\r\n-                    setItemToDelete({\r\n-                      id: topic.id,\r\n-                      type: 'topic',\r\n-                      title: topic.title\r\n-                    });\r\n-                    setDeleteDialogOpen(true);\r\n-                  }}\r\n-                >\r\n-                  <Trash className=\"h-4 w-4\" />\r\n-                </Button>\r\n-              </div>\r\n-\r\n-              <div className=\"mt-4 pl-4 space-y-4\">\r\n-                {subtopics\r\n-                  .filter(subtopic => subtopic.topic_id === topic.id)\r\n-                  .map((subtopic) => {\r\n-                    const subtopicLessons = lessons.filter(l => l.subtopic_id === subtopic.id);\r\n-                    const isEmpty = subtopicLessons.length === 0;\r\n-                    \r\n-                    return (\r\n-                      <Card key={subtopic.id} className=\"border-l-2 border-l-primary/20\">\r\n-                        <CardHeader className=\"py-3\">\r\n-                          <div className=\"flex items-center justify-between\">\r\n-                            <div className=\"flex items-center gap-2\">\r\n-                              <BookOpen className=\"h-4 w-4 text-primary\" />\r\n-                              <div>\r\n-                                <h4 className=\"font-medium\">{subtopic.title}</h4>\r\n-                                <div className=\"flex items-center gap-2\">\r\n-                                  <Badge variant=\"outline\">\r\n-                                    {subtopicLessons.length} Lessons\r\n-                                  </Badge>\r\n-                                  {isEmpty && (\r\n-                                    <Badge variant=\"outline\" className=\"text-yellow-500\">\r\n-                                      Empty\r\n-                                    </Badge>\r\n-                                  )}\r\n-                                </div>\r\n-                              </div>\r\n-                            </div>\r\n-                            <Button\r\n-                              variant=\"ghost\"\r\n-                              size=\"sm\"\r\n-                              className=\"hover:bg-destructive/10\"\r\n-                              onClick={async () => {\r\n-                                const { canDelete, message } = await checkDeletability('subtopic', subtopic.id);\r\n-                                if (!canDelete) {\r\n-                                  toast.error(message);\r\n-                                  return;\r\n-                                }\r\n-                                setItemToDelete({\r\n-                                  id: subtopic.id,\r\n-                                  type: 'subtopic',\r\n-                                  title: subtopic.title\r\n-                                });\r\n-                                setDeleteDialogOpen(true);\r\n-                              }}\r\n-                            >\r\n-                              <Trash className=\"h-4 w-4\" />\r\n-                            </Button>\r\n-                          </div>\r\n-\r\n-                          <div className=\"pl-4 mt-2 space-y-2\">\r\n-                            {subtopicLessons.map((lesson) => {\r\n-                              const questionCount = lesson.questions?.length || 0;\r\n-                              const isEmpty = questionCount === 0;\r\n-                              \r\n-                              return (\r\n-                                <Card key={lesson.id} className=\"border-l border-l-primary/10\">\r\n-                                  <CardHeader className=\"py-2\">\r\n-                                    <div className=\"flex items-center justify-between\">\r\n-                                      <div className=\"flex items-center gap-2\">\r\n-                                        <div className=\"flex flex-col\">\r\n-                                          <span className=\"text-sm font-medium\">\r\n-                                            {lesson.title}\r\n-                                          </span>\r\n-                                          <div className=\"flex items-center gap-2\">\r\n-                                            <span className=\"text-xs text-muted-foreground\">\r\n-                                              {lesson.duration || 0} mins • {questionCount} Questions\r\n-                                            </span>\r\n-                                            {isEmpty && (\r\n-                                              <Badge \r\n-                                                variant=\"outline\" \r\n-                                                className=\"text-yellow-500\"\r\n-                                              >\r\n-                                                Empty\r\n-                                              </Badge>\r\n-                                            )}\r\n-                                          </div>\r\n-                                        </div>\r\n-                                      </div>\r\n-                                      <Button\r\n-                                        variant=\"ghost\"\r\n-                                        size=\"sm\"\r\n-                                        className=\"hover:bg-destructive/10\"\r\n-                                        onClick={async () => {\r\n-                                          const { canDelete, message } = await checkDeletability('lesson', lesson.id);\r\n-                                          if (!canDelete) {\r\n-                                            toast.error(message);\r\n-                                            return;\r\n-                                          }\r\n-                                          setItemToDelete({\r\n-                                            id: lesson.id,\r\n-                                            type: 'lesson',\r\n-                                            title: lesson.title\r\n-                                          });\r\n-                                          setDeleteDialogOpen(true);\r\n-                                        }}\r\n-                                      >\r\n-                                        <Trash className=\"h-4 w-4\" />\r\n-                                      </Button>\r\n-                                    </div>\r\n-                                  </CardHeader>\r\n-                                </Card>\r\n-                              );\r\n-                            })}\r\n-                          </div>\r\n-                        </CardHeader>\r\n-                      </Card>\r\n-                    );\r\n-                  })}\r\n-              </div>\r\n-            </CardHeader>\r\n-          </Card>\r\n-        ))}\r\n-      </CardContent>\r\n-    </Card>\r\n-  </div>\r\n-)}\r\n-\r\n-                    {/* Regular Edit Mode Content */}\r\n-                    {!isViewMode && (\r\n-                      <>\r\n-                        {/* Existing Topic, Subtopic, and Lesson Selection UI */}\r\n-                      {/* Topic Selection */}\r\n-                        {selectedGradeId && (\r\n-                      <div className=\"space-y-2\">\r\n-                        <div className=\"flex items-center justify-between\">\r\n-                        <Label htmlFor=\"topic-select\">Topic</Label>\r\n-                        </div>\r\n-                        <Select \r\n-                              value={selectedTopicId || ''} \r\n-                              onValueChange={handleTopicSelect}\r\n-                        >\r\n-                          <SelectTrigger id=\"topic-select\" className=\"w-full\">\r\n-                            <SelectValue placeholder=\"Select Topic\" />\r\n-                          </SelectTrigger>\r\n-                          <SelectContent>\r\n-                                {topics.map((topic: Topic) => (\r\n-                                  <SelectItem \r\n-                                    key={`topic-${topic.id || 'new'}`} \r\n-                                    value={topic.id || ''}\r\n-                                  >\r\n-                                  <div className=\"flex items-center gap-2\">\r\n-                                  <Layers className=\"h-4 w-4 text-primary\" />\r\n-                                    {topic.title}\r\n-                                  </div>\r\n-                                </SelectItem>\r\n-                              ))}\r\n-                          </SelectContent>\r\n-                        </Select>\r\n-                        <Button \r\n-                          variant=\"outline\" \r\n-                          size=\"sm\" \r\n-                          className=\"w-full gap-2\"\r\n-                          onClick={() => setModalState({ ...modalState, showAddTopic: true })}\r\n-                        >\r\n-                          <Plus className=\"h-4 w-4\" />\r\n-                          Add New Topic\r\n-                        </Button>\r\n-                      </div>\r\n-                    )}\r\n-\r\n-                    {/* Subtopic Selection */}\r\n-                        {selectedTopicId && (\r\n-                      <div className=\"space-y-2\">\r\n-                        <div className=\"flex items-center justify-between\">\r\n-                        <Label htmlFor=\"subtopic-select\">Subtopic</Label>\r\n-                        </div>\r\n-                        <Select \r\n-                              value={selectedSubtopicId || ''} \r\n-                              onValueChange={handleSubtopicSelect}\r\n-                        >\r\n-                          <SelectTrigger id=\"subtopic-select\" className=\"w-full\">\r\n-                            <SelectValue placeholder=\"Select Subtopic\" />\r\n-                          </SelectTrigger>\r\n-                          <SelectContent>\r\n-                                {subtopics\r\n-                                  .filter(subtopic => subtopic.id)\r\n-                                  .map((subtopic, index) => (\r\n-                                    <SelectItem \r\n-                                      key={subtopic.id || `subtopic-${index}`}\r\n-                                      value={subtopic.id || ''}\r\n-                                    >\r\n-                                      {subtopic.title || 'Untitled Subtopic'}\r\n-                                    </SelectItem>\r\n-                                  ))}\r\n-                          </SelectContent>\r\n-                        </Select>\r\n-                        {!isViewMode && (\r\n-                          <Button \r\n-                            variant=\"outline\" \r\n-                            size=\"sm\" \r\n-                            className=\"w-full gap-2\"\r\n-                            onClick={() => setModalState({ ...modalState, showAddSubtopic: true })}\r\n-                          >\r\n-                            <Plus className=\"h-4 w-4\" />\r\n-                            Add New Subtopic\r\n-                          </Button>\r\n-                        )}\r\n-                      </div>\r\n-                    )}\r\n-\r\n-                    {/* Lesson Selection */}\r\n-                        {selectedSubtopicId && (\r\n-                      <div className=\"space-y-2\">\r\n-                        <div className=\"flex items-center justify-between\">\r\n-                          <Label htmlFor=\"lesson-select\">Lesson</Label>\r\n-                        </div>\r\n-                          <Select \r\n-                            value={currentLessonId || ''} \r\n-                            onValueChange={handleLessonSelect}\r\n-                            onOpenChange={(open) => {\r\n-                              setIsDropdownOpen(open);\r\n-                              if (open) {\r\n-                                setIsSidebarCollapsed(false);\r\n-                                setIsSidebarLocked(true);\r\n-                              } else {\r\n-                                // Small delay before unlocking to prevent immediate collapse\r\n-                                setTimeout(() => {\r\n-                                  setIsSidebarLocked(false);\r\n-                                }, 100);\r\n-                              }\r\n-                            }}\r\n-                          >\r\n-                            <SelectTrigger \r\n-                              id=\"lesson-select\" \r\n-                              className=\"w-full\"\r\n-                              onClick={(e) => {\r\n-                                e.stopPropagation();\r\n-                                setIsSidebarCollapsed(false);\r\n-                                setIsSidebarLocked(true);\r\n-                              }}\r\n-                            >\r\n-                              <SelectValue placeholder=\"Select Lesson\" />\r\n-                            </SelectTrigger>\r\n-                            <SelectContent>\r\n-                              {lessons\r\n-                                .filter((lesson): lesson is Lesson => lesson !== undefined && lesson !== null)\r\n-                                .map((lesson: Lesson) => (\r\n-                                  <SelectItem \r\n-                                    key={`lesson-${lesson.id || 'new'}`} \r\n-                                    value={lesson.id || ''}\r\n-                                  >\r\n-                                    <div className=\"flex items-center gap-2\">\r\n-                                      <BookOpen className=\"h-4 w-4 text-primary\" />\r\n-                                      {lesson.title || 'Untitled Lesson'}\r\n-                                    </div>\r\n-                                  </SelectItem>\r\n-                                ))}\r\n-                            </SelectContent>\r\n-                          </Select>\r\n-                    <Button \r\n-                            variant=\"outline\" \r\n-                            size=\"sm\" \r\n-                            className=\"w-full gap-2\"\r\n-                        onClick={() => setModalState({ ...modalState, showAddLesson: true })}\r\n-                          >\r\n-                            <Plus className=\"h-4 w-4\" />\r\n-                            Add New Lesson\r\n-                    </Button>\r\n-                      </div>\r\n-                        )}\r\n-                      </>\r\n-                    )}\r\n-                  </CardContent>\r\n-                </Card>\r\n-              </div>\r\n-\r\n-              {/* Collapsed view */}\r\n-              {isSidebarCollapsed && (\r\n-                <div className=\"absolute inset-0 flex flex-col items-center pt-12 gap-4\">\r\n-                  <BookOpen className=\"h-6 w-6 text-muted-foreground\" />\r\n-                  <div className=\"w-px h-full bg-border\" />\r\n-                </div>\r\n-              )}\r\n-            </Card>\r\n-          </div>\r\n-        \r\n-\r\n-          {/* Right Content Area */}\r\n-          <div className=\"flex-1 overflow-y-auto\">\r\n-            {isNavigating ? (\r\n-              <div className=\"flex items-center justify-center h-[400px]\">\r\n-                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n-                <span className=\"ml-3\">Loading...</span>\r\n-              </div>\r\n-            ) : (\r\n-              <>\r\n-                {!selectedGradeId ? (\r\n-                  // Question Types Display Section\r\n-                  <div className=\"space-y-6\">\r\n-                    <Card>\r\n-                      <CardHeader>\r\n-                        <div className=\"flex items-center justify-between\">\r\n-                          <div>\r\n-                            <CardTitle className=\"text-xl font-semibold\">Available Question Types</CardTitle>\r\n-                            <CardDescription>Browse through different question formats and examples</CardDescription>\r\n-                          </div>\r\n-                          <TooltipProvider>\r\n-                            <Tooltip>\r\n-                              <TooltipTrigger>\r\n-                                <HelpCircle className=\"h-5 w-5 text-muted-foreground\" />\r\n-                              </TooltipTrigger>\r\n-                              <TooltipContent>\r\n-                                <p>Click on each type to see detailed examples</p>\r\n-                              </TooltipContent>\r\n-                            </Tooltip>\r\n-                          </TooltipProvider>\r\n-                        </div>\r\n-                      </CardHeader>\r\n-                      <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n-                        {Object.entries(QUESTION_TYPES).map(([type, details]) => (\r\n-                          <Card key={type} className=\"cursor-pointer hover:bg-accent/50 transition-colors\">\r\n-                            <CardHeader className=\"p-4\">\r\n-                              <div className=\"flex items-center justify-between mb-2\">\r\n-                                <Badge variant=\"outline\" className=\"bg-primary/5 text-lg\">\r\n-                                  {details.label}\r\n-                                </Badge>\r\n-                              </div>\r\n-                              <CardDescription className=\"text-sm\">\r\n-                                {details.description || 'No description available'}\r\n-                              </CardDescription>\r\n-                              <div className=\"mt-4\">\r\n-                                <div className=\"text-sm font-medium mb-2\">Example:</div>\r\n-                                <div className=\"p-3 rounded-md bg-muted/50 text-sm\">\r\n-                                  {type === 'multiple-choice' && (\r\n-                                    <>\r\n-                                      <div className=\"font-medium mb-2\">Q: What is the capital of France?</div>\r\n-                                      <div className=\"space-y-1 pl-4\">\r\n-                                        <div>A) Paris</div>\r\n-                                        <div>B) London</div>\r\n-                                        <div>C) Berlin</div>\r\n-                                        <div>D) Madrid</div>\r\n-                                      </div>\r\n-                                    </>\r\n-                                  )}\r\n-                                  {type === 'fill-in-blank' && (\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <div>Complete the sentence:</div>\r\n-                                      <div>The sun rises in the <span className=\"bg-primary/20 px-2 rounded\">_____</span> and sets in the <span className=\"bg-primary/20 px-2 rounded\">_____</span>.</div>\r\n-                                    </div>\r\n-                                  )}\r\n-                                  {type === 'true-false' && (\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <div className=\"font-medium\">Statement:</div>\r\n-                                      <div>The Earth is flat.</div>\r\n-                                      <div className=\"mt-2\">\r\n-                                        <Badge variant=\"outline\" className=\"mr-2\">True</Badge>\r\n-                                        <Badge variant=\"outline\">False</Badge>\r\n-                                      </div>\r\n-                                    </div>\r\n-                                  )}\r\n-                                  {type === 'matching' && (\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <div className=\"font-medium mb-2\">Match the countries with their capitals:</div>\r\n-                                      <div className=\"grid grid-cols-2 gap-4\">\r\n-                                        <div>\r\n-                                          1. France<br />\r\n-                                          2. Germany<br />\r\n-                                          3. Spain\r\n-                                        </div>\r\n-                                        <div>\r\n-                                          • Berlin<br />\r\n-                                          • Paris<br />\r\n-                                          • Madrid\r\n-                                        </div>\r\n-                                      </div>\r\n-                                    </div>\r\n-                                  )}\r\n-                                  {type === 'ordering' && (\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <div className=\"font-medium mb-2\">Arrange in chronological order:</div>\r\n-                                      <div className=\"space-y-1\">\r\n-                                        <Badge variant=\"outline\" className=\"mr-2\">1</Badge>World War II<br />\r\n-                                        <Badge variant=\"outline\" className=\"mr-2\">2</Badge>Industrial Revolution<br />\r\n-                                        <Badge variant=\"outline\" className=\"mr-2\">3</Badge>Renaissance\r\n-                                      </div>\r\n-                                    </div>\r\n-                                  )}\r\n-                                  {type === 'short-answer' && (\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <div className=\"font-medium\">Question:</div>\r\n-                                      <div>Explain the water cycle in 2-3 sentences.</div>\r\n-                                      <div className=\"mt-2 p-2 border border-dashed rounded-md border-primary/30\">\r\n-                                        Answer space\r\n-                                      </div>\r\n-                                    </div>\r\n-                                  )}\r\n-                                </div>\r\n-                              </div>\r\n-                            </CardHeader>\r\n-                          </Card>\r\n-                        ))}\r\n-                      </CardContent>\r\n-                    </Card>\r\n-                  </div>\r\n-                ) : isViewMode ? (\r\n-                  <div className=\"space-y-6\">\r\n-                    {selectedGradeId ? (\r\n-                      <div className=\"grid grid-cols-1 gap-6\">\r\n-                        {topics.map((topic) => (\r\n-                          <Card key={topic.id} className=\"border-l-4 border-l-primary\">\r\n-                            <CardHeader>\r\n-                              <div className=\"flex items-center justify-between\">\r\n-                                <h3 className=\"text-lg font-semibold\">{topic.title}</h3>\r\n-                              </div>\r\n-                            </CardHeader>\r\n-                            <CardContent>\r\n-                              <div className=\"space-y-4\">\r\n-                                {subtopics\r\n-                                  .filter(subtopic => subtopic.topic_id === topic.id)\r\n-                                  .map((subtopic, index) => (\r\n-                                    <div key={subtopic.id || `subtopic-${index}`} className=\"border-l-2 pl-4\">\r\n-                                      <h4 className=\"text-md font-medium mb-2\">{subtopic.name || 'Untitled Subtopic'}</h4>\r\n-                                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n-                                        {lessons\r\n-                                          .filter(lesson => lesson.subtopic_id === subtopic.id)\r\n-                                          .map((lesson) => (\r\n-                                            <Card \r\n-                                              key={lesson.id} \r\n-                                              className={cn(\r\n-                                                \"cursor-pointer transition-all duration-200\",\r\n-                                                \"hover:shadow-md hover:translate-y-[-2px]\",\r\n-                                                \"hover:bg-accent/50 hover:border-primary/50\",\r\n-                                                \"active:translate-y-[0px]\",\r\n-                                                currentLessonId === lesson.id && \"border-primary bg-accent/50 shadow-md\",\r\n-                                                \"group\" // Enable group hover effects\r\n-                                              )}\r\n-                                              onClick={() => handleLessonSelect(lesson.id)}\r\n-                                            >\r\n-                                              <CardHeader className=\"p-4\">\r\n-                                                <div className=\"flex flex-col gap-2\">\r\n-                                                  <div className=\"flex items-center justify-between\">\r\n-                                                    <div className=\"flex items-center gap-2\">\r\n-                                                      <BookOpen className={cn(\r\n-                                                        \"h-4 w-4 text-primary\",\r\n-                                                        \"transition-transform duration-200\",\r\n-                                                        \"group-hover:scale-110\"\r\n-                                                      )} />\r\n-                                                      <span className=\"font-medium\">{lesson.title}</span>\r\n-                                                    </div>\r\n-                                                    <Button\r\n-                                                      variant=\"outline\"\r\n-                                                      size=\"sm\"\r\n-                                                      className={cn(\r\n-                                                        \"opacity-0 group-hover:opacity-100\",\r\n-                                                        \"transition-all duration-200\",\r\n-                                                        \"hover:bg-primary hover:text-primary-foreground\"\r\n-                                                      )}\r\n-                                                      disabled={!lesson.content || currentLessonId !== lesson.id}\r\n-                                                      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\r\n-                                                        e.stopPropagation();\r\n-                                                        window.location.href = `/teacher/lessons/${lesson.id}`;\r\n-                                                      }}\r\n-                                                    >\r\n-                                                      Start Lesson\r\n-                                                    </Button>\r\n-                                                  </div>\r\n-                                                  <div className=\"flex items-center gap-2\">\r\n-                                                    <Badge variant=\"outline\" className={cn(\r\n-                                                      \"bg-primary/5\",\r\n-                                                      \"transition-colors duration-200\",\r\n-                                                      \"group-hover:bg-primary/10\"\r\n-                                                    )}>\r\n-                                                      {lesson.questions?.length || 0} Questions\r\n-                                                    </Badge>\r\n-                                                    <Badge variant=\"outline\" className={cn(\r\n-                                                      \"bg-primary/5\",\r\n-                                                      \"transition-colors duration-200\",\r\n-                                                      \"group-hover:bg-primary/10\"\r\n-                                                    )}>\r\n-                                                      {lesson.activities?.length || 0} Activities\r\n-                                                    </Badge>\r\n-                                                  </div>\r\n-                                                </div>\r\n-                                              </CardHeader>\r\n-                                            </Card>\r\n-                                          ))}\r\n-                                      </div>\r\n-                                    </div>\r\n-                                  ))}\r\n-                              </div>\r\n-                            </CardContent>\r\n-                          </Card>\r\n-                        ))}\r\n-                      </div>\r\n-                    ) : (\r\n-                      <div className=\"text-center py-20\">\r\n-                        <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\r\n-                        <h3 className=\"text-lg font-medium\">Select a Grade</h3>\r\n-                        <p className=\"text-sm text-muted-foreground\">\r\n-                          Choose a grade from the left panel to start managing content\r\n-                        </p>\r\n-                      </div>\r\n-                    )}\r\n-                  </div>\r\n-                ) : (\r\n-                  // Edit Mode Content\r\n-                  <div className=\"space-y-4\">\r\n-                    {/* Lesson Title */}\r\n-                    <Card>\r\n-                      <CardHeader>\r\n-                        <div className=\"flex items-center justify-between mb-4\">\r\n-                          <h2 className=\"text-2xl font-bold\">Lesson Content</h2>\r\n-                                                    <Button\r\n-                                                      variant=\"outline\"\r\n-                                                      size=\"sm\"\r\n-                            onClick={() => setIsContentEditorOpen(true)}\r\n-                          >\r\n-                            <Pencil className=\"h-4 w-4 mr-2\" />\r\n-                            Edit Content\r\n-                          </Button>\r\n-                        </div>\r\n-                      </CardHeader>\r\n-                      <CardContent className=\"space-y-4\">\r\n-                        {/* Lesson Title */}\r\n-                        <div className=\"flex items-center justify-between\">\r\n-                          <div className=\"space-y-1\">\r\n-                            <Label>Lesson Title</Label>\r\n-                            <InlineEdit\r\n-                              value={lessonTitle}\r\n-                              onSave={async (newTitle) => {\r\n-                                setLessonTitle(newTitle);\r\n-                                await handleSaveLesson();\r\n-                              }}\r\n-                              isEditing={isEditingTitle}\r\n-                              setIsEditing={setIsEditingTitle}\r\n-                              placeholder=\"Enter lesson title\"\r\n-                              className=\"text-lg font-medium\"\r\n-                            />\r\n-                          </div>\r\n-                        </div>\r\n-\r\n-                        {/* Content Editor and Display */}\r\n-                        <div className=\"space-y-4\">\r\n-                          {isContentEditorOpen ? (\r\n-                            <div className=\"border rounded-lg p-4\">\r\n-                              <div className=\"mb-4\">\r\n-                                <Label>Content Heading</Label>\r\n-                                <InlineEdit\r\n-                                  value={contentHeading}\r\n-                                  onSave={(newHeading) => setContentHeading(newHeading)}\r\n-                                  isEditing={isEditingHeading}\r\n-                                  setIsEditing={setIsEditingHeading}\r\n-                                  placeholder=\"Add content heading\"\r\n-                                  className=\"text-base text-muted-foreground\"\r\n-                                />\r\n-                              </div>\r\n-                              <RichTextEditor\r\n-                                value={lessonContent}\r\n-                                onChange={setLessonContent}\r\n-                                onSave={async (content) => {\r\n-                                  await handleContentSave(content);\r\n-                                  setIsContentEditorOpen(false);\r\n-                                }}\r\n-                                placeholder=\"Add lesson content here...\"\r\n-                              />\r\n-                            </div>\r\n-                          ) : lessonContent ? (\r\n-                            <div className=\"prose prose-sm max-w-none\">\r\n-                              {contentHeading && (\r\n-                                <h3 className=\"text-lg font-semibold mb-2\">{contentHeading}</h3>\r\n-                              )}\r\n-                              <div dangerouslySetInnerHTML={{ __html: lessonContent }} />\r\n-                            </div>\r\n-                          ) : (\r\n-                            <div className=\"text-center py-8 text-muted-foreground\">\r\n-                              Click 'Edit Content' to add lesson content\r\n-                            </div>\r\n-                          )}\r\n-                        </div>\r\n-                      </CardContent>\r\n-                    </Card>\r\n-\r\n-                    {/* Tabs */}\r\n-                    <Tabs defaultValue=\"questions\" className=\"mt-6\">\r\n-                    <TabsList className=\"grid w-full grid-cols-2\">\r\n-                        <TabsTrigger value=\"questions\">\r\n-                          <MessageSquare className=\"h-4 w-4 mr-2\" />\r\n-                        Questions\r\n-                      </TabsTrigger>\r\n-                        <TabsTrigger value=\"activities\">\r\n-                          <ActivityIcon className=\"h-4 w-4 mr-2\" />\r\n-                        Activities\r\n-                      </TabsTrigger>\r\n-                    </TabsList>\r\n-\r\n-                      {/* Questions Tab */}\r\n-                      <TabsContent value=\"questions\" className=\"space-y-4\">\r\n-                      <CardHeader>\r\n-                          <CardDescription>Add and manage questions for this lesson</CardDescription>\r\n-                      </CardHeader>\r\n-                        {questions.map((question, index) => (\r\n-                          <Card key={index} className={cn(\r\n-                            \"relative border-l-4 transition-colors duration-200\",\r\n-                            expandedQuestion === index ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\r\n-                          )}>\r\n-                            <CardHeader className=\"pb-3\">\r\n-                              <div className=\"flex items-center justify-between gap-4\">\r\n-                                <div className=\"flex items-center gap-3 min-w-0 flex-1\">\r\n-                                  <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n-                                    <span className=\"px-2 py-1 bg-primary/10 rounded-md text-sm font-semibold text-primary whitespace-nowrap\">\r\n-                                      Q {index + 1}\r\n-                                    </span>\r\n-                                    <Badge variant=\"outline\" className=\"whitespace-nowrap\">\r\n-                                      {QUESTION_TYPES[question.type as keyof typeof QUESTION_TYPES]?.label || question.type}\r\n-                                    </Badge>\r\n-                                    {question.isDraft && (\r\n-                                      <Badge variant=\"secondary\" className=\"whitespace-nowrap\">Draft</Badge>\r\n-                                )}\r\n-                                  </div>\r\n-                                      {expandedQuestion !== index && (\r\n-                                        <div className=\"text-sm text-muted-foreground truncate\">\r\n-                                          {question.title || 'No question text'} - {question.data?.content || 'No question texts'}\r\n-                                        </div>\r\n-                                      )}\r\n-                                    </div>\r\n-                                    <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n-                                      <Button\r\n-                                        variant=\"ghost\"\r\n-                                        size=\"sm\"\r\n-                                        onClick={() => handleQuestionExpand(index)}\r\n-                                      >\r\n-                                        {expandedQuestion === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n-                                      </Button>\r\n-                                      <Button\r\n-                                        variant=\"ghost\"\r\n-                                        size=\"sm\"\r\n-                                        onClick={() => handleRemoveQuestion(index)}\r\n-                                      >\r\n-                                        <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n-                                      </Button>\r\n-                                    </div>\r\n-                                  </div>\r\n-                                </CardHeader>\r\n-                                {expandedQuestion === index && (\r\n-                                  <CardContent>\r\n-                                    <QuestionForm\r\n-                                      key={index}\r\n-                                      question={{ \r\n-                                        ...question, \r\n-                                        lesson_id: currentLessonId || '',\r\n-                                        type: isValidQuestionType(question.type) ? question.type : 'speaking',\r\n-                                        data: {\r\n-                                          prompt: question.data?.prompt ?? '',\r\n-                                          teacher_script: question.data?.teacher_script ?? '',\r\n-                                          followup_prompt: question.data?.followup_prompt ?? [],\r\n-                                          sample_answer: question.data?.sample_answer ?? '',\r\n-                                          \r\n-                                        } \r\n-                                      }}\r\n-                                      index={index}\r\n-                                      onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\r\n-                                        await handleUpdateQuestion(index, {\r\n-                                          ...updatedQuestion,\r\n-                                          data: {\r\n-                                            prompt: updatedQuestion.data?.prompt ?? '',\r\n-                                            teacher_script: updatedQuestion.data?.teacher_script ?? '',\r\n-                                            followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\r\n-                                            sample_answer: updatedQuestion.data?.sample_answer ?? '',\r\n-                                            metadata: updatedQuestion.metadata ?? {},\r\n-                                            },\r\n-                                            correct_answer: updatedQuestion.correct_answer ?? '',\r\n-                                            content: updatedQuestion.content ?? ''  // Add default value\r\n-                                        });\r\n-                                      }}\r\n-                                      onRemove={handleRemoveQuestion}\r\n-                                      onAddExercisePrompt={handleAddExercisePrompt}\r\n-                                      onRemoveExercisePrompt={handleRemoveExercisePrompt}\r\n-                                      onExercisePromptChange={handleExercisePromptChange}\r\n-                                    /><Button \r\n-                                    size=\"sm\"\r\n-                                    variant=\"outline\"\r\n-                                    onClick={() => handleSaveQuestion(question, index)}\r\n-                                    className=\"ml-2\"\r\n-                                  >\r\n-                                    {questionSaveStatuses.find(s => s.id === question.id)?.status === 'saving' ? (\r\n-                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n-                                    ) : (\r\n-                                      <Save className=\"h-4 w-4 mr-2\" />\r\n-                                    )}\r\n-                                    Save Question\r\n-                                                    </Button>\r\n-                                    {/* Exercise Prompts with Save Buttons */}\r\n-                                    {question.exercisePrompts?.map((prompt, promptIndex) => (\r\n-                                      <div key={`${question.id}-prompt-${promptIndex}`} className=\"mt-4\"> {/* Updated key */}\r\n-                                        <div className=\"flex items-center justify-between mb-2\">\r\n-                                          <h4 className=\"text-sm font-medium\">Exercise Prompt {promptIndex + 1}</h4>\r\n-                                          <div className=\"flex items-center gap-2\">\r\n-                                            <TooltipProvider>\r\n-                                              <Tooltip>\r\n-                                                <TooltipTrigger asChild>\r\n-                                                  <Button\r\n-                                                    size=\"sm\"\r\n-                                                    variant=\"outline\"\r\n-                                                    onClick={() => handleSavePrompt(question.id, prompt, promptIndex)}\r\n-                                                    disabled={promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving'}\r\n-                                                  >\r\n-                                                    {promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving' ? (\r\n-                                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n-                                                    ) : (\r\n-                                                      <Save className=\"h-4 w-4 mr-2\" />\r\n-                                                    )}\r\n-                                                    Save Prompt\r\n-                                                  </Button>\r\n-                                                </TooltipTrigger>\r\n-                                                <TooltipContent>\r\n-                                                  {`Status: ${promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}`}\r\n-                                                </TooltipContent>\r\n-                                              </Tooltip>\r\n-                                            </TooltipProvider>\r\n-                                            <Badge variant={\r\n-                                              promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saved'\r\n-                                                ? 'secondary'\r\n-                                                : promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'error'\r\n-                                                ? 'destructive'\r\n-                                                : 'default'\r\n-                                            }>\r\n-                                              {promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}\r\n-                                            </Badge>\r\n-                                                  </div>\r\n-                                        </div>\r\n-                                        <ExercisePromptCard\r\n-                                          key={prompt.id} // Add a unique key here\r\n-                                          prompt={prompt}\r\n-                                          promptIndex={promptIndex}\r\n-                                          onRemove={() => handleRemoveExercisePrompt(index, promptIndex)}\r\n-                                          onUpdate={(updatedPrompt: ExercisePrompt) => {\r\n-                                            // Prevent duplicate updates\r\n-                                            if (updatedPrompt.id === prompt.id) {\r\n-                                              handleExercisePromptChange(index, promptIndex, updatedPrompt);\r\n-                                            }\r\n-                                          }}\r\n-                                        />\r\n-                                      </div>\r\n-                                    ))}\r\n-                                  </CardContent>\r\n-                                )}\r\n-                              </Card>\r\n-                            ))}\r\n-\r\n-                            {/* Add Question Button */}\r\n-                            <div className=\"flex items-center justify-between\">\r\n-                              <QuestionTypeSelect \r\n-                                value={selectedQuestionType} \r\n-                                onChange={handleQuestionTypeChange}\r\n-                              />\r\n-                                        <Button\r\n-                                          onClick={handleAddQuestion}\r\n-                                          disabled={!selectedQuestionType}\r\n-                                        >\r\n-                                <Plus className=\"h-4 w-4 mr-2\" />\r\n-                                          Add Question\r\n-                                        </Button>\r\n-                                      </div>\r\n-                      </TabsContent>\r\n-\r\n-                      {/* Activities Tab */}\r\n-                      <TabsContent value=\"activities\" className=\"space-y-4\">\r\n-                      <CardHeader>\r\n-                          <CardDescription>Add and manage activities for this lesson</CardDescription>\r\n-                      </CardHeader>\r\n-                        {activities.map((activity, index) => (\r\n-                          <Card key={index}>\r\n-                            <CardHeader className=\"pb-3\">\r\n-                              <div className=\"flex items-center justify-between\">\r\n-                                  <div className=\"flex items-center gap-2\">\r\n-                                  <Badge variant=\"outline\">Activity {index + 1}</Badge>\r\n-                                  </div>\r\n-                                <div className=\"flex items-center gap-2\">\r\n-                                  <Button\r\n-                                    variant=\"ghost\"\r\n-                                    size=\"sm\"\r\n-                                    onClick={() => handleActivityExpand(index)}\r\n-                                  >\r\n-                                    {expandedActivity === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n-                                  </Button>\r\n-                                  <Button\r\n-                                    variant=\"ghost\"\r\n-                                    size=\"sm\"\r\n-                                    onClick={() => handleRemoveActivity(index)}\r\n-                                  >\r\n-                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n-                                  </Button>\r\n-                                </div>\r\n-                              </div>\r\n-                            </CardHeader>\r\n-                            {expandedActivity === index && (\r\n-                              <CardContent>\r\n-                                <div className=\"space-y-4\">\r\n-                                  <div className=\"space-y-2\">\r\n-                                    <Label>Instructions</Label>\r\n-                                    <Textarea\r\n-                                      value={activity.instructions}\r\n-                                      onChange={(e) => handleUpdateActivity(index, {\r\n-                                        ...activity,\r\n-                                        instructions: e.target.value\r\n-                                      })}\r\n-                                      placeholder=\"Enter activity instructions\"\r\n-                                    />\r\n-                                  </div>\r\n-                                    \r\n-                                    {/* Media Section */}\r\n-                                    <div className=\"space-y-2\">\r\n-                                      <Label>Media</Label>\r\n-                                      {activity.media?.map((media, mediaIndex) => (\r\n-                                        <div key={mediaIndex} className=\"flex items-center gap-2\">\r\n-                                          <Input\r\n-                                            value={media.url}\r\n-                                            onChange={(e) => {\r\n-                                              const updatedMedia = [...(activity.media || [])];\r\n-                                              updatedMedia[mediaIndex] = {\r\n-                                                type: media.type,\r\n-                                                url: e.target.value\r\n-                                              };\r\n-                                              handleUpdateActivity(index, {\r\n-                                                ...activity,\r\n-                                                media: updatedMedia\r\n-                                              });\r\n-                                            }}\r\n-                                            placeholder=\"Media URL\"\r\n-                                          />\r\n-                                          <Select\r\n-                                            value={media.type}\r\n-                                            onValueChange={(value) => {\r\n-                                              const updatedMedia = [...(activity.media || [])];\r\n-                                              updatedMedia[mediaIndex] = {\r\n-                                                type: value as 'image' | 'gif' | 'video',\r\n-                                                url: media.url\r\n-                                              };\r\n-                                              handleUpdateActivity(index, {\r\n-                                                ...activity,\r\n-                                                media: updatedMedia\r\n-                                              });\r\n-                                            }}\r\n-                                          >\r\n-                                            <SelectTrigger className=\"w-[120px]\">\r\n-                                              <SelectValue placeholder=\"Type\" />\r\n-                                            </SelectTrigger>\r\n-                                            <SelectContent>\r\n-                                              <SelectItem value=\"image\">Image</SelectItem>\r\n-                                              <SelectItem value=\"gif\">GIF</SelectItem>\r\n-                                              <SelectItem value=\"video\">Video</SelectItem>\r\n-                                            </SelectContent>\r\n-                                          </Select>\r\n-                                <Button\r\n-                                            variant=\"ghost\"\r\n-                                            size=\"sm\"\r\n-                                  onClick={() => {\r\n-                                              const updatedMedia = (activity.media || []).filter((_, i) => i !== mediaIndex);\r\n-                                              handleUpdateActivity(index, {\r\n-                                                ...activity,\r\n-                                                media: updatedMedia\r\n-                                          });\r\n-                                          }}\r\n-                                  >\r\n-                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n-                                  </Button>\r\n-                                </div>\r\n-                                        ))}\r\n-                                  <Button\r\n-                                    variant=\"outline\"\r\n-                                    size=\"sm\"\r\n-                                            onClick={() => {\r\n-                                              handleUpdateActivity(index, {\r\n-                                                ...activity,\r\n-                                                media: [\r\n-                                                  ...(activity.media || [])  ,\r\n-                                                  { url: '', type: 'image' }\r\n-                                                ]\r\n-                                              });\r\n-                                            }}\r\n-                                  >\r\n-                                    <Plus className=\"h-4 w-4 mr-2\" />\r\n-                                            Add Media\r\n-                                  </Button>\r\n-                                </div>\r\n-                                      </div>\r\n-                                    </CardContent>\r\n-                                  )}\r\n-                                </Card>\r\n-                              ))}\r\n-\r\n-                              {/* Add Activity Button */}\r\n-                              <Button\r\n-                                onClick={handleAddActivity}\r\n-                                className=\"w-full\"\r\n-                              >\r\n-                                <Plus className=\"h-4 w-4 mr-2\" />\r\n-                                Add Activity\r\n-                              </Button>\r\n-                          </TabsContent>\r\n-                        </Tabs>\r\n-                        </div>\r\n-                )}\r\n-\r\n-                    {/* Floating Save Button */}\r\n-                    <div className=\"fixed bottom-8 right-8 flex items-center gap-4\">\r\n-                      {saveProgress !== 'idle' && (\r\n-                        <div className={cn(\r\n-                          \"flex items-center gap-2 rounded-lg px-4 py-2 shadow-lg\",\r\n-                          {\r\n-                            \"bg-background border\": saveProgress === 'saving',\r\n-                            \"bg-green-500 text-white\": saveProgress === 'saved',\r\n-                            \"bg-destructive text-destructive-foreground\": saveProgress === 'error'\r\n-                          }\r\n-                        )}>\r\n-                          {saveProgress === 'saving' && (\r\n-                            <>\r\n-                              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n-                              <span className=\"text-sm\">Saving changes...</span>\r\n-                            </>\r\n-                          )}\r\n-                          {saveProgress === 'saved' && (\r\n-                            <>\r\n-                              <Check className=\"h-4 w-4\" />\r\n-                              <span className=\"text-sm\">Changes saved</span>\r\n-                            </>\r\n-                          )}\r\n-                          {saveProgress === 'error' && (\r\n-                            <>\r\n-                              <X className=\"h-4 w-4\" />\r\n-                              <span className=\"text-sm\">Error saving changes</span>\r\n-                            </>\r\n-                          )}\r\n-                        </div>\r\n-                      )}\r\n-                      <Button\r\n-                        onClick={handleSaveLesson}\r\n-                        disabled={saveProgress === 'saving'}\r\n-                        className=\"shadow-lg\"\r\n-                      >\r\n-                        {saveProgress === 'saving' ? (\r\n-                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\r\n-                        ) : (\r\n-                          <Save className=\"h-4 w-4 mr-2\" />\r\n-                        )}\r\n-                        {saveProgress === 'saving' ? 'Saving...' : 'Save Lesson'}\r\n-                      </Button>\r\n-                    </div>\r\n-                  </>\r\n-            )}\r\n-    </div>\r\n-    \r\n-\r\n-      {/* Floating Save Button */}\r\n-      {selectedSubtopicId && currentLessonId && (\r\n-          <div className=\"fixed bottom-4 right-4 flex flex-col gap-2\">\r\n-            <TooltipProvider>\r\n-              <Tooltip>\r\n-                <TooltipTrigger asChild>\r\n-                  <Button\r\n-                    size=\"icon\"\r\n-                    className=\"rounded-full h-12 w-12 shadow-lg\"\r\n-                    onClick={handleSaveLesson}\r\n-                    disabled={!selectedSubtopicId || !lessonTitle || questions.length === 0}\r\n-                  >\r\n-                    <Save className=\"h-6 w-6\" />\r\n-                  </Button>\r\n-                </TooltipTrigger>\r\n-                <TooltipContent>\r\n-                  <p>Save Lesson (Ctrl+S)</p>\r\n-                </TooltipContent>\r\n-              </Tooltip>\r\n-            </TooltipProvider>\r\n-          </div>\r\n-        )}\r\n-        <SaveFeedback />\r\n-\r\n-        {/* Add Grade Modal - do not delete */}\r\n-        {/* {modalState.showAddGrade && (\r\n-          <Dialog \r\n-            open={modalState.showAddGrade} \r\n-            onOpenChange={(open) => handleModalStateChange('showAddGrade', open)}\r\n-          >\r\n-            <DialogContent \r\n-              className=\"sm:max-w-[425px]\"\r\n-              onEscapeKeyDown={cleanupModalState}\r\n-              onPointerDownOutside={cleanupModalState}\r\n-            >\r\n-              <DialogHeader>\r\n-                <DialogTitle>Add New Grade</DialogTitle>\r\n-                <DialogDescription>Enter the details for the new grade.</DialogDescription>\r\n-              </DialogHeader>\r\n-              <div className=\"space-y-4 py-4\">\r\n-                <div className=\"space-y-2\">\r\n-                  <Label htmlFor=\"grade-name\">Grade Name</Label>\r\n-                  <Input\r\n-                    id=\"grade-name\"\r\n-                    value={newItemData.name}\r\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n-                    placeholder=\"Enter grade name\"\r\n-                  />\r\n-      </div>\r\n-              </div>\r\n-              <DialogFooter>\r\n-                <Button variant=\"outline\" onClick={() => {\r\n-                  setModalState({ ...modalState, showAddGrade: false });\r\n-                  setNewItemData({ name: '', description: '' });\r\n-                }}>\r\n-                  Cancel\r\n-                </Button>\r\n-                <Button onClick={handleCreateGrade} disabled={!newItemData.name}>Create Grade</Button>\r\n-              </DialogFooter>\r\n-            </DialogContent>\r\n-          </Dialog>\r\n-        )} */}\r\n-\r\n-        {/* Add Topic Modal */}\r\n-        {modalState.showAddTopic && (\r\n-          <Dialog \r\n-            open={modalState.showAddTopic} \r\n-            onOpenChange={(open) => handleModalStateChange('showAddTopic', open)}\r\n-          >\r\n-            <DialogContent \r\n-              className=\"sm:max-w-[425px]\"\r\n-              onEscapeKeyDown={cleanupModalState}\r\n-              onPointerDownOutside={cleanupModalState}\r\n-            >\r\n-              <DialogHeader>\r\n-                <DialogTitle>Add New Topic</DialogTitle>\r\n-                <DialogDescription>Enter the details for the new topic.</DialogDescription>\r\n-              </DialogHeader>\r\n-              <div className=\"space-y-4 py-4\">\r\n-                <div className=\"space-y-2\">\r\n-                  <Label htmlFor=\"topic-name\">Topic Name</Label>\r\n-                  <Input\r\n-                    id=\"topic-name\"\r\n-                    value={newItemData.name}\r\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n-                    placeholder=\"Enter topic name\"\r\n-                  />\r\n-                </div>\r\n-              </div>\r\n-              <DialogFooter>\r\n-                <Button variant=\"outline\" onClick={() => {\r\n-                  setModalState({ ...modalState, showAddTopic: false });\r\n-                  setNewItemData({ name: '', description: '' });\r\n-                }}>\r\n-                  Cancel\r\n-                </Button>\r\n-                <Button onClick={handleCreateTopic} disabled={!newItemData.name}>Create Topic</Button>\r\n-              </DialogFooter>\r\n-            </DialogContent>\r\n-          </Dialog>\r\n-        )}\r\n-\r\n-        {/* Add Subtopic Modal */}\r\n-        {modalState.showAddSubtopic && (\r\n-          <Dialog \r\n-            open={modalState.showAddSubtopic} \r\n-            onOpenChange={(open) => handleModalStateChange('showAddSubtopic', open)}\r\n-          >\r\n-            <DialogContent \r\n-              className=\"sm:max-w-[425px]\"\r\n-              onEscapeKeyDown={cleanupModalState}\r\n-              onPointerDownOutside={cleanupModalState}\r\n-            >\r\n-              <DialogHeader>\r\n-                <DialogTitle>Add New Subtopic</DialogTitle>\r\n-                <DialogDescription>Enter the details for the new subtopic.</DialogDescription>\r\n-              </DialogHeader>\r\n-              <div className=\"space-y-4 py-4\">\r\n-                <div className=\"space-y-2\">\r\n-                  <Label htmlFor=\"subtopic-name\">Subtopic Name</Label>\r\n-                  <Input\r\n-                    id=\"subtopic-name\"\r\n-                    value={newItemData.name}\r\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n-                    placeholder=\"Enter subtopic name\"\r\n-                  />\r\n-                </div>\r\n-              </div>\r\n-              <DialogFooter>\r\n-                <Button variant=\"outline\" onClick={() => {\r\n-                  setModalState({ ...modalState, showAddSubtopic: false });\r\n-                  setNewItemData({ name: '', description: '' });\r\n-                }}>\r\n-                  Cancel\r\n-                </Button>\r\n-                <Button onClick={() => handleCreateSubtopic({ title: newItemData.name })} disabled={!newItemData.name}>Create Subtopic</Button>\r\n-              </DialogFooter>\r\n-            </DialogContent>\r\n-          </Dialog>\r\n-        )}\r\n-\r\n-        {/* Add Lesson Modal */}\r\n-        {modalState.showAddLesson && (\r\n-          <Dialog \r\n-            open={modalState.showAddLesson} \r\n-            onOpenChange={(open) => handleModalStateChange('showAddLesson', open)}\r\n-          >\r\n-            <DialogContent \r\n-              className=\"sm:max-w-[425px]\"\r\n-              onEscapeKeyDown={cleanupModalState}\r\n-              onPointerDownOutside={cleanupModalState}\r\n-            >\r\n-              <DialogHeader>\r\n-                <DialogTitle>Add New Lesson</DialogTitle>\r\n-                <DialogDescription>Enter the details for the new lesson.</DialogDescription>\r\n-              </DialogHeader>\r\n-              <div className=\"space-y-4 py-4\">\r\n-                <div className=\"space-y-2\">\r\n-                  <Label htmlFor=\"lesson-name\">Lesson Title</Label>\r\n-                  <Input\r\n-                    id=\"lesson-name\"\r\n-                    value={newItemData.name}\r\n-                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n-                    placeholder=\"Enter lesson title\"\r\n-                  />\r\n-                </div>\r\n-              </div>\r\n-              <DialogFooter>\r\n-                <Button variant=\"outline\" onClick={() => {\r\n-                  setModalState({ ...modalState, showAddLesson: false });\r\n-                  setNewItemData({ name: '', description: '' });\r\n-                }}>\r\n-                  Cancel\r\n-                </Button>\r\n-                <Button onClick={handleCreateLesson} disabled={!newItemData.name}>Create Lesson</Button>\r\n-              </DialogFooter>\r\n-            </DialogContent>\r\n-          </Dialog>\r\n-        )}\r\n-      </div>\r\n-      <Toaster />\r\n-      </div>\r\n-  );\r\n+\"use client\";\n+\n+import { useState, useCallback, useEffect, useRef } from 'react';\n+import { toast } from 'sonner';\n+import { Toaster } from 'sonner';\n+import Link from 'next/link';\n+import {  Activity as ActivityIcon,  ArrowLeft,  BookOpen,  ChevronDown,  ChevronRight,  Check,  Edit,  Eye,  EyeOff,  HelpCircle,  Layers,  List,  MessageSquare,  Plus,  Save,  Trash as Trash2, X, Pencil, Lock, Unlock, RefreshCw, Clock, Bell, Moon, GraduationCap, MoreHorizontal, Loader2 } from 'lucide-react';\n+import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\n+import { Badge } from '@/components/ui/badge';\n+import { Button } from '@/components/ui/button';\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\n+import { Input } from '@/components/ui/input';\n+import { Label } from '@/components/ui/label';\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\n+import { Textarea } from '@/components/ui/textarea';\n+import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\n+import { cn } from '@/lib/utils';\n+import { API_BASE_URL, QUESTION_TYPES, isQuestionType } from './constants';\n+import { ExercisePrompt, Lesson } from './types';\n+import { QuestionFormProps, ExercisePromptCardProps, Activity, Grade, Topic, Subtopic as SubTopic } from './types';\n+import { QuestionForm } from './components/question-form';\n+import { ExercisePromptCard } from './components/exercise-prompt-card';\n+import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\n+import { supabase } from '@/lib/supabase';\n+import { useContentStore } from '@/lib/content/store';\n+import { contentService } from '@/lib/content/ContentService';\n+import { MediaPreview } from '@/components/ui/media-preview';\n+import { QuestionTypeSelect } from './components/question-type-select';\n+import { RichTextEditor } from '@/components/ui/rich-text-editor';\n+import {\n+  AlertDialog,\n+  AlertDialogAction,\n+  AlertDialogCancel,\n+  AlertDialogContent,\n+  AlertDialogDescription,\n+  AlertDialogFooter,\n+  AlertDialogHeader,\n+  AlertDialogTitle,\n+  AlertDialogTrigger,\n+} from \"@/components/ui/alert-dialog\";\n+import { debounce, isNull } from 'lodash';\n+import { PostgrestError } from '@supabase/supabase-js';\n+import { Question as ContentQuestion } from './types';  // Import the specific type\n+import { Trash } from \"lucide-react\";\n+import { AnimatePresence, motion } from 'framer-motion';\n+import { useQueryClient } from 'react-query';\n+\n+\n+// Update the API endpoint to match your backend route\n+const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\n+\n+interface QuestionTypeSelectProps {\n+  value: string;\n+  onValueChange: (value: string) => void;\n+}\n+\n+// Add metadata type\n+interface LessonMetadata {\n+  lastEdited?: string;\n+  version?: number;\n+  tags?: string[];\n+  status?: 'draft' | 'published';\n+  authorId?: string;\n+  duration?: number;\n+  transcript?: string;\n+}\n+\n+type ContentType = 'html' | 'markdown' | 'rich-text' | 'text' | 'json';\n+\n+interface LessonContent {\n+  id: string;\n+  lesson_id: string;\n+  content: any[];\n+  metadata: {\n+    lastEdited?: string;\n+    version?: number;\n+    status?: 'draft' | 'published';\n+    authorId?: string;\n+  };\n+  content_type: string;\n+  order_index: number;\n+  updated_at: string;\n+  user_id: string;\n+}\n+\n+interface InlineEditProps {\n+  value: string;\n+  onSave: (value: string) => void;\n+  isEditing: boolean;\n+  setIsEditing: (value: boolean) => void;\n+  placeholder?: string;\n+  className?: string;\n+}\n+\n+// Add validation interface\n+interface QuestionValidation {\n+  isValid: boolean;\n+  message: string;\n+}\n+\n+// Add this type validation helper\n+const getQuestionTypeFields = (type: string) => {\n+  switch (type) {\n+    case 'multipleChoice':\n+      return {\n+        required: ['prompt', 'options', 'correctAnswer'],\n+        fields: {\n+          prompt: '',\n+          options: [],\n+          correct_answer: '',\n+          teacher_script: '',\n+          explanation: ''\n+        }\n+      };\n+    case 'fillInBlank':\n+      return {\n+        required: ['prompt', 'blanks'],\n+        fields: {\n+          prompt: '',\n+          blanks: [],\n+          teacher_script: '',\n+          explanation: ''\n+        }\n+      };\n+    case 'trueFalse':\n+      return {\n+        required: ['prompt', 'correctAnswer'],\n+        fields: {\n+          prompt: '',\n+          correct_answer: null,\n+          teacher_script: '',\n+          explanation: ''\n+        }\n+      };\n+    case 'matching':\n+      return {\n+        required: ['prompt', 'pairs'],\n+        fields: {\n+          prompt: '',\n+          pairs: [],\n+          teacher_script: '',\n+          explanation: ''\n+        }\n+      };\n+    case 'ordering':\n+      return {\n+        required: ['prompt', 'items'],\n+        fields: {\n+          prompt: '',\n+          items: [],\n+          correctOrder: [],\n+          teacher_script: '',\n+          explanation: ''\n+        }\n+      };\n+    case 'shortAnswer':\n+      return {\n+        required: ['prompt', 'sampleAnswer'],\n+        fields: {\n+          prompt: '',\n+          sampleAnswer: '',\n+          teacher_script: '',\n+          explanation: '',\n+          keywords: []\n+        }\n+      };\n+    case 'speaking':\n+      return {\n+        required: ['prompt', 'sampleAnswer'],\n+        fields: {\n+          prompt: '',\n+          sampleAnswer: '',\n+          teacher_script: '',\n+          audioPrompt: '',\n+          pronunciation: ''\n+        }\n+      };\n+    case 'listening':\n+      return {\n+        required: ['prompt', 'audioContent'],\n+        fields: {\n+          prompt: '',\n+          audioContent: '',\n+          transcript: '',\n+          teacherScript: '',\n+          comprehensionQuestions: []\n+        }\n+      };\n+    case 'listenAndRepeat':\n+      return {\n+        required: ['prompt', 'audioContent'],\n+        fields: {\n+          prompt: '',\n+          audioContent: '',\n+          targetPhrase: '',\n+          teacher_script: '',\n+          pronunciation: ''\n+        }\n+      };\n+    default:\n+      return {\n+        required: ['prompt'],\n+        fields: {\n+          prompt: '',\n+          teacher_script: ''\n+        }\n+      };\n+  }\n+}\n+\n+interface SaveStatus {\n+  id: string;\n+  status: 'draft' | 'saved' | 'saving' | 'error';\n+  lastSaved?: string;\n+}\n+\n+interface Question {\n+  id: string;\n+  type: string;\n+  lesson_id: string;\n+  title: string;\n+  content: string;\n+  metadata: Record<string, any>;\n+  data: Record<string, any>; // This allows dynamic field access\n+  correct_answer: string;\n+  exercisePrompts: ExercisePrompt[];\n+  isDraft?: boolean;\n+}\n+\n+// Add at the top of the file with other type definitions\n+type QuestionType = keyof typeof QUESTION_TYPES;\n+\n+// Add this type guard function\n+const isValidQuestionType = (type: string): type is QuestionType => {\n+  return type in QUESTION_TYPES;\n+};\n+\n+// Update handleAddQuestion\n+\n+\n+// Update validateQuestion\n+const validateQuestion = (question: Question): QuestionValidation => {\n+  const { required } = getQuestionTypeFields(question.type);\n+  const missingFields = required.filter(field => {\n+    const value = question.data?.[field];\n+    return !value || \n+      (Array.isArray(value) && value.length === 0) || \n+      (typeof value === 'string' && !value.trim());\n+  });\n+\n+  if (missingFields.length > 0) {\n+    return {\n+      isValid: false,\n+      message: `Missing required fields: ${missingFields.join(', ')}`\n+    };\n+  }\n+\n+  return { isValid: true, message: '' };\n+};\n+\n+// Add proper type for question data\n+interface QuestionData {\n+  id?: string;\n+  content?: string;\n+  type?: string;\n+  data?: {\n+    prompt?: string;\n+    teacher_script?: string;\n+    followup_prompt?: string[];\n+    sample_answer?: string;\n+    answer?: string;\n+  } | null;\n+  prompt: string;\n+  teacher_script: string;\n+  followup_prompt: string[];\n+  answer?: string;\n+  correct_answer?: string;\n+}\n+\n+// In your component where you handle questions\n+const handleQuestionData = (question: QuestionData) => {\n+  return {\n+    ...question,\n+    data: {\n+      prompt: question?.data?.prompt || '',\n+      teacher_script: question?.data?.teacher_script || '',\n+      followup_prompt: question?.data?.followup_prompt || [],\n+      sample_answer: question?.data?.sample_answer || undefined,  // Convert null to undefined\n+      answer: question?.data?.answer || undefined  // Convert null to undefined\n+    } as const,\n+    sampleAnswer: question?.correct_answer || ''\n+  };\n+};\n+\n+export default function LessonManagementPage() {\n+  // State declarations\n+  \n+  const [selectedGradeId, setSelectedGradeId] = useState<string | null>(null);\n+  const [selectedTopicId, setSelectedTopicId] = useState<string | null>(null);\n+  const [selectedSubtopicId, setSelectedSubtopicId] = useState<string | null>(null);\n+  const [lessonTitle, setLessonTitle] = useState<string>('');\n+  const [currentLessonId, setCurrentLessonId] = useState<string | null>(null);\n+  const [questions, setQuestions] = useState<Question[]>([]);\n+  const [saveProgress, setSaveProgress] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');\n+  const [activities, setActivities] = useState<Activity[]>([]);\n+  const [localBuffer, setLocalBuffer] = useState<{ timestamp: number; data: any } | null>(null);\n+  const [lastSavedToServer, setLastSavedToServer] = useState<number>(Date.now());\n+  const [selectedQuestionType, setSelectedQuestionType] = useState<string>('');\n+  const [editingQuestionIndex, setEditingQuestionIndex] = useState<number | null>(null);\n+  const [showHelpTips, setShowHelpTips] = useState(true);\n+  const [isNavigating, setIsNavigating] = useState(false);\n+  const [lessons, setLessons] = useState<Lesson[]>([]);\n+  const [grades, setGrades] = useState<Grade[]>([]);\n+  const [topics, setTopics] = useState<Topic[]>([]);\n+  const [subtopics, setSubtopics] = useState<SubTopic[]>([]);\n+  const [contentHeading, setContentHeading] = useState<string>('');\n+    // Add with your other state declarations\n+  const [isContentExpanded, setIsContentExpanded] = useState<boolean>(false);\n+  const [modalState, setModalState] = useState({\n+    showAddGrade: false,\n+    showAddTopic: false,\n+    showAddSubtopic: false,\n+    showAddLesson: false\n+  });\n+  const [isViewMode, setIsViewMode] = useState<boolean>(true);\n+  const [expandedGrade, setExpandedGrade] = useState<string | null>(null);\n+  const [expandedTopic, setExpandedTopic] = useState<string | null>(null);\n+  const [expandedSubtopic, setExpandedSubtopic] = useState<string | null>(null);\n+  const [expandedQuestion, setExpandedQuestion] = useState<number | null>(null);\n+  const [expandedActivity, setExpandedActivity] = useState<number | null>(null);\n+  const [newItemData, setNewItemData] = useState({\n+    name: '',\n+    description: ''\n+  });\n+  const [lessonContent, setLessonContent] = useState<string>('');\n+  const [isContentEditorOpen, setIsContentEditorOpen] = useState(false);\n+  const [isEditingTitle, setIsEditingTitle] = useState<boolean>(false);\n+  const [isEditingHeading, setIsEditingHeading] = useState<boolean>(false);\n+  const [isEditingDescription, setIsEditingDescription] = useState<boolean>(false);\n+  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\n+  const [isSidebarLocked, setIsSidebarLocked] = useState(true);\n+  const [alertDialogState, setAlertDialogState] = useState<{\n+    isOpen: boolean;\n+    title: string;\n+    message: string;\n+    onConfirm: (value?: unknown) => void;\n+  }>({\n+    isOpen: false,\n+    title: '',\n+    message: '',\n+    onConfirm: () => {}\n+  });\n+\n+  const { \n+    selectedGrade,\n+    setSelectedGrade,\n+    selectedTopic,\n+    setSelectedTopic,\n+    selectedSubtopic,\n+    setSelectedSubtopic,\n+    selectedLesson,\n+    setSelectedLesson\n+  } = useContentStore();\n+\n+  // Add new state for tracking save status\n+  interface SaveStatus {\n+    id: string;\n+    status: 'draft' | 'saved' | 'saving' | 'error' | 'draft';\n+    lastSaved?: string;\n+  }\n+\n+  const [questionSaveStatuses, setQuestionSaveStatuses] = useState<Array<{\n+    id: string;\n+    status: 'idle' | 'saving' | 'saved' | 'error' | 'draft';\n+  }>>([]);\n+  const [promptSaveStatuses, setPromptSaveStatuses] = useState<SaveStatus[]>([]);\n+\n+  // Add this state to track dropdown state\n+  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n+\n+  // Add these states\n+  const [isLoadingSubtopics, setIsLoadingSubtopics] = useState(false);\n+  const [isLoadingLessons, setIsLoadingLessons] = useState(false);\n+\n+  // Add these state variables\n+  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n+  const [itemToDelete, setItemToDelete] = useState<{\n+    id: string;\n+    type: 'topic' | 'subtopic' | 'lesson';\n+    title: string;\n+  } | null>(null);\n+\n+  // Add these state variables\n+  const [deleteError, setDeleteError] = useState<string | null>(null);\n+\n+  // Add this validation function\n+  const canDeleteItem = async (type: 'topic' | 'subtopic' | 'lesson', id: string) => {\n+    switch (type) {\n+      case 'topic':\n+        const subtopicsInTopic = subtopics.filter(s => s.topic_id === id);\n+        return subtopicsInTopic.length === 0;\n+        \n+      case 'subtopic':\n+        const lessonsInSubtopic = lessons.filter(l => l.subtopic_id === id);\n+        return lessonsInSubtopic.length === 0;\n+        \n+      case 'lesson':\n+        const { data: questions } = await supabase\n+          .from('questions')\n+          .select('id')\n+          .eq('lesson_id', id);\n+        return !questions || questions.length === 0;\n+        \n+      default:\n+        return false;\n+    }\n+  };\n+\n+  // Event handlers\n+  const handleQuestionTypeChange = useCallback((type: string) => {\n+    if (isQuestionType(type)) {\n+      setSelectedQuestionType(type);\n+    }\n+  }, []);\n+\n+  const handleAddQuestion = useCallback(() => {\n+    if (!selectedQuestionType || !isQuestionType(selectedQuestionType)) return;\n+\n+    const defaultData = QUESTION_TYPES[selectedQuestionType].defaultData;\n+    const newQuestion: Question = {\n+      id: crypto.randomUUID(),\n+      type: selectedQuestionType,\n+      //data: {},\n+      title: 'New Question',\n+      content: '',\n+      lesson_id: currentLessonId || '',\n+      metadata: {},\n+      data: {\n+        ...defaultData,\n+        prompt: '',\n+        teacher_script: '',\n+        followup_prompt: [],\n+        sample_answer: ''\n+      },\n+      correct_answer: '',\n+      exercisePrompts: [],\n+      isDraft: true\n+    };\n+\n+    setQuestions(prev => [...prev, newQuestion]);\n+    setQuestionSaveStatuses(prev => [\n+      ...prev,\n+      { id: newQuestion.id, status: 'draft' }\n+    ]);\n+    setSelectedQuestionType('');\n+  }, [selectedQuestionType, currentLessonId]);\n+\n+  const checkDeletability = async (type: 'topic' | 'subtopic' | 'lesson', id: string) => {\n+    try {\n+      switch (type) {\n+        case 'lesson':\n+          const { data: questions } = await supabase\n+            .from('questions')\n+            .select('count')\n+            .eq('lesson_id', id);\n+          return { \n+            canDelete: questions?.[0]?.count === 0,\n+            message: questions?.[0]?.count ?? 0> 0 \n+              ? `Please delete ${questions?.[0]?.count} questions first` \n+              : null\n+          };\n+\n+        case 'subtopic':\n+          const { data: lessons } = await supabase\n+            .from('lessons')\n+            .select('id, questions(count)')\n+            .eq('subtopic_id', id);\n+          const hasQuestions = lessons?.some(l => l.questions?.[0]?.count > 0);\n+          return {\n+            canDelete: !hasQuestions && !lessons?.length,\n+            message: hasQuestions ? 'Delete questions from lessons first' : \n+                     lessons?.length ? 'Delete all lessons first' : null\n+          };\n+\n+        case 'topic':\n+          const { data: subtopics } = await supabase\n+            .from('subtopics')\n+            .select('id, lessons(questions(count))')\n+            .eq('topic_id', id);\n+          const hasContent = subtopics?.some(s => \n+            s.lessons?.some(l => l.questions?.[0]?.count > 0)\n+          );\n+          return {\n+            canDelete: !hasContent && !subtopics?.length,\n+            message: hasContent ? 'Delete all content first' : \n+                     subtopics?.length ? 'Delete all subtopics first' : null\n+          };\n+      }\n+    } catch (error) {\n+      console.error('Error checking deletability:', error);\n+      return { canDelete: false, message: 'Error checking item' };\n+    }\n+  };\n+\n+  const handleRemoveQuestion = async (index: number) => {\n+    try {\n+      const questionToDelete = questions[index];\n+      \n+      // Delete related exercise prompts first\n+      const { error: promptError } = await supabase\n+        .from('exercise_prompts')\n+        .delete()\n+        .eq('question_id', questionToDelete.id);\n+\n+      if (promptError) throw promptError;\n+\n+      // Then delete the question\n+      const { error: questionError } = await supabase\n+        .from('questions')\n+        .delete()\n+        .eq('id', questionToDelete.id);\n+\n+      if (questionError) throw questionError;\n+\n+      // Update local state\n+      const newQuestions = questions.filter((_, i) => i !== index);\n+      setQuestions(newQuestions);\n+      \n+      toast.success('Question and related prompts deleted successfully');\n+    } catch (error) {\n+      console.error('Error deleting question:', error);\n+      toast.error('Failed to delete question and prompts');\n+    }\n+  };\n+\n+  const handleUpdateQuestion = useCallback(async (index: number, updatedQuestion: Question) => {\n+    const newQuestions = [...questions];\n+    newQuestions[index] = updatedQuestion;\n+    setQuestions(newQuestions);\n+    setQuestionSaveStatuses(prev => prev.map((status, i) => \n+      i === index ? { ...status, status: 'draft' } : status\n+    ));\n+  }, [questions]);\n+\n+  const handleAddExercisePrompt = useCallback((questionIndex: number) => {\n+    setQuestions(prev => prev.map((question, i) => {\n+      if (i === questionIndex) {\n+        return {\n+          ...question,\n+          exercisePrompts: [\n+            ...question.exercisePrompts,\n+            {\n+              id: crypto.randomUUID(),\n+              text: '',\n+              media: '',\n+              type: 'image',\n+              narration: 'Your turn',\n+              saytext: 'Say: ',\n+              metadata: {\n+                estimatedTime: 0\n+              },\n+              created_at: new Date().toISOString(),\n+              updated_at: new Date().toISOString()\n+            }\n+          ]\n+        };\n+      }\n+      return question;\n+    }));\n+  }, []);\n+\n+  const handleRemoveExercisePrompt = useCallback((questionIndex: number, promptIndex: number) => {\n+    setQuestions(prev => prev.map((question, i) => {\n+      if (i === questionIndex) {\n+        return {\n+          ...question,\n+          exercisePrompts: question.exercisePrompts.filter((_, j) => j !== promptIndex)\n+        };\n+      }\n+      return question;\n+    }));\n+  }, []);\n+\n+  const handleExercisePromptChange = useCallback(async (\n+    questionIndex: number,\n+    promptIndex: number,\n+    updatedPrompt: ExercisePrompt\n+  ) => {\n+    try {\n+      const promptUpdate = {\n+        id: updatedPrompt.id,\n+        question_id: updatedPrompt.question_id,\n+        text: updatedPrompt.text,\n+        type: updatedPrompt.type,\n+        narration: updatedPrompt.narration,\n+        saytext: updatedPrompt.saytext,\n+        media: updatedPrompt.media,\n+        // Remove order_index as it's not in schema\n+        created_at: new Date().toISOString()\n+      };\n+\n+      const { error: promptError } = await supabase\n+        .from('exercise_prompts')\n+        .upsert(promptUpdate)\n+        .select();\n+\n+      if (promptError) throw promptError;\n+\n+      // Update local state\n+      setQuestions(prev => prev.map((question, i) => {\n+        if (i === questionIndex) {\n+          const newPrompts = [...question.exercisePrompts];\n+          newPrompts[promptIndex] = updatedPrompt;\n+          return { ...question, exercisePrompts: newPrompts };\n+        }\n+        return question;\n+      }));\n+\n+    } catch (error) {\n+      console.error('Error saving prompt:', error);\n+      toast.error('Failed to save prompt');\n+    }\n+  }, []);\n+\n+  const handleAddActivity = useCallback(() => {\n+    const newActivity: Activity = {\n+      id: crypto.randomUUID(),\n+      lesson_id: currentLessonId || '',\n+      created_at: new Date().toISOString(),\n+      type: 'practice',\n+      title: '',\n+      name: '',\n+      instructions: '',\n+      media: [],\n+      data: {\n+        prompt: '',\n+        teacher_script: '',\n+        media: []\n+      }\n+    };\n+    setActivities(prev => [...prev, newActivity]);\n+  }, [currentLessonId]);\n+\n+  const handleUpdateActivity = useCallback((index: number, updatedActivity: Activity) => {\n+    setActivities(prev => prev.map((activity, i) => i === index ? updatedActivity : activity));\n+  }, []);\n+\n+  const handleRemoveActivity = useCallback((index: number) => {\n+    setActivities(prev => prev.filter((_, i) => i !== index));\n+  }, []);\n+\n+  const handleExercisePromptUpdate = useCallback((questionIndex: number, promptIndex: number, updatedPrompt: ExercisePrompt) => {\n+    const updatedQuestions = [...questions];\n+    updatedQuestions[questionIndex].exercisePrompts[promptIndex] = updatedPrompt;\n+    handleUpdateQuestion(questionIndex, updatedQuestions[questionIndex]);\n+  }, [questions, handleUpdateQuestion]);\n+\n+  const handleQuestionDataChange = useCallback((questionIndex: number, field: string, value: string) => {\n+    setQuestions(prev => prev.map((q, i) => \n+      i === questionIndex \n+        ? { \n+            ...q, \n+            data: { \n+              prompt: q.data?.prompt || '',\n+              teacherScript: q.data?.teacherScript || '',\n+              ...q.data,\n+              [field]: value \n+            } \n+          }\n+        : q\n+    ));\n+  }, []);\n+\n+  const [isSaving, setIsSaving] = useState(false);\n+\n+  const handleSaveLesson = async () => {\n+    try {\n+      if (!currentLessonId || !selectedSubtopicId) {\n+        toast.error('Please select a subtopic and lesson first');\n+        return;\n+      }\n+\n+      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\n+      if (sessionError) throw sessionError;\n+      \n+      if (!session?.user) {\n+        toast.error('Please sign in to save lessons');\n+        return;\n+      }\n+\n+      // Get user's role from session\n+      const userRole = session.user.user_metadata?.role;\n+      console.log('Current user role:', userRole);\n+      console.log('📝 Saving content heading:', {\n+        contentHeading,\n+        currentLessonId,\n+        selectedSubtopicId,\n+        timestamp: new Date().toISOString()\n+      });\n+\n+      // Create metadata object\n+      const lessonMetadata = {\n+        lastEdited: new Date().toISOString(),\n+        version: 1,\n+        status: 'draft' \n+      };\n+\n+      // Complete lesson data with all fields\n+      const lessonData = {\n+        id: currentLessonId,\n+        title: lessonTitle,\n+        content: lessonContent,\n+        metadata: lessonMetadata, // Supabase will automatically handle JSON conversion\n+        content_type: 'html',\n+        lesson_type: 'lesson',\n+        grade_id: selectedGradeId,\n+        topic_id: selectedTopicId,\n+        subtopic_id: selectedSubtopicId,\n+        user_id: session.user.id,\n+        updated_at: new Date().toISOString(),\n+        role: userRole, // Include role in the payload\n+        description: '',\n+        prerequisites: [],\n+        media_type: 'image',\n+        media_url: '',\n+        contentheading: contentHeading || ''\n+      };\n+\n+      console.log('📦 Data being sent to Supabase:', lessonData);\n+\n+      // Save lesson with all fields\n+      const { data, error: lessonError } = await supabase\n+        .from('lessons')\n+        .upsert(lessonData, { \n+          onConflict: 'id'\n+        })\n+        .select();\n+\n+      if (lessonError) throw lessonError;\n+\n+      // 2. Save lesson content\n+      const { data: existingContent } = await supabase\n+        .from('lesson_content')\n+        .select('id')\n+        .eq('lesson_id', currentLessonId)\n+        .single();\n+\n+      const contentMetadata = {\n+        lastEdited: new Date().toISOString(),\n+        version: 1,\n+        status: 'draft'\n+      };\n+\n+      const contentUpdate = {\n+        id: existingContent?.id || crypto.randomUUID(),\n+        lesson_id: currentLessonId,\n+        content: [lessonContent],\n+        metadata: contentMetadata, // Supabase will automatically handle JSON conversion\n+        content_type: 'html',\n+        user_id: session.user.id,\n+        updated_at: new Date().toISOString(),\n+        created_at: new Date().toISOString()\n+      };\n+\n+      const { error: contentError } = await supabase\n+        .from('lesson_content')\n+        .upsert(contentUpdate, { onConflict: 'id' });\n+\n+      if (contentError) throw contentError;\n+\n+      // 3. Save questions\n+      for (const question of questions) {\n+        const questionData = {\n+          id: question.id,\n+          lesson_id: currentLessonId,\n+          type: question.type,\n+          title: question.title,\n+          metadata: question.metadata,\n+          data: question.data,\n+          updated_at: new Date().toISOString(),\n+          user_id: session.user.id\n+        };\n+\n+        const { error: questionError } = await supabase\n+          .from('questions')\n+          .upsert(questionData, { onConflict: 'id' });\n+\n+        if (questionError) throw questionError;\n+\n+        //4. Save exercise prompts for this question\n+        if (question.exercisePrompts) {\n+          for (const prompt of question.exercisePrompts) {\n+            const promptData = {\n+              id: prompt.id,\n+              question_id: question.id,\n+              text: prompt.text,\n+              media: prompt.media,\n+              type: prompt.type,\n+              narration: prompt.narration,\n+              saytext: prompt.saytext,\n+              user_id: session.user.id,\n+              updated_at: new Date().toISOString()\n+            };\n+\n+            const { error: promptError } = await supabase\n+              .from('exercise_prompts')\n+              .upsert(promptData, { onConflict: 'id' });\n+\n+            if (promptError) throw promptError;\n+          }\n+        }\n+      }\n+\n+      // 5. Save activities\n+      if (activities.length > 0) {\n+        const activitiesData = activities.map(activity => ({\n+          id: activity.id,\n+          lesson_id: currentLessonId,\n+          type: activity.type,\n+          title: activity.title,\n+          name: activity.name,\n+          instructions: activity.instructions,\n+          media: activity.media,\n+          data: activity.data,\n+          created_at: new Date().toISOString()\n+        }));\n+\n+        const { error: activitiesError } = await supabase\n+          .from('activities')\n+          .upsert(activitiesData, { onConflict: 'id' });\n+\n+        if (activitiesError) throw activitiesError;\n+      }\n+\n+      // After successful save\n+      console.log('✅ Content heading saved successfully:', {\n+        contentHeading,\n+        lessonId: currentLessonId,\n+        timestamp: new Date().toISOString()\n+      });\n+\n+      toast.success('Lesson saved successfully');\n+    } catch (err) {\n+      const error = err as PostgrestError;\n+      console.error('❌ Error saving content heading:', {\n+        error: error.message,\n+        contentHeading,\n+        lessonContent,\n+        lessonId: currentLessonId,\n+        timestamp: new Date().toISOString()\n+      });\n+      toast.error(`Failed to save lesson: ${error.message}`);\n+\n+\n+    }\n+  };\n+\n+  const handleSaveQuestion = async (question: Question, index: number) => {\n+    const loadingToast = toast.loading(`Saving question ${index + 1}...`);\n+    \n+    try {\n+      const { data: { session } } = await supabase.auth.getSession();\n+      if (!session?.user) {\n+        toast.error('Please sign in to save question', { id: loadingToast });\n+        return;\n+      }\n+\n+      // Save question\n+      const questionData = {\n+        id: question.id,\n+        lesson_id: currentLessonId,\n+        type: question.type,\n+        title: question.title,\n+        metadata: question.metadata,\n+        data: {\n+          prompt: question.data?.prompt ?? '',\n+          teacherScript: question.data?.teacherScript ?? '',\n+          followup_prompt: question.data?.followup_prompt ?? [],\n+          sampleAnswer: question.data?.sampleAnswer || undefined,  // Convert null to undefined\n+          answer: question.data?.answer || undefined  // Convert null to undefined\n+        } as const,\n+        user_id: session.user.id,\n+        updated_at: new Date().toISOString()\n+      };\n+\n+      const { error: questionError } = await supabase\n+        .from('questions')\n+        .upsert(questionData, { onConflict: 'id' });\n+\n+      if (questionError) throw questionError;\n+\n+      // Save exercise prompts if they exist\n+      if (question.exercisePrompts?.length) {\n+        for (const prompt of question.exercisePrompts) {\n+          const promptData = {\n+            id: prompt.id,\n+            question_id: question.id,\n+            text: prompt.text,\n+            type: prompt.type,\n+            narration: prompt.narration,\n+            saytext: prompt.saytext,\n+            media: prompt.media,\n+            user_id: session.user.id,\n+            updated_at: new Date().toISOString()\n+          };\n+\n+          const { error: promptError } = await supabase\n+            .from('exercise_prompts')\n+            .upsert(promptData, { onConflict: 'id' });\n+\n+          if (promptError) throw promptError;\n+        }\n+      }\n+\n+      toast.success(`Question ${index + 1} saved successfully`, { id: loadingToast });\n+    } catch (error) {\n+      console.error('Error saving question:', error);\n+      toast.error(`Failed to save question ${index + 1}`, { id: loadingToast });\n+    }\n+  };\n+\n+  const handleSaveActivity = async (activity: Activity) => {\n+    try {\n+      await contentService.saveActivity(activity);\n+      toast.success('Activity saved');\n+    } catch (error) {\n+      console.error('Failed to save activity:', error);\n+      toast.error('Failed to save activity');\n+    }\n+  };\n+\n+  // Effects\n+  useEffect(() => {\n+    const fetchGrades = async () => {\n+      try {\n+        const { data, error } = await supabase\n+          .from('grades')\n+          .select('*')\n+          .order('name');\n+\n+        if (error) {\n+          console.error('Supabase error:', error);\n+          throw error;\n+        }\n+\n+        if (!data) {\n+          throw new Error('No data returned from Supabase');\n+        }\n+\n+        // Map the grades to match your interface\n+        const validGrades = data.map((grade: any) => ({\n+          _id: grade.id,\n+          id: grade.id,\n+          name: grade.name,\n+          level: grade.level || 0,  // Add default value if not provided\n+          orderIndex: grade.order_index || 0,  // Add default value if not provided\n+          topics: []\n+        }));\n+        \n+        setGrades(validGrades);\n+      } catch (error) {\n+        console.error('Error fetching grades:', error);\n+        toast.error('Failed to fetch grades');\n+      }\n+    };\n+\n+    fetchGrades();\n+  }, []);\n+\n+  // Topic Selection\n+  useEffect(() => {\n+    const fetchTopics = async () => {\n+      if (!selectedGradeId) return;\n+      \n+      try {\n+        const { data, error } = await supabase\n+          .from('topics')\n+          .select('*')\n+          .eq('grade_id', selectedGradeId)\n+          .order('title');\n+\n+        if (error) {\n+          throw error;\n+        }\n+\n+        // Map the topics to match your interface\n+        const validTopics = (data || []).map((topic: any) => ({\n+          _id: topic.id,\n+          id: topic.id,\n+          name: topic.title,\n+          title: topic.title,\n+          grade_id: topic.grade_id,\n+          subtopics: []\n+        }));\n+        \n+        setTopics(validTopics);\n+      } catch (error) {\n+        console.error('Error fetching topics:', error);\n+        toast.error('Failed to fetch topics');\n+      }\n+    };\n+\n+    fetchTopics();\n+  }, [selectedGradeId]);\n+\n+  // Subtopic Selection\n+  useEffect(() => {\n+    const fetchSubtopics = async () => {\n+      if (!selectedTopicId) return;\n+      \n+      try {\n+        // Use content service to fetch subtopics\n+        const subtopicsData = await contentService.fetchSubtopics(selectedTopicId);\n+        console.log('Fetched subtopics:', subtopicsData);\n+\n+        const validSubtopics = subtopicsData.map((subtopic: any) => ({\n+          id: subtopic.id,\n+          title: subtopic.title,\n+          description: subtopic.description,\n+          topic_id: subtopic.topic_id,\n+          lessons: [],\n+          order_index: subtopicsData.length\n+        }));\n+        \n+        setSubtopics(validSubtopics);\n+        \n+        // Update global state\n+        if (selectedSubtopic) {\n+          setSelectedSubtopic(selectedSubtopic);\n+        }\n+      } catch (err) {\n+        const error = err as Error;\n+        console.error('Error fetching subtopics:', error);\n+        toast.error('Failed to fetch subtopics');\n+      }\n+    };\n+\n+    fetchSubtopics();\n+  }, [selectedTopicId, selectedSubtopic, setSelectedSubtopic]);\n+\n+  // Add effect to monitor subtopics state\n+  useEffect(() => {\n+    console.log('Current subtopics state:', subtopics);\n+  }, [subtopics]);\n+\n+  // Add fetchLessons function\n+  const fetchLessons = useCallback(async () => {\n+    if (!selectedSubtopicId) return;\n+    try {\n+      const { data, error } = await supabase\n+        .from('lessons')\n+        .select('*')\n+        .eq('subtopic_id', selectedSubtopicId)\n+        .order('title');\n+\n+      if (error) {\n+        throw error;\n+      }\n+      \n+      // Map the lessons to ensure they have _id\n+      const validLessons = (data || []).map((lesson: any) => ({\n+        ...lesson,\n+        _id: lesson._id || lesson.id, // Use _id if available, otherwise use id\n+        title: lesson.title || 'Untitled Lesson'\n+      })).filter((lesson: any) => lesson._id); // Only include lessons with valid IDs\n+      \n+      setLessons(validLessons);\n+    } catch (error) {\n+      console.error('Error fetching lessons:', error);\n+      toast.error('Failed to fetch lessons');\n+    }\n+  }, [selectedSubtopicId]);\n+  // Add loadLessonContent function\n+  const isLoading = useRef(false);\n+  const loadLessonContent = useCallback(async (lessonId: string) => {\n+    // Prevent multiple simultaneous loads\n+    if (isLoading.current) return;\n+    isLoading.current = true;\n+\n+    const controller = new AbortController();\n+\n+    try {\n+      // Clear existing content first\n+      setLessonTitle('');\n+      setContentHeading('');\n+      setLessonContent('');\n+      setQuestions([]);\n+      \n+      // First fetch lesson data\n+      const { data: lessonData, error: lessonError } = await supabase\n+        .from('lessons')\n+        .select('*')\n+        .eq('id', lessonId)\n+        .single()\n+        \n+\n+      if (lessonError) {\n+        console.error('Lesson fetch error:', lessonError);\n+        throw lessonError;\n+      }\n+\n+      // Set lesson data\n+      setLessonTitle(lessonData.title || '');\n+      setContentHeading(lessonData.content || '');\n+\n+      // Then fetch lesson content with explicit headers\n+      const { data: contentData, error: contentError } = await supabase\n+        .from('lesson_content')\n+        .select('*')\n+        .eq('lesson_id', lessonId)\n+        .order('updated_at', { ascending: false })\n+        .limit(1)\n+        .maybeSingle();\n+\n+      if (contentError) {\n+        console.error('Content fetch error:', contentError);\n+        throw contentError;\n+      }\n+\n+      // Set content if available\n+      if (contentData?.content) {\n+        setLessonContent(typeof contentData.content === 'string' \n+          ? contentData.content \n+          : JSON.stringify(contentData.content)\n+        );\n+      }\n+\n+    } catch (error: unknown) {\n+      if (error instanceof Error && error.name === 'AbortError') {\n+        console.log('Request aborted');\n+        return;\n+      }\n+      console.error('Error loading lesson:', error);\n+      toast.error('Failed to load lesson content');\n+      \n+      // Reset states on error\n+      setLessonTitle('');\n+      setContentHeading('');\n+      setLessonContent('');\n+      setQuestions([]);\n+    } finally {\n+      isLoading.current = false;\n+    }\n+\n+    return () => {\n+      controller.abort();\n+    };\n+  }, []); // Empty dependencies since we're using closure over state setters\n+\n+  // // Add effect for fetching lessons when subtopic changes\n+  useEffect(() => {\n+    if (selectedSubtopicId) {\n+      fetchLessons();\n+    }\n+  }, [selectedSubtopicId, fetchLessons]);\n+\n+  // Add effect for loading lesson content when currentLessonId changes\n+    useEffect(() => {\n+    let isMounted = true;\n+    let timeoutId: NodeJS.Timeout;\n+\n+    const loadContent = async () => {\n+      if (!currentLessonId || !isMounted) return;\n+\n+      // Clear previous timeout if exists\n+      if (timeoutId) clearTimeout(timeoutId);\n+\n+      // Set new timeout for debouncing\n+      timeoutId = setTimeout(() => {\n+        if (isMounted) {\n+          loadLessonContent(currentLessonId);\n+        }\n+      }, 300);\n+    };\n+\n+    loadContent();\n+\n+    // Cleanup function\n+    return () => {\n+      isMounted = false;\n+      if (timeoutId) clearTimeout(timeoutId);\n+      if (isLoading.current) isLoading.current = false;\n+    };\n+  }, [currentLessonId]); // Remove loadLessonContent from dependencies\n+\n+  useEffect(() => {\n+    console.log('Current lessons state:', lessons);\n+  }, [lessons]);\n+\n+    // Add keyboard shortcut for saving\n+  useEffect(() => {\n+    const handleKeyDown = (e: KeyboardEvent) => {\n+      if ((e.ctrlKey || e.metaKey) && e.key === 's') {\n+        e.preventDefault();\n+        handleSaveLesson();\n+      }\n+    };\n+\n+    window.addEventListener('keydown', handleKeyDown);\n+    return () => window.removeEventListener('keydown', handleKeyDown);\n+  }, [handleSaveLesson]);\n+\n+  // Add SaveFeedback component\n+  const SaveFeedback = useCallback(() => {\n+    if (saveProgress === 'idle') return null;\n+\n+    return (\n+    <div className=\"fixed bottom-4 right-4\">\n+      {saveProgress === 'saving' && (\n+        <div className=\"flex items-center gap-2 bg-background border rounded-lg px-4 py-2 shadow-lg\">\n+          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n+          <span className=\"text-sm\">Saving changes...</span>\n+        </div>\n+      )}\n+      {saveProgress === 'saved' && (\n+        <div className=\"flex items-center gap-2 bg-green-500 text-white rounded-lg px-4 py-2 shadow-lg\">\n+          <Check className=\"h-4 w-4\" />\n+          <span className=\"text-sm\">Changes saved</span>\n+        </div>\n+      )}\n+      {saveProgress === 'error' && (\n+        <div className=\"flex items-center gap-2 bg-destructive text-destructive-foreground rounded-lg px-4 py-2 shadow-lg\">\n+          <X className=\"h-4 w-4\" />\n+          <span className=\"text-sm\">Error saving changes</span>\n+        </div>\n+      )}\n+    </div>\n+  );\n+  }, [saveProgress]);\n+\n+  // Update handlers\n+  const handleGradeSelect = (gradeId: string) => {\n+    // Always keep sidebar open during selection\n+    setIsSidebarCollapsed(false);\n+    setIsSidebarLocked(true);\n+    \n+    // Batch state updates\n+    requestAnimationFrame(() => {\n+      setSelectedGradeId(gradeId);\n+      setSelectedGrade(gradeId);\n+      setSelectedTopicId(null);\n+      setSelectedTopic('');\n+      setSelectedSubtopicId(null);\n+      setSelectedSubtopic('');\n+      setCurrentLessonId(null);\n+      \n+      if (isViewMode) {\n+        setExpandedGrade(gradeId);\n+      }\n+    });\n+  };\n+\n+  const handleTopicSelect = (value: string) => {\n+    setSelectedTopicId(value);\n+    setSelectedTopic(value);\n+    setSelectedSubtopicId(null);\n+    setSelectedSubtopic('');\n+    setCurrentLessonId(null);\n+  };\n+\n+  const handleSubtopicSelect = (value: string) => {\n+    setSelectedSubtopicId(value);\n+    setSelectedSubtopic(value);\n+    setCurrentLessonId(null);\n+  };\n+\n+  const handleLessonSelect = async (lessonId: string) => {\n+    try {\n+      // Lock sidebar during selection\n+      setIsSidebarLocked(true);\n+      setIsSidebarCollapsed(false);\n+      setCurrentLessonId(lessonId);\n+      \n+      // 1. Fetch lesson data\n+      const { data: lessonData, error: lessonError } = await supabase\n+        .from('lessons')\n+        .select('*')\n+        .eq('id', lessonId)\n+        .single();\n+\n+      if (lessonError) throw lessonError;\n+\n+      // 2. Fetch questions with exercise prompts\n+      const { data: questionsData, error: questionsError } = await supabase\n+        .from('questions')\n+        .select(`\n+          *,\n+          exercise_prompts (*)\n+        `)\n+        .eq('lesson_id', lessonId);\n+\n+      if (questionsError) throw questionsError;\n+\n+      // 3. Fetch activities - removed order_index\n+      const { data: activitiesData, error: activitiesError } = await supabase\n+        .from('activities')\n+        .select('*')\n+        .eq('lesson_id', lessonId);\n+\n+      if (activitiesError) throw activitiesError;\n+\n+      // Format questions with their exercise prompts\n+      const formattedQuestions = questionsData?.map(q => ({\n+        ...q,\n+        data: q.data || {},\n+        exercisePrompts: q.exercise_prompts || []\n+      })) || [];\n+\n+      // Set all states\n+      setLessonTitle(lessonData.title || '');\n+      setLessonContent(lessonData.content || '');\n+      setQuestions(formattedQuestions);\n+      setActivities(activitiesData || []);\n+\n+      // After successful load, unlock sidebar and allow collapse\n+      setTimeout(() => {\n+        setIsSidebarLocked(false);\n+        if (!isSidebarLocked) {\n+          setIsSidebarCollapsed(true);\n+        }\n+      }, 300);\n+\n+    } catch (error) {\n+      console.error('Error loading lesson:', error);\n+      toast.error('Failed to load lesson');\n+      // Reset states on error\n+      setLessonTitle('');\n+      setLessonContent('');\n+      setQuestions([]);\n+      setActivities([]);\n+    }\n+    if (!isSidebarLocked) {\n+      setIsSidebarCollapsed(true);\n+    }\n+  };\n+\n+  // Update the expansion handlers\n+  const handleTopicExpand = async (topicId: string) => {\n+    setExpandedTopic(expandedTopic === topicId ? null : topicId);\n+    setSelectedTopicId(topicId);\n+    \n+    // Load subtopics when topic is expanded\n+    if (topicId) {\n+      setIsLoadingSubtopics(true);\n+      try {\n+        const { data: subtopicsData, error } = await supabase\n+          .from('subtopics')\n+          .select('*')\n+          .eq('topic_id', topicId)\n+          .order('order_index');\n+\n+        if (error) throw error;\n+        setSubtopics(subtopicsData || []);\n+      } catch (error) {\n+        console.error('Error loading subtopics:', error);\n+        toast.error('Failed to load subtopics');\n+      } finally {\n+        setIsLoadingSubtopics(false);\n+      }\n+    }\n+  };\n+\n+  const handleSubtopicExpand = async (subtopicId: string) => {\n+    setExpandedSubtopic(expandedSubtopic === subtopicId ? null : subtopicId);\n+    setSelectedSubtopicId(subtopicId);\n+    \n+    if (subtopicId) {\n+      setIsLoadingLessons(true);\n+      try {\n+        const { data: lessonsData, error } = await supabase\n+          .from('lessons')\n+          .select('*')\n+          .eq('subtopic_id', subtopicId)\n+          .order('order_index');\n+\n+        if (error) throw error;\n+        setLessons(lessonsData || []);\n+      } catch (error) {\n+        console.error('Error loading lessons:', error);\n+        toast.error('Failed to load lessons');\n+      } finally {\n+        setIsLoadingLessons(false);\n+      }\n+    }\n+  };\n+\n+  const handleQuestionExpand = (index: number) => {\n+    setExpandedQuestion(expandedQuestion === index ? null : index);\n+  };\n+\n+  const handleActivityExpand = (index: number) => {\n+    setExpandedActivity(expandedActivity === index ? null : index);\n+  };\n+\n+  // Add effect to save mode changes to localStorage\n+  useEffect(() => {\n+    localStorage.setItem('lessonManagementViewMode', isViewMode.toString());\n+  }, [isViewMode]);\n+\n+  // Add handlers for creating new items\n+  const handleCreateGrade = async () => {\n+    try {\n+      const response = await fetch(`${API_ENDPOINT}/grades`, {\n+        method: 'POST',\n+        headers: { 'Content-Type': 'application/json' },\n+        body: JSON.stringify({ name: newItemData.name })\n+      });\n+\n+      if (!response.ok) throw new Error('Failed to create grade');\n+      const data = await response.json();\n+      \n+      if (!data.success) throw new Error(data.message || 'Failed to create grade');\n+      \n+      // Update grades list\n+      setGrades([...grades, data.data.grade]);\n+      setModalState({ ...modalState, showAddGrade: false });\n+      setNewItemData({ name: '', description: '' });\n+      toast.success('Grade created successfully');\n+    } catch (error) {\n+      console.error('Error creating grade:', error);\n+      toast.error('Failed to create grade');\n+    }\n+  };\n+\n+  const handleCreateTopic = async () => {\n+    if (!selectedGradeId) {\n+      toast.error('Please select a grade first');\n+      return;\n+    }\n+\n+    try {\n+      const newTopic = await contentService.createTopic({\n+        title: newItemData.name, // Map from newItemData.name to title\n+        description: newItemData.description,\n+        gradeId: selectedGradeId\n+      });\n+\n+      setTopics(prev => [...prev, newTopic]);\n+      toast.success('Topic created successfully');\n+      setModalState({ ...modalState, showAddTopic: false });\n+      setNewItemData({ name: '', description: '' });\n+    } catch (err) {\n+      const error = err instanceof Error ? err.message : String(err);\n+      console.error('Error creating topic:', error);\n+      toast.error('Failed to create topic');\n+    }\n+  };\n+    \n+  \n+\n+\n+  const handleCreateSubtopic = async (data: { title: string; description?: string }) => {\n+    try {\n+      if (!selectedTopicId) {\n+        toast.error('Please select a topic first');\n+        return;\n+      }\n+\n+      const newSubtopic = await contentService.createSubtopic({\n+        ...data,\n+        topicId: selectedTopicId\n+      });\n+\n+      setSubtopics(prev => [...prev, {\n+        _id: newSubtopic.id,\n+        id: newSubtopic.id,\n+        name: newSubtopic.title,\n+        title: newSubtopic.title,\n+        description: newSubtopic.description,\n+        topic_id: newSubtopic.topic_id,\n+        orderIndex: prev.length,\n+        lessons: []\n+      }]);\n+\n+      toast.success('Subtopic created successfully');\n+      setModalState(prev => ({ ...prev, showAddSubtopic: false }));\n+    } catch (err) {\n+      const error = err as Error;\n+      console.error('Error creating subtopic:', error);\n+      toast.error('Failed to create subtopic');\n+    }\n+  };\n+\n+  const handleUpdateSubtopic = async (subtopicId: string, data: { title: string; description?: string }) => {\n+    try {\n+      const { data: updatedSubtopic, error } = await supabase\n+        .from('sub_topics')\n+        .update(data)\n+        .eq('id', subtopicId)\n+        .select()\n+        .single();\n+\n+      if (error) throw error;\n+      \n+      setSubtopics(prev => prev.map(subtopic => \n+        subtopic.id === subtopicId \n+          ? {\n+              ...subtopic,\n+              name: updatedSubtopic.title\n+            }\n+          : subtopic\n+      ));\n+\n+      toast.success('Subtopic updated successfully');\n+    } catch (err) {\n+      const error = err as Error;\n+      console.error('Error updating subtopic:', error);\n+      toast.error('Failed to update subtopic');\n+    }\n+  };\n+\n+  const handleDeleteSubtopic = async (subtopicId: string) => {\n+    try {\n+      await contentService.deleteSubtopic(subtopicId);\n+      setSubtopics(prev => prev.filter(subtopic => subtopic.id !== subtopicId));\n+      setSelectedSubtopicId(null);\n+      toast.success('Subtopic deleted successfully');\n+    } catch (err) {\n+      const error = err as Error;\n+      console.error('Error deleting subtopic:', error);\n+      toast.error('Failed to delete subtopic');\n+    }\n+  };\n+\n+  const handleCreateLesson = async () => {\n+    if (!selectedSubtopicId) {\n+      toast.error('Please select a subtopic first');\n+      return;\n+    }\n+\n+    try {\n+      // First create the lesson\n+      const { data: newLesson, error: lessonError } = await supabase\n+        .from('lessons')\n+        .insert({\n+          title: newItemData.name,\n+          duration: 0,\n+          topic_id: selectedTopicId,\n+          subtopic_id: selectedSubtopicId,\n+          content: '', // Empty rich text content initially\n+          status: 'draft'\n+        })\n+        .select()\n+        .single();\n+\n+      if (lessonError) throw lessonError;\n+\n+      // Create initial question\n+      const { data: newQuestion, error: questionError } = await supabase\n+        .from('questions')\n+        .insert({\n+          lesson_id: newLesson.id,\n+          type: 'speaking', // default type\n+          title: 'Question 1',\n+          data: {\n+            prompt: '',\n+            teacherScript: '',\n+            options: []\n+          },\n+          order_index: 0\n+        })\n+        .select()\n+        .single();\n+\n+      if (questionError) throw questionError;\n+\n+      // Create initial exercise prompts for the question\n+      const { error: promptsError } = await supabase\n+        .from('exercise_prompts')\n+        .insert([\n+          {\n+            question_id: newQuestion.id,\n+            text: '',\n+            type: 'image',\n+            narration: '',\n+            saytext: '',\n+            media: [],\n+            order_index: 0\n+          },\n+          {\n+            question_id: newQuestion.id,\n+            text: '',\n+            type: 'gif',\n+            narration: '',\n+            saytext: '',\n+            media: [],\n+            order_index: 1\n+          }\n+        ]);\n+\n+      if (promptsError) throw promptsError;\n+\n+      // Create initial activity\n+      // const { error: activityError } = await supabase\n+      //   .from('activities')\n+      //   .insert({\n+      //     lesson_id: newLesson.id,\n+      //     type: 'practice',\n+      //     title: '',\n+      //     instructions: '',\n+      //     media: [],\n+      //     data: {\n+      //       prompt: '',\n+      //       teacherScript: '',\n+      //       media: []\n+      //     },\n+      //     order_index: 0\n+      //   });\n+\n+      // if (activityError) throw activityError;\n+\n+      // Update UI state\n+      setLessons(prev => [...prev, newLesson]);\n+      setCurrentLessonId(newLesson.id);\n+      setLessonTitle(newLesson.title);\n+      setModalState({ ...modalState, showAddLesson: false });\n+      setNewItemData({ name: '', description: '' });\n+      toast.success('Lesson created successfully');\n+\n+    } catch (error) {\n+      console.error('Error creating lesson:', error);\n+      toast.error('Failed to create lesson');\n+    }\n+  };\n+\n+  // Effect to handle localStorage after mount\n+  useEffect(() => {\n+    const storedMode = localStorage.getItem('lessonManagementViewMode');\n+    if (storedMode !== null) {\n+      setIsViewMode(storedMode === 'true');\n+    }\n+  }, []);\n+\n+  // Update the cleanupModalState function\n+  const cleanupModalState = useCallback(() => {\n+    document.body.style.pointerEvents = '';\n+    document.body.style.overflow = '';\n+    setModalState({\n+      showAddGrade: false,\n+      showAddTopic: false,\n+      showAddSubtopic: false,\n+      showAddLesson: false\n+    });\n+    setNewItemData({ name: '', description: '' });\n+  }, []);\n+\n+  // Add a function to handle modal state changes\n+  const handleModalStateChange = useCallback((modalType: keyof typeof modalState, open: boolean) => {\n+    if (!open) {\n+      cleanupModalState();\n+    } else {\n+      setModalState(prev => ({ ...prev, [modalType]: open }));\n+    }\n+  }, [cleanupModalState]);\n+\n+  const handleContentSave = async (content: string) => {\n+    const loadingToast = toast.loading(\"Saving content...\", {\n+      action: {\n+        label: \"Close\",\n+        onClick: () => toast.dismiss()\n+      }\n+    });\n+    \n+    try {\n+      const { data: { session } } = await supabase.auth.getSession();\n+      if (!session?.user) {\n+        toast.error('Please sign in to save content', { id: loadingToast });\n+        return;\n+      }\n+\n+      // Get the most recent content entry\n+      const { data: existingContent, error: checkError } = await supabase\n+        .from('lesson_content')\n+        .select('id')\n+        .eq('lesson_id', currentLessonId)\n+        .order('updated_at', { ascending: false })\n+        .limit(1)\n+        .maybeSingle();\n+\n+      // If content exists, update it; if not, insert new\n+      const { error } = await supabase\n+        .from('lesson_content')\n+        .upsert({\n+          id: existingContent?.id, // This ensures we update if id exists\n+          lesson_id: currentLessonId,\n+          content: [content],\n+          content_type: 'text',\n+          metadata: {\n+            heading: contentHeading\n+          },\n+          user_id: session.user.id,\n+          updated_at: new Date().toISOString()\n+        }, {\n+          onConflict: 'id'  // This ensures we update based on lesson_id\n+        });\n+\n+      if (error) throw error;\n+\n+      // Save questions separately\n+      for (const question of questions) {\n+        const { exercisePrompts, ...questionData } = question; // Remove exercisePrompts from question data\n+        \n+        // Save question\n+        const { error: questionError } = await supabase\n+          .from('questions')\n+          .upsert(questionData, {\n+            onConflict: 'id'\n+          })\n+          .select();\n+\n+        if (questionError) throw questionError;\n+\n+        // Save exercise prompts\n+        if (exercisePrompts?.length > 0) {\n+          for (const prompt of exercisePrompts) {\n+            const { error: promptError } = await supabase\n+              .from('exercise_prompts')\n+              .upsert(prompt, {\n+                onConflict: 'id'\n+              })\n+              .select();\n+\n+            if (promptError) throw promptError;\n+          }\n+        }\n+      }\n+      \n+      toast.success(\"Content saved successfully\", {\n+        action: {\n+          label: \"Close\",\n+          onClick: () => toast.dismiss()\n+        },\n+        id: loadingToast,\n+      });\n+      setIsContentEditorOpen(false);\n+    } catch (error) {\n+      console.error('Error saving content:', error);\n+      toast.error(\"Failed to save content\", {\n+        action: {\n+          label: \"Close\",\n+          onClick: () => toast.dismiss()\n+        },\n+        id: loadingToast,\n+      });\n+    }\n+  };\n+\n+  // Add this component for inline editing\n+  const InlineEdit = ({ \n+    value, \n+    onSave, \n+    isEditing, \n+    setIsEditing, \n+    placeholder,\n+    className = \"\"\n+  }: InlineEditProps) => {\n+    const [tempValue, setTempValue] = useState(value);\n+    \n+    return isEditing ? (\n+      <div className=\"flex items-center gap-2\">\n+        <Input\n+          value={tempValue}\n+          onChange={(e) => setTempValue(e.target.value)}\n+          placeholder={placeholder}\n+          className={className}\n+          autoFocus\n+        />\n+        <Button\n+          size=\"sm\"\n+          variant=\"ghost\"\n+          onClick={() => {\n+            onSave(tempValue);\n+            setIsEditing(false);\n+          }}\n+        >\n+          <Check className=\"h-4 w-4 text-green-500\" />\n+        </Button>\n+        <Button\n+          size=\"sm\"\n+          variant=\"ghost\"\n+          onClick={() => setIsEditing(false)}\n+        >\n+          <X className=\"h-4 w-4 text-red-500\" />\n+        </Button>\n+      </div>\n+    ) : (\n+      <div \n+        className=\"group flex items-center gap-2 cursor-pointer\"\n+        onClick={() => setIsEditing(true)}\n+      >\n+        <span className={className}>{value || placeholder}</span>\n+        <Pencil className=\"h-4 w-4 opacity-0 group-hover:opacity-100 transition-opacity\" />\n+      </div>\n+    );\n+  };\n+\n+  // Add this effect to handle auto-collapse after lesson selection\n+  useEffect(() => {\n+    if (currentLessonId && selectedGradeId && selectedTopicId && selectedSubtopicId) {\n+      setIsSidebarLocked(false);\n+      // Optional: add a slight delay before collapsing\n+      setTimeout(() => setIsSidebarCollapsed(true), 300);\n+    }\n+  }, [currentLessonId, selectedGradeId, selectedTopicId, selectedSubtopicId]);\n+\n+  // Add individual save handlers\n+  // const handleSaveQuestion = async (question: Question, index: number) => {\n+  //   try {\n+  //     // Update status to saving\n+  //     setQuestionSaveStatuses(prev => [\n+  //       ...prev.filter(s => s.id !== question.id),\n+  //       { id: question.id, status: 'saving' }\n+  //     ]);\n+\n+  //     const questionUpsert = {\n+  //       id: question.id,\n+  //       lesson_id: currentLessonId,\n+  //       type: question.type,\n+  //       title: question.data?.prompt || 'Untitled Question',\n+  //       metadata: question.metadata || {},\n+  //       data: {\n+  //         prompt: question.data?.prompt || '',\n+  //         teacherScript: question.data?.teacherScript || '',\n+  //         ...question.data\n+  //       },\n+  //       order_index: index,\n+  //       created_at: new Date().toISOString(),\n+  //       updated_at: new Date().toISOString()\n+  //     };\n+\n+  //     const { error: questionError } = await supabase\n+  //       .from('questions')\n+  //       .upsert(questionUpsert);\n+\n+  //     if (questionError) throw questionError;\n+\n+  //     // Update status to saved\n+  //     setQuestionSaveStatuses(prev => [\n+  //       ...prev.filter(s => s.id !== question.id),\n+  //       { id: question.id, status: 'saved', lastSaved: new Date().toISOString() }\n+  //     ]);\n+\n+  //     toast.success(`Question ${index + 1} saved successfully`);\n+  //   } catch (error) {\n+  //     console.error('Error saving question:', error);\n+  //     setQuestionSaveStatuses(prev => [\n+  //       ...prev.filter(s => s.id !== question.id),\n+  //       { id: question.id, status: 'error' }\n+  //     ]);\n+  //     toast.error(`Failed to save question ${index + 1}`);\n+  //   }\n+  // };\n+\n+  const handleSavePrompt = async (questionId: string, prompt: ExercisePrompt, promptIndex: number) => {\n+    try {\n+      setPromptSaveStatuses(prev => [\n+        ...prev.filter(s => s.id !== prompt.id),\n+        { id: prompt.id || '', status: 'saving' } as SaveStatus\n+      ]);\n+\n+      const promptUpsert = {\n+        id: prompt.id,\n+        question_id: questionId,\n+        text: prompt.text || '',\n+        type: prompt.type || 'text',\n+        narration: prompt.narration || '',\n+        saytext: prompt.saytext || '',\n+        media: prompt.media || [],\n+        order_index: promptIndex,\n+        created_at: prompt.created_at || new Date().toISOString(),\n+        updated_at: new Date().toISOString()\n+      };\n+\n+      const { error: promptError } = await supabase\n+        .from('exercise_prompts')\n+        .upsert(promptUpsert);\n+\n+      if (promptError) throw promptError;\n+\n+      setPromptSaveStatuses(prev => [\n+        ...prev.filter(s => s.id !== prompt.id),\n+        { id: prompt.id || '', status: 'saved', lastSaved: new Date().toISOString() } as SaveStatus\n+      ]);\n+\n+      toast.success(`Prompt ${promptIndex + 1} saved successfully`);\n+    } catch (error) {\n+      console.error('Error saving prompt:', error);\n+      setPromptSaveStatuses(prev => [\n+        ...prev.filter(s => s.id !== prompt.id),\n+        { id: prompt.id || '', status: 'error' } as SaveStatus\n+      ]);\n+      toast.error(`Failed to save prompt ${promptIndex + 1}`);\n+    }\n+  };\n+\n+  // Add effect to mark items as draft when edited\n+  useEffect(() => {\n+    questions.forEach(question => {\n+      if (!questionSaveStatuses.find(s => s.id === question.id)) {\n+        setQuestionSaveStatuses(prev => [\n+          ...prev,\n+          { id: question.id, status: 'draft' }\n+        ]);\n+      }\n+    });\n+  }, [questions]);\n+\n+  // Add this function with your other handlers\n+  const handleRefreshLesson = async () => {\n+    if (!currentLessonId) {\n+      toast.error('No lesson selected');\n+      return;\n+    }\n+    \n+    try {\n+      toast.loading('Refreshing lesson content...', {\n+        action: {\n+          label: \"Close\",\n+          onClick: () => toast.dismiss()\n+        },\n+      });\n+      await handleLessonSelect(currentLessonId);\n+      toast.success('Content refreshed', {\n+        action: {\n+          label: \"Close\",\n+          onClick: () => toast.dismiss()\n+        },\n+      });\n+    } catch (error) {\n+      console.error('Error refreshing lesson:', error);\n+      toast.error('Failed to refresh content', {\n+        action: {\n+          label: \"Close\",\n+          onClick: () => toast.dismiss()\n+        },\n+      });\n+    }\n+  };\n+\n+  // Add this function to handle refresh\n+  const handleRefreshContent = async () => {\n+    if (!currentLessonId) {\n+      toast.error('No lesson selected');\n+      return;\n+    }\n+    \n+    toast.loading('Refreshing content...');\n+    try {\n+      await loadLessonContent(currentLessonId);\n+      toast.success('Content refreshed');\n+    } catch (error) {\n+      console.error('Refresh error:', error);\n+      toast.error('Failed to refresh content');\n+    }\n+  };\n+\n+  // Update the sidebar hover mechanism\n+  const handleSidebarHover = useCallback(\n+    debounce((isHovering: boolean) => {\n+      if (!isSidebarLocked && !isNavigating && !isDropdownOpen) {\n+        if (isHovering || document.activeElement?.closest('.sidebar-content')) {\n+          setIsSidebarCollapsed(false);\n+        } else {\n+          setTimeout(() => {\n+            if (!isDropdownOpen) { // Only collapse if dropdown is closed\n+              setIsSidebarCollapsed(true);\n+            }\n+          }, 300);\n+        }\n+      }\n+    }, 100),\n+    [isSidebarLocked, isNavigating, isDropdownOpen]\n+  );\n+\n+  // Update the sidebar JSX\n+  <div \n+    className={cn(\n+      \"transition-all duration-300 ease-in-out relative\",\n+      isSidebarCollapsed ? \"w-20\" : \"w-80\",\n+      \"flex-shrink-0 group\"\n+    )}\n+    onMouseEnter={() => {\n+      handleSidebarHover(true);\n+      // Immediately expand on mouse enter\n+      if (!isSidebarLocked) {\n+        setIsSidebarCollapsed(false);\n+      }\n+    }}\n+    onMouseLeave={() => {\n+      // Only collapse if not interacting with content\n+      if (!document.activeElement?.closest('.sidebar-content')) {\n+        handleSidebarHover(false);\n+      }\n+    }}\n+    onFocus={() => setIsSidebarCollapsed(false)}\n+  >\n+    <Card className={cn(\n+      \"h-full relative sidebar-content\", // Added sidebar-content class\n+      \"transition-shadow duration-300\",\n+      \"hover:shadow-lg\"\n+    )}>\n+      {/* Rest of sidebar content */}\n+    </Card>\n+  </div>\n+\n+  // Update the sidebar and card styles\n+  return (\n+      <div className=\"container mx-auto py-8\">\n+        {/* Header */}\n+        <div className=\"flex items-center justify-between mb-2\">\n+          {/* ... header content ... */}\n+          <div className=\"flex items-center gap-4\">\n+            <Link href=\"/super-admin\">\n+              <Button variant=\"outline\" className=\"gap-2\">\n+                <ArrowLeft className=\"h-4 w-4\" />\n+                Back\n+              </Button>\n+            </Link>\n+            <div className=\"flex items-center gap-2\">\n+              <h1 className=\"text-2xl font-bold\">Lesson Management</h1>\n+              <Button\n+                variant=\"ghost\"\n+                size=\"icon\"\n+                onClick={handleRefreshLesson}\n+                className=\"ml-2\"\n+                title=\"Refresh lesson content\"\n+              >\n+                <RefreshCw className=\"h-4 w-4\" />\n+              </Button>\n+            </div>\n+            <p className=\"text-sm text-muted-foreground\">Create and manage your educational content</p>\n+          </div>\n+          <div className=\"flex items-center gap-2\">\n+            <Button\n+              variant=\"outline\"\n+              size=\"sm\"\n+              onClick={() => setShowHelpTips(!showHelpTips)}\n+              className=\"gap-2\"\n+            >\n+              {showHelpTips ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n+              {showHelpTips ? 'Hide Tips' : 'Show Tips'}\n+            </Button>\n+          </div>\n+        </div>\n+        \n+        {/* Main content wrapper - Fix the layout here */}\n+        <div className=\"flex gap-6 h-[calc(100vh-200px)]\">\n+          {/* Improved sidebar */}\n+          <div \n+            className={cn(\n+              \"transition-all duration-300 ease-in-out relative\",\n+              isSidebarCollapsed ? \"w-20\" : \"w-80\",\n+              \"flex-shrink-0 group\"\n+            )}\n+            onMouseEnter={() => {\n+              handleSidebarHover(true);\n+              // Immediately expand on mouse enter\n+              if (!isSidebarLocked) {\n+                setIsSidebarCollapsed(false);\n+              }\n+            }}\n+            onMouseLeave={() => {\n+              // Only collapse if not interacting with content\n+              if (!document.activeElement?.closest('.sidebar-content')) {\n+                handleSidebarHover(false);\n+              }\n+            }}\n+            onFocus={() => setIsSidebarCollapsed(false)}\n+          >\n+            <Card className={cn(\n+              \"h-full relative sidebar-content\", // Added sidebar-content class\n+              \"transition-shadow duration-300\",\n+              \"hover:shadow-lg\"\n+            )}>\n+              {/* Lock button - only show after lesson selection */}\n+              {currentLessonId && (\n+                <Button\n+                  variant=\"ghost\"\n+                  size=\"sm\"\n+                  className=\"absolute top-2 right-2 z-10\"\n+                  onClick={() => {\n+                    setIsSidebarLocked(!isSidebarLocked);\n+                    if (!isSidebarLocked) {\n+                      setIsSidebarCollapsed(false);\n+                    }\n+                  }}\n+                >\n+                  {isSidebarLocked ? <Lock className=\"h-4 w-4\" /> : <Unlock className=\"h-4 w-4\" />}\n+                </Button>\n+              )}\n+\n+              {/* Sidebar content with overflow handling */}\n+              <div className={cn(\n+                \"transition-all duration-300 overflow-hidden\",\n+                isSidebarCollapsed ? \"opacity-0\" : \"opacity-100\"\n+              )}>\n+                <Card className=\"h-full\">\n+                  <CardHeader className=\"pb-3\">\n+                    <div className=\"flex items-center justify-between\">\n+                      <CardTitle className=\"text-lg font-semibold\">Content Management</CardTitle>\n+                      <TooltipProvider>\n+                        <Tooltip>\n+                          <TooltipTrigger>\n+                            <HelpCircle className=\"h-4 w-4 text-muted-foreground\" />\n+                          </TooltipTrigger>\n+                          <TooltipContent>\n+                            <p>Manage your educational content here</p>\n+                          </TooltipContent>\n+                        </Tooltip>\n+                      </TooltipProvider>\n+                      </div>\n+                    <CardDescription>Create and manage your lessons</CardDescription>\n+                  </CardHeader>\n+                  <CardContent className=\"space-y-4\">\n+                    {/* View/Edit Mode Toggle */}\n+                    <div className=\"grid grid-cols-2 gap-2 p-1 bg-muted rounded-lg\">\n+                      <Button\n+                        variant={isViewMode ? \"default\" : \"ghost\"}\n+                        size=\"sm\"\n+                        onClick={() => setIsViewMode(true)}\n+                        className=\"w-full\"\n+                      >\n+                        <Eye className=\"h-4 w-4 mr-2\" />\n+                        View\n+                      </Button>\n+                      <Button\n+                        variant={!isViewMode ? \"default\" : \"ghost\"}\n+                        size=\"sm\"\n+                        onClick={() => setIsViewMode(false)}\n+                        className=\"w-full\"\n+                      >\n+                        <Edit className=\"h-4 w-4 mr-2\" />\n+                        Edit\n+                      </Button>\n+                    </div>\n+\n+                    {/* Grade Selection */}\n+                    <div className=\"space-y-2\">\n+                      <div className=\"flex items-center justify-between\">\n+                        <Label htmlFor=\"grade-select\">Grade</Label>\n+                        {isViewMode && (\n+                          <Button variant=\"ghost\" size=\"sm\" onClick={() => setExpandedGrade(expandedGrade ? null : selectedGrade)}>\n+                            {expandedGrade ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n+                          </Button>\n+                        )}\n+                      </div>\n+                      <Select \n+                        value={selectedGradeId || ''}\n+                        onValueChange={handleGradeSelect}\n+                        onOpenChange={(open) => {\n+                          if (open) {\n+                            // Force sidebar to stay open and lock it\n+                            setIsSidebarCollapsed(false);\n+                            setIsSidebarLocked(true);\n+                          }\n+                        }}\n+                      >\n+                        <SelectTrigger \n+                          id=\"grade-select\" \n+                          className=\"w-full\"\n+                          onClick={(e) => {\n+                            e.stopPropagation(); // Prevent event bubbling\n+                            setIsSidebarCollapsed(false);\n+                            setIsSidebarLocked(true);\n+                          }}\n+                        >\n+                          <SelectValue placeholder=\"Select Grade\" />\n+                        </SelectTrigger>\n+                        <SelectContent \n+                          onCloseAutoFocus={(e) => {\n+                            e.preventDefault();\n+                            setIsSidebarLocked(true);\n+                            setIsSidebarCollapsed(false);\n+                          }}\n+                        >\n+                          {grades.map((grade: Grade) => (\n+                            <SelectItem \n+                              key={`grade-${grade.id || 'new'}`} \n+                              value={grade.id || ''}\n+                              onMouseDown={(e) => {\n+                                e.preventDefault();\n+                                e.stopPropagation();\n+                              }}\n+                            >\n+                              <div className=\"flex items-center gap-2\">\n+                                <BookOpen className=\"h-4 w-4 text-primary\" />\n+                                {grade.name}\n+                              </div>\n+                            </SelectItem>\n+                          ))}\n+                        </SelectContent>\n+                      </Select>\n+                      {!isViewMode && (\n+                      <Button \n+                        variant=\"outline\" \n+                        size=\"sm\" \n+                        className=\"w-full gap-2\"\n+                        onClick={() => setModalState({ ...modalState, showAddGrade: false })}\n+                      >\n+                        <Plus className=\"h-4 w-4\" />\n+                        Add New Grade\n+                      </Button>\n+                      )}\n+                    </div>\n+\n+                    {/* Content Tree View in View Mode */}\n+                    {isViewMode && selectedGrade && (\n+  <div className=\"grid grid-cols-1 gap-6 p-6\">\n+    <Card className=\"border-primary/10\">\n+      <CardHeader>\n+        <div className=\"flex items-center justify-between\">\n+          <CardTitle>Content Structure</CardTitle>\n+          <Badge variant=\"outline\" className=\"text-primary\">\n+            {topics.length} Topics\n+          </Badge>\n+        </div>\n+      </CardHeader>\n+      <CardContent className=\"space-y-6\">\n+        {topics.map((topic) => (\n+          <Card \n+            key={topic.id} \n+            className={cn(\n+              \"border-l-4 transition-all duration-200\",\n+              \"border-l-primary/40 hover:border-l-primary\"\n+            )}\n+          >\n+            <CardHeader className=\"py-4\">\n+              <div className=\"flex items-center justify-between\">\n+                <div className=\"flex items-center gap-2\">\n+                  <Layers className=\"h-5 w-5 text-primary\" />\n+                  <div>\n+                    <h3 className=\"font-medium\">{topic.title}</h3>\n+                    <p className=\"text-sm text-muted-foreground\">\n+                      {subtopics.filter(s => s.topic_id === topic.id).length} Subtopics\n+                    </p>\n+                  </div>\n+                </div>\n+                <Button\n+                  variant=\"ghost\"\n+                  size=\"sm\"\n+                  className=\"hover:bg-destructive/10\"\n+                  onClick={async () => {\n+                    const { canDelete, message } = await checkDeletability('topic', topic.id);\n+                    if (!canDelete) {\n+                      toast.error(message);\n+                      return;\n+                    }\n+                    setItemToDelete({\n+                      id: topic.id,\n+                      type: 'topic',\n+                      title: topic.title\n+                    });\n+                    setDeleteDialogOpen(true);\n+                  }}\n+                >\n+                  <Trash className=\"h-4 w-4\" />\n+                </Button>\n+              </div>\n+\n+              <div className=\"mt-4 pl-4 space-y-4\">\n+                {subtopics\n+                  .filter(subtopic => subtopic.topic_id === topic.id)\n+                  .map((subtopic) => {\n+                    const subtopicLessons = lessons.filter(l => l.subtopic_id === subtopic.id);\n+                    const isEmpty = subtopicLessons.length === 0;\n+                    \n+                    return (\n+                      <Card key={subtopic.id} className=\"border-l-2 border-l-primary/20\">\n+                        <CardHeader className=\"py-3\">\n+                          <div className=\"flex items-center justify-between\">\n+                            <div className=\"flex items-center gap-2\">\n+                              <BookOpen className=\"h-4 w-4 text-primary\" />\n+                              <div>\n+                                <h4 className=\"font-medium\">{subtopic.title}</h4>\n+                                <div className=\"flex items-center gap-2\">\n+                                  <Badge variant=\"outline\">\n+                                    {subtopicLessons.length} Lessons\n+                                  </Badge>\n+                                  {isEmpty && (\n+                                    <Badge variant=\"outline\" className=\"text-yellow-500\">\n+                                      Empty\n+                                    </Badge>\n+                                  )}\n+                                </div>\n+                              </div>\n+                            </div>\n+                            <Button\n+                              variant=\"ghost\"\n+                              size=\"sm\"\n+                              className=\"hover:bg-destructive/10\"\n+                              onClick={async () => {\n+                                const { canDelete, message } = await checkDeletability('subtopic', subtopic.id);\n+                                if (!canDelete) {\n+                                  toast.error(message);\n+                                  return;\n+                                }\n+                                setItemToDelete({\n+                                  id: subtopic.id,\n+                                  type: 'subtopic',\n+                                  title: subtopic.title\n+                                });\n+                                setDeleteDialogOpen(true);\n+                              }}\n+                            >\n+                              <Trash className=\"h-4 w-4\" />\n+                            </Button>\n+                          </div>\n+\n+                          <div className=\"pl-4 mt-2 space-y-2\">\n+                            {subtopicLessons.map((lesson) => {\n+                              const questionCount = lesson.questions?.length || 0;\n+                              const isEmpty = questionCount === 0;\n+                              \n+                              return (\n+                                <Card key={lesson.id} className=\"border-l border-l-primary/10\">\n+                                  <CardHeader className=\"py-2\">\n+                                    <div className=\"flex items-center justify-between\">\n+                                      <div className=\"flex items-center gap-2\">\n+                                        <div className=\"flex flex-col\">\n+                                          <span className=\"text-sm font-medium\">\n+                                            {lesson.title}\n+                                          </span>\n+                                          <div className=\"flex items-center gap-2\">\n+                                            <span className=\"text-xs text-muted-foreground\">\n+                                              {lesson.duration || 0} mins • {questionCount} Questions\n+                                            </span>\n+                                            {isEmpty && (\n+                                              <Badge \n+                                                variant=\"outline\" \n+                                                className=\"text-yellow-500\"\n+                                              >\n+                                                Empty\n+                                              </Badge>\n+                                            )}\n+                                          </div>\n+                                        </div>\n+                                      </div>\n+                                      <Button\n+                                        variant=\"ghost\"\n+                                        size=\"sm\"\n+                                        className=\"hover:bg-destructive/10\"\n+                                        onClick={async () => {\n+                                          const { canDelete, message } = await checkDeletability('lesson', lesson.id);\n+                                          if (!canDelete) {\n+                                            toast.error(message);\n+                                            return;\n+                                          }\n+                                          setItemToDelete({\n+                                            id: lesson.id,\n+                                            type: 'lesson',\n+                                            title: lesson.title\n+                                          });\n+                                          setDeleteDialogOpen(true);\n+                                        }}\n+                                      >\n+                                        <Trash className=\"h-4 w-4\" />\n+                                      </Button>\n+                                    </div>\n+                                  </CardHeader>\n+                                </Card>\n+                              );\n+                            })}\n+                          </div>\n+                        </CardHeader>\n+                      </Card>\n+                    );\n+                  })}\n+              </div>\n+            </CardHeader>\n+          </Card>\n+        ))}\n+      </CardContent>\n+    </Card>\n+  </div>\n+)}\n+\n+                    {/* Regular Edit Mode Content */}\n+                    {!isViewMode && (\n+                      <>\n+                        {/* Existing Topic, Subtopic, and Lesson Selection UI */}\n+                      {/* Topic Selection */}\n+                        {selectedGradeId && (\n+                      <div className=\"space-y-2\">\n+                        <div className=\"flex items-center justify-between\">\n+                        <Label htmlFor=\"topic-select\">Topic</Label>\n+                        </div>\n+                        <Select \n+                              value={selectedTopicId || ''} \n+                              onValueChange={handleTopicSelect}\n+                        >\n+                          <SelectTrigger id=\"topic-select\" className=\"w-full\">\n+                            <SelectValue placeholder=\"Select Topic\" />\n+                          </SelectTrigger>\n+                          <SelectContent>\n+                                {topics.map((topic: Topic) => (\n+                                  <SelectItem \n+                                    key={`topic-${topic.id || 'new'}`} \n+                                    value={topic.id || ''}\n+                                  >\n+                                  <div className=\"flex items-center gap-2\">\n+                                  <Layers className=\"h-4 w-4 text-primary\" />\n+                                    {topic.title}\n+                                  </div>\n+                                </SelectItem>\n+                              ))}\n+                          </SelectContent>\n+                        </Select>\n+                        <Button \n+                          variant=\"outline\" \n+                          size=\"sm\" \n+                          className=\"w-full gap-2\"\n+                          onClick={() => setModalState({ ...modalState, showAddTopic: true })}\n+                        >\n+                          <Plus className=\"h-4 w-4\" />\n+                          Add New Topic\n+                        </Button>\n+                      </div>\n+                    )}\n+\n+                    {/* Subtopic Selection */}\n+                        {selectedTopicId && (\n+                      <div className=\"space-y-2\">\n+                        <div className=\"flex items-center justify-between\">\n+                        <Label htmlFor=\"subtopic-select\">Subtopic</Label>\n+                        </div>\n+                        <Select \n+                              value={selectedSubtopicId || ''} \n+                              onValueChange={handleSubtopicSelect}\n+                        >\n+                          <SelectTrigger id=\"subtopic-select\" className=\"w-full\">\n+                            <SelectValue placeholder=\"Select Subtopic\" />\n+                          </SelectTrigger>\n+                          <SelectContent>\n+                                {subtopics\n+                                  .filter(subtopic => subtopic.id)\n+                                  .map((subtopic, index) => (\n+                                    <SelectItem \n+                                      key={subtopic.id || `subtopic-${index}`}\n+                                      value={subtopic.id || ''}\n+                                    >\n+                                      {subtopic.title || 'Untitled Subtopic'}\n+                                    </SelectItem>\n+                                  ))}\n+                          </SelectContent>\n+                        </Select>\n+                        {!isViewMode && (\n+                          <Button \n+                            variant=\"outline\" \n+                            size=\"sm\" \n+                            className=\"w-full gap-2\"\n+                            onClick={() => setModalState({ ...modalState, showAddSubtopic: true })}\n+                          >\n+                            <Plus className=\"h-4 w-4\" />\n+                            Add New Subtopic\n+                          </Button>\n+                        )}\n+                      </div>\n+                    )}\n+\n+                    {/* Lesson Selection */}\n+                        {selectedSubtopicId && (\n+                      <div className=\"space-y-2\">\n+                        <div className=\"flex items-center justify-between\">\n+                          <Label htmlFor=\"lesson-select\">Lesson</Label>\n+                        </div>\n+                          <Select \n+                            value={currentLessonId || ''} \n+                            onValueChange={handleLessonSelect}\n+                            onOpenChange={(open) => {\n+                              setIsDropdownOpen(open);\n+                              if (open) {\n+                                setIsSidebarCollapsed(false);\n+                                setIsSidebarLocked(true);\n+                              } else {\n+                                // Small delay before unlocking to prevent immediate collapse\n+                                setTimeout(() => {\n+                                  setIsSidebarLocked(false);\n+                                }, 100);\n+                              }\n+                            }}\n+                          >\n+                            <SelectTrigger \n+                              id=\"lesson-select\" \n+                              className=\"w-full\"\n+                              onClick={(e) => {\n+                                e.stopPropagation();\n+                                setIsSidebarCollapsed(false);\n+                                setIsSidebarLocked(true);\n+                              }}\n+                            >\n+                              <SelectValue placeholder=\"Select Lesson\" />\n+                            </SelectTrigger>\n+                            <SelectContent>\n+                              {lessons\n+                                .filter((lesson): lesson is Lesson => lesson !== undefined && lesson !== null)\n+                                .map((lesson: Lesson) => (\n+                                  <SelectItem \n+                                    key={`lesson-${lesson.id || 'new'}`} \n+                                    value={lesson.id || ''}\n+                                  >\n+                                    <div className=\"flex items-center gap-2\">\n+                                      <BookOpen className=\"h-4 w-4 text-primary\" />\n+                                      {lesson.title || 'Untitled Lesson'}\n+                                    </div>\n+                                  </SelectItem>\n+                                ))}\n+                            </SelectContent>\n+                          </Select>\n+                    <Button \n+                            variant=\"outline\" \n+                            size=\"sm\" \n+                            className=\"w-full gap-2\"\n+                        onClick={() => setModalState({ ...modalState, showAddLesson: true })}\n+                          >\n+                            <Plus className=\"h-4 w-4\" />\n+                            Add New Lesson\n+                    </Button>\n+                      </div>\n+                        )}\n+                      </>\n+                    )}\n+                  </CardContent>\n+                </Card>\n+              </div>\n+\n+              {/* Collapsed view */}\n+              {isSidebarCollapsed && (\n+                <div className=\"absolute inset-0 flex flex-col items-center pt-12 gap-4\">\n+                  <BookOpen className=\"h-6 w-6 text-muted-foreground\" />\n+                  <div className=\"w-px h-full bg-border\" />\n+                </div>\n+              )}\n+            </Card>\n+          </div>\n+        \n+\n+          {/* Right Content Area */}\n+          <div className=\"flex-1 overflow-y-auto\">\n+            {isNavigating ? (\n+              <div className=\"flex items-center justify-center h-[400px]\">\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n+                <span className=\"ml-3\">Loading...</span>\n+              </div>\n+            ) : (\n+              <>\n+                {!selectedGradeId ? (\n+                  // Question Types Display Section\n+                  <div className=\"space-y-6\">\n+                    <Card>\n+                      <CardHeader>\n+                        <div className=\"flex items-center justify-between\">\n+                          <div>\n+                            <CardTitle className=\"text-xl font-semibold\">Available Question Types</CardTitle>\n+                            <CardDescription>Browse through different question formats and examples</CardDescription>\n+                          </div>\n+                          <TooltipProvider>\n+                            <Tooltip>\n+                              <TooltipTrigger>\n+                                <HelpCircle className=\"h-5 w-5 text-muted-foreground\" />\n+                              </TooltipTrigger>\n+                              <TooltipContent>\n+                                <p>Click on each type to see detailed examples</p>\n+                              </TooltipContent>\n+                            </Tooltip>\n+                          </TooltipProvider>\n+                        </div>\n+                      </CardHeader>\n+                      <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n+                        {Object.entries(QUESTION_TYPES).map(([type, details]) => (\n+                          <Card key={type} className=\"cursor-pointer hover:bg-accent/50 transition-colors\">\n+                            <CardHeader className=\"p-4\">\n+                              <div className=\"flex items-center justify-between mb-2\">\n+                                <Badge variant=\"outline\" className=\"bg-primary/5 text-lg\">\n+                                  {details.label}\n+                                </Badge>\n+                              </div>\n+                              <CardDescription className=\"text-sm\">\n+                                {details.description || 'No description available'}\n+                              </CardDescription>\n+                              <div className=\"mt-4\">\n+                                <div className=\"text-sm font-medium mb-2\">Example:</div>\n+                                <div className=\"p-3 rounded-md bg-muted/50 text-sm\">\n+                                  {type === 'multiple-choice' && (\n+                                    <>\n+                                      <div className=\"font-medium mb-2\">Q: What is the capital of France?</div>\n+                                      <div className=\"space-y-1 pl-4\">\n+                                        <div>A) Paris</div>\n+                                        <div>B) London</div>\n+                                        <div>C) Berlin</div>\n+                                        <div>D) Madrid</div>\n+                                      </div>\n+                                    </>\n+                                  )}\n+                                  {type === 'fill-in-blank' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div>Complete the sentence:</div>\n+                                      <div>The sun rises in the <span className=\"bg-primary/20 px-2 rounded\">_____</span> and sets in the <span className=\"bg-primary/20 px-2 rounded\">_____</span>.</div>\n+                                    </div>\n+                                  )}\n+                                  {type === 'true-false' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div className=\"font-medium\">Statement:</div>\n+                                      <div>The Earth is flat.</div>\n+                                      <div className=\"mt-2\">\n+                                        <Badge variant=\"outline\" className=\"mr-2\">True</Badge>\n+                                        <Badge variant=\"outline\">False</Badge>\n+                                      </div>\n+                                    </div>\n+                                  )}\n+                                  {type === 'matching' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div className=\"font-medium mb-2\">Match the countries with their capitals:</div>\n+                                      <div className=\"grid grid-cols-2 gap-4\">\n+                                        <div>\n+                                          1. France<br />\n+                                          2. Germany<br />\n+                                          3. Spain\n+                                        </div>\n+                                        <div>\n+                                          • Berlin<br />\n+                                          • Paris<br />\n+                                          • Madrid\n+                                        </div>\n+                                      </div>\n+                                    </div>\n+                                  )}\n+                                  {type === 'ordering' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div className=\"font-medium mb-2\">Arrange in chronological order:</div>\n+                                      <div className=\"space-y-1\">\n+                                        <Badge variant=\"outline\" className=\"mr-2\">1</Badge>World War II<br />\n+                                        <Badge variant=\"outline\" className=\"mr-2\">2</Badge>Industrial Revolution<br />\n+                                        <Badge variant=\"outline\" className=\"mr-2\">3</Badge>Renaissance\n+                                      </div>\n+                                    </div>\n+                                  )}\n+                                  {type === 'short-answer' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div className=\"font-medium\">Question:</div>\n+                                      <div>Explain the water cycle in 2-3 sentences.</div>\n+                                      <div className=\"mt-2 p-2 border border-dashed rounded-md border-primary/30\">\n+                                        Answer space\n+                                      </div>\n+                                    </div>\n+                                  )}\n+                                </div>\n+                              </div>\n+                            </CardHeader>\n+                          </Card>\n+                        ))}\n+                      </CardContent>\n+                    </Card>\n+                  </div>\n+                ) : isViewMode ? (\n+                  <div className=\"space-y-6\">\n+                    {selectedGradeId ? (\n+                      <div className=\"grid grid-cols-1 gap-6\">\n+                        {topics.map((topic) => (\n+                          <Card key={topic.id} className=\"border-l-4 border-l-primary\">\n+                            <CardHeader>\n+                              <div className=\"flex items-center justify-between\">\n+                                <h3 className=\"text-lg font-semibold\">{topic.title}</h3>\n+                              </div>\n+                            </CardHeader>\n+                            <CardContent>\n+                              <div className=\"space-y-4\">\n+                                {subtopics\n+                                  .filter(subtopic => subtopic.topic_id === topic.id)\n+                                  .map((subtopic, index) => (\n+                                    <div key={subtopic.id || `subtopic-${index}`} className=\"border-l-2 pl-4\">\n+                                      <h4 className=\"text-md font-medium mb-2\">{subtopic.name || 'Untitled Subtopic'}</h4>\n+                                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n+                                        {lessons\n+                                          .filter(lesson => lesson.subtopic_id === subtopic.id)\n+                                          .map((lesson) => (\n+                                            <Card \n+                                              key={lesson.id} \n+                                              className={cn(\n+                                                \"cursor-pointer transition-all duration-200\",\n+                                                \"hover:shadow-md hover:translate-y-[-2px]\",\n+                                                \"hover:bg-accent/50 hover:border-primary/50\",\n+                                                \"active:translate-y-[0px]\",\n+                                                currentLessonId === lesson.id && \"border-primary bg-accent/50 shadow-md\",\n+                                                \"group\" // Enable group hover effects\n+                                              )}\n+                                              onClick={() => handleLessonSelect(lesson.id)}\n+                                            >\n+                                              <CardHeader className=\"p-4\">\n+                                                <div className=\"flex flex-col gap-2\">\n+                                                  <div className=\"flex items-center justify-between\">\n+                                                    <div className=\"flex items-center gap-2\">\n+                                                      <BookOpen className={cn(\n+                                                        \"h-4 w-4 text-primary\",\n+                                                        \"transition-transform duration-200\",\n+                                                        \"group-hover:scale-110\"\n+                                                      )} />\n+                                                      <span className=\"font-medium\">{lesson.title}</span>\n+                                                    </div>\n+                                                    <Button\n+                                                      variant=\"outline\"\n+                                                      size=\"sm\"\n+                                                      className={cn(\n+                                                        \"opacity-0 group-hover:opacity-100\",\n+                                                        \"transition-all duration-200\",\n+                                                        \"hover:bg-primary hover:text-primary-foreground\"\n+                                                      )}\n+                                                      disabled={!lesson.content || currentLessonId !== lesson.id}\n+                                                      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n+                                                        e.stopPropagation();\n+                                                        window.location.href = `/teacher/lessons/${lesson.id}`;\n+                                                      }}\n+                                                    >\n+                                                      Start Lesson\n+                                                    </Button>\n+                                                  </div>\n+                                                  <div className=\"flex items-center gap-2\">\n+                                                    <Badge variant=\"outline\" className={cn(\n+                                                      \"bg-primary/5\",\n+                                                      \"transition-colors duration-200\",\n+                                                      \"group-hover:bg-primary/10\"\n+                                                    )}>\n+                                                      {lesson.questions?.length || 0} Questions\n+                                                    </Badge>\n+                                                    <Badge variant=\"outline\" className={cn(\n+                                                      \"bg-primary/5\",\n+                                                      \"transition-colors duration-200\",\n+                                                      \"group-hover:bg-primary/10\"\n+                                                    )}>\n+                                                      {lesson.activities?.length || 0} Activities\n+                                                    </Badge>\n+                                                  </div>\n+                                                </div>\n+                                              </CardHeader>\n+                                            </Card>\n+                                          ))}\n+                                      </div>\n+                                    </div>\n+                                  ))}\n+                              </div>\n+                            </CardContent>\n+                          </Card>\n+                        ))}\n+                      </div>\n+                    ) : (\n+                      <div className=\"text-center py-20\">\n+                        <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n+                        <h3 className=\"text-lg font-medium\">Select a Grade</h3>\n+                        <p className=\"text-sm text-muted-foreground\">\n+                          Choose a grade from the left panel to start managing content\n+                        </p>\n+                      </div>\n+                    )}\n+                  </div>\n+                ) : (\n+                  // Edit Mode Content\n+                  <div className=\"space-y-4\">\n+                    {/* Lesson Title */}\n+                    <Card>\n+                      <CardHeader>\n+                        <div className=\"flex items-center justify-between mb-4\">\n+                          <h2 className=\"text-2xl font-bold\">Lesson Content</h2>\n+                                                    <Button\n+                                                      variant=\"outline\"\n+                                                      size=\"sm\"\n+                            onClick={() => setIsContentEditorOpen(true)}\n+                          >\n+                            <Pencil className=\"h-4 w-4 mr-2\" />\n+                            Edit Content\n+                          </Button>\n+                        </div>\n+                      </CardHeader>\n+                      <CardContent className=\"space-y-4\">\n+                        {/* Lesson Title */}\n+                        <div className=\"flex items-center justify-between\">\n+                          <div className=\"space-y-1\">\n+                            <Label>Lesson Title</Label>\n+                            <InlineEdit\n+                              value={lessonTitle}\n+                              onSave={async (newTitle) => {\n+                                setLessonTitle(newTitle);\n+                                await handleSaveLesson();\n+                              }}\n+                              isEditing={isEditingTitle}\n+                              setIsEditing={setIsEditingTitle}\n+                              placeholder=\"Enter lesson title\"\n+                              className=\"text-lg font-medium\"\n+                            />\n+                          </div>\n+                        </div>\n+\n+                        {/* Content Editor and Display */}\n+                        <div className=\"space-y-4\">\n+                          {isContentEditorOpen ? (\n+                            <div className=\"border rounded-lg p-4\">\n+                              <div className=\"mb-4\">\n+                                <Label>Content Heading</Label>\n+                                <InlineEdit\n+                                  value={contentHeading}\n+                                  onSave={(newHeading) => setContentHeading(newHeading)}\n+                                  isEditing={isEditingHeading}\n+                                  setIsEditing={setIsEditingHeading}\n+                                  placeholder=\"Add content heading\"\n+                                  className=\"text-base text-muted-foreground\"\n+                                />\n+                              </div>\n+                              <RichTextEditor\n+                                value={lessonContent}\n+                                onChange={setLessonContent}\n+                                onSave={async (content) => {\n+                                  await handleContentSave(content);\n+                                  setIsContentEditorOpen(false);\n+                                }}\n+                                placeholder=\"Add lesson content here...\"\n+                              />\n+                            </div>\n+                          ) : lessonContent ? (\n+                            <div className=\"prose prose-sm max-w-none\">\n+                              {contentHeading && (\n+                                <h3 className=\"text-lg font-semibold mb-2\">{contentHeading}</h3>\n+                              )}\n+                              <div dangerouslySetInnerHTML={{ __html: lessonContent }} />\n+                            </div>\n+                          ) : (\n+                            <div className=\"text-center py-8 text-muted-foreground\">\n+                              Click 'Edit Content' to add lesson content\n+                            </div>\n+                          )}\n+                        </div>\n+                      </CardContent>\n+                    </Card>\n+\n+                    {/* Tabs */}\n+                    <Tabs defaultValue=\"questions\" className=\"mt-6\">\n+                    <TabsList className=\"grid w-full grid-cols-2\">\n+                        <TabsTrigger value=\"questions\">\n+                          <MessageSquare className=\"h-4 w-4 mr-2\" />\n+                        Questions\n+                      </TabsTrigger>\n+                        <TabsTrigger value=\"activities\">\n+                          <ActivityIcon className=\"h-4 w-4 mr-2\" />\n+                        Activities\n+                      </TabsTrigger>\n+                    </TabsList>\n+\n+                      {/* Questions Tab */}\n+                      <TabsContent value=\"questions\" className=\"space-y-4\">\n+                      <CardHeader>\n+                          <CardDescription>Add and manage questions for this lesson</CardDescription>\n+                      </CardHeader>\n+                        {questions.map((question, index) => (\n+                          <Card key={index} className={cn(\n+                            \"relative border-l-4 transition-colors duration-200\",\n+                            expandedQuestion === index ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\n+                          )}>\n+                            <CardHeader className=\"pb-3\">\n+                              <div className=\"flex items-center justify-between gap-4\">\n+                                <div className=\"flex items-center gap-3 min-w-0 flex-1\">\n+                                  <div className=\"flex items-center gap-2 flex-shrink-0\">\n+                                    <span className=\"px-2 py-1 bg-primary/10 rounded-md text-sm font-semibold text-primary whitespace-nowrap\">\n+                                      Q {index + 1}\n+                                    </span>\n+                                    <Badge variant=\"outline\" className=\"whitespace-nowrap\">\n+                                      {QUESTION_TYPES[question.type as keyof typeof QUESTION_TYPES]?.label || question.type}\n+                                    </Badge>\n+                                    {question.isDraft && (\n+                                      <Badge variant=\"secondary\" className=\"whitespace-nowrap\">Draft</Badge>\n+                                )}\n+                                  </div>\n+                                      {expandedQuestion !== index && (\n+                                        <div className=\"text-sm text-muted-foreground truncate\">\n+                                          {question.title || 'No question text'} - {question.data?.content || 'No question texts'}\n+                                        </div>\n+                                      )}\n+                                    </div>\n+                                    <div className=\"flex items-center gap-2 flex-shrink-0\">\n+                                      <Button\n+                                        variant=\"ghost\"\n+                                        size=\"sm\"\n+                                        onClick={() => handleQuestionExpand(index)}\n+                                      >\n+                                        {expandedQuestion === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n+                                      </Button>\n+                                      <Button\n+                                        variant=\"ghost\"\n+                                        size=\"sm\"\n+                                        onClick={() => handleRemoveQuestion(index)}\n+                                      >\n+                                        <Trash2 className=\"h-4 w-4 text-destructive\" />\n+                                      </Button>\n+                                    </div>\n+                                  </div>\n+                                </CardHeader>\n+                                {expandedQuestion === index && (\n+                                  <CardContent>\n+                                    <QuestionForm\n+                                      key={index}\n+                                      question={{ \n+                                        ...question, \n+                                        lesson_id: currentLessonId || '',\n+                                        type: isValidQuestionType(question.type) ? question.type : 'speaking',\n+                                        data: {\n+                                          prompt: question.data?.prompt ?? '',\n+                                          teacher_script: question.data?.teacher_script ?? '',\n+                                          followup_prompt: question.data?.followup_prompt ?? [],\n+                                          sample_answer: question.data?.sample_answer ?? '',\n+                                          \n+                                        } \n+                                      }}\n+                                      index={index}\n+                                      onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\n+                                        await handleUpdateQuestion(index, {\n+                                          ...updatedQuestion,\n+                                          data: {\n+                                            prompt: updatedQuestion.data?.prompt ?? '',\n+                                            teacher_script: updatedQuestion.data?.teacher_script ?? '',\n+                                            followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\n+                                            sample_answer: updatedQuestion.data?.sample_answer ?? '',\n+                                            metadata: updatedQuestion.metadata ?? {},\n+                                            },\n+                                            correct_answer: updatedQuestion.correct_answer ?? '',\n+                                            content: updatedQuestion.content ?? ''  // Add default value\n+                                        });\n+                                      }}\n+                                      onRemove={handleRemoveQuestion}\n+                                      onAddExercisePrompt={handleAddExercisePrompt}\n+                                      onRemoveExercisePrompt={handleRemoveExercisePrompt}\n+                                      onExercisePromptChange={handleExercisePromptChange}\n+                                    /><Button \n+                                    size=\"sm\"\n+                                    variant=\"outline\"\n+                                    onClick={() => handleSaveQuestion(question, index)}\n+                                    className=\"ml-2\"\n+                                  >\n+                                    {questionSaveStatuses.find(s => s.id === question.id)?.status === 'saving' ? (\n+                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n+                                    ) : (\n+                                      <Save className=\"h-4 w-4 mr-2\" />\n+                                    )}\n+                                    Save Question\n+                                                    </Button>\n+                                    {/* Exercise Prompts with Save Buttons */}\n+                                    {question.exercisePrompts?.map((prompt, promptIndex) => (\n+                                      <div key={`${question.id}-prompt-${promptIndex}`} className=\"mt-4\"> {/* Updated key */}\n+                                        <div className=\"flex items-center justify-between mb-2\">\n+                                          <h4 className=\"text-sm font-medium\">Exercise Prompt {promptIndex + 1}</h4>\n+                                          <div className=\"flex items-center gap-2\">\n+                                            <TooltipProvider>\n+                                              <Tooltip>\n+                                                <TooltipTrigger asChild>\n+                                                  <Button\n+                                                    size=\"sm\"\n+                                                    variant=\"outline\"\n+                                                    onClick={() => handleSavePrompt(question.id, prompt, promptIndex)}\n+                                                    disabled={promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving'}\n+                                                  >\n+                                                    {promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving' ? (\n+                                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n+                                                    ) : (\n+                                                      <Save className=\"h-4 w-4 mr-2\" />\n+                                                    )}\n+                                                    Save Prompt\n+                                                  </Button>\n+                                                </TooltipTrigger>\n+                                                <TooltipContent>\n+                                                  {`Status: ${promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}`}\n+                                                </TooltipContent>\n+                                              </Tooltip>\n+                                            </TooltipProvider>\n+                                            <Badge variant={\n+                                              promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saved'\n+                                                ? 'secondary'\n+                                                : promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'error'\n+                                                ? 'destructive'\n+                                                : 'default'\n+                                            }>\n+                                              {promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}\n+                                            </Badge>\n+                                                  </div>\n+                                        </div>\n+                                        <ExercisePromptCard\n+                                          key={prompt.id} // Add a unique key here\n+                                          prompt={prompt}\n+                                          promptIndex={promptIndex}\n+                                          onRemove={() => handleRemoveExercisePrompt(index, promptIndex)}\n+                                          onUpdate={(updatedPrompt: ExercisePrompt) => {\n+                                            // Prevent duplicate updates\n+                                            if (updatedPrompt.id === prompt.id) {\n+                                              handleExercisePromptChange(index, promptIndex, updatedPrompt);\n+                                            }\n+                                          }}\n+                                        />\n+                                      </div>\n+                                    ))}\n+                                  </CardContent>\n+                                )}\n+                              </Card>\n+                            ))}\n+\n+                            {/* Add Question Button */}\n+                            <div className=\"flex items-center justify-between\">\n+                              <QuestionTypeSelect \n+                                value={selectedQuestionType} \n+                                onChange={handleQuestionTypeChange}\n+                              />\n+                                        <Button\n+                                          onClick={handleAddQuestion}\n+                                          disabled={!selectedQuestionType}\n+                                        >\n+                                <Plus className=\"h-4 w-4 mr-2\" />\n+                                          Add Question\n+                                        </Button>\n+                                      </div>\n+                      </TabsContent>\n+\n+                      {/* Activities Tab */}\n+                      <TabsContent value=\"activities\" className=\"space-y-4\">\n+                      <CardHeader>\n+                          <CardDescription>Add and manage activities for this lesson</CardDescription>\n+                      </CardHeader>\n+                        {activities.map((activity, index) => (\n+                          <Card key={index}>\n+                            <CardHeader className=\"pb-3\">\n+                              <div className=\"flex items-center justify-between\">\n+                                  <div className=\"flex items-center gap-2\">\n+                                  <Badge variant=\"outline\">Activity {index + 1}</Badge>\n+                                  </div>\n+                                <div className=\"flex items-center gap-2\">\n+                                  <Button\n+                                    variant=\"ghost\"\n+                                    size=\"sm\"\n+                                    onClick={() => handleActivityExpand(index)}\n+                                  >\n+                                    {expandedActivity === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n+                                  </Button>\n+                                  <Button\n+                                    variant=\"ghost\"\n+                                    size=\"sm\"\n+                                    onClick={() => handleRemoveActivity(index)}\n+                                  >\n+                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\n+                                  </Button>\n+                                </div>\n+                              </div>\n+                            </CardHeader>\n+                            {expandedActivity === index && (\n+                              <CardContent>\n+                                <div className=\"space-y-4\">\n+                                  <div className=\"space-y-2\">\n+                                    <Label>Instructions</Label>\n+                                    <Textarea\n+                                      value={activity.instructions}\n+                                      onChange={(e) => handleUpdateActivity(index, {\n+                                        ...activity,\n+                                        instructions: e.target.value\n+                                      })}\n+                                      placeholder=\"Enter activity instructions\"\n+                                    />\n+                                  </div>\n+                                    \n+                                    {/* Media Section */}\n+                                    <div className=\"space-y-2\">\n+                                      <Label>Media</Label>\n+                                      {activity.media?.map((media, mediaIndex) => (\n+                                        <div key={mediaIndex} className=\"flex items-center gap-2\">\n+                                          <Input\n+                                            value={media.url}\n+                                            onChange={(e) => {\n+                                              const updatedMedia = [...(activity.media || [])];\n+                                              updatedMedia[mediaIndex] = {\n+                                                type: media.type,\n+                                                url: e.target.value\n+                                              };\n+                                              handleUpdateActivity(index, {\n+                                                ...activity,\n+                                                media: updatedMedia\n+                                              });\n+                                            }}\n+                                            placeholder=\"Media URL\"\n+                                          />\n+                                          <Select\n+                                            value={media.type}\n+                                            onValueChange={(value) => {\n+                                              const updatedMedia = [...(activity.media || [])];\n+                                              updatedMedia[mediaIndex] = {\n+                                                type: value as 'image' | 'gif' | 'video',\n+                                                url: media.url\n+                                              };\n+                                              handleUpdateActivity(index, {\n+                                                ...activity,\n+                                                media: updatedMedia\n+                                              });\n+                                            }}\n+                                          >\n+                                            <SelectTrigger className=\"w-[120px]\">\n+                                              <SelectValue placeholder=\"Type\" />\n+                                            </SelectTrigger>\n+                                            <SelectContent>\n+                                              <SelectItem value=\"image\">Image</SelectItem>\n+                                              <SelectItem value=\"gif\">GIF</SelectItem>\n+                                              <SelectItem value=\"video\">Video</SelectItem>\n+                                            </SelectContent>\n+                                          </Select>\n+                                <Button\n+                                            variant=\"ghost\"\n+                                            size=\"sm\"\n+                                  onClick={() => {\n+                                              const updatedMedia = (activity.media || []).filter((_, i) => i !== mediaIndex);\n+                                              handleUpdateActivity(index, {\n+                                                ...activity,\n+                                                media: updatedMedia\n+                                          });\n+                                          }}\n+                                  >\n+                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\n+                                  </Button>\n+                                </div>\n+                                        ))}\n+                                  <Button\n+                                    variant=\"outline\"\n+                                    size=\"sm\"\n+                                            onClick={() => {\n+                                              handleUpdateActivity(index, {\n+                                                ...activity,\n+                                                media: [\n+                                                  ...(activity.media || [])  ,\n+                                                  { url: '', type: 'image' }\n+                                                ]\n+                                              });\n+                                            }}\n+                                  >\n+                                    <Plus className=\"h-4 w-4 mr-2\" />\n+                                            Add Media\n+                                  </Button>\n+                                </div>\n+                                      </div>\n+                                    </CardContent>\n+                                  )}\n+                                </Card>\n+                              ))}\n+\n+                              {/* Add Activity Button */}\n+                              <Button\n+                                onClick={handleAddActivity}\n+                                className=\"w-full\"\n+                              >\n+                                <Plus className=\"h-4 w-4 mr-2\" />\n+                                Add Activity\n+                              </Button>\n+                          </TabsContent>\n+                        </Tabs>\n+                        </div>\n+                )}\n+\n+                    {/* Floating Save Button */}\n+                    <div className=\"fixed bottom-8 right-8 flex items-center gap-4\">\n+                      {saveProgress !== 'idle' && (\n+                        <div className={cn(\n+                          \"flex items-center gap-2 rounded-lg px-4 py-2 shadow-lg\",\n+                          {\n+                            \"bg-background border\": saveProgress === 'saving',\n+                            \"bg-green-500 text-white\": saveProgress === 'saved',\n+                            \"bg-destructive text-destructive-foreground\": saveProgress === 'error'\n+                          }\n+                        )}>\n+                          {saveProgress === 'saving' && (\n+                            <>\n+                              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n+                              <span className=\"text-sm\">Saving changes...</span>\n+                            </>\n+                          )}\n+                          {saveProgress === 'saved' && (\n+                            <>\n+                              <Check className=\"h-4 w-4\" />\n+                              <span className=\"text-sm\">Changes saved</span>\n+                            </>\n+                          )}\n+                          {saveProgress === 'error' && (\n+                            <>\n+                              <X className=\"h-4 w-4\" />\n+                              <span className=\"text-sm\">Error saving changes</span>\n+                            </>\n+                          )}\n+                        </div>\n+                      )}\n+                      <Button\n+                        onClick={handleSaveLesson}\n+                        disabled={saveProgress === 'saving'}\n+                        className=\"shadow-lg\"\n+                      >\n+                        {saveProgress === 'saving' ? (\n+                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n+                        ) : (\n+                          <Save className=\"h-4 w-4 mr-2\" />\n+                        )}\n+                        {saveProgress === 'saving' ? 'Saving...' : 'Save Lesson'}\n+                      </Button>\n+                    </div>\n+                  </>\n+            )}\n+    </div>\n+    \n+\n+      {/* Floating Save Button */}\n+      {selectedSubtopicId && currentLessonId && (\n+          <div className=\"fixed bottom-4 right-4 flex flex-col gap-2\">\n+            <TooltipProvider>\n+              <Tooltip>\n+                <TooltipTrigger asChild>\n+                  <Button\n+                    size=\"icon\"\n+                    className=\"rounded-full h-12 w-12 shadow-lg\"\n+                    onClick={handleSaveLesson}\n+                    disabled={!selectedSubtopicId || !lessonTitle || questions.length === 0}\n+                  >\n+                    <Save className=\"h-6 w-6\" />\n+                  </Button>\n+                </TooltipTrigger>\n+                <TooltipContent>\n+                  <p>Save Lesson (Ctrl+S)</p>\n+                </TooltipContent>\n+              </Tooltip>\n+            </TooltipProvider>\n+          </div>\n+        )}\n+        <SaveFeedback />\n+\n+        {/* Add Grade Modal - do not delete */}\n+        {/* {modalState.showAddGrade && (\n+          <Dialog \n+            open={modalState.showAddGrade} \n+            onOpenChange={(open) => handleModalStateChange('showAddGrade', open)}\n+          >\n+            <DialogContent \n+              className=\"sm:max-w-[425px]\"\n+              onEscapeKeyDown={cleanupModalState}\n+              onPointerDownOutside={cleanupModalState}\n+            >\n+              <DialogHeader>\n+                <DialogTitle>Add New Grade</DialogTitle>\n+                <DialogDescription>Enter the details for the new grade.</DialogDescription>\n+              </DialogHeader>\n+              <div className=\"space-y-4 py-4\">\n+                <div className=\"space-y-2\">\n+                  <Label htmlFor=\"grade-name\">Grade Name</Label>\n+                  <Input\n+                    id=\"grade-name\"\n+                    value={newItemData.name}\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n+                    placeholder=\"Enter grade name\"\n+                  />\n+      </div>\n+              </div>\n+              <DialogFooter>\n+                <Button variant=\"outline\" onClick={() => {\n+                  setModalState({ ...modalState, showAddGrade: false });\n+                  setNewItemData({ name: '', description: '' });\n+                }}>\n+                  Cancel\n+                </Button>\n+                <Button onClick={handleCreateGrade} disabled={!newItemData.name}>Create Grade</Button>\n+              </DialogFooter>\n+            </DialogContent>\n+          </Dialog>\n+        )} */}\n+\n+        {/* Add Topic Modal */}\n+        {modalState.showAddTopic && (\n+          <Dialog \n+            open={modalState.showAddTopic} \n+            onOpenChange={(open) => handleModalStateChange('showAddTopic', open)}\n+          >\n+            <DialogContent \n+              className=\"sm:max-w-[425px]\"\n+              onEscapeKeyDown={cleanupModalState}\n+              onPointerDownOutside={cleanupModalState}\n+            >\n+              <DialogHeader>\n+                <DialogTitle>Add New Topic</DialogTitle>\n+                <DialogDescription>Enter the details for the new topic.</DialogDescription>\n+              </DialogHeader>\n+              <div className=\"space-y-4 py-4\">\n+                <div className=\"space-y-2\">\n+                  <Label htmlFor=\"topic-name\">Topic Name</Label>\n+                  <Input\n+                    id=\"topic-name\"\n+                    value={newItemData.name}\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n+                    placeholder=\"Enter topic name\"\n+                  />\n+                </div>\n+              </div>\n+              <DialogFooter>\n+                <Button variant=\"outline\" onClick={() => {\n+                  setModalState({ ...modalState, showAddTopic: false });\n+                  setNewItemData({ name: '', description: '' });\n+                }}>\n+                  Cancel\n+                </Button>\n+                <Button onClick={handleCreateTopic} disabled={!newItemData.name}>Create Topic</Button>\n+              </DialogFooter>\n+            </DialogContent>\n+          </Dialog>\n+        )}\n+\n+        {/* Add Subtopic Modal */}\n+        {modalState.showAddSubtopic && (\n+          <Dialog \n+            open={modalState.showAddSubtopic} \n+            onOpenChange={(open) => handleModalStateChange('showAddSubtopic', open)}\n+          >\n+            <DialogContent \n+              className=\"sm:max-w-[425px]\"\n+              onEscapeKeyDown={cleanupModalState}\n+              onPointerDownOutside={cleanupModalState}\n+            >\n+              <DialogHeader>\n+                <DialogTitle>Add New Subtopic</DialogTitle>\n+                <DialogDescription>Enter the details for the new subtopic.</DialogDescription>\n+              </DialogHeader>\n+              <div className=\"space-y-4 py-4\">\n+                <div className=\"space-y-2\">\n+                  <Label htmlFor=\"subtopic-name\">Subtopic Name</Label>\n+                  <Input\n+                    id=\"subtopic-name\"\n+                    value={newItemData.name}\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n+                    placeholder=\"Enter subtopic name\"\n+                  />\n+                </div>\n+              </div>\n+              <DialogFooter>\n+                <Button variant=\"outline\" onClick={() => {\n+                  setModalState({ ...modalState, showAddSubtopic: false });\n+                  setNewItemData({ name: '', description: '' });\n+                }}>\n+                  Cancel\n+                </Button>\n+                <Button onClick={() => handleCreateSubtopic({ title: newItemData.name })} disabled={!newItemData.name}>Create Subtopic</Button>\n+              </DialogFooter>\n+            </DialogContent>\n+          </Dialog>\n+        )}\n+\n+        {/* Add Lesson Modal */}\n+        {modalState.showAddLesson && (\n+          <Dialog \n+            open={modalState.showAddLesson} \n+            onOpenChange={(open) => handleModalStateChange('showAddLesson', open)}\n+          >\n+            <DialogContent \n+              className=\"sm:max-w-[425px]\"\n+              onEscapeKeyDown={cleanupModalState}\n+              onPointerDownOutside={cleanupModalState}\n+            >\n+              <DialogHeader>\n+                <DialogTitle>Add New Lesson</DialogTitle>\n+                <DialogDescription>Enter the details for the new lesson.</DialogDescription>\n+              </DialogHeader>\n+              <div className=\"space-y-4 py-4\">\n+                <div className=\"space-y-2\">\n+                  <Label htmlFor=\"lesson-name\">Lesson Title</Label>\n+                  <Input\n+                    id=\"lesson-name\"\n+                    value={newItemData.name}\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n+                    placeholder=\"Enter lesson title\"\n+                  />\n+                </div>\n+              </div>\n+              <DialogFooter>\n+                <Button variant=\"outline\" onClick={() => {\n+                  setModalState({ ...modalState, showAddLesson: false });\n+                  setNewItemData({ name: '', description: '' });\n+                }}>\n+                  Cancel\n+                </Button>\n+                <Button onClick={handleCreateLesson} disabled={!newItemData.name}>Create Lesson</Button>\n+              </DialogFooter>\n+            </DialogContent>\n+          </Dialog>\n+        )}\n+      </div>\n+      <Toaster />\n+      </div>\n+  );\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1740044469851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2034,8 +2034,12 @@\n                         size=\"sm\"\n                         onClick={async () => {\n                           const { canDelete, message } = await checkDeletability('topic', topic.id);\n                           if (!canDelete) {\n+                            toast.error(message);\n+                            return;\n+                          }\n+                          setItemToDelete({\n   // Update the sidebar JSX\n   <div \n     className={cn(\n       \"transition-all duration-300 ease-in-out relative\",\n"
                },
                {
                    "date": 1740056049783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,3386 @@\n+\"use client\";\n+\n+import { useState, useCallback, useEffect, useRef } from 'react';\n+import { toast } from 'sonner';\n+import { Toaster } from 'sonner';\n+import Link from 'next/link';\n+import {  Activity as ActivityIcon,  ArrowLeft,  BookOpen,  ChevronDown,  ChevronRight,  Check,  Edit,  Eye,  EyeOff,  HelpCircle,  Layers,  List,  MessageSquare,  Plus,  Save,  Trash as Trash2, X, Pencil, Lock, Unlock, RefreshCw, Clock, Bell, Moon, GraduationCap, MoreHorizontal, Loader2 } from 'lucide-react';\n+import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\n+import { Badge } from '@/components/ui/badge';\n+import { Button } from '@/components/ui/button';\n+import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\n+import { Input } from '@/components/ui/input';\n+import { Label } from '@/components/ui/label';\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\n+import { Textarea } from '@/components/ui/textarea';\n+import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\n+import { cn } from '@/lib/utils';\n+import { API_BASE_URL, QUESTION_TYPES, isQuestionType } from './constants';\n+import { ExercisePrompt, Lesson } from './types';\n+import { QuestionFormProps, ExercisePromptCardProps, Activity, Grade, Topic, Subtopic as SubTopic } from './types';\n+import { QuestionForm } from './components/question-form';\n+import { ExercisePromptCard } from './components/exercise-prompt-card';\n+import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\n+import { supabase } from '@/lib/supabase';\n+import { useContentStore } from '@/lib/content/store';\n+import { contentService } from '@/lib/content/ContentService';\n+import { MediaPreview } from '@/components/ui/media-preview';\n+import { QuestionTypeSelect } from './components/question-type-select';\n+import { RichTextEditor } from '@/components/ui/rich-text-editor';\n+import {\n+  AlertDialog,\n+  AlertDialogAction,\n+  AlertDialogCancel,\n+  AlertDialogContent,\n+  AlertDialogDescription,\n+  AlertDialogFooter,\n+  AlertDialogHeader,\n+  AlertDialogTitle,\n+  AlertDialogTrigger,\n+} from \"@/components/ui/alert-dialog\";\n+import { debounce, isNull } from 'lodash';\n+import { PostgrestError } from '@supabase/supabase-js';\n+import { Question as ContentQuestion } from './types';  // Import the specific type\n+import { Trash } from \"lucide-react\";\n+import { AnimatePresence, motion } from 'framer-motion';\n+import { useQueryClient } from 'react-query';\n+\n+\n+// Update the API endpoint to match your backend route\n+const API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\n+\n+interface QuestionTypeSelectProps {\n+  value: string;\n+  onValueChange: (value: string) => void;\n+}\n+\n+// Add metadata type\n+interface LessonMetadata {\n+  lastEdited?: string;\n+  version?: number;\n+  tags?: string[];\n+  status?: 'draft' | 'published';\n+  authorId?: string;\n+  duration?: number;\n+  transcript?: string;\n+}\n+\n+type ContentType = 'html' | 'markdown' | 'rich-text' | 'text' | 'json';\n+\n+interface LessonContent {\n+  id: string;\n+  lesson_id: string;\n+  content: any[];\n+  metadata: {\n+    lastEdited?: string;\n+    version?: number;\n+    status?: 'draft' | 'published';\n+    authorId?: string;\n+  };\n+  content_type: string;\n+  order_index: number;\n+  updated_at: string;\n+  user_id: string;\n+}\n+\n+interface InlineEditProps {\n+  value: string;\n+  onSave: (value: string) => void;\n+  isEditing: boolean;\n+  setIsEditing: (value: boolean) => void;\n+  placeholder?: string;\n+  className?: string;\n+}\n+\n+// Add validation interface\n+interface QuestionValidation {\n+  isValid: boolean;\n+  message: string;\n+}\n+\n+// Add this type validation helper\n+const getQuestionTypeFields = (type: string) => {\n+  switch (type) {\n+    case 'multipleChoice':\n+      return {\n+        required: ['prompt', 'options', 'correctAnswer'],\n+        fields: {\n+          prompt: '',\n+          options: [],\n+          correct_answer: '',\n+          teacher_script: '',\n+          explanation: ''\n+        }\n+      };\n+    case 'fillInBlank':\n+      return {\n+        required: ['prompt', 'blanks'],\n+        fields: {\n+          prompt: '',\n+          blanks: [],\n+          teacher_script: '',\n+          explanation: ''\n+        }\n+      };\n+    case 'trueFalse':\n+      return {\n+        required: ['prompt', 'correctAnswer'],\n+        fields: {\n+          prompt: '',\n+          correct_answer: null,\n+          teacher_script: '',\n+          explanation: ''\n+        }\n+      };\n+    case 'matching':\n+      return {\n+        required: ['prompt', 'pairs'],\n+        fields: {\n+          prompt: '',\n+          pairs: [],\n+          teacher_script: '',\n+          explanation: ''\n+        }\n+      };\n+    case 'ordering':\n+      return {\n+        required: ['prompt', 'items'],\n+        fields: {\n+          prompt: '',\n+          items: [],\n+          correctOrder: [],\n+          teacher_script: '',\n+          explanation: ''\n+        }\n+      };\n+    case 'shortAnswer':\n+      return {\n+        required: ['prompt', 'sampleAnswer'],\n+        fields: {\n+          prompt: '',\n+          sampleAnswer: '',\n+          teacher_script: '',\n+          explanation: '',\n+          keywords: []\n+        }\n+      };\n+    case 'speaking':\n+      return {\n+        required: ['prompt', 'sampleAnswer'],\n+        fields: {\n+          prompt: '',\n+          sampleAnswer: '',\n+          teacher_script: '',\n+          audioPrompt: '',\n+          pronunciation: ''\n+        }\n+      };\n+    case 'listening':\n+      return {\n+        required: ['prompt', 'audioContent'],\n+        fields: {\n+          prompt: '',\n+          audioContent: '',\n+          transcript: '',\n+          teacher_script: '',\n+          comprehensionQuestions: []\n+        }\n+      };\n+    case 'listenAndRepeat':\n+      return {\n+        required: ['prompt', 'audioContent'],\n+        fields: {\n+          prompt: '',\n+          audioContent: '',\n+          targetPhrase: '',\n+          teacher_script: '',\n+          pronunciation: ''\n+        }\n+      };\n+    default:\n+      return {\n+        required: ['prompt'],\n+        fields: {\n+          prompt: '',\n+          teacher_script: ''\n+        }\n+      };\n+  }\n+}\n+\n+interface SaveStatus {\n+  id: string;\n+  status: 'draft' | 'saved' | 'saving' | 'error';\n+  lastSaved?: string;\n+}\n+\n+interface Question {\n+  id: string;\n+  type: string;\n+  lesson_id: string;\n+  title: string;\n+  content: string;\n+  metadata: Record<string, any>;\n+  data: Record<string, any>; // This allows dynamic field access\n+  correct_answer: string;\n+  exercisePrompts: ExercisePrompt[];\n+  isDraft?: boolean;\n+}\n+\n+// Add at the top of the file with other type definitions\n+type QuestionType = keyof typeof QUESTION_TYPES;\n+\n+// Add this type guard function\n+const isValidQuestionType = (type: string): type is QuestionType => {\n+  return type in QUESTION_TYPES;\n+};\n+\n+// Update handleAddQuestion\n+\n+\n+// Update validateQuestion\n+const validateQuestion = (question: Question): QuestionValidation => {\n+  const { required } = getQuestionTypeFields(question.type);\n+  const missingFields = required.filter(field => {\n+    const value = question.data?.[field];\n+    return !value || \n+      (Array.isArray(value) && value.length === 0) || \n+      (typeof value === 'string' && !value.trim());\n+  });\n+\n+  if (missingFields.length > 0) {\n+    return {\n+      isValid: false,\n+      message: `Missing required fields: ${missingFields.join(', ')}`\n+    };\n+  }\n+\n+  return { isValid: true, message: '' };\n+};\n+\n+// Add proper type for question data\n+interface QuestionData {\n+  id?: string;\n+  content?: string;\n+  type?: string;\n+  data?: {\n+    prompt?: string;\n+    teacher_script?: string;\n+    followup_prompt?: string[];\n+    sample_answer?: string;\n+    answer?: string;\n+  } | null;\n+  prompt: string;\n+  teacher_script: string;\n+  followup_prompt: string[];\n+  answer?: string;\n+  correct_answer?: string;\n+}\n+\n+// In your component where you handle questions\n+const handleQuestionData = (question: QuestionData) => {\n+  return {\n+    ...question,\n+    data: {\n+      prompt: question?.data?.prompt || '',\n+      teacher_script: question?.data?.teacher_script || '',\n+      followup_prompt: question?.data?.followup_prompt || [],\n+      sample_answer: question?.data?.sample_answer || undefined,  // Convert null to undefined\n+      answer: question?.data?.answer || undefined  // Convert null to undefined\n+    } as const,\n+    sampleAnswer: question?.correct_answer || ''\n+  };\n+};\n+\n+export default function LessonManagementPage() {\n+  // State declarations\n+  \n+  const [selectedGradeId, setSelectedGradeId] = useState<string | null>(null);\n+  const [selectedTopicId, setSelectedTopicId] = useState<string | null>(null);\n+  const [selectedSubtopicId, setSelectedSubtopicId] = useState<string | null>(null);\n+  const [lessonTitle, setLessonTitle] = useState<string>('');\n+  const [currentLessonId, setCurrentLessonId] = useState<string | null>(null);\n+  const [questions, setQuestions] = useState<Question[]>([]);\n+  const [saveProgress, setSaveProgress] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');\n+  const [activities, setActivities] = useState<Activity[]>([]);\n+  const [localBuffer, setLocalBuffer] = useState<{ timestamp: number; data: any } | null>(null);\n+  const [lastSavedToServer, setLastSavedToServer] = useState<number>(Date.now());\n+  const [selectedQuestionType, setSelectedQuestionType] = useState<string>('');\n+  const [editingQuestionIndex, setEditingQuestionIndex] = useState<number | null>(null);\n+  const [showHelpTips, setShowHelpTips] = useState(true);\n+  const [isNavigating, setIsNavigating] = useState(false);\n+  const [lessons, setLessons] = useState<Lesson[]>([]);\n+  const [grades, setGrades] = useState<Grade[]>([]);\n+  const [topics, setTopics] = useState<Topic[]>([]);\n+  const [subtopics, setSubtopics] = useState<SubTopic[]>([]);\n+  const [contentHeading, setContentHeading] = useState<string>('');\n+    // Add with your other state declarations\n+  const [isContentExpanded, setIsContentExpanded] = useState<boolean>(false);\n+  const [modalState, setModalState] = useState({\n+    showAddGrade: false,\n+    showAddTopic: false,\n+    showAddSubtopic: false,\n+    showAddLesson: false\n+  });\n+  const [isViewMode, setIsViewMode] = useState<boolean>(true);\n+  const [expandedGrade, setExpandedGrade] = useState<string | null>(null);\n+  const [expandedTopic, setExpandedTopic] = useState<string | null>(null);\n+  const [expandedSubtopic, setExpandedSubtopic] = useState<string | null>(null);\n+  const [expandedQuestion, setExpandedQuestion] = useState<number | null>(null);\n+  const [expandedActivity, setExpandedActivity] = useState<number | null>(null);\n+  const [newItemData, setNewItemData] = useState({\n+    name: '',\n+    description: ''\n+  });\n+  const [lessonContent, setLessonContent] = useState<string>('');\n+  const [isContentEditorOpen, setIsContentEditorOpen] = useState(false);\n+  const [isEditingTitle, setIsEditingTitle] = useState<boolean>(false);\n+  const [isEditingHeading, setIsEditingHeading] = useState<boolean>(false);\n+  const [isEditingDescription, setIsEditingDescription] = useState<boolean>(false);\n+  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\n+  const [isSidebarLocked, setIsSidebarLocked] = useState(true);\n+  const [alertDialogState, setAlertDialogState] = useState<{\n+    isOpen: boolean;\n+    title: string;\n+    message: string;\n+    onConfirm: (value?: unknown) => void;\n+  }>({\n+    isOpen: false,\n+    title: '',\n+    message: '',\n+    onConfirm: () => {}\n+  });\n+\n+  const { \n+    selectedGrade,\n+    setSelectedGrade,\n+    selectedTopic,\n+    setSelectedTopic,\n+    selectedSubtopic,\n+    setSelectedSubtopic,\n+    selectedLesson,\n+    setSelectedLesson\n+  } = useContentStore();\n+\n+  // Add new state for tracking save status\n+  interface SaveStatus {\n+    id: string;\n+    status: 'draft' | 'saved' | 'saving' | 'error' | 'draft';\n+    lastSaved?: string;\n+  }\n+\n+  const [questionSaveStatuses, setQuestionSaveStatuses] = useState<Array<{\n+    id: string;\n+    status: 'idle' | 'saving' | 'saved' | 'error' | 'draft';\n+  }>>([]);\n+  const [promptSaveStatuses, setPromptSaveStatuses] = useState<SaveStatus[]>([]);\n+\n+  // Add this state to track dropdown state\n+  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n+\n+  // Add these states\n+  const [isLoadingSubtopics, setIsLoadingSubtopics] = useState(false);\n+  const [isLoadingLessons, setIsLoadingLessons] = useState(false);\n+\n+  // Add these state variables\n+  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n+  const [itemToDelete, setItemToDelete] = useState<{\n+    id: string;\n+    type: 'topic' | 'subtopic' | 'lesson';\n+    title: string;\n+  } | null>(null);\n+\n+  // Add these state variables\n+  const [deleteError, setDeleteError] = useState<string | null>(null);\n+\n+  // Add this validation function\n+  const canDeleteItem = async (type: 'topic' | 'subtopic' | 'lesson', id: string) => {\n+    switch (type) {\n+      case 'topic':\n+        const subtopicsInTopic = subtopics.filter(s => s.topic_id === id);\n+        return subtopicsInTopic.length === 0;\n+        \n+      case 'subtopic':\n+        const lessonsInSubtopic = lessons.filter(l => l.subtopic_id === id);\n+        return lessonsInSubtopic.length === 0;\n+        \n+      case 'lesson':\n+        const { data: questions } = await supabase\n+          .from('questions')\n+          .select('id')\n+          .eq('lesson_id', id);\n+        return !questions || questions.length === 0;\n+        \n+      default:\n+        return false;\n+    }\n+  };\n+\n+  // Event handlers\n+  const handleQuestionTypeChange = useCallback((type: string) => {\n+    if (isQuestionType(type)) {\n+      setSelectedQuestionType(type);\n+    }\n+  }, []);\n+\n+  const handleAddQuestion = useCallback(() => {\n+    if (!selectedQuestionType || !isQuestionType(selectedQuestionType)) return;\n+\n+    const defaultData = QUESTION_TYPES[selectedQuestionType].defaultData;\n+    const newQuestion: Question = {\n+      id: crypto.randomUUID(),\n+      type: selectedQuestionType,\n+      //data: {},\n+      title: 'New Question',\n+      content: '',\n+      lesson_id: currentLessonId || '',\n+      metadata: {},\n+      data: {\n+        ...defaultData,\n+        prompt: '',\n+        teacher_script: '',\n+        followup_prompt: [],\n+        sample_answer: ''\n+      },\n+      correct_answer: '',\n+      exercisePrompts: [],\n+      isDraft: true\n+    };\n+\n+    setQuestions(prev => [...prev, newQuestion]);\n+    setQuestionSaveStatuses(prev => [\n+      ...prev,\n+      { id: newQuestion.id, status: 'draft' }\n+    ]);\n+    setSelectedQuestionType('');\n+  }, [selectedQuestionType, currentLessonId]);\n+\n+  const checkDeletability = async (type: 'topic' | 'subtopic' | 'lesson', id: string) => {\n+    try {\n+      switch (type) {\n+        case 'lesson':\n+          const { data: questions } = await supabase\n+            .from('questions')\n+            .select('count')\n+            .eq('lesson_id', id);\n+          return { \n+            canDelete: questions?.[0]?.count === 0,\n+            message: questions?.[0]?.count ?? 0> 0 \n+              ? `Please delete ${questions?.[0]?.count} questions first` \n+              : null\n+          };\n+\n+        case 'subtopic':\n+          const { data: lessons } = await supabase\n+            .from('lessons')\n+            .select('id, questions(count)')\n+            .eq('subtopic_id', id);\n+          const hasQuestions = lessons?.some(l => l.questions?.[0]?.count > 0);\n+          return {\n+            canDelete: !hasQuestions && !lessons?.length,\n+            message: hasQuestions ? 'Delete questions from lessons first' : \n+                     lessons?.length ? 'Delete all lessons first' : null\n+          };\n+\n+        case 'topic':\n+          const { data: subtopics } = await supabase\n+            .from('subtopics')\n+            .select('id, lessons(questions(count))')\n+            .eq('topic_id', id);\n+          const hasContent = subtopics?.some(s => \n+            s.lessons?.some(l => l.questions?.[0]?.count > 0)\n+          );\n+          return {\n+            canDelete: !hasContent && !subtopics?.length,\n+            message: hasContent ? 'Delete all content first' : \n+                     subtopics?.length ? 'Delete all subtopics first' : null\n+          };\n+      }\n+    } catch (error) {\n+      console.error('Error checking deletability:', error);\n+      return { canDelete: false, message: 'Error checking item' };\n+    }\n+  };\n+\n+  const handleRemoveQuestion = async (index: number) => {\n+    try {\n+      const questionToDelete = questions[index];\n+      \n+      // Delete related exercise prompts first\n+      const { error: promptError } = await supabase\n+        .from('exercise_prompts')\n+        .delete()\n+        .eq('question_id', questionToDelete.id);\n+\n+      if (promptError) throw promptError;\n+\n+      // Then delete the question\n+      const { error: questionError } = await supabase\n+        .from('questions')\n+        .delete()\n+        .eq('id', questionToDelete.id);\n+\n+      if (questionError) throw questionError;\n+\n+      // Update local state\n+      const newQuestions = questions.filter((_, i) => i !== index);\n+      setQuestions(newQuestions);\n+      \n+      toast.success('Question and related prompts deleted successfully');\n+    } catch (error) {\n+      console.error('Error deleting question:', error);\n+      toast.error('Failed to delete question and prompts');\n+    }\n+  };\n+\n+  const handleUpdateQuestion = useCallback(async (index: number, updatedQuestion: Question) => {\n+    const newQuestions = [...questions];\n+    newQuestions[index] = updatedQuestion;\n+    setQuestions(newQuestions);\n+    setQuestionSaveStatuses(prev => prev.map((status, i) => \n+      i === index ? { ...status, status: 'draft' } : status\n+    ));\n+  }, [questions]);\n+\n+  const handleAddExercisePrompt = useCallback((questionIndex: number) => {\n+    setQuestions(prev => prev.map((question, i) => {\n+      if (i === questionIndex) {\n+        return {\n+          ...question,\n+          exercisePrompts: [\n+            ...question.exercisePrompts,\n+            {\n+              id: crypto.randomUUID(),\n+              text: '',\n+              media: '',\n+              type: 'image',\n+              narration: 'Your turn',\n+              saytext: 'Say: ',\n+              metadata: {\n+                estimatedTime: 0\n+              },\n+              created_at: new Date().toISOString(),\n+              updated_at: new Date().toISOString()\n+            }\n+          ]\n+        };\n+      }\n+      return question;\n+    }));\n+  }, []);\n+\n+  const handleRemoveExercisePrompt = useCallback((questionIndex: number, promptIndex: number) => {\n+    setQuestions(prev => prev.map((question, i) => {\n+      if (i === questionIndex) {\n+        return {\n+          ...question,\n+          exercisePrompts: question.exercisePrompts.filter((_, j) => j !== promptIndex)\n+        };\n+      }\n+      return question;\n+    }));\n+  }, []);\n+\n+  const handleExercisePromptChange = useCallback(async (\n+    questionIndex: number,\n+    promptIndex: number,\n+    updatedPrompt: ExercisePrompt\n+  ) => {\n+    try {\n+      const promptUpdate = {\n+        id: updatedPrompt.id,\n+        question_id: updatedPrompt.question_id,\n+        text: updatedPrompt.text,\n+        type: updatedPrompt.type,\n+        narration: updatedPrompt.narration,\n+        saytext: updatedPrompt.saytext,\n+        media: updatedPrompt.media,\n+        // Remove order_index as it's not in schema\n+        created_at: new Date().toISOString()\n+      };\n+\n+      const { error: promptError } = await supabase\n+        .from('exercise_prompts')\n+        .upsert(promptUpdate)\n+        .select();\n+\n+      if (promptError) throw promptError;\n+\n+      // Update local state\n+      setQuestions(prev => prev.map((question, i) => {\n+        if (i === questionIndex) {\n+          const newPrompts = [...question.exercisePrompts];\n+          newPrompts[promptIndex] = updatedPrompt;\n+          return { ...question, exercisePrompts: newPrompts };\n+        }\n+        return question;\n+      }));\n+\n+    } catch (error) {\n+      console.error('Error saving prompt:', error);\n+      toast.error('Failed to save prompt');\n+    }\n+  }, []);\n+\n+  const handleAddActivity = useCallback(() => {\n+    const newActivity: Activity = {\n+      id: crypto.randomUUID(),\n+      lesson_id: currentLessonId || '',\n+      created_at: new Date().toISOString(),\n+      type: 'practice',\n+      title: '',\n+      name: '',\n+      instructions: '',\n+      media: [],\n+      data: {\n+        prompt: '',\n+        teacher_script: '',\n+        media: []\n+      }\n+    };\n+    setActivities(prev => [...prev, newActivity]);\n+  }, [currentLessonId]);\n+\n+  const handleUpdateActivity = useCallback((index: number, updatedActivity: Activity) => {\n+    setActivities(prev => prev.map((activity, i) => i === index ? updatedActivity : activity));\n+  }, []);\n+\n+  const handleRemoveActivity = useCallback((index: number) => {\n+    setActivities(prev => prev.filter((_, i) => i !== index));\n+  }, []);\n+\n+  const handleExercisePromptUpdate = useCallback((questionIndex: number, promptIndex: number, updatedPrompt: ExercisePrompt) => {\n+    const updatedQuestions = [...questions];\n+    updatedQuestions[questionIndex].exercisePrompts[promptIndex] = updatedPrompt;\n+    handleUpdateQuestion(questionIndex, updatedQuestions[questionIndex]);\n+  }, [questions, handleUpdateQuestion]);\n+\n+  const handleQuestionDataChange = useCallback((questionIndex: number, field: string, value: string) => {\n+    setQuestions(prev => prev.map((q, i) => \n+      i === questionIndex \n+        ? { \n+            ...q, \n+            data: { \n+              prompt: q.data?.prompt || '',\n+              teacher_script: q.data?.teacher_script || '',\n+              ...q.data,\n+              [field]: value \n+            } \n+          }\n+        : q\n+    ));\n+  }, []);\n+\n+  const [isSaving, setIsSaving] = useState(false);\n+\n+  const handleSaveLesson = async () => {\n+    try {\n+      if (!currentLessonId || !selectedSubtopicId) {\n+        toast.error('Please select a subtopic and lesson first');\n+        return;\n+      }\n+\n+      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\n+      if (sessionError) throw sessionError;\n+      \n+      if (!session?.user) {\n+        toast.error('Please sign in to save lessons');\n+        return;\n+      }\n+\n+      // Get user's role from session\n+      const userRole = session.user.user_metadata?.role;\n+      console.log('Current user role:', userRole);\n+      console.log('📝 Saving content heading:', {\n+        contentHeading,\n+        currentLessonId,\n+        selectedSubtopicId,\n+        timestamp: new Date().toISOString()\n+      });\n+\n+      // Create metadata object\n+      const lessonMetadata = {\n+        lastEdited: new Date().toISOString(),\n+        version: 1,\n+        status: 'draft' \n+      };\n+\n+      // Complete lesson data with all fields\n+      const lessonData = {\n+        id: currentLessonId,\n+        title: lessonTitle,\n+        content: lessonContent,\n+        metadata: lessonMetadata, // Supabase will automatically handle JSON conversion\n+        content_type: 'html',\n+        lesson_type: 'lesson',\n+        grade_id: selectedGradeId,\n+        topic_id: selectedTopicId,\n+        subtopic_id: selectedSubtopicId,\n+        user_id: session.user.id,\n+        updated_at: new Date().toISOString(),\n+        role: userRole, // Include role in the payload\n+        description: '',\n+        prerequisites: [],\n+        media_type: 'image',\n+        media_url: '',\n+        contentheading: contentHeading || ''\n+      };\n+\n+      console.log('📦 Data being sent to Supabase:', lessonData);\n+\n+      // Save lesson with all fields\n+      const { data, error: lessonError } = await supabase\n+        .from('lessons')\n+        .upsert(lessonData, { \n+          onConflict: 'id'\n+        })\n+        .select();\n+\n+      if (lessonError) throw lessonError;\n+\n+      // 2. Save lesson content\n+      const { data: existingContent } = await supabase\n+        .from('lesson_content')\n+        .select('id')\n+        .eq('lesson_id', currentLessonId)\n+        .single();\n+\n+      const contentMetadata = {\n+        lastEdited: new Date().toISOString(),\n+        version: 1,\n+        status: 'draft'\n+      };\n+\n+      const contentUpdate = {\n+        id: existingContent?.id || crypto.randomUUID(),\n+        lesson_id: currentLessonId,\n+        content: [lessonContent],\n+        metadata: contentMetadata, // Supabase will automatically handle JSON conversion\n+        content_type: 'html',\n+        user_id: session.user.id,\n+        updated_at: new Date().toISOString(),\n+        created_at: new Date().toISOString()\n+      };\n+\n+      const { error: contentError } = await supabase\n+        .from('lesson_content')\n+        .upsert(contentUpdate, { onConflict: 'id' });\n+\n+      if (contentError) throw contentError;\n+\n+      // 3. Save questions\n+      for (const question of questions) {\n+        const questionData = {\n+          id: question.id,\n+          lesson_id: currentLessonId,\n+          type: question.type,\n+          title: question.title,\n+          metadata: question.metadata,\n+          data: question.data,\n+          updated_at: new Date().toISOString(),\n+          user_id: session.user.id\n+        };\n+\n+        const { error: questionError } = await supabase\n+          .from('questions')\n+          .upsert(questionData, { onConflict: 'id' });\n+\n+        if (questionError) throw questionError;\n+\n+        //4. Save exercise prompts for this question\n+        if (question.exercisePrompts) {\n+          for (const prompt of question.exercisePrompts) {\n+            const promptData = {\n+              id: prompt.id,\n+              question_id: question.id,\n+              text: prompt.text,\n+              media: prompt.media,\n+              type: prompt.type,\n+              narration: prompt.narration,\n+              saytext: prompt.saytext,\n+              user_id: session.user.id,\n+              updated_at: new Date().toISOString()\n+            };\n+\n+            const { error: promptError } = await supabase\n+              .from('exercise_prompts')\n+              .upsert(promptData, { onConflict: 'id' });\n+\n+            if (promptError) throw promptError;\n+          }\n+        }\n+      }\n+\n+      // 5. Save activities\n+      if (activities.length > 0) {\n+        const activitiesData = activities.map(activity => ({\n+          id: activity.id,\n+          lesson_id: currentLessonId,\n+          type: activity.type,\n+          title: activity.title,\n+          name: activity.name,\n+          instructions: activity.instructions,\n+          media: activity.media,\n+          data: activity.data,\n+          created_at: new Date().toISOString()\n+        }));\n+\n+        const { error: activitiesError } = await supabase\n+          .from('activities')\n+          .upsert(activitiesData, { onConflict: 'id' });\n+\n+        if (activitiesError) throw activitiesError;\n+      }\n+\n+      // After successful save\n+      console.log('✅ Content heading saved successfully:', {\n+        contentHeading,\n+        lessonId: currentLessonId,\n+        timestamp: new Date().toISOString()\n+      });\n+\n+      toast.success('Lesson saved successfully');\n+    } catch (err) {\n+      const error = err as PostgrestError;\n+      console.error('❌ Error saving content heading:', {\n+        error: error.message,\n+        contentHeading,\n+        lessonContent,\n+        lessonId: currentLessonId,\n+        timestamp: new Date().toISOString()\n+      });\n+      toast.error(`Failed to save lesson: ${error.message}`);\n+\n+\n+    }\n+  };\n+\n+  const handleSaveQuestion = async (question: Question, index: number) => {\n+    const loadingToast = toast.loading(`Saving question ${index + 1}...`);\n+    \n+    try {\n+      const { data: { session } } = await supabase.auth.getSession();\n+      if (!session?.user) {\n+        toast.error('Please sign in to save question', { id: loadingToast });\n+        return;\n+      }\n+\n+      // Save question\n+      const questionData = {\n+        id: question.id,\n+        lesson_id: currentLessonId,\n+        type: question.type,\n+        title: question.title,\n+        metadata: question.metadata,\n+        data: {\n+          prompt: question.data?.prompt ?? '',\n+          teacher_script: question.data?.teacher_script ?? '',\n+          followup_prompt: question.data?.followup_prompt ?? [],\n+          sample_answer: question.data?.sample_answer || undefined,  // Convert null to undefined\n+          answer: question.data?.answer || undefined  // Convert null to undefined\n+        } as const,\n+        user_id: session.user.id,\n+        updated_at: new Date().toISOString()\n+      };\n+\n+      const { error: questionError } = await supabase\n+        .from('questions')\n+        .upsert(questionData, { onConflict: 'id' });\n+\n+      if (questionError) throw questionError;\n+\n+      // Save exercise prompts if they exist\n+      if (question.exercisePrompts?.length) {\n+        for (const prompt of question.exercisePrompts) {\n+          const promptData = {\n+            id: prompt.id,\n+            question_id: question.id,\n+            text: prompt.text,\n+            type: prompt.type,\n+            narration: prompt.narration,\n+            saytext: prompt.saytext,\n+            media: prompt.media,\n+            user_id: session.user.id,\n+            updated_at: new Date().toISOString()\n+          };\n+\n+          const { error: promptError } = await supabase\n+            .from('exercise_prompts')\n+            .upsert(promptData, { onConflict: 'id' });\n+\n+          if (promptError) throw promptError;\n+        }\n+      }\n+\n+      toast.success(`Question ${index + 1} saved successfully`, { id: loadingToast });\n+    } catch (error) {\n+      console.error('Error saving question:', error);\n+      toast.error(`Failed to save question ${index + 1}`, { id: loadingToast });\n+    }\n+  };\n+\n+  const handleSaveActivity = async (activity: Activity) => {\n+    try {\n+      await contentService.saveActivity(activity);\n+      toast.success('Activity saved');\n+    } catch (error) {\n+      console.error('Failed to save activity:', error);\n+      toast.error('Failed to save activity');\n+    }\n+  };\n+\n+  // Effects\n+  useEffect(() => {\n+    const fetchGrades = async () => {\n+      try {\n+        const { data, error } = await supabase\n+          .from('grades')\n+          .select('*')\n+          .order('name');\n+\n+        if (error) {\n+          console.error('Supabase error:', error);\n+          throw error;\n+        }\n+\n+        if (!data) {\n+          throw new Error('No data returned from Supabase');\n+        }\n+\n+        // Map the grades to match your interface\n+        const validGrades = data.map((grade: any) => ({\n+          _id: grade.id,\n+          id: grade.id,\n+          name: grade.name,\n+          level: grade.level || 0,  // Add default value if not provided\n+          orderIndex: grade.order_index || 0,  // Add default value if not provided\n+          topics: []\n+        }));\n+        \n+        setGrades(validGrades);\n+      } catch (error) {\n+        console.error('Error fetching grades:', error);\n+        toast.error('Failed to fetch grades');\n+      }\n+    };\n+\n+    fetchGrades();\n+  }, []);\n+\n+  // Topic Selection\n+  useEffect(() => {\n+    const fetchTopics = async () => {\n+      if (!selectedGradeId) return;\n+      \n+      try {\n+        const { data, error } = await supabase\n+          .from('topics')\n+          .select('*')\n+          .eq('grade_id', selectedGradeId)\n+          .order('title');\n+\n+        if (error) {\n+          throw error;\n+        }\n+\n+        // Map the topics to match your interface\n+        const validTopics = (data || []).map((topic: any) => ({\n+          _id: topic.id,\n+          id: topic.id,\n+          name: topic.title,\n+          title: topic.title,\n+          grade_id: topic.grade_id,\n+          subtopics: []\n+        }));\n+        \n+        setTopics(validTopics);\n+      } catch (error) {\n+        console.error('Error fetching topics:', error);\n+        toast.error('Failed to fetch topics');\n+      }\n+    };\n+\n+    fetchTopics();\n+  }, [selectedGradeId]);\n+\n+  // Subtopic Selection\n+  useEffect(() => {\n+    const fetchSubtopics = async () => {\n+      if (!selectedTopicId) return;\n+      \n+      try {\n+        // Use content service to fetch subtopics\n+        const subtopicsData = await contentService.fetchSubtopics(selectedTopicId);\n+        console.log('Fetched subtopics:', subtopicsData);\n+\n+        const validSubtopics = subtopicsData.map((subtopic: any) => ({\n+          id: subtopic.id,\n+          title: subtopic.title,\n+          description: subtopic.description,\n+          topic_id: subtopic.topic_id,\n+          lessons: [],\n+          order_index: subtopicsData.length\n+        }));\n+        \n+        setSubtopics(validSubtopics);\n+        \n+        // Update global state\n+        if (selectedSubtopic) {\n+          setSelectedSubtopic(selectedSubtopic);\n+        }\n+      } catch (err) {\n+        const error = err as Error;\n+        console.error('Error fetching subtopics:', error);\n+        toast.error('Failed to fetch subtopics');\n+      }\n+    };\n+\n+    fetchSubtopics();\n+  }, [selectedTopicId, selectedSubtopic, setSelectedSubtopic]);\n+\n+  // Add effect to monitor subtopics state\n+  useEffect(() => {\n+    console.log('Current subtopics state:', subtopics);\n+  }, [subtopics]);\n+\n+  // Add fetchLessons function\n+  const fetchLessons = useCallback(async () => {\n+    if (!selectedSubtopicId) return;\n+    try {\n+      const { data, error } = await supabase\n+        .from('lessons')\n+        .select('*')\n+        .eq('subtopic_id', selectedSubtopicId)\n+        .order('title');\n+\n+      if (error) {\n+        throw error;\n+      }\n+      \n+      // Map the lessons to ensure they have _id\n+      const validLessons = (data || []).map((lesson: any) => ({\n+        ...lesson,\n+        _id: lesson._id || lesson.id, // Use _id if available, otherwise use id\n+        title: lesson.title || 'Untitled Lesson'\n+      })).filter((lesson: any) => lesson._id); // Only include lessons with valid IDs\n+      \n+      setLessons(validLessons);\n+    } catch (error) {\n+      console.error('Error fetching lessons:', error);\n+      toast.error('Failed to fetch lessons');\n+    }\n+  }, [selectedSubtopicId]);\n+  // Add loadLessonContent function\n+  const isLoading = useRef(false);\n+  const loadLessonContent = useCallback(async (lessonId: string) => {\n+    // Prevent multiple simultaneous loads\n+    if (isLoading.current) return;\n+    isLoading.current = true;\n+\n+    const controller = new AbortController();\n+\n+    try {\n+      // Clear existing content first\n+      setLessonTitle('');\n+      setContentHeading('');\n+      setLessonContent('');\n+      setQuestions([]);\n+      \n+      // First fetch lesson data\n+      const { data: lessonData, error: lessonError } = await supabase\n+        .from('lessons')\n+        .select('*')\n+        .eq('id', lessonId)\n+        .single()\n+        \n+\n+      if (lessonError) {\n+        console.error('Lesson fetch error:', lessonError);\n+        throw lessonError;\n+      }\n+\n+      // Set lesson data\n+      setLessonTitle(lessonData.title || '');\n+      setContentHeading(lessonData.content || '');\n+\n+      // Then fetch lesson content with explicit headers\n+      const { data: contentData, error: contentError } = await supabase\n+        .from('lesson_content')\n+        .select('*')\n+        .eq('lesson_id', lessonId)\n+        .order('updated_at', { ascending: false })\n+        .limit(1)\n+        .maybeSingle();\n+\n+      if (contentError) {\n+        console.error('Content fetch error:', contentError);\n+        throw contentError;\n+      }\n+\n+      // Set content if available\n+      if (contentData?.content) {\n+        setLessonContent(typeof contentData.content === 'string' \n+          ? contentData.content \n+          : JSON.stringify(contentData.content)\n+        );\n+      }\n+\n+    } catch (error: unknown) {\n+      if (error instanceof Error && error.name === 'AbortError') {\n+        console.log('Request aborted');\n+        return;\n+      }\n+      console.error('Error loading lesson:', error);\n+      toast.error('Failed to load lesson content');\n+      \n+      // Reset states on error\n+      setLessonTitle('');\n+      setContentHeading('');\n+      setLessonContent('');\n+      setQuestions([]);\n+    } finally {\n+      isLoading.current = false;\n+    }\n+\n+    return () => {\n+      controller.abort();\n+    };\n+  }, []); // Empty dependencies since we're using closure over state setters\n+\n+  // // Add effect for fetching lessons when subtopic changes\n+  useEffect(() => {\n+    if (selectedSubtopicId) {\n+      fetchLessons();\n+    }\n+  }, [selectedSubtopicId, fetchLessons]);\n+\n+  // Add effect for loading lesson content when currentLessonId changes\n+    useEffect(() => {\n+    let isMounted = true;\n+    let timeoutId: NodeJS.Timeout;\n+\n+    const loadContent = async () => {\n+      if (!currentLessonId || !isMounted) return;\n+\n+      // Clear previous timeout if exists\n+      if (timeoutId) clearTimeout(timeoutId);\n+\n+      // Set new timeout for debouncing\n+      timeoutId = setTimeout(() => {\n+        if (isMounted) {\n+          loadLessonContent(currentLessonId);\n+        }\n+      }, 300);\n+    };\n+\n+    loadContent();\n+\n+    // Cleanup function\n+    return () => {\n+      isMounted = false;\n+      if (timeoutId) clearTimeout(timeoutId);\n+      if (isLoading.current) isLoading.current = false;\n+    };\n+  }, [currentLessonId]); // Remove loadLessonContent from dependencies\n+\n+  useEffect(() => {\n+    console.log('Current lessons state:', lessons);\n+  }, [lessons]);\n+\n+    // Add keyboard shortcut for saving\n+  useEffect(() => {\n+    const handleKeyDown = (e: KeyboardEvent) => {\n+      if ((e.ctrlKey || e.metaKey) && e.key === 's') {\n+        e.preventDefault();\n+        handleSaveLesson();\n+      }\n+    };\n+\n+    window.addEventListener('keydown', handleKeyDown);\n+    return () => window.removeEventListener('keydown', handleKeyDown);\n+  }, [handleSaveLesson]);\n+\n+  // Add SaveFeedback component\n+  const SaveFeedback = useCallback(() => {\n+    if (saveProgress === 'idle') return null;\n+\n+    return (\n+    <div className=\"fixed bottom-4 right-4\">\n+      {saveProgress === 'saving' && (\n+        <div className=\"flex items-center gap-2 bg-background border rounded-lg px-4 py-2 shadow-lg\">\n+          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n+          <span className=\"text-sm\">Saving changes...</span>\n+        </div>\n+      )}\n+      {saveProgress === 'saved' && (\n+        <div className=\"flex items-center gap-2 bg-green-500 text-white rounded-lg px-4 py-2 shadow-lg\">\n+          <Check className=\"h-4 w-4\" />\n+          <span className=\"text-sm\">Changes saved</span>\n+        </div>\n+      )}\n+      {saveProgress === 'error' && (\n+        <div className=\"flex items-center gap-2 bg-destructive text-destructive-foreground rounded-lg px-4 py-2 shadow-lg\">\n+          <X className=\"h-4 w-4\" />\n+          <span className=\"text-sm\">Error saving changes</span>\n+        </div>\n+      )}\n+    </div>\n+  );\n+  }, [saveProgress]);\n+\n+  // Update handlers\n+  const handleGradeSelect = (gradeId: string) => {\n+    // Always keep sidebar open during selection\n+    setIsSidebarCollapsed(false);\n+    setIsSidebarLocked(true);\n+    \n+    // Batch state updates\n+    requestAnimationFrame(() => {\n+      setSelectedGradeId(gradeId);\n+      setSelectedGrade(gradeId);\n+      setSelectedTopicId(null);\n+      setSelectedTopic('');\n+      setSelectedSubtopicId(null);\n+      setSelectedSubtopic('');\n+      setCurrentLessonId(null);\n+      \n+      if (isViewMode) {\n+        setExpandedGrade(gradeId);\n+      }\n+    });\n+  };\n+\n+  const handleTopicSelect = (value: string) => {\n+    setSelectedTopicId(value);\n+    setSelectedTopic(value);\n+    setSelectedSubtopicId(null);\n+    setSelectedSubtopic('');\n+    setCurrentLessonId(null);\n+  };\n+\n+  const handleSubtopicSelect = (value: string) => {\n+    setSelectedSubtopicId(value);\n+    setSelectedSubtopic(value);\n+    setCurrentLessonId(null);\n+  };\n+\n+  const handleLessonSelect = async (lessonId: string) => {\n+    try {\n+      // Lock sidebar during selection\n+      setIsSidebarLocked(true);\n+      setIsSidebarCollapsed(false);\n+      setCurrentLessonId(lessonId);\n+      \n+      // 1. Fetch lesson data\n+      const { data: lessonData, error: lessonError } = await supabase\n+        .from('lessons')\n+        .select('*')\n+        .eq('id', lessonId)\n+        .single();\n+\n+      if (lessonError) throw lessonError;\n+\n+      // 2. Fetch questions with exercise prompts\n+      const { data: questionsData, error: questionsError } = await supabase\n+        .from('questions')\n+        .select(`\n+          *,\n+          exercise_prompts (*)\n+        `)\n+        .eq('lesson_id', lessonId);\n+\n+      if (questionsError) throw questionsError;\n+\n+      // 3. Fetch activities - removed order_index\n+      const { data: activitiesData, error: activitiesError } = await supabase\n+        .from('activities')\n+        .select('*')\n+        .eq('lesson_id', lessonId);\n+\n+      if (activitiesError) throw activitiesError;\n+\n+      // Format questions with their exercise prompts\n+      const formattedQuestions = questionsData?.map(q => ({\n+        ...q,\n+        data: q.data || {},\n+        exercisePrompts: q.exercise_prompts || []\n+      })) || [];\n+\n+      // Set all states\n+      setLessonTitle(lessonData.title || '');\n+      setLessonContent(lessonData.content || '');\n+      setQuestions(formattedQuestions);\n+      setActivities(activitiesData || []);\n+\n+      // After successful load, unlock sidebar and allow collapse\n+      setTimeout(() => {\n+        setIsSidebarLocked(false);\n+        if (!isSidebarLocked) {\n+          setIsSidebarCollapsed(true);\n+        }\n+      }, 300);\n+\n+    } catch (error) {\n+      console.error('Error loading lesson:', error);\n+      toast.error('Failed to load lesson');\n+      // Reset states on error\n+      setLessonTitle('');\n+      setLessonContent('');\n+      setQuestions([]);\n+      setActivities([]);\n+    }\n+    if (!isSidebarLocked) {\n+      setIsSidebarCollapsed(true);\n+    }\n+  };\n+\n+  // Update the expansion handlers\n+  const handleTopicExpand = async (topicId: string) => {\n+    setExpandedTopic(expandedTopic === topicId ? null : topicId);\n+    setSelectedTopicId(topicId);\n+    \n+    // Load subtopics when topic is expanded\n+    if (topicId) {\n+      setIsLoadingSubtopics(true);\n+      try {\n+        const { data: subtopicsData, error } = await supabase\n+          .from('subtopics')\n+          .select('*')\n+          .eq('topic_id', topicId)\n+          .order('order_index');\n+\n+        if (error) throw error;\n+        setSubtopics(subtopicsData || []);\n+      } catch (error) {\n+        console.error('Error loading subtopics:', error);\n+        toast.error('Failed to load subtopics');\n+      } finally {\n+        setIsLoadingSubtopics(false);\n+      }\n+    }\n+  };\n+\n+  const handleSubtopicExpand = async (subtopicId: string) => {\n+    setExpandedSubtopic(expandedSubtopic === subtopicId ? null : subtopicId);\n+    setSelectedSubtopicId(subtopicId);\n+    \n+    if (subtopicId) {\n+      setIsLoadingLessons(true);\n+      try {\n+        const { data: lessonsData, error } = await supabase\n+          .from('lessons')\n+          .select('*')\n+          .eq('subtopic_id', subtopicId)\n+          .order('order_index');\n+\n+        if (error) throw error;\n+        setLessons(lessonsData || []);\n+      } catch (error) {\n+        console.error('Error loading lessons:', error);\n+        toast.error('Failed to load lessons');\n+      } finally {\n+        setIsLoadingLessons(false);\n+      }\n+    }\n+  };\n+\n+  const handleQuestionExpand = (index: number) => {\n+    setExpandedQuestion(expandedQuestion === index ? null : index);\n+  };\n+\n+  const handleActivityExpand = (index: number) => {\n+    setExpandedActivity(expandedActivity === index ? null : index);\n+  };\n+\n+  // Add effect to save mode changes to localStorage\n+  useEffect(() => {\n+    localStorage.setItem('lessonManagementViewMode', isViewMode.toString());\n+  }, [isViewMode]);\n+\n+  // Add handlers for creating new items\n+  const handleCreateGrade = async () => {\n+    try {\n+      const response = await fetch(`${API_ENDPOINT}/grades`, {\n+        method: 'POST',\n+        headers: { 'Content-Type': 'application/json' },\n+        body: JSON.stringify({ name: newItemData.name })\n+      });\n+\n+      if (!response.ok) throw new Error('Failed to create grade');\n+      const data = await response.json();\n+      \n+      if (!data.success) throw new Error(data.message || 'Failed to create grade');\n+      \n+      // Update grades list\n+      setGrades([...grades, data.data.grade]);\n+      setModalState({ ...modalState, showAddGrade: false });\n+      setNewItemData({ name: '', description: '' });\n+      toast.success('Grade created successfully');\n+    } catch (error) {\n+      console.error('Error creating grade:', error);\n+      toast.error('Failed to create grade');\n+    }\n+  };\n+\n+  const handleCreateTopic = async () => {\n+    if (!selectedGradeId) {\n+      toast.error('Please select a grade first');\n+      return;\n+    }\n+\n+    try {\n+      const newTopic = await contentService.createTopic({\n+        title: newItemData.name, // Map from newItemData.name to title\n+        description: newItemData.description,\n+        gradeId: selectedGradeId\n+      });\n+\n+      setTopics(prev => [...prev, newTopic]);\n+      toast.success('Topic created successfully');\n+      setModalState({ ...modalState, showAddTopic: false });\n+      setNewItemData({ name: '', description: '' });\n+    } catch (err) {\n+      const error = err instanceof Error ? err.message : String(err);\n+      console.error('Error creating topic:', error);\n+      toast.error('Failed to create topic');\n+    }\n+  };\n+    \n+  \n+\n+\n+  const handleCreateSubtopic = async (data: { title: string; description?: string }) => {\n+    try {\n+      if (!selectedTopicId) {\n+        toast.error('Please select a topic first');\n+        return;\n+      }\n+\n+      const newSubtopic = await contentService.createSubtopic({\n+        ...data,\n+        topicId: selectedTopicId\n+      });\n+\n+      setSubtopics(prev => [...prev, {\n+        _id: newSubtopic.id,\n+        id: newSubtopic.id,\n+        name: newSubtopic.title,\n+        title: newSubtopic.title,\n+        description: newSubtopic.description,\n+        topic_id: newSubtopic.topic_id,\n+        orderIndex: prev.length,\n+        lessons: []\n+      }]);\n+\n+      toast.success('Subtopic created successfully');\n+      setModalState(prev => ({ ...prev, showAddSubtopic: false }));\n+    } catch (err) {\n+      const error = err as Error;\n+      console.error('Error creating subtopic:', error);\n+      toast.error('Failed to create subtopic');\n+    }\n+  };\n+\n+  const handleUpdateSubtopic = async (subtopicId: string, data: { title: string; description?: string }) => {\n+    try {\n+      const { data: updatedSubtopic, error } = await supabase\n+        .from('sub_topics')\n+        .update(data)\n+        .eq('id', subtopicId)\n+        .select()\n+        .single();\n+\n+      if (error) throw error;\n+      \n+      setSubtopics(prev => prev.map(subtopic => \n+        subtopic.id === subtopicId \n+          ? {\n+              ...subtopic,\n+              name: updatedSubtopic.title\n+            }\n+          : subtopic\n+      ));\n+\n+      toast.success('Subtopic updated successfully');\n+    } catch (err) {\n+      const error = err as Error;\n+      console.error('Error updating subtopic:', error);\n+      toast.error('Failed to update subtopic');\n+    }\n+  };\n+\n+  const handleDeleteSubtopic = async (subtopicId: string) => {\n+    try {\n+      await contentService.deleteSubtopic(subtopicId);\n+      setSubtopics(prev => prev.filter(subtopic => subtopic.id !== subtopicId));\n+      setSelectedSubtopicId(null);\n+      toast.success('Subtopic deleted successfully');\n+    } catch (err) {\n+      const error = err as Error;\n+      console.error('Error deleting subtopic:', error);\n+      toast.error('Failed to delete subtopic');\n+    }\n+  };\n+\n+  const handleCreateLesson = async () => {\n+    if (!selectedSubtopicId) {\n+      toast.error('Please select a subtopic first');\n+      return;\n+    }\n+\n+    try {\n+      // First create the lesson\n+      const { data: newLesson, error: lessonError } = await supabase\n+        .from('lessons')\n+        .insert({\n+          title: newItemData.name,\n+          duration: 0,\n+          topic_id: selectedTopicId,\n+          subtopic_id: selectedSubtopicId,\n+          content: '', // Empty rich text content initially\n+          status: 'draft'\n+        })\n+        .select()\n+        .single();\n+\n+      if (lessonError) throw lessonError;\n+\n+      // Create initial question\n+      const { data: newQuestion, error: questionError } = await supabase\n+        .from('questions')\n+        .insert({\n+          lesson_id: newLesson.id,\n+          type: 'speaking', // default type\n+          title: 'Question 1',\n+          data: {\n+            prompt: '',\n+            teacher_script: '',\n+            options: []\n+          },\n+          order_index: 0\n+        })\n+        .select()\n+        .single();\n+\n+      if (questionError) throw questionError;\n+\n+      // Create initial exercise prompts for the question\n+      const { error: promptsError } = await supabase\n+        .from('exercise_prompts')\n+        .insert([\n+          {\n+            question_id: newQuestion.id,\n+            text: '',\n+            type: 'image',\n+            narration: '',\n+            saytext: '',\n+            media: [],\n+            order_index: 0\n+          },\n+          {\n+            question_id: newQuestion.id,\n+            text: '',\n+            type: 'gif',\n+            narration: '',\n+            saytext: '',\n+            media: [],\n+            order_index: 1\n+          }\n+        ]);\n+\n+      if (promptsError) throw promptsError;\n+\n+      // Create initial activity\n+      // const { error: activityError } = await supabase\n+      //   .from('activities')\n+      //   .insert({\n+      //     lesson_id: newLesson.id,\n+      //     type: 'practice',\n+      //     title: '',\n+      //     instructions: '',\n+      //     media: [],\n+      //     data: {\n+      //       prompt: '',\n+      //       teacherScript: '',\n+      //       media: []\n+      //     },\n+      //     order_index: 0\n+      //   });\n+\n+      // if (activityError) throw activityError;\n+\n+      // Update UI state\n+      setLessons(prev => [...prev, newLesson]);\n+      setCurrentLessonId(newLesson.id);\n+      setLessonTitle(newLesson.title);\n+      setModalState({ ...modalState, showAddLesson: false });\n+      setNewItemData({ name: '', description: '' });\n+      toast.success('Lesson created successfully');\n+\n+    } catch (error) {\n+      console.error('Error creating lesson:', error);\n+      toast.error('Failed to create lesson');\n+    }\n+  };\n+\n+  // Effect to handle localStorage after mount\n+  useEffect(() => {\n+    const storedMode = localStorage.getItem('lessonManagementViewMode');\n+    if (storedMode !== null) {\n+      setIsViewMode(storedMode === 'true');\n+    }\n+  }, []);\n+\n+  // Update the cleanupModalState function\n+  const cleanupModalState = useCallback(() => {\n+    document.body.style.pointerEvents = '';\n+    document.body.style.overflow = '';\n+    setModalState({\n+      showAddGrade: false,\n+      showAddTopic: false,\n+      showAddSubtopic: false,\n+      showAddLesson: false\n+    });\n+    setNewItemData({ name: '', description: '' });\n+  }, []);\n+\n+  // Add a function to handle modal state changes\n+  const handleModalStateChange = useCallback((modalType: keyof typeof modalState, open: boolean) => {\n+    if (!open) {\n+      cleanupModalState();\n+    } else {\n+      setModalState(prev => ({ ...prev, [modalType]: open }));\n+    }\n+  }, [cleanupModalState]);\n+\n+  const handleContentSave = async (content: string) => {\n+    const loadingToast = toast.loading(\"Saving content...\", {\n+      action: {\n+        label: \"Close\",\n+        onClick: () => toast.dismiss()\n+      }\n+    });\n+    \n+    try {\n+      const { data: { session } } = await supabase.auth.getSession();\n+      if (!session?.user) {\n+        toast.error('Please sign in to save content', { id: loadingToast });\n+        return;\n+      }\n+\n+      // Get the most recent content entry\n+      const { data: existingContent, error: checkError } = await supabase\n+        .from('lesson_content')\n+        .select('id')\n+        .eq('lesson_id', currentLessonId)\n+        .order('updated_at', { ascending: false })\n+        .limit(1)\n+        .maybeSingle();\n+\n+      // If content exists, update it; if not, insert new\n+      const { error } = await supabase\n+        .from('lesson_content')\n+        .upsert({\n+          id: existingContent?.id, // This ensures we update if id exists\n+          lesson_id: currentLessonId,\n+          content: [content],\n+          content_type: 'text',\n+          metadata: {\n+            heading: contentHeading\n+          },\n+          user_id: session.user.id,\n+          updated_at: new Date().toISOString()\n+        }, {\n+          onConflict: 'id'  // This ensures we update based on lesson_id\n+        });\n+\n+      if (error) throw error;\n+\n+      // Save questions separately\n+      for (const question of questions) {\n+        const { exercisePrompts, ...questionData } = question; // Remove exercisePrompts from question data\n+        \n+        // Save question\n+        const { error: questionError } = await supabase\n+          .from('questions')\n+          .upsert(questionData, {\n+            onConflict: 'id'\n+          })\n+          .select();\n+\n+        if (questionError) throw questionError;\n+\n+        // Save exercise prompts\n+        if (exercisePrompts?.length > 0) {\n+          for (const prompt of exercisePrompts) {\n+            const { error: promptError } = await supabase\n+              .from('exercise_prompts')\n+              .upsert(prompt, {\n+                onConflict: 'id'\n+              })\n+              .select();\n+\n+            if (promptError) throw promptError;\n+          }\n+        }\n+      }\n+      \n+      toast.success(\"Content saved successfully\", {\n+        action: {\n+          label: \"Close\",\n+          onClick: () => toast.dismiss()\n+        },\n+        id: loadingToast,\n+      });\n+      setIsContentEditorOpen(false);\n+    } catch (error) {\n+      console.error('Error saving content:', error);\n+      toast.error(\"Failed to save content\", {\n+        action: {\n+          label: \"Close\",\n+          onClick: () => toast.dismiss()\n+        },\n+        id: loadingToast,\n+      });\n+    }\n+  };\n+\n+  // Add this component for inline editing\n+  const InlineEdit = ({ \n+    value, \n+    onSave, \n+    isEditing, \n+    setIsEditing, \n+    placeholder,\n+    className = \"\"\n+  }: InlineEditProps) => {\n+    const [tempValue, setTempValue] = useState(value);\n+    \n+    return isEditing ? (\n+      <div className=\"flex items-center gap-2\">\n+        <Input\n+          value={tempValue}\n+          onChange={(e) => setTempValue(e.target.value)}\n+          placeholder={placeholder}\n+          className={className}\n+          autoFocus\n+        />\n+        <Button\n+          size=\"sm\"\n+          variant=\"ghost\"\n+          onClick={() => {\n+            onSave(tempValue);\n+            setIsEditing(false);\n+          }}\n+        >\n+          <Check className=\"h-4 w-4 text-green-500\" />\n+        </Button>\n+        <Button\n+          size=\"sm\"\n+          variant=\"ghost\"\n+          onClick={() => setIsEditing(false)}\n+        >\n+          <X className=\"h-4 w-4 text-red-500\" />\n+        </Button>\n+      </div>\n+    ) : (\n+      <div \n+        className=\"group flex items-center gap-2 cursor-pointer\"\n+        onClick={() => setIsEditing(true)}\n+      >\n+        <span className={className}>{value || placeholder}</span>\n+        <Pencil className=\"h-4 w-4 opacity-0 group-hover:opacity-100 transition-opacity\" />\n+      </div>\n+    );\n+  };\n+\n+  // Add this effect to handle auto-collapse after lesson selection\n+  useEffect(() => {\n+    if (currentLessonId && selectedGradeId && selectedTopicId && selectedSubtopicId) {\n+      setIsSidebarLocked(false);\n+      // Optional: add a slight delay before collapsing\n+      setTimeout(() => setIsSidebarCollapsed(true), 300);\n+    }\n+  }, [currentLessonId, selectedGradeId, selectedTopicId, selectedSubtopicId]);\n+\n+  // Add individual save handlers\n+  // const handleSaveQuestion = async (question: Question, index: number) => {\n+  //   try {\n+  //     // Update status to saving\n+  //     setQuestionSaveStatuses(prev => [\n+  //       ...prev.filter(s => s.id !== question.id),\n+  //       { id: question.id, status: 'saving' }\n+  //     ]);\n+\n+  //     const questionUpsert = {\n+  //       id: question.id,\n+  //       lesson_id: currentLessonId,\n+  //       type: question.type,\n+  //       title: question.data?.prompt || 'Untitled Question',\n+  //       metadata: question.metadata || {},\n+  //       data: {\n+  //         prompt: question.data?.prompt || '',\n+  //         teacherScript: question.data?.teacherScript || '',\n+  //         ...question.data\n+  //       },\n+  //       order_index: index,\n+  //       created_at: new Date().toISOString(),\n+  //       updated_at: new Date().toISOString()\n+  //     };\n+\n+  //     const { error: questionError } = await supabase\n+  //       .from('questions')\n+  //       .upsert(questionUpsert);\n+\n+  //     if (questionError) throw questionError;\n+\n+  //     // Update status to saved\n+  //     setQuestionSaveStatuses(prev => [\n+  //       ...prev.filter(s => s.id !== question.id),\n+  //       { id: question.id, status: 'saved', lastSaved: new Date().toISOString() }\n+  //     ]);\n+\n+  //     toast.success(`Question ${index + 1} saved successfully`);\n+  //   } catch (error) {\n+  //     console.error('Error saving question:', error);\n+  //     setQuestionSaveStatuses(prev => [\n+  //       ...prev.filter(s => s.id !== question.id),\n+  //       { id: question.id, status: 'error' }\n+  //     ]);\n+  //     toast.error(`Failed to save question ${index + 1}`);\n+  //   }\n+  // };\n+\n+  const handleSavePrompt = async (questionId: string, prompt: ExercisePrompt, promptIndex: number) => {\n+    try {\n+      setPromptSaveStatuses(prev => [\n+        ...prev.filter(s => s.id !== prompt.id),\n+        { id: prompt.id || '', status: 'saving' } as SaveStatus\n+      ]);\n+\n+      const promptUpsert = {\n+        id: prompt.id,\n+        question_id: questionId,\n+        text: prompt.text || '',\n+        type: prompt.type || 'text',\n+        narration: prompt.narration || '',\n+        saytext: prompt.saytext || '',\n+        media: prompt.media || [],\n+        order_index: promptIndex,\n+        created_at: prompt.created_at || new Date().toISOString(),\n+        updated_at: new Date().toISOString()\n+      };\n+\n+      const { error: promptError } = await supabase\n+        .from('exercise_prompts')\n+        .upsert(promptUpsert);\n+\n+      if (promptError) throw promptError;\n+\n+      setPromptSaveStatuses(prev => [\n+        ...prev.filter(s => s.id !== prompt.id),\n+        { id: prompt.id || '', status: 'saved', lastSaved: new Date().toISOString() } as SaveStatus\n+      ]);\n+\n+      toast.success(`Prompt ${promptIndex + 1} saved successfully`);\n+    } catch (error) {\n+      console.error('Error saving prompt:', error);\n+      setPromptSaveStatuses(prev => [\n+        ...prev.filter(s => s.id !== prompt.id),\n+        { id: prompt.id || '', status: 'error' } as SaveStatus\n+      ]);\n+      toast.error(`Failed to save prompt ${promptIndex + 1}`);\n+    }\n+  };\n+\n+  // Add effect to mark items as draft when edited\n+  useEffect(() => {\n+    questions.forEach(question => {\n+      if (!questionSaveStatuses.find(s => s.id === question.id)) {\n+        setQuestionSaveStatuses(prev => [\n+          ...prev,\n+          { id: question.id, status: 'draft' }\n+        ]);\n+      }\n+    });\n+  }, [questions]);\n+\n+  // Add this function with your other handlers\n+  const handleRefreshLesson = async () => {\n+    if (!currentLessonId) {\n+      toast.error('No lesson selected');\n+      return;\n+    }\n+    \n+    try {\n+      toast.loading('Refreshing lesson content...', {\n+        action: {\n+          label: \"Close\",\n+          onClick: () => toast.dismiss()\n+        },\n+      });\n+      await handleLessonSelect(currentLessonId);\n+      toast.success('Content refreshed', {\n+        action: {\n+          label: \"Close\",\n+          onClick: () => toast.dismiss()\n+        },\n+      });\n+    } catch (error) {\n+      console.error('Error refreshing lesson:', error);\n+      toast.error('Failed to refresh content', {\n+        action: {\n+          label: \"Close\",\n+          onClick: () => toast.dismiss()\n+        },\n+      });\n+    }\n+  };\n+\n+  // Add this function to handle refresh\n+  const handleRefreshContent = async () => {\n+    if (!currentLessonId) {\n+      toast.error('No lesson selected');\n+      return;\n+    }\n+    \n+    toast.loading('Refreshing content...');\n+    try {\n+      await loadLessonContent(currentLessonId);\n+      toast.success('Content refreshed');\n+    } catch (error) {\n+      console.error('Refresh error:', error);\n+      toast.error('Failed to refresh content');\n+    }\n+  };\n+\n+  // Update the sidebar hover mechanism\n+  const handleSidebarHover = useCallback(\n+    debounce((isHovering: boolean) => {\n+      if (!isSidebarLocked && !isNavigating && !isDropdownOpen) {\n+        if (isHovering || document.activeElement?.closest('.sidebar-content')) {\n+          setIsSidebarCollapsed(false);\n+        } else {\n+          setTimeout(() => {\n+            if (!isDropdownOpen) { // Only collapse if dropdown is closed\n+              setIsSidebarCollapsed(true);\n+            }\n+          }, 300);\n+        }\n+      }\n+    }, 100),\n+    [isSidebarLocked, isNavigating, isDropdownOpen]\n+  );\n+\n+  // Update the sidebar JSX\n+  <div \n+    className={cn(\n+      \"transition-all duration-300 ease-in-out relative\",\n+      isSidebarCollapsed ? \"w-20\" : \"w-80\",\n+      \"flex-shrink-0 group\"\n+    )}\n+    onMouseEnter={() => {\n+      handleSidebarHover(true);\n+      // Immediately expand on mouse enter\n+      if (!isSidebarLocked) {\n+        setIsSidebarCollapsed(false);\n+      }\n+    }}\n+    onMouseLeave={() => {\n+      // Only collapse if not interacting with content\n+      if (!document.activeElement?.closest('.sidebar-content')) {\n+        handleSidebarHover(false);\n+      }\n+    }}\n+    onFocus={() => setIsSidebarCollapsed(false)}\n+  >\n+    <Card className={cn(\n+      \"h-full relative sidebar-content\", // Added sidebar-content class\n+      \"transition-shadow duration-300\",\n+      \"hover:shadow-lg\"\n+    )}>\n+      {/* Rest of sidebar content */}\n+    </Card>\n+  </div>\n+\n+  // Update the sidebar and card styles\n+  return (\n+      <div className=\"container mx-auto py-8\">\n+        {/* Header */}\n+        <div className=\"flex items-center justify-between mb-2\">\n+          {/* ... header content ... */}\n+          <div className=\"flex items-center gap-4\">\n+            <Link href=\"/super-admin\">\n+              <Button variant=\"outline\" className=\"gap-2\">\n+                <ArrowLeft className=\"h-4 w-4\" />\n+                Back\n+              </Button>\n+            </Link>\n+            <div className=\"flex items-center gap-2\">\n+              <h1 className=\"text-2xl font-bold\">Lesson Management</h1>\n+              <Button\n+                variant=\"ghost\"\n+                size=\"icon\"\n+                onClick={handleRefreshLesson}\n+                className=\"ml-2\"\n+                title=\"Refresh lesson content\"\n+              >\n+                <RefreshCw className=\"h-4 w-4\" />\n+              </Button>\n+            </div>\n+            <p className=\"text-sm text-muted-foreground\">Create and manage your educational content</p>\n+          </div>\n+          <div className=\"flex items-center gap-2\">\n+            <Button\n+              variant=\"outline\"\n+              size=\"sm\"\n+              onClick={() => setShowHelpTips(!showHelpTips)}\n+              className=\"gap-2\"\n+            >\n+              {showHelpTips ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n+              {showHelpTips ? 'Hide Tips' : 'Show Tips'}\n+            </Button>\n+          </div>\n+        </div>\n+        \n+        {/* Main content wrapper - Fix the layout here */}\n+        <div className=\"flex gap-6 h-[calc(100vh-200px)]\">\n+          {/* Improved sidebar */}\n+          <div \n+            className={cn(\n+              \"transition-all duration-300 ease-in-out relative\",\n+              isSidebarCollapsed ? \"w-20\" : \"w-80\",\n+              \"flex-shrink-0 group\"\n+            )}\n+            onMouseEnter={() => {\n+              handleSidebarHover(true);\n+              // Immediately expand on mouse enter\n+              if (!isSidebarLocked) {\n+                setIsSidebarCollapsed(false);\n+              }\n+            }}\n+            onMouseLeave={() => {\n+              // Only collapse if not interacting with content\n+              if (!document.activeElement?.closest('.sidebar-content')) {\n+                handleSidebarHover(false);\n+              }\n+            }}\n+            onFocus={() => setIsSidebarCollapsed(false)}\n+          >\n+            <Card className={cn(\n+              \"h-full relative sidebar-content\", // Added sidebar-content class\n+              \"transition-shadow duration-300\",\n+              \"hover:shadow-lg\"\n+            )}>\n+              {/* Lock button - only show after lesson selection */}\n+              {currentLessonId && (\n+                <Button\n+                  variant=\"ghost\"\n+                  size=\"sm\"\n+                  className=\"absolute top-2 right-2 z-10\"\n+                  onClick={() => {\n+                    setIsSidebarLocked(!isSidebarLocked);\n+                    if (!isSidebarLocked) {\n+                      setIsSidebarCollapsed(false);\n+                    }\n+                  }}\n+                >\n+                  {isSidebarLocked ? <Lock className=\"h-4 w-4\" /> : <Unlock className=\"h-4 w-4\" />}\n+                </Button>\n+              )}\n+\n+              {/* Sidebar content with overflow handling */}\n+              <div className={cn(\n+                \"transition-all duration-300 overflow-hidden\",\n+                isSidebarCollapsed ? \"opacity-0\" : \"opacity-100\"\n+              )}>\n+                <Card className=\"h-full\">\n+                  <CardHeader className=\"pb-3\">\n+                    <div className=\"flex items-center justify-between\">\n+                      <CardTitle className=\"text-lg font-semibold\">Content Management</CardTitle>\n+                      <TooltipProvider>\n+                        <Tooltip>\n+                          <TooltipTrigger>\n+                            <HelpCircle className=\"h-4 w-4 text-muted-foreground\" />\n+                          </TooltipTrigger>\n+                          <TooltipContent>\n+                            <p>Manage your educational content here</p>\n+                          </TooltipContent>\n+                        </Tooltip>\n+                      </TooltipProvider>\n+                      </div>\n+                    <CardDescription>Create and manage your lessons</CardDescription>\n+                  </CardHeader>\n+                  <CardContent className=\"space-y-4\">\n+                    {/* View/Edit Mode Toggle */}\n+                    <div className=\"grid grid-cols-2 gap-2 p-1 bg-muted rounded-lg\">\n+                      <Button\n+                        variant={isViewMode ? \"default\" : \"ghost\"}\n+                        size=\"sm\"\n+                        onClick={() => setIsViewMode(true)}\n+                        className=\"w-full\"\n+                      >\n+                        <Eye className=\"h-4 w-4 mr-2\" />\n+                        View\n+                      </Button>\n+                      <Button\n+                        variant={!isViewMode ? \"default\" : \"ghost\"}\n+                        size=\"sm\"\n+                        onClick={() => setIsViewMode(false)}\n+                        className=\"w-full\"\n+                      >\n+                        <Edit className=\"h-4 w-4 mr-2\" />\n+                        Edit\n+                      </Button>\n+                    </div>\n+\n+                    {/* Grade Selection */}\n+                    <div className=\"space-y-2\">\n+                      <div className=\"flex items-center justify-between\">\n+                        <Label htmlFor=\"grade-select\">Grade</Label>\n+                        {isViewMode && (\n+                          <Button variant=\"ghost\" size=\"sm\" onClick={() => setExpandedGrade(expandedGrade ? null : selectedGrade)}>\n+                            {expandedGrade ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n+                          </Button>\n+                        )}\n+                      </div>\n+                      <Select \n+                        value={selectedGradeId || ''}\n+                        onValueChange={handleGradeSelect}\n+                        onOpenChange={(open) => {\n+                          if (open) {\n+                            // Force sidebar to stay open and lock it\n+                            setIsSidebarCollapsed(false);\n+                            setIsSidebarLocked(true);\n+                          }\n+                        }}\n+                      >\n+                        <SelectTrigger \n+                          id=\"grade-select\" \n+                          className=\"w-full\"\n+                          onClick={(e) => {\n+                            e.stopPropagation(); // Prevent event bubbling\n+                            setIsSidebarCollapsed(false);\n+                            setIsSidebarLocked(true);\n+                          }}\n+                        >\n+                          <SelectValue placeholder=\"Select Grade\" />\n+                        </SelectTrigger>\n+                        <SelectContent \n+                          onCloseAutoFocus={(e) => {\n+                            e.preventDefault();\n+                            setIsSidebarLocked(true);\n+                            setIsSidebarCollapsed(false);\n+                          }}\n+                        >\n+                          {grades.map((grade: Grade) => (\n+                            <SelectItem \n+                              key={`grade-${grade.id || 'new'}`} \n+                              value={grade.id || ''}\n+                              onMouseDown={(e) => {\n+                                e.preventDefault();\n+                                e.stopPropagation();\n+                              }}\n+                            >\n+                              <div className=\"flex items-center gap-2\">\n+                                <BookOpen className=\"h-4 w-4 text-primary\" />\n+                                {grade.name}\n+                              </div>\n+                            </SelectItem>\n+                          ))}\n+                        </SelectContent>\n+                      </Select>\n+                      {!isViewMode && (\n+                      <Button \n+                        variant=\"outline\" \n+                        size=\"sm\" \n+                        className=\"w-full gap-2\"\n+                        onClick={() => setModalState({ ...modalState, showAddGrade: false })}\n+                      >\n+                        <Plus className=\"h-4 w-4\" />\n+                        Add New Grade\n+                      </Button>\n+                      )}\n+                    </div>\n+\n+                    {/* Content Tree View in View Mode */}\n+                    {isViewMode && selectedGrade && (\n+  <div className=\"grid grid-cols-1 gap-6 p-6\">\n+    <Card className=\"border-primary/10\">\n+      <CardHeader>\n+        <div className=\"flex items-center justify-between\">\n+          <CardTitle>Content Structure</CardTitle>\n+          <Badge variant=\"outline\" className=\"text-primary\">\n+            {topics.length} Topics\n+          </Badge>\n+        </div>\n+      </CardHeader>\n+      <CardContent className=\"space-y-6\">\n+        {topics.map((topic) => (\n+          <Card \n+            key={topic.id} \n+            className={cn(\n+              \"border-l-4 transition-all duration-200\",\n+              \"border-l-primary/40 hover:border-l-primary\"\n+            )}\n+          >\n+            <CardHeader className=\"py-4\">\n+              <div className=\"flex items-center justify-between\">\n+                <div className=\"flex items-center gap-2\">\n+                  <Layers className=\"h-5 w-5 text-primary\" />\n+                  <div>\n+                    <h3 className=\"font-medium\">{topic.title}</h3>\n+                    <p className=\"text-sm text-muted-foreground\">\n+                      {subtopics.filter(s => s.topic_id === topic.id).length} Subtopics\n+                    </p>\n+                  </div>\n+                </div>\n+                <Button\n+                  variant=\"ghost\"\n+                  size=\"sm\"\n+                  className=\"hover:bg-destructive/10\"\n+                  onClick={async () => {\n+                    const { canDelete, message } = await checkDeletability('topic', topic.id);\n+                    if (!canDelete) {\n+                      toast.error(message);\n+                      return;\n+                    }\n+                    setItemToDelete({\n+                      id: topic.id,\n+                      type: 'topic',\n+                      title: topic.title\n+                    });\n+                    setDeleteDialogOpen(true);\n+                  }}\n+                >\n+                  <Trash className=\"h-4 w-4\" />\n+                </Button>\n+              </div>\n+\n+              <div className=\"mt-4 pl-4 space-y-4\">\n+                {subtopics\n+                  .filter(subtopic => subtopic.topic_id === topic.id)\n+                  .map((subtopic) => {\n+                    const subtopicLessons = lessons.filter(l => l.subtopic_id === subtopic.id);\n+                    const isEmpty = subtopicLessons.length === 0;\n+                    \n+                    return (\n+                      <Card key={subtopic.id} className=\"border-l-2 border-l-primary/20\">\n+                        <CardHeader className=\"py-3\">\n+                          <div className=\"flex items-center justify-between\">\n+                            <div className=\"flex items-center gap-2\">\n+                              <BookOpen className=\"h-4 w-4 text-primary\" />\n+                              <div>\n+                                <h4 className=\"font-medium\">{subtopic.title}</h4>\n+                                <div className=\"flex items-center gap-2\">\n+                                  <Badge variant=\"outline\">\n+                                    {subtopicLessons.length} Lessons\n+                                  </Badge>\n+                                  {isEmpty && (\n+                                    <Badge variant=\"outline\" className=\"text-yellow-500\">\n+                                      Empty\n+                                    </Badge>\n+                                  )}\n+                                </div>\n+                              </div>\n+                            </div>\n+                            <Button\n+                              variant=\"ghost\"\n+                              size=\"sm\"\n+                              className=\"hover:bg-destructive/10\"\n+                              onClick={async () => {\n+                                const { canDelete, message } = await checkDeletability('subtopic', subtopic.id);\n+                                if (!canDelete) {\n+                                  toast.error(message);\n+                                  return;\n+                                }\n+                                setItemToDelete({\n+                                  id: subtopic.id,\n+                                  type: 'subtopic',\n+                                  title: subtopic.title\n+                                });\n+                                setDeleteDialogOpen(true);\n+                              }}\n+                            >\n+                              <Trash className=\"h-4 w-4\" />\n+                            </Button>\n+                          </div>\n+\n+                          <div className=\"pl-4 mt-2 space-y-2\">\n+                            {subtopicLessons.map((lesson) => {\n+                              const questionCount = lesson.questions?.length || 0;\n+                              const isEmpty = questionCount === 0;\n+                              \n+                              return (\n+                                <Card key={lesson.id} className=\"border-l border-l-primary/10\">\n+                                  <CardHeader className=\"py-2\">\n+                                    <div className=\"flex items-center justify-between\">\n+                                      <div className=\"flex items-center gap-2\">\n+                                        <div className=\"flex flex-col\">\n+                                          <span className=\"text-sm font-medium\">\n+                                            {lesson.title}\n+                                          </span>\n+                                          <div className=\"flex items-center gap-2\">\n+                                            <span className=\"text-xs text-muted-foreground\">\n+                                              {lesson.duration || 0} mins • {questionCount} Questions\n+                                            </span>\n+                                            {isEmpty && (\n+                                              <Badge \n+                                                variant=\"outline\" \n+                                                className=\"text-yellow-500\"\n+                                              >\n+                                                Empty\n+                                              </Badge>\n+                                            )}\n+                                          </div>\n+                                        </div>\n+                                      </div>\n+                                      <Button\n+                                        variant=\"ghost\"\n+                                        size=\"sm\"\n+                                        className=\"hover:bg-destructive/10\"\n+                                        onClick={async () => {\n+                                          const { canDelete, message } = await checkDeletability('lesson', lesson.id);\n+                                          if (!canDelete) {\n+                                            toast.error(message);\n+                                            return;\n+                                          }\n+                                          setItemToDelete({\n+                                            id: lesson.id,\n+                                            type: 'lesson',\n+                                            title: lesson.title\n+                                          });\n+                                          setDeleteDialogOpen(true);\n+                                        }}\n+                                      >\n+                                        <Trash className=\"h-4 w-4\" />\n+                                      </Button>\n+                                    </div>\n+                                  </CardHeader>\n+                                </Card>\n+                              );\n+                            })}\n+                          </div>\n+                        </CardHeader>\n+                      </Card>\n+                    );\n+                  })}\n+              </div>\n+            </CardHeader>\n+          </Card>\n+        ))}\n+      </CardContent>\n+    </Card>\n+  </div>\n+)}\n+\n+                    {/* Regular Edit Mode Content */}\n+                    {!isViewMode && (\n+                      <>\n+                        {/* Existing Topic, Subtopic, and Lesson Selection UI */}\n+                      {/* Topic Selection */}\n+                        {selectedGradeId && (\n+                      <div className=\"space-y-2\">\n+                        <div className=\"flex items-center justify-between\">\n+                        <Label htmlFor=\"topic-select\">Topic</Label>\n+                        </div>\n+                        <Select \n+                              value={selectedTopicId || ''} \n+                              onValueChange={handleTopicSelect}\n+                        >\n+                          <SelectTrigger id=\"topic-select\" className=\"w-full\">\n+                            <SelectValue placeholder=\"Select Topic\" />\n+                          </SelectTrigger>\n+                          <SelectContent>\n+                                {topics.map((topic: Topic) => (\n+                                  <SelectItem \n+                                    key={`topic-${topic.id || 'new'}`} \n+                                    value={topic.id || ''}\n+                                  >\n+                                  <div className=\"flex items-center gap-2\">\n+                                  <Layers className=\"h-4 w-4 text-primary\" />\n+                                    {topic.title}\n+                                  </div>\n+                                </SelectItem>\n+                              ))}\n+                          </SelectContent>\n+                        </Select>\n+                        <Button \n+                          variant=\"outline\" \n+                          size=\"sm\" \n+                          className=\"w-full gap-2\"\n+                          onClick={() => setModalState({ ...modalState, showAddTopic: true })}\n+                        >\n+                          <Plus className=\"h-4 w-4\" />\n+                          Add New Topic\n+                        </Button>\n+                      </div>\n+                    )}\n+\n+                    {/* Subtopic Selection */}\n+                        {selectedTopicId && (\n+                      <div className=\"space-y-2\">\n+                        <div className=\"flex items-center justify-between\">\n+                        <Label htmlFor=\"subtopic-select\">Subtopic</Label>\n+                        </div>\n+                        <Select \n+                              value={selectedSubtopicId || ''} \n+                              onValueChange={handleSubtopicSelect}\n+                        >\n+                          <SelectTrigger id=\"subtopic-select\" className=\"w-full\">\n+                            <SelectValue placeholder=\"Select Subtopic\" />\n+                          </SelectTrigger>\n+                          <SelectContent>\n+                                {subtopics\n+                                  .filter(subtopic => subtopic.id)\n+                                  .map((subtopic, index) => (\n+                                    <SelectItem \n+                                      key={subtopic.id || `subtopic-${index}`}\n+                                      value={subtopic.id || ''}\n+                                    >\n+                                      {subtopic.title || 'Untitled Subtopic'}\n+                                    </SelectItem>\n+                                  ))}\n+                          </SelectContent>\n+                        </Select>\n+                        {!isViewMode && (\n+                          <Button \n+                            variant=\"outline\" \n+                            size=\"sm\" \n+                            className=\"w-full gap-2\"\n+                            onClick={() => setModalState({ ...modalState, showAddSubtopic: true })}\n+                          >\n+                            <Plus className=\"h-4 w-4\" />\n+                            Add New Subtopic\n+                          </Button>\n+                        )}\n+                      </div>\n+                    )}\n+\n+                    {/* Lesson Selection */}\n+                        {selectedSubtopicId && (\n+                      <div className=\"space-y-2\">\n+                        <div className=\"flex items-center justify-between\">\n+                          <Label htmlFor=\"lesson-select\">Lesson</Label>\n+                        </div>\n+                          <Select \n+                            value={currentLessonId || ''} \n+                            onValueChange={handleLessonSelect}\n+                            onOpenChange={(open) => {\n+                              setIsDropdownOpen(open);\n+                              if (open) {\n+                                setIsSidebarCollapsed(false);\n+                                setIsSidebarLocked(true);\n+                              } else {\n+                                // Small delay before unlocking to prevent immediate collapse\n+                                setTimeout(() => {\n+                                  setIsSidebarLocked(false);\n+                                }, 100);\n+                              }\n+                            }}\n+                          >\n+                            <SelectTrigger \n+                              id=\"lesson-select\" \n+                              className=\"w-full\"\n+                              onClick={(e) => {\n+                                e.stopPropagation();\n+                                setIsSidebarCollapsed(false);\n+                                setIsSidebarLocked(true);\n+                              }}\n+                            >\n+                              <SelectValue placeholder=\"Select Lesson\" />\n+                            </SelectTrigger>\n+                            <SelectContent>\n+                              {lessons\n+                                .filter((lesson): lesson is Lesson => lesson !== undefined && lesson !== null)\n+                                .map((lesson: Lesson) => (\n+                                  <SelectItem \n+                                    key={`lesson-${lesson.id || 'new'}`} \n+                                    value={lesson.id || ''}\n+                                  >\n+                                    <div className=\"flex items-center gap-2\">\n+                                      <BookOpen className=\"h-4 w-4 text-primary\" />\n+                                      {lesson.title || 'Untitled Lesson'}\n+                                    </div>\n+                                  </SelectItem>\n+                                ))}\n+                            </SelectContent>\n+                          </Select>\n+                    <Button \n+                            variant=\"outline\" \n+                            size=\"sm\" \n+                            className=\"w-full gap-2\"\n+                        onClick={() => setModalState({ ...modalState, showAddLesson: true })}\n+                          >\n+                            <Plus className=\"h-4 w-4\" />\n+                            Add New Lesson\n+                    </Button>\n+                      </div>\n+                        )}\n+                      </>\n+                    )}\n+                  </CardContent>\n+                </Card>\n+              </div>\n+\n+              {/* Collapsed view */}\n+              {isSidebarCollapsed && (\n+                <div className=\"absolute inset-0 flex flex-col items-center pt-12 gap-4\">\n+                  <BookOpen className=\"h-6 w-6 text-muted-foreground\" />\n+                  <div className=\"w-px h-full bg-border\" />\n+                </div>\n+              )}\n+            </Card>\n+          </div>\n+        \n+\n+          {/* Right Content Area */}\n+          <div className=\"flex-1 overflow-y-auto\">\n+            {isNavigating ? (\n+              <div className=\"flex items-center justify-center h-[400px]\">\n+                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n+                <span className=\"ml-3\">Loading...</span>\n+              </div>\n+            ) : (\n+              <>\n+                {!selectedGradeId ? (\n+                  // Question Types Display Section\n+                  <div className=\"space-y-6\">\n+                    <Card>\n+                      <CardHeader>\n+                        <div className=\"flex items-center justify-between\">\n+                          <div>\n+                            <CardTitle className=\"text-xl font-semibold\">Available Question Types</CardTitle>\n+                            <CardDescription>Browse through different question formats and examples</CardDescription>\n+                          </div>\n+                          <TooltipProvider>\n+                            <Tooltip>\n+                              <TooltipTrigger>\n+                                <HelpCircle className=\"h-5 w-5 text-muted-foreground\" />\n+                              </TooltipTrigger>\n+                              <TooltipContent>\n+                                <p>Click on each type to see detailed examples</p>\n+                              </TooltipContent>\n+                            </Tooltip>\n+                          </TooltipProvider>\n+                        </div>\n+                      </CardHeader>\n+                      <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n+                        {Object.entries(QUESTION_TYPES).map(([type, details]) => (\n+                          <Card key={type} className=\"cursor-pointer hover:bg-accent/50 transition-colors\">\n+                            <CardHeader className=\"p-4\">\n+                              <div className=\"flex items-center justify-between mb-2\">\n+                                <Badge variant=\"outline\" className=\"bg-primary/5 text-lg\">\n+                                  {details.label}\n+                                </Badge>\n+                              </div>\n+                              <CardDescription className=\"text-sm\">\n+                                {details.description || 'No description available'}\n+                              </CardDescription>\n+                              <div className=\"mt-4\">\n+                                <div className=\"text-sm font-medium mb-2\">Example:</div>\n+                                <div className=\"p-3 rounded-md bg-muted/50 text-sm\">\n+                                  {type === 'multiple-choice' && (\n+                                    <>\n+                                      <div className=\"font-medium mb-2\">Q: What is the capital of France?</div>\n+                                      <div className=\"space-y-1 pl-4\">\n+                                        <div>A) Paris</div>\n+                                        <div>B) London</div>\n+                                        <div>C) Berlin</div>\n+                                        <div>D) Madrid</div>\n+                                      </div>\n+                                    </>\n+                                  )}\n+                                  {type === 'fill-in-blank' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div>Complete the sentence:</div>\n+                                      <div>The sun rises in the <span className=\"bg-primary/20 px-2 rounded\">_____</span> and sets in the <span className=\"bg-primary/20 px-2 rounded\">_____</span>.</div>\n+                                    </div>\n+                                  )}\n+                                  {type === 'true-false' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div className=\"font-medium\">Statement:</div>\n+                                      <div>The Earth is flat.</div>\n+                                      <div className=\"mt-2\">\n+                                        <Badge variant=\"outline\" className=\"mr-2\">True</Badge>\n+                                        <Badge variant=\"outline\">False</Badge>\n+                                      </div>\n+                                    </div>\n+                                  )}\n+                                  {type === 'matching' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div className=\"font-medium mb-2\">Match the countries with their capitals:</div>\n+                                      <div className=\"grid grid-cols-2 gap-4\">\n+                                        <div>\n+                                          1. France<br />\n+                                          2. Germany<br />\n+                                          3. Spain\n+                                        </div>\n+                                        <div>\n+                                          • Berlin<br />\n+                                          • Paris<br />\n+                                          • Madrid\n+                                        </div>\n+                                      </div>\n+                                    </div>\n+                                  )}\n+                                  {type === 'ordering' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div className=\"font-medium mb-2\">Arrange in chronological order:</div>\n+                                      <div className=\"space-y-1\">\n+                                        <Badge variant=\"outline\" className=\"mr-2\">1</Badge>World War II<br />\n+                                        <Badge variant=\"outline\" className=\"mr-2\">2</Badge>Industrial Revolution<br />\n+                                        <Badge variant=\"outline\" className=\"mr-2\">3</Badge>Renaissance\n+                                      </div>\n+                                    </div>\n+                                  )}\n+                                  {type === 'short-answer' && (\n+                                    <div className=\"space-y-2\">\n+                                      <div className=\"font-medium\">Question:</div>\n+                                      <div>Explain the water cycle in 2-3 sentences.</div>\n+                                      <div className=\"mt-2 p-2 border border-dashed rounded-md border-primary/30\">\n+                                        Answer space\n+                                      </div>\n+                                    </div>\n+                                  )}\n+                                </div>\n+                              </div>\n+                            </CardHeader>\n+                          </Card>\n+                        ))}\n+                      </CardContent>\n+                    </Card>\n+                  </div>\n+                ) : isViewMode ? (\n+                  <div className=\"space-y-6\">\n+                    {selectedGradeId ? (\n+                      <div className=\"grid grid-cols-1 gap-6\">\n+                        {topics.map((topic) => (\n+                          <Card key={topic.id} className=\"border-l-4 border-l-primary\">\n+                            <CardHeader>\n+                              <div className=\"flex items-center justify-between\">\n+                                <h3 className=\"text-lg font-semibold\">{topic.title}</h3>\n+                              </div>\n+                            </CardHeader>\n+                            <CardContent>\n+                              <div className=\"space-y-4\">\n+                                {subtopics\n+                                  .filter(subtopic => subtopic.topic_id === topic.id)\n+                                  .map((subtopic, index) => (\n+                                    <div key={subtopic.id || `subtopic-${index}`} className=\"border-l-2 pl-4\">\n+                                      <h4 className=\"text-md font-medium mb-2\">{subtopic.name || 'Untitled Subtopic'}</h4>\n+                                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n+                                        {lessons\n+                                          .filter(lesson => lesson.subtopic_id === subtopic.id)\n+                                          .map((lesson) => (\n+                                            <Card \n+                                              key={lesson.id} \n+                                              className={cn(\n+                                                \"cursor-pointer transition-all duration-200\",\n+                                                \"hover:shadow-md hover:translate-y-[-2px]\",\n+                                                \"hover:bg-accent/50 hover:border-primary/50\",\n+                                                \"active:translate-y-[0px]\",\n+                                                currentLessonId === lesson.id && \"border-primary bg-accent/50 shadow-md\",\n+                                                \"group\" // Enable group hover effects\n+                                              )}\n+                                              onClick={() => handleLessonSelect(lesson.id)}\n+                                            >\n+                                              <CardHeader className=\"p-4\">\n+                                                <div className=\"flex flex-col gap-2\">\n+                                                  <div className=\"flex items-center justify-between\">\n+                                                    <div className=\"flex items-center gap-2\">\n+                                                      <BookOpen className={cn(\n+                                                        \"h-4 w-4 text-primary\",\n+                                                        \"transition-transform duration-200\",\n+                                                        \"group-hover:scale-110\"\n+                                                      )} />\n+                                                      <span className=\"font-medium\">{lesson.title}</span>\n+                                                    </div>\n+                                                    <Button\n+                                                      variant=\"outline\"\n+                                                      size=\"sm\"\n+                                                      className={cn(\n+                                                        \"opacity-0 group-hover:opacity-100\",\n+                                                        \"transition-all duration-200\",\n+                                                        \"hover:bg-primary hover:text-primary-foreground\"\n+                                                      )}\n+                                                      disabled={!lesson.content || currentLessonId !== lesson.id}\n+                                                      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n+                                                        e.stopPropagation();\n+                                                        window.location.href = `/teacher/lessons/${lesson.id}`;\n+                                                      }}\n+                                                    >\n+                                                      Start Lesson\n+                                                    </Button>\n+                                                  </div>\n+                                                  <div className=\"flex items-center gap-2\">\n+                                                    <Badge variant=\"outline\" className={cn(\n+                                                      \"bg-primary/5\",\n+                                                      \"transition-colors duration-200\",\n+                                                      \"group-hover:bg-primary/10\"\n+                                                    )}>\n+                                                      {lesson.questions?.length || 0} Questions\n+                                                    </Badge>\n+                                                    <Badge variant=\"outline\" className={cn(\n+                                                      \"bg-primary/5\",\n+                                                      \"transition-colors duration-200\",\n+                                                      \"group-hover:bg-primary/10\"\n+                                                    )}>\n+                                                      {lesson.activities?.length || 0} Activities\n+                                                    </Badge>\n+                                                  </div>\n+                                                </div>\n+                                              </CardHeader>\n+                                            </Card>\n+                                          ))}\n+                                      </div>\n+                                    </div>\n+                                  ))}\n+                              </div>\n+                            </CardContent>\n+                          </Card>\n+                        ))}\n+                      </div>\n+                    ) : (\n+                      <div className=\"text-center py-20\">\n+                        <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n+                        <h3 className=\"text-lg font-medium\">Select a Grade</h3>\n+                        <p className=\"text-sm text-muted-foreground\">\n+                          Choose a grade from the left panel to start managing content\n+                        </p>\n+                      </div>\n+                    )}\n+                  </div>\n+                ) : (\n+                  // Edit Mode Content\n+                  <div className=\"space-y-4\">\n+                    {/* Lesson Title */}\n+                    <Card>\n+                      <CardHeader>\n+                        <div className=\"flex items-center justify-between mb-4\">\n+                          <h2 className=\"text-2xl font-bold\">Lesson Content</h2>\n+                                                    <Button\n+                                                      variant=\"outline\"\n+                                                      size=\"sm\"\n+                            onClick={() => setIsContentEditorOpen(true)}\n+                          >\n+                            <Pencil className=\"h-4 w-4 mr-2\" />\n+                            Edit Content\n+                          </Button>\n+                        </div>\n+                      </CardHeader>\n+                      <CardContent className=\"space-y-4\">\n+                        {/* Lesson Title */}\n+                        <div className=\"flex items-center justify-between\">\n+                          <div className=\"space-y-1\">\n+                            <Label>Lesson Title</Label>\n+                            <InlineEdit\n+                              value={lessonTitle}\n+                              onSave={async (newTitle) => {\n+                                setLessonTitle(newTitle);\n+                                await handleSaveLesson();\n+                              }}\n+                              isEditing={isEditingTitle}\n+                              setIsEditing={setIsEditingTitle}\n+                              placeholder=\"Enter lesson title\"\n+                              className=\"text-lg font-medium\"\n+                            />\n+                          </div>\n+                        </div>\n+\n+                        {/* Content Editor and Display */}\n+                        <div className=\"space-y-4\">\n+                          {isContentEditorOpen ? (\n+                            <div className=\"border rounded-lg p-4\">\n+                              <div className=\"mb-4\">\n+                                <Label>Content Heading</Label>\n+                                <InlineEdit\n+                                  value={contentHeading}\n+                                  onSave={(newHeading) => setContentHeading(newHeading)}\n+                                  isEditing={isEditingHeading}\n+                                  setIsEditing={setIsEditingHeading}\n+                                  placeholder=\"Add content heading\"\n+                                  className=\"text-base text-muted-foreground\"\n+                                />\n+                              </div>\n+                              <RichTextEditor\n+                                value={lessonContent}\n+                                onChange={setLessonContent}\n+                                onSave={async (content) => {\n+                                  await handleContentSave(content);\n+                                  setIsContentEditorOpen(false);\n+                                }}\n+                                placeholder=\"Add lesson content here...\"\n+                              />\n+                            </div>\n+                          ) : lessonContent ? (\n+                            <div className=\"prose prose-sm max-w-none\">\n+                              {contentHeading && (\n+                                <h3 className=\"text-lg font-semibold mb-2\">{contentHeading}</h3>\n+                              )}\n+                              <div dangerouslySetInnerHTML={{ __html: lessonContent }} />\n+                            </div>\n+                          ) : (\n+                            <div className=\"text-center py-8 text-muted-foreground\">\n+                              Click 'Edit Content' to add lesson content\n+                            </div>\n+                          )}\n+                        </div>\n+                      </CardContent>\n+                    </Card>\n+\n+                    {/* Tabs */}\n+                    <Tabs defaultValue=\"questions\" className=\"mt-6\">\n+                    <TabsList className=\"grid w-full grid-cols-2\">\n+                        <TabsTrigger value=\"questions\">\n+                          <MessageSquare className=\"h-4 w-4 mr-2\" />\n+                        Questions\n+                      </TabsTrigger>\n+                        <TabsTrigger value=\"activities\">\n+                          <ActivityIcon className=\"h-4 w-4 mr-2\" />\n+                        Activities\n+                      </TabsTrigger>\n+                    </TabsList>\n+\n+                      {/* Questions Tab */}\n+                      <TabsContent value=\"questions\" className=\"space-y-4\">\n+                      <CardHeader>\n+                          <CardDescription>Add and manage questions for this lesson</CardDescription>\n+                      </CardHeader>\n+                        {questions.map((question, index) => (\n+                          <Card key={index} className={cn(\n+                            \"relative border-l-4 transition-colors duration-200\",\n+                            expandedQuestion === index ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\n+                          )}>\n+                            <CardHeader className=\"pb-3\">\n+                              <div className=\"flex items-center justify-between gap-4\">\n+                                <div className=\"flex items-center gap-3 min-w-0 flex-1\">\n+                                  <div className=\"flex items-center gap-2 flex-shrink-0\">\n+                                    <span className=\"px-2 py-1 bg-primary/10 rounded-md text-sm font-semibold text-primary whitespace-nowrap\">\n+                                      Q {index + 1}\n+                                    </span>\n+                                    <Badge variant=\"outline\" className=\"whitespace-nowrap\">\n+                                      {QUESTION_TYPES[question.type as keyof typeof QUESTION_TYPES]?.label || question.type}\n+                                    </Badge>\n+                                    {question.isDraft && (\n+                                      <Badge variant=\"secondary\" className=\"whitespace-nowrap\">Draft</Badge>\n+                                )}\n+                                  </div>\n+                                      {expandedQuestion !== index && (\n+                                        <div className=\"text-sm text-muted-foreground truncate\">\n+                                          {question.title || 'No question text'} - {question.data?.content || 'No question texts'}\n+                                        </div>\n+                                      )}\n+                                    </div>\n+                                    <div className=\"flex items-center gap-2 flex-shrink-0\">\n+                                      <Button\n+                                        variant=\"ghost\"\n+                                        size=\"sm\"\n+                                        onClick={() => handleQuestionExpand(index)}\n+                                      >\n+                                        {expandedQuestion === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n+                                      </Button>\n+                                      <Button\n+                                        variant=\"ghost\"\n+                                        size=\"sm\"\n+                                        onClick={() => handleRemoveQuestion(index)}\n+                                      >\n+                                        <Trash2 className=\"h-4 w-4 text-destructive\" />\n+                                      </Button>\n+                                    </div>\n+                                  </div>\n+                                </CardHeader>\n+                                {expandedQuestion === index && (\n+                                  <CardContent>\n+                                    <QuestionForm\n+                                      key={index}\n+                                      question={{ \n+                                        ...question, \n+                                        lesson_id: currentLessonId || '',\n+                                        type: isValidQuestionType(question.type) ? question.type : 'speaking',\n+                                        data: {\n+                                          prompt: question.data?.prompt ?? '',\n+                                          teacher_script: question.data?.teacher_script ?? '',\n+                                          followup_prompt: question.data?.followup_prompt ?? [],\n+                                          sample_answer: question.data?.sample_answer ?? '',\n+                                          \n+                                        } \n+                                      }}\n+                                      index={index}\n+                                      onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\n+                                        await handleUpdateQuestion(index, {\n+                                          ...updatedQuestion,\n+                                          data: {\n+                                            prompt: updatedQuestion.data?.prompt ?? '',\n+                                            teacher_script: updatedQuestion.data?.teacher_script ?? '',\n+                                            followup_prompt: updatedQuestion.data?.followup_prompt ?? [],\n+                                            sample_answer: updatedQuestion.data?.sample_answer ?? '',\n+                                            metadata: updatedQuestion.metadata ?? {},\n+                                            },\n+                                            correct_answer: updatedQuestion.correct_answer ?? '',\n+                                            content: updatedQuestion.content ?? ''  // Add default value\n+                                        });\n+                                      }}\n+                                      onRemove={handleRemoveQuestion}\n+                                      onAddExercisePrompt={handleAddExercisePrompt}\n+                                      onRemoveExercisePrompt={handleRemoveExercisePrompt}\n+                                      onExercisePromptChange={handleExercisePromptChange}\n+                                    /><Button \n+                                    size=\"sm\"\n+                                    variant=\"outline\"\n+                                    onClick={() => handleSaveQuestion(question, index)}\n+                                    className=\"ml-2\"\n+                                  >\n+                                    {questionSaveStatuses.find(s => s.id === question.id)?.status === 'saving' ? (\n+                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n+                                    ) : (\n+                                      <Save className=\"h-4 w-4 mr-2\" />\n+                                    )}\n+                                    Save Question\n+                                                    </Button>\n+                                    {/* Exercise Prompts with Save Buttons */}\n+                                    {question.exercisePrompts?.map((prompt, promptIndex) => (\n+                                      <div key={`${question.id}-prompt-${promptIndex}`} className=\"mt-4\"> {/* Updated key */}\n+                                        <div className=\"flex items-center justify-between mb-2\">\n+                                          <h4 className=\"text-sm font-medium\">Exercise Prompt {promptIndex + 1}</h4>\n+                                          <div className=\"flex items-center gap-2\">\n+                                            <TooltipProvider>\n+                                              <Tooltip>\n+                                                <TooltipTrigger asChild>\n+                                                  <Button\n+                                                    size=\"sm\"\n+                                                    variant=\"outline\"\n+                                                    onClick={() => handleSavePrompt(question.id, prompt, promptIndex)}\n+                                                    disabled={promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving'}\n+                                                  >\n+                                                    {promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving' ? (\n+                                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n+                                                    ) : (\n+                                                      <Save className=\"h-4 w-4 mr-2\" />\n+                                                    )}\n+                                                    Save Prompt\n+                                                  </Button>\n+                                                </TooltipTrigger>\n+                                                <TooltipContent>\n+                                                  {`Status: ${promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}`}\n+                                                </TooltipContent>\n+                                              </Tooltip>\n+                                            </TooltipProvider>\n+                                            <Badge variant={\n+                                              promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saved'\n+                                                ? 'secondary'\n+                                                : promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'error'\n+                                                ? 'destructive'\n+                                                : 'default'\n+                                            }>\n+                                              {promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}\n+                                            </Badge>\n+                                                  </div>\n+                                        </div>\n+                                        <ExercisePromptCard\n+                                          key={prompt.id} // Add a unique key here\n+                                          prompt={prompt}\n+                                          promptIndex={promptIndex}\n+                                          onRemove={() => handleRemoveExercisePrompt(index, promptIndex)}\n+                                          onUpdate={(updatedPrompt: ExercisePrompt) => {\n+                                            // Prevent duplicate updates\n+                                            if (updatedPrompt.id === prompt.id) {\n+                                              handleExercisePromptChange(index, promptIndex, updatedPrompt);\n+                                            }\n+                                          }}\n+                                        />\n+                                      </div>\n+                                    ))}\n+                                  </CardContent>\n+                                )}\n+                              </Card>\n+                            ))}\n+\n+                            {/* Add Question Button */}\n+                            <div className=\"flex items-center justify-between\">\n+                              <QuestionTypeSelect \n+                                value={selectedQuestionType} \n+                                onChange={handleQuestionTypeChange}\n+                              />\n+                                        <Button\n+                                          onClick={handleAddQuestion}\n+                                          disabled={!selectedQuestionType}\n+                                        >\n+                                <Plus className=\"h-4 w-4 mr-2\" />\n+                                          Add Question\n+                                        </Button>\n+                                      </div>\n+                      </TabsContent>\n+\n+                      {/* Activities Tab */}\n+                      <TabsContent value=\"activities\" className=\"space-y-4\">\n+                      <CardHeader>\n+                          <CardDescription>Add and manage activities for this lesson</CardDescription>\n+                      </CardHeader>\n+                        {activities.map((activity, index) => (\n+                          <Card key={index}>\n+                            <CardHeader className=\"pb-3\">\n+                              <div className=\"flex items-center justify-between\">\n+                                  <div className=\"flex items-center gap-2\">\n+                                  <Badge variant=\"outline\">Activity {index + 1}</Badge>\n+                                  </div>\n+                                <div className=\"flex items-center gap-2\">\n+                                  <Button\n+                                    variant=\"ghost\"\n+                                    size=\"sm\"\n+                                    onClick={() => handleActivityExpand(index)}\n+                                  >\n+                                    {expandedActivity === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n+                                  </Button>\n+                                  <Button\n+                                    variant=\"ghost\"\n+                                    size=\"sm\"\n+                                    onClick={() => handleRemoveActivity(index)}\n+                                  >\n+                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\n+                                  </Button>\n+                                </div>\n+                              </div>\n+                            </CardHeader>\n+                            {expandedActivity === index && (\n+                              <CardContent>\n+                                <div className=\"space-y-4\">\n+                                  <div className=\"space-y-2\">\n+                                    <Label>Instructions</Label>\n+                                    <Textarea\n+                                      value={activity.instructions}\n+                                      onChange={(e) => handleUpdateActivity(index, {\n+                                        ...activity,\n+                                        instructions: e.target.value\n+                                      })}\n+                                      placeholder=\"Enter activity instructions\"\n+                                    />\n+                                  </div>\n+                                    \n+                                    {/* Media Section */}\n+                                    <div className=\"space-y-2\">\n+                                      <Label>Media</Label>\n+                                      {activity.media?.map((media, mediaIndex) => (\n+                                        <div key={mediaIndex} className=\"flex items-center gap-2\">\n+                                          <Input\n+                                            value={media.url}\n+                                            onChange={(e) => {\n+                                              const updatedMedia = [...(activity.media || [])];\n+                                              updatedMedia[mediaIndex] = {\n+                                                type: media.type,\n+                                                url: e.target.value\n+                                              };\n+                                              handleUpdateActivity(index, {\n+                                                ...activity,\n+                                                media: updatedMedia\n+                                              });\n+                                            }}\n+                                            placeholder=\"Media URL\"\n+                                          />\n+                                          <Select\n+                                            value={media.type}\n+                                            onValueChange={(value) => {\n+                                              const updatedMedia = [...(activity.media || [])];\n+                                              updatedMedia[mediaIndex] = {\n+                                                type: value as 'image' | 'gif' | 'video',\n+                                                url: media.url\n+                                              };\n+                                              handleUpdateActivity(index, {\n+                                                ...activity,\n+                                                media: updatedMedia\n+                                              });\n+                                            }}\n+                                          >\n+                                            <SelectTrigger className=\"w-[120px]\">\n+                                              <SelectValue placeholder=\"Type\" />\n+                                            </SelectTrigger>\n+                                            <SelectContent>\n+                                              <SelectItem value=\"image\">Image</SelectItem>\n+                                              <SelectItem value=\"gif\">GIF</SelectItem>\n+                                              <SelectItem value=\"video\">Video</SelectItem>\n+                                            </SelectContent>\n+                                          </Select>\n+                                <Button\n+                                            variant=\"ghost\"\n+                                            size=\"sm\"\n+                                  onClick={() => {\n+                                              const updatedMedia = (activity.media || []).filter((_, i) => i !== mediaIndex);\n+                                              handleUpdateActivity(index, {\n+                                                ...activity,\n+                                                media: updatedMedia\n+                                          });\n+                                          }}\n+                                  >\n+                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\n+                                  </Button>\n+                                </div>\n+                                        ))}\n+                                  <Button\n+                                    variant=\"outline\"\n+                                    size=\"sm\"\n+                                            onClick={() => {\n+                                              handleUpdateActivity(index, {\n+                                                ...activity,\n+                                                media: [\n+                                                  ...(activity.media || [])  ,\n+                                                  { url: '', type: 'image' }\n+                                                ]\n+                                              });\n+                                            }}\n+                                  >\n+                                    <Plus className=\"h-4 w-4 mr-2\" />\n+                                            Add Media\n+                                  </Button>\n+                                </div>\n+                                      </div>\n+                                    </CardContent>\n+                                  )}\n+                                </Card>\n+                              ))}\n+\n+                              {/* Add Activity Button */}\n+                              <Button\n+                                onClick={handleAddActivity}\n+                                className=\"w-full\"\n+                              >\n+                                <Plus className=\"h-4 w-4 mr-2\" />\n+                                Add Activity\n+                              </Button>\n+                          </TabsContent>\n+                        </Tabs>\n+                        </div>\n+                )}\n+\n+                    {/* Floating Save Button */}\n+                    <div className=\"fixed bottom-8 right-8 flex items-center gap-4\">\n+                      {saveProgress !== 'idle' && (\n+                        <div className={cn(\n+                          \"flex items-center gap-2 rounded-lg px-4 py-2 shadow-lg\",\n+                          {\n+                            \"bg-background border\": saveProgress === 'saving',\n+                            \"bg-green-500 text-white\": saveProgress === 'saved',\n+                            \"bg-destructive text-destructive-foreground\": saveProgress === 'error'\n+                          }\n+                        )}>\n+                          {saveProgress === 'saving' && (\n+                            <>\n+                              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n+                              <span className=\"text-sm\">Saving changes...</span>\n+                            </>\n+                          )}\n+                          {saveProgress === 'saved' && (\n+                            <>\n+                              <Check className=\"h-4 w-4\" />\n+                              <span className=\"text-sm\">Changes saved</span>\n+                            </>\n+                          )}\n+                          {saveProgress === 'error' && (\n+                            <>\n+                              <X className=\"h-4 w-4\" />\n+                              <span className=\"text-sm\">Error saving changes</span>\n+                            </>\n+                          )}\n+                        </div>\n+                      )}\n+                      <Button\n+                        onClick={handleSaveLesson}\n+                        disabled={saveProgress === 'saving'}\n+                        className=\"shadow-lg\"\n+                      >\n+                        {saveProgress === 'saving' ? (\n+                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n+                        ) : (\n+                          <Save className=\"h-4 w-4 mr-2\" />\n+                        )}\n+                        {saveProgress === 'saving' ? 'Saving...' : 'Save Lesson'}\n+                      </Button>\n+                    </div>\n+                  </>\n+            )}\n+    </div>\n+    \n+\n+      {/* Floating Save Button */}\n+      {selectedSubtopicId && currentLessonId && (\n+          <div className=\"fixed bottom-4 right-4 flex flex-col gap-2\">\n+            <TooltipProvider>\n+              <Tooltip>\n+                <TooltipTrigger asChild>\n+                  <Button\n+                    size=\"icon\"\n+                    className=\"rounded-full h-12 w-12 shadow-lg\"\n+                    onClick={handleSaveLesson}\n+                    disabled={!selectedSubtopicId || !lessonTitle || questions.length === 0}\n+                  >\n+                    <Save className=\"h-6 w-6\" />\n+                  </Button>\n+                </TooltipTrigger>\n+                <TooltipContent>\n+                  <p>Save Lesson (Ctrl+S)</p>\n+                </TooltipContent>\n+              </Tooltip>\n+            </TooltipProvider>\n+          </div>\n+        )}\n+        <SaveFeedback />\n+\n+        {/* Add Grade Modal - do not delete */}\n+        {/* {modalState.showAddGrade && (\n+          <Dialog \n+            open={modalState.showAddGrade} \n+            onOpenChange={(open) => handleModalStateChange('showAddGrade', open)}\n+          >\n+            <DialogContent \n+              className=\"sm:max-w-[425px]\"\n+              onEscapeKeyDown={cleanupModalState}\n+              onPointerDownOutside={cleanupModalState}\n+            >\n+              <DialogHeader>\n+                <DialogTitle>Add New Grade</DialogTitle>\n+                <DialogDescription>Enter the details for the new grade.</DialogDescription>\n+              </DialogHeader>\n+              <div className=\"space-y-4 py-4\">\n+                <div className=\"space-y-2\">\n+                  <Label htmlFor=\"grade-name\">Grade Name</Label>\n+                  <Input\n+                    id=\"grade-name\"\n+                    value={newItemData.name}\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n+                    placeholder=\"Enter grade name\"\n+                  />\n+      </div>\n+              </div>\n+              <DialogFooter>\n+                <Button variant=\"outline\" onClick={() => {\n+                  setModalState({ ...modalState, showAddGrade: false });\n+                  setNewItemData({ name: '', description: '' });\n+                }}>\n+                  Cancel\n+                </Button>\n+                <Button onClick={handleCreateGrade} disabled={!newItemData.name}>Create Grade</Button>\n+              </DialogFooter>\n+            </DialogContent>\n+          </Dialog>\n+        )} */}\n+\n+        {/* Add Topic Modal */}\n+        {modalState.showAddTopic && (\n+          <Dialog \n+            open={modalState.showAddTopic} \n+            onOpenChange={(open) => handleModalStateChange('showAddTopic', open)}\n+          >\n+            <DialogContent \n+              className=\"sm:max-w-[425px]\"\n+              onEscapeKeyDown={cleanupModalState}\n+              onPointerDownOutside={cleanupModalState}\n+            >\n+              <DialogHeader>\n+                <DialogTitle>Add New Topic</DialogTitle>\n+                <DialogDescription>Enter the details for the new topic.</DialogDescription>\n+              </DialogHeader>\n+              <div className=\"space-y-4 py-4\">\n+                <div className=\"space-y-2\">\n+                  <Label htmlFor=\"topic-name\">Topic Name</Label>\n+                  <Input\n+                    id=\"topic-name\"\n+                    value={newItemData.name}\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n+                    placeholder=\"Enter topic name\"\n+                  />\n+                </div>\n+              </div>\n+              <DialogFooter>\n+                <Button variant=\"outline\" onClick={() => {\n+                  setModalState({ ...modalState, showAddTopic: false });\n+                  setNewItemData({ name: '', description: '' });\n+                }}>\n+                  Cancel\n+                </Button>\n+                <Button onClick={handleCreateTopic} disabled={!newItemData.name}>Create Topic</Button>\n+              </DialogFooter>\n+            </DialogContent>\n+          </Dialog>\n+        )}\n+\n+        {/* Add Subtopic Modal */}\n+        {modalState.showAddSubtopic && (\n+          <Dialog \n+            open={modalState.showAddSubtopic} \n+            onOpenChange={(open) => handleModalStateChange('showAddSubtopic', open)}\n+          >\n+            <DialogContent \n+              className=\"sm:max-w-[425px]\"\n+              onEscapeKeyDown={cleanupModalState}\n+              onPointerDownOutside={cleanupModalState}\n+            >\n+              <DialogHeader>\n+                <DialogTitle>Add New Subtopic</DialogTitle>\n+                <DialogDescription>Enter the details for the new subtopic.</DialogDescription>\n+              </DialogHeader>\n+              <div className=\"space-y-4 py-4\">\n+                <div className=\"space-y-2\">\n+                  <Label htmlFor=\"subtopic-name\">Subtopic Name</Label>\n+                  <Input\n+                    id=\"subtopic-name\"\n+                    value={newItemData.name}\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n+                    placeholder=\"Enter subtopic name\"\n+                  />\n+                </div>\n+              </div>\n+              <DialogFooter>\n+                <Button variant=\"outline\" onClick={() => {\n+                  setModalState({ ...modalState, showAddSubtopic: false });\n+                  setNewItemData({ name: '', description: '' });\n+                }}>\n+                  Cancel\n+                </Button>\n+                <Button onClick={() => handleCreateSubtopic({ title: newItemData.name })} disabled={!newItemData.name}>Create Subtopic</Button>\n+              </DialogFooter>\n+            </DialogContent>\n+          </Dialog>\n+        )}\n+\n+        {/* Add Lesson Modal */}\n+        {modalState.showAddLesson && (\n+          <Dialog \n+            open={modalState.showAddLesson} \n+            onOpenChange={(open) => handleModalStateChange('showAddLesson', open)}\n+          >\n+            <DialogContent \n+              className=\"sm:max-w-[425px]\"\n+              onEscapeKeyDown={cleanupModalState}\n+              onPointerDownOutside={cleanupModalState}\n+            >\n+              <DialogHeader>\n+                <DialogTitle>Add New Lesson</DialogTitle>\n+                <DialogDescription>Enter the details for the new lesson.</DialogDescription>\n+              </DialogHeader>\n+              <div className=\"space-y-4 py-4\">\n+                <div className=\"space-y-2\">\n+                  <Label htmlFor=\"lesson-name\">Lesson Title</Label>\n+                  <Input\n+                    id=\"lesson-name\"\n+                    value={newItemData.name}\n+                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\n+                    placeholder=\"Enter lesson title\"\n+                  />\n+                </div>\n+              </div>\n+              <DialogFooter>\n+                <Button variant=\"outline\" onClick={() => {\n+                  setModalState({ ...modalState, showAddLesson: false });\n+                  setNewItemData({ name: '', description: '' });\n+                }}>\n+                  Cancel\n+                </Button>\n+                <Button onClick={handleCreateLesson} disabled={!newItemData.name}>Create Lesson</Button>\n+              </DialogFooter>\n+            </DialogContent>\n+          </Dialog>\n+        )}\n+      </div>\n+      <Toaster />\n+      </div>\n+  );\n+} \n\\ No newline at end of file\n"
                }
            ],
            "date": 1739045874777,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport { useState, useCallback, useEffect, useRef } from 'react';\r\nimport { toast } from 'sonner';\r\nimport { Toaster } from 'sonner';\r\nimport Link from 'next/link';\r\nimport {  Activity as ActivityIcon,  ArrowLeft,  BookOpen,  ChevronDown,  ChevronRight,  Check,  Edit,  Eye,  EyeOff,  HelpCircle,  Layers,  List,  MessageSquare,  Plus,  Save,  Trash as Trash2, X, Pencil, Lock, Unlock, RefreshCw } from 'lucide-react';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\r\nimport { cn } from '@/lib/utils';\r\nimport { API_BASE_URL, QUESTION_TYPES, isQuestionType } from './constants';\r\nimport { ExercisePrompt, Lesson } from './types';\r\nimport { QuestionFormProps, ExercisePromptCardProps, Activity, Grade, Topic, Subtopic as SubTopic } from './types';\r\nimport { QuestionForm } from './components/question-form';\r\nimport { ExercisePromptCard } from './components/exercise-prompt-card';\r\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\r\nimport { supabase } from '@/lib/supabase';\r\nimport { useContentStore } from '@/lib/content/store';\r\nimport { contentService } from '@/lib/content/ContentService';\r\nimport { MediaPreview } from '@/components/ui/media-preview';\r\nimport { QuestionTypeSelect } from './components/question-type-select';\r\nimport { RichTextEditor } from '@/components/ui/rich-text-editor';\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n} from \"@/components/ui/alert-dialog\";\r\nimport { debounce } from 'lodash';\r\nimport { PostgrestError } from '@supabase/supabase-js';\r\nimport { Question as ContentQuestion } from './types';  // Import the specific type\r\n\r\n\r\n// Update the API endpoint to match your backend route\r\nconst API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\r\n\r\ninterface QuestionTypeSelectProps {\r\n  value: string;\r\n  onValueChange: (value: string) => void;\r\n}\r\n\r\n// Add metadata type\r\ninterface LessonMetadata {\r\n  lastEdited?: string;\r\n  version?: number;\r\n  tags?: string[];\r\n  status?: 'draft' | 'published';\r\n  authorId?: string;\r\n  duration?: number;\r\n  transcript?: string;\r\n}\r\n\r\ntype ContentType = 'html' | 'markdown' | 'rich-text' | 'text' | 'json';\r\n\r\ninterface LessonContent {\r\n  id: string;\r\n  lesson_id: string;\r\n  content: any[];\r\n  metadata: {\r\n    lastEdited?: string;\r\n    version?: number;\r\n    status?: 'draft' | 'published';\r\n    authorId?: string;\r\n  };\r\n  content_type: string;\r\n  order_index: number;\r\n  updated_at: string;\r\n  user_id: string;\r\n}\r\n\r\ninterface InlineEditProps {\r\n  value: string;\r\n  onSave: (value: string) => void;\r\n  isEditing: boolean;\r\n  setIsEditing: (value: boolean) => void;\r\n  placeholder?: string;\r\n  className?: string;\r\n}\r\n\r\n// Add validation interface\r\ninterface QuestionValidation {\r\n  isValid: boolean;\r\n  message: string;\r\n}\r\n\r\n// Add this type validation helper\r\nconst getQuestionTypeFields = (type: string) => {\r\n  switch (type) {\r\n    case 'multipleChoice':\r\n      return {\r\n        required: ['prompt', 'options', 'correctAnswer'],\r\n        fields: {\r\n          prompt: '',\r\n          options: [],\r\n          correctAnswer: '',\r\n          teacherScript: '',\r\n          explanation: ''\r\n        }\r\n      };\r\n    case 'fillInBlank':\r\n      return {\r\n        required: ['prompt', 'blanks'],\r\n        fields: {\r\n          prompt: '',\r\n          blanks: [],\r\n          teacherScript: '',\r\n          explanation: ''\r\n        }\r\n      };\r\n    case 'trueFalse':\r\n      return {\r\n        required: ['prompt', 'correctAnswer'],\r\n        fields: {\r\n          prompt: '',\r\n          correctAnswer: null,\r\n          teacherScript: '',\r\n          explanation: ''\r\n        }\r\n      };\r\n    case 'matching':\r\n      return {\r\n        required: ['prompt', 'pairs'],\r\n        fields: {\r\n          prompt: '',\r\n          pairs: [],\r\n          teacherScript: '',\r\n          explanation: ''\r\n        }\r\n      };\r\n    case 'ordering':\r\n      return {\r\n        required: ['prompt', 'items'],\r\n        fields: {\r\n          prompt: '',\r\n          items: [],\r\n          correctOrder: [],\r\n          teacherScript: '',\r\n          explanation: ''\r\n        }\r\n      };\r\n    case 'shortAnswer':\r\n      return {\r\n        required: ['prompt', 'sampleAnswer'],\r\n        fields: {\r\n          prompt: '',\r\n          sampleAnswer: '',\r\n          teacherScript: '',\r\n          explanation: '',\r\n          keywords: []\r\n        }\r\n      };\r\n    case 'speaking':\r\n      return {\r\n        required: ['prompt', 'sampleAnswer'],\r\n        fields: {\r\n          prompt: '',\r\n          sampleAnswer: '',\r\n          teacherScript: '',\r\n          audioPrompt: '',\r\n          pronunciation: ''\r\n        }\r\n      };\r\n    case 'listening':\r\n      return {\r\n        required: ['prompt', 'audioContent'],\r\n        fields: {\r\n          prompt: '',\r\n          audioContent: '',\r\n          transcript: '',\r\n          teacherScript: '',\r\n          comprehensionQuestions: []\r\n        }\r\n      };\r\n    case 'listenAndRepeat':\r\n      return {\r\n        required: ['prompt', 'audioContent'],\r\n        fields: {\r\n          prompt: '',\r\n          audioContent: '',\r\n          targetPhrase: '',\r\n          teacherScript: '',\r\n          pronunciation: ''\r\n        }\r\n      };\r\n    default:\r\n      return {\r\n        required: ['prompt'],\r\n        fields: {\r\n          prompt: '',\r\n          teacherScript: ''\r\n        }\r\n      };\r\n  }\r\n}\r\n\r\ninterface SaveStatus {\r\n  id: string;\r\n  status: 'draft' | 'saved' | 'saving' | 'error';\r\n  lastSaved?: string;\r\n}\r\n\r\ninterface Question {\r\n  id: string;\r\n  type: string;\r\n  lesson_id: string;\r\n  title: string;\r\n  metadata: Record<string, any>;\r\n  data: Record<string, any>; // This allows dynamic field access\r\n  exercisePrompts: ExercisePrompt[];\r\n  isDraft?: boolean;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// Update handleAddQuestion\r\n\r\n\r\n// Update validateQuestion\r\nconst validateQuestion = (question: Question): QuestionValidation => {\r\n  const { required } = getQuestionTypeFields(question.type);\r\n  const missingFields = required.filter(field => {\r\n    const value = question.data?.[field];\r\n    return !value || \r\n      (Array.isArray(value) && value.length === 0) || \r\n      (typeof value === 'string' && !value.trim());\r\n  });\r\n\r\n  if (missingFields.length > 0) {\r\n    return {\r\n      isValid: false,\r\n      message: `Missing required fields: ${missingFields.join(', ')}`\r\n    };\r\n  }\r\n\r\n  return { isValid: true, message: '' };\r\n};\r\n\r\nexport default function LessonManagementPage() {\r\n  // State declarations\r\n  \r\n  const [selectedGradeId, setSelectedGradeId] = useState<string | null>(null);\r\n  const [selectedTopicId, setSelectedTopicId] = useState<string | null>(null);\r\n  const [selectedSubtopicId, setSelectedSubtopicId] = useState<string | null>(null);\r\n  const [lessonTitle, setLessonTitle] = useState<string>('');\r\n  const [currentLessonId, setCurrentLessonId] = useState<string | null>(null);\r\n  const [questions, setQuestions] = useState<Question[]>([]);\r\n  const [saveProgress, setSaveProgress] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');\r\n  const [activities, setActivities] = useState<Activity[]>([]);\r\n  const [localBuffer, setLocalBuffer] = useState<{ timestamp: number; data: any } | null>(null);\r\n  const [lastSavedToServer, setLastSavedToServer] = useState<number>(Date.now());\r\n  const [selectedQuestionType, setSelectedQuestionType] = useState<string>('');\r\n  const [editingQuestionIndex, setEditingQuestionIndex] = useState<number | null>(null);\r\n  const [showHelpTips, setShowHelpTips] = useState(true);\r\n  const [isNavigating, setIsNavigating] = useState(false);\r\n  const [lessons, setLessons] = useState<Lesson[]>([]);\r\n  const [grades, setGrades] = useState<Grade[]>([]);\r\n  const [topics, setTopics] = useState<Topic[]>([]);\r\n  const [subtopics, setSubtopics] = useState<SubTopic[]>([]);\r\n  const [contentHeading, setContentHeading] = useState<string>('');\r\n    // Add with your other state declarations\r\n  const [isContentExpanded, setIsContentExpanded] = useState<boolean>(false);\r\n  const [modalState, setModalState] = useState({\r\n    showAddGrade: false,\r\n    showAddTopic: false,\r\n    showAddSubtopic: false,\r\n    showAddLesson: false\r\n  });\r\n  const [isViewMode, setIsViewMode] = useState<boolean>(true);\r\n  const [expandedGrade, setExpandedGrade] = useState<string | null>(null);\r\n  const [expandedTopic, setExpandedTopic] = useState<string | null>(null);\r\n  const [expandedSubtopic, setExpandedSubtopic] = useState<string | null>(null);\r\n  const [expandedQuestion, setExpandedQuestion] = useState<number | null>(null);\r\n  const [expandedActivity, setExpandedActivity] = useState<number | null>(null);\r\n  const [newItemData, setNewItemData] = useState({\r\n    name: '',\r\n    description: ''\r\n  });\r\n  const [lessonContent, setLessonContent] = useState<string>('');\r\n  const [isContentEditorOpen, setIsContentEditorOpen] = useState(false);\r\n  const [isEditingTitle, setIsEditingTitle] = useState<boolean>(false);\r\n  const [isEditingHeading, setIsEditingHeading] = useState<boolean>(false);\r\n  const [isEditingDescription, setIsEditingDescription] = useState<boolean>(false);\r\n  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\r\n  const [isSidebarLocked, setIsSidebarLocked] = useState(true);\r\n  const [alertDialogState, setAlertDialogState] = useState<{\r\n    isOpen: boolean;\r\n    title: string;\r\n    message: string;\r\n    onConfirm: (value?: unknown) => void;\r\n  }>({\r\n    isOpen: false,\r\n    title: '',\r\n    message: '',\r\n    onConfirm: () => {}\r\n  });\r\n\r\n  const { \r\n    selectedGrade,\r\n    setSelectedGrade,\r\n    selectedTopic,\r\n    setSelectedTopic,\r\n    selectedSubtopic,\r\n    setSelectedSubtopic,\r\n    selectedLesson,\r\n    setSelectedLesson\r\n  } = useContentStore();\r\n\r\n  // Add new state for tracking save status\r\n  interface SaveStatus {\r\n    id: string;\r\n    status: 'draft' | 'saved' | 'saving' | 'error';\r\n    lastSaved?: string;\r\n  }\r\n\r\n  const [questionSaveStatuses, setQuestionSaveStatuses] = useState<Array<{\r\n    id: string;\r\n    status: 'idle' | 'saving' | 'saved' | 'error' | 'draft';\r\n  }>>([]);\r\n  const [promptSaveStatuses, setPromptSaveStatuses] = useState<SaveStatus[]>([]);\r\n\r\n  // Event handlers\r\n  const handleQuestionTypeChange = useCallback((type: string) => {\r\n    if (isQuestionType(type)) {\r\n      setSelectedQuestionType(type);\r\n    }\r\n  }, []);\r\n\r\n  const handleAddQuestion = useCallback(() => {\r\n    if (!selectedQuestionType || !isQuestionType(selectedQuestionType)) return;\r\n\r\n    const defaultData = QUESTION_TYPES[selectedQuestionType].defaultData;\r\n    const newQuestion: Question = {\r\n      id: crypto.randomUUID(),\r\n      type: selectedQuestionType,\r\n      data: {},\r\n      title: 'New Question',\r\n      lesson_id: currentLessonId || '',\r\n      metadata: {},\r\n      // data: {\r\n      //   ...defaultData,\r\n      //   prompt: '',\r\n      //   teacherScript: ''\r\n      // },\r\n      exercisePrompts: [],\r\n      isDraft: true\r\n    };\r\n\r\n    setQuestions(prev => [...prev, newQuestion]);\r\n    setQuestionSaveStatuses(prev => [\r\n      ...prev,\r\n      { id: newQuestion.id, status: 'draft' }\r\n    ]);\r\n    setSelectedQuestionType('');\r\n  }, [selectedQuestionType, currentLessonId]);\r\n\r\n  const handleRemoveQuestion = async (index: number) => {\r\n    try {\r\n      const questionToDelete = questions[index];\r\n      \r\n      // Delete related exercise prompts first\r\n      const { error: promptError } = await supabase\r\n        .from('exercise_prompts')\r\n        .delete()\r\n        .eq('question_id', questionToDelete.id);\r\n\r\n      if (promptError) throw promptError;\r\n\r\n      // Then delete the question\r\n      const { error: questionError } = await supabase\r\n        .from('questions')\r\n        .delete()\r\n        .eq('id', questionToDelete.id);\r\n\r\n      if (questionError) throw questionError;\r\n\r\n      // Update local state\r\n      const newQuestions = questions.filter((_, i) => i !== index);\r\n      setQuestions(newQuestions);\r\n      \r\n      toast.success('Question and related prompts deleted successfully');\r\n    } catch (error) {\r\n      console.error('Error deleting question:', error);\r\n      toast.error('Failed to delete question and prompts');\r\n    }\r\n  };\r\n\r\n  const handleUpdateQuestion = useCallback(async (index: number, updatedQuestion: Question) => {\r\n    const newQuestions = [...questions];\r\n    newQuestions[index] = updatedQuestion;\r\n    setQuestions(newQuestions);\r\n    setQuestionSaveStatuses(prev => prev.map((status, i) => \r\n      i === index ? { ...status, status: 'draft' } : status\r\n    ));\r\n  }, [questions]);\r\n\r\n  const handleAddExercisePrompt = useCallback((questionIndex: number) => {\r\n    setQuestions(prev => prev.map((question, i) => {\r\n      if (i === questionIndex) {\r\n        return {\r\n          ...question,\r\n          exercisePrompts: [\r\n            ...question.exercisePrompts,\r\n            {\r\n              id: crypto.randomUUID(),\r\n              text: '',\r\n              media: '',\r\n              type: 'image',\r\n              narration: 'Your turn',\r\n              saytext: 'Say: ',\r\n              created_at: new Date().toISOString(),\r\n              updated_at: new Date().toISOString()\r\n            }\r\n          ]\r\n        };\r\n      }\r\n      return question;\r\n    }));\r\n  }, []);\r\n\r\n  const handleRemoveExercisePrompt = useCallback((questionIndex: number, promptIndex: number) => {\r\n    setQuestions(prev => prev.map((question, i) => {\r\n      if (i === questionIndex) {\r\n        return {\r\n          ...question,\r\n          exercisePrompts: question.exercisePrompts.filter((_, j) => j !== promptIndex)\r\n        };\r\n      }\r\n      return question;\r\n    }));\r\n  }, []);\r\n\r\n  const handleExercisePromptChange = useCallback(async (\r\n    questionIndex: number,\r\n    promptIndex: number,\r\n    updatedPrompt: ExercisePrompt\r\n  ) => {\r\n    try {\r\n      const promptUpdate = {\r\n        id: updatedPrompt.id,\r\n        question_id: updatedPrompt.question_id,\r\n        text: updatedPrompt.text,\r\n        type: updatedPrompt.type,\r\n        narration: updatedPrompt.narration,\r\n        saytext: updatedPrompt.saytext,\r\n        media: updatedPrompt.media,\r\n        // Remove order_index as it's not in schema\r\n        created_at: new Date().toISOString()\r\n      };\r\n\r\n      const { error: promptError } = await supabase\r\n        .from('exercise_prompts')\r\n        .upsert(promptUpdate)\r\n        .select();\r\n\r\n      if (promptError) throw promptError;\r\n\r\n      // Update local state\r\n      setQuestions(prev => prev.map((question, i) => {\r\n        if (i === questionIndex) {\r\n          const newPrompts = [...question.exercisePrompts];\r\n          newPrompts[promptIndex] = updatedPrompt;\r\n          return { ...question, exercisePrompts: newPrompts };\r\n        }\r\n        return question;\r\n      }));\r\n\r\n    } catch (error) {\r\n      console.error('Error saving prompt:', error);\r\n      toast.error('Failed to save prompt');\r\n    }\r\n  }, []);\r\n\r\n  const handleAddActivity = useCallback(() => {\r\n    const newActivity: Activity = {\r\n      id: crypto.randomUUID(),\r\n      lesson_id: currentLessonId || '',\r\n      created_at: new Date().toISOString(),\r\n      type: 'practice',\r\n      title: '',\r\n      name: '',\r\n      instructions: '',\r\n      media: [],\r\n      data: {\r\n        prompt: '',\r\n        teacherScript: '',\r\n        media: []\r\n      }\r\n    };\r\n    setActivities(prev => [...prev, newActivity]);\r\n  }, [currentLessonId]);\r\n\r\n  const handleUpdateActivity = useCallback((index: number, updatedActivity: Activity) => {\r\n    setActivities(prev => prev.map((activity, i) => i === index ? updatedActivity : activity));\r\n  }, []);\r\n\r\n  const handleRemoveActivity = useCallback((index: number) => {\r\n    setActivities(prev => prev.filter((_, i) => i !== index));\r\n  }, []);\r\n\r\n  const handleExercisePromptUpdate = useCallback((questionIndex: number, promptIndex: number, updatedPrompt: ExercisePrompt) => {\r\n    const updatedQuestions = [...questions];\r\n    updatedQuestions[questionIndex].exercisePrompts[promptIndex] = updatedPrompt;\r\n    handleUpdateQuestion(questionIndex, updatedQuestions[questionIndex]);\r\n  }, [questions, handleUpdateQuestion]);\r\n\r\n  const handleQuestionDataChange = useCallback((questionIndex: number, field: string, value: string) => {\r\n    setQuestions(prev => prev.map((q, i) => \r\n      i === questionIndex \r\n        ? { \r\n            ...q, \r\n            data: { \r\n              prompt: q.data?.prompt || '',\r\n              teacherScript: q.data?.teacherScript || '',\r\n              ...q.data,\r\n              [field]: value \r\n            } \r\n          }\r\n        : q\r\n    ));\r\n  }, []);\r\n\r\n  const [isSaving, setIsSaving] = useState(false);\r\n\r\n  const handleSaveLesson = async () => {\r\n    try {\r\n      if (!currentLessonId || !selectedSubtopicId) {\r\n        toast.error('Please select a subtopic and lesson first');\r\n        return;\r\n      }\r\n\r\n      const { data: { session } } = await supabase.auth.getSession();\r\n      if (!session?.user) {\r\n        toast.error('Please sign in to save lessons');\r\n        return;\r\n      }\r\n\r\n      // First check if we own this lesson\r\n      const { data: existingLesson, error: checkError } = await supabase\r\n        .from('lessons')\r\n        .select('user_id')\r\n        .eq('id', currentLessonId)\r\n        .single();\r\n\r\n      if (checkError) {\r\n        console.error('Error checking lesson ownership:', checkError);\r\n        toast.error('Failed to verify lesson ownership');\r\n        return;\r\n      }\r\n\r\n      // If lesson exists but we don't own it\r\n      if (existingLesson && existingLesson.user_id !== session.user.id) {\r\n        toast.error('You do not have permission to edit this lesson');\r\n        return;\r\n      }\r\n\r\n      const lessonData = {\r\n        id: currentLessonId,\r\n        title: lessonTitle,\r\n        subtopic_id: selectedSubtopicId,\r\n        //user_id: session.user.id,\r\n        updated_at: new Date().toISOString(),\r\n        ...((!existingLesson ? { subtopic_id: selectedSubtopicId } : {}))\r\n      };\r\n      \r\n      console.log('📦 Data being sent to Supabase:', lessonData);\r\n\r\n      const { error: lessonError } = await supabase\r\n        .from('lessons')\r\n        .upsert(lessonData, { onConflict: 'id' });\r\n\r\n      if (lessonError) throw lessonError;\r\n\r\n      // 2. Save lesson content\r\n      const { data: existingContent } = await supabase\r\n        .from('lesson_content')\r\n        .select('id')\r\n        .eq('lesson_id', currentLessonId)\r\n        .single();\r\n\r\n      const contentUpdate = {\r\n        id: existingContent?.id || crypto.randomUUID(),\r\n        lesson_id: currentLessonId,\r\n        content: [lessonContent],\r\n        metadata: JSON.stringify({\r\n          lastEdited: new Date().toISOString(),\r\n          version: 1,\r\n          status: 'draft'\r\n        }),\r\n        content_type: 'html',\r\n        created_at: new Date().toISOString()\r\n      };\r\n\r\n      const { error: contentError } = await supabase\r\n        .from('lesson_content')\r\n        .upsert(contentUpdate, { onConflict: 'id' });\r\n\r\n      if (contentError) throw contentError;\r\n\r\n      // 3. Save questions\r\n      for (const question of questions) {\r\n        const questionData = {\r\n          id: question.id,\r\n          lesson_id: currentLessonId,\r\n          type: question.type,\r\n          title: question.title,\r\n          metadata: question.metadata,\r\n          data: question.data,\r\n          updated_at: new Date().toISOString(),\r\n          user_id: session.user.id\r\n        };\r\n\r\n        const { error: questionError } = await supabase\r\n          .from('questions')\r\n          .upsert(questionData, { onConflict: 'id' });\r\n\r\n        if (questionError) throw questionError;\r\n\r\n        //4. Save exercise prompts for this question\r\n        if (question.exercisePrompts) {\r\n          for (const prompt of question.exercisePrompts) {\r\n            const promptData = {\r\n              id: prompt.id,\r\n              question_id: question.id,\r\n              text: prompt.text,\r\n              media: prompt.media,\r\n              type: prompt.type,\r\n              narration: prompt.narration,\r\n              saytext: prompt.saytext,\r\n              user_id: session.user.id,\r\n              updated_at: new Date().toISOString()\r\n            };\r\n\r\n            const { error: promptError } = await supabase\r\n              .from('exercise_prompts')\r\n              .upsert(promptData, { onConflict: 'id' });\r\n\r\n            if (promptError) throw promptError;\r\n          }\r\n        }\r\n      }\r\n\r\n      // 5. Save activities\r\n      if (activities.length > 0) {\r\n        const activitiesData = activities.map(activity => ({\r\n          id: activity.id,\r\n          lesson_id: currentLessonId,\r\n          type: activity.type,\r\n          title: activity.title,\r\n          name: activity.name,\r\n          instructions: activity.instructions,\r\n          media: activity.media,\r\n          data: activity.data,\r\n          created_at: new Date().toISOString()\r\n        }));\r\n\r\n        const { error: activitiesError } = await supabase\r\n          .from('activities')\r\n          .upsert(activitiesData, { onConflict: 'id' });\r\n\r\n        if (activitiesError) throw activitiesError;\r\n      }\r\n\r\n      toast.success('Lesson saved successfully');\r\n    } catch (error) {\r\n      console.error('Save error:', error);\r\n      toast.error('Failed to save lesson');\r\n    }\r\n  };\r\n\r\n  const handleSaveQuestion = async (question: Question, index: number) => {\r\n    const loadingToast = toast.loading(`Saving question ${index + 1}...`);\r\n    \r\n    try {\r\n      const { data: { session } } = await supabase.auth.getSession();\r\n      if (!session?.user) {\r\n        toast.error('Please sign in to save question', { id: loadingToast });\r\n        return;\r\n      }\r\n\r\n      // Save question\r\n      const questionData = {\r\n        id: question.id,\r\n        lesson_id: currentLessonId,\r\n        type: question.type,\r\n        title: question.title,\r\n        metadata: question.metadata,\r\n        data: question.data,\r\n        user_id: session.user.id,\r\n        updated_at: new Date().toISOString()\r\n      };\r\n\r\n      const { error: questionError } = await supabase\r\n        .from('questions')\r\n        .upsert(questionData, { onConflict: 'id' });\r\n\r\n      if (questionError) throw questionError;\r\n\r\n      // Save exercise prompts if they exist\r\n      if (question.exercisePrompts?.length) {\r\n        for (const prompt of question.exercisePrompts) {\r\n          const promptData = {\r\n            id: prompt.id,\r\n            question_id: question.id,\r\n            text: prompt.text,\r\n            type: prompt.type,\r\n            narration: prompt.narration,\r\n            saytext: prompt.saytext,\r\n            media: prompt.media,\r\n            user_id: session.user.id,\r\n            updated_at: new Date().toISOString()\r\n          };\r\n\r\n          const { error: promptError } = await supabase\r\n            .from('exercise_prompts')\r\n            .upsert(promptData, { onConflict: 'id' });\r\n\r\n          if (promptError) throw promptError;\r\n        }\r\n      }\r\n\r\n      toast.success(`Question ${index + 1} saved successfully`, { id: loadingToast });\r\n    } catch (error) {\r\n      console.error('Error saving question:', error);\r\n      toast.error(`Failed to save question ${index + 1}`, { id: loadingToast });\r\n    }\r\n  };\r\n\r\n  const handleSaveActivity = async (activity: Activity) => {\r\n    try {\r\n      await contentService.saveActivity(activity);\r\n      toast.success('Activity saved');\r\n    } catch (error) {\r\n      console.error('Failed to save activity:', error);\r\n      toast.error('Failed to save activity');\r\n    }\r\n  };\r\n\r\n  // Effects\r\n  useEffect(() => {\r\n    const fetchGrades = async () => {\r\n      try {\r\n        const { data, error } = await supabase\r\n          .from('grades')\r\n          .select('*')\r\n          .order('name');\r\n\r\n        if (error) {\r\n          console.error('Supabase error:', error);\r\n          throw error;\r\n        }\r\n\r\n        if (!data) {\r\n          throw new Error('No data returned from Supabase');\r\n        }\r\n\r\n        // Map the grades to match your interface\r\n        const validGrades = data.map((grade: any) => ({\r\n          _id: grade.id,\r\n          id: grade.id,\r\n          name: grade.name,\r\n          level: grade.level || 0,  // Add default value if not provided\r\n          orderIndex: grade.order_index || 0,  // Add default value if not provided\r\n          topics: []\r\n        }));\r\n        \r\n        setGrades(validGrades);\r\n      } catch (error) {\r\n        console.error('Error fetching grades:', error);\r\n        toast.error('Failed to fetch grades');\r\n      }\r\n    };\r\n\r\n    fetchGrades();\r\n  }, []);\r\n\r\n  // Topic Selection\r\n  useEffect(() => {\r\n    const fetchTopics = async () => {\r\n      if (!selectedGradeId) return;\r\n      \r\n      try {\r\n        const { data, error } = await supabase\r\n          .from('topics')\r\n          .select('*')\r\n          .eq('grade_id', selectedGradeId)\r\n          .order('title');\r\n\r\n        if (error) {\r\n          throw error;\r\n        }\r\n\r\n        // Map the topics to match your interface\r\n        const validTopics = (data || []).map((topic: any) => ({\r\n          _id: topic.id,\r\n          id: topic.id,\r\n          name: topic.title,\r\n          title: topic.title,\r\n          grade_id: topic.grade_id,\r\n          subtopics: []\r\n        }));\r\n        \r\n        setTopics(validTopics);\r\n      } catch (error) {\r\n        console.error('Error fetching topics:', error);\r\n        toast.error('Failed to fetch topics');\r\n      }\r\n    };\r\n\r\n    fetchTopics();\r\n  }, [selectedGradeId]);\r\n\r\n  // Subtopic Selection\r\n  useEffect(() => {\r\n    const fetchSubtopics = async () => {\r\n      if (!selectedTopicId) return;\r\n      \r\n      try {\r\n        // Use content service to fetch subtopics\r\n        const subtopicsData = await contentService.fetchSubtopics(selectedTopicId);\r\n        console.log('Fetched subtopics:', subtopicsData);\r\n\r\n        const validSubtopics = subtopicsData.map((subtopic: any) => ({\r\n          id: subtopic.id,\r\n          title: subtopic.title,\r\n          description: subtopic.description,\r\n          topic_id: subtopic.topic_id,\r\n          lessons: [],\r\n          order_index: subtopicsData.length\r\n        }));\r\n        \r\n        setSubtopics(validSubtopics);\r\n        \r\n        // Update global state\r\n        if (selectedSubtopic) {\r\n          setSelectedSubtopic(selectedSubtopic);\r\n        }\r\n      } catch (err) {\r\n        const error = err as Error;\r\n        console.error('Error fetching subtopics:', error);\r\n        toast.error('Failed to fetch subtopics');\r\n      }\r\n    };\r\n\r\n    fetchSubtopics();\r\n  }, [selectedTopicId, selectedSubtopic, setSelectedSubtopic]);\r\n\r\n  // Add effect to monitor subtopics state\r\n  useEffect(() => {\r\n    console.log('Current subtopics state:', subtopics);\r\n  }, [subtopics]);\r\n\r\n  // Add fetchLessons function\r\n  const fetchLessons = useCallback(async () => {\r\n    if (!selectedSubtopicId) return;\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('lessons')\r\n        .select('*')\r\n        .eq('subtopic_id', selectedSubtopicId)\r\n        .order('title');\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n      \r\n      // Map the lessons to ensure they have _id\r\n      const validLessons = (data || []).map((lesson: any) => ({\r\n        ...lesson,\r\n        _id: lesson._id || lesson.id, // Use _id if available, otherwise use id\r\n        title: lesson.title || 'Untitled Lesson'\r\n      })).filter((lesson: any) => lesson._id); // Only include lessons with valid IDs\r\n      \r\n      setLessons(validLessons);\r\n    } catch (error) {\r\n      console.error('Error fetching lessons:', error);\r\n      toast.error('Failed to fetch lessons');\r\n    }\r\n  }, [selectedSubtopicId]);\r\n  // Add loadLessonContent function\r\n  const isLoading = useRef(false);\r\n  const loadLessonContent = useCallback(async (lessonId: string) => {\r\n    // Prevent multiple simultaneous loads\r\n    if (isLoading.current) return;\r\n    isLoading.current = true;\r\n\r\n    const controller = new AbortController();\r\n\r\n    try {\r\n      // Clear existing content first\r\n      setLessonTitle('');\r\n      setContentHeading('');\r\n      setLessonContent('');\r\n      setQuestions([]);\r\n      \r\n      // First fetch lesson data\r\n      const { data: lessonData, error: lessonError } = await supabase\r\n        .from('lessons')\r\n        .select('*')\r\n        .eq('id', lessonId)\r\n        .single()\r\n        \r\n\r\n      if (lessonError) {\r\n        console.error('Lesson fetch error:', lessonError);\r\n        throw lessonError;\r\n      }\r\n\r\n      // Set lesson data\r\n      setLessonTitle(lessonData.title || '');\r\n      setContentHeading(lessonData.content || '');\r\n\r\n      // Then fetch lesson content with explicit headers\r\n      const { data: contentData, error: contentError } = await supabase\r\n        .from('lesson_content')\r\n        .select('*')\r\n        .eq('lesson_id', lessonId)\r\n        .order('updated_at', { ascending: false })\r\n        .limit(1)\r\n        .maybeSingle();\r\n\r\n      if (contentError) {\r\n        console.error('Content fetch error:', contentError);\r\n        throw contentError;\r\n      }\r\n\r\n      // Set content if available\r\n      if (contentData?.content) {\r\n        setLessonContent(typeof contentData.content === 'string' \r\n          ? contentData.content \r\n          : JSON.stringify(contentData.content)\r\n        );\r\n      }\r\n\r\n    } catch (error: unknown) {\r\n      if (error instanceof Error && error.name === 'AbortError') {\r\n        console.log('Request aborted');\r\n        return;\r\n      }\r\n      console.error('Error loading lesson:', error);\r\n      toast.error('Failed to load lesson content');\r\n      \r\n      // Reset states on error\r\n      setLessonTitle('');\r\n      setContentHeading('');\r\n      setLessonContent('');\r\n      setQuestions([]);\r\n    } finally {\r\n      isLoading.current = false;\r\n    }\r\n\r\n    return () => {\r\n      controller.abort();\r\n    };\r\n  }, []); // Empty dependencies since we're using closure over state setters\r\n\r\n  // // Add effect for fetching lessons when subtopic changes\r\n  useEffect(() => {\r\n    if (selectedSubtopicId) {\r\n      fetchLessons();\r\n    }\r\n  }, [selectedSubtopicId, fetchLessons]);\r\n\r\n  // Add effect for loading lesson content when currentLessonId changes\r\n    useEffect(() => {\r\n    let isMounted = true;\r\n    let timeoutId: NodeJS.Timeout;\r\n\r\n    const loadContent = async () => {\r\n      if (!currentLessonId || !isMounted) return;\r\n\r\n      // Clear previous timeout if exists\r\n      if (timeoutId) clearTimeout(timeoutId);\r\n\r\n      // Set new timeout for debouncing\r\n      timeoutId = setTimeout(() => {\r\n        if (isMounted) {\r\n          loadLessonContent(currentLessonId);\r\n        }\r\n      }, 300);\r\n    };\r\n\r\n    loadContent();\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      isMounted = false;\r\n      if (timeoutId) clearTimeout(timeoutId);\r\n      if (isLoading.current) isLoading.current = false;\r\n    };\r\n  }, [currentLessonId]); // Remove loadLessonContent from dependencies\r\n\r\n  useEffect(() => {\r\n    console.log('Current lessons state:', lessons);\r\n  }, [lessons]);\r\n\r\n    // Add keyboard shortcut for saving\r\n  useEffect(() => {\r\n    const handleKeyDown = (e: KeyboardEvent) => {\r\n      if ((e.ctrlKey || e.metaKey) && e.key === 's') {\r\n        e.preventDefault();\r\n        handleSaveLesson();\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => window.removeEventListener('keydown', handleKeyDown);\r\n  }, [handleSaveLesson]);\r\n\r\n  // Add SaveFeedback component\r\n  const SaveFeedback = useCallback(() => {\r\n    if (saveProgress === 'idle') return null;\r\n\r\n    return (\r\n    <div className=\"fixed bottom-4 right-4\">\r\n      {saveProgress === 'saving' && (\r\n        <div className=\"flex items-center gap-2 bg-background border rounded-lg px-4 py-2 shadow-lg\">\r\n          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n          <span className=\"text-sm\">Saving changes...</span>\r\n        </div>\r\n      )}\r\n      {saveProgress === 'saved' && (\r\n        <div className=\"flex items-center gap-2 bg-green-500 text-white rounded-lg px-4 py-2 shadow-lg\">\r\n          <Check className=\"h-4 w-4\" />\r\n          <span className=\"text-sm\">Changes saved</span>\r\n        </div>\r\n      )}\r\n      {saveProgress === 'error' && (\r\n        <div className=\"flex items-center gap-2 bg-destructive text-destructive-foreground rounded-lg px-4 py-2 shadow-lg\">\r\n          <X className=\"h-4 w-4\" />\r\n          <span className=\"text-sm\">Error saving changes</span>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n  }, [saveProgress]);\r\n\r\n  // Update handlers\r\n  const handleGradeSelect = (gradeId: string) => {\r\n    // Always keep sidebar open during selection\r\n    setIsSidebarCollapsed(false);\r\n    setIsSidebarLocked(true);\r\n    \r\n    // Batch state updates\r\n    requestAnimationFrame(() => {\r\n      setSelectedGradeId(gradeId);\r\n      setSelectedGrade(gradeId);\r\n      setSelectedTopicId(null);\r\n      setSelectedTopic('');\r\n      setSelectedSubtopicId(null);\r\n      setSelectedSubtopic('');\r\n      setCurrentLessonId(null);\r\n      \r\n      if (isViewMode) {\r\n        setExpandedGrade(gradeId);\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleTopicSelect = (value: string) => {\r\n    setSelectedTopicId(value);\r\n    setSelectedTopic(value);\r\n    setSelectedSubtopicId(null);\r\n    setSelectedSubtopic('');\r\n    setCurrentLessonId(null);\r\n  };\r\n\r\n  const handleSubtopicSelect = (value: string) => {\r\n    setSelectedSubtopicId(value);\r\n    setSelectedSubtopic(value);\r\n    setCurrentLessonId(null);\r\n  };\r\n\r\n  const handleLessonSelect = async (lessonId: string) => {\r\n    try {\r\n      // Lock sidebar during selection\r\n      setIsSidebarLocked(true);\r\n      setIsSidebarCollapsed(false);\r\n      setCurrentLessonId(lessonId);\r\n      \r\n      // 1. Fetch lesson data\r\n      const { data: lessonData, error: lessonError } = await supabase\r\n        .from('lessons')\r\n        .select('*')\r\n        .eq('id', lessonId)\r\n        .single();\r\n\r\n      if (lessonError) throw lessonError;\r\n\r\n      // 2. Fetch questions with exercise prompts\r\n      const { data: questionsData, error: questionsError } = await supabase\r\n        .from('questions')\r\n        .select(`\r\n          *,\r\n          exercise_prompts (*)\r\n        `)\r\n        .eq('lesson_id', lessonId);\r\n\r\n      if (questionsError) throw questionsError;\r\n\r\n      // 3. Fetch activities - removed order_index\r\n      const { data: activitiesData, error: activitiesError } = await supabase\r\n        .from('activities')\r\n        .select('*')\r\n        .eq('lesson_id', lessonId);\r\n\r\n      if (activitiesError) throw activitiesError;\r\n\r\n      // Format questions with their exercise prompts\r\n      const formattedQuestions = questionsData?.map(q => ({\r\n        ...q,\r\n        data: q.data || {},\r\n        exercisePrompts: q.exercise_prompts || []\r\n      })) || [];\r\n\r\n      // Set all states\r\n      setLessonTitle(lessonData.title || '');\r\n      setLessonContent(lessonData.content || '');\r\n      setQuestions(formattedQuestions);\r\n      setActivities(activitiesData || []);\r\n\r\n      // After successful load, unlock sidebar and allow collapse\r\n      setTimeout(() => {\r\n        setIsSidebarLocked(false);\r\n        if (!isSidebarLocked) {\r\n          setIsSidebarCollapsed(true);\r\n        }\r\n      }, 300);\r\n\r\n    } catch (error) {\r\n      console.error('Error loading lesson:', error);\r\n      toast.error('Failed to load lesson');\r\n      // Reset states on error\r\n      setLessonTitle('');\r\n      setLessonContent('');\r\n      setQuestions([]);\r\n      setActivities([]);\r\n    }\r\n    if (!isSidebarLocked) {\r\n      setIsSidebarCollapsed(true);\r\n    }\r\n  };\r\n\r\n  // Update the expansion handlers\r\n  const handleTopicExpand = (topicId: string | null) => {\r\n    setExpandedTopic(expandedTopic === topicId ? null : topicId);\r\n  };\r\n\r\n  const handleSubtopicExpand = (subtopicId: string | null) => {\r\n    setExpandedSubtopic(expandedSubtopic === subtopicId ? null : subtopicId);\r\n  };\r\n\r\n  const handleQuestionExpand = (index: number) => {\r\n    setExpandedQuestion(expandedQuestion === index ? null : index);\r\n  };\r\n\r\n  const handleActivityExpand = (index: number) => {\r\n    setExpandedActivity(expandedActivity === index ? null : index);\r\n  };\r\n\r\n  // Add effect to save mode changes to localStorage\r\n  useEffect(() => {\r\n    localStorage.setItem('lessonManagementViewMode', isViewMode.toString());\r\n  }, [isViewMode]);\r\n\r\n  // Add handlers for creating new items\r\n  const handleCreateGrade = async () => {\r\n    try {\r\n      const response = await fetch(`${API_ENDPOINT}/grades`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ name: newItemData.name })\r\n      });\r\n\r\n      if (!response.ok) throw new Error('Failed to create grade');\r\n      const data = await response.json();\r\n      \r\n      if (!data.success) throw new Error(data.message || 'Failed to create grade');\r\n      \r\n      // Update grades list\r\n      setGrades([...grades, data.data.grade]);\r\n      setModalState({ ...modalState, showAddGrade: false });\r\n      setNewItemData({ name: '', description: '' });\r\n      toast.success('Grade created successfully');\r\n    } catch (error) {\r\n      console.error('Error creating grade:', error);\r\n      toast.error('Failed to create grade');\r\n    }\r\n  };\r\n\r\n  const handleCreateTopic = async (topicData: CreateTopicInput) => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('topics')\r\n        .insert([\r\n          {\r\n            title: topicData.title,\r\n            description: topicData.description,\r\n            category_id: topicData.categoryId,\r\n            created_by: user?.id // Assuming you have user context\r\n          }\r\n        ])\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      // Optionally refresh topics list or add to local state\r\n      setTopics(prev => [...prev, data]);\r\n      \r\n      toast.success('Topic created successfully');\r\n      return data;\r\n\r\n    } catch (err) {\r\n      logger.error(`Failed to create topic: ${err instanceof Error ? err.message : String(err)}`, 'TopicsPage');\r\n      toast.error('Failed to create topic');\r\n      throw new Error('Failed to create topic');\r\n    }\r\n  };\r\n\r\n  const handleCreateSubtopic = async (data: { title: string; description?: string }) => {\r\n    try {\r\n      if (!selectedTopicId) {\r\n        toast.error('Please select a topic first');\r\n        return;\r\n      }\r\n\r\n      const newSubtopic = await contentService.createSubtopic({\r\n        ...data,\r\n        topicId: selectedTopicId\r\n      });\r\n\r\n      setSubtopics(prev => [...prev, {\r\n        _id: newSubtopic.id,\r\n        id: newSubtopic.id,\r\n        name: newSubtopic.title,\r\n        title: newSubtopic.title,\r\n        description: newSubtopic.description,\r\n        topic_id: newSubtopic.topic_id,\r\n        orderIndex: prev.length,\r\n        lessons: []\r\n      }]);\r\n\r\n      toast.success('Subtopic created successfully');\r\n      setModalState(prev => ({ ...prev, showAddSubtopic: false }));\r\n    } catch (err) {\r\n      const error = err as Error;\r\n      console.error('Error creating subtopic:', error);\r\n      toast.error('Failed to create subtopic');\r\n    }\r\n  };\r\n\r\n  const handleUpdateSubtopic = async (subtopicId: string, data: { title: string; description?: string }) => {\r\n    try {\r\n      const { data: updatedSubtopic, error } = await supabase\r\n        .from('sub_topics')\r\n        .update(data)\r\n        .eq('id', subtopicId)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      \r\n      setSubtopics(prev => prev.map(subtopic => \r\n        subtopic.id === subtopicId \r\n          ? {\r\n              ...subtopic,\r\n              name: updatedSubtopic.title\r\n            }\r\n          : subtopic\r\n      ));\r\n\r\n      toast.success('Subtopic updated successfully');\r\n    } catch (err) {\r\n      const error = err as Error;\r\n      console.error('Error updating subtopic:', error);\r\n      toast.error('Failed to update subtopic');\r\n    }\r\n  };\r\n\r\n  const handleDeleteSubtopic = async (subtopicId: string) => {\r\n    try {\r\n      await contentService.deleteSubtopic(subtopicId);\r\n      setSubtopics(prev => prev.filter(subtopic => subtopic.id !== subtopicId));\r\n      setSelectedSubtopicId(null);\r\n      toast.success('Subtopic deleted successfully');\r\n    } catch (err) {\r\n      const error = err as Error;\r\n      console.error('Error deleting subtopic:', error);\r\n      toast.error('Failed to delete subtopic');\r\n    }\r\n  };\r\n\r\n  const handleCreateLesson = async () => {\r\n    if (!selectedSubtopicId) {\r\n      toast.error('Please select a subtopic first');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // First create the lesson\r\n      const { data: newLesson, error: lessonError } = await supabase\r\n        .from('lessons')\r\n        .insert({\r\n          title: newItemData.name,\r\n          subtopic_id: selectedSubtopicId,\r\n          content: '', // Empty rich text content initially\r\n          status: 'draft'\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (lessonError) throw lessonError;\r\n\r\n      // Create initial question\r\n      const { data: newQuestion, error: questionError } = await supabase\r\n        .from('questions')\r\n        .insert({\r\n          lesson_id: newLesson.id,\r\n          type: 'speaking', // default type\r\n          title: 'Question 1',\r\n          data: {\r\n            prompt: '',\r\n            teacherScript: '',\r\n            options: []\r\n          },\r\n          order_index: 0\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (questionError) throw questionError;\r\n\r\n      // Create initial exercise prompts for the question\r\n      const { error: promptsError } = await supabase\r\n        .from('exercise_prompts')\r\n        .insert([\r\n          {\r\n            question_id: newQuestion.id,\r\n            text: '',\r\n            type: 'image',\r\n            narration: '',\r\n            saytext: '',\r\n            media: [],\r\n            order_index: 0\r\n          },\r\n          {\r\n            question_id: newQuestion.id,\r\n            text: '',\r\n            type: 'gif',\r\n            narration: '',\r\n            saytext: '',\r\n            media: [],\r\n            order_index: 1\r\n          }\r\n        ]);\r\n\r\n      if (promptsError) throw promptsError;\r\n\r\n      // Create initial activity\r\n      // const { error: activityError } = await supabase\r\n      //   .from('activities')\r\n      //   .insert({\r\n      //     lesson_id: newLesson.id,\r\n      //     type: 'practice',\r\n      //     title: '',\r\n      //     instructions: '',\r\n      //     media: [],\r\n      //     data: {\r\n      //       prompt: '',\r\n      //       teacherScript: '',\r\n      //       media: []\r\n      //     },\r\n      //     order_index: 0\r\n      //   });\r\n\r\n      // if (activityError) throw activityError;\r\n\r\n      // Update UI state\r\n      setLessons(prev => [...prev, newLesson]);\r\n      setCurrentLessonId(newLesson.id);\r\n      setLessonTitle(newLesson.title);\r\n      setModalState({ ...modalState, showAddLesson: false });\r\n      setNewItemData({ name: '', description: '' });\r\n      toast.success('Lesson created successfully');\r\n\r\n    } catch (error) {\r\n      console.error('Error creating lesson:', error);\r\n      toast.error('Failed to create lesson');\r\n    }\r\n  };\r\n\r\n  // Effect to handle localStorage after mount\r\n  useEffect(() => {\r\n    const storedMode = localStorage.getItem('lessonManagementViewMode');\r\n    if (storedMode !== null) {\r\n      setIsViewMode(storedMode === 'true');\r\n    }\r\n  }, []);\r\n\r\n  // Update the cleanupModalState function\r\n  const cleanupModalState = useCallback(() => {\r\n    document.body.style.pointerEvents = '';\r\n    document.body.style.overflow = '';\r\n    setModalState({\r\n      showAddGrade: false,\r\n      showAddTopic: false,\r\n      showAddSubtopic: false,\r\n      showAddLesson: false\r\n    });\r\n    setNewItemData({ name: '', description: '' });\r\n  }, []);\r\n\r\n  // Add a function to handle modal state changes\r\n  const handleModalStateChange = useCallback((modalType: keyof typeof modalState, open: boolean) => {\r\n    if (!open) {\r\n      cleanupModalState();\r\n    } else {\r\n      setModalState(prev => ({ ...prev, [modalType]: open }));\r\n    }\r\n  }, [cleanupModalState]);\r\n\r\n  const handleContentSave = async (content: string) => {\r\n    const loadingToast = toast.loading(\"Saving content...\", {\r\n      action: {\r\n        label: \"Close\",\r\n        onClick: () => toast.dismiss()\r\n      }\r\n    });\r\n    \r\n    try {\r\n      const { data: { session } } = await supabase.auth.getSession();\r\n      if (!session?.user) {\r\n        toast.error('Please sign in to save content', { id: loadingToast });\r\n        return;\r\n      }\r\n\r\n      // Get the most recent content entry\r\n      const { data: existingContent, error: checkError } = await supabase\r\n        .from('lesson_content')\r\n        .select('id')\r\n        .eq('lesson_id', currentLessonId)\r\n        .order('updated_at', { ascending: false })\r\n        .limit(1)\r\n        .maybeSingle();\r\n\r\n      // If content exists, update it; if not, insert new\r\n      const { error } = await supabase\r\n        .from('lesson_content')\r\n        .upsert({\r\n          id: existingContent?.id, // This ensures we update if id exists\r\n          lesson_id: currentLessonId,\r\n          content: [content],\r\n          content_type: 'text',\r\n          metadata: {\r\n            heading: contentHeading\r\n          },\r\n          user_id: session.user.id,\r\n          updated_at: new Date().toISOString()\r\n        }, {\r\n          onConflict: 'id'  // This ensures we update based on lesson_id\r\n        });\r\n\r\n      if (error) throw error;\r\n\r\n      // Save questions separately\r\n      for (const question of questions) {\r\n        const { exercisePrompts, ...questionData } = question; // Remove exercisePrompts from question data\r\n        \r\n        // Save question\r\n        const { error: questionError } = await supabase\r\n          .from('questions')\r\n          .upsert(questionData, {\r\n            onConflict: 'id'\r\n          })\r\n          .select();\r\n\r\n        if (questionError) throw questionError;\r\n\r\n        // Save exercise prompts\r\n        if (exercisePrompts?.length > 0) {\r\n          for (const prompt of exercisePrompts) {\r\n            const { error: promptError } = await supabase\r\n              .from('exercise_prompts')\r\n              .upsert(prompt, {\r\n                onConflict: 'id'\r\n              })\r\n              .select();\r\n\r\n            if (promptError) throw promptError;\r\n          }\r\n        }\r\n      }\r\n      \r\n      toast.success(\"Content saved successfully\", {\r\n        action: {\r\n          label: \"Close\",\r\n          onClick: () => toast.dismiss()\r\n        },\r\n        id: loadingToast,\r\n      });\r\n      setIsContentEditorOpen(false);\r\n    } catch (error) {\r\n      console.error('Error saving content:', error);\r\n      toast.error(\"Failed to save content\", {\r\n        action: {\r\n          label: \"Close\",\r\n          onClick: () => toast.dismiss()\r\n        },\r\n        id: loadingToast,\r\n      });\r\n    }\r\n  };\r\n\r\n  // Add this component for inline editing\r\n  const InlineEdit = ({ \r\n    value, \r\n    onSave, \r\n    isEditing, \r\n    setIsEditing, \r\n    placeholder,\r\n    className = \"\"\r\n  }: InlineEditProps) => {\r\n    const [tempValue, setTempValue] = useState(value);\r\n    \r\n    return isEditing ? (\r\n      <div className=\"flex items-center gap-2\">\r\n        <Input\r\n          value={tempValue}\r\n          onChange={(e) => setTempValue(e.target.value)}\r\n          placeholder={placeholder}\r\n          className={className}\r\n          autoFocus\r\n        />\r\n        <Button\r\n          size=\"sm\"\r\n          variant=\"ghost\"\r\n          onClick={() => {\r\n            onSave(tempValue);\r\n            setIsEditing(false);\r\n          }}\r\n        >\r\n          <Check className=\"h-4 w-4 text-green-500\" />\r\n        </Button>\r\n        <Button\r\n          size=\"sm\"\r\n          variant=\"ghost\"\r\n          onClick={() => setIsEditing(false)}\r\n        >\r\n          <X className=\"h-4 w-4 text-red-500\" />\r\n        </Button>\r\n      </div>\r\n    ) : (\r\n      <div \r\n        className=\"group flex items-center gap-2 cursor-pointer\"\r\n        onClick={() => setIsEditing(true)}\r\n      >\r\n        <span className={className}>{value || placeholder}</span>\r\n        <Pencil className=\"h-4 w-4 opacity-0 group-hover:opacity-100 transition-opacity\" />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Add this effect to handle auto-collapse after lesson selection\r\n  useEffect(() => {\r\n    if (currentLessonId && selectedGradeId && selectedTopicId && selectedSubtopicId) {\r\n      setIsSidebarLocked(false);\r\n      // Optional: add a slight delay before collapsing\r\n      setTimeout(() => setIsSidebarCollapsed(true), 300);\r\n    }\r\n  }, [currentLessonId, selectedGradeId, selectedTopicId, selectedSubtopicId]);\r\n\r\n  // Add individual save handlers\r\n  // const handleSaveQuestion = async (question: Question, index: number) => {\r\n  //   try {\r\n  //     // Update status to saving\r\n  //     setQuestionSaveStatuses(prev => [\r\n  //       ...prev.filter(s => s.id !== question.id),\r\n  //       { id: question.id, status: 'saving' }\r\n  //     ]);\r\n\r\n  //     const questionUpsert = {\r\n  //       id: question.id,\r\n  //       lesson_id: currentLessonId,\r\n  //       type: question.type,\r\n  //       title: question.data?.prompt || 'Untitled Question',\r\n  //       metadata: question.metadata || {},\r\n  //       data: {\r\n  //         prompt: question.data?.prompt || '',\r\n  //         teacherScript: question.data?.teacherScript || '',\r\n  //         ...question.data\r\n  //       },\r\n  //       order_index: index,\r\n  //       created_at: new Date().toISOString(),\r\n  //       updated_at: new Date().toISOString()\r\n  //     };\r\n\r\n  //     const { error: questionError } = await supabase\r\n  //       .from('questions')\r\n  //       .upsert(questionUpsert);\r\n\r\n  //     if (questionError) throw questionError;\r\n\r\n  //     // Update status to saved\r\n  //     setQuestionSaveStatuses(prev => [\r\n  //       ...prev.filter(s => s.id !== question.id),\r\n  //       { id: question.id, status: 'saved', lastSaved: new Date().toISOString() }\r\n  //     ]);\r\n\r\n  //     toast.success(`Question ${index + 1} saved successfully`);\r\n  //   } catch (error) {\r\n  //     console.error('Error saving question:', error);\r\n  //     setQuestionSaveStatuses(prev => [\r\n  //       ...prev.filter(s => s.id !== question.id),\r\n  //       { id: question.id, status: 'error' }\r\n  //     ]);\r\n  //     toast.error(`Failed to save question ${index + 1}`);\r\n  //   }\r\n  // };\r\n\r\n  const handleSavePrompt = async (questionId: string, prompt: ExercisePrompt, promptIndex: number) => {\r\n    try {\r\n      setPromptSaveStatuses(prev => [\r\n        ...prev.filter(s => s.id !== prompt.id),\r\n        { id: prompt.id || '', status: 'saving' } as SaveStatus\r\n      ]);\r\n\r\n      const promptUpsert = {\r\n        id: prompt.id,\r\n        question_id: questionId,\r\n        text: prompt.text || '',\r\n        type: prompt.type || 'text',\r\n        narration: prompt.narration || '',\r\n        saytext: prompt.saytext || '',\r\n        media: prompt.media || [],\r\n        order_index: promptIndex,\r\n        created_at: prompt.created_at || new Date().toISOString(),\r\n        updated_at: new Date().toISOString()\r\n      };\r\n\r\n      const { error: promptError } = await supabase\r\n        .from('exercise_prompts')\r\n        .upsert(promptUpsert);\r\n\r\n      if (promptError) throw promptError;\r\n\r\n      setPromptSaveStatuses(prev => [\r\n        ...prev.filter(s => s.id !== prompt.id),\r\n        { id: prompt.id || '', status: 'saved', lastSaved: new Date().toISOString() } as SaveStatus\r\n      ]);\r\n\r\n      toast.success(`Prompt ${promptIndex + 1} saved successfully`);\r\n    } catch (error) {\r\n      console.error('Error saving prompt:', error);\r\n      setPromptSaveStatuses(prev => [\r\n        ...prev.filter(s => s.id !== prompt.id),\r\n        { id: prompt.id || '', status: 'error' } as SaveStatus\r\n      ]);\r\n      toast.error(`Failed to save prompt ${promptIndex + 1}`);\r\n    }\r\n  };\r\n\r\n  // Add effect to mark items as draft when edited\r\n  useEffect(() => {\r\n    questions.forEach(question => {\r\n      if (!questionSaveStatuses.find(s => s.id === question.id)) {\r\n        setQuestionSaveStatuses(prev => [\r\n          ...prev,\r\n          { id: question.id, status: 'draft' }\r\n        ]);\r\n      }\r\n    });\r\n  }, [questions]);\r\n\r\n  // Add this function with your other handlers\r\n  const handleRefreshLesson = async () => {\r\n    if (!currentLessonId) {\r\n      toast.error('No lesson selected');\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      toast.loading('Refreshing lesson content...', {\r\n        action: {\r\n          label: \"Close\",\r\n          onClick: () => toast.dismiss()\r\n        },\r\n      });\r\n      await handleLessonSelect(currentLessonId);\r\n      toast.success('Content refreshed', {\r\n        action: {\r\n          label: \"Close\",\r\n          onClick: () => toast.dismiss()\r\n        },\r\n      });\r\n    } catch (error) {\r\n      console.error('Error refreshing lesson:', error);\r\n      toast.error('Failed to refresh content', {\r\n        action: {\r\n          label: \"Close\",\r\n          onClick: () => toast.dismiss()\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  // Add this function to handle refresh\r\n  const handleRefreshContent = async () => {\r\n    if (!currentLessonId) {\r\n      toast.error('No lesson selected');\r\n      return;\r\n    }\r\n    \r\n    toast.loading('Refreshing content...');\r\n    try {\r\n      await loadLessonContent(currentLessonId);\r\n      toast.success('Content refreshed');\r\n    } catch (error) {\r\n      console.error('Refresh error:', error);\r\n      toast.error('Failed to refresh content');\r\n    }\r\n  };\r\n\r\n  // Render\r\n  return (\r\n      <div className=\"container mx-auto py-8\">\r\n        {/* Header */}\r\n        <div className=\"flex items-center justify-between mb-2\">\r\n          {/* ... header content ... */}\r\n          <div className=\"flex items-center gap-4\">\r\n            <Link href=\"/super-admin\">\r\n              <Button variant=\"outline\" className=\"gap-2\">\r\n                <ArrowLeft className=\"h-4 w-4\" />\r\n                Back\r\n              </Button>\r\n            </Link>\r\n            <div className=\"flex items-center gap-2\">\r\n              <h1 className=\"text-2xl font-bold\">Lesson Management</h1>\r\n              <Button\r\n                variant=\"ghost\"\r\n                size=\"icon\"\r\n                onClick={handleRefreshLesson}\r\n                className=\"ml-2\"\r\n                title=\"Refresh lesson content\"\r\n              >\r\n                <RefreshCw className=\"h-4 w-4\" />\r\n              </Button>\r\n            </div>\r\n            <p className=\"text-sm text-muted-foreground\">Create and manage your educational content</p>\r\n          </div>\r\n          <div className=\"flex items-center gap-2\">\r\n            <Button\r\n              variant=\"outline\"\r\n              size=\"sm\"\r\n              onClick={() => setShowHelpTips(!showHelpTips)}\r\n              className=\"gap-2\"\r\n            >\r\n              {showHelpTips ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\r\n              {showHelpTips ? 'Hide Tips' : 'Show Tips'}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        \r\n        {/* Main content wrapper - Fix the layout here */}\r\n        <div className=\"flex gap-6 h-[calc(100vh-200px)]\">\r\n          {/* Left Sidebar with collapse/expand functionality */}\r\n          <div \r\n            className={cn(\r\n              \"transition-all duration-300 ease-in-out relative\",\r\n              isSidebarCollapsed ? \"w-20\" : \"w-80\",\r\n              \"flex-shrink-0\"\r\n            )}\r\n            onMouseEnter={() => !isSidebarLocked && setIsSidebarCollapsed(false)}\r\n            onMouseLeave={() => !isSidebarLocked && setIsSidebarCollapsed(true)}\r\n          >\r\n            <Card className=\"h-full relative\">\r\n              {/* Lock button - only show after lesson selection */}\r\n              {currentLessonId && (\r\n                <Button\r\n                  variant=\"ghost\"\r\n                  size=\"sm\"\r\n                  className=\"absolute top-2 right-2 z-10\"\r\n                  onClick={() => {\r\n                    setIsSidebarLocked(!isSidebarLocked);\r\n                    if (!isSidebarLocked) {\r\n                      setIsSidebarCollapsed(false);\r\n                    }\r\n                  }}\r\n                >\r\n                  {isSidebarLocked ? <Lock className=\"h-4 w-4\" /> : <Unlock className=\"h-4 w-4\" />}\r\n                </Button>\r\n              )}\r\n\r\n              {/* Sidebar content with overflow handling */}\r\n              <div className={cn(\r\n                \"transition-all duration-300 overflow-hidden\",\r\n                isSidebarCollapsed ? \"opacity-0\" : \"opacity-100\"\r\n              )}>\r\n                <Card className=\"h-full\">\r\n                  <CardHeader className=\"pb-3\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <CardTitle className=\"text-lg font-semibold\">Content Management</CardTitle>\r\n                      <TooltipProvider>\r\n                        <Tooltip>\r\n                          <TooltipTrigger>\r\n                            <HelpCircle className=\"h-4 w-4 text-muted-foreground\" />\r\n                          </TooltipTrigger>\r\n                          <TooltipContent>\r\n                            <p>Manage your educational content here</p>\r\n                          </TooltipContent>\r\n                        </Tooltip>\r\n                      </TooltipProvider>\r\n                      </div>\r\n                    <CardDescription>Create and manage your lessons</CardDescription>\r\n                  </CardHeader>\r\n                  <CardContent className=\"space-y-4\">\r\n                    {/* View/Edit Mode Toggle */}\r\n                    <div className=\"grid grid-cols-2 gap-2 p-1 bg-muted rounded-lg\">\r\n                      <Button\r\n                        variant={isViewMode ? \"default\" : \"ghost\"}\r\n                        size=\"sm\"\r\n                        onClick={() => setIsViewMode(true)}\r\n                        className=\"w-full\"\r\n                      >\r\n                        <Eye className=\"h-4 w-4 mr-2\" />\r\n                        View\r\n                      </Button>\r\n                      <Button\r\n                        variant={!isViewMode ? \"default\" : \"ghost\"}\r\n                        size=\"sm\"\r\n                        onClick={() => setIsViewMode(false)}\r\n                        className=\"w-full\"\r\n                      >\r\n                        <Edit className=\"h-4 w-4 mr-2\" />\r\n                        Edit\r\n                      </Button>\r\n                    </div>\r\n\r\n                    {/* Grade Selection */}\r\n                    <div className=\"space-y-2\">\r\n                      <div className=\"flex items-center justify-between\">\r\n                        <Label htmlFor=\"grade-select\">Grade</Label>\r\n                        {isViewMode && (\r\n                          <Button variant=\"ghost\" size=\"sm\" onClick={() => setExpandedGrade(expandedGrade ? null : selectedGrade)}>\r\n                            {expandedGrade ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n                          </Button>\r\n                        )}\r\n                      </div>\r\n                      <Select \r\n                        value={selectedGradeId || ''}\r\n                        onValueChange={handleGradeSelect}\r\n                        onOpenChange={(open) => {\r\n                          if (open) {\r\n                            // Force sidebar to stay open and lock it\r\n                            setIsSidebarCollapsed(false);\r\n                            setIsSidebarLocked(true);\r\n                          }\r\n                        }}\r\n                      >\r\n                        <SelectTrigger \r\n                          id=\"grade-select\" \r\n                          className=\"w-full\"\r\n                          onClick={(e) => {\r\n                            e.stopPropagation(); // Prevent event bubbling\r\n                            setIsSidebarCollapsed(false);\r\n                            setIsSidebarLocked(true);\r\n                          }}\r\n                        >\r\n                          <SelectValue placeholder=\"Select Grade\" />\r\n                        </SelectTrigger>\r\n                        <SelectContent \r\n                          onCloseAutoFocus={(e) => {\r\n                            e.preventDefault();\r\n                            setIsSidebarLocked(true);\r\n                            setIsSidebarCollapsed(false);\r\n                          }}\r\n                        >\r\n                          {grades.map((grade: Grade) => (\r\n                            <SelectItem \r\n                              key={`grade-${grade.id || 'new'}`} \r\n                              value={grade.id || ''}\r\n                              onMouseDown={(e) => {\r\n                                e.preventDefault();\r\n                                e.stopPropagation();\r\n                              }}\r\n                            >\r\n                              <div className=\"flex items-center gap-2\">\r\n                                <BookOpen className=\"h-4 w-4 text-primary\" />\r\n                                {grade.name}\r\n                              </div>\r\n                            </SelectItem>\r\n                          ))}\r\n                        </SelectContent>\r\n                      </Select>\r\n                      {!isViewMode && (\r\n                      <Button \r\n                        variant=\"outline\" \r\n                        size=\"sm\" \r\n                        className=\"w-full gap-2\"\r\n                        onClick={() => setModalState({ ...modalState, showAddGrade: true })}\r\n                      >\r\n                        <Plus className=\"h-4 w-4\" />\r\n                        Add New Grade\r\n                      </Button>\r\n                      )}\r\n                    </div>\r\n\r\n                    {/* Content Tree View in View Mode */}\r\n                    {isViewMode && expandedGrade && (\r\n                      <div className=\"mt-4 space-y-4\">\r\n                        {topics.map((topic: Topic) => (\r\n                          <Card key={topic.id} className=\"border-l-4 border-l-primary\">\r\n                            <CardHeader className=\"py-3\">\r\n                              <div className=\"flex items-center justify-between\">\r\n                                <h4 className=\"font-medium\">{topic.title}</h4>\r\n                                <Button \r\n                                  variant=\"ghost\" \r\n                                  size=\"sm\" \r\n                                  onClick={() => handleTopicExpand(topic.id || '')}\r\n                                >\r\n                                  {expandedTopic === topic.id ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n                                </Button>\r\n                              </div>\r\n                            </CardHeader>\r\n                            {expandedTopic === topic.id && (\r\n                              <CardContent className=\"py-0 pl-4\">\r\n                                {subtopics\r\n                                  .filter(subtopic => subtopic.topic_id === topic.id)\r\n                                  .map((subtopic: SubTopic) => (\r\n                                    <div key={subtopic.id} className=\"mb-3 last:mb-0\">\r\n                                      <div className=\"flex items-center justify-between py-2\">\r\n                                        <span className=\"text-sm font-medium\">{subtopic.name}</span>\r\n                                        <Button \r\n                                          variant=\"ghost\" \r\n                                          size=\"sm\" \r\n                                          onClick={() => handleSubtopicExpand(subtopic.id || '')}\r\n                                        >\r\n                                          {expandedSubtopic === subtopic.id ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n                                        </Button>\r\n                                      </div>\r\n                                      {expandedSubtopic === subtopic.id && (\r\n                                        <div className=\"pl-4 space-y-2\">\r\n                                          {lessons\r\n                                            .filter(lesson => lesson.subtopic_id === subtopic.id)\r\n                                            .map((lesson: Lesson) => (\r\n                                              <div\r\n                                                key={lesson.id}\r\n                                                className=\"flex items-center gap-2 py-1 px-2 rounded-md hover:bg-accent cursor-pointer\"\r\n                                                onClick={() => {\r\n                                                  const lessonId = lesson.id || '';\r\n                                                  const topicId = topic.id || '';\r\n                                                  const subtopicId = subtopic.id || '';\r\n                                                  \r\n                                                  setCurrentLessonId(lessonId);\r\n                                                  setSelectedTopicId(topicId);\r\n                                                  setSelectedSubtopicId(subtopicId);\r\n                                                }}\r\n                                              >\r\n                                                <BookOpen className=\"h-4 w-4 text-muted-foreground\" />\r\n                                                <span className=\"text-sm\">{lesson.title}</span>\r\n                                              </div>\r\n                                            ))}\r\n                                        </div>\r\n                                      )}\r\n                                    </div>\r\n                                  ))}\r\n                              </CardContent>\r\n                            )}\r\n                          </Card>\r\n                        ))}\r\n                      </div>\r\n                    )}\r\n\r\n                    {/* Regular Edit Mode Content */}\r\n                    {!isViewMode && (\r\n                      <>\r\n                        {/* Existing Topic, Subtopic, and Lesson Selection UI */}\r\n                      {/* Topic Selection */}\r\n                        {selectedGradeId && (\r\n                      <div className=\"space-y-2\">\r\n                        <div className=\"flex items-center justify-between\">\r\n                        <Label htmlFor=\"topic-select\">Topic</Label>\r\n                        </div>\r\n                        <Select \r\n                              value={selectedTopicId || ''} \r\n                              onValueChange={handleTopicSelect}\r\n                        >\r\n                          <SelectTrigger id=\"topic-select\" className=\"w-full\">\r\n                            <SelectValue placeholder=\"Select Topic\" />\r\n                          </SelectTrigger>\r\n                          <SelectContent>\r\n                                {topics.map((topic: Topic) => (\r\n                                  <SelectItem \r\n                                    key={`topic-${topic.id || 'new'}`} \r\n                                    value={topic.id || ''}\r\n                                  >\r\n                                  <div className=\"flex items-center gap-2\">\r\n                                  <Layers className=\"h-4 w-4 text-primary\" />\r\n                                    {topic.title}\r\n                                  </div>\r\n                                </SelectItem>\r\n                              ))}\r\n                          </SelectContent>\r\n                        </Select>\r\n                        <Button \r\n                          variant=\"outline\" \r\n                          size=\"sm\" \r\n                          className=\"w-full gap-2\"\r\n                          onClick={() => setModalState({ ...modalState, showAddTopic: true })}\r\n                        >\r\n                          <Plus className=\"h-4 w-4\" />\r\n                          Add New Topic\r\n                        </Button>\r\n                      </div>\r\n                    )}\r\n\r\n                    {/* Subtopic Selection */}\r\n                        {selectedTopicId && (\r\n                      <div className=\"space-y-2\">\r\n                        <div className=\"flex items-center justify-between\">\r\n                        <Label htmlFor=\"subtopic-select\">Subtopic</Label>\r\n                        </div>\r\n                        <Select \r\n                              value={selectedSubtopicId || ''} \r\n                              onValueChange={handleSubtopicSelect}\r\n                        >\r\n                          <SelectTrigger id=\"subtopic-select\" className=\"w-full\">\r\n                            <SelectValue placeholder=\"Select Subtopic\" />\r\n                          </SelectTrigger>\r\n                          <SelectContent>\r\n                                {subtopics\r\n                                  .filter(subtopic => subtopic.id)\r\n                                  .map((subtopic, index) => (\r\n                                    <SelectItem \r\n                                      key={subtopic.id || `subtopic-${index}`}\r\n                                      value={subtopic.id || ''}\r\n                                    >\r\n                                      {subtopic.title || 'Untitled Subtopic'}\r\n                                    </SelectItem>\r\n                                  ))}\r\n                          </SelectContent>\r\n                        </Select>\r\n                        {!isViewMode && (\r\n                          <Button \r\n                            variant=\"outline\" \r\n                            size=\"sm\" \r\n                            className=\"w-full gap-2\"\r\n                            onClick={() => setModalState({ ...modalState, showAddSubtopic: true })}\r\n                          >\r\n                            <Plus className=\"h-4 w-4\" />\r\n                            Add New Subtopic\r\n                          </Button>\r\n                        )}\r\n                      </div>\r\n                    )}\r\n\r\n                    {/* Lesson Selection */}\r\n                        {selectedSubtopicId && (\r\n                      <div className=\"space-y-2\">\r\n                        <div className=\"flex items-center justify-between\">\r\n                          <Label htmlFor=\"lesson-select\">Lesson</Label>\r\n                        </div>\r\n                          <Select \r\n                            value={currentLessonId || ''} \r\n                            onValueChange={handleLessonSelect}\r\n                          >\r\n                            <SelectTrigger id=\"lesson-select\" className=\"w-full\">\r\n                              <SelectValue placeholder=\"Select Lesson\" />\r\n                            </SelectTrigger>\r\n                            <SelectContent>\r\n                              {lessons\r\n                                .filter((lesson): lesson is Lesson => lesson !== undefined && lesson !== null)\r\n                                .map((lesson: Lesson) => (\r\n                                  <SelectItem \r\n                                    key={`lesson-${lesson.id || 'new'}`} \r\n                                    value={lesson.id || ''}\r\n                                  >\r\n                                    <div className=\"flex items-center gap-2\">\r\n                                      <BookOpen className=\"h-4 w-4 text-primary\" />\r\n                                      {lesson.title || 'Untitled Lesson'}\r\n                                    </div>\r\n                                  </SelectItem>\r\n                                ))}\r\n                            </SelectContent>\r\n                          </Select>\r\n                    <Button \r\n                            variant=\"outline\" \r\n                            size=\"sm\" \r\n                            className=\"w-full gap-2\"\r\n                        onClick={() => setModalState({ ...modalState, showAddLesson: true })}\r\n                          >\r\n                            <Plus className=\"h-4 w-4\" />\r\n                            Add New Lesson\r\n                    </Button>\r\n                      </div>\r\n                        )}\r\n                      </>\r\n                    )}\r\n                  </CardContent>\r\n                </Card>\r\n              </div>\r\n\r\n              {/* Collapsed view */}\r\n              {isSidebarCollapsed && (\r\n                <div className=\"absolute inset-0 flex flex-col items-center pt-12 gap-4\">\r\n                  <BookOpen className=\"h-6 w-6 text-muted-foreground\" />\r\n                  <div className=\"w-px h-full bg-border\" />\r\n                </div>\r\n              )}\r\n            </Card>\r\n          </div>\r\n        \r\n\r\n          {/* Right Content Area */}\r\n          <div className=\"flex-1 overflow-y-auto\">\r\n            {isNavigating ? (\r\n              <div className=\"flex items-center justify-center h-[400px]\">\r\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n                <span className=\"ml-3\">Loading...</span>\r\n              </div>\r\n            ) : (\r\n              <>\r\n                {!selectedGradeId ? (\r\n                  // Question Types Display Section\r\n                  <div className=\"space-y-6\">\r\n                    <Card>\r\n                      <CardHeader>\r\n                        <div className=\"flex items-center justify-between\">\r\n                          <div>\r\n                            <CardTitle className=\"text-xl font-semibold\">Available Question Types</CardTitle>\r\n                            <CardDescription>Browse through different question formats and examples</CardDescription>\r\n                          </div>\r\n                          <TooltipProvider>\r\n                            <Tooltip>\r\n                              <TooltipTrigger>\r\n                                <HelpCircle className=\"h-5 w-5 text-muted-foreground\" />\r\n                              </TooltipTrigger>\r\n                              <TooltipContent>\r\n                                <p>Click on each type to see detailed examples</p>\r\n                              </TooltipContent>\r\n                            </Tooltip>\r\n                          </TooltipProvider>\r\n                        </div>\r\n                      </CardHeader>\r\n                      <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                        {Object.entries(QUESTION_TYPES).map(([type, details]) => (\r\n                          <Card key={type} className=\"cursor-pointer hover:bg-accent/50 transition-colors\">\r\n                            <CardHeader className=\"p-4\">\r\n                              <div className=\"flex items-center justify-between mb-2\">\r\n                                <Badge variant=\"outline\" className=\"bg-primary/5 text-lg\">\r\n                                  {details.label}\r\n                                </Badge>\r\n                              </div>\r\n                              <CardDescription className=\"text-sm\">\r\n                                {details.description || 'No description available'}\r\n                              </CardDescription>\r\n                              <div className=\"mt-4\">\r\n                                <div className=\"text-sm font-medium mb-2\">Example:</div>\r\n                                <div className=\"p-3 rounded-md bg-muted/50 text-sm\">\r\n                                  {type === 'multiple-choice' && (\r\n                                    <>\r\n                                      <div className=\"font-medium mb-2\">Q: What is the capital of France?</div>\r\n                                      <div className=\"space-y-1 pl-4\">\r\n                                        <div>A) Paris</div>\r\n                                        <div>B) London</div>\r\n                                        <div>C) Berlin</div>\r\n                                        <div>D) Madrid</div>\r\n                                      </div>\r\n                                    </>\r\n                                  )}\r\n                                  {type === 'fill-in-blank' && (\r\n                                    <div className=\"space-y-2\">\r\n                                      <div>Complete the sentence:</div>\r\n                                      <div>The sun rises in the <span className=\"bg-primary/20 px-2 rounded\">_____</span> and sets in the <span className=\"bg-primary/20 px-2 rounded\">_____</span>.</div>\r\n                                    </div>\r\n                                  )}\r\n                                  {type === 'true-false' && (\r\n                                    <div className=\"space-y-2\">\r\n                                      <div className=\"font-medium\">Statement:</div>\r\n                                      <div>The Earth is flat.</div>\r\n                                      <div className=\"mt-2\">\r\n                                        <Badge variant=\"outline\" className=\"mr-2\">True</Badge>\r\n                                        <Badge variant=\"outline\">False</Badge>\r\n                                      </div>\r\n                                    </div>\r\n                                  )}\r\n                                  {type === 'matching' && (\r\n                                    <div className=\"space-y-2\">\r\n                                      <div className=\"font-medium mb-2\">Match the countries with their capitals:</div>\r\n                                      <div className=\"grid grid-cols-2 gap-4\">\r\n                                        <div>\r\n                                          1. France<br />\r\n                                          2. Germany<br />\r\n                                          3. Spain\r\n                                        </div>\r\n                                        <div>\r\n                                          • Berlin<br />\r\n                                          • Paris<br />\r\n                                          • Madrid\r\n                                        </div>\r\n                                      </div>\r\n                                    </div>\r\n                                  )}\r\n                                  {type === 'ordering' && (\r\n                                    <div className=\"space-y-2\">\r\n                                      <div className=\"font-medium mb-2\">Arrange in chronological order:</div>\r\n                                      <div className=\"space-y-1\">\r\n                                        <Badge variant=\"outline\" className=\"mr-2\">1</Badge>World War II<br />\r\n                                        <Badge variant=\"outline\" className=\"mr-2\">2</Badge>Industrial Revolution<br />\r\n                                        <Badge variant=\"outline\" className=\"mr-2\">3</Badge>Renaissance\r\n                                      </div>\r\n                                    </div>\r\n                                  )}\r\n                                  {type === 'short-answer' && (\r\n                                    <div className=\"space-y-2\">\r\n                                      <div className=\"font-medium\">Question:</div>\r\n                                      <div>Explain the water cycle in 2-3 sentences.</div>\r\n                                      <div className=\"mt-2 p-2 border border-dashed rounded-md border-primary/30\">\r\n                                        Answer space\r\n                                      </div>\r\n                                    </div>\r\n                                  )}\r\n                                </div>\r\n                              </div>\r\n                            </CardHeader>\r\n                          </Card>\r\n                        ))}\r\n                      </CardContent>\r\n                    </Card>\r\n                  </div>\r\n                ) : isViewMode ? (\r\n                  <div className=\"space-y-6\">\r\n                    {selectedGradeId ? (\r\n                      <div className=\"grid grid-cols-1 gap-6\">\r\n                        {topics.map((topic) => (\r\n                          <Card key={topic.id} className=\"border-l-4 border-l-primary\">\r\n                            <CardHeader>\r\n                              <div className=\"flex items-center justify-between\">\r\n                                <h3 className=\"text-lg font-semibold\">{topic.title}</h3>\r\n                              </div>\r\n                            </CardHeader>\r\n                            <CardContent>\r\n                              <div className=\"space-y-4\">\r\n                                {subtopics\r\n                                  .filter(subtopic => subtopic.topic_id === topic.id)\r\n                                  .map((subtopic, index) => (\r\n                                    <div key={subtopic.id || `subtopic-${index}`} className=\"border-l-2 pl-4\">\r\n                                      <h4 className=\"text-md font-medium mb-2\">{subtopic.name || 'Untitled Subtopic'}</h4>\r\n                                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n                                        {lessons\r\n                                          .filter(lesson => lesson.subtopic_id === subtopic.id)\r\n                                          .map((lesson) => (\r\n                                            <Card \r\n                                              key={lesson.id} \r\n                                              className=\"cursor-pointer hover:bg-accent transition-colors duration-200\"\r\n                                              onClick={() => {\r\n                                                setCurrentLessonId(lesson.id || '');\r\n                                                setSelectedTopicId(topic.id || '');\r\n                                                setSelectedSubtopicId(subtopic.id || '');\r\n                                                setIsViewMode(false);\r\n                                              }}\r\n                                            >\r\n                                              <CardHeader className=\"py-3\">\r\n                                                <div className=\"flex flex-col gap-2\">\r\n                                                  <div className=\"flex items-center gap-2\">\r\n                                                    <BookOpen className=\"h-4 w-4 text-primary\" />\r\n                                                    <span className=\"font-medium\">{lesson.title}</span>\r\n                                                  </div>\r\n                                                  <div className=\"flex items-center gap-2\">\r\n                                                    <Badge variant=\"outline\" className=\"bg-primary/5\">\r\n                                                      {lesson.questions?.length || 0} Questions\r\n                                                    </Badge>\r\n                                                    <Badge variant=\"outline\" className=\"bg-primary/5\">\r\n                                                      {lesson.activities?.length || 0} Activities\r\n                                                    </Badge>\r\n                                                  </div>\r\n                                                </div>\r\n                                              </CardHeader>\r\n                                            </Card>\r\n                                          ))}\r\n                                      </div>\r\n                                    </div>\r\n                                  ))}\r\n                              </div>\r\n                            </CardContent>\r\n                          </Card>\r\n                        ))}\r\n                      </div>\r\n                    ) : (\r\n                      <div className=\"text-center py-20\">\r\n                        <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\r\n                        <h3 className=\"text-lg font-medium\">Select a Grade</h3>\r\n                        <p className=\"text-sm text-muted-foreground\">\r\n                          Choose a grade from the left panel to start managing content\r\n                        </p>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                ) : (\r\n                  // Edit Mode Content\r\n                  <div className=\"space-y-4\">\r\n                    {/* Lesson Title */}\r\n                    <Card>\r\n                      <CardHeader>\r\n                        <div className=\"flex items-center justify-between mb-4\">\r\n                          <h2 className=\"text-2xl font-bold\">Lesson Content</h2>\r\n                          <Button \r\n                            variant=\"outline\" \r\n                            size=\"sm\"\r\n                            onClick={() => setIsContentEditorOpen(true)}\r\n                          >\r\n                            <Pencil className=\"h-4 w-4 mr-2\" />\r\n                            Edit Content\r\n                          </Button>\r\n                        </div>\r\n                      </CardHeader>\r\n                      <CardContent className=\"space-y-4\">\r\n                        {/* Lesson Title */}\r\n                        <div className=\"flex items-center justify-between\">\r\n                          <div className=\"space-y-1\">\r\n                            <Label>Lesson Title</Label>\r\n                            <InlineEdit\r\n                              value={lessonTitle}\r\n                              onSave={async (newTitle) => {\r\n                                setLessonTitle(newTitle);\r\n                                await handleSaveLesson();\r\n                              }}\r\n                              isEditing={isEditingTitle}\r\n                              setIsEditing={setIsEditingTitle}\r\n                              placeholder=\"Enter lesson title\"\r\n                              className=\"text-lg font-medium\"\r\n                            />\r\n                          </div>\r\n                        </div>\r\n\r\n                        {/* Content Editor and Display */}\r\n                        <div className=\"space-y-4\">\r\n                          {isContentEditorOpen ? (\r\n                            <div className=\"border rounded-lg p-4\">\r\n                              <div className=\"mb-4\">\r\n                                <Label>Content Heading</Label>\r\n                                <InlineEdit\r\n                                  value={contentHeading}\r\n                                  onSave={(newHeading) => setContentHeading(newHeading)}\r\n                                  isEditing={isEditingHeading}\r\n                                  setIsEditing={setIsEditingHeading}\r\n                                  placeholder=\"Add content heading\"\r\n                                  className=\"text-base text-muted-foreground\"\r\n                                />\r\n                              </div>\r\n                              <RichTextEditor\r\n                                value={lessonContent}\r\n                                onChange={setLessonContent}\r\n                                onSave={async (content) => {\r\n                                  await handleContentSave(content);\r\n                                  setIsContentEditorOpen(false);\r\n                                }}\r\n                                placeholder=\"Add lesson content here...\"\r\n                              />\r\n                            </div>\r\n                          ) : lessonContent ? (\r\n                            <div className=\"prose prose-sm max-w-none\">\r\n                              {contentHeading && (\r\n                                <h3 className=\"text-lg font-semibold mb-2\">{contentHeading}</h3>\r\n                              )}\r\n                              <div dangerouslySetInnerHTML={{ __html: lessonContent }} />\r\n                            </div>\r\n                          ) : (\r\n                            <div className=\"text-center py-8 text-muted-foreground\">\r\n                              Click 'Edit Content' to add lesson content\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </CardContent>\r\n                    </Card>\r\n\r\n                    {/* Tabs */}\r\n                    <Tabs defaultValue=\"questions\" className=\"mt-6\">\r\n                    <TabsList className=\"grid w-full grid-cols-2\">\r\n                        <TabsTrigger value=\"questions\">\r\n                          <MessageSquare className=\"h-4 w-4 mr-2\" />\r\n                        Questions\r\n                      </TabsTrigger>\r\n                        <TabsTrigger value=\"activities\">\r\n                          <ActivityIcon className=\"h-4 w-4 mr-2\" />\r\n                        Activities\r\n                      </TabsTrigger>\r\n                    </TabsList>\r\n\r\n                      {/* Questions Tab */}\r\n                      <TabsContent value=\"questions\" className=\"space-y-4\">\r\n                      <CardHeader>\r\n                          <CardDescription>Add and manage questions for this lesson</CardDescription>\r\n                      </CardHeader>\r\n                        {questions.map((question, index) => (\r\n                          <Card key={index} className={cn(\r\n                            \"relative border-l-4 transition-colors duration-200\",\r\n                            expandedQuestion === index ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\r\n                          )}>\r\n                            <CardHeader className=\"pb-3\">\r\n                              <div className=\"flex items-center justify-between gap-4\">\r\n                                <div className=\"flex items-center gap-3 min-w-0 flex-1\">\r\n                                  <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n                                    <span className=\"px-2 py-1 bg-primary/10 rounded-md text-sm font-semibold text-primary whitespace-nowrap\">\r\n                                      Q {index + 1}\r\n                                    </span>\r\n                                    <Badge variant=\"outline\" className=\"whitespace-nowrap\">\r\n                                      {QUESTION_TYPES[question.type as keyof typeof QUESTION_TYPES]?.label || question.type}\r\n                                    </Badge>\r\n                                    {question.isDraft && (\r\n                                      <Badge variant=\"secondary\" className=\"whitespace-nowrap\">Draft</Badge>\r\n                                )}\r\n                                  </div>\r\n                                      {expandedQuestion !== index && (\r\n                                        <div className=\"text-sm text-muted-foreground truncate\">\r\n                                          {question.metadata?.prompt || 'No question text'}\r\n                                        </div>\r\n                                      )}\r\n                                    </div>\r\n                                    <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n                                      <Button\r\n                                        variant=\"ghost\"\r\n                                        size=\"sm\"\r\n                                        onClick={() => handleQuestionExpand(index)}\r\n                                      >\r\n                                        {expandedQuestion === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n                                      </Button>\r\n                                      <Button\r\n                                        variant=\"ghost\"\r\n                                        size=\"sm\"\r\n                                        onClick={() => handleRemoveQuestion(index)}\r\n                                      >\r\n                                        <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n                                      </Button>\r\n                                    </div>\r\n                                  </div>\r\n                                </CardHeader>\r\n                                {expandedQuestion === index && (\r\n                                  <CardContent>\r\n                                    <QuestionForm\r\n                                      key={index}\r\n                                      question={{ \r\n                                        ...question, \r\n                                        lesson_id: currentLessonId || '',\r\n                                        type: (question.type || 'speaking') as Question['type']  // Default to 'speaking' if undefined\r\n                                      }}\r\n                                      index={index}\r\n                                      onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\r\n                                        await handleUpdateQuestion(index, {\r\n                                          ...updatedQuestion,\r\n                                          data: {\r\n                                            prompt: updatedQuestion.data?.prompt || '',\r\n                                            teacherScript: updatedQuestion.data?.teacherScript || '',\r\n                                            followup_prompt: updatedQuestion.data?.followup_prompt || [],\r\n                                            sampleAnswer: updatedQuestion.data?.sampleAnswer,\r\n                                            answer: updatedQuestion.data?.answer\r\n                                          }\r\n                                        });\r\n                                      }}\r\n                                      onRemove={handleRemoveQuestion}\r\n                                      onAddExercisePrompt={handleAddExercisePrompt}\r\n                                      onRemoveExercisePrompt={handleRemoveExercisePrompt}\r\n                                      onExercisePromptChange={handleExercisePromptChange}\r\n                                    /><Button \r\n                                    size=\"sm\"\r\n                                    variant=\"outline\"\r\n                                    onClick={() => handleSaveQuestion(question, index)}\r\n                                    className=\"ml-2\"\r\n                                  >\r\n                                    {questionSaveStatuses.find(s => s.id === question.id)?.status === 'saving' ? (\r\n                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n                                    ) : (\r\n                                      <Save className=\"h-4 w-4 mr-2\" />\r\n                                    )}\r\n                                    Save Question\r\n                                  </Button>\r\n                                    {/* Exercise Prompts with Save Buttons */}\r\n                                    {question.exercisePrompts?.map((prompt, promptIndex) => (\r\n                                      <div key={`${question.id}-prompt-${promptIndex}`} className=\"mt-4\"> {/* Updated key */}\r\n                                        <div className=\"flex items-center justify-between mb-2\">\r\n                                          <h4 className=\"text-sm font-medium\">Exercise Prompt {promptIndex + 1}</h4>\r\n                                          <div className=\"flex items-center gap-2\">\r\n                                            <TooltipProvider>\r\n                                              <Tooltip>\r\n                                                <TooltipTrigger asChild>\r\n                                                  <Button\r\n                                                    size=\"sm\"\r\n                                                    variant=\"outline\"\r\n                                                    onClick={() => handleSavePrompt(question.id, prompt, promptIndex)}\r\n                                                    disabled={promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving'}\r\n                                                  >\r\n                                                    {promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving' ? (\r\n                                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n                                                    ) : (\r\n                                                      <Save className=\"h-4 w-4 mr-2\" />\r\n                                                    )}\r\n                                                    Save Prompt\r\n                                                  </Button>\r\n                                                </TooltipTrigger>\r\n                                                <TooltipContent>\r\n                                                  {`Status: ${promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}`}\r\n                                                </TooltipContent>\r\n                                              </Tooltip>\r\n                                            </TooltipProvider>\r\n                                            <Badge variant={\r\n                                              promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saved'\r\n                                                ? 'secondary'\r\n                                                : promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'error'\r\n                                                ? 'destructive'\r\n                                                : 'default'\r\n                                            }>\r\n                                              {promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}\r\n                                            </Badge>\r\n                                          </div>\r\n                                        </div>\r\n                                        <ExercisePromptCard\r\n                                          key={prompt.id} // Add a unique key here\r\n                                          prompt={prompt}\r\n                                          promptIndex={promptIndex}\r\n                                          onRemove={() => handleRemoveExercisePrompt(index, promptIndex)}\r\n                                          onUpdate={(updatedPrompt: ExercisePrompt) => {\r\n                                            // Prevent duplicate updates\r\n                                            if (updatedPrompt.id === prompt.id) {\r\n                                              handleExercisePromptChange(index, promptIndex, updatedPrompt);\r\n                                            }\r\n                                          }}\r\n                                        />\r\n                                      </div>\r\n                                    ))}\r\n                                  </CardContent>\r\n                                )}\r\n                              </Card>\r\n                            ))}\r\n\r\n                            {/* Add Question Button */}\r\n                            <div className=\"flex items-center justify-between\">\r\n                              <QuestionTypeSelect \r\n                                value={selectedQuestionType} \r\n                                onChange={handleQuestionTypeChange}\r\n                              />\r\n                                        <Button\r\n                                          onClick={handleAddQuestion}\r\n                                          disabled={!selectedQuestionType}\r\n                                        >\r\n                                <Plus className=\"h-4 w-4 mr-2\" />\r\n                                          Add Question\r\n                                        </Button>\r\n                                      </div>\r\n                      </TabsContent>\r\n\r\n                      {/* Activities Tab */}\r\n                      <TabsContent value=\"activities\" className=\"space-y-4\">\r\n                      <CardHeader>\r\n                          <CardDescription>Add and manage activities for this lesson</CardDescription>\r\n                      </CardHeader>\r\n                        {activities.map((activity, index) => (\r\n                          <Card key={index}>\r\n                            <CardHeader className=\"pb-3\">\r\n                              <div className=\"flex items-center justify-between\">\r\n                                  <div className=\"flex items-center gap-2\">\r\n                                  <Badge variant=\"outline\">Activity {index + 1}</Badge>\r\n                                  </div>\r\n                                <div className=\"flex items-center gap-2\">\r\n                                  <Button\r\n                                    variant=\"ghost\"\r\n                                    size=\"sm\"\r\n                                    onClick={() => handleActivityExpand(index)}\r\n                                  >\r\n                                    {expandedActivity === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n                                  </Button>\r\n                                  <Button\r\n                                    variant=\"ghost\"\r\n                                    size=\"sm\"\r\n                                    onClick={() => handleRemoveActivity(index)}\r\n                                  >\r\n                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n                                  </Button>\r\n                                </div>\r\n                              </div>\r\n                            </CardHeader>\r\n                            {expandedActivity === index && (\r\n                              <CardContent>\r\n                                <div className=\"space-y-4\">\r\n                                  <div className=\"space-y-2\">\r\n                                    <Label>Instructions</Label>\r\n                                    <Textarea\r\n                                      value={activity.instructions}\r\n                                      onChange={(e) => handleUpdateActivity(index, {\r\n                                        ...activity,\r\n                                        instructions: e.target.value\r\n                                      })}\r\n                                      placeholder=\"Enter activity instructions\"\r\n                                    />\r\n                                  </div>\r\n                                    \r\n                                    {/* Media Section */}\r\n                                    <div className=\"space-y-2\">\r\n                                      <Label>Media</Label>\r\n                                      {activity.media?.map((media, mediaIndex) => (\r\n                                        <div key={mediaIndex} className=\"flex items-center gap-2\">\r\n                                          <Input\r\n                                            value={media.url}\r\n                                            onChange={(e) => {\r\n                                              const updatedMedia = [...(activity.media || [])];\r\n                                              updatedMedia[mediaIndex] = {\r\n                                                type: media.type,\r\n                                                url: e.target.value\r\n                                              };\r\n                                              handleUpdateActivity(index, {\r\n                                                ...activity,\r\n                                                media: updatedMedia\r\n                                              });\r\n                                            }}\r\n                                            placeholder=\"Media URL\"\r\n                                          />\r\n                                          <Select\r\n                                            value={media.type}\r\n                                            onValueChange={(value) => {\r\n                                              const updatedMedia = [...(activity.media || [])];\r\n                                              updatedMedia[mediaIndex] = {\r\n                                                type: value as 'image' | 'gif' | 'video',\r\n                                                url: media.url\r\n                                              };\r\n                                              handleUpdateActivity(index, {\r\n                                                ...activity,\r\n                                                media: updatedMedia\r\n                                              });\r\n                                            }}\r\n                                          >\r\n                                            <SelectTrigger className=\"w-[120px]\">\r\n                                              <SelectValue placeholder=\"Type\" />\r\n                                            </SelectTrigger>\r\n                                            <SelectContent>\r\n                                              <SelectItem value=\"image\">Image</SelectItem>\r\n                                              <SelectItem value=\"gif\">GIF</SelectItem>\r\n                                              <SelectItem value=\"video\">Video</SelectItem>\r\n                                            </SelectContent>\r\n                                          </Select>\r\n                                <Button\r\n                                            variant=\"ghost\"\r\n                                            size=\"sm\"\r\n                                  onClick={() => {\r\n                                              const updatedMedia = (activity.media || []).filter((_, i) => i !== mediaIndex);\r\n                                              handleUpdateActivity(index, {\r\n                                                ...activity,\r\n                                                media: updatedMedia\r\n                                          });\r\n                                          }}\r\n                                  >\r\n                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n                                  </Button>\r\n                                </div>\r\n                                        ))}\r\n                                  <Button\r\n                                    variant=\"outline\"\r\n                                    size=\"sm\"\r\n                                            onClick={() => {\r\n                                              handleUpdateActivity(index, {\r\n                                                ...activity,\r\n                                                media: [\r\n                                                  ...(activity.media || [])  ,\r\n                                                  { url: '', type: 'image' }\r\n                                                ]\r\n                                              });\r\n                                            }}\r\n                                  >\r\n                                    <Plus className=\"h-4 w-4 mr-2\" />\r\n                                            Add Media\r\n                                  </Button>\r\n                                </div>\r\n                                      </div>\r\n                                    </CardContent>\r\n                                  )}\r\n                                </Card>\r\n                              ))}\r\n\r\n                              {/* Add Activity Button */}\r\n                              <Button\r\n                                onClick={handleAddActivity}\r\n                                className=\"w-full\"\r\n                              >\r\n                                <Plus className=\"h-4 w-4 mr-2\" />\r\n                                Add Activity\r\n                              </Button>\r\n                          </TabsContent>\r\n                        </Tabs>\r\n                        </div>\r\n                )}\r\n\r\n                    {/* Floating Save Button */}\r\n                    <div className=\"fixed bottom-8 right-8 flex items-center gap-4\">\r\n                      {saveProgress !== 'idle' && (\r\n                        <div className={cn(\r\n                          \"flex items-center gap-2 rounded-lg px-4 py-2 shadow-lg\",\r\n                          {\r\n                            \"bg-background border\": saveProgress === 'saving',\r\n                            \"bg-green-500 text-white\": saveProgress === 'saved',\r\n                            \"bg-destructive text-destructive-foreground\": saveProgress === 'error'\r\n                          }\r\n                        )}>\r\n                          {saveProgress === 'saving' && (\r\n                            <>\r\n                              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n                              <span className=\"text-sm\">Saving changes...</span>\r\n                            </>\r\n                          )}\r\n                          {saveProgress === 'saved' && (\r\n                            <>\r\n                              <Check className=\"h-4 w-4\" />\r\n                              <span className=\"text-sm\">Changes saved</span>\r\n                            </>\r\n                          )}\r\n                          {saveProgress === 'error' && (\r\n                            <>\r\n                              <X className=\"h-4 w-4\" />\r\n                              <span className=\"text-sm\">Error saving changes</span>\r\n                            </>\r\n                          )}\r\n                        </div>\r\n                      )}\r\n                      <Button\r\n                        onClick={handleSaveLesson}\r\n                        disabled={saveProgress === 'saving'}\r\n                        className=\"shadow-lg\"\r\n                      >\r\n                        {saveProgress === 'saving' ? (\r\n                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\r\n                        ) : (\r\n                          <Save className=\"h-4 w-4 mr-2\" />\r\n                        )}\r\n                        {saveProgress === 'saving' ? 'Saving...' : 'Save Lesson'}\r\n                      </Button>\r\n                    </div>\r\n                  </>\r\n            )}\r\n    </div>\r\n    \r\n\r\n      {/* Floating Save Button */}\r\n      {selectedSubtopicId && currentLessonId && (\r\n          <div className=\"fixed bottom-4 right-4 flex flex-col gap-2\">\r\n            <TooltipProvider>\r\n              <Tooltip>\r\n                <TooltipTrigger asChild>\r\n                  <Button\r\n                    size=\"icon\"\r\n                    className=\"rounded-full h-12 w-12 shadow-lg\"\r\n                    onClick={handleSaveLesson}\r\n                    disabled={!selectedSubtopicId || !lessonTitle || questions.length === 0}\r\n                  >\r\n                    <Save className=\"h-6 w-6\" />\r\n                  </Button>\r\n                </TooltipTrigger>\r\n                <TooltipContent>\r\n                  <p>Save Lesson (Ctrl+S)</p>\r\n                </TooltipContent>\r\n              </Tooltip>\r\n            </TooltipProvider>\r\n          </div>\r\n        )}\r\n        <SaveFeedback />\r\n\r\n        {/* Add Grade Modal */}\r\n        {modalState.showAddGrade && (\r\n          <Dialog \r\n            open={modalState.showAddGrade} \r\n            onOpenChange={(open) => handleModalStateChange('showAddGrade', open)}\r\n          >\r\n            <DialogContent \r\n              className=\"sm:max-w-[425px]\"\r\n              onEscapeKeyDown={cleanupModalState}\r\n              onPointerDownOutside={cleanupModalState}\r\n            >\r\n              <DialogHeader>\r\n                <DialogTitle>Add New Grade</DialogTitle>\r\n                <DialogDescription>Enter the details for the new grade.</DialogDescription>\r\n              </DialogHeader>\r\n              <div className=\"space-y-4 py-4\">\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"grade-name\">Grade Name</Label>\r\n                  <Input\r\n                    id=\"grade-name\"\r\n                    value={newItemData.name}\r\n                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n                    placeholder=\"Enter grade name\"\r\n                  />\r\n      </div>\r\n              </div>\r\n              <DialogFooter>\r\n                <Button variant=\"outline\" onClick={() => {\r\n                  setModalState({ ...modalState, showAddGrade: false });\r\n                  setNewItemData({ name: '', description: '' });\r\n                }}>\r\n                  Cancel\r\n                </Button>\r\n                <Button onClick={handleCreateGrade} disabled={!newItemData.name}>Create Grade</Button>\r\n              </DialogFooter>\r\n            </DialogContent>\r\n          </Dialog>\r\n        )}\r\n\r\n        {/* Add Topic Modal */}\r\n        {modalState.showAddTopic && (\r\n          <Dialog \r\n            open={modalState.showAddTopic} \r\n            onOpenChange={(open) => handleModalStateChange('showAddTopic', open)}\r\n          >\r\n            <DialogContent \r\n              className=\"sm:max-w-[425px]\"\r\n              onEscapeKeyDown={cleanupModalState}\r\n              onPointerDownOutside={cleanupModalState}\r\n            >\r\n              <DialogHeader>\r\n                <DialogTitle>Add New Topic</DialogTitle>\r\n                <DialogDescription>Enter the details for the new topic.</DialogDescription>\r\n              </DialogHeader>\r\n              <div className=\"space-y-4 py-4\">\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"topic-name\">Topic Name</Label>\r\n                  <Input\r\n                    id=\"topic-name\"\r\n                    value={newItemData.name}\r\n                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n                    placeholder=\"Enter topic name\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              <DialogFooter>\r\n                <Button variant=\"outline\" onClick={() => {\r\n                  setModalState({ ...modalState, showAddTopic: false });\r\n                  setNewItemData({ name: '', description: '' });\r\n                }}>\r\n                  Cancel\r\n                </Button>\r\n                <Button onClick={handleCreateTopic} disabled={!newItemData.name}>Create Topic</Button>\r\n              </DialogFooter>\r\n            </DialogContent>\r\n          </Dialog>\r\n        )}\r\n\r\n        {/* Add Subtopic Modal */}\r\n        {modalState.showAddSubtopic && (\r\n          <Dialog \r\n            open={modalState.showAddSubtopic} \r\n            onOpenChange={(open) => handleModalStateChange('showAddSubtopic', open)}\r\n          >\r\n            <DialogContent \r\n              className=\"sm:max-w-[425px]\"\r\n              onEscapeKeyDown={cleanupModalState}\r\n              onPointerDownOutside={cleanupModalState}\r\n            >\r\n              <DialogHeader>\r\n                <DialogTitle>Add New Subtopic</DialogTitle>\r\n                <DialogDescription>Enter the details for the new subtopic.</DialogDescription>\r\n              </DialogHeader>\r\n              <div className=\"space-y-4 py-4\">\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"subtopic-name\">Subtopic Name</Label>\r\n                  <Input\r\n                    id=\"subtopic-name\"\r\n                    value={newItemData.name}\r\n                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n                    placeholder=\"Enter subtopic name\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              <DialogFooter>\r\n                <Button variant=\"outline\" onClick={() => {\r\n                  setModalState({ ...modalState, showAddSubtopic: false });\r\n                  setNewItemData({ name: '', description: '' });\r\n                }}>\r\n                  Cancel\r\n                </Button>\r\n                <Button onClick={() => handleCreateSubtopic({ title: newItemData.name })} disabled={!newItemData.name}>Create Subtopic</Button>\r\n              </DialogFooter>\r\n            </DialogContent>\r\n          </Dialog>\r\n        )}\r\n\r\n        {/* Add Lesson Modal */}\r\n        {modalState.showAddLesson && (\r\n          <Dialog \r\n            open={modalState.showAddLesson} \r\n            onOpenChange={(open) => handleModalStateChange('showAddLesson', open)}\r\n          >\r\n            <DialogContent \r\n              className=\"sm:max-w-[425px]\"\r\n              onEscapeKeyDown={cleanupModalState}\r\n              onPointerDownOutside={cleanupModalState}\r\n            >\r\n              <DialogHeader>\r\n                <DialogTitle>Add New Lesson</DialogTitle>\r\n                <DialogDescription>Enter the details for the new lesson.</DialogDescription>\r\n              </DialogHeader>\r\n              <div className=\"space-y-4 py-4\">\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"lesson-name\">Lesson Title</Label>\r\n                  <Input\r\n                    id=\"lesson-name\"\r\n                    value={newItemData.name}\r\n                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n                    placeholder=\"Enter lesson title\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              <DialogFooter>\r\n                <Button variant=\"outline\" onClick={() => {\r\n                  setModalState({ ...modalState, showAddLesson: false });\r\n                  setNewItemData({ name: '', description: '' });\r\n                }}>\r\n                  Cancel\r\n                </Button>\r\n                <Button onClick={handleCreateLesson} disabled={!newItemData.name}>Create Lesson</Button>\r\n              </DialogFooter>\r\n            </DialogContent>\r\n          </Dialog>\r\n        )}\r\n      </div>\r\n      <Toaster />\r\n      </div>\r\n  );\r\n} "
        }
    ]
}