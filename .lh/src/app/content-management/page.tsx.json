{
    "sourceFile": "src/app/content-management/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 29,
            "patches": [
                {
                    "date": 1739045874777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739045974616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1198,37 +1198,37 @@\n       toast.error('Failed to create grade');\r\n     }\r\n   };\r\n \r\n-  const handleCreateTopic = async (topicData: CreateTopicInput) => {\r\n+  const handleCreateTopic = async () => {\r\n+    if (!selectedGradeId) {\r\n+      toast.error('Please select a grade first');\r\n+        return;\r\n+      }\r\n+\r\n     try {\r\n-      const { data, error } = await supabase\r\n-        .from('topics')\r\n-        .insert([\r\n-          {\r\n-            title: topicData.title,\r\n-            description: topicData.description,\r\n-            category_id: topicData.categoryId,\r\n-            created_by: user?.id // Assuming you have user context\r\n-          }\r\n-        ])\r\n-        .select()\r\n-        .single();\r\n+      const response = await fetch(`${API_ENDPOINT}/topics`, {\r\n+        method: 'POST',\r\n+        headers: { 'Content-Type': 'application/json' },\r\n+        body: JSON.stringify({\r\n+          name: newItemData.name,\r\n+          gradeId: selectedGradeId\r\n+        })\r\n+      });\r\n \r\n-      if (error) {\r\n-        throw error;\r\n-      }\r\n-\r\n-      // Optionally refresh topics list or add to local state\r\n-      setTopics(prev => [...prev, data]);\r\n+      if (!response.ok) throw new Error('Failed to create topic');\r\n+      const data = await response.json();\r\n       \r\n+      if (!data.success) throw new Error(data.message || 'Failed to create topic');\r\n+      \r\n+      // Update topics list\r\n+      setTopics([...topics, data.data.topic]);\r\n+      setModalState({ ...modalState, showAddTopic: false });\r\n+      setNewItemData({ name: '', description: '' });\r\n       toast.success('Topic created successfully');\r\n-      return data;\r\n-\r\n-    } catch (err) {\r\n-      logger.error(`Failed to create topic: ${err instanceof Error ? err.message : String(err)}`, 'TopicsPage');\r\n+    } catch (error) {\r\n+      console.error('Error creating topic:', error);\r\n       toast.error('Failed to create topic');\r\n-      throw new Error('Failed to create topic');\r\n     }\r\n   };\r\n \r\n   const handleCreateSubtopic = async (data: { title: string; description?: string }) => {\r\n"
                },
                {
                    "date": 1739046501153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1198,38 +1198,37 @@\n       toast.error('Failed to create grade');\r\n     }\r\n   };\r\n \r\n-  const handleCreateTopic = async () => {\r\n+  const handleCreateTopic = async (data: { title: string; description?: string }) => {\r\n     if (!selectedGradeId) {\r\n       toast.error('Please select a grade first');\r\n         return;\r\n       }\r\n \r\n-    try {\r\n-      const response = await fetch(`${API_ENDPOINT}/topics`, {\r\n-        method: 'POST',\r\n-        headers: { 'Content-Type': 'application/json' },\r\n-        body: JSON.stringify({\r\n-          name: newItemData.name,\r\n-          gradeId: selectedGradeId\r\n-        })\r\n+    const newTopic = await contentService.createTopic({\r\n+        ...data,\r\n+        gradeId: selectedGradeId\r\n       });\r\n \r\n-      if (!response.ok) throw new Error('Failed to create topic');\r\n-      const data = await response.json();\r\n-      \r\n-      if (!data.success) throw new Error(data.message || 'Failed to create topic');\r\n-      \r\n-      // Update topics list\r\n-      setTopics([...topics, data.data.topic]);\r\n-      setModalState({ ...modalState, showAddTopic: false });\r\n+\r\n+      setTopics(prev => [...prev, {\r\n+        _id: newTopic.id,\r\n+        id: newTopic.id,\r\n+        name: newTopic.title,\r\n+        title: newTopic.title,\r\n+        description: newTopic.description,\r\n+        grade_id: newTopic.grade_id,\r\n+        orderIndex: prev.length\r\n+      }]);\r\n+      toast.success('Topic created successfully');\r\n+      setModalState({ ...modalState, showAddTopic: false });  \r\n       setNewItemData({ name: '', description: '' });\r\n-      toast.success('Topic created successfully');\r\n-    } catch (error) {\r\n+    } catch (err) {\r\n+      const error = err instanceof Error ? err.message : String(err);\r\n       console.error('Error creating topic:', error);\r\n       toast.error('Failed to create topic');\r\n-    }\r\n+    \r\n   };\r\n \r\n   const handleCreateSubtopic = async (data: { title: string; description?: string }) => {\r\n     try {\r\n"
                },
                {
                    "date": 1739046556437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1226,9 +1226,9 @@\n     } catch (err) {\r\n       const error = err instanceof Error ? err.message : String(err);\r\n       console.error('Error creating topic:', error);\r\n       toast.error('Failed to create topic');\r\n-    \r\n+    }\r\n   };\r\n \r\n   const handleCreateSubtopic = async (data: { title: string; description?: string }) => {\r\n     try {\r\n"
                },
                {
                    "date": 1739046775508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1199,13 +1199,15 @@\n     }\r\n   };\r\n \r\n   const handleCreateTopic = async (data: { title: string; description?: string }) => {\r\n-    if (!selectedGradeId) {\r\n-      toast.error('Please select a grade first');\r\n+    try {\r\n+      if (!selectedGradeId) {\r\n+        toast.error('Please select a grade first');\r\n         return;\r\n       }\r\n \r\n+\r\n     const newTopic = await contentService.createTopic({\r\n         ...data,\r\n         gradeId: selectedGradeId\r\n       });\r\n@@ -1223,14 +1225,18 @@\n       toast.success('Topic created successfully');\r\n       setModalState({ ...modalState, showAddTopic: false });  \r\n       setNewItemData({ name: '', description: '' });\r\n     } catch (err) {\r\n-      const error = err instanceof Error ? err.message : String(err);\r\n+      const error = err as Error;\r\n       console.error('Error creating topic:', error);\r\n       toast.error('Failed to create topic');\r\n     }\r\n+\r\n   };\r\n+    \r\n+  \r\n \r\n+\r\n   const handleCreateSubtopic = async (data: { title: string; description?: string }) => {\r\n     try {\r\n       if (!selectedTopicId) {\r\n         toast.error('Please select a topic first');\r\n"
                },
                {
                    "date": 1739047260207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1199,39 +1199,29 @@\n     }\r\n   };\r\n \r\n   const handleCreateTopic = async (data: { title: string; description?: string }) => {\r\n+    if (!selectedGradeId) {\r\n+      toast.error('Please select a grade first');\r\n+      return;\r\n+    }\r\n+\r\n     try {\r\n-      if (!selectedGradeId) {\r\n-        toast.error('Please select a grade first');\r\n-        return;\r\n-      }\r\n-\r\n-\r\n-    const newTopic = await contentService.createTopic({\r\n-        ...data,\r\n+      const newTopic = await contentService.createTopic({\r\n+        title: data.title,\r\n+        description: data.description,\r\n         gradeId: selectedGradeId\r\n       });\r\n \r\n-\r\n-      setTopics(prev => [...prev, {\r\n-        _id: newTopic.id,\r\n-        id: newTopic.id,\r\n-        name: newTopic.title,\r\n-        title: newTopic.title,\r\n-        description: newTopic.description,\r\n-        grade_id: newTopic.grade_id,\r\n-        orderIndex: prev.length\r\n-      }]);\r\n+      setTopics(prev => [...prev, newTopic]);\r\n       toast.success('Topic created successfully');\r\n-      setModalState({ ...modalState, showAddTopic: false });  \r\n+      setModalState({ ...modalState, showAddTopic: false });\r\n       setNewItemData({ name: '', description: '' });\r\n     } catch (err) {\r\n-      const error = err as Error;\r\n+      const error = err instanceof Error ? err.message : String(err);\r\n       console.error('Error creating topic:', error);\r\n       toast.error('Failed to create topic');\r\n     }\r\n-\r\n   };\r\n     \r\n   \r\n \r\n"
                },
                {
                    "date": 1739047390800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1198,18 +1198,18 @@\n       toast.error('Failed to create grade');\r\n     }\r\n   };\r\n \r\n-  const handleCreateTopic = async (data: { title: string; description?: string }) => {\r\n+  const handleCreateTopic = async () => {\r\n     if (!selectedGradeId) {\r\n       toast.error('Please select a grade first');\r\n       return;\r\n     }\r\n \r\n     try {\r\n       const newTopic = await contentService.createTopic({\r\n-        title: data.title,\r\n-        description: data.description,\r\n+        title: newItemData.name, // Map from newItemData.name to title\r\n+        description: newItemData.description,\r\n         gradeId: selectedGradeId\r\n       });\r\n \r\n       setTopics(prev => [...prev, newTopic]);\r\n"
                },
                {
                    "date": 1739047871266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -568,9 +568,9 @@\n       const lessonData = {\r\n         id: currentLessonId,\r\n         title: lessonTitle,\r\n         subtopic_id: selectedSubtopicId,\r\n-        //user_id: session.user.id,\r\n+        user_id: session.user.id,\r\n         updated_at: new Date().toISOString(),\r\n         ...((!existingLesson ? { subtopic_id: selectedSubtopicId } : {}))\r\n       };\r\n       \r\n"
                },
                {
                    "date": 1739047991109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n   AlertDialogFooter,\r\n   AlertDialogHeader,\r\n   AlertDialogTitle,\r\n } from \"@/components/ui/alert-dialog\";\r\n-import { debounce } from 'lodash';\r\n+import { debounce, isNull } from 'lodash';\r\n import { PostgrestError } from '@supabase/supabase-js';\r\n import { Question as ContentQuestion } from './types';  // Import the specific type\r\n \r\n \r\n@@ -559,9 +559,9 @@\n         return;\r\n       }\r\n \r\n       // If lesson exists but we don't own it\r\n-      if (existingLesson && existingLesson.user_id !== session.user.id) {\r\n+      if (existingLesson && existingLesson.user_id !== session.user.id && !isNull) {\r\n         toast.error('You do not have permission to edit this lesson');\r\n         return;\r\n       }\r\n \r\n"
                },
                {
                    "date": 1739048604242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -539,47 +539,39 @@\n         toast.error('Please select a subtopic and lesson first');\r\n         return;\r\n       }\r\n \r\n-      const { data: { session } } = await supabase.auth.getSession();\r\n+      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\r\n+      if (sessionError) throw sessionError;\r\n+      \r\n       if (!session?.user) {\r\n         toast.error('Please sign in to save lessons');\r\n         return;\r\n       }\r\n \r\n-      // First check if we own this lesson\r\n-      const { data: existingLesson, error: checkError } = await supabase\r\n-        .from('lessons')\r\n-        .select('user_id')\r\n-        .eq('id', currentLessonId)\r\n-        .single();\r\n+      // Get user's role from session\r\n+      const userRole = session.user.user_metadata?.role;\r\n+      console.log('Current user role:', userRole); // Debug log\r\n \r\n-      if (checkError) {\r\n-        console.error('Error checking lesson ownership:', checkError);\r\n-        toast.error('Failed to verify lesson ownership');\r\n-        return;\r\n-      }\r\n-\r\n-      // If lesson exists but we don't own it\r\n-      if (existingLesson && existingLesson.user_id !== session.user.id && !isNull) {\r\n-        toast.error('You do not have permission to edit this lesson');\r\n-        return;\r\n-      }\r\n-\r\n       const lessonData = {\r\n         id: currentLessonId,\r\n         title: lessonTitle,\r\n+        topic_id: selectedTopicId,\r\n         subtopic_id: selectedSubtopicId,\r\n         user_id: session.user.id,\r\n         updated_at: new Date().toISOString(),\r\n-        ...((!existingLesson ? { subtopic_id: selectedSubtopicId } : {}))\r\n+        ...((!existingLesson ? { subtopic_id: selectedSubtopicId } : {})),\r\n+        role: userRole // Include role in the payload\r\n       };\r\n       \r\n       console.log('📦 Data being sent to Supabase:', lessonData);\r\n \r\n-      const { error: lessonError } = await supabase\r\n+      const { data, error: lessonError } = await supabase\r\n         .from('lessons')\r\n-        .upsert(lessonData, { onConflict: 'id' });\r\n+        .upsert(lessonData, { \r\n+          onConflict: 'id',\r\n+          returning: 'minimal' // Only return minimal data\r\n+        });\r\n \r\n       if (lessonError) throw lessonError;\r\n \r\n       // 2. Save lesson content\r\n@@ -672,11 +664,12 @@\n         if (activitiesError) throw activitiesError;\r\n       }\r\n \r\n       toast.success('Lesson saved successfully');\r\n-    } catch (error) {\r\n+    } catch (err) {\r\n+      const error = err as PostgrestError;\r\n       console.error('Save error:', error);\r\n-      toast.error('Failed to save lesson');\r\n+      toast.error(`Failed to save lesson: ${error.message}`);\r\n     }\r\n   };\r\n \r\n   const handleSaveQuestion = async (question: Question, index: number) => {\r\n"
                },
                {
                    "date": 1739048670879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -558,9 +558,9 @@\n         topic_id: selectedTopicId,\r\n         subtopic_id: selectedSubtopicId,\r\n         user_id: session.user.id,\r\n         updated_at: new Date().toISOString(),\r\n-        ...((!existingLesson ? { subtopic_id: selectedSubtopicId } : {})),\r\n+        subtopic_id: selectedSubtopicId,\r\n         role: userRole // Include role in the payload\r\n       };\r\n       \r\n       console.log('📦 Data being sent to Supabase:', lessonData);\r\n"
                },
                {
                    "date": 1739048740378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -558,19 +558,18 @@\n         topic_id: selectedTopicId,\r\n         subtopic_id: selectedSubtopicId,\r\n         user_id: session.user.id,\r\n         updated_at: new Date().toISOString(),\r\n-        subtopic_id: selectedSubtopicId,\r\n         role: userRole // Include role in the payload\r\n       };\r\n       \r\n+\r\n       console.log('📦 Data being sent to Supabase:', lessonData);\r\n \r\n       const { data, error: lessonError } = await supabase\r\n         .from('lessons')\r\n         .upsert(lessonData, { \r\n-          onConflict: 'id',\r\n-          returning: 'minimal' // Only return minimal data\r\n+          onConflict: 'id'\r\n         });\r\n \r\n       if (lessonError) throw lessonError;\r\n \r\n"
                },
                {
                    "date": 1739050934922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -554,13 +554,27 @@\n \r\n       const lessonData = {\r\n         id: currentLessonId,\r\n         title: lessonTitle,\r\n+        content: lessonContent,\r\n+        metadata: JSON.stringify({\r\n+          lastEdited: new Date().toISOString(),\r\n+          version: 1,\r\n+          status: 'draft' \r\n+        }),\r\n+        content_type: 'html',\r\n+        lesson_type: 'lesson',\r\n         topic_id: selectedTopicId,\r\n+        grade_id: selectedGradeId,\r\n         subtopic_id: selectedSubtopicId,\r\n         user_id: session.user.id,\r\n         updated_at: new Date().toISOString(),\r\n-        role: userRole // Include role in the payload\r\n+        role: userRole, // Include role in the payload\r\n+        description: '',\r\n+        prerequisites: [],\r\n+        media_type: 'image' ,\r\n+        media_url: '',\r\n+        contentheading: '',\r\n       };\r\n       \r\n \r\n       console.log('📦 Data being sent to Supabase:', lessonData);\r\n"
                },
                {
                    "date": 1739108608201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -562,10 +562,10 @@\n           status: 'draft' \r\n         }),\r\n         content_type: 'html',\r\n         lesson_type: 'lesson',\r\n-        topic_id: selectedTopicId,\r\n         grade_id: selectedGradeId,\r\n+        topic_id: selectedTopicId, \r\n         subtopic_id: selectedSubtopicId,\r\n         user_id: session.user.id,\r\n         updated_at: new Date().toISOString(),\r\n         role: userRole, // Include role in the payload\r\n"
                },
                {
                    "date": 1739109791097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -549,10 +549,11 @@\n       }\r\n \r\n       // Get user's role from session\r\n       const userRole = session.user.user_metadata?.role;\r\n-      console.log('Current user role:', userRole); // Debug log\r\n+      console.log('Current user role:', userRole);\r\n \r\n+      // Complete lesson data with all fields\r\n       const lessonData = {\r\n         id: currentLessonId,\r\n         title: lessonTitle,\r\n         content: lessonContent,\r\n@@ -563,28 +564,29 @@\n         }),\r\n         content_type: 'html',\r\n         lesson_type: 'lesson',\r\n         grade_id: selectedGradeId,\r\n-        topic_id: selectedTopicId, \r\n+        topic_id: selectedTopicId,\r\n         subtopic_id: selectedSubtopicId,\r\n         user_id: session.user.id,\r\n         updated_at: new Date().toISOString(),\r\n         role: userRole, // Include role in the payload\r\n         description: '',\r\n         prerequisites: [],\r\n-        media_type: 'image' ,\r\n+        media_type: 'image',\r\n         media_url: '',\r\n-        contentheading: '',\r\n+        contentheading: contentHeading || ''\r\n       };\r\n-      \r\n \r\n       console.log('📦 Data being sent to Supabase:', lessonData);\r\n \r\n+      // Save lesson with all fields\r\n       const { data, error: lessonError } = await supabase\r\n         .from('lessons')\r\n         .upsert(lessonData, { \r\n           onConflict: 'id'\r\n-        });\r\n+        })\r\n+        .select();\r\n \r\n       if (lessonError) throw lessonError;\r\n \r\n       // 2. Save lesson content\r\n@@ -603,8 +605,10 @@\n           version: 1,\r\n           status: 'draft'\r\n         }),\r\n         content_type: 'html',\r\n+        user_id: session.user.id,\r\n+        updated_at: new Date().toISOString(),\r\n         created_at: new Date().toISOString()\r\n       };\r\n \r\n       const { error: contentError } = await supabase\r\n"
                },
                {
                    "date": 1739110024659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -551,18 +551,21 @@\n       // Get user's role from session\r\n       const userRole = session.user.user_metadata?.role;\r\n       console.log('Current user role:', userRole);\r\n \r\n+      // Create metadata object\r\n+      const lessonMetadata = {\r\n+        lastEdited: new Date().toISOString(),\r\n+        version: 1,\r\n+        status: 'draft' \r\n+      };\r\n+\r\n       // Complete lesson data with all fields\r\n       const lessonData = {\r\n         id: currentLessonId,\r\n         title: lessonTitle,\r\n         content: lessonContent,\r\n-        metadata: JSON.stringify({\r\n-          lastEdited: new Date().toISOString(),\r\n-          version: 1,\r\n-          status: 'draft' \r\n-        }),\r\n+        metadata: lessonMetadata, // Supabase will automatically handle JSON conversion\r\n         content_type: 'html',\r\n         lesson_type: 'lesson',\r\n         grade_id: selectedGradeId,\r\n         topic_id: selectedTopicId,\r\n@@ -595,17 +598,19 @@\n         .select('id')\r\n         .eq('lesson_id', currentLessonId)\r\n         .single();\r\n \r\n+      const contentMetadata = {\r\n+        lastEdited: new Date().toISOString(),\r\n+        version: 1,\r\n+        status: 'draft'\r\n+      };\r\n+\r\n       const contentUpdate = {\r\n         id: existingContent?.id || crypto.randomUUID(),\r\n         lesson_id: currentLessonId,\r\n         content: [lessonContent],\r\n-        metadata: JSON.stringify({\r\n-          lastEdited: new Date().toISOString(),\r\n-          version: 1,\r\n-          status: 'draft'\r\n-        }),\r\n+        metadata: contentMetadata, // Supabase will automatically handle JSON conversion\r\n         content_type: 'html',\r\n         user_id: session.user.id,\r\n         updated_at: new Date().toISOString(),\r\n         created_at: new Date().toISOString()\r\n"
                },
                {
                    "date": 1739110141865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2464,9 +2464,15 @@\n                                       key={index}\r\n                                       question={{ \r\n                                         ...question, \r\n                                         lesson_id: currentLessonId || '',\r\n-                                        type: (question.type || 'speaking') as Question['type']  // Default to 'speaking' if undefined\r\n+                                        data: {\r\n+                                          prompt: question.data?.prompt || '',\r\n+                                          teacherScript: question.data?.teacherScript || '',\r\n+                                          followup_prompt: question.data?.followup_prompt || [],\r\n+                                          sampleAnswer: question.data?.sampleAnswer,\r\n+                                          answer: question.data?.answer\r\n+                                        }\r\n                                       }}\r\n                                       index={index}\r\n                                       onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\r\n                                         await handleUpdateQuestion(index, {\r\n"
                },
                {
                    "date": 1739110175249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2464,8 +2464,9 @@\n                                       key={index}\r\n                                       question={{ \r\n                                         ...question, \r\n                                         lesson_id: currentLessonId || '',\r\n+                                        type: (question.type || 'speaking') as Question['type'],\r\n                                         data: {\r\n                                           prompt: question.data?.prompt || '',\r\n                                           teacherScript: question.data?.teacherScript || '',\r\n                                           followup_prompt: question.data?.followup_prompt || [],\r\n"
                },
                {
                    "date": 1739110207157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2464,9 +2464,9 @@\n                                       key={index}\r\n                                       question={{ \r\n                                         ...question, \r\n                                         lesson_id: currentLessonId || '',\r\n-                                        type: (question.type || 'speaking') as Question['type'],\r\n+                                        type: isValidQuestionType(question.type) ? question.type : 'speaking',\r\n                                         data: {\r\n                                           prompt: question.data?.prompt || '',\r\n                                           teacherScript: question.data?.teacherScript || '',\r\n                                           followup_prompt: question.data?.followup_prompt || [],\r\n"
                },
                {
                    "date": 1739110245298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -219,12 +219,16 @@\n   exercisePrompts: ExercisePrompt[];\r\n   isDraft?: boolean;\r\n }\r\n \r\n+// Add at the top of the file with other type definitions\r\n+type QuestionType = keyof typeof QUESTION_TYPES;\r\n \r\n+// Add this type guard function\r\n+const isValidQuestionType = (type: string): type is QuestionType => {\r\n+  return type in QUESTION_TYPES;\r\n+};\r\n \r\n-\r\n-\r\n // Update handleAddQuestion\r\n \r\n \r\n // Update validateQuestion\r\n"
                },
                {
                    "date": 1739110474670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -323,9 +323,9 @@\n \r\n   // Add new state for tracking save status\r\n   interface SaveStatus {\r\n     id: string;\r\n-    status: 'draft' | 'saved' | 'saving' | 'error';\r\n+    status: 'draft' | 'saved' | 'saving' | 'error' | 'draft';\r\n     lastSaved?: string;\r\n   }\r\n \r\n   const [questionSaveStatuses, setQuestionSaveStatuses] = useState<Array<{\r\n"
                },
                {
                    "date": 1739111131049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -554,8 +554,14 @@\n \r\n       // Get user's role from session\r\n       const userRole = session.user.user_metadata?.role;\r\n       console.log('Current user role:', userRole);\r\n+      console.log('📝 Saving content heading:', {\r\n+        contentHeading,\r\n+        currentLessonId,\r\n+        selectedSubtopicId,\r\n+        timestamp: new Date().toISOString()\r\n+      });\r\n \r\n       // Create metadata object\r\n       const lessonMetadata = {\r\n         lastEdited: new Date().toISOString(),\r\n@@ -689,13 +695,23 @@\n \r\n         if (activitiesError) throw activitiesError;\r\n       }\r\n \r\n+      // After successful save\r\n+      console.log('✅ Content heading saved successfully:', {\r\n+        contentHeading,\r\n+        lessonId: currentLessonId,\r\n+        timestamp: new Date().toISOString()\r\n+      });\r\n+\r\n       toast.success('Lesson saved successfully');\r\n     } catch (err) {\r\n-      const error = err as PostgrestError;\r\n-      console.error('Save error:', error);\r\n-      toast.error(`Failed to save lesson: ${error.message}`);\r\n+      console.error('❌ Error saving content heading:', {\r\n+        error: err,\r\n+        contentHeading,\r\n+        lessonId: currentLessonId\r\n+      });\r\n+      toast.error(`Failed to save lesson: ${err.message}`);\r\n     }\r\n   };\r\n \r\n   const handleSaveQuestion = async (question: Question, index: number) => {\r\n"
                },
                {
                    "date": 1739111234121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -704,14 +704,16 @@\n       });\r\n \r\n       toast.success('Lesson saved successfully');\r\n     } catch (err) {\r\n+      const error = err as PostgrestError;\r\n       console.error('❌ Error saving content heading:', {\r\n-        error: err,\r\n+        error: error.message,\r\n         contentHeading,\r\n         lessonId: currentLessonId\r\n       });\r\n-      toast.error(`Failed to save lesson: ${err.message}`);\r\n+      toast.error(`Failed to save lesson: ${error.message}`);\r\n+\r\n     }\r\n   };\r\n \r\n   const handleSaveQuestion = async (question: Question, index: number) => {\r\n"
                },
                {
                    "date": 1739111339266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -708,12 +708,15 @@\n       const error = err as PostgrestError;\r\n       console.error('❌ Error saving content heading:', {\r\n         error: error.message,\r\n         contentHeading,\r\n-        lessonId: currentLessonId\r\n+        lessonContent,\r\n+        lessonId: currentLessonId,\r\n+        timestamp: new Date().toISOString()\r\n       });\r\n       toast.error(`Failed to save lesson: ${error.message}`);\r\n \r\n+\r\n     }\r\n   };\r\n \r\n   const handleSaveQuestion = async (question: Question, index: number) => {\r\n"
                },
                {
                    "date": 1739111465566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1768,8 +1768,18 @@\n       toast.error('Failed to refresh content');\r\n     }\r\n   };\r\n \r\n+  // Update the sidebar hover mechanism\r\n+  const handleSidebarHover = useCallback(\r\n+    debounce((isHovering: boolean) => {\r\n+      if (!isSidebarLocked && !isNavigating) {\r\n+        setIsSidebarCollapsed(!isHovering);\r\n+      }\r\n+    }, 150), // Add small delay for smoother transition\r\n+    [isSidebarLocked, isNavigating]\r\n+  );\r\n+\r\n   // Render\r\n   return (\r\n       <div className=\"container mx-auto py-8\">\r\n         {/* Header */}\r\n@@ -1810,13 +1820,22 @@\n         </div>\r\n         \r\n         {/* Main content wrapper - Fix the layout here */}\r\n         <div className=\"flex gap-6 h-[calc(100vh-200px)]\">\r\n-          {/* Left Sidebar with collapse/expand functionality */}\r\n+          {/* Improved sidebar */}\r\n           <div \r\n             className={cn(\r\n               \"transition-all duration-300 ease-in-out relative\",\r\n               isSidebarCollapsed ? \"w-20\" : \"w-80\",\r\n+              \"flex-shrink-0 group\"\r\n+            )}\r\n+            onMouseEnter={() => handleSidebarHover(true)}\r\n+            onMouseLeave={() => handleSidebarHover(false)}\r\n+          >\r\n+            <Card className={cn(\r\n+              \"h-full relative\",\r\n+              \"transition-shadow duration-300\",\r\n+              \"hover:shadow-lg\"\r\n               \"flex-shrink-0\"\r\n             )}\r\n             onMouseEnter={() => !isSidebarLocked && setIsSidebarCollapsed(false)}\r\n             onMouseLeave={() => !isSidebarLocked && setIsSidebarCollapsed(true)}\r\n"
                },
                {
                    "date": 1739111493152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1768,18 +1768,8 @@\n       toast.error('Failed to refresh content');\r\n     }\r\n   };\r\n \r\n-  // Update the sidebar hover mechanism\r\n-  const handleSidebarHover = useCallback(\r\n-    debounce((isHovering: boolean) => {\r\n-      if (!isSidebarLocked && !isNavigating) {\r\n-        setIsSidebarCollapsed(!isHovering);\r\n-      }\r\n-    }, 150), // Add small delay for smoother transition\r\n-    [isSidebarLocked, isNavigating]\r\n-  );\r\n-\r\n   // Render\r\n   return (\r\n       <div className=\"container mx-auto py-8\">\r\n         {/* Header */}\r\n@@ -1820,22 +1810,13 @@\n         </div>\r\n         \r\n         {/* Main content wrapper - Fix the layout here */}\r\n         <div className=\"flex gap-6 h-[calc(100vh-200px)]\">\r\n-          {/* Improved sidebar */}\r\n+          {/* Left Sidebar with collapse/expand functionality */}\r\n           <div \r\n             className={cn(\r\n               \"transition-all duration-300 ease-in-out relative\",\r\n               isSidebarCollapsed ? \"w-20\" : \"w-80\",\r\n-              \"flex-shrink-0 group\"\r\n-            )}\r\n-            onMouseEnter={() => handleSidebarHover(true)}\r\n-            onMouseLeave={() => handleSidebarHover(false)}\r\n-          >\r\n-            <Card className={cn(\r\n-              \"h-full relative\",\r\n-              \"transition-shadow duration-300\",\r\n-              \"hover:shadow-lg\"\r\n               \"flex-shrink-0\"\r\n             )}\r\n             onMouseEnter={() => !isSidebarLocked && setIsSidebarCollapsed(false)}\r\n             onMouseLeave={() => !isSidebarLocked && setIsSidebarCollapsed(true)}\r\n@@ -2328,12 +2309,12 @@\n                                               }}\r\n                                             >\r\n                                               <CardHeader className=\"py-3\">\r\n                                                 <div className=\"flex flex-col gap-2\">\r\n-                                                  <div className=\"flex items-center gap-2\">\r\n+                                                    <div className=\"flex items-center gap-2\">\r\n                                                     <BookOpen className=\"h-4 w-4 text-primary\" />\r\n-                                                    <span className=\"font-medium\">{lesson.title}</span>\r\n-                                                  </div>\r\n+                                                      <span className=\"font-medium\">{lesson.title}</span>\r\n+                                                    </div>\r\n                                                   <div className=\"flex items-center gap-2\">\r\n                                                     <Badge variant=\"outline\" className=\"bg-primary/5\">\r\n                                                       {lesson.questions?.length || 0} Questions\r\n                                                     </Badge>\r\n@@ -2370,11 +2351,11 @@\n                     <Card>\r\n                       <CardHeader>\r\n                         <div className=\"flex items-center justify-between mb-4\">\r\n                           <h2 className=\"text-2xl font-bold\">Lesson Content</h2>\r\n-                          <Button \r\n-                            variant=\"outline\" \r\n-                            size=\"sm\"\r\n+                                                    <Button\r\n+                                                      variant=\"outline\"\r\n+                                                      size=\"sm\"\r\n                             onClick={() => setIsContentEditorOpen(true)}\r\n                           >\r\n                             <Pencil className=\"h-4 w-4 mr-2\" />\r\n                             Edit Content\r\n@@ -2546,9 +2527,9 @@\n                                     ) : (\r\n                                       <Save className=\"h-4 w-4 mr-2\" />\r\n                                     )}\r\n                                     Save Question\r\n-                                  </Button>\r\n+                                                    </Button>\r\n                                     {/* Exercise Prompts with Save Buttons */}\r\n                                     {question.exercisePrompts?.map((prompt, promptIndex) => (\r\n                                       <div key={`${question.id}-prompt-${promptIndex}`} className=\"mt-4\"> {/* Updated key */}\r\n                                         <div className=\"flex items-center justify-between mb-2\">\r\n@@ -2584,9 +2565,9 @@\n                                                 : 'default'\r\n                                             }>\r\n                                               {promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}\r\n                                             </Badge>\r\n-                                          </div>\r\n+                                                  </div>\r\n                                         </div>\r\n                                         <ExercisePromptCard\r\n                                           key={prompt.id} // Add a unique key here\r\n                                           prompt={prompt}\r\n"
                },
                {
                    "date": 1739111655180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1768,9 +1768,19 @@\n       toast.error('Failed to refresh content');\r\n     }\r\n   };\r\n \r\n-  // Render\r\n+  // Update the sidebar hover mechanism\r\n+  const handleSidebarHover = useCallback(\r\n+    debounce((isHovering: boolean) => {\r\n+      if (!isSidebarLocked && !isNavigating) {\r\n+        setIsSidebarCollapsed(!isHovering);\r\n+      }\r\n+    }, 150), // Add small delay for smoother transition\r\n+    [isSidebarLocked, isNavigating]\r\n+  );\r\n+\r\n+  // Update the sidebar and card styles\r\n   return (\r\n       <div className=\"container mx-auto py-8\">\r\n         {/* Header */}\r\n         <div className=\"flex items-center justify-between mb-2\">\r\n@@ -1810,19 +1820,23 @@\n         </div>\r\n         \r\n         {/* Main content wrapper - Fix the layout here */}\r\n         <div className=\"flex gap-6 h-[calc(100vh-200px)]\">\r\n-          {/* Left Sidebar with collapse/expand functionality */}\r\n+          {/* Improved sidebar */}\r\n           <div \r\n             className={cn(\r\n               \"transition-all duration-300 ease-in-out relative\",\r\n               isSidebarCollapsed ? \"w-20\" : \"w-80\",\r\n-              \"flex-shrink-0\"\r\n+              \"flex-shrink-0 group\"\r\n             )}\r\n-            onMouseEnter={() => !isSidebarLocked && setIsSidebarCollapsed(false)}\r\n-            onMouseLeave={() => !isSidebarLocked && setIsSidebarCollapsed(true)}\r\n+            onMouseEnter={() => handleSidebarHover(true)}\r\n+            onMouseLeave={() => handleSidebarHover(false)}\r\n           >\r\n-            <Card className=\"h-full relative\">\r\n+            <Card className={cn(\r\n+              \"h-full relative\",\r\n+              \"transition-shadow duration-300\",\r\n+              \"hover:shadow-lg\"\r\n+            )}>\r\n               {/* Lock button - only show after lesson selection */}\r\n               {currentLessonId && (\r\n                 <Button\r\n                   variant=\"ghost\"\r\n@@ -2299,27 +2313,59 @@\n                                           .filter(lesson => lesson.subtopic_id === subtopic.id)\r\n                                           .map((lesson) => (\r\n                                             <Card \r\n                                               key={lesson.id} \r\n-                                              className=\"cursor-pointer hover:bg-accent transition-colors duration-200\"\r\n-                                              onClick={() => {\r\n-                                                setCurrentLessonId(lesson.id || '');\r\n-                                                setSelectedTopicId(topic.id || '');\r\n-                                                setSelectedSubtopicId(subtopic.id || '');\r\n-                                                setIsViewMode(false);\r\n-                                              }}\r\n+                                              className={cn(\r\n+                                                \"cursor-pointer transition-all duration-200\",\r\n+                                                \"hover:shadow-md hover:translate-y-[-2px]\",\r\n+                                                \"hover:bg-accent/50 hover:border-primary/50\",\r\n+                                                \"active:translate-y-[0px]\",\r\n+                                                currentLessonId === lesson.id && \"border-primary bg-accent/50 shadow-md\",\r\n+                                                \"group\" // Enable group hover effects\r\n+                                              )}\r\n+                                              onClick={() => handleLessonSelect(lesson.id || '')}\r\n                                             >\r\n-                                              <CardHeader className=\"py-3\">\r\n+                                              <CardHeader className=\"p-4\">\r\n                                                 <div className=\"flex flex-col gap-2\">\r\n+                                                  <div className=\"flex items-center justify-between\">\r\n                                                     <div className=\"flex items-center gap-2\">\r\n-                                                    <BookOpen className=\"h-4 w-4 text-primary\" />\r\n+                                                      <BookOpen className={cn(\r\n+                                                        \"h-4 w-4 text-primary\",\r\n+                                                        \"transition-transform duration-200\",\r\n+                                                        \"group-hover:scale-110\"\r\n+                                                      )} />\r\n                                                       <span className=\"font-medium\">{lesson.title}</span>\r\n                                                     </div>\r\n+                                                    <Button\r\n+                                                      variant=\"outline\"\r\n+                                                      size=\"sm\"\r\n+                                                      className={cn(\r\n+                                                        \"opacity-0 group-hover:opacity-100\",\r\n+                                                        \"transition-all duration-200\",\r\n+                                                        \"hover:bg-primary hover:text-primary-foreground\"\r\n+                                                      )}\r\n+                                                      disabled={!lesson.content || currentLessonId !== lesson.id}\r\n+                                                      onClick={(e) => {\r\n+                                                        e.stopPropagation();\r\n+                                                        window.location.href = `/teacher/lessons/${lesson.id}`;\r\n+                                                      }}\r\n+                                                    >\r\n+                                                      Start Lesson\r\n+                                                    </Button>\r\n+                                                  </div>\r\n                                                   <div className=\"flex items-center gap-2\">\r\n-                                                    <Badge variant=\"outline\" className=\"bg-primary/5\">\r\n+                                                    <Badge variant=\"outline\" className={cn(\r\n+                                                      \"bg-primary/5\",\r\n+                                                      \"transition-colors duration-200\",\r\n+                                                      \"group-hover:bg-primary/10\"\r\n+                                                    )}>\r\n                                                       {lesson.questions?.length || 0} Questions\r\n                                                     </Badge>\r\n-                                                    <Badge variant=\"outline\" className=\"bg-primary/5\">\r\n+                                                    <Badge variant=\"outline\" className={cn(\r\n+                                                      \"bg-primary/5\",\r\n+                                                      \"transition-colors duration-200\",\r\n+                                                      \"group-hover:bg-primary/10\"\r\n+                                                    )}>\r\n                                                       {lesson.activities?.length || 0} Activities\r\n                                                     </Badge>\r\n                                                   </div>\r\n                                                 </div>\r\n"
                },
                {
                    "date": 1739111767450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1772,14 +1772,53 @@\n   // Update the sidebar hover mechanism\r\n   const handleSidebarHover = useCallback(\r\n     debounce((isHovering: boolean) => {\r\n       if (!isSidebarLocked && !isNavigating) {\r\n-        setIsSidebarCollapsed(!isHovering);\r\n+        // Don't collapse if user is actively selecting\r\n+        if (isHovering || document.activeElement?.closest('.sidebar-content')) {\r\n+          setIsSidebarCollapsed(false);\r\n+        } else {\r\n+          // Add a small delay before collapsing\r\n+          setTimeout(() => {\r\n+            setIsSidebarCollapsed(true);\r\n+          }, 300);\r\n+        }\r\n       }\r\n-    }, 150), // Add small delay for smoother transition\r\n+    }, 100), // Reduced debounce time for more responsive hover\r\n     [isSidebarLocked, isNavigating]\r\n   );\r\n \r\n+  // Update the sidebar JSX\r\n+  <div \r\n+    className={cn(\r\n+      \"transition-all duration-300 ease-in-out relative\",\r\n+      isSidebarCollapsed ? \"w-20\" : \"w-80\",\r\n+      \"flex-shrink-0 group\"\r\n+    )}\r\n+    onMouseEnter={() => {\r\n+      handleSidebarHover(true);\r\n+      // Immediately expand on mouse enter\r\n+      if (!isSidebarLocked) {\r\n+        setIsSidebarCollapsed(false);\r\n+      }\r\n+    }}\r\n+    onMouseLeave={() => {\r\n+      // Only collapse if not interacting with content\r\n+      if (!document.activeElement?.closest('.sidebar-content')) {\r\n+        handleSidebarHover(false);\r\n+      }\r\n+    }}\r\n+    onFocus={() => setIsSidebarCollapsed(false)}\r\n+  >\r\n+    <Card className={cn(\r\n+      \"h-full relative sidebar-content\", // Added sidebar-content class\r\n+      \"transition-shadow duration-300\",\r\n+      \"hover:shadow-lg\"\r\n+    )}>\r\n+      {/* Rest of sidebar content */}\r\n+    </Card>\r\n+  </div>\r\n+\r\n   // Update the sidebar and card styles\r\n   return (\r\n       <div className=\"container mx-auto py-8\">\r\n         {/* Header */}\r\n@@ -1827,13 +1866,25 @@\n               \"transition-all duration-300 ease-in-out relative\",\r\n               isSidebarCollapsed ? \"w-20\" : \"w-80\",\r\n               \"flex-shrink-0 group\"\r\n             )}\r\n-            onMouseEnter={() => handleSidebarHover(true)}\r\n-            onMouseLeave={() => handleSidebarHover(false)}\r\n+            onMouseEnter={() => {\r\n+              handleSidebarHover(true);\r\n+              // Immediately expand on mouse enter\r\n+              if (!isSidebarLocked) {\r\n+                setIsSidebarCollapsed(false);\r\n+              }\r\n+            }}\r\n+            onMouseLeave={() => {\r\n+              // Only collapse if not interacting with content\r\n+              if (!document.activeElement?.closest('.sidebar-content')) {\r\n+                handleSidebarHover(false);\r\n+              }\r\n+            }}\r\n+            onFocus={() => setIsSidebarCollapsed(false)}\r\n           >\r\n             <Card className={cn(\r\n-              \"h-full relative\",\r\n+              \"h-full relative sidebar-content\", // Added sidebar-content class\r\n               \"transition-shadow duration-300\",\r\n               \"hover:shadow-lg\"\r\n             )}>\r\n               {/* Lock button - only show after lesson selection */}\r\n"
                },
                {
                    "date": 1739111876873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -333,8 +333,11 @@\n     status: 'idle' | 'saving' | 'saved' | 'error' | 'draft';\r\n   }>>([]);\r\n   const [promptSaveStatuses, setPromptSaveStatuses] = useState<SaveStatus[]>([]);\r\n \r\n+  // Add this state to track dropdown state\r\n+  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n+\r\n   // Event handlers\r\n   const handleQuestionTypeChange = useCallback((type: string) => {\r\n     if (isQuestionType(type)) {\r\n       setSelectedQuestionType(type);\r\n@@ -1771,21 +1774,21 @@\n \r\n   // Update the sidebar hover mechanism\r\n   const handleSidebarHover = useCallback(\r\n     debounce((isHovering: boolean) => {\r\n-      if (!isSidebarLocked && !isNavigating) {\r\n-        // Don't collapse if user is actively selecting\r\n+      if (!isSidebarLocked && !isNavigating && !isDropdownOpen) {\r\n         if (isHovering || document.activeElement?.closest('.sidebar-content')) {\r\n           setIsSidebarCollapsed(false);\r\n         } else {\r\n-          // Add a small delay before collapsing\r\n           setTimeout(() => {\r\n-            setIsSidebarCollapsed(true);\r\n+            if (!isDropdownOpen) { // Only collapse if dropdown is closed\r\n+              setIsSidebarCollapsed(true);\r\n+            }\r\n           }, 300);\r\n         }\r\n       }\r\n-    }, 100), // Reduced debounce time for more responsive hover\r\n-    [isSidebarLocked, isNavigating]\r\n+    }, 100),\r\n+    [isSidebarLocked, isNavigating, isDropdownOpen]\r\n   );\r\n \r\n   // Update the sidebar JSX\r\n   <div \r\n@@ -2175,10 +2178,30 @@\n                         </div>\r\n                           <Select \r\n                             value={currentLessonId || ''} \r\n                             onValueChange={handleLessonSelect}\r\n+                            onOpenChange={(open) => {\r\n+                              setIsDropdownOpen(open);\r\n+                              if (open) {\r\n+                                setIsSidebarCollapsed(false);\r\n+                                setIsSidebarLocked(true);\r\n+                              } else {\r\n+                                // Small delay before unlocking to prevent immediate collapse\r\n+                                setTimeout(() => {\r\n+                                  setIsSidebarLocked(false);\r\n+                                }, 100);\r\n+                              }\r\n+                            }}\r\n                           >\r\n-                            <SelectTrigger id=\"lesson-select\" className=\"w-full\">\r\n+                            <SelectTrigger \r\n+                              id=\"lesson-select\" \r\n+                              className=\"w-full\"\r\n+                              onClick={(e) => {\r\n+                                e.stopPropagation();\r\n+                                setIsSidebarCollapsed(false);\r\n+                                setIsSidebarLocked(true);\r\n+                              }}\r\n+                            >\r\n                               <SelectValue placeholder=\"Select Lesson\" />\r\n                             </SelectTrigger>\r\n                             <SelectContent>\r\n                               {lessons\r\n"
                },
                {
                    "date": 1739133146597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2609,16 +2609,9 @@\n                                       key={index}\r\n                                       question={{ \r\n                                         ...question, \r\n                                         lesson_id: currentLessonId || '',\r\n-                                        type: isValidQuestionType(question.type) ? question.type : 'speaking',\r\n-                                        data: {\r\n-                                          prompt: question.data?.prompt || '',\r\n-                                          teacherScript: question.data?.teacherScript || '',\r\n-                                          followup_prompt: question.data?.followup_prompt || [],\r\n-                                          sampleAnswer: question.data?.sampleAnswer,\r\n-                                          answer: question.data?.answer\r\n-                                        }\r\n+                                        type: (question.type || 'speaking') as keyof typeof QUESTION_TYPES\r\n                                       }}\r\n                                       index={index}\r\n                                       onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\r\n                                         await handleUpdateQuestion(index, {\r\n"
                }
            ],
            "date": 1739045874777,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport { useState, useCallback, useEffect, useRef } from 'react';\r\nimport { toast } from 'sonner';\r\nimport { Toaster } from 'sonner';\r\nimport Link from 'next/link';\r\nimport {  Activity as ActivityIcon,  ArrowLeft,  BookOpen,  ChevronDown,  ChevronRight,  Check,  Edit,  Eye,  EyeOff,  HelpCircle,  Layers,  List,  MessageSquare,  Plus,  Save,  Trash as Trash2, X, Pencil, Lock, Unlock, RefreshCw } from 'lucide-react';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\r\nimport { cn } from '@/lib/utils';\r\nimport { API_BASE_URL, QUESTION_TYPES, isQuestionType } from './constants';\r\nimport { ExercisePrompt, Lesson } from './types';\r\nimport { QuestionFormProps, ExercisePromptCardProps, Activity, Grade, Topic, Subtopic as SubTopic } from './types';\r\nimport { QuestionForm } from './components/question-form';\r\nimport { ExercisePromptCard } from './components/exercise-prompt-card';\r\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\r\nimport { supabase } from '@/lib/supabase';\r\nimport { useContentStore } from '@/lib/content/store';\r\nimport { contentService } from '@/lib/content/ContentService';\r\nimport { MediaPreview } from '@/components/ui/media-preview';\r\nimport { QuestionTypeSelect } from './components/question-type-select';\r\nimport { RichTextEditor } from '@/components/ui/rich-text-editor';\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n} from \"@/components/ui/alert-dialog\";\r\nimport { debounce } from 'lodash';\r\nimport { PostgrestError } from '@supabase/supabase-js';\r\nimport { Question as ContentQuestion } from './types';  // Import the specific type\r\n\r\n\r\n// Update the API endpoint to match your backend route\r\nconst API_ENDPOINT = process.env.VITE_API_URL || 'http://localhost:5173/api';\r\n\r\ninterface QuestionTypeSelectProps {\r\n  value: string;\r\n  onValueChange: (value: string) => void;\r\n}\r\n\r\n// Add metadata type\r\ninterface LessonMetadata {\r\n  lastEdited?: string;\r\n  version?: number;\r\n  tags?: string[];\r\n  status?: 'draft' | 'published';\r\n  authorId?: string;\r\n  duration?: number;\r\n  transcript?: string;\r\n}\r\n\r\ntype ContentType = 'html' | 'markdown' | 'rich-text' | 'text' | 'json';\r\n\r\ninterface LessonContent {\r\n  id: string;\r\n  lesson_id: string;\r\n  content: any[];\r\n  metadata: {\r\n    lastEdited?: string;\r\n    version?: number;\r\n    status?: 'draft' | 'published';\r\n    authorId?: string;\r\n  };\r\n  content_type: string;\r\n  order_index: number;\r\n  updated_at: string;\r\n  user_id: string;\r\n}\r\n\r\ninterface InlineEditProps {\r\n  value: string;\r\n  onSave: (value: string) => void;\r\n  isEditing: boolean;\r\n  setIsEditing: (value: boolean) => void;\r\n  placeholder?: string;\r\n  className?: string;\r\n}\r\n\r\n// Add validation interface\r\ninterface QuestionValidation {\r\n  isValid: boolean;\r\n  message: string;\r\n}\r\n\r\n// Add this type validation helper\r\nconst getQuestionTypeFields = (type: string) => {\r\n  switch (type) {\r\n    case 'multipleChoice':\r\n      return {\r\n        required: ['prompt', 'options', 'correctAnswer'],\r\n        fields: {\r\n          prompt: '',\r\n          options: [],\r\n          correctAnswer: '',\r\n          teacherScript: '',\r\n          explanation: ''\r\n        }\r\n      };\r\n    case 'fillInBlank':\r\n      return {\r\n        required: ['prompt', 'blanks'],\r\n        fields: {\r\n          prompt: '',\r\n          blanks: [],\r\n          teacherScript: '',\r\n          explanation: ''\r\n        }\r\n      };\r\n    case 'trueFalse':\r\n      return {\r\n        required: ['prompt', 'correctAnswer'],\r\n        fields: {\r\n          prompt: '',\r\n          correctAnswer: null,\r\n          teacherScript: '',\r\n          explanation: ''\r\n        }\r\n      };\r\n    case 'matching':\r\n      return {\r\n        required: ['prompt', 'pairs'],\r\n        fields: {\r\n          prompt: '',\r\n          pairs: [],\r\n          teacherScript: '',\r\n          explanation: ''\r\n        }\r\n      };\r\n    case 'ordering':\r\n      return {\r\n        required: ['prompt', 'items'],\r\n        fields: {\r\n          prompt: '',\r\n          items: [],\r\n          correctOrder: [],\r\n          teacherScript: '',\r\n          explanation: ''\r\n        }\r\n      };\r\n    case 'shortAnswer':\r\n      return {\r\n        required: ['prompt', 'sampleAnswer'],\r\n        fields: {\r\n          prompt: '',\r\n          sampleAnswer: '',\r\n          teacherScript: '',\r\n          explanation: '',\r\n          keywords: []\r\n        }\r\n      };\r\n    case 'speaking':\r\n      return {\r\n        required: ['prompt', 'sampleAnswer'],\r\n        fields: {\r\n          prompt: '',\r\n          sampleAnswer: '',\r\n          teacherScript: '',\r\n          audioPrompt: '',\r\n          pronunciation: ''\r\n        }\r\n      };\r\n    case 'listening':\r\n      return {\r\n        required: ['prompt', 'audioContent'],\r\n        fields: {\r\n          prompt: '',\r\n          audioContent: '',\r\n          transcript: '',\r\n          teacherScript: '',\r\n          comprehensionQuestions: []\r\n        }\r\n      };\r\n    case 'listenAndRepeat':\r\n      return {\r\n        required: ['prompt', 'audioContent'],\r\n        fields: {\r\n          prompt: '',\r\n          audioContent: '',\r\n          targetPhrase: '',\r\n          teacherScript: '',\r\n          pronunciation: ''\r\n        }\r\n      };\r\n    default:\r\n      return {\r\n        required: ['prompt'],\r\n        fields: {\r\n          prompt: '',\r\n          teacherScript: ''\r\n        }\r\n      };\r\n  }\r\n}\r\n\r\ninterface SaveStatus {\r\n  id: string;\r\n  status: 'draft' | 'saved' | 'saving' | 'error';\r\n  lastSaved?: string;\r\n}\r\n\r\ninterface Question {\r\n  id: string;\r\n  type: string;\r\n  lesson_id: string;\r\n  title: string;\r\n  metadata: Record<string, any>;\r\n  data: Record<string, any>; // This allows dynamic field access\r\n  exercisePrompts: ExercisePrompt[];\r\n  isDraft?: boolean;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// Update handleAddQuestion\r\n\r\n\r\n// Update validateQuestion\r\nconst validateQuestion = (question: Question): QuestionValidation => {\r\n  const { required } = getQuestionTypeFields(question.type);\r\n  const missingFields = required.filter(field => {\r\n    const value = question.data?.[field];\r\n    return !value || \r\n      (Array.isArray(value) && value.length === 0) || \r\n      (typeof value === 'string' && !value.trim());\r\n  });\r\n\r\n  if (missingFields.length > 0) {\r\n    return {\r\n      isValid: false,\r\n      message: `Missing required fields: ${missingFields.join(', ')}`\r\n    };\r\n  }\r\n\r\n  return { isValid: true, message: '' };\r\n};\r\n\r\nexport default function LessonManagementPage() {\r\n  // State declarations\r\n  \r\n  const [selectedGradeId, setSelectedGradeId] = useState<string | null>(null);\r\n  const [selectedTopicId, setSelectedTopicId] = useState<string | null>(null);\r\n  const [selectedSubtopicId, setSelectedSubtopicId] = useState<string | null>(null);\r\n  const [lessonTitle, setLessonTitle] = useState<string>('');\r\n  const [currentLessonId, setCurrentLessonId] = useState<string | null>(null);\r\n  const [questions, setQuestions] = useState<Question[]>([]);\r\n  const [saveProgress, setSaveProgress] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');\r\n  const [activities, setActivities] = useState<Activity[]>([]);\r\n  const [localBuffer, setLocalBuffer] = useState<{ timestamp: number; data: any } | null>(null);\r\n  const [lastSavedToServer, setLastSavedToServer] = useState<number>(Date.now());\r\n  const [selectedQuestionType, setSelectedQuestionType] = useState<string>('');\r\n  const [editingQuestionIndex, setEditingQuestionIndex] = useState<number | null>(null);\r\n  const [showHelpTips, setShowHelpTips] = useState(true);\r\n  const [isNavigating, setIsNavigating] = useState(false);\r\n  const [lessons, setLessons] = useState<Lesson[]>([]);\r\n  const [grades, setGrades] = useState<Grade[]>([]);\r\n  const [topics, setTopics] = useState<Topic[]>([]);\r\n  const [subtopics, setSubtopics] = useState<SubTopic[]>([]);\r\n  const [contentHeading, setContentHeading] = useState<string>('');\r\n    // Add with your other state declarations\r\n  const [isContentExpanded, setIsContentExpanded] = useState<boolean>(false);\r\n  const [modalState, setModalState] = useState({\r\n    showAddGrade: false,\r\n    showAddTopic: false,\r\n    showAddSubtopic: false,\r\n    showAddLesson: false\r\n  });\r\n  const [isViewMode, setIsViewMode] = useState<boolean>(true);\r\n  const [expandedGrade, setExpandedGrade] = useState<string | null>(null);\r\n  const [expandedTopic, setExpandedTopic] = useState<string | null>(null);\r\n  const [expandedSubtopic, setExpandedSubtopic] = useState<string | null>(null);\r\n  const [expandedQuestion, setExpandedQuestion] = useState<number | null>(null);\r\n  const [expandedActivity, setExpandedActivity] = useState<number | null>(null);\r\n  const [newItemData, setNewItemData] = useState({\r\n    name: '',\r\n    description: ''\r\n  });\r\n  const [lessonContent, setLessonContent] = useState<string>('');\r\n  const [isContentEditorOpen, setIsContentEditorOpen] = useState(false);\r\n  const [isEditingTitle, setIsEditingTitle] = useState<boolean>(false);\r\n  const [isEditingHeading, setIsEditingHeading] = useState<boolean>(false);\r\n  const [isEditingDescription, setIsEditingDescription] = useState<boolean>(false);\r\n  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\r\n  const [isSidebarLocked, setIsSidebarLocked] = useState(true);\r\n  const [alertDialogState, setAlertDialogState] = useState<{\r\n    isOpen: boolean;\r\n    title: string;\r\n    message: string;\r\n    onConfirm: (value?: unknown) => void;\r\n  }>({\r\n    isOpen: false,\r\n    title: '',\r\n    message: '',\r\n    onConfirm: () => {}\r\n  });\r\n\r\n  const { \r\n    selectedGrade,\r\n    setSelectedGrade,\r\n    selectedTopic,\r\n    setSelectedTopic,\r\n    selectedSubtopic,\r\n    setSelectedSubtopic,\r\n    selectedLesson,\r\n    setSelectedLesson\r\n  } = useContentStore();\r\n\r\n  // Add new state for tracking save status\r\n  interface SaveStatus {\r\n    id: string;\r\n    status: 'draft' | 'saved' | 'saving' | 'error';\r\n    lastSaved?: string;\r\n  }\r\n\r\n  const [questionSaveStatuses, setQuestionSaveStatuses] = useState<Array<{\r\n    id: string;\r\n    status: 'idle' | 'saving' | 'saved' | 'error' | 'draft';\r\n  }>>([]);\r\n  const [promptSaveStatuses, setPromptSaveStatuses] = useState<SaveStatus[]>([]);\r\n\r\n  // Event handlers\r\n  const handleQuestionTypeChange = useCallback((type: string) => {\r\n    if (isQuestionType(type)) {\r\n      setSelectedQuestionType(type);\r\n    }\r\n  }, []);\r\n\r\n  const handleAddQuestion = useCallback(() => {\r\n    if (!selectedQuestionType || !isQuestionType(selectedQuestionType)) return;\r\n\r\n    const defaultData = QUESTION_TYPES[selectedQuestionType].defaultData;\r\n    const newQuestion: Question = {\r\n      id: crypto.randomUUID(),\r\n      type: selectedQuestionType,\r\n      data: {},\r\n      title: 'New Question',\r\n      lesson_id: currentLessonId || '',\r\n      metadata: {},\r\n      // data: {\r\n      //   ...defaultData,\r\n      //   prompt: '',\r\n      //   teacherScript: ''\r\n      // },\r\n      exercisePrompts: [],\r\n      isDraft: true\r\n    };\r\n\r\n    setQuestions(prev => [...prev, newQuestion]);\r\n    setQuestionSaveStatuses(prev => [\r\n      ...prev,\r\n      { id: newQuestion.id, status: 'draft' }\r\n    ]);\r\n    setSelectedQuestionType('');\r\n  }, [selectedQuestionType, currentLessonId]);\r\n\r\n  const handleRemoveQuestion = async (index: number) => {\r\n    try {\r\n      const questionToDelete = questions[index];\r\n      \r\n      // Delete related exercise prompts first\r\n      const { error: promptError } = await supabase\r\n        .from('exercise_prompts')\r\n        .delete()\r\n        .eq('question_id', questionToDelete.id);\r\n\r\n      if (promptError) throw promptError;\r\n\r\n      // Then delete the question\r\n      const { error: questionError } = await supabase\r\n        .from('questions')\r\n        .delete()\r\n        .eq('id', questionToDelete.id);\r\n\r\n      if (questionError) throw questionError;\r\n\r\n      // Update local state\r\n      const newQuestions = questions.filter((_, i) => i !== index);\r\n      setQuestions(newQuestions);\r\n      \r\n      toast.success('Question and related prompts deleted successfully');\r\n    } catch (error) {\r\n      console.error('Error deleting question:', error);\r\n      toast.error('Failed to delete question and prompts');\r\n    }\r\n  };\r\n\r\n  const handleUpdateQuestion = useCallback(async (index: number, updatedQuestion: Question) => {\r\n    const newQuestions = [...questions];\r\n    newQuestions[index] = updatedQuestion;\r\n    setQuestions(newQuestions);\r\n    setQuestionSaveStatuses(prev => prev.map((status, i) => \r\n      i === index ? { ...status, status: 'draft' } : status\r\n    ));\r\n  }, [questions]);\r\n\r\n  const handleAddExercisePrompt = useCallback((questionIndex: number) => {\r\n    setQuestions(prev => prev.map((question, i) => {\r\n      if (i === questionIndex) {\r\n        return {\r\n          ...question,\r\n          exercisePrompts: [\r\n            ...question.exercisePrompts,\r\n            {\r\n              id: crypto.randomUUID(),\r\n              text: '',\r\n              media: '',\r\n              type: 'image',\r\n              narration: 'Your turn',\r\n              saytext: 'Say: ',\r\n              created_at: new Date().toISOString(),\r\n              updated_at: new Date().toISOString()\r\n            }\r\n          ]\r\n        };\r\n      }\r\n      return question;\r\n    }));\r\n  }, []);\r\n\r\n  const handleRemoveExercisePrompt = useCallback((questionIndex: number, promptIndex: number) => {\r\n    setQuestions(prev => prev.map((question, i) => {\r\n      if (i === questionIndex) {\r\n        return {\r\n          ...question,\r\n          exercisePrompts: question.exercisePrompts.filter((_, j) => j !== promptIndex)\r\n        };\r\n      }\r\n      return question;\r\n    }));\r\n  }, []);\r\n\r\n  const handleExercisePromptChange = useCallback(async (\r\n    questionIndex: number,\r\n    promptIndex: number,\r\n    updatedPrompt: ExercisePrompt\r\n  ) => {\r\n    try {\r\n      const promptUpdate = {\r\n        id: updatedPrompt.id,\r\n        question_id: updatedPrompt.question_id,\r\n        text: updatedPrompt.text,\r\n        type: updatedPrompt.type,\r\n        narration: updatedPrompt.narration,\r\n        saytext: updatedPrompt.saytext,\r\n        media: updatedPrompt.media,\r\n        // Remove order_index as it's not in schema\r\n        created_at: new Date().toISOString()\r\n      };\r\n\r\n      const { error: promptError } = await supabase\r\n        .from('exercise_prompts')\r\n        .upsert(promptUpdate)\r\n        .select();\r\n\r\n      if (promptError) throw promptError;\r\n\r\n      // Update local state\r\n      setQuestions(prev => prev.map((question, i) => {\r\n        if (i === questionIndex) {\r\n          const newPrompts = [...question.exercisePrompts];\r\n          newPrompts[promptIndex] = updatedPrompt;\r\n          return { ...question, exercisePrompts: newPrompts };\r\n        }\r\n        return question;\r\n      }));\r\n\r\n    } catch (error) {\r\n      console.error('Error saving prompt:', error);\r\n      toast.error('Failed to save prompt');\r\n    }\r\n  }, []);\r\n\r\n  const handleAddActivity = useCallback(() => {\r\n    const newActivity: Activity = {\r\n      id: crypto.randomUUID(),\r\n      lesson_id: currentLessonId || '',\r\n      created_at: new Date().toISOString(),\r\n      type: 'practice',\r\n      title: '',\r\n      name: '',\r\n      instructions: '',\r\n      media: [],\r\n      data: {\r\n        prompt: '',\r\n        teacherScript: '',\r\n        media: []\r\n      }\r\n    };\r\n    setActivities(prev => [...prev, newActivity]);\r\n  }, [currentLessonId]);\r\n\r\n  const handleUpdateActivity = useCallback((index: number, updatedActivity: Activity) => {\r\n    setActivities(prev => prev.map((activity, i) => i === index ? updatedActivity : activity));\r\n  }, []);\r\n\r\n  const handleRemoveActivity = useCallback((index: number) => {\r\n    setActivities(prev => prev.filter((_, i) => i !== index));\r\n  }, []);\r\n\r\n  const handleExercisePromptUpdate = useCallback((questionIndex: number, promptIndex: number, updatedPrompt: ExercisePrompt) => {\r\n    const updatedQuestions = [...questions];\r\n    updatedQuestions[questionIndex].exercisePrompts[promptIndex] = updatedPrompt;\r\n    handleUpdateQuestion(questionIndex, updatedQuestions[questionIndex]);\r\n  }, [questions, handleUpdateQuestion]);\r\n\r\n  const handleQuestionDataChange = useCallback((questionIndex: number, field: string, value: string) => {\r\n    setQuestions(prev => prev.map((q, i) => \r\n      i === questionIndex \r\n        ? { \r\n            ...q, \r\n            data: { \r\n              prompt: q.data?.prompt || '',\r\n              teacherScript: q.data?.teacherScript || '',\r\n              ...q.data,\r\n              [field]: value \r\n            } \r\n          }\r\n        : q\r\n    ));\r\n  }, []);\r\n\r\n  const [isSaving, setIsSaving] = useState(false);\r\n\r\n  const handleSaveLesson = async () => {\r\n    try {\r\n      if (!currentLessonId || !selectedSubtopicId) {\r\n        toast.error('Please select a subtopic and lesson first');\r\n        return;\r\n      }\r\n\r\n      const { data: { session } } = await supabase.auth.getSession();\r\n      if (!session?.user) {\r\n        toast.error('Please sign in to save lessons');\r\n        return;\r\n      }\r\n\r\n      // First check if we own this lesson\r\n      const { data: existingLesson, error: checkError } = await supabase\r\n        .from('lessons')\r\n        .select('user_id')\r\n        .eq('id', currentLessonId)\r\n        .single();\r\n\r\n      if (checkError) {\r\n        console.error('Error checking lesson ownership:', checkError);\r\n        toast.error('Failed to verify lesson ownership');\r\n        return;\r\n      }\r\n\r\n      // If lesson exists but we don't own it\r\n      if (existingLesson && existingLesson.user_id !== session.user.id) {\r\n        toast.error('You do not have permission to edit this lesson');\r\n        return;\r\n      }\r\n\r\n      const lessonData = {\r\n        id: currentLessonId,\r\n        title: lessonTitle,\r\n        subtopic_id: selectedSubtopicId,\r\n        //user_id: session.user.id,\r\n        updated_at: new Date().toISOString(),\r\n        ...((!existingLesson ? { subtopic_id: selectedSubtopicId } : {}))\r\n      };\r\n      \r\n      console.log('📦 Data being sent to Supabase:', lessonData);\r\n\r\n      const { error: lessonError } = await supabase\r\n        .from('lessons')\r\n        .upsert(lessonData, { onConflict: 'id' });\r\n\r\n      if (lessonError) throw lessonError;\r\n\r\n      // 2. Save lesson content\r\n      const { data: existingContent } = await supabase\r\n        .from('lesson_content')\r\n        .select('id')\r\n        .eq('lesson_id', currentLessonId)\r\n        .single();\r\n\r\n      const contentUpdate = {\r\n        id: existingContent?.id || crypto.randomUUID(),\r\n        lesson_id: currentLessonId,\r\n        content: [lessonContent],\r\n        metadata: JSON.stringify({\r\n          lastEdited: new Date().toISOString(),\r\n          version: 1,\r\n          status: 'draft'\r\n        }),\r\n        content_type: 'html',\r\n        created_at: new Date().toISOString()\r\n      };\r\n\r\n      const { error: contentError } = await supabase\r\n        .from('lesson_content')\r\n        .upsert(contentUpdate, { onConflict: 'id' });\r\n\r\n      if (contentError) throw contentError;\r\n\r\n      // 3. Save questions\r\n      for (const question of questions) {\r\n        const questionData = {\r\n          id: question.id,\r\n          lesson_id: currentLessonId,\r\n          type: question.type,\r\n          title: question.title,\r\n          metadata: question.metadata,\r\n          data: question.data,\r\n          updated_at: new Date().toISOString(),\r\n          user_id: session.user.id\r\n        };\r\n\r\n        const { error: questionError } = await supabase\r\n          .from('questions')\r\n          .upsert(questionData, { onConflict: 'id' });\r\n\r\n        if (questionError) throw questionError;\r\n\r\n        //4. Save exercise prompts for this question\r\n        if (question.exercisePrompts) {\r\n          for (const prompt of question.exercisePrompts) {\r\n            const promptData = {\r\n              id: prompt.id,\r\n              question_id: question.id,\r\n              text: prompt.text,\r\n              media: prompt.media,\r\n              type: prompt.type,\r\n              narration: prompt.narration,\r\n              saytext: prompt.saytext,\r\n              user_id: session.user.id,\r\n              updated_at: new Date().toISOString()\r\n            };\r\n\r\n            const { error: promptError } = await supabase\r\n              .from('exercise_prompts')\r\n              .upsert(promptData, { onConflict: 'id' });\r\n\r\n            if (promptError) throw promptError;\r\n          }\r\n        }\r\n      }\r\n\r\n      // 5. Save activities\r\n      if (activities.length > 0) {\r\n        const activitiesData = activities.map(activity => ({\r\n          id: activity.id,\r\n          lesson_id: currentLessonId,\r\n          type: activity.type,\r\n          title: activity.title,\r\n          name: activity.name,\r\n          instructions: activity.instructions,\r\n          media: activity.media,\r\n          data: activity.data,\r\n          created_at: new Date().toISOString()\r\n        }));\r\n\r\n        const { error: activitiesError } = await supabase\r\n          .from('activities')\r\n          .upsert(activitiesData, { onConflict: 'id' });\r\n\r\n        if (activitiesError) throw activitiesError;\r\n      }\r\n\r\n      toast.success('Lesson saved successfully');\r\n    } catch (error) {\r\n      console.error('Save error:', error);\r\n      toast.error('Failed to save lesson');\r\n    }\r\n  };\r\n\r\n  const handleSaveQuestion = async (question: Question, index: number) => {\r\n    const loadingToast = toast.loading(`Saving question ${index + 1}...`);\r\n    \r\n    try {\r\n      const { data: { session } } = await supabase.auth.getSession();\r\n      if (!session?.user) {\r\n        toast.error('Please sign in to save question', { id: loadingToast });\r\n        return;\r\n      }\r\n\r\n      // Save question\r\n      const questionData = {\r\n        id: question.id,\r\n        lesson_id: currentLessonId,\r\n        type: question.type,\r\n        title: question.title,\r\n        metadata: question.metadata,\r\n        data: question.data,\r\n        user_id: session.user.id,\r\n        updated_at: new Date().toISOString()\r\n      };\r\n\r\n      const { error: questionError } = await supabase\r\n        .from('questions')\r\n        .upsert(questionData, { onConflict: 'id' });\r\n\r\n      if (questionError) throw questionError;\r\n\r\n      // Save exercise prompts if they exist\r\n      if (question.exercisePrompts?.length) {\r\n        for (const prompt of question.exercisePrompts) {\r\n          const promptData = {\r\n            id: prompt.id,\r\n            question_id: question.id,\r\n            text: prompt.text,\r\n            type: prompt.type,\r\n            narration: prompt.narration,\r\n            saytext: prompt.saytext,\r\n            media: prompt.media,\r\n            user_id: session.user.id,\r\n            updated_at: new Date().toISOString()\r\n          };\r\n\r\n          const { error: promptError } = await supabase\r\n            .from('exercise_prompts')\r\n            .upsert(promptData, { onConflict: 'id' });\r\n\r\n          if (promptError) throw promptError;\r\n        }\r\n      }\r\n\r\n      toast.success(`Question ${index + 1} saved successfully`, { id: loadingToast });\r\n    } catch (error) {\r\n      console.error('Error saving question:', error);\r\n      toast.error(`Failed to save question ${index + 1}`, { id: loadingToast });\r\n    }\r\n  };\r\n\r\n  const handleSaveActivity = async (activity: Activity) => {\r\n    try {\r\n      await contentService.saveActivity(activity);\r\n      toast.success('Activity saved');\r\n    } catch (error) {\r\n      console.error('Failed to save activity:', error);\r\n      toast.error('Failed to save activity');\r\n    }\r\n  };\r\n\r\n  // Effects\r\n  useEffect(() => {\r\n    const fetchGrades = async () => {\r\n      try {\r\n        const { data, error } = await supabase\r\n          .from('grades')\r\n          .select('*')\r\n          .order('name');\r\n\r\n        if (error) {\r\n          console.error('Supabase error:', error);\r\n          throw error;\r\n        }\r\n\r\n        if (!data) {\r\n          throw new Error('No data returned from Supabase');\r\n        }\r\n\r\n        // Map the grades to match your interface\r\n        const validGrades = data.map((grade: any) => ({\r\n          _id: grade.id,\r\n          id: grade.id,\r\n          name: grade.name,\r\n          level: grade.level || 0,  // Add default value if not provided\r\n          orderIndex: grade.order_index || 0,  // Add default value if not provided\r\n          topics: []\r\n        }));\r\n        \r\n        setGrades(validGrades);\r\n      } catch (error) {\r\n        console.error('Error fetching grades:', error);\r\n        toast.error('Failed to fetch grades');\r\n      }\r\n    };\r\n\r\n    fetchGrades();\r\n  }, []);\r\n\r\n  // Topic Selection\r\n  useEffect(() => {\r\n    const fetchTopics = async () => {\r\n      if (!selectedGradeId) return;\r\n      \r\n      try {\r\n        const { data, error } = await supabase\r\n          .from('topics')\r\n          .select('*')\r\n          .eq('grade_id', selectedGradeId)\r\n          .order('title');\r\n\r\n        if (error) {\r\n          throw error;\r\n        }\r\n\r\n        // Map the topics to match your interface\r\n        const validTopics = (data || []).map((topic: any) => ({\r\n          _id: topic.id,\r\n          id: topic.id,\r\n          name: topic.title,\r\n          title: topic.title,\r\n          grade_id: topic.grade_id,\r\n          subtopics: []\r\n        }));\r\n        \r\n        setTopics(validTopics);\r\n      } catch (error) {\r\n        console.error('Error fetching topics:', error);\r\n        toast.error('Failed to fetch topics');\r\n      }\r\n    };\r\n\r\n    fetchTopics();\r\n  }, [selectedGradeId]);\r\n\r\n  // Subtopic Selection\r\n  useEffect(() => {\r\n    const fetchSubtopics = async () => {\r\n      if (!selectedTopicId) return;\r\n      \r\n      try {\r\n        // Use content service to fetch subtopics\r\n        const subtopicsData = await contentService.fetchSubtopics(selectedTopicId);\r\n        console.log('Fetched subtopics:', subtopicsData);\r\n\r\n        const validSubtopics = subtopicsData.map((subtopic: any) => ({\r\n          id: subtopic.id,\r\n          title: subtopic.title,\r\n          description: subtopic.description,\r\n          topic_id: subtopic.topic_id,\r\n          lessons: [],\r\n          order_index: subtopicsData.length\r\n        }));\r\n        \r\n        setSubtopics(validSubtopics);\r\n        \r\n        // Update global state\r\n        if (selectedSubtopic) {\r\n          setSelectedSubtopic(selectedSubtopic);\r\n        }\r\n      } catch (err) {\r\n        const error = err as Error;\r\n        console.error('Error fetching subtopics:', error);\r\n        toast.error('Failed to fetch subtopics');\r\n      }\r\n    };\r\n\r\n    fetchSubtopics();\r\n  }, [selectedTopicId, selectedSubtopic, setSelectedSubtopic]);\r\n\r\n  // Add effect to monitor subtopics state\r\n  useEffect(() => {\r\n    console.log('Current subtopics state:', subtopics);\r\n  }, [subtopics]);\r\n\r\n  // Add fetchLessons function\r\n  const fetchLessons = useCallback(async () => {\r\n    if (!selectedSubtopicId) return;\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('lessons')\r\n        .select('*')\r\n        .eq('subtopic_id', selectedSubtopicId)\r\n        .order('title');\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n      \r\n      // Map the lessons to ensure they have _id\r\n      const validLessons = (data || []).map((lesson: any) => ({\r\n        ...lesson,\r\n        _id: lesson._id || lesson.id, // Use _id if available, otherwise use id\r\n        title: lesson.title || 'Untitled Lesson'\r\n      })).filter((lesson: any) => lesson._id); // Only include lessons with valid IDs\r\n      \r\n      setLessons(validLessons);\r\n    } catch (error) {\r\n      console.error('Error fetching lessons:', error);\r\n      toast.error('Failed to fetch lessons');\r\n    }\r\n  }, [selectedSubtopicId]);\r\n  // Add loadLessonContent function\r\n  const isLoading = useRef(false);\r\n  const loadLessonContent = useCallback(async (lessonId: string) => {\r\n    // Prevent multiple simultaneous loads\r\n    if (isLoading.current) return;\r\n    isLoading.current = true;\r\n\r\n    const controller = new AbortController();\r\n\r\n    try {\r\n      // Clear existing content first\r\n      setLessonTitle('');\r\n      setContentHeading('');\r\n      setLessonContent('');\r\n      setQuestions([]);\r\n      \r\n      // First fetch lesson data\r\n      const { data: lessonData, error: lessonError } = await supabase\r\n        .from('lessons')\r\n        .select('*')\r\n        .eq('id', lessonId)\r\n        .single()\r\n        \r\n\r\n      if (lessonError) {\r\n        console.error('Lesson fetch error:', lessonError);\r\n        throw lessonError;\r\n      }\r\n\r\n      // Set lesson data\r\n      setLessonTitle(lessonData.title || '');\r\n      setContentHeading(lessonData.content || '');\r\n\r\n      // Then fetch lesson content with explicit headers\r\n      const { data: contentData, error: contentError } = await supabase\r\n        .from('lesson_content')\r\n        .select('*')\r\n        .eq('lesson_id', lessonId)\r\n        .order('updated_at', { ascending: false })\r\n        .limit(1)\r\n        .maybeSingle();\r\n\r\n      if (contentError) {\r\n        console.error('Content fetch error:', contentError);\r\n        throw contentError;\r\n      }\r\n\r\n      // Set content if available\r\n      if (contentData?.content) {\r\n        setLessonContent(typeof contentData.content === 'string' \r\n          ? contentData.content \r\n          : JSON.stringify(contentData.content)\r\n        );\r\n      }\r\n\r\n    } catch (error: unknown) {\r\n      if (error instanceof Error && error.name === 'AbortError') {\r\n        console.log('Request aborted');\r\n        return;\r\n      }\r\n      console.error('Error loading lesson:', error);\r\n      toast.error('Failed to load lesson content');\r\n      \r\n      // Reset states on error\r\n      setLessonTitle('');\r\n      setContentHeading('');\r\n      setLessonContent('');\r\n      setQuestions([]);\r\n    } finally {\r\n      isLoading.current = false;\r\n    }\r\n\r\n    return () => {\r\n      controller.abort();\r\n    };\r\n  }, []); // Empty dependencies since we're using closure over state setters\r\n\r\n  // // Add effect for fetching lessons when subtopic changes\r\n  useEffect(() => {\r\n    if (selectedSubtopicId) {\r\n      fetchLessons();\r\n    }\r\n  }, [selectedSubtopicId, fetchLessons]);\r\n\r\n  // Add effect for loading lesson content when currentLessonId changes\r\n    useEffect(() => {\r\n    let isMounted = true;\r\n    let timeoutId: NodeJS.Timeout;\r\n\r\n    const loadContent = async () => {\r\n      if (!currentLessonId || !isMounted) return;\r\n\r\n      // Clear previous timeout if exists\r\n      if (timeoutId) clearTimeout(timeoutId);\r\n\r\n      // Set new timeout for debouncing\r\n      timeoutId = setTimeout(() => {\r\n        if (isMounted) {\r\n          loadLessonContent(currentLessonId);\r\n        }\r\n      }, 300);\r\n    };\r\n\r\n    loadContent();\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      isMounted = false;\r\n      if (timeoutId) clearTimeout(timeoutId);\r\n      if (isLoading.current) isLoading.current = false;\r\n    };\r\n  }, [currentLessonId]); // Remove loadLessonContent from dependencies\r\n\r\n  useEffect(() => {\r\n    console.log('Current lessons state:', lessons);\r\n  }, [lessons]);\r\n\r\n    // Add keyboard shortcut for saving\r\n  useEffect(() => {\r\n    const handleKeyDown = (e: KeyboardEvent) => {\r\n      if ((e.ctrlKey || e.metaKey) && e.key === 's') {\r\n        e.preventDefault();\r\n        handleSaveLesson();\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => window.removeEventListener('keydown', handleKeyDown);\r\n  }, [handleSaveLesson]);\r\n\r\n  // Add SaveFeedback component\r\n  const SaveFeedback = useCallback(() => {\r\n    if (saveProgress === 'idle') return null;\r\n\r\n    return (\r\n    <div className=\"fixed bottom-4 right-4\">\r\n      {saveProgress === 'saving' && (\r\n        <div className=\"flex items-center gap-2 bg-background border rounded-lg px-4 py-2 shadow-lg\">\r\n          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n          <span className=\"text-sm\">Saving changes...</span>\r\n        </div>\r\n      )}\r\n      {saveProgress === 'saved' && (\r\n        <div className=\"flex items-center gap-2 bg-green-500 text-white rounded-lg px-4 py-2 shadow-lg\">\r\n          <Check className=\"h-4 w-4\" />\r\n          <span className=\"text-sm\">Changes saved</span>\r\n        </div>\r\n      )}\r\n      {saveProgress === 'error' && (\r\n        <div className=\"flex items-center gap-2 bg-destructive text-destructive-foreground rounded-lg px-4 py-2 shadow-lg\">\r\n          <X className=\"h-4 w-4\" />\r\n          <span className=\"text-sm\">Error saving changes</span>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n  }, [saveProgress]);\r\n\r\n  // Update handlers\r\n  const handleGradeSelect = (gradeId: string) => {\r\n    // Always keep sidebar open during selection\r\n    setIsSidebarCollapsed(false);\r\n    setIsSidebarLocked(true);\r\n    \r\n    // Batch state updates\r\n    requestAnimationFrame(() => {\r\n      setSelectedGradeId(gradeId);\r\n      setSelectedGrade(gradeId);\r\n      setSelectedTopicId(null);\r\n      setSelectedTopic('');\r\n      setSelectedSubtopicId(null);\r\n      setSelectedSubtopic('');\r\n      setCurrentLessonId(null);\r\n      \r\n      if (isViewMode) {\r\n        setExpandedGrade(gradeId);\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleTopicSelect = (value: string) => {\r\n    setSelectedTopicId(value);\r\n    setSelectedTopic(value);\r\n    setSelectedSubtopicId(null);\r\n    setSelectedSubtopic('');\r\n    setCurrentLessonId(null);\r\n  };\r\n\r\n  const handleSubtopicSelect = (value: string) => {\r\n    setSelectedSubtopicId(value);\r\n    setSelectedSubtopic(value);\r\n    setCurrentLessonId(null);\r\n  };\r\n\r\n  const handleLessonSelect = async (lessonId: string) => {\r\n    try {\r\n      // Lock sidebar during selection\r\n      setIsSidebarLocked(true);\r\n      setIsSidebarCollapsed(false);\r\n      setCurrentLessonId(lessonId);\r\n      \r\n      // 1. Fetch lesson data\r\n      const { data: lessonData, error: lessonError } = await supabase\r\n        .from('lessons')\r\n        .select('*')\r\n        .eq('id', lessonId)\r\n        .single();\r\n\r\n      if (lessonError) throw lessonError;\r\n\r\n      // 2. Fetch questions with exercise prompts\r\n      const { data: questionsData, error: questionsError } = await supabase\r\n        .from('questions')\r\n        .select(`\r\n          *,\r\n          exercise_prompts (*)\r\n        `)\r\n        .eq('lesson_id', lessonId);\r\n\r\n      if (questionsError) throw questionsError;\r\n\r\n      // 3. Fetch activities - removed order_index\r\n      const { data: activitiesData, error: activitiesError } = await supabase\r\n        .from('activities')\r\n        .select('*')\r\n        .eq('lesson_id', lessonId);\r\n\r\n      if (activitiesError) throw activitiesError;\r\n\r\n      // Format questions with their exercise prompts\r\n      const formattedQuestions = questionsData?.map(q => ({\r\n        ...q,\r\n        data: q.data || {},\r\n        exercisePrompts: q.exercise_prompts || []\r\n      })) || [];\r\n\r\n      // Set all states\r\n      setLessonTitle(lessonData.title || '');\r\n      setLessonContent(lessonData.content || '');\r\n      setQuestions(formattedQuestions);\r\n      setActivities(activitiesData || []);\r\n\r\n      // After successful load, unlock sidebar and allow collapse\r\n      setTimeout(() => {\r\n        setIsSidebarLocked(false);\r\n        if (!isSidebarLocked) {\r\n          setIsSidebarCollapsed(true);\r\n        }\r\n      }, 300);\r\n\r\n    } catch (error) {\r\n      console.error('Error loading lesson:', error);\r\n      toast.error('Failed to load lesson');\r\n      // Reset states on error\r\n      setLessonTitle('');\r\n      setLessonContent('');\r\n      setQuestions([]);\r\n      setActivities([]);\r\n    }\r\n    if (!isSidebarLocked) {\r\n      setIsSidebarCollapsed(true);\r\n    }\r\n  };\r\n\r\n  // Update the expansion handlers\r\n  const handleTopicExpand = (topicId: string | null) => {\r\n    setExpandedTopic(expandedTopic === topicId ? null : topicId);\r\n  };\r\n\r\n  const handleSubtopicExpand = (subtopicId: string | null) => {\r\n    setExpandedSubtopic(expandedSubtopic === subtopicId ? null : subtopicId);\r\n  };\r\n\r\n  const handleQuestionExpand = (index: number) => {\r\n    setExpandedQuestion(expandedQuestion === index ? null : index);\r\n  };\r\n\r\n  const handleActivityExpand = (index: number) => {\r\n    setExpandedActivity(expandedActivity === index ? null : index);\r\n  };\r\n\r\n  // Add effect to save mode changes to localStorage\r\n  useEffect(() => {\r\n    localStorage.setItem('lessonManagementViewMode', isViewMode.toString());\r\n  }, [isViewMode]);\r\n\r\n  // Add handlers for creating new items\r\n  const handleCreateGrade = async () => {\r\n    try {\r\n      const response = await fetch(`${API_ENDPOINT}/grades`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ name: newItemData.name })\r\n      });\r\n\r\n      if (!response.ok) throw new Error('Failed to create grade');\r\n      const data = await response.json();\r\n      \r\n      if (!data.success) throw new Error(data.message || 'Failed to create grade');\r\n      \r\n      // Update grades list\r\n      setGrades([...grades, data.data.grade]);\r\n      setModalState({ ...modalState, showAddGrade: false });\r\n      setNewItemData({ name: '', description: '' });\r\n      toast.success('Grade created successfully');\r\n    } catch (error) {\r\n      console.error('Error creating grade:', error);\r\n      toast.error('Failed to create grade');\r\n    }\r\n  };\r\n\r\n  const handleCreateTopic = async (topicData: CreateTopicInput) => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('topics')\r\n        .insert([\r\n          {\r\n            title: topicData.title,\r\n            description: topicData.description,\r\n            category_id: topicData.categoryId,\r\n            created_by: user?.id // Assuming you have user context\r\n          }\r\n        ])\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      // Optionally refresh topics list or add to local state\r\n      setTopics(prev => [...prev, data]);\r\n      \r\n      toast.success('Topic created successfully');\r\n      return data;\r\n\r\n    } catch (err) {\r\n      logger.error(`Failed to create topic: ${err instanceof Error ? err.message : String(err)}`, 'TopicsPage');\r\n      toast.error('Failed to create topic');\r\n      throw new Error('Failed to create topic');\r\n    }\r\n  };\r\n\r\n  const handleCreateSubtopic = async (data: { title: string; description?: string }) => {\r\n    try {\r\n      if (!selectedTopicId) {\r\n        toast.error('Please select a topic first');\r\n        return;\r\n      }\r\n\r\n      const newSubtopic = await contentService.createSubtopic({\r\n        ...data,\r\n        topicId: selectedTopicId\r\n      });\r\n\r\n      setSubtopics(prev => [...prev, {\r\n        _id: newSubtopic.id,\r\n        id: newSubtopic.id,\r\n        name: newSubtopic.title,\r\n        title: newSubtopic.title,\r\n        description: newSubtopic.description,\r\n        topic_id: newSubtopic.topic_id,\r\n        orderIndex: prev.length,\r\n        lessons: []\r\n      }]);\r\n\r\n      toast.success('Subtopic created successfully');\r\n      setModalState(prev => ({ ...prev, showAddSubtopic: false }));\r\n    } catch (err) {\r\n      const error = err as Error;\r\n      console.error('Error creating subtopic:', error);\r\n      toast.error('Failed to create subtopic');\r\n    }\r\n  };\r\n\r\n  const handleUpdateSubtopic = async (subtopicId: string, data: { title: string; description?: string }) => {\r\n    try {\r\n      const { data: updatedSubtopic, error } = await supabase\r\n        .from('sub_topics')\r\n        .update(data)\r\n        .eq('id', subtopicId)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      \r\n      setSubtopics(prev => prev.map(subtopic => \r\n        subtopic.id === subtopicId \r\n          ? {\r\n              ...subtopic,\r\n              name: updatedSubtopic.title\r\n            }\r\n          : subtopic\r\n      ));\r\n\r\n      toast.success('Subtopic updated successfully');\r\n    } catch (err) {\r\n      const error = err as Error;\r\n      console.error('Error updating subtopic:', error);\r\n      toast.error('Failed to update subtopic');\r\n    }\r\n  };\r\n\r\n  const handleDeleteSubtopic = async (subtopicId: string) => {\r\n    try {\r\n      await contentService.deleteSubtopic(subtopicId);\r\n      setSubtopics(prev => prev.filter(subtopic => subtopic.id !== subtopicId));\r\n      setSelectedSubtopicId(null);\r\n      toast.success('Subtopic deleted successfully');\r\n    } catch (err) {\r\n      const error = err as Error;\r\n      console.error('Error deleting subtopic:', error);\r\n      toast.error('Failed to delete subtopic');\r\n    }\r\n  };\r\n\r\n  const handleCreateLesson = async () => {\r\n    if (!selectedSubtopicId) {\r\n      toast.error('Please select a subtopic first');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // First create the lesson\r\n      const { data: newLesson, error: lessonError } = await supabase\r\n        .from('lessons')\r\n        .insert({\r\n          title: newItemData.name,\r\n          subtopic_id: selectedSubtopicId,\r\n          content: '', // Empty rich text content initially\r\n          status: 'draft'\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (lessonError) throw lessonError;\r\n\r\n      // Create initial question\r\n      const { data: newQuestion, error: questionError } = await supabase\r\n        .from('questions')\r\n        .insert({\r\n          lesson_id: newLesson.id,\r\n          type: 'speaking', // default type\r\n          title: 'Question 1',\r\n          data: {\r\n            prompt: '',\r\n            teacherScript: '',\r\n            options: []\r\n          },\r\n          order_index: 0\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (questionError) throw questionError;\r\n\r\n      // Create initial exercise prompts for the question\r\n      const { error: promptsError } = await supabase\r\n        .from('exercise_prompts')\r\n        .insert([\r\n          {\r\n            question_id: newQuestion.id,\r\n            text: '',\r\n            type: 'image',\r\n            narration: '',\r\n            saytext: '',\r\n            media: [],\r\n            order_index: 0\r\n          },\r\n          {\r\n            question_id: newQuestion.id,\r\n            text: '',\r\n            type: 'gif',\r\n            narration: '',\r\n            saytext: '',\r\n            media: [],\r\n            order_index: 1\r\n          }\r\n        ]);\r\n\r\n      if (promptsError) throw promptsError;\r\n\r\n      // Create initial activity\r\n      // const { error: activityError } = await supabase\r\n      //   .from('activities')\r\n      //   .insert({\r\n      //     lesson_id: newLesson.id,\r\n      //     type: 'practice',\r\n      //     title: '',\r\n      //     instructions: '',\r\n      //     media: [],\r\n      //     data: {\r\n      //       prompt: '',\r\n      //       teacherScript: '',\r\n      //       media: []\r\n      //     },\r\n      //     order_index: 0\r\n      //   });\r\n\r\n      // if (activityError) throw activityError;\r\n\r\n      // Update UI state\r\n      setLessons(prev => [...prev, newLesson]);\r\n      setCurrentLessonId(newLesson.id);\r\n      setLessonTitle(newLesson.title);\r\n      setModalState({ ...modalState, showAddLesson: false });\r\n      setNewItemData({ name: '', description: '' });\r\n      toast.success('Lesson created successfully');\r\n\r\n    } catch (error) {\r\n      console.error('Error creating lesson:', error);\r\n      toast.error('Failed to create lesson');\r\n    }\r\n  };\r\n\r\n  // Effect to handle localStorage after mount\r\n  useEffect(() => {\r\n    const storedMode = localStorage.getItem('lessonManagementViewMode');\r\n    if (storedMode !== null) {\r\n      setIsViewMode(storedMode === 'true');\r\n    }\r\n  }, []);\r\n\r\n  // Update the cleanupModalState function\r\n  const cleanupModalState = useCallback(() => {\r\n    document.body.style.pointerEvents = '';\r\n    document.body.style.overflow = '';\r\n    setModalState({\r\n      showAddGrade: false,\r\n      showAddTopic: false,\r\n      showAddSubtopic: false,\r\n      showAddLesson: false\r\n    });\r\n    setNewItemData({ name: '', description: '' });\r\n  }, []);\r\n\r\n  // Add a function to handle modal state changes\r\n  const handleModalStateChange = useCallback((modalType: keyof typeof modalState, open: boolean) => {\r\n    if (!open) {\r\n      cleanupModalState();\r\n    } else {\r\n      setModalState(prev => ({ ...prev, [modalType]: open }));\r\n    }\r\n  }, [cleanupModalState]);\r\n\r\n  const handleContentSave = async (content: string) => {\r\n    const loadingToast = toast.loading(\"Saving content...\", {\r\n      action: {\r\n        label: \"Close\",\r\n        onClick: () => toast.dismiss()\r\n      }\r\n    });\r\n    \r\n    try {\r\n      const { data: { session } } = await supabase.auth.getSession();\r\n      if (!session?.user) {\r\n        toast.error('Please sign in to save content', { id: loadingToast });\r\n        return;\r\n      }\r\n\r\n      // Get the most recent content entry\r\n      const { data: existingContent, error: checkError } = await supabase\r\n        .from('lesson_content')\r\n        .select('id')\r\n        .eq('lesson_id', currentLessonId)\r\n        .order('updated_at', { ascending: false })\r\n        .limit(1)\r\n        .maybeSingle();\r\n\r\n      // If content exists, update it; if not, insert new\r\n      const { error } = await supabase\r\n        .from('lesson_content')\r\n        .upsert({\r\n          id: existingContent?.id, // This ensures we update if id exists\r\n          lesson_id: currentLessonId,\r\n          content: [content],\r\n          content_type: 'text',\r\n          metadata: {\r\n            heading: contentHeading\r\n          },\r\n          user_id: session.user.id,\r\n          updated_at: new Date().toISOString()\r\n        }, {\r\n          onConflict: 'id'  // This ensures we update based on lesson_id\r\n        });\r\n\r\n      if (error) throw error;\r\n\r\n      // Save questions separately\r\n      for (const question of questions) {\r\n        const { exercisePrompts, ...questionData } = question; // Remove exercisePrompts from question data\r\n        \r\n        // Save question\r\n        const { error: questionError } = await supabase\r\n          .from('questions')\r\n          .upsert(questionData, {\r\n            onConflict: 'id'\r\n          })\r\n          .select();\r\n\r\n        if (questionError) throw questionError;\r\n\r\n        // Save exercise prompts\r\n        if (exercisePrompts?.length > 0) {\r\n          for (const prompt of exercisePrompts) {\r\n            const { error: promptError } = await supabase\r\n              .from('exercise_prompts')\r\n              .upsert(prompt, {\r\n                onConflict: 'id'\r\n              })\r\n              .select();\r\n\r\n            if (promptError) throw promptError;\r\n          }\r\n        }\r\n      }\r\n      \r\n      toast.success(\"Content saved successfully\", {\r\n        action: {\r\n          label: \"Close\",\r\n          onClick: () => toast.dismiss()\r\n        },\r\n        id: loadingToast,\r\n      });\r\n      setIsContentEditorOpen(false);\r\n    } catch (error) {\r\n      console.error('Error saving content:', error);\r\n      toast.error(\"Failed to save content\", {\r\n        action: {\r\n          label: \"Close\",\r\n          onClick: () => toast.dismiss()\r\n        },\r\n        id: loadingToast,\r\n      });\r\n    }\r\n  };\r\n\r\n  // Add this component for inline editing\r\n  const InlineEdit = ({ \r\n    value, \r\n    onSave, \r\n    isEditing, \r\n    setIsEditing, \r\n    placeholder,\r\n    className = \"\"\r\n  }: InlineEditProps) => {\r\n    const [tempValue, setTempValue] = useState(value);\r\n    \r\n    return isEditing ? (\r\n      <div className=\"flex items-center gap-2\">\r\n        <Input\r\n          value={tempValue}\r\n          onChange={(e) => setTempValue(e.target.value)}\r\n          placeholder={placeholder}\r\n          className={className}\r\n          autoFocus\r\n        />\r\n        <Button\r\n          size=\"sm\"\r\n          variant=\"ghost\"\r\n          onClick={() => {\r\n            onSave(tempValue);\r\n            setIsEditing(false);\r\n          }}\r\n        >\r\n          <Check className=\"h-4 w-4 text-green-500\" />\r\n        </Button>\r\n        <Button\r\n          size=\"sm\"\r\n          variant=\"ghost\"\r\n          onClick={() => setIsEditing(false)}\r\n        >\r\n          <X className=\"h-4 w-4 text-red-500\" />\r\n        </Button>\r\n      </div>\r\n    ) : (\r\n      <div \r\n        className=\"group flex items-center gap-2 cursor-pointer\"\r\n        onClick={() => setIsEditing(true)}\r\n      >\r\n        <span className={className}>{value || placeholder}</span>\r\n        <Pencil className=\"h-4 w-4 opacity-0 group-hover:opacity-100 transition-opacity\" />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Add this effect to handle auto-collapse after lesson selection\r\n  useEffect(() => {\r\n    if (currentLessonId && selectedGradeId && selectedTopicId && selectedSubtopicId) {\r\n      setIsSidebarLocked(false);\r\n      // Optional: add a slight delay before collapsing\r\n      setTimeout(() => setIsSidebarCollapsed(true), 300);\r\n    }\r\n  }, [currentLessonId, selectedGradeId, selectedTopicId, selectedSubtopicId]);\r\n\r\n  // Add individual save handlers\r\n  // const handleSaveQuestion = async (question: Question, index: number) => {\r\n  //   try {\r\n  //     // Update status to saving\r\n  //     setQuestionSaveStatuses(prev => [\r\n  //       ...prev.filter(s => s.id !== question.id),\r\n  //       { id: question.id, status: 'saving' }\r\n  //     ]);\r\n\r\n  //     const questionUpsert = {\r\n  //       id: question.id,\r\n  //       lesson_id: currentLessonId,\r\n  //       type: question.type,\r\n  //       title: question.data?.prompt || 'Untitled Question',\r\n  //       metadata: question.metadata || {},\r\n  //       data: {\r\n  //         prompt: question.data?.prompt || '',\r\n  //         teacherScript: question.data?.teacherScript || '',\r\n  //         ...question.data\r\n  //       },\r\n  //       order_index: index,\r\n  //       created_at: new Date().toISOString(),\r\n  //       updated_at: new Date().toISOString()\r\n  //     };\r\n\r\n  //     const { error: questionError } = await supabase\r\n  //       .from('questions')\r\n  //       .upsert(questionUpsert);\r\n\r\n  //     if (questionError) throw questionError;\r\n\r\n  //     // Update status to saved\r\n  //     setQuestionSaveStatuses(prev => [\r\n  //       ...prev.filter(s => s.id !== question.id),\r\n  //       { id: question.id, status: 'saved', lastSaved: new Date().toISOString() }\r\n  //     ]);\r\n\r\n  //     toast.success(`Question ${index + 1} saved successfully`);\r\n  //   } catch (error) {\r\n  //     console.error('Error saving question:', error);\r\n  //     setQuestionSaveStatuses(prev => [\r\n  //       ...prev.filter(s => s.id !== question.id),\r\n  //       { id: question.id, status: 'error' }\r\n  //     ]);\r\n  //     toast.error(`Failed to save question ${index + 1}`);\r\n  //   }\r\n  // };\r\n\r\n  const handleSavePrompt = async (questionId: string, prompt: ExercisePrompt, promptIndex: number) => {\r\n    try {\r\n      setPromptSaveStatuses(prev => [\r\n        ...prev.filter(s => s.id !== prompt.id),\r\n        { id: prompt.id || '', status: 'saving' } as SaveStatus\r\n      ]);\r\n\r\n      const promptUpsert = {\r\n        id: prompt.id,\r\n        question_id: questionId,\r\n        text: prompt.text || '',\r\n        type: prompt.type || 'text',\r\n        narration: prompt.narration || '',\r\n        saytext: prompt.saytext || '',\r\n        media: prompt.media || [],\r\n        order_index: promptIndex,\r\n        created_at: prompt.created_at || new Date().toISOString(),\r\n        updated_at: new Date().toISOString()\r\n      };\r\n\r\n      const { error: promptError } = await supabase\r\n        .from('exercise_prompts')\r\n        .upsert(promptUpsert);\r\n\r\n      if (promptError) throw promptError;\r\n\r\n      setPromptSaveStatuses(prev => [\r\n        ...prev.filter(s => s.id !== prompt.id),\r\n        { id: prompt.id || '', status: 'saved', lastSaved: new Date().toISOString() } as SaveStatus\r\n      ]);\r\n\r\n      toast.success(`Prompt ${promptIndex + 1} saved successfully`);\r\n    } catch (error) {\r\n      console.error('Error saving prompt:', error);\r\n      setPromptSaveStatuses(prev => [\r\n        ...prev.filter(s => s.id !== prompt.id),\r\n        { id: prompt.id || '', status: 'error' } as SaveStatus\r\n      ]);\r\n      toast.error(`Failed to save prompt ${promptIndex + 1}`);\r\n    }\r\n  };\r\n\r\n  // Add effect to mark items as draft when edited\r\n  useEffect(() => {\r\n    questions.forEach(question => {\r\n      if (!questionSaveStatuses.find(s => s.id === question.id)) {\r\n        setQuestionSaveStatuses(prev => [\r\n          ...prev,\r\n          { id: question.id, status: 'draft' }\r\n        ]);\r\n      }\r\n    });\r\n  }, [questions]);\r\n\r\n  // Add this function with your other handlers\r\n  const handleRefreshLesson = async () => {\r\n    if (!currentLessonId) {\r\n      toast.error('No lesson selected');\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      toast.loading('Refreshing lesson content...', {\r\n        action: {\r\n          label: \"Close\",\r\n          onClick: () => toast.dismiss()\r\n        },\r\n      });\r\n      await handleLessonSelect(currentLessonId);\r\n      toast.success('Content refreshed', {\r\n        action: {\r\n          label: \"Close\",\r\n          onClick: () => toast.dismiss()\r\n        },\r\n      });\r\n    } catch (error) {\r\n      console.error('Error refreshing lesson:', error);\r\n      toast.error('Failed to refresh content', {\r\n        action: {\r\n          label: \"Close\",\r\n          onClick: () => toast.dismiss()\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  // Add this function to handle refresh\r\n  const handleRefreshContent = async () => {\r\n    if (!currentLessonId) {\r\n      toast.error('No lesson selected');\r\n      return;\r\n    }\r\n    \r\n    toast.loading('Refreshing content...');\r\n    try {\r\n      await loadLessonContent(currentLessonId);\r\n      toast.success('Content refreshed');\r\n    } catch (error) {\r\n      console.error('Refresh error:', error);\r\n      toast.error('Failed to refresh content');\r\n    }\r\n  };\r\n\r\n  // Render\r\n  return (\r\n      <div className=\"container mx-auto py-8\">\r\n        {/* Header */}\r\n        <div className=\"flex items-center justify-between mb-2\">\r\n          {/* ... header content ... */}\r\n          <div className=\"flex items-center gap-4\">\r\n            <Link href=\"/super-admin\">\r\n              <Button variant=\"outline\" className=\"gap-2\">\r\n                <ArrowLeft className=\"h-4 w-4\" />\r\n                Back\r\n              </Button>\r\n            </Link>\r\n            <div className=\"flex items-center gap-2\">\r\n              <h1 className=\"text-2xl font-bold\">Lesson Management</h1>\r\n              <Button\r\n                variant=\"ghost\"\r\n                size=\"icon\"\r\n                onClick={handleRefreshLesson}\r\n                className=\"ml-2\"\r\n                title=\"Refresh lesson content\"\r\n              >\r\n                <RefreshCw className=\"h-4 w-4\" />\r\n              </Button>\r\n            </div>\r\n            <p className=\"text-sm text-muted-foreground\">Create and manage your educational content</p>\r\n          </div>\r\n          <div className=\"flex items-center gap-2\">\r\n            <Button\r\n              variant=\"outline\"\r\n              size=\"sm\"\r\n              onClick={() => setShowHelpTips(!showHelpTips)}\r\n              className=\"gap-2\"\r\n            >\r\n              {showHelpTips ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\r\n              {showHelpTips ? 'Hide Tips' : 'Show Tips'}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        \r\n        {/* Main content wrapper - Fix the layout here */}\r\n        <div className=\"flex gap-6 h-[calc(100vh-200px)]\">\r\n          {/* Left Sidebar with collapse/expand functionality */}\r\n          <div \r\n            className={cn(\r\n              \"transition-all duration-300 ease-in-out relative\",\r\n              isSidebarCollapsed ? \"w-20\" : \"w-80\",\r\n              \"flex-shrink-0\"\r\n            )}\r\n            onMouseEnter={() => !isSidebarLocked && setIsSidebarCollapsed(false)}\r\n            onMouseLeave={() => !isSidebarLocked && setIsSidebarCollapsed(true)}\r\n          >\r\n            <Card className=\"h-full relative\">\r\n              {/* Lock button - only show after lesson selection */}\r\n              {currentLessonId && (\r\n                <Button\r\n                  variant=\"ghost\"\r\n                  size=\"sm\"\r\n                  className=\"absolute top-2 right-2 z-10\"\r\n                  onClick={() => {\r\n                    setIsSidebarLocked(!isSidebarLocked);\r\n                    if (!isSidebarLocked) {\r\n                      setIsSidebarCollapsed(false);\r\n                    }\r\n                  }}\r\n                >\r\n                  {isSidebarLocked ? <Lock className=\"h-4 w-4\" /> : <Unlock className=\"h-4 w-4\" />}\r\n                </Button>\r\n              )}\r\n\r\n              {/* Sidebar content with overflow handling */}\r\n              <div className={cn(\r\n                \"transition-all duration-300 overflow-hidden\",\r\n                isSidebarCollapsed ? \"opacity-0\" : \"opacity-100\"\r\n              )}>\r\n                <Card className=\"h-full\">\r\n                  <CardHeader className=\"pb-3\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <CardTitle className=\"text-lg font-semibold\">Content Management</CardTitle>\r\n                      <TooltipProvider>\r\n                        <Tooltip>\r\n                          <TooltipTrigger>\r\n                            <HelpCircle className=\"h-4 w-4 text-muted-foreground\" />\r\n                          </TooltipTrigger>\r\n                          <TooltipContent>\r\n                            <p>Manage your educational content here</p>\r\n                          </TooltipContent>\r\n                        </Tooltip>\r\n                      </TooltipProvider>\r\n                      </div>\r\n                    <CardDescription>Create and manage your lessons</CardDescription>\r\n                  </CardHeader>\r\n                  <CardContent className=\"space-y-4\">\r\n                    {/* View/Edit Mode Toggle */}\r\n                    <div className=\"grid grid-cols-2 gap-2 p-1 bg-muted rounded-lg\">\r\n                      <Button\r\n                        variant={isViewMode ? \"default\" : \"ghost\"}\r\n                        size=\"sm\"\r\n                        onClick={() => setIsViewMode(true)}\r\n                        className=\"w-full\"\r\n                      >\r\n                        <Eye className=\"h-4 w-4 mr-2\" />\r\n                        View\r\n                      </Button>\r\n                      <Button\r\n                        variant={!isViewMode ? \"default\" : \"ghost\"}\r\n                        size=\"sm\"\r\n                        onClick={() => setIsViewMode(false)}\r\n                        className=\"w-full\"\r\n                      >\r\n                        <Edit className=\"h-4 w-4 mr-2\" />\r\n                        Edit\r\n                      </Button>\r\n                    </div>\r\n\r\n                    {/* Grade Selection */}\r\n                    <div className=\"space-y-2\">\r\n                      <div className=\"flex items-center justify-between\">\r\n                        <Label htmlFor=\"grade-select\">Grade</Label>\r\n                        {isViewMode && (\r\n                          <Button variant=\"ghost\" size=\"sm\" onClick={() => setExpandedGrade(expandedGrade ? null : selectedGrade)}>\r\n                            {expandedGrade ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n                          </Button>\r\n                        )}\r\n                      </div>\r\n                      <Select \r\n                        value={selectedGradeId || ''}\r\n                        onValueChange={handleGradeSelect}\r\n                        onOpenChange={(open) => {\r\n                          if (open) {\r\n                            // Force sidebar to stay open and lock it\r\n                            setIsSidebarCollapsed(false);\r\n                            setIsSidebarLocked(true);\r\n                          }\r\n                        }}\r\n                      >\r\n                        <SelectTrigger \r\n                          id=\"grade-select\" \r\n                          className=\"w-full\"\r\n                          onClick={(e) => {\r\n                            e.stopPropagation(); // Prevent event bubbling\r\n                            setIsSidebarCollapsed(false);\r\n                            setIsSidebarLocked(true);\r\n                          }}\r\n                        >\r\n                          <SelectValue placeholder=\"Select Grade\" />\r\n                        </SelectTrigger>\r\n                        <SelectContent \r\n                          onCloseAutoFocus={(e) => {\r\n                            e.preventDefault();\r\n                            setIsSidebarLocked(true);\r\n                            setIsSidebarCollapsed(false);\r\n                          }}\r\n                        >\r\n                          {grades.map((grade: Grade) => (\r\n                            <SelectItem \r\n                              key={`grade-${grade.id || 'new'}`} \r\n                              value={grade.id || ''}\r\n                              onMouseDown={(e) => {\r\n                                e.preventDefault();\r\n                                e.stopPropagation();\r\n                              }}\r\n                            >\r\n                              <div className=\"flex items-center gap-2\">\r\n                                <BookOpen className=\"h-4 w-4 text-primary\" />\r\n                                {grade.name}\r\n                              </div>\r\n                            </SelectItem>\r\n                          ))}\r\n                        </SelectContent>\r\n                      </Select>\r\n                      {!isViewMode && (\r\n                      <Button \r\n                        variant=\"outline\" \r\n                        size=\"sm\" \r\n                        className=\"w-full gap-2\"\r\n                        onClick={() => setModalState({ ...modalState, showAddGrade: true })}\r\n                      >\r\n                        <Plus className=\"h-4 w-4\" />\r\n                        Add New Grade\r\n                      </Button>\r\n                      )}\r\n                    </div>\r\n\r\n                    {/* Content Tree View in View Mode */}\r\n                    {isViewMode && expandedGrade && (\r\n                      <div className=\"mt-4 space-y-4\">\r\n                        {topics.map((topic: Topic) => (\r\n                          <Card key={topic.id} className=\"border-l-4 border-l-primary\">\r\n                            <CardHeader className=\"py-3\">\r\n                              <div className=\"flex items-center justify-between\">\r\n                                <h4 className=\"font-medium\">{topic.title}</h4>\r\n                                <Button \r\n                                  variant=\"ghost\" \r\n                                  size=\"sm\" \r\n                                  onClick={() => handleTopicExpand(topic.id || '')}\r\n                                >\r\n                                  {expandedTopic === topic.id ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n                                </Button>\r\n                              </div>\r\n                            </CardHeader>\r\n                            {expandedTopic === topic.id && (\r\n                              <CardContent className=\"py-0 pl-4\">\r\n                                {subtopics\r\n                                  .filter(subtopic => subtopic.topic_id === topic.id)\r\n                                  .map((subtopic: SubTopic) => (\r\n                                    <div key={subtopic.id} className=\"mb-3 last:mb-0\">\r\n                                      <div className=\"flex items-center justify-between py-2\">\r\n                                        <span className=\"text-sm font-medium\">{subtopic.name}</span>\r\n                                        <Button \r\n                                          variant=\"ghost\" \r\n                                          size=\"sm\" \r\n                                          onClick={() => handleSubtopicExpand(subtopic.id || '')}\r\n                                        >\r\n                                          {expandedSubtopic === subtopic.id ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n                                        </Button>\r\n                                      </div>\r\n                                      {expandedSubtopic === subtopic.id && (\r\n                                        <div className=\"pl-4 space-y-2\">\r\n                                          {lessons\r\n                                            .filter(lesson => lesson.subtopic_id === subtopic.id)\r\n                                            .map((lesson: Lesson) => (\r\n                                              <div\r\n                                                key={lesson.id}\r\n                                                className=\"flex items-center gap-2 py-1 px-2 rounded-md hover:bg-accent cursor-pointer\"\r\n                                                onClick={() => {\r\n                                                  const lessonId = lesson.id || '';\r\n                                                  const topicId = topic.id || '';\r\n                                                  const subtopicId = subtopic.id || '';\r\n                                                  \r\n                                                  setCurrentLessonId(lessonId);\r\n                                                  setSelectedTopicId(topicId);\r\n                                                  setSelectedSubtopicId(subtopicId);\r\n                                                }}\r\n                                              >\r\n                                                <BookOpen className=\"h-4 w-4 text-muted-foreground\" />\r\n                                                <span className=\"text-sm\">{lesson.title}</span>\r\n                                              </div>\r\n                                            ))}\r\n                                        </div>\r\n                                      )}\r\n                                    </div>\r\n                                  ))}\r\n                              </CardContent>\r\n                            )}\r\n                          </Card>\r\n                        ))}\r\n                      </div>\r\n                    )}\r\n\r\n                    {/* Regular Edit Mode Content */}\r\n                    {!isViewMode && (\r\n                      <>\r\n                        {/* Existing Topic, Subtopic, and Lesson Selection UI */}\r\n                      {/* Topic Selection */}\r\n                        {selectedGradeId && (\r\n                      <div className=\"space-y-2\">\r\n                        <div className=\"flex items-center justify-between\">\r\n                        <Label htmlFor=\"topic-select\">Topic</Label>\r\n                        </div>\r\n                        <Select \r\n                              value={selectedTopicId || ''} \r\n                              onValueChange={handleTopicSelect}\r\n                        >\r\n                          <SelectTrigger id=\"topic-select\" className=\"w-full\">\r\n                            <SelectValue placeholder=\"Select Topic\" />\r\n                          </SelectTrigger>\r\n                          <SelectContent>\r\n                                {topics.map((topic: Topic) => (\r\n                                  <SelectItem \r\n                                    key={`topic-${topic.id || 'new'}`} \r\n                                    value={topic.id || ''}\r\n                                  >\r\n                                  <div className=\"flex items-center gap-2\">\r\n                                  <Layers className=\"h-4 w-4 text-primary\" />\r\n                                    {topic.title}\r\n                                  </div>\r\n                                </SelectItem>\r\n                              ))}\r\n                          </SelectContent>\r\n                        </Select>\r\n                        <Button \r\n                          variant=\"outline\" \r\n                          size=\"sm\" \r\n                          className=\"w-full gap-2\"\r\n                          onClick={() => setModalState({ ...modalState, showAddTopic: true })}\r\n                        >\r\n                          <Plus className=\"h-4 w-4\" />\r\n                          Add New Topic\r\n                        </Button>\r\n                      </div>\r\n                    )}\r\n\r\n                    {/* Subtopic Selection */}\r\n                        {selectedTopicId && (\r\n                      <div className=\"space-y-2\">\r\n                        <div className=\"flex items-center justify-between\">\r\n                        <Label htmlFor=\"subtopic-select\">Subtopic</Label>\r\n                        </div>\r\n                        <Select \r\n                              value={selectedSubtopicId || ''} \r\n                              onValueChange={handleSubtopicSelect}\r\n                        >\r\n                          <SelectTrigger id=\"subtopic-select\" className=\"w-full\">\r\n                            <SelectValue placeholder=\"Select Subtopic\" />\r\n                          </SelectTrigger>\r\n                          <SelectContent>\r\n                                {subtopics\r\n                                  .filter(subtopic => subtopic.id)\r\n                                  .map((subtopic, index) => (\r\n                                    <SelectItem \r\n                                      key={subtopic.id || `subtopic-${index}`}\r\n                                      value={subtopic.id || ''}\r\n                                    >\r\n                                      {subtopic.title || 'Untitled Subtopic'}\r\n                                    </SelectItem>\r\n                                  ))}\r\n                          </SelectContent>\r\n                        </Select>\r\n                        {!isViewMode && (\r\n                          <Button \r\n                            variant=\"outline\" \r\n                            size=\"sm\" \r\n                            className=\"w-full gap-2\"\r\n                            onClick={() => setModalState({ ...modalState, showAddSubtopic: true })}\r\n                          >\r\n                            <Plus className=\"h-4 w-4\" />\r\n                            Add New Subtopic\r\n                          </Button>\r\n                        )}\r\n                      </div>\r\n                    )}\r\n\r\n                    {/* Lesson Selection */}\r\n                        {selectedSubtopicId && (\r\n                      <div className=\"space-y-2\">\r\n                        <div className=\"flex items-center justify-between\">\r\n                          <Label htmlFor=\"lesson-select\">Lesson</Label>\r\n                        </div>\r\n                          <Select \r\n                            value={currentLessonId || ''} \r\n                            onValueChange={handleLessonSelect}\r\n                          >\r\n                            <SelectTrigger id=\"lesson-select\" className=\"w-full\">\r\n                              <SelectValue placeholder=\"Select Lesson\" />\r\n                            </SelectTrigger>\r\n                            <SelectContent>\r\n                              {lessons\r\n                                .filter((lesson): lesson is Lesson => lesson !== undefined && lesson !== null)\r\n                                .map((lesson: Lesson) => (\r\n                                  <SelectItem \r\n                                    key={`lesson-${lesson.id || 'new'}`} \r\n                                    value={lesson.id || ''}\r\n                                  >\r\n                                    <div className=\"flex items-center gap-2\">\r\n                                      <BookOpen className=\"h-4 w-4 text-primary\" />\r\n                                      {lesson.title || 'Untitled Lesson'}\r\n                                    </div>\r\n                                  </SelectItem>\r\n                                ))}\r\n                            </SelectContent>\r\n                          </Select>\r\n                    <Button \r\n                            variant=\"outline\" \r\n                            size=\"sm\" \r\n                            className=\"w-full gap-2\"\r\n                        onClick={() => setModalState({ ...modalState, showAddLesson: true })}\r\n                          >\r\n                            <Plus className=\"h-4 w-4\" />\r\n                            Add New Lesson\r\n                    </Button>\r\n                      </div>\r\n                        )}\r\n                      </>\r\n                    )}\r\n                  </CardContent>\r\n                </Card>\r\n              </div>\r\n\r\n              {/* Collapsed view */}\r\n              {isSidebarCollapsed && (\r\n                <div className=\"absolute inset-0 flex flex-col items-center pt-12 gap-4\">\r\n                  <BookOpen className=\"h-6 w-6 text-muted-foreground\" />\r\n                  <div className=\"w-px h-full bg-border\" />\r\n                </div>\r\n              )}\r\n            </Card>\r\n          </div>\r\n        \r\n\r\n          {/* Right Content Area */}\r\n          <div className=\"flex-1 overflow-y-auto\">\r\n            {isNavigating ? (\r\n              <div className=\"flex items-center justify-center h-[400px]\">\r\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n                <span className=\"ml-3\">Loading...</span>\r\n              </div>\r\n            ) : (\r\n              <>\r\n                {!selectedGradeId ? (\r\n                  // Question Types Display Section\r\n                  <div className=\"space-y-6\">\r\n                    <Card>\r\n                      <CardHeader>\r\n                        <div className=\"flex items-center justify-between\">\r\n                          <div>\r\n                            <CardTitle className=\"text-xl font-semibold\">Available Question Types</CardTitle>\r\n                            <CardDescription>Browse through different question formats and examples</CardDescription>\r\n                          </div>\r\n                          <TooltipProvider>\r\n                            <Tooltip>\r\n                              <TooltipTrigger>\r\n                                <HelpCircle className=\"h-5 w-5 text-muted-foreground\" />\r\n                              </TooltipTrigger>\r\n                              <TooltipContent>\r\n                                <p>Click on each type to see detailed examples</p>\r\n                              </TooltipContent>\r\n                            </Tooltip>\r\n                          </TooltipProvider>\r\n                        </div>\r\n                      </CardHeader>\r\n                      <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                        {Object.entries(QUESTION_TYPES).map(([type, details]) => (\r\n                          <Card key={type} className=\"cursor-pointer hover:bg-accent/50 transition-colors\">\r\n                            <CardHeader className=\"p-4\">\r\n                              <div className=\"flex items-center justify-between mb-2\">\r\n                                <Badge variant=\"outline\" className=\"bg-primary/5 text-lg\">\r\n                                  {details.label}\r\n                                </Badge>\r\n                              </div>\r\n                              <CardDescription className=\"text-sm\">\r\n                                {details.description || 'No description available'}\r\n                              </CardDescription>\r\n                              <div className=\"mt-4\">\r\n                                <div className=\"text-sm font-medium mb-2\">Example:</div>\r\n                                <div className=\"p-3 rounded-md bg-muted/50 text-sm\">\r\n                                  {type === 'multiple-choice' && (\r\n                                    <>\r\n                                      <div className=\"font-medium mb-2\">Q: What is the capital of France?</div>\r\n                                      <div className=\"space-y-1 pl-4\">\r\n                                        <div>A) Paris</div>\r\n                                        <div>B) London</div>\r\n                                        <div>C) Berlin</div>\r\n                                        <div>D) Madrid</div>\r\n                                      </div>\r\n                                    </>\r\n                                  )}\r\n                                  {type === 'fill-in-blank' && (\r\n                                    <div className=\"space-y-2\">\r\n                                      <div>Complete the sentence:</div>\r\n                                      <div>The sun rises in the <span className=\"bg-primary/20 px-2 rounded\">_____</span> and sets in the <span className=\"bg-primary/20 px-2 rounded\">_____</span>.</div>\r\n                                    </div>\r\n                                  )}\r\n                                  {type === 'true-false' && (\r\n                                    <div className=\"space-y-2\">\r\n                                      <div className=\"font-medium\">Statement:</div>\r\n                                      <div>The Earth is flat.</div>\r\n                                      <div className=\"mt-2\">\r\n                                        <Badge variant=\"outline\" className=\"mr-2\">True</Badge>\r\n                                        <Badge variant=\"outline\">False</Badge>\r\n                                      </div>\r\n                                    </div>\r\n                                  )}\r\n                                  {type === 'matching' && (\r\n                                    <div className=\"space-y-2\">\r\n                                      <div className=\"font-medium mb-2\">Match the countries with their capitals:</div>\r\n                                      <div className=\"grid grid-cols-2 gap-4\">\r\n                                        <div>\r\n                                          1. France<br />\r\n                                          2. Germany<br />\r\n                                          3. Spain\r\n                                        </div>\r\n                                        <div>\r\n                                          • Berlin<br />\r\n                                          • Paris<br />\r\n                                          • Madrid\r\n                                        </div>\r\n                                      </div>\r\n                                    </div>\r\n                                  )}\r\n                                  {type === 'ordering' && (\r\n                                    <div className=\"space-y-2\">\r\n                                      <div className=\"font-medium mb-2\">Arrange in chronological order:</div>\r\n                                      <div className=\"space-y-1\">\r\n                                        <Badge variant=\"outline\" className=\"mr-2\">1</Badge>World War II<br />\r\n                                        <Badge variant=\"outline\" className=\"mr-2\">2</Badge>Industrial Revolution<br />\r\n                                        <Badge variant=\"outline\" className=\"mr-2\">3</Badge>Renaissance\r\n                                      </div>\r\n                                    </div>\r\n                                  )}\r\n                                  {type === 'short-answer' && (\r\n                                    <div className=\"space-y-2\">\r\n                                      <div className=\"font-medium\">Question:</div>\r\n                                      <div>Explain the water cycle in 2-3 sentences.</div>\r\n                                      <div className=\"mt-2 p-2 border border-dashed rounded-md border-primary/30\">\r\n                                        Answer space\r\n                                      </div>\r\n                                    </div>\r\n                                  )}\r\n                                </div>\r\n                              </div>\r\n                            </CardHeader>\r\n                          </Card>\r\n                        ))}\r\n                      </CardContent>\r\n                    </Card>\r\n                  </div>\r\n                ) : isViewMode ? (\r\n                  <div className=\"space-y-6\">\r\n                    {selectedGradeId ? (\r\n                      <div className=\"grid grid-cols-1 gap-6\">\r\n                        {topics.map((topic) => (\r\n                          <Card key={topic.id} className=\"border-l-4 border-l-primary\">\r\n                            <CardHeader>\r\n                              <div className=\"flex items-center justify-between\">\r\n                                <h3 className=\"text-lg font-semibold\">{topic.title}</h3>\r\n                              </div>\r\n                            </CardHeader>\r\n                            <CardContent>\r\n                              <div className=\"space-y-4\">\r\n                                {subtopics\r\n                                  .filter(subtopic => subtopic.topic_id === topic.id)\r\n                                  .map((subtopic, index) => (\r\n                                    <div key={subtopic.id || `subtopic-${index}`} className=\"border-l-2 pl-4\">\r\n                                      <h4 className=\"text-md font-medium mb-2\">{subtopic.name || 'Untitled Subtopic'}</h4>\r\n                                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n                                        {lessons\r\n                                          .filter(lesson => lesson.subtopic_id === subtopic.id)\r\n                                          .map((lesson) => (\r\n                                            <Card \r\n                                              key={lesson.id} \r\n                                              className=\"cursor-pointer hover:bg-accent transition-colors duration-200\"\r\n                                              onClick={() => {\r\n                                                setCurrentLessonId(lesson.id || '');\r\n                                                setSelectedTopicId(topic.id || '');\r\n                                                setSelectedSubtopicId(subtopic.id || '');\r\n                                                setIsViewMode(false);\r\n                                              }}\r\n                                            >\r\n                                              <CardHeader className=\"py-3\">\r\n                                                <div className=\"flex flex-col gap-2\">\r\n                                                  <div className=\"flex items-center gap-2\">\r\n                                                    <BookOpen className=\"h-4 w-4 text-primary\" />\r\n                                                    <span className=\"font-medium\">{lesson.title}</span>\r\n                                                  </div>\r\n                                                  <div className=\"flex items-center gap-2\">\r\n                                                    <Badge variant=\"outline\" className=\"bg-primary/5\">\r\n                                                      {lesson.questions?.length || 0} Questions\r\n                                                    </Badge>\r\n                                                    <Badge variant=\"outline\" className=\"bg-primary/5\">\r\n                                                      {lesson.activities?.length || 0} Activities\r\n                                                    </Badge>\r\n                                                  </div>\r\n                                                </div>\r\n                                              </CardHeader>\r\n                                            </Card>\r\n                                          ))}\r\n                                      </div>\r\n                                    </div>\r\n                                  ))}\r\n                              </div>\r\n                            </CardContent>\r\n                          </Card>\r\n                        ))}\r\n                      </div>\r\n                    ) : (\r\n                      <div className=\"text-center py-20\">\r\n                        <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\r\n                        <h3 className=\"text-lg font-medium\">Select a Grade</h3>\r\n                        <p className=\"text-sm text-muted-foreground\">\r\n                          Choose a grade from the left panel to start managing content\r\n                        </p>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                ) : (\r\n                  // Edit Mode Content\r\n                  <div className=\"space-y-4\">\r\n                    {/* Lesson Title */}\r\n                    <Card>\r\n                      <CardHeader>\r\n                        <div className=\"flex items-center justify-between mb-4\">\r\n                          <h2 className=\"text-2xl font-bold\">Lesson Content</h2>\r\n                          <Button \r\n                            variant=\"outline\" \r\n                            size=\"sm\"\r\n                            onClick={() => setIsContentEditorOpen(true)}\r\n                          >\r\n                            <Pencil className=\"h-4 w-4 mr-2\" />\r\n                            Edit Content\r\n                          </Button>\r\n                        </div>\r\n                      </CardHeader>\r\n                      <CardContent className=\"space-y-4\">\r\n                        {/* Lesson Title */}\r\n                        <div className=\"flex items-center justify-between\">\r\n                          <div className=\"space-y-1\">\r\n                            <Label>Lesson Title</Label>\r\n                            <InlineEdit\r\n                              value={lessonTitle}\r\n                              onSave={async (newTitle) => {\r\n                                setLessonTitle(newTitle);\r\n                                await handleSaveLesson();\r\n                              }}\r\n                              isEditing={isEditingTitle}\r\n                              setIsEditing={setIsEditingTitle}\r\n                              placeholder=\"Enter lesson title\"\r\n                              className=\"text-lg font-medium\"\r\n                            />\r\n                          </div>\r\n                        </div>\r\n\r\n                        {/* Content Editor and Display */}\r\n                        <div className=\"space-y-4\">\r\n                          {isContentEditorOpen ? (\r\n                            <div className=\"border rounded-lg p-4\">\r\n                              <div className=\"mb-4\">\r\n                                <Label>Content Heading</Label>\r\n                                <InlineEdit\r\n                                  value={contentHeading}\r\n                                  onSave={(newHeading) => setContentHeading(newHeading)}\r\n                                  isEditing={isEditingHeading}\r\n                                  setIsEditing={setIsEditingHeading}\r\n                                  placeholder=\"Add content heading\"\r\n                                  className=\"text-base text-muted-foreground\"\r\n                                />\r\n                              </div>\r\n                              <RichTextEditor\r\n                                value={lessonContent}\r\n                                onChange={setLessonContent}\r\n                                onSave={async (content) => {\r\n                                  await handleContentSave(content);\r\n                                  setIsContentEditorOpen(false);\r\n                                }}\r\n                                placeholder=\"Add lesson content here...\"\r\n                              />\r\n                            </div>\r\n                          ) : lessonContent ? (\r\n                            <div className=\"prose prose-sm max-w-none\">\r\n                              {contentHeading && (\r\n                                <h3 className=\"text-lg font-semibold mb-2\">{contentHeading}</h3>\r\n                              )}\r\n                              <div dangerouslySetInnerHTML={{ __html: lessonContent }} />\r\n                            </div>\r\n                          ) : (\r\n                            <div className=\"text-center py-8 text-muted-foreground\">\r\n                              Click 'Edit Content' to add lesson content\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </CardContent>\r\n                    </Card>\r\n\r\n                    {/* Tabs */}\r\n                    <Tabs defaultValue=\"questions\" className=\"mt-6\">\r\n                    <TabsList className=\"grid w-full grid-cols-2\">\r\n                        <TabsTrigger value=\"questions\">\r\n                          <MessageSquare className=\"h-4 w-4 mr-2\" />\r\n                        Questions\r\n                      </TabsTrigger>\r\n                        <TabsTrigger value=\"activities\">\r\n                          <ActivityIcon className=\"h-4 w-4 mr-2\" />\r\n                        Activities\r\n                      </TabsTrigger>\r\n                    </TabsList>\r\n\r\n                      {/* Questions Tab */}\r\n                      <TabsContent value=\"questions\" className=\"space-y-4\">\r\n                      <CardHeader>\r\n                          <CardDescription>Add and manage questions for this lesson</CardDescription>\r\n                      </CardHeader>\r\n                        {questions.map((question, index) => (\r\n                          <Card key={index} className={cn(\r\n                            \"relative border-l-4 transition-colors duration-200\",\r\n                            expandedQuestion === index ? \"border-l-primary\" : \"border-l-primary/40 hover:border-l-primary\"\r\n                          )}>\r\n                            <CardHeader className=\"pb-3\">\r\n                              <div className=\"flex items-center justify-between gap-4\">\r\n                                <div className=\"flex items-center gap-3 min-w-0 flex-1\">\r\n                                  <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n                                    <span className=\"px-2 py-1 bg-primary/10 rounded-md text-sm font-semibold text-primary whitespace-nowrap\">\r\n                                      Q {index + 1}\r\n                                    </span>\r\n                                    <Badge variant=\"outline\" className=\"whitespace-nowrap\">\r\n                                      {QUESTION_TYPES[question.type as keyof typeof QUESTION_TYPES]?.label || question.type}\r\n                                    </Badge>\r\n                                    {question.isDraft && (\r\n                                      <Badge variant=\"secondary\" className=\"whitespace-nowrap\">Draft</Badge>\r\n                                )}\r\n                                  </div>\r\n                                      {expandedQuestion !== index && (\r\n                                        <div className=\"text-sm text-muted-foreground truncate\">\r\n                                          {question.metadata?.prompt || 'No question text'}\r\n                                        </div>\r\n                                      )}\r\n                                    </div>\r\n                                    <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n                                      <Button\r\n                                        variant=\"ghost\"\r\n                                        size=\"sm\"\r\n                                        onClick={() => handleQuestionExpand(index)}\r\n                                      >\r\n                                        {expandedQuestion === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n                                      </Button>\r\n                                      <Button\r\n                                        variant=\"ghost\"\r\n                                        size=\"sm\"\r\n                                        onClick={() => handleRemoveQuestion(index)}\r\n                                      >\r\n                                        <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n                                      </Button>\r\n                                    </div>\r\n                                  </div>\r\n                                </CardHeader>\r\n                                {expandedQuestion === index && (\r\n                                  <CardContent>\r\n                                    <QuestionForm\r\n                                      key={index}\r\n                                      question={{ \r\n                                        ...question, \r\n                                        lesson_id: currentLessonId || '',\r\n                                        type: (question.type || 'speaking') as Question['type']  // Default to 'speaking' if undefined\r\n                                      }}\r\n                                      index={index}\r\n                                      onUpdate={async (index: number, updatedQuestion: ContentQuestion) => {\r\n                                        await handleUpdateQuestion(index, {\r\n                                          ...updatedQuestion,\r\n                                          data: {\r\n                                            prompt: updatedQuestion.data?.prompt || '',\r\n                                            teacherScript: updatedQuestion.data?.teacherScript || '',\r\n                                            followup_prompt: updatedQuestion.data?.followup_prompt || [],\r\n                                            sampleAnswer: updatedQuestion.data?.sampleAnswer,\r\n                                            answer: updatedQuestion.data?.answer\r\n                                          }\r\n                                        });\r\n                                      }}\r\n                                      onRemove={handleRemoveQuestion}\r\n                                      onAddExercisePrompt={handleAddExercisePrompt}\r\n                                      onRemoveExercisePrompt={handleRemoveExercisePrompt}\r\n                                      onExercisePromptChange={handleExercisePromptChange}\r\n                                    /><Button \r\n                                    size=\"sm\"\r\n                                    variant=\"outline\"\r\n                                    onClick={() => handleSaveQuestion(question, index)}\r\n                                    className=\"ml-2\"\r\n                                  >\r\n                                    {questionSaveStatuses.find(s => s.id === question.id)?.status === 'saving' ? (\r\n                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n                                    ) : (\r\n                                      <Save className=\"h-4 w-4 mr-2\" />\r\n                                    )}\r\n                                    Save Question\r\n                                  </Button>\r\n                                    {/* Exercise Prompts with Save Buttons */}\r\n                                    {question.exercisePrompts?.map((prompt, promptIndex) => (\r\n                                      <div key={`${question.id}-prompt-${promptIndex}`} className=\"mt-4\"> {/* Updated key */}\r\n                                        <div className=\"flex items-center justify-between mb-2\">\r\n                                          <h4 className=\"text-sm font-medium\">Exercise Prompt {promptIndex + 1}</h4>\r\n                                          <div className=\"flex items-center gap-2\">\r\n                                            <TooltipProvider>\r\n                                              <Tooltip>\r\n                                                <TooltipTrigger asChild>\r\n                                                  <Button\r\n                                                    size=\"sm\"\r\n                                                    variant=\"outline\"\r\n                                                    onClick={() => handleSavePrompt(question.id, prompt, promptIndex)}\r\n                                                    disabled={promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving'}\r\n                                                  >\r\n                                                    {promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saving' ? (\r\n                                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n                                                    ) : (\r\n                                                      <Save className=\"h-4 w-4 mr-2\" />\r\n                                                    )}\r\n                                                    Save Prompt\r\n                                                  </Button>\r\n                                                </TooltipTrigger>\r\n                                                <TooltipContent>\r\n                                                  {`Status: ${promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}`}\r\n                                                </TooltipContent>\r\n                                              </Tooltip>\r\n                                            </TooltipProvider>\r\n                                            <Badge variant={\r\n                                              promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'saved'\r\n                                                ? 'secondary'\r\n                                                : promptSaveStatuses.find(s => s.id === prompt.id)?.status === 'error'\r\n                                                ? 'destructive'\r\n                                                : 'default'\r\n                                            }>\r\n                                              {promptSaveStatuses.find(s => s.id === prompt.id)?.status || 'draft'}\r\n                                            </Badge>\r\n                                          </div>\r\n                                        </div>\r\n                                        <ExercisePromptCard\r\n                                          key={prompt.id} // Add a unique key here\r\n                                          prompt={prompt}\r\n                                          promptIndex={promptIndex}\r\n                                          onRemove={() => handleRemoveExercisePrompt(index, promptIndex)}\r\n                                          onUpdate={(updatedPrompt: ExercisePrompt) => {\r\n                                            // Prevent duplicate updates\r\n                                            if (updatedPrompt.id === prompt.id) {\r\n                                              handleExercisePromptChange(index, promptIndex, updatedPrompt);\r\n                                            }\r\n                                          }}\r\n                                        />\r\n                                      </div>\r\n                                    ))}\r\n                                  </CardContent>\r\n                                )}\r\n                              </Card>\r\n                            ))}\r\n\r\n                            {/* Add Question Button */}\r\n                            <div className=\"flex items-center justify-between\">\r\n                              <QuestionTypeSelect \r\n                                value={selectedQuestionType} \r\n                                onChange={handleQuestionTypeChange}\r\n                              />\r\n                                        <Button\r\n                                          onClick={handleAddQuestion}\r\n                                          disabled={!selectedQuestionType}\r\n                                        >\r\n                                <Plus className=\"h-4 w-4 mr-2\" />\r\n                                          Add Question\r\n                                        </Button>\r\n                                      </div>\r\n                      </TabsContent>\r\n\r\n                      {/* Activities Tab */}\r\n                      <TabsContent value=\"activities\" className=\"space-y-4\">\r\n                      <CardHeader>\r\n                          <CardDescription>Add and manage activities for this lesson</CardDescription>\r\n                      </CardHeader>\r\n                        {activities.map((activity, index) => (\r\n                          <Card key={index}>\r\n                            <CardHeader className=\"pb-3\">\r\n                              <div className=\"flex items-center justify-between\">\r\n                                  <div className=\"flex items-center gap-2\">\r\n                                  <Badge variant=\"outline\">Activity {index + 1}</Badge>\r\n                                  </div>\r\n                                <div className=\"flex items-center gap-2\">\r\n                                  <Button\r\n                                    variant=\"ghost\"\r\n                                    size=\"sm\"\r\n                                    onClick={() => handleActivityExpand(index)}\r\n                                  >\r\n                                    {expandedActivity === index ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n                                  </Button>\r\n                                  <Button\r\n                                    variant=\"ghost\"\r\n                                    size=\"sm\"\r\n                                    onClick={() => handleRemoveActivity(index)}\r\n                                  >\r\n                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n                                  </Button>\r\n                                </div>\r\n                              </div>\r\n                            </CardHeader>\r\n                            {expandedActivity === index && (\r\n                              <CardContent>\r\n                                <div className=\"space-y-4\">\r\n                                  <div className=\"space-y-2\">\r\n                                    <Label>Instructions</Label>\r\n                                    <Textarea\r\n                                      value={activity.instructions}\r\n                                      onChange={(e) => handleUpdateActivity(index, {\r\n                                        ...activity,\r\n                                        instructions: e.target.value\r\n                                      })}\r\n                                      placeholder=\"Enter activity instructions\"\r\n                                    />\r\n                                  </div>\r\n                                    \r\n                                    {/* Media Section */}\r\n                                    <div className=\"space-y-2\">\r\n                                      <Label>Media</Label>\r\n                                      {activity.media?.map((media, mediaIndex) => (\r\n                                        <div key={mediaIndex} className=\"flex items-center gap-2\">\r\n                                          <Input\r\n                                            value={media.url}\r\n                                            onChange={(e) => {\r\n                                              const updatedMedia = [...(activity.media || [])];\r\n                                              updatedMedia[mediaIndex] = {\r\n                                                type: media.type,\r\n                                                url: e.target.value\r\n                                              };\r\n                                              handleUpdateActivity(index, {\r\n                                                ...activity,\r\n                                                media: updatedMedia\r\n                                              });\r\n                                            }}\r\n                                            placeholder=\"Media URL\"\r\n                                          />\r\n                                          <Select\r\n                                            value={media.type}\r\n                                            onValueChange={(value) => {\r\n                                              const updatedMedia = [...(activity.media || [])];\r\n                                              updatedMedia[mediaIndex] = {\r\n                                                type: value as 'image' | 'gif' | 'video',\r\n                                                url: media.url\r\n                                              };\r\n                                              handleUpdateActivity(index, {\r\n                                                ...activity,\r\n                                                media: updatedMedia\r\n                                              });\r\n                                            }}\r\n                                          >\r\n                                            <SelectTrigger className=\"w-[120px]\">\r\n                                              <SelectValue placeholder=\"Type\" />\r\n                                            </SelectTrigger>\r\n                                            <SelectContent>\r\n                                              <SelectItem value=\"image\">Image</SelectItem>\r\n                                              <SelectItem value=\"gif\">GIF</SelectItem>\r\n                                              <SelectItem value=\"video\">Video</SelectItem>\r\n                                            </SelectContent>\r\n                                          </Select>\r\n                                <Button\r\n                                            variant=\"ghost\"\r\n                                            size=\"sm\"\r\n                                  onClick={() => {\r\n                                              const updatedMedia = (activity.media || []).filter((_, i) => i !== mediaIndex);\r\n                                              handleUpdateActivity(index, {\r\n                                                ...activity,\r\n                                                media: updatedMedia\r\n                                          });\r\n                                          }}\r\n                                  >\r\n                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n                                  </Button>\r\n                                </div>\r\n                                        ))}\r\n                                  <Button\r\n                                    variant=\"outline\"\r\n                                    size=\"sm\"\r\n                                            onClick={() => {\r\n                                              handleUpdateActivity(index, {\r\n                                                ...activity,\r\n                                                media: [\r\n                                                  ...(activity.media || [])  ,\r\n                                                  { url: '', type: 'image' }\r\n                                                ]\r\n                                              });\r\n                                            }}\r\n                                  >\r\n                                    <Plus className=\"h-4 w-4 mr-2\" />\r\n                                            Add Media\r\n                                  </Button>\r\n                                </div>\r\n                                      </div>\r\n                                    </CardContent>\r\n                                  )}\r\n                                </Card>\r\n                              ))}\r\n\r\n                              {/* Add Activity Button */}\r\n                              <Button\r\n                                onClick={handleAddActivity}\r\n                                className=\"w-full\"\r\n                              >\r\n                                <Plus className=\"h-4 w-4 mr-2\" />\r\n                                Add Activity\r\n                              </Button>\r\n                          </TabsContent>\r\n                        </Tabs>\r\n                        </div>\r\n                )}\r\n\r\n                    {/* Floating Save Button */}\r\n                    <div className=\"fixed bottom-8 right-8 flex items-center gap-4\">\r\n                      {saveProgress !== 'idle' && (\r\n                        <div className={cn(\r\n                          \"flex items-center gap-2 rounded-lg px-4 py-2 shadow-lg\",\r\n                          {\r\n                            \"bg-background border\": saveProgress === 'saving',\r\n                            \"bg-green-500 text-white\": saveProgress === 'saved',\r\n                            \"bg-destructive text-destructive-foreground\": saveProgress === 'error'\r\n                          }\r\n                        )}>\r\n                          {saveProgress === 'saving' && (\r\n                            <>\r\n                              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n                              <span className=\"text-sm\">Saving changes...</span>\r\n                            </>\r\n                          )}\r\n                          {saveProgress === 'saved' && (\r\n                            <>\r\n                              <Check className=\"h-4 w-4\" />\r\n                              <span className=\"text-sm\">Changes saved</span>\r\n                            </>\r\n                          )}\r\n                          {saveProgress === 'error' && (\r\n                            <>\r\n                              <X className=\"h-4 w-4\" />\r\n                              <span className=\"text-sm\">Error saving changes</span>\r\n                            </>\r\n                          )}\r\n                        </div>\r\n                      )}\r\n                      <Button\r\n                        onClick={handleSaveLesson}\r\n                        disabled={saveProgress === 'saving'}\r\n                        className=\"shadow-lg\"\r\n                      >\r\n                        {saveProgress === 'saving' ? (\r\n                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\r\n                        ) : (\r\n                          <Save className=\"h-4 w-4 mr-2\" />\r\n                        )}\r\n                        {saveProgress === 'saving' ? 'Saving...' : 'Save Lesson'}\r\n                      </Button>\r\n                    </div>\r\n                  </>\r\n            )}\r\n    </div>\r\n    \r\n\r\n      {/* Floating Save Button */}\r\n      {selectedSubtopicId && currentLessonId && (\r\n          <div className=\"fixed bottom-4 right-4 flex flex-col gap-2\">\r\n            <TooltipProvider>\r\n              <Tooltip>\r\n                <TooltipTrigger asChild>\r\n                  <Button\r\n                    size=\"icon\"\r\n                    className=\"rounded-full h-12 w-12 shadow-lg\"\r\n                    onClick={handleSaveLesson}\r\n                    disabled={!selectedSubtopicId || !lessonTitle || questions.length === 0}\r\n                  >\r\n                    <Save className=\"h-6 w-6\" />\r\n                  </Button>\r\n                </TooltipTrigger>\r\n                <TooltipContent>\r\n                  <p>Save Lesson (Ctrl+S)</p>\r\n                </TooltipContent>\r\n              </Tooltip>\r\n            </TooltipProvider>\r\n          </div>\r\n        )}\r\n        <SaveFeedback />\r\n\r\n        {/* Add Grade Modal */}\r\n        {modalState.showAddGrade && (\r\n          <Dialog \r\n            open={modalState.showAddGrade} \r\n            onOpenChange={(open) => handleModalStateChange('showAddGrade', open)}\r\n          >\r\n            <DialogContent \r\n              className=\"sm:max-w-[425px]\"\r\n              onEscapeKeyDown={cleanupModalState}\r\n              onPointerDownOutside={cleanupModalState}\r\n            >\r\n              <DialogHeader>\r\n                <DialogTitle>Add New Grade</DialogTitle>\r\n                <DialogDescription>Enter the details for the new grade.</DialogDescription>\r\n              </DialogHeader>\r\n              <div className=\"space-y-4 py-4\">\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"grade-name\">Grade Name</Label>\r\n                  <Input\r\n                    id=\"grade-name\"\r\n                    value={newItemData.name}\r\n                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n                    placeholder=\"Enter grade name\"\r\n                  />\r\n      </div>\r\n              </div>\r\n              <DialogFooter>\r\n                <Button variant=\"outline\" onClick={() => {\r\n                  setModalState({ ...modalState, showAddGrade: false });\r\n                  setNewItemData({ name: '', description: '' });\r\n                }}>\r\n                  Cancel\r\n                </Button>\r\n                <Button onClick={handleCreateGrade} disabled={!newItemData.name}>Create Grade</Button>\r\n              </DialogFooter>\r\n            </DialogContent>\r\n          </Dialog>\r\n        )}\r\n\r\n        {/* Add Topic Modal */}\r\n        {modalState.showAddTopic && (\r\n          <Dialog \r\n            open={modalState.showAddTopic} \r\n            onOpenChange={(open) => handleModalStateChange('showAddTopic', open)}\r\n          >\r\n            <DialogContent \r\n              className=\"sm:max-w-[425px]\"\r\n              onEscapeKeyDown={cleanupModalState}\r\n              onPointerDownOutside={cleanupModalState}\r\n            >\r\n              <DialogHeader>\r\n                <DialogTitle>Add New Topic</DialogTitle>\r\n                <DialogDescription>Enter the details for the new topic.</DialogDescription>\r\n              </DialogHeader>\r\n              <div className=\"space-y-4 py-4\">\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"topic-name\">Topic Name</Label>\r\n                  <Input\r\n                    id=\"topic-name\"\r\n                    value={newItemData.name}\r\n                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n                    placeholder=\"Enter topic name\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              <DialogFooter>\r\n                <Button variant=\"outline\" onClick={() => {\r\n                  setModalState({ ...modalState, showAddTopic: false });\r\n                  setNewItemData({ name: '', description: '' });\r\n                }}>\r\n                  Cancel\r\n                </Button>\r\n                <Button onClick={handleCreateTopic} disabled={!newItemData.name}>Create Topic</Button>\r\n              </DialogFooter>\r\n            </DialogContent>\r\n          </Dialog>\r\n        )}\r\n\r\n        {/* Add Subtopic Modal */}\r\n        {modalState.showAddSubtopic && (\r\n          <Dialog \r\n            open={modalState.showAddSubtopic} \r\n            onOpenChange={(open) => handleModalStateChange('showAddSubtopic', open)}\r\n          >\r\n            <DialogContent \r\n              className=\"sm:max-w-[425px]\"\r\n              onEscapeKeyDown={cleanupModalState}\r\n              onPointerDownOutside={cleanupModalState}\r\n            >\r\n              <DialogHeader>\r\n                <DialogTitle>Add New Subtopic</DialogTitle>\r\n                <DialogDescription>Enter the details for the new subtopic.</DialogDescription>\r\n              </DialogHeader>\r\n              <div className=\"space-y-4 py-4\">\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"subtopic-name\">Subtopic Name</Label>\r\n                  <Input\r\n                    id=\"subtopic-name\"\r\n                    value={newItemData.name}\r\n                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n                    placeholder=\"Enter subtopic name\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              <DialogFooter>\r\n                <Button variant=\"outline\" onClick={() => {\r\n                  setModalState({ ...modalState, showAddSubtopic: false });\r\n                  setNewItemData({ name: '', description: '' });\r\n                }}>\r\n                  Cancel\r\n                </Button>\r\n                <Button onClick={() => handleCreateSubtopic({ title: newItemData.name })} disabled={!newItemData.name}>Create Subtopic</Button>\r\n              </DialogFooter>\r\n            </DialogContent>\r\n          </Dialog>\r\n        )}\r\n\r\n        {/* Add Lesson Modal */}\r\n        {modalState.showAddLesson && (\r\n          <Dialog \r\n            open={modalState.showAddLesson} \r\n            onOpenChange={(open) => handleModalStateChange('showAddLesson', open)}\r\n          >\r\n            <DialogContent \r\n              className=\"sm:max-w-[425px]\"\r\n              onEscapeKeyDown={cleanupModalState}\r\n              onPointerDownOutside={cleanupModalState}\r\n            >\r\n              <DialogHeader>\r\n                <DialogTitle>Add New Lesson</DialogTitle>\r\n                <DialogDescription>Enter the details for the new lesson.</DialogDescription>\r\n              </DialogHeader>\r\n              <div className=\"space-y-4 py-4\">\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"lesson-name\">Lesson Title</Label>\r\n                  <Input\r\n                    id=\"lesson-name\"\r\n                    value={newItemData.name}\r\n                    onChange={(e) => setNewItemData({ ...newItemData, name: e.target.value })}\r\n                    placeholder=\"Enter lesson title\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              <DialogFooter>\r\n                <Button variant=\"outline\" onClick={() => {\r\n                  setModalState({ ...modalState, showAddLesson: false });\r\n                  setNewItemData({ name: '', description: '' });\r\n                }}>\r\n                  Cancel\r\n                </Button>\r\n                <Button onClick={handleCreateLesson} disabled={!newItemData.name}>Create Lesson</Button>\r\n              </DialogFooter>\r\n            </DialogContent>\r\n          </Dialog>\r\n        )}\r\n      </div>\r\n      <Toaster />\r\n      </div>\r\n  );\r\n} "
        }
    ]
}