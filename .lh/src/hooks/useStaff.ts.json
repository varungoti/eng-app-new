{
    "sourceFile": "src/hooks/useStaff.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1739439991116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739440040680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,189 +1,159 @@\n-import { useState, useEffect } from 'react';\r\n-import { supabase } from '../lib/supabase';\r\n-import { useToast } from './useToast';\r\n-import { logger } from '../lib/logger';\r\n-import type { Staff } from '../types/staff';\r\n-import { useMutation, useQuery } from '@tanstack/react-query';\r\n-import { queryClient } from '../lib/queryClient';\r\n-import { useAuth } from './useAuth';\r\n-\r\n-export const useStaff = (schoolId?: string) => {\r\n-  const { user } = useAuth();\r\n-  const { showToast } = useToast();\r\n-\r\n-  // Use React Query for staff data fetching\r\n-  const {\r\n-    data: staff = [],\r\n-    isLoading: loading,\r\n-    error: queryError,\r\n-    refetch\r\n-  } = useQuery({\r\n-    queryKey: ['staff', schoolId],\r\n-    queryFn: async () => {\r\n-      try {\r\n-        const query = supabase\r\n-          .from('staff')\r\n-          .select('*, schools (name)')\r\n-          .order('created_at', { ascending: false });\r\n-\r\n-        // If schoolId is provided, filter by school\r\n-        if (schoolId) {\r\n-          query.eq('school_id', schoolId);\r\n-        }\r\n-\r\n-        const { data, error: fetchError } = await query;\r\n-\r\n-        if (fetchError) throw fetchError;\r\n-        return data as unknown as Staff[] || [];\r\n-      } catch (err) {\r\n-        const message = err instanceof Error ? err.message : 'Failed to fetch staff';\r\n-        logger.error(message, {\r\n-          context: { error: err, schoolId },\r\n-          source: 'useStaff'\r\n-        });\r\n-        throw err;\r\n-      }\r\n-    },\r\n-    retry: 3,\r\n-    retryDelay: (attemptIndex) => Math.min(1000 * Math.pow(2, attemptIndex), 5000)\r\n-  });\r\n-\r\n-  const addStaff = useMutation({\r\n-    mutationFn: async (staffData: Omit<Staff, 'id' | 'created_at' | 'updated_at'>) => {\r\n-      try {\r\n-        // Ensure school_id is set if provided in context\r\n-        const dataWithSchool = schoolId ? { ...staffData, school_id: schoolId } : staffData;\r\n-\r\n-        const { data, error: createError } = await supabase\r\n-          .from('staff')\r\n-          .insert([{\r\n-            ...dataWithSchool,\r\n-            status: 'pending', // Default status\r\n-            user_id: user?.id // Link to current user if available\r\n-          }])\r\n-          .select()\r\n-          .single();\r\n-\r\n-        if (createError) throw createError;\r\n-        return data;\r\n-      } catch (err) {\r\n-        const message = err instanceof Error ? err.message : 'Failed to add staff member';\r\n-        logger.error(message, {\r\n-          context: { error: err, staffData, schoolId },\r\n-          source: 'useStaff'\r\n-        });\r\n-        throw err;\r\n-      }\r\n-    },\r\n-    onSuccess: () => {\r\n-      queryClient.invalidateQueries({ queryKey: ['staff', schoolId] });\r\n-      showToast('Staff member added successfully', { type: 'success' });\r\n-    },\r\n-    onError: (error) => {\r\n-      const message = error instanceof Error ? error.message : 'Failed to add staff member';\r\n-      showToast(message, { type: 'error' });\r\n-    }\r\n-  });\r\n-\r\n-  const updateStaff = useMutation({\r\n-    mutationFn: async ({ id, updates }: { id: string; updates: Partial<Staff> }) => {\r\n-      const { data: updatedStaff, error } = await supabase\r\n-        .from('staff')\r\n-        .update(updates)\r\n-        .eq('id', id)\r\n-        .select()\r\n-        .single();\r\n-      \r\n-      if (error) throw error;\r\n-      return updatedStaff;\r\n-    },\r\n-    onSuccess: () => {\r\n-      queryClient.invalidateQueries({ queryKey: ['staff', schoolId] });\r\n-      showToast('Staff member updated successfully', { type: 'success' });\r\n-    },\r\n-    onError: (error) => {\r\n-      const message = error instanceof Error ? error.message : 'Failed to update staff member';\r\n-      showToast(message, { type: 'error' });\r\n-    }\r\n-  });\r\n-\r\n-  const deleteStaff = useMutation({\r\n-    mutationFn: async (id: string) => {\r\n-      const { error } = await supabase\r\n-        .from('staff')\r\n-        .delete()\r\n-        .eq('id', id);\r\n-      \r\n-      if (error) throw error;\r\n-      return id;\r\n-    },\r\n-    onSuccess: () => {\r\n-      queryClient.invalidateQueries({ queryKey: ['staff', schoolId] });\r\n-      showToast('Staff member deleted successfully', { type: 'success' });\r\n-    },\r\n-    onError: (error) => {\r\n-      const message = error instanceof Error ? error.message : 'Failed to delete staff member';\r\n-      showToast(message, { type: 'error' });\r\n-    }\r\n-  });\r\n-\r\n-  const inviteStaff = async (email: string, role: string) => {\r\n-    try {\r\n-      // First check if user already exists\r\n-      const { data: existingStaff } = await supabase\r\n-        .from('staff')\r\n-        .select('*')\r\n-        .eq('email', email)\r\n-        .single();\r\n-\r\n-      if (existingStaff) {\r\n-        throw new Error('Staff member with this email already exists');\r\n-      }\r\n-\r\n-      // Create user with Supabase auth\r\n-      const { data: authData, error: authError } = await supabase.auth.admin.createUser({\r\n-        email,\r\n-        email_confirm: true,\r\n-        user_metadata: { role }\r\n-      });\r\n-\r\n-      if (authError) throw authError;\r\n-\r\n-      // Create staff record\r\n-      const { data: staffData, error: staffError } = await supabase\r\n-        .from('staff')\r\n-        .insert([{\r\n-          user_id: authData.user.id,\r\n-          email,\r\n-          role,\r\n-          status: 'pending',\r\n-          school_id: schoolId // Include school_id if available\r\n-        }])\r\n-        .select()\r\n-        .single();\r\n-\r\n-      if (staffError) throw staffError;\r\n-\r\n-      queryClient.invalidateQueries({ queryKey: ['staff', schoolId] });\r\n-      return staffData;\r\n-    } catch (err) {\r\n-      const message = err instanceof Error ? err.message : 'Failed to invite staff member';\r\n-      logger.error(message, {\r\n-        context: { error: err, email, role },\r\n-        source: 'useStaff'\r\n-      });\r\n-      throw err;\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    staff,\r\n-    loading,\r\n-    error: queryError instanceof Error ? queryError.message : queryError ? String(queryError) : null,\r\n-    addStaff,\r\n-    updateStaff,\r\n-    deleteStaff,\r\n-    inviteStaff,\r\n-    refresh: refetch\r\n-  };\r\n+import { useState, useEffect } from 'react';\n+import { supabase } from '../lib/supabase';\n+import { useToast } from './useToast';\n+import { logger } from '../lib/logger';\n+import type { Staff } from '../types/staff';\n+import { useMutation } from '@tanstack/react-query';\n+import { queryClient } from '../lib/queryClient';\n+\n+export const useStaff = () => {\n+  const [staff, setStaff] = useState<Staff[]>([]);\n+  const [loading, setLoading] = useState(true);\n+  const [error, setError] = useState<string | null>(null);\n+  const { showToast } = useToast();\n+\n+  const fetchStaff = async () => {\n+    try {\n+      setLoading(true);\n+      setError(null);\n+      setError(null);\n+      \n+      // Add retry logic\n+      let attempts = 0;\n+      const maxAttempts = 3;\n+      \n+      while (attempts < maxAttempts) {\n+        try {\n+          const { data, error: fetchError } = await supabase\n+            .from('staff')\n+            .select('*, schools (name)')\n+            .order('created_at', { ascending: false });\n+\n+          if (fetchError) throw fetchError;\n+          setStaff(data as unknown as Staff[] || []);\n+          break; // Success - exit retry loop\n+        } catch (err) {\n+          attempts++;\n+          if (attempts === maxAttempts) throw err;\n+          // Exponential backoff\n+          await new Promise(resolve => setTimeout(resolve, Math.min(1000 * Math.pow(2, attempts), 5000)));\n+        }\n+      }\n+    } catch (err) {\n+      const message = err instanceof Error ? err.message : 'Failed to fetch staff';\n+      setError(message);\n+      logger.error(message, {\n+        context: { error: err },\n+        source: 'useStaff'\n+      });\n+    } finally {\n+      setLoading(false);\n+    }\n+  };\n+\n+  useEffect(() => {\n+    fetchStaff();\n+  }, []);\n+\n+  const addStaff = async (staffData: Omit<Staff, 'id' | 'created_at' | 'updated_at'>) => {\n+    try {\n+      const { data, error: createError } = await supabase\n+        .from('staff')\n+        .insert([staffData])\n+        .select()\n+        .single();\n+\n+      if (createError) throw createError;\n+      \n+      setStaff(prev => [data as unknown as Staff, ...prev]);\n+      return data;\n+    } catch (err) {\n+      const message = err instanceof Error ? err.message : 'Failed to add staff member';\n+      logger.error(message, {\n+        context: { error: err, staffData },\n+        source: 'useStaff'\n+      });\n+      throw err;\n+    }\n+  };\n+\n+  const updateStaff = useMutation({\n+    mutationFn: async (data: { id: string; updates: Partial<Staff> }) => {\n+      const { data: updatedStaff, error } = await supabase\n+        .from('staff')\n+        .update(data.updates)\n+        .eq('id', data.id)\n+        .select()\n+        .single();\n+      \n+      if (error) throw error;\n+      return void 0; // Return void instead of the data\n+    },\n+    onSuccess: () => {\n+      queryClient.invalidateQueries({ queryKey: ['staff'] });\n+    }\n+  });\n+\n+  const deleteStaff = useMutation({\n+    mutationFn: async (id: string) => {\n+      const { error } = await supabase\n+        .from('staff')\n+        .delete()\n+        .eq('id', id);\n+      \n+      if (error) throw error;\n+      return void 0;\n+    },\n+    onSuccess: () => {\n+      queryClient.invalidateQueries({ queryKey: ['staff'] });\n+    }\n+  });\n+\n+  const inviteStaff = async (email: string, role: string) => {\n+    try {\n+      // Create user with Supabase auth\n+      const { data: authData, error: authError } = await supabase.auth.admin.createUser({\n+        email,\n+        email_confirm: true,\n+        user_metadata: { role }\n+      });\n+\n+      if (authError) throw authError;\n+\n+      // Create staff record\n+      const { data: staffData, error: staffError } = await supabase\n+        .from('staff')\n+        .insert([{\n+          user_id: authData.user.id,\n+          email,\n+          role,\n+          status: 'pending'\n+        }])\n+        .select()\n+        .single();\n+\n+      if (staffError) throw staffError;\n+\n+      setStaff(prev => [staffData as unknown as Staff, ...prev]);\n+      return staffData;\n+    } catch (err) {\n+      const message = err instanceof Error ? err.message : 'Failed to invite staff member';\n+      logger.error(message, {\n+        context: { error: err, email, role },\n+        source: 'useStaff'\n+      });\n+      throw err;\n+    }\n+  };\n+\n+  return {\n+    staff,\n+    loading,\n+    error,\n+    addStaff,\n+    updateStaff,\n+    deleteStaff,\n+    inviteStaff,\n+    refresh: fetchStaff\n+  };\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739440070924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,159 +1,207 @@\n-import { useState, useEffect } from 'react';\n+import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\n import { supabase } from '../lib/supabase';\n+import { logger } from '../lib/logger';\n+import { useAuth } from './useAuth';\n import { useToast } from './useToast';\n-import { logger } from '../lib/logger';\n-import type { Staff } from '../types/staff';\n-import { useMutation } from '@tanstack/react-query';\n-import { queryClient } from '../lib/queryClient';\n+import type { Staff } from '../types';\n \n-export const useStaff = () => {\n-  const [staff, setStaff] = useState<Staff[]>([]);\n-  const [loading, setLoading] = useState(true);\n-  const [error, setError] = useState<string | null>(null);\n+export function useStaff() {\n+  const queryClient = useQueryClient();\n+  const { user } = useAuth();\n   const { showToast } = useToast();\n \n-  const fetchStaff = async () => {\n-    try {\n-      setLoading(true);\n-      setError(null);\n-      setError(null);\n-      \n-      // Add retry logic\n-      let attempts = 0;\n-      const maxAttempts = 3;\n-      \n-      while (attempts < maxAttempts) {\n-        try {\n-          const { data, error: fetchError } = await supabase\n-            .from('staff')\n-            .select('*, schools (name)')\n-            .order('created_at', { ascending: false });\n+  // Fetch staff members\n+  const { data: staff = [], isLoading: loading, error } = useQuery({\n+    queryKey: ['staff'],\n+    queryFn: async () => {\n+      try {\n+        const { data, error } = await supabase\n+          .from('staff')\n+          .select('*')\n+          .order('created_at', { ascending: false });\n \n-          if (fetchError) throw fetchError;\n-          setStaff(data as unknown as Staff[] || []);\n-          break; // Success - exit retry loop\n-        } catch (err) {\n-          attempts++;\n-          if (attempts === maxAttempts) throw err;\n-          // Exponential backoff\n-          await new Promise(resolve => setTimeout(resolve, Math.min(1000 * Math.pow(2, attempts), 5000)));\n+        if (error) {\n+          logger.error('Failed to fetch staff', {\n+            context: { error },\n+            source: 'useStaff'\n+          });\n+          throw error;\n         }\n+\n+        return data || [];\n+      } catch (err) {\n+        logger.error('Error in staff query', {\n+          context: { error: err },\n+          source: 'useStaff'\n+        });\n+        throw err;\n       }\n-    } catch (err) {\n-      const message = err instanceof Error ? err.message : 'Failed to fetch staff';\n-      setError(message);\n-      logger.error(message, {\n-        context: { error: err },\n-        source: 'useStaff'\n-      });\n-    } finally {\n-      setLoading(false);\n-    }\n-  };\n+    },\n+    enabled: !!user\n+  });\n \n-  useEffect(() => {\n-    fetchStaff();\n-  }, []);\n+  // Add staff mutation\n+  const addStaff = useMutation({\n+    mutationFn: async (newStaff: Omit<Staff, 'id'>) => {\n+      try {\n+        // Get current auth session\n+        const { data: { session }, error: sessionError } = await supabase.auth.getSession();\n+        if (sessionError) throw sessionError;\n+        if (!session) throw new Error('No active session');\n \n-  const addStaff = async (staffData: Omit<Staff, 'id' | 'created_at' | 'updated_at'>) => {\n-    try {\n-      const { data, error: createError } = await supabase\n-        .from('staff')\n-        .insert([staffData])\n-        .select()\n-        .single();\n+        // Add authorization header\n+        const { data, error } = await supabase\n+          .from('staff')\n+          .insert([{\n+            name: newStaff.name,\n+            email: newStaff.email,\n+            role: newStaff.role,\n+            department: newStaff.department,\n+            school_id: newStaff.school_id,\n+            status: 'active'\n+          }])\n+          .select()\n+          .single();\n \n-      if (createError) throw createError;\n-      \n-      setStaff(prev => [data as unknown as Staff, ...prev]);\n-      return data;\n-    } catch (err) {\n-      const message = err instanceof Error ? err.message : 'Failed to add staff member';\n+        if (error) {\n+          logger.error('Failed to add staff member', {\n+            context: { error, newStaff },\n+            source: 'useStaff'\n+          });\n+          throw error;\n+        }\n+\n+        return data;\n+      } catch (err) {\n+        logger.error('Error in add staff mutation', {\n+          context: { error: err },\n+          source: 'useStaff'\n+        });\n+        throw err;\n+      }\n+    },\n+    onSuccess: () => {\n+      queryClient.invalidateQueries({ queryKey: ['staff'] });\n+      showToast('Staff member added successfully', { type: 'success' });\n+    },\n+    onError: (error) => {\n+      const message = error instanceof Error ? error.message : 'Failed to add staff member';\n+      showToast(message, { type: 'error' });\n       logger.error(message, {\n-        context: { error: err, staffData },\n+        context: { error },\n         source: 'useStaff'\n       });\n-      throw err;\n     }\n-  };\n+  });\n \n\\ No newline at end of file\n+  // Update staff mutation\n   const updateStaff = useMutation({\n-    mutationFn: async (data: { id: string; updates: Partial<Staff> }) => {\n-      const { data: updatedStaff, error } = await supabase\n-        .from('staff')\n-        .update(data.updates)\n-        .eq('id', data.id)\n-        .select()\n-        .single();\n-      \n-      if (error) throw error;\n-      return void 0; // Return void instead of the data\n+    mutationFn: async ({ id, updates }: { id: string; updates: Partial<Staff> }) => {\n+      try {\n+        const { error } = await supabase\n+          .from('staff')\n+          .update(updates)\n+          .eq('id', id);\n+\n+        if (error) throw error;\n+        return true;\n+      } catch (err) {\n+        logger.error('Failed to update staff member', {\n+          context: { error: err },\n+          source: 'useStaff'\n+        });\n+        throw err;\n+      }\n     },\n     onSuccess: () => {\n       queryClient.invalidateQueries({ queryKey: ['staff'] });\n+      showToast('Staff member updated successfully', { type: 'success' });\n+    },\n+    onError: (error) => {\n+      const message = error instanceof Error ? error.message : 'Failed to update staff member';\n+      showToast(message, { type: 'error' });\n     }\n   });\n \n+  // Delete staff mutation\n   const deleteStaff = useMutation({\n     mutationFn: async (id: string) => {\n-      const { error } = await supabase\n-        .from('staff')\n-        .delete()\n-        .eq('id', id);\n-      \n-      if (error) throw error;\n-      return void 0;\n+      try {\n+        const { error } = await supabase\n+          .from('staff')\n+          .delete()\n+          .eq('id', id);\n+\n+        if (error) throw error;\n+        return true;\n+      } catch (err) {\n+        logger.error('Failed to delete staff member', {\n+          context: { error: err },\n+          source: 'useStaff'\n+        });\n+        throw err;\n+      }\n     },\n     onSuccess: () => {\n       queryClient.invalidateQueries({ queryKey: ['staff'] });\n+      showToast('Staff member deleted successfully', { type: 'success' });\n+    },\n+    onError: (error) => {\n+      const message = error instanceof Error ? error.message : 'Failed to delete staff member';\n+      showToast(message, { type: 'error' });\n     }\n   });\n \n+  // Invite staff member\n   const inviteStaff = async (email: string, role: string) => {\n     try {\n-      // Create user with Supabase auth\n-      const { data: authData, error: authError } = await supabase.auth.admin.createUser({\n-        email,\n-        email_confirm: true,\n-        user_metadata: { role }\n-      });\n+      // First check if user already exists\n+      const { data: existingStaff, error: checkError } = await supabase\n+        .from('staff')\n+        .select('*')\n+        .eq('email', email)\n+        .single();\n \n-      if (authError) throw authError;\n+      if (checkError && checkError.code !== 'PGRST116') {\n+        throw checkError;\n+      }\n \n-      // Create staff record\n-      const { data: staffData, error: staffError } = await supabase\n-        .from('staff')\n-        .insert([{\n-          user_id: authData.user.id,\n-          email,\n+      if (existingStaff) {\n+        throw new Error('Staff member with this email already exists');\n+      }\n+\n+      // Send invitation through Supabase Auth\n+      const { data, error: inviteError } = await supabase.auth.admin.inviteUserByEmail(email, {\n+        data: {\n           role,\n-          status: 'pending'\n-        }])\n-        .select()\n-        .single();\n+          invited_by: user?.id\n+        }\n+      });\n \n-      if (staffError) throw staffError;\n+      if (inviteError) throw inviteError;\n \n-      setStaff(prev => [staffData as unknown as Staff, ...prev]);\n-      return staffData;\n+      return data;\n     } catch (err) {\n-      const message = err instanceof Error ? err.message : 'Failed to invite staff member';\n-      logger.error(message, {\n-        context: { error: err, email, role },\n+      logger.error('Failed to invite staff member', {\n+        context: { error: err },\n         source: 'useStaff'\n       });\n       throw err;\n     }\n   };\n \n+  const refresh = () => {\n+    queryClient.invalidateQueries({ queryKey: ['staff'] });\n+  };\n+\n   return {\n     staff,\n     loading,\n-    error,\n+    error: error instanceof Error ? error.message : error ? String(error) : null,\n     addStaff,\n     updateStaff,\n     deleteStaff,\n     inviteStaff,\n-    refresh: fetchStaff\n+    refresh\n   };\n-};\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1739439991116,
            "name": "Commit-0",
            "content": "import { useState, useEffect } from 'react';\r\nimport { supabase } from '../lib/supabase';\r\nimport { useToast } from './useToast';\r\nimport { logger } from '../lib/logger';\r\nimport type { Staff } from '../types/staff';\r\nimport { useMutation, useQuery } from '@tanstack/react-query';\r\nimport { queryClient } from '../lib/queryClient';\r\nimport { useAuth } from './useAuth';\r\n\r\nexport const useStaff = (schoolId?: string) => {\r\n  const { user } = useAuth();\r\n  const { showToast } = useToast();\r\n\r\n  // Use React Query for staff data fetching\r\n  const {\r\n    data: staff = [],\r\n    isLoading: loading,\r\n    error: queryError,\r\n    refetch\r\n  } = useQuery({\r\n    queryKey: ['staff', schoolId],\r\n    queryFn: async () => {\r\n      try {\r\n        const query = supabase\r\n          .from('staff')\r\n          .select('*, schools (name)')\r\n          .order('created_at', { ascending: false });\r\n\r\n        // If schoolId is provided, filter by school\r\n        if (schoolId) {\r\n          query.eq('school_id', schoolId);\r\n        }\r\n\r\n        const { data, error: fetchError } = await query;\r\n\r\n        if (fetchError) throw fetchError;\r\n        return data as unknown as Staff[] || [];\r\n      } catch (err) {\r\n        const message = err instanceof Error ? err.message : 'Failed to fetch staff';\r\n        logger.error(message, {\r\n          context: { error: err, schoolId },\r\n          source: 'useStaff'\r\n        });\r\n        throw err;\r\n      }\r\n    },\r\n    retry: 3,\r\n    retryDelay: (attemptIndex) => Math.min(1000 * Math.pow(2, attemptIndex), 5000)\r\n  });\r\n\r\n  const addStaff = useMutation({\r\n    mutationFn: async (staffData: Omit<Staff, 'id' | 'created_at' | 'updated_at'>) => {\r\n      try {\r\n        // Ensure school_id is set if provided in context\r\n        const dataWithSchool = schoolId ? { ...staffData, school_id: schoolId } : staffData;\r\n\r\n        const { data, error: createError } = await supabase\r\n          .from('staff')\r\n          .insert([{\r\n            ...dataWithSchool,\r\n            status: 'pending', // Default status\r\n            user_id: user?.id // Link to current user if available\r\n          }])\r\n          .select()\r\n          .single();\r\n\r\n        if (createError) throw createError;\r\n        return data;\r\n      } catch (err) {\r\n        const message = err instanceof Error ? err.message : 'Failed to add staff member';\r\n        logger.error(message, {\r\n          context: { error: err, staffData, schoolId },\r\n          source: 'useStaff'\r\n        });\r\n        throw err;\r\n      }\r\n    },\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['staff', schoolId] });\r\n      showToast('Staff member added successfully', { type: 'success' });\r\n    },\r\n    onError: (error) => {\r\n      const message = error instanceof Error ? error.message : 'Failed to add staff member';\r\n      showToast(message, { type: 'error' });\r\n    }\r\n  });\r\n\r\n  const updateStaff = useMutation({\r\n    mutationFn: async ({ id, updates }: { id: string; updates: Partial<Staff> }) => {\r\n      const { data: updatedStaff, error } = await supabase\r\n        .from('staff')\r\n        .update(updates)\r\n        .eq('id', id)\r\n        .select()\r\n        .single();\r\n      \r\n      if (error) throw error;\r\n      return updatedStaff;\r\n    },\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['staff', schoolId] });\r\n      showToast('Staff member updated successfully', { type: 'success' });\r\n    },\r\n    onError: (error) => {\r\n      const message = error instanceof Error ? error.message : 'Failed to update staff member';\r\n      showToast(message, { type: 'error' });\r\n    }\r\n  });\r\n\r\n  const deleteStaff = useMutation({\r\n    mutationFn: async (id: string) => {\r\n      const { error } = await supabase\r\n        .from('staff')\r\n        .delete()\r\n        .eq('id', id);\r\n      \r\n      if (error) throw error;\r\n      return id;\r\n    },\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['staff', schoolId] });\r\n      showToast('Staff member deleted successfully', { type: 'success' });\r\n    },\r\n    onError: (error) => {\r\n      const message = error instanceof Error ? error.message : 'Failed to delete staff member';\r\n      showToast(message, { type: 'error' });\r\n    }\r\n  });\r\n\r\n  const inviteStaff = async (email: string, role: string) => {\r\n    try {\r\n      // First check if user already exists\r\n      const { data: existingStaff } = await supabase\r\n        .from('staff')\r\n        .select('*')\r\n        .eq('email', email)\r\n        .single();\r\n\r\n      if (existingStaff) {\r\n        throw new Error('Staff member with this email already exists');\r\n      }\r\n\r\n      // Create user with Supabase auth\r\n      const { data: authData, error: authError } = await supabase.auth.admin.createUser({\r\n        email,\r\n        email_confirm: true,\r\n        user_metadata: { role }\r\n      });\r\n\r\n      if (authError) throw authError;\r\n\r\n      // Create staff record\r\n      const { data: staffData, error: staffError } = await supabase\r\n        .from('staff')\r\n        .insert([{\r\n          user_id: authData.user.id,\r\n          email,\r\n          role,\r\n          status: 'pending',\r\n          school_id: schoolId // Include school_id if available\r\n        }])\r\n        .select()\r\n        .single();\r\n\r\n      if (staffError) throw staffError;\r\n\r\n      queryClient.invalidateQueries({ queryKey: ['staff', schoolId] });\r\n      return staffData;\r\n    } catch (err) {\r\n      const message = err instanceof Error ? err.message : 'Failed to invite staff member';\r\n      logger.error(message, {\r\n        context: { error: err, email, role },\r\n        source: 'useStaff'\r\n      });\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  return {\r\n    staff,\r\n    loading,\r\n    error: queryError instanceof Error ? queryError.message : queryError ? String(queryError) : null,\r\n    addStaff,\r\n    updateStaff,\r\n    deleteStaff,\r\n    inviteStaff,\r\n    refresh: refetch\r\n  };\r\n};"
        }
    ]
}