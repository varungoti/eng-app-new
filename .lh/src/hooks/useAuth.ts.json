{
    "sourceFile": "src/hooks/useAuth.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 30,
            "patches": [
                {
                    "date": 1738870357092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738870386960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,65 +98,27 @@\n   const changeRole = async (newRole: UserRole): Promise<void> => {\r\n     if (!context.user || isTransitioning) return;\r\n \r\n     try {\r\n-      // First try to get current session\r\n-      const { data: { session: currentSession }, error: sessionError } = \r\n-        await supabaseClient.auth.getSession();\r\n+      await roleTransitionManager.transitionRole(newRole);\r\n       \r\n-      if (sessionError) {\r\n-        logger.error('Failed to get current session', {\r\n-          context: { error: sessionError },\r\n-          source: 'useAuth'\r\n-        });\r\n-      }\r\n-\r\n-      // If no current session or error, try refresh\r\n-      if (!currentSession || sessionError) {\r\n-        const { data: { session: refreshedSession }, error: refreshError } = \r\n-          await supabaseClient.auth.refreshSession();\r\n-        \r\n-        if (refreshError || !refreshedSession) {\r\n-          logger.error('Session refresh failed', {\r\n-            context: { error: refreshError },\r\n-            source: 'useAuth'\r\n-          });\r\n-          // Redirect to login if session cannot be refreshed\r\n-          await supabaseClient.auth.signOut();\r\n-          navigate('/login');\r\n-          return;\r\n-        }\r\n-\r\n-        // Use refreshed session\r\n-        await roleTransitionManager.transitionRole(newRole, refreshedSession);\r\n-      } else {\r\n-        // Use current session\r\n-        await roleTransitionManager.transitionRole(newRole, currentSession);\r\n-      }\r\n+      // Clear cache and refetch with new role\r\n+      queryClient.clear();\r\n+      await queryClient.resetQueries();\r\n       \r\n-      // Update context user with new role\r\n+      // Update context user\r\n       context.setUser({\r\n         ...context.user,\r\n         role: newRole\r\n       });\r\n \r\n-      // Clear cache and refetch with new role\r\n-      queryClient.clear();\r\n-      await queryClient.resetQueries();\r\n-      \r\n+      // Navigate to home with fresh data\r\n       navigate('/', { replace: true });\r\n     } catch (err) {\r\n       logger.error('Failed to change role', {\r\n         context: { error: err },\r\n         source: 'useAuth'\r\n       });\r\n-      \r\n-      // Handle session errors specifically\r\n-      if (err instanceof Error && err.message.includes('session')) {\r\n-        await supabaseClient.auth.signOut();\r\n-        navigate('/login');\r\n-      }\r\n-      \r\n       throw err;\r\n     }\r\n   };\r\n \r\n@@ -345,9 +307,9 @@\n         context: { \r\n           error: errorDetails,\r\n           credentials: { email: credentials.email }\r\n         },\r\n-        source: '\r\n+        source: 'useAuth'\r\n       });\r\n \r\n       if (error instanceof Error) {\r\n         throw error;\r\n"
                },
                {
                    "date": 1738870529975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,13 +22,10 @@\n }\r\n \r\n interface ResetPasswordCredentials {\r\n   email: string;\r\n-  newPassword: string;\r\n-  accessToken: string;\r\n }\r\n \r\n-\r\n export const useAuth = () => {\r\n   const context = useContext(AuthContext);\r\n   \r\n   if (!context) {\r\n"
                },
                {
                    "date": 1739277198560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n \"use client\";\r\n \r\n-import { useContext, useEffect } from 'react';\r\n+import { useContext, useEffect, useState, useCallback, useRef } from 'react';\r\n import { AuthContext } from '../contexts/AuthContext';\r\n import { useNavigate, useLocation } from 'react-router-dom';\r\n import { QueryClient } from '@tanstack/query-core';\r\n import { roleTransitionManager } from '../lib/auth/RoleTransitionManager';\r\n@@ -10,8 +10,10 @@\n import { ROLE_PERMISSIONS } from '../types/roles';\r\n import { sessionManager } from '../lib/auth/sessionManager';\r\n import type { UserRole } from '../types/roles';\r\n import { supabaseClient } from '../lib/supabaseClient';\r\n+import { supabase } from '../lib/supabase';\r\n+import { AuthLoader } from '../lib/auth/AuthLoader';\r\n \r\n interface LoginCredentials {\r\n   email: string;\r\n   password: string;\r\n@@ -374,8 +376,84 @@\n       }\r\n     }\r\n   };\r\n \r\n+  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\r\n+  const [isLoading, setIsLoading] = useState<boolean>(true);\r\n+  const authLoader = useRef<AuthLoader>(AuthLoader.getInstance());\r\n+  const stateChangeTimeout = useRef<NodeJS.Timeout | null>(null);\r\n+  const lastAuthState = useRef<string | null>(null);\r\n+\r\n+  const handleAuthChange = useCallback(async (event: 'SIGNED_IN' | 'SIGNED_OUT', session: any) => {\r\n+    const currentState = event;\r\n+    \r\n+    // Prevent unnecessary state updates\r\n+    if (lastAuthState.current === currentState) {\r\n+      return;\r\n+    }\r\n+\r\n+    // Clear any pending state changes\r\n+    if (stateChangeTimeout.current) {\r\n+      clearTimeout(stateChangeTimeout.current);\r\n+    }\r\n+\r\n+    // Delay state change to prevent rapid toggles\r\n+    stateChangeTimeout.current = setTimeout(() => {\r\n+      const isChildWindow = authLoader.current.isChildWindowSession();\r\n+      \r\n+      // Don't allow child windows to become unauthenticated\r\n+      if (isChildWindow && currentState === 'SIGNED_OUT') {\r\n+        logger.debug('Child window maintaining authenticated state', 'useAuth');\r\n+        return;\r\n+      }\r\n+\r\n+      setIsAuthenticated(currentState === 'SIGNED_IN');\r\n+      lastAuthState.current = currentState;\r\n+      \r\n+      logger.info(`Auth state changed: ${currentState}`, 'useAuth');\r\n+    }, 500);\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    let mounted = true;\r\n+    \r\n+    const initialize = async () => {\r\n+      try {\r\n+        await authLoader.current.initialize();\r\n+        \r\n+        if (!mounted) return;\r\n+        \r\n+        const currentState = authLoader.current.getLastAuthState();\r\n+        if (currentState) {\r\n+          handleAuthChange(currentState as 'SIGNED_IN' | 'SIGNED_OUT', null);\r\n+        }\r\n+        \r\n+        setIsLoading(false);\r\n+      } catch (err) {\r\n+        logger.error(`Auth initialization failed: ${err instanceof Error ? err.message : String(err)}`, 'useAuth');\r\n+        if (mounted) {\r\n+          setIsLoading(false);\r\n+        }\r\n+      }\r\n+    };\r\n+\r\n+    const { data: { subscription } } = supabase.auth.onAuthStateChange((event: any, session: any) => {\r\n+      if (mounted) {\r\n+        handleAuthChange(event, session);\r\n+      }\r\n+    });\r\n+\r\n+    initialize();\r\n+\r\n+    return () => {\r\n+      mounted = false;\r\n+      subscription?.unsubscribe();\r\n+      if (stateChangeTimeout.current) {\r\n+        clearTimeout(stateChangeTimeout.current);\r\n+      }\r\n+    };\r\n+  }, [handleAuthChange]);\r\n+\r\n   return {\r\n     user: user ? {\r\n       ...user,\r\n       role: user.role || 'unknown'\r\n@@ -385,7 +463,12 @@\n     isTransitioning,\r\n     login,\r\n     logout,\r\n     signUp,\r\n-    resetPassword\r\n+    resetPassword,\r\n+    isAuthenticated,\r\n\\ No newline at end of file\n+    isLoading,\r\n+    sessionManager\r\n   };\r\n-};\n+};\r\n+\r\n+export default useAuth;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739277219873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n import type { UserRole } from '../types/roles';\r\n import { supabaseClient } from '../lib/supabaseClient';\r\n import { supabase } from '../lib/supabase';\r\n import { AuthLoader } from '../lib/auth/AuthLoader';\r\n+import type { AuthError } from '@supabase/supabase-js';\r\n \r\n interface LoginCredentials {\r\n   email: string;\r\n   password: string;\r\n@@ -401,16 +402,16 @@\n       const isChildWindow = authLoader.current.isChildWindowSession();\r\n       \r\n       // Don't allow child windows to become unauthenticated\r\n       if (isChildWindow && currentState === 'SIGNED_OUT') {\r\n-        logger.debug('Child window maintaining authenticated state', 'useAuth');\r\n+        logger.debug('Child window maintaining authenticated state', { source: 'useAuth' });\r\n         return;\r\n       }\r\n \r\n       setIsAuthenticated(currentState === 'SIGNED_IN');\r\n       lastAuthState.current = currentState;\r\n       \r\n-      logger.info(`Auth state changed: ${currentState}`, 'useAuth');\r\n+      logger.info(`Auth state changed: ${currentState}`, { source: 'useAuth' });\r\n     }, 500);\r\n   }, []);\r\n \r\n   useEffect(() => {\r\n@@ -428,9 +429,12 @@\n         }\r\n         \r\n         setIsLoading(false);\r\n       } catch (err) {\r\n-        logger.error(`Auth initialization failed: ${err instanceof Error ? err.message : String(err)}`, 'useAuth');\r\n+        logger.error('Auth initialization failed', { \r\n+          error: err instanceof Error ? err.message : String(err),\r\n+          source: 'useAuth'\r\n+        });\r\n         if (mounted) {\r\n           setIsLoading(false);\r\n         }\r\n       }\r\n"
                },
                {
                    "date": 1739278677816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,11 @@\n interface ResetPasswordCredentials {\r\n   email: string;\r\n }\r\n \r\n+const AUTH_STATE_CHANGE_DELAY = 1000; // 1 second delay for state changes\r\n+const AUTH_STATE_DEBOUNCE = 2000; // 2 seconds debounce for rapid changes\r\n+\r\n export const useAuth = () => {\r\n   const context = useContext(AuthContext);\r\n   \r\n   if (!context) {\r\n@@ -382,37 +385,54 @@\n   const [isLoading, setIsLoading] = useState<boolean>(true);\r\n   const authLoader = useRef<AuthLoader>(AuthLoader.getInstance());\r\n   const stateChangeTimeout = useRef<NodeJS.Timeout | null>(null);\r\n   const lastAuthState = useRef<string | null>(null);\r\n+  const lastStateChangeTime = useRef<number>(0);\r\n+  const pendingStateChange = useRef<'SIGNED_IN' | 'SIGNED_OUT' | null>(null);\r\n \r\n   const handleAuthChange = useCallback(async (event: 'SIGNED_IN' | 'SIGNED_OUT', session: any) => {\r\n-    const currentState = event;\r\n+    const now = Date.now();\r\n+    const timeSinceLastChange = now - lastStateChangeTime.current;\r\n     \r\n-    // Prevent unnecessary state updates\r\n-    if (lastAuthState.current === currentState) {\r\n-      return;\r\n-    }\r\n+    // Store the pending state change\r\n+    pendingStateChange.current = event;\r\n \r\n     // Clear any pending state changes\r\n     if (stateChangeTimeout.current) {\r\n       clearTimeout(stateChangeTimeout.current);\r\n     }\r\n \r\n-    // Delay state change to prevent rapid toggles\r\n+    // If we're changing too quickly, delay the change\r\n+    if (timeSinceLastChange < AUTH_STATE_DEBOUNCE) {\r\n+      logger.debug(`Debouncing auth state change to ${event}`, { component: 'useAuth' });\r\n+      stateChangeTimeout.current = setTimeout(() => {\r\n+        handleAuthChange(event, session);\r\n+      }, AUTH_STATE_DEBOUNCE);\r\n+      return;\r\n+    }\r\n+\r\n+    // Don't allow rapid toggles between states\r\n+    if (lastAuthState.current && lastAuthState.current !== event && timeSinceLastChange < AUTH_STATE_CHANGE_DELAY) {\r\n+      logger.debug(`Preventing rapid auth state toggle to ${event}`, { component: 'useAuth' });\r\n+      return;\r\n+    }\r\n+\r\n+    // Process the state change\r\n     stateChangeTimeout.current = setTimeout(() => {\r\n       const isChildWindow = authLoader.current.isChildWindowSession();\r\n       \r\n       // Don't allow child windows to become unauthenticated\r\n-      if (isChildWindow && currentState === 'SIGNED_OUT') {\r\n-        logger.debug('Child window maintaining authenticated state', { source: 'useAuth' });\r\n+      if (isChildWindow && event === 'SIGNED_OUT') {\r\n+        logger.debug('Child window maintaining authenticated state', { component: 'useAuth' });\r\n         return;\r\n       }\r\n \r\n-      setIsAuthenticated(currentState === 'SIGNED_IN');\r\n-      lastAuthState.current = currentState;\r\n+      setIsAuthenticated(event === 'SIGNED_IN');\r\n+      lastAuthState.current = event;\r\n+      lastStateChangeTime.current = Date.now();\r\n       \r\n-      logger.info(`Auth state changed: ${currentState}`, { source: 'useAuth' });\r\n-    }, 500);\r\n+      logger.info(`Auth state changed: ${event}`, { component: 'useAuth' });\r\n+    }, AUTH_STATE_CHANGE_DELAY);\r\n   }, []);\r\n \r\n   useEffect(() => {\r\n     let mounted = true;\r\n@@ -431,9 +451,9 @@\n         setIsLoading(false);\r\n       } catch (err) {\r\n         logger.error('Auth initialization failed', { \r\n           error: err instanceof Error ? err.message : String(err),\r\n-          source: 'useAuth'\r\n+          component: 'useAuth'\r\n         });\r\n         if (mounted) {\r\n           setIsLoading(false);\r\n         }\r\n@@ -457,21 +477,20 @@\n     };\r\n   }, [handleAuthChange]);\r\n \r\n   return {\r\n-    user: user ? {\r\n-      ...user,\r\n-      role: user.role || 'unknown'\r\n+    user: context?.user ? {\r\n+      ...context.user,\r\n+      role: context.user.role || 'unknown'\r\n     } : null,\r\n-    loading,\r\n+    loading: isLoading,\r\n     changeRole,\r\n     isTransitioning,\r\n     login,\r\n     logout,\r\n     signUp,\r\n     resetPassword,\r\n     isAuthenticated,\r\n-    isLoading,\r\n     sessionManager\r\n   };\r\n };\r\n \r\n"
                },
                {
                    "date": 1739278699416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -392,46 +392,40 @@\n   const handleAuthChange = useCallback(async (event: 'SIGNED_IN' | 'SIGNED_OUT', session: any) => {\r\n     const now = Date.now();\r\n     const timeSinceLastChange = now - lastStateChangeTime.current;\r\n     \r\n-    // Store the pending state change\r\n     pendingStateChange.current = event;\r\n \r\n-    // Clear any pending state changes\r\n     if (stateChangeTimeout.current) {\r\n       clearTimeout(stateChangeTimeout.current);\r\n     }\r\n \r\n-    // If we're changing too quickly, delay the change\r\n     if (timeSinceLastChange < AUTH_STATE_DEBOUNCE) {\r\n-      logger.debug(`Debouncing auth state change to ${event}`, { component: 'useAuth' });\r\n+      logger.debug(`[useAuth] Debouncing auth state change to ${event}`);\r\n       stateChangeTimeout.current = setTimeout(() => {\r\n         handleAuthChange(event, session);\r\n       }, AUTH_STATE_DEBOUNCE);\r\n       return;\r\n     }\r\n \r\n-    // Don't allow rapid toggles between states\r\n     if (lastAuthState.current && lastAuthState.current !== event && timeSinceLastChange < AUTH_STATE_CHANGE_DELAY) {\r\n-      logger.debug(`Preventing rapid auth state toggle to ${event}`, { component: 'useAuth' });\r\n+      logger.debug(`[useAuth] Preventing rapid auth state toggle to ${event}`);\r\n       return;\r\n     }\r\n \r\n-    // Process the state change\r\n     stateChangeTimeout.current = setTimeout(() => {\r\n       const isChildWindow = authLoader.current.isChildWindowSession();\r\n       \r\n-      // Don't allow child windows to become unauthenticated\r\n       if (isChildWindow && event === 'SIGNED_OUT') {\r\n-        logger.debug('Child window maintaining authenticated state', { component: 'useAuth' });\r\n+        logger.debug('[useAuth] Child window maintaining authenticated state');\r\n         return;\r\n       }\r\n \r\n       setIsAuthenticated(event === 'SIGNED_IN');\r\n       lastAuthState.current = event;\r\n       lastStateChangeTime.current = Date.now();\r\n       \r\n-      logger.info(`Auth state changed: ${event}`, { component: 'useAuth' });\r\n+      logger.info(`[useAuth] Auth state changed: ${event}`);\r\n     }, AUTH_STATE_CHANGE_DELAY);\r\n   }, []);\r\n \r\n   useEffect(() => {\r\n@@ -449,12 +443,9 @@\n         }\r\n         \r\n         setIsLoading(false);\r\n       } catch (err) {\r\n-        logger.error('Auth initialization failed', { \r\n-          error: err instanceof Error ? err.message : String(err),\r\n-          component: 'useAuth'\r\n-        });\r\n+        logger.error(`[useAuth] Auth initialization failed: ${err instanceof Error ? err.message : String(err)}`);\r\n         if (mounted) {\r\n           setIsLoading(false);\r\n         }\r\n       }\r\n"
                },
                {
                    "date": 1739278797230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,488 +1,508 @@\n-\"use client\";\r\n-\r\n-import { useContext, useEffect, useState, useCallback, useRef } from 'react';\r\n-import { AuthContext } from '../contexts/AuthContext';\r\n-import { useNavigate, useLocation } from 'react-router-dom';\r\n-import { QueryClient } from '@tanstack/query-core';\r\n-import { roleTransitionManager } from '../lib/auth/RoleTransitionManager';\r\n-import { useRoleStore } from '../lib/auth/store';\r\n-import { logger } from '../lib/logger';\r\n-import { ROLE_PERMISSIONS } from '../types/roles';\r\n-import { sessionManager } from '../lib/auth/sessionManager';\r\n-import type { UserRole } from '../types/roles';\r\n-import { supabaseClient } from '../lib/supabaseClient';\r\n-import { supabase } from '../lib/supabase';\r\n-import { AuthLoader } from '../lib/auth/AuthLoader';\r\n-import type { AuthError } from '@supabase/supabase-js';\r\n-\r\n-interface LoginCredentials {\r\n-  email: string;\r\n-  password: string;\r\n-}\r\n-\r\n-interface SignUpCredentials extends LoginCredentials {\r\n-  name?: string;\r\n-}\r\n-\r\n-interface ResetPasswordCredentials {\r\n-  email: string;\r\n-}\r\n-\r\n-const AUTH_STATE_CHANGE_DELAY = 1000; // 1 second delay for state changes\r\n-const AUTH_STATE_DEBOUNCE = 2000; // 2 seconds debounce for rapid changes\r\n-\r\n-export const useAuth = () => {\r\n-  const context = useContext(AuthContext);\r\n-  \r\n-  if (!context) {\r\n-    console.warn('useAuth must be used within an AuthProvider');\r\n-    return { user: null, loading: false };\r\n-  }\r\n-\r\n-  const { user, loading } = context;\r\n-\r\n-  // Add debug logging\r\n-  console.log('Auth Context:', {\r\n-    hasUser: !!user,\r\n-    userRole: user?.role,\r\n-    userId: user?.id,\r\n-    isLoading: loading,\r\n-    fullUser: user // Log the full user object for debugging\r\n-  });\r\n-\r\n-  const { isTransitioning } = useRoleStore();\r\n-  const navigate = useNavigate();\r\n-  const queryClient = new QueryClient();\r\n-  const location = useLocation();\r\n-  \r\n-  // Add loading state check\r\n-  useEffect(() => {\r\n-    if (loading) {\r\n-      logger.info('Auth loading state active', {\r\n-        source: 'useAuth'\r\n-      });\r\n-    }\r\n-  }, [loading]);\r\n-\r\n-  // Auto-refresh session when it's about to expire\r\n-  useEffect(() => {\r\n-    if (!user) return;\r\n-    const refreshInterval = setInterval(async () => {\r\n-      try {\r\n-        await sessionManager.refreshSession();\r\n-      } catch (err) {\r\n-        logger.error('Failed to refresh session', {\r\n-          context: { error: err },\r\n-          source: 'useAuth'\r\n-        });\r\n-      }\r\n-    }, 4 * 60 * 1000); // Check every 4 minutes\r\n-    \r\n-    return () => {\r\n-      if (refreshInterval) {\r\n-        clearInterval(refreshInterval);\r\n-      }\r\n-    };\r\n-  }, [user]);\r\n-\r\n-  useEffect(() => {\r\n-    if (user) {\r\n-      logger.debug('Auth state check on route change', {\r\n-        context: {\r\n-          role: user.role,\r\n-          path: location.pathname,\r\n-          permissions: ROLE_PERMISSIONS[user.role]?.permissions\r\n-        },\r\n-        source: 'useAuth'\r\n-      });\r\n-    }\r\n-  }, [user, location.pathname]);\r\n-\r\n-  const changeRole = async (newRole: UserRole): Promise<void> => {\r\n-    if (!context.user || isTransitioning) return;\r\n-\r\n-    try {\r\n-      await roleTransitionManager.transitionRole(newRole);\r\n-      \r\n-      // Clear cache and refetch with new role\r\n-      queryClient.clear();\r\n-      await queryClient.resetQueries();\r\n-      \r\n-      // Update context user\r\n-      context.setUser({\r\n-        ...context.user,\r\n-        role: newRole\r\n-      });\r\n-\r\n-      // Navigate to home with fresh data\r\n-      navigate('/', { replace: true });\r\n-    } catch (err) {\r\n-      logger.error('Failed to change role', {\r\n-        context: { error: err },\r\n-        source: 'useAuth'\r\n-      });\r\n-      throw err;\r\n-    }\r\n-  };\r\n-\r\n-  const login = async (credentials: LoginCredentials) => {\r\n-    try {\r\n-      console.log('[Auth] Attempting login:', {\r\n-        email: credentials.email,\r\n-        timestamp: new Date().toISOString()\r\n-      });\r\n-      \r\n-      const { data, error } = await supabaseClient.auth.signInWithPassword({\r\n-        email: credentials.email,\r\n-        password: credentials.password,\r\n-      });\r\n-\r\n-      if (error) {\r\n-        console.error('[Auth] Supabase login error:', {\r\n-          message: error.message,\r\n-          status: error.status,\r\n-          name: error.name,\r\n-          timestamp: new Date().toISOString()\r\n-        });\r\n-        \r\n-        // Provide more specific error messages\r\n-        if (error.message.includes('Invalid login credentials')) {\r\n-          throw new Error('Invalid email or password. Please check your credentials and try again.');\r\n-        }\r\n-        \r\n-        logger.error('Login failed', {\r\n-          context: { \r\n-            error,\r\n-            credentials: { email: credentials.email }\r\n-          },\r\n-          source: 'useAuth'\r\n-        });\r\n-        throw new Error(error.message);\r\n-      }\r\n-\r\n-      console.log('[Auth] Login response:', {\r\n-        hasUser: !!data.user,\r\n-        userId: data.user?.id,\r\n-        userEmail: data.user?.email,\r\n-        metadata: data.user?.user_metadata,\r\n-        timestamp: new Date().toISOString()\r\n-      });\r\n-\r\n-      if (!data.user) {\r\n-        throw new Error('Login successful but user data is missing');\r\n-      }\r\n-\r\n-      // Map Supabase user to our user format\r\n-      const mappedUser = {\r\n-        id: data.user.id,\r\n-        email: data.user.email!,\r\n-        name: data.user.user_metadata?.name || data.user.email!.split('@')[0],\r\n-        role: data.user.user_metadata?.role || 'student',\r\n-        photoUrl: data.user.user_metadata?.avatar_url,\r\n-      };\r\n-\r\n-      console.log('[Auth] Mapped user:', mappedUser);\r\n-\r\n-      context.setUser(mappedUser);\r\n-      return { user: mappedUser };\r\n-    } catch (error) {\r\n-      const errorDetails = error instanceof Error ? {\r\n-        message: error.message,\r\n-        name: error.name,\r\n-        stack: error.stack\r\n-      } : error;\r\n-\r\n-      console.error('[Auth] Login error details:', {\r\n-        error: errorDetails,\r\n-        timestamp: new Date().toISOString()\r\n-      });\r\n-\r\n-      logger.error('Login failed', {\r\n-        context: { \r\n-          error: errorDetails,\r\n-          credentials: { email: credentials.email }\r\n-        },\r\n-        source: 'useAuth'\r\n-      });\r\n-\r\n-      if (error instanceof Error) {\r\n-        throw error;\r\n-      } else {\r\n-        throw new Error('An unexpected error occurred. Please try again.');\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const logout = async () => {\r\n-    try {\r\n-      const { error } = await supabaseClient.auth.signOut();\r\n-      \r\n-      if (error) {\r\n-        throw error;\r\n-      }\r\n-\r\n-      context.setUser(null);\r\n-      queryClient.clear();\r\n-      navigate('/login');\r\n-    } catch (error) {\r\n-      logger.error('Logout failed', {\r\n-        context: { error },\r\n-        source: 'useAuth'\r\n-      });\r\n-      throw error;\r\n-    }\r\n-  };\r\n-\r\n-  const signUp = async (credentials: SignUpCredentials) => {\r\n-    try {\r\n-      console.log('[Auth] Attempting signup:', {\r\n-        email: credentials.email,\r\n-        timestamp: new Date().toISOString()\r\n-      });\r\n-      \r\n-      const { data, error } = await supabaseClient.auth.signUp({\r\n-        email: credentials.email,\r\n-        password: credentials.password,\r\n-        options: {\r\n-          data: {\r\n-            name: credentials.name || credentials.email.split('@')[0],\r\n-            role: 'student'\r\n-          }\r\n-        }\r\n-      });\r\n-\r\n-      if (error) {\r\n-        console.error('[Auth] Supabase signup error:', {\r\n-          message: error.message,\r\n-          status: error.status,\r\n-          name: error.name,\r\n-          timestamp: new Date().toISOString()\r\n-        });\r\n-        \r\n-        logger.error('Signup failed', {\r\n-          context: { \r\n-            error,\r\n-            credentials: { email: credentials.email }\r\n-          },\r\n-          source: 'useAuth'\r\n-        });\r\n-        throw new Error(error.message);\r\n-      }\r\n-\r\n-      console.log('[Auth] Signup response:', {\r\n-        hasUser: !!data.user,\r\n-        userId: data.user?.id,\r\n-        userEmail: data.user?.email,\r\n-        metadata: data.user?.user_metadata,\r\n-        timestamp: new Date().toISOString()\r\n-      });\r\n-\r\n-      if (!data.user) {\r\n-        throw new Error('Signup successful but user data is missing');\r\n-      }\r\n-\r\n-      // Map Supabase user to our user format\r\n-      const mappedUser = {\r\n-        id: data.user.id,\r\n-        email: data.user.email!,\r\n-        name: data.user.user_metadata?.name || data.user.email!.split('@')[0],\r\n-        role: data.user.user_metadata?.role || 'student',\r\n-        photoUrl: data.user.user_metadata?.avatar_url,\r\n-      };\r\n-\r\n-      console.log('[Auth] Mapped user:', mappedUser);\r\n-\r\n-      context.setUser(mappedUser);\r\n-      return { user: mappedUser };\r\n-    } catch (error) {\r\n-      const errorDetails = error instanceof Error ? {\r\n-        message: error.message,\r\n-        name: error.name,\r\n-        stack: error.stack\r\n-      } : error;\r\n-\r\n-      console.error('[Auth] Signup error details:', {\r\n-        error: errorDetails,\r\n-        timestamp: new Date().toISOString()\r\n-      });\r\n-\r\n-      logger.error('Signup failed', {\r\n-        context: { \r\n-          error: errorDetails,\r\n-          credentials: { email: credentials.email }\r\n-        },\r\n-        source: 'useAuth'\r\n-      });\r\n-\r\n-      if (error instanceof Error) {\r\n-        throw error;\r\n-      } else {\r\n-        throw new Error('An unexpected error occurred during signup. Please try again.');\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const resetPassword = async (credentials: ResetPasswordCredentials) => {\r\n-    try {\r\n-      console.log('[Auth] Attempting password reset:', {\r\n-        email: credentials.email,\r\n-        timestamp: new Date().toISOString()\r\n-      });\r\n-      \r\n-      const { data, error } = await supabaseClient.auth.resetPasswordForEmail(\r\n-        credentials.email,\r\n-        { redirectTo: `${window.location.origin}/reset-password` }\r\n-      );\r\n-\r\n-      if (error) {\r\n-        console.error('[Auth] Supabase password reset error:', {\r\n-          message: error.message,\r\n-          status: error.status,\r\n-          name: error.name,\r\n-          timestamp: new Date().toISOString()\r\n-        });\r\n-        \r\n-        logger.error('Password reset failed', {\r\n-          context: { \r\n-            error,\r\n-            credentials: { email: credentials.email }\r\n-          },\r\n-          source: 'useAuth'\r\n-        });\r\n-        throw new Error(error.message);\r\n-      }\r\n-\r\n-      return data;\r\n-    } catch (error) {\r\n-      const errorDetails = error instanceof Error ? {\r\n-        message: error.message,\r\n-        name: error.name,\r\n-        stack: error.stack\r\n-      } : error;\r\n-\r\n-      console.error('[Auth] Password reset error details:', {\r\n-        error: errorDetails,\r\n-        timestamp: new Date().toISOString()\r\n-      });\r\n-\r\n-      logger.error('Password reset failed', {\r\n-        context: { \r\n-          error: errorDetails,\r\n-          credentials: { email: credentials.email }\r\n-        },\r\n-        source: 'useAuth'\r\n-      });\r\n-\r\n-      if (error instanceof Error) {\r\n-        throw error;\r\n-      } else {\r\n-        throw new Error('An unexpected error occurred during password reset. Please try again.');\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\r\n-  const [isLoading, setIsLoading] = useState<boolean>(true);\r\n-  const authLoader = useRef<AuthLoader>(AuthLoader.getInstance());\r\n-  const stateChangeTimeout = useRef<NodeJS.Timeout | null>(null);\r\n-  const lastAuthState = useRef<string | null>(null);\r\n-  const lastStateChangeTime = useRef<number>(0);\r\n-  const pendingStateChange = useRef<'SIGNED_IN' | 'SIGNED_OUT' | null>(null);\r\n-\r\n-  const handleAuthChange = useCallback(async (event: 'SIGNED_IN' | 'SIGNED_OUT', session: any) => {\r\n-    const now = Date.now();\r\n-    const timeSinceLastChange = now - lastStateChangeTime.current;\r\n-    \r\n-    pendingStateChange.current = event;\r\n-\r\n-    if (stateChangeTimeout.current) {\r\n-      clearTimeout(stateChangeTimeout.current);\r\n-    }\r\n-\r\n-    if (timeSinceLastChange < AUTH_STATE_DEBOUNCE) {\r\n-      logger.debug(`[useAuth] Debouncing auth state change to ${event}`);\r\n-      stateChangeTimeout.current = setTimeout(() => {\r\n-        handleAuthChange(event, session);\r\n-      }, AUTH_STATE_DEBOUNCE);\r\n-      return;\r\n-    }\r\n-\r\n-    if (lastAuthState.current && lastAuthState.current !== event && timeSinceLastChange < AUTH_STATE_CHANGE_DELAY) {\r\n-      logger.debug(`[useAuth] Preventing rapid auth state toggle to ${event}`);\r\n-      return;\r\n-    }\r\n-\r\n-    stateChangeTimeout.current = setTimeout(() => {\r\n-      const isChildWindow = authLoader.current.isChildWindowSession();\r\n-      \r\n-      if (isChildWindow && event === 'SIGNED_OUT') {\r\n-        logger.debug('[useAuth] Child window maintaining authenticated state');\r\n-        return;\r\n-      }\r\n-\r\n-      setIsAuthenticated(event === 'SIGNED_IN');\r\n-      lastAuthState.current = event;\r\n-      lastStateChangeTime.current = Date.now();\r\n-      \r\n-      logger.info(`[useAuth] Auth state changed: ${event}`);\r\n-    }, AUTH_STATE_CHANGE_DELAY);\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    let mounted = true;\r\n-    \r\n-    const initialize = async () => {\r\n-      try {\r\n-        await authLoader.current.initialize();\r\n-        \r\n-        if (!mounted) return;\r\n-        \r\n-        const currentState = authLoader.current.getLastAuthState();\r\n-        if (currentState) {\r\n-          handleAuthChange(currentState as 'SIGNED_IN' | 'SIGNED_OUT', null);\r\n-        }\r\n-        \r\n-        setIsLoading(false);\r\n-      } catch (err) {\r\n-        logger.error(`[useAuth] Auth initialization failed: ${err instanceof Error ? err.message : String(err)}`);\r\n-        if (mounted) {\r\n-          setIsLoading(false);\r\n-        }\r\n-      }\r\n-    };\r\n-\r\n-    const { data: { subscription } } = supabase.auth.onAuthStateChange((event: any, session: any) => {\r\n-      if (mounted) {\r\n-        handleAuthChange(event, session);\r\n-      }\r\n-    });\r\n-\r\n-    initialize();\r\n-\r\n-    return () => {\r\n-      mounted = false;\r\n-      subscription?.unsubscribe();\r\n-      if (stateChangeTimeout.current) {\r\n-        clearTimeout(stateChangeTimeout.current);\r\n-      }\r\n-    };\r\n-  }, [handleAuthChange]);\r\n-\r\n-  return {\r\n-    user: context?.user ? {\r\n-      ...context.user,\r\n-      role: context.user.role || 'unknown'\r\n-    } : null,\r\n-    loading: isLoading,\r\n-    changeRole,\r\n-    isTransitioning,\r\n-    login,\r\n-    logout,\r\n-    signUp,\r\n-    resetPassword,\r\n-    isAuthenticated,\r\n-    sessionManager\r\n-  };\r\n-};\r\n-\r\n+\"use client\";\n+\n+import { useContext, useEffect, useState, useCallback, useRef } from 'react';\n+import { AuthContext } from '../contexts/AuthContext';\n+import { useNavigate, useLocation } from 'react-router-dom';\n+import { QueryClient } from '@tanstack/query-core';\n+import { roleTransitionManager } from '../lib/auth/RoleTransitionManager';\n+import { useRoleStore } from '../lib/auth/store';\n+import { logger } from '../lib/logger';\n+import { ROLE_PERMISSIONS } from '../types/roles';\n+import { sessionManager } from '../lib/auth/sessionManager';\n+import type { UserRole } from '../types/roles';\n+import { supabaseClient } from '../lib/supabaseClient';\n+import { supabase } from '../lib/supabase';\n+import { AuthLoader } from '../lib/auth/AuthLoader';\n+import type { AuthError } from '@supabase/supabase-js';\n+\n+interface LoginCredentials {\n+  email: string;\n+  password: string;\n+}\n+\n+interface SignUpCredentials extends LoginCredentials {\n+  name?: string;\n+}\n+\n+interface ResetPasswordCredentials {\n+  email: string;\n+}\n+\n+export const useAuth = () => {\n+  const context = useContext(AuthContext);\n+  \n+  if (!context) {\n+    console.warn('useAuth must be used within an AuthProvider');\n+    return { user: null, loading: false };\n+  }\n+\n+  const { user, loading } = context;\n+\n+  // Add debug logging\n+  console.log('Auth Context:', {\n+    hasUser: !!user,\n+    userRole: user?.role,\n+    userId: user?.id,\n+    isLoading: loading,\n+    fullUser: user // Log the full user object for debugging\n+  });\n+\n+  const { isTransitioning } = useRoleStore();\n+  const navigate = useNavigate();\n+  const queryClient = new QueryClient();\n+  const location = useLocation();\n+  \n+  // Add loading state check\n+  useEffect(() => {\n+    if (loading) {\n+      logger.info('Auth loading state active', {\n+        source: 'useAuth',\n+        context: { loading }\n+      });\n+    }\n+  }, [loading]);\n+\n+  // Auto-refresh session when it's about to expire\n+  useEffect(() => {\n+    if (!user) return;\n+    const refreshInterval = setInterval(async () => {\n+      try {\n+        await sessionManager.refreshSession();\n+      } catch (err) {\n+        logger.error('Failed to refresh session', {\n+          source: 'useAuth',\n+          context: { error: err }\n+        });\n+      }\n+    }, 4 * 60 * 1000); // Check every 4 minutes\n+    \n+    return () => {\n+      if (refreshInterval) {\n+        clearInterval(refreshInterval);\n+      }\n+    };\n+  }, [user]);\n+\n+  useEffect(() => {\n+    if (user) {\n+      logger.debug('Auth state check on route change', {\n+        source: 'useAuth',\n+        context: {\n+          role: user.role,\n+          path: location.pathname,\n+          permissions: ROLE_PERMISSIONS[user.role]?.permissions\n+        }\n+      });\n+    }\n+  }, [user, location.pathname]);\n+\n+  const changeRole = async (newRole: UserRole): Promise<void> => {\n+    if (!context.user || isTransitioning) return;\n+\n+    try {\n+      await roleTransitionManager.transitionRole(newRole);\n+      \n+      // Clear cache and refetch with new role\n+      queryClient.clear();\n+      await queryClient.resetQueries();\n+      \n+      // Update context user\n+      context.setUser({\n+        ...context.user,\n+        role: newRole\n+      });\n+\n+      // Navigate to home with fresh data\n+      navigate('/', { replace: true });\n+    } catch (err) {\n+      logger.error('Failed to change role', {\n+        source: 'useAuth',\n+        context: { error: err }\n+      });\n+      throw err;\n+    }\n+  };\n+\n+  const login = async (credentials: LoginCredentials) => {\n+    try {\n+      console.log('[Auth] Attempting login:', {\n+        email: credentials.email,\n+        timestamp: new Date().toISOString()\n+      });\n+      \n+      const { data, error } = await supabaseClient.auth.signInWithPassword({\n+        email: credentials.email,\n+        password: credentials.password,\n+      });\n+\n+      if (error) {\n+        console.error('[Auth] Supabase login error:', {\n+          message: error.message,\n+          status: error.status,\n+          name: error.name,\n+          timestamp: new Date().toISOString()\n+        });\n+        \n+        // Provide more specific error messages\n+        if (error.message.includes('Invalid login credentials')) {\n+          throw new Error('Invalid email or password. Please check your credentials and try again.');\n+        }\n+        \n+        logger.error('Login failed', {\n+          context: { \n+            error,\n+            credentials: { email: credentials.email }\n+          },\n+          source: 'useAuth'\n+        });\n+        throw new Error(error.message);\n+      }\n+\n+      console.log('[Auth] Login response:', {\n+        hasUser: !!data.user,\n+        userId: data.user?.id,\n+        userEmail: data.user?.email,\n+        metadata: data.user?.user_metadata,\n+        timestamp: new Date().toISOString()\n+      });\n+\n+      if (!data.user) {\n+        throw new Error('Login successful but user data is missing');\n+      }\n+\n+      // Map Supabase user to our user format\n+      const mappedUser = {\n+        id: data.user.id,\n+        email: data.user.email!,\n+        name: data.user.user_metadata?.name || data.user.email!.split('@')[0],\n+        role: data.user.user_metadata?.role || 'student',\n+        photoUrl: data.user.user_metadata?.avatar_url,\n+      };\n+\n+      console.log('[Auth] Mapped user:', mappedUser);\n+\n+      context.setUser(mappedUser);\n+      return { user: mappedUser };\n+    } catch (error) {\n+      const errorDetails = error instanceof Error ? {\n+        message: error.message,\n+        name: error.name,\n+        stack: error.stack\n+      } : error;\n+\n+      console.error('[Auth] Login error details:', {\n+        error: errorDetails,\n+        timestamp: new Date().toISOString()\n+      });\n+\n+      logger.error('Login failed', {\n+        context: { \n+          error: errorDetails,\n+          credentials: { email: credentials.email }\n+        },\n+        source: 'useAuth'\n+      });\n+\n+      if (error instanceof Error) {\n+        throw error;\n+      } else {\n+        throw new Error('An unexpected error occurred. Please try again.');\n+      }\n+    }\n+  };\n+\n+  const logout = async () => {\n+    try {\n+      const { error } = await supabaseClient.auth.signOut();\n+      \n+      if (error) {\n+        throw error;\n+      }\n+\n+      context.setUser(null);\n+      queryClient.clear();\n+      navigate('/login');\n+    } catch (error) {\n+      logger.error('Logout failed', {\n+        context: { error },\n+        source: 'useAuth'\n+      });\n+      throw error;\n+    }\n+  };\n+\n+  const signUp = async (credentials: SignUpCredentials) => {\n+    try {\n+      console.log('[Auth] Attempting signup:', {\n+        email: credentials.email,\n+        timestamp: new Date().toISOString()\n+      });\n+      \n+      const { data, error } = await supabaseClient.auth.signUp({\n+        email: credentials.email,\n+        password: credentials.password,\n+        options: {\n+          data: {\n+            name: credentials.name || credentials.email.split('@')[0],\n+            role: 'student'\n+          }\n+        }\n+      });\n+\n+      if (error) {\n+        console.error('[Auth] Supabase signup error:', {\n+          message: error.message,\n+          status: error.status,\n+          name: error.name,\n+          timestamp: new Date().toISOString()\n+        });\n+        \n+        logger.error('Signup failed', {\n+          context: { \n+            error,\n+            credentials: { email: credentials.email }\n+          },\n+          source: 'useAuth'\n+        });\n+        throw new Error(error.message);\n+      }\n+\n+      console.log('[Auth] Signup response:', {\n+        hasUser: !!data.user,\n+        userId: data.user?.id,\n+        userEmail: data.user?.email,\n+        metadata: data.user?.user_metadata,\n+        timestamp: new Date().toISOString()\n+      });\n+\n+      if (!data.user) {\n+        throw new Error('Signup successful but user data is missing');\n+      }\n+\n+      // Map Supabase user to our user format\n+      const mappedUser = {\n+        id: data.user.id,\n+        email: data.user.email!,\n+        name: data.user.user_metadata?.name || data.user.email!.split('@')[0],\n+        role: data.user.user_metadata?.role || 'student',\n+        photoUrl: data.user.user_metadata?.avatar_url,\n+      };\n+\n+      console.log('[Auth] Mapped user:', mappedUser);\n+\n+      context.setUser(mappedUser);\n+      return { user: mappedUser };\n+    } catch (error) {\n+      const errorDetails = error instanceof Error ? {\n+        message: error.message,\n+        name: error.name,\n+        stack: error.stack\n+      } : error;\n+\n+      console.error('[Auth] Signup error details:', {\n+        error: errorDetails,\n+        timestamp: new Date().toISOString()\n+      });\n+\n+      logger.error('Signup failed', {\n+        context: { \n+          error: errorDetails,\n+          credentials: { email: credentials.email }\n+        },\n+        source: 'useAuth'\n+      });\n+\n+      if (error instanceof Error) {\n+        throw error;\n+      } else {\n+        throw new Error('An unexpected error occurred during signup. Please try again.');\n+      }\n+    }\n+  };\n+\n+  const resetPassword = async (credentials: ResetPasswordCredentials) => {\n+    try {\n+      console.log('[Auth] Attempting password reset:', {\n+        email: credentials.email,\n+        timestamp: new Date().toISOString()\n+      });\n+      \n+      const { data, error } = await supabaseClient.auth.resetPasswordForEmail(\n+        credentials.email,\n+        { redirectTo: `${window.location.origin}/reset-password` }\n+      );\n+\n+      if (error) {\n+        console.error('[Auth] Supabase password reset error:', {\n+          message: error.message,\n+          status: error.status,\n+          name: error.name,\n+          timestamp: new Date().toISOString()\n+        });\n+        \n+        logger.error('Password reset failed', {\n+          context: { \n+            error,\n+            credentials: { email: credentials.email }\n+          },\n+          source: 'useAuth'\n+        });\n+        throw new Error(error.message);\n+      }\n+\n+      return data;\n+    } catch (error) {\n+      const errorDetails = error instanceof Error ? {\n+        message: error.message,\n+        name: error.name,\n+        stack: error.stack\n+      } : error;\n+\n+      console.error('[Auth] Password reset error details:', {\n+        error: errorDetails,\n+        timestamp: new Date().toISOString()\n+      });\n+\n+      logger.error('Password reset failed', {\n+        context: { \n+          error: errorDetails,\n+          credentials: { email: credentials.email }\n+        },\n+        source: 'useAuth'\n+      });\n+\n+      if (error instanceof Error) {\n+        throw error;\n+      } else {\n+        throw new Error('An unexpected error occurred during password reset. Please try again.');\n+      }\n+    }\n+  };\n+\n+  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\n+  const [isLoading, setIsLoading] = useState<boolean>(true);\n+  const authLoader = useRef<AuthLoader>(AuthLoader.getInstance());\n+  const stateChangeTimeout = useRef<NodeJS.Timeout | null>(null);\n+  const lastAuthState = useRef<string | null>(null);\n+\n+  const handleAuthChange = useCallback(async (event: 'SIGNED_IN' | 'SIGNED_OUT', session: any) => {\n+    const currentState = event;\n+    \n+    // Prevent unnecessary state updates\n+    if (lastAuthState.current === currentState) {\n+      return;\n+    }\n+\n+    // Clear any pending state changes\n+    if (stateChangeTimeout.current) {\n+      clearTimeout(stateChangeTimeout.current);\n+    }\n+\n+    // Delay state change to prevent rapid toggles\n+    stateChangeTimeout.current = setTimeout(() => {\n+      const isChildWindow = authLoader.current.isChildWindowSession();\n+      \n+      // Don't allow child windows to become unauthenticated\n+      if (isChildWindow && currentState === 'SIGNED_OUT') {\n+        logger.debug('Child window maintaining authenticated state', {\n+          source: 'useAuth',\n+          context: { currentState, isChildWindow }\n+        });\n+        return;\n+      }\n+\n+      // For child windows, check parent window's auth state\n+      if (isChildWindow && window.opener) {\n+        try {\n+          const parentAuthState = window.opener.localStorage.getItem('auth_state');\n+          if (parentAuthState) {\n+            const parsedState = JSON.parse(parentAuthState);\n+            if (parsedState.lastAuthState === 'SIGNED_IN') {\n+              logger.debug('Child window syncing with parent auth state', {\n+                source: 'useAuth',\n+                context: { parentState: parsedState.lastAuthState }\n+              });\n+              setIsAuthenticated(true);\n+              return;\n+            }\n+          }\n+        } catch (err) {\n+          logger.warn('Failed to check parent window auth state', {\n+            source: 'useAuth',\n+            context: { error: err }\n+          });\n+        }\n+      }\n+\n+      setIsAuthenticated(currentState === 'SIGNED_IN');\n+      lastAuthState.current = currentState;\n+      \n+      logger.info(`Auth state changed: ${currentState}`, {\n+        source: 'useAuth',\n+        context: { newState: currentState }\n+      });\n+    }, 500);\n+  }, []);\n+\n+  useEffect(() => {\n+    let mounted = true;\n+    \n+    const initialize = async () => {\n+      try {\n+        await authLoader.current.initialize();\n+        \n+        if (!mounted) return;\n+        \n+        const currentState = authLoader.current.getLastAuthState();\n+        if (currentState) {\n+          handleAuthChange(currentState as 'SIGNED_IN' | 'SIGNED_OUT', null);\n+        }\n+        \n+        setIsLoading(false);\n+      } catch (err) {\n+        logger.error('Auth initialization failed', {\n+          source: 'useAuth',\n+          context: { error: err }\n+        });\n+        if (mounted) {\n+          setIsLoading(false);\n+        }\n+      }\n+    };\n+\n+    const { data: { subscription } } = supabase.auth.onAuthStateChange((event: any, session: any) => {\n+      if (mounted) {\n+        handleAuthChange(event, session);\n+      }\n+    });\n+\n+    initialize();\n+\n+    return () => {\n+      mounted = false;\n+      subscription?.unsubscribe();\n+      if (stateChangeTimeout.current) {\n+        clearTimeout(stateChangeTimeout.current);\n+      }\n+    };\n+  }, [handleAuthChange]);\n+\n+  return {\n+    user: user ? {\n+      ...user,\n+      role: user.role || 'unknown'\n+    } : null,\n+    loading,\n+    changeRole,\n+    isTransitioning,\n+    login,\n+    logout,\n+    signUp,\n+    resetPassword,\n+    isAuthenticated,\n+    isLoading,\n+    sessionManager\n+  };\n+};\n+\n export default useAuth;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739388126394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,9 @@\n import { supabaseClient } from '../lib/supabaseClient';\n import { supabase } from '../lib/supabase';\n import { AuthLoader } from '../lib/auth/AuthLoader';\n import type { AuthError } from '@supabase/supabase-js';\n+import { sessionMonitor } from '@/lib/auth/SessionMonitor';\n \n interface LoginCredentials {\n   email: string;\n   password: string;\n@@ -378,116 +379,15 @@\n       }\n     }\n   };\n \n-  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\n-  const [isLoading, setIsLoading] = useState<boolean>(true);\n-  const authLoader = useRef<AuthLoader>(AuthLoader.getInstance());\n-  const stateChangeTimeout = useRef<NodeJS.Timeout | null>(null);\n-  const lastAuthState = useRef<string | null>(null);\n+  const [authState, setAuthState] = useState(sessionMonitor.getState());\n \n-  const handleAuthChange = useCallback(async (event: 'SIGNED_IN' | 'SIGNED_OUT', session: any) => {\n-    const currentState = event;\n-    \n-    // Prevent unnecessary state updates\n-    if (lastAuthState.current === currentState) {\n-      return;\n-    }\n-\n-    // Clear any pending state changes\n-    if (stateChangeTimeout.current) {\n-      clearTimeout(stateChangeTimeout.current);\n-    }\n-\n-    // Delay state change to prevent rapid toggles\n-    stateChangeTimeout.current = setTimeout(() => {\n-      const isChildWindow = authLoader.current.isChildWindowSession();\n-      \n-      // Don't allow child windows to become unauthenticated\n-      if (isChildWindow && currentState === 'SIGNED_OUT') {\n-        logger.debug('Child window maintaining authenticated state', {\n-          source: 'useAuth',\n-          context: { currentState, isChildWindow }\n-        });\n-        return;\n-      }\n-\n-      // For child windows, check parent window's auth state\n-      if (isChildWindow && window.opener) {\n-        try {\n-          const parentAuthState = window.opener.localStorage.getItem('auth_state');\n-          if (parentAuthState) {\n-            const parsedState = JSON.parse(parentAuthState);\n-            if (parsedState.lastAuthState === 'SIGNED_IN') {\n-              logger.debug('Child window syncing with parent auth state', {\n-                source: 'useAuth',\n-                context: { parentState: parsedState.lastAuthState }\n-              });\n-              setIsAuthenticated(true);\n-              return;\n-            }\n-          }\n-        } catch (err) {\n-          logger.warn('Failed to check parent window auth state', {\n-            source: 'useAuth',\n-            context: { error: err }\n-          });\n-        }\n-      }\n-\n-      setIsAuthenticated(currentState === 'SIGNED_IN');\n-      lastAuthState.current = currentState;\n-      \n-      logger.info(`Auth state changed: ${currentState}`, {\n-        source: 'useAuth',\n-        context: { newState: currentState }\n-      });\n-    }, 500);\n+  useEffect(() => {\n+    const unsubscribe = sessionMonitor.subscribeToStateUpdates(setAuthState);\n+    return () => unsubscribe();\n   }, []);\n \n-  useEffect(() => {\n-    let mounted = true;\n-    \n-    const initialize = async () => {\n-      try {\n-        await authLoader.current.initialize();\n-        \n-        if (!mounted) return;\n-        \n-        const currentState = authLoader.current.getLastAuthState();\n-        if (currentState) {\n-          handleAuthChange(currentState as 'SIGNED_IN' | 'SIGNED_OUT', null);\n-        }\n-        \n-        setIsLoading(false);\n-      } catch (err) {\n-        logger.error('Auth initialization failed', {\n-          source: 'useAuth',\n-          context: { error: err }\n-        });\n-        if (mounted) {\n-          setIsLoading(false);\n-        }\n-      }\n-    };\n-\n-    const { data: { subscription } } = supabase.auth.onAuthStateChange((event: any, session: any) => {\n-      if (mounted) {\n-        handleAuthChange(event, session);\n-      }\n-    });\n-\n-    initialize();\n-\n-    return () => {\n-      mounted = false;\n-      subscription?.unsubscribe();\n-      if (stateChangeTimeout.current) {\n-        clearTimeout(stateChangeTimeout.current);\n-      }\n-    };\n-  }, [handleAuthChange]);\n-\n   return {\n     user: user ? {\n       ...user,\n       role: user.role || 'unknown'\n@@ -498,10 +398,8 @@\n     login,\n     logout,\n     signUp,\n     resetPassword,\n-    isAuthenticated,\n-    isLoading,\n     sessionManager\n   };\n };\n \n"
                },
                {
                    "date": 1739388247916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,9 @@\n import { supabase } from '../lib/supabase';\n import { AuthLoader } from '../lib/auth/AuthLoader';\n import type { AuthError } from '@supabase/supabase-js';\n import { sessionMonitor } from '@/lib/auth/SessionMonitor';\n+import type { SessionState } from '@/lib/auth/sessionManager';\n \n interface LoginCredentials {\n   email: string;\n   password: string;\n"
                },
                {
                    "date": 1739388372769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,379 +29,381 @@\n interface ResetPasswordCredentials {\n   email: string;\n }\n \n-export const useAuth = () => {\n-  const context = useContext(AuthContext);\n-  \n-  if (!context) {\n-    console.warn('useAuth must be used within an AuthProvider');\n-    return { user: null, loading: false };\n-  }\n+export namespace Auth {\n+  export const useAuth = () => {\n+    const context = useContext(AuthContext);\n+    \n+    if (!context) {\n+      console.warn('useAuth must be used within an AuthProvider');\n+      return { user: null, loading: false };\n+    }\n \n-  const { user, loading } = context;\n+    const { user, loading } = context;\n \n-  // Add debug logging\n-  console.log('Auth Context:', {\n-    hasUser: !!user,\n-    userRole: user?.role,\n-    userId: user?.id,\n-    isLoading: loading,\n-    fullUser: user // Log the full user object for debugging\n-  });\n+    // Add debug logging\n+    console.log('Auth Context:', {\n+      hasUser: !!user,\n+      userRole: user?.role,\n+      userId: user?.id,\n+      isLoading: loading,\n+      fullUser: user // Log the full user object for debugging\n+    });\n \n-  const { isTransitioning } = useRoleStore();\n-  const navigate = useNavigate();\n-  const queryClient = new QueryClient();\n-  const location = useLocation();\n-  \n-  // Add loading state check\n-  useEffect(() => {\n-    if (loading) {\n-      logger.info('Auth loading state active', {\n-        source: 'useAuth',\n-        context: { loading }\n-      });\n-    }\n-  }, [loading]);\n+    const { isTransitioning } = useRoleStore();\n+    const navigate = useNavigate();\n+    const queryClient = new QueryClient();\n+    const location = useLocation();\n+    \n+    // Add loading state check\n+    useEffect(() => {\n+      if (loading) {\n+        logger.info('Auth loading state active', {\n+          source: 'useAuth',\n+          context: { loading }\n+        });\n+      }\n+    }, [loading]);\n \n-  // Auto-refresh session when it's about to expire\n-  useEffect(() => {\n-    if (!user) return;\n-    const refreshInterval = setInterval(async () => {\n+    // Auto-refresh session when it's about to expire\n+    useEffect(() => {\n+      if (!user) return;\n+      const refreshInterval = setInterval(async () => {\n+        try {\n+          await sessionManager.refreshSession();\n+        } catch (err) {\n+          logger.error('Failed to refresh session', {\n+            source: 'useAuth',\n+            context: { error: err }\n+          });\n+        }\n+      }, 4 * 60 * 1000); // Check every 4 minutes\n+      \n+      return () => {\n+        if (refreshInterval) {\n+          clearInterval(refreshInterval);\n+        }\n+      };\n+    }, [user]);\n+\n+    useEffect(() => {\n+      if (user) {\n+        logger.debug('Auth state check on route change', {\n+          source: 'useAuth',\n+          context: {\n+            role: user.role,\n+            path: location.pathname,\n+            permissions: ROLE_PERMISSIONS[user.role]?.permissions\n+          }\n+        });\n+      }\n+    }, [user, location.pathname]);\n+\n+    const changeRole = async (newRole: UserRole): Promise<void> => {\n+      if (!context.user || isTransitioning) return;\n+\n       try {\n-        await sessionManager.refreshSession();\n+        await roleTransitionManager.transitionRole(newRole);\n+        \n+        // Clear cache and refetch with new role\n+        queryClient.clear();\n+        await queryClient.resetQueries();\n+        \n+        // Update context user\n+        context.setUser({\n+          ...context.user,\n+          role: newRole\n+        });\n+\n+        // Navigate to home with fresh data\n+        navigate('/', { replace: true });\n       } catch (err) {\n-        logger.error('Failed to refresh session', {\n+        logger.error('Failed to change role', {\n           source: 'useAuth',\n           context: { error: err }\n         });\n+        throw err;\n       }\n-    }, 4 * 60 * 1000); // Check every 4 minutes\n-    \n-    return () => {\n-      if (refreshInterval) {\n-        clearInterval(refreshInterval);\n-      }\n     };\n-  }, [user]);\n \n-  useEffect(() => {\n-    if (user) {\n-      logger.debug('Auth state check on route change', {\n-        source: 'useAuth',\n-        context: {\n-          role: user.role,\n-          path: location.pathname,\n-          permissions: ROLE_PERMISSIONS[user.role]?.permissions\n+    const login = async (credentials: LoginCredentials) => {\n+      try {\n+        console.log('[Auth] Attempting login:', {\n+          email: credentials.email,\n+          timestamp: new Date().toISOString()\n+        });\n+        \n+        const { data, error } = await supabaseClient.auth.signInWithPassword({\n+          email: credentials.email,\n+          password: credentials.password,\n+        });\n+\n+        if (error) {\n+          console.error('[Auth] Supabase login error:', {\n+            message: error.message,\n+            status: error.status,\n+            name: error.name,\n+            timestamp: new Date().toISOString()\n+          });\n+          \n+          // Provide more specific error messages\n+          if (error.message.includes('Invalid login credentials')) {\n+            throw new Error('Invalid email or password. Please check your credentials and try again.');\n+          }\n+          \n+          logger.error('Login failed', {\n+            context: { \n+              error,\n+              credentials: { email: credentials.email }\n+            },\n+            source: 'useAuth'\n+          });\n+          throw new Error(error.message);\n         }\n-      });\n-    }\n-  }, [user, location.pathname]);\n \n-  const changeRole = async (newRole: UserRole): Promise<void> => {\n-    if (!context.user || isTransitioning) return;\n+        console.log('[Auth] Login response:', {\n+          hasUser: !!data.user,\n+          userId: data.user?.id,\n+          userEmail: data.user?.email,\n+          metadata: data.user?.user_metadata,\n+          timestamp: new Date().toISOString()\n+        });\n \n-    try {\n-      await roleTransitionManager.transitionRole(newRole);\n-      \n-      // Clear cache and refetch with new role\n-      queryClient.clear();\n-      await queryClient.resetQueries();\n-      \n-      // Update context user\n-      context.setUser({\n-        ...context.user,\n-        role: newRole\n-      });\n+        if (!data.user) {\n+          throw new Error('Login successful but user data is missing');\n+        }\n \n-      // Navigate to home with fresh data\n-      navigate('/', { replace: true });\n-    } catch (err) {\n-      logger.error('Failed to change role', {\n-        source: 'useAuth',\n-        context: { error: err }\n-      });\n-      throw err;\n-    }\n-  };\n+        // Map Supabase user to our user format\n+        const mappedUser = {\n+          id: data.user.id,\n+          email: data.user.email!,\n+          name: data.user.user_metadata?.name || data.user.email!.split('@')[0],\n+          role: data.user.user_metadata?.role || 'student',\n+          photoUrl: data.user.user_metadata?.avatar_url,\n+        };\n \n-  const login = async (credentials: LoginCredentials) => {\n-    try {\n-      console.log('[Auth] Attempting login:', {\n-        email: credentials.email,\n-        timestamp: new Date().toISOString()\n-      });\n-      \n-      const { data, error } = await supabaseClient.auth.signInWithPassword({\n-        email: credentials.email,\n-        password: credentials.password,\n-      });\n+        console.log('[Auth] Mapped user:', mappedUser);\n \n-      if (error) {\n-        console.error('[Auth] Supabase login error:', {\n+        context.setUser(mappedUser);\n+        return { user: mappedUser };\n+      } catch (error) {\n+        const errorDetails = error instanceof Error ? {\n           message: error.message,\n-          status: error.status,\n           name: error.name,\n+          stack: error.stack\n+        } : error;\n+\n+        console.error('[Auth] Login error details:', {\n+          error: errorDetails,\n           timestamp: new Date().toISOString()\n         });\n-        \n-        // Provide more specific error messages\n-        if (error.message.includes('Invalid login credentials')) {\n-          throw new Error('Invalid email or password. Please check your credentials and try again.');\n-        }\n-        \n+\n         logger.error('Login failed', {\n           context: { \n-            error,\n+            error: errorDetails,\n             credentials: { email: credentials.email }\n           },\n           source: 'useAuth'\n         });\n-        throw new Error(error.message);\n+\n+        if (error instanceof Error) {\n+          throw error;\n+        } else {\n+          throw new Error('An unexpected error occurred. Please try again.');\n+        }\n       }\n+    };\n \n-      console.log('[Auth] Login response:', {\n-        hasUser: !!data.user,\n-        userId: data.user?.id,\n-        userEmail: data.user?.email,\n-        metadata: data.user?.user_metadata,\n-        timestamp: new Date().toISOString()\n-      });\n+    const logout = async () => {\n+      try {\n+        const { error } = await supabaseClient.auth.signOut();\n+        \n+        if (error) {\n+          throw error;\n+        }\n \n-      if (!data.user) {\n-        throw new Error('Login successful but user data is missing');\n+        context.setUser(null);\n+        queryClient.clear();\n+        navigate('/login');\n+      } catch (error) {\n+        logger.error('Logout failed', {\n+          context: { error },\n+          source: 'useAuth'\n+        });\n+        throw error;\n       }\n+    };\n \n-      // Map Supabase user to our user format\n-      const mappedUser = {\n-        id: data.user.id,\n-        email: data.user.email!,\n-        name: data.user.user_metadata?.name || data.user.email!.split('@')[0],\n-        role: data.user.user_metadata?.role || 'student',\n-        photoUrl: data.user.user_metadata?.avatar_url,\n-      };\n+    const signUp = async (credentials: SignUpCredentials) => {\n+      try {\n+        console.log('[Auth] Attempting signup:', {\n+          email: credentials.email,\n+          timestamp: new Date().toISOString()\n+        });\n+        \n+        const { data, error } = await supabaseClient.auth.signUp({\n+          email: credentials.email,\n+          password: credentials.password,\n+          options: {\n+            data: {\n+              name: credentials.name || credentials.email.split('@')[0],\n+              role: 'student'\n+            }\n+          }\n+        });\n \n-      console.log('[Auth] Mapped user:', mappedUser);\n+        if (error) {\n+          console.error('[Auth] Supabase signup error:', {\n+            message: error.message,\n+            status: error.status,\n+            name: error.name,\n+            timestamp: new Date().toISOString()\n+          });\n+          \n+          logger.error('Signup failed', {\n+            context: { \n+              error,\n+              credentials: { email: credentials.email }\n+            },\n+            source: 'useAuth'\n+          });\n+          throw new Error(error.message);\n+        }\n \n-      context.setUser(mappedUser);\n-      return { user: mappedUser };\n-    } catch (error) {\n-      const errorDetails = error instanceof Error ? {\n-        message: error.message,\n-        name: error.name,\n-        stack: error.stack\n-      } : error;\n+        console.log('[Auth] Signup response:', {\n+          hasUser: !!data.user,\n+          userId: data.user?.id,\n+          userEmail: data.user?.email,\n+          metadata: data.user?.user_metadata,\n+          timestamp: new Date().toISOString()\n+        });\n \n-      console.error('[Auth] Login error details:', {\n\\ No newline at end of file\n-        error: errorDetails,\n-        timestamp: new Date().toISOString()\n-      });\n+        if (!data.user) {\n+          throw new Error('Signup successful but user data is missing');\n+        }\n \n-      logger.error('Login failed', {\n-        context: { \n-          error: errorDetails,\n-          credentials: { email: credentials.email }\n-        },\n-        source: 'useAuth'\n-      });\n+        // Map Supabase user to our user format\n+        const mappedUser = {\n+          id: data.user.id,\n+          email: data.user.email!,\n+          name: data.user.user_metadata?.name || data.user.email!.split('@')[0],\n+          role: data.user.user_metadata?.role || 'student',\n+          photoUrl: data.user.user_metadata?.avatar_url,\n+        };\n \n-      if (error instanceof Error) {\n-        throw error;\n-      } else {\n-        throw new Error('An unexpected error occurred. Please try again.');\n-      }\n-    }\n-  };\n+        console.log('[Auth] Mapped user:', mappedUser);\n \n-  const logout = async () => {\n-    try {\n-      const { error } = await supabaseClient.auth.signOut();\n-      \n-      if (error) {\n-        throw error;\n-      }\n-\n-      context.setUser(null);\n-      queryClient.clear();\n-      navigate('/login');\n-    } catch (error) {\n-      logger.error('Logout failed', {\n-        context: { error },\n-        source: 'useAuth'\n-      });\n-      throw error;\n-    }\n-  };\n-\n-  const signUp = async (credentials: SignUpCredentials) => {\n-    try {\n-      console.log('[Auth] Attempting signup:', {\n-        email: credentials.email,\n-        timestamp: new Date().toISOString()\n-      });\n-      \n-      const { data, error } = await supabaseClient.auth.signUp({\n-        email: credentials.email,\n-        password: credentials.password,\n-        options: {\n-          data: {\n-            name: credentials.name || credentials.email.split('@')[0],\n-            role: 'student'\n-          }\n-        }\n-      });\n-\n-      if (error) {\n-        console.error('[Auth] Supabase signup error:', {\n+        context.setUser(mappedUser);\n+        return { user: mappedUser };\n+      } catch (error) {\n+        const errorDetails = error instanceof Error ? {\n           message: error.message,\n-          status: error.status,\n           name: error.name,\n+          stack: error.stack\n+        } : error;\n+\n+        console.error('[Auth] Signup error details:', {\n+          error: errorDetails,\n           timestamp: new Date().toISOString()\n         });\n-        \n+\n         logger.error('Signup failed', {\n           context: { \n-            error,\n+            error: errorDetails,\n             credentials: { email: credentials.email }\n           },\n           source: 'useAuth'\n         });\n-        throw new Error(error.message);\n-      }\n \n-      console.log('[Auth] Signup response:', {\n-        hasUser: !!data.user,\n-        userId: data.user?.id,\n-        userEmail: data.user?.email,\n-        metadata: data.user?.user_metadata,\n-        timestamp: new Date().toISOString()\n-      });\n-\n-      if (!data.user) {\n-        throw new Error('Signup successful but user data is missing');\n+        if (error instanceof Error) {\n+          throw error;\n+        } else {\n+          throw new Error('An unexpected error occurred during signup. Please try again.');\n+        }\n       }\n+    };\n \n-      // Map Supabase user to our user format\n-      const mappedUser = {\n-        id: data.user.id,\n-        email: data.user.email!,\n-        name: data.user.user_metadata?.name || data.user.email!.split('@')[0],\n-        role: data.user.user_metadata?.role || 'student',\n-        photoUrl: data.user.user_metadata?.avatar_url,\n-      };\n+    const resetPassword = async (credentials: ResetPasswordCredentials) => {\n+      try {\n+        console.log('[Auth] Attempting password reset:', {\n+          email: credentials.email,\n+          timestamp: new Date().toISOString()\n+        });\n+        \n+        const { data, error } = await supabaseClient.auth.resetPasswordForEmail(\n+          credentials.email,\n+          { redirectTo: `${window.location.origin}/reset-password` }\n+        );\n \n-      console.log('[Auth] Mapped user:', mappedUser);\n+        if (error) {\n+          console.error('[Auth] Supabase password reset error:', {\n+            message: error.message,\n+            status: error.status,\n+            name: error.name,\n+            timestamp: new Date().toISOString()\n+          });\n+          \n+          logger.error('Password reset failed', {\n+            context: { \n+              error,\n+              credentials: { email: credentials.email }\n+            },\n+            source: 'useAuth'\n+          });\n+          throw new Error(error.message);\n+        }\n \n-      context.setUser(mappedUser);\n-      return { user: mappedUser };\n-    } catch (error) {\n-      const errorDetails = error instanceof Error ? {\n-        message: error.message,\n-        name: error.name,\n-        stack: error.stack\n-      } : error;\n+        return data;\n+      } catch (error) {\n+        const errorDetails = error instanceof Error ? {\n+          message: error.message,\n+          name: error.name,\n+          stack: error.stack\n+        } : error;\n \n-      console.error('[Auth] Signup error details:', {\n-        error: errorDetails,\n-        timestamp: new Date().toISOString()\n-      });\n-\n-      logger.error('Signup failed', {\n-        context: { \n+        console.error('[Auth] Password reset error details:', {\n           error: errorDetails,\n-          credentials: { email: credentials.email }\n-        },\n-        source: 'useAuth'\n-      });\n-\n-      if (error instanceof Error) {\n-        throw error;\n-      } else {\n-        throw new Error('An unexpected error occurred during signup. Please try again.');\n-      }\n-    }\n-  };\n-\n-  const resetPassword = async (credentials: ResetPasswordCredentials) => {\n-    try {\n-      console.log('[Auth] Attempting password reset:', {\n-        email: credentials.email,\n-        timestamp: new Date().toISOString()\n-      });\n-      \n-      const { data, error } = await supabaseClient.auth.resetPasswordForEmail(\n-        credentials.email,\n-        { redirectTo: `${window.location.origin}/reset-password` }\n-      );\n-\n-      if (error) {\n-        console.error('[Auth] Supabase password reset error:', {\n-          message: error.message,\n-          status: error.status,\n-          name: error.name,\n           timestamp: new Date().toISOString()\n         });\n-        \n+\n         logger.error('Password reset failed', {\n           context: { \n-            error,\n+            error: errorDetails,\n             credentials: { email: credentials.email }\n           },\n           source: 'useAuth'\n         });\n-        throw new Error(error.message);\n-      }\n \n-      return data;\n-    } catch (error) {\n-      const errorDetails = error instanceof Error ? {\n-        message: error.message,\n-        name: error.name,\n-        stack: error.stack\n-      } : error;\n-\n-      console.error('[Auth] Password reset error details:', {\n-        error: errorDetails,\n-        timestamp: new Date().toISOString()\n-      });\n-\n-      logger.error('Password reset failed', {\n-        context: { \n-          error: errorDetails,\n-          credentials: { email: credentials.email }\n-        },\n-        source: 'useAuth'\n-      });\n-\n-      if (error instanceof Error) {\n-        throw error;\n-      } else {\n-        throw new Error('An unexpected error occurred during password reset. Please try again.');\n+        if (error instanceof Error) {\n+          throw error;\n+        } else {\n+          throw new Error('An unexpected error occurred during password reset. Please try again.');\n+        }\n       }\n-    }\n-  };\n+    };\n \n-  const [authState, setAuthState] = useState(sessionMonitor.getState());\n+    const [authState, setAuthState] = useState(sessionMonitor.getState());\n \n-  useEffect(() => {\n-    const unsubscribe = sessionMonitor.subscribeToStateUpdates(setAuthState);\n-    return () => unsubscribe();\n-  }, []);\n+    useEffect(() => {\n+      const unsubscribe = sessionMonitor.subscribeToStateUpdates(setAuthState);\n+      return () => unsubscribe();\n+    }, []);\n \n-  return {\n-    user: user ? {\n-      ...user,\n-      role: user.role || 'unknown'\n-    } : null,\n-    loading,\n-    changeRole,\n-    isTransitioning,\n-    login,\n-    logout,\n-    signUp,\n-    resetPassword,\n-    sessionManager\n-  };\n-};\n+    return {\n+      user: user ? {\n+        ...user,\n+        role: user.role || 'unknown'\n+      } : null,\n+      loading,\n+      changeRole,\n+      isTransitioning,\n+      login,\n+      logout,\n+      signUp,\n+      resetPassword,\n+      sessionManager\n+    };\n+  }\n+}\n \n-export default useAuth;\n+export default Auth.useAuth;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739388412834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -403,7 +403,11 @@\n       resetPassword,\n       sessionManager\n     };\n   }\n+\n+  public async checkAndRefreshSession() {\n+    // ... method implementation ...\n+  }\n }\n \n export default Auth.useAuth;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739388429570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -403,11 +403,7 @@\n       resetPassword,\n       sessionManager\n     };\n   }\n-\n-  public async checkAndRefreshSession() {\n-    // ... method implementation ...\n-  }\n }\n \n export default Auth.useAuth;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739388448402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -388,8 +388,12 @@\n       const unsubscribe = sessionMonitor.subscribeToStateUpdates(setAuthState);\n       return () => unsubscribe();\n     }, []);\n \n+    public async checkAndRefreshSession() {\n+      // ... existing implementation\n+    }\n+\n     return {\n       user: user ? {\n         ...user,\n         role: user.role || 'unknown'\n"
                },
                {
                    "date": 1739388459373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -388,12 +388,8 @@\n       const unsubscribe = sessionMonitor.subscribeToStateUpdates(setAuthState);\n       return () => unsubscribe();\n     }, []);\n \n-    public async checkAndRefreshSession() {\n-      // ... existing implementation\n-    }\n-\n     return {\n       user: user ? {\n         ...user,\n         role: user.role || 'unknown'\n"
                },
                {
                    "date": 1739388481384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -388,8 +388,12 @@\n       const unsubscribe = sessionMonitor.subscribeToStateUpdates(setAuthState);\n       return () => unsubscribe();\n     }, []);\n \n+    public async checkAndRefreshSession(): Promise<void> {\n+      // ... existing code\n+    }\n+\n     return {\n       user: user ? {\n         ...user,\n         role: user.role || 'unknown'\n"
                },
                {
                    "date": 1739388502104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -389,10 +389,11 @@\n       return () => unsubscribe();\n     }, []);\n \n     public async checkAndRefreshSession(): Promise<void> {\n+      \n       // ... existing code\n-    }\n+    };\n \n     return {\n       user: user ? {\n         ...user,\n"
                },
                {
                    "date": 1739388511071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -388,11 +388,17 @@\n       const unsubscribe = sessionMonitor.subscribeToStateUpdates(setAuthState);\n       return () => unsubscribe();\n     }, []);\n \n-    public async checkAndRefreshSession(): Promise<void> {\n-      \n-      // ... existing code\n+    const checkAndRefreshSession = async (): Promise<void> => {\n+      try {\n+        await sessionManager.checkAndRefreshSession();\n+      } catch (error) {\n+        logger.error('Failed to check and refresh session', {\n+          context: { error },\n+          source: 'useAuth'\n+        });\n+      }\n     };\n \n     return {\n       user: user ? {\n"
                },
                {
                    "date": 1739389295862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,392 +29,388 @@\n interface ResetPasswordCredentials {\n   email: string;\n }\n \n-export namespace Auth {\n-  export const useAuth = () => {\n-    const context = useContext(AuthContext);\n-    \n-    if (!context) {\n-      console.warn('useAuth must be used within an AuthProvider');\n-      return { user: null, loading: false };\n-    }\n+export function useAuth() {\n+  const context = useContext(AuthContext);\n+  \n+  if (!context) {\n+    console.warn('useAuth must be used within an AuthProvider');\n+    return { user: null, loading: false };\n+  }\n \n-    const { user, loading } = context;\n+  const { user, loading } = context;\n \n-    // Add debug logging\n-    console.log('Auth Context:', {\n-      hasUser: !!user,\n-      userRole: user?.role,\n-      userId: user?.id,\n-      isLoading: loading,\n-      fullUser: user // Log the full user object for debugging\n-    });\n+  // Add debug logging\n+  console.log('Auth Context:', {\n+    hasUser: !!user,\n+    userRole: user?.role,\n+    userId: user?.id,\n+    isLoading: loading,\n+    fullUser: user // Log the full user object for debugging\n+  });\n \n-    const { isTransitioning } = useRoleStore();\n-    const navigate = useNavigate();\n-    const queryClient = new QueryClient();\n-    const location = useLocation();\n-    \n-    // Add loading state check\n-    useEffect(() => {\n-      if (loading) {\n-        logger.info('Auth loading state active', {\n-          source: 'useAuth',\n-          context: { loading }\n-        });\n-      }\n-    }, [loading]);\n+  const { isTransitioning } = useRoleStore();\n+  const navigate = useNavigate();\n+  const queryClient = new QueryClient();\n+  const location = useLocation();\n+  \n+  // Add loading state check\n+  useEffect(() => {\n+    if (loading) {\n+      logger.info('Auth loading state active', {\n+        source: 'useAuth',\n+        context: { loading }\n+      });\n+    }\n+  }, [loading]);\n \n-    // Auto-refresh session when it's about to expire\n-    useEffect(() => {\n-      if (!user) return;\n-      const refreshInterval = setInterval(async () => {\n-        try {\n-          await sessionManager.refreshSession();\n-        } catch (err) {\n-          logger.error('Failed to refresh session', {\n-            source: 'useAuth',\n-            context: { error: err }\n-          });\n-        }\n-      }, 4 * 60 * 1000); // Check every 4 minutes\n-      \n-      return () => {\n-        if (refreshInterval) {\n-          clearInterval(refreshInterval);\n-        }\n-      };\n-    }, [user]);\n-\n-    useEffect(() => {\n-      if (user) {\n-        logger.debug('Auth state check on route change', {\n-          source: 'useAuth',\n-          context: {\n-            role: user.role,\n-            path: location.pathname,\n-            permissions: ROLE_PERMISSIONS[user.role]?.permissions\n-          }\n-        });\n-      }\n-    }, [user, location.pathname]);\n-\n-    const changeRole = async (newRole: UserRole): Promise<void> => {\n-      if (!context.user || isTransitioning) return;\n-\n+  // Auto-refresh session when it's about to expire\n+  useEffect(() => {\n+    if (!user) return;\n+    const refreshInterval = setInterval(async () => {\n       try {\n-        await roleTransitionManager.transitionRole(newRole);\n-        \n-        // Clear cache and refetch with new role\n-        queryClient.clear();\n-        await queryClient.resetQueries();\n-        \n-        // Update context user\n-        context.setUser({\n-          ...context.user,\n-          role: newRole\n-        });\n-\n-        // Navigate to home with fresh data\n-        navigate('/', { replace: true });\n+        await sessionManager.refreshSession();\n       } catch (err) {\n-        logger.error('Failed to change role', {\n+        logger.error('Failed to refresh session', {\n           source: 'useAuth',\n           context: { error: err }\n         });\n-        throw err;\n       }\n+    }, 4 * 60 * 1000); // Check every 4 minutes\n+    \n+    return () => {\n+      if (refreshInterval) {\n+        clearInterval(refreshInterval);\n+      }\n     };\n+  }, [user]);\n \n-    const login = async (credentials: LoginCredentials) => {\n-      try {\n-        console.log('[Auth] Attempting login:', {\n-          email: credentials.email,\n-          timestamp: new Date().toISOString()\n-        });\n-        \n-        const { data, error } = await supabaseClient.auth.signInWithPassword({\n-          email: credentials.email,\n-          password: credentials.password,\n-        });\n-\n-        if (error) {\n-          console.error('[Auth] Supabase login error:', {\n-            message: error.message,\n-            status: error.status,\n-            name: error.name,\n-            timestamp: new Date().toISOString()\n-          });\n-          \n-          // Provide more specific error messages\n-          if (error.message.includes('Invalid login credentials')) {\n-            throw new Error('Invalid email or password. Please check your credentials and try again.');\n-          }\n-          \n-          logger.error('Login failed', {\n-            context: { \n-              error,\n-              credentials: { email: credentials.email }\n-            },\n-            source: 'useAuth'\n-          });\n-          throw new Error(error.message);\n+  useEffect(() => {\n+    if (user) {\n+      logger.debug('Auth state check on route change', {\n+        source: 'useAuth',\n+        context: {\n+          role: user.role,\n+          path: location.pathname,\n+          permissions: ROLE_PERMISSIONS[user.role]?.permissions\n         }\n+      });\n+    }\n+  }, [user, location.pathname]);\n \n-        console.log('[Auth] Login response:', {\n-          hasUser: !!data.user,\n-          userId: data.user?.id,\n-          userEmail: data.user?.email,\n-          metadata: data.user?.user_metadata,\n-          timestamp: new Date().toISOString()\n-        });\n+  const changeRole = async (newRole: UserRole): Promise<void> => {\n+    if (!context.user || isTransitioning) return;\n \n-        if (!data.user) {\n-          throw new Error('Login successful but user data is missing');\n-        }\n+    try {\n+      await roleTransitionManager.transitionRole(newRole);\n+      \n+      // Clear cache and refetch with new role\n+      queryClient.clear();\n+      await queryClient.resetQueries();\n+      \n+      // Update context user\n+      context.setUser({\n+        ...context.user,\n+        role: newRole\n+      });\n \n-        // Map Supabase user to our user format\n-        const mappedUser = {\n-          id: data.user.id,\n-          email: data.user.email!,\n-          name: data.user.user_metadata?.name || data.user.email!.split('@')[0],\n-          role: data.user.user_metadata?.role || 'student',\n-          photoUrl: data.user.user_metadata?.avatar_url,\n-        };\n+      // Navigate to home with fresh data\n+      navigate('/', { replace: true });\n+    } catch (err) {\n+      logger.error('Failed to change role', {\n+        source: 'useAuth',\n+        context: { error: err }\n+      });\n+      throw err;\n+    }\n+  };\n \n-        console.log('[Auth] Mapped user:', mappedUser);\n+  const login = async (credentials: LoginCredentials) => {\n+    try {\n+      console.log('[Auth] Attempting login:', {\n+        email: credentials.email,\n+        timestamp: new Date().toISOString()\n+      });\n+      \n+      const { data, error } = await supabaseClient.auth.signInWithPassword({\n+        email: credentials.email,\n+        password: credentials.password,\n+      });\n \n-        context.setUser(mappedUser);\n-        return { user: mappedUser };\n-      } catch (error) {\n-        const errorDetails = error instanceof Error ? {\n+      if (error) {\n+        console.error('[Auth] Supabase login error:', {\n           message: error.message,\n+          status: error.status,\n           name: error.name,\n-          stack: error.stack\n-        } : error;\n-\n-        console.error('[Auth] Login error details:', {\n-          error: errorDetails,\n           timestamp: new Date().toISOString()\n         });\n-\n+        \n+        // Provide more specific error messages\n+        if (error.message.includes('Invalid login credentials')) {\n+          throw new Error('Invalid email or password. Please check your credentials and try again.');\n+        }\n+        \n         logger.error('Login failed', {\n           context: { \n-            error: errorDetails,\n+            error,\n             credentials: { email: credentials.email }\n           },\n           source: 'useAuth'\n         });\n+        throw new Error(error.message);\n+      }\n \n-        if (error instanceof Error) {\n-          throw error;\n-        } else {\n-          throw new Error('An unexpected error occurred. Please try again.');\n-        }\n+      console.log('[Auth] Login response:', {\n+        hasUser: !!data.user,\n+        userId: data.user?.id,\n+        userEmail: data.user?.email,\n+        metadata: data.user?.user_metadata,\n+        timestamp: new Date().toISOString()\n+      });\n+\n+      if (!data.user) {\n+        throw new Error('Login successful but user data is missing');\n       }\n-    };\n \n-    const logout = async () => {\n-      try {\n-        const { error } = await supabaseClient.auth.signOut();\n-        \n-        if (error) {\n-          throw error;\n-        }\n+      // Map Supabase user to our user format\n+      const mappedUser = {\n+        id: data.user.id,\n+        email: data.user.email!,\n+        name: data.user.user_metadata?.name || data.user.email!.split('@')[0],\n+        role: data.user.user_metadata?.role || 'student',\n+        photoUrl: data.user.user_metadata?.avatar_url,\n+      };\n \n-        context.setUser(null);\n-        queryClient.clear();\n-        navigate('/login');\n-      } catch (error) {\n-        logger.error('Logout failed', {\n-          context: { error },\n-          source: 'useAuth'\n-        });\n+      console.log('[Auth] Mapped user:', mappedUser);\n+\n+      context.setUser(mappedUser);\n+      return { user: mappedUser };\n+    } catch (error) {\n+      const errorDetails = error instanceof Error ? {\n+        message: error.message,\n+        name: error.name,\n+        stack: error.stack\n+      } : error;\n+\n+      console.error('[Auth] Login error details:', {\n+        error: errorDetails,\n+        timestamp: new Date().toISOString()\n+      });\n+\n+      logger.error('Login failed', {\n+        context: { \n+          error: errorDetails,\n+          credentials: { email: credentials.email }\n+        },\n+        source: 'useAuth'\n+      });\n+\n+      if (error instanceof Error) {\n         throw error;\n+      } else {\n+        throw new Error('An unexpected error occurred. Please try again.');\n       }\n-    };\n+    }\n+  };\n \n-    const signUp = async (credentials: SignUpCredentials) => {\n-      try {\n-        console.log('[Auth] Attempting signup:', {\n-          email: credentials.email,\n-          timestamp: new Date().toISOString()\n-        });\n-        \n-        const { data, error } = await supabaseClient.auth.signUp({\n-          email: credentials.email,\n-          password: credentials.password,\n-          options: {\n-            data: {\n-              name: credentials.name || credentials.email.split('@')[0],\n-              role: 'student'\n-            }\n-          }\n-        });\n+  const logout = async () => {\n+    try {\n+      const { error } = await supabaseClient.auth.signOut();\n+      \n+      if (error) {\n+        throw error;\n+      }\n \n-        if (error) {\n-          console.error('[Auth] Supabase signup error:', {\n-            message: error.message,\n-            status: error.status,\n-            name: error.name,\n-            timestamp: new Date().toISOString()\n-          });\n-          \n-          logger.error('Signup failed', {\n-            context: { \n-              error,\n\\ No newline at end of file\n-              credentials: { email: credentials.email }\n-            },\n-            source: 'useAuth'\n-          });\n-          throw new Error(error.message);\n-        }\n+      context.setUser(null);\n+      queryClient.clear();\n+      navigate('/login');\n+    } catch (error) {\n+      logger.error('Logout failed', {\n+        context: { error },\n+        source: 'useAuth'\n+      });\n+      throw error;\n+    }\n+  };\n \n-        console.log('[Auth] Signup response:', {\n-          hasUser: !!data.user,\n-          userId: data.user?.id,\n-          userEmail: data.user?.email,\n-          metadata: data.user?.user_metadata,\n-          timestamp: new Date().toISOString()\n-        });\n-\n-        if (!data.user) {\n-          throw new Error('Signup successful but user data is missing');\n+  const signUp = async (credentials: SignUpCredentials) => {\n+    try {\n+      console.log('[Auth] Attempting signup:', {\n+        email: credentials.email,\n+        timestamp: new Date().toISOString()\n+      });\n+      \n+      const { data, error } = await supabaseClient.auth.signUp({\n+        email: credentials.email,\n+        password: credentials.password,\n+        options: {\n+          data: {\n+            name: credentials.name || credentials.email.split('@')[0],\n+            role: 'student'\n+          }\n         }\n+      });\n \n-        // Map Supabase user to our user format\n-        const mappedUser = {\n-          id: data.user.id,\n-          email: data.user.email!,\n-          name: data.user.user_metadata?.name || data.user.email!.split('@')[0],\n-          role: data.user.user_metadata?.role || 'student',\n-          photoUrl: data.user.user_metadata?.avatar_url,\n-        };\n-\n-        console.log('[Auth] Mapped user:', mappedUser);\n-\n-        context.setUser(mappedUser);\n-        return { user: mappedUser };\n-      } catch (error) {\n-        const errorDetails = error instanceof Error ? {\n+      if (error) {\n+        console.error('[Auth] Supabase signup error:', {\n           message: error.message,\n+          status: error.status,\n           name: error.name,\n-          stack: error.stack\n-        } : error;\n-\n-        console.error('[Auth] Signup error details:', {\n-          error: errorDetails,\n           timestamp: new Date().toISOString()\n         });\n-\n+        \n         logger.error('Signup failed', {\n           context: { \n-            error: errorDetails,\n+            error,\n             credentials: { email: credentials.email }\n           },\n           source: 'useAuth'\n         });\n+        throw new Error(error.message);\n+      }\n \n-        if (error instanceof Error) {\n-          throw error;\n-        } else {\n-          throw new Error('An unexpected error occurred during signup. Please try again.');\n-        }\n+      console.log('[Auth] Signup response:', {\n+        hasUser: !!data.user,\n+        userId: data.user?.id,\n+        userEmail: data.user?.email,\n+        metadata: data.user?.user_metadata,\n+        timestamp: new Date().toISOString()\n+      });\n+\n+      if (!data.user) {\n+        throw new Error('Signup successful but user data is missing');\n       }\n-    };\n \n-    const resetPassword = async (credentials: ResetPasswordCredentials) => {\n-      try {\n-        console.log('[Auth] Attempting password reset:', {\n-          email: credentials.email,\n-          timestamp: new Date().toISOString()\n-        });\n-        \n-        const { data, error } = await supabaseClient.auth.resetPasswordForEmail(\n-          credentials.email,\n-          { redirectTo: `${window.location.origin}/reset-password` }\n-        );\n+      // Map Supabase user to our user format\n+      const mappedUser = {\n+        id: data.user.id,\n+        email: data.user.email!,\n+        name: data.user.user_metadata?.name || data.user.email!.split('@')[0],\n+        role: data.user.user_metadata?.role || 'student',\n+        photoUrl: data.user.user_metadata?.avatar_url,\n+      };\n \n-        if (error) {\n-          console.error('[Auth] Supabase password reset error:', {\n-            message: error.message,\n-            status: error.status,\n-            name: error.name,\n-            timestamp: new Date().toISOString()\n-          });\n-          \n-          logger.error('Password reset failed', {\n-            context: { \n-              error,\n-              credentials: { email: credentials.email }\n-            },\n-            source: 'useAuth'\n-          });\n-          throw new Error(error.message);\n-        }\n+      console.log('[Auth] Mapped user:', mappedUser);\n \n-        return data;\n-      } catch (error) {\n-        const errorDetails = error instanceof Error ? {\n+      context.setUser(mappedUser);\n+      return { user: mappedUser };\n+    } catch (error) {\n+      const errorDetails = error instanceof Error ? {\n+        message: error.message,\n+        name: error.name,\n+        stack: error.stack\n+      } : error;\n+\n+      console.error('[Auth] Signup error details:', {\n+        error: errorDetails,\n+        timestamp: new Date().toISOString()\n+      });\n+\n+      logger.error('Signup failed', {\n+        context: { \n+          error: errorDetails,\n+          credentials: { email: credentials.email }\n+        },\n+        source: 'useAuth'\n+      });\n+\n+      if (error instanceof Error) {\n+        throw error;\n+      } else {\n+        throw new Error('An unexpected error occurred during signup. Please try again.');\n+      }\n+    }\n+  };\n+\n+  const resetPassword = async (credentials: ResetPasswordCredentials) => {\n+    try {\n+      console.log('[Auth] Attempting password reset:', {\n+        email: credentials.email,\n+        timestamp: new Date().toISOString()\n+      });\n+      \n+      const { data, error } = await supabaseClient.auth.resetPasswordForEmail(\n+        credentials.email,\n+        { redirectTo: `${window.location.origin}/reset-password` }\n+      );\n+\n+      if (error) {\n+        console.error('[Auth] Supabase password reset error:', {\n           message: error.message,\n+          status: error.status,\n           name: error.name,\n-          stack: error.stack\n-        } : error;\n-\n-        console.error('[Auth] Password reset error details:', {\n-          error: errorDetails,\n           timestamp: new Date().toISOString()\n         });\n-\n+        \n         logger.error('Password reset failed', {\n           context: { \n-            error: errorDetails,\n+            error,\n             credentials: { email: credentials.email }\n           },\n           source: 'useAuth'\n         });\n-\n-        if (error instanceof Error) {\n-          throw error;\n-        } else {\n-          throw new Error('An unexpected error occurred during password reset. Please try again.');\n-        }\n+        throw new Error(error.message);\n       }\n-    };\n \n-    const [authState, setAuthState] = useState(sessionMonitor.getState());\n+      return data;\n+    } catch (error) {\n+      const errorDetails = error instanceof Error ? {\n+        message: error.message,\n+        name: error.name,\n+        stack: error.stack\n+      } : error;\n \n-    useEffect(() => {\n-      const unsubscribe = sessionMonitor.subscribeToStateUpdates(setAuthState);\n-      return () => unsubscribe();\n-    }, []);\n+      console.error('[Auth] Password reset error details:', {\n+        error: errorDetails,\n+        timestamp: new Date().toISOString()\n+      });\n \n-    const checkAndRefreshSession = async (): Promise<void> => {\n-      try {\n-        await sessionManager.checkAndRefreshSession();\n-      } catch (error) {\n-        logger.error('Failed to check and refresh session', {\n-          context: { error },\n-          source: 'useAuth'\n-        });\n+      logger.error('Password reset failed', {\n+        context: { \n+          error: errorDetails,\n+          credentials: { email: credentials.email }\n+        },\n+        source: 'useAuth'\n+      });\n+\n+      if (error instanceof Error) {\n+        throw error;\n+      } else {\n+        throw new Error('An unexpected error occurred during password reset. Please try again.');\n       }\n-    };\n+    }\n+  };\n \n-    return {\n-      user: user ? {\n-        ...user,\n-        role: user.role || 'unknown'\n-      } : null,\n-      loading,\n-      changeRole,\n-      isTransitioning,\n-      login,\n-      logout,\n-      signUp,\n-      resetPassword,\n-      sessionManager\n-    };\n-  }\n-}\n+  const [authState, setAuthState] = useState(sessionMonitor.getState());\n \n-export default Auth.useAuth;\n+  useEffect(() => {\n+    const unsubscribe = sessionMonitor.subscribeToStateUpdates(setAuthState);\n+    return () => unsubscribe();\n+  }, []);\n+\n+  const checkAndRefreshSession = async (): Promise<void> => {\n+    try {\n+      await sessionManager.checkAndRefreshSession();\n+    } catch (error) {\n+      logger.error('Failed to check and refresh session', {\n+        context: { error },\n+        source: 'useAuth'\n+      });\n+    }\n+  };\n+\n+  return {\n+    user: user ? {\n+      ...user,\n+      role: user.role || 'unknown'\n+    } : null,\n+    loading,\n+    changeRole,\n+    isTransitioning,\n+    login,\n+    logout,\n+    signUp,\n+    resetPassword,\n+    sessionManager\n+  };\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739391578757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,16 +39,19 @@\n   }\n \n   const { user, loading } = context;\n \n-  // Add debug logging\n-  console.log('Auth Context:', {\n-    hasUser: !!user,\n-    userRole: user?.role,\n-    userId: user?.id,\n-    isLoading: loading,\n-    fullUser: user // Log the full user object for debugging\n-  });\n+  // Only log in development and reduce frequency\n+  if (process.env.NODE_ENV === 'development') {\n+    useEffect(() => {\n+      logger.debug('Auth Context:', {\n+        hasUser: !!user,\n+        userRole: user?.role,\n+        userId: user?.id,\n+        isLoading: loading\n+      });\n+    }, [user?.id, user?.role, loading]); // Only log on important changes\n+  }\n \n   const { isTransitioning } = useRoleStore();\n   const navigate = useNavigate();\n   const queryClient = new QueryClient();\n"
                },
                {
                    "date": 1739391614649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,13 +42,15 @@\n \n   // Only log in development and reduce frequency\n   if (process.env.NODE_ENV === 'development') {\n     useEffect(() => {\n-      logger.debug('Auth Context:', {\n-        hasUser: !!user,\n-        userRole: user?.role,\n-        userId: user?.id,\n-        isLoading: loading\n+      logger.debug('Auth Context', {\n+        context: {\n+          hasUser: !!user,\n+          userRole: user?.role,\n+          userId: user?.id,\n+          isLoading: loading\n+        }\n       });\n     }, [user?.id, user?.role, loading]); // Only log on important changes\n   }\n \n"
                },
                {
                    "date": 1739391696037,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,8 +43,9 @@\n   // Only log in development and reduce frequency\n   if (process.env.NODE_ENV === 'development') {\n     useEffect(() => {\n       logger.debug('Auth Context', {\n+        source: 'useAuth',\n         context: {\n           hasUser: !!user,\n           userRole: user?.role,\n           userId: user?.id,\n"
                },
                {
                    "date": 1739391758740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,9 @@\n import { AuthLoader } from '../lib/auth/AuthLoader';\n import type { AuthError } from '@supabase/supabase-js';\n import { sessionMonitor } from '@/lib/auth/SessionMonitor';\n import type { SessionState } from '@/lib/auth/sessionManager';\n+import { debounce } from 'lodash';\n \n interface LoginCredentials {\n   email: string;\n   password: string;\n@@ -39,11 +40,11 @@\n   }\n \n   const { user, loading } = context;\n \n-  // Only log in development and reduce frequency\n+  // Only log in development and reduce frequency with debounce\n   if (process.env.NODE_ENV === 'development') {\n-    useEffect(() => {\n+    const debouncedLog = debounce(() => {\n       logger.debug('Auth Context', {\n         source: 'useAuth',\n         context: {\n           hasUser: !!user,\n@@ -51,9 +52,14 @@\n           userId: user?.id,\n           isLoading: loading\n         }\n       });\n-    }, [user?.id, user?.role, loading]); // Only log on important changes\n+    }, 1000); // Log at most once per second\n+\n+    useEffect(() => {\n+      debouncedLog();\n+      return () => debouncedLog.cancel();\n+    }, [user?.id, user?.role, loading]);\n   }\n \n   const { isTransitioning } = useRoleStore();\n   const navigate = useNavigate();\n"
                },
                {
                    "date": 1739391885353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n \"use client\";\n \n-import { useContext, useEffect, useState, useCallback, useRef } from 'react';\n+import { useContext, useEffect, useState, useCallback, useRef, useMemo } from 'react';\n import { AuthContext } from '../contexts/AuthContext';\n import { useNavigate, useLocation } from 'react-router-dom';\n import { QueryClient } from '@tanstack/query-core';\n import { roleTransitionManager } from '../lib/auth/RoleTransitionManager';\n@@ -42,24 +42,32 @@\n   const { user, loading } = context;\n \n   // Only log in development and reduce frequency with debounce\n   if (process.env.NODE_ENV === 'development') {\n-    const debouncedLog = debounce(() => {\n-      logger.debug('Auth Context', {\n-        source: 'useAuth',\n-        context: {\n-          hasUser: !!user,\n-          userRole: user?.role,\n-          userId: user?.id,\n-          isLoading: loading\n-        }\n-      });\n-    }, 1000); // Log at most once per second\n+    const debouncedLog = useMemo(() => {\n+      let timeoutId: number;\n+      \n+      const debounced = () => {\n+        clearTimeout(timeoutId);\n+        timeoutId = setTimeout(() => {\n+          logger.debug('Auth Context', {\n+            source: 'useAuth',\n+            context: {\n+              hasUser: !!user,\n+              userRole: user?.role,\n+              userId: user?.id,\n+              isLoading: loading\n+            }\n+          });\n+        }, 1000);\n+      };\n \n+      return debounced;\n+    }, []); // Empty deps since we want this to be stable\n+\n     useEffect(() => {\n       debouncedLog();\n-      return () => debouncedLog.cancel();\n-    }, [user?.id, user?.role, loading]);\n+    }, [user?.id, user?.role, loading, debouncedLog]);\n   }\n \n   const { isTransitioning } = useRoleStore();\n   const navigate = useNavigate();\n"
                },
                {
                    "date": 1739391925865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n \n   // Only log in development and reduce frequency with debounce\n   if (process.env.NODE_ENV === 'development') {\n     const debouncedLog = useMemo(() => {\n-      let timeoutId: number;\n+      let timeoutId: ReturnType<typeof setTimeout>;\n       \n       const debounced = () => {\n         clearTimeout(timeoutId);\n         timeoutId = setTimeout(() => {\n@@ -61,9 +61,9 @@\n         }, 1000);\n       };\n \n       return debounced;\n-    }, []); // Empty deps since we want this to be stable\n+    }, []);\n \n     useEffect(() => {\n       debouncedLog();\n     }, [user?.id, user?.role, loading, debouncedLog]);\n"
                },
                {
                    "date": 1739392036052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n import type { AuthError } from '@supabase/supabase-js';\n import { sessionMonitor } from '@/lib/auth/SessionMonitor';\n import type { SessionState } from '@/lib/auth/sessionManager';\n import { debounce } from 'lodash';\n+import { useDebounce } from '@/hooks/useDebounce';\n \n interface LoginCredentials {\n   email: string;\n   password: string;\n@@ -42,32 +43,25 @@\n   const { user, loading } = context;\n \n   // Only log in development and reduce frequency with debounce\n   if (process.env.NODE_ENV === 'development') {\n-    const debouncedLog = useMemo(() => {\n-      let timeoutId: ReturnType<typeof setTimeout>;\n-      \n-      const debounced = () => {\n-        clearTimeout(timeoutId);\n-        timeoutId = setTimeout(() => {\n-          logger.debug('Auth Context', {\n-            source: 'useAuth',\n-            context: {\n-              hasUser: !!user,\n-              userRole: user?.role,\n-              userId: user?.id,\n-              isLoading: loading\n-            }\n-          });\n-        }, 1000);\n-      };\n+    const debouncedLog = useCallback(() => {\n+      logger.debug('Auth Context', {\n+        source: 'useAuth',\n+        context: {\n+          hasUser: !!user,\n+          userRole: user?.role,\n+          userId: user?.id,\n+          isLoading: loading\n+        }\n+      });\n+    }, [user?.id, user?.role, loading]);\n \n-      return debounced;\n-    }, []);\n+    const debouncedValue = useDebounce(debouncedLog, 1000);\n \n     useEffect(() => {\n-      debouncedLog();\n-    }, [user?.id, user?.role, loading, debouncedLog]);\n+      debouncedValue();\n+    }, [debouncedValue]);\n   }\n \n   const { isTransitioning } = useRoleStore();\n   const navigate = useNavigate();\n"
                },
                {
                    "date": 1739392096379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n   const { user, loading } = context;\n \n   // Only log in development and reduce frequency with debounce\n   if (process.env.NODE_ENV === 'development') {\n-    const debouncedLog = useCallback(() => {\n+    const logAuthContext = useCallback(() => {\n       logger.debug('Auth Context', {\n         source: 'useAuth',\n         context: {\n           hasUser: !!user,\n@@ -55,13 +55,12 @@\n         }\n       });\n     }, [user?.id, user?.role, loading]);\n \n-    const debouncedValue = useDebounce(debouncedLog, 1000);\n-\n     useEffect(() => {\n-      debouncedValue();\n-    }, [debouncedValue]);\n+      const timer = setTimeout(logAuthContext, 1000);\n+      return () => clearTimeout(timer);\n+    }, [logAuthContext]);\n   }\n \n   const { isTransitioning } = useRoleStore();\n   const navigate = useNavigate();\n"
                },
                {
                    "date": 1739392271361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,24 +43,29 @@\n   const { user, loading } = context;\n \n   // Only log in development and reduce frequency with debounce\n   if (process.env.NODE_ENV === 'development') {\n-    const logAuthContext = useCallback(() => {\n-      logger.debug('Auth Context', {\n-        source: 'useAuth',\n-        context: {\n-          hasUser: !!user,\n-          userRole: user?.role,\n-          userId: user?.id,\n-          isLoading: loading\n-        }\n-      });\n+    const prevValuesRef = useRef({ id: user?.id, role: user?.role, loading });\n+    \n+    useEffect(() => {\n+      const prevValues = prevValuesRef.current;\n+      if (\n+        prevValues.id !== user?.id || \n+        prevValues.role !== user?.role || \n+        prevValues.loading !== loading\n+      ) {\n+        logger.debug('Auth Context', {\n+          source: 'useAuth',\n+          context: {\n+            hasUser: !!user,\n+            userRole: user?.role,\n+            userId: user?.id,\n+            isLoading: loading\n+          }\n+        });\n+        prevValuesRef.current = { id: user?.id, role: user?.role, loading };\n+      }\n     }, [user?.id, user?.role, loading]);\n-\n-    useEffect(() => {\n-      const timer = setTimeout(logAuthContext, 1000);\n-      return () => clearTimeout(timer);\n-    }, [logAuthContext]);\n   }\n \n   const { isTransitioning } = useRoleStore();\n   const navigate = useNavigate();\n"
                },
                {
                    "date": 1739392323823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,29 +43,39 @@\n   const { user, loading } = context;\n \n   // Only log in development and reduce frequency with debounce\n   if (process.env.NODE_ENV === 'development') {\n-    const prevValuesRef = useRef({ id: user?.id, role: user?.role, loading });\n+    const prevValuesRef = useRef({\n+      id: null as string | null,\n+      role: null as string | null,\n+      loading: false\n+    });\n     \n     useEffect(() => {\n       const prevValues = prevValuesRef.current;\n+      const currentValues = {\n+        id: user?.id || null,\n+        role: user?.role || null,\n+        loading\n+      };\n+\n       if (\n-        prevValues.id !== user?.id || \n-        prevValues.role !== user?.role || \n-        prevValues.loading !== loading\n+        prevValues.id !== currentValues.id || \n+        prevValues.role !== currentValues.role || \n+        prevValues.loading !== currentValues.loading\n       ) {\n         logger.debug('Auth Context', {\n           source: 'useAuth',\n           context: {\n             hasUser: !!user,\n-            userRole: user?.role,\n-            userId: user?.id,\n+            userRole: user?.role || null,\n+            userId: user?.id || null,\n             isLoading: loading\n           }\n         });\n-        prevValuesRef.current = { id: user?.id, role: user?.role, loading };\n+        prevValuesRef.current = currentValues;\n       }\n-    }, [user?.id, user?.role, loading]);\n+    }, [user, loading]);\n   }\n \n   const { isTransitioning } = useRoleStore();\n   const navigate = useNavigate();\n"
                },
                {
                    "date": 1739392920615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,420 @@\n+\"use client\";\n+\n+import { useContext, useEffect, useState, useCallback, useRef } from 'react';\n+import { AuthContext } from '../contexts/AuthContext';\n+import { useNavigate, useLocation } from 'react-router-dom';\n+import { QueryClient } from '@tanstack/query-core';\n+import { roleTransitionManager } from '../lib/auth/RoleTransitionManager';\n+import { useRoleStore } from '../lib/auth/store';\n+import { logger } from '../lib/logger';\n+import { ROLE_PERMISSIONS } from '../types/roles';\n+import { sessionManager } from '../lib/auth/sessionManager';\n+import type { UserRole } from '../types/roles';\n+import { supabaseClient } from '../lib/supabaseClient';\n+import { supabase } from '../lib/supabase';\n+import { AuthLoader } from '../lib/auth/AuthLoader';\n+import type { AuthError } from '@supabase/supabase-js';\n+import { sessionMonitor } from '@/lib/auth/SessionMonitor';\n+import type { SessionState } from '@/lib/auth/sessionManager';\n+\n+interface LoginCredentials {\n+  email: string;\n+  password: string;\n+}\n+\n+interface SignUpCredentials extends LoginCredentials {\n+  name?: string;\n+}\n+\n+interface ResetPasswordCredentials {\n+  email: string;\n+}\n+\n+export namespace Auth {\n+  export const useAuth = () => {\n+    const context = useContext(AuthContext);\n+    \n+    if (!context) {\n+      console.warn('useAuth must be used within an AuthProvider');\n+      return { user: null, loading: false };\n+    }\n+\n+    const { user, loading } = context;\n+\n+    // Add debug logging\n+    console.log('Auth Context:', {\n+      hasUser: !!user,\n+      userRole: user?.role,\n+      userId: user?.id,\n+      isLoading: loading,\n+      fullUser: user // Log the full user object for debugging\n+    });\n+\n+    const { isTransitioning } = useRoleStore();\n+    const navigate = useNavigate();\n+    const queryClient = new QueryClient();\n+    const location = useLocation();\n+    \n+    // Add loading state check\n+    useEffect(() => {\n+      if (loading) {\n+        logger.info('Auth loading state active', {\n+          source: 'useAuth',\n+          context: { loading }\n+        });\n+      }\n+    }, [loading]);\n+\n+    // Auto-refresh session when it's about to expire\n+    useEffect(() => {\n+      if (!user) return;\n+      const refreshInterval = setInterval(async () => {\n+        try {\n+          await sessionManager.refreshSession();\n+        } catch (err) {\n+          logger.error('Failed to refresh session', {\n+            source: 'useAuth',\n+            context: { error: err }\n+          });\n+        }\n+      }, 4 * 60 * 1000); // Check every 4 minutes\n+      \n+      return () => {\n+        if (refreshInterval) {\n+          clearInterval(refreshInterval);\n+        }\n+      };\n+    }, [user]);\n+\n+    useEffect(() => {\n+      if (user) {\n+        logger.debug('Auth state check on route change', {\n+          source: 'useAuth',\n+          context: {\n+            role: user.role,\n+            path: location.pathname,\n+            permissions: ROLE_PERMISSIONS[user.role]?.permissions\n+          }\n+        });\n+      }\n+    }, [user, location.pathname]);\n+\n+    const changeRole = async (newRole: UserRole): Promise<void> => {\n+      if (!context.user || isTransitioning) return;\n+\n+      try {\n+        await roleTransitionManager.transitionRole(newRole);\n+        \n+        // Clear cache and refetch with new role\n+        queryClient.clear();\n+        await queryClient.resetQueries();\n+        \n+        // Update context user\n+        context.setUser({\n+          ...context.user,\n+          role: newRole\n+        });\n+\n+        // Navigate to home with fresh data\n+        navigate('/', { replace: true });\n+      } catch (err) {\n+        logger.error('Failed to change role', {\n+          source: 'useAuth',\n+          context: { error: err }\n+        });\n+        throw err;\n+      }\n+    };\n+\n+    const login = async (credentials: LoginCredentials) => {\n+      try {\n+        console.log('[Auth] Attempting login:', {\n+          email: credentials.email,\n+          timestamp: new Date().toISOString()\n+        });\n+        \n+        const { data, error } = await supabaseClient.auth.signInWithPassword({\n+          email: credentials.email,\n+          password: credentials.password,\n+        });\n+\n+        if (error) {\n+          console.error('[Auth] Supabase login error:', {\n+            message: error.message,\n+            status: error.status,\n+            name: error.name,\n+            timestamp: new Date().toISOString()\n+          });\n+          \n+          // Provide more specific error messages\n+          if (error.message.includes('Invalid login credentials')) {\n+            throw new Error('Invalid email or password. Please check your credentials and try again.');\n+          }\n+          \n+          logger.error('Login failed', {\n+            context: { \n+              error,\n+              credentials: { email: credentials.email }\n+            },\n+            source: 'useAuth'\n+          });\n+          throw new Error(error.message);\n+        }\n+\n+        console.log('[Auth] Login response:', {\n+          hasUser: !!data.user,\n+          userId: data.user?.id,\n+          userEmail: data.user?.email,\n+          metadata: data.user?.user_metadata,\n+          timestamp: new Date().toISOString()\n+        });\n+\n+        if (!data.user) {\n+          throw new Error('Login successful but user data is missing');\n+        }\n+\n+        // Map Supabase user to our user format\n+        const mappedUser = {\n+          id: data.user.id,\n+          email: data.user.email!,\n+          name: data.user.user_metadata?.name || data.user.email!.split('@')[0],\n+          role: data.user.user_metadata?.role || 'student',\n+          photoUrl: data.user.user_metadata?.avatar_url,\n+        };\n+\n+        console.log('[Auth] Mapped user:', mappedUser);\n+\n+        context.setUser(mappedUser);\n+        return { user: mappedUser };\n+      } catch (error) {\n+        const errorDetails = error instanceof Error ? {\n+          message: error.message,\n+          name: error.name,\n+          stack: error.stack\n+        } : error;\n+\n+        console.error('[Auth] Login error details:', {\n+          error: errorDetails,\n+          timestamp: new Date().toISOString()\n+        });\n+\n+        logger.error('Login failed', {\n+          context: { \n+            error: errorDetails,\n+            credentials: { email: credentials.email }\n+          },\n+          source: 'useAuth'\n+        });\n+\n+        if (error instanceof Error) {\n+          throw error;\n+        } else {\n+          throw new Error('An unexpected error occurred. Please try again.');\n+        }\n+      }\n+    };\n+\n+    const logout = async () => {\n+      try {\n+        const { error } = await supabaseClient.auth.signOut();\n+        \n+        if (error) {\n+          throw error;\n+        }\n+\n+        context.setUser(null);\n+        queryClient.clear();\n+        navigate('/login');\n+      } catch (error) {\n+        logger.error('Logout failed', {\n+          context: { error },\n+          source: 'useAuth'\n+        });\n+        throw error;\n+      }\n+    };\n+\n+    const signUp = async (credentials: SignUpCredentials) => {\n+      try {\n+        console.log('[Auth] Attempting signup:', {\n+          email: credentials.email,\n+          timestamp: new Date().toISOString()\n+        });\n+        \n+        const { data, error } = await supabaseClient.auth.signUp({\n+          email: credentials.email,\n+          password: credentials.password,\n+          options: {\n+            data: {\n+              name: credentials.name || credentials.email.split('@')[0],\n+              role: 'student'\n+            }\n+          }\n+        });\n+\n+        if (error) {\n+          console.error('[Auth] Supabase signup error:', {\n+            message: error.message,\n+            status: error.status,\n+            name: error.name,\n+            timestamp: new Date().toISOString()\n+          });\n+          \n+          logger.error('Signup failed', {\n+            context: { \n+              error,\n+              credentials: { email: credentials.email }\n+            },\n+            source: 'useAuth'\n+          });\n+          throw new Error(error.message);\n+        }\n+\n+        console.log('[Auth] Signup response:', {\n+          hasUser: !!data.user,\n+          userId: data.user?.id,\n+          userEmail: data.user?.email,\n+          metadata: data.user?.user_metadata,\n+          timestamp: new Date().toISOString()\n+        });\n+\n+        if (!data.user) {\n+          throw new Error('Signup successful but user data is missing');\n+        }\n+\n+        // Map Supabase user to our user format\n+        const mappedUser = {\n+          id: data.user.id,\n+          email: data.user.email!,\n+          name: data.user.user_metadata?.name || data.user.email!.split('@')[0],\n+          role: data.user.user_metadata?.role || 'student',\n+          photoUrl: data.user.user_metadata?.avatar_url,\n+        };\n+\n+        console.log('[Auth] Mapped user:', mappedUser);\n+\n+        context.setUser(mappedUser);\n+        return { user: mappedUser };\n+      } catch (error) {\n+        const errorDetails = error instanceof Error ? {\n+          message: error.message,\n+          name: error.name,\n+          stack: error.stack\n+        } : error;\n+\n+        console.error('[Auth] Signup error details:', {\n+          error: errorDetails,\n+          timestamp: new Date().toISOString()\n+        });\n+\n+        logger.error('Signup failed', {\n+          context: { \n+            error: errorDetails,\n+            credentials: { email: credentials.email }\n+          },\n+          source: 'useAuth'\n+        });\n+\n+        if (error instanceof Error) {\n+          throw error;\n+        } else {\n+          throw new Error('An unexpected error occurred during signup. Please try again.');\n+        }\n+      }\n+    };\n+\n+    const resetPassword = async (credentials: ResetPasswordCredentials) => {\n+      try {\n+        console.log('[Auth] Attempting password reset:', {\n+          email: credentials.email,\n+          timestamp: new Date().toISOString()\n+        });\n+        \n+        const { data, error } = await supabaseClient.auth.resetPasswordForEmail(\n+          credentials.email,\n+          { redirectTo: `${window.location.origin}/reset-password` }\n+        );\n+\n+        if (error) {\n+          console.error('[Auth] Supabase password reset error:', {\n+            message: error.message,\n+            status: error.status,\n+            name: error.name,\n+            timestamp: new Date().toISOString()\n+          });\n+          \n+          logger.error('Password reset failed', {\n+            context: { \n+              error,\n+              credentials: { email: credentials.email }\n+            },\n+            source: 'useAuth'\n+          });\n+          throw new Error(error.message);\n+        }\n+\n+        return data;\n+      } catch (error) {\n+        const errorDetails = error instanceof Error ? {\n+          message: error.message,\n+          name: error.name,\n+          stack: error.stack\n+        } : error;\n+\n+        console.error('[Auth] Password reset error details:', {\n+          error: errorDetails,\n+          timestamp: new Date().toISOString()\n+        });\n+\n+        logger.error('Password reset failed', {\n+          context: { \n+            error: errorDetails,\n+            credentials: { email: credentials.email }\n+          },\n+          source: 'useAuth'\n+        });\n+\n+        if (error instanceof Error) {\n+          throw error;\n+        } else {\n+          throw new Error('An unexpected error occurred during password reset. Please try again.');\n+        }\n+      }\n+    };\n+\n+    const [authState, setAuthState] = useState(sessionMonitor.getState());\n+\n+    useEffect(() => {\n+      const unsubscribe = sessionMonitor.subscribeToStateUpdates(setAuthState);\n+      return () => unsubscribe();\n+    }, []);\n+\n+    const checkAndRefreshSession = async (): Promise<void> => {\n+      try {\n+        await sessionManager.checkAndRefreshSession();\n+      } catch (error) {\n+        logger.error('Failed to check and refresh session', {\n+          context: { error },\n+          source: 'useAuth'\n+        });\n+      }\n+    };\n+\n+    return {\n+      user: user ? {\n+        ...user,\n+        role: user.role || 'unknown'\n+      } : null,\n+      loading,\n+      changeRole,\n+      isTransitioning,\n+      login,\n+      logout,\n+      signUp,\n+      resetPassword,\n+      sessionManager\n+    };\n+  }\n+}\n+\n+export default Auth.useAuth;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739393007588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,430 +29,8 @@\n interface ResetPasswordCredentials {\n   email: string;\n }\n \n-export namespace Auth {\n-  export const useAuth = () => {\n-    const context = useContext(AuthContext);\n-    \n-    if (!context) {\n-      console.warn('useAuth must be used within an AuthProvider');\n-      return { user: null, loading: false };\n-    }\n-\n-    const { user, loading } = context;\n-\n-    // Add debug logging\n-    console.log('Auth Context:', {\n-      hasUser: !!user,\n-      userRole: user?.role,\n-      userId: user?.id,\n-      isLoading: loading,\n-      fullUser: user // Log the full user object for debugging\n-    });\n-\n-    const { isTransitioning } = useRoleStore();\n-    const navigate = useNavigate();\n-    const queryClient = new QueryClient();\n-    const location = useLocation();\n-    \n-    // Add loading state check\n-    useEffect(() => {\n-      if (loading) {\n-        logger.info('Auth loading state active', {\n-          source: 'useAuth',\n-          context: { loading }\n-        });\n-      }\n-    }, [loading]);\n-\n-    // Auto-refresh session when it's about to expire\n-    useEffect(() => {\n-      if (!user) return;\n-      const refreshInterval = setInterval(async () => {\n-        try {\n-          await sessionManager.refreshSession();\n-        } catch (err) {\n-          logger.error('Failed to refresh session', {\n-            source: 'useAuth',\n-            context: { error: err }\n-          });\n-        }\n-      }, 4 * 60 * 1000); // Check every 4 minutes\n-      \n-      return () => {\n-        if (refreshInterval) {\n-          clearInterval(refreshInterval);\n-        }\n-      };\n-    }, [user]);\n-\n-    useEffect(() => {\n-      if (user) {\n-        logger.debug('Auth state check on route change', {\n-          source: 'useAuth',\n-          context: {\n-            role: user.role,\n-            path: location.pathname,\n-            permissions: ROLE_PERMISSIONS[user.role]?.permissions\n-          }\n-        });\n-      }\n-    }, [user, location.pathname]);\n-\n-    const changeRole = async (newRole: UserRole): Promise<void> => {\n-      if (!context.user || isTransitioning) return;\n-\n-      try {\n-        await roleTransitionManager.transitionRole(newRole);\n-        \n-        // Clear cache and refetch with new role\n-        queryClient.clear();\n-        await queryClient.resetQueries();\n-        \n-        // Update context user\n-        context.setUser({\n-          ...context.user,\n-          role: newRole\n-        });\n-\n-        // Navigate to home with fresh data\n-        navigate('/', { replace: true });\n-      } catch (err) {\n-        logger.error('Failed to change role', {\n-          source: 'useAuth',\n-          context: { error: err }\n-        });\n-        throw err;\n-      }\n-    };\n-\n-    const login = async (credentials: LoginCredentials) => {\n-      try {\n-        console.log('[Auth] Attempting login:', {\n-          email: credentials.email,\n-          timestamp: new Date().toISOString()\n-        });\n-        \n-        const { data, error } = await supabaseClient.auth.signInWithPassword({\n-          email: credentials.email,\n-          password: credentials.password,\n-        });\n-\n-        if (error) {\n-          console.error('[Auth] Supabase login error:', {\n-            message: error.message,\n-            status: error.status,\n-            name: error.name,\n-            timestamp: new Date().toISOString()\n-          });\n-          \n-          // Provide more specific error messages\n-          if (error.message.includes('Invalid login credentials')) {\n-            throw new Error('Invalid email or password. Please check your credentials and try again.');\n-          }\n-          \n-          logger.error('Login failed', {\n-            context: { \n-              error,\n-              credentials: { email: credentials.email }\n-            },\n-            source: 'useAuth'\n-          });\n-          throw new Error(error.message);\n-        }\n-\n-        console.log('[Auth] Login response:', {\n-          hasUser: !!data.user,\n-          userId: data.user?.id,\n-          userEmail: data.user?.email,\n-          metadata: data.user?.user_metadata,\n-          timestamp: new Date().toISOString()\n-        });\n-\n-        if (!data.user) {\n-          throw new Error('Login successful but user data is missing');\n-        }\n-\n-        // Map Supabase user to our user format\n-        const mappedUser = {\n-          id: data.user.id,\n-          email: data.user.email!,\n-          name: data.user.user_metadata?.name || data.user.email!.split('@')[0],\n-          role: data.user.user_metadata?.role || 'student',\n-          photoUrl: data.user.user_metadata?.avatar_url,\n-        };\n-\n-        console.log('[Auth] Mapped user:', mappedUser);\n-\n-        context.setUser(mappedUser);\n-        return { user: mappedUser };\n-      } catch (error) {\n-        const errorDetails = error instanceof Error ? {\n-          message: error.message,\n-          name: error.name,\n-          stack: error.stack\n-        } : error;\n-\n-        console.error('[Auth] Login error details:', {\n-          error: errorDetails,\n-          timestamp: new Date().toISOString()\n-        });\n-\n-        logger.error('Login failed', {\n-          context: { \n-            error: errorDetails,\n-            credentials: { email: credentials.email }\n-          },\n-          source: 'useAuth'\n-        });\n-\n-        if (error instanceof Error) {\n-          throw error;\n-        } else {\n-          throw new Error('An unexpected error occurred. Please try again.');\n-        }\n-      }\n-    };\n-\n-    const logout = async () => {\n-      try {\n-        const { error } = await supabaseClient.auth.signOut();\n-        \n-        if (error) {\n-          throw error;\n-        }\n-\n-        context.setUser(null);\n-        queryClient.clear();\n-        navigate('/login');\n-      } catch (error) {\n-        logger.error('Logout failed', {\n-          context: { error },\n-          source: 'useAuth'\n-        });\n-        throw error;\n-      }\n-    };\n-\n-    const signUp = async (credentials: SignUpCredentials) => {\n-      try {\n-        console.log('[Auth] Attempting signup:', {\n-          email: credentials.email,\n-          timestamp: new Date().toISOString()\n-        });\n-        \n-        const { data, error } = await supabaseClient.auth.signUp({\n-          email: credentials.email,\n-          password: credentials.password,\n-          options: {\n-            data: {\n-              name: credentials.name || credentials.email.split('@')[0],\n-              role: 'student'\n-            }\n-          }\n-        });\n-\n-        if (error) {\n-          console.error('[Auth] Supabase signup error:', {\n-            message: error.message,\n-            status: error.status,\n-            name: error.name,\n-            timestamp: new Date().toISOString()\n-          });\n-          \n-          logger.error('Signup failed', {\n-            context: { \n-              error,\n-              credentials: { email: credentials.email }\n-            },\n-            source: 'useAuth'\n-          });\n-          throw new Error(error.message);\n-        }\n-\n-        console.log('[Auth] Signup response:', {\n-          hasUser: !!data.user,\n-          userId: data.user?.id,\n-          userEmail: data.user?.email,\n-          metadata: data.user?.user_metadata,\n-          timestamp: new Date().toISOString()\n-        });\n-\n-        if (!data.user) {\n-          throw new Error('Signup successful but user data is missing');\n-        }\n-\n-        // Map Supabase user to our user format\n-        const mappedUser = {\n-          id: data.user.id,\n-          email: data.user.email!,\n-          name: data.user.user_metadata?.name || data.user.email!.split('@')[0],\n-          role: data.user.user_metadata?.role || 'student',\n-          photoUrl: data.user.user_metadata?.avatar_url,\n-        };\n-\n-        console.log('[Auth] Mapped user:', mappedUser);\n-\n-        context.setUser(mappedUser);\n-        return { user: mappedUser };\n-      } catch (error) {\n-        const errorDetails = error instanceof Error ? {\n-          message: error.message,\n-          name: error.name,\n-          stack: error.stack\n-        } : error;\n-\n-        console.error('[Auth] Signup error details:', {\n-          error: errorDetails,\n-          timestamp: new Date().toISOString()\n-        });\n-\n-        logger.error('Signup failed', {\n-          context: { \n-            error: errorDetails,\n-            credentials: { email: credentials.email }\n-          },\n-          source: 'useAuth'\n-        });\n-\n-        if (error instanceof Error) {\n-          throw error;\n-        } else {\n-          throw new Error('An unexpected error occurred during signup. Please try again.');\n-        }\n-      }\n-    };\n-\n-    const resetPassword = async (credentials: ResetPasswordCredentials) => {\n-      try {\n-        console.log('[Auth] Attempting password reset:', {\n-          email: credentials.email,\n-          timestamp: new Date().toISOString()\n-        });\n-        \n-        const { data, error } = await supabaseClient.auth.resetPasswordForEmail(\n-          credentials.email,\n-          { redirectTo: `${window.location.origin}/reset-password` }\n-        );\n-\n-        if (error) {\n-          console.error('[Auth] Supabase password reset error:', {\n-            message: error.message,\n-            status: error.status,\n-            name: error.name,\n-            timestamp: new Date().toISOString()\n-          });\n-          \n-          logger.error('Password reset failed', {\n-            context: { \n-              error,\n-              credentials: { email: credentials.email }\n-            },\n-            source: 'useAuth'\n-          });\n-          throw new Error(error.message);\n-        }\n-\n-        return data;\n-      } catch (error) {\n-        const errorDetails = error instanceof Error ? {\n-          message: error.message,\n-          name: error.name,\n-          stack: error.stack\n-        } : error;\n-\n-        console.error('[Auth] Password reset error details:', {\n-          error: errorDetails,\n-          timestamp: new Date().toISOString()\n-        });\n-\n-        logger.error('Password reset failed', {\n-          context: { \n-            error: errorDetails,\n-            credentials: { email: credentials.email }\n-          },\n-          source: 'useAuth'\n-        });\n-\n-        if (error instanceof Error) {\n-          throw error;\n-        } else {\n-          throw new Error('An unexpected error occurred during password reset. Please try again.');\n-        }\n-      }\n-    };\n-\n-    const [authState, setAuthState] = useState(sessionMonitor.getState());\n-\n-    useEffect(() => {\n-      const unsubscribe = sessionMonitor.subscribeToStateUpdates(setAuthState);\n-      return () => unsubscribe();\n-    }, []);\n-\n-    const checkAndRefreshSession = async (): Promise<void> => {\n-      try {\n-        await sessionManager.checkAndRefreshSession();\n-      } catch (error) {\n-        logger.error('Failed to check and refresh session', {\n-          context: { error },\n-          source: 'useAuth'\n-        });\n-      }\n-    };\n-\n-    return {\n-      user: user ? {\n-        ...user,\n-        role: user.role || 'unknown'\n-      } : null,\n-      loading,\n-      changeRole,\n-      isTransitioning,\n-      login,\n-      logout,\n-      signUp,\n-      resetPassword,\n-      sessionManager\n-    };\n-  }\n-}\n-\n-export default Auth.useAuth;\n-\"use client\";\n-\n-import { useContext, useEffect, useState, useCallback, useRef, useMemo } from 'react';\n-import { AuthContext } from '../contexts/AuthContext';\n-import { useNavigate, useLocation } from 'react-router-dom';\n-import { QueryClient } from '@tanstack/query-core';\n-import { roleTransitionManager } from '../lib/auth/RoleTransitionManager';\n-import { useRoleStore } from '../lib/auth/store';\n-import { logger } from '../lib/logger';\n-import { ROLE_PERMISSIONS } from '../types/roles';\n-import { sessionManager } from '../lib/auth/sessionManager';\n-import type { UserRole } from '../types/roles';\n-import { supabaseClient } from '../lib/supabaseClient';\n-import { supabase } from '../lib/supabase';\n-import { AuthLoader } from '../lib/auth/AuthLoader';\n-import type { AuthError } from '@supabase/supabase-js';\n-import { sessionMonitor } from '@/lib/auth/SessionMonitor';\n-import type { SessionState } from '@/lib/auth/sessionManager';\n-import { debounce } from 'lodash';\n-import { useDebounce } from '@/hooks/useDebounce';\n-\n-interface LoginCredentials {\n-  email: string;\n-  password: string;\n-}\n-\n-interface SignUpCredentials extends LoginCredentials {\n-  name?: string;\n-}\n-\n-interface ResetPasswordCredentials {\n-  email: string;\n-}\n-\n export function useAuth() {\n   const context = useContext(AuthContext);\n   \n   if (!context) {\n@@ -461,43 +39,17 @@\n   }\n \n   const { user, loading } = context;\n \n-  // Only log in development and reduce frequency with debounce\n-  if (process.env.NODE_ENV === 'development') {\n-    const prevValuesRef = useRef({\n-      id: null as string | null,\n-      role: null as string | null,\n-      loading: false\n-    });\n-    \n-    useEffect(() => {\n-      const prevValues = prevValuesRef.current;\n-      const currentValues = {\n-        id: user?.id || null,\n-        role: user?.role || null,\n-        loading\n-      };\n+  // Add debug logging\n+  console.log('Auth Context:', {\n+    hasUser: !!user,\n+    userRole: user?.role,\n+    userId: user?.id,\n+    isLoading: loading,\n+    fullUser: user // Log the full user object for debugging\n+  });\n \n-      if (\n-        prevValues.id !== currentValues.id || \n-        prevValues.role !== currentValues.role || \n-        prevValues.loading !== currentValues.loading\n-      ) {\n-        logger.debug('Auth Context', {\n-          source: 'useAuth',\n-          context: {\n-            hasUser: !!user,\n-            userRole: user?.role || null,\n-            userId: user?.id || null,\n-            isLoading: loading\n-          }\n-        });\n-        prevValuesRef.current = currentValues;\n-      }\n-    }, [user, loading]);\n-  }\n-\n   const { isTransitioning } = useRoleStore();\n   const navigate = useNavigate();\n   const queryClient = new QueryClient();\n   const location = useLocation();\n"
                }
            ],
            "date": 1738870357092,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport { useContext, useEffect } from 'react';\r\nimport { AuthContext } from '../contexts/AuthContext';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { QueryClient } from '@tanstack/query-core';\r\nimport { roleTransitionManager } from '../lib/auth/RoleTransitionManager';\r\nimport { useRoleStore } from '../lib/auth/store';\r\nimport { logger } from '../lib/logger';\r\nimport { ROLE_PERMISSIONS } from '../types/roles';\r\nimport { sessionManager } from '../lib/auth/sessionManager';\r\nimport type { UserRole } from '../types/roles';\r\nimport { supabaseClient } from '../lib/supabaseClient';\r\n\r\ninterface LoginCredentials {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\ninterface SignUpCredentials extends LoginCredentials {\r\n  name?: string;\r\n}\r\n\r\ninterface ResetPasswordCredentials {\r\n  email: string;\r\n  newPassword: string;\r\n  accessToken: string;\r\n}\r\n\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  \r\n  if (!context) {\r\n    console.warn('useAuth must be used within an AuthProvider');\r\n    return { user: null, loading: false };\r\n  }\r\n\r\n  const { user, loading } = context;\r\n\r\n  // Add debug logging\r\n  console.log('Auth Context:', {\r\n    hasUser: !!user,\r\n    userRole: user?.role,\r\n    userId: user?.id,\r\n    isLoading: loading,\r\n    fullUser: user // Log the full user object for debugging\r\n  });\r\n\r\n  const { isTransitioning } = useRoleStore();\r\n  const navigate = useNavigate();\r\n  const queryClient = new QueryClient();\r\n  const location = useLocation();\r\n  \r\n  // Add loading state check\r\n  useEffect(() => {\r\n    if (loading) {\r\n      logger.info('Auth loading state active', {\r\n        source: 'useAuth'\r\n      });\r\n    }\r\n  }, [loading]);\r\n\r\n  // Auto-refresh session when it's about to expire\r\n  useEffect(() => {\r\n    if (!user) return;\r\n    const refreshInterval = setInterval(async () => {\r\n      try {\r\n        await sessionManager.refreshSession();\r\n      } catch (err) {\r\n        logger.error('Failed to refresh session', {\r\n          context: { error: err },\r\n          source: 'useAuth'\r\n        });\r\n      }\r\n    }, 4 * 60 * 1000); // Check every 4 minutes\r\n    \r\n    return () => {\r\n      if (refreshInterval) {\r\n        clearInterval(refreshInterval);\r\n      }\r\n    };\r\n  }, [user]);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      logger.debug('Auth state check on route change', {\r\n        context: {\r\n          role: user.role,\r\n          path: location.pathname,\r\n          permissions: ROLE_PERMISSIONS[user.role]?.permissions\r\n        },\r\n        source: 'useAuth'\r\n      });\r\n    }\r\n  }, [user, location.pathname]);\r\n\r\n  const changeRole = async (newRole: UserRole): Promise<void> => {\r\n    if (!context.user || isTransitioning) return;\r\n\r\n    try {\r\n      // First try to get current session\r\n      const { data: { session: currentSession }, error: sessionError } = \r\n        await supabaseClient.auth.getSession();\r\n      \r\n      if (sessionError) {\r\n        logger.error('Failed to get current session', {\r\n          context: { error: sessionError },\r\n          source: 'useAuth'\r\n        });\r\n      }\r\n\r\n      // If no current session or error, try refresh\r\n      if (!currentSession || sessionError) {\r\n        const { data: { session: refreshedSession }, error: refreshError } = \r\n          await supabaseClient.auth.refreshSession();\r\n        \r\n        if (refreshError || !refreshedSession) {\r\n          logger.error('Session refresh failed', {\r\n            context: { error: refreshError },\r\n            source: 'useAuth'\r\n          });\r\n          // Redirect to login if session cannot be refreshed\r\n          await supabaseClient.auth.signOut();\r\n          navigate('/login');\r\n          return;\r\n        }\r\n\r\n        // Use refreshed session\r\n        await roleTransitionManager.transitionRole(newRole, refreshedSession);\r\n      } else {\r\n        // Use current session\r\n        await roleTransitionManager.transitionRole(newRole, currentSession);\r\n      }\r\n      \r\n      // Update context user with new role\r\n      context.setUser({\r\n        ...context.user,\r\n        role: newRole\r\n      });\r\n\r\n      // Clear cache and refetch with new role\r\n      queryClient.clear();\r\n      await queryClient.resetQueries();\r\n      \r\n      navigate('/', { replace: true });\r\n    } catch (err) {\r\n      logger.error('Failed to change role', {\r\n        context: { error: err },\r\n        source: 'useAuth'\r\n      });\r\n      \r\n      // Handle session errors specifically\r\n      if (err instanceof Error && err.message.includes('session')) {\r\n        await supabaseClient.auth.signOut();\r\n        navigate('/login');\r\n      }\r\n      \r\n      throw err;\r\n    }\r\n  };\r\n\r\n  const login = async (credentials: LoginCredentials) => {\r\n    try {\r\n      console.log('[Auth] Attempting login:', {\r\n        email: credentials.email,\r\n        timestamp: new Date().toISOString()\r\n      });\r\n      \r\n      const { data, error } = await supabaseClient.auth.signInWithPassword({\r\n        email: credentials.email,\r\n        password: credentials.password,\r\n      });\r\n\r\n      if (error) {\r\n        console.error('[Auth] Supabase login error:', {\r\n          message: error.message,\r\n          status: error.status,\r\n          name: error.name,\r\n          timestamp: new Date().toISOString()\r\n        });\r\n        \r\n        // Provide more specific error messages\r\n        if (error.message.includes('Invalid login credentials')) {\r\n          throw new Error('Invalid email or password. Please check your credentials and try again.');\r\n        }\r\n        \r\n        logger.error('Login failed', {\r\n          context: { \r\n            error,\r\n            credentials: { email: credentials.email }\r\n          },\r\n          source: 'useAuth'\r\n        });\r\n        throw new Error(error.message);\r\n      }\r\n\r\n      console.log('[Auth] Login response:', {\r\n        hasUser: !!data.user,\r\n        userId: data.user?.id,\r\n        userEmail: data.user?.email,\r\n        metadata: data.user?.user_metadata,\r\n        timestamp: new Date().toISOString()\r\n      });\r\n\r\n      if (!data.user) {\r\n        throw new Error('Login successful but user data is missing');\r\n      }\r\n\r\n      // Map Supabase user to our user format\r\n      const mappedUser = {\r\n        id: data.user.id,\r\n        email: data.user.email!,\r\n        name: data.user.user_metadata?.name || data.user.email!.split('@')[0],\r\n        role: data.user.user_metadata?.role || 'student',\r\n        photoUrl: data.user.user_metadata?.avatar_url,\r\n      };\r\n\r\n      console.log('[Auth] Mapped user:', mappedUser);\r\n\r\n      context.setUser(mappedUser);\r\n      return { user: mappedUser };\r\n    } catch (error) {\r\n      const errorDetails = error instanceof Error ? {\r\n        message: error.message,\r\n        name: error.name,\r\n        stack: error.stack\r\n      } : error;\r\n\r\n      console.error('[Auth] Login error details:', {\r\n        error: errorDetails,\r\n        timestamp: new Date().toISOString()\r\n      });\r\n\r\n      logger.error('Login failed', {\r\n        context: { \r\n          error: errorDetails,\r\n          credentials: { email: credentials.email }\r\n        },\r\n        source: 'useAuth'\r\n      });\r\n\r\n      if (error instanceof Error) {\r\n        throw error;\r\n      } else {\r\n        throw new Error('An unexpected error occurred. Please try again.');\r\n      }\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      const { error } = await supabaseClient.auth.signOut();\r\n      \r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      context.setUser(null);\r\n      queryClient.clear();\r\n      navigate('/login');\r\n    } catch (error) {\r\n      logger.error('Logout failed', {\r\n        context: { error },\r\n        source: 'useAuth'\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const signUp = async (credentials: SignUpCredentials) => {\r\n    try {\r\n      console.log('[Auth] Attempting signup:', {\r\n        email: credentials.email,\r\n        timestamp: new Date().toISOString()\r\n      });\r\n      \r\n      const { data, error } = await supabaseClient.auth.signUp({\r\n        email: credentials.email,\r\n        password: credentials.password,\r\n        options: {\r\n          data: {\r\n            name: credentials.name || credentials.email.split('@')[0],\r\n            role: 'student'\r\n          }\r\n        }\r\n      });\r\n\r\n      if (error) {\r\n        console.error('[Auth] Supabase signup error:', {\r\n          message: error.message,\r\n          status: error.status,\r\n          name: error.name,\r\n          timestamp: new Date().toISOString()\r\n        });\r\n        \r\n        logger.error('Signup failed', {\r\n          context: { \r\n            error,\r\n            credentials: { email: credentials.email }\r\n          },\r\n          source: 'useAuth'\r\n        });\r\n        throw new Error(error.message);\r\n      }\r\n\r\n      console.log('[Auth] Signup response:', {\r\n        hasUser: !!data.user,\r\n        userId: data.user?.id,\r\n        userEmail: data.user?.email,\r\n        metadata: data.user?.user_metadata,\r\n        timestamp: new Date().toISOString()\r\n      });\r\n\r\n      if (!data.user) {\r\n        throw new Error('Signup successful but user data is missing');\r\n      }\r\n\r\n      // Map Supabase user to our user format\r\n      const mappedUser = {\r\n        id: data.user.id,\r\n        email: data.user.email!,\r\n        name: data.user.user_metadata?.name || data.user.email!.split('@')[0],\r\n        role: data.user.user_metadata?.role || 'student',\r\n        photoUrl: data.user.user_metadata?.avatar_url,\r\n      };\r\n\r\n      console.log('[Auth] Mapped user:', mappedUser);\r\n\r\n      context.setUser(mappedUser);\r\n      return { user: mappedUser };\r\n    } catch (error) {\r\n      const errorDetails = error instanceof Error ? {\r\n        message: error.message,\r\n        name: error.name,\r\n        stack: error.stack\r\n      } : error;\r\n\r\n      console.error('[Auth] Signup error details:', {\r\n        error: errorDetails,\r\n        timestamp: new Date().toISOString()\r\n      });\r\n\r\n      logger.error('Signup failed', {\r\n        context: { \r\n          error: errorDetails,\r\n          credentials: { email: credentials.email }\r\n        },\r\n        source: '\r\n      });\r\n\r\n      if (error instanceof Error) {\r\n        throw error;\r\n      } else {\r\n        throw new Error('An unexpected error occurred during signup. Please try again.');\r\n      }\r\n    }\r\n  };\r\n\r\n  const resetPassword = async (credentials: ResetPasswordCredentials) => {\r\n    try {\r\n      console.log('[Auth] Attempting password reset:', {\r\n        email: credentials.email,\r\n        timestamp: new Date().toISOString()\r\n      });\r\n      \r\n      const { data, error } = await supabaseClient.auth.resetPasswordForEmail(\r\n        credentials.email,\r\n        { redirectTo: `${window.location.origin}/reset-password` }\r\n      );\r\n\r\n      if (error) {\r\n        console.error('[Auth] Supabase password reset error:', {\r\n          message: error.message,\r\n          status: error.status,\r\n          name: error.name,\r\n          timestamp: new Date().toISOString()\r\n        });\r\n        \r\n        logger.error('Password reset failed', {\r\n          context: { \r\n            error,\r\n            credentials: { email: credentials.email }\r\n          },\r\n          source: 'useAuth'\r\n        });\r\n        throw new Error(error.message);\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      const errorDetails = error instanceof Error ? {\r\n        message: error.message,\r\n        name: error.name,\r\n        stack: error.stack\r\n      } : error;\r\n\r\n      console.error('[Auth] Password reset error details:', {\r\n        error: errorDetails,\r\n        timestamp: new Date().toISOString()\r\n      });\r\n\r\n      logger.error('Password reset failed', {\r\n        context: { \r\n          error: errorDetails,\r\n          credentials: { email: credentials.email }\r\n        },\r\n        source: 'useAuth'\r\n      });\r\n\r\n      if (error instanceof Error) {\r\n        throw error;\r\n      } else {\r\n        throw new Error('An unexpected error occurred during password reset. Please try again.');\r\n      }\r\n    }\r\n  };\r\n\r\n  return {\r\n    user: user ? {\r\n      ...user,\r\n      role: user.role || 'unknown'\r\n    } : null,\r\n    loading,\r\n    changeRole,\r\n    isTransitioning,\r\n    login,\r\n    logout,\r\n    signUp,\r\n    resetPassword\r\n  };\r\n};"
        }
    ]
}