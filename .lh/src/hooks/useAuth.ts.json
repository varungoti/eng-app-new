{
    "sourceFile": "src/hooks/useAuth.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1738870357092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738870386960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,65 +98,27 @@\n   const changeRole = async (newRole: UserRole): Promise<void> => {\r\n     if (!context.user || isTransitioning) return;\r\n \r\n     try {\r\n-      // First try to get current session\r\n-      const { data: { session: currentSession }, error: sessionError } = \r\n-        await supabaseClient.auth.getSession();\r\n+      await roleTransitionManager.transitionRole(newRole);\r\n       \r\n-      if (sessionError) {\r\n-        logger.error('Failed to get current session', {\r\n-          context: { error: sessionError },\r\n-          source: 'useAuth'\r\n-        });\r\n-      }\r\n-\r\n-      // If no current session or error, try refresh\r\n-      if (!currentSession || sessionError) {\r\n-        const { data: { session: refreshedSession }, error: refreshError } = \r\n-          await supabaseClient.auth.refreshSession();\r\n-        \r\n-        if (refreshError || !refreshedSession) {\r\n-          logger.error('Session refresh failed', {\r\n-            context: { error: refreshError },\r\n-            source: 'useAuth'\r\n-          });\r\n-          // Redirect to login if session cannot be refreshed\r\n-          await supabaseClient.auth.signOut();\r\n-          navigate('/login');\r\n-          return;\r\n-        }\r\n-\r\n-        // Use refreshed session\r\n-        await roleTransitionManager.transitionRole(newRole, refreshedSession);\r\n-      } else {\r\n-        // Use current session\r\n-        await roleTransitionManager.transitionRole(newRole, currentSession);\r\n-      }\r\n+      // Clear cache and refetch with new role\r\n+      queryClient.clear();\r\n+      await queryClient.resetQueries();\r\n       \r\n-      // Update context user with new role\r\n+      // Update context user\r\n       context.setUser({\r\n         ...context.user,\r\n         role: newRole\r\n       });\r\n \r\n-      // Clear cache and refetch with new role\r\n-      queryClient.clear();\r\n-      await queryClient.resetQueries();\r\n-      \r\n+      // Navigate to home with fresh data\r\n       navigate('/', { replace: true });\r\n     } catch (err) {\r\n       logger.error('Failed to change role', {\r\n         context: { error: err },\r\n         source: 'useAuth'\r\n       });\r\n-      \r\n-      // Handle session errors specifically\r\n-      if (err instanceof Error && err.message.includes('session')) {\r\n-        await supabaseClient.auth.signOut();\r\n-        navigate('/login');\r\n-      }\r\n-      \r\n       throw err;\r\n     }\r\n   };\r\n \r\n@@ -345,9 +307,9 @@\n         context: { \r\n           error: errorDetails,\r\n           credentials: { email: credentials.email }\r\n         },\r\n-        source: '\r\n+        source: 'useAuth'\r\n       });\r\n \r\n       if (error instanceof Error) {\r\n         throw error;\r\n"
                },
                {
                    "date": 1738870529975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,13 +22,10 @@\n }\r\n \r\n interface ResetPasswordCredentials {\r\n   email: string;\r\n-  newPassword: string;\r\n-  accessToken: string;\r\n }\r\n \r\n-\r\n export const useAuth = () => {\r\n   const context = useContext(AuthContext);\r\n   \r\n   if (!context) {\r\n"
                }
            ],
            "date": 1738870357092,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport { useContext, useEffect } from 'react';\r\nimport { AuthContext } from '../contexts/AuthContext';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { QueryClient } from '@tanstack/query-core';\r\nimport { roleTransitionManager } from '../lib/auth/RoleTransitionManager';\r\nimport { useRoleStore } from '../lib/auth/store';\r\nimport { logger } from '../lib/logger';\r\nimport { ROLE_PERMISSIONS } from '../types/roles';\r\nimport { sessionManager } from '../lib/auth/sessionManager';\r\nimport type { UserRole } from '../types/roles';\r\nimport { supabaseClient } from '../lib/supabaseClient';\r\n\r\ninterface LoginCredentials {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\ninterface SignUpCredentials extends LoginCredentials {\r\n  name?: string;\r\n}\r\n\r\ninterface ResetPasswordCredentials {\r\n  email: string;\r\n  newPassword: string;\r\n  accessToken: string;\r\n}\r\n\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  \r\n  if (!context) {\r\n    console.warn('useAuth must be used within an AuthProvider');\r\n    return { user: null, loading: false };\r\n  }\r\n\r\n  const { user, loading } = context;\r\n\r\n  // Add debug logging\r\n  console.log('Auth Context:', {\r\n    hasUser: !!user,\r\n    userRole: user?.role,\r\n    userId: user?.id,\r\n    isLoading: loading,\r\n    fullUser: user // Log the full user object for debugging\r\n  });\r\n\r\n  const { isTransitioning } = useRoleStore();\r\n  const navigate = useNavigate();\r\n  const queryClient = new QueryClient();\r\n  const location = useLocation();\r\n  \r\n  // Add loading state check\r\n  useEffect(() => {\r\n    if (loading) {\r\n      logger.info('Auth loading state active', {\r\n        source: 'useAuth'\r\n      });\r\n    }\r\n  }, [loading]);\r\n\r\n  // Auto-refresh session when it's about to expire\r\n  useEffect(() => {\r\n    if (!user) return;\r\n    const refreshInterval = setInterval(async () => {\r\n      try {\r\n        await sessionManager.refreshSession();\r\n      } catch (err) {\r\n        logger.error('Failed to refresh session', {\r\n          context: { error: err },\r\n          source: 'useAuth'\r\n        });\r\n      }\r\n    }, 4 * 60 * 1000); // Check every 4 minutes\r\n    \r\n    return () => {\r\n      if (refreshInterval) {\r\n        clearInterval(refreshInterval);\r\n      }\r\n    };\r\n  }, [user]);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      logger.debug('Auth state check on route change', {\r\n        context: {\r\n          role: user.role,\r\n          path: location.pathname,\r\n          permissions: ROLE_PERMISSIONS[user.role]?.permissions\r\n        },\r\n        source: 'useAuth'\r\n      });\r\n    }\r\n  }, [user, location.pathname]);\r\n\r\n  const changeRole = async (newRole: UserRole): Promise<void> => {\r\n    if (!context.user || isTransitioning) return;\r\n\r\n    try {\r\n      // First try to get current session\r\n      const { data: { session: currentSession }, error: sessionError } = \r\n        await supabaseClient.auth.getSession();\r\n      \r\n      if (sessionError) {\r\n        logger.error('Failed to get current session', {\r\n          context: { error: sessionError },\r\n          source: 'useAuth'\r\n        });\r\n      }\r\n\r\n      // If no current session or error, try refresh\r\n      if (!currentSession || sessionError) {\r\n        const { data: { session: refreshedSession }, error: refreshError } = \r\n          await supabaseClient.auth.refreshSession();\r\n        \r\n        if (refreshError || !refreshedSession) {\r\n          logger.error('Session refresh failed', {\r\n            context: { error: refreshError },\r\n            source: 'useAuth'\r\n          });\r\n          // Redirect to login if session cannot be refreshed\r\n          await supabaseClient.auth.signOut();\r\n          navigate('/login');\r\n          return;\r\n        }\r\n\r\n        // Use refreshed session\r\n        await roleTransitionManager.transitionRole(newRole, refreshedSession);\r\n      } else {\r\n        // Use current session\r\n        await roleTransitionManager.transitionRole(newRole, currentSession);\r\n      }\r\n      \r\n      // Update context user with new role\r\n      context.setUser({\r\n        ...context.user,\r\n        role: newRole\r\n      });\r\n\r\n      // Clear cache and refetch with new role\r\n      queryClient.clear();\r\n      await queryClient.resetQueries();\r\n      \r\n      navigate('/', { replace: true });\r\n    } catch (err) {\r\n      logger.error('Failed to change role', {\r\n        context: { error: err },\r\n        source: 'useAuth'\r\n      });\r\n      \r\n      // Handle session errors specifically\r\n      if (err instanceof Error && err.message.includes('session')) {\r\n        await supabaseClient.auth.signOut();\r\n        navigate('/login');\r\n      }\r\n      \r\n      throw err;\r\n    }\r\n  };\r\n\r\n  const login = async (credentials: LoginCredentials) => {\r\n    try {\r\n      console.log('[Auth] Attempting login:', {\r\n        email: credentials.email,\r\n        timestamp: new Date().toISOString()\r\n      });\r\n      \r\n      const { data, error } = await supabaseClient.auth.signInWithPassword({\r\n        email: credentials.email,\r\n        password: credentials.password,\r\n      });\r\n\r\n      if (error) {\r\n        console.error('[Auth] Supabase login error:', {\r\n          message: error.message,\r\n          status: error.status,\r\n          name: error.name,\r\n          timestamp: new Date().toISOString()\r\n        });\r\n        \r\n        // Provide more specific error messages\r\n        if (error.message.includes('Invalid login credentials')) {\r\n          throw new Error('Invalid email or password. Please check your credentials and try again.');\r\n        }\r\n        \r\n        logger.error('Login failed', {\r\n          context: { \r\n            error,\r\n            credentials: { email: credentials.email }\r\n          },\r\n          source: 'useAuth'\r\n        });\r\n        throw new Error(error.message);\r\n      }\r\n\r\n      console.log('[Auth] Login response:', {\r\n        hasUser: !!data.user,\r\n        userId: data.user?.id,\r\n        userEmail: data.user?.email,\r\n        metadata: data.user?.user_metadata,\r\n        timestamp: new Date().toISOString()\r\n      });\r\n\r\n      if (!data.user) {\r\n        throw new Error('Login successful but user data is missing');\r\n      }\r\n\r\n      // Map Supabase user to our user format\r\n      const mappedUser = {\r\n        id: data.user.id,\r\n        email: data.user.email!,\r\n        name: data.user.user_metadata?.name || data.user.email!.split('@')[0],\r\n        role: data.user.user_metadata?.role || 'student',\r\n        photoUrl: data.user.user_metadata?.avatar_url,\r\n      };\r\n\r\n      console.log('[Auth] Mapped user:', mappedUser);\r\n\r\n      context.setUser(mappedUser);\r\n      return { user: mappedUser };\r\n    } catch (error) {\r\n      const errorDetails = error instanceof Error ? {\r\n        message: error.message,\r\n        name: error.name,\r\n        stack: error.stack\r\n      } : error;\r\n\r\n      console.error('[Auth] Login error details:', {\r\n        error: errorDetails,\r\n        timestamp: new Date().toISOString()\r\n      });\r\n\r\n      logger.error('Login failed', {\r\n        context: { \r\n          error: errorDetails,\r\n          credentials: { email: credentials.email }\r\n        },\r\n        source: 'useAuth'\r\n      });\r\n\r\n      if (error instanceof Error) {\r\n        throw error;\r\n      } else {\r\n        throw new Error('An unexpected error occurred. Please try again.');\r\n      }\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      const { error } = await supabaseClient.auth.signOut();\r\n      \r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      context.setUser(null);\r\n      queryClient.clear();\r\n      navigate('/login');\r\n    } catch (error) {\r\n      logger.error('Logout failed', {\r\n        context: { error },\r\n        source: 'useAuth'\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const signUp = async (credentials: SignUpCredentials) => {\r\n    try {\r\n      console.log('[Auth] Attempting signup:', {\r\n        email: credentials.email,\r\n        timestamp: new Date().toISOString()\r\n      });\r\n      \r\n      const { data, error } = await supabaseClient.auth.signUp({\r\n        email: credentials.email,\r\n        password: credentials.password,\r\n        options: {\r\n          data: {\r\n            name: credentials.name || credentials.email.split('@')[0],\r\n            role: 'student'\r\n          }\r\n        }\r\n      });\r\n\r\n      if (error) {\r\n        console.error('[Auth] Supabase signup error:', {\r\n          message: error.message,\r\n          status: error.status,\r\n          name: error.name,\r\n          timestamp: new Date().toISOString()\r\n        });\r\n        \r\n        logger.error('Signup failed', {\r\n          context: { \r\n            error,\r\n            credentials: { email: credentials.email }\r\n          },\r\n          source: 'useAuth'\r\n        });\r\n        throw new Error(error.message);\r\n      }\r\n\r\n      console.log('[Auth] Signup response:', {\r\n        hasUser: !!data.user,\r\n        userId: data.user?.id,\r\n        userEmail: data.user?.email,\r\n        metadata: data.user?.user_metadata,\r\n        timestamp: new Date().toISOString()\r\n      });\r\n\r\n      if (!data.user) {\r\n        throw new Error('Signup successful but user data is missing');\r\n      }\r\n\r\n      // Map Supabase user to our user format\r\n      const mappedUser = {\r\n        id: data.user.id,\r\n        email: data.user.email!,\r\n        name: data.user.user_metadata?.name || data.user.email!.split('@')[0],\r\n        role: data.user.user_metadata?.role || 'student',\r\n        photoUrl: data.user.user_metadata?.avatar_url,\r\n      };\r\n\r\n      console.log('[Auth] Mapped user:', mappedUser);\r\n\r\n      context.setUser(mappedUser);\r\n      return { user: mappedUser };\r\n    } catch (error) {\r\n      const errorDetails = error instanceof Error ? {\r\n        message: error.message,\r\n        name: error.name,\r\n        stack: error.stack\r\n      } : error;\r\n\r\n      console.error('[Auth] Signup error details:', {\r\n        error: errorDetails,\r\n        timestamp: new Date().toISOString()\r\n      });\r\n\r\n      logger.error('Signup failed', {\r\n        context: { \r\n          error: errorDetails,\r\n          credentials: { email: credentials.email }\r\n        },\r\n        source: '\r\n      });\r\n\r\n      if (error instanceof Error) {\r\n        throw error;\r\n      } else {\r\n        throw new Error('An unexpected error occurred during signup. Please try again.');\r\n      }\r\n    }\r\n  };\r\n\r\n  const resetPassword = async (credentials: ResetPasswordCredentials) => {\r\n    try {\r\n      console.log('[Auth] Attempting password reset:', {\r\n        email: credentials.email,\r\n        timestamp: new Date().toISOString()\r\n      });\r\n      \r\n      const { data, error } = await supabaseClient.auth.resetPasswordForEmail(\r\n        credentials.email,\r\n        { redirectTo: `${window.location.origin}/reset-password` }\r\n      );\r\n\r\n      if (error) {\r\n        console.error('[Auth] Supabase password reset error:', {\r\n          message: error.message,\r\n          status: error.status,\r\n          name: error.name,\r\n          timestamp: new Date().toISOString()\r\n        });\r\n        \r\n        logger.error('Password reset failed', {\r\n          context: { \r\n            error,\r\n            credentials: { email: credentials.email }\r\n          },\r\n          source: 'useAuth'\r\n        });\r\n        throw new Error(error.message);\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      const errorDetails = error instanceof Error ? {\r\n        message: error.message,\r\n        name: error.name,\r\n        stack: error.stack\r\n      } : error;\r\n\r\n      console.error('[Auth] Password reset error details:', {\r\n        error: errorDetails,\r\n        timestamp: new Date().toISOString()\r\n      });\r\n\r\n      logger.error('Password reset failed', {\r\n        context: { \r\n          error: errorDetails,\r\n          credentials: { email: credentials.email }\r\n        },\r\n        source: 'useAuth'\r\n      });\r\n\r\n      if (error instanceof Error) {\r\n        throw error;\r\n      } else {\r\n        throw new Error('An unexpected error occurred during password reset. Please try again.');\r\n      }\r\n    }\r\n  };\r\n\r\n  return {\r\n    user: user ? {\r\n      ...user,\r\n      role: user.role || 'unknown'\r\n    } : null,\r\n    loading,\r\n    changeRole,\r\n    isTransitioning,\r\n    login,\r\n    logout,\r\n    signUp,\r\n    resetPassword\r\n  };\r\n};"
        }
    ]
}