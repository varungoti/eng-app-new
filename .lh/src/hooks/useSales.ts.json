{
    "sourceFile": "src/hooks/useSales.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1740094590922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740094643140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,11 @@\n   activities: any[];\r\n   opportunities: any[];\r\n   stats: SalesStats;\r\n   loading: boolean;\r\n+  createLead: ReturnType<typeof useMutation>;\r\n+  updateLead: ReturnType<typeof useMutation>;\r\n+  addActivity: ReturnType<typeof useMutation>;\r\n }\r\n \r\n export const useSales = (): UseSalesResult => {\r\n   const queryClient = useQueryClient();\r\n@@ -239,6 +242,6 @@\n     loading: leadsLoading || activitiesLoading || opportunitiesLoading,\r\n     createLead,\r\n     updateLead,\r\n     addActivity,\r\n-  };\r\n+  } as UseSalesResult;\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740094707815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React, { useMemo, useState } from 'react';\r\n-import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\n+import { useQuery, useMutation, useQueryClient, UseMutationResult } from '@tanstack/react-query';\r\n import { supabase } from '../lib/supabase';\r\n import { logger } from '../lib/logger';\r\n import { api } from '../lib/api';\r\n import { useToast } from './useToast';\r\n@@ -16,15 +16,15 @@\n }\r\n \r\n interface UseSalesResult {\r\n   leads: SalesLead[];\r\n-  activities: any[];\r\n-  opportunities: any[];\r\n+  activities: SalesActivity[];\r\n+  opportunities: SalesOpportunity[];\r\n   stats: SalesStats;\r\n   loading: boolean;\r\n-  createLead: ReturnType<typeof useMutation>;\r\n-  updateLead: ReturnType<typeof useMutation>;\r\n-  addActivity: ReturnType<typeof useMutation>;\r\n+  createLead: UseMutationResult<any, Error, Omit<SalesLead, 'id'>>;\r\n+  updateLead: UseMutationResult<any, Error, Partial<SalesLead> & { id: string }>;\r\n+  addActivity: UseMutationResult<any, Error, Omit<SalesActivity, 'id'>>;\r\n }\r\n \r\n export const useSales = (): UseSalesResult => {\r\n   const queryClient = useQueryClient();\r\n@@ -44,9 +44,9 @@\n   // Use stale time and cache time to prevent unnecessary refetches\r\n   const { data: leads = [], isLoading: leadsLoading } = useQuery({\r\n     queryKey: ['sales_leads'],\r\n     staleTime: 5 * 60 * 1000, // 5 minutes\r\n-    cacheTime: 30 * 60 * 1000, // 30 minutes\r\n+    gcTime: 30 * 60 * 1000, // 30 minutes\r\n     retry: 3,\r\n     retryDelay: (attemptIndex) => Math.min(1000 * Math.pow(2, attemptIndex), 10000),\r\n     meta: {\r\n       source: 'useSales'\r\n@@ -94,9 +94,9 @@\n \r\n   const { data: activities = [], isLoading: activitiesLoading } = useQuery({\r\n     queryKey: ['sales_activities'],\r\n     staleTime: 5 * 60 * 1000,\r\n-    cacheTime: 30 * 60 * 1000,\r\n+    gcTime: 30 * 60 * 1000,\r\n     retry: 3,\r\n     retryDelay: (attemptIndex) => Math.min(1000 * Math.pow(2, attemptIndex), 10000),\r\n     queryFn: async () => {\r\n       const cached = cache.get<SalesActivity[]>('sales_activities');\r\n@@ -129,11 +129,11 @@\n     }\r\n   });\r\n \r\n   const { data: opportunities = [], isLoading: opportunitiesLoading } = useQuery({\r\n-    queryKey: ['sales_opportunities'], \r\n+    queryKey: ['sales_opportunities'],\r\n     staleTime: 5 * 60 * 1000,\r\n-    cacheTime: 30 * 60 * 1000,\r\n+    gcTime: 30 * 60 * 1000,\r\n     retry: 3,\r\n     retryDelay: (attemptIndex) => Math.min(1000 * Math.pow(2, attemptIndex), 10000),\r\n     queryFn: async () => {\r\n       const cached = cache.get<SalesOpportunity[]>('sales_opportunities');\r\n"
                },
                {
                    "date": 1740095313675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,11 +20,11 @@\n   activities: SalesActivity[];\r\n   opportunities: SalesOpportunity[];\r\n   stats: SalesStats;\r\n   loading: boolean;\r\n-  createLead: UseMutationResult<any, Error, Omit<SalesLead, 'id'>>;\r\n-  updateLead: UseMutationResult<any, Error, Partial<SalesLead> & { id: string }>;\r\n-  addActivity: UseMutationResult<any, Error, Omit<SalesActivity, 'id'>>;\r\n+  _createLead: UseMutationResult<any, Error, Omit<SalesLead, 'id'>>;\r\n+  _updateLead: UseMutationResult<any, Error, Partial<SalesLead> & { id: string }>;\r\n+  _addActivity: UseMutationResult<any, Error, Omit<SalesActivity, 'id'>>;\r\n }\r\n \r\n export const useSales = (): UseSalesResult => {\r\n   const queryClient = useQueryClient();\r\n@@ -239,9 +239,9 @@\n     activities,\r\n     opportunities,\r\n     stats,\r\n     loading: leadsLoading || activitiesLoading || opportunitiesLoading,\r\n-    createLead,\r\n-    updateLead,\r\n-    addActivity,\r\n+    _createLead: createLead,\r\n+    _updateLead: updateLead,\r\n+    _addActivity: addActivity,\r\n   } as UseSalesResult;\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740095467470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,11 +20,11 @@\n   activities: SalesActivity[];\r\n   opportunities: SalesOpportunity[];\r\n   stats: SalesStats;\r\n   loading: boolean;\r\n-  _createLead: UseMutationResult<any, Error, Omit<SalesLead, 'id'>>;\r\n-  _updateLead: UseMutationResult<any, Error, Partial<SalesLead> & { id: string }>;\r\n-  _addActivity: UseMutationResult<any, Error, Omit<SalesActivity, 'id'>>;\r\n+  _createLead: UseMutationResult<SalesLead, Error, Omit<SalesLead, 'id'>>;\r\n+  _updateLead: UseMutationResult<SalesLead, Error, Partial<SalesLead> & { id: string }>;\r\n+  _addActivity: UseMutationResult<SalesActivity, Error, Omit<SalesActivity, 'id'>>;\r\n }\r\n \r\n export const useSales = (): UseSalesResult => {\r\n   const queryClient = useQueryClient();\r\n"
                },
                {
                    "date": 1740773229056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n   totalLeads: number;\r\n   qualifiedLeads: number;\r\n   pipelineValue: number;\r\n   conversionRate: number;\r\n+  \r\n }\r\n \r\n interface UseSalesResult {\r\n   leads: SalesLead[];\r\n"
                },
                {
                    "date": 1740773236030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,18 @@\n   totalLeads: number;\r\n   qualifiedLeads: number;\r\n   pipelineValue: number;\r\n   conversionRate: number;\r\n-  \r\n+  closedDeals: number;\r\n+  closedDealsCount: number;\r\n+  dealsWon: number;\r\n+  dealsLost: number;\r\n+  dealsProposal: number;\r\n+  dealsContacted: number;\r\n+  dealsNew: number;\r\n+  dealsQualified: number;\r\n+  dealsWonCount: number;\r\n+  dealsLostCount: number;\r\n }\r\n \r\n interface UseSalesResult {\r\n   leads: SalesLead[];\r\n"
                },
                {
                    "date": 1740773242095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,9 @@\n   dealsNew: number;\r\n   dealsQualified: number;\r\n   dealsWonCount: number;\r\n   dealsLostCount: number;\r\n+  dealsContactedCount: number;\r\n }\r\n \r\n interface UseSalesResult {\r\n   leads: SalesLead[];\r\n"
                },
                {
                    "date": 1740773250954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,13 +20,16 @@\n   dealsProposal: number;\r\n   dealsContacted: number;\r\n   dealsNew: number;\r\n   dealsQualified: number;\r\n+  \r\n+  dealsQualifiedCount: number;\r\n+  dealsProposalCount: number;\r\n   dealsWonCount: number;\r\n   dealsLostCount: number;\r\n   dealsContactedCount: number;\r\n+  dealsNewCount: number;\r\n }\r\n-\r\n interface UseSalesResult {\r\n   leads: SalesLead[];\r\n   activities: SalesActivity[];\r\n   opportunities: SalesOpportunity[];\r\n"
                },
                {
                    "date": 1740773260490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,14 +20,14 @@\n   dealsProposal: number;\r\n   dealsContacted: number;\r\n   dealsNew: number;\r\n   dealsQualified: number;\r\n-  \r\n+  dealsContactedCount: number;\r\n   dealsQualifiedCount: number;\r\n   dealsProposalCount: number;\r\n   dealsWonCount: number;\r\n   dealsLostCount: number;\r\n-  dealsContactedCount: number;\r\n+  \r\n   dealsNewCount: number;\r\n }\r\n interface UseSalesResult {\r\n   leads: SalesLead[];\r\n"
                },
                {
                    "date": 1740773268257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,8 @@\n   dealsQualifiedCount: number;\r\n   dealsProposalCount: number;\r\n   dealsWonCount: number;\r\n   dealsLostCount: number;\r\n-  \r\n   dealsNewCount: number;\r\n }\r\n interface UseSalesResult {\r\n   leads: SalesLead[];\r\n"
                },
                {
                    "date": 1740773296622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -255,6 +255,7 @@\n     loading: leadsLoading || activitiesLoading || opportunitiesLoading,\r\n     _createLead: createLead,\r\n     _updateLead: updateLead,\r\n     _addActivity: addActivity,\r\n+    \r\n   } as UseSalesResult;\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740773304096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -255,7 +255,19 @@\n     loading: leadsLoading || activitiesLoading || opportunitiesLoading,\r\n     _createLead: createLead,\r\n     _updateLead: updateLead,\r\n     _addActivity: addActivity,\r\n-    \r\n+    closedDeals: stats.closedDeals,\r\n+    closedDealsCount: stats.closedDealsCount,\r\n+    dealsWon: stats.dealsWon,\r\n+    dealsLost: stats.dealsLost,\r\n+    dealsProposal: stats.dealsProposal,\r\n+    dealsContacted: stats.dealsContacted,\r\n+    dealsNew: stats.dealsNew,\r\n+    dealsQualified: stats.dealsQualified,\r\n+    dealsContactedCount: stats.dealsContactedCount,\r\n+    dealsQualifiedCount: stats.dealsQualifiedCount,\r\n+    dealsProposalCount: stats.dealsProposalCount,\r\n+    dealsWonCount: stats.dealsWonCount,\r\n+    dealsLostCount: stats.dealsLostCount,\r\n   } as UseSalesResult;\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740773310226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -190,11 +190,25 @@\n   // Memoize stats calculation to prevent unnecessary recalculations\r\n   const stats = useMemo(() => ({\r\n     totalLeads: leads.length,\r\n     qualifiedLeads: leads.filter(l => l.status === 'qualified').length,\r\n-    wonDeals: leads.filter(l => l.status === 'won').length,\r\n     pipelineValue: opportunities.reduce((sum, opp) => sum + (opp.amount || 0), 0),\r\n     conversionRate: leads.length > 0 ? (leads.filter(l => l.status === 'won').length / leads.length) * 100 : 0,\r\n+    // Add missing properties from SalesStats interface\r\n+    closedDeals: leads.filter(l => l.status === 'closed').length,\r\n+    closedDealsCount: leads.filter(l => l.status === 'closed').length,\r\n+    dealsWon: leads.filter(l => l.status === 'won').length,\r\n+    dealsLost: leads.filter(l => l.status === 'lost').length,\r\n+    dealsProposal: leads.filter(l => l.status === 'proposal').length,\r\n+    dealsContacted: leads.filter(l => l.status === 'contacted').length,\r\n+    dealsNew: leads.filter(l => l.status === 'new').length,\r\n+    dealsQualified: leads.filter(l => l.status === 'qualified').length,\r\n+    dealsContactedCount: leads.filter(l => l.status === 'contacted').length,\r\n+    dealsQualifiedCount: leads.filter(l => l.status === 'qualified').length,\r\n+    dealsProposalCount: leads.filter(l => l.status === 'proposal').length,\r\n+    dealsWonCount: leads.filter(l => l.status === 'won').length,\r\n+    dealsLostCount: leads.filter(l => l.status === 'lost').length,\r\n+    dealsNewCount: leads.filter(l => l.status === 'new').length,\r\n   }), [leads, opportunities]);\r\n \r\n   React.useEffect(() => {\r\n     return () => {\r\n"
                }
            ],
            "date": 1740094590922,
            "name": "Commit-0",
            "content": "import React, { useMemo, useState } from 'react';\r\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport { supabase } from '../lib/supabase';\r\nimport { logger } from '../lib/logger';\r\nimport { api } from '../lib/api';\r\nimport { useToast } from './useToast';\r\nimport { useDataLoadTimeout } from './useDataLoadTimeout';\r\nimport { useCache } from './useCache';\r\nimport type { SalesLead, SalesActivity, SalesOpportunity } from '../types/sales';\r\n\r\ninterface SalesStats {\r\n  totalLeads: number;\r\n  qualifiedLeads: number;\r\n  pipelineValue: number;\r\n  conversionRate: number;\r\n}\r\n\r\ninterface UseSalesResult {\r\n  leads: SalesLead[];\r\n  activities: any[];\r\n  opportunities: any[];\r\n  stats: SalesStats;\r\n  loading: boolean;\r\n}\r\n\r\nexport const useSales = (): UseSalesResult => {\r\n  const queryClient = useQueryClient();\r\n  const { showToast } = useToast();\r\n  const { cache } = useCache();\r\n  const { clearTimeout } = useDataLoadTimeout({\r\n    timeout: 30000,\r\n    source: 'useSales',\r\n    onTimeout: () => {\r\n      showToast('Failed to load sales data', { type: 'error' });\r\n    }\r\n  });\r\n\r\n  const mounted = React.useRef(true);\r\n  const queryStartTime = React.useRef(Date.now());\r\n\r\n  // Use stale time and cache time to prevent unnecessary refetches\r\n  const { data: leads = [], isLoading: leadsLoading } = useQuery({\r\n    queryKey: ['sales_leads'],\r\n    staleTime: 5 * 60 * 1000, // 5 minutes\r\n    cacheTime: 30 * 60 * 1000, // 30 minutes\r\n    retry: 3,\r\n    retryDelay: (attemptIndex) => Math.min(1000 * Math.pow(2, attemptIndex), 10000),\r\n    meta: {\r\n      source: 'useSales'\r\n    },\r\n    queryFn: async () => {\r\n      // Check cache first\r\n      const cached = cache.get<SalesLead[]>('sales_leads');\r\n      if (cached) return cached;\r\n\r\n      const { data, error } = await supabase\r\n        .from('sales_leads')\r\n        .select('*')\r\n        .throwOnError()\r\n        .order('created_at', { ascending: false });\r\n      \r\n      if (error) {\r\n        logger.error('Failed to fetch sales leads', {\r\n          context: { error },\r\n          source: 'useSales'\r\n        });\r\n        throw error;\r\n      }\r\n\r\n      if (data) {\r\n        cache.set('sales_leads', data, 5 * 60 * 1000); // 5 minute TTL\r\n      }\r\n      return (data || []).map(lead => ({\r\n        id: lead.id,\r\n        companyName: lead.company_name,\r\n        contactName: lead.contact_name,\r\n        email: lead.email,\r\n        phone: lead.phone,\r\n        status: lead.status,\r\n        source: lead.source,\r\n        assignedTo: lead.assigned_to,\r\n        estimatedValue: lead.estimated_value,\r\n        probability: lead.probability,\r\n        expectedCloseDate: lead.expected_close_date ? new Date(lead.expected_close_date) : undefined,\r\n        notes: lead.notes,\r\n        createdAt: new Date(lead.created_at),\r\n        updatedAt: new Date(lead.updated_at)\r\n      }));\r\n    }\r\n  });\r\n\r\n  const { data: activities = [], isLoading: activitiesLoading } = useQuery({\r\n    queryKey: ['sales_activities'],\r\n    staleTime: 5 * 60 * 1000,\r\n    cacheTime: 30 * 60 * 1000,\r\n    retry: 3,\r\n    retryDelay: (attemptIndex) => Math.min(1000 * Math.pow(2, attemptIndex), 10000),\r\n    queryFn: async () => {\r\n      const cached = cache.get<SalesActivity[]>('sales_activities');\r\n      if (cached) return cached;\r\n\r\n      const { data, error } = await supabase\r\n        .from('sales_activities')\r\n        .select('*')\r\n        .order('created_at', { ascending: false });\r\n      \r\n      if (error) throw error;\r\n      if (data) {\r\n        cache.set('sales_activities', data, 5 * 60 * 1000);\r\n      }\r\n      return (data || []).map(activity => ({\r\n        id: activity.id,\r\n        leadId: activity.lead_id,\r\n        type: activity.type,\r\n        subject: activity.subject,\r\n        description: activity.description,\r\n        status: activity.status,\r\n        dueDate: activity.due_date ? new Date(activity.due_date) : undefined,\r\n        completedAt: activity.completed_at ? new Date(activity.completed_at) : undefined,\r\n        performedBy: activity.performed_by,\r\n        createdAt: new Date(activity.created_at)\r\n      }));\r\n    },\r\n    meta: {\r\n      source: 'useSales'\r\n    }\r\n  });\r\n\r\n  const { data: opportunities = [], isLoading: opportunitiesLoading } = useQuery({\r\n    queryKey: ['sales_opportunities'], \r\n    staleTime: 5 * 60 * 1000,\r\n    cacheTime: 30 * 60 * 1000,\r\n    retry: 3,\r\n    retryDelay: (attemptIndex) => Math.min(1000 * Math.pow(2, attemptIndex), 10000),\r\n    queryFn: async () => {\r\n      const cached = cache.get<SalesOpportunity[]>('sales_opportunities');\r\n      if (cached) return cached;\r\n\r\n      const { data, error } = await supabase\r\n        .from('sales_opportunities')\r\n        .select('*')\r\n        .order('created_at', { ascending: false });\r\n      \r\n      if (error) throw error;\r\n      if (data) {\r\n        cache.set('sales_opportunities', data, 5 * 60 * 1000);\r\n      }\r\n      return data || [];\r\n    },\r\n    meta: {\r\n      source: 'useSales'\r\n    }\r\n  });\r\n\r\n  // Update loading state when queries complete\r\n  React.useEffect(() => {\r\n    if (!leadsLoading && !activitiesLoading && !opportunitiesLoading) {\r\n      const loadTime = Date.now() - queryStartTime.current;\r\n      logger.info('Sales data loaded', {\r\n        context: { loadTime },\r\n        source: 'useSales'\r\n      });\r\n      clearTimeout();\r\n    }\r\n  }, [leadsLoading, activitiesLoading, opportunitiesLoading, clearTimeout]);\r\n\r\n  React.useEffect(() => {\r\n    return () => {\r\n      mounted.current = false;\r\n      clearTimeout();\r\n    };\r\n  }, [clearTimeout]);\r\n\r\n  // Memoize stats calculation to prevent unnecessary recalculations\r\n  const stats = useMemo(() => ({\r\n    totalLeads: leads.length,\r\n    qualifiedLeads: leads.filter(l => l.status === 'qualified').length,\r\n    wonDeals: leads.filter(l => l.status === 'won').length,\r\n    pipelineValue: opportunities.reduce((sum, opp) => sum + (opp.amount || 0), 0),\r\n    conversionRate: leads.length > 0 ? (leads.filter(l => l.status === 'won').length / leads.length) * 100 : 0,\r\n  }), [leads, opportunities]);\r\n\r\n  React.useEffect(() => {\r\n    return () => {\r\n      if (mounted.current) {\r\n        clearTimeout();\r\n      }\r\n    };\r\n  }, [clearTimeout]);\r\n\r\n  const createLead = useMutation({\r\n    mutationFn: (lead: Omit<SalesLead, 'id'>) => api.post('sales_leads', lead),\r\n    onSuccess: () => {\r\n      // Invalidate and refetch only if needed\r\n      queryClient.invalidateQueries({ \r\n        queryKey: ['sales_leads'],\r\n        refetchType: 'active'\r\n      });\r\n      showToast('Lead created successfully', { type: 'success' });\r\n      clearTimeout();\r\n    },\r\n    onError: (error) => {\r\n      showToast(error instanceof Error ? error.message : 'Failed to create lead', { type: 'error' });\r\n    }\r\n  });\r\n\r\n  const updateLead = useMutation({\r\n    mutationFn: ({ id, ...data }: Partial<SalesLead> & { id: string }) => \r\n      api.put('sales_leads', id, data),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ \r\n        queryKey: ['sales_leads'],\r\n        refetchType: 'active'\r\n      });\r\n      showToast('Lead updated successfully', { type: 'success' });\r\n    },\r\n    onError: (error) => {\r\n      showToast(error instanceof Error ? error.message : 'Failed to update lead', { type: 'error' });\r\n    }\r\n  });\r\n\r\n  const addActivity = useMutation({\r\n    mutationFn: (activity: Omit<SalesActivity, 'id'>) => \r\n      api.post('sales_activities', activity),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['sales_activities'] });\r\n      showToast('Activity added successfully', { type: 'success' });\r\n    },\r\n    onError: (error) => {\r\n      showToast(error instanceof Error ? error.message : 'Failed to add activity', { type: 'error' });\r\n    }\r\n  });\r\n\r\n  return {\r\n    leads,\r\n    activities,\r\n    opportunities,\r\n    stats,\r\n    loading: leadsLoading || activitiesLoading || opportunitiesLoading,\r\n    createLead,\r\n    updateLead,\r\n    addActivity,\r\n  };\r\n};"
        }
    ]
}