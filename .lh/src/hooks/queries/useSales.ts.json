{
    "sourceFile": "src/hooks/queries/useSales.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1740919588917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740919616910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,19 +4,19 @@\n \r\n export const useSales = () => {\r\n   const queryClient = useQueryClient();\r\n \r\n-  const { data: leads = [], isLoading: leadsLoading } = useQuery({\r\n+  const { data: leads = [], isLoading: leadsLoading } = useQuery<SalesLead[]>({\r\n     queryKey: ['sales_leads'],\r\n     queryFn: () => api.get<SalesLead[]>('sales_leads'),\r\n   });\r\n \r\n-  const { data: activities = [], isLoading: activitiesLoading } = useQuery({\r\n+  const { data: activities = [], isLoading: activitiesLoading } = useQuery<SalesActivity[]>({\r\n     queryKey: ['sales_activities'],\r\n     queryFn: () => api.get<SalesActivity[]>('sales_activities'),\r\n   });\r\n \r\n-  const { data: opportunities = [], isLoading: opportunitiesLoading } = useQuery({\r\n+  const { data: opportunities = [], isLoading: opportunitiesLoading } = useQuery<SalesOpportunity[]>({\r\n     queryKey: ['sales_opportunities'],\r\n     queryFn: () => api.get<SalesOpportunity[]>('sales_opportunities'),\r\n   });\r\n \r\n@@ -45,12 +45,12 @@\n \r\n   // Calculate sales stats\r\n   const stats = {\r\n     totalLeads: leads.length,\r\n-    qualifiedLeads: leads.filter((l: SalesLead) => l.status === 'qualified').length,\r\n-    wonDeals: leads.filter((l: SalesLead) => l.status === 'won').length,\r\n-    pipelineValue: opportunities.reduce((sum: number, opp: SalesOpportunity) => sum + (opp.amount || 0), 0),\r\n-    conversionRate: leads.length > 0 ? (leads.filter((l: SalesLead) => l.status === 'won').length / leads.length) * 100 : 0,\r\n+    qualifiedLeads: leads.filter(l => l.status === 'qualified').length,\r\n+    wonDeals: leads.filter(l => l.status === 'won').length,\r\n+    pipelineValue: opportunities.reduce((sum, opp) => sum + (opp.amount || 0), 0),\r\n+    conversionRate: leads.length > 0 ? (leads.filter(l => l.status === 'won').length / leads.length) * 100 : 0,\r\n   };\r\n \r\n   return {\r\n     leads,\r\n"
                },
                {
                    "date": 1740919627122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,22 +4,31 @@\n \r\n export const useSales = () => {\r\n   const queryClient = useQueryClient();\r\n \r\n-  const { data: leads = [], isLoading: leadsLoading } = useQuery<SalesLead[]>({\r\n+  const { data: leadsData = [], isLoading: leadsLoading } = useQuery({\r\n     queryKey: ['sales_leads'],\r\n     queryFn: () => api.get<SalesLead[]>('sales_leads'),\r\n   });\r\n+  \r\n+  // Type assertion to help TypeScript understand the structure\r\n+  const leads = leadsData as SalesLead[];\r\n \r\n-  const { data: activities = [], isLoading: activitiesLoading } = useQuery<SalesActivity[]>({\r\n+  const { data: activitiesData = [], isLoading: activitiesLoading } = useQuery({\r\n     queryKey: ['sales_activities'],\r\n     queryFn: () => api.get<SalesActivity[]>('sales_activities'),\r\n   });\r\n+  \r\n+  // Type assertion for activities\r\n+  const activities = activitiesData as SalesActivity[];\r\n \r\n-  const { data: opportunities = [], isLoading: opportunitiesLoading } = useQuery<SalesOpportunity[]>({\r\n+  const { data: opportunitiesData = [], isLoading: opportunitiesLoading } = useQuery({\r\n     queryKey: ['sales_opportunities'],\r\n     queryFn: () => api.get<SalesOpportunity[]>('sales_opportunities'),\r\n   });\r\n+  \r\n+  // Type assertion for opportunities\r\n+  const opportunities = opportunitiesData as SalesOpportunity[];\r\n \r\n   const createLead = useMutation({\r\n     mutationFn: (lead: Omit<SalesLead, 'id'>) => api.post<SalesLead>('sales_leads', lead),\r\n     onSuccess: () => {\r\n@@ -45,12 +54,12 @@\n \r\n   // Calculate sales stats\r\n   const stats = {\r\n     totalLeads: leads.length,\r\n-    qualifiedLeads: leads.filter(l => l.status === 'qualified').length,\r\n-    wonDeals: leads.filter(l => l.status === 'won').length,\r\n+    qualifiedLeads: leads.filter((l) => l.status === 'qualified').length,\r\n+    wonDeals: leads.filter((l) => l.status === 'won').length,\r\n     pipelineValue: opportunities.reduce((sum, opp) => sum + (opp.amount || 0), 0),\r\n-    conversionRate: leads.length > 0 ? (leads.filter(l => l.status === 'won').length / leads.length) * 100 : 0,\r\n+    conversionRate: leads.length > 0 ? (leads.filter((l) => l.status === 'won').length / leads.length) * 100 : 0,\r\n   };\r\n \r\n   return {\r\n     leads,\r\n"
                },
                {
                    "date": 1740919643126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,12 +54,12 @@\n \r\n   // Calculate sales stats\r\n   const stats = {\r\n     totalLeads: leads.length,\r\n-    qualifiedLeads: leads.filter((l) => l.status === 'qualified').length,\r\n-    wonDeals: leads.filter((l) => l.status === 'won').length,\r\n-    pipelineValue: opportunities.reduce((sum, opp) => sum + (opp.amount || 0), 0),\r\n-    conversionRate: leads.length > 0 ? (leads.filter((l) => l.status === 'won').length / leads.length) * 100 : 0,\r\n+    qualifiedLeads: leads.filter((l: any) => l?.status === 'qualified').length,\r\n+    wonDeals: leads.filter((l: any) => l?.status === 'won').length,\r\n+    pipelineValue: opportunities.reduce((sum: number, opp: any) => sum + (opp?.amount || 0), 0),\r\n+    conversionRate: leads.length > 0 ? (leads.filter((l: any) => l?.status === 'won').length / leads.length) * 100 : 0,\r\n   };\r\n \r\n   return {\r\n     leads,\r\n"
                },
                {
                    "date": 1740919754052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,31 +4,22 @@\n \r\n export const useSales = () => {\r\n   const queryClient = useQueryClient();\r\n \r\n-  const { data: leadsData = [], isLoading: leadsLoading } = useQuery({\r\n+  const { data: leads = [], isLoading: leadsLoading } = useQuery({\r\n     queryKey: ['sales_leads'],\r\n     queryFn: () => api.get<SalesLead[]>('sales_leads'),\r\n   });\r\n   \r\n-  // Type assertion to help TypeScript understand the structure\r\n-  const leads = leadsData as SalesLead[];\r\n-\r\n-  const { data: activitiesData = [], isLoading: activitiesLoading } = useQuery({\r\n+  const { data: activities = [], isLoading: activitiesLoading } = useQuery({\r\n     queryKey: ['sales_activities'],\r\n     queryFn: () => api.get<SalesActivity[]>('sales_activities'),\r\n   });\r\n   \r\n-  // Type assertion for activities\r\n-  const activities = activitiesData as SalesActivity[];\r\n-\r\n-  const { data: opportunitiesData = [], isLoading: opportunitiesLoading } = useQuery({\r\n+  const { data: opportunities = [], isLoading: opportunitiesLoading } = useQuery({\r\n     queryKey: ['sales_opportunities'],\r\n     queryFn: () => api.get<SalesOpportunity[]>('sales_opportunities'),\r\n   });\r\n-  \r\n-  // Type assertion for opportunities\r\n-  const opportunities = opportunitiesData as SalesOpportunity[];\r\n \r\n   const createLead = useMutation({\r\n     mutationFn: (lead: Omit<SalesLead, 'id'>) => api.post<SalesLead>('sales_leads', lead),\r\n     onSuccess: () => {\r\n@@ -51,15 +42,17 @@\n       queryClient.invalidateQueries({ queryKey: ['sales_activities'] });\r\n     },\r\n   });\r\n \r\n-  // Calculate sales stats\r\n+  // Calculate sales stats - using type assertions for safety\r\n   const stats = {\r\n-    totalLeads: leads.length,\r\n-    qualifiedLeads: leads.filter((l: any) => l?.status === 'qualified').length,\r\n-    wonDeals: leads.filter((l: any) => l?.status === 'won').length,\r\n-    pipelineValue: opportunities.reduce((sum: number, opp: any) => sum + (opp?.amount || 0), 0),\r\n-    conversionRate: leads.length > 0 ? (leads.filter((l: any) => l?.status === 'won').length / leads.length) * 100 : 0,\r\n+    totalLeads: (leads as any[]).length,\r\n+    qualifiedLeads: (leads as any[]).filter(l => l?.status === 'qualified').length,\r\n+    wonDeals: (leads as any[]).filter(l => l?.status === 'won').length,\r\n+    pipelineValue: (opportunities as any[]).reduce((sum, opp) => sum + (opp?.amount || 0), 0),\r\n+    conversionRate: (leads as any[]).length > 0 \r\n+      ? ((leads as any[]).filter(l => l?.status === 'won').length / (leads as any[]).length) * 100 \r\n+      : 0,\r\n   };\r\n \r\n   return {\r\n     leads,\r\n"
                }
            ],
            "date": 1740919588917,
            "name": "Commit-0",
            "content": "import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport { api } from '../../lib/api';\r\nimport type { SalesLead, SalesActivity, SalesOpportunity } from '../../types/sales';\r\n\r\nexport const useSales = () => {\r\n  const queryClient = useQueryClient();\r\n\r\n  const { data: leads = [], isLoading: leadsLoading } = useQuery({\r\n    queryKey: ['sales_leads'],\r\n    queryFn: () => api.get<SalesLead[]>('sales_leads'),\r\n  });\r\n\r\n  const { data: activities = [], isLoading: activitiesLoading } = useQuery({\r\n    queryKey: ['sales_activities'],\r\n    queryFn: () => api.get<SalesActivity[]>('sales_activities'),\r\n  });\r\n\r\n  const { data: opportunities = [], isLoading: opportunitiesLoading } = useQuery({\r\n    queryKey: ['sales_opportunities'],\r\n    queryFn: () => api.get<SalesOpportunity[]>('sales_opportunities'),\r\n  });\r\n\r\n  const createLead = useMutation({\r\n    mutationFn: (lead: Omit<SalesLead, 'id'>) => api.post<SalesLead>('sales_leads', lead),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['sales_leads'] });\r\n    },\r\n  });\r\n\r\n  const updateLead = useMutation({\r\n    mutationFn: ({ id, ...data }: Partial<SalesLead> & { id: string }) => \r\n      api.put<SalesLead>('sales_leads', id, data),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['sales_leads'] });\r\n    },\r\n  });\r\n\r\n  const addActivity = useMutation({\r\n    mutationFn: (activity: Omit<SalesActivity, 'id'>) => \r\n      api.post<SalesActivity>('sales_activities', activity),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['sales_activities'] });\r\n    },\r\n  });\r\n\r\n  // Calculate sales stats\r\n  const stats = {\r\n    totalLeads: leads.length,\r\n    qualifiedLeads: leads.filter((l: SalesLead) => l.status === 'qualified').length,\r\n    wonDeals: leads.filter((l: SalesLead) => l.status === 'won').length,\r\n    pipelineValue: opportunities.reduce((sum: number, opp: SalesOpportunity) => sum + (opp.amount || 0), 0),\r\n    conversionRate: leads.length > 0 ? (leads.filter((l: SalesLead) => l.status === 'won').length / leads.length) * 100 : 0,\r\n  };\r\n\r\n  return {\r\n    leads,\r\n    activities,\r\n    opportunities,\r\n    stats,\r\n    loading: leadsLoading || activitiesLoading || opportunitiesLoading,\r\n    createLead,\r\n    updateLead,\r\n    addActivity,\r\n  };\r\n};"
        }
    ]
}