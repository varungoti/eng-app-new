{
    "sourceFile": "src/hooks/useStudents.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1740924536875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1740924536875,
            "name": "Commit-0",
            "content": "import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport { supabase } from '../lib/supabase';\r\nimport { logger } from '../lib/logger';\r\nimport { useDataLoadTimeout } from './useDataLoadTimeout';\r\n//import type { Student } from '../types';\r\n\r\ntype DatabaseStudent = {\r\n  id: string;\r\n  name: string;\r\n  roll_number: string;\r\n  school_id: string;\r\n  grade_id: string;\r\n  gender: string;\r\n  date_of_birth: string;\r\n  contact_number: string;\r\n  email: string;\r\n  address: string;\r\n  guardian_name: string;\r\n  guardian_contact: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n  school: { name: string };\r\n  grade: { name: string };\r\n};\r\n\r\ntype StudentInput = {\r\n  name: string;\r\n  rollNumber: string;\r\n  schoolId: string;\r\n  gradeId: string;\r\n  gender: string;\r\n  dateOfBirth: Date;\r\n  contactNumber: string;\r\n  email: string;\r\n  studentAddress: string;\r\n  guardianName: string;\r\n  guardianContact: string;\r\n};\r\n\r\ntype StudentUpdate = {\r\n  id: string;\r\n  name?: string;\r\n  rollNumber?: string;\r\n  schoolId?: string;\r\n  gradeId?: string;\r\n  gender?: string;\r\n  dateOfBirth?: Date;\r\n  contactNumber?: string;\r\n  email?: string;\r\n  studentAddress?: string;\r\n  guardianName?: string;\r\n  guardianContact?: string;\r\n};\r\n\r\nexport const useStudents = () => {\r\n  const queryClient = useQueryClient();\r\n  const { clearTimeout } = useDataLoadTimeout({\r\n    source: 'useStudents',\r\n    onTimeout: () => {\r\n      logger.error('Failed to load students data', { source: 'useStudents' });\r\n    }\r\n  });\r\n\r\n  const { data: students = [], isLoading, error } = useQuery({\r\n    queryKey: ['students'],\r\n    queryFn: async () => {\r\n      const { data: studentsData, error: fetchError } = await supabase\r\n        .from('students')\r\n        .select(`\r\n          *,\r\n          school:schools(name),\r\n          grade:grades(name)\r\n        `)\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (fetchError) throw fetchError;\r\n      if (!studentsData) return [];\r\n\r\n      return (studentsData as unknown as DatabaseStudent[]).map((student) => ({\r\n        id: student.id,\r\n        name: student.name,\r\n        rollNumber: student.roll_number,\r\n        schoolId: student.school_id,\r\n        gradeId: student.grade_id,\r\n        gender: student.gender,\r\n        dateOfBirth: new Date(student.date_of_birth),\r\n        contactNumber: student.contact_number,\r\n        email: student.email,\r\n        studentAddress: student.address,\r\n        guardianName: student.guardian_name,\r\n        guardianContact: student.guardian_contact,\r\n        createdAt: new Date(student.created_at),\r\n        updatedAt: new Date(student.updated_at),\r\n        school: student.school,\r\n        grade: student.grade\r\n      }));\r\n    },\r\n    meta: { source: 'useStudents' }\r\n  });\r\n\r\n  const addStudent = useMutation({\r\n    mutationFn: async (student: StudentInput) => {\r\n      const { data, error } = await supabase\r\n        .from('students')\r\n        .insert([{\r\n          name: student.name,\r\n          roll_number: student.rollNumber,\r\n          school_id: student.schoolId,\r\n          grade_id: student.gradeId,\r\n          gender: student.gender,\r\n          date_of_birth: student.dateOfBirth.toISOString(),\r\n          contact_number: student.contactNumber,\r\n          email: student.email,\r\n          address: student.studentAddress,\r\n          guardian_name: student.guardianName,\r\n          guardian_contact: student.guardianContact\r\n        }])\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      return data as unknown as DatabaseStudent;\r\n    },\r\n    onSuccess: () => {\r\n      clearTimeout();\r\n      queryClient.invalidateQueries({ queryKey: ['students'] });\r\n    }\r\n  });\r\n\r\n  const updateStudent = useMutation({\r\n    mutationFn: async ({ id, ...updates }: StudentUpdate) => {\r\n      const { error } = await supabase\r\n        .from('students')\r\n        .update({\r\n          name: updates.name,\r\n          roll_number: updates.rollNumber,\r\n          school_id: updates.schoolId,\r\n          grade_id: updates.gradeId,\r\n          gender: updates.gender,\r\n          date_of_birth: updates.dateOfBirth?.toISOString(),\r\n          contact_number: updates.contactNumber,\r\n          email: updates.email,\r\n          address: updates.studentAddress,\r\n          guardian_name: updates.guardianName,\r\n          guardian_contact: updates.guardianContact\r\n        })\r\n        .eq('id', id);\r\n\r\n      if (error) throw error;\r\n    },\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['students'] });\r\n    }\r\n  });\r\n\r\n  const deleteStudent = useMutation({\r\n    mutationFn: async (id: string) => {\r\n      const { error } = await supabase\r\n        .from('students')\r\n        .delete()\r\n        .eq('id', id);\r\n\r\n      if (error) throw error;\r\n    },\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['students'] });\r\n    }\r\n  });\r\n\r\n  return {\r\n    students,\r\n    loading: isLoading,\r\n    error,\r\n    addStudent,\r\n    updateStudent,\r\n    deleteStudent\r\n  };\r\n};"
        }
    ]
}