{
    "sourceFile": "src/hooks/useContent/api.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1740918206958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740918215737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { supabase } from '../../lib/supabase';\r\n import { logger } from '../../lib/logger';\r\n import type { Database } from '../../lib/database.types';\r\n-import type { Topic, SubTopic, Lesson,  Exercise } from '../../types';\r\n+import type { Topic, SubTopic, Lesson, QuestionExtended, Exercise } from '../../types';\r\n \r\n export const fetchGrades = async () => {\r\n   const { data, error } = await supabase\r\n     .from('grades')\r\n"
                },
                {
                    "date": 1740918226863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { supabase } from '../../lib/supabase';\r\n import { logger } from '../../lib/logger';\r\n import type { Database } from '../../lib/database.types';\r\n-import type { Topic, SubTopic, Lesson, QuestionExtended, Exercise } from '../../types';\r\n+import type { Topic, SubTopic, Lesson, Question, Exercise } from '../../types';\r\n \r\n export const fetchGrades = async () => {\r\n   const { data, error } = await supabase\r\n     .from('grades')\r\n"
                },
                {
                    "date": 1740918233127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { supabase } from '../../lib/supabase';\r\n import { logger } from '../../lib/logger';\r\n import type { Database } from '../../lib/database.types';\r\n-import type { Topic, SubTopic, Lesson, Question, Exercise } from '../../types';\r\n+import type { Topic, SubTopic, Lesson, Question, Exerciseprompt } from '../../types';\r\n \r\n export const fetchGrades = async () => {\r\n   const { data, error } = await supabase\r\n     .from('grades')\r\n"
                },
                {
                    "date": 1740918276621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { supabase } from '../../lib/supabase';\r\n import { logger } from '../../lib/logger';\r\n import type { Database } from '../../lib/database.types';\r\n-import type { Topic, SubTopic, Lesson, Question, Exerciseprompt } from '../../types';\r\n+import type { Topic, SubTopic, Lesson, Question, ExercisePrompt } from '../../types';\r\n \r\n export const fetchGrades = async () => {\r\n   const { data, error } = await supabase\r\n     .from('grades')\r\n@@ -80,12 +80,12 @@\n   const { data, error } = await supabase\r\n     .from('topics')\r\n     .upsert({\r\n       id: topic.id,\r\n-      grade_id: topic.gradeId,\r\n+      grade_id: topic.grade_id,\r\n       title: topic.title,\r\n       description: topic.description,\r\n-      order: topic.order\r\n+      order: topic.order_index\r\n     })\r\n     .select()\r\n     .single();\r\n \r\n"
                },
                {
                    "date": 1740918308155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,44 +97,44 @@\n   const { data, error } = await supabase\r\n     .from('sub_topics')\r\n     .upsert({\r\n       id: subTopic.id,\r\n-      topic_id: subTopic.topicId,\r\n+      topic_id: subTopic.topicId || subTopic.topic_id,\r\n       title: subTopic.title,\r\n       description: subTopic.description,\r\n-      order: subTopic.order\r\n+      order: subTopic.order || subTopic.order_index\r\n     })\r\n     .select()\r\n     .single();\r\n \r\n   if (error) throw error;\r\n   return data;\r\n };\r\n \r\n-export const upsertLesson = async (lesson: Partial<Lesson>) => {\r\n+export const upsertLesson = async (lesson: Partial<Lesson> & { exercises?: any[] }) => {\r\n   const { id, exercises, ...lessonData } = lesson;\r\n \r\n   // First upsert the lesson\r\n   const { data: lessonResult, error: lessonError } = await supabase\r\n     .from('lessons')\r\n     .upsert({\r\n       id,\r\n-      sub_topic_id: lessonData.subTopicId,\r\n+      sub_topic_id: lessonData.subtopic_id,\r\n       title: lessonData.title,\r\n       description: lessonData.description,\r\n-      order: lessonData.order,\r\n-      teacher_script: lessonData.teacherScript,\r\n-      teacher_prompt: lessonData.teacherPrompt,\r\n-      sample_answer: lessonData.sampleAnswer\r\n+      order: lessonData.order_index,\r\n+      teacher_script: lessonData.content,\r\n+      teacher_prompt: lesson.contentheading || '',\r\n+      sample_answer: ''\r\n     })\r\n     .select()\r\n     .single();\r\n \r\n   if (lessonError) throw lessonError;\r\n \r\n   // Then handle exercises if provided\r\n   if (exercises) {\r\n-    const exercisesWithLessonId = exercises.map(exercise => ({\r\n+    const exercisesWithLessonId = exercises.map((exercise: any) => ({\r\n       ...exercise,\r\n       lesson_id: lessonResult.id\r\n     }));\r\n \r\n"
                },
                {
                    "date": 1740918623961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,10 +61,9 @@\n       order,\r\n       teacher_script,\r\n       teacher_prompt,\r\n       sample_answer,\r\n-      \r\n-    `)\r\n+          `)\r\n     .order('order');\r\n \r\n   if (error) throw error;\r\n   return data;\r\n"
                },
                {
                    "date": 1740918727223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,185 @@\n+import { supabase } from '../../lib/supabase';\r\n+import { logger } from '../../lib/logger';\r\n+import type { Database } from '../../lib/database.types';\r\n+import type { Topic, SubTopic, Lesson, Question, ExercisePrompt } from '../../types';\r\n+\r\n+export const fetchGrades = async () => {\r\n+  const { data, error } = await supabase\r\n+    .from('grades')\r\n+    .select(`\r\n+      id,\r\n+      name,\r\n+      level,\r\n+      description,\r\n+      created_at,\r\n+      updated_at\r\n+    `)\r\n+    .order('level');\r\n+\r\n+  if (error) throw error;\r\n+  return data;\r\n+};\r\n+\r\n+export const fetchTopics = async () => {\r\n+  const { data, error } = await supabase\r\n+    .from('topics')\r\n+    .select(`\r\n+      id,\r\n+      grade_id,\r\n+      title,\r\n+      description,\r\n+      order,\r\n+      created_at,\r\n+      updated_at\r\n+    `)\r\n+    .order('order');\r\n+\r\n+  if (error) throw error;\r\n+  return data;\r\n+};\r\n+\r\n+export const fetchSubTopics = async () => {\r\n+  const { data, error } = await supabase\r\n+    .from('sub_topics')\r\n+    .select(`\r\n+      id,\r\n+      topic_id,\r\n+      title,\r\n+      description,\r\n+      order,\r\n+      created_at,\r\n+      updated_at\r\n+    `)\r\n+    .order('order');\r\n+\r\n+  if (error) throw error;\r\n+  return data;\r\n+};\r\n+\r\n+export const fetchLessons = async () => {\r\n+  const { data, error } = await supabase\r\n+    .from('lessons')\r\n+    .select(`\r\n+      id,\r\n+      sub_topic_id,\r\n+      title,\r\n+      description,\r\n+      content\r\n+      order,\r\n+      teacher_script,\r\n+      teacher_prompt,\r\n+      sample_answer,\r\n+      contentheading,\r\n+      lesson_status,\r\n+      progress_data,\r\n+      completed_at,\r\n+      difficulty,\r\n+      voice_id,\r\n+      total_questions\r\n+    `)\r\n+    .order('order');\r\n+\r\n+  if (error) throw error;\r\n+  return data;\r\n+};\r\n+\r\n+export const upsertTopic = async (topic: Partial<Topic>) => {\r\n+  const { data, error } = await supabase\r\n+    .from('topics')\r\n+    .upsert({\r\n+      id: topic.id,\r\n+      grade_id: topic.grade_id,\r\n+      title: topic.title,\r\n+      description: topic.description,\r\n+      order: topic.order_index\r\n+    })\r\n+    .select()\r\n+    .single();\r\n+\r\n+  if (error) throw error;\r\n+  return data;\r\n+};\r\n+\r\n+export const upsertSubTopic = async (subTopic: Partial<SubTopic>) => {\r\n+  const { data, error } = await supabase\r\n+    .from('sub_topics')\r\n+    .upsert({\r\n+      id: subTopic.id,\r\n+      topic_id: subTopic.topicId || subTopic.topic_id,\r\n+      title: subTopic.title,\r\n+      description: subTopic.description,\r\n+      order: subTopic.order || subTopic.order_index\r\n+    })\r\n+    .select()\r\n+    .single();\r\n+\r\n+  if (error) throw error;\r\n+  return data;\r\n+};\r\n+\r\n+export const upsertLesson = async (lesson: Partial<Lesson> & { exercises?: any[] }) => {\r\n+  const { id, exercises, ...lessonData } = lesson;\r\n+\r\n+  // First upsert the lesson\r\n+  const { data: lessonResult, error: lessonError } = await supabase\r\n+    .from('lessons')\r\n+    .upsert({\r\n+      id,\r\n+      sub_topic_id: lessonData.subtopic_id,\r\n+      title: lessonData.title,\r\n+      description: lessonData.description,\r\n+      order: lessonData.order_index,\r\n+      teacher_script: lessonData.content,\r\n+      teacher_prompt: lesson.contentheading || '',\r\n+      sample_answer: '',\r\n+\r\n+      \r\n+    })\r\n+    .select()\r\n+    .single();\r\n+\r\n+  if (lessonError) throw lessonError;\r\n+\r\n+  // Then handle exercises if provided\r\n+  if (exercises) {\r\n+    const exercisesWithLessonId = exercises.map((exercise: any) => ({\r\n+      ...exercise,\r\n+      lesson_id: lessonResult.id\r\n+    }));\r\n+\r\n+    const { error: exercisesError } = await supabase\r\n+      .from('exercises')\r\n+      .upsert(exercisesWithLessonId);\r\n+\r\n+    if (exercisesError) throw exercisesError;\r\n+  }\r\n+\r\n+  return lessonResult;\r\n+};\r\n+\r\n+export const deleteTopic = async (id: string) => {\r\n+  const { error } = await supabase\r\n+    .from('topics')\r\n+    .delete()\r\n+    .eq('id', id);\r\n+\r\n+  if (error) throw error;\r\n+};\r\n+\r\n+export const deleteSubTopic = async (id: string) => {\r\n+  const { error } = await supabase\r\n+    .from('sub_topics')\r\n+    .delete()\r\n+    .eq('id', id);\r\n+\r\n+  if (error) throw error;\r\n+};\r\n+\r\n+export const deleteLesson = async (id: string) => {\r\n+  const { error } = await supabase\r\n+    .from('lessons')\r\n+    .delete()\r\n+    .eq('id', id);\r\n+\r\n+  if (error) throw error;\r\n+};\n\\ No newline at end of file\n"
                }
            ],
            "date": 1740918206958,
            "name": "Commit-0",
            "content": "import { supabase } from '../../lib/supabase';\r\nimport { logger } from '../../lib/logger';\r\nimport type { Database } from '../../lib/database.types';\r\nimport type { Topic, SubTopic, Lesson,  Exercise } from '../../types';\r\n\r\nexport const fetchGrades = async () => {\r\n  const { data, error } = await supabase\r\n    .from('grades')\r\n    .select(`\r\n      id,\r\n      name,\r\n      level,\r\n      description\r\n    `)\r\n    .order('level');\r\n\r\n  if (error) throw error;\r\n  return data;\r\n};\r\n\r\nexport const fetchTopics = async () => {\r\n  const { data, error } = await supabase\r\n    .from('topics')\r\n    .select(`\r\n      id,\r\n      grade_id,\r\n      title,\r\n      description,\r\n      order\r\n    `)\r\n    .order('order');\r\n\r\n  if (error) throw error;\r\n  return data;\r\n};\r\n\r\nexport const fetchSubTopics = async () => {\r\n  const { data, error } = await supabase\r\n    .from('sub_topics')\r\n    .select(`\r\n      id,\r\n      topic_id,\r\n      title,\r\n      description,\r\n      order\r\n    `)\r\n    .order('order');\r\n\r\n  if (error) throw error;\r\n  return data;\r\n};\r\n\r\nexport const fetchLessons = async () => {\r\n  const { data, error } = await supabase\r\n    .from('lessons')\r\n    .select(`\r\n      id,\r\n      sub_topic_id,\r\n      title,\r\n      description,\r\n      order,\r\n      teacher_script,\r\n      teacher_prompt,\r\n      sample_answer,\r\n      exercises (\r\n        id,\r\n        prompt,\r\n        media_url,\r\n        media_type,\r\n        say_text\r\n      )\r\n    `)\r\n    .order('order');\r\n\r\n  if (error) throw error;\r\n  return data;\r\n};\r\n\r\nexport const upsertTopic = async (topic: Partial<Topic>) => {\r\n  const { data, error } = await supabase\r\n    .from('topics')\r\n    .upsert({\r\n      id: topic.id,\r\n      grade_id: topic.gradeId,\r\n      title: topic.title,\r\n      description: topic.description,\r\n      order: topic.order\r\n    })\r\n    .select()\r\n    .single();\r\n\r\n  if (error) throw error;\r\n  return data;\r\n};\r\n\r\nexport const upsertSubTopic = async (subTopic: Partial<SubTopic>) => {\r\n  const { data, error } = await supabase\r\n    .from('sub_topics')\r\n    .upsert({\r\n      id: subTopic.id,\r\n      topic_id: subTopic.topicId,\r\n      title: subTopic.title,\r\n      description: subTopic.description,\r\n      order: subTopic.order\r\n    })\r\n    .select()\r\n    .single();\r\n\r\n  if (error) throw error;\r\n  return data;\r\n};\r\n\r\nexport const upsertLesson = async (lesson: Partial<Lesson>) => {\r\n  const { id, exercises, ...lessonData } = lesson;\r\n\r\n  // First upsert the lesson\r\n  const { data: lessonResult, error: lessonError } = await supabase\r\n    .from('lessons')\r\n    .upsert({\r\n      id,\r\n      sub_topic_id: lessonData.subTopicId,\r\n      title: lessonData.title,\r\n      description: lessonData.description,\r\n      order: lessonData.order,\r\n      teacher_script: lessonData.teacherScript,\r\n      teacher_prompt: lessonData.teacherPrompt,\r\n      sample_answer: lessonData.sampleAnswer\r\n    })\r\n    .select()\r\n    .single();\r\n\r\n  if (lessonError) throw lessonError;\r\n\r\n  // Then handle exercises if provided\r\n  if (exercises) {\r\n    const exercisesWithLessonId = exercises.map(exercise => ({\r\n      ...exercise,\r\n      lesson_id: lessonResult.id\r\n    }));\r\n\r\n    const { error: exercisesError } = await supabase\r\n      .from('exercises')\r\n      .upsert(exercisesWithLessonId);\r\n\r\n    if (exercisesError) throw exercisesError;\r\n  }\r\n\r\n  return lessonResult;\r\n};\r\n\r\nexport const deleteTopic = async (id: string) => {\r\n  const { error } = await supabase\r\n    .from('topics')\r\n    .delete()\r\n    .eq('id', id);\r\n\r\n  if (error) throw error;\r\n};\r\n\r\nexport const deleteSubTopic = async (id: string) => {\r\n  const { error } = await supabase\r\n    .from('sub_topics')\r\n    .delete()\r\n    .eq('id', id);\r\n\r\n  if (error) throw error;\r\n};\r\n\r\nexport const deleteLesson = async (id: string) => {\r\n  const { error } = await supabase\r\n    .from('lessons')\r\n    .delete()\r\n    .eq('id', id);\r\n\r\n  if (error) throw error;\r\n};"
        }
    ]
}