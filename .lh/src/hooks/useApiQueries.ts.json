{
    "sourceFile": "src/hooks/useApiQueries.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1740919858232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740919865203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n   content_id: string;\r\n   valid_until: string | null;\r\n }\r\n \r\n-interface SupabaseClass {\r\n+export interface SupabaseClass {\r\n   id: string;\r\n   name: string;\r\n   description: string | null;\r\n   created_at: string;\r\n"
                },
                {
                    "date": 1740919872842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n   id: string;\r\n   name: string;\r\n }\r\n \r\n-interface RawStudent {\r\n+export interface RawStudent {\r\n   id: string;\r\n   name: string;\r\n   email: string;\r\n }\r\n@@ -115,9 +115,9 @@\n   content_id: string;\r\n   valid_until: string;\r\n }\r\n \r\n-interface RawClass {\r\n+export interface RawClass {\r\n   id: string;\r\n   name: string;\r\n   description: string | null;\r\n   created_at: string;\r\n"
                },
                {
                    "date": 1740919970637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,33 +15,23 @@\n   guardian_contact?: string;\r\n }\r\n \r\n interface ClassStudent {\r\n-  student_id: any;\r\n-  assigned_at: any;\r\n-  student: SupabaseStudent;\r\n+  student_id: string;\r\n+  assigned_at: string;\r\n+  student: Student;\r\n }\r\n \r\n interface ClassAttributes {\r\n   name: string;\r\n   description?: string;\r\n-  students?: {\r\n-    id: string;\r\n-    firstName: string;\r\n-    lastName: string;\r\n-    rollNumber: string;\r\n-    gender?: string;\r\n-    dateOfBirth?: string;\r\n-    contactNumber?: string;\r\n-    email?: string;\r\n-    guardianName?: string;\r\n-    guardianContact?: string;\r\n-  }[];\r\n+  students?: Student[];\r\n   lessons?: any[];\r\n   courses?: { data: any[] };\r\n   grade?: {\r\n     id: string;\r\n     name: string;\r\n+    level?: number;\r\n   };\r\n }\r\n \r\n interface ClassData {\r\n@@ -55,14 +45,18 @@\n \r\n interface SupabaseGrade {\r\n   id: string;\r\n   name: string;\r\n+  level: number;\r\n+  description?: string;\r\n }\r\n \r\n interface SupabaseStudent {\r\n-  id: any;\r\n-  name: any;\r\n-  email: any;\r\n+  id: string;\r\n+  first_name: string;\r\n+  last_name: string;\r\n+  email?: string;\r\n+  roll_number?: string;\r\n }\r\n \r\n interface SupabaseClassStudent {\r\n   student_id: string;\r\n@@ -73,135 +67,91 @@\n interface SupabaseContent {\r\n   id: string;\r\n   content_type: string;\r\n   content_id: string;\r\n-  valid_until: string | null;\r\n+  valid_from?: string;\r\n+  valid_until?: string;\r\n }\r\n \r\n export interface SupabaseClass {\r\n   id: string;\r\n   name: string;\r\n   description: string | null;\r\n   created_at: string;\r\n   created_by: string;\r\n+  grade_id: string;\r\n   grade: SupabaseGrade;\r\n   class_students: SupabaseClassStudent[];\r\n   assigned_content: SupabaseContent[];\r\n+  max_students?: number;\r\n+  status?: string;\r\n }\r\n \r\n-interface RawGrade {\r\n+export interface ClassRecord {\r\n   id: string;\r\n   name: string;\r\n-}\r\n-\r\n-export interface RawStudent {\r\n-  id: string;\r\n-  name: string;\r\n-  email: string;\r\n-}\r\n-\r\n-interface RawClassStudent {\r\n-  student_id: any;\r\n-  assigned_at: any;\r\n-  student: {\r\n-    id: any;\r\n-    name: any;\r\n-    email: any;\r\n-  }[];\r\n-}\r\n-\r\n-interface RawContent {\r\n-  id: string;\r\n-  content_type: string;\r\n-  content_id: string;\r\n-  valid_until: string;\r\n-}\r\n-\r\n-export interface RawClass {\r\n-  id: string;\r\n-  name: string;\r\n   description: string | null;\r\n   created_at: string;\r\n   created_by: string;\r\n-  grade: RawGrade | null;\r\n-  class_students: RawClassStudent[] | null;\r\n-  assigned_content: RawContent[] | null;\r\n+  grade: SupabaseGrade | null;\r\n+  class_students: ClassStudent[] | null;\r\n+  assigned_content: SupabaseContent[] | null;\r\n+  max_students?: number;\r\n+  status?: string;\r\n }\r\n \r\n-interface ClassGrade {\r\n-  id: string;\r\n-  name: string;\r\n-}\r\n-\r\n-interface AssignedContent {\r\n-  id: string;\r\n-  content_type: string;\r\n-  content_id: string;\r\n-  valid_until: string;\r\n-}\r\n-\r\n-interface ClassRecord {\r\n-  id: string;\r\n-  name: string;\r\n-  description: string | null;\r\n-  created_at: string;\r\n-  created_by: string;\r\n-  grade: ClassGrade | null;\r\n-  class_students: ClassStudent[] | null;\r\n-  assigned_content: AssignedContent[] | null;\r\n-}\r\n-export const useTopics = (topicID: string) => {\r\n+export const useTopics = (gradeId: string) => {\r\n   return useQuery({\r\n-    queryKey: ['topics', topicID],\r\n-    queryFn: () => api.get(`/topics/${topicID}`),\r\n-    enabled: !!topicID\r\n+    queryKey: ['topics', gradeId],\r\n+    queryFn: () => api.get<any[]>('topics', { where: { grade_id: gradeId } }),\r\n+    enabled: !!gradeId\r\n   });\r\n };\r\n \r\n-export const useSubTopics = (topicID: string) => {\r\n+export const useSubTopics = (topicId: string) => {\r\n   return useQuery({\r\n-    queryKey: ['subtopics', topicID],\r\n-    queryFn: () => api.get(`/subtopics/${topicID}`),\r\n-    enabled: !!topicID\r\n+    queryKey: ['subtopics', topicId],\r\n+    queryFn: () => api.get<any[]>('sub_topics', { where: { topic_id: topicId } }),\r\n+    enabled: !!topicId\r\n   });\r\n };\r\n \r\n export const useLesson = (lessonId: string) => {\r\n   return useQuery({\r\n     queryKey: ['lesson', lessonId],\r\n-    queryFn: () => api.get(`/lessons/${lessonId}`),\r\n+    queryFn: () => api.get<any>('lessons', { where: { id: lessonId } }),\r\n     enabled: !!lessonId\r\n   });\r\n };\r\n \r\n-export const useQuestions = (questionsId: string) => {\r\n+export const useQuestions = (lessonId: string) => {\r\n   return useQuery({\r\n-    queryKey: ['questions', questionsId],\r\n-    queryFn: () => api.get(`/questions/${questionsId}`),\r\n-    enabled: !!questionsId\r\n+    queryKey: ['questions', lessonId],\r\n+    queryFn: () => api.get<any[]>('questions', { where: { lesson_id: lessonId } }),\r\n+    enabled: !!lessonId\r\n   });\r\n };\r\n \r\n-export const useExercisePrompts = (exercise_promptsId: string) => {\r\n+export const useExercisePrompts = (questionId: string) => {\r\n   return useQuery({\r\n-    queryKey: ['exercise_prompts', exercise_promptsId],\r\n-    queryFn: () => api.get(`/exercise_prompts/${exercise_promptsId}`),\r\n-    enabled: !!exercise_promptsId\r\n+    queryKey: ['exercise_prompts', questionId],\r\n+    queryFn: () => api.get<any[]>('exercise_prompts', { where: { question_id: questionId } }),\r\n+    enabled: !!questionId\r\n   });\r\n };\r\n \r\n-export const useActivities = (activitiesId: string) => {\r\n+export const useActivities = (lessonId: string) => {\r\n   return useQuery({\r\n-    queryKey: ['activities', activitiesId],\r\n-    queryFn: () => api.get(`/activities/${activitiesId}`),\r\n-    enabled: !!activitiesId\r\n+    queryKey: ['activities', lessonId],\r\n+    queryFn: () => api.get<any[]>('activities', { where: { lesson_id: lessonId } }),\r\n+    enabled: !!lessonId\r\n   });\r\n };\r\n \r\n export const useUpdateTeacherProgress = () => {\r\n   return useMutation({\r\n     mutationFn: ({ teacherId, data }: { teacherId: string; data: any }) =>\r\n-      api.put<any>(`/teachers/${teacherId}/progress`, teacherId, data)\r\n+      api.put<any>('teachers', teacherId, data)\r\n   });\r\n };\r\n \r\n export function useClasses(userId: string) {\r\n@@ -224,25 +174,32 @@\n           name,\r\n           description,\r\n           created_at,\r\n           created_by,\r\n-          grade:grades (\r\n+          max_students,\r\n+          status,\r\n+          grade:grade_id (\r\n             id,\r\n-            name\r\n+            name,\r\n+            level,\r\n+            description\r\n           ),\r\n           class_students!left (\r\n             student_id,\r\n             assigned_at,\r\n-            student:student_id!inner (\r\n+            student:students!student_id (\r\n               id,\r\n-              name,\r\n-              email\r\n+              first_name,\r\n+              last_name,\r\n+              email,\r\n+              roll_number\r\n             )\r\n           ),\r\n           assigned_content!left (\r\n             id,\r\n             content_type,\r\n             content_id,\r\n+            valid_from,\r\n             valid_until\r\n           )\r\n         `;\r\n \r\n@@ -274,57 +231,36 @@\n \r\n         // Transform the data to match the expected format with safe access\r\n         const transformedData = {\r\n           data: rawData.map(cls => {\r\n-            // Type guard for grade\r\n-            const isValidGrade = (grade: any): grade is SupabaseGrade => {\r\n-              return grade && typeof grade === 'object' && 'id' in grade && 'name' in grade;\r\n-            };\r\n-\r\n-            // Type guard for student\r\n-            const isValidStudent = (student: any): student is SupabaseStudent => {\r\n-              return student && typeof student === 'object' && 'id' in student && 'name' in student && 'email' in student;\r\n-            };\r\n-\r\n-            // Type guard for class student\r\n-            const isValidClassStudent = (cs: any): cs is { student: SupabaseStudent } => {\r\n-              return cs && typeof cs === 'object' && cs.student && isValidStudent(cs.student);\r\n-            };\r\n-\r\n-            // Type guard for content\r\n-            const isValidContent = (content: any): content is SupabaseContent => {\r\n-              return content && typeof content === 'object' && 'id' in content && 'content_type' in content && 'content_id' in content;\r\n-            };\r\n-\r\n             // Safely access grade data\r\n-            const grade = isValidGrade(cls.grade) ? {\r\n+            const grade = cls.grade ? {\r\n               id: String(cls.grade.id),\r\n-              name: String(cls.grade.name)\r\n+              name: String(cls.grade.name),\r\n+              level: cls.grade.level || 0\r\n             } : undefined;\r\n \r\n-            // Safely transform students with proper type assertions\r\n+            // Safely transform students\r\n             const students = Array.isArray(cls.class_students) \r\n               ? cls.class_students\r\n-                  .filter((cs): cs is RawClassStudent => \r\n-                    cs?.student?.[0] && 'id' in cs.student[0] && 'name' in cs.student[0] && 'email' in cs.student[0]\r\n-                  )\r\n-                  .map((cs) => ({\r\n-                    id: String(cs.student[0].id),\r\n-                    firstName: String(cs.student[0].name).split(' ')[0] || '',\r\n-                    lastName: String(cs.student[0].name).split(' ')[1] || '',\r\n-                    email: String(cs.student[0].email),\r\n-                    rollNumber: String(cs.student[0].id)\r\n+                  .filter(cs => cs?.student && typeof cs.student === 'object')\r\n+                  .map(cs => ({\r\n+                    id: String(cs.student.id),\r\n+                    firstName: String(cs.student.first_name || ''),\r\n+                    lastName: String(cs.student.last_name || ''),\r\n+                    email: String(cs.student.email || ''),\r\n+                    rollNumber: String(cs.student.roll_number || cs.student.id)\r\n                   }))\r\n               : [];\r\n \r\n             // Safely transform lessons with proper type assertions\r\n             const lessons = Array.isArray(cls.assigned_content)\r\n               ? cls.assigned_content\r\n-                  .filter(isValidContent)\r\n-                  .filter(content => content.content_type === 'LESSON')\r\n+                  .filter(content => content && content.content_type === 'LESSON')\r\n                   .map(lesson => ({\r\n                     id: String(lesson.content_id),\r\n                     title: `Lesson ${lesson.id}`,\r\n+                    validFrom: lesson.valid_from,\r\n                     validUntil: lesson.valid_until\r\n                   }))\r\n               : [];\r\n \r\n@@ -332,8 +268,10 @@\n               id: String(cls.id),\r\n               attributes: {\r\n                 name: String(cls.name),\r\n                 description: String(cls.description || ''),\r\n+                maxStudents: cls.max_students || 30,\r\n+                status: cls.status || 'active',\r\n                 grade,\r\n                 students,\r\n                 lessons,\r\n                 courses: { data: [] }\r\n@@ -367,8 +305,8 @@\n \r\n export const useCourse = (courseId: string) => {\r\n   return useQuery({\r\n     queryKey: ['course', courseId],\r\n-    queryFn: () => api.get(`/courses/${courseId}`),\r\n+    queryFn: () => api.get<any>('courses', { where: { id: courseId } }),\r\n     enabled: !!courseId\r\n   }); \r\n }; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1740920015128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,16 +23,24 @@\n \r\n interface ClassAttributes {\r\n   name: string;\r\n   description?: string;\r\n-  students?: Student[];\r\n+  students?: {\r\n+    id: string;\r\n+    firstName: string;\r\n+    lastName: string;\r\n+    rollNumber: string;\r\n+    email?: string;\r\n+  }[];\r\n   lessons?: any[];\r\n   courses?: { data: any[] };\r\n   grade?: {\r\n     id: string;\r\n     name: string;\r\n     level?: number;\r\n   };\r\n+  maxStudents?: number;\r\n+  status?: string;\r\n }\r\n \r\n interface ClassData {\r\n   id: string;\r\n@@ -233,23 +241,23 @@\n         const transformedData = {\r\n           data: rawData.map(cls => {\r\n             // Safely access grade data\r\n             const grade = cls.grade ? {\r\n-              id: String(cls.grade.id),\r\n-              name: String(cls.grade.name),\r\n-              level: cls.grade.level || 0\r\n+              id: String(cls.grade.id || ''),\r\n+              name: String(cls.grade.name || ''),\r\n+              level: Number(cls.grade.level || 0)\r\n             } : undefined;\r\n \r\n             // Safely transform students\r\n             const students = Array.isArray(cls.class_students) \r\n               ? cls.class_students\r\n                   .filter(cs => cs?.student && typeof cs.student === 'object')\r\n                   .map(cs => ({\r\n-                    id: String(cs.student.id),\r\n+                    id: String(cs.student.id || ''),\r\n                     firstName: String(cs.student.first_name || ''),\r\n                     lastName: String(cs.student.last_name || ''),\r\n                     email: String(cs.student.email || ''),\r\n-                    rollNumber: String(cs.student.roll_number || cs.student.id)\r\n+                    rollNumber: String(cs.student.roll_number || cs.student.id || '')\r\n                   }))\r\n               : [];\r\n \r\n             // Safely transform lessons with proper type assertions\r\n"
                },
                {
                    "date": 1740920044000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,25 +239,25 @@\n \r\n         // Transform the data to match the expected format with safe access\r\n         const transformedData = {\r\n           data: rawData.map(cls => {\r\n-            // Safely access grade data\r\n+            // Safely access grade data with type assertion\r\n             const grade = cls.grade ? {\r\n-              id: String(cls.grade.id || ''),\r\n-              name: String(cls.grade.name || ''),\r\n-              level: Number(cls.grade.level || 0)\r\n+              id: String((cls.grade as any).id || ''),\r\n+              name: String((cls.grade as any).name || ''),\r\n+              level: Number((cls.grade as any).level || 0)\r\n             } : undefined;\r\n \r\n-            // Safely transform students\r\n+            // Safely transform students with type assertion\r\n             const students = Array.isArray(cls.class_students) \r\n               ? cls.class_students\r\n                   .filter(cs => cs?.student && typeof cs.student === 'object')\r\n                   .map(cs => ({\r\n-                    id: String(cs.student.id || ''),\r\n-                    firstName: String(cs.student.first_name || ''),\r\n-                    lastName: String(cs.student.last_name || ''),\r\n-                    email: String(cs.student.email || ''),\r\n-                    rollNumber: String(cs.student.roll_number || cs.student.id || '')\r\n+                    id: String((cs.student as any).id || ''),\r\n+                    firstName: String((cs.student as any).first_name || ''),\r\n+                    lastName: String((cs.student as any).last_name || ''),\r\n+                    email: String((cs.student as any).email || ''),\r\n+                    rollNumber: String((cs.student as any).roll_number || (cs.student as any).id || '')\r\n                   }))\r\n               : [];\r\n \r\n             // Safely transform lessons with proper type assertions\r\n"
                },
                {
                    "date": 1740920254616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,320 +1,374 @@\n-import { useQuery, useMutation } from '@tanstack/react-query';\r\n-import { api } from '@/lib/api';\r\n-import { supabase } from '@/lib/supabase';\r\n-\r\n-export interface Student {\r\n-  id: string;\r\n-  first_name: string;\r\n-  last_name: string;\r\n-  roll_number: string;\r\n-  gender?: string;\r\n-  date_of_birth?: string;\r\n-  contact_number?: string;\r\n-  email?: string;\r\n-  guardian_name?: string;\r\n-  guardian_contact?: string;\r\n-}\r\n-\r\n-interface ClassStudent {\r\n-  student_id: string;\r\n-  assigned_at: string;\r\n-  student: Student;\r\n-}\r\n-\r\n-interface ClassAttributes {\r\n-  name: string;\r\n-  description?: string;\r\n-  students?: {\r\n-    id: string;\r\n-    firstName: string;\r\n-    lastName: string;\r\n-    rollNumber: string;\r\n-    email?: string;\r\n-  }[];\r\n-  lessons?: any[];\r\n-  courses?: { data: any[] };\r\n-  grade?: {\r\n-    id: string;\r\n-    name: string;\r\n-    level?: number;\r\n-  };\r\n-  maxStudents?: number;\r\n-  status?: string;\r\n-}\r\n-\r\n-interface ClassData {\r\n-  id: string;\r\n-  attributes: ClassAttributes;\r\n-}\r\n-\r\n-interface ClassesResponse {\r\n-  data: ClassData[];\r\n-}\r\n-\r\n-interface SupabaseGrade {\r\n-  id: string;\r\n-  name: string;\r\n-  level: number;\r\n-  description?: string;\r\n-}\r\n-\r\n-interface SupabaseStudent {\r\n-  id: string;\r\n-  first_name: string;\r\n-  last_name: string;\r\n-  email?: string;\r\n-  roll_number?: string;\r\n-}\r\n-\r\n-interface SupabaseClassStudent {\r\n-  student_id: string;\r\n-  assigned_at: string;\r\n-  student: SupabaseStudent;\r\n-}\r\n-\r\n-interface SupabaseContent {\r\n-  id: string;\r\n-  content_type: string;\r\n-  content_id: string;\r\n-  valid_from?: string;\r\n-  valid_until?: string;\r\n-}\r\n-\r\n-export interface SupabaseClass {\r\n-  id: string;\r\n-  name: string;\r\n-  description: string | null;\r\n-  created_at: string;\r\n-  created_by: string;\r\n-  grade_id: string;\r\n-  grade: SupabaseGrade;\r\n-  class_students: SupabaseClassStudent[];\r\n-  assigned_content: SupabaseContent[];\r\n-  max_students?: number;\r\n-  status?: string;\r\n-}\r\n-\r\n-export interface ClassRecord {\r\n-  id: string;\r\n-  name: string;\r\n-  description: string | null;\r\n-  created_at: string;\r\n-  created_by: string;\r\n-  grade: SupabaseGrade | null;\r\n-  class_students: ClassStudent[] | null;\r\n-  assigned_content: SupabaseContent[] | null;\r\n-  max_students?: number;\r\n-  status?: string;\r\n-}\r\n-\r\n-export const useTopics = (gradeId: string) => {\r\n-  return useQuery({\r\n-    queryKey: ['topics', gradeId],\r\n-    queryFn: () => api.get<any[]>('topics', { where: { grade_id: gradeId } }),\r\n-    enabled: !!gradeId\r\n-  });\r\n-};\r\n-\r\n-export const useSubTopics = (topicId: string) => {\r\n-  return useQuery({\r\n-    queryKey: ['subtopics', topicId],\r\n-    queryFn: () => api.get<any[]>('sub_topics', { where: { topic_id: topicId } }),\r\n-    enabled: !!topicId\r\n-  });\r\n-};\r\n-\r\n-export const useLesson = (lessonId: string) => {\r\n-  return useQuery({\r\n-    queryKey: ['lesson', lessonId],\r\n-    queryFn: () => api.get<any>('lessons', { where: { id: lessonId } }),\r\n-    enabled: !!lessonId\r\n-  });\r\n-};\r\n-\r\n-export const useQuestions = (lessonId: string) => {\r\n-  return useQuery({\r\n-    queryKey: ['questions', lessonId],\r\n-    queryFn: () => api.get<any[]>('questions', { where: { lesson_id: lessonId } }),\r\n-    enabled: !!lessonId\r\n-  });\r\n-};\r\n-\r\n-export const useExercisePrompts = (questionId: string) => {\r\n-  return useQuery({\r\n-    queryKey: ['exercise_prompts', questionId],\r\n-    queryFn: () => api.get<any[]>('exercise_prompts', { where: { question_id: questionId } }),\r\n-    enabled: !!questionId\r\n-  });\r\n-};\r\n-\r\n-export const useActivities = (lessonId: string) => {\r\n-  return useQuery({\r\n-    queryKey: ['activities', lessonId],\r\n-    queryFn: () => api.get<any[]>('activities', { where: { lesson_id: lessonId } }),\r\n-    enabled: !!lessonId\r\n-  });\r\n-};\r\n-\r\n-export const useUpdateTeacherProgress = () => {\r\n-  return useMutation({\r\n-    mutationFn: ({ teacherId, data }: { teacherId: string; data: any }) =>\r\n-      api.put<any>('teachers', teacherId, data)\r\n-  });\r\n-};\r\n-\r\n-export function useClasses(userId: string) {\r\n-  return useQuery<ClassesResponse, Error>({\r\n-    queryKey: ['classes', userId],\r\n-    queryFn: async () => {\r\n-      try {\r\n-        // First get the user's session and role\r\n-        const { data: { session } } = await supabase.auth.getSession();\r\n-        if (!session?.user?.id) {\r\n-          throw new Error('No authenticated user found');\r\n-        }\r\n-\r\n-        const userRole = session.user.user_metadata?.role?.toUpperCase();\r\n-        console.log('Fetching classes for role:', userRole);\r\n-\r\n-        // Base query for all roles - using explicit foreign key references\r\n-        const baseQuery = `\r\n-          id,\r\n-          name,\r\n-          description,\r\n-          created_at,\r\n-          created_by,\r\n-          max_students,\r\n-          status,\r\n-          grade:grade_id (\r\n-            id,\r\n-            name,\r\n-            level,\r\n-            description\r\n-          ),\r\n-          class_students!left (\r\n-            student_id,\r\n-            assigned_at,\r\n-            student:students!student_id (\r\n-              id,\r\n-              first_name,\r\n-              last_name,\r\n-              email,\r\n-              roll_number\r\n-            )\r\n-          ),\r\n-          assigned_content!left (\r\n-            id,\r\n-            content_type,\r\n-            content_id,\r\n-            valid_from,\r\n-            valid_until\r\n-          )\r\n-        `;\r\n-\r\n-        // Execute query based on role with error handling\r\n-        let query = supabase\r\n-          .from('classes')\r\n-          .select(baseQuery);\r\n-\r\n-        // Add role-based filtering\r\n-        if (userRole !== 'SUPER_ADMIN' && userRole !== 'ADMIN') {\r\n-          query = query.eq('created_by', userId);\r\n-        }\r\n-\r\n-        // Add ordering\r\n-        query = query.order('created_at', { ascending: false });\r\n-\r\n-        // Execute query with proper error handling\r\n-        const { data: rawData, error: classesError } = await query;\r\n-\r\n-        if (classesError) {\r\n-          console.error('Error fetching classes:', classesError);\r\n-          return { data: [] };\r\n-        }\r\n-\r\n-        if (!rawData || !Array.isArray(rawData)) {\r\n-          console.log('No classes data available or invalid format');\r\n-          return { data: [] };\r\n-        }\r\n-\r\n-        // Transform the data to match the expected format with safe access\r\n-        const transformedData = {\r\n-          data: rawData.map(cls => {\r\n-            // Safely access grade data with type assertion\r\n-            const grade = cls.grade ? {\r\n-              id: String((cls.grade as any).id || ''),\r\n-              name: String((cls.grade as any).name || ''),\r\n-              level: Number((cls.grade as any).level || 0)\r\n-            } : undefined;\r\n-\r\n-            // Safely transform students with type assertion\r\n-            const students = Array.isArray(cls.class_students) \r\n-              ? cls.class_students\r\n-                  .filter(cs => cs?.student && typeof cs.student === 'object')\r\n-                  .map(cs => ({\r\n-                    id: String((cs.student as any).id || ''),\r\n-                    firstName: String((cs.student as any).first_name || ''),\r\n-                    lastName: String((cs.student as any).last_name || ''),\r\n-                    email: String((cs.student as any).email || ''),\r\n-                    rollNumber: String((cs.student as any).roll_number || (cs.student as any).id || '')\r\n-                  }))\r\n-              : [];\r\n-\r\n-            // Safely transform lessons with proper type assertions\r\n-            const lessons = Array.isArray(cls.assigned_content)\r\n-              ? cls.assigned_content\r\n-                  .filter(content => content && content.content_type === 'LESSON')\r\n-                  .map(lesson => ({\r\n-                    id: String(lesson.content_id),\r\n-                    title: `Lesson ${lesson.id}`,\r\n-                    validFrom: lesson.valid_from,\r\n-                    validUntil: lesson.valid_until\r\n-                  }))\r\n-              : [];\r\n-\r\n-            return {\r\n-              id: String(cls.id),\r\n-              attributes: {\r\n-                name: String(cls.name),\r\n-                description: String(cls.description || ''),\r\n-                maxStudents: cls.max_students || 30,\r\n-                status: cls.status || 'active',\r\n-                grade,\r\n-                students,\r\n-                lessons,\r\n-                courses: { data: [] }\r\n-              }\r\n-            };\r\n-          })\r\n-        };\r\n-\r\n-        console.log('Successfully transformed classes data:', {\r\n-          count: transformedData.data.length,\r\n-          sample: transformedData.data[0]\r\n-        });\r\n-\r\n-        return transformedData;\r\n-\r\n-      } catch (error) {\r\n-        console.error('Error in useClasses:', error);\r\n-        return { data: [] };\r\n-      }\r\n-    },\r\n-    enabled: !!userId,\r\n-    retry: 2,\r\n-    retryDelay: (attemptIndex: number) => Math.min(1000 * 2 ** attemptIndex, 30000),\r\n-    staleTime: 1000 * 60 * 5,\r\n-    refetchOnWindowFocus: false,\r\n-    refetchOnMount: true,\r\n-    refetchOnReconnect: false,\r\n-    refetchInterval: false\r\n-  });\r\n-}\r\n-\r\n-export const useCourse = (courseId: string) => {\r\n-  return useQuery({\r\n-    queryKey: ['course', courseId],\r\n-    queryFn: () => api.get<any>('courses', { where: { id: courseId } }),\r\n-    enabled: !!courseId\r\n-  }); \r\n+import { useQuery, useMutation } from '@tanstack/react-query';\n+import { api } from '@/lib/api';\n+import { supabase } from '@/lib/supabase';\n+\n+export interface Student {\n+  id: string;\n+  first_name: string;\n+  last_name: string;\n+  roll_number: string;\n+  gender?: string;\n+  date_of_birth?: string;\n+  contact_number?: string;\n+  email?: string;\n+  guardian_name?: string;\n+  guardian_contact?: string;\n+}\n+\n+interface ClassStudent {\n+  student_id: any;\n+  assigned_at: any;\n+  student: SupabaseStudent;\n+}\n+\n+interface ClassAttributes {\n+  name: string;\n+  description?: string;\n+  students?: {\n+    id: string;\n+    firstName: string;\n+    lastName: string;\n+    rollNumber: string;\n+    gender?: string;\n+    dateOfBirth?: string;\n+    contactNumber?: string;\n+    email?: string;\n+    guardianName?: string;\n+    guardianContact?: string;\n+  }[];\n+  lessons?: any[];\n+  courses?: { data: any[] };\n+  grade?: {\n+    id: string;\n+    name: string;\n+  };\n+}\n+\n+interface ClassData {\n+  id: string;\n+  attributes: ClassAttributes;\n+}\n+\n+interface ClassesResponse {\n+  data: ClassData[];\n+}\n+\n+interface SupabaseGrade {\n+  id: string;\n+  name: string;\n+}\n+\n+interface SupabaseStudent {\n+  id: any;\n+  name: any;\n+  email: any;\n+}\n+\n+interface SupabaseClassStudent {\n+  student_id: string;\n+  assigned_at: string;\n+  student: SupabaseStudent;\n+}\n+\n+interface SupabaseContent {\n+  id: string;\n+  content_type: string;\n+  content_id: string;\n+  valid_until: string | null;\n+}\n+\n+export interface SupabaseClass {\n+  id: string;\n+  name: string;\n+  description: string | null;\n+  created_at: string;\n+  created_by: string;\n+  grade: SupabaseGrade;\n+  class_students: SupabaseClassStudent[];\n+  assigned_content: SupabaseContent[];\n+}\n+\n+interface RawGrade {\n+  id: string;\n+  name: string;\n+}\n+\n+export interface RawStudent {\n+  id: string;\n+  name: string;\n+  email: string;\n+}\n+\n+interface RawClassStudent {\n+  student_id: any;\n+  assigned_at: any;\n+  student: {\n+    id: any;\n+    name: any;\n+    email: any;\n+  }[];\n+}\n+\n+interface RawContent {\n+  id: string;\n+  content_type: string;\n+  content_id: string;\n+  valid_until: string;\n+}\n+\n+export interface RawClass {\n+  id: string;\n+  name: string;\n+  description: string | null;\n+  created_at: string;\n+  created_by: string;\n+  grade: RawGrade | null;\n+  class_students: RawClassStudent[] | null;\n+  assigned_content: RawContent[] | null;\n+}\n+\n+interface ClassGrade {\n+  id: string;\n+  name: string;\n+}\n+\n+interface AssignedContent {\n+  id: string;\n+  content_type: string;\n+  content_id: string;\n+  valid_until: string;\n+}\n+\n+export interface ClassRecord {\n+  id: string;\n+  name: string;\n+  description: string | null;\n+  created_at: string;\n+  created_by: string;\n+  grade: ClassGrade | null;\n+  class_students: ClassStudent[] | null;\n+  assigned_content: AssignedContent[] | null;\n+}\n+export const useTopics = (topicID: string) => {\n+  return useQuery({\n+    queryKey: ['topics', topicID],\n+    queryFn: () => api.get(`/topics/${topicID}`),\n+    enabled: !!topicID\n+  });\n+};\n+\n+export const useSubTopics = (topicID: string) => {\n+  return useQuery({\n+    queryKey: ['subtopics', topicID],\n+    queryFn: () => api.get(`/subtopics/${topicID}`),\n+    enabled: !!topicID\n+  });\n+};\n+\n+export const useLesson = (lessonId: string) => {\n+  return useQuery({\n+    queryKey: ['lesson', lessonId],\n+    queryFn: () => api.get(`/lessons/${lessonId}`),\n+    enabled: !!lessonId\n+  });\n+};\n+\n+export const useQuestions = (questionsId: string) => {\n+  return useQuery({\n+    queryKey: ['questions', questionsId],\n+    queryFn: () => api.get(`/questions/${questionsId}`),\n+    enabled: !!questionsId\n+  });\n+};\n+\n+export const useExercisePrompts = (exercise_promptsId: string) => {\n+  return useQuery({\n+    queryKey: ['exercise_prompts', exercise_promptsId],\n+    queryFn: () => api.get(`/exercise_prompts/${exercise_promptsId}`),\n+    enabled: !!exercise_promptsId\n+  });\n+};\n+\n+export const useActivities = (activitiesId: string) => {\n+  return useQuery({\n+    queryKey: ['activities', activitiesId],\n+    queryFn: () => api.get(`/activities/${activitiesId}`),\n+    enabled: !!activitiesId\n+  });\n+};\n+\n+export const useUpdateTeacherProgress = () => {\n+  return useMutation({\n+    mutationFn: ({ teacherId, data }: { teacherId: string; data: any }) =>\n+      api.put<any>(`/teachers/${teacherId}/progress`, teacherId, data)\n+  });\n+};\n+\n+export function useClasses(userId: string) {\n+  return useQuery<ClassesResponse, Error>({\n+    queryKey: ['classes', userId],\n+    queryFn: async () => {\n+      try {\n+        // First get the user's session and role\n+        const { data: { session } } = await supabase.auth.getSession();\n+        if (!session?.user?.id) {\n+          throw new Error('No authenticated user found');\n+        }\n+\n+        const userRole = session.user.user_metadata?.role?.toUpperCase();\n+        console.log('Fetching classes for role:', userRole);\n+\n+        // Base query for all roles - using explicit foreign key references\n+        const baseQuery = `\n+          id,\n+          name,\n+          description,\n+          created_at,\n+          created_by,\n+          grade:grades (\n+            id,\n+            name\n+          ),\n+          class_students!left (\n+            student_id,\n+            assigned_at,\n+            student:student_id!inner (\n+              id,\n+              name,\n+              email\n+            )\n+          ),\n+          assigned_content!left (\n+            id,\n+            content_type,\n+            content_id,\n+            valid_until\n+          )\n+        `;\n+\n+        // Execute query based on role with error handling\n+        let query = supabase\n+          .from('classes')\n+          .select(baseQuery);\n+\n+        // Add role-based filtering\n+        if (userRole !== 'SUPER_ADMIN' && userRole !== 'ADMIN') {\n+          query = query.eq('created_by', userId);\n+        }\n+\n+        // Add ordering\n+        query = query.order('created_at', { ascending: false });\n+\n+        // Execute query with proper error handling\n+        const { data: rawData, error: classesError } = await query;\n+\n+        if (classesError) {\n+          console.error('Error fetching classes:', classesError);\n+          return { data: [] };\n+        }\n+\n+        if (!rawData || !Array.isArray(rawData)) {\n+          console.log('No classes data available or invalid format');\n+          return { data: [] };\n+        }\n+\n+        // Transform the data to match the expected format with safe access\n+        const transformedData = {\n+          data: rawData.map(cls => {\n+            // Type guard for grade\n+            const isValidGrade = (grade: any): grade is SupabaseGrade => {\n+              return grade && typeof grade === 'object' && 'id' in grade && 'name' in grade;\n+            };\n+\n+            // Type guard for student\n+            const isValidStudent = (student: any): student is SupabaseStudent => {\n+              return student && typeof student === 'object' && 'id' in student && 'name' in student && 'email' in student;\n+            };\n+\n+            // Type guard for class student\n+            const isValidClassStudent = (cs: any): cs is { student: SupabaseStudent } => {\n+              return cs && typeof cs === 'object' && cs.student && isValidStudent(cs.student);\n+            };\n+\n+            // Type guard for content\n+            const isValidContent = (content: any): content is SupabaseContent => {\n+              return content && typeof content === 'object' && 'id' in content && 'content_type' in content && 'content_id' in content;\n+            };\n+\n+            // Safely access grade data\n+            const grade = isValidGrade(cls.grade) ? {\n+              id: String(cls.grade.id),\n+              name: String(cls.grade.name)\n+            } : undefined;\n+\n+            // Safely transform students with proper type assertions\n+            const students = Array.isArray(cls.class_students) \n+              ? cls.class_students\n+                  .filter((cs): cs is RawClassStudent => \n+                    cs?.student?.[0] && 'id' in cs.student[0] && 'name' in cs.student[0] && 'email' in cs.student[0]\n+                  )\n+                  .map((cs) => ({\n+                    id: String(cs.student[0].id),\n+                    firstName: String(cs.student[0].name).split(' ')[0] || '',\n+                    lastName: String(cs.student[0].name).split(' ')[1] || '',\n+                    email: String(cs.student[0].email),\n+                    rollNumber: String(cs.student[0].id)\n+                  }))\n+              : [];\n+\n+            // Safely transform lessons with proper type assertions\n+            const lessons = Array.isArray(cls.assigned_content)\n+              ? cls.assigned_content\n+                  .filter(isValidContent)\n+                  .filter(content => content.content_type === 'LESSON')\n+                  .map(lesson => ({\n+                    id: String(lesson.content_id),\n+                    title: `Lesson ${lesson.id}`,\n+                    validUntil: lesson.valid_until\n+                  }))\n+              : [];\n+\n+            return {\n+              id: String(cls.id),\n+              attributes: {\n+                name: String(cls.name),\n+                description: String(cls.description || ''),\n+                grade,\n+                students,\n+                lessons,\n+                courses: { data: [] }\n+              }\n+            };\n+          })\n+        };\n+\n+        console.log('Successfully transformed classes data:', {\n+          count: transformedData.data.length,\n+          sample: transformedData.data[0]\n+        });\n+\n+        return transformedData;\n+\n+      } catch (error) {\n+        console.error('Error in useClasses:', error);\n+        return { data: [] };\n+      }\n+    },\n+    enabled: !!userId,\n+    retry: 2,\n+    retryDelay: (attemptIndex: number) => Math.min(1000 * 2 ** attemptIndex, 30000),\n+    staleTime: 1000 * 60 * 5,\n+    refetchOnWindowFocus: false,\n+    refetchOnMount: true,\n+    refetchOnReconnect: false,\n+    refetchInterval: false\n+  });\n+}\n+\n+export const useCourse = (courseId: string) => {\n+  return useQuery({\n+    queryKey: ['course', courseId],\n+    queryFn: () => api.get(`/courses/${courseId}`),\n+    enabled: !!courseId\n+  }); \n }; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1740920312992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,34 +15,28 @@\n   guardian_contact?: string;\n }\n \n interface ClassStudent {\n-  student_id: any;\n-  assigned_at: any;\n-  student: SupabaseStudent;\n+  student_id: string;\n+  assigned_at: string;\n+  student: Student;\n }\n \n interface ClassAttributes {\n   name: string;\n   description?: string;\n-  students?: {\n-    id: string;\n-    firstName: string;\n-    lastName: string;\n-    rollNumber: string;\n-    gender?: string;\n-    dateOfBirth?: string;\n-    contactNumber?: string;\n-    email?: string;\n-    guardianName?: string;\n-    guardianContact?: string;\n-  }[];\n+  students?: Student[];\n   lessons?: any[];\n+  topics?: any[];\n+  subtopics?: any[];\n   courses?: { data: any[] };\n   grade?: {\n     id: string;\n     name: string;\n+    level?: number;\n   };\n+  created_at?: string;\n+  updated_at?: string;\n }\n \n interface ClassData {\n   id: string;\n@@ -55,14 +49,20 @@\n \n interface SupabaseGrade {\n   id: string;\n   name: string;\n+  level: number;\n+  description?: string;\n+  created_at?: string;\n+  updated_at?: string;\n }\n \n interface SupabaseStudent {\n-  id: any;\n-  name: any;\n-  email: any;\n+  id: string;\n+  first_name: string;\n+  last_name: string;\n+  email?: string;\n+  roll_number?: string;\n }\n \n interface SupabaseClassStudent {\n   student_id: string;\n@@ -73,20 +73,24 @@\n interface SupabaseContent {\n   id: string;\n   content_type: string;\n   content_id: string;\n-  valid_until: string | null;\n+  valid_from?: string;\n+  valid_until?: string;\n }\n \n export interface SupabaseClass {\n   id: string;\n   name: string;\n   description: string | null;\n   created_at: string;\n+  updated_at?: string;\n   created_by: string;\n-  grade: SupabaseGrade;\n-  class_students: SupabaseClassStudent[];\n-  assigned_content: SupabaseContent[];\n+  grade_id?: string;\n+  grade?: SupabaseGrade;\n+  class_students?: SupabaseClassStudent[];\n+  assigned_content?: SupabaseContent[];\n+  max_students?: number;\n }\n \n interface RawGrade {\n   id: string;\n@@ -121,11 +125,11 @@\n   name: string;\n   description: string | null;\n   created_at: string;\n   created_by: string;\n-  grade: RawGrade | null;\n-  class_students: RawClassStudent[] | null;\n-  assigned_content: RawContent[] | null;\n+  grade?: SupabaseGrade;\n+  class_students?: any[];\n+  assigned_content?: any[];\n }\n \n interface ClassGrade {\n   id: string;\n@@ -144,60 +148,138 @@\n   name: string;\n   description: string | null;\n   created_at: string;\n   created_by: string;\n-  grade: ClassGrade | null;\n-  class_students: ClassStudent[] | null;\n-  assigned_content: AssignedContent[] | null;\n+  grade?: SupabaseGrade;\n+  class_students?: ClassStudent[];\n+  assigned_content?: SupabaseContent[];\n }\n-export const useTopics = (topicID: string) => {\n+\n+export const useTopics = (gradeId: string) => {\n   return useQuery({\n-    queryKey: ['topics', topicID],\n-    queryFn: () => api.get(`/topics/${topicID}`),\n-    enabled: !!topicID\n+    queryKey: ['topics', gradeId],\n+    queryFn: async () => {\n+      const { data, error } = await supabase\n+        .from('topics')\n+        .select('*')\n+        .eq('grade_id', gradeId)\n+        .order('order_index');\n+        \n+      if (error) throw error;\n+      return data || [];\n+    },\n+    enabled: !!gradeId\n   });\n };\n \n-export const useSubTopics = (topicID: string) => {\n+export const useSubTopics = (topicId: string) => {\n   return useQuery({\n-    queryKey: ['subtopics', topicID],\n-    queryFn: () => api.get(`/subtopics/${topicID}`),\n-    enabled: !!topicID\n+    queryKey: ['subtopics', topicId],\n+    queryFn: async () => {\n+      const { data, error } = await supabase\n+        .from('subtopics')\n+        .select('*')\n+        .eq('topic_id', topicId)\n+        .order('order_index');\n+        \n+      if (error) throw error;\n+      return data || [];\n+    },\n+    enabled: !!topicId\n   });\n };\n \n export const useLesson = (lessonId: string) => {\n   return useQuery({\n     queryKey: ['lesson', lessonId],\n-    queryFn: () => api.get(`/lessons/${lessonId}`),\n+    queryFn: async () => {\n+      const { data, error } = await supabase\n+        .from('lessons')\n+        .select(`\n+          *,\n+          questions(*)\n+        `)\n+        .eq('id', lessonId)\n+        .single();\n+        \n+      if (error) throw error;\n+      return data;\n+    },\n     enabled: !!lessonId\n   });\n };\n \n-export const useQuestions = (questionsId: string) => {\n+export const useLessons = (subtopicId: string) => {\n   return useQuery({\n-    queryKey: ['questions', questionsId],\n-    queryFn: () => api.get(`/questions/${questionsId}`),\n-    enabled: !!questionsId\n+    queryKey: ['lessons', subtopicId],\n+    queryFn: async () => {\n+      const { data, error } = await supabase\n+        .from('lessons')\n+        .select('*')\n+        .eq('subtopic_id', subtopicId)\n+        .order('order_index');\n+        \n+      if (error) throw error;\n+      return data || [];\n+    },\n+    enabled: !!subtopicId\n   });\n };\n \n-export const useExercisePrompts = (exercise_promptsId: string) => {\n+export const useQuestions = (lessonId: string) => {\n   return useQuery({\n-    queryKey: ['exercise_prompts', exercise_promptsId],\n-    queryFn: () => api.get(`/exercise_prompts/${exercise_promptsId}`),\n-    enabled: !!exercise_promptsId\n+    queryKey: ['questions', lessonId],\n+    queryFn: async () => {\n+      const { data, error } = await supabase\n+        .from('questions')\n+        .select(`\n+          *,\n+          exercise_prompts(*)\n+        `)\n+        .eq('lesson_id', lessonId)\n+        .order('order_index');\n+        \n+      if (error) throw error;\n+      return data || [];\n+    },\n+    enabled: !!lessonId\n   });\n };\n \n-export const useActivities = (activitiesId: string) => {\n+export const useExercisePrompts = (questionId: string) => {\n   return useQuery({\n-    queryKey: ['activities', activitiesId],\n-    queryFn: () => api.get(`/activities/${activitiesId}`),\n-    enabled: !!activitiesId\n+    queryKey: ['exercise_prompts', questionId],\n+    queryFn: async () => {\n+      const { data, error } = await supabase\n+        .from('exercise_prompts')\n+        .select('*')\n+        .eq('question_id', questionId)\n+        .order('order_index');\n+        \n+      if (error) throw error;\n+      return data || [];\n+    },\n+    enabled: !!questionId\n   });\n };\n \n+export const useActivities = (lessonId: string) => {\n+  return useQuery({\n+    queryKey: ['activities', lessonId],\n+    queryFn: async () => {\n+      const { data, error } = await supabase\n+        .from('activities')\n+        .select('*')\n+        .eq('lesson_id', lessonId)\n+        .order('order_index');\n+        \n+      if (error) throw error;\n+      return data || [];\n+    },\n+    enabled: !!lessonId\n+  });\n+};\n+\n export const useUpdateTeacherProgress = () => {\n   return useMutation({\n     mutationFn: ({ teacherId, data }: { teacherId: string; data: any }) =>\n       api.put<any>(`/teachers/${teacherId}/progress`, teacherId, data)\n@@ -217,32 +299,36 @@\n \n         const userRole = session.user.user_metadata?.role?.toUpperCase();\n         console.log('Fetching classes for role:', userRole);\n \n-        // Base query for all roles - using explicit foreign key references\n+        // Updated query for the new schema\n         const baseQuery = `\n           id,\n           name,\n           description,\n           created_at,\n           created_by,\n-          grade:grades (\n+          grade:grade_id (\n             id,\n-            name\n+            name,\n+            level\n           ),\n           class_students!left (\n             student_id,\n             assigned_at,\n-            student:student_id!inner (\n+            student:students!inner (\n               id,\n-              name,\n-              email\n+              first_name,\n+              last_name,\n+              email,\n+              roll_number\n             )\n           ),\n           assigned_content!left (\n             id,\n             content_type,\n             content_id,\n+            valid_from,\n             valid_until\n           )\n         `;\n \n@@ -274,57 +360,36 @@\n \n         // Transform the data to match the expected format with safe access\n         const transformedData = {\n           data: rawData.map(cls => {\n-            // Type guard for grade\n-            const isValidGrade = (grade: any): grade is SupabaseGrade => {\n-              return grade && typeof grade === 'object' && 'id' in grade && 'name' in grade;\n-            };\n-\n-            // Type guard for student\n-            const isValidStudent = (student: any): student is SupabaseStudent => {\n-              return student && typeof student === 'object' && 'id' in student && 'name' in student && 'email' in student;\n-            };\n-\n-            // Type guard for class student\n-            const isValidClassStudent = (cs: any): cs is { student: SupabaseStudent } => {\n-              return cs && typeof cs === 'object' && cs.student && isValidStudent(cs.student);\n-            };\n-\n-            // Type guard for content\n-            const isValidContent = (content: any): content is SupabaseContent => {\n-              return content && typeof content === 'object' && 'id' in content && 'content_type' in content && 'content_id' in content;\n-            };\n-\n             // Safely access grade data\n-            const grade = isValidGrade(cls.grade) ? {\n+            const grade = cls.grade ? {\n               id: String(cls.grade.id),\n-              name: String(cls.grade.name)\n+              name: String(cls.grade.name),\n+              level: cls.grade.level\n             } : undefined;\n \n-            // Safely transform students with proper type assertions\n+            // Safely transform students\n             const students = Array.isArray(cls.class_students) \n               ? cls.class_students\n-                  .filter((cs): cs is RawClassStudent => \n-                    cs?.student?.[0] && 'id' in cs.student[0] && 'name' in cs.student[0] && 'email' in cs.student[0]\n-                  )\n-                  .map((cs) => ({\n-                    id: String(cs.student[0].id),\n-                    firstName: String(cs.student[0].name).split(' ')[0] || '',\n-                    lastName: String(cs.student[0].name).split(' ')[1] || '',\n-                    email: String(cs.student[0].email),\n-                    rollNumber: String(cs.student[0].id)\n+                  .filter(cs => cs?.student && typeof cs.student === 'object')\n+                  .map(cs => ({\n+                    id: String(cs.student.id),\n+                    firstName: String(cs.student.first_name || ''),\n+                    lastName: String(cs.student.last_name || ''),\n+                    email: String(cs.student.email || ''),\n+                    rollNumber: String(cs.student.roll_number || cs.student.id)\n                   }))\n               : [];\n \n-            // Safely transform lessons with proper type assertions\n+            // Safely transform lessons\n             const lessons = Array.isArray(cls.assigned_content)\n               ? cls.assigned_content\n-                  .filter(isValidContent)\n-                  .filter(content => content.content_type === 'LESSON')\n+                  .filter(content => content && content.content_type === 'LESSON')\n                   .map(lesson => ({\n                     id: String(lesson.content_id),\n                     title: `Lesson ${lesson.id}`,\n+                    validFrom: lesson.valid_from,\n                     validUntil: lesson.valid_until\n                   }))\n               : [];\n \n@@ -335,9 +400,10 @@\n                 description: String(cls.description || ''),\n                 grade,\n                 students,\n                 lessons,\n-                courses: { data: [] }\n+                courses: { data: [] },\n+                created_at: cls.created_at\n               }\n             };\n           })\n         };\n@@ -370,5 +436,52 @@\n     queryKey: ['course', courseId],\n     queryFn: () => api.get(`/courses/${courseId}`),\n     enabled: !!courseId\n   }); \n+};\n+\n+export const useGrades = () => {\n+  return useQuery({\n+    queryKey: ['grades'],\n+    queryFn: async () => {\n+      const { data, error } = await supabase\n+        .from('grades')\n+        .select('*')\n+        .order('level');\n+        \n+      if (error) throw error;\n+      return data || [];\n+    }\n+  });\n+};\n+\n+export const useStudents = (classId?: string) => {\n+  return useQuery({\n+    queryKey: ['students', classId],\n+    queryFn: async () => {\n+      let query = supabase\n+        .from('students')\n+        .select('*');\n+        \n+      if (classId) {\n+        const { data: classStudents, error: csError } = await supabase\n+          .from('class_students')\n+          .select('student_id')\n+          .eq('class_id', classId);\n+          \n+        if (csError) throw csError;\n+        \n+        if (classStudents && classStudents.length > 0) {\n+          const studentIds = classStudents.map(cs => cs.student_id);\n+          query = query.in('id', studentIds);\n+        } else {\n+          return [];\n+        }\n+      }\n+      \n+      const { data, error } = await query;\n+      if (error) throw error;\n+      return data || [];\n+    },\n+    enabled: true\n+  });\n }; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1740920587389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,29 +3,35 @@\n import { supabase } from '@/lib/supabase';\n \n export interface Student {\n   id: string;\n-  first_name: string;\n-  last_name: string;\n-  roll_number: string;\n+  firstName: string;\n+  lastName: string;\n+  rollNumber: string;\n   gender?: string;\n-  date_of_birth?: string;\n-  contact_number?: string;\n+  dateOfBirth?: string;\n+  contactNumber?: string;\n   email?: string;\n-  guardian_name?: string;\n-  guardian_contact?: string;\n+  guardianName?: string;\n+  guardianContact?: string;\n }\n \n interface ClassStudent {\n   student_id: string;\n   assigned_at: string;\n-  student: Student;\n+  student: SupabaseStudent;\n }\n \n interface ClassAttributes {\n   name: string;\n   description?: string;\n-  students?: Student[];\n+  students?: {\n+    id: string;\n+    firstName: string;\n+    lastName: string;\n+    email: string;\n+    rollNumber: string;\n+  }[];\n   lessons?: any[];\n   topics?: any[];\n   subtopics?: any[];\n   courses?: { data: any[] };\n"
                },
                {
                    "date": 1740920617743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -292,9 +292,9 @@\n   });\n };\n \n export function useClasses(userId: string) {\n-  return useQuery<ClassesResponse, Error>({\n+  return useQuery<any, Error>({\n     queryKey: ['classes', userId],\n     queryFn: async () => {\n       try {\n         // First get the user's session and role\n@@ -366,34 +366,42 @@\n \n         // Transform the data to match the expected format with safe access\n         const transformedData = {\n           data: rawData.map(cls => {\n+            // Type assertions to help TypeScript understand the structure\n+            const gradeData = cls.grade as any;\n+            const classStudents = cls.class_students as any[] || [];\n+            \n             // Safely access grade data\n-            const grade = cls.grade ? {\n-              id: String(cls.grade.id),\n-              name: String(cls.grade.name),\n-              level: cls.grade.level\n+            const grade = gradeData ? {\n+              id: String(gradeData.id || ''),\n+              name: String(gradeData.name || ''),\n+              level: gradeData.level\n             } : undefined;\n \n             // Safely transform students\n-            const students = Array.isArray(cls.class_students) \n-              ? cls.class_students\n+            const students = Array.isArray(classStudents) \n+              ? classStudents\n                   .filter(cs => cs?.student && typeof cs.student === 'object')\n-                  .map(cs => ({\n-                    id: String(cs.student.id),\n-                    firstName: String(cs.student.first_name || ''),\n-                    lastName: String(cs.student.last_name || ''),\n-                    email: String(cs.student.email || ''),\n-                    rollNumber: String(cs.student.roll_number || cs.student.id)\n-                  }))\n+                  .map(cs => {\n+                    const studentData = cs.student as any;\n+                    return {\n+                      id: String(studentData.id || ''),\n+                      firstName: String(studentData.first_name || ''),\n+                      lastName: String(studentData.last_name || ''),\n+                      email: String(studentData.email || ''),\n+                      rollNumber: String(studentData.roll_number || studentData.id || '')\n+                    };\n+                  })\n               : [];\n \n             // Safely transform lessons\n-            const lessons = Array.isArray(cls.assigned_content)\n-              ? cls.assigned_content\n+            const assignedContent = cls.assigned_content as any[] || [];\n+            const lessons = Array.isArray(assignedContent)\n+              ? assignedContent\n                   .filter(content => content && content.content_type === 'LESSON')\n                   .map(lesson => ({\n-                    id: String(lesson.content_id),\n+                    id: String(lesson.content_id || ''),\n                     title: `Lesson ${lesson.id}`,\n                     validFrom: lesson.valid_from,\n                     validUntil: lesson.valid_until\n                   }))\n"
                },
                {
                    "date": 1740920700676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n   id: string;\n   attributes: ClassAttributes;\n }\n \n-interface ClassesResponse {\n+wxport interface ClassesResponse {\n   data: ClassData[];\n }\n \n interface SupabaseGrade {\n"
                },
                {
                    "date": 1740920710819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n   id: string;\n   attributes: ClassAttributes;\n }\n \n-wxport interface ClassesResponse {\n+export interface ClassesResponse {\n   data: ClassData[];\n }\n \n interface SupabaseGrade {\n@@ -97,9 +97,9 @@\n   assigned_content?: SupabaseContent[];\n   max_students?: number;\n }\n \n-interface RawGrade {\n+export interface RawGrade {\n   id: string;\n   name: string;\n }\n \n"
                },
                {
                    "date": 1740920717307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,9 +108,9 @@\n   name: string;\n   email: string;\n }\n \n-interface RawClassStudent {\n+export interface RawClassStudent {\n   student_id: any;\n   assigned_at: any;\n   student: {\n     id: any;\n@@ -118,9 +118,9 @@\n     email: any;\n   }[];\n }\n \n-interface RawContent {\n+export interface RawContent {\n   id: string;\n   content_type: string;\n   content_id: string;\n   valid_until: string;\n@@ -136,9 +136,9 @@\n   class_students?: any[];\n   assigned_content?: any[];\n }\n \n-interface ClassGrade {\n+export interface ClassGrade {\n   id: string;\n   name: string;\n }\n \n"
                }
            ],
            "date": 1740919858232,
            "name": "Commit-0",
            "content": "import { useQuery, useMutation } from '@tanstack/react-query';\r\nimport { api } from '@/lib/api';\r\nimport { supabase } from '@/lib/supabase';\r\n\r\nexport interface Student {\r\n  id: string;\r\n  first_name: string;\r\n  last_name: string;\r\n  roll_number: string;\r\n  gender?: string;\r\n  date_of_birth?: string;\r\n  contact_number?: string;\r\n  email?: string;\r\n  guardian_name?: string;\r\n  guardian_contact?: string;\r\n}\r\n\r\ninterface ClassStudent {\r\n  student_id: any;\r\n  assigned_at: any;\r\n  student: SupabaseStudent;\r\n}\r\n\r\ninterface ClassAttributes {\r\n  name: string;\r\n  description?: string;\r\n  students?: {\r\n    id: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    rollNumber: string;\r\n    gender?: string;\r\n    dateOfBirth?: string;\r\n    contactNumber?: string;\r\n    email?: string;\r\n    guardianName?: string;\r\n    guardianContact?: string;\r\n  }[];\r\n  lessons?: any[];\r\n  courses?: { data: any[] };\r\n  grade?: {\r\n    id: string;\r\n    name: string;\r\n  };\r\n}\r\n\r\ninterface ClassData {\r\n  id: string;\r\n  attributes: ClassAttributes;\r\n}\r\n\r\ninterface ClassesResponse {\r\n  data: ClassData[];\r\n}\r\n\r\ninterface SupabaseGrade {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\ninterface SupabaseStudent {\r\n  id: any;\r\n  name: any;\r\n  email: any;\r\n}\r\n\r\ninterface SupabaseClassStudent {\r\n  student_id: string;\r\n  assigned_at: string;\r\n  student: SupabaseStudent;\r\n}\r\n\r\ninterface SupabaseContent {\r\n  id: string;\r\n  content_type: string;\r\n  content_id: string;\r\n  valid_until: string | null;\r\n}\r\n\r\ninterface SupabaseClass {\r\n  id: string;\r\n  name: string;\r\n  description: string | null;\r\n  created_at: string;\r\n  created_by: string;\r\n  grade: SupabaseGrade;\r\n  class_students: SupabaseClassStudent[];\r\n  assigned_content: SupabaseContent[];\r\n}\r\n\r\ninterface RawGrade {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\ninterface RawStudent {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n}\r\n\r\ninterface RawClassStudent {\r\n  student_id: any;\r\n  assigned_at: any;\r\n  student: {\r\n    id: any;\r\n    name: any;\r\n    email: any;\r\n  }[];\r\n}\r\n\r\ninterface RawContent {\r\n  id: string;\r\n  content_type: string;\r\n  content_id: string;\r\n  valid_until: string;\r\n}\r\n\r\ninterface RawClass {\r\n  id: string;\r\n  name: string;\r\n  description: string | null;\r\n  created_at: string;\r\n  created_by: string;\r\n  grade: RawGrade | null;\r\n  class_students: RawClassStudent[] | null;\r\n  assigned_content: RawContent[] | null;\r\n}\r\n\r\ninterface ClassGrade {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\ninterface AssignedContent {\r\n  id: string;\r\n  content_type: string;\r\n  content_id: string;\r\n  valid_until: string;\r\n}\r\n\r\ninterface ClassRecord {\r\n  id: string;\r\n  name: string;\r\n  description: string | null;\r\n  created_at: string;\r\n  created_by: string;\r\n  grade: ClassGrade | null;\r\n  class_students: ClassStudent[] | null;\r\n  assigned_content: AssignedContent[] | null;\r\n}\r\nexport const useTopics = (topicID: string) => {\r\n  return useQuery({\r\n    queryKey: ['topics', topicID],\r\n    queryFn: () => api.get(`/topics/${topicID}`),\r\n    enabled: !!topicID\r\n  });\r\n};\r\n\r\nexport const useSubTopics = (topicID: string) => {\r\n  return useQuery({\r\n    queryKey: ['subtopics', topicID],\r\n    queryFn: () => api.get(`/subtopics/${topicID}`),\r\n    enabled: !!topicID\r\n  });\r\n};\r\n\r\nexport const useLesson = (lessonId: string) => {\r\n  return useQuery({\r\n    queryKey: ['lesson', lessonId],\r\n    queryFn: () => api.get(`/lessons/${lessonId}`),\r\n    enabled: !!lessonId\r\n  });\r\n};\r\n\r\nexport const useQuestions = (questionsId: string) => {\r\n  return useQuery({\r\n    queryKey: ['questions', questionsId],\r\n    queryFn: () => api.get(`/questions/${questionsId}`),\r\n    enabled: !!questionsId\r\n  });\r\n};\r\n\r\nexport const useExercisePrompts = (exercise_promptsId: string) => {\r\n  return useQuery({\r\n    queryKey: ['exercise_prompts', exercise_promptsId],\r\n    queryFn: () => api.get(`/exercise_prompts/${exercise_promptsId}`),\r\n    enabled: !!exercise_promptsId\r\n  });\r\n};\r\n\r\nexport const useActivities = (activitiesId: string) => {\r\n  return useQuery({\r\n    queryKey: ['activities', activitiesId],\r\n    queryFn: () => api.get(`/activities/${activitiesId}`),\r\n    enabled: !!activitiesId\r\n  });\r\n};\r\n\r\nexport const useUpdateTeacherProgress = () => {\r\n  return useMutation({\r\n    mutationFn: ({ teacherId, data }: { teacherId: string; data: any }) =>\r\n      api.put<any>(`/teachers/${teacherId}/progress`, teacherId, data)\r\n  });\r\n};\r\n\r\nexport function useClasses(userId: string) {\r\n  return useQuery<ClassesResponse, Error>({\r\n    queryKey: ['classes', userId],\r\n    queryFn: async () => {\r\n      try {\r\n        // First get the user's session and role\r\n        const { data: { session } } = await supabase.auth.getSession();\r\n        if (!session?.user?.id) {\r\n          throw new Error('No authenticated user found');\r\n        }\r\n\r\n        const userRole = session.user.user_metadata?.role?.toUpperCase();\r\n        console.log('Fetching classes for role:', userRole);\r\n\r\n        // Base query for all roles - using explicit foreign key references\r\n        const baseQuery = `\r\n          id,\r\n          name,\r\n          description,\r\n          created_at,\r\n          created_by,\r\n          grade:grades (\r\n            id,\r\n            name\r\n          ),\r\n          class_students!left (\r\n            student_id,\r\n            assigned_at,\r\n            student:student_id!inner (\r\n              id,\r\n              name,\r\n              email\r\n            )\r\n          ),\r\n          assigned_content!left (\r\n            id,\r\n            content_type,\r\n            content_id,\r\n            valid_until\r\n          )\r\n        `;\r\n\r\n        // Execute query based on role with error handling\r\n        let query = supabase\r\n          .from('classes')\r\n          .select(baseQuery);\r\n\r\n        // Add role-based filtering\r\n        if (userRole !== 'SUPER_ADMIN' && userRole !== 'ADMIN') {\r\n          query = query.eq('created_by', userId);\r\n        }\r\n\r\n        // Add ordering\r\n        query = query.order('created_at', { ascending: false });\r\n\r\n        // Execute query with proper error handling\r\n        const { data: rawData, error: classesError } = await query;\r\n\r\n        if (classesError) {\r\n          console.error('Error fetching classes:', classesError);\r\n          return { data: [] };\r\n        }\r\n\r\n        if (!rawData || !Array.isArray(rawData)) {\r\n          console.log('No classes data available or invalid format');\r\n          return { data: [] };\r\n        }\r\n\r\n        // Transform the data to match the expected format with safe access\r\n        const transformedData = {\r\n          data: rawData.map(cls => {\r\n            // Type guard for grade\r\n            const isValidGrade = (grade: any): grade is SupabaseGrade => {\r\n              return grade && typeof grade === 'object' && 'id' in grade && 'name' in grade;\r\n            };\r\n\r\n            // Type guard for student\r\n            const isValidStudent = (student: any): student is SupabaseStudent => {\r\n              return student && typeof student === 'object' && 'id' in student && 'name' in student && 'email' in student;\r\n            };\r\n\r\n            // Type guard for class student\r\n            const isValidClassStudent = (cs: any): cs is { student: SupabaseStudent } => {\r\n              return cs && typeof cs === 'object' && cs.student && isValidStudent(cs.student);\r\n            };\r\n\r\n            // Type guard for content\r\n            const isValidContent = (content: any): content is SupabaseContent => {\r\n              return content && typeof content === 'object' && 'id' in content && 'content_type' in content && 'content_id' in content;\r\n            };\r\n\r\n            // Safely access grade data\r\n            const grade = isValidGrade(cls.grade) ? {\r\n              id: String(cls.grade.id),\r\n              name: String(cls.grade.name)\r\n            } : undefined;\r\n\r\n            // Safely transform students with proper type assertions\r\n            const students = Array.isArray(cls.class_students) \r\n              ? cls.class_students\r\n                  .filter((cs): cs is RawClassStudent => \r\n                    cs?.student?.[0] && 'id' in cs.student[0] && 'name' in cs.student[0] && 'email' in cs.student[0]\r\n                  )\r\n                  .map((cs) => ({\r\n                    id: String(cs.student[0].id),\r\n                    firstName: String(cs.student[0].name).split(' ')[0] || '',\r\n                    lastName: String(cs.student[0].name).split(' ')[1] || '',\r\n                    email: String(cs.student[0].email),\r\n                    rollNumber: String(cs.student[0].id)\r\n                  }))\r\n              : [];\r\n\r\n            // Safely transform lessons with proper type assertions\r\n            const lessons = Array.isArray(cls.assigned_content)\r\n              ? cls.assigned_content\r\n                  .filter(isValidContent)\r\n                  .filter(content => content.content_type === 'LESSON')\r\n                  .map(lesson => ({\r\n                    id: String(lesson.content_id),\r\n                    title: `Lesson ${lesson.id}`,\r\n                    validUntil: lesson.valid_until\r\n                  }))\r\n              : [];\r\n\r\n            return {\r\n              id: String(cls.id),\r\n              attributes: {\r\n                name: String(cls.name),\r\n                description: String(cls.description || ''),\r\n                grade,\r\n                students,\r\n                lessons,\r\n                courses: { data: [] }\r\n              }\r\n            };\r\n          })\r\n        };\r\n\r\n        console.log('Successfully transformed classes data:', {\r\n          count: transformedData.data.length,\r\n          sample: transformedData.data[0]\r\n        });\r\n\r\n        return transformedData;\r\n\r\n      } catch (error) {\r\n        console.error('Error in useClasses:', error);\r\n        return { data: [] };\r\n      }\r\n    },\r\n    enabled: !!userId,\r\n    retry: 2,\r\n    retryDelay: (attemptIndex: number) => Math.min(1000 * 2 ** attemptIndex, 30000),\r\n    staleTime: 1000 * 60 * 5,\r\n    refetchOnWindowFocus: false,\r\n    refetchOnMount: true,\r\n    refetchOnReconnect: false,\r\n    refetchInterval: false\r\n  });\r\n}\r\n\r\nexport const useCourse = (courseId: string) => {\r\n  return useQuery({\r\n    queryKey: ['course', courseId],\r\n    queryFn: () => api.get(`/courses/${courseId}`),\r\n    enabled: !!courseId\r\n  }); \r\n}; "
        }
    ]
}