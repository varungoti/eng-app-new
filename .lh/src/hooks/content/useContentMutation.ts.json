{
    "sourceFile": "src/hooks/content/useContentMutation.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1740919823617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1740919823617,
            "name": "Commit-0",
            "content": "import { useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport { contentService } from '../../lib/content/ContentService';\r\nimport { useToast } from '../useToast';\r\nimport { logger } from '../../lib/logger';\r\n\r\nexport const useContentMutation = () => {\r\n  const queryClient = useQueryClient();\r\n  const { showToast } = useToast();\r\n\r\n  const createMutation = useMutation({\r\n    mutationFn: async ({ type, data }: { type: string; data: any }) => {\r\n      let result;\r\n      \r\n      // Call the appropriate creation method based on content type\r\n      switch (type) {\r\n        case 'topic':\r\n          result = await contentService.createTopic(data);\r\n          break;\r\n        case 'subtopic':\r\n          result = await contentService.createSubtopic(data);\r\n          break;\r\n        case 'lesson':\r\n          result = await contentService.createLesson(data);\r\n          break;\r\n        case 'question':\r\n          result = await contentService.createQuestion(data);\r\n          break;\r\n        case 'activity':\r\n          result = await contentService.createActivity(data);\r\n          break;\r\n        default:\r\n          throw new Error(`Unknown content type: ${type}`);\r\n      }\r\n      \r\n      return result || null;\r\n    },\r\n    onSuccess: (data: any, variables: { type: string; data: any }) => {\r\n      // Invalidate relevant queries\r\n      queryClient.invalidateQueries({ queryKey: [variables.type] });\r\n      queryClient.invalidateQueries({ queryKey: ['topics'] }); // Invalidate topics specifically\r\n      \r\n      // Log success\r\n      logger.info(`${variables.type} created successfully`, {\r\n        context: { data },\r\n        source: 'useContentMutation'\r\n      });\r\n      \r\n      // Show success toast\r\n      showToast('Content created successfully', { \r\n        type: 'success',\r\n        position: 'top',\r\n        timeout: 3000\r\n      });\r\n\r\n      return data;\r\n    },\r\n    onError: (error: Error, variables: { type: string; data: any }) => {\r\n      showToast('Failed to create content', { type: 'error' });\r\n      logger.error(`Failed to create ${variables.type}`, {\r\n        context: { error },\r\n        source: 'useContentMutation'\r\n      });\r\n    }\r\n  });\r\n\r\n  const updateMutation = useMutation({\r\n    mutationFn: async ({ type, id, data }: { type: string; id: string; data: any }) => {\r\n      let result;\r\n      \r\n      // Add id to data for update methods\r\n      const updateData = { ...data, id };\r\n      \r\n      // Call the appropriate update method based on content type\r\n      switch (type) {\r\n        case 'lesson':\r\n          result = await contentService.updateLesson(updateData);\r\n          break;\r\n        case 'activity':\r\n          result = await contentService.saveActivity(updateData);\r\n          break;\r\n        default:\r\n          throw new Error(`Updating ${type} is not implemented`);\r\n      }\r\n      \r\n      return result;\r\n    },\r\n    onSuccess: (data: any, variables: { type: string; id: string; data: any }) => {\r\n      queryClient.invalidateQueries({ queryKey: [variables.type] });\r\n      showToast('Content updated successfully', { type: 'success' });\r\n      \r\n      logger.info(`${variables.type} updated successfully`, {\r\n        context: { data },\r\n        source: 'useContentMutation'\r\n      });\r\n    },\r\n    onError: (error: Error, variables: { type: string; id: string; data: any }) => {\r\n      showToast('Failed to update content', { type: 'error' });\r\n      logger.error(`Failed to update ${variables.type}`, {\r\n        context: { error },\r\n        source: 'useContentMutation'\r\n      });\r\n    }\r\n  });\r\n\r\n  return {\r\n    createContent: createMutation.mutate,\r\n    updateContent: updateMutation.mutate,\r\n    isCreating: createMutation.isPending,\r\n    isUpdating: updateMutation.isPending\r\n  };\r\n};"
        }
    ]
}