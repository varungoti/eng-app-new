{
    "sourceFile": "src/hooks/useGoogleCalendar.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1740923057673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740923160548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,15 +17,32 @@\n   const [isConnected, setIsConnected] = useState(false);\r\n   const { showToast } = useToast();\r\n \r\n   useEffect(() => {\r\n-    checkConnection();\r\n+    // Don't immediately check connection in case GAPI isn't loaded yet\r\n+    const gapiLoadCheck = setInterval(() => {\r\n+      if (window.gapi && window.gapi.auth2) {\r\n+        clearInterval(gapiLoadCheck);\r\n+        checkConnection();\r\n+      }\r\n+    }, 500);\r\n+    \r\n+    // Clear interval on unmount to prevent memory leaks\r\n+    return () => clearInterval(gapiLoadCheck);\r\n   }, []);\r\n \r\n   const checkConnection = async () => {\r\n     try {\r\n       const auth = window.gapi?.auth2?.getAuthInstance();\r\n-      setIsConnected(auth?.isSignedIn.get() || false);\r\n+      if (!auth) {\r\n+        logger.info('Google API not fully initialized', {\r\n+          source: 'useGoogleCalendar'\r\n+        });\r\n+        setIsConnected(false);\r\n+        return;\r\n+      }\r\n+      \r\n+      setIsConnected(auth.isSignedIn.get() || false);\r\n     } catch (err) {\r\n       logger.error('Failed to check Google Calendar connection', {\r\n         context: { error: err },\r\n         source: 'useGoogleCalendar'\r\n"
                },
                {
                    "date": 1740923243392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n \r\n   useEffect(() => {\r\n     // Don't immediately check connection in case GAPI isn't loaded yet\r\n     const gapiLoadCheck = setInterval(() => {\r\n-      if (window.gapi && window.gapi.auth2) {\r\n+      if (window.gapi?.auth2) {\r\n         clearInterval(gapiLoadCheck);\r\n         checkConnection();\r\n       }\r\n     }, 500);\r\n"
                }
            ],
            "date": 1740923057673,
            "name": "Commit-0",
            "content": "import { useState, useEffect } from 'react';\r\nimport { googleCalendarService } from '../lib/calendar/GoogleCalendarService';\r\nimport { useToast } from './useToast';\r\nimport { logger } from '../lib/logger';\r\n\r\n// Declare the global gapi object\r\ndeclare global {\r\n  interface Window {\r\n    gapi: any;\r\n  }\r\n}\r\n\r\nexport const useGoogleCalendar = () => {\r\n  const [events, setEvents] = useState<any[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const { showToast } = useToast();\r\n\r\n  useEffect(() => {\r\n    checkConnection();\r\n  }, []);\r\n\r\n  const checkConnection = async () => {\r\n    try {\r\n      const auth = window.gapi?.auth2?.getAuthInstance();\r\n      setIsConnected(auth?.isSignedIn.get() || false);\r\n    } catch (err) {\r\n      logger.error('Failed to check Google Calendar connection', {\r\n        context: { error: err },\r\n        source: 'useGoogleCalendar'\r\n      });\r\n      setIsConnected(false);\r\n    }\r\n  };\r\n\r\n  const connect = async () => {\r\n    try {\r\n      setLoading(true);\r\n      await googleCalendarService.signIn();\r\n      setIsConnected(true);\r\n      showToast('Connected to Google Calendar', { type: 'success' });\r\n      await fetchEvents();\r\n    } catch (err) {\r\n      const message = err instanceof Error ? err.message : 'Failed to connect to Google Calendar';\r\n      setError(message);\r\n      showToast(message, { type: 'error' });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const disconnect = async () => {\r\n    try {\r\n      await googleCalendarService.signOut();\r\n      setIsConnected(false);\r\n      setEvents([]);\r\n      showToast('Disconnected from Google Calendar', { type: 'success' });\r\n    } catch (err) {\r\n      const message = err instanceof Error ? err.message : 'Failed to disconnect from Google Calendar';\r\n      showToast(message, { type: 'error' });\r\n    }\r\n  };\r\n\r\n  const fetchEvents = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const events = await googleCalendarService.listEvents();\r\n      setEvents(events);\r\n      setError(null);\r\n    } catch (err) {\r\n      const message = err instanceof Error ? err.message : 'Failed to fetch events';\r\n      setError(message);\r\n      showToast(message, { type: 'error' });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const createEvent = async (eventData: any) => {\r\n    try {\r\n      const event = await googleCalendarService.createEvent(eventData);\r\n      setEvents(prev => [...prev, event]);\r\n      showToast('Event created successfully', { type: 'success' });\r\n      return event;\r\n    } catch (err) {\r\n      const message = err instanceof Error ? err.message : 'Failed to create event';\r\n      showToast(message, { type: 'error' });\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  const updateEvent = async (eventId: string, eventData: any) => {\r\n    try {\r\n      const event = await googleCalendarService.updateEvent(eventId, eventData);\r\n      setEvents(prev => prev.map(e => e.id === eventId ? event : e));\r\n      showToast('Event updated successfully', { type: 'success' });\r\n      return event;\r\n    } catch (err) {\r\n      const message = err instanceof Error ? err.message : 'Failed to update event';\r\n      showToast(message, { type: 'error' });\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  const deleteEvent = async (eventId: string) => {\r\n    try {\r\n      await googleCalendarService.deleteEvent(eventId);\r\n      setEvents(prev => prev.filter(e => e.id !== eventId));\r\n      showToast('Event deleted successfully', { type: 'success' });\r\n    } catch (err) {\r\n      const message = err instanceof Error ? err.message : 'Failed to delete event';\r\n      showToast(message, { type: 'error' });\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  return {\r\n    events,\r\n    loading,\r\n    error,\r\n    isConnected,\r\n    connect,\r\n    disconnect,\r\n    createEvent,\r\n    updateEvent,\r\n    deleteEvent,\r\n    refresh: fetchEvents\r\n  };\r\n};"
        }
    ]
}