{
    "sourceFile": "src/hooks/useUser.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1738870823356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739014983987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,66 +1,66 @@\n-import { useEffect, useState } from 'react';\r\n-import { useSupabaseClient } from '@supabase/auth-helpers-react';\r\n-\r\n-interface User {\r\n-  id: string;\r\n-  email: string;\r\n-  name: string;\r\n-  role: 'super_admin' | 'admin' | 'SCHOOL_LEADER' | 'SCHOOL_PRINCIPAL' | 'TEACHER' | 'STUDENT';\r\n-  schoolId: string | null;\r\n-}\r\n-\r\n-\r\n-export function useUser() {\r\n-  const supabase = useSupabaseClient();\r\n-  const [user, setUser] = useState<User | null>(null);\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [error, setError] = useState<Error | null>(null);\r\n-\r\n-  useEffect(() => {\r\n-    async function loadUser() {\r\n-      try {\r\n-        // Get the authenticated user\r\n-        const { data: { user: authUser }, error: authError } = await supabase.auth.getUser();\r\n-        if (authError) throw authError;\r\n-        if (!authUser) {\r\n-          setUser(null);\r\n-          return;\r\n-        }\r\n-\r\n-        // Get the user's profile data\r\n-        const { data: profile, error: profileError } = await supabase\r\n-          .from('users')\r\n-          .select('*')\r\n-          .eq('id', authUser.id)\r\n-          .single();\r\n-\r\n-        if (profileError) throw profileError;\r\n-\r\n-        setUser({\r\n-          id: profile.id,\r\n-          email: profile.email,\r\n-          name: profile.name,\r\n-          role: profile.role,\r\n-          schoolId: profile.school_id,\r\n-        });\r\n-      } catch (err) {\r\n-        setError(err instanceof Error ? err : new Error('Failed to load user'));\r\n-      } finally {\r\n-        setLoading(false);\r\n-      }\r\n-    }\r\n-\r\n-    loadUser();\r\n-\r\n-    // Subscribe to auth changes\r\n-    const { data: { subscription } } = supabase.auth.onAuthStateChange(() => {\r\n-      loadUser();\r\n-    });\r\n-\r\n-    return () => {\r\n-      subscription.unsubscribe();\r\n-    };\r\n-  }, [supabase]);\r\n-\r\n-  return { user, loading, error };\r\n+import { useEffect, useState } from 'react';\n+import { useSupabaseClient } from '@supabase/auth-helpers-react';\n+\n+interface User {\n+  id: string;\n+  email: string;\n+  name: string;\n+  role: 'super_admin' | 'admin' | 'SCHOOL_LEADER' | 'SCHOOL_PRINCIPAL' | 'TEACHER' | 'STUDENT';\n+  schoolId: string | null;\n+}\n+\n+\n+export function useUser() {\n+  const supabase = useSupabaseClient();\n+  const [user, setUser] = useState<User | null>(null);\n+  const [loading, setLoading] = useState(true);\n+  const [error, setError] = useState<Error | null>(null);\n+\n+  useEffect(() => {\n+    async function loadUser() {\n+      try {\n+        // Get the authenticated user\n+        const { data: { user: authUser }, error: authError } = await supabase.auth.getUser();\n+        if (authError) throw authError;\n+        if (!authUser) {\n+          setUser(null);\n+          return;\n+        }\n+\n+        // Get the user's profile data\n+        const { data: profile, error: profileError } = await supabase\n+          .from('users')\n+          .select('*')\n+          .eq('id', authUser.id)\n+          .single();\n+\n+        if (profileError) throw profileError;\n+\n+        setUser({\n+          id: profile.id,\n+          email: profile.email,\n+          name: profile.name,\n+          role: profile.role,\n+          schoolId: profile.school_id,\n+        });\n+      } catch (err) {\n+        setError(err instanceof Error ? err : new Error('Failed to load user'));\n+      } finally {\n+        setLoading(false);\n+      }\n+    }\n+\n+    loadUser();\n+\n+    // Subscribe to auth changes\n+    const { data: { subscription } } = supabase.auth.onAuthStateChange(() => {\n+      loadUser();\n+    });\n+\n+    return () => {\n+      subscription.unsubscribe();\n+    };\n+  }, [supabase]);\n+\n+  return { user, loading, error };\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739044596907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import { useEffect, useState } from 'react';\n-import { useSupabaseClient } from '@supabase/auth-helpers-react';\n+import { supabase } from '../lib/supabase';\n+import { logger } from '../lib/logger';\n \n interface User {\n   id: string;\n   email: string;\n@@ -8,23 +9,24 @@\n   role: 'super_admin' | 'admin' | 'SCHOOL_LEADER' | 'SCHOOL_PRINCIPAL' | 'TEACHER' | 'STUDENT';\n   schoolId: string | null;\n }\n \n-\n export function useUser() {\n-  const supabase = useSupabaseClient();\n   const [user, setUser] = useState<User | null>(null);\n   const [loading, setLoading] = useState(true);\n   const [error, setError] = useState<Error | null>(null);\n \n   useEffect(() => {\n+    let mounted = true;\n+\n     async function loadUser() {\n       try {\n         // Get the authenticated user\n         const { data: { user: authUser }, error: authError } = await supabase.auth.getUser();\n         if (authError) throw authError;\n+        \n         if (!authUser) {\n-          setUser(null);\n+          if (mounted) setUser(null);\n           return;\n         }\n \n         // Get the user's profile data\n@@ -35,32 +37,39 @@\n           .single();\n \n         if (profileError) throw profileError;\n \n-        setUser({\n-          id: profile.id,\n-          email: profile.email,\n-          name: profile.name,\n-          role: profile.role,\n-          schoolId: profile.school_id,\n-        });\n+        if (mounted) {\n+          setUser({\n+            id: profile.id,\n+            email: profile.email,\n+            name: profile.name,\n+            role: profile.role,\n+            schoolId: profile.school_id,\n+          });\n+        }\n       } catch (err) {\n-        setError(err instanceof Error ? err : new Error('Failed to load user'));\n+        logger.error(`Failed to load user: ${err instanceof Error ? err.message : String(err)}`, 'useUser');\n+        if (mounted) {\n+          setError(err instanceof Error ? err : new Error('Failed to load user'));\n+        }\n       } finally {\n-        setLoading(false);\n+        if (mounted) setLoading(false);\n       }\n     }\n \n     loadUser();\n \n-    // Subscribe to auth changes\n-    const { data: { subscription } } = supabase.auth.onAuthStateChange(() => {\n-      loadUser();\n+    // Subscribe to auth changes using the singleton instance\n+    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event) => {\n+      logger.debug(`Auth state changed: ${event}`, 'useUser');\n+      if (mounted) await loadUser();\n     });\n \n     return () => {\n+      mounted = false;\n       subscription.unsubscribe();\n     };\n-  }, [supabase]);\n+  }, []);\n \n   return { user, loading, error };\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1740924615308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,75 +1,78 @@\n-import { useEffect, useState } from 'react';\n-import { supabase } from '../lib/supabase';\n-import { logger } from '../lib/logger';\n-\n-interface User {\n-  id: string;\n-  email: string;\n-  name: string;\n-  role: 'super_admin' | 'admin' | 'SCHOOL_LEADER' | 'SCHOOL_PRINCIPAL' | 'TEACHER' | 'STUDENT';\n-  schoolId: string | null;\n-}\n-\n-export function useUser() {\n-  const [user, setUser] = useState<User | null>(null);\n-  const [loading, setLoading] = useState(true);\n-  const [error, setError] = useState<Error | null>(null);\n-\n-  useEffect(() => {\n-    let mounted = true;\n-\n-    async function loadUser() {\n-      try {\n-        // Get the authenticated user\n-        const { data: { user: authUser }, error: authError } = await supabase.auth.getUser();\n-        if (authError) throw authError;\n-        \n-        if (!authUser) {\n-          if (mounted) setUser(null);\n-          return;\n-        }\n-\n-        // Get the user's profile data\n-        const { data: profile, error: profileError } = await supabase\n-          .from('users')\n-          .select('*')\n-          .eq('id', authUser.id)\n-          .single();\n-\n-        if (profileError) throw profileError;\n-\n-        if (mounted) {\n-          setUser({\n-            id: profile.id,\n-            email: profile.email,\n-            name: profile.name,\n-            role: profile.role,\n-            schoolId: profile.school_id,\n-          });\n-        }\n-      } catch (err) {\n-        logger.error(`Failed to load user: ${err instanceof Error ? err.message : String(err)}`, 'useUser');\n-        if (mounted) {\n-          setError(err instanceof Error ? err : new Error('Failed to load user'));\n-        }\n-      } finally {\n-        if (mounted) setLoading(false);\n-      }\n-    }\n-\n-    loadUser();\n-\n-    // Subscribe to auth changes using the singleton instance\n-    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event) => {\n-      logger.debug(`Auth state changed: ${event}`, 'useUser');\n-      if (mounted) await loadUser();\n-    });\n-\n-    return () => {\n-      mounted = false;\n-      subscription.unsubscribe();\n-    };\n-  }, []);\n-\n-  return { user, loading, error };\n+import { useEffect, useState } from 'react';\r\n+import { supabase } from '../lib/supabase';\r\n+import { logger } from '../lib/logger';\r\n+\r\n+interface User {\r\n+  id: string;\r\n+  email: string;\r\n+  name: string;\r\n+  role: 'super_admin' | 'admin' | 'SCHOOL_LEADER' | 'SCHOOL_PRINCIPAL' | 'TEACHER' | 'STUDENT';\r\n+  schoolId: string | null;\r\n+}\r\n+\r\n+export function useUser() {\r\n+  const [user, setUser] = useState<User | null>(null);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState<Error | null>(null);\r\n+\r\n+  useEffect(() => {\r\n+    let mounted = true;\r\n+\r\n+    async function loadUser() {\r\n+      try {\r\n+        // Get the authenticated user\r\n+        const { data: { user: authUser }, error: authError } = await supabase.auth.getUser();\r\n+        if (authError) throw authError;\r\n+        \r\n+        if (!authUser) {\r\n+          if (mounted) setUser(null);\r\n+          return;\r\n+        }\r\n+\r\n+        // Get the user's profile data\r\n+        const { data: profile, error: profileError } = await supabase\r\n+          .from('users')\r\n+          .select('*')\r\n+          .eq('id', authUser.id)\r\n+          .single();\r\n+\r\n+        if (profileError) throw profileError;\r\n+\r\n+        if (mounted) {\r\n+          setUser({\r\n+            id: profile.id,\r\n+            email: profile.email,\r\n+            name: profile.name,\r\n+            role: profile.role,\r\n+            schoolId: profile.school_id,\r\n+          });\r\n+        }\r\n+      } catch (err) {\r\n+        logger.error(`Failed to load user: ${err instanceof Error ? err.message : String(err)}`, {\r\n+          context: { error: err },\r\n+          source: 'useUser'\r\n+        });\r\n+        if (mounted) {\r\n+          setError(err instanceof Error ? err : new Error('Failed to load user'));\r\n+        }\r\n+      } finally {\r\n+        if (mounted) setLoading(false);\r\n+      }\r\n+    }\r\n+\r\n+    loadUser();\r\n+\r\n+    // Subscribe to auth changes using the singleton instance\r\n+    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event) => {\r\n+      logger.debug(`Auth state changed: ${event}`, 'useUser');\r\n+      if (mounted) await loadUser();\r\n+    });\r\n+\r\n+    return () => {\r\n+      mounted = false;\r\n+      subscription.unsubscribe();\r\n+    };\r\n+  }, []);\r\n+\r\n+  return { user, loading, error };\r\n } \n\\ No newline at end of file\n"
                }
            ],
            "date": 1738870823356,
            "name": "Commit-0",
            "content": "import { useEffect, useState } from 'react';\r\nimport { useSupabaseClient } from '@supabase/auth-helpers-react';\r\n\r\ninterface User {\r\n  id: string;\r\n  email: string;\r\n  name: string;\r\n  role: 'super_admin' | 'admin' | 'SCHOOL_LEADER' | 'SCHOOL_PRINCIPAL' | 'TEACHER' | 'STUDENT';\r\n  schoolId: string | null;\r\n}\r\n\r\n\r\nexport function useUser() {\r\n  const supabase = useSupabaseClient();\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<Error | null>(null);\r\n\r\n  useEffect(() => {\r\n    async function loadUser() {\r\n      try {\r\n        // Get the authenticated user\r\n        const { data: { user: authUser }, error: authError } = await supabase.auth.getUser();\r\n        if (authError) throw authError;\r\n        if (!authUser) {\r\n          setUser(null);\r\n          return;\r\n        }\r\n\r\n        // Get the user's profile data\r\n        const { data: profile, error: profileError } = await supabase\r\n          .from('users')\r\n          .select('*')\r\n          .eq('id', authUser.id)\r\n          .single();\r\n\r\n        if (profileError) throw profileError;\r\n\r\n        setUser({\r\n          id: profile.id,\r\n          email: profile.email,\r\n          name: profile.name,\r\n          role: profile.role,\r\n          schoolId: profile.school_id,\r\n        });\r\n      } catch (err) {\r\n        setError(err instanceof Error ? err : new Error('Failed to load user'));\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n\r\n    loadUser();\r\n\r\n    // Subscribe to auth changes\r\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(() => {\r\n      loadUser();\r\n    });\r\n\r\n    return () => {\r\n      subscription.unsubscribe();\r\n    };\r\n  }, [supabase]);\r\n\r\n  return { user, loading, error };\r\n} "
        }
    ]
}