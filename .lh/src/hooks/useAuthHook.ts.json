{
    "sourceFile": "src/hooks/useAuthHook.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1739388348558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739388353975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,8 @@\n+import { AuthContext } from \"@/contexts/AuthContext\";\r\n+\r\n+import { useContext } from \"react\";\r\n+\r\n export const useAuth = () => {\r\n   const context = useContext(AuthContext);\r\n   // ... rest of code\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1740095673762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,38 @@\n-import { AuthContext } from \"@/contexts/AuthContext\";\r\n+import { useEffect, useState } from 'react';\r\n+import { useNavigate, useLocation } from 'react-router-dom';\r\n \r\n-import { useContext } from \"react\";\r\n+export const useAuthHook = () => {\r\n+  const navigate = useNavigate();\r\n+  const location = useLocation();\r\n\\ No newline at end of file\n+  const [_authState, setAuthState] = useState(null);\r\n+  const [isLoading, setIsLoading] = useState(true);\r\n \r\n-export const useAuth = () => {\r\n-  const context = useContext(AuthContext);\r\n-  // ... rest of code\r\n-} \n+  useEffect(() => {\r\n+    const checkAuth = async () => {\r\n+      try {\r\n+        // Check authentication logic here\r\n+        setIsLoading(false);\r\n+      } catch (error) {\r\n+        setIsLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    checkAuth();\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    const handleRouteChange = () => {\r\n+      // Handle route change logic here\r\n+    };\r\n+\r\n+    handleRouteChange();\r\n+  }, [location.pathname]);\r\n+\r\n+  const _checkAndRefreshSession = async () => {\r\n+    // Session refresh logic here\r\n+  };\r\n+\r\n+  return {\r\n+    isLoading,\r\n+  };\r\n+}; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1740920862364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,38 +1,38 @@\n-import { useEffect, useState } from 'react';\r\n-import { useNavigate, useLocation } from 'react-router-dom';\r\n-\r\n-export const useAuthHook = () => {\r\n-  const navigate = useNavigate();\r\n-  const location = useLocation();\r\n-  const [_authState, setAuthState] = useState(null);\r\n-  const [isLoading, setIsLoading] = useState(true);\r\n-\r\n-  useEffect(() => {\r\n-    const checkAuth = async () => {\r\n-      try {\r\n-        // Check authentication logic here\r\n-        setIsLoading(false);\r\n-      } catch (error) {\r\n-        setIsLoading(false);\r\n-      }\r\n-    };\r\n-\r\n-    checkAuth();\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    const handleRouteChange = () => {\r\n-      // Handle route change logic here\r\n-    };\r\n-\r\n-    handleRouteChange();\r\n-  }, [location.pathname]);\r\n-\r\n-  const _checkAndRefreshSession = async () => {\r\n-    // Session refresh logic here\r\n-  };\r\n-\r\n-  return {\r\n-    isLoading,\r\n-  };\r\n+import { useEffect, useState } from 'react';\n+import { useNavigate, useLocation } from 'react-router-dom';\n+\n+export const useAuthHook = () => {\n+  const _navigate = useNavigate();\n+  const location = useLocation();\n+  const [_authState, setAuthState] = useState(null);\n+  const [isLoading, setIsLoading] = useState(true);\n+\n+  useEffect(() => {\n+    const checkAuth = async () => {\n+      try {\n+        // Check authentication logic here\n+        setIsLoading(false);\n+      } catch (error) {\n+        setIsLoading(false);\n+      }\n+    };\n+\n+    checkAuth();\n+  }, []);\n+\n+  useEffect(() => {\n+    const handleRouteChange = () => {\n+      // Handle route change logic here\n+    };\n+\n+    handleRouteChange();\n+  }, [location.pathname]);\n+\n+  const _checkAndRefreshSession = async () => {\n+    // Session refresh logic here\n+  };\n+\n+  return {\n+    isLoading,\n+  };\n }; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1740920867700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import { useEffect, useState } from 'react';\n import { useNavigate, useLocation } from 'react-router-dom';\n \n export const useAuthHook = () => {\n-  const _navigate = useNavigate();\n+  const navigate = useNavigate();\n   const location = useLocation();\n   const [_authState, setAuthState] = useState(null);\n   const [isLoading, setIsLoading] = useState(true);\n \n"
                },
                {
                    "date": 1740920878802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,11 @@\n import { useEffect, useState } from 'react';\n import { useNavigate, useLocation } from 'react-router-dom';\n \n export const useAuthHook = () => {\n-  const navigate = useNavigate();\n+  //const navigate = useNavigate();\n   const location = useLocation();\n-  const [_authState, setAuthState] = useState(null);\n+  const [_authState, _setAuthState] = useState(null);\n   const [isLoading, setIsLoading] = useState(true);\n \n   useEffect(() => {\n     const checkAuth = async () => {\n"
                },
                {
                    "date": 1740920955345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,38 +1,233 @@\n import { useEffect, useState } from 'react';\n import { useNavigate, useLocation } from 'react-router-dom';\n+import { supabase } from '@/lib/supabase';\n+import { Session, User } from '@supabase/supabase-js';\n \n+interface AuthState {\n+  session: Session | null;\n+  user: User | null;\n+  isAuthenticated: boolean;\n+  userRole: string | null;\n+  userDetails: {\n+    id: string;\n+    email: string;\n+    firstName?: string;\n+    lastName?: string;\n+  } | null;\n+}\n+\n+// Protected routes that require authentication\n+const PROTECTED_ROUTES = [\n+  '/dashboard',\n+  '/profile',\n+  '/classes',\n+  '/content',\n+  '/lessons',\n+  '/students'\n+];\n+\n+// Routes that require admin access\n+const ADMIN_ROUTES = [\n+  '/admin',\n+  '/users',\n+  '/settings'\n+];\n+\n export const useAuthHook = () => {\n-  //const navigate = useNavigate();\n+  const navigate = useNavigate();\n   const location = useLocation();\n-  const [_authState, _setAuthState] = useState(null);\n+  const [authState, setAuthState] = useState<AuthState>({\n+    session: null,\n+    user: null,\n+    isAuthenticated: false,\n+    userRole: null,\n+    userDetails: null\n+  });\n   const [isLoading, setIsLoading] = useState(true);\n \n   useEffect(() => {\n     const checkAuth = async () => {\n       try {\n-        // Check authentication logic here\n+        // Get the current session\n+        const { data: { session }, error } = await supabase.auth.getSession();\n+        \n+        if (error) {\n+          console.error('Error fetching session:', error);\n+          setIsLoading(false);\n+          return;\n+        }\n+        \n+        if (session) {\n+          // User is authenticated\n+          const user = session.user;\n+          \n+          // Get user role from metadata if available\n+          const userRole = user.user_metadata?.role || 'STUDENT';\n+          \n+          // Get additional user details if needed\n+          const { data: userProfile, error: userError } = await supabase\n+            .from('users')\n+            .select('first_name, last_name')\n+            .eq('id', user.id)\n+            .single();\n+            \n+          if (userError && userError.code !== 'PGRST116') {\n+            console.error('Error fetching user profile:', userError);\n+          }\n+          \n+          setAuthState({\n+            session,\n+            user,\n+            isAuthenticated: true,\n+            userRole,\n+            userDetails: {\n+              id: user.id,\n+              email: user.email || '',\n+              firstName: userProfile?.first_name || user.user_metadata?.first_name || '',\n+              lastName: userProfile?.last_name || user.user_metadata?.last_name || ''\n+            }\n+          });\n+        } else {\n+          // User is not authenticated\n+          setAuthState({\n+            session: null,\n+            user: null,\n+            isAuthenticated: false,\n+            userRole: null,\n+            userDetails: null\n+          });\n+        }\n+        \n         setIsLoading(false);\n       } catch (error) {\n+        console.error('Authentication error:', error);\n         setIsLoading(false);\n       }\n     };\n \n+    // Initial auth check\n     checkAuth();\n+    \n+    // Set up auth state change listener\n+    const { data: { subscription } } = supabase.auth.onAuthStateChange(\n+      async (event, session) => {\n+        console.log('Auth state changed:', event);\n+        \n+        if (event === 'SIGNED_IN' || event === 'USER_UPDATED') {\n+          await checkAuth();\n+        } else if (event === 'SIGNED_OUT') {\n+          setAuthState({\n+            session: null,\n+            user: null,\n+            isAuthenticated: false,\n+            userRole: null,\n+            userDetails: null\n+          });\n+        }\n+      }\n+    );\n+    \n+    return () => {\n+      subscription.unsubscribe();\n+    };\n   }, []);\n \n   useEffect(() => {\n     const handleRouteChange = () => {\n-      // Handle route change logic here\n+      // Don't perform checks during loading\n+      if (isLoading) return;\n+      \n+      const currentPath = location.pathname;\n+      \n+      // Check if this path needs authentication\n+      const needsAuth = PROTECTED_ROUTES.some(route => \n+        currentPath.startsWith(route) || currentPath === route\n+      );\n+      \n+      // Check if this path needs admin access\n+      const needsAdmin = ADMIN_ROUTES.some(route => \n+        currentPath.startsWith(route) || currentPath === route\n+      );\n+      \n+      // Redirect unauthenticated users trying to access protected routes\n+      if (needsAuth && !authState.isAuthenticated) {\n+        console.log('Redirecting to login: Protected route access attempted without authentication');\n+        navigate('/login', { state: { from: currentPath } });\n+        return;\n+      }\n+      \n+      // Redirect non-admin users trying to access admin routes\n+      if (needsAdmin && authState.userRole !== 'ADMIN' && authState.userRole !== 'SUPER_ADMIN') {\n+        console.log('Redirecting to dashboard: Admin route access attempted without proper permissions');\n+        navigate('/dashboard');\n+        return;\n+      }\n+      \n+      // Redirect authenticated users trying to access login/register\n+      if ((currentPath === '/login' || currentPath === '/register') && authState.isAuthenticated) {\n+        navigate('/dashboard');\n+        return;\n+      }\n     };\n \n     handleRouteChange();\n-  }, [location.pathname]);\n+  }, [location.pathname, authState.isAuthenticated, authState.userRole, isLoading, navigate]);\n \n-  const _checkAndRefreshSession = async () => {\n-    // Session refresh logic here\n+  const checkAndRefreshSession = async () => {\n+    if (!authState.session) return false;\n+    \n+    // Check if session is expired or about to expire (within 5 minutes)\n+    const expiresAt = authState.session.expires_at;\n+    const expirationTime = expiresAt ? expiresAt * 1000 : 0; // Convert to milliseconds\n+    const fiveMinutes = 5 * 60 * 1000;\n+    \n+    if (expirationTime - Date.now() < fiveMinutes) {\n+      console.log('Session about to expire, refreshing...');\n+      \n+      try {\n+        const { data, error } = await supabase.auth.refreshSession();\n+        \n+        if (error) {\n+          console.error('Error refreshing session:', error);\n+          return false;\n+        }\n+        \n+        if (data.session) {\n+          setAuthState(prev => ({\n+            ...prev,\n+            session: data.session,\n+            user: data.session.user\n+          }));\n+          return true;\n+        }\n+        \n+        return false;\n+      } catch (error) {\n+        console.error('Session refresh error:', error);\n+        return false;\n+      }\n+    }\n+    \n+    return true; // Session is still valid\n   };\n \n+  const signOut = async () => {\n+    const { error } = await supabase.auth.signOut();\n+    if (error) {\n+      console.error('Error signing out:', error);\n+      return false;\n+    }\n+    navigate('/login');\n+    return true;\n+  };\n+\n   return {\n     isLoading,\n+    isAuthenticated: authState.isAuthenticated,\n+    user: authState.user,\n+    userDetails: authState.userDetails,\n+    userRole: authState.userRole,\n+    refreshSession: checkAndRefreshSession,\n+    signOut\n   };\n }; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1740921007513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n     checkAuth();\n     \n     // Set up auth state change listener\n     const { data: { subscription } } = supabase.auth.onAuthStateChange(\n-      async (event, session) => {\n+      async (event, _session) => {\n         console.log('Auth state changed:', event);\n         \n         if (event === 'SIGNED_IN' || event === 'USER_UPDATED') {\n           await checkAuth();\n"
                },
                {
                    "date": 1740921034292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,10 +194,10 @@\n         \n         if (data.session) {\n           setAuthState(prev => ({\n             ...prev,\n-            session: data.session,\n-            user: data.session.user\n+            session: data.session!,\n+            user: data.session!.user\n           }));\n           return true;\n         }\n         \n"
                }
            ],
            "date": 1739388348558,
            "name": "Commit-0",
            "content": "export const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  // ... rest of code\r\n} "
        }
    ]
}