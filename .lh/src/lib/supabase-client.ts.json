{
    "sourceFile": "src/lib/supabase-client.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1740846531803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740846793368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,133 +1,1 @@\n-import { DEBUG_CONFIG } from './config';\r\n-import type { Database } from './database.types';\r\n-import { logger } from './logger';\r\n-import { createBrowserClient } from '@supabase/ssr';\r\n-import type { SupabaseClient } from '@supabase/supabase-js';\r\n-import { createClient } from '@supabase/supabase-js';\r\n-\r\n-// Validate environment variables\r\n-const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\r\n-const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\r\n-\r\n-if (!supabaseUrl || !supabaseAnonKey) {\r\n-  throw new Error(\r\n-    'Missing Supabase environment variables. Please ensure VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY are set in your .env file.'\r\n-  );\r\n-}\r\n-\r\n-const supabaseOptions = {\r\n-  auth: {\r\n-    autoRefreshToken: true,\r\n-    persistSession: true,\r\n-    storageKey: 'sb-auth-token',\r\n-    storage: typeof window !== 'undefined' ? window.localStorage : undefined,\r\n-    detectSessionInUrl: true,\r\n-    flowType: 'pkce' as const,\r\n-    debug: false,\r\n-    cookieOptions: {\r\n-      maxAge: 7 * 24 * 60 * 60,\r\n-      sameSite: 'lax' as const,\r\n-      secure: true\r\n-    },\r\n-  },\r\n-  global: {\r\n-    headers: { \r\n-      'x-client-info': 'supabase-js',\r\n-      'x-application-name': 'speakwell-admin'\r\n-    }\r\n-  },\r\n-  realtime: {\r\n-    params: {\r\n-      eventsPerSecond: 10\r\n-    }\r\n-  },\r\n-  db: {\r\n-    schema: 'public' as const,\r\n-    debug: false\r\n-  }\r\n-};\r\n-\r\n-// Create a single instance of the Supabase client for browser environments\r\n-let supabaseInstance: SupabaseClient<Database> | null = null;\r\n-\r\n-function createSupabaseClient(): SupabaseClient<Database> {\r\n-  if (DEBUG_CONFIG.enabled) {\r\n-    logger.info(`Creating Supabase client with URL: ${supabaseUrl}`, { source: 'supabase' });\r\n-  }\r\n-\r\n-  const client = createBrowserClient<Database>(\r\n-    supabaseUrl,\r\n-    supabaseAnonKey,\r\n-    supabaseOptions\r\n-  );\r\n-\r\n-  if (DEBUG_CONFIG.enabled) {\r\n-    logger.info('Supabase client initialized', { source: 'supabase' });\r\n-  }\r\n-\r\n-  return client;\r\n-}\r\n-\r\n-function getSupabaseClient(): SupabaseClient<Database> {\r\n-  if (typeof window === 'undefined') {\r\n-    throw new Error('Supabase client can only be instantiated in browser environment');\r\n-  }\r\n-\r\n-  if (!supabaseInstance) {\r\n-    supabaseInstance = createSupabaseClient();\r\n-  }\r\n-\r\n-  return supabaseInstance;\r\n-}\r\n-\r\n-// Initialize the client immediately but only once\r\n-if (typeof window !== 'undefined' && !supabaseInstance) {\r\n-  supabaseInstance = createSupabaseClient();\r\n-}\r\n-\r\n-// Export the instance for direct use\r\n-export const supabase = supabaseInstance || getSupabaseClient();\r\n-\r\n-// Export a getter for dynamic access\r\n-export const getSupabase = (): SupabaseClient<Database> => {\r\n-  if (!supabaseInstance) {\r\n-    supabaseInstance = getSupabaseClient();\r\n-  }\r\n-  return supabaseInstance;\r\n-};\r\n-\r\n-// For compatibility with code that uses supabaseClient\r\n-export const supabaseClient = createClient<Database>(supabaseUrl, supabaseAnonKey, {\r\n-  auth: {\r\n-    persistSession: true,\r\n-    storageKey: 'sb-auth-token',\r\n-    storage: localStorage,\r\n-    autoRefreshToken: true,\r\n-    detectSessionInUrl: true\r\n-  }\r\n-});\r\n-\r\n-// Export the type for use in other files\r\n-export type TypedSupabaseClient = SupabaseClient<Database>;\r\n-\r\n-// Add auth state check helper\r\n-export const ensureAuthenticated = async () => {\r\n-  const { data: { session } } = await supabaseClient.auth.getSession();\r\n-  if (!session) {\r\n-    throw new Error('Authentication required');\r\n-  }\r\n-  return session;\r\n-};\r\n-\r\n-// Add this export\r\n-export const getSupabaseAuth = () => supabaseClient.auth;\r\n-\r\n-// Handle cleanup for HMR\r\n-if (import.meta.hot) {\r\n-  import.meta.hot.dispose(() => {\r\n-    if (DEBUG_CONFIG.enabled) {\r\n-      logger.info('Cleaning up Supabase client', { source: 'supabase' });\r\n-    }\r\n-    supabaseInstance = null;\r\n-  });\r\n-} \n\\ No newline at end of file\n+ \n\\ No newline at end of file\n"
                }
            ],
            "date": 1740846531803,
            "name": "Commit-0",
            "content": "import { DEBUG_CONFIG } from './config';\r\nimport type { Database } from './database.types';\r\nimport { logger } from './logger';\r\nimport { createBrowserClient } from '@supabase/ssr';\r\nimport type { SupabaseClient } from '@supabase/supabase-js';\r\nimport { createClient } from '@supabase/supabase-js';\r\n\r\n// Validate environment variables\r\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\r\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\r\n\r\nif (!supabaseUrl || !supabaseAnonKey) {\r\n  throw new Error(\r\n    'Missing Supabase environment variables. Please ensure VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY are set in your .env file.'\r\n  );\r\n}\r\n\r\nconst supabaseOptions = {\r\n  auth: {\r\n    autoRefreshToken: true,\r\n    persistSession: true,\r\n    storageKey: 'sb-auth-token',\r\n    storage: typeof window !== 'undefined' ? window.localStorage : undefined,\r\n    detectSessionInUrl: true,\r\n    flowType: 'pkce' as const,\r\n    debug: false,\r\n    cookieOptions: {\r\n      maxAge: 7 * 24 * 60 * 60,\r\n      sameSite: 'lax' as const,\r\n      secure: true\r\n    },\r\n  },\r\n  global: {\r\n    headers: { \r\n      'x-client-info': 'supabase-js',\r\n      'x-application-name': 'speakwell-admin'\r\n    }\r\n  },\r\n  realtime: {\r\n    params: {\r\n      eventsPerSecond: 10\r\n    }\r\n  },\r\n  db: {\r\n    schema: 'public' as const,\r\n    debug: false\r\n  }\r\n};\r\n\r\n// Create a single instance of the Supabase client for browser environments\r\nlet supabaseInstance: SupabaseClient<Database> | null = null;\r\n\r\nfunction createSupabaseClient(): SupabaseClient<Database> {\r\n  if (DEBUG_CONFIG.enabled) {\r\n    logger.info(`Creating Supabase client with URL: ${supabaseUrl}`, { source: 'supabase' });\r\n  }\r\n\r\n  const client = createBrowserClient<Database>(\r\n    supabaseUrl,\r\n    supabaseAnonKey,\r\n    supabaseOptions\r\n  );\r\n\r\n  if (DEBUG_CONFIG.enabled) {\r\n    logger.info('Supabase client initialized', { source: 'supabase' });\r\n  }\r\n\r\n  return client;\r\n}\r\n\r\nfunction getSupabaseClient(): SupabaseClient<Database> {\r\n  if (typeof window === 'undefined') {\r\n    throw new Error('Supabase client can only be instantiated in browser environment');\r\n  }\r\n\r\n  if (!supabaseInstance) {\r\n    supabaseInstance = createSupabaseClient();\r\n  }\r\n\r\n  return supabaseInstance;\r\n}\r\n\r\n// Initialize the client immediately but only once\r\nif (typeof window !== 'undefined' && !supabaseInstance) {\r\n  supabaseInstance = createSupabaseClient();\r\n}\r\n\r\n// Export the instance for direct use\r\nexport const supabase = supabaseInstance || getSupabaseClient();\r\n\r\n// Export a getter for dynamic access\r\nexport const getSupabase = (): SupabaseClient<Database> => {\r\n  if (!supabaseInstance) {\r\n    supabaseInstance = getSupabaseClient();\r\n  }\r\n  return supabaseInstance;\r\n};\r\n\r\n// For compatibility with code that uses supabaseClient\r\nexport const supabaseClient = createClient<Database>(supabaseUrl, supabaseAnonKey, {\r\n  auth: {\r\n    persistSession: true,\r\n    storageKey: 'sb-auth-token',\r\n    storage: localStorage,\r\n    autoRefreshToken: true,\r\n    detectSessionInUrl: true\r\n  }\r\n});\r\n\r\n// Export the type for use in other files\r\nexport type TypedSupabaseClient = SupabaseClient<Database>;\r\n\r\n// Add auth state check helper\r\nexport const ensureAuthenticated = async () => {\r\n  const { data: { session } } = await supabaseClient.auth.getSession();\r\n  if (!session) {\r\n    throw new Error('Authentication required');\r\n  }\r\n  return session;\r\n};\r\n\r\n// Add this export\r\nexport const getSupabaseAuth = () => supabaseClient.auth;\r\n\r\n// Handle cleanup for HMR\r\nif (import.meta.hot) {\r\n  import.meta.hot.dispose(() => {\r\n    if (DEBUG_CONFIG.enabled) {\r\n      logger.info('Cleaning up Supabase client', { source: 'supabase' });\r\n    }\r\n    supabaseInstance = null;\r\n  });\r\n} "
        }
    ]
}