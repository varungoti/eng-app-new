{
    "sourceFile": "src/lib/auth/AuthLoader.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1739025590535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739043738616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,28 +1,28 @@\n import { logger } from '../logger';\r\n-import { LoadingMonitor, type MonitoringConfig } from '../monitoring';\r\n+import { LoadingMonitor, type MonitorConfig } from '../monitoring';\r\n import { LoadingStrategy } from './strategies/LoadingStrategy';\r\n import { CacheStrategy } from './strategies/CacheStrategy';\r\n-import { InitializationStrategy } from './strategies/InitializationStrategy';\r\n+import { SessionLoader } from './strategies/SessionLoader';\r\n import { supabase } from '../supabase';\r\n \r\n const AUTH_CACHE_KEY = 'auth_state';\r\n+const INIT_TIMEOUT = 5000;\r\n \r\n export class AuthLoader {\r\n   private loadingMonitor: LoadingMonitor;\r\n   private loadingStrategy: LoadingStrategy;\r\n   private cacheStrategy: CacheStrategy<{ initialized: boolean }>;\r\n   private initialized: boolean = false;\r\n-  private initializationTimeout: number = 5000;\r\n   private static instance: AuthLoader;\r\n   private loadingPromise: Promise<void> | null = null;\r\n \r\n   constructor() {\r\n     this.loadingMonitor = new LoadingMonitor(supabase, { \r\n       retryCount: 3,\r\n       retryInterval: 1000,\r\n-      timeoutMs: 5000 \r\n-    } as MonitoringConfig);\r\n+      timeoutMs: INIT_TIMEOUT \r\n+    } as MonitorConfig);\r\n     this.loadingStrategy = new LoadingStrategy('AuthLoader');\r\n     this.cacheStrategy = new CacheStrategy<{ initialized: boolean }>(1);\r\n   }\r\n \r\n@@ -33,37 +33,20 @@\n     return AuthLoader.instance;\r\n   }\r\n \r\n   public async initialize(): Promise<void> {\r\n-    if (this.initialized) {\r\n-      return;\r\n+    if (this.initialized || this.loadingPromise) {\r\n+      return this.loadingPromise || Promise.resolve();\r\n     }\r\n \r\n-    if (this.loadingPromise) {\r\n-      return this.loadingPromise;\r\n-    }\r\n-\r\n-    // Check cache first\r\n-    const cachedAuth = this.cacheStrategy.get(AUTH_CACHE_KEY);\r\n-    if (cachedAuth) {\r\n-      this.initialized = true;\r\n-      return;\r\n-    }\r\n-\r\n     this.loadingStrategy.start();\r\n \r\n     this.loadingPromise = Promise.race([\r\n-      InitializationStrategy.initialize(),\r\n+      this.initializeAuth(),\r\n       new Promise<never>((_, reject) => {\r\n-        setTimeout(() => {\r\n-          reject(new Error('Auth initialization timed out'));\r\n-        }, this.initializationTimeout);\r\n+        setTimeout(() => reject(new Error('Auth initialization timed out')), INIT_TIMEOUT);\r\n       })\r\n     ])\r\n-      .then(() => {\r\n-        this.initialized = true;\r\n-        this.cacheStrategy.set(AUTH_CACHE_KEY, { initialized: true });\r\n-      })\r\n       .catch(err => {\r\n         logger.error(`Auth initialization failed: ${err instanceof Error ? err.message : String(err)}`, 'AuthLoader');\r\n         // Allow continuing with limited functionality\r\n         this.initialized = true;\r\n@@ -76,8 +59,22 @@\n \r\n     return this.loadingPromise;\r\n   }\r\n \r\n+  private async initializeAuth(): Promise<void> {\r\n+    try {\r\n+      const session = await SessionLoader.loadSession();\r\n+      if (session) {\r\n+        this.cacheStrategy.set(AUTH_CACHE_KEY, { initialized: true });\r\n+        this.initialized = true;\r\n+        logger.info('Auth initialized successfully', 'AuthLoader');\r\n+      }\r\n+    } catch (err) {\r\n+      logger.error(`Auth initialization error: ${err instanceof Error ? err.message : String(err)}`, 'AuthLoader');\r\n+      throw err;\r\n+    }\r\n+  }\r\n+\r\n   public isInitialized(): boolean {\r\n     return this.initialized;\r\n   }\r\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1739025590535,
            "name": "Commit-0",
            "content": "import { logger } from '../logger';\r\nimport { LoadingMonitor, type MonitoringConfig } from '../monitoring';\r\nimport { LoadingStrategy } from './strategies/LoadingStrategy';\r\nimport { CacheStrategy } from './strategies/CacheStrategy';\r\nimport { InitializationStrategy } from './strategies/InitializationStrategy';\r\nimport { supabase } from '../supabase';\r\n\r\nconst AUTH_CACHE_KEY = 'auth_state';\r\n\r\nexport class AuthLoader {\r\n  private loadingMonitor: LoadingMonitor;\r\n  private loadingStrategy: LoadingStrategy;\r\n  private cacheStrategy: CacheStrategy<{ initialized: boolean }>;\r\n  private initialized: boolean = false;\r\n  private initializationTimeout: number = 5000;\r\n  private static instance: AuthLoader;\r\n  private loadingPromise: Promise<void> | null = null;\r\n\r\n  constructor() {\r\n    this.loadingMonitor = new LoadingMonitor(supabase, { \r\n      retryCount: 3,\r\n      retryInterval: 1000,\r\n      timeoutMs: 5000 \r\n    } as MonitoringConfig);\r\n    this.loadingStrategy = new LoadingStrategy('AuthLoader');\r\n    this.cacheStrategy = new CacheStrategy<{ initialized: boolean }>(1);\r\n  }\r\n\r\n  public static getInstance(): AuthLoader {\r\n    if (!AuthLoader.instance) {\r\n      AuthLoader.instance = new AuthLoader();\r\n    }\r\n    return AuthLoader.instance;\r\n  }\r\n\r\n  public async initialize(): Promise<void> {\r\n    if (this.initialized) {\r\n      return;\r\n    }\r\n\r\n    if (this.loadingPromise) {\r\n      return this.loadingPromise;\r\n    }\r\n\r\n    // Check cache first\r\n    const cachedAuth = this.cacheStrategy.get(AUTH_CACHE_KEY);\r\n    if (cachedAuth) {\r\n      this.initialized = true;\r\n      return;\r\n    }\r\n\r\n    this.loadingStrategy.start();\r\n\r\n    this.loadingPromise = Promise.race([\r\n      InitializationStrategy.initialize(),\r\n      new Promise<never>((_, reject) => {\r\n        setTimeout(() => {\r\n          reject(new Error('Auth initialization timed out'));\r\n        }, this.initializationTimeout);\r\n      })\r\n    ])\r\n      .then(() => {\r\n        this.initialized = true;\r\n        this.cacheStrategy.set(AUTH_CACHE_KEY, { initialized: true });\r\n      })\r\n      .catch(err => {\r\n        logger.error(`Auth initialization failed: ${err instanceof Error ? err.message : String(err)}`, 'AuthLoader');\r\n        // Allow continuing with limited functionality\r\n        this.initialized = true;\r\n        throw err;\r\n      })\r\n      .finally(() => {\r\n        this.loadingPromise = null;\r\n        this.loadingStrategy.end();\r\n      });\r\n\r\n    return this.loadingPromise;\r\n  }\r\n\r\n  public isInitialized(): boolean {\r\n    return this.initialized;\r\n  }\r\n}"
        }
    ]
}