{
    "sourceFile": "src/lib/auth/sessionManager.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1739024343783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739024366928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,13 +48,11 @@\n       }\r\n \r\n       logger.info(`Role updated successfully to ${newRole}`, 'SessionManager');\r\n     } catch (err) {\r\n-      logger.error('Failed to update role', {\r\n-        context: { error: err, newRole },\r\n-        source: 'SessionManager'\r\n-      });\r\n+      logger.error(`Failed to update role: ${err instanceof Error ? err.message : String(err)}`, 'SessionManager');\r\n       throw err;\r\n+\r\n     }\r\n   }\r\n \r\n   public async refreshSession(): Promise<Session | null> {\r\n@@ -89,23 +87,17 @@\n       };\r\n \r\n       localStorage.setItem('sb-auth-token', JSON.stringify(sessionData));\r\n \r\n-      logger.info('Session refreshed successfully', {\r\n-        context: { \r\n-          expiresAt: expiryDate.toISOString()\r\n-        },\r\n-        source: 'SessionManager'\r\n-      });\r\n+      logger.info(`Session refreshed successfully with expiry ${expiryDate.toISOString()}`, 'SessionManager');\r\n \r\n+\r\n       return session;\r\n     } catch (err) {\r\n-      logger.error('Failed to refresh session', {\r\n-        context: { error: err },\r\n-        source: 'SessionManager'\r\n-      });\r\n+      logger.error(`Failed to refresh session: ${err instanceof Error ? err.message : String(err)}`, 'SessionManager');\r\n       throw err;\r\n     }\r\n+\r\n   }\r\n }\r\n \r\n export const sessionManager = SessionManager.getInstance();\n\\ No newline at end of file\n"
                }
            ],
            "date": 1739024343783,
            "name": "Commit-0",
            "content": "import { supabase } from '../supabase';\r\nimport { logger } from '../logger';\r\nimport type { Session } from '@supabase/gotrue-js';\r\n\r\nexport type UserRole = 'admin' | 'teacher' | 'student' | 'parent';\r\n\r\nclass SessionManager {\r\n  private static instance: SessionManager;\r\n\r\n  private constructor() {}\r\n\r\n  public static getInstance(): SessionManager {\r\n    if (!SessionManager.instance) {\r\n      SessionManager.instance = new SessionManager();\r\n    }\r\n    return SessionManager.instance;\r\n  }\r\n\r\n  public async updateUserRole(newRole: UserRole): Promise<void> {\r\n    try {\r\n      // Get current session\r\n      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\r\n      \r\n      if (sessionError) throw sessionError;\r\n      \r\n      if (!session) {\r\n        // Try to refresh session first\r\n        const { data: { session: refreshedSession }, error: refreshError } = \r\n          await supabase.auth.refreshSession();\r\n          \r\n        if (refreshError) throw refreshError;\r\n        if (!refreshedSession) throw new Error('No session available');\r\n      }\r\n\r\n      // Update user metadata\r\n      const { error: updateError } = await supabase.auth.updateUser({\r\n        data: { role: newRole }\r\n      });\r\n\r\n      if (updateError) throw updateError;\r\n      \r\n      // Verify session is still valid\r\n      const { data: { session: verifiedSession }, error: verifyError } = \r\n        await supabase.auth.getSession();\r\n        \r\n      if (verifyError || !verifiedSession) {\r\n        throw new Error('Session validation failed after role update');\r\n      }\r\n\r\n      logger.info(`Role updated successfully to ${newRole}`, 'SessionManager');\r\n    } catch (err) {\r\n      logger.error('Failed to update role', {\r\n        context: { error: err, newRole },\r\n        source: 'SessionManager'\r\n      });\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  public async refreshSession(): Promise<Session | null> {\r\n    try {\r\n      // Get current session with retry\r\n      let session;\r\n      for (let i = 0; i < 3; i++) {\r\n        const { data: { session: currentSession }, error } = await supabase.auth.getSession();\r\n        if (!error && currentSession) {\r\n          session = currentSession;\r\n          break;\r\n        }\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n      }\r\n\r\n      if (!session) {\r\n        // Try to refresh session\r\n        const { data: refreshData, error: refreshError } = await supabase.auth.refreshSession();\r\n        if (refreshError || !refreshData.session) {\r\n          throw new Error('No active session available');\r\n        }\r\n        session = refreshData.session;\r\n      }\r\n\r\n      // Update session expiry\r\n      const expiryDate = new Date();\r\n      expiryDate.setDate(expiryDate.getDate() + 7); // 7 days\r\n      \r\n      const sessionData = {\r\n        ...session,\r\n        expires_at: expiryDate.toISOString()\r\n      };\r\n\r\n      localStorage.setItem('sb-auth-token', JSON.stringify(sessionData));\r\n\r\n      logger.info('Session refreshed successfully', {\r\n        context: { \r\n          expiresAt: expiryDate.toISOString()\r\n        },\r\n        source: 'SessionManager'\r\n      });\r\n\r\n      return session;\r\n    } catch (err) {\r\n      logger.error('Failed to refresh session', {\r\n        context: { error: err },\r\n        source: 'SessionManager'\r\n      });\r\n      throw err;\r\n    }\r\n  }\r\n}\r\n\r\nexport const sessionManager = SessionManager.getInstance();"
        }
    ]
}