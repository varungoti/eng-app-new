{
    "sourceFile": "src/lib/auth/sessionManager.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 27,
            "patches": [
                {
                    "date": 1739024343783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739024366928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,13 +48,11 @@\n       }\r\n \r\n       logger.info(`Role updated successfully to ${newRole}`, 'SessionManager');\r\n     } catch (err) {\r\n-      logger.error('Failed to update role', {\r\n-        context: { error: err, newRole },\r\n-        source: 'SessionManager'\r\n-      });\r\n+      logger.error(`Failed to update role: ${err instanceof Error ? err.message : String(err)}`, 'SessionManager');\r\n       throw err;\r\n+\r\n     }\r\n   }\r\n \r\n   public async refreshSession(): Promise<Session | null> {\r\n@@ -89,23 +87,17 @@\n       };\r\n \r\n       localStorage.setItem('sb-auth-token', JSON.stringify(sessionData));\r\n \r\n-      logger.info('Session refreshed successfully', {\r\n-        context: { \r\n-          expiresAt: expiryDate.toISOString()\r\n-        },\r\n-        source: 'SessionManager'\r\n-      });\r\n+      logger.info(`Session refreshed successfully with expiry ${expiryDate.toISOString()}`, 'SessionManager');\r\n \r\n+\r\n       return session;\r\n     } catch (err) {\r\n-      logger.error('Failed to refresh session', {\r\n-        context: { error: err },\r\n-        source: 'SessionManager'\r\n-      });\r\n+      logger.error(`Failed to refresh session: ${err instanceof Error ? err.message : String(err)}`, 'SessionManager');\r\n       throw err;\r\n     }\r\n+\r\n   }\r\n }\r\n \r\n export const sessionManager = SessionManager.getInstance();\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739216696444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,101 +3,177 @@\n import type { Session } from '@supabase/gotrue-js';\r\n \r\n export type UserRole = 'admin' | 'teacher' | 'student' | 'parent';\r\n \r\n+const SESSION_STORAGE_KEY = 'sb-session-state';\r\n+const SESSION_CHECK_INTERVAL = 4 * 60 * 1000; // 4 minutes\r\n+const SESSION_REFRESH_THRESHOLD = 5 * 60; // 5 minutes before expiry\r\n+\r\n class SessionManager {\r\n   private static instance: SessionManager;\r\n+  private currentSession: Session | null = null;\r\n+  private refreshTimer: NodeJS.Timeout | null = null;\r\n+  private lastRefreshAttempt: number = 0;\r\n+  private refreshInProgress: boolean = false;\r\n \r\n-  private constructor() {}\r\n+  private constructor() {\r\n+    this.initializeSessionCheck();\r\n+  }\r\n \r\n+  private initializeSessionCheck() {\r\n+    // Clear any existing timer\r\n+    if (this.refreshTimer) {\r\n+      clearInterval(this.refreshTimer);\r\n+    }\r\n+\r\n+    // Set up periodic session check\r\n+    this.refreshTimer = setInterval(() => {\r\n+      this.checkAndRefreshSession();\r\n+    }, SESSION_CHECK_INTERVAL);\r\n+  }\r\n+\r\n   public static getInstance(): SessionManager {\r\n     if (!SessionManager.instance) {\r\n       SessionManager.instance = new SessionManager();\r\n     }\r\n     return SessionManager.instance;\r\n   }\r\n \r\n+  private async checkAndRefreshSession() {\r\n+    if (this.refreshInProgress) {\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      this.refreshInProgress = true;\r\n+      const now = Math.floor(Date.now() / 1000);\r\n+      const session = await this.getCurrentSession();\r\n+\r\n+      if (!session) {\r\n+        return;\r\n+      }\r\n+\r\n+      // Check if session needs refresh (5 minutes before expiry)\r\n+      if (session.expires_at && session.expires_at - now < SESSION_REFRESH_THRESHOLD) {\r\n+        await this.refreshSession();\r\n+      }\r\n+    } catch (err) {\r\n+      logger.error('Session check failed', err instanceof Error ? err.message : String(err));\r\n+    } finally {\r\n+      this.refreshInProgress = false;\r\n+    }\r\n+  }\r\n+\r\n+  private async getCurrentSession(): Promise<Session | null> {\r\n+    try {\r\n+      const { data: { session }, error } = await supabase.auth.getSession();\r\n+      \r\n+      if (error) {\r\n+        throw error;\r\n+      }\r\n+\r\n+      if (session) {\r\n+        this.currentSession = session;\r\n+        this.persistSessionState(session);\r\n+      }\r\n+\r\n+      return session;\r\n+    } catch (err) {\r\n+      logger.error('Failed to get current session', err instanceof Error ? err.message : String(err));\r\n+      return null;\r\n+    }\r\n+  }\r\n+\r\n+  private persistSessionState(session: Session) {\r\n+    try {\r\n+      const sessionState = {\r\n+        timestamp: Date.now(),\r\n+        expiresAt: session.expires_at,\r\n+        userId: session.user?.id,\r\n+        role: session.user?.user_metadata?.role\r\n+      };\r\n+      \r\n+      localStorage.setItem(SESSION_STORAGE_KEY, JSON.stringify(sessionState));\r\n+    } catch (err) {\r\n+      logger.warn('Failed to persist session state', err instanceof Error ? err.message : String(err));\r\n+    }\r\n+  }\r\n+\r\n   public async updateUserRole(newRole: UserRole): Promise<void> {\r\n     try {\r\n-      // Get current session\r\n-      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\r\n+      const session = await this.getCurrentSession();\r\n       \r\n-      if (sessionError) throw sessionError;\r\n-      \r\n       if (!session) {\r\n-        // Try to refresh session first\r\n-        const { data: { session: refreshedSession }, error: refreshError } = \r\n-          await supabase.auth.refreshSession();\r\n-          \r\n-        if (refreshError) throw refreshError;\r\n-        if (!refreshedSession) throw new Error('No session available');\r\n+        throw new Error('No active session');\r\n       }\r\n \r\n-      // Update user metadata\r\n       const { error: updateError } = await supabase.auth.updateUser({\r\n         data: { role: newRole }\r\n       });\r\n \r\n       if (updateError) throw updateError;\r\n       \r\n-      // Verify session is still valid\r\n-      const { data: { session: verifiedSession }, error: verifyError } = \r\n-        await supabase.auth.getSession();\r\n-        \r\n-      if (verifyError || !verifiedSession) {\r\n-        throw new Error('Session validation failed after role update');\r\n-      }\r\n-\r\n-      logger.info(`Role updated successfully to ${newRole}`, 'SessionManager');\r\n+      // Verify and refresh session after role update\r\n+      await this.refreshSession();\r\n+      \r\n+      logger.info(`Role updated successfully to ${newRole}`);\r\n     } catch (err) {\r\n-      logger.error(`Failed to update role: ${err instanceof Error ? err.message : String(err)}`, 'SessionManager');\r\n+      logger.error('Failed to update role', err instanceof Error ? err.message : String(err));\r\n       throw err;\r\n-\r\n     }\r\n   }\r\n \r\n   public async refreshSession(): Promise<Session | null> {\r\n+    if (this.refreshInProgress) {\r\n+      return this.currentSession;\r\n+    }\r\n+\r\n     try {\r\n-      // Get current session with retry\r\n-      let session;\r\n-      for (let i = 0; i < 3; i++) {\r\n-        const { data: { session: currentSession }, error } = await supabase.auth.getSession();\r\n-        if (!error && currentSession) {\r\n-          session = currentSession;\r\n-          break;\r\n-        }\r\n-        await new Promise(resolve => setTimeout(resolve, 1000));\r\n+      this.refreshInProgress = true;\r\n+      const now = Date.now();\r\n+      \r\n+      // Prevent rapid refresh attempts\r\n+      if (now - this.lastRefreshAttempt < 1000) {\r\n+        return this.currentSession;\r\n       }\r\n+      \r\n+      this.lastRefreshAttempt = now;\r\n \r\n-      if (!session) {\r\n-        // Try to refresh session\r\n-        const { data: refreshData, error: refreshError } = await supabase.auth.refreshSession();\r\n-        if (refreshError || !refreshData.session) {\r\n-          throw new Error('No active session available');\r\n-        }\r\n-        session = refreshData.session;\r\n+      const { data: { session }, error } = await supabase.auth.refreshSession();\r\n+      \r\n+      if (error) {\r\n+        throw error;\r\n       }\r\n \r\n-      // Update session expiry\r\n-      const expiryDate = new Date();\r\n-      expiryDate.setDate(expiryDate.getDate() + 7); // 7 days\r\n-      \r\n-      const sessionData = {\r\n-        ...session,\r\n-        expires_at: expiryDate.toISOString()\r\n-      };\r\n+      if (session) {\r\n+        this.currentSession = session;\r\n+        this.persistSessionState(session);\r\n+        logger.info('Session refreshed successfully');\r\n+      }\r\n \r\n-      localStorage.setItem('sb-auth-token', JSON.stringify(sessionData));\r\n-\r\n-      logger.info(`Session refreshed successfully with expiry ${expiryDate.toISOString()}`, 'SessionManager');\r\n-\r\n-\r\n       return session;\r\n     } catch (err) {\r\n-      logger.error(`Failed to refresh session: ${err instanceof Error ? err.message : String(err)}`, 'SessionManager');\r\n-      throw err;\r\n+      logger.error('Failed to refresh session', err instanceof Error ? err.message : String(err));\r\n+      return null;\r\n+    } finally {\r\n+      this.refreshInProgress = false;\r\n     }\r\n+  }\r\n \r\n+  public getPersistedSessionState() {\r\n+    try {\r\n+      const state = localStorage.getItem(SESSION_STORAGE_KEY);\r\n+      return state ? JSON.parse(state) : null;\r\n+    } catch {\r\n+      return null;\r\n+    }\r\n   }\r\n+\r\n+  public cleanup() {\r\n+    if (this.refreshTimer) {\r\n+      clearInterval(this.refreshTimer);\r\n+    }\r\n+    localStorage.removeItem(SESSION_STORAGE_KEY);\r\n+  }\r\n }\r\n \r\n export const sessionManager = SessionManager.getInstance();\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739216957910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,11 +114,11 @@\n       \r\n       // Verify and refresh session after role update\r\n       await this.refreshSession();\r\n       \r\n-      logger.info(`Role updated successfully to ${newRole}`);\r\n+      logger.info('Role updated successfully', { role: newRole });\r\n     } catch (err) {\r\n-      logger.error('Failed to update role', err instanceof Error ? err.message : String(err));\r\n+      logger.error('Failed to update role', { error: err instanceof Error ? err.message : String(err) });\r\n       throw err;\r\n     }\r\n   }\r\n \r\n"
                },
                {
                    "date": 1739216994563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,11 +114,11 @@\n       \r\n       // Verify and refresh session after role update\r\n       await this.refreshSession();\r\n       \r\n-      logger.info('Role updated successfully', { role: newRole });\r\n+      logger.info(`Role updated successfully: ${newRole}`);\r\n     } catch (err) {\r\n-      logger.error('Failed to update role', { error: err instanceof Error ? err.message : String(err) });\r\n+      logger.error(`Failed to update role: ${err instanceof Error ? err.message : String(err)}`);\r\n       throw err;\r\n     }\r\n   }\r\n \r\n"
                },
                {
                    "date": 1739217027353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,13 +114,14 @@\n       \r\n       // Verify and refresh session after role update\r\n       await this.refreshSession();\r\n       \r\n-      logger.info(`Role updated successfully: ${newRole}`);\r\n+      logger.info(`Role updated successfully: ${newRole}`, 'SessionManager');\r\n     } catch (err) {\r\n-      logger.error(`Failed to update role: ${err instanceof Error ? err.message : String(err)}`);\r\n+      logger.error(`Failed to update role: ${err instanceof Error ? err.message : String(err)}`, 'SessionManager');\r\n       throw err;\r\n     }\r\n+\r\n   }\r\n \r\n   public async refreshSession(): Promise<Session | null> {\r\n     if (this.refreshInProgress) {\r\n@@ -146,9 +147,9 @@\n \r\n       if (session) {\r\n         this.currentSession = session;\r\n         this.persistSessionState(session);\r\n-        logger.info('Session refreshed successfully');\r\n+        logger.info('Session refreshed successfully', 'SessionManager');\r\n       }\r\n \r\n       return session;\r\n     } catch (err) {\r\n"
                },
                {
                    "date": 1739217205878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,32 +1,67 @@\n import { supabase } from '../supabase';\r\n import { logger } from '../logger';\r\n import type { Session } from '@supabase/gotrue-js';\r\n+import { AuthLoader } from './AuthLoader';\r\n \r\n export type UserRole = 'admin' | 'teacher' | 'student' | 'parent';\r\n \r\n+interface SessionState {\r\n+  timestamp: number;\r\n+  expiresAt: number | null;\r\n+  userId: string | null;\r\n+  role: string | null;\r\n+  lastRefresh: number;\r\n+}\r\n+\r\n const SESSION_STORAGE_KEY = 'sb-session-state';\r\n const SESSION_CHECK_INTERVAL = 4 * 60 * 1000; // 4 minutes\r\n const SESSION_REFRESH_THRESHOLD = 5 * 60; // 5 minutes before expiry\r\n+const REFRESH_COOLDOWN = 1000; // 1 second cooldown between refresh attempts\r\n \r\n class SessionManager {\r\n   private static instance: SessionManager;\r\n   private currentSession: Session | null = null;\r\n   private refreshTimer: NodeJS.Timeout | null = null;\r\n   private lastRefreshAttempt: number = 0;\r\n   private refreshInProgress: boolean = false;\r\n+  private authLoader: AuthLoader;\r\n \r\n   private constructor() {\r\n+    this.authLoader = AuthLoader.getInstance();\r\n     this.initializeSessionCheck();\r\n+    this.loadPersistedState();\r\n   }\r\n \r\n+  private async loadPersistedState() {\r\n+    try {\r\n+      const state = this.getPersistedSessionState();\r\n+      if (state && this.isStateValid(state)) {\r\n+        const session = await this.getCurrentSession();\r\n+        if (session) {\r\n+          this.currentSession = session;\r\n+          logger.debug('Restored persisted session state', 'SessionManager');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      logger.warn('Failed to load persisted state', 'SessionManager');\r\n+    }\r\n+  }\r\n+\r\n+  private isStateValid(state: SessionState): boolean {\r\n+    const now = Math.floor(Date.now() / 1000);\r\n+    return (\r\n+      state.timestamp > now - 24 * 60 * 60 && // Not older than 24 hours\r\n+      (!state.expiresAt || state.expiresAt > now) && // Not expired\r\n+      !!state.userId // Has user ID\r\n+    );\r\n+  }\r\n+\r\n   private initializeSessionCheck() {\r\n-    // Clear any existing timer\r\n     if (this.refreshTimer) {\r\n       clearInterval(this.refreshTimer);\r\n     }\r\n \r\n-    // Set up periodic session check\r\n     this.refreshTimer = setInterval(() => {\r\n       this.checkAndRefreshSession();\r\n     }, SESSION_CHECK_INTERVAL);\r\n   }\r\n@@ -51,14 +86,16 @@\n       if (!session) {\r\n         return;\r\n       }\r\n \r\n-      // Check if session needs refresh (5 minutes before expiry)\r\n       if (session.expires_at && session.expires_at - now < SESSION_REFRESH_THRESHOLD) {\r\n-        await this.refreshSession();\r\n+        const refreshedSession = await this.refreshSession();\r\n+        if (!refreshedSession) {\r\n+          logger.warn('Session refresh failed during check', 'SessionManager');\r\n+        }\r\n       }\r\n     } catch (err) {\r\n-      logger.error('Session check failed', err instanceof Error ? err.message : String(err));\r\n+      logger.error('Session check failed', 'SessionManager');\r\n     } finally {\r\n       this.refreshInProgress = false;\r\n     }\r\n   }\r\n@@ -77,25 +114,26 @@\n       }\r\n \r\n       return session;\r\n     } catch (err) {\r\n-      logger.error('Failed to get current session', err instanceof Error ? err.message : String(err));\r\n+      logger.error('Failed to get current session', 'SessionManager');\r\n       return null;\r\n     }\r\n   }\r\n \r\n   private persistSessionState(session: Session) {\r\n     try {\r\n-      const sessionState = {\r\n+      const state: SessionState = {\r\n         timestamp: Date.now(),\r\n         expiresAt: session.expires_at,\r\n-        userId: session.user?.id,\r\n-        role: session.user?.user_metadata?.role\r\n+        userId: session.user?.id || null,\r\n+        role: session.user?.user_metadata?.role || null,\r\n+        lastRefresh: Date.now()\r\n       };\r\n       \r\n-      localStorage.setItem(SESSION_STORAGE_KEY, JSON.stringify(sessionState));\r\n+      localStorage.setItem(SESSION_STORAGE_KEY, JSON.stringify(state));\r\n     } catch (err) {\r\n-      logger.warn('Failed to persist session state', err instanceof Error ? err.message : String(err));\r\n+      logger.warn('Failed to persist session state', 'SessionManager');\r\n     }\r\n   }\r\n \r\n   public async updateUserRole(newRole: UserRole): Promise<void> {\r\n@@ -111,17 +149,15 @@\n       });\r\n \r\n       if (updateError) throw updateError;\r\n       \r\n-      // Verify and refresh session after role update\r\n       await this.refreshSession();\r\n       \r\n       logger.info(`Role updated successfully: ${newRole}`, 'SessionManager');\r\n     } catch (err) {\r\n-      logger.error(`Failed to update role: ${err instanceof Error ? err.message : String(err)}`, 'SessionManager');\r\n+      logger.error('Failed to update role', 'SessionManager');\r\n       throw err;\r\n     }\r\n-\r\n   }\r\n \r\n   public async refreshSession(): Promise<Session | null> {\r\n     if (this.refreshInProgress) {\r\n@@ -131,10 +167,9 @@\n     try {\r\n       this.refreshInProgress = true;\r\n       const now = Date.now();\r\n       \r\n-      // Prevent rapid refresh attempts\r\n-      if (now - this.lastRefreshAttempt < 1000) {\r\n+      if (now - this.lastRefreshAttempt < REFRESH_COOLDOWN) {\r\n         return this.currentSession;\r\n       }\r\n       \r\n       this.lastRefreshAttempt = now;\r\n@@ -152,16 +187,16 @@\n       }\r\n \r\n       return session;\r\n     } catch (err) {\r\n-      logger.error('Failed to refresh session', err instanceof Error ? err.message : String(err));\r\n+      logger.error('Failed to refresh session', 'SessionManager');\r\n       return null;\r\n     } finally {\r\n       this.refreshInProgress = false;\r\n     }\r\n   }\r\n \r\n-  public getPersistedSessionState() {\r\n+  public getPersistedSessionState(): SessionState | null {\r\n     try {\r\n       const state = localStorage.getItem(SESSION_STORAGE_KEY);\r\n       return state ? JSON.parse(state) : null;\r\n     } catch {\r\n@@ -173,8 +208,10 @@\n     if (this.refreshTimer) {\r\n       clearInterval(this.refreshTimer);\r\n     }\r\n     localStorage.removeItem(SESSION_STORAGE_KEY);\r\n+    this.currentSession = null;\r\n+    this.authLoader.clearAuthState();\r\n   }\r\n }\r\n \r\n export const sessionManager = SessionManager.getInstance();\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739217220026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,9 @@\n   private persistSessionState(session: Session) {\r\n     try {\r\n       const state: SessionState = {\r\n         timestamp: Date.now(),\r\n-        expiresAt: session.expires_at,\r\n+        expiresAt: session.expires_at || null,\r\n         userId: session.user?.id || null,\r\n         role: session.user?.user_metadata?.role || null,\r\n         lastRefresh: Date.now()\r\n       };\r\n"
                },
                {
                    "date": 1739276340272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n   expiresAt: number | null;\r\n   userId: string | null;\r\n   role: string | null;\r\n   lastRefresh: number;\r\n+  windowId?: string;\r\n }\r\n \r\n const SESSION_STORAGE_KEY = 'sb-session-state';\r\n const SESSION_CHECK_INTERVAL = 4 * 60 * 1000; // 4 minutes\r\n@@ -24,19 +25,34 @@\n   private refreshTimer: NodeJS.Timeout | null = null;\r\n   private lastRefreshAttempt: number = 0;\r\n   private refreshInProgress: boolean = false;\r\n   private authLoader: AuthLoader;\r\n+  private isChildWindow: boolean;\r\n \r\n   private constructor() {\r\n     this.authLoader = AuthLoader.getInstance();\r\n+    this.isChildWindow = this.authLoader.isChildWindowSession();\r\n     this.initializeSessionCheck();\r\n     this.loadPersistedState();\r\n   }\r\n \r\n   private async loadPersistedState() {\r\n     try {\r\n       const state = this.getPersistedSessionState();\r\n       if (state && this.isStateValid(state)) {\r\n+        // For child windows, try to use parent window's session first\r\n+        if (this.isChildWindow && window.opener) {\r\n+          try {\r\n+            const parentState = JSON.parse(window.opener.localStorage.getItem(SESSION_STORAGE_KEY) || '');\r\n+            if (parentState && this.isStateValid(parentState)) {\r\n+              this.persistSessionState(parentState);\r\n+              return;\r\n+            }\r\n+          } catch (err) {\r\n+            logger.debug('Failed to get parent window session state', 'SessionManager');\r\n+          }\r\n+        }\r\n+\r\n         const session = await this.getCurrentSession();\r\n         if (session) {\r\n           this.currentSession = session;\r\n           logger.debug('Restored persisted session state', 'SessionManager');\r\n@@ -60,11 +76,14 @@\n     if (this.refreshTimer) {\r\n       clearInterval(this.refreshTimer);\r\n     }\r\n \r\n-    this.refreshTimer = setInterval(() => {\r\n-      this.checkAndRefreshSession();\r\n-    }, SESSION_CHECK_INTERVAL);\r\n+    // Child windows don't need to refresh sessions\r\n+    if (!this.isChildWindow) {\r\n+      this.refreshTimer = setInterval(() => {\r\n+        this.checkAndRefreshSession();\r\n+      }, SESSION_CHECK_INTERVAL);\r\n+    }\r\n   }\r\n \r\n   public static getInstance(): SessionManager {\r\n     if (!SessionManager.instance) {\r\n@@ -73,9 +92,9 @@\n     return SessionManager.instance;\r\n   }\r\n \r\n   private async checkAndRefreshSession() {\r\n-    if (this.refreshInProgress) {\r\n+    if (this.refreshInProgress || this.isChildWindow) {\r\n       return;\r\n     }\r\n \r\n     try {\r\n@@ -101,8 +120,20 @@\n   }\r\n \r\n   private async getCurrentSession(): Promise<Session | null> {\r\n     try {\r\n+      // Child windows should try to use parent's session first\r\n+      if (this.isChildWindow && window.opener) {\r\n+        try {\r\n+          const parentState = JSON.parse(window.opener.localStorage.getItem(SESSION_STORAGE_KEY) || '');\r\n+          if (parentState && this.isStateValid(parentState)) {\r\n+            return this.currentSession;\r\n+          }\r\n+        } catch (err) {\r\n+          logger.debug('Failed to get parent window session', 'SessionManager');\r\n+        }\r\n+      }\r\n+\r\n       const { data: { session }, error } = await supabase.auth.getSession();\r\n       \r\n       if (error) {\r\n         throw error;\r\n@@ -126,9 +157,10 @@\n         timestamp: Date.now(),\r\n         expiresAt: session.expires_at || null,\r\n         userId: session.user?.id || null,\r\n         role: session.user?.user_metadata?.role || null,\r\n-        lastRefresh: Date.now()\r\n+        lastRefresh: Date.now(),\r\n+        windowId: this.isChildWindow ? 'child' : 'parent'\r\n       };\r\n       \r\n       localStorage.setItem(SESSION_STORAGE_KEY, JSON.stringify(state));\r\n     } catch (err) {\r\n@@ -159,9 +191,9 @@\n     }\r\n   }\r\n \r\n   public async refreshSession(): Promise<Session | null> {\r\n-    if (this.refreshInProgress) {\r\n+    if (this.refreshInProgress || this.isChildWindow) {\r\n       return this.currentSession;\r\n     }\r\n \r\n     try {\r\n"
                },
                {
                    "date": 1739276639756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,8 +72,9 @@\n     );\r\n   }\r\n \r\n   private initializeSessionCheck() {\r\n+    // Clear any existing timer\r\n     if (this.refreshTimer) {\r\n       clearInterval(this.refreshTimer);\r\n     }\r\n \r\n"
                },
                {
                    "date": 1739276908002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,14 +11,16 @@\n   userId: string | null;\r\n   role: string | null;\r\n   lastRefresh: number;\r\n   windowId?: string;\r\n+  sessionId?: string;\r\n }\r\n \r\n const SESSION_STORAGE_KEY = 'sb-session-state';\r\n const SESSION_CHECK_INTERVAL = 4 * 60 * 1000; // 4 minutes\r\n const SESSION_REFRESH_THRESHOLD = 5 * 60; // 5 minutes before expiry\r\n-const REFRESH_COOLDOWN = 1000; // 1 second cooldown between refresh attempts\r\n+const REFRESH_COOLDOWN = 2000; // Increased cooldown to 2 seconds\r\n+const STATE_CHANGE_THRESHOLD = 500; // Minimum time between state changes\r\n \r\n class SessionManager {\r\n   private static instance: SessionManager;\r\n   private currentSession: Session | null = null;\r\n@@ -26,50 +28,92 @@\n   private lastRefreshAttempt: number = 0;\r\n   private refreshInProgress: boolean = false;\r\n   private authLoader: AuthLoader;\r\n   private isChildWindow: boolean;\r\n+  private sessionId: string;\r\n+  private stateChangeQueue: Array<() => Promise<void>> = [];\r\n+  private processingStateChange: boolean = false;\r\n \r\n   private constructor() {\r\n     this.authLoader = AuthLoader.getInstance();\r\n     this.isChildWindow = this.authLoader.isChildWindowSession();\r\n+    this.sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n+    \r\n+    // Add performance mark\r\n+    if (typeof performance !== 'undefined') {\r\n+      performance.mark('session-manager-init-start');\r\n+    }\r\n+\r\n     this.initializeSessionCheck();\r\n     this.loadPersistedState();\r\n   }\r\n \r\n   private async loadPersistedState() {\r\n     try {\r\n       const state = this.getPersistedSessionState();\r\n       if (state && this.isStateValid(state)) {\r\n-        // For child windows, try to use parent window's session first\r\n         if (this.isChildWindow && window.opener) {\r\n           try {\r\n             const parentState = JSON.parse(window.opener.localStorage.getItem(SESSION_STORAGE_KEY) || '');\r\n             if (parentState && this.isStateValid(parentState)) {\r\n-              this.persistSessionState(parentState);\r\n+              await this.queueStateChange(() => this.applySessionState(parentState));\r\n               return;\r\n             }\r\n           } catch (err) {\r\n             logger.debug('Failed to get parent window session state', 'SessionManager');\r\n           }\r\n         }\r\n \r\n-        const session = await this.getCurrentSession();\r\n-        if (session) {\r\n-          this.currentSession = session;\r\n-          logger.debug('Restored persisted session state', 'SessionManager');\r\n-        }\r\n+        await this.queueStateChange(async () => {\r\n+          const session = await this.getCurrentSession();\r\n+          if (session) {\r\n+            this.currentSession = session;\r\n+            logger.debug('Restored persisted session state', 'SessionManager');\r\n+          }\r\n+        });\r\n       }\r\n     } catch (err) {\r\n       logger.warn('Failed to load persisted state', 'SessionManager');\r\n     }\r\n   }\r\n \r\n+  private async applySessionState(state: SessionState) {\r\n+    this.persistSessionState({\r\n+      ...state,\r\n+      sessionId: this.sessionId,\r\n+      timestamp: Date.now()\r\n+    });\r\n+  }\r\n+\r\n+  private async queueStateChange(operation: () => Promise<void>): Promise<void> {\r\n+    this.stateChangeQueue.push(operation);\r\n+    await this.processStateChangeQueue();\r\n+  }\r\n+\r\n+  private async processStateChangeQueue() {\r\n+    if (this.processingStateChange) return;\r\n+\r\n+    this.processingStateChange = true;\r\n+    try {\r\n+      while (this.stateChangeQueue.length > 0) {\r\n+        const operation = this.stateChangeQueue.shift();\r\n+        if (operation) {\r\n+          await operation();\r\n+          await new Promise(resolve => setTimeout(resolve, STATE_CHANGE_THRESHOLD));\r\n+        }\r\n+      }\r\n+    } finally {\r\n+      this.processingStateChange = false;\r\n+    }\r\n+  }\r\n+\r\n   private isStateValid(state: SessionState): boolean {\r\n     const now = Math.floor(Date.now() / 1000);\r\n     return (\r\n       state.timestamp > now - 24 * 60 * 60 && // Not older than 24 hours\r\n       (!state.expiresAt || state.expiresAt > now) && // Not expired\r\n-      !!state.userId // Has user ID\r\n+      !!state.userId && // Has user ID\r\n+      (!state.sessionId || state.sessionId === this.sessionId) // Matches current session\r\n     );\r\n   }\r\n \r\n   private initializeSessionCheck() {\r\n@@ -159,9 +203,10 @@\n         expiresAt: session.expires_at || null,\r\n         userId: session.user?.id || null,\r\n         role: session.user?.user_metadata?.role || null,\r\n         lastRefresh: Date.now(),\r\n-        windowId: this.isChildWindow ? 'child' : 'parent'\r\n+        windowId: this.isChildWindow ? 'child' : 'parent',\r\n+        sessionId: this.sessionId\r\n       };\r\n       \r\n       localStorage.setItem(SESSION_STORAGE_KEY, JSON.stringify(state));\r\n     } catch (err) {\r\n"
                },
                {
                    "date": 1739276920610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,12 @@\n   windowId?: string;\r\n   sessionId?: string;\r\n }\r\n \r\n+interface ExtendedSession extends Session {\r\n+  sessionId?: string;\r\n+}\r\n+\r\n const SESSION_STORAGE_KEY = 'sb-session-state';\r\n const SESSION_CHECK_INTERVAL = 4 * 60 * 1000; // 4 minutes\r\n const SESSION_REFRESH_THRESHOLD = 5 * 60; // 5 minutes before expiry\r\n const REFRESH_COOLDOWN = 2000; // Increased cooldown to 2 seconds\r\n@@ -76,13 +80,14 @@\n     }\r\n   }\r\n \r\n   private async applySessionState(state: SessionState) {\r\n-    this.persistSessionState({\r\n+    const extendedSession: ExtendedSession = {\r\n       ...state,\r\n       sessionId: this.sessionId,\r\n       timestamp: Date.now()\r\n-    });\r\n+    };\r\n+    this.persistSessionState(extendedSession);\r\n   }\r\n \r\n   private async queueStateChange(operation: () => Promise<void>): Promise<void> {\r\n     this.stateChangeQueue.push(operation);\r\n"
                },
                {
                    "date": 1739276932405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,14 +80,16 @@\n     }\r\n   }\r\n \r\n   private async applySessionState(state: SessionState) {\r\n-    const extendedSession: ExtendedSession = {\r\n-      ...state,\r\n-      sessionId: this.sessionId,\r\n-      timestamp: Date.now()\r\n-    };\r\n-    this.persistSessionState(extendedSession);\r\n+    const session = await this.getCurrentSession();\r\n+    if (session) {\r\n+      const extendedSession: ExtendedSession = {\r\n+        ...session,\r\n+        sessionId: this.sessionId\r\n+      };\r\n+      this.persistSessionState(extendedSession);\r\n+    }\r\n   }\r\n \r\n   private async queueStateChange(operation: () => Promise<void>): Promise<void> {\r\n     this.stateChangeQueue.push(operation);\r\n"
                },
                {
                    "date": 1739277022409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,302 +1,250 @@\n-import { supabase } from '../supabase';\r\n-import { logger } from '../logger';\r\n-import type { Session } from '@supabase/gotrue-js';\r\n-import { AuthLoader } from './AuthLoader';\r\n-\r\n-export type UserRole = 'admin' | 'teacher' | 'student' | 'parent';\r\n-\r\n-interface SessionState {\r\n-  timestamp: number;\r\n-  expiresAt: number | null;\r\n-  userId: string | null;\r\n-  role: string | null;\r\n-  lastRefresh: number;\r\n-  windowId?: string;\r\n-  sessionId?: string;\r\n-}\r\n-\r\n-interface ExtendedSession extends Session {\r\n-  sessionId?: string;\r\n-}\r\n-\r\n-const SESSION_STORAGE_KEY = 'sb-session-state';\r\n-const SESSION_CHECK_INTERVAL = 4 * 60 * 1000; // 4 minutes\r\n-const SESSION_REFRESH_THRESHOLD = 5 * 60; // 5 minutes before expiry\r\n-const REFRESH_COOLDOWN = 2000; // Increased cooldown to 2 seconds\r\n-const STATE_CHANGE_THRESHOLD = 500; // Minimum time between state changes\r\n-\r\n-class SessionManager {\r\n-  private static instance: SessionManager;\r\n-  private currentSession: Session | null = null;\r\n-  private refreshTimer: NodeJS.Timeout | null = null;\r\n-  private lastRefreshAttempt: number = 0;\r\n-  private refreshInProgress: boolean = false;\r\n-  private authLoader: AuthLoader;\r\n-  private isChildWindow: boolean;\r\n-  private sessionId: string;\r\n-  private stateChangeQueue: Array<() => Promise<void>> = [];\r\n-  private processingStateChange: boolean = false;\r\n-\r\n-  private constructor() {\r\n-    this.authLoader = AuthLoader.getInstance();\r\n-    this.isChildWindow = this.authLoader.isChildWindowSession();\r\n-    this.sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n-    \r\n-    // Add performance mark\r\n-    if (typeof performance !== 'undefined') {\r\n-      performance.mark('session-manager-init-start');\r\n-    }\r\n-\r\n-    this.initializeSessionCheck();\r\n-    this.loadPersistedState();\r\n-  }\r\n-\r\n-  private async loadPersistedState() {\r\n-    try {\r\n-      const state = this.getPersistedSessionState();\r\n-      if (state && this.isStateValid(state)) {\r\n-        if (this.isChildWindow && window.opener) {\r\n-          try {\r\n-            const parentState = JSON.parse(window.opener.localStorage.getItem(SESSION_STORAGE_KEY) || '');\r\n-            if (parentState && this.isStateValid(parentState)) {\r\n-              await this.queueStateChange(() => this.applySessionState(parentState));\r\n-              return;\r\n-            }\r\n-          } catch (err) {\r\n-            logger.debug('Failed to get parent window session state', 'SessionManager');\r\n-          }\r\n-        }\r\n-\r\n-        await this.queueStateChange(async () => {\r\n-          const session = await this.getCurrentSession();\r\n-          if (session) {\r\n-            this.currentSession = session;\r\n-            logger.debug('Restored persisted session state', 'SessionManager');\r\n-          }\r\n-        });\r\n-      }\r\n-    } catch (err) {\r\n-      logger.warn('Failed to load persisted state', 'SessionManager');\r\n-    }\r\n-  }\r\n-\r\n-  private async applySessionState(state: SessionState) {\r\n-    const session = await this.getCurrentSession();\r\n-    if (session) {\r\n-      const extendedSession: ExtendedSession = {\r\n-        ...session,\r\n-        sessionId: this.sessionId\r\n-      };\r\n-      this.persistSessionState(extendedSession);\r\n-    }\r\n-  }\r\n-\r\n-  private async queueStateChange(operation: () => Promise<void>): Promise<void> {\r\n-    this.stateChangeQueue.push(operation);\r\n-    await this.processStateChangeQueue();\r\n-  }\r\n-\r\n-  private async processStateChangeQueue() {\r\n-    if (this.processingStateChange) return;\r\n-\r\n-    this.processingStateChange = true;\r\n-    try {\r\n-      while (this.stateChangeQueue.length > 0) {\r\n-        const operation = this.stateChangeQueue.shift();\r\n-        if (operation) {\r\n-          await operation();\r\n-          await new Promise(resolve => setTimeout(resolve, STATE_CHANGE_THRESHOLD));\r\n-        }\r\n-      }\r\n-    } finally {\r\n-      this.processingStateChange = false;\r\n-    }\r\n-  }\r\n-\r\n-  private isStateValid(state: SessionState): boolean {\r\n-    const now = Math.floor(Date.now() / 1000);\r\n-    return (\r\n-      state.timestamp > now - 24 * 60 * 60 && // Not older than 24 hours\r\n-      (!state.expiresAt || state.expiresAt > now) && // Not expired\r\n-      !!state.userId && // Has user ID\r\n-      (!state.sessionId || state.sessionId === this.sessionId) // Matches current session\r\n-    );\r\n-  }\r\n-\r\n-  private initializeSessionCheck() {\r\n-    // Clear any existing timer\r\n-    if (this.refreshTimer) {\r\n-      clearInterval(this.refreshTimer);\r\n-    }\r\n-\r\n-    // Child windows don't need to refresh sessions\r\n-    if (!this.isChildWindow) {\r\n-      this.refreshTimer = setInterval(() => {\r\n-        this.checkAndRefreshSession();\r\n-      }, SESSION_CHECK_INTERVAL);\r\n-    }\r\n-  }\r\n-\r\n-  public static getInstance(): SessionManager {\r\n-    if (!SessionManager.instance) {\r\n-      SessionManager.instance = new SessionManager();\r\n-    }\r\n-    return SessionManager.instance;\r\n-  }\r\n-\r\n-  private async checkAndRefreshSession() {\r\n-    if (this.refreshInProgress || this.isChildWindow) {\r\n-      return;\r\n-    }\r\n-\r\n-    try {\r\n-      this.refreshInProgress = true;\r\n-      const now = Math.floor(Date.now() / 1000);\r\n-      const session = await this.getCurrentSession();\r\n-\r\n-      if (!session) {\r\n-        return;\r\n-      }\r\n-\r\n-      if (session.expires_at && session.expires_at - now < SESSION_REFRESH_THRESHOLD) {\r\n-        const refreshedSession = await this.refreshSession();\r\n-        if (!refreshedSession) {\r\n-          logger.warn('Session refresh failed during check', 'SessionManager');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      logger.error('Session check failed', 'SessionManager');\r\n-    } finally {\r\n-      this.refreshInProgress = false;\r\n-    }\r\n-  }\r\n-\r\n-  private async getCurrentSession(): Promise<Session | null> {\r\n-    try {\r\n-      // Child windows should try to use parent's session first\r\n-      if (this.isChildWindow && window.opener) {\r\n-        try {\r\n-          const parentState = JSON.parse(window.opener.localStorage.getItem(SESSION_STORAGE_KEY) || '');\r\n-          if (parentState && this.isStateValid(parentState)) {\r\n-            return this.currentSession;\r\n-          }\r\n-        } catch (err) {\r\n-          logger.debug('Failed to get parent window session', 'SessionManager');\r\n-        }\r\n-      }\r\n-\r\n-      const { data: { session }, error } = await supabase.auth.getSession();\r\n-      \r\n-      if (error) {\r\n-        throw error;\r\n-      }\r\n-\r\n-      if (session) {\r\n-        this.currentSession = session;\r\n-        this.persistSessionState(session);\r\n-      }\r\n-\r\n-      return session;\r\n-    } catch (err) {\r\n-      logger.error('Failed to get current session', 'SessionManager');\r\n-      return null;\r\n-    }\r\n-  }\r\n-\r\n-  private persistSessionState(session: Session) {\r\n-    try {\r\n-      const state: SessionState = {\r\n-        timestamp: Date.now(),\r\n-        expiresAt: session.expires_at || null,\r\n-        userId: session.user?.id || null,\r\n-        role: session.user?.user_metadata?.role || null,\r\n-        lastRefresh: Date.now(),\r\n-        windowId: this.isChildWindow ? 'child' : 'parent',\r\n-        sessionId: this.sessionId\r\n-      };\r\n-      \r\n-      localStorage.setItem(SESSION_STORAGE_KEY, JSON.stringify(state));\r\n-    } catch (err) {\r\n-      logger.warn('Failed to persist session state', 'SessionManager');\r\n-    }\r\n-  }\r\n-\r\n-  public async updateUserRole(newRole: UserRole): Promise<void> {\r\n-    try {\r\n-      const session = await this.getCurrentSession();\r\n-      \r\n-      if (!session) {\r\n-        throw new Error('No active session');\r\n-      }\r\n-\r\n-      const { error: updateError } = await supabase.auth.updateUser({\r\n-        data: { role: newRole }\r\n-      });\r\n-\r\n-      if (updateError) throw updateError;\r\n-      \r\n-      await this.refreshSession();\r\n-      \r\n-      logger.info(`Role updated successfully: ${newRole}`, 'SessionManager');\r\n-    } catch (err) {\r\n-      logger.error('Failed to update role', 'SessionManager');\r\n-      throw err;\r\n-    }\r\n-  }\r\n-\r\n-  public async refreshSession(): Promise<Session | null> {\r\n-    if (this.refreshInProgress || this.isChildWindow) {\r\n-      return this.currentSession;\r\n-    }\r\n-\r\n-    try {\r\n-      this.refreshInProgress = true;\r\n-      const now = Date.now();\r\n-      \r\n-      if (now - this.lastRefreshAttempt < REFRESH_COOLDOWN) {\r\n-        return this.currentSession;\r\n-      }\r\n-      \r\n-      this.lastRefreshAttempt = now;\r\n-\r\n-      const { data: { session }, error } = await supabase.auth.refreshSession();\r\n-      \r\n-      if (error) {\r\n-        throw error;\r\n-      }\r\n-\r\n-      if (session) {\r\n-        this.currentSession = session;\r\n-        this.persistSessionState(session);\r\n-        logger.info('Session refreshed successfully', 'SessionManager');\r\n-      }\r\n-\r\n-      return session;\r\n-    } catch (err) {\r\n-      logger.error('Failed to refresh session', 'SessionManager');\r\n-      return null;\r\n-    } finally {\r\n-      this.refreshInProgress = false;\r\n-    }\r\n-  }\r\n-\r\n-  public getPersistedSessionState(): SessionState | null {\r\n-    try {\r\n-      const state = localStorage.getItem(SESSION_STORAGE_KEY);\r\n-      return state ? JSON.parse(state) : null;\r\n-    } catch {\r\n-      return null;\r\n-    }\r\n-  }\r\n-\r\n-  public cleanup() {\r\n-    if (this.refreshTimer) {\r\n-      clearInterval(this.refreshTimer);\r\n-    }\r\n-    localStorage.removeItem(SESSION_STORAGE_KEY);\r\n-    this.currentSession = null;\r\n-    this.authLoader.clearAuthState();\r\n-  }\r\n-}\r\n-\r\n+import { supabase } from '../supabase';\n+import { logger } from '../logger';\n+import type { Session } from '@supabase/gotrue-js';\n+import { AuthLoader } from './AuthLoader';\n+\n+export type UserRole = 'admin' | 'teacher' | 'student' | 'parent';\n+\n+interface SessionState {\n+  timestamp: number;\n+  expiresAt: number | null;\n+  userId: string | null;\n+  role: string | null;\n+  lastRefresh: number;\n+  windowId?: string;\n+}\n+\n+const SESSION_STORAGE_KEY = 'sb-session-state';\n+const SESSION_CHECK_INTERVAL = 4 * 60 * 1000; // 4 minutes\n+const SESSION_REFRESH_THRESHOLD = 5 * 60; // 5 minutes before expiry\n+const REFRESH_COOLDOWN = 1000; // 1 second cooldown between refresh attempts\n+\n+class SessionManager {\n+  private static instance: SessionManager;\n+  private currentSession: Session | null = null;\n+  private refreshTimer: NodeJS.Timeout | null = null;\n+  private lastRefreshAttempt: number = 0;\n+  private refreshInProgress: boolean = false;\n+  private authLoader: AuthLoader;\n+  private isChildWindow: boolean;\n+\n+  private constructor() {\n+    this.authLoader = AuthLoader.getInstance();\n+    this.isChildWindow = this.authLoader.isChildWindowSession();\n+    this.initializeSessionCheck();\n+    this.loadPersistedState();\n+  }\n+\n+  private async loadPersistedState() {\n+    try {\n+      const state = this.getPersistedSessionState();\n+      if (state && this.isStateValid(state)) {\n+        // For child windows, try to use parent window's session first\n+        if (this.isChildWindow && window.opener) {\n+          try {\n+            const parentState = JSON.parse(window.opener.localStorage.getItem(SESSION_STORAGE_KEY) || '');\n+            if (parentState && this.isStateValid(parentState)) {\n+              this.persistSessionState(parentState);\n+              return;\n+            }\n+          } catch (err) {\n+            logger.debug('Failed to get parent window session state', 'SessionManager');\n+          }\n+        }\n+\n+        const session = await this.getCurrentSession();\n+        if (session) {\n+          this.currentSession = session;\n+          logger.debug('Restored persisted session state', 'SessionManager');\n+        }\n+      }\n+    } catch (err) {\n+      logger.warn('Failed to load persisted state', 'SessionManager');\n+    }\n+  }\n+\n+  private isStateValid(state: SessionState): boolean {\n+    const now = Math.floor(Date.now() / 1000);\n+    return (\n+      state.timestamp > now - 24 * 60 * 60 && // Not older than 24 hours\n+      (!state.expiresAt || state.expiresAt > now) && // Not expired\n+      !!state.userId // Has user ID\n+    );\n+  }\n+\n+  private initializeSessionCheck() {\n+    // Clear any existing timer\n+    if (this.refreshTimer) {\n+      clearInterval(this.refreshTimer);\n+    }\n+\n+    // Child windows don't need to refresh sessions\n+    if (!this.isChildWindow) {\n+      this.refreshTimer = setInterval(() => {\n+        this.checkAndRefreshSession();\n+      }, SESSION_CHECK_INTERVAL);\n+    }\n+  }\n+\n+  public static getInstance(): SessionManager {\n+    if (!SessionManager.instance) {\n+      SessionManager.instance = new SessionManager();\n+    }\n+    return SessionManager.instance;\n+  }\n+\n+  private async checkAndRefreshSession() {\n+    if (this.refreshInProgress || this.isChildWindow) {\n+      return;\n+    }\n+\n+    try {\n+      this.refreshInProgress = true;\n+      const now = Math.floor(Date.now() / 1000);\n+      const session = await this.getCurrentSession();\n+\n+      if (!session) {\n+        return;\n+      }\n+\n+      if (session.expires_at && session.expires_at - now < SESSION_REFRESH_THRESHOLD) {\n+        const refreshedSession = await this.refreshSession();\n+        if (!refreshedSession) {\n+          logger.warn('Session refresh failed during check', 'SessionManager');\n+        }\n+      }\n+    } catch (err) {\n+      logger.error('Session check failed', 'SessionManager');\n+    } finally {\n+      this.refreshInProgress = false;\n+    }\n+  }\n+\n+  private async getCurrentSession(): Promise<Session | null> {\n+    try {\n+      // Child windows should try to use parent's session first\n+      if (this.isChildWindow && window.opener) {\n+        try {\n+          const parentState = JSON.parse(window.opener.localStorage.getItem(SESSION_STORAGE_KEY) || '');\n+          if (parentState && this.isStateValid(parentState)) {\n+            return this.currentSession;\n+          }\n+        } catch (err) {\n+          logger.debug('Failed to get parent window session', 'SessionManager');\n+        }\n+      }\n+\n+      const { data: { session }, error } = await supabase.auth.getSession();\n+      \n+      if (error) {\n+        throw error;\n+      }\n+\n+      if (session) {\n+        this.currentSession = session;\n+        this.persistSessionState(session);\n+      }\n+\n+      return session;\n+    } catch (err) {\n+      logger.error('Failed to get current session', 'SessionManager');\n+      return null;\n+    }\n+  }\n+\n+  private persistSessionState(session: Session) {\n+    try {\n+      const state: SessionState = {\n+        timestamp: Date.now(),\n+        expiresAt: session.expires_at || null,\n+        userId: session.user?.id || null,\n+        role: session.user?.user_metadata?.role || null,\n+        lastRefresh: Date.now(),\n+        windowId: this.isChildWindow ? 'child' : 'parent'\n+      };\n+      \n+      localStorage.setItem(SESSION_STORAGE_KEY, JSON.stringify(state));\n+    } catch (err) {\n+      logger.warn('Failed to persist session state', 'SessionManager');\n+    }\n+  }\n+\n+  public async updateUserRole(newRole: UserRole): Promise<void> {\n+    try {\n+      const session = await this.getCurrentSession();\n+      \n+      if (!session) {\n+        throw new Error('No active session');\n+      }\n+\n+      const { error: updateError } = await supabase.auth.updateUser({\n+        data: { role: newRole }\n+      });\n+\n+      if (updateError) throw updateError;\n+      \n+      await this.refreshSession();\n+      \n+      logger.info(`Role updated successfully: ${newRole}`, 'SessionManager');\n+    } catch (err) {\n+      logger.error('Failed to update role', 'SessionManager');\n+      throw err;\n+    }\n+  }\n+\n+  public async refreshSession(): Promise<Session | null> {\n+    if (this.refreshInProgress || this.isChildWindow) {\n+      return this.currentSession;\n+    }\n+\n+    try {\n+      this.refreshInProgress = true;\n+      const now = Date.now();\n+      \n+      if (now - this.lastRefreshAttempt < REFRESH_COOLDOWN) {\n+        return this.currentSession;\n+      }\n+      \n+      this.lastRefreshAttempt = now;\n+\n+      const { data: { session }, error } = await supabase.auth.refreshSession();\n+      \n+      if (error) {\n+        throw error;\n+      }\n+\n+      if (session) {\n+        this.currentSession = session;\n+        this.persistSessionState(session);\n+        logger.info('Session refreshed successfully', 'SessionManager');\n+      }\n+\n+      return session;\n+    } catch (err) {\n+      logger.error('Failed to refresh session', 'SessionManager');\n+      return null;\n+    } finally {\n+      this.refreshInProgress = false;\n+    }\n+  }\n+\n+  public getPersistedSessionState(): SessionState | null {\n+    try {\n+      const state = localStorage.getItem(SESSION_STORAGE_KEY);\n+      return state ? JSON.parse(state) : null;\n+    } catch {\n+      return null;\n+    }\n+  }\n+\n+  public cleanup() {\n+    if (this.refreshTimer) {\n+      clearInterval(this.refreshTimer);\n+    }\n+    localStorage.removeItem(SESSION_STORAGE_KEY);\n+    this.currentSession = null;\n+    this.authLoader.clearAuthState();\n+  }\n+}\n+\n export const sessionManager = SessionManager.getInstance();\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739277117217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,14 +11,17 @@\n   userId: string | null;\n   role: string | null;\n   lastRefresh: number;\n   windowId?: string;\n+  version?: number;\n }\n \n const SESSION_STORAGE_KEY = 'sb-session-state';\n const SESSION_CHECK_INTERVAL = 4 * 60 * 1000; // 4 minutes\n const SESSION_REFRESH_THRESHOLD = 5 * 60; // 5 minutes before expiry\n-const REFRESH_COOLDOWN = 1000; // 1 second cooldown between refresh attempts\n+const REFRESH_COOLDOWN = 2000; // Increased from 1000ms to 2000ms\n+const MAX_REFRESH_ATTEMPTS = 3;\n+const REFRESH_ATTEMPT_DELAY = 1000;\n \n class SessionManager {\n   private static instance: SessionManager;\n   private currentSession: Session | null = null;\n@@ -26,8 +29,10 @@\n   private lastRefreshAttempt: number = 0;\n   private refreshInProgress: boolean = false;\n   private authLoader: AuthLoader;\n   private isChildWindow: boolean;\n+  private refreshAttempts: number = 0;\n+  private sessionVersion: number = 0;\n \n   private constructor() {\n     this.authLoader = AuthLoader.getInstance();\n     this.isChildWindow = this.authLoader.isChildWindowSession();\n@@ -54,8 +59,9 @@\n \n         const session = await this.getCurrentSession();\n         if (session) {\n           this.currentSession = session;\n+          this.sessionVersion = state.version || 0;\n           logger.debug('Restored persisted session state', 'SessionManager');\n         }\n       }\n     } catch (err) {\n@@ -153,15 +159,17 @@\n   }\n \n   private persistSessionState(session: Session) {\n     try {\n+      this.sessionVersion++;\n       const state: SessionState = {\n         timestamp: Date.now(),\n         expiresAt: session.expires_at || null,\n         userId: session.user?.id || null,\n         role: session.user?.user_metadata?.role || null,\n         lastRefresh: Date.now(),\n-        windowId: this.isChildWindow ? 'child' : 'parent'\n+        windowId: this.isChildWindow ? 'child' : 'parent',\n+        version: this.sessionVersion\n       };\n       \n       localStorage.setItem(SESSION_STORAGE_KEY, JSON.stringify(state));\n     } catch (err) {\n@@ -206,16 +214,30 @@\n       }\n       \n       this.lastRefreshAttempt = now;\n \n+      // Implement exponential backoff for refresh attempts\n+      if (this.refreshAttempts >= MAX_REFRESH_ATTEMPTS) {\n+        logger.warn('Max refresh attempts reached, waiting for cooldown', 'SessionManager');\n+        setTimeout(() => {\n+          this.refreshAttempts = 0;\n+        }, REFRESH_COOLDOWN * 2);\n+        return this.currentSession;\n+      }\n+\n       const { data: { session }, error } = await supabase.auth.refreshSession();\n       \n       if (error) {\n+        this.refreshAttempts++;\n+        const delay = REFRESH_ATTEMPT_DELAY * Math.pow(2, this.refreshAttempts - 1);\n+        logger.warn(`Session refresh failed, attempt ${this.refreshAttempts}/${MAX_REFRESH_ATTEMPTS}, retrying in ${delay}ms`, 'SessionManager');\n+        await new Promise(resolve => setTimeout(resolve, delay));\n         throw error;\n       }\n \n       if (session) {\n         this.currentSession = session;\n+        this.refreshAttempts = 0;\n         this.persistSessionState(session);\n         logger.info('Session refreshed successfully', 'SessionManager');\n       }\n \n@@ -242,8 +264,10 @@\n       clearInterval(this.refreshTimer);\n     }\n     localStorage.removeItem(SESSION_STORAGE_KEY);\n     this.currentSession = null;\n+    this.refreshAttempts = 0;\n+    this.sessionVersion = 0;\n     this.authLoader.clearAuthState();\n   }\n }\n \n"
                },
                {
                    "date": 1739277125897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,17 +11,14 @@\n   userId: string | null;\n   role: string | null;\n   lastRefresh: number;\n   windowId?: string;\n-  version?: number;\n }\n \n const SESSION_STORAGE_KEY = 'sb-session-state';\n const SESSION_CHECK_INTERVAL = 4 * 60 * 1000; // 4 minutes\n const SESSION_REFRESH_THRESHOLD = 5 * 60; // 5 minutes before expiry\n-const REFRESH_COOLDOWN = 2000; // Increased from 1000ms to 2000ms\n-const MAX_REFRESH_ATTEMPTS = 3;\n-const REFRESH_ATTEMPT_DELAY = 1000;\n+const REFRESH_COOLDOWN = 1000; // 1 second cooldown between refresh attempts\n \n class SessionManager {\n   private static instance: SessionManager;\n   private currentSession: Session | null = null;\n@@ -29,10 +26,8 @@\n   private lastRefreshAttempt: number = 0;\n   private refreshInProgress: boolean = false;\n   private authLoader: AuthLoader;\n   private isChildWindow: boolean;\n-  private refreshAttempts: number = 0;\n-  private sessionVersion: number = 0;\n \n   private constructor() {\n     this.authLoader = AuthLoader.getInstance();\n     this.isChildWindow = this.authLoader.isChildWindowSession();\n@@ -59,9 +54,8 @@\n \n         const session = await this.getCurrentSession();\n         if (session) {\n           this.currentSession = session;\n-          this.sessionVersion = state.version || 0;\n           logger.debug('Restored persisted session state', 'SessionManager');\n         }\n       }\n     } catch (err) {\n@@ -159,17 +153,15 @@\n   }\n \n   private persistSessionState(session: Session) {\n     try {\n-      this.sessionVersion++;\n       const state: SessionState = {\n         timestamp: Date.now(),\n         expiresAt: session.expires_at || null,\n         userId: session.user?.id || null,\n         role: session.user?.user_metadata?.role || null,\n         lastRefresh: Date.now(),\n-        windowId: this.isChildWindow ? 'child' : 'parent',\n-        version: this.sessionVersion\n+        windowId: this.isChildWindow ? 'child' : 'parent'\n       };\n       \n       localStorage.setItem(SESSION_STORAGE_KEY, JSON.stringify(state));\n     } catch (err) {\n@@ -214,30 +206,16 @@\n       }\n       \n       this.lastRefreshAttempt = now;\n \n-      // Implement exponential backoff for refresh attempts\n-      if (this.refreshAttempts >= MAX_REFRESH_ATTEMPTS) {\n-        logger.warn('Max refresh attempts reached, waiting for cooldown', 'SessionManager');\n-        setTimeout(() => {\n-          this.refreshAttempts = 0;\n-        }, REFRESH_COOLDOWN * 2);\n-        return this.currentSession;\n-      }\n-\n       const { data: { session }, error } = await supabase.auth.refreshSession();\n       \n       if (error) {\n-        this.refreshAttempts++;\n-        const delay = REFRESH_ATTEMPT_DELAY * Math.pow(2, this.refreshAttempts - 1);\n-        logger.warn(`Session refresh failed, attempt ${this.refreshAttempts}/${MAX_REFRESH_ATTEMPTS}, retrying in ${delay}ms`, 'SessionManager');\n-        await new Promise(resolve => setTimeout(resolve, delay));\n         throw error;\n       }\n \n       if (session) {\n         this.currentSession = session;\n-        this.refreshAttempts = 0;\n         this.persistSessionState(session);\n         logger.info('Session refreshed successfully', 'SessionManager');\n       }\n \n@@ -264,10 +242,8 @@\n       clearInterval(this.refreshTimer);\n     }\n     localStorage.removeItem(SESSION_STORAGE_KEY);\n     this.currentSession = null;\n-    this.refreshAttempts = 0;\n-    this.sessionVersion = 0;\n     this.authLoader.clearAuthState();\n   }\n }\n \n"
                },
                {
                    "date": 1739277178478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,9 @@\n const SESSION_STORAGE_KEY = 'sb-session-state';\n const SESSION_CHECK_INTERVAL = 4 * 60 * 1000; // 4 minutes\n const SESSION_REFRESH_THRESHOLD = 5 * 60; // 5 minutes before expiry\n const REFRESH_COOLDOWN = 1000; // 1 second cooldown between refresh attempts\n+const MIN_SESSION_LIFETIME = 30 * 1000; // 30 seconds minimum session lifetime\n \n class SessionManager {\n   private static instance: SessionManager;\n   private currentSession: Session | null = null;\n@@ -26,8 +27,9 @@\n   private lastRefreshAttempt: number = 0;\n   private refreshInProgress: boolean = false;\n   private authLoader: AuthLoader;\n   private isChildWindow: boolean;\n+  private sessionStabilityTimeout: NodeJS.Timeout | null = null;\n \n   private constructor() {\n     this.authLoader = AuthLoader.getInstance();\n     this.isChildWindow = this.authLoader.isChildWindowSession();\n@@ -54,8 +56,9 @@\n \n         const session = await this.getCurrentSession();\n         if (session) {\n           this.currentSession = session;\n+          this.stabilizeSession();\n           logger.debug('Restored persisted session state', 'SessionManager');\n         }\n       }\n     } catch (err) {\n@@ -106,11 +109,14 @@\n       if (!session) {\n         return;\n       }\n \n+      // Check if session needs refresh\n       if (session.expires_at && session.expires_at - now < SESSION_REFRESH_THRESHOLD) {\n         const refreshedSession = await this.refreshSession();\n-        if (!refreshedSession) {\n+        if (refreshedSession) {\n+          this.stabilizeSession();\n+        } else {\n           logger.warn('Session refresh failed during check', 'SessionManager');\n         }\n       }\n     } catch (err) {\n@@ -244,7 +250,19 @@\n     localStorage.removeItem(SESSION_STORAGE_KEY);\n     this.currentSession = null;\n     this.authLoader.clearAuthState();\n   }\n+\n+  private stabilizeSession() {\n+    if (this.sessionStabilityTimeout) {\n+      clearTimeout(this.sessionStabilityTimeout);\n+    }\n+\n+    this.sessionStabilityTimeout = setTimeout(() => {\n+      if (this.currentSession) {\n+        this.persistSessionState(this.currentSession);\n+      }\n+    }, MIN_SESSION_LIFETIME);\n+  }\n }\n \n export const sessionManager = SessionManager.getInstance();\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739279307476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,21 +49,21 @@\n               this.persistSessionState(parentState);\n               return;\n             }\n           } catch (err) {\n-            logger.debug('Failed to get parent window session state', 'SessionManager');\n+            logger.debug('Failed to get parent window session state', { source: 'SessionManager' });\n           }\n         }\n \n         const session = await this.getCurrentSession();\n         if (session) {\n           this.currentSession = session;\n           this.stabilizeSession();\n-          logger.debug('Restored persisted session state', 'SessionManager');\n+          logger.debug('Restored persisted session state', { source: 'SessionManager' });\n         }\n       }\n     } catch (err) {\n-      logger.warn('Failed to load persisted state', 'SessionManager');\n+      logger.warn('Failed to load persisted state', { source: 'SessionManager' });\n     }\n   }\n \n   private isStateValid(state: SessionState): boolean {\n@@ -115,13 +115,13 @@\n         const refreshedSession = await this.refreshSession();\n         if (refreshedSession) {\n           this.stabilizeSession();\n         } else {\n-          logger.warn('Session refresh failed during check', 'SessionManager');\n+          logger.warn('Session refresh failed during check', { source: 'SessionManager' } );\n         }\n       }\n     } catch (err) {\n-      logger.error('Session check failed', 'SessionManager');\n+      logger.error('Session check failed', { source: 'SessionManager' } );\n     } finally {\n       this.refreshInProgress = false;\n     }\n   }\n"
                },
                {
                    "date": 1739279326374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n           if (parentState && this.isStateValid(parentState)) {\n             return this.currentSession;\n           }\n         } catch (err) {\n-          logger.debug('Failed to get parent window session', 'SessionManager');\n+          logger.debug('Failed to get parent window session', { source: 'SessionManager' });\n         }\n       }\n \n       const { data: { session }, error } = await supabase.auth.getSession();\n@@ -152,9 +152,9 @@\n       }\n \n       return session;\n     } catch (err) {\n-      logger.error('Failed to get current session', 'SessionManager');\n+      logger.error('Failed to get current session', { source: 'SessionManager' });\n       return null;\n     }\n   }\n \n@@ -170,9 +170,9 @@\n       };\n       \n       localStorage.setItem(SESSION_STORAGE_KEY, JSON.stringify(state));\n     } catch (err) {\n-      logger.warn('Failed to persist session state', 'SessionManager');\n+      logger.warn('Failed to persist session state', { source: 'SessionManager' });\n     }\n   }\n \n   public async updateUserRole(newRole: UserRole): Promise<void> {\n@@ -190,11 +190,11 @@\n       if (updateError) throw updateError;\n       \n       await this.refreshSession();\n       \n-      logger.info(`Role updated successfully: ${newRole}`, 'SessionManager');\n+      logger.info(`Role updated successfully: ${newRole}`, { source: 'SessionManager' });\n     } catch (err) {\n-      logger.error('Failed to update role', 'SessionManager');\n+      logger.error('Failed to update role', { source: 'SessionManager' });\n       throw err;\n     }\n   }\n \n@@ -221,14 +221,14 @@\n \n       if (session) {\n         this.currentSession = session;\n         this.persistSessionState(session);\n-        logger.info('Session refreshed successfully', 'SessionManager');\n+        logger.info('Session refreshed successfully', { source: 'SessionManager' });\n       }\n \n       return session;\n     } catch (err) {\n-      logger.error('Failed to refresh session', 'SessionManager');\n+      logger.error('Failed to refresh session', { source: 'SessionManager' });\n       return null;\n     } finally {\n       this.refreshInProgress = false;\n     }\n"
                },
                {
                    "date": 1739388263187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import { AuthLoader } from './AuthLoader';\n \n export type UserRole = 'admin' | 'teacher' | 'student' | 'parent';\n \n-interface SessionState {\n+export interface SessionState {\n   timestamp: number;\n   expiresAt: number | null;\n   userId: string | null;\n   role: string | null;\n"
                },
                {
                    "date": 1739388542335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n const SESSION_REFRESH_THRESHOLD = 5 * 60; // 5 minutes before expiry\n const REFRESH_COOLDOWN = 1000; // 1 second cooldown between refresh attempts\n const MIN_SESSION_LIFETIME = 30 * 1000; // 30 seconds minimum session lifetime\n \n-class SessionManager {\n+export class SessionManager {\n   private static instance: SessionManager;\n   private currentSession: Session | null = null;\n   private refreshTimer: NodeJS.Timeout | null = null;\n   private lastRefreshAttempt: number = 0;\n@@ -95,9 +95,9 @@\n     }\n     return SessionManager.instance;\n   }\n \n-  private async checkAndRefreshSession() {\n+  public async checkAndRefreshSession(): Promise<void> {\n     if (this.refreshInProgress || this.isChildWindow) {\n       return;\n     }\n \n"
                },
                {
                    "date": 1739389052390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,14 +5,18 @@\n \n export type UserRole = 'admin' | 'teacher' | 'student' | 'parent';\n \n export interface SessionState {\n+  isAuthenticated: boolean;\n+  currentRole?: string;\n+  lastActivity: Date;\n+  lastRefresh: Date;\n+  refreshAttempts: number;\n+  sessionErrors: string[];\n   timestamp: number;\n-  expiresAt: number | null;\n-  userId: string | null;\n-  role: string | null;\n-  lastRefresh: number;\n-  windowId?: string;\n+  expiresAt: Date;\n+  userId: string;\n+  role: string;\n }\n \n const SESSION_STORAGE_KEY = 'sb-session-state';\n const SESSION_CHECK_INTERVAL = 4 * 60 * 1000; // 4 minutes\n"
                },
                {
                    "date": 1739389067204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,10 @@\n   timestamp: number;\n   expiresAt: Date;\n   userId: string;\n   role: string;\n+  lastRefresh: number;\n+  windowId?: string;\n }\n \n const SESSION_STORAGE_KEY = 'sb-session-state';\n const SESSION_CHECK_INTERVAL = 4 * 60 * 1000; // 4 minutes\n"
                },
                {
                    "date": 1739389074897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,8 @@\n   timestamp: number;\n   expiresAt: Date;\n   userId: string;\n   role: string;\n-  lastRefresh: number;\n   windowId?: string;\n }\n \n const SESSION_STORAGE_KEY = 'sb-session-state';\n"
                },
                {
                    "date": 1739389094513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n   private isStateValid(state: SessionState): boolean {\n     const now = Math.floor(Date.now() / 1000);\n     return (\n       state.timestamp > now - 24 * 60 * 60 && // Not older than 24 hours\n-      (!state.expiresAt || state.expiresAt > now) && // Not expired\n+      (!state.expiresAt || state.expiresAt.getTime() / 1000 > now) && // Convert Date to seconds\n       !!state.userId // Has user ID\n     );\n   }\n \n"
                },
                {
                    "date": 1739389111152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,11 +166,11 @@\n   private persistSessionState(session: Session) {\n     try {\n       const state: SessionState = {\n         timestamp: Date.now(),\n-        expiresAt: session.expires_at || null,\n-        userId: session.user?.id || null,\n-        role: session.user?.user_metadata?.role || null,\n+        expiresAt: session.expires_at ? new Date(session.expires_at * 1000) : new Date(),\n+        userId: session.user?.id || '',\n+        role: session.user?.user_metadata?.role || '',\n         lastRefresh: Date.now(),\n         windowId: this.isChildWindow ? 'child' : 'parent'\n       };\n       \n"
                },
                {
                    "date": 1739389124341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,9 +169,9 @@\n         timestamp: Date.now(),\n         expiresAt: session.expires_at ? new Date(session.expires_at * 1000) : new Date(),\n         userId: session.user?.id || '',\n         role: session.user?.user_metadata?.role || '',\n-        lastRefresh: Date.now(),\n+        lastRefresh: new Date(),\n         windowId: this.isChildWindow ? 'child' : 'parent'\n       };\n       \n       localStorage.setItem(SESSION_STORAGE_KEY, JSON.stringify(state));\n"
                },
                {
                    "date": 1739389143230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,8 +170,12 @@\n         expiresAt: session.expires_at ? new Date(session.expires_at * 1000) : new Date(),\n         userId: session.user?.id || '',\n         role: session.user?.user_metadata?.role || '',\n         lastRefresh: new Date(),\n+        isAuthenticated: true,\n+        lastActivity: new Date(),\n+        refreshAttempts: 0,\n+        sessionErrors: [],\n         windowId: this.isChildWindow ? 'child' : 'parent'\n       };\n       \n       localStorage.setItem(SESSION_STORAGE_KEY, JSON.stringify(state));\n"
                }
            ],
            "date": 1739024343783,
            "name": "Commit-0",
            "content": "import { supabase } from '../supabase';\r\nimport { logger } from '../logger';\r\nimport type { Session } from '@supabase/gotrue-js';\r\n\r\nexport type UserRole = 'admin' | 'teacher' | 'student' | 'parent';\r\n\r\nclass SessionManager {\r\n  private static instance: SessionManager;\r\n\r\n  private constructor() {}\r\n\r\n  public static getInstance(): SessionManager {\r\n    if (!SessionManager.instance) {\r\n      SessionManager.instance = new SessionManager();\r\n    }\r\n    return SessionManager.instance;\r\n  }\r\n\r\n  public async updateUserRole(newRole: UserRole): Promise<void> {\r\n    try {\r\n      // Get current session\r\n      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\r\n      \r\n      if (sessionError) throw sessionError;\r\n      \r\n      if (!session) {\r\n        // Try to refresh session first\r\n        const { data: { session: refreshedSession }, error: refreshError } = \r\n          await supabase.auth.refreshSession();\r\n          \r\n        if (refreshError) throw refreshError;\r\n        if (!refreshedSession) throw new Error('No session available');\r\n      }\r\n\r\n      // Update user metadata\r\n      const { error: updateError } = await supabase.auth.updateUser({\r\n        data: { role: newRole }\r\n      });\r\n\r\n      if (updateError) throw updateError;\r\n      \r\n      // Verify session is still valid\r\n      const { data: { session: verifiedSession }, error: verifyError } = \r\n        await supabase.auth.getSession();\r\n        \r\n      if (verifyError || !verifiedSession) {\r\n        throw new Error('Session validation failed after role update');\r\n      }\r\n\r\n      logger.info(`Role updated successfully to ${newRole}`, 'SessionManager');\r\n    } catch (err) {\r\n      logger.error('Failed to update role', {\r\n        context: { error: err, newRole },\r\n        source: 'SessionManager'\r\n      });\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  public async refreshSession(): Promise<Session | null> {\r\n    try {\r\n      // Get current session with retry\r\n      let session;\r\n      for (let i = 0; i < 3; i++) {\r\n        const { data: { session: currentSession }, error } = await supabase.auth.getSession();\r\n        if (!error && currentSession) {\r\n          session = currentSession;\r\n          break;\r\n        }\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n      }\r\n\r\n      if (!session) {\r\n        // Try to refresh session\r\n        const { data: refreshData, error: refreshError } = await supabase.auth.refreshSession();\r\n        if (refreshError || !refreshData.session) {\r\n          throw new Error('No active session available');\r\n        }\r\n        session = refreshData.session;\r\n      }\r\n\r\n      // Update session expiry\r\n      const expiryDate = new Date();\r\n      expiryDate.setDate(expiryDate.getDate() + 7); // 7 days\r\n      \r\n      const sessionData = {\r\n        ...session,\r\n        expires_at: expiryDate.toISOString()\r\n      };\r\n\r\n      localStorage.setItem('sb-auth-token', JSON.stringify(sessionData));\r\n\r\n      logger.info('Session refreshed successfully', {\r\n        context: { \r\n          expiresAt: expiryDate.toISOString()\r\n        },\r\n        source: 'SessionManager'\r\n      });\r\n\r\n      return session;\r\n    } catch (err) {\r\n      logger.error('Failed to refresh session', {\r\n        context: { error: err },\r\n        source: 'SessionManager'\r\n      });\r\n      throw err;\r\n    }\r\n  }\r\n}\r\n\r\nexport const sessionManager = SessionManager.getInstance();"
        }
    ]
}