{
    "sourceFile": "src/lib/auth/SessionMonitor.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1739020020892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739020045643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,16 +31,9 @@\n \r\n   private async initializeMonitoring() {\r\n     // Monitor auth state changes\r\n     supabase.auth.onAuthStateChange((event, session) => {\r\n-      logger.info(`Auth state changed: ${event}`, {\r\n-        context: {\r\n-          event,\r\n-          userId: session?.user?.id,\r\n-          role: session?.user?.role\r\n-        },\r\n-        source: 'SessionMonitor'\r\n-      });\r\n+      logger.info(`Auth state changed: ${event}, user: ${session?.user?.id}, role: ${session?.user?.role}`, 'SessionMonitor');\r\n \r\n       this.updateState({\r\n         isAuthenticated: !!session,\r\n         currentRole: session?.user?.role as string,\r\n"
                },
                {
                    "date": 1739020076336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,15 +74,9 @@\n     }\r\n   }\r\n \r\n   private handleSessionLoss() {\r\n-    logger.error('Unexpected session loss detected', {\r\n-      context: { \r\n-        lastActivity: this.state.lastActivity,\r\n-        currentRole: this.state.currentRole\r\n-      },\r\n-      source: 'SessionMonitor'\r\n-    });\r\n+    logger.error(`Unexpected session loss detected - Last activity: ${this.state.lastActivity}, Role: ${this.state.currentRole || 'none'}`, 'SessionMonitor');\r\n \r\n     errorTracker.trackError({\r\n       message: 'Unexpected session loss',\r\n       severity: 'error',\r\n"
                },
                {
                    "date": 1739020084155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,11 +89,10 @@\n   }\r\n \r\n   private handleSignOut() {\r\n     this.state.sessionErrors = [];\r\n-    logger.info('User signed out', {\r\n-      source: 'SessionMonitor'\r\n-    });\r\n+    logger.info('User signed out', 'SessionMonitor');\r\n+\r\n   }\r\n \r\n   private recordSessionError(error: string) {\r\n     this.state.sessionErrors = [\r\n"
                },
                {
                    "date": 1739020569620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,16 +6,25 @@\n   isAuthenticated: boolean;\r\n   lastActivity: Date;\r\n   currentRole?: string;\r\n   sessionErrors: string[];\r\n+  lastRefresh?: Date;\r\n+  refreshAttempts: number;\r\n+  lastOperation?: {\r\n+    type: string;\r\n+    timestamp: Date;\r\n+    success: boolean;\r\n+    error?: string;\r\n+  };\r\n }\r\n \r\n export class SessionMonitor {\r\n   private static instance: SessionMonitor;\r\n   private state: SessionState = {\r\n     isAuthenticated: false,\r\n     lastActivity: new Date(),\r\n-    sessionErrors: []\r\n+    sessionErrors: [],\r\n+    refreshAttempts: 0\r\n   };\r\n   private listeners: Set<(state: SessionState) => void> = new Set();\r\n \r\n   private constructor() {\r\n@@ -54,24 +63,33 @@\n       const { data: { session }, error } = await supabase.auth.getSession();\r\n       \r\n       if (error) {\r\n         this.recordSessionError(`Session check failed: ${error.message}`);\r\n+        this.trackOperation('check_session', false, error.message);\r\n         return;\r\n       }\r\n \r\n       if (!session && this.state.isAuthenticated) {\r\n         this.recordSessionError('Session lost unexpectedly');\r\n         this.handleSessionLoss();\r\n+        return;\r\n       }\r\n \r\n-      this.updateState({\r\n-        isAuthenticated: !!session,\r\n-        currentRole: session?.user?.role as string,\r\n-        lastActivity: new Date()\r\n-      });\r\n+      if (session) {\r\n+        this.updateState({\r\n+          isAuthenticated: true,\r\n+          currentRole: session.user?.role as string,\r\n+          lastActivity: new Date(),\r\n+          lastRefresh: new Date(),\r\n+          refreshAttempts: 0\r\n+        });\r\n+        this.trackOperation('check_session', true);\r\n+      }\r\n \r\n     } catch (err) {\r\n-      this.recordSessionError(`Session check error: ${err instanceof Error ? err.message : String(err)}`);\r\n+      const errorMessage = err instanceof Error ? err.message : String(err);\r\n+      this.recordSessionError(`Session check error: ${errorMessage}`);\r\n+      this.trackOperation('check_session', false, errorMessage);\r\n     }\r\n   }\r\n \r\n   private handleSessionLoss() {\r\n@@ -124,7 +142,51 @@\n \r\n   public getSessionErrors(): string[] {\r\n     return [...this.state.sessionErrors];\r\n   }\r\n+\r\n+  private trackOperation(type: string, success: boolean, error?: string) {\r\n+    this.updateState({\r\n+      lastOperation: {\r\n+        type,\r\n+        timestamp: new Date(),\r\n+        success,\r\n+        error\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  public async refreshSession() {\r\n+    try {\r\n+      this.updateState({ refreshAttempts: this.state.refreshAttempts + 1 });\r\n+      \r\n+      const { data: { session }, error } = await supabase.auth.refreshSession();\r\n+      \r\n+      if (error) {\r\n+        this.trackOperation('refresh_session', false, error.message);\r\n+        throw error;\r\n+      }\r\n+\r\n+      if (!session) {\r\n+        this.trackOperation('refresh_session', false, 'No session returned');\r\n+        throw new Error('Session refresh failed - no session returned');\r\n+      }\r\n+\r\n+      this.updateState({\r\n+        isAuthenticated: true,\r\n+        currentRole: session.user?.role as string,\r\n+        lastActivity: new Date(),\r\n+        lastRefresh: new Date()\r\n+      });\r\n+\r\n+      this.trackOperation('refresh_session', true);\r\n+      return session;\r\n+\r\n+    } catch (err) {\r\n+      const errorMessage = err instanceof Error ? err.message : String(err);\r\n+      this.recordSessionError(`Session refresh failed: ${errorMessage}`);\r\n+      throw err;\r\n+    }\r\n+  }\r\n }\r\n \r\n export const sessionMonitor = SessionMonitor.getInstance(); \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739024046260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,15 +67,17 @@\n         this.trackOperation('check_session', false, error.message);\r\n         return;\r\n       }\r\n \r\n-      if (!session && this.state.isAuthenticated) {\r\n-        this.recordSessionError('Session lost unexpectedly');\r\n+      const isValid = this.isValidSession(session);\r\n+      \r\n+      if (!isValid && this.state.isAuthenticated) {\r\n+        this.recordSessionError('Session invalid or expired');\r\n         this.handleSessionLoss();\r\n         return;\r\n       }\r\n \r\n-      if (session) {\r\n+      if (isValid) {\r\n         this.updateState({\r\n           isAuthenticated: true,\r\n           currentRole: session.user?.role as string,\r\n           lastActivity: new Date(),\r\n@@ -158,35 +160,63 @@\n   public async refreshSession() {\r\n     try {\r\n       this.updateState({ refreshAttempts: this.state.refreshAttempts + 1 });\r\n       \r\n-      const { data: { session }, error } = await supabase.auth.refreshSession();\r\n+      const { data, error } = await supabase.auth.refreshSession();\r\n       \r\n       if (error) {\r\n         this.trackOperation('refresh_session', false, error.message);\r\n+        this.recordSessionError(`Session refresh failed: ${error.message}`);\r\n         throw error;\r\n       }\r\n \r\n-      if (!session) {\r\n-        this.trackOperation('refresh_session', false, 'No session returned');\r\n-        throw new Error('Session refresh failed - no session returned');\r\n+      if (!data?.session) {\r\n+        const errorMessage = 'No session returned from refresh';\r\n+        this.trackOperation('refresh_session', false, errorMessage);\r\n+        this.recordSessionError(errorMessage);\r\n+        throw new Error(errorMessage);\r\n       }\r\n \r\n+      // Update state with new session data\r\n       this.updateState({\r\n         isAuthenticated: true,\r\n-        currentRole: session.user?.role as string,\r\n+        currentRole: data.session.user?.role as string,\r\n         lastActivity: new Date(),\r\n-        lastRefresh: new Date()\r\n+        lastRefresh: new Date(),\r\n+        refreshAttempts: 0 // Reset attempts on success\r\n       });\r\n \r\n       this.trackOperation('refresh_session', true);\r\n-      return session;\r\n+      \r\n+      // Clear any session errors on successful refresh\r\n+      if (this.state.sessionErrors.length > 0) {\r\n+        this.state.sessionErrors = [];\r\n+        this.notifyListeners();\r\n+      }\r\n \r\n+      return data.session;\r\n+\r\n     } catch (err) {\r\n-      const errorMessage = err instanceof Error ? err.message : String(err);\r\n+      const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';\r\n       this.recordSessionError(`Session refresh failed: ${errorMessage}`);\r\n+      \r\n+      // If we've tried too many times, add additional context\r\n+      if (this.state.refreshAttempts >= 3) {\r\n+        this.recordSessionError('Maximum refresh attempts reached - please try logging in again');\r\n+      }\r\n+      \r\n       throw err;\r\n     }\r\n   }\r\n+\r\n+  // Add this helper method to check if session is valid\r\n+  private isValidSession(session: any): boolean {\r\n+    return !!(\r\n+      session &&\r\n+      session.user &&\r\n+      session.user.id &&\r\n+      session.access_token\r\n+    );\r\n+  }\r\n }\r\n \r\n export const sessionMonitor = SessionMonitor.getInstance(); \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739024063163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,9 @@\n \r\n       if (isValid) {\r\n         this.updateState({\r\n           isAuthenticated: true,\r\n-          currentRole: session.user?.role as string,\r\n+          currentRole: session.user?.role as string || null,\r\n           lastActivity: new Date(),\r\n           lastRefresh: new Date(),\r\n           refreshAttempts: 0\r\n         });\r\n"
                },
                {
                    "date": 1739024075807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,9 @@\n \r\n       if (isValid) {\r\n         this.updateState({\r\n           isAuthenticated: true,\r\n-          currentRole: session.user?.role as string || null,\r\n+          currentRole: session.user?.role as string | undefined,\r\n           lastActivity: new Date(),\r\n           lastRefresh: new Date(),\r\n           refreshAttempts: 0\r\n         });\r\n"
                },
                {
                    "date": 1739024086861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,9 @@\n \r\n       if (isValid) {\r\n         this.updateState({\r\n           isAuthenticated: true,\r\n-          currentRole: session.user?.role as string | undefined,\r\n+          currentRole: session?.user?.role as string | undefined,\r\n           lastActivity: new Date(),\r\n           lastRefresh: new Date(),\r\n           refreshAttempts: 0\r\n         });\r\n"
                },
                {
                    "date": 1739024849802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,17 +42,9 @@\n     // Monitor auth state changes\r\n     supabase.auth.onAuthStateChange((event, session) => {\r\n       logger.info(`Auth state changed: ${event}, user: ${session?.user?.id}, role: ${session?.user?.role}`, 'SessionMonitor');\r\n \r\n-      this.updateState({\r\n-        isAuthenticated: !!session,\r\n-        currentRole: session?.user?.role as string,\r\n-        lastActivity: new Date()\r\n-      });\r\n-\r\n-      if (event === 'SIGNED_OUT') {\r\n-        this.handleSignOut();\r\n-      }\r\n+      this.handleAuthStateChange(event, session);\r\n     });\r\n \r\n     // Periodic session check\r\n     setInterval(() => this.checkSession(), 30000);\r\n@@ -107,12 +99,45 @@\n       source: 'SessionMonitor'\r\n     });\r\n   }\r\n \r\n-  private handleSignOut() {\r\n-    this.state.sessionErrors = [];\r\n-    logger.info('User signed out', 'SessionMonitor');\r\n+  private async handleAuthStateChange(event: string, session: Session | null) {\r\n+    try {\r\n+      if (event === 'SIGNED_OUT') {\r\n+        this.updateState({\r\n+          isAuthenticated: false,\r\n+          currentRole: undefined,\r\n+          lastActivity: new Date(),\r\n+          refreshAttempts: 0,\r\n+          sessionErrors: []\r\n+        });\r\n+        logger.info('User signed out', 'SessionMonitor');\r\n+        return;\r\n+      }\r\n \r\n+      if (session) {\r\n+        this.updateState({\r\n+          isAuthenticated: true,\r\n+          currentRole: session.user?.role as string | undefined,\r\n+          lastActivity: new Date(),\r\n+          lastRefresh: new Date(),\r\n+          refreshAttempts: 0,\r\n+          sessionErrors: []\r\n+        });\r\n+      } else if (this.state.isAuthenticated) {\r\n+        // Handle session loss\r\n+        this.updateState({\r\n+          isAuthenticated: false,\r\n+          currentRole: undefined,\r\n+          lastActivity: new Date(),\r\n+          refreshAttempts: 0\r\n+        });\r\n+        logger.info('Session expired or invalid', 'SessionMonitor');\r\n+      }\r\n+    } catch (err) {\r\n+      const errorMessage = err instanceof Error ? err.message : String(err);\r\n+      this.recordSessionError(`Auth state change error: ${errorMessage}`);\r\n+    }\r\n   }\r\n \r\n   private recordSessionError(error: string) {\r\n     this.state.sessionErrors = [\r\n"
                },
                {
                    "date": 1739024863905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import { supabase } from '../supabase';\r\n import { logger } from '../logger';\r\n import { errorTracker } from '../errorTracker';\r\n+import { Session } from '@supabase/supabase-js';\r\n \r\n interface SessionState {\r\n   isAuthenticated: boolean;\r\n   lastActivity: Date;\r\n"
                },
                {
                    "date": 1739024950996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,25 +60,31 @@\n         this.trackOperation('check_session', false, error.message);\r\n         return;\r\n       }\r\n \r\n-      const isValid = this.isValidSession(session);\r\n-      \r\n-      if (!isValid && this.state.isAuthenticated) {\r\n-        this.recordSessionError('Session invalid or expired');\r\n-        this.handleSessionLoss();\r\n+      // If we have a valid session but state shows not authenticated\r\n+      if (session?.user && !this.state.isAuthenticated) {\r\n+        this.updateState({\r\n+          isAuthenticated: true,\r\n+          currentRole: session.user.role as string | undefined,\r\n+          lastActivity: new Date(),\r\n+          lastRefresh: new Date(),\r\n+          refreshAttempts: 0,\r\n+          sessionErrors: [] // Clear errors on successful session recovery\r\n+        });\r\n+        this.trackOperation('check_session', true);\r\n         return;\r\n       }\r\n \r\n-      if (isValid) {\r\n+      // If we have no session but state shows authenticated\r\n+      if (!session?.user && this.state.isAuthenticated) {\r\n         this.updateState({\r\n-          isAuthenticated: true,\r\n-          currentRole: session?.user?.role as string | undefined,\r\n+          isAuthenticated: false,\r\n+          currentRole: undefined,\r\n           lastActivity: new Date(),\r\n-          lastRefresh: new Date(),\r\n           refreshAttempts: 0\r\n         });\r\n-        this.trackOperation('check_session', true);\r\n+        this.recordSessionError('Session invalid or expired');\r\n       }\r\n \r\n     } catch (err) {\r\n       const errorMessage = err instanceof Error ? err.message : String(err);\r\n"
                },
                {
                    "date": 1739025192239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,13 +39,43 @@\n     return SessionMonitor.instance;\r\n   }\r\n \r\n   private async initializeMonitoring() {\r\n+    // Try to restore session from storage first\r\n+    const storedSession = localStorage.getItem('supabase.auth.token');\r\n+    if (storedSession) {\r\n+      try {\r\n+        const { currentSession } = JSON.parse(storedSession);\r\n+        if (currentSession) {\r\n+          this.updateState({\r\n+            isAuthenticated: true,\r\n+            currentRole: currentSession.user?.role as string | undefined,\r\n+            lastActivity: new Date(),\r\n+            lastRefresh: new Date(currentSession.expires_at),\r\n+            refreshAttempts: 0,\r\n+            sessionErrors: []\r\n+          });\r\n+        }\r\n+      } catch (err) {\r\n+        logger.error(`Failed to restore session: ${err instanceof Error ? err.message : String(err)}`, 'SessionMonitor');\r\n+      }\r\n+    }\r\n+\r\n     // Monitor auth state changes\r\n-    supabase.auth.onAuthStateChange((event, session) => {\r\n+    supabase.auth.onAuthStateChange(async (event, session) => {\r\n       logger.info(`Auth state changed: ${event}, user: ${session?.user?.id}, role: ${session?.user?.role}`, 'SessionMonitor');\r\n \r\n-      this.handleAuthStateChange(event, session);\r\n+      if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') {\r\n+        // Persist session\r\n+        localStorage.setItem('supabase.auth.token', JSON.stringify({\r\n+          currentSession: session,\r\n+          expiresAt: session?.expires_at\r\n+        }));\r\n+      } else if (event === 'SIGNED_OUT') {\r\n+        localStorage.removeItem('supabase.auth.token');\r\n+      }\r\n+\r\n+      await this.handleAuthStateChange(event, session);\r\n     });\r\n \r\n     // Periodic session check\r\n     setInterval(() => this.checkSession(), 30000);\r\n@@ -188,55 +218,35 @@\n       }\r\n     });\r\n   }\r\n \r\n-  public async refreshSession() {\r\n+  public async refreshSession(): Promise<Session | null> {\r\n     try {\r\n-      this.updateState({ refreshAttempts: this.state.refreshAttempts + 1 });\r\n+      const { data: { session }, error } = await supabase.auth.refreshSession();\r\n       \r\n-      const { data, error } = await supabase.auth.refreshSession();\r\n+      if (error) throw error;\r\n       \r\n-      if (error) {\r\n-        this.trackOperation('refresh_session', false, error.message);\r\n-        this.recordSessionError(`Session refresh failed: ${error.message}`);\r\n-        throw error;\r\n+      if (session) {\r\n+        // Update storage with new session\r\n+        localStorage.setItem('supabase.auth.token', JSON.stringify({\r\n+          currentSession: session,\r\n+          expiresAt: session.expires_at\r\n+        }));\r\n+        \r\n+        this.updateState({\r\n+          isAuthenticated: true,\r\n+          currentRole: session.user?.role as string | undefined,\r\n+          lastActivity: new Date(),\r\n+          lastRefresh: new Date(),\r\n+          refreshAttempts: 0,\r\n+          sessionErrors: []\r\n+        });\r\n       }\r\n \r\n-      if (!data?.session) {\r\n-        const errorMessage = 'No session returned from refresh';\r\n-        this.trackOperation('refresh_session', false, errorMessage);\r\n-        this.recordSessionError(errorMessage);\r\n-        throw new Error(errorMessage);\r\n-      }\r\n-\r\n-      // Update state with new session data\r\n-      this.updateState({\r\n-        isAuthenticated: true,\r\n-        currentRole: data.session.user?.role as string,\r\n-        lastActivity: new Date(),\r\n-        lastRefresh: new Date(),\r\n-        refreshAttempts: 0 // Reset attempts on success\r\n-      });\r\n-\r\n-      this.trackOperation('refresh_session', true);\r\n-      \r\n-      // Clear any session errors on successful refresh\r\n-      if (this.state.sessionErrors.length > 0) {\r\n-        this.state.sessionErrors = [];\r\n-        this.notifyListeners();\r\n-      }\r\n-\r\n-      return data.session;\r\n-\r\n+      return session;\r\n     } catch (err) {\r\n-      const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';\r\n+      const errorMessage = err instanceof Error ? err.message : String(err);\r\n       this.recordSessionError(`Session refresh failed: ${errorMessage}`);\r\n-      \r\n-      // If we've tried too many times, add additional context\r\n-      if (this.state.refreshAttempts >= 3) {\r\n-        this.recordSessionError('Maximum refresh attempts reached - please try logging in again');\r\n-      }\r\n-      \r\n       throw err;\r\n     }\r\n   }\r\n \r\n"
                },
                {
                    "date": 1739043584545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,11 @@\n import { supabase } from '../supabase';\r\n import { logger } from '../logger';\r\n import { errorTracker } from '../errorTracker';\r\n import { Session } from '@supabase/supabase-js';\r\n+import { SessionLoader } from './strategies/SessionLoader';\r\n+import { RetryStrategy } from './strategies/RetryStrategy';\r\n+import { FallbackStrategy } from './strategies/FallbackStrategy';\r\n \r\n interface SessionState {\r\n   isAuthenticated: boolean;\r\n   lastActivity: Date;\r\n@@ -19,17 +22,27 @@\n }\r\n \r\n export class SessionMonitor {\r\n   private static instance: SessionMonitor;\r\n+  private static readonly STORAGE_KEY = 'sb:token'; // Match Supabase's key\r\n   private state: SessionState = {\r\n     isAuthenticated: false,\r\n     lastActivity: new Date(),\r\n     sessionErrors: [],\r\n     refreshAttempts: 0\r\n   };\r\n   private listeners: Set<(state: SessionState) => void> = new Set();\r\n+  private retryStrategy: RetryStrategy;\r\n+  private sessionLoader: typeof SessionLoader;\r\n \r\n   private constructor() {\r\n+    this.retryStrategy = new RetryStrategy({\r\n+      maxAttempts: 3,\r\n+      baseDelay: 500,\r\n+      maxDelay: 2000,\r\n+      timeout: 5000\r\n+    });\r\n+    this.sessionLoader = SessionLoader;\r\n     this.initializeMonitoring();\r\n   }\r\n \r\n   public static getInstance(): SessionMonitor {\r\n@@ -39,141 +52,201 @@\n     return SessionMonitor.instance;\r\n   }\r\n \r\n   private async initializeMonitoring() {\r\n-    // Try to restore session from storage first\r\n-    const storedSession = localStorage.getItem('supabase.auth.token');\r\n-    if (storedSession) {\r\n-      try {\r\n-        const { currentSession } = JSON.parse(storedSession);\r\n-        if (currentSession) {\r\n-          this.updateState({\r\n-            isAuthenticated: true,\r\n-            currentRole: currentSession.user?.role as string | undefined,\r\n-            lastActivity: new Date(),\r\n-            lastRefresh: new Date(currentSession.expires_at),\r\n-            refreshAttempts: 0,\r\n-            sessionErrors: []\r\n-          });\r\n-        }\r\n-      } catch (err) {\r\n-        logger.error(`Failed to restore session: ${err instanceof Error ? err.message : String(err)}`, 'SessionMonitor');\r\n+    try {\r\n+      // Try to load session using SessionLoader first\r\n+      const session = await this.sessionLoader.loadSession();\r\n+      \r\n+      if (session) {\r\n+        await this.persistSession(session);\r\n+        this.updateState({\r\n+          isAuthenticated: true,\r\n+          currentRole: session.user?.role as string | undefined,\r\n+          lastActivity: new Date(),\r\n+          lastRefresh: new Date(),\r\n+          refreshAttempts: 0,\r\n+          sessionErrors: []\r\n+        });\r\n       }\r\n-    }\r\n \r\n-    // Monitor auth state changes\r\n-    supabase.auth.onAuthStateChange(async (event, session) => {\r\n-      logger.info(`Auth state changed: ${event}, user: ${session?.user?.id}, role: ${session?.user?.role}`, 'SessionMonitor');\r\n+      // Monitor auth state changes\r\n+      supabase.auth.onAuthStateChange(async (event, session) => {\r\n+        logger.info(`Auth state changed: ${event}`, 'SessionMonitor');\r\n \r\n-      if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') {\r\n-        // Persist session\r\n-        localStorage.setItem('supabase.auth.token', JSON.stringify({\r\n-          currentSession: session,\r\n-          expiresAt: session?.expires_at\r\n-        }));\r\n-      } else if (event === 'SIGNED_OUT') {\r\n-        localStorage.removeItem('supabase.auth.token');\r\n-      }\r\n+        if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') {\r\n+          if (session) {\r\n+            await this.handleSignIn(session);\r\n+          }\r\n+        } else if (event === 'SIGNED_OUT') {\r\n+          await this.handleSignOut();\r\n+        }\r\n+      });\r\n \r\n-      await this.handleAuthStateChange(event, session);\r\n-    });\r\n+      // Periodic session check with retry strategy\r\n+      setInterval(() => {\r\n+        this.retryStrategy.execute(() => this.checkSession());\r\n+      }, 30000);\r\n \r\n-    // Periodic session check\r\n-    setInterval(() => this.checkSession(), 30000);\r\n+    } catch (err) {\r\n+      logger.error(`Session monitoring initialization failed: ${err instanceof Error ? err.message : String(err)}`, 'SessionMonitor');\r\n+    }\r\n   }\r\n \r\n+  private async persistSession(session: Session) {\r\n+    try {\r\n+      localStorage.setItem(SessionMonitor.STORAGE_KEY, JSON.stringify({\r\n+        currentSession: session,\r\n+        expiresAt: session.expires_at,\r\n+        timestamp: Date.now()\r\n+      }));\r\n+    } catch (err) {\r\n+      logger.error(`Failed to persist session: ${err instanceof Error ? err.message : String(err)}`, 'SessionMonitor');\r\n+    }\r\n+  }\r\n+\r\n+  private async verifySession() {\r\n+    try {\r\n+      const { data: { session }, error } = await supabase.auth.getSession();\r\n+      if (error || !session) {\r\n+        this.handleSessionLoss();\r\n+        return false;\r\n+      }\r\n+      return true;\r\n+    } catch (err) {\r\n+      this.handleSessionLoss();\r\n+      return false;\r\n+    }\r\n+  }\r\n+\r\n   private async checkSession() {\r\n     try {\r\n       const { data: { session }, error } = await supabase.auth.getSession();\r\n-      \r\n+\r\n       if (error) {\r\n-        this.recordSessionError(`Session check failed: ${error.message}`);\r\n-        this.trackOperation('check_session', false, error.message);\r\n+        this.recordSessionError(`Session check error: ${error.message}`);\r\n+        await this.attemptSessionRecovery();\r\n         return;\r\n       }\r\n \r\n-      // If we have a valid session but state shows not authenticated\r\n-      if (session?.user && !this.state.isAuthenticated) {\r\n+      const isValid = this.isValidSession(session);\r\n+      \r\n+      if (!isValid && this.state.isAuthenticated) {\r\n+        logger.warn('Session invalid, attempting recovery', 'SessionMonitor');\r\n+        await this.attemptSessionRecovery();\r\n+        return;\r\n+      }\r\n+\r\n+      if (isValid) {\r\n+        await this.persistSession(session);\r\n         this.updateState({\r\n           isAuthenticated: true,\r\n-          currentRole: session.user.role as string | undefined,\r\n+          currentRole: session.user?.role as string | undefined,\r\n           lastActivity: new Date(),\r\n           lastRefresh: new Date(),\r\n           refreshAttempts: 0,\r\n-          sessionErrors: [] // Clear errors on successful session recovery\r\n+          sessionErrors: []\r\n         });\r\n         this.trackOperation('check_session', true);\r\n-        return;\r\n       }\r\n+    } catch (err) {\r\n+      const errorMessage = err instanceof Error ? err.message : String(err);\r\n+      this.recordSessionError(`Session check failed: ${errorMessage}`);\r\n+      await this.attemptSessionRecovery();\r\n+    }\r\n+  }\r\n \r\n-      // If we have no session but state shows authenticated\r\n-      if (!session?.user && this.state.isAuthenticated) {\r\n-        this.updateState({\r\n-          isAuthenticated: false,\r\n-          currentRole: undefined,\r\n-          lastActivity: new Date(),\r\n-          refreshAttempts: 0\r\n-        });\r\n-        this.recordSessionError('Session invalid or expired');\r\n+  private async attemptSessionRecovery() {\r\n+    try {\r\n+      // First try to refresh the session\r\n+      const { data: { session }, error } = await supabase.auth.refreshSession();\r\n+      \r\n+      if (!error && session) {\r\n+        await this.handleSignIn(session);\r\n+        logger.info('Session recovered through refresh', 'SessionMonitor');\r\n+        return true;\r\n       }\r\n \r\n+      // If refresh fails, try to recover from storage\r\n+      const storedSession = localStorage.getItem(SessionMonitor.STORAGE_KEY);\r\n+      if (storedSession) {\r\n+        const { currentSession, timestamp } = JSON.parse(storedSession);\r\n+        \r\n+        // Check if stored session is not too old (less than 1 hour)\r\n+        if (currentSession?.refresh_token && Date.now() - timestamp < 60 * 60 * 1000) {\r\n+          const refreshResult = await supabase.auth.refreshSession({\r\n+            refresh_token: currentSession.refresh_token\r\n+          });\r\n+\r\n+          if (!refreshResult.error && refreshResult.data.session) {\r\n+            await this.handleSignIn(refreshResult.data.session);\r\n+            logger.info('Session recovered from storage', 'SessionMonitor');\r\n+            return true;\r\n+          }\r\n+        }\r\n+      }\r\n+\r\n+      // If all recovery attempts fail, handle session loss\r\n+      this.handleSessionLoss();\r\n+      return false;\r\n     } catch (err) {\r\n       const errorMessage = err instanceof Error ? err.message : String(err);\r\n-      this.recordSessionError(`Session check error: ${errorMessage}`);\r\n-      this.trackOperation('check_session', false, errorMessage);\r\n+      logger.error(`Session recovery failed: ${errorMessage}`, 'SessionMonitor');\r\n+      this.handleSessionLoss();\r\n+      return false;\r\n     }\r\n   }\r\n \r\n   private handleSessionLoss() {\r\n-    logger.error(`Unexpected session loss detected - Last activity: ${this.state.lastActivity}, Role: ${this.state.currentRole || 'none'}`, 'SessionMonitor');\r\n-\r\n-    errorTracker.trackError({\r\n-      message: 'Unexpected session loss',\r\n-      severity: 'error',\r\n-      context: {\r\n-        lastActivity: this.state.lastActivity,\r\n-        currentRole: this.state.currentRole\r\n-      },\r\n-      source: 'SessionMonitor'\r\n+    this.updateState({\r\n+      isAuthenticated: false,\r\n+      currentRole: undefined,\r\n+      lastActivity: new Date(),\r\n+      refreshAttempts: this.state.refreshAttempts + 1,\r\n+      sessionErrors: [\r\n+        ...this.state.sessionErrors,\r\n+        'Session lost - please sign in again'\r\n+      ].slice(-5)\r\n     });\r\n+    \r\n+    // Clear stored session\r\n+    localStorage.removeItem(SessionMonitor.STORAGE_KEY);\r\n+    \r\n+    // Track the operation\r\n+    this.trackOperation('session_loss', false);\r\n+    \r\n+    // Log the event\r\n+    logger.warn('Session lost, user needs to sign in again', 'SessionMonitor');\r\n   }\r\n \r\n-  private async handleAuthStateChange(event: string, session: Session | null) {\r\n+  private async handleSignIn(session: Session) {\r\n     try {\r\n-      if (event === 'SIGNED_OUT') {\r\n-        this.updateState({\r\n-          isAuthenticated: false,\r\n-          currentRole: undefined,\r\n-          lastActivity: new Date(),\r\n-          refreshAttempts: 0,\r\n-          sessionErrors: []\r\n-        });\r\n-        logger.info('User signed out', 'SessionMonitor');\r\n-        return;\r\n-      }\r\n+      await this.persistSession(session);\r\n+      this.updateState({\r\n+        isAuthenticated: true,\r\n+        currentRole: session.user?.role as string,\r\n+        lastActivity: new Date(),\r\n+        lastRefresh: new Date(),\r\n+        refreshAttempts: 0,\r\n+        sessionErrors: []\r\n+      });\r\n+    } catch (err) {\r\n+      logger.error(`Sign in handling failed: ${err instanceof Error ? err.message : String(err)}`, 'SessionMonitor');\r\n+    }\r\n+  }\r\n \r\n-      if (session) {\r\n-        this.updateState({\r\n-          isAuthenticated: true,\r\n-          currentRole: session.user?.role as string | undefined,\r\n-          lastActivity: new Date(),\r\n-          lastRefresh: new Date(),\r\n-          refreshAttempts: 0,\r\n-          sessionErrors: []\r\n-        });\r\n-      } else if (this.state.isAuthenticated) {\r\n-        // Handle session loss\r\n-        this.updateState({\r\n-          isAuthenticated: false,\r\n-          currentRole: undefined,\r\n-          lastActivity: new Date(),\r\n-          refreshAttempts: 0\r\n-        });\r\n-        logger.info('Session expired or invalid', 'SessionMonitor');\r\n-      }\r\n+  private async handleSignOut() {\r\n+    try {\r\n+      localStorage.removeItem(SessionMonitor.STORAGE_KEY);\r\n+      this.updateState({\r\n+        isAuthenticated: false,\r\n+        currentRole: undefined,\r\n+        lastActivity: new Date(),\r\n+        refreshAttempts: 0,\r\n+        sessionErrors: []\r\n+      });\r\n     } catch (err) {\r\n-      const errorMessage = err instanceof Error ? err.message : String(err);\r\n-      this.recordSessionError(`Auth state change error: ${errorMessage}`);\r\n+      logger.error(`Sign out handling failed: ${err instanceof Error ? err.message : String(err)}`, 'SessionMonitor');\r\n     }\r\n   }\r\n \r\n   private recordSessionError(error: string) {\r\n@@ -220,30 +293,36 @@\n   }\r\n \r\n   public async refreshSession(): Promise<Session | null> {\r\n     try {\r\n-      const { data: { session }, error } = await supabase.auth.refreshSession();\r\n-      \r\n-      if (error) throw error;\r\n-      \r\n-      if (session) {\r\n-        // Update storage with new session\r\n-        localStorage.setItem('supabase.auth.token', JSON.stringify({\r\n-          currentSession: session,\r\n-          expiresAt: session.expires_at\r\n-        }));\r\n+      return await this.retryStrategy.execute(async () => {\r\n+        const { data: { session }, error } = await supabase.auth.refreshSession();\r\n         \r\n-        this.updateState({\r\n-          isAuthenticated: true,\r\n-          currentRole: session.user?.role as string | undefined,\r\n-          lastActivity: new Date(),\r\n-          lastRefresh: new Date(),\r\n-          refreshAttempts: 0,\r\n-          sessionErrors: []\r\n-        });\r\n-      }\r\n+        if (error) {\r\n+          // Try fallback strategy\r\n+          const fallbackSession = await FallbackStrategy.refreshSession();\r\n+          if (fallbackSession.data.session) {\r\n+            await this.persistSession(fallbackSession.data.session);\r\n+            return fallbackSession.data.session;\r\n+          }\r\n+          throw error;\r\n+        }\r\n+        \r\n+        if (session) {\r\n+          await this.persistSession(session);\r\n+          this.updateState({\r\n+            isAuthenticated: true,\r\n+            currentRole: session.user?.role as string | undefined,\r\n+            lastActivity: new Date(),\r\n+            lastRefresh: new Date(),\r\n+            refreshAttempts: 0,\r\n+            sessionErrors: []\r\n+          });\r\n+          return session;\r\n+        }\r\n \r\n-      return session;\r\n+        throw new Error('No session returned from refresh');\r\n+      });\r\n     } catch (err) {\r\n       const errorMessage = err instanceof Error ? err.message : String(err);\r\n       this.recordSessionError(`Session refresh failed: ${errorMessage}`);\r\n       throw err;\r\n@@ -251,14 +330,34 @@\n   }\r\n \r\n   // Add this helper method to check if session is valid\r\n   private isValidSession(session: any): boolean {\r\n-    return !!(\r\n-      session &&\r\n-      session.user &&\r\n-      session.user.id &&\r\n-      session.access_token\r\n-    );\r\n+    if (!session || !session.user || !session.access_token) {\r\n+      return false;\r\n+    }\r\n+\r\n+    // Check if session is expired\r\n+    if (session.expires_at) {\r\n+      const expiryTime = new Date(session.expires_at).getTime();\r\n+      if (Date.now() >= expiryTime) {\r\n+        logger.debug('Session expired', 'SessionMonitor');\r\n+        return false;\r\n+      }\r\n+    }\r\n+\r\n+    // Check for required user properties\r\n+    if (!session.user.id || !session.user.role) {\r\n+      logger.debug('Session missing required user properties', 'SessionMonitor');\r\n+      return false;\r\n+    }\r\n+\r\n+    // Check token format (basic check)\r\n+    if (!session.access_token.startsWith('ey')) {\r\n+      logger.debug('Invalid token format', 'SessionMonitor');\r\n+      return false;\r\n+    }\r\n+\r\n+    return true;\r\n   }\r\n }\r\n \r\n export const sessionMonitor = SessionMonitor.getInstance(); \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739044955743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n         await this.attemptSessionRecovery();\r\n         return;\r\n       }\r\n \r\n-      if (isValid) {\r\n+      if (isValid && session) {\r\n         await this.persistSession(session);\r\n         this.updateState({\r\n           isAuthenticated: true,\r\n           currentRole: session.user?.role as string | undefined,\r\n"
                },
                {
                    "date": 1739045444947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,10 @@\n \r\n export class SessionMonitor {\r\n   private static instance: SessionMonitor;\r\n   private static readonly STORAGE_KEY = 'sb:token'; // Match Supabase's key\r\n+  private static readonly SESSION_CHECK_INTERVAL = 4 * 60 * 1000; // Check every 4 minutes\r\n+  private static readonly SESSION_EXPIRY_BUFFER = 5 * 60 * 1000; // 5 minute buffer before expiry\r\n   private state: SessionState = {\r\n     isAuthenticated: false,\r\n     lastActivity: new Date(),\r\n     sessionErrors: [],\r\n@@ -32,8 +34,9 @@\n   };\r\n   private listeners: Set<(state: SessionState) => void> = new Set();\r\n   private retryStrategy: RetryStrategy;\r\n   private sessionLoader: typeof SessionLoader;\r\n+  private sessionCheckInterval?: NodeJS.Timeout;\r\n \r\n   private constructor() {\r\n     this.retryStrategy = new RetryStrategy({\r\n       maxAttempts: 3,\r\n@@ -81,12 +84,17 @@\n           await this.handleSignOut();\r\n         }\r\n       });\r\n \r\n-      // Periodic session check with retry strategy\r\n-      setInterval(() => {\r\n+      // Clear any existing interval\r\n+      if (this.sessionCheckInterval) {\r\n+        clearInterval(this.sessionCheckInterval);\r\n+      }\r\n+\r\n+      // Set up periodic session check with optimized interval\r\n+      this.sessionCheckInterval = setInterval(() => {\r\n         this.retryStrategy.execute(() => this.checkSession());\r\n-      }, 30000);\r\n+      }, SessionMonitor.SESSION_CHECK_INTERVAL);\r\n \r\n     } catch (err) {\r\n       logger.error(`Session monitoring initialization failed: ${err instanceof Error ? err.message : String(err)}`, 'SessionMonitor');\r\n     }\r\n@@ -328,21 +336,28 @@\n       throw err;\r\n     }\r\n   }\r\n \r\n-  // Add this helper method to check if session is valid\r\n   private isValidSession(session: any): boolean {\r\n     if (!session || !session.user || !session.access_token) {\r\n       return false;\r\n     }\r\n \r\n-    // Check if session is expired\r\n+    // Check if session is nearing expiry with buffer time\r\n     if (session.expires_at) {\r\n       const expiryTime = new Date(session.expires_at).getTime();\r\n-      if (Date.now() >= expiryTime) {\r\n+      const timeUntilExpiry = expiryTime - Date.now();\r\n+      \r\n+      if (timeUntilExpiry <= 0) {\r\n         logger.debug('Session expired', 'SessionMonitor');\r\n         return false;\r\n       }\r\n+\r\n+      // Proactively refresh if within buffer period\r\n+      if (timeUntilExpiry < SessionMonitor.SESSION_EXPIRY_BUFFER) {\r\n+        logger.debug('Session nearing expiry, will refresh', 'SessionMonitor');\r\n+        return false;\r\n+      }\r\n     }\r\n \r\n     // Check for required user properties\r\n     if (!session.user.id || !session.user.role) {\r\n@@ -357,7 +372,15 @@\n     }\r\n \r\n     return true;\r\n   }\r\n+\r\n+  // Add cleanup method\r\n+  public cleanup() {\r\n+    if (this.sessionCheckInterval) {\r\n+      clearInterval(this.sessionCheckInterval);\r\n+    }\r\n+    this.listeners.clear();\r\n+  }\r\n }\r\n \r\n export const sessionMonitor = SessionMonitor.getInstance(); \n\\ No newline at end of file\n"
                }
            ],
            "date": 1739020020892,
            "name": "Commit-0",
            "content": "import { supabase } from '../supabase';\r\nimport { logger } from '../logger';\r\nimport { errorTracker } from '../errorTracker';\r\n\r\ninterface SessionState {\r\n  isAuthenticated: boolean;\r\n  lastActivity: Date;\r\n  currentRole?: string;\r\n  sessionErrors: string[];\r\n}\r\n\r\nexport class SessionMonitor {\r\n  private static instance: SessionMonitor;\r\n  private state: SessionState = {\r\n    isAuthenticated: false,\r\n    lastActivity: new Date(),\r\n    sessionErrors: []\r\n  };\r\n  private listeners: Set<(state: SessionState) => void> = new Set();\r\n\r\n  private constructor() {\r\n    this.initializeMonitoring();\r\n  }\r\n\r\n  public static getInstance(): SessionMonitor {\r\n    if (!SessionMonitor.instance) {\r\n      SessionMonitor.instance = new SessionMonitor();\r\n    }\r\n    return SessionMonitor.instance;\r\n  }\r\n\r\n  private async initializeMonitoring() {\r\n    // Monitor auth state changes\r\n    supabase.auth.onAuthStateChange((event, session) => {\r\n      logger.info(`Auth state changed: ${event}`, {\r\n        context: {\r\n          event,\r\n          userId: session?.user?.id,\r\n          role: session?.user?.role\r\n        },\r\n        source: 'SessionMonitor'\r\n      });\r\n\r\n      this.updateState({\r\n        isAuthenticated: !!session,\r\n        currentRole: session?.user?.role as string,\r\n        lastActivity: new Date()\r\n      });\r\n\r\n      if (event === 'SIGNED_OUT') {\r\n        this.handleSignOut();\r\n      }\r\n    });\r\n\r\n    // Periodic session check\r\n    setInterval(() => this.checkSession(), 30000);\r\n  }\r\n\r\n  private async checkSession() {\r\n    try {\r\n      const { data: { session }, error } = await supabase.auth.getSession();\r\n      \r\n      if (error) {\r\n        this.recordSessionError(`Session check failed: ${error.message}`);\r\n        return;\r\n      }\r\n\r\n      if (!session && this.state.isAuthenticated) {\r\n        this.recordSessionError('Session lost unexpectedly');\r\n        this.handleSessionLoss();\r\n      }\r\n\r\n      this.updateState({\r\n        isAuthenticated: !!session,\r\n        currentRole: session?.user?.role as string,\r\n        lastActivity: new Date()\r\n      });\r\n\r\n    } catch (err) {\r\n      this.recordSessionError(`Session check error: ${err instanceof Error ? err.message : String(err)}`);\r\n    }\r\n  }\r\n\r\n  private handleSessionLoss() {\r\n    logger.error('Unexpected session loss detected', {\r\n      context: { \r\n        lastActivity: this.state.lastActivity,\r\n        currentRole: this.state.currentRole\r\n      },\r\n      source: 'SessionMonitor'\r\n    });\r\n\r\n    errorTracker.trackError({\r\n      message: 'Unexpected session loss',\r\n      severity: 'error',\r\n      context: {\r\n        lastActivity: this.state.lastActivity,\r\n        currentRole: this.state.currentRole\r\n      },\r\n      source: 'SessionMonitor'\r\n    });\r\n  }\r\n\r\n  private handleSignOut() {\r\n    this.state.sessionErrors = [];\r\n    logger.info('User signed out', {\r\n      source: 'SessionMonitor'\r\n    });\r\n  }\r\n\r\n  private recordSessionError(error: string) {\r\n    this.state.sessionErrors = [\r\n      ...this.state.sessionErrors,\r\n      error\r\n    ].slice(-5); // Keep last 5 errors\r\n\r\n    this.notifyListeners();\r\n  }\r\n\r\n  private updateState(updates: Partial<SessionState>) {\r\n    this.state = { ...this.state, ...updates };\r\n    this.notifyListeners();\r\n  }\r\n\r\n  public addListener(listener: (state: SessionState) => void): () => void {\r\n    this.listeners.add(listener);\r\n    listener({ ...this.state });\r\n    return () => this.listeners.delete(listener);\r\n  }\r\n\r\n  private notifyListeners() {\r\n    this.listeners.forEach(listener => listener({ ...this.state }));\r\n  }\r\n\r\n  public getState(): SessionState {\r\n    return { ...this.state };\r\n  }\r\n\r\n  public getSessionErrors(): string[] {\r\n    return [...this.state.sessionErrors];\r\n  }\r\n}\r\n\r\nexport const sessionMonitor = SessionMonitor.getInstance(); "
        }
    ]
}