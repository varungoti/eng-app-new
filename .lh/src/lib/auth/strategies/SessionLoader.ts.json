{
    "sourceFile": "src/lib/auth/strategies/SessionLoader.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1739024424666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739043948138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,33 +6,135 @@\n \r\n export class SessionLoader {\r\n   private static retryStrategy = new RetryStrategy({\r\n     maxAttempts: 3,\r\n-    baseDelay: 500, // Reduced from 1000\r\n-    maxDelay: 2000, // Reduced from 5000\r\n-    timeout: 5000 // Reduced from 8000\r\n+    baseDelay: 500,\r\n+    maxDelay: 2000,\r\n+    timeout: 5000\r\n   });\r\n \r\n   private static loadingStrategy = new LoadingStrategy('SessionLoader');\r\n+  private static readonly STORAGE_KEY = 'sb-auth-token'; // Match Supabase's key exactly\r\n+  private static readonly SESSION_EXPIRY = 7 * 24 * 60 * 60 * 1000; // 7 days\r\n \r\n   public static async loadSession(): Promise<Session | null> {\r\n     this.loadingStrategy.start();\r\n \r\n     try {\r\n+      // First try to get current session from Supabase\r\n       const { data: { session }, error } = await this.retryStrategy.execute(() => \r\n         supabase.auth.getSession()\r\n       );\r\n \r\n-      if (error) throw error;\r\n-\r\n       if (session) {\r\n+        await this.persistSession(session);\r\n         logger.info(`Session loaded successfully for user ${session.user?.id}`, 'SessionLoader');\r\n+        this.loadingStrategy.end();\r\n+        return session;\r\n       }\r\n \r\n+      if (error) {\r\n+        logger.warn(`Failed to get current session: ${error.message}`, 'SessionLoader');\r\n+      }\r\n+\r\n+      // Try to recover from storage if no current session\r\n+      const storedSession = await this.getStoredSession();\r\n+      if (storedSession) {\r\n+        logger.info('Session recovered from storage', 'SessionLoader');\r\n+        this.loadingStrategy.end();\r\n+        return storedSession;\r\n+      }\r\n+\r\n       this.loadingStrategy.end();\r\n-      return session;\r\n+      return null;\r\n     } catch (err) {\r\n-      this.loadingStrategy.end(err instanceof Error ? err : new Error(String(err)));\r\n+      const error = err instanceof Error ? err : new Error(String(err));\r\n+      logger.error(`Session loading failed: ${error.message}`, 'SessionLoader');\r\n+      this.loadingStrategy.end(error);\r\n+      throw error;\r\n+    }\r\n+  }\r\n+\r\n+  private static async getStoredSession(): Promise<Session | null> {\r\n+    try {\r\n+      const stored = localStorage.getItem(this.STORAGE_KEY);\r\n+      if (!stored) return null;\r\n+\r\n+      const { currentSession, expiresAt } = JSON.parse(stored);\r\n+      \r\n+      if (!currentSession?.refresh_token) {\r\n+        localStorage.removeItem(this.STORAGE_KEY);\r\n+        return null;\r\n+      }\r\n+\r\n+      // Check if session is expired\r\n+      if (expiresAt && new Date(expiresAt).getTime() < Date.now()) {\r\n+        logger.debug('Stored session expired, attempting refresh', 'SessionLoader');\r\n+      }\r\n+\r\n+      // Try to refresh the session\r\n+      const { data, error } = await supabase.auth.refreshSession({\r\n+        refresh_token: currentSession.refresh_token\r\n+      });\r\n+\r\n+      if (error) {\r\n+        logger.warn(`Session refresh failed: ${error.message}`, 'SessionLoader');\r\n+        localStorage.removeItem(this.STORAGE_KEY);\r\n+        return null;\r\n+      }\r\n+\r\n+      if (data.session) {\r\n+        await this.persistSession(data.session);\r\n+        return data.session;\r\n+      }\r\n+\r\n+      return null;\r\n+    } catch (err) {\r\n+      logger.error(`Failed to get stored session: ${err instanceof Error ? err.message : String(err)}`, 'SessionLoader');\r\n+      localStorage.removeItem(this.STORAGE_KEY);\r\n+      return null;\r\n+    }\r\n+  }\r\n+\r\n+  private static async persistSession(session: Session): Promise<void> {\r\n+    try {\r\n+      // Set expiry to 7 days from now\r\n+      const expiryDate = new Date();\r\n+      expiryDate.setTime(expiryDate.getTime() + this.SESSION_EXPIRY);\r\n+\r\n+      const sessionData = {\r\n+        currentSession: session,\r\n+        expiresAt: expiryDate.toISOString(),\r\n+        timestamp: Date.now()\r\n+      };\r\n+\r\n+      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(sessionData));\r\n+    } catch (err) {\r\n+      logger.error(`Failed to persist session: ${err instanceof Error ? err.message : String(err)}`, 'SessionLoader');\r\n+    }\r\n+  }\r\n+\r\n+  public static async refreshSession(): Promise<Session | null> {\r\n+    try {\r\n+      const { data, error } = await supabase.auth.refreshSession();\r\n+      \r\n+      if (error) {\r\n+        // Try to recover using stored refresh token\r\n+        const storedSession = await this.getStoredSession();\r\n+        if (storedSession) {\r\n+          return storedSession;\r\n+        }\r\n+        throw error;\r\n+      }\r\n+\r\n+      if (data.session) {\r\n+        await this.persistSession(data.session);\r\n+        return data.session;\r\n+      }\r\n+\r\n+      return null;\r\n+    } catch (err) {\r\n+      logger.error(`Session refresh failed: ${err instanceof Error ? err.message : String(err)}`, 'SessionLoader');\r\n       throw err;\r\n     }\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739044620837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,140 +1,144 @@\n-import { supabase } from '../../supabase';\r\n-import { logger } from '../../logger';\r\n-import { RetryStrategy } from './RetryStrategy';\r\n-import { LoadingStrategy } from './LoadingStrategy';\r\n-import type { Session } from '@supabase/supabase-js';\r\n-\r\n-export class SessionLoader {\r\n-  private static retryStrategy = new RetryStrategy({\r\n-    maxAttempts: 3,\r\n-    baseDelay: 500,\r\n-    maxDelay: 2000,\r\n-    timeout: 5000\r\n-  });\r\n-\r\n-  private static loadingStrategy = new LoadingStrategy('SessionLoader');\r\n-  private static readonly STORAGE_KEY = 'sb-auth-token'; // Match Supabase's key exactly\r\n-  private static readonly SESSION_EXPIRY = 7 * 24 * 60 * 60 * 1000; // 7 days\r\n-\r\n-  public static async loadSession(): Promise<Session | null> {\r\n-    this.loadingStrategy.start();\r\n-\r\n-    try {\r\n-      // First try to get current session from Supabase\r\n-      const { data: { session }, error } = await this.retryStrategy.execute(() => \r\n-        supabase.auth.getSession()\r\n-      );\r\n-\r\n-      if (session) {\r\n-        await this.persistSession(session);\r\n-        logger.info(`Session loaded successfully for user ${session.user?.id}`, 'SessionLoader');\r\n-        this.loadingStrategy.end();\r\n-        return session;\r\n-      }\r\n-\r\n-      if (error) {\r\n-        logger.warn(`Failed to get current session: ${error.message}`, 'SessionLoader');\r\n-      }\r\n-\r\n-      // Try to recover from storage if no current session\r\n-      const storedSession = await this.getStoredSession();\r\n-      if (storedSession) {\r\n-        logger.info('Session recovered from storage', 'SessionLoader');\r\n-        this.loadingStrategy.end();\r\n-        return storedSession;\r\n-      }\r\n-\r\n-      this.loadingStrategy.end();\r\n-      return null;\r\n-    } catch (err) {\r\n-      const error = err instanceof Error ? err : new Error(String(err));\r\n-      logger.error(`Session loading failed: ${error.message}`, 'SessionLoader');\r\n-      this.loadingStrategy.end(error);\r\n-      throw error;\r\n-    }\r\n-  }\r\n-\r\n-  private static async getStoredSession(): Promise<Session | null> {\r\n-    try {\r\n-      const stored = localStorage.getItem(this.STORAGE_KEY);\r\n-      if (!stored) return null;\r\n-\r\n-      const { currentSession, expiresAt } = JSON.parse(stored);\r\n-      \r\n-      if (!currentSession?.refresh_token) {\r\n-        localStorage.removeItem(this.STORAGE_KEY);\r\n-        return null;\r\n-      }\r\n-\r\n-      // Check if session is expired\r\n-      if (expiresAt && new Date(expiresAt).getTime() < Date.now()) {\r\n-        logger.debug('Stored session expired, attempting refresh', 'SessionLoader');\r\n-      }\r\n-\r\n-      // Try to refresh the session\r\n-      const { data, error } = await supabase.auth.refreshSession({\r\n-        refresh_token: currentSession.refresh_token\r\n-      });\r\n-\r\n-      if (error) {\r\n-        logger.warn(`Session refresh failed: ${error.message}`, 'SessionLoader');\r\n-        localStorage.removeItem(this.STORAGE_KEY);\r\n-        return null;\r\n-      }\r\n-\r\n-      if (data.session) {\r\n-        await this.persistSession(data.session);\r\n-        return data.session;\r\n-      }\r\n-\r\n-      return null;\r\n-    } catch (err) {\r\n-      logger.error(`Failed to get stored session: ${err instanceof Error ? err.message : String(err)}`, 'SessionLoader');\r\n-      localStorage.removeItem(this.STORAGE_KEY);\r\n-      return null;\r\n-    }\r\n-  }\r\n-\r\n-  private static async persistSession(session: Session): Promise<void> {\r\n-    try {\r\n-      // Set expiry to 7 days from now\r\n-      const expiryDate = new Date();\r\n-      expiryDate.setTime(expiryDate.getTime() + this.SESSION_EXPIRY);\r\n-\r\n-      const sessionData = {\r\n-        currentSession: session,\r\n-        expiresAt: expiryDate.toISOString(),\r\n-        timestamp: Date.now()\r\n-      };\r\n-\r\n-      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(sessionData));\r\n-    } catch (err) {\r\n-      logger.error(`Failed to persist session: ${err instanceof Error ? err.message : String(err)}`, 'SessionLoader');\r\n-    }\r\n-  }\r\n-\r\n-  public static async refreshSession(): Promise<Session | null> {\r\n-    try {\r\n-      const { data, error } = await supabase.auth.refreshSession();\r\n-      \r\n-      if (error) {\r\n-        // Try to recover using stored refresh token\r\n-        const storedSession = await this.getStoredSession();\r\n-        if (storedSession) {\r\n-          return storedSession;\r\n-        }\r\n-        throw error;\r\n-      }\r\n-\r\n-      if (data.session) {\r\n-        await this.persistSession(data.session);\r\n-        return data.session;\r\n-      }\r\n-\r\n-      return null;\r\n-    } catch (err) {\r\n-      logger.error(`Session refresh failed: ${err instanceof Error ? err.message : String(err)}`, 'SessionLoader');\r\n-      throw err;\r\n-    }\r\n-  }\r\n+import { supabase } from '../../supabase';\n+import { logger } from '../../logger';\n+import { RetryStrategy } from './RetryStrategy';\n+import { LoadingStrategy } from './LoadingStrategy';\n+import type { Session } from '@supabase/supabase-js';\n+\n+export class SessionLoader {\n+  private static retryStrategy = new RetryStrategy({\n+    maxAttempts: 3,\n+    baseDelay: 500,\n+    maxDelay: 2000,\n+    timeout: 5000\n+  });\n+\n+  private static loadingStrategy = new LoadingStrategy('SessionLoader');\n+  private static readonly STORAGE_KEY = 'sb-auth-token'; // Match Supabase's key exactly\n+  private static readonly SESSION_EXPIRY = 7 * 24 * 60 * 60 * 1000; // 7 days\n+\n+  private static get auth() {\n+    return supabase.auth;\n+  }\n+\n+  public static async loadSession(): Promise<Session | null> {\n+    this.loadingStrategy.start();\n+\n+    try {\n+      // First try to get current session from Supabase\n+      const { data: { session }, error } = await this.retryStrategy.execute(() => \n+        this.auth.getSession()\n+      );\n+\n+      if (session) {\n+        await this.persistSession(session);\n+        logger.info(`Session loaded successfully for user ${session.user?.id}`, 'SessionLoader');\n+        this.loadingStrategy.end();\n+        return session;\n+      }\n+\n+      if (error) {\n+        logger.warn(`Failed to get current session: ${error.message}`, 'SessionLoader');\n+      }\n+\n+      // Try to recover from storage if no current session\n+      const storedSession = await this.getStoredSession();\n+      if (storedSession) {\n+        logger.info('Session recovered from storage', 'SessionLoader');\n+        this.loadingStrategy.end();\n+        return storedSession;\n+      }\n+\n+      this.loadingStrategy.end();\n+      return null;\n+    } catch (err) {\n+      const error = err instanceof Error ? err : new Error(String(err));\n+      logger.error(`Session loading failed: ${error.message}`, 'SessionLoader');\n+      this.loadingStrategy.end(error);\n+      throw error;\n+    }\n+  }\n+\n+  private static async getStoredSession(): Promise<Session | null> {\n+    try {\n+      const stored = localStorage.getItem(this.STORAGE_KEY);\n+      if (!stored) return null;\n+\n+      const { currentSession, expiresAt } = JSON.parse(stored);\n+      \n+      if (!currentSession?.refresh_token) {\n+        localStorage.removeItem(this.STORAGE_KEY);\n+        return null;\n+      }\n+\n+      // Check if session is expired\n+      if (expiresAt && new Date(expiresAt).getTime() < Date.now()) {\n+        logger.debug('Stored session expired, attempting refresh', 'SessionLoader');\n+      }\n+\n+      // Try to refresh the session\n+      const { data, error } = await this.auth.refreshSession({\n+        refresh_token: currentSession.refresh_token\n+      });\n+\n+      if (error) {\n+        logger.warn(`Session refresh failed: ${error.message}`, 'SessionLoader');\n+        localStorage.removeItem(this.STORAGE_KEY);\n+        return null;\n+      }\n+\n+      if (data.session) {\n+        await this.persistSession(data.session);\n+        return data.session;\n+      }\n+\n+      return null;\n+    } catch (err) {\n+      logger.error(`Failed to get stored session: ${err instanceof Error ? err.message : String(err)}`, 'SessionLoader');\n+      localStorage.removeItem(this.STORAGE_KEY);\n+      return null;\n+    }\n+  }\n+\n+  private static async persistSession(session: Session): Promise<void> {\n+    try {\n+      // Set expiry to 7 days from now\n+      const expiryDate = new Date();\n+      expiryDate.setTime(expiryDate.getTime() + this.SESSION_EXPIRY);\n+\n+      const sessionData = {\n+        currentSession: session,\n+        expiresAt: expiryDate.toISOString(),\n+        timestamp: Date.now()\n+      };\n+\n+      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(sessionData));\n+    } catch (err) {\n+      logger.error(`Failed to persist session: ${err instanceof Error ? err.message : String(err)}`, 'SessionLoader');\n+    }\n+  }\n+\n+  public static async refreshSession(): Promise<Session | null> {\n+    try {\n+      const { data, error } = await this.auth.refreshSession();\n+      \n+      if (error) {\n+        // Try to recover using stored refresh token\n+        const storedSession = await this.getStoredSession();\n+        if (storedSession) {\n+          return storedSession;\n+        }\n+        throw error;\n+      }\n+\n+      if (data.session) {\n+        await this.persistSession(data.session);\n+        return data.session;\n+      }\n+\n+      return null;\n+    } catch (err) {\n+      logger.error(`Session refresh failed: ${err instanceof Error ? err.message : String(err)}`, 'SessionLoader');\n+      throw err;\n+    }\n+  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739279013521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,30 +30,30 @@\n       );\n \n       if (session) {\n         await this.persistSession(session);\n-        logger.info(`Session loaded successfully for user ${session.user?.id}`, 'SessionLoader');\n+        logger.info(`Session loaded successfully for user ${session.user?.id}`, { source: 'SessionLoader' });\n         this.loadingStrategy.end();\n         return session;\n       }\n \n       if (error) {\n-        logger.warn(`Failed to get current session: ${error.message}`, 'SessionLoader');\n+        logger.warn(`Failed to get current session: ${error.message}`, { source: 'SessionLoader' });\n       }\n \n       // Try to recover from storage if no current session\n       const storedSession = await this.getStoredSession();\n       if (storedSession) {\n-        logger.info('Session recovered from storage', 'SessionLoader');\n+        logger.info('Session recovered from storage', { source: 'SessionLoader' });\n         this.loadingStrategy.end();\n         return storedSession;\n       }\n \n       this.loadingStrategy.end();\n       return null;\n     } catch (err) {\n       const error = err instanceof Error ? err : new Error(String(err));\n-      logger.error(`Session loading failed: ${error.message}`, 'SessionLoader');\n+      logger.error(`Session loading failed: ${error.message}`, { source: 'SessionLoader' });\n       this.loadingStrategy.end(error);\n       throw error;\n     }\n   }\n@@ -71,18 +71,18 @@\n       }\n \n       // Check if session is expired\n       if (expiresAt && new Date(expiresAt).getTime() < Date.now()) {\n-        logger.debug('Stored session expired, attempting refresh', 'SessionLoader');\n+        logger.debug('Stored session expired, attempting refresh', { source: 'SessionLoader' });\n       }\n \n       // Try to refresh the session\n       const { data, error } = await this.auth.refreshSession({\n         refresh_token: currentSession.refresh_token\n       });\n \n       if (error) {\n-        logger.warn(`Session refresh failed: ${error.message}`, 'SessionLoader');\n+        logger.warn(`Session refresh failed: ${error.message}`, { source: 'SessionLoader' });\n         localStorage.removeItem(this.STORAGE_KEY);\n         return null;\n       }\n \n@@ -92,9 +92,9 @@\n       }\n \n       return null;\n     } catch (err) {\n-      logger.error(`Failed to get stored session: ${err instanceof Error ? err.message : String(err)}`, 'SessionLoader');\n+      logger.error(`Failed to get stored session: ${err instanceof Error ? err.message : String(err)}`, { source: 'SessionLoader' });\n       localStorage.removeItem(this.STORAGE_KEY);\n       return null;\n     }\n   }\n@@ -112,9 +112,9 @@\n       };\n \n       localStorage.setItem(this.STORAGE_KEY, JSON.stringify(sessionData));\n     } catch (err) {\n-      logger.error(`Failed to persist session: ${err instanceof Error ? err.message : String(err)}`, 'SessionLoader');\n+      logger.error(`Failed to persist session: ${err instanceof Error ? err.message : String(err)}`, { source: 'SessionLoader' });\n     }\n   }\n \n   public static async refreshSession(): Promise<Session | null> {\n@@ -136,9 +136,9 @@\n       }\n \n       return null;\n     } catch (err) {\n-      logger.error(`Session refresh failed: ${err instanceof Error ? err.message : String(err)}`, 'SessionLoader');\n+      logger.error(`Session refresh failed: ${err instanceof Error ? err.message : String(err)}`, { source: 'SessionLoader' });\n       throw err;\n     }\n   }\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1739024424666,
            "name": "Commit-0",
            "content": "import { supabase } from '../../supabase';\r\nimport { logger } from '../../logger';\r\nimport { RetryStrategy } from './RetryStrategy';\r\nimport { LoadingStrategy } from './LoadingStrategy';\r\nimport type { Session } from '@supabase/supabase-js';\r\n\r\nexport class SessionLoader {\r\n  private static retryStrategy = new RetryStrategy({\r\n    maxAttempts: 3,\r\n    baseDelay: 500, // Reduced from 1000\r\n    maxDelay: 2000, // Reduced from 5000\r\n    timeout: 5000 // Reduced from 8000\r\n  });\r\n\r\n  private static loadingStrategy = new LoadingStrategy('SessionLoader');\r\n\r\n  public static async loadSession(): Promise<Session | null> {\r\n    this.loadingStrategy.start();\r\n\r\n    try {\r\n      const { data: { session }, error } = await this.retryStrategy.execute(() => \r\n        supabase.auth.getSession()\r\n      );\r\n\r\n      if (error) throw error;\r\n\r\n      if (session) {\r\n        logger.info(`Session loaded successfully for user ${session.user?.id}`, 'SessionLoader');\r\n      }\r\n\r\n      this.loadingStrategy.end();\r\n      return session;\r\n    } catch (err) {\r\n      this.loadingStrategy.end(err instanceof Error ? err : new Error(String(err)));\r\n      throw err;\r\n    }\r\n  }\r\n}"
        }
    ]
}