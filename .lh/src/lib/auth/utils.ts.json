{
    "sourceFile": "src/lib/auth/utils.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1739020168333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739020220279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,17 +49,14 @@\n   try {\r\n     const { error } = await supabase.auth.signOut();\r\n     if (error) throw error;\r\n     \r\n-    logger.info('Sign out successful', {\r\n-      source: 'Auth'\r\n-    });\r\n+    logger.info('Sign out successful', 'Auth');\r\n+\r\n   } catch (err) {\r\n-    logger.error('Sign out failed', {\r\n-      context: { error: err },\r\n-      source: 'Auth'\r\n-    });\r\n+    logger.error('Sign out failed', 'Auth', err);\r\n     throw err;\r\n+\r\n   }\r\n };\r\n \r\n export async function getCurrentSession() {\r\n@@ -71,12 +68,9 @@\n     }\r\n \r\n     return session;\r\n   } catch (err) {\r\n-    logger.error('Failed to get current session', {\r\n-      context: { error: err },\r\n-      source: 'auth.utils'\r\n-    });\r\n+    logger.error(`Failed to get current session: ${err instanceof Error ? err.message : String(err)}`, 'auth.utils');\r\n     return null;\r\n   }\r\n }\r\n \r\n"
                },
                {
                    "date": 1739020237337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,12 +76,9 @@\n \r\n export async function updateUserRole(userId: string, newRole: string) {\r\n   try {\r\n     // Log the attempt\r\n-    logger.info('Attempting role update', {\r\n-      context: { userId, newRole },\r\n-      source: 'auth.utils'\r\n-    });\r\n+    logger.info(`Attempting role update for user ${userId} to ${newRole}`, 'auth.utils');\r\n \r\n     const { error } = await supabase.auth.admin.updateUserById(\r\n       userId,\r\n       { user_metadata: { role: newRole } }\r\n"
                },
                {
                    "date": 1739020253787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,20 +29,16 @@\n \r\n       if (updateError) throw new AuthError('Failed to set initial role', updateError.code);\r\n     }\r\n \r\n-    logger.info('Sign in successful', {\r\n-      context: { email, role },\r\n-      source: 'Auth'\r\n-    });\r\n+    logger.info(`Sign in successful for ${email} with role ${role}`, 'Auth');\r\n     \r\n+\r\n     return { session };\r\n   } catch (err) {\r\n-    logger.error('Sign in failed', {\r\n-      context: { error: err },\r\n-      source: 'Auth'\r\n-    });\r\n+    logger.error(`Sign in failed: ${err instanceof Error ? err.message : String(err)}`, 'Auth');\r\n     throw err;\r\n+\r\n   }\r\n };\r\n \r\n export const signOut = async () => {\r\n"
                },
                {
                    "date": 1739024489199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,44 @@\n     this.name = 'AuthError';\r\n   }\r\n }\r\n \r\n+// Add session persistence helper\r\n+const STORAGE_KEY = 'sb-session-persist';\r\n+\r\n+const persistSession = async (session: any) => {\r\n+  try {\r\n+    if (typeof window !== 'undefined') {\r\n+      localStorage.setItem(STORAGE_KEY, JSON.stringify({\r\n+        timestamp: Date.now(),\r\n+        session\r\n+      }));\r\n+    }\r\n+  } catch (err) {\r\n+    logger.error('Failed to persist session', 'Auth');\r\n+  }\r\n+};\r\n+\r\n+const getPersistedSession = () => {\r\n+  try {\r\n+    if (typeof window !== 'undefined') {\r\n+      const stored = localStorage.getItem(STORAGE_KEY);\r\n+      if (stored) {\r\n+        const { timestamp, session } = JSON.parse(stored);\r\n+        // Check if session is less than 1 hour old\r\n+        if (Date.now() - timestamp < 60 * 60 * 1000) {\r\n+          return session;\r\n+        }\r\n+        localStorage.removeItem(STORAGE_KEY);\r\n+      }\r\n+    }\r\n+    return null;\r\n+  } catch (err) {\r\n+    logger.error('Failed to get persisted session', 'Auth');\r\n+    return null;\r\n+  }\r\n+};\r\n+\r\n export const signIn = async (email: string, password: string, role?: string) => {\r\n   try {\r\n     const { data: { session }, error } = await supabase.auth.signInWithPassword({ \r\n       email,\r\n@@ -29,47 +65,67 @@\n \r\n       if (updateError) throw new AuthError('Failed to set initial role', updateError.code);\r\n     }\r\n \r\n+    // Persist session\r\n+    await persistSession(session);\r\n+\r\n     logger.info(`Sign in successful for ${email} with role ${role}`, 'Auth');\r\n-    \r\n+    return { session };\r\n \r\n-    return { session };\r\n   } catch (err) {\r\n     logger.error(`Sign in failed: ${err instanceof Error ? err.message : String(err)}`, 'Auth');\r\n     throw err;\r\n-\r\n   }\r\n };\r\n \r\n export const signOut = async () => {\r\n   try {\r\n     const { error } = await supabase.auth.signOut();\r\n     if (error) throw error;\r\n     \r\n+    // Clear persisted session\r\n+    localStorage.removeItem(STORAGE_KEY);\r\n+    \r\n     logger.info('Sign out successful', 'Auth');\r\n \r\n   } catch (err) {\r\n     logger.error('Sign out failed', 'Auth', err);\r\n     throw err;\r\n-\r\n   }\r\n };\r\n \r\n-export async function getCurrentSession() {\r\n+export const getCurrentSession = async () => {\r\n   try {\r\n+    // First try to get current session\r\n     const { data: { session }, error } = await supabase.auth.getSession();\r\n     \r\n-    if (error) {\r\n-      throw error;\r\n+    if (error) throw new AuthError(error.message, error.code);\r\n+    \r\n+    if (session) {\r\n+      await persistSession(session);\r\n+      return session;\r\n     }\r\n \r\n-    return session;\r\n+    // If no session, try to get persisted session\r\n+    const persistedSession = getPersistedSession();\r\n+    if (persistedSession) {\r\n+      // Validate persisted session\r\n+      const { data: { session: refreshedSession }, error: refreshError } = \r\n+        await supabase.auth.refreshSession();\r\n+\r\n+      if (!refreshError && refreshedSession) {\r\n+        await persistSession(refreshedSession);\r\n+        return refreshedSession;\r\n+      }\r\n+    }\r\n+\r\n+    return null;\r\n   } catch (err) {\r\n-    logger.error(`Failed to get current session: ${err instanceof Error ? err.message : String(err)}`, 'auth.utils');\r\n+    logger.error(`Failed to get current session: ${err instanceof Error ? err.message : String(err)}`, 'Auth');\r\n     return null;\r\n   }\r\n-}\r\n+};\r\n \r\n export async function updateUserRole(userId: string, newRole: string) {\r\n   try {\r\n     // Log the attempt\r\n@@ -101,5 +157,6 @@\n       source: 'auth.utils'\r\n     });\r\n     throw err;\r\n   }\r\n-}\n\\ No newline at end of file\n+}\r\n+export { getPersistedSession };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739024516992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -158,5 +158,5 @@\n     });\r\n     throw err;\r\n   }\r\n }\r\n-export { getPersistedSession };\n\\ No newline at end of file\n+export { getpersistSession };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739024587930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -158,5 +158,5 @@\n     });\r\n     throw err;\r\n   }\r\n }\r\n-export { getpersistSession };\n\\ No newline at end of file\n+export { getPersistedSession,  persistSession };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739279412238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         session\r\n       }));\r\n     }\r\n   } catch (err) {\r\n-    logger.error('Failed to persist session', 'Auth');\r\n+    logger.error('Failed to persist session', { source: 'AuthUtils' });\r\n   }\r\n };\r\n \r\n const getPersistedSession = () => {\r\n@@ -41,9 +41,9 @@\n       }\r\n     }\r\n     return null;\r\n   } catch (err) {\r\n-    logger.error('Failed to get persisted session', 'Auth');\r\n+    logger.error('Failed to get persisted session', { source: 'AuthUtils' });\r\n     return null;\r\n   }\r\n };\r\n \r\n@@ -68,13 +68,13 @@\n \r\n     // Persist session\r\n     await persistSession(session);\r\n \r\n-    logger.info(`Sign in successful for ${email} with role ${role}`, 'Auth');\r\n+    logger.info(`Sign in successful for ${email} with role ${role}`, { source: 'AuthUtils' });\r\n     return { session };\r\n \r\n   } catch (err) {\r\n-    logger.error(`Sign in failed: ${err instanceof Error ? err.message : String(err)}`, 'Auth');\r\n+    logger.error(`Sign in failed: ${err instanceof Error ? err.message : String(err)}`, { source: 'AuthUtils' });\r\n     throw err;\r\n   }\r\n };\r\n \r\n@@ -85,12 +85,12 @@\n     \r\n     // Clear persisted session\r\n     localStorage.removeItem(STORAGE_KEY);\r\n     \r\n-    logger.info('Sign out successful', 'Auth');\r\n+    logger.info('Sign out successful', { source: 'AuthUtils' });\r\n \r\n   } catch (err) {\r\n-    logger.error('Sign out failed', 'Auth', err);\r\n+    logger.error(`Sign out failed: ${err instanceof Error ? err.message : String(err)}`, { source: 'Auth' });\r\n     throw err;\r\n   }\r\n };\r\n \r\n"
                },
                {
                    "date": 1739279441956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,17 +120,17 @@\n     }\r\n \r\n     return null;\r\n   } catch (err) {\r\n-    logger.error(`Failed to get current session: ${err instanceof Error ? err.message : String(err)}`, 'Auth');\r\n+    logger.error(`Failed to get current session: ${err instanceof Error ? err.message : String(err)}`, { source: 'AuthUtils' });\r\n     return null;\r\n   }\r\n };\r\n \r\n export async function updateUserRole(userId: string, newRole: string) {\r\n   try {\r\n     // Log the attempt\r\n-    logger.info(`Attempting role update for user ${userId} to ${newRole}`, 'auth.utils');\r\n+    logger.info(`Attempting role update for user ${userId} to ${newRole}`, { source: 'auth.utils' });\r\n \r\n     const { error } = await supabase.auth.admin.updateUserById(\r\n       userId,\r\n       { user_metadata: { role: newRole } }\r\n"
                },
                {
                    "date": 1740941026911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { supabase } from '../supabase';\r\n-import { sessionMonitor } from './SessionMonitor';\r\n+//import { sessionMonitor } from './SessionMonitor';\r\n import { logger } from '../logger';\r\n import { errorTracker } from '../errorTracker';\r\n import type { UserRole } from '../../types/roles';\r\n \r\n"
                },
                {
                    "date": 1740941033886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { supabase } from '../supabase';\r\n //import { sessionMonitor } from './SessionMonitor';\r\n import { logger } from '../logger';\r\n-import { errorTracker } from '../errorTracker';\r\n+//import { errorTracker } from '../errorTracker';\r\n import type { UserRole } from '../../types/roles';\r\n \r\n export class AuthError extends Error {\r\n   constructor(message: string, public code?: string) {\r\n"
                },
                {
                    "date": 1740941041243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import { supabase } from '../supabase';\r\n //import { sessionMonitor } from './SessionMonitor';\r\n import { logger } from '../logger';\r\n-//import { errorTracker } from '../errorTracker';\r\n-import type { UserRole } from '../../types/roles';\r\n+import { errorTracker } from '../errorTracker';\r\n+//import type { UserRole } from '../../types/roles';\r\n \r\n export class AuthError extends Error {\r\n   constructor(message: string, public code?: string) {\r\n     super(message);\r\n"
                }
            ],
            "date": 1739020168333,
            "name": "Commit-0",
            "content": "import { supabase } from '../supabase';\r\nimport { sessionMonitor } from './SessionMonitor';\r\nimport { logger } from '../logger';\r\nimport { errorTracker } from '../errorTracker';\r\nimport type { UserRole } from '../../types/roles';\r\n\r\nexport class AuthError extends Error {\r\n  constructor(message: string, public code?: string) {\r\n    super(message);\r\n    this.name = 'AuthError';\r\n  }\r\n}\r\n\r\nexport const signIn = async (email: string, password: string, role?: string) => {\r\n  try {\r\n    const { data: { session }, error } = await supabase.auth.signInWithPassword({ \r\n      email,\r\n      password\r\n    }); \r\n\r\n    if (error) throw new AuthError(error.message, error.code);\r\n    if (!session) throw new AuthError('No session created');\r\n\r\n    // Set initial role if provided\r\n    if (role) {\r\n      const { error: updateError } = await supabase.auth.updateUser({\r\n        data: { role }\r\n      });\r\n\r\n      if (updateError) throw new AuthError('Failed to set initial role', updateError.code);\r\n    }\r\n\r\n    logger.info('Sign in successful', {\r\n      context: { email, role },\r\n      source: 'Auth'\r\n    });\r\n    \r\n    return { session };\r\n  } catch (err) {\r\n    logger.error('Sign in failed', {\r\n      context: { error: err },\r\n      source: 'Auth'\r\n    });\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const signOut = async () => {\r\n  try {\r\n    const { error } = await supabase.auth.signOut();\r\n    if (error) throw error;\r\n    \r\n    logger.info('Sign out successful', {\r\n      source: 'Auth'\r\n    });\r\n  } catch (err) {\r\n    logger.error('Sign out failed', {\r\n      context: { error: err },\r\n      source: 'Auth'\r\n    });\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport async function getCurrentSession() {\r\n  try {\r\n    const { data: { session }, error } = await supabase.auth.getSession();\r\n    \r\n    if (error) {\r\n      throw error;\r\n    }\r\n\r\n    return session;\r\n  } catch (err) {\r\n    logger.error('Failed to get current session', {\r\n      context: { error: err },\r\n      source: 'auth.utils'\r\n    });\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function updateUserRole(userId: string, newRole: string) {\r\n  try {\r\n    // Log the attempt\r\n    logger.info('Attempting role update', {\r\n      context: { userId, newRole },\r\n      source: 'auth.utils'\r\n    });\r\n\r\n    const { error } = await supabase.auth.admin.updateUserById(\r\n      userId,\r\n      { user_metadata: { role: newRole } }\r\n    );\r\n\r\n    if (error) throw error;\r\n\r\n    // Force session refresh\r\n    await supabase.auth.refreshSession();\r\n    \r\n    // Verify role update\r\n    const { data: { session } } = await supabase.auth.getSession();\r\n    \r\n    if (session?.user?.role !== newRole) {\r\n      throw new Error('Role update verification failed');\r\n    }\r\n\r\n    return true;\r\n  } catch (err) {\r\n    errorTracker.trackError({\r\n      message: 'Role update failed',\r\n      severity: 'error',\r\n      context: { userId, newRole, error: err },\r\n      source: 'auth.utils'\r\n    });\r\n    throw err;\r\n  }\r\n}"
        }
    ]
}