{
    "sourceFile": "src/lib/supabase.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1739016133380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739016146759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,13 +67,12 @@\n     supabaseOptions\r\n   );\r\n \r\n   if (DEBUG_CONFIG.enabled) {\r\n-    logger.info('Supabase client initialized', {\r\n-      source: 'supabase'\r\n-    });\r\n+    logger.info('Supabase client initialized', 'supabase');\r\n   }\r\n \r\n+\r\n   return client;\r\n }\r\n \r\n function getSupabaseClient(): SupabaseClient<Database> {\r\n@@ -108,14 +107,13 @@\n // Handle cleanup for HMR\r\n if (import.meta.hot) {\r\n   import.meta.hot.dispose(() => {\r\n     if (DEBUG_CONFIG.enabled) {\r\n-      logger.info('Cleaning up Supabase client', {\r\n-        source: 'supabase'\r\n-      });\r\n+      logger.info('Cleaning up Supabase client', 'supabase');\r\n     }\r\n     supabaseInstance = null;\r\n   });\r\n+\r\n }\r\n \r\n const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\r\n const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\r\n"
                },
                {
                    "date": 1739016286270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,5 +121,19 @@\n if (!supabaseUrl || !supabaseAnonKey) {\r\n   throw new Error('Missing Supabase environment variables');\r\n }\r\n \r\n-export const supabaseClient = createClient<Database>(supabaseUrl, supabaseAnonKey);\r\n+const supabaseClient = createClient<Database>(supabaseUrl, supabaseAnonKey, {\r\n+  auth: {\r\n+    autoRefreshToken: true,\r\n+    persistSession: true\r\n+  }\r\n+});\r\n+\r\n+// Add auth state check helper\r\n+export const ensureAuthenticated = async () => {\r\n+  const { data: { session } } = await supabaseClient.auth.getSession();\r\n+  if (!session) {\r\n+    throw new Error('Authentication required');\r\n+  }\r\n+  return session;\r\n+};\r\n"
                },
                {
                    "date": 1739044123580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,12 +121,16 @@\n if (!supabaseUrl || !supabaseAnonKey) {\r\n   throw new Error('Missing Supabase environment variables');\r\n }\r\n \r\n-const supabaseClient = createClient<Database>(supabaseUrl, supabaseAnonKey, {\r\n+// Create a single instance of the Supabase client\r\n+export const supabaseClient = createClient<Database>(supabaseUrl, supabaseAnonKey, {\r\n   auth: {\r\n+    persistSession: true,\r\n+    storageKey: 'sb-auth-token',\r\n+    storage: localStorage,\r\n     autoRefreshToken: true,\r\n-    persistSession: true\r\n+    detectSessionInUrl: true\r\n   }\r\n });\r\n \r\n // Add auth state check helper\r\n"
                },
                {
                    "date": 1739044672716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,143 +1,146 @@\n-import { DEBUG_CONFIG } from './config';\r\n-import type { Database } from './database.types';\r\n-import { logger } from './logger';\r\n-import { createBrowserClient } from '@supabase/ssr';\r\n-import type { SupabaseClient } from '@supabase/supabase-js';\r\n-import type { AuthChangeEvent, Session } from '@supabase/supabase-js';\r\n-import { createClient } from '@supabase/supabase-js';\r\n-\r\n-let supabaseInstance: SupabaseClient<Database> | null = null;\r\n-\r\n-const supabaseOptions = {\r\n-  auth: {\r\n-    autoRefreshToken: true,\r\n-    persistSession: true,\r\n-    storageKey: 'sb-auth-token',\r\n-    storage: typeof window !== 'undefined' ? window.localStorage : undefined,\r\n-    detectSessionInUrl: true,\r\n-    flowType: 'pkce' as const,\r\n-    debug: false,\r\n-    cookieOptions: {\r\n-      maxAge: 7 * 24 * 60 * 60,\r\n-      sameSite: 'lax' as const,\r\n-      secure: true\r\n-    },\r\n-  },\r\n-  global: {\r\n-    headers: { \r\n-      'x-client-info': 'supabase-js',\r\n-      'x-application-name': 'speakwell-admin'\r\n-    }\r\n-  },\r\n-  realtime: {\r\n-    params: {\r\n-      eventsPerSecond: 10\r\n-    }\r\n-  },\r\n-  db: {\r\n-    schema: 'public' as const,\r\n-    debug: false\r\n-  }\r\n-};\r\n-\r\n-function validateEnvironment(): void {\r\n-  const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\r\n-  const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\r\n-\r\n-  if (!supabaseUrl || !supabaseAnonKey) {\r\n-    throw new Error(\r\n-      'Missing Supabase environment variables. Please ensure VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY are set in your .env file.'\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-function createSupabaseClient(): SupabaseClient<Database> {\r\n-  validateEnvironment();\r\n-\r\n-  const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\r\n-  const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\r\n-\r\n-  if (DEBUG_CONFIG.enabled) {\r\n-    logger.info(`Creating Supabase client with URL: ${supabaseUrl}`, 'supabase');\r\n-  }\r\n-\r\n-  const client = createBrowserClient<Database>(\r\n-    supabaseUrl,\r\n-    supabaseAnonKey,\r\n-    supabaseOptions\r\n-  );\r\n-\r\n-  if (DEBUG_CONFIG.enabled) {\r\n-    logger.info('Supabase client initialized', 'supabase');\r\n-  }\r\n-\r\n-\r\n-  return client;\r\n-}\r\n-\r\n-function getSupabaseClient(): SupabaseClient<Database> {\r\n-  if (typeof window === 'undefined') {\r\n-    throw new Error('Supabase client can only be instantiated in browser environment');\r\n-  }\r\n-\r\n-  if (!supabaseInstance) {\r\n-    supabaseInstance = createSupabaseClient();\r\n-  }\r\n-\r\n-  return supabaseInstance;\r\n-}\r\n-\r\n-// Initialize the client immediately but only once\r\n-if (typeof window !== 'undefined' && !supabaseInstance) {\r\n-  supabaseInstance = createSupabaseClient();\r\n-}\r\n-\r\n-// Export both the instance and the getter\r\n-export const supabase = supabaseInstance!;\r\n-export const getSupabase = () => {\r\n-  if (!supabaseInstance) {\r\n-    supabaseInstance = getSupabaseClient();\r\n-  }\r\n-  return supabaseInstance;\r\n-};\r\n-\r\n-// Export the type for use in other files\r\n-export type TypedSupabaseClient = SupabaseClient<Database>;\r\n-\r\n-// Handle cleanup for HMR\r\n-if (import.meta.hot) {\r\n-  import.meta.hot.dispose(() => {\r\n-    if (DEBUG_CONFIG.enabled) {\r\n-      logger.info('Cleaning up Supabase client', 'supabase');\r\n-    }\r\n-    supabaseInstance = null;\r\n-  });\r\n-\r\n-}\r\n-\r\n-const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\r\n-const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\r\n-\r\n-if (!supabaseUrl || !supabaseAnonKey) {\r\n-  throw new Error('Missing Supabase environment variables');\r\n-}\r\n-\r\n-// Create a single instance of the Supabase client\r\n-export const supabaseClient = createClient<Database>(supabaseUrl, supabaseAnonKey, {\r\n-  auth: {\r\n-    persistSession: true,\r\n-    storageKey: 'sb-auth-token',\r\n-    storage: localStorage,\r\n-    autoRefreshToken: true,\r\n-    detectSessionInUrl: true\r\n-  }\r\n-});\r\n-\r\n-// Add auth state check helper\r\n-export const ensureAuthenticated = async () => {\r\n-  const { data: { session } } = await supabaseClient.auth.getSession();\r\n-  if (!session) {\r\n-    throw new Error('Authentication required');\r\n-  }\r\n-  return session;\r\n-};\r\n+import { DEBUG_CONFIG } from './config';\n+import type { Database } from './database.types';\n+import { logger } from './logger';\n+import { createBrowserClient } from '@supabase/ssr';\n+import type { SupabaseClient } from '@supabase/supabase-js';\n+import type { AuthChangeEvent, Session } from '@supabase/supabase-js';\n+import { createClient } from '@supabase/supabase-js';\n+\n+let supabaseInstance: SupabaseClient<Database> | null = null;\n+\n+const supabaseOptions = {\n+  auth: {\n+    autoRefreshToken: true,\n+    persistSession: true,\n+    storageKey: 'sb-auth-token',\n+    storage: typeof window !== 'undefined' ? window.localStorage : undefined,\n+    detectSessionInUrl: true,\n+    flowType: 'pkce' as const,\n+    debug: false,\n+    cookieOptions: {\n+      maxAge: 7 * 24 * 60 * 60,\n+      sameSite: 'lax' as const,\n+      secure: true\n+    },\n+  },\n+  global: {\n+    headers: { \n+      'x-client-info': 'supabase-js',\n+      'x-application-name': 'speakwell-admin'\n+    }\n+  },\n+  realtime: {\n+    params: {\n+      eventsPerSecond: 10\n+    }\n+  },\n+  db: {\n+    schema: 'public' as const,\n+    debug: false\n+  }\n+};\n+\n+function validateEnvironment(): void {\n+  const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\n+  const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\n+\n+  if (!supabaseUrl || !supabaseAnonKey) {\n+    throw new Error(\n+      'Missing Supabase environment variables. Please ensure VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY are set in your .env file.'\n+    );\n+  }\n+}\n+\n+function createSupabaseClient(): SupabaseClient<Database> {\n+  validateEnvironment();\n+\n+  const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\n+  const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\n+\n+  if (DEBUG_CONFIG.enabled) {\n+    logger.info(`Creating Supabase client with URL: ${supabaseUrl}`, 'supabase');\n+  }\n+\n+  const client = createBrowserClient<Database>(\n+    supabaseUrl,\n+    supabaseAnonKey,\n+    supabaseOptions\n+  );\n+\n+  if (DEBUG_CONFIG.enabled) {\n+    logger.info('Supabase client initialized', 'supabase');\n+  }\n+\n+\n+  return client;\n+}\n+\n+function getSupabaseClient(): SupabaseClient<Database> {\n+  if (typeof window === 'undefined') {\n+    throw new Error('Supabase client can only be instantiated in browser environment');\n+  }\n+\n+  if (!supabaseInstance) {\n+    supabaseInstance = createSupabaseClient();\n+  }\n+\n+  return supabaseInstance;\n+}\n+\n+// Initialize the client immediately but only once\n+if (typeof window !== 'undefined' && !supabaseInstance) {\n+  supabaseInstance = createSupabaseClient();\n+}\n+\n+// Export both the instance and the getter\n+export const supabase = supabaseInstance!;\n+export const getSupabase = () => {\n+  if (!supabaseInstance) {\n+    supabaseInstance = getSupabaseClient();\n+  }\n+  return supabaseInstance;\n+};\n+\n+// Export the type for use in other files\n+export type TypedSupabaseClient = SupabaseClient<Database>;\n+\n+// Handle cleanup for HMR\n+if (import.meta.hot) {\n+  import.meta.hot.dispose(() => {\n+    if (DEBUG_CONFIG.enabled) {\n+      logger.info('Cleaning up Supabase client', 'supabase');\n+    }\n+    supabaseInstance = null;\n+  });\n+\n+}\n+\n+const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\n+const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\n+\n+if (!supabaseUrl || !supabaseAnonKey) {\n+  throw new Error('Missing Supabase environment variables');\n+}\n+\n+// Create a single instance of the Supabase client\n+export const supabaseClient = createClient<Database>(supabaseUrl, supabaseAnonKey, {\n+  auth: {\n+    persistSession: true,\n+    storageKey: 'sb-auth-token',\n+    storage: localStorage,\n+    autoRefreshToken: true,\n+    detectSessionInUrl: true\n+  }\n+});\n+\n+// Add auth state check helper\n+export const ensureAuthenticated = async () => {\n+  const { data: { session } } = await supabaseClient.auth.getSession();\n+  if (!session) {\n+    throw new Error('Authentication required');\n+  }\n+  return session;\n+};\n+\n+// Add this export\n+export const getSupabaseAuth = () => supabaseClient.auth;\n"
                },
                {
                    "date": 1740846425841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,146 +1,146 @@\n-import { DEBUG_CONFIG } from './config';\n-import type { Database } from './database.types';\n-import { logger } from './logger';\n-import { createBrowserClient } from '@supabase/ssr';\n-import type { SupabaseClient } from '@supabase/supabase-js';\n-import type { AuthChangeEvent, Session } from '@supabase/supabase-js';\n-import { createClient } from '@supabase/supabase-js';\n-\n-let supabaseInstance: SupabaseClient<Database> | null = null;\n-\n-const supabaseOptions = {\n-  auth: {\n-    autoRefreshToken: true,\n-    persistSession: true,\n-    storageKey: 'sb-auth-token',\n-    storage: typeof window !== 'undefined' ? window.localStorage : undefined,\n-    detectSessionInUrl: true,\n-    flowType: 'pkce' as const,\n-    debug: false,\n-    cookieOptions: {\n-      maxAge: 7 * 24 * 60 * 60,\n-      sameSite: 'lax' as const,\n-      secure: true\n-    },\n-  },\n-  global: {\n-    headers: { \n-      'x-client-info': 'supabase-js',\n-      'x-application-name': 'speakwell-admin'\n-    }\n-  },\n-  realtime: {\n-    params: {\n-      eventsPerSecond: 10\n-    }\n-  },\n-  db: {\n-    schema: 'public' as const,\n-    debug: false\n-  }\n-};\n-\n-function validateEnvironment(): void {\n-  const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\n-  const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\n-\n-  if (!supabaseUrl || !supabaseAnonKey) {\n-    throw new Error(\n-      'Missing Supabase environment variables. Please ensure VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY are set in your .env file.'\n-    );\n-  }\n-}\n-\n-function createSupabaseClient(): SupabaseClient<Database> {\n-  validateEnvironment();\n-\n-  const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\n-  const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\n-\n-  if (DEBUG_CONFIG.enabled) {\n-    logger.info(`Creating Supabase client with URL: ${supabaseUrl}`, 'supabase');\n-  }\n-\n-  const client = createBrowserClient<Database>(\n-    supabaseUrl,\n-    supabaseAnonKey,\n-    supabaseOptions\n-  );\n-\n-  if (DEBUG_CONFIG.enabled) {\n-    logger.info('Supabase client initialized', 'supabase');\n-  }\n-\n-\n-  return client;\n-}\n-\n-function getSupabaseClient(): SupabaseClient<Database> {\n-  if (typeof window === 'undefined') {\n-    throw new Error('Supabase client can only be instantiated in browser environment');\n-  }\n-\n-  if (!supabaseInstance) {\n-    supabaseInstance = createSupabaseClient();\n-  }\n-\n-  return supabaseInstance;\n-}\n-\n-// Initialize the client immediately but only once\n-if (typeof window !== 'undefined' && !supabaseInstance) {\n-  supabaseInstance = createSupabaseClient();\n-}\n-\n-// Export both the instance and the getter\n-export const supabase = supabaseInstance!;\n-export const getSupabase = () => {\n-  if (!supabaseInstance) {\n-    supabaseInstance = getSupabaseClient();\n-  }\n-  return supabaseInstance;\n-};\n-\n-// Export the type for use in other files\n-export type TypedSupabaseClient = SupabaseClient<Database>;\n-\n-// Handle cleanup for HMR\n-if (import.meta.hot) {\n-  import.meta.hot.dispose(() => {\n-    if (DEBUG_CONFIG.enabled) {\n-      logger.info('Cleaning up Supabase client', 'supabase');\n-    }\n-    supabaseInstance = null;\n-  });\n-\n-}\n-\n-const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\n-const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\n-\n-if (!supabaseUrl || !supabaseAnonKey) {\n-  throw new Error('Missing Supabase environment variables');\n-}\n-\n-// Create a single instance of the Supabase client\n-export const supabaseClient = createClient<Database>(supabaseUrl, supabaseAnonKey, {\n-  auth: {\n-    persistSession: true,\n-    storageKey: 'sb-auth-token',\n-    storage: localStorage,\n-    autoRefreshToken: true,\n-    detectSessionInUrl: true\n-  }\n-});\n-\n-// Add auth state check helper\n-export const ensureAuthenticated = async () => {\n-  const { data: { session } } = await supabaseClient.auth.getSession();\n-  if (!session) {\n-    throw new Error('Authentication required');\n-  }\n-  return session;\n-};\n-\n-// Add this export\n-export const getSupabaseAuth = () => supabaseClient.auth;\n+import { DEBUG_CONFIG } from './config';\r\n+import type { Database } from './database.types';\r\n+import { logger } from './logger';\r\n+import { createBrowserClient } from '@supabase/ssr';\r\n+import type { SupabaseClient } from '@supabase/supabase-js';\r\n+import type { AuthChangeEvent, Session } from '@supabase/supabase-js';\r\n+import { createClient } from '@supabase/supabase-js';\r\n+\r\n+let supabaseInstance: SupabaseClient<Database> | null = null;\r\n+\r\n+const supabaseOptions = {\r\n+  auth: {\r\n+    autoRefreshToken: true,\r\n+    persistSession: true,\r\n+    storageKey: 'sb-auth-token',\r\n+    storage: typeof window !== 'undefined' ? window.localStorage : undefined,\r\n+    detectSessionInUrl: true,\r\n+    flowType: 'pkce' as const,\r\n+    debug: false,\r\n+    cookieOptions: {\r\n+      maxAge: 7 * 24 * 60 * 60,\r\n+      sameSite: 'lax' as const,\r\n+      secure: true\r\n+    },\r\n+  },\r\n+  global: {\r\n+    headers: { \r\n+      'x-client-info': 'supabase-js',\r\n+      'x-application-name': 'speakwell-admin'\r\n+    }\r\n+  },\r\n+  realtime: {\r\n+    params: {\r\n+      eventsPerSecond: 10\r\n+    }\r\n+  },\r\n+  db: {\r\n+    schema: 'public' as const,\r\n+    debug: false\r\n+  }\r\n+};\r\n+\r\n+function validateEnvironment(): void {\r\n+  const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\r\n+  const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\r\n+\r\n+  if (!supabaseUrl || !supabaseAnonKey) {\r\n+    throw new Error(\r\n+      'Missing Supabase environment variables. Please ensure VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY are set in your .env file.'\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+function createSupabaseClient(): SupabaseClient<Database> {\r\n+  validateEnvironment();\r\n+\r\n+  const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\r\n+  const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\r\n+\r\n+  if (DEBUG_CONFIG.enabled) {\r\n+    logger.info(`Creating Supabase client with URL: ${supabaseUrl}`, { source: 'supabase' });\r\n+  }\r\n+\r\n+  const client = createBrowserClient<Database>(\r\n+    supabaseUrl,\r\n+    supabaseAnonKey,\r\n+    supabaseOptions\r\n+  );\r\n+\r\n+  if (DEBUG_CONFIG.enabled) {\r\n+    logger.info('Supabase client initialized', { source: 'supabase' });\r\n+  }\r\n+\r\n+\r\n+  return client;\r\n+}\r\n+\r\n+function getSupabaseClient(): SupabaseClient<Database> {\r\n+  if (typeof window === 'undefined') {\r\n+    throw new Error('Supabase client can only be instantiated in browser environment');\r\n+  }\r\n+\r\n+  if (!supabaseInstance) {\r\n+    supabaseInstance = createSupabaseClient();\r\n+  }\r\n+\r\n+  return supabaseInstance;\r\n+}\r\n+\r\n+// Initialize the client immediately but only once\r\n+if (typeof window !== 'undefined' && !supabaseInstance) {\r\n+  supabaseInstance = createSupabaseClient();\r\n+}\r\n+\r\n+// Export both the instance and the getter\r\n+export const supabase = supabaseInstance!;\r\n+export const getSupabase = () => {\r\n+  if (!supabaseInstance) {\r\n+    supabaseInstance = getSupabaseClient();\r\n+  }\r\n+  return supabaseInstance;\r\n+};\r\n+\r\n+// Export the type for use in other files\r\n+export type TypedSupabaseClient = SupabaseClient<Database>;\r\n+\r\n+// Handle cleanup for HMR\r\n+if (import.meta.hot) {\r\n+  import.meta.hot.dispose(() => {\r\n+    if (DEBUG_CONFIG.enabled) {\r\n+      logger.info('Cleaning up Supabase client', { source: 'supabase' });\r\n+    }\r\n+    supabaseInstance = null;\r\n+  });\r\n+\r\n+}\r\n+\r\n+const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\r\n+const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\r\n+\r\n+if (!supabaseUrl || !supabaseAnonKey) {\r\n+  throw new Error('Missing Supabase environment variables');\r\n+}\r\n+\r\n+// Create a single instance of the Supabase client\r\n+export const supabaseClient = createClient<Database>(supabaseUrl, supabaseAnonKey, {\r\n+  auth: {\r\n+    persistSession: true,\r\n+    storageKey: 'sb-auth-token',\r\n+    storage: localStorage,\r\n+    autoRefreshToken: true,\r\n+    detectSessionInUrl: true\r\n+  }\r\n+});\r\n+\r\n+// Add auth state check helper\r\n+export const ensureAuthenticated = async () => {\r\n+  const { data: { session } } = await supabaseClient.auth.getSession();\r\n+  if (!session) {\r\n+    throw new Error('Authentication required');\r\n+  }\r\n+  return session;\r\n+};\r\n+\r\n+// Add this export\r\n+export const getSupabaseAuth = () => supabaseClient.auth;\r\n"
                },
                {
                    "date": 1740846454610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n   supabaseInstance = createSupabaseClient();\r\n }\r\n \r\n // Export both the instance and the getter\r\n-export const supabase = supabaseInstance!;\r\n+export const supabaseInstance = supabaseInstance!;\r\n export const getSupabase = () => {\r\n   if (!supabaseInstance) {\r\n     supabaseInstance = getSupabaseClient();\r\n   }\r\n"
                },
                {
                    "date": 1740846486978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n   supabaseInstance = createSupabaseClient();\r\n }\r\n \r\n // Export both the instance and the getter\r\n-export const supabaseInstance = supabaseInstance!;\r\n+export const supabaseDefaultClient = supabaseInstance!;\r\n export const getSupabase = () => {\r\n   if (!supabaseInstance) {\r\n     supabaseInstance = getSupabaseClient();\r\n   }\r\n"
                },
                {
                    "date": 1740846509413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,10 +5,18 @@\n import type { SupabaseClient } from '@supabase/supabase-js';\r\n import type { AuthChangeEvent, Session } from '@supabase/supabase-js';\r\n import { createClient } from '@supabase/supabase-js';\r\n \r\n-let supabaseInstance: SupabaseClient<Database> | null = null;\r\n+// Validate environment variables\r\n+const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\r\n+const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\r\n \r\n+if (!supabaseUrl || !supabaseAnonKey) {\r\n+  throw new Error(\r\n+    'Missing Supabase environment variables. Please ensure VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY are set in your .env file.'\r\n+  );\r\n+}\r\n+\r\n const supabaseOptions = {\r\n   auth: {\r\n     autoRefreshToken: true,\r\n     persistSession: true,\r\n@@ -39,25 +47,12 @@\n     debug: false\r\n   }\r\n };\r\n \r\n-function validateEnvironment(): void {\r\n-  const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\r\n-  const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\r\n+// Create a single instance of the Supabase client for browser environments\r\n+let supabaseInstance: SupabaseClient<Database> | null = null;\r\n \r\n-  if (!supabaseUrl || !supabaseAnonKey) {\r\n-    throw new Error(\r\n-      'Missing Supabase environment variables. Please ensure VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY are set in your .env file.'\r\n-    );\r\n-  }\r\n-}\r\n-\r\n function createSupabaseClient(): SupabaseClient<Database> {\r\n-  validateEnvironment();\r\n-\r\n-  const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\r\n-  const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\r\n-\r\n   if (DEBUG_CONFIG.enabled) {\r\n     logger.info(`Creating Supabase client with URL: ${supabaseUrl}`, { source: 'supabase' });\r\n   }\r\n \r\n@@ -70,9 +65,8 @@\n   if (DEBUG_CONFIG.enabled) {\r\n     logger.info('Supabase client initialized', { source: 'supabase' });\r\n   }\r\n \r\n-\r\n   return client;\r\n }\r\n \r\n function getSupabaseClient(): SupabaseClient<Database> {\r\n@@ -91,39 +85,20 @@\n if (typeof window !== 'undefined' && !supabaseInstance) {\r\n   supabaseInstance = createSupabaseClient();\r\n }\r\n \r\n-// Export both the instance and the getter\r\n-export const supabaseDefaultClient = supabaseInstance!;\r\n-export const getSupabase = () => {\r\n+// Export the instance for direct use\r\n+export const supabase = supabaseInstance || getSupabaseClient();\r\n+\r\n+// Export a getter for dynamic access\r\n+export const getSupabase = (): SupabaseClient<Database> => {\r\n   if (!supabaseInstance) {\r\n     supabaseInstance = getSupabaseClient();\r\n   }\r\n   return supabaseInstance;\r\n };\r\n \r\n-// Export the type for use in other files\r\n-export type TypedSupabaseClient = SupabaseClient<Database>;\r\n-\r\n-// Handle cleanup for HMR\r\n-if (import.meta.hot) {\r\n-  import.meta.hot.dispose(() => {\r\n-    if (DEBUG_CONFIG.enabled) {\r\n-      logger.info('Cleaning up Supabase client', { source: 'supabase' });\r\n-    }\r\n-    supabaseInstance = null;\r\n-  });\r\n-\r\n-}\r\n-\r\n-const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\r\n-const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\r\n-\r\n-if (!supabaseUrl || !supabaseAnonKey) {\r\n-  throw new Error('Missing Supabase environment variables');\r\n-}\r\n-\r\n-// Create a single instance of the Supabase client\r\n+// For compatibility with code that uses supabaseClient\r\n export const supabaseClient = createClient<Database>(supabaseUrl, supabaseAnonKey, {\r\n   auth: {\r\n     persistSession: true,\r\n     storageKey: 'sb-auth-token',\r\n@@ -132,8 +107,11 @@\n     detectSessionInUrl: true\r\n   }\r\n });\r\n \r\n+// Export the type for use in other files\r\n+export type TypedSupabaseClient = SupabaseClient<Database>;\r\n+\r\n // Add auth state check helper\r\n export const ensureAuthenticated = async () => {\r\n   const { data: { session } } = await supabaseClient.auth.getSession();\r\n   if (!session) {\r\n@@ -143,4 +121,14 @@\n };\r\n \r\n // Add this export\r\n export const getSupabaseAuth = () => supabaseClient.auth;\r\n+\r\n+// Handle cleanup for HMR\r\n+if (import.meta.hot) {\r\n+  import.meta.hot.dispose(() => {\r\n+    if (DEBUG_CONFIG.enabled) {\r\n+      logger.info('Cleaning up Supabase client', { source: 'supabase' });\r\n+    }\r\n+    supabaseInstance = null;\r\n+  });\r\n+}\r\n"
                },
                {
                    "date": 1740846540923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,10 +85,11 @@\n if (typeof window !== 'undefined' && !supabaseInstance) {\r\n   supabaseInstance = createSupabaseClient();\r\n }\r\n \r\n-// Export the instance for direct use\r\n-export const supabase = supabaseInstance || getSupabaseClient();\r\n+// Create and export the supabase client \r\n+const _supabaseClient = supabaseInstance || getSupabaseClient();\r\n+export { _supabaseClient as supabase };\r\n \r\n // Export a getter for dynamic access\r\n export const getSupabase = (): SupabaseClient<Database> => {\r\n   if (!supabaseInstance) {\r\n"
                },
                {
                    "date": 1740846793367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,18 +5,10 @@\n import type { SupabaseClient } from '@supabase/supabase-js';\r\n import type { AuthChangeEvent, Session } from '@supabase/supabase-js';\r\n import { createClient } from '@supabase/supabase-js';\r\n \r\n-// Validate environment variables\r\n-const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\r\n-const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\r\n+let supabaseInstance: SupabaseClient<Database> | null = null;\r\n \r\n-if (!supabaseUrl || !supabaseAnonKey) {\r\n-  throw new Error(\r\n-    'Missing Supabase environment variables. Please ensure VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY are set in your .env file.'\r\n-  );\r\n-}\r\n-\r\n const supabaseOptions = {\r\n   auth: {\r\n     autoRefreshToken: true,\r\n     persistSession: true,\r\n@@ -47,14 +39,27 @@\n     debug: false\r\n   }\r\n };\r\n \r\n-// Create a single instance of the Supabase client for browser environments\r\n-let supabaseInstance: SupabaseClient<Database> | null = null;\r\n+function validateEnvironment(): void {\r\n+  const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\r\n+  const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\r\n \r\n+  if (!supabaseUrl || !supabaseAnonKey) {\r\n+    throw new Error(\r\n+      'Missing Supabase environment variables. Please ensure VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY are set in your .env file.'\r\n+    );\r\n+  }\r\n+}\r\n+\r\n function createSupabaseClient(): SupabaseClient<Database> {\r\n+  validateEnvironment();\r\n+\r\n+  const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\r\n+  const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\r\n+\r\n   if (DEBUG_CONFIG.enabled) {\r\n-    logger.info(`Creating Supabase client with URL: ${supabaseUrl}`, { source: 'supabase' });\r\n+    logger.info(`Creating Supabase client with URL: ${supabaseUrl}`, 'supabase');\r\n   }\r\n \r\n   const client = createBrowserClient<Database>(\r\n     supabaseUrl,\r\n@@ -62,11 +67,12 @@\n     supabaseOptions\r\n   );\r\n \r\n   if (DEBUG_CONFIG.enabled) {\r\n-    logger.info('Supabase client initialized', { source: 'supabase' });\r\n+    logger.info('Supabase client initialized', 'supabase');\r\n   }\r\n \r\n+\r\n   return client;\r\n }\r\n \r\n function getSupabaseClient(): SupabaseClient<Database> {\r\n@@ -85,21 +91,39 @@\n if (typeof window !== 'undefined' && !supabaseInstance) {\r\n   supabaseInstance = createSupabaseClient();\r\n }\r\n \r\n-// Create and export the supabase client \r\n-const _supabaseClient = supabaseInstance || getSupabaseClient();\r\n-export { _supabaseClient as supabase };\r\n-\r\n-// Export a getter for dynamic access\r\n-export const getSupabase = (): SupabaseClient<Database> => {\r\n+// Export both the instance and the getter\r\n+export const supabase = supabaseInstance!;\r\n+export const getSupabase = () => {\r\n   if (!supabaseInstance) {\r\n     supabaseInstance = getSupabaseClient();\r\n   }\r\n   return supabaseInstance;\r\n };\r\n \r\n-// For compatibility with code that uses supabaseClient\r\n+// Export the type for use in other files\r\n+export type TypedSupabaseClient = SupabaseClient<Database>;\r\n+\r\n+// Handle cleanup for HMR\r\n+if (import.meta.hot) {\r\n+  import.meta.hot.dispose(() => {\r\n+    if (DEBUG_CONFIG.enabled) {\r\n+      logger.info('Cleaning up Supabase client', 'supabase');\r\n+    }\r\n+    supabaseInstance = null;\r\n+  });\r\n+\r\n+}\r\n+\r\n+const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\r\n+const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\r\n+\r\n+if (!supabaseUrl || !supabaseAnonKey) {\r\n+  throw new Error('Missing Supabase environment variables');\r\n+}\r\n+\r\n+// Create a single instance of the Supabase client\r\n export const supabaseClient = createClient<Database>(supabaseUrl, supabaseAnonKey, {\r\n   auth: {\r\n     persistSession: true,\r\n     storageKey: 'sb-auth-token',\r\n@@ -108,11 +132,8 @@\n     detectSessionInUrl: true\r\n   }\r\n });\r\n \r\n-// Export the type for use in other files\r\n-export type TypedSupabaseClient = SupabaseClient<Database>;\r\n-\r\n // Add auth state check helper\r\n export const ensureAuthenticated = async () => {\r\n   const { data: { session } } = await supabaseClient.auth.getSession();\r\n   if (!session) {\r\n@@ -122,14 +143,4 @@\n };\r\n \r\n // Add this export\r\n export const getSupabaseAuth = () => supabaseClient.auth;\r\n-\r\n-// Handle cleanup for HMR\r\n-if (import.meta.hot) {\r\n-  import.meta.hot.dispose(() => {\r\n-    if (DEBUG_CONFIG.enabled) {\r\n-      logger.info('Cleaning up Supabase client', { source: 'supabase' });\r\n-    }\r\n-    supabaseInstance = null;\r\n-  });\r\n-}\r\n"
                },
                {
                    "date": 1740851958101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n   const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\r\n   const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\r\n \r\n   if (DEBUG_CONFIG.enabled) {\r\n-    logger.info(`Creating Supabase client with URL: ${supabaseUrl}`, 'supabase');\r\n+    logger.info(`Creating Supabase client with URL: ${supabaseUrl}`, { service: \"supabase\" });\r\n   }\r\n \r\n   const client = createBrowserClient<Database>(\r\n     supabaseUrl,\r\n@@ -67,9 +67,9 @@\n     supabaseOptions\r\n   );\r\n \r\n   if (DEBUG_CONFIG.enabled) {\r\n-    logger.info('Supabase client initialized', 'supabase');\r\n+    logger.info('Supabase client initialized', { service: \"supabase\" });\r\n   }\r\n \r\n \r\n   return client;\r\n@@ -92,9 +92,9 @@\n   supabaseInstance = createSupabaseClient();\r\n }\r\n \r\n // Export both the instance and the getter\r\n-export const supabase = supabaseInstance!;\r\n+export const supabaseClient = supabaseInstance!;\r\n export const getSupabase = () => {\r\n   if (!supabaseInstance) {\r\n     supabaseInstance = getSupabaseClient();\r\n   }\r\n"
                },
                {
                    "date": 1740852291624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n   supabaseInstance = createSupabaseClient();\r\n }\r\n \r\n // Export both the instance and the getter\r\n-export const supabaseClient = supabaseInstance!;\r\n+export const supabase = supabaseInstance!;\r\n export const getSupabase = () => {\r\n   if (!supabaseInstance) {\r\n     supabaseInstance = getSupabaseClient();\r\n   }\r\n@@ -107,9 +107,9 @@\n // Handle cleanup for HMR\r\n if (import.meta.hot) {\r\n   import.meta.hot.dispose(() => {\r\n     if (DEBUG_CONFIG.enabled) {\r\n-      logger.info('Cleaning up Supabase client', 'supabase');\r\n+      logger.info('Cleaning up Supabase client', { service: \"supabase\" });\r\n     }\r\n     supabaseInstance = null;\r\n   });\r\n \r\n"
                },
                {
                    "date": 1740852338689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n   const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\r\n   const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\r\n \r\n   if (DEBUG_CONFIG.enabled) {\r\n-    logger.info(`Creating Supabase client with URL: ${supabaseUrl}`, { service: \"supabase\" });\r\n+    logger.info(`Creating Supabase client with URL: ${supabaseUrl}`, { source: \"supabase\" });\r\n   }\r\n \r\n   const client = createBrowserClient<Database>(\r\n     supabaseUrl,\r\n@@ -67,9 +67,9 @@\n     supabaseOptions\r\n   );\r\n \r\n   if (DEBUG_CONFIG.enabled) {\r\n-    logger.info('Supabase client initialized', { service: \"supabase\" });\r\n+    logger.info('Supabase client initialized', { source: \"supabase\" });\r\n   }\r\n \r\n \r\n   return client;\r\n@@ -107,9 +107,9 @@\n // Handle cleanup for HMR\r\n if (import.meta.hot) {\r\n   import.meta.hot.dispose(() => {\r\n     if (DEBUG_CONFIG.enabled) {\r\n-      logger.info('Cleaning up Supabase client', { service: \"supabase\" });\r\n+      logger.info('Cleaning up Supabase client', { source: \"supabase\" });\r\n     }\r\n     supabaseInstance = null;\r\n   });\r\n \r\n"
                },
                {
                    "date": 1740852350068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import type { Database } from './database.types';\r\n import { logger } from './logger';\r\n import { createBrowserClient } from '@supabase/ssr';\r\n import type { SupabaseClient } from '@supabase/supabase-js';\r\n-import type { AuthChangeEvent, Session } from '@supabase/supabase-js';\r\n+//import type { AuthChangeEvent, Session } from '@supabase/supabase-js';\r\n import { createClient } from '@supabase/supabase-js';\r\n \r\n let supabaseInstance: SupabaseClient<Database> | null = null;\r\n \r\n"
                }
            ],
            "date": 1739016133380,
            "name": "Commit-0",
            "content": "import { DEBUG_CONFIG } from './config';\r\nimport type { Database } from './database.types';\r\nimport { logger } from './logger';\r\nimport { createBrowserClient } from '@supabase/ssr';\r\nimport type { SupabaseClient } from '@supabase/supabase-js';\r\nimport type { AuthChangeEvent, Session } from '@supabase/supabase-js';\r\nimport { createClient } from '@supabase/supabase-js';\r\n\r\nlet supabaseInstance: SupabaseClient<Database> | null = null;\r\n\r\nconst supabaseOptions = {\r\n  auth: {\r\n    autoRefreshToken: true,\r\n    persistSession: true,\r\n    storageKey: 'sb-auth-token',\r\n    storage: typeof window !== 'undefined' ? window.localStorage : undefined,\r\n    detectSessionInUrl: true,\r\n    flowType: 'pkce' as const,\r\n    debug: false,\r\n    cookieOptions: {\r\n      maxAge: 7 * 24 * 60 * 60,\r\n      sameSite: 'lax' as const,\r\n      secure: true\r\n    },\r\n  },\r\n  global: {\r\n    headers: { \r\n      'x-client-info': 'supabase-js',\r\n      'x-application-name': 'speakwell-admin'\r\n    }\r\n  },\r\n  realtime: {\r\n    params: {\r\n      eventsPerSecond: 10\r\n    }\r\n  },\r\n  db: {\r\n    schema: 'public' as const,\r\n    debug: false\r\n  }\r\n};\r\n\r\nfunction validateEnvironment(): void {\r\n  const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\r\n  const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\r\n\r\n  if (!supabaseUrl || !supabaseAnonKey) {\r\n    throw new Error(\r\n      'Missing Supabase environment variables. Please ensure VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY are set in your .env file.'\r\n    );\r\n  }\r\n}\r\n\r\nfunction createSupabaseClient(): SupabaseClient<Database> {\r\n  validateEnvironment();\r\n\r\n  const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\r\n  const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\r\n\r\n  if (DEBUG_CONFIG.enabled) {\r\n    logger.info(`Creating Supabase client with URL: ${supabaseUrl}`, 'supabase');\r\n  }\r\n\r\n  const client = createBrowserClient<Database>(\r\n    supabaseUrl,\r\n    supabaseAnonKey,\r\n    supabaseOptions\r\n  );\r\n\r\n  if (DEBUG_CONFIG.enabled) {\r\n    logger.info('Supabase client initialized', {\r\n      source: 'supabase'\r\n    });\r\n  }\r\n\r\n  return client;\r\n}\r\n\r\nfunction getSupabaseClient(): SupabaseClient<Database> {\r\n  if (typeof window === 'undefined') {\r\n    throw new Error('Supabase client can only be instantiated in browser environment');\r\n  }\r\n\r\n  if (!supabaseInstance) {\r\n    supabaseInstance = createSupabaseClient();\r\n  }\r\n\r\n  return supabaseInstance;\r\n}\r\n\r\n// Initialize the client immediately but only once\r\nif (typeof window !== 'undefined' && !supabaseInstance) {\r\n  supabaseInstance = createSupabaseClient();\r\n}\r\n\r\n// Export both the instance and the getter\r\nexport const supabase = supabaseInstance!;\r\nexport const getSupabase = () => {\r\n  if (!supabaseInstance) {\r\n    supabaseInstance = getSupabaseClient();\r\n  }\r\n  return supabaseInstance;\r\n};\r\n\r\n// Export the type for use in other files\r\nexport type TypedSupabaseClient = SupabaseClient<Database>;\r\n\r\n// Handle cleanup for HMR\r\nif (import.meta.hot) {\r\n  import.meta.hot.dispose(() => {\r\n    if (DEBUG_CONFIG.enabled) {\r\n      logger.info('Cleaning up Supabase client', {\r\n        source: 'supabase'\r\n      });\r\n    }\r\n    supabaseInstance = null;\r\n  });\r\n}\r\n\r\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\r\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\r\n\r\nif (!supabaseUrl || !supabaseAnonKey) {\r\n  throw new Error('Missing Supabase environment variables');\r\n}\r\n\r\nexport const supabaseClient = createClient<Database>(supabaseUrl, supabaseAnonKey);\r\n"
        }
    ]
}