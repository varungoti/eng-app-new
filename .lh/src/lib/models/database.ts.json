{
    "sourceFile": "src/lib/models/database.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1741205843689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1741205843689,
            "name": "Commit-0",
            "content": "import { supabase } from '../supabase';\r\nimport type { Database } from '../database.types';\r\n\r\n// Type definitions matching Supabase schema\r\nexport type Grade = Database['public']['Tables']['grades']['Row'];\r\nexport type GradeInsert = Database['public']['Tables']['grades']['Insert'];\r\nexport type GradeUpdate = Database['public']['Tables']['grades']['Update'];\r\n\r\nexport type Topic = Database['public']['Tables']['topics']['Row'];\r\nexport type TopicInsert = Database['public']['Tables']['topics']['Insert'];\r\nexport type TopicUpdate = Database['public']['Tables']['topics']['Update'];\r\n\r\nexport type Subtopic = {\r\n  id: string;\r\n  title: string;\r\n  description: string | null;\r\n  topic_id: string;\r\n  order_index: number | null;\r\n  created_at: string;\r\n  updated_at: string;\r\n  lessons?: Lesson[];\r\n};\r\n\r\nexport type SubtopicInsert = Omit<Subtopic, 'id' | 'created_at' | 'updated_at' | 'lessons'>;\r\nexport type SubtopicUpdate = Partial<SubtopicInsert>;\r\n\r\nexport type Lesson = Database['public']['Tables']['lessons']['Row'];\r\nexport type LessonInsert = Database['public']['Tables']['lessons']['Insert'];\r\nexport type LessonUpdate = Database['public']['Tables']['lessons']['Update'];\r\n\r\nexport type Question = Database['public']['Tables']['questions']['Row'];\r\nexport type QuestionInsert = Database['public']['Tables']['questions']['Insert'];\r\nexport type QuestionUpdate = Database['public']['Tables']['questions']['Update'];\r\n\r\nexport type ExercisePrompt = Database['public']['Tables']['exercise_prompts']['Row'];\r\nexport type ExercisePromptInsert = Database['public']['Tables']['exercise_prompts']['Insert'];\r\nexport type ExercisePromptUpdate = Database['public']['Tables']['exercise_prompts']['Update'];\r\n\r\n// Repository functions to interact with the database\r\nexport const GradeRepository = {\r\n  async findAll() {\r\n    const { data, error } = await supabase\r\n      .from('grades')\r\n      .select('*')\r\n      .order('level');\r\n      \r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n  \r\n  async findById(id: string) {\r\n    const { data, error } = await supabase\r\n      .from('grades')\r\n      .select('*')\r\n      .eq('id', id)\r\n      .single();\r\n      \r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n  \r\n  async create(grade: GradeInsert) {\r\n    const { data, error } = await supabase\r\n      .from('grades')\r\n      .insert(grade)\r\n      .select()\r\n      .single();\r\n      \r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n  \r\n  async update(id: string, grade: GradeUpdate) {\r\n    const { data, error } = await supabase\r\n      .from('grades')\r\n      .update(grade)\r\n      .eq('id', id)\r\n      .select()\r\n      .single();\r\n      \r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n  \r\n  async delete(id: string) {\r\n    const { error } = await supabase\r\n      .from('grades')\r\n      .delete()\r\n      .eq('id', id);\r\n      \r\n    if (error) throw error;\r\n    return true;\r\n  }\r\n};\r\n\r\nexport const TopicRepository = {\r\n  async findAll() {\r\n    const { data, error } = await supabase\r\n      .from('topics')\r\n      .select('*')\r\n      .order('order_index');\r\n      \r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n  \r\n  async findByGradeId(gradeId: string) {\r\n    const { data, error } = await supabase\r\n      .from('topics')\r\n      .select('*')\r\n      .eq('grade_id', gradeId)\r\n      .order('order_index');\r\n      \r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n  \r\n  async findById(id: string) {\r\n    const { data, error } = await supabase\r\n      .from('topics')\r\n      .select('*')\r\n      .eq('id', id)\r\n      .single();\r\n      \r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n  \r\n  async create(topic: TopicInsert) {\r\n    const { data, error } = await supabase\r\n      .from('topics')\r\n      .insert(topic)\r\n      .select()\r\n      .single();\r\n      \r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n  \r\n  async update(id: string, topic: TopicUpdate) {\r\n    const { data, error } = await supabase\r\n      .from('topics')\r\n      .update(topic)\r\n      .eq('id', id)\r\n      .select()\r\n      .single();\r\n      \r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n  \r\n  async delete(id: string) {\r\n    const { error } = await supabase\r\n      .from('topics')\r\n      .delete()\r\n      .eq('id', id);\r\n      \r\n    if (error) throw error;\r\n    return true;\r\n  }\r\n};\r\n\r\nexport const SubtopicRepository = {\r\n  async findAll() {\r\n    const { data, error } = await supabase\r\n      .from('subtopics')\r\n      .select('*')\r\n      .order('order_index');\r\n      \r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n  \r\n  async findByTopicId(topicId: string) {\r\n    const { data, error } = await supabase\r\n      .from('subtopics')\r\n      .select('*')\r\n      .eq('topic_id', topicId)\r\n      .order('order_index');\r\n      \r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n  \r\n  async findById(id: string) {\r\n    const { data, error } = await supabase\r\n      .from('subtopics')\r\n      .select('*')\r\n      .eq('id', id)\r\n      .single();\r\n      \r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n  \r\n  async create(subtopic: SubtopicInsert) {\r\n    const { data, error } = await supabase\r\n      .from('subtopics')\r\n      .insert(subtopic)\r\n      .select()\r\n      .single();\r\n      \r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n  \r\n  async update(id: string, subtopic: SubtopicUpdate) {\r\n    const { data, error } = await supabase\r\n      .from('subtopics')\r\n      .update(subtopic)\r\n      .eq('id', id)\r\n      .select()\r\n      .single();\r\n      \r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n  \r\n  async delete(id: string) {\r\n    const { error } = await supabase\r\n      .from('subtopics')\r\n      .delete()\r\n      .eq('id', id);\r\n      \r\n    if (error) throw error;\r\n    return true;\r\n  }\r\n};\r\n\r\nexport const LessonRepository = {\r\n  async findAll() {\r\n    const { data, error } = await supabase\r\n      .from('lessons')\r\n      .select('*')\r\n      .order('order_index');\r\n      \r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n  \r\n  async findBySubtopicId(subtopicId: string) {\r\n    const { data, error } = await supabase\r\n      .from('lessons')\r\n      .select('*')\r\n      .eq('subtopic_id', subtopicId)\r\n      .order('order_index');\r\n      \r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n  \r\n  async findById(id: string) {\r\n    const { data, error } = await supabase\r\n      .from('lessons')\r\n      .select('*, questions(*)')\r\n      .eq('id', id)\r\n      .single();\r\n      \r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n  \r\n  async create(lesson: LessonInsert) {\r\n    const { data, error } = await supabase\r\n      .from('lessons')\r\n      .insert(lesson)\r\n      .select()\r\n      .single();\r\n      \r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n  \r\n  async update(id: string, lesson: LessonUpdate) {\r\n    const { data, error } = await supabase\r\n      .from('lessons')\r\n      .update(lesson)\r\n      .eq('id', id)\r\n      .select()\r\n      .single();\r\n      \r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n  \r\n  async delete(id: string) {\r\n    const { error } = await supabase\r\n      .from('lessons')\r\n      .delete()\r\n      .eq('id', id);\r\n      \r\n    if (error) throw error;\r\n    return true;\r\n  }\r\n};\r\n\r\nexport const QuestionRepository = {\r\n  async findByLessonId(lessonId: string) {\r\n    const { data, error } = await supabase\r\n      .from('questions')\r\n      .select('*, exercise_prompts(*)')\r\n      .eq('lesson_id', lessonId)\r\n      .order('order_index');\r\n      \r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n  \r\n  async findById(id: string) {\r\n    const { data, error } = await supabase\r\n      .from('questions')\r\n      .select('*, exercise_prompts(*)')\r\n      .eq('id', id)\r\n      .single();\r\n      \r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n  \r\n  async create(question: QuestionInsert) {\r\n    const { data, error } = await supabase\r\n      .from('questions')\r\n      .insert(question)\r\n      .select()\r\n      .single();\r\n      \r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n  \r\n  async update(id: string, question: QuestionUpdate) {\r\n    const { data, error } = await supabase\r\n      .from('questions')\r\n      .update(question)\r\n      .eq('id', id)\r\n      .select()\r\n      .single();\r\n      \r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n  \r\n  async delete(id: string) {\r\n    const { error } = await supabase\r\n      .from('questions')\r\n      .delete()\r\n      .eq('id', id);\r\n      \r\n    if (error) throw error;\r\n    return true;\r\n  }\r\n};\r\n\r\nexport const ExercisePromptRepository = {\r\n  async findByQuestionId(questionId: string) {\r\n    const { data, error } = await supabase\r\n      .from('exercise_prompts')\r\n      .select('*')\r\n      .eq('question_id', questionId)\r\n      .order('order_index');\r\n      \r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n  \r\n  async findById(id: string) {\r\n    const { data, error } = await supabase\r\n      .from('exercise_prompts')\r\n      .select('*')\r\n      .eq('id', id)\r\n      .single();\r\n      \r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n  \r\n  async create(prompt: ExercisePromptInsert) {\r\n    const { data, error } = await supabase\r\n      .from('exercise_prompts')\r\n      .insert(prompt)\r\n      .select()\r\n      .single();\r\n      \r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n  \r\n  async update(id: string, prompt: ExercisePromptUpdate) {\r\n    const { data, error } = await supabase\r\n      .from('exercise_prompts')\r\n      .update(prompt)\r\n      .eq('id', id)\r\n      .select()\r\n      .single();\r\n      \r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n  \r\n  async delete(id: string) {\r\n    const { error } = await supabase\r\n      .from('exercise_prompts')\r\n      .delete()\r\n      .eq('id', id);\r\n      \r\n    if (error) throw error;\r\n    return true;\r\n  }\r\n};\r\n\r\n// Export all repositories in a single object for easier imports\r\nexport const models = {\r\n  Grade: GradeRepository,\r\n  Topic: TopicRepository,\r\n  Subtopic: SubtopicRepository,\r\n  Lesson: LessonRepository,\r\n  Question: QuestionRepository,\r\n  ExercisePrompt: ExercisePromptRepository\r\n}; "
        }
    ]
}