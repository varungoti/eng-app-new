{
    "sourceFile": "src/lib/connectionManager.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1738876137975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739013696340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,14 +45,12 @@\n       } else {\r\n         throw new Error('Failed to establish initial connection');\r\n       }\r\n     } catch (err) {\r\n-      logger.error('Failed to initialize connection manager', {\r\n-        context: { error: err },\r\n-        source: 'ConnectionManager'\r\n-      });\r\n+      logger.error('Failed to initialize connection manager', 'ConnectionManager', err);\r\n       throw err;\r\n     }\r\n+\r\n   }\r\n \r\n   public startMonitoring() {\r\n     this.setupConnectionMonitoring();\r\n@@ -90,43 +88,40 @@\n         this.updateState({ \r\n           lastConnected: new Date(),\r\n           reconnectAttempts: 0\r\n         });\r\n-        logger.info('Connection check successful', {\r\n-          source: 'ConnectionManager'\r\n-        });\r\n+        logger.info('Connection check successful', 'ConnectionManager');\r\n+\r\n       }\r\n \r\n       return isConnected;\r\n     } catch (err) {\r\n       this.updateState({ isConnected: false });\r\n-      logger.error('Connection check failed', {\r\n-        context: { error: err },\r\n-        source: 'ConnectionManager'\r\n-      });\r\n+      logger.error('Connection check failed', 'ConnectionManager', err);\r\n       return false;\r\n+\r\n     }\r\n   }\r\n \r\n   private async handleOnline() {\r\n-    logger.info('Device came online', { source: 'ConnectionManager' });\r\n+    logger.info('Device came online', 'ConnectionManager');\r\n     await this.attemptReconnect();\r\n   }\r\n \r\n+\r\n   private handleOffline() {\r\n-    logger.warn('Device went offline', { source: 'ConnectionManager' });\r\n+    logger.warn('Device went offline', 'ConnectionManager');\r\n     this.updateState({ isConnected: false });\r\n   }\r\n \r\n+\r\n   private async attemptReconnect(): Promise<boolean> {\r\n     if (this.state.reconnectAttempts >= this.MAX_RECONNECT_ATTEMPTS) {\r\n-      logger.error('Max reconnection attempts reached', {\r\n-        context: { attempts: this.state.reconnectAttempts },\r\n-        source: 'ConnectionManager'\r\n-      });\r\n+      logger.error('Max reconnection attempts reached', 'ConnectionManager', this.state.reconnectAttempts);\r\n       return false;\r\n     }\r\n \r\n+\r\n     this.state.reconnectAttempts++;\r\n     \r\n     // Check database connection\r\n     const isConnected = await this.checkConnection();\r\n"
                },
                {
                    "date": 1739016012702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,12 +45,14 @@\n       } else {\r\n         throw new Error('Failed to establish initial connection');\r\n       }\r\n     } catch (err) {\r\n-      logger.error('Failed to initialize connection manager', 'ConnectionManager', err);\r\n+      logger.error('Failed to initialize connection manager', {\r\n+        context: { error: err },\r\n+        source: 'ConnectionManager'\r\n+      });\r\n       throw err;\r\n     }\r\n-\r\n   }\r\n \r\n   public startMonitoring() {\r\n     this.setupConnectionMonitoring();\r\n@@ -115,13 +117,12 @@\n \r\n \r\n   private async attemptReconnect(): Promise<boolean> {\r\n     if (this.state.reconnectAttempts >= this.MAX_RECONNECT_ATTEMPTS) {\r\n-      logger.error('Max reconnection attempts reached', 'ConnectionManager', this.state.reconnectAttempts);\r\n+      logger.error(`Max reconnection attempts reached: ${this.state.reconnectAttempts}`, 'ConnectionManager');\r\n       return false;\r\n     }\r\n \r\n-\r\n     this.state.reconnectAttempts++;\r\n     \r\n     // Check database connection\r\n     const isConnected = await this.checkConnection();\r\n"
                },
                {
                    "date": 1739016021844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,14 +45,12 @@\n       } else {\r\n         throw new Error('Failed to establish initial connection');\r\n       }\r\n     } catch (err) {\r\n-      logger.error('Failed to initialize connection manager', {\r\n-        context: { error: err },\r\n-        source: 'ConnectionManager'\r\n-      });\r\n+      logger.error('Failed to initialize connection manager', 'ConnectionManager', err);\r\n       throw err;\r\n     }\r\n+\r\n   }\r\n \r\n   public startMonitoring() {\r\n     this.setupConnectionMonitoring();\r\n"
                },
                {
                    "date": 1740852762640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n       } else {\r\n         throw new Error('Failed to establish initial connection');\r\n       }\r\n     } catch (err) {\r\n-      logger.error('Failed to initialize connection manager', 'ConnectionManager', err);\r\n+      logger.error('Failed to initialize connection manager', { source: 'ConnectionManager', error: err });\r\n       throw err;\r\n     }\r\n \r\n   }\r\n"
                },
                {
                    "date": 1740852768260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,16 +88,16 @@\n         this.updateState({ \r\n           lastConnected: new Date(),\r\n           reconnectAttempts: 0\r\n         });\r\n-        logger.info('Connection check successful', 'ConnectionManager');\r\n+        logger.info('Connection check successful', { source: 'ConnectionManager' });\r\n \r\n       }\r\n \r\n       return isConnected;\r\n     } catch (err) {\r\n       this.updateState({ isConnected: false });\r\n-      logger.error('Connection check failed', 'ConnectionManager', err);\r\n+      logger.error('Connection check failed', { source: 'ConnectionManager', error: err });\r\n       return false;\r\n \r\n     }\r\n   }\r\n"
                },
                {
                    "date": 1740899446389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { supabase } from './supabase';\r\n import { logger } from './logger';\r\n-import { errorHandler } from './errorHandler';\r\n+//import { errorHandler } from './errorHandler';\r\n \r\n interface ConnectionState {\r\n   isConnected: boolean;\r\n   lastConnected: Date | null;\r\n@@ -102,22 +102,22 @@\n     }\r\n   }\r\n \r\n   private async handleOnline() {\r\n-    logger.info('Device came online', 'ConnectionManager');\r\n+    logger.info('Device came online', { source: 'ConnectionManager' });\r\n     await this.attemptReconnect();\r\n   }\r\n \r\n \r\n   private handleOffline() {\r\n-    logger.warn('Device went offline', 'ConnectionManager');\r\n+    logger.warn('Device went offline', { source: 'ConnectionManager' });\r\n     this.updateState({ isConnected: false });\r\n   }\r\n \r\n \r\n   private async attemptReconnect(): Promise<boolean> {\r\n     if (this.state.reconnectAttempts >= this.MAX_RECONNECT_ATTEMPTS) {\r\n-      logger.error(`Max reconnection attempts reached: ${this.state.reconnectAttempts}`, 'ConnectionManager');\r\n+      logger.error(`Max reconnection attempts reached: ${this.state.reconnectAttempts}`, { source: 'ConnectionManager' });\r\n       return false;\r\n     }\r\n \r\n     this.state.reconnectAttempts++;\r\n"
                }
            ],
            "date": 1738876137975,
            "name": "Commit-0",
            "content": "import { supabase } from './supabase';\r\nimport { logger } from './logger';\r\nimport { errorHandler } from './errorHandler';\r\n\r\ninterface ConnectionState {\r\n  isConnected: boolean;\r\n  lastConnected: Date | null;\r\n  reconnectAttempts: number;\r\n}\r\n\r\nclass ConnectionManager {\r\n  private static instance: ConnectionManager;\r\n  private state: ConnectionState = {\r\n    isConnected: false,\r\n    lastConnected: null,\r\n    reconnectAttempts: 0\r\n  };\r\n  private readonly MAX_RECONNECT_ATTEMPTS = 5;\r\n  private readonly RECONNECT_DELAY = 2000;\r\n  private readonly HEALTH_CHECK_INTERVAL = 30000;\r\n  private healthCheckTimer?: NodeJS.Timeout;\r\n  private listeners: Set<(state: ConnectionState) => void> = new Set();\r\n  private initialized: boolean = false;\r\n\r\n  private constructor() {}\r\n\r\n  public static getInstance(): ConnectionManager {\r\n    if (!ConnectionManager.instance) {\r\n      ConnectionManager.instance = new ConnectionManager();\r\n    }\r\n    return ConnectionManager.instance;\r\n  }\r\n\r\n  public async initialize() {\r\n    if (this.initialized) return;\r\n    \r\n    try {\r\n      // Initial connection check\r\n      const isConnected = await this.checkConnection();\r\n      this.updateState({ isConnected });\r\n      \r\n      if (isConnected) {\r\n        this.startMonitoring();\r\n        this.initialized = true;\r\n      } else {\r\n        throw new Error('Failed to establish initial connection');\r\n      }\r\n    } catch (err) {\r\n      logger.error('Failed to initialize connection manager', {\r\n        context: { error: err },\r\n        source: 'ConnectionManager'\r\n      });\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  public startMonitoring() {\r\n    this.setupConnectionMonitoring();\r\n    this.checkConnection();\r\n  }\r\n\r\n  private setupConnectionMonitoring() {\r\n    // Monitor online/offline status\r\n    window.addEventListener('online', () => this.handleOnline());\r\n    window.addEventListener('offline', () => this.handleOffline());\r\n\r\n    // Start periodic health checks\r\n    this.startHealthChecks();\r\n  }\r\n\r\n  private startHealthChecks() {\r\n    if (this.healthCheckTimer) {\r\n      clearInterval(this.healthCheckTimer);\r\n    }\r\n    this.healthCheckTimer = setInterval(\r\n      () => this.checkConnection(),\r\n      this.HEALTH_CHECK_INTERVAL\r\n    );\r\n  }\r\n\r\n  private async checkConnection(): Promise<boolean> {\r\n    try {\r\n      // Check database connection using RPC call\r\n      const { data, error } = await supabase.rpc('update_health_check');\r\n\r\n      const isConnected = !error && data;\r\n      this.updateState({ isConnected });\r\n      \r\n      if (isConnected) {\r\n        this.updateState({ \r\n          lastConnected: new Date(),\r\n          reconnectAttempts: 0\r\n        });\r\n        logger.info('Connection check successful', {\r\n          source: 'ConnectionManager'\r\n        });\r\n      }\r\n\r\n      return isConnected;\r\n    } catch (err) {\r\n      this.updateState({ isConnected: false });\r\n      logger.error('Connection check failed', {\r\n        context: { error: err },\r\n        source: 'ConnectionManager'\r\n      });\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private async handleOnline() {\r\n    logger.info('Device came online', { source: 'ConnectionManager' });\r\n    await this.attemptReconnect();\r\n  }\r\n\r\n  private handleOffline() {\r\n    logger.warn('Device went offline', { source: 'ConnectionManager' });\r\n    this.updateState({ isConnected: false });\r\n  }\r\n\r\n  private async attemptReconnect(): Promise<boolean> {\r\n    if (this.state.reconnectAttempts >= this.MAX_RECONNECT_ATTEMPTS) {\r\n      logger.error('Max reconnection attempts reached', {\r\n        context: { attempts: this.state.reconnectAttempts },\r\n        source: 'ConnectionManager'\r\n      });\r\n      return false;\r\n    }\r\n\r\n    this.state.reconnectAttempts++;\r\n    \r\n    // Check database connection\r\n    const isConnected = await this.checkConnection();\r\n    \r\n    if (isConnected) {\r\n      this.updateState({\r\n        isConnected: true,\r\n        lastConnected: new Date(),\r\n        reconnectAttempts: 0\r\n      });\r\n      return true;\r\n    }\r\n\r\n    // Exponential backoff\r\n    const delay = this.RECONNECT_DELAY * Math.pow(2, this.state.reconnectAttempts);\r\n    await new Promise(resolve => setTimeout(resolve, delay));\r\n    \r\n    return this.attemptReconnect();\r\n  }\r\n\r\n  private updateState(updates: Partial<ConnectionState>) {\r\n    this.state = { ...this.state, ...updates };\r\n    this.notifyListeners();\r\n  }\r\n\r\n  public addListener(listener: (state: ConnectionState) => void): () => void {\r\n    this.listeners.add(listener);\r\n    listener({ ...this.state }); // Immediately notify with current state\r\n    return () => this.listeners.delete(listener);\r\n  }\r\n\r\n  private notifyListeners() {\r\n    this.listeners.forEach(listener => listener({ ...this.state }));\r\n  }\r\n\r\n  public getState(): ConnectionState {\r\n    return { ...this.state };\r\n  }\r\n\r\n  public async forceReconnect(): Promise<boolean> {\r\n    this.state.reconnectAttempts = 0;\r\n    return this.attemptReconnect();\r\n  }\r\n\r\n  public cleanup() {\r\n    if (this.healthCheckTimer) {\r\n      clearInterval(this.healthCheckTimer);\r\n    }\r\n    this.listeners.clear();\r\n    this.initialized = false;\r\n  }\r\n}\r\n\r\nexport const connectionManager = ConnectionManager.getInstance();"
        }
    ]
}