{
    "sourceFile": "src/lib/db/QueryBuilder.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1740692472849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740692481614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,5 +116,4 @@\n   }\r\n }\r\n \r\n export const queryBuilder = QueryBuilder.getInstance();\r\n-```\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740692511021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-\r\n import { supabase } from '../supabase';\r\n import { logger } from '../logger';\r\n import { measurePerformance } from '../utils/performance';\r\n \r\n@@ -83,30 +82,30 @@\n   ): Promise<T> {\r\n     const endMetric = measurePerformance('database_mutation', { table, type });\r\n     \r\n     try {\r\n-      let query = supabase.from(table);\r\n+      let result;\r\n \r\n       switch (type) {\r\n         case 'insert':\r\n-          query = query.insert(data);\r\n+          result = await supabase.from(table).insert(data).select().single();\r\n           break;\r\n         case 'update':\r\n           if (!id) throw new Error('ID required for update');\r\n-          query = query.update(data).eq('id', id);\r\n+          result = await supabase.from(table).update(data).eq('id', id).select().single();\r\n           break;\r\n         case 'delete':\r\n           if (!id) throw new Error('ID required for delete');\r\n-          query = query.delete().eq('id', id);\r\n+          result = await supabase.from(table).delete().eq('id', id).select().single();\r\n           break;\r\n+        default:\r\n+          throw new Error(`Unsupported mutation type: ${type}`);\r\n       }\r\n \r\n-      const { data: result, error } = await query.select().single();\r\n-\r\n-      if (error) throw error;\r\n+      if (result.error) throw result.error;\r\n       \r\n       endMetric();\r\n-      return result as T;\r\n+      return result.data as T;\r\n     } catch (err) {\r\n       logger.error('Mutation failed', {\r\n         context: { error: err, table, type, data, id },\r\n         source: 'QueryBuilder'\r\n"
                },
                {
                    "date": 1740692660720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import { measurePerformance } from '../utils/performance';\r\n \r\n interface QueryOptions {\r\n   select?: string;\r\n-  filters?: Record<string, any>;\r\n+  filters?: Record<string, string | number | boolean | null | string[] | number[]>;\r\n   orderBy?: { column: string; ascending?: boolean };\r\n   limit?: number;\r\n   offset?: number;\r\n }\r\n"
                },
                {
                    "date": 1740692776625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n \r\n   public async executeMutation<T>(\r\n     table: string,\r\n     type: 'insert' | 'update' | 'delete',\r\n-    data: any,\r\n+    data: Record<string, string | number | boolean | null | string[] | number[] | Date>,\r\n     id?: string\r\n   ): Promise<T> {\r\n     const endMetric = measurePerformance('database_mutation', { table, type });\r\n     \r\n"
                }
            ],
            "date": 1740692472849,
            "name": "Commit-0",
            "content": "\r\nimport { supabase } from '../supabase';\r\nimport { logger } from '../logger';\r\nimport { measurePerformance } from '../utils/performance';\r\n\r\ninterface QueryOptions {\r\n  select?: string;\r\n  filters?: Record<string, any>;\r\n  orderBy?: { column: string; ascending?: boolean };\r\n  limit?: number;\r\n  offset?: number;\r\n}\r\n\r\nexport class QueryBuilder {\r\n  private static instance: QueryBuilder;\r\n\r\n  private constructor() {}\r\n\r\n  public static getInstance(): QueryBuilder {\r\n    if (!QueryBuilder.instance) {\r\n      QueryBuilder.instance = new QueryBuilder();\r\n    }\r\n    return QueryBuilder.instance;\r\n  }\r\n\r\n  public async executeQuery<T>(\r\n    table: string,\r\n    options: QueryOptions = {}\r\n  ): Promise<T[]> {\r\n    const endMetric = measurePerformance('database_query', { table });\r\n    \r\n    try {\r\n      let query = supabase\r\n        .from(table)\r\n        .select(options.select || '*');\r\n\r\n      // Apply filters\r\n      if (options.filters) {\r\n        Object.entries(options.filters).forEach(([key, value]) => {\r\n          if (Array.isArray(value)) {\r\n            query = query.in(key, value);\r\n          } else if (value !== null && value !== undefined) {\r\n            query = query.eq(key, value);\r\n          }\r\n        });\r\n      }\r\n\r\n      // Apply ordering\r\n      if (options.orderBy) {\r\n        query = query.order(options.orderBy.column, {\r\n          ascending: options.orderBy.ascending ?? true\r\n        });\r\n      }\r\n\r\n      // Apply pagination\r\n      if (options.limit) {\r\n        query = query.limit(options.limit);\r\n      }\r\n      if (options.offset) {\r\n        query = query.range(options.offset, options.offset + (options.limit || 10) - 1);\r\n      }\r\n\r\n      const { data, error } = await query;\r\n\r\n      if (error) throw error;\r\n      \r\n      endMetric();\r\n      return data as T[];\r\n    } catch (err) {\r\n      logger.error('Query execution failed', {\r\n        context: { error: err, table, options },\r\n        source: 'QueryBuilder'\r\n      });\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  public async executeMutation<T>(\r\n    table: string,\r\n    type: 'insert' | 'update' | 'delete',\r\n    data: any,\r\n    id?: string\r\n  ): Promise<T> {\r\n    const endMetric = measurePerformance('database_mutation', { table, type });\r\n    \r\n    try {\r\n      let query = supabase.from(table);\r\n\r\n      switch (type) {\r\n        case 'insert':\r\n          query = query.insert(data);\r\n          break;\r\n        case 'update':\r\n          if (!id) throw new Error('ID required for update');\r\n          query = query.update(data).eq('id', id);\r\n          break;\r\n        case 'delete':\r\n          if (!id) throw new Error('ID required for delete');\r\n          query = query.delete().eq('id', id);\r\n          break;\r\n      }\r\n\r\n      const { data: result, error } = await query.select().single();\r\n\r\n      if (error) throw error;\r\n      \r\n      endMetric();\r\n      return result as T;\r\n    } catch (err) {\r\n      logger.error('Mutation failed', {\r\n        context: { error: err, table, type, data, id },\r\n        source: 'QueryBuilder'\r\n      });\r\n      throw err;\r\n    }\r\n  }\r\n}\r\n\r\nexport const queryBuilder = QueryBuilder.getInstance();\r\n```"
        }
    ]
}