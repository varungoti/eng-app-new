{
    "sourceFile": "src/lib/db/repository.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 26,
            "patches": [
                {
                    "date": 1740902284629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740902296741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { connectToDatabase } from '@/lib/';\r\n+import { connectToDatabase } from '@/lib/db';\r\n import { Grade } from '@/models/grade';\r\n import { Topic } from '@/models/topic';\r\n import { SubTopic } from '@/models/subtopic';\r\n import { Lesson } from '@/models/lesson';\r\n"
                },
                {
                    "date": 1740916588579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import { Grade } from '@/models/grade';\r\n import { Topic } from '@/models/topic';\r\n import { SubTopic } from '@/models/subtopic';\r\n import { Lesson } from '@/models/lesson';\r\n-import { Types } from 'mongoose';\r\n+//import { Types } from 'mongoose';\r\n \r\n export class Repository {\r\n   // Grade methods\r\n   static async getGrades({ page = 1, pageSize = 10, includeContent = false }) {\r\n"
                },
                {
                    "date": 1740916787612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,58 +1,62 @@\n-import { connectToDatabase } from '@/lib/db';\r\n-import { Grade } from '@/models/grade';\r\n-import { Topic } from '@/models/topic';\r\n-import { SubTopic } from '@/models/subtopic';\r\n-import { Lesson } from '@/models/lesson';\r\n-//import { Types } from 'mongoose';\r\n+import { supabase } from '../supabase';\r\n+import type { Database } from '../database.types';\r\n \r\n+// Type aliases to match what the rest of the codebase expects\r\n+type Grade = Database['public']['Tables']['grades']['Row'];\r\n+type Topic = Database['public']['Tables']['topics']['Row'];\r\n+type SubTopic = Database['public']['Tables']['subtopics']['Row'];\r\n+type Lesson = Database['public']['Tables']['lessons']['Row'];\r\n+\r\n export class Repository {\r\n   // Grade methods\r\n   static async getGrades({ page = 1, pageSize = 10, includeContent = false }) {\r\n-    await connectToDatabase();\r\n     const skip = (page - 1) * pageSize;\r\n-    const query = Grade.find().sort({ order: 1, name: 1 });\r\n+    \r\n+    const { data: grades, error, count } = await supabase\r\n+      .from('grades')\r\n+      .select(includeContent ? 'id, name, description, order, topics(id, name, order, subtopics(id, name, order, lessons(*)))' : '*', \r\n+        { count: 'exact' })\r\n+      .order('order', { ascending: true })\r\n+      .range(skip, skip + pageSize - 1);\r\n \r\n-    if (includeContent) {\r\n-      query.populate({\r\n-        path: 'topics',\r\n-        populate: {\r\n-          path: 'subtopics',\r\n-          populate: {\r\n-            path: 'lessons'\r\n-          }\r\n-        }\r\n-      });\r\n-    }\r\n+    if (error) throw error;\r\n \r\n-    const [grades, total] = await Promise.all([\r\n-      query.skip(skip).limit(pageSize),\r\n-      Grade.countDocuments()\r\n-    ]);\r\n-\r\n     return {\r\n-      grades,\r\n+      grades: grades || [],\r\n       pagination: {\r\n         page,\r\n         pageSize,\r\n-        total,\r\n-        totalPages: Math.ceil(total / pageSize)\r\n+        total: count || 0,\r\n+        totalPages: Math.ceil((count || 0) / pageSize)\r\n       }\r\n     };\r\n   }\r\n \r\n   static async findGradeByName(name: string) {\r\n-    await connectToDatabase();\r\n-    return Grade.findOne({ name: { $regex: new RegExp(`^${name}$`, 'i') } });\r\n+    const { data, error } = await supabase\r\n+      .from('grades')\r\n+      .select('*')\r\n+      .ilike('name', name)\r\n+      .single();\r\n+    \r\n+    if (error && error.code !== 'PGRST116') throw error;\r\n+    return data;\r\n   }\r\n \r\n   static async createGrade(data: {\r\n     name: string;\r\n     description?: string;\r\n     order?: number;\r\n   }) {\r\n-    await connectToDatabase();\r\n-    return Grade.create(data);\r\n+    const { data: grade, error } = await supabase\r\n+      .from('grades')\r\n+      .insert(data)\r\n+      .select()\r\n+      .single();\r\n+    \r\n+    if (error) throw error;\r\n+    return grade;\r\n   }\r\n \r\n   static async updateGrade(\r\n     gradeId: string,\r\n@@ -61,25 +65,29 @@\n       description?: string;\r\n       order?: number;\r\n     }\r\n   ) {\r\n-    await connectToDatabase();\r\n-    if (!Types.ObjectId.isValid(gradeId)) {\r\n-      throw new Error('Invalid grade ID format');\r\n-    }\r\n-    return Grade.findByIdAndUpdate(\r\n-      gradeId,\r\n-      { $set: data },\r\n-      { new: true, runValidators: true }\r\n-    );\r\n+    const { data: grade, error } = await supabase\r\n+      .from('grades')\r\n+      .update(data)\r\n+      .eq('id', gradeId)\r\n+      .select()\r\n+      .single();\r\n+    \r\n+    if (error) throw error;\r\n+    return grade;\r\n   }\r\n \r\n   static async deleteGrade(gradeId: string) {\r\n-    await connectToDatabase();\r\n-    if (!Types.ObjectId.isValid(gradeId)) {\r\n-      throw new Error('Invalid grade ID format');\r\n-    }\r\n-    return Grade.findByIdAndDelete(gradeId);\r\n+    const { data, error } = await supabase\r\n+      .from('grades')\r\n+      .delete()\r\n+      .eq('id', gradeId)\r\n+      .select()\r\n+      .single();\r\n+    \r\n+    if (error) throw error;\r\n+    return data;\r\n   }\r\n \r\n   // Topic methods\r\n   static async getTopics(gradeId: string, options: {\r\n@@ -89,35 +97,25 @@\n     includeStats?: boolean;\r\n   } = {}) {\r\n     try {\r\n       console.log('Repository.getTopics - Starting with gradeId:', gradeId);\r\n-      await connectToDatabase();\r\n       \r\n-      if (!Types.ObjectId.isValid(gradeId)) {\r\n-        console.log('Repository.getTopics - Invalid grade ID format:', gradeId);\r\n-        throw new Error('Invalid grade ID format');\r\n-      }\r\n-\r\n-      const query = { gradeId: new Types.ObjectId(gradeId) };\r\n-      console.log('Repository.getTopics - Query:', JSON.stringify(query));\r\n+      let query = supabase\r\n+        .from('topics')\r\n+        .select(options.includeContent ? \r\n+          'id, name, description, order, subtopics(id, name, description, order, lessons(*))' : \r\n+          'id, name, description, order')\r\n+        .eq('grade_id', gradeId)\r\n+        .order('order', { ascending: true });\r\n       \r\n-      const baseQuery = Topic.find(query).sort({ order: 1, name: 1 });\r\n-      console.log('Repository.getTopics - Created base query');\r\n-\r\n-      if (options.includeContent) {\r\n-        console.log('Repository.getTopics - Including content');\r\n-        baseQuery.populate({\r\n-          path: 'subtopics',\r\n-          populate: {\r\n-            path: 'lessons'\r\n-          }\r\n-        });\r\n-      }\r\n-\r\n-      console.log('Repository.getTopics - Executing query');\r\n-      const topics = await baseQuery.exec();\r\n-      console.log('Repository.getTopics - Success, found topics:', topics.length);\r\n-      return { topics };\r\n+      console.log('Repository.getTopics - Query created');\r\n+      \r\n+      const { data: topics, error } = await query;\r\n+      \r\n+      if (error) throw error;\r\n+      \r\n+      console.log('Repository.getTopics - Success, found topics:', topics?.length || 0);\r\n+      return { topics: topics || [] };\r\n     } catch (error) {\r\n       console.error('Error in Repository.getTopics:', error);\r\n       throw error;\r\n     }\r\n@@ -128,99 +126,98 @@\n     description?: string;\r\n     gradeId: string;\r\n     order?: number;\r\n   }) {\r\n-    await connectToDatabase();\r\n+    const { data: topic, error } = await supabase\r\n+      .from('topics')\r\n+      .insert({\r\n+        name: data.name,\r\n+        description: data.description,\r\n+        grade_id: data.gradeId,\r\n+        order: data.order\r\n+      })\r\n+      .select()\r\n+      .single();\r\n     \r\n-    if (!Types.ObjectId.isValid(data.gradeId)) {\r\n-      throw new Error('Invalid grade ID format');\r\n-    }\r\n-\r\n-    const topic = await Topic.create({\r\n-      ...data,\r\n-      gradeId: new Types.ObjectId(data.gradeId)\r\n-    });\r\n-\r\n+    if (error) throw error;\r\n     return topic;\r\n   }\r\n \r\n   // SubTopic methods\r\n   static async getSubTopics(topicId: string, options: { includeContent?: boolean } = {}) {\r\n-    await connectToDatabase();\r\n+    const { data: subtopics, error } = await supabase\r\n+      .from('subtopics')\r\n+      .select(options.includeContent ? 'id, name, description, order, lessons(*)' : 'id, name, description, order')\r\n+      .eq('topic_id', topicId)\r\n+      .order('order', { ascending: true });\r\n     \r\n-    if (!Types.ObjectId.isValid(topicId)) {\r\n-      throw new Error('Invalid topic ID format');\r\n-    }\r\n-\r\n-    const query = { topicId: new Types.ObjectId(topicId) };\r\n-    const baseQuery = SubTopic.find(query).sort({ order: 1, name: 1 });\r\n-\r\n-    if (options.includeContent) {\r\n-      baseQuery.populate('lessons');\r\n-    }\r\n-\r\n-    const subtopics = await baseQuery.exec();\r\n-    return { subtopics };\r\n+    if (error) throw error;\r\n+    return { subtopics: subtopics || [] };\r\n   }\r\n \r\n   static async createSubTopic(data: {\r\n     name: string;\r\n     description?: string;\r\n     topicId: string;\r\n     order?: number;\r\n   }) {\r\n-    await connectToDatabase();\r\n+    const { data: subtopic, error } = await supabase\r\n+      .from('subtopics')\r\n+      .insert({\r\n+        name: data.name,\r\n+        description: data.description,\r\n+        topic_id: data.topicId,\r\n+        order: data.order\r\n+      })\r\n+      .select()\r\n+      .single();\r\n     \r\n-    if (!Types.ObjectId.isValid(data.topicId)) {\r\n-      throw new Error('Invalid topic ID format');\r\n-    }\r\n-\r\n-    const subtopic = await SubTopic.create({\r\n-      ...data,\r\n-      topicId: new Types.ObjectId(data.topicId)\r\n-    });\r\n-\r\n+    if (error) throw error;\r\n     return subtopic;\r\n   }\r\n \r\n-  // Existing methods\r\n+  // Lesson methods\r\n   static async getLessons(subtopicId: string) {\r\n     try {\r\n       console.log('Repository.getLessons - Starting with subtopicId:', subtopicId);\r\n-      await connectToDatabase();\r\n-\r\n-      if (!Types.ObjectId.isValid(subtopicId)) {\r\n-        console.log('Repository.getLessons - Invalid subtopic ID format:', subtopicId);\r\n-        throw new Error('Invalid subtopic ID format');\r\n-      }\r\n-\r\n-      const query = { subtopicId: new Types.ObjectId(subtopicId) };\r\n-      console.log('Repository.getLessons - Query:', JSON.stringify(query));\r\n-\r\n-      const lessons = await Lesson.find(query).sort({ order: 1, title: 1 });\r\n-      console.log('Repository.getLessons - Success, found lessons:', lessons.length);\r\n-\r\n-      return lessons;\r\n+      \r\n+      const { data: lessons, error } = await supabase\r\n+        .from('lessons')\r\n+        .select('*')\r\n+        .eq('subtopic_id', subtopicId)\r\n+        .order('order', { ascending: true })\r\n+        .order('title', { ascending: true });\r\n+      \r\n+      if (error) throw error;\r\n+      \r\n+      console.log('Repository.getLessons - Success, found lessons:', lessons?.length || 0);\r\n+      return lessons || [];\r\n     } catch (error) {\r\n       console.error('Error in Repository.getLessons:', error);\r\n       throw error;\r\n     }\r\n   }\r\n \r\n   static async getLesson(lessonId: string) {\r\n-    await connectToDatabase();\r\n-    if (!Types.ObjectId.isValid(lessonId)) {\r\n-      throw new Error('Invalid lesson ID format');\r\n-    }\r\n-    return Lesson.findById(lessonId);\r\n+    const { data, error } = await supabase\r\n+      .from('lessons')\r\n+      .select('*')\r\n+      .eq('id', lessonId)\r\n+      .single();\r\n+    \r\n+    if (error) throw error;\r\n+    return data;\r\n   }\r\n \r\n   static async getSubtopic(subtopicId: string) {\r\n-    await connectToDatabase();\r\n-    if (!Types.ObjectId.isValid(subtopicId)) {\r\n-      throw new Error('Invalid subtopic ID format');\r\n-    }\r\n-    return SubTopic.findById(subtopicId);\r\n+    const { data, error } = await supabase\r\n+      .from('subtopics')\r\n+      .select('*')\r\n+      .eq('id', subtopicId)\r\n+      .single();\r\n+    \r\n+    if (error) throw error;\r\n+    return data;\r\n   }\r\n \r\n   static async createLesson(data: {\r\n     title: string;\r\n@@ -238,10 +235,22 @@\n       }>;\r\n     }>;\r\n     order?: number;\r\n   }) {\r\n-    await connectToDatabase();\r\n-    return Lesson.create(data);\r\n+    const { data: lesson, error } = await supabase\r\n+      .from('lessons')\r\n+      .insert({\r\n+        title: data.title,\r\n+        description: data.description,\r\n+        subtopic_id: data.subtopicId,\r\n+        questions: data.questions,\r\n+        order: data.order\r\n+      })\r\n+      .select()\r\n+      .single();\r\n+    \r\n+    if (error) throw error;\r\n+    return lesson;\r\n   }\r\n \r\n   static async updateLesson(\r\n     lessonId: string,\r\n@@ -262,57 +271,53 @@\n       }>;\r\n       order?: number;\r\n     }\r\n   ) {\r\n-    await connectToDatabase();\r\n+    // Convert keys to snake_case as needed\r\n+    const updateData: any = {};\r\n+    if (data.title) updateData.title = data.title;\r\n+    if (data.description) updateData.description = data.description;\r\n+    if (data.subtopicId) updateData.subtopic_id = data.subtopicId;\r\n+    if (data.questions) updateData.questions = data.questions;\r\n+    if (data.order !== undefined) updateData.order = data.order;\r\n+\r\n+    const { data: lesson, error } = await supabase\r\n+      .from('lessons')\r\n+      .update(updateData)\r\n+      .eq('id', lessonId)\r\n+      .select()\r\n+      .single();\r\n     \r\n-    if (!Types.ObjectId.isValid(lessonId)) {\r\n-      throw new Error('Invalid lesson ID format');\r\n-    }\r\n-\r\n-    if (data.subtopicId && !Types.ObjectId.isValid(data.subtopicId)) {\r\n-      throw new Error('Invalid subtopic ID format');\r\n-    }\r\n-\r\n-    const updateData = {\r\n-      ...data,\r\n-      subtopicId: data.subtopicId ? new Types.ObjectId(data.subtopicId) : undefined\r\n-    };\r\n-\r\n-    const lesson = await Lesson.findByIdAndUpdate(\r\n-      lessonId,\r\n-      { $set: updateData },\r\n-      { new: true, runValidators: true }\r\n-    );\r\n-\r\n+    if (error) throw error;\r\n     return lesson;\r\n   }\r\n \r\n   static async deleteLesson(lessonId: string) {\r\n-    await connectToDatabase();\r\n+    const { data, error } = await supabase\r\n+      .from('lessons')\r\n+      .delete()\r\n+      .eq('id', lessonId)\r\n+      .select()\r\n+      .single();\r\n     \r\n-    if (!Types.ObjectId.isValid(lessonId)) {\r\n-      throw new Error('Invalid lesson ID format');\r\n-    }\r\n-\r\n-    return Lesson.findByIdAndDelete(lessonId);\r\n+    if (error) throw error;\r\n+    return data;\r\n   }\r\n \r\n   // Class methods\r\n   static async getClass(classId: string) {\r\n-    await connectToDatabase();\r\n-    if (!Types.ObjectId.isValid(classId)) {\r\n-      throw new Error('Invalid class ID format');\r\n-    }\r\n-    return Grade.findById(classId).populate('topics');\r\n+    const { data: grade, error } = await supabase\r\n+      .from('grades')\r\n+      .select('*, topics(*)')\r\n+      .eq('id', classId)\r\n+      .single();\r\n+    \r\n+    if (error) throw error;\r\n+    return grade;\r\n   }\r\n \r\n   static async getClassSchedule(classId: string) {\r\n-    await connectToDatabase();\r\n-    if (!Types.ObjectId.isValid(classId)) {\r\n-      throw new Error('Invalid class ID format');\r\n-    }\r\n-    // TODO: Implement schedule model and query\r\n+    // TODO: Implement with Supabase\r\n     // For now, return mock data\r\n     return {\r\n       upcomingClasses: [\r\n         {\r\n@@ -335,13 +340,9 @@\n     };\r\n   }\r\n \r\n   static async getTopStudents(classId: string, limit: number = 5) {\r\n-    await connectToDatabase();\r\n-    if (!Types.ObjectId.isValid(classId)) {\r\n-      throw new Error('Invalid class ID format');\r\n-    }\r\n-    // TODO: Implement student performance model and query\r\n+    // TODO: Implement with Supabase\r\n     // For now, return mock data\r\n     return {\r\n       students: [\r\n         {\r\n"
                },
                {
                    "date": 1740916879313,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n   } = {}) {\r\n     try {\r\n       console.log('Repository.getTopics - Starting with gradeId:', gradeId);\r\n       \r\n-      let query = supabase\r\n+      const query = supabase\r\n         .from('topics')\r\n         .select(options.includeContent ? \r\n           'id, name, description, order, subtopics(id, name, description, order, lessons(*))' : \r\n           'id, name, description, order')\r\n"
                },
                {
                    "date": 1740916943973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n type Topic = Database['public']['Tables']['topics']['Row'];\r\n type SubTopic = Database['public']['Tables']['subtopics']['Row'];\r\n type Lesson = Database['public']['Tables']['lessons']['Row'];\r\n \r\n+\r\n export class Repository {\r\n   // Grade methods\r\n   static async getGrades({ page = 1, pageSize = 10, includeContent = false }) {\r\n     const skip = (page - 1) * pageSize;\r\n"
                },
                {
                    "date": 1740916949709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,10 +5,10 @@\n type Grade = Database['public']['Tables']['grades']['Row'];\r\n type Topic = Database['public']['Tables']['topics']['Row'];\r\n type SubTopic = Database['public']['Tables']['subtopics']['Row'];\r\n type Lesson = Database['public']['Tables']['lessons']['Row'];\r\n+type \r\n \r\n-\r\n export class Repository {\r\n   // Grade methods\r\n   static async getGrades({ page = 1, pageSize = 10, includeContent = false }) {\r\n     const skip = (page - 1) * pageSize;\r\n"
                },
                {
                    "date": 1740916962360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,10 @@\n type Grade = Database['public']['Tables']['grades']['Row'];\r\n type Topic = Database['public']['Tables']['topics']['Row'];\r\n type SubTopic = Database['public']['Tables']['subtopics']['Row'];\r\n type Lesson = Database['public']['Tables']['lessons']['Row'];\r\n-type \r\n+type Question = Database['public']['Tables']['questions']['Row'];\r\n+type Exercise = Database['public']['Tables']['exercises']['Row'];\r\n \r\n export class Repository {\r\n   // Grade methods\r\n   static async getGrades({ page = 1, pageSize = 10, includeContent = false }) {\r\n"
                },
                {
                    "date": 1740916980563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n type Topic = Database['public']['Tables']['topics']['Row'];\r\n type SubTopic = Database['public']['Tables']['subtopics']['Row'];\r\n type Lesson = Database['public']['Tables']['lessons']['Row'];\r\n type Question = Database['public']['Tables']['questions']['Row'];\r\n-type Exercise = Database['public']['Tables']['exercises']['Row'];\r\n+type Exercise_Prompts = Database['public']['Tables']['exercises']['Row'];\r\n \r\n export class Repository {\r\n   // Grade methods\r\n   static async getGrades({ page = 1, pageSize = 10, includeContent = false }) {\r\n"
                },
                {
                    "date": 1740917032703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,15 @@\n import { supabase } from '../supabase';\r\n import type { Database } from '../database.types';\r\n \r\n-// Type aliases to match what the rest of the codebase expects\r\n-type Grade = Database['public']['Tables']['grades']['Row'];\r\n-type Topic = Database['public']['Tables']['topics']['Row'];\r\n-type SubTopic = Database['public']['Tables']['subtopics']['Row'];\r\n-type Lesson = Database['public']['Tables']['lessons']['Row'];\r\n-type Question = Database['public']['Tables']['questions']['Row'];\r\n-type Exercise_Prompts = Database['public']['Tables']['exercises']['Row'];\r\n+// Type aliases with temporary 'any' to bypass TypeScript errors\r\n+// TODO: Update database.types.ts to include these table definitions\r\n+type Grade = any; // Ideally: Database['public']['Tables']['grades']['Row']\r\n+type Topic = any; // Ideally: Database['public']['Tables']['topics']['Row'] \r\n+type SubTopic = any; // Ideally: Database['public']['Tables']['subtopics']['Row']\r\n+type Lesson = any; // Ideally: Database['public']['Tables']['lessons']['Row']\r\n+type Question = any; // Ideally: Database['public']['Tables']['questions']['Row']\r\n+type Exercise_Prompts = any; // Ideally: Database['public']['Tables']['exercise_prompts']['Row']\r\n \r\n export class Repository {\r\n   // Grade methods\r\n   static async getGrades({ page = 1, pageSize = 10, includeContent = false }) {\r\n"
                },
                {
                    "date": 1740917081752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,14 @@\n import { supabase } from '../supabase';\r\n import type { Database } from '../database.types';\r\n \r\n-// Type aliases with temporary 'any' to bypass TypeScript errors\r\n-// TODO: Update database.types.ts to include these table definitions\r\n-type Grade = any; // Ideally: Database['public']['Tables']['grades']['Row']\r\n-type Topic = any; // Ideally: Database['public']['Tables']['topics']['Row'] \r\n-type SubTopic = any; // Ideally: Database['public']['Tables']['subtopics']['Row']\r\n-type Lesson = any; // Ideally: Database['public']['Tables']['lessons']['Row']\r\n-type Question = any; // Ideally: Database['public']['Tables']['questions']['Row']\r\n-type Exercise_Prompts = any; // Ideally: Database['public']['Tables']['exercise_prompts']['Row']\r\n+// Type aliases to match what the rest of the codebase expects\r\n+type Grade = Database['public']['Tables']['grades']['Row'];\r\n+type Topic = Database['public']['Tables']['topics']['Row'];\r\n+type SubTopic = Database['public']['Tables']['subtopics']['Row'];\r\n+type Lesson = Database['public']['Tables']['lessons']['Row'];\r\n+type Question = Database['public']['Tables']['questions']['Row'];\r\n+type Exercise_Prompts = Database['public']['Tables']['exercise_prompts']['Row'];\r\n \r\n export class Repository {\r\n   // Grade methods\r\n   static async getGrades({ page = 1, pageSize = 10, includeContent = false }) {\r\n"
                },
                {
                    "date": 1740917133765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import { supabase } from '../supabase';\r\n import type { Database } from '../database.types';\r\n \r\n+\r\n // Type aliases to match what the rest of the codebase expects\r\n type Grade = Database['public']['Tables']['grades']['Row'];\r\n type Topic = Database['public']['Tables']['topics']['Row'];\r\n type SubTopic = Database['public']['Tables']['subtopics']['Row'];\r\n"
                },
                {
                    "date": 1740917138926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { supabase } from '../supabase';\r\n import type { Database } from '../database.types';\r\n+import \r\n \r\n-\r\n // Type aliases to match what the rest of the codebase expects\r\n type Grade = Database['public']['Tables']['grades']['Row'];\r\n type Topic = Database['public']['Tables']['topics']['Row'];\r\n type SubTopic = Database['public']['Tables']['subtopics']['Row'];\r\n"
                },
                {
                    "date": 1740917145322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { supabase } from '../supabase';\r\n import type { Database } from '../database.types';\r\n-import \r\n+import { SubTopic } from '@/models/subtopic';\r\n \r\n // Type aliases to match what the rest of the codebase expects\r\n type Grade = Database['public']['Tables']['grades']['Row'];\r\n type Topic = Database['public']['Tables']['topics']['Row'];\r\n"
                },
                {
                    "date": 1740917152688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { supabase } from '../supabase';\r\n import type { Database } from '../database.types';\r\n-import { SubTopic } from '@/models/subtopic';\r\n+import { SubTopic } from '@\r\n \r\n // Type aliases to match what the rest of the codebase expects\r\n type Grade = Database['public']['Tables']['grades']['Row'];\r\n type Topic = Database['public']['Tables']['topics']['Row'];\r\n"
                },
                {
                    "date": 1740917159542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { supabase } from '../supabase';\r\n import type { Database } from '../database.types';\r\n-import { SubTopic } from '@\r\n+import { SubTopic } from '@types\r\n \r\n // Type aliases to match what the rest of the codebase expects\r\n type Grade = Database['public']['Tables']['grades']['Row'];\r\n type Topic = Database['public']['Tables']['topics']['Row'];\r\n"
                },
                {
                    "date": 1740917170342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { supabase } from '../supabase';\r\n import type { Database } from '../database.types';\r\n-import { SubTopic } from '@types\r\n+import { SubTopic } from '@/types/';\r\n \r\n // Type aliases to match what the rest of the codebase expects\r\n type Grade = Database['public']['Tables']['grades']['Row'];\r\n type Topic = Database['public']['Tables']['topics']['Row'];\r\n"
                },
                {
                    "date": 1740917180273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { supabase } from '../supabase';\r\n import type { Database } from '../database.types';\r\n-import { SubTopic } from '@/types/';\r\n+import { Grade, Topic, SubTopic, Lesson, Question, Exercise_Prompts } from '@/types/database.types';\r\n \r\n // Type aliases to match what the rest of the codebase expects\r\n type Grade = Database['public']['Tables']['grades']['Row'];\r\n type Topic = Database['public']['Tables']['topics']['Row'];\r\n"
                },
                {
                    "date": 1740917186600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { supabase } from '../supabase';\r\n import type { Database } from '../database.types';\r\n-import { Grade, Topic, SubTopic, Lesson, Question, Exercise_Prompts } from '@/types/database.types';\r\n+import { Grade, Topic, SubTopic, Lesson, Question, Exercise_Prompts } from '@/types/';\r\n \r\n // Type aliases to match what the rest of the codebase expects\r\n type Grade = Database['public']['Tables']['grades']['Row'];\r\n type Topic = Database['public']['Tables']['topics']['Row'];\r\n"
                },
                {
                    "date": 1740917194799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,14 +2,14 @@\n import type { Database } from '../database.types';\r\n import { Grade, Topic, SubTopic, Lesson, Question, Exercise_Prompts } from '@/types/';\r\n \r\n // Type aliases to match what the rest of the codebase expects\r\n-type Grade = Database['public']['Tables']['grades']['Row'];\r\n-type Topic = Database['public']['Tables']['topics']['Row'];\r\n-type SubTopic = Database['public']['Tables']['subtopics']['Row'];\r\n-type Lesson = Database['public']['Tables']['lessons']['Row'];\r\n-type Question = Database['public']['Tables']['questions']['Row'];\r\n-type Exercise_Prompts = Database['public']['Tables']['exercise_prompts']['Row'];\r\n+// type Grade = Database['public']['Tables']['grades']['Row'];\r\n+// type Topic = Database['public']['Tables']['topics']['Row'];\r\n+// type SubTopic = Database['public']['Tables']['subtopics']['Row'];\r\n+// type Lesson = Database['public']['Tables']['lessons']['Row'];\r\n+// type Question = Database['public']['Tables']['questions']['Row'];\r\n+// type Exercise_Prompts = Database['public']['Tables']['exercise_prompts']['Row'];\r\n \r\n export class Repository {\r\n   // Grade methods\r\n   static async getGrades({ page = 1, pageSize = 10, includeContent = false }) {\r\n"
                },
                {
                    "date": 1740917206816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { supabase } from '../supabase';\r\n import type { Database } from '../database.types';\r\n-import { Grade, Topic, SubTopic, Lesson, Question, Exercise_Prompts } from '@/types/';\r\n+import { Grade, Topic, SubTopic, Lesson, Question, Exerciserompts } from '@/types/';\r\n \r\n // Type aliases to match what the rest of the codebase expects\r\n // type Grade = Database['public']['Tables']['grades']['Row'];\r\n // type Topic = Database['public']['Tables']['topics']['Row'];\r\n"
                },
                {
                    "date": 1740917481336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,26 +1,18 @@\n import { supabase } from '../supabase';\r\n-import type { Database } from '../database.types';\r\n-import { Grade, Topic, SubTopic, Lesson, Question, Exerciserompts } from '@/types/';\r\n+import { Grade, Topic, SubTopic, Lesson, Question, ExercisePrompt } from '@/types/';\r\n \r\n-// Type aliases to match what the rest of the codebase expects\r\n-// type Grade = Database['public']['Tables']['grades']['Row'];\r\n-// type Topic = Database['public']['Tables']['topics']['Row'];\r\n-// type SubTopic = Database['public']['Tables']['subtopics']['Row'];\r\n-// type Lesson = Database['public']['Tables']['lessons']['Row'];\r\n-// type Question = Database['public']['Tables']['questions']['Row'];\r\n-// type Exercise_Prompts = Database['public']['Tables']['exercise_prompts']['Row'];\r\n-\r\n+// Repository class methods updated to match the current database schema\r\n export class Repository {\r\n   // Grade methods\r\n   static async getGrades({ page = 1, pageSize = 10, includeContent = false }) {\r\n     const skip = (page - 1) * pageSize;\r\n     \r\n     const { data: grades, error, count } = await supabase\r\n       .from('grades')\r\n-      .select(includeContent ? 'id, name, description, order, topics(id, name, order, subtopics(id, name, order, lessons(*)))' : '*', \r\n+      .select(includeContent ? 'id, name, level, description, created_at, updated_at, topics(id, title, description, order_index, grade_id, subtopics(id, title, description, order_index, topic_id, lessons(*)))' : '*', \r\n         { count: 'exact' })\r\n-      .order('order', { ascending: true })\r\n+      .order('level', { ascending: true })\r\n       .range(skip, skip + pageSize - 1);\r\n \r\n     if (error) throw error;\r\n \r\n@@ -48,9 +40,9 @@\n \r\n   static async createGrade(data: {\r\n     name: string;\r\n     description?: string;\r\n-    order?: number;\r\n+    level: number;\r\n   }) {\r\n     const { data: grade, error } = await supabase\r\n       .from('grades')\r\n       .insert(data)\r\n@@ -65,9 +57,9 @@\n     gradeId: string,\r\n     data: {\r\n       name?: string;\r\n       description?: string;\r\n-      order?: number;\r\n+      level?: number;\r\n     }\r\n   ) {\r\n     const { data: grade, error } = await supabase\r\n       .from('grades')\r\n@@ -104,12 +96,12 @@\n       \r\n       const query = supabase\r\n         .from('topics')\r\n         .select(options.includeContent ? \r\n-          'id, name, description, order, subtopics(id, name, description, order, lessons(*))' : \r\n-          'id, name, description, order')\r\n+          'id, title, description, grade_id, order_index, total_subtopics, subtopics(id, title, description, order_index, topic_id, total_lessons, lessons(*))' : \r\n+          'id, title, description, grade_id, order_index, total_subtopics')\r\n         .eq('grade_id', gradeId)\r\n-        .order('order', { ascending: true });\r\n+        .order('order_index', { ascending: true });\r\n       \r\n       console.log('Repository.getTopics - Query created');\r\n       \r\n       const { data: topics, error } = await query;\r\n@@ -124,20 +116,20 @@\n     }\r\n   }\r\n \r\n   static async createTopic(data: {\r\n-    name: string;\r\n+    title: string;\r\n     description?: string;\r\n-    gradeId: string;\r\n-    order?: number;\r\n+    grade_id: string;\r\n+    order_index?: number;\r\n   }) {\r\n     const { data: topic, error } = await supabase\r\n       .from('topics')\r\n       .insert({\r\n-        name: data.name,\r\n+        title: data.title,\r\n         description: data.description,\r\n-        grade_id: data.gradeId,\r\n-        order: data.order\r\n+        grade_id: data.grade_id,\r\n+        order_index: data.order_index\r\n       })\r\n       .select()\r\n       .single();\r\n     \r\n@@ -148,29 +140,29 @@\n   // SubTopic methods\r\n   static async getSubTopics(topicId: string, options: { includeContent?: boolean } = {}) {\r\n     const { data: subtopics, error } = await supabase\r\n       .from('subtopics')\r\n-      .select(options.includeContent ? 'id, name, description, order, lessons(*)' : 'id, name, description, order')\r\n+      .select(options.includeContent ? 'id, title, description, topic_id, order_index, total_lessons, lessons(*)' : 'id, title, description, topic_id, order_index, total_lessons')\r\n       .eq('topic_id', topicId)\r\n-      .order('order', { ascending: true });\r\n+      .order('order_index', { ascending: true });\r\n     \r\n     if (error) throw error;\r\n     return { subtopics: subtopics || [] };\r\n   }\r\n \r\n   static async createSubTopic(data: {\r\n-    name: string;\r\n+    title: string;\r\n     description?: string;\r\n-    topicId: string;\r\n-    order?: number;\r\n+    topic_id: string;\r\n+    order_index?: number;\r\n   }) {\r\n     const { data: subtopic, error } = await supabase\r\n       .from('subtopics')\r\n       .insert({\r\n-        name: data.name,\r\n+        title: data.title,\r\n         description: data.description,\r\n-        topic_id: data.topicId,\r\n-        order: data.order\r\n+        topic_id: data.topic_id,\r\n+        order_index: data.order_index\r\n       })\r\n       .select()\r\n       .single();\r\n     \r\n@@ -186,9 +178,9 @@\n       const { data: lessons, error } = await supabase\r\n         .from('lessons')\r\n         .select('*')\r\n         .eq('subtopic_id', subtopicId)\r\n-        .order('order', { ascending: true })\r\n+        .order('order_index', { ascending: true })\r\n         .order('title', { ascending: true });\r\n       \r\n       if (error) throw error;\r\n       \r\n@@ -224,30 +216,34 @@\n \r\n   static async createLesson(data: {\r\n     title: string;\r\n     description?: string;\r\n-    subtopicId: string;\r\n-    questions: Array<{\r\n-      type: string;\r\n-      data: Record<string, any>;\r\n-      exercisePrompts: Array<{\r\n-        text: string;\r\n-        media?: string;\r\n-        type?: 'image' | 'gif' | 'video';\r\n-        narration?: string;\r\n-        sayText?: string;\r\n-      }>;\r\n-    }>;\r\n-    order?: number;\r\n+    subtopic_id: string;\r\n+    content?: string;\r\n+    order_index?: number;\r\n+    status?: string;\r\n+    duration?: number;\r\n+    difficulty?: string;\r\n+    media_type?: string;\r\n+    media_url?: string;\r\n+    prerequisites?: string[];\r\n+    metadata?: Record<string, any>;\r\n   }) {\r\n     const { data: lesson, error } = await supabase\r\n       .from('lessons')\r\n       .insert({\r\n         title: data.title,\r\n         description: data.description,\r\n-        subtopic_id: data.subtopicId,\r\n-        questions: data.questions,\r\n-        order: data.order\r\n+        subtopic_id: data.subtopic_id,\r\n+        content: data.content,\r\n+        order_index: data.order_index,\r\n+        status: data.status || 'draft',\r\n+        duration: data.duration || 30,\r\n+        difficulty: data.difficulty || 'beginner',\r\n+        media_type: data.media_type,\r\n+        media_url: data.media_url,\r\n+        prerequisites: data.prerequisites || [],\r\n+        metadata: data.metadata || {}\r\n       })\r\n       .select()\r\n       .single();\r\n     \r\n@@ -259,34 +255,23 @@\n     lessonId: string,\r\n     data: {\r\n       title?: string;\r\n       description?: string;\r\n-      subtopicId?: string;\r\n-      questions?: Array<{\r\n-        type: string;\r\n-        data: Record<string, any>;\r\n-        exercisePrompts: Array<{\r\n-          text: string;\r\n-          media?: string;\r\n-          type?: 'image' | 'gif' | 'video';\r\n-          narration?: string;\r\n-          sayText?: string;\r\n-        }>;\r\n-      }>;\r\n-      order?: number;\r\n+      subtopic_id?: string;\r\n+      content?: string;\r\n+      order_index?: number;\r\n+      status?: string;\r\n+      duration?: number;\r\n+      difficulty?: string;\r\n+      media_type?: string;\r\n+      media_url?: string;\r\n+      prerequisites?: string[];\r\n+      metadata?: Record<string, any>;\r\n     }\r\n   ) {\r\n-    // Convert keys to snake_case as needed\r\n-    const updateData: any = {};\r\n-    if (data.title) updateData.title = data.title;\r\n-    if (data.description) updateData.description = data.description;\r\n-    if (data.subtopicId) updateData.subtopic_id = data.subtopicId;\r\n-    if (data.questions) updateData.questions = data.questions;\r\n-    if (data.order !== undefined) updateData.order = data.order;\r\n-\r\n     const { data: lesson, error } = await supabase\r\n       .from('lessons')\r\n-      .update(updateData)\r\n+      .update(data)\r\n       .eq('id', lessonId)\r\n       .select()\r\n       .single();\r\n     \r\n@@ -304,63 +289,216 @@\n     \r\n     if (error) throw error;\r\n     return data;\r\n   }\r\n+  \r\n+  // Questions methods\r\n+  static async getQuestions(lessonId: string) {\r\n+    const { data, error } = await supabase\r\n+      .from('questions')\r\n+      .select('*')\r\n+      .eq('lesson_id', lessonId)\r\n+      .order('order_index', { ascending: true });\r\n+    \r\n+    if (error) throw error;\r\n+    return data || [];\r\n+  }\r\n+  \r\n+  static async createQuestion(data: {\r\n+    title: string;\r\n+    content?: string;\r\n+    type: string;\r\n+    lesson_id: string;\r\n+    points?: number;\r\n+    metadata?: Record<string, any>;\r\n+    order_index?: number;\r\n+    data?: Record<string, any>;\r\n+    correct_answer?: string;\r\n+    duration?: number;\r\n+    sub_type?: string;\r\n+  }) {\r\n+    const { data: question, error } = await supabase\r\n+      .from('questions')\r\n+      .insert({\r\n+        title: data.title,\r\n+        content: data.content,\r\n+        type: data.type,\r\n+        lesson_id: data.lesson_id,\r\n+        points: data.points || 0,\r\n+        metadata: data.metadata || {},\r\n+        order_index: data.order_index,\r\n+        data: data.data || {},\r\n+        correct_answer: data.correct_answer,\r\n+        duration: data.duration || 30,\r\n+        sub_type: data.sub_type\r\n+      })\r\n+      .select()\r\n+      .single();\r\n+    \r\n+    if (error) throw error;\r\n+    return question;\r\n+  }\r\n \r\n+  // Exercise Prompts methods\r\n+  static async getExercisePrompts(questionId: string) {\r\n+    const { data, error } = await supabase\r\n+      .from('exercise_prompts')\r\n+      .select('*')\r\n+      .eq('question_id', questionId)\r\n+      .order('order_index', { ascending: true });\r\n+    \r\n+    if (error) throw error;\r\n+    return data || [];\r\n+  }\r\n+  \r\n+  static async createExercisePrompt(data: {\r\n+    text: string;\r\n+    media?: string;\r\n+    type?: string;\r\n+    narration?: string;\r\n+    saytext?: string;\r\n+    question_id: string;\r\n+    order_index: number;\r\n+    voice_id?: string;\r\n+    metadata?: any[];\r\n+  }) {\r\n+    const { data: prompt, error } = await supabase\r\n+      .from('exercise_prompts')\r\n+      .insert(data)\r\n+      .select()\r\n+      .single();\r\n+    \r\n+    if (error) throw error;\r\n+    return prompt;\r\n+  }\r\n+\r\n+  // School methods\r\n+  static async getSchools() {\r\n+    const { data, error } = await supabase\r\n+      .from('schools')\r\n+      .select('*')\r\n+      .order('name', { ascending: true });\r\n+    \r\n+    if (error) throw error;\r\n+    return data || [];\r\n+  }\r\n+  \r\n+  static async getSchool(schoolId: string) {\r\n+    const { data, error } = await supabase\r\n+      .from('schools')\r\n+      .select('*')\r\n+      .eq('id', schoolId)\r\n+      .single();\r\n+    \r\n+    if (error) throw error;\r\n+    return data;\r\n+  }\r\n+\r\n   // Class methods\r\n   static async getClass(classId: string) {\r\n     const { data: grade, error } = await supabase\r\n-      .from('grades')\r\n-      .select('*, topics(*)')\r\n+      .from('classes')\r\n+      .select('*, grade:grade_id(*)')\r\n       .eq('id', classId)\r\n       .single();\r\n     \r\n     if (error) throw error;\r\n     return grade;\r\n   }\r\n \r\n   static async getClassSchedule(classId: string) {\r\n-    // TODO: Implement with Supabase\r\n-    // For now, return mock data\r\n-    return {\r\n-      upcomingClasses: [\r\n-        {\r\n-          id: 1,\r\n-          subject: \"English Literature\",\r\n-          time: \"09:00 AM\",\r\n-          students: 28,\r\n-          topic: \"Shakespeare: Romeo & Juliet\",\r\n-          room: \"Room 101\",\r\n-        },\r\n-        {\r\n-          id: 2,\r\n-          subject: \"Creative Writing\",\r\n-          time: \"11:30 AM\",\r\n-          students: 24,\r\n-          topic: \"Character Development\",\r\n-          room: \"Room 203\",\r\n-        },\r\n-      ]\r\n-    };\r\n+    try {\r\n+      const { data, error } = await supabase\r\n+        .from('assigned_content')\r\n+        .select('*, content:content_id(*)')\r\n+        .eq('class_id', classId)\r\n+        .order('valid_from', { ascending: true });\r\n+      \r\n+      if (error) throw error;\r\n+      return {\r\n+        upcomingClasses: data || []\r\n+      };\r\n+    } catch (error) {\r\n+      console.error('Error fetching class schedule:', error);\r\n+      // Return mock data for now\r\n+      return {\r\n+        upcomingClasses: [\r\n+          {\r\n+            id: 1,\r\n+            subject: \"English Literature\",\r\n+            time: \"09:00 AM\",\r\n+            students: 28,\r\n+            topic: \"Shakespeare: Romeo & Juliet\",\r\n+            room: \"Room 101\",\r\n+          },\r\n+          {\r\n+            id: 2,\r\n+            subject: \"Creative Writing\",\r\n+            time: \"11:30 AM\",\r\n+            students: 24,\r\n+            topic: \"Character Development\",\r\n+            room: \"Room 203\",\r\n+          },\r\n+        ]\r\n+      };\r\n+    }\r\n   }\r\n \r\n   static async getTopStudents(classId: string, limit: number = 5) {\r\n-    // TODO: Implement with Supabase\r\n-    // For now, return mock data\r\n-    return {\r\n-      students: [\r\n-        {\r\n-          id: 1,\r\n-          name: \"Emma Thompson\",\r\n-          avatar: \"https://images.unsplash.com/photo-1494790108377-be9c29b29330?w=150\",\r\n-          progress: 92,\r\n-        },\r\n-        {\r\n-          id: 2,\r\n-          name: \"Michael Chen\",\r\n-          avatar: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150\",\r\n-          progress: 88,\r\n-        },\r\n-      ]\r\n-    };\r\n+    try {\r\n+      const { data: students, error } = await supabase\r\n+        .from('class_students')\r\n+        .select('student:student_id(*)')\r\n+        .eq('class_id', classId)\r\n+        .limit(limit);\r\n+      \r\n+      if (error) throw error;\r\n+      \r\n+      if (students && students.length > 0) {\r\n+        return {\r\n+          students: students.map(s => ({\r\n+            id: s.student.id,\r\n+            name: `${s.student.first_name} ${s.student.last_name}`,\r\n+            progress: Math.floor(Math.random() * 100) // Mock progress for now\r\n+          }))\r\n+        };\r\n+      }\r\n+      \r\n+      // Return mock data if no students found\r\n+      return {\r\n+        students: [\r\n+          {\r\n+            id: 1,\r\n+            name: \"Emma Thompson\",\r\n+            avatar: \"https://images.unsplash.com/photo-1494790108377-be9c29b29330?w=150\",\r\n+            progress: 92,\r\n+          },\r\n+          {\r\n+            id: 2,\r\n+            name: \"Michael Chen\",\r\n+            avatar: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150\",\r\n+            progress: 88,\r\n+          },\r\n+        ]\r\n+      };\r\n+    } catch (error) {\r\n+      console.error('Error fetching top students:', error);\r\n+      // Return mock data on error\r\n+      return {\r\n+        students: [\r\n+          {\r\n+            id: 1,\r\n+            name: \"Emma Thompson\",\r\n+            avatar: \"https://images.unsplash.com/photo-1494790108377-be9c29b29330?w=150\",\r\n+            progress: 92,\r\n+          },\r\n+          {\r\n+            id: 2,\r\n+            name: \"Michael Chen\",\r\n+            avatar: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150\",\r\n+            progress: 88,\r\n+          },\r\n+        ]\r\n+      };\r\n+    }\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740917489977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import { supabase } from '../supabase';\r\n+import type { Database } from '../database.types';\r\n import { Grade, Topic, SubTopic, Lesson, Question, ExercisePrompt } from '@/types/';\r\n \r\n // Repository class methods updated to match the current database schema\r\n export class Repository {\r\n"
                },
                {
                    "date": 1740917496369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { supabase } from '../supabase';\r\n import type { Database } from '../database.types';\r\n-import { Grade, Topic, SubTopic, Lesson, Question, ExercisePrompt } from '@/types/';\r\n+//import { Grade, Topic, SubTopic, Lesson, Question, ExercisePrompt } from '@/types/';\r\n \r\n // Repository class methods updated to match the current database schema\r\n export class Repository {\r\n   // Grade methods\r\n"
                },
                {
                    "date": 1740917512999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { supabase } from '../supabase';\r\n import type { Database } from '../database.types';\r\n-//import { Grade, Topic, SubTopic, Lesson, Question, ExercisePrompt } from '@/types/';\r\n+import { Grade, Topic, SubTopic, Lesson, Question, ExercisePrompt } from '@/types/';\r\n \r\n // Repository class methods updated to match the current database schema\r\n export class Repository {\r\n   // Grade methods\r\n@@ -456,10 +456,10 @@\n       \r\n       if (students && students.length > 0) {\r\n         return {\r\n           students: students.map(s => ({\r\n-            id: s.student.id,\r\n-            name: `${s.student.first_name} ${s.student.last_name}`,\r\n+            id: s.student?.id || 'unknown',\r\n+            name: s.student ? `${s.student.first_name || ''} ${s.student.last_name || ''}` : 'Unknown Student',\r\n             progress: Math.floor(Math.random() * 100) // Mock progress for now\r\n           }))\r\n         };\r\n       }\r\n"
                },
                {
                    "date": 1740917548332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -455,13 +455,17 @@\n       if (error) throw error;\r\n       \r\n       if (students && students.length > 0) {\r\n         return {\r\n-          students: students.map(s => ({\r\n-            id: s.student?.id || 'unknown',\r\n-            name: s.student ? `${s.student.first_name || ''} ${s.student.last_name || ''}` : 'Unknown Student',\r\n-            progress: Math.floor(Math.random() * 100) // Mock progress for now\r\n-          }))\r\n+          students: students.map(s => {\r\n+            // Use a type assertion to help TypeScript understand the structure\r\n+            const student = (s as any).student || {};\r\n+            return {\r\n+              id: student.id || 'unknown',\r\n+              name: `${student.first_name || ''} ${student.last_name || ''}`.trim() || 'Unknown Student',\r\n+              progress: Math.floor(Math.random() * 100) // Mock progress for now\r\n+            };\r\n+          })\r\n         };\r\n       }\r\n       \r\n       // Return mock data if no students found\r\n"
                },
                {
                    "date": 1740917566801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { supabase } from '../supabase';\r\n-import type { Database } from '../database.types';\r\n+//import type { Database } from '../database.types';\r\n import { Grade, Topic, SubTopic, Lesson, Question, ExercisePrompt } from '@/types/';\r\n \r\n // Repository class methods updated to match the current database schema\r\n export class Repository {\r\n"
                }
            ],
            "date": 1740902284629,
            "name": "Commit-0",
            "content": "import { connectToDatabase } from '@/lib/';\r\nimport { Grade } from '@/models/grade';\r\nimport { Topic } from '@/models/topic';\r\nimport { SubTopic } from '@/models/subtopic';\r\nimport { Lesson } from '@/models/lesson';\r\nimport { Types } from 'mongoose';\r\n\r\nexport class Repository {\r\n  // Grade methods\r\n  static async getGrades({ page = 1, pageSize = 10, includeContent = false }) {\r\n    await connectToDatabase();\r\n    const skip = (page - 1) * pageSize;\r\n    const query = Grade.find().sort({ order: 1, name: 1 });\r\n\r\n    if (includeContent) {\r\n      query.populate({\r\n        path: 'topics',\r\n        populate: {\r\n          path: 'subtopics',\r\n          populate: {\r\n            path: 'lessons'\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    const [grades, total] = await Promise.all([\r\n      query.skip(skip).limit(pageSize),\r\n      Grade.countDocuments()\r\n    ]);\r\n\r\n    return {\r\n      grades,\r\n      pagination: {\r\n        page,\r\n        pageSize,\r\n        total,\r\n        totalPages: Math.ceil(total / pageSize)\r\n      }\r\n    };\r\n  }\r\n\r\n  static async findGradeByName(name: string) {\r\n    await connectToDatabase();\r\n    return Grade.findOne({ name: { $regex: new RegExp(`^${name}$`, 'i') } });\r\n  }\r\n\r\n  static async createGrade(data: {\r\n    name: string;\r\n    description?: string;\r\n    order?: number;\r\n  }) {\r\n    await connectToDatabase();\r\n    return Grade.create(data);\r\n  }\r\n\r\n  static async updateGrade(\r\n    gradeId: string,\r\n    data: {\r\n      name?: string;\r\n      description?: string;\r\n      order?: number;\r\n    }\r\n  ) {\r\n    await connectToDatabase();\r\n    if (!Types.ObjectId.isValid(gradeId)) {\r\n      throw new Error('Invalid grade ID format');\r\n    }\r\n    return Grade.findByIdAndUpdate(\r\n      gradeId,\r\n      { $set: data },\r\n      { new: true, runValidators: true }\r\n    );\r\n  }\r\n\r\n  static async deleteGrade(gradeId: string) {\r\n    await connectToDatabase();\r\n    if (!Types.ObjectId.isValid(gradeId)) {\r\n      throw new Error('Invalid grade ID format');\r\n    }\r\n    return Grade.findByIdAndDelete(gradeId);\r\n  }\r\n\r\n  // Topic methods\r\n  static async getTopics(gradeId: string, options: {\r\n    includeContent?: boolean;\r\n    includeBasic?: boolean;\r\n    includeDetails?: boolean;\r\n    includeStats?: boolean;\r\n  } = {}) {\r\n    try {\r\n      console.log('Repository.getTopics - Starting with gradeId:', gradeId);\r\n      await connectToDatabase();\r\n      \r\n      if (!Types.ObjectId.isValid(gradeId)) {\r\n        console.log('Repository.getTopics - Invalid grade ID format:', gradeId);\r\n        throw new Error('Invalid grade ID format');\r\n      }\r\n\r\n      const query = { gradeId: new Types.ObjectId(gradeId) };\r\n      console.log('Repository.getTopics - Query:', JSON.stringify(query));\r\n      \r\n      const baseQuery = Topic.find(query).sort({ order: 1, name: 1 });\r\n      console.log('Repository.getTopics - Created base query');\r\n\r\n      if (options.includeContent) {\r\n        console.log('Repository.getTopics - Including content');\r\n        baseQuery.populate({\r\n          path: 'subtopics',\r\n          populate: {\r\n            path: 'lessons'\r\n          }\r\n        });\r\n      }\r\n\r\n      console.log('Repository.getTopics - Executing query');\r\n      const topics = await baseQuery.exec();\r\n      console.log('Repository.getTopics - Success, found topics:', topics.length);\r\n      return { topics };\r\n    } catch (error) {\r\n      console.error('Error in Repository.getTopics:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async createTopic(data: {\r\n    name: string;\r\n    description?: string;\r\n    gradeId: string;\r\n    order?: number;\r\n  }) {\r\n    await connectToDatabase();\r\n    \r\n    if (!Types.ObjectId.isValid(data.gradeId)) {\r\n      throw new Error('Invalid grade ID format');\r\n    }\r\n\r\n    const topic = await Topic.create({\r\n      ...data,\r\n      gradeId: new Types.ObjectId(data.gradeId)\r\n    });\r\n\r\n    return topic;\r\n  }\r\n\r\n  // SubTopic methods\r\n  static async getSubTopics(topicId: string, options: { includeContent?: boolean } = {}) {\r\n    await connectToDatabase();\r\n    \r\n    if (!Types.ObjectId.isValid(topicId)) {\r\n      throw new Error('Invalid topic ID format');\r\n    }\r\n\r\n    const query = { topicId: new Types.ObjectId(topicId) };\r\n    const baseQuery = SubTopic.find(query).sort({ order: 1, name: 1 });\r\n\r\n    if (options.includeContent) {\r\n      baseQuery.populate('lessons');\r\n    }\r\n\r\n    const subtopics = await baseQuery.exec();\r\n    return { subtopics };\r\n  }\r\n\r\n  static async createSubTopic(data: {\r\n    name: string;\r\n    description?: string;\r\n    topicId: string;\r\n    order?: number;\r\n  }) {\r\n    await connectToDatabase();\r\n    \r\n    if (!Types.ObjectId.isValid(data.topicId)) {\r\n      throw new Error('Invalid topic ID format');\r\n    }\r\n\r\n    const subtopic = await SubTopic.create({\r\n      ...data,\r\n      topicId: new Types.ObjectId(data.topicId)\r\n    });\r\n\r\n    return subtopic;\r\n  }\r\n\r\n  // Existing methods\r\n  static async getLessons(subtopicId: string) {\r\n    try {\r\n      console.log('Repository.getLessons - Starting with subtopicId:', subtopicId);\r\n      await connectToDatabase();\r\n\r\n      if (!Types.ObjectId.isValid(subtopicId)) {\r\n        console.log('Repository.getLessons - Invalid subtopic ID format:', subtopicId);\r\n        throw new Error('Invalid subtopic ID format');\r\n      }\r\n\r\n      const query = { subtopicId: new Types.ObjectId(subtopicId) };\r\n      console.log('Repository.getLessons - Query:', JSON.stringify(query));\r\n\r\n      const lessons = await Lesson.find(query).sort({ order: 1, title: 1 });\r\n      console.log('Repository.getLessons - Success, found lessons:', lessons.length);\r\n\r\n      return lessons;\r\n    } catch (error) {\r\n      console.error('Error in Repository.getLessons:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async getLesson(lessonId: string) {\r\n    await connectToDatabase();\r\n    if (!Types.ObjectId.isValid(lessonId)) {\r\n      throw new Error('Invalid lesson ID format');\r\n    }\r\n    return Lesson.findById(lessonId);\r\n  }\r\n\r\n  static async getSubtopic(subtopicId: string) {\r\n    await connectToDatabase();\r\n    if (!Types.ObjectId.isValid(subtopicId)) {\r\n      throw new Error('Invalid subtopic ID format');\r\n    }\r\n    return SubTopic.findById(subtopicId);\r\n  }\r\n\r\n  static async createLesson(data: {\r\n    title: string;\r\n    description?: string;\r\n    subtopicId: string;\r\n    questions: Array<{\r\n      type: string;\r\n      data: Record<string, any>;\r\n      exercisePrompts: Array<{\r\n        text: string;\r\n        media?: string;\r\n        type?: 'image' | 'gif' | 'video';\r\n        narration?: string;\r\n        sayText?: string;\r\n      }>;\r\n    }>;\r\n    order?: number;\r\n  }) {\r\n    await connectToDatabase();\r\n    return Lesson.create(data);\r\n  }\r\n\r\n  static async updateLesson(\r\n    lessonId: string,\r\n    data: {\r\n      title?: string;\r\n      description?: string;\r\n      subtopicId?: string;\r\n      questions?: Array<{\r\n        type: string;\r\n        data: Record<string, any>;\r\n        exercisePrompts: Array<{\r\n          text: string;\r\n          media?: string;\r\n          type?: 'image' | 'gif' | 'video';\r\n          narration?: string;\r\n          sayText?: string;\r\n        }>;\r\n      }>;\r\n      order?: number;\r\n    }\r\n  ) {\r\n    await connectToDatabase();\r\n    \r\n    if (!Types.ObjectId.isValid(lessonId)) {\r\n      throw new Error('Invalid lesson ID format');\r\n    }\r\n\r\n    if (data.subtopicId && !Types.ObjectId.isValid(data.subtopicId)) {\r\n      throw new Error('Invalid subtopic ID format');\r\n    }\r\n\r\n    const updateData = {\r\n      ...data,\r\n      subtopicId: data.subtopicId ? new Types.ObjectId(data.subtopicId) : undefined\r\n    };\r\n\r\n    const lesson = await Lesson.findByIdAndUpdate(\r\n      lessonId,\r\n      { $set: updateData },\r\n      { new: true, runValidators: true }\r\n    );\r\n\r\n    return lesson;\r\n  }\r\n\r\n  static async deleteLesson(lessonId: string) {\r\n    await connectToDatabase();\r\n    \r\n    if (!Types.ObjectId.isValid(lessonId)) {\r\n      throw new Error('Invalid lesson ID format');\r\n    }\r\n\r\n    return Lesson.findByIdAndDelete(lessonId);\r\n  }\r\n\r\n  // Class methods\r\n  static async getClass(classId: string) {\r\n    await connectToDatabase();\r\n    if (!Types.ObjectId.isValid(classId)) {\r\n      throw new Error('Invalid class ID format');\r\n    }\r\n    return Grade.findById(classId).populate('topics');\r\n  }\r\n\r\n  static async getClassSchedule(classId: string) {\r\n    await connectToDatabase();\r\n    if (!Types.ObjectId.isValid(classId)) {\r\n      throw new Error('Invalid class ID format');\r\n    }\r\n    // TODO: Implement schedule model and query\r\n    // For now, return mock data\r\n    return {\r\n      upcomingClasses: [\r\n        {\r\n          id: 1,\r\n          subject: \"English Literature\",\r\n          time: \"09:00 AM\",\r\n          students: 28,\r\n          topic: \"Shakespeare: Romeo & Juliet\",\r\n          room: \"Room 101\",\r\n        },\r\n        {\r\n          id: 2,\r\n          subject: \"Creative Writing\",\r\n          time: \"11:30 AM\",\r\n          students: 24,\r\n          topic: \"Character Development\",\r\n          room: \"Room 203\",\r\n        },\r\n      ]\r\n    };\r\n  }\r\n\r\n  static async getTopStudents(classId: string, limit: number = 5) {\r\n    await connectToDatabase();\r\n    if (!Types.ObjectId.isValid(classId)) {\r\n      throw new Error('Invalid class ID format');\r\n    }\r\n    // TODO: Implement student performance model and query\r\n    // For now, return mock data\r\n    return {\r\n      students: [\r\n        {\r\n          id: 1,\r\n          name: \"Emma Thompson\",\r\n          avatar: \"https://images.unsplash.com/photo-1494790108377-be9c29b29330?w=150\",\r\n          progress: 92,\r\n        },\r\n        {\r\n          id: 2,\r\n          name: \"Michael Chen\",\r\n          avatar: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150\",\r\n          progress: 88,\r\n        },\r\n      ]\r\n    };\r\n  }\r\n}"
        }
    ]
}