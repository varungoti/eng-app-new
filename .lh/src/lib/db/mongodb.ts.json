{
    "sourceFile": "src/lib/db/mongodb.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1741205885741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741209466836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,53 +1,55 @@\n-// This file is kept for backward compatibility\r\n-// Projects now use Supabase instead of MongoDB\r\n-import { logger } from '../logger';\r\n-\r\n-// Provide a no-op function that logs a warning when used\r\n-export async function connectToDatabase() {\r\n-  logger.warn('MongoDB connectToDatabase was called, but the project now uses Supabase', { \r\n-    source: 'mongodb',\r\n-    action: 'connectToDatabase'\r\n-  });\r\n-  \r\n-  // Return a fake connection object to prevent errors in legacy code\r\n-  return {\r\n-    db: {\r\n-      collection: () => {\r\n-        logger.warn('Attempt to access MongoDB collection in Supabase project', {\r\n-          source: 'mongodb'\r\n-        });\r\n-        \r\n-        // Return a stub object with common MongoDB methods\r\n-        return {\r\n-          find: async () => [],\r\n-          findOne: async () => null,\r\n-          insertOne: async () => ({ insertedId: 'fake-id' }),\r\n-          updateOne: async () => ({ modifiedCount: 0 }),\r\n-          deleteOne: async () => ({ deletedCount: 0 })\r\n-        };\r\n-      }\r\n-    }\r\n-  };\r\n-}\r\n-\r\n-// Mock mongoose global to prevent errors\r\n-/* eslint-disable @typescript-eslint/no-explicit-any */\r\n-const mockMongoose = {\r\n-  promise: null,\r\n-  conn: null\r\n-};\r\n-\r\n-// If global object exists, set the mock mongoose\r\n-if (typeof global !== 'undefined') {\r\n-  (global as any).mongoose = mockMongoose;\r\n-}\r\n-\r\n-// Export a dummy mongoose object for backward compatibility\r\n-export default {\r\n-  connect: async () => {\r\n-    logger.warn('MongoDB connect was called, but the project now uses Supabase', {\r\n-      source: 'mongodb'\r\n-    });\r\n-    return mockMongoose;\r\n-  }\r\n+// This file is kept for backward compatibility\n+// Projects now use Supabase instead of MongoDB\n+import { logger } from '../logger';\n+\n+// Provide a no-op function that logs a warning when used\n+export async function connectToDatabase() {\n+  logger.warn('MongoDB connectToDatabase was called, but the project now uses Supabase', { \n+    source: 'mongodb',\n+    context: {\n+      action: 'connectToDatabase'\n+    }\n+  });\n+  \n+  // Return a fake connection object to prevent errors in legacy code\n+  return {\n+    db: {\n+      collection: () => {\n+        logger.warn('Attempt to access MongoDB collection in Supabase project', {\n+          source: 'mongodb'\n+        });\n+        \n+        // Return a stub object with common MongoDB methods\n+        return {\n+          find: async () => [],\n+          findOne: async () => null,\n+          insertOne: async () => ({ insertedId: 'fake-id' }),\n+          updateOne: async () => ({ modifiedCount: 0 }),\n+          deleteOne: async () => ({ deletedCount: 0 })\n+        };\n+      }\n+    }\n+  };\n+}\n+\n+// Mock mongoose global to prevent errors\n+/* eslint-disable @typescript-eslint/no-explicit-any */\n+const mockMongoose = {\n+  promise: null,\n+  conn: null\n+};\n+\n+// If global object exists, set the mock mongoose\n+if (typeof global !== 'undefined') {\n+  (global as any).mongoose = mockMongoose;\n+}\n+\n+// Export a dummy mongoose object for backward compatibility\n+export default {\n+  connect: async () => {\n+    logger.warn('MongoDB connect was called, but the project now uses Supabase', {\n+      source: 'mongodb'\n+    });\n+    return mockMongoose;\n+  }\n }; \n\\ No newline at end of file\n"
                }
            ],
            "date": 1741205885741,
            "name": "Commit-0",
            "content": "// This file is kept for backward compatibility\r\n// Projects now use Supabase instead of MongoDB\r\nimport { logger } from '../logger';\r\n\r\n// Provide a no-op function that logs a warning when used\r\nexport async function connectToDatabase() {\r\n  logger.warn('MongoDB connectToDatabase was called, but the project now uses Supabase', { \r\n    source: 'mongodb',\r\n    action: 'connectToDatabase'\r\n  });\r\n  \r\n  // Return a fake connection object to prevent errors in legacy code\r\n  return {\r\n    db: {\r\n      collection: () => {\r\n        logger.warn('Attempt to access MongoDB collection in Supabase project', {\r\n          source: 'mongodb'\r\n        });\r\n        \r\n        // Return a stub object with common MongoDB methods\r\n        return {\r\n          find: async () => [],\r\n          findOne: async () => null,\r\n          insertOne: async () => ({ insertedId: 'fake-id' }),\r\n          updateOne: async () => ({ modifiedCount: 0 }),\r\n          deleteOne: async () => ({ deletedCount: 0 })\r\n        };\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\n// Mock mongoose global to prevent errors\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nconst mockMongoose = {\r\n  promise: null,\r\n  conn: null\r\n};\r\n\r\n// If global object exists, set the mock mongoose\r\nif (typeof global !== 'undefined') {\r\n  (global as any).mongoose = mockMongoose;\r\n}\r\n\r\n// Export a dummy mongoose object for backward compatibility\r\nexport default {\r\n  connect: async () => {\r\n    logger.warn('MongoDB connect was called, but the project now uses Supabase', {\r\n      source: 'mongodb'\r\n    });\r\n    return mockMongoose;\r\n  }\r\n}; "
        }
    ]
}