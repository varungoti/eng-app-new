{
    "sourceFile": "src/lib/features/tasks/index.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1740900686282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1740900686282,
            "name": "Commit-0",
            "content": "// Tasks feature implementation\r\nimport { supabase } from '../../supabase';\r\nimport { logger } from '../../logger';\r\n\r\nexport interface Task {\r\n  id: string;\r\n  title: string;\r\n  description?: string;\r\n  due_date?: string;\r\n  created_at: string;\r\n  completed_at?: string;\r\n  status: 'pending' | 'in_progress' | 'completed' | 'canceled';\r\n  priority: 'low' | 'medium' | 'high' | 'urgent';\r\n  user_id: string;\r\n  tags?: string[];\r\n}\r\n\r\nexport interface TasksFeature {\r\n  getTasks: () => Promise<Task[]>;\r\n  getTaskById: (id: string) => Promise<Task | null>;\r\n  createTask: (task: Omit<Task, 'id' | 'created_at'>) => Promise<Task>;\r\n  updateTask: (id: string, updates: Partial<Task>) => Promise<Task>;\r\n  completeTask: (id: string) => Promise<Task>;\r\n  deleteTask: (id: string) => Promise<boolean>;\r\n}\r\n\r\nexport const tasksFeature: TasksFeature = {\r\n  getTasks: async () => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('tasks')\r\n        .select('*')\r\n        .order('due_date', { ascending: true });\r\n\r\n      if (error) throw error;\r\n      return data || [];\r\n    } catch (err) {\r\n      logger.error('Failed to fetch tasks', { source: 'TasksFeature', error: err });\r\n      return [];\r\n    }\r\n  },\r\n\r\n  getTaskById: async (id) => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('tasks')\r\n        .select('*')\r\n        .eq('id', id)\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      return data;\r\n    } catch (err) {\r\n      logger.error(`Failed to fetch task ${id}`, { source: 'TasksFeature', error: err });\r\n      return null;\r\n    }\r\n  },\r\n\r\n  createTask: async (task) => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('tasks')\r\n        .insert({\r\n          ...task,\r\n          created_at: new Date().toISOString()\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      return data;\r\n    } catch (err) {\r\n      logger.error('Failed to create task', { source: 'TasksFeature', error: err });\r\n      throw err;\r\n    }\r\n  },\r\n\r\n  updateTask: async (id, updates) => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('tasks')\r\n        .update(updates)\r\n        .eq('id', id)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      return data;\r\n    } catch (err) {\r\n      logger.error(`Failed to update task ${id}`, { source: 'TasksFeature', error: err });\r\n      throw err;\r\n    }\r\n  },\r\n\r\n  completeTask: async (id) => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('tasks')\r\n        .update({\r\n          status: 'completed',\r\n          completed_at: new Date().toISOString()\r\n        })\r\n        .eq('id', id)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      return data;\r\n    } catch (err) {\r\n      logger.error(`Failed to complete task ${id}`, { source: 'TasksFeature', error: err });\r\n      throw err;\r\n    }\r\n  },\r\n\r\n  deleteTask: async (id) => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('tasks')\r\n        .delete()\r\n        .eq('id', id);\r\n\r\n      if (error) throw error;\r\n      return true;\r\n    } catch (err) {\r\n      logger.error(`Failed to delete task ${id}`, { source: 'TasksFeature', error: err });\r\n      return false;\r\n    }\r\n  }\r\n}; "
        }
    ]
}