{
    "sourceFile": "src/lib/features/documents.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1740900602082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1740900602082,
            "name": "Commit-0",
            "content": "// Documents feature implementation\r\nimport { supabase } from '../supabase';\r\nimport { logger } from '../logger';\r\n\r\nexport interface Document {\r\n  id: string;\r\n  title: string;\r\n  content: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n  user_id: string;\r\n  folder_id?: string;\r\n  tags?: string[];\r\n  status: 'draft' | 'published' | 'archived';\r\n  version: number;\r\n  file_type: 'text' | 'pdf' | 'doc' | 'image' | 'other';\r\n}\r\n\r\nexport interface DocumentFolder {\r\n  id: string;\r\n  name: string;\r\n  parent_id?: string;\r\n  user_id: string;\r\n}\r\n\r\nexport interface DocumentsFeature {\r\n  getDocuments: (folderId?: string, userId?: string) => Promise<Document[]>;\r\n  getDocument: (id: string) => Promise<Document | null>;\r\n  createDocument: (document: Omit<Document, 'id' | 'created_at' | 'updated_at' | 'version'>) => Promise<Document>;\r\n  updateDocument: (id: string, document: Partial<Document>) => Promise<Document>;\r\n  deleteDocument: (id: string) => Promise<boolean>;\r\n  getFolders: (userId: string, parentId?: string) => Promise<DocumentFolder[]>;\r\n  createFolder: (folder: Omit<DocumentFolder, 'id'>) => Promise<DocumentFolder>;\r\n  searchDocuments: (query: string, userId?: string) => Promise<Document[]>;\r\n}\r\n\r\nexport const documentsFeature: DocumentsFeature = {\r\n  getDocuments: async (folderId, userId) => {\r\n    try {\r\n      let query = supabase\r\n        .from('documents')\r\n        .select('*')\r\n        .order('updated_at', { ascending: false });\r\n\r\n      if (folderId) {\r\n        query = query.eq('folder_id', folderId);\r\n      }\r\n\r\n      if (userId) {\r\n        query = query.eq('user_id', userId);\r\n      }\r\n\r\n      const { data, error } = await query;\r\n      if (error) throw error;\r\n      \r\n      return data || [];\r\n    } catch (err) {\r\n      logger.error('Failed to fetch documents', { source: 'documentsFeature', error: err });\r\n      return [];\r\n    }\r\n  },\r\n\r\n  getDocument: async (id) => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('documents')\r\n        .select('*')\r\n        .eq('id', id)\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      return data;\r\n    } catch (err) {\r\n      logger.error('Failed to fetch document', { source: 'documentsFeature', error: err });\r\n      return null;\r\n    }\r\n  },\r\n\r\n  createDocument: async (document) => {\r\n    try {\r\n      const newDocument = {\r\n        ...document,\r\n        version: 1,\r\n      };\r\n\r\n      const { data, error } = await supabase\r\n        .from('documents')\r\n        .insert(newDocument)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      return data;\r\n    } catch (err) {\r\n      logger.error('Failed to create document', { source: 'documentsFeature', error: err });\r\n      throw new Error('Failed to create document');\r\n    }\r\n  },\r\n\r\n  updateDocument: async (id, document) => {\r\n    try {\r\n      // Increment version number\r\n      let currentVersion = 1;\r\n      if (document.version) {\r\n        currentVersion = document.version + 1;\r\n      } else {\r\n        const { data } = await supabase\r\n          .from('documents')\r\n          .select('version')\r\n          .eq('id', id)\r\n          .single();\r\n        \r\n        currentVersion = (data?.version || 0) + 1;\r\n      }\r\n\r\n      const updates = {\r\n        ...document,\r\n        version: currentVersion,\r\n        updated_at: new Date().toISOString()\r\n      };\r\n\r\n      const { data, error } = await supabase\r\n        .from('documents')\r\n        .update(updates)\r\n        .eq('id', id)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      return data;\r\n    } catch (err) {\r\n      logger.error('Failed to update document', { source: 'documentsFeature', error: err });\r\n      throw new Error('Failed to update document');\r\n    }\r\n  },\r\n\r\n  deleteDocument: async (id) => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('documents')\r\n        .delete()\r\n        .eq('id', id);\r\n\r\n      if (error) throw error;\r\n      return true;\r\n    } catch (err) {\r\n      logger.error('Failed to delete document', { source: 'documentsFeature', error: err });\r\n      return false;\r\n    }\r\n  },\r\n\r\n  getFolders: async (userId, parentId) => {\r\n    try {\r\n      let query = supabase\r\n        .from('document_folders')\r\n        .select('*')\r\n        .eq('user_id', userId);\r\n\r\n      if (parentId) {\r\n        query = query.eq('parent_id', parentId);\r\n      } else {\r\n        query = query.is('parent_id', null);\r\n      }\r\n\r\n      const { data, error } = await query;\r\n      if (error) throw error;\r\n      \r\n      return data || [];\r\n    } catch (err) {\r\n      logger.error('Failed to fetch document folders', { source: 'documentsFeature', error: err });\r\n      return [];\r\n    }\r\n  },\r\n\r\n  createFolder: async (folder) => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('document_folders')\r\n        .insert(folder)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      return data;\r\n    } catch (err) {\r\n      logger.error('Failed to create document folder', { source: 'documentsFeature', error: err });\r\n      throw new Error('Failed to create document folder');\r\n    }\r\n  },\r\n\r\n  searchDocuments: async (query, userId) => {\r\n    try {\r\n      let dbQuery = supabase\r\n        .from('documents')\r\n        .select('*')\r\n        .or(`title.ilike.%${query}%, content.ilike.%${query}%`);\r\n\r\n      if (userId) {\r\n        dbQuery = dbQuery.eq('user_id', userId);\r\n      }\r\n\r\n      const { data, error } = await dbQuery;\r\n      if (error) throw error;\r\n      \r\n      return data || [];\r\n    } catch (err) {\r\n      logger.error('Failed to search documents', { source: 'documentsFeature', error: err });\r\n      return [];\r\n    }\r\n  }\r\n}; "
        }
    ]
}