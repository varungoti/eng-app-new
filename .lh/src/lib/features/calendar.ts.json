{
    "sourceFile": "src/lib/features/calendar.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1740900575930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1740900575930,
            "name": "Commit-0",
            "content": "// Calendar feature implementation\r\nimport { supabase } from '../supabase';\r\nimport { logger } from '../logger';\r\n\r\nexport interface CalendarEvent {\r\n  id: string;\r\n  title: string;\r\n  description?: string;\r\n  start_date: string;\r\n  end_date: string;\r\n  all_day: boolean;\r\n  user_id: string;\r\n  category?: string;\r\n  location?: string;\r\n  is_recurring?: boolean;\r\n  recurrence_pattern?: string;\r\n}\r\n\r\nexport interface CalendarFeature {\r\n  getEvents: (startDate: Date, endDate: Date, userId?: string) => Promise<CalendarEvent[]>;\r\n  createEvent: (event: Omit<CalendarEvent, 'id'>) => Promise<CalendarEvent>;\r\n  updateEvent: (id: string, event: Partial<CalendarEvent>) => Promise<CalendarEvent>;\r\n  deleteEvent: (id: string) => Promise<boolean>;\r\n  getCalendarCategories: () => Promise<string[]>;\r\n}\r\n\r\nexport const calendarFeature: CalendarFeature = {\r\n  getEvents: async (startDate, endDate, userId) => {\r\n    try {\r\n      let query = supabase\r\n        .from('calendar_events')\r\n        .select('*')\r\n        .gte('start_date', startDate.toISOString())\r\n        .lte('end_date', endDate.toISOString());\r\n\r\n      if (userId) {\r\n        query = query.eq('user_id', userId);\r\n      }\r\n\r\n      const { data, error } = await query;\r\n      if (error) throw error;\r\n      \r\n      return data || [];\r\n    } catch (err) {\r\n      logger.error('Failed to fetch calendar events', { source: 'calendarFeature', error: err });\r\n      return [];\r\n    }\r\n  },\r\n\r\n  createEvent: async (event) => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('calendar_events')\r\n        .insert(event)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      return data;\r\n    } catch (err) {\r\n      logger.error('Failed to create calendar event', { source: 'calendarFeature', error: err });\r\n      throw new Error('Failed to create calendar event');\r\n    }\r\n  },\r\n\r\n  updateEvent: async (id, event) => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('calendar_events')\r\n        .update(event)\r\n        .eq('id', id)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      return data;\r\n    } catch (err) {\r\n      logger.error('Failed to update calendar event', { source: 'calendarFeature', error: err });\r\n      throw new Error('Failed to update calendar event');\r\n    }\r\n  },\r\n\r\n  deleteEvent: async (id) => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('calendar_events')\r\n        .delete()\r\n        .eq('id', id);\r\n\r\n      if (error) throw error;\r\n      return true;\r\n    } catch (err) {\r\n      logger.error('Failed to delete calendar event', { source: 'calendarFeature', error: err });\r\n      return false;\r\n    }\r\n  },\r\n\r\n  getCalendarCategories: async () => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('calendar_categories')\r\n        .select('name');\r\n\r\n      if (error) throw error;\r\n      return data?.map(category => category.name) || [];\r\n    } catch (err) {\r\n      logger.error('Failed to fetch calendar categories', { source: 'calendarFeature', error: err });\r\n      return [];\r\n    }\r\n  }\r\n}; "
        }
    ]
}