{
    "sourceFile": "src/lib/services/sales/SalesService.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1740899636828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740899654886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { supabase } from '../../supabase';\r\n import { BaseService } from '../BaseService';\r\n-import type { SalesLead, SalesActivity, SalesOpportunity } from '../../../types/sales';\r\n+import type { SalesLead, SalesActivity, SalesOpportunity , } from '../../../types/sales';\r\n \r\n export class SalesService extends BaseService {\r\n   constructor() {\r\n     super({\r\n"
                },
                {
                    "date": 1740899663032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { supabase } from '../../supabase';\r\n import { BaseService } from '../BaseService';\r\n-import type { SalesLead, SalesActivity, SalesOpportunity , } from '../../../types/sales';\r\n+import type { SalesLead, SalesActivity, SalesOpportunity , SalesContact , SalesTask, } from '../../../types/sales';\r\n \r\n export class SalesService extends BaseService {\r\n   constructor() {\r\n     super({\r\n"
                },
                {
                    "date": 1740899668710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { supabase } from '../../supabase';\r\n import { BaseService } from '../BaseService';\r\n-import type { SalesLead, SalesActivity, SalesOpportunity , SalesContact , SalesTask, } from '../../../types/sales';\r\n+import type { SalesLead, SalesActivity, SalesOpportunity , SalesContact , SalesStats, SalesTask} from '../../../types/sales';\r\n \r\n export class SalesService extends BaseService {\r\n   constructor() {\r\n     super({\r\n"
                },
                {
                    "date": 1740899673862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { supabase } from '../../supabase';\r\n import { BaseService } from '../BaseService';\r\n-import type { SalesLead, SalesActivity, SalesOpportunity , SalesContact , SalesStats, SalesTask} from '../../../types/sales';\r\n+import type { SalesLead, SalesActivity, SalesOpportunity , SalesContact , SalesStats, SalesTask, SalesStats} from '../../../types/sales';\r\n \r\n export class SalesService extends BaseService {\r\n   constructor() {\r\n     super({\r\n"
                },
                {
                    "date": 1740899681695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { supabase } from '../../supabase';\r\n import { BaseService } from '../BaseService';\r\n-import type { SalesLead, SalesActivity, SalesOpportunity , SalesContact , SalesStats, SalesTask, SalesStats} from '../../../types/sales';\r\n+import type { SalesLead, SalesActivity, SalesOpportunity , SalesContact , SalesStats, SalesTask} from '../../../types/sales';\r\n \r\n export class SalesService extends BaseService {\r\n   constructor() {\r\n     super({\r\n"
                },
                {
                    "date": 1740899692026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -158,5 +158,6 @@\n \r\n       return opportunity;\r\n     });\r\n   }\r\n+  \r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740899730159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -158,6 +158,221 @@\n \r\n       return opportunity;\r\n     });\r\n   }\r\n-  \r\n+  async getContacts(): Promise<SalesContact[]> {\r\n+    return this.executeWithRetry(\r\n+      async () => {\r\n+        const { data, error } = await supabase\r\n+          .from('sales_contacts')\r\n+          .select('*')\r\n+          .order('created_at', { ascending: false });\r\n+\r\n+        if (error) throw error;\r\n+        return data;\r\n+      },\r\n+      'sales_contacts'\r\n+    );\r\n+  }\r\n+\r\n+  async getContact(id: string): Promise<SalesContact> {\r\n+    return this.executeWithRetry(\r\n+      async () => {\r\n+        const { data, error } = await supabase\r\n+          .from('sales_contacts')\r\n+          .select('*')\r\n+          .eq('id', id)\r\n+          .single();\r\n+\r\n+        if (error) throw error;\r\n+        return data;\r\n+      },\r\n+      `sales_contact_${id}`\r\n+    );\r\n+  }\r\n+\r\n+  async createContact(contactData: Omit<SalesContact, 'id' | 'created_at'>): Promise<SalesContact> {\r\n+    return this.executeWithRetry(\r\n+      async () => {\r\n+        const { data, error } = await supabase\r\n+          .from('sales_contacts')\r\n+          .insert(contactData)\r\n+          .select()\r\n+          .single();\r\n+\r\n+        if (error) throw error;\r\n+        return data;\r\n+      }\r\n+    );\r\n+  }\r\n+\r\n+  async updateContact(id: string, contactData: Partial<SalesContact>): Promise<SalesContact> {\r\n+    return this.executeWithRetry(\r\n+      async () => {\r\n+        const { data, error } = await supabase\r\n+          .from('sales_contacts')\r\n+          .update(contactData)\r\n+          .eq('id', id)\r\n+          .select()\r\n+          .single();\r\n+\r\n+        if (error) throw error;\r\n+        return data;\r\n+      }\r\n+    );\r\n+  }\r\n+\r\n+  async getSalesStats(): Promise<SalesStats> {\r\n+    return this.executeWithRetry(\r\n+      async () => {\r\n+        const { data, error } = await supabase\r\n+          .from('sales_stats')\r\n+          .select('*')\r\n+          .single();\r\n+\r\n+        if (error) throw error;\r\n+        return data;\r\n+      },\r\n+      'sales_stats'\r\n+    );\r\n+  }\r\n+\r\n+  async getTasks(): Promise<SalesTask[]> {\r\n+    return this.executeWithRetry(\r\n+      async () => {\r\n+        const { data, error } = await supabase\r\n+          .from('sales_tasks')\r\n+          .select('*')\r\n+          .order('due_date', { ascending: true });\r\n+\r\n+        if (error) throw error;\r\n+        return data;\r\n+      },\r\n+      'sales_tasks'\r\n+    );\r\n+  }\r\n+\r\n+  async createTask(taskData: Omit<SalesTask, 'id' | 'created_at'>): Promise<SalesTask> {\r\n+    return this.executeWithRetry(\r\n+      async () => {\r\n+        const { data, error } = await supabase\r\n+          .from('sales_tasks')\r\n+          .insert(taskData)\r\n+          .select()\r\n+          .single();\r\n+\r\n+        if (error) throw error;\r\n+        return data;\r\n+      }\r\n+    );\r\n+  }\r\n+\r\n+  async updateTask(id: string, taskData: Partial<SalesTask>): Promise<SalesTask> {\r\n+    return this.executeWithRetry(\r\n+      async () => {\r\n+        const { data, error } = await supabase\r\n+          .from('sales_tasks')\r\n+          .update(taskData)\r\n+          .eq('id', id)\r\n+          .select()\r\n+          .single();\r\n+\r\n+        if (error) throw error;\r\n+        return data;\r\n+      }\r\n+    );\r\n+  }\r\n+\r\n+  async createOpportunity(opportunityData: Omit<SalesOpportunity, 'id' | 'created_at'>): Promise<SalesOpportunity> {\r\n+    return this.executeWithRetry(\r\n+      async () => {\r\n+        const { data, error } = await supabase\r\n+          .from('sales_opportunities')\r\n+          .insert(opportunityData)\r\n+          .select()\r\n+          .single();\r\n+\r\n+        if (error) throw error;\r\n+        return data;\r\n+      }\r\n+    );\r\n+  }\r\n+\r\n+  async updateOpportunity(id: string, opportunityData: Partial<SalesOpportunity>): Promise<SalesOpportunity> {\r\n+    return this.executeWithRetry(\r\n+      async () => {\r\n+        const { data, error } = await supabase\r\n+          .from('sales_opportunities')\r\n+          .update(opportunityData)\r\n+          .eq('id', id)\r\n+          .select()\r\n+          .single();\r\n+\r\n+        if (error) throw error;\r\n+        return data;\r\n+      }\r\n+    );\r\n+  }\r\n+\r\n+  async getOpportunity(id: string): Promise<SalesOpportunity> {\r\n+    return this.executeWithRetry(\r\n+      async () => {\r\n+        const { data, error } = await supabase\r\n+          .from('sales_opportunities')\r\n+          .select('*')\r\n+          .eq('id', id)\r\n+          .single();\r\n+\r\n+        if (error) throw error;\r\n+        return data;\r\n+      },\r\n+      `sales_opportunity_${id}`\r\n+    );\r\n+  }\r\n+\r\n+  async createActivity(activityData: Omit<SalesActivity, 'id' | 'created_at'>): Promise<SalesActivity> {\r\n+    return this.executeWithRetry(\r\n+      async () => {\r\n+        const { data, error } = await supabase\r\n+          .from('sales_activities')\r\n+          .insert(activityData)\r\n+          .select()\r\n+          .single();\r\n+\r\n+        if (error) throw error;\r\n+        return data;\r\n+      }\r\n+    );\r\n+  }\r\n+\r\n+  async getOpportunityActivities(opportunityId: string): Promise<SalesActivity[]> {\r\n+    return this.executeWithRetry(\r\n+      async () => {\r\n+        const { data, error } = await supabase\r\n+          .from('sales_activities')\r\n+          .select('*')\r\n+          .eq('opportunity_id', opportunityId)\r\n+          .order('created_at', { ascending: false });\r\n+\r\n+        if (error) throw error;\r\n+        return data;\r\n+      },\r\n+      `opportunity_activities_${opportunityId}`\r\n+    );\r\n+  }\r\n+\r\n+  async getContactActivities(contactId: string): Promise<SalesActivity[]> {\r\n+    return this.executeWithRetry(\r\n+      async () => {\r\n+        const { data, error } = await supabase\r\n+          .from('sales_activities')\r\n+          .select('*')\r\n+          .eq('contact_id', contactId)\r\n+          .order('created_at', { ascending: false });\r\n+\r\n+        if (error) throw error;\r\n+        return data;\r\n+      },\r\n+      `contact_activities_${contactId}`\r\n+    );\r\n+  }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740899762211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -328,23 +328,10 @@\n       `sales_opportunity_${id}`\r\n     );\r\n   }\r\n \r\n-  async createActivity(activityData: Omit<SalesActivity, 'id' | 'created_at'>): Promise<SalesActivity> {\r\n-    return this.executeWithRetry(\r\n-      async () => {\r\n-        const { data, error } = await supabase\r\n-          .from('sales_activities')\r\n-          .insert(activityData)\r\n-          .select()\r\n-          .single();\r\n+  \r\n \r\n-        if (error) throw error;\r\n-        return data;\r\n-      }\r\n-    );\r\n-  }\r\n-\r\n   async getOpportunityActivities(opportunityId: string): Promise<SalesActivity[]> {\r\n     return this.executeWithRetry(\r\n       async () => {\r\n         const { data, error } = await supabase\r\n"
                },
                {
                    "date": 1740899795760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,23 @@\n import { supabase } from '../../supabase';\r\n import { BaseService } from '../BaseService';\r\n-import type { SalesLead, SalesActivity, SalesOpportunity , SalesContact , SalesStats, SalesTask} from '../../../types/sales';\r\n+import type { SalesLead, SalesActivity, SalesOpportunity, SalesContact, SalesStats } from '../../../types/sales';\r\n \r\n+// Define the SalesTask interface locally since it's not exported from types/sales\r\n+interface SalesTask {\r\n+  id: string;\r\n+  title: string;\r\n+  description?: string;\r\n+  status: string;\r\n+  priority: string;\r\n+  due_date: string;\r\n+  assigned_to?: string;\r\n+  lead_id?: string;\r\n+  opportunity_id?: string;\r\n+  contact_id?: string;\r\n+  created_at: string;\r\n+}\r\n+\r\n export class SalesService extends BaseService {\r\n   constructor() {\r\n     super({\r\n       name: 'SalesService',\r\n"
                },
                {
                    "date": 1740899828045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { supabase } from '../../supabase';\r\n import { BaseService } from '../BaseService';\r\n-import type { SalesLead, SalesActivity, SalesOpportunity, SalesContact, SalesStats } from '../../../types/sales';\r\n+import type { SalesLead, SalesActivity, SalesOpportunity, SalesContact, SalesStats, SalesTask } from '../../../types/sales';\r\n \r\n // Define the SalesTask interface locally since it's not exported from types/sales\r\n interface SalesTask {\r\n   id: string;\r\n"
                },
                {
                    "date": 1740899840552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,22 +1,8 @@\n import { supabase } from '../../supabase';\r\n import { BaseService } from '../BaseService';\r\n import type { SalesLead, SalesActivity, SalesOpportunity, SalesContact, SalesStats, SalesTask } from '../../../types/sales';\r\n \r\n-// Define the SalesTask interface locally since it's not exported from types/sales\r\n-interface SalesTask {\r\n-  id: string;\r\n-  title: string;\r\n-  description?: string;\r\n-  status: string;\r\n-  priority: string;\r\n-  due_date: string;\r\n-  assigned_to?: string;\r\n-  lead_id?: string;\r\n-  opportunity_id?: string;\r\n-  contact_id?: string;\r\n-  created_at: string;\r\n-}\r\n \r\n export class SalesService extends BaseService {\r\n   constructor() {\r\n     super({\r\n"
                }
            ],
            "date": 1740899636828,
            "name": "Commit-0",
            "content": "import { supabase } from '../../supabase';\r\nimport { BaseService } from '../BaseService';\r\nimport type { SalesLead, SalesActivity, SalesOpportunity } from '../../../types/sales';\r\n\r\nexport class SalesService extends BaseService {\r\n  constructor() {\r\n    super({\r\n      name: 'SalesService',\r\n      retryConfig: {\r\n        maxRetries: 2,\r\n        baseDelay: 300,\r\n        maxDelay: 1000\r\n      },\r\n      cacheConfig: {\r\n        ttl: 2 * 60 * 1000 // 2 minutes\r\n      }\r\n    });\r\n  }\r\n\r\n  async getLeads(): Promise<SalesLead[]> {\r\n    return this.executeWithRetry(\r\n      async () => {\r\n        const { data, error } = await supabase\r\n          .from('sales_leads')\r\n          .select('*')\r\n          .order('created_at', { ascending: false });\r\n\r\n        if (error) throw error;\r\n        return data;\r\n      },\r\n      'sales_leads'\r\n    );\r\n  }\r\n\r\n  async getActivities(): Promise<SalesActivity[]> {\r\n    return this.executeWithRetry(\r\n      async () => {\r\n        const { data, error } = await supabase\r\n          .from('sales_activities')\r\n          .select('*')\r\n          .order('created_at', { ascending: false });\r\n\r\n        if (error) throw error;\r\n        return data;\r\n      },\r\n      'sales_activities'\r\n    );\r\n  }\r\n\r\n  async getOpportunities(): Promise<SalesOpportunity[]> {\r\n    return this.executeWithRetry(\r\n      async () => {\r\n        const { data, error } = await supabase\r\n          .from('sales_opportunities')\r\n          .select('*')\r\n          .order('created_at', { ascending: false });\r\n\r\n        if (error) throw error;\r\n        return data;\r\n      },\r\n      'sales_opportunities'\r\n    );\r\n  }\r\n\r\n  async createLead(lead: Omit<SalesLead, 'id' | 'created_at'>): Promise<SalesLead> {\r\n    return this.executeWithRetry(async () => {\r\n      const { data, error } = await supabase\r\n        .from('sales_leads')\r\n        .insert(lead)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      return data;\r\n    });\r\n  }\r\n\r\n  async updateLead(id: string, lead: Partial<SalesLead>): Promise<SalesLead> {\r\n    return this.executeWithRetry(async () => {\r\n      const { data, error } = await supabase\r\n        .from('sales_leads')\r\n        .update(lead)\r\n        .eq('id', id)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      return data;\r\n    });\r\n  }\r\n\r\n  async createActivity(activity: Omit<SalesActivity, 'id' | 'created_at'>): Promise<SalesActivity> {\r\n    return this.executeWithRetry(async () => {\r\n      const { data, error } = await supabase\r\n        .from('sales_activities')\r\n        .insert(activity)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      return data;\r\n    });\r\n  }\r\n\r\n  async getLeadById(id: string): Promise<SalesLead> {\r\n    return this.executeWithRetry(\r\n      async () => {\r\n        const { data, error } = await supabase\r\n          .from('sales_leads')\r\n          .select('*')\r\n          .eq('id', id)\r\n          .single();\r\n\r\n        if (error) throw error;\r\n        return data;\r\n      },\r\n      `sales_lead_${id}`\r\n    );\r\n  }\r\n\r\n  async getLeadActivities(leadId: string): Promise<SalesActivity[]> {\r\n    return this.executeWithRetry(\r\n      async () => {\r\n        const { data, error } = await supabase\r\n          .from('sales_activities')\r\n          .select('*')\r\n          .eq('lead_id', leadId)\r\n          .order('created_at', { ascending: false });\r\n\r\n        if (error) throw error;\r\n        return data;\r\n      },\r\n      `lead_activities_${leadId}`\r\n    );\r\n  }\r\n\r\n  async convertLeadToOpportunity(\r\n    leadId: string, \r\n    opportunityData: Omit<SalesOpportunity, 'id' | 'created_at'>\r\n  ): Promise<SalesOpportunity> {\r\n    return this.executeWithRetry(async () => {\r\n      // Create new opportunity\r\n      const { data: opportunity, error: opportunityError } = await supabase\r\n        .from('sales_opportunities')\r\n        .insert(opportunityData)\r\n        .select()\r\n        .single();\r\n\r\n      if (opportunityError) throw opportunityError;\r\n\r\n      // Update lead status to converted\r\n      const { error: updateError } = await supabase\r\n        .from('sales_leads')\r\n        .update({ status: 'converted', opportunity_id: opportunity.id })\r\n        .eq('id', leadId);\r\n\r\n      if (updateError) throw updateError;\r\n\r\n      return opportunity;\r\n    });\r\n  }\r\n}"
        }
    ]
}