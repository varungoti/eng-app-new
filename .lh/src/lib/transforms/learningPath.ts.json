{
    "sourceFile": "src/lib/transforms/learningPath.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1740853107618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740853148114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,13 @@\n   // Content complexity contribution (0-3 points)\r\n   const hasMedia = lesson.media_url ? 1 : 0;\r\n   const hasActivities = (lesson.activities?.length || 0) > 0 ? 1 : 0;\r\n   const hasPrerequisites = (lesson.prerequisites?.length || 0) > 0 ? 1 : 0;\r\n-  difficultyScore += hasMedia + hasActivities + hasPrerequisites;\r\n+  \r\n+  // Use separate increment expressions instead of compound assignment\r\n+  difficultyScore += hasMedia;\r\n+  difficultyScore += hasActivities;\r\n+  difficultyScore += hasPrerequisites;\r\n \r\n   // Duration contribution (0-2 points)\r\n   const duration = lesson.duration || 0;\r\n   if (duration > 45) difficultyScore += 2;\r\n"
                }
            ],
            "date": 1740853107618,
            "name": "Commit-0",
            "content": "import type { Topic, Subtopic, Lesson, LessonProgress, Question } from '@/types/index';\r\n\r\nconst transformQuestionsToSubLessons = (questions: Question[] = [], progress?: LessonProgress) => {\r\n  return questions.map((question, index) => {\r\n    // Transform each question into a subLesson\r\n    const subLesson = {\r\n      id: question.id,\r\n      title: `Question ${index + 1}`,\r\n      completed: progress?.completed_questions?.includes(question.id) || false,\r\n      description: question.content,\r\n      duration: question.data?.metadata?.duration,\r\n      unlocked: true, // Questions are unlocked by default\r\n      exercises: question.data?.metadata?.questions?.map((exercisePrompt: string, promptIndex: number) => ({\r\n        id: `${question.id}-prompt-${promptIndex}`,\r\n        prompt: exercisePrompt,\r\n        completed: progress?.progress_data?.answers?.[`${question.id}-prompt-${promptIndex}`] != null,\r\n        hints: question.data?.metadata?.hints,\r\n        keywords: question.data?.metadata?.keywords,\r\n        sampleAnswer: question.data?.metadata?.sampleAnswer,\r\n        transcript: question.data?.metadata?.transcript,\r\n        audioContent: question.data?.metadata?.audioContent,\r\n        translations: question.data?.metadata?.translations,\r\n        options: question.data?.metadata?.options,\r\n        correctAnswer: question.data?.metadata?.correctAnswer\r\n      })) || []\r\n    };\r\n\r\n    return subLesson;\r\n  });\r\n};\r\n\r\nconst getDifficultyLevel = (lesson: Lesson) => {\r\n  // Calculate base difficulty from question count\r\n  const questionCount = lesson.questions?.length || 0;\r\n  let difficultyScore = 0;\r\n\r\n  // Question count contribution (0-3 points)\r\n  if (questionCount > 15) difficultyScore += 3;\r\n  else if (questionCount > 10) difficultyScore += 2;\r\n  else if (questionCount > 5) difficultyScore += 1;\r\n\r\n  // Content complexity contribution (0-3 points)\r\n  const hasMedia = lesson.media_url ? 1 : 0;\r\n  const hasActivities = (lesson.activities?.length || 0) > 0 ? 1 : 0;\r\n  const hasPrerequisites = (lesson.prerequisites?.length || 0) > 0 ? 1 : 0;\r\n  difficultyScore += hasMedia + hasActivities + hasPrerequisites;\r\n\r\n  // Duration contribution (0-2 points)\r\n  const duration = lesson.duration || 0;\r\n  if (duration > 45) difficultyScore += 2;\r\n  else if (duration > 25) difficultyScore += 1;\r\n\r\n  // Map total score to difficulty level\r\n  if (difficultyScore >= 6) return 'advanced';\r\n  if (difficultyScore >= 3) return 'intermediate';\r\n  return 'beginner';\r\n};\r\n\r\nconst getColorForIndex = (index: number) => {\r\n  const colors = ['bg-blue-500', 'bg-green-500', 'bg-yellow-500', 'bg-purple-500', 'bg-pink-500', 'bg-red-500', 'bg-orange-500', 'bg-gray-500', 'bg-teal-500', 'bg-indigo-500'];\r\n  return colors[index % colors.length];\r\n};\r\n\r\nconst isLessonUnlocked = (lesson: Lesson, progress: LessonProgress[]) => {\r\n  // If no prerequisites, lesson is unlocked\r\n  if (!lesson.prerequisites?.length) return true;\r\n  \r\n  // Check if all prerequisites are completed\r\n  return lesson.prerequisites.every(prereqId => \r\n    progress.some(p => p.lesson_id === prereqId && p.status === 'completed')\r\n  );\r\n};\r\n\r\nexport const transformLearningPathData = (\r\n  topics: Topic[],\r\n  progress: LessonProgress[]\r\n) => {\r\n  return topics.flatMap((topic, topicIndex) => {\r\n    return topic.subtopics?.flatMap((subtopic, subtopicIndex) => {\r\n      return subtopic.lessons?.map((lesson, lessonIndex) => {\r\n        const lessonProgress = progress.find(p => p.lesson_id === lesson.id);\r\n        \r\n        return {\r\n          id: lesson.id,\r\n          title: lesson.title,\r\n          description: lesson.description,\r\n          duration: lesson.duration,\r\n          color: getColorForIndex(topicIndex),\r\n          unlocked: isLessonUnlocked(lesson, progress),\r\n          completed: lessonProgress?.status === 'completed',\r\n          lessonNumber: `${topicIndex + 1}.${subtopicIndex + 1}.${lessonIndex + 1}`,\r\n          totalTopics: `${lesson.questions?.length || 0}`,\r\n          difficulty: getDifficultyLevel(lesson),\r\n          subLessons: transformQuestionsToSubLessons(lesson.questions, lessonProgress)\r\n        };\r\n      });\r\n    });\r\n  }).filter(Boolean);\r\n}; "
        }
    ]
}