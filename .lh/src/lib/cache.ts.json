{
    "sourceFile": "src/lib/cache.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1738875311101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738875549519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n import { logger } from './logger';\n \n+\n+\n // Cache keys\n export const CACHE_KEYS = {\n   AI_CONTENT: 'ai:content:',\n   AI_CONVERSATION: 'ai:conversation:',\n"
                },
                {
                    "date": 1738875577912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,6 @@\n import { logger } from './logger';\n \n-\n-\n // Cache keys\n export const CACHE_KEYS = {\n   AI_CONTENT: 'ai:content:',\n   AI_CONVERSATION: 'ai:conversation:',\n"
                },
                {
                    "date": 1739013750629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,12 +203,9 @@\n         data,\n         timestamp: Date.now()\n       });\n     } catch (err) {\n-      logger.error('Failed to cache data', {\n-        context: { error: err, key },\n-        source: 'DataCache'\n-      });\n+      logger.error(`Failed to cache data for key ${key}: ${err}`, 'DataCache');\n     }\n   }\n \n   public get(key: string): any | null {\n@@ -222,12 +219,9 @@\n       }\n \n       return cached.data;\n     } catch (err) {\n-      logger.error('Failed to retrieve cached data', {\n-        context: { error: err, key },\n-        source: 'DataCache'\n-      });\n+      logger.error('Failed to retrieve cached data', 'DataCache', err, key);\n       return null;\n     }\n   }\n \n"
                },
                {
                    "date": 1739013759668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -219,9 +219,9 @@\n       }\n \n       return cached.data;\n     } catch (err) {\n-      logger.error('Failed to retrieve cached data', 'DataCache', err, key);\n+      logger.error(`Failed to retrieve cached data for key ${key}: ${err}`, 'DataCache');\n       return null;\n     }\n   }\n \n"
                },
                {
                    "date": 1739014925871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,9 +203,12 @@\n         data,\n         timestamp: Date.now()\n       });\n     } catch (err) {\n-      logger.error(`Failed to cache data for key ${key}: ${err}`, 'DataCache');\n+      logger.error('Failed to cache data', {\n+        context: { error: err, key },\n+        source: 'DataCache'\n+      });\n     }\n   }\n \n   public get(key: string): any | null {\n@@ -219,9 +222,12 @@\n       }\n \n       return cached.data;\n     } catch (err) {\n-      logger.error(`Failed to retrieve cached data for key ${key}: ${err}`, 'DataCache');\n+      logger.error('Failed to retrieve cached data', {\n+        context: { error: err, key },\n+        source: 'DataCache'\n+      });\n       return null;\n     }\n   }\n \n"
                },
                {
                    "date": 1739014972767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,12 +203,9 @@\n         data,\n         timestamp: Date.now()\n       });\n     } catch (err) {\n-      logger.error('Failed to cache data', {\n-        context: { error: err, key },\n-        source: 'DataCache'\n-      });\n+      logger.error(`Failed to cache data for key ${key}: ${err}`, 'DataCache');\n     }\n   }\n \n   public get(key: string): any | null {\n@@ -222,12 +219,9 @@\n       }\n \n       return cached.data;\n     } catch (err) {\n-      logger.error('Failed to retrieve cached data', {\n-        context: { error: err, key },\n-        source: 'DataCache'\n-      });\n+      logger.error(`Failed to retrieve cached data for key ${key}: ${err}`, 'DataCache');\n       return null;\n     }\n   }\n \n"
                },
                {
                    "date": 1739015044461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,9 +203,12 @@\n         data,\n         timestamp: Date.now()\n       });\n     } catch (err) {\n-      logger.error(`Failed to cache data for key ${key}: ${err}`, 'DataCache');\n+      logger.error('Failed to cache data', {\n+        context: { error: err, key },\n+        source: 'DataCache'\n+      });\n     }\n   }\n \n   public get(key: string): any | null {\n@@ -219,9 +222,12 @@\n       }\n \n       return cached.data;\n     } catch (err) {\n-      logger.error(`Failed to retrieve cached data for key ${key}: ${err}`, 'DataCache');\n+      logger.error('Failed to retrieve cached data', {\n+        context: { error: err, key },\n+        source: 'DataCache'\n+      });\n       return null;\n     }\n   }\n \n"
                },
                {
                    "date": 1739015239254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,12 +203,9 @@\n         data,\n         timestamp: Date.now()\n       });\n     } catch (err) {\n-      logger.error('Failed to cache data', {\n-        context: { error: err, key },\n-        source: 'DataCache'\n-      });\n+      logger.error(`Failed to cache data for key ${key}: ${err}`, 'DataCache');\n     }\n   }\n \n   public get(key: string): any | null {\n@@ -222,12 +219,9 @@\n       }\n \n       return cached.data;\n     } catch (err) {\n-      logger.error('Failed to retrieve cached data', {\n-        context: { error: err, key },\n-        source: 'DataCache'\n-      });\n+      logger.error(`Failed to retrieve cached data for key ${key}: ${err}`, 'DataCache');\n       return null;\n     }\n   }\n \n"
                }
            ],
            "date": 1738875311101,
            "name": "Commit-0",
            "content": "import { logger } from './logger';\n\n// Cache keys\nexport const CACHE_KEYS = {\n  AI_CONTENT: 'ai:content:',\n  AI_CONVERSATION: 'ai:conversation:',\n  STUDENT_PROGRESS: 'student:progress:',\n  CONTENT_ANALYTICS: 'content:analytics:',\n} as const;\n\n// Cache durations (in milliseconds)\nexport const CACHE_TTL = {\n  CONTENT: 3600000, // 1 hour\n  CONVERSATION: 1800000, // 30 minutes\n  PROGRESS: 300000, // 5 minutes\n  ANALYTICS: 900000, // 15 minutes\n} as const;\n\ninterface CacheItem<T> {\n  value: T;\n  timestamp: number;\n  ttl: number;\n}\n\nexport class LocalCache {\n  static set<T>(key: string, value: T, ttl: number): void {\n    try {\n      const item: CacheItem<T> = {\n        value,\n        timestamp: Date.now(),\n        ttl,\n      };\n      localStorage.setItem(key, JSON.stringify(item));\n    } catch (error) {\n      console.error('Cache Set Error:', error);\n    }\n  }\n\n  static get<T>(key: string): T | null {\n    try {\n      const item = localStorage.getItem(key);\n      if (!item) return null;\n\n      const parsedItem: CacheItem<T> = JSON.parse(item);\n      const now = Date.now();\n\n      if (now - parsedItem.timestamp > parsedItem.ttl) {\n        // Cache expired\n        localStorage.removeItem(key);\n        return null;\n      }\n\n      return parsedItem.value;\n    } catch (error) {\n      console.error('Cache Get Error:', error);\n      return null;\n    }\n  }\n\n  static delete(key: string): void {\n    try {\n      localStorage.removeItem(key);\n    } catch (error) {\n      console.error('Cache Delete Error:', error);\n    }\n  }\n\n  static clear(): void {\n    try {\n      localStorage.clear();\n    } catch (error) {\n      console.error('Cache Clear Error:', error);\n    }\n  }\n\n  static clearPattern(pattern: string): void {\n    try {\n      const keys = Object.keys(localStorage);\n      keys.forEach(key => {\n        if (key.includes(pattern)) {\n          localStorage.removeItem(key);\n        }\n      });\n    } catch (error) {\n      console.error('Cache Clear Pattern Error:', error);\n    }\n  }\n}\n\n// Memory cache for server-side operations (optional)\nconst memoryCache = new Map<string, CacheItem<any>>();\n\nexport class MemoryCache {\n  static set<T>(key: string, value: T, ttl: number): void {\n    try {\n      const item: CacheItem<T> = {\n        value,\n        timestamp: Date.now(),\n        ttl,\n      };\n      memoryCache.set(key, item);\n    } catch (error) {\n      console.error('Memory Cache Set Error:', error);\n    }\n  }\n\n  static get<T>(key: string): T | null {\n    try {\n      const item = memoryCache.get(key) as CacheItem<T> | undefined;\n      if (!item) return null;\n\n      const now = Date.now();\n      if (now - item.timestamp > item.ttl) {\n        // Cache expired\n        memoryCache.delete(key);\n        return null;\n      }\n\n      return item.value;\n    } catch (error) {\n      console.error('Memory Cache Get Error:', error);\n      return null;\n    }\n  }\n\n  static delete(key: string): void {\n    try {\n      memoryCache.delete(key);\n    } catch (error) {\n      console.error('Memory Cache Delete Error:', error);\n    }\n  }\n\n  static clear(): void {\n    try {\n      memoryCache.clear();\n    } catch (error) {\n      console.error('Memory Cache Clear Error:', error);\n    }\n  }\n\n  static clearPattern(pattern: string): void {\n    try {\n      for (const key of memoryCache.keys()) {\n        if (key.includes(pattern)) {\n          memoryCache.delete(key);\n        }\n      }\n    } catch (error) {\n      console.error('Memory Cache Clear Pattern Error:', error);\n    }\n  }\n}\n\n// Helper function to determine which cache to use\nexport function getCache<T>(key: string): T | null {\n  // Try localStorage first\n  const localValue = LocalCache.get<T>(key);\n  if (localValue) return localValue;\n\n  // Try memory cache as fallback\n  return MemoryCache.get<T>(key);\n}\n\nexport function setCache<T>(key: string, value: T, ttl: number): void {\n  // Set in both caches\n  LocalCache.set(key, value, ttl);\n  MemoryCache.set(key, value, ttl);\n}\n\nexport function deleteCache(key: string): void {\n  LocalCache.delete(key);\n  MemoryCache.delete(key);\n}\n\nexport function clearCache(): void {\n  LocalCache.clear();\n  MemoryCache.clear();\n}\n\nexport function clearPattern(pattern: string): void {\n  LocalCache.clearPattern(pattern);\n  MemoryCache.clearPattern(pattern);\n}\n\nclass DataCache {\n  private static instance: DataCache;\n  private cache: Map<string, { data: any; timestamp: number }> = new Map();\n  private readonly TTL = 5 * 60 * 1000; // 5 minutes\n\n  private constructor() {}\n\n  public static getInstance(): DataCache {\n    if (!DataCache.instance) {\n      DataCache.instance = new DataCache();\n    }\n    return DataCache.instance;\n  }\n\n  public set(key: string, data: any): void {\n    try {\n      this.cache.set(key, {\n        data,\n        timestamp: Date.now()\n      });\n    } catch (err) {\n      logger.error('Failed to cache data', {\n        context: { error: err, key },\n        source: 'DataCache'\n      });\n    }\n  }\n\n  public get(key: string): any | null {\n    try {\n      const cached = this.cache.get(key);\n      if (!cached) return null;\n\n      if (Date.now() - cached.timestamp > this.TTL) {\n        this.cache.delete(key);\n        return null;\n      }\n\n      return cached.data;\n    } catch (err) {\n      logger.error('Failed to retrieve cached data', {\n        context: { error: err, key },\n        source: 'DataCache'\n      });\n      return null;\n    }\n  }\n\n  public has(key: string): boolean {\n    return this.cache.has(key);\n  }\n\n  public clear(): void {\n    this.cache.clear();\n  }\n\n  public prune(): void {\n    const now = Date.now();\n    for (const [key, value] of this.cache.entries()) {\n      if (now - value.timestamp > this.TTL) {\n        this.cache.delete(key);\n      }\n    }\n  }\n}\n\nexport { DataCache };"
        }
    ]
}