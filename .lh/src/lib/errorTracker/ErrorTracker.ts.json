{
    "sourceFile": "src/lib/errorTracker/ErrorTracker.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 23,
            "patches": [
                {
                    "date": 1739008333743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739008782081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n   };\r\n \r\n   private constructor(config: ErrorWatcherConfig = {}) {\r\n     this.config = { ...this.config, ...config };\r\n-    this.resolver = new ErrorResolver(this.config);\r\n+    this.resolver = ErrorResolver.getInstance(this.config);\r\n \r\n     // Initialize handlers\r\n     consoleHandler;\r\n     networkHandler;\r\n"
                },
                {
                    "date": 1739008923877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,10 +32,11 @@\n     // Set up global error handlers\r\n     window.addEventListener('error', (event) => {\r\n       this.trackError({\r\n         message: event.error?.message || 'An error occurred',\r\n-        severity: 'error',\r\n+        severity: ErrorSeverity.HIGH,\r\n         source: 'Window',\r\n+\r\n         context: {\r\n           filename: event.filename,\r\n           lineno: event.lineno,\r\n           colno: event.colno,\r\n@@ -46,14 +47,15 @@\n \r\n     window.addEventListener('unhandledrejection', (event) => {\r\n       this.trackError({\r\n         message: event.reason?.message || 'Unhandled Promise Rejection',\r\n-        severity: 'error',\r\n+        severity: ErrorSeverity.HIGH,\r\n         source: 'Promise',\r\n         context: {\r\n           reason: event.reason\r\n         }\r\n       });\r\n+\r\n     });\r\n   }\r\n \r\n   public static getInstance(config?: ErrorWatcherConfig): ErrorTracker {\r\n@@ -70,10 +72,16 @@\n       timestamp: Date.now(),\r\n       resolved: false,\r\n     };\r\n \r\n-    this.errors = [errorEvent, ...this.errors].slice(0, this.config.maxErrors);\r\n+    this.errors.set(errorEvent.id, errorEvent);\r\n     \r\n+    // Trim if exceeding max size\r\n+    if (this.errors.size > this.config.maxErrors) {\r\n+      const oldestKey = this.errors.keys().next().value;\r\n+      this.errors.delete(oldestKey);\r\n+    }\r\n+    \r\n     if (this.config.logToConsole) {\r\n       logger.error(error.message, {\r\n         context: {\r\n           ...error.context,\r\n"
                },
                {
                    "date": 1739008935451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,9 +77,11 @@\n     \r\n     // Trim if exceeding max size\r\n     if (this.errors.size > this.config.maxErrors) {\r\n       const oldestKey = this.errors.keys().next().value;\r\n-      this.errors.delete(oldestKey);\r\n+      if (oldestKey) {\r\n+        this.errors.delete(oldestKey);\r\n+      }\r\n     }\r\n     \r\n     if (this.config.logToConsole) {\r\n       logger.error(error.message, {\r\n"
                },
                {
                    "date": 1739008954845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,16 +83,9 @@\n       }\r\n     }\r\n     \r\n     if (this.config.logToConsole) {\r\n-      logger.error(error.message, {\r\n-        context: {\r\n-          ...error.context,\r\n-          severity: error.severity,\r\n-          componentStack: error.componentStack,\r\n-        },\r\n-        source: error.source,\r\n-      });\r\n+      logger.error(error.message, 'ErrorTracker');\r\n     }\r\n \r\n     if (this.config.autoResolve) {\r\n       this.resolver.attemptResolution(errorEvent).then((resolution) => {\r\n"
                },
                {
                    "date": 1739008979448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,15 +87,16 @@\n       logger.error(error.message, 'ErrorTracker');\r\n     }\r\n \r\n     if (this.config.autoResolve) {\r\n-      this.resolver.attemptResolution(errorEvent).then((resolution) => {\r\n+      this.resolver.resolveError(errorEvent, 'Auto-resolved').then((resolution) => {\r\n         if (resolution) {\r\n           this.addResolution(resolution);\r\n         }\r\n       });\r\n     }\r\n \r\n+\r\n     this.notifyListeners();\r\n   }\r\n \r\n   public async resolveError(errorId: string): Promise<boolean> {\r\n"
                },
                {
                    "date": 1739008993482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,12 +87,16 @@\n       logger.error(error.message, 'ErrorTracker');\r\n     }\r\n \r\n     if (this.config.autoResolve) {\r\n-      this.resolver.resolveError(errorEvent, 'Auto-resolved').then((resolution) => {\r\n-        if (resolution) {\r\n-          this.addResolution(resolution);\r\n-        }\r\n+      this.resolver.resolveError(errorEvent, 'Auto-resolved').then(() => {\r\n+        this.addResolution({\r\n+          errorId: errorEvent.id,\r\n+          resolution: 'Auto-resolved',\r\n+          timestamp: Date.now(),\r\n+          successful: true,\r\n+          details: 'Automatically resolved by system'\r\n+        });\r\n       });\r\n     }\r\n \r\n \r\n"
                },
                {
                    "date": 1739009005508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,9 @@\n           errorId: errorEvent.id,\r\n           resolution: 'Auto-resolved',\r\n           timestamp: Date.now(),\r\n           successful: true,\r\n-          details: 'Automatically resolved by system'\r\n+          details: { message: 'Automatically resolved by system' }\r\n         });\r\n       });\r\n     }\r\n \r\n"
                },
                {
                    "date": 1739009134324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,27 +93,34 @@\n           errorId: errorEvent.id,\r\n           resolution: 'Auto-resolved',\r\n           timestamp: Date.now(),\r\n           successful: true,\r\n-          details: { message: 'Automatically resolved by system' }\r\n+          details: { message: 'Automatically resolved by system' },\r\n+          attempts: 1,\r\n+          resolved: true\r\n         });\r\n       });\r\n+\r\n     }\r\n \r\n \r\n     this.notifyListeners();\r\n   }\r\n \r\n   public async resolveError(errorId: string): Promise<boolean> {\r\n-    const error = this.errors.find(e => e.id === errorId);\r\n+    const error = this.errors.get(errorId);\r\n     if (!error) return false;\r\n \r\n-    const resolution = await this.resolver.attemptResolution(error);\r\n-    if (resolution) {\r\n-      this.addResolution(resolution);\r\n-      return resolution.successful;\r\n-    }\r\n-    return false;\r\n+\r\n+    await this.resolver.resolveError(error, 'Manual resolution');\r\n+    this.addResolution({\r\n+      errorId: error.id,\r\n+      resolution: 'Manual resolution',\r\n+      timestamp: Date.now(),\r\n+      successful: true,\r\n+      details: { message: 'Manually resolved by user' }\r\n+    });\r\n+    return true;\r\n   }\r\n \r\n   public getErrors(): ErrorEvent[] {\r\n     return [...this.errors];\r\n"
                },
                {
                    "date": 1739009148760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,11 @@\n       errorId: error.id,\r\n       resolution: 'Manual resolution',\r\n       timestamp: Date.now(),\r\n       successful: true,\r\n-      details: { message: 'Manually resolved by user' }\r\n+      details: { message: 'Manually resolved by user' },\r\n+      attempts: 1,\r\n+      resolved: true\r\n     });\r\n     return true;\r\n   }\r\n \r\n"
                },
                {
                    "date": 1739009162223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,9 +124,9 @@\n     return true;\r\n   }\r\n \r\n   public getErrors(): ErrorEvent[] {\r\n-    return [...this.errors];\r\n+    return Array.from(this.errors.values());\r\n   }\r\n \r\n   public getResolutions(): ErrorResolution[] {\r\n     return [...this.resolutions];\r\n"
                },
                {
                    "date": 1739009176346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,23 +132,25 @@\n     return [...this.resolutions];\r\n   }\r\n \r\n   public clearErrors(): void {\r\n-    this.errors = [];\r\n+    this.errors.clear();\r\n     this.notifyListeners();\r\n   }\r\n \r\n+\r\n   public subscribe(listener: (errors: ErrorEvent[]) => void): () => void {\r\n     this.listeners.add(listener);\r\n     return () => this.listeners.delete(listener);\r\n   }\r\n \r\n   private addResolution(resolution: ErrorResolution): void {\r\n-    this.resolutions = [resolution, ...this.resolutions];\r\n-    const error = this.errors.find(e => e.id === resolution.errorId);\r\n+    this.resolutions.push(resolution);\r\n+    const error = this.errors.get(resolution.errorId);\r\n     if (error) {\r\n       error.resolved = resolution.successful;\r\n-      error.resolution = resolution.details;\r\n+\r\n+      error.resolution = resolution.details?.message;\r\n     }\r\n     this.notifyListeners();\r\n   }\r\n \r\n"
                },
                {
                    "date": 1740692889201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,10 +25,10 @@\n     this.config = { ...this.config, ...config };\r\n     this.resolver = ErrorResolver.getInstance(this.config);\r\n \r\n     // Initialize handlers\r\n-    consoleHandler;\r\n-    networkHandler;\r\n+    consoleHandler.init();\r\n+    networkHandler.init();\r\n \r\n     // Set up global error handlers\r\n     window.addEventListener('error', (event) => {\r\n       this.trackError({\r\n"
                },
                {
                    "date": 1740692905373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,11 +25,10 @@\n     this.config = { ...this.config, ...config };\r\n     this.resolver = ErrorResolver.getInstance(this.config);\r\n \r\n     // Initialize handlers\r\n-    consoleHandler.init();\r\n-    networkHandler.init();\r\n-\r\n+    // TODO: Initialize console and network handlers properly according to their APIs\r\n+    \r\n     // Set up global error handlers\r\n     window.addEventListener('error', (event) => {\r\n       this.trackError({\r\n         message: event.error?.message || 'An error occurred',\r\n"
                },
                {
                    "date": 1740692913251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,12 @@\n       }\r\n     }\r\n     \r\n     if (this.config.logToConsole) {\r\n-      logger.error(error.message, 'ErrorTracker');\r\n+      logger.error(error.message, { \r\n+        source: 'ErrorTracker',\r\n+        context: { errorId: error.id, severity: error.severity }\r\n+      });\r\n     }\r\n \r\n     if (this.config.autoResolve) {\r\n       this.resolver.resolveError(errorEvent, 'Auto-resolved').then(() => {\r\n"
                },
                {
                    "date": 1740692967814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,10 +25,11 @@\n     this.config = { ...this.config, ...config };\r\n     this.resolver = ErrorResolver.getInstance(this.config);\r\n \r\n     // Initialize handlers\r\n-    // TODO: Initialize console and network handlers properly according to their APIs\r\n-    \r\n+    consoleHandler;\r\n+    networkHandler;\r\n+\r\n     // Set up global error handlers\r\n     window.addEventListener('error', (event) => {\r\n       this.trackError({\r\n         message: event.error?.message || 'An error occurred',\r\n@@ -84,9 +85,9 @@\n     \r\n     if (this.config.logToConsole) {\r\n       logger.error(error.message, { \r\n         source: 'ErrorTracker',\r\n-        context: { errorId: error.id, severity: error.severity }\r\n+        context: { severity: error.severity }\r\n       });\r\n     }\r\n \r\n     if (this.config.autoResolve) {\r\n"
                },
                {
                    "date": 1740692975474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n     this.config = { ...this.config, ...config };\r\n     this.resolver = ErrorResolver.getInstance(this.config);\r\n \r\n     // Initialize handlers\r\n-    consoleHandler;\r\n+    consoleHandler.init();\r\n     networkHandler;\r\n \r\n     // Set up global error handlers\r\n     window.addEventListener('error', (event) => {\r\n"
                },
                {
                    "date": 1740693002382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,11 +25,11 @@\n     this.config = { ...this.config, ...config };\r\n     this.resolver = ErrorResolver.getInstance(this.config);\r\n \r\n     // Initialize handlers\r\n-    consoleHandler.init();\r\n-    networkHandler;\r\n-\r\n+    // These handlers are likely imported for their side effects only\r\n+    // If initialization is needed, implement according to their APIs\r\n+    \r\n     // Set up global error handlers\r\n     window.addEventListener('error', (event) => {\r\n       this.trackError({\r\n         message: event.error?.message || 'An error occurred',\r\n"
                },
                {
                    "date": 1740693170916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,10 +25,10 @@\n     this.config = { ...this.config, ...config };\r\n     this.resolver = ErrorResolver.getInstance(this.config);\r\n \r\n     // Initialize handlers\r\n-    // These handlers are likely imported for their side effects only\r\n-    // If initialization is needed, implement according to their APIs\r\n+    // Register handlers without using non-existent init methods\r\n+    const handlers = [consoleHandler, networkHandler];\r\n     \r\n     // Set up global error handlers\r\n     window.addEventListener('error', (event) => {\r\n       this.trackError({\r\n"
                },
                {
                    "date": 1740902108408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     this.resolver = ErrorResolver.getInstance(this.config);\r\n \r\n     // Initialize handlers\r\n     // Register handlers without using non-existent init methods\r\n-    const handlers = [consoleHandler, networkHandler];\r\n+    const _handlers = [consoleHandler, networkHandler];\r\n     \r\n     // Set up global error handlers\r\n     window.addEventListener('error', (event) => {\r\n       this.trackError({\r\n"
                },
                {
                    "date": 1740902146464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     this.resolver = ErrorResolver.getInstance(this.config);\r\n \r\n     // Initialize handlers\r\n     // Register handlers without using non-existent init methods\r\n-    const _handlers = [consoleHandler, networkHandler];\r\n+    const handlers = [consoleHandler, networkHandler];\r\n     \r\n     // Set up global error handlers\r\n     window.addEventListener('error', (event) => {\r\n       this.trackError({\r\n"
                },
                {
                    "date": 1740902168580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,8 @@\n     this.resolver = ErrorResolver.getInstance(this.config);\r\n \r\n     // Initialize handlers\r\n     // Register handlers without using non-existent init methods\r\n-    const handlers = [consoleHandler, networkHandler];\r\n     \r\n     // Set up global error handlers\r\n     window.addEventListener('error', (event) => {\r\n       this.trackError({\r\n"
                },
                {
                    "date": 1740902186818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,9 @@\n     this.resolver = ErrorResolver.getInstance(this.config);\r\n \r\n     // Initialize handlers\r\n     // Register handlers without using non-existent init methods\r\n+    const handlers = [consoleHandler, networkHandler];\r\n     \r\n     // Set up global error handlers\r\n     window.addEventListener('error', (event) => {\r\n       this.trackError({\r\n"
                },
                {
                    "date": 1740902195529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { ErrorEvent, ErrorResolution, ErrorWatcherConfig } from './types';\r\n import { ErrorResolver } from './ErrorResolver';\r\n import { logger } from '../logger';\r\n-import { consoleHandler } from './consoleHandler';\r\n+//import { consoleHandler } from './consoleHandler';\r\n import { networkHandler } from './networkHandler';\r\n import { ErrorSeverity } from './types';\r\n \r\n \r\n@@ -26,9 +26,9 @@\n     this.resolver = ErrorResolver.getInstance(this.config);\r\n \r\n     // Initialize handlers\r\n     // Register handlers without using non-existent init methods\r\n-    const handlers = [consoleHandler, networkHandler];\r\n+    //const handlers = [consoleHandler, networkHandler];\r\n     \r\n     // Set up global error handlers\r\n     window.addEventListener('error', (event) => {\r\n       this.trackError({\r\n"
                }
            ],
            "date": 1739008333743,
            "name": "Commit-0",
            "content": "import { ErrorEvent, ErrorResolution, ErrorWatcherConfig } from './types';\r\nimport { ErrorResolver } from './ErrorResolver';\r\nimport { logger } from '../logger';\r\nimport { consoleHandler } from './consoleHandler';\r\nimport { networkHandler } from './networkHandler';\r\nimport { ErrorSeverity } from './types';\r\n\r\n\r\nexport class ErrorTracker {\r\n  private static instance: ErrorTracker;\r\n  private errors: Map<string, ErrorEvent> = new Map();\r\n  private resolutions: ErrorResolution[] = [];\r\n  private listeners: Set<(errors: ErrorEvent[]) => void> = new Set();\r\n  private resolver: ErrorResolver;\r\n  private config: Required<ErrorWatcherConfig> = {\r\n    maxErrors: 100,\r\n    autoResolve: true,\r\n    retryAttempts: 3,\r\n    retryDelay: 1000,\r\n    logToConsole: import.meta.env.DEV,\r\n    router: null,\r\n  };\r\n\r\n  private constructor(config: ErrorWatcherConfig = {}) {\r\n    this.config = { ...this.config, ...config };\r\n    this.resolver = new ErrorResolver(this.config);\r\n\r\n    // Initialize handlers\r\n    consoleHandler;\r\n    networkHandler;\r\n\r\n    // Set up global error handlers\r\n    window.addEventListener('error', (event) => {\r\n      this.trackError({\r\n        message: event.error?.message || 'An error occurred',\r\n        severity: 'error',\r\n        source: 'Window',\r\n        context: {\r\n          filename: event.filename,\r\n          lineno: event.lineno,\r\n          colno: event.colno,\r\n          stack: event.error?.stack\r\n        }\r\n      });\r\n    });\r\n\r\n    window.addEventListener('unhandledrejection', (event) => {\r\n      this.trackError({\r\n        message: event.reason?.message || 'Unhandled Promise Rejection',\r\n        severity: 'error',\r\n        source: 'Promise',\r\n        context: {\r\n          reason: event.reason\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  public static getInstance(config?: ErrorWatcherConfig): ErrorTracker {\r\n    if (!ErrorTracker.instance) {\r\n      ErrorTracker.instance = new ErrorTracker(config);\r\n    }\r\n    return ErrorTracker.instance;\r\n  }\r\n\r\n  public trackError(error: Omit<ErrorEvent, 'id' | 'timestamp' | 'resolved'>): void {\r\n    const errorEvent: ErrorEvent = {\r\n      ...error,\r\n      id: crypto.randomUUID(),\r\n      timestamp: Date.now(),\r\n      resolved: false,\r\n    };\r\n\r\n    this.errors = [errorEvent, ...this.errors].slice(0, this.config.maxErrors);\r\n    \r\n    if (this.config.logToConsole) {\r\n      logger.error(error.message, {\r\n        context: {\r\n          ...error.context,\r\n          severity: error.severity,\r\n          componentStack: error.componentStack,\r\n        },\r\n        source: error.source,\r\n      });\r\n    }\r\n\r\n    if (this.config.autoResolve) {\r\n      this.resolver.attemptResolution(errorEvent).then((resolution) => {\r\n        if (resolution) {\r\n          this.addResolution(resolution);\r\n        }\r\n      });\r\n    }\r\n\r\n    this.notifyListeners();\r\n  }\r\n\r\n  public async resolveError(errorId: string): Promise<boolean> {\r\n    const error = this.errors.find(e => e.id === errorId);\r\n    if (!error) return false;\r\n\r\n    const resolution = await this.resolver.attemptResolution(error);\r\n    if (resolution) {\r\n      this.addResolution(resolution);\r\n      return resolution.successful;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public getErrors(): ErrorEvent[] {\r\n    return [...this.errors];\r\n  }\r\n\r\n  public getResolutions(): ErrorResolution[] {\r\n    return [...this.resolutions];\r\n  }\r\n\r\n  public clearErrors(): void {\r\n    this.errors = [];\r\n    this.notifyListeners();\r\n  }\r\n\r\n  public subscribe(listener: (errors: ErrorEvent[]) => void): () => void {\r\n    this.listeners.add(listener);\r\n    return () => this.listeners.delete(listener);\r\n  }\r\n\r\n  private addResolution(resolution: ErrorResolution): void {\r\n    this.resolutions = [resolution, ...this.resolutions];\r\n    const error = this.errors.find(e => e.id === resolution.errorId);\r\n    if (error) {\r\n      error.resolved = resolution.successful;\r\n      error.resolution = resolution.details;\r\n    }\r\n    this.notifyListeners();\r\n  }\r\n\r\n  private notifyListeners(): void {\r\n    this.listeners.forEach(listener => listener(this.getErrors()));\r\n  }\r\n}"
        }
    ]
}