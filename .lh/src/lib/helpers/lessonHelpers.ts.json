{
    "sourceFile": "src/lib/helpers/lessonHelpers.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1740900405031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740900441022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { LessonProgress, DbLesson } from \"@/types\";\r\n+import { LessonProgress, Lesson } from \"@/types\";\r\n \r\n import { CustomLesson } from \"@/types\";\r\n \r\n export const getColorForIndex = (index: number): string => {\r\n@@ -13,19 +13,19 @@\n   return colors[index % colors.length];\r\n };\r\n \r\n export const isLessonUnlocked = (\r\n-  lesson: DbLesson, \r\n+  lesson: Lesson, \r\n   progress: LessonProgress[]\r\n ): boolean => {\r\n   if (!lesson.prerequisites?.length) return true;\r\n-  return lesson.prerequisites.every(prereqId => \r\n+  return lesson.prerequisites.every((prereqId: string) => \r\n     progress.some(p => p.lesson_id === prereqId && p.status === 'completed')\r\n   );\r\n };\r\n \r\n export const transformLessonData = (\r\n-  lesson: DbLesson,\r\n+  lesson: Lesson,\r\n   index: number,\r\n   progress?: LessonProgress,\r\n   selectedGrade?: string,\r\n   selectedTopic?: string, \r\n@@ -33,26 +33,26 @@\n ): CustomLesson => {\r\n   // Filter based on selected grade/topic/subtopic hierarchy\r\n   const filteredLesson = {\r\n     ...lesson,\r\n-    topics: lesson.topics?.filter(topic => \r\n+    topics: lesson.topics?.filter((topic: any) => \r\n       !selectedGrade || topic.grade_id === selectedGrade\r\n     ),\r\n-    subtopics: lesson.subtopics?.filter(subtopic =>\r\n+    subtopics: lesson.subtopics?.filter((subtopic: any) =>\r\n       (!selectedTopic || subtopic.topic_id === selectedTopic) &&\r\n       (!selectedGrade || subtopic.grade_id === selectedGrade)\r\n     ),\r\n-    content: lesson.content?.filter(content =>\r\n+    content: lesson.content?.filter((content: any) =>\r\n       (!selectedSubtopic || content.subtopic_id === selectedSubtopic) &&\r\n       (!selectedTopic || content.topic_id === selectedTopic) &&\r\n       (!selectedGrade || content.grade_id === selectedGrade)\r\n     ),\r\n-    questions: lesson.questions?.filter(question =>\r\n+    questions: lesson.questions?.filter((question: any) =>\r\n       (!selectedSubtopic || question.subtopic_id === selectedSubtopic) &&\r\n       (!selectedTopic || question.topic_id === selectedTopic) &&\r\n       (!selectedGrade || question.grade_id === selectedGrade)\r\n     ),\r\n-    activities: lesson.activities?.filter(activity =>\r\n+    activities: lesson.activities?.filter((activity: any) =>\r\n       (!selectedSubtopic || activity.subtopic_id === selectedSubtopic) &&\r\n       (!selectedTopic || activity.topic_id === selectedTopic) &&\r\n       (!selectedGrade || activity.grade_id === selectedGrade)\r\n     )\r\n@@ -68,9 +68,9 @@\n     lessonNumber: `${index + 1}`,\r\n     totalTopics: String(filteredLesson.topics?.length || 0),\r\n     difficulty: filteredLesson.difficulty || 'beginner', \r\n     duration: filteredLesson.duration || 30,\r\n-    customSubLessons: filteredLesson.questions?.map(question => ({\r\n+    customSubLessons: filteredLesson.questions?.map((question: any) => ({\r\n       id: String(question.id),\r\n       title: question.title,\r\n       description: question.description || '',\r\n       duration: question.duration || 30,\r\n"
                },
                {
                    "date": 1740900463542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,49 @@\n-import { LessonProgress, Lesson } from \"@/types\";\r\n-\r\n+import { LessonProgress } from \"@/types\";\r\n import { CustomLesson } from \"@/types\";\r\n \r\n+// Define the interface to match the structure used in the code\r\n+interface DbLesson {\r\n+  id: string | number;\r\n+  title: string;\r\n+  status: string;\r\n+  difficulty?: string;\r\n+  duration?: number;\r\n+  prerequisites?: string[];\r\n+  topics?: Array<{\r\n+    grade_id: string;\r\n+    [key: string]: any;\r\n+  }>;\r\n+  subtopics?: Array<{\r\n+    topic_id: string;\r\n+    grade_id: string;\r\n+    [key: string]: any;\r\n+  }>;\r\n+  content?: Array<{\r\n+    subtopic_id: string;\r\n+    topic_id: string;\r\n+    grade_id: string;\r\n+    [key: string]: any;\r\n+  }>;\r\n+  questions?: Array<{\r\n+    id: string | number;\r\n+    title: string;\r\n+    description?: string;\r\n+    duration?: number;\r\n+    subtopic_id: string;\r\n+    topic_id: string;\r\n+    grade_id: string;\r\n+    exercise_prompts?: string[];\r\n+    [key: string]: any;\r\n+  }>;\r\n+  activities?: Array<{\r\n+    subtopic_id: string;\r\n+    topic_id: string;\r\n+    grade_id: string;\r\n+    [key: string]: any;\r\n+  }>;\r\n+}\r\n+\r\n export const getColorForIndex = (index: number): string => {\r\n   const colors = [\r\n     'bg-blue-500',\r\n     'bg-green-500',\r\n@@ -13,9 +54,9 @@\n   return colors[index % colors.length];\r\n };\r\n \r\n export const isLessonUnlocked = (\r\n-  lesson: Lesson, \r\n+  lesson: DbLesson, \r\n   progress: LessonProgress[]\r\n ): boolean => {\r\n   if (!lesson.prerequisites?.length) return true;\r\n   return lesson.prerequisites.every((prereqId: string) => \r\n@@ -23,9 +64,9 @@\n   );\r\n };\r\n \r\n export const transformLessonData = (\r\n-  lesson: Lesson,\r\n+  lesson: DbLesson,\r\n   index: number,\r\n   progress?: LessonProgress,\r\n   selectedGrade?: string,\r\n   selectedTopic?: string, \r\n@@ -33,26 +74,26 @@\n ): CustomLesson => {\r\n   // Filter based on selected grade/topic/subtopic hierarchy\r\n   const filteredLesson = {\r\n     ...lesson,\r\n-    topics: lesson.topics?.filter((topic: any) => \r\n+    topics: lesson.topics?.filter(topic => \r\n       !selectedGrade || topic.grade_id === selectedGrade\r\n     ),\r\n-    subtopics: lesson.subtopics?.filter((subtopic: any) =>\r\n+    subtopics: lesson.subtopics?.filter(subtopic =>\r\n       (!selectedTopic || subtopic.topic_id === selectedTopic) &&\r\n       (!selectedGrade || subtopic.grade_id === selectedGrade)\r\n     ),\r\n-    content: lesson.content?.filter((content: any) =>\r\n+    content: lesson.content?.filter(content =>\r\n       (!selectedSubtopic || content.subtopic_id === selectedSubtopic) &&\r\n       (!selectedTopic || content.topic_id === selectedTopic) &&\r\n       (!selectedGrade || content.grade_id === selectedGrade)\r\n     ),\r\n-    questions: lesson.questions?.filter((question: any) =>\r\n+    questions: lesson.questions?.filter(question =>\r\n       (!selectedSubtopic || question.subtopic_id === selectedSubtopic) &&\r\n       (!selectedTopic || question.topic_id === selectedTopic) &&\r\n       (!selectedGrade || question.grade_id === selectedGrade)\r\n     ),\r\n-    activities: lesson.activities?.filter((activity: any) =>\r\n+    activities: lesson.activities?.filter(activity =>\r\n       (!selectedSubtopic || activity.subtopic_id === selectedSubtopic) &&\r\n       (!selectedTopic || activity.topic_id === selectedTopic) &&\r\n       (!selectedGrade || activity.grade_id === selectedGrade)\r\n     )\r\n@@ -68,9 +109,9 @@\n     lessonNumber: `${index + 1}`,\r\n     totalTopics: String(filteredLesson.topics?.length || 0),\r\n     difficulty: filteredLesson.difficulty || 'beginner', \r\n     duration: filteredLesson.duration || 30,\r\n-    customSubLessons: filteredLesson.questions?.map((question: any) => ({\r\n+    customSubLessons: filteredLesson.questions?.map(question => ({\r\n       id: String(question.id),\r\n       title: question.title,\r\n       description: question.description || '',\r\n       duration: question.duration || 30,\r\n"
                }
            ],
            "date": 1740900405031,
            "name": "Commit-0",
            "content": "import { LessonProgress, DbLesson } from \"@/types\";\r\n\r\nimport { CustomLesson } from \"@/types\";\r\n\r\nexport const getColorForIndex = (index: number): string => {\r\n  const colors = [\r\n    'bg-blue-500',\r\n    'bg-green-500',\r\n    'bg-purple-500',\r\n    'bg-orange-500',\r\n    'bg-pink-500'\r\n  ];\r\n  return colors[index % colors.length];\r\n};\r\n\r\nexport const isLessonUnlocked = (\r\n  lesson: DbLesson, \r\n  progress: LessonProgress[]\r\n): boolean => {\r\n  if (!lesson.prerequisites?.length) return true;\r\n  return lesson.prerequisites.every(prereqId => \r\n    progress.some(p => p.lesson_id === prereqId && p.status === 'completed')\r\n  );\r\n};\r\n\r\nexport const transformLessonData = (\r\n  lesson: DbLesson,\r\n  index: number,\r\n  progress?: LessonProgress,\r\n  selectedGrade?: string,\r\n  selectedTopic?: string, \r\n  selectedSubtopic?: string\r\n): CustomLesson => {\r\n  // Filter based on selected grade/topic/subtopic hierarchy\r\n  const filteredLesson = {\r\n    ...lesson,\r\n    topics: lesson.topics?.filter(topic => \r\n      !selectedGrade || topic.grade_id === selectedGrade\r\n    ),\r\n    subtopics: lesson.subtopics?.filter(subtopic =>\r\n      (!selectedTopic || subtopic.topic_id === selectedTopic) &&\r\n      (!selectedGrade || subtopic.grade_id === selectedGrade)\r\n    ),\r\n    content: lesson.content?.filter(content =>\r\n      (!selectedSubtopic || content.subtopic_id === selectedSubtopic) &&\r\n      (!selectedTopic || content.topic_id === selectedTopic) &&\r\n      (!selectedGrade || content.grade_id === selectedGrade)\r\n    ),\r\n    questions: lesson.questions?.filter(question =>\r\n      (!selectedSubtopic || question.subtopic_id === selectedSubtopic) &&\r\n      (!selectedTopic || question.topic_id === selectedTopic) &&\r\n      (!selectedGrade || question.grade_id === selectedGrade)\r\n    ),\r\n    activities: lesson.activities?.filter(activity =>\r\n      (!selectedSubtopic || activity.subtopic_id === selectedSubtopic) &&\r\n      (!selectedTopic || activity.topic_id === selectedTopic) &&\r\n      (!selectedGrade || activity.grade_id === selectedGrade)\r\n    )\r\n  };\r\n\r\n  return {\r\n    id: String(filteredLesson.id),\r\n    title: filteredLesson.title,\r\n    status: filteredLesson.status as 'draft' | 'published',\r\n    color: getColorForIndex(index),\r\n    unlocked: isLessonUnlocked(filteredLesson, progress ? [progress] : []),\r\n    completed: progress?.status === 'completed',\r\n    lessonNumber: `${index + 1}`,\r\n    totalTopics: String(filteredLesson.topics?.length || 0),\r\n    difficulty: filteredLesson.difficulty || 'beginner', \r\n    duration: filteredLesson.duration || 30,\r\n    customSubLessons: filteredLesson.questions?.map(question => ({\r\n      id: String(question.id),\r\n      title: question.title,\r\n      description: question.description || '',\r\n      duration: question.duration || 30,\r\n      unlocked: isLessonUnlocked(filteredLesson, progress ? [progress] : []),\r\n      completed: progress?.status === 'completed',\r\n      exercisePrompts: question.exercise_prompts || []\r\n    })) || []\r\n  };\r\n};"
        }
    ]
}