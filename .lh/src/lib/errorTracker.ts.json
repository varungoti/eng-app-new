{
    "sourceFile": "src/lib/errorTracker.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1740899206738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740899234972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import { debounce } from './utils';\r\n+import { logger } from './logger';\r\n \r\n export type ErrorSeverity = 'error' | 'warning' | 'info';\r\n \r\n export interface ErrorEvent {\r\n@@ -74,15 +75,13 @@\n     this.notifyListeners();\r\n \r\n     // Log to console in development\r\n     if (import.meta.env.DEV) {\r\n-      console.warn(`ðŸ”´ Error Tracked: ${error.source}`);\r\n-      console.error(error.message);\r\n-      console.log('Context:', error.context);\r\n-      if (error.componentStack) {\r\n-        console.log('Component Stack:', error.componentStack);\r\n-      }\r\n-      console.groupEnd();\r\n+      logger.error(`Error Tracked: ${error.source}`, {\r\n+        message: error.message,\r\n+        context: error.context,\r\n+        componentStack: error.componentStack\r\n+      });\r\n     }\r\n   }\r\n \r\n   public getErrors(): ErrorEvent[] {\r\n"
                },
                {
                    "date": 1740899265749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,12 +75,15 @@\n     this.notifyListeners();\r\n \r\n     // Log to console in development\r\n     if (import.meta.env.DEV) {\r\n-      logger.error(`Error Tracked: ${error.source}`, {\r\n-        message: error.message,\r\n-        context: error.context,\r\n-        componentStack: error.componentStack\r\n+      logger.error(`ðŸ”´ Error Tracked: ${error.source} - ${error.message}`, { \r\n+        source: 'ErrorTracker',\r\n+        error: {\r\n+          ...error,\r\n+          context: error.context,\r\n+          componentStack: error.componentStack\r\n+        }\r\n       });\r\n     }\r\n   }\r\n \r\n"
                }
            ],
            "date": 1740899206738,
            "name": "Commit-0",
            "content": "import { debounce } from './utils';\r\n\r\nexport type ErrorSeverity = 'error' | 'warning' | 'info';\r\n\r\nexport interface ErrorEvent {\r\n  id: string;\r\n  timestamp: number;\r\n  message: string;\r\n  severity: ErrorSeverity;\r\n  context?: Record<string, any>;\r\n  componentStack?: string;\r\n  source: string;\r\n}\r\n\r\nclass ErrorTracker {\r\n  private static instance: ErrorTracker;\r\n  private errors: ErrorEvent[] = [];\r\n  private errorCache: Map<string, number> = new Map();\r\n  private listeners: Set<(errors: ErrorEvent[]) => void> = new Set();\r\n  private maxErrors: number = 100;\r\n  private readonly ERROR_CACHE_TTL = 5000; // 5 seconds between duplicate errors\r\n\r\n  private constructor() {\r\n    // Private constructor to enforce singleton\r\n    setInterval(() => this.cleanErrorCache(), 60000); // Clean cache every minute\r\n  }\r\n\r\n  public static getInstance(): ErrorTracker {\r\n    if (!ErrorTracker.instance) {\r\n      ErrorTracker.instance = new ErrorTracker();\r\n    }\r\n    return ErrorTracker.instance;\r\n  }\r\n\r\n  private cleanErrorCache(): void {\r\n    const now = Date.now();\r\n    for (const [key, timestamp] of this.errorCache.entries()) {\r\n      if (now - timestamp > this.ERROR_CACHE_TTL) {\r\n        this.errorCache.delete(key);\r\n      }\r\n    }\r\n  }\r\n\r\n  private createErrorKey(error: Omit<ErrorEvent, 'id' | 'timestamp'>): string {\r\n    return `${error.message}:${error.source}:${error.severity}`;\r\n  }\r\n\r\n  private isDuplicateError(error: Omit<ErrorEvent, 'id' | 'timestamp'>): boolean {\r\n    const key = this.createErrorKey(error);\r\n    const lastOccurrence = this.errorCache.get(key);\r\n    const now = Date.now();\r\n\r\n    if (lastOccurrence && now - lastOccurrence < this.ERROR_CACHE_TTL) {\r\n      return true;\r\n    }\r\n\r\n    this.errorCache.set(key, now);\r\n    return false;\r\n  }\r\n\r\n  public trackError(error: Omit<ErrorEvent, 'id' | 'timestamp'>): void {\r\n    // Skip if this is a duplicate error within the TTL window\r\n    if (this.isDuplicateError(error)) {\r\n      return;\r\n    }\r\n\r\n    const errorEvent: ErrorEvent = {\r\n      ...error,\r\n      id: crypto.randomUUID(),\r\n      timestamp: Date.now(),\r\n    };\r\n\r\n    this.errors = [errorEvent, ...this.errors].slice(0, this.maxErrors);\r\n    this.notifyListeners();\r\n\r\n    // Log to console in development\r\n    if (import.meta.env.DEV) {\r\n      console.warn(`ðŸ”´ Error Tracked: ${error.source}`);\r\n      console.error(error.message);\r\n      console.log('Context:', error.context);\r\n      if (error.componentStack) {\r\n        console.log('Component Stack:', error.componentStack);\r\n      }\r\n      console.groupEnd();\r\n    }\r\n  }\r\n\r\n  public getErrors(): ErrorEvent[] {\r\n    return [...this.errors];\r\n  }\r\n\r\n  public clearErrors(): void {\r\n    this.errors = [];\r\n    this.notifyListeners();\r\n  }\r\n\r\n  public subscribe(listener: (errors: ErrorEvent[]) => void): () => void {\r\n    this.listeners.add(listener);\r\n    return () => this.listeners.delete(listener);\r\n  }\r\n\r\n  private notifyListeners = debounce(() => {\r\n    this.listeners.forEach(listener => listener(this.getErrors()));\r\n  }, 100);\r\n}\r\n\r\nexport const errorTracker = ErrorTracker.getInstance();"
        }
    ]
}