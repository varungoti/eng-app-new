{
    "sourceFile": "src/lib/monitoring/MonitoringSystem.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1740693415238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740693433784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n \r\n interface MonitoringConfig {\r\n   supabaseUrl: string;\r\n   supabaseKey: string;\r\n-  supabase: SupabaseClient<Database, \"public\", SchemaTypes>;\r\n+  supabase: SupabaseClient<unknown, \"public\", unknown>;\r\n   enableLogging?: boolean;\r\n   logLevel?: 'debug' | 'info' | 'warn' | 'error';\r\n   sampleRate?: number;\r\n }\r\n"
                },
                {
                    "date": 1740693471208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,10 @@\n \r\n interface MonitoringConfig {\r\n   supabaseUrl: string;\r\n   supabaseKey: string;\r\n-  supabase: SupabaseClient<unknown, \"public\", unknown>;\r\n+  // Use type assertion to avoid typing issues while maintaining type safety\r\n+  supabase: SupabaseClient;\r\n   enableLogging?: boolean;\r\n   logLevel?: 'debug' | 'info' | 'warn' | 'error';\r\n   sampleRate?: number;\r\n }\r\n"
                },
                {
                    "date": 1740693522368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { type SupabaseClient } from '@supabase/supabase-js';\r\n+import { type SupabaseClient, PostgrestError } from '@supabase/supabase-js';\r\n \r\n // Define more specific types for Supabase client\r\n type Database = Record<string, unknown>;\r\n type SchemaTypes = Record<string, unknown>;\r\n"
                },
                {
                    "date": 1740693551230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -200,9 +200,9 @@\n               component_id: componentId,\r\n               start_time: timestamp,\r\n               status: 'loading'\r\n             }])\r\n-            .then(({ error }: { error: any }) => {\r\n+            .then(({ error }: { error: PostgrestError | null }) => {\r\n               if (error && this.config.enableLogging) {\r\n                 console.error('Error recording loading start:', error);\r\n               }\r\n             });\r\n"
                }
            ],
            "date": 1740693415238,
            "name": "Commit-0",
            "content": "import { type SupabaseClient } from '@supabase/supabase-js';\r\n\r\n// Define more specific types for Supabase client\r\ntype Database = Record<string, unknown>;\r\ntype SchemaTypes = Record<string, unknown>;\r\n\r\ninterface MonitoringConfig {\r\n  supabaseUrl: string;\r\n  supabaseKey: string;\r\n  supabase: SupabaseClient<Database, \"public\", SchemaTypes>;\r\n  enableLogging?: boolean;\r\n  logLevel?: 'debug' | 'info' | 'warn' | 'error';\r\n  sampleRate?: number;\r\n}\r\n\r\nexport class MonitoringSystem {\r\n  private config: MonitoringConfig;\r\n\r\n  constructor(config: MonitoringConfig) {\r\n    this.config = {\r\n      enableLogging: true,\r\n      logLevel: 'info',\r\n      sampleRate: 1,\r\n      ...config\r\n    };\r\n  }\r\n\r\n  getDataFlowMonitor() {\r\n    return {\r\n        trackDataLoad: async (loadId: string, metadata: { source: string; recordCount: number }) => {\r\n            if (Math.random() > (this.config.sampleRate ?? 1)) return;\r\n    \r\n            try {\r\n          const { error } = await this.config.supabase\r\n            .from('data_flow_metrics')\r\n            .insert({\r\n              flow_id: loadId,\r\n              data_size: JSON.stringify(metadata).length,\r\n              timestamp: new Date().toISOString()\r\n            });\r\n\r\n          if (error && this.config.enableLogging) {\r\n            console.error('Error tracking data flow:', error);\r\n          }\r\n        } catch (err) {\r\n          if (this.config.enableLogging) {\r\n            console.error('Failed to track data flow:', err);\r\n          }\r\n        }\r\n      },\r\n\r\n      getFlowMetrics: async (flowId: string) => {\r\n        try {\r\n          const { data, error } = await this.config.supabase\r\n            .from('data_flow_metrics')\r\n            .select('*')\r\n            .eq('flow_id', flowId)\r\n            .order('timestamp', { ascending: false })\r\n            .limit(100);\r\n\r\n          if (error) throw error;\r\n          return data;\r\n        } catch (err) {\r\n          if (this.config.enableLogging) {\r\n            console.error('Failed to get flow metrics:', err);\r\n          }\r\n          return [];\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  getDataLoadMonitor() {\r\n    return {\r\n      trackDataLoad: async (loadId: string, metadata: { source: string; recordCount: number }) => {\r\n        if (Math.random() > (this.config.sampleRate ?? 1)) return;\r\n\r\n        try {\r\n          const { error } = await this.config.supabase\r\n            .from('data_load_metrics')\r\n            .insert({\r\n              load_id: loadId,\r\n              source: metadata.source,\r\n              record_count: metadata.recordCount,\r\n              timestamp: new Date().toISOString()\r\n            });\r\n\r\n          if (error && this.config.enableLogging) {\r\n            console.error('Error tracking data load:', error);\r\n          }\r\n        } catch (err) {\r\n          if (this.config.enableLogging) {\r\n            console.error('Failed to track data load:', err);\r\n          }\r\n        }\r\n      },\r\n\r\n      getLoadMetrics: async (loadId: string) => {\r\n        try {\r\n          const { data, error } = await this.config.supabase\r\n            .from('data_load_metrics')\r\n            .select('*')\r\n            .eq('load_id', loadId)\r\n            .order('timestamp', { ascending: false })\r\n            .limit(100);\r\n\r\n          if (error) throw error;\r\n          return data;\r\n        } catch (err) {\r\n          if (this.config.enableLogging) {\r\n            console.error('Failed to get load metrics:', err);\r\n          }\r\n          return [];\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  getDatabaseMonitor() {\r\n    return {\r\n      trackQueryPerformance: async (queryId: string, metadata: { query: string; duration: number; status: 'success' | 'error' }) => {\r\n        if (Math.random() > (this.config.sampleRate ?? 1)) return;\r\n\r\n        try {\r\n          const { error } = await this.config.supabase\r\n            .from('database_metrics')\r\n            .insert({\r\n              query_id: queryId,\r\n              query: metadata.query,\r\n              duration_ms: metadata.duration,\r\n              status: metadata.status,\r\n              timestamp: new Date().toISOString()\r\n            });\r\n\r\n          if (error && this.config.enableLogging) {\r\n            console.error('Error tracking query performance:', error);\r\n          }\r\n        } catch (err) {\r\n          if (this.config.enableLogging) {\r\n            console.error('Failed to track query performance:', err);\r\n          }\r\n        }\r\n      },\r\n\r\n      getQueryMetrics: async (queryId?: string) => {\r\n        try {\r\n          let query = this.config.supabase\r\n            .from('database_metrics')\r\n            .select('*')\r\n            .order('timestamp', { ascending: false })\r\n            .limit(100);\r\n\r\n          if (queryId) {\r\n            query = query.eq('query_id', queryId);\r\n          }\r\n\r\n          const { data, error } = await query;\r\n          if (error) throw error;\r\n          return data;\r\n        } catch (err) {\r\n          if (this.config.enableLogging) {\r\n            console.error('Failed to get query metrics:', err);\r\n          }\r\n          return [];\r\n        }\r\n      },\r\n\r\n      cleanup: async () => {\r\n        try {\r\n          // Delete metrics older than 30 days\r\n          const thirtyDaysAgo = new Date();\r\n          thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\r\n\r\n          const { error } = await this.config.supabase\r\n            .from('database_metrics')\r\n            .delete()\r\n            .lt('timestamp', thirtyDaysAgo.toISOString());\r\n\r\n          if (error && this.config.enableLogging) {\r\n            console.error('Error cleaning up database metrics:', error);\r\n          }\r\n        } catch (err) {\r\n          if (this.config.enableLogging) {\r\n            console.error('Failed to cleanup database metrics:', err);\r\n          }\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  getLoadingMonitor() {\r\n    return {\r\n      startLoading: (componentId: string) => {\r\n        try {\r\n          const timestamp = new Date().toISOString();\r\n          this.config.supabase\r\n            .from('loading_metrics')\r\n            .insert([{\r\n              component_id: componentId,\r\n              start_time: timestamp,\r\n              status: 'loading'\r\n            }])\r\n            .then(({ error }: { error: any }) => {\r\n              if (error && this.config.enableLogging) {\r\n                console.error('Error recording loading start:', error);\r\n              }\r\n            });\r\n        } catch (err) {\r\n          if (this.config.enableLogging) {\r\n            console.error('Failed to record loading start:', err);\r\n          }\r\n        }\r\n      },\r\n\r\n      endLoading: async (componentId: string, success: boolean = true) => {\r\n        try {\r\n          const timestamp = new Date().toISOString();\r\n          const { error } = await this.config.supabase\r\n            .from('loading_metrics')\r\n            .update({\r\n              end_time: timestamp,\r\n              status: success ? 'success' : 'error'\r\n            })\r\n            .eq('component_id', componentId)\r\n            .is('end_time', null);\r\n\r\n          if (error && this.config.enableLogging) {\r\n            console.error('Error recording loading end:', error);\r\n          }\r\n        } catch (err) {\r\n          if (this.config.enableLogging) {\r\n            console.error('Failed to record loading end:', err);\r\n          }\r\n        }\r\n      },\r\n\r\n      getLoadingMetrics: async (componentId?: string) => {\r\n        try {\r\n          let query = this.config.supabase\r\n            .from('loading_metrics')\r\n            .select('*')\r\n            .order('start_time', { ascending: false })\r\n            .limit(100);\r\n\r\n          if (componentId) {\r\n            query = query.eq('component_id', componentId);\r\n          }\r\n\r\n          const { data, error } = await query;\r\n          if (error) throw error;\r\n          return data;\r\n        } catch (err) {\r\n          if (this.config.enableLogging) {\r\n            console.error('Failed to get loading metrics:', err);\r\n          }\r\n          return [];\r\n        }\r\n      }\r\n    };\r\n  }\r\n} "
        }
    ]
}