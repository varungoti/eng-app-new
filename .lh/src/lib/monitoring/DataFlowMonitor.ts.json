{
    "sourceFile": "src/lib/monitoring/DataFlowMonitor.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1738875876979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738875901316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,22 +52,23 @@\n \r\n     this.activeOperations.set(opId, operation);\r\n     \r\n     this.loggerInstance.info(`Starting operation: ${name}`, {\r\n-      context: { opId, type, metadata },\r\n+      metadata: { opId, type, metadata },\r\n       source: 'DataFlowMonitor'\r\n     });\r\n \r\n     return opId;\r\n   }\r\n \r\n   public endOperation(opId: string): void {\r\n-    this.loggerInstance.debug(`Ending operation`, {\r\n+    this.loggerInstance.info(`Ending operation`, {\r\n       context: { opId },\r\n       source: 'DataFlowMonitor'\r\n     });\r\n   }\r\n \r\n+\r\n   public async recordOperation(operation: string, duration: number, success: boolean) {\r\n     if (Math.random() > this.config.sampleRate!) return;\r\n \r\n     try {\r\n"
                },
                {
                    "date": 1738875926566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n \r\n     this.activeOperations.set(opId, operation);\r\n     \r\n     this.loggerInstance.info(`Starting operation: ${name}`, {\r\n-      metadata: { opId, type, metadata },\r\n+      context: { opId, type, metadata },\r\n       source: 'DataFlowMonitor'\r\n     });\r\n \r\n     return opId;\r\n"
                },
                {
                    "date": 1738875943536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,12 +51,9 @@\n     };\r\n \r\n     this.activeOperations.set(opId, operation);\r\n     \r\n-    this.loggerInstance.info(`Starting operation: ${name}`, {\r\n-      context: { opId, type, metadata },\r\n-      source: 'DataFlowMonitor'\r\n-    });\r\n+    this.loggerInstance.info(`Starting operation: ${name} (${opId}) - Type: ${type}`);\r\n \r\n     return opId;\r\n   }\r\n \r\n"
                },
                {
                    "date": 1738875956427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,12 +57,9 @@\n     return opId;\r\n   }\r\n \r\n   public endOperation(opId: string): void {\r\n-    this.loggerInstance.info(`Ending operation`, {\r\n-      context: { opId },\r\n-      source: 'DataFlowMonitor'\r\n-    });\r\n+    this.loggerInstance.info(`Ending operation: ${opId}`);\r\n   }\r\n \r\n \r\n   public async recordOperation(operation: string, duration: number, success: boolean) {\r\n"
                },
                {
                    "date": 1738876071279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,8 @@\n import type SupabaseClient from '@supabase/supabase-js/dist/module/SupabaseClient';\r\n import { MonitorConfig } from './index';\r\n import { logger } from '../logger';\r\n-import { Logger } from 'vite';\r\n \r\n-\r\n export interface DataFlowMetrics {\r\n   operationsPerSecond: number;\r\n   averageResponseTime: number;\r\n   errorRate: number;\r\n@@ -23,12 +21,11 @@\n   private supabase: SupabaseClient;\r\n   private config: MonitorConfig;\r\n   private metrics: DataFlowMetrics;\r\n   private activeOperations: Map<string, Operation>;\r\n-  private loggerInstance: Logger;\r\n+  private loggerInstance: typeof logger;\r\n \r\n-\r\n-  constructor(supabase: SupabaseClient, config: MonitorConfig, logger: Logger) {\r\n+  constructor(supabase: SupabaseClient, config: MonitorConfig, loggerInstance: typeof logger) {\r\n     this.supabase = supabase;\r\n     this.config = config;\r\n     this.metrics = {\r\n       operationsPerSecond: 0,\r\n@@ -36,9 +33,9 @@\n       errorRate: 0,\r\n       activeConnections: 0\r\n     };\r\n     this.activeOperations = new Map();\r\n-    this.loggerInstance = logger;\r\n+    this.loggerInstance = loggerInstance;\r\n   }\r\n \r\n   public startOperation(type: string, name: string, metadata: any = {}): string {\r\n     const opId = `${type}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n"
                },
                {
                    "date": 1738876086595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,18 +48,26 @@\n     };\r\n \r\n     this.activeOperations.set(opId, operation);\r\n     \r\n-    this.loggerInstance.info(`Starting operation: ${name} (${opId}) - Type: ${type}`);\r\n+    this.loggerInstance.info(`Starting operation: ${name} (${opId}) - Type: ${type}`, {\r\n+      context: { opId, type, metadata },\r\n+      source: 'DataFlowMonitor'\r\n+    });\r\n \r\n+\r\n     return opId;\r\n   }\r\n \r\n   public endOperation(opId: string): void {\r\n-    this.loggerInstance.info(`Ending operation: ${opId}`);\r\n+    this.loggerInstance.info(`Ending operation: ${opId}`, {\r\n+      context: { opId },\r\n+      source: 'DataFlowMonitor'\r\n+    });\r\n   }\r\n \r\n \r\n+\r\n   public async recordOperation(operation: string, duration: number, success: boolean) {\r\n     if (Math.random() > this.config.sampleRate!) return;\r\n \r\n     try {\r\n"
                },
                {
                    "date": 1739014058810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,14 +48,10 @@\n     };\r\n \r\n     this.activeOperations.set(opId, operation);\r\n     \r\n-    this.loggerInstance.info(`Starting operation: ${name} (${opId}) - Type: ${type}`, {\r\n-      context: { opId, type, metadata },\r\n-      source: 'DataFlowMonitor'\r\n-    });\r\n+    this.loggerInstance.info(`Starting operation: ${name} (${opId}) - Type: ${type}`, 'DataFlowMonitor');\r\n \r\n-\r\n     return opId;\r\n   }\r\n \r\n   public endOperation(opId: string): void {\r\n"
                },
                {
                    "date": 1739014094919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,16 +54,14 @@\n     return opId;\r\n   }\r\n \r\n   public endOperation(opId: string): void {\r\n-    this.loggerInstance.info(`Ending operation: ${opId}`, {\r\n-      context: { opId },\r\n-      source: 'DataFlowMonitor'\r\n-    });\r\n+    this.loggerInstance.info(`Ending operation: ${opId}`, 'DataFlowMonitor');\r\n   }\r\n \r\n \r\n \r\n+\r\n   public async recordOperation(operation: string, duration: number, success: boolean) {\r\n     if (Math.random() > this.config.sampleRate!) return;\r\n \r\n     try {\r\n@@ -78,34 +76,23 @@\n       });\r\n \r\n       this.updateMetrics(duration, success);\r\n     } catch (error) {\r\n-      logger.error('Failed to record data flow operation', {\r\n-        source: 'DataFlowMonitor',\r\n-        context: {\r\n-          operation,\r\n-          duration,\r\n-          success,\r\n-          error\r\n-        }\r\n-      });\r\n+      logger.error('Failed to record data flow operation', 'DataFlowMonitor', error);\r\n+        \r\n     }\r\n   }\r\n \r\n+\r\n   private updateMetrics(duration: number, success: boolean) {\r\n     this.metrics.averageResponseTime = \r\n       (this.metrics.averageResponseTime * 0.9) + (duration * 0.1);\r\n     this.metrics.operationsPerSecond++;\r\n     if (!success) this.metrics.errorRate++;\r\n \r\n     if (this.metrics.averageResponseTime > 1000) {\r\n-      logger.warn('High average response time detected', {\r\n-        source: 'DataFlowMonitor',\r\n-        context: {\r\n-          averageResponseTime: this.metrics.averageResponseTime,\r\n-          threshold: 1000\r\n-        }\r\n-      });\r\n+      logger.warn('High average response time detected', 'DataFlowMonitor');\r\n+\r\n     }\r\n   }\r\n \r\n   public getMetrics(): DataFlowMetrics {\r\n"
                }
            ],
            "date": 1738875876979,
            "name": "Commit-0",
            "content": "import type SupabaseClient from '@supabase/supabase-js/dist/module/SupabaseClient';\r\nimport { MonitorConfig } from './index';\r\nimport { logger } from '../logger';\r\nimport { Logger } from 'vite';\r\n\r\n\r\nexport interface DataFlowMetrics {\r\n  operationsPerSecond: number;\r\n  averageResponseTime: number;\r\n  errorRate: number;\r\n  activeConnections: number;\r\n}\r\n\r\ninterface Operation {\r\n  id: string;\r\n  type: string;\r\n  name: string;\r\n  startTime: number;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\nexport class DataFlowMonitor {\r\n  private supabase: SupabaseClient;\r\n  private config: MonitorConfig;\r\n  private metrics: DataFlowMetrics;\r\n  private activeOperations: Map<string, Operation>;\r\n  private loggerInstance: Logger;\r\n\r\n\r\n  constructor(supabase: SupabaseClient, config: MonitorConfig, logger: Logger) {\r\n    this.supabase = supabase;\r\n    this.config = config;\r\n    this.metrics = {\r\n      operationsPerSecond: 0,\r\n      averageResponseTime: 0,\r\n      errorRate: 0,\r\n      activeConnections: 0\r\n    };\r\n    this.activeOperations = new Map();\r\n    this.loggerInstance = logger;\r\n  }\r\n\r\n  public startOperation(type: string, name: string, metadata: any = {}): string {\r\n    const opId = `${type}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    const operation: Operation = {\r\n      id: opId,\r\n      type,\r\n      name,\r\n      startTime: performance.now(),\r\n      metadata\r\n    };\r\n\r\n    this.activeOperations.set(opId, operation);\r\n    \r\n    this.loggerInstance.info(`Starting operation: ${name}`, {\r\n      context: { opId, type, metadata },\r\n      source: 'DataFlowMonitor'\r\n    });\r\n\r\n    return opId;\r\n  }\r\n\r\n  public endOperation(opId: string): void {\r\n    this.loggerInstance.debug(`Ending operation`, {\r\n      context: { opId },\r\n      source: 'DataFlowMonitor'\r\n    });\r\n  }\r\n\r\n  public async recordOperation(operation: string, duration: number, success: boolean) {\r\n    if (Math.random() > this.config.sampleRate!) return;\r\n\r\n    try {\r\n      await this.supabase.from('audit_logs').insert({\r\n        action: 'data_flow_operation',\r\n        details: {\r\n          operation,\r\n          duration,\r\n          success,\r\n          timestamp: new Date().toISOString()\r\n        }\r\n      });\r\n\r\n      this.updateMetrics(duration, success);\r\n    } catch (error) {\r\n      logger.error('Failed to record data flow operation', {\r\n        source: 'DataFlowMonitor',\r\n        context: {\r\n          operation,\r\n          duration,\r\n          success,\r\n          error\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  private updateMetrics(duration: number, success: boolean) {\r\n    this.metrics.averageResponseTime = \r\n      (this.metrics.averageResponseTime * 0.9) + (duration * 0.1);\r\n    this.metrics.operationsPerSecond++;\r\n    if (!success) this.metrics.errorRate++;\r\n\r\n    if (this.metrics.averageResponseTime > 1000) {\r\n      logger.warn('High average response time detected', {\r\n        source: 'DataFlowMonitor',\r\n        context: {\r\n          averageResponseTime: this.metrics.averageResponseTime,\r\n          threshold: 1000\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  public getMetrics(): DataFlowMetrics {\r\n    return { ...this.metrics };\r\n  }\r\n\r\n  public getActiveOperations(): Operation[] {\r\n    return Array.from(this.activeOperations.values());\r\n  }\r\n}"
        }
    ]
}