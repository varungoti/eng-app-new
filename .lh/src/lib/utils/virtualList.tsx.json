{
    "sourceFile": "src/lib/utils/virtualList.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1740852956386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740852977263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,26 +100,23 @@\n \r\n   return (\r\n     <div\r\n       ref={containerRef}\r\n-      className=\"relative overflow-auto overscroll-contain\"\r\n+      className=\"relative overflow-auto overscroll-contain h-[var(--container-height)]\"\r\n       style={{ '--container-height': `${height}px` } as React.CSSProperties}\r\n-      className=\"relative overflow-auto overscroll-contain h-[var(--container-height)]\"\r\n     >\r\n       <div \r\n-        className=\"absolute inset-0\"\r\n+        className=\"absolute inset-0 h-[var(--total-height)]\"\r\n         style={{ '--total-height': `${totalHeight}px` } as React.CSSProperties}\r\n-        className=\"absolute inset-0 h-[var(--total-height)]\"\r\n       >\r\n         {visibleItems.map(({ item, index }) => (\r\n           <div\r\n             key={index}\r\n+            className=\"absolute w-full top-[var(--item-top)] h-[var(--item-height)] transform-gpu will-change-transform\"\r\n             style={{\r\n               '--item-top': `${index * itemHeight}px`,\r\n               '--item-height': `${itemHeight}px`\r\n             } as React.CSSProperties}\r\n-            className=\"absolute w-full translate-3d-0 will-change-transform\"\r\n-            className=\"absolute w-full top-[var(--item-top)] h-[var(--item-height)] transform-gpu will-change-transform\"\r\n           >\r\n             {renderItem(item, index)}\r\n           </div>\r\n         ))}\r\n"
                },
                {
                    "date": 1740853020580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,30 +97,43 @@\n     })),\r\n     [items, startIndex, endIndex]\r\n   );\r\n \r\n+  // Create a dynamic CSS style tag in the component\r\n+  const cssRules = `\r\n+    .virtual-list-container {\r\n+      height: ${height}px;\r\n+    }\r\n+    .virtual-list-content {\r\n+      height: ${totalHeight}px;\r\n+    }\r\n+    ${visibleItems.map(({ index }) => `\r\n+      .virtual-item-${index} {\r\n+        top: ${index * itemHeight}px;\r\n+        height: ${itemHeight}px;\r\n+      }\r\n+    `).join('')}\r\n+  `;\r\n+\r\n   return (\r\n-    <div\r\n-      ref={containerRef}\r\n-      className=\"relative overflow-auto overscroll-contain h-[var(--container-height)]\"\r\n-      style={{ '--container-height': `${height}px` } as React.CSSProperties}\r\n-    >\r\n-      <div \r\n-        className=\"absolute inset-0 h-[var(--total-height)]\"\r\n-        style={{ '--total-height': `${totalHeight}px` } as React.CSSProperties}\r\n+    <>\r\n+      <style>{cssRules}</style>\r\n+      <div\r\n+        ref={containerRef}\r\n+        className=\"virtual-list-container relative overflow-auto overscroll-contain\"\r\n       >\r\n-        {visibleItems.map(({ item, index }) => (\r\n-          <div\r\n-            key={index}\r\n-            className=\"absolute w-full top-[var(--item-top)] h-[var(--item-height)] transform-gpu will-change-transform\"\r\n-            style={{\r\n-              '--item-top': `${index * itemHeight}px`,\r\n-              '--item-height': `${itemHeight}px`\r\n-            } as React.CSSProperties}\r\n-          >\r\n-            {renderItem(item, index)}\r\n-          </div>\r\n-        ))}\r\n+        <div \r\n+          className=\"virtual-list-content absolute inset-0\"\r\n+        >\r\n+          {visibleItems.map(({ item, index }) => (\r\n+            <div\r\n+              key={index}\r\n+              className={`virtual-item-${index} absolute w-full transform-gpu will-change-transform`}\r\n+            >\r\n+              {renderItem(item, index)}\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n       </div>\r\n-    </div>\r\n+    </>\r\n   );\r\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1740852956386,
            "name": "Commit-0",
            "content": "import React, { useEffect, useRef, useState, useCallback } from 'react';\r\nimport { measurePerformance } from './performance';\r\nimport { useIsFirstRender } from './performance';\r\n\r\ninterface VirtualListProps<T> {\r\n  items: T[];\r\n  height: number;\r\n  itemHeight: number;\r\n  renderItem: (item: T, index: number) => React.ReactNode;\r\n  overscan?: number;\r\n  onScrollEnd?: () => void;\r\n  scrollThreshold?: number;\r\n}\r\n\r\nexport function VirtualList<T>({\r\n  items,\r\n  height,\r\n  itemHeight,\r\n  renderItem,\r\n  overscan = 3,\r\n  onScrollEnd,\r\n  scrollThreshold = 0.9\r\n}: VirtualListProps<T>): JSX.Element {\r\n  const [scrollTop, setScrollTop] = useState(0);\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const isFirstRender = useIsFirstRender();\r\n  const scrollTimeoutRef = useRef<number>();\r\n  const lastScrollTime = useRef<number>(0);\r\n\r\n  const handleScroll = useCallback(() => {\r\n    // Throttle scroll events\r\n    const now = Date.now();\r\n    if (now - lastScrollTime.current < 16) { // ~60fps\r\n      return;\r\n    }\r\n    lastScrollTime.current = now;\r\n\r\n    const endMetric = measurePerformance('virtualList.scroll');\r\n    if (!containerRef.current) return;\r\n\r\n    const container = containerRef.current;\r\n    const scrollPosition = container.scrollTop + container.clientHeight;\r\n    const scrollHeight = container.scrollHeight;\r\n\r\n    // Check if we're near the bottom and should trigger onScrollEnd\r\n    if (onScrollEnd && scrollPosition / scrollHeight > scrollThreshold) {\r\n      // Debounce scroll end callback\r\n      if (scrollTimeoutRef.current) {\r\n        window.clearTimeout(scrollTimeoutRef.current);\r\n      }\r\n      scrollTimeoutRef.current = window.setTimeout(() => {\r\n        onScrollEnd();\r\n      }, 150);\r\n    }\r\n\r\n    requestAnimationFrame(() => {\r\n      setScrollTop(container.scrollTop);\r\n    });\r\n    endMetric();\r\n  }, [onScrollEnd, scrollThreshold]);\r\n\r\n  // Cleanup timeout on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (scrollTimeoutRef.current) {\r\n        window.clearTimeout(scrollTimeoutRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const container = containerRef.current;\r\n    if (!container) return;\r\n\r\n    container.addEventListener('scroll', handleScroll);\r\n    \r\n    // Reset scroll position on first render\r\n    if (isFirstRender) {\r\n      container.scrollTop = 0;\r\n    }\r\n    \r\n    return () => container.removeEventListener('scroll', handleScroll);\r\n  }, [handleScroll, isFirstRender]);\r\n\r\n  const totalHeight = items.length * itemHeight;\r\n  const startIndex = Math.max(0, Math.floor(scrollTop / itemHeight) - overscan);\r\n  const endIndex = Math.min(\r\n    items.length,\r\n    Math.ceil((scrollTop + height) / itemHeight) + overscan\r\n  );\r\n\r\n  // Memoize visible items to prevent unnecessary re-renders\r\n  const visibleItems = React.useMemo(() => \r\n    items.slice(startIndex, endIndex).map((item, index) => ({\r\n      item,\r\n      index: startIndex + index,\r\n    })),\r\n    [items, startIndex, endIndex]\r\n  );\r\n\r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      className=\"relative overflow-auto overscroll-contain\"\r\n      style={{ '--container-height': `${height}px` } as React.CSSProperties}\r\n      className=\"relative overflow-auto overscroll-contain h-[var(--container-height)]\"\r\n    >\r\n      <div \r\n        className=\"absolute inset-0\"\r\n        style={{ '--total-height': `${totalHeight}px` } as React.CSSProperties}\r\n        className=\"absolute inset-0 h-[var(--total-height)]\"\r\n      >\r\n        {visibleItems.map(({ item, index }) => (\r\n          <div\r\n            key={index}\r\n            style={{\r\n              '--item-top': `${index * itemHeight}px`,\r\n              '--item-height': `${itemHeight}px`\r\n            } as React.CSSProperties}\r\n            className=\"absolute w-full translate-3d-0 will-change-transform\"\r\n            className=\"absolute w-full top-[var(--item-top)] h-[var(--item-height)] transform-gpu will-change-transform\"\r\n          >\r\n            {renderItem(item, index)}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}"
        }
    ]
}