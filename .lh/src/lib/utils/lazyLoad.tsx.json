{
    "sourceFile": "src/lib/utils/lazyLoad.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1740747878197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740747932893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n         return loadComponent();\r\n       }\r\n     };\r\n \r\n-    return new Promise((resolve) => {\r\n+    return new Promise<{ default: React.ComponentType<any> }>((resolve) => {\r\n       const timeoutId = setTimeout(() => {\r\n         resolve({\r\n           default: () => (\r\n             <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg\">\r\n"
                },
                {
                    "date": 1740748028137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,10 +11,10 @@\n   timeout?: number;\r\n   name?: string;\r\n }\r\n \r\n-export const lazyLoad = (\r\n-  importFn: () => Promise<{ default: React.ComponentType<any> }>,\r\n+export const lazyLoad = <T extends {} = {}>(\r\n+  importFn: () => Promise<{ default: React.ComponentType<T> }>,\r\n   options: LazyLoadOptions = {}\r\n ) => {\r\n   const {\r\n     fallback,\r\n@@ -49,9 +49,9 @@\n   const LazyComponent = React.lazy(() => {\r\n     const startTime = Date.now();\r\n     let attempts = 0;\r\n     \r\n-    const loadComponent = async (): Promise<{ default: React.ComponentType<any> }> => {\r\n+    const loadComponent = async (): Promise<{ default: React.ComponentType<T> }> => {\r\n       try {\r\n         const componentModule = await importFn();\r\n         if (!componentModule?.default) {\r\n           throw new Error(`Module ${name} does not have a default export`);\r\n@@ -67,9 +67,9 @@\n         return loadComponent();\r\n       }\r\n     };\r\n \r\n-    return new Promise<{ default: React.ComponentType<any> }>((resolve) => {\r\n+    return new Promise<{ default: React.ComponentType<T> }>((resolve) => {\r\n       const timeoutId = setTimeout(() => {\r\n         resolve({\r\n           default: () => (\r\n             <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg\">\r\n"
                },
                {
                    "date": 1740748081451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n   timeout?: number;\r\n   name?: string;\r\n }\r\n \r\n-export const lazyLoad = <T extends {} = {}>(\r\n+export const lazyLoad = <T extends Record<string, unknown> = Record<string, unknown>>(\r\n   importFn: () => Promise<{ default: React.ComponentType<T> }>,\r\n   options: LazyLoadOptions = {}\r\n ) => {\r\n   const {\r\n"
                },
                {
                    "date": 1740748143148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,21 +28,8 @@\n   // Create isolated error boundary for this component\r\n   const ComponentErrorBoundary = ({ children }: { children: React.ReactNode }) => (\r\n     <ErrorBoundary \r\n       source={name}\r\n-      fallback={\r\n-        <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg\">\r\n-          <h3 className=\"text-lg font-medium text-red-800\">\r\n-            Failed to load {name.toLowerCase()}\r\n-          </h3>\r\n-          <button\r\n-            onClick={() => window.location.reload()}\r\n-            className=\"mt-4 text-sm text-indigo-600 hover:text-indigo-800 underline\"\r\n-          >\r\n-            Retry loading\r\n-          </button>\r\n-        </div>\r\n-      }\r\n     >\r\n       {children}\r\n     </ErrorBoundary>\r\n   );\r\n"
                },
                {
                    "date": 1740748211113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n         });\r\n     });\r\n   });\r\n \r\n-  return function WrappedComponent(props: any) {\r\n+  return function WrappedComponent(props: T) {\r\n     const Wrapper = errorBoundary ? ErrorBoundary : React.Fragment;\r\n     const wrapperProps = errorBoundary ? { source: name } : {};\r\n \r\n     return (\r\n"
                },
                {
                    "date": 1740748226670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n         });\r\n     });\r\n   });\r\n \r\n-  return function WrappedComponent(props: T) {\r\n+  return function WrappedComponent(props: React.ComponentProps<React.ComponentType<T>>) {\r\n     const Wrapper = errorBoundary ? ErrorBoundary : React.Fragment;\r\n     const wrapperProps = errorBoundary ? { source: name } : {};\r\n \r\n     return (\r\n"
                },
                {
                    "date": 1740748262459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,10 @@\n         });\r\n     });\r\n   });\r\n \r\n-  return function WrappedComponent(props: React.ComponentProps<React.ComponentType<T>>) {\r\n+  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n+  return function WrappedComponent(props: Record<string, any>) {\r\n     const Wrapper = errorBoundary ? ErrorBoundary : React.Fragment;\r\n     const wrapperProps = errorBoundary ? { source: name } : {};\r\n \r\n     return (\r\n"
                },
                {
                    "date": 1740748297724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,16 +98,16 @@\n     });\r\n   });\r\n \r\n   // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n-  return function WrappedComponent(props: Record<string, any>) {\r\n+  return function WrappedComponent(props: T) {\r\n     const Wrapper = errorBoundary ? ErrorBoundary : React.Fragment;\r\n     const wrapperProps = errorBoundary ? { source: name } : {};\r\n \r\n     return (\r\n       <Wrapper {...wrapperProps}>\r\n         <Suspense fallback={fallback || <LoadingSpinner message={`Loading ${name.toLowerCase()}...`} />}>\r\n-          <LazyComponent {...props} />\r\n+          <LazyComponent {...props as any} />\r\n         </Suspense>\r\n       </Wrapper>\r\n     );\r\n   };\r\n"
                },
                {
                    "date": 1740748356603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,8 +105,9 @@\n \r\n     return (\r\n       <Wrapper {...wrapperProps}>\r\n         <Suspense fallback={fallback || <LoadingSpinner message={`Loading ${name.toLowerCase()}...`} />}>\r\n+          {/* eslint-disable-next-line @typescript-eslint/no-explicit-any */}\r\n           <LazyComponent {...props as any} />\r\n         </Suspense>\r\n       </Wrapper>\r\n     );\r\n"
                },
                {
                    "date": 1740853062356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n     name = 'Component'\r\n   } = options;\r\n \r\n   // Create isolated error boundary for this component\r\n-  const ComponentErrorBoundary = ({ children }: { children: React.ReactNode }) => (\r\n+  export const ComponentErrorBoundary = ({ children }: { children: React.ReactNode }) => (\r\n     <ErrorBoundary \r\n       source={name}\r\n     >\r\n       {children}\r\n"
                },
                {
                    "date": 1740853068502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n     name = 'Component'\r\n   } = options;\r\n \r\n   // Create isolated error boundary for this component\r\n-  export const ComponentErrorBoundary = ({ children }: { children: React.ReactNode }) => (\r\n+  const ComponentErrorBoundary = ({ children }: { children: React.ReactNode }) => (\r\n     <ErrorBoundary \r\n       source={name}\r\n     >\r\n       {children}\r\n"
                }
            ],
            "date": 1740747878197,
            "name": "Commit-0",
            "content": "import React, { Suspense } from 'react';\r\nimport { logger } from '../logger';\r\nimport ErrorBoundary from '@/components/ErrorBoundary';\r\nimport LoadingSpinner from '@/components/LoadingSpinner';\r\n\r\ninterface LazyLoadOptions {\r\n  fallback?: React.ReactNode;\r\n  errorBoundary?: boolean;\r\n  loadingDelay?: number;\r\n  retryCount?: number;\r\n  timeout?: number;\r\n  name?: string;\r\n}\r\n\r\nexport const lazyLoad = (\r\n  importFn: () => Promise<{ default: React.ComponentType<any> }>,\r\n  options: LazyLoadOptions = {}\r\n) => {\r\n  const {\r\n    fallback,\r\n    errorBoundary = true, // Always use error boundary by default\r\n    loadingDelay = 300,\r\n    retryCount = 3,\r\n    timeout = 10000,\r\n    name = 'Component'\r\n  } = options;\r\n\r\n  // Create isolated error boundary for this component\r\n  const ComponentErrorBoundary = ({ children }: { children: React.ReactNode }) => (\r\n    <ErrorBoundary \r\n      source={name}\r\n      fallback={\r\n        <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg\">\r\n          <h3 className=\"text-lg font-medium text-red-800\">\r\n            Failed to load {name.toLowerCase()}\r\n          </h3>\r\n          <button\r\n            onClick={() => window.location.reload()}\r\n            className=\"mt-4 text-sm text-indigo-600 hover:text-indigo-800 underline\"\r\n          >\r\n            Retry loading\r\n          </button>\r\n        </div>\r\n      }\r\n    >\r\n      {children}\r\n    </ErrorBoundary>\r\n  );\r\n  const LazyComponent = React.lazy(() => {\r\n    const startTime = Date.now();\r\n    let attempts = 0;\r\n    \r\n    const loadComponent = async (): Promise<{ default: React.ComponentType<any> }> => {\r\n      try {\r\n        const componentModule = await importFn();\r\n        if (!componentModule?.default) {\r\n          throw new Error(`Module ${name} does not have a default export`);\r\n        }\r\n        return componentModule;\r\n      } catch (err) {\r\n        attempts++;\r\n        if (attempts >= retryCount) {\r\n          throw err;\r\n        }\r\n        // Exponential backoff\r\n        await new Promise(resolve => setTimeout(resolve, loadingDelay * Math.pow(2, attempts - 1)));\r\n        return loadComponent();\r\n      }\r\n    };\r\n\r\n    return new Promise((resolve) => {\r\n      const timeoutId = setTimeout(() => {\r\n        resolve({\r\n          default: () => (\r\n            <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg\">\r\n              <h3 className=\"text-lg font-medium text-red-800\">Failed to load {name.toLowerCase()}</h3>\r\n              <p className=\"mt-2 text-sm text-red-600\">\r\n                Please try refreshing the page. If the problem persists, contact support.\r\n              </p>\r\n            </div>\r\n          )\r\n        });\r\n      }, timeout);\r\n\r\n      loadComponent()\r\n        .then(componentModule => {\r\n          clearTimeout(timeoutId);\r\n          logger.debug(`${name} loaded successfully`, {\r\n            context: { loadTime: Date.now() - startTime },\r\n            source: 'lazyLoad'\r\n          });\r\n          resolve(componentModule);\r\n        })\r\n        .catch(err => {\r\n          clearTimeout(timeoutId);\r\n          logger.error(`Failed to load ${name}`, {\r\n            context: { error: err },\r\n            source: 'lazyLoad'\r\n          });\r\n          resolve({\r\n            default: () => (\r\n              <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg\">\r\n                <h3 className=\"text-lg font-medium text-red-800\">Failed to load {name.toLowerCase()}</h3>\r\n                <p className=\"mt-2 text-sm text-red-600\">\r\n                  Please try refreshing the page. If the problem persists, contact support.\r\n                </p>\r\n              </div>\r\n            )\r\n          });\r\n        });\r\n    });\r\n  });\r\n\r\n  return function WrappedComponent(props: any) {\r\n    const Wrapper = errorBoundary ? ErrorBoundary : React.Fragment;\r\n    const wrapperProps = errorBoundary ? { source: name } : {};\r\n\r\n    return (\r\n      <Wrapper {...wrapperProps}>\r\n        <Suspense fallback={fallback || <LoadingSpinner message={`Loading ${name.toLowerCase()}...`} />}>\r\n          <LazyComponent {...props} />\r\n        </Suspense>\r\n      </Wrapper>\r\n    );\r\n  };\r\n};"
        }
    ]
}