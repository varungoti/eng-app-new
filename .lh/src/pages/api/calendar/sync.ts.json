{
    "sourceFile": "src/pages/api/calendar/sync.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1740752798300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1740752798300,
            "name": "Commit-0",
            "content": "import { NextApiRequest, NextApiResponse } from 'next';\r\nimport { google } from 'googleapis';\r\n\r\ninterface Event {\r\n  id: string;\r\n  title: string;\r\n  start: string;\r\n  end: string;\r\n  description?: string;\r\n  location?: string;\r\n  isAllDay?: boolean;\r\n}\r\n\r\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\r\n  if (req.method !== 'POST') {\r\n    return res.status(405).json({ error: 'Method not allowed' });\r\n  }\r\n\r\n  const { events } = req.body;\r\n  const accessToken = req.headers.authorization?.replace('Bearer ', '');\r\n\r\n  if (!accessToken) {\r\n    return res.status(401).json({ error: 'Authorization token is required' });\r\n  }\r\n\r\n  if (!events || !Array.isArray(events)) {\r\n    return res.status(400).json({ error: 'Events array is required' });\r\n  }\r\n\r\n  try {\r\n    // Initialize the Google Calendar API\r\n    const calendar = google.calendar({ version: 'v3', auth: new google.auth.OAuth2() });\r\n    \r\n    // Set credentials\r\n    (calendar.context._options.auth as any).setCredentials({\r\n      access_token: accessToken\r\n    });\r\n\r\n    // Get a list of calendars\r\n    const calendarList = await calendar.calendarList.list();\r\n    \r\n    // Find or create our app's calendar\r\n    let targetCalendar = calendarList.data.items?.find(\r\n      cal => cal.summary === 'School Schedule'\r\n    );\r\n\r\n    if (!targetCalendar) {\r\n      // Create a new calendar for our app\r\n      const newCalendar = await calendar.calendars.insert({\r\n        requestBody: {\r\n          summary: 'School Schedule',\r\n          description: 'Calendar for school schedules and events',\r\n          timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone\r\n        }\r\n      });\r\n      \r\n      targetCalendar = newCalendar.data;\r\n    }\r\n\r\n    if (!targetCalendar?.id) {\r\n      throw new Error('Failed to find or create calendar');\r\n    }\r\n\r\n    // Process each event and add to Google Calendar\r\n    const results = await Promise.all(\r\n      events.map(async (event: Event) => {\r\n        try {\r\n          // Convert to Google Calendar event format\r\n          const googleEvent = {\r\n            summary: event.title,\r\n            description: event.description || '',\r\n            location: event.location || '',\r\n            start: {\r\n              dateTime: new Date(event.start).toISOString(),\r\n              timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,\r\n            },\r\n            end: {\r\n              dateTime: new Date(event.end).toISOString(),\r\n              timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,\r\n            },\r\n            reminders: {\r\n              useDefault: true,\r\n            },\r\n          };\r\n\r\n          // Create the event\r\n          const response = await calendar.events.insert({\r\n            calendarId: targetCalendar.id,\r\n            requestBody: googleEvent,\r\n          });\r\n\r\n          return {\r\n            id: event.id,\r\n            googleId: response.data.id,\r\n            status: 'synced'\r\n          };\r\n        } catch (error) {\r\n          console.error(`Error syncing event ${event.id}:`, error);\r\n          return {\r\n            id: event.id,\r\n            status: 'error',\r\n            error: error instanceof Error ? error.message : 'Unknown error'\r\n          };\r\n        }\r\n      })\r\n    );\r\n\r\n    return res.status(200).json({ \r\n      success: true,\r\n      results \r\n    });\r\n  } catch (error) {\r\n    console.error('Calendar sync error:', error);\r\n    return res.status(500).json({ \r\n      error: 'Failed to sync with Google Calendar',\r\n      details: error instanceof Error ? error.message : 'Unknown error'\r\n    });\r\n  }\r\n} "
        }
    ]
}