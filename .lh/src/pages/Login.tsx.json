{
    "sourceFile": "src/pages/Login.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1740926970344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1740926970344,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport React, { useState } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { useAuth } from '../hooks/useAuth';\r\nimport { logger } from '../lib/logger';\r\nimport { ROLE_PERMISSIONS } from '../types/roles';\r\nimport { Shield } from '@phosphor-icons/react';\r\n\r\nconst Login = () => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [name, setName] = useState('');\r\n  const [selectedRole, setSelectedRole] = useState('super_admin');\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [isResetMode, setIsResetMode] = useState(false);\r\n  const [isSignUpMode, setIsSignUpMode] = useState(false);\r\n  const auth = useAuth() as {\r\n    user: any;\r\n    loading: boolean;\r\n    signUp: (data: { email: string; password: string; name: string }) => Promise<void>;\r\n    login: (data: { email: string; password: string }) => Promise<void>;\r\n    resetPassword: (data: { email: string }) => Promise<void>;\r\n  };\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const from = location.state?.from?.pathname || '/dashboard';\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setError(null);\r\n    setLoading(true);\r\n    \r\n    try {\r\n      if (isSignUpMode) {\r\n        if (!auth.signUp) {\r\n          throw new Error('Sign up is not available');\r\n        }\r\n        await auth.signUp({ email, password, name });\r\n        logger.info('Signup successful', {\r\n          context: { email, name },\r\n          source: 'LoginPage'\r\n        });\r\n        // Automatically log in after successful signup\r\n        if (!auth.login) {\r\n          throw new Error('Login is not available');\r\n        }\r\n        await auth.login({ email, password });\r\n      } else {\r\n        if (!auth.login) {\r\n          throw new Error('Login is not available');\r\n        }\r\n        await auth.login({ email, password }); \r\n        logger.info('Login successful', {\r\n          context: { email, role: selectedRole },\r\n          source: 'LoginPage'\r\n        });\r\n      }\r\n      navigate(from);\r\n    } catch (err: unknown) {\r\n      const message = err instanceof Error ? err.message : 'Failed to sign in. Please check your credentials and try again.';\r\n      setError(message);\r\n      logger.error(isSignUpMode ? 'Signup failed' : 'Login failed', {\r\n        context: { error: err },\r\n        source: 'LoginPage'\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleResetPassword = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setError(null);\r\n    setLoading(true);\r\n    \r\n    try {\r\n      if (!auth.resetPassword) {\r\n        throw new Error('Password reset is not available');\r\n      }\r\n      await auth.resetPassword({ email });\r\n      setError('Password reset email sent. Please check your inbox.');\r\n      logger.info('Password reset email sent', {\r\n        context: { email },\r\n        source: 'LoginPage'\r\n      });\r\n    } catch (err: unknown) {\r\n      const message = err instanceof Error ? err.message : 'Failed to send reset email.';\r\n      setError(message);\r\n      logger.error('Password reset failed', {\r\n        context: { error: err },\r\n        source: 'LoginPage'\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\r\n      <div className=\"max-w-md w-full space-y-8\">\r\n        {/* Demo Notice */}\r\n        <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\r\n          <h3 className=\"text-sm font-medium text-blue-800\">Super Admin Account</h3>\r\n          <div className=\"mt-2 text-sm text-blue-700\">\r\n            <p>Email: varungoti@gmail.com</p>\r\n            <p>Password: *************</p>\r\n          </div>\r\n        </div>\r\n\r\n        <div>\r\n          <div className=\"flex justify-center\">\r\n            <Shield className=\"h-12 w-12 text-indigo-600\" />\r\n          </div>\r\n          <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\r\n            {isSignUpMode ? 'Create an account' : 'Sign in to your account'}\r\n          </h2>\r\n        </div>\r\n        <form className=\"mt-8 space-y-6\" onSubmit={isResetMode ? handleResetPassword : handleSubmit} noValidate>\r\n          <div className=\"rounded-md shadow-sm -space-y-px\">\r\n            {isSignUpMode && (\r\n              <div>\r\n                <label htmlFor=\"name\" className=\"sr-only\">\r\n                  Full Name\r\n                </label>\r\n                <input\r\n                  id=\"name\"\r\n                  name=\"name\"\r\n                  type=\"text\"\r\n                  required\r\n                  value={name}\r\n                  onChange={(e) => setName(e.target.value)}\r\n                  className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\r\n                  placeholder=\"Full Name\"\r\n                  disabled={loading}\r\n                />\r\n              </div>\r\n            )}\r\n            <div>\r\n              <label htmlFor=\"email-address\" className=\"sr-only\">\r\n                Email address\r\n              </label>\r\n              <input\r\n                id=\"email-address\"\r\n                name=\"email\"\r\n                type=\"email\"\r\n                autoComplete=\"email\"\r\n                required\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n                className={`appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 ${!isSignUpMode && !isResetMode ? 'rounded-t-md' : ''} focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm disabled:bg-gray-100 disabled:cursor-not-allowed`}\r\n                disabled={loading}\r\n                placeholder=\"Email address\"\r\n              />\r\n            </div>\r\n            {!isResetMode && (\r\n              <div>\r\n                <label htmlFor=\"password\" className=\"sr-only\">\r\n                  Password\r\n                </label>\r\n                <input\r\n                  id=\"password\"\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                  autoComplete={isSignUpMode ? 'new-password' : 'current-password'}\r\n                  required\r\n                  value={password}\r\n                  onChange={(e) => setPassword(e.target.value)}\r\n                  className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm disabled:bg-gray-100 disabled:cursor-not-allowed\"\r\n                  disabled={loading}\r\n                  placeholder={isSignUpMode ? 'Create Password' : 'Password'}\r\n                />\r\n              </div>\r\n            )}\r\n          </div>\r\n          \r\n          {!isSignUpMode && !isResetMode && (\r\n            <div className=\"mt-4\">\r\n              <label className=\"block text-sm font-medium text-gray-700\">\r\n                Login As\r\n              </label>\r\n              <select\r\n                value={selectedRole}\r\n                onChange={(e) => setSelectedRole(e.target.value)}\r\n                className=\"mt-1 block w-full pl-3 pr-10 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\r\n                aria-label=\"Select role\"\r\n              >\r\n                {Object.entries(ROLE_PERMISSIONS).map(([role, details]) => (\r\n                  <option key={role} value={role}>\r\n                    {details.name}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n          )}\r\n\r\n          {error && (\r\n            <div className=\"rounded-md bg-red-50 p-4 animate-shake\">\r\n              <div className=\"flex\">\r\n                <div className=\"flex-shrink-0\">\r\n                  <svg className=\"h-5 w-5 text-red-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                    <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\r\n                  </svg>\r\n                </div>\r\n                <div className=\"ml-3\">\r\n                  <div className=\"text-sm text-red-700\">{error}</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"flex items-center justify-between\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                if (isResetMode) {\r\n                  setIsResetMode(false);\r\n                } else {\r\n                  setIsSignUpMode(!isSignUpMode);\r\n                }\r\n                setError(null);\r\n              }}\r\n              className=\"text-sm font-medium text-indigo-600 hover:text-indigo-500\"\r\n            >\r\n              {isResetMode ? 'Back to login' : isSignUpMode ? 'Already have an account? Sign in' : \"Don't have an account? Sign up\"}\r\n            </button>\r\n            {!isSignUpMode && (\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setIsResetMode(!isResetMode);\r\n                  setError(null);\r\n                }}\r\n                className=\"text-sm font-medium text-indigo-600 hover:text-indigo-500\"\r\n              >\r\n                {isResetMode ? 'Back to login' : 'Forgot your password?'}\r\n              </button>\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <button\r\n              type=\"submit\"\r\n              disabled={loading}\r\n              className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200\"\r\n            >\r\n              <span className=\"absolute left-0 inset-y-0 flex items-center pl-3\">\r\n                {loading ? (\r\n                  <svg className=\"h-5 w-5 text-indigo-500 group-hover:text-indigo-400 animate-spin\" viewBox=\"0 0 24 24\">\r\n                    <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\" fill=\"none\" />\r\n                    <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" />\r\n                  </svg>\r\n                ) : (\r\n                  <svg className=\"h-5 w-5 text-indigo-500 group-hover:text-indigo-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                    <path fillRule=\"evenodd\" d=\"M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z\" clipRule=\"evenodd\" />\r\n                  </svg>\r\n                )}\r\n              </span>\r\n              {loading ? 'Processing...' : isResetMode ? 'Reset Password' : isSignUpMode ? 'Sign up' : 'Sign in'}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;"
        }
    ]
}