{
    "sourceFile": "src/pages/Dashboard.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1739278892138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740927328473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n import RoleDashboard from '../components/RoleDashboard';\r\n import LoadingSpinner from '../components/LoadingSpinner';\r\n import { logger } from '../lib/logger';\r\n import ErrorBoundary from '../components/ErrorBoundary';\r\n-import type { UserRole } from '@/types/roles';\r\n+//import type { UserRole } from '@/types/roles';\r\n \r\n // Lazy load dashboard components with preload\r\n const dashboardComponents = {\r\n   'super_admin': React.lazy(() => {\r\n"
                },
                {
                    "date": 1740927339128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n \"use client\";\r\n \r\n-import React, { memo, useMemo, useState, useEffect, useCallback } from 'react';\r\n+import React, { memo, useState, useEffect, useCallback } from 'react';\r\n import { Navigate, useLocation } from 'react-router-dom';\r\n import { useAuth } from '@/hooks/useAuth';\r\n import { useQueryClient } from '@tanstack/react-query';\r\n import DashboardSwitcher from '../components/DashboardSwitcher';\r\n@@ -54,9 +54,9 @@\n   const location = useLocation();\r\n   const queryClient = useQueryClient();\r\n   const [selectedRole, setSelectedRole] = useState<string | null>(null);\r\n   const [loadError, setLoadError] = useState<string | null>(null);\r\n-  const [loadProgress, setLoadProgress] = useState<number>(0);\r\n+  const [loadProgress, _setLoadProgress] = useState<number>(0);\r\n \r\n   // Memoized role update handler\r\n   const handleRoleChange = useCallback((newRole: string) => {\r\n     setSelectedRole(newRole);\r\n"
                }
            ],
            "date": 1739278892138,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport React, { memo, useMemo, useState, useEffect, useCallback } from 'react';\r\nimport { Navigate, useLocation } from 'react-router-dom';\r\nimport { useAuth } from '@/hooks/useAuth';\r\nimport { useQueryClient } from '@tanstack/react-query';\r\nimport DashboardSwitcher from '../components/DashboardSwitcher';\r\nimport RoleDashboard from '../components/RoleDashboard';\r\nimport LoadingSpinner from '../components/LoadingSpinner';\r\nimport { logger } from '../lib/logger';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport type { UserRole } from '@/types/roles';\r\n\r\n// Lazy load dashboard components with preload\r\nconst dashboardComponents = {\r\n  'super_admin': React.lazy(() => {\r\n    logger.debug('Loading SuperAdminDashboard', { context: { component: 'SuperAdminDashboard' }, source: 'Dashboard' });\r\n    return import('@/components/dashboards/SuperAdminDashboard');\r\n  }),\r\n  'admin': React.lazy(() => import('@/components/dashboards/AdminDashboard')),\r\n  'teacher': React.lazy(() => import('@/components/dashboards/TeacherDashboard')),\r\n  'teacher_head': React.lazy(() => import('@/components/dashboards/TeacherHeadDashboard')),\r\n  'school_principal': React.lazy(() => import('@/components/dashboards/SchoolPrincipalDashboard')),\r\n  'content_head': React.lazy(() => import('@/components/dashboards/ContentHeadDashboard')),\r\n  'content_editor': React.lazy(() => import('@/components/dashboards/ContentEditorDashboard')),\r\n  'technical_head': React.lazy(() => import('@/components/dashboards/TechnicalHeadDashboard')),\r\n  'developer': React.lazy(() => import('@/components/dashboards/DeveloperDashboard')),\r\n  'sales_executive': React.lazy(() => import('@/components/dashboards/SalesExecutiveDashboard')),\r\n  'sales_head': React.lazy(() => import('@/components/dashboards/SalesHeadDashboard')),\r\n  'school_leader': React.lazy(() => import('@/components/dashboards/SchoolLeaderDashboard')),\r\n  'accounts_head': React.lazy(() => import('@/components/dashboards/AccountsDashboard')),\r\n  'accounts_executive': React.lazy(() => import('@/components/dashboards/AccountsExecutiveDashboard'))\r\n} as const;\r\n\r\n// Memoized dashboard wrapper with error boundary\r\nconst DashboardWrapper = memo(({ Component }: { Component: React.LazyExoticComponent<any> }) => (\r\n  <ErrorBoundary source=\"DashboardView\">\r\n    <React.Suspense \r\n      fallback={\r\n        <div className=\"flex items-center justify-center h-[calc(100vh-4rem)]\">\r\n          <LoadingSpinner message=\"Loading dashboard view...\" />\r\n        </div>\r\n      }\r\n    >\r\n      <Component />\r\n    </React.Suspense>\r\n  </ErrorBoundary>\r\n));\r\n\r\nDashboardWrapper.displayName = 'DashboardWrapper';\r\n\r\nconst Dashboard: React.FC = () => {\r\n  const { user, loading } = useAuth();\r\n  const location = useLocation();\r\n  const queryClient = useQueryClient();\r\n  const [selectedRole, setSelectedRole] = useState<string | null>(null);\r\n  const [loadError, setLoadError] = useState<string | null>(null);\r\n  const [loadProgress, setLoadProgress] = useState<number>(0);\r\n\r\n  // Memoized role update handler\r\n  const handleRoleChange = useCallback((newRole: string) => {\r\n    setSelectedRole(newRole);\r\n    queryClient.clear();\r\n    queryClient.invalidateQueries({ queryKey: ['dashboard-init'] });\r\n    logger.info('Role updated', { context: { role: newRole }, source: 'Dashboard' });\r\n  }, [queryClient]);\r\n\r\n  // Debounced role update from location\r\n  useEffect(() => {\r\n    const newRole = location.state?.newRole;\r\n    if (newRole && user && newRole !== user.role) {\r\n      const timeoutId = setTimeout(() => {\r\n        handleRoleChange(newRole);\r\n      }, 300);\r\n      return () => clearTimeout(timeoutId);\r\n    }\r\n  }, [location.state?.newRole, user, handleRoleChange]);\r\n\r\n  // Sync selected role with user role\r\n  useEffect(() => {\r\n    if (user?.role && !selectedRole) {\r\n      setSelectedRole(user.role);\r\n    }\r\n  }, [user?.role, selectedRole]);\r\n\r\n  // Handle loading state\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-[calc(100vh-4rem)]\">\r\n        <LoadingSpinner \r\n          message=\"Loading dashboard...\" \r\n          showProgress={true}\r\n          progress={loadProgress}\r\n          timeout={15000}\r\n          onRetry={() => {\r\n            queryClient.invalidateQueries();\r\n            window.location.reload();\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Handle error state\r\n  if (loadError) {\r\n    return (\r\n      <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg\">\r\n        <h3 className=\"text-lg font-medium text-red-800\">Error</h3>\r\n        <p className=\"mt-2 text-sm text-red-600\">{loadError}</p>\r\n        <button\r\n          onClick={() => window.location.reload()}\r\n          className=\"mt-4 text-sm text-indigo-600 hover:text-indigo-800 underline\"\r\n        >\r\n          Try refreshing the page\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Handle unauthenticated state\r\n  if (!user) {\r\n    queryClient.clear();\r\n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\r\n  }\r\n\r\n  // Get current role\r\n  const currentRole = selectedRole || user.role;\r\n  if (!currentRole) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-full\">\r\n        <p className=\"text-lg text-gray-600\">No dashboard available.</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Get dashboard component\r\n  const DashboardComponent = dashboardComponents[currentRole as keyof typeof dashboardComponents];\r\n  if (!DashboardComponent) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-full\">\r\n        <p className=\"text-lg text-gray-600\">No dashboard available for your role.</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ErrorBoundary source=\"Dashboard\">\r\n      <div className=\"space-y-6 min-h-[calc(100vh-8rem)]\">\r\n        {user.role === 'super_admin' && (\r\n          <DashboardSwitcher\r\n            currentRole={currentRole}\r\n            onRoleChange={handleRoleChange}\r\n          />\r\n        )}\r\n        \r\n        <ErrorBoundary source=\"RoleDashboard\">\r\n          <RoleDashboard \r\n            selectedRole={currentRole}\r\n            onError={(error: Error) => setLoadError(error.message)}\r\n          />\r\n        </ErrorBoundary>\r\n      </div>\r\n    </ErrorBoundary>\r\n  );\r\n};\r\n\r\nexport default memo(Dashboard);"
        }
    ]
}