{
    "sourceFile": "src/features/content-management/ContentManagementPage.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1740086559078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740087859029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,13 +5,17 @@\n import { ContentHeader } from './components/layout/ContentHeader';\r\n import { ContentSidebar } from './components/layout/ContentSidebar';\r\n import { LessonEditor } from './components/lesson/LessonEditor';\r\n import { QuestionList } from './components/questions/QuestionList';\r\n+import { ActivityList } from './components/activities/ActivityList';\r\n+import { ContentModals } from './components/layout/ContentModals';\r\n import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\n import { ActivityIcon, MessageSquare } from 'lucide-react';\r\n import { useContentState } from './hooks/useContentState';\r\n import { useLessonEditor } from './hooks/useLessonEditor';\r\n import { useQuestionManager } from './hooks/useQuestionManager';\r\n+import { useActivityManager } from './hooks/useActivityManager';\r\n+import { useContentModals } from './hooks/useContentModals';\r\n \r\n export default function ContentManagementPage() {\r\n   // UI State\r\n   const [showHelpTips, setShowHelpTips] = useState(true);\r\n@@ -31,8 +35,9 @@\n     handleGradeSelect,\r\n     handleTopicSelect,\r\n     handleSubtopicSelect,\r\n     setCurrentLessonId,\r\n+    refreshContent\r\n   } = useContentState();\r\n \r\n   // Lesson Editor State\r\n   const {\r\n@@ -67,15 +72,44 @@\n     updateQuestion,\r\n     removeQuestion,\r\n   } = useQuestionManager(currentLessonId);\r\n \r\n+  // Activity Manager State\r\n+  const {\r\n+    activities,\r\n+    activitySaveStatuses,\r\n+    expandedActivity,\r\n+    setActivities,\r\n+    setExpandedActivity,\r\n+    addActivity,\r\n+    updateActivity,\r\n+    removeActivity,\r\n+    saveActivity,\r\n+  } = useActivityManager(currentLessonId);\r\n+\r\n+  // Modal Management\r\n+  const {\r\n+    modalState,\r\n+    openModal,\r\n+    closeModal,\r\n+    handlers: modalHandlers\r\n+  } = useContentModals({\r\n+    selectedGradeId,\r\n+    selectedTopicId,\r\n+    selectedSubtopicId,\r\n+    onSuccess: refreshContent\r\n+  });\r\n+\r\n   return (\r\n     <div className=\"container mx-auto py-8\">\r\n       {/* Header */}\r\n       <ContentHeader\r\n         showHelpTips={showHelpTips}\r\n         onToggleHelpTips={() => setShowHelpTips(!showHelpTips)}\r\n         onRefresh={() => loadLessonContent(currentLessonId || '')}\r\n+        isViewMode={isViewMode}\r\n+        onToggleViewMode={() => setIsViewMode(!isViewMode)}\r\n+        saveProgress={saveProgress}\r\n       />\r\n \r\n       {/* Main Content */}\r\n       <div className=\"flex gap-6 mt-6\">\r\n@@ -93,12 +127,12 @@\n           onGradeSelect={handleGradeSelect}\r\n           onTopicSelect={handleTopicSelect}\r\n           onSubtopicSelect={handleSubtopicSelect}\r\n           onLessonSelect={setCurrentLessonId}\r\n-          onAddGrade={() => {}}\r\n-          onAddTopic={() => {}}\r\n-          onAddSubtopic={() => {}}\r\n-          onAddLesson={() => {}}\r\n+          onAddGrade={() => openModal('addGrade')}\r\n+          onAddTopic={() => openModal('addTopic')}\r\n+          onAddSubtopic={() => openModal('addSubtopic')}\r\n+          onAddLesson={() => openModal('addLesson')}\r\n         />\r\n \r\n         {/* Content Area */}\r\n         <div className=\"flex-1\">\r\n@@ -139,13 +173,13 @@\n               <Tabs defaultValue=\"questions\">\r\n                 <TabsList className=\"grid w-full grid-cols-2\">\r\n                   <TabsTrigger value=\"questions\">\r\n                     <MessageSquare className=\"h-4 w-4 mr-2\" />\r\n-                    Questions\r\n+                    Questions ({questions.length})\r\n                   </TabsTrigger>\r\n                   <TabsTrigger value=\"activities\">\r\n                     <ActivityIcon className=\"h-4 w-4 mr-2\" />\r\n-                    Activities\r\n+                    Activities ({activities.length})\r\n                   </TabsTrigger>\r\n                 </TabsList>\r\n \r\n                 <TabsContent value=\"questions\">\r\n@@ -163,19 +197,32 @@\n                   />\r\n                 </TabsContent>\r\n \r\n                 <TabsContent value=\"activities\">\r\n-                  {/* TODO: Add Activities List component */}\r\n-                  <div className=\"text-center py-8 text-muted-foreground\">\r\n-                    Activities management coming soon...\r\n-                  </div>\r\n+                  <ActivityList\r\n+                    activities={activities}\r\n+                    activitySaveStatuses={activitySaveStatuses}\r\n+                    expandedActivity={expandedActivity}\r\n+                    onAddActivity={addActivity}\r\n+                    onUpdateActivity={updateActivity}\r\n+                    onRemoveActivity={removeActivity}\r\n+                    onSaveActivity={saveActivity}\r\n+                    onExpandActivity={setExpandedActivity}\r\n+                  />\r\n                 </TabsContent>\r\n               </Tabs>\r\n             </div>\r\n           )}\r\n         </div>\r\n       </div>\r\n \r\n+      {/* Modals */}\r\n+      <ContentModals\r\n+        modals={modalState}\r\n+        onClose={closeModal}\r\n+        onSubmit={modalHandlers}\r\n+      />\r\n+\r\n       <Toaster />\r\n     </div>\r\n   );\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1740089610614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,27 +1,35 @@\n \"use client\";\r\n \r\n-import { useState } from 'react';\r\n+import { useState, useRef } from 'react';\r\n import { Toaster } from 'sonner';\r\n import { ContentHeader } from './components/layout/ContentHeader';\r\n import { ContentSidebar } from './components/layout/ContentSidebar';\r\n+import { ContentBreadcrumbs } from './components/layout/ContentBreadcrumbs';\r\n import { LessonEditor } from './components/lesson/LessonEditor';\r\n import { QuestionList } from './components/questions/QuestionList';\r\n import { ActivityList } from './components/activities/ActivityList';\r\n import { ContentModals } from './components/layout/ContentModals';\r\n+import { KeyboardShortcutsDialog } from './components/shared/KeyboardShortcutsDialog';\r\n import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\n import { ActivityIcon, MessageSquare } from 'lucide-react';\r\n import { useContentState } from './hooks/useContentState';\r\n import { useLessonEditor } from './hooks/useLessonEditor';\r\n import { useQuestionManager } from './hooks/useQuestionManager';\r\n import { useActivityManager } from './hooks/useActivityManager';\r\n import { useContentModals } from './hooks/useContentModals';\r\n+import { useKeyboardShortcuts } from './hooks/useKeyboardShortcuts';\r\n \r\n export default function ContentManagementPage() {\r\n   // UI State\r\n   const [showHelpTips, setShowHelpTips] = useState(true);\r\n   const [isViewMode, setIsViewMode] = useState(true);\r\n   const [isNavigating, setIsNavigating] = useState(false);\r\n+  const [showShortcuts, setShowShortcuts] = useState(false);\r\n+  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\r\n+  const [isSidebarLocked, setIsSidebarLocked] = useState(true);\r\n+  const [activeTab, setActiveTab] = useState<'questions' | 'activities'>('questions');\r\n+  const shortcutsButtonRef = useRef<HTMLButtonElement>(null);\r\n \r\n   // Content Management State\r\n   const {\r\n     selectedGradeId,\r\n@@ -98,20 +106,86 @@\n     selectedSubtopicId,\r\n     onSuccess: refreshContent\r\n   });\r\n \r\n+  // Keyboard Shortcuts\r\n+  useKeyboardShortcuts({\r\n+    onSave: saveLesson,\r\n+    onToggleEditMode: () => setIsViewMode(!isViewMode),\r\n+    onToggleHelpTips: () => setShowHelpTips(!showHelpTips),\r\n+    onToggleShortcuts: () => shortcutsButtonRef.current?.click(),\r\n+    onToggleContentEditor: () => setIsContentEditorOpen(!isContentEditorOpen),\r\n+    onSaveContent: saveLesson,\r\n+    onCollapseSidebar: () => setIsSidebarCollapsed(true),\r\n+    onExpandSidebar: () => setIsSidebarCollapsed(false),\r\n+    onToggleSidebarLock: () => setIsSidebarLocked(!isSidebarLocked),\r\n+    onSwitchToQuestions: () => setActiveTab('questions'),\r\n+    onSwitchToActivities: () => setActiveTab('activities'),\r\n+    onAddNew: () => activeTab === 'questions' ? addQuestion() : addActivity(),\r\n+    isContentEditorOpen\r\n+  });\r\n+\r\n+  // Breadcrumb items\r\n+  const breadcrumbItems = [\r\n+    {\r\n+      label: 'Grades',\r\n+      onClick: () => {\r\n+        setSelectedGradeId(null);\r\n+        setSelectedTopicId(null);\r\n+        setSelectedSubtopicId(null);\r\n+        setCurrentLessonId(null);\r\n+      },\r\n+      isActive: !selectedGradeId\r\n+    },\r\n+    selectedGradeId && {\r\n+      label: grades.find(g => g.id === selectedGradeId)?.name || 'Grade',\r\n+      onClick: () => {\r\n+        setSelectedTopicId(null);\r\n+        setSelectedSubtopicId(null);\r\n+        setCurrentLessonId(null);\r\n+      },\r\n+      isActive: selectedGradeId && !selectedTopicId\r\n+    },\r\n+    selectedTopicId && {\r\n+      label: topics.find(t => t.id === selectedTopicId)?.title || 'Topic',\r\n+      onClick: () => {\r\n+        setSelectedSubtopicId(null);\r\n+        setCurrentLessonId(null);\r\n+      },\r\n+      isActive: selectedTopicId && !selectedSubtopicId\r\n+    },\r\n+    selectedSubtopicId && {\r\n+      label: subtopics.find(s => s.id === selectedSubtopicId)?.title || 'Subtopic',\r\n+      onClick: () => {\r\n+        setCurrentLessonId(null);\r\n+      },\r\n+      isActive: selectedSubtopicId && !currentLessonId\r\n+    },\r\n+    currentLessonId && {\r\n+      label: lessonTitle || 'Lesson',\r\n+      onClick: () => {},\r\n+      isActive: true\r\n+    }\r\n+  ].filter(Boolean) as { label: string; onClick: () => void; isActive?: boolean }[];\r\n+\r\n   return (\r\n     <div className=\"container mx-auto py-8\">\r\n       {/* Header */}\r\n-      <ContentHeader\r\n-        showHelpTips={showHelpTips}\r\n-        onToggleHelpTips={() => setShowHelpTips(!showHelpTips)}\r\n-        onRefresh={() => loadLessonContent(currentLessonId || '')}\r\n-        isViewMode={isViewMode}\r\n-        onToggleViewMode={() => setIsViewMode(!isViewMode)}\r\n-        saveProgress={saveProgress}\r\n-      />\r\n+      <div className=\"space-y-4\">\r\n+        <ContentHeader\r\n+          showHelpTips={showHelpTips}\r\n+          onToggleHelpTips={() => setShowHelpTips(!showHelpTips)}\r\n+          onRefresh={() => loadLessonContent(currentLessonId || '')}\r\n+          isViewMode={isViewMode}\r\n+          onToggleViewMode={() => setIsViewMode(!isViewMode)}\r\n+          saveProgress={saveProgress}\r\n+        >\r\n+          <KeyboardShortcutsDialog ref={shortcutsButtonRef} />\r\n+        </ContentHeader>\r\n \r\n+        <ContentBreadcrumbs items={breadcrumbItems} />\r\n+      </div>\r\n+\r\n       {/* Main Content */}\r\n       <div className=\"flex gap-6 mt-6\">\r\n         {/* Sidebar */}\r\n         <ContentSidebar\r\n@@ -131,8 +205,12 @@\n           onAddGrade={() => openModal('addGrade')}\r\n           onAddTopic={() => openModal('addTopic')}\r\n           onAddSubtopic={() => openModal('addSubtopic')}\r\n           onAddLesson={() => openModal('addLesson')}\r\n+          isCollapsed={isSidebarCollapsed}\r\n+          isLocked={isSidebarLocked}\r\n+          onCollapsedChange={setIsSidebarCollapsed}\r\n+          onLockedChange={setIsSidebarLocked}\r\n         />\r\n \r\n         {/* Content Area */}\r\n         <div className=\"flex-1\">\r\n@@ -169,9 +247,9 @@\n                 onSave={saveLesson}\r\n               />\r\n \r\n               {/* Questions and Activities Tabs */}\r\n-              <Tabs defaultValue=\"questions\">\r\n+              <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as 'questions' | 'activities')}>\r\n                 <TabsList className=\"grid w-full grid-cols-2\">\r\n                   <TabsTrigger value=\"questions\">\r\n                     <MessageSquare className=\"h-4 w-4 mr-2\" />\r\n                     Questions ({questions.length})\r\n"
                },
                {
                    "date": 1740089615943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,29 +128,23 @@\n   const breadcrumbItems = [\r\n     {\r\n       label: 'Grades',\r\n       onClick: () => {\r\n-        setSelectedGradeId(null);\r\n-        setSelectedTopicId(null);\r\n-        setSelectedSubtopicId(null);\r\n-        setCurrentLessonId(null);\r\n+        handleGradeSelect('');\r\n       },\r\n       isActive: !selectedGradeId\r\n     },\r\n     selectedGradeId && {\r\n       label: grades.find(g => g.id === selectedGradeId)?.name || 'Grade',\r\n       onClick: () => {\r\n-        setSelectedTopicId(null);\r\n-        setSelectedSubtopicId(null);\r\n-        setCurrentLessonId(null);\r\n+        handleTopicSelect('');\r\n       },\r\n       isActive: selectedGradeId && !selectedTopicId\r\n     },\r\n     selectedTopicId && {\r\n       label: topics.find(t => t.id === selectedTopicId)?.title || 'Topic',\r\n       onClick: () => {\r\n-        setSelectedSubtopicId(null);\r\n-        setCurrentLessonId(null);\r\n+        handleSubtopicSelect('');\r\n       },\r\n       isActive: selectedTopicId && !selectedSubtopicId\r\n     },\r\n     selectedSubtopicId && {\r\n"
                },
                {
                    "date": 1740089843017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n \"use client\";\r\n \r\n-import { useState, useRef } from 'react';\r\n+import { useState, useRef, useEffect } from 'react';\r\n import { Toaster } from 'sonner';\r\n import { ContentHeader } from './components/layout/ContentHeader';\r\n import { ContentSidebar } from './components/layout/ContentSidebar';\r\n import { ContentBreadcrumbs } from './components/layout/ContentBreadcrumbs';\r\n@@ -9,16 +9,18 @@\n import { QuestionList } from './components/questions/QuestionList';\r\n import { ActivityList } from './components/activities/ActivityList';\r\n import { ContentModals } from './components/layout/ContentModals';\r\n import { KeyboardShortcutsDialog } from './components/shared/KeyboardShortcutsDialog';\r\n+import { ProgressIndicator } from './components/shared/ProgressIndicator';\r\n import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\n import { ActivityIcon, MessageSquare } from 'lucide-react';\r\n import { useContentState } from './hooks/useContentState';\r\n import { useLessonEditor } from './hooks/useLessonEditor';\r\n import { useQuestionManager } from './hooks/useQuestionManager';\r\n import { useActivityManager } from './hooks/useActivityManager';\r\n import { useContentModals } from './hooks/useContentModals';\r\n import { useKeyboardShortcuts } from './hooks/useKeyboardShortcuts';\r\n+import { useAccessibilityAnnouncer } from './hooks/useAccessibilityAnnouncer';\r\n \r\n export default function ContentManagementPage() {\r\n   // UI State\r\n   const [showHelpTips, setShowHelpTips] = useState(true);\r\n@@ -123,8 +125,36 @@\n     onAddNew: () => activeTab === 'questions' ? addQuestion() : addActivity(),\r\n     isContentEditorOpen\r\n   });\r\n \r\n+  // Accessibility\r\n+  const { announce } = useAccessibilityAnnouncer();\r\n+  const mainContentRef = useRef<HTMLDivElement>(null);\r\n+\r\n+  // Focus management\r\n+  useEffect(() => {\r\n+    if (currentLessonId) {\r\n+      mainContentRef.current?.focus();\r\n+      announce(`Loaded lesson: ${lessonTitle || 'Untitled Lesson'}`);\r\n+    }\r\n+  }, [currentLessonId, lessonTitle, announce]);\r\n+\r\n+  // Announce save status changes\r\n+  useEffect(() => {\r\n+    if (saveProgress === 'saving') {\r\n+      announce('Saving changes...', 'polite');\r\n+    } else if (saveProgress === 'saved') {\r\n+      announce('Changes saved successfully', 'polite');\r\n+    } else if (saveProgress === 'error') {\r\n+      announce('Error saving changes', 'assertive');\r\n+    }\r\n+  }, [saveProgress, announce]);\r\n+\r\n+  // Announce tab changes\r\n+  useEffect(() => {\r\n+    announce(`Switched to ${activeTab} tab`);\r\n+  }, [activeTab, announce]);\r\n+\r\n   // Breadcrumb items\r\n   const breadcrumbItems = [\r\n     {\r\n       label: 'Grades',\r\n@@ -161,130 +191,179 @@\n     }\r\n   ].filter(Boolean) as { label: string; onClick: () => void; isActive?: boolean }[];\r\n \r\n   return (\r\n-    <div className=\"container mx-auto py-8\">\r\n-      {/* Header */}\r\n-      <div className=\"space-y-4\">\r\n-        <ContentHeader\r\n-          showHelpTips={showHelpTips}\r\n-          onToggleHelpTips={() => setShowHelpTips(!showHelpTips)}\r\n-          onRefresh={() => loadLessonContent(currentLessonId || '')}\r\n-          isViewMode={isViewMode}\r\n-          onToggleViewMode={() => setIsViewMode(!isViewMode)}\r\n-          saveProgress={saveProgress}\r\n-        >\r\n-          <KeyboardShortcutsDialog ref={shortcutsButtonRef} />\r\n-        </ContentHeader>\r\n+    <div \r\n+      className=\"min-h-screen bg-background\"\r\n+      role=\"application\"\r\n+      aria-label=\"Content Management System\"\r\n+    >\r\n+      <div className=\"container mx-auto py-8 px-4 sm:px-6 lg:px-8\">\r\n+        {/* Header */}\r\n+        <div className=\"space-y-4\">\r\n+          <ContentHeader\r\n+            showHelpTips={showHelpTips}\r\n+            onToggleHelpTips={() => setShowHelpTips(!showHelpTips)}\r\n+            onRefresh={() => loadLessonContent(currentLessonId || '')}\r\n+            isViewMode={isViewMode}\r\n+            onToggleViewMode={() => setIsViewMode(!isViewMode)}\r\n+            saveProgress={saveProgress}\r\n+          >\r\n+            <KeyboardShortcutsDialog ref={shortcutsButtonRef} />\r\n+          </ContentHeader>\r\n \r\n-        <ContentBreadcrumbs items={breadcrumbItems} />\r\n-      </div>\r\n+          <ContentBreadcrumbs items={breadcrumbItems} />\r\n+        </div>\r\n \r\n-      {/* Main Content */}\r\n-      <div className=\"flex gap-6 mt-6\">\r\n-        {/* Sidebar */}\r\n-        <ContentSidebar\r\n-          grades={grades}\r\n-          topics={topics}\r\n-          subtopics={subtopics}\r\n-          lessons={lessons}\r\n-          selectedGradeId={selectedGradeId}\r\n-          selectedTopicId={selectedTopicId}\r\n-          selectedSubtopicId={selectedSubtopicId}\r\n-          currentLessonId={currentLessonId}\r\n-          isViewMode={isViewMode}\r\n-          onGradeSelect={handleGradeSelect}\r\n-          onTopicSelect={handleTopicSelect}\r\n-          onSubtopicSelect={handleSubtopicSelect}\r\n-          onLessonSelect={setCurrentLessonId}\r\n-          onAddGrade={() => openModal('addGrade')}\r\n-          onAddTopic={() => openModal('addTopic')}\r\n-          onAddSubtopic={() => openModal('addSubtopic')}\r\n-          onAddLesson={() => openModal('addLesson')}\r\n-          isCollapsed={isSidebarCollapsed}\r\n-          isLocked={isSidebarLocked}\r\n-          onCollapsedChange={setIsSidebarCollapsed}\r\n-          onLockedChange={setIsSidebarLocked}\r\n-        />\r\n+        {/* Main Content */}\r\n+        <div className=\"flex gap-6 mt-6\">\r\n+          {/* Sidebar */}\r\n+          <ContentSidebar\r\n+            grades={grades}\r\n+            topics={topics}\r\n+            subtopics={subtopics}\r\n+            lessons={lessons}\r\n+            selectedGradeId={selectedGradeId}\r\n+            selectedTopicId={selectedTopicId}\r\n+            selectedSubtopicId={selectedSubtopicId}\r\n+            currentLessonId={currentLessonId}\r\n+            isViewMode={isViewMode}\r\n+            onGradeSelect={handleGradeSelect}\r\n+            onTopicSelect={handleTopicSelect}\r\n+            onSubtopicSelect={handleSubtopicSelect}\r\n+            onLessonSelect={setCurrentLessonId}\r\n+            onAddGrade={() => openModal('addGrade')}\r\n+            onAddTopic={() => openModal('addTopic')}\r\n+            onAddSubtopic={() => openModal('addSubtopic')}\r\n+            onAddLesson={() => openModal('addLesson')}\r\n+            isCollapsed={isSidebarCollapsed}\r\n+            isLocked={isSidebarLocked}\r\n+            onCollapsedChange={setIsSidebarCollapsed}\r\n+            onLockedChange={setIsSidebarLocked}\r\n+          />\r\n \r\n-        {/* Content Area */}\r\n-        <div className=\"flex-1\">\r\n-          {isNavigating ? (\r\n-            <div className=\"flex items-center justify-center h-[400px]\">\r\n-              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n-              <span className=\"ml-3\">Loading...</span>\r\n-            </div>\r\n-          ) : !currentLessonId ? (\r\n-            <div className=\"text-center py-20\">\r\n-              <h3 className=\"text-lg font-medium\">Select a Lesson</h3>\r\n-              <p className=\"text-sm text-muted-foreground\">\r\n-                Choose a lesson from the sidebar to start editing\r\n-              </p>\r\n-            </div>\r\n-          ) : (\r\n-            <div className=\"space-y-6\">\r\n-              {/* Lesson Editor */}\r\n-              <LessonEditor\r\n-                lessonTitle={lessonTitle}\r\n-                contentHeading={contentHeading}\r\n-                lessonContent={lessonContent}\r\n-                isContentEditorOpen={isContentEditorOpen}\r\n-                isEditingTitle={isEditingTitle}\r\n-                isEditingHeading={isEditingHeading}\r\n-                saveProgress={saveProgress}\r\n-                onTitleChange={setLessonTitle}\r\n-                onHeadingChange={setContentHeading}\r\n-                onContentChange={setLessonContent}\r\n-                onContentSave={saveLesson}\r\n-                setIsContentEditorOpen={setIsContentEditorOpen}\r\n-                setIsEditingTitle={setIsEditingTitle}\r\n-                setIsEditingHeading={setIsEditingHeading}\r\n-                onSave={saveLesson}\r\n-              />\r\n+          {/* Content Area */}\r\n+          <main \r\n+            ref={mainContentRef}\r\n+            tabIndex={-1}\r\n+            className=\"flex-1 focus:outline-none\"\r\n+            aria-label=\"Main content area\"\r\n+          >\r\n+            {isNavigating ? (\r\n+              <div \r\n+                className=\"flex items-center justify-center h-[400px]\"\r\n+                role=\"alert\"\r\n+                aria-busy=\"true\"\r\n+              >\r\n+                <div \r\n+                  className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"\r\n+                  aria-hidden=\"true\"\r\n+                />\r\n+                <span className=\"ml-3 sr-only\">Loading content...</span>\r\n+                <span className=\"ml-3\" aria-hidden=\"true\">Loading...</span>\r\n+              </div>\r\n+            ) : !currentLessonId ? (\r\n+              <div \r\n+                className=\"text-center py-20\"\r\n+                role=\"status\"\r\n+                aria-label=\"No lesson selected\"\r\n+              >\r\n+                <h3 className=\"text-lg font-medium\">Select a Lesson</h3>\r\n+                <p className=\"text-sm text-muted-foreground\">\r\n+                  Choose a lesson from the sidebar to start editing\r\n+                </p>\r\n+              </div>\r\n+            ) : (\r\n+              <div className=\"space-y-6\">\r\n+                {/* Lesson Editor */}\r\n+                <LessonEditor\r\n+                  lessonTitle={lessonTitle}\r\n+                  contentHeading={contentHeading}\r\n+                  lessonContent={lessonContent}\r\n+                  isContentEditorOpen={isContentEditorOpen}\r\n+                  isEditingTitle={isEditingTitle}\r\n+                  isEditingHeading={isEditingHeading}\r\n+                  saveProgress={saveProgress}\r\n+                  onTitleChange={setLessonTitle}\r\n+                  onHeadingChange={setContentHeading}\r\n+                  onContentChange={setLessonContent}\r\n+                  onContentSave={saveLesson}\r\n+                  setIsContentEditorOpen={setIsContentEditorOpen}\r\n+                  setIsEditingTitle={setIsEditingTitle}\r\n+                  setIsEditingHeading={setIsEditingHeading}\r\n+                  onSave={saveLesson}\r\n+                />\r\n \r\n-              {/* Questions and Activities Tabs */}\r\n-              <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as 'questions' | 'activities')}>\r\n-                <TabsList className=\"grid w-full grid-cols-2\">\r\n-                  <TabsTrigger value=\"questions\">\r\n-                    <MessageSquare className=\"h-4 w-4 mr-2\" />\r\n-                    Questions ({questions.length})\r\n-                  </TabsTrigger>\r\n-                  <TabsTrigger value=\"activities\">\r\n-                    <ActivityIcon className=\"h-4 w-4 mr-2\" />\r\n-                    Activities ({activities.length})\r\n-                  </TabsTrigger>\r\n-                </TabsList>\r\n+                {/* Questions and Activities Tabs */}\r\n+                <Tabs \r\n+                  value={activeTab} \r\n+                  onValueChange={(value: string) => setActiveTab(value as 'questions' | 'activities')}\r\n+                  className=\"rounded-lg border bg-card shadow-sm\"\r\n+                >\r\n+                  <TabsList className=\"grid w-full grid-cols-2 p-1\">\r\n+                    <TabsTrigger \r\n+                      value=\"questions\"\r\n+                      className=\"data-[state=active]:bg-primary data-[state=active]:text-primary-foreground\"\r\n+                    >\r\n+                      <MessageSquare className=\"h-4 w-4 mr-2\" aria-hidden=\"true\" />\r\n+                      <span>Questions</span>\r\n+                      <span className=\"ml-2 text-xs rounded-full bg-primary/10 px-2 py-0.5\">\r\n+                        {questions.length}\r\n+                      </span>\r\n+                    </TabsTrigger>\r\n+                    <TabsTrigger \r\n+                      value=\"activities\"\r\n+                      className=\"data-[state=active]:bg-primary data-[state=active]:text-primary-foreground\"\r\n+                    >\r\n+                      <ActivityIcon className=\"h-4 w-4 mr-2\" aria-hidden=\"true\" />\r\n+                      <span>Activities</span>\r\n+                      <span className=\"ml-2 text-xs rounded-full bg-primary/10 px-2 py-0.5\">\r\n+                        {activities.length}\r\n+                      </span>\r\n+                    </TabsTrigger>\r\n+                  </TabsList>\r\n \r\n-                <TabsContent value=\"questions\">\r\n-                  <QuestionList\r\n-                    questions={questions}\r\n-                    selectedQuestionType={selectedQuestionType}\r\n-                    questionSaveStatuses={questionSaveStatuses}\r\n-                    expandedQuestion={expandedQuestion}\r\n-                    onQuestionTypeChange={setSelectedQuestionType}\r\n-                    onAddQuestion={addQuestion}\r\n-                    onUpdateQuestion={updateQuestion}\r\n-                    onRemoveQuestion={removeQuestion}\r\n-                    onSaveQuestion={saveQuestion}\r\n-                    onExpandQuestion={setExpandedQuestion}\r\n-                  />\r\n-                </TabsContent>\r\n+                  <TabsContent \r\n+                    value=\"questions\"\r\n+                    className=\"p-4 border-t\"\r\n+                    role=\"tabpanel\"\r\n+                    aria-label=\"Questions panel\"\r\n+                  >\r\n+                    <QuestionList\r\n+                      questions={questions}\r\n+                      selectedQuestionType={selectedQuestionType}\r\n+                      questionSaveStatuses={questionSaveStatuses}\r\n+                      expandedQuestion={expandedQuestion}\r\n+                      onQuestionTypeChange={setSelectedQuestionType}\r\n+                      onAddQuestion={addQuestion}\r\n+                      onUpdateQuestion={updateQuestion}\r\n+                      onRemoveQuestion={removeQuestion}\r\n+                      onSaveQuestion={saveQuestion}\r\n+                      onExpandQuestion={setExpandedQuestion}\r\n+                    />\r\n+                  </TabsContent>\r\n \r\n-                <TabsContent value=\"activities\">\r\n-                  <ActivityList\r\n-                    activities={activities}\r\n-                    activitySaveStatuses={activitySaveStatuses}\r\n-                    expandedActivity={expandedActivity}\r\n-                    onAddActivity={addActivity}\r\n-                    onUpdateActivity={updateActivity}\r\n-                    onRemoveActivity={removeActivity}\r\n-                    onSaveActivity={saveActivity}\r\n-                    onExpandActivity={setExpandedActivity}\r\n-                  />\r\n-                </TabsContent>\r\n-              </Tabs>\r\n-            </div>\r\n-          )}\r\n+                  <TabsContent \r\n+                    value=\"activities\"\r\n+                    className=\"p-4 border-t\"\r\n+                    role=\"tabpanel\"\r\n+                    aria-label=\"Activities panel\"\r\n+                  >\r\n+                    <ActivityList\r\n+                      activities={activities}\r\n+                      activitySaveStatuses={activitySaveStatuses}\r\n+                      expandedActivity={expandedActivity}\r\n+                      onAddActivity={addActivity}\r\n+                      onUpdateActivity={updateActivity}\r\n+                      onRemoveActivity={removeActivity}\r\n+                      onSaveActivity={saveActivity}\r\n+                      onExpandActivity={setExpandedActivity}\r\n+                    />\r\n+                  </TabsContent>\r\n+                </Tabs>\r\n+              </div>\r\n+            )}\r\n+          </main>\r\n         </div>\r\n       </div>\r\n \r\n       {/* Modals */}\r\n@@ -293,8 +372,11 @@\n         onClose={closeModal}\r\n         onSubmit={modalHandlers}\r\n       />\r\n \r\n+      {/* Progress Indicator */}\r\n+      <ProgressIndicator status={saveProgress} />\r\n+\r\n       <Toaster />\r\n     </div>\r\n   );\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1740090712945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import { ContentSidebar } from './components/layout/ContentSidebar';\r\n import { ContentBreadcrumbs } from './components/layout/ContentBreadcrumbs';\r\n import { LessonEditor } from './components/lesson/LessonEditor';\r\n import { QuestionList } from './components/questions/QuestionList';\r\n-import { ActivityList } from './components/activities/ActivityList';\r\n+import { ActivityList } from './components/activities/';\r\n import { ContentModals } from './components/layout/ContentModals';\r\n import { KeyboardShortcutsDialog } from './components/shared/KeyboardShortcutsDialog';\r\n import { ProgressIndicator } from './components/shared/ProgressIndicator';\r\n import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\n"
                },
                {
                    "date": 1740090722146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import { ContentSidebar } from './components/layout/ContentSidebar';\r\n import { ContentBreadcrumbs } from './components/layout/ContentBreadcrumbs';\r\n import { LessonEditor } from './components/lesson/LessonEditor';\r\n import { QuestionList } from './components/questions/QuestionList';\r\n-import { ActivityList } from './components/activities/';\r\n+import { ActivityList } from './components/activities/ActivityList';\r\n import { ContentModals } from './components/layout/ContentModals';\r\n import { KeyboardShortcutsDialog } from './components/shared/KeyboardShortcutsDialog';\r\n import { ProgressIndicator } from './components/shared/ProgressIndicator';\r\n import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\n"
                },
                {
                    "date": 1740090846640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,37 +1,25 @@\n \"use client\";\r\n \r\n-import { useState, useRef, useEffect } from 'react';\r\n+import { useState } from 'react';\r\n import { Toaster } from 'sonner';\r\n import { ContentHeader } from './components/layout/ContentHeader';\r\n import { ContentSidebar } from './components/layout/ContentSidebar';\r\n-import { ContentBreadcrumbs } from './components/layout/ContentBreadcrumbs';\r\n import { LessonEditor } from './components/lesson/LessonEditor';\r\n import { QuestionList } from './components/questions/QuestionList';\r\n-import { ActivityList } from './components/activities/ActivityList';\r\n import { ContentModals } from './components/layout/ContentModals';\r\n-import { KeyboardShortcutsDialog } from './components/shared/KeyboardShortcutsDialog';\r\n-import { ProgressIndicator } from './components/shared/ProgressIndicator';\r\n import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\n import { ActivityIcon, MessageSquare } from 'lucide-react';\r\n import { useContentState } from './hooks/useContentState';\r\n import { useLessonEditor } from './hooks/useLessonEditor';\r\n import { useQuestionManager } from './hooks/useQuestionManager';\r\n-import { useActivityManager } from './hooks/useActivityManager';\r\n import { useContentModals } from './hooks/useContentModals';\r\n-import { useKeyboardShortcuts } from './hooks/useKeyboardShortcuts';\r\n-import { useAccessibilityAnnouncer } from './hooks/useAccessibilityAnnouncer';\r\n \r\n export default function ContentManagementPage() {\r\n   // UI State\r\n   const [showHelpTips, setShowHelpTips] = useState(true);\r\n   const [isViewMode, setIsViewMode] = useState(true);\r\n   const [isNavigating, setIsNavigating] = useState(false);\r\n-  const [showShortcuts, setShowShortcuts] = useState(false);\r\n-  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\r\n-  const [isSidebarLocked, setIsSidebarLocked] = useState(true);\r\n-  const [activeTab, setActiveTab] = useState<'questions' | 'activities'>('questions');\r\n-  const shortcutsButtonRef = useRef<HTMLButtonElement>(null);\r\n \r\n   // Content Management State\r\n   const {\r\n     selectedGradeId,\r\n@@ -82,21 +70,8 @@\n     updateQuestion,\r\n     removeQuestion,\r\n   } = useQuestionManager(currentLessonId);\r\n \r\n-  // Activity Manager State\r\n-  const {\r\n-    activities,\r\n-    activitySaveStatuses,\r\n-    expandedActivity,\r\n-    setActivities,\r\n-    setExpandedActivity,\r\n-    addActivity,\r\n-    updateActivity,\r\n-    removeActivity,\r\n-    saveActivity,\r\n-  } = useActivityManager(currentLessonId);\r\n-\r\n   // Modal Management\r\n   const {\r\n     modalState,\r\n     openModal,\r\n@@ -108,262 +83,115 @@\n     selectedSubtopicId,\r\n     onSuccess: refreshContent\r\n   });\r\n \r\n-  // Keyboard Shortcuts\r\n-  useKeyboardShortcuts({\r\n-    onSave: saveLesson,\r\n-    onToggleEditMode: () => setIsViewMode(!isViewMode),\r\n-    onToggleHelpTips: () => setShowHelpTips(!showHelpTips),\r\n-    onToggleShortcuts: () => shortcutsButtonRef.current?.click(),\r\n-    onToggleContentEditor: () => setIsContentEditorOpen(!isContentEditorOpen),\r\n-    onSaveContent: saveLesson,\r\n-    onCollapseSidebar: () => setIsSidebarCollapsed(true),\r\n-    onExpandSidebar: () => setIsSidebarCollapsed(false),\r\n-    onToggleSidebarLock: () => setIsSidebarLocked(!isSidebarLocked),\r\n-    onSwitchToQuestions: () => setActiveTab('questions'),\r\n-    onSwitchToActivities: () => setActiveTab('activities'),\r\n-    onAddNew: () => activeTab === 'questions' ? addQuestion() : addActivity(),\r\n-    isContentEditorOpen\r\n-  });\r\n-\r\n-  // Accessibility\r\n-  const { announce } = useAccessibilityAnnouncer();\r\n-  const mainContentRef = useRef<HTMLDivElement>(null);\r\n-\r\n-  // Focus management\r\n-  useEffect(() => {\r\n-    if (currentLessonId) {\r\n-      mainContentRef.current?.focus();\r\n-      announce(`Loaded lesson: ${lessonTitle || 'Untitled Lesson'}`);\r\n-    }\r\n-  }, [currentLessonId, lessonTitle, announce]);\r\n-\r\n-  // Announce save status changes\r\n-  useEffect(() => {\r\n-    if (saveProgress === 'saving') {\r\n-      announce('Saving changes...', 'polite');\r\n-    } else if (saveProgress === 'saved') {\r\n-      announce('Changes saved successfully', 'polite');\r\n-    } else if (saveProgress === 'error') {\r\n-      announce('Error saving changes', 'assertive');\r\n-    }\r\n-  }, [saveProgress, announce]);\r\n-\r\n-  // Announce tab changes\r\n-  useEffect(() => {\r\n-    announce(`Switched to ${activeTab} tab`);\r\n-  }, [activeTab, announce]);\r\n-\r\n-  // Breadcrumb items\r\n-  const breadcrumbItems = [\r\n-    {\r\n-      label: 'Grades',\r\n-      onClick: () => {\r\n-        handleGradeSelect('');\r\n-      },\r\n-      isActive: !selectedGradeId\r\n-    },\r\n-    selectedGradeId && {\r\n-      label: grades.find(g => g.id === selectedGradeId)?.name || 'Grade',\r\n-      onClick: () => {\r\n-        handleTopicSelect('');\r\n-      },\r\n-      isActive: selectedGradeId && !selectedTopicId\r\n-    },\r\n-    selectedTopicId && {\r\n-      label: topics.find(t => t.id === selectedTopicId)?.title || 'Topic',\r\n-      onClick: () => {\r\n-        handleSubtopicSelect('');\r\n-      },\r\n-      isActive: selectedTopicId && !selectedSubtopicId\r\n-    },\r\n-    selectedSubtopicId && {\r\n-      label: subtopics.find(s => s.id === selectedSubtopicId)?.title || 'Subtopic',\r\n-      onClick: () => {\r\n-        setCurrentLessonId(null);\r\n-      },\r\n-      isActive: selectedSubtopicId && !currentLessonId\r\n-    },\r\n-    currentLessonId && {\r\n-      label: lessonTitle || 'Lesson',\r\n-      onClick: () => {},\r\n-      isActive: true\r\n-    }\r\n-  ].filter(Boolean) as { label: string; onClick: () => void; isActive?: boolean }[];\r\n-\r\n   return (\r\n-    <div \r\n-      className=\"min-h-screen bg-background\"\r\n-      role=\"application\"\r\n-      aria-label=\"Content Management System\"\r\n-    >\r\n-      <div className=\"container mx-auto py-8 px-4 sm:px-6 lg:px-8\">\r\n-        {/* Header */}\r\n-        <div className=\"space-y-4\">\r\n-          <ContentHeader\r\n-            showHelpTips={showHelpTips}\r\n-            onToggleHelpTips={() => setShowHelpTips(!showHelpTips)}\r\n-            onRefresh={() => loadLessonContent(currentLessonId || '')}\r\n-            isViewMode={isViewMode}\r\n-            onToggleViewMode={() => setIsViewMode(!isViewMode)}\r\n-            saveProgress={saveProgress}\r\n-          >\r\n-            <KeyboardShortcutsDialog ref={shortcutsButtonRef} />\r\n-          </ContentHeader>\r\n+    <div className=\"container mx-auto py-8\">\r\n+      {/* Header */}\r\n+      <ContentHeader\r\n+        showHelpTips={showHelpTips}\r\n+        onToggleHelpTips={() => setShowHelpTips(!showHelpTips)}\r\n+        onRefresh={() => loadLessonContent(currentLessonId || '')}\r\n+        isViewMode={isViewMode}\r\n+        onToggleViewMode={() => setIsViewMode(!isViewMode)}\r\n+        saveProgress={saveProgress}\r\n+      />\r\n \r\n-          <ContentBreadcrumbs items={breadcrumbItems} />\r\n-        </div>\r\n+      {/* Main Content */}\r\n+      <div className=\"flex gap-6 mt-6\">\r\n+        {/* Sidebar */}\r\n+        <ContentSidebar\r\n+          grades={grades}\r\n+          topics={topics}\r\n+          subtopics={subtopics}\r\n+          lessons={lessons}\r\n+          selectedGradeId={selectedGradeId}\r\n+          selectedTopicId={selectedTopicId}\r\n+          selectedSubtopicId={selectedSubtopicId}\r\n+          currentLessonId={currentLessonId}\r\n+          isViewMode={isViewMode}\r\n+          onGradeSelect={handleGradeSelect}\r\n+          onTopicSelect={handleTopicSelect}\r\n+          onSubtopicSelect={handleSubtopicSelect}\r\n+          onLessonSelect={setCurrentLessonId}\r\n+          onAddGrade={() => openModal('addGrade')}\r\n+          onAddTopic={() => openModal('addTopic')}\r\n+          onAddSubtopic={() => openModal('addSubtopic')}\r\n+          onAddLesson={() => openModal('addLesson')}\r\n+        />\r\n \r\n-        {/* Main Content */}\r\n-        <div className=\"flex gap-6 mt-6\">\r\n-          {/* Sidebar */}\r\n-          <ContentSidebar\r\n-            grades={grades}\r\n-            topics={topics}\r\n-            subtopics={subtopics}\r\n-            lessons={lessons}\r\n-            selectedGradeId={selectedGradeId}\r\n-            selectedTopicId={selectedTopicId}\r\n-            selectedSubtopicId={selectedSubtopicId}\r\n-            currentLessonId={currentLessonId}\r\n-            isViewMode={isViewMode}\r\n-            onGradeSelect={handleGradeSelect}\r\n-            onTopicSelect={handleTopicSelect}\r\n-            onSubtopicSelect={handleSubtopicSelect}\r\n-            onLessonSelect={setCurrentLessonId}\r\n-            onAddGrade={() => openModal('addGrade')}\r\n-            onAddTopic={() => openModal('addTopic')}\r\n-            onAddSubtopic={() => openModal('addSubtopic')}\r\n-            onAddLesson={() => openModal('addLesson')}\r\n-            isCollapsed={isSidebarCollapsed}\r\n-            isLocked={isSidebarLocked}\r\n-            onCollapsedChange={setIsSidebarCollapsed}\r\n-            onLockedChange={setIsSidebarLocked}\r\n-          />\r\n+        {/* Content Area */}\r\n+        <div className=\"flex-1\">\r\n+          {isNavigating ? (\r\n+            <div className=\"flex items-center justify-center h-[400px]\">\r\n+              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n+              <span className=\"ml-3\">Loading...</span>\r\n+            </div>\r\n+          ) : !currentLessonId ? (\r\n+            <div className=\"text-center py-20\">\r\n+              <h3 className=\"text-lg font-medium\">Select a Lesson</h3>\r\n+              <p className=\"text-sm text-muted-foreground\">\r\n+                Choose a lesson from the sidebar to start editing\r\n+              </p>\r\n+            </div>\r\n+          ) : (\r\n+            <div className=\"space-y-6\">\r\n+              {/* Lesson Editor */}\r\n+              <LessonEditor\r\n+                lessonTitle={lessonTitle}\r\n+                contentHeading={contentHeading}\r\n+                lessonContent={lessonContent}\r\n+                isContentEditorOpen={isContentEditorOpen}\r\n+                isEditingTitle={isEditingTitle}\r\n+                isEditingHeading={isEditingHeading}\r\n+                saveProgress={saveProgress}\r\n+                onTitleChange={setLessonTitle}\r\n+                onHeadingChange={setContentHeading}\r\n+                onContentChange={setLessonContent}\r\n+                onContentSave={saveLesson}\r\n+                setIsContentEditorOpen={setIsContentEditorOpen}\r\n+                setIsEditingTitle={setIsEditingTitle}\r\n+                setIsEditingHeading={setIsEditingHeading}\r\n+                onSave={saveLesson}\r\n+              />\r\n \r\n-          {/* Content Area */}\r\n-          <main \r\n-            ref={mainContentRef}\r\n-            tabIndex={-1}\r\n-            className=\"flex-1 focus:outline-none\"\r\n-            aria-label=\"Main content area\"\r\n-          >\r\n-            {isNavigating ? (\r\n-              <div \r\n-                className=\"flex items-center justify-center h-[400px]\"\r\n-                role=\"alert\"\r\n-                aria-busy=\"true\"\r\n-              >\r\n-                <div \r\n-                  className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"\r\n-                  aria-hidden=\"true\"\r\n-                />\r\n-                <span className=\"ml-3 sr-only\">Loading content...</span>\r\n-                <span className=\"ml-3\" aria-hidden=\"true\">Loading...</span>\r\n-              </div>\r\n-            ) : !currentLessonId ? (\r\n-              <div \r\n-                className=\"text-center py-20\"\r\n-                role=\"status\"\r\n-                aria-label=\"No lesson selected\"\r\n-              >\r\n-                <h3 className=\"text-lg font-medium\">Select a Lesson</h3>\r\n-                <p className=\"text-sm text-muted-foreground\">\r\n-                  Choose a lesson from the sidebar to start editing\r\n-                </p>\r\n-              </div>\r\n-            ) : (\r\n-              <div className=\"space-y-6\">\r\n-                {/* Lesson Editor */}\r\n-                <LessonEditor\r\n-                  lessonTitle={lessonTitle}\r\n-                  contentHeading={contentHeading}\r\n-                  lessonContent={lessonContent}\r\n-                  isContentEditorOpen={isContentEditorOpen}\r\n-                  isEditingTitle={isEditingTitle}\r\n-                  isEditingHeading={isEditingHeading}\r\n-                  saveProgress={saveProgress}\r\n-                  onTitleChange={setLessonTitle}\r\n-                  onHeadingChange={setContentHeading}\r\n-                  onContentChange={setLessonContent}\r\n-                  onContentSave={saveLesson}\r\n-                  setIsContentEditorOpen={setIsContentEditorOpen}\r\n-                  setIsEditingTitle={setIsEditingTitle}\r\n-                  setIsEditingHeading={setIsEditingHeading}\r\n-                  onSave={saveLesson}\r\n-                />\r\n+              {/* Questions and Activities Tabs */}\r\n+              <Tabs defaultValue=\"questions\">\r\n+                <TabsList className=\"grid w-full grid-cols-2\">\r\n+                  <TabsTrigger value=\"questions\">\r\n+                    <MessageSquare className=\"h-4 w-4 mr-2\" />\r\n+                    Questions\r\n+                  </TabsTrigger>\r\n+                  <TabsTrigger value=\"activities\">\r\n+                    <ActivityIcon className=\"h-4 w-4 mr-2\" />\r\n+                    Activities\r\n+                  </TabsTrigger>\r\n+                </TabsList>\r\n \r\n-                {/* Questions and Activities Tabs */}\r\n-                <Tabs \r\n-                  value={activeTab} \r\n-                  onValueChange={(value: string) => setActiveTab(value as 'questions' | 'activities')}\r\n-                  className=\"rounded-lg border bg-card shadow-sm\"\r\n-                >\r\n-                  <TabsList className=\"grid w-full grid-cols-2 p-1\">\r\n-                    <TabsTrigger \r\n-                      value=\"questions\"\r\n-                      className=\"data-[state=active]:bg-primary data-[state=active]:text-primary-foreground\"\r\n-                    >\r\n-                      <MessageSquare className=\"h-4 w-4 mr-2\" aria-hidden=\"true\" />\r\n-                      <span>Questions</span>\r\n-                      <span className=\"ml-2 text-xs rounded-full bg-primary/10 px-2 py-0.5\">\r\n-                        {questions.length}\r\n-                      </span>\r\n-                    </TabsTrigger>\r\n-                    <TabsTrigger \r\n-                      value=\"activities\"\r\n-                      className=\"data-[state=active]:bg-primary data-[state=active]:text-primary-foreground\"\r\n-                    >\r\n-                      <ActivityIcon className=\"h-4 w-4 mr-2\" aria-hidden=\"true\" />\r\n-                      <span>Activities</span>\r\n-                      <span className=\"ml-2 text-xs rounded-full bg-primary/10 px-2 py-0.5\">\r\n-                        {activities.length}\r\n-                      </span>\r\n-                    </TabsTrigger>\r\n-                  </TabsList>\r\n+                <TabsContent value=\"questions\">\r\n+                  <QuestionList\r\n+                    questions={questions}\r\n+                    selectedQuestionType={selectedQuestionType}\r\n+                    questionSaveStatuses={questionSaveStatuses}\r\n+                    expandedQuestion={expandedQuestion}\r\n+                    onQuestionTypeChange={setSelectedQuestionType}\r\n+                    onAddQuestion={addQuestion}\r\n+                    onUpdateQuestion={updateQuestion}\r\n+                    onRemoveQuestion={removeQuestion}\r\n+                    onSaveQuestion={saveQuestion}\r\n+                    onExpandQuestion={setExpandedQuestion}\r\n+                  />\r\n+                </TabsContent>\r\n \r\n-                  <TabsContent \r\n-                    value=\"questions\"\r\n-                    className=\"p-4 border-t\"\r\n-                    role=\"tabpanel\"\r\n-                    aria-label=\"Questions panel\"\r\n-                  >\r\n-                    <QuestionList\r\n-                      questions={questions}\r\n-                      selectedQuestionType={selectedQuestionType}\r\n-                      questionSaveStatuses={questionSaveStatuses}\r\n-                      expandedQuestion={expandedQuestion}\r\n-                      onQuestionTypeChange={setSelectedQuestionType}\r\n-                      onAddQuestion={addQuestion}\r\n-                      onUpdateQuestion={updateQuestion}\r\n-                      onRemoveQuestion={removeQuestion}\r\n-                      onSaveQuestion={saveQuestion}\r\n-                      onExpandQuestion={setExpandedQuestion}\r\n-                    />\r\n-                  </TabsContent>\r\n-\r\n-                  <TabsContent \r\n-                    value=\"activities\"\r\n-                    className=\"p-4 border-t\"\r\n-                    role=\"tabpanel\"\r\n-                    aria-label=\"Activities panel\"\r\n-                  >\r\n-                    <ActivityList\r\n-                      activities={activities}\r\n-                      activitySaveStatuses={activitySaveStatuses}\r\n-                      expandedActivity={expandedActivity}\r\n-                      onAddActivity={addActivity}\r\n-                      onUpdateActivity={updateActivity}\r\n-                      onRemoveActivity={removeActivity}\r\n-                      onSaveActivity={saveActivity}\r\n-                      onExpandActivity={setExpandedActivity}\r\n-                    />\r\n-                  </TabsContent>\r\n-                </Tabs>\r\n-              </div>\r\n-            )}\r\n-          </main>\r\n+                <TabsContent value=\"activities\">\r\n+                  {/* TODO: Add Activities List component */}\r\n+                  <div className=\"text-center py-8 text-muted-foreground\">\r\n+                    Activities management coming soon...\r\n+                  </div>\r\n+                </TabsContent>\r\n+              </Tabs>\r\n+            </div>\r\n+          )}\r\n         </div>\r\n       </div>\r\n \r\n       {/* Modals */}\r\n@@ -372,11 +200,8 @@\n         onClose={closeModal}\r\n         onSubmit={modalHandlers}\r\n       />\r\n \r\n-      {/* Progress Indicator */}\r\n-      <ProgressIndicator status={saveProgress} />\r\n-\r\n       <Toaster />\r\n     </div>\r\n   );\r\n-} \n\\ No newline at end of file\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740090875969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,25 +1,37 @@\n \"use client\";\r\n \r\n-import { useState } from 'react';\r\n+import { useState, useRef, useEffect } from 'react';\r\n import { Toaster } from 'sonner';\r\n import { ContentHeader } from './components/layout/ContentHeader';\r\n import { ContentSidebar } from './components/layout/ContentSidebar';\r\n+import { ContentBreadcrumbs } from './components/layout/ContentBreadcrumbs';\r\n import { LessonEditor } from './components/lesson/LessonEditor';\r\n import { QuestionList } from './components/questions/QuestionList';\r\n+import { ActivityList } from './components/activities/ActivityList';\r\n import { ContentModals } from './components/layout/ContentModals';\r\n+import { KeyboardShortcutsDialog } from './components/shared/KeyboardShortcutsDialog';\r\n+import { ProgressIndicator } from './components/shared/ProgressIndicator';\r\n import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\n import { ActivityIcon, MessageSquare } from 'lucide-react';\r\n import { useContentState } from './hooks/useContentState';\r\n import { useLessonEditor } from './hooks/useLessonEditor';\r\n import { useQuestionManager } from './hooks/useQuestionManager';\r\n+import { useActivityManager } from './hooks/useActivityManager';\r\n import { useContentModals } from './hooks/useContentModals';\r\n+import { useKeyboardShortcuts } from './hooks/useKeyboardShortcuts';\r\n+import { useAccessibilityAnnouncer } from './hooks/useAccessibilityAnnouncer';\r\n \r\n export default function ContentManagementPage() {\r\n   // UI State\r\n   const [showHelpTips, setShowHelpTips] = useState(true);\r\n   const [isViewMode, setIsViewMode] = useState(true);\r\n   const [isNavigating, setIsNavigating] = useState(false);\r\n+  const [showShortcuts, setShowShortcuts] = useState(false);\r\n+  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\r\n+  const [isSidebarLocked, setIsSidebarLocked] = useState(true);\r\n+  const [activeTab, setActiveTab] = useState<'questions' | 'activities'>('questions');\r\n+  const shortcutsButtonRef = useRef<HTMLButtonElement>(null);\r\n \r\n   // Content Management State\r\n   const {\r\n     selectedGradeId,\r\n@@ -70,8 +82,21 @@\n     updateQuestion,\r\n     removeQuestion,\r\n   } = useQuestionManager(currentLessonId);\r\n \r\n+  // Activity Manager State\r\n+  const {\r\n+    activities,\r\n+    activitySaveStatuses,\r\n+    expandedActivity,\r\n+    setActivities,\r\n+    setExpandedActivity,\r\n+    addActivity,\r\n+    updateActivity,\r\n+    removeActivity,\r\n+    saveActivity,\r\n+  } = useActivityManager(currentLessonId);\r\n+\r\n   // Modal Management\r\n   const {\r\n     modalState,\r\n     openModal,\r\n@@ -83,115 +108,262 @@\n     selectedSubtopicId,\r\n     onSuccess: refreshContent\r\n   });\r\n \r\n+  // Keyboard Shortcuts\r\n+  useKeyboardShortcuts({\r\n+    onSave: saveLesson,\r\n+    onToggleEditMode: () => setIsViewMode(!isViewMode),\r\n+    onToggleHelpTips: () => setShowHelpTips(!showHelpTips),\r\n+    onToggleShortcuts: () => shortcutsButtonRef.current?.click(),\r\n+    onToggleContentEditor: () => setIsContentEditorOpen(!isContentEditorOpen),\r\n+    onSaveContent: saveLesson,\r\n+    onCollapseSidebar: () => setIsSidebarCollapsed(true),\r\n+    onExpandSidebar: () => setIsSidebarCollapsed(false),\r\n+    onToggleSidebarLock: () => setIsSidebarLocked(!isSidebarLocked),\r\n+    onSwitchToQuestions: () => setActiveTab('questions'),\r\n+    onSwitchToActivities: () => setActiveTab('activities'),\r\n+    onAddNew: () => activeTab === 'questions' ? addQuestion() : addActivity(),\r\n+    isContentEditorOpen\r\n+  });\r\n+\r\n+  // Accessibility\r\n+  const { announce } = useAccessibilityAnnouncer();\r\n+  const mainContentRef = useRef<HTMLDivElement>(null);\r\n+\r\n+  // Focus management\r\n+  useEffect(() => {\r\n+    if (currentLessonId) {\r\n+      mainContentRef.current?.focus();\r\n+      announce(`Loaded lesson: ${lessonTitle || 'Untitled Lesson'}`);\r\n+    }\r\n+  }, [currentLessonId, lessonTitle, announce]);\r\n+\r\n+  // Announce save status changes\r\n+  useEffect(() => {\r\n+    if (saveProgress === 'saving') {\r\n+      announce('Saving changes...', 'polite');\r\n+    } else if (saveProgress === 'saved') {\r\n+      announce('Changes saved successfully', 'polite');\r\n+    } else if (saveProgress === 'error') {\r\n+      announce('Error saving changes', 'assertive');\r\n+    }\r\n+  }, [saveProgress, announce]);\r\n+\r\n+  // Announce tab changes\r\n+  useEffect(() => {\r\n+    announce(`Switched to ${activeTab} tab`);\r\n+  }, [activeTab, announce]);\r\n+\r\n+  // Breadcrumb items\r\n+  const breadcrumbItems = [\r\n+    {\r\n+      label: 'Grades',\r\n+      onClick: () => {\r\n+        handleGradeSelect('');\r\n+      },\r\n+      isActive: !selectedGradeId\r\n+    },\r\n+    selectedGradeId && {\r\n+      label: grades.find(g => g.id === selectedGradeId)?.name || 'Grade',\r\n+      onClick: () => {\r\n+        handleTopicSelect('');\r\n+      },\r\n+      isActive: selectedGradeId && !selectedTopicId\r\n+    },\r\n+    selectedTopicId && {\r\n+      label: topics.find(t => t.id === selectedTopicId)?.title || 'Topic',\r\n+      onClick: () => {\r\n+        handleSubtopicSelect('');\r\n+      },\r\n+      isActive: selectedTopicId && !selectedSubtopicId\r\n+    },\r\n+    selectedSubtopicId && {\r\n+      label: subtopics.find(s => s.id === selectedSubtopicId)?.title || 'Subtopic',\r\n+      onClick: () => {\r\n+        setCurrentLessonId(null);\r\n+      },\r\n+      isActive: selectedSubtopicId && !currentLessonId\r\n+    },\r\n+    currentLessonId && {\r\n+      label: lessonTitle || 'Lesson',\r\n+      onClick: () => {},\r\n+      isActive: true\r\n+    }\r\n+  ].filter(Boolean) as { label: string; onClick: () => void; isActive?: boolean }[];\r\n+\r\n   return (\r\n-    <div className=\"container mx-auto py-8\">\r\n-      {/* Header */}\r\n-      <ContentHeader\r\n-        showHelpTips={showHelpTips}\r\n-        onToggleHelpTips={() => setShowHelpTips(!showHelpTips)}\r\n-        onRefresh={() => loadLessonContent(currentLessonId || '')}\r\n-        isViewMode={isViewMode}\r\n-        onToggleViewMode={() => setIsViewMode(!isViewMode)}\r\n-        saveProgress={saveProgress}\r\n-      />\r\n+    <div \r\n+      className=\"min-h-screen bg-background\"\r\n+      role=\"application\"\r\n+      aria-label=\"Content Management System\"\r\n+    >\r\n+      <div className=\"container mx-auto py-8 px-4 sm:px-6 lg:px-8\">\r\n+        {/* Header */}\r\n+        <div className=\"space-y-4\">\r\n+          <ContentHeader\r\n+            showHelpTips={showHelpTips}\r\n+            onToggleHelpTips={() => setShowHelpTips(!showHelpTips)}\r\n+            onRefresh={() => loadLessonContent(currentLessonId || '')}\r\n+            isViewMode={isViewMode}\r\n+            onToggleViewMode={() => setIsViewMode(!isViewMode)}\r\n+            saveProgress={saveProgress}\r\n+          >\r\n+            <KeyboardShortcutsDialog ref={shortcutsButtonRef} />\r\n+          </ContentHeader>\r\n \r\n-      {/* Main Content */}\r\n-      <div className=\"flex gap-6 mt-6\">\r\n-        {/* Sidebar */}\r\n-        <ContentSidebar\r\n-          grades={grades}\r\n-          topics={topics}\r\n-          subtopics={subtopics}\r\n-          lessons={lessons}\r\n-          selectedGradeId={selectedGradeId}\r\n-          selectedTopicId={selectedTopicId}\r\n-          selectedSubtopicId={selectedSubtopicId}\r\n-          currentLessonId={currentLessonId}\r\n-          isViewMode={isViewMode}\r\n-          onGradeSelect={handleGradeSelect}\r\n-          onTopicSelect={handleTopicSelect}\r\n-          onSubtopicSelect={handleSubtopicSelect}\r\n-          onLessonSelect={setCurrentLessonId}\r\n-          onAddGrade={() => openModal('addGrade')}\r\n-          onAddTopic={() => openModal('addTopic')}\r\n-          onAddSubtopic={() => openModal('addSubtopic')}\r\n-          onAddLesson={() => openModal('addLesson')}\r\n-        />\r\n+          <ContentBreadcrumbs items={breadcrumbItems} />\r\n+        </div>\r\n \r\n-        {/* Content Area */}\r\n-        <div className=\"flex-1\">\r\n-          {isNavigating ? (\r\n-            <div className=\"flex items-center justify-center h-[400px]\">\r\n-              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n-              <span className=\"ml-3\">Loading...</span>\r\n-            </div>\r\n-          ) : !currentLessonId ? (\r\n-            <div className=\"text-center py-20\">\r\n-              <h3 className=\"text-lg font-medium\">Select a Lesson</h3>\r\n-              <p className=\"text-sm text-muted-foreground\">\r\n-                Choose a lesson from the sidebar to start editing\r\n-              </p>\r\n-            </div>\r\n-          ) : (\r\n-            <div className=\"space-y-6\">\r\n-              {/* Lesson Editor */}\r\n-              <LessonEditor\r\n-                lessonTitle={lessonTitle}\r\n-                contentHeading={contentHeading}\r\n-                lessonContent={lessonContent}\r\n-                isContentEditorOpen={isContentEditorOpen}\r\n-                isEditingTitle={isEditingTitle}\r\n-                isEditingHeading={isEditingHeading}\r\n-                saveProgress={saveProgress}\r\n-                onTitleChange={setLessonTitle}\r\n-                onHeadingChange={setContentHeading}\r\n-                onContentChange={setLessonContent}\r\n-                onContentSave={saveLesson}\r\n-                setIsContentEditorOpen={setIsContentEditorOpen}\r\n-                setIsEditingTitle={setIsEditingTitle}\r\n-                setIsEditingHeading={setIsEditingHeading}\r\n-                onSave={saveLesson}\r\n-              />\r\n+        {/* Main Content */}\r\n+        <div className=\"flex gap-6 mt-6\">\r\n+          {/* Sidebar */}\r\n+          <ContentSidebar\r\n+            grades={grades}\r\n+            topics={topics}\r\n+            subtopics={subtopics}\r\n+            lessons={lessons}\r\n+            selectedGradeId={selectedGradeId}\r\n+            selectedTopicId={selectedTopicId}\r\n+            selectedSubtopicId={selectedSubtopicId}\r\n+            currentLessonId={currentLessonId}\r\n+            isViewMode={isViewMode}\r\n+            onGradeSelect={handleGradeSelect}\r\n+            onTopicSelect={handleTopicSelect}\r\n+            onSubtopicSelect={handleSubtopicSelect}\r\n+            onLessonSelect={setCurrentLessonId}\r\n+            onAddGrade={() => openModal('addGrade')}\r\n+            onAddTopic={() => openModal('addTopic')}\r\n+            onAddSubtopic={() => openModal('addSubtopic')}\r\n+            onAddLesson={() => openModal('addLesson')}\r\n+            isCollapsed={isSidebarCollapsed}\r\n+            isLocked={isSidebarLocked}\r\n+            onCollapsedChange={setIsSidebarCollapsed}\r\n+            onLockedChange={setIsSidebarLocked}\r\n+          />\r\n \r\n-              {/* Questions and Activities Tabs */}\r\n-              <Tabs defaultValue=\"questions\">\r\n-                <TabsList className=\"grid w-full grid-cols-2\">\r\n-                  <TabsTrigger value=\"questions\">\r\n-                    <MessageSquare className=\"h-4 w-4 mr-2\" />\r\n-                    Questions\r\n-                  </TabsTrigger>\r\n-                  <TabsTrigger value=\"activities\">\r\n-                    <ActivityIcon className=\"h-4 w-4 mr-2\" />\r\n-                    Activities\r\n-                  </TabsTrigger>\r\n-                </TabsList>\r\n+          {/* Content Area */}\r\n+          <main \r\n+            ref={mainContentRef}\r\n+            tabIndex={-1}\r\n+            className=\"flex-1 focus:outline-none\"\r\n+            aria-label=\"Main content area\"\r\n+          >\r\n+            {isNavigating ? (\r\n+              <div \r\n+                className=\"flex items-center justify-center h-[400px]\"\r\n+                role=\"alert\"\r\n+                aria-busy=\"true\"\r\n+              >\r\n+                <div \r\n+                  className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"\r\n+                  aria-hidden=\"true\"\r\n+                />\r\n+                <span className=\"ml-3 sr-only\">Loading content...</span>\r\n+                <span className=\"ml-3\" aria-hidden=\"true\">Loading...</span>\r\n+              </div>\r\n+            ) : !currentLessonId ? (\r\n+              <div \r\n+                className=\"text-center py-20\"\r\n+                role=\"status\"\r\n+                aria-label=\"No lesson selected\"\r\n+              >\r\n+                <h3 className=\"text-lg font-medium\">Select a Lesson</h3>\r\n+                <p className=\"text-sm text-muted-foreground\">\r\n+                  Choose a lesson from the sidebar to start editing\r\n+                </p>\r\n+              </div>\r\n+            ) : (\r\n+              <div className=\"space-y-6\">\r\n+                {/* Lesson Editor */}\r\n+                <LessonEditor\r\n+                  lessonTitle={lessonTitle}\r\n+                  contentHeading={contentHeading}\r\n+                  lessonContent={lessonContent}\r\n+                  isContentEditorOpen={isContentEditorOpen}\r\n+                  isEditingTitle={isEditingTitle}\r\n+                  isEditingHeading={isEditingHeading}\r\n+                  saveProgress={saveProgress}\r\n+                  onTitleChange={setLessonTitle}\r\n+                  onHeadingChange={setContentHeading}\r\n+                  onContentChange={setLessonContent}\r\n+                  onContentSave={saveLesson}\r\n+                  setIsContentEditorOpen={setIsContentEditorOpen}\r\n+                  setIsEditingTitle={setIsEditingTitle}\r\n+                  setIsEditingHeading={setIsEditingHeading}\r\n+                  onSave={saveLesson}\r\n+                />\r\n \r\n-                <TabsContent value=\"questions\">\r\n-                  <QuestionList\r\n-                    questions={questions}\r\n-                    selectedQuestionType={selectedQuestionType}\r\n-                    questionSaveStatuses={questionSaveStatuses}\r\n-                    expandedQuestion={expandedQuestion}\r\n-                    onQuestionTypeChange={setSelectedQuestionType}\r\n-                    onAddQuestion={addQuestion}\r\n-                    onUpdateQuestion={updateQuestion}\r\n-                    onRemoveQuestion={removeQuestion}\r\n-                    onSaveQuestion={saveQuestion}\r\n-                    onExpandQuestion={setExpandedQuestion}\r\n-                  />\r\n-                </TabsContent>\r\n+                {/* Questions and Activities Tabs */}\r\n+                <Tabs \r\n+                  value={activeTab} \r\n+                  onValueChange={(value: string) => setActiveTab(value as 'questions' | 'activities')}\r\n+                  className=\"rounded-lg border bg-card shadow-sm\"\r\n+                >\r\n+                  <TabsList className=\"grid w-full grid-cols-2 p-1\">\r\n+                    <TabsTrigger \r\n+                      value=\"questions\"\r\n+                      className=\"data-[state=active]:bg-primary data-[state=active]:text-primary-foreground\"\r\n+                    >\r\n+                      <MessageSquare className=\"h-4 w-4 mr-2\" aria-hidden=\"true\" />\r\n+                      <span>Questions</span>\r\n+                      <span className=\"ml-2 text-xs rounded-full bg-primary/10 px-2 py-0.5\">\r\n+                        {questions.length}\r\n+                      </span>\r\n+                    </TabsTrigger>\r\n+                    <TabsTrigger \r\n+                      value=\"activities\"\r\n+                      className=\"data-[state=active]:bg-primary data-[state=active]:text-primary-foreground\"\r\n+                    >\r\n+                      <ActivityIcon className=\"h-4 w-4 mr-2\" aria-hidden=\"true\" />\r\n+                      <span>Activities</span>\r\n+                      <span className=\"ml-2 text-xs rounded-full bg-primary/10 px-2 py-0.5\">\r\n+                        {activities.length}\r\n+                      </span>\r\n+                    </TabsTrigger>\r\n+                  </TabsList>\r\n \r\n-                <TabsContent value=\"activities\">\r\n-                  {/* TODO: Add Activities List component */}\r\n-                  <div className=\"text-center py-8 text-muted-foreground\">\r\n-                    Activities management coming soon...\r\n-                  </div>\r\n-                </TabsContent>\r\n-              </Tabs>\r\n-            </div>\r\n-          )}\r\n+                  <TabsContent \r\n+                    value=\"questions\"\r\n+                    className=\"p-4 border-t\"\r\n+                    role=\"tabpanel\"\r\n+                    aria-label=\"Questions panel\"\r\n+                  >\r\n+                    <QuestionList\r\n+                      questions={questions}\r\n+                      selectedQuestionType={selectedQuestionType}\r\n+                      questionSaveStatuses={questionSaveStatuses}\r\n+                      expandedQuestion={expandedQuestion}\r\n+                      onQuestionTypeChange={setSelectedQuestionType}\r\n+                      onAddQuestion={addQuestion}\r\n+                      onUpdateQuestion={updateQuestion}\r\n+                      onRemoveQuestion={removeQuestion}\r\n+                      onSaveQuestion={saveQuestion}\r\n+                      onExpandQuestion={setExpandedQuestion}\r\n+                    />\r\n+                  </TabsContent>\r\n+\r\n+                  <TabsContent \r\n+                    value=\"activities\"\r\n+                    className=\"p-4 border-t\"\r\n+                    role=\"tabpanel\"\r\n+                    aria-label=\"Activities panel\"\r\n+                  >\r\n+                    <ActivityList\r\n+                      activities={activities}\r\n+                      activitySaveStatuses={activitySaveStatuses}\r\n+                      expandedActivity={expandedActivity}\r\n+                      onAddActivity={addActivity}\r\n+                      onUpdateActivity={updateActivity}\r\n+                      onRemoveActivity={removeActivity}\r\n+                      onSaveActivity={saveActivity}\r\n+                      onExpandActivity={setExpandedActivity}\r\n+                    />\r\n+                  </TabsContent>\r\n+                </Tabs>\r\n+              </div>\r\n+            )}\r\n+          </main>\r\n         </div>\r\n       </div>\r\n \r\n       {/* Modals */}\r\n@@ -200,8 +372,11 @@\n         onClose={closeModal}\r\n         onSubmit={modalHandlers}\r\n       />\r\n \r\n+      {/* Progress Indicator */}\r\n+      <ProgressIndicator status={saveProgress} />\r\n+\r\n       <Toaster />\r\n\\ No newline at end of file\n     </div>\r\n   );\r\n-}\n+} \n\\ No newline at end of file\n"
                },
                {
                    "date": 1740090965591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,37 +1,25 @@\n \"use client\";\r\n \r\n-import { useState, useRef, useEffect } from 'react';\r\n+import { useState } from 'react';\r\n import { Toaster } from 'sonner';\r\n import { ContentHeader } from './components/layout/ContentHeader';\r\n import { ContentSidebar } from './components/layout/ContentSidebar';\r\n-import { ContentBreadcrumbs } from './components/layout/ContentBreadcrumbs';\r\n import { LessonEditor } from './components/lesson/LessonEditor';\r\n import { QuestionList } from './components/questions/QuestionList';\r\n-import { ActivityList } from './components/activities/ActivityList';\r\n import { ContentModals } from './components/layout/ContentModals';\r\n-import { KeyboardShortcutsDialog } from './components/shared/KeyboardShortcutsDialog';\r\n-import { ProgressIndicator } from './components/shared/ProgressIndicator';\r\n import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\n import { ActivityIcon, MessageSquare } from 'lucide-react';\r\n import { useContentState } from './hooks/useContentState';\r\n import { useLessonEditor } from './hooks/useLessonEditor';\r\n import { useQuestionManager } from './hooks/useQuestionManager';\r\n-import { useActivityManager } from './hooks/useActivityManager';\r\n import { useContentModals } from './hooks/useContentModals';\r\n-import { useKeyboardShortcuts } from './hooks/useKeyboardShortcuts';\r\n-import { useAccessibilityAnnouncer } from './hooks/useAccessibilityAnnouncer';\r\n \r\n export default function ContentManagementPage() {\r\n   // UI State\r\n   const [showHelpTips, setShowHelpTips] = useState(true);\r\n   const [isViewMode, setIsViewMode] = useState(true);\r\n   const [isNavigating, setIsNavigating] = useState(false);\r\n-  const [showShortcuts, setShowShortcuts] = useState(false);\r\n-  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\r\n-  const [isSidebarLocked, setIsSidebarLocked] = useState(true);\r\n-  const [activeTab, setActiveTab] = useState<'questions' | 'activities'>('questions');\r\n-  const shortcutsButtonRef = useRef<HTMLButtonElement>(null);\r\n \r\n   // Content Management State\r\n   const {\r\n     selectedGradeId,\r\n@@ -82,21 +70,8 @@\n     updateQuestion,\r\n     removeQuestion,\r\n   } = useQuestionManager(currentLessonId);\r\n \r\n-  // Activity Manager State\r\n-  const {\r\n-    activities,\r\n-    activitySaveStatuses,\r\n-    expandedActivity,\r\n-    setActivities,\r\n-    setExpandedActivity,\r\n-    addActivity,\r\n-    updateActivity,\r\n-    removeActivity,\r\n-    saveActivity,\r\n-  } = useActivityManager(currentLessonId);\r\n-\r\n   // Modal Management\r\n   const {\r\n     modalState,\r\n     openModal,\r\n@@ -108,262 +83,115 @@\n     selectedSubtopicId,\r\n     onSuccess: refreshContent\r\n   });\r\n \r\n-  // Keyboard Shortcuts\r\n-  useKeyboardShortcuts({\r\n-    onSave: saveLesson,\r\n-    onToggleEditMode: () => setIsViewMode(!isViewMode),\r\n-    onToggleHelpTips: () => setShowHelpTips(!showHelpTips),\r\n-    onToggleShortcuts: () => shortcutsButtonRef.current?.click(),\r\n-    onToggleContentEditor: () => setIsContentEditorOpen(!isContentEditorOpen),\r\n-    onSaveContent: saveLesson,\r\n-    onCollapseSidebar: () => setIsSidebarCollapsed(true),\r\n-    onExpandSidebar: () => setIsSidebarCollapsed(false),\r\n-    onToggleSidebarLock: () => setIsSidebarLocked(!isSidebarLocked),\r\n-    onSwitchToQuestions: () => setActiveTab('questions'),\r\n-    onSwitchToActivities: () => setActiveTab('activities'),\r\n-    onAddNew: () => activeTab === 'questions' ? addQuestion() : addActivity(),\r\n-    isContentEditorOpen\r\n-  });\r\n-\r\n-  // Accessibility\r\n-  const { announce } = useAccessibilityAnnouncer();\r\n-  const mainContentRef = useRef<HTMLDivElement>(null);\r\n-\r\n-  // Focus management\r\n-  useEffect(() => {\r\n-    if (currentLessonId) {\r\n-      mainContentRef.current?.focus();\r\n-      announce(`Loaded lesson: ${lessonTitle || 'Untitled Lesson'}`);\r\n-    }\r\n-  }, [currentLessonId, lessonTitle, announce]);\r\n-\r\n-  // Announce save status changes\r\n-  useEffect(() => {\r\n-    if (saveProgress === 'saving') {\r\n-      announce('Saving changes...', 'polite');\r\n-    } else if (saveProgress === 'saved') {\r\n-      announce('Changes saved successfully', 'polite');\r\n-    } else if (saveProgress === 'error') {\r\n-      announce('Error saving changes', 'assertive');\r\n-    }\r\n-  }, [saveProgress, announce]);\r\n-\r\n-  // Announce tab changes\r\n-  useEffect(() => {\r\n-    announce(`Switched to ${activeTab} tab`);\r\n-  }, [activeTab, announce]);\r\n-\r\n-  // Breadcrumb items\r\n-  const breadcrumbItems = [\r\n-    {\r\n-      label: 'Grades',\r\n-      onClick: () => {\r\n-        handleGradeSelect('');\r\n-      },\r\n-      isActive: !selectedGradeId\r\n-    },\r\n-    selectedGradeId && {\r\n-      label: grades.find(g => g.id === selectedGradeId)?.name || 'Grade',\r\n-      onClick: () => {\r\n-        handleTopicSelect('');\r\n-      },\r\n-      isActive: selectedGradeId && !selectedTopicId\r\n-    },\r\n-    selectedTopicId && {\r\n-      label: topics.find(t => t.id === selectedTopicId)?.title || 'Topic',\r\n-      onClick: () => {\r\n-        handleSubtopicSelect('');\r\n-      },\r\n-      isActive: selectedTopicId && !selectedSubtopicId\r\n-    },\r\n-    selectedSubtopicId && {\r\n-      label: subtopics.find(s => s.id === selectedSubtopicId)?.title || 'Subtopic',\r\n-      onClick: () => {\r\n-        setCurrentLessonId(null);\r\n-      },\r\n-      isActive: selectedSubtopicId && !currentLessonId\r\n-    },\r\n-    currentLessonId && {\r\n-      label: lessonTitle || 'Lesson',\r\n-      onClick: () => {},\r\n-      isActive: true\r\n-    }\r\n-  ].filter(Boolean) as { label: string; onClick: () => void; isActive?: boolean }[];\r\n-\r\n   return (\r\n-    <div \r\n-      className=\"min-h-screen bg-background\"\r\n-      role=\"application\"\r\n-      aria-label=\"Content Management System\"\r\n-    >\r\n-      <div className=\"container mx-auto py-8 px-4 sm:px-6 lg:px-8\">\r\n-        {/* Header */}\r\n-        <div className=\"space-y-4\">\r\n-          <ContentHeader\r\n-            showHelpTips={showHelpTips}\r\n-            onToggleHelpTips={() => setShowHelpTips(!showHelpTips)}\r\n-            onRefresh={() => loadLessonContent(currentLessonId || '')}\r\n-            isViewMode={isViewMode}\r\n-            onToggleViewMode={() => setIsViewMode(!isViewMode)}\r\n-            saveProgress={saveProgress}\r\n-          >\r\n-            <KeyboardShortcutsDialog ref={shortcutsButtonRef} />\r\n-          </ContentHeader>\r\n+    <div className=\"container mx-auto py-8\">\r\n+      {/* Header */}\r\n+      <ContentHeader\r\n+        showHelpTips={showHelpTips}\r\n+        onToggleHelpTips={() => setShowHelpTips(!showHelpTips)}\r\n+        onRefresh={() => loadLessonContent(currentLessonId || '')}\r\n+        isViewMode={isViewMode}\r\n+        onToggleViewMode={() => setIsViewMode(!isViewMode)}\r\n+        saveProgress={saveProgress}\r\n+      />\r\n \r\n-          <ContentBreadcrumbs items={breadcrumbItems} />\r\n-        </div>\r\n+      {/* Main Content */}\r\n+      <div className=\"flex gap-6 mt-6\">\r\n+        {/* Sidebar */}\r\n+        <ContentSidebar\r\n+          grades={grades}\r\n+          topics={topics}\r\n+          subtopics={subtopics}\r\n+          lessons={lessons}\r\n+          selectedGradeId={selectedGradeId}\r\n+          selectedTopicId={selectedTopicId}\r\n+          selectedSubtopicId={selectedSubtopicId}\r\n+          currentLessonId={currentLessonId}\r\n+          isViewMode={isViewMode}\r\n+          onGradeSelect={handleGradeSelect}\r\n+          onTopicSelect={handleTopicSelect}\r\n+          onSubtopicSelect={handleSubtopicSelect}\r\n+          onLessonSelect={setCurrentLessonId}\r\n+          onAddGrade={() => openModal('addGrade')}\r\n+          onAddTopic={() => openModal('addTopic')}\r\n+          onAddSubtopic={() => openModal('addSubtopic')}\r\n+          onAddLesson={() => openModal('addLesson')}\r\n+        />\r\n \r\n-        {/* Main Content */}\r\n-        <div className=\"flex gap-6 mt-6\">\r\n-          {/* Sidebar */}\r\n-          <ContentSidebar\r\n-            grades={grades}\r\n-            topics={topics}\r\n-            subtopics={subtopics}\r\n-            lessons={lessons}\r\n-            selectedGradeId={selectedGradeId}\r\n-            selectedTopicId={selectedTopicId}\r\n-            selectedSubtopicId={selectedSubtopicId}\r\n-            currentLessonId={currentLessonId}\r\n-            isViewMode={isViewMode}\r\n-            onGradeSelect={handleGradeSelect}\r\n-            onTopicSelect={handleTopicSelect}\r\n-            onSubtopicSelect={handleSubtopicSelect}\r\n-            onLessonSelect={setCurrentLessonId}\r\n-            onAddGrade={() => openModal('addGrade')}\r\n-            onAddTopic={() => openModal('addTopic')}\r\n-            onAddSubtopic={() => openModal('addSubtopic')}\r\n-            onAddLesson={() => openModal('addLesson')}\r\n-            isCollapsed={isSidebarCollapsed}\r\n-            isLocked={isSidebarLocked}\r\n-            onCollapsedChange={setIsSidebarCollapsed}\r\n-            onLockedChange={setIsSidebarLocked}\r\n-          />\r\n+        {/* Content Area */}\r\n+        <div className=\"flex-1\">\r\n+          {isNavigating ? (\r\n+            <div className=\"flex items-center justify-center h-[400px]\">\r\n+              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n+              <span className=\"ml-3\">Loading...</span>\r\n+            </div>\r\n+          ) : !currentLessonId ? (\r\n+            <div className=\"text-center py-20\">\r\n+              <h3 className=\"text-lg font-medium\">Select a Lesson</h3>\r\n+              <p className=\"text-sm text-muted-foreground\">\r\n+                Choose a lesson from the sidebar to start editing\r\n+              </p>\r\n+            </div>\r\n+          ) : (\r\n+            <div className=\"space-y-6\">\r\n+              {/* Lesson Editor */}\r\n+              <LessonEditor\r\n+                lessonTitle={lessonTitle}\r\n+                contentHeading={contentHeading}\r\n+                lessonContent={lessonContent}\r\n+                isContentEditorOpen={isContentEditorOpen}\r\n+                isEditingTitle={isEditingTitle}\r\n+                isEditingHeading={isEditingHeading}\r\n+                saveProgress={saveProgress}\r\n+                onTitleChange={setLessonTitle}\r\n+                onHeadingChange={setContentHeading}\r\n+                onContentChange={setLessonContent}\r\n+                onContentSave={saveLesson}\r\n+                setIsContentEditorOpen={setIsContentEditorOpen}\r\n+                setIsEditingTitle={setIsEditingTitle}\r\n+                setIsEditingHeading={setIsEditingHeading}\r\n+                onSave={saveLesson}\r\n+              />\r\n \r\n-          {/* Content Area */}\r\n-          <main \r\n-            ref={mainContentRef}\r\n-            tabIndex={-1}\r\n-            className=\"flex-1 focus:outline-none\"\r\n-            aria-label=\"Main content area\"\r\n-          >\r\n-            {isNavigating ? (\r\n-              <div \r\n-                className=\"flex items-center justify-center h-[400px]\"\r\n-                role=\"alert\"\r\n-                aria-busy=\"true\"\r\n-              >\r\n-                <div \r\n-                  className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"\r\n-                  aria-hidden=\"true\"\r\n-                />\r\n-                <span className=\"ml-3 sr-only\">Loading content...</span>\r\n-                <span className=\"ml-3\" aria-hidden=\"true\">Loading...</span>\r\n-              </div>\r\n-            ) : !currentLessonId ? (\r\n-              <div \r\n-                className=\"text-center py-20\"\r\n-                role=\"status\"\r\n-                aria-label=\"No lesson selected\"\r\n-              >\r\n-                <h3 className=\"text-lg font-medium\">Select a Lesson</h3>\r\n-                <p className=\"text-sm text-muted-foreground\">\r\n-                  Choose a lesson from the sidebar to start editing\r\n-                </p>\r\n-              </div>\r\n-            ) : (\r\n-              <div className=\"space-y-6\">\r\n-                {/* Lesson Editor */}\r\n-                <LessonEditor\r\n-                  lessonTitle={lessonTitle}\r\n-                  contentHeading={contentHeading}\r\n-                  lessonContent={lessonContent}\r\n-                  isContentEditorOpen={isContentEditorOpen}\r\n-                  isEditingTitle={isEditingTitle}\r\n-                  isEditingHeading={isEditingHeading}\r\n-                  saveProgress={saveProgress}\r\n-                  onTitleChange={setLessonTitle}\r\n-                  onHeadingChange={setContentHeading}\r\n-                  onContentChange={setLessonContent}\r\n-                  onContentSave={saveLesson}\r\n-                  setIsContentEditorOpen={setIsContentEditorOpen}\r\n-                  setIsEditingTitle={setIsEditingTitle}\r\n-                  setIsEditingHeading={setIsEditingHeading}\r\n-                  onSave={saveLesson}\r\n-                />\r\n+              {/* Questions and Activities Tabs */}\r\n+              <Tabs defaultValue=\"questions\">\r\n+                <TabsList className=\"grid w-full grid-cols-2\">\r\n+                  <TabsTrigger value=\"questions\">\r\n+                    <MessageSquare className=\"h-4 w-4 mr-2\" />\r\n+                    Questions\r\n+                  </TabsTrigger>\r\n+                  <TabsTrigger value=\"activities\">\r\n+                    <ActivityIcon className=\"h-4 w-4 mr-2\" />\r\n+                    Activities\r\n+                  </TabsTrigger>\r\n+                </TabsList>\r\n \r\n-                {/* Questions and Activities Tabs */}\r\n-                <Tabs \r\n-                  value={activeTab} \r\n-                  onValueChange={(value: string) => setActiveTab(value as 'questions' | 'activities')}\r\n-                  className=\"rounded-lg border bg-card shadow-sm\"\r\n-                >\r\n-                  <TabsList className=\"grid w-full grid-cols-2 p-1\">\r\n-                    <TabsTrigger \r\n-                      value=\"questions\"\r\n-                      className=\"data-[state=active]:bg-primary data-[state=active]:text-primary-foreground\"\r\n-                    >\r\n-                      <MessageSquare className=\"h-4 w-4 mr-2\" aria-hidden=\"true\" />\r\n-                      <span>Questions</span>\r\n-                      <span className=\"ml-2 text-xs rounded-full bg-primary/10 px-2 py-0.5\">\r\n-                        {questions.length}\r\n-                      </span>\r\n-                    </TabsTrigger>\r\n-                    <TabsTrigger \r\n-                      value=\"activities\"\r\n-                      className=\"data-[state=active]:bg-primary data-[state=active]:text-primary-foreground\"\r\n-                    >\r\n-                      <ActivityIcon className=\"h-4 w-4 mr-2\" aria-hidden=\"true\" />\r\n-                      <span>Activities</span>\r\n-                      <span className=\"ml-2 text-xs rounded-full bg-primary/10 px-2 py-0.5\">\r\n-                        {activities.length}\r\n-                      </span>\r\n-                    </TabsTrigger>\r\n-                  </TabsList>\r\n+                <TabsContent value=\"questions\">\r\n+                  <QuestionList\r\n+                    questions={questions}\r\n+                    selectedQuestionType={selectedQuestionType}\r\n+                    questionSaveStatuses={questionSaveStatuses}\r\n+                    expandedQuestion={expandedQuestion}\r\n+                    onQuestionTypeChange={setSelectedQuestionType}\r\n+                    onAddQuestion={addQuestion}\r\n+                    onUpdateQuestion={updateQuestion}\r\n+                    onRemoveQuestion={removeQuestion}\r\n+                    onSaveQuestion={saveQuestion}\r\n+                    onExpandQuestion={setExpandedQuestion}\r\n+                  />\r\n+                </TabsContent>\r\n \r\n-                  <TabsContent \r\n-                    value=\"questions\"\r\n-                    className=\"p-4 border-t\"\r\n-                    role=\"tabpanel\"\r\n-                    aria-label=\"Questions panel\"\r\n-                  >\r\n-                    <QuestionList\r\n-                      questions={questions}\r\n-                      selectedQuestionType={selectedQuestionType}\r\n-                      questionSaveStatuses={questionSaveStatuses}\r\n-                      expandedQuestion={expandedQuestion}\r\n-                      onQuestionTypeChange={setSelectedQuestionType}\r\n-                      onAddQuestion={addQuestion}\r\n-                      onUpdateQuestion={updateQuestion}\r\n-                      onRemoveQuestion={removeQuestion}\r\n-                      onSaveQuestion={saveQuestion}\r\n-                      onExpandQuestion={setExpandedQuestion}\r\n-                    />\r\n-                  </TabsContent>\r\n-\r\n-                  <TabsContent \r\n-                    value=\"activities\"\r\n-                    className=\"p-4 border-t\"\r\n-                    role=\"tabpanel\"\r\n-                    aria-label=\"Activities panel\"\r\n-                  >\r\n-                    <ActivityList\r\n-                      activities={activities}\r\n-                      activitySaveStatuses={activitySaveStatuses}\r\n-                      expandedActivity={expandedActivity}\r\n-                      onAddActivity={addActivity}\r\n-                      onUpdateActivity={updateActivity}\r\n-                      onRemoveActivity={removeActivity}\r\n-                      onSaveActivity={saveActivity}\r\n-                      onExpandActivity={setExpandedActivity}\r\n-                    />\r\n-                  </TabsContent>\r\n-                </Tabs>\r\n-              </div>\r\n-            )}\r\n-          </main>\r\n+                <TabsContent value=\"activities\">\r\n+                  {/* TODO: Add Activities List component */}\r\n+                  <div className=\"text-center py-8 text-muted-foreground\">\r\n+                    Activities management coming soon...\r\n+                  </div>\r\n+                </TabsContent>\r\n+              </Tabs>\r\n+            </div>\r\n+          )}\r\n         </div>\r\n       </div>\r\n \r\n       {/* Modals */}\r\n@@ -372,11 +200,8 @@\n         onClose={closeModal}\r\n         onSubmit={modalHandlers}\r\n       />\r\n \r\n-      {/* Progress Indicator */}\r\n-      <ProgressIndicator status={saveProgress} />\r\n-\r\n       <Toaster />\r\n     </div>\r\n   );\r\n-} \n\\ No newline at end of file\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740091015379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,14 +5,16 @@\n import { ContentHeader } from './components/layout/ContentHeader';\r\n import { ContentSidebar } from './components/layout/ContentSidebar';\r\n import { LessonEditor } from './components/lesson/LessonEditor';\r\n import { QuestionList } from './components/questions/QuestionList';\r\n+import { ActivityList } from './components/activities/ActivityList';\r\n import { ContentModals } from './components/layout/ContentModals';\r\n import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\n import { ActivityIcon, MessageSquare } from 'lucide-react';\r\n import { useContentState } from './hooks/useContentState';\r\n import { useLessonEditor } from './hooks/useLessonEditor';\r\n import { useQuestionManager } from './hooks/useQuestionManager';\r\n+import { useActivityManager } from './hooks/useActivityManager';\r\n import { useContentModals } from './hooks/useContentModals';\r\n \r\n export default function ContentManagementPage() {\r\n   // UI State\r\n@@ -70,8 +72,21 @@\n     updateQuestion,\r\n     removeQuestion,\r\n   } = useQuestionManager(currentLessonId);\r\n \r\n+  // Activity Manager State\r\n+  const {\r\n+    activities,\r\n+    activitySaveStatuses,\r\n+    expandedActivity,\r\n+    setActivities,\r\n+    setExpandedActivity,\r\n+    addActivity,\r\n+    updateActivity,\r\n+    removeActivity,\r\n+    saveActivity,\r\n+  } = useActivityManager(currentLessonId);\r\n+\r\n   // Modal Management\r\n   const {\r\n     modalState,\r\n     openModal,\r\n@@ -158,13 +173,13 @@\n               <Tabs defaultValue=\"questions\">\r\n                 <TabsList className=\"grid w-full grid-cols-2\">\r\n                   <TabsTrigger value=\"questions\">\r\n                     <MessageSquare className=\"h-4 w-4 mr-2\" />\r\n-                    Questions\r\n+                    Questions ({questions.length})\r\n                   </TabsTrigger>\r\n                   <TabsTrigger value=\"activities\">\r\n                     <ActivityIcon className=\"h-4 w-4 mr-2\" />\r\n-                    Activities\r\n+                    Activities ({activities.length})\r\n                   </TabsTrigger>\r\n                 </TabsList>\r\n \r\n                 <TabsContent value=\"questions\">\r\n@@ -182,12 +197,18 @@\n                   />\r\n                 </TabsContent>\r\n \r\n                 <TabsContent value=\"activities\">\r\n-                  {/* TODO: Add Activities List component */}\r\n-                  <div className=\"text-center py-8 text-muted-foreground\">\r\n-                    Activities management coming soon...\r\n-                  </div>\r\n+                  <ActivityList\r\n+                    activities={activities}\r\n+                    activitySaveStatuses={activitySaveStatuses}\r\n+                    expandedActivity={expandedActivity}\r\n+                    onAddActivity={addActivity}\r\n+                    onUpdateActivity={updateActivity}\r\n+                    onRemoveActivity={removeActivity}\r\n+                    onSaveActivity={saveActivity}\r\n+                    onExpandActivity={setExpandedActivity}\r\n+                  />\r\n                 </TabsContent>\r\n               </Tabs>\r\n             </div>\r\n           )}\r\n"
                },
                {
                    "date": 1740091033313,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,27 +1,35 @@\n \"use client\";\r\n \r\n-import { useState } from 'react';\r\n+import { useState, useRef } from 'react';\r\n import { Toaster } from 'sonner';\r\n import { ContentHeader } from './components/layout/ContentHeader';\r\n import { ContentSidebar } from './components/layout/ContentSidebar';\r\n+import { ContentBreadcrumbs } from './components/layout/ContentBreadcrumbs';\r\n import { LessonEditor } from './components/lesson/LessonEditor';\r\n import { QuestionList } from './components/questions/QuestionList';\r\n import { ActivityList } from './components/activities/ActivityList';\r\n import { ContentModals } from './components/layout/ContentModals';\r\n+import { KeyboardShortcutsDialog } from './components/shared/KeyboardShortcutsDialog';\r\n import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\n import { ActivityIcon, MessageSquare } from 'lucide-react';\r\n import { useContentState } from './hooks/useContentState';\r\n import { useLessonEditor } from './hooks/useLessonEditor';\r\n import { useQuestionManager } from './hooks/useQuestionManager';\r\n import { useActivityManager } from './hooks/useActivityManager';\r\n import { useContentModals } from './hooks/useContentModals';\r\n+import { useKeyboardShortcuts } from './hooks/useKeyboardShortcuts';\r\n \r\n export default function ContentManagementPage() {\r\n   // UI State\r\n   const [showHelpTips, setShowHelpTips] = useState(true);\r\n   const [isViewMode, setIsViewMode] = useState(true);\r\n   const [isNavigating, setIsNavigating] = useState(false);\r\n+  const [showShortcuts, setShowShortcuts] = useState(false);\r\n+  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\r\n+  const [isSidebarLocked, setIsSidebarLocked] = useState(true);\r\n+  const [activeTab, setActiveTab] = useState<'questions' | 'activities'>('questions');\r\n+  const shortcutsButtonRef = useRef<HTMLButtonElement>(null);\r\n \r\n   // Content Management State\r\n   const {\r\n     selectedGradeId,\r\n@@ -98,20 +106,86 @@\n     selectedSubtopicId,\r\n     onSuccess: refreshContent\r\n   });\r\n \r\n+  // Keyboard Shortcuts\r\n+  useKeyboardShortcuts({\r\n+    onSave: saveLesson,\r\n+    onToggleEditMode: () => setIsViewMode(!isViewMode),\r\n+    onToggleHelpTips: () => setShowHelpTips(!showHelpTips),\r\n+    onToggleShortcuts: () => shortcutsButtonRef.current?.click(),\r\n+    onToggleContentEditor: () => setIsContentEditorOpen(!isContentEditorOpen),\r\n+    onSaveContent: saveLesson,\r\n+    onCollapseSidebar: () => setIsSidebarCollapsed(true),\r\n+    onExpandSidebar: () => setIsSidebarCollapsed(false),\r\n+    onToggleSidebarLock: () => setIsSidebarLocked(!isSidebarLocked),\r\n+    onSwitchToQuestions: () => setActiveTab('questions'),\r\n+    onSwitchToActivities: () => setActiveTab('activities'),\r\n+    onAddNew: () => activeTab === 'questions' ? addQuestion() : addActivity(),\r\n+    isContentEditorOpen\r\n+  });\r\n+\r\n+  // Breadcrumb items\r\n+  const breadcrumbItems = [\r\n+    {\r\n+      label: 'Grades',\r\n+      onClick: () => {\r\n+        setSelectedGradeId(null);\r\n+        setSelectedTopicId(null);\r\n+        setSelectedSubtopicId(null);\r\n+        setCurrentLessonId(null);\r\n+      },\r\n+      isActive: !selectedGradeId\r\n+    },\r\n+    selectedGradeId && {\r\n+      label: grades.find(g => g.id === selectedGradeId)?.name || 'Grade',\r\n+      onClick: () => {\r\n+        setSelectedTopicId(null);\r\n+        setSelectedSubtopicId(null);\r\n+        setCurrentLessonId(null);\r\n+      },\r\n+      isActive: selectedGradeId && !selectedTopicId\r\n+    },\r\n+    selectedTopicId && {\r\n+      label: topics.find(t => t.id === selectedTopicId)?.title || 'Topic',\r\n+      onClick: () => {\r\n+        setSelectedSubtopicId(null);\r\n+        setCurrentLessonId(null);\r\n+      },\r\n+      isActive: selectedTopicId && !selectedSubtopicId\r\n+    },\r\n+    selectedSubtopicId && {\r\n+      label: subtopics.find(s => s.id === selectedSubtopicId)?.title || 'Subtopic',\r\n+      onClick: () => {\r\n+        setCurrentLessonId(null);\r\n+      },\r\n+      isActive: selectedSubtopicId && !currentLessonId\r\n+    },\r\n+    currentLessonId && {\r\n+      label: lessonTitle || 'Lesson',\r\n+      onClick: () => {},\r\n+      isActive: true\r\n+    }\r\n+  ].filter(Boolean) as { label: string; onClick: () => void; isActive?: boolean }[];\r\n+\r\n   return (\r\n     <div className=\"container mx-auto py-8\">\r\n       {/* Header */}\r\n-      <ContentHeader\r\n-        showHelpTips={showHelpTips}\r\n-        onToggleHelpTips={() => setShowHelpTips(!showHelpTips)}\r\n-        onRefresh={() => loadLessonContent(currentLessonId || '')}\r\n-        isViewMode={isViewMode}\r\n-        onToggleViewMode={() => setIsViewMode(!isViewMode)}\r\n-        saveProgress={saveProgress}\r\n-      />\r\n+      <div className=\"space-y-4\">\r\n+        <ContentHeader\r\n+          showHelpTips={showHelpTips}\r\n+          onToggleHelpTips={() => setShowHelpTips(!showHelpTips)}\r\n+          onRefresh={() => loadLessonContent(currentLessonId || '')}\r\n+          isViewMode={isViewMode}\r\n+          onToggleViewMode={() => setIsViewMode(!isViewMode)}\r\n+          saveProgress={saveProgress}\r\n+        >\r\n+          <KeyboardShortcutsDialog ref={shortcutsButtonRef} />\r\n+        </ContentHeader>\r\n \r\n+        <ContentBreadcrumbs items={breadcrumbItems} />\r\n+      </div>\r\n+\r\n       {/* Main Content */}\r\n       <div className=\"flex gap-6 mt-6\">\r\n         {/* Sidebar */}\r\n         <ContentSidebar\r\n@@ -131,8 +205,12 @@\n           onAddGrade={() => openModal('addGrade')}\r\n           onAddTopic={() => openModal('addTopic')}\r\n           onAddSubtopic={() => openModal('addSubtopic')}\r\n           onAddLesson={() => openModal('addLesson')}\r\n+          isCollapsed={isSidebarCollapsed}\r\n+          isLocked={isSidebarLocked}\r\n+          onCollapsedChange={setIsSidebarCollapsed}\r\n+          onLockedChange={setIsSidebarLocked}\r\n         />\r\n \r\n         {/* Content Area */}\r\n         <div className=\"flex-1\">\r\n@@ -169,9 +247,9 @@\n                 onSave={saveLesson}\r\n               />\r\n \r\n               {/* Questions and Activities Tabs */}\r\n-              <Tabs defaultValue=\"questions\">\r\n+              <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as 'questions' | 'activities')}>\r\n                 <TabsList className=\"grid w-full grid-cols-2\">\r\n                   <TabsTrigger value=\"questions\">\r\n                     <MessageSquare className=\"h-4 w-4 mr-2\" />\r\n                     Questions ({questions.length})\r\n"
                },
                {
                    "date": 1740091065190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n \"use client\";\r\n \r\n-import { useState, useRef } from 'react';\r\n+import { useState, useRef, useEffect } from 'react';\r\n import { Toaster } from 'sonner';\r\n import { ContentHeader } from './components/layout/ContentHeader';\r\n import { ContentSidebar } from './components/layout/ContentSidebar';\r\n import { ContentBreadcrumbs } from './components/layout/ContentBreadcrumbs';\r\n@@ -9,16 +9,18 @@\n import { QuestionList } from './components/questions/QuestionList';\r\n import { ActivityList } from './components/activities/ActivityList';\r\n import { ContentModals } from './components/layout/ContentModals';\r\n import { KeyboardShortcutsDialog } from './components/shared/KeyboardShortcutsDialog';\r\n+import { ProgressIndicator } from './components/shared/ProgressIndicator';\r\n import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\n import { ActivityIcon, MessageSquare } from 'lucide-react';\r\n import { useContentState } from './hooks/useContentState';\r\n import { useLessonEditor } from './hooks/useLessonEditor';\r\n import { useQuestionManager } from './hooks/useQuestionManager';\r\n import { useActivityManager } from './hooks/useActivityManager';\r\n import { useContentModals } from './hooks/useContentModals';\r\n import { useKeyboardShortcuts } from './hooks/useKeyboardShortcuts';\r\n+import { useAccessibilityAnnouncer } from './hooks/useAccessibilityAnnouncer';\r\n \r\n export default function ContentManagementPage() {\r\n   // UI State\r\n   const [showHelpTips, setShowHelpTips] = useState(true);\r\n@@ -123,8 +125,36 @@\n     onAddNew: () => activeTab === 'questions' ? addQuestion() : addActivity(),\r\n     isContentEditorOpen\r\n   });\r\n \r\n+  // Accessibility\r\n+  const { announce } = useAccessibilityAnnouncer();\r\n+  const mainContentRef = useRef<HTMLDivElement>(null);\r\n+\r\n+  // Focus management\r\n+  useEffect(() => {\r\n+    if (currentLessonId) {\r\n+      mainContentRef.current?.focus();\r\n+      announce(`Loaded lesson: ${lessonTitle || 'Untitled Lesson'}`);\r\n+    }\r\n+  }, [currentLessonId, lessonTitle, announce]);\r\n+\r\n+  // Announce save status changes\r\n+  useEffect(() => {\r\n+    if (saveProgress === 'saving') {\r\n+      announce('Saving changes...', 'polite');\r\n+    } else if (saveProgress === 'saved') {\r\n+      announce('Changes saved successfully', 'polite');\r\n+    } else if (saveProgress === 'error') {\r\n+      announce('Error saving changes', 'assertive');\r\n+    }\r\n+  }, [saveProgress, announce]);\r\n+\r\n+  // Announce tab changes\r\n+  useEffect(() => {\r\n+    announce(`Switched to ${activeTab} tab`);\r\n+  }, [activeTab, announce]);\r\n+\r\n   // Breadcrumb items\r\n   const breadcrumbItems = [\r\n     {\r\n       label: 'Grades',\r\n@@ -167,130 +197,179 @@\n     }\r\n   ].filter(Boolean) as { label: string; onClick: () => void; isActive?: boolean }[];\r\n \r\n   return (\r\n-    <div className=\"container mx-auto py-8\">\r\n-      {/* Header */}\r\n-      <div className=\"space-y-4\">\r\n-        <ContentHeader\r\n-          showHelpTips={showHelpTips}\r\n-          onToggleHelpTips={() => setShowHelpTips(!showHelpTips)}\r\n-          onRefresh={() => loadLessonContent(currentLessonId || '')}\r\n-          isViewMode={isViewMode}\r\n-          onToggleViewMode={() => setIsViewMode(!isViewMode)}\r\n-          saveProgress={saveProgress}\r\n-        >\r\n-          <KeyboardShortcutsDialog ref={shortcutsButtonRef} />\r\n-        </ContentHeader>\r\n+    <div \r\n+      className=\"min-h-screen bg-background\"\r\n+      role=\"application\"\r\n+      aria-label=\"Content Management System\"\r\n+    >\r\n+      <div className=\"container mx-auto py-8 px-4 sm:px-6 lg:px-8\">\r\n+        {/* Header */}\r\n+        <div className=\"space-y-4\">\r\n+          <ContentHeader\r\n+            showHelpTips={showHelpTips}\r\n+            onToggleHelpTips={() => setShowHelpTips(!showHelpTips)}\r\n+            onRefresh={() => loadLessonContent(currentLessonId || '')}\r\n+            isViewMode={isViewMode}\r\n+            onToggleViewMode={() => setIsViewMode(!isViewMode)}\r\n+            saveProgress={saveProgress}\r\n+          >\r\n+            <KeyboardShortcutsDialog ref={shortcutsButtonRef} />\r\n+          </ContentHeader>\r\n \r\n-        <ContentBreadcrumbs items={breadcrumbItems} />\r\n-      </div>\r\n+          <ContentBreadcrumbs items={breadcrumbItems} />\r\n+        </div>\r\n \r\n-      {/* Main Content */}\r\n-      <div className=\"flex gap-6 mt-6\">\r\n-        {/* Sidebar */}\r\n-        <ContentSidebar\r\n-          grades={grades}\r\n-          topics={topics}\r\n-          subtopics={subtopics}\r\n-          lessons={lessons}\r\n-          selectedGradeId={selectedGradeId}\r\n-          selectedTopicId={selectedTopicId}\r\n-          selectedSubtopicId={selectedSubtopicId}\r\n-          currentLessonId={currentLessonId}\r\n-          isViewMode={isViewMode}\r\n-          onGradeSelect={handleGradeSelect}\r\n-          onTopicSelect={handleTopicSelect}\r\n-          onSubtopicSelect={handleSubtopicSelect}\r\n-          onLessonSelect={setCurrentLessonId}\r\n-          onAddGrade={() => openModal('addGrade')}\r\n-          onAddTopic={() => openModal('addTopic')}\r\n-          onAddSubtopic={() => openModal('addSubtopic')}\r\n-          onAddLesson={() => openModal('addLesson')}\r\n-          isCollapsed={isSidebarCollapsed}\r\n-          isLocked={isSidebarLocked}\r\n-          onCollapsedChange={setIsSidebarCollapsed}\r\n-          onLockedChange={setIsSidebarLocked}\r\n-        />\r\n+        {/* Main Content */}\r\n+        <div className=\"flex gap-6 mt-6\">\r\n+          {/* Sidebar */}\r\n+          <ContentSidebar\r\n+            grades={grades}\r\n+            topics={topics}\r\n+            subtopics={subtopics}\r\n+            lessons={lessons}\r\n+            selectedGradeId={selectedGradeId}\r\n+            selectedTopicId={selectedTopicId}\r\n+            selectedSubtopicId={selectedSubtopicId}\r\n+            currentLessonId={currentLessonId}\r\n+            isViewMode={isViewMode}\r\n+            onGradeSelect={handleGradeSelect}\r\n+            onTopicSelect={handleTopicSelect}\r\n+            onSubtopicSelect={handleSubtopicSelect}\r\n+            onLessonSelect={setCurrentLessonId}\r\n+            onAddGrade={() => openModal('addGrade')}\r\n+            onAddTopic={() => openModal('addTopic')}\r\n+            onAddSubtopic={() => openModal('addSubtopic')}\r\n+            onAddLesson={() => openModal('addLesson')}\r\n+            isCollapsed={isSidebarCollapsed}\r\n+            isLocked={isSidebarLocked}\r\n+            onCollapsedChange={setIsSidebarCollapsed}\r\n+            onLockedChange={setIsSidebarLocked}\r\n+          />\r\n \r\n-        {/* Content Area */}\r\n-        <div className=\"flex-1\">\r\n-          {isNavigating ? (\r\n-            <div className=\"flex items-center justify-center h-[400px]\">\r\n-              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n-              <span className=\"ml-3\">Loading...</span>\r\n-            </div>\r\n-          ) : !currentLessonId ? (\r\n-            <div className=\"text-center py-20\">\r\n-              <h3 className=\"text-lg font-medium\">Select a Lesson</h3>\r\n-              <p className=\"text-sm text-muted-foreground\">\r\n-                Choose a lesson from the sidebar to start editing\r\n-              </p>\r\n-            </div>\r\n-          ) : (\r\n-            <div className=\"space-y-6\">\r\n-              {/* Lesson Editor */}\r\n-              <LessonEditor\r\n-                lessonTitle={lessonTitle}\r\n-                contentHeading={contentHeading}\r\n-                lessonContent={lessonContent}\r\n-                isContentEditorOpen={isContentEditorOpen}\r\n-                isEditingTitle={isEditingTitle}\r\n-                isEditingHeading={isEditingHeading}\r\n-                saveProgress={saveProgress}\r\n-                onTitleChange={setLessonTitle}\r\n-                onHeadingChange={setContentHeading}\r\n-                onContentChange={setLessonContent}\r\n-                onContentSave={saveLesson}\r\n-                setIsContentEditorOpen={setIsContentEditorOpen}\r\n-                setIsEditingTitle={setIsEditingTitle}\r\n-                setIsEditingHeading={setIsEditingHeading}\r\n-                onSave={saveLesson}\r\n-              />\r\n+          {/* Content Area */}\r\n+          <main \r\n+            ref={mainContentRef}\r\n+            tabIndex={-1}\r\n+            className=\"flex-1 focus:outline-none\"\r\n+            aria-label=\"Main content area\"\r\n+          >\r\n+            {isNavigating ? (\r\n+              <div \r\n+                className=\"flex items-center justify-center h-[400px]\"\r\n+                role=\"alert\"\r\n+                aria-busy=\"true\"\r\n+              >\r\n+                <div \r\n+                  className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"\r\n+                  aria-hidden=\"true\"\r\n+                />\r\n+                <span className=\"ml-3 sr-only\">Loading content...</span>\r\n+                <span className=\"ml-3\" aria-hidden=\"true\">Loading...</span>\r\n+              </div>\r\n+            ) : !currentLessonId ? (\r\n+              <div \r\n+                className=\"text-center py-20\"\r\n+                role=\"status\"\r\n+                aria-label=\"No lesson selected\"\r\n+              >\r\n+                <h3 className=\"text-lg font-medium\">Select a Lesson</h3>\r\n+                <p className=\"text-sm text-muted-foreground\">\r\n+                  Choose a lesson from the sidebar to start editing\r\n+                </p>\r\n+              </div>\r\n+            ) : (\r\n+              <div className=\"space-y-6\">\r\n+                {/* Lesson Editor */}\r\n+                <LessonEditor\r\n+                  lessonTitle={lessonTitle}\r\n+                  contentHeading={contentHeading}\r\n+                  lessonContent={lessonContent}\r\n+                  isContentEditorOpen={isContentEditorOpen}\r\n+                  isEditingTitle={isEditingTitle}\r\n+                  isEditingHeading={isEditingHeading}\r\n+                  saveProgress={saveProgress}\r\n+                  onTitleChange={setLessonTitle}\r\n+                  onHeadingChange={setContentHeading}\r\n+                  onContentChange={setLessonContent}\r\n+                  onContentSave={saveLesson}\r\n+                  setIsContentEditorOpen={setIsContentEditorOpen}\r\n+                  setIsEditingTitle={setIsEditingTitle}\r\n+                  setIsEditingHeading={setIsEditingHeading}\r\n+                  onSave={saveLesson}\r\n+                />\r\n \r\n-              {/* Questions and Activities Tabs */}\r\n-              <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as 'questions' | 'activities')}>\r\n-                <TabsList className=\"grid w-full grid-cols-2\">\r\n-                  <TabsTrigger value=\"questions\">\r\n-                    <MessageSquare className=\"h-4 w-4 mr-2\" />\r\n-                    Questions ({questions.length})\r\n-                  </TabsTrigger>\r\n-                  <TabsTrigger value=\"activities\">\r\n-                    <ActivityIcon className=\"h-4 w-4 mr-2\" />\r\n-                    Activities ({activities.length})\r\n-                  </TabsTrigger>\r\n-                </TabsList>\r\n+                {/* Questions and Activities Tabs */}\r\n+                <Tabs \r\n+                  value={activeTab} \r\n+                  onValueChange={(value: string) => setActiveTab(value as 'questions' | 'activities')}\r\n+                  className=\"rounded-lg border bg-card shadow-sm\"\r\n+                >\r\n+                  <TabsList className=\"grid w-full grid-cols-2 p-1\">\r\n+                    <TabsTrigger \r\n+                      value=\"questions\"\r\n+                      className=\"data-[state=active]:bg-primary data-[state=active]:text-primary-foreground\"\r\n+                    >\r\n+                      <MessageSquare className=\"h-4 w-4 mr-2\" aria-hidden=\"true\" />\r\n+                      <span>Questions</span>\r\n+                      <span className=\"ml-2 text-xs rounded-full bg-primary/10 px-2 py-0.5\">\r\n+                        {questions.length}\r\n+                      </span>\r\n+                    </TabsTrigger>\r\n+                    <TabsTrigger \r\n+                      value=\"activities\"\r\n+                      className=\"data-[state=active]:bg-primary data-[state=active]:text-primary-foreground\"\r\n+                    >\r\n+                      <ActivityIcon className=\"h-4 w-4 mr-2\" aria-hidden=\"true\" />\r\n+                      <span>Activities</span>\r\n+                      <span className=\"ml-2 text-xs rounded-full bg-primary/10 px-2 py-0.5\">\r\n+                        {activities.length}\r\n+                      </span>\r\n+                    </TabsTrigger>\r\n+                  </TabsList>\r\n \r\n-                <TabsContent value=\"questions\">\r\n-                  <QuestionList\r\n-                    questions={questions}\r\n-                    selectedQuestionType={selectedQuestionType}\r\n-                    questionSaveStatuses={questionSaveStatuses}\r\n-                    expandedQuestion={expandedQuestion}\r\n-                    onQuestionTypeChange={setSelectedQuestionType}\r\n-                    onAddQuestion={addQuestion}\r\n-                    onUpdateQuestion={updateQuestion}\r\n-                    onRemoveQuestion={removeQuestion}\r\n-                    onSaveQuestion={saveQuestion}\r\n-                    onExpandQuestion={setExpandedQuestion}\r\n-                  />\r\n-                </TabsContent>\r\n+                  <TabsContent \r\n+                    value=\"questions\"\r\n+                    className=\"p-4 border-t\"\r\n+                    role=\"tabpanel\"\r\n+                    aria-label=\"Questions panel\"\r\n+                  >\r\n+                    <QuestionList\r\n+                      questions={questions}\r\n+                      selectedQuestionType={selectedQuestionType}\r\n+                      questionSaveStatuses={questionSaveStatuses}\r\n+                      expandedQuestion={expandedQuestion}\r\n+                      onQuestionTypeChange={setSelectedQuestionType}\r\n+                      onAddQuestion={addQuestion}\r\n+                      onUpdateQuestion={updateQuestion}\r\n+                      onRemoveQuestion={removeQuestion}\r\n+                      onSaveQuestion={saveQuestion}\r\n+                      onExpandQuestion={setExpandedQuestion}\r\n+                    />\r\n+                  </TabsContent>\r\n \r\n-                <TabsContent value=\"activities\">\r\n-                  <ActivityList\r\n-                    activities={activities}\r\n-                    activitySaveStatuses={activitySaveStatuses}\r\n-                    expandedActivity={expandedActivity}\r\n-                    onAddActivity={addActivity}\r\n-                    onUpdateActivity={updateActivity}\r\n-                    onRemoveActivity={removeActivity}\r\n-                    onSaveActivity={saveActivity}\r\n-                    onExpandActivity={setExpandedActivity}\r\n-                  />\r\n-                </TabsContent>\r\n-              </Tabs>\r\n-            </div>\r\n-          )}\r\n+                  <TabsContent \r\n+                    value=\"activities\"\r\n+                    className=\"p-4 border-t\"\r\n+                    role=\"tabpanel\"\r\n+                    aria-label=\"Activities panel\"\r\n+                  >\r\n+                    <ActivityList\r\n+                      activities={activities}\r\n+                      activitySaveStatuses={activitySaveStatuses}\r\n+                      expandedActivity={expandedActivity}\r\n+                      onAddActivity={addActivity}\r\n+                      onUpdateActivity={updateActivity}\r\n+                      onRemoveActivity={removeActivity}\r\n+                      onSaveActivity={saveActivity}\r\n+                      onExpandActivity={setExpandedActivity}\r\n+                    />\r\n+                  </TabsContent>\r\n+                </Tabs>\r\n+              </div>\r\n+            )}\r\n+          </main>\r\n         </div>\r\n       </div>\r\n \r\n       {/* Modals */}\r\n@@ -299,8 +378,11 @@\n         onClose={closeModal}\r\n         onSubmit={modalHandlers}\r\n       />\r\n \r\n+      {/* Progress Indicator */}\r\n+      <ProgressIndicator status={saveProgress} />\r\n+\r\n       <Toaster />\r\n     </div>\r\n   );\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740091934949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,295 @@\n \"use client\";\r\n \r\n+import { useState, useRef, useEffect, useCallback } from 'react';\r\n+import { Toaster, toast } from 'sonner';\r\n+import { ContentHeader } from './components/layout/ContentHeader';\r\n+import { ContentSidebar } from './components/layout/ContentSidebar';\r\n+import { ContentBreadcrumbs } from './components/layout/ContentBreadcrumbs';\r\n+import { LessonEditor } from './components/lesson/LessonEditor';\r\n+import { QuestionList } from './components/questions/QuestionList';\r\n+import { ActivityList } from './components/activities/ActivityList';\r\n+import { ContentModals } from './components/layout/ContentModals';\r\n+import { KeyboardShortcutsDialog } from './components/shared/KeyboardShortcutsDialog';\r\n+import { ProgressIndicator } from './components/shared/ProgressIndicator';\r\n+import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\n+import { ActivityIcon, MessageSquare } from 'lucide-react';\r\n+import { useContentState } from './hooks/useContentState';\r\n+import { useLessonEditor } from './hooks/useLessonEditor';\r\n+import { useQuestionManager } from './hooks/useQuestionManager';\r\n+import { useActivityManager } from './hooks/useActivityManager';\r\n+import { useContentModals } from './hooks/useContentModals';\r\n+import { useKeyboardShortcuts } from './hooks/useKeyboardShortcuts';\r\n+import { useAccessibilityAnnouncer } from './hooks/useAccessibilityAnnouncer';\r\n+import { useErrorBoundary } from 'react-error-boundary';\r\n+import { useLogger } from '@/hooks/useLogger';\r\n+\r\n+// Error types\r\n+interface ContentError extends Error {\r\n+  code?: string;\r\n+  details?: unknown;\r\n+  context?: string;\r\n+}\r\n+\r\n+// Create error logger\r\n+const createError = (message: string, code?: string, details?: unknown): ContentError => {\r\n+  const error = new Error(message) as ContentError;\r\n+  error.code = code;\r\n+  error.details = details;\r\n+  error.name = 'ContentManagementError';\r\n+  return error;\r\n+};\r\n+\r\n+export default function ContentManagementPage() {\r\n+  // UI State\r\n+  const [showHelpTips, setShowHelpTips] = useState(true);\r\n+  const [isViewMode, setIsViewMode] = useState(true);\r\n+  const [isNavigating, setIsNavigating] = useState(false);\r\n+  const [showShortcuts, setShowShortcuts] = useState(false);\r\n+  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\r\n+  const [isSidebarLocked, setIsSidebarLocked] = useState(true);\r\n+  const [activeTab, setActiveTab] = useState<'questions' | 'activities'>('questions');\r\n+  const shortcutsButtonRef = useRef<HTMLButtonElement>(null);\r\n+\r\n+  // Content Management State\r\n+  const {\r\n+    selectedGradeId,\r\n+    selectedTopicId,\r\n+    selectedSubtopicId,\r\n+    currentLessonId,\r\n+    grades,\r\n+    topics,\r\n+    subtopics,\r\n+    lessons,\r\n+    handleGradeSelect,\r\n+    handleTopicSelect,\r\n+    handleSubtopicSelect,\r\n+    setCurrentLessonId,\r\n+    refreshContent\r\n+  } = useContentState();\r\n+\r\n+  // Lesson Editor State\r\n+  const {\r\n+    lessonTitle,\r\n+    contentHeading,\r\n+    lessonContent,\r\n+    isContentEditorOpen,\r\n+    isEditingTitle,\r\n+    isEditingHeading,\r\n+    saveProgress,\r\n+    setLessonTitle,\r\n+    setContentHeading,\r\n+    setLessonContent,\r\n+    setIsContentEditorOpen,\r\n+    setIsEditingTitle,\r\n+    setIsEditingHeading,\r\n+    loadLessonContent,\r\n+    saveLesson,\r\n+  } = useLessonEditor(currentLessonId);\r\n+\r\n+  // Question Manager State\r\n+  const {\r\n+    questions,\r\n+    selectedQuestionType,\r\n+    questionSaveStatuses,\r\n+    expandedQuestion,\r\n+    setQuestions,\r\n+    setSelectedQuestionType,\r\n+    setExpandedQuestion,\r\n+    addQuestion,\r\n+    saveQuestion,\r\n+    updateQuestion,\r\n+    removeQuestion,\r\n+  } = useQuestionManager(currentLessonId);\r\n+\r\n+  // Activity Manager State\r\n+  const {\r\n+    activities,\r\n+    activitySaveStatuses,\r\n+    expandedActivity,\r\n+    setActivities,\r\n+    setExpandedActivity,\r\n+    addActivity,\r\n+    updateActivity,\r\n+    removeActivity,\r\n+    saveActivity,\r\n+  } = useActivityManager(currentLessonId);\r\n+\r\n+  // Modal Management\r\n+  const {\r\n+    modalState,\r\n+    openModal,\r\n+    closeModal,\r\n+    handlers: modalHandlers\r\n+  } = useContentModals({\r\n+    selectedGradeId,\r\n+    selectedTopicId,\r\n+    selectedSubtopicId,\r\n+    onSuccess: refreshContent\r\n+  });\r\n+\r\n+  // Keyboard Shortcuts\r\n+  useKeyboardShortcuts({\r\n+    onSave: saveLesson,\r\n+    onToggleEditMode: () => setIsViewMode(!isViewMode),\r\n+    onToggleHelpTips: () => setShowHelpTips(!showHelpTips),\r\n+    onToggleShortcuts: () => shortcutsButtonRef.current?.click(),\r\n+    onToggleContentEditor: () => setIsContentEditorOpen(!isContentEditorOpen),\r\n+    onSaveContent: saveLesson,\r\n+    onCollapseSidebar: () => setIsSidebarCollapsed(true),\r\n+    onExpandSidebar: () => setIsSidebarCollapsed(false),\r\n+    onToggleSidebarLock: () => setIsSidebarLocked(!isSidebarLocked),\r\n+    onSwitchToQuestions: () => setActiveTab('questions'),\r\n+    onSwitchToActivities: () => setActiveTab('activities'),\r\n+    onAddNew: () => activeTab === 'questions' ? addQuestion() : addActivity(),\r\n+    isContentEditorOpen\r\n+  });\r\n+\r\n+  // Accessibility\r\n+  const { announce } = useAccessibilityAnnouncer();\r\n+  const mainContentRef = useRef<HTMLDivElement>(null);\r\n+\r\n+  // Focus management\r\n+  useEffect(() => {\r\n+    if (currentLessonId) {\r\n+      mainContentRef.current?.focus();\r\n+      announce(`Loaded lesson: ${lessonTitle || 'Untitled Lesson'}`);\r\n+    }\r\n+  }, [currentLessonId, lessonTitle, announce]);\r\n+\r\n+  // Announce save status changes\r\n+  useEffect(() => {\r\n+    if (saveProgress === 'saving') {\r\n+      announce('Saving changes...', 'polite');\r\n+    } else if (saveProgress === 'saved') {\r\n+      announce('Changes saved successfully', 'polite');\r\n+    } else if (saveProgress === 'error') {\r\n+      announce('Error saving changes', 'assertive');\r\n+    }\r\n+  }, [saveProgress, announce]);\r\n+\r\n+  // Announce tab changes\r\n+  useEffect(() => {\r\n+    announce(`Switched to ${activeTab} tab`);\r\n+  }, [activeTab, announce]);\r\n+\r\n+  // Breadcrumb items\r\n+  const breadcrumbItems = [\r\n+    {\r\n+      label: 'Grades',\r\n+      onClick: () => {\r\n+        setSelectedGradeId(null);\r\n+        setSelectedTopicId(null);\r\n+        setSelectedSubtopicId(null);\r\n+        setCurrentLessonId(null);\r\n+      },\r\n+      isActive: !selectedGradeId\r\n+    },\r\n+    selectedGradeId && {\r\n+      label: grades.find(g => g.id === selectedGradeId)?.name || 'Grade',\r\n+      onClick: () => {\r\n+        setSelectedTopicId(null);\r\n+        setSelectedSubtopicId(null);\r\n+        setCurrentLessonId(null);\r\n+      },\r\n+      isActive: selectedGradeId && !selectedTopicId\r\n+    },\r\n+    selectedTopicId && {\r\n+      label: topics.find(t => t.id === selectedTopicId)?.title || 'Topic',\r\n+      onClick: () => {\r\n+        setSelectedSubtopicId(null);\r\n+        setCurrentLessonId(null);\r\n+      },\r\n+      isActive: selectedTopicId && !selectedSubtopicId\r\n+    },\r\n+    selectedSubtopicId && {\r\n+      label: subtopics.find(s => s.id === selectedSubtopicId)?.title || 'Subtopic',\r\n+      onClick: () => {\r\n+        setCurrentLessonId(null);\r\n+      },\r\n+      isActive: selectedSubtopicId && !currentLessonId\r\n+    },\r\n+    currentLessonId && {\r\n+      label: lessonTitle || 'Lesson',\r\n+      onClick: () => {},\r\n+      isActive: true\r\n+    }\r\n+  ].filter(Boolean) as { label: string; onClick: () => void; isActive?: boolean }[];\r\n+\r\n+  // Error handling\r\n+  const { showBoundary } = useErrorBoundary();\r\n+  const logger = useLogger('ContentManagement');\r\n+\r\n+  // Error handling wrapper\r\n+  const handleError = useCallback(async (error: unknown, context: string) => {\r\n+    const contentError = error as ContentError;\r\n+    contentError.context = context;\r\n+\r\n+    // Log error\r\n+    logger.error('Content management error:', {\r\n+      error: contentError,\r\n+      context,\r\n+      timestamp: new Date().toISOString(),\r\n+      user: session?.user?.id,\r\n+      location: {\r\n+        grade: selectedGradeId,\r\n+        topic: selectedTopicId,\r\n+        subtopic: selectedSubtopicId,\r\n+        lesson: currentLessonId\r\n+      }\r\n+    });\r\n+\r\n+    // Show error toast\r\n+    toast.error(contentError.message || 'An error occurred', {\r\n+      description: context,\r\n+      action: {\r\n+        label: 'Try Again',\r\n+        onClick: () => {\r\n+          // Retry logic based on context\r\n+          switch (context) {\r\n+            case 'fetch_grades':\r\n+              fetchGrades();\r\n+              break;\r\n+            case 'fetch_topics':\r\n+              fetchTopics();\r\n+              break;\r\n+            case 'fetch_subtopics':\r\n+              fetchSubtopics();\r\n+              break;\r\n+            case 'fetch_lessons':\r\n+              fetchLessons();\r\n+              break;\r\n+            case 'save_lesson':\r\n+              handleSaveLesson();\r\n+              break;\r\n+            default:\r\n+              break;\r\n+          }\r\n+        }\r\n+      }\r\n+    });\r\n+\r\n+    // Show error boundary for critical errors\r\n+    if (contentError.code === 'CRITICAL') {\r\n+      showBoundary(contentError);\r\n+    }\r\n+  }, [\r\n+    logger,\r\n+    session?.user?.id,\r\n+    selectedGradeId,\r\n+    selectedTopicId,\r\n+    selectedSubtopicId,\r\n+    currentLessonId,\r\n+    showBoundary,\r\n+    fetchGrades,\r\n+    fetchTopics,\r\n+    fetchSubtopics,\r\n+    fetchLessons,\r\n+    handleSaveLesson\r\n+  ]);\r\n+\r\n+\"use client\";\r\n+\r\n import { useState, useRef, useEffect } from 'react';\r\n import { Toaster } from 'sonner';\r\n import { ContentHeader } from './components/layout/ContentHeader';\r\n import { ContentSidebar } from './components/layout/ContentSidebar';\r\n"
                },
                {
                    "date": 1740091988141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n \"use client\";\r\n \r\n-import { useState, useRef, useEffect, useCallback } from 'react';\r\n+import { useState, useRef, useEffect, useCallback, useMemo } from 'react';\r\n import { Toaster, toast } from 'sonner';\r\n import { ContentHeader } from './components/layout/ContentHeader';\r\n import { ContentSidebar } from './components/layout/ContentSidebar';\r\n import { ContentBreadcrumbs } from './components/layout/ContentBreadcrumbs';\r\n@@ -21,8 +21,9 @@\n import { useKeyboardShortcuts } from './hooks/useKeyboardShortcuts';\r\n import { useAccessibilityAnnouncer } from './hooks/useAccessibilityAnnouncer';\r\n import { useErrorBoundary } from 'react-error-boundary';\r\n import { useLogger } from '@/hooks/useLogger';\r\n+import { useSession } from '@/hooks/useSession';\r\n \r\n // Error types\r\n interface ContentError extends Error {\r\n   code?: string;\r\n@@ -171,51 +172,20 @@\n   useEffect(() => {\r\n     announce(`Switched to ${activeTab} tab`);\r\n   }, [activeTab, announce]);\r\n \r\n-  // Breadcrumb items\r\n-  const breadcrumbItems = [\r\n-    {\r\n-      label: 'Grades',\r\n-      onClick: () => {\r\n-        setSelectedGradeId(null);\r\n-        setSelectedTopicId(null);\r\n-        setSelectedSubtopicId(null);\r\n-        setCurrentLessonId(null);\r\n-      },\r\n-      isActive: !selectedGradeId\r\n-    },\r\n-    selectedGradeId && {\r\n-      label: grades.find(g => g.id === selectedGradeId)?.name || 'Grade',\r\n-      onClick: () => {\r\n-        setSelectedTopicId(null);\r\n-        setSelectedSubtopicId(null);\r\n-        setCurrentLessonId(null);\r\n-      },\r\n-      isActive: selectedGradeId && !selectedTopicId\r\n-    },\r\n-    selectedTopicId && {\r\n-      label: topics.find(t => t.id === selectedTopicId)?.title || 'Topic',\r\n-      onClick: () => {\r\n-        setSelectedSubtopicId(null);\r\n-        setCurrentLessonId(null);\r\n-      },\r\n-      isActive: selectedTopicId && !selectedSubtopicId\r\n-    },\r\n-    selectedSubtopicId && {\r\n-      label: subtopics.find(s => s.id === selectedSubtopicId)?.title || 'Subtopic',\r\n-      onClick: () => {\r\n-        setCurrentLessonId(null);\r\n-      },\r\n-      isActive: selectedSubtopicId && !currentLessonId\r\n-    },\r\n-    currentLessonId && {\r\n-      label: lessonTitle || 'Lesson',\r\n-      onClick: () => {},\r\n-      isActive: true\r\n-    }\r\n-  ].filter(Boolean) as { label: string; onClick: () => void; isActive?: boolean }[];\r\n+  // Session state\r\n+  const { session } = useSession();\r\n \r\n+  // Add loading states\r\n+  const [isLoading, setIsLoading] = useState({\r\n+    grades: false,\r\n+    topics: false,\r\n+    subtopics: false,\r\n+    lessons: false,\r\n+    saving: false\r\n+  });\r\n+\r\n   // Error handling\r\n   const { showBoundary } = useErrorBoundary();\r\n   const logger = useLogger('ContentManagement');\r\n \r\n@@ -286,189 +256,30 @@\n     fetchLessons,\r\n     handleSaveLesson\r\n   ]);\r\n \r\n-\"use client\";\r\n-\r\n-import { useState, useRef, useEffect } from 'react';\r\n-import { Toaster } from 'sonner';\r\n-import { ContentHeader } from './components/layout/ContentHeader';\r\n-import { ContentSidebar } from './components/layout/ContentSidebar';\r\n-import { ContentBreadcrumbs } from './components/layout/ContentBreadcrumbs';\r\n-import { LessonEditor } from './components/lesson/LessonEditor';\r\n-import { QuestionList } from './components/questions/QuestionList';\r\n-import { ActivityList } from './components/activities/ActivityList';\r\n-import { ContentModals } from './components/layout/ContentModals';\r\n-import { KeyboardShortcutsDialog } from './components/shared/KeyboardShortcutsDialog';\r\n-import { ProgressIndicator } from './components/shared/ProgressIndicator';\r\n-import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\n-import { ActivityIcon, MessageSquare } from 'lucide-react';\r\n-import { useContentState } from './hooks/useContentState';\r\n-import { useLessonEditor } from './hooks/useLessonEditor';\r\n-import { useQuestionManager } from './hooks/useQuestionManager';\r\n-import { useActivityManager } from './hooks/useActivityManager';\r\n-import { useContentModals } from './hooks/useContentModals';\r\n-import { useKeyboardShortcuts } from './hooks/useKeyboardShortcuts';\r\n-import { useAccessibilityAnnouncer } from './hooks/useAccessibilityAnnouncer';\r\n-\r\n-export default function ContentManagementPage() {\r\n-  // UI State\r\n-  const [showHelpTips, setShowHelpTips] = useState(true);\r\n-  const [isViewMode, setIsViewMode] = useState(true);\r\n-  const [isNavigating, setIsNavigating] = useState(false);\r\n-  const [showShortcuts, setShowShortcuts] = useState(false);\r\n-  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\r\n-  const [isSidebarLocked, setIsSidebarLocked] = useState(true);\r\n-  const [activeTab, setActiveTab] = useState<'questions' | 'activities'>('questions');\r\n-  const shortcutsButtonRef = useRef<HTMLButtonElement>(null);\r\n-\r\n-  // Content Management State\r\n-  const {\r\n-    selectedGradeId,\r\n-    selectedTopicId,\r\n-    selectedSubtopicId,\r\n-    currentLessonId,\r\n-    grades,\r\n-    topics,\r\n-    subtopics,\r\n-    lessons,\r\n-    handleGradeSelect,\r\n-    handleTopicSelect,\r\n-    handleSubtopicSelect,\r\n-    setCurrentLessonId,\r\n-    refreshContent\r\n-  } = useContentState();\r\n-\r\n-  // Lesson Editor State\r\n-  const {\r\n-    lessonTitle,\r\n-    contentHeading,\r\n-    lessonContent,\r\n-    isContentEditorOpen,\r\n-    isEditingTitle,\r\n-    isEditingHeading,\r\n-    saveProgress,\r\n-    setLessonTitle,\r\n-    setContentHeading,\r\n-    setLessonContent,\r\n-    setIsContentEditorOpen,\r\n-    setIsEditingTitle,\r\n-    setIsEditingHeading,\r\n-    loadLessonContent,\r\n-    saveLesson,\r\n-  } = useLessonEditor(currentLessonId);\r\n-\r\n-  // Question Manager State\r\n-  const {\r\n-    questions,\r\n-    selectedQuestionType,\r\n-    questionSaveStatuses,\r\n-    expandedQuestion,\r\n-    setQuestions,\r\n-    setSelectedQuestionType,\r\n-    setExpandedQuestion,\r\n-    addQuestion,\r\n-    saveQuestion,\r\n-    updateQuestion,\r\n-    removeQuestion,\r\n-  } = useQuestionManager(currentLessonId);\r\n-\r\n-  // Activity Manager State\r\n-  const {\r\n-    activities,\r\n-    activitySaveStatuses,\r\n-    expandedActivity,\r\n-    setActivities,\r\n-    setExpandedActivity,\r\n-    addActivity,\r\n-    updateActivity,\r\n-    removeActivity,\r\n-    saveActivity,\r\n-  } = useActivityManager(currentLessonId);\r\n-\r\n-  // Modal Management\r\n-  const {\r\n-    modalState,\r\n-    openModal,\r\n-    closeModal,\r\n-    handlers: modalHandlers\r\n-  } = useContentModals({\r\n-    selectedGradeId,\r\n-    selectedTopicId,\r\n-    selectedSubtopicId,\r\n-    onSuccess: refreshContent\r\n-  });\r\n-\r\n-  // Keyboard Shortcuts\r\n-  useKeyboardShortcuts({\r\n-    onSave: saveLesson,\r\n-    onToggleEditMode: () => setIsViewMode(!isViewMode),\r\n-    onToggleHelpTips: () => setShowHelpTips(!showHelpTips),\r\n-    onToggleShortcuts: () => shortcutsButtonRef.current?.click(),\r\n-    onToggleContentEditor: () => setIsContentEditorOpen(!isContentEditorOpen),\r\n-    onSaveContent: saveLesson,\r\n-    onCollapseSidebar: () => setIsSidebarCollapsed(true),\r\n-    onExpandSidebar: () => setIsSidebarCollapsed(false),\r\n-    onToggleSidebarLock: () => setIsSidebarLocked(!isSidebarLocked),\r\n-    onSwitchToQuestions: () => setActiveTab('questions'),\r\n-    onSwitchToActivities: () => setActiveTab('activities'),\r\n-    onAddNew: () => activeTab === 'questions' ? addQuestion() : addActivity(),\r\n-    isContentEditorOpen\r\n-  });\r\n-\r\n-  // Accessibility\r\n-  const { announce } = useAccessibilityAnnouncer();\r\n-  const mainContentRef = useRef<HTMLDivElement>(null);\r\n-\r\n-  // Focus management\r\n-  useEffect(() => {\r\n-    if (currentLessonId) {\r\n-      mainContentRef.current?.focus();\r\n-      announce(`Loaded lesson: ${lessonTitle || 'Untitled Lesson'}`);\r\n-    }\r\n-  }, [currentLessonId, lessonTitle, announce]);\r\n-\r\n-  // Announce save status changes\r\n-  useEffect(() => {\r\n-    if (saveProgress === 'saving') {\r\n-      announce('Saving changes...', 'polite');\r\n-    } else if (saveProgress === 'saved') {\r\n-      announce('Changes saved successfully', 'polite');\r\n-    } else if (saveProgress === 'error') {\r\n-      announce('Error saving changes', 'assertive');\r\n-    }\r\n-  }, [saveProgress, announce]);\r\n-\r\n-  // Announce tab changes\r\n-  useEffect(() => {\r\n-    announce(`Switched to ${activeTab} tab`);\r\n-  }, [activeTab, announce]);\r\n-\r\n-  // Breadcrumb items\r\n-  const breadcrumbItems = [\r\n+  // Breadcrumb items with proper state management\r\n+  const breadcrumbItems = useMemo(() => [\r\n     {\r\n       label: 'Grades',\r\n       onClick: () => {\r\n-        setSelectedGradeId(null);\r\n-        setSelectedTopicId(null);\r\n-        setSelectedSubtopicId(null);\r\n+        handleGradeSelect('');\r\n         setCurrentLessonId(null);\r\n       },\r\n       isActive: !selectedGradeId\r\n     },\r\n     selectedGradeId && {\r\n       label: grades.find(g => g.id === selectedGradeId)?.name || 'Grade',\r\n       onClick: () => {\r\n-        setSelectedTopicId(null);\r\n-        setSelectedSubtopicId(null);\r\n+        handleTopicSelect('');\r\n         setCurrentLessonId(null);\r\n       },\r\n       isActive: selectedGradeId && !selectedTopicId\r\n     },\r\n     selectedTopicId && {\r\n       label: topics.find(t => t.id === selectedTopicId)?.title || 'Topic',\r\n       onClick: () => {\r\n-        setSelectedSubtopicId(null);\r\n+        handleSubtopicSelect('');\r\n         setCurrentLessonId(null);\r\n       },\r\n       isActive: selectedTopicId && !selectedSubtopicId\r\n     },\r\n@@ -483,9 +294,22 @@\n       label: lessonTitle || 'Lesson',\r\n       onClick: () => {},\r\n       isActive: true\r\n     }\r\n-  ].filter(Boolean) as { label: string; onClick: () => void; isActive?: boolean }[];\r\n+  ].filter(Boolean) as { label: string; onClick: () => void; isActive?: boolean }[], [\r\n+    selectedGradeId,\r\n+    selectedTopicId,\r\n+    selectedSubtopicId,\r\n+    currentLessonId,\r\n+    grades,\r\n+    topics,\r\n+    subtopics,\r\n+    lessonTitle,\r\n+    handleGradeSelect,\r\n+    handleTopicSelect,\r\n+    handleSubtopicSelect,\r\n+    setCurrentLessonId\r\n+  ]);\r\n \r\n   return (\r\n     <div \r\n       className=\"min-h-screen bg-background\"\r\n"
                },
                {
                    "date": 1740092059609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,9 @@\n import { useAccessibilityAnnouncer } from './hooks/useAccessibilityAnnouncer';\r\n import { useErrorBoundary } from 'react-error-boundary';\r\n import { useLogger } from '@/hooks/useLogger';\r\n import { useSession } from '@/hooks/useSession';\r\n+import { supabase } from '@/lib/supabase';\r\n \r\n // Error types\r\n interface ContentError extends Error {\r\n   code?: string;\r\n@@ -64,9 +65,13 @@\n     handleGradeSelect,\r\n     handleTopicSelect,\r\n     handleSubtopicSelect,\r\n     setCurrentLessonId,\r\n-    refreshContent\r\n+    refreshContent,\r\n+    fetchGrades,\r\n+    fetchTopics,\r\n+    fetchSubtopics,\r\n+    fetchLessons\r\n   } = useContentState();\r\n \r\n   // Lesson Editor State\r\n   const {\r\n@@ -188,8 +193,100 @@\n   // Error handling\r\n   const { showBoundary } = useErrorBoundary();\r\n   const logger = useLogger('ContentManagement');\r\n \r\n+  // Enhanced save function with error handling\r\n+  const handleSaveLesson = async () => {\r\n+    if (!currentLessonId || !selectedSubtopicId) {\r\n+      toast.error('Please select a subtopic and lesson first');\r\n+      return;\r\n+    }\r\n+\r\n+    setIsLoading(prev => ({ ...prev, saving: true }));\r\n+    const loadingToast = toast.loading('Saving lesson...', {\r\n+      description: 'Please wait while we save your changes'\r\n+    });\r\n+\r\n+    try {\r\n+      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\r\n+      if (sessionError) throw createError(sessionError.message, 'AUTH_ERROR', { details: sessionError });\r\n+      \r\n+      if (!session?.user) {\r\n+        throw createError('Please sign in to save lessons', 'AUTH_REQUIRED');\r\n+      }\r\n+\r\n+      // Get user's role from session\r\n+      const userRole = session.user.user_metadata?.role;\r\n+      logger.info('Saving lesson', {\r\n+        user: session.user.id,\r\n+        role: userRole,\r\n+        lessonId: currentLessonId\r\n+      });\r\n+\r\n+      // Save lesson metadata\r\n+      const lessonData = {\r\n+        id: currentLessonId,\r\n+        title: lessonTitle,\r\n+        contentheading: contentHeading,\r\n+        updated_at: new Date().toISOString(),\r\n+        user_id: session.user.id,\r\n+        metadata: {\r\n+          lastEdited: new Date().toISOString(),\r\n+          version: 1,\r\n+          status: 'draft'\r\n+        }\r\n+      };\r\n+\r\n+      const { error: lessonError } = await supabase\r\n+        .from('lessons')\r\n+        .upsert(lessonData);\r\n+\r\n+      if (lessonError) throw lessonError;\r\n+\r\n+      // Save lesson content\r\n+      const { data: existingContent } = await supabase\r\n+        .from('lesson_content')\r\n+        .select('id')\r\n+        .eq('lesson_id', currentLessonId)\r\n+        .single();\r\n+\r\n+      const contentData = {\r\n+        id: existingContent?.id || crypto.randomUUID(),\r\n+        lesson_id: currentLessonId,\r\n+        content: [lessonContent],\r\n+        content_type: 'html',\r\n+        metadata: {\r\n+          lastEdited: new Date().toISOString(),\r\n+          version: 1,\r\n+          status: 'draft'\r\n+        },\r\n+        user_id: session.user.id,\r\n+        updated_at: new Date().toISOString()\r\n+      };\r\n+\r\n+      const { error: contentError } = await supabase\r\n+        .from('lesson_content')\r\n+        .upsert(contentData);\r\n+\r\n+      if (contentError) throw contentError;\r\n+\r\n+      toast.success('Lesson saved successfully', {\r\n+        id: loadingToast,\r\n+        description: 'All changes have been saved'\r\n+      });\r\n+\r\n+      logger.info('Lesson saved successfully', {\r\n+        lessonId: currentLessonId,\r\n+        timestamp: new Date().toISOString()\r\n+      });\r\n+    } catch (error) {\r\n+      handleError(error, 'save_lesson');\r\n+      toast.error('Failed to save lesson', { id: loadingToast });\r\n+    } finally {\r\n+      setIsLoading(prev => ({ ...prev, saving: false }));\r\n+    }\r\n+  };\r\n+\r\n   // Error handling wrapper\r\n   const handleError = useCallback(async (error: unknown, context: string) => {\r\n     const contentError = error as ContentError;\r\n     contentError.context = context;\r\n"
                }
            ],
            "date": 1740086559078,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport { useState } from 'react';\r\nimport { Toaster } from 'sonner';\r\nimport { ContentHeader } from './components/layout/ContentHeader';\r\nimport { ContentSidebar } from './components/layout/ContentSidebar';\r\nimport { LessonEditor } from './components/lesson/LessonEditor';\r\nimport { QuestionList } from './components/questions/QuestionList';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { ActivityIcon, MessageSquare } from 'lucide-react';\r\nimport { useContentState } from './hooks/useContentState';\r\nimport { useLessonEditor } from './hooks/useLessonEditor';\r\nimport { useQuestionManager } from './hooks/useQuestionManager';\r\n\r\nexport default function ContentManagementPage() {\r\n  // UI State\r\n  const [showHelpTips, setShowHelpTips] = useState(true);\r\n  const [isViewMode, setIsViewMode] = useState(true);\r\n  const [isNavigating, setIsNavigating] = useState(false);\r\n\r\n  // Content Management State\r\n  const {\r\n    selectedGradeId,\r\n    selectedTopicId,\r\n    selectedSubtopicId,\r\n    currentLessonId,\r\n    grades,\r\n    topics,\r\n    subtopics,\r\n    lessons,\r\n    handleGradeSelect,\r\n    handleTopicSelect,\r\n    handleSubtopicSelect,\r\n    setCurrentLessonId,\r\n  } = useContentState();\r\n\r\n  // Lesson Editor State\r\n  const {\r\n    lessonTitle,\r\n    contentHeading,\r\n    lessonContent,\r\n    isContentEditorOpen,\r\n    isEditingTitle,\r\n    isEditingHeading,\r\n    saveProgress,\r\n    setLessonTitle,\r\n    setContentHeading,\r\n    setLessonContent,\r\n    setIsContentEditorOpen,\r\n    setIsEditingTitle,\r\n    setIsEditingHeading,\r\n    loadLessonContent,\r\n    saveLesson,\r\n  } = useLessonEditor(currentLessonId);\r\n\r\n  // Question Manager State\r\n  const {\r\n    questions,\r\n    selectedQuestionType,\r\n    questionSaveStatuses,\r\n    expandedQuestion,\r\n    setQuestions,\r\n    setSelectedQuestionType,\r\n    setExpandedQuestion,\r\n    addQuestion,\r\n    saveQuestion,\r\n    updateQuestion,\r\n    removeQuestion,\r\n  } = useQuestionManager(currentLessonId);\r\n\r\n  return (\r\n    <div className=\"container mx-auto py-8\">\r\n      {/* Header */}\r\n      <ContentHeader\r\n        showHelpTips={showHelpTips}\r\n        onToggleHelpTips={() => setShowHelpTips(!showHelpTips)}\r\n        onRefresh={() => loadLessonContent(currentLessonId || '')}\r\n      />\r\n\r\n      {/* Main Content */}\r\n      <div className=\"flex gap-6 mt-6\">\r\n        {/* Sidebar */}\r\n        <ContentSidebar\r\n          grades={grades}\r\n          topics={topics}\r\n          subtopics={subtopics}\r\n          lessons={lessons}\r\n          selectedGradeId={selectedGradeId}\r\n          selectedTopicId={selectedTopicId}\r\n          selectedSubtopicId={selectedSubtopicId}\r\n          currentLessonId={currentLessonId}\r\n          isViewMode={isViewMode}\r\n          onGradeSelect={handleGradeSelect}\r\n          onTopicSelect={handleTopicSelect}\r\n          onSubtopicSelect={handleSubtopicSelect}\r\n          onLessonSelect={setCurrentLessonId}\r\n          onAddGrade={() => {}}\r\n          onAddTopic={() => {}}\r\n          onAddSubtopic={() => {}}\r\n          onAddLesson={() => {}}\r\n        />\r\n\r\n        {/* Content Area */}\r\n        <div className=\"flex-1\">\r\n          {isNavigating ? (\r\n            <div className=\"flex items-center justify-center h-[400px]\">\r\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n              <span className=\"ml-3\">Loading...</span>\r\n            </div>\r\n          ) : !currentLessonId ? (\r\n            <div className=\"text-center py-20\">\r\n              <h3 className=\"text-lg font-medium\">Select a Lesson</h3>\r\n              <p className=\"text-sm text-muted-foreground\">\r\n                Choose a lesson from the sidebar to start editing\r\n              </p>\r\n            </div>\r\n          ) : (\r\n            <div className=\"space-y-6\">\r\n              {/* Lesson Editor */}\r\n              <LessonEditor\r\n                lessonTitle={lessonTitle}\r\n                contentHeading={contentHeading}\r\n                lessonContent={lessonContent}\r\n                isContentEditorOpen={isContentEditorOpen}\r\n                isEditingTitle={isEditingTitle}\r\n                isEditingHeading={isEditingHeading}\r\n                saveProgress={saveProgress}\r\n                onTitleChange={setLessonTitle}\r\n                onHeadingChange={setContentHeading}\r\n                onContentChange={setLessonContent}\r\n                onContentSave={saveLesson}\r\n                setIsContentEditorOpen={setIsContentEditorOpen}\r\n                setIsEditingTitle={setIsEditingTitle}\r\n                setIsEditingHeading={setIsEditingHeading}\r\n                onSave={saveLesson}\r\n              />\r\n\r\n              {/* Questions and Activities Tabs */}\r\n              <Tabs defaultValue=\"questions\">\r\n                <TabsList className=\"grid w-full grid-cols-2\">\r\n                  <TabsTrigger value=\"questions\">\r\n                    <MessageSquare className=\"h-4 w-4 mr-2\" />\r\n                    Questions\r\n                  </TabsTrigger>\r\n                  <TabsTrigger value=\"activities\">\r\n                    <ActivityIcon className=\"h-4 w-4 mr-2\" />\r\n                    Activities\r\n                  </TabsTrigger>\r\n                </TabsList>\r\n\r\n                <TabsContent value=\"questions\">\r\n                  <QuestionList\r\n                    questions={questions}\r\n                    selectedQuestionType={selectedQuestionType}\r\n                    questionSaveStatuses={questionSaveStatuses}\r\n                    expandedQuestion={expandedQuestion}\r\n                    onQuestionTypeChange={setSelectedQuestionType}\r\n                    onAddQuestion={addQuestion}\r\n                    onUpdateQuestion={updateQuestion}\r\n                    onRemoveQuestion={removeQuestion}\r\n                    onSaveQuestion={saveQuestion}\r\n                    onExpandQuestion={setExpandedQuestion}\r\n                  />\r\n                </TabsContent>\r\n\r\n                <TabsContent value=\"activities\">\r\n                  {/* TODO: Add Activities List component */}\r\n                  <div className=\"text-center py-8 text-muted-foreground\">\r\n                    Activities management coming soon...\r\n                  </div>\r\n                </TabsContent>\r\n              </Tabs>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <Toaster />\r\n    </div>\r\n  );\r\n} "
        }
    ]
}