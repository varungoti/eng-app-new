{
    "sourceFile": "src/features/content-management/components/layout/ContentSidebar.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1740085801564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740089543725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,10 @@\n import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\n import { Label } from '@/components/ui/label';\r\n import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\n import { Button } from '@/components/ui/button';\r\n+import { Badge } from '@/components/ui/badge';\r\n+import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\r\n import { cn } from '@/lib/utils';\r\n import { Grade, Topic, Subtopic, Lesson } from '../../api/types';\r\n \r\n interface ContentSidebarProps {\r\n@@ -16,16 +18,21 @@\n   selectedTopicId: string | null;\r\n   selectedSubtopicId: string | null;\r\n   currentLessonId: string | null;\r\n   isViewMode: boolean;\r\n+  isCollapsed: boolean;\r\n+  isLocked: boolean;\r\n   onGradeSelect: (gradeId: string) => void;\r\n   onTopicSelect: (topicId: string) => void;\r\n   onSubtopicSelect: (subtopicId: string) => void;\r\n   onLessonSelect: (lessonId: string) => void;\r\n   onAddGrade: () => void;\r\n   onAddTopic: () => void;\r\n   onAddSubtopic: () => void;\r\n   onAddLesson: () => void;\r\n+  onCollapsedChange: (collapsed: boolean) => void;\r\n+  onLockedChange: (locked: boolean) => void;\r\n+  className?: string;\r\n }\r\n \r\n export const ContentSidebar = ({\r\n   grades,\r\n@@ -36,68 +43,83 @@\n   selectedTopicId,\r\n   selectedSubtopicId,\r\n   currentLessonId,\r\n   isViewMode,\r\n+  isCollapsed,\r\n+  isLocked,\r\n   onGradeSelect,\r\n   onTopicSelect,\r\n   onSubtopicSelect,\r\n   onLessonSelect,\r\n   onAddGrade,\r\n   onAddTopic,\r\n   onAddSubtopic,\r\n   onAddLesson,\r\n+  onCollapsedChange,\r\n+  onLockedChange,\r\n+  className\r\n }: ContentSidebarProps) => {\r\n-  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\r\n-  const [isSidebarLocked, setIsSidebarLocked] = useState(true);\r\n   const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n \r\n+  // Auto-collapse sidebar when lesson is selected\r\n   useEffect(() => {\r\n-    if (currentLessonId && !isSidebarLocked) {\r\n-      const timer = setTimeout(() => setIsSidebarCollapsed(true), 300);\r\n+    if (currentLessonId && !isLocked) {\r\n+      const timer = setTimeout(() => onCollapsedChange(true), 300);\r\n       return () => clearTimeout(timer);\r\n     }\r\n-  }, [currentLessonId, isSidebarLocked]);\r\n+  }, [currentLessonId, isLocked, onCollapsedChange]);\r\n \r\n   return (\r\n     <div \r\n       className={cn(\r\n         \"transition-all duration-300 ease-in-out relative\",\r\n-        isSidebarCollapsed ? \"w-20\" : \"w-80\",\r\n-        \"flex-shrink-0 group\"\r\n+        isCollapsed ? \"w-20\" : \"w-80\",\r\n+        \"flex-shrink-0 group\",\r\n+        className\r\n       )}\r\n       onMouseEnter={() => {\r\n-        if (!isSidebarLocked) {\r\n-          setIsSidebarCollapsed(false);\r\n+        if (!isLocked) {\r\n+          onCollapsedChange(false);\r\n         }\r\n       }}\r\n       onMouseLeave={() => {\r\n-        if (!isSidebarLocked && !isDropdownOpen) {\r\n-          setIsSidebarCollapsed(true);\r\n+        if (!isLocked && !isDropdownOpen) {\r\n+          onCollapsedChange(true);\r\n         }\r\n       }}\r\n     >\r\n       <Card className=\"h-full relative\">\r\n+        {/* Lock/Unlock Button */}\r\n         {currentLessonId && (\r\n-          <Button\r\n-            variant=\"ghost\"\r\n-            size=\"sm\"\r\n-            className=\"absolute top-2 right-2 z-10\"\r\n-            onClick={() => setIsSidebarLocked(!isSidebarLocked)}\r\n-          >\r\n-            {isSidebarLocked ? <Lock className=\"h-4 w-4\" /> : <Unlock className=\"h-4 w-4\" />}\r\n-          </Button>\r\n+          <TooltipProvider>\r\n+            <Tooltip>\r\n+              <TooltipTrigger asChild>\r\n+                <Button\r\n+                  variant=\"ghost\"\r\n+                  size=\"sm\"\r\n+                  className=\"absolute top-2 right-2 z-10\"\r\n+                  onClick={() => onLockedChange(!isLocked)}\r\n+                >\r\n+                  {isLocked ? <Lock className=\"h-4 w-4\" /> : <Unlock className=\"h-4 w-4\" />}\r\n+                </Button>\r\n+              </TooltipTrigger>\r\n+              <TooltipContent>\r\n+                {isLocked ? 'Unlock sidebar' : 'Lock sidebar'}\r\n+              </TooltipContent>\r\n+            </Tooltip>\r\n+          </TooltipProvider>\r\n         )}\r\n \r\n         <div className={cn(\r\n           \"transition-all duration-300 overflow-hidden\",\r\n-          isSidebarCollapsed ? \"opacity-0\" : \"opacity-100\"\r\n+          isCollapsed ? \"opacity-0\" : \"opacity-100\"\r\n         )}>\r\n-          <CardHeader className=\"pb-3\">\r\n+          <CardHeader className=\"pb-4\">\r\n             <CardTitle className=\"text-lg font-semibold\">Content Management</CardTitle>\r\n             <CardDescription>Create and manage your lessons</CardDescription>\r\n           </CardHeader>\r\n \r\n-          <CardContent className=\"space-y-4\">\r\n+          <CardContent className=\"space-y-6\">\r\n             {/* Grade Selection */}\r\n             <div className=\"space-y-2\">\r\n               <Label htmlFor=\"grade-select\">Grade</Label>\r\n               <Select \r\n@@ -183,9 +205,14 @@\n                   </SelectTrigger>\r\n                   <SelectContent>\r\n                     {subtopics.map((subtopic) => (\r\n                       <SelectItem key={subtopic.id} value={subtopic.id}>\r\n-                        {subtopic.title}\r\n+                        <div className=\"flex items-center justify-between w-full\">\r\n+                          <span>{subtopic.title}</span>\r\n+                          <Badge variant=\"outline\" className=\"ml-2\">\r\n+                            {subtopic.lessons?.length || 0} lessons\r\n+                          </Badge>\r\n+                        </div>\r\n                       </SelectItem>\r\n                     ))}\r\n                   </SelectContent>\r\n                 </Select>\r\n@@ -219,9 +246,16 @@\n                     {lessons.map((lesson) => (\r\n                       <SelectItem key={lesson.id} value={lesson.id}>\r\n                         <div className=\"flex items-center gap-2\">\r\n                           <BookOpen className=\"h-4 w-4 text-primary\" />\r\n-                          {lesson.title}\r\n+                          <div className=\"flex flex-col\">\r\n+                            <span>{lesson.title}</span>\r\n+                            {lesson.status && (\r\n+                              <Badge variant=\"outline\" className=\"mt-1\">\r\n+                                {lesson.status}\r\n+                              </Badge>\r\n+                            )}\r\n+                          </div>\r\n                         </div>\r\n                       </SelectItem>\r\n                     ))}\r\n                   </SelectContent>\r\n@@ -241,10 +275,10 @@\n             )}\r\n           </CardContent>\r\n         </div>\r\n \r\n-        {/* Collapsed view */}\r\n-        {isSidebarCollapsed && (\r\n+        {/* Collapsed View */}\r\n+        {isCollapsed && (\r\n           <div className=\"absolute inset-0 flex flex-col items-center pt-12 gap-4\">\r\n             <BookOpen className=\"h-6 w-6 text-muted-foreground\" />\r\n             <div className=\"w-px h-full bg-border\" />\r\n           </div>\r\n"
                },
                {
                    "date": 1740091499190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\n import { Button } from '@/components/ui/button';\r\n import { Badge } from '@/components/ui/badge';\r\n import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\r\n+import { ScrollArea } from '@/components/ui/scroll-area';\r\n import { cn } from '@/lib/utils';\r\n import { Grade, Topic, Subtopic, Lesson } from '../../api/types';\r\n \r\n interface ContentSidebarProps {\r\n@@ -58,8 +59,9 @@\n   onLockedChange,\r\n   className\r\n }: ContentSidebarProps) => {\r\n   const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n+  const [hoveredItem, setHoveredItem] = useState<string | null>(null);\r\n \r\n   // Auto-collapse sidebar when lesson is selected\r\n   useEffect(() => {\r\n     if (currentLessonId && !isLocked) {\r\n@@ -71,9 +73,9 @@\n   return (\r\n     <div \r\n       className={cn(\r\n         \"transition-all duration-300 ease-in-out relative\",\r\n-        isCollapsed ? \"w-20\" : \"w-80\",\r\n+        isCollapsed ? \"w-16 sm:w-20\" : \"w-64 sm:w-80\",\r\n         \"flex-shrink-0 group\",\r\n         className\r\n       )}\r\n       onMouseEnter={() => {\r\n@@ -86,21 +88,37 @@\n           onCollapsedChange(true);\r\n         }\r\n       }}\r\n     >\r\n-      <Card className=\"h-full relative\">\r\n+      <Card className={cn(\r\n+        \"h-full relative\",\r\n+        \"transition-all duration-300\",\r\n+        \"border-primary/10\",\r\n+        \"hover:border-primary/20\",\r\n+        \"hover:shadow-lg\",\r\n+        \"bg-gradient-to-b from-card to-card/95\"\r\n+      )}>\r\n         {/* Lock/Unlock Button */}\r\n         {currentLessonId && (\r\n           <TooltipProvider>\r\n             <Tooltip>\r\n               <TooltipTrigger asChild>\r\n                 <Button\r\n                   variant=\"ghost\"\r\n                   size=\"sm\"\r\n-                  className=\"absolute top-2 right-2 z-10\"\r\n+                  className={cn(\r\n+                    \"absolute top-2 right-2 z-10\",\r\n+                    \"transition-all duration-200\",\r\n+                    \"hover:bg-primary/10\",\r\n+                    \"group\"\r\n+                  )}\r\n                   onClick={() => onLockedChange(!isLocked)}\r\n                 >\r\n-                  {isLocked ? <Lock className=\"h-4 w-4\" /> : <Unlock className=\"h-4 w-4\" />}\r\n+                  {isLocked ? (\r\n+                    <Lock className=\"h-4 w-4 transition-transform duration-200 group-hover:scale-110\" />\r\n+                  ) : (\r\n+                    <Unlock className=\"h-4 w-4 transition-transform duration-200 group-hover:scale-110\" />\r\n+                  )}\r\n                 </Button>\r\n               </TooltipTrigger>\r\n               <TooltipContent>\r\n                 {isLocked ? 'Unlock sidebar' : 'Lock sidebar'}\r\n@@ -109,70 +127,57 @@\n           </TooltipProvider>\r\n         )}\r\n \r\n         <div className={cn(\r\n-          \"transition-all duration-300 overflow-hidden\",\r\n-          isCollapsed ? \"opacity-0\" : \"opacity-100\"\r\n+          \"transition-all duration-300\",\r\n+          isCollapsed ? \"opacity-0 invisible\" : \"opacity-100 visible\"\r\n         )}>\r\n-          <CardHeader className=\"pb-4\">\r\n-            <CardTitle className=\"text-lg font-semibold\">Content Management</CardTitle>\r\n+          <CardHeader className=\"pb-4 space-y-3\">\r\n+            <CardTitle className=\"text-lg font-semibold bg-gradient-to-r from-primary to-primary/60 bg-clip-text text-transparent\">\r\n+              Content Management\r\n+            </CardTitle>\r\n             <CardDescription>Create and manage your lessons</CardDescription>\r\n           </CardHeader>\r\n \r\n-          <CardContent className=\"space-y-6\">\r\n-            {/* Grade Selection */}\r\n-            <div className=\"space-y-2\">\r\n-              <Label htmlFor=\"grade-select\">Grade</Label>\r\n-              <Select \r\n-                value={selectedGradeId || ''} \r\n-                onValueChange={onGradeSelect}\r\n-                onOpenChange={setIsDropdownOpen}\r\n-              >\r\n-                <SelectTrigger id=\"grade-select\">\r\n-                  <SelectValue placeholder=\"Select Grade\" />\r\n-                </SelectTrigger>\r\n-                <SelectContent>\r\n-                  {grades.map((grade) => (\r\n-                    <SelectItem key={grade.id} value={grade.id}>\r\n-                      <div className=\"flex items-center gap-2\">\r\n-                        <BookOpen className=\"h-4 w-4 text-primary\" />\r\n-                        {grade.name}\r\n-                      </div>\r\n-                    </SelectItem>\r\n-                  ))}\r\n-                </SelectContent>\r\n-              </Select>\r\n-              {!isViewMode && (\r\n-                <Button \r\n-                  variant=\"outline\" \r\n-                  size=\"sm\" \r\n-                  className=\"w-full gap-2\"\r\n-                  onClick={onAddGrade}\r\n-                >\r\n-                  <Plus className=\"h-4 w-4\" />\r\n-                  Add New Grade\r\n-                </Button>\r\n-              )}\r\n-            </div>\r\n-\r\n-            {/* Topic Selection */}\r\n-            {selectedGradeId && (\r\n-              <div className=\"space-y-2\">\r\n-                <Label htmlFor=\"topic-select\">Topic</Label>\r\n+          <ScrollArea className=\"h-[calc(100vh-12rem)] px-6\">\r\n+            <div className=\"space-y-6 pb-6\">\r\n+              {/* Grade Selection */}\r\n+              <div className=\"space-y-2 animate-fade-in-up\" style={{ animationDelay: '100ms' }}>\r\n+                <Label htmlFor=\"grade-select\">Grade</Label>\r\n                 <Select \r\n-                  value={selectedTopicId || ''} \r\n-                  onValueChange={onTopicSelect}\r\n+                  value={selectedGradeId || ''} \r\n+                  onValueChange={onGradeSelect}\r\n                   onOpenChange={setIsDropdownOpen}\r\n                 >\r\n-                  <SelectTrigger id=\"topic-select\">\r\n-                    <SelectValue placeholder=\"Select Topic\" />\r\n+                  <SelectTrigger \r\n+                    id=\"grade-select\"\r\n+                    className=\"transition-all duration-200 focus:scale-[1.01]\"\r\n+                  >\r\n+                    <SelectValue placeholder=\"Select Grade\" />\r\n                   </SelectTrigger>\r\n                   <SelectContent>\r\n-                    {topics.map((topic) => (\r\n-                      <SelectItem key={topic.id} value={topic.id}>\r\n+                    {grades.map((grade) => (\r\n+                      <SelectItem \r\n+                        key={grade.id} \r\n+                        value={grade.id}\r\n+                        className={cn(\r\n+                          \"transition-all duration-200\",\r\n+                          \"hover:bg-primary/10\",\r\n+                          \"focus:bg-primary/10\",\r\n+                          \"group\"\r\n+                        )}\r\n+                        onMouseEnter={() => setHoveredItem(grade.id)}\r\n+                        onMouseLeave={() => setHoveredItem(null)}\r\n+                      >\r\n                         <div className=\"flex items-center gap-2\">\r\n-                          <Layers className=\"h-4 w-4 text-primary\" />\r\n-                          {topic.title}\r\n+                          <BookOpen className={cn(\r\n+                            \"h-4 w-4 text-primary\",\r\n+                            \"transition-transform duration-200\",\r\n+                            hoveredItem === grade.id && \"scale-110\"\r\n+                          )} />\r\n+                          <span className=\"transition-colors duration-200 group-hover:text-primary\">\r\n+                            {grade.name}\r\n+                          </span>\r\n                         </div>\r\n                       </SelectItem>\r\n                     ))}\r\n                   </SelectContent>\r\n@@ -180,108 +185,232 @@\n                 {!isViewMode && (\r\n                   <Button \r\n                     variant=\"outline\" \r\n                     size=\"sm\" \r\n-                    className=\"w-full gap-2\"\r\n-                    onClick={onAddTopic}\r\n+                    className={cn(\r\n+                      \"w-full gap-2\",\r\n+                      \"transition-all duration-200\",\r\n+                      \"hover:bg-primary/10 hover:text-primary\",\r\n+                      \"group\"\r\n+                    )}\r\n+                    onClick={onAddGrade}\r\n                   >\r\n-                    <Plus className=\"h-4 w-4\" />\r\n-                    Add New Topic\r\n+                    <Plus className=\"h-4 w-4 transition-transform duration-200 group-hover:scale-110\" />\r\n+                    Add New Grade\r\n                   </Button>\r\n                 )}\r\n               </div>\r\n-            )}\r\n \r\n-            {/* Subtopic Selection */}\r\n-            {selectedTopicId && (\r\n-              <div className=\"space-y-2\">\r\n-                <Label htmlFor=\"subtopic-select\">Subtopic</Label>\r\n-                <Select \r\n-                  value={selectedSubtopicId || ''} \r\n-                  onValueChange={onSubtopicSelect}\r\n-                  onOpenChange={setIsDropdownOpen}\r\n-                >\r\n-                  <SelectTrigger id=\"subtopic-select\">\r\n-                    <SelectValue placeholder=\"Select Subtopic\" />\r\n-                  </SelectTrigger>\r\n-                  <SelectContent>\r\n-                    {subtopics.map((subtopic) => (\r\n-                      <SelectItem key={subtopic.id} value={subtopic.id}>\r\n-                        <div className=\"flex items-center justify-between w-full\">\r\n-                          <span>{subtopic.title}</span>\r\n-                          <Badge variant=\"outline\" className=\"ml-2\">\r\n-                            {subtopic.lessons?.length || 0} lessons\r\n-                          </Badge>\r\n-                        </div>\r\n-                      </SelectItem>\r\n-                    ))}\r\n-                  </SelectContent>\r\n-                </Select>\r\n-                {!isViewMode && (\r\n-                  <Button \r\n-                    variant=\"outline\" \r\n-                    size=\"sm\" \r\n-                    className=\"w-full gap-2\"\r\n-                    onClick={onAddSubtopic}\r\n+              {/* Topic Selection */}\r\n+              {selectedGradeId && (\r\n+                <div className=\"space-y-2 animate-fade-in-up\" style={{ animationDelay: '200ms' }}>\r\n+                  <Label htmlFor=\"topic-select\">Topic</Label>\r\n+                  <Select \r\n+                    value={selectedTopicId || ''} \r\n+                    onValueChange={onTopicSelect}\r\n+                    onOpenChange={setIsDropdownOpen}\r\n                   >\r\n-                    <Plus className=\"h-4 w-4\" />\r\n-                    Add New Subtopic\r\n-                  </Button>\r\n-                )}\r\n-              </div>\r\n-            )}\r\n+                    <SelectTrigger \r\n+                      id=\"topic-select\"\r\n+                      className=\"transition-all duration-200 focus:scale-[1.01]\"\r\n+                    >\r\n+                      <SelectValue placeholder=\"Select Topic\" />\r\n+                    </SelectTrigger>\r\n+                    <SelectContent>\r\n+                      {topics.map((topic) => (\r\n+                        <SelectItem \r\n+                          key={topic.id} \r\n+                          value={topic.id}\r\n+                          className={cn(\r\n+                            \"transition-all duration-200\",\r\n+                            \"hover:bg-primary/10\",\r\n+                            \"focus:bg-primary/10\",\r\n+                            \"group\"\r\n+                          )}\r\n+                          onMouseEnter={() => setHoveredItem(topic.id)}\r\n+                          onMouseLeave={() => setHoveredItem(null)}\r\n+                        >\r\n+                          <div className=\"flex items-center gap-2\">\r\n+                            <Layers className={cn(\r\n+                              \"h-4 w-4 text-primary\",\r\n+                              \"transition-transform duration-200\",\r\n+                              hoveredItem === topic.id && \"scale-110\"\r\n+                            )} />\r\n+                            <span className=\"transition-colors duration-200 group-hover:text-primary\">\r\n+                              {topic.title}\r\n+                            </span>\r\n+                          </div>\r\n+                        </SelectItem>\r\n+                      ))}\r\n+                    </SelectContent>\r\n+                  </Select>\r\n+                  {!isViewMode && (\r\n+                    <Button \r\n+                      variant=\"outline\" \r\n+                      size=\"sm\" \r\n+                      className={cn(\r\n+                        \"w-full gap-2\",\r\n+                        \"transition-all duration-200\",\r\n+                        \"hover:bg-primary/10 hover:text-primary\",\r\n+                        \"group\"\r\n+                      )}\r\n+                      onClick={onAddTopic}\r\n+                    >\r\n+                      <Plus className=\"h-4 w-4 transition-transform duration-200 group-hover:scale-110\" />\r\n+                      Add New Topic\r\n+                    </Button>\r\n+                  )}\r\n+                </div>\r\n+              )}\r\n \r\n-            {/* Lesson Selection */}\r\n-            {selectedSubtopicId && (\r\n-              <div className=\"space-y-2\">\r\n-                <Label htmlFor=\"lesson-select\">Lesson</Label>\r\n-                <Select \r\n-                  value={currentLessonId || ''} \r\n-                  onValueChange={onLessonSelect}\r\n-                  onOpenChange={setIsDropdownOpen}\r\n-                >\r\n-                  <SelectTrigger id=\"lesson-select\">\r\n-                    <SelectValue placeholder=\"Select Lesson\" />\r\n-                  </SelectTrigger>\r\n-                  <SelectContent>\r\n-                    {lessons.map((lesson) => (\r\n-                      <SelectItem key={lesson.id} value={lesson.id}>\r\n-                        <div className=\"flex items-center gap-2\">\r\n-                          <BookOpen className=\"h-4 w-4 text-primary\" />\r\n-                          <div className=\"flex flex-col\">\r\n-                            <span>{lesson.title}</span>\r\n-                            {lesson.status && (\r\n-                              <Badge variant=\"outline\" className=\"mt-1\">\r\n-                                {lesson.status}\r\n-                              </Badge>\r\n-                            )}\r\n+              {/* Subtopic Selection */}\r\n+              {selectedTopicId && (\r\n+                <div className=\"space-y-2 animate-fade-in-up\" style={{ animationDelay: '300ms' }}>\r\n+                  <Label htmlFor=\"subtopic-select\">Subtopic</Label>\r\n+                  <Select \r\n+                    value={selectedSubtopicId || ''} \r\n+                    onValueChange={onSubtopicSelect}\r\n+                    onOpenChange={setIsDropdownOpen}\r\n+                  >\r\n+                    <SelectTrigger \r\n+                      id=\"subtopic-select\"\r\n+                      className=\"transition-all duration-200 focus:scale-[1.01]\"\r\n+                    >\r\n+                      <SelectValue placeholder=\"Select Subtopic\" />\r\n+                    </SelectTrigger>\r\n+                    <SelectContent>\r\n+                      {subtopics.map((subtopic) => (\r\n+                        <SelectItem \r\n+                          key={subtopic.id} \r\n+                          value={subtopic.id}\r\n+                          className={cn(\r\n+                            \"transition-all duration-200\",\r\n+                            \"hover:bg-primary/10\",\r\n+                            \"focus:bg-primary/10\",\r\n+                            \"group\"\r\n+                          )}\r\n+                          onMouseEnter={() => setHoveredItem(subtopic.id)}\r\n+                          onMouseLeave={() => setHoveredItem(null)}\r\n+                        >\r\n+                          <div className=\"flex items-center justify-between w-full\">\r\n+                            <span className=\"transition-colors duration-200 group-hover:text-primary\">\r\n+                              {subtopic.title}\r\n+                            </span>\r\n+                            <Badge variant=\"outline\" className={cn(\r\n+                              \"ml-2 transition-all duration-200\",\r\n+                              \"group-hover:bg-primary/10\",\r\n+                              \"group-hover:border-primary/30\"\r\n+                            )}>\r\n+                              {subtopic.lessons?.length || 0} lessons\r\n+                            </Badge>\r\n                           </div>\r\n-                        </div>\r\n-                      </SelectItem>\r\n-                    ))}\r\n-                  </SelectContent>\r\n-                </Select>\r\n-                {!isViewMode && (\r\n-                  <Button \r\n-                    variant=\"outline\" \r\n-                    size=\"sm\" \r\n-                    className=\"w-full gap-2\"\r\n-                    onClick={onAddLesson}\r\n+                        </SelectItem>\r\n+                      ))}\r\n+                    </SelectContent>\r\n+                  </Select>\r\n+                  {!isViewMode && (\r\n+                    <Button \r\n+                      variant=\"outline\" \r\n+                      size=\"sm\" \r\n+                      className={cn(\r\n+                        \"w-full gap-2\",\r\n+                        \"transition-all duration-200\",\r\n+                        \"hover:bg-primary/10 hover:text-primary\",\r\n+                        \"group\"\r\n+                      )}\r\n+                      onClick={onAddSubtopic}\r\n+                    >\r\n+                      <Plus className=\"h-4 w-4 transition-transform duration-200 group-hover:scale-110\" />\r\n+                      Add New Subtopic\r\n+                    </Button>\r\n+                  )}\r\n+                </div>\r\n+              )}\r\n+\r\n+              {/* Lesson Selection */}\r\n+              {selectedSubtopicId && (\r\n+                <div className=\"space-y-2 animate-fade-in-up\" style={{ animationDelay: '400ms' }}>\r\n+                  <Label htmlFor=\"lesson-select\">Lesson</Label>\r\n+                  <Select \r\n+                    value={currentLessonId || ''} \r\n+                    onValueChange={onLessonSelect}\r\n+                    onOpenChange={setIsDropdownOpen}\r\n                   >\r\n-                    <Plus className=\"h-4 w-4\" />\r\n-                    Add New Lesson\r\n-                  </Button>\r\n-                )}\r\n-              </div>\r\n-            )}\r\n-          </CardContent>\r\n+                    <SelectTrigger \r\n+                      id=\"lesson-select\"\r\n+                      className=\"transition-all duration-200 focus:scale-[1.01]\"\r\n+                    >\r\n+                      <SelectValue placeholder=\"Select Lesson\" />\r\n+                    </SelectTrigger>\r\n+                    <SelectContent>\r\n+                      {lessons.map((lesson) => (\r\n+                        <SelectItem \r\n+                          key={lesson.id} \r\n+                          value={lesson.id}\r\n+                          className={cn(\r\n+                            \"transition-all duration-200\",\r\n+                            \"hover:bg-primary/10\",\r\n+                            \"focus:bg-primary/10\",\r\n+                            \"group\"\r\n+                          )}\r\n+                          onMouseEnter={() => setHoveredItem(lesson.id)}\r\n+                          onMouseLeave={() => setHoveredItem(null)}\r\n+                        >\r\n+                          <div className=\"flex items-center gap-2\">\r\n+                            <BookOpen className={cn(\r\n+                              \"h-4 w-4 text-primary\",\r\n+                              \"transition-transform duration-200\",\r\n+                              hoveredItem === lesson.id && \"scale-110\"\r\n+                            )} />\r\n+                            <div className=\"flex flex-col\">\r\n+                              <span className=\"transition-colors duration-200 group-hover:text-primary\">\r\n+                                {lesson.title}\r\n+                              </span>\r\n+                              {lesson.status && (\r\n+                                <Badge variant=\"outline\" className={cn(\r\n+                                  \"mt-1 transition-all duration-200\",\r\n+                                  \"group-hover:bg-primary/10\",\r\n+                                  \"group-hover:border-primary/30\"\r\n+                                )}>\r\n+                                  {lesson.status}\r\n+                                </Badge>\r\n+                              )}\r\n+                            </div>\r\n+                          </div>\r\n+                        </SelectItem>\r\n+                      ))}\r\n+                    </SelectContent>\r\n+                  </Select>\r\n+                  {!isViewMode && (\r\n+                    <Button \r\n+                      variant=\"outline\" \r\n+                      size=\"sm\" \r\n+                      className={cn(\r\n+                        \"w-full gap-2\",\r\n+                        \"transition-all duration-200\",\r\n+                        \"hover:bg-primary/10 hover:text-primary\",\r\n+                        \"group\"\r\n+                      )}\r\n+                      onClick={onAddLesson}\r\n+                    >\r\n+                      <Plus className=\"h-4 w-4 transition-transform duration-200 group-hover:scale-110\" />\r\n+                      Add New Lesson\r\n+                    </Button>\r\n+                  )}\r\n+                </div>\r\n+              )}\r\n+            </div>\r\n+          </ScrollArea>\r\n         </div>\r\n \r\n         {/* Collapsed View */}\r\n         {isCollapsed && (\r\n-          <div className=\"absolute inset-0 flex flex-col items-center pt-12 gap-4\">\r\n-            <BookOpen className=\"h-6 w-6 text-muted-foreground\" />\r\n-            <div className=\"w-px h-full bg-border\" />\r\n+          <div className={cn(\r\n+            \"absolute inset-0 flex flex-col items-center pt-12 gap-4\",\r\n+            \"animate-fade-in\"\r\n+          )}>\r\n+            <BookOpen className=\"h-6 w-6 text-primary transition-transform duration-200 hover:scale-110\" />\r\n+            <div className=\"w-px h-full bg-primary/20\" />\r\n           </div>\r\n         )}\r\n       </Card>\r\n     </div>\r\n"
                }
            ],
            "date": 1740085801564,
            "name": "Commit-0",
            "content": "import { useState, useEffect } from 'react';\r\nimport { BookOpen, ChevronDown, ChevronRight, Layers, Lock, Plus, Unlock } from 'lucide-react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Button } from '@/components/ui/button';\r\nimport { cn } from '@/lib/utils';\r\nimport { Grade, Topic, Subtopic, Lesson } from '../../api/types';\r\n\r\ninterface ContentSidebarProps {\r\n  grades: Grade[];\r\n  topics: Topic[];\r\n  subtopics: Subtopic[];\r\n  lessons: Lesson[];\r\n  selectedGradeId: string | null;\r\n  selectedTopicId: string | null;\r\n  selectedSubtopicId: string | null;\r\n  currentLessonId: string | null;\r\n  isViewMode: boolean;\r\n  onGradeSelect: (gradeId: string) => void;\r\n  onTopicSelect: (topicId: string) => void;\r\n  onSubtopicSelect: (subtopicId: string) => void;\r\n  onLessonSelect: (lessonId: string) => void;\r\n  onAddGrade: () => void;\r\n  onAddTopic: () => void;\r\n  onAddSubtopic: () => void;\r\n  onAddLesson: () => void;\r\n}\r\n\r\nexport const ContentSidebar = ({\r\n  grades,\r\n  topics,\r\n  subtopics,\r\n  lessons,\r\n  selectedGradeId,\r\n  selectedTopicId,\r\n  selectedSubtopicId,\r\n  currentLessonId,\r\n  isViewMode,\r\n  onGradeSelect,\r\n  onTopicSelect,\r\n  onSubtopicSelect,\r\n  onLessonSelect,\r\n  onAddGrade,\r\n  onAddTopic,\r\n  onAddSubtopic,\r\n  onAddLesson,\r\n}: ContentSidebarProps) => {\r\n  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\r\n  const [isSidebarLocked, setIsSidebarLocked] = useState(true);\r\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (currentLessonId && !isSidebarLocked) {\r\n      const timer = setTimeout(() => setIsSidebarCollapsed(true), 300);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [currentLessonId, isSidebarLocked]);\r\n\r\n  return (\r\n    <div \r\n      className={cn(\r\n        \"transition-all duration-300 ease-in-out relative\",\r\n        isSidebarCollapsed ? \"w-20\" : \"w-80\",\r\n        \"flex-shrink-0 group\"\r\n      )}\r\n      onMouseEnter={() => {\r\n        if (!isSidebarLocked) {\r\n          setIsSidebarCollapsed(false);\r\n        }\r\n      }}\r\n      onMouseLeave={() => {\r\n        if (!isSidebarLocked && !isDropdownOpen) {\r\n          setIsSidebarCollapsed(true);\r\n        }\r\n      }}\r\n    >\r\n      <Card className=\"h-full relative\">\r\n        {currentLessonId && (\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            className=\"absolute top-2 right-2 z-10\"\r\n            onClick={() => setIsSidebarLocked(!isSidebarLocked)}\r\n          >\r\n            {isSidebarLocked ? <Lock className=\"h-4 w-4\" /> : <Unlock className=\"h-4 w-4\" />}\r\n          </Button>\r\n        )}\r\n\r\n        <div className={cn(\r\n          \"transition-all duration-300 overflow-hidden\",\r\n          isSidebarCollapsed ? \"opacity-0\" : \"opacity-100\"\r\n        )}>\r\n          <CardHeader className=\"pb-3\">\r\n            <CardTitle className=\"text-lg font-semibold\">Content Management</CardTitle>\r\n            <CardDescription>Create and manage your lessons</CardDescription>\r\n          </CardHeader>\r\n\r\n          <CardContent className=\"space-y-4\">\r\n            {/* Grade Selection */}\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"grade-select\">Grade</Label>\r\n              <Select \r\n                value={selectedGradeId || ''} \r\n                onValueChange={onGradeSelect}\r\n                onOpenChange={setIsDropdownOpen}\r\n              >\r\n                <SelectTrigger id=\"grade-select\">\r\n                  <SelectValue placeholder=\"Select Grade\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  {grades.map((grade) => (\r\n                    <SelectItem key={grade.id} value={grade.id}>\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <BookOpen className=\"h-4 w-4 text-primary\" />\r\n                        {grade.name}\r\n                      </div>\r\n                    </SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n              {!isViewMode && (\r\n                <Button \r\n                  variant=\"outline\" \r\n                  size=\"sm\" \r\n                  className=\"w-full gap-2\"\r\n                  onClick={onAddGrade}\r\n                >\r\n                  <Plus className=\"h-4 w-4\" />\r\n                  Add New Grade\r\n                </Button>\r\n              )}\r\n            </div>\r\n\r\n            {/* Topic Selection */}\r\n            {selectedGradeId && (\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"topic-select\">Topic</Label>\r\n                <Select \r\n                  value={selectedTopicId || ''} \r\n                  onValueChange={onTopicSelect}\r\n                  onOpenChange={setIsDropdownOpen}\r\n                >\r\n                  <SelectTrigger id=\"topic-select\">\r\n                    <SelectValue placeholder=\"Select Topic\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    {topics.map((topic) => (\r\n                      <SelectItem key={topic.id} value={topic.id}>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <Layers className=\"h-4 w-4 text-primary\" />\r\n                          {topic.title}\r\n                        </div>\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n                {!isViewMode && (\r\n                  <Button \r\n                    variant=\"outline\" \r\n                    size=\"sm\" \r\n                    className=\"w-full gap-2\"\r\n                    onClick={onAddTopic}\r\n                  >\r\n                    <Plus className=\"h-4 w-4\" />\r\n                    Add New Topic\r\n                  </Button>\r\n                )}\r\n              </div>\r\n            )}\r\n\r\n            {/* Subtopic Selection */}\r\n            {selectedTopicId && (\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"subtopic-select\">Subtopic</Label>\r\n                <Select \r\n                  value={selectedSubtopicId || ''} \r\n                  onValueChange={onSubtopicSelect}\r\n                  onOpenChange={setIsDropdownOpen}\r\n                >\r\n                  <SelectTrigger id=\"subtopic-select\">\r\n                    <SelectValue placeholder=\"Select Subtopic\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    {subtopics.map((subtopic) => (\r\n                      <SelectItem key={subtopic.id} value={subtopic.id}>\r\n                        {subtopic.title}\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n                {!isViewMode && (\r\n                  <Button \r\n                    variant=\"outline\" \r\n                    size=\"sm\" \r\n                    className=\"w-full gap-2\"\r\n                    onClick={onAddSubtopic}\r\n                  >\r\n                    <Plus className=\"h-4 w-4\" />\r\n                    Add New Subtopic\r\n                  </Button>\r\n                )}\r\n              </div>\r\n            )}\r\n\r\n            {/* Lesson Selection */}\r\n            {selectedSubtopicId && (\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"lesson-select\">Lesson</Label>\r\n                <Select \r\n                  value={currentLessonId || ''} \r\n                  onValueChange={onLessonSelect}\r\n                  onOpenChange={setIsDropdownOpen}\r\n                >\r\n                  <SelectTrigger id=\"lesson-select\">\r\n                    <SelectValue placeholder=\"Select Lesson\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    {lessons.map((lesson) => (\r\n                      <SelectItem key={lesson.id} value={lesson.id}>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <BookOpen className=\"h-4 w-4 text-primary\" />\r\n                          {lesson.title}\r\n                        </div>\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n                {!isViewMode && (\r\n                  <Button \r\n                    variant=\"outline\" \r\n                    size=\"sm\" \r\n                    className=\"w-full gap-2\"\r\n                    onClick={onAddLesson}\r\n                  >\r\n                    <Plus className=\"h-4 w-4\" />\r\n                    Add New Lesson\r\n                  </Button>\r\n                )}\r\n              </div>\r\n            )}\r\n          </CardContent>\r\n        </div>\r\n\r\n        {/* Collapsed view */}\r\n        {isSidebarCollapsed && (\r\n          <div className=\"absolute inset-0 flex flex-col items-center pt-12 gap-4\">\r\n            <BookOpen className=\"h-6 w-6 text-muted-foreground\" />\r\n            <div className=\"w-px h-full bg-border\" />\r\n          </div>\r\n        )}\r\n      </Card>\r\n    </div>\r\n  );\r\n}; "
        }
    ]
}