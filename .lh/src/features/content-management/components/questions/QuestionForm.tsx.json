{
    "sourceFile": "src/features/content-management/components/questions/QuestionForm.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1740086248915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740087032080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,25 +1,36 @@\n-import { useState } from 'react';\r\n+import { useState, useCallback } from 'react';\r\n import { Card, CardContent } from '@/components/ui/card';\r\n import { Label } from '@/components/ui/label';\r\n import { Textarea } from '@/components/ui/textarea';\r\n-import { Question } from '../../api/types';\r\n+import { Button } from '@/components/ui/button';\r\n+import { Plus, Trash2 } from 'lucide-react';\r\n+import { Question, ExercisePrompt } from '../../api/types';\r\n import { RichTextEditor } from '@/components/ui/rich-text-editor';\r\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\n+import { ExercisePromptCard } from './ExercisePromptCard';\r\n+import { QUESTION_TYPES } from '../../utils/constants';\r\n \r\n interface QuestionFormProps {\r\n   question: Question;\r\n   index: number;\r\n   onUpdate: (updatedQuestion: Question) => void;\r\n+  onAddExercisePrompt?: () => void;\r\n+  onRemoveExercisePrompt?: (promptIndex: number) => void;\r\n+  onExercisePromptChange?: (promptIndex: number, updatedPrompt: ExercisePrompt) => void;\r\n }\r\n \r\n export const QuestionForm = ({\r\n   question,\r\n   index,\r\n   onUpdate,\r\n+  onAddExercisePrompt,\r\n+  onRemoveExercisePrompt,\r\n+  onExercisePromptChange,\r\n }: QuestionFormProps) => {\r\n   const [localQuestion, setLocalQuestion] = useState(question);\r\n \r\n-  const handleChange = (field: keyof Question['data'], value: string) => {\r\n+  const handleChange = useCallback((field: keyof Question['data'], value: any) => {\r\n     const updatedQuestion = {\r\n       ...localQuestion,\r\n       data: {\r\n         ...localQuestion.data,\r\n@@ -27,17 +38,45 @@\n       }\r\n     };\r\n     setLocalQuestion(updatedQuestion);\r\n     onUpdate(updatedQuestion);\r\n-  };\r\n+  }, [localQuestion, onUpdate]);\r\n \r\n+  const handleExercisePromptUpdate = useCallback((promptIndex: number, updatedPrompt: ExercisePrompt) => {\r\n+    const updatedPrompts = [...localQuestion.exercisePrompts];\r\n+    updatedPrompts[promptIndex] = updatedPrompt;\r\n+    \r\n+    const updatedQuestion = {\r\n+      ...localQuestion,\r\n+      exercisePrompts: updatedPrompts\r\n+    };\r\n+    \r\n+    setLocalQuestion(updatedQuestion);\r\n+    onUpdate(updatedQuestion);\r\n+    onExercisePromptChange?.(promptIndex, updatedPrompt);\r\n+  }, [localQuestion, onUpdate, onExercisePromptChange]);\r\n+\r\n   return (\r\n-    <div className=\"space-y-4\">\r\n+    <div className=\"space-y-6\">\r\n+      {/* Question Title */}\r\n+      <div className=\"space-y-2\">\r\n+        <Label>Question Title</Label>\r\n+        <Textarea\r\n+          value={localQuestion.title}\r\n+          onChange={(e) => {\r\n+            const updatedQuestion = { ...localQuestion, title: e.target.value };\r\n+            setLocalQuestion(updatedQuestion);\r\n+            onUpdate(updatedQuestion);\r\n+          }}\r\n+          placeholder=\"Enter question title...\"\r\n+        />\r\n+      </div>\r\n+\r\n       {/* Question Prompt */}\r\n       <div className=\"space-y-2\">\r\n         <Label>Question Prompt</Label>\r\n         <RichTextEditor\r\n-          value={localQuestion.data?.prompt || ''}\r\n+          value={localQuestion.data.prompt}\r\n           onChange={(value) => handleChange('prompt', value)}\r\n           placeholder=\"Enter the question prompt...\"\r\n         />\r\n       </div>\r\n@@ -45,79 +84,158 @@\n       {/* Teacher Script */}\r\n       <div className=\"space-y-2\">\r\n         <Label>Teacher Script</Label>\r\n         <Textarea\r\n-          value={localQuestion.data?.teacher_script || ''}\r\n+          value={localQuestion.data.teacher_script}\r\n           onChange={(e) => handleChange('teacher_script', e.target.value)}\r\n           placeholder=\"Enter instructions for the teacher...\"\r\n           className=\"min-h-[100px]\"\r\n         />\r\n       </div>\r\n \r\n-      {/* Question-specific fields based on type */}\r\n-      {question.type === 'multipleChoice' && (\r\n+      {/* Question Type Specific Fields */}\r\n+      {localQuestion.type === 'multipleChoice' && (\r\n         <Card>\r\n           <CardContent className=\"space-y-4 pt-4\">\r\n             {/* Options */}\r\n             <div className=\"space-y-2\">\r\n               <Label>Options</Label>\r\n-              {(localQuestion.data?.options || []).map((option: string, optionIndex: number) => (\r\n+              {(localQuestion.data.options || []).map((option: string, optionIndex: number) => (\r\n                 <div key={optionIndex} className=\"flex items-center gap-2\">\r\n                   <Textarea\r\n                     value={option}\r\n                     onChange={(e) => {\r\n-                      const newOptions = [...(localQuestion.data?.options || [])];\r\n+                      const newOptions = [...(localQuestion.data.options || [])];\r\n                       newOptions[optionIndex] = e.target.value;\r\n                       handleChange('options', newOptions);\r\n                     }}\r\n                     placeholder={`Option ${optionIndex + 1}`}\r\n                   />\r\n+                  <Button\r\n+                    variant=\"ghost\"\r\n+                    size=\"sm\"\r\n+                    onClick={() => {\r\n+                      const newOptions = (localQuestion.data.options || []).filter((_, i) => i !== optionIndex);\r\n+                      handleChange('options', newOptions);\r\n+                    }}\r\n+                  >\r\n+                    <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n+                  </Button>\r\n                 </div>\r\n               ))}\r\n+              <Button\r\n+                variant=\"outline\"\r\n+                size=\"sm\"\r\n+                onClick={() => {\r\n+                  const newOptions = [...(localQuestion.data.options || []), ''];\r\n+                  handleChange('options', newOptions);\r\n+                }}\r\n+              >\r\n+                <Plus className=\"h-4 w-4 mr-2\" />\r\n+                Add Option\r\n+              </Button>\r\n             </div>\r\n \r\n             {/* Correct Answer */}\r\n             <div className=\"space-y-2\">\r\n               <Label>Correct Answer</Label>\r\n-              <Textarea\r\n-                value={localQuestion.data?.correct_answer || ''}\r\n-                onChange={(e) => handleChange('correct_answer', e.target.value)}\r\n-                placeholder=\"Enter the correct answer...\"\r\n-              />\r\n+              <Select\r\n+                value={localQuestion.data.correct_answer}\r\n+                onValueChange={(value) => handleChange('correct_answer', value)}\r\n+              >\r\n+                <SelectTrigger>\r\n+                  <SelectValue placeholder=\"Select correct answer\" />\r\n+                </SelectTrigger>\r\n+                <SelectContent>\r\n+                  {(localQuestion.data.options || []).map((option: string, index: number) => (\r\n+                    <SelectItem key={index} value={option}>\r\n+                      {option || `Option ${index + 1}`}\r\n+                    </SelectItem>\r\n+                  ))}\r\n+                </SelectContent>\r\n+              </Select>\r\n             </div>\r\n           </CardContent>\r\n         </Card>\r\n       )}\r\n \r\n       {/* Sample Answer (for open-ended questions) */}\r\n-      {['shortAnswer', 'speaking'].includes(question.type) && (\r\n+      {['shortAnswer', 'speaking'].includes(localQuestion.type) && (\r\n         <div className=\"space-y-2\">\r\n           <Label>Sample Answer</Label>\r\n           <Textarea\r\n-            value={localQuestion.data?.sample_answer || ''}\r\n+            value={localQuestion.data.sample_answer}\r\n             onChange={(e) => handleChange('sample_answer', e.target.value)}\r\n             placeholder=\"Enter a sample answer...\"\r\n             className=\"min-h-[100px]\"\r\n           />\r\n         </div>\r\n       )}\r\n \r\n+      {/* Exercise Prompts */}\r\n+      <div className=\"space-y-4\">\r\n+        <div className=\"flex items-center justify-between\">\r\n+          <Label>Exercise Prompts</Label>\r\n+          {onAddExercisePrompt && (\r\n+            <Button\r\n+              variant=\"outline\"\r\n+              size=\"sm\"\r\n+              onClick={onAddExercisePrompt}\r\n+            >\r\n+              <Plus className=\"h-4 w-4 mr-2\" />\r\n+              Add Exercise Prompt\r\n+            </Button>\r\n+          )}\r\n+        </div>\r\n+        \r\n+        {localQuestion.exercisePrompts.map((prompt, promptIndex) => (\r\n+          <ExercisePromptCard\r\n+            key={prompt.id}\r\n+            prompt={prompt}\r\n+            promptIndex={promptIndex}\r\n+            onRemove={() => onRemoveExercisePrompt?.(promptIndex)}\r\n+            onUpdate={(updatedPrompt) => handleExercisePromptUpdate(promptIndex, updatedPrompt)}\r\n+          />\r\n+        ))}\r\n+      </div>\r\n+\r\n       {/* Follow-up Prompts */}\r\n       <div className=\"space-y-2\">\r\n         <Label>Follow-up Prompts</Label>\r\n-        {(localQuestion.data?.followup_prompt || []).map((prompt: string, promptIndex: number) => (\r\n+        {(localQuestion.data.followup_prompt || []).map((prompt: string, promptIndex: number) => (\r\n           <div key={promptIndex} className=\"flex items-center gap-2\">\r\n             <Textarea\r\n               value={prompt}\r\n               onChange={(e) => {\r\n-                const newPrompts = [...(localQuestion.data?.followup_prompt || [])];\r\n+                const newPrompts = [...(localQuestion.data.followup_prompt || [])];\r\n                 newPrompts[promptIndex] = e.target.value;\r\n                 handleChange('followup_prompt', newPrompts);\r\n               }}\r\n               placeholder={`Follow-up prompt ${promptIndex + 1}`}\r\n             />\r\n+            <Button\r\n+              variant=\"ghost\"\r\n+              size=\"sm\"\r\n+              onClick={() => {\r\n+                const newPrompts = (localQuestion.data.followup_prompt || []).filter((_, i) => i !== promptIndex);\r\n+                handleChange('followup_prompt', newPrompts);\r\n+              }}\r\n+            >\r\n+              <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n+            </Button>\r\n           </div>\r\n         ))}\r\n+        <Button\r\n+          variant=\"outline\"\r\n+          size=\"sm\"\r\n+          onClick={() => {\r\n+            const newPrompts = [...(localQuestion.data.followup_prompt || []), ''];\r\n+            handleChange('followup_prompt', newPrompts);\r\n+          }}\r\n+        >\r\n+          <Plus className=\"h-4 w-4 mr-2\" />\r\n+          Add Follow-up Prompt\r\n+        </Button>\r\n       </div>\r\n     </div>\r\n   );\r\n }; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1740087123656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,241 +1,1 @@\n-import { useState, useCallback } from 'react';\r\n-import { Card, CardContent } from '@/components/ui/card';\r\n-import { Label } from '@/components/ui/label';\r\n-import { Textarea } from '@/components/ui/textarea';\r\n-import { Button } from '@/components/ui/button';\r\n-import { Plus, Trash2 } from 'lucide-react';\r\n-import { Question, ExercisePrompt } from '../../api/types';\r\n-import { RichTextEditor } from '@/components/ui/rich-text-editor';\r\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\n-import { ExercisePromptCard } from './ExercisePromptCard';\r\n-import { QUESTION_TYPES } from '../../utils/constants';\r\n-\r\n-interface QuestionFormProps {\r\n-  question: Question;\r\n-  index: number;\r\n-  onUpdate: (updatedQuestion: Question) => void;\r\n-  onAddExercisePrompt?: () => void;\r\n-  onRemoveExercisePrompt?: (promptIndex: number) => void;\r\n-  onExercisePromptChange?: (promptIndex: number, updatedPrompt: ExercisePrompt) => void;\r\n-}\r\n-\r\n-export const QuestionForm = ({\r\n-  question,\r\n-  index,\r\n-  onUpdate,\r\n-  onAddExercisePrompt,\r\n-  onRemoveExercisePrompt,\r\n-  onExercisePromptChange,\r\n-}: QuestionFormProps) => {\r\n-  const [localQuestion, setLocalQuestion] = useState(question);\r\n-\r\n-  const handleChange = useCallback((field: keyof Question['data'], value: any) => {\r\n-    const updatedQuestion = {\r\n-      ...localQuestion,\r\n-      data: {\r\n-        ...localQuestion.data,\r\n-        [field]: value\r\n-      }\r\n-    };\r\n-    setLocalQuestion(updatedQuestion);\r\n-    onUpdate(updatedQuestion);\r\n-  }, [localQuestion, onUpdate]);\r\n-\r\n-  const handleExercisePromptUpdate = useCallback((promptIndex: number, updatedPrompt: ExercisePrompt) => {\r\n-    const updatedPrompts = [...localQuestion.exercisePrompts];\r\n-    updatedPrompts[promptIndex] = updatedPrompt;\r\n-    \r\n-    const updatedQuestion = {\r\n-      ...localQuestion,\r\n-      exercisePrompts: updatedPrompts\r\n-    };\r\n-    \r\n-    setLocalQuestion(updatedQuestion);\r\n-    onUpdate(updatedQuestion);\r\n-    onExercisePromptChange?.(promptIndex, updatedPrompt);\r\n-  }, [localQuestion, onUpdate, onExercisePromptChange]);\r\n-\r\n-  return (\r\n-    <div className=\"space-y-6\">\r\n-      {/* Question Title */}\r\n-      <div className=\"space-y-2\">\r\n-        <Label>Question Title</Label>\r\n-        <Textarea\r\n-          value={localQuestion.title}\r\n-          onChange={(e) => {\r\n-            const updatedQuestion = { ...localQuestion, title: e.target.value };\r\n-            setLocalQuestion(updatedQuestion);\r\n-            onUpdate(updatedQuestion);\r\n-          }}\r\n-          placeholder=\"Enter question title...\"\r\n-        />\r\n-      </div>\r\n-\r\n-      {/* Question Prompt */}\r\n-      <div className=\"space-y-2\">\r\n-        <Label>Question Prompt</Label>\r\n-        <RichTextEditor\r\n-          value={localQuestion.data.prompt}\r\n-          onChange={(value) => handleChange('prompt', value)}\r\n-          placeholder=\"Enter the question prompt...\"\r\n-        />\r\n-      </div>\r\n-\r\n-      {/* Teacher Script */}\r\n-      <div className=\"space-y-2\">\r\n-        <Label>Teacher Script</Label>\r\n-        <Textarea\r\n-          value={localQuestion.data.teacher_script}\r\n-          onChange={(e) => handleChange('teacher_script', e.target.value)}\r\n-          placeholder=\"Enter instructions for the teacher...\"\r\n-          className=\"min-h-[100px]\"\r\n-        />\r\n-      </div>\r\n-\r\n-      {/* Question Type Specific Fields */}\r\n-      {localQuestion.type === 'multipleChoice' && (\r\n-        <Card>\r\n-          <CardContent className=\"space-y-4 pt-4\">\r\n-            {/* Options */}\r\n-            <div className=\"space-y-2\">\r\n-              <Label>Options</Label>\r\n-              {(localQuestion.data.options || []).map((option: string, optionIndex: number) => (\r\n-                <div key={optionIndex} className=\"flex items-center gap-2\">\r\n-                  <Textarea\r\n-                    value={option}\r\n-                    onChange={(e) => {\r\n-                      const newOptions = [...(localQuestion.data.options || [])];\r\n-                      newOptions[optionIndex] = e.target.value;\r\n-                      handleChange('options', newOptions);\r\n-                    }}\r\n-                    placeholder={`Option ${optionIndex + 1}`}\r\n-                  />\r\n-                  <Button\r\n-                    variant=\"ghost\"\r\n-                    size=\"sm\"\r\n-                    onClick={() => {\r\n-                      const newOptions = (localQuestion.data.options || []).filter((_, i) => i !== optionIndex);\r\n-                      handleChange('options', newOptions);\r\n-                    }}\r\n-                  >\r\n-                    <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n-                  </Button>\r\n-                </div>\r\n-              ))}\r\n-              <Button\r\n-                variant=\"outline\"\r\n-                size=\"sm\"\r\n-                onClick={() => {\r\n-                  const newOptions = [...(localQuestion.data.options || []), ''];\r\n-                  handleChange('options', newOptions);\r\n-                }}\r\n-              >\r\n-                <Plus className=\"h-4 w-4 mr-2\" />\r\n-                Add Option\r\n-              </Button>\r\n-            </div>\r\n-\r\n-            {/* Correct Answer */}\r\n-            <div className=\"space-y-2\">\r\n-              <Label>Correct Answer</Label>\r\n-              <Select\r\n-                value={localQuestion.data.correct_answer}\r\n-                onValueChange={(value) => handleChange('correct_answer', value)}\r\n-              >\r\n-                <SelectTrigger>\r\n-                  <SelectValue placeholder=\"Select correct answer\" />\r\n-                </SelectTrigger>\r\n-                <SelectContent>\r\n-                  {(localQuestion.data.options || []).map((option: string, index: number) => (\r\n-                    <SelectItem key={index} value={option}>\r\n-                      {option || `Option ${index + 1}`}\r\n-                    </SelectItem>\r\n-                  ))}\r\n-                </SelectContent>\r\n-              </Select>\r\n-            </div>\r\n-          </CardContent>\r\n-        </Card>\r\n-      )}\r\n-\r\n-      {/* Sample Answer (for open-ended questions) */}\r\n-      {['shortAnswer', 'speaking'].includes(localQuestion.type) && (\r\n-        <div className=\"space-y-2\">\r\n-          <Label>Sample Answer</Label>\r\n-          <Textarea\r\n-            value={localQuestion.data.sample_answer}\r\n-            onChange={(e) => handleChange('sample_answer', e.target.value)}\r\n-            placeholder=\"Enter a sample answer...\"\r\n-            className=\"min-h-[100px]\"\r\n-          />\r\n-        </div>\r\n-      )}\r\n-\r\n-      {/* Exercise Prompts */}\r\n-      <div className=\"space-y-4\">\r\n-        <div className=\"flex items-center justify-between\">\r\n-          <Label>Exercise Prompts</Label>\r\n-          {onAddExercisePrompt && (\r\n-            <Button\r\n-              variant=\"outline\"\r\n-              size=\"sm\"\r\n-              onClick={onAddExercisePrompt}\r\n-            >\r\n-              <Plus className=\"h-4 w-4 mr-2\" />\r\n-              Add Exercise Prompt\r\n-            </Button>\r\n-          )}\r\n-        </div>\r\n-        \r\n-        {localQuestion.exercisePrompts.map((prompt, promptIndex) => (\r\n-          <ExercisePromptCard\r\n-            key={prompt.id}\r\n-            prompt={prompt}\r\n-            promptIndex={promptIndex}\r\n-            onRemove={() => onRemoveExercisePrompt?.(promptIndex)}\r\n-            onUpdate={(updatedPrompt) => handleExercisePromptUpdate(promptIndex, updatedPrompt)}\r\n-          />\r\n-        ))}\r\n-      </div>\r\n-\r\n-      {/* Follow-up Prompts */}\r\n-      <div className=\"space-y-2\">\r\n-        <Label>Follow-up Prompts</Label>\r\n-        {(localQuestion.data.followup_prompt || []).map((prompt: string, promptIndex: number) => (\r\n-          <div key={promptIndex} className=\"flex items-center gap-2\">\r\n-            <Textarea\r\n-              value={prompt}\r\n-              onChange={(e) => {\r\n-                const newPrompts = [...(localQuestion.data.followup_prompt || [])];\r\n-                newPrompts[promptIndex] = e.target.value;\r\n-                handleChange('followup_prompt', newPrompts);\r\n-              }}\r\n-              placeholder={`Follow-up prompt ${promptIndex + 1}`}\r\n-            />\r\n-            <Button\r\n-              variant=\"ghost\"\r\n-              size=\"sm\"\r\n-              onClick={() => {\r\n-                const newPrompts = (localQuestion.data.followup_prompt || []).filter((_, i) => i !== promptIndex);\r\n-                handleChange('followup_prompt', newPrompts);\r\n-              }}\r\n-            >\r\n-              <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n-            </Button>\r\n-          </div>\r\n-        ))}\r\n-        <Button\r\n-          variant=\"outline\"\r\n-          size=\"sm\"\r\n-          onClick={() => {\r\n-            const newPrompts = [...(localQuestion.data.followup_prompt || []), ''];\r\n-            handleChange('followup_prompt', newPrompts);\r\n-          }}\r\n-        >\r\n-          <Plus className=\"h-4 w-4 mr-2\" />\r\n-          Add Follow-up Prompt\r\n-        </Button>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-}; \n\\ No newline at end of file\n+ \n\\ No newline at end of file\n"
                },
                {
                    "date": 1740087135980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,241 @@\n- \n\\ No newline at end of file\n+import { useState, useCallback } from 'react';\r\n+import { Card, CardContent } from '@/components/ui/card';\r\n+import { Label } from '@/components/ui/label';\r\n+import { Textarea } from '@/components/ui/textarea';\r\n+import { Button } from '@/components/ui/button';\r\n+import { Plus, Trash2 } from 'lucide-react';\r\n+import { Question, ExercisePrompt } from '../../api/types';\r\n+import { RichTextEditor } from '@/components/ui/rich-text-editor';\r\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\n+import { ExercisePromptCard } from './ExercisePromptCard';\r\n+import { QUESTION_TYPES } from '../../utils/constants';\r\n+\r\n+interface QuestionFormProps {\r\n+  question: Question;\r\n+  index: number;\r\n+  onUpdate: (updatedQuestion: Question) => void;\r\n+  onAddExercisePrompt?: () => void;\r\n+  onRemoveExercisePrompt?: (promptIndex: number) => void;\r\n+  onExercisePromptChange?: (promptIndex: number, updatedPrompt: ExercisePrompt) => void;\r\n+}\r\n+\r\n+export const QuestionForm = ({\r\n+  question,\r\n+  index,\r\n+  onUpdate,\r\n+  onAddExercisePrompt,\r\n+  onRemoveExercisePrompt,\r\n+  onExercisePromptChange,\r\n+}: QuestionFormProps) => {\r\n+  const [localQuestion, setLocalQuestion] = useState(question);\r\n+\r\n+  const handleChange = useCallback((field: keyof Question['data'], value: any) => {\r\n+    const updatedQuestion = {\r\n+      ...localQuestion,\r\n+      data: {\r\n+        ...localQuestion.data,\r\n+        [field]: value\r\n+      }\r\n+    };\r\n+    setLocalQuestion(updatedQuestion);\r\n+    onUpdate(updatedQuestion);\r\n+  }, [localQuestion, onUpdate]);\r\n+\r\n+  const handleExercisePromptUpdate = useCallback((promptIndex: number, updatedPrompt: ExercisePrompt) => {\r\n+    const updatedPrompts = [...localQuestion.exercisePrompts];\r\n+    updatedPrompts[promptIndex] = updatedPrompt;\r\n+    \r\n+    const updatedQuestion = {\r\n+      ...localQuestion,\r\n+      exercisePrompts: updatedPrompts\r\n+    };\r\n+    \r\n+    setLocalQuestion(updatedQuestion);\r\n+    onUpdate(updatedQuestion);\r\n+    onExercisePromptChange?.(promptIndex, updatedPrompt);\r\n+  }, [localQuestion, onUpdate, onExercisePromptChange]);\r\n+\r\n+  return (\r\n+    <div className=\"space-y-6\">\r\n+      {/* Question Title */}\r\n+      <div className=\"space-y-2\">\r\n+        <Label>Question Title</Label>\r\n+        <Textarea\r\n+          value={localQuestion.title}\r\n+          onChange={(e) => {\r\n+            const updatedQuestion = { ...localQuestion, title: e.target.value };\r\n+            setLocalQuestion(updatedQuestion);\r\n+            onUpdate(updatedQuestion);\r\n+          }}\r\n+          placeholder=\"Enter question title...\"\r\n+        />\r\n+      </div>\r\n+\r\n+      {/* Question Prompt */}\r\n+      <div className=\"space-y-2\">\r\n+        <Label>Question Prompt</Label>\r\n+        <RichTextEditor\r\n+          value={localQuestion.data.prompt}\r\n+          onChange={(value) => handleChange('prompt', value)}\r\n+          placeholder=\"Enter the question prompt...\"\r\n+        />\r\n+      </div>\r\n+\r\n+      {/* Teacher Script */}\r\n+      <div className=\"space-y-2\">\r\n+        <Label>Teacher Script</Label>\r\n+        <Textarea\r\n+          value={localQuestion.data.teacher_script}\r\n+          onChange={(e) => handleChange('teacher_script', e.target.value)}\r\n+          placeholder=\"Enter instructions for the teacher...\"\r\n+          className=\"min-h-[100px]\"\r\n+        />\r\n+      </div>\r\n+\r\n+      {/* Question Type Specific Fields */}\r\n+      {localQuestion.type === 'multipleChoice' && (\r\n+        <Card>\r\n+          <CardContent className=\"space-y-4 pt-4\">\r\n+            {/* Options */}\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Options</Label>\r\n+              {(localQuestion.data.options || []).map((option: string, optionIndex: number) => (\r\n+                <div key={optionIndex} className=\"flex items-center gap-2\">\r\n+                  <Textarea\r\n+                    value={option}\r\n+                    onChange={(e) => {\r\n+                      const newOptions = [...(localQuestion.data.options || [])];\r\n+                      newOptions[optionIndex] = e.target.value;\r\n+                      handleChange('options', newOptions);\r\n+                    }}\r\n+                    placeholder={`Option ${optionIndex + 1}`}\r\n+                  />\r\n+                  <Button\r\n+                    variant=\"ghost\"\r\n+                    size=\"sm\"\r\n+                    onClick={() => {\r\n+                      const newOptions = (localQuestion.data.options || []).filter((_, i) => i !== optionIndex);\r\n+                      handleChange('options', newOptions);\r\n+                    }}\r\n+                  >\r\n+                    <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n+                  </Button>\r\n+                </div>\r\n+              ))}\r\n+              <Button\r\n+                variant=\"outline\"\r\n+                size=\"sm\"\r\n+                onClick={() => {\r\n+                  const newOptions = [...(localQuestion.data.options || []), ''];\r\n+                  handleChange('options', newOptions);\r\n+                }}\r\n+              >\r\n+                <Plus className=\"h-4 w-4 mr-2\" />\r\n+                Add Option\r\n+              </Button>\r\n+            </div>\r\n+\r\n+            {/* Correct Answer */}\r\n+            <div className=\"space-y-2\">\r\n+              <Label>Correct Answer</Label>\r\n+              <Select\r\n+                value={localQuestion.data.correct_answer}\r\n+                onValueChange={(value) => handleChange('correct_answer', value)}\r\n+              >\r\n+                <SelectTrigger>\r\n+                  <SelectValue placeholder=\"Select correct answer\" />\r\n+                </SelectTrigger>\r\n+                <SelectContent>\r\n+                  {(localQuestion.data.options || []).map((option: string, index: number) => (\r\n+                    <SelectItem key={index} value={option}>\r\n+                      {option || `Option ${index + 1}`}\r\n+                    </SelectItem>\r\n+                  ))}\r\n+                </SelectContent>\r\n+              </Select>\r\n+            </div>\r\n+          </CardContent>\r\n+        </Card>\r\n+      )}\r\n+\r\n+      {/* Sample Answer (for open-ended questions) */}\r\n+      {['shortAnswer', 'speaking'].includes(localQuestion.type) && (\r\n+        <div className=\"space-y-2\">\r\n+          <Label>Sample Answer</Label>\r\n+          <Textarea\r\n+            value={localQuestion.data.sample_answer}\r\n+            onChange={(e) => handleChange('sample_answer', e.target.value)}\r\n+            placeholder=\"Enter a sample answer...\"\r\n+            className=\"min-h-[100px]\"\r\n+          />\r\n+        </div>\r\n+      )}\r\n+\r\n+      {/* Exercise Prompts */}\r\n+      <div className=\"space-y-4\">\r\n+        <div className=\"flex items-center justify-between\">\r\n+          <Label>Exercise Prompts</Label>\r\n+          {onAddExercisePrompt && (\r\n+            <Button\r\n+              variant=\"outline\"\r\n+              size=\"sm\"\r\n+              onClick={onAddExercisePrompt}\r\n+            >\r\n+              <Plus className=\"h-4 w-4 mr-2\" />\r\n+              Add Exercise Prompt\r\n+            </Button>\r\n+          )}\r\n+        </div>\r\n+        \r\n+        {localQuestion.exercisePrompts.map((prompt, promptIndex) => (\r\n+          <ExercisePromptCard\r\n+            key={prompt.id}\r\n+            prompt={prompt}\r\n+            promptIndex={promptIndex}\r\n+            onRemove={() => onRemoveExercisePrompt?.(promptIndex)}\r\n+            onUpdate={(updatedPrompt) => handleExercisePromptUpdate(promptIndex, updatedPrompt)}\r\n+          />\r\n+        ))}\r\n+      </div>\r\n+\r\n+      {/* Follow-up Prompts */}\r\n+      <div className=\"space-y-2\">\r\n+        <Label>Follow-up Prompts</Label>\r\n+        {(localQuestion.data.followup_prompt || []).map((prompt: string, promptIndex: number) => (\r\n+          <div key={promptIndex} className=\"flex items-center gap-2\">\r\n+            <Textarea\r\n+              value={prompt}\r\n+              onChange={(e) => {\r\n+                const newPrompts = [...(localQuestion.data.followup_prompt || [])];\r\n+                newPrompts[promptIndex] = e.target.value;\r\n+                handleChange('followup_prompt', newPrompts);\r\n+              }}\r\n+              placeholder={`Follow-up prompt ${promptIndex + 1}`}\r\n+            />\r\n+            <Button\r\n+              variant=\"ghost\"\r\n+              size=\"sm\"\r\n+              onClick={() => {\r\n+                const newPrompts = (localQuestion.data.followup_prompt || []).filter((_, i) => i !== promptIndex);\r\n+                handleChange('followup_prompt', newPrompts);\r\n+              }}\r\n+            >\r\n+              <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n+            </Button>\r\n+          </div>\r\n+        ))}\r\n+        <Button\r\n+          variant=\"outline\"\r\n+          size=\"sm\"\r\n+          onClick={() => {\r\n+            const newPrompts = [...(localQuestion.data.followup_prompt || []), ''];\r\n+            handleChange('followup_prompt', newPrompts);\r\n+          }}\r\n+        >\r\n+          <Plus className=\"h-4 w-4 mr-2\" />\r\n+          Add Follow-up Prompt\r\n+        </Button>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740091742149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,14 +2,17 @@\n import { Card, CardContent } from '@/components/ui/card';\r\n import { Label } from '@/components/ui/label';\r\n import { Textarea } from '@/components/ui/textarea';\r\n import { Button } from '@/components/ui/button';\r\n-import { Plus, Trash2 } from 'lucide-react';\r\n+import { Plus, Trash2, ChevronDown, ChevronRight } from 'lucide-react';\r\n import { Question, ExercisePrompt } from '../../api/types';\r\n import { RichTextEditor } from '@/components/ui/rich-text-editor';\r\n import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\n import { ExercisePromptCard } from './ExercisePromptCard';\r\n import { QUESTION_TYPES } from '../../utils/constants';\r\n+import { cn } from '@/lib/utils';\r\n+import { ScrollArea } from '@/components/ui/scroll-area';\r\n+import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\r\n \r\n interface QuestionFormProps {\r\n   question: Question;\r\n   index: number;\r\n@@ -27,8 +30,10 @@\n   onRemoveExercisePrompt,\r\n   onExercisePromptChange,\r\n }: QuestionFormProps) => {\r\n   const [localQuestion, setLocalQuestion] = useState(question);\r\n+  const [expandedSection, setExpandedSection] = useState<string | null>('main');\r\n+  const [hoveredPrompt, setHoveredPrompt] = useState<number | null>(null);\r\n \r\n   const handleChange = useCallback((field: keyof Question['data'], value: any) => {\r\n     const updatedQuestion = {\r\n       ...localQuestion,\r\n@@ -54,188 +59,233 @@\n     onUpdate(updatedQuestion);\r\n     onExercisePromptChange?.(promptIndex, updatedPrompt);\r\n   }, [localQuestion, onUpdate, onExercisePromptChange]);\r\n \r\n+  const sections = [\r\n+    { id: 'main', title: 'Main Content', show: true },\r\n+    { id: 'options', title: 'Options', show: localQuestion.type === 'multipleChoice' },\r\n+    { id: 'answer', title: 'Sample Answer', show: ['shortAnswer', 'speaking'].includes(localQuestion.type) },\r\n+    { id: 'prompts', title: 'Exercise Prompts', show: true }\r\n+  ];\r\n+\r\n   return (\r\n-    <div className=\"space-y-6\">\r\n-      {/* Question Title */}\r\n-      <div className=\"space-y-2\">\r\n-        <Label>Question Title</Label>\r\n-        <Textarea\r\n-          value={localQuestion.title}\r\n-          onChange={(e) => {\r\n-            const updatedQuestion = { ...localQuestion, title: e.target.value };\r\n-            setLocalQuestion(updatedQuestion);\r\n-            onUpdate(updatedQuestion);\r\n-          }}\r\n-          placeholder=\"Enter question title...\"\r\n-        />\r\n-      </div>\r\n-\r\n-      {/* Question Prompt */}\r\n-      <div className=\"space-y-2\">\r\n-        <Label>Question Prompt</Label>\r\n-        <RichTextEditor\r\n-          value={localQuestion.data.prompt}\r\n-          onChange={(value) => handleChange('prompt', value)}\r\n-          placeholder=\"Enter the question prompt...\"\r\n-        />\r\n-      </div>\r\n-\r\n-      {/* Teacher Script */}\r\n-      <div className=\"space-y-2\">\r\n-        <Label>Teacher Script</Label>\r\n-        <Textarea\r\n-          value={localQuestion.data.teacher_script}\r\n-          onChange={(e) => handleChange('teacher_script', e.target.value)}\r\n-          placeholder=\"Enter instructions for the teacher...\"\r\n-          className=\"min-h-[100px]\"\r\n-        />\r\n-      </div>\r\n-\r\n-      {/* Question Type Specific Fields */}\r\n-      {localQuestion.type === 'multipleChoice' && (\r\n-        <Card>\r\n-          <CardContent className=\"space-y-4 pt-4\">\r\n-            {/* Options */}\r\n-            <div className=\"space-y-2\">\r\n-              <Label>Options</Label>\r\n-              {(localQuestion.data.options || []).map((option: string, optionIndex: number) => (\r\n-                <div key={optionIndex} className=\"flex items-center gap-2\">\r\n-                  <Textarea\r\n-                    value={option}\r\n-                    onChange={(e) => {\r\n-                      const newOptions = [...(localQuestion.data.options || [])];\r\n-                      newOptions[optionIndex] = e.target.value;\r\n-                      handleChange('options', newOptions);\r\n-                    }}\r\n-                    placeholder={`Option ${optionIndex + 1}`}\r\n-                  />\r\n-                  <Button\r\n-                    variant=\"ghost\"\r\n-                    size=\"sm\"\r\n-                    onClick={() => {\r\n-                      const newOptions = (localQuestion.data.options || []).filter((_, i) => i !== optionIndex);\r\n-                      handleChange('options', newOptions);\r\n-                    }}\r\n-                  >\r\n-                    <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n-                  </Button>\r\n-                </div>\r\n-              ))}\r\n+    <ScrollArea className=\"max-h-[calc(100vh-30rem)]\">\r\n+      <div className=\"space-y-6 pr-4\">\r\n+        {sections.map((section, sectionIndex) => section.show && (\r\n+          <Card \r\n+            key={section.id}\r\n+            className={cn(\r\n+              \"border transition-all duration-200\",\r\n+              \"hover:shadow-md\",\r\n+              \"animate-fade-in-up\",\r\n+              expandedSection === section.id && \"border-primary/20 shadow-md\"\r\n+            )}\r\n+            style={{ animationDelay: `${sectionIndex * 100}ms` }}\r\n+          >\r\n+            <div \r\n+              className={cn(\r\n+                \"flex items-center justify-between p-4 cursor-pointer\",\r\n+                \"transition-colors duration-200\",\r\n+                \"hover:bg-accent/50\",\r\n+                \"group\"\r\n+              )}\r\n+              onClick={() => setExpandedSection(expandedSection === section.id ? null : section.id)}\r\n+            >\r\n+              <h3 className={cn(\r\n+                \"text-lg font-semibold\",\r\n+                \"transition-colors duration-200\",\r\n+                expandedSection === section.id && \"text-primary\"\r\n+              )}>\r\n+                {section.title}\r\n+              </h3>\r\n               <Button\r\n-                variant=\"outline\"\r\n+                variant=\"ghost\"\r\n                 size=\"sm\"\r\n-                onClick={() => {\r\n-                  const newOptions = [...(localQuestion.data.options || []), ''];\r\n-                  handleChange('options', newOptions);\r\n-                }}\r\n+                className=\"transition-transform duration-200 group-hover:scale-110\"\r\n               >\r\n-                <Plus className=\"h-4 w-4 mr-2\" />\r\n-                Add Option\r\n+                {expandedSection === section.id ? (\r\n+                  <ChevronDown className=\"h-4 w-4\" />\r\n+                ) : (\r\n+                  <ChevronRight className=\"h-4 w-4\" />\r\n+                )}\r\n               </Button>\r\n             </div>\r\n \r\n-            {/* Correct Answer */}\r\n-            <div className=\"space-y-2\">\r\n-              <Label>Correct Answer</Label>\r\n-              <Select\r\n-                value={localQuestion.data.correct_answer}\r\n-                onValueChange={(value) => handleChange('correct_answer', value)}\r\n-              >\r\n-                <SelectTrigger>\r\n-                  <SelectValue placeholder=\"Select correct answer\" />\r\n-                </SelectTrigger>\r\n-                <SelectContent>\r\n-                  {(localQuestion.data.options || []).map((option: string, index: number) => (\r\n-                    <SelectItem key={index} value={option}>\r\n-                      {option || `Option ${index + 1}`}\r\n-                    </SelectItem>\r\n-                  ))}\r\n-                </SelectContent>\r\n-              </Select>\r\n-            </div>\r\n-          </CardContent>\r\n-        </Card>\r\n-      )}\r\n+            {expandedSection === section.id && (\r\n+              <CardContent className=\"animate-fade-in\">\r\n+                {section.id === 'main' && (\r\n+                  <div className=\"space-y-4\">\r\n+                    <div className=\"space-y-2\">\r\n+                      <Label className=\"text-sm font-medium\">Question Title</Label>\r\n+                      <Textarea\r\n+                        value={localQuestion.title}\r\n+                        onChange={(e) => {\r\n+                          const updatedQuestion = { ...localQuestion, title: e.target.value };\r\n+                          setLocalQuestion(updatedQuestion);\r\n+                          onUpdate(updatedQuestion);\r\n+                        }}\r\n+                        placeholder=\"Enter question title...\"\r\n+                        className=\"min-h-[60px] transition-all duration-200 focus:scale-[1.01]\"\r\n+                      />\r\n+                    </div>\r\n \r\n-      {/* Sample Answer (for open-ended questions) */}\r\n-      {['shortAnswer', 'speaking'].includes(localQuestion.type) && (\r\n-        <div className=\"space-y-2\">\r\n-          <Label>Sample Answer</Label>\r\n-          <Textarea\r\n-            value={localQuestion.data.sample_answer}\r\n-            onChange={(e) => handleChange('sample_answer', e.target.value)}\r\n-            placeholder=\"Enter a sample answer...\"\r\n-            className=\"min-h-[100px]\"\r\n-          />\r\n-        </div>\r\n-      )}\r\n+                    <div className=\"space-y-2\">\r\n+                      <Label className=\"text-sm font-medium\">Question Prompt</Label>\r\n+                      <RichTextEditor\r\n+                        value={localQuestion.data.prompt}\r\n+                        onChange={(value) => handleChange('prompt', value)}\r\n+                        placeholder=\"Enter the question prompt...\"\r\n+                        className=\"min-h-[120px] transition-all duration-200 focus:scale-[1.01]\"\r\n+                      />\r\n+                    </div>\r\n \r\n-      {/* Exercise Prompts */}\r\n-      <div className=\"space-y-4\">\r\n-        <div className=\"flex items-center justify-between\">\r\n-          <Label>Exercise Prompts</Label>\r\n-          {onAddExercisePrompt && (\r\n-            <Button\r\n-              variant=\"outline\"\r\n-              size=\"sm\"\r\n-              onClick={onAddExercisePrompt}\r\n-            >\r\n-              <Plus className=\"h-4 w-4 mr-2\" />\r\n-              Add Exercise Prompt\r\n-            </Button>\r\n-          )}\r\n-        </div>\r\n-        \r\n-        {localQuestion.exercisePrompts.map((prompt, promptIndex) => (\r\n-          <ExercisePromptCard\r\n-            key={prompt.id}\r\n-            prompt={prompt}\r\n-            promptIndex={promptIndex}\r\n-            onRemove={() => onRemoveExercisePrompt?.(promptIndex)}\r\n-            onUpdate={(updatedPrompt) => handleExercisePromptUpdate(promptIndex, updatedPrompt)}\r\n-          />\r\n-        ))}\r\n-      </div>\r\n+                    <div className=\"space-y-2\">\r\n+                      <Label className=\"text-sm font-medium\">Teacher Script</Label>\r\n+                      <Textarea\r\n+                        value={localQuestion.data.teacher_script}\r\n+                        onChange={(e) => handleChange('teacher_script', e.target.value)}\r\n+                        placeholder=\"Enter instructions for the teacher...\"\r\n+                        className=\"min-h-[100px] transition-all duration-200 focus:scale-[1.01]\"\r\n+                      />\r\n+                    </div>\r\n+                  </div>\r\n+                )}\r\n \r\n-      {/* Follow-up Prompts */}\r\n-      <div className=\"space-y-2\">\r\n-        <Label>Follow-up Prompts</Label>\r\n-        {(localQuestion.data.followup_prompt || []).map((prompt: string, promptIndex: number) => (\r\n-          <div key={promptIndex} className=\"flex items-center gap-2\">\r\n-            <Textarea\r\n-              value={prompt}\r\n-              onChange={(e) => {\r\n-                const newPrompts = [...(localQuestion.data.followup_prompt || [])];\r\n-                newPrompts[promptIndex] = e.target.value;\r\n-                handleChange('followup_prompt', newPrompts);\r\n-              }}\r\n-              placeholder={`Follow-up prompt ${promptIndex + 1}`}\r\n-            />\r\n-            <Button\r\n-              variant=\"ghost\"\r\n-              size=\"sm\"\r\n-              onClick={() => {\r\n-                const newPrompts = (localQuestion.data.followup_prompt || []).filter((_, i) => i !== promptIndex);\r\n-                handleChange('followup_prompt', newPrompts);\r\n-              }}\r\n-            >\r\n-              <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n-            </Button>\r\n-          </div>\r\n+                {section.id === 'options' && localQuestion.type === 'multipleChoice' && (\r\n+                  <div className=\"space-y-4\">\r\n+                    <div className=\"space-y-2\">\r\n+                      <Label className=\"text-sm font-medium\">Options</Label>\r\n+                      {(localQuestion.data.options || []).map((option: string, optionIndex: number) => (\r\n+                        <div \r\n+                          key={optionIndex} \r\n+                          className={cn(\r\n+                            \"flex items-center gap-2\",\r\n+                            \"animate-fade-in-up\",\r\n+                            \"group\"\r\n+                          )}\r\n+                          style={{ animationDelay: `${optionIndex * 50}ms` }}\r\n+                        >\r\n+                          <Textarea\r\n+                            value={option}\r\n+                            onChange={(e) => {\r\n+                              const newOptions = [...(localQuestion.data.options || [])];\r\n+                              newOptions[optionIndex] = e.target.value;\r\n+                              handleChange('options', newOptions);\r\n+                            }}\r\n+                            placeholder={`Option ${optionIndex + 1}`}\r\n+                            className=\"transition-all duration-200 focus:scale-[1.01]\"\r\n+                          />\r\n+                          <Button\r\n+                            variant=\"ghost\"\r\n+                            size=\"sm\"\r\n+                            onClick={() => {\r\n+                              const newOptions = (localQuestion.data.options || []).filter((_, i) => i !== optionIndex);\r\n+                              handleChange('options', newOptions);\r\n+                            }}\r\n+                            className=\"opacity-0 group-hover:opacity-100 transition-opacity duration-200 hover:bg-destructive/10\"\r\n+                          >\r\n+                            <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n+                          </Button>\r\n+                        </div>\r\n+                      ))}\r\n+                      <Button\r\n+                        variant=\"outline\"\r\n+                        size=\"sm\"\r\n+                        onClick={() => {\r\n+                          const newOptions = [...(localQuestion.data.options || []), ''];\r\n+                          handleChange('options', newOptions);\r\n+                        }}\r\n+                        className=\"w-full mt-2 transition-all duration-200 hover:bg-primary/10 hover:text-primary group\"\r\n+                      >\r\n+                        <Plus className=\"h-4 w-4 mr-2 transition-transform duration-200 group-hover:scale-110\" />\r\n+                        Add Option\r\n+                      </Button>\r\n+                    </div>\r\n+\r\n+                    <div className=\"space-y-2\">\r\n+                      <Label className=\"text-sm font-medium\">Correct Answer</Label>\r\n+                      <Select\r\n+                        value={localQuestion.data.correct_answer}\r\n+                        onValueChange={(value) => handleChange('correct_answer', value)}\r\n+                      >\r\n+                        <SelectTrigger className=\"transition-all duration-200 focus:scale-[1.01]\">\r\n+                          <SelectValue placeholder=\"Select correct answer\" />\r\n+                        </SelectTrigger>\r\n+                        <SelectContent>\r\n+                          {(localQuestion.data.options || []).map((option: string, index: number) => (\r\n+                            <SelectItem \r\n+                              key={index} \r\n+                              value={option}\r\n+                              className=\"transition-all duration-200 hover:bg-primary/10 group\"\r\n+                            >\r\n+                              <span className=\"transition-colors duration-200 group-hover:text-primary\">\r\n+                                {option || `Option ${index + 1}`}\r\n+                              </span>\r\n+                            </SelectItem>\r\n+                          ))}\r\n+                        </SelectContent>\r\n+                      </Select>\r\n+                    </div>\r\n+                  </div>\r\n+                )}\r\n+\r\n+                {section.id === 'answer' && ['shortAnswer', 'speaking'].includes(localQuestion.type) && (\r\n+                  <div className=\"space-y-2\">\r\n+                    <Label className=\"text-sm font-medium\">Sample Answer</Label>\r\n+                    <Textarea\r\n+                      value={localQuestion.data.sample_answer}\r\n+                      onChange={(e) => handleChange('sample_answer', e.target.value)}\r\n+                      placeholder=\"Enter a sample answer...\"\r\n+                      className=\"min-h-[100px] transition-all duration-200 focus:scale-[1.01]\"\r\n+                    />\r\n+                  </div>\r\n+                )}\r\n+\r\n+                {section.id === 'prompts' && (\r\n+                  <div className=\"space-y-4\">\r\n+                    <div className=\"flex items-center justify-between\">\r\n+                      <Label className=\"text-sm font-medium\">Exercise Prompts</Label>\r\n+                      {onAddExercisePrompt && (\r\n+                        <Button\r\n+                          variant=\"outline\"\r\n+                          size=\"sm\"\r\n+                          onClick={onAddExercisePrompt}\r\n+                          className=\"transition-all duration-200 hover:bg-primary/10 hover:text-primary group\"\r\n+                        >\r\n+                          <Plus className=\"h-4 w-4 mr-2 transition-transform duration-200 group-hover:scale-110\" />\r\n+                          Add Exercise Prompt\r\n+                        </Button>\r\n+                      )}\r\n+                    </div>\r\n+                    \r\n+                    <div className=\"grid gap-4\">\r\n+                      {localQuestion.exercisePrompts.map((prompt, promptIndex) => (\r\n+                        <div \r\n+                          key={prompt.id}\r\n+                          className=\"animate-fade-in-up\"\r\n+                          style={{ animationDelay: `${promptIndex * 100}ms` }}\r\n+                          onMouseEnter={() => setHoveredPrompt(promptIndex)}\r\n+                          onMouseLeave={() => setHoveredPrompt(null)}\r\n+                        >\r\n+                          <ExercisePromptCard\r\n+                            prompt={prompt}\r\n+                            promptIndex={promptIndex}\r\n+                            onRemove={() => onRemoveExercisePrompt?.(promptIndex)}\r\n+                            onUpdate={(updatedPrompt) => handleExercisePromptUpdate(promptIndex, updatedPrompt)}\r\n+                            className={cn(\r\n+                              \"transition-all duration-200\",\r\n+                              hoveredPrompt === promptIndex && \"scale-[1.01] shadow-md\"\r\n+                            )}\r\n+                          />\r\n+                        </div>\r\n+                      ))}\r\n+                    </div>\r\n+                  </div>\r\n+                )}\r\n+              </CardContent>\r\n+            )}\r\n+          </Card>\r\n         ))}\r\n-        <Button\r\n-          variant=\"outline\"\r\n-          size=\"sm\"\r\n-          onClick={() => {\r\n-            const newPrompts = [...(localQuestion.data.followup_prompt || []), ''];\r\n-            handleChange('followup_prompt', newPrompts);\r\n-          }}\r\n-        >\r\n-          <Plus className=\"h-4 w-4 mr-2\" />\r\n-          Add Follow-up Prompt\r\n-        </Button>\r\n       </div>\r\n-    </div>\r\n+    </ScrollArea>\r\n   );\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740091772025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,9 +133,8 @@\n                       <RichTextEditor\r\n                         value={localQuestion.data.prompt}\r\n                         onChange={(value) => handleChange('prompt', value)}\r\n                         placeholder=\"Enter the question prompt...\"\r\n-                        className=\"min-h-[120px] transition-all duration-200 focus:scale-[1.01]\"\r\n                       />\r\n                     </div>\r\n \r\n                     <div className=\"space-y-2\">\r\n"
                }
            ],
            "date": 1740086248915,
            "name": "Commit-0",
            "content": "import { useState } from 'react';\r\nimport { Card, CardContent } from '@/components/ui/card';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Question } from '../../api/types';\r\nimport { RichTextEditor } from '@/components/ui/rich-text-editor';\r\n\r\ninterface QuestionFormProps {\r\n  question: Question;\r\n  index: number;\r\n  onUpdate: (updatedQuestion: Question) => void;\r\n}\r\n\r\nexport const QuestionForm = ({\r\n  question,\r\n  index,\r\n  onUpdate,\r\n}: QuestionFormProps) => {\r\n  const [localQuestion, setLocalQuestion] = useState(question);\r\n\r\n  const handleChange = (field: keyof Question['data'], value: string) => {\r\n    const updatedQuestion = {\r\n      ...localQuestion,\r\n      data: {\r\n        ...localQuestion.data,\r\n        [field]: value\r\n      }\r\n    };\r\n    setLocalQuestion(updatedQuestion);\r\n    onUpdate(updatedQuestion);\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      {/* Question Prompt */}\r\n      <div className=\"space-y-2\">\r\n        <Label>Question Prompt</Label>\r\n        <RichTextEditor\r\n          value={localQuestion.data?.prompt || ''}\r\n          onChange={(value) => handleChange('prompt', value)}\r\n          placeholder=\"Enter the question prompt...\"\r\n        />\r\n      </div>\r\n\r\n      {/* Teacher Script */}\r\n      <div className=\"space-y-2\">\r\n        <Label>Teacher Script</Label>\r\n        <Textarea\r\n          value={localQuestion.data?.teacher_script || ''}\r\n          onChange={(e) => handleChange('teacher_script', e.target.value)}\r\n          placeholder=\"Enter instructions for the teacher...\"\r\n          className=\"min-h-[100px]\"\r\n        />\r\n      </div>\r\n\r\n      {/* Question-specific fields based on type */}\r\n      {question.type === 'multipleChoice' && (\r\n        <Card>\r\n          <CardContent className=\"space-y-4 pt-4\">\r\n            {/* Options */}\r\n            <div className=\"space-y-2\">\r\n              <Label>Options</Label>\r\n              {(localQuestion.data?.options || []).map((option: string, optionIndex: number) => (\r\n                <div key={optionIndex} className=\"flex items-center gap-2\">\r\n                  <Textarea\r\n                    value={option}\r\n                    onChange={(e) => {\r\n                      const newOptions = [...(localQuestion.data?.options || [])];\r\n                      newOptions[optionIndex] = e.target.value;\r\n                      handleChange('options', newOptions);\r\n                    }}\r\n                    placeholder={`Option ${optionIndex + 1}`}\r\n                  />\r\n                </div>\r\n              ))}\r\n            </div>\r\n\r\n            {/* Correct Answer */}\r\n            <div className=\"space-y-2\">\r\n              <Label>Correct Answer</Label>\r\n              <Textarea\r\n                value={localQuestion.data?.correct_answer || ''}\r\n                onChange={(e) => handleChange('correct_answer', e.target.value)}\r\n                placeholder=\"Enter the correct answer...\"\r\n              />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Sample Answer (for open-ended questions) */}\r\n      {['shortAnswer', 'speaking'].includes(question.type) && (\r\n        <div className=\"space-y-2\">\r\n          <Label>Sample Answer</Label>\r\n          <Textarea\r\n            value={localQuestion.data?.sample_answer || ''}\r\n            onChange={(e) => handleChange('sample_answer', e.target.value)}\r\n            placeholder=\"Enter a sample answer...\"\r\n            className=\"min-h-[100px]\"\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      {/* Follow-up Prompts */}\r\n      <div className=\"space-y-2\">\r\n        <Label>Follow-up Prompts</Label>\r\n        {(localQuestion.data?.followup_prompt || []).map((prompt: string, promptIndex: number) => (\r\n          <div key={promptIndex} className=\"flex items-center gap-2\">\r\n            <Textarea\r\n              value={prompt}\r\n              onChange={(e) => {\r\n                const newPrompts = [...(localQuestion.data?.followup_prompt || [])];\r\n                newPrompts[promptIndex] = e.target.value;\r\n                handleChange('followup_prompt', newPrompts);\r\n              }}\r\n              placeholder={`Follow-up prompt ${promptIndex + 1}`}\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}; "
        }
    ]
}