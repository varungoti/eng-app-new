{
    "sourceFile": "src/features/content-management/components/questions/ExercisePromptCard.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1740086272019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740087141553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,41 +1,44 @@\n-import { useState } from 'react';\r\n+import { useState, useCallback } from 'react';\r\n import { Card, CardContent, CardHeader } from '@/components/ui/card';\r\n import { Label } from '@/components/ui/label';\r\n import { Textarea } from '@/components/ui/textarea';\r\n import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\n import { Button } from '@/components/ui/button';\r\n import { Trash2 } from 'lucide-react';\r\n import { ExercisePrompt } from '../../api/types';\r\n import { MediaPreview } from '@/components/ui/media-preview';\r\n+import { cn } from '@/lib/utils';\r\n \r\n interface ExercisePromptCardProps {\r\n   prompt: ExercisePrompt;\r\n   promptIndex: number;\r\n   onRemove: () => void;\r\n   onUpdate: (updatedPrompt: ExercisePrompt) => void;\r\n+  className?: string;\r\n }\r\n \r\n export const ExercisePromptCard = ({\r\n   prompt,\r\n   promptIndex,\r\n   onRemove,\r\n   onUpdate,\r\n+  className\r\n }: ExercisePromptCardProps) => {\r\n   const [localPrompt, setLocalPrompt] = useState(prompt);\r\n \r\n-  const handleChange = (field: keyof ExercisePrompt, value: string) => {\r\n+  const handleChange = useCallback((field: keyof ExercisePrompt, value: any) => {\r\n     const updatedPrompt = {\r\n       ...localPrompt,\r\n       [field]: value,\r\n       updated_at: new Date().toISOString()\r\n     };\r\n     setLocalPrompt(updatedPrompt);\r\n     onUpdate(updatedPrompt);\r\n-  };\r\n+  }, [localPrompt, onUpdate]);\r\n \r\n   return (\r\n-    <Card>\r\n+    <Card className={cn(\"border-l-4 border-l-primary/40 hover:border-l-primary transition-colors\", className)}>\r\n       <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\r\n         <h4 className=\"text-sm font-medium\">Exercise Prompt {promptIndex + 1}</h4>\r\n         <Button\r\n           variant=\"ghost\"\r\n@@ -61,9 +64,9 @@\n         <div className=\"space-y-2\">\r\n           <Label>Media Type</Label>\r\n           <Select\r\n             value={localPrompt.type}\r\n-            onValueChange={(value) => handleChange('type', value)}\r\n+            onValueChange={(value: 'image' | 'gif' | 'video') => handleChange('type', value)}\r\n           >\r\n             <SelectTrigger>\r\n               <SelectValue placeholder=\"Select media type\" />\r\n             </SelectTrigger>\r\n@@ -83,13 +86,13 @@\n               value={typeof localPrompt.media === 'string' ? localPrompt.media : ''}\r\n               onChange={(e) => handleChange('media', e.target.value)}\r\n               placeholder={`Enter ${localPrompt.type} URL...`}\r\n             />\r\n-            {localPrompt.media && (\r\n+            {localPrompt.media && typeof localPrompt.media === 'string' && (\r\n               <div className=\"mt-2\">\r\n                 <MediaPreview\r\n                   type={localPrompt.type}\r\n-                  url={typeof localPrompt.media === 'string' ? localPrompt.media : ''}\r\n+                  url={localPrompt.media}\r\n                 />\r\n               </div>\r\n             )}\r\n           </div>\r\n@@ -113,8 +116,56 @@\n             onChange={(e) => handleChange('saytext', e.target.value)}\r\n             placeholder=\"Enter text for the student to say...\"\r\n           />\r\n         </div>\r\n+\r\n+        {/* Difficulty Level */}\r\n+        <div className=\"space-y-2\">\r\n+          <Label>Difficulty Level</Label>\r\n+          <Select\r\n+            value={localPrompt.metadata?.difficulty || 'beginner'}\r\n+            onValueChange={(value: 'beginner' | 'intermediate' | 'advanced') => \r\n+              handleChange('metadata', {\r\n+                ...localPrompt.metadata,\r\n+                difficulty: value\r\n+              })\r\n+            }\r\n+          >\r\n+            <SelectTrigger>\r\n+              <SelectValue placeholder=\"Select difficulty level\" />\r\n+            </SelectTrigger>\r\n+            <SelectContent>\r\n+              <SelectItem value=\"beginner\">Beginner</SelectItem>\r\n+              <SelectItem value=\"intermediate\">Intermediate</SelectItem>\r\n+              <SelectItem value=\"advanced\">Advanced</SelectItem>\r\n+            </SelectContent>\r\n+          </Select>\r\n+        </div>\r\n+\r\n+        {/* Estimated Time */}\r\n+        <div className=\"space-y-2\">\r\n+          <Label>Estimated Time (minutes)</Label>\r\n+          <Select\r\n+            value={String(localPrompt.metadata?.estimatedTime || 5)}\r\n+            onValueChange={(value) => \r\n+              handleChange('metadata', {\r\n+                ...localPrompt.metadata,\r\n+                estimatedTime: parseInt(value)\r\n+              })\r\n+            }\r\n+          >\r\n+            <SelectTrigger>\r\n+              <SelectValue placeholder=\"Select estimated time\" />\r\n+            </SelectTrigger>\r\n+            <SelectContent>\r\n+              {[1, 2, 3, 5, 8, 10, 15, 20, 30].map((time) => (\r\n+                <SelectItem key={time} value={String(time)}>\r\n+                  {time} minute{time !== 1 ? 's' : ''}\r\n+                </SelectItem>\r\n+              ))}\r\n+            </SelectContent>\r\n+          </Select>\r\n+        </div>\r\n       </CardContent>\r\n     </Card>\r\n   );\r\n }; \n\\ No newline at end of file\n"
                }
            ],
            "date": 1740086272019,
            "name": "Commit-0",
            "content": "import { useState } from 'react';\r\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Trash2 } from 'lucide-react';\r\nimport { ExercisePrompt } from '../../api/types';\r\nimport { MediaPreview } from '@/components/ui/media-preview';\r\n\r\ninterface ExercisePromptCardProps {\r\n  prompt: ExercisePrompt;\r\n  promptIndex: number;\r\n  onRemove: () => void;\r\n  onUpdate: (updatedPrompt: ExercisePrompt) => void;\r\n}\r\n\r\nexport const ExercisePromptCard = ({\r\n  prompt,\r\n  promptIndex,\r\n  onRemove,\r\n  onUpdate,\r\n}: ExercisePromptCardProps) => {\r\n  const [localPrompt, setLocalPrompt] = useState(prompt);\r\n\r\n  const handleChange = (field: keyof ExercisePrompt, value: string) => {\r\n    const updatedPrompt = {\r\n      ...localPrompt,\r\n      [field]: value,\r\n      updated_at: new Date().toISOString()\r\n    };\r\n    setLocalPrompt(updatedPrompt);\r\n    onUpdate(updatedPrompt);\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\r\n        <h4 className=\"text-sm font-medium\">Exercise Prompt {promptIndex + 1}</h4>\r\n        <Button\r\n          variant=\"ghost\"\r\n          size=\"sm\"\r\n          onClick={onRemove}\r\n          className=\"h-8 w-8 p-0\"\r\n        >\r\n          <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n        </Button>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-4\">\r\n        {/* Prompt Text */}\r\n        <div className=\"space-y-2\">\r\n          <Label>Prompt Text</Label>\r\n          <Textarea\r\n            value={localPrompt.text}\r\n            onChange={(e) => handleChange('text', e.target.value)}\r\n            placeholder=\"Enter the exercise prompt...\"\r\n          />\r\n        </div>\r\n\r\n        {/* Media Type */}\r\n        <div className=\"space-y-2\">\r\n          <Label>Media Type</Label>\r\n          <Select\r\n            value={localPrompt.type}\r\n            onValueChange={(value) => handleChange('type', value)}\r\n          >\r\n            <SelectTrigger>\r\n              <SelectValue placeholder=\"Select media type\" />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              <SelectItem value=\"image\">Image</SelectItem>\r\n              <SelectItem value=\"gif\">GIF</SelectItem>\r\n              <SelectItem value=\"video\">Video</SelectItem>\r\n            </SelectContent>\r\n          </Select>\r\n        </div>\r\n\r\n        {/* Media URL */}\r\n        {localPrompt.type && (\r\n          <div className=\"space-y-2\">\r\n            <Label>Media URL</Label>\r\n            <Textarea\r\n              value={typeof localPrompt.media === 'string' ? localPrompt.media : ''}\r\n              onChange={(e) => handleChange('media', e.target.value)}\r\n              placeholder={`Enter ${localPrompt.type} URL...`}\r\n            />\r\n            {localPrompt.media && (\r\n              <div className=\"mt-2\">\r\n                <MediaPreview\r\n                  type={localPrompt.type}\r\n                  url={typeof localPrompt.media === 'string' ? localPrompt.media : ''}\r\n                />\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {/* Narration */}\r\n        <div className=\"space-y-2\">\r\n          <Label>Narration</Label>\r\n          <Textarea\r\n            value={localPrompt.narration}\r\n            onChange={(e) => handleChange('narration', e.target.value)}\r\n            placeholder=\"Enter narration text...\"\r\n          />\r\n        </div>\r\n\r\n        {/* Say Text */}\r\n        <div className=\"space-y-2\">\r\n          <Label>Say Text</Label>\r\n          <Textarea\r\n            value={localPrompt.saytext}\r\n            onChange={(e) => handleChange('saytext', e.target.value)}\r\n            placeholder=\"Enter text for the student to say...\"\r\n          />\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}; "
        }
    ]
}