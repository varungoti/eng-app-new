{
    "sourceFile": "src/features/content-management/components/shared/InlineEdit.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1740085951040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740089694831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import { Check, Pencil, X } from 'lucide-react';\r\n import { Input } from '@/components/ui/input';\r\n import { Button } from '@/components/ui/button';\r\n import { cn } from '@/lib/utils';\r\n-import { useState } from 'react';\r\n+import { useState, useCallback, useEffect, useRef } from 'react';\r\n \r\n interface InlineEditProps {\r\n   value: string;\r\n   onSave: (value: string) => void;\r\n@@ -21,68 +21,100 @@\n   placeholder = 'Enter value',\r\n   className = ''\r\n }: InlineEditProps) => {\r\n   const [tempValue, setTempValue] = useState(value);\r\n+  const inputRef = useRef<HTMLInputElement>(null);\r\n \r\n-  const handleSave = () => {\r\n-    onSave(tempValue);\r\n+  // Reset temp value when value prop changes\r\n+  useEffect(() => {\r\n+    setTempValue(value);\r\n+  }, [value]);\r\n+\r\n+  // Focus input when editing starts\r\n+  useEffect(() => {\r\n+    if (isEditing && inputRef.current) {\r\n+      inputRef.current.focus();\r\n+      inputRef.current.select();\r\n+    }\r\n+  }, [isEditing]);\r\n+\r\n+  const handleSave = useCallback(() => {\r\n+    if (tempValue.trim() !== '') {\r\n+      onSave(tempValue);\r\n+    }\r\n     setIsEditing(false);\r\n-  };\r\n+  }, [tempValue, onSave, setIsEditing]);\r\n \r\n-  const handleCancel = () => {\r\n+  const handleCancel = useCallback(() => {\r\n     setTempValue(value);\r\n     setIsEditing(false);\r\n-  };\r\n+  }, [value, setIsEditing]);\r\n \r\n-  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n+  const handleKeyDown = useCallback((e: React.KeyboardEvent<HTMLInputElement>) => {\r\n     if (e.key === 'Enter') {\r\n+      e.preventDefault();\r\n       handleSave();\r\n     } else if (e.key === 'Escape') {\r\n+      e.preventDefault();\r\n       handleCancel();\r\n     }\r\n-  };\r\n+  }, [handleSave, handleCancel]);\r\n \r\n   if (isEditing) {\r\n     return (\r\n       <div className=\"flex items-center gap-2\">\r\n         <Input\r\n+          ref={inputRef}\r\n           value={tempValue}\r\n           onChange={(e) => setTempValue(e.target.value)}\r\n           onKeyDown={handleKeyDown}\r\n+          onBlur={handleSave}\r\n           placeholder={placeholder}\r\n-          className={className}\r\n-          autoFocus\r\n+          className={cn(\"flex-1\", className)}\r\n         />\r\n-        <Button\r\n-          size=\"sm\"\r\n-          variant=\"ghost\"\r\n-          onClick={handleSave}\r\n-          className=\"h-8 w-8 p-0\"\r\n-        >\r\n-          <Check className=\"h-4 w-4 text-green-500\" />\r\n-        </Button>\r\n-        <Button\r\n-          size=\"sm\"\r\n-          variant=\"ghost\"\r\n-          onClick={handleCancel}\r\n-          className=\"h-8 w-8 p-0\"\r\n-        >\r\n-          <X className=\"h-4 w-4 text-red-500\" />\r\n-        </Button>\r\n+        <div className=\"flex items-center gap-1\">\r\n+          <Button\r\n+            size=\"sm\"\r\n+            variant=\"ghost\"\r\n+            onClick={handleSave}\r\n+            className=\"h-8 w-8 p-0\"\r\n+          >\r\n+            <Check className=\"h-4 w-4 text-green-500\" />\r\n+          </Button>\r\n+          <Button\r\n+            size=\"sm\"\r\n+            variant=\"ghost\"\r\n+            onClick={handleCancel}\r\n+            className=\"h-8 w-8 p-0\"\r\n+          >\r\n+            <X className=\"h-4 w-4 text-red-500\" />\r\n+          </Button>\r\n+        </div>\r\n       </div>\r\n     );\r\n   }\r\n \r\n   return (\r\n     <div \r\n       className={cn(\r\n         \"group flex items-center gap-2 cursor-pointer\",\r\n-        \"hover:bg-accent/50 rounded px-2 py-1 -mx-2\",\r\n+        \"hover:bg-accent/50 rounded px-2 py-1 -mx-2 transition-colors\",\r\n         className\r\n       )}\r\n       onClick={() => setIsEditing(true)}\r\n+      role=\"button\"\r\n+      tabIndex={0}\r\n+      onKeyDown={(e) => {\r\n+        if (e.key === 'Enter' || e.key === ' ') {\r\n+          e.preventDefault();\r\n+          setIsEditing(true);\r\n+        }\r\n+      }}\r\n     >\r\n-      <span className={cn(\"flex-1\", !value && \"text-muted-foreground italic\")}>\r\n+      <span className={cn(\r\n+        \"flex-1\",\r\n+        !value && \"text-muted-foreground italic\"\r\n+      )}>\r\n         {value || placeholder}\r\n       </span>\r\n       <Pencil className=\"h-4 w-4 opacity-0 group-hover:opacity-100 transition-opacity\" />\r\n     </div>\r\n"
                }
            ],
            "date": 1740085951040,
            "name": "Commit-0",
            "content": "import { Check, Pencil, X } from 'lucide-react';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Button } from '@/components/ui/button';\r\nimport { cn } from '@/lib/utils';\r\nimport { useState } from 'react';\r\n\r\ninterface InlineEditProps {\r\n  value: string;\r\n  onSave: (value: string) => void;\r\n  isEditing: boolean;\r\n  setIsEditing: (value: boolean) => void;\r\n  placeholder?: string;\r\n  className?: string;\r\n}\r\n\r\nexport const InlineEdit = ({\r\n  value,\r\n  onSave,\r\n  isEditing,\r\n  setIsEditing,\r\n  placeholder = 'Enter value',\r\n  className = ''\r\n}: InlineEditProps) => {\r\n  const [tempValue, setTempValue] = useState(value);\r\n\r\n  const handleSave = () => {\r\n    onSave(tempValue);\r\n    setIsEditing(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setTempValue(value);\r\n    setIsEditing(false);\r\n  };\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      handleSave();\r\n    } else if (e.key === 'Escape') {\r\n      handleCancel();\r\n    }\r\n  };\r\n\r\n  if (isEditing) {\r\n    return (\r\n      <div className=\"flex items-center gap-2\">\r\n        <Input\r\n          value={tempValue}\r\n          onChange={(e) => setTempValue(e.target.value)}\r\n          onKeyDown={handleKeyDown}\r\n          placeholder={placeholder}\r\n          className={className}\r\n          autoFocus\r\n        />\r\n        <Button\r\n          size=\"sm\"\r\n          variant=\"ghost\"\r\n          onClick={handleSave}\r\n          className=\"h-8 w-8 p-0\"\r\n        >\r\n          <Check className=\"h-4 w-4 text-green-500\" />\r\n        </Button>\r\n        <Button\r\n          size=\"sm\"\r\n          variant=\"ghost\"\r\n          onClick={handleCancel}\r\n          className=\"h-8 w-8 p-0\"\r\n        >\r\n          <X className=\"h-4 w-4 text-red-500\" />\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div \r\n      className={cn(\r\n        \"group flex items-center gap-2 cursor-pointer\",\r\n        \"hover:bg-accent/50 rounded px-2 py-1 -mx-2\",\r\n        className\r\n      )}\r\n      onClick={() => setIsEditing(true)}\r\n    >\r\n      <span className={cn(\"flex-1\", !value && \"text-muted-foreground italic\")}>\r\n        {value || placeholder}\r\n      </span>\r\n      <Pencil className=\"h-4 w-4 opacity-0 group-hover:opacity-100 transition-opacity\" />\r\n    </div>\r\n  );\r\n}; "
        }
    ]
}