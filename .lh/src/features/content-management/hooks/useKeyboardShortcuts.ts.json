{
    "sourceFile": "src/features/content-management/hooks/useKeyboardShortcuts.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1740089347719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1740089347719,
            "name": "Commit-0",
            "content": "import { useEffect, useCallback } from 'react';\r\n\r\ninterface UseKeyboardShortcutsProps {\r\n  onSave: () => void;\r\n  onToggleEditMode: () => void;\r\n  onToggleHelpTips: () => void;\r\n  onToggleShortcuts: () => void;\r\n  onToggleContentEditor: () => void;\r\n  onSaveContent: () => void;\r\n  onCollapseSidebar: () => void;\r\n  onExpandSidebar: () => void;\r\n  onToggleSidebarLock: () => void;\r\n  onSwitchToQuestions: () => void;\r\n  onSwitchToActivities: () => void;\r\n  onAddNew: () => void;\r\n  isContentEditorOpen?: boolean;\r\n}\r\n\r\nexport const useKeyboardShortcuts = ({\r\n  onSave,\r\n  onToggleEditMode,\r\n  onToggleHelpTips,\r\n  onToggleShortcuts,\r\n  onToggleContentEditor,\r\n  onSaveContent,\r\n  onCollapseSidebar,\r\n  onExpandSidebar,\r\n  onToggleSidebarLock,\r\n  onSwitchToQuestions,\r\n  onSwitchToActivities,\r\n  onAddNew,\r\n  isContentEditorOpen\r\n}: UseKeyboardShortcutsProps) => {\r\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\r\n    // Don't trigger shortcuts when typing in input fields\r\n    if (\r\n      e.target instanceof HTMLInputElement ||\r\n      e.target instanceof HTMLTextAreaElement ||\r\n      e.target instanceof HTMLSelectElement\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    // General shortcuts\r\n    if (e.ctrlKey && e.key === 's') {\r\n      e.preventDefault();\r\n      onSave();\r\n    }\r\n    if (e.ctrlKey && e.key === 'e') {\r\n      e.preventDefault();\r\n      onToggleEditMode();\r\n    }\r\n    if (e.ctrlKey && e.key === 'h') {\r\n      e.preventDefault();\r\n      onToggleHelpTips();\r\n    }\r\n    if (e.ctrlKey && e.key === '/') {\r\n      e.preventDefault();\r\n      onToggleShortcuts();\r\n    }\r\n\r\n    // Navigation shortcuts\r\n    if (e.altKey && e.key === 'ArrowLeft') {\r\n      e.preventDefault();\r\n      onCollapseSidebar();\r\n    }\r\n    if (e.altKey && e.key === 'ArrowRight') {\r\n      e.preventDefault();\r\n      onExpandSidebar();\r\n    }\r\n    if (e.altKey && e.key === 'l') {\r\n      e.preventDefault();\r\n      onToggleSidebarLock();\r\n    }\r\n\r\n    // Content editing shortcuts\r\n    if (e.ctrlKey && e.key === ' ') {\r\n      e.preventDefault();\r\n      onToggleContentEditor();\r\n    }\r\n    if (e.ctrlKey && e.key === 'Enter' && isContentEditorOpen) {\r\n      e.preventDefault();\r\n      onSaveContent();\r\n    }\r\n    if (e.key === 'Escape' && isContentEditorOpen) {\r\n      e.preventDefault();\r\n      onToggleContentEditor();\r\n    }\r\n\r\n    // Questions & Activities shortcuts\r\n    if (e.ctrlKey && e.key === 'q') {\r\n      e.preventDefault();\r\n      onSwitchToQuestions();\r\n    }\r\n    if (e.ctrlKey && e.key === 'a') {\r\n      e.preventDefault();\r\n      onSwitchToActivities();\r\n    }\r\n    if (e.ctrlKey && e.key === 'n') {\r\n      e.preventDefault();\r\n      onAddNew();\r\n    }\r\n  }, [\r\n    onSave,\r\n    onToggleEditMode,\r\n    onToggleHelpTips,\r\n    onToggleShortcuts,\r\n    onToggleContentEditor,\r\n    onSaveContent,\r\n    onCollapseSidebar,\r\n    onExpandSidebar,\r\n    onToggleSidebarLock,\r\n    onSwitchToQuestions,\r\n    onSwitchToActivities,\r\n    onAddNew,\r\n    isContentEditorOpen\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => window.removeEventListener('keydown', handleKeyDown);\r\n  }, [handleKeyDown]);\r\n}; "
        }
    ]
}