{
    "sourceFile": "src/features/content-management/hooks/useContentState.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1740085611487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740086860978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,202 @@\n- \n\\ No newline at end of file\n+import { useState, useCallback, useEffect } from 'react';\r\n+import { supabase } from '@/lib/supabase';\r\n+import { toast } from 'sonner';\r\n+import { Grade, Topic, Subtopic, Lesson } from '../api/types';\r\n+import { useContentStore } from '@/lib/content/store';\r\n+import { contentService } from '@/lib/content/ContentService';\r\n+\r\n+export const useContentState = () => {\r\n+  // Local State\r\n+  const [grades, setGrades] = useState<Grade[]>([]);\r\n+  const [topics, setTopics] = useState<Topic[]>([]);\r\n+  const [subtopics, setSubtopics] = useState<Subtopic[]>([]);\r\n+  const [lessons, setLessons] = useState<Lesson[]>([]);\r\n+\r\n+  // Selection State\r\n+  const [selectedGradeId, setSelectedGradeId] = useState<string | null>(null);\r\n+  const [selectedTopicId, setSelectedTopicId] = useState<string | null>(null);\r\n+  const [selectedSubtopicId, setSelectedSubtopicId] = useState<string | null>(null);\r\n+  const [currentLessonId, setCurrentLessonId] = useState<string | null>(null);\r\n+\r\n+  // Global State\r\n+  const { \r\n+    selectedGrade,\r\n+    setSelectedGrade,\r\n+    selectedTopic,\r\n+    setSelectedTopic,\r\n+    selectedSubtopic,\r\n+    setSelectedSubtopic,\r\n+    selectedLesson,\r\n+    setSelectedLesson\r\n+  } = useContentStore();\r\n+\r\n+  // Fetch Grades\r\n+  useEffect(() => {\r\n+    const fetchGrades = async () => {\r\n+      try {\r\n+        const { data, error } = await supabase\r\n+          .from('grades')\r\n+          .select('*')\r\n+          .order('name');\r\n+\r\n+        if (error) throw error;\r\n+\r\n+        const validGrades = data.map((grade: any) => ({\r\n+          _id: grade.id,\r\n+          id: grade.id,\r\n+          name: grade.name,\r\n+          level: grade.level || 0,\r\n+          orderIndex: grade.order_index || 0,\r\n+          topics: []\r\n+        }));\r\n+        \r\n+        setGrades(validGrades);\r\n+      } catch (error) {\r\n+        console.error('Error fetching grades:', error);\r\n+        toast.error('Failed to fetch grades');\r\n+      }\r\n+    };\r\n+\r\n+    fetchGrades();\r\n+  }, []);\r\n+\r\n+  // Fetch Topics\r\n+  useEffect(() => {\r\n+    const fetchTopics = async () => {\r\n+      if (!selectedGradeId) return;\r\n+      \r\n+      try {\r\n+        const { data, error } = await supabase\r\n+          .from('topics')\r\n+          .select('*')\r\n+          .eq('grade_id', selectedGradeId)\r\n+          .order('title');\r\n+\r\n+        if (error) throw error;\r\n+\r\n+        const validTopics = data.map((topic: any) => ({\r\n+          _id: topic.id,\r\n+          id: topic.id,\r\n+          name: topic.title,\r\n+          title: topic.title,\r\n+          grade_id: topic.grade_id,\r\n+          subtopics: []\r\n+        }));\r\n+        \r\n+        setTopics(validTopics);\r\n+      } catch (error) {\r\n+        console.error('Error fetching topics:', error);\r\n+        toast.error('Failed to fetch topics');\r\n+      }\r\n+    };\r\n+\r\n+    fetchTopics();\r\n+  }, [selectedGradeId]);\r\n+\r\n+  // Fetch Subtopics\r\n+  useEffect(() => {\r\n+    const fetchSubtopics = async () => {\r\n+      if (!selectedTopicId) return;\r\n+      \r\n+      try {\r\n+        const subtopicsData = await contentService.fetchSubtopics(selectedTopicId);\r\n+\r\n+        const validSubtopics = subtopicsData.map((subtopic: any) => ({\r\n+          id: subtopic.id,\r\n+          title: subtopic.title,\r\n+          description: subtopic.description,\r\n+          topic_id: subtopic.topic_id,\r\n+          lessons: [],\r\n+          order_index: subtopicsData.length\r\n+        }));\r\n+        \r\n+        setSubtopics(validSubtopics);\r\n+        \r\n+        if (selectedSubtopic) {\r\n+          setSelectedSubtopic(selectedSubtopic);\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Error fetching subtopics:', error);\r\n+        toast.error('Failed to fetch subtopics');\r\n+      }\r\n+    };\r\n+\r\n+    fetchSubtopics();\r\n+  }, [selectedTopicId, selectedSubtopic, setSelectedSubtopic]);\r\n+\r\n+  // Fetch Lessons\r\n+  useEffect(() => {\r\n+    const fetchLessons = async () => {\r\n+      if (!selectedSubtopicId) return;\r\n+      \r\n+      try {\r\n+        const { data, error } = await supabase\r\n+          .from('lessons')\r\n+          .select('*')\r\n+          .eq('subtopic_id', selectedSubtopicId)\r\n+          .order('title');\r\n+\r\n+        if (error) throw error;\r\n+        \r\n+        const validLessons = data.map((lesson: any) => ({\r\n+          ...lesson,\r\n+          _id: lesson._id || lesson.id,\r\n+          title: lesson.title || 'Untitled Lesson'\r\n+        })).filter((lesson: any) => lesson._id);\r\n+        \r\n+        setLessons(validLessons);\r\n+      } catch (error) {\r\n+        console.error('Error fetching lessons:', error);\r\n+        toast.error('Failed to fetch lessons');\r\n+      }\r\n+    };\r\n+\r\n+    fetchLessons();\r\n+  }, [selectedSubtopicId]);\r\n+\r\n+  // Selection Handlers\r\n+  const handleGradeSelect = useCallback((gradeId: string) => {\r\n+    setSelectedGradeId(gradeId);\r\n+    setSelectedGrade(gradeId);\r\n+    setSelectedTopicId(null);\r\n+    setSelectedTopic('');\r\n+    setSelectedSubtopicId(null);\r\n+    setSelectedSubtopic('');\r\n+    setCurrentLessonId(null);\r\n+  }, [setSelectedGrade, setSelectedTopic, setSelectedSubtopic]);\r\n+\r\n+  const handleTopicSelect = useCallback((topicId: string) => {\r\n+    setSelectedTopicId(topicId);\r\n+    setSelectedTopic(topicId);\r\n+    setSelectedSubtopicId(null);\r\n+    setSelectedSubtopic('');\r\n+    setCurrentLessonId(null);\r\n+  }, [setSelectedTopic, setSelectedSubtopic]);\r\n+\r\n+  const handleSubtopicSelect = useCallback((subtopicId: string) => {\r\n+    setSelectedSubtopicId(subtopicId);\r\n+    setSelectedSubtopic(subtopicId);\r\n+    setCurrentLessonId(null);\r\n+  }, [setSelectedSubtopic]);\r\n+\r\n+  return {\r\n+    // State\r\n+    grades,\r\n+    topics,\r\n+    subtopics,\r\n+    lessons,\r\n+    selectedGradeId,\r\n+    selectedTopicId,\r\n+    selectedSubtopicId,\r\n+    currentLessonId,\r\n+\r\n+    // Actions\r\n+    setSelectedGradeId,\r\n+    setSelectedTopicId,\r\n+    setSelectedSubtopicId,\r\n+    setCurrentLessonId,\r\n+    handleGradeSelect,\r\n+    handleTopicSelect,\r\n+    handleSubtopicSelect,\r\n+  };\r\n+}; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1740087625090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,130 +30,130 @@\n     setSelectedLesson\r\n   } = useContentStore();\r\n \r\n   // Fetch Grades\r\n-  useEffect(() => {\r\n-    const fetchGrades = async () => {\r\n-      try {\r\n-        const { data, error } = await supabase\r\n-          .from('grades')\r\n-          .select('*')\r\n-          .order('name');\r\n+  const fetchGrades = useCallback(async () => {\r\n+    try {\r\n+      const { data, error } = await supabase\r\n+        .from('grades')\r\n+        .select('*')\r\n+        .order('name');\r\n \r\n-        if (error) throw error;\r\n+      if (error) throw error;\r\n \r\n-        const validGrades = data.map((grade: any) => ({\r\n-          _id: grade.id,\r\n-          id: grade.id,\r\n-          name: grade.name,\r\n-          level: grade.level || 0,\r\n-          orderIndex: grade.order_index || 0,\r\n-          topics: []\r\n-        }));\r\n-        \r\n-        setGrades(validGrades);\r\n-      } catch (error) {\r\n-        console.error('Error fetching grades:', error);\r\n-        toast.error('Failed to fetch grades');\r\n-      }\r\n-    };\r\n+      const validGrades = data.map((grade: any) => ({\r\n+        _id: grade.id,\r\n+        id: grade.id,\r\n+        name: grade.name,\r\n+        level: grade.level || 0,\r\n+        orderIndex: grade.order_index || 0,\r\n+        topics: []\r\n+      }));\r\n+      \r\n+      setGrades(validGrades);\r\n+    } catch (error) {\r\n+      console.error('Error fetching grades:', error);\r\n+      toast.error('Failed to fetch grades');\r\n+    }\r\n+  }, []);\r\n \r\n+  useEffect(() => {\r\n     fetchGrades();\r\n-  }, []);\r\n+  }, [fetchGrades]);\r\n \r\n   // Fetch Topics\r\n-  useEffect(() => {\r\n-    const fetchTopics = async () => {\r\n-      if (!selectedGradeId) return;\r\n-      \r\n-      try {\r\n-        const { data, error } = await supabase\r\n-          .from('topics')\r\n-          .select('*')\r\n-          .eq('grade_id', selectedGradeId)\r\n-          .order('title');\r\n+  const fetchTopics = useCallback(async () => {\r\n+    if (!selectedGradeId) return;\r\n+    \r\n+    try {\r\n+      const { data, error } = await supabase\r\n+        .from('topics')\r\n+        .select('*')\r\n+        .eq('grade_id', selectedGradeId)\r\n+        .order('title');\r\n \r\n-        if (error) throw error;\r\n+      if (error) throw error;\r\n \r\n-        const validTopics = data.map((topic: any) => ({\r\n-          _id: topic.id,\r\n-          id: topic.id,\r\n-          name: topic.title,\r\n-          title: topic.title,\r\n-          grade_id: topic.grade_id,\r\n-          subtopics: []\r\n-        }));\r\n-        \r\n-        setTopics(validTopics);\r\n-      } catch (error) {\r\n-        console.error('Error fetching topics:', error);\r\n-        toast.error('Failed to fetch topics');\r\n-      }\r\n-    };\r\n+      const validTopics = data.map((topic: any) => ({\r\n+        _id: topic.id,\r\n+        id: topic.id,\r\n+        name: topic.title,\r\n+        title: topic.title,\r\n+        grade_id: topic.grade_id,\r\n+        subtopics: []\r\n+      }));\r\n+      \r\n+      setTopics(validTopics);\r\n+    } catch (error) {\r\n+      console.error('Error fetching topics:', error);\r\n+      toast.error('Failed to fetch topics');\r\n+    }\r\n+  }, [selectedGradeId]);\r\n \r\n+  useEffect(() => {\r\n     fetchTopics();\r\n-  }, [selectedGradeId]);\r\n+  }, [fetchTopics]);\r\n \r\n   // Fetch Subtopics\r\n-  useEffect(() => {\r\n-    const fetchSubtopics = async () => {\r\n-      if (!selectedTopicId) return;\r\n+  const fetchSubtopics = useCallback(async () => {\r\n+    if (!selectedTopicId) return;\r\n+    \r\n+    try {\r\n+      const subtopicsData = await contentService.fetchSubtopics(selectedTopicId);\r\n+\r\n+      const validSubtopics = subtopicsData.map((subtopic: any) => ({\r\n+        id: subtopic.id,\r\n+        title: subtopic.title,\r\n+        description: subtopic.description,\r\n+        topic_id: subtopic.topic_id,\r\n+        lessons: [],\r\n+        order_index: subtopicsData.length\r\n+      }));\r\n       \r\n-      try {\r\n-        const subtopicsData = await contentService.fetchSubtopics(selectedTopicId);\r\n-\r\n-        const validSubtopics = subtopicsData.map((subtopic: any) => ({\r\n-          id: subtopic.id,\r\n-          title: subtopic.title,\r\n-          description: subtopic.description,\r\n-          topic_id: subtopic.topic_id,\r\n-          lessons: [],\r\n-          order_index: subtopicsData.length\r\n-        }));\r\n-        \r\n-        setSubtopics(validSubtopics);\r\n-        \r\n-        if (selectedSubtopic) {\r\n-          setSelectedSubtopic(selectedSubtopic);\r\n-        }\r\n-      } catch (error) {\r\n-        console.error('Error fetching subtopics:', error);\r\n-        toast.error('Failed to fetch subtopics');\r\n+      setSubtopics(validSubtopics);\r\n+      \r\n+      if (selectedSubtopic) {\r\n+        setSelectedSubtopic(selectedSubtopic);\r\n       }\r\n-    };\r\n+    } catch (error) {\r\n+      console.error('Error fetching subtopics:', error);\r\n+      toast.error('Failed to fetch subtopics');\r\n+    }\r\n+  }, [selectedTopicId, selectedSubtopic, setSelectedSubtopic]);\r\n \r\n+  useEffect(() => {\r\n     fetchSubtopics();\r\n-  }, [selectedTopicId, selectedSubtopic, setSelectedSubtopic]);\r\n+  }, [fetchSubtopics]);\r\n \r\n   // Fetch Lessons\r\n-  useEffect(() => {\r\n-    const fetchLessons = async () => {\r\n-      if (!selectedSubtopicId) return;\r\n+  const fetchLessons = useCallback(async () => {\r\n+    if (!selectedSubtopicId) return;\r\n+    \r\n+    try {\r\n+      const { data, error } = await supabase\r\n+        .from('lessons')\r\n+        .select('*')\r\n+        .eq('subtopic_id', selectedSubtopicId)\r\n+        .order('title');\r\n+\r\n+      if (error) throw error;\r\n       \r\n-      try {\r\n-        const { data, error } = await supabase\r\n-          .from('lessons')\r\n-          .select('*')\r\n-          .eq('subtopic_id', selectedSubtopicId)\r\n-          .order('title');\r\n+      const validLessons = data.map((lesson: any) => ({\r\n+        ...lesson,\r\n+        _id: lesson._id || lesson.id,\r\n+        title: lesson.title || 'Untitled Lesson'\r\n+      })).filter((lesson: any) => lesson._id);\r\n+      \r\n+      setLessons(validLessons);\r\n+    } catch (error) {\r\n+      console.error('Error fetching lessons:', error);\r\n+      toast.error('Failed to fetch lessons');\r\n+    }\r\n+  }, [selectedSubtopicId]);\r\n \r\n-        if (error) throw error;\r\n-        \r\n-        const validLessons = data.map((lesson: any) => ({\r\n-          ...lesson,\r\n-          _id: lesson._id || lesson.id,\r\n-          title: lesson.title || 'Untitled Lesson'\r\n-        })).filter((lesson: any) => lesson._id);\r\n-        \r\n-        setLessons(validLessons);\r\n-      } catch (error) {\r\n-        console.error('Error fetching lessons:', error);\r\n-        toast.error('Failed to fetch lessons');\r\n-      }\r\n-    };\r\n-\r\n+  useEffect(() => {\r\n     fetchLessons();\r\n-  }, [selectedSubtopicId]);\r\n+  }, [fetchLessons]);\r\n \r\n   // Selection Handlers\r\n   const handleGradeSelect = useCallback((gradeId: string) => {\r\n     setSelectedGradeId(gradeId);\r\n@@ -178,8 +178,22 @@\n     setSelectedSubtopic(subtopicId);\r\n     setCurrentLessonId(null);\r\n   }, [setSelectedSubtopic]);\r\n \r\n+  // Refresh Content\r\n+  const refreshContent = useCallback(async () => {\r\n+    if (selectedGradeId) {\r\n+      await fetchGrades();\r\n+      if (selectedTopicId) {\r\n+        await fetchTopics();\r\n+        if (selectedSubtopicId) {\r\n+          await fetchSubtopics();\r\n+          await fetchLessons();\r\n+        }\r\n+      }\r\n+    }\r\n+  }, [selectedGradeId, selectedTopicId, selectedSubtopicId, fetchGrades, fetchTopics, fetchSubtopics, fetchLessons]);\r\n+\r\n   return {\r\n     // State\r\n     grades,\r\n     topics,\r\n@@ -197,6 +211,7 @@\n     setCurrentLessonId,\r\n     handleGradeSelect,\r\n     handleTopicSelect,\r\n     handleSubtopicSelect,\r\n+    refreshContent,\r\n   };\r\n }; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1740092095459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,12 +55,8 @@\n       toast.error('Failed to fetch grades');\r\n     }\r\n   }, []);\r\n \r\n-  useEffect(() => {\r\n-    fetchGrades();\r\n-  }, [fetchGrades]);\r\n-\r\n   // Fetch Topics\r\n   const fetchTopics = useCallback(async () => {\r\n     if (!selectedGradeId) return;\r\n     \r\n@@ -88,12 +84,8 @@\n       toast.error('Failed to fetch topics');\r\n     }\r\n   }, [selectedGradeId]);\r\n \r\n-  useEffect(() => {\r\n-    fetchTopics();\r\n-  }, [fetchTopics]);\r\n-\r\n   // Fetch Subtopics\r\n   const fetchSubtopics = useCallback(async () => {\r\n     if (!selectedTopicId) return;\r\n     \r\n@@ -119,12 +111,8 @@\n       toast.error('Failed to fetch subtopics');\r\n     }\r\n   }, [selectedTopicId, selectedSubtopic, setSelectedSubtopic]);\r\n \r\n-  useEffect(() => {\r\n-    fetchSubtopics();\r\n-  }, [fetchSubtopics]);\r\n-\r\n   // Fetch Lessons\r\n   const fetchLessons = useCallback(async () => {\r\n     if (!selectedSubtopicId) return;\r\n     \r\n@@ -150,8 +138,20 @@\n     }\r\n   }, [selectedSubtopicId]);\r\n \r\n   useEffect(() => {\r\n+    fetchGrades();\r\n+  }, [fetchGrades]);\r\n+\r\n+  useEffect(() => {\r\n+    fetchTopics();\r\n+  }, [fetchTopics]);\r\n+\r\n+  useEffect(() => {\r\n+    fetchSubtopics();\r\n+  }, [fetchSubtopics]);\r\n+\r\n+  useEffect(() => {\r\n     fetchLessons();\r\n   }, [fetchLessons]);\r\n \r\n   // Selection Handlers\r\n@@ -212,6 +212,12 @@\n     handleGradeSelect,\r\n     handleTopicSelect,\r\n     handleSubtopicSelect,\r\n     refreshContent,\r\n+\r\n+    // Fetch Functions\r\n+    fetchGrades,\r\n+    fetchTopics,\r\n+    fetchSubtopics,\r\n+    fetchLessons\r\n   };\r\n }; \n\\ No newline at end of file\n"
                }
            ],
            "date": 1740085611487,
            "name": "Commit-0",
            "content": " "
        }
    ]
}