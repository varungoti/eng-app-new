{
    "sourceFile": "src/features/content-management/hooks/useLessonEditor.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1740085639625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740086900777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,122 +1,116 @@\n-import { useState, useCallback } from 'react';\r\n+import { useState, useCallback, useEffect, useRef } from 'react';\r\n import { supabase } from '@/lib/supabase';\r\n import { toast } from 'sonner';\r\n import { Lesson, Question, Activity } from '../api/types';\r\n \r\n-export const useLessonEditor = (lessonId: string | null) => {\r\n-  // State\r\n-  const [lessonTitle, setLessonTitle] = useState('');\r\n-  const [contentHeading, setContentHeading] = useState('');\r\n-  const [lessonContent, setLessonContent] = useState('');\r\n-  const [questions, setQuestions] = useState<Question[]>([]);\r\n-  const [activities, setActivities] = useState<Activity[]>([]);\r\n-  const [isSaving, setIsSaving] = useState(false);\r\n-  const [saveProgress, setSaveProgress] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');\r\n+export type SaveProgress = 'idle' | 'saving' | 'saved' | 'error';\r\n \r\n-  // Load lesson data\r\n-  const loadLessonData = useCallback(async () => {\r\n-    if (!lessonId) return;\r\n+export const useLessonEditor = (currentLessonId: string | null) => {\r\n+  // Editor State\r\n+  const [lessonTitle, setLessonTitle] = useState<string>('');\r\n+  const [contentHeading, setContentHeading] = useState<string>('');\r\n+  const [lessonContent, setLessonContent] = useState<string>('');\r\n+  const [isContentEditorOpen, setIsContentEditorOpen] = useState(false);\r\n+  const [isEditingTitle, setIsEditingTitle] = useState(false);\r\n+  const [isEditingHeading, setIsEditingHeading] = useState(false);\r\n+  const [saveProgress, setSaveProgress] = useState<SaveProgress>('idle');\r\n+  const isLoading = useRef(false);\r\n \r\n-    try {\r\n-      // Fetch lesson data\r\n-      const { data: lessonData, error: lessonError } = await supabase\r\n-        .from('lessons')\r\n-        .select('*')\r\n-        .eq('id', lessonId)\r\n-        .single();\r\n+  // Load lesson content when currentLessonId changes\r\n+  useEffect(() => {\r\n+    const loadContent = async () => {\r\n+      if (!currentLessonId || isLoading.current) return;\r\n+      isLoading.current = true;\r\n \r\n-      if (lessonError) throw lessonError;\r\n+      try {\r\n+        // Clear existing content first\r\n+        setLessonTitle('');\r\n+        setContentHeading('');\r\n+        setLessonContent('');\r\n+        \r\n+        // Fetch lesson data\r\n+        const { data: lessonData, error: lessonError } = await supabase\r\n+          .from('lessons')\r\n+          .select('*')\r\n+          .eq('id', currentLessonId)\r\n+          .single();\r\n \r\n-      // Set lesson data\r\n-      setLessonTitle(lessonData.title || '');\r\n-      setContentHeading(lessonData.content || '');\r\n+        if (lessonError) throw lessonError;\r\n \r\n-      // Fetch lesson content\r\n-      const { data: contentData, error: contentError } = await supabase\r\n-        .from('lesson_content')\r\n-        .select('*')\r\n-        .eq('lesson_id', lessonId)\r\n-        .order('updated_at', { ascending: false })\r\n-        .limit(1)\r\n-        .maybeSingle();\r\n+        // Set lesson data\r\n+        setLessonTitle(lessonData.title || '');\r\n+        setContentHeading(lessonData.contentheading || '');\r\n \r\n-      if (contentError) throw contentError;\r\n+        // Fetch lesson content\r\n+        const { data: contentData, error: contentError } = await supabase\r\n+          .from('lesson_content')\r\n+          .select('*')\r\n+          .eq('lesson_id', currentLessonId)\r\n+          .order('updated_at', { ascending: false })\r\n+          .limit(1)\r\n+          .maybeSingle();\r\n \r\n-      // Set content if available\r\n-      if (contentData?.content) {\r\n-        setLessonContent(\r\n-          typeof contentData.content === 'string'\r\n-            ? contentData.content\r\n-            : JSON.stringify(contentData.content)\r\n-        );\r\n-      }\r\n+        if (contentError) throw contentError;\r\n \r\n-      // Fetch questions with exercise prompts\r\n-      const { data: questionsData, error: questionsError } = await supabase\r\n-        .from('questions')\r\n-        .select(`\r\n-          *,\r\n-          exercise_prompts (*)\r\n-        `)\r\n-        .eq('lesson_id', lessonId);\r\n+        // Set content if available\r\n+        if (contentData?.content) {\r\n+          setLessonContent(\r\n+            Array.isArray(contentData.content) \r\n+              ? contentData.content[0] \r\n+              : typeof contentData.content === 'string'\r\n+                ? contentData.content\r\n+                : JSON.stringify(contentData.content)\r\n+          );\r\n+        }\r\n \r\n-      if (questionsError) throw questionsError;\r\n+      } catch (error) {\r\n+        console.error('Error loading lesson:', error);\r\n+        toast.error('Failed to load lesson content');\r\n+      } finally {\r\n+        isLoading.current = false;\r\n+      }\r\n+    };\r\n \r\n-      // Format questions\r\n-      const formattedQuestions = questionsData?.map(q => ({\r\n-        ...q,\r\n-        data: q.data || {},\r\n-        exercisePrompts: q.exercise_prompts || []\r\n-      })) || [];\r\n+    loadContent();\r\n \r\n-      setQuestions(formattedQuestions);\r\n+    // Cleanup function\r\n+    return () => {\r\n+      isLoading.current = false;\r\n+    };\r\n+  }, [currentLessonId]);\r\n \r\n-      // Fetch activities\r\n-      const { data: activitiesData, error: activitiesError } = await supabase\r\n-        .from('activities')\r\n-        .select('*')\r\n-        .eq('lesson_id', lessonId);\r\n-\r\n-      if (activitiesError) throw activitiesError;\r\n-\r\n-      setActivities(activitiesData || []);\r\n-\r\n-    } catch (error) {\r\n-      console.error('Error loading lesson:', error);\r\n-      toast.error('Failed to load lesson content');\r\n-    }\r\n-  }, [lessonId]);\r\n-\r\n-  // Save lesson\r\n+  // Save lesson content\r\n   const saveLesson = useCallback(async () => {\r\n-    if (!lessonId) {\r\n+    if (!currentLessonId) {\r\n       toast.error('No lesson selected');\r\n       return;\r\n     }\r\n \r\n+    setSaveProgress('saving');\r\n+\r\n     try {\r\n-      setIsSaving(true);\r\n-      setSaveProgress('saving');\r\n-\r\n-      const { data: { session } } = await supabase.auth.getSession();\r\n+      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\r\n+      if (sessionError) throw sessionError;\r\n+      \r\n       if (!session?.user) {\r\n         toast.error('Please sign in to save lesson');\r\n+        setSaveProgress('error');\r\n         return;\r\n       }\r\n \r\n-      // Save lesson data\r\n+      // Save lesson metadata\r\n       const lessonData = {\r\n-        id: lessonId,\r\n+        id: currentLessonId,\r\n         title: lessonTitle,\r\n-        content: lessonContent,\r\n+        contentheading: contentHeading,\r\n+        updated_at: new Date().toISOString(),\r\n+        user_id: session.user.id,\r\n         metadata: {\r\n           lastEdited: new Date().toISOString(),\r\n           version: 1,\r\n           status: 'draft'\r\n-        },\r\n-        updated_at: new Date().toISOString(),\r\n-        user_id: session.user.id\r\n+        }\r\n       };\r\n \r\n       const { error: lessonError } = await supabase\r\n         .from('lessons')\r\n@@ -124,14 +118,23 @@\n \r\n       if (lessonError) throw lessonError;\r\n \r\n       // Save lesson content\r\n+      const { data: existingContent } = await supabase\r\n+        .from('lesson_content')\r\n+        .select('id')\r\n+        .eq('lesson_id', currentLessonId)\r\n+        .single();\r\n+\r\n       const contentData = {\r\n-        lesson_id: lessonId,\r\n+        id: existingContent?.id || crypto.randomUUID(),\r\n+        lesson_id: currentLessonId,\r\n         content: [lessonContent],\r\n         content_type: 'html',\r\n         metadata: {\r\n-          heading: contentHeading\r\n+          lastEdited: new Date().toISOString(),\r\n+          version: 1,\r\n+          status: 'draft'\r\n         },\r\n         user_id: session.user.id,\r\n         updated_at: new Date().toISOString()\r\n       };\r\n@@ -143,33 +146,84 @@\n       if (contentError) throw contentError;\r\n \r\n       setSaveProgress('saved');\r\n       toast.success('Lesson saved successfully');\r\n+\r\n+      // Reset save status after a delay\r\n+      setTimeout(() => {\r\n+        setSaveProgress('idle');\r\n+      }, 2000);\r\n+\r\n     } catch (error) {\r\n       console.error('Error saving lesson:', error);\r\n       setSaveProgress('error');\r\n       toast.error('Failed to save lesson');\r\n+    }\r\n+  }, [currentLessonId, lessonTitle, contentHeading, lessonContent]);\r\n+\r\n+  // Load lesson content (for refresh)\r\n+  const loadLessonContent = useCallback(async (lessonId: string) => {\r\n+    if (!lessonId || isLoading.current) return;\r\n+    isLoading.current = true;\r\n+\r\n+    try {\r\n+      const { data: lessonData, error: lessonError } = await supabase\r\n+        .from('lessons')\r\n+        .select('*')\r\n+        .eq('id', lessonId)\r\n+        .single();\r\n+\r\n+      if (lessonError) throw lessonError;\r\n+\r\n+      setLessonTitle(lessonData.title || '');\r\n+      setContentHeading(lessonData.contentheading || '');\r\n+\r\n+      const { data: contentData, error: contentError } = await supabase\r\n+        .from('lesson_content')\r\n+        .select('*')\r\n+        .eq('lesson_id', lessonId)\r\n+        .order('updated_at', { ascending: false })\r\n+        .limit(1)\r\n+        .maybeSingle();\r\n+\r\n+      if (contentError) throw contentError;\r\n+\r\n+      if (contentData?.content) {\r\n+        setLessonContent(\r\n+          Array.isArray(contentData.content)\r\n+            ? contentData.content[0]\r\n+            : typeof contentData.content === 'string'\r\n+              ? contentData.content\r\n+              : JSON.stringify(contentData.content)\r\n+        );\r\n+      }\r\n+\r\n+      toast.success('Content refreshed');\r\n+    } catch (error) {\r\n+      console.error('Error refreshing lesson:', error);\r\n+      toast.error('Failed to refresh content');\r\n     } finally {\r\n-      setIsSaving(false);\r\n+      isLoading.current = false;\r\n     }\r\n-  }, [lessonId, lessonTitle, lessonContent, contentHeading]);\r\n+  }, []);\r\n \r\n   return {\r\n     // State\r\n     lessonTitle,\r\n     contentHeading,\r\n     lessonContent,\r\n-    questions,\r\n-    activities,\r\n-    isSaving,\r\n+    isContentEditorOpen,\r\n+    isEditingTitle,\r\n+    isEditingHeading,\r\n     saveProgress,\r\n \r\n     // Actions\r\n     setLessonTitle,\r\n     setContentHeading,\r\n     setLessonContent,\r\n-    setQuestions,\r\n-    setActivities,\r\n-    loadLessonData,\r\n-    saveLesson\r\n+    setIsContentEditorOpen,\r\n+    setIsEditingTitle,\r\n+    setIsEditingHeading,\r\n+    loadLessonContent,\r\n+    saveLesson,\r\n   };\r\n }; \n\\ No newline at end of file\n"
                }
            ],
            "date": 1740085639625,
            "name": "Commit-0",
            "content": "import { useState, useCallback } from 'react';\r\nimport { supabase } from '@/lib/supabase';\r\nimport { toast } from 'sonner';\r\nimport { Lesson, Question, Activity } from '../api/types';\r\n\r\nexport const useLessonEditor = (lessonId: string | null) => {\r\n  // State\r\n  const [lessonTitle, setLessonTitle] = useState('');\r\n  const [contentHeading, setContentHeading] = useState('');\r\n  const [lessonContent, setLessonContent] = useState('');\r\n  const [questions, setQuestions] = useState<Question[]>([]);\r\n  const [activities, setActivities] = useState<Activity[]>([]);\r\n  const [isSaving, setIsSaving] = useState(false);\r\n  const [saveProgress, setSaveProgress] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');\r\n\r\n  // Load lesson data\r\n  const loadLessonData = useCallback(async () => {\r\n    if (!lessonId) return;\r\n\r\n    try {\r\n      // Fetch lesson data\r\n      const { data: lessonData, error: lessonError } = await supabase\r\n        .from('lessons')\r\n        .select('*')\r\n        .eq('id', lessonId)\r\n        .single();\r\n\r\n      if (lessonError) throw lessonError;\r\n\r\n      // Set lesson data\r\n      setLessonTitle(lessonData.title || '');\r\n      setContentHeading(lessonData.content || '');\r\n\r\n      // Fetch lesson content\r\n      const { data: contentData, error: contentError } = await supabase\r\n        .from('lesson_content')\r\n        .select('*')\r\n        .eq('lesson_id', lessonId)\r\n        .order('updated_at', { ascending: false })\r\n        .limit(1)\r\n        .maybeSingle();\r\n\r\n      if (contentError) throw contentError;\r\n\r\n      // Set content if available\r\n      if (contentData?.content) {\r\n        setLessonContent(\r\n          typeof contentData.content === 'string'\r\n            ? contentData.content\r\n            : JSON.stringify(contentData.content)\r\n        );\r\n      }\r\n\r\n      // Fetch questions with exercise prompts\r\n      const { data: questionsData, error: questionsError } = await supabase\r\n        .from('questions')\r\n        .select(`\r\n          *,\r\n          exercise_prompts (*)\r\n        `)\r\n        .eq('lesson_id', lessonId);\r\n\r\n      if (questionsError) throw questionsError;\r\n\r\n      // Format questions\r\n      const formattedQuestions = questionsData?.map(q => ({\r\n        ...q,\r\n        data: q.data || {},\r\n        exercisePrompts: q.exercise_prompts || []\r\n      })) || [];\r\n\r\n      setQuestions(formattedQuestions);\r\n\r\n      // Fetch activities\r\n      const { data: activitiesData, error: activitiesError } = await supabase\r\n        .from('activities')\r\n        .select('*')\r\n        .eq('lesson_id', lessonId);\r\n\r\n      if (activitiesError) throw activitiesError;\r\n\r\n      setActivities(activitiesData || []);\r\n\r\n    } catch (error) {\r\n      console.error('Error loading lesson:', error);\r\n      toast.error('Failed to load lesson content');\r\n    }\r\n  }, [lessonId]);\r\n\r\n  // Save lesson\r\n  const saveLesson = useCallback(async () => {\r\n    if (!lessonId) {\r\n      toast.error('No lesson selected');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsSaving(true);\r\n      setSaveProgress('saving');\r\n\r\n      const { data: { session } } = await supabase.auth.getSession();\r\n      if (!session?.user) {\r\n        toast.error('Please sign in to save lesson');\r\n        return;\r\n      }\r\n\r\n      // Save lesson data\r\n      const lessonData = {\r\n        id: lessonId,\r\n        title: lessonTitle,\r\n        content: lessonContent,\r\n        metadata: {\r\n          lastEdited: new Date().toISOString(),\r\n          version: 1,\r\n          status: 'draft'\r\n        },\r\n        updated_at: new Date().toISOString(),\r\n        user_id: session.user.id\r\n      };\r\n\r\n      const { error: lessonError } = await supabase\r\n        .from('lessons')\r\n        .upsert(lessonData);\r\n\r\n      if (lessonError) throw lessonError;\r\n\r\n      // Save lesson content\r\n      const contentData = {\r\n        lesson_id: lessonId,\r\n        content: [lessonContent],\r\n        content_type: 'html',\r\n        metadata: {\r\n          heading: contentHeading\r\n        },\r\n        user_id: session.user.id,\r\n        updated_at: new Date().toISOString()\r\n      };\r\n\r\n      const { error: contentError } = await supabase\r\n        .from('lesson_content')\r\n        .upsert(contentData);\r\n\r\n      if (contentError) throw contentError;\r\n\r\n      setSaveProgress('saved');\r\n      toast.success('Lesson saved successfully');\r\n    } catch (error) {\r\n      console.error('Error saving lesson:', error);\r\n      setSaveProgress('error');\r\n      toast.error('Failed to save lesson');\r\n    } finally {\r\n      setIsSaving(false);\r\n    }\r\n  }, [lessonId, lessonTitle, lessonContent, contentHeading]);\r\n\r\n  return {\r\n    // State\r\n    lessonTitle,\r\n    contentHeading,\r\n    lessonContent,\r\n    questions,\r\n    activities,\r\n    isSaving,\r\n    saveProgress,\r\n\r\n    // Actions\r\n    setLessonTitle,\r\n    setContentHeading,\r\n    setLessonContent,\r\n    setQuestions,\r\n    setActivities,\r\n    loadLessonData,\r\n    saveLesson\r\n  };\r\n}; "
        }
    ]
}