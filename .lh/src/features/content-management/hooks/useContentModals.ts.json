{
    "sourceFile": "src/features/content-management/hooks/useContentModals.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1740087513162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1740087513162,
            "name": "Commit-0",
            "content": "import { useState, useCallback } from 'react';\r\nimport { toast } from 'sonner';\r\nimport { supabase } from '@/lib/supabase';\r\nimport { contentService } from '@/lib/content/ContentService';\r\n\r\ninterface ModalState {\r\n  addGrade: boolean;\r\n  addTopic: boolean;\r\n  addSubtopic: boolean;\r\n  addLesson: boolean;\r\n}\r\n\r\ninterface UseContentModalsProps {\r\n  selectedGradeId: string | null;\r\n  selectedTopicId: string | null;\r\n  selectedSubtopicId: string | null;\r\n  onSuccess?: () => void;\r\n}\r\n\r\nexport const useContentModals = ({\r\n  selectedGradeId,\r\n  selectedTopicId,\r\n  selectedSubtopicId,\r\n  onSuccess\r\n}: UseContentModalsProps) => {\r\n  const [modalState, setModalState] = useState<ModalState>({\r\n    addGrade: false,\r\n    addTopic: false,\r\n    addSubtopic: false,\r\n    addLesson: false\r\n  });\r\n\r\n  const openModal = useCallback((modalKey: keyof ModalState) => {\r\n    setModalState(prev => ({ ...prev, [modalKey]: true }));\r\n  }, []);\r\n\r\n  const closeModal = useCallback((modalKey: keyof ModalState) => {\r\n    setModalState(prev => ({ ...prev, [modalKey]: false }));\r\n  }, []);\r\n\r\n  const handleCreateGrade = useCallback(async (data: { title: string; description?: string }) => {\r\n    try {\r\n      const { data: { session } } = await supabase.auth.getSession();\r\n      if (!session?.user) {\r\n        toast.error('Please sign in to create a grade');\r\n        return;\r\n      }\r\n\r\n      const { data: grade, error } = await supabase\r\n        .from('grades')\r\n        .insert({\r\n          name: data.title,\r\n          level: 0, // Default level\r\n          order_index: 0, // Default order\r\n          user_id: session.user.id,\r\n          created_at: new Date().toISOString()\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n\r\n      toast.success('Grade created successfully');\r\n      onSuccess?.();\r\n    } catch (error) {\r\n      console.error('Error creating grade:', error);\r\n      toast.error('Failed to create grade');\r\n    }\r\n  }, [onSuccess]);\r\n\r\n  const handleCreateTopic = useCallback(async (data: { title: string; description?: string }) => {\r\n    if (!selectedGradeId) {\r\n      toast.error('Please select a grade first');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const { data: { session } } = await supabase.auth.getSession();\r\n      if (!session?.user) {\r\n        toast.error('Please sign in to create a topic');\r\n        return;\r\n      }\r\n\r\n      const { data: topic, error } = await supabase\r\n        .from('topics')\r\n        .insert({\r\n          title: data.title,\r\n          description: data.description,\r\n          grade_id: selectedGradeId,\r\n          user_id: session.user.id,\r\n          created_at: new Date().toISOString()\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n\r\n      toast.success('Topic created successfully');\r\n      onSuccess?.();\r\n    } catch (error) {\r\n      console.error('Error creating topic:', error);\r\n      toast.error('Failed to create topic');\r\n    }\r\n  }, [selectedGradeId, onSuccess]);\r\n\r\n  const handleCreateSubtopic = useCallback(async (data: { title: string; description?: string }) => {\r\n    if (!selectedTopicId) {\r\n      toast.error('Please select a topic first');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const newSubtopic = await contentService.createSubtopic({\r\n        title: data.title,\r\n        description: data.description,\r\n        topicId: selectedTopicId\r\n      });\r\n\r\n      toast.success('Subtopic created successfully');\r\n      onSuccess?.();\r\n      return newSubtopic;\r\n    } catch (error) {\r\n      console.error('Error creating subtopic:', error);\r\n      toast.error('Failed to create subtopic');\r\n    }\r\n  }, [selectedTopicId, onSuccess]);\r\n\r\n  const handleCreateLesson = useCallback(async (data: { title: string; description?: string }) => {\r\n    if (!selectedSubtopicId) {\r\n      toast.error('Please select a subtopic first');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const { data: { session } } = await supabase.auth.getSession();\r\n      if (!session?.user) {\r\n        toast.error('Please sign in to create a lesson');\r\n        return;\r\n      }\r\n\r\n      // Create the lesson\r\n      const { data: lesson, error: lessonError } = await supabase\r\n        .from('lessons')\r\n        .insert({\r\n          title: data.title,\r\n          description: data.description,\r\n          subtopic_id: selectedSubtopicId,\r\n          status: 'draft',\r\n          user_id: session.user.id,\r\n          created_at: new Date().toISOString()\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (lessonError) throw lessonError;\r\n\r\n      // Create initial lesson content\r\n      const { error: contentError } = await supabase\r\n        .from('lesson_content')\r\n        .insert({\r\n          lesson_id: lesson.id,\r\n          content: [],\r\n          content_type: 'html',\r\n          metadata: {\r\n            version: 1,\r\n            status: 'draft'\r\n          },\r\n          user_id: session.user.id,\r\n          created_at: new Date().toISOString()\r\n        });\r\n\r\n      if (contentError) throw contentError;\r\n\r\n      toast.success('Lesson created successfully');\r\n      onSuccess?.();\r\n      return lesson;\r\n    } catch (error) {\r\n      console.error('Error creating lesson:', error);\r\n      toast.error('Failed to create lesson');\r\n    }\r\n  }, [selectedSubtopicId, onSuccess]);\r\n\r\n  return {\r\n    modalState,\r\n    openModal,\r\n    closeModal,\r\n    handlers: {\r\n      grade: handleCreateGrade,\r\n      topic: handleCreateTopic,\r\n      subtopic: handleCreateSubtopic,\r\n      lesson: handleCreateLesson\r\n    }\r\n  };\r\n}; "
        }
    ]
}