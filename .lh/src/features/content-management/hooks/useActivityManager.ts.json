{
    "sourceFile": "src/features/content-management/hooks/useActivityManager.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1740087741024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1740087741024,
            "name": "Commit-0",
            "content": "import { useState, useCallback, useEffect } from 'react';\r\nimport { supabase } from '@/lib/supabase';\r\nimport { toast } from 'sonner';\r\nimport { Activity } from '../api/types';\r\n\r\ninterface SaveStatus {\r\n  id: string;\r\n  status: 'draft' | 'saved' | 'saving' | 'error';\r\n  lastSaved?: string;\r\n}\r\n\r\nexport const useActivityManager = (currentLessonId: string | null) => {\r\n  // State\r\n  const [activities, setActivities] = useState<Activity[]>([]);\r\n  const [activitySaveStatuses, setActivitySaveStatuses] = useState<SaveStatus[]>([]);\r\n  const [expandedActivity, setExpandedActivity] = useState<number | null>(null);\r\n\r\n  // Fetch activities when lesson changes\r\n  useEffect(() => {\r\n    const fetchActivities = async () => {\r\n      if (!currentLessonId) return;\r\n\r\n      try {\r\n        const { data, error } = await supabase\r\n          .from('activities')\r\n          .select('*')\r\n          .eq('lesson_id', currentLessonId)\r\n          .order('created_at');\r\n\r\n        if (error) throw error;\r\n\r\n        setActivities(data || []);\r\n        setActivitySaveStatuses(\r\n          (data || []).map(activity => ({\r\n            id: activity.id,\r\n            status: 'saved'\r\n          }))\r\n        );\r\n      } catch (error) {\r\n        console.error('Error fetching activities:', error);\r\n        toast.error('Failed to fetch activities');\r\n      }\r\n    };\r\n\r\n    fetchActivities();\r\n  }, [currentLessonId]);\r\n\r\n  // Add activity\r\n  const addActivity = useCallback(async () => {\r\n    if (!currentLessonId) {\r\n      toast.error('Please select a lesson first');\r\n      return;\r\n    }\r\n\r\n    const { data: { session } } = await supabase.auth.getSession();\r\n    if (!session?.user) {\r\n      toast.error('Please sign in to add activities');\r\n      return;\r\n    }\r\n\r\n    const newActivity: Activity = {\r\n      id: crypto.randomUUID(),\r\n      lesson_id: currentLessonId,\r\n      type: 'practice',\r\n      title: 'New Activity',\r\n      name: '',\r\n      instructions: '',\r\n      media: [],\r\n      data: {\r\n        prompt: '',\r\n        teacher_script: '',\r\n        media: []\r\n      },\r\n      created_at: new Date().toISOString()\r\n    };\r\n\r\n    setActivities(prev => [...prev, newActivity]);\r\n    setActivitySaveStatuses(prev => [\r\n      ...prev,\r\n      { id: newActivity.id, status: 'draft' }\r\n    ]);\r\n    setExpandedActivity(activities.length); // Expand the new activity\r\n  }, [currentLessonId, activities.length]);\r\n\r\n  // Update activity\r\n  const updateActivity = useCallback((index: number, updatedActivity: Activity) => {\r\n    setActivities(prev => {\r\n      const newActivities = [...prev];\r\n      newActivities[index] = updatedActivity;\r\n      return newActivities;\r\n    });\r\n\r\n    setActivitySaveStatuses(prev => prev.map(status => \r\n      status.id === updatedActivity.id \r\n        ? { ...status, status: 'draft' } \r\n        : status\r\n    ));\r\n  }, []);\r\n\r\n  // Remove activity\r\n  const removeActivity = useCallback(async (index: number) => {\r\n    try {\r\n      const activityToDelete = activities[index];\r\n\r\n      const { error } = await supabase\r\n        .from('activities')\r\n        .delete()\r\n        .eq('id', activityToDelete.id);\r\n\r\n      if (error) throw error;\r\n\r\n      setActivities(prev => prev.filter((_, i) => i !== index));\r\n      setActivitySaveStatuses(prev => \r\n        prev.filter(status => status.id !== activityToDelete.id)\r\n      );\r\n      \r\n      toast.success('Activity deleted successfully');\r\n    } catch (error) {\r\n      console.error('Error deleting activity:', error);\r\n      toast.error('Failed to delete activity');\r\n    }\r\n  }, [activities]);\r\n\r\n  // Save activity\r\n  const saveActivity = useCallback(async (activity: Activity, index: number) => {\r\n    if (!currentLessonId) {\r\n      toast.error('Please select a lesson first');\r\n      return;\r\n    }\r\n\r\n    const loadingToast = toast.loading(`Saving activity ${index + 1}...`);\r\n    \r\n    try {\r\n      const { data: { session } } = await supabase.auth.getSession();\r\n      if (!session?.user) {\r\n        toast.error('Please sign in to save activity', { id: loadingToast });\r\n        return;\r\n      }\r\n\r\n      // Update status to saving\r\n      setActivitySaveStatuses(prev => prev.map(status =>\r\n        status.id === activity.id\r\n          ? { ...status, status: 'saving' }\r\n          : status\r\n      ));\r\n\r\n      // Save activity\r\n      const { error } = await supabase\r\n        .from('activities')\r\n        .upsert({\r\n          ...activity,\r\n          user_id: session.user.id,\r\n          updated_at: new Date().toISOString()\r\n        });\r\n\r\n      if (error) throw error;\r\n\r\n      // Update status to saved\r\n      setActivitySaveStatuses(prev => prev.map(status =>\r\n        status.id === activity.id\r\n          ? { ...status, status: 'saved', lastSaved: new Date().toISOString() }\r\n          : status\r\n      ));\r\n\r\n      toast.success(`Activity ${index + 1} saved successfully`, { id: loadingToast });\r\n    } catch (error) {\r\n      console.error('Error saving activity:', error);\r\n      setActivitySaveStatuses(prev => prev.map(status =>\r\n        status.id === activity.id\r\n          ? { ...status, status: 'error' }\r\n          : status\r\n      ));\r\n      toast.error(`Failed to save activity ${index + 1}`, { id: loadingToast });\r\n    }\r\n  }, [currentLessonId]);\r\n\r\n  return {\r\n    // State\r\n    activities,\r\n    activitySaveStatuses,\r\n    expandedActivity,\r\n\r\n    // Actions\r\n    setActivities,\r\n    setExpandedActivity,\r\n    addActivity,\r\n    updateActivity,\r\n    removeActivity,\r\n    saveActivity,\r\n  };\r\n}; "
        }
    ]
}