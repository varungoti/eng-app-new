{
    "sourceFile": "src/db/seed/sales.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746702367629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746702367629,
            "name": "Commit-0",
            "content": "import { faker } from '@faker-js/faker';\r\nimport { SupabaseClient } from '@supabase/supabase-js';\r\n\r\ninterface SalesLead {\r\n  id: string;\r\n  company_name: string;\r\n  contact_name: string;\r\n  email: string;\r\n  phone: string;\r\n  status: 'new' | 'contacted' | 'qualified' | 'proposal' | 'negotiation' | 'closed' | 'lost';\r\n  source: string;\r\n  assigned_to: string | null;\r\n  estimated_value: number;\r\n  probability: number;\r\n  expected_close_date: string;\r\n  notes: string;\r\n  schoolname: string;\r\n  location: string;\r\n  branch: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\ninterface SalesActivity {\r\n  id: string;\r\n  lead_id: string;\r\n  type: 'call' | 'email' | 'meeting' | 'proposal' | 'follow_up';\r\n  subject: string;\r\n  description: string;\r\n  status: 'planned' | 'completed' | 'cancelled';\r\n  due_date: string;\r\n  completed_at: string | null;\r\n  performed_by: string | null;\r\n  created_at: string;\r\n}\r\n\r\ninterface SalesOpportunity {\r\n  id: string;\r\n  lead_id: string;\r\n  name: string;\r\n  stage: 'discovery' | 'qualification' | 'proposal' | 'negotiation' | 'closed_won' | 'closed_lost';\r\n  amount: number;\r\n  close_date: string;\r\n  probability: number;\r\n  next_step: string;\r\n  competition: string;\r\n  notes: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\ninterface SalesContact {\r\n  id: string;\r\n  lead_id: string;\r\n  name: string;\r\n  title: string;\r\n  email: string;\r\n  phone: string;\r\n  is_primary: boolean;\r\n  department: string;\r\n  notes: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport async function seedSales(supabase: SupabaseClient): Promise<{\r\n  leads: SalesLead[];\r\n  activities: SalesActivity[];\r\n  opportunities: SalesOpportunity[];\r\n  contacts: SalesContact[];\r\n}> {\r\n  try {\r\n    // Create sales leads\r\n    const leads: Omit<SalesLead, 'id'>[] = [];\r\n    const leadCount = 20;\r\n    const sources = ['website', 'referral', 'cold_call', 'event', 'social_media'];\r\n    const statuses: SalesLead['status'][] = [\r\n      'new',\r\n      'contacted',\r\n      'qualified',\r\n      'proposal',\r\n      'negotiation',\r\n      'closed',\r\n      'lost'\r\n    ];\r\n\r\n    for (let i = 0; i < leadCount; i++) {\r\n      const companyName = faker.company.name();\r\n      leads.push({\r\n        company_name: companyName,\r\n        contact_name: faker.person.fullName(),\r\n        email: faker.internet.email(),\r\n        phone: faker.phone.number(),\r\n        status: faker.helpers.arrayElement(statuses),\r\n        source: faker.helpers.arrayElement(sources),\r\n        assigned_to: null,\r\n        estimated_value: faker.number.int({ min: 1000, max: 100000 }),\r\n        probability: faker.number.int({ min: 0, max: 100 }),\r\n        expected_close_date: faker.date.future().toISOString().split('T')[0],\r\n        notes: faker.lorem.paragraph(),\r\n        schoolname: companyName,\r\n        location: faker.location.city(),\r\n        branch: faker.helpers.maybe(() => faker.location.streetAddress()),\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString()\r\n      });\r\n    }\r\n\r\n    // Insert leads\r\n    const { data: insertedLeads, error: leadError } = await supabase\r\n      .from('sales_leads')\r\n      .insert(leads)\r\n      .select();\r\n\r\n    if (leadError) {\r\n      throw new Error(`Failed to insert sales leads: ${leadError.message}`);\r\n    }\r\n\r\n    if (!insertedLeads) {\r\n      throw new Error('No sales leads were inserted');\r\n    }\r\n\r\n    // Create sales activities\r\n    const activities: Omit<SalesActivity, 'id'>[] = [];\r\n    const activityTypes: SalesActivity['type'][] = ['call', 'email', 'meeting', 'proposal', 'follow_up'];\r\n    const activityStatuses: SalesActivity['status'][] = ['planned', 'completed', 'cancelled'];\r\n\r\n    insertedLeads.forEach(lead => {\r\n      const activityCount = faker.number.int({ min: 1, max: 5 });\r\n      \r\n      for (let i = 0; i < activityCount; i++) {\r\n        const status = faker.helpers.arrayElement(activityStatuses);\r\n        activities.push({\r\n          lead_id: lead.id,\r\n          type: faker.helpers.arrayElement(activityTypes),\r\n          subject: faker.lorem.sentence(),\r\n          description: faker.lorem.paragraph(),\r\n          status,\r\n          due_date: faker.date.future().toISOString(),\r\n          completed_at: status === 'completed' ? faker.date.past().toISOString() : null,\r\n          performed_by: null,\r\n          created_at: new Date().toISOString()\r\n        });\r\n      }\r\n    });\r\n\r\n    // Insert activities\r\n    const { data: insertedActivities, error: activityError } = await supabase\r\n      .from('sales_activities')\r\n      .insert(activities)\r\n      .select();\r\n\r\n    if (activityError) {\r\n      throw new Error(`Failed to insert sales activities: ${activityError.message}`);\r\n    }\r\n\r\n    // Create sales opportunities\r\n    const opportunities: Omit<SalesOpportunity, 'id'>[] = [];\r\n    const stages: SalesOpportunity['stage'][] = [\r\n      'discovery',\r\n      'qualification',\r\n      'proposal',\r\n      'negotiation',\r\n      'closed_won',\r\n      'closed_lost'\r\n    ];\r\n\r\n    insertedLeads.forEach(lead => {\r\n      const opportunityCount = faker.number.int({ min: 0, max: 2 });\r\n      \r\n      for (let i = 0; i < opportunityCount; i++) {\r\n        opportunities.push({\r\n          lead_id: lead.id,\r\n          name: faker.lorem.sentence(),\r\n          stage: faker.helpers.arrayElement(stages),\r\n          amount: faker.number.int({ min: 5000, max: 50000 }),\r\n          close_date: faker.date.future().toISOString().split('T')[0],\r\n          probability: faker.number.int({ min: 0, max: 100 }),\r\n          next_step: faker.lorem.sentence(),\r\n          competition: faker.company.name(),\r\n          notes: faker.lorem.paragraph(),\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString()\r\n        });\r\n      }\r\n    });\r\n\r\n    // Insert opportunities\r\n    const { data: insertedOpportunities, error: opportunityError } = await supabase\r\n      .from('sales_opportunities')\r\n      .insert(opportunities)\r\n      .select();\r\n\r\n    if (opportunityError) {\r\n      throw new Error(`Failed to insert sales opportunities: ${opportunityError.message}`);\r\n    }\r\n\r\n    // Create sales contacts\r\n    const contacts: Omit<SalesContact, 'id'>[] = [];\r\n    const departments = ['Administration', 'Academic', 'Finance', 'IT', 'HR'];\r\n\r\n    insertedLeads.forEach(lead => {\r\n      const contactCount = faker.number.int({ min: 1, max: 3 });\r\n      \r\n      for (let i = 0; i < contactCount; i++) {\r\n        contacts.push({\r\n          lead_id: lead.id,\r\n          name: faker.person.fullName(),\r\n          title: faker.person.jobTitle(),\r\n          email: faker.internet.email(),\r\n          phone: faker.phone.number(),\r\n          is_primary: i === 0,\r\n          department: faker.helpers.arrayElement(departments),\r\n          notes: faker.lorem.paragraph(),\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString()\r\n        });\r\n      }\r\n    });\r\n\r\n    // Insert contacts\r\n    const { data: insertedContacts, error: contactError } = await supabase\r\n      .from('sales_contacts')\r\n      .insert(contacts)\r\n      .select();\r\n\r\n    if (contactError) {\r\n      throw new Error(`Failed to insert sales contacts: ${contactError.message}`);\r\n    }\r\n\r\n    return {\r\n      leads: insertedLeads,\r\n      activities: insertedActivities || [],\r\n      opportunities: insertedOpportunities || [],\r\n      contacts: insertedContacts || []\r\n    };\r\n  } catch (error) {\r\n    console.error('Error seeding sales data:', error);\r\n    throw error;\r\n  }\r\n} "
        }
    ]
}