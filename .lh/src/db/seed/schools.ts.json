{
    "sourceFile": "src/db/seed/schools.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746698766538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746698766538,
            "name": "Commit-0",
            "content": "import { SupabaseClient } from '@supabase/supabase-js';\r\nimport { faker } from '@faker-js/faker';\r\n\r\ninterface SchoolData {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  address: string;\r\n  created_at: string;\r\n}\r\n\r\ninterface SchoolSettings {\r\n  school_id: string;\r\n  setting_key: string;\r\n  setting_value: any;\r\n}\r\n\r\ninterface SchoolDepartment {\r\n  id: string;\r\n  school_id: string;\r\n  name: string;\r\n  description: string;\r\n  head_teacher_id?: string;\r\n}\r\n\r\ninterface SchoolEvent {\r\n  id: string;\r\n  school_id: string;\r\n  title: string;\r\n  description: string;\r\n  event_type: 'academic' | 'cultural' | 'sports' | 'other';\r\n  start_date: string;\r\n  end_date: string;\r\n  location: string;\r\n  organizer_id?: string;\r\n}\r\n\r\ninterface SchoolAnnouncement {\r\n  id: string;\r\n  school_id: string;\r\n  title: string;\r\n  content: string;\r\n  priority: 'low' | 'normal' | 'high' | 'urgent';\r\n  start_date: string;\r\n  end_date?: string;\r\n  created_by: string;\r\n}\r\n\r\nexport async function seedSchools(supabase: SupabaseClient) {\r\n  console.log('Seeding schools...');\r\n\r\n  // Create test schools\r\n  const schools: SchoolData[] = [\r\n    {\r\n      id: faker.string.uuid(),\r\n      name: 'SpeakWell Academy',\r\n      description: 'A premier English learning institution',\r\n      address: faker.location.streetAddress(),\r\n      created_at: new Date().toISOString(),\r\n    },\r\n    {\r\n      id: faker.string.uuid(),\r\n      name: 'Global English Institute',\r\n      description: 'International English learning center',\r\n      address: faker.location.streetAddress(),\r\n      created_at: new Date().toISOString(),\r\n    },\r\n  ];\r\n\r\n  // Insert schools\r\n  const { error: schoolsError } = await supabase\r\n    .from('schools')\r\n    .insert(schools);\r\n\r\n  if (schoolsError) {\r\n    throw new Error(`Error seeding schools: ${schoolsError.message}`);\r\n  }\r\n\r\n  // Create school settings\r\n  const settings: SchoolSettings[] = schools.flatMap(school => [\r\n    {\r\n      school_id: school.id,\r\n      setting_key: 'theme',\r\n      setting_value: { primary: '#007bff', secondary: '#6c757d' },\r\n    },\r\n    {\r\n      school_id: school.id,\r\n      setting_key: 'features',\r\n      setting_value: { \r\n        enableChat: true,\r\n        enableVideo: true,\r\n        enableAssessment: true,\r\n      },\r\n    },\r\n  ]);\r\n\r\n  const { error: settingsError } = await supabase\r\n    .from('school_settings')\r\n    .insert(settings);\r\n\r\n  if (settingsError) {\r\n    throw new Error(`Error seeding school settings: ${settingsError.message}`);\r\n  }\r\n\r\n  // Create school departments\r\n  const departments: SchoolDepartment[] = schools.flatMap(school => [\r\n    {\r\n      id: faker.string.uuid(),\r\n      school_id: school.id,\r\n      name: 'English Department',\r\n      description: 'Core English language department',\r\n    },\r\n    {\r\n      id: faker.string.uuid(),\r\n      school_id: school.id,\r\n      name: 'Speaking Skills',\r\n      description: 'Focus on oral communication',\r\n    },\r\n  ]);\r\n\r\n  const { error: departmentsError } = await supabase\r\n    .from('school_departments')\r\n    .insert(departments);\r\n\r\n  if (departmentsError) {\r\n    throw new Error(`Error seeding school departments: ${departmentsError.message}`);\r\n  }\r\n\r\n  // Create school events\r\n  const events: SchoolEvent[] = schools.flatMap(school => [\r\n    {\r\n      id: faker.string.uuid(),\r\n      school_id: school.id,\r\n      title: 'English Speaking Competition',\r\n      description: 'Annual speaking competition for students',\r\n      event_type: 'academic',\r\n      start_date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\r\n      end_date: new Date(Date.now() + 8 * 24 * 60 * 60 * 1000).toISOString(),\r\n      location: 'Main Auditorium',\r\n    },\r\n    {\r\n      id: faker.string.uuid(),\r\n      school_id: school.id,\r\n      title: 'Cultural Exchange Day',\r\n      description: 'International cultural exchange event',\r\n      event_type: 'cultural',\r\n      start_date: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toISOString(),\r\n      end_date: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000).toISOString(),\r\n      location: 'School Grounds',\r\n    },\r\n  ]);\r\n\r\n  const { error: eventsError } = await supabase\r\n    .from('school_events')\r\n    .insert(events);\r\n\r\n  if (eventsError) {\r\n    throw new Error(`Error seeding school events: ${eventsError.message}`);\r\n  }\r\n\r\n  // Create school announcements\r\n  const announcements: SchoolAnnouncement[] = schools.flatMap(school => [\r\n    {\r\n      id: faker.string.uuid(),\r\n      school_id: school.id,\r\n      title: 'New Course Available',\r\n      content: 'We are excited to announce our new advanced speaking course!',\r\n      priority: 'high',\r\n      start_date: new Date().toISOString(),\r\n      end_date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\r\n      created_by: faker.string.uuid(), // This should be a valid user ID\r\n    },\r\n    {\r\n      id: faker.string.uuid(),\r\n      school_id: school.id,\r\n      title: 'Holiday Schedule',\r\n      content: 'Please note the upcoming holiday schedule for next month.',\r\n      priority: 'normal',\r\n      start_date: new Date().toISOString(),\r\n      end_date: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000).toISOString(),\r\n      created_by: faker.string.uuid(), // This should be a valid user ID\r\n    },\r\n  ]);\r\n\r\n  const { error: announcementsError } = await supabase\r\n    .from('school_announcements')\r\n    .insert(announcements);\r\n\r\n  if (announcementsError) {\r\n    throw new Error(`Error seeding school announcements: ${announcementsError.message}`);\r\n  }\r\n\r\n  console.log('Schools seeded successfully!');\r\n  return schools;\r\n} "
        }
    ]
}