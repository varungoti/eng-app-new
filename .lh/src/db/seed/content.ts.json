{
    "sourceFile": "src/db/seed/content.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746698782991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746698782991,
            "name": "Commit-0",
            "content": "import { SupabaseClient } from '@supabase/supabase-js';\r\nimport { faker } from '@faker-js/faker';\r\n\r\ninterface Lesson {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  content: any;\r\n  created_by: string;\r\n  created_at: string;\r\n}\r\n\r\ninterface ContentVersion {\r\n  content_id: string;\r\n  version_number: number;\r\n  content_data: any;\r\n  created_by: string;\r\n}\r\n\r\ninterface ContentMetadata {\r\n  content_id: string;\r\n  metadata_type: string;\r\n  metadata_value: any;\r\n}\r\n\r\ninterface ContentTag {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n}\r\n\r\ninterface ContentTagRelation {\r\n  content_id: string;\r\n  tag_id: string;\r\n}\r\n\r\ninterface ContentApproval {\r\n  content_id: string;\r\n  status: 'pending' | 'approved' | 'rejected';\r\n  requested_by: string;\r\n  review_notes?: string;\r\n}\r\n\r\nexport async function seedContent(supabase: SupabaseClient) {\r\n  console.log('Seeding content...');\r\n\r\n  // Create test lessons\r\n  const lessons: Lesson[] = [\r\n    {\r\n      id: faker.string.uuid(),\r\n      title: 'Basic English Conversation',\r\n      description: 'Learn essential English conversation skills',\r\n      content: {\r\n        sections: [\r\n          {\r\n            type: 'text',\r\n            content: 'Welcome to Basic English Conversation!',\r\n          },\r\n          {\r\n            type: 'exercise',\r\n            content: {\r\n              question: 'How do you greet someone in English?',\r\n              options: ['Hello', 'Goodbye', 'Thank you', 'Please'],\r\n              correct: 'Hello',\r\n            },\r\n          },\r\n        ],\r\n      },\r\n      created_by: faker.string.uuid(), // This should be a valid user ID\r\n      created_at: new Date().toISOString(),\r\n    },\r\n    {\r\n      id: faker.string.uuid(),\r\n      title: 'Advanced Speaking Skills',\r\n      description: 'Master advanced English speaking techniques',\r\n      content: {\r\n        sections: [\r\n          {\r\n            type: 'text',\r\n            content: 'Welcome to Advanced Speaking Skills!',\r\n          },\r\n          {\r\n            type: 'exercise',\r\n            content: {\r\n              question: 'What is the correct pronunciation of \"schedule\"?',\r\n              options: ['shed-yool', 'sked-yool', 'shedule', 'skedule'],\r\n              correct: 'shed-yool',\r\n            },\r\n          },\r\n        ],\r\n      },\r\n      created_by: faker.string.uuid(), // This should be a valid user ID\r\n      created_at: new Date().toISOString(),\r\n    },\r\n  ];\r\n\r\n  // Insert lessons\r\n  const { error: lessonsError } = await supabase\r\n    .from('lessons')\r\n    .insert(lessons);\r\n\r\n  if (lessonsError) {\r\n    throw new Error(`Error seeding lessons: ${lessonsError.message}`);\r\n  }\r\n\r\n  // Create content versions\r\n  const versions: ContentVersion[] = lessons.map(lesson => ({\r\n    content_id: lesson.id,\r\n    version_number: 1,\r\n    content_data: lesson.content,\r\n    created_by: lesson.created_by,\r\n  }));\r\n\r\n  const { error: versionsError } = await supabase\r\n    .from('content_versions')\r\n    .insert(versions);\r\n\r\n  if (versionsError) {\r\n    throw new Error(`Error seeding content versions: ${versionsError.message}`);\r\n  }\r\n\r\n  // Create content metadata\r\n  const metadata: ContentMetadata[] = lessons.flatMap(lesson => [\r\n    {\r\n      content_id: lesson.id,\r\n      metadata_type: 'difficulty',\r\n      metadata_value: { level: 'intermediate', score: 0.7 },\r\n    },\r\n    {\r\n      content_id: lesson.id,\r\n      metadata_type: 'prerequisites',\r\n      metadata_value: ['basic_english', 'vocabulary'],\r\n    },\r\n  ]);\r\n\r\n  const { error: metadataError } = await supabase\r\n    .from('content_metadata')\r\n    .insert(metadata);\r\n\r\n  if (metadataError) {\r\n    throw new Error(`Error seeding content metadata: ${metadataError.message}`);\r\n  }\r\n\r\n  // Create content tags\r\n  const tags: ContentTag[] = [\r\n    {\r\n      id: faker.string.uuid(),\r\n      name: 'beginner',\r\n      description: 'Content suitable for beginners',\r\n    },\r\n    {\r\n      id: faker.string.uuid(),\r\n      name: 'advanced',\r\n      description: 'Content for advanced learners',\r\n    },\r\n    {\r\n      id: faker.string.uuid(),\r\n      name: 'speaking',\r\n      description: 'Speaking-focused content',\r\n    },\r\n  ];\r\n\r\n  const { error: tagsError } = await supabase\r\n    .from('content_tags')\r\n    .insert(tags);\r\n\r\n  if (tagsError) {\r\n    throw new Error(`Error seeding content tags: ${tagsError.message}`);\r\n  }\r\n\r\n  // Create content-tag relations\r\n  const tagRelations: ContentTagRelation[] = lessons.flatMap(lesson => [\r\n    {\r\n      content_id: lesson.id,\r\n      tag_id: tags[0].id, // beginner tag\r\n    },\r\n    {\r\n      content_id: lesson.id,\r\n      tag_id: tags[2].id, // speaking tag\r\n    },\r\n  ]);\r\n\r\n  const { error: relationsError } = await supabase\r\n    .from('content_tag_relations')\r\n    .insert(tagRelations);\r\n\r\n  if (relationsError) {\r\n    throw new Error(`Error seeding content tag relations: ${relationsError.message}`);\r\n  }\r\n\r\n  // Create content approvals\r\n  const approvals: ContentApproval[] = lessons.map(lesson => ({\r\n    content_id: lesson.id,\r\n    status: 'approved',\r\n    requested_by: lesson.created_by,\r\n    review_notes: 'Content meets quality standards',\r\n  }));\r\n\r\n  const { error: approvalsError } = await supabase\r\n    .from('content_approvals')\r\n    .insert(approvals);\r\n\r\n  if (approvalsError) {\r\n    throw new Error(`Error seeding content approvals: ${approvalsError.message}`);\r\n  }\r\n\r\n  console.log('Content seeded successfully!');\r\n  return lessons;\r\n} "
        }
    ]
}