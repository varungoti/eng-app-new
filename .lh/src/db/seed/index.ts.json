{
    "sourceFile": "src/db/seed/index.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1746698731751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746698915666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n   }\r\n }\r\n \r\n // Run seeding if this file is executed directly\r\n-if (require.main === module) {\r\n+if (import.meta.url === new URL(process.argv[1], 'file:').href) {\r\n   seed();\r\n }\r\n \r\n export { seed }; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1746701174470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,30 +3,39 @@\n import { seedSchools } from './schools';\r\n import { seedContent } from './content';\r\n import { seedAnalytics } from './analytics';\r\n \r\n-const supabaseUrl = process.env.VITE_SUPABASE_URL;\r\n-const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;\r\n+// Hardcoded Supabase credentials for testing\r\n+const supabaseUrl = 'https://pxjhsbezqybrksmcpwmx.supabase.co';\r\n+const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InB4amhzYmV6cXlicmtzbWNwd214Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzU4MzQ5NDksImV4cCI6MjA1MTQxMDk0OX0.BKjZ4-IqOK9Tdo7CN1mRS-sTtVxKJvbgxrz2ItDDVJM';\r\n \r\n-if (!supabaseUrl || !supabaseKey) {\r\n-  throw new Error('Missing Supabase credentials');\r\n-}\r\n-\r\n const supabase = createClient(supabaseUrl, supabaseKey);\r\n \r\n async function seed() {\r\n   try {\r\n-    console.log('Starting database seeding...');\r\n+    console.log('üå± Starting database seeding...');\r\n+    console.log('üìä Environment:', process.env.NODE_ENV);\r\n+    console.log('üîå Connected to Supabase');\r\n \r\n-    // Seed in order of dependencies\r\n-    await seedUsers(supabase);\r\n-    await seedSchools(supabase);\r\n-    await seedContent(supabase);\r\n-    await seedAnalytics(supabase);\r\n+    console.log('\\nüë• Seeding users...');\r\n+    const users = await seedUsers(supabase);\r\n+    console.log(`‚úÖ Created ${users.length} users`);\r\n \r\n-    console.log('Database seeding completed successfully!');\r\n+    console.log('\\nüè´ Seeding schools...');\r\n+    const schools = await seedSchools(supabase);\r\n+    console.log(`‚úÖ Created ${schools.length} schools`);\r\n+\r\n+    console.log('\\nüìö Seeding content...');\r\n+    const content = await seedContent(supabase);\r\n+    console.log(`‚úÖ Created ${content.length} lessons`);\r\n+\r\n+    console.log('\\nüìà Seeding analytics...');\r\n+    const analytics = await seedAnalytics(supabase);\r\n+    console.log(`‚úÖ Created analytics data for ${analytics.contentAnalytics.length} content items and ${analytics.schoolAnalytics.length} schools`);\r\n+\r\n+    console.log('\\n‚ú® Database seeding completed successfully!');\r\n   } catch (error) {\r\n-    console.error('Error seeding database:', error);\r\n+    console.error('\\n‚ùå Error seeding database:', error);\r\n     process.exit(1);\r\n   }\r\n }\r\n \r\n"
                },
                {
                    "date": 1746701258007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,20 @@\n     console.log('üå± Starting database seeding...');\r\n     console.log('üìä Environment:', process.env.NODE_ENV);\r\n     console.log('üîå Connected to Supabase');\r\n \r\n+    // Test the connection\r\n+    const { data: testData, error: testError } = await supabase\r\n+      .from('_health')\r\n+      .select('*')\r\n+      .limit(1);\r\n+\r\n+    if (testError) {\r\n+      throw new Error(`Failed to connect to Supabase: ${testError.message}`);\r\n+    }\r\n+\r\n+    console.log('‚úÖ Successfully connected to Supabase');\r\n+\r\n     console.log('\\nüë• Seeding users...');\r\n     const users = await seedUsers(supabase);\r\n     console.log(`‚úÖ Created ${users.length} users`);\r\n \r\n@@ -34,8 +46,14 @@\n \r\n     console.log('\\n‚ú® Database seeding completed successfully!');\r\n   } catch (error) {\r\n     console.error('\\n‚ùå Error seeding database:', error);\r\n+    if (error instanceof Error) {\r\n+      console.error('Error details:', {\r\n+        message: error.message,\r\n+        stack: error.stack,\r\n+      });\r\n+    }\r\n     process.exit(1);\r\n   }\r\n }\r\n \r\n"
                },
                {
                    "date": 1746701299176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n-import { createClient } from '@supabase/supabase-js';\r\n-import { seedUsers } from './users';\r\n-import { seedSchools } from './schools';\r\n-import { seedContent } from './content';\r\n-import { seedAnalytics } from './analytics';\r\n+const { createClient } = require('@supabase/supabase-js');\r\n+const { seedUsers } = require('./users');\r\n+const { seedSchools } = require('./schools');\r\n+const { seedContent } = require('./content');\r\n+const { seedAnalytics } = require('./analytics');\r\n \r\n // Hardcoded Supabase credentials for testing\r\n const supabaseUrl = 'https://pxjhsbezqybrksmcpwmx.supabase.co';\r\n const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InB4amhzYmV6cXlicmtzbWNwd214Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzU4MzQ5NDksImV4cCI6MjA1MTQxMDk0OX0.BKjZ4-IqOK9Tdo7CN1mRS-sTtVxKJvbgxrz2ItDDVJM';\r\n@@ -57,9 +57,9 @@\n   }\r\n }\r\n \r\n // Run seeding if this file is executed directly\r\n-if (import.meta.url === new URL(process.argv[1], 'file:').href) {\r\n+if (require.main === module) {\r\n   seed();\r\n }\r\n \r\n\\ No newline at end of file\n-export { seed }; \n+module.exports = { seed }; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1746701497172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,15 @@\n-const { createClient } = require('@supabase/supabase-js');\r\n-const { seedUsers } = require('./users');\r\n-const { seedSchools } = require('./schools');\r\n-const { seedContent } = require('./content');\r\n-const { seedAnalytics } = require('./analytics');\r\n+import { createClient, SupabaseClient } from '@supabase/supabase-js';\r\n+import { seedUsers } from './users.js';\r\n+import { seedSchools } from './schools.js';\r\n+import { seedContent } from './content.js';\r\n+import { seedAnalytics } from './analytics.js';\r\n \r\n // Hardcoded Supabase credentials for testing\r\n const supabaseUrl = 'https://pxjhsbezqybrksmcpwmx.supabase.co';\r\n const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InB4amhzYmV6cXlicmtzbWNwd214Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzU4MzQ5NDksImV4cCI6MjA1MTQxMDk0OX0.BKjZ4-IqOK9Tdo7CN1mRS-sTtVxKJvbgxrz2ItDDVJM';\r\n \r\n-const supabase = createClient(supabaseUrl, supabaseKey);\r\n+const supabase: SupabaseClient = createClient(supabaseUrl, supabaseKey);\r\n \r\n async function seed() {\r\n   try {\r\n     console.log('üå± Starting database seeding...');\r\n@@ -57,9 +57,9 @@\n   }\r\n }\r\n \r\n // Run seeding if this file is executed directly\r\n-if (require.main === module) {\r\n+if (process.argv[1] === new URL(import.meta.url).pathname) {\r\n   seed();\r\n }\r\n \r\n\\ No newline at end of file\n-module.exports = { seed }; \n+export { seed }; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1746701716782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,24 +3,33 @@\n import { seedSchools } from './schools.js';\r\n import { seedContent } from './content.js';\r\n import { seedAnalytics } from './analytics.js';\r\n \r\n-// Hardcoded Supabase credentials for testing\r\n const supabaseUrl = 'https://pxjhsbezqybrksmcpwmx.supabase.co';\r\n-const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InB4amhzYmV6cXlicmtzbWNwd214Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzU4MzQ5NDksImV4cCI6MjA1MTQxMDk0OX0.BKjZ4-IqOK9Tdo7CN1mRS-sTtVxKJvbgxrz2ItDDVJM';\r\n+const supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY;\r\n \r\n-const supabase: SupabaseClient = createClient(supabaseUrl, supabaseKey);\r\n+if (!supabaseServiceKey) {\r\n+  console.error('‚ùå SUPABASE_SERVICE_KEY environment variable is not set');\r\n+  process.exit(1);\r\n+}\r\n \r\n+const supabase: SupabaseClient = createClient(supabaseUrl, supabaseServiceKey, {\r\n+  auth: {\r\n+    autoRefreshToken: false,\r\n+    persistSession: false,\r\n+  },\r\n+});\r\n+\r\n async function seed() {\r\n   try {\r\n     console.log('üå± Starting database seeding...');\r\n     console.log('üìä Environment:', process.env.NODE_ENV);\r\n     console.log('üîå Connected to Supabase');\r\n \r\n     // Test the connection\r\n     const { data: testData, error: testError } = await supabase\r\n-      .from('_health')\r\n-      .select('*')\r\n+      .from('users')\r\n+      .select('count')\r\n       .limit(1);\r\n \r\n     if (testError) {\r\n       throw new Error(`Failed to connect to Supabase: ${testError.message}`);\r\n"
                },
                {
                    "date": 1746702248688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,15 @@\n import { createClient, SupabaseClient } from '@supabase/supabase-js';\r\n import { seedUsers } from './users.js';\r\n import { seedSchools } from './schools.js';\r\n-import { seedContent } from './content.js';\r\n-import { seedAnalytics } from './analytics.js';\r\n+import { seedGrades } from './grades.js';\r\n+import { seedStudents } from './students.js';\r\n+import { seedStaff } from './staff.js';\r\n+import { seedLessons } from './lessons.js';\r\n+import { seedTopics } from './topics.js';\r\n+import { seedExercisePrompts } from './exercise-prompts.js';\r\n+import { seedVoices } from './voices.js';\r\n+import { seedSales } from './sales.js';\r\n \r\n const supabaseUrl = 'https://pxjhsbezqybrksmcpwmx.supabase.co';\r\n const supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY;\r\n \r\n@@ -26,34 +32,59 @@\n     console.log('üîå Connected to Supabase');\r\n \r\n     // Test the connection\r\n     const { data: testData, error: testError } = await supabase\r\n-      .from('users')\r\n-      .select('count')\r\n+      .from('_health')\r\n+      .select('*')\r\n       .limit(1);\r\n \r\n     if (testError) {\r\n       throw new Error(`Failed to connect to Supabase: ${testError.message}`);\r\n     }\r\n \r\n     console.log('‚úÖ Successfully connected to Supabase');\r\n \r\n+    // Seed in order of dependencies\r\n     console.log('\\nüë• Seeding users...');\r\n     const users = await seedUsers(supabase);\r\n     console.log(`‚úÖ Created ${users.length} users`);\r\n \r\n     console.log('\\nüè´ Seeding schools...');\r\n     const schools = await seedSchools(supabase);\r\n     console.log(`‚úÖ Created ${schools.length} schools`);\r\n \r\n-    console.log('\\nüìö Seeding content...');\r\n-    const content = await seedContent(supabase);\r\n-    console.log(`‚úÖ Created ${content.length} lessons`);\r\n+    console.log('\\nüìö Seeding grades...');\r\n+    const grades = await seedGrades(supabase);\r\n+    console.log(`‚úÖ Created ${grades.length} grades`);\r\n \r\n-    console.log('\\nüìà Seeding analytics...');\r\n-    const analytics = await seedAnalytics(supabase);\r\n-    console.log(`‚úÖ Created analytics data for ${analytics.contentAnalytics.length} content items and ${analytics.schoolAnalytics.length} schools`);\r\n+    console.log('\\nüë®‚Äçüéì Seeding students...');\r\n+    const students = await seedStudents(supabase, schools, grades);\r\n+    console.log(`‚úÖ Created ${students.length} students`);\r\n \r\n+    console.log('\\nüë®‚Äçüè´ Seeding staff...');\r\n+    const staff = await seedStaff(supabase, schools);\r\n+    console.log(`‚úÖ Created ${staff.length} staff members`);\r\n+\r\n+    console.log('\\nüìù Seeding topics...');\r\n+    const topics = await seedTopics(supabase);\r\n+    console.log(`‚úÖ Created ${topics.length} topics`);\r\n+\r\n+    console.log('\\nüìñ Seeding lessons...');\r\n+    const lessons = await seedLessons(supabase, topics, staff);\r\n+    console.log(`‚úÖ Created ${lessons.length} lessons`);\r\n+\r\n+    console.log('\\n‚úçÔ∏è Seeding exercise prompts...');\r\n+    const prompts = await seedExercisePrompts(supabase, lessons);\r\n+    console.log(`‚úÖ Created ${prompts.length} exercise prompts`);\r\n+\r\n+    console.log('\\nüéôÔ∏è Seeding voices...');\r\n+    const voices = await seedVoices(supabase);\r\n+    console.log(`‚úÖ Created ${voices.length} voices`);\r\n+\r\n+    console.log('\\nüí∞ Seeding sales data...');\r\n+    const sales = await seedSales(supabase);\r\n+    console.log(`‚úÖ Created sales data with ${sales.leads.length} leads`);\r\n+\r\n     console.log('\\n‚ú® Database seeding completed successfully!');\r\n   } catch (error) {\r\n     console.error('\\n‚ùå Error seeding database:', error);\r\n     if (error instanceof Error) {\r\n"
                }
            ],
            "date": 1746698731750,
            "name": "Commit-0",
            "content": "import { createClient } from '@supabase/supabase-js';\r\nimport { seedUsers } from './users';\r\nimport { seedSchools } from './schools';\r\nimport { seedContent } from './content';\r\nimport { seedAnalytics } from './analytics';\r\n\r\nconst supabaseUrl = process.env.VITE_SUPABASE_URL;\r\nconst supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;\r\n\r\nif (!supabaseUrl || !supabaseKey) {\r\n  throw new Error('Missing Supabase credentials');\r\n}\r\n\r\nconst supabase = createClient(supabaseUrl, supabaseKey);\r\n\r\nasync function seed() {\r\n  try {\r\n    console.log('Starting database seeding...');\r\n\r\n    // Seed in order of dependencies\r\n    await seedUsers(supabase);\r\n    await seedSchools(supabase);\r\n    await seedContent(supabase);\r\n    await seedAnalytics(supabase);\r\n\r\n    console.log('Database seeding completed successfully!');\r\n  } catch (error) {\r\n    console.error('Error seeding database:', error);\r\n    process.exit(1);\r\n  }\r\n}\r\n\r\n// Run seeding if this file is executed directly\r\nif (require.main === module) {\r\n  seed();\r\n}\r\n\r\nexport { seed }; "
        }
    ]
}