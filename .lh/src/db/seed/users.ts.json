{
    "sourceFile": "src/db/seed/users.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1746698746605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746701272273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,135 +1,66 @@\n-import { SupabaseClient } from '@supabase/supabase-js';\r\n-import { faker } from '@faker-js/faker';\r\n+const { faker } = require('@faker-js/faker');\r\n \r\n-interface UserData {\r\n-  id: string;\r\n-  email: string;\r\n-  full_name: string;\r\n-  avatar_url?: string;\r\n-  created_at: string;\r\n-}\r\n+async function seedUsers(supabase) {\r\n+  try {\r\n+    // Create test users\r\n+    const users = Array.from({ length: 10 }, () => ({\r\n+      email: faker.internet.email(),\r\n+      password: 'test123', // You might want to hash this in production\r\n+      full_name: faker.person.fullName(),\r\n+      avatar_url: faker.image.avatar(),\r\n+      created_at: new Date().toISOString(),\r\n+      updated_at: new Date().toISOString()\r\n+    }));\r\n \r\n-interface UserRole {\r\n-  user_id: string;\r\n-  role: 'admin' | 'teacher' | 'student' | 'parent' | 'staff';\r\n-  school_id?: string;\r\n-}\r\n+    // Insert users\r\n+    const { data: insertedUsers, error: userError } = await supabase\r\n+      .from('users')\r\n+      .insert(users)\r\n+      .select();\r\n \r\n-interface UserPreference {\r\n-  user_id: string;\r\n-  theme: string;\r\n-  language: string;\r\n-  timezone: string;\r\n-  notification_settings: {\r\n-    email: boolean;\r\n-    push: boolean;\r\n-    sms: boolean;\r\n-    frequency: string;\r\n-  };\r\n-}\r\n+    if (userError) {\r\n+      throw new Error(`Failed to insert users: ${userError.message}`);\r\n+    }\r\n \r\n-export async function seedUsers(supabase: SupabaseClient) {\r\n-  console.log('Seeding users...');\r\n-\r\n-  // Create test users\r\n-  const users: UserData[] = [\r\n-    {\r\n-      id: faker.string.uuid(),\r\n-      email: 'admin@example.com',\r\n-      full_name: 'Admin User',\r\n+    // Create user roles\r\n+    const userRoles = insertedUsers.map(user => ({\r\n+      user_id: user.id,\r\n+      role: faker.helpers.arrayElement(['admin', 'teacher', 'student']),\r\n       created_at: new Date().toISOString(),\r\n-    },\r\n-    {\r\n-      id: faker.string.uuid(),\r\n-      email: 'teacher@example.com',\r\n-      full_name: 'Teacher User',\r\n-      created_at: new Date().toISOString(),\r\n-    },\r\n-    {\r\n-      id: faker.string.uuid(),\r\n-      email: 'student@example.com',\r\n-      full_name: 'Student User',\r\n-      created_at: new Date().toISOString(),\r\n-    },\r\n-  ];\r\n+      updated_at: new Date().toISOString()\r\n+    }));\r\n \r\n-  // Insert users\r\n-  const { error: usersError } = await supabase\r\n-    .from('users')\r\n-    .insert(users);\r\n+    const { error: roleError } = await supabase\r\n+      .from('user_roles')\r\n+      .insert(userRoles);\r\n \r\n-  if (usersError) {\r\n-    throw new Error(`Error seeding users: ${usersError.message}`);\r\n-  }\r\n+    if (roleError) {\r\n+      throw new Error(`Failed to insert user roles: ${roleError.message}`);\r\n+    }\r\n \r\n-  // Create user roles\r\n-  const roles: UserRole[] = [\r\n-    {\r\n-      user_id: users[0].id,\r\n-      role: 'admin',\r\n-    },\r\n-    {\r\n-      user_id: users[1].id,\r\n-      role: 'teacher',\r\n-    },\r\n-    {\r\n-      user_id: users[2].id,\r\n-      role: 'student',\r\n-    },\r\n-  ];\r\n+    // Create user preferences\r\n+    const userPreferences = insertedUsers.map(user => ({\r\n+      user_id: user.id,\r\n+      theme: faker.helpers.arrayElement(['light', 'dark']),\r\n+      language: faker.helpers.arrayElement(['en', 'es', 'fr']),\r\n+      notifications_enabled: faker.datatype.boolean(),\r\n+      created_at: new Date().toISOString(),\r\n+      updated_at: new Date().toISOString()\r\n+    }));\r\n \r\n-  const { error: rolesError } = await supabase\r\n-    .from('user_roles')\r\n-    .insert(roles);\r\n+    const { error: prefError } = await supabase\r\n+      .from('user_preferences')\r\n+      .insert(userPreferences);\r\n \r\n-  if (rolesError) {\r\n-    throw new Error(`Error seeding user roles: ${rolesError.message}`);\r\n-  }\r\n+    if (prefError) {\r\n+      throw new Error(`Failed to insert user preferences: ${prefError.message}`);\r\n+    }\r\n \r\n\\ No newline at end of file\n-  // Create user preferences\r\n-  const preferences: UserPreference[] = users.map(user => ({\r\n-    user_id: user.id,\r\n-    theme: 'light',\r\n-    language: 'en',\r\n-    timezone: 'UTC',\r\n-    notification_settings: {\r\n-      email: true,\r\n-      push: true,\r\n-      sms: false,\r\n-      frequency: 'daily',\r\n-    },\r\n-  }));\r\n-\r\n-  const { error: preferencesError } = await supabase\r\n-    .from('user_preferences')\r\n-    .insert(preferences);\r\n-\r\n-  if (preferencesError) {\r\n-    throw new Error(`Error seeding user preferences: ${preferencesError.message}`);\r\n+    return insertedUsers;\r\n+  } catch (error) {\r\n+    console.error('Error seeding users:', error);\r\n+    throw error;\r\n   }\r\n+}\r\n \r\n-  // Create some activity logs\r\n-  const activityLogs = users.map(user => ({\r\n-    user_id: user.id,\r\n-    action_type: 'login',\r\n-    entity_type: 'user',\r\n-    entity_id: user.id,\r\n-    metadata: {\r\n-      browser: 'Chrome',\r\n-      os: 'Windows',\r\n-      ip: faker.internet.ip(),\r\n-    },\r\n-    created_at: new Date().toISOString(),\r\n-  }));\r\n-\r\n-  const { error: logsError } = await supabase\r\n-    .from('user_activity_logs')\r\n-    .insert(activityLogs);\r\n-\r\n-  if (logsError) {\r\n-    throw new Error(`Error seeding user activity logs: ${logsError.message}`);\r\n-  }\r\n-\r\n-  console.log('Users seeded successfully!');\r\n-  return users;\r\n-} \n+module.exports = { seedUsers }; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1746701719161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,37 @@\n-const { faker } = require('@faker-js/faker');\r\n+import { faker } from '@faker-js/faker';\r\n+import { SupabaseClient } from '@supabase/supabase-js';\r\n \r\n-async function seedUsers(supabase) {\r\n+interface User {\r\n+  id: string;\r\n+  email: string;\r\n+  password: string;\r\n+  full_name: string;\r\n+  avatar_url: string;\r\n+  created_at: string;\r\n+  updated_at: string;\r\n+}\r\n+\r\n+interface UserRole {\r\n+  user_id: string;\r\n+  role: 'admin' | 'teacher' | 'student';\r\n+  created_at: string;\r\n+  updated_at: string;\r\n+}\r\n+\r\n+interface UserPreference {\r\n+  user_id: string;\r\n+  theme: 'light' | 'dark';\r\n+  language: string;\r\n+  notifications_enabled: boolean;\r\n+  created_at: string;\r\n+  updated_at: string;\r\n+}\r\n+\r\n+export async function seedUsers(supabase: SupabaseClient): Promise<User[]> {\r\n   try {\r\n     // Create test users\r\n-    const users = Array.from({ length: 10 }, () => ({\r\n+    const users: Omit<User, 'id'>[] = Array.from({ length: 10 }, () => ({\r\n       email: faker.internet.email(),\r\n       password: 'test123', // You might want to hash this in production\r\n       full_name: faker.person.fullName(),\r\n       avatar_url: faker.image.avatar(),\r\n@@ -21,10 +48,14 @@\n     if (userError) {\r\n       throw new Error(`Failed to insert users: ${userError.message}`);\r\n     }\r\n \r\n+    if (!insertedUsers) {\r\n+      throw new Error('No users were inserted');\r\n+    }\r\n+\r\n     // Create user roles\r\n-    const userRoles = insertedUsers.map(user => ({\r\n+    const userRoles: UserRole[] = insertedUsers.map(user => ({\r\n       user_id: user.id,\r\n       role: faker.helpers.arrayElement(['admin', 'teacher', 'student']),\r\n       created_at: new Date().toISOString(),\r\n       updated_at: new Date().toISOString()\r\n@@ -38,9 +69,9 @@\n       throw new Error(`Failed to insert user roles: ${roleError.message}`);\r\n     }\r\n \r\n     // Create user preferences\r\n-    const userPreferences = insertedUsers.map(user => ({\r\n+    const userPreferences: UserPreference[] = insertedUsers.map(user => ({\r\n       user_id: user.id,\r\n       theme: faker.helpers.arrayElement(['light', 'dark']),\r\n       language: faker.helpers.arrayElement(['en', 'es', 'fr']),\r\n       notifications_enabled: faker.datatype.boolean(),\r\n@@ -60,7 +91,5 @@\n   } catch (error) {\r\n     console.error('Error seeding users:', error);\r\n     throw error;\r\n   }\r\n-}\r\n-\r\n-module.exports = { seedUsers }; \n\\ No newline at end of file\n+} \n\\ No newline at end of file\n"
                }
            ],
            "date": 1746698746605,
            "name": "Commit-0",
            "content": "import { SupabaseClient } from '@supabase/supabase-js';\r\nimport { faker } from '@faker-js/faker';\r\n\r\ninterface UserData {\r\n  id: string;\r\n  email: string;\r\n  full_name: string;\r\n  avatar_url?: string;\r\n  created_at: string;\r\n}\r\n\r\ninterface UserRole {\r\n  user_id: string;\r\n  role: 'admin' | 'teacher' | 'student' | 'parent' | 'staff';\r\n  school_id?: string;\r\n}\r\n\r\ninterface UserPreference {\r\n  user_id: string;\r\n  theme: string;\r\n  language: string;\r\n  timezone: string;\r\n  notification_settings: {\r\n    email: boolean;\r\n    push: boolean;\r\n    sms: boolean;\r\n    frequency: string;\r\n  };\r\n}\r\n\r\nexport async function seedUsers(supabase: SupabaseClient) {\r\n  console.log('Seeding users...');\r\n\r\n  // Create test users\r\n  const users: UserData[] = [\r\n    {\r\n      id: faker.string.uuid(),\r\n      email: 'admin@example.com',\r\n      full_name: 'Admin User',\r\n      created_at: new Date().toISOString(),\r\n    },\r\n    {\r\n      id: faker.string.uuid(),\r\n      email: 'teacher@example.com',\r\n      full_name: 'Teacher User',\r\n      created_at: new Date().toISOString(),\r\n    },\r\n    {\r\n      id: faker.string.uuid(),\r\n      email: 'student@example.com',\r\n      full_name: 'Student User',\r\n      created_at: new Date().toISOString(),\r\n    },\r\n  ];\r\n\r\n  // Insert users\r\n  const { error: usersError } = await supabase\r\n    .from('users')\r\n    .insert(users);\r\n\r\n  if (usersError) {\r\n    throw new Error(`Error seeding users: ${usersError.message}`);\r\n  }\r\n\r\n  // Create user roles\r\n  const roles: UserRole[] = [\r\n    {\r\n      user_id: users[0].id,\r\n      role: 'admin',\r\n    },\r\n    {\r\n      user_id: users[1].id,\r\n      role: 'teacher',\r\n    },\r\n    {\r\n      user_id: users[2].id,\r\n      role: 'student',\r\n    },\r\n  ];\r\n\r\n  const { error: rolesError } = await supabase\r\n    .from('user_roles')\r\n    .insert(roles);\r\n\r\n  if (rolesError) {\r\n    throw new Error(`Error seeding user roles: ${rolesError.message}`);\r\n  }\r\n\r\n  // Create user preferences\r\n  const preferences: UserPreference[] = users.map(user => ({\r\n    user_id: user.id,\r\n    theme: 'light',\r\n    language: 'en',\r\n    timezone: 'UTC',\r\n    notification_settings: {\r\n      email: true,\r\n      push: true,\r\n      sms: false,\r\n      frequency: 'daily',\r\n    },\r\n  }));\r\n\r\n  const { error: preferencesError } = await supabase\r\n    .from('user_preferences')\r\n    .insert(preferences);\r\n\r\n  if (preferencesError) {\r\n    throw new Error(`Error seeding user preferences: ${preferencesError.message}`);\r\n  }\r\n\r\n  // Create some activity logs\r\n  const activityLogs = users.map(user => ({\r\n    user_id: user.id,\r\n    action_type: 'login',\r\n    entity_type: 'user',\r\n    entity_id: user.id,\r\n    metadata: {\r\n      browser: 'Chrome',\r\n      os: 'Windows',\r\n      ip: faker.internet.ip(),\r\n    },\r\n    created_at: new Date().toISOString(),\r\n  }));\r\n\r\n  const { error: logsError } = await supabase\r\n    .from('user_activity_logs')\r\n    .insert(activityLogs);\r\n\r\n  if (logsError) {\r\n    throw new Error(`Error seeding user activity logs: ${logsError.message}`);\r\n  }\r\n\r\n  console.log('Users seeded successfully!');\r\n  return users;\r\n} "
        }
    ]
}