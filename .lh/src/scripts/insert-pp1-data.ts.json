{
    "sourceFile": "src/scripts/insert-pp1-data.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 133,
            "patches": [
                {
                    "date": 1739482598916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739482708868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,9 @@\n               duration: lesson.duration,\r\n               difficulty: lesson.difficulty,\r\n               metadata: lesson.metadata,\r\n               subtopic_id: subtopicId,\r\n-              order_index: lesson.order_index\r\n+              order_index: lesson.order_index || 1\r\n             })\r\n \r\n           if (lessonError) throw lessonError\r\n \r\n"
                },
                {
                    "date": 1739482853945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,13 @@\n // src/scripts/insert-pp1-data.ts\r\n import { createClient } from '@supabase/supabase-js'\r\n import { v4 as uuidv4 } from 'uuid'\r\n import pp1Data from '../data/pp1_data.json'\r\n+import dotenv from 'dotenv'\r\n \r\n+// Load environment variables from .env file\r\n+dotenv.config({ path: '.env.local' })\r\n+\r\n // Define types based on your schema\r\n interface ExercisePrompt {\r\n   id: string\r\n   text: string\r\n@@ -64,11 +68,16 @@\n   grade_id: string\r\n   order_index: number\r\n }\r\n \r\n-// Initialize Supabase client\r\n-const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!\r\n-const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\r\n+// Initialize Supabase client with Vite environment variables\r\n+const supabaseUrl = import.meta.env.VITE_SUPABASE_URL\r\n+const supabaseKey = import.meta.env.VITE_SUPABASE_ANON_KEY\r\n+\r\n+if (!supabaseUrl || !supabaseKey) {\r\n+  throw new Error('Missing Supabase environment variables')\r\n+}\r\n+\r\n const supabase = createClient(supabaseUrl, supabaseKey)\r\n \r\n async function insertPP1Data() {\r\n   try {\r\n@@ -196,8 +205,10 @@\n     throw error\r\n   }\r\n }\r\n \r\n-// Execute the insertion\r\n-insertPP1Data()\r\n-  .then(() => console.log('Script completed'))\r\n-  .catch(error => console.error('Script failed:', error))\n\\ No newline at end of file\n+// Execute the script only if running directly (not imported)\r\n+if (import.meta.url === import.meta.env.VITE_ENTRY_URL) {\r\n+  insertPP1Data()\r\n+    .then(() => console.log('Data insertion completed successfully!'))\r\n+    .catch(error => console.error('Error:', error))\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739482965687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,9 +154,9 @@\n                 title: question.title,\r\n                 content: question.content,\r\n                 type: question.type,\r\n                 lesson_id: lessonId,\r\n-                order_index: question.order_index\r\n+                order_index: question.order_index || 1\r\n               })\r\n \r\n             if (questionError) throw questionError\r\n \r\n"
                },
                {
                    "date": 1739482989196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n   content: string\r\n   type: string\r\n   exercise_prompts: ExercisePrompt[]\r\n   lesson_id: string\r\n-  order_index: number\r\n+  order_index?: number\r\n }\r\n \r\n interface Activity {\r\n   id: string\r\n"
                },
                {
                    "date": 1739483037271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n   content: string\r\n   type: string\r\n   exercise_prompts: ExercisePrompt[]\r\n   lesson_id: string\r\n-  order_index?: number\r\n+  order_index: number\r\n }\r\n \r\n interface Activity {\r\n   id: string\r\n"
                },
                {
                    "date": 1739483142667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,11 @@\n import { createClient } from '@supabase/supabase-js'\r\n import { v4 as uuidv4 } from 'uuid'\r\n import pp1Data from '../data/pp1_data.json'\r\n import dotenv from 'dotenv'\r\n+import { dbConfig, logLevels } from './config/db-config'\r\n+import { validators, ValidationError } from './utils/validators'\r\n+import type { PostgrestError } from '@supabase/supabase-js'\r\n \r\n // Load environment variables from .env file\r\n dotenv.config({ path: '.env.local' })\r\n \r\n@@ -68,147 +71,297 @@\n   grade_id: string\r\n   order_index: number\r\n }\r\n \r\n-// Initialize Supabase client with Vite environment variables\r\n-const supabaseUrl = import.meta.env.VITE_SUPABASE_URL\r\n-const supabaseKey = import.meta.env.VITE_SUPABASE_ANON_KEY\r\n+class InsertionLogger {\r\n+  private startTime: number\r\n \r\n-if (!supabaseUrl || !supabaseKey) {\r\n-  throw new Error('Missing Supabase environment variables')\r\n+  constructor() {\r\n+    this.startTime = Date.now()\r\n+  }\r\n+\r\n+  log(level: keyof typeof logLevels, message: string, error?: Error | PostgrestError) {\r\n+    const timestamp = new Date().toISOString()\r\n+    const elapsed = ((Date.now() - this.startTime) / 1000).toFixed(2)\r\n+    \r\n+    console.log(`[${timestamp}] [${elapsed}s] [${level}] ${message}`)\r\n+    if (error) {\r\n+      console.error(error)\r\n+    }\r\n+  }\r\n }\r\n \r\n-const supabase = createClient(supabaseUrl, supabaseKey)\r\n+class DatabaseInserter {\r\n+  private supabase\r\n+  private logger\r\n+  private insertedIds: Map<string, string[]>\r\n \r\n-async function insertPP1Data() {\r\n-  try {\r\n-    // Start a transaction\r\n-    const { data: gradeData, error: gradeError } = await supabase\r\n-      .from('grades')\r\n-      .insert({\r\n-        id: uuidv4(),\r\n-        name: 'PP1',\r\n-        level: 1\r\n-      })\r\n-      .select('id')\r\n-      .single()\r\n+  constructor(supabaseUrl: string, supabaseKey: string) {\r\n+    this.supabase = createClient(supabaseUrl, supabaseKey)\r\n+    this.logger = new InsertionLogger()\r\n+    this.insertedIds = new Map()\r\n+  }\r\n \r\n-    if (gradeError) throw gradeError\r\n-    const gradeId = gradeData.id\r\n+  private async rollback(): Promise<void> {\r\n+    this.logger.log('WARNING', 'Starting rollback...')\r\n+    \r\n+    // Delete in reverse order to handle foreign key constraints\r\n+    const tables = Object.values(dbConfig.tables).reverse()\r\n+    \r\n+    for (const table of tables) {\r\n+      const ids = this.insertedIds.get(table) || []\r\n+      if (ids.length > 0) {\r\n+        this.logger.log('INFO', `Rolling back ${ids.length} records from ${table}`)\r\n+        const { error } = await this.supabase\r\n+          .from(table)\r\n+          .delete()\r\n+          .in('id', ids)\r\n+        \r\n+        if (error) {\r\n+          this.logger.log('ERROR', `Failed to rollback ${table}`, error)\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n \r\n-    // Process each topic\r\n-    for (const topic of pp1Data.topics) {\r\n-      const topicId = uuidv4()\r\n-      const { error: topicError } = await supabase\r\n-        .from('topics')\r\n+  private trackInsertedId(table: string, id: string) {\r\n+    if (!this.insertedIds.has(table)) {\r\n+      this.insertedIds.set(table, [])\r\n+    }\r\n+    this.insertedIds.get(table)!.push(id)\r\n+  }\r\n+\r\n+  async insertPP1Data() {\r\n+    try {\r\n+      // Validate data before starting\r\n+      this.validateData(pp1Data)\r\n+      this.logger.log('INFO', 'Starting data insertion...')\r\n+\r\n+      // Insert grade\r\n+      const { data: gradeData, error: gradeError } = await this.supabase\r\n+        .from(dbConfig.tables.grades)\r\n         .insert({\r\n-          id: topicId,\r\n-          title: topic.title || `Topic ${topic.id}`,\r\n-          description: topic.description || '',\r\n-          grade_id: gradeId,\r\n-          order_index: topic.order_index || 1\r\n+          id: uuidv4(),\r\n+          name: 'PP1',\r\n+          level: 1\r\n         })\r\n+        .select('id')\r\n+        .single()\r\n \r\n-      if (topicError) throw topicError\r\n+      if (gradeError) throw gradeError\r\n+      const gradeId = gradeData.id\r\n+      this.trackInsertedId(dbConfig.tables.grades, gradeId)\r\n+      this.logger.log('SUCCESS', 'Grade inserted successfully')\r\n \r\n-      // Process subtopics\r\n-      for (const subtopic of topic.subtopics) {\r\n-        const subtopicId = uuidv4()\r\n-        const { error: subtopicError } = await supabase\r\n-          .from('subtopics')\r\n-          .insert({\r\n-            id: subtopicId,\r\n-            title: subtopic.title,\r\n-            description: subtopic.description,\r\n-            topic_id: topicId,\r\n-            order_index: subtopic.order_index\r\n-          })\r\n+      // Process topics\r\n+      for (const topic of pp1Data.topics) {\r\n+        await this.processTopic(topic, gradeId)\r\n+      }\r\n \r\n-        if (subtopicError) throw subtopicError\r\n+      this.logger.log('SUCCESS', 'All data inserted successfully!')\r\n+      return true\r\n+    } catch (error) {\r\n+      this.logger.log('ERROR', 'Error during insertion', error as Error)\r\n+      await this.rollback()\r\n+      throw error\r\n+    }\r\n+  }\r\n \r\n-        // Process lessons\r\n-        for (const lesson of subtopic.lessons) {\r\n-          const lessonId = uuidv4()\r\n-          const { error: lessonError } = await supabase\r\n-            .from('lessons')\r\n\\ No newline at end of file\n-            .insert({\r\n-              id: lessonId,\r\n-              title: lesson.title,\r\n-              description: lesson.description,\r\n-              content_type: lesson.content_type,\r\n-              duration: lesson.duration,\r\n-              difficulty: lesson.difficulty,\r\n-              metadata: lesson.metadata,\r\n-              subtopic_id: subtopicId,\r\n-              order_index: lesson.order_index || 1\r\n-            })\r\n+  private async processTopic(topic: Topic, gradeId: string) {\r\n+    const topicId = uuidv4()\r\n+    const { error: topicError } = await this.supabase\r\n+      .from(dbConfig.tables.topics)\r\n+      .insert({\r\n+        id: topicId,\r\n+        title: topic.title,\r\n+        description: topic.description,\r\n+        grade_id: gradeId,\r\n+        order_index: topic.order_index\r\n+      })\r\n \r\n-          if (lessonError) throw lessonError\r\n+    if (topicError) throw topicError\r\n+    this.trackInsertedId(dbConfig.tables.topics, topicId)\r\n+    this.logger.log('SUCCESS', `Topic \"${topic.title}\" inserted`)\r\n \r\n-          // Process questions\r\n-          for (const question of lesson.questions) {\r\n-            const questionId = uuidv4()\r\n-            const { error: questionError } = await supabase\r\n-              .from('questions')\r\n-              .insert({\r\n-                id: questionId,\r\n-                title: question.title,\r\n-                content: question.content,\r\n-                type: question.type,\r\n-                lesson_id: lessonId,\r\n-                order_index: question.order_index || 1\r\n-              })\r\n+    for (const subtopic of topic.subtopics) {\r\n+      await this.processSubtopic(subtopic, topicId)\r\n+    }\r\n+  }\r\n \r\n-            if (questionError) throw questionError\r\n+  private async processSubtopic(subtopic: Subtopic, topicId: string) {\r\n+    const subtopicId = uuidv4()\r\n+    const { error: subtopicError } = await this.supabase\r\n+      .from(dbConfig.tables.subtopics)\r\n+      .insert({\r\n+        id: subtopicId,\r\n+        title: subtopic.title,\r\n+        description: subtopic.description,\r\n+        topic_id: topicId,\r\n+        order_index: subtopic.order_index\r\n+      })\r\n \r\n-            // Process exercise prompts\r\n-            const exercisePrompts = question.exercise_prompts.map(prompt => ({\r\n-              id: uuidv4(),\r\n-              text: prompt.text,\r\n-              narration: prompt.narration,\r\n-              saytext: prompt.saytext,\r\n-              order_index: prompt.order_index,\r\n-              question_id: questionId\r\n-            }))\r\n+    if (subtopicError) throw subtopicError\r\n+    this.trackInsertedId(dbConfig.tables.subtopics, subtopicId)\r\n+    this.logger.log('SUCCESS', `Subtopic \"${subtopic.title}\" inserted`)\r\n \r\n-            const { error: promptError } = await supabase\r\n-              .from('exercise_prompts')\r\n-              .insert(exercisePrompts)\r\n+    for (const lesson of subtopic.lessons) {\r\n+      await this.processLesson(lesson, subtopicId)\r\n+    }\r\n+  }\r\n \r\n-            if (promptError) throw promptError\r\n-          }\r\n+  private async processLesson(lesson: Lesson, subtopicId: string) {\r\n+    const lessonId = uuidv4()\r\n+    const { error: lessonError } = await this.supabase\r\n+      .from(dbConfig.tables.lessons)\r\n+      .insert({\r\n+        id: lessonId,\r\n+        title: lesson.title,\r\n+        description: lesson.description,\r\n+        content_type: lesson.content_type,\r\n+        duration: lesson.duration,\r\n+        difficulty: lesson.difficulty,\r\n+        metadata: lesson.metadata,\r\n+        subtopic_id: subtopicId,\r\n+        order_index: lesson.order_index\r\n+      })\r\n \r\n-          // Process activities\r\n-          if (lesson.activities && lesson.activities.length > 0) {\r\n-            const activities = lesson.activities.map(activity => ({\r\n-              id: uuidv4(),\r\n-              title: activity.title,\r\n-              type: activity.type,\r\n-              description: activity.description,\r\n-              instructions: activity.instructions,\r\n-              duration: activity.duration,\r\n-              lesson_id: lessonId\r\n-            }))\r\n+    if (lessonError) throw lessonError\r\n+    this.trackInsertedId(dbConfig.tables.lessons, lessonId)\r\n+    this.logger.log('SUCCESS', `Lesson \"${lesson.title}\" inserted`)\r\n \r\n-            const { error: activityError } = await supabase\r\n-              .from('activities')\r\n-              .insert(activities)\r\n+    for (const question of lesson.questions) {\r\n+      await this.processQuestion(question, lessonId)\r\n+    }\r\n \r\n-            if (activityError) throw activityError\r\n+    if (lesson.activities && lesson.activities.length > 0) {\r\n+      await this.processActivities(lesson.activities, lessonId)\r\n+    }\r\n+  }\r\n+\r\n+  private async processQuestion(question: Question, lessonId: string) {\r\n+    const questionId = uuidv4()\r\n+    const { error: questionError } = await this.supabase\r\n+      .from(dbConfig.tables.questions)\r\n+      .insert({\r\n+        id: questionId,\r\n+        title: question.title,\r\n+        content: question.content,\r\n+        type: question.type,\r\n+        lesson_id: lessonId,\r\n+        order_index: question.order_index\r\n+      })\r\n+\r\n+    if (questionError) throw questionError\r\n+    this.trackInsertedId(dbConfig.tables.questions, questionId)\r\n+    this.logger.log('SUCCESS', `Question \"${question.title}\" inserted`)\r\n+\r\n+    for (const exercisePrompt of question.exercise_prompts) {\r\n+      await this.processExercisePrompt(exercisePrompt, questionId)\r\n+    }\r\n+  }\r\n+\r\n+  private async processExercisePrompt(exercisePrompt: ExercisePrompt, questionId: string) {\r\n+    const promptId = uuidv4()\r\n+    const { error: promptError } = await this.supabase\r\n+      .from(dbConfig.tables.exercise_prompts)\r\n+      .insert({\r\n+        id: promptId,\r\n+        text: exercisePrompt.text,\r\n+        narration: exercisePrompt.narration,\r\n+        saytext: exercisePrompt.saytext,\r\n+        order_index: exercisePrompt.order_index,\r\n+        question_id: questionId\r\n+      })\r\n+\r\n+    if (promptError) throw promptError\r\n+    this.trackInsertedId(dbConfig.tables.exercise_prompts, promptId)\r\n+    this.logger.log('SUCCESS', `Exercise prompt inserted`)\r\n+  }\r\n+\r\n+  private async processActivities(activities: Activity[], lessonId: string) {\r\n+    const { error: activityError } = await this.supabase\r\n+      .from(dbConfig.tables.activities)\r\n+      .insert(activities.map(activity => ({\r\n+        id: uuidv4(),\r\n+        title: activity.title,\r\n+        type: activity.type,\r\n+        description: activity.description,\r\n+        instructions: activity.instructions,\r\n+        duration: activity.duration,\r\n+        lesson_id: lessonId\r\n+      })))\r\n+\r\n+    if (activityError) throw activityError\r\n+    this.trackInsertedId(dbConfig.tables.activities, activities.map(activity => activity.id))\r\n+    this.logger.log('SUCCESS', 'Activities inserted')\r\n+  }\r\n+\r\n+  private validateData(data: any) {\r\n+    this.logger.log('INFO', 'Validating data...')\r\n+    \r\n+    // Validate grade data\r\n+    validators.validateString('PP1', dbConfig.validation.maxTitleLength, 'Grade name')\r\n+\r\n+    // Validate topics\r\n+    for (const topic of data.topics) {\r\n+      validators.validateString(topic.title, dbConfig.validation.maxTitleLength, 'Topic title')\r\n+      validators.validateString(topic.description, dbConfig.validation.maxDescriptionLength, 'Topic description')\r\n+      validators.validateOrderIndex(topic.order_index)\r\n+\r\n+      // Validate subtopics\r\n+      for (const subtopic of topic.subtopics) {\r\n+        validators.validateString(subtopic.title, dbConfig.validation.maxTitleLength, 'Subtopic title')\r\n+        validators.validateString(subtopic.description, dbConfig.validation.maxDescriptionLength, 'Subtopic description')\r\n+        validators.validateOrderIndex(subtopic.order_index)\r\n+\r\n+        // Validate lessons\r\n+        for (const lesson of subtopic.lessons) {\r\n+          validators.validateString(lesson.title, dbConfig.validation.maxTitleLength, 'Lesson title')\r\n+          validators.validateString(lesson.description, dbConfig.validation.maxDescriptionLength, 'Lesson description')\r\n+          validators.validateOrderIndex(lesson.order_index)\r\n+\r\n+          // Validate questions\r\n+          for (const question of lesson.questions) {\r\n+            validators.validateString(question.title, dbConfig.validation.maxTitleLength, 'Question title')\r\n+            validators.validateString(question.content, dbConfig.validation.maxDescriptionLength, 'Question content')\r\n+            validators.validateOrderIndex(question.order_index)\r\n+\r\n+            // Validate exercise prompts\r\n+            for (const exercisePrompt of question.exercise_prompts) {\r\n+              validators.validateString(exercisePrompt.text, dbConfig.validation.maxDescriptionLength, 'Exercise prompt text')\r\n+              validators.validateOrderIndex(exercisePrompt.order_index)\r\n+            }\r\n           }\r\n+\r\n+          // Validate activities\r\n+          if (lesson.activities && lesson.activities.length > 0) {\r\n+            for (const activity of lesson.activities) {\r\n+              validators.validateString(activity.title, dbConfig.validation.maxTitleLength, 'Activity title')\r\n+              validators.validateString(activity.description, dbConfig.validation.maxDescriptionLength, 'Activity description')\r\n+              validators.validateOrderIndex(activity.duration)\r\n+            }\r\n+          }\r\n         }\r\n       }\r\n     }\r\n \r\n-    console.log('Data insertion completed successfully!')\r\n-  } catch (error) {\r\n-    console.error('Error inserting data:', error)\r\n-    throw error\r\n+    this.logger.log('SUCCESS', 'Data validation completed')\r\n   }\r\n }\r\n \r\n-// Execute the script only if running directly (not imported)\r\n+// Initialize and run\r\n+const supabaseUrl = import.meta.env.VITE_SUPABASE_URL\r\n+const supabaseKey = import.meta.env.VITE_SUPABASE_ANON_KEY\r\n+\r\n+if (!supabaseUrl || !supabaseKey) {\r\n+  throw new Error('Missing Supabase environment variables')\r\n+}\r\n+\r\n+const inserter = new DatabaseInserter(supabaseUrl, supabaseKey)\r\n+\r\n if (import.meta.url === import.meta.env.VITE_ENTRY_URL) {\r\n-  insertPP1Data()\r\n-    .then(() => console.log('Data insertion completed successfully!'))\r\n-    .catch(error => console.error('Error:', error))\r\n-}\n+  inserter.insertPP1Data()\r\n+    .then(() => process.exit(0))\r\n+    .catch(() => process.exit(1))\r\n+}\r\n+\r\n+export { DatabaseInserter }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739483334781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,23 +135,17 @@\n       // Validate data before starting\r\n       this.validateData(pp1Data)\r\n       this.logger.log('INFO', 'Starting data insertion...')\r\n \r\n-      // Insert grade\r\n+      // Get existing PP1 grade ID\r\n       const { data: gradeData, error: gradeError } = await this.supabase\r\n         .from(dbConfig.tables.grades)\r\n-        .insert({\r\n-          id: uuidv4(),\r\n-          name: 'PP1',\r\n-          level: 1\r\n-        })\r\n         .select('id')\r\n+        .eq('name', 'PP1')\r\n         .single()\r\n \r\n-      if (gradeError) throw gradeError\r\n+      if (gradeError) throw new Error('Failed to find PP1 grade')\r\n       const gradeId = gradeData.id\r\n-      this.trackInsertedId(dbConfig.tables.grades, gradeId)\r\n-      this.logger.log('SUCCESS', 'Grade inserted successfully')\r\n \r\n       // Process topics\r\n       for (const topic of pp1Data.topics) {\r\n         await this.processTopic(topic, gradeId)\r\n"
                },
                {
                    "date": 1739483384130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n   id: string\r\n   title: string\r\n   description: string\r\n   subtopics: Subtopic[]\r\n-  grade_id: string\r\n+  grade_id?: string\r\n   order_index: number\r\n }\r\n \r\n class InsertionLogger {\r\n"
                },
                {
                    "date": 1739483394823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,9 +147,9 @@\n       const gradeId = gradeData.id\r\n \r\n       // Process topics\r\n       for (const topic of pp1Data.topics) {\r\n-        await this.processTopic(topic, gradeId)\r\n+        await this.processTopic(topic as Topic, gradeId)\r\n       }\r\n \r\n       this.logger.log('SUCCESS', 'All data inserted successfully!')\r\n       return true\r\n"
                },
                {
                    "date": 1739483426176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n   title: string\r\n   description: string\r\n   order_index: number\r\n   lessons: Lesson[]\r\n-  topic_id: string\r\n+  topic_id?: string\r\n }\r\n \r\n interface Topic {\r\n   id: string\r\n"
                },
                {
                    "date": 1739483524933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n   difficulty: string\r\n   metadata: Record<string, any>\r\n   questions: Question[]\r\n   activities: Activity[]\r\n-  subtopic_id: string\r\n+  subtopic_id?: string\r\n   order_index: number\r\n }\r\n \r\n interface Subtopic {\r\n"
                },
                {
                    "date": 1739483557516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,10 +25,10 @@\n   title: string\r\n   content: string\r\n   type: string\r\n   exercise_prompts: ExercisePrompt[]\r\n-  lesson_id: string\r\n-  order_index: number\r\n+  lesson_id?: string\r\n+  order_index?: number\r\n }\r\n \r\n interface Activity {\r\n   id: string\r\n"
                },
                {
                    "date": 1739483587476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -271,12 +271,13 @@\n     this.logger.log('SUCCESS', `Exercise prompt inserted`)\r\n   }\r\n \r\n   private async processActivities(activities: Activity[], lessonId: string) {\r\n+    const activityIds = activities.map(activity => uuidv4())\r\n     const { error: activityError } = await this.supabase\r\n       .from(dbConfig.tables.activities)\r\n-      .insert(activities.map(activity => ({\r\n-        id: uuidv4(),\r\n+      .insert(activities.map((activity, index) => ({\r\n+        id: activityIds[index],\r\n         title: activity.title,\r\n         type: activity.type,\r\n         description: activity.description,\r\n         instructions: activity.instructions,\r\n@@ -284,9 +285,10 @@\n         lesson_id: lessonId\r\n       })))\r\n \r\n     if (activityError) throw activityError\r\n-    this.trackInsertedId(dbConfig.tables.activities, activities.map(activity => activity.id))\r\n+    // Track each activity ID individually\r\n+    activityIds.forEach(id => this.trackInsertedId(dbConfig.tables.activities, id))\r\n     this.logger.log('SUCCESS', 'Activities inserted')\r\n   }\r\n \r\n   private validateData(data: any) {\r\n"
                },
                {
                    "date": 1739483619846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,9 +147,9 @@\n       const gradeId = gradeData.id\r\n \r\n       // Process topics\r\n       for (const topic of pp1Data.topics) {\r\n-        await this.processTopic(topic as Topic, gradeId)\r\n+        await this.processTopic(topic, gradeId)\r\n       }\r\n \r\n       this.logger.log('SUCCESS', 'All data inserted successfully!')\r\n       return true\r\n"
                },
                {
                    "date": 1739483657359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,14 +11,14 @@\n dotenv.config({ path: '.env.local' })\r\n \r\n // Define types based on your schema\r\n interface ExercisePrompt {\r\n-  id: string\r\n+  id?: string\r\n   text: string\r\n   narration: string\r\n   saytext: string\r\n   order_index: number\r\n-  question_id: string\r\n+  question_id?: string\r\n }\r\n \r\n interface Question {\r\n   id: string\r\n"
                },
                {
                    "date": 1739483730048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,13 +176,13 @@\n     this.trackInsertedId(dbConfig.tables.topics, topicId)\r\n     this.logger.log('SUCCESS', `Topic \"${topic.title}\" inserted`)\r\n \r\n     for (const subtopic of topic.subtopics) {\r\n-      await this.processSubtopic(subtopic, topicId)\r\n+      await this.processSubtopic(subtopic, topicId, gradeId)\r\n     }\r\n   }\r\n \r\n-  private async processSubtopic(subtopic: Subtopic, topicId: string) {\r\n+  private async processSubtopic(subtopic: Subtopic, topicId: string, gradeId: string) {\r\n     const subtopicId = uuidv4()\r\n     const { error: subtopicError } = await this.supabase\r\n       .from(dbConfig.tables.subtopics)\r\n       .insert({\r\n@@ -197,13 +197,13 @@\n     this.trackInsertedId(dbConfig.tables.subtopics, subtopicId)\r\n     this.logger.log('SUCCESS', `Subtopic \"${subtopic.title}\" inserted`)\r\n \r\n     for (const lesson of subtopic.lessons) {\r\n-      await this.processLesson(lesson, subtopicId)\r\n+      await this.processLesson(lesson, subtopicId, topicId, gradeId)\r\n     }\r\n   }\r\n \r\n-  private async processLesson(lesson: Lesson, subtopicId: string) {\r\n+  private async processLesson(lesson: Lesson, subtopicId: string, topicId: string, gradeId: string) {\r\n     const lessonId = uuidv4()\r\n     const { error: lessonError } = await this.supabase\r\n       .from(dbConfig.tables.lessons)\r\n       .insert({\r\n@@ -214,8 +214,10 @@\n         duration: lesson.duration,\r\n         difficulty: lesson.difficulty,\r\n         metadata: lesson.metadata,\r\n         subtopic_id: subtopicId,\r\n+        topic_id: topicId,\r\n+        grade_id: gradeId,\r\n         order_index: lesson.order_index\r\n       })\r\n \r\n     if (lessonError) throw lessonError\r\n"
                },
                {
                    "date": 1739483792480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,13 +197,13 @@\n     this.trackInsertedId(dbConfig.tables.subtopics, subtopicId)\r\n     this.logger.log('SUCCESS', `Subtopic \"${subtopic.title}\" inserted`)\r\n \r\n     for (const lesson of subtopic.lessons) {\r\n-      await this.processLesson(lesson, subtopicId, topicId, gradeId)\r\n+      await this.processLesson(lesson, subtopicId)\r\n     }\r\n   }\r\n \r\n-  private async processLesson(lesson: Lesson, subtopicId: string, topicId: string, gradeId: string) {\r\n+  private async processLesson(lesson: Lesson, subtopicId: string) {\r\n     const lessonId = uuidv4()\r\n     const { error: lessonError } = await this.supabase\r\n       .from(dbConfig.tables.lessons)\r\n       .insert({\r\n@@ -214,10 +214,8 @@\n         duration: lesson.duration,\r\n         difficulty: lesson.difficulty,\r\n         metadata: lesson.metadata,\r\n         subtopic_id: subtopicId,\r\n-        topic_id: topicId,\r\n-        grade_id: gradeId,\r\n         order_index: lesson.order_index\r\n       })\r\n \r\n     if (lessonError) throw lessonError\r\n"
                },
                {
                    "date": 1739483806479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,13 +197,13 @@\n     this.trackInsertedId(dbConfig.tables.subtopics, subtopicId)\r\n     this.logger.log('SUCCESS', `Subtopic \"${subtopic.title}\" inserted`)\r\n \r\n     for (const lesson of subtopic.lessons) {\r\n-      await this.processLesson(lesson, subtopicId)\r\n+      await this.processLesson(lesson, subtopicId, topicId, gradeId)\r\n     }\r\n   }\r\n \r\n-  private async processLesson(lesson: Lesson, subtopicId: string) {\r\n+  private async processLesson(lesson: Lesson, subtopicId: string, topicId: string, gradeId: string) {\r\n     const lessonId = uuidv4()\r\n     const { error: lessonError } = await this.supabase\r\n       .from(dbConfig.tables.lessons)\r\n       .insert({\r\n@@ -214,9 +214,13 @@\n         duration: lesson.duration,\r\n         difficulty: lesson.difficulty,\r\n         metadata: lesson.metadata,\r\n         subtopic_id: subtopicId,\r\n-        order_index: lesson.order_index\r\n+        topic_id: topicId,\r\n+        grade_id: gradeId,\r\n+        order_index: lesson.order_index,\r\n+        status: 'draft',\r\n+        content: lesson.content || null\r\n       })\r\n \r\n     if (lessonError) throw lessonError\r\n     this.trackInsertedId(dbConfig.tables.lessons, lessonId)\r\n"
                },
                {
                    "date": 1739483829822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,8 +51,9 @@\n   questions: Question[]\r\n   activities: Activity[]\r\n   subtopic_id?: string\r\n   order_index: number\r\n+  content?: string\r\n }\r\n \r\n interface Subtopic {\r\n   id: string\r\n"
                },
                {
                    "date": 1739483951236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n   type: string\r\n   description: string\r\n   instructions: string\r\n   duration: number\r\n-  lesson_id: string\r\n+  lesson_id?: string\r\n }\r\n \r\n interface Lesson {\r\n   id: string\r\n"
                },
                {
                    "date": 1739484056222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n import dotenv from 'dotenv'\r\n import { dbConfig, logLevels } from './config/db-config'\r\n import { validators, ValidationError } from './utils/validators'\r\n import type { PostgrestError } from '@supabase/supabase-js'\r\n+import \r\n \r\n // Load environment variables from .env file\r\n dotenv.config({ path: '.env.local' })\r\n \r\n"
                },
                {
                    "date": 1739484073642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n import dotenv from 'dotenv'\r\n import { dbConfig, logLevels } from './config/db-config'\r\n import { validators, ValidationError } from './utils/validators'\r\n import type { PostgrestError } from '@supabase/supabase-js'\r\n-import \r\n+import { Topics, }\r\n \r\n // Load environment variables from .env file\r\n dotenv.config({ path: '.env.local' })\r\n \r\n"
                },
                {
                    "date": 1739484091187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n import dotenv from 'dotenv'\r\n import { dbConfig, logLevels } from './config/db-config'\r\n import { validators, ValidationError } from './utils/validators'\r\n import type { PostgrestError } from '@supabase/supabase-js'\r\n-import { Topics, }\r\n+//import { Topic, Subtopic, Lesson, Question, ExercisePrompt, Activity } from '@/types/index'\r\n \r\n // Load environment variables from .env file\r\n dotenv.config({ path: '.env.local' })\r\n \r\n"
                },
                {
                    "date": 1739484304909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -349,19 +349,19 @@\n     this.logger.log('SUCCESS', 'Data validation completed')\r\n   }\r\n }\r\n \r\n-// Initialize and run\r\n-const supabaseUrl = import.meta.env.VITE_SUPABASE_URL\r\n-const supabaseKey = import.meta.env.VITE_SUPABASE_ANON_KEY\r\n+// Replace import.meta.env with process.env\r\n+const supabaseUrl = process.env.VITE_SUPABASE_URL\r\n+const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY\r\n \r\n if (!supabaseUrl || !supabaseKey) {\r\n   throw new Error('Missing Supabase environment variables')\r\n }\r\n \r\n const inserter = new DatabaseInserter(supabaseUrl, supabaseKey)\r\n \r\n-if (import.meta.url === import.meta.env.VITE_ENTRY_URL) {\r\n+if (process.env.VITE_ENTRY_URL === process.env.VITE_ENTRY_URL) {\r\n   inserter.insertPP1Data()\r\n     .then(() => process.exit(0))\r\n     .catch(() => process.exit(1))\r\n }\r\n"
                },
                {
                    "date": 1739484361861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -351,9 +351,9 @@\n }\r\n \r\n // Replace import.meta.env with process.env\r\n const supabaseUrl = process.env.VITE_SUPABASE_URL\r\n-const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY\r\n+const supabaseKey = process.env.SUPABASE_SERVICE_KEY  // Use service role key instead of anon key\r\n \r\n if (!supabaseUrl || !supabaseKey) {\r\n   throw new Error('Missing Supabase environment variables')\r\n }\r\n"
                },
                {
                    "date": 1739484461598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,16 +2,23 @@\n import { createClient } from '@supabase/supabase-js'\r\n import { v4 as uuidv4 } from 'uuid'\r\n import pp1Data from '../data/pp1_data.json'\r\n import dotenv from 'dotenv'\r\n+import path from 'path'\r\n import { dbConfig, logLevels } from './config/db-config'\r\n import { validators, ValidationError } from './utils/validators'\r\n import type { PostgrestError } from '@supabase/supabase-js'\r\n //import { Topic, Subtopic, Lesson, Question, ExercisePrompt, Activity } from '@/types/index'\r\n \r\n-// Load environment variables from .env file\r\n-dotenv.config({ path: '.env.local' })\r\n+// Load environment variables from root .env file\r\n+dotenv.config({ path: path.resolve(process.cwd(), '.env') })\r\n \r\n+// Debug environment variables\r\n+console.log('Environment variables:', {\r\n+  supabaseUrl: process.env.VITE_SUPABASE_URL,\r\n+  hasServiceKey: !!process.env.SUPABASE_SERVICE_KEY\r\n+})\r\n+\r\n // Define types based on your schema\r\n interface ExercisePrompt {\r\n   id?: string\r\n   text: string\r\n@@ -351,12 +358,15 @@\n }\r\n \r\n // Replace import.meta.env with process.env\r\n const supabaseUrl = process.env.VITE_SUPABASE_URL\r\n-const supabaseKey = process.env.SUPABASE_SERVICE_KEY  // Use service role key instead of anon key\r\n+const supabaseKey = process.env.SUPABASE_SERVICE_KEY\r\n \r\n if (!supabaseUrl || !supabaseKey) {\r\n-  throw new Error('Missing Supabase environment variables')\r\n+  throw new Error(`Missing Supabase environment variables:\r\n+    VITE_SUPABASE_URL: ${!!supabaseUrl}\r\n+    SUPABASE_SERVICE_KEY: ${!!supabaseKey}\r\n+  `)\r\n }\r\n \r\n const inserter = new DatabaseInserter(supabaseUrl, supabaseKey)\r\n \r\n"
                },
                {
                    "date": 1739484649888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -358,15 +358,12 @@\n }\r\n \r\n // Replace import.meta.env with process.env\r\n const supabaseUrl = process.env.VITE_SUPABASE_URL\r\n-const supabaseKey = process.env.SUPABASE_SERVICE_KEY\r\n+const supabaseKey = process.env.SUPABASE_SERVICE_KEY  // Use service role key instead of anon key\r\n \r\n if (!supabaseUrl || !supabaseKey) {\r\n-  throw new Error(`Missing Supabase environment variables:\r\n-    VITE_SUPABASE_URL: ${!!supabaseUrl}\r\n-    SUPABASE_SERVICE_KEY: ${!!supabaseKey}\r\n-  `)\r\n+  throw new Error('Missing Supabase environment variables')\r\n }\r\n \r\n const inserter = new DatabaseInserter(supabaseUrl, supabaseKey)\r\n \r\n"
                },
                {
                    "date": 1739484661994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -293,9 +293,9 @@\n         title: activity.title,\r\n         type: activity.type,\r\n         description: activity.description,\r\n         instructions: activity.instructions,\r\n-        duration: activity.duration,\r\n+        duration: activity.duration || 30,\r\n         lesson_id: lessonId\r\n       })))\r\n \r\n     if (activityError) throw activityError\r\n"
                },
                {
                    "date": 1739484804673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n }\r\n \r\n interface Activity {\r\n   id: string\r\n-  title: string\r\n+  name: string\r\n   type: string\r\n   description: string\r\n   instructions: string\r\n   duration: number\r\n@@ -289,18 +289,17 @@\n     const { error: activityError } = await this.supabase\r\n       .from(dbConfig.tables.activities)\r\n       .insert(activities.map((activity, index) => ({\r\n         id: activityIds[index],\r\n-        title: activity.title,\r\n+        name: activity.title || activity.name,\r\n         type: activity.type,\r\n         description: activity.description,\r\n         instructions: activity.instructions,\r\n         duration: activity.duration || 30,\r\n         lesson_id: lessonId\r\n       })))\r\n \r\n     if (activityError) throw activityError\r\n-    // Track each activity ID individually\r\n     activityIds.forEach(id => this.trackInsertedId(dbConfig.tables.activities, id))\r\n     this.logger.log('SUCCESS', 'Activities inserted')\r\n   }\r\n \r\n"
                },
                {
                    "date": 1739484838325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -289,17 +289,18 @@\n     const { error: activityError } = await this.supabase\r\n       .from(dbConfig.tables.activities)\r\n       .insert(activities.map((activity, index) => ({\r\n         id: activityIds[index],\r\n-        name: activity.title || activity.name,\r\n+        title: activity.title,\r\n         type: activity.type,\r\n         description: activity.description,\r\n         instructions: activity.instructions,\r\n         duration: activity.duration || 30,\r\n         lesson_id: lessonId\r\n       })))\r\n \r\n     if (activityError) throw activityError\r\n+    // Track each activity ID individually\r\n     activityIds.forEach(id => this.trackInsertedId(dbConfig.tables.activities, id))\r\n     this.logger.log('SUCCESS', 'Activities inserted')\r\n   }\r\n \r\n"
                },
                {
                    "date": 1739484882255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n }\r\n \r\n interface Activity {\r\n   id: string\r\n-  name: string\r\n+  title: string\r\n   type: string\r\n   description: string\r\n   instructions: string\r\n   duration: number\r\n"
                },
                {
                    "date": 1739484891580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -290,17 +290,17 @@\n       .from(dbConfig.tables.activities)\r\n       .insert(activities.map((activity, index) => ({\r\n         id: activityIds[index],\r\n         title: activity.title,\r\n+        name: activity.title,\r\n         type: activity.type,\r\n         description: activity.description,\r\n         instructions: activity.instructions,\r\n         duration: activity.duration || 30,\r\n         lesson_id: lessonId\r\n       })))\r\n \r\n     if (activityError) throw activityError\r\n-    // Track each activity ID individually\r\n     activityIds.forEach(id => this.trackInsertedId(dbConfig.tables.activities, id))\r\n     this.logger.log('SUCCESS', 'Activities inserted')\r\n   }\r\n \r\n"
                },
                {
                    "date": 1739485285196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -283,13 +283,37 @@\n     this.trackInsertedId(dbConfig.tables.exercise_prompts, promptId)\r\n     this.logger.log('SUCCESS', `Exercise prompt inserted`)\r\n   }\r\n \r\n+  private validateActivityType(type: string): boolean {\r\n+    const validTypes = ['individual', 'pair', 'group', 'class', 'homework', 'assessment'];\r\n+    return validTypes.includes(type);\r\n+  }\r\n+\r\n   private async processActivities(activities: Activity[], lessonId: string) {\r\n     const activityIds = activities.map(activity => uuidv4())\r\n+    \r\n+    // Convert legacy activity types to new format\r\n+    const normalizedActivities = activities.map(activity => ({\r\n+      ...activity,\r\n+      type: activity.type\r\n+        .replace('_activity', '')  // Remove _activity suffix\r\n+        .replace('class_activity', 'class')\r\n+        .replace('pair_activity', 'pair')\r\n+        .replace('group_activity', 'group')\r\n+        .replace('individual_activity', 'individual')\r\n+    }))\r\n+\r\n+    // Validate types before insertion\r\n+    normalizedActivities.forEach(activity => {\r\n+      if (!this.validateActivityType(activity.type)) {\r\n+        throw new Error(`Invalid activity type: ${activity.type}`)\r\n+      }\r\n+    })\r\n+\r\n     const { error: activityError } = await this.supabase\r\n       .from(dbConfig.tables.activities)\r\n-      .insert(activities.map((activity, index) => ({\r\n+      .insert(normalizedActivities.map((activity, index) => ({\r\n         id: activityIds[index],\r\n         title: activity.title,\r\n         name: activity.title,\r\n         type: activity.type,\r\n"
                },
                {
                    "date": 1739485439625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -244,26 +244,34 @@\n     }\r\n   }\r\n \r\n   private async processQuestion(question: Question, lessonId: string) {\r\n-    const questionId = uuidv4()\r\n+    // Map legacy question types to valid enum values\r\n+    const questionTypeMap: Record<string, string> = {\r\n+      'dialogue': 'conversation',  // Map 'dialogue' to a valid enum value\r\n+      'multiple_choice': 'multiple-choice',\r\n+      'fill_blank': 'fill-in-blank',\r\n+      // Add other mappings as needed\r\n+    };\r\n+\r\n+    const questionId = uuidv4();\r\n     const { error: questionError } = await this.supabase\r\n       .from(dbConfig.tables.questions)\r\n       .insert({\r\n         id: questionId,\r\n         title: question.title,\r\n         content: question.content,\r\n-        type: question.type,\r\n+        type: questionTypeMap[question.type] || question.type, // Use mapped value or original if no mapping exists\r\n         lesson_id: lessonId,\r\n         order_index: question.order_index\r\n-      })\r\n+      });\r\n \r\n-    if (questionError) throw questionError\r\n-    this.trackInsertedId(dbConfig.tables.questions, questionId)\r\n-    this.logger.log('SUCCESS', `Question \"${question.title}\" inserted`)\r\n+    if (questionError) throw questionError;\r\n+    this.trackInsertedId(dbConfig.tables.questions, questionId);\r\n+    this.logger.log('SUCCESS', `Question \"${question.title}\" inserted`);\r\n \r\n     for (const exercisePrompt of question.exercise_prompts) {\r\n-      await this.processExercisePrompt(exercisePrompt, questionId)\r\n+      await this.processExercisePrompt(exercisePrompt, questionId);\r\n     }\r\n   }\r\n \r\n   private async processExercisePrompt(exercisePrompt: ExercisePrompt, questionId: string) {\r\n"
                },
                {
                    "date": 1739485460357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,8 +80,20 @@\n   grade_id?: string\r\n   order_index: number\r\n }\r\n \r\n+const VALID_QUESTION_TYPES = [\r\n+  'multiple-choice',\r\n+  'fill-in-blank',\r\n+  'conversation',\r\n+  'matching',\r\n+  'ordering',\r\n+  'short-answer'\r\n+  // Add other valid types from your database enum\r\n+] as const;\r\n+\r\n+type ValidQuestionType = typeof VALID_QUESTION_TYPES[number];\r\n+\r\n class InsertionLogger {\r\n   private startTime: number\r\n \r\n   constructor() {\r\n@@ -335,8 +347,16 @@\n     activityIds.forEach(id => this.trackInsertedId(dbConfig.tables.activities, id))\r\n     this.logger.log('SUCCESS', 'Activities inserted')\r\n   }\r\n \r\n+  private validateQuestionType(type: string): type is ValidQuestionType {\r\n+    const mappedType = this.questionTypeMap[type] || type;\r\n+    if (!VALID_QUESTION_TYPES.includes(mappedType as ValidQuestionType)) {\r\n+      throw new ValidationError(`Invalid question type: ${type}. Valid types are: ${VALID_QUESTION_TYPES.join(', ')}`);\r\n+    }\r\n+    return true;\r\n+  }\r\n+\r\n   private validateData(data: any) {\r\n     this.logger.log('INFO', 'Validating data...')\r\n     \r\n     // Validate grade data\r\n@@ -364,8 +384,9 @@\n           for (const question of lesson.questions) {\r\n             validators.validateString(question.title, dbConfig.validation.maxTitleLength, 'Question title')\r\n             validators.validateString(question.content, dbConfig.validation.maxDescriptionLength, 'Question content')\r\n             validators.validateOrderIndex(question.order_index)\r\n+            this.validateQuestionType(question.type)\r\n \r\n             // Validate exercise prompts\r\n             for (const exercisePrompt of question.exercise_prompts) {\r\n               validators.validateString(exercisePrompt.text, dbConfig.validation.maxDescriptionLength, 'Exercise prompt text')\r\n"
                },
                {
                    "date": 1739485476397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,8 +114,13 @@\n class DatabaseInserter {\r\n   private supabase\r\n   private logger\r\n   private insertedIds: Map<string, string[]>\r\n+  private questionTypeMap: Record<string, string> = {\r\n+    'dialogue': 'conversation',\r\n+    'multiple_choice': 'multiple-choice',\r\n+    'fill_blank': 'fill-in-blank'\r\n+  }\r\n \r\n   constructor(supabaseUrl: string, supabaseKey: string) {\r\n     this.supabase = createClient(supabaseUrl, supabaseKey)\r\n     this.logger = new InsertionLogger()\r\n@@ -256,24 +261,16 @@\n     }\r\n   }\r\n \r\n   private async processQuestion(question: Question, lessonId: string) {\r\n-    // Map legacy question types to valid enum values\r\n-    const questionTypeMap: Record<string, string> = {\r\n-      'dialogue': 'conversation',  // Map 'dialogue' to a valid enum value\r\n-      'multiple_choice': 'multiple-choice',\r\n-      'fill_blank': 'fill-in-blank',\r\n-      // Add other mappings as needed\r\n-    };\r\n-\r\n     const questionId = uuidv4();\r\n     const { error: questionError } = await this.supabase\r\n       .from(dbConfig.tables.questions)\r\n       .insert({\r\n         id: questionId,\r\n         title: question.title,\r\n         content: question.content,\r\n-        type: questionTypeMap[question.type] || question.type, // Use mapped value or original if no mapping exists\r\n+        type: this.questionTypeMap[question.type] || question.type,\r\n         lesson_id: lessonId,\r\n         order_index: question.order_index\r\n       });\r\n \r\n"
                },
                {
                    "date": 1739485481897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,8 +118,9 @@\n   private questionTypeMap: Record<string, string> = {\r\n     'dialogue': 'conversation',\r\n     'multiple_choice': 'multiple-choice',\r\n     'fill_blank': 'fill-in-blank'\r\n+    \r\n   }\r\n \r\n   constructor(supabaseUrl: string, supabaseKey: string) {\r\n     this.supabase = createClient(supabaseUrl, supabaseKey)\r\n"
                },
                {
                    "date": 1739485490628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,12 @@\n   private insertedIds: Map<string, string[]>\r\n   private questionTypeMap: Record<string, string> = {\r\n     'dialogue': 'conversation',\r\n     'multiple_choice': 'multiple-choice',\r\n-    'fill_blank': 'fill-in-blank'\r\n+    'fill_blank': 'fill-in-blank',\r\n+    'matching': 'matching',\r\n+    'ordering': 'ordering',\r\n+    'short_answer': 'short-answer'\r\n     \r\n   }\r\n \r\n   constructor(supabaseUrl: string, supabaseKey: string) {\r\n"
                },
                {
                    "date": 1739485495829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,8 +122,9 @@\n     'matching': 'matching',\r\n     'ordering': 'ordering',\r\n     'short_answer': 'short-answer'\r\n     \r\n+\r\n   }\r\n \r\n   constructor(supabaseUrl: string, supabaseKey: string) {\r\n     this.supabase = createClient(supabaseUrl, supabaseKey)\r\n"
                },
                {
                    "date": 1739485502942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,11 +120,11 @@\n     'multiple_choice': 'multiple-choice',\r\n     'fill_blank': 'fill-in-blank',\r\n     'matching': 'matching',\r\n     'ordering': 'ordering',\r\n-    'short_answer': 'short-answer'\r\n-    \r\n+    'short_answer': 'short-answer',\r\n \r\n+\r\n   }\r\n \r\n   constructor(supabaseUrl: string, supabaseKey: string) {\r\n     this.supabase = createClient(supabaseUrl, supabaseKey)\r\n"
                },
                {
                    "date": 1739485512144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,10 +121,10 @@\n     'fill_blank': 'fill-in-blank',\r\n     'matching': 'matching',\r\n     'ordering': 'ordering',\r\n     'short_answer': 'short-answer',\r\n+    \r\n \r\n-\r\n   }\r\n \r\n   constructor(supabaseUrl: string, supabaseKey: string) {\r\n     this.supabase = createClient(supabaseUrl, supabaseKey)\r\n"
                },
                {
                    "date": 1739485531102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n     'fill_blank': 'fill-in-blank',\r\n     'matching': 'matching',\r\n     'ordering': 'ordering',\r\n     'short_answer': 'short-answer',\r\n-    \r\n+    'speaking': 'speaking',\r\n \r\n   }\r\n \r\n   constructor(supabaseUrl: string, supabaseKey: string) {\r\n"
                },
                {
                    "date": 1739485565372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,10 @@\n   'fill-in-blank',\r\n   'conversation',\r\n   'matching',\r\n   'ordering',\r\n-  'short-answer'\r\n+  'short-answer',\r\n+  'speaking'\r\n   // Add other valid types from your database enum\r\n ] as const;\r\n \r\n type ValidQuestionType = typeof VALID_QUESTION_TYPES[number];\r\n@@ -121,10 +122,9 @@\n     'fill_blank': 'fill-in-blank',\r\n     'matching': 'matching',\r\n     'ordering': 'ordering',\r\n     'short_answer': 'short-answer',\r\n-    'speaking': 'speaking',\r\n-\r\n+    'speaking': 'speaking'\r\n   }\r\n \r\n   constructor(supabaseUrl: string, supabaseKey: string) {\r\n     this.supabase = createClient(supabaseUrl, supabaseKey)\r\n"
                },
                {
                    "date": 1739485594780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,10 @@\n   'conversation',\r\n   'matching',\r\n   'ordering',\r\n   'short-answer',\r\n-  'speaking'\r\n+  'speaking',\r\n+  'story-telling'\r\n   // Add other valid types from your database enum\r\n ] as const;\r\n \r\n type ValidQuestionType = typeof VALID_QUESTION_TYPES[number];\r\n@@ -122,9 +123,10 @@\n     'fill_blank': 'fill-in-blank',\r\n     'matching': 'matching',\r\n     'ordering': 'ordering',\r\n     'short_answer': 'short-answer',\r\n-    'speaking': 'speaking'\r\n+    'speaking': 'speaking',\r\n+    'story_telling': 'story-telling'\r\n   }\r\n \r\n   constructor(supabaseUrl: string, supabaseKey: string) {\r\n     this.supabase = createClient(supabaseUrl, supabaseKey)\r\n"
                },
                {
                    "date": 1739485625405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,10 +88,10 @@\n   'matching',\r\n   'ordering',\r\n   'short-answer',\r\n   'speaking',\r\n-  'story-telling'\r\n-  // Add other valid types from your database enum\r\n+  'story-telling',\r\n+  'question-answer'\r\n ] as const;\r\n \r\n type ValidQuestionType = typeof VALID_QUESTION_TYPES[number];\r\n \r\n@@ -124,9 +124,10 @@\n     'matching': 'matching',\r\n     'ordering': 'ordering',\r\n     'short_answer': 'short-answer',\r\n     'speaking': 'speaking',\r\n-    'story_telling': 'story-telling'\r\n+    'story_telling': 'story-telling',\r\n+    'question_answer': 'question-answer'\r\n   }\r\n \r\n   constructor(supabaseUrl: string, supabaseKey: string) {\r\n     this.supabase = createClient(supabaseUrl, supabaseKey)\r\n"
                },
                {
                    "date": 1739485656217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,10 @@\n   'ordering',\r\n   'short-answer',\r\n   'speaking',\r\n   'story-telling',\r\n-  'question-answer'\r\n+  'question-answer',\r\n+  'role-play'\r\n ] as const;\r\n \r\n type ValidQuestionType = typeof VALID_QUESTION_TYPES[number];\r\n \r\n@@ -125,9 +126,10 @@\n     'ordering': 'ordering',\r\n     'short_answer': 'short-answer',\r\n     'speaking': 'speaking',\r\n     'story_telling': 'story-telling',\r\n-    'question_answer': 'question-answer'\r\n+    'question_answer': 'question-answer',\r\n+    'role_play': 'role-play'\r\n   }\r\n \r\n   constructor(supabaseUrl: string, supabaseKey: string) {\r\n     this.supabase = createClient(supabaseUrl, supabaseKey)\r\n"
                },
                {
                    "date": 1739485699581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,10 @@\n   'short-answer',\r\n   'speaking',\r\n   'story-telling',\r\n   'question-answer',\r\n-  'role-play'\r\n+  'role-play',\r\n+  'morning-routine'\r\n ] as const;\r\n \r\n type ValidQuestionType = typeof VALID_QUESTION_TYPES[number];\r\n \r\n@@ -127,9 +128,10 @@\n     'short_answer': 'short-answer',\r\n     'speaking': 'speaking',\r\n     'story_telling': 'story-telling',\r\n     'question_answer': 'question-answer',\r\n-    'role_play': 'role-play'\r\n+    'role_play': 'role-play',\r\n+    'morning_routine': 'morning-routine'\r\n   }\r\n \r\n   constructor(supabaseUrl: string, supabaseKey: string) {\r\n     this.supabase = createClient(supabaseUrl, supabaseKey)\r\n"
                },
                {
                    "date": 1739485728388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,9 +91,10 @@\n   'speaking',\r\n   'story-telling',\r\n   'question-answer',\r\n   'role-play',\r\n-  'morning-routine'\r\n+  'morning-routine',\r\n+  'activity-description'\r\n ] as const;\r\n \r\n type ValidQuestionType = typeof VALID_QUESTION_TYPES[number];\r\n \r\n@@ -129,9 +130,10 @@\n     'speaking': 'speaking',\r\n     'story_telling': 'story-telling',\r\n     'question_answer': 'question-answer',\r\n     'role_play': 'role-play',\r\n-    'morning_routine': 'morning-routine'\r\n+    'morning_routine': 'morning-routine',\r\n+    'activity_description': 'activity-description'\r\n   }\r\n \r\n   constructor(supabaseUrl: string, supabaseKey: string) {\r\n     this.supabase = createClient(supabaseUrl, supabaseKey)\r\n"
                },
                {
                    "date": 1739485750428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,10 @@\n   'story-telling',\r\n   'question-answer',\r\n   'role-play',\r\n   'morning-routine',\r\n-  'activity-description'\r\n+  'activity-description',\r\n+  'asking-help'\r\n ] as const;\r\n \r\n type ValidQuestionType = typeof VALID_QUESTION_TYPES[number];\r\n \r\n@@ -131,9 +132,10 @@\n     'story_telling': 'story-telling',\r\n     'question_answer': 'question-answer',\r\n     'role_play': 'role-play',\r\n     'morning_routine': 'morning-routine',\r\n-    'activity_description': 'activity-description'\r\n+    'activity_description': 'activity-description',\r\n+    'asking_help': 'asking-help'\r\n   }\r\n \r\n   constructor(supabaseUrl: string, supabaseKey: string) {\r\n     this.supabase = createClient(supabaseUrl, supabaseKey)\r\n"
                },
                {
                    "date": 1739485772881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,10 @@\n   'question-answer',\r\n   'role-play',\r\n   'morning-routine',\r\n   'activity-description',\r\n-  'asking-help'\r\n+  'asking-help',\r\n+  'sharing-experiences'\r\n ] as const;\r\n \r\n type ValidQuestionType = typeof VALID_QUESTION_TYPES[number];\r\n \r\n@@ -133,9 +134,10 @@\n     'question_answer': 'question-answer',\r\n     'role_play': 'role-play',\r\n     'morning_routine': 'morning-routine',\r\n     'activity_description': 'activity-description',\r\n-    'asking_help': 'asking-help'\r\n+    'asking_help': 'asking-help',\r\n+    'sharing_experiences': 'sharing-experiences'\r\n   }\r\n \r\n   constructor(supabaseUrl: string, supabaseKey: string) {\r\n     this.supabase = createClient(supabaseUrl, supabaseKey)\r\n"
                },
                {
                    "date": 1739485797525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,10 +134,9 @@\n     'question_answer': 'question-answer',\r\n     'role_play': 'role-play',\r\n     'morning_routine': 'morning-routine',\r\n     'activity_description': 'activity-description',\r\n-    'asking_help': 'asking-help',\r\n-    'sharing_experiences': 'sharing-experiences'\r\n+    'asking_help': 'asking-help'\r\n   }\r\n \r\n   constructor(supabaseUrl: string, supabaseKey: string) {\r\n     this.supabase = createClient(supabaseUrl, supabaseKey)\r\n"
                },
                {
                    "date": 1739485976061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,16 @@\n   'role-play',\r\n   'morning-routine',\r\n   'activity-description',\r\n   'asking-help',\r\n-  'sharing-experiences'\r\n+  'sharing-experiences',\r\n+  'problem-solving',\r\n+  'fun-speaking',\r\n+  'game-words',\r\n+  'sharing',\r\n+  'singing',\r\n+  'happy-words',\r\n+  'action-words'\r\n ] as const;\r\n \r\n type ValidQuestionType = typeof VALID_QUESTION_TYPES[number];\r\n \r\n@@ -134,9 +141,17 @@\n     'question_answer': 'question-answer',\r\n     'role_play': 'role-play',\r\n     'morning_routine': 'morning-routine',\r\n     'activity_description': 'activity-description',\r\n-    'asking_help': 'asking-help'\r\n+    'asking_help': 'asking-help',\r\n+    'sharing_experiences': 'sharing-experiences',\r\n+    'problem_solving': 'problem-solving',\r\n+    'fun_speaking': 'fun-speaking',\r\n+    'game_words': 'game-words',\r\n+    'sharing': 'sharing',\r\n+    'singing': 'singing',\r\n+    'happy_words': 'happy-words',\r\n+    'action_words': 'action-words'\r\n   }\r\n \r\n   constructor(supabaseUrl: string, supabaseKey: string) {\r\n     this.supabase = createClient(supabaseUrl, supabaseKey)\r\n"
                },
                {
                    "date": 1739486186414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,25 @@\n console.log('Environment variables:', {\r\n   supabaseUrl: process.env.VITE_SUPABASE_URL,\r\n   hasServiceKey: !!process.env.SUPABASE_SERVICE_KEY\r\n })\r\n+const fs = require('fs');\r\n+const data = JSON.parse(fs.readFileSync('src/data/pp1_data.json', 'utf8'));\r\n \r\n+const questionTypes = new Set();\r\n+\r\n+// Recursive function to find all question types\r\n+function findQuestionTypes(obj: any) {\r\n+  if (obj && typeof obj === 'object') {\r\n+    if (obj.type && obj.id && obj.id.startsWith('pp1')) {\r\n+      questionTypes.add(obj.type);\r\n+    }\r\n+    Object.values(obj).forEach(value => findQuestionTypes(value));\r\n+  }\r\n+}\r\n+\r\n+findQuestionTypes(data);\r\n+console.log('Found question types:', Array.from(questionTypes));\r\n // Define types based on your schema\r\n interface ExercisePrompt {\r\n   id?: string\r\n   text: string\r\n"
                },
                {
                    "date": 1739486191610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,8 +33,10 @@\n }\r\n \r\n findQuestionTypes(data);\r\n console.log('Found question types:', Array.from(questionTypes));\r\n+\r\n+\r\n // Define types based on your schema\r\n interface ExercisePrompt {\r\n   id?: string\r\n   text: string\r\n"
                },
                {
                    "date": 1739486227896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,29 +99,16 @@\n   order_index: number\r\n }\r\n \r\n const VALID_QUESTION_TYPES = [\r\n-  'multiple-choice',\r\n-  'fill-in-blank',\r\n-  'conversation',\r\n-  'matching',\r\n-  'ordering',\r\n-  'short-answer',\r\n   'speaking',\r\n-  'story-telling',\r\n-  'question-answer',\r\n-  'role-play',\r\n-  'morning-routine',\r\n-  'activity-description',\r\n-  'asking-help',\r\n-  'sharing-experiences',\r\n-  'problem-solving',\r\n-  'fun-speaking',\r\n-  'game-words',\r\n-  'sharing',\r\n-  'singing',\r\n-  'happy-words',\r\n-  'action-words'\r\n+  'review-ten',\r\n+  'counting-objects',\r\n+  'counting-actions',\r\n+  'counting-groups',\r\n+  'counting-colors',\r\n+  'counting-together',\r\n+  'final-review'\r\n ] as const;\r\n \r\n type ValidQuestionType = typeof VALID_QUESTION_TYPES[number];\r\n \r\n@@ -147,29 +134,16 @@\n   private supabase\r\n   private logger\r\n   private insertedIds: Map<string, string[]>\r\n   private questionTypeMap: Record<string, string> = {\r\n-    'dialogue': 'conversation',\r\n-    'multiple_choice': 'multiple-choice',\r\n-    'fill_blank': 'fill-in-blank',\r\n-    'matching': 'matching',\r\n-    'ordering': 'ordering',\r\n-    'short_answer': 'short-answer',\r\n     'speaking': 'speaking',\r\n-    'story_telling': 'story-telling',\r\n-    'question_answer': 'question-answer',\r\n-    'role_play': 'role-play',\r\n-    'morning_routine': 'morning-routine',\r\n-    'activity_description': 'activity-description',\r\n-    'asking_help': 'asking-help',\r\n-    'sharing_experiences': 'sharing-experiences',\r\n-    'problem_solving': 'problem-solving',\r\n-    'fun_speaking': 'fun-speaking',\r\n-    'game_words': 'game-words',\r\n-    'sharing': 'sharing',\r\n-    'singing': 'singing',\r\n-    'happy_words': 'happy-words',\r\n-    'action_words': 'action-words'\r\n+    'review_ten': 'review-ten',\r\n+    'counting_objects': 'counting-objects',\r\n+    'counting_actions': 'counting-actions',\r\n+    'counting_groups': 'counting-groups',\r\n+    'counting_colors': 'counting-colors',\r\n+    'counting_together': 'counting-together',\r\n+    'final_review': 'final-review'\r\n   }\r\n \r\n   constructor(supabaseUrl: string, supabaseKey: string) {\r\n     this.supabase = createClient(supabaseUrl, supabaseKey)\r\n"
                },
                {
                    "date": 1739486235807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,8 +99,14 @@\n   order_index: number\r\n }\r\n \r\n const VALID_QUESTION_TYPES = [\r\n+  'multiple-choice',\r\n+  'fill-in-blank',\r\n+  'conversation',\r\n+  'matching',\r\n+  'ordering',\r\n+  'short-answer',\r\n   'speaking',\r\n   'review-ten',\r\n   'counting-objects',\r\n   'counting-actions',\r\n"
                },
                {
                    "date": 1739486248975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,8 +106,23 @@\n   'matching',\r\n   'ordering',\r\n   'short-answer',\r\n   'speaking',\r\n+  'story-telling',\r\n+  'question-answer',\r\n+  'role-play',\r\n+  'morning-routine',\r\n+  'activity-description',\r\n+  'asking-help',\r\n+  'sharing-experiences',\r\n+  'problem-solving',\r\n+  'fun-speaking',\r\n+  'game-words',\r\n+  'sharing',\r\n+  'singing',\r\n+  'happy-words',\r\n+  'action-words',\r\n+  'speaking',\r\n   'review-ten',\r\n   'counting-objects',\r\n   'counting-actions',\r\n   'counting-groups',\r\n"
                },
                {
                    "date": 1739486260389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,8 +155,14 @@\n   private supabase\r\n   private logger\r\n   private insertedIds: Map<string, string[]>\r\n   private questionTypeMap: Record<string, string> = {\r\n+    'dialogue': 'conversation',\r\n+    'multiple_choice': 'multiple-choice',\r\n+    'fill_blank': 'fill-in-blank',\r\n+    'matching': 'matching',\r\n+    'ordering': 'ordering',\r\n+    'short_answer': 'short-answer',\r\n     'speaking': 'speaking',\r\n     'review_ten': 'review-ten',\r\n     'counting_objects': 'counting-objects',\r\n     'counting_actions': 'counting-actions',\r\n"
                },
                {
                    "date": 1739486271114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,8 +162,23 @@\n     'matching': 'matching',\r\n     'ordering': 'ordering',\r\n     'short_answer': 'short-answer',\r\n     'speaking': 'speaking',\r\n+    'story_telling': 'story-telling',\r\n+    'question_answer': 'question-answer',\r\n+    'role_play': 'role-play',\r\n+    'morning_routine': 'morning-routine',\r\n+    'activity_description': 'activity-description',\r\n+    'asking_help': 'asking-help',\r\n+    'sharing_experiences': 'sharing-experiences',\r\n+    'problem_solving': 'problem-solving',\r\n+    'fun_speaking': 'fun-speaking',\r\n+    'game_words': 'game-words',\r\n+    'sharing': 'sharing',\r\n+    'singing': 'singing',\r\n+    'happy_words': 'happy-words',\r\n+    'action_words': 'action-words',\r\n+    'speaking': 'speaking',\r\n     'review_ten': 'review-ten',\r\n     'counting_objects': 'counting-objects',\r\n     'counting_actions': 'counting-actions',\r\n     'counting_groups': 'counting-groups',\r\n"
                },
                {
                    "date": 1739486276712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,9 +176,9 @@\n     'sharing': 'sharing',\r\n     'singing': 'singing',\r\n     'happy_words': 'happy-words',\r\n     'action_words': 'action-words',\r\n-    'speaking': 'speaking',\r\n+    \r\n     'review_ten': 'review-ten',\r\n     'counting_objects': 'counting-objects',\r\n     'counting_actions': 'counting-actions',\r\n     'counting_groups': 'counting-groups',\r\n"
                },
                {
                    "date": 1739486307080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n console.log('Environment variables:', {\r\n   supabaseUrl: process.env.VITE_SUPABASE_URL,\r\n   hasServiceKey: !!process.env.SUPABASE_SERVICE_KEY\r\n })\r\n-const fs = require('fs');\r\n+import fs from 'fs'\r\n const data = JSON.parse(fs.readFileSync('src/data/pp1_data.json', 'utf8'));\r\n \r\n const questionTypes = new Set();\r\n \r\n@@ -176,9 +176,8 @@\n     'sharing': 'sharing',\r\n     'singing': 'singing',\r\n     'happy_words': 'happy-words',\r\n     'action_words': 'action-words',\r\n-    \r\n     'review_ten': 'review-ten',\r\n     'counting_objects': 'counting-objects',\r\n     'counting_actions': 'counting-actions',\r\n     'counting_groups': 'counting-groups',\r\n"
                },
                {
                    "date": 1739486364246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,37 +99,77 @@\n   order_index: number\r\n }\r\n \r\n const VALID_QUESTION_TYPES = [\r\n-  'multiple-choice',\r\n-  'fill-in-blank',\r\n-  'conversation',\r\n-  'matching',\r\n-  'ordering',\r\n-  'short-answer',\r\n   'speaking',\r\n-  'story-telling',\r\n-  'question-answer',\r\n-  'role-play',\r\n-  'morning-routine',\r\n-  'activity-description',\r\n-  'asking-help',\r\n-  'sharing-experiences',\r\n-  'problem-solving',\r\n-  'fun-speaking',\r\n-  'game-words',\r\n+  'dialogue',\r\n+  'story_telling',\r\n+  'question_answer',\r\n+  'role_play',\r\n+  'morning_routine',\r\n+  'activity_description',\r\n+  'asking_help',\r\n+  'sharing_experiences',\r\n+  'problem_solving',\r\n+  'fun_speaking',\r\n+  'game_words',\r\n   'sharing',\r\n   'singing',\r\n-  'happy-words',\r\n-  'action-words',\r\n-  'speaking',\r\n-  'review-ten',\r\n-  'counting-objects',\r\n-  'counting-actions',\r\n-  'counting-groups',\r\n-  'counting-colors',\r\n-  'counting-together',\r\n-  'final-review'\r\n+  'happy_words',\r\n+  'action_words',\r\n+  'action_songs',\r\n+  'follow_leader',\r\n+  'animal_actions',\r\n+  'playtime_words',\r\n+  'toy_words',\r\n+  'game_choices',\r\n+  'play_areas',\r\n+  'play_rules',\r\n+  'play_feelings',\r\n+  'play_invitations',\r\n+  'sharing_words',\r\n+  'kind_words',\r\n+  'play_help',\r\n+  'cleanup_time',\r\n+  'playground_words',\r\n+  'outdoor_games',\r\n+  'safety_words',\r\n+  'weather_words',\r\n+  'line_up',\r\n+  'playground_friends',\r\n+  'movement_words',\r\n+  'playground_rules',\r\n+  'playground_feelings',\r\n+  'cleanup_outside',\r\n+  'number_one',\r\n+  'number_two',\r\n+  'counting_objects',\r\n+  'body_parts',\r\n+  'classroom_items',\r\n+  'counting_actions',\r\n+  'counting_friends',\r\n+  'counting_sounds',\r\n+  'counting_colors',\r\n+  'counting_review',\r\n+  'number_three',\r\n+  'number_four',\r\n+  'counting_toys',\r\n+  'counting_fingers',\r\n+  'counting_steps',\r\n+  'counting_claps',\r\n+  'counting_animals',\r\n+  'number_six',\r\n+  'number_seven',\r\n+  'number_eight',\r\n+  'number_nine',\r\n+  'number_ten',\r\n+  'counting_together',\r\n+  'final_review',\r\n+  'count_up',\r\n+  'review_six_seven',\r\n+  'review_eight_nine',\r\n+  'review_ten',\r\n+  'counting_groups'\r\n ] as const;\r\n \r\n type ValidQuestionType = typeof VALID_QUESTION_TYPES[number];\r\n \r\n@@ -155,36 +195,77 @@\n   private supabase\r\n   private logger\r\n   private insertedIds: Map<string, string[]>\r\n   private questionTypeMap: Record<string, string> = {\r\n-    'dialogue': 'conversation',\r\n-    'multiple_choice': 'multiple-choice',\r\n-    'fill_blank': 'fill-in-blank',\r\n-    'matching': 'matching',\r\n-    'ordering': 'ordering',\r\n-    'short_answer': 'short-answer',\r\n     'speaking': 'speaking',\r\n-    'story_telling': 'story-telling',\r\n-    'question_answer': 'question-answer',\r\n-    'role_play': 'role-play',\r\n-    'morning_routine': 'morning-routine',\r\n-    'activity_description': 'activity-description',\r\n-    'asking_help': 'asking-help',\r\n-    'sharing_experiences': 'sharing-experiences',\r\n-    'problem_solving': 'problem-solving',\r\n-    'fun_speaking': 'fun-speaking',\r\n-    'game_words': 'game-words',\r\n+    'dialogue': 'dialogue',\r\n+    'story_telling': 'story_telling',\r\n+    'question_answer': 'question_answer',\r\n+    'role_play': 'role_play',\r\n+    'morning_routine': 'morning_routine',\r\n+    'activity_description': 'activity_description',\r\n+    'asking_help': 'asking_help',\r\n+    'sharing_experiences': 'sharing_experiences',\r\n+    'problem_solving': 'problem_solving',\r\n+    'fun_speaking': 'fun_speaking',\r\n+    'game_words': 'game_words',\r\n     'sharing': 'sharing',\r\n     'singing': 'singing',\r\n-    'happy_words': 'happy-words',\r\n-    'action_words': 'action-words',\r\n-    'review_ten': 'review-ten',\r\n-    'counting_objects': 'counting-objects',\r\n-    'counting_actions': 'counting-actions',\r\n-    'counting_groups': 'counting-groups',\r\n-    'counting_colors': 'counting-colors',\r\n-    'counting_together': 'counting-together',\r\n-    'final_review': 'final-review'\r\n+    'happy_words': 'happy_words',\r\n+    'action_words': 'action_words',\r\n+    'action_songs': 'action_songs',\r\n+    'follow_leader': 'follow_leader',\r\n+    'animal_actions': 'animal_actions',\r\n+    'playtime_words': 'playtime_words',\r\n+    'toy_words': 'toy_words',\r\n+    'game_choices': 'game_choices',\r\n+    'play_areas': 'play_areas',\r\n+    'play_rules': 'play_rules',\r\n+    'play_feelings': 'play_feelings',\r\n+    'play_invitations': 'play_invitations',\r\n+    'sharing_words': 'sharing_words',\r\n+    'kind_words': 'kind_words',\r\n+    'play_help': 'play_help',\r\n+    'cleanup_time': 'cleanup_time',\r\n+    'playground_words': 'playground_words',\r\n+    'outdoor_games': 'outdoor_games',\r\n+    'safety_words': 'safety_words',\r\n+    'weather_words': 'weather_words',\r\n+    'line_up': 'line_up',\r\n+    'playground_friends': 'playground_friends',\r\n+    'movement_words': 'movement_words',\r\n+    'playground_rules': 'playground_rules',\r\n+    'playground_feelings': 'playground_feelings',\r\n+    'cleanup_outside': 'cleanup_outside',\r\n+    'number_one': 'number_one',\r\n+    'number_two': 'number_two',\r\n+    'counting_objects': 'counting_objects',\r\n+    'body_parts': 'body_parts',\r\n+    'classroom_items': 'classroom_items',\r\n+    'counting_actions': 'counting_actions',\r\n+    'counting_friends': 'counting_friends',\r\n+    'counting_sounds': 'counting_sounds',\r\n+    'counting_colors': 'counting_colors',\r\n+    'counting_review': 'counting_review',\r\n+    'number_three': 'number_three',\r\n+    'number_four': 'number_four',\r\n+    'counting_toys': 'counting_toys',\r\n+    'counting_fingers': 'counting_fingers',\r\n+    'counting_steps': 'counting_steps',\r\n+    'counting_claps': 'counting_claps',\r\n+    'counting_animals': 'counting_animals',\r\n+    'number_six': 'number_six',\r\n+    'number_seven': 'number_seven',\r\n+    'number_eight': 'number_eight',\r\n+    'number_nine': 'number_nine',\r\n+    'number_ten': 'number_ten',\r\n+    'counting_together': 'counting_together',\r\n+    'final_review': 'final_review',\r\n+    'count_up': 'count_up',\r\n+    'review_six_seven': 'review_six_seven',\r\n+    'review_eight_nine': 'review_eight_nine',\r\n+    'review_ten': 'review_ten',\r\n+    'counting_groups': 'counting_groups'\r\n   }\r\n \r\n   constructor(supabaseUrl: string, supabaseKey: string) {\r\n     this.supabase = createClient(supabaseUrl, supabaseKey)\r\n"
                },
                {
                    "date": 1739487151395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -190,82 +190,33 @@\n     }\r\n   }\r\n }\r\n \r\n+// Keep our core question type mapping\r\n+const QUESTION_TYPE_MAPPING: Record<string, QuestionType> = {\r\n+  // Speaking-related types map to 'speaking'\r\n+  'speaking': 'speaking',\r\n+  'fun_speaking': 'speaking',\r\n+  'sharing': 'speaking',\r\n+  // ... rest of the mappings as before ...\r\n+};\r\n+\r\n class DatabaseInserter {\r\n   private supabase\r\n   private logger\r\n   private insertedIds: Map<string, string[]>\r\n-  private questionTypeMap: Record<string, string> = {\r\n-    'speaking': 'speaking',\r\n-    'dialogue': 'dialogue',\r\n-    'story_telling': 'story_telling',\r\n-    'question_answer': 'question_answer',\r\n-    'role_play': 'role_play',\r\n-    'morning_routine': 'morning_routine',\r\n-    'activity_description': 'activity_description',\r\n-    'asking_help': 'asking_help',\r\n-    'sharing_experiences': 'sharing_experiences',\r\n-    'problem_solving': 'problem_solving',\r\n-    'fun_speaking': 'fun_speaking',\r\n-    'game_words': 'game_words',\r\n-    'sharing': 'sharing',\r\n-    'singing': 'singing',\r\n-    'happy_words': 'happy_words',\r\n-    'action_words': 'action_words',\r\n-    'action_songs': 'action_songs',\r\n-    'follow_leader': 'follow_leader',\r\n-    'animal_actions': 'animal_actions',\r\n-    'playtime_words': 'playtime_words',\r\n-    'toy_words': 'toy_words',\r\n-    'game_choices': 'game_choices',\r\n-    'play_areas': 'play_areas',\r\n-    'play_rules': 'play_rules',\r\n-    'play_feelings': 'play_feelings',\r\n-    'play_invitations': 'play_invitations',\r\n-    'sharing_words': 'sharing_words',\r\n-    'kind_words': 'kind_words',\r\n-    'play_help': 'play_help',\r\n-    'cleanup_time': 'cleanup_time',\r\n-    'playground_words': 'playground_words',\r\n-    'outdoor_games': 'outdoor_games',\r\n-    'safety_words': 'safety_words',\r\n-    'weather_words': 'weather_words',\r\n-    'line_up': 'line_up',\r\n-    'playground_friends': 'playground_friends',\r\n-    'movement_words': 'movement_words',\r\n-    'playground_rules': 'playground_rules',\r\n-    'playground_feelings': 'playground_feelings',\r\n-    'cleanup_outside': 'cleanup_outside',\r\n-    'number_one': 'number_one',\r\n-    'number_two': 'number_two',\r\n-    'counting_objects': 'counting_objects',\r\n-    'body_parts': 'body_parts',\r\n-    'classroom_items': 'classroom_items',\r\n-    'counting_actions': 'counting_actions',\r\n-    'counting_friends': 'counting_friends',\r\n-    'counting_sounds': 'counting_sounds',\r\n-    'counting_colors': 'counting_colors',\r\n-    'counting_review': 'counting_review',\r\n-    'number_three': 'number_three',\r\n-    'number_four': 'number_four',\r\n-    'counting_toys': 'counting_toys',\r\n-    'counting_fingers': 'counting_fingers',\r\n-    'counting_steps': 'counting_steps',\r\n-    'counting_claps': 'counting_claps',\r\n-    'counting_animals': 'counting_animals',\r\n-    'number_six': 'number_six',\r\n-    'number_seven': 'number_seven',\r\n-    'number_eight': 'number_eight',\r\n-    'number_nine': 'number_nine',\r\n-    'number_ten': 'number_ten',\r\n-    'counting_together': 'counting_together',\r\n-    'final_review': 'final_review',\r\n-    'count_up': 'count_up',\r\n-    'review_six_seven': 'review_six_seven',\r\n-    'review_eight_nine': 'review_eight_nine',\r\n-    'review_ten': 'review_ten',\r\n-    'counting_groups': 'counting_groups'\r\n+\r\n+  private mapQuestionType(originalType: string): QuestionType {\r\n+    const mappedType = QUESTION_TYPE_MAPPING[originalType];\r\n+    if (!mappedType) {\r\n+      this.logger.warn({\r\n+        message: `Unknown question type \"${originalType}\" - defaulting to \"speaking\"`,\r\n+        context: { originalType },\r\n+        source: 'DatabaseInserter'\r\n+      });\r\n+      return 'speaking';\r\n+    }\r\n+    return mappedType;\r\n   }\r\n \r\n   constructor(supabaseUrl: string, supabaseKey: string) {\r\n     this.supabase = createClient(supabaseUrl, supabaseKey)\r\n@@ -408,22 +359,26 @@\n   }\r\n \r\n   private async processQuestion(question: Question, lessonId: string) {\r\n     const questionId = uuidv4();\r\n+    const mappedType = this.mapQuestionType(question.type);\r\n+    \r\n     const { error: questionError } = await this.supabase\r\n       .from(dbConfig.tables.questions)\r\n       .insert({\r\n         id: questionId,\r\n         title: question.title,\r\n         content: question.content,\r\n-        type: this.questionTypeMap[question.type] || question.type,\r\n+        type: mappedType,           // Main question type (from our core types)\r\n+        sub_type: question.type,    // Original, more specific type\r\n         lesson_id: lessonId,\r\n-        order_index: question.order_index\r\n+        order_index: question.order_index,\r\n+        metadata: question.metadata\r\n       });\r\n \r\n     if (questionError) throw questionError;\r\n     this.trackInsertedId(dbConfig.tables.questions, questionId);\r\n-    this.logger.log('SUCCESS', `Question \"${question.title}\" inserted`);\r\n+    this.logger.log('SUCCESS', `Question \"${question.title}\" inserted with type ${mappedType} and sub_type ${question.type}`);\r\n \r\n     for (const exercisePrompt of question.exercise_prompts) {\r\n       await this.processExercisePrompt(exercisePrompt, questionId);\r\n     }\r\n"
                },
                {
                    "date": 1739487163675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -190,33 +190,82 @@\n     }\r\n   }\r\n }\r\n \r\n-// Keep our core question type mapping\r\n-const QUESTION_TYPE_MAPPING: Record<string, QuestionType> = {\r\n-  // Speaking-related types map to 'speaking'\r\n-  'speaking': 'speaking',\r\n-  'fun_speaking': 'speaking',\r\n-  'sharing': 'speaking',\r\n-  // ... rest of the mappings as before ...\r\n-};\r\n-\r\n class DatabaseInserter {\r\n   private supabase\r\n   private logger\r\n   private insertedIds: Map<string, string[]>\r\n-\r\n-  private mapQuestionType(originalType: string): QuestionType {\r\n-    const mappedType = QUESTION_TYPE_MAPPING[originalType];\r\n-    if (!mappedType) {\r\n-      this.logger.warn({\r\n-        message: `Unknown question type \"${originalType}\" - defaulting to \"speaking\"`,\r\n-        context: { originalType },\r\n-        source: 'DatabaseInserter'\r\n-      });\r\n-      return 'speaking';\r\n-    }\r\n-    return mappedType;\r\n+  private questionTypeMap: Record<string, string> = {\r\n+    'speaking': 'speaking',\r\n+    'dialogue': 'dialogue',\r\n+    'story_telling': 'story_telling',\r\n+    'question_answer': 'question_answer',\r\n+    'role_play': 'role_play',\r\n+    'morning_routine': 'morning_routine',\r\n+    'activity_description': 'activity_description',\r\n+    'asking_help': 'asking_help',\r\n+    'sharing_experiences': 'sharing_experiences',\r\n+    'problem_solving': 'problem_solving',\r\n+    'fun_speaking': 'fun_speaking',\r\n+    'game_words': 'game_words',\r\n+    'sharing': 'sharing',\r\n+    'singing': 'singing',\r\n+    'happy_words': 'happy_words',\r\n+    'action_words': 'action_words',\r\n+    'action_songs': 'action_songs',\r\n+    'follow_leader': 'follow_leader',\r\n+    'animal_actions': 'animal_actions',\r\n+    'playtime_words': 'playtime_words',\r\n+    'toy_words': 'toy_words',\r\n+    'game_choices': 'game_choices',\r\n+    'play_areas': 'play_areas',\r\n+    'play_rules': 'play_rules',\r\n+    'play_feelings': 'play_feelings',\r\n+    'play_invitations': 'play_invitations',\r\n+    'sharing_words': 'sharing_words',\r\n+    'kind_words': 'kind_words',\r\n+    'play_help': 'play_help',\r\n+    'cleanup_time': 'cleanup_time',\r\n+    'playground_words': 'playground_words',\r\n+    'outdoor_games': 'outdoor_games',\r\n+    'safety_words': 'safety_words',\r\n+    'weather_words': 'weather_words',\r\n+    'line_up': 'line_up',\r\n+    'playground_friends': 'playground_friends',\r\n+    'movement_words': 'movement_words',\r\n+    'playground_rules': 'playground_rules',\r\n+    'playground_feelings': 'playground_feelings',\r\n+    'cleanup_outside': 'cleanup_outside',\r\n+    'number_one': 'number_one',\r\n+    'number_two': 'number_two',\r\n+    'counting_objects': 'counting_objects',\r\n+    'body_parts': 'body_parts',\r\n+    'classroom_items': 'classroom_items',\r\n+    'counting_actions': 'counting_actions',\r\n+    'counting_friends': 'counting_friends',\r\n+    'counting_sounds': 'counting_sounds',\r\n+    'counting_colors': 'counting_colors',\r\n+    'counting_review': 'counting_review',\r\n+    'number_three': 'number_three',\r\n+    'number_four': 'number_four',\r\n+    'counting_toys': 'counting_toys',\r\n+    'counting_fingers': 'counting_fingers',\r\n+    'counting_steps': 'counting_steps',\r\n+    'counting_claps': 'counting_claps',\r\n+    'counting_animals': 'counting_animals',\r\n+    'number_six': 'number_six',\r\n+    'number_seven': 'number_seven',\r\n+    'number_eight': 'number_eight',\r\n+    'number_nine': 'number_nine',\r\n+    'number_ten': 'number_ten',\r\n+    'counting_together': 'counting_together',\r\n+    'final_review': 'final_review',\r\n+    'count_up': 'count_up',\r\n+    'review_six_seven': 'review_six_seven',\r\n+    'review_eight_nine': 'review_eight_nine',\r\n+    'review_ten': 'review_ten',\r\n+    'counting_groups': 'counting_groups'\r\n   }\r\n \r\n   constructor(supabaseUrl: string, supabaseKey: string) {\r\n     this.supabase = createClient(supabaseUrl, supabaseKey)\r\n@@ -359,26 +408,22 @@\n   }\r\n \r\n   private async processQuestion(question: Question, lessonId: string) {\r\n     const questionId = uuidv4();\r\n-    const mappedType = this.mapQuestionType(question.type);\r\n-    \r\n     const { error: questionError } = await this.supabase\r\n       .from(dbConfig.tables.questions)\r\n       .insert({\r\n         id: questionId,\r\n         title: question.title,\r\n         content: question.content,\r\n-        type: mappedType,           // Main question type (from our core types)\r\n-        sub_type: question.type,    // Original, more specific type\r\n+        type: this.questionTypeMap[question.type] || question.type,\r\n         lesson_id: lessonId,\r\n-        order_index: question.order_index,\r\n-        metadata: question.metadata\r\n+        order_index: question.order_index\r\n       });\r\n \r\n     if (questionError) throw questionError;\r\n     this.trackInsertedId(dbConfig.tables.questions, questionId);\r\n-    this.logger.log('SUCCESS', `Question \"${question.title}\" inserted with type ${mappedType} and sub_type ${question.type}`);\r\n+    this.logger.log('SUCCESS', `Question \"${question.title}\" inserted`);\r\n \r\n     for (const exercisePrompt of question.exercise_prompts) {\r\n       await this.processExercisePrompt(exercisePrompt, questionId);\r\n     }\r\n"
                },
                {
                    "date": 1739487291958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,8 +53,10 @@\n   type: string\r\n   exercise_prompts: ExercisePrompt[]\r\n   lesson_id?: string\r\n   order_index?: number\r\n+  sub_type?: string\r\n+  metadata?: Record<string, any>\r\n }\r\n \r\n interface Activity {\r\n   id: string\r\n@@ -172,8 +174,151 @@\n ] as const;\r\n \r\n type ValidQuestionType = typeof VALID_QUESTION_TYPES[number];\r\n \r\n+// Define a mapping of specific types to our core question types\r\n+const QUESTION_TYPE_MAPPING: Record<string, QuestionType> = {\r\n+  // Speaking-related types map to 'speaking'\r\n+  'speaking': 'speaking',\r\n+  'fun_speaking': 'speaking',\r\n+  'sharing': 'speaking',\r\n+  'singing': 'speaking',\r\n+  'action_words': 'speaking',\r\n+  'action_songs': 'speaking',\r\n+  'follow_leader': 'speaking',\r\n+  'animal_actions': 'speaking',\r\n+  'playtime_words': 'speaking',\r\n+  'toy_words': 'speaking',\r\n+  'game_words': 'speaking',\r\n+  'play_areas': 'speaking',\r\n+  'happy_words': 'speaking',\r\n+  'kind_words': 'speaking',\r\n+  'playground_words': 'speaking',\r\n+  'weather_words': 'speaking',\r\n+  'movement_words': 'speaking',\r\n+  'body_parts': 'speaking',\r\n+  'classroom_items': 'speaking',\r\n+\r\n+  // Story-related types map to 'storytelling'\r\n+  'story_telling': 'storytelling',\r\n+  'sharing_experiences': 'storytelling',\r\n+\r\n+  // Conversation-related types map to 'conversation'\r\n+  'dialogue': 'conversation',\r\n+  'question_answer': 'conversation',\r\n+  'role_play': 'conversation',\r\n+  'play_invitations': 'conversation',\r\n+  'sharing_words': 'conversation',\r\n+\r\n+  // Action-related types map to 'actionAndSpeaking'\r\n+  'morning_routine': 'actionAndSpeaking',\r\n+  'activity_description': 'actionAndSpeaking',\r\n+  'cleanup_time': 'actionAndSpeaking',\r\n+  'cleanup_outside': 'actionAndSpeaking',\r\n+  'line_up': 'actionAndSpeaking',\r\n+\r\n+  // Multiple choice related types\r\n+  'game_choices': 'multipleChoice',\r\n+  'play_rules': 'multipleChoice',\r\n+  'playground_rules': 'multipleChoice',\r\n+  'safety_words': 'multipleChoice',\r\n+\r\n+  // Number and counting related types map to appropriate core types\r\n+  'number_one': 'speaking',\r\n+  'number_two': 'speaking',\r\n+  'number_three': 'speaking',\r\n+  'number_four': 'speaking',\r\n+  'number_six': 'speaking',\r\n+  'number_seven': 'speaking',\r\n+  'number_eight': 'speaking',\r\n+  'number_nine': 'speaking',\r\n+  'number_ten': 'speaking',\r\n+  'counting_objects': 'speaking',\r\n+  'counting_actions': 'speaking',\r\n+  'counting_friends': 'speaking',\r\n+  'counting_sounds': 'speaking',\r\n+  'counting_colors': 'speaking',\r\n+  'counting_review': 'speaking',\r\n+  'counting_toys': 'speaking',\r\n+  'counting_fingers': 'speaking',\r\n+  'counting_steps': 'speaking',\r\n+  'counting_claps': 'speaking',\r\n+  'counting_animals': 'speaking',\r\n+  'counting_together': 'speaking',\r\n+  'counting_groups': 'speaking',\r\n+  'count_up': 'speaking',\r\n+  'review_six_seven': 'speaking',\r\n+  'review_eight_nine': 'speaking',\r\n+  'review_ten': 'speaking',\r\n+  'final_review': 'speaking'\r\n+};\r\n+\r\n+// Valid sub-types list (for reference and validation)\r\n+const VALID_SUB_TYPES = [\r\n+  'speaking',\r\n+  'fun_speaking',\r\n+  'sharing',\r\n+  'singing',\r\n+  'action_words',\r\n+  'action_songs',\r\n+  'follow_leader',\r\n+  'animal_actions',\r\n+  'playtime_words',\r\n+  'toy_words',\r\n+  'game_words',\r\n+  'play_areas',\r\n+  'happy_words',\r\n+  'kind_words',\r\n+  'playground_words',\r\n+  'weather_words',\r\n+  'movement_words',\r\n+  'body_parts',\r\n+  'classroom_items',\r\n+  'story_telling',\r\n+  'sharing_experiences',\r\n+  'dialogue',\r\n+  'question_answer',\r\n+  'role_play',\r\n+  'play_invitations',\r\n+  'sharing_words',\r\n+  'morning_routine',\r\n+  'activity_description',\r\n+  'cleanup_time',\r\n+  'cleanup_outside',\r\n+  'line_up',\r\n+  'game_choices',\r\n+  'play_rules',\r\n+  'playground_rules',\r\n+  'safety_words',\r\n+  'number_one',\r\n+  'number_two',\r\n+  'number_three',\r\n+  'number_four',\r\n+  'number_six',\r\n+  'number_seven',\r\n+  'number_eight',\r\n+  'number_nine',\r\n+  'number_ten',\r\n+  'counting_objects',\r\n+  'counting_actions',\r\n+  'counting_friends',\r\n+  'counting_sounds',\r\n+  'counting_colors',\r\n+  'counting_review',\r\n+  'counting_toys',\r\n+  'counting_fingers',\r\n+  'counting_steps',\r\n+  'counting_claps',\r\n+  'counting_animals',\r\n+  'counting_together',\r\n+  'counting_groups',\r\n+  'count_up',\r\n+  'review_six_seven',\r\n+  'review_eight_nine',\r\n+  'review_ten',\r\n+  'final_review'\r\n+] as const;\r\n+\r\n class InsertionLogger {\r\n   private startTime: number\r\n \r\n   constructor() {\r\n@@ -194,79 +339,8 @@\n class DatabaseInserter {\r\n   private supabase\r\n   private logger\r\n   private insertedIds: Map<string, string[]>\r\n-  private questionTypeMap: Record<string, string> = {\r\n-    'speaking': 'speaking',\r\n-    'dialogue': 'dialogue',\r\n-    'story_telling': 'story_telling',\r\n-    'question_answer': 'question_answer',\r\n-    'role_play': 'role_play',\r\n-    'morning_routine': 'morning_routine',\r\n-    'activity_description': 'activity_description',\r\n-    'asking_help': 'asking_help',\r\n-    'sharing_experiences': 'sharing_experiences',\r\n-    'problem_solving': 'problem_solving',\r\n-    'fun_speaking': 'fun_speaking',\r\n-    'game_words': 'game_words',\r\n-    'sharing': 'sharing',\r\n-    'singing': 'singing',\r\n-    'happy_words': 'happy_words',\r\n-    'action_words': 'action_words',\r\n-    'action_songs': 'action_songs',\r\n-    'follow_leader': 'follow_leader',\r\n-    'animal_actions': 'animal_actions',\r\n-    'playtime_words': 'playtime_words',\r\n-    'toy_words': 'toy_words',\r\n-    'game_choices': 'game_choices',\r\n-    'play_areas': 'play_areas',\r\n-    'play_rules': 'play_rules',\r\n-    'play_feelings': 'play_feelings',\r\n-    'play_invitations': 'play_invitations',\r\n-    'sharing_words': 'sharing_words',\r\n-    'kind_words': 'kind_words',\r\n-    'play_help': 'play_help',\r\n-    'cleanup_time': 'cleanup_time',\r\n-    'playground_words': 'playground_words',\r\n-    'outdoor_games': 'outdoor_games',\r\n-    'safety_words': 'safety_words',\r\n-    'weather_words': 'weather_words',\r\n-    'line_up': 'line_up',\r\n-    'playground_friends': 'playground_friends',\r\n-    'movement_words': 'movement_words',\r\n-    'playground_rules': 'playground_rules',\r\n-    'playground_feelings': 'playground_feelings',\r\n-    'cleanup_outside': 'cleanup_outside',\r\n-    'number_one': 'number_one',\r\n-    'number_two': 'number_two',\r\n-    'counting_objects': 'counting_objects',\r\n-    'body_parts': 'body_parts',\r\n-    'classroom_items': 'classroom_items',\r\n-    'counting_actions': 'counting_actions',\r\n-    'counting_friends': 'counting_friends',\r\n-    'counting_sounds': 'counting_sounds',\r\n-    'counting_colors': 'counting_colors',\r\n-    'counting_review': 'counting_review',\r\n-    'number_three': 'number_three',\r\n-    'number_four': 'number_four',\r\n-    'counting_toys': 'counting_toys',\r\n-    'counting_fingers': 'counting_fingers',\r\n-    'counting_steps': 'counting_steps',\r\n-    'counting_claps': 'counting_claps',\r\n-    'counting_animals': 'counting_animals',\r\n-    'number_six': 'number_six',\r\n-    'number_seven': 'number_seven',\r\n-    'number_eight': 'number_eight',\r\n-    'number_nine': 'number_nine',\r\n-    'number_ten': 'number_ten',\r\n-    'counting_together': 'counting_together',\r\n-    'final_review': 'final_review',\r\n-    'count_up': 'count_up',\r\n-    'review_six_seven': 'review_six_seven',\r\n-    'review_eight_nine': 'review_eight_nine',\r\n-    'review_ten': 'review_ten',\r\n-    'counting_groups': 'counting_groups'\r\n-  }\r\n \r\n   constructor(supabaseUrl: string, supabaseKey: string) {\r\n     this.supabase = createClient(supabaseUrl, supabaseKey)\r\n     this.logger = new InsertionLogger()\r\n@@ -406,24 +480,41 @@\n       await this.processActivities(lesson.activities, lessonId)\r\n     }\r\n   }\r\n \r\n+  private mapQuestionType(originalType: string): QuestionType {\r\n+    const mappedType = QUESTION_TYPE_MAPPING[originalType];\r\n+    if (!mappedType) {\r\n+      this.logger.warn({\r\n+        message: `Unknown question type \"${originalType}\" - defaulting to \"speaking\"`,\r\n+        context: { originalType },\r\n+        source: 'DatabaseInserter'\r\n+      });\r\n+      return 'speaking';\r\n+    }\r\n+    return mappedType;\r\n+  }\r\n+\r\n   private async processQuestion(question: Question, lessonId: string) {\r\n     const questionId = uuidv4();\r\n+    const mappedType = this.mapQuestionType(question.type);\r\n+    \r\n     const { error: questionError } = await this.supabase\r\n       .from(dbConfig.tables.questions)\r\n       .insert({\r\n         id: questionId,\r\n         title: question.title,\r\n         content: question.content,\r\n-        type: this.questionTypeMap[question.type] || question.type,\r\n+        type: mappedType,           // Main question type (from our core types)\r\n+        sub_type: question.type,    // Original, more specific type\r\n         lesson_id: lessonId,\r\n-        order_index: question.order_index\r\n+        order_index: question.order_index,\r\n+        metadata: question.metadata\r\n       });\r\n \r\n     if (questionError) throw questionError;\r\n     this.trackInsertedId(dbConfig.tables.questions, questionId);\r\n-    this.logger.log('SUCCESS', `Question \"${question.title}\" inserted`);\r\n+    this.logger.log('SUCCESS', `Question \"${question.title}\" inserted with type ${mappedType} and sub-type ${question.type}`);\r\n \r\n     for (const exercisePrompt of question.exercise_prompts) {\r\n       await this.processExercisePrompt(exercisePrompt, questionId);\r\n     }\r\n"
                },
                {
                    "date": 1739487354787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,8 +100,10 @@\n   grade_id?: string\r\n   order_index: number\r\n }\r\n \r\n+type QuestionType = 'speaking' | 'storytelling' | 'conversation' | 'actionAndSpeaking' | 'multipleChoice';\r\n+\r\n const VALID_QUESTION_TYPES = [\r\n   'speaking',\r\n   'dialogue',\r\n   'story_telling',\r\n"
                },
                {
                    "date": 1739487365983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,9 @@\n   grade_id?: string\r\n   order_index: number\r\n }\r\n \r\n-type QuestionType = 'speaking' | 'storytelling' | 'conversation' | 'actionAndSpeaking' | 'multipleChoice';\r\n+type QuestionType = 'speaking' | 'storytelling' | 'conversation' | 'actionAndSpeaking' | 'multipleChoice' ;\r\n \r\n const VALID_QUESTION_TYPES = [\r\n   'speaking',\r\n   'dialogue',\r\n"
                },
                {
                    "date": 1739487372921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,9 @@\n   grade_id?: string\r\n   order_index: number\r\n }\r\n \r\n-type QuestionType = 'speaking' | 'storytelling' | 'conversation' | 'actionAndSpeaking' | 'multipleChoice' ;\r\n+type QuestionType = 'speaking' | 'storytelling' | 'conversation' | 'actionAndSpeaking' | 'multipleChoice' | 'sentenceCompletion' | 'sentenceTransformationAndCompletion' ;\r\n \r\n const VALID_QUESTION_TYPES = [\r\n   'speaking',\r\n   'dialogue',\r\n"
                },
                {
                    "date": 1739487471607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,10 +100,20 @@\n   grade_id?: string\r\n   order_index: number\r\n }\r\n \r\n-type QuestionType = 'speaking' | 'storytelling' | 'conversation' | 'actionAndSpeaking' | 'multipleChoice' | 'sentenceCompletion' | 'sentenceTransformationAndCompletion' ;\r\n+type QuestionType = 'speaking' | 'storytelling' | 'listening' | 'listenAndRepeat' | \r\n+  'multipleChoice' | 'grammarSpeaking' | 'idiomPractice' | 'lookAndSpeak' | \r\n+  'watchAndSpeak' | 'debate' | 'presentation' | 'matching' | 'fillInTheBlank' | \r\n+  'trueOrFalse' | 'reading' | 'writing' | 'speakingAndWriting' | 'speakingAndListening' | \r\n+  'readingAndSpeaking' | 'speakingAndSpeaking' | 'speakingWithAPartner' | \r\n+  'actionAndSpeaking' | 'objectAndSpeaking' | 'objectActionAndSpeaking' | \r\n+  'vocabularyAndSpeaking' | 'vocabularyAndWordlist' | 'sentenceFormation' | \r\n+  'sentenceTransformation' | 'sentenceCompletion' | 'sentenceTransformationAndCompletion';\r\n \r\n+// Better yet, import it directly from constants:\r\n+import { QuestionType } from '@/app/content-management/constants';\r\n+\r\n const VALID_QUESTION_TYPES = [\r\n   'speaking',\r\n   'dialogue',\r\n   'story_telling',\r\n"
                },
                {
                    "date": 1739487489373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,17 +100,8 @@\n   grade_id?: string\r\n   order_index: number\r\n }\r\n \r\n-type QuestionType = 'speaking' | 'storytelling' | 'listening' | 'listenAndRepeat' | \r\n-  'multipleChoice' | 'grammarSpeaking' | 'idiomPractice' | 'lookAndSpeak' | \r\n-  'watchAndSpeak' | 'debate' | 'presentation' | 'matching' | 'fillInTheBlank' | \r\n-  'trueOrFalse' | 'reading' | 'writing' | 'speakingAndWriting' | 'speakingAndListening' | \r\n-  'readingAndSpeaking' | 'speakingAndSpeaking' | 'speakingWithAPartner' | \r\n-  'actionAndSpeaking' | 'objectAndSpeaking' | 'objectActionAndSpeaking' | \r\n-  'vocabularyAndSpeaking' | 'vocabularyAndWordlist' | 'sentenceFormation' | \r\n-  'sentenceTransformation' | 'sentenceCompletion' | 'sentenceTransformationAndCompletion';\r\n-\r\n // Better yet, import it directly from constants:\r\n import { QuestionType } from '@/app/content-management/constants';\r\n \r\n const VALID_QUESTION_TYPES = [\r\n"
                },
                {
                    "date": 1739487512468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -204,14 +204,14 @@\n   // Story-related types map to 'storytelling'\r\n   'story_telling': 'storytelling',\r\n   'sharing_experiences': 'storytelling',\r\n \r\n-  // Conversation-related types map to 'conversation'\r\n-  'dialogue': 'conversation',\r\n-  'question_answer': 'conversation',\r\n-  'role_play': 'conversation',\r\n-  'play_invitations': 'conversation',\r\n-  'sharing_words': 'conversation',\r\n+  // Conversation-related types map to 'speakingWithAPartner'\r\n+  'dialogue': 'speakingWithAPartner',\r\n+  'question_answer': 'speakingWithAPartner',\r\n+  'role_play': 'speakingWithAPartner',\r\n+  'play_invitations': 'speakingWithAPartner',\r\n+  'sharing_words': 'speakingWithAPartner',\r\n \r\n   // Action-related types map to 'actionAndSpeaking'\r\n   'morning_routine': 'actionAndSpeaking',\r\n   'activity_description': 'actionAndSpeaking',\r\n"
                },
                {
                    "date": 1739487587707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -327,8 +327,12 @@\n   constructor() {\r\n     this.startTime = Date.now()\r\n   }\r\n \r\n+  warn(data: { message: string; context?: any; source?: string }) {\r\n+    this.log('WARNING', data.message);\r\n+  }\r\n+\r\n   log(level: keyof typeof logLevels, message: string, error?: Error | PostgrestError) {\r\n     const timestamp = new Date().toISOString()\r\n     const elapsed = ((Date.now() - this.startTime) / 1000).toFixed(2)\r\n     \r\n"
                },
                {
                    "date": 1739487602817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -589,9 +589,9 @@\n     this.logger.log('SUCCESS', 'Activities inserted')\r\n   }\r\n \r\n   private validateQuestionType(type: string): type is ValidQuestionType {\r\n-    const mappedType = this.questionTypeMap[type] || type;\r\n+    const mappedType = QUESTION_TYPE_MAPPING[type] || type;\r\n     if (!VALID_QUESTION_TYPES.includes(mappedType as ValidQuestionType)) {\r\n       throw new ValidationError(`Invalid question type: ${type}. Valid types are: ${VALID_QUESTION_TYPES.join(', ')}`);\r\n     }\r\n     return true;\r\n"
                },
                {
                    "date": 1739487634639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -589,11 +589,11 @@\n     this.logger.log('SUCCESS', 'Activities inserted')\r\n   }\r\n \r\n   private validateQuestionType(type: string): type is ValidQuestionType {\r\n-    const mappedType = QUESTION_TYPE_MAPPING[type] || type;\r\n-    if (!VALID_QUESTION_TYPES.includes(mappedType as ValidQuestionType)) {\r\n-      throw new ValidationError(`Invalid question type: ${type}. Valid types are: ${VALID_QUESTION_TYPES.join(', ')}`);\r\n+    const mappedType = QUESTION_TYPE_MAPPING[type];\r\n+    if (!mappedType) {\r\n+      throw new ValidationError(`Invalid question type: ${type}. Valid types are: ${Object.keys(QUESTION_TYPE_MAPPING).join(', ')}`);\r\n     }\r\n     return true;\r\n   }\r\n \r\n"
                },
                {
                    "date": 1739487660607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -251,11 +251,21 @@\n   'count_up': 'speaking',\r\n   'review_six_seven': 'speaking',\r\n   'review_eight_nine': 'speaking',\r\n   'review_ten': 'speaking',\r\n-  'final_review': 'speaking'\r\n-};\r\n+  'final_review': 'speaking',\r\n \r\n+  // Additional mappings for missing types\r\n+  'asking_help': 'speakingWithAPartner',\r\n+  'class_activity': 'speaking',\r\n+  'individual_activity': 'speaking',\r\n+  'individual': 'speaking',\r\n+  'pair': 'speakingWithAPartner',\r\n+  'class': 'speaking',\r\n+  'group_activity': 'speaking',\r\n+  'movement_activity': 'actionAndSpeaking',\r\n+}\r\n+\r\n // Valid sub-types list (for reference and validation)\r\n const VALID_SUB_TYPES = [\r\n   'speaking',\r\n   'fun_speaking',\r\n"
                },
                {
                    "date": 1739487681891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -262,8 +262,11 @@\n   'pair': 'speakingWithAPartner',\r\n   'class': 'speaking',\r\n   'group_activity': 'speaking',\r\n   'movement_activity': 'actionAndSpeaking',\r\n+\r\n+  // Problem solving maps to speaking with partner\r\n+  'problem_solving': 'speakingWithAPartner',\r\n }\r\n \r\n // Valid sub-types list (for reference and validation)\r\n const VALID_SUB_TYPES = [\r\n"
                },
                {
                    "date": 1739487703051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -265,8 +265,15 @@\n   'movement_activity': 'actionAndSpeaking',\r\n \r\n   // Problem solving maps to speaking with partner\r\n   'problem_solving': 'speakingWithAPartner',\r\n+\r\n+  // Play-related types map to speaking\r\n+  'play_feelings': 'speaking',\r\n+  'play_help': 'speaking',\r\n+  'play_rules': 'multipleChoice',\r\n+  'play_areas': 'speaking',\r\n+  'play_invitations': 'speakingWithAPartner',\r\n }\r\n \r\n // Valid sub-types list (for reference and validation)\r\n const VALID_SUB_TYPES = [\r\n"
                },
                {
                    "date": 1739487728167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -269,11 +269,9 @@\n \r\n   // Play-related types map to speaking\r\n   'play_feelings': 'speaking',\r\n   'play_help': 'speaking',\r\n-  'play_rules': 'multipleChoice',\r\n-  'play_areas': 'speaking',\r\n-  'play_invitations': 'speakingWithAPartner',\r\n+  \r\n }\r\n \r\n // Valid sub-types list (for reference and validation)\r\n const VALID_SUB_TYPES = [\r\n"
                },
                {
                    "date": 1739487759673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -270,8 +270,14 @@\n   // Play-related types map to speaking\r\n   'play_feelings': 'speaking',\r\n   'play_help': 'speaking',\r\n   \r\n+  // Outdoor-related types map to actionAndSpeaking\r\n+  'outdoor_games': 'actionAndSpeaking',\r\n+  'playground_friends': 'speaking',\r\n+  'playground_feelings': 'speaking',\r\n+  'playground_rules': 'multipleChoice',\r\n+  'playground_words': 'speaking',\r\n }\r\n \r\n // Valid sub-types list (for reference and validation)\r\n const VALID_SUB_TYPES = [\r\n"
                },
                {
                    "date": 1739487767864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -274,11 +274,9 @@\n   // Outdoor-related types map to actionAndSpeaking\r\n   'outdoor_games': 'actionAndSpeaking',\r\n   'playground_friends': 'speaking',\r\n   'playground_feelings': 'speaking',\r\n-  'playground_rules': 'multipleChoice',\r\n-  'playground_words': 'speaking',\r\n-}\r\n+  \r\n \r\n // Valid sub-types list (for reference and validation)\r\n const VALID_SUB_TYPES = [\r\n   'speaking',\r\n"
                },
                {
                    "date": 1739487795854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -340,9 +340,9 @@\n   'review_six_seven',\r\n   'review_eight_nine',\r\n   'review_ten',\r\n   'final_review'\r\n-] as const;\r\n+] as const,\r\n \r\n class InsertionLogger {\r\n   private startTime: number\r\n \r\n"
                },
                {
                    "date": 1739487808314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,692 @@\n+// src/scripts/insert-pp1-data.ts\r\n+import { createClient } from '@supabase/supabase-js'\r\n+import { v4 as uuidv4 } from 'uuid'\r\n+import pp1Data from '../data/pp1_data.json'\r\n+import dotenv from 'dotenv'\r\n+import path from 'path'\r\n+import { dbConfig, logLevels } from './config/db-config'\r\n+import { validators, ValidationError } from './utils/validators'\r\n+import type { PostgrestError } from '@supabase/supabase-js'\r\n+//import { Topic, Subtopic, Lesson, Question, ExercisePrompt, Activity } from '@/types/index'\r\n+\r\n+// Load environment variables from root .env file\r\n+dotenv.config({ path: path.resolve(process.cwd(), '.env') })\r\n+\r\n+// Debug environment variables\r\n+console.log('Environment variables:', {\r\n+  supabaseUrl: process.env.VITE_SUPABASE_URL,\r\n+  hasServiceKey: !!process.env.SUPABASE_SERVICE_KEY\r\n+})\r\n+import fs from 'fs'\r\n+const data = JSON.parse(fs.readFileSync('src/data/pp1_data.json', 'utf8'));\r\n+\r\n+const questionTypes = new Set();\r\n+\r\n+// Recursive function to find all question types\r\n+function findQuestionTypes(obj: any) {\r\n+  if (obj && typeof obj === 'object') {\r\n+    if (obj.type && obj.id && obj.id.startsWith('pp1')) {\r\n+      questionTypes.add(obj.type);\r\n+    }\r\n+    Object.values(obj).forEach(value => findQuestionTypes(value));\r\n+  }\r\n+}\r\n+\r\n+findQuestionTypes(data);\r\n+console.log('Found question types:', Array.from(questionTypes));\r\n+\r\n+\r\n+// Define types based on your schema\r\n+interface ExercisePrompt {\r\n+  id?: string\r\n+  text: string\r\n+  narration: string\r\n+  saytext: string\r\n+  order_index: number\r\n+  question_id?: string\r\n+}\r\n+\r\n+interface Question {\r\n+  id: string\r\n+  title: string\r\n+  content: string\r\n+  type: string\r\n+  exercise_prompts: ExercisePrompt[]\r\n+  lesson_id?: string\r\n+  order_index?: number\r\n+  sub_type?: string\r\n+  metadata?: Record<string, any>\r\n+}\r\n+\r\n+interface Activity {\r\n+  id: string\r\n+  title: string\r\n+  type: string\r\n+  description: string\r\n+  instructions: string\r\n+  duration: number\r\n+  lesson_id?: string\r\n+}\r\n+\r\n+interface Lesson {\r\n+  id: string\r\n+  title: string\r\n+  description: string\r\n+  content_type: string\r\n+  duration: number\r\n+  difficulty: string\r\n+  metadata: Record<string, any>\r\n+  questions: Question[]\r\n+  activities: Activity[]\r\n+  subtopic_id?: string\r\n+  order_index: number\r\n+  content?: string\r\n+}\r\n+\r\n+interface Subtopic {\r\n+  id: string\r\n+  title: string\r\n+  description: string\r\n+  order_index: number\r\n+  lessons: Lesson[]\r\n+  topic_id?: string\r\n+}\r\n+\r\n+interface Topic {\r\n+  id: string\r\n+  title: string\r\n+  description: string\r\n+  subtopics: Subtopic[]\r\n+  grade_id?: string\r\n+  order_index: number\r\n+}\r\n+\r\n+// Better yet, import it directly from constants:\r\n+import { QuestionType } from '@/app/content-management/constants';\r\n+\r\n+const VALID_QUESTION_TYPES = [\r\n+  'speaking',\r\n+  'dialogue',\r\n+  'story_telling',\r\n+  'question_answer',\r\n+  'role_play',\r\n+  'morning_routine',\r\n+  'activity_description',\r\n+  'asking_help',\r\n+  'sharing_experiences',\r\n+  'problem_solving',\r\n+  'fun_speaking',\r\n+  'game_words',\r\n+  'sharing',\r\n+  'singing',\r\n+  'happy_words',\r\n+  'action_words',\r\n+  'action_songs',\r\n+  'follow_leader',\r\n+  'animal_actions',\r\n+  'playtime_words',\r\n+  'toy_words',\r\n+  'game_choices',\r\n+  'play_areas',\r\n+  'play_rules',\r\n+  'play_feelings',\r\n+  'play_invitations',\r\n+  'sharing_words',\r\n+  'kind_words',\r\n+  'play_help',\r\n+  'cleanup_time',\r\n+  'playground_words',\r\n+  'outdoor_games',\r\n+  'safety_words',\r\n+  'weather_words',\r\n+  'line_up',\r\n+  'playground_friends',\r\n+  'movement_words',\r\n+  'playground_rules',\r\n+  'playground_feelings',\r\n+  'cleanup_outside',\r\n+  'number_one',\r\n+  'number_two',\r\n+  'counting_objects',\r\n+  'body_parts',\r\n+  'classroom_items',\r\n+  'counting_actions',\r\n+  'counting_friends',\r\n+  'counting_sounds',\r\n+  'counting_colors',\r\n+  'counting_review',\r\n+  'number_three',\r\n+  'number_four',\r\n+  'counting_toys',\r\n+  'counting_fingers',\r\n+  'counting_steps',\r\n+  'counting_claps',\r\n+  'counting_animals',\r\n+  'number_six',\r\n+  'number_seven',\r\n+  'number_eight',\r\n+  'number_nine',\r\n+  'number_ten',\r\n+  'counting_together',\r\n+  'final_review',\r\n+  'count_up',\r\n+  'review_six_seven',\r\n+  'review_eight_nine',\r\n+  'review_ten',\r\n+  'counting_groups'\r\n+] as const;\r\n+\r\n+type ValidQuestionType = typeof VALID_QUESTION_TYPES[number];\r\n+\r\n+// Define a mapping of specific types to our core question types\r\n+const QUESTION_TYPE_MAPPING: Record<string, QuestionType> = {\r\n+  // Speaking-related types map to 'speaking'\r\n+  'speaking': 'speaking',\r\n+  'fun_speaking': 'speaking',\r\n+  'sharing': 'speaking',\r\n+  'singing': 'speaking',\r\n+  'action_words': 'speaking',\r\n+  'action_songs': 'speaking',\r\n+  'follow_leader': 'speaking',\r\n+  'animal_actions': 'speaking',\r\n+  'playtime_words': 'speaking',\r\n+  'toy_words': 'speaking',\r\n+  'game_words': 'speaking',\r\n+  'play_areas': 'speaking',\r\n+  'happy_words': 'speaking',\r\n+  'kind_words': 'speaking',\r\n+  'playground_words': 'speaking',\r\n+  'weather_words': 'speaking',\r\n+  'movement_words': 'speaking',\r\n+  'body_parts': 'speaking',\r\n+  'classroom_items': 'speaking',\r\n+\r\n+  // Story-related types map to 'storytelling'\r\n+  'story_telling': 'storytelling',\r\n+  'sharing_experiences': 'storytelling',\r\n+\r\n+  // Conversation-related types map to 'speakingWithAPartner'\r\n+  'dialogue': 'speakingWithAPartner',\r\n+  'question_answer': 'speakingWithAPartner',\r\n+  'role_play': 'speakingWithAPartner',\r\n+  'play_invitations': 'speakingWithAPartner',\r\n+  'sharing_words': 'speakingWithAPartner',\r\n+\r\n+  // Action-related types map to 'actionAndSpeaking'\r\n+  'morning_routine': 'actionAndSpeaking',\r\n+  'activity_description': 'actionAndSpeaking',\r\n+  'cleanup_time': 'actionAndSpeaking',\r\n+  'cleanup_outside': 'actionAndSpeaking',\r\n+  'line_up': 'actionAndSpeaking',\r\n+\r\n+  // Multiple choice related types\r\n+  'game_choices': 'multipleChoice',\r\n+  'play_rules': 'multipleChoice',\r\n+  'playground_rules': 'multipleChoice',\r\n+  'safety_words': 'multipleChoice',\r\n+\r\n+  // Number and counting related types map to appropriate core types\r\n+  'number_one': 'speaking',\r\n+  'number_two': 'speaking',\r\n+  'number_three': 'speaking',\r\n+  'number_four': 'speaking',\r\n+  'number_six': 'speaking',\r\n+  'number_seven': 'speaking',\r\n+  'number_eight': 'speaking',\r\n+  'number_nine': 'speaking',\r\n+  'number_ten': 'speaking',\r\n+  'counting_objects': 'speaking',\r\n+  'counting_actions': 'speaking',\r\n+  'counting_friends': 'speaking',\r\n+  'counting_sounds': 'speaking',\r\n+  'counting_colors': 'speaking',\r\n+  'counting_review': 'speaking',\r\n+  'counting_toys': 'speaking',\r\n+  'counting_fingers': 'speaking',\r\n+  'counting_steps': 'speaking',\r\n+  'counting_claps': 'speaking',\r\n+  'counting_animals': 'speaking',\r\n+  'counting_together': 'speaking',\r\n+  'counting_groups': 'speaking',\r\n+  'count_up': 'speaking',\r\n+  'review_six_seven': 'speaking',\r\n+  'review_eight_nine': 'speaking',\r\n+  'review_ten': 'speaking',\r\n+  'final_review': 'speaking',\r\n+\r\n+  // Additional mappings for missing types\r\n+  'asking_help': 'speakingWithAPartner',\r\n+  'class_activity': 'speaking',\r\n+  'individual_activity': 'speaking',\r\n+  'individual': 'speaking',\r\n+  'pair': 'speakingWithAPartner',\r\n+  'class': 'speaking',\r\n+  'group_activity': 'speaking',\r\n+  'movement_activity': 'actionAndSpeaking',\r\n+\r\n+  // Problem solving maps to speaking with partner\r\n+  'problem_solving': 'speakingWithAPartner',\r\n+\r\n+  // Play-related types map to speaking\r\n+  'play_feelings': 'speaking',\r\n+  'play_help': 'speaking',\r\n+  \r\n+  // Outdoor-related types map to actionAndSpeaking\r\n+  'outdoor_games': 'actionAndSpeaking',\r\n+  'playground_friends': 'speaking',\r\n+  'playground_feelings': 'speaking',\r\n+  \r\n+\r\n+// Valid sub-types list (for reference and validation)\r\n+const VALID_SUB_TYPES = [\r\n+  'speaking',\r\n+  'fun_speaking',\r\n+  'sharing',\r\n+  'singing',\r\n+  'action_words',\r\n+  'action_songs',\r\n+  'follow_leader',\r\n+  'animal_actions',\r\n+  'playtime_words',\r\n+  'toy_words',\r\n+  'game_words',\r\n+  'play_areas',\r\n+  'happy_words',\r\n+  'kind_words',\r\n+  'playground_words',\r\n+  'weather_words',\r\n+  'movement_words',\r\n+  'body_parts',\r\n+  'classroom_items',\r\n+  'story_telling',\r\n+  'sharing_experiences',\r\n+  'dialogue',\r\n+  'question_answer',\r\n+  'role_play',\r\n+  'play_invitations',\r\n+  'sharing_words',\r\n+  'morning_routine',\r\n+  'activity_description',\r\n+  'cleanup_time',\r\n+  'cleanup_outside',\r\n+  'line_up',\r\n+  'game_choices',\r\n+  'play_rules',\r\n+  'playground_rules',\r\n+  'safety_words',\r\n+  'number_one',\r\n+  'number_two',\r\n+  'number_three',\r\n+  'number_four',\r\n+  'number_six',\r\n+  'number_seven',\r\n+  'number_eight',\r\n+  'number_nine',\r\n+  'number_ten',\r\n+  'counting_objects',\r\n+  'counting_actions',\r\n+  'counting_friends',\r\n+  'counting_sounds',\r\n+  'counting_colors',\r\n+  'counting_review',\r\n+  'counting_toys',\r\n+  'counting_fingers',\r\n+  'counting_steps',\r\n+  'counting_claps',\r\n+  'counting_animals',\r\n+  'counting_together',\r\n+  'counting_groups',\r\n+  'count_up',\r\n+  'review_six_seven',\r\n+  'review_eight_nine',\r\n+  'review_ten',\r\n+  'final_review'\r\n+] as const\r\n+\r\n+class InsertionLogger {\r\n+  private startTime: number\r\n+\r\n+  constructor() {\r\n+    this.startTime = Date.now()\r\n+  }\r\n+\r\n+  warn(data: { message: string; context?: any; source?: string }) {\r\n+    this.log('WARNING', data.message);\r\n+  }\r\n+\r\n+  log(level: keyof typeof logLevels, message: string, error?: Error | PostgrestError) {\r\n+    const timestamp = new Date().toISOString()\r\n+    const elapsed = ((Date.now() - this.startTime) / 1000).toFixed(2)\r\n+    \r\n+    console.log(`[${timestamp}] [${elapsed}s] [${level}] ${message}`)\r\n+    if (error) {\r\n+      console.error(error)\r\n+    }\r\n+  }\r\n+}\r\n+\r\n+class DatabaseInserter {\r\n+  private supabase\r\n+  private logger\r\n+  private insertedIds: Map<string, string[]>\r\n+\r\n+  constructor(supabaseUrl: string, supabaseKey: string) {\r\n+    this.supabase = createClient(supabaseUrl, supabaseKey)\r\n+    this.logger = new InsertionLogger()\r\n+    this.insertedIds = new Map()\r\n+  }\r\n+\r\n+  private async rollback(): Promise<void> {\r\n+    this.logger.log('WARNING', 'Starting rollback...')\r\n+    \r\n+    // Delete in reverse order to handle foreign key constraints\r\n+    const tables = Object.values(dbConfig.tables).reverse()\r\n+    \r\n+    for (const table of tables) {\r\n+      const ids = this.insertedIds.get(table) || []\r\n+      if (ids.length > 0) {\r\n+        this.logger.log('INFO', `Rolling back ${ids.length} records from ${table}`)\r\n+        const { error } = await this.supabase\r\n+          .from(table)\r\n+          .delete()\r\n+          .in('id', ids)\r\n+        \r\n+        if (error) {\r\n+          this.logger.log('ERROR', `Failed to rollback ${table}`, error)\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private trackInsertedId(table: string, id: string) {\r\n+    if (!this.insertedIds.has(table)) {\r\n+      this.insertedIds.set(table, [])\r\n+    }\r\n+    this.insertedIds.get(table)!.push(id)\r\n+  }\r\n+\r\n+  async insertPP1Data() {\r\n+    try {\r\n+      // Validate data before starting\r\n+      this.validateData(pp1Data)\r\n+      this.logger.log('INFO', 'Starting data insertion...')\r\n+\r\n+      // Get existing PP1 grade ID\r\n+      const { data: gradeData, error: gradeError } = await this.supabase\r\n+        .from(dbConfig.tables.grades)\r\n+        .select('id')\r\n+        .eq('name', 'PP1')\r\n+        .single()\r\n+\r\n+      if (gradeError) throw new Error('Failed to find PP1 grade')\r\n+      const gradeId = gradeData.id\r\n+\r\n+      // Process topics\r\n+      for (const topic of pp1Data.topics) {\r\n+        await this.processTopic(topic, gradeId)\r\n+      }\r\n+\r\n+      this.logger.log('SUCCESS', 'All data inserted successfully!')\r\n+      return true\r\n+    } catch (error) {\r\n+      this.logger.log('ERROR', 'Error during insertion', error as Error)\r\n+      await this.rollback()\r\n+      throw error\r\n+    }\r\n+  }\r\n+\r\n+  private async processTopic(topic: Topic, gradeId: string) {\r\n+    const topicId = uuidv4()\r\n+    const { error: topicError } = await this.supabase\r\n+      .from(dbConfig.tables.topics)\r\n+      .insert({\r\n+        id: topicId,\r\n+        title: topic.title,\r\n+        description: topic.description,\r\n+        grade_id: gradeId,\r\n+        order_index: topic.order_index\r\n+      })\r\n+\r\n+    if (topicError) throw topicError\r\n+    this.trackInsertedId(dbConfig.tables.topics, topicId)\r\n+    this.logger.log('SUCCESS', `Topic \"${topic.title}\" inserted`)\r\n+\r\n+    for (const subtopic of topic.subtopics) {\r\n+      await this.processSubtopic(subtopic, topicId, gradeId)\r\n+    }\r\n+  }\r\n+\r\n+  private async processSubtopic(subtopic: Subtopic, topicId: string, gradeId: string) {\r\n+    const subtopicId = uuidv4()\r\n+    const { error: subtopicError } = await this.supabase\r\n+      .from(dbConfig.tables.subtopics)\r\n+      .insert({\r\n+        id: subtopicId,\r\n+        title: subtopic.title,\r\n+        description: subtopic.description,\r\n+        topic_id: topicId,\r\n+        order_index: subtopic.order_index\r\n+      })\r\n+\r\n+    if (subtopicError) throw subtopicError\r\n+    this.trackInsertedId(dbConfig.tables.subtopics, subtopicId)\r\n+    this.logger.log('SUCCESS', `Subtopic \"${subtopic.title}\" inserted`)\r\n+\r\n+    for (const lesson of subtopic.lessons) {\r\n+      await this.processLesson(lesson, subtopicId, topicId, gradeId)\r\n+    }\r\n+  }\r\n+\r\n+  private async processLesson(lesson: Lesson, subtopicId: string, topicId: string, gradeId: string) {\r\n+    const lessonId = uuidv4()\r\n+    const { error: lessonError } = await this.supabase\r\n+      .from(dbConfig.tables.lessons)\r\n+      .insert({\r\n+        id: lessonId,\r\n+        title: lesson.title,\r\n+        description: lesson.description,\r\n+        content_type: lesson.content_type,\r\n+        duration: lesson.duration,\r\n+        difficulty: lesson.difficulty,\r\n+        metadata: lesson.metadata,\r\n+        subtopic_id: subtopicId,\r\n+        topic_id: topicId,\r\n+        grade_id: gradeId,\r\n+        order_index: lesson.order_index,\r\n+        status: 'draft',\r\n+        content: lesson.content || null\r\n+      })\r\n+\r\n+    if (lessonError) throw lessonError\r\n+    this.trackInsertedId(dbConfig.tables.lessons, lessonId)\r\n+    this.logger.log('SUCCESS', `Lesson \"${lesson.title}\" inserted`)\r\n+\r\n+    for (const question of lesson.questions) {\r\n+      await this.processQuestion(question, lessonId)\r\n+    }\r\n+\r\n+    if (lesson.activities && lesson.activities.length > 0) {\r\n+      await this.processActivities(lesson.activities, lessonId)\r\n+    }\r\n+  }\r\n+\r\n+  private mapQuestionType(originalType: string): QuestionType {\r\n+    const mappedType = QUESTION_TYPE_MAPPING[originalType];\r\n+    if (!mappedType) {\r\n+      this.logger.warn({\r\n+        message: `Unknown question type \"${originalType}\" - defaulting to \"speaking\"`,\r\n+        context: { originalType },\r\n+        source: 'DatabaseInserter'\r\n+      });\r\n+      return 'speaking';\r\n+    }\r\n+    return mappedType;\r\n+  }\r\n+\r\n+  private async processQuestion(question: Question, lessonId: string) {\r\n+    const questionId = uuidv4();\r\n+    const mappedType = this.mapQuestionType(question.type);\r\n+    \r\n+    const { error: questionError } = await this.supabase\r\n+      .from(dbConfig.tables.questions)\r\n+      .insert({\r\n+        id: questionId,\r\n+        title: question.title,\r\n+        content: question.content,\r\n+        type: mappedType,           // Main question type (from our core types)\r\n+        sub_type: question.type,    // Original, more specific type\r\n+        lesson_id: lessonId,\r\n+        order_index: question.order_index,\r\n+        metadata: question.metadata\r\n+      });\r\n+\r\n+    if (questionError) throw questionError;\r\n+    this.trackInsertedId(dbConfig.tables.questions, questionId);\r\n+    this.logger.log('SUCCESS', `Question \"${question.title}\" inserted with type ${mappedType} and sub-type ${question.type}`);\r\n+\r\n+    for (const exercisePrompt of question.exercise_prompts) {\r\n+      await this.processExercisePrompt(exercisePrompt, questionId);\r\n+    }\r\n+  }\r\n+\r\n+  private async processExercisePrompt(exercisePrompt: ExercisePrompt, questionId: string) {\r\n+    const promptId = uuidv4()\r\n+    const { error: promptError } = await this.supabase\r\n+      .from(dbConfig.tables.exercise_prompts)\r\n+      .insert({\r\n+        id: promptId,\r\n+        text: exercisePrompt.text,\r\n+        narration: exercisePrompt.narration,\r\n+        saytext: exercisePrompt.saytext,\r\n+        order_index: exercisePrompt.order_index,\r\n+        question_id: questionId\r\n+      })\r\n+\r\n+    if (promptError) throw promptError\r\n+    this.trackInsertedId(dbConfig.tables.exercise_prompts, promptId)\r\n+    this.logger.log('SUCCESS', `Exercise prompt inserted`)\r\n+  }\r\n+\r\n+  private validateActivityType(type: string): boolean {\r\n+    const validTypes = ['individual', 'pair', 'group', 'class', 'homework', 'assessment'];\r\n+    return validTypes.includes(type);\r\n+  }\r\n+\r\n+  private async processActivities(activities: Activity[], lessonId: string) {\r\n+    const activityIds = activities.map(activity => uuidv4())\r\n+    \r\n+    // Convert legacy activity types to new format\r\n+    const normalizedActivities = activities.map(activity => ({\r\n+      ...activity,\r\n+      type: activity.type\r\n+        .replace('_activity', '')  // Remove _activity suffix\r\n+        .replace('class_activity', 'class')\r\n+        .replace('pair_activity', 'pair')\r\n+        .replace('group_activity', 'group')\r\n+        .replace('individual_activity', 'individual')\r\n+    }))\r\n+\r\n+    // Validate types before insertion\r\n+    normalizedActivities.forEach(activity => {\r\n+      if (!this.validateActivityType(activity.type)) {\r\n+        throw new Error(`Invalid activity type: ${activity.type}`)\r\n+      }\r\n+    })\r\n+\r\n+    const { error: activityError } = await this.supabase\r\n+      .from(dbConfig.tables.activities)\r\n+      .insert(normalizedActivities.map((activity, index) => ({\r\n+        id: activityIds[index],\r\n+        title: activity.title,\r\n+        name: activity.title,\r\n+        type: activity.type,\r\n+        description: activity.description,\r\n+        instructions: activity.instructions,\r\n+        duration: activity.duration || 30,\r\n+        lesson_id: lessonId\r\n+      })))\r\n+\r\n+    if (activityError) throw activityError\r\n+    activityIds.forEach(id => this.trackInsertedId(dbConfig.tables.activities, id))\r\n+    this.logger.log('SUCCESS', 'Activities inserted')\r\n+  }\r\n+\r\n+  private validateQuestionType(type: string): type is ValidQuestionType {\r\n+    const mappedType = QUESTION_TYPE_MAPPING[type];\r\n+    if (!mappedType) {\r\n+      throw new ValidationError(`Invalid question type: ${type}. Valid types are: ${Object.keys(QUESTION_TYPE_MAPPING).join(', ')}`);\r\n+    }\r\n+    return true;\r\n+  }\r\n+\r\n+  private validateData(data: any) {\r\n+    this.logger.log('INFO', 'Validating data...')\r\n+    \r\n+    // Validate grade data\r\n+    validators.validateString('PP1', dbConfig.validation.maxTitleLength, 'Grade name')\r\n+\r\n+    // Validate topics\r\n+    for (const topic of data.topics) {\r\n+      validators.validateString(topic.title, dbConfig.validation.maxTitleLength, 'Topic title')\r\n+      validators.validateString(topic.description, dbConfig.validation.maxDescriptionLength, 'Topic description')\r\n+      validators.validateOrderIndex(topic.order_index)\r\n+\r\n+      // Validate subtopics\r\n+      for (const subtopic of topic.subtopics) {\r\n+        validators.validateString(subtopic.title, dbConfig.validation.maxTitleLength, 'Subtopic title')\r\n+        validators.validateString(subtopic.description, dbConfig.validation.maxDescriptionLength, 'Subtopic description')\r\n+        validators.validateOrderIndex(subtopic.order_index)\r\n+\r\n+        // Validate lessons\r\n+        for (const lesson of subtopic.lessons) {\r\n+          validators.validateString(lesson.title, dbConfig.validation.maxTitleLength, 'Lesson title')\r\n+          validators.validateString(lesson.description, dbConfig.validation.maxDescriptionLength, 'Lesson description')\r\n+          validators.validateOrderIndex(lesson.order_index)\r\n+\r\n+          // Validate questions\r\n+          for (const question of lesson.questions) {\r\n+            validators.validateString(question.title, dbConfig.validation.maxTitleLength, 'Question title')\r\n+            validators.validateString(question.content, dbConfig.validation.maxDescriptionLength, 'Question content')\r\n+            validators.validateOrderIndex(question.order_index)\r\n+            this.validateQuestionType(question.type)\r\n+\r\n+            // Validate exercise prompts\r\n+            for (const exercisePrompt of question.exercise_prompts) {\r\n+              validators.validateString(exercisePrompt.text, dbConfig.validation.maxDescriptionLength, 'Exercise prompt text')\r\n+              validators.validateOrderIndex(exercisePrompt.order_index)\r\n+            }\r\n+          }\r\n+\r\n+          // Validate activities\r\n+          if (lesson.activities && lesson.activities.length > 0) {\r\n+            for (const activity of lesson.activities) {\r\n+              validators.validateString(activity.title, dbConfig.validation.maxTitleLength, 'Activity title')\r\n+              validators.validateString(activity.description, dbConfig.validation.maxDescriptionLength, 'Activity description')\r\n+              validators.validateOrderIndex(activity.duration)\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+\r\n+    this.logger.log('SUCCESS', 'Data validation completed')\r\n+  }\r\n+}\r\n+\r\n+// Replace import.meta.env with process.env\r\n+const supabaseUrl = process.env.VITE_SUPABASE_URL\r\n+const supabaseKey = process.env.SUPABASE_SERVICE_KEY  // Use service role key instead of anon key\r\n+\r\n+if (!supabaseUrl || !supabaseKey) {\r\n+  throw new Error('Missing Supabase environment variables')\r\n+}\r\n+\r\n+const inserter = new DatabaseInserter(supabaseUrl, supabaseKey)\r\n+\r\n+if (process.env.VITE_ENTRY_URL === process.env.VITE_ENTRY_URL) {\r\n+  inserter.insertPP1Data()\r\n+    .then(() => process.exit(0))\r\n+    .catch(() => process.exit(1))\r\n+}\r\n+\r\n+export { DatabaseInserter }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739487815643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -339,9 +339,9 @@\n   'count_up',\r\n   'review_six_seven',\r\n   'review_eight_nine',\r\n   'review_ten',\r\n-  'final_review'\r\n+  'final_review',\r\n ] as const\r\n \r\n class InsertionLogger {\r\n   private startTime: number\r\n@@ -688,697 +688,5 @@\n     .then(() => process.exit(0))\r\n     .catch(() => process.exit(1))\r\n }\r\n \r\n-export { DatabaseInserter }\n-// src/scripts/insert-pp1-data.ts\r\n-import { createClient } from '@supabase/supabase-js'\r\n-import { v4 as uuidv4 } from 'uuid'\r\n-import pp1Data from '../data/pp1_data.json'\r\n-import dotenv from 'dotenv'\r\n-import path from 'path'\r\n-import { dbConfig, logLevels } from './config/db-config'\r\n-import { validators, ValidationError } from './utils/validators'\r\n-import type { PostgrestError } from '@supabase/supabase-js'\r\n-//import { Topic, Subtopic, Lesson, Question, ExercisePrompt, Activity } from '@/types/index'\r\n-\r\n-// Load environment variables from root .env file\r\n-dotenv.config({ path: path.resolve(process.cwd(), '.env') })\r\n-\r\n-// Debug environment variables\r\n-console.log('Environment variables:', {\r\n-  supabaseUrl: process.env.VITE_SUPABASE_URL,\r\n-  hasServiceKey: !!process.env.SUPABASE_SERVICE_KEY\r\n-})\r\n-import fs from 'fs'\r\n-const data = JSON.parse(fs.readFileSync('src/data/pp1_data.json', 'utf8'));\r\n-\r\n-const questionTypes = new Set();\r\n-\r\n-// Recursive function to find all question types\r\n-function findQuestionTypes(obj: any) {\r\n-  if (obj && typeof obj === 'object') {\r\n-    if (obj.type && obj.id && obj.id.startsWith('pp1')) {\r\n-      questionTypes.add(obj.type);\r\n-    }\r\n-    Object.values(obj).forEach(value => findQuestionTypes(value));\r\n-  }\r\n-}\r\n-\r\n-findQuestionTypes(data);\r\n-console.log('Found question types:', Array.from(questionTypes));\r\n-\r\n-\r\n-// Define types based on your schema\r\n-interface ExercisePrompt {\r\n-  id?: string\r\n-  text: string\r\n-  narration: string\r\n-  saytext: string\r\n-  order_index: number\r\n-  question_id?: string\r\n-}\r\n-\r\n-interface Question {\r\n-  id: string\r\n-  title: string\r\n-  content: string\r\n-  type: string\r\n-  exercise_prompts: ExercisePrompt[]\r\n-  lesson_id?: string\r\n-  order_index?: number\r\n-  sub_type?: string\r\n-  metadata?: Record<string, any>\r\n-}\r\n-\r\n-interface Activity {\r\n-  id: string\r\n-  title: string\r\n-  type: string\r\n-  description: string\r\n-  instructions: string\r\n-  duration: number\r\n-  lesson_id?: string\r\n-}\r\n-\r\n-interface Lesson {\r\n-  id: string\r\n-  title: string\r\n-  description: string\r\n-  content_type: string\r\n-  duration: number\r\n-  difficulty: string\r\n-  metadata: Record<string, any>\r\n-  questions: Question[]\r\n-  activities: Activity[]\r\n-  subtopic_id?: string\r\n-  order_index: number\r\n-  content?: string\r\n-}\r\n-\r\n-interface Subtopic {\r\n-  id: string\r\n-  title: string\r\n-  description: string\r\n-  order_index: number\r\n-  lessons: Lesson[]\r\n-  topic_id?: string\r\n-}\r\n-\r\n-interface Topic {\r\n-  id: string\r\n-  title: string\r\n-  description: string\r\n-  subtopics: Subtopic[]\r\n-  grade_id?: string\r\n-  order_index: number\r\n-}\r\n-\r\n-// Better yet, import it directly from constants:\r\n-import { QuestionType } from '@/app/content-management/constants';\r\n-\r\n-const VALID_QUESTION_TYPES = [\r\n-  'speaking',\r\n-  'dialogue',\r\n-  'story_telling',\r\n-  'question_answer',\r\n-  'role_play',\r\n-  'morning_routine',\r\n-  'activity_description',\r\n-  'asking_help',\r\n-  'sharing_experiences',\r\n-  'problem_solving',\r\n-  'fun_speaking',\r\n-  'game_words',\r\n-  'sharing',\r\n-  'singing',\r\n-  'happy_words',\r\n-  'action_words',\r\n-  'action_songs',\r\n-  'follow_leader',\r\n-  'animal_actions',\r\n-  'playtime_words',\r\n-  'toy_words',\r\n-  'game_choices',\r\n-  'play_areas',\r\n-  'play_rules',\r\n-  'play_feelings',\r\n-  'play_invitations',\r\n-  'sharing_words',\r\n-  'kind_words',\r\n-  'play_help',\r\n-  'cleanup_time',\r\n-  'playground_words',\r\n-  'outdoor_games',\r\n-  'safety_words',\r\n-  'weather_words',\r\n-  'line_up',\r\n-  'playground_friends',\r\n-  'movement_words',\r\n-  'playground_rules',\r\n-  'playground_feelings',\r\n-  'cleanup_outside',\r\n-  'number_one',\r\n-  'number_two',\r\n-  'counting_objects',\r\n-  'body_parts',\r\n-  'classroom_items',\r\n-  'counting_actions',\r\n-  'counting_friends',\r\n-  'counting_sounds',\r\n-  'counting_colors',\r\n-  'counting_review',\r\n-  'number_three',\r\n-  'number_four',\r\n-  'counting_toys',\r\n-  'counting_fingers',\r\n-  'counting_steps',\r\n-  'counting_claps',\r\n-  'counting_animals',\r\n-  'number_six',\r\n-  'number_seven',\r\n-  'number_eight',\r\n-  'number_nine',\r\n-  'number_ten',\r\n-  'counting_together',\r\n-  'final_review',\r\n-  'count_up',\r\n-  'review_six_seven',\r\n-  'review_eight_nine',\r\n-  'review_ten',\r\n-  'counting_groups'\r\n-] as const;\r\n-\r\n-type ValidQuestionType = typeof VALID_QUESTION_TYPES[number];\r\n-\r\n-// Define a mapping of specific types to our core question types\r\n-const QUESTION_TYPE_MAPPING: Record<string, QuestionType> = {\r\n-  // Speaking-related types map to 'speaking'\r\n-  'speaking': 'speaking',\r\n-  'fun_speaking': 'speaking',\r\n-  'sharing': 'speaking',\r\n-  'singing': 'speaking',\r\n-  'action_words': 'speaking',\r\n-  'action_songs': 'speaking',\r\n-  'follow_leader': 'speaking',\r\n-  'animal_actions': 'speaking',\r\n-  'playtime_words': 'speaking',\r\n-  'toy_words': 'speaking',\r\n-  'game_words': 'speaking',\r\n-  'play_areas': 'speaking',\r\n-  'happy_words': 'speaking',\r\n-  'kind_words': 'speaking',\r\n-  'playground_words': 'speaking',\r\n-  'weather_words': 'speaking',\r\n-  'movement_words': 'speaking',\r\n-  'body_parts': 'speaking',\r\n-  'classroom_items': 'speaking',\r\n-\r\n-  // Story-related types map to 'storytelling'\r\n-  'story_telling': 'storytelling',\r\n-  'sharing_experiences': 'storytelling',\r\n-\r\n-  // Conversation-related types map to 'speakingWithAPartner'\r\n-  'dialogue': 'speakingWithAPartner',\r\n-  'question_answer': 'speakingWithAPartner',\r\n-  'role_play': 'speakingWithAPartner',\r\n-  'play_invitations': 'speakingWithAPartner',\r\n-  'sharing_words': 'speakingWithAPartner',\r\n-\r\n-  // Action-related types map to 'actionAndSpeaking'\r\n-  'morning_routine': 'actionAndSpeaking',\r\n-  'activity_description': 'actionAndSpeaking',\r\n-  'cleanup_time': 'actionAndSpeaking',\r\n-  'cleanup_outside': 'actionAndSpeaking',\r\n-  'line_up': 'actionAndSpeaking',\r\n-\r\n-  // Multiple choice related types\r\n-  'game_choices': 'multipleChoice',\r\n-  'play_rules': 'multipleChoice',\r\n-  'playground_rules': 'multipleChoice',\r\n-  'safety_words': 'multipleChoice',\r\n-\r\n-  // Number and counting related types map to appropriate core types\r\n-  'number_one': 'speaking',\r\n-  'number_two': 'speaking',\r\n-  'number_three': 'speaking',\r\n-  'number_four': 'speaking',\r\n-  'number_six': 'speaking',\r\n-  'number_seven': 'speaking',\r\n-  'number_eight': 'speaking',\r\n-  'number_nine': 'speaking',\r\n-  'number_ten': 'speaking',\r\n-  'counting_objects': 'speaking',\r\n-  'counting_actions': 'speaking',\r\n-  'counting_friends': 'speaking',\r\n-  'counting_sounds': 'speaking',\r\n-  'counting_colors': 'speaking',\r\n-  'counting_review': 'speaking',\r\n-  'counting_toys': 'speaking',\r\n-  'counting_fingers': 'speaking',\r\n-  'counting_steps': 'speaking',\r\n-  'counting_claps': 'speaking',\r\n-  'counting_animals': 'speaking',\r\n-  'counting_together': 'speaking',\r\n-  'counting_groups': 'speaking',\r\n-  'count_up': 'speaking',\r\n-  'review_six_seven': 'speaking',\r\n-  'review_eight_nine': 'speaking',\r\n-  'review_ten': 'speaking',\r\n-  'final_review': 'speaking',\r\n-\r\n-  // Additional mappings for missing types\r\n-  'asking_help': 'speakingWithAPartner',\r\n-  'class_activity': 'speaking',\r\n-  'individual_activity': 'speaking',\r\n-  'individual': 'speaking',\r\n-  'pair': 'speakingWithAPartner',\r\n-  'class': 'speaking',\r\n-  'group_activity': 'speaking',\r\n-  'movement_activity': 'actionAndSpeaking',\r\n-\r\n-  // Problem solving maps to speaking with partner\r\n-  'problem_solving': 'speakingWithAPartner',\r\n-\r\n-  // Play-related types map to speaking\r\n-  'play_feelings': 'speaking',\r\n-  'play_help': 'speaking',\r\n-  \r\n-  // Outdoor-related types map to actionAndSpeaking\r\n-  'outdoor_games': 'actionAndSpeaking',\r\n-  'playground_friends': 'speaking',\r\n-  'playground_feelings': 'speaking',\r\n-  \r\n-\r\n-// Valid sub-types list (for reference and validation)\r\n-const VALID_SUB_TYPES = [\r\n-  'speaking',\r\n-  'fun_speaking',\r\n-  'sharing',\r\n-  'singing',\r\n-  'action_words',\r\n-  'action_songs',\r\n-  'follow_leader',\r\n-  'animal_actions',\r\n-  'playtime_words',\r\n-  'toy_words',\r\n-  'game_words',\r\n-  'play_areas',\r\n-  'happy_words',\r\n-  'kind_words',\r\n-  'playground_words',\r\n-  'weather_words',\r\n-  'movement_words',\r\n-  'body_parts',\r\n-  'classroom_items',\r\n-  'story_telling',\r\n-  'sharing_experiences',\r\n-  'dialogue',\r\n-  'question_answer',\r\n-  'role_play',\r\n-  'play_invitations',\r\n-  'sharing_words',\r\n-  'morning_routine',\r\n-  'activity_description',\r\n-  'cleanup_time',\r\n-  'cleanup_outside',\r\n-  'line_up',\r\n-  'game_choices',\r\n-  'play_rules',\r\n-  'playground_rules',\r\n-  'safety_words',\r\n-  'number_one',\r\n-  'number_two',\r\n-  'number_three',\r\n-  'number_four',\r\n-  'number_six',\r\n-  'number_seven',\r\n-  'number_eight',\r\n-  'number_nine',\r\n-  'number_ten',\r\n-  'counting_objects',\r\n-  'counting_actions',\r\n-  'counting_friends',\r\n-  'counting_sounds',\r\n-  'counting_colors',\r\n-  'counting_review',\r\n-  'counting_toys',\r\n-  'counting_fingers',\r\n-  'counting_steps',\r\n-  'counting_claps',\r\n-  'counting_animals',\r\n-  'counting_together',\r\n-  'counting_groups',\r\n-  'count_up',\r\n-  'review_six_seven',\r\n-  'review_eight_nine',\r\n-  'review_ten',\r\n-  'final_review'\r\n-] as const,\r\n-\r\n-class InsertionLogger {\r\n-  private startTime: number\r\n-\r\n-  constructor() {\r\n-    this.startTime = Date.now()\r\n-  }\r\n-\r\n-  warn(data: { message: string; context?: any; source?: string }) {\r\n-    this.log('WARNING', data.message);\r\n-  }\r\n-\r\n-  log(level: keyof typeof logLevels, message: string, error?: Error | PostgrestError) {\r\n-    const timestamp = new Date().toISOString()\r\n-    const elapsed = ((Date.now() - this.startTime) / 1000).toFixed(2)\r\n-    \r\n-    console.log(`[${timestamp}] [${elapsed}s] [${level}] ${message}`)\r\n-    if (error) {\r\n-      console.error(error)\r\n-    }\r\n-  }\r\n-}\r\n-\r\n-class DatabaseInserter {\r\n-  private supabase\r\n-  private logger\r\n-  private insertedIds: Map<string, string[]>\r\n-\r\n-  constructor(supabaseUrl: string, supabaseKey: string) {\r\n-    this.supabase = createClient(supabaseUrl, supabaseKey)\r\n-    this.logger = new InsertionLogger()\r\n-    this.insertedIds = new Map()\r\n-  }\r\n-\r\n-  private async rollback(): Promise<void> {\r\n-    this.logger.log('WARNING', 'Starting rollback...')\r\n-    \r\n-    // Delete in reverse order to handle foreign key constraints\r\n-    const tables = Object.values(dbConfig.tables).reverse()\r\n-    \r\n-    for (const table of tables) {\r\n-      const ids = this.insertedIds.get(table) || []\r\n-      if (ids.length > 0) {\r\n-        this.logger.log('INFO', `Rolling back ${ids.length} records from ${table}`)\r\n-        const { error } = await this.supabase\r\n-          .from(table)\r\n-          .delete()\r\n-          .in('id', ids)\r\n-        \r\n-        if (error) {\r\n-          this.logger.log('ERROR', `Failed to rollback ${table}`, error)\r\n-        }\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  private trackInsertedId(table: string, id: string) {\r\n-    if (!this.insertedIds.has(table)) {\r\n-      this.insertedIds.set(table, [])\r\n-    }\r\n-    this.insertedIds.get(table)!.push(id)\r\n-  }\r\n-\r\n-  async insertPP1Data() {\r\n-    try {\r\n-      // Validate data before starting\r\n-      this.validateData(pp1Data)\r\n-      this.logger.log('INFO', 'Starting data insertion...')\r\n-\r\n-      // Get existing PP1 grade ID\r\n-      const { data: gradeData, error: gradeError } = await this.supabase\r\n-        .from(dbConfig.tables.grades)\r\n-        .select('id')\r\n-        .eq('name', 'PP1')\r\n-        .single()\r\n-\r\n-      if (gradeError) throw new Error('Failed to find PP1 grade')\r\n-      const gradeId = gradeData.id\r\n-\r\n-      // Process topics\r\n-      for (const topic of pp1Data.topics) {\r\n-        await this.processTopic(topic, gradeId)\r\n-      }\r\n-\r\n-      this.logger.log('SUCCESS', 'All data inserted successfully!')\r\n-      return true\r\n-    } catch (error) {\r\n-      this.logger.log('ERROR', 'Error during insertion', error as Error)\r\n-      await this.rollback()\r\n-      throw error\r\n-    }\r\n-  }\r\n-\r\n-  private async processTopic(topic: Topic, gradeId: string) {\r\n-    const topicId = uuidv4()\r\n-    const { error: topicError } = await this.supabase\r\n-      .from(dbConfig.tables.topics)\r\n-      .insert({\r\n-        id: topicId,\r\n-        title: topic.title,\r\n-        description: topic.description,\r\n-        grade_id: gradeId,\r\n-        order_index: topic.order_index\r\n-      })\r\n-\r\n-    if (topicError) throw topicError\r\n-    this.trackInsertedId(dbConfig.tables.topics, topicId)\r\n-    this.logger.log('SUCCESS', `Topic \"${topic.title}\" inserted`)\r\n-\r\n-    for (const subtopic of topic.subtopics) {\r\n-      await this.processSubtopic(subtopic, topicId, gradeId)\r\n-    }\r\n-  }\r\n-\r\n-  private async processSubtopic(subtopic: Subtopic, topicId: string, gradeId: string) {\r\n-    const subtopicId = uuidv4()\r\n-    const { error: subtopicError } = await this.supabase\r\n-      .from(dbConfig.tables.subtopics)\r\n-      .insert({\r\n-        id: subtopicId,\r\n-        title: subtopic.title,\r\n-        description: subtopic.description,\r\n-        topic_id: topicId,\r\n-        order_index: subtopic.order_index\r\n-      })\r\n-\r\n-    if (subtopicError) throw subtopicError\r\n-    this.trackInsertedId(dbConfig.tables.subtopics, subtopicId)\r\n-    this.logger.log('SUCCESS', `Subtopic \"${subtopic.title}\" inserted`)\r\n-\r\n-    for (const lesson of subtopic.lessons) {\r\n-      await this.processLesson(lesson, subtopicId, topicId, gradeId)\r\n-    }\r\n-  }\r\n-\r\n-  private async processLesson(lesson: Lesson, subtopicId: string, topicId: string, gradeId: string) {\r\n-    const lessonId = uuidv4()\r\n-    const { error: lessonError } = await this.supabase\r\n-      .from(dbConfig.tables.lessons)\r\n-      .insert({\r\n-        id: lessonId,\r\n-        title: lesson.title,\r\n-        description: lesson.description,\r\n-        content_type: lesson.content_type,\r\n-        duration: lesson.duration,\r\n-        difficulty: lesson.difficulty,\r\n-        metadata: lesson.metadata,\r\n-        subtopic_id: subtopicId,\r\n-        topic_id: topicId,\r\n-        grade_id: gradeId,\r\n-        order_index: lesson.order_index,\r\n-        status: 'draft',\r\n-        content: lesson.content || null\r\n-      })\r\n-\r\n-    if (lessonError) throw lessonError\r\n-    this.trackInsertedId(dbConfig.tables.lessons, lessonId)\r\n-    this.logger.log('SUCCESS', `Lesson \"${lesson.title}\" inserted`)\r\n-\r\n-    for (const question of lesson.questions) {\r\n-      await this.processQuestion(question, lessonId)\r\n-    }\r\n-\r\n-    if (lesson.activities && lesson.activities.length > 0) {\r\n-      await this.processActivities(lesson.activities, lessonId)\r\n-    }\r\n-  }\r\n-\r\n-  private mapQuestionType(originalType: string): QuestionType {\r\n-    const mappedType = QUESTION_TYPE_MAPPING[originalType];\r\n-    if (!mappedType) {\r\n-      this.logger.warn({\r\n-        message: `Unknown question type \"${originalType}\" - defaulting to \"speaking\"`,\r\n-        context: { originalType },\r\n-        source: 'DatabaseInserter'\r\n-      });\r\n-      return 'speaking';\r\n-    }\r\n-    return mappedType;\r\n-  }\r\n-\r\n-  private async processQuestion(question: Question, lessonId: string) {\r\n-    const questionId = uuidv4();\r\n-    const mappedType = this.mapQuestionType(question.type);\r\n-    \r\n-    const { error: questionError } = await this.supabase\r\n-      .from(dbConfig.tables.questions)\r\n-      .insert({\r\n-        id: questionId,\r\n-        title: question.title,\r\n-        content: question.content,\r\n-        type: mappedType,           // Main question type (from our core types)\r\n-        sub_type: question.type,    // Original, more specific type\r\n-        lesson_id: lessonId,\r\n-        order_index: question.order_index,\r\n-        metadata: question.metadata\r\n-      });\r\n-\r\n-    if (questionError) throw questionError;\r\n-    this.trackInsertedId(dbConfig.tables.questions, questionId);\r\n-    this.logger.log('SUCCESS', `Question \"${question.title}\" inserted with type ${mappedType} and sub-type ${question.type}`);\r\n-\r\n-    for (const exercisePrompt of question.exercise_prompts) {\r\n-      await this.processExercisePrompt(exercisePrompt, questionId);\r\n-    }\r\n-  }\r\n-\r\n-  private async processExercisePrompt(exercisePrompt: ExercisePrompt, questionId: string) {\r\n-    const promptId = uuidv4()\r\n-    const { error: promptError } = await this.supabase\r\n-      .from(dbConfig.tables.exercise_prompts)\r\n-      .insert({\r\n-        id: promptId,\r\n-        text: exercisePrompt.text,\r\n-        narration: exercisePrompt.narration,\r\n-        saytext: exercisePrompt.saytext,\r\n-        order_index: exercisePrompt.order_index,\r\n-        question_id: questionId\r\n-      })\r\n-\r\n-    if (promptError) throw promptError\r\n-    this.trackInsertedId(dbConfig.tables.exercise_prompts, promptId)\r\n-    this.logger.log('SUCCESS', `Exercise prompt inserted`)\r\n-  }\r\n-\r\n-  private validateActivityType(type: string): boolean {\r\n-    const validTypes = ['individual', 'pair', 'group', 'class', 'homework', 'assessment'];\r\n-    return validTypes.includes(type);\r\n-  }\r\n-\r\n-  private async processActivities(activities: Activity[], lessonId: string) {\r\n-    const activityIds = activities.map(activity => uuidv4())\r\n-    \r\n-    // Convert legacy activity types to new format\r\n-    const normalizedActivities = activities.map(activity => ({\r\n-      ...activity,\r\n-      type: activity.type\r\n-        .replace('_activity', '')  // Remove _activity suffix\r\n-        .replace('class_activity', 'class')\r\n-        .replace('pair_activity', 'pair')\r\n-        .replace('group_activity', 'group')\r\n-        .replace('individual_activity', 'individual')\r\n-    }))\r\n-\r\n-    // Validate types before insertion\r\n-    normalizedActivities.forEach(activity => {\r\n-      if (!this.validateActivityType(activity.type)) {\r\n-        throw new Error(`Invalid activity type: ${activity.type}`)\r\n-      }\r\n-    })\r\n-\r\n-    const { error: activityError } = await this.supabase\r\n-      .from(dbConfig.tables.activities)\r\n-      .insert(normalizedActivities.map((activity, index) => ({\r\n-        id: activityIds[index],\r\n-        title: activity.title,\r\n-        name: activity.title,\r\n-        type: activity.type,\r\n-        description: activity.description,\r\n-        instructions: activity.instructions,\r\n-        duration: activity.duration || 30,\r\n-        lesson_id: lessonId\r\n-      })))\r\n-\r\n-    if (activityError) throw activityError\r\n-    activityIds.forEach(id => this.trackInsertedId(dbConfig.tables.activities, id))\r\n-    this.logger.log('SUCCESS', 'Activities inserted')\r\n-  }\r\n-\r\n-  private validateQuestionType(type: string): type is ValidQuestionType {\r\n-    const mappedType = QUESTION_TYPE_MAPPING[type];\r\n-    if (!mappedType) {\r\n-      throw new ValidationError(`Invalid question type: ${type}. Valid types are: ${Object.keys(QUESTION_TYPE_MAPPING).join(', ')}`);\r\n-    }\r\n-    return true;\r\n-  }\r\n-\r\n-  private validateData(data: any) {\r\n-    this.logger.log('INFO', 'Validating data...')\r\n-    \r\n-    // Validate grade data\r\n-    validators.validateString('PP1', dbConfig.validation.maxTitleLength, 'Grade name')\r\n-\r\n-    // Validate topics\r\n-    for (const topic of data.topics) {\r\n-      validators.validateString(topic.title, dbConfig.validation.maxTitleLength, 'Topic title')\r\n-      validators.validateString(topic.description, dbConfig.validation.maxDescriptionLength, 'Topic description')\r\n-      validators.validateOrderIndex(topic.order_index)\r\n-\r\n-      // Validate subtopics\r\n-      for (const subtopic of topic.subtopics) {\r\n-        validators.validateString(subtopic.title, dbConfig.validation.maxTitleLength, 'Subtopic title')\r\n-        validators.validateString(subtopic.description, dbConfig.validation.maxDescriptionLength, 'Subtopic description')\r\n-        validators.validateOrderIndex(subtopic.order_index)\r\n-\r\n-        // Validate lessons\r\n-        for (const lesson of subtopic.lessons) {\r\n-          validators.validateString(lesson.title, dbConfig.validation.maxTitleLength, 'Lesson title')\r\n-          validators.validateString(lesson.description, dbConfig.validation.maxDescriptionLength, 'Lesson description')\r\n-          validators.validateOrderIndex(lesson.order_index)\r\n-\r\n-          // Validate questions\r\n-          for (const question of lesson.questions) {\r\n-            validators.validateString(question.title, dbConfig.validation.maxTitleLength, 'Question title')\r\n-            validators.validateString(question.content, dbConfig.validation.maxDescriptionLength, 'Question content')\r\n-            validators.validateOrderIndex(question.order_index)\r\n-            this.validateQuestionType(question.type)\r\n-\r\n-            // Validate exercise prompts\r\n-            for (const exercisePrompt of question.exercise_prompts) {\r\n-              validators.validateString(exercisePrompt.text, dbConfig.validation.maxDescriptionLength, 'Exercise prompt text')\r\n-              validators.validateOrderIndex(exercisePrompt.order_index)\r\n-            }\r\n-          }\r\n-\r\n-          // Validate activities\r\n-          if (lesson.activities && lesson.activities.length > 0) {\r\n-            for (const activity of lesson.activities) {\r\n-              validators.validateString(activity.title, dbConfig.validation.maxTitleLength, 'Activity title')\r\n-              validators.validateString(activity.description, dbConfig.validation.maxDescriptionLength, 'Activity description')\r\n-              validators.validateOrderIndex(activity.duration)\r\n-            }\r\n-          }\r\n-        }\r\n-      }\r\n-    }\r\n-\r\n-    this.logger.log('SUCCESS', 'Data validation completed')\r\n-  }\r\n-}\r\n-\r\n-// Replace import.meta.env with process.env\r\n-const supabaseUrl = process.env.VITE_SUPABASE_URL\r\n-const supabaseKey = process.env.SUPABASE_SERVICE_KEY  // Use service role key instead of anon key\r\n-\r\n-if (!supabaseUrl || !supabaseKey) {\r\n-  throw new Error('Missing Supabase environment variables')\r\n-}\r\n-\r\n-const inserter = new DatabaseInserter(supabaseUrl, supabaseKey)\r\n-\r\n-if (process.env.VITE_ENTRY_URL === process.env.VITE_ENTRY_URL) {\r\n-  inserter.insertPP1Data()\r\n-    .then(() => process.exit(0))\r\n-    .catch(() => process.exit(1))\r\n-}\r\n-\r\n export { DatabaseInserter }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739487832448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -275,8 +275,9 @@\n   'outdoor_games': 'actionAndSpeaking',\r\n   'playground_friends': 'speaking',\r\n   'playground_feelings': 'speaking',\r\n   \r\n+}\r\n \r\n // Valid sub-types list (for reference and validation)\r\n const VALID_SUB_TYPES = [\r\n   'speaking',\r\n@@ -340,10 +341,12 @@\n   'review_six_seven',\r\n   'review_eight_nine',\r\n   'review_ten',\r\n   'final_review',\r\n-] as const\r\n+] as const;\r\n \r\n+type ValidQuestionType = typeof VALID_SUB_TYPES[number];\r\n+\r\n class InsertionLogger {\r\n   private startTime: number\r\n \r\n   constructor() {\r\n"
                },
                {
                    "date": 1739487858708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -275,9 +275,8 @@\n   'outdoor_games': 'actionAndSpeaking',\r\n   'playground_friends': 'speaking',\r\n   'playground_feelings': 'speaking',\r\n   \r\n-}\r\n \r\n // Valid sub-types list (for reference and validation)\r\n const VALID_SUB_TYPES = [\r\n   'speaking',\r\n"
                },
                {
                    "date": 1739487881849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -342,9 +342,8 @@\n   'review_ten',\r\n   'final_review',\r\n ] as const;\r\n \r\n-type ValidQuestionType = typeof VALID_SUB_TYPES[number];\r\n \r\n class InsertionLogger {\r\n   private startTime: number\r\n \r\n"
                },
                {
                    "date": 1739487890742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -342,8 +342,9 @@\n   'review_ten',\r\n   'final_review',\r\n ] as const;\r\n \r\n+type ValidSubType = typeof VALID_SUB_TYPES[number];\r\n \r\n class InsertionLogger {\r\n   private startTime: number\r\n \r\n"
                },
                {
                    "date": 1739487898873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -342,9 +342,9 @@\n   'review_ten',\r\n   'final_review',\r\n ] as const;\r\n \r\n-type ValidSubType = typeof VALID_SUB_TYPES[number];\r\n+type ValidSubType = typeof VALID_SUB_TYPES[number]\r\n \r\n class InsertionLogger {\r\n   private startTime: number\r\n \r\n"
                },
                {
                    "date": 1739487904000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -342,9 +342,9 @@\n   'review_ten',\r\n   'final_review',\r\n ] as const;\r\n \r\n-type ValidSubType = typeof VALID_SUB_TYPES[number]\r\n+type ValidSubType = typeof VALID_SUB_TYPES[number];\r\n \r\n class InsertionLogger {\r\n   private startTime: number\r\n \r\n"
                },
                {
                    "date": 1739513502038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -342,9 +342,9 @@\n   'review_ten',\r\n   'final_review',\r\n ] as const;\r\n \r\n-type ValidSubType = typeof VALID_SUB_TYPES[number];\r\n+const type ValidSubType = typeof VALID_SUB_TYPES[number];\r\n \r\n class InsertionLogger {\r\n   private startTime: number\r\n \r\n"
                },
                {
                    "date": 1739513507798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -342,9 +342,9 @@\n   'review_ten',\r\n   'final_review',\r\n ] as const;\r\n \r\n-const type ValidSubType = typeof VALID_SUB_TYPES[number];\r\n+consttype ValidSubType = typeof VALID_SUB_TYPES[number];\r\n \r\n class InsertionLogger {\r\n   private startTime: number\r\n \r\n"
                },
                {
                    "date": 1739513579454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -277,9 +277,9 @@\n   'playground_feelings': 'speaking',\r\n   \r\n \r\n // Valid sub-types list (for reference and validation)\r\n-const VALID_SUB_TYPES = [\r\n+const VALID_SUB_TYPES : = [\r\n   'speaking',\r\n   'fun_speaking',\r\n   'sharing',\r\n   'singing',\r\n@@ -342,9 +342,8 @@\n   'review_ten',\r\n   'final_review',\r\n ] as const;\r\n \r\n-consttype ValidSubType = typeof VALID_SUB_TYPES[number];\r\n \r\n class InsertionLogger {\r\n   private startTime: number\r\n \r\n"
                },
                {
                    "date": 1739513615246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -277,9 +277,9 @@\n   'playground_feelings': 'speaking',\r\n   \r\n \r\n // Valid sub-types list (for reference and validation)\r\n-const VALID_SUB_TYPES : = [\r\n+const VALID_SUB_TYPES = [\r\n   'speaking',\r\n   'fun_speaking',\r\n   'sharing',\r\n   'singing',\r\n"
                },
                {
                    "date": 1739513630753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -274,9 +274,15 @@\n   // Outdoor-related types map to actionAndSpeaking\r\n   'outdoor_games': 'actionAndSpeaking',\r\n   'playground_friends': 'speaking',\r\n   'playground_feelings': 'speaking',\r\n-  \r\n+  'playground_rules': 'multipleChoice',\r\n+  'playground_words': 'speaking',\r\n+  'playground_feelings': 'speaking',\r\n+  'playground_rules': 'multipleChoice',\r\n+  'playground_words': 'speaking',\r\n+  'playground_feelings': 'speaking',\r\n+  'playground_rules': 'multipleChoice',\r\n \r\n // Valid sub-types list (for reference and validation)\r\n const VALID_SUB_TYPES = [\r\n   'speaking',\r\n"
                },
                {
                    "date": 1739513636000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -281,8 +281,9 @@\n   'playground_rules': 'multipleChoice',\r\n   'playground_words': 'speaking',\r\n   'playground_feelings': 'speaking',\r\n   'playground_rules': 'multipleChoice',\r\n+}\r\n \r\n // Valid sub-types list (for reference and validation)\r\n const VALID_SUB_TYPES = [\r\n   'speaking',\r\n"
                },
                {
                    "date": 1739513643481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -274,15 +274,9 @@\n   // Outdoor-related types map to actionAndSpeaking\r\n   'outdoor_games': 'actionAndSpeaking',\r\n   'playground_friends': 'speaking',\r\n   'playground_feelings': 'speaking',\r\n-  'playground_rules': 'multipleChoice',\r\n-  'playground_words': 'speaking',\r\n-  'playground_feelings': 'speaking',\r\n-  'playground_rules': 'multipleChoice',\r\n-  'playground_words': 'speaking',\r\n-  'playground_feelings': 'speaking',\r\n-  'playground_rules': 'multipleChoice',\r\n+  \r\n }\r\n \r\n // Valid sub-types list (for reference and validation)\r\n const VALID_SUB_TYPES = [\r\n"
                },
                {
                    "date": 1739513766294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,8 +184,34 @@\n   'speaking': 'speaking',\r\n   'fun_speaking': 'speaking',\r\n   'sharing': 'speaking',\r\n   'singing': 'speaking',\r\n+  'dialogue': 'speaking',\r\n+  'question_answer': 'speaking',\r\n+  'role_play': 'speaking',\r\n+  'play_invitations': 'speaking',\r\n+  'asking_help': 'speaking',\r\n+  'problem_solving': 'speaking',\r\n+  \r\n+  // Story-related types map to 'storytelling'\r\n+  'story_telling': 'storytelling',\r\n+  'sharing_experiences': 'storytelling',\r\n+  \r\n+  // Action-related types map to 'actionAndSpeaking'\r\n+  'morning_routine': 'speaking',\r\n+  'activity_description': 'speaking',\r\n+  'cleanup_time': 'speaking',\r\n+  'cleanup_outside': 'speaking',\r\n+  'line_up': 'speaking',\r\n+  'outdoor_games': 'speaking',\r\n+  \r\n+  // Multiple choice related types\r\n+  'game_choices': 'multipleChoice',\r\n+  'play_rules': 'multipleChoice',\r\n+  'playground_rules': 'multipleChoice',\r\n+  'safety_words': 'multipleChoice',\r\n+  \r\n+  // Map all remaining types to 'speaking'\r\n   'action_words': 'speaking',\r\n   'action_songs': 'speaking',\r\n   'follow_leader': 'speaking',\r\n   'animal_actions': 'speaking',\r\n@@ -199,34 +225,14 @@\n   'weather_words': 'speaking',\r\n   'movement_words': 'speaking',\r\n   'body_parts': 'speaking',\r\n   'classroom_items': 'speaking',\r\n-\r\n-  // Story-related types map to 'storytelling'\r\n-  'story_telling': 'storytelling',\r\n-  'sharing_experiences': 'storytelling',\r\n-\r\n-  // Conversation-related types map to 'speakingWithAPartner'\r\n-  'dialogue': 'speakingWithAPartner',\r\n-  'question_answer': 'speakingWithAPartner',\r\n-  'role_play': 'speakingWithAPartner',\r\n-  'play_invitations': 'speakingWithAPartner',\r\n-  'sharing_words': 'speakingWithAPartner',\r\n-\r\n-  // Action-related types map to 'actionAndSpeaking'\r\n-  'morning_routine': 'actionAndSpeaking',\r\n-  'activity_description': 'actionAndSpeaking',\r\n-  'cleanup_time': 'actionAndSpeaking',\r\n-  'cleanup_outside': 'actionAndSpeaking',\r\n-  'line_up': 'actionAndSpeaking',\r\n-\r\n-  // Multiple choice related types\r\n-  'game_choices': 'multipleChoice',\r\n-  'play_rules': 'multipleChoice',\r\n-  'playground_rules': 'multipleChoice',\r\n-  'safety_words': 'multipleChoice',\r\n-\r\n-  // Number and counting related types map to appropriate core types\r\n+  'play_feelings': 'speaking',\r\n+  'play_help': 'speaking',\r\n+  'playground_friends': 'speaking',\r\n+  'playground_feelings': 'speaking',\r\n+  \r\n+  // Number and counting related types\r\n   'number_one': 'speaking',\r\n   'number_two': 'speaking',\r\n   'number_three': 'speaking',\r\n   'number_four': 'speaking',\r\n@@ -251,34 +257,11 @@\n   'count_up': 'speaking',\r\n   'review_six_seven': 'speaking',\r\n   'review_eight_nine': 'speaking',\r\n   'review_ten': 'speaking',\r\n-  'final_review': 'speaking',\r\n+  'final_review': 'speaking'\r\n+};\r\n \r\n-  // Additional mappings for missing types\r\n-  'asking_help': 'speakingWithAPartner',\r\n-  'class_activity': 'speaking',\r\n-  'individual_activity': 'speaking',\r\n-  'individual': 'speaking',\r\n-  'pair': 'speakingWithAPartner',\r\n-  'class': 'speaking',\r\n-  'group_activity': 'speaking',\r\n-  'movement_activity': 'actionAndSpeaking',\r\n-\r\n-  // Problem solving maps to speaking with partner\r\n-  'problem_solving': 'speakingWithAPartner',\r\n-\r\n-  // Play-related types map to speaking\r\n-  'play_feelings': 'speaking',\r\n-  'play_help': 'speaking',\r\n-  \r\n-  // Outdoor-related types map to actionAndSpeaking\r\n-  'outdoor_games': 'actionAndSpeaking',\r\n-  'playground_friends': 'speaking',\r\n-  'playground_feelings': 'speaking',\r\n-  \r\n-}\r\n-\r\n // Valid sub-types list (for reference and validation)\r\n const VALID_SUB_TYPES = [\r\n   'speaking',\r\n   'fun_speaking',\r\n"
                },
                {
                    "date": 1739513795484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -257,9 +257,19 @@\n   'count_up': 'speaking',\r\n   'review_six_seven': 'speaking',\r\n   'review_eight_nine': 'speaking',\r\n   'review_ten': 'speaking',\r\n-  'final_review': 'speaking'\r\n+  'final_review': 'speaking',\r\n+  \r\n+  // Additional mappings for missing types\r\n+  'sharing_words': 'speaking',\r\n+  'class_activity': 'speaking',\r\n+  'individual_activity': 'speaking',\r\n+  'individual': 'speaking',\r\n+  'pair': 'speaking',\r\n+  'class': 'speaking',\r\n+  'group_activity': 'speaking',\r\n+  'movement_activity': 'speaking',\r\n };\r\n \r\n // Valid sub-types list (for reference and validation)\r\n const VALID_SUB_TYPES = [\r\n"
                },
                {
                    "date": 1739513885678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -562,10 +562,19 @@\n     this.logger.log('SUCCESS', `Exercise prompt inserted`)\r\n   }\r\n \r\n   private validateActivityType(type: string): boolean {\r\n+    // Convert legacy types to standard types\r\n+    const normalizedType = type\r\n+      .replace('_activity', '')\r\n+      .replace('role_play', 'individual')  // Map role_play to individual\r\n+      .replace('class_activity', 'class')\r\n+      .replace('pair_activity', 'pair')\r\n+      .replace('group_activity', 'group')\r\n+      .replace('individual_activity', 'individual');\r\n+\r\n     const validTypes = ['individual', 'pair', 'group', 'class', 'homework', 'assessment'];\r\n-    return validTypes.includes(type);\r\n+    return validTypes.includes(normalizedType);\r\n   }\r\n \r\n   private async processActivities(activities: Activity[], lessonId: string) {\r\n     const activityIds = activities.map(activity => uuidv4())\r\n@@ -573,13 +582,8 @@\n     // Convert legacy activity types to new format\r\n     const normalizedActivities = activities.map(activity => ({\r\n       ...activity,\r\n       type: activity.type\r\n-        .replace('_activity', '')  // Remove _activity suffix\r\n-        .replace('class_activity', 'class')\r\n-        .replace('pair_activity', 'pair')\r\n-        .replace('group_activity', 'group')\r\n-        .replace('individual_activity', 'individual')\r\n     }))\r\n \r\n     // Validate types before insertion\r\n     normalizedActivities.forEach(activity => {\r\n"
                },
                {
                    "date": 1739513959485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -582,8 +582,13 @@\n     // Convert legacy activity types to new format\r\n     const normalizedActivities = activities.map(activity => ({\r\n       ...activity,\r\n       type: activity.type\r\n+        .replace('_activity', '')  // Remove _activity suffix\r\n+        .replace('class_activity', 'class')\r\n+        .replace('pair_activity', 'pair')\r\n+        .replace('group_activity', 'group')\r\n+        .replace('individual_activity', 'individual')\r\n     }))\r\n \r\n     // Validate types before insertion\r\n     normalizedActivities.forEach(activity => {\r\n"
                },
                {
                    "date": 1739513966013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -579,18 +579,25 @@\n   private async processActivities(activities: Activity[], lessonId: string) {\r\n     const activityIds = activities.map(activity => uuidv4())\r\n     \r\n     // Convert legacy activity types to new format\r\n-    const normalizedActivities = activities.map(activity => ({\r\n-      ...activity,\r\n-      type: activity.type\r\n-        .replace('_activity', '')  // Remove _activity suffix\r\n-        .replace('class_activity', 'class')\r\n-        .replace('pair_activity', 'pair')\r\n-        .replace('group_activity', 'group')\r\n-        .replace('individual_activity', 'individual')\r\n-    }))\r\n+    const normalizedActivities = activities.map(activity => {\r\n+      // Map legacy types to valid enum values\r\n+      const typeMapping: Record<string, string> = {\r\n+        'class_activity': 'class',\r\n+        'individual_activity': 'individual',\r\n+        'pair_activity': 'pair',\r\n+        'group_activity': 'group',\r\n+        'role_play': 'individual',\r\n+        'movement_activity': 'individual'\r\n+      };\r\n \r\n+      return {\r\n+        ...activity,\r\n+        type: typeMapping[activity.type] || activity.type\r\n+      };\r\n+    });\r\n+\r\n     // Validate types before insertion\r\n     normalizedActivities.forEach(activity => {\r\n       if (!this.validateActivityType(activity.type)) {\r\n         throw new Error(`Invalid activity type: ${activity.type}`)\r\n"
                },
                {
                    "date": 1739704716264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,8 +55,11 @@\n   lesson_id?: string\r\n   order_index?: number\r\n   sub_type?: string\r\n   metadata?: Record<string, any>\r\n+  prompt: string\r\n+  teacher_script?: string\r\n+  sample_answer?: string\r\n }\r\n \r\n interface Activity {\r\n   id: string\r\n@@ -655,18 +658,9 @@\n           validators.validateOrderIndex(lesson.order_index)\r\n \r\n           // Validate questions\r\n           for (const question of lesson.questions) {\r\n-            validators.validateString(question.title, dbConfig.validation.maxTitleLength, 'Question title')\r\n-            validators.validateString(question.content, dbConfig.validation.maxDescriptionLength, 'Question content')\r\n-            validators.validateOrderIndex(question.order_index)\r\n-            this.validateQuestionType(question.type)\r\n-\r\n-            // Validate exercise prompts\r\n-            for (const exercisePrompt of question.exercise_prompts) {\r\n-              validators.validateString(exercisePrompt.text, dbConfig.validation.maxDescriptionLength, 'Exercise prompt text')\r\n-              validators.validateOrderIndex(exercisePrompt.order_index)\r\n-            }\r\n+            this.validateQuestion(question)\r\n           }\r\n \r\n           // Validate activities\r\n           if (lesson.activities && lesson.activities.length > 0) {\r\n@@ -681,8 +675,37 @@\n     }\r\n \r\n     this.logger.log('SUCCESS', 'Data validation completed')\r\n   }\r\n+\r\n+  private validateQuestion(question: Question) {\r\n+    validators.validateString(question.title, dbConfig.validation.maxTitleLength, 'Question title');\r\n+    validators.validateString(question.content, dbConfig.validation.maxDescriptionLength, 'Question content');\r\n+    validators.validateString(question.prompt, dbConfig.validation.maxDescriptionLength, 'Question prompt');\r\n+    \r\n+    if (question.teacher_script) {\r\n+      validators.validateString(question.teacher_script, dbConfig.validation.maxDescriptionLength, 'Teacher script');\r\n+    }\r\n+    \r\n+    if (question.sample_answer) {\r\n+      validators.validateString(question.sample_answer, dbConfig.validation.maxDescriptionLength, 'Sample answer');\r\n+    }\r\n+    \r\n+    validators.validateOrderIndex(question.order_index);\r\n+    this.validateQuestionType(question.type);\r\n+\r\n+    // Validate exercise prompts\r\n+    for (const exercisePrompt of question.exercise_prompts) {\r\n+      this.validateExercisePrompt(exercisePrompt);\r\n+    }\r\n+  }\r\n+\r\n+  private validateExercisePrompt(prompt: ExercisePrompt) {\r\n+    validators.validateString(prompt.text, dbConfig.validation.maxDescriptionLength, 'Exercise prompt text');\r\n+    validators.validateString(prompt.narration, dbConfig.validation.maxDescriptionLength, 'Exercise prompt narration');\r\n+    validators.validateString(prompt.saytext, dbConfig.validation.maxDescriptionLength, 'Exercise prompt saytext');\r\n+    validators.validateOrderIndex(prompt.order_index);\r\n+  }\r\n }\r\n \r\n // Replace import.meta.env with process.env\r\n const supabaseUrl = process.env.VITE_SUPABASE_URL\r\n"
                },
                {
                    "date": 1739704729546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -420,9 +420,9 @@\n       const gradeId = gradeData.id\r\n \r\n       // Process topics\r\n       for (const topic of pp1Data.topics) {\r\n-        await this.processTopic(topic, gradeId)\r\n+        await this.processTopic(topic as Topic, gradeId)\r\n       }\r\n \r\n       this.logger.log('SUCCESS', 'All data inserted successfully!')\r\n       return true\r\n"
                },
                {
                    "date": 1739704763348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -658,9 +658,18 @@\n           validators.validateOrderIndex(lesson.order_index)\r\n \r\n           // Validate questions\r\n           for (const question of lesson.questions) {\r\n-            this.validateQuestion(question)\r\n+            validators.validateString(question.title, dbConfig.validation.maxTitleLength, 'Question title')\r\n+            validators.validateString(question.content, dbConfig.validation.maxDescriptionLength, 'Question content')\r\n+            validators.validateOrderIndex(question.order_index)\r\n+            this.validateQuestionType(question.type)\r\n+\r\n+            // Validate exercise prompts\r\n+            for (const exercisePrompt of question.exercise_prompts) {\r\n+              validators.validateString(exercisePrompt.text, dbConfig.validation.maxDescriptionLength, 'Exercise prompt text')\r\n+              validators.validateOrderIndex(exercisePrompt.order_index)\r\n+            }\r\n           }\r\n \r\n           // Validate activities\r\n           if (lesson.activities && lesson.activities.length > 0) {\r\n"
                },
                {
                    "date": 1739717136779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -698,9 +698,11 @@\n     if (question.sample_answer) {\r\n       validators.validateString(question.sample_answer, dbConfig.validation.maxDescriptionLength, 'Sample answer');\r\n     }\r\n     \r\n-    validators.validateOrderIndex(question.order_index);\r\n+    if (question.order_index !== undefined) {\r\n+      validators.validateOrderIndex(question.order_index);\r\n+    }\r\n     this.validateQuestionType(question.type);\r\n \r\n     // Validate exercise prompts\r\n     for (const exercisePrompt of question.exercise_prompts) {\r\n"
                },
                {
                    "date": 1739717166270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -688,10 +688,14 @@\n \r\n   private validateQuestion(question: Question) {\r\n     validators.validateString(question.title, dbConfig.validation.maxTitleLength, 'Question title');\r\n     validators.validateString(question.content, dbConfig.validation.maxDescriptionLength, 'Question content');\r\n-    validators.validateString(question.prompt, dbConfig.validation.maxDescriptionLength, 'Question prompt');\r\n     \r\n+    // Validate new fields\r\n+    if (question.prompt) {\r\n+      validators.validateString(question.prompt, dbConfig.validation.maxDescriptionLength, 'Question prompt');\r\n+    }\r\n+    \r\n     if (question.teacher_script) {\r\n       validators.validateString(question.teacher_script, dbConfig.validation.maxDescriptionLength, 'Teacher script');\r\n     }\r\n     \r\n"
                },
                {
                    "date": 1739790530727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -521,30 +521,73 @@\n     return mappedType;\r\n   }\r\n \r\n   private async processQuestion(question: Question, lessonId: string) {\r\n-    const questionId = uuidv4();\r\n-    const mappedType = this.mapQuestionType(question.type);\r\n-    \r\n-    const { error: questionError } = await this.supabase\r\n+    // First check if question exists\r\n+    const { data: existingQuestion, error: fetchError } = await this.supabase\r\n       .from(dbConfig.tables.questions)\r\n-      .insert({\r\n-        id: questionId,\r\n-        title: question.title,\r\n-        content: question.content,\r\n-        type: mappedType,           // Main question type (from our core types)\r\n-        sub_type: question.type,    // Original, more specific type\r\n-        lesson_id: lessonId,\r\n-        order_index: question.order_index,\r\n-        metadata: question.metadata\r\n-      });\r\n+      .select('*')\r\n+      .eq('id', question.id)\r\n+      .single();\r\n \r\n-    if (questionError) throw questionError;\r\n-    this.trackInsertedId(dbConfig.tables.questions, questionId);\r\n-    this.logger.log('SUCCESS', `Question \"${question.title}\" inserted with type ${mappedType} and sub-type ${question.type}`);\r\n+    if (fetchError && fetchError.code !== 'PGRST116') { // PGRST116 is \"not found\" error\r\n+      throw fetchError;\r\n+    }\r\n \r\n+    if (existingQuestion) {\r\n+      // Compare and update only if there are changes\r\n+      const updates: Partial<Question> = {};\r\n+      \r\n+      // Check new fields\r\n+      if (question.prompt && question.prompt !== existingQuestion.prompt) {\r\n+        updates.prompt = question.prompt;\r\n+      }\r\n+      if (question.teacher_script && question.teacher_script !== existingQuestion.teacher_script) {\r\n+        updates.teacher_script = question.teacher_script;\r\n+      }\r\n+      if (question.sample_answer && question.sample_answer !== existingQuestion.sample_answer) {\r\n+        updates.sample_answer = question.sample_answer;\r\n+      }\r\n+\r\n+      // Only update if there are changes\r\n+      if (Object.keys(updates).length > 0) {\r\n+        const { error: updateError } = await this.supabase\r\n+          .from(dbConfig.tables.questions)\r\n+          .update(updates)\r\n+          .eq('id', question.id);\r\n+\r\n+        if (updateError) throw updateError;\r\n+        this.logger.log('SUCCESS', `Question \"${question.title}\" updated with new fields`);\r\n+      }\r\n+    } else {\r\n+      // Insert new question if it doesn't exist\r\n+      const questionId = question.id || uuidv4();\r\n+      const mappedType = this.mapQuestionType(question.type);\r\n+      \r\n+      const { error: questionError } = await this.supabase\r\n+        .from(dbConfig.tables.questions)\r\n+        .insert({\r\n+          id: questionId,\r\n+          title: question.title,\r\n+          content: question.content,\r\n+          type: mappedType,\r\n+          sub_type: question.type,\r\n+          lesson_id: lessonId,\r\n+          order_index: question.order_index,\r\n+          metadata: question.metadata,\r\n+          prompt: question.prompt,\r\n+          teacher_script: question.teacher_script,\r\n+          sample_answer: question.sample_answer\r\n+        });\r\n+\r\n+      if (questionError) throw questionError;\r\n+      this.trackInsertedId(dbConfig.tables.questions, questionId);\r\n+      this.logger.log('SUCCESS', `Question \"${question.title}\" inserted with new fields`);\r\n+    }\r\n+\r\n+    // Process exercise prompts\r\n     for (const exercisePrompt of question.exercise_prompts) {\r\n-      await this.processExercisePrompt(exercisePrompt, questionId);\r\n+      await this.processExercisePrompt(exercisePrompt, question.id);\r\n     }\r\n   }\r\n \r\n   private async processExercisePrompt(exercisePrompt: ExercisePrompt, questionId: string) {\r\n"
                },
                {
                    "date": 1739790544705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -521,8 +521,10 @@\n     return mappedType;\r\n   }\r\n \r\n   private async processQuestion(question: Question, lessonId: string) {\r\n+\r\n+    \r\n     // First check if question exists\r\n     const { data: existingQuestion, error: fetchError } = await this.supabase\r\n       .from(dbConfig.tables.questions)\r\n       .select('*')\r\n"
                },
                {
                    "date": 1739790551518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -522,9 +522,9 @@\n   }\r\n \r\n   private async processQuestion(question: Question, lessonId: string) {\r\n \r\n-    \r\n+    console.log(question)\r\n     // First check if question exists\r\n     const { data: existingQuestion, error: fetchError } = await this.supabase\r\n       .from(dbConfig.tables.questions)\r\n       .select('*')\r\n"
                },
                {
                    "date": 1739790559155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -521,9 +521,8 @@\n     return mappedType;\r\n   }\r\n \r\n   private async processQuestion(question: Question, lessonId: string) {\r\n-\r\n     console.log(question)\r\n     // First check if question exists\r\n     const { data: existingQuestion, error: fetchError } = await this.supabase\r\n       .from(dbConfig.tables.questions)\r\n"
                },
                {
                    "date": 1739790567193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -521,8 +521,10 @@\n     return mappedType;\r\n   }\r\n \r\n   private async processQuestion(question: Question, lessonId: string) {\r\n+\r\n+    {}\r\n     console.log(question)\r\n     // First check if question exists\r\n     const { data: existingQuestion, error: fetchError } = await this.supabase\r\n       .from(dbConfig.tables.questions)\r\n"
                },
                {
                    "date": 1739790573617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -522,9 +522,9 @@\n   }\r\n \r\n   private async processQuestion(question: Question, lessonId: string) {\r\n \r\n-    {}\r\n+    {/*}\r\n     console.log(question)\r\n     // First check if question exists\r\n     const { data: existingQuestion, error: fetchError } = await this.supabase\r\n       .from(dbConfig.tables.questions)\r\n"
                },
                {
                    "date": 1739790585339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -522,9 +522,9 @@\n   }\r\n \r\n   private async processQuestion(question: Question, lessonId: string) {\r\n \r\n-    {/*}\r\n+    {/* *\r\n     console.log(question)\r\n     // First check if question exists\r\n     const { data: existingQuestion, error: fetchError } = await this.supabase\r\n       .from(dbConfig.tables.questions)\r\n"
                },
                {
                    "date": 1739790592408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -522,9 +522,12 @@\n   }\r\n \r\n   private async processQuestion(question: Question, lessonId: string) {\r\n \r\n-    {/* *\r\n+    {/* \r\n+      \r\n+      \r\n+      */}\r\n     console.log(question)\r\n     // First check if question exists\r\n     const { data: existingQuestion, error: fetchError } = await this.supabase\r\n       .from(dbConfig.tables.questions)\r\n"
                },
                {
                    "date": 1739790603341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -522,11 +522,25 @@\n   }\r\n \r\n   private async processQuestion(question: Question, lessonId: string) {\r\n \r\n-    {/* \r\n+    {/* old \r\n+      const questionId = uuidv4();\r\n+    const mappedType = this.mapQuestionType(question.type);\r\n+    \r\n+    const { error: questionError } = await this.supabase\r\n+      .from(dbConfig.tables.questions)\r\n+      .insert({\r\n+        id: questionId,\r\n+        title: question.title,\r\n+        content: question.content,\r\n+        type: mappedType,           // Main question type (from our core types)\r\n+        sub_type: question.type,    // Original, more specific type\r\n+        lesson_id: lessonId,\r\n+        order_index: question.order_index,\r\n+        metadata: question.metadata\r\n+      });\r\n       \r\n-      \r\n       */}\r\n     console.log(question)\r\n     // First check if question exists\r\n     const { data: existingQuestion, error: fetchError } = await this.supabase\r\n"
                },
                {
                    "date": 1739790650388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -522,9 +522,9 @@\n   }\r\n \r\n   private async processQuestion(question: Question, lessonId: string) {\r\n \r\n-    {/* old \r\n+    {/* old code\r\n       const questionId = uuidv4();\r\n     const mappedType = this.mapQuestionType(question.type);\r\n     \r\n     const { error: questionError } = await this.supabase\r\n@@ -602,9 +602,9 @@\n       if (questionError) throw questionError;\r\n       this.trackInsertedId(dbConfig.tables.questions, questionId);\r\n       this.logger.log('SUCCESS', `Question \"${question.title}\" inserted with new fields`);\r\n     }\r\n-\r\n+{}\r\n     // Process exercise prompts\r\n     for (const exercisePrompt of question.exercise_prompts) {\r\n       await this.processExercisePrompt(exercisePrompt, question.id);\r\n     }\r\n"
                },
                {
                    "date": 1739790657581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -602,13 +602,14 @@\n       if (questionError) throw questionError;\r\n       this.trackInsertedId(dbConfig.tables.questions, questionId);\r\n       this.logger.log('SUCCESS', `Question \"${question.title}\" inserted with new fields`);\r\n     }\r\n-{}\r\n+    {/* \r\n     // Process exercise prompts\r\n     for (const exercisePrompt of question.exercise_prompts) {\r\n       await this.processExercisePrompt(exercisePrompt, question.id);\r\n     }\r\n+    */}\r\n   }\r\n \r\n   private async processExercisePrompt(exercisePrompt: ExercisePrompt, questionId: string) {\r\n     const promptId = uuidv4()\r\n"
                },
                {
                    "date": 1739790663407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -602,9 +602,9 @@\n       if (questionError) throw questionError;\r\n       this.trackInsertedId(dbConfig.tables.questions, questionId);\r\n       this.logger.log('SUCCESS', `Question \"${question.title}\" inserted with new fields`);\r\n     }\r\n-    {/* \r\n+    {/* */}\r\n     // Process exercise prompts\r\n     for (const exercisePrompt of question.exercise_prompts) {\r\n       await this.processExercisePrompt(exercisePrompt, question.id);\r\n     }\r\n"
                },
                {
                    "date": 1739790670559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -602,14 +602,16 @@\n       if (questionError) throw questionError;\r\n       this.trackInsertedId(dbConfig.tables.questions, questionId);\r\n       this.logger.log('SUCCESS', `Question \"${question.title}\" inserted with new fields`);\r\n     }\r\n-    {/* */}\r\n+    {/* \r\n+      \r\n+      */}\r\n     // Process exercise prompts\r\n     for (const exercisePrompt of question.exercise_prompts) {\r\n       await this.processExercisePrompt(exercisePrompt, question.id);\r\n     }\r\n-    */}\r\n+    \r\n   }\r\n \r\n   private async processExercisePrompt(exercisePrompt: ExercisePrompt, questionId: string) {\r\n     const promptId = uuidv4()\r\n"
                },
                {
                    "date": 1739790677672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -602,10 +602,12 @@\n       if (questionError) throw questionError;\r\n       this.trackInsertedId(dbConfig.tables.questions, questionId);\r\n       this.logger.log('SUCCESS', `Question \"${question.title}\" inserted with new fields`);\r\n     }\r\n-    {/* \r\n-      \r\n+    {/* old code\r\n+      if (questionError) throw questionError;\r\n+    this.trackInsertedId(dbConfig.tables.questions, questionId);\r\n+    this.logger.log('SUCCESS', `Question \"${question.title}\" inserted with type ${mappedType} and sub-type ${question.type}`);\r\n       */}\r\n     // Process exercise prompts\r\n     for (const exercisePrompt of question.exercise_prompts) {\r\n       await this.processExercisePrompt(exercisePrompt, question.id);\r\n"
                },
                {
                    "date": 1739790700730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -606,8 +606,11 @@\n     {/* old code\r\n       if (questionError) throw questionError;\r\n     this.trackInsertedId(dbConfig.tables.questions, questionId);\r\n     this.logger.log('SUCCESS', `Question \"${question.title}\" inserted with type ${mappedType} and sub-type ${question.type}`);\r\n+\r\n+    for (const exercisePrompt of question.exercise_prompts) {\r\n+      await this.processExercisePrompt(exercisePrompt, question.id);\r\n       */}\r\n     // Process exercise prompts\r\n     for (const exercisePrompt of question.exercise_prompts) {\r\n       await this.processExercisePrompt(exercisePrompt, question.id);\r\n"
                },
                {
                    "date": 1739790707173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -608,9 +608,9 @@\n     this.trackInsertedId(dbConfig.tables.questions, questionId);\r\n     this.logger.log('SUCCESS', `Question \"${question.title}\" inserted with type ${mappedType} and sub-type ${question.type}`);\r\n \r\n     for (const exercisePrompt of question.exercise_prompts) {\r\n-      await this.processExercisePrompt(exercisePrompt, question.id);\r\n+      await this.processExercisePrompt(exercisePrompt, questionId);\r\n       */}\r\n     // Process exercise prompts\r\n     for (const exercisePrompt of question.exercise_prompts) {\r\n       await this.processExercisePrompt(exercisePrompt, question.id);\r\n"
                },
                {
                    "date": 1739790796021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,20 @@\n   'count_up',\r\n   'review_six_seven',\r\n   'review_eight_nine',\r\n   'review_ten',\r\n-  'counting_groups'\r\n+  'counting_groups',\r\n+  'listening',\r\n+  'say_circle',\r\n+  'find_circles',\r\n+  'circle_objects',\r\n+  'draw_circle',\r\n+  'circle_colors',\r\n+  'circle_sizes',\r\n+  'circle_movement',\r\n+  'circle_counting',\r\n+  'circle_patterns',\r\n+  'circle_review'\r\n ] as const;\r\n \r\n type ValidQuestionType = typeof VALID_QUESTION_TYPES[number];\r\n \r\n@@ -271,8 +282,23 @@\n   'pair': 'speaking',\r\n   'class': 'speaking',\r\n   'group_activity': 'speaking',\r\n   'movement_activity': 'speaking',\r\n+  \r\n+  // Add listening mapping\r\n+  'listening': 'speaking',\r\n+  \r\n+  // Add circle-related mappings\r\n+  'say_circle': 'speaking',\r\n+  'find_circles': 'speaking',\r\n+  'circle_objects': 'speaking',\r\n+  'draw_circle': 'speaking',\r\n+  'circle_colors': 'speaking',\r\n+  'circle_sizes': 'speaking',\r\n+  'circle_movement': 'speaking',\r\n+  'circle_counting': 'speaking',\r\n+  'circle_patterns': 'speaking',\r\n+  'circle_review': 'speaking'\r\n };\r\n \r\n // Valid sub-types list (for reference and validation)\r\n const VALID_SUB_TYPES = [\r\n"
                },
                {
                    "date": 1739791010420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -547,44 +547,26 @@\n     return mappedType;\r\n   }\r\n \r\n   private async processQuestion(question: Question, lessonId: string) {\r\n-\r\n-    {/* old code\r\n-      const questionId = uuidv4();\r\n-    const mappedType = this.mapQuestionType(question.type);\r\n+    // Generate a UUID for the question if it doesn't exist in DB\r\n+    const questionUUID = uuidv4();\r\n     \r\n-    const { error: questionError } = await this.supabase\r\n-      .from(dbConfig.tables.questions)\r\n-      .insert({\r\n-        id: questionId,\r\n-        title: question.title,\r\n-        content: question.content,\r\n-        type: mappedType,           // Main question type (from our core types)\r\n-        sub_type: question.type,    // Original, more specific type\r\n-        lesson_id: lessonId,\r\n-        order_index: question.order_index,\r\n-        metadata: question.metadata\r\n-      });\r\n-      \r\n-      */}\r\n-    console.log(question)\r\n-    // First check if question exists\r\n+    // First check if question exists by original ID\r\n     const { data: existingQuestion, error: fetchError } = await this.supabase\r\n       .from(dbConfig.tables.questions)\r\n       .select('*')\r\n-      .eq('id', question.id)\r\n+      .eq('original_id', question.id) // Use original_id to find existing question\r\n       .single();\r\n \r\n-    if (fetchError && fetchError.code !== 'PGRST116') { // PGRST116 is \"not found\" error\r\n+    if (fetchError && fetchError.code !== 'PGRST116') {\r\n       throw fetchError;\r\n     }\r\n \r\n     if (existingQuestion) {\r\n       // Compare and update only if there are changes\r\n       const updates: Partial<Question> = {};\r\n       \r\n-      // Check new fields\r\n       if (question.prompt && question.prompt !== existingQuestion.prompt) {\r\n         updates.prompt = question.prompt;\r\n       }\r\n       if (question.teacher_script && question.teacher_script !== existingQuestion.teacher_script) {\r\n@@ -593,27 +575,26 @@\n       if (question.sample_answer && question.sample_answer !== existingQuestion.sample_answer) {\r\n         updates.sample_answer = question.sample_answer;\r\n       }\r\n \r\n-      // Only update if there are changes\r\n       if (Object.keys(updates).length > 0) {\r\n         const { error: updateError } = await this.supabase\r\n           .from(dbConfig.tables.questions)\r\n           .update(updates)\r\n-          .eq('id', question.id);\r\n+          .eq('id', existingQuestion.id);\r\n \r\n         if (updateError) throw updateError;\r\n         this.logger.log('SUCCESS', `Question \"${question.title}\" updated with new fields`);\r\n       }\r\n     } else {\r\n-      // Insert new question if it doesn't exist\r\n-      const questionId = question.id || uuidv4();\r\n+      // Insert new question with UUID and original_id\r\n       const mappedType = this.mapQuestionType(question.type);\r\n       \r\n       const { error: questionError } = await this.supabase\r\n         .from(dbConfig.tables.questions)\r\n         .insert({\r\n-          id: questionId,\r\n+          id: questionUUID,\r\n+          original_id: question.id, // Store the original ID\r\n           title: question.title,\r\n           content: question.content,\r\n           type: mappedType,\r\n           sub_type: question.type,\r\n@@ -625,24 +606,16 @@\n           sample_answer: question.sample_answer\r\n         });\r\n \r\n       if (questionError) throw questionError;\r\n-      this.trackInsertedId(dbConfig.tables.questions, questionId);\r\n+      this.trackInsertedId(dbConfig.tables.questions, questionUUID);\r\n       this.logger.log('SUCCESS', `Question \"${question.title}\" inserted with new fields`);\r\n     }\r\n-    {/* old code\r\n-      if (questionError) throw questionError;\r\n-    this.trackInsertedId(dbConfig.tables.questions, questionId);\r\n-    this.logger.log('SUCCESS', `Question \"${question.title}\" inserted with type ${mappedType} and sub-type ${question.type}`);\r\n \r\n+    // Process exercise prompts using the correct question ID\r\n     for (const exercisePrompt of question.exercise_prompts) {\r\n-      await this.processExercisePrompt(exercisePrompt, questionId);\r\n-      */}\r\n-    // Process exercise prompts\r\n-    for (const exercisePrompt of question.exercise_prompts) {\r\n-      await this.processExercisePrompt(exercisePrompt, question.id);\r\n+      await this.processExercisePrompt(exercisePrompt, existingQuestion?.id || questionUUID);\r\n     }\r\n-    \r\n   }\r\n \r\n   private async processExercisePrompt(exercisePrompt: ExercisePrompt, questionId: string) {\r\n     const promptId = uuidv4()\r\n"
                },
                {
                    "date": 1739791056796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -565,8 +565,9 @@\n     if (existingQuestion) {\r\n       // Compare and update only if there are changes\r\n       const updates: Partial<Question> = {};\r\n       \r\n+      // Check new fields\r\n       if (question.prompt && question.prompt !== existingQuestion.prompt) {\r\n         updates.prompt = question.prompt;\r\n       }\r\n       if (question.teacher_script && question.teacher_script !== existingQuestion.teacher_script) {\r\n"
                },
                {
                    "date": 1739791081474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -576,8 +576,9 @@\n       if (question.sample_answer && question.sample_answer !== existingQuestion.sample_answer) {\r\n         updates.sample_answer = question.sample_answer;\r\n       }\r\n \r\n+      // Only update if there are changes\r\n       if (Object.keys(updates).length > 0) {\r\n         const { error: updateError } = await this.supabase\r\n           .from(dbConfig.tables.questions)\r\n           .update(updates)\r\n"
                },
                {
                    "date": 1739791306106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -547,46 +547,47 @@\n     return mappedType;\r\n   }\r\n \r\n   private async processQuestion(question: Question, lessonId: string) {\r\n-    // Generate a UUID for the question if it doesn't exist in DB\r\n     const questionUUID = uuidv4();\r\n     \r\n     // First check if question exists by original ID\r\n     const { data: existingQuestion, error: fetchError } = await this.supabase\r\n       .from(dbConfig.tables.questions)\r\n       .select('*')\r\n-      .eq('original_id', question.id) // Use original_id to find existing question\r\n+      .eq('original_id', question.id)\r\n       .single();\r\n \r\n     if (fetchError && fetchError.code !== 'PGRST116') {\r\n       throw fetchError;\r\n     }\r\n \r\n+    // Prepare data object with new fields\r\n+    const newData = {\r\n+      ...(existingQuestion?.data || {}),\r\n+      prompt: question.prompt,\r\n+      teacher_script: question.teacher_script,\r\n+      sample_answer: question.sample_answer\r\n+    };\r\n+\r\n     if (existingQuestion) {\r\n-      // Compare and update only if there are changes\r\n-      const updates: Partial<Question> = {};\r\n-      \r\n-      // Check new fields\r\n-      if (question.prompt && question.prompt !== existingQuestion.prompt) {\r\n-        updates.prompt = question.prompt;\r\n-      }\r\n-      if (question.teacher_script && question.teacher_script !== existingQuestion.teacher_script) {\r\n-        updates.teacher_script = question.teacher_script;\r\n-      }\r\n-      if (question.sample_answer && question.sample_answer !== existingQuestion.sample_answer) {\r\n-        updates.sample_answer = question.sample_answer;\r\n-      }\r\n+      // Compare and update only if data has changed\r\n+      const existingData = existingQuestion.data || {};\r\n+      const hasChanges = \r\n+        newData.prompt !== existingData.prompt ||\r\n+        newData.teacher_script !== existingData.teacher_script ||\r\n+        newData.sample_answer !== existingData.sample_answer;\r\n \r\n-      // Only update if there are changes\r\n-      if (Object.keys(updates).length > 0) {\r\n+      if (hasChanges) {\r\n         const { error: updateError } = await this.supabase\r\n           .from(dbConfig.tables.questions)\r\n-          .update(updates)\r\n+          .update({\r\n+            data: newData\r\n+          })\r\n           .eq('id', existingQuestion.id);\r\n \r\n         if (updateError) throw updateError;\r\n-        this.logger.log('SUCCESS', `Question \"${question.title}\" updated with new fields`);\r\n+        this.logger.log('SUCCESS', `Question \"${question.title}\" data updated with new fields`);\r\n       }\r\n     } else {\r\n       // Insert new question with UUID and original_id\r\n       const mappedType = this.mapQuestionType(question.type);\r\n@@ -594,24 +595,22 @@\n       const { error: questionError } = await this.supabase\r\n         .from(dbConfig.tables.questions)\r\n         .insert({\r\n           id: questionUUID,\r\n-          original_id: question.id, // Store the original ID\r\n+          original_id: question.id,\r\n           title: question.title,\r\n           content: question.content,\r\n           type: mappedType,\r\n           sub_type: question.type,\r\n           lesson_id: lessonId,\r\n           order_index: question.order_index,\r\n           metadata: question.metadata,\r\n-          prompt: question.prompt,\r\n-          teacher_script: question.teacher_script,\r\n-          sample_answer: question.sample_answer\r\n+          data: newData\r\n         });\r\n \r\n       if (questionError) throw questionError;\r\n       this.trackInsertedId(dbConfig.tables.questions, questionUUID);\r\n-      this.logger.log('SUCCESS', `Question \"${question.title}\" inserted with new fields`);\r\n+      this.logger.log('SUCCESS', `Question \"${question.title}\" inserted with new fields in data`);\r\n     }\r\n \r\n     // Process exercise prompts using the correct question ID\r\n     for (const exercisePrompt of question.exercise_prompts) {\r\n"
                },
                {
                    "date": 1739791314722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -547,15 +547,16 @@\n     return mappedType;\r\n   }\r\n \r\n   private async processQuestion(question: Question, lessonId: string) {\r\n+    // Generate a UUID for the question if it doesn't exist in DB\r\n     const questionUUID = uuidv4();\r\n     \r\n     // First check if question exists by original ID\r\n     const { data: existingQuestion, error: fetchError } = await this.supabase\r\n       .from(dbConfig.tables.questions)\r\n       .select('*')\r\n-      .eq('original_id', question.id)\r\n+      .eq('original_id', question.id) // Use original_id to find existing question\r\n       .single();\r\n \r\n     if (fetchError && fetchError.code !== 'PGRST116') {\r\n       throw fetchError;\r\n"
                },
                {
                    "date": 1739791353899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -596,9 +596,9 @@\n       const { error: questionError } = await this.supabase\r\n         .from(dbConfig.tables.questions)\r\n         .insert({\r\n           id: questionUUID,\r\n-          original_id: question.id,\r\n+          original_id: question.id, // Store the original ID\r\n           title: question.title,\r\n           content: question.content,\r\n           type: mappedType,\r\n           sub_type: question.type,\r\n"
                },
                {
                    "date": 1739791430883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -547,16 +547,15 @@\n     return mappedType;\r\n   }\r\n \r\n   private async processQuestion(question: Question, lessonId: string) {\r\n-    // Generate a UUID for the question if it doesn't exist in DB\r\n     const questionUUID = uuidv4();\r\n     \r\n     // First check if question exists by original ID\r\n     const { data: existingQuestion, error: fetchError } = await this.supabase\r\n       .from(dbConfig.tables.questions)\r\n       .select('*')\r\n-      .eq('original_id', question.id) // Use original_id to find existing question\r\n+      .eq('original_id', question.id)\r\n       .single();\r\n \r\n     if (fetchError && fetchError.code !== 'PGRST116') {\r\n       throw fetchError;\r\n@@ -570,25 +569,41 @@\n       sample_answer: question.sample_answer\r\n     };\r\n \r\n     if (existingQuestion) {\r\n-      // Compare and update only if data has changed\r\n+      // Create updates object for changed fields\r\n+      const updates: Partial<Question> = {};\r\n+      \r\n+      // Check for changes in regular fields\r\n+      if (question.title !== existingQuestion.title) updates.title = question.title;\r\n+      if (question.content !== existingQuestion.content) updates.content = question.content;\r\n+      if (question.type !== existingQuestion.type) updates.type = this.mapQuestionType(question.type);\r\n+      if (question.sub_type !== existingQuestion.sub_type) updates.sub_type = question.type;\r\n+      if (question.order_index !== existingQuestion.order_index) updates.order_index = question.order_index;\r\n+      if (JSON.stringify(question.metadata) !== JSON.stringify(existingQuestion.metadata)) {\r\n+        updates.metadata = question.metadata;\r\n+      }\r\n+\r\n+      // Check for changes in data fields\r\n       const existingData = existingQuestion.data || {};\r\n-      const hasChanges = \r\n+      const hasDataChanges = \r\n         newData.prompt !== existingData.prompt ||\r\n         newData.teacher_script !== existingData.teacher_script ||\r\n         newData.sample_answer !== existingData.sample_answer;\r\n \r\n-      if (hasChanges) {\r\n+      if (hasDataChanges) {\r\n+        updates.data = newData;\r\n+      }\r\n+\r\n+      // Only update if there are any changes\r\n+      if (Object.keys(updates).length > 0) {\r\n         const { error: updateError } = await this.supabase\r\n           .from(dbConfig.tables.questions)\r\n-          .update({\r\n-            data: newData\r\n-          })\r\n+          .update(updates)\r\n           .eq('id', existingQuestion.id);\r\n \r\n         if (updateError) throw updateError;\r\n-        this.logger.log('SUCCESS', `Question \"${question.title}\" data updated with new fields`);\r\n+        this.logger.log('SUCCESS', `Question \"${question.title}\" updated with changes`);\r\n       }\r\n     } else {\r\n       // Insert new question with UUID and original_id\r\n       const mappedType = this.mapQuestionType(question.type);\r\n@@ -596,9 +611,9 @@\n       const { error: questionError } = await this.supabase\r\n         .from(dbConfig.tables.questions)\r\n         .insert({\r\n           id: questionUUID,\r\n-          original_id: question.id, // Store the original ID\r\n+          original_id: question.id,\r\n           title: question.title,\r\n           content: question.content,\r\n           type: mappedType,\r\n           sub_type: question.type,\r\n@@ -609,9 +624,9 @@\n         });\r\n \r\n       if (questionError) throw questionError;\r\n       this.trackInsertedId(dbConfig.tables.questions, questionUUID);\r\n-      this.logger.log('SUCCESS', `Question \"${question.title}\" inserted with new fields in data`);\r\n+      this.logger.log('SUCCESS', `Question \"${question.title}\" inserted`);\r\n     }\r\n \r\n     // Process exercise prompts using the correct question ID\r\n     for (const exercisePrompt of question.exercise_prompts) {\r\n"
                },
                {
                    "date": 1739791468745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -547,15 +547,16 @@\n     return mappedType;\r\n   }\r\n \r\n   private async processQuestion(question: Question, lessonId: string) {\r\n+    // Generate a UUID for the question if it doesn't exist in DB\r\n     const questionUUID = uuidv4();\r\n     \r\n     // First check if question exists by original ID\r\n     const { data: existingQuestion, error: fetchError } = await this.supabase\r\n       .from(dbConfig.tables.questions)\r\n       .select('*')\r\n-      .eq('original_id', question.id)\r\n+      .eq('original_id', question.id) // Use original_id to find existing question\r\n       .single();\r\n \r\n     if (fetchError && fetchError.code !== 'PGRST116') {\r\n       throw fetchError;\r\n@@ -624,9 +625,9 @@\n         });\r\n \r\n       if (questionError) throw questionError;\r\n       this.trackInsertedId(dbConfig.tables.questions, questionUUID);\r\n-      this.logger.log('SUCCESS', `Question \"${question.title}\" inserted`);\r\n+      this.logger.log('SUCCESS', `Question \"${question.title}\" inserted with new fields in data`);\r\n     }\r\n \r\n     // Process exercise prompts using the correct question ID\r\n     for (const exercisePrompt of question.exercise_prompts) {\r\n"
                },
                {
                    "date": 1739791495641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,8 +58,14 @@\n   metadata?: Record<string, any>\r\n   prompt: string\r\n   teacher_script?: string\r\n   sample_answer?: string\r\n+  data?: {\r\n+    prompt?: string;\r\n+    teacher_script?: string;\r\n+    sample_answer?: string;\r\n+    [key: string]: any;\r\n+  };\r\n }\r\n \r\n interface Activity {\r\n   id: string\r\n"
                },
                {
                    "date": 1739791753855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -597,8 +597,9 @@\n       \r\n       // Only update fields that have changed\r\n       if (question.title !== existing.title) updates.title = question.title;\r\n       if (question.content !== existing.content) updates.content = question.content;\r\n+      if (question.type !== existing.type) updates.type = this.mapQuestionType(question.type);\r\n       // Check for changes in regular fields\r\n       if (question.title !== existingQuestion.title) updates.title = question.title;\r\n       if (question.content !== existingQuestion.content) updates.content = question.content;\r\n       if (question.type !== existingQuestion.type) updates.type = this.mapQuestionType(question.type);\r\n"
                }
            ],
            "date": 1739482598916,
            "name": "Commit-0",
            "content": "// src/scripts/insert-pp1-data.ts\r\nimport { createClient } from '@supabase/supabase-js'\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport pp1Data from '../data/pp1_data.json'\r\n\r\n// Define types based on your schema\r\ninterface ExercisePrompt {\r\n  id: string\r\n  text: string\r\n  narration: string\r\n  saytext: string\r\n  order_index: number\r\n  question_id: string\r\n}\r\n\r\ninterface Question {\r\n  id: string\r\n  title: string\r\n  content: string\r\n  type: string\r\n  exercise_prompts: ExercisePrompt[]\r\n  lesson_id: string\r\n  order_index: number\r\n}\r\n\r\ninterface Activity {\r\n  id: string\r\n  title: string\r\n  type: string\r\n  description: string\r\n  instructions: string\r\n  duration: number\r\n  lesson_id: string\r\n}\r\n\r\ninterface Lesson {\r\n  id: string\r\n  title: string\r\n  description: string\r\n  content_type: string\r\n  duration: number\r\n  difficulty: string\r\n  metadata: Record<string, any>\r\n  questions: Question[]\r\n  activities: Activity[]\r\n  subtopic_id: string\r\n  order_index: number\r\n}\r\n\r\ninterface Subtopic {\r\n  id: string\r\n  title: string\r\n  description: string\r\n  order_index: number\r\n  lessons: Lesson[]\r\n  topic_id: string\r\n}\r\n\r\ninterface Topic {\r\n  id: string\r\n  title: string\r\n  description: string\r\n  subtopics: Subtopic[]\r\n  grade_id: string\r\n  order_index: number\r\n}\r\n\r\n// Initialize Supabase client\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!\r\nconst supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\r\nconst supabase = createClient(supabaseUrl, supabaseKey)\r\n\r\nasync function insertPP1Data() {\r\n  try {\r\n    // Start a transaction\r\n    const { data: gradeData, error: gradeError } = await supabase\r\n      .from('grades')\r\n      .insert({\r\n        id: uuidv4(),\r\n        name: 'PP1',\r\n        level: 1\r\n      })\r\n      .select('id')\r\n      .single()\r\n\r\n    if (gradeError) throw gradeError\r\n    const gradeId = gradeData.id\r\n\r\n    // Process each topic\r\n    for (const topic of pp1Data.topics) {\r\n      const topicId = uuidv4()\r\n      const { error: topicError } = await supabase\r\n        .from('topics')\r\n        .insert({\r\n          id: topicId,\r\n          title: topic.title || `Topic ${topic.id}`,\r\n          description: topic.description || '',\r\n          grade_id: gradeId,\r\n          order_index: topic.order_index || 1\r\n        })\r\n\r\n      if (topicError) throw topicError\r\n\r\n      // Process subtopics\r\n      for (const subtopic of topic.subtopics) {\r\n        const subtopicId = uuidv4()\r\n        const { error: subtopicError } = await supabase\r\n          .from('subtopics')\r\n          .insert({\r\n            id: subtopicId,\r\n            title: subtopic.title,\r\n            description: subtopic.description,\r\n            topic_id: topicId,\r\n            order_index: subtopic.order_index\r\n          })\r\n\r\n        if (subtopicError) throw subtopicError\r\n\r\n        // Process lessons\r\n        for (const lesson of subtopic.lessons) {\r\n          const lessonId = uuidv4()\r\n          const { error: lessonError } = await supabase\r\n            .from('lessons')\r\n            .insert({\r\n              id: lessonId,\r\n              title: lesson.title,\r\n              description: lesson.description,\r\n              content_type: lesson.content_type,\r\n              duration: lesson.duration,\r\n              difficulty: lesson.difficulty,\r\n              metadata: lesson.metadata,\r\n              subtopic_id: subtopicId,\r\n              order_index: lesson.order_index\r\n            })\r\n\r\n          if (lessonError) throw lessonError\r\n\r\n          // Process questions\r\n          for (const question of lesson.questions) {\r\n            const questionId = uuidv4()\r\n            const { error: questionError } = await supabase\r\n              .from('questions')\r\n              .insert({\r\n                id: questionId,\r\n                title: question.title,\r\n                content: question.content,\r\n                type: question.type,\r\n                lesson_id: lessonId,\r\n                order_index: question.order_index\r\n              })\r\n\r\n            if (questionError) throw questionError\r\n\r\n            // Process exercise prompts\r\n            const exercisePrompts = question.exercise_prompts.map(prompt => ({\r\n              id: uuidv4(),\r\n              text: prompt.text,\r\n              narration: prompt.narration,\r\n              saytext: prompt.saytext,\r\n              order_index: prompt.order_index,\r\n              question_id: questionId\r\n            }))\r\n\r\n            const { error: promptError } = await supabase\r\n              .from('exercise_prompts')\r\n              .insert(exercisePrompts)\r\n\r\n            if (promptError) throw promptError\r\n          }\r\n\r\n          // Process activities\r\n          if (lesson.activities && lesson.activities.length > 0) {\r\n            const activities = lesson.activities.map(activity => ({\r\n              id: uuidv4(),\r\n              title: activity.title,\r\n              type: activity.type,\r\n              description: activity.description,\r\n              instructions: activity.instructions,\r\n              duration: activity.duration,\r\n              lesson_id: lessonId\r\n            }))\r\n\r\n            const { error: activityError } = await supabase\r\n              .from('activities')\r\n              .insert(activities)\r\n\r\n            if (activityError) throw activityError\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log('Data insertion completed successfully!')\r\n  } catch (error) {\r\n    console.error('Error inserting data:', error)\r\n    throw error\r\n  }\r\n}\r\n\r\n// Execute the insertion\r\ninsertPP1Data()\r\n  .then(() => console.log('Script completed'))\r\n  .catch(error => console.error('Script failed:', error))"
        }
    ]
}