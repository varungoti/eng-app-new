{
    "sourceFile": "src/App.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 26,
            "patches": [
                {
                    "date": 1739020320536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739279869540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n \"use client\";\r\n \r\n-import React from 'react';\r\n-import { Routes, Route, Navigate } from 'react-router-dom';\r\n+import React, { useEffect } from 'react';\r\n+import { Routes, Route, Navigate, useLocation, useNavigate } from 'react-router-dom';\r\n import { QueryClientProvider } from '@tanstack/react-query';\r\n import { QueryClient  } from '@tanstack/query-core';\r\n import { AuthProvider } from './contexts/AuthContext';\r\n import { logger } from './lib/logger';\r\n@@ -89,9 +89,29 @@\n \r\n function App() {\r\n   const { theme, resolvedTheme } = useTheme()\r\n   const currentTheme = themes[theme as keyof typeof themes] || themes[resolvedTheme as keyof typeof themes] || themes.light\r\n+  const location = useLocation();\r\n+  const navigate = useNavigate();\r\n \r\n+  // Persist and restore route on page load\r\n+  useEffect(() => {\r\n+    const currentPath = location.pathname + location.search;\r\n+    if (currentPath !== '/login') {\r\n+      localStorage.setItem('lastRoute', currentPath);\r\n+    }\r\n+  }, [location]);\r\n+\r\n+  // Handle initial route restoration\r\n+  useEffect(() => {\r\n+    const lastRoute = localStorage.getItem('lastRoute');\r\n+    const isInitialLoad = !location.key;\r\n+    \r\n+    if (isInitialLoad && lastRoute && lastRoute !== '/login' && lastRoute !== '/dashboard') {\r\n+      navigate(lastRoute, { replace: true });\r\n+    }\r\n+  }, [navigate, location.key]);\r\n+\r\n   console.log('[App] Rendering...');\r\n   logger.info('App initializing', 'App');\r\n \r\n   return (\r\n@@ -131,9 +151,8 @@\n                             <Layout />\r\n                           </PrivateRoute>\r\n                         </div>\r\n                       }>\r\n-                        <Route index element={<Navigate to=\"/dashboard\" replace />} />\r\n                         <Route path=\"/dashboard\" element={<DashboardPage />} />\r\n                         <Route \r\n                           path=\"app/learning/*\" \r\n                           element={\r\n"
                },
                {
                    "date": 1739279881816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n     }\r\n   }, [navigate, location.key]);\r\n \r\n   console.log('[App] Rendering...');\r\n-  logger.info('App initializing', 'App');\r\n+  logger.info('App initializing', { source: 'App', context: { route: location.pathname } });\r\n \r\n   return (\r\n     <ErrorBoundary source=\"App\">\r\n       <QueryClientProvider client={queryClient}>\r\n"
                },
                {
                    "date": 1739280252850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,25 +92,41 @@\n   const currentTheme = themes[theme as keyof typeof themes] || themes[resolvedTheme as keyof typeof themes] || themes.light\r\n   const location = useLocation();\r\n   const navigate = useNavigate();\r\n \r\n-  // Persist and restore route on page load\r\n+  // Persist route on navigation\r\n   useEffect(() => {\r\n     const currentPath = location.pathname + location.search;\r\n-    if (currentPath !== '/login') {\r\n+    // Only store route if it's not login and not the root path\r\n+    if (currentPath !== '/login' && currentPath !== '/') {\r\n       localStorage.setItem('lastRoute', currentPath);\r\n+      logger.debug('Route persisted', { \r\n+        source: 'App',\r\n+        context: { route: currentPath }\r\n+      });\r\n     }\r\n   }, [location]);\r\n \r\n-  // Handle initial route restoration\r\n+  // Handle route restoration\r\n   useEffect(() => {\r\n     const lastRoute = localStorage.getItem('lastRoute');\r\n     const isInitialLoad = !location.key;\r\n+    const isRootPath = location.pathname === '/';\r\n     \r\n-    if (isInitialLoad && lastRoute && lastRoute !== '/login' && lastRoute !== '/dashboard') {\r\n-      navigate(lastRoute, { replace: true });\r\n+    if (isInitialLoad && lastRoute && lastRoute !== '/login') {\r\n+      // If we're at root path or dashboard, restore the last route\r\n+      if (isRootPath || location.pathname === '/dashboard') {\r\n+        logger.debug('Restoring route', {\r\n+          source: 'App',\r\n+          context: { \r\n+            from: location.pathname,\r\n+            to: lastRoute\r\n+          }\r\n+        });\r\n+        navigate(lastRoute, { replace: true });\r\n+      }\r\n     }\r\n-  }, [navigate, location.key]);\r\n+  }, [navigate, location]);\r\n \r\n   console.log('[App] Rendering...');\r\n   logger.info('App initializing', { source: 'App', context: { route: location.pathname } });\r\n \r\n@@ -151,8 +167,15 @@\n                             <Layout />\r\n                           </PrivateRoute>\r\n                         </div>\r\n                       }>\r\n+                        {/* Handle root path with conditional redirect */}\r\n+                        <Route \r\n+                          path=\"/\" \r\n+                          element={\r\n+                            <RootRouteHandler />\r\n+                          } \r\n+                        />\r\n                         <Route path=\"/dashboard\" element={<DashboardPage />} />\r\n                         <Route \r\n                           path=\"app/learning/*\" \r\n                           element={\r\n@@ -291,5 +314,31 @@\n       </QueryClientProvider>\r\n     </ErrorBoundary>\r\n   );\r\n }\r\n+\r\n+// Add this component to handle root path routing\r\n+function RootRouteHandler() {\r\n+  const navigate = useNavigate();\r\n+  const location = useLocation();\r\n+\r\n+  useEffect(() => {\r\n+    const lastRoute = localStorage.getItem('lastRoute');\r\n+    \r\n+    if (lastRoute && lastRoute !== '/login' && lastRoute !== '/') {\r\n+      logger.debug('Root path: restoring last route', {\r\n+        source: 'RootRouteHandler',\r\n+        context: { lastRoute }\r\n+      });\r\n+      navigate(lastRoute, { replace: true });\r\n+    } else {\r\n+      logger.debug('Root path: redirecting to dashboard', {\r\n+        source: 'RootRouteHandler'\r\n+      });\r\n+      navigate('/dashboard', { replace: true });\r\n+    }\r\n+  }, [navigate]);\r\n+\r\n+  return <LoadingSpinner message=\"Restoring your last location...\" />;\r\n+}\r\n+\r\n export default App;\r\n"
                },
                {
                    "date": 1739280402077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,42 +92,9 @@\n   const currentTheme = themes[theme as keyof typeof themes] || themes[resolvedTheme as keyof typeof themes] || themes.light\r\n   const location = useLocation();\r\n   const navigate = useNavigate();\r\n \r\n-  // Persist route on navigation\r\n-  useEffect(() => {\r\n-    const currentPath = location.pathname + location.search;\r\n-    // Only store route if it's not login and not the root path\r\n-    if (currentPath !== '/login' && currentPath !== '/') {\r\n-      localStorage.setItem('lastRoute', currentPath);\r\n-      logger.debug('Route persisted', { \r\n-        source: 'App',\r\n-        context: { route: currentPath }\r\n-      });\r\n-    }\r\n-  }, [location]);\r\n-\r\n-  // Handle route restoration\r\n-  useEffect(() => {\r\n-    const lastRoute = localStorage.getItem('lastRoute');\r\n-    const isInitialLoad = !location.key;\r\n-    const isRootPath = location.pathname === '/';\r\n-    \r\n-    if (isInitialLoad && lastRoute && lastRoute !== '/login') {\r\n-      // If we're at root path or dashboard, restore the last route\r\n-      if (isRootPath || location.pathname === '/dashboard') {\r\n-        logger.debug('Restoring route', {\r\n-          source: 'App',\r\n-          context: { \r\n-            from: location.pathname,\r\n-            to: lastRoute\r\n-          }\r\n-        });\r\n-        navigate(lastRoute, { replace: true });\r\n-      }\r\n-    }\r\n-  }, [navigate, location]);\r\n-\r\n+  // Log initialization\r\n   console.log('[App] Rendering...');\r\n   logger.info('App initializing', { source: 'App', context: { route: location.pathname } });\r\n \r\n   return (\r\n@@ -167,15 +134,8 @@\n                             <Layout />\r\n                           </PrivateRoute>\r\n                         </div>\r\n                       }>\r\n-                        {/* Handle root path with conditional redirect */}\r\n-                        <Route \r\n-                          path=\"/\" \r\n-                          element={\r\n-                            <RootRouteHandler />\r\n-                          } \r\n-                        />\r\n                         <Route path=\"/dashboard\" element={<DashboardPage />} />\r\n                         <Route \r\n                           path=\"app/learning/*\" \r\n                           element={\r\n@@ -269,33 +229,43 @@\n                               <MyClasses/>\r\n                             </React.Suspense>\r\n                           } \r\n                         />\r\n+                        <Route \r\n+                          path=\"/teacher/*\" \r\n+                          element={\r\n+                            <TeacherLayout>\r\n+                              <Routes>\r\n+                                <Route path=\"dashboard\" element={<TeacherDashboard />} />\r\n+                                <Route path=\"classes\" element={<Classes />} />\r\n+                                <Route path=\"lessons\" element={<Classes />} />\r\n+                                <Route path=\"my-class\" element={\r\n+                                  <React.Suspense fallback={<LoadingSpinner message=\"Loading My Class...\" />}>\r\n+                                    <TeacherMyClassPage />\r\n+                                  </React.Suspense>\r\n+                                } />\r\n+                                <Route path=\"AI-Conversation\" element={<AIConversationPage />} />\r\n+                              </Routes>\r\n+                            </TeacherLayout>\r\n+                          } \r\n+                        />\r\n+                        <Route \r\n+                          path=\"/reset-password/*\" \r\n+                          element={<ResetPassword />} \r\n+                        />\r\n+                        <Route \r\n+                          path=\"/\" \r\n+                          element={\r\n+                            <Navigate to=\"/dashboard\" replace />\r\n+                          } \r\n+                        />\r\n+                        <Route \r\n+                          path=\"*\" \r\n+                          element={\r\n+                            <Navigate to=\"/dashboard\" replace />\r\n+                          } \r\n+                        />\r\n                       </Route>\r\n-                      <Route \r\n-                        path=\"/teacher/*\" \r\n-                        element={\r\n-                          <TeacherLayout>\r\n-                            <Routes>\r\n-                              <Route path=\"/\" element={<Navigate to=\"dashboard\" replace />} />\r\n-                              <Route path=\"dashboard\" element={<TeacherDashboard />} />\r\n-                              <Route path=\"classes\" element={<Classes />} />\r\n-                              <Route path=\"lessons\" element={<Classes />} />\r\n-                              <Route path=\"my-class\" element={\r\n-                                <React.Suspense fallback={<LoadingSpinner message=\"Loading My Class...\" />}>\r\n-                                  <TeacherMyClassPage />\r\n-                                </React.Suspense>\r\n-                              } />\r\n-                              <Route path=\"AI-Conversation\" element={<AIConversationPage />} />\r\n-                            </Routes>\r\n-                          </TeacherLayout>\r\n-                        } \r\n-                      />\r\n-                      <Route \r\n-                        path=\"/reset-password/*\" \r\n-                        element={<ResetPassword />} \r\n-                      />\r\n-                      <Route path=\"*\" element={<Navigate to=\"/dashboard\" replace />} />\r\n                     </Routes>\r\n                     <ErrorToast />\r\n                     {process.env.NODE_ENV === 'development' && (\r\n                       <React.Suspense fallback={null}>\r\n@@ -315,30 +285,5 @@\n     </ErrorBoundary>\r\n   );\r\n }\r\n \r\n-// Add this component to handle root path routing\r\n-function RootRouteHandler() {\r\n-  const navigate = useNavigate();\r\n-  const location = useLocation();\r\n-\r\n-  useEffect(() => {\r\n-    const lastRoute = localStorage.getItem('lastRoute');\r\n-    \r\n-    if (lastRoute && lastRoute !== '/login' && lastRoute !== '/') {\r\n-      logger.debug('Root path: restoring last route', {\r\n-        source: 'RootRouteHandler',\r\n-        context: { lastRoute }\r\n-      });\r\n-      navigate(lastRoute, { replace: true });\r\n-    } else {\r\n-      logger.debug('Root path: redirecting to dashboard', {\r\n-        source: 'RootRouteHandler'\r\n-      });\r\n-      navigate('/dashboard', { replace: true });\r\n-    }\r\n-  }, [navigate]);\r\n-\r\n-  return <LoadingSpinner message=\"Restoring your last location...\" />;\r\n-}\r\n-\r\n export default App;\r\n"
                },
                {
                    "date": 1739281293269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,11 +113,11 @@\n               }}\r\n             >\r\n               <ThemeContextProvider>\r\n                 <ToastProvider>\r\n-                <div className={`relative min-h-screen w-full ${currentTheme.background} ${currentTheme.text}`}>\r\n+                <div className=\"relative min-h-screen w-full\">\r\n                   <ThemeToggle />\r\n-                  <div className={`w-full ${currentTheme.background} ${currentTheme.text}`}>\r\n+                  <div className=\"w-full h-full\">\r\n                     <Routes>\r\n                       <Route \r\n                         path=\"/login\" \r\n                         element={\r\n"
                },
                {
                    "date": 1739281305799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,11 +113,11 @@\n               }}\r\n             >\r\n               <ThemeContextProvider>\r\n                 <ToastProvider>\r\n-                <div className=\"relative min-h-screen w-full\">\r\n+                <div className={`relative min-h-screen w-full ${currentTheme.background} ${currentTheme.text}`}>\r\n                   <ThemeToggle />\r\n-                  <div className=\"w-full h-full\">\r\n+                  <div className={`w-full h-full flex flex-col ${currentTheme.background} ${currentTheme.text}`}>\r\n                     <Routes>\r\n                       <Route \r\n                         path=\"/login\" \r\n                         element={\r\n"
                },
                {
                    "date": 1739281631990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -232,21 +232,23 @@\n                         />\r\n                         <Route \r\n                           path=\"/teacher/*\" \r\n                           element={\r\n-                            <TeacherLayout>\r\n-                              <Routes>\r\n-                                <Route path=\"dashboard\" element={<TeacherDashboard />} />\r\n-                                <Route path=\"classes\" element={<Classes />} />\r\n-                                <Route path=\"lessons\" element={<Classes />} />\r\n-                                <Route path=\"my-class\" element={\r\n-                                  <React.Suspense fallback={<LoadingSpinner message=\"Loading My Class...\" />}>\r\n-                                    <TeacherMyClassPage />\r\n-                                  </React.Suspense>\r\n-                                } />\r\n-                                <Route path=\"AI-Conversation\" element={<AIConversationPage />} />\r\n-                              </Routes>\r\n-                            </TeacherLayout>\r\n+                            <PrivateRoute>\r\n+                              <TeacherLayout>\r\n+                                <Routes>\r\n+                                  <Route path=\"dashboard\" element={<TeacherDashboard />} />\r\n+                                  <Route path=\"classes\" element={<Classes />} />\r\n+                                  <Route path=\"lessons/*\" element={<Classes />} />\r\n+                                  <Route path=\"my-class\" element={\r\n+                                    <React.Suspense fallback={<LoadingSpinner message=\"Loading My Class...\" />}>\r\n+                                      <TeacherMyClassPage />\r\n+                                    </React.Suspense>\r\n+                                  } />\r\n+                                  <Route path=\"AI-Conversation\" element={<AIConversationPage />} />\r\n+                                </Routes>\r\n+                              </TeacherLayout>\r\n+                            </PrivateRoute>\r\n                           } \r\n                         />\r\n                         <Route \r\n                           path=\"/reset-password/*\" \r\n"
                },
                {
                    "date": 1739298816509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,291 +1,344 @@\n-\"use client\";\r\n-\r\n-import React, { useEffect } from 'react';\r\n-import { Routes, Route, Navigate, useLocation, useNavigate } from 'react-router-dom';\r\n-import { QueryClientProvider } from '@tanstack/react-query';\r\n-import { QueryClient  } from '@tanstack/query-core';\r\n-import { AuthProvider } from './contexts/AuthContext';\r\n-import { logger } from './lib/logger';\r\n-import { ErrorProvider } from './contexts/ErrorContext';\r\n-import { ThemeProvider as NextThemesProvider } from \"next-themes\";\r\n-import Layout from './components/Layout';\r\n-import PrivateRoute from './components/PrivateRoute';\r\n-import ErrorToast from './components/ErrorToast';\r\n-//import { queryClient } from '@/providers/query-provider';\r\n-import ErrorBoundary from './components/ErrorBoundary';\r\n-import LoadingSpinner from './components/LoadingSpinner';\r\n-import ThemeSelector from './components/ThemeSelector';\r\n-import ContentManagementPage from './app/content-management/page' ;\r\n-import { ReactQueryDevtools } from '@tanstack/react-query-devtools';\r\n-import { ThemeToggle } from \"@/components/theme-toggle\"\r\n-import { useTheme } from \"next-themes\"\r\n-import { themes } from \"@/lib/themes\"\r\n-import { ThemeContextProvider } from './contexts/ThemeContext';\r\n-import { Toaster } from \"@/components/ui/toaster\";\r\n-import { ToastProvider } from \"@/components/ui/toast\";\r\n-import { BrowserRouter } from 'react-router-dom';\r\n-\r\n-// Import Dashboard page directly to avoid dynamic import issues\r\n-import DashboardPage from './pages/Dashboard';\r\n-import MyClassesPage from './app/teacher/lessons/page';\r\n-\r\n-// Lazy load pages with proper error boundaries\r\n-const Login = React.lazy(() => import('./pages/Login'));\r\n-const Students = React.lazy(() => import('./pages/Students'));\r\n-const Development = React.lazy(() => import('./pages/Development'));\r\n-const Infrastructure = React.lazy(() => import('./pages/Infrastructure'));\r\n-const Reports = React.lazy(() => import('./pages/Reports'));\r\n-const Sales = React.lazy(() => import('./pages/Sales'));\r\n-const Content = React.lazy(() => import('./pages/Content'));\r\n-const LearningManagement = React.lazy(() => import('./app/learning/page'));\r\n-\r\n-// Import Staff page with retry logic\r\n-const Staff = React.lazy(() => {\r\n-  return import('./pages/Staff').catch(err => {\r\n-    logger.error('Failed to load Staff page', err);\r\n-    return Promise.resolve({\r\n-      default: () => (\r\n-        <ErrorBoundary source=\"Staff\">\r\n-          <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg\">\r\n-            <h3 className=\"text-lg font-medium text-red-800\">Failed to load Staff page</h3>\r\n-            <p className=\"mt-2 text-sm text-red-600\">Please try refreshing the page</p>\r\n-          </div>\r\n-        </ErrorBoundary>\r\n-      )\r\n-    });\r\n-  });\r\n-});\r\n-const Schedule = React.lazy(() => import('./pages/Schedule'));\r\n-const Settings = React.lazy(() => import('./pages/Settings'));\r\n-const Events = React.lazy(() => import('./pages/Events'));\r\n-const ErrorTest = React.lazy(() => import('./pages/ErrorTest'));\r\n-const Schools = React.lazy(() => import('./pages/Schools'));\r\n-const Finance = React.lazy(() => import('./pages/Finance'));\r\n-const Analytics = React.lazy(() => import('./pages/Analytics'));\r\n-const MyClasses = React.lazy(() => import('./app/teacher/lessons/page'));\r\n-\r\n-import TeacherLayout from './app/teacher/layout';\r\n-import ProtectedRoute from './components/ProtectedRoute';\r\n-import TeacherDashboard from './app/teacher/dashboard/page';\r\n-import Classes from './app/teacher/lessons/page';\r\n-import AIConversationPage from './app/teacher/ai-conversation/page';\r\n-//import CourseDetails from '/src/app/teacher/courses/page'; //';\r\n-\r\n-// Import the TeacherMyClassPage component\r\n-const TeacherMyClassPage = React.lazy(() => import('./app/teacher/my-class/page'));\r\n-\r\n-import { ResetPassword } from \"@/components/auth/ResetPassword\";\r\n-import { SessionDebugger } from './components/SessionDebugger';\r\n-\r\n-// Create a new QueryClient instance\r\n-const queryClient = new QueryClient({\r\n-  defaultOptions: {\r\n-    queries: {\r\n-      staleTime: 5 * 60 * 1000,\r\n-      gcTime: 10 * 60 * 1000,\r\n-    },\r\n-  },\r\n-});\r\n-\r\n-function App() {\r\n-  const { theme, resolvedTheme } = useTheme()\r\n-  const currentTheme = themes[theme as keyof typeof themes] || themes[resolvedTheme as keyof typeof themes] || themes.light\r\n-  const location = useLocation();\r\n-  const navigate = useNavigate();\r\n-\r\n-  // Log initialization\r\n-  console.log('[App] Rendering...');\r\n-  logger.info('App initializing', { source: 'App', context: { route: location.pathname } });\r\n-\r\n-  return (\r\n-    <ErrorBoundary source=\"App\">\r\n-      <QueryClientProvider client={queryClient}>\r\n-        <AuthProvider>\r\n-          <ErrorProvider>\r\n-            <NextThemesProvider\r\n-              attribute=\"class\"\r\n-              defaultTheme=\"light\"\r\n-              value={{\r\n-                light: \"light\",\r\n-                dark: \"dark\",\r\n-                gray: \"gray\",\r\n-                contrast: \"contrast\"\r\n-              }}\r\n-            >\r\n-              <ThemeContextProvider>\r\n-                <ToastProvider>\r\n-                <div className={`relative min-h-screen w-full ${currentTheme.background} ${currentTheme.text}`}>\r\n-                  <ThemeToggle />\r\n-                  <div className={`w-full h-full flex flex-col ${currentTheme.background} ${currentTheme.text}`}>\r\n-                    <Routes>\r\n-                      <Route \r\n-                        path=\"/login\" \r\n-                        element={\r\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading login...\" />}>\r\n-                            <div className={currentTheme.background}>\r\n-                              <Login />\r\n-                            </div>\r\n-                          </React.Suspense>\r\n-                        }\r\n-                      />\r\n-                      <Route element={\r\n-                        <div className={currentTheme.background}>\r\n-                          <PrivateRoute>\r\n-                            <Layout />\r\n-                          </PrivateRoute>\r\n-                        </div>\r\n-                      }>\r\n-                        <Route path=\"/dashboard\" element={<DashboardPage />} />\r\n-                        <Route \r\n-                          path=\"app/learning/*\" \r\n-                          element={\r\n-                            <React.Suspense fallback={<LoadingSpinner message=\"Loading learning management...\" />}>\r\n-                              <LearningManagement />\r\n-                            </React.Suspense>\r\n-                          } \r\n-                        />\r\n-                        <Route path=\"analytics\" element={\r\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading analytics...\" />}>\r\n-                            <Analytics />\r\n-                          </React.Suspense>\r\n-                        } />\r\n-                        <Route path=\"schools\" element={\r\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading schools...\" />}>\r\n-                            <Schools />\r\n-                          </React.Suspense>\r\n-                        } />\r\n-                        <Route path=\"students\" element={\r\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading students...\" />}>\r\n-                            <Students />\r\n-                          </React.Suspense>\r\n-                        } />\r\n-                        <Route path=\"sales\" element={\r\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading sales...\" />}>\r\n-                            <Sales />\r\n-                          </React.Suspense>\r\n-                        } />\r\n-                        <Route path=\"content/*\" element={\r\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading content...\" />}>\r\n-                            <Content />\r\n-                          </React.Suspense>\r\n-                        } />\r\n-                        <Route path=\"development\" element={\r\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading development...\" />}>\r\n-                            <Development />\r\n-                          </React.Suspense>\r\n-                        } />\r\n-                        <Route path=\"infrastructure\" element={\r\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading infrastructure...\" />}>\r\n-                            <Infrastructure />\r\n-                          </React.Suspense>\r\n-                        } />\r\n-                        <Route path=\"finance/*\" element={\r\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading finance...\" />}>\r\n-                            <Finance />\r\n-                          </React.Suspense>\r\n-                        } />\r\n-                        <Route path=\"staff\" element={\r\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading staff...\" />}>\r\n-                            <Staff />\r\n-                          </React.Suspense>\r\n-                        } />\r\n-                        <Route path=\"schedule\" element={\r\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading schedule...\" />}>\r\n-                            <Schedule />\r\n-                          </React.Suspense>\r\n-                        } />\r\n-                        <Route path=\"reports\" element={\r\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading reports...\" />}>\r\n-                            <Reports />\r\n-                          </React.Suspense>\r\n-                        } />\r\n-                        <Route path=\"events\" element={\r\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading events...\" />}>\r\n-                            <Events />\r\n-                          </React.Suspense>\r\n-                        } />\r\n-                        <Route path=\"settings\" element={\r\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading settings...\" />}>\r\n-                            <Settings />\r\n-                          </React.Suspense>\r\n-                        } />\r\n-                        <Route path=\"error-test\" element={\r\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading error test...\" />}>\r\n-                            <ErrorTest />\r\n-                          </React.Suspense>\r\n-                        } />\r\n-                        <Route \r\n-                          path=\"content-management\" \r\n-                          element={\r\n-                            <React.Suspense fallback={<LoadingSpinner message=\"Loading content management...\" />}>\r\n-                              <ContentManagementPage />\r\n-                            </React.Suspense>\r\n-                          } \r\n-                        />\r\n-                        <Route\r\n-                          path=\"my-classes\" \r\n-                          element={\r\n-                            <React.Suspense fallback={<LoadingSpinner message=\"Loading My Classes...\" />}>\r\n-                              <MyClasses/>\r\n-                            </React.Suspense>\r\n-                          } \r\n-                        />\r\n-                        <Route \r\n-                          path=\"/teacher/*\" \r\n-                          element={\r\n-                            <PrivateRoute>\r\n-                              <TeacherLayout>\r\n-                                <Routes>\r\n-                                  <Route path=\"dashboard\" element={<TeacherDashboard />} />\r\n-                                  <Route path=\"classes\" element={<Classes />} />\r\n-                                  <Route path=\"lessons/*\" element={<Classes />} />\r\n-                                  <Route path=\"my-class\" element={\r\n-                                    <React.Suspense fallback={<LoadingSpinner message=\"Loading My Class...\" />}>\r\n-                                      <TeacherMyClassPage />\r\n-                                    </React.Suspense>\r\n-                                  } />\r\n-                                  <Route path=\"AI-Conversation\" element={<AIConversationPage />} />\r\n-                                </Routes>\r\n-                              </TeacherLayout>\r\n-                            </PrivateRoute>\r\n-                          } \r\n-                        />\r\n-                        <Route \r\n-                          path=\"/reset-password/*\" \r\n-                          element={<ResetPassword />} \r\n-                        />\r\n-                        <Route \r\n-                          path=\"/\" \r\n-                          element={\r\n-                            <Navigate to=\"/dashboard\" replace />\r\n-                          } \r\n-                        />\r\n-                        <Route \r\n-                          path=\"*\" \r\n-                          element={\r\n-                            <Navigate to=\"/dashboard\" replace />\r\n-                          } \r\n-                        />\r\n-                      </Route>\r\n-                    </Routes>\r\n-                    <ErrorToast />\r\n-                    {process.env.NODE_ENV === 'development' && (\r\n-                      <React.Suspense fallback={null}>\r\n-                        <ReactQueryDevtools initialIsOpen={false} />\r\n-                      </React.Suspense>\r\n-                    )}\r\n-                  </div>\r\n-                </div>\r\n-                <Toaster />\r\n-                {import.meta.env.DEV && <SessionDebugger />}\r\n-              </ToastProvider>\r\n-            </ThemeContextProvider>\r\n-            </NextThemesProvider>\r\n-          </ErrorProvider>\r\n-        </AuthProvider>\r\n-      </QueryClientProvider>\r\n-    </ErrorBoundary>\r\n-  );\r\n-}\r\n-\r\n-export default App;\r\n+\"use client\";\n+\n+import React, { useEffect } from 'react';\n+import { Routes, Route, Navigate, useLocation, useNavigate } from 'react-router-dom';\n+import { QueryClientProvider } from '@tanstack/react-query';\n+import { QueryClient  } from '@tanstack/query-core';\n+import { AuthProvider } from './contexts/AuthContext';\n+import { logger } from './lib/logger';\n+import { ErrorProvider } from './contexts/ErrorContext';\n+import { ThemeProvider as NextThemesProvider } from \"next-themes\";\n+import Layout from './components/Layout';\n+import PrivateRoute from './components/PrivateRoute';\n+import ErrorToast from './components/ErrorToast';\n+//import { queryClient } from '@/providers/query-provider';\n+import ErrorBoundary from './components/ErrorBoundary';\n+import LoadingSpinner from './components/LoadingSpinner';\n+import ThemeSelector from './components/ThemeSelector';\n+import ContentManagementPage from './app/content-management/page' ;\n+import { ReactQueryDevtools } from '@tanstack/react-query-devtools';\n+import { ThemeToggle } from \"@/components/theme-toggle\"\n+import { useTheme } from \"next-themes\"\n+import { themes } from \"@/lib/themes\"\n+import { ThemeContextProvider } from './contexts/ThemeContext';\n+import { Toaster } from \"@/components/ui/toaster\";\n+import { ToastProvider } from \"@/components/ui/toast\";\n+import { BrowserRouter } from 'react-router-dom';\n+\n+// Import Dashboard page directly to avoid dynamic import issues\n+import DashboardPage from './pages/Dashboard';\n+import MyClassesPage from './app/teacher/lessons/page';\n+\n+// Lazy load pages with proper error boundaries\n+const Login = React.lazy(() => import('./pages/Login'));\n+const Students = React.lazy(() => import('./pages/Students'));\n+const Development = React.lazy(() => import('./pages/Development'));\n+const Infrastructure = React.lazy(() => import('./pages/Infrastructure'));\n+const Reports = React.lazy(() => import('./pages/Reports'));\n+const Sales = React.lazy(() => import('./pages/Sales'));\n+const Content = React.lazy(() => import('./pages/Content'));\n+const LearningManagement = React.lazy(() => import('./app/learning/page'));\n+\n+// Import Staff page with retry logic\n+const Staff = React.lazy(() => {\n+  return import('./pages/Staff').catch(err => {\n+    logger.error('Failed to load Staff page', err);\n+    return Promise.resolve({\n+      default: () => (\n+        <ErrorBoundary source=\"Staff\">\n+          <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg\">\n+            <h3 className=\"text-lg font-medium text-red-800\">Failed to load Staff page</h3>\n+            <p className=\"mt-2 text-sm text-red-600\">Please try refreshing the page</p>\n+          </div>\n+        </ErrorBoundary>\n+      )\n+    });\n+  });\n+});\n+const Schedule = React.lazy(() => import('./pages/Schedule'));\n+const Settings = React.lazy(() => import('./pages/Settings'));\n+const Events = React.lazy(() => import('./pages/Events'));\n+const ErrorTest = React.lazy(() => import('./pages/ErrorTest'));\n+const Schools = React.lazy(() => import('./pages/Schools'));\n+const Finance = React.lazy(() => import('./pages/Finance'));\n+const Analytics = React.lazy(() => import('./pages/Analytics'));\n+const MyClasses = React.lazy(() => import('./app/teacher/lessons/page'));\n+\n+import TeacherLayout from './app/teacher/layout';\n+import ProtectedRoute from './components/ProtectedRoute';\n+import TeacherDashboard from './app/teacher/dashboard/page';\n+import Classes from './app/teacher/lessons/page';\n+import AIConversationPage from './app/teacher/ai-conversation/page';\n+//import CourseDetails from '/src/app/teacher/courses/page'; //';\n+\n+// Import the TeacherMyClassPage component\n+const TeacherMyClassPage = React.lazy(() => import('./app/teacher/my-class/page'));\n+\n+import { ResetPassword } from \"@/components/auth/ResetPassword\";\n+import { SessionDebugger } from './components/SessionDebugger';\n+\n+// Create a new QueryClient instance\n+const queryClient = new QueryClient({\n+  defaultOptions: {\n+    queries: {\n+      staleTime: 5 * 60 * 1000,\n+      gcTime: 10 * 60 * 1000,\n+    },\n+  },\n+});\n+\n+function App() {\n+  const { theme, resolvedTheme } = useTheme()\n+  const currentTheme = themes[theme as keyof typeof themes] || themes[resolvedTheme as keyof typeof themes] || themes.light\n+  const location = useLocation();\n+  const navigate = useNavigate();\n+\n+  // Persist route on navigation\n+  useEffect(() => {\n+    const currentPath = location.pathname + location.search;\n+    // Only store route if it's not login and not the root path\n+    if (currentPath !== '/login' && currentPath !== '/') {\n+      localStorage.setItem('lastRoute', currentPath);\n+      logger.debug('Route persisted', { \n+        source: 'App',\n+        context: { route: currentPath }\n+      });\n+    }\n+  }, [location]);\n+\n+  // Handle route restoration\n+  useEffect(() => {\n+    const lastRoute = localStorage.getItem('lastRoute');\n+    const isInitialLoad = !location.key;\n+    const isRootPath = location.pathname === '/';\n+    \n+    if (isInitialLoad && lastRoute && lastRoute !== '/login') {\n+      // If we're at root path or dashboard, restore the last route\n+      if (isRootPath || location.pathname === '/dashboard') {\n+        logger.debug('Restoring route', {\n+          source: 'App',\n+          context: { \n+            from: location.pathname,\n+            to: lastRoute\n+          }\n+        });\n+        navigate(lastRoute, { replace: true });\n+      }\n+    }\n+  }, [navigate, location]);\n+\n+  console.log('[App] Rendering...');\n+  logger.info('App initializing', { source: 'App', context: { route: location.pathname } });\n+\n+  return (\n+    <ErrorBoundary source=\"App\">\n+      <QueryClientProvider client={queryClient}>\n+        <AuthProvider>\n+          <ErrorProvider>\n+            <NextThemesProvider\n+              attribute=\"class\"\n+              defaultTheme=\"light\"\n+              value={{\n+                light: \"light\",\n+                dark: \"dark\",\n+                gray: \"gray\",\n+                contrast: \"contrast\"\n+              }}\n+            >\n+              <ThemeContextProvider>\n+                <ToastProvider>\n+                <div className={`relative min-h-screen w-full ${currentTheme.background} ${currentTheme.text}`}>\n+                  <ThemeToggle />\n+                  <div className={`w-full ${currentTheme.background} ${currentTheme.text}`}>\n+                    <Routes>\n+                      <Route \n+                        path=\"/login\" \n+                        element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading login...\" />}>\n+                            <div className={currentTheme.background}>\n+                              <Login />\n+                            </div>\n+                          </React.Suspense>\n+                        }\n+                      />\n+                      <Route element={\n+                        <div className={currentTheme.background}>\n+                          <PrivateRoute>\n+                            <Layout />\n+                          </PrivateRoute>\n+                        </div>\n+                      }>\n+                        {/* Handle root path with conditional redirect */}\n+                        <Route \n+                          path=\"/\" \n+                          element={\n+                            <RootRouteHandler />\n+                          } \n+                        />\n+                        <Route path=\"/dashboard\" element={<DashboardPage />} />\n+                        <Route \n+                          path=\"app/learning/*\" \n+                          element={\n+                            <React.Suspense fallback={<LoadingSpinner message=\"Loading learning management...\" />}>\n+                              <LearningManagement />\n+                            </React.Suspense>\n+                          } \n+                        />\n+                        <Route path=\"analytics\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading analytics...\" />}>\n+                            <Analytics />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"schools\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading schools...\" />}>\n+                            <Schools />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"students\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading students...\" />}>\n+                            <Students />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"sales\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading sales...\" />}>\n+                            <Sales />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"content/*\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading content...\" />}>\n+                            <Content />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"development\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading development...\" />}>\n+                            <Development />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"infrastructure\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading infrastructure...\" />}>\n+                            <Infrastructure />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"finance/*\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading finance...\" />}>\n+                            <Finance />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"staff\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading staff...\" />}>\n+                            <Staff />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"schedule\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading schedule...\" />}>\n+                            <Schedule />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"reports\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading reports...\" />}>\n+                            <Reports />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"events\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading events...\" />}>\n+                            <Events />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"settings\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading settings...\" />}>\n+                            <Settings />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"error-test\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading error test...\" />}>\n+                            <ErrorTest />\n+                          </React.Suspense>\n+                        } />\n+                        <Route \n+                          path=\"content-management\" \n+                          element={\n+                            <React.Suspense fallback={<LoadingSpinner message=\"Loading content management...\" />}>\n+                              <ContentManagementPage />\n+                            </React.Suspense>\n+                          } \n+                        />\n+                        <Route\n+                          path=\"my-classes\" \n+                          element={\n+                            <React.Suspense fallback={<LoadingSpinner message=\"Loading My Classes...\" />}>\n+                              <MyClasses/>\n+                            </React.Suspense>\n+                          } \n+                        />\n+                      </Route>\n+                      <Route \n+                        path=\"/teacher/*\" \n+                        element={\n+                          <TeacherLayout>\n+                            <Routes>\n+                              <Route path=\"/\" element={<Navigate to=\"dashboard\" replace />} />\n+                              <Route path=\"dashboard\" element={<TeacherDashboard />} />\n+                              <Route path=\"classes\" element={<Classes />} />\n+                              <Route path=\"lessons\" element={<Classes />} />\n+                              <Route path=\"my-class\" element={\n+                                <React.Suspense fallback={<LoadingSpinner message=\"Loading My Class...\" />}>\n+                                  <TeacherMyClassPage />\n+                                </React.Suspense>\n+                              } />\n+                              <Route path=\"AI-Conversation\" element={<AIConversationPage />} />\n+                            </Routes>\n+                          </TeacherLayout>\n+                        } \n+                      />\n+                      <Route \n+                        path=\"/reset-password/*\" \n+                        element={<ResetPassword />} \n+                      />\n+                      <Route path=\"*\" element={<Navigate to=\"/dashboard\" replace />} />\n+                    </Routes>\n+                    <ErrorToast />\n+                    {process.env.NODE_ENV === 'development' && (\n+                      <React.Suspense fallback={null}>\n+                        <ReactQueryDevtools initialIsOpen={false} />\n+                      </React.Suspense>\n+                    )}\n+                  </div>\n+                </div>\n+                <Toaster />\n+                {import.meta.env.DEV && <SessionDebugger />}\n+              </ToastProvider>\n+            </ThemeContextProvider>\n+            </NextThemesProvider>\n+          </ErrorProvider>\n+        </AuthProvider>\n+      </QueryClientProvider>\n+    </ErrorBoundary>\n+  );\n+}\n+\n+// Add this component to handle root path routing\n+function RootRouteHandler() {\n+  const navigate = useNavigate();\n+  const location = useLocation();\n+\n+  useEffect(() => {\n+    const lastRoute = localStorage.getItem('lastRoute');\n+    \n+    if (lastRoute && lastRoute !== '/login' && lastRoute !== '/') {\n+      logger.debug('Root path: restoring last route', {\n+        source: 'RootRouteHandler',\n+        context: { lastRoute }\n+      });\n+      navigate(lastRoute, { replace: true });\n+    } else {\n+      logger.debug('Root path: redirecting to dashboard', {\n+        source: 'RootRouteHandler'\n+      });\n+      navigate('/dashboard', { replace: true });\n+    }\n+  }, [navigate]);\n+\n+  return <LoadingSpinner message=\"Restoring your last location...\" />;\n+}\n+\n+export default App;\n"
                },
                {
                    "date": 1739304111685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,42 +92,9 @@\n   const currentTheme = themes[theme as keyof typeof themes] || themes[resolvedTheme as keyof typeof themes] || themes.light\n   const location = useLocation();\n   const navigate = useNavigate();\n \n-  // Persist route on navigation\n-  useEffect(() => {\n-    const currentPath = location.pathname + location.search;\n-    // Only store route if it's not login and not the root path\n-    if (currentPath !== '/login' && currentPath !== '/') {\n-      localStorage.setItem('lastRoute', currentPath);\n-      logger.debug('Route persisted', { \n-        source: 'App',\n-        context: { route: currentPath }\n-      });\n-    }\n-  }, [location]);\n-\n-  // Handle route restoration\n-  useEffect(() => {\n-    const lastRoute = localStorage.getItem('lastRoute');\n-    const isInitialLoad = !location.key;\n-    const isRootPath = location.pathname === '/';\n-    \n-    if (isInitialLoad && lastRoute && lastRoute !== '/login') {\n-      // If we're at root path or dashboard, restore the last route\n-      if (isRootPath || location.pathname === '/dashboard') {\n-        logger.debug('Restoring route', {\n-          source: 'App',\n-          context: { \n-            from: location.pathname,\n-            to: lastRoute\n-          }\n-        });\n-        navigate(lastRoute, { replace: true });\n-      }\n-    }\n-  }, [navigate, location]);\n-\n+  // Log initialization\n   console.log('[App] Rendering...');\n   logger.info('App initializing', { source: 'App', context: { route: location.pathname } });\n \n   return (\n@@ -148,9 +115,9 @@\n               <ThemeContextProvider>\n                 <ToastProvider>\n                 <div className={`relative min-h-screen w-full ${currentTheme.background} ${currentTheme.text}`}>\n                   <ThemeToggle />\n-                  <div className={`w-full ${currentTheme.background} ${currentTheme.text}`}>\n+                  <div className={`w-full h-full flex flex-col ${currentTheme.background} ${currentTheme.text}`}>\n                     <Routes>\n                       <Route \n                         path=\"/login\" \n                         element={\n@@ -167,15 +134,8 @@\n                             <Layout />\n                           </PrivateRoute>\n                         </div>\n                       }>\n-                        {/* Handle root path with conditional redirect */}\n-                        <Route \n-                          path=\"/\" \n-                          element={\n-                            <RootRouteHandler />\n-                          } \n-                        />\n                         <Route path=\"/dashboard\" element={<DashboardPage />} />\n                         <Route \n                           path=\"app/learning/*\" \n                           element={\n@@ -269,33 +229,43 @@\n                               <MyClasses/>\n                             </React.Suspense>\n                           } \n                         />\n+                        <Route \n+                          path=\"/teacher/*\" \n+                          element={\n+                            <TeacherLayout>\n+                              <Routes>\n+                                <Route path=\"dashboard\" element={<TeacherDashboard />} />\n+                                <Route path=\"classes\" element={<Classes />} />\n+                                <Route path=\"lessons\" element={<Classes />} />\n+                                <Route path=\"my-class\" element={\n+                                  <React.Suspense fallback={<LoadingSpinner message=\"Loading My Class...\" />}>\n+                                    <TeacherMyClassPage />\n+                                  </React.Suspense>\n+                                } />\n+                                <Route path=\"AI-Conversation\" element={<AIConversationPage />} />\n+                              </Routes>\n+                            </TeacherLayout>\n+                          } \n+                        />\n+                        <Route \n+                          path=\"/reset-password/*\" \n+                          element={<ResetPassword />} \n+                        />\n+                        <Route \n+                          path=\"/\" \n+                          element={\n+                            <Navigate to=\"/dashboard\" replace />\n+                          } \n+                        />\n+                        <Route \n+                          path=\"*\" \n+                          element={\n+                            <Navigate to=\"/dashboard\" replace />\n+                          } \n+                        />\n                       </Route>\n-                      <Route \n-                        path=\"/teacher/*\" \n-                        element={\n-                          <TeacherLayout>\n-                            <Routes>\n-                              <Route path=\"/\" element={<Navigate to=\"dashboard\" replace />} />\n-                              <Route path=\"dashboard\" element={<TeacherDashboard />} />\n-                              <Route path=\"classes\" element={<Classes />} />\n-                              <Route path=\"lessons\" element={<Classes />} />\n-                              <Route path=\"my-class\" element={\n-                                <React.Suspense fallback={<LoadingSpinner message=\"Loading My Class...\" />}>\n-                                  <TeacherMyClassPage />\n-                                </React.Suspense>\n-                              } />\n-                              <Route path=\"AI-Conversation\" element={<AIConversationPage />} />\n-                            </Routes>\n-                          </TeacherLayout>\n-                        } \n-                      />\n-                      <Route \n-                        path=\"/reset-password/*\" \n-                        element={<ResetPassword />} \n-                      />\n-                      <Route path=\"*\" element={<Navigate to=\"/dashboard\" replace />} />\n                     </Routes>\n                     <ErrorToast />\n                     {process.env.NODE_ENV === 'development' && (\n                       <React.Suspense fallback={null}>\n@@ -315,30 +285,5 @@\n     </ErrorBoundary>\n   );\n }\n \n-// Add this component to handle root path routing\n-function RootRouteHandler() {\n-  const navigate = useNavigate();\n-  const location = useLocation();\n-\n-  useEffect(() => {\n-    const lastRoute = localStorage.getItem('lastRoute');\n-    \n-    if (lastRoute && lastRoute !== '/login' && lastRoute !== '/') {\n-      logger.debug('Root path: restoring last route', {\n-        source: 'RootRouteHandler',\n-        context: { lastRoute }\n-      });\n-      navigate(lastRoute, { replace: true });\n-    } else {\n-      logger.debug('Root path: redirecting to dashboard', {\n-        source: 'RootRouteHandler'\n-      });\n-      navigate('/dashboard', { replace: true });\n-    }\n-  }, [navigate]);\n-\n-  return <LoadingSpinner message=\"Restoring your last location...\" />;\n-}\n-\n export default App;\n"
                },
                {
                    "date": 1739310141318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,191 +98,193 @@\n   logger.info('App initializing', { source: 'App', context: { route: location.pathname } });\n \n   return (\n     <ErrorBoundary source=\"App\">\n-      <QueryClientProvider client={queryClient}>\n-        <AuthProvider>\n-          <ErrorProvider>\n-            <NextThemesProvider\n-              attribute=\"class\"\n-              defaultTheme=\"light\"\n-              value={{\n-                light: \"light\",\n-                dark: \"dark\",\n-                gray: \"gray\",\n-                contrast: \"contrast\"\n-              }}\n-            >\n-              <ThemeContextProvider>\n-                <ToastProvider>\n-                <div className={`relative min-h-screen w-full ${currentTheme.background} ${currentTheme.text}`}>\n-                  <ThemeToggle />\n-                  <div className={`w-full h-full flex flex-col ${currentTheme.background} ${currentTheme.text}`}>\n-                    <Routes>\n-                      <Route \n-                        path=\"/login\" \n-                        element={\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading login...\" />}>\n+      <BrowserRouter future={{ v7_startTransition: true }}>\n+        <QueryClientProvider client={queryClient}>\n+          <AuthProvider>\n+            <ErrorProvider>\n+              <NextThemesProvider\n+                attribute=\"class\"\n+                defaultTheme=\"light\"\n+                value={{\n+                  light: \"light\",\n+                  dark: \"dark\",\n+                  gray: \"gray\",\n+                  contrast: \"contrast\"\n+                }}\n+              >\n+                <ThemeContextProvider>\n+                  <ToastProvider>\n+                    <div className={`relative min-h-screen w-full ${currentTheme.background} ${currentTheme.text}`}>\n+                      <ThemeToggle />\n+                      <div className={`w-full h-full flex flex-col ${currentTheme.background} ${currentTheme.text}`}>\n+                        <Routes>\n+                          <Route \n+                            path=\"/login\" \n+                            element={\n+                              <React.Suspense fallback={<LoadingSpinner message=\"Loading login...\" />}>\n+                                <div className={currentTheme.background}>\n+                                  <Login />\n+                                </div>\n+                              </React.Suspense>\n+                            }\n+                          />\n+                          <Route element={\n                             <div className={currentTheme.background}>\n-                              <Login />\n+                              <PrivateRoute>\n+                                <Layout />\n+                              </PrivateRoute>\n                             </div>\n+                          }>\n+                            <Route path=\"/dashboard\" element={<DashboardPage />} />\n+                            <Route \n+                              path=\"app/learning/*\" \n+                              element={\n+                                <React.Suspense fallback={<LoadingSpinner message=\"Loading learning management...\" />}>\n+                                  <LearningManagement />\n+                                </React.Suspense>\n+                              } \n+                            />\n+                            <Route path=\"analytics\" element={\n+                              <React.Suspense fallback={<LoadingSpinner message=\"Loading analytics...\" />}>\n+                                <Analytics />\n+                              </React.Suspense>\n+                            } />\n+                            <Route path=\"schools\" element={\n+                              <React.Suspense fallback={<LoadingSpinner message=\"Loading schools...\" />}>\n+                                <Schools />\n+                              </React.Suspense>\n+                            } />\n+                            <Route path=\"students\" element={\n+                              <React.Suspense fallback={<LoadingSpinner message=\"Loading students...\" />}>\n+                                <Students />\n+                              </React.Suspense>\n+                            } />\n+                            <Route path=\"sales\" element={\n+                              <React.Suspense fallback={<LoadingSpinner message=\"Loading sales...\" />}>\n+                                <Sales />\n+                              </React.Suspense>\n+                            } />\n+                            <Route path=\"content/*\" element={\n+                              <React.Suspense fallback={<LoadingSpinner message=\"Loading content...\" />}>\n+                                <Content />\n+                              </React.Suspense>\n+                            } />\n+                            <Route path=\"development\" element={\n+                              <React.Suspense fallback={<LoadingSpinner message=\"Loading development...\" />}>\n+                                <Development />\n+                              </React.Suspense>\n+                            } />\n+                            <Route path=\"infrastructure\" element={\n+                              <React.Suspense fallback={<LoadingSpinner message=\"Loading infrastructure...\" />}>\n+                                <Infrastructure />\n+                              </React.Suspense>\n+                            } />\n+                            <Route path=\"finance/*\" element={\n+                              <React.Suspense fallback={<LoadingSpinner message=\"Loading finance...\" />}>\n+                                <Finance />\n+                              </React.Suspense>\n+                            } />\n+                            <Route path=\"staff\" element={\n+                              <React.Suspense fallback={<LoadingSpinner message=\"Loading staff...\" />}>\n+                                <Staff />\n+                              </React.Suspense>\n+                            } />\n+                            <Route path=\"schedule\" element={\n+                              <React.Suspense fallback={<LoadingSpinner message=\"Loading schedule...\" />}>\n+                                <Schedule />\n+                              </React.Suspense>\n+                            } />\n+                            <Route path=\"reports\" element={\n+                              <React.Suspense fallback={<LoadingSpinner message=\"Loading reports...\" />}>\n+                                <Reports />\n+                              </React.Suspense>\n+                            } />\n+                            <Route path=\"events\" element={\n+                              <React.Suspense fallback={<LoadingSpinner message=\"Loading events...\" />}>\n+                                <Events />\n+                              </React.Suspense>\n+                            } />\n+                            <Route path=\"settings\" element={\n+                              <React.Suspense fallback={<LoadingSpinner message=\"Loading settings...\" />}>\n+                                <Settings />\n+                              </React.Suspense>\n+                            } />\n+                            <Route path=\"error-test\" element={\n+                              <React.Suspense fallback={<LoadingSpinner message=\"Loading error test...\" />}>\n+                                <ErrorTest />\n+                              </React.Suspense>\n+                            } />\n+                            <Route \n+                              path=\"content-management\" \n+                              element={\n+                                <React.Suspense fallback={<LoadingSpinner message=\"Loading content management...\" />}>\n+                                  <ContentManagementPage />\n+                                </React.Suspense>\n+                              } \n+                            />\n+                            <Route\n+                              path=\"my-classes\" \n+                              element={\n+                                <React.Suspense fallback={<LoadingSpinner message=\"Loading My Classes...\" />}>\n+                                  <MyClasses/>\n+                                </React.Suspense>\n+                              } \n+                            />\n+                            <Route \n+                              path=\"/teacher/*\" \n+                              element={\n+                                <TeacherLayout>\n+                                  <Routes>\n+                                    <Route path=\"dashboard\" element={<TeacherDashboard />} />\n+                                    <Route path=\"classes\" element={<Classes />} />\n+                                    <Route path=\"lessons\" element={<Classes />} />\n+                                    <Route path=\"my-class\" element={\n+                                      <React.Suspense fallback={<LoadingSpinner message=\"Loading My Class...\" />}>\n+                                        <TeacherMyClassPage />\n+                                      </React.Suspense>\n+                                    } />\n+                                    <Route path=\"AI-Conversation\" element={<AIConversationPage />} />\n+                                  </Routes>\n+                                </TeacherLayout>\n+                              } \n+                            />\n+                            <Route \n+                              path=\"/reset-password/*\" \n+                              element={<ResetPassword />} \n+                            />\n+                            <Route \n+                              path=\"/\" \n+                              element={\n+                                <Navigate to=\"/dashboard\" replace />\n+                              } \n+                            />\n+                            <Route \n+                              path=\"*\" \n+                              element={\n+                                <Navigate to=\"/dashboard\" replace />\n+                              } \n+                            />\n+                          </Route>\n+                        </Routes>\n+                        <ErrorToast />\n+                        {process.env.NODE_ENV === 'development' && (\n+                          <React.Suspense fallback={null}>\n+                            <ReactQueryDevtools initialIsOpen={false} />\n                           </React.Suspense>\n-                        }\n-                      />\n-                      <Route element={\n-                        <div className={currentTheme.background}>\n-                          <PrivateRoute>\n-                            <Layout />\n-                          </PrivateRoute>\n-                        </div>\n-                      }>\n-                        <Route path=\"/dashboard\" element={<DashboardPage />} />\n-                        <Route \n-                          path=\"app/learning/*\" \n-                          element={\n-                            <React.Suspense fallback={<LoadingSpinner message=\"Loading learning management...\" />}>\n-                              <LearningManagement />\n-                            </React.Suspense>\n-                          } \n-                        />\n-                        <Route path=\"analytics\" element={\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading analytics...\" />}>\n-                            <Analytics />\n-                          </React.Suspense>\n-                        } />\n-                        <Route path=\"schools\" element={\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading schools...\" />}>\n-                            <Schools />\n-                          </React.Suspense>\n-                        } />\n-                        <Route path=\"students\" element={\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading students...\" />}>\n-                            <Students />\n-                          </React.Suspense>\n-                        } />\n-                        <Route path=\"sales\" element={\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading sales...\" />}>\n-                            <Sales />\n-                          </React.Suspense>\n-                        } />\n-                        <Route path=\"content/*\" element={\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading content...\" />}>\n-                            <Content />\n-                          </React.Suspense>\n-                        } />\n-                        <Route path=\"development\" element={\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading development...\" />}>\n-                            <Development />\n-                          </React.Suspense>\n-                        } />\n-                        <Route path=\"infrastructure\" element={\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading infrastructure...\" />}>\n-                            <Infrastructure />\n-                          </React.Suspense>\n-                        } />\n-                        <Route path=\"finance/*\" element={\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading finance...\" />}>\n-                            <Finance />\n-                          </React.Suspense>\n-                        } />\n-                        <Route path=\"staff\" element={\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading staff...\" />}>\n-                            <Staff />\n-                          </React.Suspense>\n-                        } />\n-                        <Route path=\"schedule\" element={\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading schedule...\" />}>\n-                            <Schedule />\n-                          </React.Suspense>\n-                        } />\n-                        <Route path=\"reports\" element={\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading reports...\" />}>\n-                            <Reports />\n-                          </React.Suspense>\n-                        } />\n-                        <Route path=\"events\" element={\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading events...\" />}>\n-                            <Events />\n-                          </React.Suspense>\n-                        } />\n-                        <Route path=\"settings\" element={\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading settings...\" />}>\n-                            <Settings />\n-                          </React.Suspense>\n-                        } />\n-                        <Route path=\"error-test\" element={\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading error test...\" />}>\n-                            <ErrorTest />\n-                          </React.Suspense>\n-                        } />\n-                        <Route \n-                          path=\"content-management\" \n-                          element={\n-                            <React.Suspense fallback={<LoadingSpinner message=\"Loading content management...\" />}>\n-                              <ContentManagementPage />\n-                            </React.Suspense>\n-                          } \n-                        />\n-                        <Route\n-                          path=\"my-classes\" \n-                          element={\n-                            <React.Suspense fallback={<LoadingSpinner message=\"Loading My Classes...\" />}>\n-                              <MyClasses/>\n-                            </React.Suspense>\n-                          } \n-                        />\n-                        <Route \n-                          path=\"/teacher/*\" \n-                          element={\n-                            <TeacherLayout>\n-                              <Routes>\n-                                <Route path=\"dashboard\" element={<TeacherDashboard />} />\n-                                <Route path=\"classes\" element={<Classes />} />\n-                                <Route path=\"lessons\" element={<Classes />} />\n-                                <Route path=\"my-class\" element={\n-                                  <React.Suspense fallback={<LoadingSpinner message=\"Loading My Class...\" />}>\n-                                    <TeacherMyClassPage />\n-                                  </React.Suspense>\n-                                } />\n-                                <Route path=\"AI-Conversation\" element={<AIConversationPage />} />\n-                              </Routes>\n-                            </TeacherLayout>\n-                          } \n-                        />\n-                        <Route \n-                          path=\"/reset-password/*\" \n-                          element={<ResetPassword />} \n-                        />\n-                        <Route \n-                          path=\"/\" \n-                          element={\n-                            <Navigate to=\"/dashboard\" replace />\n-                          } \n-                        />\n-                        <Route \n-                          path=\"*\" \n-                          element={\n-                            <Navigate to=\"/dashboard\" replace />\n-                          } \n-                        />\n-                      </Route>\n-                    </Routes>\n-                    <ErrorToast />\n-                    {process.env.NODE_ENV === 'development' && (\n-                      <React.Suspense fallback={null}>\n-                        <ReactQueryDevtools initialIsOpen={false} />\n-                      </React.Suspense>\n-                    )}\n-                  </div>\n-                </div>\n-                <Toaster />\n-                {import.meta.env.DEV && <SessionDebugger />}\n-              </ToastProvider>\n-            </ThemeContextProvider>\n-            </NextThemesProvider>\n-          </ErrorProvider>\n-        </AuthProvider>\n-      </QueryClientProvider>\n+                        )}\n+                      </div>\n+                    </div>\n+                    <Toaster />\n+                    {import.meta.env.DEV && <SessionDebugger />}\n+                  </ToastProvider>\n+                </ThemeContextProvider>\n+              </NextThemesProvider>\n+            </ErrorProvider>\n+          </AuthProvider>\n+        </QueryClientProvider>\n+      </BrowserRouter>\n     </ErrorBoundary>\n   );\n }\n \n"
                },
                {
                    "date": 1739310190247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,193 +98,191 @@\n   logger.info('App initializing', { source: 'App', context: { route: location.pathname } });\n \n   return (\n     <ErrorBoundary source=\"App\">\n-      <BrowserRouter future={{ v7_startTransition: true }}>\n-        <QueryClientProvider client={queryClient}>\n-          <AuthProvider>\n-            <ErrorProvider>\n-              <NextThemesProvider\n-                attribute=\"class\"\n-                defaultTheme=\"light\"\n-                value={{\n-                  light: \"light\",\n-                  dark: \"dark\",\n-                  gray: \"gray\",\n-                  contrast: \"contrast\"\n-                }}\n-              >\n-                <ThemeContextProvider>\n-                  <ToastProvider>\n-                    <div className={`relative min-h-screen w-full ${currentTheme.background} ${currentTheme.text}`}>\n-                      <ThemeToggle />\n-                      <div className={`w-full h-full flex flex-col ${currentTheme.background} ${currentTheme.text}`}>\n-                        <Routes>\n-                          <Route \n-                            path=\"/login\" \n-                            element={\n-                              <React.Suspense fallback={<LoadingSpinner message=\"Loading login...\" />}>\n-                                <div className={currentTheme.background}>\n-                                  <Login />\n-                                </div>\n-                              </React.Suspense>\n-                            }\n-                          />\n-                          <Route element={\n+      <QueryClientProvider client={queryClient}>\n+        <AuthProvider>\n+          <ErrorProvider>\n+            <NextThemesProvider\n+              attribute=\"class\"\n+              defaultTheme=\"light\"\n+              value={{\n+                light: \"light\",\n+                dark: \"dark\",\n+                gray: \"gray\",\n+                contrast: \"contrast\"\n+              }}\n+            >\n+              <ThemeContextProvider>\n+                <ToastProvider>\n+                <div className={`relative min-h-screen w-full ${currentTheme.background} ${currentTheme.text}`}>\n+                  <ThemeToggle />\n+                  <div className={`w-full h-full flex flex-col ${currentTheme.background} ${currentTheme.text}`}>\n+                    <Routes>\n+                      <Route \n+                        path=\"/login\" \n+                        element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading login...\" />}>\n                             <div className={currentTheme.background}>\n-                              <PrivateRoute>\n-                                <Layout />\n-                              </PrivateRoute>\n+                              <Login />\n                             </div>\n-                          }>\n-                            <Route path=\"/dashboard\" element={<DashboardPage />} />\n-                            <Route \n-                              path=\"app/learning/*\" \n-                              element={\n-                                <React.Suspense fallback={<LoadingSpinner message=\"Loading learning management...\" />}>\n-                                  <LearningManagement />\n-                                </React.Suspense>\n-                              } \n-                            />\n-                            <Route path=\"analytics\" element={\n-                              <React.Suspense fallback={<LoadingSpinner message=\"Loading analytics...\" />}>\n-                                <Analytics />\n-                              </React.Suspense>\n-                            } />\n-                            <Route path=\"schools\" element={\n-                              <React.Suspense fallback={<LoadingSpinner message=\"Loading schools...\" />}>\n-                                <Schools />\n-                              </React.Suspense>\n-                            } />\n-                            <Route path=\"students\" element={\n-                              <React.Suspense fallback={<LoadingSpinner message=\"Loading students...\" />}>\n-                                <Students />\n-                              </React.Suspense>\n-                            } />\n-                            <Route path=\"sales\" element={\n-                              <React.Suspense fallback={<LoadingSpinner message=\"Loading sales...\" />}>\n-                                <Sales />\n-                              </React.Suspense>\n-                            } />\n-                            <Route path=\"content/*\" element={\n-                              <React.Suspense fallback={<LoadingSpinner message=\"Loading content...\" />}>\n-                                <Content />\n-                              </React.Suspense>\n-                            } />\n-                            <Route path=\"development\" element={\n-                              <React.Suspense fallback={<LoadingSpinner message=\"Loading development...\" />}>\n-                                <Development />\n-                              </React.Suspense>\n-                            } />\n-                            <Route path=\"infrastructure\" element={\n-                              <React.Suspense fallback={<LoadingSpinner message=\"Loading infrastructure...\" />}>\n-                                <Infrastructure />\n-                              </React.Suspense>\n-                            } />\n-                            <Route path=\"finance/*\" element={\n-                              <React.Suspense fallback={<LoadingSpinner message=\"Loading finance...\" />}>\n-                                <Finance />\n-                              </React.Suspense>\n-                            } />\n-                            <Route path=\"staff\" element={\n-                              <React.Suspense fallback={<LoadingSpinner message=\"Loading staff...\" />}>\n-                                <Staff />\n-                              </React.Suspense>\n-                            } />\n-                            <Route path=\"schedule\" element={\n-                              <React.Suspense fallback={<LoadingSpinner message=\"Loading schedule...\" />}>\n-                                <Schedule />\n-                              </React.Suspense>\n-                            } />\n-                            <Route path=\"reports\" element={\n-                              <React.Suspense fallback={<LoadingSpinner message=\"Loading reports...\" />}>\n-                                <Reports />\n-                              </React.Suspense>\n-                            } />\n-                            <Route path=\"events\" element={\n-                              <React.Suspense fallback={<LoadingSpinner message=\"Loading events...\" />}>\n-                                <Events />\n-                              </React.Suspense>\n-                            } />\n-                            <Route path=\"settings\" element={\n-                              <React.Suspense fallback={<LoadingSpinner message=\"Loading settings...\" />}>\n-                                <Settings />\n-                              </React.Suspense>\n-                            } />\n-                            <Route path=\"error-test\" element={\n-                              <React.Suspense fallback={<LoadingSpinner message=\"Loading error test...\" />}>\n-                                <ErrorTest />\n-                              </React.Suspense>\n-                            } />\n-                            <Route \n-                              path=\"content-management\" \n-                              element={\n-                                <React.Suspense fallback={<LoadingSpinner message=\"Loading content management...\" />}>\n-                                  <ContentManagementPage />\n-                                </React.Suspense>\n-                              } \n-                            />\n-                            <Route\n-                              path=\"my-classes\" \n-                              element={\n-                                <React.Suspense fallback={<LoadingSpinner message=\"Loading My Classes...\" />}>\n-                                  <MyClasses/>\n-                                </React.Suspense>\n-                              } \n-                            />\n-                            <Route \n-                              path=\"/teacher/*\" \n-                              element={\n-                                <TeacherLayout>\n-                                  <Routes>\n-                                    <Route path=\"dashboard\" element={<TeacherDashboard />} />\n-                                    <Route path=\"classes\" element={<Classes />} />\n-                                    <Route path=\"lessons\" element={<Classes />} />\n-                                    <Route path=\"my-class\" element={\n-                                      <React.Suspense fallback={<LoadingSpinner message=\"Loading My Class...\" />}>\n-                                        <TeacherMyClassPage />\n-                                      </React.Suspense>\n-                                    } />\n-                                    <Route path=\"AI-Conversation\" element={<AIConversationPage />} />\n-                                  </Routes>\n-                                </TeacherLayout>\n-                              } \n-                            />\n-                            <Route \n-                              path=\"/reset-password/*\" \n-                              element={<ResetPassword />} \n-                            />\n-                            <Route \n-                              path=\"/\" \n-                              element={\n-                                <Navigate to=\"/dashboard\" replace />\n-                              } \n-                            />\n-                            <Route \n-                              path=\"*\" \n-                              element={\n-                                <Navigate to=\"/dashboard\" replace />\n-                              } \n-                            />\n-                          </Route>\n-                        </Routes>\n-                        <ErrorToast />\n-                        {process.env.NODE_ENV === 'development' && (\n-                          <React.Suspense fallback={null}>\n-                            <ReactQueryDevtools initialIsOpen={false} />\n                           </React.Suspense>\n-                        )}\n-                      </div>\n-                    </div>\n-                    <Toaster />\n-                    {import.meta.env.DEV && <SessionDebugger />}\n-                  </ToastProvider>\n-                </ThemeContextProvider>\n-              </NextThemesProvider>\n-            </ErrorProvider>\n-          </AuthProvider>\n-        </QueryClientProvider>\n-      </BrowserRouter>\n+                        }\n+                      />\n+                      <Route element={\n+                        <div className={currentTheme.background}>\n+                          <PrivateRoute>\n+                            <Layout />\n+                          </PrivateRoute>\n+                        </div>\n+                      }>\n+                        <Route path=\"/dashboard\" element={<DashboardPage />} />\n+                        <Route \n+                          path=\"app/learning/*\" \n+                          element={\n+                            <React.Suspense fallback={<LoadingSpinner message=\"Loading learning management...\" />}>\n+                              <LearningManagement />\n+                            </React.Suspense>\n+                          } \n+                        />\n+                        <Route path=\"analytics\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading analytics...\" />}>\n+                            <Analytics />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"schools\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading schools...\" />}>\n+                            <Schools />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"students\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading students...\" />}>\n+                            <Students />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"sales\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading sales...\" />}>\n+                            <Sales />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"content/*\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading content...\" />}>\n+                            <Content />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"development\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading development...\" />}>\n+                            <Development />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"infrastructure\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading infrastructure...\" />}>\n+                            <Infrastructure />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"finance/*\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading finance...\" />}>\n+                            <Finance />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"staff\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading staff...\" />}>\n+                            <Staff />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"schedule\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading schedule...\" />}>\n+                            <Schedule />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"reports\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading reports...\" />}>\n+                            <Reports />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"events\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading events...\" />}>\n+                            <Events />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"settings\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading settings...\" />}>\n+                            <Settings />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"error-test\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading error test...\" />}>\n+                            <ErrorTest />\n+                          </React.Suspense>\n+                        } />\n+                        <Route \n+                          path=\"content-management\" \n+                          element={\n+                            <React.Suspense fallback={<LoadingSpinner message=\"Loading content management...\" />}>\n+                              <ContentManagementPage />\n+                            </React.Suspense>\n+                          } \n+                        />\n+                        <Route\n+                          path=\"my-classes\" \n+                          element={\n+                            <React.Suspense fallback={<LoadingSpinner message=\"Loading My Classes...\" />}>\n+                              <MyClasses/>\n+                            </React.Suspense>\n+                          } \n+                        />\n+                        <Route \n+                          path=\"/teacher/*\" \n+                          element={\n+                            <TeacherLayout>\n+                              <Routes>\n+                                <Route path=\"dashboard\" element={<TeacherDashboard />} />\n+                                <Route path=\"classes\" element={<Classes />} />\n+                                <Route path=\"lessons\" element={<Classes />} />\n+                                <Route path=\"my-class\" element={\n+                                  <React.Suspense fallback={<LoadingSpinner message=\"Loading My Class...\" />}>\n+                                    <TeacherMyClassPage />\n+                                  </React.Suspense>\n+                                } />\n+                                <Route path=\"AI-Conversation\" element={<AIConversationPage />} />\n+                              </Routes>\n+                            </TeacherLayout>\n+                          } \n+                        />\n+                        <Route \n+                          path=\"/reset-password/*\" \n+                          element={<ResetPassword />} \n+                        />\n+                        <Route \n+                          path=\"/\" \n+                          element={\n+                            <Navigate to=\"/dashboard\" replace />\n+                          } \n+                        />\n+                        <Route \n+                          path=\"*\" \n+                          element={\n+                            <Navigate to=\"/dashboard\" replace />\n+                          } \n+                        />\n+                      </Route>\n+                    </Routes>\n+                    <ErrorToast />\n+                    {process.env.NODE_ENV === 'development' && (\n+                      <React.Suspense fallback={null}>\n+                        <ReactQueryDevtools initialIsOpen={false} />\n+                      </React.Suspense>\n+                    )}\n+                  </div>\n+                </div>\n+                <Toaster />\n+                {import.meta.env.DEV && <SessionDebugger />}\n+              </ToastProvider>\n+            </ThemeContextProvider>\n+            </NextThemesProvider>\n+          </ErrorProvider>\n+        </AuthProvider>\n+      </QueryClientProvider>\n     </ErrorBoundary>\n   );\n }\n \n"
                },
                {
                    "date": 1739310204813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n \"use client\";\n \n import React, { useEffect } from 'react';\n-import { Routes, Route, Navigate, useLocation, useNavigate } from 'react-router-dom';\n+import { Routes, Route, Navigate, useLocation, useNavigate, BrowserRouter, createBrowserRouter } from 'react-router-dom';\n import { QueryClientProvider } from '@tanstack/react-query';\n import { QueryClient  } from '@tanstack/query-core';\n import { AuthProvider } from './contexts/AuthContext';\n import { logger } from './lib/logger';\n@@ -22,9 +22,8 @@\n import { themes } from \"@/lib/themes\"\n import { ThemeContextProvider } from './contexts/ThemeContext';\n import { Toaster } from \"@/components/ui/toaster\";\n import { ToastProvider } from \"@/components/ui/toast\";\n-import { BrowserRouter } from 'react-router-dom';\n \n // Import Dashboard page directly to avoid dynamic import issues\n import DashboardPage from './pages/Dashboard';\n import MyClassesPage from './app/teacher/lessons/page';\n@@ -86,8 +85,15 @@\n     },\n   },\n });\n \n+// Add future flags configuration\n+const router = createBrowserRouter([], {\n+  future: {\n+    v7_startTransition: true,\n+  },\n+});\n+\n function App() {\n   const { theme, resolvedTheme } = useTheme()\n   const currentTheme = themes[theme as keyof typeof themes] || themes[resolvedTheme as keyof typeof themes] || themes.light\n   const location = useLocation();\n"
                },
                {
                    "date": 1739310237883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,17 @@\n \"use client\";\n \n import React, { useEffect } from 'react';\n-import { Routes, Route, Navigate, useLocation, useNavigate, BrowserRouter, createBrowserRouter } from 'react-router-dom';\n+import { \n+  Routes, \n+  Route, \n+  Navigate, \n+  useLocation, \n+  useNavigate, \n+  BrowserRouter,\n+  RouterProvider,\n+  createBrowserRouter\n+} from 'react-router-dom';\n import { QueryClientProvider } from '@tanstack/react-query';\n import { QueryClient  } from '@tanstack/query-core';\n import { AuthProvider } from './contexts/AuthContext';\n import { logger } from './lib/logger';\n@@ -85,16 +94,23 @@\n     },\n   },\n });\n \n-// Add future flags configuration\n-const router = createBrowserRouter([], {\n+// Create router with routes configuration\n+const router = createBrowserRouter([\n+  {\n+    path: \"/\",\n+    element: <App />,\n+  }\n+], {\n   future: {\n-    v7_startTransition: true,\n-  },\n+    // Use the v7 flag in a type-safe way\n+    v7_startTransition: true\n+  }\n });\n \n-function App() {\n+// Separate the AppContent from App to avoid circular reference\n+function AppContent() {\n   const { theme, resolvedTheme } = useTheme()\n   const currentTheme = themes[theme as keyof typeof themes] || themes[resolvedTheme as keyof typeof themes] || themes.light\n   const location = useLocation();\n   const navigate = useNavigate();\n@@ -291,5 +307,14 @@\n     </ErrorBoundary>\n   );\n }\n \n+// Main App component now just returns BrowserRouter with AppContent\n+function App() {\n+  return (\n+    <BrowserRouter future={{ v7_startTransition: true }}>\n+      <AppContent />\n+    </BrowserRouter>\n+  );\n+}\n+\n export default App;\n"
                },
                {
                    "date": 1739310307420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,11 +6,9 @@\n   Route, \n   Navigate, \n   useLocation, \n   useNavigate, \n-  BrowserRouter,\n-  RouterProvider,\n-  createBrowserRouter\n+  BrowserRouter\n } from 'react-router-dom';\n import { QueryClientProvider } from '@tanstack/react-query';\n import { QueryClient  } from '@tanstack/query-core';\n import { AuthProvider } from './contexts/AuthContext';\n@@ -94,22 +92,8 @@\n     },\n   },\n });\n \n-// Create router with routes configuration\n-const router = createBrowserRouter([\n-  {\n-    path: \"/\",\n-    element: <App />,\n-  }\n-], {\n-  future: {\n-    // Use the v7 flag in a type-safe way\n-    v7_startTransition: true\n-  }\n-});\n-\n-// Separate the AppContent from App to avoid circular reference\n function AppContent() {\n   const { theme, resolvedTheme } = useTheme()\n   const currentTheme = themes[theme as keyof typeof themes] || themes[resolvedTheme as keyof typeof themes] || themes.light\n   const location = useLocation();\n@@ -307,11 +291,12 @@\n     </ErrorBoundary>\n   );\n }\n \n-// Main App component now just returns BrowserRouter with AppContent\n+// Main App component\n function App() {\n   return (\n+    // @ts-ignore - Ignore TypeScript error for future flag as it's not yet in the types\n     <BrowserRouter future={{ v7_startTransition: true }}>\n       <AppContent />\n     </BrowserRouter>\n   );\n"
                },
                {
                    "date": 1739310380048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -235,42 +235,22 @@\n                               <MyClasses/>\n                             </React.Suspense>\n                           } \n                         />\n-                        <Route \n-                          path=\"/teacher/*\" \n-                          element={\n-                            <TeacherLayout>\n-                              <Routes>\n-                                <Route path=\"dashboard\" element={<TeacherDashboard />} />\n-                                <Route path=\"classes\" element={<Classes />} />\n-                                <Route path=\"lessons\" element={<Classes />} />\n-                                <Route path=\"my-class\" element={\n-                                  <React.Suspense fallback={<LoadingSpinner message=\"Loading My Class...\" />}>\n-                                    <TeacherMyClassPage />\n-                                  </React.Suspense>\n-                                } />\n-                                <Route path=\"AI-Conversation\" element={<AIConversationPage />} />\n-                              </Routes>\n-                            </TeacherLayout>\n-                          } \n-                        />\n-                        <Route \n-                          path=\"/reset-password/*\" \n-                          element={<ResetPassword />} \n-                        />\n-                        <Route \n-                          path=\"/\" \n-                          element={\n-                            <Navigate to=\"/dashboard\" replace />\n-                          } \n-                        />\n-                        <Route \n-                          path=\"*\" \n-                          element={\n-                            <Navigate to=\"/dashboard\" replace />\n-                          } \n-                        />\n+                        <Route path=\"/teacher\" element={<TeacherLayout />}>\n+                          <Route path=\"dashboard\" element={<TeacherDashboard />} />\n+                          <Route path=\"classes\" element={<Classes />} />\n+                          <Route path=\"lessons\" element={<Classes />} />\n+                          <Route path=\"my-class\" element={\n+                            <React.Suspense fallback={<LoadingSpinner message=\"Loading My Class...\" />}>\n+                              <TeacherMyClassPage />\n+                            </React.Suspense>\n+                          } />\n+                          <Route path=\"AI-Conversation\" element={<AIConversationPage />} />\n+                        </Route>\n+                        <Route path=\"/reset-password/*\" element={<ResetPassword />} />\n+                        <Route path=\"/\" element={<Navigate to=\"/dashboard\" replace />} />\n+                        <Route path=\"*\" element={<Navigate to=\"/dashboard\" replace />} />\n                       </Route>\n                     </Routes>\n                     <ErrorToast />\n                     {process.env.NODE_ENV === 'development' && (\n"
                },
                {
                    "date": 1739312538912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,10 +5,9 @@\n   Routes, \n   Route, \n   Navigate, \n   useLocation, \n-  useNavigate, \n-  BrowserRouter\n+  useNavigate\n } from 'react-router-dom';\n import { QueryClientProvider } from '@tanstack/react-query';\n import { QueryClient  } from '@tanstack/query-core';\n import { AuthProvider } from './contexts/AuthContext';\n@@ -274,12 +273,9 @@\n \n // Main App component\n function App() {\n   return (\n-    // @ts-ignore - Ignore TypeScript error for future flag as it's not yet in the types\n-    <BrowserRouter future={{ v7_startTransition: true }}>\n-      <AppContent />\n-    </BrowserRouter>\n+    <AppContent />\n   );\n }\n \n export default App;\n"
                },
                {
                    "date": 1739345772404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,9 @@\n import { themes } from \"@/lib/themes\"\n import { ThemeContextProvider } from './contexts/ThemeContext';\n import { Toaster } from \"@/components/ui/toaster\";\n import { ToastProvider } from \"@/components/ui/toast\";\n+import { BrowserRouter } from 'react-router-dom';\n \n // Import Dashboard page directly to avoid dynamic import issues\n import DashboardPage from './pages/Dashboard';\n import MyClassesPage from './app/teacher/lessons/page';\n"
                },
                {
                    "date": 1739346600364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,8 @@\n import { themes } from \"@/lib/themes\"\n import { ThemeContextProvider } from './contexts/ThemeContext';\n import { Toaster } from \"@/components/ui/toaster\";\n import { ToastProvider } from \"@/components/ui/toast\";\n-import { BrowserRouter } from 'react-router-dom';\n \n // Import Dashboard page directly to avoid dynamic import issues\n import DashboardPage from './pages/Dashboard';\n import MyClassesPage from './app/teacher/lessons/page';\n"
                },
                {
                    "date": 1739352896788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -185,9 +185,11 @@\n                           </React.Suspense>\n                         } />\n                         <Route path=\"finance/*\" element={\n                           <React.Suspense fallback={<LoadingSpinner message=\"Loading finance...\" />}>\n-                            <Finance />\n+                            <PrivateRoute>\n+                              <Finance />\n+                            </PrivateRoute>\n                           </React.Suspense>\n                         } />\n                         <Route path=\"staff\" element={\n                           <React.Suspense fallback={<LoadingSpinner message=\"Loading staff...\" />}>\n"
                },
                {
                    "date": 1739382774986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,9 @@\n import PrivateRoute from './components/PrivateRoute';\n import ErrorToast from './components/ErrorToast';\n //import { queryClient } from '@/providers/query-provider';\n import ErrorBoundary from './components/ErrorBoundary';\n+import LessonErrorBoundary from './components/LessonErrorBoundary';\n import LoadingSpinner from './components/LoadingSpinner';\n import ThemeSelector from './components/ThemeSelector';\n import ContentManagementPage from './app/content-management/page' ;\n import { ReactQueryDevtools } from '@tanstack/react-query-devtools';\n@@ -32,8 +33,9 @@\n \n // Import Dashboard page directly to avoid dynamic import issues\n import DashboardPage from './pages/Dashboard';\n import MyClassesPage from './app/teacher/lessons/page';\n+import LessonPage from './app/teacher/lessons/lesson';\n \n // Lazy load pages with proper error boundaries\n const Login = React.lazy(() => import('./pages/Login'));\n const Students = React.lazy(() => import('./pages/Students'));\n@@ -91,8 +93,21 @@\n     },\n   },\n });\n \n+import { useEffect } from 'react';\n+import { ConsoleMonitor } from '@/utils/consoleMonitor';\n+\n+function MyApp({ Component, pageProps }) {\n+  useEffect(() => {\n+    if (process.env.NODE_ENV === 'development') {\n+      ConsoleMonitor.getInstance();\n+    }\n+  }, []);\n+\n+  return <Component {...pageProps} />;\n+}\n+\n function AppContent() {\n   const { theme, resolvedTheme } = useTheme()\n   const currentTheme = themes[theme as keyof typeof themes] || themes[resolvedTheme as keyof typeof themes] || themes.light\n   const location = useLocation();\n@@ -185,11 +200,9 @@\n                           </React.Suspense>\n                         } />\n                         <Route path=\"finance/*\" element={\n                           <React.Suspense fallback={<LoadingSpinner message=\"Loading finance...\" />}>\n-                            <PrivateRoute>\n-                              <Finance />\n-                            </PrivateRoute>\n+                            <Finance />\n                           </React.Suspense>\n                         } />\n                         <Route path=\"staff\" element={\n                           <React.Suspense fallback={<LoadingSpinner message=\"Loading staff...\" />}>\n@@ -240,8 +253,17 @@\n                         <Route path=\"/teacher\" element={<TeacherLayout />}>\n                           <Route path=\"dashboard\" element={<TeacherDashboard />} />\n                           <Route path=\"classes\" element={<Classes />} />\n                           <Route path=\"lessons\" element={<Classes />} />\n+                          <Route path=\"lessons/lesson\" element={\n+                            <PrivateRoute>\n+                              <React.Suspense fallback={<LoadingSpinner message=\"Loading lesson...\" />}>\n+                                <LessonErrorBoundary source=\"LessonRoute\">\n+                                  <LessonPage />\n+                                </LessonErrorBoundary>\n+                              </React.Suspense>\n+                            </PrivateRoute>\n+                          } />\n                           <Route path=\"my-class\" element={\n                             <React.Suspense fallback={<LoadingSpinner message=\"Loading My Class...\" />}>\n                               <TeacherMyClassPage />\n                             </React.Suspense>\n"
                },
                {
                    "date": 1739382780491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,8 @@\n     },\n   },\n });\n \n-import { useEffect } from 'react';\n import { ConsoleMonitor } from '@/utils/consoleMonitor';\n \n function MyApp({ Component, pageProps }) {\n   useEffect(() => {\n"
                },
                {
                    "date": 1739382797303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,9 @@\n });\n \n import { ConsoleMonitor } from '@/utils/consoleMonitor';\n \n-function MyApp({ Component, pageProps }) {\n+function MyApp({ Component, pageProps }: { Component: React.ComponentType; pageProps: any }) {\n   useEffect(() => {\n     if (process.env.NODE_ENV === 'development') {\n       ConsoleMonitor.getInstance();\n     }\n"
                },
                {
                    "date": 1739382838736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,8 +104,9 @@\n   }, []);\n \n   return <Component {...pageProps} />;\n }\n+export default MyApp;\n \n function AppContent() {\n   const { theme, resolvedTheme } = useTheme()\n   const currentTheme = themes[theme as keyof typeof themes] || themes[resolvedTheme as keyof typeof themes] || themes.light\n"
                },
                {
                    "date": 1739382844216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,10 +104,10 @@\n   }, []);\n \n   return <Component {...pageProps} />;\n }\n-export default MyApp;\n \n+\n function AppContent() {\n   const { theme, resolvedTheme } = useTheme()\n   const currentTheme = themes[theme as keyof typeof themes] || themes[resolvedTheme as keyof typeof themes] || themes.light\n   const location = useLocation();\n"
                },
                {
                    "date": 1739392698455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n \"use client\";\n \n-import React, { useEffect } from 'react';\n+import React, { useEffect, memo } from 'react';\n import { \n   Routes, \n   Route, \n   Navigate, \n@@ -105,197 +105,34 @@\n \n   return <Component {...pageProps} />;\n }\n \n-\n-function AppContent() {\n-  const { theme, resolvedTheme } = useTheme()\n-  const currentTheme = themes[theme as keyof typeof themes] || themes[resolvedTheme as keyof typeof themes] || themes.light\n+const AppContent = memo(() => {\n   const location = useLocation();\n-  const navigate = useNavigate();\n+  \n+  // Log only when location changes\n+  useEffect(() => {\n+    logger.info('App initializing', {\n+      source: 'App',\n+      context: { pathname: location.pathname }\n+    });\n+  }, [location.pathname]);\n \n-  // Log initialization\n-  console.log('[App] Rendering...');\n-  logger.info('App initializing', { source: 'App', context: { route: location.pathname } });\n-\n   return (\n-    <ErrorBoundary source=\"App\">\n-      <QueryClientProvider client={queryClient}>\n-        <AuthProvider>\n-          <ErrorProvider>\n-            <NextThemesProvider\n-              attribute=\"class\"\n-              defaultTheme=\"light\"\n-              value={{\n-                light: \"light\",\n-                dark: \"dark\",\n-                gray: \"gray\",\n-                contrast: \"contrast\"\n-              }}\n-            >\n-              <ThemeContextProvider>\n-                <ToastProvider>\n-                <div className={`relative min-h-screen w-full ${currentTheme.background} ${currentTheme.text}`}>\n-                  <ThemeToggle />\n-                  <div className={`w-full h-full flex flex-col ${currentTheme.background} ${currentTheme.text}`}>\n-                    <Routes>\n-                      <Route \n-                        path=\"/login\" \n-                        element={\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading login...\" />}>\n-                            <div className={currentTheme.background}>\n-                              <Login />\n-                            </div>\n-                          </React.Suspense>\n-                        }\n-                      />\n-                      <Route element={\n-                        <div className={currentTheme.background}>\n-                          <PrivateRoute>\n-                            <Layout />\n-                          </PrivateRoute>\n-                        </div>\n-                      }>\n-                        <Route path=\"/dashboard\" element={<DashboardPage />} />\n-                        <Route \n-                          path=\"app/learning/*\" \n-                          element={\n-                            <React.Suspense fallback={<LoadingSpinner message=\"Loading learning management...\" />}>\n-                              <LearningManagement />\n-                            </React.Suspense>\n-                          } \n-                        />\n-                        <Route path=\"analytics\" element={\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading analytics...\" />}>\n-                            <Analytics />\n-                          </React.Suspense>\n-                        } />\n-                        <Route path=\"schools\" element={\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading schools...\" />}>\n-                            <Schools />\n-                          </React.Suspense>\n-                        } />\n-                        <Route path=\"students\" element={\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading students...\" />}>\n-                            <Students />\n-                          </React.Suspense>\n-                        } />\n-                        <Route path=\"sales\" element={\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading sales...\" />}>\n-                            <Sales />\n-                          </React.Suspense>\n-                        } />\n-                        <Route path=\"content/*\" element={\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading content...\" />}>\n-                            <Content />\n-                          </React.Suspense>\n-                        } />\n-                        <Route path=\"development\" element={\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading development...\" />}>\n-                            <Development />\n-                          </React.Suspense>\n-                        } />\n-                        <Route path=\"infrastructure\" element={\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading infrastructure...\" />}>\n-                            <Infrastructure />\n-                          </React.Suspense>\n-                        } />\n-                        <Route path=\"finance/*\" element={\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading finance...\" />}>\n-                            <Finance />\n-                          </React.Suspense>\n-                        } />\n-                        <Route path=\"staff\" element={\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading staff...\" />}>\n-                            <Staff />\n-                          </React.Suspense>\n-                        } />\n-                        <Route path=\"schedule\" element={\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading schedule...\" />}>\n-                            <Schedule />\n-                          </React.Suspense>\n-                        } />\n-                        <Route path=\"reports\" element={\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading reports...\" />}>\n-                            <Reports />\n-                          </React.Suspense>\n-                        } />\n-                        <Route path=\"events\" element={\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading events...\" />}>\n-                            <Events />\n-                          </React.Suspense>\n-                        } />\n-                        <Route path=\"settings\" element={\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading settings...\" />}>\n-                            <Settings />\n-                          </React.Suspense>\n-                        } />\n-                        <Route path=\"error-test\" element={\n-                          <React.Suspense fallback={<LoadingSpinner message=\"Loading error test...\" />}>\n-                            <ErrorTest />\n-                          </React.Suspense>\n-                        } />\n-                        <Route \n-                          path=\"content-management\" \n-                          element={\n-                            <React.Suspense fallback={<LoadingSpinner message=\"Loading content management...\" />}>\n-                              <ContentManagementPage />\n-                            </React.Suspense>\n-                          } \n-                        />\n-                        <Route\n-                          path=\"my-classes\" \n-                          element={\n-                            <React.Suspense fallback={<LoadingSpinner message=\"Loading My Classes...\" />}>\n-                              <MyClasses/>\n-                            </React.Suspense>\n-                          } \n-                        />\n-                        <Route path=\"/teacher\" element={<TeacherLayout />}>\n-                          <Route path=\"dashboard\" element={<TeacherDashboard />} />\n-                          <Route path=\"classes\" element={<Classes />} />\n-                          <Route path=\"lessons\" element={<Classes />} />\n-                          <Route path=\"lessons/lesson\" element={\n-                            <PrivateRoute>\n-                              <React.Suspense fallback={<LoadingSpinner message=\"Loading lesson...\" />}>\n-                                <LessonErrorBoundary source=\"LessonRoute\">\n-                                  <LessonPage />\n-                                </LessonErrorBoundary>\n-                              </React.Suspense>\n-                            </PrivateRoute>\n-                          } />\n-                          <Route path=\"my-class\" element={\n-                            <React.Suspense fallback={<LoadingSpinner message=\"Loading My Class...\" />}>\n-                              <TeacherMyClassPage />\n-                            </React.Suspense>\n-                          } />\n-                          <Route path=\"AI-Conversation\" element={<AIConversationPage />} />\n-                        </Route>\n-                        <Route path=\"/reset-password/*\" element={<ResetPassword />} />\n-                        <Route path=\"/\" element={<Navigate to=\"/dashboard\" replace />} />\n-                        <Route path=\"*\" element={<Navigate to=\"/dashboard\" replace />} />\n-                      </Route>\n-                    </Routes>\n-                    <ErrorToast />\n-                    {process.env.NODE_ENV === 'development' && (\n-                      <React.Suspense fallback={null}>\n-                        <ReactQueryDevtools initialIsOpen={false} />\n-                      </React.Suspense>\n-                    )}\n-                  </div>\n-                </div>\n-                <Toaster />\n-                {import.meta.env.DEV && <SessionDebugger />}\n-              </ToastProvider>\n-            </ThemeContextProvider>\n-            </NextThemesProvider>\n-          </ErrorProvider>\n-        </AuthProvider>\n-      </QueryClientProvider>\n-    </ErrorBoundary>\n+    <div className=\"min-h-screen bg-background\">\n+      <Layout>\n+        <Routes>\n+          <Route path=\"/login\" element={<Login />} />\n+          <Route path=\"/\" element={<PrivateRoute><DashboardPage /></PrivateRoute>} />\n+          {/* Other routes */}\n+        </Routes>\n+      </Layout>\n+    </div>\n   );\n-}\n+});\n \n+AppContent.displayName = 'AppContent';\n+\n // Main App component\n function App() {\n   return (\n     <AppContent />\n"
                },
                {
                    "date": 1739392744089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,34 +105,197 @@\n \n   return <Component {...pageProps} />;\n }\n \n-const AppContent = memo(() => {\n+\n+function AppContent() {\n+  const { theme, resolvedTheme } = useTheme()\n+  const currentTheme = themes[theme as keyof typeof themes] || themes[resolvedTheme as keyof typeof themes] || themes.light\n   const location = useLocation();\n-  \n-  // Log only when location changes\n-  useEffect(() => {\n-    logger.info('App initializing', {\n-      source: 'App',\n-      context: { pathname: location.pathname }\n-    });\n-  }, [location.pathname]);\n+  const navigate = useNavigate();\n \n+  // Log initialization\n+  console.log('[App] Rendering...');\n+  logger.info('App initializing', { source: 'App', context: { route: location.pathname } });\n+\n   return (\n-    <div className=\"min-h-screen bg-background\">\n-      <Layout>\n-        <Routes>\n-          <Route path=\"/login\" element={<Login />} />\n-          <Route path=\"/\" element={<PrivateRoute><DashboardPage /></PrivateRoute>} />\n-          {/* Other routes */}\n-        </Routes>\n-      </Layout>\n-    </div>\n+    <ErrorBoundary source=\"App\">\n+      <QueryClientProvider client={queryClient}>\n+        <AuthProvider>\n+          <ErrorProvider>\n+            <NextThemesProvider\n+              attribute=\"class\"\n+              defaultTheme=\"light\"\n+              value={{\n+                light: \"light\",\n+                dark: \"dark\",\n+                gray: \"gray\",\n+                contrast: \"contrast\"\n+              }}\n+            >\n+              <ThemeContextProvider>\n+                <ToastProvider>\n+                <div className={`relative min-h-screen w-full ${currentTheme.background} ${currentTheme.text}`}>\n+                  <ThemeToggle />\n+                  <div className={`w-full h-full flex flex-col ${currentTheme.background} ${currentTheme.text}`}>\n+                    <Routes>\n+                      <Route \n+                        path=\"/login\" \n+                        element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading login...\" />}>\n+                            <div className={currentTheme.background}>\n+                              <Login />\n+                            </div>\n+                          </React.Suspense>\n+                        }\n+                      />\n+                      <Route element={\n+                        <div className={currentTheme.background}>\n+                          <PrivateRoute>\n+                            <Layout />\n+                          </PrivateRoute>\n+                        </div>\n+                      }>\n+                        <Route path=\"/dashboard\" element={<DashboardPage />} />\n+                        <Route \n+                          path=\"app/learning/*\" \n+                          element={\n+                            <React.Suspense fallback={<LoadingSpinner message=\"Loading learning management...\" />}>\n+                              <LearningManagement />\n+                            </React.Suspense>\n+                          } \n+                        />\n+                        <Route path=\"analytics\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading analytics...\" />}>\n+                            <Analytics />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"schools\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading schools...\" />}>\n+                            <Schools />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"students\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading students...\" />}>\n+                            <Students />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"sales\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading sales...\" />}>\n+                            <Sales />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"content/*\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading content...\" />}>\n+                            <Content />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"development\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading development...\" />}>\n+                            <Development />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"infrastructure\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading infrastructure...\" />}>\n+                            <Infrastructure />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"finance/*\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading finance...\" />}>\n+                            <Finance />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"staff\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading staff...\" />}>\n+                            <Staff />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"schedule\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading schedule...\" />}>\n+                            <Schedule />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"reports\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading reports...\" />}>\n+                            <Reports />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"events\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading events...\" />}>\n+                            <Events />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"settings\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading settings...\" />}>\n+                            <Settings />\n+                          </React.Suspense>\n+                        } />\n+                        <Route path=\"error-test\" element={\n+                          <React.Suspense fallback={<LoadingSpinner message=\"Loading error test...\" />}>\n+                            <ErrorTest />\n+                          </React.Suspense>\n+                        } />\n+                        <Route \n+                          path=\"content-management\" \n+                          element={\n+                            <React.Suspense fallback={<LoadingSpinner message=\"Loading content management...\" />}>\n+                              <ContentManagementPage />\n+                            </React.Suspense>\n+                          } \n+                        />\n+                        <Route\n+                          path=\"my-classes\" \n+                          element={\n+                            <React.Suspense fallback={<LoadingSpinner message=\"Loading My Classes...\" />}>\n+                              <MyClasses/>\n+                            </React.Suspense>\n+                          } \n+                        />\n+                        <Route path=\"/teacher\" element={<TeacherLayout />}>\n+                          <Route path=\"dashboard\" element={<TeacherDashboard />} />\n+                          <Route path=\"classes\" element={<Classes />} />\n+                          <Route path=\"lessons\" element={<Classes />} />\n+                          <Route path=\"lessons/lesson\" element={\n+                            <PrivateRoute>\n+                              <React.Suspense fallback={<LoadingSpinner message=\"Loading lesson...\" />}>\n+                                <LessonErrorBoundary source=\"LessonRoute\">\n+                                  <LessonPage />\n+                                </LessonErrorBoundary>\n+                              </React.Suspense>\n+                            </PrivateRoute>\n+                          } />\n+                          <Route path=\"my-class\" element={\n+                            <React.Suspense fallback={<LoadingSpinner message=\"Loading My Class...\" />}>\n+                              <TeacherMyClassPage />\n+                            </React.Suspense>\n+                          } />\n+                          <Route path=\"AI-Conversation\" element={<AIConversationPage />} />\n+                        </Route>\n+                        <Route path=\"/reset-password/*\" element={<ResetPassword />} />\n+                        <Route path=\"/\" element={<Navigate to=\"/dashboard\" replace />} />\n+                        <Route path=\"*\" element={<Navigate to=\"/dashboard\" replace />} />\n+                      </Route>\n+                    </Routes>\n+                    <ErrorToast />\n+                    {process.env.NODE_ENV === 'development' && (\n+                      <React.Suspense fallback={null}>\n+                        <ReactQueryDevtools initialIsOpen={false} />\n+                      </React.Suspense>\n+                    )}\n+                  </div>\n+                </div>\n+                <Toaster />\n+                {import.meta.env.DEV && <SessionDebugger />}\n+              </ToastProvider>\n+            </ThemeContextProvider>\n+            </NextThemesProvider>\n+          </ErrorProvider>\n+        </AuthProvider>\n+      </QueryClientProvider>\n+    </ErrorBoundary>\n   );\n-});\n+}\n \n-AppContent.displayName = 'AppContent';\n-\n // Main App component\n function App() {\n   return (\n     <AppContent />\n"
                }
            ],
            "date": 1739020320536,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport React from 'react';\r\nimport { Routes, Route, Navigate } from 'react-router-dom';\r\nimport { QueryClientProvider } from '@tanstack/react-query';\r\nimport { QueryClient  } from '@tanstack/query-core';\r\nimport { AuthProvider } from './contexts/AuthContext';\r\nimport { logger } from './lib/logger';\r\nimport { ErrorProvider } from './contexts/ErrorContext';\r\nimport { ThemeProvider as NextThemesProvider } from \"next-themes\";\r\nimport Layout from './components/Layout';\r\nimport PrivateRoute from './components/PrivateRoute';\r\nimport ErrorToast from './components/ErrorToast';\r\n//import { queryClient } from '@/providers/query-provider';\r\nimport ErrorBoundary from './components/ErrorBoundary';\r\nimport LoadingSpinner from './components/LoadingSpinner';\r\nimport ThemeSelector from './components/ThemeSelector';\r\nimport ContentManagementPage from './app/content-management/page' ;\r\nimport { ReactQueryDevtools } from '@tanstack/react-query-devtools';\r\nimport { ThemeToggle } from \"@/components/theme-toggle\"\r\nimport { useTheme } from \"next-themes\"\r\nimport { themes } from \"@/lib/themes\"\r\nimport { ThemeContextProvider } from './contexts/ThemeContext';\r\nimport { Toaster } from \"@/components/ui/toaster\";\r\nimport { ToastProvider } from \"@/components/ui/toast\";\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\n// Import Dashboard page directly to avoid dynamic import issues\r\nimport DashboardPage from './pages/Dashboard';\r\nimport MyClassesPage from './app/teacher/lessons/page';\r\n\r\n// Lazy load pages with proper error boundaries\r\nconst Login = React.lazy(() => import('./pages/Login'));\r\nconst Students = React.lazy(() => import('./pages/Students'));\r\nconst Development = React.lazy(() => import('./pages/Development'));\r\nconst Infrastructure = React.lazy(() => import('./pages/Infrastructure'));\r\nconst Reports = React.lazy(() => import('./pages/Reports'));\r\nconst Sales = React.lazy(() => import('./pages/Sales'));\r\nconst Content = React.lazy(() => import('./pages/Content'));\r\nconst LearningManagement = React.lazy(() => import('./app/learning/page'));\r\n\r\n// Import Staff page with retry logic\r\nconst Staff = React.lazy(() => {\r\n  return import('./pages/Staff').catch(err => {\r\n    logger.error('Failed to load Staff page', err);\r\n    return Promise.resolve({\r\n      default: () => (\r\n        <ErrorBoundary source=\"Staff\">\r\n          <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg\">\r\n            <h3 className=\"text-lg font-medium text-red-800\">Failed to load Staff page</h3>\r\n            <p className=\"mt-2 text-sm text-red-600\">Please try refreshing the page</p>\r\n          </div>\r\n        </ErrorBoundary>\r\n      )\r\n    });\r\n  });\r\n});\r\nconst Schedule = React.lazy(() => import('./pages/Schedule'));\r\nconst Settings = React.lazy(() => import('./pages/Settings'));\r\nconst Events = React.lazy(() => import('./pages/Events'));\r\nconst ErrorTest = React.lazy(() => import('./pages/ErrorTest'));\r\nconst Schools = React.lazy(() => import('./pages/Schools'));\r\nconst Finance = React.lazy(() => import('./pages/Finance'));\r\nconst Analytics = React.lazy(() => import('./pages/Analytics'));\r\nconst MyClasses = React.lazy(() => import('./app/teacher/lessons/page'));\r\n\r\nimport TeacherLayout from './app/teacher/layout';\r\nimport ProtectedRoute from './components/ProtectedRoute';\r\nimport TeacherDashboard from './app/teacher/dashboard/page';\r\nimport Classes from './app/teacher/lessons/page';\r\nimport AIConversationPage from './app/teacher/ai-conversation/page';\r\n//import CourseDetails from '/src/app/teacher/courses/page'; //';\r\n\r\n// Import the TeacherMyClassPage component\r\nconst TeacherMyClassPage = React.lazy(() => import('./app/teacher/my-class/page'));\r\n\r\nimport { ResetPassword } from \"@/components/auth/ResetPassword\";\r\nimport { SessionDebugger } from './components/SessionDebugger';\r\n\r\n// Create a new QueryClient instance\r\nconst queryClient = new QueryClient({\r\n  defaultOptions: {\r\n    queries: {\r\n      staleTime: 5 * 60 * 1000,\r\n      gcTime: 10 * 60 * 1000,\r\n    },\r\n  },\r\n});\r\n\r\nfunction App() {\r\n  const { theme, resolvedTheme } = useTheme()\r\n  const currentTheme = themes[theme as keyof typeof themes] || themes[resolvedTheme as keyof typeof themes] || themes.light\r\n\r\n  console.log('[App] Rendering...');\r\n  logger.info('App initializing', 'App');\r\n\r\n  return (\r\n    <ErrorBoundary source=\"App\">\r\n      <QueryClientProvider client={queryClient}>\r\n        <AuthProvider>\r\n          <ErrorProvider>\r\n            <NextThemesProvider\r\n              attribute=\"class\"\r\n              defaultTheme=\"light\"\r\n              value={{\r\n                light: \"light\",\r\n                dark: \"dark\",\r\n                gray: \"gray\",\r\n                contrast: \"contrast\"\r\n              }}\r\n            >\r\n              <ThemeContextProvider>\r\n                <ToastProvider>\r\n                <div className={`relative min-h-screen w-full ${currentTheme.background} ${currentTheme.text}`}>\r\n                  <ThemeToggle />\r\n                  <div className={`w-full ${currentTheme.background} ${currentTheme.text}`}>\r\n                    <Routes>\r\n                      <Route \r\n                        path=\"/login\" \r\n                        element={\r\n                          <React.Suspense fallback={<LoadingSpinner message=\"Loading login...\" />}>\r\n                            <div className={currentTheme.background}>\r\n                              <Login />\r\n                            </div>\r\n                          </React.Suspense>\r\n                        }\r\n                      />\r\n                      <Route element={\r\n                        <div className={currentTheme.background}>\r\n                          <PrivateRoute>\r\n                            <Layout />\r\n                          </PrivateRoute>\r\n                        </div>\r\n                      }>\r\n                        <Route index element={<Navigate to=\"/dashboard\" replace />} />\r\n                        <Route path=\"/dashboard\" element={<DashboardPage />} />\r\n                        <Route \r\n                          path=\"app/learning/*\" \r\n                          element={\r\n                            <React.Suspense fallback={<LoadingSpinner message=\"Loading learning management...\" />}>\r\n                              <LearningManagement />\r\n                            </React.Suspense>\r\n                          } \r\n                        />\r\n                        <Route path=\"analytics\" element={\r\n                          <React.Suspense fallback={<LoadingSpinner message=\"Loading analytics...\" />}>\r\n                            <Analytics />\r\n                          </React.Suspense>\r\n                        } />\r\n                        <Route path=\"schools\" element={\r\n                          <React.Suspense fallback={<LoadingSpinner message=\"Loading schools...\" />}>\r\n                            <Schools />\r\n                          </React.Suspense>\r\n                        } />\r\n                        <Route path=\"students\" element={\r\n                          <React.Suspense fallback={<LoadingSpinner message=\"Loading students...\" />}>\r\n                            <Students />\r\n                          </React.Suspense>\r\n                        } />\r\n                        <Route path=\"sales\" element={\r\n                          <React.Suspense fallback={<LoadingSpinner message=\"Loading sales...\" />}>\r\n                            <Sales />\r\n                          </React.Suspense>\r\n                        } />\r\n                        <Route path=\"content/*\" element={\r\n                          <React.Suspense fallback={<LoadingSpinner message=\"Loading content...\" />}>\r\n                            <Content />\r\n                          </React.Suspense>\r\n                        } />\r\n                        <Route path=\"development\" element={\r\n                          <React.Suspense fallback={<LoadingSpinner message=\"Loading development...\" />}>\r\n                            <Development />\r\n                          </React.Suspense>\r\n                        } />\r\n                        <Route path=\"infrastructure\" element={\r\n                          <React.Suspense fallback={<LoadingSpinner message=\"Loading infrastructure...\" />}>\r\n                            <Infrastructure />\r\n                          </React.Suspense>\r\n                        } />\r\n                        <Route path=\"finance/*\" element={\r\n                          <React.Suspense fallback={<LoadingSpinner message=\"Loading finance...\" />}>\r\n                            <Finance />\r\n                          </React.Suspense>\r\n                        } />\r\n                        <Route path=\"staff\" element={\r\n                          <React.Suspense fallback={<LoadingSpinner message=\"Loading staff...\" />}>\r\n                            <Staff />\r\n                          </React.Suspense>\r\n                        } />\r\n                        <Route path=\"schedule\" element={\r\n                          <React.Suspense fallback={<LoadingSpinner message=\"Loading schedule...\" />}>\r\n                            <Schedule />\r\n                          </React.Suspense>\r\n                        } />\r\n                        <Route path=\"reports\" element={\r\n                          <React.Suspense fallback={<LoadingSpinner message=\"Loading reports...\" />}>\r\n                            <Reports />\r\n                          </React.Suspense>\r\n                        } />\r\n                        <Route path=\"events\" element={\r\n                          <React.Suspense fallback={<LoadingSpinner message=\"Loading events...\" />}>\r\n                            <Events />\r\n                          </React.Suspense>\r\n                        } />\r\n                        <Route path=\"settings\" element={\r\n                          <React.Suspense fallback={<LoadingSpinner message=\"Loading settings...\" />}>\r\n                            <Settings />\r\n                          </React.Suspense>\r\n                        } />\r\n                        <Route path=\"error-test\" element={\r\n                          <React.Suspense fallback={<LoadingSpinner message=\"Loading error test...\" />}>\r\n                            <ErrorTest />\r\n                          </React.Suspense>\r\n                        } />\r\n                        <Route \r\n                          path=\"content-management\" \r\n                          element={\r\n                            <React.Suspense fallback={<LoadingSpinner message=\"Loading content management...\" />}>\r\n                              <ContentManagementPage />\r\n                            </React.Suspense>\r\n                          } \r\n                        />\r\n                        <Route\r\n                          path=\"my-classes\" \r\n                          element={\r\n                            <React.Suspense fallback={<LoadingSpinner message=\"Loading My Classes...\" />}>\r\n                              <MyClasses/>\r\n                            </React.Suspense>\r\n                          } \r\n                        />\r\n                      </Route>\r\n                      <Route \r\n                        path=\"/teacher/*\" \r\n                        element={\r\n                          <TeacherLayout>\r\n                            <Routes>\r\n                              <Route path=\"/\" element={<Navigate to=\"dashboard\" replace />} />\r\n                              <Route path=\"dashboard\" element={<TeacherDashboard />} />\r\n                              <Route path=\"classes\" element={<Classes />} />\r\n                              <Route path=\"lessons\" element={<Classes />} />\r\n                              <Route path=\"my-class\" element={\r\n                                <React.Suspense fallback={<LoadingSpinner message=\"Loading My Class...\" />}>\r\n                                  <TeacherMyClassPage />\r\n                                </React.Suspense>\r\n                              } />\r\n                              <Route path=\"AI-Conversation\" element={<AIConversationPage />} />\r\n                            </Routes>\r\n                          </TeacherLayout>\r\n                        } \r\n                      />\r\n                      <Route \r\n                        path=\"/reset-password/*\" \r\n                        element={<ResetPassword />} \r\n                      />\r\n                      <Route path=\"*\" element={<Navigate to=\"/dashboard\" replace />} />\r\n                    </Routes>\r\n                    <ErrorToast />\r\n                    {process.env.NODE_ENV === 'development' && (\r\n                      <React.Suspense fallback={null}>\r\n                        <ReactQueryDevtools initialIsOpen={false} />\r\n                      </React.Suspense>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                <Toaster />\r\n                {import.meta.env.DEV && <SessionDebugger />}\r\n              </ToastProvider>\r\n            </ThemeContextProvider>\r\n            </NextThemesProvider>\r\n          </ErrorProvider>\r\n        </AuthProvider>\r\n      </QueryClientProvider>\r\n    </ErrorBoundary>\r\n  );\r\n}\r\nexport default App;\r\n"
        }
    ]
}