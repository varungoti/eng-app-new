{
    "sourceFile": "src/App.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1739020320536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1739020320536,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport React from 'react';\r\nimport { Routes, Route, Navigate } from 'react-router-dom';\r\nimport { QueryClientProvider } from '@tanstack/react-query';\r\nimport { QueryClient  } from '@tanstack/query-core';\r\nimport { AuthProvider } from './contexts/AuthContext';\r\nimport { logger } from './lib/logger';\r\nimport { ErrorProvider } from './contexts/ErrorContext';\r\nimport { ThemeProvider as NextThemesProvider } from \"next-themes\";\r\nimport Layout from './components/Layout';\r\nimport PrivateRoute from './components/PrivateRoute';\r\nimport ErrorToast from './components/ErrorToast';\r\n//import { queryClient } from '@/providers/query-provider';\r\nimport ErrorBoundary from './components/ErrorBoundary';\r\nimport LoadingSpinner from './components/LoadingSpinner';\r\nimport ThemeSelector from './components/ThemeSelector';\r\nimport ContentManagementPage from './app/content-management/page' ;\r\nimport { ReactQueryDevtools } from '@tanstack/react-query-devtools';\r\nimport { ThemeToggle } from \"@/components/theme-toggle\"\r\nimport { useTheme } from \"next-themes\"\r\nimport { themes } from \"@/lib/themes\"\r\nimport { ThemeContextProvider } from './contexts/ThemeContext';\r\nimport { Toaster } from \"@/components/ui/toaster\";\r\nimport { ToastProvider } from \"@/components/ui/toast\";\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\n// Import Dashboard page directly to avoid dynamic import issues\r\nimport DashboardPage from './pages/Dashboard';\r\nimport MyClassesPage from './app/teacher/lessons/page';\r\n\r\n// Lazy load pages with proper error boundaries\r\nconst Login = React.lazy(() => import('./pages/Login'));\r\nconst Students = React.lazy(() => import('./pages/Students'));\r\nconst Development = React.lazy(() => import('./pages/Development'));\r\nconst Infrastructure = React.lazy(() => import('./pages/Infrastructure'));\r\nconst Reports = React.lazy(() => import('./pages/Reports'));\r\nconst Sales = React.lazy(() => import('./pages/Sales'));\r\nconst Content = React.lazy(() => import('./pages/Content'));\r\nconst LearningManagement = React.lazy(() => import('./app/learning/page'));\r\n\r\n// Import Staff page with retry logic\r\nconst Staff = React.lazy(() => {\r\n  return import('./pages/Staff').catch(err => {\r\n    logger.error('Failed to load Staff page', err);\r\n    return Promise.resolve({\r\n      default: () => (\r\n        <ErrorBoundary source=\"Staff\">\r\n          <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg\">\r\n            <h3 className=\"text-lg font-medium text-red-800\">Failed to load Staff page</h3>\r\n            <p className=\"mt-2 text-sm text-red-600\">Please try refreshing the page</p>\r\n          </div>\r\n        </ErrorBoundary>\r\n      )\r\n    });\r\n  });\r\n});\r\nconst Schedule = React.lazy(() => import('./pages/Schedule'));\r\nconst Settings = React.lazy(() => import('./pages/Settings'));\r\nconst Events = React.lazy(() => import('./pages/Events'));\r\nconst ErrorTest = React.lazy(() => import('./pages/ErrorTest'));\r\nconst Schools = React.lazy(() => import('./pages/Schools'));\r\nconst Finance = React.lazy(() => import('./pages/Finance'));\r\nconst Analytics = React.lazy(() => import('./pages/Analytics'));\r\nconst MyClasses = React.lazy(() => import('./app/teacher/lessons/page'));\r\n\r\nimport TeacherLayout from './app/teacher/layout';\r\nimport ProtectedRoute from './components/ProtectedRoute';\r\nimport TeacherDashboard from './app/teacher/dashboard/page';\r\nimport Classes from './app/teacher/lessons/page';\r\nimport AIConversationPage from './app/teacher/ai-conversation/page';\r\n//import CourseDetails from '/src/app/teacher/courses/page'; //';\r\n\r\n// Import the TeacherMyClassPage component\r\nconst TeacherMyClassPage = React.lazy(() => import('./app/teacher/my-class/page'));\r\n\r\nimport { ResetPassword } from \"@/components/auth/ResetPassword\";\r\nimport { SessionDebugger } from './components/SessionDebugger';\r\n\r\n// Create a new QueryClient instance\r\nconst queryClient = new QueryClient({\r\n  defaultOptions: {\r\n    queries: {\r\n      staleTime: 5 * 60 * 1000,\r\n      gcTime: 10 * 60 * 1000,\r\n    },\r\n  },\r\n});\r\n\r\nfunction App() {\r\n  const { theme, resolvedTheme } = useTheme()\r\n  const currentTheme = themes[theme as keyof typeof themes] || themes[resolvedTheme as keyof typeof themes] || themes.light\r\n\r\n  console.log('[App] Rendering...');\r\n  logger.info('App initializing', 'App');\r\n\r\n  return (\r\n    <ErrorBoundary source=\"App\">\r\n      <QueryClientProvider client={queryClient}>\r\n        <AuthProvider>\r\n          <ErrorProvider>\r\n            <NextThemesProvider\r\n              attribute=\"class\"\r\n              defaultTheme=\"light\"\r\n              value={{\r\n                light: \"light\",\r\n                dark: \"dark\",\r\n                gray: \"gray\",\r\n                contrast: \"contrast\"\r\n              }}\r\n            >\r\n              <ThemeContextProvider>\r\n                <ToastProvider>\r\n                <div className={`relative min-h-screen w-full ${currentTheme.background} ${currentTheme.text}`}>\r\n                  <ThemeToggle />\r\n                  <div className={`w-full ${currentTheme.background} ${currentTheme.text}`}>\r\n                    <Routes>\r\n                      <Route \r\n                        path=\"/login\" \r\n                        element={\r\n                          <React.Suspense fallback={<LoadingSpinner message=\"Loading login...\" />}>\r\n                            <div className={currentTheme.background}>\r\n                              <Login />\r\n                            </div>\r\n                          </React.Suspense>\r\n                        }\r\n                      />\r\n                      <Route element={\r\n                        <div className={currentTheme.background}>\r\n                          <PrivateRoute>\r\n                            <Layout />\r\n                          </PrivateRoute>\r\n                        </div>\r\n                      }>\r\n                        <Route index element={<Navigate to=\"/dashboard\" replace />} />\r\n                        <Route path=\"/dashboard\" element={<DashboardPage />} />\r\n                        <Route \r\n                          path=\"app/learning/*\" \r\n                          element={\r\n                            <React.Suspense fallback={<LoadingSpinner message=\"Loading learning management...\" />}>\r\n                              <LearningManagement />\r\n                            </React.Suspense>\r\n                          } \r\n                        />\r\n                        <Route path=\"analytics\" element={\r\n                          <React.Suspense fallback={<LoadingSpinner message=\"Loading analytics...\" />}>\r\n                            <Analytics />\r\n                          </React.Suspense>\r\n                        } />\r\n                        <Route path=\"schools\" element={\r\n                          <React.Suspense fallback={<LoadingSpinner message=\"Loading schools...\" />}>\r\n                            <Schools />\r\n                          </React.Suspense>\r\n                        } />\r\n                        <Route path=\"students\" element={\r\n                          <React.Suspense fallback={<LoadingSpinner message=\"Loading students...\" />}>\r\n                            <Students />\r\n                          </React.Suspense>\r\n                        } />\r\n                        <Route path=\"sales\" element={\r\n                          <React.Suspense fallback={<LoadingSpinner message=\"Loading sales...\" />}>\r\n                            <Sales />\r\n                          </React.Suspense>\r\n                        } />\r\n                        <Route path=\"content/*\" element={\r\n                          <React.Suspense fallback={<LoadingSpinner message=\"Loading content...\" />}>\r\n                            <Content />\r\n                          </React.Suspense>\r\n                        } />\r\n                        <Route path=\"development\" element={\r\n                          <React.Suspense fallback={<LoadingSpinner message=\"Loading development...\" />}>\r\n                            <Development />\r\n                          </React.Suspense>\r\n                        } />\r\n                        <Route path=\"infrastructure\" element={\r\n                          <React.Suspense fallback={<LoadingSpinner message=\"Loading infrastructure...\" />}>\r\n                            <Infrastructure />\r\n                          </React.Suspense>\r\n                        } />\r\n                        <Route path=\"finance/*\" element={\r\n                          <React.Suspense fallback={<LoadingSpinner message=\"Loading finance...\" />}>\r\n                            <Finance />\r\n                          </React.Suspense>\r\n                        } />\r\n                        <Route path=\"staff\" element={\r\n                          <React.Suspense fallback={<LoadingSpinner message=\"Loading staff...\" />}>\r\n                            <Staff />\r\n                          </React.Suspense>\r\n                        } />\r\n                        <Route path=\"schedule\" element={\r\n                          <React.Suspense fallback={<LoadingSpinner message=\"Loading schedule...\" />}>\r\n                            <Schedule />\r\n                          </React.Suspense>\r\n                        } />\r\n                        <Route path=\"reports\" element={\r\n                          <React.Suspense fallback={<LoadingSpinner message=\"Loading reports...\" />}>\r\n                            <Reports />\r\n                          </React.Suspense>\r\n                        } />\r\n                        <Route path=\"events\" element={\r\n                          <React.Suspense fallback={<LoadingSpinner message=\"Loading events...\" />}>\r\n                            <Events />\r\n                          </React.Suspense>\r\n                        } />\r\n                        <Route path=\"settings\" element={\r\n                          <React.Suspense fallback={<LoadingSpinner message=\"Loading settings...\" />}>\r\n                            <Settings />\r\n                          </React.Suspense>\r\n                        } />\r\n                        <Route path=\"error-test\" element={\r\n                          <React.Suspense fallback={<LoadingSpinner message=\"Loading error test...\" />}>\r\n                            <ErrorTest />\r\n                          </React.Suspense>\r\n                        } />\r\n                        <Route \r\n                          path=\"content-management\" \r\n                          element={\r\n                            <React.Suspense fallback={<LoadingSpinner message=\"Loading content management...\" />}>\r\n                              <ContentManagementPage />\r\n                            </React.Suspense>\r\n                          } \r\n                        />\r\n                        <Route\r\n                          path=\"my-classes\" \r\n                          element={\r\n                            <React.Suspense fallback={<LoadingSpinner message=\"Loading My Classes...\" />}>\r\n                              <MyClasses/>\r\n                            </React.Suspense>\r\n                          } \r\n                        />\r\n                      </Route>\r\n                      <Route \r\n                        path=\"/teacher/*\" \r\n                        element={\r\n                          <TeacherLayout>\r\n                            <Routes>\r\n                              <Route path=\"/\" element={<Navigate to=\"dashboard\" replace />} />\r\n                              <Route path=\"dashboard\" element={<TeacherDashboard />} />\r\n                              <Route path=\"classes\" element={<Classes />} />\r\n                              <Route path=\"lessons\" element={<Classes />} />\r\n                              <Route path=\"my-class\" element={\r\n                                <React.Suspense fallback={<LoadingSpinner message=\"Loading My Class...\" />}>\r\n                                  <TeacherMyClassPage />\r\n                                </React.Suspense>\r\n                              } />\r\n                              <Route path=\"AI-Conversation\" element={<AIConversationPage />} />\r\n                            </Routes>\r\n                          </TeacherLayout>\r\n                        } \r\n                      />\r\n                      <Route \r\n                        path=\"/reset-password/*\" \r\n                        element={<ResetPassword />} \r\n                      />\r\n                      <Route path=\"*\" element={<Navigate to=\"/dashboard\" replace />} />\r\n                    </Routes>\r\n                    <ErrorToast />\r\n                    {process.env.NODE_ENV === 'development' && (\r\n                      <React.Suspense fallback={null}>\r\n                        <ReactQueryDevtools initialIsOpen={false} />\r\n                      </React.Suspense>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                <Toaster />\r\n                {import.meta.env.DEV && <SessionDebugger />}\r\n              </ToastProvider>\r\n            </ThemeContextProvider>\r\n            </NextThemesProvider>\r\n          </ErrorProvider>\r\n        </AuthProvider>\r\n      </QueryClientProvider>\r\n    </ErrorBoundary>\r\n  );\r\n}\r\nexport default App;\r\n"
        }
    ]
}