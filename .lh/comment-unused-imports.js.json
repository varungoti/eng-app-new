{
    "sourceFile": "comment-unused-imports.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1740852476411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1740852476411,
            "name": "Commit-0",
            "content": "import { execSync } from 'child_process';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\nimport { fileURLToPath } from 'url';\r\n\r\n// Get current directory\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst __dirname = path.dirname(__filename);\r\n\r\nconsole.log('🔍 Finding and commenting out unused imports...');\r\n\r\n// Generate a report of unused imports using ESLint\r\ntry {\r\n  // First, run ESLint to identify unused imports\r\n  const output = execSync(\r\n    'npx eslint --quiet \"src/**/*.tsx\" \"src/**/*.ts\" --rule \"no-unused-vars: error\" --rule \"@typescript-eslint/no-unused-vars: error\" --format json',\r\n    { encoding: 'utf-8' }\r\n  );\r\n  \r\n  const results = JSON.parse(output);\r\n  const fileProblems = new Map();\r\n  \r\n  // Group problems by file\r\n  results.forEach(result => {\r\n    const { filePath, messages } = result;\r\n    \r\n    // Filter only for unused import messages\r\n    const unusedImports = messages.filter(msg => \r\n      (msg.ruleId === 'no-unused-vars' || msg.ruleId === '@typescript-eslint/no-unused-vars') &&\r\n      msg.line <= 30 // Most imports are at the top of files\r\n    );\r\n    \r\n    if (unusedImports.length > 0) {\r\n      fileProblems.set(filePath, unusedImports);\r\n    }\r\n  });\r\n  \r\n  console.log(`Found unused imports in ${fileProblems.size} files.`);\r\n  \r\n  // Process each file\r\n  let totalCommentsAdded = 0;\r\n  \r\n  for (const [filePath, problems] of fileProblems) {\r\n    console.log(`Processing ${path.relative(__dirname, filePath)}`);\r\n    \r\n    let content = fs.readFileSync(filePath, 'utf8');\r\n    const lines = content.split('\\n');\r\n    \r\n    // Sort problems by line number in descending order to avoid offset issues\r\n    problems.sort((a, b) => b.line - a.line);\r\n    \r\n    for (const problem of problems) {\r\n      const { line, message } = problem;\r\n      const lineIndex = line - 1;\r\n      \r\n      // Extract the import variable name from the error message\r\n      const match = message.match(/'([^']+)' is defined but never used/);\r\n      if (!match) continue;\r\n      \r\n      const unusedVar = match[1];\r\n      const lineContent = lines[lineIndex];\r\n      \r\n      // Check if this line is an import statement\r\n      if (lineContent.includes('import ')) {\r\n        // If it's a destructured import like: import { A, B, C } from 'module'\r\n        if (lineContent.includes(`{ ${unusedVar}`) || lineContent.includes(`, ${unusedVar}`) || lineContent.includes(`${unusedVar},`)) {\r\n          // Comment out just the unused variable in the destructuring\r\n          const parts = lineContent.split(/[{,}]/g);\r\n          let newLineContent = '';\r\n          let inBraces = false;\r\n          \r\n          for (let i = 0; i < parts.length; i++) {\r\n            let part = parts[i];\r\n            \r\n            if (part.includes('{')) {\r\n              inBraces = true;\r\n              newLineContent += part;\r\n              continue;\r\n            }\r\n            \r\n            if (part.includes('}')) {\r\n              inBraces = false;\r\n              newLineContent += part;\r\n              continue;\r\n            }\r\n            \r\n            if (inBraces && part.trim() === unusedVar) {\r\n              newLineContent += `/* ${part} */`;\r\n            } else {\r\n              newLineContent += part;\r\n            }\r\n            \r\n            if (i < parts.length - 1 && !parts[i+1].includes('}')) {\r\n              newLineContent += ',';\r\n            }\r\n          }\r\n          \r\n          lines[lineIndex] = newLineContent;\r\n        } else if (lineContent.includes(`import ${unusedVar} from`)) {\r\n          // For default imports: import Name from 'module'\r\n          lines[lineIndex] = `// ${lineContent} // Unused import`;\r\n        }\r\n        \r\n        totalCommentsAdded++;\r\n      }\r\n    }\r\n    \r\n    // Write the updated content back to the file\r\n    fs.writeFileSync(filePath, lines.join('\\n'), 'utf8');\r\n  }\r\n  \r\n  console.log(`✅ Added comments to ${totalCommentsAdded} unused imports across ${fileProblems.size} files.`);\r\n  console.log('🎉 Done! Now try running your build command.');\r\n  \r\n} catch (error) {\r\n  console.error('Error:', error.message);\r\n  console.error('Make sure ESLint is properly installed and configured.');\r\n} "
        }
    ]
}